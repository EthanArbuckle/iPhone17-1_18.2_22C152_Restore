uint64_t sub_1004ED544(uint64_t a1, void (*a2)(long long *__return_ptr, long long *, char *), uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t *a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  int64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  long long v24;
  long long v25;
  long long v26;
  uint64_t v27;
  int64_t v28;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  uint64_t v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  uint64_t v41;
  _OWORD v42[3];
  uint64_t v43;
  _OWORD v44[3];
  uint64_t v45;
  uint64_t *v46;

  v46 = a6;
  v27 = a1 + 64;
  v8 = 1 << *(unsigned char *)(a1 + 32);
  v9 = -1;
  if (v8 < 64) {
    v9 = ~(-1 << v8);
  }
  v10 = v9 & *(void *)(a1 + 64);
  v28 = (unint64_t)(v8 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v12 = 0;
  v13 = _swiftEmptyArrayStorage;
  if (v10) {
    goto LABEL_6;
  }
LABEL_7:
  if (__OFADD__(v12++, 1))
  {
    __break(1u);
    goto LABEL_35;
  }
  if (v12 >= v28) {
    goto LABEL_33;
  }
  v17 = *(void *)(v27 + 8 * v12);
  if (v17) {
    goto LABEL_19;
  }
  v18 = v12 + 1;
  if (v12 + 1 >= v28) {
    goto LABEL_33;
  }
  v17 = *(void *)(v27 + 8 * v18);
  if (v17)
  {
LABEL_18:
    v12 = v18;
LABEL_19:
    v10 = (v17 - 1) & v17;
    for (i = __clz(__rbit64(v17)) + (v12 << 6); ; i = v14 | (v12 << 6))
    {
      v19 = *(unsigned char *)(*(void *)(a1 + 48) + i);
      v20 = sub_100017238(*(void *)(a1 + 56) + 48 * i, (uint64_t)v44 + 8, &qword_10065CE70);
      LOBYTE(v44[0]) = v19;
      v42[0] = v44[0];
      v42[1] = v44[1];
      v42[2] = v44[2];
      v43 = v45;
      *((void *)&v33 + 1) = a4;
      *(void *)&v34 = a5(v20);
      LOBYTE(v32) = v42[0];
      a2(&v37, &v32, (char *)v42 + 8);
      if (v6) {
        break;
      }
      sub_100014524((uint64_t)&v32);
      sub_10001729C((uint64_t)v42, v46);
      if (*((void *)&v38 + 1))
      {
        v34 = v39;
        v35 = v40;
        v36 = v41;
        v32 = v37;
        v33 = v38;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_10028F274(0, v13[2] + 1, 1, v13);
          v13 = (void *)result;
        }
        v22 = v13[2];
        v21 = v13[3];
        if (v22 >= v21 >> 1)
        {
          result = (uint64_t)sub_10028F274((void *)(v21 > 1), v22 + 1, 1, v13);
          v13 = (void *)result;
        }
        v13[2] = v22 + 1;
        v23 = &v13[9 * v22];
        *((_OWORD *)v23 + 2) = v32;
        v24 = v33;
        v25 = v34;
        v26 = v35;
        v23[12] = v36;
        *((_OWORD *)v23 + 4) = v25;
        *((_OWORD *)v23 + 5) = v26;
        *((_OWORD *)v23 + 3) = v24;
        if (!v10) {
          goto LABEL_7;
        }
      }
      else
      {
        result = sub_10001729C((uint64_t)&v37, &qword_10065CE88);
        if (!v10) {
          goto LABEL_7;
        }
      }
LABEL_6:
      v14 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
    }
    sub_100014524((uint64_t)&v32);
    sub_10001729C((uint64_t)v42, v46);
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  v18 = v12 + 2;
  if (v12 + 2 >= v28)
  {
LABEL_33:
    swift_release();
    return (uint64_t)v13;
  }
  v17 = *(void *)(v27 + 8 * v18);
  if (v17) {
    goto LABEL_18;
  }
  v18 = v12 + 3;
  if (v12 + 3 >= v28) {
    goto LABEL_33;
  }
  v17 = *(void *)(v27 + 8 * v18);
  if (v17) {
    goto LABEL_18;
  }
  v18 = v12 + 4;
  if (v12 + 4 >= v28) {
    goto LABEL_33;
  }
  v17 = *(void *)(v27 + 8 * v18);
  if (v17) {
    goto LABEL_18;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v28) {
      goto LABEL_33;
    }
    v17 = *(void *)(v27 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_19;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_1004ED878(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10017B924(&qword_10065CE50);
    sub_1004ECFE4(a2, (void (*)(uint64_t))&type metadata accessor for ManagedAppStatus.Reason);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1004ED90C()
{
  return sub_1001CD9A4((void (*)(void))&_swift_release, 48);
}

uint64_t sub_1004ED928(uint64_t a1, void (*a2)(long long *__return_ptr, long long *, _OWORD *))
{
  uint64_t v22 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v35 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  v10 = _swiftEmptyArrayStorage;
  if (v7) {
    goto LABEL_6;
  }
LABEL_7:
  if (__OFADD__(v9++, 1))
  {
    __break(1u);
    goto LABEL_35;
  }
  if (v9 >= v35) {
    goto LABEL_33;
  }
  unint64_t v14 = *(void *)(v22 + 8 * v9);
  if (v14) {
    goto LABEL_19;
  }
  int64_t v15 = v9 + 1;
  if (v9 + 1 >= v35) {
    goto LABEL_33;
  }
  unint64_t v14 = *(void *)(v22 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v9 = v15;
LABEL_19:
    unint64_t v7 = (v14 - 1) & v14;
    for (unint64_t i = __clz(__rbit64(v14)) + (v9 << 6); ; unint64_t i = v11 | (v9 << 6))
    {
      sub_100017238(*(void *)(a1 + 56) + 48 * i, (uint64_t)v34, &qword_10065CE70);
      v33[0] = v34[0];
      v33[1] = v34[1];
      v33[2] = v34[2];
      *((void *)&v24 + 1) = &type metadata for DDMInstallHistoryEntryEntity.Property;
      *(void *)&long long v25 = sub_1002572A8();
      a2(&v28, &v23, v33);
      if (v2) {
        break;
      }
      sub_100014524((uint64_t)&v23);
      sub_10001729C((uint64_t)v33, &qword_100665F28);
      if (*((void *)&v29 + 1))
      {
        long long v25 = v30;
        long long v26 = v31;
        uint64_t v27 = v32;
        long long v23 = v28;
        long long v24 = v29;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_10028F274(0, v10[2] + 1, 1, v10);
          v10 = (void *)result;
        }
        unint64_t v17 = v10[2];
        unint64_t v16 = v10[3];
        if (v17 >= v16 >> 1)
        {
          uint64_t result = (uint64_t)sub_10028F274((void *)(v16 > 1), v17 + 1, 1, v10);
          v10 = (void *)result;
        }
        v10[2] = v17 + 1;
        v18 = &v10[9 * v17];
        *((_OWORD *)v18 + 2) = v23;
        long long v19 = v24;
        long long v20 = v25;
        long long v21 = v26;
        v18[12] = v27;
        *((_OWORD *)v18 + 4) = v20;
        *((_OWORD *)v18 + 5) = v21;
        *((_OWORD *)v18 + 3) = v19;
        if (!v7) {
          goto LABEL_7;
        }
      }
      else
      {
        uint64_t result = sub_10001729C((uint64_t)&v28, &qword_10065CE88);
        if (!v7) {
          goto LABEL_7;
        }
      }
LABEL_6:
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
    }
    sub_100014524((uint64_t)&v23);
    sub_10001729C((uint64_t)v33, &qword_100665F28);
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  int64_t v15 = v9 + 2;
  if (v9 + 2 >= v35)
  {
LABEL_33:
    swift_release();
    return (uint64_t)v10;
  }
  unint64_t v14 = *(void *)(v22 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  int64_t v15 = v9 + 3;
  if (v9 + 3 >= v35) {
    goto LABEL_33;
  }
  unint64_t v14 = *(void *)(v22 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  int64_t v15 = v9 + 4;
  if (v9 + 4 >= v35) {
    goto LABEL_33;
  }
  unint64_t v14 = *(void *)(v22 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v9 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v9 >= v35) {
      goto LABEL_33;
    }
    unint64_t v14 = *(void *)(v22 + 8 * v9);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_1004EDC30()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 72)) {
    sub_100014524(v0 + 48);
  }

  return _swift_deallocObject(v0, 97, 7);
}

uint64_t sub_1004EDC80()
{
  return sub_1001CD9A4((void (*)(void))&_swift_bridgeObjectRelease, 49);
}

uint64_t sub_1004EDC9C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1004EDCFC()
{
  unint64_t result = qword_100665F40;
  if (!qword_100665F40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665F40);
  }
  return result;
}

unint64_t sub_1004EDD50()
{
  unint64_t result = qword_100665F50;
  if (!qword_100665F50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665F50);
  }
  return result;
}

uint64_t sub_1004EDDA4(void *a1)
{
  uint64_t v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  id v1 = a1;
  uint64_t v2 = sub_10043A9D8((uint64_t)&v15, v1);
  uint64_t v4 = v3;

  if (*((void *)&v16 + 1)) {
    sub_100014524((uint64_t)&v15);
  }
  *(void *)&long long v15 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    type metadata accessor for DDMDeclarationStatusEntity.Entity();
    ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
    id v7 = v2;
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v9 = 0;
    while (v9 < *(void *)(v4 + 16))
    {
      uint64_t v10 = *(void *)(v4 + 8 * v9 + 32);
      id v11 = objc_allocWithZone(ObjCClassFromMetadata);
      id v12 = v7;
      id v13 = [v11 initWithPersistentID:v10 onConnection:v12];
      LODWORD(v10) = [v13 existsInDatabase];

      if (!v10)
      {
        swift_bridgeObjectRelease();

        id v12 = v13;
        goto LABEL_10;
      }
      ++v9;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized ContiguousArray._endMutation()();
      if (v5 == v9)
      {
        swift_bridgeObjectRelease();
LABEL_10:

        goto LABEL_11;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_11:
    uint64_t v14 = v15;
    swift_bridgeObjectRelease();

    return v14;
  }
  return result;
}

ValueMetadata *type metadata accessor for DDMDeclarationStatus()
{
  return &type metadata for DDMDeclarationStatus;
}

ValueMetadata *type metadata accessor for DDMDeclarationStatusEntity()
{
  return &type metadata for DDMDeclarationStatusEntity;
}

ValueMetadata *type metadata accessor for DDMDeclarationStatusEntity.Property()
{
  return &type metadata for DDMDeclarationStatusEntity.Property;
}

uint64_t sub_1004EDF98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004EDFAC);
}

uint64_t sub_1004EDFB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004EDFC4);
}

void sub_1004EDFCC()
{
  if (!qword_100665FD8)
  {
    type metadata accessor for ManagedAppStatus.UpdateState();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100665FD8);
    }
  }
}

uint64_t *sub_1004EE024(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v9;
    id v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for ManagedAppStatus.State();
    id v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    uint64_t v14 = a3[7];
    long long v15 = (char *)v4 + v14;
    long long v16 = (char *)a2 + v14;
    uint64_t updated = type metadata accessor for ManagedAppStatus.UpdateState();
    uint64_t v18 = *(void *)(updated - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, updated))
    {
      uint64_t v19 = sub_1000172F8(&qword_10065BD00);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, updated);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, updated);
    }
    *(uint64_t *)((char *)v4 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1004EE214(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for ManagedAppStatus.State();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t updated = type metadata accessor for ManagedAppStatus.UpdateState();
  uint64_t v8 = *(void *)(updated - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, updated)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, updated);
  }

  return swift_bridgeObjectRelease();
}

void *sub_1004EE32C(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for ManagedAppStatus.State();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v13;
  long long v15 = (char *)a2 + v13;
  uint64_t updated = type metadata accessor for ManagedAppStatus.UpdateState();
  uint64_t v17 = *(void *)(updated - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, updated))
  {
    uint64_t v18 = sub_1000172F8(&qword_10065BD00);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, updated);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, updated);
  }
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1004EE4CC(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for ManagedAppStatus.State();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t updated = type metadata accessor for ManagedAppStatus.UpdateState();
  uint64_t v14 = *(void *)(updated - 8);
  long long v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, updated);
  int v17 = v15(v12, 1, updated);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, updated);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, updated);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = sub_1000172F8(&qword_10065BD00);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, updated);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, updated);
LABEL_7:
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1004EE6F0(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for ManagedAppStatus.State();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t updated = type metadata accessor for ManagedAppStatus.UpdateState();
  uint64_t v15 = *(void *)(updated - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, updated))
  {
    uint64_t v16 = sub_1000172F8(&qword_10065BD00);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, updated);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, updated);
  }
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  return a1;
}

void *sub_1004EE868(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for ManagedAppStatus.State();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t updated = type metadata accessor for ManagedAppStatus.UpdateState();
  uint64_t v16 = *(void *)(updated - 8);
  int v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, updated);
  int v19 = v17(v14, 1, updated);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v13, v14, updated);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, updated);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v20 = sub_1000172F8(&qword_10065BD00);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, updated);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, updated);
LABEL_7:
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1004EEA64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004EEA78);
}

uint64_t sub_1004EEA7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for ManagedAppStatus.State();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1000172F8(&qword_10065BD00);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_1004EEBAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004EEBC0);
}

uint64_t sub_1004EEBC4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for ManagedAppStatus.State();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1000172F8(&qword_10065BD00);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 28);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_1004EECF4()
{
  type metadata accessor for ManagedAppStatus.State();
  if (v0 <= 0x3F)
  {
    sub_1004EDFCC();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

ValueMetadata *type metadata accessor for DDMDeclarationStatusDatabaseTransaction()
{
  return &type metadata for DDMDeclarationStatusDatabaseTransaction;
}

unint64_t sub_1004EEDE8()
{
  unint64_t result = qword_1006660B8;
  if (!qword_1006660B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006660B8);
  }
  return result;
}

unint64_t sub_1004EEE40()
{
  unint64_t result = qword_1006660E0;
  if (!qword_1006660E0)
  {
    sub_10017B924(&qword_1006660E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006660E0);
  }
  return result;
}

unint64_t sub_1004EEEA0()
{
  unint64_t result = qword_1006660F0;
  if (!qword_1006660F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006660F0);
  }
  return result;
}

unint64_t sub_1004EEEF8(void *a1)
{
  a1[1] = sub_1004EEF30();
  a1[2] = sub_1004EEF84();
  unint64_t result = sub_1004EEFD8();
  a1[3] = result;
  return result;
}

unint64_t sub_1004EEF30()
{
  unint64_t result = qword_100666168;
  if (!qword_100666168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100666168);
  }
  return result;
}

unint64_t sub_1004EEF84()
{
  unint64_t result = qword_100666170;
  if (!qword_100666170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100666170);
  }
  return result;
}

unint64_t sub_1004EEFD8()
{
  unint64_t result = qword_100666178;
  if (!qword_100666178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100666178);
  }
  return result;
}

unint64_t sub_1004EF02C()
{
  unint64_t result = qword_100666188;
  if (!qword_100666188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100666188);
  }
  return result;
}

uint64_t sub_1004EF080(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_10065BD00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004EF0E8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000015 && a2 == 0x80000001005C11D0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746172616C636564 && a2 == 0xEE0079654B6E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6574617473 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7453657461647075 && a2 == 0xEB00000000657461 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x736E6F73616572 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

unint64_t sub_1004EF338(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10063A1A8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

unsigned char *_s28ManagedAppDistributionDaemon26DDMDeclarationStatusEntityV8PropertyOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004EF450);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DDMDeclarationStatusDatabaseConfig.LegacyDeclarationStatus.CodingKeys()
{
  return &type metadata for DDMDeclarationStatusDatabaseConfig.LegacyDeclarationStatus.CodingKeys;
}

unint64_t sub_1004EF48C()
{
  unint64_t result = qword_1006661A0;
  if (!qword_1006661A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006661A0);
  }
  return result;
}

unint64_t sub_1004EF4E4()
{
  unint64_t result = qword_1006661A8;
  if (!qword_1006661A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006661A8);
  }
  return result;
}

unint64_t sub_1004EF53C()
{
  unint64_t result = qword_1006661B0;
  if (!qword_1006661B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006661B0);
  }
  return result;
}

uint64_t destroy for MigrateMarketplacePriorityListTask(id *a1)
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for MigrateMarketplacePriorityListTask(void *a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  a1[4] = *(void *)(a2 + 32);
  id v6 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MigrateMarketplacePriorityListTask(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MigrateMarketplacePriorityListTask(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v5 = a2[2];
  *(void *)(a1 + 8) = a2[1];
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[4];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MigrateMarketplacePriorityListTask()
{
  return &type metadata for MigrateMarketplacePriorityListTask;
}

uint64_t sub_1004EF718()
{
  v1[7] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[8] = v2;
  v1[9] = *(void *)(v2 - 8);
  v1[10] = swift_task_alloc();
  return _swift_task_switch(sub_1004EF7D8, 0, 0);
}

uint64_t sub_1004EF7D8()
{
  uint64_t v1 = sub_1004EFA4C();
  if (v2)
  {
    uint64_t v3 = v2;
    if (v1)
    {
      uint64_t v4 = *(void *)(v0 + 56);
      swift_bridgeObjectRetain();
      static Logger.daemon.getter();
      uint64_t v5 = *(void **)v4;
      *(_OWORD *)(v0 + 16) = *(_OWORD *)(v4 + 8);
      *(_OWORD *)(v0 + 32) = *(_OWORD *)(v4 + 24);
      id v6 = v5;
      sub_10018B0F0(v0 + 16);
      sub_10018B0F0(v0 + 32);
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        int v17 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v9 = 138412290;
        *(void *)(v0 + 48) = v6;
        int v18 = v7;
        id v10 = v6;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *int v17 = v6;

        uint64_t v7 = v18;
        sub_10018AFE0(v0 + 16);
        sub_10018AFE0(v0 + 32);
        _os_log_impl((void *)&_mh_execute_header, v18, v8, "[%@] Found marketplace priority list, migrating to LS.", v9, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_10018AFE0(v0 + 16);
        sub_10018AFE0(v0 + 32);
      }
      uint64_t v12 = *(void *)(v0 + 72);
      uint64_t v11 = *(void *)(v0 + 80);
      uint64_t v13 = *(void *)(v0 + 64);

      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
      char v14 = sub_1004F0108();
      swift_bridgeObjectRelease();
      if (v14) {
        sub_1004F118C(v3);
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t sub_1004EFA4C()
{
  uint64_t v1 = type metadata accessor for Logger();
  v29[5] = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URL.DirectoryHint();
  uint64_t v30 = *(void *)(v4 - 8);
  uint64_t v31 = v4;
  __chkstk_darwin(v4);
  id v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  char v14 = (char *)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v29 - v15;
  sub_1004F0674(v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_1002BDBEC((uint64_t)v9);
  }
  else
  {
    v29[3] = v1;
    v29[4] = v3;
    uint64_t v17 = v11;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v9, v10);
    long long v32 = *(_OWORD *)(v0 + 24);
    long long v33 = v32;
    uint64_t v19 = v30;
    uint64_t v18 = v31;
    (*(void (**)(char *, void, uint64_t))(v30 + 104))(v6, enum case for URL.DirectoryHint.inferFromPath(_:), v31);
    sub_100017B14();
    swift_bridgeObjectRetain();
    URL.appending<A>(component:directoryHint:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v18);
    swift_bridgeObjectRelease();
    id v20 = [self defaultManager];
    URL.path(percentEncoded:)(1);
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    unsigned int v22 = [v20 fileExistsAtPath:v21];

    if (v22)
    {
      uint64_t v23 = Data.init(contentsOf:options:)();
      unint64_t v25 = v24;
      type metadata accessor for PropertyListDecoder();
      swift_allocObject();
      PropertyListDecoder.init()();
      sub_1004F1BD0();
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      swift_release();
      sub_100013510(v23, v25);
      uint64_t v27 = *(void (**)(char *, uint64_t))(v17 + 8);
      v27(v14, v10);
      v27(v16, v10);
      return v32;
    }
    long long v26 = *(void (**)(char *, uint64_t))(v17 + 8);
    v26(v14, v10);
    v26(v16, v10);
  }
  return 0;
}

uint64_t sub_1004F0108()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(uint8_t **)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v39 - v6;
  id v8 = [self defaultWorkspace];
  if (v8)
  {
    uint64_t v9 = v8;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    *(void *)&long long v45 = 0;
    unsigned int v11 = [v9 setPreferredAppMarketplaces:isa error:&v45];

    if (v11)
    {
      id v12 = (id)v45;

      return 1;
    }
    id v23 = (id)v45;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    static Logger.daemon.getter();
    unint64_t v24 = *(void **)v0;
    long long v25 = *(_OWORD *)(v0 + 8);
    long long v44 = *(_OWORD *)(v0 + 24);
    long long v45 = v25;
    id v26 = v24;
    sub_10018B0F0((uint64_t)&v45);
    sub_10018B0F0((uint64_t)&v44);
    swift_errorRetain();
    id v27 = v26;
    sub_10018B0F0((uint64_t)&v45);
    sub_10018B0F0((uint64_t)&v44);
    swift_errorRetain();
    long long v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    int v30 = v29;
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v31 = swift_slowAlloc();
      int v40 = v30;
      uint64_t v32 = v31;
      uint64_t v33 = swift_slowAlloc();
      v41 = v2;
      v34 = (void *)v33;
      *(_DWORD *)uint64_t v32 = 138412546;
      os_log_t v39 = v28;
      uint64_t v43 = (uint64_t)v27;
      id v35 = v27;
      uint64_t v42 = v1;
      id v36 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v34 = v27;

      sub_10018AFE0((uint64_t)&v45);
      sub_10018AFE0((uint64_t)&v44);

      sub_10018AFE0((uint64_t)&v45);
      sub_10018AFE0((uint64_t)&v44);
      *(_WORD *)(v32 + 12) = 2112;
      swift_errorRetain();
      uint64_t v37 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v43 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v34[1] = v37;
      uint64_t v1 = v42;
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v38 = v39;
      _os_log_impl((void *)&_mh_execute_header, v39, (os_log_type_t)v40, "[%@] Error when setting marketplace priority list in LSApplicationWorkspace: %@", (uint8_t *)v32, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      uint64_t v2 = v41;
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {

      swift_errorRelease();
      sub_10018AFE0((uint64_t)&v45);
      sub_10018AFE0((uint64_t)&v44);

      sub_10018AFE0((uint64_t)&v45);
      sub_10018AFE0((uint64_t)&v44);
      swift_errorRelease();
      swift_errorRelease();
    }
    (*((void (**)(char *, uint64_t))v2 + 1))(v5, v1);
  }
  else
  {
    static Logger.daemon.getter();
    char v14 = *(void **)v0;
    long long v15 = *(_OWORD *)(v0 + 8);
    long long v44 = *(_OWORD *)(v0 + 24);
    long long v45 = v15;
    id v16 = v14;
    sub_10018B0F0((uint64_t)&v45);
    sub_10018B0F0((uint64_t)&v44);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v42 = v1;
      NSString v21 = (void *)v20;
      v41 = v19;
      *(_DWORD *)uint64_t v19 = 138412290;
      uint64_t v43 = (uint64_t)v16;
      id v22 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *NSString v21 = v16;

      sub_10018AFE0((uint64_t)&v45);
      sub_10018AFE0((uint64_t)&v44);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "[%@] Unable to migrate distributor priority list because LSApplicationWorkspace was unavailable", v41, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      uint64_t v1 = v42;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_10018AFE0((uint64_t)&v45);
      sub_10018AFE0((uint64_t)&v44);
    }

    (*((void (**)(char *, uint64_t))v2 + 1))(v7, v1);
  }
  return 0;
}

void sub_1004F0674(char *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  v60 = ((char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v52 - v8;
  uint64_t v10 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v10 - 8);
  id v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v64 = 0;
  uint64_t v17 = container_system_path_for_identifier();
  v62 = (void *)v17;
  if (v64 <= 1 && v17)
  {
    uint64_t v61 = v14;
    v59 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    v59(v12, 1, 1, v13);
    URL.init(fileURLWithFileSystemRepresentation:isDirectory:relativeTo:)();
    sub_1002BDBEC((uint64_t)v12);
    id v18 = [self defaultManager];
    URL._bridgeToObjectiveC()(v19);
    NSString v21 = v20;
    v67[0] = 0;
    unsigned int v22 = [v18 createDirectoryAtURL:v20 withIntermediateDirectories:1 attributes:0 error:v67];

    if (v22)
    {
      id v23 = v67[0];
      unint64_t v24 = v62;
      long long v25 = v59;
    }
    else
    {
      uint64_t v56 = v13;
      uint64_t v57 = v5;
      id v36 = v67[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      uint64_t v37 = v60;
      static Logger.daemon.getter();
      os_log_t v38 = *(void **)v2;
      long long v39 = *(_OWORD *)(v2 + 8);
      long long v66 = *(_OWORD *)(v2 + 24);
      *(_OWORD *)v67 = v39;
      id v40 = v38;
      sub_10018B0F0((uint64_t)v67);
      sub_10018B0F0((uint64_t)&v66);
      swift_errorRetain();
      id v41 = v40;
      sub_10018B0F0((uint64_t)v67);
      sub_10018B0F0((uint64_t)&v66);
      swift_errorRetain();
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.error.getter();
      int v44 = v43;
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v45 = swift_slowAlloc();
        int v55 = v44;
        uint64_t v46 = v45;
        uint64_t v47 = swift_slowAlloc();
        os_log_t v54 = v42;
        v53 = (void *)v47;
        *(_DWORD *)uint64_t v46 = 138412546;
        v58 = a1;
        *(void *)&long long v65 = v41;
        id v48 = v41;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v49 = v53;
        void *v53 = v41;

        sub_10018AFE0((uint64_t)v67);
        sub_10018AFE0((uint64_t)&v66);

        sub_10018AFE0((uint64_t)v67);
        sub_10018AFE0((uint64_t)&v66);
        *(_WORD *)(v46 + 12) = 2112;
        swift_errorRetain();
        uint64_t v50 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)&long long v65 = v50;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v49[1] = v50;
        a1 = v58;
        swift_errorRelease();
        swift_errorRelease();
        os_log_t v51 = v54;
        _os_log_impl((void *)&_mh_execute_header, v54, (os_log_type_t)v55, "[%@] Unable to obtain container path: %@", (uint8_t *)v46, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v37 = v60;
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();

        sub_10018AFE0((uint64_t)v67);
        sub_10018AFE0((uint64_t)&v66);

        sub_10018AFE0((uint64_t)v67);
        sub_10018AFE0((uint64_t)&v66);
        swift_errorRelease();
        swift_errorRelease();
      }
      unint64_t v24 = v62;
      long long v25 = v59;
      (*(void (**)(NSObject *, uint64_t))(v57 + 8))(v37, v4);
      uint64_t v13 = v56;
    }
    (*(void (**)(char *, char *, uint64_t))(v61 + 32))(a1, v16, v13);
    v25(a1, 0, 1, v13);
    goto LABEL_15;
  }
  static Logger.daemon.getter();
  id v26 = *(void **)v2;
  long long v27 = *(_OWORD *)(v2 + 8);
  long long v65 = *(_OWORD *)(v2 + 24);
  long long v66 = v27;
  id v28 = v26;
  sub_10018B0F0((uint64_t)&v66);
  sub_10018B0F0((uint64_t)&v65);
  os_log_type_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.error.getter();
  int v31 = v30;
  v60 = v29;
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v32 = swift_slowAlloc();
    uint64_t v61 = v14;
    uint64_t v33 = v32;
    uint64_t v57 = swift_slowAlloc();
    *(_DWORD *)uint64_t v33 = 138412546;
    LODWORD(v59) = v31;
    v67[0] = v28;
    id v34 = v28;
    v58 = a1;
    id v35 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(void *)uint64_t v57 = v28;

    sub_10018AFE0((uint64_t)&v66);
    sub_10018AFE0((uint64_t)&v65);
    *(_WORD *)(v33 + 12) = 2048;
    swift_beginAccess();
    unint64_t v63 = v64;
    a1 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v59, "[%@] Unable to obtain container path: %llu", (uint8_t *)v33, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v14 = v61;
    swift_slowDealloc();
  }
  else
  {

    sub_10018AFE0((uint64_t)&v66);
    sub_10018AFE0((uint64_t)&v65);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(a1, 1, 1, v13);
  unint64_t v24 = v62;
  if (v62) {
LABEL_15:
  }
    free(v24);
}

uint64_t sub_1004F0DF8()
{
  long long v2 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)v0;
  *(_OWORD *)(v1 + 32) = v2;
  *(void *)(v1 + 48) = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 56) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100006AF8;
  return sub_1004EF718();
}

uint64_t sub_1004F0E9C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_1000172F8(&qword_1006661D8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_1004F1C94();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v14 = a2;
  char v13 = 0;
  sub_1000172F8((uint64_t *)&unk_10065C5D0);
  sub_10027210C(&qword_10065DEC0);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v3)
  {
    uint64_t v14 = a3;
    char v13 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1004F105C()
{
  if (*v0) {
    return 0xD000000000000012;
  }
  else {
    return 0x797469726F697270;
  }
}

uint64_t sub_1004F10A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004F1CE8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004F10CC(uint64_t a1)
{
  unint64_t v2 = sub_1004F1C94();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004F1108(uint64_t a1)
{
  unint64_t v2 = sub_1004F1C94();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004F1144@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1004F1DF0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1004F1170(void *a1)
{
  return sub_1004F0E9C(a1, *v1, v1[1]);
}

uint64_t sub_1004F118C(uint64_t a1)
{
  uint64_t v50 = a1;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v52 = *(void *)(v2 - 8);
  uint64_t v53 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  os_log_t v54 = (char *)&v45 - v6;
  uint64_t v51 = type metadata accessor for URL.DirectoryHint();
  uint64_t v7 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v56 = (char *)&v45 - v19;
  __chkstk_darwin(v18);
  NSString v21 = (char *)&v45 - v20;
  sub_1004F0674(v12);
  uint64_t v55 = v14;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1) {
    return sub_1002BDBEC((uint64_t)v12);
  }
  uint64_t v47 = v17;
  v49 = v5;
  (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v21, v12, v13);
  v60[0] = *(_OWORD *)(v1 + 24);
  long long v58 = *(_OWORD *)(v1 + 24);
  uint64_t v23 = v51;
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for URL.DirectoryHint.inferFromPath(_:), v51);
  sub_100017B14();
  swift_bridgeObjectRetain();
  URL.appending<A>(component:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v23);
  swift_bridgeObjectRelease();
  static Logger.daemon.getter();
  unint64_t v24 = *(void **)v1;
  long long v59 = *(_OWORD *)(v1 + 8);
  sub_10018B0F0((uint64_t)v60);
  id v25 = v24;
  sub_10018B0F0((uint64_t)v60);
  id v26 = v25;
  sub_10018B0F0((uint64_t)&v59);
  long long v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  id v48 = v21;
  uint64_t v51 = (uint64_t)v26;
  if (v29)
  {
    uint64_t v30 = swift_slowAlloc();
    int v31 = (void *)swift_slowAlloc();
    uint64_t v46 = swift_slowAlloc();
    *(void *)&long long v58 = v46;
    *(_DWORD *)uint64_t v30 = 138412547;
    uint64_t v57 = (uint64_t)v26;
    id v32 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *int v31 = v26;

    sub_10018AFE0((uint64_t)v60);
    sub_10018AFE0((uint64_t)&v59);
    sub_10018AFE0((uint64_t)v60);
    *(_WORD *)(v30 + 12) = 2081;
    swift_beginAccess();
    sub_1002F9C14();
    uint64_t v33 = v13;
    uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v57 = sub_1000143F4(v34, v35, (uint64_t *)&v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "[%@] Removing marketplace priority list and saving preferences store to: %{private}s", (uint8_t *)v30, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v33 = v13;

    sub_10018AFE0((uint64_t)v60);
    sub_10018AFE0((uint64_t)&v59);
    sub_10018AFE0((uint64_t)v60);
  }

  id v36 = v54;
  os_log_t v54 = *(char **)(v52 + 8);
  ((void (*)(char *, uint64_t))v54)(v36, v53);
  uint64_t v37 = v50;
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  *(void *)&long long v58 = 0;
  *((void *)&v58 + 1) = v37;
  sub_1004F1B7C();
  swift_bridgeObjectRetain();
  uint64_t v38 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  unint64_t v40 = v39;
  swift_release();
  swift_bridgeObjectRelease();
  id v41 = v56;
  swift_beginAccess();
  uint64_t v42 = v47;
  (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v47, v41, v33);
  Data.write(to:options:)();
  os_log_type_t v43 = *(void (**)(char *, uint64_t))(v55 + 8);
  v43(v42, v33);
  swift_beginAccess();
  LOBYTE(v42) = sub_1004D11C8();
  swift_endAccess();
  int v44 = v48;
  if (v42)
  {
    swift_beginAccess();
    sub_1004D0820(0);
    swift_endAccess();
    sub_100013510(v38, v40);
    v43(v44, v33);
  }
  else
  {
    v43(v48, v33);
    sub_100013510(v38, v40);
  }
  return ((uint64_t (*)(char *, uint64_t))v43)(v41, v33);
}

unint64_t sub_1004F1B7C()
{
  unint64_t result = qword_1006661C8;
  if (!qword_1006661C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006661C8);
  }
  return result;
}

unint64_t sub_1004F1BD0()
{
  unint64_t result = qword_1006661D0;
  if (!qword_1006661D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006661D0);
  }
  return result;
}

void *assignWithCopy for LegacyDistributorPreferences(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for LegacyDistributorPreferences()
{
  return &type metadata for LegacyDistributorPreferences;
}

unint64_t sub_1004F1C94()
{
  unint64_t result = qword_1006661E0;
  if (!qword_1006661E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006661E0);
  }
  return result;
}

uint64_t sub_1004F1CE8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x797469726F697270 && a2 == 0xEC0000007473694CLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001005C11F0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1004F1DF0(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_1006661E8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_1004F1C94();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    uint64_t v8 = 0;
    sub_100014524((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000172F8((uint64_t *)&unk_10065C5D0);
    char v10 = 0;
    sub_10027210C((unint64_t *)&qword_10065DEA8);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v8 = v11;
    char v10 = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100014524((uint64_t)a1);
  }
  return v8;
}

unsigned char *storeEnumTagSinglePayload for LegacyDistributorPreferences.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004F20CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LegacyDistributorPreferences.CodingKeys()
{
  return &type metadata for LegacyDistributorPreferences.CodingKeys;
}

unint64_t sub_1004F2108()
{
  unint64_t result = qword_1006661F0;
  if (!qword_1006661F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006661F0);
  }
  return result;
}

unint64_t sub_1004F2160()
{
  unint64_t result = qword_1006661F8;
  if (!qword_1006661F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006661F8);
  }
  return result;
}

unint64_t sub_1004F21B8()
{
  unint64_t result = qword_100666200;
  if (!qword_100666200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100666200);
  }
  return result;
}

uint64_t sub_1004F220C()
{
  return sub_1004F2250();
}

uint64_t sub_1004F2250()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000172F8(&qword_10065B220);
  __chkstk_darwin(v2 - 8);
  unsigned int v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = 0;
  *(void *)(v7 + 24) = 0;
  long long v8 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v7 + 64) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v7 + 80) = v8;
  *(void *)(v7 + 96) = *(void *)(v1 + 64);
  long long v9 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v7 + 32) = *(_OWORD *)v1;
  *(_OWORD *)(v7 + 48) = v9;
  int v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  sub_100263CF8((id *)v1);
  if (v10 == 1)
  {
    sub_10001729C((uint64_t)v4, &qword_10065B220);
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    if (*(void *)(v7 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v12 = v13;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
    }
  }
  type metadata accessor for AppInstallTaskResult();
  if (v12 | v11)
  {
    v15[0] = 0;
    v15[1] = 0;
    v15[2] = v11;
    v15[3] = v12;
  }
  return swift_task_create();
}

uint64_t sub_1004F2480()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for IPA_InstallTask();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000172F8(&qword_10065B220);
  __chkstk_darwin(v6 - 8);
  long long v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  sub_1004F8554(v1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for IPA_InstallTask);
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = 0;
  uint64_t v13 = (void *)(v12 + 16);
  *(void *)(v12 + 24) = 0;
  sub_1004F871C((uint64_t)v5, v12 + v11, (uint64_t (*)(void))type metadata accessor for IPA_InstallTask);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10001729C((uint64_t)v8, &qword_10065B220);
    if (*v13)
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v14 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v16 = v15;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*v13) {
      goto LABEL_3;
    }
  }
  uint64_t v14 = 0;
  uint64_t v16 = 0;
LABEL_6:
  type metadata accessor for AppInstallTaskResult();
  if (v16 | v14)
  {
    v18[0] = 0;
    v18[1] = 0;
    v18[2] = v14;
    v18[3] = v16;
  }
  return swift_task_create();
}

uint64_t sub_1004F2744()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for IPA_FailTask();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000172F8(&qword_10065B220);
  __chkstk_darwin(v6 - 8);
  long long v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  sub_1004F8554(v1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for IPA_FailTask);
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = 0;
  uint64_t v13 = (void *)(v12 + 16);
  *(void *)(v12 + 24) = 0;
  sub_1004F871C((uint64_t)v5, v12 + v11, (uint64_t (*)(void))type metadata accessor for IPA_FailTask);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10001729C((uint64_t)v8, &qword_10065B220);
    if (*v13)
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v14 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v16 = v15;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*v13) {
      goto LABEL_3;
    }
  }
  uint64_t v14 = 0;
  uint64_t v16 = 0;
LABEL_6:
  type metadata accessor for AppInstallTaskResult();
  if (v16 | v14)
  {
    v18[0] = 0;
    v18[1] = 0;
    v18[2] = v14;
    v18[3] = v16;
  }
  return swift_task_create();
}

uint64_t sub_1004F2A08()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000172F8(&qword_10065B220);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = 0;
  *(void *)(v7 + 24) = 0;
  long long v8 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v7 + 32) = *(_OWORD *)v1;
  *(_OWORD *)(v7 + 48) = v8;
  *(_OWORD *)(v7 + 64) = *(_OWORD *)(v1 + 32);
  *(void *)(v7 + 80) = *(void *)(v1 + 48);
  int v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  sub_1004F7B98((id *)v1);
  if (v9 == 1)
  {
    sub_10001729C((uint64_t)v4, &qword_10065B220);
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    if (*(void *)(v7 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v11 = v12;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
    }
  }
  type metadata accessor for AppInstallTaskResult();
  if (v11 | v10)
  {
    v14[0] = 0;
    v14[1] = 0;
    v14[2] = v10;
    v14[3] = v11;
  }
  return swift_task_create();
}

uint64_t sub_1004F2C38()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000172F8(&qword_10065B220);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = 0;
  *(void *)(v7 + 24) = 0;
  long long v8 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v7 + 96) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v7 + 112) = v8;
  *(void *)(v7 + 128) = *(void *)(v1 + 96);
  long long v9 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v7 + 32) = *(_OWORD *)v1;
  *(_OWORD *)(v7 + 48) = v9;
  long long v10 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v7 + 64) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v7 + 80) = v10;
  int v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  sub_1004F8340(v1);
  if (v11 == 1)
  {
    sub_10001729C((uint64_t)v4, &qword_10065B220);
    uint64_t v12 = 0;
    uint64_t v13 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    if (*(void *)(v7 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v13 = v14;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
  }
  type metadata accessor for AppInstallTaskResult();
  if (v13 | v12)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = v12;
    v16[3] = v13;
  }
  return swift_task_create();
}

uint64_t sub_1004F2E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 88) = a1;
  sub_1000172F8((uint64_t *)&unk_100661AB0);
  *(void *)(v4 + 96) = swift_task_alloc();
  long long v6 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v4 + 64) = v6;
  *(void *)(v4 + 80) = *(void *)(a4 + 64);
  long long v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(v4 + 32) = v7;
  return _swift_task_switch(sub_1004F2F28, 0, 0);
}

void sub_1004F2F28()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = (void *)v0[2];
  v0[13] = v2;
  uint64_t v3 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v1, 1, 1, v3);
  uint64_t v4 = swift_task_alloc();
  v0[14] = v4;
  *(void *)(v4 + 16) = v0 + 2;
  long long v8 = (char *)&dword_10065CCE8 + dword_10065CCE8;
  id v5 = v2;
  long long v6 = (void *)swift_task_alloc();
  v0[15] = v6;
  *long long v6 = v0;
  v6[1] = sub_1004F3084;
  __asm { BR              X8 }
}

uint64_t sub_1004F3084()
{
  uint64_t v2 = *(void **)(*v1 + 104);
  uint64_t v3 = *(void *)(*v1 + 96);
  uint64_t v4 = *v1;
  *(void *)(v4 + 128) = v0;
  swift_task_dealloc();
  sub_10001729C(v3, (uint64_t *)&unk_100661AB0);

  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1004F3230, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    id v5 = *(uint64_t (**)(void))(v4 + 8);
    return v5();
  }
}

uint64_t sub_1004F3230()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004F3294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a1;
  v4[3] = a4;
  sub_1000172F8((uint64_t *)&unk_100661AB0);
  v4[4] = swift_task_alloc();
  return _swift_task_switch(sub_1004F3328, 0, 0);
}

void sub_1004F3328()
{
  uint64_t v2 = (void **)v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = *v2;
  v0[5] = *v2;
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v1, 1, 1, v4);
  uint64_t v5 = swift_task_alloc();
  v0[6] = v5;
  *(void *)(v5 + 16) = v2;
  uint64_t v9 = (char *)&dword_10065CCE8 + dword_10065CCE8;
  id v6 = v3;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[7] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1004F3484;
  __asm { BR              X8 }
}

uint64_t sub_1004F3484()
{
  uint64_t v2 = *(void **)(*v1 + 40);
  uint64_t v3 = *(void *)(*v1 + 32);
  uint64_t v4 = *v1;
  *(void *)(v4 + 64) = v0;
  swift_task_dealloc();
  sub_10001729C(v3, (uint64_t *)&unk_100661AB0);

  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1004F3630, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v4 + 8);
    return v5();
  }
}

uint64_t sub_1004F3630()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004F3694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a1;
  v4[3] = a4;
  sub_1000172F8((uint64_t *)&unk_100661AB0);
  v4[4] = swift_task_alloc();
  return _swift_task_switch(sub_1004F3728, 0, 0);
}

void sub_1004F3728()
{
  uint64_t v2 = (void **)v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = *v2;
  v0[5] = *v2;
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v1, 1, 1, v4);
  uint64_t v5 = swift_task_alloc();
  v0[6] = v5;
  *(void *)(v5 + 16) = v2;
  uint64_t v9 = (char *)&dword_10065CCE8 + dword_10065CCE8;
  id v6 = v3;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[7] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1004F3884;
  __asm { BR              X8 }
}

uint64_t sub_1004F3884()
{
  uint64_t v2 = *(void **)(*v1 + 40);
  uint64_t v3 = *(void *)(*v1 + 32);
  uint64_t v4 = *v1;
  *(void *)(v4 + 64) = v0;
  swift_task_dealloc();
  sub_10001729C(v3, (uint64_t *)&unk_100661AB0);

  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1004F8968, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v4 + 8);
    return v5();
  }
}

uint64_t sub_1004F3A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a1;
  sub_1000172F8((uint64_t *)&unk_100661AB0);
  *(void *)(v4 + 80) = swift_task_alloc();
  long long v6 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(v4 + 32) = v6;
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a4 + 32);
  *(void *)(v4 + 64) = *(void *)(a4 + 48);
  return _swift_task_switch(sub_1004F3AE0, 0, 0);
}

void sub_1004F3AE0()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = (void *)v0[2];
  v0[11] = v2;
  uint64_t v3 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v1, 1, 1, v3);
  uint64_t v4 = swift_task_alloc();
  v0[12] = v4;
  *(void *)(v4 + 16) = v0 + 2;
  uint64_t v8 = (char *)&dword_10065CCE8 + dword_10065CCE8;
  id v5 = v2;
  long long v6 = (void *)swift_task_alloc();
  v0[13] = v6;
  *long long v6 = v0;
  v6[1] = sub_1004F3C3C;
  __asm { BR              X8 }
}

uint64_t sub_1004F3C3C()
{
  uint64_t v2 = *(void **)(*v1 + 88);
  uint64_t v3 = *(void *)(*v1 + 80);
  uint64_t v4 = *v1;
  *(void *)(v4 + 112) = v0;
  swift_task_dealloc();
  sub_10001729C(v3, (uint64_t *)&unk_100661AB0);

  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1004F3DE8, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    id v5 = *(uint64_t (**)(void))(v4 + 8);
    return v5();
  }
}

uint64_t sub_1004F3DE8()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004F3E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 120) = a1;
  sub_1000172F8((uint64_t *)&unk_100661AB0);
  *(void *)(v4 + 128) = swift_task_alloc();
  long long v6 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(v4 + 80) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v4 + 96) = v6;
  *(void *)(v4 + 112) = *(void *)(a4 + 96);
  long long v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(v4 + 32) = v7;
  long long v8 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v4 + 64) = v8;
  return _swift_task_switch(sub_1004F3F04, 0, 0);
}

void sub_1004F3F04()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = (void *)v0[2];
  v0[17] = v2;
  uint64_t v3 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v1, 1, 1, v3);
  uint64_t v4 = swift_task_alloc();
  v0[18] = v4;
  *(void *)(v4 + 16) = v0 + 2;
  long long v8 = (char *)&dword_10065CCE8 + dword_10065CCE8;
  id v5 = v2;
  long long v6 = (void *)swift_task_alloc();
  v0[19] = v6;
  *long long v6 = v0;
  v6[1] = sub_1004F4060;
  __asm { BR              X8 }
}

uint64_t sub_1004F4060()
{
  uint64_t v2 = *(void **)(*v1 + 136);
  uint64_t v3 = *(void *)(*v1 + 128);
  uint64_t v4 = *v1;
  *(void *)(v4 + 160) = v0;
  swift_task_dealloc();
  sub_10001729C(v3, (uint64_t *)&unk_100661AB0);

  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1004F420C, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    id v5 = *(uint64_t (**)(void))(v4 + 8);
    return v5();
  }
}

uint64_t sub_1004F420C()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004F4270(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10000B238;
  return sub_100289E58(a1);
}

uint64_t sub_1004F430C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000176B4;
  return sub_1004B7324(a1);
}

void sub_1004F43A8()
{
  qword_10068DAA8 = (uint64_t)&off_100639DB8;
}

void sub_1004F43BC()
{
  qword_10068DAB0 = (uint64_t)&off_1006370C0;
}

uint64_t sub_1004F43D0(unsigned __int8 *a1, char *a2)
{
  return sub_10051E8F0(*a1, *a2);
}

Swift::Int sub_1004F43DC()
{
  return sub_10044A634();
}

uint64_t sub_1004F43E8()
{
  return sub_10044A2D4();
}

Swift::Int sub_1004F43F0()
{
  return sub_10044A634();
}

unint64_t sub_1004F43F8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1004F8910(*a1);
  *a2 = result;
  return result;
}

void sub_1004F4428(void *a1@<X8>)
{
  uint64_t v2 = 0x656C626D61657270;
  switch(*v1)
  {
    case 1:
      uint64_t v2 = 0x64616F6C6E776F64;
      goto LABEL_3;
    case 2:
      *a1 = 0x6C6C6174736E69;
      a1[1] = 0xE700000000000000;
      return;
    case 3:
      *a1 = 0x6C626D6174736F70;
      a1[1] = 0xE900000000000065;
      return;
    case 4:
      *a1 = 0x656C6C65636E6163;
      a1[1] = 0xE900000000000064;
      return;
    case 5:
      uint64_t v3 = 1937072496;
      goto LABEL_10;
    case 6:
      *a1 = 0x64656873696E6966;
      a1[1] = 0xE800000000000000;
      return;
    case 7:
      uint64_t v3 = 1818845542;
LABEL_10:
      *a1 = v3 & 0xFFFF0000FFFFFFFFLL | 0x646500000000;
      a1[1] = 0xE600000000000000;
      break;
    default:
LABEL_3:
      *a1 = v2;
      a1[1] = 0xE800000000000000;
      break;
  }
}

uint64_t sub_1004F4538()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1004F4598()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1004F45E8()
{
  uint64_t result = 0x656C626D61657270;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x64616F6C6E776F64;
      break;
    case 2:
      uint64_t result = 0x6C6C6174736E69;
      break;
    case 3:
      uint64_t result = 0x6C626D6174736F70;
      break;
    case 4:
      uint64_t result = 0x656C6C65636E6163;
      break;
    case 5:
      uint64_t result = 0x646573756170;
      break;
    case 6:
      uint64_t result = 0x64656873696E6966;
      break;
    case 7:
      uint64_t result = 0x64656C696166;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1004F46E4()
{
  uint64_t v1 = type metadata accessor for AppInstallTaskResult();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (unsigned __int8 *)&v41 - v6;
  sub_1004F8554(v0, (uint64_t)&v41 - v6, (uint64_t (*)(void))type metadata accessor for AppInstallTaskResult);
  uint64_t v8 = 0x6873696E6966;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v10 = *(void *)v7;
      v43[0] = 0x286B636F6C62;
      v43[1] = 0xE600000000000000;
      uint64_t v42 = v10;
      goto LABEL_10;
    case 2u:
      int v11 = *(void **)v7;
      strcpy((char *)v43, "coordinator(");
      BYTE5(v43[1]) = 0;
      HIWORD(v43[1]) = -5120;
      id v12 = [v11 description];
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = v14;

      v16._countAndFlagsBits = v13;
      v16._object = v15;
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      v17._countAndFlagsBits = 41;
      v17._object = (void *)0xE100000000000000;
      String.append(_:)(v17);

      return v43[0];
    case 3u:
      v43[0] = 0;
      v43[1] = 0xE000000000000000;
      v18._countAndFlagsBits = 0x286C696166;
      v18._object = (void *)0xE500000000000000;
      String.append(_:)(v18);
      swift_getErrorValue();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v19._countAndFlagsBits = 41;
      v19._object = (void *)0xE100000000000000;
      String.append(_:)(v19);
      swift_errorRelease();
      return v43[0];
    case 4u:
      uint64_t v20 = *v7;
      v43[0] = 0x287478656ELL;
      v43[1] = 0xE500000000000000;
      unint64_t v21 = 0xE800000000000000;
      uint64_t v22 = 0x656C626D61657270;
      switch(v20)
      {
        case 1:
          uint64_t v22 = 0x64616F6C6E776F64;
          break;
        case 2:
          unint64_t v21 = 0xE700000000000000;
          uint64_t v22 = 0x6C6C6174736E69;
          break;
        case 3:
          unint64_t v21 = 0xE900000000000065;
          uint64_t v22 = 0x6C626D6174736F70;
          break;
        case 4:
          uint64_t v22 = 0x656C6C65636E6163;
          unint64_t v21 = 0xE900000000000064;
          break;
        case 5:
          unint64_t v21 = 0xE600000000000000;
          uint64_t v38 = 1937072496;
          goto LABEL_28;
        case 6:
          uint64_t v22 = 0x64656873696E6966;
          break;
        case 7:
          unint64_t v21 = 0xE600000000000000;
          uint64_t v38 = 1818845542;
LABEL_28:
          uint64_t v22 = v38 & 0xFFFF0000FFFFFFFFLL | 0x646500000000;
          break;
        default:
          break;
      }
      unint64_t v24 = v21;
      goto LABEL_30;
    case 5u:
      sub_1004F4D7C((uint64_t)v7);
      return 1802658160;
    case 6u:
      uint64_t v23 = *(void *)v7;
      v43[0] = 0;
      v43[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      strcpy((char *)v43, "requestCount(");
      HIWORD(v43[1]) = -4864;
      uint64_t v42 = v23;
      goto LABEL_10;
    case 7u:
      uint64_t v25 = *(void *)v7;
      int64_t v26 = *(void *)(*(void *)v7 + 16);
      if (v26)
      {
        v43[0] = _swiftEmptyArrayStorage;
        sub_100455C1C(0, v26, 0);
        uint64_t v27 = *(unsigned __int8 *)(v2 + 80);
        uint64_t v41 = v25;
        uint64_t v28 = v25 + ((v27 + 32) & ~v27);
        uint64_t v29 = *(void *)(v2 + 72);
        uint64_t v30 = (void *)v43[0];
        do
        {
          uint64_t v31 = sub_1004F8554(v28, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for AppInstallTaskResult);
          uint64_t v32 = sub_1004F46E4(v31);
          uint64_t v34 = v33;
          sub_1004F4D7C((uint64_t)v5);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_100455C1C(0, v30[2] + 1, 1);
            uint64_t v30 = (void *)v43[0];
          }
          unint64_t v36 = v30[2];
          unint64_t v35 = v30[3];
          if (v36 >= v35 >> 1)
          {
            sub_100455C1C(v35 > 1, v36 + 1, 1);
            uint64_t v30 = (void *)v43[0];
          }
          v30[2] = v36 + 1;
          uint64_t v37 = &v30[2 * v36];
          v37[4] = v32;
          v37[5] = v34;
          v28 += v29;
          --v26;
        }
        while (v26);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v30 = _swiftEmptyArrayStorage;
      }
      v43[0] = v30;
      sub_1000172F8((uint64_t *)&unk_10065C5D0);
      sub_10017B8C8();
      uint64_t v8 = BidirectionalCollection<>.joined(separator:)();
      swift_bridgeObjectRelease();
      return v8;
    case 8u:
      return v8;
    case 9u:
      return 7368558;
    default:
      uint64_t v9 = *(void *)v7;
      strcpy((char *)v43, "assetSize(");
      BYTE3(v43[1]) = 0;
      HIDWORD(v43[1]) = -369098752;
      uint64_t v42 = v9;
LABEL_10:
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
LABEL_30:
      String.append(_:)(*(Swift::String *)&v22);
      swift_bridgeObjectRelease();
      v39._countAndFlagsBits = 41;
      v39._object = (void *)0xE100000000000000;
      String.append(_:)(v39);
      return v43[0];
  }
}

uint64_t type metadata accessor for AppInstallTaskResult()
{
  uint64_t result = qword_100666278;
  if (!qword_100666278) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1004F4CEC()
{
  return sub_1004F2A08();
}

uint64_t sub_1004F4D30()
{
  return sub_1004F2C38();
}

uint64_t sub_1004F4D7C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AppInstallTaskResult();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for AppInstallPhase(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004F4EA4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppInstallPhase()
{
  return &type metadata for AppInstallPhase;
}

void **sub_1004F4EDC(void **a1, void **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        uint64_t v7 = *a2;
        *a1 = *a2;
        id v8 = v7;
        swift_storeEnumTagMultiPayload();
        return a1;
      case 3u:
        int v11 = *a2;
        swift_errorRetain();
        *a1 = v11;
        swift_storeEnumTagMultiPayload();
        return a1;
      case 5u:
        uint64_t v12 = type metadata accessor for AppInstallScheduler.ParkReason();
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          *a1 = *a2;
          uint64_t v41 = (int *)type metadata accessor for DownloadRequest();
          uint64_t v42 = v41[5];
          os_log_type_t v43 = (char *)a1 + v42;
          int v44 = (char *)a2 + v42;
          uint64_t v45 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 16))(v43, v44, v45);
          uint64_t v46 = v41[6];
          uint64_t v47 = (char *)a1 + v46;
          id v48 = (char *)a2 + v46;
          *uint64_t v47 = *v48;
          *((void *)v47 + 1) = *((void *)v48 + 1);
          *((_WORD *)v47 + 8) = *((_WORD *)v48 + 8);
          uint64_t v49 = *((void *)v48 + 4);
          *((void *)v47 + 3) = *((void *)v48 + 3);
          *((void *)v47 + 4) = v49;
          uint64_t v50 = *((void *)v48 + 6);
          *((void *)v47 + 5) = *((void *)v48 + 5);
          *((void *)v47 + 6) = v50;
          v47[56] = v48[56];
          uint64_t v51 = v41[7];
          uint64_t v52 = (char *)a1 + v51;
          uint64_t v53 = (char *)a2 + v51;
          long long v54 = *(_OWORD *)((char *)a2 + v51 + 24);
          *(_OWORD *)((char *)a1 + v51 + 24) = v54;
          uint64_t v55 = v54;
          uint64_t v56 = **(void (***)(char *, char *, uint64_t))(v54 - 8);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v56(v52, v53, v55);
          uint64_t v57 = v41[8];
          long long v58 = *(void **)((char *)a2 + v57);
          *(void **)((char *)a1 + v57) = v58;
          *((unsigned char *)a1 + v41[9]) = *((unsigned char *)a2 + v41[9]);
          uint64_t v59 = v41[10];
          v60 = (char *)a1 + v59;
          uint64_t v61 = (char *)a2 + v59;
          *(void *)v60 = *(void *)v61;
          v60[8] = v61[8];
          *((unsigned char *)a1 + v41[11]) = *((unsigned char *)a2 + v41[11]);
          uint64_t v62 = v41[12];
          unint64_t v63 = (char *)a1 + v62;
          unint64_t v64 = (char *)a2 + v62;
          uint64_t v65 = *(uint64_t *)((char *)a2 + v62 + 16);
          id v66 = v58;
          if (v65 == 1)
          {
            long long v67 = *((_OWORD *)v64 + 1);
            *(_OWORD *)unint64_t v63 = *(_OWORD *)v64;
            *((_OWORD *)v63 + 1) = v67;
            *((_OWORD *)v63 + 2) = *((_OWORD *)v64 + 2);
          }
          else
          {
            *unint64_t v63 = *v64;
            *((void *)v63 + 1) = *((void *)v64 + 1);
            *((void *)v63 + 2) = v65;
            *((void *)v63 + 3) = *((void *)v64 + 3);
            v63[32] = v64[32];
            *((void *)v63 + 5) = *((void *)v64 + 5);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          uint64_t v83 = v41[13];
          v84 = (uint64_t *)((char *)a1 + v83);
          v85 = (uint64_t *)((char *)a2 + v83);
          uint64_t v86 = *v85;
          unint64_t v87 = v85[1];
          uint64_t v88 = v85[2];
          unint64_t v89 = v85[3];
          uint64_t v90 = v85[4];
          uint64_t v114 = v85[7];
          uint64_t v116 = v85[6];
          uint64_t v118 = v85[8];
          uint64_t v120 = v85[9];
          unint64_t v122 = v85[10];
          unint64_t v124 = v85[11];
          uint64_t v126 = v85[12];
          uint64_t v128 = v85[13];
          v130 = v41;
          uint64_t v91 = v85[5];
          sub_100254D34(*v85, v87, v88, v89, v90, v91, v116, v114, v118, v120, v122, v124);
          uint64_t *v84 = v86;
          v84[1] = v87;
          v84[2] = v88;
          v84[3] = v89;
          v84[4] = v90;
          v84[5] = v91;
          v77 = v130;
          v84[6] = v116;
          v84[7] = v114;
          v84[8] = v118;
          v84[9] = v120;
          v84[10] = v122;
          v84[11] = v124;
          v84[12] = v126;
          v84[13] = v128;
          uint64_t v92 = v130[14];
          v93 = (char *)a1 + v92;
          v94 = (char *)a2 + v92;
          uint64_t v95 = *(uint64_t *)((char *)a2 + v92 + 32);
          if (v95)
          {
            char *v93 = *v94;
            uint64_t v96 = *((void *)v94 + 5);
            *((void *)v93 + 4) = v95;
            *((void *)v93 + 5) = v96;
            (**(void (***)(uint64_t, uint64_t))(v95 - 8))((uint64_t)(v93 + 8), (uint64_t)(v94 + 8));
            *((_OWORD *)v93 + 3) = *((_OWORD *)v94 + 3);
          }
          else
          {
            long long v103 = *((_OWORD *)v94 + 1);
            *(_OWORD *)v93 = *(_OWORD *)v94;
            *((_OWORD *)v93 + 1) = v103;
            long long v104 = *((_OWORD *)v94 + 3);
            *((_OWORD *)v93 + 2) = *((_OWORD *)v94 + 2);
            *((_OWORD *)v93 + 3) = v104;
          }
          *((unsigned char *)a1 + v130[15]) = *((unsigned char *)a2 + v130[15]);
          uint64_t v105 = v130[16];
          v100 = (char *)a1 + v105;
          v101 = (char *)a2 + v105;
          uint64_t v102 = *(uint64_t *)((char *)a2 + v105 + 24);
          if (!v102)
          {
            long long v108 = *((_OWORD *)v101 + 1);
            *(_OWORD *)v100 = *(_OWORD *)v101;
            *((_OWORD *)v100 + 1) = v108;
            *((void *)v100 + 4) = *((void *)v101 + 4);
            goto LABEL_30;
          }
        }
        else
        {
          if (EnumCaseMultiPayload)
          {
            memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
LABEL_31:
            swift_storeEnumTagMultiPayload();
            return a1;
          }
          *a1 = *a2;
          uint64_t v14 = (int *)type metadata accessor for DownloadRequest();
          uint64_t v15 = v14[5];
          Swift::String v16 = (char *)a1 + v15;
          Swift::String v17 = (char *)a2 + v15;
          uint64_t v18 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
          uint64_t v19 = v14[6];
          uint64_t v20 = (char *)a1 + v19;
          unint64_t v21 = (char *)a2 + v19;
          *uint64_t v20 = *v21;
          *((void *)v20 + 1) = *((void *)v21 + 1);
          *((_WORD *)v20 + 8) = *((_WORD *)v21 + 8);
          uint64_t v22 = *((void *)v21 + 4);
          *((void *)v20 + 3) = *((void *)v21 + 3);
          *((void *)v20 + 4) = v22;
          uint64_t v23 = *((void *)v21 + 6);
          *((void *)v20 + 5) = *((void *)v21 + 5);
          *((void *)v20 + 6) = v23;
          v20[56] = v21[56];
          uint64_t v24 = v14[7];
          uint64_t v25 = (char *)a1 + v24;
          int64_t v26 = (char *)a2 + v24;
          long long v27 = *(_OWORD *)((char *)a2 + v24 + 24);
          *(_OWORD *)((char *)a1 + v24 + 24) = v27;
          uint64_t v28 = v27;
          uint64_t v29 = **(void (***)(char *, char *, uint64_t))(v27 - 8);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v29(v25, v26, v28);
          uint64_t v30 = v14[8];
          uint64_t v31 = *(void **)((char *)a2 + v30);
          *(void **)((char *)a1 + v30) = v31;
          *((unsigned char *)a1 + v14[9]) = *((unsigned char *)a2 + v14[9]);
          uint64_t v32 = v14[10];
          uint64_t v33 = (char *)a1 + v32;
          uint64_t v34 = (char *)a2 + v32;
          *(void *)uint64_t v33 = *(void *)v34;
          v33[8] = v34[8];
          *((unsigned char *)a1 + v14[11]) = *((unsigned char *)a2 + v14[11]);
          uint64_t v35 = v14[12];
          unint64_t v36 = (char *)a1 + v35;
          uint64_t v37 = (char *)a2 + v35;
          uint64_t v38 = *(uint64_t *)((char *)a2 + v35 + 16);
          id v39 = v31;
          if (v38 == 1)
          {
            long long v40 = *((_OWORD *)v37 + 1);
            *(_OWORD *)unint64_t v36 = *(_OWORD *)v37;
            *((_OWORD *)v36 + 1) = v40;
            *((_OWORD *)v36 + 2) = *((_OWORD *)v37 + 2);
          }
          else
          {
            *unint64_t v36 = *v37;
            *((void *)v36 + 1) = *((void *)v37 + 1);
            *((void *)v36 + 2) = v38;
            *((void *)v36 + 3) = *((void *)v37 + 3);
            v36[32] = v37[32];
            *((void *)v36 + 5) = *((void *)v37 + 5);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          uint64_t v68 = v14[13];
          v69 = (uint64_t *)((char *)a1 + v68);
          v70 = (uint64_t *)((char *)a2 + v68);
          uint64_t v71 = *v70;
          unint64_t v72 = v70[1];
          uint64_t v73 = v70[2];
          unint64_t v74 = v70[3];
          uint64_t v75 = v70[5];
          uint64_t v113 = v70[7];
          uint64_t v115 = v70[6];
          uint64_t v117 = v70[8];
          uint64_t v119 = v70[9];
          unint64_t v121 = v70[10];
          unint64_t v123 = v70[11];
          uint64_t v125 = v70[12];
          uint64_t v127 = v70[13];
          v129 = v14;
          uint64_t v76 = v70[4];
          sub_100254D34(*v70, v72, v73, v74, v76, v75, v115, v113, v117, v119, v121, v123);
          uint64_t *v69 = v71;
          v69[1] = v72;
          v69[2] = v73;
          v69[3] = v74;
          v69[4] = v76;
          v69[5] = v75;
          v77 = v129;
          v69[6] = v115;
          v69[7] = v113;
          v69[8] = v117;
          v69[9] = v119;
          v69[10] = v121;
          v69[11] = v123;
          v69[12] = v125;
          v69[13] = v127;
          uint64_t v78 = v129[14];
          v79 = (char *)a1 + v78;
          v80 = (char *)a2 + v78;
          uint64_t v81 = *(uint64_t *)((char *)a2 + v78 + 32);
          if (v81)
          {
            char *v79 = *v80;
            uint64_t v82 = *((void *)v80 + 5);
            *((void *)v79 + 4) = v81;
            *((void *)v79 + 5) = v82;
            (**(void (***)(uint64_t, uint64_t))(v81 - 8))((uint64_t)(v79 + 8), (uint64_t)(v80 + 8));
            *((_OWORD *)v79 + 3) = *((_OWORD *)v80 + 3);
          }
          else
          {
            long long v97 = *((_OWORD *)v80 + 1);
            *(_OWORD *)v79 = *(_OWORD *)v80;
            *((_OWORD *)v79 + 1) = v97;
            long long v98 = *((_OWORD *)v80 + 3);
            *((_OWORD *)v79 + 2) = *((_OWORD *)v80 + 2);
            *((_OWORD *)v79 + 3) = v98;
          }
          *((unsigned char *)a1 + v129[15]) = *((unsigned char *)a2 + v129[15]);
          uint64_t v99 = v129[16];
          v100 = (char *)a1 + v99;
          v101 = (char *)a2 + v99;
          uint64_t v102 = *(uint64_t *)((char *)a2 + v99 + 24);
          if (!v102)
          {
            long long v107 = *((_OWORD *)v101 + 1);
            *(_OWORD *)v100 = *(_OWORD *)v101;
            *((_OWORD *)v100 + 1) = v107;
            *((void *)v100 + 4) = *((void *)v101 + 4);
            goto LABEL_30;
          }
        }
        uint64_t v106 = *((void *)v101 + 4);
        *((void *)v100 + 3) = v102;
        *((void *)v100 + 4) = v106;
        (**(void (***)(void))(v102 - 8))();
LABEL_30:
        uint64_t v109 = v77[17];
        v110 = (void **)((char *)a1 + v109);
        v111 = (void **)((char *)a2 + v109);
        uint64_t v112 = v111[1];
        void *v110 = *v111;
        v110[1] = v112;
        *((unsigned char *)a1 + v77[18]) = *((unsigned char *)a2 + v77[18]);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        goto LABEL_31;
      case 7u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        return a1;
    }
  }
  uint64_t v9 = (char *)*a2;
  *a1 = *a2;
  a1 = (void **)&v9[(v5 + 16) & ~(unint64_t)v5];
  swift_retain();
  return a1;
}

void sub_1004F5784(void **a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      uint64_t v2 = *a1;

      break;
    case 3u:
      swift_errorRelease();
      break;
    case 5u:
      type metadata accessor for AppInstallScheduler.ParkReason();
      if (swift_getEnumCaseMultiPayload() <= 1)
      {
        int v3 = (int *)type metadata accessor for DownloadRequest();
        unsigned int v4 = (char *)a1 + v3[5];
        uint64_t v5 = type metadata accessor for URL();
        (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100014524((uint64_t)a1 + v3[7]);

        if (*(void **)((char *)a1 + v3[12] + 16) != (void *)1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v6 = (char *)a1 + v3[13];
        sub_10033CB6C(*(void *)v6, *((void *)v6 + 1), *((void *)v6 + 2), *((void *)v6 + 3), *((void *)v6 + 4), *((void *)v6 + 5), *((void *)v6 + 6), *((void *)v6 + 7), *((void *)v6 + 8), *((void *)v6 + 9), *((void *)v6 + 10), *((void *)v6 + 11));
        uint64_t v7 = (char *)a1 + v3[14];
        if (*((void *)v7 + 4)) {
          sub_100014524((uint64_t)(v7 + 8));
        }
        uint64_t v8 = (uint64_t)a1 + v3[16];
        if (*(void *)(v8 + 24)) {
          sub_100014524(v8);
        }
        goto LABEL_17;
      }
      break;
    case 7u:
LABEL_17:
      swift_bridgeObjectRelease();
      break;
    default:
      return;
  }
}

void **sub_1004F5998(void **a1, void **a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      uint64_t v6 = *a2;
      *a1 = *a2;
      id v7 = v6;
      goto LABEL_28;
    case 3u:
      uint64_t v8 = *a2;
      swift_errorRetain();
      *a1 = v8;
      goto LABEL_28;
    case 5u:
      uint64_t v9 = type metadata accessor for AppInstallScheduler.ParkReason();
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 1)
      {
        *a1 = *a2;
        uint64_t v38 = (int *)type metadata accessor for DownloadRequest();
        uint64_t v39 = v38[5];
        long long v40 = (char *)a1 + v39;
        uint64_t v41 = (char *)a2 + v39;
        uint64_t v42 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16))(v40, v41, v42);
        uint64_t v43 = v38[6];
        int v44 = (char *)a1 + v43;
        uint64_t v45 = (char *)a2 + v43;
        *int v44 = *v45;
        *((void *)v44 + 1) = *((void *)v45 + 1);
        *((_WORD *)v44 + 8) = *((_WORD *)v45 + 8);
        uint64_t v46 = *((void *)v45 + 4);
        *((void *)v44 + 3) = *((void *)v45 + 3);
        *((void *)v44 + 4) = v46;
        uint64_t v47 = *((void *)v45 + 6);
        *((void *)v44 + 5) = *((void *)v45 + 5);
        *((void *)v44 + 6) = v47;
        v44[56] = v45[56];
        uint64_t v48 = v38[7];
        uint64_t v49 = (char *)a1 + v48;
        uint64_t v50 = (char *)a2 + v48;
        long long v51 = *(_OWORD *)((char *)a2 + v48 + 24);
        *(_OWORD *)((char *)a1 + v48 + 24) = v51;
        uint64_t v52 = v51;
        uint64_t v53 = **(void (***)(char *, char *, uint64_t))(v51 - 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v53(v49, v50, v52);
        uint64_t v54 = v38[8];
        uint64_t v55 = *(void **)((char *)a2 + v54);
        *(void **)((char *)a1 + v54) = v55;
        *((unsigned char *)a1 + v38[9]) = *((unsigned char *)a2 + v38[9]);
        uint64_t v56 = v38[10];
        uint64_t v57 = (char *)a1 + v56;
        long long v58 = (char *)a2 + v56;
        *(void *)uint64_t v57 = *(void *)v58;
        v57[8] = v58[8];
        *((unsigned char *)a1 + v38[11]) = *((unsigned char *)a2 + v38[11]);
        uint64_t v59 = v38[12];
        v60 = (char *)a1 + v59;
        uint64_t v61 = (char *)a2 + v59;
        uint64_t v62 = *(uint64_t *)((char *)a2 + v59 + 16);
        id v63 = v55;
        if (v62 == 1)
        {
          long long v64 = *((_OWORD *)v61 + 1);
          *(_OWORD *)v60 = *(_OWORD *)v61;
          *((_OWORD *)v60 + 1) = v64;
          *((_OWORD *)v60 + 2) = *((_OWORD *)v61 + 2);
        }
        else
        {
          char *v60 = *v61;
          *((void *)v60 + 1) = *((void *)v61 + 1);
          *((void *)v60 + 2) = v62;
          *((void *)v60 + 3) = *((void *)v61 + 3);
          v60[32] = v61[32];
          *((void *)v60 + 5) = *((void *)v61 + 5);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v80 = v38[13];
        uint64_t v81 = (uint64_t *)((char *)a1 + v80);
        uint64_t v82 = (uint64_t *)((char *)a2 + v80);
        uint64_t v83 = *v82;
        unint64_t v84 = v82[1];
        uint64_t v85 = v82[2];
        unint64_t v86 = v82[3];
        uint64_t v87 = v82[4];
        uint64_t v112 = v82[7];
        uint64_t v114 = v82[6];
        uint64_t v116 = v82[8];
        uint64_t v118 = v82[9];
        unint64_t v120 = v82[10];
        unint64_t v122 = v82[11];
        uint64_t v124 = v82[12];
        uint64_t v126 = v82[13];
        uint64_t v128 = v38;
        uint64_t v88 = v82[5];
        sub_100254D34(*v82, v84, v85, v86, v87, v88, v114, v112, v116, v118, v120, v122);
        *uint64_t v81 = v83;
        v81[1] = v84;
        v81[2] = v85;
        v81[3] = v86;
        v81[4] = v87;
        v81[5] = v88;
        unint64_t v74 = v128;
        v81[6] = v114;
        v81[7] = v112;
        v81[8] = v116;
        v81[9] = v118;
        v81[10] = v120;
        v81[11] = v122;
        v81[12] = v124;
        v81[13] = v126;
        uint64_t v89 = v128[14];
        uint64_t v90 = (char *)a1 + v89;
        uint64_t v91 = (char *)a2 + v89;
        uint64_t v92 = *(uint64_t *)((char *)a2 + v89 + 32);
        if (v92)
        {
          *uint64_t v90 = *v91;
          uint64_t v93 = *((void *)v91 + 5);
          *((void *)v90 + 4) = v92;
          *((void *)v90 + 5) = v93;
          (**(void (***)(uint64_t, uint64_t))(v92 - 8))((uint64_t)(v90 + 8), (uint64_t)(v91 + 8));
          *((_OWORD *)v90 + 3) = *((_OWORD *)v91 + 3);
        }
        else
        {
          long long v100 = *((_OWORD *)v91 + 1);
          *(_OWORD *)uint64_t v90 = *(_OWORD *)v91;
          *((_OWORD *)v90 + 1) = v100;
          long long v101 = *((_OWORD *)v91 + 3);
          *((_OWORD *)v90 + 2) = *((_OWORD *)v91 + 2);
          *((_OWORD *)v90 + 3) = v101;
        }
        *((unsigned char *)a1 + v128[15]) = *((unsigned char *)a2 + v128[15]);
        uint64_t v102 = v128[16];
        long long v97 = (char *)a1 + v102;
        long long v98 = (char *)a2 + v102;
        uint64_t v99 = *(uint64_t *)((char *)a2 + v102 + 24);
        if (v99)
        {
LABEL_24:
          uint64_t v103 = *((void *)v98 + 4);
          *((void *)v97 + 3) = v99;
          *((void *)v97 + 4) = v103;
          (**(void (***)(void))(v99 - 8))();
          goto LABEL_27;
        }
        long long v105 = *((_OWORD *)v98 + 1);
        *(_OWORD *)long long v97 = *(_OWORD *)v98;
        *((_OWORD *)v97 + 1) = v105;
        *((void *)v97 + 4) = *((void *)v98 + 4);
      }
      else
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
          goto LABEL_28;
        }
        *a1 = *a2;
        int v11 = (int *)type metadata accessor for DownloadRequest();
        uint64_t v12 = v11[5];
        uint64_t v13 = (char *)a1 + v12;
        uint64_t v14 = (char *)a2 + v12;
        uint64_t v15 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
        uint64_t v16 = v11[6];
        Swift::String v17 = (char *)a1 + v16;
        uint64_t v18 = (char *)a2 + v16;
        *Swift::String v17 = *v18;
        *((void *)v17 + 1) = *((void *)v18 + 1);
        *((_WORD *)v17 + 8) = *((_WORD *)v18 + 8);
        uint64_t v19 = *((void *)v18 + 4);
        *((void *)v17 + 3) = *((void *)v18 + 3);
        *((void *)v17 + 4) = v19;
        uint64_t v20 = *((void *)v18 + 6);
        *((void *)v17 + 5) = *((void *)v18 + 5);
        *((void *)v17 + 6) = v20;
        v17[56] = v18[56];
        uint64_t v21 = v11[7];
        uint64_t v22 = (char *)a1 + v21;
        uint64_t v23 = (char *)a2 + v21;
        long long v24 = *(_OWORD *)((char *)a2 + v21 + 24);
        *(_OWORD *)((char *)a1 + v21 + 24) = v24;
        uint64_t v25 = v24;
        int64_t v26 = **(void (***)(char *, char *, uint64_t))(v24 - 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v26(v22, v23, v25);
        uint64_t v27 = v11[8];
        uint64_t v28 = *(void **)((char *)a2 + v27);
        *(void **)((char *)a1 + v27) = v28;
        *((unsigned char *)a1 + v11[9]) = *((unsigned char *)a2 + v11[9]);
        uint64_t v29 = v11[10];
        uint64_t v30 = (char *)a1 + v29;
        uint64_t v31 = (char *)a2 + v29;
        *(void *)uint64_t v30 = *(void *)v31;
        v30[8] = v31[8];
        *((unsigned char *)a1 + v11[11]) = *((unsigned char *)a2 + v11[11]);
        uint64_t v32 = v11[12];
        uint64_t v33 = (char *)a1 + v32;
        uint64_t v34 = (char *)a2 + v32;
        uint64_t v35 = *(uint64_t *)((char *)a2 + v32 + 16);
        id v36 = v28;
        if (v35 == 1)
        {
          long long v37 = *((_OWORD *)v34 + 1);
          *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
          *((_OWORD *)v33 + 1) = v37;
          *((_OWORD *)v33 + 2) = *((_OWORD *)v34 + 2);
        }
        else
        {
          *uint64_t v33 = *v34;
          *((void *)v33 + 1) = *((void *)v34 + 1);
          *((void *)v33 + 2) = v35;
          *((void *)v33 + 3) = *((void *)v34 + 3);
          v33[32] = v34[32];
          *((void *)v33 + 5) = *((void *)v34 + 5);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v65 = v11[13];
        id v66 = (uint64_t *)((char *)a1 + v65);
        long long v67 = (uint64_t *)((char *)a2 + v65);
        uint64_t v68 = *v67;
        unint64_t v69 = v67[1];
        uint64_t v70 = v67[2];
        unint64_t v71 = v67[3];
        uint64_t v72 = v67[5];
        uint64_t v111 = v67[7];
        uint64_t v113 = v67[6];
        uint64_t v115 = v67[8];
        uint64_t v117 = v67[9];
        unint64_t v119 = v67[10];
        unint64_t v121 = v67[11];
        uint64_t v123 = v67[12];
        uint64_t v125 = v67[13];
        uint64_t v127 = v11;
        uint64_t v73 = v67[4];
        sub_100254D34(*v67, v69, v70, v71, v73, v72, v113, v111, v115, v117, v119, v121);
        *id v66 = v68;
        v66[1] = v69;
        v66[2] = v70;
        v66[3] = v71;
        v66[4] = v73;
        v66[5] = v72;
        unint64_t v74 = v127;
        v66[6] = v113;
        v66[7] = v111;
        v66[8] = v115;
        v66[9] = v117;
        v66[10] = v119;
        v66[11] = v121;
        v66[12] = v123;
        v66[13] = v125;
        uint64_t v75 = v127[14];
        uint64_t v76 = (char *)a1 + v75;
        v77 = (char *)a2 + v75;
        uint64_t v78 = *(uint64_t *)((char *)a2 + v75 + 32);
        if (v78)
        {
          *uint64_t v76 = *v77;
          uint64_t v79 = *((void *)v77 + 5);
          *((void *)v76 + 4) = v78;
          *((void *)v76 + 5) = v79;
          (**(void (***)(uint64_t, uint64_t))(v78 - 8))((uint64_t)(v76 + 8), (uint64_t)(v77 + 8));
          *((_OWORD *)v76 + 3) = *((_OWORD *)v77 + 3);
        }
        else
        {
          long long v94 = *((_OWORD *)v77 + 1);
          *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
          *((_OWORD *)v76 + 1) = v94;
          long long v95 = *((_OWORD *)v77 + 3);
          *((_OWORD *)v76 + 2) = *((_OWORD *)v77 + 2);
          *((_OWORD *)v76 + 3) = v95;
        }
        *((unsigned char *)a1 + v127[15]) = *((unsigned char *)a2 + v127[15]);
        uint64_t v96 = v127[16];
        long long v97 = (char *)a1 + v96;
        long long v98 = (char *)a2 + v96;
        uint64_t v99 = *(uint64_t *)((char *)a2 + v96 + 24);
        if (v99) {
          goto LABEL_24;
        }
        long long v104 = *((_OWORD *)v98 + 1);
        *(_OWORD *)long long v97 = *(_OWORD *)v98;
        *((_OWORD *)v97 + 1) = v104;
        *((void *)v97 + 4) = *((void *)v98 + 4);
      }
LABEL_27:
      uint64_t v106 = v74[17];
      long long v107 = (void **)((char *)a1 + v106);
      long long v108 = (void **)((char *)a2 + v106);
      uint64_t v109 = v108[1];
      *long long v107 = *v108;
      v107[1] = v109;
      *((unsigned char *)a1 + v74[18]) = *((unsigned char *)a2 + v74[18]);
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
LABEL_28:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 7u:
      *a1 = *a2;
      swift_bridgeObjectRetain();
      goto LABEL_28;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
  }
}

void **sub_1004F61F0(void **a1, void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1004F4D7C((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        uint64_t v6 = *a2;
        *a1 = *a2;
        id v7 = v6;
        goto LABEL_29;
      case 3u:
        uint64_t v8 = *a2;
        swift_errorRetain();
        *a1 = v8;
        goto LABEL_29;
      case 5u:
        uint64_t v9 = type metadata accessor for AppInstallScheduler.ParkReason();
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          *a1 = *a2;
          long long v37 = (int *)type metadata accessor for DownloadRequest();
          uint64_t v38 = v37[5];
          uint64_t v39 = (char *)a1 + v38;
          long long v40 = (char *)a2 + v38;
          uint64_t v41 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 16))(v39, v40, v41);
          uint64_t v42 = v37[6];
          uint64_t v43 = (char *)a1 + v42;
          int v44 = (char *)a2 + v42;
          *uint64_t v43 = *v44;
          *((void *)v43 + 1) = *((void *)v44 + 1);
          v43[16] = v44[16];
          v43[17] = v44[17];
          *((void *)v43 + 3) = *((void *)v44 + 3);
          *((void *)v43 + 4) = *((void *)v44 + 4);
          *((void *)v43 + 5) = *((void *)v44 + 5);
          *((void *)v43 + 6) = *((void *)v44 + 6);
          v43[56] = v44[56];
          uint64_t v45 = v37[7];
          uint64_t v46 = (char *)a1 + v45;
          uint64_t v47 = (char *)a2 + v45;
          uint64_t v48 = *(uint64_t *)((char *)a2 + v45 + 24);
          *((void *)v46 + 3) = v48;
          *((void *)v46 + 4) = *(void **)((char *)a2 + v45 + 32);
          uint64_t v49 = **(void (***)(char *, char *, uint64_t))(v48 - 8);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v49(v46, v47, v48);
          uint64_t v50 = v37[8];
          long long v51 = *(void **)((char *)a2 + v50);
          *(void **)((char *)a1 + v50) = v51;
          *((unsigned char *)a1 + v37[9]) = *((unsigned char *)a2 + v37[9]);
          uint64_t v52 = v37[10];
          uint64_t v53 = (char *)a1 + v52;
          uint64_t v54 = (char *)a2 + v52;
          char v55 = v54[8];
          *(void *)uint64_t v53 = *(void *)v54;
          v53[8] = v55;
          *((unsigned char *)a1 + v37[11]) = *((unsigned char *)a2 + v37[11]);
          uint64_t v56 = v37[12];
          uint64_t v57 = (char *)a1 + v56;
          long long v58 = (char *)a2 + v56;
          uint64_t v59 = *(uint64_t *)((char *)a2 + v56 + 16);
          id v60 = v51;
          if (v59 == 1)
          {
            long long v61 = *(_OWORD *)v58;
            long long v62 = *((_OWORD *)v58 + 2);
            *((_OWORD *)v57 + 1) = *((_OWORD *)v58 + 1);
            *((_OWORD *)v57 + 2) = v62;
            *(_OWORD *)uint64_t v57 = v61;
          }
          else
          {
            *uint64_t v57 = *v58;
            *((void *)v57 + 1) = *((void *)v58 + 1);
            *((void *)v57 + 2) = *((void *)v58 + 2);
            uint64_t v78 = *((void *)v58 + 3);
            v57[32] = v58[32];
            *((void *)v57 + 3) = v78;
            *((void *)v57 + 5) = *((void *)v58 + 5);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          uint64_t v79 = v37[13];
          uint64_t v80 = (uint64_t *)((char *)a1 + v79);
          uint64_t v81 = (uint64_t *)((char *)a2 + v79);
          uint64_t v82 = *v81;
          unint64_t v83 = v81[1];
          uint64_t v84 = v81[2];
          unint64_t v85 = v81[3];
          uint64_t v128 = v37;
          uint64_t v86 = v81[6];
          uint64_t v112 = v81[7];
          uint64_t v114 = v81[5];
          uint64_t v116 = v81[8];
          uint64_t v118 = v81[9];
          unint64_t v120 = v81[10];
          unint64_t v122 = v81[11];
          uint64_t v124 = v81[12];
          uint64_t v126 = v81[13];
          uint64_t v87 = v81[4];
          sub_100254D34(*v81, v83, v84, v85, v87, v114, v86, v112, v116, v118, v120, v122);
          uint64_t *v80 = v82;
          v80[1] = v83;
          v80[2] = v84;
          v80[3] = v85;
          v80[4] = v87;
          v80[5] = v114;
          uint64_t v73 = v128;
          v80[6] = v86;
          v80[7] = v112;
          v80[8] = v116;
          v80[9] = v118;
          v80[10] = v120;
          v80[11] = v122;
          v80[12] = v124;
          v80[13] = v126;
          uint64_t v88 = v128[14];
          uint64_t v89 = (char *)a1 + v88;
          uint64_t v90 = (char *)a2 + v88;
          if (*(void **)((char *)a2 + v88 + 32))
          {
            *uint64_t v89 = *v90;
            uint64_t v91 = *((void *)v90 + 4);
            *((void *)v89 + 4) = v91;
            *((void *)v89 + 5) = *((void *)v90 + 5);
            (**(void (***)(uint64_t, uint64_t))(v91 - 8))((uint64_t)(v89 + 8), (uint64_t)(v90 + 8));
            *((void *)v89 + 6) = *((void *)v90 + 6);
            *((void *)v89 + 7) = *((void *)v90 + 7);
          }
          else
          {
            long long v99 = *(_OWORD *)v90;
            long long v100 = *((_OWORD *)v90 + 1);
            long long v101 = *((_OWORD *)v90 + 3);
            *((_OWORD *)v89 + 2) = *((_OWORD *)v90 + 2);
            *((_OWORD *)v89 + 3) = v101;
            *(_OWORD *)uint64_t v89 = v99;
            *((_OWORD *)v89 + 1) = v100;
          }
          *((unsigned char *)a1 + v128[15]) = *((unsigned char *)a2 + v128[15]);
          uint64_t v102 = v128[16];
          uint64_t v96 = (char *)a1 + v102;
          long long v97 = (char *)a2 + v102;
          uint64_t v98 = *(uint64_t *)((char *)a2 + v102 + 24);
          if (v98)
          {
LABEL_25:
            *((void *)v96 + 3) = v98;
            *((void *)v96 + 4) = *((void *)v97 + 4);
            (**(void (***)(void))(v98 - 8))();
            goto LABEL_28;
          }
          long long v105 = *(_OWORD *)v97;
          long long v106 = *((_OWORD *)v97 + 1);
          *((void *)v96 + 4) = *((void *)v97 + 4);
          *(_OWORD *)uint64_t v96 = v105;
          *((_OWORD *)v96 + 1) = v106;
        }
        else
        {
          if (EnumCaseMultiPayload)
          {
            memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
            goto LABEL_29;
          }
          *a1 = *a2;
          int v11 = (int *)type metadata accessor for DownloadRequest();
          uint64_t v12 = v11[5];
          uint64_t v13 = (char *)a1 + v12;
          uint64_t v14 = (char *)a2 + v12;
          uint64_t v15 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
          uint64_t v16 = v11[6];
          Swift::String v17 = (char *)a1 + v16;
          uint64_t v18 = (char *)a2 + v16;
          *Swift::String v17 = *v18;
          *((void *)v17 + 1) = *((void *)v18 + 1);
          v17[16] = v18[16];
          v17[17] = v18[17];
          *((void *)v17 + 3) = *((void *)v18 + 3);
          *((void *)v17 + 4) = *((void *)v18 + 4);
          *((void *)v17 + 5) = *((void *)v18 + 5);
          *((void *)v17 + 6) = *((void *)v18 + 6);
          v17[56] = v18[56];
          uint64_t v19 = v11[7];
          uint64_t v20 = (char *)a1 + v19;
          uint64_t v21 = (char *)a2 + v19;
          uint64_t v22 = *(uint64_t *)((char *)a2 + v19 + 24);
          *((void *)v20 + 3) = v22;
          *((void *)v20 + 4) = *(void **)((char *)a2 + v19 + 32);
          uint64_t v23 = **(void (***)(char *, char *, uint64_t))(v22 - 8);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v23(v20, v21, v22);
          uint64_t v24 = v11[8];
          uint64_t v25 = *(void **)((char *)a2 + v24);
          *(void **)((char *)a1 + v24) = v25;
          *((unsigned char *)a1 + v11[9]) = *((unsigned char *)a2 + v11[9]);
          uint64_t v26 = v11[10];
          uint64_t v27 = (char *)a1 + v26;
          uint64_t v28 = (char *)a2 + v26;
          char v29 = v28[8];
          *(void *)uint64_t v27 = *(void *)v28;
          v27[8] = v29;
          *((unsigned char *)a1 + v11[11]) = *((unsigned char *)a2 + v11[11]);
          uint64_t v30 = v11[12];
          uint64_t v31 = (char *)a1 + v30;
          uint64_t v32 = (char *)a2 + v30;
          uint64_t v33 = *(uint64_t *)((char *)a2 + v30 + 16);
          id v34 = v25;
          if (v33 == 1)
          {
            long long v35 = *(_OWORD *)v32;
            long long v36 = *((_OWORD *)v32 + 2);
            *((_OWORD *)v31 + 1) = *((_OWORD *)v32 + 1);
            *((_OWORD *)v31 + 2) = v36;
            *(_OWORD *)uint64_t v31 = v35;
          }
          else
          {
            *uint64_t v31 = *v32;
            *((void *)v31 + 1) = *((void *)v32 + 1);
            *((void *)v31 + 2) = *((void *)v32 + 2);
            uint64_t v63 = *((void *)v32 + 3);
            v31[32] = v32[32];
            *((void *)v31 + 3) = v63;
            *((void *)v31 + 5) = *((void *)v32 + 5);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          uint64_t v64 = v11[13];
          uint64_t v65 = (uint64_t *)((char *)a1 + v64);
          id v66 = (uint64_t *)((char *)a2 + v64);
          uint64_t v67 = *v66;
          unint64_t v68 = v66[1];
          uint64_t v127 = v11;
          uint64_t v69 = v66[2];
          unint64_t v70 = v66[3];
          uint64_t v71 = v66[5];
          uint64_t v72 = v66[6];
          uint64_t v111 = v66[7];
          uint64_t v113 = v66[4];
          uint64_t v115 = v66[8];
          uint64_t v117 = v66[9];
          unint64_t v119 = v66[10];
          unint64_t v121 = v66[11];
          uint64_t v123 = v66[12];
          uint64_t v125 = v66[13];
          sub_100254D34(*v66, v68, v69, v70, v113, v71, v72, v111, v115, v117, v119, v121);
          *uint64_t v65 = v67;
          v65[1] = v68;
          uint64_t v73 = v127;
          v65[2] = v69;
          v65[3] = v70;
          v65[4] = v113;
          v65[5] = v71;
          v65[6] = v72;
          v65[7] = v111;
          v65[8] = v115;
          v65[9] = v117;
          v65[10] = v119;
          v65[11] = v121;
          v65[12] = v123;
          v65[13] = v125;
          uint64_t v74 = v127[14];
          uint64_t v75 = (char *)a1 + v74;
          uint64_t v76 = (char *)a2 + v74;
          if (*(void **)((char *)a2 + v74 + 32))
          {
            *uint64_t v75 = *v76;
            uint64_t v77 = *((void *)v76 + 4);
            *((void *)v75 + 4) = v77;
            *((void *)v75 + 5) = *((void *)v76 + 5);
            (**(void (***)(uint64_t, uint64_t))(v77 - 8))((uint64_t)(v75 + 8), (uint64_t)(v76 + 8));
            *((void *)v75 + 6) = *((void *)v76 + 6);
            *((void *)v75 + 7) = *((void *)v76 + 7);
          }
          else
          {
            long long v92 = *(_OWORD *)v76;
            long long v93 = *((_OWORD *)v76 + 1);
            long long v94 = *((_OWORD *)v76 + 3);
            *((_OWORD *)v75 + 2) = *((_OWORD *)v76 + 2);
            *((_OWORD *)v75 + 3) = v94;
            *(_OWORD *)uint64_t v75 = v92;
            *((_OWORD *)v75 + 1) = v93;
          }
          *((unsigned char *)a1 + v127[15]) = *((unsigned char *)a2 + v127[15]);
          uint64_t v95 = v127[16];
          uint64_t v96 = (char *)a1 + v95;
          long long v97 = (char *)a2 + v95;
          uint64_t v98 = *(uint64_t *)((char *)a2 + v95 + 24);
          if (v98) {
            goto LABEL_25;
          }
          long long v103 = *(_OWORD *)v97;
          long long v104 = *((_OWORD *)v97 + 1);
          *((void *)v96 + 4) = *((void *)v97 + 4);
          *(_OWORD *)uint64_t v96 = v103;
          *((_OWORD *)v96 + 1) = v104;
        }
LABEL_28:
        uint64_t v107 = v73[17];
        long long v108 = (void **)((char *)a1 + v107);
        uint64_t v109 = (void **)((char *)a2 + v107);
        *long long v108 = *v109;
        v108[1] = v109[1];
        *((unsigned char *)a1 + v73[18]) = *((unsigned char *)a2 + v73[18]);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
LABEL_29:
        swift_storeEnumTagMultiPayload();
        break;
      case 7u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        goto LABEL_29;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
    }
  }
  return a1;
}

void *sub_1004F6AC8(void *a1, void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 5)
  {
    uint64_t v6 = type metadata accessor for AppInstallScheduler.ParkReason();
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      id v7 = (int *)type metadata accessor for DownloadRequest();
      uint64_t v8 = v7[5];
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
      uint64_t v12 = v7[6];
      uint64_t v13 = (_OWORD *)((char *)a1 + v12);
      uint64_t v14 = (_OWORD *)((char *)a2 + v12);
      long long v15 = v14[1];
      *uint64_t v13 = *v14;
      v13[1] = v15;
      v13[2] = v14[2];
      *(_OWORD *)((char *)v13 + 41) = *(_OWORD *)((char *)v14 + 41);
      uint64_t v16 = v7[7];
      Swift::String v17 = (char *)a1 + v16;
      uint64_t v18 = (char *)a2 + v16;
      long long v19 = *((_OWORD *)v18 + 1);
      *(_OWORD *)Swift::String v17 = *(_OWORD *)v18;
      *((_OWORD *)v17 + 1) = v19;
      *((void *)v17 + 4) = *((void *)v18 + 4);
      *(void *)((char *)a1 + v7[8]) = *(void *)((char *)a2 + v7[8]);
      *((unsigned char *)a1 + v7[9]) = *((unsigned char *)a2 + v7[9]);
      uint64_t v20 = v7[10];
      uint64_t v21 = (char *)a1 + v20;
      uint64_t v22 = (char *)a2 + v20;
      *(void *)uint64_t v21 = *(void *)v22;
      v21[8] = v22[8];
      *((unsigned char *)a1 + v7[11]) = *((unsigned char *)a2 + v7[11]);
      uint64_t v23 = v7[12];
      uint64_t v24 = (_OWORD *)((char *)a1 + v23);
      uint64_t v25 = (long long *)((char *)a2 + v23);
      long long v26 = v25[2];
      long long v27 = *v25;
      v24[1] = v25[1];
      v24[2] = v26;
      *uint64_t v24 = v27;
      uint64_t v28 = v7[13];
      char v29 = (_OWORD *)((char *)a1 + v28);
      uint64_t v30 = (_OWORD *)((char *)a2 + v28);
      long long v31 = v30[1];
      *char v29 = *v30;
      v29[1] = v31;
      long long v32 = v30[6];
      long long v33 = v30[4];
      v29[5] = v30[5];
      void v29[6] = v32;
      long long v34 = v30[3];
      v29[2] = v30[2];
      v29[3] = v34;
      v29[4] = v33;
      uint64_t v35 = v7[14];
      long long v36 = (_OWORD *)((char *)a1 + v35);
      long long v37 = (_OWORD *)((char *)a2 + v35);
      long long v38 = v37[1];
      *long long v36 = *v37;
      v36[1] = v38;
      long long v39 = v37[3];
      v36[2] = v37[2];
      v36[3] = v39;
      *((unsigned char *)a1 + v7[15]) = *((unsigned char *)a2 + v7[15]);
      uint64_t v40 = v7[16];
      uint64_t v41 = (char *)a1 + v40;
      uint64_t v42 = (char *)a2 + v40;
      long long v43 = *((_OWORD *)v42 + 1);
      *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
      *((_OWORD *)v41 + 1) = v43;
      *((void *)v41 + 4) = *((void *)v42 + 4);
      *(_OWORD *)((char *)a1 + v7[17]) = *(_OWORD *)((char *)a2 + v7[17]);
      *((unsigned char *)a1 + v7[18]) = *((unsigned char *)a2 + v7[18]);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_1004F6EC0(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1004F4D7C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 5)
    {
      uint64_t v6 = type metadata accessor for AppInstallScheduler.ParkReason();
      if (swift_getEnumCaseMultiPayload() > 1)
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      else
      {
        *a1 = *a2;
        id v7 = (int *)type metadata accessor for DownloadRequest();
        uint64_t v8 = v7[5];
        uint64_t v9 = (char *)a1 + v8;
        uint64_t v10 = (char *)a2 + v8;
        uint64_t v11 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
        uint64_t v12 = v7[6];
        uint64_t v13 = (_OWORD *)((char *)a1 + v12);
        uint64_t v14 = (_OWORD *)((char *)a2 + v12);
        long long v15 = v14[1];
        *uint64_t v13 = *v14;
        v13[1] = v15;
        v13[2] = v14[2];
        *(_OWORD *)((char *)v13 + 41) = *(_OWORD *)((char *)v14 + 41);
        uint64_t v16 = v7[7];
        Swift::String v17 = (char *)a1 + v16;
        uint64_t v18 = (char *)a2 + v16;
        long long v19 = *((_OWORD *)v18 + 1);
        *(_OWORD *)Swift::String v17 = *(_OWORD *)v18;
        *((_OWORD *)v17 + 1) = v19;
        *((void *)v17 + 4) = *((void *)v18 + 4);
        *(void *)((char *)a1 + v7[8]) = *(void *)((char *)a2 + v7[8]);
        *((unsigned char *)a1 + v7[9]) = *((unsigned char *)a2 + v7[9]);
        uint64_t v20 = v7[10];
        uint64_t v21 = (char *)a1 + v20;
        uint64_t v22 = (char *)a2 + v20;
        *(void *)uint64_t v21 = *(void *)v22;
        v21[8] = v22[8];
        *((unsigned char *)a1 + v7[11]) = *((unsigned char *)a2 + v7[11]);
        uint64_t v23 = v7[12];
        uint64_t v24 = (_OWORD *)((char *)a1 + v23);
        uint64_t v25 = (long long *)((char *)a2 + v23);
        long long v26 = v25[2];
        long long v27 = *v25;
        v24[1] = v25[1];
        v24[2] = v26;
        *uint64_t v24 = v27;
        uint64_t v28 = v7[13];
        char v29 = (_OWORD *)((char *)a1 + v28);
        uint64_t v30 = (_OWORD *)((char *)a2 + v28);
        long long v31 = v30[1];
        *char v29 = *v30;
        v29[1] = v31;
        long long v32 = v30[6];
        long long v33 = v30[4];
        v29[5] = v30[5];
        void v29[6] = v32;
        long long v34 = v30[3];
        v29[2] = v30[2];
        v29[3] = v34;
        v29[4] = v33;
        uint64_t v35 = v7[14];
        long long v36 = (_OWORD *)((char *)a1 + v35);
        long long v37 = (_OWORD *)((char *)a2 + v35);
        long long v38 = v37[1];
        *long long v36 = *v37;
        v36[1] = v38;
        long long v39 = v37[3];
        v36[2] = v37[2];
        v36[3] = v39;
        *((unsigned char *)a1 + v7[15]) = *((unsigned char *)a2 + v7[15]);
        uint64_t v40 = v7[16];
        uint64_t v41 = (char *)a1 + v40;
        uint64_t v42 = (char *)a2 + v40;
        long long v43 = *((_OWORD *)v42 + 1);
        *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
        *((_OWORD *)v41 + 1) = v43;
        *((void *)v41 + 4) = *((void *)v42 + 4);
        *(_OWORD *)((char *)a1 + v7[17]) = *(_OWORD *)((char *)a2 + v7[17]);
        *((unsigned char *)a1 + v7[18]) = *((unsigned char *)a2 + v7[18]);
        swift_storeEnumTagMultiPayload();
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1004F72C8()
{
  uint64_t result = type metadata accessor for AppInstallScheduler.ParkReason();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t sub_1004F73A0()
{
  unint64_t result = qword_1006662B0;
  if (!qword_1006662B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006662B0);
  }
  return result;
}

unint64_t sub_1004F73F4()
{
  unint64_t result = qword_1006662B8;
  if (!qword_1006662B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006662B8);
  }
  return result;
}

uint64_t sub_1004F7448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v8 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v4 + 64) = v8;
  *(void *)(v4 + 80) = *(void *)(a4 + 64);
  long long v9 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(v4 + 32) = v9;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v4 + 88) = v10;
  void *v10 = v4;
  v10[1] = sub_1004F7518;
  return sub_1004F2E78(a1, a2, a3, v4 + 16);
}

uint64_t sub_1004F7518()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1004F760C()
{
  swift_unknownObjectRelease();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 104, 7);
}

uint64_t sub_1004F767C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_1000176B4;
  id v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1006662C0 + dword_1006662C0);
  return v7(a1, v4, v5, v1 + 32);
}

uint64_t sub_1004F7744(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v2 + 64) = v4;
  *(void *)(v2 + 80) = *(void *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v2 + 32) = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 88) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_1004F895C;
  return sub_10025D450(a1);
}

uint64_t sub_1004F77F8(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *long long v5 = v2;
  v5[1] = sub_1000176B4;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1006662D8 + dword_1006662D8);
  return v6(a1, v4);
}

uint64_t sub_1004F78AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v8 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(v4 + 32) = v8;
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a4 + 32);
  *(void *)(v4 + 64) = *(void *)(a4 + 48);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 72) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_1004F797C;
  return sub_1004F3A30(a1, a2, a3, v4 + 16);
}

uint64_t sub_1004F797C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1004F7A70()
{
  swift_unknownObjectRelease();

  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_1004F7AD0(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_10000B238;
  id v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1006662E8 + dword_1006662E8);
  return v7(a1, v4, v5, v1 + 32);
}

id *sub_1004F7B98(id *a1)
{
  id v2 = *a1;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1004F7C00(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v2 + 32) = v4;
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a2 + 32);
  *(void *)(v2 + 64) = *(void *)(a2 + 48);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 72) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1004F8960;
  return sub_10050F20C(a1);
}

uint64_t sub_1004F7CB4(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000176B4;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100666300 + dword_100666300);
  return v6(a1, v4);
}

uint64_t sub_1004F7D68()
{
  uint64_t v1 = (int *)(type metadata accessor for IPA_InstallTask() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_unknownObjectRelease();
  uint64_t v6 = (id *)(v0 + v3);

  swift_release();
  swift_release();
  swift_release();
  uint64_t v7 = (char *)v6 + v1[10];
  swift_release();
  uint64_t v8 = &v7[*(int *)(sub_1000172F8(&qword_10065E410) + 36)];
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1004F7E98(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for IPA_InstallTask() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000176B4;
  return sub_1004F3294(a1, v5, v6, v7);
}

uint64_t sub_1004F7F84(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000176B4;
  return sub_1004F4270(a1);
}

uint64_t sub_1004F8024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v8 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(v4 + 80) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v4 + 96) = v8;
  *(void *)(v4 + 112) = *(void *)(a4 + 96);
  long long v9 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(v4 + 32) = v9;
  long long v10 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v4 + 64) = v10;
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v4 + 120) = v11;
  *uint64_t v11 = v4;
  v11[1] = sub_1004F80FC;
  return sub_1004F3E4C(a1, a2, a3, v4 + 16);
}

uint64_t sub_1004F80FC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1004F81F0()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 136, 7);
}

uint64_t sub_1004F8278(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_1000176B4;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100666330 + dword_100666330);
  return v7(a1, v4, v5, v1 + 32);
}

uint64_t sub_1004F8340(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 80);
  id v3 = *(id *)a1;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v4 = v2;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1004F83E4(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v2 + 96) = v4;
  *(void *)(v2 + 112) = *(void *)(a2 + 96);
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v2 + 32) = v5;
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v2 + 64) = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 120) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1004F8964;
  return sub_100561FD4(a1);
}

uint64_t sub_1004F84A0(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *long long v5 = v2;
  v5[1] = sub_1000176B4;
  long long v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100666348 + dword_100666348);
  return v6(a1, v4);
}

uint64_t sub_1004F8554(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1004F85BC()
{
  uint64_t v1 = (int *)(type metadata accessor for IPA_FailTask() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_unknownObjectRelease();
  long long v6 = (id *)(v0 + v3);

  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v7 = (char *)v6 + v1[17];
  swift_release();
  uint64_t v8 = &v7[*(int *)(sub_1000172F8(&qword_10065E410) + 36)];
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1004F871C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1004F8784(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for IPA_FailTask() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000176B4;
  return sub_1004F3694(a1, v5, v6, v7);
}

uint64_t sub_1004F8870(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000176B4;
  return sub_1004F430C(a1);
}

unint64_t sub_1004F8910(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10063A268, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8) {
    return 8;
  }
  else {
    return v3;
  }
}

uint64_t sub_1004F896C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return _swift_task_switch(sub_1004F8990, 0, 0);
}

uint64_t sub_1004F8990()
{
  uint64_t v1 = v0 + 64;
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 40) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 24);
  *(void *)(v3 + 32) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1004F8AC0;
  v4[3] = v0 + 64;
  v4[4] = &type metadata for Bool;
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)&dword_100666408 + dword_100666408);
  uint64_t v5 = (void *)swift_task_alloc();
  v4[5] = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_1004FA2F4;
  return v7(v1);
}

uint64_t sub_1004F8AC0()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1004F8BF8;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1004F8BDC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004F8BDC()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(v0 + 64));
}

uint64_t sub_1004F8BF8()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004F8C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return _swift_task_switch(sub_1004F8C84, 0, 0);
}

uint64_t sub_1004F8C84()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  long long v3 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v2 + 32) = v3;
  *(void *)(v2 + 48) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1004F8DAC;
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 16);
  v4[3] = v6;
  v4[4] = v5;
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)&dword_1006663C0 + dword_1006663C0);
  uint64_t v7 = (void *)swift_task_alloc();
  v4[5] = v7;
  *uint64_t v7 = v4;
  v7[1] = sub_1004FA2F4;
  return v9(v6);
}

uint64_t sub_1004F8DAC()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1004F8EE8, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    long long v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1004F8EE8()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004F8F4C(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return _swift_task_switch(sub_1004F8F70, 0, 0);
}

uint64_t sub_1004F8F70()
{
  uint64_t v1 = v0 + 16;
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v3 + 32) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1004F90A0;
  v4[3] = v0 + 16;
  v4[4] = &type metadata for String;
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)&dword_100666390 + dword_100666390);
  uint64_t v5 = (void *)swift_task_alloc();
  v4[5] = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_1004FA2F4;
  return v7(v1);
}

uint64_t sub_1004F90A0()
{
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1004F91D8;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1004F91BC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004F91BC()
{
  return (*(uint64_t (**)(void, void))(v0 + 8))(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1004F91D8()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004F923C(uint64_t a1)
{
  v2[20] = a1;
  v2[21] = v1;
  uint64_t v3 = sub_1000172F8(&qword_1006663D0);
  v2[22] = v3;
  v2[23] = *(void *)(v3 - 8);
  v2[24] = swift_task_alloc();
  return _swift_task_switch(sub_1004F9300, 0, 0);
}

uint64_t sub_1004F9300()
{
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 176);
  id v4 = [*(id *)(v0 + 168) BOOLForKey:*(void *)(v0 + 160)];
  *(void *)(v0 + 200) = v4;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 144;
  *(void *)(v0 + 24) = sub_1004F94B8;
  swift_continuation_init();
  *(void *)(v0 + 136) = v3;
  uint64_t v5 = sub_10019CE94((uint64_t *)(v0 + 112));
  sub_1000172F8((uint64_t *)&unk_1006663D8);
  sub_1000172F8(&qword_10065B260);
  CheckedContinuation.init(continuation:function:)();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 32))(v5, v1, v3);
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 1107296256;
  *(void *)(v0 + 96) = sub_1004FAD98;
  *(void *)(v0 + 104) = &unk_10064B178;
  [v4 valueWithCompletion:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_1004F94B8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 208) = v1;
  if (v1) {
    uint64_t v2 = sub_1004F965C;
  }
  else {
    uint64_t v2 = sub_1004F95C8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004F95C8()
{
  uint64_t v1 = (void *)v0[25];
  uint64_t v2 = (void *)v0[18];
  id v3 = [v2 BOOLValue];

  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(id))v0[1];
  return v4(v3);
}

uint64_t sub_1004F965C()
{
  uint64_t v1 = *(void **)(v0 + 200);
  swift_willThrow();

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2(0);
}

uint64_t sub_1004F96DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[26] = a5;
  v6[27] = v5;
  v6[24] = a2;
  v6[25] = a4;
  v6[23] = a1;
  uint64_t v7 = type metadata accessor for Optional();
  v6[28] = v7;
  v6[29] = *(void *)(v7 - 8);
  v6[30] = swift_task_alloc();
  uint64_t v8 = sub_1000172F8(&qword_1006663D0);
  v6[31] = v8;
  v6[32] = *(void *)(v8 - 8);
  v6[33] = swift_task_alloc();
  return _swift_task_switch(sub_1004F9808, 0, 0);
}

uint64_t sub_1004F9808()
{
  uint64_t v2 = *(void *)(v0 + 256);
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 248);
  id v4 = [*(id *)(v0 + 216) integerForKey:*(void *)(v0 + 192)];
  *(void *)(v0 + 272) = v4;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 144;
  *(void *)(v0 + 24) = sub_1004F99C4;
  swift_continuation_init();
  *(void *)(v0 + 136) = v3;
  uint64_t v5 = sub_10019CE94((uint64_t *)(v0 + 112));
  sub_1000172F8((uint64_t *)&unk_1006663D8);
  sub_1000172F8(&qword_10065B260);
  CheckedContinuation.init(continuation:function:)();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 32))(v5, v1, v3);
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 1107296256;
  *(void *)(v0 + 96) = sub_1004FAD98;
  *(void *)(v0 + 104) = &unk_10064B150;
  [v4 valueWithCompletion:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_1004F99C4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 280) = v1;
  if (v1) {
    uint64_t v2 = sub_1004F9CEC;
  }
  else {
    uint64_t v2 = sub_1004F9AD4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004F9AD4()
{
  uint64_t v1 = (void *)v0[34];
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[25];
  uint64_t v4 = (void *)v0[18];
  id v5 = [v4 unsignedLongLongValue];

  v0[20] = v5;
  sub_1004FADAC();
  dispatch thunk of Numeric.init<A>(exactly:)();
  uint64_t v6 = *(void *)(v3 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v3) == 1)
  {
    (*(void (**)(void, void))(v0[29] + 8))(v0[30], v0[28]);
    type metadata accessor for AMSError(0);
    v0[22] = 200;
    sub_1004FAEBC((uint64_t)_swiftEmptyArrayStorage);
    sub_1004FAFE8(&qword_10065B440, type metadata accessor for AMSError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
  else
  {
    (*(void (**)(void, void, void))(v6 + 32))(v0[23], v0[30], v0[25]);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1004F9CEC()
{
  uint64_t v1 = *(void **)(v0 + 272);
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1004F9D70(uint64_t a1)
{
  v2[20] = a1;
  v2[21] = v1;
  uint64_t v3 = sub_1000172F8(&qword_1006628E0);
  v2[22] = v3;
  v2[23] = *(void *)(v3 - 8);
  v2[24] = swift_task_alloc();
  return _swift_task_switch(sub_1004F9E34, 0, 0);
}

uint64_t sub_1004F9E34()
{
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 176);
  id v4 = [*(id *)(v0 + 168) stringForKey:*(void *)(v0 + 160)];
  *(void *)(v0 + 200) = v4;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 144;
  *(void *)(v0 + 24) = sub_1004F9FEC;
  swift_continuation_init();
  *(void *)(v0 + 136) = v3;
  uint64_t v5 = sub_10019CE94((uint64_t *)(v0 + 112));
  sub_1000172F8((uint64_t *)&unk_100666420);
  sub_1000172F8(&qword_10065B260);
  CheckedContinuation.init(continuation:function:)();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 32))(v5, v1, v3);
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 1107296256;
  *(void *)(v0 + 96) = sub_1004FAE00;
  *(void *)(v0 + 104) = &unk_10064B1A0;
  [v4 valueWithCompletion:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_1004F9FEC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 208) = v1;
  if (v1) {
    uint64_t v2 = sub_1004FA198;
  }
  else {
    uint64_t v2 = sub_1004FA0FC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004FA0FC()
{
  uint64_t v1 = (void *)v0[25];
  uint64_t v2 = (void *)v0[18];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v6(v3, v5);
}

uint64_t sub_1004FA198()
{
  uint64_t v1 = *(void **)(v0 + 200);
  swift_willThrow();

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1004FA214(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a1;
  v5[4] = a5;
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v7 = (void *)swift_task_alloc();
  v5[5] = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_1004FA2F4;
  return v9(a1);
}

uint64_t sub_1004FA2F4()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1004FA428, 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1004FA428()
{
  type metadata accessor for Code(0);
  v0[2] = 204;
  swift_errorRetain();
  sub_1004FAFE8((unint64_t *)&qword_10065B420, type metadata accessor for Code);
  char v1 = static _ErrorCodeProtocol.~= infix(_:_:)();
  swift_errorRelease();
  if (v1)
  {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(v0[4] - 8) + 56))(v0[3], 1, 1);
    swift_errorRelease();
  }
  else
  {
    swift_willThrow();
  }
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1004FA55C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_1004FA5FC;
  return sub_1004F923C(a3);
}

uint64_t sub_1004FA5FC(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(unsigned char *)(v4 + 32) = a1 & 1;
    return _swift_task_switch(sub_1004FA74C, 0, 0);
  }
}

uint64_t sub_1004FA74C()
{
  **(unsigned char **)(v0 + 16) = *(unsigned char *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004FA770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[2] = a1;
  v6[3] = a5;
  uint64_t v12 = (void *)swift_task_alloc();
  v6[4] = v12;
  *uint64_t v12 = v6;
  v12[1] = sub_1004FA83C;
  return sub_1004F96DC(a1, a3, v11, a5, a6);
}

uint64_t sub_1004FA83C()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_1004FA96C, 0, 0);
  }
}

uint64_t sub_1004FA96C()
{
  (*(void (**)(void, void, uint64_t))(*(void *)(v0[3] - 8) + 56))(v0[2], 0, 1);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1004FA9FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_1004FAA9C;
  return sub_1004F9D70(a3);
}

uint64_t sub_1004FAA9C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *v3;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v8 = *(uint64_t (**)(void))(v7 + 8);
    return v8();
  }
  else
  {
    *(void *)(v6 + 32) = a2;
    *(void *)(v6 + 40) = a1;
    return _swift_task_switch(sub_1004FABF8, 0, 0);
  }
}

uint64_t sub_1004FABF8()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void **)(v0 + 16);
  *uint64_t v2 = *(void *)(v0 + 40);
  v2[1] = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004FAC1C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_1000176B4;
  return sub_1004FA9FC(a1, v4, v5);
}

uint64_t sub_1004FACD0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_1000176B4;
  return sub_1004FA770(a1, v7, v8, v4, v5, v6);
}

void sub_1004FAD98(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
}

uint64_t sub_1004FADA4(uint64_t a1)
{
  return sub_100014524(a1 + 32);
}

unint64_t sub_1004FADAC()
{
  unint64_t result = qword_1006663E8;
  if (!qword_1006663E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006663E8);
  }
  return result;
}

void sub_1004FAE00(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
}

void sub_1004FAE0C(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t *a5)
{
  sub_10018AC60((void *)(a1 + 32), *(void *)(a1 + 56));
  if (a4)
  {
    id v8 = a4;
    sub_1000172F8(a5);
    CheckedContinuation.resume(throwing:)();
  }
  else if (a2)
  {
    id v9 = a2;
    sub_1000172F8(a5);
    CheckedContinuation.resume(returning:)();
  }
  else
  {
    __break(1u);
  }
}

unint64_t sub_1004FAEBC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000172F8(&qword_100663C68);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1004FB0A8(v6, (uint64_t)&v15);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1004FB030(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_1001C5DD4(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1004FAFE8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1004FB030(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_1004FB110(a1, a2, v4);
}

uint64_t sub_1004FB0A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_100663C70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1004FB110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      unint64_t i = (i + 1) & v12;
      if ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
      {
        BOOL v13 = (void *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v12; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v12)
          {
            uint64_t v15 = (void *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
          }
        }
      }
    }
  }
  return i;
}

uint64_t sub_1004FB258(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_10000B238;
  return sub_1004FA55C(a1, v4, v5);
}

BOOL sub_1004FB31C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_1004D0588();
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v4;
  uint64_t v7 = v5;
  uint64_t v8 = sub_1004D0588();
  if (!v9) {
    goto LABEL_13;
  }
  uint64_t v10 = v8;
  uint64_t v11 = v9;
  if (v6 == v8 && v7 == v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 1;
  }
  if (!*(void *)(a3 + 16) || (unint64_t v13 = sub_100016D20(v6, v7), (v14 & 1) == 0))
  {
    swift_bridgeObjectRelease();
LABEL_13:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v15 = *(void **)(*(void *)(a3 + 56) + 8 * v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  char v16 = sub_10054E494(v10, v11, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v16 & 1) != 0;
}

uint64_t sub_1004FB430(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v50 = a1;
  uint64_t v51 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v52 = v8;
  uint64_t v53 = 0;
  uint64_t v54 = v11 & v9;
  uint64_t v55 = a2;
  uint64_t v56 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1003A4A7C(&v48);
  uint64_t v12 = *((void *)&v48 + 1);
  if (!*((void *)&v48 + 1)) {
    goto LABEL_27;
  }
  uint64_t v13 = v48;
  sub_1001C5DD4(v49, v47);
  char v14 = *(void **)a5;
  unint64_t v16 = sub_100016D20(v13, v12);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  char v20 = v15;
  if (v14[3] >= v19)
  {
    if (a4)
    {
      if (v15) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_10052CE2C();
      if (v20) {
        goto LABEL_12;
      }
    }
LABEL_14:
    uint64_t v24 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    uint64_t v25 = (uint64_t *)(v24[6] + 16 * v16);
    *uint64_t v25 = v13;
    v25[1] = v12;
    sub_1001C5DD4(v47, (_OWORD *)(v24[7] + 32 * v16));
    uint64_t v26 = v24[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v24[2] = v28;
LABEL_16:
    sub_1003A4A7C(&v48);
    for (uint64_t i = *((void *)&v48 + 1); *((void *)&v48 + 1); uint64_t i = *((void *)&v48 + 1))
    {
      uint64_t v31 = v48;
      sub_1001C5DD4(v49, v47);
      long long v32 = *(void **)a5;
      unint64_t v34 = sub_100016D20(v31, i);
      uint64_t v35 = v32[2];
      BOOL v36 = (v33 & 1) == 0;
      uint64_t v37 = v35 + v36;
      if (__OFADD__(v35, v36)) {
        goto LABEL_28;
      }
      char v38 = v33;
      if (v32[3] < v37)
      {
        sub_100525DEC(v37, 1);
        unint64_t v39 = sub_100016D20(v31, i);
        if ((v38 & 1) != (v40 & 1)) {
          goto LABEL_30;
        }
        unint64_t v34 = v39;
      }
      if (v38)
      {
        sub_1000144C8((uint64_t)v47, (uint64_t)v46);
        sub_100014524((uint64_t)v47);
        swift_bridgeObjectRelease();
        uint64_t v30 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v34);
        sub_100014524((uint64_t)v30);
        sub_1001C5DD4(v46, v30);
      }
      else
      {
        uint64_t v41 = *(void **)a5;
        *(void *)(*(void *)a5 + 8 * (v34 >> 6) + 64) |= 1 << v34;
        uint64_t v42 = (uint64_t *)(v41[6] + 16 * v34);
        *uint64_t v42 = v31;
        v42[1] = i;
        sub_1001C5DD4(v47, (_OWORD *)(v41[7] + 32 * v34));
        uint64_t v43 = v41[2];
        BOOL v27 = __OFADD__(v43, 1);
        uint64_t v44 = v43 + 1;
        if (v27) {
          goto LABEL_29;
        }
        v41[2] = v44;
      }
      sub_1003A4A7C(&v48);
    }
LABEL_27:
    swift_release();
    swift_bridgeObjectRelease();
    sub_10024A370();
    return swift_release();
  }
  sub_100525DEC(v19, a4 & 1);
  unint64_t v21 = sub_100016D20(v13, v12);
  if ((v20 & 1) == (v22 & 1))
  {
    unint64_t v16 = v21;
    if ((v20 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    sub_1000144C8((uint64_t)v47, (uint64_t)v46);
    sub_100014524((uint64_t)v47);
    swift_bridgeObjectRelease();
    uint64_t v23 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v16);
    sub_100014524((uint64_t)v23);
    sub_1001C5DD4(v46, v23);
    goto LABEL_16;
  }
LABEL_30:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1004FB788@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  sub_1000144C8((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1004FB7DC(uint64_t a1, uint64_t a2)
{
  sub_1000172F8(&qword_10065C3A0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v5;
  *(void *)(inited + 72) = &type metadata for Bool;
  *(unsigned char *)(inited + 48) = 1;
  unint64_t v6 = sub_10044B428(inited);
  unint64_t v27 = v6;
  sub_10001733C(a1, (uint64_t)&v28, &qword_10065D400);
  if ((void)v29 != 1)
  {
    long long v31 = v28;
    long long v32 = v29;
    long long v33 = v30;
    sub_10001733C((uint64_t)&v32 + 8, (uint64_t)v34, &qword_10065DEF8);
    sub_10001733C((uint64_t)v34, (uint64_t)&v35, &qword_10065DEF8);
    if ((v36 & 1) != 0 || (uint64_t v7 = *((void *)&v33 + 1)) == 0)
    {
      __break(1u);
      uint64_t result = swift_bridgeObjectRelease();
      __break(1u);
      return result;
    }
    uint64_t v8 = v35;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;
    uint64_t v12 = swift_initStackObject();
    *(_OWORD *)(v12 + 16) = xmmword_1005A6B00;
    *(void *)(v12 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v12 + 40) = v13;
    *(void *)(v12 + 72) = &type metadata for String;
    *(void *)(v12 + 48) = v9;
    *(void *)(v12 + 56) = v11;
    *(void *)(v12 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v12 + 88) = v14;
    *(void *)(v12 + 120) = &type metadata for Int;
    *(void *)(v12 + 96) = v8;
    *(void *)(v12 + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v12 + 136) = v15;
    *(void *)(v12 + 168) = sub_1000172F8((uint64_t *)&unk_10065C5D0);
    *(void *)(v12 + 144) = v7;
    swift_bridgeObjectRetain();
    unint64_t v16 = sub_10044B428(v12);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v25 = v6;
    sub_1004FB430(v16, (uint64_t)sub_1004FB788, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v25);
    unint64_t v6 = v25;
    unint64_t v27 = v25;
    swift_bridgeObjectRelease();
  }
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v18;
  uint64_t v21 = v19;
  if (a2)
  {
    uint64_t v26 = sub_1000172F8(&qword_10065FEA0);
    *(void *)&long long v25 = a2;
    sub_1001C5DD4(&v25, v24);
    swift_bridgeObjectRetain();
    char v22 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v27 = 0x8000000000000000;
    sub_10052A468(v24, v20, v21, v22);
    unint64_t v27 = v6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10042EF88(v18, v19, &v25);
    swift_bridgeObjectRelease();
    sub_100016E7C((uint64_t)&v25);
  }
  return v27;
}

id sub_1004FBAD4()
{
  id v1 = [v0 iTunesMetadata];
  uint64_t v2 = &selRef_versionIdentifier;
  id v3 = [v1 versionIdentifier];

  id v4 = [v0 iTunesMetadata];
  id v5 = v4;
  if (!v3)
  {
    id v6 = [v4 betaVersionIdentifier];

    if (!v6) {
      return 0;
    }
    id v5 = [v0 iTunesMetadata];
    uint64_t v2 = &selRef_betaVersionIdentifier;
  }
  id v7 = [v5 *v2];

  return v7;
}

void sub_1004FBBB4()
{
  id v1 = [v0 bundleIdentifier];
  if (!v1)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v2 = v1;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v3 = sub_1004FBD68();
  if (!v3) {
    id v3 = [objc_allocWithZone((Class)MIStoreMetadata) init];
  }
  id v4 = v3;
  NSString v5 = String._bridgeToObjectiveC()();
  [v4 setManagementDeclarationIdentifier:v5];

  id v6 = objc_allocWithZone((Class)IXApplicationIdentity);
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [v6 initWithBundleIdentifier:v7];

  if (!v8) {
LABEL_10:
  }
    __break(1u);

  id v12 = 0;
  unsigned __int8 v9 = [self updateiTunesMetadata:v4 forAppWithIdentity:v8 error:&v12];

  if (v9)
  {
    id v10 = v12;
  }
  else
  {
    id v11 = v12;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

id sub_1004FBD68()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for URL.DirectoryHint();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  NSString v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v6 - 8);
  id v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v34 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v32 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v32 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v32 - v19;
  id v21 = [v1 bundleContainerURL];
  if (!v21)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    goto LABEL_6;
  }
  char v22 = v21;
  uint64_t v33 = v3;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v23(v8, v18, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
LABEL_6:
    sub_10001729C((uint64_t)v8, &qword_10065C3C0);
    return 0;
  }
  v23(v20, v8, v9);
  unint64_t v35 = 0xD000000000000014;
  unint64_t v36 = 0x80000001005BDA90;
  uint64_t v24 = v33;
  (*(void (**)(char *, void, uint64_t))(v33 + 104))(v5, enum case for URL.DirectoryHint.inferFromPath(_:), v2);
  sub_100017B14();
  URL.appending<A>(component:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v2);
  swift_bridgeObjectRelease();
  Swift::Bool v25 = URL.checkResourceIsReachable()();
  if (v26)
  {
    swift_errorRelease();
LABEL_9:
    long long v28 = *(void (**)(char *, uint64_t))(v10 + 8);
    v28(v15, v9);
    v28(v20, v9);
    return 0;
  }
  if (!v25) {
    goto LABEL_9;
  }
  sub_10018B1DC(0, (unint64_t *)&qword_10065DC30);
  uint64_t v27 = (uint64_t)v34;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v34, v15, v9);
  id v30 = sub_1004FD024(v27);
  long long v31 = *(void (**)(char *, uint64_t))(v10 + 8);
  v31(v15, v9);
  v31(v20, v9);
  return v30;
}

uint64_t sub_1004FC1A4()
{
  id v1 = [v0 iTunesMetadata];
  id v2 = [v1 distributorInfo];

  id v3 = [v2 distributorID];
  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  id v7 = [v0 bundleIdentifier];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    if (v6)
    {
      if (v11)
      {
        if (v4 == v9 && v6 == v11)
        {
          swift_bridgeObjectRelease();
          char v12 = 1;
        }
        else
        {
          char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
        }
        goto LABEL_16;
      }
      goto LABEL_11;
    }
    if (v11)
    {
      char v12 = 0;
      goto LABEL_16;
    }
  }
  else if (v6)
  {
LABEL_11:
    char v12 = 0;
LABEL_16:
    swift_bridgeObjectRelease();
    return v12 & 1;
  }
  char v12 = 1;
  return v12 & 1;
}

uint64_t sub_1004FC2F8()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v52 = *(void *)(v2 - 8);
  uint64_t v53 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v51 = (char *)v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v48[3] = (char *)v48 - v5;
  uint64_t v6 = type metadata accessor for URL.DirectoryHint();
  uint64_t v49 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v8 = (char *)v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)v48 - v15;
  __chkstk_darwin(v14);
  uint64_t v50 = (char *)v48 - v17;
  uint64_t v18 = sub_1000172F8(&qword_10065C3C0);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  id v21 = (char *)v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)v48 - v22;
  id v24 = [v1 executableURL];
  if (v24)
  {
    Swift::Bool v25 = v24;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v21, 0, 1, v9);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v21, 1, 1, v9);
  }
  uint64_t v26 = v9;
  sub_10026400C((uint64_t)v21, (uint64_t)v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v23, 1, v9) == 1)
  {
    sub_10001729C((uint64_t)v23, &qword_10065C3C0);
    uint64_t v27 = v51;
    static Logger.ald.getter();
    id v28 = v1;
    long long v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      uint64_t v32 = (void *)swift_slowAlloc();
      uint64_t v50 = (char *)swift_slowAlloc();
      uint64_t v55 = v50;
      *(_DWORD *)uint64_t v31 = 138412546;
      uint64_t v33 = sub_1005163F0();
      uint64_t v54 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v32 = v33;
      *(_WORD *)(v31 + 12) = 2082;
      id v34 = v28;
      id v35 = [v34 description];
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v38 = v37;

      uint64_t v54 = sub_1000143F4(v36, v38, (uint64_t *)&v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "[%@] Unable to find an executable name for %{public}s", (uint8_t *)v31, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v52 + 8))(v51, v53);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v52 + 8))(v27, v53);
    }
    return 0;
  }
  else
  {
    uint64_t v51 = (char *)URL.lastPathComponent.getter();
    uint64_t v40 = v39;
    uint64_t v41 = *(void (**)(char *, uint64_t))(v10 + 8);
    v41(v23, v9);
    id v42 = [v1 URL];
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000172F8(&qword_10065D360);
    uint64_t v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = xmmword_1005A4070;
    *(void *)(v43 + 32) = 0x6F666E495F4353;
    *(void *)(v43 + 40) = 0xE700000000000000;
    *(void *)(v43 + 48) = v51;
    *(void *)(v43 + 56) = v40;
    uint64_t v44 = v49;
    (*(void (**)(char *, void, uint64_t))(v49 + 104))(v8, enum case for URL.DirectoryHint.inferFromPath(_:), v6);
    sub_100017B14();
    URL.appending<A>(components:directoryHint:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v8, v6);
    v41(v13, v9);
    uint64_t v45 = v50;
    URL.appendingPathExtension(_:)();
    v41(v16, v9);
    uint64_t v46 = Data.init(contentsOf:options:)();
    v41(v45, v26);
  }
  return v46;
}

uint64_t sub_1004FCC64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000172F8(&qword_10065C9B0);
  __chkstk_darwin(v6 - 8);
  id v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [(id)swift_getObjCClassFromMetadata() defaultWorkspace];
  if (!v9)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v10 = v9;
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v10 createDeviceIdentifierWithVendorName:v11 bundleIdentifier:v12];

  if (!v13)
  {
LABEL_6:
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    goto LABEL_7;
  }
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v14(v8, v5, v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
  if (result != 1) {
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_1004FCEAC()
{
  id v0 = [(id)swift_getObjCClassFromMetadata() defaultWorkspace];
  if (v0)
  {
    id v1 = v0;
    NSString v2 = String._bridgeToObjectiveC()();
    id v3 = String._bridgeToObjectiveC()();
    [v1 removeDeviceIdentifierForVendorName:v2 bundleIdentifier:v3];
  }
  else
  {
    __break(1u);
  }
}

id sub_1004FCF70()
{
  id result = [(id)swift_getObjCClassFromMetadata() defaultWorkspace];
  if (result)
  {
    id v1 = result;
    NSString v2 = String._bridgeToObjectiveC()();
    NSString v3 = String._bridgeToObjectiveC()();
    unsigned int v4 = [v1 isVersion:v2 greaterThanOrEqualToVersion:v3];

    return (id)(v4 ^ 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1004FD024(uint64_t a1)
{
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  NSString v3 = v2;
  id v12 = 0;
  id v4 = [(id)swift_getObjCClassFromMetadata() metadataFromPlistAtURL:v2 error:&v12];

  id v5 = v12;
  if (v4)
  {
    uint64_t v6 = type metadata accessor for URL();
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
    id v8 = v5;
    v7(a1, v6);
  }
  else
  {
    id v9 = v12;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v10 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
  }
  return v4;
}

void sub_1004FD17C(uint64_t a1@<X2>, unint64_t a2@<X3>, uint64_t a3@<X4>, void *a4@<X8>)
{
  if (a2 >= 2)
  {
    id v11 = objc_allocWithZone((Class)LSApplicationIdentity);
    swift_bridgeObjectRetain();
    sub_1001C5E20(a1, a2);
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v7 = String._bridgeToObjectiveC()();
    id v8 = [v11 initWithBundleIdentifier:v12 URL:0 personaUniqueString:v7 personaType:2];
    sub_1001C5E34(a1, a2);
  }
  else
  {
    id v6 = objc_allocWithZone((Class)LSApplicationIdentity);
    swift_bridgeObjectRetain();
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v8 = [v6 initWithBundleIdentifier:v7 URL:0 personaUniqueString:0 personaType:4];
  }

  id v16 = 0;
  id v13 = [v8 findApplicationRecordFetchingPlaceholder:a3 error:&v16];
  id v14 = v16;
  if (v13)
  {
  }
  else
  {
    uint64_t v15 = v14;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
  *a4 = v13;
}

uint64_t sub_1004FD358(void *a1, id a2, uint64_t a3, unint64_t a4)
{
  id v8 = [a1 iTunesMetadata];
  id v9 = [v8 storeItemIdentifier];

  if (v9 != a2) {
    return 0;
  }
  if (!a4) {
    return 1;
  }
  id v10 = [a1 identities];
  sub_10018B1DC(0, &qword_100666438);
  unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v11 >> 62) {
    goto LABEL_31;
  }
  uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  sub_1001C5E20(a3, a4);
  swift_bridgeObjectRetain();
  for (; v12; uint64_t v12 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v13 = v11 & 0xC000000000000001;
    uint64_t v14 = 4;
    unint64_t v28 = v11;
    while (1)
    {
      id v15 = v13 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v11 + 8 * v14);
      id v16 = v15;
      uint64_t v17 = v14 - 3;
      if (__OFADD__(v14 - 4, 1)) {
        break;
      }
      if (a4 < 2)
      {
        if ([v15 personaType] == (id)4)
        {
          id v18 = [v16 personaUniqueString];
          if (!v18)
          {
            swift_bridgeObjectRelease();

            uint64_t v12 = 1;
            goto LABEL_33;
          }
          id v19 = v18;

          id v16 = v19;
        }
        goto LABEL_7;
      }
      swift_bridgeObjectRetain();
      if ([v16 personaType] != (id)2)
      {
        sub_1001C5E34(a3, a4);
LABEL_7:

        goto LABEL_8;
      }
      uint64_t v20 = a3;
      id v21 = [v16 personaUniqueString];
      if (!v21)
      {
        sub_1001C5E34(a3, a4);
        unint64_t v11 = v28;
        goto LABEL_7;
      }
      uint64_t v22 = v21;
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v25 = v24;

      a3 = v20;
      if (v23 == v20 && v25 == a4)
      {
        sub_1001C5E34(v20, a4);
        swift_bridgeObjectRelease();

LABEL_29:
        swift_bridgeObjectRelease();
        uint64_t v12 = 1;
        goto LABEL_33;
      }
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      sub_1001C5E34(v20, a4);

      swift_bridgeObjectRelease();
      unint64_t v11 = v28;
      if (v26) {
        goto LABEL_29;
      }
LABEL_8:
      ++v14;
      if (v17 == v12)
      {
        swift_bridgeObjectRelease();
        uint64_t v12 = 0;
        goto LABEL_33;
      }
    }
    __break(1u);
LABEL_31:
    sub_1001C5E20(a3, a4);
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
LABEL_33:
  sub_1001C5E34(a3, a4);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1004FD674()
{
  return sub_1004FC1A4() & 1;
}

char *sub_1004FD69C(char *a1, int64_t a2)
{
  if (!a2) {
    return (char *)_swiftEmptyArrayStorage;
  }
  if (a2 > 0)
  {
    sub_1000172F8(&qword_100663C60);
    id v4 = (char *)swift_allocObject();
    size_t v5 = j__malloc_size(v4);
    *((void *)v4 + 2) = a2;
    *((void *)v4 + 3) = 2 * v5 - 64;
    id v6 = v4 + 32;
    if (&v4[a2 + 32] <= a1 || v6 >= &a1[a2])
    {
      memcpy(v6, a1, a2);
      return v4;
    }
  }
  id result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1004FD7C0(char *a1, uint64_t a2)
{
  if (!a2) {
    return (char *)_swiftEmptyArrayStorage;
  }
  if (a2 > 0)
  {
    sub_1000172F8(&qword_100666440);
    id v4 = (char *)swift_allocObject();
    size_t v5 = j__malloc_size(v4);
    *((void *)v4 + 2) = a2;
    *((void *)v4 + 3) = 2 * ((uint64_t)(v5 - 32) / 40);
    id v6 = v4 + 32;
    if (&v4[40 * a2 + 32] <= a1 || v6 >= &a1[40 * a2])
    {
      memcpy(v6, a1, 40 * a2);
      return v4;
    }
  }
  id result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1004FD900(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_1000172F8(&qword_10065E580);
  NSString v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 1;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 5);
  uint64_t v6 = sub_1001D00FC((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_10024A370();
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_1004FD9E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_1000172F8(&qword_10065D360);
  NSString v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_1001D0318((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_10024A370();
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_1004FDAD0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    goto LABEL_21;
  }
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  if (v5 <= 0)
  {
    unint64_t v11 = _swiftEmptyArrayStorage;
    if (v4 != a3)
    {
LABEL_10:
      if (v5 < 0) {
        goto LABEL_24;
      }
      uint64_t v14 = *(void *)(type metadata accessor for MediaAPIUpdates.App(0) - 8);
      id v15 = (char *)v11 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
      uint64_t v16 = *(void *)(v14 + 72);
      unint64_t v17 = a2 + v16 * a3;
      uint64_t v18 = v16 * v5;
      id v19 = &v15[v18];
      unint64_t v20 = v17 + v18;
      if (v17 < (unint64_t)v19 && (unint64_t)v15 < v20) {
        goto LABEL_24;
      }
      swift_arrayInitWithCopy();
      return v11;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  sub_1000172F8(&qword_100663DC0);
  uint64_t v8 = *(void *)(type metadata accessor for MediaAPIUpdates.App(0) - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v11 = (void *)swift_allocObject();
  size_t v12 = j__malloc_size(v11);
  if (v9)
  {
    if (v12 - v10 == 0x8000000000000000 && v9 == -1) {
      goto LABEL_23;
    }
    v11[2] = v5;
    v11[3] = 2 * ((uint64_t)(v12 - v10) / v9);
    if (v4 != a3) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  id result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004FDD10(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)swift_bridgeObjectRetain();
  uint64_t v8 = v6[4];
  uint64_t v7 = v6[5];
  uint64_t v9 = v6[7];
  uint64_t v52 = v6[6];
  uint64_t v53 = v6;
  uint64_t v11 = v6[8];
  uint64_t v10 = v6[9];
  uint64_t v54 = a3;
  uint64_t v12 = *a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v14 = sub_100016D20(v8, v7);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16)) {
    goto LABEL_23;
  }
  char v18 = v13;
  if (*(void *)(v12 + 24) >= v17)
  {
    if (a2)
    {
      if (v13) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_10052C7F0();
      if (v18) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v22 = v54;
    uint64_t v23 = (void *)*v54;
    *(void *)(*v54 + 8 * (v14 >> 6) + 64) |= 1 << v14;
    uint64_t v24 = (uint64_t *)(v23[6] + 16 * v14);
    *uint64_t v24 = v8;
    v24[1] = v7;
    uint64_t v25 = (void *)(v23[7] + 32 * v14);
    *uint64_t v25 = v52;
    v25[1] = v9;
    v25[2] = v11;
    v25[3] = v10;
    uint64_t v26 = v23[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v23[2] = v28;
    uint64_t v29 = v3 - 1;
    if (v3 == 1) {
      return swift_bridgeObjectRelease_n();
    }
    for (uint64_t i = v53 + 15; ; i += 6)
    {
      uint64_t v32 = *(i - 5);
      uint64_t v31 = *(i - 4);
      uint64_t v34 = *(i - 3);
      uint64_t v33 = *(i - 2);
      uint64_t v35 = *(i - 1);
      uint64_t v36 = *i;
      uint64_t v37 = *v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v38 = sub_100016D20(v32, v31);
      uint64_t v40 = *(void *)(v37 + 16);
      BOOL v41 = (v39 & 1) == 0;
      BOOL v27 = __OFADD__(v40, v41);
      uint64_t v42 = v40 + v41;
      if (v27) {
        break;
      }
      char v43 = v39;
      if (*(void *)(v37 + 24) < v42)
      {
        sub_1005253F0(v42, 1);
        unint64_t v38 = sub_100016D20(v32, v31);
        if ((v43 & 1) != (v44 & 1)) {
          goto LABEL_25;
        }
      }
      if (v43) {
        goto LABEL_10;
      }
      uint64_t v22 = v54;
      uint64_t v45 = (void *)*v54;
      *(void *)(*v54 + 8 * (v38 >> 6) + 64) |= 1 << v38;
      uint64_t v46 = (uint64_t *)(v45[6] + 16 * v38);
      *uint64_t v46 = v32;
      v46[1] = v31;
      uint64_t v47 = (void *)(v45[7] + 32 * v38);
      *uint64_t v47 = v34;
      v47[1] = v33;
      _OWORD v47[2] = v35;
      v47[3] = v36;
      uint64_t v48 = v45[2];
      BOOL v27 = __OFADD__(v48, 1);
      uint64_t v49 = v48 + 1;
      if (v27) {
        goto LABEL_24;
      }
      v45[2] = v49;
      if (!--v29) {
        return swift_bridgeObjectRelease_n();
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1005253F0(v17, a2 & 1);
  unint64_t v19 = sub_100016D20(v8, v7);
  if ((v18 & 1) == (v20 & 1))
  {
    unint64_t v14 = v19;
    if ((v18 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    swift_allocError();
    swift_willThrow();
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      return swift_errorRelease();
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v50._object = (void *)0x80000001005B9220;
  v50._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v50);
  _print_unlocked<A, B>(_:_:)();
  v51._countAndFlagsBits = 39;
  v51._object = (void *)0xE100000000000000;
  String.append(_:)(v51);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1004FE0F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v70 = a8;
  unint64_t v72 = a5;
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_1000172F8((uint64_t *)&unk_100661AB0);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  id v21 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  LODWORD(v65) = a3;
  uint64_t v71 = a1;
  if (a3)
  {
    uint64_t v66 = a4;
    uint64_t v67 = v17;
    uint64_t v68 = v15;
    uint64_t v69 = v14;
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
    uint64_t v24 = (char *)&v63 - v22;
    v23((char *)&v63 - v22, 1, 1, v14);
    uint64_t v63 = v24;
    sub_1000114D4((uint64_t)v24, (uint64_t)v21);
    sub_1001C3ED0(a1, a2, 1);
    sub_1001C5E20(a6, a7);
    uint64_t v64 = a2;
    sub_1001C3ED0(a1, a2, 1);
    sub_1001C5E20(a6, a7);
    uint64_t v25 = sub_100011088("LSApplicationRecord", 19, 2, 0, 1, 1, (uint64_t)v21, (void *)&_mh_execute_header);
    uint64_t v27 = v26;
    uint64_t v29 = v28;
    uint64_t v31 = v30;
    if (qword_10065B150 != -1) {
      swift_once();
    }
    v73[0] = (uint64_t)v25;
    v73[1] = v27;
    v73[2] = v29;
    v73[3] = v31;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1000172F8(&qword_10065F9C0);
    swift_task_localValuePush();
    os_unfair_lock_lock((os_unfair_lock_t)(v27 + 24));
    sub_100006238((void **)(v27 + 16), (void **)&v74);
    os_unfair_lock_unlock((os_unfair_lock_t)(v27 + 24));
    uint64_t v32 = (void *)v74;
    if (v74)
    {
      sub_10000E2EC();
    }
    uint64_t v33 = v71;
    a2 = v64;
    sub_1004FD17C(a6, a7, v70, v73);
    sub_1001C5E34(a6, a7);
    sub_1001C3EC0(v33, a2, 1);
    uint64_t v17 = v67;
    uint64_t v34 = (void *)v73[0];
    swift_task_localValuePop();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_1001C5E34(a6, a7);
    sub_1001C3EC0(v33, a2, 1);
    uint64_t v35 = v68;
    uint64_t v14 = v69;
    unint64_t v36 = v72;
    a4 = v66;
    uint64_t v37 = (uint64_t)v63;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v21, 1, 1, v14);
    sub_1001C5E20(a6, a7);
    sub_100516588("LSApplicationRecord", 19, 2, 0, 1, 1, (uint64_t)v21, (os_activity_scope_state_s *)&_mh_execute_header, a1, a6, a7);
    uint64_t v34 = v38;
    sub_1001C5E34(a6, a7);
    uint64_t v37 = (uint64_t)v21;
    uint64_t v35 = v15;
    unint64_t v36 = v72;
  }
  sub_10001729C(v37, (uint64_t *)&unk_100661AB0);
  if (v34)
  {
    id v39 = v34;
    if (sub_100506CF0(v39, a4, v36))
    {
    }
    else
    {
      uint64_t v40 = a4;
      char v41 = v65 & 1;
      static Logger.library.getter();
      uint64_t v42 = v71;
      sub_1001C3ED0(v71, a2, v41);
      id v43 = v39;
      sub_1000100E0(v40, v36);
      sub_1001C3ED0(v42, a2, v41);
      id v44 = v43;
      sub_1000100E0(v40, v36);
      unint64_t v45 = v36;
      uint64_t v46 = Logger.logObject.getter();
      LODWORD(v70) = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v46, (os_log_type_t)v70))
      {
        uint64_t v66 = v40;
        uint64_t v67 = v17;
        uint64_t v68 = v35;
        uint64_t v69 = v14;
        uint64_t v47 = swift_slowAlloc();
        uint64_t v65 = swift_slowAlloc();
        v73[0] = v65;
        *(_DWORD *)uint64_t v47 = 136446722;
        sub_1001C3ED0(v42, a2, v41);
        uint64_t v48 = StoreAppIdentifier.description.getter();
        unint64_t v50 = v49;
        sub_1001C3EC0(v42, a2, v41);
        uint64_t v74 = sub_1000143F4(v48, v50, v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1001C3EC0(v42, a2, v41);
        sub_1001C3EC0(v42, a2, v41);
        *(_WORD *)(v47 + 12) = 2082;
        id v51 = [v44 iTunesMetadata];
        id v52 = [v51 distributorInfo];

        id v53 = [v52 distributorID];
        if (v53)
        {
          uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v56 = v55;
        }
        else
        {
          unint64_t v56 = 0xE500000000000000;
          uint64_t v54 = 0x296C696E28;
        }
        uint64_t v74 = sub_1000143F4(v54, v56, v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v47 + 22) = 2082;
        uint64_t v57 = v66;
        unint64_t v58 = v72;
        sub_1000100E0(v66, v72);
        unint64_t v59 = sub_100506E20(v57, v58);
        unint64_t v61 = v60;
        sub_10000F7EC(v57, v58);
        uint64_t v74 = sub_1000143F4(v59, v61, v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10000F7EC(v57, v58);
        sub_10000F7EC(v57, v58);
        _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v70, "Found application record for app %{public}s with distributorID %{public}s but not visible to %{public}s", (uint8_t *)v47, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v68 + 8))(v67, v69);
      }
      else
      {

        sub_1001C3EC0(v42, a2, v41);
        sub_1001C3EC0(v42, a2, v41);

        sub_10000F7EC(v40, v45);
        sub_10000F7EC(v40, v45);

        (*(void (**)(char *, uint64_t))(v35 + 8))(v17, v14);
      }
      return 0;
    }
  }
  return v34;
}

id sub_1004FE8B8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  if (a3)
  {
    id v13 = objc_allocWithZone((Class)LSApplicationRecord);
    swift_bridgeObjectRetain();
    id v10 = v13;
    id v14 = sub_1002E7BC0();
    if (v6) {
      return v10;
    }
    id v10 = v14;
    id v12 = sub_1004FBD68();
    if (!v12)
    {
LABEL_13:

      return 0;
    }
  }
  else
  {
    id v23 = 0;
    id v9 = [objc_allocWithZone((Class)LSApplicationRecord) initWithStoreItemIdentifier:a1 error:&v23];
    if (!v9)
    {
      id v10 = v23;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      return v10;
    }
    id v10 = v9;
    id v11 = v23;
    id v12 = sub_1004FBD68();
    if (!v12) {
      goto LABEL_13;
    }
  }
  uint64_t v15 = v12;
  id v16 = [v12 managementDeclarationIdentifier];

  if (!v16) {
    goto LABEL_13;
  }
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  if (v17 == a4 && v19 == a5)
  {
    swift_bridgeObjectRelease();
    return v10;
  }
  char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v21 & 1) == 0) {
    goto LABEL_13;
  }
  return v10;
}

void *sub_1004FEA64(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    unint64_t v59 = _swiftEmptyArrayStorage;
    sub_100455E38(0, v1, 0);
    uint64_t v3 = _swiftEmptyArrayStorage;
    unint64_t v4 = (void **)(a1 + 56);
    do
    {
      uint64_t v6 = (void **)*(v4 - 3);
      uint64_t v5 = (uint64_t)*(v4 - 2);
      uint64_t v7 = (uint64_t)*(v4 - 1);
      uint64_t v8 = *v4;
      aBlock = v6;
      uint64_t v54 = v5;
      id v9 = v3;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v10._countAndFlagsBits = 58;
      v10._object = (void *)0xE100000000000000;
      String.append(_:)(v10);
      swift_bridgeObjectRetain();
      v11._countAndFlagsBits = v7;
      v11._object = v8;
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      uint64_t v3 = v9;
      unint64_t v59 = v9;
      unint64_t v12 = v9[2];
      unint64_t v13 = v3[3];
      unint64_t v14 = v12 + 1;
      if (v12 >= v13 >> 1)
      {
        sub_100455E38(v13 > 1, v12 + 1, 1);
        unint64_t v14 = v12 + 1;
        uint64_t v3 = v59;
      }
      v4 += 4;
      v3[2] = v14;
      uint64_t v15 = &v3[6 * v12];
      void v15[4] = v6;
      v15[5] = v5;
      v15[6] = v6;
      v15[7] = v5;
      v15[8] = v7;
      v15[9] = v8;
      --v1;
    }
    while (v1);
  }
  else if (!_swiftEmptyArrayStorage[2])
  {
    id v16 = (void **)&_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000172F8(&qword_100666430);
  id v16 = (void **)static _DictionaryStorage.allocate(capacity:)();
LABEL_9:
  aBlock = v16;
  uint64_t v17 = swift_bridgeObjectRetain();
  sub_1004FDD10(v17, 1, (uint64_t *)&aBlock);
  swift_bridgeObjectRelease();
  uint64_t v18 = (uint64_t)aBlock;
  id v19 = [self enumeratorWithOptions:192];
  uint64_t v57 = sub_1004FD674;
  uint64_t v58 = 0;
  aBlock = _NSConcreteStackBlock;
  uint64_t v54 = 1107296256;
  unint64_t v55 = sub_1004E598C;
  unint64_t v56 = &unk_10064B1C8;
  uint64_t v20 = _Block_copy(&aBlock);
  [v19 setFilter:v20];
  _Block_release(v20);
  p_base_prots = &XPCClientRegistry.base_prots;
  id v22 = [v19 nextObject];
  if (!v22) {
    goto LABEL_21;
  }
  id v23 = v22;
  uint64_t v24 = &XPCClientRegistry.base_prots;
  uint64_t v25 = &XPCClientRegistry.base_prots;
  uint64_t v26 = &selRef_initWithOptions_;
  do
  {
    id v52 = (void **)v18;
    while (1)
    {
      id v27 = [v23 (SEL)v24[376]];
      id v28 = [v27 (SEL)v25[374]];

      id v29 = [v28 v26[91]];
      if (!v29) {
        goto LABEL_14;
      }
      uint64_t v30 = (void **)static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v32 = v31;

      id v33 = [v23 (SEL)v24[376]];
      id v34 = [v33 (SEL)v25[374]];

      id v35 = [v34 domain];
      if (v35) {
        break;
      }
LABEL_13:
      swift_bridgeObjectRelease();
LABEL_14:

      id v23 = objc_msgSend(v19, (SEL)p_base_prots[474]);
      if (!v23) {
        goto LABEL_21;
      }
    }
    unint64_t v36 = v25;
    uint64_t v37 = v24;
    unint64_t v38 = p_base_prots;
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    char v41 = v40;

    aBlock = v30;
    uint64_t v54 = v32;
    v42._countAndFlagsBits = 58;
    v42._object = (void *)0xE100000000000000;
    String.append(_:)(v42);
    v43._countAndFlagsBits = v39;
    v43._object = v41;
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    uint64_t v44 = (uint64_t)aBlock;
    uint64_t v45 = v54;
    swift_bridgeObjectRetain();
    unint64_t v46 = sub_100016D20(v44, v45);
    LOBYTE(v44) = v47;
    swift_bridgeObjectRelease();
    if ((v44 & 1) == 0)
    {
      p_base_prots = v38;
      uint64_t v24 = v37;
      uint64_t v25 = v36;
      uint64_t v26 = &selRef_initWithOptions_;
      goto LABEL_13;
    }
    uint64_t v18 = (uint64_t)v52;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    aBlock = v52;
    p_base_prots = v38;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10052C7F0();
      uint64_t v18 = (uint64_t)aBlock;
    }
    swift_bridgeObjectRelease();
    sub_10042FFFC(v46, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    id v23 = [v19 (SEL)v38[474]];
    uint64_t v24 = v37;
    uint64_t v25 = v36;
    uint64_t v26 = &selRef_initWithOptions_;
  }
  while (v23);
LABEL_21:
  uint64_t v49 = swift_bridgeObjectRetain();
  unint64_t v50 = sub_1004FD900(v49);

  swift_bridgeObjectRelease_n();
  return v50;
}

uint64_t sub_1004FEF44()
{
  return swift_release();
}

unint64_t sub_1004FEF4C()
{
  sub_1000172F8(&qword_100666448);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A9D80;
  *(unsigned char *)(inited + 32) = 0;
  uint64_t v2 = *v0;
  uint64_t v3 = v0[1];
  *(void *)(inited + 64) = &type metadata for String;
  *(void *)(inited + 72) = &protocol witness table for String;
  *(void *)(inited + 80) = &protocol witness table for String;
  *(void *)(inited + 40) = v2;
  *(void *)(inited + 48) = v3;
  *(unsigned char *)(inited + 88) = 1;
  unint64_t v4 = (int *)type metadata accessor for MarketplaceCertificateTemplate();
  uint64_t v5 = (char *)v0 + v4[5];
  uint64_t v6 = type metadata accessor for Date();
  *(void *)(inited + 120) = v6;
  *(void *)(inited + 128) = sub_1004FF188(&qword_10065CFB8);
  *(void *)(inited + 136) = sub_1004FF188(&qword_10065CFC0);
  uint64_t v7 = sub_10019CE94((uint64_t *)(inited + 96));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v7, v5, v6);
  *(unsigned char *)(inited + 144) = 2;
  uint64_t v8 = (uint64_t *)((char *)v0 + v4[6]);
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  *(void *)(inited + 176) = &type metadata for Data;
  *(void *)(inited + 184) = sub_10024A974();
  *(void *)(inited + 192) = sub_10024A9C8();
  *(void *)(inited + 152) = v9;
  *(void *)(inited + 160) = v10;
  *(unsigned char *)(inited + 200) = 3;
  uint64_t v11 = *((unsigned __int8 *)v0 + v4[7]);
  *(void *)(inited + 232) = &type metadata for Int;
  *(void *)(inited + 240) = &protocol witness table for Int;
  *(void *)(inited + 248) = &protocol witness table for Int;
  *(void *)(inited + 208) = v11;
  *(unsigned char *)(inited + 256) = 4;
  unint64_t v12 = (uint64_t *)((char *)v0 + v4[8]);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  *(void *)(inited + 288) = &type metadata for String;
  *(void *)(inited + 296) = &protocol witness table for String;
  *(void *)(inited + 304) = &protocol witness table for String;
  *(void *)(inited + 264) = v13;
  *(void *)(inited + 272) = v14;
  swift_bridgeObjectRetain();
  sub_100012670(v9, v10);
  swift_bridgeObjectRetain();
  return sub_10044BF50(inited);
}

uint64_t type metadata accessor for MarketplaceCertificateTemplate()
{
  uint64_t result = qword_1006664A8;
  if (!qword_1006664A8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1004FF188(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Date();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_1004FF1CC(void *a1, void *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    unint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = (void *)((char *)v4 + v13);
    uint64_t v15 = (void *)((char *)a2 + v13);
    uint64_t v16 = *v15;
    unint64_t v17 = v15[1];
    sub_100012670(*v15, v17);
    *uint64_t v14 = v16;
    v14[1] = v17;
    uint64_t v18 = a3[8];
    *((unsigned char *)v4 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    id v19 = (void *)((char *)v4 + v18);
    uint64_t v20 = (void *)((char *)a2 + v18);
    uint64_t v21 = v20[1];
    *id v19 = *v20;
    v19[1] = v21;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1004FF304(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  sub_100013510(*(void *)(a1 + *(int *)(a2 + 24)), *(void *)(a1 + *(int *)(a2 + 24) + 8));

  return swift_bridgeObjectRelease();
}

void *sub_1004FF3A4(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  sub_100012670(*v14, v16);
  *uint64_t v13 = v15;
  v13[1] = v16;
  uint64_t v17 = a3[8];
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  uint64_t v18 = (void *)((char *)a1 + v17);
  id v19 = (void *)((char *)a2 + v17);
  uint64_t v20 = v19[1];
  void *v18 = *v19;
  v18[1] = v20;
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1004FF48C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  sub_100012670(*v12, v14);
  uint64_t v15 = *v11;
  unint64_t v16 = v11[1];
  *uint64_t v11 = v13;
  v11[1] = v14;
  sub_100013510(v15, v16);
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  uint64_t v17 = a3[8];
  uint64_t v18 = (void *)((char *)a1 + v17);
  id v19 = (void *)((char *)a2 + v17);
  void *v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1004FF590(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *((unsigned char *)a1 + v10) = *((unsigned char *)a2 + v10);
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  return a1;
}

void *sub_1004FF63C(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = *(void *)((char *)a1 + v11);
  unint64_t v13 = *(void *)((char *)a1 + v11 + 8);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  sub_100013510(v12, v13);
  uint64_t v14 = a3[8];
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  uint64_t v15 = (void *)((char *)a1 + v14);
  unint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  *uint64_t v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1004FF70C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004FF720);
}

uint64_t sub_1004FF720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1004FF7D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004FF7E4);
}

uint64_t sub_1004FF7E4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1004FF88C()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1004FF93C()
{
  unint64_t result = qword_1006664F0;
  if (!qword_1006664F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006664F0);
  }
  return result;
}

uint64_t sub_1004FF990@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v27 = a4;
  uint64_t v28 = type metadata accessor for ProgressCache.Progress();
  uint64_t v7 = *(void *)(v28 - 8);
  uint64_t v8 = __chkstk_darwin(v28);
  uint64_t v10 = (uint64_t *)((char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v27 - v11;
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v29 = a1 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v30 = (unint64_t)(v14 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t j = 0;
  if (!v16) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v19 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v19 | (j << 6); ; unint64_t i = __clz(__rbit64(v22)) + (j << 6))
  {
    sub_10050B060(*(void *)(a1 + 56) + *(void *)(v7 + 72) * i, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress);
    sub_10050B0C8((uint64_t)v12, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress);
    BOOL v24 = *v10 == a2 && v10[1] == a3;
    if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_release();
      uint64_t v25 = v27;
      sub_10050B0C8((uint64_t)v10, v27, (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress);
      uint64_t v26 = 0;
LABEL_29:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v25, v26, 1, v28);
      return swift_bridgeObjectRelease();
    }
    uint64_t result = sub_10050AF58((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress);
    if (v16) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v21 = j + 1;
    if (__OFADD__(j, 1)) {
      break;
    }
    if (v21 >= v30) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v29 + 8 * v21);
    ++j;
    if (v22) {
      goto LABEL_19;
    }
    int64_t j = v21 + 1;
    if (v21 + 1 >= v30) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v29 + 8 * j);
    if (v22) {
      goto LABEL_19;
    }
    int64_t j = v21 + 2;
    if (v21 + 2 >= v30) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v29 + 8 * j);
    if (v22) {
      goto LABEL_19;
    }
    int64_t j = v21 + 3;
    if (v21 + 3 >= v30) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v29 + 8 * j);
    if (v22) {
      goto LABEL_19;
    }
    int64_t v23 = v21 + 4;
    if (v23 >= v30)
    {
LABEL_28:
      swift_release();
      uint64_t v26 = 1;
      uint64_t v25 = v27;
      goto LABEL_29;
    }
    unint64_t v22 = *(void *)(v29 + 8 * v23);
    for (int64_t j = v23; !v22; ++v23)
    {
      int64_t j = v23 + 1;
      if (__OFADD__(v23, 1)) {
        goto LABEL_31;
      }
      if (j >= v30) {
        goto LABEL_28;
      }
      unint64_t v22 = *(void *)(v29 + 8 * j);
    }
LABEL_19:
    unint64_t v16 = (v22 - 1) & v22;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1004FFCA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_WORD *)(v8 + 176) = v11;
  *(void *)(v8 + 104) = a7;
  *(void *)(v8 + 112) = a8;
  *(void *)(v8 + 88) = a5;
  *(void *)(v8 + 96) = a6;
  *(void *)(v8 + 72) = a3;
  *(void *)(v8 + 80) = a4;
  *(void *)(v8 + 56) = a1;
  *(void *)(v8 + 64) = a2;
  sub_1000172F8((uint64_t *)&unk_100661AB0);
  *(void *)(v8 + 120) = swift_task_alloc();
  *(void *)(v8 + 128) = swift_task_alloc();
  return _swift_task_switch(sub_1004FFD98, 0, 0);
}

uint64_t sub_1004FFD98()
{
  uint64_t v55 = v0;
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v3 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v1, 1, 1, v3);
  sub_100017238(v1, v2, (uint64_t *)&unk_100661AB0);
  swift_bridgeObjectRetain_n();
  unint64_t v4 = sub_100011088("LSApplicationRecord", 19, 2, 0, 1, 1, v2, (void *)&_mh_execute_header);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  if (qword_10065B150 != -1) {
    swift_once();
  }
  *(void *)(v0 + 16) = v4;
  *(void *)(v0 + 24) = v6;
  *(void *)(v0 + 32) = v8;
  *(void *)(v0 + 40) = v10;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000172F8(&qword_10065F9C0);
  swift_task_localValuePush();
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 24));
  sub_100006238((void **)(v6 + 16), &v54);
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 24));
  __int16 v11 = v54;
  if (v54)
  {
    sub_10000E2EC();
  }
  id v12 = objc_allocWithZone((Class)LSApplicationIdentity);
  swift_bridgeObjectRetain();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v14 = [v12 initWithBundleIdentifier:v13 URL:0 personaUniqueString:0 personaType:4];

  *(void *)(v0 + 48) = 0;
  id v15 = [v14 findApplicationRecordFetchingPlaceholder:2 error:v0 + 48];
  *(void *)(v0 + 136) = v15;
  id v16 = *(id *)(v0 + 48);
  if (v15)
  {

    swift_bridgeObjectRelease();
    uint64_t v17 = v15;
  }
  else
  {
    uint64_t v18 = v16;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    swift_bridgeObjectRelease();
    uint64_t v17 = 0;
  }
  uint64_t v19 = *(void *)(v0 + 128);
  swift_task_localValuePop();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10001729C(v19, (uint64_t *)&unk_100661AB0);
  if (v17)
  {
    id v20 = v17;
    id v21 = [v20 iTunesMetadata];
    id v22 = [v21 storeItemIdentifier];

    if (v22)
    {
      uint64_t v24 = *(void *)(v0 + 72);
      uint64_t v23 = *(void *)(v0 + 80);
      uint64_t v25 = *(void *)(v0 + 56);
      id v26 = [v20 iTunesMetadata];
      id v27 = [v26 storeItemIdentifier];

      *(void *)uint64_t v25 = v24;
      *(void *)(v25 + 8) = v23;
      *(void *)(v25 + 16) = v27;
      *(unsigned char *)(v25 + 24) = 0;
      uint64_t v28 = enum case for AppStateUpdateIdentifier.managedAppDistribution(_:);
      uint64_t updated = type metadata accessor for AppStateUpdateIdentifier();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(updated - 8) + 104))(v25, v28, updated);
      goto LABEL_14;
    }
  }
  uint64_t v30 = *(void *)(v0 + 80);
  uint64_t v31 = *(void *)(v0 + 56);
  *(void *)uint64_t v31 = *(void *)(v0 + 72);
  *(void *)(v31 + 8) = v30;
  *(void *)(v31 + 16) = 0;
  *(unsigned char *)(v31 + 24) = 1;
  uint64_t v32 = enum case for AppStateUpdateIdentifier.managedAppDistribution(_:);
  uint64_t v33 = type metadata accessor for AppStateUpdateIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 104))(v31, v32, v33);
  if (!v17)
  {
    uint64_t v37 = 0;
    uint64_t v42 = 0;
    char v40 = -1;
    uint64_t v41 = 3;
    goto LABEL_18;
  }
  id v20 = v17;
LABEL_14:
  swift_bridgeObjectRetain();
  id v34 = [v20 iTunesMetadata];
  id v35 = [v34 distributorInfo];

  id v36 = [v35 distributorID];
  if (!v36)
  {
    uint64_t v37 = 0;
    uint64_t v42 = 0;
    char v40 = -1;
    uint64_t v41 = 3;
    goto LABEL_19;
  }
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v39 = v38;

  char v40 = 0;
  uint64_t v41 = v39;
  uint64_t v42 = v39;
LABEL_18:
  swift_bridgeObjectRetain();
LABEL_19:
  *(unsigned char *)(v0 + 178) = v40;
  *(void *)(v0 + 152) = v41;
  *(void *)(v0 + 160) = v42;
  *(void *)(v0 + 144) = v37;
  uint64_t v43 = *(void *)(v0 + 80);
  uint64_t v44 = *(void *)(*(void *)(v0 + 88) + 32);
  uint64_t v45 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v45;
  *uint64_t v45 = v0;
  v45[1] = sub_100500364;
  char v46 = *(unsigned char *)(v0 + 177);
  char v47 = *(unsigned char *)(v0 + 176);
  uint64_t v49 = *(void *)(v0 + 104);
  uint64_t v48 = *(void *)(v0 + 112);
  uint64_t v50 = *(void *)(v0 + 96);
  uint64_t v51 = *(void *)(v0 + 64);
  uint64_t v52 = *(void *)(v0 + 72);
  uint64_t v59 = v37;
  uint64_t v60 = v41;
  char v58 = v46;
  char v57 = v47;
  return sub_100501ACC(v51, v52, v43, 1, v50, v44, v48, v49);
}

uint64_t sub_100500364()
{
  unint64_t v1 = *(void *)(*(void *)v0 + 152);
  uint64_t v2 = *(void *)(*(void *)v0 + 144);
  swift_task_dealloc();
  sub_10000F7EC(v2, v1);
  return _swift_task_switch(sub_1005004C8, 0, 0);
}

uint64_t sub_1005004C8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 178);
  return v1(v3, v2, v4);
}

uint64_t sub_10050057C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[19] = a4;
  v5[20] = a5;
  v5[17] = a2;
  v5[18] = a3;
  v5[16] = a1;
  sub_1000172F8(&qword_100666520);
  v5[21] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v5[22] = v6;
  v5[23] = *(void *)(v6 - 8);
  v5[24] = swift_task_alloc();
  v5[25] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for XPCApp();
  v5[26] = v7;
  v5[27] = *(void *)(v7 - 8);
  v5[28] = swift_task_alloc();
  v5[29] = swift_task_alloc();
  v5[30] = swift_task_alloc();
  v5[31] = swift_task_alloc();
  return _swift_task_switch(sub_100500708, 0, 0);
}

uint64_t sub_100500708()
{
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v3 = swift_task_alloc();
  v0[32] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  uint64_t v4 = swift_task_alloc();
  v0[33] = v4;
  *(void *)(v4 + 16) = sub_10050850C;
  *(void *)(v4 + 24) = v3;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1006606A8 + dword_1006606A8);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[34] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100500808;
  uint64_t v6 = v0[16];
  return v8((uint64_t)sub_10050966C, v4, v6);
}

uint64_t sub_100500808(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 280) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    uint64_t v5 = sub_10050095C;
  }
  else
  {
    *(void *)(v4 + 288) = a1;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = sub_100500A20;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10050095C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100500A20()
{
  uint64_t v77 = v0;
  uint64_t v1 = v0[36];
  v0[12] = v1;
  uint64_t v3 = v0[19];
  unint64_t v2 = v0[20];
  unint64_t v4 = sub_10028FBC0(0, *(void *)(v1 + 16), 0, (unint64_t)&_swiftEmptyArrayStorage);
  unint64_t v75 = v4;
  id v5 = [self enumeratorWithOptions:128];
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v3;
  *(void *)(v6 + 24) = v2;
  v0[6] = sub_100509C54;
  v0[7] = v6;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_1004E598C;
  v0[5] = &unk_10064B218;
  uint64_t v7 = _Block_copy(v0 + 2);
  long long v62 = v0 + 12;
  sub_1000100E0(v3, v2);
  swift_release();
  [v5 setFilter:v7];
  _Block_release(v7);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v5;
  sub_1000172F8(&qword_100666528);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_100509C9C;
  *(void *)(v9 + 24) = v8;
  sub_1000100E0(v3, v2);
  uint64_t v10 = sub_10050A714(v9, v3, v2);
  sub_10000F7EC(v3, v2);
  swift_release();
  uint64_t v11 = *((void *)v10 + 2);
  if (!v11)
  {
    swift_bridgeObjectRelease();
    uint64_t v68 = 0;
    uint64_t v61 = 0;
LABEL_25:
    uint64_t v45 = v0[19];
    unint64_t v44 = v0[20];
    uint64_t v46 = swift_bridgeObjectRetain();
    sub_100555024(v46);
    static Logger.library.getter();
    sub_1000100E0(v45, v44);
    sub_1000100E0(v45, v44);
    char v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.default.getter();
    BOOL v49 = os_log_type_enabled(v47, v48);
    uint64_t v51 = v0[23];
    uint64_t v50 = v0[24];
    uint64_t v52 = v0[22];
    uint64_t v54 = v0[19];
    unint64_t v53 = v0[20];
    if (v49)
    {
      uint64_t v74 = v0[22];
      os_log_type_t v72 = v48;
      uint64_t v55 = swift_slowAlloc();
      v76[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v55 = 134218754;
      v0[11] = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v55 + 12) = 2048;
      swift_beginAccess();
      v0[13] = *(void *)(v0[12] + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v55 + 22) = 2048;
      v0[14] = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v55 + 32) = 2082;
      sub_1000100E0(v54, v53);
      unint64_t v56 = sub_100506E20(v54, v53);
      unint64_t v58 = v57;
      sub_10000F7EC(v54, v53);
      v0[15] = sub_1000143F4(v56, v58, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10000F7EC(v54, v53);
      sub_10000F7EC(v54, v53);
      _os_log_impl((void *)&_mh_execute_header, v47, v72, "Returning %ld apps installed, %ld apps installing, and %ld apps updating to %{public}s", (uint8_t *)v55, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v74);
    }
    else
    {
      sub_10000F7EC(v0[19], v0[20]);
      sub_10000F7EC(v54, v53);

      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
    }
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v59 = (uint64_t (*)(unint64_t))v0[1];
    return v59(v75);
  }
  uint64_t v12 = 0;
  uint64_t v61 = 0;
  uint64_t v13 = v0[27];
  uint64_t v63 = v0[18];
  id v15 = *(void (**)(void, char *, void))(v13 + 16);
  v13 += 16;
  id v14 = v15;
  unint64_t v65 = (*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64);
  id v16 = &v10[v65];
  uint64_t v71 = *(void *)(v13 + 56);
  uint64_t v69 = (void (**)(uint64_t, uint64_t))(v13 - 8);
  uint64_t v70 = (void (**)(uint64_t, unint64_t, uint64_t))(v13 + 16);
  uint64_t v60 = (void (**)(uint64_t, uint64_t))(v0[23] + 8);
  uint64_t v66 = v15;
  while (1)
  {
    uint64_t v73 = v11;
    v14(v0[31], v16, v0[26]);
    uint64_t v17 = XPCApp.bundleID.getter();
    unint64_t v19 = v18;
    swift_bridgeObjectRetain();
    unint64_t v20 = sub_100016D20(v17, v19);
    char v22 = v21;
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0) {
      break;
    }
    uint64_t v64 = v17;
    uint64_t v67 = v12;
    uint64_t v23 = *v62;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v76[0] = v23;
    uint64_t *v62 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10052C788();
      uint64_t v23 = v76[0];
    }
    unint64_t v25 = v0[29];
    uint64_t v26 = v0[30];
    uint64_t v27 = v0[26];
    swift_bridgeObjectRelease();
    uint64_t v28 = *v70;
    (*v70)(v25, *(void *)(v23 + 56) + v20 * v71, v27);
    sub_10042FFCC(v20, v23);
    v0[12] = v23;
    swift_bridgeObjectRelease();
    v28(v26, v25, v27);
    if (v63 && (v64 == v0[17] && v0[18] == v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      (*v69)(v0[30], v0[26]);
      uint64_t v12 = v67;
      break;
    }
    static Logger.library.getter();
    swift_bridgeObjectRetain();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.debug.getter();
    BOOL v33 = os_log_type_enabled(v31, v32);
    uint64_t v34 = v0[25];
    uint64_t v35 = v0[22];
    uint64_t v12 = v67;
    if (v33)
    {
      uint64_t v36 = swift_slowAlloc();
      v76[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v36 + 4) = sub_1000143F4(v64, v19, v76);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Coalescing installing and installed metadata for %{public}s", (uint8_t *)v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    (*v60)(v34, v35);
    id v14 = v66;
    uint64_t v37 = v0[30];
    uint64_t v38 = v0[26];
    XPCApp.installingMetadata.getter();
    XPCApp.installingMetadata.setter();
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*v69)(v37, v38);
    if (__OFADD__(v61, 1)) {
      goto LABEL_32;
    }
    ++v61;
    unint64_t v4 = v75;
    v66(v0[28], (char *)v0[31], v0[26]);
LABEL_18:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v4 = sub_10028FBC0(0, *(void *)(v4 + 16) + 1, 1, v4);
    }
    unint64_t v40 = *(void *)(v4 + 16);
    unint64_t v39 = *(void *)(v4 + 24);
    if (v40 >= v39 >> 1) {
      unint64_t v4 = sub_10028FBC0(v39 > 1, v40 + 1, 1, v4);
    }
    uint64_t v41 = v0[31];
    unint64_t v42 = v0[28];
    uint64_t v43 = v0[26];
    *(void *)(v4 + 16) = v40 + 1;
    (*v70)(v4 + v65 + v40 * v71, v42, v43);
    unint64_t v75 = v4;
    (*v69)(v41, v43);
    v16 += v71;
    uint64_t v11 = v73 - 1;
    if (v73 == 1)
    {
      uint64_t v68 = v12;
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (!__OFADD__(v12++, 1))
  {
    id v14 = v66;
    v66(v0[28], (char *)v0[31], v0[26]);
    goto LABEL_18;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

void sub_100501394(uint64_t a1@<X8>)
{
  uint64_t v33 = type metadata accessor for InternalError();
  uint64_t v3 = __chkstk_darwin(v33);
  uint64_t v31 = (uint64_t)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v32 = (uint64_t)&v29 - v6;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v29 - v7;
  uint64_t v9 = type metadata accessor for MarketplaceKitError();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ManagedAppDistributionError();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v36 = v1;
  sub_10018B1DC(0, &qword_10065DAE8);
  id v17 = v1;
  if (!swift_dynamicCast())
  {
    uint64_t v30 = a1;
    uint64_t v18 = v10;
    uint64_t v19 = v9;
    if (swift_dynamicCast())
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v30, v12, v9);
      goto LABEL_33;
    }
    if (swift_dynamicCast())
    {
      uint64_t v20 = v32;
      sub_10050B0C8((uint64_t)v8, v32, (uint64_t (*)(void))type metadata accessor for InternalError);
      uint64_t v21 = v31;
      sub_10050B060(v20, v31, (uint64_t (*)(void))type metadata accessor for InternalError);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          sub_10050AF58(v20, (uint64_t (*)(void))type metadata accessor for InternalError);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v30, v21, v19);
          goto LABEL_33;
        case 2u:
          id v26 = [self bytes];
          sub_10018B1DC(0, (unint64_t *)&qword_10065B540);
          uint64_t v27 = v30;
          Measurement.init(value:unit:)();
          sub_10050AF58(v20, (uint64_t (*)(void))type metadata accessor for InternalError);
          (*(void (**)(uint64_t, void, uint64_t))(v18 + 104))(v27, enum case for MarketplaceKitError.insufficientStorageSpace(_:), v19);
          goto LABEL_33;
        case 7u:
          sub_10050AF58(v20, (uint64_t (*)(void))type metadata accessor for InternalError);
          swift_bridgeObjectRelease();
          uint64_t v28 = (unsigned int *)&enum case for MarketplaceKitError.missingInstallVerificationToken(_:);
          goto LABEL_32;
        case 0xCu:
          sub_10050AF58(v20, (uint64_t (*)(void))type metadata accessor for InternalError);
          uint64_t v28 = (unsigned int *)&enum case for MarketplaceKitError.installationRestricted(_:);
          goto LABEL_32;
        case 0xDu:
          sub_10050AF58(v20, (uint64_t (*)(void))type metadata accessor for InternalError);
          uint64_t v28 = (unsigned int *)&enum case for MarketplaceKitError.ratingRestricted(_:);
          goto LABEL_32;
        case 0xEu:
          sub_10050AF58(v20, (uint64_t (*)(void))type metadata accessor for InternalError);
          goto LABEL_26;
        case 0xFu:
          goto LABEL_20;
        case 0x11u:
          sub_10050AF58(v20, (uint64_t (*)(void))type metadata accessor for InternalError);
          uint64_t v28 = (unsigned int *)&enum case for MarketplaceKitError.noSupportedVariant(_:);
          goto LABEL_32;
        case 0x13u:
          sub_10050AF58(v20, (uint64_t (*)(void))type metadata accessor for InternalError);
          uint64_t v28 = (unsigned int *)&enum case for MarketplaceKitError.invalidManifest(_:);
          goto LABEL_32;
        case 0x15u:
          sub_10050AF58(v20, (uint64_t (*)(void))type metadata accessor for InternalError);
          uint64_t v28 = (unsigned int *)&enum case for MarketplaceKitError.featureUnavailable(_:);
          goto LABEL_32;
        case 0x1Au:
          sub_10050AF58(v20, (uint64_t (*)(void))type metadata accessor for InternalError);
          goto LABEL_31;
        default:
          sub_10050AF58(v20, (uint64_t (*)(void))type metadata accessor for InternalError);
          uint64_t v20 = v21;
LABEL_20:
          sub_10050AF58(v20, (uint64_t (*)(void))type metadata accessor for InternalError);
          break;
      }
    }
    else
    {
      if (swift_dynamicCast())
      {
        if ((_BYTE)v35)
        {
          (*(void (**)(uint64_t, void, uint64_t))(v18 + 104))(v30, enum case for MarketplaceKitError.unknown(_:), v9);
          goto LABEL_33;
        }
LABEL_26:
        uint64_t v28 = (unsigned int *)&enum case for MarketplaceKitError.appNotInstalled(_:);
LABEL_32:
        (*(void (**)(uint64_t, void, uint64_t))(v18 + 104))(v30, *v28, v19);
        goto LABEL_33;
      }
      id v22 = v36;
      id v34 = v36;
      uint64_t v35 = 203;
      sub_10050AE08();
      id v23 = v22;
      if (_getErrorEmbeddedNSError<A>(_:)())
      {
      }
      else
      {
        swift_allocError();
        *uint64_t v24 = v34;
      }
      type metadata accessor for Code(0);
      sub_10050AE70((unint64_t *)&qword_10065B420, type metadata accessor for Code);
      char v25 = static _ErrorCodeProtocol.~= infix(_:_:)();
      swift_errorRelease();
      if (v25)
      {
LABEL_31:
        uint64_t v28 = (unsigned int *)&enum case for MarketplaceKitError.networkError(_:);
        goto LABEL_32;
      }
      type metadata accessor for AMSError(0);
      if (swift_dynamicCast()) {
    }
      }
    uint64_t v28 = (unsigned int *)&enum case for MarketplaceKitError.unknown(_:);
    goto LABEL_32;
  }
  (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))(a1, enum case for MarketplaceKitError.unknown(_:), v9);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
LABEL_33:
}

uint64_t sub_100501ACC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 200) = v15;
  *(void *)(v8 + 208) = v16;
  *(unsigned char *)(v8 + 642) = v14;
  *(unsigned char *)(v8 + 641) = v13;
  *(void *)(v8 + 184) = a7;
  *(void *)(v8 + 192) = a8;
  *(void *)(v8 + 168) = a5;
  *(void *)(v8 + 176) = a6;
  *(unsigned char *)(v8 + 640) = a4;
  *(void *)(v8 + 152) = a2;
  *(void *)(v8 + 160) = a3;
  *(void *)(v8 + 144) = a1;
  sub_1000172F8(&qword_10065F200);
  *(void *)(v8 + 216) = swift_task_alloc();
  sub_1000172F8(&qword_100666570);
  *(void *)(v8 + 224) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for AppState();
  *(void *)(v8 + 232) = v9;
  *(void *)(v8 + 240) = *(void *)(v9 - 8);
  *(void *)(v8 + 248) = swift_task_alloc();
  *(void *)(v8 + 256) = swift_task_alloc();
  *(void *)(v8 + 264) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  *(void *)(v8 + 272) = v10;
  *(void *)(v8 + 280) = *(void *)(v10 - 8);
  *(void *)(v8 + 288) = swift_task_alloc();
  *(void *)(v8 + 296) = swift_task_alloc();
  *(void *)(v8 + 304) = swift_task_alloc();
  *(void *)(v8 + 312) = swift_task_alloc();
  *(void *)(v8 + 320) = swift_task_alloc();
  *(void *)(v8 + 328) = swift_task_alloc();
  *(void *)(v8 + 336) = swift_task_alloc();
  *(void *)(v8 + 344) = swift_task_alloc();
  return _swift_task_switch(sub_100501CE8, 0, 0);
}

uint64_t sub_100501CE8()
{
  uint64_t v110 = v0;
  uint64_t v1 = sub_1004FE0F0(*(void *)(v0 + 152), *(void *)(v0 + 160), *(unsigned char *)(v0 + 640) & 1, *(void *)(v0 + 200), *(void *)(v0 + 208), 0, 0, 2);
  uint64_t v2 = StoreAppIdentifier.bundleID.getter();
  *(void *)(v0 + 352) = v3;
  if (v3)
  {
    uint64_t v4 = v2;
    unint64_t v5 = v3;
    if (!v1)
    {
      uint64_t v7 = *(void *)(v0 + 152);
      uint64_t v6 = *(void *)(v0 + 160);
      char v8 = *(unsigned char *)(v0 + 640) & 1;
      static Logger.library.getter();
      sub_1001C3ED0(v7, v6, v8);
      sub_1001C3ED0(v7, v6, v8);
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t type = static os_log_type_t.debug.getter();
      BOOL v10 = os_log_type_enabled(v9, type);
      uint64_t v11 = *(void *)(v0 + 296);
      uint64_t v12 = *(void *)(v0 + 272);
      uint64_t v13 = *(void *)(v0 + 280);
      char v14 = *(unsigned char *)(v0 + 640);
      uint64_t v15 = *(void *)(v0 + 152);
      uint64_t v16 = *(void *)(v0 + 160);
      char v17 = v14 & 1;
      if (v10)
      {
        log = v9;
        uint64_t v102 = *(void *)(v0 + 296);
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        uint64_t v109 = swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = 136315138;
        sub_1001C3ED0(v15, v16, v17);
        uint64_t v100 = v12;
        uint64_t v19 = StoreAppIdentifier.description.getter();
        unint64_t v21 = v20;
        sub_1001C3EC0(v15, v16, v17);
        *(void *)(v0 + 136) = sub_1000143F4(v19, v21, &v109);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1001C3EC0(v15, v16, v17);
        sub_1001C3EC0(v15, v16, v17);
        _os_log_impl((void *)&_mh_execute_header, log, type, "%s: No record, return available and check history", v18, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v102, v100);
      }
      else
      {
        sub_1001C3EC0(*(void *)(v0 + 152), *(void *)(v0 + 160), v14 & 1);
        sub_1001C3EC0(v15, v16, v17);

        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
      }
      uint64_t v67 = (void *)swift_task_alloc();
      *(void *)(v0 + 632) = v67;
      *uint64_t v67 = v0;
      uint64_t v68 = sub_1005062A0;
LABEL_30:
      v67[1] = v68;
      uint64_t v77 = *(void *)(v0 + 168);
      uint64_t v78 = *(void *)(v0 + 144);
      id v67[4] = v5;
      v67[5] = v77;
      v67[2] = v78;
      v67[3] = v4;
      uint64_t v79 = sub_100507644;
      uint64_t v65 = 0;
LABEL_33:
      return _swift_task_switch(v79, v65, 0);
    }
  }
  else
  {
    if (!v1 || (id v22 = [v1 bundleIdentifier]) == 0)
    {
      uint64_t v45 = *(void *)(v0 + 200);
      unint64_t v44 = *(void *)(v0 + 208);
      uint64_t v47 = *(void *)(v0 + 152);
      uint64_t v46 = *(void *)(v0 + 160);
      char v48 = *(unsigned char *)(v0 + 640) & 1;
      static Logger.library.getter();
      sub_1001C3ED0(v47, v46, v48);
      sub_1000100E0(v45, v44);
      sub_1001C3ED0(v47, v46, v48);
      sub_1000100E0(v45, v44);
      BOOL v49 = Logger.logObject.getter();
      os_log_type_t v106 = static os_log_type_t.debug.getter();
      BOOL v50 = os_log_type_enabled(v49, v106);
      uint64_t v51 = *(void *)(v0 + 280);
      uint64_t v108 = *(void *)(v0 + 288);
      uint64_t v52 = *(void *)(v0 + 272);
      uint64_t v54 = *(void *)(v0 + 200);
      unint64_t v53 = *(void *)(v0 + 208);
      uint64_t v56 = *(void *)(v0 + 152);
      uint64_t v55 = *(void *)(v0 + 160);
      char v57 = *(unsigned char *)(v0 + 640) & 1;
      if (v50)
      {
        uint64_t v103 = *(void *)(v0 + 272);
        uint64_t v98 = v49;
        uint64_t v58 = swift_slowAlloc();
        uint64_t v109 = swift_slowAlloc();
        *(_DWORD *)uint64_t v58 = 136315394;
        sub_1001C3ED0(v56, v55, v57);
        uint64_t v101 = v51;
        uint64_t v59 = StoreAppIdentifier.description.getter();
        unint64_t v61 = v60;
        sub_1001C3EC0(v56, v55, v57);
        *(void *)(v0 + 48) = sub_1000143F4(v59, v61, &v109);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1001C3EC0(v56, v55, v57);
        sub_1001C3EC0(v56, v55, v57);
        *(_WORD *)(v58 + 12) = 2080;
        sub_1000100E0(v54, v53);
        unint64_t v62 = sub_100506E20(v54, v53);
        unint64_t v64 = v63;
        sub_10000F7EC(v54, v53);
        *(void *)(v0 + 40) = sub_1000143F4(v62, v64, &v109);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10000F7EC(v54, v53);
        sub_10000F7EC(v54, v53);
        _os_log_impl((void *)&_mh_execute_header, v98, v106, "%s: No record nor bundle ID in library %s, return available", (uint8_t *)v58, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v108, v103);
      }
      else
      {

        sub_1001C3EC0(v56, v55, v57);
        sub_1001C3EC0(v56, v55, v57);
        sub_10000F7EC(v54, v53);
        sub_10000F7EC(v54, v53);

        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v108, v52);
      }
      uint64_t v69 = *(void *)(v0 + 232);
      uint64_t v70 = *(void *)(v0 + 240);
      uint64_t v71 = *(uint64_t **)(v0 + 144);
      uint64_t v72 = type metadata accessor for AppState.Availability();
      uint64_t v73 = swift_allocBox();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v72 - 8) + 104))(v74, enum case for AppState.Availability.available(_:), v72);
      *uint64_t v71 = v73;
      (*(void (**)(uint64_t *, void, uint64_t))(v70 + 104))(v71, enum case for AppState.available(_:), v69);
      goto LABEL_25;
    }
    id v23 = v22;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v5 = v24;
  }
  *(void *)(v0 + 376) = v5;
  *(void *)(v0 + 384) = v5;
  *(void *)(v0 + 360) = v1;
  *(void *)(v0 + 368) = v4;
  id v25 = v1;
  if ([v25 isPlaceholder])
  {
    if ((char *)[v25 installType] - 7 < (char *)3)
    {
      static Logger.library.getter();
      swift_bridgeObjectRetain_n();
      id v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.debug.getter();
      BOOL v28 = os_log_type_enabled(v26, v27);
      uint64_t v29 = *(void *)(v0 + 344);
      uint64_t v31 = *(void *)(v0 + 272);
      uint64_t v30 = *(void *)(v0 + 280);
      if (v28)
      {
        *(void *)typea = *(void *)(v0 + 344);
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        uint64_t v109 = swift_slowAlloc();
        *(_DWORD *)uint64_t v32 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 128) = sub_1000143F4(v4, v5, &v109);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s: Offloaded, return available and check history", v32, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(os_log_type_t *, uint64_t))(v30 + 8))(*(os_log_type_t **)typea, v31);
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
      }
      uint64_t v67 = (void *)swift_task_alloc();
      *(void *)(v0 + 432) = v67;
      *uint64_t v67 = v0;
      uint64_t v68 = sub_100502C68;
      goto LABEL_30;
    }
    uint64_t v65 = *(void *)(v0 + 176);
    uint64_t v66 = sub_1005029A0;
LABEL_32:
    uint64_t v79 = v66;
    goto LABEL_33;
  }
  *(void *)(v0 + 440) = 0;
  if ((*(unsigned char *)(v0 + 641) & 1) == 0)
  {
    uint64_t v65 = *(void *)(v0 + 184);
    uint64_t v66 = sub_100503808;
    goto LABEL_32;
  }
  if ((*(unsigned char *)(v0 + 642) & 1) == 0)
  {
    uint64_t v65 = *(void *)(v0 + 176);
    uint64_t v66 = sub_100504110;
    goto LABEL_32;
  }
  id v33 = [*(id *)(v0 + 360) iTunesMetadata];
  id v34 = [v33 storeItemIdentifier];

  if (v34)
  {
    id v35 = [*(id *)(v0 + 360) iTunesMetadata];
    id v36 = [v35 storeItemIdentifier];
    *(void *)(v0 + 496) = v36;

    *(void *)(v0 + 504) = sub_1004FBAD4();
    if ((v37 & 1) == 0)
    {
      uint64_t v38 = *(void *)(*(void *)(v0 + 192) + 16);
      *(void *)(v0 + 512) = v38;
      uint64_t v39 = swift_task_alloc();
      *(void *)(v0 + 520) = v39;
      *(void *)(v39 + 16) = v36;
      uint64_t v40 = swift_task_alloc();
      *(void *)(v0 + 528) = v40;
      *(void *)(v40 + 16) = sub_10050AF04;
      *(void *)(v40 + 24) = v39;
      uint64_t v107 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1006606B8 + dword_1006606B8);
      swift_retain();
      uint64_t v41 = (void *)swift_task_alloc();
      *(void *)(v0 + 536) = v41;
      void *v41 = v0;
      v41[1] = sub_1005050BC;
      unint64_t v42 = sub_10050AF0C;
      uint64_t v43 = v40;
LABEL_38:
      return v107((uint64_t)v42, v43, v38);
    }
  }
  id v80 = [*(id *)(v0 + 360) bundleVersion];
  if (v80)
  {
    uint64_t v81 = v80;
    uint64_t v83 = *(void *)(v0 + 368);
    uint64_t v82 = *(void *)(v0 + 376);
    uint64_t v84 = *(void *)(v0 + 192);
    uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v87 = v86;

    *(void *)(v0 + 560) = v85;
    *(void *)(v0 + 568) = v87;
    uint64_t v38 = *(void *)(v84 + 16);
    *(void *)(v0 + 576) = v38;
    uint64_t v88 = swift_task_alloc();
    *(void *)(v0 + 584) = v88;
    *(void *)(v88 + 16) = v83;
    *(void *)(v88 + 24) = v82;
    uint64_t v89 = swift_task_alloc();
    *(void *)(v0 + 592) = v89;
    *(void *)(v89 + 16) = sub_10050AEB8;
    *(void *)(v89 + 24) = v88;
    uint64_t v107 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1006606C0 + dword_1006606C0);
    swift_retain();
    uint64_t v90 = (void *)swift_task_alloc();
    *(void *)(v0 + 600) = v90;
    *uint64_t v90 = v0;
    v90[1] = sub_100505AB0;
    unint64_t v42 = sub_10050AEC0;
    uint64_t v43 = v89;
    goto LABEL_38;
  }
  swift_bridgeObjectRelease();
  id v91 = sub_1004FBD68();
  long long v92 = *(void **)(v0 + 360);
  if (!v91)
  {

    goto LABEL_45;
  }
  long long v93 = v91;
  id v94 = [v91 managementDeclarationIdentifier];

  if (!v94)
  {
LABEL_45:
    (*(void (**)(void, void, void))(*(void *)(v0 + 240) + 104))(*(void *)(v0 + 144), enum case for AppState.installed(_:), *(void *)(v0 + 232));
    goto LABEL_25;
  }
  uint64_t v95 = *(void *)(v0 + 232);
  uint64_t v96 = *(void *)(v0 + 240);
  uint64_t v97 = *(void *)(v0 + 144);

  (*(void (**)(uint64_t, void, uint64_t))(v96 + 104))(v97, enum case for AppState.managed(_:), v95);
LABEL_25:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v75 = *(uint64_t (**)(void))(v0 + 8);
  return v75();
}

uint64_t sub_1005029A0()
{
  uint64_t v2 = v0[46];
  uint64_t v1 = v0[47];
  uint64_t v3 = *(void *)(v0[22] + 112);
  v0[49] = v3;
  uint64_t v4 = swift_task_alloc();
  v0[50] = v4;
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  uint64_t v5 = swift_task_alloc();
  v0[51] = v5;
  *(void *)(v5 + 16) = sub_10050B1B8;
  *(void *)(v5 + 24) = v4;
  char v8 = (char *)&dword_100660698 + dword_100660698;
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[52] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100502ABC;
  return ((uint64_t (*)(uint64_t (*)@<X0>(void *@<X0>, unsigned char *@<X8>), uint64_t, uint64_t))v8)(sub_10050B190, v5, v3);
}

uint64_t sub_100502ABC(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 424) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void *)(v4 + 176);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = sub_1005034D4;
    uint64_t v7 = v5;
  }
  else
  {
    swift_release();
    *(unsigned char *)(v4 + 643) = a1 & 1;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = sub_100502E90;
    uint64_t v7 = 0;
  }
  return _swift_task_switch(v6, v7, 0);
}

uint64_t sub_100502C68()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100502D80, 0, 0);
}

uint64_t sub_100502D80()
{
  uint64_t v1 = *(void **)(v0 + 360);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100502E90()
{
  uint64_t v54 = v0;
  if (*(unsigned char *)(v0 + 643) != 1)
  {
    static Logger.library.getter();
    swift_bridgeObjectRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    unint64_t v15 = *(void *)(v0 + 376);
    if (v14)
    {
      uint64_t v16 = *(void *)(v0 + 368);
      char v48 = *(void **)(v0 + 360);
      uint64_t v49 = *(void *)(v0 + 280);
      uint64_t v50 = *(void *)(v0 + 272);
      uint64_t v52 = *(void *)(v0 + 336);
      char v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      *(_DWORD *)char v17 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 120) = sub_1000143F4(v16, v15, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s: Placeholder record, no active install", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v52, v50);
    }
    else
    {
      unint64_t v20 = *(void **)(v0 + 360);
      uint64_t v21 = *(void *)(v0 + 336);
      uint64_t v22 = *(void *)(v0 + 272);
      uint64_t v23 = *(void *)(v0 + 280);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
    }
    uint64_t v24 = *(void *)(v0 + 232);
    uint64_t v25 = *(void *)(v0 + 240);
    uint64_t v26 = *(void *)(v0 + 144);
    os_log_type_t v27 = (unsigned int *)&enum case for AppState.waiting(_:);
    goto LABEL_12;
  }
  *(void *)(v0 + 440) = *(void *)(v0 + 424);
  if (*(unsigned char *)(v0 + 641))
  {
    if (*(unsigned char *)(v0 + 642))
    {
      id v1 = [*(id *)(v0 + 360) iTunesMetadata];
      id v2 = [v1 storeItemIdentifier];

      if (v2)
      {
        id v3 = [*(id *)(v0 + 360) iTunesMetadata];
        id v4 = [v3 storeItemIdentifier];
        *(void *)(v0 + 496) = v4;

        *(void *)(v0 + 504) = sub_1004FBAD4();
        if ((v5 & 1) == 0)
        {
          uint64_t v6 = *(void *)(*(void *)(v0 + 192) + 16);
          *(void *)(v0 + 512) = v6;
          uint64_t v7 = swift_task_alloc();
          *(void *)(v0 + 520) = v7;
          *(void *)(v7 + 16) = v4;
          uint64_t v8 = swift_task_alloc();
          *(void *)(v0 + 528) = v8;
          *(void *)(v8 + 16) = sub_10050AF04;
          *(void *)(v8 + 24) = v7;
          uint64_t v51 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1006606B8 + dword_1006606B8);
          swift_retain();
          uint64_t v9 = (void *)swift_task_alloc();
          *(void *)(v0 + 536) = v9;
          *uint64_t v9 = v0;
          v9[1] = sub_1005050BC;
          BOOL v10 = sub_10050AF0C;
          uint64_t v11 = v8;
LABEL_22:
          return v51((uint64_t)v10, v11, v6);
        }
      }
      id v30 = [*(id *)(v0 + 360) bundleVersion];
      if (v30)
      {
        uint64_t v31 = v30;
        uint64_t v33 = *(void *)(v0 + 368);
        uint64_t v32 = *(void *)(v0 + 376);
        uint64_t v34 = *(void *)(v0 + 192);
        uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v37 = v36;

        *(void *)(v0 + 560) = v35;
        *(void *)(v0 + 568) = v37;
        uint64_t v6 = *(void *)(v34 + 16);
        *(void *)(v0 + 576) = v6;
        uint64_t v38 = swift_task_alloc();
        *(void *)(v0 + 584) = v38;
        *(void *)(v38 + 16) = v33;
        *(void *)(v38 + 24) = v32;
        uint64_t v39 = swift_task_alloc();
        *(void *)(v0 + 592) = v39;
        *(void *)(v39 + 16) = sub_10050AEB8;
        *(void *)(v39 + 24) = v38;
        uint64_t v51 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1006606C0 + dword_1006606C0);
        swift_retain();
        uint64_t v40 = (void *)swift_task_alloc();
        *(void *)(v0 + 600) = v40;
        *uint64_t v40 = v0;
        v40[1] = sub_100505AB0;
        BOOL v10 = sub_10050AEC0;
        uint64_t v11 = v39;
        goto LABEL_22;
      }
      swift_bridgeObjectRelease();
      id v41 = sub_1004FBD68();
      unint64_t v42 = *(void **)(v0 + 360);
      if (v41)
      {
        uint64_t v43 = v41;
        id v44 = [v41 managementDeclarationIdentifier];

        if (v44)
        {
          uint64_t v45 = *(void *)(v0 + 232);
          uint64_t v46 = *(void *)(v0 + 240);
          uint64_t v47 = *(void *)(v0 + 144);

          (*(void (**)(uint64_t, void, uint64_t))(v46 + 104))(v47, enum case for AppState.managed(_:), v45);
          goto LABEL_13;
        }
      }
      else
      {
      }
      uint64_t v24 = *(void *)(v0 + 232);
      uint64_t v25 = *(void *)(v0 + 240);
      uint64_t v26 = *(void *)(v0 + 144);
      os_log_type_t v27 = (unsigned int *)&enum case for AppState.installed(_:);
LABEL_12:
      (*(void (**)(uint64_t, void, uint64_t))(v25 + 104))(v26, *v27, v24);
LABEL_13:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      BOOL v28 = *(uint64_t (**)(void))(v0 + 8);
      return v28();
    }
    uint64_t v18 = *(void *)(v0 + 176);
    uint64_t v19 = sub_100504110;
  }
  else
  {
    uint64_t v18 = *(void *)(v0 + 184);
    uint64_t v19 = sub_100503808;
  }
  return _swift_task_switch(v19, v18, 0);
}

uint64_t sub_1005034D4()
{
  swift_errorRelease();
  return _swift_task_switch(sub_10050353C, 0, 0);
}

uint64_t sub_10050353C()
{
  char v17 = v0;
  static Logger.library.getter();
  swift_bridgeObjectRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v4 = v0[46];
    unint64_t v3 = v0[47];
    uint64_t v12 = (void *)v0[45];
    uint64_t v13 = v0[35];
    uint64_t v14 = v0[34];
    uint64_t v15 = v0[42];
    char v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)char v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[15] = sub_1000143F4(v4, v3, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%s: Placeholder record, no active install", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v15, v14);
  }
  else
  {
    uint64_t v6 = (void *)v0[45];
    uint64_t v7 = v0[42];
    uint64_t v8 = v0[34];
    uint64_t v9 = v0[35];

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  (*(void (**)(void, void, void))(v0[30] + 104))(v0[18], enum case for AppState.waiting(_:), v0[29]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100503808()
{
  uint64_t v1 = v0[46];
  uint64_t v2 = v0[47];
  uint64_t v3 = v0[27];
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v4 = swift_bridgeObjectRetain();
  sub_1004FF990(v4, v1, v2, v3);
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for ProgressCache.Progress();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) == 1)
  {
    sub_10001729C(v0[27], &qword_10065F200);
    uint64_t v6 = 1;
  }
  else
  {
    uint64_t v7 = v0[27];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0[30] + 16))(v0[28], v7 + *(int *)(v5 + 24), v0[29]);
    sub_10050AF58(v7, (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress);
    uint64_t v6 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[30] + 56))(v0[28], v6, 1, v0[29]);
  return _swift_task_switch(sub_100503984, 0, 0);
}

uint64_t sub_100503984()
{
  uint64_t v66 = v0;
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 224);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) != 1)
  {
    uint64_t v16 = *(void *)(v0 + 256);
    uint64_t v15 = *(void *)(v0 + 264);
    char v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v17(v15, v3, v1);
    static Logger.library.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v16, v15, v1);
    swift_bridgeObjectRetain();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    BOOL v20 = os_log_type_enabled(v18, v19);
    unint64_t v21 = *(void *)(v0 + 376);
    if (v20)
    {
      uint64_t v54 = v17;
      uint64_t v22 = *(void *)(v0 + 368);
      uint64_t v58 = *(void **)(v0 + 360);
      uint64_t v59 = *(void *)(v0 + 280);
      uint64_t v61 = *(void *)(v0 + 272);
      uint64_t v64 = *(void *)(v0 + 328);
      uint64_t v56 = *(void *)(v0 + 256);
      uint64_t v57 = *(void *)(v0 + 240);
      uint64_t v55 = *(void *)(v0 + 232);
      uint64_t v23 = swift_slowAlloc();
      uint64_t v65 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 104) = sub_1000143F4(v22, v21, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2080;
      sub_10050AE70(&qword_10065F2C8, (void (*)(uint64_t))&type metadata accessor for AppState);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 112) = sub_1000143F4(v24, v25, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v55);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s: Active install, progress %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v64, v61);
      v54(*(void *)(v0 + 144), *(void *)(v0 + 264), *(void *)(v0 + 232));
    }
    else
    {
      os_log_type_t v27 = v17;
      BOOL v28 = *(void **)(v0 + 360);
      uint64_t v29 = *(void *)(v0 + 280);
      uint64_t v60 = *(void *)(v0 + 272);
      uint64_t v62 = *(void *)(v0 + 328);
      uint64_t v30 = *(void *)(v0 + 256);
      uint64_t v31 = v18;
      uint64_t v33 = *(void *)(v0 + 232);
      uint64_t v32 = *(void *)(v0 + 240);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v33);

      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v62, v60);
      v27(*(void *)(v0 + 144), *(void *)(v0 + 264), *(void *)(v0 + 232));
    }
    goto LABEL_13;
  }
  sub_10001729C(v3, &qword_100666570);
  if (*(unsigned char *)(v0 + 642))
  {
    id v4 = [*(id *)(v0 + 360) iTunesMetadata];
    id v5 = [v4 storeItemIdentifier];

    if (v5)
    {
      id v6 = [*(id *)(v0 + 360) iTunesMetadata];
      id v7 = [v6 storeItemIdentifier];
      *(void *)(v0 + 496) = v7;

      *(void *)(v0 + 504) = sub_1004FBAD4();
      if ((v8 & 1) == 0)
      {
        uint64_t v9 = *(void *)(*(void *)(v0 + 192) + 16);
        *(void *)(v0 + 512) = v9;
        uint64_t v10 = swift_task_alloc();
        *(void *)(v0 + 520) = v10;
        *(void *)(v10 + 16) = v7;
        uint64_t v11 = swift_task_alloc();
        *(void *)(v0 + 528) = v11;
        *(void *)(v11 + 16) = sub_10050AF04;
        *(void *)(v11 + 24) = v10;
        unint64_t v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1006606B8 + dword_1006606B8);
        swift_retain();
        uint64_t v12 = (void *)swift_task_alloc();
        *(void *)(v0 + 536) = v12;
        *uint64_t v12 = v0;
        v12[1] = sub_1005050BC;
        uint64_t v13 = sub_10050AF0C;
        uint64_t v14 = v11;
LABEL_18:
        return v63((uint64_t)v13, v14, v9);
      }
    }
    id v35 = [*(id *)(v0 + 360) bundleVersion];
    if (v35)
    {
      uint64_t v36 = v35;
      uint64_t v38 = *(void *)(v0 + 368);
      uint64_t v37 = *(void *)(v0 + 376);
      uint64_t v39 = *(void *)(v0 + 192);
      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v42 = v41;

      *(void *)(v0 + 560) = v40;
      *(void *)(v0 + 568) = v42;
      uint64_t v9 = *(void *)(v39 + 16);
      *(void *)(v0 + 576) = v9;
      uint64_t v43 = swift_task_alloc();
      *(void *)(v0 + 584) = v43;
      *(void *)(v43 + 16) = v38;
      *(void *)(v43 + 24) = v37;
      uint64_t v44 = swift_task_alloc();
      *(void *)(v0 + 592) = v44;
      *(void *)(v44 + 16) = sub_10050AEB8;
      *(void *)(v44 + 24) = v43;
      unint64_t v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1006606C0 + dword_1006606C0);
      swift_retain();
      uint64_t v45 = (void *)swift_task_alloc();
      *(void *)(v0 + 600) = v45;
      *uint64_t v45 = v0;
      v45[1] = sub_100505AB0;
      uint64_t v13 = sub_10050AEC0;
      uint64_t v14 = v44;
      goto LABEL_18;
    }
    swift_bridgeObjectRelease();
    id v46 = sub_1004FBD68();
    uint64_t v47 = *(void **)(v0 + 360);
    if (v46)
    {
      char v48 = v46;
      id v49 = [v46 managementDeclarationIdentifier];

      if (v49)
      {
        uint64_t v50 = *(void *)(v0 + 232);
        uint64_t v51 = *(void *)(v0 + 240);
        uint64_t v52 = *(void *)(v0 + 144);

        (*(void (**)(uint64_t, void, uint64_t))(v51 + 104))(v52, enum case for AppState.managed(_:), v50);
LABEL_13:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v34 = *(uint64_t (**)(void))(v0 + 8);
        return v34();
      }
    }
    else
    {
    }
    (*(void (**)(void, void, void))(*(void *)(v0 + 240) + 104))(*(void *)(v0 + 144), enum case for AppState.installed(_:), *(void *)(v0 + 232));
    goto LABEL_13;
  }
  uint64_t v26 = *(void *)(v0 + 176);
  return _swift_task_switch(sub_100504110, v26, 0);
}

uint64_t sub_100504110()
{
  uint64_t v2 = v0[46];
  uint64_t v1 = v0[47];
  uint64_t v3 = *(void *)(v0[22] + 112);
  v0[56] = v3;
  uint64_t v4 = swift_task_alloc();
  v0[57] = v4;
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  uint64_t v5 = swift_task_alloc();
  v0[58] = v5;
  *(void *)(v5 + 16) = sub_1001C693C;
  *(void *)(v5 + 24) = v4;
  char v8 = (char *)&dword_100660698 + dword_100660698;
  swift_retain();
  id v6 = (void *)swift_task_alloc();
  v0[59] = v6;
  *id v6 = v0;
  v6[1] = sub_10050422C;
  return ((uint64_t (*)(uint64_t (*)@<X0>(void *@<X0>, unsigned char *@<X8>), uint64_t, uint64_t))v8)(sub_1001C6944, v5, v3);
}

uint64_t sub_10050422C(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 480) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void *)(v4 + 176);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    id v6 = sub_10050488C;
    uint64_t v7 = v5;
  }
  else
  {
    swift_release();
    *(unsigned char *)(v4 + 644) = a1 & 1;
    swift_task_dealloc();
    swift_task_dealloc();
    id v6 = sub_1005043D8;
    uint64_t v7 = 0;
  }
  return _swift_task_switch(v6, v7, 0);
}

uint64_t sub_1005043D8()
{
  if (*(unsigned char *)(v0 + 644) == 1)
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 488) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_100504CFC;
    uint64_t v2 = *(void *)(v0 + 368);
    uint64_t v3 = *(void *)(v0 + 248);
    uint64_t v4 = *(void *)(v0 + 168);
    v1[4] = *(void *)(v0 + 376);
    v1[5] = v4;
    v1[2] = v3;
    v1[3] = v2;
    return _swift_task_switch(sub_100507644, 0, 0);
  }
  id v5 = [*(id *)(v0 + 360) iTunesMetadata];
  id v6 = [v5 storeItemIdentifier];

  if (v6)
  {
    id v7 = [*(id *)(v0 + 360) iTunesMetadata];
    id v8 = [v7 storeItemIdentifier];
    *(void *)(v0 + 496) = v8;

    *(void *)(v0 + 504) = sub_1004FBAD4();
    if ((v9 & 1) == 0)
    {
      uint64_t v10 = *(void *)(*(void *)(v0 + 192) + 16);
      *(void *)(v0 + 512) = v10;
      uint64_t v11 = swift_task_alloc();
      *(void *)(v0 + 520) = v11;
      *(void *)(v11 + 16) = v8;
      uint64_t v12 = swift_task_alloc();
      *(void *)(v0 + 528) = v12;
      *(void *)(v12 + 16) = sub_10050AF04;
      *(void *)(v12 + 24) = v11;
      uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1006606B8 + dword_1006606B8);
      swift_retain();
      uint64_t v13 = (void *)swift_task_alloc();
      *(void *)(v0 + 536) = v13;
      *uint64_t v13 = v0;
      v13[1] = sub_1005050BC;
      uint64_t v14 = sub_10050AF0C;
      uint64_t v15 = v12;
LABEL_10:
      return v36((uint64_t)v14, v15, v10);
    }
  }
  id v16 = [*(id *)(v0 + 360) bundleVersion];
  if (v16)
  {
    char v17 = v16;
    uint64_t v19 = *(void *)(v0 + 368);
    uint64_t v18 = *(void *)(v0 + 376);
    uint64_t v20 = *(void *)(v0 + 192);
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;

    *(void *)(v0 + 560) = v21;
    *(void *)(v0 + 568) = v23;
    uint64_t v10 = *(void *)(v20 + 16);
    *(void *)(v0 + 576) = v10;
    uint64_t v24 = swift_task_alloc();
    *(void *)(v0 + 584) = v24;
    *(void *)(v24 + 16) = v19;
    *(void *)(v24 + 24) = v18;
    uint64_t v25 = swift_task_alloc();
    *(void *)(v0 + 592) = v25;
    *(void *)(v25 + 16) = sub_10050AEB8;
    *(void *)(v25 + 24) = v24;
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1006606C0 + dword_1006606C0);
    swift_retain();
    uint64_t v26 = (void *)swift_task_alloc();
    *(void *)(v0 + 600) = v26;
    *uint64_t v26 = v0;
    v26[1] = sub_100505AB0;
    uint64_t v14 = sub_10050AEC0;
    uint64_t v15 = v25;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  id v27 = sub_1004FBD68();
  BOOL v28 = *(void **)(v0 + 360);
  if (!v27)
  {

    goto LABEL_17;
  }
  uint64_t v29 = v27;
  id v30 = [v27 managementDeclarationIdentifier];

  if (!v30)
  {
LABEL_17:
    (*(void (**)(void, void, void))(*(void *)(v0 + 240) + 104))(*(void *)(v0 + 144), enum case for AppState.installed(_:), *(void *)(v0 + 232));
    goto LABEL_18;
  }
  uint64_t v31 = *(void *)(v0 + 232);
  uint64_t v32 = *(void *)(v0 + 240);
  uint64_t v33 = *(void *)(v0 + 144);

  (*(void (**)(uint64_t, void, uint64_t))(v32 + 104))(v33, enum case for AppState.managed(_:), v31);
LABEL_18:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v34 = *(uint64_t (**)(void))(v0 + 8);
  return v34();
}

uint64_t sub_10050488C()
{
  swift_errorRelease();
  return _swift_task_switch(sub_1005048F4, 0, 0);
}

uint64_t sub_1005048F4()
{
  id v1 = [*(id *)(v0 + 360) iTunesMetadata];
  id v2 = [v1 storeItemIdentifier];

  if (v2)
  {
    id v3 = [*(id *)(v0 + 360) iTunesMetadata];
    id v4 = [v3 storeItemIdentifier];
    *(void *)(v0 + 496) = v4;

    *(void *)(v0 + 504) = sub_1004FBAD4();
    if ((v5 & 1) == 0)
    {
      uint64_t v6 = *(void *)(*(void *)(v0 + 192) + 16);
      *(void *)(v0 + 512) = v6;
      uint64_t v7 = swift_task_alloc();
      *(void *)(v0 + 520) = v7;
      *(void *)(v7 + 16) = v4;
      uint64_t v8 = swift_task_alloc();
      *(void *)(v0 + 528) = v8;
      *(void *)(v8 + 16) = sub_10050AF04;
      *(void *)(v8 + 24) = v7;
      uint64_t v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1006606B8 + dword_1006606B8);
      swift_retain();
      char v9 = (void *)swift_task_alloc();
      *(void *)(v0 + 536) = v9;
      *char v9 = v0;
      v9[1] = sub_1005050BC;
      uint64_t v10 = sub_10050AF0C;
      uint64_t v11 = v8;
LABEL_6:
      return v32((uint64_t)v10, v11, v6);
    }
  }
  id v12 = [*(id *)(v0 + 360) bundleVersion];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v15 = *(void *)(v0 + 368);
    uint64_t v14 = *(void *)(v0 + 376);
    uint64_t v16 = *(void *)(v0 + 192);
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    *(void *)(v0 + 560) = v17;
    *(void *)(v0 + 568) = v19;
    uint64_t v6 = *(void *)(v16 + 16);
    *(void *)(v0 + 576) = v6;
    uint64_t v20 = swift_task_alloc();
    *(void *)(v0 + 584) = v20;
    *(void *)(v20 + 16) = v15;
    *(void *)(v20 + 24) = v14;
    uint64_t v21 = swift_task_alloc();
    *(void *)(v0 + 592) = v21;
    *(void *)(v21 + 16) = sub_10050AEB8;
    *(void *)(v21 + 24) = v20;
    uint64_t v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1006606C0 + dword_1006606C0);
    swift_retain();
    uint64_t v22 = (void *)swift_task_alloc();
    *(void *)(v0 + 600) = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_100505AB0;
    uint64_t v10 = sub_10050AEC0;
    uint64_t v11 = v21;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  id v24 = sub_1004FBD68();
  uint64_t v25 = *(void **)(v0 + 360);
  if (!v24)
  {

    goto LABEL_13;
  }
  uint64_t v26 = v24;
  id v27 = [v24 managementDeclarationIdentifier];

  if (!v27)
  {
LABEL_13:
    (*(void (**)(void, void, void))(*(void *)(v0 + 240) + 104))(*(void *)(v0 + 144), enum case for AppState.installed(_:), *(void *)(v0 + 232));
    goto LABEL_14;
  }
  uint64_t v28 = *(void *)(v0 + 232);
  uint64_t v29 = *(void *)(v0 + 240);
  uint64_t v30 = *(void *)(v0 + 144);

  (*(void (**)(uint64_t, void, uint64_t))(v29 + 104))(v30, enum case for AppState.managed(_:), v28);
LABEL_14:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
  return v31();
}

uint64_t sub_100504CFC()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100504DF8, 0, 0);
}

uint64_t sub_100504DF8()
{
  uint64_t v17 = v0;
  static Logger.library.getter();
  swift_bridgeObjectRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v4 = v0[46];
    unint64_t v3 = v0[47];
    id v12 = (void *)v0[45];
    uint64_t v13 = v0[35];
    uint64_t v14 = v0[34];
    uint64_t v15 = v0[40];
    char v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)char v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[12] = sub_1000143F4(v4, v3, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%s: Active install, paused", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v15, v14);
  }
  else
  {
    uint64_t v6 = (void *)v0[45];
    uint64_t v7 = v0[40];
    uint64_t v8 = v0[34];
    uint64_t v9 = v0[35];

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  (*(void (**)(void, void, void))(v0[30] + 32))(v0[18], v0[31], v0[29]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1005050BC(uint64_t a1, char a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 544) = v2;
  swift_task_dealloc();
  swift_release();
  if (v2)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = sub_1005057D0;
  }
  else
  {
    *(void *)(v6 + 552) = a1;
    *(unsigned char *)(v6 + 645) = a2;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = sub_100505258;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_100505258()
{
  uint64_t v46 = v0;
  if ((*(unsigned char *)(v0 + 645) & 1) == 0 && *(void *)(v0 + 504) < *(void *)(v0 + 552))
  {
    static Logger.library.getter();
    swift_bridgeObjectRetain();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v39 = *(void *)(v0 + 496);
      uint64_t v4 = *(void *)(v0 + 368);
      unint64_t v3 = *(void *)(v0 + 376);
      uint64_t v40 = *(void **)(v0 + 360);
      uint64_t v41 = *(void *)(v0 + 280);
      uint64_t v42 = *(void *)(v0 + 272);
      uint64_t v43 = *(void *)(v0 + 312);
      uint64_t v5 = swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136446466;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 72) = sub_1000143F4(v4, v3, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v5 + 12) = 2082;
      *(void *)(v0 + 80) = v39;
      uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 88) = sub_1000143F4(v6, v7, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "'%{public}s/%{public}s has update available", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v43, v42);
    }
    else
    {
      uint64_t v21 = *(void **)(v0 + 360);
      uint64_t v22 = *(void *)(v0 + 312);
      uint64_t v23 = *(void *)(v0 + 272);
      uint64_t v24 = *(void *)(v0 + 280);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
    }
    uint64_t v25 = *(void *)(v0 + 232);
    uint64_t v26 = *(void *)(v0 + 240);
    id v27 = *(uint64_t **)(v0 + 144);
    uint64_t v28 = type metadata accessor for AppState.Availability();
    uint64_t v29 = swift_allocBox();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v28 - 8) + 104))(v30, enum case for AppState.Availability.update(_:), v28);
    *id v27 = v29;
    (*(void (**)(uint64_t *, void, uint64_t))(v26 + 104))(v27, enum case for AppState.available(_:), v25);
    goto LABEL_11;
  }
  id v8 = [*(id *)(v0 + 360) bundleVersion];
  if (!v8)
  {
    swift_bridgeObjectRelease();
    id v32 = sub_1004FBD68();
    uint64_t v33 = *(void **)(v0 + 360);
    if (v32)
    {
      uint64_t v34 = v32;
      id v35 = [v32 managementDeclarationIdentifier];

      if (v35)
      {
        uint64_t v36 = *(void *)(v0 + 232);
        uint64_t v37 = *(void *)(v0 + 240);
        uint64_t v38 = *(void *)(v0 + 144);

        (*(void (**)(uint64_t, void, uint64_t))(v37 + 104))(v38, enum case for AppState.managed(_:), v36);
LABEL_11:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
        return v31();
      }
    }
    else
    {
    }
    (*(void (**)(void, void, void))(*(void *)(v0 + 240) + 104))(*(void *)(v0 + 144), enum case for AppState.installed(_:), *(void *)(v0 + 232));
    goto LABEL_11;
  }
  uint64_t v9 = v8;
  uint64_t v11 = *(void *)(v0 + 368);
  uint64_t v10 = *(void *)(v0 + 376);
  uint64_t v12 = *(void *)(v0 + 192);
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  *(void *)(v0 + 560) = v13;
  *(void *)(v0 + 568) = v15;
  uint64_t v16 = *(void *)(v12 + 16);
  *(void *)(v0 + 576) = v16;
  uint64_t v17 = swift_task_alloc();
  *(void *)(v0 + 584) = v17;
  *(void *)(v17 + 16) = v11;
  *(void *)(v17 + 24) = v10;
  uint64_t v18 = swift_task_alloc();
  *(void *)(v0 + 592) = v18;
  *(void *)(v18 + 16) = sub_10050AEB8;
  *(void *)(v18 + 24) = v17;
  uint64_t v44 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1006606C0 + dword_1006606C0);
  swift_retain();
  uint64_t v19 = (void *)swift_task_alloc();
  *(void *)(v0 + 600) = v19;
  *uint64_t v19 = v0;
  v19[1] = sub_100505AB0;
  return v44((uint64_t)sub_10050AEC0, v18, v16);
}

uint64_t sub_1005057D0()
{
  swift_errorRelease();
  id v1 = [*(id *)(v0 + 360) bundleVersion];
  if (v1)
  {
    os_log_type_t v2 = v1;
    uint64_t v4 = *(void *)(v0 + 368);
    uint64_t v3 = *(void *)(v0 + 376);
    uint64_t v5 = *(void *)(v0 + 192);
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;

    *(void *)(v0 + 560) = v6;
    *(void *)(v0 + 568) = v8;
    uint64_t v9 = *(void *)(v5 + 16);
    *(void *)(v0 + 576) = v9;
    uint64_t v10 = swift_task_alloc();
    *(void *)(v0 + 584) = v10;
    *(void *)(v10 + 16) = v4;
    *(void *)(v10 + 24) = v3;
    uint64_t v11 = swift_task_alloc();
    *(void *)(v0 + 592) = v11;
    *(void *)(v11 + 16) = sub_10050AEB8;
    *(void *)(v11 + 24) = v10;
    uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1006606C0 + dword_1006606C0);
    swift_retain();
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 600) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_100505AB0;
    return v22((uint64_t)sub_10050AEC0, v11, v9);
  }
  swift_bridgeObjectRelease();
  id v14 = sub_1004FBD68();
  uint64_t v15 = *(void **)(v0 + 360);
  if (!v14)
  {

    goto LABEL_9;
  }
  uint64_t v16 = v14;
  id v17 = [v14 managementDeclarationIdentifier];

  if (!v17)
  {
LABEL_9:
    (*(void (**)(void, void, void))(*(void *)(v0 + 240) + 104))(*(void *)(v0 + 144), enum case for AppState.installed(_:), *(void *)(v0 + 232));
    goto LABEL_10;
  }
  uint64_t v18 = *(void *)(v0 + 232);
  uint64_t v19 = *(void *)(v0 + 240);
  uint64_t v20 = *(void *)(v0 + 144);

  (*(void (**)(uint64_t, void, uint64_t))(v19 + 104))(v20, enum case for AppState.managed(_:), v18);
LABEL_10:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
  return v21();
}

uint64_t sub_100505AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[76] = a1;
  v4[77] = a2;
  v4[78] = v2;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_1005060E0;
  }
  else {
    uint64_t v5 = sub_100505C34;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100505C34()
{
  uint64_t v34 = v0;
  if (v0[77])
  {
    sub_10018B1DC(0, (unint64_t *)&qword_10065F9B0);
    unsigned __int8 v1 = sub_1004FCF70();
    swift_bridgeObjectRelease();
    if (v1)
    {
      static Logger.library.getter();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v2 = Logger.logObject.getter();
      os_log_type_t v3 = static os_log_type_t.info.getter();
      BOOL v4 = os_log_type_enabled(v2, v3);
      unint64_t v5 = v0[71];
      if (v4)
      {
        uint64_t v7 = v0[46];
        unint64_t v6 = v0[47];
        uint64_t v28 = v0[70];
        uint64_t v29 = (void *)v0[45];
        uint64_t v30 = v0[35];
        uint64_t v31 = v0[34];
        uint64_t v32 = v0[38];
        uint64_t v8 = swift_slowAlloc();
        uint64_t v33 = swift_slowAlloc();
        *(_DWORD *)uint64_t v8 = 136446466;
        swift_bridgeObjectRetain();
        v0[7] = sub_1000143F4(v7, v6, &v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v8 + 12) = 2082;
        swift_bridgeObjectRetain();
        v0[8] = sub_1000143F4(v28, v5, &v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v2, v3, "'%{public}s/%{public}s has update available", (uint8_t *)v8, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v32, v31);
      }
      else
      {
        uint64_t v16 = (void *)v0[45];
        uint64_t v17 = v0[38];
        uint64_t v18 = v0[34];
        uint64_t v19 = v0[35];

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();

        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
      }
      uint64_t v20 = v0[29];
      uint64_t v21 = v0[30];
      uint64_t v22 = (uint64_t *)v0[18];
      uint64_t v23 = type metadata accessor for AppState.Availability();
      uint64_t v24 = swift_allocBox();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v23 - 8) + 104))(v25, enum case for AppState.Availability.update(_:), v23);
      *uint64_t v22 = v24;
      (*(void (**)(uint64_t *, void, uint64_t))(v21 + 104))(v22, enum case for AppState.available(_:), v20);
      goto LABEL_12;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v9 = sub_1004FBD68();
  uint64_t v10 = (void *)v0[45];
  if (v9)
  {
    uint64_t v11 = v9;
    id v12 = [v9 managementDeclarationIdentifier];

    if (v12)
    {
      uint64_t v13 = v0[29];
      uint64_t v14 = v0[30];
      uint64_t v15 = v0[18];

      (*(void (**)(uint64_t, void, uint64_t))(v14 + 104))(v15, enum case for AppState.managed(_:), v13);
      goto LABEL_12;
    }
  }
  else
  {
  }
  (*(void (**)(void, void, void))(v0[30] + 104))(v0[18], enum case for AppState.installed(_:), v0[29]);
LABEL_12:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = (uint64_t (*)(void))v0[1];
  return v26();
}

uint64_t sub_1005060E0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  id v1 = sub_1004FBD68();
  uint64_t v2 = (void *)v0[45];
  if (v1)
  {
    os_log_type_t v3 = v1;
    id v4 = [v1 managementDeclarationIdentifier];

    if (v4)
    {
      uint64_t v5 = v0[29];
      uint64_t v6 = v0[30];
      uint64_t v7 = v0[18];

      (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v7, enum case for AppState.managed(_:), v5);
      goto LABEL_6;
    }
  }
  else
  {
  }
  (*(void (**)(void, void, void))(v0[30] + 104))(v0[18], enum case for AppState.installed(_:), v0[29]);
LABEL_6:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1005062A0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void *sub_10050654C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v58 = *(void *)(v4 - 8);
  uint64_t v59 = v4;
  __chkstk_darwin(v4);
  uint64_t v57 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000172F8(&qword_100666580);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AppVersion();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v65 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v61 = (char *)&v53 - v13;
  id v14 = [self enumeratorWithOptions:128];
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a1;
  *(void *)(v15 + 24) = a2;
  aBlock[4] = (uint64_t)sub_10050B1BC;
  aBlock[5] = v15;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1004E598C;
  aBlock[3] = (uint64_t)&unk_10064B3A8;
  uint64_t v16 = _Block_copy(aBlock);
  uint64_t v55 = a1;
  unint64_t v56 = a2;
  sub_1000100E0(a1, a2);
  swift_release();
  [v14 setFilter:v16];
  _Block_release(v16);
  uint64_t v54 = swift_allocObject();
  *(void *)(v54 + 16) = v14;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v14;
  sub_1000172F8(&qword_100666538);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = sub_10050B1B4;
  *(void *)(v18 + 24) = v17;
  id v19 = v14;
  uint64_t v66 = (void *)v18;
  dispatch thunk of _AnyIteratorBoxBase.next()();
  uint64_t v20 = (void *)aBlock[0];
  if (aBlock[0])
  {
    unint64_t v63 = (unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    uint64_t v64 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    uint64_t v60 = v10;
    uint64_t v62 = (void (**)(char *, char *, uint64_t))(v10 + 32);
    uint64_t v21 = _swiftEmptyArrayStorage;
    p_base_prots = &XPCClientRegistry.base_prots;
    uint64_t v23 = &selRef_versionIdentifier;
    while (1)
    {
      id v24 = objc_msgSend(v20, (SEL)p_base_prots[376]);
      id v25 = [v24 storeItemIdentifier];

      if (!v25)
      {
        uint64_t v34 = 1;
        goto LABEL_12;
      }
      uint64_t v26 = v9;
      id v27 = v21;
      id v28 = objc_msgSend(v20, (SEL)p_base_prots[376]);
      [v28 storeItemIdentifier];

      id v29 = objc_msgSend(v20, (SEL)p_base_prots[376]);
      id v30 = [v29 versionIdentifier];

      id v31 = objc_msgSend(v20, (SEL)p_base_prots[376]);
      id v32 = v31;
      if (!v30)
      {
        id v33 = [v31 betaVersionIdentifier];

        if (!v33)
        {
          uint64_t v34 = 1;
          goto LABEL_10;
        }
        id v32 = [v20 iTunesMetadata];
        uint64_t v23 = &selRef_betaVersionIdentifier;
      }
      [v32 *v23];

      AppVersion.init(appleItemID:appleVersionID:)();
      uint64_t v34 = 0;
LABEL_10:
      uint64_t v21 = v27;
      p_base_prots = (__objc2_prot_list **)(&XPCClientRegistry + 40);
      uint64_t v23 = &selRef_versionIdentifier;
      uint64_t v9 = v26;
LABEL_12:
      (*v64)(v8, v34, 1, v9);

      if ((*v63)(v8, 1, v9) == 1)
      {
        sub_10001729C((uint64_t)v8, &qword_100666580);
      }
      else
      {
        uint64_t v35 = v61;
        uint64_t v36 = *v62;
        (*v62)(v61, v8, v9);
        v36(v65, v35, v9);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v21 = (void *)sub_10028FC3C(0, v21[2] + 1, 1, (unint64_t)v21);
        }
        unint64_t v38 = v21[2];
        unint64_t v37 = v21[3];
        p_base_prots = (__objc2_prot_list **)(&XPCClientRegistry + 40);
        if (v38 >= v37 >> 1) {
          uint64_t v21 = (void *)sub_10028FC3C(v37 > 1, v38 + 1, 1, (unint64_t)v21);
        }
        v21[2] = v38 + 1;
        v36((char *)v21+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(void *)(v60 + 72) * v38, v65, v9);
      }
      dispatch thunk of _AnyIteratorBoxBase.next()();
      uint64_t v20 = (void *)aBlock[0];
      if (!aBlock[0]) {
        goto LABEL_20;
      }
    }
  }
  uint64_t v21 = _swiftEmptyArrayStorage;
LABEL_20:
  swift_release();
  swift_release();
  uint64_t v39 = v57;
  static Logger.library.getter();
  uint64_t v41 = v55;
  unint64_t v40 = v56;
  sub_1000100E0(v55, v56);
  sub_1000100E0(v41, v40);
  swift_bridgeObjectRetain();
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    uint64_t v65 = (char *)v45;
    *(_DWORD *)uint64_t v44 = 134218242;
    uint64_t v67 = v21[2];
    aBlock[0] = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v44 + 12) = 2082;
    sub_1000100E0(v41, v40);
    unint64_t v46 = sub_100506E20(v41, v40);
    uint64_t v66 = v21;
    unint64_t v47 = v40;
    uint64_t v48 = v46;
    unint64_t v50 = v49;
    sub_10000F7EC(v41, v47);
    uint64_t v67 = sub_1000143F4(v48, v50, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000F7EC(v41, v47);
    unint64_t v51 = v47;
    uint64_t v21 = v66;
    sub_10000F7EC(v41, v51);
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Returning %ld installed apps for %{public}s", (uint8_t *)v44, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_10000F7EC(v41, v40);
    sub_10000F7EC(v41, v40);
  }

  (*(void (**)(char *, uint64_t))(v58 + 8))(v39, v59);
  return v21;
}

id sub_100506CF0(void *a1, uint64_t a2, unint64_t a3)
{
  id result = [a1 bundleIdentifier];
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    id v11 = [a1 iTunesMetadata];
    id v12 = [v11 distributorInfo];

    id v13 = [v12 distributorID];
    if (v13)
    {
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v16 = v15;

      int v17 = 0;
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v16 = 0;
      int v17 = 255;
    }
    char v18 = sub_100506F40(v8, v10, v14, v16, v17, a2, a3);
    sub_10018ACA4(v14, v16, v17);
    swift_bridgeObjectRelease();
    return (id)(v18 & 1);
  }
  return result;
}

unint64_t sub_100506E20(uint64_t a1, uint64_t a2)
{
  unint64_t result = 0x616D6F6420626557;
  switch(a2)
  {
    case 0:
      return result;
    case 1:
      unint64_t result = 0xD000000000000015;
      break;
    case 2:
      unint64_t result = 0xD000000000000024;
      break;
    case 3:
      unint64_t result = 0xD000000000000017;
      break;
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      v5[4] = v2;
      v5[5] = v3;
      strcpy((char *)v5, "Marketplace ");
      BYTE5(v5[1]) = 0;
      HIWORD(v5[1]) = -5120;
      String.append(_:)(*(Swift::String *)(&a2 - 1));
      unint64_t result = v5[0];
      break;
  }
  return result;
}

uint64_t sub_100506F40(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, unint64_t a7)
{
  uint64_t v51 = a4;
  uint64_t v52 = a3;
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v16 = 1;
  if (a7 - 2 < 3 || !a7) {
    goto LABEL_13;
  }
  if (a7 != 1)
  {
    if (a1 != a6 || a2 != a7)
    {
      int v16 = _stringCompareWithSmolCheck(_:_:expecting:)() ^ 1;
      goto LABEL_13;
    }
LABEL_11:
    int v16 = 0;
    goto LABEL_13;
  }
  if ((_BYTE)a5 == 0xFF) {
    goto LABEL_11;
  }
  if ((a5 & 1) == 0 && (v52 != a1 || a2 != v51)) {
    int v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
LABEL_13:
  uint64_t v50 = a1;
  static Logger.library.getter();
  sub_1000100E0(a6, a7);
  swift_bridgeObjectRetain();
  uint64_t v17 = v51;
  uint64_t v18 = v52;
  sub_1001C6164(v52, v51, a5);
  sub_1000100E0(a6, a7);
  swift_bridgeObjectRetain();
  sub_1001C6164(v18, v17, a5);
  id v19 = Logger.logObject.getter();
  int v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, (os_log_type_t)v20))
  {
    int v45 = v20;
    os_log_t v44 = v19;
    int v49 = v16;
    unint64_t v46 = v15;
    uint64_t v47 = v13;
    uint64_t v48 = v12;
    uint64_t v21 = swift_slowAlloc();
    v59[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136446978;
    sub_1000100E0(a6, a7);
    unint64_t v22 = sub_100506E20(a6, a7);
    unint64_t v24 = v23;
    sub_10000F7EC(a6, a7);
    v56[0] = sub_1000143F4(v22, v24, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000F7EC(a6, a7);
    sub_10000F7EC(a6, a7);
    *(_WORD *)(v21 + 12) = 2080;
    swift_bridgeObjectRetain();
    v56[0] = sub_1000143F4(v50, a2, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v21 + 22) = 2080;
    if ((_BYTE)a5 == 0xFF)
    {
      unint64_t v30 = 0xE500000000000000;
      uint64_t v31 = 0x296C696E28;
    }
    else
    {
      int v43 = a5;
      uint64_t v42 = a6;
      if (a5)
      {
        id v25 = &type metadata for WebDistributor;
        unint64_t v26 = sub_1002BEA38();
      }
      else
      {
        id v25 = &type metadata for NativeDistributor;
        unint64_t v26 = sub_1002F9EF8();
      }
      uint64_t v54 = v25;
      unint64_t v55 = v26;
      *(void *)&long long v53 = v52;
      *((void *)&v53 + 1) = v51;
      sub_10018B164(&v53, (uint64_t)v56);
      uint64_t v32 = v57;
      uint64_t v33 = v58;
      sub_10018AC60(v56, v57);
      uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t))(v33 + 40);
      LOBYTE(a5) = v43;
      sub_1001C617C();
      uint64_t v31 = v34(v32, v33);
      unint64_t v30 = v35;
      sub_100014524((uint64_t)v56);
      a6 = v42;
    }
    char v36 = v49;
    v56[0] = sub_1000143F4(v31, v30, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v37 = v51;
    uint64_t v38 = v52;
    sub_10018ACA4(v52, v51, a5);
    sub_10018ACA4(v38, v37, a5);
    *(_WORD *)(v21 + 32) = 1024;
    LODWORD(v56[0]) = v36 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_t v39 = v44;
    _os_log_impl((void *)&_mh_execute_header, v44, (os_log_type_t)v45, "Library %{public}s containsApp %s from %s = %{BOOL}d", (uint8_t *)v21, 0x26u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v48);
    if (v36) {
      goto LABEL_23;
    }
  }
  else
  {
    sub_10000F7EC(a6, a7);
    sub_10000F7EC(a6, a7);
    swift_bridgeObjectRelease_n();
    uint64_t v28 = v51;
    uint64_t v27 = v52;
    sub_10018ACA4(v52, v51, a5);
    sub_10018ACA4(v27, v28, a5);

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    if (v16)
    {
LABEL_23:
      char v29 = sub_100507480(v52, v51, a5, a6, a7);
      return v29 & 1;
    }
  }
  char v29 = 0;
  return v29 & 1;
}

uint64_t sub_100507480(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5)
{
  char v7 = 1;
  switch(a5)
  {
    case 0:
      if (a3 == 255) {
        char v7 = 0;
      }
      else {
        char v7 = a3 & 1;
      }
      return v7 & 1;
    case 1:
      char v7 = a3 != 255;
      return v7 & 1;
    case 2:
    case 4:
      return v7 & 1;
    case 3:
      if (a3 != 255)
      {
        if (a3)
        {
          uint64_t v8 = &type metadata for WebDistributor;
          unint64_t v9 = sub_1002BEA38();
        }
        else
        {
          uint64_t v8 = &type metadata for NativeDistributor;
          unint64_t v9 = sub_1002F9EF8();
        }
        uint64_t v15 = v8;
        unint64_t v16 = v9;
        *(void *)&long long v14 = a1;
        *((void *)&v14 + 1) = a2;
        sub_10018B164(&v14, (uint64_t)v17);
        uint64_t v11 = v18;
        uint64_t v12 = v19;
        sub_10018AC60(v17, v18);
        uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 48);
        sub_1001C617C();
        char v7 = v13(v11, v12);
        sub_100014524((uint64_t)v17);
      }
      return v7 & 1;
    default:
      if (a3)
      {
        char v7 = 0;
        return v7 & 1;
      }
      if (a1 == a4 && a2 == a5)
      {
        char v7 = 1;
        return v7 & 1;
      }
      return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t sub_100507620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return _swift_task_switch(sub_100507644, 0, 0);
}

uint64_t sub_100507644()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[6] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  uint64_t v4 = swift_task_alloc();
  v0[7] = v4;
  *(void *)(v4 + 16) = sub_10050AFB8;
  *(void *)(v4 + 24) = v3;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1006606B0 + dword_1006606B0);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[8] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100507744;
  uint64_t v6 = v0[5];
  return v8((uint64_t)sub_10050AFC0, v4, v6);
}

uint64_t sub_100507744(char a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = sub_1005079D4;
  }
  else
  {
    *(unsigned char *)(v4 + 72) = a1 & 1;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = sub_1005078C0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1005078C0()
{
  int v1 = *(unsigned __int8 *)(v0 + 72);
  uint64_t v2 = type metadata accessor for AppState.Availability();
  uint64_t v4 = swift_allocBox();
  uint64_t v5 = *(uint64_t **)(v0 + 16);
  uint64_t v6 = (unsigned int *)&enum case for AppState.Availability.redownload(_:);
  if (!v1) {
    uint64_t v6 = (unsigned int *)&enum case for AppState.Availability.available(_:);
  }
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v2 - 8) + 104))(v3, *v6, v2);
  *uint64_t v5 = v4;
  uint64_t v7 = enum case for AppState.available(_:);
  uint64_t v8 = type metadata accessor for AppState();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104))(v5, v7, v8);
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_1005079D4()
{
  uint64_t v1 = type metadata accessor for AppState.Availability();
  uint64_t v2 = swift_allocBox();
  uint64_t v3 = *(uint64_t **)(v0 + 16);
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v1 - 8) + 104))(v4, enum case for AppState.Availability.available(_:), v1);
  *uint64_t v3 = v2;
  uint64_t v5 = enum case for AppState.available(_:);
  uint64_t v6 = type metadata accessor for AppState();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104))(v3, v5, v6);
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100507AD4@<X0>(id *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v76 = a4;
  uint64_t v8 = sub_1000172F8(&qword_100666520);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v72 = &v62[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  uint64_t v12 = &v62[-v11];
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v74 = *(void *)(v13 - 8);
  uint64_t v75 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  unint64_t v16 = &v62[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14);
  uint64_t v18 = &v62[-v17];
  id v19 = *a1;
  id v20 = [*a1 iTunesMetadata];
  id v21 = [v20 storeItemIdentifier];

  if (!v21) {
    goto LABEL_7;
  }
  id v22 = [v19 bundleIdentifier];
  if (!v22) {
    goto LABEL_7;
  }
  unint64_t v23 = v22;
  uint64_t v68 = v12;
  unint64_t v69 = a3;
  uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v25 = v24;

  id v26 = [v19 iTunesMetadata];
  id v27 = [v26 versionIdentifier];

  id v70 = v27;
  if (!v27)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    static Logger.library.getter();
    id v39 = v19;
    unint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v73 = v4;
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      uint64_t v78 = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 136446210;
      id v43 = [v39 bundleIdentifier];
      if (v43)
      {
        os_log_t v44 = v43;
        uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v47 = v46;
      }
      else
      {
        unint64_t v47 = 0xE100000000000000;
        uint64_t v45 = 63;
      }
      uint64_t v77 = sub_1000143F4(v45, v47, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "App %{public}s is not installed", v42, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(unsigned char *, uint64_t))(v74 + 8))(v16, v75);
    }
    else
    {

      (*(void (**)(unsigned char *, uint64_t))(v74 + 8))(v16, v75);
    }
    uint64_t v48 = type metadata accessor for XPCApp();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v76, 1, 1, v48);
  }
  static Logger.library.getter();
  swift_bridgeObjectRetain();
  unint64_t v28 = v69;
  sub_1000100E0(a2, v69);
  swift_bridgeObjectRetain();
  sub_1000100E0(a2, v28);
  char v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  int v31 = v30;
  BOOL v32 = os_log_type_enabled(v29, v30);
  uint64_t v73 = v4;
  unint64_t v66 = v25;
  id v67 = v21;
  if (v32)
  {
    uint64_t v33 = swift_slowAlloc();
    os_log_t v64 = v29;
    uint64_t v34 = v33;
    uint64_t v65 = swift_slowAlloc();
    uint64_t v78 = v65;
    *(_DWORD *)uint64_t v34 = 136446466;
    int v63 = v31;
    swift_bridgeObjectRetain();
    uint64_t v77 = sub_1000143F4(v71, v25, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v34 + 12) = 2082;
    sub_1000100E0(a2, v28);
    unint64_t v35 = sub_100506E20(a2, v28);
    unint64_t v37 = v36;
    sub_10000F7EC(a2, v28);
    uint64_t v77 = sub_1000143F4(v35, v37, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000F7EC(a2, v28);
    sub_10000F7EC(a2, v28);
    os_log_t v38 = v64;
    _os_log_impl((void *)&_mh_execute_header, v64, (os_log_type_t)v63, "Returning %{public}s to %{public}s", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    sub_10000F7EC(a2, v28);
    sub_10000F7EC(a2, v28);
  }
  (*(void (**)(unsigned char *, uint64_t))(v74 + 8))(v18, v75);
  uint64_t v50 = v76;
  uint64_t v51 = v68;
  id v52 = [v19 exactBundleVersion];
  if (v52)
  {
    long long v53 = v52;
    uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v76 = 0;
  }
  id v54 = [v19 shortVersionString];
  if (v54)
  {
    unint64_t v55 = v54;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v56 = [v19 iTunesMetadata];
  id v57 = [v56 distributorInfo];

  id v58 = [v57 accountID];
  if (v58)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  XPCApp.Metadata.init(appleVersionID:version:shortVersion:account:)();
  uint64_t v59 = type metadata accessor for XPCApp.Metadata();
  uint64_t v60 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56);
  v60(v51, 0, 1, v59);
  v60(v72, 1, 1, v59);
  XPCApp.init(appleItemID:bundleID:installedMetadata:installingMetadata:installErrorData:)();
  uint64_t v61 = type metadata accessor for XPCApp();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v50, 0, 1, v61);
}

uint64_t sub_10050829C(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = qword_10065B140;
  id v6 = a1;
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_10068DAB0;
  uint64_t v19 = sub_1000172F8((uint64_t *)&unk_10065C9E0);
  LOWORD(v18) = 281;
  uint64_t v20 = sub_10000DDFC(&qword_10065BD60, (uint64_t *)&unk_10065C9E0);
  *((void *)&v18 + 1) = v7;
  sub_1000172F8(&qword_10065BD58);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
  sub_10018B164(&v18, inited + 32);
  swift_bridgeObjectRetain();
  sub_100554E6C(inited);
  uint64_t v19 = sub_1000172F8(&qword_10065C050);
  uint64_t v9 = sub_10000DDFC(&qword_10065C058, &qword_10065C050);
  LOBYTE(v18) = 0;
  uint64_t v20 = v9;
  *((void *)&v18 + 1) = &_swiftEmptyArrayStorage;
  uint64_t v10 = sub_10043A980((uint64_t)&v18, v6);
  uint64_t v12 = v11;
  if (v19) {
    sub_100014524((uint64_t)&v18);
  }

  sub_1000100E0(a2, a3);
  uint64_t v13 = sub_10050AA58(v10, v12, a2, a3);
  sub_10000F7EC(a2, a3);
  if (v13[2])
  {
    sub_1000172F8(&qword_100666540);
    uint64_t v14 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v14 = &_swiftEmptyDictionarySingleton;
  }
  *(void *)&long long v18 = v14;
  uint64_t v15 = swift_bridgeObjectRetain();
  sub_100509CA4(v15, 1, &v18);
  swift_bridgeObjectRelease();
  uint64_t v16 = v18;
  swift_bridgeObjectRelease();

  return v16;
}

uint64_t sub_10050850C(void *a1)
{
  return sub_10050829C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100508514@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v9 = sub_1000172F8(&qword_100666520);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v96 = (char *)&v85 - v13;
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v98 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v97 = (char *)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v95 = (char *)&v85 - v17;
  id v18 = *a1;
  NSString v19 = String._bridgeToObjectiveC()();
  id v20 = [v18 valueForProperty:v19];

  if (v20)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v102 = 0u;
    long long v103 = 0u;
  }
  sub_100017238((uint64_t)&v102, (uint64_t)&v100, (uint64_t *)&unk_10065C9C0);
  if (!v101)
  {
    sub_10001729C((uint64_t)&v102, (uint64_t *)&unk_10065C9C0);

    uint64_t v32 = sub_1000172F8(&qword_10065E5C8);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(a4, 1, 1, v32);
  }
  long long v93 = v12;
  uint64_t v94 = v14;
  long long v104 = a4;
  sub_1001C5DD4(&v100, v99);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  uint64_t v21 = sub_100243BE0(v99);
  if (v4) {
    goto LABEL_52;
  }
  uint64_t v24 = v21;
  uint64_t v25 = v22;
  char v26 = v23;
  swift_release();
  sub_100014524((uint64_t)v99);
  sub_10001729C((uint64_t)&v102, (uint64_t *)&unk_10065C9C0);

  char v27 = sub_100507480(v24, v25, v26 & 1, a2, a3);
  sub_10018ACBC();
  if ((v27 & 1) == 0)
  {
    uint64_t v34 = sub_1000172F8(&qword_10065E5C8);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v104, 1, 1, v34);
  }
  id v28 = v18;
  NSString v29 = String._bridgeToObjectiveC()();
  id v30 = [v28 valueForProperty:v29];

  int v31 = v104;
  if (v30)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v102 = 0u;
    long long v103 = 0u;
  }
  sub_100017238((uint64_t)&v102, (uint64_t)&v100, (uint64_t *)&unk_10065C9C0);
  if (!v101) {
    goto LABEL_19;
  }
  sub_1001C5DD4(&v100, v99);
  swift_allocObject();
  JSONDecoder.init()();
  uint64_t v35 = sub_100242914(v99);
  swift_release();
  sub_100014524((uint64_t)v99);
  sub_10001729C((uint64_t)&v102, (uint64_t *)&unk_10065C9C0);

  id v28 = v28;
  NSString v36 = String._bridgeToObjectiveC()();
  id v37 = [v28 valueForProperty:v36];

  if (v37)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v102 = 0u;
    long long v103 = 0u;
  }
  sub_100017238((uint64_t)&v102, (uint64_t)&v100, (uint64_t *)&unk_10065C9C0);
  if (!v101)
  {
LABEL_19:
    sub_10001729C((uint64_t)&v102, (uint64_t *)&unk_10065C9C0);

    uint64_t v42 = v97;
    static Logger.library.getter();
    id v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    BOOL v45 = os_log_type_enabled(v43, v44);
    uint64_t v46 = v94;
    if (v45)
    {
      unint64_t v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "AppInstallEntity was missing appleItemID or bundleID", v47, 2u);
      swift_slowDealloc();
    }

    uint64_t v48 = *(void (**)(char *, uint64_t))(v98 + 8);
    int v49 = v42;
    uint64_t v50 = v46;
    goto LABEL_22;
  }
  sub_1001C5DD4(&v100, v99);
  swift_allocObject();
  JSONDecoder.init()();
  uint64_t v92 = sub_100241F7C(v99);
  uint64_t v97 = v38;
  swift_release();
  sub_100014524((uint64_t)v99);
  sub_10001729C((uint64_t)&v102, (uint64_t *)&unk_10065C9C0);

  id v39 = v28;
  NSString v40 = String._bridgeToObjectiveC()();
  id v41 = [v39 valueForProperty:v40];

  if (v41)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v102 = 0u;
    long long v103 = 0u;
  }
  sub_100017238((uint64_t)&v102, (uint64_t)&v100, (uint64_t *)&unk_10065C9C0);
  if (!v101)
  {
    sub_10001729C((uint64_t)&v102, (uint64_t *)&unk_10065C9C0);
    swift_bridgeObjectRelease();

    uint64_t v60 = v95;
    static Logger.library.getter();
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      int v63 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v102 = swift_slowAlloc();
      *(_DWORD *)int v63 = 136315138;
      *(void *)&long long v100 = v35;
      uint64_t v64 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v100 = sub_1000143F4(v64, v65, (uint64_t *)&v102);
      int v31 = v104;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "AppInstallEntity for %s does not have an appleItemID", v63, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v48 = *(void (**)(char *, uint64_t))(v98 + 8);
      int v49 = v95;
    }
    else
    {

      uint64_t v48 = *(void (**)(char *, uint64_t))(v98 + 8);
      int v49 = v60;
    }
    uint64_t v50 = v94;
LABEL_22:
    v48(v49, v50);
    uint64_t v51 = sub_1000172F8(&qword_10065E5C8);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v31, 1, 1, v51);
  }
  sub_1001C5DD4(&v100, v99);
  swift_allocObject();
  JSONDecoder.init()();
  sub_100243B04(v99);
  uint64_t v98 = 0;
  swift_release();
  sub_100014524((uint64_t)v99);
  sub_10001729C((uint64_t)&v102, (uint64_t *)&unk_10065C9C0);

  uint64_t v52 = sub_10050938C(v39);
  uint64_t v94 = v53;
  uint64_t v95 = (char *)v52;
  id v54 = v97;
  *int v31 = v92;
  v31[1] = (uint64_t)v54;
  uint64_t v55 = type metadata accessor for XPCApp.Metadata();
  uint64_t v56 = *(void *)(v55 - 8);
  uint64_t v90 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v56 + 56);
  uint64_t v89 = v56 + 56;
  v90(v96, 1, 1, v55);
  id v57 = v39;
  swift_bridgeObjectRetain();
  NSString v58 = String._bridgeToObjectiveC()();
  id v59 = [v57 valueForProperty:v58];

  if (v59)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v102 = 0u;
    long long v103 = 0u;
  }
  sub_100017238((uint64_t)&v102, (uint64_t)&v100, (uint64_t *)&unk_10065C9C0);
  uint64_t v91 = v55;
  if (v101)
  {
    sub_1001C5DD4(&v100, v99);
    swift_allocObject();
    JSONDecoder.init()();
    uint64_t v66 = v98;
    uint64_t v67 = sub_100241F7C(v99);
    uint64_t v98 = v66;
    if (v66) {
      goto LABEL_52;
    }
    unint64_t v87 = v68;
    uint64_t v88 = v67;
    swift_release();
    sub_100014524((uint64_t)v99);
    sub_10001729C((uint64_t)&v102, (uint64_t *)&unk_10065C9C0);
  }
  else
  {
    sub_10001729C((uint64_t)&v102, (uint64_t *)&unk_10065C9C0);

    uint64_t v88 = 0;
    unint64_t v87 = 0xE000000000000000;
  }
  id v69 = v57;
  NSString v70 = String._bridgeToObjectiveC()();
  id v71 = [v69 valueForProperty:v70];

  if (v71)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v102 = 0u;
    long long v103 = 0u;
  }
  sub_100017238((uint64_t)&v102, (uint64_t)&v100, (uint64_t *)&unk_10065C9C0);
  if (!v101)
  {
    sub_10001729C((uint64_t)&v102, (uint64_t *)&unk_10065C9C0);

LABEL_42:
    uint64_t v86 = 0;
    goto LABEL_43;
  }
  sub_1001C5DD4(&v100, v99);
  swift_allocObject();
  uint64_t v72 = JSONDecoder.init()();
  uint64_t v73 = v98;
  uint64_t v74 = sub_100243CBC(v99, v72);
  uint64_t v98 = v73;
  if (v73) {
    goto LABEL_52;
  }
  uint64_t v75 = (void *)v74;
  swift_release();
  sub_100014524((uint64_t)v99);
  sub_10001729C((uint64_t)&v102, (uint64_t *)&unk_10065C9C0);

  [v75 copy];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_10018B1DC(0, (unint64_t *)&qword_10065DC30);
  swift_dynamicCast();
  uint64_t v76 = (void *)v100;

  id v77 = [v76 bundleShortVersionString];
  if (!v77) {
    goto LABEL_42;
  }
  uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();

LABEL_43:
  id v78 = v69;
  NSString v79 = String._bridgeToObjectiveC()();
  id v80 = [v78 valueForProperty:v79];

  if (v80)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v102 = 0u;
    long long v103 = 0u;
  }
  uint64_t v81 = v104;
  sub_100017238((uint64_t)&v102, (uint64_t)&v100, (uint64_t *)&unk_10065C9C0);
  if (!v101) {
    goto LABEL_49;
  }
  sub_1001C5DD4(&v100, v99);
  swift_allocObject();
  JSONDecoder.init()();
  uint64_t v82 = v98;
  sub_100241F7C(v99);
  uint64_t v98 = v82;
  if (!v82)
  {
    swift_release();
    sub_100014524((uint64_t)v99);
LABEL_49:
    uint64_t v83 = sub_1000172F8(&qword_10065E5C8);
    sub_10001729C((uint64_t)&v102, (uint64_t *)&unk_10065C9C0);
    uint64_t v84 = v93;
    XPCApp.Metadata.init(appleVersionID:version:shortVersion:account:)();
    v90(v84, 0, 1, v91);
    XPCApp.init(appleItemID:bundleID:installedMetadata:installingMetadata:installErrorData:)();
    return (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v83 - 8) + 56))(v81, 0, 1, v83);
  }
LABEL_52:
  swift_release();
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_10050938C(void *a1)
{
  uint64_t v2 = type metadata accessor for MarketplaceKitError();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = a1;
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 valueForProperty:v7];

  if (v8)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v18, 0, sizeof(v18));
  }
  sub_100017238((uint64_t)v18, (uint64_t)&v16, (uint64_t *)&unk_10065C9C0);
  if (v17)
  {
    sub_1001C5DD4(&v16, v15);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    uint64_t v9 = JSONDecoder.init()();
    uint64_t v10 = (void *)sub_1002444EC(v15, v9);
    swift_release();
    sub_100014524((uint64_t)v15);
    sub_10001729C((uint64_t)v18, (uint64_t *)&unk_10065C9C0);

    id v11 = v10;
    sub_100501394((uint64_t)v5);

    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_10050AE70(&qword_100666550, (void (*)(uint64_t))&type metadata accessor for MarketplaceKitError);
    uint64_t v12 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    swift_release();
  }
  else
  {
    sub_10001729C((uint64_t)v18, (uint64_t *)&unk_10065C9C0);

    return 0;
  }
  return v12;
}

uint64_t sub_10050966C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

id sub_1005096B0(void *a1, uint64_t a2, unint64_t a3)
{
  id v6 = [a1 typeForInstallMachinery];
  if (!v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    goto LABEL_10;
  }
  NSString v7 = v6;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v10)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (v8 != v11 || v10 != v12)
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_13;
    }
    return 0;
  }
  swift_bridgeObjectRelease_n();
LABEL_13:

  return sub_100506CF0(a1, a2, a3);
}

id sub_1005097C8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = a1;
  sub_1000172F8(&qword_100666538);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = sub_10050AA1C;
  *(void *)(v4 + 24) = v3;
  *a2 = v4;

  return a1;
}

BOOL sub_100509858(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  swift_bridgeObjectRetain();
  id v6 = (void *)sub_10050A4F8(0, a2, a3, (uint64_t)sub_10050A440, 0, v5);
  swift_bridgeObjectRelease();

  if (v6) {
  return v6 != 0;
  }
}

uint64_t sub_1005098E0(void *a1, uint64_t a2)
{
  *(void *)&long long v15 = a2;
  uint64_t v3 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v5 = sub_1002E7720(0, v3, v4);
  uint64_t v16 = sub_1000172F8(&qword_10065BDF0);
  LOBYTE(v15) = 0;
  uint64_t v17 = sub_10000DDFC((unint64_t *)&unk_10065CA50, &qword_10065BDF0);
  *((void *)&v15 + 1) = v5;
  sub_1000172F8(&qword_10065BDF8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
  sub_10018B164(&v15, inited + 32);
  id v7 = a1;
  swift_bridgeObjectRetain();
  sub_100554E8C(inited);
  uint64_t v8 = (void *)sub_10050A22C(0, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)sub_10050A214, 0, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  if (!v8) {
    return 0;
  }
  sub_10024967C(v8);
  uint64_t v10 = v9;

  uint64_t v11 = sub_100312FE4(2, v10);
  if (!v12)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0xE000000000000000;
  }
  uint64_t v13 = sub_1004BD574(v11, v12);
  swift_release();
  return v13;
}

uint64_t sub_100509ABC(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = sub_1002E7720(1, a2, a3);
  uint64_t v15 = sub_1000172F8(&qword_10065BDF0);
  LOBYTE(v14) = 0;
  uint64_t v16 = sub_10000DDFC((unint64_t *)&unk_10065CA50, &qword_10065BDF0);
  *((void *)&v14 + 1) = v4;
  sub_1000172F8(&qword_10065BDF8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
  sub_10018B164(&v14, inited + 32);
  id v6 = a1;
  swift_bridgeObjectRetain();
  sub_100554E8C(inited);
  id v7 = (void *)sub_10050A22C(0, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)sub_10050A214, 0, v6);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  if (!v7) {
    return 0;
  }
  sub_10024967C(v7);
  uint64_t v9 = v8;

  uint64_t v10 = sub_100312FE4(2, v9);
  uint64_t v12 = v11;
  swift_release();
  if (v12) {
    return v10;
  }
  else {
    return 0;
  }
}

id sub_100509C54(void *a1)
{
  return sub_1005096B0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100509C5C()
{
  return swift_release();
}

uint64_t sub_100509C64()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_100509C9C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1005097C8(*(void **)(v1 + 16), a1);
}

uint64_t sub_100509CA4(uint64_t a1, int a2, void *a3)
{
  uint64_t v7 = type metadata accessor for XPCApp();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000172F8(&qword_10065E5C8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v15 = (uint64_t *)((char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = *(void *)(a1 + 16);
  if (!v16) {
    return swift_bridgeObjectRelease();
  }
  LODWORD(v64) = a2;
  uint64_t v60 = v3;
  uint64_t v61 = v16;
  uint64_t v17 = (char *)v15 + *(int *)(v12 + 48);
  unint64_t v59 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v18 = a1 + v59;
  uint64_t v66 = *(void *)(v13 + 72);
  uint64_t v63 = a1;
  swift_bridgeObjectRetain();
  sub_100017238(v18, (uint64_t)v15, &qword_10065E5C8);
  uint64_t v62 = v8;
  NSString v19 = *(void (**)(unint64_t, char *, uint64_t))(v8 + 32);
  uint64_t v21 = v15[1];
  uint64_t v72 = *v15;
  uint64_t v20 = v72;
  uint64_t v73 = v21;
  unint64_t v68 = v19;
  id v69 = v10;
  unint64_t v65 = v17;
  uint64_t v67 = v7;
  v19((unint64_t)v10, v17, v7);
  uint64_t v22 = (void *)*a3;
  unint64_t v24 = sub_100016D20(v20, v21);
  uint64_t v25 = v22[2];
  BOOL v26 = (v23 & 1) == 0;
  uint64_t v27 = v25 + v26;
  if (__OFADD__(v25, v26)) {
    goto LABEL_23;
  }
  char v28 = v23;
  if (v22[3] >= v27)
  {
    if (v64)
    {
      if (v23) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_10052C788();
      if (v28) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v33 = (void *)*a3;
    *(void *)(*a3 + 8 * (v24 >> 6) + 64) |= 1 << v24;
    uint64_t v34 = (uint64_t *)(v33[6] + 16 * v24);
    uint64_t *v34 = v20;
    v34[1] = v21;
    uint64_t v35 = v33[7];
    uint64_t v64 = *(void *)(v62 + 72);
    uint64_t v36 = v67;
    v68(v35 + v64 * v24, v69, v67);
    uint64_t v37 = v33[2];
    BOOL v38 = __OFADD__(v37, 1);
    uint64_t v39 = v37 + 1;
    if (v38)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v33[2] = v39;
    uint64_t v40 = v61 - 1;
    if (v61 == 1) {
      return swift_bridgeObjectRelease_n();
    }
    uint64_t v41 = v63 + v66 + v59;
    while (1)
    {
      sub_100017238(v41, (uint64_t)v15, &qword_10065E5C8);
      uint64_t v43 = v15[1];
      uint64_t v72 = *v15;
      uint64_t v42 = v72;
      uint64_t v73 = v43;
      v68((unint64_t)v69, v65, v36);
      os_log_type_t v44 = (void *)*a3;
      unint64_t v45 = sub_100016D20(v42, v43);
      uint64_t v47 = v44[2];
      BOOL v48 = (v46 & 1) == 0;
      BOOL v38 = __OFADD__(v47, v48);
      uint64_t v49 = v47 + v48;
      if (v38) {
        break;
      }
      char v50 = v46;
      if (v44[3] < v49)
      {
        sub_100525388(v49, 1);
        unint64_t v45 = sub_100016D20(v42, v43);
        if ((v50 & 1) != (v51 & 1)) {
          goto LABEL_25;
        }
      }
      if (v50) {
        goto LABEL_10;
      }
      uint64_t v52 = (void *)*a3;
      *(void *)(*a3 + 8 * (v45 >> 6) + 64) |= 1 << v45;
      uint64_t v53 = (uint64_t *)(v52[6] + 16 * v45);
      uint64_t *v53 = v42;
      v53[1] = v43;
      uint64_t v36 = v67;
      v68(v52[7] + v64 * v45, v69, v67);
      uint64_t v54 = v52[2];
      BOOL v38 = __OFADD__(v54, 1);
      uint64_t v55 = v54 + 1;
      if (v38) {
        goto LABEL_24;
      }
      v52[2] = v55;
      v41 += v66;
      if (!--v40) {
        return swift_bridgeObjectRelease_n();
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_100525388(v27, v64 & 1);
  unint64_t v29 = sub_100016D20(v20, v21);
  if ((v28 & 1) == (v30 & 1))
  {
    unint64_t v24 = v29;
    if ((v28 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v32 = swift_allocError();
    swift_willThrow();
    uint64_t v74 = v32;
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v62 + 8))(v69, v67);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_errorRelease();
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  uint64_t v70 = 0;
  unint64_t v71 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v56._object = (void *)0x80000001005B9220;
  v56._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v56);
  _print_unlocked<A, B>(_:_:)();
  v57._countAndFlagsBits = 39;
  v57._object = (void *)0xE100000000000000;
  String.append(_:)(v57);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_10050A214(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
}

uint64_t sub_10050A22C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = a1 & 1;
  uint64_t v20 = 0;
  type metadata accessor for DDMUpdateEntity.Entity();
  id v10 = [objc_allocWithZone((Class)ASUSQLiteQueryDescriptor) initWithEntityClass:swift_getObjCClassFromMetadata() memoryEntityClass:0];
  uint64_t v11 = (void *)sub_10043DAEC(v9, a2);
  [v10 setPredicate:v11];

  id v12 = [objc_allocWithZone((Class)ASUSQLiteQuery) initOnConnection:a5 descriptor:v10];
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = &v20;
  v13[3] = a3;
  v13[4] = a4;
  v13[5] = a5;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_1001A2178;
  *(void *)(v14 + 24) = v13;
  aBlock[4] = sub_100334198;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100248D44;
  aBlock[3] = &unk_10064B358;
  uint64_t v15 = _Block_copy(aBlock);
  id v16 = a5;
  swift_retain();
  swift_release();
  [v12 enumeratePersistentIDsUsingBlock:v15];

  _Block_release(v15);
  LOBYTE(a5) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (a5)
  {
    __break(1u);
  }
  else
  {
    uint64_t v18 = v20;
    swift_release();
    return v18;
  }
  return result;
}

void sub_10050A440(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
}

void sub_10050A458(uint64_t a1@<X0>, void *a2@<X1>, void (*a3)(void)@<X2>, void *a4@<X8>)
{
  a3(0);
  id v7 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v8 = a2;
  id v9 = [v7 initWithPersistentID:a1 onConnection:v8];
  LODWORD(a1) = [v9 existsInDatabase];

  if (!a1)
  {

    id v9 = 0;
  }
  *a4 = v9;
}

uint64_t sub_10050A4F8(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  char v11 = a1 & 1;
  uint64_t v22 = 0;
  type metadata accessor for DDMInstallHistoryEntryEntity.Entity();
  id v12 = [objc_allocWithZone((Class)ASUSQLiteQueryDescriptor) initWithEntityClass:swift_getObjCClassFromMetadata() memoryEntityClass:0];
  id v13 = sub_100249104(v11, a2, a3);
  [v12 setPredicate:v13];

  id v14 = [objc_allocWithZone((Class)ASUSQLiteQuery) initOnConnection:a6 descriptor:v12];
  uint64_t v15 = (void *)swift_allocObject();
  _OWORD v15[2] = &v22;
  v15[3] = a4;
  void v15[4] = a5;
  v15[5] = a6;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_1001A2178;
  *(void *)(v16 + 24) = v15;
  aBlock[4] = sub_1001A2194;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100248D44;
  aBlock[3] = &unk_10064B2E0;
  uint64_t v17 = _Block_copy(aBlock);
  id v18 = a6;
  swift_retain();
  swift_release();
  [v14 enumeratePersistentIDsUsingBlock:v17];

  _Block_release(v17);
  LOBYTE(a6) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (a6)
  {
    __break(1u);
  }
  else
  {
    uint64_t v20 = v22;
    swift_release();
    return v20;
  }
  return result;
}

char *sub_10050A714(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = sub_1000172F8(&qword_100666530);
  __chkstk_darwin(v6 - 8);
  id v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for XPCApp();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  char v28 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  BOOL v26 = (char *)&v24 - v13;
  swift_retain();
  uint64_t v14 = dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  uint64_t v29 = v14;
  dispatch thunk of _AnyIteratorBoxBase.next()();
  id v15 = v30;
  if (v30)
  {
    uint64_t v27 = (unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    uint64_t v24 = v10;
    uint64_t v16 = (void (**)(char *, char *, uint64_t))(v10 + 32);
    uint64_t v17 = (char *)&_swiftEmptyArrayStorage;
    unint64_t v25 = a3;
    while (1)
    {
      id v30 = v15;
      sub_100507AD4(&v30, a2, a3, (uint64_t)v8);
      if (v3) {
        break;
      }

      if ((*v27)(v8, 1, v9) == 1)
      {
        sub_10001729C((uint64_t)v8, &qword_100666530);
      }
      else
      {
        uint64_t v18 = a2;
        NSString v19 = *v16;
        uint64_t v20 = v26;
        (*v16)(v26, v8, v9);
        v19(v28, v20, v9);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v17 = (char *)sub_10028FBC0(0, *((void *)v17 + 2) + 1, 1, (unint64_t)v17);
        }
        unint64_t v22 = *((void *)v17 + 2);
        unint64_t v21 = *((void *)v17 + 3);
        if (v22 >= v21 >> 1) {
          uint64_t v17 = (char *)sub_10028FBC0(v21 > 1, v22 + 1, 1, (unint64_t)v17);
        }
        *((void *)v17 + 2) = v22 + 1;
        v19(&v17[((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(void *)(v24 + 72) * v22], v28, v9);
        a3 = v25;
        a2 = v18;
      }
      dispatch thunk of _AnyIteratorBoxBase.next()();
      id v15 = v30;
      if (!v30) {
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    uint64_t v17 = (char *)&_swiftEmptyArrayStorage;
LABEL_13:
    swift_release();
  }
  return v17;
}

id sub_10050AA1C@<X0>(void *a1@<X8>)
{
  id result = [*(id *)(v1 + 16) nextObject];
  *a1 = result;
  return result;
}

void *sub_10050AA58(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  uint64_t v7 = sub_1000172F8(&qword_100666548);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (uint64_t *)((char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v31 = sub_1000172F8(&qword_10065E5C8);
  uint64_t v10 = *(void *)(v31 - 8);
  uint64_t v11 = __chkstk_darwin(v31);
  uint64_t v30 = (uint64_t)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v28 = (uint64_t)&v26 - v13;
  uint64_t v29 = *(void *)(a2 + 16);
  if (!v29) {
    return &_swiftEmptyArrayStorage;
  }
  type metadata accessor for AppInstallEntity.Entity();
  Class ObjCClassFromMetadata = (Class)swift_getObjCClassFromMetadata();
  uint64_t v27 = v10;
  uint64_t v14 = (unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v10 + 48);
  id v32 = a1;
  swift_bridgeObjectRetain();
  uint64_t v15 = 0;
  uint64_t v16 = &_swiftEmptyArrayStorage;
  do
  {
    uint64_t v17 = a2;
    uint64_t v18 = *(void *)(a2 + 8 * v15 + 32);
    id v19 = objc_allocWithZone(ObjCClassFromMetadata);
    id v20 = v32;
    id v21 = [v19 initWithPersistentID:v18 onConnection:v20];
    LODWORD(v19) = [v21 existsInDatabase];

    if (!v19)
    {
      swift_bridgeObjectRelease();

      goto LABEL_17;
    }
    id v36 = v21;
    sub_100508514(&v36, v34, v35, v9);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return v16;
    }

    if ((*v14)(v9, 1, v31) == 1)
    {
      sub_10001729C((uint64_t)v9, &qword_100666548);
    }
    else
    {
      uint64_t v22 = v28;
      sub_10050ADA0((uint64_t)v9, v28);
      sub_10050ADA0(v22, v30);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v16 = (void *)sub_100290F3C(0, v16[2] + 1, 1, (unint64_t)v16);
      }
      unint64_t v24 = v16[2];
      unint64_t v23 = v16[3];
      if (v24 >= v23 >> 1) {
        uint64_t v16 = (void *)sub_100290F3C(v23 > 1, v24 + 1, 1, (unint64_t)v16);
      }
      v16[2] = v24 + 1;
      sub_10050ADA0(v30, (uint64_t)v16+ ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(void *)(v27 + 72) * v24);
    }
    a2 = v17;
    ++v15;
  }
  while (v29 != v15);
  swift_bridgeObjectRelease();
  id v21 = v20;
LABEL_17:

  return v16;
}

uint64_t sub_10050ADA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_10065E5C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10050AE08()
{
  unint64_t result = qword_100666558;
  if (!qword_100666558)
  {
    sub_10018B1DC(255, &qword_10065DAE8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100666558);
  }
  return result;
}

uint64_t sub_10050AE70(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10050AEB8(void *a1)
{
  return sub_100509ABC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10050AEC0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_10050AF04(void *a1)
{
  return sub_1005098E0(a1, *(void *)(v1 + 16));
}

uint64_t sub_10050AF0C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v5 & 1;
  return result;
}

uint64_t sub_10050AF58(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

BOOL sub_10050AFB8(void *a1)
{
  return sub_100509858(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10050AFC0@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_10050B008()
{
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10050B040()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10050B050()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10050B060(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10050B0C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10050B134()
{
  if (*(void *)(v0 + 24) >= 5uLL) {
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10050B190@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_1001C6944(a1, a2);
}

uint64_t sub_10050B1C0(uint64_t a1, os_unfair_lock_s *a2)
{
  return sub_10050B1D8(a1, a2, (uint64_t (*)(uint64_t))sub_1001A0578);
}

uint64_t sub_10050B1D8(uint64_t a1, os_unfair_lock_s *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = (uint64_t *)&a2[4];
  uint64_t v6 = a2 + 6;
  os_unfair_lock_lock(a2 + 6);
  sub_10050B340(v5, a1, a3, v13);
  os_unfair_lock_unlock(v6);
  sub_100017238((uint64_t)v13, (uint64_t)v11, &qword_10065BC40);
  if (v12 == 1)
  {
    uint64_t v7 = 0;
  }
  else
  {
    sub_100016CB8((uint64_t)v11, (uint64_t)v10);
    v9[3] = sub_1000172F8((uint64_t *)&unk_10065C9C0);
    v9[0] = swift_allocObject();
    sub_100017238((uint64_t)v10, v9[0] + 16, (uint64_t *)&unk_10065C9C0);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    uint64_t v7 = sub_10025CB18(v9);
    swift_release();
    sub_100014524((uint64_t)v9);
    sub_10001729C((uint64_t)v10, (uint64_t *)&unk_10065C9C0);
  }
  sub_10001729C((uint64_t)v13, &qword_10065BC40);
  return v7;
}

uint64_t sub_10050B340@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, void *a4@<X8>)
{
  uint64_t v6 = a3(a2);
  uint64_t v8 = *a1;
  if (*(void *)(v8 + 16) && (unint64_t v9 = sub_100016D20(v6, v7), (v10 & 1) != 0))
  {
    sub_100017238(*(void *)(v8 + 56) + 32 * v9, (uint64_t)a4, (uint64_t *)&unk_10065C9C0);
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    a4[3] = 1;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_10050B3D0@<X0>(os_unfair_lock_s *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v67 = a2;
  uint64_t v3 = sub_1000172F8(&qword_100666588);
  __chkstk_darwin(v3 - 8);
  unint64_t v68 = (char *)v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000172F8(&qword_100666590);
  __chkstk_darwin(v5 - 8);
  uint64_t v66 = (char *)v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000172F8(&qword_100666598);
  __chkstk_darwin(v7 - 8);
  unint64_t v65 = (char *)v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000172F8(&qword_1006665A0);
  __chkstk_darwin(v9 - 8);
  uint64_t v64 = (char *)v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000172F8(&qword_1006665A8);
  __chkstk_darwin(v11 - 8);
  uint64_t v63 = (char *)v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1000172F8(&qword_1006665B0);
  __chkstk_darwin(v13 - 8);
  uint64_t v62 = (char *)v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for DMCAppsScope();
  uint64_t v15 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v17 = (char *)v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DMCAppsClient();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  id v21 = (char *)v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_1000172F8(&qword_100662E08);
  uint64_t v23 = __chkstk_darwin(v22 - 8);
  unint64_t v25 = (char *)v59 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)v59 - v26;
  swift_retain();
  uint64_t v28 = sub_10050B1D8(1, a1, (uint64_t (*)(uint64_t))sub_100416498);
  unint64_t v30 = v29;
  swift_release();
  uint64_t v70 = v27;
  if (v30 >> 60 == 15)
  {
    uint64_t v31 = type metadata accessor for ManagedAppDeclaration.Attributes();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v27, 1, 1, v31);
  }
  else
  {
    sub_100012670(v28, v30);
    ManagedAppDeclaration.Attributes.init(rawValue:)();
    uint64_t v32 = type metadata accessor for ManagedAppDeclaration.Attributes();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v27, 0, 1, v32);
    sub_10018AE44(v28, v30);
  }
  swift_retain();
  int v60 = sub_100311984(6, a1);
  swift_release();
  swift_retain();
  uint64_t v61 = sub_100311910(3, a1);
  uint64_t v34 = v33;
  uint64_t result = swift_release();
  if (!v34)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  swift_retain();
  char v36 = sub_100311928(9, a1);
  swift_release();
  uint64_t v37 = (unsigned int *)&enum case for DMCAppsScope.system(_:);
  if (v36) {
    uint64_t v37 = (unsigned int *)&enum case for DMCAppsScope.user(_:);
  }
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v17, *v37, v69);
  DMCAppsClient.init(scope:)();
  uint64_t v38 = DMCAppsClient.organizationName.getter();
  uint64_t v40 = v39;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  swift_retain();
  uint64_t v41 = sub_100311910(5, a1);
  uint64_t v43 = v42;
  uint64_t result = swift_release();
  if (!v43) {
    goto LABEL_13;
  }
  v59[0] = v41;
  sub_100017238((uint64_t)v70, (uint64_t)v25, &qword_100662E08);
  uint64_t v44 = type metadata accessor for ManagedAppDeclaration.Attributes();
  uint64_t v45 = *(void *)(v44 - 8);
  int v46 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48))(v25, 1, v44);
  uint64_t v69 = v40;
  v59[1] = v38;
  if (v46 == 1)
  {
    sub_10001729C((uint64_t)v25, &qword_100662E08);
  }
  else
  {
    ManagedAppDeclaration.Attributes.dictionaryRepresentation()();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v25, v44);
  }
  uint64_t v47 = type metadata accessor for InstallSource();
  uint64_t v48 = (uint64_t)v62;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v62, 1, 1, v47);
  uint64_t v49 = type metadata accessor for InstallBehavior();
  uint64_t v50 = (uint64_t)v63;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v63, 1, 1, v49);
  uint64_t updated = type metadata accessor for UpdateBehavior();
  uint64_t v52 = (uint64_t)v64;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(updated - 8) + 56))(v64, 1, 1, updated);
  swift_retain();
  sub_10031196C(2, a1);
  swift_release();
  uint64_t v53 = (uint64_t)v65;
  BackupBehavior.init(backupAppData:)();
  uint64_t v54 = type metadata accessor for BackupBehavior();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v53, 0, 1, v54);
  uint64_t v55 = (uint64_t)v66;
  RemoveBehavior.init(removable:removeKeychainGroupWhenUninstall:)();
  uint64_t v56 = type metadata accessor for RemoveBehavior();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v55, 0, 1, v56);
  uint64_t v57 = type metadata accessor for DocumentSyncBehavior();
  uint64_t v58 = (uint64_t)v68;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v68, 1, 1, v57);
  static DMCAppsClient.makeAppInfo(bundleID:originator:sourceID:attributes:installSource:installBehavior:updateBehavior:backupBehavior:removeBehavior:documentSyncBehavior:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001729C(v58, &qword_100666588);
  sub_10001729C(v55, &qword_100666590);
  sub_10001729C(v53, &qword_100666598);
  sub_10001729C(v52, &qword_1006665A0);
  sub_10001729C(v50, &qword_1006665A8);
  sub_10001729C(v48, &qword_1006665B0);
  return sub_10001729C((uint64_t)v70, &qword_100662E08);
}

uint64_t sub_10050BCD0()
{
  if (*(void *)(v0 + 40)) {
    sub_100014524(v0 + 16);
  }

  return _swift_deallocObject(v0, 48, 7);
}

double sub_10050BD10@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  id v4 = [v1 iTunesMetadata];
  id v5 = [v4 distributorInfo];

  id v6 = [v5 distributorID];
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = v6;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  id v11 = [v2 bundleIdentifier];
  if (!v11)
  {
LABEL_8:
    *(void *)(a1 + 24) = &type metadata for NativeDistributor;
    *(void *)(a1 + 32) = sub_1002F9EF8();

    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v10;
    return result;
  }
  uint64_t v12 = v11;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  if (v8 == v13 && v10 == v15)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0) {
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
  id v19 = [v5 domain];
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;

    *(void *)(a1 + 24) = &type metadata for WebDistributor;
    *(void *)(a1 + 32) = sub_1002BEA38();

    *(void *)a1 = v21;
    *(void *)(a1 + 8) = v23;
  }
  else
  {
LABEL_12:

    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

id sub_10050BEA8(uint64_t a1)
{
  id v2 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 setArtistName:v3];

  NSString v4 = String._bridgeToObjectiveC()();
  [v2 setSoftwareVersionBundleID:v4];

  NSString v5 = String._bridgeToObjectiveC()();
  [v2 setBundleShortVersionString:v5];

  NSString v6 = String._bridgeToObjectiveC()();
  [v2 setBundleVersion:v6];

  Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
  [v2 setSoftwareVersionExternalIdentifier:isa];

  [v2 setGameCenterEverEnabled:*(unsigned __int8 *)(a1 + 104)];
  NSString v8 = String._bridgeToObjectiveC()();
  [v2 setGenre:v8];

  Class v9 = Int._bridgeToObjectiveC()().super.super.isa;
  [v2 setGenreID:v9];

  [v2 setHasMessagesExtension:*(unsigned char *)(a1 + 136) & 1];
  sub_10001733C(a1 + 137, (uint64_t)&v38, &qword_1006665B8);
  sub_10001733C((uint64_t)&v38, (uint64_t)&v39, &qword_1006665B8);
  if (v39 != 2)
  {
    Class v10 = Bool._bridgeToObjectiveC()().super.super.isa;
    [v2 setHasOrEverHasHadIAP:v10];
  }
  if (*(void *)(a1 + 152))
  {
    swift_bridgeObjectRetain();
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v11 = 0;
  }
  [v2 setIAdAttribution:v11];

  if (*(void *)(a1 + 168))
  {
    swift_bridgeObjectRetain();
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v12 = 0;
  }
  [v2 setIAdConversionDate:v12];

  if (*(void *)(a1 + 184))
  {
    swift_bridgeObjectRetain();
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v13 = 0;
  }
  [v2 setIAdImpressionDate:v13];

  sub_10001733C(a1 + 192, (uint64_t)v37, &qword_10065B528);
  sub_10001733C((uint64_t)v37, (uint64_t)&v40, &qword_10065B528);
  if (v41) {
    Class v14 = 0;
  }
  else {
    Class v14 = UInt64._bridgeToObjectiveC()().super.super.isa;
  }
  [v2 setInitialODRSize:v14];

  [v2 setIsAutoDownload:*(unsigned char *)(a1 + 202) & 1];
  [v2 setIsB2BCustomApp:*(unsigned char *)(a1 + 203) & 1];
  [v2 setGameCenterEnabled:*(unsigned __int8 *)(a1 + 204)];
  [v2 setLaunchProhibited:*(unsigned char *)(a1 + 205) & 1];
  [v2 setPurchasedRedownload:*(unsigned char *)(a1 + 206) & 1];
  Class v15 = UInt64._bridgeToObjectiveC()().super.super.isa;
  [v2 setItemID:v15];

  NSString v16 = String._bridgeToObjectiveC()();
  [v2 setItemName:v16];

  NSString v17 = String._bridgeToObjectiveC()();
  [v2 setKind:v17];

  if (*(void *)(a1 + 248))
  {
    swift_bridgeObjectRetain();
    sub_1000172F8((uint64_t *)&unk_10065C5D0);
    v18.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v18.super.Class isa = 0;
  }
  [v2 setNameTranscriptions:v18.super.isa];

  if (*(void *)(a1 + 264))
  {
    swift_bridgeObjectRetain();
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v19 = 0;
  }
  [v2 setPurchaseDate:v19];

  long long v35 = *(_OWORD *)(a1 + 272);
  uint64_t v36 = *(void *)(a1 + 288);
  swift_bridgeObjectRetain();
  NSString v20 = String._bridgeToObjectiveC()();
  sub_10050C5FC((uint64_t)&v35);
  [v2 setRatingLabel:v20];

  Class v21 = Int._bridgeToObjectiveC()().super.super.isa;
  [v2 setRatingRank:v21];

  NSString v22 = String._bridgeToObjectiveC()();
  [v2 setReleaseDate:v22];

  if (*(void *)(a1 + 336))
  {
    swift_bridgeObjectRetain();
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v23 = 0;
  }
  [v2 setStoreCohort:v23];

  Class v24 = Int._bridgeToObjectiveC()().super.super.isa;
  [v2 setStorefront:v24];

  uint64_t v25 = *(void *)(a1 + 352);
  if (v25)
  {
    uint64_t v26 = *(void *)(v25 + 16);
    if (v26)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v34 = v25;
      uint64_t v27 = v25 + 48;
      do
      {
        swift_bridgeObjectRetain();
        Class v28 = Int._bridgeToObjectiveC()().super.super.isa;
        id v29 = objc_allocWithZone((Class)MIStoreMetadataSubGenre);
        NSString v30 = String._bridgeToObjectiveC()();
        id v31 = [v29 initWithGenre:v30 genreID:v28];
        swift_bridgeObjectRelease();

        if (v31)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        v27 += 24;
        --v26;
      }
      while (v26);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    sub_1002DB5A0(a1);
    swift_bridgeObjectRelease();
    sub_10018B1DC(0, &qword_10065B660);
    Class v32 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1002DB5A0(a1);
    Class v32 = 0;
  }
  objc_msgSend(v2, "setSubGenres:", v32, v34);

  return v2;
}

uint64_t sub_10050C5FC(uint64_t a1)
{
  return a1;
}

void sub_10050C628(uint64_t a1, unint64_t a2, char a3)
{
  sub_100549D10(a1, a2, 40);
  Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
  [v3 setDownloaderID:isa];

  sub_100549D10(a1, a2, 41);
  Class v8 = UInt64._bridgeToObjectiveC()().super.super.isa;
  [v3 setFamilyID:v8];

  sub_100549D10(a1, a2, 1);
  Class v9 = UInt64._bridgeToObjectiveC()().super.super.isa;
  [v3 setPurchaserID:v9];

  if (a3)
  {
    sub_100549D10(a1, a2, 42);
    [v3 setDeviceBasedVPP:v10 != 0];
  }
}

ValueMetadata *type metadata accessor for StoreMetadata()
{
  return &type metadata for StoreMetadata;
}

uint64_t sub_10050C7CC(void *a1, void *a2)
{
  sub_10018AC60(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  v10[0] = 0;
  id v3 = [a2 propertyListDataWithError:v10];
  id v4 = v10[0];
  if (v3)
  {
    NSString v5 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;

    v10[0] = v5;
    v10[1] = v7;
    sub_100239C90((uint64_t)v11, v12);
    sub_10024A9C8();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
    sub_100013510((uint64_t)v5, (unint64_t)v7);
  }
  else
  {
    Class v8 = v4;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return sub_100014524((uint64_t)v11);
}

id sub_10050C90C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id result = sub_10050CA20(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_10050C938(void *a1)
{
  return sub_10050C7CC(a1, *v1);
}

id sub_10050C954()
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v5 = 0;
  id v1 = [(id)swift_getObjCClassFromMetadata() metadataFromPlistData:isa error:&v5];

  if (v1)
  {
    id v2 = v5;
  }
  else
  {
    id v3 = v5;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v1;
}

id sub_10050CA20(void *a1)
{
  sub_10018AC60(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  sub_10018AC60(v6, v6[3]);
  sub_10024A974();
  dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
  sub_10018B1DC(0, (unint64_t *)&qword_10065DC30);
  id v2 = sub_10050C954();
  sub_100013510(v4, v5);
  sub_100014524((uint64_t)v6);
  sub_100014524((uint64_t)a1);
  return v2;
}

void *sub_10050CB44(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    uint64_t v8 = a3[6];
    Class v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = *(void *)(v11 - 8);
    NSString v13 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    swift_bridgeObjectRetain();
    v13(v9, v10, v11);
    uint64_t v14 = a3[8];
    *((unsigned char *)v4 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    Class v15 = (char *)v4 + v14;
    NSString v16 = (char *)a2 + v14;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v16, 1, v11))
    {
      uint64_t v17 = sub_1000172F8(&qword_10065C3C0);
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      v13(v15, v16, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
    }
  }
  return v4;
}

uint64_t sub_10050CCFC(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  Class v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v9(v4, v5);
  uint64_t v7 = a1 + *(int *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v7, v5);
  }
  return result;
}

void *sub_10050CE04(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  Class v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  swift_bridgeObjectRetain();
  v12(v8, v9, v10);
  uint64_t v13 = a3[8];
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  uint64_t v14 = (char *)a1 + v13;
  Class v15 = (char *)a2 + v13;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v15, 1, v10))
  {
    uint64_t v16 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v12(v14, v15, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
  }
  return a1;
}

void *sub_10050CF6C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  uint64_t v12 = a3[8];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  Class v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  LODWORD(v7) = v15((char *)a1 + v12, 1, v9);
  int v16 = v15(v14, 1, v9);
  if (!v7)
  {
    if (!v16)
    {
      v11(v13, v14, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v17 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v14, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
  return a1;
}

uint64_t sub_10050D148(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(void *, const void *, uint64_t))(v10 + 32);
  v11(v7, v8, v9);
  uint64_t v12 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v14, 1, v9))
  {
    uint64_t v15 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
  }
  return a1;
}

void *sub_10050D2A8(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  uint64_t v13 = a3[8];
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  int v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  LODWORD(v8) = v16((char *)a1 + v13, 1, v10);
  int v17 = v16(v15, 1, v10);
  if (!v8)
  {
    if (!v17)
    {
      v12(v14, v15, v10);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v15, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
  return a1;
}

uint64_t sub_10050D470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10050D484);
}

uint64_t sub_10050D484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1000172F8(&qword_10065C3C0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 32);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_10050D5B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10050D5C8);
}

uint64_t sub_10050D5C8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1000172F8(&qword_10065C3C0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 32);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for ActionButtonInstallMetadata()
{
  uint64_t result = qword_100666618;
  if (!qword_100666618) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10050D744()
{
  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    sub_10026B458();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_10050D82C(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_100666670);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_10050E038();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    char v12 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for ActionButtonInstallMetadata();
    char v11 = 2;
    type metadata accessor for URL();
    sub_1002E0B34(&qword_10065CFE0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v10 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10050DA64@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v3 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v26 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000172F8(&qword_100666660);
  uint64_t v27 = *(void *)(v9 - 8);
  uint64_t v28 = v9;
  __chkstk_darwin(v9);
  char v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v12 = (int *)type metadata accessor for ActionButtonInstallMetadata();
  __chkstk_darwin(v12);
  uint64_t v14 = (void *)((char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = a1[3];
  id v29 = a1;
  sub_10018AC60(a1, v15);
  sub_10050E038();
  uint64_t v16 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16) {
    return sub_100014524((uint64_t)v29);
  }
  NSString v30 = v5;
  char v35 = 0;
  uint64_t v17 = v27;
  *uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
  v14[1] = v18;
  char v34 = 1;
  uint64_t v19 = v17;
  v14[2] = KeyedDecodingContainer.decode(_:forKey:)();
  char v33 = 2;
  NSString v20 = v8;
  uint64_t v21 = sub_1002E0B34(&qword_10065CFD8);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v24[1] = v21;
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))((char *)v14 + v12[6], v20, v6);
  char v32 = 3;
  *((unsigned char *)v14 + v12[7]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
  char v31 = 4;
  uint64_t v22 = (uint64_t)v30;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v28);
  sub_10026400C(v22, (uint64_t)v14 + v12[8]);
  sub_10050E08C((uint64_t)v14, v25);
  sub_100014524((uint64_t)v29);
  return sub_10050E0F0((uint64_t)v14);
}

unint64_t sub_10050DEA8()
{
  unint64_t result = 0x746E756F636361;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x657449656C707061;
      break;
    case 2:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 3:
      unint64_t result = 0x6574616470557369;
      break;
    case 4:
      unint64_t result = 0x6572616853707061;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10050DF68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10050E358(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10050DF90(uint64_t a1)
{
  unint64_t v2 = sub_10050E038();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10050DFCC(uint64_t a1)
{
  unint64_t v2 = sub_10050E038();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10050E008@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10050DA64(a1, a2);
}

uint64_t sub_10050E020(void *a1)
{
  return sub_10050D82C(a1);
}

unint64_t sub_10050E038()
{
  unint64_t result = qword_100666668;
  if (!qword_100666668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100666668);
  }
  return result;
}

uint64_t sub_10050E08C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ActionButtonInstallMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10050E0F0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ActionButtonInstallMetadata();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for ActionButtonInstallMetadata.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10050E218);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionButtonInstallMetadata.CodingKeys()
{
  return &type metadata for ActionButtonInstallMetadata.CodingKeys;
}

unint64_t sub_10050E254()
{
  unint64_t result = qword_100666678;
  if (!qword_100666678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100666678);
  }
  return result;
}

unint64_t sub_10050E2AC()
{
  unint64_t result = qword_100666680;
  if (!qword_100666680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100666680);
  }
  return result;
}

unint64_t sub_10050E304()
{
  unint64_t result = qword_100666688;
  if (!qword_100666688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100666688);
  }
  return result;
}

uint64_t sub_10050E358(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746E756F636361 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657449656C707061 && a2 == 0xEB0000000044496DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001ELL && a2 == 0x80000001005B7DA0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6574616470557369 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6572616853707061 && a2 == 0xEB000000004C5255)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

id sub_10050E5A0()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(uint64_t (***)(char *, uint64_t))(v0 - 8);
  __chkstk_darwin(v0);
  int v3 = (char *)v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [self sharedInstance];
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v22 = 0;
  unsigned int v6 = [v4 importKeybagWithData:isa error:&v22];

  id v7 = v22;
  if (v6)
  {
    return v7;
  }
  else
  {
    NSString v20 = (uint64_t (**)(char *, uint64_t))v22;
    id v9 = v22;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    static Logger.general.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      char v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = (void *)swift_slowAlloc();
      id v22 = v19;
      *(_DWORD *)char v12 = 136446210;
      v18[1] = v12 + 4;
      uint64_t ErrorValue = swift_getErrorValue();
      NSString v20 = v1;
      __chkstk_darwin(ErrorValue);
      (*(void (**)(char *))(v15 + 16))((char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v16 = String.init<A>(describing:)();
      uint64_t v21 = sub_1000143F4(v16, v17, (uint64_t *)&v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Importing keybag failed: %{public}s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return (id)v20[1](v3, v0);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      return (id)v1[1](v3, v0);
    }
  }
}

uint64_t sub_10050E988(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Class isa = (Class)objc_msgSend(a1, "ams_DSID");
  if (!isa)
  {
    sub_10024A4F8();
    Class isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
  }
  id v9 = [self sharedInstance];
  id v40 = 0;
  id v10 = [v9 keybagSyncDataWithAccountID:isa transactionType:a2 error:&v40];

  id v11 = v40;
  uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v14 = v13;

  if (v11)
  {
    uint64_t v38 = v5;
    id v15 = v11;
    static Logger.general.getter();
    id v16 = v15;
    unint64_t v17 = isa;
    Class isa = (Class)v16;
    uint64_t v18 = v17;
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    int v21 = v20;
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v22 = swift_slowAlloc();
      NSString v23 = (void *)swift_slowAlloc();
      char v35 = (void *)swift_slowAlloc();
      uint64_t v39 = (uint64_t)v18;
      id v40 = v35;
      *(_DWORD *)uint64_t v22 = 138543618;
      os_log_t v33 = v19;
      int v34 = v21;
      uint64_t v37 = v4;
      Class v24 = v18;
      uint64_t v36 = v7;
      uint64_t v25 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *NSString v23 = v18;

      *(_WORD *)(v22 + 12) = 2082;
      uint64_t v32 = v22 + 14;
      Class isa = isa;
      id v26 = [(objc_class *)isa description];
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v29 = v28;

      uint64_t v39 = sub_1000143F4(v27, v29, (uint64_t *)&v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_t v30 = v33;
      _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v34, "Generating keybag for accountID: %{public}@ failed: %{public}s", (uint8_t *)v22, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_100013510(v12, v14);

      (*(void (**)(char *, uint64_t))(v38 + 8))(v36, v37);
    }
    else
    {

      sub_100013510(v12, v14);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v7, v4);
    }
    uint64_t v12 = 0;
  }

  return v12;
}

uint64_t destroy for IPA_DownloadTask(id *a1)
{
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

void *initializeWithCopy for IPA_DownloadTask(void *a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v6;
  a1[6] = *(void *)(a2 + 48);
  id v7 = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for IPA_DownloadTask(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for IPA_DownloadTask(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v5;
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for IPA_DownloadTask(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IPA_DownloadTask(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IPA_DownloadTask()
{
  return &type metadata for IPA_DownloadTask;
}

void *sub_10050F028(char a1, os_unfair_lock_s *a2)
{
  int v3 = (uint64_t *)&a2[4];
  uint64_t v4 = a2 + 6;
  os_unfair_lock_lock(a2 + 6);
  sub_10050F184(v3, a1, v11);
  os_unfair_lock_unlock(v4);
  sub_100017238((uint64_t)v11, (uint64_t)v9, &qword_10065BC40);
  uint64_t v5 = 0;
  if (v10 != 1)
  {
    sub_100016CB8((uint64_t)v9, (uint64_t)v8);
    v7[3] = sub_1000172F8((uint64_t *)&unk_10065C9C0);
    v7[0] = swift_allocObject();
    sub_100017238((uint64_t)v8, v7[0] + 16, (uint64_t *)&unk_10065C9C0);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    uint64_t v5 = sub_10025B3CC((uint64_t)v7);
    swift_release();
    sub_100014524((uint64_t)v7);
    sub_10001729C((uint64_t)v8, (uint64_t *)&unk_10065C9C0);
  }
  sub_10001729C((uint64_t)v11, &qword_10065BC40);
  return v5;
}

uint64_t sub_10050F184@<X0>(uint64_t *a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  unint64_t v5 = sub_1004B3BC0(a2);
  uint64_t v7 = *a1;
  if (*(void *)(v7 + 16) && (unint64_t v8 = sub_100016D20(v5, v6), (v9 & 1) != 0))
  {
    sub_100017238(*(void *)(v7 + 56) + 32 * v8, (uint64_t)a3, (uint64_t *)&unk_10065C9C0);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    a3[3] = 1;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_10050F20C(uint64_t a1)
{
  v2[22] = a1;
  v2[23] = v1;
  uint64_t v3 = type metadata accessor for AppInstallTaskResult();
  v2[24] = v3;
  v2[25] = *(void *)(v3 - 8);
  v2[26] = swift_task_alloc();
  sub_1000172F8(&qword_10065E4D0);
  v2[27] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for ManagedAppStatus.State();
  v2[28] = v4;
  v2[29] = *(void *)(v4 - 8);
  v2[30] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DMCAppsScope();
  v2[31] = v5;
  v2[32] = *(void *)(v5 - 8);
  v2[33] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DMCAppsClient();
  v2[34] = v6;
  v2[35] = *(void *)(v6 - 8);
  v2[36] = swift_task_alloc();
  type metadata accessor for DownloadRequest();
  v2[37] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v2[38] = v7;
  v2[39] = *(void *)(v7 - 8);
  v2[40] = swift_task_alloc();
  return _swift_task_switch(sub_10050F4C4, 0, 0);
}

uint64_t sub_10050F4C4()
{
  if (!os_variant_has_internal_content()) {
    goto LABEL_7;
  }
  *(unsigned char *)(v0 + 464) = 0;
  uint64_t v1 = (__CFString *)String._bridgeToObjectiveC()();
  uint64_t v2 = (__CFString *)String._bridgeToObjectiveC()();
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(v1, v2, (Boolean *)(v0 + 464));

  if (!*(unsigned char *)(v0 + 464)
    || !AppBooleanValue
    || (*(_OWORD *)(v0 + 136) = *(_OWORD *)(*(void *)(v0 + 184) + 24),
        uint64_t v4 = *(os_unfair_lock_s **)(v0 + 144),
        swift_retain(),
        char v5 = sub_100312CB4(12, v4),
        sub_100263CCC(v0 + 136),
        v5 == 2))
  {
LABEL_7:
    *(_OWORD *)(v0 + 152) = *(_OWORD *)(*(void *)(v0 + 184) + 24);
    uint64_t v7 = *(os_unfair_lock_s **)(v0 + 160);
    swift_retain();
    uint64_t v8 = sub_100313310(10, v7);
    char v10 = v9;
    sub_100263CCC(v0 + 152);
    if (v10) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v8;
    }
    *(void *)(v0 + 328) = v11 + 1;
    if (v11 == -1) {
      __break(1u);
    }
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 336) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_10050F95C;
    return sub_100511134(v0 + 80);
  }
  if (v5)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) == 0) {
      goto LABEL_7;
    }
  }
  unint64_t v14 = *(id **)(v0 + 184);
  static Logger.install.getter();
  sub_1004F7B98(v14);
  sub_1004F7B98(v14);
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v18 = *(void ***)(v0 + 184);
  if (v17)
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v20 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 138412290;
    int v21 = *v18;
    *(void *)(v0 + 168) = *v18;
    id v22 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v20 = v21;
    sub_100513424(v18);
    sub_100513424(v18);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "[%@] Forcing failure of delta update (expect further error messages prior to expected retry with full update)…", v19, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100513424(*(void ***)(v0 + 184));
    sub_100513424(v18);
  }
  uint64_t v24 = *(void *)(v0 + 312);
  uint64_t v23 = *(void *)(v0 + 320);
  uint64_t v25 = *(void *)(v0 + 304);
  id v26 = *(uint64_t **)(v0 + 176);

  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
  type metadata accessor for InternalError();
  sub_10019FE50();
  uint64_t v27 = swift_allocError();
  swift_storeEnumTagMultiPayload();
  *id v26 = v27;
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

uint64_t sub_10050F95C()
{
  *(void *)(*(void *)v1 + 344) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100510F44;
  }
  else {
    uint64_t v2 = sub_10050FA9C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10050FA9C()
{
  uint64_t v1 = *(void *)(v0 + 344);
  sub_100511DE8((void **)(v0 + 80), *(void *)(v0 + 296));
  if (v1)
  {
    sub_100014524(v0 + 80);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
LABEL_3:
    return v2();
  }
  *(_OWORD *)(v0 + 120) = *(_OWORD *)(*(void *)(v0 + 184) + 8);
  uint64_t v4 = *(os_unfair_lock_s **)(v0 + 128);
  swift_retain();
  uint64_t v5 = sub_100312690(11, v4);
  uint64_t v7 = v6;
  *(void *)(v0 + 352) = v5;
  *(void *)(v0 + 360) = v6;
  sub_100263CCC(v0 + 120);
  if (!v7)
  {
    uint64_t v9 = *(void *)(v0 + 328);
    uint64_t v10 = *(void *)(v0 + 296);
    uint64_t v11 = *(void *)(v0 + 200);
    uint64_t v12 = *(void **)(v0 + 208);
    sub_1000172F8(&qword_10065DBF0);
    uint64_t v13 = *(void *)(v11 + 72);
    unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_1005A3EC0;
    sub_1005133C0(v10, v15 + v14);
    type metadata accessor for AppInstallScheduler.ParkReason();
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    uint64_t v16 = *(void *)(v0 + 152);
    *uint64_t v12 = v9;
    v12[1] = v16;
    swift_storeEnumTagMultiPayload();
    unint64_t v17 = *(void *)(v15 + 16);
    unint64_t v18 = *(void *)(v15 + 24);
    unint64_t v19 = v17 + 1;
    if (v17 >= v18 >> 1)
    {
      unint64_t v23 = v15;
      unint64_t v24 = *(void *)(v15 + 16);
      uint64_t v25 = sub_100290F08(v18 > 1, v17 + 1, 1, v23);
      unint64_t v17 = v24;
      uint64_t v15 = v25;
    }
    uint64_t v20 = *(void *)(v0 + 296);
    uint64_t v21 = *(void *)(v0 + 208);
    id v22 = *(uint64_t **)(v0 + 176);
    *(void *)(v15 + 16) = v19;
    sub_1005134B4(v21, v15 + v14 + v17 * v13, (uint64_t (*)(void))type metadata accessor for AppInstallTaskResult);
    sub_1001C785C(v20);
    sub_100014524(v0 + 80);
    *id v22 = v15;
    swift_storeEnumTagMultiPayload();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_3;
  }
  uint64_t v8 = *(void *)(*(void *)(v0 + 184) + 40);
  *(void *)(v0 + 368) = v8;
  return _swift_task_switch(sub_10050FDEC, v8, 0);
}

uint64_t sub_10050FDEC()
{
  uint64_t v1 = v0[45];
  uint64_t v2 = v0[44];
  uint64_t v3 = *(void *)(v0[46] + 112);
  v0[47] = v3;
  uint64_t v4 = swift_task_alloc();
  v0[48] = v4;
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  uint64_t v5 = swift_task_alloc();
  v0[49] = v5;
  *(void *)(v5 + 16) = sub_10023CA38;
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = dword_100660660;
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[50] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10050FF30;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100660660 + v6))((uint64_t)sub_1001C3EFC, v5, v3);
}

uint64_t sub_10050FF30(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)*v3;
  v5[51] = a2;
  v5[52] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v6 = v5[46];
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = sub_1005108AC;
    uint64_t v8 = v6;
  }
  else
  {
    v5[53] = a1;
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = sub_10051011C;
    uint64_t v8 = 0;
  }
  return _swift_task_switch(v7, v8, 0);
}

uint64_t sub_10051011C()
{
  uint64_t v1 = v0[53];
  uint64_t v2 = (os_unfair_lock_s *)v0[51];
  uint64_t v4 = v0[32];
  uint64_t v3 = v0[33];
  uint64_t v5 = v0[31];
  swift_retain();
  char v6 = sub_100311928(9, v2);
  swift_release();
  uint64_t v7 = (unsigned int *)&enum case for DMCAppsScope.system(_:);
  if (v6) {
    uint64_t v7 = (unsigned int *)&enum case for DMCAppsScope.user(_:);
  }
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, *v7, v5);
  DMCAppsClient.init(scope:)();
  v0[5] = sub_1000172F8((uint64_t *)&unk_1006666B0);
  v0[6] = swift_getOpaqueTypeConformance2();
  v0[7] = swift_getOpaqueTypeConformance2();
  v0[8] = swift_getOpaqueTypeConformance2();
  v0[9] = swift_getOpaqueTypeConformance2();
  sub_10019CE94(v0 + 2);
  sub_10050B3CC(v1, v2);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[54] = (uint64_t)v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1005102F8;
  return DMCAppsClient.willInstallApplication(_:options:)(v0 + 2, 0);
}

uint64_t sub_1005102F8(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 280);
  *(void *)(*v2 + 440) = v1;
  swift_task_dealloc();
  char v6 = (void (**)(uint64_t, uint64_t))(v5 + 8);
  if (v1)
  {
    (*v6)(*(void *)(v4 + 288), *(void *)(v4 + 272));
    uint64_t v7 = sub_10051078C;
  }
  else
  {
    uint64_t v8 = *(void *)(v4 + 288);
    uint64_t v9 = *(void *)(v4 + 272);
    *(unsigned char *)(v4 + 465) = a1 & 1;
    (*v6)(v8, v9);
    sub_100014524(v4 + 16);
    uint64_t v7 = sub_1005104A8;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1005104A8()
{
  if (*(unsigned char *)(v0 + 465) == 1)
  {
    uint64_t v1 = *(os_unfair_lock_s **)(v0 + 408);
    uint64_t v2 = *(void *)(v0 + 216);
    (*(void (**)(void, void, void))(*(void *)(v0 + 232) + 104))(*(void *)(v0 + 240), enum case for ManagedAppStatus.State.downloading(_:), *(void *)(v0 + 224));
    uint64_t v3 = type metadata accessor for ManagedAppStatus.Reason();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
    swift_retain();
    char v4 = sub_100311928(9, v1);
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 448) = v5;
    *uint64_t v5 = v0;
    uint64_t v6 = *(void *)(v0 + 360);
    if (v4 == 2)
    {
      v5[1] = sub_100513654;
      uint64_t v7 = *(void *)(v0 + 352);
      uint64_t v8 = *(void *)(v0 + 216);
      uint64_t v9 = *(void *)(v0 + 240);
      char v10 = 0;
    }
    else
    {
      v5[1] = sub_100510B64;
      uint64_t v7 = *(void *)(v0 + 352);
      uint64_t v8 = *(void *)(v0 + 216);
      uint64_t v9 = *(void *)(v0 + 240);
      char v10 = v4;
    }
    return sub_10023FB0C(v9, v8, v7, v6, v10);
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 296);
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    sub_10019FE50();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();
    sub_1001C785C(v11);
    sub_100014524(v0 + 80);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
}

uint64_t sub_10051078C()
{
  uint64_t v1 = *(void *)(v0 + 296);
  sub_100014524(v0 + 16);
  swift_bridgeObjectRelease();
  swift_release();
  sub_1001C785C(v1);
  sub_100014524(v0 + 80);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1005108AC()
{
  swift_bridgeObjectRelease();
  swift_errorRelease();
  return _swift_task_switch(sub_10051094C, 0, 0);
}

uint64_t sub_10051094C()
{
  uint64_t v1 = v0[41];
  uint64_t v2 = v0[37];
  uint64_t v4 = v0[25];
  uint64_t v3 = (void *)v0[26];
  sub_1000172F8(&qword_10065DBF0);
  uint64_t v5 = *(void *)(v4 + 72);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1005A3EC0;
  sub_1005133C0(v2, v7 + v6);
  type metadata accessor for AppInstallScheduler.ParkReason();
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  uint64_t v8 = v0[19];
  *uint64_t v3 = v1;
  v3[1] = v8;
  swift_storeEnumTagMultiPayload();
  unint64_t v10 = *(void *)(v7 + 16);
  unint64_t v9 = *(void *)(v7 + 24);
  if (v10 >= v9 >> 1) {
    unint64_t v7 = sub_100290F08(v9 > 1, v10 + 1, 1, v7);
  }
  uint64_t v11 = v0[37];
  uint64_t v12 = v0[26];
  uint64_t v13 = (unint64_t *)v0[22];
  *(void *)(v7 + 16) = v10 + 1;
  sub_1005134B4(v12, v7 + v6 + v10 * v5, (uint64_t (*)(void))type metadata accessor for AppInstallTaskResult);
  sub_1001C785C(v11);
  sub_100014524((uint64_t)(v0 + 10));
  *uint64_t v13 = v7;
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_100510B64()
{
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[57] = v0;
    uint64_t v4 = v2[29];
    uint64_t v3 = v2[30];
    unint64_t v7 = v2 + 27;
    uint64_t v5 = v2[27];
    uint64_t v6 = v7[1];
    swift_bridgeObjectRelease();
    sub_10001729C(v5, &qword_10065E4D0);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v6);
    uint64_t v8 = sub_10051102C;
  }
  else
  {
    uint64_t v10 = v2[29];
    uint64_t v9 = v2[30];
    uint64_t v13 = v2 + 27;
    uint64_t v11 = v2[27];
    uint64_t v12 = v13[1];
    swift_bridgeObjectRelease();
    sub_10001729C(v11, &qword_10065E4D0);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v12);
    uint64_t v8 = sub_100510D24;
  }
  return _swift_task_switch(v8, 0, 0);
}

uint64_t sub_100510D24()
{
  swift_release();
  uint64_t v1 = v0[41];
  uint64_t v2 = v0[37];
  uint64_t v4 = v0[25];
  uint64_t v3 = (void *)v0[26];
  sub_1000172F8(&qword_10065DBF0);
  uint64_t v5 = *(void *)(v4 + 72);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1005A3EC0;
  sub_1005133C0(v2, v7 + v6);
  type metadata accessor for AppInstallScheduler.ParkReason();
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  uint64_t v8 = v0[19];
  *uint64_t v3 = v1;
  v3[1] = v8;
  swift_storeEnumTagMultiPayload();
  unint64_t v10 = *(void *)(v7 + 16);
  unint64_t v9 = *(void *)(v7 + 24);
  if (v10 >= v9 >> 1) {
    unint64_t v7 = sub_100290F08(v9 > 1, v10 + 1, 1, v7);
  }
  uint64_t v11 = v0[37];
  uint64_t v12 = v0[26];
  uint64_t v13 = (unint64_t *)v0[22];
  *(void *)(v7 + 16) = v10 + 1;
  sub_1005134B4(v12, v7 + v6 + v10 * v5, (uint64_t (*)(void))type metadata accessor for AppInstallTaskResult);
  sub_1001C785C(v11);
  sub_100014524((uint64_t)(v0 + 10));
  *uint64_t v13 = v7;
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_100510F44()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10051102C()
{
  uint64_t v1 = *(void *)(v0 + 296);
  swift_release();
  sub_1001C785C(v1);
  sub_100014524(v0 + 80);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100511134(uint64_t a1)
{
  v2[20] = a1;
  v2[21] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[22] = v3;
  v2[23] = *(void *)(v3 - 8);
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  sub_1000172F8(&qword_10065C9B0);
  v2[27] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[28] = v4;
  v2[29] = *(void *)(v4 - 8);
  v2[30] = swift_task_alloc();
  v2[31] = swift_task_alloc();
  return _swift_task_switch(sub_1005112D8, 0, 0);
}

uint64_t sub_1005112D8()
{
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 216);
  *(_OWORD *)(v0 + 64) = *(_OWORD *)(*(void *)(v0 + 168) + 8);
  uint64_t v4 = *(os_unfair_lock_s **)(v0 + 72);
  swift_retain();
  sub_100311ADC(10, v4, v3);
  sub_100263CCC(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    uint64_t v5 = *(id **)(v0 + 168);
    sub_10001729C(*(void *)(v0 + 216), &qword_10065C9B0);
    static Logger.install.getter();
    sub_1004F7B98(v5);
    sub_1004F7B98(v5);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    unint64_t v9 = *(void ***)(v0 + 168);
    if (v8)
    {
      unint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v10 = 138412290;
      uint64_t v12 = *v9;
      *(void *)(v0 + 96) = *v9;
      id v13 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v11 = v12;
      sub_100513424(v9);
      sub_100513424(v9);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%@] Coordinator identifier was incorrect type or missing", v10, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100513424(*(void ***)(v0 + 168));
      sub_100513424(v9);
    }
    uint64_t v30 = *(void *)(v0 + 184);
    uint64_t v29 = *(void *)(v0 + 192);
    uint64_t v31 = *(void *)(v0 + 176);

    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
    type metadata accessor for InternalError();
    sub_10019FE50();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    goto LABEL_20;
  }
  uint64_t v14 = *(void **)(v0 + 248);
  (*(void (**)(void *, void, void))(*(void *)(v0 + 232) + 32))(v14, *(void *)(v0 + 216), *(void *)(v0 + 224));
  uint64_t v15 = sub_1004E6034(v14);
  if (!v15) {
    goto LABEL_15;
  }
  uint64_t v16 = v15;
  *(void *)(v0 + 112) = &OBJC_PROTOCOL___IXCoordinatorWithAppAssetPromise;
  uint64_t v17 = swift_dynamicCastObjCProtocolConditional();
  if (!v17)
  {

LABEL_15:
    uint64_t v32 = *(id **)(v0 + 168);
    static Logger.install.getter();
    sub_1004F7B98(v32);
    sub_1004F7B98(v32);
    os_log_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    BOOL v35 = os_log_type_enabled(v33, v34);
    uint64_t v36 = *(void ***)(v0 + 168);
    if (v35)
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v96 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 138412290;
      uint64_t v38 = *v36;
      *(void *)(v0 + 104) = *v36;
      id v39 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v96 = v38;
      sub_100513424(v36);
      sub_100513424(v36);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "[%@] Expected coordinator could not be found", v37, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100513424(*(void ***)(v0 + 168));
      sub_100513424(v36);
    }
    uint64_t v40 = *(void *)(v0 + 248);
    uint64_t v41 = *(void *)(v0 + 224);
    uint64_t v42 = *(void *)(v0 + 232);
    uint64_t v43 = *(void *)(v0 + 200);
    uint64_t v44 = *(void *)(v0 + 176);
    uint64_t v45 = *(void *)(v0 + 184);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);
    type metadata accessor for InternalError();
    sub_10019FE50();
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v46, v40, v41);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    goto LABEL_19;
  }
  unint64_t v18 = (void *)v17;
  id v19 = v16;
  uint64_t v95 = v19;
  if ([v18 hasAppAssetPromise])
  {
    *(void *)(v0 + 144) = &OBJC_PROTOCOL___IXCoordinatorWithAppAssetPromise;
    id v20 = v19;
    uint64_t result = swift_dynamicCastObjCProtocolConditional();
    if (!result)
    {
LABEL_42:
      __break(1u);
      return result;
    }
    id v22 = (void *)result;
    id v23 = v18;
    if ([v22 hasAppAssetPromise])
    {
      *(void *)(v0 + 152) = 0;
      id v24 = [v22 appAssetPromiseWithError:v0 + 152];
      uint64_t v25 = *(void **)(v0 + 152);
      if (v24)
      {
        id v26 = v24;
        id v27 = v25;

        self;
        unint64_t v28 = (void *)swift_dynamicCastObjCClass();

        if (v28) {
          goto LABEL_35;
        }
      }
      else
      {
        id v48 = v25;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRelease();
      }
    }
    else
    {
    }
  }
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(*(void *)(v0 + 168) + 24);
  uint64_t v49 = *(os_unfair_lock_s **)(v0 + 88);
  swift_retain();
  uint64_t v50 = sub_100313310(2, v49);
  char v52 = v51;
  sub_100263CCC(v0 + 80);
  if (v52) {
    uint64_t v50 = 0;
  }
  swift_retain();
  uint64_t v53 = sub_100313310(13, v49);
  char v55 = v54;
  sub_100263CCC(v0 + 80);
  if (v55) {
    uint64_t v53 = 0;
  }
  swift_retain();
  sub_100313148(4, v49, (void *)(v0 + 16));
  sub_100263CCC(v0 + 80);
  uint64_t v56 = (void *)sub_1005163F0();
  uint64_t v57 = sub_1004FB7DC(v0 + 16, 0);
  sub_100274568((uint64_t *)(v0 + 16));

  id v58 = objc_allocWithZone((Class)IXPromisedStreamingZipTransfer);
  NSString v59 = String._bridgeToObjectiveC()();
  sub_10023F3CC(v57);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v26 = [v58 initWithName:v59 client:28 streamingZipOptions:isa archiveSize:v50 diskSpaceNeeded:v53];

  if (!v26)
  {
    id v78 = *(id **)(v0 + 168);
    static Logger.install.getter();
    sub_1004F7B98(v78);
    sub_1004F7B98(v78);
    NSString v79 = Logger.logObject.getter();
    uint64_t v80 = static os_log_type_t.error.getter();
    BOOL v81 = os_log_type_enabled(v79, (os_log_type_t)v80);
    uint64_t v82 = *(void ***)(v0 + 168);
    if (v81)
    {
      uint64_t v83 = (uint8_t *)swift_slowAlloc();
      uint64_t v84 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v83 = 138412290;
      uint64_t v85 = *v82;
      *(void *)(v0 + 120) = *v82;
      id v86 = v85;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v84 = v85;
      sub_100513424(v82);
      sub_100513424(v82);
      _os_log_impl((void *)&_mh_execute_header, v79, (os_log_type_t)v80, "[%@] Configuring zip extractor failed", v83, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100513424(*(void ***)(v0 + 168));
      sub_100513424(v82);
    }
    uint64_t v40 = *(void *)(v0 + 248);
    uint64_t v41 = *(void *)(v0 + 224);
    uint64_t v42 = *(void *)(v0 + 232);
    uint64_t v91 = *(void *)(v0 + 208);
    uint64_t v93 = *(void *)(v0 + 176);
    uint64_t v92 = *(void *)(v0 + 184);

    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v91, v93);
    type metadata accessor for InternalError();
    sub_10019FE50();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

LABEL_19:
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v40, v41);
    goto LABEL_20;
  }
  *(void *)(v0 + 128) = &OBJC_PROTOCOL___IXCoordinatorWithAppAssetPromise;
  id v61 = v95;
  uint64_t result = swift_dynamicCastObjCProtocolConditional();
  if (!result)
  {
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v62 = (void *)result;
  *(void *)(v0 + 136) = 0;
  id v63 = v18;
  unsigned int v64 = [v62 setAppAssetPromise:v26 error:v0 + 136];
  unint64_t v65 = *(void **)(v0 + 136);
  if (v64)
  {
    id v66 = v65;

    unint64_t v28 = v26;
LABEL_35:
    id v67 = [v18 uniqueIdentifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v69 = *(void *)(v0 + 240);
    uint64_t v68 = *(void *)(v0 + 248);
    uint64_t v70 = *(void *)(v0 + 232);
    uint64_t v94 = *(void *)(v0 + 224);
    unint64_t v71 = *(void **)(v0 + 160);
    uint64_t v72 = **(void ***)(v0 + 168);
    uint64_t v73 = (objc_class *)type metadata accessor for StreamingExtractor();
    id v74 = objc_allocWithZone(v73);
    id v75 = v26;
    id v76 = v72;
    id v77 = sub_1003CA4C4(v69, v28, v76);

    v71[3] = v73;
    v71[4] = &off_1006449E8;

    *unint64_t v71 = v77;
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v68, v94);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v47 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_21;
  }
  uint64_t v87 = *(void *)(v0 + 248);
  uint64_t v88 = *(void *)(v0 + 224);
  uint64_t v89 = *(void *)(v0 + 232);
  id v90 = v65;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v87, v88);
LABEL_20:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v47 = *(uint64_t (**)(void))(v0 + 8);
LABEL_21:
  return v47();
}

uint64_t sub_100511DE8@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v203 = a2;
  v209 = a1;
  uint64_t v232 = type metadata accessor for Logger();
  uint64_t v211 = *(void *)(v232 - 8);
  uint64_t v3 = __chkstk_darwin(v232);
  v210 = (char *)&v166 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  v205 = (char *)&v166 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  v206 = (char *)&v166 - v8;
  __chkstk_darwin(v7);
  uint64_t v199 = (uint64_t)&v166 - v9;
  unint64_t v10 = (int *)type metadata accessor for DownloadRequest();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v166 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v166 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  id v19 = (char *)&v166 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v231[0] = *(_OWORD *)(v2 + 24);
  id v20 = (os_unfair_lock_s *)*((void *)&v231[0] + 1);
  swift_retain();
  sub_1003137C8(14, v20, (uint64_t)v15);
  sub_100263CCC((uint64_t)v231);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) != 1)
  {
    v207 = v20;
    v204 = v12;
    v201 = v19;
    uint64_t v202 = v17;
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    uint64_t v200 = v16;
    v29(v19, v15, v16);
    unsigned __int8 v228 = 1;
    __int16 v227 = 0;
    uint64_t v30 = (void **)v2;
    long long v230 = *(_OWORD *)(v2 + 8);
    uint64_t v31 = (os_unfair_lock_s *)*((void *)&v230 + 1);
    swift_retain();
    uint64_t v32 = sub_100312690(9, v31);
    unint64_t v34 = v33;
    sub_100263CCC((uint64_t)&v230);
    unint64_t v35 = 0xD000000000000021;
    if (v34) {
      unint64_t v35 = v32;
    }
    uint64_t v198 = v35;
    unint64_t v36 = 0x80000001005B8B20;
    if (v34) {
      unint64_t v36 = v34;
    }
    unint64_t v208 = v36;
    swift_retain();
    int v37 = sub_1003126A8(29, v31);
    sub_100263CCC((uint64_t)&v230);
    if (v37 == 5) {
      int v38 = 2;
    }
    else {
      int v38 = v37;
    }
    swift_retain();
    char v39 = sub_100313620(18, v31);
    sub_100263CCC((uint64_t)&v230);
    uint64_t v40 = 0;
    LODWORD(v194) = v38;
    if (v39)
    {
      v210 = 0;
      uint64_t v41 = v204;
      uint64_t v42 = v200;
      if (!(_BYTE)v38)
      {
        swift_retain();
        uint64_t v43 = sub_100312690(6, v31);
        uint64_t v45 = v44;
        sub_100263CCC((uint64_t)&v230);
        v210 = v45;
        if (v45) {
          uint64_t v40 = v43;
        }
        else {
          uint64_t v40 = 0;
        }
      }
    }
    else
    {
      v210 = 0;
      uint64_t v41 = v204;
      uint64_t v42 = v200;
    }
    uint64_t v197 = v40;
    swift_retain();
    char v47 = sub_100312B1C(32, v31);
    sub_100263CCC((uint64_t)&v230);
    if (!v47) {
      HIBYTE(v227) = 1;
    }
    swift_retain();
    unsigned int v48 = sub_1003134B0(23, v31);
    sub_100263CCC((uint64_t)&v230);
    v195 = v31;
    if (v48 == 2)
    {
      uint64_t v49 = 0;
    }
    else if (v48)
    {
      uint64_t v49 = (v48 >> 15) & 2 | 5;
    }
    else
    {
      uint64_t v49 = (v48 >> 15) & 2;
    }
    uint64_t v50 = v197;
    p_Class isa = (void **)&v209->isa;
    (*(void (**)(char *, char *, uint64_t))(v202 + 16))(&v41[v10[5]], v201, v42);
    sub_10019B17C((uint64_t)p_isa, (uint64_t)&v41[v10[7]]);
    uint64_t v52 = v230;
    unint64_t v53 = v10[9];
    v41[v53] = 0;
    v209 = v30;
    char v54 = *v30;
    char v55 = &v41[v10[10]];
    *(void *)char v55 = 0;
    v55[8] = 1;
    uint64_t v193 = v10[11];
    v41[v193] = 2;
    uint64_t v56 = &v41[v10[12]];
    *(void *)uint64_t v56 = 0;
    *((void *)v56 + 1) = 0;
    *((void *)v56 + 4) = 0;
    *((void *)v56 + 5) = 0;
    *((void *)v56 + 2) = 1;
    *((void *)v56 + 3) = 0;
    v188 = v56;
    uint64_t v57 = &v41[v10[13]];
    *((_OWORD *)v57 + 4) = 0u;
    v181 = v57 + 64;
    *(_OWORD *)uint64_t v57 = 0u;
    *((_OWORD *)v57 + 1) = 0u;
    *((_OWORD *)v57 + 2) = 0u;
    *((_OWORD *)v57 + 3) = 0u;
    *((void *)v57 + 10) = 0;
    *((void *)v57 + 11) = 0x8000000000000000;
    *((void *)v57 + 12) = 0;
    v187 = v57 + 96;
    *((void *)v57 + 13) = 0;
    id v58 = &v41[v10[14]];
    *(_OWORD *)id v58 = 0u;
    *((_OWORD *)v58 + 1) = 0u;
    *((_OWORD *)v58 + 2) = 0u;
    *((_OWORD *)v58 + 3) = 0u;
    v189 = v58;
    uint64_t v190 = v49;
    v41[v10[15]] = 6;
    NSString v59 = &v41[v10[16]];
    *(_OWORD *)NSString v59 = 0u;
    *((_OWORD *)v59 + 1) = 0u;
    os_log_t v192 = (os_log_t)v59;
    *((void *)v59 + 4) = 0;
    int v60 = (uint64_t *)&v41[v10[17]];
    uint64_t *v60 = 0;
    v60[1] = 0;
    v191 = v60;
    id v61 = &v41[v10[6]];
    *id v61 = 1;
    *((void *)v61 + 1) = v49;
    unint64_t v62 = v53;
    v61[16] = v47 == 0;
    v61[17] = 0;
    unint64_t v63 = v208;
    *((void *)v61 + 3) = v198;
    *((void *)v61 + 4) = v63;
    *((void *)v61 + 5) = v50;
    *((void *)v61 + 6) = v210;
    v61[56] = 1;
    *(void *)uint64_t v41 = v52;
    v41[v10[18]] = 0;
    *(void *)&v41[v10[8]] = v54;
    sub_100513488((uint64_t)v231);
    swift_bridgeObjectRetain();
    id v196 = v54;
    swift_bridgeObjectRetain();
    unsigned int v64 = v207;
    unint64_t v65 = sub_10050F028(0, v207);
    LOBYTE(v63) = v66;
    sub_100263CCC((uint64_t)v231);
    if ((v63 & 1) == 0)
    {
      unint64_t v186 = v62;
      uint64_t v67 = v199;
      static Logger.install.getter();
      uint64_t v68 = (id *)&v209->isa;
      sub_1004F7B98((id *)&v209->isa);
      sub_1004F7B98(v68);
      uint64_t v69 = Logger.logObject.getter();
      os_log_type_t v70 = static os_log_type_t.default.getter();
      LODWORD(v185) = v70;
      if (os_log_type_enabled(v69, v70))
      {
        uint64_t v71 = swift_slowAlloc();
        *((void *)&v184 + 1) = v65;
        uint64_t v72 = v71;
        uint64_t v73 = swift_slowAlloc();
        *(void *)&long long v184 = v69;
        id v74 = (void *)v73;
        *(_DWORD *)uint64_t v72 = 138412546;
        id v75 = v196;
        *(void *)&long long v215 = v196;
        unint64_t v182 = v72 + 4;
        uint64_t v183 = (uint64_t)&v215 + 8;
        id v76 = v196;
        uint64_t v41 = v204;
        unsigned int v64 = v207;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v74 = v75;
        sub_100513424(v68);
        sub_100513424(v68);
        *(_WORD *)(v72 + 12) = 2048;
        *(void *)&long long v215 = *((void *)&v184 + 1);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v69 = v184;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v184, (os_log_type_t)v185, "[%@] Expecting package data start at offset: %llu", (uint8_t *)v72, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        unint64_t v65 = (void *)*((void *)&v184 + 1);
        uint64_t v67 = v199;
        swift_slowDealloc();
      }
      else
      {
        sub_100513424(v68);
        sub_100513424(v68);
      }

      (*(void (**)(uint64_t, uint64_t))(v211 + 8))(v67, v232);
      *(void *)char v55 = v65;
      v55[8] = 0;
      unint64_t v62 = v186;
    }
    char v77 = v194;
    int v78 = v194;
    swift_retain();
    char v79 = sub_100312CE0(8, v64);
    sub_100263CCC((uint64_t)v231);
    v41[v62] = v79 & 1;
    if (!v78)
    {
      LOBYTE(v227) = 1;
      unsigned __int8 v228 = 0;
    }
    v41[v193] = v77;
    swift_retain();
    sub_100312814(6, v64, (uint64_t)&v215);
    sub_100263CCC((uint64_t)v231);
    unint64_t v80 = v223;
    unint64_t v81 = v224;
    if ((~v223 & 0x3000000000000000) == 0 && (v224 & 0xFFFFFFFFFFFFFFFELL) == 0x7FFFFFFE)
    {
LABEL_44:
      uint64_t v115 = v195;
      swift_retain();
      uint64_t v116 = sub_1003122C0(36, v115);
      uint64_t v118 = v117;
      char v120 = v119;
      int v121 = ~v119;
      sub_100263CCC((uint64_t)&v230);
      if (v121)
      {
        if (v120)
        {
          unint64_t v122 = &type metadata for WebDistributor;
          unint64_t v123 = sub_1002BEA38();
        }
        else
        {
          unint64_t v122 = &type metadata for NativeDistributor;
          unint64_t v123 = sub_1002F9EF8();
        }
        uint64_t v124 = (id *)&v209->isa;
        uint64_t v125 = v191;
        v213 = v122;
        unint64_t v214 = v123;
        *(void *)&long long v212 = v116;
        *((void *)&v212 + 1) = v118;
        sub_10018B164(&v212, (uint64_t)&v215);
      }
      else
      {
        uint64_t v217 = 0;
        long long v215 = 0u;
        long long v216 = 0u;
        uint64_t v124 = (id *)&v209->isa;
        uint64_t v125 = v191;
      }
      unint64_t v126 = v208;
      sub_10018AD2C((uint64_t)&v215, (uint64_t)v192, &qword_10065D3A0);
      swift_retain();
      uint64_t v127 = sub_100312690(37, v115);
      uint64_t v129 = v128;
      sub_100263CCC((uint64_t)&v230);
      swift_bridgeObjectRelease();
      *uint64_t v125 = v127;
      v125[1] = v129;
      v130 = v206;
      static Logger.install.getter();
      LODWORD(v195) = v228;
      int v131 = HIBYTE(v227);
      LODWORD(v199) = v227;
      sub_1004F7B98(v124);
      swift_bridgeObjectRetain();
      v132 = v210;
      swift_bridgeObjectRetain();
      sub_1004F7B98(v124);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v133 = Logger.logObject.getter();
      os_log_type_t v134 = static os_log_type_t.default.getter();
      int v135 = v134;
      if (os_log_type_enabled(v133, v134))
      {
        uint64_t v136 = swift_slowAlloc();
        uint64_t v137 = swift_slowAlloc();
        LODWORD(v191) = v131;
        v138 = (void *)v137;
        uint64_t v194 = swift_slowAlloc();
        *(void *)&long long v212 = v194;
        *(_DWORD *)uint64_t v136 = 138412546;
        LODWORD(v193) = v135;
        os_log_t v192 = v133;
        uint64_t v139 = v126;
        id v140 = v196;
        *(void *)&long long v215 = v196;
        id v141 = v196;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v138 = v140;
        sub_100513424((void **)&v209->isa);
        sub_100513424((void **)&v209->isa);
        *(_WORD *)(v136 + 12) = 2082;
        LOBYTE(v215) = (_BYTE)v195;
        *((void *)&v215 + 1) = v190;
        LOBYTE(v216) = (_BYTE)v191;
        BYTE1(v216) = v199;
        *((void *)&v216 + 1) = v198;
        uint64_t v217 = v139;
        uint64_t v218 = v197;
        uint64_t v219 = (uint64_t)v132;
        LOBYTE(v220) = 1;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v142 = String.init<A>(describing:)();
        *(void *)&long long v215 = sub_1000143F4(v142, v143, (uint64_t *)&v212);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        uint64_t v124 = (id *)&v209->isa;
        swift_bridgeObjectRelease();
        os_log_t v144 = v192;
        _os_log_impl((void *)&_mh_execute_header, v192, (os_log_type_t)v193, "[%@] Will download package using request: %{public}s", (uint8_t *)v136, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v145 = *(void (**)(char *, uint64_t))(v211 + 8);
        v145(v206, v232);
      }
      else
      {
        sub_100513424(v124);
        sub_100513424(v124);

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        v145 = *(void (**)(char *, uint64_t))(v211 + 8);
        v145(v130, v232);
      }
      v146 = v205;
      v147 = v207;
      swift_retain();
      uint64_t v148 = sub_100312998(15, v147);
      unint64_t v150 = v149;
      sub_100263CCC((uint64_t)v231);
      if (v150) {
        unint64_t v151 = v150;
      }
      else {
        unint64_t v151 = 0xE90000000000006CLL;
      }
      static Logger.install.getter();
      sub_1004F7B98(v124);
      sub_1004F7B98(v124);
      sub_1004F7B98(v124);
      sub_1004F7B98(v124);
      swift_bridgeObjectRetain();
      v152 = Logger.logObject.getter();
      int v153 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v152, (os_log_type_t)v153))
      {
        sub_100513424(v124);

        sub_100513424(v124);
        swift_bridgeObjectRelease_n();
        sub_100513424(v124);
        sub_100513424(v124);
        v145(v146, v232);
        (*(void (**)(char *, uint64_t))(v202 + 8))(v201, v200);
LABEL_68:
        sub_1005134B4((uint64_t)v204, v203, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      v195 = (os_unfair_lock_s *)v152;
      LODWORD(v199) = v153;
      v206 = (char *)v145;
      uint64_t v154 = 0x6173726576696E55;
      if (v150) {
        uint64_t v154 = v148;
      }
      uint64_t v198 = v154;
      uint64_t v155 = swift_slowAlloc();
      v156 = (void *)swift_slowAlloc();
      uint64_t v197 = swift_slowAlloc();
      *(void *)&long long v215 = v197;
      *(_DWORD *)uint64_t v155 = 138412802;
      v157 = v124;
      id v158 = v196;
      *(void *)&long long v212 = v196;
      id v159 = v196;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v156 = v158;
      sub_100513424(v124);
      sub_100513424(v124);
      *(_WORD *)(v155 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)&long long v212 = sub_1000143F4(v198, v151, (uint64_t *)&v215);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v155 + 22) = 1024;
      v160 = v207;
      swift_retain();
      char v161 = sub_100312CB4(12, v160);
      sub_100263CCC((uint64_t)v231);
      if (v161 == 2)
      {
        sub_100513424(v124);
        uint64_t v162 = v200;
        v163 = v195;
      }
      else
      {
        if (v161)
        {
          swift_bridgeObjectRelease();
          v157 = (void **)&v209->isa;
          sub_100513424((void **)&v209->isa);
          int v164 = 1;
          uint64_t v162 = v200;
          v163 = v195;
          goto LABEL_67;
        }
        char v165 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v157 = (void **)&v209->isa;
        sub_100513424((void **)&v209->isa);
        uint64_t v162 = v200;
        v163 = v195;
        if (v165)
        {
          int v164 = 1;
          goto LABEL_67;
        }
      }
      int v164 = 0;
LABEL_67:
      LODWORD(v212) = v164;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100513424(v157);
      _os_log_impl((void *)&_mh_execute_header, v163, (os_log_type_t)v199, "[%@] Downloading package with variant: %{public}s, isDelta: %{BOOL}d", (uint8_t *)v155, 0x1Cu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      ((void (*)(char *, uint64_t))v206)(v205, v232);
      (*(void (**)(char *, uint64_t))(v202 + 8))(v201, v162);
      goto LABEL_68;
    }
    uint64_t v199 = v218;
    uint64_t v193 = v219;
    uint64_t v194 = v220;
    uint64_t v185 = v226;
    unint64_t v186 = v222;
    unint64_t v182 = *((void *)&v216 + 1);
    uint64_t v183 = v217;
    long long v184 = v215;
    if (v224 >> 62)
    {
      uint64_t v180 = v225;
      v181 = v221;
      if (v224 >> 62 != 1)
      {
        uint64_t v100 = v216;
        sub_10033CB6C(*(void *)v57, *((void *)v57 + 1), *((void *)v57 + 2), *((void *)v57 + 3), *((void *)v57 + 4), *((void *)v57 + 5), *((void *)v57 + 6), *((void *)v57 + 7), *((void *)v57 + 8), *((void *)v57 + 9), *((void *)v57 + 10), *((void *)v57 + 11));
        *((_OWORD *)v57 + 3) = 0u;
        *((_OWORD *)v57 + 4) = 0u;
        *((_OWORD *)v57 + 1) = 0u;
        *((_OWORD *)v57 + 2) = 0u;
        *(_OWORD *)uint64_t v57 = 0u;
        *((void *)v57 + 10) = 0;
        *((void *)v57 + 11) = 0x8000000000000000;
        uint64_t v98 = v100;
        uint64_t v101 = v187;
        uint64_t v102 = (uint64_t)v188;
        void *v187 = 0;
        v101[1] = 0;
        uint64_t v103 = (uint64_t)v189;
        uint64_t v95 = (uint64_t)v181;
LABEL_43:
        swift_retain();
        sub_100313148(1, v64, v229);
        sub_100263CCC((uint64_t)v231);
        sub_10018AD2C((uint64_t)v229, v102, &qword_10065D400);
        swift_retain();
        sub_10031333C(11, v64, &v215);
        sub_10028E734(v184, *((unint64_t *)&v184 + 1), v98, v182, v183, v199, v193, v194, v95, v186, v80, v81);
        sub_100263CCC((uint64_t)v231);
        sub_10018AD2C((uint64_t)&v215, v103, &qword_1006666D0);
        goto LABEL_44;
      }
      v187 = (void *)(v224 & 1 | 0x4000000000000000);
      unint64_t v177 = *(void *)v57;
      uint64_t v178 = v217 & 1;
      unint64_t v82 = *((void *)v57 + 1);
      unint64_t v175 = *((void *)v57 + 2);
      unint64_t v176 = v82;
      unint64_t v83 = *((void *)v57 + 3);
      uint64_t v173 = *((void *)v57 + 4);
      unint64_t v174 = v83;
      uint64_t v84 = *((void *)v57 + 5);
      uint64_t v171 = *((void *)v57 + 6);
      uint64_t v172 = v84;
      *(void *)&long long v170 = *((void *)v57 + 7);
      long long v85 = *((_OWORD *)v57 + 4);
      long long v168 = *((_OWORD *)v57 + 5);
      long long v169 = v85;
      uint64_t v167 = *((void *)v57 + 12);
      uint64_t v86 = *((void *)&v216 + 1);
      uint64_t v179 = v216;
      sub_100012670(v216, *((unint64_t *)&v216 + 1));
      uint64_t v87 = v193;
      swift_bridgeObjectRetain();
      unint64_t v88 = v186;
      sub_100012670(v186, v80);
      uint64_t v89 = v185;
      swift_bridgeObjectRetain();
      unsigned int v64 = v207;
      sub_10033CB6C(v177, v176, v175, v174, v173, v172, v171, v170, v169, *((uint64_t *)&v169 + 1), v168, *((unint64_t *)&v168 + 1));
      uint64_t v90 = *((void *)&v184 + 1);
      *(void *)uint64_t v57 = v184;
      *((void *)v57 + 1) = v90;
      uint64_t v92 = v178;
      uint64_t v91 = v179;
      *((void *)v57 + 2) = v179;
      *((void *)v57 + 3) = v86;
      uint64_t v93 = v199;
      *((void *)v57 + 4) = v92;
      *((void *)v57 + 5) = v93;
      uint64_t v94 = v194;
      *((void *)v57 + 6) = v87;
      *((void *)v57 + 7) = v94;
      uint64_t v96 = v180;
      uint64_t v95 = (uint64_t)v181;
      *((void *)v57 + 8) = v181;
      *((void *)v57 + 9) = v88;
      uint64_t v97 = v187;
      *((void *)v57 + 10) = v80;
      *((void *)v57 + 11) = v97;
      *((void *)v57 + 12) = v96;
      *((void *)v57 + 13) = v89;
      uint64_t v98 = v91;
    }
    else
    {
      uint64_t v179 = v216;
      if (v217 == 1)
      {
        uint64_t v95 = (uint64_t)v221;
        sub_10033CB6C(*(void *)v57, *((void *)v57 + 1), *((void *)v57 + 2), *((void *)v57 + 3), *((void *)v57 + 4), *((void *)v57 + 5), *((void *)v57 + 6), *((void *)v57 + 7), *((void *)v57 + 8), *((void *)v57 + 9), *((void *)v57 + 10), *((void *)v57 + 11));
        *((_OWORD *)v57 + 3) = 0u;
        *((_OWORD *)v57 + 4) = 0u;
        *((_OWORD *)v57 + 1) = 0u;
        *((_OWORD *)v57 + 2) = 0u;
        *(_OWORD *)uint64_t v57 = 0u;
        *((void *)v57 + 10) = 0;
        *((void *)v57 + 11) = 0x8000000000000000;
        uint64_t v98 = v179;
        long long v99 = v187;
        void *v187 = 0;
        v99[1] = 0;
      }
      else
      {
        uint64_t v180 = v216 & 1;
        v187 = (void *)(v219 & 1);
        uint64_t v104 = *(void *)v57;
        unint64_t v177 = *((void *)v57 + 1);
        uint64_t v178 = v104;
        unint64_t v105 = *((void *)v57 + 2);
        unint64_t v175 = *((void *)v57 + 3);
        unint64_t v176 = v105;
        unint64_t v106 = *((void *)v57 + 4);
        uint64_t v173 = *((void *)v57 + 5);
        unint64_t v174 = v106;
        uint64_t v107 = *((void *)v57 + 6);
        uint64_t v171 = *((void *)v57 + 7);
        uint64_t v172 = v107;
        long long v108 = *((_OWORD *)v57 + 4);
        long long v169 = *((_OWORD *)v57 + 5);
        long long v170 = v108;
        uint64_t v109 = *((void *)v57 + 12);
        uint64_t v167 = *((void *)v57 + 13);
        *(void *)&long long v168 = v109;
        long long v110 = v215;
        uint64_t v95 = (uint64_t)v221;
        sub_100012670(v215, *((unint64_t *)&v215 + 1));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unsigned int v64 = v207;
        sub_10033CB6C(v178, v177, v176, v175, v174, v173, v172, v171, v170, *((uint64_t *)&v170 + 1), v169, *((unint64_t *)&v169 + 1));
        *(_OWORD *)uint64_t v57 = v110;
        unint64_t v111 = v182;
        *((void *)v57 + 2) = v180;
        *((void *)v57 + 3) = v111;
        uint64_t v112 = v199;
        *((void *)v57 + 4) = v183;
        *((void *)v57 + 5) = v112;
        uint64_t v113 = v194;
        *((void *)v57 + 6) = v187;
        *((void *)v57 + 7) = v113;
        uint64_t v98 = v179;
        uint64_t v114 = v181;
        _OWORD *v181 = 0u;
        v114[1] = 0u;
        v114[2] = 0u;
      }
    }
    uint64_t v102 = (uint64_t)v188;
    uint64_t v103 = (uint64_t)v189;
    goto LABEL_43;
  }
  sub_10001729C((uint64_t)v15, &qword_10065C3C0);
  uint64_t v21 = v210;
  static Logger.install.getter();
  id v22 = (void **)v2;
  sub_1004F7B98((id *)v2);
  sub_1004F7B98((id *)v2);
  sub_1004F7B98((id *)v2);
  sub_1004F7B98((id *)v2);
  id v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = swift_slowAlloc();
    id v26 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 138412546;
    *(void *)&long long v215 = *v22;
    uint64_t v27 = v215;
    v209 = v23;
    id v28 = (id)v215;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v26 = v27;
    sub_100513424(v22);
    sub_100513424(v22);
    *(_WORD *)(v25 + 12) = 2050;
    sub_100513424(v22);
    *(void *)&long long v215 = *(void *)&v231[0];
    id v23 = v209;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100513424(v22);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v21 = v210;
    swift_slowDealloc();
  }
  else
  {
    sub_100513424(v22);
    sub_100513424(v22);
    sub_100513424(v22);
    sub_100513424(v22);
  }

  (*(void (**)(char *, uint64_t))(v211 + 8))(v21, v232);
  type metadata accessor for InternalError();
  sub_10019FE50();
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

double sub_10051336C@<D0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  sub_10051355C(a1, a2, a3, a4, v8);
  long long v6 = v8[1];
  *(_OWORD *)a5 = v8[0];
  *(_OWORD *)(a5 + 16) = v6;
  double result = *(double *)&v9;
  *(_OWORD *)(a5 + 32) = v9;
  *(void *)(a5 + 48) = v10;
  return result;
}

uint64_t sub_1005133C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DownloadRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void **sub_100513424(void **a1)
{
  uint64_t v2 = *a1;
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return a1;
}

uint64_t sub_100513488(uint64_t a1)
{
  return a1;
}

uint64_t sub_1005134B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10051351C()
{
  if (*(void *)(v0 + 40)) {
    sub_100014524(v0 + 16);
  }

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10051355C@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  id v9 = a4;
  id v10 = sub_100249BF4(a1);
  uint64_t v12 = v11;
  uint64_t result = sub_10041CE88(a2, (uint64_t)[a1 persistentID]);
  if (v14)
  {
    uint64_t v15 = result;
    uint64_t v16 = v14;

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v17 = *(void *)(*(void *)(a3 + 240) + 16);
    uint64_t v18 = *(void *)(a3 + 192);
    swift_retain();
    swift_retain();
    swift_release();
    uint64_t v19 = *(void *)(v18 + 152);
    swift_retain();
    uint64_t result = swift_release();
    *a5 = v9;
    a5[1] = v10;
    a5[2] = v12;
    a5[3] = v15;
    a5[4] = v16;
    a5[5] = v17;
    a5[6] = v19;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100513654()
{
  return sub_100510B64();
}

void sub_1005136C8(uint64_t a1, void *a2, void *a3)
{
}

void sub_1005136D4(uint64_t a1, void *a2, void *a3)
{
}

id sub_1005136E0()
{
  qword_10068DAB8 = AMSAccountMediaTypeProduction;
  return AMSAccountMediaTypeProduction;
}

void *sub_1005136F8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_20;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v6 = 4;
    while (1)
    {
      id v7 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v6);
      uint64_t v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      id v10 = [v7 personaIdentifier];
      if (v10)
      {
        uint64_t v11 = v10;
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v14 = v13;

        if (v12 == a2 && v14 == a3)
        {
          swift_bridgeObjectRelease();
LABEL_18:
          swift_bridgeObjectRelease();
          return v8;
        }
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v16) {
          goto LABEL_18;
        }
      }

      ++v6;
      if (v9 == v5) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_21:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_10051388C(uint64_t a1, uint64_t a2)
{
  v2[49] = a1;
  v2[50] = a2;
  uint64_t v3 = type metadata accessor for NSFastEnumerationIterator();
  v2[51] = v3;
  v2[52] = *(void *)(v3 - 8);
  v2[53] = swift_task_alloc();
  uint64_t v4 = sub_1000172F8(&qword_100662860);
  v2[54] = v4;
  v2[55] = *(void *)(v4 - 8);
  v2[56] = swift_task_alloc();
  uint64_t v5 = sub_1000172F8(&qword_1006666E0);
  v2[57] = v5;
  v2[58] = *(void *)(v5 - 8);
  v2[59] = swift_task_alloc();
  return _swift_task_switch(sub_100513A0C, 0, 0);
}

uint64_t sub_100513A0C()
{
  uint64_t v1 = v0[50];
  id v2 = objc_msgSend(self, "ams_sharedAccountStore");
  uint64_t v3 = v2;
  v0[60] = v2;
  if (v1)
  {
    if (v1 == 1)
    {
      if (qword_10065B148 != -1) {
        swift_once();
      }
      uint64_t v4 = v0 + 10;
      uint64_t v5 = v0 + 18;
      uint64_t v7 = v0[58];
      uint64_t v6 = v0[59];
      uint64_t v8 = v0[57];
      id v9 = objc_msgSend(v3, "ams_activeiTunesAccountForMediaType:", qword_10068DAB8);
      v0[61] = v9;
      v0[10] = v0;
      v0[15] = v0 + 46;
      v0[11] = sub_100513E24;
      swift_continuation_init();
      v0[25] = v8;
      id v10 = sub_10019CE94(v0 + 22);
      sub_10018B1DC(0, (unint64_t *)&qword_10065E848);
      sub_1000172F8(&qword_10065B260);
      CheckedContinuation.init(continuation:function:)();
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 32))(v10, v6, v8);
      v0[18] = _NSConcreteStackBlock;
      v0[19] = 1107296256;
      v0[20] = sub_1005136D4;
      v0[21] = &unk_10064B608;
    }
    else
    {
      if (qword_10065B148 != -1) {
        swift_once();
      }
      uint64_t v4 = v0 + 2;
      uint64_t v5 = v0 + 26;
      uint64_t v14 = v0[55];
      uint64_t v13 = v0[56];
      uint64_t v15 = v0[54];
      id v9 = objc_msgSend(v3, "ams_iTunesAccountsForMediaType:", qword_10068DAB8);
      v0[63] = v9;
      v0[2] = v0;
      v0[7] = v0 + 47;
      v0[3] = sub_100513FCC;
      swift_continuation_init();
      v0[33] = v15;
      char v16 = sub_10019CE94(v0 + 30);
      sub_10018B1DC(0, &qword_100662868);
      sub_1000172F8(&qword_10065B260);
      CheckedContinuation.init(continuation:function:)();
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 32))(v16, v13, v15);
      v0[26] = _NSConcreteStackBlock;
      v0[27] = 1107296256;
      v0[28] = sub_1005136C8;
      v0[29] = &unk_10064B5E0;
    }
    [v9 resultWithCompletion:v5];
    return _swift_continuation_await(v4);
  }
  else
  {

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11(0);
  }
}

uint64_t sub_100513E24()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 496) = v1;
  if (v1) {
    id v2 = sub_10051432C;
  }
  else {
    id v2 = sub_100513F34;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100513F34()
{
  uint64_t v1 = *(void **)(v0 + 488);

  uint64_t v2 = *(void *)(v0 + 368);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_100513FCC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 512) = v1;
  if (v1) {
    uint64_t v2 = sub_1005143C4;
  }
  else {
    uint64_t v2 = sub_1005140DC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1005140DC()
{
  id v1 = *(id *)(v0 + 376);
  NSArray.makeIterator()();

  sub_100514464();
  dispatch thunk of IteratorProtocol.next()();
  if (*(void *)(v0 + 328))
  {
    uint64_t v2 = (void *)(v0 + 384);
    do
    {
      sub_1001C5DD4((_OWORD *)(v0 + 304), (_OWORD *)(v0 + 272));
      sub_1000144C8(v0 + 272, v0 + 336);
      sub_10018B1DC(0, (unint64_t *)&qword_10065E848);
      if ((swift_dynamicCast() & 1) == 0) {
        *uint64_t v2 = 0;
      }
      sub_100014524(v0 + 272);
      if (*v2)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      dispatch thunk of IteratorProtocol.next()();
    }
    while (*(void *)(v0 + 328));
  }
  uint64_t v3 = *(void **)(v0 + 504);
  uint64_t v4 = *(void **)(v0 + 480);
  unint64_t v5 = *(void *)(v0 + 400);
  uint64_t v6 = *(void *)(v0 + 392);
  (*(void (**)(void, void))(*(void *)(v0 + 416) + 8))(*(void *)(v0 + 424), *(void *)(v0 + 408));

  sub_1001C5E20(v6, v5);
  uint64_t v7 = sub_1005136F8((unint64_t)_swiftEmptyArrayStorage, v6, v5);
  sub_1001C5E34(v6, v5);

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void *))(v0 + 8);
  return v8(v7);
}

uint64_t sub_10051432C()
{
  id v1 = (void *)v0[61];
  uint64_t v2 = (void *)v0[60];
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1005143C4()
{
  id v1 = (void *)v0[63];
  uint64_t v2 = (void *)v0[60];
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10051445C(uint64_t a1)
{
  return sub_100014524(a1 + 32);
}

unint64_t sub_100514464()
{
  unint64_t result = qword_100662870;
  if (!qword_100662870)
  {
    type metadata accessor for NSFastEnumerationIterator();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100662870);
  }
  return result;
}

uint64_t sub_1005144C4(uint64_t a1, char a2)
{
  *(unsigned char *)(v2 + 552) = a2;
  *(void *)(v2 + 384) = a1;
  uint64_t v3 = type metadata accessor for Logger();
  *(void *)(v2 + 392) = v3;
  *(void *)(v2 + 400) = *(void *)(v3 - 8);
  *(void *)(v2 + 408) = swift_task_alloc();
  *(void *)(v2 + 416) = swift_task_alloc();
  *(void *)(v2 + 424) = swift_task_alloc();
  *(void *)(v2 + 432) = swift_task_alloc();
  *(void *)(v2 + 440) = swift_task_alloc();
  *(void *)(v2 + 448) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for LogKey.Prefix();
  *(void *)(v2 + 456) = v4;
  *(void *)(v2 + 464) = *(void *)(v4 - 8);
  *(void *)(v2 + 472) = swift_task_alloc();
  return _swift_task_switch(sub_100514624, 0, 0);
}

uint64_t sub_100514624()
{
  uint64_t v90 = v0;
  (*(void (**)(void, void, void))(*(void *)(v0 + 464) + 104))(*(void *)(v0 + 472), enum case for LogKey.Prefix.migrator(_:), *(void *)(v0 + 456));
  id v1 = objc_allocWithZone((Class)type metadata accessor for LogKey());
  uint64_t v2 = (void *)LogKey.init(prefix:)();
  *(void *)(v0 + 480) = v2;
  static Logger.daemon.getter();
  id v3 = v2;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412290;
    *(void *)(v0 + 376) = v3;
    id v8 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v3;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%@] Starting migrator", v6, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v9 = *(void *)(v0 + 448);
  uint64_t v10 = *(void *)(v0 + 392);
  uint64_t v11 = *(void *)(v0 + 400);
  uint64_t v12 = *(void *)(v0 + 384);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  *(void *)(v0 + 488) = v13;
  *(void *)(v0 + 496) = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v13(v9, v10);
  uint64_t v14 = *(void *)(v12 + 56);
  *(void *)(v0 + 504) = v14;
  unint64_t v15 = *(void *)(v12 + 64);
  *(void *)(v0 + 512) = v15;
  char v16 = self;
  *(void *)(v0 + 520) = v16;
  swift_bridgeObjectRetain();
  id v17 = [v16 standardUserDefaults];
  uint64_t v84 = v14;
  if (v17
    && (uint64_t v18 = v17,
        NSString v19 = String._bridgeToObjectiveC()(),
        id v20 = [v18 stringForKey:v19],
        v19,
        v18,
        v20))
  {
    char v21 = *(unsigned char *)(v0 + 552);
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v24 = v23;

    if (v21 & 1) == 0 && (v14 == v22 && v15 == v24 || (_stringCompareWithSmolCheck(_:_:expecting:)()))
    {
      swift_bridgeObjectRelease();
      static Logger.daemon.getter();
      id v25 = v3;
      swift_bridgeObjectRetain();
      id v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      BOOL v28 = os_log_type_enabled(v26, v27);
      uint64_t v29 = *(void *)(v0 + 440);
      uint64_t v30 = *(void *)(v0 + 392);
      if (v28)
      {
        uint64_t v31 = swift_slowAlloc();
        uint64_t v88 = v30;
        log = v26;
        uint64_t v32 = (void *)swift_slowAlloc();
        uint64_t v89 = swift_slowAlloc();
        *(_DWORD *)uint64_t v31 = 138412546;
        *(void *)(v0 + 360) = v25;
        id v33 = v25;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v32 = v25;

        *(_WORD *)(v31 + 12) = 2080;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 368) = sub_1000143F4(v14, v15, &v89);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, log, v27, "[%@] Migration not needed for '%s'", (uint8_t *)v31, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v13(v29, v88);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        v13(v29, v30);
      }
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      id v75 = *(uint64_t (**)(void))(v0 + 8);
      return v75();
    }
  }
  else
  {
    uint64_t v22 = 0;
    unint64_t v24 = 0;
  }
  uint64_t v82 = v22;
  unint64_t v34 = v3;
  unint64_t v35 = (void *)(v0 + 208);
  static Logger.daemon.getter();
  swift_bridgeObjectRetain();
  id v36 = v34;
  swift_bridgeObjectRetain_n();
  id v37 = v36;
  int v38 = Logger.logObject.getter();
  os_log_type_t type = static os_log_type_t.default.getter();
  BOOL v39 = os_log_type_enabled(v38, type);
  uint64_t v40 = *(void *)(v0 + 432);
  uint64_t v41 = *(void *)(v0 + 392);
  if (v39)
  {
    uint64_t v79 = *(void *)(v0 + 392);
    uint64_t v42 = swift_slowAlloc();
    id v76 = (void *)swift_slowAlloc();
    uint64_t v89 = swift_slowAlloc();
    *(_DWORD *)uint64_t v42 = 138412802;
    char v77 = v38;
    uint64_t v78 = v40;
    *(void *)(v0 + 336) = v37;
    id v43 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v76 = v37;

    *(_WORD *)(v42 + 12) = 2080;
    if (v24) {
      uint64_t v44 = v82;
    }
    else {
      uint64_t v44 = 0;
    }
    if (v24) {
      unint64_t v45 = v24;
    }
    else {
      unint64_t v45 = 0xE000000000000000;
    }
    swift_bridgeObjectRetain();
    *(void *)(v0 + 344) = sub_1000143F4(v44, v45, &v89);
    uint64_t v46 = v0 + 248;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v42 + 22) = 2080;
    unint64_t v35 = (void *)(v0 + 208);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 352) = sub_1000143F4(v84, v15, &v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v77, type, "[%@] Migrating from '%s' to '%s'", (uint8_t *)v42, 0x20u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v13(v78, v79);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    v13(v40, v41);
    uint64_t v46 = v0 + 248;
  }
  *(void *)(v0 + 528) = v37;
  uint64_t v47 = *(void *)(v0 + 384);
  *(_OWORD *)(v0 + 32) = xmmword_1005A3FC0;
  *(void *)(v0 + 72) = &type metadata for CleanupOnMigrationTask;
  *(void *)(v0 + 80) = &off_100642F58;
  unsigned int v48 = (void *)swift_allocObject();
  *(void *)(v0 + 48) = v48;
  v48[2] = v47;
  v48[3] = v37;
  void v48[4] = 0xD000000000000019;
  v48[5] = 0x80000001005C1320;
  *(void *)(v0 + 112) = &type metadata for AppStoreInstallSheetConsistencyTask;
  *(void *)(v0 + 120) = &off_10063A9C0;
  uint64_t v49 = (void *)swift_allocObject();
  *(void *)(v0 + 88) = v49;
  _OWORD v49[2] = v47;
  v49[3] = v37;
  v49[4] = 0xD000000000000028;
  v49[5] = 0x80000001005C1340;
  *(void *)(v0 + 152) = &type metadata for MigrateMarketplacePriorityListTask;
  *(void *)(v0 + 160) = &off_10064AED0;
  uint64_t v50 = (void *)swift_allocObject();
  *(void *)(v0 + 128) = v50;
  v50[2] = v37;
  v50[3] = 0xD000000000000026;
  v50[4] = 0x80000001005C1370;
  v50[5] = 0xD000000000000023;
  v50[6] = 0x80000001005B7F60;
  *(void *)(v0 + 192) = &type metadata for SetDistributorMetadataTask;
  *(void *)(v0 + 200) = &off_1006406E8;
  *(void *)(v0 + 168) = v37;
  *(void *)(v0 + 176) = 0xD00000000000001DLL;
  *(void *)(v0 + 184) = 0x80000001005C13A0;
  *(void *)(v0 + 536) = 0;
  char v51 = *(void **)(v0 + 480);
  id v52 = v37;
  swift_retain_n();
  id v53 = v52;
  sub_10019B17C(v0 + 48, (uint64_t)v35);
  static Logger.daemon.getter();
  sub_10019B17C((uint64_t)v35, v46);
  id v54 = v51;
  char v55 = Logger.logObject.getter();
  uint64_t v56 = (void *)v46;
  os_log_type_t v57 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, v57))
  {
    uint64_t v58 = *(void *)(v0 + 528);
    uint64_t v59 = *(void *)(v0 + 480);
    uint64_t v86 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
    uint64_t v83 = *(void *)(v0 + 392);
    uint64_t v85 = *(void *)(v0 + 424);
    uint64_t v60 = swift_slowAlloc();
    id v61 = (void *)swift_slowAlloc();
    uint64_t v89 = swift_slowAlloc();
    *(_DWORD *)uint64_t v60 = 138412546;
    *(void *)(v60 + 4) = v59;
    *id v61 = v58;
    *(_WORD *)(v60 + 12) = 2082;
    unint64_t v62 = v35;
    uint64_t v64 = *(void *)(v0 + 272);
    uint64_t v63 = *(void *)(v0 + 280);
    sub_10018AC60(v56, v64);
    uint64_t v65 = v64;
    unint64_t v35 = v62;
    uint64_t v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 8))(v65, v63);
    *(void *)(v60 + 14) = sub_1000143F4(v66, v67, &v89);
    swift_bridgeObjectRelease();
    sub_100014524((uint64_t)v56);
    _os_log_impl((void *)&_mh_execute_header, v55, v57, "[%@] Running %{public}s", (uint8_t *)v60, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v86(v85, v83);
  }
  else
  {
    uint64_t v68 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
    uint64_t v69 = *(void *)(v0 + 424);
    uint64_t v70 = *(void *)(v0 + 392);

    sub_100014524((uint64_t)v56);
    v68(v69, v70);
  }
  uint64_t v71 = *(void *)(v0 + 232);
  uint64_t v72 = *(void *)(v0 + 240);
  sub_10018AC60(v35, v71);
  uint64_t v87 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v72 + 16) + **(int **)(v72 + 16));
  uint64_t v73 = (void *)swift_task_alloc();
  *(void *)(v0 + 544) = v73;
  *uint64_t v73 = v0;
  v73[1] = sub_100515254;
  return v87(v71, v72);
}

uint64_t sub_100515254()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100515350, 0, 0);
}

uint64_t sub_100515350()
{
  uint64_t v69 = v0;
  uint64_t v1 = (void *)(v0 + 208);
  uint64_t v2 = *(void **)(v0 + 480);
  static Logger.daemon.getter();
  sub_10019B17C(v0 + 208, v0 + 288);
  id v3 = v2;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void *)(v0 + 528);
    uint64_t v7 = *(void **)(v0 + 480);
    uint64_t v63 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
    uint64_t v60 = *(void *)(v0 + 392);
    uint64_t v61 = *(void *)(v0 + 416);
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    uint64_t v68 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412546;
    *(void *)(v8 + 4) = v7;
    *uint64_t v9 = v6;

    *(_WORD *)(v8 + 12) = 2082;
    uint64_t v11 = *(void *)(v0 + 312);
    uint64_t v10 = *(void *)(v0 + 320);
    sub_10018AC60((void *)(v0 + 288), v11);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v11, v10);
    *(void *)(v8 + 14) = sub_1000143F4(v12, v13, &v68);
    swift_bridgeObjectRelease();
    sub_100014524(v0 + 288);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%@] %{public}s complete", (uint8_t *)v8, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    uint64_t v1 = (void *)(v0 + 208);
    swift_slowDealloc();
    swift_slowDealloc();

    v63(v61, v60);
  }
  else
  {
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
    unint64_t v15 = *(void **)(v0 + 480);
    uint64_t v16 = *(void *)(v0 + 416);
    uint64_t v17 = *(void *)(v0 + 392);

    sub_100014524(v0 + 288);
    v14(v16, v17);
  }
  uint64_t v18 = *(void *)(v0 + 536);
  sub_100014524((uint64_t)v1);
  if (v18 == 3)
  {
    NSString v19 = *(void **)(v0 + 520);
    sub_1000172F8(&qword_1006666F0);
    swift_arrayDestroy();
    id v20 = [v19 standardUserDefaults];
    if (v20)
    {
      char v21 = v20;
      NSString v22 = String._bridgeToObjectiveC()();
      NSString v23 = String._bridgeToObjectiveC()();
      [v21 setObject:v22 forKey:v23];
    }
    swift_bridgeObjectRelease();
    uint64_t v47 = *(void **)(v0 + 480);
    static Logger.daemon.getter();
    id v48 = v47;
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v67 = *(void *)(v0 + 528);
      char v51 = *(void **)(v0 + 480);
      id v52 = (uint8_t *)swift_slowAlloc();
      id v53 = (void *)swift_slowAlloc();
      *(_DWORD *)id v52 = 138412290;
      *(void *)(v0 + 328) = v51;
      id v54 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v53 = v67;

      _os_log_impl((void *)&_mh_execute_header, v49, v50, "[%@] Migrator complete", v52, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      char v55 = *(NSObject **)(v0 + 480);
    }
    else
    {

      char v55 = *(NSObject **)(v0 + 480);
      uint64_t v49 = v55;
    }
    uint64_t v56 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
    uint64_t v57 = *(void *)(v0 + 408);
    uint64_t v58 = *(void *)(v0 + 392);

    v56(v57, v58);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v59 = *(uint64_t (**)(void))(v0 + 8);
    return v59();
  }
  else
  {
    uint64_t v24 = *(void *)(v0 + 536) + 1;
    *(void *)(v0 + 536) = v24;
    id v25 = *(void **)(v0 + 480);
    sub_10019B17C(v0 + 40 * v24 + 48, (uint64_t)v1);
    static Logger.daemon.getter();
    sub_10019B17C((uint64_t)v1, v0 + 248);
    id v26 = v25;
    os_log_type_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = *(void *)(v0 + 528);
      uint64_t v30 = *(void *)(v0 + 480);
      uint64_t v65 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
      uint64_t v62 = *(void *)(v0 + 392);
      uint64_t v64 = *(void *)(v0 + 424);
      uint64_t v31 = swift_slowAlloc();
      uint64_t v32 = (void *)swift_slowAlloc();
      uint64_t v68 = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 138412546;
      *(void *)(v31 + 4) = v30;
      *uint64_t v32 = v29;
      *(_WORD *)(v31 + 12) = 2082;
      id v33 = v1;
      uint64_t v34 = *(void *)(v0 + 272);
      uint64_t v35 = *(void *)(v0 + 280);
      sub_10018AC60((void *)(v0 + 248), v34);
      id v36 = *(uint64_t (**)(uint64_t, uint64_t))(v35 + 8);
      uint64_t v37 = v35;
      uint64_t v1 = v33;
      uint64_t v38 = v36(v34, v37);
      *(void *)(v31 + 14) = sub_1000143F4(v38, v39, &v68);
      swift_bridgeObjectRelease();
      sub_100014524(v0 + 248);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "[%@] Running %{public}s", (uint8_t *)v31, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v65(v64, v62);
    }
    else
    {
      uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
      uint64_t v41 = *(void *)(v0 + 424);
      uint64_t v42 = *(void *)(v0 + 392);

      sub_100014524(v0 + 248);
      v40(v41, v42);
    }
    uint64_t v43 = *(void *)(v0 + 232);
    uint64_t v44 = *(void *)(v0 + 240);
    sub_10018AC60(v1, v43);
    uint64_t v66 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v44 + 16) + **(int **)(v44 + 16));
    unint64_t v45 = (void *)swift_task_alloc();
    *(void *)(v0 + 544) = v45;
    *unint64_t v45 = v0;
    v45[1] = sub_100515254;
    return v66(v43, v44);
  }
}

uint64_t sub_100515ADC()
{
  swift_release();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100515B24()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_100515B6C(uint64_t a1, unint64_t a2)
{
  sub_10000E6E4();
  if (qword_10065B158 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10000E6AC(v4, (uint64_t)qword_10068DAC8);
  swift_bridgeObjectRetain_n();
  os_log_type_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446210;
    swift_bridgeObjectRetain();
    sub_1000143F4(a1, a2, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Activity associated with %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

void sub_100515D2C()
{
  sub_10000E6E4();
  if (qword_10065B158 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000E6AC(v0, (uint64_t)qword_10068DAC8);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136446210;
    uint64_t v3 = dispatch thunk of CustomStringConvertible.description.getter();
    sub_1000143F4(v3, v4, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "Activity associated with %{public}s", v2, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_100515F00(NSObject *a1, uint64_t a2, int a3, void *a4, char a5, char a6, uint64_t a7, void *a8)
{
  uint64_t v16 = sub_1000172F8((uint64_t *)&unk_100661AB0);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000114D4(a7, (uint64_t)v18);
  id v19 = a4;
  id v20 = sub_100011088(a1, a2, a3, a4, a5, a6, (uint64_t)v18, a8);
  NSString v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  if (qword_10065B150 != -1) {
    swift_once();
  }
  v30[0] = v20;
  v30[1] = v22;
  v30[2] = v24;
  v30[3] = v26;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000172F8(&qword_10065F9C0);
  swift_task_localValuePush();
  sub_100516B58(a4, v22);
  uint64_t v28 = v27;
  swift_task_localValuePop();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v28;
}

uint64_t sub_1005160BC(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  String.utf8CString.getter();
  uint64_t v10 = os_transaction_create();
  uint64_t result = swift_release();
  if (v10)
  {
    *(void *)(v3 + 16) = v10;
    __int16 timestamp = os_transaction_get_timestamp();
    static Logger.general.getter();
    swift_bridgeObjectRetain_n();
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      uint64_t v18 = v6;
      uint64_t v20 = v16;
      *(_DWORD *)uint64_t v15 = 33554946;
      LOWORD(v19) = timestamp;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 6) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v19 = sub_1000143F4(a1, a2, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "[TXN%hx] 🐏 Beginning transaction (%s)", (uint8_t *)v15, 0x10u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_bridgeObjectRelease();

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v18);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100516334()
{
  sub_1000172F8(&qword_100666700);
  swift_allocObject();
  uint64_t result = TaskLocal.init(wrappedValue:)();
  qword_10068DAC0 = result;
  return result;
}

uint64_t sub_10051638C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1002983A4(v0, qword_10068DAC8);
  sub_10000E6AC(v0, (uint64_t)qword_10068DAC8);
  static Logger.madSubsystem.getter();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1005163F0()
{
  uint64_t v0 = type metadata accessor for LogKey.Prefix();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10065B150 != -1) {
    swift_once();
  }
  TaskLocal.get()();
  uint64_t v4 = v10;
  if (!v10) {
    goto LABEL_5;
  }
  swift_release();
  swift_release();
  swift_release();
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 24));
  sub_100006250((void **)(v4 + 16), &v9);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 24));
  os_log_type_t v5 = v9;
  swift_release();
  if (!v5)
  {
LABEL_5:
    (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for LogKey.Prefix.undefined(_:), v0);
    id v6 = objc_allocWithZone((Class)type metadata accessor for LogKey());
    return LogKey.init(prefix:)();
  }
  return (uint64_t)v5;
}

void sub_100516588(NSObject *a1, uint64_t a2, int a3, void *a4, char a5, int a6, uint64_t a7, os_activity_scope_state_s *a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  uint64_t v40 = a8;
  LODWORD(v39) = a6;
  uint64_t v17 = sub_1000172F8((uint64_t *)&unk_100661AB0);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000114D4(a7, (uint64_t)v19);
  uint64_t v41 = a10;
  unint64_t v42 = a11;
  sub_1001C5E20(a10, a11);
  uint64_t v20 = a4;
  char v21 = sub_100011088(a1, a2, a3, a4, a5, (char)v39, (uint64_t)v19, v40);
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  if (qword_10065B150 != -1) {
    swift_once();
  }
  aBlock = (void **)v21;
  uint64_t v44 = v23;
  unint64_t v45 = v25;
  uint64_t v46 = v27;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000172F8(&qword_10065F9C0);
  swift_task_localValuePush();
  unint64_t v39 = v25;
  uint64_t v40 = v21;
  v38[1] = v27;
  if (a4)
  {
    uint64_t v28 = v20;
LABEL_7:
    uint64_t v31 = v20;
    sub_10000E2EC();

    goto LABEL_8;
  }
  uint64_t isEscapingClosureAtFileLocation = v23 + 24;
  os_unfair_lock_lock((os_unfair_lock_t)(v23 + 24));
  uint64_t v30 = v49;
  sub_100006238((void **)(v23 + 16), (void **)&aBlock);
  if (v30) {
    goto LABEL_11;
  }
  uint64_t v49 = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v23 + 24));
  uint64_t v28 = aBlock;
  if (aBlock) {
    goto LABEL_7;
  }
LABEL_8:
  id v32 = [self enumeratorWithOptions:0];
  id v33 = (void *)swift_allocObject();
  uint64_t v35 = v41;
  unint64_t v34 = v42;
  v33[2] = a9;
  _OWORD v33[3] = v35;
  v33[4] = v34;
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = sub_10051695C;
  *(void *)(v36 + 24) = v33;
  uint64_t v47 = sub_100332FB8;
  uint64_t v48 = v36;
  aBlock = _NSConcreteStackBlock;
  uint64_t v44 = 1107296256;
  unint64_t v45 = sub_100321118;
  uint64_t v46 = &unk_10064B6F8;
  uint64_t v37 = _Block_copy(&aBlock);
  sub_1001C5E20(v35, v34);
  swift_retain();
  swift_release();
  objc_msgSend(v32, "swift_firstWhere:", v37);

  _Block_release(v37);
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  sub_1001C5E34(v35, v34);
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    swift_task_localValuePop();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return;
  }
  __break(1u);
LABEL_11:
  os_unfair_lock_unlock((os_unfair_lock_t)isEscapingClosureAtFileLocation);
  __break(1u);
}

uint64_t sub_10051691C()
{
  if (*(void *)(v0 + 32) >= 2uLL) {
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10051695C(void *a1)
{
  return sub_1004FD358(a1, *(id *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100516968()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100516978()
{
  return swift_release();
}

void sub_100516980(void *a1)
{
  if (qword_10065B150 != -1) {
    swift_once();
  }
  TaskLocal.get()();
  uint64_t v2 = v6;
  if (v6)
  {
    swift_release();
    swift_release();
    uint64_t v3 = swift_release();
    uint64_t v4 = __chkstk_darwin(v3);
    __chkstk_darwin(v4);
    swift_retain();
    os_unfair_lock_lock(v6 + 6);
    sub_100516B18(&v5);
    os_unfair_lock_unlock(v2 + 6);
    swift_release();
  }
  sub_10000E2EC();
  swift_release();
}

id sub_100516AC8(id *a1)
{
  id v4 = *(id *)(v1 + 16);

  *a1 = v4;

  return v4;
}

uint64_t sub_100516B18@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = 0;
  return result;
}

void sub_100516B58(void *a1, os_unfair_lock_s *a2)
{
  if (a1)
  {
    id v4 = a1;
    goto LABEL_5;
  }
  uint64_t v5 = (void **)&a2[4];
  id v6 = a2 + 6;
  os_unfair_lock_lock(a2 + 6);
  sub_100006238(v5, &v8);
  if (!v2)
  {
    os_unfair_lock_unlock(v6);
    id v4 = v8;
    if (!v8)
    {
LABEL_6:
      sub_1003E10E4(&v9);
      return;
    }
LABEL_5:
    id v7 = a1;
    sub_10000E2EC();

    goto LABEL_6;
  }
  os_unfair_lock_unlock(v6);
  __break(1u);
}

void *assignWithCopy for TaskLocalContext(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for TaskLocalContext(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for TaskLocalContext()
{
  return &type metadata for TaskLocalContext;
}

uint64_t sub_100516D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[12] = a5;
  v6[13] = a6;
  v6[10] = a3;
  v6[11] = a4;
  v6[9] = a2;
  uint64_t v7 = type metadata accessor for Logger();
  v6[14] = v7;
  v6[15] = *(void *)(v7 - 8);
  v6[16] = swift_task_alloc();
  type metadata accessor for Locale();
  v6[17] = swift_task_alloc();
  type metadata accessor for LocalizedStringResource.BundleDescription();
  v6[18] = swift_task_alloc();
  type metadata accessor for String.LocalizationValue();
  v6[19] = swift_task_alloc();
  sub_1000172F8(&qword_10065E4D0);
  v6[20] = swift_task_alloc();
  v6[21] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ManagedAppStatus.State();
  v6[22] = v8;
  v6[23] = *(void *)(v8 - 8);
  v6[24] = swift_task_alloc();
  v6[25] = swift_task_alloc();
  sub_1000172F8((uint64_t *)&unk_10065CA40);
  v6[26] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DDMPurchaseMethod();
  v6[27] = v9;
  v6[28] = *(void *)(v9 - 8);
  v6[29] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for LocalizedStringResource();
  v6[30] = v10;
  v6[31] = *(void *)(v10 - 8);
  v6[32] = swift_task_alloc();
  v6[33] = swift_task_alloc();
  v6[34] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for DMCAppsScope();
  v6[35] = v11;
  v6[36] = *(void *)(v11 - 8);
  v6[37] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for DMCAppsClient();
  v6[38] = v12;
  v6[39] = *(void *)(v12 - 8);
  v6[40] = swift_task_alloc();
  return _swift_task_switch(sub_1005170B4, 0, 0);
}

uint64_t sub_1005170B4()
{
  uint64_t v2 = v0[36];
  uint64_t v1 = v0[37];
  uint64_t v3 = v0[35];
  id v4 = (os_unfair_lock_s *)v0[9];
  swift_retain();
  char v5 = sub_100311928(9, v4);
  swift_release();
  id v6 = (unsigned int *)&enum case for DMCAppsScope.system(_:);
  if (v5) {
    id v6 = (unsigned int *)&enum case for DMCAppsScope.user(_:);
  }
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, *v6, v3);
  DMCAppsClient.init(scope:)();
  swift_retain();
  uint64_t v7 = sub_100311A30(0, v4);
  char v9 = v8;
  swift_release();
  uint64_t v10 = v9 & 1;
  if (v10) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v7;
  }
  uint64_t v12 = (void *)swift_task_alloc();
  v0[41] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_1005171FC;
  return DMCAppsClient.shouldPromptForInstallConsent(for:)(v11, v10);
}

uint64_t sub_1005171FC(char a1)
{
  *(unsigned char *)(*(void *)v1 + 512) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1005172FC, 0, 0);
}

uint64_t sub_1005172FC()
{
  if (*(unsigned char *)(v0 + 512) == 1)
  {
    uint64_t v1 = *(os_unfair_lock_s **)(v0 + 72);
    swift_retain();
    uint64_t v2 = sub_100311910(3, v1);
    uint64_t v4 = v3;
    uint64_t v5 = swift_release();
    *(void *)(v0 + 336) = v4;
    if (v4)
    {
      char v9 = *(os_unfair_lock_s **)(v0 + 72);
      swift_retain();
      uint64_t v10 = sub_100311954(12, v9);
      unint64_t v12 = v11;
      swift_release();
      *(void *)(v0 + 344) = v10;
      *(void *)(v0 + 352) = v12;
      unint64_t v13 = (void *)swift_task_alloc();
      *(void *)(v0 + 360) = v13;
      *unint64_t v13 = v0;
      if (v12 >= 3)
      {
        v13[1] = sub_100517578;
        uint64_t v5 = v2;
        uint64_t v6 = v4;
        uint64_t v7 = v10;
        unint64_t v8 = v12;
      }
      else
      {
        v13[1] = sub_100517CA0;
        uint64_t v5 = v2;
        uint64_t v6 = v4;
        uint64_t v7 = 0;
        unint64_t v8 = 0;
      }
    }
    else
    {
      __break(1u);
    }
    return DMCAppsClient.isManaged(bundleID:persona:)(v5, v6, v7, v8);
  }
  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 312) + 8))(*(void *)(v0 + 320), *(void *)(v0 + 304));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
    return v14();
  }
}

uint64_t sub_100517578(char a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 32) = v1;
  *(unsigned char *)(v3 + 24) = a1;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 368) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100517B38;
  }
  else {
    uint64_t v4 = sub_100517698;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100517698()
{
  char v1 = *(unsigned char *)(v0 + 24);
  sub_1001C6440(*(void *)(v0 + 344), *(void *)(v0 + 352));
  swift_bridgeObjectRelease();
  if ((v1 & 1) == 0)
  {
    uint64_t v4 = *(void *)(v0 + 216);
    uint64_t v5 = *(void *)(v0 + 224);
    uint64_t v6 = *(void *)(v0 + 208);
    uint64_t v7 = *(os_unfair_lock_s **)(v0 + 72);
    swift_retain();
    sub_1003119B0(14, v7, v6);
    swift_release();
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
    if (v8 == 1)
    {
      __break(1u);
    }
    else
    {
      uint64_t v12 = *(void *)(v0 + 224);
      uint64_t v11 = *(void *)(v0 + 232);
      uint64_t v13 = *(void *)(v0 + 216);
      (*(void (**)(uint64_t, void, uint64_t))(v12 + 32))(v11, *(void *)(v0 + 208), v13);
      int v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 88))(v11, v13);
      if (v14 != enum case for DDMPurchaseMethod.volumePurchaseProgram(_:))
      {
        if (v14 != enum case for DDMPurchaseMethod.manifest(_:)) {
          return _assertionFailure(_:_:file:line:flags:)();
        }
        uint64_t v22 = *(void *)(v0 + 88);
        uint64_t v23 = DMCAppsClient.organizationName.getter();
        if (v24) {
          uint64_t v25 = v23;
        }
        else {
          uint64_t v25 = 0;
        }
        if (v24) {
          uint64_t v26 = v24;
        }
        else {
          uint64_t v26 = (void *)0xE000000000000000;
        }
        if (v22)
        {
          uint64_t v27 = *(void *)(v0 + 80);
          uint64_t v28 = *(void **)(v0 + 88);
        }
        else
        {
          uint64_t v31 = *(os_unfair_lock_s **)(v0 + 72);
          swift_retain();
          uint64_t v27 = sub_100311910(11, v31);
          uint64_t v28 = v32;
          uint64_t v8 = swift_release();
          if (!v28)
          {
LABEL_34:
            __break(1u);
            return _swift_task_switch(v8, v9, v10);
          }
        }
        swift_bridgeObjectRetain();
        sub_10053257C(v25, v26, v27, v28);
LABEL_29:
        uint64_t v34 = *(void *)(v0 + 264);
        uint64_t v33 = *(void *)(v0 + 272);
        uint64_t v36 = *(void *)(v0 + 240);
        uint64_t v35 = *(void *)(v0 + 248);
        uint64_t v37 = *(void *)(v0 + 200);
        uint64_t v39 = *(void *)(v0 + 176);
        uint64_t v38 = *(void *)(v0 + 184);
        uint64_t v40 = *(void *)(v0 + 168);
        uint64_t v46 = *(void *)(v0 + 96);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32))(v33, v34, v36);
        uint64_t v41 = enum case for ManagedAppStatus.State.promptingForConsent(_:);
        unint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 104);
        *(void *)(v0 + 384) = v42;
        *(void *)(v0 + 392) = (v38 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
        v42(v37, v41, v39);
        uint64_t v43 = type metadata accessor for ManagedAppStatus.Reason();
        *(void *)(v0 + 400) = v43;
        uint64_t v44 = *(void *)(v43 - 8);
        *(void *)(v0 + 408) = v44;
        unint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56);
        *(void *)(v0 + 416) = v45;
        *(void *)(v0 + 424) = (v44 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
        v45(v40, 1, 1, v43);
        uint64_t v8 = (uint64_t)sub_1005183C8;
        uint64_t v9 = v46;
        uint64_t v10 = 0;
        return _swift_task_switch(v8, v9, v10);
      }
      uint64_t v15 = *(void *)(v0 + 88);
      uint64_t v16 = DMCAppsClient.organizationName.getter();
      if (v17) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = 0;
      }
      if (v17) {
        uint64_t v19 = v17;
      }
      else {
        uint64_t v19 = (void *)0xE000000000000000;
      }
      if (v15)
      {
        uint64_t v20 = *(void *)(v0 + 80);
        char v21 = *(void **)(v0 + 88);
LABEL_26:
        swift_bridgeObjectRetain();
        sub_10053255C(v18, v19, v20, v21);
        goto LABEL_29;
      }
      uint64_t v29 = *(os_unfair_lock_s **)(v0 + 72);
      swift_retain();
      uint64_t v20 = sub_100311910(11, v29);
      char v21 = v30;
      uint64_t v8 = swift_release();
      if (v21) {
        goto LABEL_26;
      }
    }
    __break(1u);
    goto LABEL_34;
  }
  (*(void (**)(void, void))(*(void *)(v0 + 312) + 8))(*(void *)(v0 + 320), *(void *)(v0 + 304));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100517B38()
{
  uint64_t v1 = v0[39];
  uint64_t v2 = v0[40];
  uint64_t v3 = v0[38];
  sub_1001C6440(v0[43], v0[44]);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100517CA0(char a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 56) = v1;
  *(unsigned char *)(v3 + 48) = a1;
  *(void *)(v3 + 40) = v2;
  *(void *)(v3 + 376) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100518260;
  }
  else {
    uint64_t v4 = sub_100517DC0;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100517DC0()
{
  char v1 = *(unsigned char *)(v0 + 48);
  sub_1001C6440(*(void *)(v0 + 344), *(void *)(v0 + 352));
  swift_bridgeObjectRelease();
  if ((v1 & 1) == 0)
  {
    uint64_t v4 = *(void *)(v0 + 216);
    uint64_t v5 = *(void *)(v0 + 224);
    uint64_t v6 = *(void *)(v0 + 208);
    uint64_t v7 = *(os_unfair_lock_s **)(v0 + 72);
    swift_retain();
    sub_1003119B0(14, v7, v6);
    swift_release();
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
    if (v8 == 1)
    {
      __break(1u);
    }
    else
    {
      uint64_t v12 = *(void *)(v0 + 224);
      uint64_t v11 = *(void *)(v0 + 232);
      uint64_t v13 = *(void *)(v0 + 216);
      (*(void (**)(uint64_t, void, uint64_t))(v12 + 32))(v11, *(void *)(v0 + 208), v13);
      int v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 88))(v11, v13);
      if (v14 != enum case for DDMPurchaseMethod.volumePurchaseProgram(_:))
      {
        if (v14 != enum case for DDMPurchaseMethod.manifest(_:)) {
          return _assertionFailure(_:_:file:line:flags:)();
        }
        uint64_t v22 = *(void *)(v0 + 88);
        uint64_t v23 = DMCAppsClient.organizationName.getter();
        if (v24) {
          uint64_t v25 = v23;
        }
        else {
          uint64_t v25 = 0;
        }
        if (v24) {
          uint64_t v26 = v24;
        }
        else {
          uint64_t v26 = (void *)0xE000000000000000;
        }
        if (v22)
        {
          uint64_t v27 = *(void *)(v0 + 80);
          uint64_t v28 = *(void **)(v0 + 88);
        }
        else
        {
          uint64_t v31 = *(os_unfair_lock_s **)(v0 + 72);
          swift_retain();
          uint64_t v27 = sub_100311910(11, v31);
          uint64_t v28 = v32;
          uint64_t v8 = swift_release();
          if (!v28)
          {
LABEL_34:
            __break(1u);
            return _swift_task_switch(v8, v9, v10);
          }
        }
        swift_bridgeObjectRetain();
        sub_10053257C(v25, v26, v27, v28);
LABEL_29:
        uint64_t v34 = *(void *)(v0 + 264);
        uint64_t v33 = *(void *)(v0 + 272);
        uint64_t v36 = *(void *)(v0 + 240);
        uint64_t v35 = *(void *)(v0 + 248);
        uint64_t v37 = *(void *)(v0 + 200);
        uint64_t v39 = *(void *)(v0 + 176);
        uint64_t v38 = *(void *)(v0 + 184);
        uint64_t v40 = *(void *)(v0 + 168);
        uint64_t v46 = *(void *)(v0 + 96);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32))(v33, v34, v36);
        uint64_t v41 = enum case for ManagedAppStatus.State.promptingForConsent(_:);
        unint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 104);
        *(void *)(v0 + 384) = v42;
        *(void *)(v0 + 392) = (v38 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
        v42(v37, v41, v39);
        uint64_t v43 = type metadata accessor for ManagedAppStatus.Reason();
        *(void *)(v0 + 400) = v43;
        uint64_t v44 = *(void *)(v43 - 8);
        *(void *)(v0 + 408) = v44;
        unint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56);
        *(void *)(v0 + 416) = v45;
        *(void *)(v0 + 424) = (v44 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
        v45(v40, 1, 1, v43);
        uint64_t v8 = (uint64_t)sub_1005183C8;
        uint64_t v9 = v46;
        uint64_t v10 = 0;
        return _swift_task_switch(v8, v9, v10);
      }
      uint64_t v15 = *(void *)(v0 + 88);
      uint64_t v16 = DMCAppsClient.organizationName.getter();
      if (v17) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = 0;
      }
      if (v17) {
        uint64_t v19 = v17;
      }
      else {
        uint64_t v19 = (void *)0xE000000000000000;
      }
      if (v15)
      {
        uint64_t v20 = *(void *)(v0 + 80);
        char v21 = *(void **)(v0 + 88);
LABEL_26:
        swift_bridgeObjectRetain();
        sub_10053255C(v18, v19, v20, v21);
        goto LABEL_29;
      }
      uint64_t v29 = *(os_unfair_lock_s **)(v0 + 72);
      swift_retain();
      uint64_t v20 = sub_100311910(11, v29);
      char v21 = v30;
      uint64_t v8 = swift_release();
      if (v21) {
        goto LABEL_26;
      }
    }
    __break(1u);
    goto LABEL_34;
  }
  (*(void (**)(void, void))(*(void *)(v0 + 312) + 8))(*(void *)(v0 + 320), *(void *)(v0 + 304));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100518260()
{
  uint64_t v1 = v0[39];
  uint64_t v2 = v0[40];
  uint64_t v3 = v0[38];
  sub_1001C6440(v0[43], v0[44]);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1005183C8()
{
  uint64_t v1 = (os_unfair_lock_s *)v0[9];
  swift_retain();
  uint64_t v2 = sub_100311910(4, v1);
  uint64_t v4 = v3;
  uint64_t result = swift_release();
  v0[54] = v4;
  if (v4)
  {
    uint64_t v6 = (os_unfair_lock_s *)v0[9];
    swift_retain();
    char v7 = sub_100311928(9, v6);
    swift_release();
    uint64_t v8 = (void *)swift_task_alloc();
    v0[55] = v8;
    *uint64_t v8 = v0;
    if (v7 == 2)
    {
      v8[1] = sub_10051B9BC;
      uint64_t v9 = v0[21];
      uint64_t v10 = v0[25];
      uint64_t v11 = v2;
      uint64_t v12 = v4;
      char v13 = 0;
    }
    else
    {
      v8[1] = sub_100518520;
      uint64_t v9 = v0[21];
      uint64_t v10 = v0[25];
      uint64_t v11 = v2;
      uint64_t v12 = v4;
      char v13 = v7;
    }
    return sub_10023FB0C(v10, v9, v11, v12, v13);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100518520()
{
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[56] = v0;
    uint64_t v3 = v2[12];
    uint64_t v4 = sub_100518694;
  }
  else
  {
    uint64_t v5 = v2[25];
    uint64_t v6 = v2[22];
    uint64_t v7 = v2[23];
    uint64_t v8 = v2[21];
    swift_bridgeObjectRelease();
    sub_10001729C(v8, &qword_10065E4D0);
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v2[57] = v9;
    v2[58] = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v9(v5, v6);
    uint64_t v4 = sub_1005188A0;
    uint64_t v3 = 0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100518694()
{
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[23];
  uint64_t v4 = v0[21];
  swift_bridgeObjectRelease();
  sub_10001729C(v4, &qword_10065E4D0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  return _swift_task_switch(sub_100518738, 0, 0);
}

uint64_t sub_100518738()
{
  uint64_t v2 = v0[39];
  uint64_t v1 = v0[40];
  uint64_t v3 = v0[38];
  (*(void (**)(void, void))(v0[31] + 8))(v0[34], v0[30]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1005188A0()
{
  uint64_t v1 = v0[34];
  uint64_t v3 = v0[31];
  uint64_t v2 = v0[32];
  uint64_t v4 = v0[30];
  String.LocalizationValue.init(stringLiteral:)();
  static LocalizedStringResource.BundleDescription.madFramework.getter();
  static Locale.current.getter();
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  uint64_t v5 = String.init(localized:)();
  uint64_t v19 = v6;
  uint64_t v20 = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v7 = String.init(localized:)();
  uint64_t v9 = v8;
  String.LocalizationValue.init(stringLiteral:)();
  static LocalizedStringResource.BundleDescription.madFramework.getter();
  static Locale.current.getter();
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  uint64_t v10 = String.init(localized:)();
  uint64_t v12 = v11;
  String.LocalizationValue.init(stringLiteral:)();
  static LocalizedStringResource.BundleDescription.madFramework.getter();
  static Locale.current.getter();
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  uint64_t v13 = String.init(localized:)();
  uint64_t v15 = v14;
  type metadata accessor for SystemAlert();
  uint64_t v16 = swift_allocObject();
  v0[59] = v16;
  *(void *)(v16 + 16) = v20;
  *(void *)(v16 + 24) = v19;
  *(void *)(v16 + 32) = v7;
  *(void *)(v16 + 40) = v9;
  *(void *)(v16 + 48) = v10;
  *(void *)(v16 + 56) = v12;
  *(void *)(v16 + 64) = v13;
  *(void *)(v16 + 72) = v15;
  *(_WORD *)(v16 + 80) = 0;
  uint64_t v17 = (void *)swift_task_alloc();
  v0[60] = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_100518B04;
  return sub_10042D9F4();
}

uint64_t sub_100518B04(char a1)
{
  *(unsigned char *)(*(void *)v1 + 513) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100518C04, 0, 0);
}

uint64_t sub_100518C04()
{
  if (*(unsigned char *)(v0 + 513))
  {
    uint64_t v1 = *(void **)(v0 + 104);
    static Logger.ddm.getter();
    id v2 = v1;
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    BOOL v5 = os_log_type_enabled(v3, v4);
    uint64_t v6 = *(void **)(v0 + 104);
    if (v5)
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 138412290;
      *(void *)(v0 + 64) = v6;
      id v9 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v8 = v6;

      _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%@] User rejected consent", v7, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v15 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 416);
    uint64_t v16 = *(void *)(v0 + 400);
    uint64_t v17 = *(void *)(v0 + 408);
    uint64_t v18 = *(void (**)(uint64_t, void, uint64_t))(v0 + 384);
    uint64_t v19 = *(void *)(v0 + 192);
    uint64_t v20 = *(void *)(v0 + 176);
    uint64_t v21 = *(void *)(v0 + 160);
    uint64_t v22 = *(void *)(v0 + 96);
    (*(void (**)(void, void))(*(void *)(v0 + 120) + 8))(*(void *)(v0 + 128), *(void *)(v0 + 112));
    v18(v19, enum case for ManagedAppStatus.State.failed(_:), v20);
    (*(void (**)(uint64_t, void, uint64_t))(v17 + 104))(v21, enum case for ManagedAppStatus.Reason.userRejected(_:), v16);
    v15(v21, 0, 1, v16);
    return _swift_task_switch(sub_100518F6C, v22, 0);
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 272);
    uint64_t v11 = *(void *)(v0 + 240);
    uint64_t v12 = *(void *)(v0 + 248);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    (*(void (**)(void, void))(*(void *)(v0 + 312) + 8))(*(void *)(v0 + 320), *(void *)(v0 + 304));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
}

uint64_t sub_100518F6C()
{
  uint64_t v1 = (os_unfair_lock_s *)v0[9];
  swift_retain();
  uint64_t v2 = sub_100311910(4, v1);
  uint64_t v4 = v3;
  uint64_t result = swift_release();
  v0[61] = v4;
  if (v4)
  {
    uint64_t v6 = (os_unfair_lock_s *)v0[9];
    swift_retain();
    char v7 = sub_100311928(9, v6);
    swift_release();
    uint64_t v8 = (void *)swift_task_alloc();
    v0[62] = v8;
    *uint64_t v8 = v0;
    if (v7 == 2)
    {
      v8[1] = sub_10051B9B8;
      uint64_t v9 = v0[20];
      uint64_t v10 = v0[24];
      uint64_t v11 = v2;
      uint64_t v12 = v4;
      char v13 = 0;
    }
    else
    {
      v8[1] = sub_1005190C4;
      uint64_t v9 = v0[20];
      uint64_t v10 = v0[24];
      uint64_t v11 = v2;
      uint64_t v12 = v4;
      char v13 = v7;
    }
    return sub_10023FB0C(v10, v9, v11, v12, v13);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005190C4()
{
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[63] = v0;
    uint64_t v3 = v2[12];
    uint64_t v4 = sub_1005193E0;
  }
  else
  {
    BOOL v5 = (void (*)(uint64_t, uint64_t))v2[57];
    uint64_t v6 = v2[24];
    uint64_t v7 = v2[22];
    uint64_t v8 = v2[20];
    swift_bridgeObjectRelease();
    sub_10001729C(v8, &qword_10065E4D0);
    v5(v6, v7);
    uint64_t v4 = sub_100519224;
    uint64_t v3 = 0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100519224()
{
  uint64_t v1 = v0[39];
  uint64_t v2 = v0[40];
  uint64_t v3 = v0[38];
  uint64_t v4 = v0[34];
  uint64_t v5 = v0[30];
  uint64_t v6 = v0[31];
  type metadata accessor for InternalError();
  sub_10019FE50();
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1005193E0()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[57];
  uint64_t v2 = v0[24];
  uint64_t v3 = v0[22];
  uint64_t v4 = v0[20];
  swift_bridgeObjectRelease();
  sub_10001729C(v4, &qword_10065E4D0);
  v1(v2, v3);
  return _swift_task_switch(sub_100519484, 0, 0);
}

uint64_t sub_100519484()
{
  uint64_t v2 = v0[39];
  uint64_t v1 = v0[40];
  uint64_t v3 = v0[38];
  uint64_t v4 = v0[34];
  uint64_t v5 = v0[30];
  uint64_t v6 = v0[31];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1005195FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[12] = a5;
  v6[13] = a6;
  v6[10] = a3;
  v6[11] = a4;
  v6[9] = a2;
  sub_1000172F8(&qword_10065E4D0);
  v6[14] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v6[15] = v7;
  v6[16] = *(void *)(v7 - 8);
  v6[17] = swift_task_alloc();
  type metadata accessor for Locale();
  v6[18] = swift_task_alloc();
  type metadata accessor for LocalizedStringResource.BundleDescription();
  v6[19] = swift_task_alloc();
  type metadata accessor for String.LocalizationValue();
  v6[20] = swift_task_alloc();
  type metadata accessor for LocalizedStringResource();
  v6[21] = swift_task_alloc();
  v6[22] = swift_task_alloc();
  v6[23] = type metadata accessor for DDMDeclarationStatusTemplate(0);
  v6[24] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ManagedAppStatus.State();
  v6[25] = v8;
  v6[26] = *(void *)(v8 - 8);
  v6[27] = swift_task_alloc();
  v6[28] = swift_task_alloc();
  v6[29] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DMCAppsScope();
  v6[30] = v9;
  v6[31] = *(void *)(v9 - 8);
  v6[32] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for DMCAppsClient();
  v6[33] = v10;
  v6[34] = *(void *)(v10 - 8);
  v6[35] = swift_task_alloc();
  return _swift_task_switch(sub_100519914, 0, 0);
}

uint64_t sub_100519914()
{
  uint64_t v2 = v0[31];
  uint64_t v1 = v0[32];
  uint64_t v3 = v0[30];
  uint64_t v4 = (os_unfair_lock_s *)v0[9];
  swift_retain();
  char v5 = sub_100311928(9, v4);
  swift_release();
  uint64_t v6 = (unsigned int *)&enum case for DMCAppsScope.system(_:);
  if (v5) {
    uint64_t v6 = (unsigned int *)&enum case for DMCAppsScope.user(_:);
  }
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, *v6, v3);
  DMCAppsClient.init(scope:)();
  swift_retain();
  uint64_t v7 = sub_100311A30(0, v4);
  char v9 = v8;
  swift_release();
  uint64_t v10 = v9 & 1;
  if (v10) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v7;
  }
  uint64_t v12 = (void *)swift_task_alloc();
  v0[36] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100519A5C;
  return DMCAppsClient.shouldPromptForInstallConsent(for:)(v11, v10);
}

uint64_t sub_100519A5C(char a1)
{
  *(unsigned char *)(*(void *)v1 + 448) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100519B5C, 0, 0);
}

uint64_t sub_100519B5C()
{
  if (*(unsigned char *)(v0 + 448) == 1)
  {
    uint64_t v1 = *(os_unfair_lock_s **)(v0 + 72);
    swift_retain();
    uint64_t v2 = sub_100311910(3, v1);
    uint64_t v4 = v3;
    uint64_t v5 = swift_release();
    *(void *)(v0 + 296) = v4;
    if (v4)
    {
      char v9 = *(os_unfair_lock_s **)(v0 + 72);
      swift_retain();
      uint64_t v10 = sub_100311954(12, v9);
      unint64_t v12 = v11;
      swift_release();
      *(void *)(v0 + 304) = v10;
      *(void *)(v0 + 312) = v12;
      char v13 = (void *)swift_task_alloc();
      *(void *)(v0 + 320) = v13;
      *char v13 = v0;
      if (v12 >= 3)
      {
        v13[1] = sub_100519DB8;
        uint64_t v5 = v2;
        uint64_t v6 = v4;
        uint64_t v7 = v10;
        unint64_t v8 = v12;
      }
      else
      {
        v13[1] = sub_10051A1E4;
        uint64_t v5 = v2;
        uint64_t v6 = v4;
        uint64_t v7 = 0;
        unint64_t v8 = 0;
      }
    }
    else
    {
      __break(1u);
    }
    return DMCAppsClient.isManaged(bundleID:persona:)(v5, v6, v7, v8);
  }
  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 272) + 8))(*(void *)(v0 + 280), *(void *)(v0 + 264));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
    return v14();
  }
}

uint64_t sub_100519DB8(char a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 32) = v1;
  *(unsigned char *)(v3 + 24) = a1;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 328) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_10051A098;
  }
  else {
    uint64_t v4 = sub_100519ED8;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100519ED8()
{
  char v1 = *(unsigned char *)(v0 + 24);
  sub_1001C6440(*(void *)(v0 + 304), *(void *)(v0 + 312));
  swift_bridgeObjectRelease();
  if (v1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 272) + 8))(*(void *)(v0 + 280), *(void *)(v0 + 264));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 232);
    uint64_t v5 = *(void *)(v0 + 200);
    uint64_t v6 = *(void *)(v0 + 208);
    uint64_t v7 = *(void *)(v0 + 96);
    uint64_t v8 = enum case for ManagedAppStatus.State.promptingForManagement(_:);
    char v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104);
    *(void *)(v0 + 344) = v9;
    *(void *)(v0 + 352) = (v6 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
    v9(v4, v8, v5);
    return _swift_task_switch(sub_10051A610, v7, 0);
  }
}

uint64_t sub_10051A098()
{
  uint64_t v1 = v0[34];
  uint64_t v2 = v0[35];
  uint64_t v3 = v0[33];
  sub_1001C6440(v0[38], v0[39]);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10051A1E4(char a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 56) = v1;
  *(unsigned char *)(v3 + 48) = a1;
  *(void *)(v3 + 40) = v2;
  *(void *)(v3 + 336) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_10051A4C4;
  }
  else {
    uint64_t v4 = sub_10051A304;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10051A304()
{
  char v1 = *(unsigned char *)(v0 + 48);
  sub_1001C6440(*(void *)(v0 + 304), *(void *)(v0 + 312));
  swift_bridgeObjectRelease();
  if (v1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 272) + 8))(*(void *)(v0 + 280), *(void *)(v0 + 264));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 232);
    uint64_t v5 = *(void *)(v0 + 200);
    uint64_t v6 = *(void *)(v0 + 208);
    uint64_t v7 = *(void *)(v0 + 96);
    uint64_t v8 = enum case for ManagedAppStatus.State.promptingForManagement(_:);
    char v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104);
    *(void *)(v0 + 344) = v9;
    *(void *)(v0 + 352) = (v6 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
    v9(v4, v8, v5);
    return _swift_task_switch(sub_10051A610, v7, 0);
  }
}

uint64_t sub_10051A4C4()
{
  uint64_t v1 = v0[34];
  uint64_t v2 = v0[35];
  uint64_t v3 = v0[33];
  sub_1001C6440(v0[38], v0[39]);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10051A610()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[24];
  uint64_t v3 = (os_unfair_lock_s *)v0[9];
  uint64_t v4 = *(void (**)(char *, uint64_t, uint64_t))(v0[26] + 16);
  v4((char *)v0[28], v0[29], v0[25]);
  uint64_t v5 = v2 + *(int *)(v1 + 28);
  uint64_t updated = type metadata accessor for ManagedAppStatus.UpdateState();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(updated - 8) + 56);
  v7(v5, 1, 1, updated);
  swift_retain();
  uint64_t result = sub_100311910(5, v3);
  if (!v9)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v23 = v7;
  uint64_t v24 = updated;
  uint64_t v25 = v4;
  uint64_t v10 = v0[24];
  unint64_t v11 = (os_unfair_lock_s *)v0[9];
  *(void *)(v10 + 16) = result;
  *(void *)(v10 + 24) = v9;
  swift_retain();
  uint64_t v12 = sub_100311910(4, v11);
  uint64_t v14 = v13;
  uint64_t result = swift_release();
  if (!v14)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v15 = v0[28];
  uint64_t v16 = v0[25];
  uint64_t v17 = v0[26];
  uint64_t v18 = v0[23];
  uint64_t v19 = (uint64_t *)v0[24];
  *uint64_t v19 = v12;
  v19[1] = v14;
  v25((char *)v19 + *(int *)(v18 + 24), v15, v16);
  sub_10001729C(v5, &qword_10065BD00);
  v23(v5, 1, 1, v24);
  swift_release();
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v0[45] = v20;
  v0[46] = (v17 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v20(v15, v16);
  *(uint64_t *)((char *)v19 + *(int *)(v18 + 32)) = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v21 = swift_task_alloc();
  v0[47] = v21;
  *(void *)(v21 + 16) = v19;
  uint64_t v26 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100660678 + dword_100660678);
  uint64_t v22 = (void *)swift_task_alloc();
  v0[48] = v22;
  *uint64_t v22 = v0;
  v22[1] = sub_10051A884;
  return v26((uint64_t)sub_1001C62C8, v21);
}

uint64_t sub_10051A884(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v3;
  *(void *)(*v3 + 392) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v6 = *(void *)(v5 + 96);
    uint64_t v7 = sub_10051A9C4;
  }
  else
  {
    uint64_t v8 = *(void *)(v5 + 96);
    *(void *)(v5 + 400) = a2;
    swift_task_dealloc();
    uint64_t v7 = sub_10051AB88;
    uint64_t v6 = v8;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_10051A9C4()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[45];
  uint64_t v2 = v0[29];
  uint64_t v4 = v0[24];
  uint64_t v3 = v0[25];
  swift_task_dealloc();
  sub_100249F70(v4);
  v1(v2, v3);
  return _swift_task_switch(sub_10051AA5C, 0, 0);
}

uint64_t sub_10051AA5C()
{
  (*(void (**)(void, void))(v0[34] + 8))(v0[35], v0[33]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10051AB88()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[45];
  uint64_t v2 = v0[29];
  uint64_t v4 = v0[24];
  uint64_t v3 = v0[25];
  uint64_t v5 = (os_unfair_lock_s *)v0[9];
  swift_retain();
  char v6 = sub_100311928(9, v5);
  swift_release();
  sub_100249CF0(v6 & 1);
  sub_100249F70(v4);
  swift_release();
  v1(v2, v3);
  return _swift_task_switch(sub_10051AC58, 0, 0);
}

uint64_t sub_10051AC58()
{
  uint64_t v1 = v0[11];
  String.LocalizationValue.init(stringLiteral:)();
  static LocalizedStringResource.BundleDescription.madFramework.getter();
  static Locale.current.getter();
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  uint64_t v2 = String.init(localized:)();
  uint64_t v4 = v3;
  uint64_t v5 = DMCAppsClient.organizationName.getter();
  uint64_t v7 = v6;
  uint64_t v25 = v2;
  if (v1)
  {
    uint64_t v8 = v0[10];
    uint64_t v9 = (void *)v0[11];
  }
  else
  {
    uint64_t v10 = (os_unfair_lock_s *)v0[9];
    swift_retain();
    uint64_t v8 = sub_100311910(11, v10);
    uint64_t v9 = v11;
    uint64_t result = swift_release();
    if (!v9)
    {
      __break(1u);
      return result;
    }
  }
  if (v7)
  {
    uint64_t v13 = v5;
  }
  else
  {
    uint64_t v7 = (void *)0xE000000000000000;
    uint64_t v13 = 0;
  }
  swift_bridgeObjectRetain();
  sub_10053259C(v13, v7, v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v14 = String.init(localized:)();
  uint64_t v16 = v15;
  String.LocalizationValue.init(stringLiteral:)();
  static LocalizedStringResource.BundleDescription.madFramework.getter();
  static Locale.current.getter();
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  uint64_t v17 = String.init(localized:)();
  uint64_t v19 = v18;
  String.LocalizationValue.init(stringLiteral:)();
  static LocalizedStringResource.BundleDescription.madFramework.getter();
  static Locale.current.getter();
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  uint64_t v20 = String.init(localized:)();
  uint64_t v22 = v21;
  type metadata accessor for SystemAlert();
  uint64_t v23 = swift_allocObject();
  v0[51] = v23;
  *(void *)(v23 + 16) = v25;
  *(void *)(v23 + 24) = v4;
  *(void *)(v23 + 32) = v14;
  *(void *)(v23 + 40) = v16;
  *(void *)(v23 + 48) = v17;
  *(void *)(v23 + 56) = v19;
  *(void *)(v23 + 64) = v20;
  *(void *)(v23 + 72) = v22;
  *(_WORD *)(v23 + 80) = 0;
  uint64_t v24 = (void *)swift_task_alloc();
  v0[52] = v24;
  *uint64_t v24 = v0;
  v24[1] = sub_10051AF38;
  return sub_10042D9F4();
}

uint64_t sub_10051AF38(char a1)
{
  *(unsigned char *)(*(void *)v1 + 449) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10051B038, 0, 0);
}

uint64_t sub_10051B038()
{
  if (*(unsigned char *)(v0 + 449))
  {
    uint64_t v1 = *(void **)(v0 + 104);
    static Logger.ddm.getter();
    id v2 = v1;
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    BOOL v5 = os_log_type_enabled(v3, v4);
    char v6 = *(void **)(v0 + 104);
    if (v5)
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 138412290;
      *(void *)(v0 + 64) = v6;
      id v9 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v8 = v6;

      _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%@] User rejected management", v7, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v12 = *(void (**)(uint64_t, void, uint64_t))(v0 + 344);
    uint64_t v13 = *(void *)(v0 + 216);
    uint64_t v14 = *(void *)(v0 + 200);
    uint64_t v15 = *(void *)(v0 + 112);
    uint64_t v16 = *(void *)(v0 + 96);
    (*(void (**)(void, void))(*(void *)(v0 + 128) + 8))(*(void *)(v0 + 136), *(void *)(v0 + 120));
    v12(v13, enum case for ManagedAppStatus.State.failed(_:), v14);
    uint64_t v17 = enum case for ManagedAppStatus.Reason.userRejected(_:);
    uint64_t v18 = type metadata accessor for ManagedAppStatus.Reason();
    uint64_t v19 = *(void *)(v18 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 104))(v15, v17, v18);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
    return _swift_task_switch(sub_10051B39C, v16, 0);
  }
  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 272) + 8))(*(void *)(v0 + 280), *(void *)(v0 + 264));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
}

uint64_t sub_10051B39C()
{
  uint64_t v1 = (os_unfair_lock_s *)v0[9];
  swift_retain();
  uint64_t v2 = sub_100311910(4, v1);
  uint64_t v4 = v3;
  uint64_t result = swift_release();
  v0[53] = v4;
  if (v4)
  {
    char v6 = (os_unfair_lock_s *)v0[9];
    swift_retain();
    char v7 = sub_100311928(9, v6);
    swift_release();
    uint64_t v8 = (void *)swift_task_alloc();
    v0[54] = v8;
    *uint64_t v8 = v0;
    if (v7 == 2)
    {
      v8[1] = sub_10051B9B4;
      uint64_t v9 = v0[14];
      uint64_t v10 = v0[27];
      uint64_t v11 = v2;
      uint64_t v12 = v4;
      char v13 = 0;
    }
    else
    {
      v8[1] = sub_10051B4F4;
      uint64_t v9 = v0[14];
      uint64_t v10 = v0[27];
      uint64_t v11 = v2;
      uint64_t v12 = v4;
      char v13 = v7;
    }
    return sub_10023FB0C(v10, v9, v11, v12, v13);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10051B4F4()
{
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[55] = v0;
    uint64_t v3 = v2[12];
    uint64_t v4 = sub_10051B7D4;
  }
  else
  {
    BOOL v5 = (void (*)(uint64_t, uint64_t))v2[45];
    uint64_t v6 = v2[27];
    uint64_t v7 = v2[25];
    uint64_t v8 = v2[14];
    swift_bridgeObjectRelease();
    sub_10001729C(v8, &qword_10065E4D0);
    v5(v6, v7);
    uint64_t v4 = sub_10051B654;
    uint64_t v3 = 0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10051B654()
{
  uint64_t v1 = v0[34];
  uint64_t v2 = v0[35];
  uint64_t v3 = v0[33];
  type metadata accessor for InternalError();
  sub_10019FE50();
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10051B7D4()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[45];
  uint64_t v2 = v0[27];
  uint64_t v3 = v0[25];
  uint64_t v4 = v0[14];
  swift_bridgeObjectRelease();
  sub_10001729C(v4, &qword_10065E4D0);
  v1(v2, v3);
  return _swift_task_switch(sub_10051B878, 0, 0);
}

uint64_t sub_10051B878()
{
  uint64_t v2 = v0[34];
  uint64_t v1 = v0[35];
  uint64_t v3 = v0[33];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10051B9C0(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEE0064695F726F74;
  unint64_t v3 = 0x7562697274736964;
  uint64_t v4 = a1;
  unint64_t v5 = 0x7562697274736964;
  unint64_t v6 = 0xEE0064695F726F74;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0xD000000000000011;
      unint64_t v6 = 0x80000001005B8480;
      break;
    case 2:
      uint64_t v7 = "certificate_data";
      goto LABEL_5;
    case 3:
      uint64_t v7 = "certificate_type";
LABEL_5:
      unint64_t v6 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      unint64_t v5 = 0xD000000000000010;
      break;
    case 4:
      unint64_t v6 = 0xE300000000000000;
      unint64_t v5 = 7107189;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0x80000001005B8480;
      if (v5 == 0xD000000000000011) {
        goto LABEL_14;
      }
      goto LABEL_17;
    case 2:
      uint64_t v8 = "certificate_data";
      goto LABEL_12;
    case 3:
      uint64_t v8 = "certificate_type";
LABEL_12:
      unint64_t v2 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      unint64_t v3 = 0xD000000000000010;
      goto LABEL_13;
    case 4:
      unint64_t v2 = 0xE300000000000000;
      if (v5 != 7107189) {
        goto LABEL_17;
      }
      goto LABEL_14;
    default:
LABEL_13:
      if (v5 != v3) {
        goto LABEL_17;
      }
LABEL_14:
      if (v6 == v2) {
        char v9 = 1;
      }
      else {
LABEL_17:
      }
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
  }
}

uint64_t sub_10051BB84(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEE0064695F6E6F69;
  uint64_t v3 = 0x746172616C636564;
  uint64_t v4 = a1;
  uint64_t v5 = 0x746172616C636564;
  unint64_t v6 = 0xEE0064695F6E6F69;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0xEF79656B5F6E6F69;
      break;
    case 2:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v5 = 0x6574617473;
      break;
    case 3:
      uint64_t v5 = 0x735F657461647075;
      unint64_t v6 = 0xEC00000065746174;
      break;
    case 4:
      unint64_t v6 = 0xE700000000000000;
      uint64_t v5 = 0x736E6F73616572;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xEF79656B5F6E6F69;
      if (v5 == 0x746172616C636564) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v2 = 0xE500000000000000;
      if (v5 != 0x6574617473) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      uint64_t v3 = 0x735F657461647075;
      unint64_t v2 = 0xEC00000065746174;
      goto LABEL_12;
    case 4:
      unint64_t v2 = 0xE700000000000000;
      if (v5 != 0x736E6F73616572) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v3) {
        goto LABEL_16;
      }
LABEL_13:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10051BD68(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 909455955;
  }
  else {
    uint64_t v3 = 0x6E69616C70;
  }
  if (v2) {
    unint64_t v4 = 0xE500000000000000;
  }
  else {
    unint64_t v4 = 0xE400000000000000;
  }
  if (a2) {
    uint64_t v5 = 909455955;
  }
  else {
    uint64_t v5 = 0x6E69616C70;
  }
  if (a2) {
    unint64_t v6 = 0xE400000000000000;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10051BE04(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEA00000000006469;
  uint64_t v3 = 0x5F746E756F636361;
  uint64_t v4 = a1;
  unint64_t v5 = 0x5F746E756F636361;
  unint64_t v6 = 0xEA00000000006469;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x726168735F707061;
      unint64_t v6 = 0xED00006C72755F65;
      break;
    case 2:
      unint64_t v5 = 0x695F656C646E7562;
      unint64_t v6 = 0xE900000000000064;
      break;
    case 3:
      unint64_t v5 = 0x765F656C646E7562;
      unint64_t v6 = 0xEE006E6F69737265;
      break;
    case 4:
      unint64_t v6 = 0xE700000000000000;
      unint64_t v5 = 0x6C72755F706461;
      break;
    case 5:
      unint64_t v5 = 0xD00000000000001ALL;
      unint64_t v6 = 0x80000001005B73A0;
      break;
    case 6:
      unint64_t v6 = 0x80000001005B84F0;
      unint64_t v5 = 0xD000000000000014;
      break;
    case 7:
      unint64_t v6 = 0xE700000000000000;
      unint64_t v5 = 0x64695F6D657469;
      break;
    case 8:
      unint64_t v5 = 0x5F6E6F6973726576;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xED00006C72755F65;
      if (v5 == 0x726168735F707061) {
        goto LABEL_25;
      }
      goto LABEL_28;
    case 2:
      unint64_t v2 = 0xE900000000000064;
      if (v5 != 0x695F656C646E7562) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 3:
      unint64_t v2 = 0xEE006E6F69737265;
      if (v5 != 0x765F656C646E7562) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 4:
      unint64_t v2 = 0xE700000000000000;
      if (v5 != 0x6C72755F706461) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 5:
      unint64_t v2 = 0x80000001005B73A0;
      if (v5 != 0xD00000000000001ALL) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 6:
      unint64_t v2 = 0x80000001005B84F0;
      if (v5 != 0xD000000000000014) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 7:
      unint64_t v2 = 0xE700000000000000;
      uint64_t v3 = 0x64695F6D657469;
      goto LABEL_24;
    case 8:
      if (v5 != 0x5F6E6F6973726576) {
        goto LABEL_28;
      }
      goto LABEL_25;
    default:
LABEL_24:
      if (v5 != v3) {
        goto LABEL_28;
      }
LABEL_25:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_28:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10051C120(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xEF64695F63696C62;
  uint64_t v3 = 0x75705F7465737361;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 0x695F656C646E7562;
    }
    else {
      uint64_t v5 = 0x5F65736E6563696CLL;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xE900000000000064;
    }
    else {
      unint64_t v6 = 0xEA00000000006469;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  uint64_t v5 = 0x75705F7465737361;
  unint64_t v6 = 0xEF64695F63696C62;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      uint64_t v3 = 0x695F656C646E7562;
    }
    else {
      uint64_t v3 = 0x5F65736E6563696CLL;
    }
    if (v7 == 1) {
      unint64_t v2 = 0xE900000000000064;
    }
    else {
      unint64_t v2 = 0xEA00000000006469;
    }
  }
LABEL_15:
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_10051C25C(char a1, char a2)
{
  unint64_t v3 = 0xD000000000000019;
  unint64_t v4 = 0x80000001005B8020;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xD000000000000012;
      uint64_t v5 = "single_instance_id";
      goto LABEL_5;
    case 2:
      unint64_t v3 = 0xD000000000000016;
      uint64_t v5 = "disabled_install_sheet";
      goto LABEL_5;
    case 3:
      unint64_t v3 = 0xD000000000000013;
      uint64_t v5 = "approved_developers";
LABEL_5:
      unint64_t v4 = (unint64_t)(v5 - 32) | 0x8000000000000000;
      break;
    case 4:
      unint64_t v4 = 0x80000001005B80A0;
      unint64_t v3 = 0xD000000000000010;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xD000000000000019;
  unint64_t v7 = 0x80000001005B8020;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xD000000000000012;
      char v8 = "single_instance_id";
      goto LABEL_11;
    case 2:
      unint64_t v6 = 0xD000000000000016;
      char v8 = "disabled_install_sheet";
      goto LABEL_11;
    case 3:
      unint64_t v6 = 0xD000000000000013;
      char v8 = "approved_developers";
LABEL_11:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      goto LABEL_12;
    case 4:
      unint64_t v7 = 0x80000001005B80A0;
      if (v3 != 0xD000000000000010) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v3 != v6) {
        goto LABEL_16;
      }
LABEL_13:
      if (v4 == v7) {
        char v9 = 1;
      }
      else {
LABEL_16:
      }
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
  }
}

uint64_t sub_10051C404(char a1, char a2)
{
  unint64_t v3 = 0xD000000000000016;
  unint64_t v4 = 0x80000001005B7E60;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0x6E655F6E656B6F74;
      unint64_t v4 = 0xEE00746E696F7064;
      break;
    case 2:
      unint64_t v4 = 0x80000001005B7E90;
      unint64_t v3 = 0xD000000000000010;
      break;
    case 3:
      unint64_t v3 = 0xD000000000000015;
      uint64_t v5 = "grant_types_supported";
      goto LABEL_7;
    case 4:
      unint64_t v3 = 0xD000000000000020;
      uint64_t v5 = "code_challenge_methods_supported";
      goto LABEL_7;
    case 5:
      unint64_t v3 = 0xD000000000000018;
      uint64_t v5 = "response_types_supported";
LABEL_7:
      unint64_t v4 = (unint64_t)(v5 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xD000000000000016;
  unint64_t v7 = 0x80000001005B7E60;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0x6E655F6E656B6F74;
      unint64_t v7 = 0xEE00746E696F7064;
      break;
    case 2:
      unint64_t v7 = 0x80000001005B7E90;
      unint64_t v6 = 0xD000000000000010;
      break;
    case 3:
      unint64_t v6 = 0xD000000000000015;
      char v8 = "grant_types_supported";
      goto LABEL_14;
    case 4:
      unint64_t v6 = 0xD000000000000020;
      char v8 = "code_challenge_methods_supported";
      goto LABEL_14;
    case 5:
      unint64_t v6 = 0xD000000000000018;
      char v8 = "response_types_supported";
LABEL_14:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  if (v3 == v6 && v4 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_10051C5F4(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD000000000000011;
  unint64_t v3 = 0x80000001005B7820;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD000000000000011;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x762D656C646E7562;
      unint64_t v3 = 0xEE006E6F69737265;
      break;
    case 2:
      unint64_t v3 = 0xE400000000000000;
      unint64_t v5 = 1684957547;
      break;
    case 3:
      unint64_t v3 = 0xE800000000000000;
      unint64_t v5 = 0x656C746974627573;
      break;
    case 4:
      unint64_t v3 = 0xE500000000000000;
      unint64_t v5 = 0x656C746974;
      break;
    default:
      break;
  }
  unint64_t v6 = 0x80000001005B7820;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xEE006E6F69737265;
      if (v5 == 0x762D656C646E7562) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1684957547) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v6 = 0xE800000000000000;
      unint64_t v2 = 0x656C746974627573;
      goto LABEL_12;
    case 4:
      unint64_t v6 = 0xE500000000000000;
      if (v5 != 0x656C746974) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10051C7BC(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x736F63616DLL;
  }
  else {
    uint64_t v3 = 7565161;
  }
  if (v2) {
    unint64_t v4 = 0xE300000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x736F63616DLL;
  }
  else {
    uint64_t v5 = 7565161;
  }
  if (a2) {
    unint64_t v6 = 0xE500000000000000;
  }
  else {
    unint64_t v6 = 0xE300000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10051C858(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x726556656C707061;
  }
  else {
    uint64_t v3 = 0x657449656C707061;
  }
  if (v2) {
    unint64_t v4 = 0xEB0000000064496DLL;
  }
  else {
    unint64_t v4 = 0xEE0064496E6F6973;
  }
  if (a2) {
    uint64_t v5 = 0x726556656C707061;
  }
  else {
    uint64_t v5 = 0x657449656C707061;
  }
  if (a2) {
    unint64_t v6 = 0xEE0064496E6F6973;
  }
  else {
    unint64_t v6 = 0xEB0000000064496DLL;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10051C914(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEB0000000064496DLL;
  uint64_t v3 = 0x657449656C707061;
  uint64_t v4 = a1;
  unint64_t v5 = 0x657449656C707061;
  unint64_t v6 = 0xEB0000000064496DLL;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x726556656C707061;
      unint64_t v6 = 0xEE0064496E6F6973;
      break;
    case 2:
      unint64_t v5 = 0xD00000000000001ELL;
      unint64_t v6 = 0x80000001005B7DA0;
      break;
    case 3:
      unint64_t v5 = 0x6572616853707061;
      unint64_t v6 = 0xEB000000004C5255;
      break;
    case 4:
      unint64_t v6 = 0x80000001005B7DC0;
      unint64_t v5 = 0xD000000000000018;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xEE0064496E6F6973;
      if (v5 == 0x726556656C707061) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v2 = 0x80000001005B7DA0;
      if (v5 != 0xD00000000000001ELL) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      uint64_t v3 = 0x6572616853707061;
      unint64_t v2 = 0xEB000000004C5255;
      goto LABEL_12;
    case 4:
      unint64_t v2 = 0x80000001005B7DC0;
      if (v5 != 0xD000000000000018) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v3) {
        goto LABEL_16;
      }
LABEL_13:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10051CB30(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xD000000000000010;
  unint64_t v3 = 0x80000001005B7FB0;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0xD00000000000001CLL;
    }
    else {
      unint64_t v5 = 0x67616279656BLL;
    }
    if (v4 == 1) {
      unint64_t v6 = 0x80000001005B7FD0;
    }
    else {
      unint64_t v6 = 0xE600000000000000;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  unint64_t v5 = 0xD000000000000010;
  unint64_t v6 = 0x80000001005B7FB0;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      unint64_t v2 = 0xD00000000000001CLL;
    }
    else {
      unint64_t v2 = 0x67616279656BLL;
    }
    if (v7 == 1) {
      unint64_t v3 = 0x80000001005B7FD0;
    }
    else {
      unint64_t v3 = 0xE600000000000000;
    }
  }
LABEL_15:
  if (v5 == v2 && v6 == v3) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_10051CC30(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 1717924456;
  }
  else {
    uint64_t v3 = 25705;
  }
  if (v2) {
    unint64_t v4 = 0xE200000000000000;
  }
  else {
    unint64_t v4 = 0xE400000000000000;
  }
  if (a2) {
    uint64_t v5 = 1717924456;
  }
  else {
    uint64_t v5 = 25705;
  }
  if (a2) {
    unint64_t v6 = 0xE400000000000000;
  }
  else {
    unint64_t v6 = 0xE200000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10051CCC4(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 1684632935;
    }
    else {
      uint64_t v3 = 0x636E7973626BLL;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE400000000000000;
    }
    else {
      unint64_t v4 = 0xE600000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 1684632935;
      }
      else {
        uint64_t v6 = 0x636E7973626BLL;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE400000000000000;
      }
      else {
        unint64_t v7 = 0xE600000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE400000000000000;
    uint64_t v3 = 1635017060;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE400000000000000;
  if (v3 != 1635017060)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_10051CDB8(char a1, unsigned __int8 a2)
{
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v2 = 1635018093;
    }
    else {
      uint64_t v2 = 1701869940;
    }
    unint64_t v3 = 0xE400000000000000;
    int v4 = a2;
    if (a2)
    {
LABEL_6:
      if (v4 == 1) {
        uint64_t v5 = 1635018093;
      }
      else {
        uint64_t v5 = 1701869940;
      }
      unint64_t v6 = 0xE400000000000000;
      if (v2 != v5) {
        goto LABEL_15;
      }
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v3 = 0xE200000000000000;
    uint64_t v2 = 25705;
    int v4 = a2;
    if (a2) {
      goto LABEL_6;
    }
  }
  unint64_t v6 = 0xE200000000000000;
  if (v2 != 25705)
  {
LABEL_15:
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_16;
  }
LABEL_13:
  if (v3 != v6) {
    goto LABEL_15;
  }
  char v7 = 1;
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10051CE9C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x69737265762D736FLL;
  }
  else {
    uint64_t v3 = 0x656369766564;
  }
  if (v2) {
    unint64_t v4 = 0xE600000000000000;
  }
  else {
    unint64_t v4 = 0xEA00000000006E6FLL;
  }
  if (a2) {
    uint64_t v5 = 0x69737265762D736FLL;
  }
  else {
    uint64_t v5 = 0x656369766564;
  }
  if (a2) {
    unint64_t v6 = 0xEA00000000006E6FLL;
  }
  else {
    unint64_t v6 = 0xE600000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10051CF44(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEF6567616D692D65;
  unint64_t v3 = 0x7A69732D6C6C7566;
  uint64_t v4 = a1;
  unint64_t v5 = 0x7A69732D6C6C7566;
  unint64_t v6 = 0xEF6567616D692D65;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0xD000000000000016;
      char v7 = "messages-display-image";
      goto LABEL_4;
    case 2:
      unint64_t v5 = 0xD000000000000013;
      char v7 = "asset-pack-manifest";
LABEL_4:
      unint64_t v6 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      break;
    case 3:
      unint64_t v6 = 0x80000001005B77A0;
      unint64_t v5 = 0xD000000000000010;
      break;
    case 4:
      unint64_t v5 = 0x2D79616C70736964;
      unint64_t v6 = 0xED00006567616D69;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v8 = 0xD000000000000016;
      char v9 = "messages-display-image";
      goto LABEL_10;
    case 2:
      unint64_t v8 = 0xD000000000000013;
      char v9 = "asset-pack-manifest";
LABEL_10:
      unint64_t v2 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      if (v5 != v8) {
        goto LABEL_17;
      }
      goto LABEL_14;
    case 3:
      unint64_t v2 = 0x80000001005B77A0;
      unint64_t v3 = 0xD000000000000010;
      goto LABEL_13;
    case 4:
      unint64_t v2 = 0xED00006567616D69;
      if (v5 != 0x2D79616C70736964) {
        goto LABEL_17;
      }
      goto LABEL_14;
    default:
LABEL_13:
      if (v5 != v3) {
        goto LABEL_17;
      }
LABEL_14:
      if (v6 == v2) {
        char v10 = 1;
      }
      else {
LABEL_17:
      }
        char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10 & 1;
  }
}

uint64_t sub_10051D138(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0x4449656C646E7562;
  unint64_t v3 = 0xE800000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x4449656C646E7562;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE400000000000000;
      unint64_t v5 = 1684957547;
      break;
    case 2:
      unint64_t v3 = 0xE300000000000000;
      unint64_t v5 = 7107189;
      break;
    case 3:
      unint64_t v3 = 0xE300000000000000;
      unint64_t v5 = 3499117;
      break;
    case 4:
      unint64_t v3 = 0xE400000000000000;
      unint64_t v5 = 1932878957;
      break;
    case 5:
      unint64_t v5 = 0x657A69732D35646DLL;
      break;
    case 6:
      unint64_t v3 = 0x80000001005B7800;
      unint64_t v5 = 0xD000000000000012;
      break;
    case 7:
      unint64_t v5 = 0x49746E6169726176;
      unint64_t v3 = 0xEA00000000007364;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE800000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE400000000000000;
      if (v5 == 1684957547) {
        goto LABEL_22;
      }
      goto LABEL_25;
    case 2:
      unint64_t v6 = 0xE300000000000000;
      if (v5 != 7107189) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 3:
      unint64_t v6 = 0xE300000000000000;
      if (v5 != 3499117) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 4:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1932878957) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 5:
      if (v5 != 0x657A69732D35646DLL) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 6:
      unint64_t v6 = 0x80000001005B7800;
      unint64_t v2 = 0xD000000000000012;
      goto LABEL_21;
    case 7:
      unint64_t v6 = 0xEA00000000007364;
      if (v5 != 0x49746E6169726176) {
        goto LABEL_25;
      }
      goto LABEL_22;
    default:
LABEL_21:
      if (v5 != v2) {
        goto LABEL_25;
      }
LABEL_22:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_25:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10051D38C(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x696669746E656469;
    }
    else {
      uint64_t v3 = 0x6E6F6973726576;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xEA00000000007265;
    }
    else {
      unint64_t v4 = 0xE700000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x696669746E656469;
      }
      else {
        uint64_t v6 = 0x6E6F6973726576;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xEA00000000007265;
      }
      else {
        unint64_t v7 = 0xE700000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE400000000000000;
    uint64_t v3 = 1701869940;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE400000000000000;
  if (v3 != 1701869940)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_10051D4A0(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEB0000000064496DLL;
  unint64_t v3 = 0x657449656C707061;
  uint64_t v4 = a1;
  unint64_t v5 = 0x657449656C707061;
  unint64_t v6 = 0xEB0000000064496DLL;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x726556656C707061;
      unint64_t v6 = 0xEE0064496E6F6973;
      break;
    case 2:
      unint64_t v5 = 0xD00000000000001ELL;
      unint64_t v7 = "alternativeDistributionPackage";
      goto LABEL_5;
    case 3:
      unint64_t v5 = 0xD000000000000018;
      unint64_t v7 = "installVerificationToken";
LABEL_5:
      unint64_t v6 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      break;
    case 4:
      unint64_t v5 = 0x6556656C646E7562;
      unint64_t v6 = 0xED00006E6F697372;
      break;
    case 5:
      unint64_t v6 = 0x80000001005B81B0;
      unint64_t v5 = 0xD000000000000012;
      break;
    case 6:
      unint64_t v5 = 0x6572616853707061;
      unint64_t v6 = 0xEB000000004C5255;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xEE0064496E6F6973;
      if (v5 == 0x726556656C707061) {
        goto LABEL_20;
      }
      goto LABEL_23;
    case 2:
      unint64_t v8 = 0xD00000000000001ELL;
      char v9 = "alternativeDistributionPackage";
      goto LABEL_14;
    case 3:
      unint64_t v8 = 0xD000000000000018;
      char v9 = "installVerificationToken";
LABEL_14:
      unint64_t v2 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      if (v5 != v8) {
        goto LABEL_23;
      }
      goto LABEL_20;
    case 4:
      unint64_t v2 = 0xED00006E6F697372;
      if (v5 != 0x6556656C646E7562) {
        goto LABEL_23;
      }
      goto LABEL_20;
    case 5:
      unint64_t v2 = 0x80000001005B81B0;
      unint64_t v3 = 0xD000000000000012;
      goto LABEL_19;
    case 6:
      unint64_t v2 = 0xEB000000004C5255;
      if (v5 != 0x6572616853707061) {
        goto LABEL_23;
      }
      goto LABEL_20;
    default:
LABEL_19:
      if (v5 != v3) {
        goto LABEL_23;
      }
LABEL_20:
      if (v6 == v2) {
        char v10 = 1;
      }
      else {
LABEL_23:
      }
        char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10 & 1;
  }
}

uint64_t sub_10051D74C(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD000000000000012;
  unint64_t v3 = 0x80000001005B7E00;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD000000000000012;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE800000000000000;
      unint64_t v5 = 0x746963696C706D69;
      break;
    case 2:
      unint64_t v5 = 0x5F68736572666572;
      unint64_t v3 = 0xED00006E656B6F74;
      break;
    case 3:
      unint64_t v5 = 0xD00000000000002FLL;
      unint64_t v3 = 0x80000001005B7E30;
      break;
    default:
      break;
  }
  unint64_t v6 = 0x80000001005B7E00;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE800000000000000;
      if (v5 == 0x746963696C706D69) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v2 = 0x5F68736572666572;
      unint64_t v6 = 0xED00006E656B6F74;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0x80000001005B7E30;
      if (v5 == 0xD00000000000002FLL) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10051D8F0(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xEB0000000064496DLL;
  uint64_t v3 = 0x657449656C707061;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 0x726556656C707061;
    }
    else {
      uint64_t v5 = 0x6572756C696166;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xEE0064496E6F6973;
    }
    else {
      unint64_t v6 = 0xE700000000000000;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  uint64_t v5 = 0x657449656C707061;
  unint64_t v6 = 0xEB0000000064496DLL;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      uint64_t v3 = 0x726556656C707061;
    }
    else {
      uint64_t v3 = 0x6572756C696166;
    }
    if (v7 == 1) {
      unint64_t v2 = 0xEE0064496E6F6973;
    }
    else {
      unint64_t v2 = 0xE700000000000000;
    }
  }
LABEL_15:
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_10051DA2C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x7470697263736564;
  }
  else {
    uint64_t v3 = 1701080931;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xEB000000006E6F69;
  }
  if (a2) {
    uint64_t v5 = 0x7470697263736564;
  }
  else {
    uint64_t v5 = 1701080931;
  }
  if (a2) {
    unint64_t v6 = 0xEB000000006E6F69;
  }
  else {
    unint64_t v6 = 0xE400000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10051DAD4(char a1, char a2)
{
  unint64_t v3 = 0xE200000000000000;
  uint64_t v4 = 25705;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v4 = 1717924456;
      break;
    case 2:
      uint64_t v4 = 0x7475626972747461;
      unint64_t v3 = 0xEA00000000007365;
      break;
    case 3:
      uint64_t v4 = 0x6E6F6974616C6572;
      unint64_t v3 = 0xED00007370696873;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xE200000000000000;
  uint64_t v6 = 25705;
  switch(a2)
  {
    case 1:
      unint64_t v5 = 0xE400000000000000;
      if (v4 == 1717924456) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      uint64_t v6 = 0x7475626972747461;
      unint64_t v5 = 0xEA00000000007365;
      goto LABEL_9;
    case 3:
      unint64_t v5 = 0xED00007370696873;
      if (v4 == 0x6E6F6974616C6572) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v4 != v6) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v5) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10051DC60(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 7565161;
    }
    else {
      uint64_t v3 = 0x6F7674656C707061;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE300000000000000;
    }
    else {
      unint64_t v4 = 0xE900000000000073;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 7565161;
      }
      else {
        uint64_t v6 = 0x6F7674656C707061;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE300000000000000;
      }
      else {
        unint64_t v7 = 0xE900000000000073;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE300000000000000;
    uint64_t v3 = 7893871;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE300000000000000;
  if (v3 != 7893871)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_10051DD64(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x657461647075;
  }
  else {
    uint64_t v3 = 7628135;
  }
  if (v2) {
    unint64_t v4 = 0xE300000000000000;
  }
  else {
    unint64_t v4 = 0xE600000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x657461647075;
  }
  else {
    uint64_t v5 = 7628135;
  }
  if (a2) {
    unint64_t v6 = 0xE600000000000000;
  }
  else {
    unint64_t v6 = 0xE300000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10051DE00(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0x6449656C646E7562;
  unint64_t v3 = 0xE800000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x6449656C646E7562;
  switch(v4)
  {
    case 1:
      unint64_t v6 = "externalVersionId";
      goto LABEL_9;
    case 2:
      unint64_t v6 = "latestVersionInfo";
      goto LABEL_9;
    case 3:
      unint64_t v5 = 0xD000000000000010;
      unint64_t v3 = 0x80000001005B79E0;
      break;
    case 4:
      unint64_t v5 = 0x7470697263736564;
      unint64_t v3 = 0xEB000000006E6F69;
      break;
    case 5:
      unint64_t v3 = 0xE600000000000000;
      unint64_t v5 = 0x73726566666FLL;
      break;
    case 6:
      unint64_t v3 = 0xE700000000000000;
      unint64_t v5 = 0x6B726F77747261;
      break;
    case 7:
      unint64_t v6 = "screenshotsByType";
LABEL_9:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      unint64_t v5 = 0xD000000000000011;
      break;
    default:
      break;
  }
  unint64_t v7 = 0xE800000000000000;
  switch(a2)
  {
    case 1:
      char v8 = "externalVersionId";
      goto LABEL_18;
    case 2:
      char v8 = "latestVersionInfo";
      goto LABEL_18;
    case 3:
      unint64_t v2 = 0xD000000000000010;
      unint64_t v7 = 0x80000001005B79E0;
      break;
    case 4:
      unint64_t v2 = 0x7470697263736564;
      unint64_t v7 = 0xEB000000006E6F69;
      break;
    case 5:
      unint64_t v7 = 0xE600000000000000;
      unint64_t v2 = 0x73726566666FLL;
      break;
    case 6:
      unint64_t v7 = 0xE700000000000000;
      unint64_t v2 = 0x6B726F77747261;
      break;
    case 7:
      char v8 = "screenshotsByType";
LABEL_18:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      unint64_t v2 = 0xD000000000000011;
      break;
    default:
      break;
  }
  if (v5 == v2 && v3 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_10051E050(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xE900000000000068;
  uint64_t v3 = 0x7461507465737361;
  uint64_t v4 = a1;
  uint64_t v5 = 0x7461507465737361;
  unint64_t v6 = 0xE900000000000068;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x44746E6169726176;
      unint64_t v6 = 0xEE00736C69617465;
      break;
    case 2:
      uint64_t v5 = 0x546C6C6174736E69;
      unint64_t v6 = 0xEE00737465677261;
      break;
    case 3:
      unint64_t v6 = 0xE800000000000000;
      uint64_t v5 = 0x644963696C627570;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xEE00736C69617465;
      if (v5 == 0x44746E6169726176) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      uint64_t v3 = 0x546C6C6174736E69;
      unint64_t v2 = 0xEE00737465677261;
      goto LABEL_9;
    case 3:
      unint64_t v2 = 0xE800000000000000;
      if (v5 == 0x644963696C627570) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v3) {
        goto LABEL_14;
      }
LABEL_12:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10051E218(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xEE00737465677261;
  uint64_t v3 = 0x546C6C6174736E69;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 0x726556656C707061;
    }
    else {
      uint64_t v5 = 0x6E6F6973726576;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xEE0064496E6F6973;
    }
    else {
      unint64_t v6 = 0xE700000000000000;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  uint64_t v5 = 0x546C6C6174736E69;
  unint64_t v6 = 0xEE00737465677261;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      uint64_t v3 = 0x726556656C707061;
    }
    else {
      uint64_t v3 = 0x6E6F6973726576;
    }
    if (v7 == 1) {
      unint64_t v2 = 0xEE0064496E6F6973;
    }
    else {
      unint64_t v2 = 0xE700000000000000;
    }
  }
LABEL_15:
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_10051E35C(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xE900000000000068;
  uint64_t v3 = 0x7461507465737361;
  uint64_t v4 = a1;
  unint64_t v5 = 0x7461507465737361;
  unint64_t v6 = 0xE900000000000068;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x74654461746C6564;
      unint64_t v6 = 0xEC000000736C6961;
      break;
    case 2:
      unint64_t v6 = 0xE800000000000000;
      unint64_t v5 = 0x644963696C627570;
      break;
    case 3:
      unint64_t v5 = 0x6156656372756F73;
      unint64_t v6 = 0xED0000746E616972;
      break;
    case 4:
      unint64_t v6 = 0x80000001005B82E0;
      unint64_t v5 = 0xD000000000000016;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xEC000000736C6961;
      if (v5 == 0x74654461746C6564) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v2 = 0xE800000000000000;
      if (v5 != 0x644963696C627570) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      uint64_t v3 = 0x6156656372756F73;
      unint64_t v2 = 0xED0000746E616972;
      goto LABEL_12;
    case 4:
      unint64_t v2 = 0x80000001005B82E0;
      if (v5 != 0xD000000000000016) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v3) {
        goto LABEL_16;
      }
LABEL_13:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10051E560(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x363532616873;
  }
  else {
    uint64_t v3 = 3490893;
  }
  if (v2) {
    unint64_t v4 = 0xE300000000000000;
  }
  else {
    unint64_t v4 = 0xE600000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x363532616873;
  }
  else {
    uint64_t v5 = 3490893;
  }
  if (a2) {
    unint64_t v6 = 0xE600000000000000;
  }
  else {
    unint64_t v6 = 0xE300000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10051E5FC(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 29551;
  }
  else {
    uint64_t v3 = 0x656369766564;
  }
  if (v2) {
    unint64_t v4 = 0xE600000000000000;
  }
  else {
    unint64_t v4 = 0xE200000000000000;
  }
  if (a2) {
    uint64_t v5 = 29551;
  }
  else {
    uint64_t v5 = 0x656369766564;
  }
  if (a2) {
    unint64_t v6 = 0xE200000000000000;
  }
  else {
    unint64_t v6 = 0xE600000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10051E694(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xED00006E6F697461;
  uint64_t v3 = 0x7A69726F68747541;
  uint64_t v4 = a1;
  uint64_t v5 = 0x7A69726F68747541;
  unint64_t v6 = 0xED00006E6F697461;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x2D746E65746E6F43;
      unint64_t v6 = 0xEC00000065707954;
      break;
    case 2:
      uint64_t v5 = 0x6567412D72657355;
      unint64_t v6 = 0xEA0000000000746ELL;
      break;
    case 3:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v5 = 0x65676E6152;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xEC00000065707954;
      if (v5 == 0x2D746E65746E6F43) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      uint64_t v3 = 0x6567412D72657355;
      unint64_t v2 = 0xEA0000000000746ELL;
      goto LABEL_9;
    case 3:
      unint64_t v2 = 0xE500000000000000;
      if (v5 == 0x65676E6152) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v3) {
        goto LABEL_14;
      }
LABEL_12:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10051E84C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x644965726E6567;
  }
  else {
    uint64_t v3 = 0x65726E6567;
  }
  if (v2) {
    unint64_t v4 = 0xE500000000000000;
  }
  else {
    unint64_t v4 = 0xE700000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x644965726E6567;
  }
  else {
    uint64_t v5 = 0x65726E6567;
  }
  if (a2) {
    unint64_t v6 = 0xE700000000000000;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10051E8F0(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x656C626D61657270;
  unint64_t v3 = 0xE800000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x656C626D61657270;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x64616F6C6E776F64;
      break;
    case 2:
      unint64_t v3 = 0xE700000000000000;
      unint64_t v5 = 0x6C6C6174736E69;
      break;
    case 3:
      unint64_t v5 = 0x6C626D6174736F70;
      unint64_t v3 = 0xE900000000000065;
      break;
    case 4:
      unint64_t v5 = 0x656C6C65636E6163;
      unint64_t v3 = 0xE900000000000064;
      break;
    case 5:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v6 = 1937072496;
      goto LABEL_9;
    case 6:
      unint64_t v5 = 0x64656873696E6966;
      break;
    case 7:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v6 = 1818845542;
LABEL_9:
      unint64_t v5 = v6 & 0xFFFF0000FFFFFFFFLL | 0x646500000000;
      break;
    default:
      break;
  }
  unint64_t v7 = 0xE800000000000000;
  switch(a2)
  {
    case 1:
      if (v5 == 0x64616F6C6E776F64) {
        goto LABEL_25;
      }
      goto LABEL_27;
    case 2:
      unint64_t v7 = 0xE700000000000000;
      if (v5 != 0x6C6C6174736E69) {
        goto LABEL_27;
      }
      goto LABEL_25;
    case 3:
      unint64_t v7 = 0xE900000000000065;
      if (v5 != 0x6C626D6174736F70) {
        goto LABEL_27;
      }
      goto LABEL_25;
    case 4:
      unint64_t v7 = 0xE900000000000064;
      if (v5 != 0x656C6C65636E6163) {
        goto LABEL_27;
      }
      goto LABEL_25;
    case 5:
      unint64_t v7 = 0xE600000000000000;
      uint64_t v8 = 1937072496;
      goto LABEL_24;
    case 6:
      uint64_t v2 = 0x64656873696E6966;
      goto LABEL_21;
    case 7:
      unint64_t v7 = 0xE600000000000000;
      uint64_t v8 = 1818845542;
LABEL_24:
      if (v5 == (v8 & 0xFFFF0000FFFFFFFFLL | 0x646500000000)) {
        goto LABEL_25;
      }
      goto LABEL_27;
    default:
LABEL_21:
      if (v5 != v2) {
        goto LABEL_27;
      }
LABEL_25:
      if (v3 == v7) {
        char v9 = 1;
      }
      else {
LABEL_27:
      }
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
  }
}

uint64_t sub_10051EB68(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x61746C6564;
  }
  else {
    uint64_t v3 = 0x6D6563616C706572;
  }
  if (v2) {
    unint64_t v4 = 0xEB00000000746E65;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x61746C6564;
  }
  else {
    uint64_t v5 = 0x6D6563616C706572;
  }
  if (a2) {
    unint64_t v6 = 0xE500000000000000;
  }
  else {
    unint64_t v6 = 0xEB00000000746E65;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10051EC14(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x617461646174656DLL;
  unint64_t v3 = 0xE800000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x617461646174656DLL;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x6D726F6674616C70;
      break;
    case 2:
      unint64_t v5 = 0xD000000000000014;
      unint64_t v3 = 0x80000001005B7860;
      break;
    case 3:
      unint64_t v3 = 0x80000001005B7880;
      unint64_t v5 = 0xD000000000000010;
      break;
    case 4:
      unint64_t v3 = 0xE600000000000000;
      unint64_t v5 = 0x737465737361;
      break;
    case 5:
      unint64_t v5 = 0x2D64656E6E696874;
      unint64_t v3 = 0xEE00737465737361;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE800000000000000;
  switch(a2)
  {
    case 1:
      if (v5 == 0x6D726F6674616C70) {
        goto LABEL_16;
      }
      goto LABEL_19;
    case 2:
      unint64_t v6 = 0x80000001005B7860;
      if (v5 != 0xD000000000000014) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 3:
      unint64_t v6 = 0x80000001005B7880;
      if (v5 != 0xD000000000000010) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 4:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v2 = 0x737465737361;
      goto LABEL_15;
    case 5:
      unint64_t v6 = 0xEE00737465737361;
      if (v5 != 0x2D64656E6E696874) {
        goto LABEL_19;
      }
      goto LABEL_16;
    default:
LABEL_15:
      if (v5 != v2) {
        goto LABEL_19;
      }
LABEL_16:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_19:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10051EE40(uint64_t a1)
{
  uint64_t v33 = type metadata accessor for URLQueryItem();
  uint64_t v3 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  unint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  char v7 = _swiftEmptyArrayStorage;
  if (!v6) {
    return (uint64_t)v7;
  }
  uint64_t v31 = v5;
  uint64_t v25 = v1;
  uint64_t v35 = _swiftEmptyArrayStorage;
  sub_100455C5C(0, v6, 0);
  char v7 = v35;
  uint64_t result = sub_100458280(a1);
  uint64_t v10 = result;
  uint64_t v11 = 0;
  uint64_t v12 = a1 + 64;
  uint64_t v29 = a1 + 64;
  uint64_t v30 = v3 + 32;
  uint64_t v26 = a1 + 80;
  int64_t v27 = v6;
  uint64_t v32 = v3;
  uint64_t v28 = v9;
  char v13 = v31;
  while ((v10 & 0x8000000000000000) == 0 && v10 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v16 = (unint64_t)v10 >> 6;
    if ((*(void *)(v12 + 8 * ((unint64_t)v10 >> 6)) & (1 << v10)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(a1 + 36) != v9) {
      goto LABEL_24;
    }
    uint64_t v34 = v11;
    uint64_t v17 = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    URLQueryItem.init(name:value:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v35 = v7;
    unint64_t v19 = v7[2];
    unint64_t v18 = v7[3];
    if (v19 >= v18 >> 1)
    {
      sub_100455C5C(v18 > 1, v19 + 1, 1);
      char v7 = v35;
    }
    v7[2] = v19 + 1;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v32 + 32))((unint64_t)v7+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(void *)(v32 + 72) * v19, v13, v33);
    int64_t v14 = 1 << *(unsigned char *)(v17 + 32);
    if (v10 >= v14) {
      goto LABEL_25;
    }
    uint64_t v12 = v29;
    uint64_t v20 = *(void *)(v29 + 8 * v16);
    if ((v20 & (1 << v10)) == 0) {
      goto LABEL_26;
    }
    a1 = v17;
    LODWORD(v9) = v28;
    if (*(_DWORD *)(v17 + 36) != v28) {
      goto LABEL_27;
    }
    unint64_t v21 = v20 & (-2 << (v10 & 0x3F));
    if (v21)
    {
      int64_t v14 = __clz(__rbit64(v21)) | v10 & 0xFFFFFFFFFFFFFFC0;
      int64_t v15 = v27;
    }
    else
    {
      unint64_t v22 = v16 + 1;
      unint64_t v23 = (unint64_t)(v14 + 63) >> 6;
      int64_t v15 = v27;
      if (v16 + 1 < v23)
      {
        unint64_t v24 = *(void *)(v29 + 8 * v22);
        if (v24)
        {
LABEL_20:
          int64_t v14 = __clz(__rbit64(v24)) + (v22 << 6);
        }
        else
        {
          while (v23 - 2 != v16)
          {
            unint64_t v24 = *(void *)(v26 + 8 * v16++);
            if (v24)
            {
              unint64_t v22 = v16 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v11 = v34 + 1;
    uint64_t v10 = v14;
    if (v34 + 1 == v15) {
      return (uint64_t)v7;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_10051F150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[11] = a5;
  v6[12] = a6;
  v6[9] = a3;
  v6[10] = a4;
  v6[7] = a1;
  v6[8] = a2;
  uint64_t v7 = type metadata accessor for Logger();
  v6[13] = v7;
  v6[14] = *(void *)(v7 - 8);
  v6[15] = swift_task_alloc();
  v6[16] = swift_task_alloc();
  v6[17] = swift_task_alloc();
  sub_1000172F8(&qword_10065FC50);
  v6[18] = swift_task_alloc();
  v6[19] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for OAuthServerMetadata();
  v6[20] = v8;
  v6[21] = *(void *)(v8 - 8);
  v6[22] = swift_task_alloc();
  v6[23] = swift_task_alloc();
  v6[24] = type metadata accessor for ConfigurationBag(0);
  v6[25] = swift_task_alloc();
  return _swift_task_switch(sub_10051F310, 0, 0);
}

uint64_t sub_10051F310()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v4 = type metadata accessor for OAuthClient();
  uint64_t v5 = *(int *)(v4 + 24);
  *(_DWORD *)(v0 + 272) = v5;
  *(void *)(v3 + v5) = v1;
  uint64_t v6 = *(int *)(v4 + 20);
  *(_DWORD *)(v0 + 276) = v6;
  uint64_t v7 = v3 + v6;
  uint64_t v8 = type metadata accessor for UUID();
  *(void *)(v0 + 208) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v0 + 216) = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v2, v8);
  *(void *)(v0 + 40) = type metadata accessor for PlainHTTP();
  *(void *)(v0 + 48) = &off_1006475A8;
  *(void *)(v0 + 16) = v1;
  swift_retain_n();
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v10;
  void *v10 = v0;
  v10[1] = sub_10051F464;
  uint64_t v11 = *(void *)(v0 + 200);
  uint64_t v12 = *(void *)(v0 + 96);
  uint64_t v13 = *(void *)(v0 + 72);
  uint64_t v14 = *(void *)(v0 + 80);
  return sub_1002CDB18(v11, v13, v14, v0 + 16, v12);
}

uint64_t sub_10051F464()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 232) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = sub_10051FDDC;
  }
  else
  {
    sub_100014524(v2 + 16);
    uint64_t v3 = sub_10051F588;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10051F588()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[19];
  sub_100017238(v0[25] + *(int *)(v0[24] + 32), v3, &qword_10065FC50);
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  v0[30] = v4;
  v0[31] = (v2 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v4(v3, 1, v1) == 1)
  {
    sub_10001729C(v0[19], &qword_10065FC50);
    uint64_t v5 = (void *)swift_task_alloc();
    v0[32] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_10051F88C;
    uint64_t v6 = v0[18];
    uint64_t v7 = v0[11];
    uint64_t v8 = v0[12];
    uint64_t v9 = v0[9];
    uint64_t v10 = v0[10];
    return sub_10033A668(v6, v9, v10, v7, v8);
  }
  else
  {
    uint64_t v12 = v0[23];
    uint64_t v13 = v0[19];
    swift_bridgeObjectRelease();
    sub_1000188D4(v13, v12, (uint64_t (*)(void))type metadata accessor for OAuthServerMetadata);
    static Logger.oauth.getter();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    uint64_t v27 = v0[17];
    uint64_t v28 = v0[23];
    if (v16)
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Found OAuth server metadata in configuration bag", v17, 2u);
      swift_slowDealloc();
    }
    uint64_t v18 = v0[26];
    uint64_t v19 = v0[27];
    uint64_t v20 = v0[25];
    uint64_t v21 = v0[14];
    unint64_t v23 = (void *)v0[12];
    uint64_t v22 = v0[13];
    uint64_t v24 = v0[8];
    uint64_t v26 = v0[7];

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v24, v18);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v27, v22);
    sub_1003C1E40(v20);
    sub_1000188D4(v28, v26, (uint64_t (*)(void))type metadata accessor for OAuthServerMetadata);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = (uint64_t (*)(void))v0[1];
    return v25();
  }
}

uint64_t sub_10051F88C()
{
  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = sub_10051FF1C;
  }
  else {
    uint64_t v2 = sub_10051F9C0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10051F9C0()
{
  uint64_t v1 = *(void *)(v0 + 144);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0 + 240))(v1, 1, *(void *)(v0 + 160)) == 1)
  {
    sub_10001729C(v1, &qword_10065FC50);
    static Logger.oauth.getter();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Did not find OAuth server metadata", v4, 2u);
      swift_slowDealloc();
    }
    uint64_t v5 = *(void *)(v0 + 208);
    uint64_t v6 = *(void *)(v0 + 216);
    uint64_t v27 = *(void *)(v0 + 200);
    uint64_t v7 = *(void *)(v0 + 128);
    uint64_t v9 = *(void *)(v0 + 104);
    uint64_t v8 = *(void *)(v0 + 112);
    uint64_t v10 = *(void **)(v0 + 96);
    uint64_t v11 = *(void *)(v0 + 64);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    type metadata accessor for InternalError();
    sub_100013DD4((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    swift_release();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v12(v11, v5);
    sub_1003C1E40(v27);
    v12(*(void *)(v0 + 56) + *(int *)(v0 + 276), *(void *)(v0 + 208));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    sub_1000188D4(v1, *(void *)(v0 + 176), (uint64_t (*)(void))type metadata accessor for OAuthServerMetadata);
    static Logger.oauth.getter();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    uint64_t v28 = *(void *)(v0 + 120);
    uint64_t v29 = *(void *)(v0 + 176);
    if (v16)
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Found OAuth server metadata", v17, 2u);
      swift_slowDealloc();
    }
    uint64_t v18 = *(void *)(v0 + 208);
    uint64_t v19 = *(void *)(v0 + 216);
    uint64_t v20 = *(void *)(v0 + 200);
    uint64_t v22 = *(void *)(v0 + 104);
    uint64_t v21 = *(void *)(v0 + 112);
    unint64_t v23 = *(void **)(v0 + 96);
    uint64_t v24 = *(void *)(v0 + 64);
    uint64_t v26 = *(void *)(v0 + 56);

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v24, v18);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v28, v22);
    sub_1003C1E40(v20);
    sub_1000188D4(v29, v26, (uint64_t (*)(void))type metadata accessor for OAuthServerMetadata);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v13();
}

uint64_t sub_10051FDDC()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 64);

  swift_release();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v4(v3, v1);
  sub_100014524(v0 + 16);
  v4(*(void *)(v0 + 56) + *(int *)(v0 + 276), *(void *)(v0 + 208));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10051FF1C()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 64);

  swift_release();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v5(v4, v1);
  sub_1003C1E40(v3);
  v5(*(void *)(v0 + 56) + *(int *)(v0 + 276), *(void *)(v0 + 208));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_10052005C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[33] = a3;
  v4[34] = v3;
  v4[31] = a1;
  v4[32] = a2;
  return _swift_task_switch(sub_100520080, 0, 0);
}

uint64_t sub_100520080()
{
  sub_10001733C(*(void *)(v0 + 256) + 40, v0 + 232, &qword_10065C4D0);
  sub_10001733C(v0 + 232, v0 + 216, &qword_10065C4D0);
  if (!*(void *)(v0 + 224))
  {
    sub_1003C8598();
    swift_allocError();
    *(void *)uint64_t v8 = 3;
    *(void *)(v8 + 8) = 0;
    *(void *)(v8 + 16) = 0;
    *(void *)(v8 + 24) = 0;
    char v9 = 12;
    goto LABEL_10;
  }
  uint64_t v1 = *(void *)(v0 + 272);
  *(_OWORD *)(v0 + 200) = *(_OWORD *)(v0 + 216);
  uint64_t v2 = type metadata accessor for OAuthServerMetadata();
  uint64_t v3 = *(void *)(v1 + *(int *)(v2 + 28));
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4) {
    goto LABEL_8;
  }
  uint64_t v19 = v2;
  swift_bridgeObjectRetain_n();
  sub_10018B0F0(v0 + 232);
  uint64_t v5 = 0;
  while (2)
  {
    uint64_t v6 = v3 + v5++;
    switch(*(unsigned char *)(v6 + 32))
    {
      case 2:
        swift_bridgeObjectRelease();
        goto LABEL_15;
      default:
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v7)
        {
LABEL_15:
          uint64_t v12 = *(void *)(v0 + 272);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1000172F8(&qword_10065B658);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_1005A4070;
          *(void *)(inited + 32) = 0x79745F746E617267;
          *(void *)(inited + 40) = 0xEA00000000006570;
          strcpy((char *)(inited + 48), "refresh_token");
          *(_WORD *)(inited + 62) = -4864;
          strcpy((char *)(inited + 64), "refresh_token");
          *(_WORD *)(inited + 78) = -4864;
          *(_OWORD *)(inited + 80) = *(_OWORD *)(v0 + 200);
          unint64_t v14 = sub_10044B560(inited);
          *(void *)(v0 + 280) = v14;
          uint64_t v15 = *(void *)(v12 + *(int *)(type metadata accessor for OAuthClient() + 24));
          uint64_t v16 = v12 + *(int *)(v19 + 20);
          uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100662098
                                                                                    + dword_100662098);
          uint64_t v17 = (void *)swift_task_alloc();
          *(void *)(v0 + 288) = v17;
          *uint64_t v17 = v0;
          v17[1] = sub_100520440;
          uint64_t v18 = *(void *)(v0 + 264);
          return v20(v0 + 112, v15, v14, v16, v18);
        }
        if (v4 != v5) {
          continue;
        }
        swift_bridgeObjectRelease_n();
        sub_10018AFE0(v0 + 232);
LABEL_8:
        sub_1003C8598();
        swift_allocError();
        *(_OWORD *)uint64_t v8 = xmmword_1005B51D0;
        *(void *)(v8 + 16) = 0;
        *(void *)(v8 + 24) = 0;
        char v9 = 8;
LABEL_10:
        *(unsigned char *)(v8 + 32) = v9;
        swift_willThrow();
        uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
        return v10();
    }
  }
}

uint64_t sub_100520440()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 296) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1005205A4, 0, 0);
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 248);
    swift_bridgeObjectRelease();
    long long v4 = *(_OWORD *)(v2 + 128);
    *(_OWORD *)uint64_t v3 = *(_OWORD *)(v2 + 112);
    *(_OWORD *)(v3 + 16) = v4;
    long long v5 = *(_OWORD *)(v2 + 144);
    long long v6 = *(_OWORD *)(v2 + 160);
    long long v7 = *(_OWORD *)(v2 + 176);
    *(void *)(v3 + 80) = *(void *)(v2 + 192);
    *(_OWORD *)(v3 + 48) = v6;
    *(_OWORD *)(v3 + 64) = v7;
    *(_OWORD *)(v3 + 32) = v5;
    uint64_t v8 = *(uint64_t (**)(void))(v2 + 8);
    return v8();
  }
}

uint64_t sub_1005205A4()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100520608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[39] = a3;
  v4[40] = v3;
  v4[37] = a1;
  v4[38] = a2;
  return _swift_task_switch(sub_10052062C, 0, 0);
}

uint64_t sub_10052062C()
{
  uint64_t v1 = v0[39];
  uint64_t v2 = v0[40];
  uint64_t v3 = v0[38];
  sub_1000172F8(&qword_10065B658);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A9D80;
  *(void *)(inited + 32) = 0x79745F746E617267;
  *(void *)(inited + 40) = 0xEA00000000006570;
  *(void *)(inited + 48) = 0xD00000000000002FLL;
  *(void *)(inited + 56) = 0x80000001005B7E30;
  *(void *)(inited + 64) = 0x695F746E65696C63;
  *(void *)(inited + 72) = 0xE900000000000064;
  uint64_t v5 = type metadata accessor for OAuthClient();
  *(void *)(inited + 80) = UUID.uuidString.getter();
  *(void *)(inited + 88) = v6;
  *(void *)(inited + 96) = 0xD000000000000011;
  *(void *)(inited + 104) = 0x80000001005C1620;
  *(void *)(inited + 112) = 0xD00000000000002DLL;
  *(void *)(inited + 120) = 0x80000001005C1640;
  strcpy((char *)(inited + 128), "subject_token");
  *(_WORD *)(inited + 142) = -4864;
  *(void *)(inited + 144) = v3;
  *(void *)(inited + 152) = v1;
  *(void *)(inited + 160) = 0xD000000000000012;
  *(void *)(inited + 168) = 0x80000001005C1670;
  *(void *)(inited + 176) = 0xD00000000000002DLL;
  *(void *)(inited + 184) = 0x80000001005C1640;
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_10044B560(inited);
  v0[41] = v7;
  uint64_t v8 = *(void *)(v2 + *(int *)(v5 + 24));
  uint64_t v9 = v2 + *(int *)(type metadata accessor for OAuthServerMetadata() + 20);
  uint64_t v10 = sub_1005163F0();
  v0[42] = v10;
  uint64_t v13 = (char *)&dword_100662098 + dword_100662098;
  uint64_t v11 = (void *)swift_task_alloc();
  v0[43] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_100520858;
  return ((uint64_t (*)(void *, uint64_t, unint64_t, uint64_t, uint64_t))v13)(v0 + 26, v8, v7, v9, v10);
}

uint64_t sub_100520858()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 352) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1005209CC, 0, 0);
  }
  else
  {
    uint64_t v3 = *(void **)(v2 + 336);
    uint64_t v4 = *(void *)(v2 + 296);
    swift_bridgeObjectRelease();

    long long v5 = *(_OWORD *)(v2 + 224);
    *(_OWORD *)uint64_t v4 = *(_OWORD *)(v2 + 208);
    *(_OWORD *)(v4 + 16) = v5;
    long long v6 = *(_OWORD *)(v2 + 240);
    long long v7 = *(_OWORD *)(v2 + 256);
    long long v8 = *(_OWORD *)(v2 + 272);
    *(void *)(v4 + 80) = *(void *)(v2 + 288);
    *(_OWORD *)(v4 + 48) = v7;
    *(_OWORD *)(v4 + 64) = v8;
    *(_OWORD *)(v4 + 32) = v6;
    uint64_t v9 = *(uint64_t (**)(void))(v2 + 8);
    return v9();
  }
}

uint64_t sub_1005209CC()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100520A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[17] = a5;
  v6[18] = v5;
  v6[15] = a3;
  v6[16] = a4;
  v6[13] = a1;
  v6[14] = a2;
  uint64_t v7 = type metadata accessor for Logger();
  v6[19] = v7;
  v6[20] = *(void *)(v7 - 8);
  v6[21] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for OAuthAuthorizationRequest();
  v6[22] = v8;
  v6[23] = *(void *)(v8 - 8);
  v6[24] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for OAuthAuthorizationContext();
  v6[25] = v9;
  v6[26] = *(void *)(v9 - 8);
  v6[27] = swift_task_alloc();
  v6[28] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for URL();
  v6[29] = v10;
  v6[30] = *(void *)(v10 - 8);
  v6[31] = swift_task_alloc();
  v6[32] = swift_task_alloc();
  v6[33] = swift_task_alloc();
  return _swift_task_switch(sub_100520C40, 0, 0);
}

uint64_t sub_100520C40()
{
  v0[7] = sub_100521A9C(v0[32], v0[13], v0[14]);
  v0[8] = v1;
  v0[9] = v2;
  v0[10] = v3;
  v0[34] = v1;
  v0[35] = v2;
  v0[36] = v3;
  uint64_t v4 = v0[33];
  uint64_t v6 = v0[30];
  uint64_t v5 = v0[31];
  uint64_t v8 = v0[28];
  uint64_t v7 = v0[29];
  uint64_t v10 = v0[26];
  uint64_t v9 = v0[27];
  uint64_t v13 = v0[25];
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 32))(v4, v0[32], v7);
  LogKey.stringValue.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v7);
  OAuthAuthorizationContext.init(logKey:requestURL:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v8, v13);
  OAuthAuthorizationRequest.init(context:)();
  uint64_t v11 = (void *)swift_task_alloc();
  v0[37] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_100520E48;
  return OAuthAuthorizationRequest.run()();
}

uint64_t sub_100520E48(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 304) = a1;
  *(void *)(v3 + 312) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_10052154C;
  }
  else
  {
    uint64_t v4 = sub_100520F70;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100520F70()
{
  uint64_t v65 = v0;
  uint64_t v1 = *(void *)(v0 + 304);
  if (!*(void *)(v1 + 16)) {
    goto LABEL_11;
  }
  unint64_t v2 = sub_100016D20(1701080931, 0xE400000000000000);
  if ((v3 & 1) == 0 || !*(void *)(v1 + 16)) {
    goto LABEL_11;
  }
  uint64_t v4 = *(void *)(v0 + 304);
  uint64_t v5 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v2);
  uint64_t v6 = *v5;
  uint64_t v60 = v5[1];
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_100016D20(0x6574617473, 0xE500000000000000);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    uint64_t v15 = *(void *)(v0 + 304);
    uint64_t v16 = *(void *)(v0 + 240);
    uint64_t v56 = *(void *)(v0 + 232);
    uint64_t v61 = *(void *)(v0 + 264);
    uint64_t v54 = *(void *)(v0 + 224);
    uint64_t v18 = *(void *)(v0 + 200);
    uint64_t v17 = *(void *)(v0 + 208);
    uint64_t v19 = *(void *)(v0 + 184);
    uint64_t v20 = *(void *)(v0 + 192);
    uint64_t v21 = *(void *)(v0 + 176);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10052FA24(v15, v0 + 16);
    sub_1003C8598();
    swift_allocError();
    sub_10025D0F8((long long *)(v0 + 16), v22);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v21);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v54, v18);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v61, v56);
    goto LABEL_12;
  }
  uint64_t v10 = *(void *)(v0 + 280);
  uint64_t v9 = *(void *)(v0 + 288);
  uint64_t v11 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v7);
  uint64_t v13 = *v11;
  unint64_t v12 = v11[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v13 == v10 && v12 == v9)
  {
    uint64_t v51 = v6;
    goto LABEL_17;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)())
  {
    uint64_t v51 = v6;
LABEL_17:
    uint64_t v25 = *(void *)(v0 + 264);
    uint64_t v26 = *(void *)(v0 + 240);
    uint64_t v27 = *(void *)(v0 + 224);
    uint64_t v52 = *(void *)(v0 + 232);
    uint64_t v28 = *(void *)(v0 + 208);
    uint64_t v29 = *(void *)(v0 + 192);
    uint64_t v30 = *(void *)(v0 + 200);
    uint64_t v31 = *(void *)(v0 + 176);
    uint64_t v32 = *(void *)(v0 + 184);
    uint64_t v57 = *(void *)(v0 + 56);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v29, v31);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v30);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v52);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 8);
    uint64_t v34 = *(void *)(v0 + 272);
    return v33(v51, v60, v57, v34);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static Logger.oauth.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.error.getter();
  BOOL v37 = os_log_type_enabled(v35, v36);
  unint64_t v38 = *(void *)(v0 + 288);
  if (v37)
  {
    uint64_t v53 = *(void *)(v0 + 280);
    uint64_t v55 = *(void *)(v0 + 160);
    uint64_t v58 = *(void *)(v0 + 152);
    uint64_t v62 = *(void *)(v0 + 168);
    uint64_t v39 = swift_slowAlloc();
    v64[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v39 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 88) = sub_1000143F4(v13, v12, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v39 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 96) = sub_1000143F4(v53, v38, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Invalid state, received '%s' but expected '%s'", (uint8_t *)v39, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v62, v58);
  }
  else
  {
    uint64_t v41 = *(void *)(v0 + 160);
    uint64_t v40 = *(void *)(v0 + 168);
    uint64_t v42 = *(void *)(v0 + 152);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
  }
  uint64_t v43 = *(void *)(v0 + 240);
  uint64_t v59 = *(void *)(v0 + 232);
  uint64_t v63 = *(void *)(v0 + 264);
  uint64_t v44 = *(void *)(v0 + 224);
  uint64_t v46 = *(void *)(v0 + 200);
  uint64_t v45 = *(void *)(v0 + 208);
  uint64_t v47 = *(void *)(v0 + 184);
  uint64_t v48 = *(void *)(v0 + 192);
  uint64_t v49 = *(void *)(v0 + 176);
  sub_1003C8598();
  swift_allocError();
  *(void *)uint64_t v50 = 2;
  *(void *)(v50 + 8) = 0;
  *(void *)(v50 + 16) = 0;
  *(void *)(v50 + 24) = 0;
  *(unsigned char *)(v50 + 32) = 12;
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v48, v49);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v63, v59);
LABEL_12:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
  return v23();
}

uint64_t sub_10052154C()
{
  uint64_t v1 = v0[33];
  uint64_t v2 = v0[29];
  uint64_t v3 = v0[30];
  uint64_t v4 = v0[28];
  uint64_t v5 = v0[25];
  uint64_t v6 = v0[26];
  (*(void (**)(void, void))(v0[23] + 8))(v0[24], v0[22]);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100521660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[38] = a6;
  v7[39] = v6;
  v7[36] = a4;
  v7[37] = a5;
  v7[34] = a2;
  v7[35] = a3;
  v7[33] = a1;
  return _swift_task_switch(sub_10052168C, 0, 0);
}

uint64_t sub_10052168C()
{
  uint64_t v1 = v0[37];
  uint64_t v3 = v0[34];
  uint64_t v2 = v0[35];
  sub_1000172F8(&qword_10065B658);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A3FC0;
  *(void *)(inited + 32) = 0x695F746E65696C63;
  *(void *)(inited + 40) = 0xE900000000000064;
  uint64_t v5 = type metadata accessor for OAuthClient();
  *(void *)(inited + 48) = UUID.uuidString.getter();
  *(void *)(inited + 56) = v6;
  *(void *)(inited + 64) = 1701080931;
  *(void *)(inited + 72) = 0xE400000000000000;
  *(void *)(inited + 80) = v3;
  *(void *)(inited + 88) = v2;
  *(void *)(inited + 96) = 0x79745F746E617267;
  *(void *)(inited + 104) = 0xEA00000000006570;
  *(void *)(inited + 112) = 0xD000000000000012;
  *(void *)(inited + 120) = 0x80000001005B7E00;
  strcpy((char *)(inited + 128), "redirect_uri");
  *(unsigned char *)(inited + 141) = 0;
  *(_WORD *)(inited + 142) = -5120;
  *(void *)(inited + 144) = 0xD000000000000019;
  *(void *)(inited + 152) = 0x80000001005C14E0;
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_10044B560(inited);
  if (v1)
  {
    uint64_t v9 = v0[36];
    uint64_t v8 = v0[37];
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_100529754(v9, v8, 0x7265765F65646F63, 0xED00007265696669, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  v0[40] = v7;
  uint64_t v11 = v0[39];
  uint64_t v12 = *(void *)(v11 + *(int *)(v5 + 24));
  uint64_t v13 = v11 + *(int *)(type metadata accessor for OAuthServerMetadata() + 20);
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100662098 + dword_100662098);
  uint64_t v14 = (void *)swift_task_alloc();
  v0[41] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_1005218E0;
  uint64_t v15 = v0[38];
  return v17((uint64_t)(v0 + 22), v12, v7, v13, v15);
}

uint64_t sub_1005218E0()
{
  *(void *)(*(void *)v1 + 336) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100521A38;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1005219FC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1005219FC()
{
  uint64_t v1 = *(void *)(v0 + 264);
  long long v2 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v1 + 16) = v2;
  long long v3 = *(_OWORD *)(v0 + 208);
  long long v4 = *(_OWORD *)(v0 + 224);
  long long v5 = *(_OWORD *)(v0 + 240);
  *(void *)(v1 + 80) = *(void *)(v0 + 256);
  *(_OWORD *)(v1 + 48) = v4;
  *(_OWORD *)(v1 + 64) = v5;
  *(_OWORD *)(v1 + 32) = v3;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100521A38()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100521A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v101 = a2;
  uint64_t v4 = v3;
  uint64_t v102 = a3;
  uint64_t v96 = a1;
  uint64_t v5 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v5 - 8);
  long long v99 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = type metadata accessor for SHA256();
  uint64_t v91 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v98 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SHA256Digest();
  uint64_t v88 = *(void *)(v8 - 8);
  uint64_t v89 = v8;
  __chkstk_darwin(v8);
  uint64_t v97 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for String.Encoding();
  uint64_t v93 = *(void *)(v10 - 8);
  uint64_t v94 = v10;
  __chkstk_darwin(v10);
  uint64_t v92 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1000172F8(&qword_10065B650);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for URLComponents();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init(url:resolvingAgainstBaseURL:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    sub_10001729C((uint64_t)v18, &qword_10065B650);
    sub_1003C8598();
    swift_allocError();
    *(_OWORD *)uint64_t v23 = 0u;
    *(_OWORD *)(v23 + 16) = 0u;
    *(unsigned char *)(v23 + 32) = 12;
    return swift_willThrow();
  }
  uint64_t v90 = v20;
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
  uint64_t v86 = v22;
  uint64_t v87 = v19;
  v25(v22, v18, v19);
  UUID.init()();
  uint64_t v26 = UUID.uuidString.getter();
  uint64_t v28 = v27;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  sub_1000172F8(&qword_10065B658);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A9D80;
  *(void *)(inited + 32) = 0x695F746E65696C63;
  *(void *)(inited + 40) = 0xE900000000000064;
  type metadata accessor for OAuthClient();
  *(void *)(inited + 48) = UUID.uuidString.getter();
  *(void *)(inited + 56) = v30;
  *(void *)(inited + 64) = 0x69685F6E69676F6CLL;
  *(void *)(inited + 72) = 0xEA0000000000746ELL;
  uint64_t v31 = v102;
  *(void *)(inited + 80) = v101;
  *(void *)(inited + 88) = v31;
  strcpy((char *)(inited + 96), "redirect_uri");
  *(unsigned char *)(inited + 109) = 0;
  *(_WORD *)(inited + 110) = -5120;
  *(void *)(inited + 112) = 0xD000000000000019;
  *(void *)(inited + 120) = 0x80000001005C14E0;
  strcpy((char *)(inited + 128), "response_type");
  *(_WORD *)(inited + 142) = -4864;
  *(void *)(inited + 144) = 1701080931;
  *(void *)(inited + 152) = 0xE400000000000000;
  *(void *)(inited + 160) = 0x6574617473;
  *(void *)(inited + 168) = 0xE500000000000000;
  uint64_t v101 = v26;
  *(void *)(inited + 176) = v26;
  *(void *)(inited + 184) = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v32 = sub_10044B560(inited);
  uint64_t v33 = type metadata accessor for OAuthServerMetadata();
  if (*(void *)(v4 + *(int *)(v33 + 24)))
  {
    v105[0] = *(void *)(v4 + *(int *)(v33 + 24));
    sub_1000172F8((uint64_t *)&unk_10065C5D0);
    sub_10000DDFC((unint64_t *)&qword_10065D350, (uint64_t *)&unk_10065C5D0);
    uint64_t v34 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v36 = v35;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v105[0] = v32;
    sub_100529754(v34, v36, 0x65706F6373, 0xE500000000000000, isUniquelyReferenced_nonNull_native);
    unint64_t v32 = v105[0];
    swift_bridgeObjectRelease();
  }
  uint64_t v38 = *(void *)(v4 + *(int *)(v33 + 32));
  uint64_t v39 = v90;
  if (v38)
  {
    uint64_t v40 = *(void *)(v38 + 16);
    if (!v40)
    {
LABEL_12:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1003C8598();
      swift_allocError();
      *(_OWORD *)uint64_t v43 = xmmword_1005B51E0;
      *(void *)(v43 + 16) = 0;
      *(void *)(v43 + 24) = 0;
      *(unsigned char *)(v43 + 32) = 11;
      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v86, v87);
    }
    swift_bridgeObjectRetain();
    uint64_t v41 = 0;
    while (*(unsigned char *)(v38 + v41 + 32) != 1)
    {
      char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v42) {
        goto LABEL_15;
      }
      if (v40 == ++v41)
      {
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
LABEL_15:
    swift_bridgeObjectRelease();
    unint64_t v45 = v100;
    uint64_t v46 = sub_10052F3D8(0, 43, (uint64_t)&off_100636410);
    unint64_t v83 = v45;
    swift_arrayDestroy();
    v105[0] = (uint64_t)v46;
    sub_1000172F8(&qword_100662688);
    sub_10000DDFC((unint64_t *)&qword_100662690, &qword_100662688);
    uint64_t v47 = String.init<A>(_:)();
    uint64_t v49 = v48;
    swift_bridgeObjectRetain();
    uint64_t v50 = v92;
    static String.Encoding.ascii.getter();
    uint64_t v85 = v47;
    uint64_t v51 = String.data(using:allowLossyConversion:)();
    unint64_t v53 = v52;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v93 + 8))(v50, v94);
    if (v53 >> 60 == 15)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_32:
      swift_release();
      swift_release();
      __break(1u);
      JUMPOUT(0x10052285CLL);
    }
    uint64_t v54 = sub_100013DD4(&qword_100666738, (void (*)(uint64_t))&type metadata accessor for SHA256);
    uint64_t v55 = v95;
    uint64_t v94 = v54;
    dispatch thunk of HashFunction.init()();
    unint64_t v100 = v53;
    uint64_t v102 = v49;
    uint64_t v84 = v28;
    uint64_t v82 = v51;
    switch(v53 >> 62)
    {
      case 1uLL:
        if (v51 >> 32 < (int)v51) {
          __break(1u);
        }
        unint64_t v60 = v100;
        sub_100012670(v51, v100);
        uint64_t v57 = v98;
        sub_10052F280((int)v51, v51 >> 32);
        goto LABEL_24;
      case 2uLL:
        unint64_t v60 = v100;
        uint64_t v61 = *(void *)(v51 + 16);
        uint64_t v62 = *(void *)(v51 + 24);
        sub_10018B2A8(v51, v100);
        swift_retain();
        swift_retain();
        uint64_t v57 = v98;
        unint64_t v63 = v83;
        sub_10052F280(v61, v62);
        if (v63) {
          goto LABEL_32;
        }
        swift_release();
        swift_release();
LABEL_24:
        sub_10018AE44(v51, v60);
        uint64_t v64 = v91;
        break;
      case 3uLL:
        memset(v105, 0, 14);
        uint64_t v57 = v98;
        dispatch thunk of HashFunction.update(bufferPointer:)();
        uint64_t v58 = v51;
        unint64_t v59 = v100;
        goto LABEL_21;
      default:
        v105[0] = v51;
        unint64_t v56 = v100;
        LODWORD(v105[1]) = v100;
        WORD2(v105[1]) = WORD2(v100);
        uint64_t v57 = v98;
        dispatch thunk of HashFunction.update(bufferPointer:)();
        uint64_t v58 = v51;
        unint64_t v59 = v56;
LABEL_21:
        sub_10018AE44(v58, v59);
        uint64_t v64 = v91;
        break;
    }
    uint64_t v65 = v97;
    dispatch thunk of HashFunction.finalize()();
    (*(void (**)(char *, uint64_t))(v64 + 8))(v57, v55);
    uint64_t v66 = v89;
    uint64_t v106 = v89;
    uint64_t v107 = sub_100013DD4(&qword_100666740, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
    uint64_t v67 = sub_10019CE94(v105);
    uint64_t v68 = v88;
    (*(void (**)(uint64_t *, char *, uint64_t))(v88 + 16))(v67, v65, v66);
    sub_10018AC60(v105, v106);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    uint64_t v69 = v103;
    unint64_t v70 = v104;
    sub_100014524((uint64_t)v105);
    uint64_t v71 = sub_1003EC228();
    uint64_t v73 = v72;
    sub_100013510(v69, v70);
    char v74 = swift_isUniquelyReferenced_nonNull_native();
    v105[0] = v32;
    sub_100529754(v71, v73, 0x6168635F65646F63, 0xEE0065676E656C6CLL, v74);
    uint64_t v75 = v105[0];
    swift_bridgeObjectRelease();
    char v76 = swift_isUniquelyReferenced_nonNull_native();
    v105[0] = v75;
    sub_100529754(909455955, 0xE400000000000000, 0xD000000000000015, 0x80000001005C1600, v76);
    swift_bridgeObjectRelease();
    sub_10018AE44(v82, v100);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v97, v66);
    uint64_t v44 = (uint64_t)v99;
    uint64_t v39 = v90;
  }
  else
  {
    uint64_t v85 = 0;
    uint64_t v102 = 0;
    uint64_t v44 = (uint64_t)v99;
  }
  uint64_t v77 = swift_bridgeObjectRetain();
  sub_10051EE40(v77);
  swift_bridgeObjectRelease_n();
  uint64_t v78 = v86;
  URLComponents.queryItems.setter();
  URLComponents.url.getter();
  uint64_t v79 = type metadata accessor for URL();
  uint64_t v80 = *(void *)(v79 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v44, 1, v79) == 1)
  {
    swift_bridgeObjectRelease();
    sub_10001729C(v44, &qword_10065C3C0);
    sub_1003C8598();
    swift_allocError();
    *(_OWORD *)uint64_t v81 = 0u;
    *(_OWORD *)(v81 + 16) = 0u;
    *(unsigned char *)(v81 + 32) = 12;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v78, v87);
    return swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v78, v87);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 32))(v96, v44, v79);
    return v85;
  }
}

uint64_t sub_10052286C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = a1;
  v8._object = a2;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x696669726576202CLL;
  v9._object = (void *)0xED0000203D207265;
  String.append(_:)(v9);
  if (a4)
  {
    uint64_t v10 = a4;
  }
  else
  {
    a3 = 0x6F707075736E753CLL;
    uint64_t v10 = (void *)0xED00003E64657472;
  }
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = a3;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  return 0x203D2065646F63;
}

uint64_t sub_10052297C(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_100666888);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10018AC60(a1, a1[3]);
  sub_100531C2C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100522B7C()
{
  return sub_10052286C(*(void *)v0, *(void **)(v0 + 8), *(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100522B88()
{
  uint64_t result = 0x6F54737365636361;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7079546E656B6F74;
      break;
    case 2:
      uint64_t result = 0x4973657269707865;
      break;
    case 3:
      uint64_t result = 0x5468736572666572;
      break;
    case 4:
      uint64_t result = 0x6F54646575737369;
      break;
    case 5:
      uint64_t result = 0x65706F6373;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100522C74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10052FCEC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100522C9C(uint64_t a1)
{
  unint64_t v2 = sub_100531C2C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100522CD8(uint64_t a1)
{
  unint64_t v2 = sub_100531C2C();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100522D14@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10052FFCC(a1, (uint64_t *)v7);
  if (!v2)
  {
    long long v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(void *)(a2 + 80) = v8;
    double result = *(double *)v7;
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_100522D70(void *a1)
{
  return sub_10052297C(a1);
}

uint64_t sub_100522D88()
{
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  strcpy((char *)v7, "accessToken = ");
  HIBYTE(v7[1]) = -18;
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x657269707865202CLL;
  v4._object = (void *)0xEE00203D206E4973;
  String.append(_:)(v4);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return v7[0];
}

uint64_t sub_100522E80()
{
  if (*v0) {
    return 0xD000000000000010;
  }
  else {
    return 0x726F727265;
  }
}

uint64_t sub_100522EBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1005303D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100522EE4(uint64_t a1)
{
  unint64_t v2 = sub_10053069C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100522F20(uint64_t a1)
{
  unint64_t v2 = sub_10053069C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100522F5C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1005304B8(a1, (uint64_t)v5);
  if (!v2) {
    return sub_10025D0F8(v5, a2);
  }
  return result;
}

uint64_t type metadata accessor for OAuthClient()
{
  uint64_t result = qword_100666820;
  if (!qword_100666820) {
    return swift_getSingletonMetadata();
  }
  return result;
}

__n128 sub_100522FF0(__n128 *a1, uint64_t a2, void *a3)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1[1].n128_u8[0]);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  sub_10018ACBC();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._finalize()();
  unint64_t v6 = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a3 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v6;
  uint64_t v7 = a3[6] + 40 * v6;
  __n128 result = *a1;
  __n128 v9 = a1[1];
  *(__n128 *)uint64_t v7 = *a1;
  *(__n128 *)(v7 + 16) = v9;
  *(void *)(v7 + 32) = a1[2].n128_u64[0];
  *(void *)(a3[7] + 8 * v6) = a2;
  ++a3[2];
  return result;
}

uint64_t sub_100523118(uint64_t a1, char a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  sub_1000172F8(&qword_100663AD8);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          Swift::String v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    unint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    uint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *uint64_t v19 = v34;
    v19[1] = v33;
    uint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *uint64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  Swift::String v3 = v39;
  uint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *Swift::String v3 = v7;
  return result;
}

uint64_t sub_100523440(uint64_t a1, char a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  sub_1000172F8(&qword_100663E30);
  char v40 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v39 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v37 = v2;
  int64_t v38 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v38) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v39 + 8 * v22);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v38) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v39 + 8 * v13);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v38)
        {
LABEL_33:
          swift_release();
          Swift::String v3 = v37;
          if ((v40 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v39 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v38) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v39 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = (char *)(*(void *)(v5 + 56) + 2 * v21);
    char v34 = *v33;
    char v35 = v33[1];
    if ((v40 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v16 == v27;
        if (v16 == v27) {
          unint64_t v16 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v32;
    v18[1] = v31;
    uint64_t v19 = (unsigned char *)(*(void *)(v7 + 56) + 2 * v17);
    *uint64_t v19 = v34;
    v19[1] = v35;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  Swift::String v3 = v37;
  int64_t v23 = (void *)(v5 + 64);
  if ((v40 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v36;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *Swift::String v3 = v7;
  return result;
}

uint64_t sub_100523760(uint64_t a1, char a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  sub_1000172F8(&qword_100666758);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  char v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          Swift::String v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  Swift::String v3 = v34;
  int64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *Swift::String v3 = v7;
  return result;
}

uint64_t sub_100523A6C(uint64_t a1, char a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  sub_1000172F8(&qword_10065CE48);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v5 + 48) + 40 * v20;
    if (a2)
    {
      long long v26 = *(_OWORD *)v25;
      long long v27 = *(_OWORD *)(v25 + 16);
      uint64_t v40 = *(void *)(v25 + 32);
      long long v38 = v26;
      long long v39 = v27;
      sub_1001C5DD4((_OWORD *)(*(void *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      sub_10036DF28(v25, (uint64_t)&v38);
      sub_1000144C8(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    long long v17 = v38;
    long long v18 = v39;
    *(void *)(v16 + 32) = v40;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    uint64_t result = (uint64_t)sub_1001C5DD4(v37, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *Swift::String v3 = v7;
  return result;
}

uint64_t sub_100523D84(uint64_t a1, char a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  sub_1000172F8(&qword_100663C90);
  char v34 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v33 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  char v31 = v2;
  int64_t v32 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v16 = v15 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v17 >= v32) {
      break;
    }
    long long v18 = (void *)(v5 + 64);
    unint64_t v19 = *(void *)(v33 + 8 * v17);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v17 + 1;
      if (v17 + 1 >= v32) {
        goto LABEL_34;
      }
      unint64_t v19 = *(void *)(v33 + 8 * v13);
      if (!v19)
      {
        int64_t v20 = v17 + 2;
        if (v20 >= v32)
        {
LABEL_34:
          swift_release();
          Swift::String v3 = v31;
          if ((v34 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v19 = *(void *)(v33 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            int64_t v13 = v20 + 1;
            if (__OFADD__(v20, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v32) {
              goto LABEL_34;
            }
            unint64_t v19 = *(void *)(v33 + 8 * v13);
            ++v20;
            if (v19) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v20;
      }
    }
LABEL_21:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    char v21 = *(unsigned char *)(*(void *)(v5 + 48) + v16);
    uint64_t v22 = *(void *)(v5 + 56) + 48 * v16;
    if (v34) {
      sub_10001733C(v22, (uint64_t)v35, &qword_10065CE70);
    }
    else {
      sub_100017238(v22, (uint64_t)v35, &qword_10065CE70);
    }
    Hasher.init(_seed:)();
    sub_1001A0578(v21);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v23 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v11 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v24) & ~*(void *)(v11 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v14 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(unsigned char *)(*(void *)(v7 + 48) + v14) = v21;
    uint64_t result = sub_10001733C((uint64_t)v35, *(void *)(v7 + 56) + 48 * v14, &qword_10065CE70);
    ++*(void *)(v7 + 16);
  }
  swift_release();
  Swift::String v3 = v31;
  long long v18 = (void *)(v5 + 64);
  if ((v34 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
  if (v30 >= 64) {
    bzero(v18, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v18 = -1 << v30;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *Swift::String v3 = v7;
  return result;
}

uint64_t sub_1005240C8(uint64_t a1, int a2)
{
  return sub_100528E2C(a1, a2, (uint64_t (*)(void))&type metadata accessor for Platform, &qword_1006667B0);
}

uint64_t sub_1005240E8(uint64_t a1, int a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_1000172F8(&qword_100663DF8);
  int v47 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v49 = v8;
  uint64_t v50 = v5;
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v43 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  uint64_t v41 = v2;
  int64_t v42 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v44 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v48 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  uint64_t v45 = v9;
  uint64_t v46 = v6;
  while (1)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v42) {
      break;
    }
    unint64_t v24 = v43;
    unint64_t v25 = v43[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v42) {
        goto LABEL_34;
      }
      unint64_t v25 = v43[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_34:
          swift_release();
          Swift::String v3 = v41;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v42) {
              goto LABEL_34;
            }
            unint64_t v25 = v43[v18];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v26;
      }
    }
LABEL_21:
    unint64_t v15 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(v6 + 72);
    unint64_t v28 = *(void *)(v9 + 48) + v27 * v22;
    if (v47)
    {
      (*v48)(v49, v28, v50);
      uint64_t v29 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      uint64_t v31 = *v29;
      uint64_t v30 = v29[1];
    }
    else
    {
      (*v44)(v49, v28, v50);
      int64_t v32 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      uint64_t v31 = *v32;
      uint64_t v30 = v32[1];
      swift_bridgeObjectRetain();
    }
    sub_100013DD4((unint64_t *)&unk_100660E70, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v6 = v46;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      uint64_t v6 = v46;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v16 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v19 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v48)(*(void *)(v11 + 48) + v27 * v19, v49, v50);
    int64_t v20 = (void *)(*(void *)(v11 + 56) + 16 * v19);
    *int64_t v20 = v31;
    v20[1] = v30;
    ++*(void *)(v11 + 16);
    uint64_t v9 = v45;
  }
  swift_release();
  Swift::String v3 = v41;
  unint64_t v24 = v43;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v9 + 32);
  if (v40 >= 64) {
    bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v40;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *Swift::String v3 = v11;
  return result;
}

uint64_t sub_100524528(uint64_t a1, char a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  sub_1000172F8(&qword_100663DE0);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v12) {
          goto LABEL_34;
        }
        unint64_t v18 = v30[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_34;
          }
          unint64_t v18 = v30[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if (a2)
              {
                uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
                if (v29 >= 64) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v18 = v30[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v12) {
                  goto LABEL_34;
                }
                unint64_t v18 = v30[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 48) + 8 * v16);
      unint64_t v21 = (long long *)(*(void *)(v5 + 56) + 40 * v16);
      if (a2) {
        sub_10018B164(v21, (uint64_t)v31);
      }
      else {
        sub_10019B17C((uint64_t)v21, (uint64_t)v31);
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(void *)(*(void *)(v7 + 48) + 8 * v14) = v20;
      uint64_t result = sub_10018B164(v31, *(void *)(v7 + 56) + 40 * v14);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *Swift::String v3 = v7;
  return result;
}

uint64_t sub_1005247F0(uint64_t a1, char a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  sub_1000172F8(&qword_100663D60);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_39;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v32 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v31 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v19 = v18 | (v12 << 6);
      goto LABEL_31;
    }
    int64_t v20 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_40;
    }
    if (v20 >= v31) {
      break;
    }
    unint64_t v21 = v32[v20];
    ++v12;
    if (!v21)
    {
      int64_t v12 = v20 + 1;
      if (v20 + 1 >= v31) {
        break;
      }
      unint64_t v21 = v32[v12];
      if (!v21)
      {
        int64_t v22 = v20 + 2;
        if (v22 >= v31) {
          break;
        }
        unint64_t v21 = v32[v22];
        if (!v21)
        {
          while (1)
          {
            int64_t v12 = v22 + 1;
            if (__OFADD__(v22, 1)) {
              goto LABEL_41;
            }
            if (v12 >= v31) {
              goto LABEL_34;
            }
            unint64_t v21 = v32[v12];
            ++v22;
            if (v21) {
              goto LABEL_30;
            }
          }
        }
        int64_t v12 = v22;
      }
    }
LABEL_30:
    unint64_t v10 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_31:
    char v27 = *(unsigned char *)(*(void *)(v5 + 48) + v19);
    uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
    if ((a2 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v13 = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = v13 & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_8;
    }
    char v23 = 0;
    unint64_t v24 = (unint64_t)(63 - v14) >> 6;
    do
    {
      if (++v16 == v24 && (v23 & 1) != 0)
      {
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        JUMPOUT(0x100524CC4);
      }
      BOOL v25 = v16 == v24;
      if (v16 == v24) {
        unint64_t v16 = 0;
      }
      v23 |= v25;
      uint64_t v26 = *(void *)(v11 + 8 * v16);
    }
    while (v26 == -1);
    unint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
LABEL_8:
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(unsigned char *)(*(void *)(v7 + 48) + v17) = v27;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v28;
    ++*(void *)(v7 + 16);
  }
LABEL_34:
  swift_release();
  Swift::String v3 = v2;
  if (a2)
  {
    uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
    if (v29 >= 64) {
      bzero(v32, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    }
    else {
      *int64_t v32 = -1 << v29;
    }
    *(void *)(v5 + 16) = 0;
  }
LABEL_39:
  uint64_t result = swift_release();
  *Swift::String v3 = v7;
  return result;
}

uint64_t sub_100524D10(uint64_t a1, char a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  sub_1000172F8(&qword_1006667A8);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v40 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  BOOL v38 = v2;
  int64_t v39 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v39) {
      break;
    }
    char v23 = v40;
    unint64_t v24 = v40[v22];
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v39) {
        goto LABEL_33;
      }
      unint64_t v24 = v40[v13];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_33:
          swift_release();
          Swift::String v3 = v38;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v39) {
              goto LABEL_33;
            }
            unint64_t v24 = v40[v13];
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    uint64_t v30 = *(void *)(v5 + 48) + 24 * v21;
    uint64_t v32 = *(void *)v30;
    uint64_t v31 = *(void *)(v30 + 8);
    char v33 = *(unsigned char *)(v30 + 16);
    unint64_t v34 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v21);
    uint64_t v35 = *v34;
    uint64_t v36 = v34[1];
    if ((v42 & 1) == 0)
    {
      sub_1001C3ED0(*(void *)v30, *(void *)(v30 + 8), *(unsigned char *)(v30 + 16));
      swift_retain();
    }
    Hasher.init(_seed:)();
    StoreAppIdentifier.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v16 == v27;
        if (v16 == v27) {
          unint64_t v16 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = *(void *)(v7 + 48) + 24 * v17;
    *(void *)uint64_t v18 = v32;
    *(void *)(v18 + 8) = v31;
    *(unsigned char *)(v18 + 16) = v33;
    unint64_t v19 = (void *)(*(void *)(v7 + 56) + 16 * v17);
    *unint64_t v19 = v35;
    v19[1] = v36;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  Swift::String v3 = v38;
  char v23 = v40;
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v37 = 1 << *(unsigned char *)(v5 + 32);
  if (v37 >= 64) {
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v23 = -1 << v37;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *Swift::String v3 = v7;
  return result;
}

uint64_t sub_100525054(uint64_t a1, char a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  sub_1000172F8(&qword_10065BD18);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    unint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          Swift::String v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *unint64_t v19 = v34;
    v19[1] = v33;
    unint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *unint64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  Swift::String v3 = v39;
  unint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *Swift::String v3 = v7;
  return result;
}

uint64_t sub_10052537C(uint64_t a1, char a2)
{
  return sub_10052770C(a1, a2, &qword_100663C58);
}

uint64_t sub_100525388(uint64_t a1, int a2)
{
  return sub_100528E2C(a1, a2, (uint64_t (*)(void))&type metadata accessor for XPCApp, &qword_100666540);
}

uint64_t sub_1005253A8(uint64_t a1, int a2)
{
  return sub_100529260(a1, a2, (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress, &qword_100663C50, (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress, (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress);
}

uint64_t sub_1005253F0(uint64_t a1, char a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  sub_1000172F8(&qword_100666430);
  char v40 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v38 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v10)
      {
        unint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v21 = v20 | (v13 << 6);
      }
      else
      {
        int64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v37) {
          goto LABEL_33;
        }
        unint64_t v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          int64_t v13 = v22 + 1;
          if (v22 + 1 >= v37) {
            goto LABEL_33;
          }
          unint64_t v23 = v38[v13];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              Swift::String v3 = v2;
              if (v40)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
                if (v36 >= 64) {
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v38 = -1 << v36;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v37) {
                  goto LABEL_33;
                }
                unint64_t v23 = v38[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v24;
          }
        }
LABEL_30:
        unint64_t v10 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      BOOL v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
      uint64_t v31 = *v29;
      uint64_t v30 = v29[1];
      uint64_t v32 = (uint64_t *)(*(void *)(v5 + 56) + 32 * v21);
      uint64_t v33 = *v32;
      uint64_t v34 = v32[1];
      uint64_t v35 = v32[3];
      uint64_t v41 = v32[2];
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v16 == v26;
          if (v16 == v26) {
            unint64_t v16 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      void *v18 = v31;
      v18[1] = v30;
      unint64_t v19 = (void *)(*(void *)(v7 + 56) + 32 * v17);
      *unint64_t v19 = v33;
      v19[1] = v34;
      v19[2] = v41;
      v19[3] = v35;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *Swift::String v3 = v7;
  return result;
}

void sub_10052571C(uint64_t a1, char a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  sub_1000172F8(&qword_100666770);
  char v6 = a2;
  BOOL v27 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
    unint64_t v26 = (void *)(v5 + 64);
    uint64_t v8 = -1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    unint64_t v9 = v8 & *(void *)(v5 + 64);
    int64_t v24 = v3;
    int64_t v25 = (unint64_t)(v7 + 63) >> 6;
    swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v9)
      {
        unint64_t v11 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v12 = v11 | (v10 << 6);
      }
      else
      {
        int64_t v13 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return;
        }
        if (v13 >= v25) {
          goto LABEL_22;
        }
        unint64_t v14 = v26[v13];
        ++v10;
        if (!v14)
        {
          int64_t v10 = v13 + 1;
          if (v13 + 1 >= v25) {
            goto LABEL_22;
          }
          unint64_t v14 = v26[v10];
          if (!v14)
          {
            int64_t v15 = v13 + 2;
            if (v15 >= v25)
            {
LABEL_22:
              swift_release();
              Swift::String v3 = v24;
              if (v6)
              {
                uint64_t v23 = 1 << *(unsigned char *)(v5 + 32);
                if (v23 > 63) {
                  bzero(v26, ((unint64_t)(v23 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v26 = -1 << v23;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v14 = v26[v15];
            if (!v14)
            {
              while (1)
              {
                int64_t v10 = v15 + 1;
                if (__OFADD__(v15, 1)) {
                  goto LABEL_29;
                }
                if (v10 >= v25) {
                  goto LABEL_22;
                }
                unint64_t v14 = v26[v10];
                ++v15;
                if (v14) {
                  goto LABEL_19;
                }
              }
            }
            int64_t v10 = v15;
          }
        }
LABEL_19:
        unint64_t v9 = (v14 - 1) & v14;
        unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
      }
      uint64_t v16 = *(void *)(v5 + 48) + 40 * v12;
      unint64_t v18 = *(void *)v16;
      unint64_t v17 = *(void *)(v16 + 8);
      char v19 = *(unsigned char *)(v16 + 16);
      uint64_t v20 = *(void *)(v16 + 24);
      uint64_t v21 = *(void *)(v16 + 32);
      uint64_t v22 = *(void *)(*(void *)(v5 + 56) + 8 * v12);
      if ((v6 & 1) == 0)
      {
        sub_1001C617C();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      v28.n128_u64[0] = v18;
      v28.n128_u64[1] = v17;
      char v29 = v19;
      uint64_t v30 = v20;
      uint64_t v31 = v21;
      sub_100522FF0(&v28, v22, v27);
    }
  }
  swift_release();
  *Swift::String v3 = v27;
}

uint64_t sub_100525954(uint64_t a1, int a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = type metadata accessor for ConfigurationBag.UpdatesConfiguration(0);
  uint64_t v41 = *(void *)(v5 - 8);
  uint64_t v42 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_1000172F8(&qword_100666768);
  int v43 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  int64_t v39 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  int64_t v37 = v2;
  int64_t v38 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  for (uint64_t i = v8; ; v8 = i)
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v38) {
      break;
    }
    uint64_t v22 = v39;
    unint64_t v23 = v39[v21];
    ++v17;
    if (!v23)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v38) {
        goto LABEL_34;
      }
      unint64_t v23 = v39[v17];
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v38)
        {
LABEL_34:
          swift_release();
          Swift::String v3 = v37;
          if ((v43 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = v39[v24];
        if (!v23)
        {
          while (1)
          {
            int64_t v17 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v38) {
              goto LABEL_34;
            }
            unint64_t v23 = v39[v17];
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v24;
      }
    }
LABEL_21:
    unint64_t v14 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v41 + 72);
    uint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
    if (v43)
    {
      sub_1000188D4(v26, (uint64_t)v7, type metadata accessor for ConfigurationBag.UpdatesConfiguration);
      uint64_t v27 = *(void *)(*(void *)(v8 + 56) + 8 * v20);
    }
    else
    {
      sub_100530850(v26, (uint64_t)v7, type metadata accessor for ConfigurationBag.UpdatesConfiguration);
      uint64_t v27 = *(void *)(*(void *)(v8 + 56) + 8 * v20);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_100013DD4((unint64_t *)&unk_100660E70, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v28 = v42;
    type metadata accessor for URL();
    sub_100013DD4(&qword_10065FA78, (void (*)(uint64_t))&type metadata accessor for URL);
    dispatch thunk of Hashable.hash(into:)();
    Hasher._combine(_:)(*(void *)&v7[*(int *)(v28 + 24)]);
    uint64_t result = Hasher._finalize()();
    uint64_t v29 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v30 = result & ~v29;
    unint64_t v31 = v30 >> 6;
    if (((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v32 = 0;
      unint64_t v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v34 = v31 == v33;
        if (v31 == v33) {
          unint64_t v31 = 0;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v15 + 8 * v31);
      }
      while (v35 == -1);
      unint64_t v18 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t result = sub_1000188D4((uint64_t)v7, *(void *)(v10 + 48) + v25 * v18, type metadata accessor for ConfigurationBag.UpdatesConfiguration);
    *(void *)(*(void *)(v10 + 56) + 8 * v18) = v27;
    ++*(void *)(v10 + 16);
  }
  swift_release();
  Swift::String v3 = v37;
  uint64_t v22 = v39;
  if ((v43 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v36 = 1 << *(unsigned char *)(v8 + 32);
  if (v36 >= 64) {
    bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v36;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *Swift::String v3 = v10;
  return result;
}

uint64_t sub_100525DEC(uint64_t a1, char a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  sub_1000172F8(&qword_100663C68);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    BOOL v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              Swift::String v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      int64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      int64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_1001C5DD4(v24, v35);
      }
      else
      {
        sub_1000144C8((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *uint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_1001C5DD4(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *Swift::String v3 = v7;
  return result;
}

uint64_t sub_1005260EC(uint64_t a1, char a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  sub_1000172F8(&qword_100664BC0);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    int64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          Swift::String v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *unint64_t v19 = v34;
    v19[1] = v33;
    int64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *int64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  Swift::String v3 = v39;
  int64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *Swift::String v3 = v7;
  return result;
}

uint64_t sub_100526414(uint64_t a1, char a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  sub_1000172F8(&qword_100664BB8);
  char v44 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v43 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v41 = v2;
  int64_t v42 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v42) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v43 + 8 * v22);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v42) {
        goto LABEL_34;
      }
      unint64_t v24 = *(void *)(v43 + 8 * v13);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v42)
        {
LABEL_34:
          swift_release();
          Swift::String v3 = v41;
          if ((v44 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = *(void *)(v43 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v42) {
              goto LABEL_34;
            }
            unint64_t v24 = *(void *)(v43 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_21:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_22:
    int64_t v26 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    uint64_t v29 = *(void *)(v5 + 56) + 72 * v21;
    if (v44)
    {
      long long v45 = *(_OWORD *)v29;
      long long v30 = *(_OWORD *)(v29 + 16);
      long long v31 = *(_OWORD *)(v29 + 32);
      long long v32 = *(_OWORD *)(v29 + 48);
      uint64_t v49 = *(void *)(v29 + 64);
      long long v47 = v31;
      long long v48 = v32;
      long long v46 = v30;
    }
    else
    {
      sub_1004ABF94(v29, (uint64_t)&v45);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v33 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v11 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v34) & ~*(void *)(v11 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v11 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v14 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *unint64_t v15 = v28;
    v15[1] = v27;
    uint64_t v16 = *(void *)(v7 + 56) + 72 * v14;
    *(_OWORD *)uint64_t v16 = v45;
    long long v17 = v46;
    long long v18 = v47;
    long long v19 = v48;
    *(void *)(v16 + 64) = v49;
    *(_OWORD *)(v16 + 32) = v18;
    *(_OWORD *)(v16 + 48) = v19;
    *(_OWORD *)(v16 + 16) = v17;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  Swift::String v3 = v41;
  int64_t v23 = (void *)(v5 + 64);
  if ((v44 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v5 + 32);
  if (v40 >= 64) {
    bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v40;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *Swift::String v3 = v7;
  return result;
}

uint64_t sub_10052676C(uint64_t a1, int a2)
{
  return sub_1005267B4(a1, a2, (uint64_t (*)(void))type metadata accessor for Restore, &qword_100663D30, (uint64_t (*)(void))type metadata accessor for Restore, (uint64_t (*)(void))type metadata accessor for Restore);
}

uint64_t sub_1005267B4(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  long long v47 = a6;
  uint64_t v50 = a5;
  uint64_t v8 = v6;
  uint64_t v10 = a3(0);
  uint64_t v48 = *(void *)(v10 - 8);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v44 - v11;
  uint64_t v13 = *v6;
  sub_1000172F8(a4);
  int v49 = a2;
  uint64_t v14 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v15 = v14;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_41;
  }
  uint64_t v16 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v17 = *(void *)(v13 + 64);
  long long v46 = (void *)(v13 + 64);
  if (v16 < 64) {
    uint64_t v18 = ~(-1 << v16);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & v17;
  char v44 = v6;
  int64_t v45 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v20 = v14 + 64;
  uint64_t result = swift_retain();
  int64_t v22 = 0;
  while (1)
  {
    if (v19)
    {
      unint64_t v25 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v26 = v25 | (v22 << 6);
      goto LABEL_22;
    }
    int64_t v27 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v27 >= v45) {
      break;
    }
    uint64_t v28 = v46;
    unint64_t v29 = v46[v27];
    ++v22;
    if (!v29)
    {
      int64_t v22 = v27 + 1;
      if (v27 + 1 >= v45) {
        goto LABEL_34;
      }
      unint64_t v29 = v46[v22];
      if (!v29)
      {
        int64_t v30 = v27 + 2;
        if (v30 >= v45)
        {
LABEL_34:
          swift_release();
          uint64_t v8 = v44;
          if ((v49 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v29 = v46[v30];
        if (!v29)
        {
          while (1)
          {
            int64_t v22 = v30 + 1;
            if (__OFADD__(v30, 1)) {
              goto LABEL_43;
            }
            if (v22 >= v45) {
              goto LABEL_34;
            }
            unint64_t v29 = v46[v22];
            ++v30;
            if (v29) {
              goto LABEL_21;
            }
          }
        }
        int64_t v22 = v30;
      }
    }
LABEL_21:
    unint64_t v19 = (v29 - 1) & v29;
    unint64_t v26 = __clz(__rbit64(v29)) + (v22 << 6);
LABEL_22:
    long long v31 = (uint64_t *)(*(void *)(v13 + 48) + 16 * v26);
    uint64_t v33 = *v31;
    uint64_t v32 = v31[1];
    uint64_t v34 = *(void *)(v48 + 72);
    uint64_t v35 = *(void *)(v13 + 56) + v34 * v26;
    if (v49)
    {
      sub_1000188D4(v35, (uint64_t)v12, v50);
    }
    else
    {
      sub_100530850(v35, (uint64_t)v12, v47);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v36 = -1 << *(unsigned char *)(v15 + 32);
    unint64_t v37 = result & ~v36;
    unint64_t v38 = v37 >> 6;
    if (((-1 << v37) & ~*(void *)(v20 + 8 * (v37 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v37) & ~*(void *)(v20 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v39 = 0;
      unint64_t v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v41 = v38 == v40;
        if (v38 == v40) {
          unint64_t v38 = 0;
        }
        v39 |= v41;
        uint64_t v42 = *(void *)(v20 + 8 * v38);
      }
      while (v42 == -1);
      unint64_t v23 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    unint64_t v24 = (void *)(*(void *)(v15 + 48) + 16 * v23);
    *unint64_t v24 = v33;
    v24[1] = v32;
    uint64_t result = sub_1000188D4((uint64_t)v12, *(void *)(v15 + 56) + v34 * v23, v50);
    ++*(void *)(v15 + 16);
  }
  swift_release();
  uint64_t v8 = v44;
  uint64_t v28 = v46;
  if ((v49 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v43 = 1 << *(unsigned char *)(v13 + 32);
  if (v43 >= 64) {
    bzero(v28, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v28 = -1 << v43;
  }
  *(void *)(v13 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v8 = v15;
  return result;
}

uint64_t sub_100526B6C(uint64_t a1, int a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_1000172F8(&qword_100666788);
  int v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  uint64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  unint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  uint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    unint64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          Swift::String v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_bridgeObjectRetain();
    }
    sub_100013DD4(&qword_10065FA78, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  Swift::String v3 = v40;
  unint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *Swift::String v3 = v12;
  return result;
}

uint64_t sub_100526F90(uint64_t a1, int a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = type metadata accessor for Restore();
  uint64_t v37 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_1000172F8(&qword_100666780);
  int v38 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = result;
  if (*(void *)(v8 + 16))
  {
    char v34 = v2;
    int64_t v11 = 0;
    uint64_t v12 = *(void *)(v8 + 64);
    BOOL v36 = (void *)(v8 + 64);
    uint64_t v13 = 1 << *(unsigned char *)(v8 + 32);
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v12;
    int64_t v35 = (unint64_t)(v13 + 63) >> 6;
    uint64_t v16 = result + 64;
    while (1)
    {
      if (v15)
      {
        unint64_t v18 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v19 = v18 | (v11 << 6);
      }
      else
      {
        int64_t v20 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v36;
        if (v20 >= v35) {
          goto LABEL_34;
        }
        unint64_t v21 = v36[v20];
        ++v11;
        if (!v21)
        {
          int64_t v11 = v20 + 1;
          if (v20 + 1 >= v35) {
            goto LABEL_34;
          }
          unint64_t v21 = v36[v11];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v35)
            {
LABEL_34:
              if ((v38 & 1) == 0)
              {
                uint64_t result = swift_release();
                Swift::String v3 = v34;
                goto LABEL_41;
              }
              uint64_t v33 = 1 << *(unsigned char *)(v8 + 32);
              if (v33 >= 64) {
                bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *BOOL v36 = -1 << v33;
              }
              Swift::String v3 = v34;
              *(void *)(v8 + 16) = 0;
              break;
            }
            unint64_t v21 = v36[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v11 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_43;
                }
                if (v11 >= v35) {
                  goto LABEL_34;
                }
                unint64_t v21 = v36[v11];
                ++v22;
                if (v21) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v11 = v22;
          }
        }
LABEL_21:
        unint64_t v15 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v11 << 6);
      }
      Swift::UInt64 v23 = *(void *)(*(void *)(v8 + 48) + 8 * v19);
      uint64_t v24 = *(void *)(v37 + 72);
      uint64_t v25 = *(void *)(v8 + 56) + v24 * v19;
      if (v38) {
        sub_1000188D4(v25, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Restore);
      }
      else {
        sub_100530850(v25, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Restore);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v23);
      uint64_t result = Hasher._finalize()();
      uint64_t v26 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v16 + 8 * (v27 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v16 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v29 = 0;
        unint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v31 = v28 == v30;
          if (v28 == v30) {
            unint64_t v28 = 0;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v16 + 8 * v28);
        }
        while (v32 == -1);
        unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(void *)(v16 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(void *)(*(void *)(v10 + 48) + 8 * v17) = v23;
      uint64_t result = sub_1000188D4((uint64_t)v7, *(void *)(v10 + 56) + v24 * v17, (uint64_t (*)(void))type metadata accessor for Restore);
      ++*(void *)(v10 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *Swift::String v3 = v10;
  return result;
}

uint64_t sub_100527334(uint64_t a1, char a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  sub_1000172F8(&qword_1006667A0);
  char v43 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    int64_t v41 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v40 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v42 = v5;
    while (1)
    {
      if (v10)
      {
        unint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v44 = v13;
        unint64_t v21 = v20 | (v13 << 6);
      }
      else
      {
        int64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v40) {
          goto LABEL_33;
        }
        unint64_t v23 = v41[v22];
        int64_t v24 = v13 + 1;
        if (!v23)
        {
          int64_t v24 = v13 + 2;
          if (v13 + 2 >= v40) {
            goto LABEL_33;
          }
          unint64_t v23 = v41[v24];
          if (!v23)
          {
            uint64_t v25 = v13 + 3;
            if (v13 + 3 >= v40)
            {
LABEL_33:
              swift_release();
              Swift::String v3 = v2;
              if (v43)
              {
                uint64_t v39 = 1 << *(unsigned char *)(v5 + 32);
                if (v39 >= 64) {
                  bzero(v41, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v41 = -1 << v39;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v41[v25];
            if (!v23)
            {
              while (1)
              {
                int64_t v24 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_40;
                }
                if (v24 >= v40) {
                  goto LABEL_33;
                }
                unint64_t v23 = v41[v24];
                ++v25;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v24 = v13 + 3;
          }
        }
LABEL_30:
        unint64_t v10 = (v23 - 1) & v23;
        int64_t v44 = v24;
        unint64_t v21 = __clz(__rbit64(v23)) + (v24 << 6);
      }
      uint64_t v30 = *(void *)(v5 + 56);
      BOOL v31 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
      uint64_t v33 = *v31;
      uint64_t v32 = v31[1];
      char v34 = (uint64_t *)(v30 + 104 * v21);
      uint64_t v35 = v34[1];
      uint64_t v45 = *v34;
      uint64_t v36 = v34[3];
      uint64_t v37 = v34[5];
      uint64_t v50 = v34[4];
      uint64_t v51 = v34[2];
      uint64_t v49 = v34[6];
      char v48 = *((unsigned char *)v34 + 56);
      uint64_t v47 = v34[8];
      long long v52 = *(_OWORD *)(v34 + 9);
      uint64_t v38 = v34[11];
      char v46 = *((unsigned char *)v34 + 96);
      if ((v43 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v16 == v27;
          if (v16 == v27) {
            unint64_t v16 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v11 + 8 * v16);
        }
        while (v29 == -1);
        unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      void *v18 = v33;
      v18[1] = v32;
      uint64_t v19 = *(void *)(v7 + 56) + 104 * v17;
      *(void *)uint64_t v19 = v45;
      *(void *)(v19 + 8) = v35;
      *(void *)(v19 + 16) = v51;
      *(void *)(v19 + 24) = v36;
      *(void *)(v19 + 32) = v50;
      *(void *)(v19 + 40) = v37;
      *(void *)(v19 + 48) = v49;
      *(unsigned char *)(v19 + 56) = v48;
      *(void *)(v19 + 64) = v47;
      *(_OWORD *)(v19 + 72) = v52;
      *(void *)(v19 + 88) = v38;
      *(unsigned char *)(v19 + 96) = v46;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v42;
      int64_t v13 = v44;
    }
  }
  uint64_t result = swift_release();
  *Swift::String v3 = v7;
  return result;
}

uint64_t sub_100527700(uint64_t a1, char a2)
{
  return sub_10052770C(a1, a2, &qword_100666790);
}

uint64_t sub_10052770C(uint64_t a1, char a2, uint64_t *a3)
{
  Swift::String v4 = v3;
  uint64_t v6 = *v3;
  sub_1000172F8(a3);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *Swift::String v4 = v8;
  return result;
}

unint64_t sub_100527A20(uint64_t a1, char a2)
{
  uint64_t v4 = *v2;
  sub_1000172F8(&qword_100666798);
  char v41 = a2;
  uint64_t v5 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v6 = (void *)v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    int64_t v35 = (void *)(v4 + 64);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v4 + 64);
    int64_t v34 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v38 = v5 + 64;
    unint64_t result = swift_retain();
    int64_t v11 = 0;
    uint64_t v39 = v6;
    uint64_t v40 = v4;
    while (1)
    {
      if (v9)
      {
        uint64_t v42 = (v9 - 1) & v9;
        int64_t v43 = v11;
        unint64_t v13 = __clz(__rbit64(v9)) | (v11 << 6);
      }
      else
      {
        int64_t v14 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
LABEL_30:
          __break(1u);
          return result;
        }
        if (v14 >= v34) {
          goto LABEL_23;
        }
        unint64_t v15 = v35[v14];
        int64_t v16 = v11 + 1;
        if (!v15)
        {
          int64_t v16 = v11 + 2;
          if (v11 + 2 >= v34) {
            goto LABEL_23;
          }
          unint64_t v15 = v35[v16];
          if (!v15)
          {
            uint64_t v17 = v11 + 3;
            if (v11 + 3 >= v34)
            {
LABEL_23:
              swift_release();
              if (v41)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v4 + 32);
                if (v32 > 63) {
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v35 = -1 << v32;
                }
                *(void *)(v4 + 16) = 0;
              }
              break;
            }
            unint64_t v15 = v35[v17];
            if (!v15)
            {
              while (1)
              {
                int64_t v16 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_30;
                }
                if (v16 >= v34) {
                  goto LABEL_23;
                }
                unint64_t v15 = v35[v16];
                ++v17;
                if (v15) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v16 = v11 + 3;
          }
        }
LABEL_20:
        uint64_t v42 = (v15 - 1) & v15;
        int64_t v43 = v16;
        unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
      }
      uint64_t v18 = *(void *)(v4 + 56);
      uint64_t v19 = *(void *)(v4 + 48) + 104 * v13;
      uint64_t v21 = *(void *)v19;
      uint64_t v20 = *(void *)(v19 + 8);
      uint64_t v22 = *(void *)(v19 + 16);
      uint64_t v23 = *(void *)(v19 + 24);
      uint64_t v24 = *(void *)(v19 + 32);
      uint64_t v25 = *(void *)(v19 + 40);
      uint64_t v26 = *(void *)(v19 + 48);
      char v27 = *(unsigned char *)(v19 + 56);
      uint64_t v28 = *(void *)(v19 + 64);
      long long v29 = *(_OWORD *)(v19 + 72);
      uint64_t v30 = *(void *)(v19 + 88);
      char v31 = *(unsigned char *)(v19 + 96);
      uint64_t v44 = *(void *)(v18 + 8 * v13);
      if ((v41 & 1) == 0)
      {
        char v37 = v31;
        long long v36 = v29;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        long long v29 = v36;
        char v31 = v37;
      }
      *(void *)&long long v45 = v21;
      *((void *)&v45 + 1) = v20;
      *(void *)&long long v46 = v22;
      *((void *)&v46 + 1) = v23;
      *(void *)&long long v47 = v24;
      *((void *)&v47 + 1) = v25;
      *(void *)&long long v48 = v26;
      BYTE8(v48) = v27;
      *(_OWORD *)&v49[8] = v29;
      *(void *)uint64_t v49 = v28;
      *(void *)&v49[24] = v30;
      char v50 = v31;
      uint64_t v6 = v39;
      Hasher.init(_seed:)();
      sub_10023E540();
      Hasher._finalize()();
      unint64_t result = _HashTable.nextHole(atOrAfter:)();
      *(void *)(v38 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      uint64_t v12 = v39[6] + 104 * result;
      *(_OWORD *)(v12 + 64) = *(_OWORD *)v49;
      *(_OWORD *)(v12 + 80) = *(_OWORD *)&v49[16];
      *(unsigned char *)(v12 + 96) = v50;
      *(_OWORD *)uint64_t v12 = v45;
      *(_OWORD *)(v12 + 16) = v46;
      *(_OWORD *)(v12 + 32) = v47;
      *(_OWORD *)(v12 + 48) = v48;
      int64_t v11 = v43;
      *(void *)(v39[7] + 8 * result) = v44;
      ++v39[2];
      uint64_t v4 = v40;
      unint64_t v9 = v42;
    }
  }
  unint64_t result = swift_release();
  *uint64_t v33 = v6;
  return result;
}

uint64_t sub_100527D70(uint64_t a1, char a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  sub_1000172F8(&qword_1006667B8);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    int64_t v34 = (uint64_t *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v9;
    uint64_t v32 = v9;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v33) {
          goto LABEL_33;
        }
        unint64_t v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v21 = v34[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero(v34, 8 * v33);
                }
                else {
                  uint64_t *v34 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                unint64_t v21 = v34[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      uint64_t v28 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v19);
      uint64_t v29 = *v28;
      uint64_t v30 = v28[1];
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      uint64_t v17 = (void *)(*(void *)(v7 + 56) + 16 * v16);
      *uint64_t v17 = v29;
      v17[1] = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *Swift::String v3 = v7;
  return result;
}

uint64_t sub_100528028(uint64_t a1, char a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  sub_1000172F8(&qword_1006667C0);
  char v35 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    int64_t v34 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v33) {
          goto LABEL_39;
        }
        unint64_t v18 = v34[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v33) {
            goto LABEL_39;
          }
          unint64_t v18 = v34[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v33)
            {
LABEL_39:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                Swift::String v3 = v2;
                goto LABEL_46;
              }
              uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
              if (v32 >= 64) {
                bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v34 = -1 << v32;
              }
              Swift::String v3 = v2;
              *(void *)(v5 + 16) = 0;
              goto LABEL_45;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_48;
                }
                if (v8 >= v33) {
                  goto LABEL_39;
                }
                unint64_t v18 = v34[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      uint64_t v20 = *(void *)(v5 + 48) + 16 * v16;
      Swift::UInt64 v21 = *(void *)v20;
      int v22 = *(unsigned __int8 *)(v20 + 8);
      uint64_t v23 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
      if ((v35 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      if (!v22) {
        break;
      }
      if (v22 == 1)
      {
        Swift::UInt v24 = 1;
LABEL_28:
        Hasher._combine(_:)(v24);
        Hasher._combine(_:)(v21);
        goto LABEL_30;
      }
      Hasher._combine(_:)(2uLL);
LABEL_30:
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_47;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v13 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = *(void *)(v7 + 48) + 16 * v13;
      *(void *)uint64_t v14 = v21;
      *(unsigned char *)(v14 + 8) = v22;
      *(void *)(*(void *)(v7 + 56) + 8 * v13) = v23;
      ++*(void *)(v7 + 16);
    }
    Swift::UInt v24 = 0;
    goto LABEL_28;
  }
LABEL_45:
  uint64_t result = swift_release();
LABEL_46:
  *Swift::String v3 = v7;
  return result;
}

uint64_t sub_100528340(uint64_t a1, char a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  sub_1000172F8(&qword_100663AF0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v33 = v2;
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v11) {
      break;
    }
    int64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v34 + 8 * v18);
    ++v14;
    if (!v20)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v34 + 8 * v14);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v11)
        {
LABEL_34:
          swift_release();
          Swift::String v3 = v33;
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v34 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v14 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v34 + 8 * v14);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_22:
    int v22 = *(void **)(*(void *)(v5 + 48) + 8 * v17);
    uint64_t v23 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
    if (a2)
    {
      sub_1001C5DD4(v23, v35);
    }
    else
    {
      sub_1000144C8((uint64_t)v23, (uint64_t)v35);
      id v24 = v22;
    }
    Hasher.init(_seed:)();
    type metadata accessor for CFString(0);
    sub_100013DD4(&qword_100663B00, type metadata accessor for CFString);
    _CFObject.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v12 + 8 * v27);
      }
      while (v31 == -1);
      unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(void *)(*(void *)(v7 + 48) + 8 * v15) = v22;
    uint64_t result = (uint64_t)sub_1001C5DD4(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  Swift::String v3 = v33;
  int64_t v19 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
  if (v32 >= 64) {
    bzero(v19, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v19 = -1 << v32;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *Swift::String v3 = v7;
  return result;
}

uint64_t sub_10052867C(uint64_t a1, int a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_1000172F8(&qword_100663E08);
  int v42 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    char v37 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    uint64_t v39 = (void *)(v9 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    int64_t v38 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v40 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    int64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    uint64_t v44 = v5;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v15)
      {
        unint64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v21 = v20 | (v18 << 6);
      }
      else
      {
        int64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v38) {
          goto LABEL_34;
        }
        unint64_t v23 = v39[v22];
        ++v18;
        if (!v23)
        {
          int64_t v18 = v22 + 1;
          if (v22 + 1 >= v38) {
            goto LABEL_34;
          }
          unint64_t v23 = v39[v18];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_34:
              swift_release();
              Swift::String v3 = v37;
              if (v42)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v9 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v39 = -1 << v36;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v38) {
                  goto LABEL_34;
                }
                unint64_t v23 = v39[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v24;
          }
        }
LABEL_21:
        unint64_t v15 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      uint64_t v25 = *(void *)(v6 + 72);
      unint64_t v26 = *(void *)(v9 + 48) + v25 * v21;
      if (v42) {
        (*v43)(v8, v26, v44);
      }
      else {
        (*v40)(v8, v26, v44);
      }
      uint64_t v27 = v9;
      uint64_t v28 = *(void *)(*(void *)(v9 + 56) + 8 * v21);
      sub_100013DD4((unint64_t *)&unk_100660E70, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v16 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v19 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v43)(*(void *)(v11 + 48) + v25 * v19, v8, v44);
      *(void *)(*(void *)(v11 + 56) + 8 * v19) = v28;
      ++*(void *)(v11 + 16);
      uint64_t v9 = v27;
    }
  }
  uint64_t result = swift_release();
  *Swift::String v3 = v11;
  return result;
}

uint64_t sub_100528AA0(uint64_t a1, char a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = type metadata accessor for AppInstallScheduler.ParkReason();
  uint64_t v38 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_1000172F8(&qword_100663E18);
  char v9 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = result;
  if (*(void *)(v8 + 16))
  {
    uint64_t v35 = v3;
    int64_t v12 = 0;
    uint64_t v13 = *(void *)(v8 + 64);
    char v37 = (void *)(v8 + 64);
    uint64_t v14 = 1 << *(unsigned char *)(v8 + 32);
    if (v14 < 64) {
      uint64_t v15 = ~(-1 << v14);
    }
    else {
      uint64_t v15 = -1;
    }
    unint64_t v16 = v15 & v13;
    int64_t v36 = (unint64_t)(v14 + 63) >> 6;
    uint64_t v17 = result + 64;
    while (1)
    {
      if (v16)
      {
        unint64_t v19 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        unint64_t v20 = v19 | (v12 << 6);
      }
      else
      {
        int64_t v21 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v37;
        if (v21 >= v36) {
          goto LABEL_34;
        }
        unint64_t v22 = v37[v21];
        ++v12;
        if (!v22)
        {
          int64_t v12 = v21 + 1;
          if (v21 + 1 >= v36) {
            goto LABEL_34;
          }
          unint64_t v22 = v37[v12];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v36)
            {
LABEL_34:
              if ((v9 & 1) == 0)
              {
                uint64_t result = swift_release();
                Swift::String v3 = v35;
                goto LABEL_41;
              }
              uint64_t v34 = 1 << *(unsigned char *)(v8 + 32);
              if (v34 >= 64) {
                bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *char v37 = -1 << v34;
              }
              Swift::String v3 = v35;
              *(void *)(v8 + 16) = 0;
              break;
            }
            unint64_t v22 = v37[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v12 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_43;
                }
                if (v12 >= v36) {
                  goto LABEL_34;
                }
                unint64_t v22 = v37[v12];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v12 = v23;
          }
        }
LABEL_21:
        unint64_t v16 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v12 << 6);
      }
      uint64_t v24 = *(void *)(*(void *)(v8 + 48) + 8 * v20);
      uint64_t v25 = *(void *)(v38 + 72);
      uint64_t v26 = *(void *)(v8 + 56) + v25 * v20;
      if (v9) {
        sub_1000188D4(v26, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
      }
      else {
        sub_100530850(v26, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v27 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v17 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v28) & ~*(void *)(v17 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v17 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v18 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(void *)(*(void *)(v11 + 48) + 8 * v18) = v24;
      uint64_t result = sub_1000188D4((uint64_t)v7, *(void *)(v11 + 56) + v25 * v18, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
      ++*(void *)(v11 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *Swift::String v3 = v11;
  return result;
}

uint64_t sub_100528E2C(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v52 = a3(0);
  uint64_t v8 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v51 = (char *)&v44 - v9;
  uint64_t v10 = *v4;
  sub_1000172F8(a4);
  int v50 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  long long v47 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  long long v45 = v4;
  int64_t v46 = (unint64_t)(v13 + 63) >> 6;
  long long v48 = (void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v49 = v8;
  uint64_t v17 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  uint64_t v18 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  while (1)
  {
    if (v16)
    {
      unint64_t v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v24 = v23 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v46) {
      break;
    }
    uint64_t v26 = v47;
    unint64_t v27 = v47[v25];
    ++v20;
    if (!v27)
    {
      int64_t v20 = v25 + 1;
      if (v25 + 1 >= v46) {
        goto LABEL_34;
      }
      unint64_t v27 = v47[v20];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v46)
        {
LABEL_34:
          swift_release();
          uint64_t v6 = v45;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v47[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v20 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v46) {
              goto LABEL_34;
            }
            unint64_t v27 = v47[v20];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v28;
      }
    }
LABEL_21:
    unint64_t v16 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v20 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v10 + 56);
    uint64_t v30 = v10;
    unint64_t v31 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v24);
    uint64_t v32 = *v31;
    uint64_t v33 = v31[1];
    uint64_t v34 = *(void *)(v49 + 72);
    uint64_t v35 = v29 + v34 * v24;
    if (v50)
    {
      (*v17)(v51, v35, v52);
    }
    else
    {
      (*v48)(v51, v35, v52);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v36 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v37 = result & ~v36;
    unint64_t v38 = v37 >> 6;
    if (((-1 << v37) & ~*(void *)(v18 + 8 * (v37 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v37) & ~*(void *)(v18 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v39 = 0;
      unint64_t v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v41 = v38 == v40;
        if (v38 == v40) {
          unint64_t v38 = 0;
        }
        v39 |= v41;
        uint64_t v42 = *(void *)(v18 + 8 * v38);
      }
      while (v42 == -1);
      unint64_t v21 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    unint64_t v22 = (void *)(*(void *)(v12 + 48) + 16 * v21);
    *unint64_t v22 = v32;
    v22[1] = v33;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 56) + v34 * v21, v51, v52);
    ++*(void *)(v12 + 16);
    uint64_t v10 = v30;
  }
  swift_release();
  uint64_t v6 = v45;
  uint64_t v26 = v47;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v43 = 1 << *(unsigned char *)(v10 + 32);
  if (v43 >= 64) {
    bzero(v26, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v26 = -1 << v43;
  }
  *(void *)(v10 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v6 = v12;
  return result;
}

uint64_t sub_100529218(uint64_t a1, int a2)
{
  return sub_100529260(a1, a2, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient, &qword_100663E28, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
}

uint64_t sub_100529260(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v52 = a6;
  uint64_t v58 = a5;
  uint64_t v8 = v6;
  uint64_t v10 = a3(0);
  uint64_t v54 = *(void *)(v10 - 8);
  __chkstk_darwin(v10 - 8);
  uint64_t v60 = (uint64_t)&v47 - v11;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v56 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *v6;
  sub_1000172F8(a4);
  int v55 = a2;
  uint64_t v16 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v17 = v16;
  if (!*(void *)(v15 + 16)) {
    goto LABEL_41;
  }
  uint64_t v59 = v12;
  uint64_t v18 = 1 << *(unsigned char *)(v15 + 32);
  uint64_t v19 = *(void *)(v15 + 64);
  int v50 = (void *)(v15 + 64);
  if (v18 < 64) {
    uint64_t v20 = ~(-1 << v18);
  }
  else {
    uint64_t v20 = -1;
  }
  unint64_t v21 = v20 & v19;
  long long v48 = v6;
  int64_t v49 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v51 = (void (**)(char *, unint64_t, uint64_t))(v13 + 16);
  uint64_t v57 = (void (**)(char *, unint64_t, uint64_t))(v13 + 32);
  uint64_t v22 = v16 + 64;
  uint64_t result = swift_retain();
  int64_t v24 = 0;
  uint64_t v53 = v15;
  int64_t v25 = v56;
  while (1)
  {
    if (v21)
    {
      unint64_t v27 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v28 = v27 | (v24 << 6);
      goto LABEL_22;
    }
    int64_t v29 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v29 >= v49) {
      break;
    }
    uint64_t v30 = v50;
    unint64_t v31 = v50[v29];
    ++v24;
    if (!v31)
    {
      int64_t v24 = v29 + 1;
      if (v29 + 1 >= v49) {
        goto LABEL_34;
      }
      unint64_t v31 = v50[v24];
      if (!v31)
      {
        int64_t v32 = v29 + 2;
        if (v32 >= v49)
        {
LABEL_34:
          swift_release();
          uint64_t v8 = v48;
          if ((v55 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v31 = v50[v32];
        if (!v31)
        {
          while (1)
          {
            int64_t v24 = v32 + 1;
            if (__OFADD__(v32, 1)) {
              goto LABEL_43;
            }
            if (v24 >= v49) {
              goto LABEL_34;
            }
            unint64_t v31 = v50[v24];
            ++v32;
            if (v31) {
              goto LABEL_21;
            }
          }
        }
        int64_t v24 = v32;
      }
    }
LABEL_21:
    unint64_t v21 = (v31 - 1) & v31;
    unint64_t v28 = __clz(__rbit64(v31)) + (v24 << 6);
LABEL_22:
    uint64_t v33 = v13;
    uint64_t v34 = *(void *)(v13 + 72);
    unint64_t v35 = *(void *)(v15 + 48) + v34 * v28;
    if (v55)
    {
      (*v57)(v25, v35, v59);
      uint64_t v36 = *(void *)(v15 + 56);
      uint64_t v37 = *(void *)(v54 + 72);
      sub_1000188D4(v36 + v37 * v28, v60, v58);
    }
    else
    {
      (*v51)(v25, v35, v59);
      uint64_t v38 = *(void *)(v15 + 56);
      uint64_t v37 = *(void *)(v54 + 72);
      sub_100530850(v38 + v37 * v28, v60, v52);
    }
    sub_100013DD4((unint64_t *)&unk_100660E70, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v39 = -1 << *(unsigned char *)(v17 + 32);
    unint64_t v40 = result & ~v39;
    unint64_t v41 = v40 >> 6;
    if (((-1 << v40) & ~*(void *)(v22 + 8 * (v40 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v40) & ~*(void *)(v22 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
      int64_t v25 = v56;
    }
    else
    {
      char v42 = 0;
      unint64_t v43 = (unint64_t)(63 - v39) >> 6;
      int64_t v25 = v56;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v44 = v41 == v43;
        if (v41 == v43) {
          unint64_t v41 = 0;
        }
        v42 |= v44;
        uint64_t v45 = *(void *)(v22 + 8 * v41);
      }
      while (v45 == -1);
      unint64_t v26 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(void *)(v22 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    (*v57)((char *)(*(void *)(v17 + 48) + v34 * v26), (unint64_t)v25, v59);
    uint64_t result = sub_1000188D4(v60, *(void *)(v17 + 56) + v37 * v26, v58);
    ++*(void *)(v17 + 16);
    uint64_t v15 = v53;
    uint64_t v13 = v33;
  }
  swift_release();
  uint64_t v8 = v48;
  uint64_t v30 = v50;
  if ((v55 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v46 = 1 << *(unsigned char *)(v15 + 32);
  if (v46 >= 64) {
    bzero(v30, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v30 = -1 << v46;
  }
  *(void *)(v15 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v8 = v17;
  return result;
}

uint64_t sub_100529754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_100016D20(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_10052B494();
LABEL_7:
    uint64_t v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      unint64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      *unint64_t v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_100523118(v17, a5 & 1);
  unint64_t v23 = sub_100016D20(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  int64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
  *int64_t v25 = a3;
  v25[1] = a4;
  unint64_t v26 = (void *)(v20[7] + 16 * v14);
  *unint64_t v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v29;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1005298DC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100016D20(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10052B810();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      *(void *)(v18[7] + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_100523760(result, a4 & 1);
  uint64_t result = sub_100016D20(a2, a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  char v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v20 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v20 = a2;
  v20[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v21 = v18[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v18[2] = v23;

  return swift_bridgeObjectRetain();
}

_OWORD *sub_100529A40(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_100451EDC(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10052B9C0();
      goto LABEL_7;
    }
    sub_100523A6C(v13, a3 & 1);
    unint64_t v19 = sub_100451EDC(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
LABEL_13:
      sub_10036DF28(a2, (uint64_t)v21);
      return sub_10052AEE8(v10, (uint64_t)v21, a1, v16);
    }
LABEL_15:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if ((v14 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
  sub_100014524((uint64_t)v17);

  return sub_1001C5DD4(a1, v17);
}

uint64_t sub_100529B8C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_100451F20(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10052BBA8();
      goto LABEL_7;
    }
    sub_100523D84(v13, a3 & 1);
    uint64_t v19 = sub_100451F20(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7] + 48 * v10;
    return sub_1005306F0(a1, v17);
  }
LABEL_13:

  return sub_10052AF64(v10, a2, a1, v16);
}

uint64_t sub_100529CC0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v28 = a2;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  BOOL v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v4;
  unint64_t v15 = sub_10000F800(a3);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v5;
    if (v19)
    {
LABEL_8:
      BOOL v22 = (uint64_t *)(v21[7] + 16 * v15);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v24 = v28;
      *BOOL v22 = a1;
      v22[1] = v24;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_10052BDB0();
    goto LABEL_7;
  }
  sub_1005240E8(v18, a4 & 1);
  unint64_t v25 = sub_10000F800(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v25;
  uint64_t v21 = *v5;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  return sub_10052AFDC(v15, (uint64_t)v12, a1, v28, v21);
}

uint64_t sub_100529E78(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v12 = (void *)*v3;
  unint64_t v14 = sub_10000F800(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t v22 = type metadata accessor for ProgressCache.Progress();
      return sub_10053078C(a1, v21 + *(void *)(*(void *)(v22 - 8) + 72) * v14, (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress);
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10052EF58((uint64_t (*)(void))type metadata accessor for ProgressCache.Progress, &qword_100663C50, (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress, (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress);
    goto LABEL_7;
  }
  sub_100529260(v17, a3 & 1, (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress, &qword_100663C50, (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress, (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress);
  unint64_t v24 = sub_10000F800(a2);
  if ((v18 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v24;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100017A20(v14, (uint64_t)v11, a1, v20, (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress, (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress);
}

uint64_t sub_10052A0FC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100016D20(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t v20 = type metadata accessor for ConfigurationBag(0);
      return sub_10053078C(a1, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v12, type metadata accessor for ConfigurationBag);
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10052D420(type metadata accessor for ConfigurationBag, &qword_100666778, type metadata accessor for ConfigurationBag, type metadata accessor for ConfigurationBag);
    goto LABEL_7;
  }
  sub_1005267B4(v15, a4 & 1, type metadata accessor for ConfigurationBag, &qword_100666778, type metadata accessor for ConfigurationBag, type metadata accessor for ConfigurationBag);
  unint64_t v22 = sub_100016D20(a2, a3);
  if ((v16 & 1) != (v23 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v22;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_10052B09C(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t sub_10052A2F0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_1004527A0((__n128 *)a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_10052C9C8();
LABEL_7:
    char v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_10052571C(v13, a3 & 1);
  unint64_t v19 = sub_1004527A0((__n128 *)a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_16:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  char v16 = (void *)*v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1002F9F4C((__n128 *)a2, &v28);
  long long v27 = *(_OWORD *)(a2 + 24);
  v16[(v10 >> 6) + 8] |= 1 << v10;
  uint64_t v21 = v16[6] + 40 * v10;
  uint64_t v22 = *(void *)(a2 + 32);
  long long v23 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)a2;
  *(_OWORD *)(v21 + 16) = v23;
  *(void *)(v21 + 32) = v22;
  *(void *)(v16[7] + 8 * v10) = a1;
  uint64_t v24 = v16[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v16[2] = v26;
  sub_100530758((uint64_t)&v28);
  return sub_10018B0F0((uint64_t)&v27);
}

_OWORD *sub_10052A468(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100016D20(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10052CE2C();
      goto LABEL_7;
    }
    sub_100525DEC(v15, a4 & 1);
    unint64_t v21 = sub_100016D20(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v18 = *v5;
  if (v16)
  {
LABEL_8:
    unint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    sub_100014524((uint64_t)v19);
    return sub_1001C5DD4(a1, v19);
  }
LABEL_13:
  sub_10052B148(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

uint64_t sub_10052A5BC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100016D20(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_18;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10052DBA8();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7] + 104 * v12;
      return sub_1005307F4(a1, v19);
    }
    goto LABEL_13;
  }
  sub_100527334(v15, a4 & 1);
  unint64_t v21 = sub_100016D20(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_19:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  char v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_13:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  long long v23 = (uint64_t *)(v18[6] + 16 * v12);
  *long long v23 = a2;
  v23[1] = a3;
  uint64_t v24 = v18[7] + 104 * v12;
  long long v25 = *(_OWORD *)a1;
  long long v26 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v24 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v24 + 32) = v26;
  *(_OWORD *)uint64_t v24 = v25;
  long long v27 = *(_OWORD *)(a1 + 48);
  long long v28 = *(_OWORD *)(a1 + 64);
  long long v29 = *(_OWORD *)(a1 + 80);
  *(unsigned char *)(v24 + 96) = *(unsigned char *)(a1 + 96);
  *(_OWORD *)(v24 + 64) = v28;
  *(_OWORD *)(v24 + 80) = v29;
  *(_OWORD *)(v24 + 48) = v27;
  uint64_t v30 = v18[2];
  BOOL v31 = __OFADD__(v30, 1);
  uint64_t v32 = v30 + 1;
  if (v31)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  void v18[2] = v32;

  return swift_bridgeObjectRetain();
}

uint64_t sub_10052A764(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100459300(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10052E1EC();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = (void *)(v18[7] + 16 * v12);
      uint64_t result = swift_bridgeObjectRelease();
      *uint64_t v19 = a1;
      v19[1] = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(void *)(v18[6] + 8 * v12) = a3;
    unint64_t v21 = (void *)(v18[7] + 16 * v12);
    *unint64_t v21 = a1;
    v21[1] = a2;
    uint64_t v22 = v18[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (!v23)
    {
      void v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_100527D70(result, a4 & 1);
  uint64_t result = sub_100459300(a3);
  if ((v16 & 1) == (v20 & 1))
  {
    unint64_t v12 = result;
    char v18 = (void *)*v5;
    if (v16) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

_OWORD *sub_10052A8A4(_OWORD *a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_100451D14((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 < v12 || (a3 & 1) == 0)
  {
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_10052E554();
      goto LABEL_7;
    }
    sub_100528340(v12, a3 & 1);
    unint64_t v18 = sub_100451D14((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      unint64_t v9 = v18;
      uint64_t v15 = *v4;
      if (v13) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    type metadata accessor for CFString(0);
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v15 = *v4;
  if (v13)
  {
LABEL_8:
    char v16 = (_OWORD *)(v15[7] + 32 * v9);
    sub_100014524((uint64_t)v16);
    return sub_1001C5DD4(a1, v16);
  }
LABEL_13:
  sub_10052B21C(v9, (uint64_t)a2, a1, v15);

  return a2;
}

uint64_t sub_10052A9E8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  BOOL v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10000F800(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    char v20 = *v4;
    if (v18)
    {
LABEL_8:
      *(void *)(v20[7] + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10052E71C();
    goto LABEL_7;
  }
  sub_10052867C(result, a3 & 1);
  uint64_t result = sub_10000F800(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  char v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_10052B284(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_10052AB84(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_10045257C(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    BOOL v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t v18 = type metadata accessor for AppInstallScheduler.ParkReason();
      return sub_10053078C(a1, v17 + *(void *)(*(void *)(v18 - 8) + 72) * v10, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_10052E9B0();
    goto LABEL_7;
  }
  sub_100528AA0(v13, a3 & 1);
  unint64_t v20 = sub_10045257C(a2);
  if ((v14 & 1) != (v21 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v20;
  BOOL v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return sub_10052B33C(v10, a2, a1, v16);
}

uint64_t sub_10052ACD8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100016D20(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10052EC4C((uint64_t (*)(void))&type metadata accessor for Date, &qword_100663D08);
      goto LABEL_7;
    }
    sub_100528E2C(v15, a4 & 1, (uint64_t (*)(void))&type metadata accessor for Date, &qword_100663D08);
    unint64_t v26 = sub_100016D20(a2, a3);
    if ((v16 & 1) == (v27 & 1))
    {
      unint64_t v12 = v26;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7];
    uint64_t v20 = type metadata accessor for Date();
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 40);
    uint64_t v23 = v20;
    uint64_t v24 = v19 + *(void *)(v21 + 72) * v12;
    return v22(v24, a1, v23);
  }
LABEL_13:
  sub_10052B3E4(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

unint64_t sub_10052AE90(unint64_t result, uint64_t a2, uint64_t a3, __int16 a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  uint64_t v6 = (unsigned char *)(a5[7] + 2 * result);
  *uint64_t v6 = a4 & 1;
  v6[1] = HIBYTE(a4) & 1;
  uint64_t v7 = a5[2];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a5[2] = v9;
  }
  return result;
}

_OWORD *sub_10052AEE8(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_1001C5DD4(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

uint64_t sub_10052AF64(unint64_t a1, char a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(unsigned char *)(a4[6] + a1) = a2;
  uint64_t result = sub_10001733C(a3, a4[7] + 48 * a1, &qword_10065CE70);
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

uint64_t sub_10052AFDC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  uint64_t v13 = (void *)(a5[7] + 16 * a1);
  *uint64_t v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

uint64_t sub_10052B09C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for ConfigurationBag(0);
  uint64_t result = sub_1000188D4(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, type metadata accessor for ConfigurationBag);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

_OWORD *sub_10052B148(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_1001C5DD4(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

unint64_t sub_10052B1B4(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = a4[6] + 104 * result;
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v4 + 80) = v5;
  *(unsigned char *)(v4 + 96) = *(unsigned char *)(a2 + 96);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v4 + 48) = v7;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

_OWORD *sub_10052B21C(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_1001C5DD4(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

uint64_t sub_10052B284(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_10052B33C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = type metadata accessor for AppInstallScheduler.ParkReason();
  uint64_t result = sub_1000188D4(a3, v7 + *(void *)(*(void *)(v8 - 8) + 72) * a1, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

uint64_t sub_10052B3E4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for Date();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, a4, v10);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

void *sub_10052B494()
{
  uint64_t v1 = v0;
  sub_1000172F8(&qword_100663AD8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v23 = v19;
    v23[1] = v18;
    uint64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *uint64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10052B650()
{
  uint64_t v1 = v0;
  sub_1000172F8(&qword_100663E30);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 2 * v15;
    uint64_t v21 = (char *)(*(void *)(v2 + 56) + v20);
    char v22 = *v21;
    LOBYTE(v21) = v21[1];
    uint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v23 = v19;
    v23[1] = v18;
    uint64_t v24 = (unsigned char *)(*(void *)(v4 + 56) + v20);
    *uint64_t v24 = v22;
    v24[1] = (_BYTE)v21;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10052B810()
{
  uint64_t v1 = v0;
  sub_1000172F8(&qword_100666758);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    char v22 = (void *)(*(void *)(v4 + 48) + v16);
    *char v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10052B9C0()
{
  uint64_t v1 = v0;
  sub_1000172F8(&qword_10065CE48);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_10036DF28(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    sub_1000144C8(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    long long v19 = v25[0];
    long long v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    uint64_t result = sub_1001C5DD4(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10052BBA8()
{
  uint64_t v1 = v0;
  sub_1000172F8(&qword_100663C90);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    char v16 = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    sub_100017238(*(void *)(v2 + 56) + 48 * v15, (uint64_t)v20, &qword_10065CE70);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = v16;
    uint64_t result = (void *)sub_10001733C((uint64_t)v20, *(void *)(v4 + 56) + 48 * v15, &qword_10065CE70);
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10052BD90()
{
  return sub_10052EC4C((uint64_t (*)(void))&type metadata accessor for Platform, &qword_1006667B0);
}

void *sub_10052BDB0()
{
  uint64_t v38 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v37 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000172F8(&qword_100663DF8);
  uint64_t v32 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v40 = v4;
  if (!v5)
  {
    uint64_t result = (void *)swift_release();
    uint64_t v30 = v40;
    long long v29 = v32;
LABEL_25:
    *long long v29 = v30;
    return result;
  }
  uint64_t v6 = v4;
  uint64_t result = (void *)(v4 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    uint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
    uint64_t v6 = v40;
  }
  int64_t v9 = 0;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v39 = v3;
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v3 + 64);
  uint64_t v33 = v3 + 64;
  int64_t v34 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v35 = v1 + 32;
  uint64_t v36 = v1 + 16;
  unint64_t v14 = v37;
  uint64_t v13 = v38;
  uint64_t v15 = v40;
  while (1)
  {
    if (v12)
    {
      unint64_t v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v17 = v16 | (v9 << 6);
      uint64_t v18 = v39;
      goto LABEL_9;
    }
    int64_t v26 = v9 + 1;
    uint64_t v18 = v39;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v34) {
        goto LABEL_23;
      }
      unint64_t v27 = *(void *)(v33 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_22:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v17 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v14, *(void *)(v18 + 48) + v19, v13);
    uint64_t v20 = *(void *)(v18 + 56);
    uint64_t v21 = 16 * v17;
    unint64_t v22 = (uint64_t *)(v20 + 16 * v17);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v15 + 48) + v19, v14, v13);
    int64_t v25 = (void *)(*(void *)(v15 + 56) + v21);
    *int64_t v25 = v23;
    v25[1] = v24;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v34)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    long long v29 = v32;
    uint64_t v30 = v40;
    goto LABEL_25;
  }
  unint64_t v27 = *(void *)(v33 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10052C088()
{
  uint64_t v1 = v0;
  sub_1000172F8(&qword_100663DE0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 40 * v15;
    sub_10019B17C(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = (void *)sub_10018B164(v22, *(void *)(v4 + 56) + v18);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10052C250()
{
  uint64_t v1 = v0;
  sub_1000172F8(&qword_100663D60);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10052C3F4()
{
  uint64_t v1 = v0;
  sub_1000172F8(&qword_1006667A8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      int64_t v9 = v27 + 1;
      if (v27 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v6 + 8 * v9);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v28 - 1) & v28;
    unint64_t v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 24 * v15;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    char v20 = *(unsigned char *)(v17 + 16);
    uint64_t v21 = 16 * v15;
    unint64_t v22 = (uint64_t *)(*(void *)(v2 + 56) + v21);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    uint64_t v25 = *(void *)(v4 + 48) + v16;
    *(void *)uint64_t v25 = v18;
    *(void *)(v25 + 8) = v19;
    *(unsigned char *)(v25 + 16) = v20;
    int64_t v26 = (void *)(*(void *)(v4 + 56) + v21);
    *int64_t v26 = v23;
    v26[1] = v24;
    sub_1001C3ED0(v18, v19, v20);
    uint64_t result = (void *)swift_retain();
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v13) {
    goto LABEL_26;
  }
  unint64_t v28 = *(void *)(v6 + 8 * v29);
  if (v28)
  {
    int64_t v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v9);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10052C5C0()
{
  uint64_t v1 = v0;
  sub_1000172F8(&qword_10065BD18);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    char v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v23 = v19;
    v23[1] = v18;
    uint64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *uint64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_retain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10052C77C()
{
  return sub_10052DDFC(&qword_100663C58);
}

void *sub_10052C788()
{
  return sub_10052EC4C((uint64_t (*)(void))&type metadata accessor for XPCApp, &qword_100666540);
}

void *sub_10052C7A8()
{
  return sub_10052EF58((uint64_t (*)(void))type metadata accessor for ProgressCache.Progress, &qword_100663C50, (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress, (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress);
}

void *sub_10052C7F0()
{
  uint64_t v1 = v0;
  sub_1000172F8(&qword_100666430);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      int64_t v9 = v28 + 1;
      if (v28 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v6 + 8 * v9);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v29 - 1) & v29;
    unint64_t v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    uint64_t v21 = (uint64_t *)(*(void *)(v2 + 56) + v20);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    uint64_t v24 = v21[2];
    uint64_t v25 = v21[3];
    unint64_t v26 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v26 = v19;
    v26[1] = v18;
    int64_t v27 = (void *)(*(void *)(v4 + 56) + v20);
    *int64_t v27 = v22;
    v27[1] = v23;
    v27[2] = v24;
    v27[3] = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v30 = v28 + 2;
  if (v30 >= v13) {
    goto LABEL_26;
  }
  unint64_t v29 = *(void *)(v6 + 8 * v30);
  if (v29)
  {
    int64_t v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v6 + 8 * v9);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10052C9C8()
{
  uint64_t v1 = v0;
  sub_1000172F8(&qword_100666770);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 40 * v15;
    uint64_t v18 = *(void *)(v17 + 8);
    char v19 = *(unsigned char *)(v17 + 16);
    uint64_t v20 = *(void *)(v17 + 24);
    uint64_t v21 = *(void *)(v17 + 32);
    uint64_t v22 = 8 * v15;
    uint64_t v23 = *(void *)(*(void *)(v2 + 56) + v22);
    uint64_t v24 = *(void *)(v4 + 48) + v16;
    *(void *)uint64_t v24 = *(void *)v17;
    *(void *)(v24 + 8) = v18;
    *(unsigned char *)(v24 + 16) = v19;
    *(void *)(v24 + 24) = v20;
    *(void *)(v24 + 32) = v21;
    *(void *)(*(void *)(v4 + 56) + v22) = v23;
    sub_1001C617C();
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10052CBA4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ConfigurationBag.UpdatesConfiguration(0);
  uint64_t v25 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000172F8(&qword_100666768);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v24 = v1;
  uint64_t result = (void *)(v6 + 64);
  uint64_t v9 = v5 + 64;
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v9 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  }
  int64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v15) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v9 + 8 * v21);
    ++v11;
    if (!v22)
    {
      int64_t v11 = v21 + 1;
      if (v21 + 1 >= v15) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v9 + 8 * v11);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v22 - 1) & v22;
    unint64_t v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_9:
    unint64_t v18 = *(void *)(v25 + 72) * v17;
    sub_100530850(*(void *)(v5 + 48) + v18, (uint64_t)v4, type metadata accessor for ConfigurationBag.UpdatesConfiguration);
    uint64_t v19 = 8 * v17;
    uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
    sub_1000188D4((uint64_t)v4, *(void *)(v7 + 48) + v18, type metadata accessor for ConfigurationBag.UpdatesConfiguration);
    *(void *)(*(void *)(v7 + 56) + v19) = v20;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v24;
    goto LABEL_25;
  }
  unint64_t v22 = *(void *)(v9 + 8 * v23);
  if (v22)
  {
    int64_t v11 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v9 + 8 * v11);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10052CE2C()
{
  uint64_t v1 = v0;
  sub_1000172F8(&qword_100663C68);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_1000144C8(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v21 = v19;
    v21[1] = v18;
    sub_1001C5DD4(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10052D014()
{
  uint64_t v1 = v0;
  sub_1000172F8(&qword_100664BC0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v23 = v19;
    v23[1] = v18;
    int64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *int64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10052D1D0()
{
  uint64_t v1 = v0;
  sub_1000172F8(&qword_100664BB8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t v29 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 72 * v15;
    sub_1004ABF94(*(void *)(v2 + 56) + 72 * v15, (uint64_t)v30);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    uint64_t v22 = *(void *)(v4 + 56) + v20;
    *(_OWORD *)uint64_t v22 = v30[0];
    long long v23 = v30[1];
    long long v24 = v30[2];
    long long v25 = v30[3];
    *(void *)(v22 + 64) = v31;
    *(_OWORD *)(v22 + 32) = v24;
    *(_OWORD *)(v22 + 48) = v25;
    *(_OWORD *)(v22 + 16) = v23;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v29;
    goto LABEL_28;
  }
  unint64_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10052D3D8()
{
  return sub_10052D420((uint64_t (*)(void))type metadata accessor for Restore, &qword_100663D30, (uint64_t (*)(void))type metadata accessor for Restore, (uint64_t (*)(void))type metadata accessor for Restore);
}

void *sub_10052D420(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v6 = v4;
  uint64_t v7 = a1(0);
  uint64_t v35 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8);
  int64_t v9 = (char *)&v32 - v8;
  sub_1000172F8(a2);
  uint64_t v10 = *v4;
  uint64_t v11 = static _DictionaryStorage.copy(original:)();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v6 = v12;
    return result;
  }
  uint64_t v33 = v6;
  uint64_t result = (void *)(v11 + 64);
  unint64_t v14 = (unint64_t)((1 << *(unsigned char *)(v12 + 32)) + 63) >> 6;
  if (v12 != v10 || (unint64_t)result >= v10 + 64 + 8 * v14) {
    uint64_t result = memmove(result, (const void *)(v10 + 64), 8 * v14);
  }
  uint64_t v34 = v10 + 64;
  int64_t v16 = 0;
  *(void *)(v12 + 16) = *(void *)(v10 + 16);
  uint64_t v17 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & *(void *)(v10 + 64);
  int64_t v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      unint64_t v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v22 = v21 | (v16 << 6);
      goto LABEL_12;
    }
    int64_t v29 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v29 >= v20) {
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v34 + 8 * v29);
    ++v16;
    if (!v30)
    {
      int64_t v16 = v29 + 1;
      if (v29 + 1 >= v20) {
        goto LABEL_26;
      }
      unint64_t v30 = *(void *)(v34 + 8 * v16);
      if (!v30) {
        break;
      }
    }
LABEL_25:
    unint64_t v19 = (v30 - 1) & v30;
    unint64_t v22 = __clz(__rbit64(v30)) + (v16 << 6);
LABEL_12:
    uint64_t v23 = 16 * v22;
    long long v24 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v22);
    uint64_t v25 = *v24;
    uint64_t v26 = v24[1];
    unint64_t v27 = *(void *)(v35 + 72) * v22;
    sub_100530850(*(void *)(v10 + 56) + v27, (uint64_t)v9, v36);
    int64_t v28 = (void *)(*(void *)(v12 + 48) + v23);
    *int64_t v28 = v25;
    v28[1] = v26;
    sub_1000188D4((uint64_t)v9, *(void *)(v12 + 56) + v27, v37);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v31 = v29 + 2;
  if (v31 >= v20)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v6 = v33;
    goto LABEL_28;
  }
  unint64_t v30 = *(void *)(v34 + 8 * v31);
  if (v30)
  {
    int64_t v16 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v16 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v16 >= v20) {
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v34 + 8 * v16);
    ++v31;
    if (v30) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10052D694()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000172F8(&qword_100666788);
  uint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    *uint64_t v23 = v7;
    return result;
  }
  uint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v24 = v5 + 64;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  uint64_t v27 = v2 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_10052D92C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Restore();
  uint64_t v25 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000172F8(&qword_100666780);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v24 = v1;
  uint64_t result = (void *)(v6 + 64);
  uint64_t v9 = v5 + 64;
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v9 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  }
  int64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v15) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v9 + 8 * v21);
    ++v11;
    if (!v22)
    {
      int64_t v11 = v21 + 1;
      if (v21 + 1 >= v15) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v9 + 8 * v11);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v22 - 1) & v22;
    unint64_t v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_9:
    uint64_t v18 = 8 * v17;
    uint64_t v19 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
    unint64_t v20 = *(void *)(v25 + 72) * v17;
    sub_100530850(*(void *)(v5 + 56) + v20, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for Restore);
    *(void *)(*(void *)(v7 + 48) + v18) = v19;
    uint64_t result = (void *)sub_1000188D4((uint64_t)v4, *(void *)(v7 + 56) + v20, (uint64_t (*)(void))type metadata accessor for Restore);
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v24;
    goto LABEL_25;
  }
  unint64_t v22 = *(void *)(v9 + 8 * v23);
  if (v22)
  {
    int64_t v11 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v9 + 8 * v11);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10052DBA8()
{
  sub_1000172F8(&qword_1006667A0);
  uint64_t v37 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v37 = v3;
    return result;
  }
  uint64_t result = (void *)(v2 + 64);
  unint64_t v5 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5) {
    uint64_t result = memmove(result, (const void *)(v1 + 64), 8 * v5);
  }
  uint64_t v38 = v1 + 64;
  int64_t v7 = 0;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  uint64_t v8 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(v1 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v7 << 6);
      goto LABEL_12;
    }
    int64_t v34 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v34 >= v11) {
      goto LABEL_26;
    }
    unint64_t v35 = *(void *)(v38 + 8 * v34);
    ++v7;
    if (!v35)
    {
      int64_t v7 = v34 + 1;
      if (v34 + 1 >= v11) {
        goto LABEL_26;
      }
      unint64_t v35 = *(void *)(v38 + 8 * v7);
      if (!v35) {
        break;
      }
    }
LABEL_25:
    unint64_t v10 = (v35 - 1) & v35;
    unint64_t v13 = __clz(__rbit64(v35)) + (v7 << 6);
LABEL_12:
    uint64_t v14 = 16 * v13;
    int64_t v15 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v13);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = 104 * v13;
    uint64_t v19 = *(void *)(v1 + 56) + v18;
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    uint64_t v22 = *(void *)(v19 + 16);
    uint64_t v23 = *(void *)(v19 + 24);
    uint64_t v24 = *(void *)(v19 + 32);
    uint64_t v25 = *(void *)(v19 + 40);
    uint64_t v26 = *(void *)(v19 + 48);
    char v27 = *(unsigned char *)(v19 + 56);
    uint64_t v28 = *(void *)(v19 + 64);
    uint64_t v29 = *(void *)(v19 + 88);
    char v30 = *(unsigned char *)(v19 + 96);
    int64_t v31 = (void *)(*(void *)(v3 + 48) + v14);
    long long v32 = *(_OWORD *)(v19 + 72);
    *int64_t v31 = v16;
    v31[1] = v17;
    uint64_t v33 = *(void *)(v3 + 56) + v18;
    *(void *)uint64_t v33 = v20;
    *(void *)(v33 + 8) = v21;
    *(void *)(v33 + 16) = v22;
    *(void *)(v33 + 24) = v23;
    *(void *)(v33 + 32) = v24;
    *(void *)(v33 + 40) = v25;
    *(void *)(v33 + 48) = v26;
    *(unsigned char *)(v33 + 56) = v27;
    *(void *)(v33 + 64) = v28;
    *(_OWORD *)(v33 + 72) = v32;
    *(void *)(v33 + 88) = v29;
    *(unsigned char *)(v33 + 96) = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v36 = v34 + 2;
  if (v36 >= v11) {
    goto LABEL_26;
  }
  unint64_t v35 = *(void *)(v38 + 8 * v36);
  if (v35)
  {
    int64_t v7 = v36;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v7 = v36 + 1;
    if (__OFADD__(v36, 1)) {
      break;
    }
    if (v7 >= v11) {
      goto LABEL_26;
    }
    unint64_t v35 = *(void *)(v38 + 8 * v7);
    ++v36;
    if (v35) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10052DDF0()
{
  return sub_10052DDFC(&qword_100666790);
}

void *sub_10052DDFC(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_1000172F8(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *uint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10052DFAC()
{
  sub_1000172F8(&qword_100666798);
  uint64_t v33 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v33 = v3;
    return result;
  }
  uint64_t result = (void *)(v2 + 64);
  unint64_t v5 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5) {
    uint64_t result = memmove(result, (const void *)(v1 + 64), 8 * v5);
  }
  uint64_t v34 = v1 + 64;
  int64_t v7 = 0;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  uint64_t v8 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(v1 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v7 << 6);
      goto LABEL_12;
    }
    int64_t v30 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v30 >= v11) {
      goto LABEL_26;
    }
    unint64_t v31 = *(void *)(v34 + 8 * v30);
    ++v7;
    if (!v31)
    {
      int64_t v7 = v30 + 1;
      if (v30 + 1 >= v11) {
        goto LABEL_26;
      }
      unint64_t v31 = *(void *)(v34 + 8 * v7);
      if (!v31) {
        break;
      }
    }
LABEL_25:
    unint64_t v10 = (v31 - 1) & v31;
    unint64_t v13 = __clz(__rbit64(v31)) + (v7 << 6);
LABEL_12:
    uint64_t v14 = 104 * v13;
    uint64_t v15 = *(void *)(v1 + 48) + 104 * v13;
    uint64_t v16 = *(void *)(v15 + 8);
    uint64_t v17 = *(void *)(v15 + 16);
    uint64_t v18 = *(void *)(v15 + 24);
    uint64_t v19 = *(void *)(v15 + 32);
    uint64_t v20 = *(void *)(v15 + 40);
    uint64_t v21 = *(void *)(v15 + 48);
    char v22 = *(unsigned char *)(v15 + 56);
    uint64_t v23 = *(void *)(v15 + 64);
    uint64_t v24 = *(void *)(v15 + 88);
    char v25 = *(unsigned char *)(v15 + 96);
    uint64_t v26 = 8 * v13;
    uint64_t v27 = *(void *)(*(void *)(v1 + 56) + v26);
    uint64_t v28 = *(void *)(v3 + 48) + v14;
    long long v29 = *(_OWORD *)(v15 + 72);
    *(void *)uint64_t v28 = *(void *)v15;
    *(void *)(v28 + 8) = v16;
    *(void *)(v28 + 16) = v17;
    *(void *)(v28 + 24) = v18;
    *(void *)(v28 + 32) = v19;
    *(void *)(v28 + 40) = v20;
    *(void *)(v28 + 48) = v21;
    *(unsigned char *)(v28 + 56) = v22;
    *(void *)(v28 + 64) = v23;
    *(_OWORD *)(v28 + 72) = v29;
    *(void *)(v28 + 88) = v24;
    *(unsigned char *)(v28 + 96) = v25;
    *(void *)(*(void *)(v3 + 56) + v26) = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v32 = v30 + 2;
  if (v32 >= v11) {
    goto LABEL_26;
  }
  unint64_t v31 = *(void *)(v34 + 8 * v32);
  if (v31)
  {
    int64_t v7 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v7 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v7 >= v11) {
      goto LABEL_26;
    }
    unint64_t v31 = *(void *)(v34 + 8 * v7);
    ++v32;
    if (v31) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10052E1EC()
{
  uint64_t v1 = v0;
  sub_1000172F8(&qword_1006667B8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 56) + v18);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    char v22 = (void *)(*(void *)(v4 + 56) + v18);
    *char v22 = v21;
    v22[1] = v20;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10052E39C()
{
  uint64_t v1 = v0;
  sub_1000172F8(&qword_1006667C0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 16 * v15;
    uint64_t v18 = *(void *)v17;
    LOBYTE(v17) = *(unsigned char *)(v17 + 8);
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = *(void *)(v4 + 48) + v16;
    *(void *)uint64_t v21 = v18;
    *(unsigned char *)(v21 + 8) = v17;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10052E554()
{
  uint64_t v1 = v0;
  sub_1000172F8(&qword_100663AF0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    sub_1000144C8(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    sub_1001C5DD4(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
    id result = v17;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10052E71C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000172F8(&qword_100663E08);
  unint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *unint64_t v23 = v7;
    return result;
  }
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v24 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v27 = v2 + 16;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + v17);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_10052E9B0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AppInstallScheduler.ParkReason();
  uint64_t v25 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000172F8(&qword_100663E18);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v24 = v1;
  id result = (void *)(v6 + 64);
  uint64_t v9 = v5 + 64;
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v9 + 8 * v10) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  }
  int64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v15) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v9 + 8 * v21);
    ++v11;
    if (!v22)
    {
      int64_t v11 = v21 + 1;
      if (v21 + 1 >= v15) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v9 + 8 * v11);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v22 - 1) & v22;
    unint64_t v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_9:
    uint64_t v18 = 8 * v17;
    uint64_t v19 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
    unint64_t v20 = *(void *)(v25 + 72) * v17;
    sub_100530850(*(void *)(v5 + 56) + v20, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
    *(void *)(*(void *)(v7 + 48) + v18) = v19;
    id result = (void *)sub_1000188D4((uint64_t)v4, *(void *)(v7 + 56) + v20, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v24;
    goto LABEL_25;
  }
  unint64_t v22 = *(void *)(v9 + 8 * v23);
  if (v22)
  {
    int64_t v11 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v9 + 8 * v11);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10052EC2C()
{
  return sub_10052EC4C((uint64_t (*)(void))&type metadata accessor for Date, &qword_100663D08);
}

void *sub_10052EC4C(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v39 = a1(0);
  uint64_t v4 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v6 = (char *)&v33 - v5;
  sub_1000172F8(a2);
  uint64_t v34 = v2;
  uint64_t v7 = *v2;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = *(void *)(v7 + 16);
  uint64_t v40 = v8;
  if (!v9)
  {
    id result = (void *)swift_release();
    uint64_t v32 = v40;
    unint64_t v31 = v34;
LABEL_28:
    *unint64_t v31 = v32;
    return result;
  }
  uint64_t v10 = v8;
  id result = (void *)(v8 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v7 || (unint64_t)result >= v7 + 64 + 8 * v12)
  {
    id result = memmove(result, (const void *)(v7 + 64), 8 * v12);
    uint64_t v10 = v40;
  }
  int64_t v14 = 0;
  *(void *)(v10 + 16) = *(void *)(v7 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v7 + 64);
  uint64_t v35 = v7 + 64;
  int64_t v36 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v37 = v4 + 32;
  uint64_t v38 = v4 + 16;
  uint64_t v18 = v39;
  while (1)
  {
    if (v17)
    {
      unint64_t v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }
    int64_t v28 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v36) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v28);
    ++v14;
    if (!v29)
    {
      int64_t v14 = v28 + 1;
      if (v28 + 1 >= v36) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v35 + 8 * v14);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    unint64_t v17 = (v29 - 1) & v29;
    unint64_t v20 = __clz(__rbit64(v29)) + (v14 << 6);
LABEL_12:
    uint64_t v21 = 16 * v20;
    unint64_t v22 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v20);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    unint64_t v25 = *(void *)(v4 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v7 + 56) + v25, v18);
    uint64_t v26 = v40;
    uint64_t v27 = (void *)(*(void *)(v40 + 48) + v21);
    *uint64_t v27 = v23;
    v27[1] = v24;
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v26 + 56) + v25, v6, v18);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v30 = v28 + 2;
  if (v30 >= v36)
  {
LABEL_26:
    id result = (void *)swift_release();
    unint64_t v31 = v34;
    uint64_t v32 = v40;
    goto LABEL_28;
  }
  unint64_t v29 = *(void *)(v35 + 8 * v30);
  if (v29)
  {
    int64_t v14 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v14 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v14 >= v36) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v14);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10052EF10()
{
  return sub_10052EF58((uint64_t (*)(void))type metadata accessor for RegisteredXPCClient, &qword_100663E28, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
}

void *sub_10052EF58(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v35 = a3;
  int64_t v36 = a4;
  uint64_t v6 = a1(0);
  uint64_t v34 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v29 - v7;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000172F8(a2);
  unint64_t v29 = v4;
  uint64_t v13 = *v4;
  uint64_t v14 = static _DictionaryStorage.copy(original:)();
  uint64_t v15 = v14;
  if (!*(void *)(v13 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *unint64_t v29 = v15;
    return result;
  }
  id result = (void *)(v14 + 64);
  unint64_t v17 = (unint64_t)((1 << *(unsigned char *)(v15 + 32)) + 63) >> 6;
  if (v15 != v13 || (unint64_t)result >= v13 + 64 + 8 * v17) {
    id result = memmove(result, (const void *)(v13 + 64), 8 * v17);
  }
  uint64_t v30 = v13 + 64;
  int64_t v18 = 0;
  *(void *)(v15 + 16) = *(void *)(v13 + 16);
  uint64_t v19 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & *(void *)(v13 + 64);
  uint64_t v33 = v10 + 16;
  int64_t v31 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v32 = v10 + 32;
  while (1)
  {
    if (v21)
    {
      unint64_t v22 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v23 = v22 | (v18 << 6);
      goto LABEL_9;
    }
    int64_t v26 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v26 >= v31) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v30 + 8 * v26);
    ++v18;
    if (!v27)
    {
      int64_t v18 = v26 + 1;
      if (v26 + 1 >= v31) {
        goto LABEL_23;
      }
      unint64_t v27 = *(void *)(v30 + 8 * v18);
      if (!v27) {
        break;
      }
    }
LABEL_22:
    unint64_t v21 = (v27 - 1) & v27;
    unint64_t v23 = __clz(__rbit64(v27)) + (v18 << 6);
LABEL_9:
    unint64_t v24 = *(void *)(v10 + 72) * v23;
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v12, *(void *)(v13 + 48) + v24, v9);
    unint64_t v25 = *(void *)(v34 + 72) * v23;
    sub_100530850(*(void *)(v13 + 56) + v25, (uint64_t)v8, v35);
    (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(*(void *)(v15 + 48) + v24, v12, v9);
    id result = (void *)sub_1000188D4((uint64_t)v8, *(void *)(v15 + 56) + v25, v36);
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v31) {
    goto LABEL_23;
  }
  unint64_t v27 = *(void *)(v30 + 8 * v28);
  if (v27)
  {
    int64_t v18 = v28;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v18 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v18 >= v31) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v30 + 8 * v18);
    ++v28;
    if (v27) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10052F280(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA256();
      sub_100013DD4(&qword_100666738, (void (*)(uint64_t))&type metadata accessor for SHA256);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unsigned char *sub_10052F360@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = (unsigned char *)sub_10052FB28(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (unsigned char *)sub_10052FBEC((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = (unsigned char *)sub_10052FC68((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

void *sub_10052F3D8(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v6 = result;
  uint64_t result = (void *)sub_100455C3C(0, v3 & ~(v3 >> 63), 0);
  if (a2 < (uint64_t)v6 || v3 < 0) {
    goto LABEL_18;
  }
  unint64_t v7 = *(void *)(a3 + 16);
  if (v7)
  {
    uint64_t v8 = 0;
    uint64_t v16 = a3 + 32;
    while (v8 != v3)
    {
      uint64_t result = (void *)swift_stdlib_random();
      uint64_t v9 = (0 * (unsigned __int128)v7) >> 64;
      if (-(uint64_t)v7 % v7)
      {
        while (1)
          swift_stdlib_random();
      }
      if (v9 >= (uint64_t)v7) {
        goto LABEL_16;
      }
      uint64_t v10 = (uint64_t *)(v16 + 16 * v9);
      uint64_t v11 = *v10;
      uint64_t v12 = v10[1];
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      uint64_t result = (void *)swift_bridgeObjectRetain();
      if (v14 >= v13 >> 1) {
        uint64_t result = (void *)sub_100455C3C(v13 > 1, v14 + 1, 1);
      }
      ++v8;
      _swiftEmptyArrayStorage[2] = v14 + 1;
      uint64_t v15 = &_swiftEmptyArrayStorage[2 * v14];
      void v15[4] = v11;
      v15[5] = v12;
      if (v8 == v3) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_10052F56C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  BOOL v8 = a1 == 0x645F737365636361 && a2 == 0xED00006465696E65;
  if (v8 || (uint64_t v9 = a2, v10 = a1, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v12 = 0;
  }
  else if (v10 == 0x5F64696C61766E69 && v9 == 0xEE00746E65696C63 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v12 = 1;
  }
  else if (v10 == 0x5F64696C61766E69 && v9 == 0xED0000746E617267 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v12 = 2;
  }
  else if (v10 == 0x5F64696C61766E69 && v9 == 0xEF74736575716572 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v12 = 3;
  }
  else if (v10 == 0x5F64696C61766E69 && v9 == 0xED000065706F6373 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v12 = 4;
  }
  else if (v10 == 0x655F726576726573 && v9 == 0xEC000000726F7272 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v12 = 5;
  }
  else if (v10 == 0xD000000000000017 && v9 == 0x80000001005C1520 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v12 = 6;
  }
  else if (v10 == 0xD000000000000013 && v9 == 0x80000001005C1540 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v12 = 7;
  }
  else if (v10 == 0xD000000000000016 && v9 == 0x80000001005C1560 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v12 = 8;
  }
  else
  {
    if (v10 != 0xD000000000000019 || v9 != 0x80000001005C1580)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        char v12 = 10;
        goto LABEL_8;
      }
    }
    uint64_t result = swift_bridgeObjectRelease();
    char v12 = 9;
  }
  uint64_t v10 = a3;
  uint64_t v9 = a4;
  a3 = 0;
  a4 = 0;
LABEL_8:
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(void *)(a5 + 16) = a3;
  *(void *)(a5 + 24) = a4;
  *(unsigned char *)(a5 + 32) = v12;
  return result;
}

uint64_t sub_10052FA24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16))
  {
    unint64_t v4 = sub_100016D20(0x726F727265, 0xE500000000000000);
    if (v5)
    {
      uint64_t v6 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v4);
      uint64_t v7 = *v6;
      uint64_t v8 = v6[1];
      uint64_t v9 = *(void *)(a1 + 16);
      swift_bridgeObjectRetain();
      if (v9)
      {
        unint64_t v10 = sub_100016D20(0xD000000000000011, 0x80000001005C1500);
        if (v11)
        {
          char v12 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v10);
          uint64_t v9 = *v12;
          uint64_t v13 = v12[1];
          swift_bridgeObjectRetain();
LABEL_9:
          swift_bridgeObjectRelease();
          uint64_t result = sub_10052F56C(v7, v8, v9, v13, (uint64_t)v18);
          long long v15 = v18[0];
          long long v16 = v18[1];
          char v17 = v19;
          goto LABEL_10;
        }
        uint64_t v9 = 0;
      }
      uint64_t v13 = 0;
      goto LABEL_9;
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  long long v15 = xmmword_1005AC800;
  long long v16 = 0uLL;
  char v17 = 12;
LABEL_10:
  *(_OWORD *)a2 = v15;
  *(_OWORD *)(a2 + 16) = v16;
  *(unsigned char *)(a2 + 32) = v17;
  return result;
}

uint64_t sub_10052FB28(unsigned char *__src, unsigned char *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_10052FBEC(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_10052FC68(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_10052FCEC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F54737365636361 && a2 == 0xEB000000006E656BLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7079546E656B6F74 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4973657269707865 && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x5468736572666572 && a2 == 0xEC0000006E656B6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6F54646575737369 && a2 == 0xEF657079546E656BLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x65706F6373 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_10052FFCC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_1000172F8(&qword_100666878);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_100531C2C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100014524((uint64_t)a1);
  }
  char v39 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  char v38 = 1;
  swift_bridgeObjectRetain();
  uint64_t v32 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v33 = v12;
  char v37 = 2;
  swift_bridgeObjectRetain();
  uint64_t v30 = KeyedDecodingContainer.decode(_:forKey:)();
  char v36 = 3;
  uint64_t v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v35 = 4;
  uint64_t v31 = v13;
  swift_bridgeObjectRetain();
  uint64_t v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v28 = v14;
  char v34 = 5;
  swift_bridgeObjectRetain();
  uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v17 = v16;
  int64_t v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v26 = v15;
  v18(v8, v5);
  swift_bridgeObjectRetain();
  sub_100014524((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v19 = v28;
  swift_bridgeObjectRelease();
  uint64_t v20 = v31;
  swift_bridgeObjectRelease();
  uint64_t v21 = v33;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v9;
  a2[1] = v11;
  a2[2] = v32;
  a2[3] = v21;
  uint64_t v23 = v29;
  a2[4] = v30;
  a2[5] = v23;
  uint64_t v24 = v27;
  a2[6] = v20;
  a2[7] = v24;
  uint64_t v25 = v26;
  a2[8] = v19;
  a2[9] = v25;
  a2[10] = v17;
  return result;
}

uint64_t sub_1005303D0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x726F727265 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001005C1690)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1005304B8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_1000172F8(&qword_100666748);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_10053069C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100014524((uint64_t)a1);
  }
  char v17 = 1;
  uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v11 = v10;
  char v17 = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  sub_10052F56C(v12, v13, v9, v11, (uint64_t)v16);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_100014524((uint64_t)a1);
  return sub_10025D0F8(v16, a2);
}

unint64_t sub_10053069C()
{
  unint64_t result = qword_100666750;
  if (!qword_100666750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100666750);
  }
  return result;
}

uint64_t sub_1005306F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_10065CE70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100530758(uint64_t a1)
{
  return a1;
}

uint64_t sub_10053078C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_1005307F4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100530850(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

ValueMetadata *type metadata accessor for OAuthAccount()
{
  return &type metadata for OAuthAccount;
}

unsigned char *storeEnumTagSinglePayload for OAuthError.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100530994);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OAuthError.CodingKeys()
{
  return &type metadata for OAuthError.CodingKeys;
}

uint64_t *sub_1005309CC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = (int *)type metadata accessor for OAuthServerMetadata();
    v8((uint64_t *)((char *)a1 + v9[5]), (uint64_t *)((char *)a2 + v9[5]), v7);
    *(uint64_t *)((char *)a1 + v9[6]) = *(uint64_t *)((char *)a2 + v9[6]);
    *(uint64_t *)((char *)a1 + v9[7]) = *(uint64_t *)((char *)a2 + v9[7]);
    *(uint64_t *)((char *)a1 + v9[8]) = *(uint64_t *)((char *)a2 + v9[8]);
    *(uint64_t *)((char *)a1 + v9[9]) = *(uint64_t *)((char *)a2 + v9[9]);
    uint64_t v10 = *(int *)(a3 + 20);
    uint64_t v15 = (char *)a2 + v10;
    uint64_t v16 = (char *)a1 + v10;
    uint64_t v11 = type metadata accessor for UUID();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v16, v15, v11);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  swift_retain();
  return a1;
}

uint64_t sub_100530B80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = type metadata accessor for OAuthServerMetadata();
  v5(a1 + *(int *)(v6 + 20), v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(a2 + 20);
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);

  return swift_release();
}

uint64_t sub_100530C9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = (int *)type metadata accessor for OAuthServerMetadata();
  v7(a1 + v8[5], a2 + v8[5], v6);
  *(void *)(a1 + v8[6]) = *(void *)(a2 + v8[6]);
  *(void *)(a1 + v8[7]) = *(void *)(a2 + v8[7]);
  *(void *)(a1 + v8[8]) = *(void *)(a2 + v8[8]);
  *(void *)(a1 + v8[9]) = *(void *)(a2 + v8[9]);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v14 = a1 + v9;
  uint64_t v10 = a2 + v9;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v14, v10, v11);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_retain();
  return a1;
}

uint64_t sub_100530E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  uint64_t v8 = (int *)type metadata accessor for OAuthServerMetadata();
  v7(a1 + v8[5], a2 + v8[5], v6);
  *(void *)(a1 + v8[6]) = *(void *)(a2 + v8[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v8[7]) = *(void *)(a2 + v8[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v8[8]) = *(void *)(a2 + v8[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v8[9]) = *(void *)(a2 + v8[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100530F90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = (int *)type metadata accessor for OAuthServerMetadata();
  v7(a1 + v8[5], a2 + v8[5], v6);
  *(void *)(a1 + v8[6]) = *(void *)(a2 + v8[6]);
  *(void *)(a1 + v8[7]) = *(void *)(a2 + v8[7]);
  *(void *)(a1 + v8[8]) = *(void *)(a2 + v8[8]);
  *(void *)(a1 + v8[9]) = *(void *)(a2 + v8[9]);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1005310C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  uint64_t v8 = (int *)type metadata accessor for OAuthServerMetadata();
  v7(a1 + v8[5], a2 + v8[5], v6);
  *(void *)(a1 + v8[6]) = *(void *)(a2 + v8[6]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + v8[7]) = *(void *)(a2 + v8[7]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + v8[8]) = *(void *)(a2 + v8[8]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + v8[9]) = *(void *)(a2 + v8[9]);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_release();
  return a1;
}

uint64_t sub_100531218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10053122C);
}

uint64_t sub_10053122C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for OAuthServerMetadata();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_100531340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100531354);
}

uint64_t sub_100531354(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for OAuthServerMetadata();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for UUID();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t sub_100531464()
{
  uint64_t result = type metadata accessor for OAuthServerMetadata();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OAuthAuthorizationCode()
{
  return &type metadata for OAuthAuthorizationCode;
}

uint64_t destroy for OAuthToken()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OAuthToken(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for OAuthToken(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for OAuthToken(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for OAuthToken(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OAuthToken(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OAuthToken(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OAuthToken()
{
  return &type metadata for OAuthToken;
}

uint64_t sub_10053184C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 >= 0xAu && a5 != 11)
  {
    if (a5 != 10) {
      return result;
    }
    swift_bridgeObjectRetain();
  }

  return swift_bridgeObjectRetain();
}

uint64_t destroy for OAuthError(uint64_t a1)
{
  return sub_1005318C4(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t sub_1005318C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 >= 0xAu && a5 != 11)
  {
    if (a5 != 10) {
      return result;
    }
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OAuthError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  sub_10053184C(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for OAuthError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  sub_10053184C(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  unsigned __int8 v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  sub_1005318C4(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for OAuthError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  unsigned __int8 v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  sub_1005318C4(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for OAuthError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF4 && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 244);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 0xC) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OAuthError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF3)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 244;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xF4) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF4) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100531AE0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 0xBu) {
    return *(unsigned __int8 *)(a1 + 32);
  }
  else {
    return (*(_DWORD *)a1 + 12);
  }
}

uint64_t sub_100531AF8(uint64_t result, unsigned int a2)
{
  if (a2 >= 0xC)
  {
    *(void *)uint64_t result = a2 - 12;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 12;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
  }
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for OAuthError()
{
  return &type metadata for OAuthError;
}

unint64_t sub_100531B28()
{
  unint64_t result = qword_100666860;
  if (!qword_100666860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100666860);
  }
  return result;
}

unint64_t sub_100531B80()
{
  unint64_t result = qword_100666868;
  if (!qword_100666868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100666868);
  }
  return result;
}

unint64_t sub_100531BD8()
{
  unint64_t result = qword_100666870;
  if (!qword_100666870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100666870);
  }
  return result;
}

unint64_t sub_100531C2C()
{
  unint64_t result = qword_100666880;
  if (!qword_100666880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100666880);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for OAuthToken.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100531D4CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OAuthToken.CodingKeys()
{
  return &type metadata for OAuthToken.CodingKeys;
}

unint64_t sub_100531D88()
{
  unint64_t result = qword_100666890;
  if (!qword_100666890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100666890);
  }
  return result;
}

unint64_t sub_100531DE0()
{
  unint64_t result = qword_100666898;
  if (!qword_100666898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100666898);
  }
  return result;
}

unint64_t sub_100531E38()
{
  unint64_t result = qword_1006668A0;
  if (!qword_1006668A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006668A0);
  }
  return result;
}

uint64_t sub_100531E8C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100531ECC(a1, a2, 53, 0xD000000000000035, (void *)0x80000001005C16F0, a3);
}

uint64_t sub_100531EAC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100531ECC(a1, a2, 52, 0xD000000000000034, (void *)0x80000001005C16B0, a3);
}

uint64_t sub_100531ECC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  v24._countAndFlagsBits = a4;
  v24._object = a5;
  v23[1] = a3;
  v25._countAndFlagsBits = a1;
  v25._object = a2;
  uint64_t v26 = a6;
  uint64_t v6 = type metadata accessor for Locale();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v7 - 8);
  unsigned __int8 v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URL.DirectoryHint();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  char v17 = (char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v18 - 8);
  uint64_t v19 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  __chkstk_darwin(v19 - 8);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v24);
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v25);
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v20);
  String.LocalizationValue.init(stringInterpolation:)();
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for URL.DirectoryHint.isDirectory(_:), v10);
  uint64_t v21 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v9, 1, 1, v21);
  URL.init(filePath:directoryHint:relativeTo:)();
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v17, enum case for LocalizedStringResource.BundleDescription.atURL(_:), v14);
  static Locale.current.getter();
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)();
}

uint64_t sub_10053223C@<X0>(uint64_t a1@<X8>)
{
  return sub_100532260(0xE800000000000000, a1);
}

uint64_t sub_100532254@<X0>(uint64_t a1@<X8>)
{
  return sub_100532260(0xE200000000000000, a1);
}

uint64_t sub_100532260@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  v17[1] = a1;
  v17[2] = a2;
  uint64_t v2 = type metadata accessor for Locale();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL.DirectoryHint();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unsigned __int8 v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v14 - 8);
  String.LocalizationValue.init(stringLiteral:)();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for URL.DirectoryHint.isDirectory(_:), v6);
  uint64_t v15 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v5, 1, 1, v15);
  URL.init(filePath:directoryHint:relativeTo:)();
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for LocalizedStringResource.BundleDescription.atURL(_:), v10);
  static Locale.current.getter();
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)();
}

uint64_t sub_10053255C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  return sub_1005325BC(a1, a2, a3, a4, 31, 0xD00000000000001FLL, (void *)0x80000001005C1730);
}

uint64_t sub_10053257C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  return sub_1005325BC(a1, a2, a3, a4, 34, 0xD000000000000022, (void *)0x80000001005C1750);
}

uint64_t sub_10053259C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  return sub_1005325BC(a1, a2, a3, a4, 25, 0xD000000000000019, (void *)0x80000001005C1780);
}

uint64_t sub_1005325BC(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v12 = type metadata accessor for Locale();
  __chkstk_darwin(v12 - 8);
  uint64_t v13 = type metadata accessor for LocalizedStringResource.BundleDescription();
  __chkstk_darwin(v13 - 8);
  uint64_t v14 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v14 - 8);
  uint64_t v15 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  __chkstk_darwin(v15 - 8);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v16._countAndFlagsBits = a6;
  v16._object = a7;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v16);
  v17._countAndFlagsBits = a1;
  v17._object = a2;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v17);
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v18);
  v19._countAndFlagsBits = a3;
  v19._object = a4;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v19);
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v20);
  String.LocalizationValue.init(stringInterpolation:)();
  static LocalizedStringResource.BundleDescription.madFramework.getter();
  static Locale.current.getter();
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)();
}

uint64_t sub_1005327BC()
{
  qword_1006668A8 = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_os_activity_current");

  return swift_unknownObjectRetain();
}

unint64_t sub_1005327F8(char a1)
{
  unint64_t result = 0x7562697274736964;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 7107189;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1005328AC(unsigned __int8 *a1, char *a2)
{
  return sub_10051B9C0(*a1, *a2);
}

Swift::Int sub_1005328B8()
{
  return sub_10040FBA4();
}

uint64_t sub_1005328C0()
{
  return sub_1004497FC();
}

Swift::Int sub_1005328C8()
{
  return sub_10044B330();
}

unint64_t sub_1005328D0@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100532E38(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100532900@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1005327F8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10053292C(void *a1@<X8>)
{
  *a1 = &off_10063A3E0;
}

id sub_100532ADC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MarketplaceCertificateEntity.Entity();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for MarketplaceCertificateEntity.Entity()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for MarketplaceCertificateEntity.Property(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100532C00);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MarketplaceCertificateEntity.Property()
{
  return &type metadata for MarketplaceCertificateEntity.Property;
}

ValueMetadata *type metadata accessor for MarketplaceCertificateEntity()
{
  return &type metadata for MarketplaceCertificateEntity;
}

unint64_t sub_100532C50()
{
  unint64_t result = qword_1006669A8;
  if (!qword_1006669A8)
  {
    sub_10017B924(&qword_1006669B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006669A8);
  }
  return result;
}

unint64_t sub_100532CB0()
{
  unint64_t result = qword_1006669B8;
  if (!qword_1006669B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006669B8);
  }
  return result;
}

unint64_t sub_100532D04(void *a1)
{
  a1[1] = sub_100532D3C();
  a1[2] = sub_100532D90();
  unint64_t result = sub_100532DE4();
  a1[3] = result;
  return result;
}

unint64_t sub_100532D3C()
{
  unint64_t result = qword_1006669C0;
  if (!qword_1006669C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006669C0);
  }
  return result;
}

unint64_t sub_100532D90()
{
  unint64_t result = qword_1006669C8;
  if (!qword_1006669C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006669C8);
  }
  return result;
}

unint64_t sub_100532DE4()
{
  unint64_t result = qword_1006669D0;
  if (!qword_1006669D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006669D0);
  }
  return result;
}

unint64_t sub_100532E38(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10063A348, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

uint64_t sub_100532E84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100532ED8(a1, a2, a3);
}

uint64_t sub_100532EB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100532ED8(a1, a2, a3);
}

uint64_t sub_100532ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000172F8(&qword_10065B220);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100017238(a1, (uint64_t)v8, &qword_10065B220);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10001729C((uint64_t)v8, &qword_10065B220);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v11 = 0;
  uint64_t v13 = 0;
LABEL_6:
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    long long v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

uint64_t sub_1005330C4(char a1)
{
  *(void *)(v2 + 48) = v1;
  *(unsigned char *)(v2 + 160) = a1;
  uint64_t v3 = type metadata accessor for Logger();
  *(void *)(v2 + 56) = v3;
  *(void *)(v2 + 64) = *(void *)(v3 - 8);
  *(void *)(v2 + 72) = swift_task_alloc();
  *(void *)(v2 + 80) = swift_task_alloc();
  *(void *)(v2 + 88) = type metadata accessor for AppInstallEngine.Event(0);
  *(void *)(v2 + 96) = swift_task_alloc();
  uint64_t v4 = sub_1000172F8(&qword_100666BC0);
  *(void *)(v2 + 104) = v4;
  *(void *)(v2 + 112) = *(void *)(v4 - 8);
  *(void *)(v2 + 120) = swift_task_alloc();
  return _swift_task_switch(sub_100533228, v1, 0);
}

uint64_t sub_100533228()
{
  uint64_t v1 = *(void *)(v0 + 48);
  char v2 = *(unsigned char *)(v0 + 160);
  *(void *)(v0 + 128) = *(void *)(v1 + 152);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 136) = v3;
  *(void *)(v3 + 16) = v1;
  *(unsigned char *)(v3 + 24) = v2;
  uint64_t v6 = (uint64_t (*)(void))((char *)&dword_1006606F0 + dword_1006606F0);
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100533324;
  return v6();
}

uint64_t sub_100533324()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 152) = v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 48);
  if (v0) {
    uint64_t v4 = sub_1005338DC;
  }
  else {
    uint64_t v4 = sub_100533490;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100533490()
{
  uint64_t v25 = v0;
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 104);
  **(unsigned char **)(v0 + 96) = *(unsigned char *)(v0 + 160);
  swift_storeEnumTagMultiPayload();
  sub_1000172F8(&qword_100666BB0);
  AsyncStream.Continuation.yield(_:)();
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  int v5 = enum case for AsyncStream.Continuation.YieldResult.terminated<A>(_:);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v4 == v5)
  {
    static Logger.install.getter();
    swift_retain_n();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      uint64_t v9 = (void *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138412546;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v10 = *(unsigned __int8 *)(v0 + 160);
      uint64_t v11 = *(void **)(*(void *)(v0 + 48) + 120);
      *(void *)(v0 + 16) = v11;
      id v12 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v9 = v11;
      swift_release_n();
      *(_WORD *)(v8 + 12) = 2082;
      unint64_t v13 = 0xE800000000000000;
      unint64_t v14 = 0x656C626D61657270;
      switch(v10)
      {
        case 1:
          unint64_t v14 = 0x64616F6C6E776F64;
          break;
        case 2:
          unint64_t v13 = 0xE700000000000000;
          unint64_t v14 = 0x6C6C6174736E69;
          break;
        case 3:
          unint64_t v13 = 0xE900000000000065;
          unint64_t v14 = 0x6C626D6174736F70;
          break;
        case 4:
          unint64_t v14 = 0x656C6C65636E6163;
          unint64_t v13 = 0xE900000000000064;
          break;
        case 5:
          unint64_t v13 = 0xE600000000000000;
          uint64_t v18 = 1937072496;
          goto LABEL_14;
        case 6:
          unint64_t v14 = 0x64656873696E6966;
          break;
        case 7:
          unint64_t v13 = 0xE600000000000000;
          uint64_t v18 = 1818845542;
LABEL_14:
          unint64_t v14 = v18 & 0xFFFF0000FFFFFFFFLL | 0x646500000000;
          break;
        default:
          break;
      }
      uint64_t v19 = *(void *)(v0 + 80);
      uint64_t v21 = *(void *)(v0 + 56);
      uint64_t v20 = *(void *)(v0 + 64);
      *(void *)(v0 + 24) = sub_1000143F4(v14, v13, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%@] Transition to phase '%{public}s' will be ignored", (uint8_t *)v8, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    }
    else
    {
      uint64_t v15 = *(void *)(v0 + 80);
      uint64_t v16 = *(void *)(v0 + 56);
      uint64_t v17 = *(void *)(v0 + 64);
      swift_release_n();

      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

uint64_t sub_1005338DC()
{
  uint64_t v33 = v0;
  static Logger.install.getter();
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    log = v1;
    uint64_t v3 = swift_slowAlloc();
    int v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412546;
    if ((swift_task_isCurrentExecutor() & 1) == 0) {
      swift_task_reportUnexpectedExecutor();
    }
    int v5 = *(void **)(*(void *)(v0 + 48) + 120);
    *(void *)(v0 + 32) = v5;
    id v6 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *int v4 = v5;
    swift_release_n();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 40) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v4[1] = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v2, "[%@] Staging phase transition failed with error: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_release_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(*(void *)(v0 + 64) + 8))(*(void *)(v0 + 72), *(void *)(v0 + 56));
  uint64_t v9 = *(void *)(v0 + 112);
  uint64_t v8 = *(void *)(v0 + 120);
  uint64_t v10 = *(void *)(v0 + 104);
  **(unsigned char **)(v0 + 96) = *(unsigned char *)(v0 + 160);
  swift_storeEnumTagMultiPayload();
  sub_1000172F8(&qword_100666BB0);
  AsyncStream.Continuation.yield(_:)();
  int v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 88))(v8, v10);
  int v12 = enum case for AsyncStream.Continuation.YieldResult.terminated<A>(_:);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  if (v11 == v12)
  {
    static Logger.install.getter();
    swift_retain_n();
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v16 = (void *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 138412546;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v17 = *(unsigned __int8 *)(v0 + 160);
      uint64_t v18 = *(void **)(*(void *)(v0 + 48) + 120);
      *(void *)(v0 + 16) = v18;
      id v19 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v16 = v18;
      swift_release_n();
      *(_WORD *)(v15 + 12) = 2082;
      unint64_t v20 = 0xE800000000000000;
      unint64_t v21 = 0x656C626D61657270;
      switch(v17)
      {
        case 1:
          unint64_t v21 = 0x64616F6C6E776F64;
          break;
        case 2:
          unint64_t v20 = 0xE700000000000000;
          unint64_t v21 = 0x6C6C6174736E69;
          break;
        case 3:
          unint64_t v20 = 0xE900000000000065;
          unint64_t v21 = 0x6C626D6174736F70;
          break;
        case 4:
          unint64_t v21 = 0x656C6C65636E6163;
          unint64_t v20 = 0xE900000000000064;
          break;
        case 5:
          unint64_t v20 = 0xE600000000000000;
          uint64_t v25 = 1937072496;
          goto LABEL_19;
        case 6:
          unint64_t v21 = 0x64656873696E6966;
          break;
        case 7:
          unint64_t v20 = 0xE600000000000000;
          uint64_t v25 = 1818845542;
LABEL_19:
          unint64_t v21 = v25 & 0xFFFF0000FFFFFFFFLL | 0x646500000000;
          break;
        default:
          break;
      }
      uint64_t v26 = *(void *)(v0 + 80);
      uint64_t v28 = *(void *)(v0 + 56);
      uint64_t v27 = *(void *)(v0 + 64);
      *(void *)(v0 + 24) = sub_1000143F4(v21, v20, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "[%@] Transition to phase '%{public}s' will be ignored", (uint8_t *)v15, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
    }
    else
    {
      uint64_t v22 = *(void *)(v0 + 80);
      uint64_t v23 = *(void *)(v0 + 56);
      uint64_t v24 = *(void *)(v0 + 64);
      swift_release_n();

      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = *(uint64_t (**)(void))(v0 + 8);
  return v29();
}

uint64_t sub_100533F40()
{
  v1[3] = v0;
  sub_1000172F8(&qword_100666C80);
  v1[4] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for Logger();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  return _swift_task_switch(sub_100534030, v0, 0);
}

uint64_t sub_100534030()
{
  uint64_t v1 = *(void *)(v0[3] + 152);
  v0[8] = v1;
  int v5 = (uint64_t (*)(void (*)(void **@<X0>, char *@<X8>), uint64_t, uint64_t))((char *)&dword_100660800
                                                                                                + dword_100660800);
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[9] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100534108;
  uint64_t v3 = v0[3];
  return v5(sub_100549150, v3, v1);
}

uint64_t sub_100534108(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  *(void *)(*v2 + 80) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_errorRelease();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    uint64_t v8 = *(void *)(v4 + 24);
    swift_release();
    *(unsigned char *)(v4 + 136) = a1;
    return _swift_task_switch(sub_1005342A4, v8, 0);
  }
}

void sub_1005342A4()
{
  uint64_t v18 = v0;
  if (*(unsigned char *)(v0 + 136))
  {
    static Logger.install.getter();
    swift_retain_n();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 138412290;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v5 = *(void **)(*(void *)(v0 + 24) + 120);
      *(void *)(v0 + 16) = v5;
      id v6 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v16 = v5;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%@] Cancelling installation", v4, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 24);
    (*(void (**)(void, void))(*(void *)(v0 + 48) + 8))(*(void *)(v0 + 56), *(void *)(v0 + 40));
    uint64_t v9 = *(void *)(v8 + 216);
    uint64_t v10 = v9 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v9 + 16);
    int v11 = (os_unfair_lock_s *)(v9 + ((*(unsigned int *)(*(void *)v9 + 48) + 3) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v11);
    sub_100539D34(v10, v17);
    os_unfair_lock_unlock(v11);
    if (!v7)
    {
      uint64_t v13 = v17[0];
      uint64_t v12 = v17[1];
      *(void *)(v0 + 88) = v17[0];
      *(void *)(v0 + 96) = v12;
      if (v13)
      {
        swift_retain();
        os_log_type_t v14 = (void *)swift_task_alloc();
        *(void *)(v0 + 104) = v14;
        *os_log_type_t v14 = v0;
        v14[1] = sub_100534690;
        sub_1001C6BF4();
      }
      else
      {
        if (v12)
        {
          type metadata accessor for AppInstallTaskResult();
          swift_retain();
          sub_1000172F8(&qword_10065B260);
          Task.cancel()();
          swift_release();
        }
        uint64_t v15 = (void *)swift_task_alloc();
        *(void *)(v0 + 128) = v15;
        *uint64_t v15 = v0;
        v15[1] = sub_100534B6C;
        sub_1005330C4(4);
      }
    }
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v1 = *(void (**)(void))(v0 + 8);
    v1();
  }
}

uint64_t sub_100534690()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  return _swift_task_switch(sub_1005347A0, v1, 0);
}

uint64_t sub_1005347A0()
{
  uint64_t v1 = v0[12];
  if (v1)
  {
    swift_retain();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[14] = v2;
    uint64_t v3 = type metadata accessor for AppInstallTaskResult();
    v0[15] = v3;
    uint64_t v4 = sub_1000172F8(&qword_10065B260);
    *uint64_t v2 = v0;
    v2[1] = sub_100534950;
    uint64_t v5 = v0[4];
    return Task.value.getter(v5, v1, v3, v4, &protocol self-conformance witness table for Error);
  }
  else
  {
    swift_release();
    uint64_t v6 = type metadata accessor for AppInstallTaskResult();
    uint64_t v7 = v0[4];
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v7, 1, 1, v6);
    sub_10001729C(v7, &qword_100666C80);
    uint64_t v8 = (void *)swift_task_alloc();
    v0[16] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_100534B6C;
    return sub_1005330C4(4);
  }
}

uint64_t sub_100534950()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 24);
    swift_release();
    swift_errorRelease();
    uint64_t v4 = sub_100534CF8;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 24);
    uint64_t v4 = sub_100534A7C;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_100534A7C()
{
  swift_release();
  swift_release();
  uint64_t v1 = v0[4];
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v0[15] - 8) + 56))(v1, 0, 1);
  sub_10001729C(v1, &qword_100666C80);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[16] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100534B6C;
  return sub_1005330C4(4);
}

uint64_t sub_100534B6C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  return _swift_task_switch(sub_100534C7C, v1, 0);
}

uint64_t sub_100534C7C()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100534CF8()
{
  swift_release();
  uint64_t v1 = v0[4];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0[15] - 8) + 56))(v1, 1, 1);
  sub_10001729C(v1, &qword_100666C80);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[16] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100534B6C;
  return sub_1005330C4(4);
}

uint64_t sub_100534DE0()
{
  v1[3] = v0;
  sub_1000172F8(&qword_10065C9B0);
  v1[4] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for UUID();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  sub_1000172F8(&qword_100666C80);
  v1[8] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[9] = v3;
  v1[10] = *(void *)(v3 - 8);
  v1[11] = swift_task_alloc();
  return _swift_task_switch(sub_100534F5C, v0, 0);
}

uint64_t sub_100534F5C()
{
  uint64_t v1 = *(void *)(v0[3] + 152);
  v0[12] = v1;
  uint64_t v5 = (uint64_t (*)(void (*)(void **@<X0>, char *@<X8>), uint64_t, uint64_t))((char *)&dword_100660800
                                                                                                + dword_100660800);
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[13] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100535034;
  uint64_t v3 = v0[3];
  return v5(sub_10054916C, v3, v1);
}

uint64_t sub_100535034(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  *(void *)(*v2 + 112) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_errorRelease();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    uint64_t v8 = *(void *)(v4 + 24);
    swift_release();
    *(unsigned char *)(v4 + 196) = a1;
    return _swift_task_switch(sub_1005351E4, v8, 0);
  }
}

void sub_1005351E4()
{
  uint64_t v36 = v0;
  if ((*(unsigned char *)(v0 + 196) & 1) == 0)
  {
LABEL_2:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v1 = *(void (**)(void))(v0 + 8);
    v1();
    return;
  }
  static Logger.install.getter();
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v34 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    if ((swift_task_isCurrentExecutor() & 1) == 0) {
      swift_task_reportUnexpectedExecutor();
    }
    uint64_t v5 = *(void **)(*(void *)(v0 + 24) + 120);
    *(void *)(v0 + 16) = v5;
    id v6 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v34 = v5;
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%@] Pausing installation", v4, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v7 = *(void *)(v0 + 112);
  uint64_t v8 = *(void *)(v0 + 24);
  (*(void (**)(void, void))(*(void *)(v0 + 80) + 8))(*(void *)(v0 + 88), *(void *)(v0 + 72));
  uint64_t v9 = *(uint64_t **)(v8 + 216);
  *(void *)(v0 + 120) = v9;
  uint64_t v10 = *v9;
  uint64_t v11 = *(void *)(class metadata base offset for ManagedBuffer + *v9 + 16);
  *(void *)(v0 + 128) = v11;
  uint64_t v12 = (uint64_t)v9 + v11;
  uint64_t v13 = *(unsigned int *)(v10 + 48);
  *(_DWORD *)(v0 + 192) = v13;
  os_log_type_t v14 = (os_unfair_lock_s *)((char *)v9 + ((v13 + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v14);
  sub_100539D34(v12, v35);
  *(void *)(v0 + 136) = v7;
  os_unfair_lock_unlock(v14);
  if (!v7)
  {
    uint64_t v16 = v35[0];
    uint64_t v15 = v35[1];
    *(void *)(v0 + 144) = v35[0];
    *(void *)(v0 + 152) = v15;
    if (!v16)
    {
      if (v15)
      {
        type metadata accessor for AppInstallTaskResult();
        swift_retain();
        sub_1000172F8(&qword_10065B260);
        Task.cancel()();
        swift_release();
      }
      uint64_t v18 = *(void *)(v0 + 120);
      uint64_t v19 = *(void *)(v0 + 32);
      unint64_t v20 = (os_unfair_lock_s *)(v18 + ((*(unsigned int *)(v0 + 192) + 3) & 0x1FFFFFFFCLL));
      uint64_t v21 = v18 + *(void *)(v0 + 128);
      os_unfair_lock_lock(v20);
      sub_10053A5C4(v21, v19);
      os_unfair_lock_unlock(v20);
      uint64_t v22 = *(void *)(v0 + 40);
      uint64_t v23 = *(void *)(v0 + 48);
      uint64_t v24 = *(void *)(v0 + 32);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v24, 1, v22) == 1)
      {
        swift_release();
        swift_release();
        sub_10001729C(v24, &qword_10065C9B0);
      }
      else
      {
        uint64_t v25 = *(void *)(v0 + 56);
        uint64_t v26 = *(void *)(v0 + 24);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v25, v24, v22);
        uint64_t v27 = *(char **)(*(void *)(*(void *)(v26 + 160) + 192) + 24);
        uint64_t v28 = *(os_unfair_lock_s **)&v27[OBJC_IVAR____TtC28ManagedAppDistributionDaemon34InstallCoordinationInstallObserver_observers];
        *(void *)(swift_task_alloc() + 16) = v25;
        uint64_t v29 = (uint64_t *)&v28[4];
        v28 += 6;
        uint64_t v30 = v27;
        os_unfair_lock_lock(v28);
        sub_100549188(v29);
        os_unfair_lock_unlock(v28);
        uint64_t v32 = *(void *)(v0 + 48);
        uint64_t v31 = *(void *)(v0 + 56);
        uint64_t v33 = *(void *)(v0 + 40);

        swift_release();
        swift_release();
        swift_task_dealloc();
        (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
      }
      goto LABEL_2;
    }
    swift_retain();
    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_1005356D0;
    sub_1001C6D14();
  }
}

uint64_t sub_1005356D0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  return _swift_task_switch(sub_1005357E0, v1, 0);
}

void sub_1005357E0()
{
  uint64_t v1 = *(void *)(v0 + 152);
  if (v1)
  {
    swift_retain();
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v2;
    uint64_t v3 = type metadata accessor for AppInstallTaskResult();
    *(void *)(v0 + 176) = v3;
    uint64_t v4 = sub_1000172F8(&qword_10065B260);
    *uint64_t v2 = v0;
    v2[1] = sub_100535B00;
    uint64_t v5 = *(void *)(v0 + 64);
    Task.value.getter(v5, v1, v3, v4, &protocol self-conformance witness table for Error);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 64);
    swift_release();
    uint64_t v7 = type metadata accessor for AppInstallTaskResult();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
    uint64_t v8 = *(void *)(v0 + 136);
    sub_10001729C(*(void *)(v0 + 64), &qword_100666C80);
    uint64_t v9 = *(void *)(v0 + 120);
    uint64_t v10 = *(void *)(v0 + 32);
    uint64_t v11 = (os_unfair_lock_s *)(v9 + ((*(unsigned int *)(v0 + 192) + 3) & 0x1FFFFFFFCLL));
    uint64_t v12 = v9 + *(void *)(v0 + 128);
    os_unfair_lock_lock(v11);
    sub_10053A5C4(v12, v10);
    os_unfair_lock_unlock(v11);
    if (!v8)
    {
      uint64_t v13 = *(void *)(v0 + 40);
      uint64_t v14 = *(void *)(v0 + 48);
      uint64_t v15 = *(void *)(v0 + 32);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v15, 1, v13) == 1)
      {
        swift_release();
        swift_release();
        sub_10001729C(v15, &qword_10065C9B0);
      }
      else
      {
        uint64_t v16 = *(void *)(v0 + 56);
        uint64_t v17 = *(void *)(v0 + 24);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v16, v15, v13);
        uint64_t v18 = *(char **)(*(void *)(*(void *)(v17 + 160) + 192) + 24);
        uint64_t v19 = *(os_unfair_lock_s **)&v18[OBJC_IVAR____TtC28ManagedAppDistributionDaemon34InstallCoordinationInstallObserver_observers];
        *(void *)(swift_task_alloc() + 16) = v16;
        unint64_t v20 = (uint64_t *)&v19[4];
        v19 += 6;
        uint64_t v21 = v18;
        os_unfair_lock_lock(v19);
        sub_100549188(v20);
        os_unfair_lock_unlock(v19);
        uint64_t v23 = *(void *)(v0 + 48);
        uint64_t v22 = *(void *)(v0 + 56);
        uint64_t v24 = *(void *)(v0 + 40);

        swift_release();
        swift_release();
        swift_task_dealloc();
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
      }
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v25 = *(void (**)(void))(v0 + 8);
      v25();
    }
  }
}

uint64_t sub_100535B00()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 184) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 24);
    swift_release();
    swift_errorRelease();
    uint64_t v4 = sub_100535E94;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 24);
    uint64_t v4 = sub_100535C30;
  }
  return _swift_task_switch(v4, v5, 0);
}

void sub_100535C30()
{
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 64);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v1 - 8) + 56))(v2, 0, 1, v1);
  uint64_t v3 = *(void *)(v0 + 184);
  sub_10001729C(*(void *)(v0 + 64), &qword_100666C80);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v6 = (os_unfair_lock_s *)(v4 + ((*(unsigned int *)(v0 + 192) + 3) & 0x1FFFFFFFCLL));
  uint64_t v7 = v4 + *(void *)(v0 + 128);
  os_unfair_lock_lock(v6);
  sub_10053A5C4(v7, v5);
  os_unfair_lock_unlock(v6);
  if (!v3)
  {
    uint64_t v8 = *(void *)(v0 + 40);
    uint64_t v9 = *(void *)(v0 + 48);
    uint64_t v10 = *(void *)(v0 + 32);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v10, 1, v8) == 1)
    {
      swift_release();
      swift_release();
      sub_10001729C(v10, &qword_10065C9B0);
    }
    else
    {
      uint64_t v11 = *(void *)(v0 + 56);
      uint64_t v12 = *(void *)(v0 + 24);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v11, v10, v8);
      uint64_t v13 = *(char **)(*(void *)(*(void *)(v12 + 160) + 192) + 24);
      uint64_t v14 = *(os_unfair_lock_s **)&v13[OBJC_IVAR____TtC28ManagedAppDistributionDaemon34InstallCoordinationInstallObserver_observers];
      *(void *)(swift_task_alloc() + 16) = v11;
      uint64_t v15 = (uint64_t *)&v14[4];
      v14 += 6;
      uint64_t v16 = v13;
      os_unfair_lock_lock(v14);
      sub_100549188(v15);
      os_unfair_lock_unlock(v14);
      uint64_t v18 = *(void *)(v0 + 48);
      uint64_t v17 = *(void *)(v0 + 56);
      uint64_t v19 = *(void *)(v0 + 40);

      swift_release();
      swift_release();
      swift_task_dealloc();
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v20 = *(void (**)(void))(v0 + 8);
    v20();
  }
}

uint64_t sub_100535E94()
{
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 64);
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 56))(v2, 1, 1, v1);
  sub_10001729C(*(void *)(v0 + 64), &qword_100666C80);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(v0 + 192) + 3) & 0x1FFFFFFFCLL));
  uint64_t v6 = v3 + *(void *)(v0 + 128);
  os_unfair_lock_lock(v5);
  sub_10053A5C4(v6, v4);
  os_unfair_lock_unlock(v5);
  uint64_t v7 = *(void *)(v0 + 40);
  uint64_t v8 = *(void *)(v0 + 48);
  uint64_t v9 = *(void *)(v0 + 32);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7) == 1)
  {
    swift_release();
    swift_release();
    sub_10001729C(v9, &qword_10065C9B0);
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 56);
    uint64_t v11 = *(void *)(v0 + 24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v10, v9, v7);
    uint64_t v12 = *(char **)(*(void *)(*(void *)(v11 + 160) + 192) + 24);
    uint64_t v13 = *(os_unfair_lock_s **)&v12[OBJC_IVAR____TtC28ManagedAppDistributionDaemon34InstallCoordinationInstallObserver_observers];
    *(void *)(swift_task_alloc() + 16) = v10;
    uint64_t v14 = (uint64_t *)&v13[4];
    v13 += 6;
    uint64_t v15 = v12;
    os_unfair_lock_lock(v13);
    sub_100549188(v14);
    os_unfair_lock_unlock(v13);
    uint64_t v17 = *(void *)(v0 + 48);
    uint64_t v16 = *(void *)(v0 + 56);
    uint64_t v18 = *(void *)(v0 + 40);

    swift_release();
    swift_release();
    swift_task_dealloc();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
  return v19();
}

uint64_t sub_1005360F0()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for CellularIdentity();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for EvaluatorDownload();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  sub_1000172F8(&qword_100660870);
  v1[9] = swift_task_alloc();
  uint64_t v4 = sub_1000172F8(&qword_100666C98);
  v1[10] = v4;
  v1[11] = *(void *)(v4 - 8);
  v1[12] = swift_task_alloc();
  sub_1000172F8(&qword_100660888);
  v1[13] = swift_task_alloc();
  v1[14] = swift_task_alloc();
  return _swift_task_switch(sub_1005362DC, v0, 0);
}

uint64_t sub_1005362DC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  *(_DWORD *)(v0 + 184) = *(_DWORD *)(*(void *)(v0 + 80) + 48);
  uint64_t v2 = *(void *)(v1 + 152);
  *(void *)(v0 + 120) = v2;
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 128) = v3;
  *(void *)(v3 + 16) = sub_1005491A4;
  *(void *)(v3 + 24) = v1;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100660860 + dword_100660860);
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1005363F0;
  uint64_t v5 = *(void *)(v0 + 72);
  return v7(v5, (uint64_t)sub_1003AF308, v3, v2);
}

uint64_t sub_1005363F0()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v0)
  {
    swift_errorRelease();
    swift_release();
    swift_task_dealloc();
    uint64_t v4 = sub_100536E60;
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v4 = sub_100536578;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100536578()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(unsigned char **)(v0 + 72);
  int v3 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v0 + 88) + 48))(v2, 1, v1);
  uint64_t v4 = *(int *)(v0 + 184);
  uint64_t v5 = *(unsigned char **)(v0 + 96);
  if (v3 == 1)
  {
    uint64_t v6 = *(void *)(v0 + 48);
    uint64_t v7 = *(void *)(v0 + 56);
    *uint64_t v5 = 0;
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(&v5[v4], 1, 1, v6);
    sub_10001729C((uint64_t)v2, &qword_100660870);
  }
  else
  {
    uint64_t v8 = (uint64_t)&v2[*(int *)(v1 + 48)];
    *uint64_t v5 = *v2;
    sub_10001733C(v8, (uint64_t)&v5[v4], &qword_100660888);
  }
  uint64_t v9 = *(unsigned __int8 **)(v0 + 96);
  int v10 = *v9;
  sub_10001733C((uint64_t)&v9[*(int *)(v0 + 184)], *(void *)(v0 + 112), &qword_100660888);
  uint64_t v11 = *(void *)(v0 + 104);
  if (v10 == 1)
  {
    uint64_t v12 = *(void *)(v0 + 48);
    uint64_t v13 = *(void *)(v0 + 56);
    sub_100017238(*(void *)(v0 + 112), *(void *)(v0 + 104), &qword_100660888);
    int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
    uint64_t v15 = *(void *)(v0 + 104);
    if (v14 == 1)
    {
      sub_10001729C(v15, &qword_100660888);
      uint64_t v16 = (void *)swift_task_alloc();
      *(void *)(v0 + 176) = v16;
      *uint64_t v16 = v0;
      v16[1] = sub_100536C94;
      return sub_1005330C4(0);
    }
    else
    {
      uint64_t v19 = *(void *)(v0 + 16);
      sub_100548CEC(v15, *(void *)(v0 + 64), (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
      uint64_t v20 = *(void *)(v19 + 128);
      static CellularIdentity.current()();
      uint64_t v24 = (char *)&dword_1006650C8 + dword_1006650C8;
      uint64_t v21 = (void *)swift_task_alloc();
      *(void *)(v0 + 144) = v21;
      *uint64_t v21 = v0;
      v21[1] = sub_100536884;
      uint64_t v22 = *(void *)(v0 + 64);
      uint64_t v23 = *(void *)(v0 + 40);
      return ((uint64_t (*)(uint64_t, void, void, uint64_t, uint64_t, uint64_t))v24)(v22, 0, 0, v23, 1, v20);
    }
  }
  else
  {
    sub_10001729C(*(void *)(v0 + 112), &qword_100660888);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18(0);
  }
}

uint64_t sub_100536884(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 40);
  uint64_t v3 = *(void *)(*(void *)v1 + 32);
  uint64_t v4 = *(void *)(*(void *)v1 + 24);
  uint64_t v5 = *(void *)(*(void *)v1 + 16);
  *(void *)(*(void *)v1 + 152) = a1;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return _swift_task_switch(sub_1005369F8, v5, 0);
}

uint64_t sub_1005369F8()
{
  int v1 = *(_DWORD *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 160) = v3;
  *(void *)(v3 + 16) = v2;
  *(unsigned char *)(v3 + 24) = v1 & 1;
  *(unsigned char *)(v3 + 25) = BYTE1(v1) & 1;
  *(unsigned char *)(v3 + 26) = BYTE2(v1) & 1;
  *(unsigned char *)(v3 + 27) = HIBYTE(v1) & 1;
  uint64_t v7 = (char *)&dword_100660708 + dword_100660708;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100536B0C;
  uint64_t v5 = *(void *)(v0 + 120);
  return ((uint64_t (*)(void (*)(void **@<X0>, unsigned char *@<X8>), uint64_t, uint64_t))v7)(sub_1005491AC, v3, v5);
}

uint64_t sub_100536B0C()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v0)
  {
    swift_errorRelease();
    swift_release();
    swift_task_dealloc();
    uint64_t v4 = sub_100537140;
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v4 = sub_100549CE4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100536C94()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_task_dealloc();
  return _swift_task_switch(sub_100536DA4, v1, 0);
}

uint64_t sub_100536DA4()
{
  sub_10001729C(*(void *)(v0 + 112), &qword_100660888);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v1(1);
}

uint64_t sub_100536E60()
{
  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 88) + 56))(*(void *)(v0 + 72), 1, 1, *(void *)(v0 + 80));
  uint64_t v1 = *(unsigned char **)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v5 = &v1[*(int *)(v0 + 184)];
  *uint64_t v1 = 0;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v5, 1, 1, v3);
  sub_10001729C(v2, &qword_100660870);
  uint64_t v6 = *(unsigned __int8 **)(v0 + 96);
  int v7 = *v6;
  sub_10001733C((uint64_t)&v6[*(int *)(v0 + 184)], *(void *)(v0 + 112), &qword_100660888);
  uint64_t v8 = *(void *)(v0 + 104);
  if (v7 == 1)
  {
    uint64_t v9 = *(void *)(v0 + 48);
    uint64_t v10 = *(void *)(v0 + 56);
    sub_100017238(*(void *)(v0 + 112), *(void *)(v0 + 104), &qword_100660888);
    int v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
    uint64_t v12 = *(void *)(v0 + 104);
    if (v11 == 1)
    {
      sub_10001729C(v12, &qword_100660888);
      uint64_t v13 = (void *)swift_task_alloc();
      *(void *)(v0 + 176) = v13;
      *uint64_t v13 = v0;
      v13[1] = sub_100536C94;
      return sub_1005330C4(0);
    }
    else
    {
      uint64_t v16 = *(void *)(v0 + 16);
      sub_100548CEC(v12, *(void *)(v0 + 64), (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
      uint64_t v17 = *(void *)(v16 + 128);
      static CellularIdentity.current()();
      uint64_t v21 = (char *)&dword_1006650C8 + dword_1006650C8;
      uint64_t v18 = (void *)swift_task_alloc();
      *(void *)(v0 + 144) = v18;
      void *v18 = v0;
      v18[1] = sub_100536884;
      uint64_t v19 = *(void *)(v0 + 64);
      uint64_t v20 = *(void *)(v0 + 40);
      return ((uint64_t (*)(uint64_t, void, void, uint64_t, uint64_t, uint64_t))v21)(v19, 0, 0, v20, 1, v17);
    }
  }
  else
  {
    sub_10001729C(*(void *)(v0 + 112), &qword_100660888);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15(0);
  }
}

uint64_t sub_100537140()
{
  uint64_t v1 = v0[19];
  sub_100548AF4(v0[8], (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
  if ((v1 & 0x100000000) != 0)
  {
    uint64_t v4 = (void *)swift_task_alloc();
    v0[22] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100536C94;
    return sub_1005330C4(0);
  }
  else
  {
    sub_10001729C(v0[14], &qword_100660888);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2(0);
  }
}

uint64_t sub_100537294()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for CellularIdentity();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for EvaluatorDownload();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  sub_1000172F8(&qword_100660888);
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  return _swift_task_switch(sub_1005373F0, v0, 0);
}

uint64_t sub_1005373F0()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = *(void *)(v1 + 152);
  v0[11] = v2;
  uint64_t v3 = swift_task_alloc();
  v0[12] = v3;
  *(void *)(v3 + 16) = sub_1005491C4;
  *(void *)(v3 + 24) = v1;
  int v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100660878 + dword_100660878);
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[13] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1005374F8;
  uint64_t v5 = v0[10];
  return v7(v5, (uint64_t)sub_1003AE008, v3, v2);
}

uint64_t sub_1005374F8()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v0)
  {
    swift_errorRelease();
    swift_release();
    swift_task_dealloc();
    uint64_t v4 = sub_100537E14;
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v4 = sub_100537680;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100537680()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[7];
  sub_100017238(v0[10], v1, &qword_100660888);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    sub_10001729C(v0[10], &qword_100660888);
    sub_10001729C(v0[9], &qword_100660888);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    uint64_t v6 = v0[2];
    sub_100548CEC(v0[9], v0[8], (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
    uint64_t v7 = *(void *)(v6 + 128);
    static CellularIdentity.current()();
    int v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t))((char *)&dword_1006650C8
                                                                                    + dword_1006650C8);
    uint64_t v8 = (void *)swift_task_alloc();
    v0[14] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_10053783C;
    uint64_t v9 = v0[8];
    uint64_t v10 = v0[5];
    return v11(v9, 0, 0, v10, 1, v7);
  }
}

uint64_t sub_10053783C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 40);
  uint64_t v3 = *(void *)(*(void *)v1 + 32);
  uint64_t v4 = *(void *)(*(void *)v1 + 24);
  uint64_t v5 = *(void *)(*(void *)v1 + 16);
  *(void *)(*(void *)v1 + 120) = a1;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return _swift_task_switch(sub_1005379B0, v5, 0);
}

uint64_t sub_1005379B0()
{
  int v1 = *(_DWORD *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 128) = v3;
  *(void *)(v3 + 16) = v2;
  *(unsigned char *)(v3 + 24) = v1 & 1;
  *(unsigned char *)(v3 + 25) = BYTE1(v1) & 1;
  *(unsigned char *)(v3 + 26) = BYTE2(v1) & 1;
  *(unsigned char *)(v3 + 27) = HIBYTE(v1) & 1;
  uint64_t v7 = (char *)&dword_100660708 + dword_100660708;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100537AC4;
  uint64_t v5 = *(void *)(v0 + 88);
  return ((uint64_t (*)(void (*)(void **@<X0>, unsigned char *@<X8>), uint64_t, uint64_t))v7)(sub_1005491AC, v3, v5);
}

uint64_t sub_100537AC4()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v0)
  {
    swift_errorRelease();
    swift_release();
    swift_task_dealloc();
    uint64_t v4 = sub_100537FF0;
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v4 = sub_100549CE8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100537C4C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_task_dealloc();
  return _swift_task_switch(sub_100537D5C, v1, 0);
}

uint64_t sub_100537D5C()
{
  sub_100548AF4(v0[8], (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
  sub_10001729C(v0[10], &qword_100660888);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100537E14()
{
  (*(void (**)(void, uint64_t, uint64_t, void))(v0[7] + 56))(v0[10], 1, 1, v0[6]);
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[7];
  sub_100017238(v0[10], v1, &qword_100660888);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    sub_10001729C(v0[10], &qword_100660888);
    sub_10001729C(v0[9], &qword_100660888);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    uint64_t v6 = v0[2];
    sub_100548CEC(v0[9], v0[8], (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
    uint64_t v7 = *(void *)(v6 + 128);
    static CellularIdentity.current()();
    int v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t))((char *)&dword_1006650C8
                                                                                    + dword_1006650C8);
    uint64_t v8 = (void *)swift_task_alloc();
    v0[14] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_10053783C;
    uint64_t v9 = v0[8];
    uint64_t v10 = v0[5];
    return v11(v9, 0, 0, v10, 1, v7);
  }
}

uint64_t sub_100537FF0()
{
  if (*(unsigned char *)(v0 + 124))
  {
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100537C4C;
    return sub_1005330C4(1);
  }
  else
  {
    sub_100548AF4(*(void *)(v0 + 64), (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
    sub_10001729C(*(void *)(v0 + 80), &qword_100660888);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
}

uint64_t sub_100538120(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  v2[8] = type metadata accessor for AppInstallEngine.Event(0);
  v2[9] = swift_task_alloc();
  uint64_t v3 = sub_1000172F8(&qword_100666BC0);
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  type metadata accessor for DownloadRequest();
  v2[13] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[14] = v4;
  v2[15] = *(void *)(v4 - 8);
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = type metadata accessor for AppInstallScheduler.ParkReason();
  v2[20] = swift_task_alloc();
  return _swift_task_switch(sub_1005382E8, v1, 0);
}

uint64_t sub_1005382E8()
{
  sub_100548C4C(v0[6], v0[20], (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      sub_100548CEC(v0[20], v0[13], (uint64_t (*)(void))type metadata accessor for DownloadRequest);
      uint64_t v1 = (void *)swift_task_alloc();
      v0[23] = v1;
      *uint64_t v1 = v0;
      v1[1] = sub_1005388D0;
      uint64_t v2 = v0[13];
      uint64_t result = sub_10053C994(v2);
      break;
    case 2u:
      uint64_t v4 = (void *)swift_task_alloc();
      v0[21] = v4;
      *uint64_t v4 = v0;
      v4[1] = sub_1005386F0;
      uint64_t result = sub_10053C31C();
      break;
    case 3u:
      static Logger.install.getter();
      uint64_t v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "Waiting for installation", v7, 2u);
        swift_slowDealloc();
      }
      uint64_t v8 = v0[18];
      uint64_t v9 = v0[14];
      uint64_t v10 = v0[15];

      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      int v11 = (uint64_t (*)(void))v0[1];
      uint64_t result = v11();
      break;
    case 6u:
      uint64_t v12 = v0[7];
      uint64_t v13 = *(void *)(v12 + 152);
      v0[25] = v13;
      uint64_t v14 = swift_task_alloc();
      v0[26] = v14;
      *(void *)(v14 + 16) = sub_100548DA8;
      *(void *)(v14 + 24) = v12;
      uint64_t v16 = (char *)&dword_100660700 + dword_100660700;
      swift_retain();
      uint64_t v15 = (void *)swift_task_alloc();
      v0[27] = v15;
      *uint64_t v15 = v0;
      v15[1] = sub_100538ACC;
      uint64_t result = ((uint64_t (*)(uint64_t (*)@<X0>(void *@<X0>, unsigned char *@<X8>), uint64_t, uint64_t))v16)(sub_100548DB0, v14, v13);
      break;
    default:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      break;
  }
  return result;
}

uint64_t sub_1005386F0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 176) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 56);
  if (v0) {
    uint64_t v4 = sub_1005393E0;
  }
  else {
    uint64_t v4 = sub_10053881C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10053881C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1005388D0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 56);
  if (v0) {
    uint64_t v4 = sub_10053949C;
  }
  else {
    uint64_t v4 = sub_1005389FC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1005389FC()
{
  sub_100548AF4(*(void *)(v0 + 104), (uint64_t (*)(void))type metadata accessor for DownloadRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100538ACC(char a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(unsigned char *)(v4 + 232) = a1;
  *(void *)(v4 + 224) = v1;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 56);
  if (v1) {
    uint64_t v6 = sub_100539574;
  }
  else {
    uint64_t v6 = sub_100538C44;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100538C44()
{
  uint64_t v42 = v0;
  if (*(unsigned char *)(v0 + 232) != 8)
  {
    static Logger.install.getter();
    swift_retain_n();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = swift_slowAlloc();
      char v39 = (void *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      *(_DWORD *)uint64_t v3 = 138412546;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v4 = 0x656C626D61657270;
      uint64_t v5 = *(unsigned __int8 *)(v0 + 232);
      uint64_t v6 = *(void **)(*(void *)(v0 + 56) + 120);
      *(void *)(v0 + 32) = v6;
      id v7 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v39 = v6;
      swift_release_n();
      *(_WORD *)(v3 + 12) = 2082;
      unint64_t v8 = 0xE800000000000000;
      switch(v5)
      {
        case 1:
          uint64_t v4 = 0x64616F6C6E776F64;
          break;
        case 2:
          unint64_t v8 = 0xE700000000000000;
          uint64_t v4 = 0x6C6C6174736E69;
          break;
        case 3:
          uint64_t v4 = 0x6C626D6174736F70;
          unint64_t v8 = 0xE900000000000065;
          break;
        case 4:
          uint64_t v4 = 0x656C6C65636E6163;
          unint64_t v8 = 0xE900000000000064;
          break;
        case 5:
          unint64_t v8 = 0xE600000000000000;
          uint64_t v4 = 0x646573756170;
          break;
        case 6:
          uint64_t v4 = 0x64656873696E6966;
          break;
        case 7:
          unint64_t v8 = 0xE600000000000000;
          uint64_t v4 = 0x64656C696166;
          break;
        default:
          break;
      }
      uint64_t v37 = *(void *)(v0 + 136);
      uint64_t v14 = *(void *)(v0 + 112);
      uint64_t v13 = *(void *)(v0 + 120);
      *(void *)(v0 + 40) = sub_1000143F4(v4, v8, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%@] Resuming after restart at phase '%{public}s'", (uint8_t *)v3, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v12(v37, v14);
    }
    else
    {
      uint64_t v9 = *(void *)(v0 + 136);
      uint64_t v10 = *(void *)(v0 + 112);
      uint64_t v11 = *(void *)(v0 + 120);
      swift_release_n();

      uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v12(v9, v10);
    }
    uint64_t v16 = *(void *)(v0 + 88);
    uint64_t v15 = *(void *)(v0 + 96);
    uint64_t v17 = *(void *)(v0 + 80);
    **(unsigned char **)(v0 + 72) = *(unsigned char *)(v0 + 232);
    swift_storeEnumTagMultiPayload();
    sub_1000172F8(&qword_100666BB0);
    AsyncStream.Continuation.yield(_:)();
    int v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 88))(v15, v17);
    int v19 = enum case for AsyncStream.Continuation.YieldResult.terminated<A>(_:);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    if (v18 == v19)
    {
      static Logger.install.getter();
      swift_retain_n();
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        os_log_type_t v40 = v21;
        uint64_t v22 = swift_slowAlloc();
        char v38 = (void *)swift_slowAlloc();
        uint64_t v41 = swift_slowAlloc();
        *(_DWORD *)uint64_t v22 = 138412546;
        if ((swift_task_isCurrentExecutor() & 1) == 0) {
          swift_task_reportUnexpectedExecutor();
        }
        unint64_t v23 = 0x656C626D61657270;
        uint64_t v24 = *(unsigned __int8 *)(v0 + 232);
        uint64_t v25 = *(void **)(*(void *)(v0 + 56) + 120);
        *(void *)(v0 + 16) = v25;
        id v26 = v25;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *char v38 = v25;
        swift_release_n();
        *(_WORD *)(v22 + 12) = 2082;
        unint64_t v27 = 0xE800000000000000;
        switch(v24)
        {
          case 1:
            unint64_t v23 = 0x64616F6C6E776F64;
            break;
          case 2:
            unint64_t v27 = 0xE700000000000000;
            unint64_t v23 = 0x6C6C6174736E69;
            break;
          case 3:
            unint64_t v23 = 0x6C626D6174736F70;
            unint64_t v27 = 0xE900000000000065;
            break;
          case 4:
            unint64_t v23 = 0x656C6C65636E6163;
            unint64_t v27 = 0xE900000000000064;
            break;
          case 5:
            unint64_t v27 = 0xE600000000000000;
            uint64_t v32 = 1937072496;
            goto LABEL_28;
          case 6:
            unint64_t v23 = 0x64656873696E6966;
            break;
          case 7:
            unint64_t v27 = 0xE600000000000000;
            uint64_t v32 = 1818845542;
LABEL_28:
            unint64_t v23 = v32 & 0xFFFF0000FFFFFFFFLL | 0x646500000000;
            break;
          default:
            break;
        }
        uint64_t v36 = *(void *)(v0 + 128);
        uint64_t v33 = *(void *)(v0 + 112);
        *(void *)(v0 + 24) = sub_1000143F4(v23, v27, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v20, v40, "[%@] Transition to phase '%{public}s' will be ignored", (uint8_t *)v22, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v30 = v36;
        uint64_t v31 = v33;
      }
      else
      {
        uint64_t v28 = *(void *)(v0 + 128);
        uint64_t v29 = *(void *)(v0 + 112);
        swift_release_n();

        uint64_t v30 = v28;
        uint64_t v31 = v29;
      }
      v12(v30, v31);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v34 = *(uint64_t (**)(void))(v0 + 8);
  return v34();
}

uint64_t sub_1005393E0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10053949C()
{
  sub_100548AF4(*(void *)(v0 + 104), (uint64_t (*)(void))type metadata accessor for DownloadRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100539574()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100539630()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000176B4;
  return sub_10054382C();
}

void sub_1005396C0(void **a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  int v50 = a3;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v44 = *(void *)(v6 - 8);
  uint64_t v45 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v38 - v10;
  uint64_t v12 = *(void *)(a2 + 112);
  uint64_t v13 = *a1;
  type metadata accessor for AppInstallEntity.Entity();
  id v14 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v15 = v13;
  id v16 = [v14 initWithPersistentID:v12 onConnection:v15];
  unsigned __int8 v17 = [v16 existsInDatabase];

  if ((v17 & 1) == 0)
  {

    static Logger.install.getter();
    swift_retain();
    os_log_type_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v21, v22))
    {
      unint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v23 = 134217984;
      *(void *)&v49[0] = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Installation cancellation failed, \"%lld\" not found in the database", v23, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v44 + 8))(v11, v45);
    goto LABEL_19;
  }
  id v18 = v16;
  NSString v19 = String._bridgeToObjectiveC()();
  id v20 = [v18 valueForProperty:v19];

  if (v20)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v49, 0, sizeof(v49));
  }
  sub_100017238((uint64_t)v49, (uint64_t)&v47, (uint64_t *)&unk_10065C9C0);
  if (v48)
  {
    sub_1001C5DD4(&v47, v46);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    unsigned __int8 v24 = sub_100242F64(v46);
    if (v3)
    {
      swift_release();
      swift_unexpectedError();
      __break(1u);
      JUMPOUT(0x100539D18);
    }
    unsigned __int8 v25 = v24;
    swift_release();
    sub_100014524((uint64_t)v46);
    sub_10001729C((uint64_t)v49, (uint64_t *)&unk_10065C9C0);

    if (v25 <= 5u && ((1 << v25) & 0x23) != 0)
    {

      char v26 = 1;
LABEL_20:
      uint64_t v36 = v50;
      goto LABEL_21;
    }
  }
  else
  {
    sub_10001729C((uint64_t)v49, (uint64_t *)&unk_10065C9C0);

    unsigned __int8 v25 = 8;
  }
  static Logger.install.getter();
  swift_retain_n();
  unint64_t v27 = Logger.logObject.getter();
  int v28 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v27, (os_log_type_t)v28))
  {

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v9, v45);
LABEL_19:
    char v26 = 0;
    goto LABEL_20;
  }
  int v40 = v28;
  os_log_t v42 = v27;
  uint64_t v43 = v3;
  uint64_t v29 = swift_slowAlloc();
  uint64_t v39 = swift_slowAlloc();
  uint64_t v41 = swift_slowAlloc();
  *(void *)&v49[0] = v41;
  *(_DWORD *)uint64_t v29 = 138412546;
  uint64_t v30 = *(void **)(a2 + 120);
  *(void *)&long long v47 = v30;
  id v31 = v30;
  uint64_t v32 = (void *)v39;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *uint64_t v32 = v30;
  swift_release_n();
  *(_WORD *)(v29 + 12) = 2080;
  int v33 = v25;
  unint64_t v34 = 0xE700000000000000;
  uint64_t v35 = 0x6C6C6174736E69;
  uint64_t v36 = v50;
  switch(v33)
  {
    case 3:
      unint64_t v34 = 0xE900000000000065;
      uint64_t v35 = 0x6C626D6174736F70;
      break;
    case 4:
      uint64_t v35 = 0x656C6C65636E6163;
      unint64_t v34 = 0xE900000000000064;
      break;
    case 5:
      unint64_t v34 = 0xE600000000000000;
      uint64_t v35 = 0x646573756170;
      break;
    case 6:
      unint64_t v34 = 0xE800000000000000;
      uint64_t v35 = 0x64656873696E6966;
      break;
    case 7:
      unint64_t v34 = 0xE600000000000000;
      uint64_t v35 = 0x64656C696166;
      break;
    case 8:
      unint64_t v34 = 0xEA00000000003E65;
      uint64_t v35 = 0x73616850206F4E3CLL;
      break;
    default:
      break;
  }
  *(void *)&long long v47 = sub_1000143F4(v35, v34, (uint64_t *)v49);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  os_log_t v37 = v42;
  _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v40, "[%@] Installation cannot be cancelled right now: %s", (uint8_t *)v29, 0x16u);
  sub_1000172F8(&qword_10065DB10);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  (*(void (**)(char *, uint64_t))(v44 + 8))(v9, v45);
  char v26 = 0;
LABEL_21:
  *uint64_t v36 = v26;
}

uint64_t sub_100539D34@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_10053A564(a1, a2);
}

void sub_100539D4C(void **a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v60 = a3;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v51 = *(void *)(v6 - 8);
  uint64_t v52 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = &v45[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  uint64_t v11 = &v45[-v10];
  uint64_t v12 = *(void *)(a2 + 112);
  uint64_t v13 = *a1;
  type metadata accessor for AppInstallEntity.Entity();
  id v14 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v15 = v13;
  id v16 = [v14 initWithPersistentID:v12 onConnection:v15];
  unsigned __int8 v17 = [v16 existsInDatabase];

  if (v17)
  {
    id v18 = v16;
    NSString v19 = String._bridgeToObjectiveC()();
    id v20 = [v18 valueForProperty:v19];

    if (v20)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v53 = 0u;
      long long v54 = 0u;
    }
    sub_100017238((uint64_t)&v53, (uint64_t)&v58, (uint64_t *)&unk_10065C9C0);
    if (v59)
    {
      sub_1001C5DD4(&v58, v57);
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      char v26 = sub_100242F64(v57);
      if (v3)
      {
        swift_release();
        swift_unexpectedError();
        __break(1u);
        swift_release();
        sub_100014524((uint64_t)&v53);
        swift_unexpectedError();
        __break(1u);
        JUMPOUT(0x10053A540);
      }
      char v27 = v26;
      swift_release();
      sub_100014524((uint64_t)v57);
      sub_10001729C((uint64_t)&v53, (uint64_t *)&unk_10065C9C0);

      if (!v27 || v27 == 1)
      {
        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v28 & 1) == 0)
        {
          *((void *)&v54 + 1) = &type metadata for AppInstallPhase;
          unint64_t v55 = sub_1001CDA60();
          unint64_t v56 = sub_1001CDAB4();
          LOBYTE(v53) = 5;
          type metadata accessor for JSONEncoder();
          swift_allocObject();
          id v40 = v18;
          JSONEncoder.init()();
          SQLiteEncodeValue(_:using:)(&v53, (uint64_t *)&v58);
          swift_release();
          sub_100014524((uint64_t)&v53);
          sub_10018AC60(&v58, v59);
          uint64_t v41 = _bridgeAnythingToObjectiveC<A>(_:)();
          sub_100014524((uint64_t)&v58);
          NSString v42 = String._bridgeToObjectiveC()();
          [v40 setValue:v41 forProperty:v42];

          swift_unknownObjectRelease();
          char v25 = 1;
LABEL_30:
          unsigned __int8 v24 = v60;
          goto LABEL_31;
        }
      }
      else if (v27 == 5)
      {
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      sub_10001729C((uint64_t)&v53, (uint64_t *)&unk_10065C9C0);
    }
    static Logger.install.getter();
    swift_retain_n();
    uint64_t v29 = Logger.logObject.getter();
    int v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, (os_log_type_t)v30))
    {
      int v46 = v30;
      os_log_t v47 = v29;
      id v49 = v18;
      uint64_t v50 = v3;
      uint64_t v31 = swift_slowAlloc();
      uint64_t v32 = (void *)swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      *(void *)&long long v53 = v48;
      *(_DWORD *)uint64_t v31 = 138412546;
      int v33 = *(void **)(a2 + 120);
      *(void *)&long long v58 = v33;
      id v34 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v32 = v33;
      swift_release_n();
      *(_WORD *)(v31 + 12) = 2080;
      unint64_t v35 = 0xE800000000000000;
      uint64_t v37 = v51;
      uint64_t v36 = v52;
      uint64_t v38 = 0x656C626D61657270;
      os_log_type_t v39 = v46;
      switch(&v61 + 4)
      {
        case 1u:
          uint64_t v38 = 0x64616F6C6E776F64;
          break;
        case 2u:
          unint64_t v35 = 0xE700000000000000;
          uint64_t v38 = 0x6C6C6174736E69;
          break;
        case 3u:
          unint64_t v35 = 0xE900000000000065;
          uint64_t v38 = 0x6C626D6174736F70;
          break;
        case 4u:
          uint64_t v38 = 0x656C6C65636E6163;
          unint64_t v35 = 0xE900000000000064;
          break;
        case 5u:
          unint64_t v35 = 0xE600000000000000;
          uint64_t v38 = 0x646573756170;
          break;
        case 6u:
          uint64_t v38 = 0x64656873696E6966;
          break;
        case 7u:
          unint64_t v35 = 0xE600000000000000;
          uint64_t v38 = 0x64656C696166;
          break;
        case 8u:
          unint64_t v35 = 0xEA00000000003E65;
          uint64_t v38 = 0x73616850206F4E3CLL;
          break;
        default:
          break;
      }
      *(void *)&long long v58 = sub_1000143F4(v38, v35, (uint64_t *)&v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_log_type_t v43 = v39;
      os_log_t v44 = v47;
      _os_log_impl((void *)&_mh_execute_header, v47, v43, "[%@] Installation cannot be paused right now: %s", (uint8_t *)v31, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(unsigned char *, uint64_t))(v37 + 8))(v9, v36);
      char v25 = 0;
    }
    else
    {

      swift_release_n();
      (*(void (**)(unsigned char *, uint64_t))(v51 + 8))(v9, v52);
      char v25 = 0;
    }
    goto LABEL_30;
  }

  static Logger.install.getter();
  swift_retain();
  os_log_type_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v21, v22))
  {
    unint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v23 = 134217984;
    *(void *)&long long v53 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Installation pause failed, \"%lld\" not found in the database", v23, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  unsigned __int8 v24 = v60;
  (*(void (**)(unsigned char *, uint64_t))(v51 + 8))(v11, v52);
  char v25 = 0;
LABEL_31:
  *unsigned __int8 v24 = v25;
}

uint64_t sub_10053A564@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AppInstallEngine.State(0);
  *a2 = *(void *)(a1 + *(int *)(v4 + 20));
  a2[1] = *(void *)(a1 + *(int *)(v4 + 24));
  swift_retain();
  return swift_retain();
}

uint64_t sub_10053A5C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100017238(a1, a2, &qword_10065C9B0);
}

uint64_t sub_10053A5F8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v6 = sub_1000172F8(&qword_10065C3C0);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = &v75[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  uint64_t v90 = &v75[-v10];
  uint64_t v11 = (int *)type metadata accessor for EvaluatorDownload();
  uint64_t v12 = *((void *)v11 - 1);
  __chkstk_darwin(v11);
  id v14 = &v75[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v88 = *(void *)(v15 - 8);
  uint64_t v89 = v15;
  __chkstk_darwin(v15);
  unsigned __int8 v17 = &v75[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v91 = a2;
  uint64_t v18 = *(void *)(a2 + 112);
  type metadata accessor for AppInstallEntity.Entity();
  id v19 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v20 = a1;
  id v21 = [v19 initWithPersistentID:v18 onConnection:v20];
  unsigned __int8 v22 = [v21 existsInDatabase];

  if ((v22 & 1) == 0)
  {

LABEL_11:
    uint64_t v39 = sub_1000172F8(&qword_100666C98);
    id v40 = &a3[*(int *)(v39 + 48)];
    *a3 = 0;
LABEL_12:
    (*(void (**)(unsigned char *, uint64_t, uint64_t, int *))(v12 + 56))(v40, 1, 1, v11);
    return (*(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(a3, 0, 1, v39);
  }
  uint64_t v84 = v9;
  id v23 = v21;
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = [v23 valueForProperty:v24];
  id v87 = v23;

  if (v25)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v95 = 0u;
    long long v96 = 0u;
  }
  sub_100017238((uint64_t)&v95, (uint64_t)&v93, (uint64_t *)&unk_10065C9C0);
  if (!v94)
  {
    sub_10001729C((uint64_t)&v95, (uint64_t *)&unk_10065C9C0);
    id v38 = v87;

    goto LABEL_11;
  }
  sub_1001C5DD4(&v93, v92);
  uint64_t v81 = type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  uint64_t v86 = sub_100242F64(v92);
  swift_release();
  uint64_t v83 = 0;
  sub_100014524((uint64_t)v92);
  sub_10001729C((uint64_t)&v95, (uint64_t *)&unk_10065C9C0);

  static Logger.install.getter();
  uint64_t v26 = v91;
  swift_retain_n();
  char v27 = Logger.logObject.getter();
  int v28 = static os_log_type_t.debug.getter();
  BOOL v29 = os_log_type_enabled(v27, (os_log_type_t)v28);
  uint64_t v85 = v14;
  uint64_t v82 = v12;
  if (v29)
  {
    int v76 = v28;
    os_log_t v77 = v27;
    uint64_t v79 = v11;
    uint64_t v80 = a3;
    uint64_t v30 = swift_slowAlloc();
    uint64_t v31 = (void *)swift_slowAlloc();
    uint64_t v78 = swift_slowAlloc();
    *(void *)&long long v95 = v78;
    *(_DWORD *)uint64_t v30 = 138412546;
    uint64_t v32 = *(void **)(v26 + 120);
    *(void *)&long long v93 = v32;
    id v33 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v31 = v32;
    swift_release_n();
    *(_WORD *)(v30 + 12) = 2080;
    unint64_t v34 = 0xE800000000000000;
    uint64_t v35 = 0x656C626D61657270;
    p_base_prots = &XPCClientRegistry.base_prots;
    os_log_type_t v37 = v76;
    switch((char)v86)
    {
      case 1:
        uint64_t v35 = 0x64616F6C6E776F64;
        break;
      case 2:
        unint64_t v34 = 0xE700000000000000;
        uint64_t v35 = 0x6C6C6174736E69;
        break;
      case 3:
        uint64_t v35 = 0x6C626D6174736F70;
        unint64_t v34 = 0xE900000000000065;
        break;
      case 4:
        uint64_t v35 = 0x656C6C65636E6163;
        unint64_t v34 = 0xE900000000000064;
        break;
      case 5:
        unint64_t v34 = 0xE600000000000000;
        uint64_t v35 = 0x646573756170;
        break;
      case 6:
        uint64_t v35 = 0x64656873696E6966;
        break;
      case 7:
        unint64_t v34 = 0xE600000000000000;
        uint64_t v35 = 0x64656C696166;
        break;
      default:
        break;
    }
    *(void *)&long long v93 = sub_1000143F4(v35, v34, (uint64_t *)&v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v42 = v77;
    _os_log_impl((void *)&_mh_execute_header, v77, v37, "[%@] Attempting to resume from phase '%s'", (uint8_t *)v30, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(unsigned char *, uint64_t))(v88 + 8))(v17, v89);
    a3 = v80;
    uint64_t v11 = v79;
    uint64_t v12 = v82;
  }
  else
  {

    swift_release_n();
    (*(void (**)(unsigned char *, uint64_t))(v88 + 8))(v17, v89);
    p_base_prots = (__objc2_prot_list **)(&XPCClientRegistry + 40);
  }
  sub_10041CE88(v20, v18);
  if (!v43)
  {
    char v52 = 1;
    switch((char)v86)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 6:
      case 7:
        char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
        break;
      case 5:
        break;
      default:
        JUMPOUT(0);
    }
    swift_bridgeObjectRelease();

    uint64_t v39 = sub_1000172F8(&qword_100666C98);
    id v40 = &a3[*(int *)(v39 + 48)];
    *a3 = v52 & 1;
    goto LABEL_12;
  }
  os_log_t v44 = v43;
  swift_retain();
  uint64_t v45 = (uint64_t)v84;
  sub_1003137C8(14, v44, (uint64_t)v84);
  swift_release();
  uint64_t v46 = type metadata accessor for URL();
  uint64_t v47 = *(void *)(v46 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46) == 1)
  {
    __break(1u);
    goto LABEL_48;
  }
  uint64_t v48 = v90;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v47 + 32))(v90, v45, v46);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v47 + 56))(v48, 0, 1, v46);
  id v49 = v87;
  NSString v50 = String._bridgeToObjectiveC()();
  id v51 = objc_msgSend(v49, (SEL)p_base_prots[215], v50);

  if (v51)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v95 = 0u;
    long long v96 = 0u;
  }
  long long v53 = a3;
  sub_100017238((uint64_t)&v95, (uint64_t)&v93, (uint64_t *)&unk_10065C9C0);
  if (v94)
  {
    sub_1001C5DD4(&v93, v92);
    swift_allocObject();
    JSONDecoder.init()();
    uint64_t v54 = v83;
    uint64_t v55 = sub_100241F7C(v92);
    unint64_t v57 = v56;
    swift_release();
    uint64_t v83 = v54;
    if (v54) {
      goto LABEL_48;
    }
    sub_100014524((uint64_t)v92);
    sub_10001729C((uint64_t)&v95, (uint64_t *)&unk_10065C9C0);
  }
  else
  {
    sub_10001729C((uint64_t)&v95, (uint64_t *)&unk_10065C9C0);

    uint64_t v55 = 0;
    unint64_t v57 = 0xE000000000000000;
  }
  swift_retain();
  uint64_t v58 = sub_100313B6C(2, v44);
  char v60 = v59;
  swift_release();
  if (v60) {
    uint64_t v61 = 0;
  }
  else {
    uint64_t v61 = v58;
  }
  id v62 = v49;
  NSString v63 = String._bridgeToObjectiveC()();
  id v64 = objc_msgSend(v62, (SEL)p_base_prots[215], v63);

  if (v64)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v95 = 0u;
    long long v96 = 0u;
  }
  uint64_t v65 = v91;
  sub_100017238((uint64_t)&v95, (uint64_t)&v93, (uint64_t *)&unk_10065C9C0);
  if (!v94)
  {
    int v68 = 2;
    goto LABEL_42;
  }
  sub_1001C5DD4(&v93, v92);
  swift_allocObject();
  JSONDecoder.init()();
  uint64_t v66 = v83;
  int v67 = sub_100244910(v92);
  swift_release();
  if (v66)
  {
LABEL_48:
    swift_unexpectedError();
    __break(1u);
    JUMPOUT(0x10053B334);
  }
  sub_100014524((uint64_t)v92);
  int v68 = v67 & 0x1010101;
  uint64_t v65 = v91;
LABEL_42:
  sub_10001729C((uint64_t)&v95, (uint64_t *)&unk_10065C9C0);

  uint64_t v69 = *(void **)(v65 + 120);
  uint64_t v70 = (uint64_t)v85;
  sub_10001733C((uint64_t)v90, (uint64_t)v85, &qword_10065C3C0);
  uint64_t v71 = (uint64_t *)(v70 + v11[5]);
  *uint64_t v71 = v55;
  v71[1] = v57;
  *(void *)(v70 + v11[6]) = v61;
  *(_DWORD *)(v70 + v11[7]) = v68;
  *(unsigned char *)(v70 + v11[9]) = 0;
  *(void *)(v70 + v11[8]) = v69;
  char v72 = 1;
  a3 = v53;
  switch((char)v86)
  {
    case 5:
      break;
    default:
      char v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
      break;
  }
  uint64_t v39 = sub_1000172F8(&qword_100666C98);
  uint64_t v73 = (uint64_t)&v53[*(int *)(v39 + 48)];
  id v74 = v69;
  swift_release();

  swift_bridgeObjectRelease();
  unsigned char *v53 = v72 & 1;
  sub_100548CEC((uint64_t)v85, v73, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
  (*(void (**)(uint64_t, void, uint64_t, int *))(v82 + 56))(v73, 0, 1, v11);
  return (*(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(a3, 0, 1, v39);
}

void sub_10053B394(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for LogKey.Prefix();
  uint64_t v85 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000172F8(&qword_10065C3C0);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v86 = (uint64_t)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v90 = (uint64_t)&v76 - v12;
  uint64_t v13 = type metadata accessor for Logger();
  unint64_t v89 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(a2 + 112);
  type metadata accessor for AppInstallEntity.Entity();
  id v17 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v18 = a1;
  uint64_t v87 = v16;
  id v19 = [v17 initWithPersistentID:v16 onConnection:v18];
  LOBYTE(v17) = [v19 existsInDatabase];

  if ((v17 & 1) == 0)
  {

    uint64_t v23 = a3;
LABEL_11:
    uint64_t v38 = type metadata accessor for EvaluatorDownload();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v23, 1, 1, v38);
    return;
  }
  uint64_t v84 = v8;
  id v20 = v19;
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v20 valueForProperty:v21];
  id v88 = v20;

  if (v22)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v94 = 0u;
    long long v95 = 0u;
  }
  sub_100017238((uint64_t)&v94, (uint64_t)&v92, (uint64_t *)&unk_10065C9C0);
  uint64_t v23 = a3;
  if (!v93)
  {
    sub_10001729C((uint64_t)&v94, (uint64_t *)&unk_10065C9C0);
    id v37 = v88;

    goto LABEL_11;
  }
  sub_1001C5DD4(&v92, v91);
  uint64_t v82 = type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  char v24 = sub_100242F64(v91);
  swift_release();
  uint64_t v83 = 0;
  sub_100014524((uint64_t)v91);
  sub_10001729C((uint64_t)&v94, (uint64_t *)&unk_10065C9C0);

  static Logger.install.getter();
  swift_retain_n();
  id v25 = Logger.logObject.getter();
  int v81 = static os_log_type_t.debug.getter();
  BOOL v26 = os_log_type_enabled(v25, (os_log_type_t)v81);
  char v27 = v84;
  uint64_t v80 = v6;
  if (v26)
  {
    uint64_t v76 = v13;
    uint64_t v78 = v25;
    uint64_t v79 = v23;
    uint64_t v28 = swift_slowAlloc();
    BOOL v29 = (void *)swift_slowAlloc();
    uint64_t v77 = swift_slowAlloc();
    *(void *)&long long v94 = v77;
    *(_DWORD *)uint64_t v28 = 138412546;
    char v30 = v24;
    uint64_t v31 = *(void **)(a2 + 120);
    *(void *)&long long v92 = v31;
    id v32 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *BOOL v29 = v31;
    char v24 = v30;
    swift_release_n();
    *(_WORD *)(v28 + 12) = 2080;
    unint64_t v33 = 0xE800000000000000;
    uint64_t v34 = 0x656C626D61657270;
    uint64_t v35 = v78;
    uint64_t v36 = v76;
    switch(v24)
    {
      case 1:
        uint64_t v34 = 0x64616F6C6E776F64;
        break;
      case 2:
        unint64_t v33 = 0xE700000000000000;
        uint64_t v34 = 0x6C6C6174736E69;
        break;
      case 3:
        uint64_t v34 = 0x6C626D6174736F70;
        unint64_t v33 = 0xE900000000000065;
        break;
      case 4:
        uint64_t v34 = 0x656C6C65636E6163;
        unint64_t v33 = 0xE900000000000064;
        break;
      case 5:
        unint64_t v33 = 0xE600000000000000;
        uint64_t v34 = 0x646573756170;
        break;
      case 6:
        uint64_t v34 = 0x64656873696E6966;
        break;
      case 7:
        unint64_t v33 = 0xE600000000000000;
        uint64_t v34 = 0x64656C696166;
        break;
      default:
        break;
    }
    *(void *)&long long v92 = sub_1000143F4(v34, v33, (uint64_t *)&v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v81, "[%@] Attempting to prioritize from phase '%s'", (uint8_t *)v28, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v89 + 8))(v15, v36);
    uint64_t v23 = v79;
    uint64_t v39 = v90;
    char v27 = v84;
  }
  else
  {

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v89 + 8))(v15, v13);
    uint64_t v39 = v90;
  }
  switch(v24)
  {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v40) {
        goto LABEL_24;
      }
      goto LABEL_28;
    case 1:
      swift_bridgeObjectRelease();
LABEL_24:
      sub_10041CE88(v18, v87);
      if (v41)
      {
        os_log_t v42 = v41;
        swift_retain();
        uint64_t v43 = v86;
        sub_1003137C8(14, v42, v86);
        swift_release();
        uint64_t v44 = type metadata accessor for URL();
        uint64_t v45 = *(void *)(v44 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44) == 1)
        {
          __break(1u);
          goto LABEL_54;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32))(v39, v43, v44);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v45 + 56))(v39, 0, 1, v44);
        id v46 = v88;
        NSString v47 = String._bridgeToObjectiveC()();
        p_base_prots = &XPCClientRegistry.base_prots;
        id v49 = [v46 valueForProperty:v47];

        if (v49)
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          long long v94 = 0u;
          long long v95 = 0u;
        }
        sub_100017238((uint64_t)&v94, (uint64_t)&v92, (uint64_t *)&unk_10065C9C0);
        if (v93)
        {
          sub_1001C5DD4(&v92, v91);
          swift_allocObject();
          JSONDecoder.init()();
          uint64_t v51 = v83;
          uint64_t v52 = sub_100241F7C(v91);
          unint64_t v54 = v53;
          swift_release();
          uint64_t v83 = v51;
          if (v51) {
            goto LABEL_54;
          }
          unint64_t v89 = v54;
          sub_100014524((uint64_t)v91);
          sub_10001729C((uint64_t)&v94, (uint64_t *)&unk_10065C9C0);
        }
        else
        {
          sub_10001729C((uint64_t)&v94, (uint64_t *)&unk_10065C9C0);

          uint64_t v52 = 0;
          unint64_t v89 = 0xE000000000000000;
        }
        swift_retain();
        uint64_t v55 = sub_100313B6C(2, v42);
        char v57 = v56;
        swift_release();
        if (v57) {
          uint64_t v58 = 0;
        }
        else {
          uint64_t v58 = v55;
        }
        id v59 = v46;
        NSString v60 = String._bridgeToObjectiveC()();
        id v61 = [v59 valueForProperty:v60];

        if (v61)
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          long long v94 = 0u;
          long long v95 = 0u;
        }
        uint64_t v62 = v52;
        sub_100017238((uint64_t)&v94, (uint64_t)&v92, (uint64_t *)&unk_10065C9C0);
        if (v93)
        {
          NSString v63 = v27;
          sub_1001C5DD4(&v92, v91);
          swift_allocObject();
          JSONDecoder.init()();
          uint64_t v64 = v83;
          int v65 = sub_100244910(v91);
          swift_release();
          uint64_t v83 = v64;
          if (v64) {
            goto LABEL_54;
          }
          sub_100014524((uint64_t)v91);
          int v66 = v65 & 0x1010101;
          p_base_prots = (__objc2_prot_list **)(&XPCClientRegistry + 40);
        }
        else
        {
          NSString v63 = v27;
          int v66 = 2;
        }
        sub_10001729C((uint64_t)&v94, (uint64_t *)&unk_10065C9C0);

        id v67 = v59;
        NSString v68 = String._bridgeToObjectiveC()();
        id v69 = objc_msgSend(v67, (SEL)p_base_prots[215], v68);

        if (v69)
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          long long v94 = 0u;
          long long v95 = 0u;
        }
        sub_100017238((uint64_t)&v94, (uint64_t)&v92, (uint64_t *)&unk_10065C9C0);
        if (!v93)
        {
          sub_10001729C((uint64_t)&v94, (uint64_t *)&unk_10065C9C0);

          (*(void (**)(char *, void, uint64_t))(v85 + 104))(v63, enum case for LogKey.Prefix.undefined(_:), v80);
          id v72 = objc_allocWithZone((Class)type metadata accessor for LogKey());
          uint64_t v71 = LogKey.init(prefix:)();

          swift_release();
          goto LABEL_52;
        }
        sub_1001C5DD4(&v92, v91);
        swift_allocObject();
        JSONDecoder.init()();
        uint64_t v70 = v83;
        uint64_t v71 = sub_1002443D8(v91);
        swift_release();
        if (!v70)
        {
          sub_100014524((uint64_t)v91);
          sub_10001729C((uint64_t)&v94, (uint64_t *)&unk_10065C9C0);
          swift_release();

LABEL_52:
          sub_10001733C(v90, v23, &qword_10065C3C0);
          uint64_t v73 = (int *)type metadata accessor for EvaluatorDownload();
          id v74 = (uint64_t *)(v23 + v73[5]);
          unint64_t v75 = v89;
          *id v74 = v62;
          v74[1] = v75;
          *(void *)(v23 + v73[6]) = v58;
          *(_DWORD *)(v23 + v73[7]) = v66;
          *(unsigned char *)(v23 + v73[9]) = 0;
          *(void *)(v23 + v73[8]) = v71;
          (*(void (**)(uint64_t, void, uint64_t, int *))(*((void *)v73 - 1) + 56))(v23, 0, 1, v73);
          return;
        }
        while (1)
        {
LABEL_54:
          swift_unexpectedError();
          __break(1u);
        }
      }
LABEL_28:
      uint64_t v50 = type metadata accessor for EvaluatorDownload();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v23, 1, 1, v50);

      break;
    default:
      JUMPOUT(0);
  }
}

void sub_10053C148(void **a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unsigned char *a4@<X8>)
{
  uint64_t v7 = *(void *)(a2 + 112);
  uint64_t v8 = *a1;
  type metadata accessor for AppInstallEntity.Entity();
  id v9 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v10 = v8;
  id v11 = [v9 initWithPersistentID:v7 onConnection:v10];
  LOBYTE(v9) = [v11 existsInDatabase];

  if ((v9 & 1) == 0)
  {

    goto LABEL_5;
  }
  v15[3] = &type metadata for NetworkPolicy.Decision;
  void v15[4] = sub_10024AAD4();
  v15[5] = sub_100411DC4();
  LOWORD(v15[0]) = a3 & 0x101;
  BYTE2(v15[0]) = BYTE2(a3) & 1;
  BYTE3(v15[0]) = HIBYTE(a3) & 1;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  id v12 = v11;
  JSONEncoder.init()();
  SQLiteEncodeValue(_:using:)(v15, v16);
  if (!v4)
  {
    swift_release();
    sub_100014524((uint64_t)v15);
    sub_10018AC60(v16, v16[3]);
    uint64_t v13 = _bridgeAnythingToObjectiveC<A>(_:)();
    sub_100014524((uint64_t)v16);
    NSString v14 = String._bridgeToObjectiveC()();
    objc_msgSend(v12, "setValue:forProperty:", v13, v14, v15[0]);

    swift_unknownObjectRelease();
LABEL_5:
    *a4 = 0;
    return;
  }
  swift_release();
  sub_100014524((uint64_t)v15);
  swift_unexpectedError();
  __break(1u);
}

uint64_t sub_10053C31C()
{
  v1[3] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  return _swift_task_switch(sub_10053C3DC, v0, 0);
}

uint64_t sub_10053C3DC()
{
  static Logger.install.getter();
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    id v11 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    if ((swift_task_isCurrentExecutor() & 1) == 0) {
      swift_task_reportUnexpectedExecutor();
    }
    uint64_t v4 = *(void **)(v0[3] + 120);
    v0[2] = v4;
    id v5 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v11 = v4;
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%@] Approving device security", v3, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v6 = v0[3];
  (*(void (**)(void, void))(v0[5] + 8))(v0[6], v0[4]);
  uint64_t v7 = *(void *)(v6 + 152);
  v0[7] = v7;
  id v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1006606F0 + dword_1006606F0);
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[8] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10053C640;
  uint64_t v9 = v0[3];
  return v12((uint64_t)v12, (uint64_t)sub_100548DF4, v9, v7);
}

uint64_t sub_10053C640()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 24);
  if (v0) {
    uint64_t v4 = sub_10053C930;
  }
  else {
    uint64_t v4 = sub_10053C788;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10053C788()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10053C81C;
  return sub_1005330C4(2);
}

uint64_t sub_10053C81C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10053C930()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10053C994(uint64_t a1)
{
  v2[93] = v1;
  v2[92] = a1;
  uint64_t v3 = type metadata accessor for AppInstallTaskResult();
  v2[94] = v3;
  v2[95] = *(void *)(v3 - 8);
  v2[96] = swift_task_alloc();
  v2[97] = swift_task_alloc();
  v2[98] = type metadata accessor for DownloadRequest();
  v2[99] = swift_task_alloc();
  return _swift_task_switch(sub_10053CA98, v1, 0);
}

uint64_t sub_10053CA98()
{
  uint64_t v1 = *(void *)(v0 + 792);
  uint64_t v2 = *(void *)(v0 + 744);
  sub_100548C4C(*(void *)(v0 + 736), v1, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
  type metadata accessor for Download();
  swift_allocObject();
  *(void *)(v0 + 800) = sub_1001C6AF0(v1);
  uint64_t v3 = *(uint64_t **)(v2 + 216);
  *(void *)(v0 + 808) = v3;
  uint64_t v4 = *v3;
  uint64_t v5 = *(void *)(class metadata base offset for ManagedBuffer + *v3 + 16);
  *(void *)(v0 + 816) = v5;
  uint64_t v6 = (uint64_t)v3 + v5;
  uint64_t v7 = *(unsigned int *)(v4 + 48);
  *(_DWORD *)(v0 + 92) = v7;
  uint64_t v8 = (os_unfair_lock_s *)((char *)v3 + ((v7 + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v8);
  sub_100548E10(v6);
  *(void *)(v0 + 824) = 0;
  os_unfair_lock_unlock(v8);
  return _swift_task_switch(sub_10053CBF8, 0, 0);
}

void sub_10053CBF8()
{
  uint64_t v1 = *(void *)(v0 + 824);
  uint64_t v2 = *(void *)(v0 + 800);
  id v3 = objc_allocWithZone((Class)type metadata accessor for DownloadTask());
  uint64_t v4 = swift_retain();
  id v5 = sub_100253AD8(v4);
  *(void *)(v0 + 832) = v5;
  swift_release();
  uint64_t v6 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon8Download_storage);
  *(void *)(swift_task_alloc() + 16) = v5;
  uint64_t v7 = (uint64_t)&v6[4];
  v6 += 28;
  os_unfair_lock_lock(v6);
  sub_100548E64(v7);
  os_unfair_lock_unlock(v6);
  if (!v1)
  {
    swift_task_dealloc();
    *(_OWORD *)(v0 + 128) = 0u;
    *(_OWORD *)(v0 + 144) = 0u;
    *(_OWORD *)(v0 + 96) = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
    sub_10024ADB4(v0 + 96);
    *(void *)(v0 + 840) = 0;
    sub_10001729C(v0 + 96, &qword_1006666D0);
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 848) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_10053CDC4;
    sub_1001C6E64(v0 + 16);
  }
}

uint64_t sub_10053CDC4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10053CEC0, 0, 0);
}

uint64_t sub_10053CEC0()
{
  uint64_t v1 = *(void *)(v0 + 744);

  return _swift_task_switch(sub_10053CF2C, v1, 0);
}

uint64_t sub_10053CF2C()
{
  uint64_t v1 = v0 + 16;
  uint64_t v2 = *(void *)(v0 + 16);
  *(void *)(v0 + 856) = v2;
  switch(*(unsigned char *)(v0 + 88))
  {
    case 1:
      sub_10001733C(v1, v0 + 352, &qword_1006666D0);
      sub_100017238(v0 + 352, v0 + 480, &qword_1006666D0);
      if (*(void *)(v0 + 512))
      {
        long long v7 = *(_OWORD *)(v0 + 496);
        *(_OWORD *)(v0 + 416) = *(_OWORD *)(v0 + 480);
        *(_OWORD *)(v0 + 432) = v7;
        long long v8 = *(_OWORD *)(v0 + 528);
        *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 512);
        *(_OWORD *)(v0 + 464) = v8;
        uint64_t v9 = (void *)swift_task_alloc();
        *(void *)(v0 + 880) = v9;
        *uint64_t v9 = v0;
        v9[1] = sub_10053D8C0;
        uint64_t v6 = v0 + 416;
        goto LABEL_8;
      }
      sub_10001729C(v0 + 480, &qword_1006666D0);
      uint64_t v15 = *(void *)(v0 + 792);
      uint64_t v16 = *(void *)(v0 + 784);
      uint64_t v17 = *(void *)(v0 + 776);
      sub_100548C4C(*(void *)(v0 + 736), v15, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
      sub_100548E80(v0 + 352, v15 + *(int *)(v16 + 56));
      sub_100548C4C(v15, v17, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
      type metadata accessor for AppInstallScheduler.ParkReason();
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      sub_100548AF4(v15, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
      goto LABEL_18;
    case 2:
      sub_10001733C(v0 + 24, v0 + 160, &qword_1006666D0);
      sub_100017238(v0 + 160, v0 + 288, &qword_1006666D0);
      if (*(void *)(v0 + 320))
      {
        long long v10 = *(_OWORD *)(v0 + 304);
        *(_OWORD *)(v0 + 224) = *(_OWORD *)(v0 + 288);
        *(_OWORD *)(v0 + 240) = v10;
        long long v11 = *(_OWORD *)(v0 + 336);
        *(_OWORD *)(v0 + 256) = *(_OWORD *)(v0 + 320);
        *(_OWORD *)(v0 + 272) = v11;
        id v12 = (void *)swift_task_alloc();
        *(void *)(v0 + 896) = v12;
        *id v12 = v0;
        v12[1] = sub_10053DC00;
        uint64_t v6 = v0 + 224;
        goto LABEL_8;
      }
      sub_10001729C(v0 + 160, &qword_1006666D0);
      sub_10001729C(v0 + 288, &qword_1006666D0);
      **(void **)(v0 + 776) = *(void *)(v0 + 856);
      goto LABEL_17;
    case 3:
      int8x16_t v14 = vorrq_s8(*(int8x16_t *)(v0 + 32), *(int8x16_t *)(v0 + 48));
      if (!(v2 | *(void *)&vorr_s8(*(int8x8_t *)v14.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)) | *(void *)(v0 + 64) | *(void *)(v0 + 72) | *(void *)(v0 + 80) | *(void *)(v0 + 24))) {
        **(unsigned char **)(v0 + 776) = 2;
      }
      goto LABEL_17;
    default:
      sub_10001733C(v1, v0 + 544, &qword_1006666D0);
      sub_100017238(v0 + 544, v0 + 672, &qword_1006666D0);
      if (*(void *)(v0 + 704))
      {
        long long v3 = *(_OWORD *)(v0 + 688);
        *(_OWORD *)(v0 + 608) = *(_OWORD *)(v0 + 672);
        *(_OWORD *)(v0 + 624) = v3;
        long long v4 = *(_OWORD *)(v0 + 720);
        *(_OWORD *)(v0 + 640) = *(_OWORD *)(v0 + 704);
        *(_OWORD *)(v0 + 656) = v4;
        id v5 = (void *)swift_task_alloc();
        *(void *)(v0 + 864) = v5;
        *id v5 = v0;
        v5[1] = sub_10053D5D0;
        uint64_t v6 = v0 + 608;
LABEL_8:
        return sub_100543028(v6);
      }
      else
      {
        sub_10001729C(v0 + 544, &qword_1006666D0);
        sub_10001729C(v0 + 672, &qword_1006666D0);
        type metadata accessor for AppInstallScheduler.ParkReason();
        swift_storeEnumTagMultiPayload();
LABEL_17:
        swift_storeEnumTagMultiPayload();
LABEL_18:
        uint64_t v18 = *(void *)(v0 + 776);
        id v19 = *(uint64_t **)(v0 + 768);
        uint64_t v20 = *(void *)(v0 + 760);
        uint64_t v21 = *(void *)(v0 + 736);
        sub_1000172F8(&qword_10065DBF0);
        uint64_t v22 = *(void *)(v20 + 72);
        unint64_t v23 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
        uint64_t v24 = swift_allocObject();
        *(_OWORD *)(v24 + 16) = xmmword_1005A4070;
        uint64_t v25 = v24 + v23;
        sub_100548C4C(v21, v25, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        type metadata accessor for AppInstallScheduler.ParkReason();
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        sub_100548C4C(v18, v25 + v22, (uint64_t (*)(void))type metadata accessor for AppInstallTaskResult);
        *id v19 = v24;
        swift_storeEnumTagMultiPayload();
        BOOL v26 = (void *)swift_task_alloc();
        *(void *)(v0 + 912) = v26;
        *BOOL v26 = v0;
        v26[1] = sub_10053DEDC;
        uint64_t v27 = *(void *)(v0 + 768);
        return sub_10053EEB0(v27);
      }
  }
}

uint64_t sub_10053D470()
{
  uint64_t v1 = *(void *)(v0 + 808);
  uint64_t v2 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(v0 + 92) + 3) & 0x1FFFFFFFCLL));
  uint64_t v3 = v1 + *(void *)(v0 + 816);
  os_unfair_lock_lock(v2);
  sub_1005482E8(v3);
  os_unfair_lock_unlock(v2);
  uint64_t v4 = *(void *)(v0 + 840);
  *(void *)(v0 + 928) = v4;
  uint64_t v5 = *(void *)(v0 + 744);
  swift_release();
  uint64_t v6 = *(void *)(v5 + 152);
  *(void *)(v0 + 936) = v6;
  uint64_t v7 = swift_task_alloc();
  *(void *)(v0 + 944) = v7;
  *(void *)(v7 + 16) = v5;
  *(void *)(v7 + 24) = v4;
  long long v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1006606F0 + dword_1006606F0);
  swift_retain();
  long long v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 952) = v8;
  *long long v8 = v0;
  v8[1] = sub_10053E134;
  return v10((uint64_t)v10, (uint64_t)sub_100549CF4, v7, v6);
}

uint64_t sub_10053D5D0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 872) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 744);
  if (v0) {
    uint64_t v4 = sub_10053E550;
  }
  else {
    uint64_t v4 = sub_10053D6FC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10053D6FC()
{
  sub_10024A8CC((uint64_t)(v0 + 76));
  sub_10001729C((uint64_t)(v0 + 68), &qword_1006666D0);
  type metadata accessor for AppInstallScheduler.ParkReason();
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  uint64_t v1 = v0[97];
  uint64_t v2 = (uint64_t *)v0[96];
  uint64_t v3 = v0[95];
  uint64_t v4 = v0[92];
  sub_1000172F8(&qword_10065DBF0);
  uint64_t v5 = *(void *)(v3 + 72);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1005A4070;
  uint64_t v8 = v7 + v6;
  sub_100548C4C(v4, v8, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  sub_100548C4C(v1, v8 + v5, (uint64_t (*)(void))type metadata accessor for AppInstallTaskResult);
  *uint64_t v2 = v7;
  swift_storeEnumTagMultiPayload();
  uint64_t v9 = (void *)swift_task_alloc();
  v0[114] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_10053DEDC;
  uint64_t v10 = v0[96];
  return sub_10053EEB0(v10);
}

uint64_t sub_10053D8C0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 888) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 744);
  if (v0) {
    uint64_t v4 = sub_10053E6CC;
  }
  else {
    uint64_t v4 = sub_10053D9EC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10053D9EC()
{
  sub_10024A8CC((uint64_t)(v0 + 52));
  uint64_t v1 = v0[99];
  uint64_t v2 = v0[98];
  uint64_t v3 = v0[97];
  sub_100548C4C(v0[92], v1, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
  sub_100548E80((uint64_t)(v0 + 44), v1 + *(int *)(v2 + 56));
  sub_100548C4C(v1, v3, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
  type metadata accessor for AppInstallScheduler.ParkReason();
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  sub_100548AF4(v1, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
  uint64_t v4 = v0[97];
  uint64_t v5 = (uint64_t *)v0[96];
  uint64_t v6 = v0[95];
  uint64_t v7 = v0[92];
  sub_1000172F8(&qword_10065DBF0);
  uint64_t v8 = *(void *)(v6 + 72);
  unint64_t v9 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1005A4070;
  uint64_t v11 = v10 + v9;
  sub_100548C4C(v7, v11, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  sub_100548C4C(v4, v11 + v8, (uint64_t (*)(void))type metadata accessor for AppInstallTaskResult);
  *uint64_t v5 = v10;
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = (void *)swift_task_alloc();
  v0[114] = (uint64_t)v12;
  *uint64_t v12 = v0;
  v12[1] = sub_10053DEDC;
  uint64_t v13 = v0[96];
  return sub_10053EEB0(v13);
}

uint64_t sub_10053DC00()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 904) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 744);
  if (v0) {
    uint64_t v4 = sub_10053E848;
  }
  else {
    uint64_t v4 = sub_10053DD2C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10053DD2C()
{
  sub_10024A8CC((uint64_t)(v0 + 28));
  sub_10001729C((uint64_t)(v0 + 20), &qword_1006666D0);
  *(void *)v0[97] = v0[107];
  swift_storeEnumTagMultiPayload();
  uint64_t v1 = v0[97];
  uint64_t v2 = (uint64_t *)v0[96];
  uint64_t v3 = v0[95];
  uint64_t v4 = v0[92];
  sub_1000172F8(&qword_10065DBF0);
  uint64_t v5 = *(void *)(v3 + 72);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1005A4070;
  uint64_t v8 = v7 + v6;
  sub_100548C4C(v4, v8, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
  type metadata accessor for AppInstallScheduler.ParkReason();
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  sub_100548C4C(v1, v8 + v5, (uint64_t (*)(void))type metadata accessor for AppInstallTaskResult);
  *uint64_t v2 = v7;
  swift_storeEnumTagMultiPayload();
  unint64_t v9 = (void *)swift_task_alloc();
  v0[114] = (uint64_t)v9;
  *unint64_t v9 = v0;
  v9[1] = sub_10053DEDC;
  uint64_t v10 = v0[96];
  return sub_10053EEB0(v10);
}

uint64_t sub_10053DEDC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 920) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 768);
  uint64_t v4 = *(void *)(v2 + 744);
  sub_100548AF4(v3, (uint64_t (*)(void))type metadata accessor for AppInstallTaskResult);
  if (v0) {
    uint64_t v5 = sub_10053E9D0;
  }
  else {
    uint64_t v5 = sub_10053E038;
  }
  return _swift_task_switch(v5, v4, 0);
}

void sub_10053E038()
{
  uint64_t v1 = *(void *)(v0 + 920);
  uint64_t v2 = *(void *)(v0 + 808);
  uint64_t v3 = (os_unfair_lock_s *)(v2 + ((*(unsigned int *)(v0 + 92) + 3) & 0x1FFFFFFFCLL));
  uint64_t v4 = v2 + *(void *)(v0 + 816);
  sub_100548AF4(*(void *)(v0 + 776), (uint64_t (*)(void))type metadata accessor for AppInstallTaskResult);
  os_unfair_lock_lock(v3);
  sub_1005482E8(v4);
  os_unfair_lock_unlock(v3);
  if (!v1)
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(void (**)(void))(v0 + 8);
    v5();
  }
}

uint64_t sub_10053E134()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 960) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 744);
  swift_release();
  swift_task_dealloc();
  if (v0) {
    uint64_t v4 = sub_10053E4C0;
  }
  else {
    uint64_t v4 = sub_10053E298;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10053E298()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 968) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10053E32C;
  return sub_1005330C4(7);
}

uint64_t sub_10053E32C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 744);
  swift_task_dealloc();
  return _swift_task_switch(sub_10053E43C, v1, 0);
}

uint64_t sub_10053E43C()
{
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10053E4C0()
{
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10053E550()
{
  uint64_t v1 = *(void *)(v0 + 808);
  uint64_t v2 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(v0 + 92) + 3) & 0x1FFFFFFFCLL));
  uint64_t v3 = v1 + *(void *)(v0 + 816);
  sub_10024A8CC(v0 + 608);
  sub_10001729C(v0 + 544, &qword_1006666D0);
  os_unfair_lock_lock(v2);
  sub_1005482E8(v3);
  os_unfair_lock_unlock(v2);
  uint64_t v4 = *(void *)(v0 + 872);
  *(void *)(v0 + 928) = v4;
  uint64_t v5 = *(void *)(v0 + 744);
  swift_release();
  uint64_t v6 = *(void *)(v5 + 152);
  *(void *)(v0 + 936) = v6;
  uint64_t v7 = swift_task_alloc();
  *(void *)(v0 + 944) = v7;
  *(void *)(v7 + 16) = v5;
  *(void *)(v7 + 24) = v4;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1006606F0 + dword_1006606F0);
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 952) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10053E134;
  return v10((uint64_t)v10, (uint64_t)sub_100549CF4, v7, v6);
}

uint64_t sub_10053E6CC()
{
  uint64_t v1 = *(void *)(v0 + 808);
  uint64_t v2 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(v0 + 92) + 3) & 0x1FFFFFFFCLL));
  uint64_t v3 = v1 + *(void *)(v0 + 816);
  sub_10024A8CC(v0 + 416);
  sub_10001729C(v0 + 352, &qword_1006666D0);
  os_unfair_lock_lock(v2);
  sub_1005482E8(v3);
  os_unfair_lock_unlock(v2);
  uint64_t v4 = *(void *)(v0 + 888);
  *(void *)(v0 + 928) = v4;
  uint64_t v5 = *(void *)(v0 + 744);
  swift_release();
  uint64_t v6 = *(void *)(v5 + 152);
  *(void *)(v0 + 936) = v6;
  uint64_t v7 = swift_task_alloc();
  *(void *)(v0 + 944) = v7;
  *(void *)(v7 + 16) = v5;
  *(void *)(v7 + 24) = v4;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1006606F0 + dword_1006606F0);
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 952) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10053E134;
  return v10((uint64_t)v10, (uint64_t)sub_100549CF4, v7, v6);
}

uint64_t sub_10053E848()
{
  uint64_t v1 = *(void *)(v0 + 808);
  uint64_t v2 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(v0 + 92) + 3) & 0x1FFFFFFFCLL));
  uint64_t v3 = v1 + *(void *)(v0 + 816);
  swift_errorRelease();
  sub_10024A8CC(v0 + 224);
  sub_10001729C(v0 + 160, &qword_1006666D0);
  os_unfair_lock_lock(v2);
  sub_1005482E8(v3);
  os_unfair_lock_unlock(v2);
  uint64_t v4 = *(void *)(v0 + 904);
  *(void *)(v0 + 928) = v4;
  uint64_t v5 = *(void *)(v0 + 744);
  swift_release();
  uint64_t v6 = *(void *)(v5 + 152);
  *(void *)(v0 + 936) = v6;
  uint64_t v7 = swift_task_alloc();
  *(void *)(v0 + 944) = v7;
  *(void *)(v7 + 16) = v5;
  *(void *)(v7 + 24) = v4;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1006606F0 + dword_1006606F0);
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 952) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10053E134;
  return v10((uint64_t)v10, (uint64_t)sub_100549CF4, v7, v6);
}

uint64_t sub_10053E9D0()
{
  uint64_t v1 = *(void *)(v0 + 808);
  uint64_t v2 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(v0 + 92) + 3) & 0x1FFFFFFFCLL));
  uint64_t v3 = v1 + *(void *)(v0 + 816);
  sub_100548AF4(*(void *)(v0 + 776), (uint64_t (*)(void))type metadata accessor for AppInstallTaskResult);
  os_unfair_lock_lock(v2);
  sub_1005482E8(v3);
  os_unfair_lock_unlock(v2);
  uint64_t v4 = *(void *)(v0 + 920);
  *(void *)(v0 + 928) = v4;
  uint64_t v5 = *(void *)(v0 + 744);
  swift_release();
  uint64_t v6 = *(void *)(v5 + 152);
  *(void *)(v0 + 936) = v6;
  uint64_t v7 = swift_task_alloc();
  *(void *)(v0 + 944) = v7;
  *(void *)(v7 + 16) = v5;
  *(void *)(v7 + 24) = v4;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1006606F0 + dword_1006606F0);
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 952) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10053E134;
  return v10((uint64_t)v10, (uint64_t)sub_100549CF4, v7, v6);
}

uint64_t sub_10053EB4C(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 112);
  type metadata accessor for AppInstallEntity.Entity();
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v5 = a1;
  id v6 = [v4 initWithPersistentID:v3 onConnection:v5];
  LOBYTE(v3) = [v6 existsInDatabase];

  if (v3)
  {
    id v7 = v6;
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v7 valueForProperty:v8];

    if (v9)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v15, 0, sizeof(v15));
    }
    sub_100017238((uint64_t)v15, (uint64_t)&v13, (uint64_t *)&unk_10065C9C0);
    if (v14)
    {
      sub_1001C5DD4(&v13, v12);
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      uint64_t v10 = sub_100242F64(v12);
      swift_release();
      sub_100014524((uint64_t)v12);
    }
    else
    {
      uint64_t v10 = 8;
    }
    sub_10001729C((uint64_t)v15, (uint64_t *)&unk_10065C9C0);
  }
  else
  {

    return 8;
  }
  return v10;
}

void sub_10053ED08(void **a1, uint64_t a2, char a3)
{
  uint64_t v5 = *(void *)(a2 + 112);
  id v6 = *a1;
  type metadata accessor for AppInstallEntity.Entity();
  id v7 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v8 = v6;
  id v9 = [v7 initWithPersistentID:v5 onConnection:v8];
  LOBYTE(v7) = [v9 existsInDatabase];

  if (v7)
  {
    v13[3] = &type metadata for AppInstallPhase;
    void v13[4] = sub_1001CDA60();
    v13[5] = sub_1001CDAB4();
    LOBYTE(v13[0]) = a3;
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    id v10 = v9;
    JSONEncoder.init()();
    SQLiteEncodeValue(_:using:)(v13, v14);
    swift_release();
    sub_100014524((uint64_t)v13);
    if (v3)
    {
      swift_unexpectedError();
      __break(1u);
    }
    else
    {
      sub_10018AC60(v14, v14[3]);
      uint64_t v11 = _bridgeAnythingToObjectiveC<A>(_:)();
      sub_100014524((uint64_t)v14);
      NSString v12 = String._bridgeToObjectiveC()();
      objc_msgSend(v10, "setValue:forProperty:", v11, v12, v13[0]);

      swift_unknownObjectRelease();
    }
  }
  else
  {
  }
}

uint64_t sub_10053EEB0(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  v2[9] = type metadata accessor for AppInstallScheduler.ParkReason();
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for AppInstallTaskResult();
  v2[14] = v4;
  v2[15] = *(void *)(v4 - 8);
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  return _swift_task_switch(sub_10053F034, v1, 0);
}

uint64_t sub_10053F034()
{
  uint64_t v63 = v0;
  sub_100548C4C(*(void *)(v0 + 32), *(void *)(v0 + 136), (uint64_t (*)(void))type metadata accessor for AppInstallTaskResult);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v8 = **(void **)(v0 + 136);
      uint64_t v4 = *(void *)(*(void *)(v0 + 40) + 152);
      *(void *)(v0 + 192) = v4;
      uint64_t v5 = swift_task_alloc();
      *(void *)(v0 + 200) = v5;
      *(void *)(v5 + 16) = v8;
      NSString v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1006606F0 + dword_1006606F0);
      swift_retain();
      id v9 = (void *)swift_task_alloc();
      *(void *)(v0 + 208) = v9;
      *id v9 = v0;
      v9[1] = sub_10053FE10;
      id v7 = sub_100548D54;
      goto LABEL_17;
    case 2u:
      uint64_t v10 = **(void **)(v0 + 136);
      *(void *)(v0 + 224) = v10;
      uint64_t v11 = (void *)swift_task_alloc();
      *(void *)(v0 + 232) = v11;
      *uint64_t v11 = v0;
      v11[1] = sub_100540034;
      return sub_1005411FC(v10);
    case 3u:
      long long v13 = *(uint64_t **)(v0 + 136);
      uint64_t v14 = *(void *)(v0 + 40);
      uint64_t v15 = *v13;
      *(void *)(v0 + 328) = *v13;
      uint64_t v4 = *(void *)(v14 + 152);
      *(void *)(v0 + 336) = v4;
      uint64_t v5 = swift_task_alloc();
      *(void *)(v0 + 344) = v5;
      *(void *)(v5 + 16) = v14;
      *(void *)(v5 + 24) = v15;
      NSString v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1006606F0 + dword_1006606F0);
      swift_retain();
      uint64_t v16 = (void *)swift_task_alloc();
      *(void *)(v0 + 352) = v16;
      *uint64_t v16 = v0;
      v16[1] = sub_1005409FC;
      id v7 = sub_100338848;
      goto LABEL_17;
    case 4u:
      char v17 = **(unsigned char **)(v0 + 136);
      uint64_t v18 = (void *)swift_task_alloc();
      *(void *)(v0 + 320) = v18;
      void *v18 = v0;
      v18[1] = sub_1005408EC;
      return sub_1005330C4(v17);
    case 5u:
      uint64_t v20 = *(void *)(v0 + 96);
      uint64_t v19 = *(void *)(v0 + 104);
      sub_100548CEC(*(void *)(v0 + 136), v19, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
      static Logger.install.getter();
      sub_100548C4C(v19, v20, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
      swift_retain_n();
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        os_log_type_t v57 = v22;
        log = v21;
        uint64_t v23 = swift_slowAlloc();
        id v59 = (void *)swift_slowAlloc();
        id v61 = (uint8_t *)v23;
        uint64_t v62 = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 138412546;
        if ((swift_task_isCurrentExecutor() & 1) == 0) {
          swift_task_reportUnexpectedExecutor();
        }
        uint64_t v24 = *(void *)(v0 + 88);
        uint64_t v53 = *(void *)(v0 + 96);
        uint64_t v54 = *(void *)(v0 + 80);
        uint64_t v25 = *(void **)(*(void *)(v0 + 40) + 120);
        *(void *)(v0 + 16) = v25;
        id v26 = v25;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v59 = v25;
        swift_release_n();
        *(_WORD *)(v23 + 12) = 2082;
        sub_100548C4C(v53, v24, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
        sub_100548C4C(v24, v54, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
        unint64_t v27 = 0xEF79746972756365;
        uint64_t v28 = 0x7320656369766564;
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            uint64_t v28 = 0xD000000000000010;
            sub_100548AF4(*(void *)(v0 + 80), (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
            BOOL v29 = "dequeue download";
            goto LABEL_33;
          case 2u:
            break;
          case 3u:
            unint64_t v27 = 0xE700000000000000;
            uint64_t v28 = 0x6C6C6174736E69;
            break;
          case 4u:
            unint64_t v27 = 0xE600000000000000;
            uint64_t v28 = 0x646573756170;
            break;
          case 5u:
            unint64_t v27 = 0xE800000000000000;
            uint64_t v28 = 0x6E776F6474756873;
            break;
          case 6u:
            unint64_t v27 = 0xE700000000000000;
            uint64_t v28 = 0x74726174736572;
            break;
          default:
            uint64_t v28 = 0xD000000000000010;
            sub_100548AF4(*(void *)(v0 + 80), (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
            BOOL v29 = "enqueue download";
LABEL_33:
            unint64_t v27 = (unint64_t)(v29 - 32) | 0x8000000000000000;
            break;
        }
        uint64_t v47 = *(void *)(v0 + 96);
        uint64_t v48 = *(void *)(v0 + 56);
        uint64_t v55 = *(void *)(v0 + 48);
        uint64_t v56 = *(void *)(v0 + 64);
        sub_100548AF4(*(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
        *(void *)(v0 + 24) = sub_1000143F4(v28, v27, &v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100548AF4(v47, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
        _os_log_impl((void *)&_mh_execute_header, log, v57, "[%@] Parking with reason: %{public}s", v61, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v56, v55);
      }
      else
      {
        uint64_t v42 = *(void *)(v0 + 96);
        uint64_t v44 = *(void *)(v0 + 56);
        uint64_t v43 = *(void *)(v0 + 64);
        uint64_t v45 = *(void *)(v0 + 48);
        swift_release_n();
        sub_100548AF4(v42, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);

        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
      }
      id v49 = *(void **)(v0 + 40);
      sub_10018AC60(v49 + 22, v49[25]);
      uint64_t v50 = v49[14];
      uint64_t v51 = (void *)swift_task_alloc();
      *(void *)(v0 + 248) = v51;
      *uint64_t v51 = v0;
      v51[1] = sub_100540218;
      uint64_t v52 = *(void *)(v0 + 104);
      return sub_10046E7E0(v50, v52);
    case 6u:
      char v30 = *(uint64_t **)(v0 + 136);
      uint64_t v31 = *v30;
      uint64_t v32 = v30[1];
      uint64_t v4 = *(void *)(*(void *)(v0 + 40) + 152);
      *(void *)(v0 + 288) = v4;
      uint64_t v5 = swift_task_alloc();
      *(void *)(v0 + 296) = v5;
      *(void *)(v5 + 16) = v32;
      *(void *)(v5 + 24) = v31;
      NSString v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1006606F0 + dword_1006606F0);
      swift_retain();
      unint64_t v33 = (void *)swift_task_alloc();
      *(void *)(v0 + 304) = v33;
      *unint64_t v33 = v0;
      v33[1] = sub_1005406C8;
      id v7 = sub_100548CB4;
      goto LABEL_17;
    case 7u:
      uint64_t v34 = **(void **)(v0 + 136);
      *(void *)(v0 + 144) = v34;
      uint64_t v35 = *(void *)(v34 + 16);
      *(void *)(v0 + 152) = v35;
      if (v35)
      {
        uint64_t v37 = *(void *)(v0 + 120);
        uint64_t v36 = *(void *)(v0 + 128);
        int v38 = *(_DWORD *)(v37 + 80);
        *(_DWORD *)(v0 + 392) = v38;
        *(void *)(v0 + 160) = *(void *)(v37 + 72);
        *(void *)(v0 + 168) = 0;
        sub_100548C4C(v34 + ((v38 + 32) & ~(unint64_t)v38), v36, (uint64_t (*)(void))type metadata accessor for AppInstallTaskResult);
        uint64_t v39 = (void *)swift_task_alloc();
        *(void *)(v0 + 176) = v39;
        *uint64_t v39 = v0;
        v39[1] = sub_10053FB48;
        uint64_t v40 = *(void *)(v0 + 128);
        uint64_t result = sub_10053EEB0(v40);
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_29:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        id v46 = *(uint64_t (**)(void))(v0 + 8);
        uint64_t result = v46();
      }
      break;
    case 8u:
      uint64_t v41 = (void *)swift_task_alloc();
      *(void *)(v0 + 376) = v41;
      void *v41 = v0;
      v41[1] = sub_100540E84;
      return sub_100541740();
    case 9u:
      goto LABEL_29;
    default:
      uint64_t v1 = *(uint64_t **)(v0 + 136);
      uint64_t v2 = *v1;
      uint64_t v3 = v1[1];
      uint64_t v4 = *(void *)(*(void *)(v0 + 40) + 152);
      *(void *)(v0 + 256) = v4;
      uint64_t v5 = swift_task_alloc();
      *(void *)(v0 + 264) = v5;
      *(void *)(v5 + 16) = v3;
      *(void *)(v5 + 24) = v2;
      NSString v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1006606F0 + dword_1006606F0);
      swift_retain();
      uint64_t v6 = (void *)swift_task_alloc();
      *(void *)(v0 + 272) = v6;
      *uint64_t v6 = v0;
      v6[1] = sub_1005403F4;
      id v7 = sub_100548CD0;
LABEL_17:
      uint64_t result = v60((uint64_t)v60, (uint64_t)v7, v5, v4);
      break;
  }
  return result;
}

uint64_t sub_10053FB48()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 184) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 40);
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_100540FB0;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 40);
    uint64_t v4 = sub_10053FC70;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_10053FC70()
{
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 168) + 1;
  sub_100548AF4(*(void *)(v0 + 128), (uint64_t (*)(void))type metadata accessor for AppInstallTaskResult);
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 160);
    uint64_t v6 = *(void *)(v0 + 168) + 1;
    *(void *)(v0 + 168) = v6;
    sub_100548C4C(*(void *)(v0 + 144)+ ((*(unsigned __int8 *)(v0 + 392) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 392))+ v5 * v6, *(void *)(v0 + 128), (uint64_t (*)(void))type metadata accessor for AppInstallTaskResult);
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_10053FB48;
    uint64_t v8 = *(void *)(v0 + 128);
    return sub_10053EEB0(v8);
  }
}

uint64_t sub_10053FE10()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 216) = v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 40);
  if (v0) {
    uint64_t v4 = sub_10053FF7C;
  }
  else {
    uint64_t v4 = sub_100549CEC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10053FF7C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100540034()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 240) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 40);
  if (v0) {
    uint64_t v4 = sub_100541084;
  }
  else {
    uint64_t v4 = sub_100540160;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100540160()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100540218()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  return _swift_task_switch(sub_100540328, v1, 0);
}

uint64_t sub_100540328()
{
  sub_100548AF4(*(void *)(v0 + 104), (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1005403F4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 280) = v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 40);
  if (v0) {
    uint64_t v4 = sub_100540610;
  }
  else {
    uint64_t v4 = sub_100540560;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100540560()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100540610()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1005406C8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 312) = v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 40);
  if (v0) {
    uint64_t v4 = sub_100540834;
  }
  else {
    uint64_t v4 = sub_100549CEC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100540834()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1005408EC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  return _swift_task_switch(sub_100549CEC, v1, 0);
}

uint64_t sub_1005409FC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 360) = v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 40);
  if (v0) {
    uint64_t v4 = sub_100540DC4;
  }
  else {
    uint64_t v4 = sub_100540B68;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100540B68()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 368) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100540BFC;
  return sub_1005330C4(7);
}

uint64_t sub_100540BFC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  return _swift_task_switch(sub_100540D0C, v1, 0);
}

uint64_t sub_100540D0C()
{
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100540DC4()
{
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100540E84()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 384) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 40);
  if (v0) {
    uint64_t v4 = sub_100541144;
  }
  else {
    uint64_t v4 = sub_100549CEC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100540FB0()
{
  sub_100548AF4(*(void *)(v0 + 128), (uint64_t (*)(void))type metadata accessor for AppInstallTaskResult);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100541084()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100541144()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1005411FC(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return _swift_task_switch(sub_1005412BC, v1, 0);
}

uint64_t sub_1005412BC()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 24);
  id v3 = [*(id *)(v0 + 16) uniqueIdentifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v4 = *(void *)(v2 + 216);
  *(void *)(swift_task_alloc() + 16) = v1;
  uint64_t v5 = v4 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v4 + 16);
  uint64_t v6 = (os_unfair_lock_s *)(v4 + ((*(unsigned int *)(*(void *)v4 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  sub_100548D70(v5);
  uint64_t v7 = *(void *)(v0 + 48);
  uint64_t v8 = *(void *)(v0 + 24);
  os_unfair_lock_unlock(v6);
  swift_task_dealloc();
  uint64_t v9 = *(void *)(v8 + 152);
  *(void *)(v0 + 56) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 64) = v10;
  *(void *)(v10 + 16) = v8;
  *(void *)(v10 + 24) = v7;
  long long v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1006606F0 + dword_1006606F0);
  swift_retain();
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_100541498;
  return v13((uint64_t)v13, (uint64_t)sub_100548D8C, v10, v9);
}

uint64_t sub_100541498()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 80) = v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 24);
  if (v0) {
    uint64_t v4 = sub_1005416C0;
  }
  else {
    uint64_t v4 = sub_100541604;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100541604()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  uint64_t v4 = (void *)v0[2];
  id v5 = *(id *)(*(void *)(*(void *)(v0[3] + 160) + 192) + 24);
  sub_10033FD14(v4);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1005416C0()
{
  (*(void (**)(void, void))(v0[5] + 8))(v0[6], v0[4]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100541740()
{
  *(void *)(v1 + 16) = v0;
  sub_1000172F8(&qword_10065B220);
  *(void *)(v1 + 24) = swift_task_alloc();
  return _swift_task_switch(sub_1005417D4, v0, 0);
}

uint64_t sub_1005417D4()
{
  uint64_t v1 = *(void *)(v0[2] + 152);
  v0[4] = v1;
  id v5 = (char *)&dword_100660720 + dword_100660720;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[5] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1005418AC;
  uint64_t v3 = v0[2];
  return ((uint64_t (*)(uint64_t (*)@<X0>(unsigned char *@<X8>), uint64_t, uint64_t))v5)(sub_100548F58, v3, v1);
}

uint64_t sub_1005418AC(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  swift_release();
  if (v1)
  {
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    uint64_t v8 = *(void *)(v4 + 16);
    *(unsigned char *)(v4 + 48) = a1;
    return _swift_task_switch(sub_100541A28, v8, 0);
  }
}

uint64_t sub_100541A28()
{
  switch(*(unsigned char *)(v0 + 48))
  {
    case 6:
      swift_bridgeObjectRelease();
      break;
    case 8:
      goto LABEL_4;
    default:
      char v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v1 & 1) == 0)
      {
LABEL_4:
        uint64_t v2 = *(void *)(v0 + 16);
        uint64_t v3 = *(void *)(v0 + 24);
        uint64_t v4 = type metadata accessor for TaskPriority();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
        uint64_t v5 = sub_100549060(&qword_100666C00, (void (*)(uint64_t))type metadata accessor for AppInstallEngine);
        uint64_t v6 = (void *)swift_allocObject();
        v6[2] = v2;
        v6[3] = v5;
        void v6[4] = v2;
        swift_retain_n();
        sub_100017544(v3, (uint64_t)&unk_100666C50, (uint64_t)v6);
        swift_release();
      }
      break;
  }
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

void sub_100541C7C(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  type metadata accessor for AppPackageEntity.Entity();
  id v7 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v8 = v6;
  id v9 = [v7 initWithPersistentID:a2 onConnection:v8];
  LOBYTE(v7) = [v9 existsInDatabase];

  if (v7)
  {
    void v13[4] = &protocol witness table for UInt64;
    v13[5] = &protocol witness table for UInt64;
    v13[3] = &type metadata for UInt64;
    v13[0] = a3;
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    id v10 = v9;
    JSONEncoder.init()();
    SQLiteEncodeValue(_:using:)(v13, v14);
    swift_release();
    sub_100014524((uint64_t)v13);
    if (v3)
    {
      swift_unexpectedError();
      __break(1u);
    }
    else
    {
      sub_10018AC60(v14, v14[3]);
      uint64_t v11 = _bridgeAnythingToObjectiveC<A>(_:)();
      sub_100014524((uint64_t)v14);
      NSString v12 = String._bridgeToObjectiveC()();
      objc_msgSend(v10, "setValue:forProperty:", v11, v12, v13[0]);

      swift_unknownObjectRelease();
    }
  }
  else
  {
  }
}

void sub_100541E38(void **a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  type metadata accessor for AppPackageEntity.Entity();
  id v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v6 = v4;
  id v7 = [v5 initWithPersistentID:a2 onConnection:v6];
  LOBYTE(v5) = [v7 existsInDatabase];

  if (v5)
  {
    v11[3] = &type metadata for Bool;
    void v11[4] = &protocol witness table for Bool;
    v11[5] = &protocol witness table for Bool;
    LOBYTE(v11[0]) = 1;
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    id v8 = v7;
    JSONEncoder.init()();
    SQLiteEncodeValue(_:using:)(v11, v12);
    swift_release();
    sub_100014524((uint64_t)v11);
    if (v2)
    {
      swift_unexpectedError();
      __break(1u);
    }
    else
    {
      sub_10018AC60(v12, v12[3]);
      uint64_t v9 = _bridgeAnythingToObjectiveC<A>(_:)();
      sub_100014524((uint64_t)v12);
      NSString v10 = String._bridgeToObjectiveC()();
      objc_msgSend(v8, "setValue:forProperty:", v9, v10, v11[0]);

      swift_unknownObjectRelease();
    }
  }
  else
  {
  }
}

uint64_t sub_100541FE8(uint64_t a1, uint64_t a2)
{
  sub_10001729C(a1, &qword_10065C9B0);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, v4);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
}

void sub_1005420A8(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000172F8(&qword_10065C9B0);
  __chkstk_darwin(v6 - 8);
  id v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a2 + 112);
  NSString v10 = *a1;
  type metadata accessor for AppInstallEntity.Entity();
  id v11 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v12 = v10;
  id v13 = [v11 initWithPersistentID:v9 onConnection:v12];
  LOBYTE(v11) = [v13 existsInDatabase];

  if (v11)
  {
    uint64_t v14 = type metadata accessor for UUID();
    uint64_t v15 = *(void *)(v14 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v8, a3, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v8, 0, 1, v14);
    sub_10024639C((uint64_t)v8, 10, v13);
    sub_10001729C((uint64_t)v8, &qword_10065C9B0);
  }
}

void sub_10054223C(void **a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 112);
  uint64_t v4 = *a1;
  type metadata accessor for AppInstallEntity.Entity();
  id v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v6 = v4;
  id v7 = [v5 initWithPersistentID:v3 onConnection:v6];
  LOBYTE(v5) = [v7 existsInDatabase];

  if (v5)
  {
    swift_getErrorValue();
    id v8 = (void *)sub_10025C9D0(v14[5]);
    v13[3] = &type metadata for AnyError;
    void v13[4] = sub_10024A58C();
    v13[5] = sub_100548F04();
    v13[0] = v8;
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    id v9 = v7;
    id v10 = v8;
    JSONEncoder.init()();
    SQLiteEncodeValue(_:using:)(v13, v14);
    swift_release();
    sub_100014524((uint64_t)v13);
    if (v2)
    {
      swift_unexpectedError();
      __break(1u);
    }
    else
    {
      sub_10018AC60(v14, v14[3]);
      uint64_t v11 = _bridgeAnythingToObjectiveC<A>(_:)();
      sub_100014524((uint64_t)v14);
      NSString v12 = String._bridgeToObjectiveC()();
      [v9 setValue:v11 forProperty:v12];

      swift_unknownObjectRelease();
    }
  }
  else
  {
  }
}

uint64_t sub_100542424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  v4[3] = type metadata accessor for AppInstallScheduler.ParkReason();
  v4[4] = swift_task_alloc();
  id v5 = (void *)swift_task_alloc();
  v4[5] = v5;
  *id v5 = v4;
  v5[1] = sub_1005424E8;
  return sub_1005427F0();
}

uint64_t sub_1005424E8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_task_dealloc();
  return _swift_task_switch(sub_1005425F8, v1, 0);
}

uint64_t sub_1005425F8()
{
  uint64_t v1 = (void *)v0[2];
  sub_10018AC60(v1 + 22, v1[25]);
  uint64_t v2 = v1[14];
  swift_storeEnumTagMultiPayload();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[6] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1005426C4;
  uint64_t v4 = v0[4];
  return sub_10046E7E0(v2, v4);
}

uint64_t sub_1005426C4()
{
  uint64_t v1 = *(void *)(*v0 + 32);
  uint64_t v4 = *v0;
  swift_task_dealloc();
  sub_100548AF4(v1, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

uint64_t sub_1005427F0()
{
  v1[3] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  return _swift_task_switch(sub_1005428B0, v0, 0);
}

uint64_t sub_1005428B0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = sub_100549060(&qword_100666C00, (void (*)(uint64_t))type metadata accessor for AppInstallEngine);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1005429B8;
  uint64_t v4 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v3, v1, v2, 0x2928706F7473, 0xE600000000000000, sub_100549058, v4, (char *)&type metadata for () + 8);
}

uint64_t sub_1005429B8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  return _swift_task_switch(sub_100542AC8, v1, 0);
}

uint64_t sub_100542AC8()
{
  static Logger.install.getter();
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    id v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    if ((swift_task_isCurrentExecutor() & 1) == 0) {
      swift_task_reportUnexpectedExecutor();
    }
    uint64_t v4 = *(void **)(v0[3] + 120);
    v0[2] = v4;
    id v5 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v8 = v4;
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%@] Event loop stopped", v3, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  (*(void (**)(void, void))(v0[5] + 8))(v0[6], v0[4]);
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

void sub_100542CC0(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  type metadata accessor for AppPackageEntity.Entity();
  id v7 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v8 = v6;
  id v9 = [v7 initWithPersistentID:a2 onConnection:v8];
  LOBYTE(v7) = [v9 existsInDatabase];

  if (v7)
  {
    void v13[4] = &protocol witness table for UInt;
    v13[5] = &protocol witness table for UInt;
    v13[3] = &type metadata for UInt;
    v13[0] = a3;
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    id v10 = v9;
    JSONEncoder.init()();
    SQLiteEncodeValue(_:using:)(v13, v14);
    swift_release();
    sub_100014524((uint64_t)v13);
    if (v3)
    {
      swift_unexpectedError();
      __break(1u);
    }
    else
    {
      sub_10018AC60(v14, v14[3]);
      uint64_t v11 = _bridgeAnythingToObjectiveC<A>(_:)();
      sub_100014524((uint64_t)v14);
      NSString v12 = String._bridgeToObjectiveC()();
      objc_msgSend(v10, "setValue:forProperty:", v11, v12, v13[0]);

      swift_unknownObjectRelease();
    }
  }
  else
  {
  }
}

void sub_100542E7C(void **a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 112);
  uint64_t v4 = *a1;
  type metadata accessor for AppInstallEntity.Entity();
  id v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v6 = v4;
  id v7 = [v5 initWithPersistentID:v3 onConnection:v6];
  LOBYTE(v5) = [v7 existsInDatabase];

  if (v5)
  {
    v11[3] = &type metadata for Bool;
    void v11[4] = &protocol witness table for Bool;
    v11[5] = &protocol witness table for Bool;
    LOBYTE(v11[0]) = 1;
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    id v8 = v7;
    JSONEncoder.init()();
    SQLiteEncodeValue(_:using:)(v11, v12);
    swift_release();
    sub_100014524((uint64_t)v11);
    if (v2)
    {
      swift_unexpectedError();
      __break(1u);
    }
    else
    {
      sub_10018AC60(v12, v12[3]);
      uint64_t v9 = _bridgeAnythingToObjectiveC<A>(_:)();
      sub_100014524((uint64_t)v12);
      NSString v10 = String._bridgeToObjectiveC()();
      objc_msgSend(v8, "setValue:forProperty:", v9, v10, v11[0]);

      swift_unknownObjectRelease();
    }
  }
  else
  {
  }
}

uint64_t sub_100543028(uint64_t a1)
{
  v2[14] = a1;
  v2[15] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[16] = v3;
  v2[17] = *(void *)(v3 - 8);
  v2[18] = swift_task_alloc();
  return _swift_task_switch(sub_1005430E8, v1, 0);
}

uint64_t sub_1005430E8()
{
  uint64_t v28 = v0;
  uint64_t v1 = v0[14];
  static Logger.install.getter();
  sub_10024A870(v1, (uint64_t)(v0 + 2));
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v23 = v3;
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412546;
    if ((swift_task_isCurrentExecutor() & 1) == 0) {
      swift_task_reportUnexpectedExecutor();
    }
    uint64_t v20 = v0[17];
    uint64_t v21 = v0[16];
    uint64_t v22 = v0[18];
    id v6 = *(void **)(v0[15] + 120);
    v0[10] = v6;
    id v7 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_release_n();
    *(_WORD *)(v4 + 12) = 2082;
    v0[11] = v0[9];
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v27 = v8;
    v9._countAndFlagsBits = 47;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    v0[12] = v0[8];
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v0[13] = sub_1000143F4(v26, v27, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10024A8CC((uint64_t)(v0 + 2));
    _os_log_impl((void *)&_mh_execute_header, v2, v23, "[%@] Persisting verifier state: %{public}s", (uint8_t *)v4, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v22, v21);
  }
  else
  {
    uint64_t v12 = v0[17];
    uint64_t v11 = v0[18];
    uint64_t v13 = v0[16];
    swift_release_n();
    sub_10024A8CC((uint64_t)(v0 + 2));

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }
  uint64_t v15 = v0[14];
  uint64_t v14 = v0[15];
  uint64_t v16 = *(void *)(v14 + 152);
  v0[19] = v16;
  uint64_t v17 = swift_task_alloc();
  v0[20] = v17;
  *(void *)(v17 + 16) = v14;
  *(void *)(v17 + 24) = v15;
  uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1006606F0 + dword_1006606F0);
  swift_retain();
  uint64_t v18 = (void *)swift_task_alloc();
  v0[21] = v18;
  void *v18 = v0;
  v18[1] = sub_1005434B4;
  return v24((uint64_t)v24, (uint64_t)sub_100548EE8, v17, v16);
}

uint64_t sub_1005434B4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 176) = v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 120);
  if (v0) {
    uint64_t v4 = sub_100543684;
  }
  else {
    uint64_t v4 = sub_100543620;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100543620()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100543684()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1005436E8(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 112);
  uint64_t v5 = *a1;
  type metadata accessor for AppInstallEntity.Entity();
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v7 = v5;
  id v8 = [v6 initWithPersistentID:v4 onConnection:v7];
  unsigned int v9 = [v8 existsInDatabase];

  if (v9)
  {
    uint64_t v10 = sub_10041CE88(v7, v4);
    if (v11)
    {
      uint64_t v12 = v10;
      type metadata accessor for AppPackageEntity.Entity();
      id v13 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      id v14 = v7;
      id v15 = [v13 initWithPersistentID:v12 onConnection:v14];
      LOBYTE(v12) = [v15 existsInDatabase];

      if (v12)
      {
        sub_10024A870(a3, (uint64_t)v16);
        sub_10024673C((uint64_t)v16, 11, v15);
        sub_10001729C((uint64_t)v16, &qword_1006666D0);
      }

      swift_release();
    }
  }
}

uint64_t sub_10054382C()
{
  v1[7] = v0;
  v1[8] = type metadata accessor for AppInstallTaskResult();
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for Logger();
  v1[12] = v2;
  v1[13] = *(void *)(v2 - 8);
  v1[14] = swift_task_alloc();
  v1[15] = swift_task_alloc();
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  uint64_t v3 = sub_1000172F8(&qword_100662518);
  v1[19] = v3;
  v1[20] = *(void *)(v3 - 8);
  v1[21] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for AppInstallEngine.Event(0);
  v1[22] = v4;
  v1[23] = *(void *)(v4 - 8);
  v1[24] = swift_task_alloc();
  sub_1000172F8(&qword_100666BF0);
  v1[25] = swift_task_alloc();
  uint64_t v5 = sub_1000172F8(&qword_100666BF8);
  v1[26] = v5;
  v1[27] = *(void *)(v5 - 8);
  v1[28] = swift_task_alloc();
  return _swift_task_switch(sub_100543AB8, v0, 0);
}

uint64_t sub_100543AB8()
{
  sub_1000172F8(&qword_100666BA8);
  AsyncStream.makeAsyncIterator()();
  uint64_t v1 = sub_100549060(&qword_100666C00, (void (*)(uint64_t))type metadata accessor for AppInstallEngine);
  v0[29] = v1;
  uint64_t v2 = v0[7];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[30] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100543BCC;
  uint64_t v4 = v0[25];
  uint64_t v5 = v0[26];
  return AsyncStream.Iterator.next(isolation:)(v4, v2, v1, v5);
}

uint64_t sub_100543BCC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 56);
  swift_task_dealloc();
  return _swift_task_switch(sub_100543CDC, v1, 0);
}

uint64_t sub_100543CDC()
{
  uint64_t v1 = *(void *)(v0 + 200);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 184) + 48))(v1, 1, *(void *)(v0 + 176)) == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 216) + 8))(*(void *)(v0 + 224), *(void *)(v0 + 208));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else
  {
    sub_100548CEC(v1, *(void *)(v0 + 192), type metadata accessor for AppInstallEngine.Event);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v5 = *(char **)(v0 + 192);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v6 = *(void *)(v0 + 56);
      char v7 = *v5;
      *(unsigned char *)(v0 + 336) = *v5;
      uint64_t v8 = *(void *)(v6 + 152);
      *(void *)(v0 + 248) = v8;
      uint64_t v9 = swift_task_alloc();
      *(void *)(v0 + 256) = v9;
      *(void *)(v9 + 16) = v6;
      *(unsigned char *)(v9 + 24) = v7;
      uint64_t v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100660728 + dword_100660728);
      swift_retain();
      uint64_t v10 = (void *)swift_task_alloc();
      *(void *)(v0 + 264) = v10;
      void *v10 = v0;
      v10[1] = sub_100544150;
      return v25((uint64_t)sub_100548C2C, v9, v8);
    }
    else
    {
      (*(void (**)(void, char *, void))(*(void *)(v0 + 160) + 32))(*(void *)(v0 + 168), v5, *(void *)(v0 + 152));
      static Logger.install.getter();
      swift_retain_n();
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = swift_slowAlloc();
        id v14 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 138412290;
        if ((swift_task_isCurrentExecutor() & 1) == 0) {
          swift_task_reportUnexpectedExecutor();
        }
        id v15 = *(void **)(*(void *)(v0 + 56) + 120);
        *(void *)(v13 + 4) = v15;
        *id v14 = v15;
        id v16 = v15;
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "[%@] Event loop drained", (uint8_t *)v13, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      uint64_t v18 = *(void *)(v0 + 160);
      uint64_t v17 = *(void *)(v0 + 168);
      uint64_t v19 = *(void *)(v0 + 152);
      (*(void (**)(void, void))(*(void *)(v0 + 104) + 8))(*(void *)(v0 + 144), *(void *)(v0 + 96));
      CheckedContinuation.resume(returning:)();
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
      uint64_t v20 = *(void *)(v0 + 232);
      uint64_t v21 = *(void *)(v0 + 56);
      uint64_t v22 = (void *)swift_task_alloc();
      *(void *)(v0 + 240) = v22;
      *uint64_t v22 = v0;
      v22[1] = sub_100543BCC;
      uint64_t v23 = *(void *)(v0 + 200);
      uint64_t v24 = *(void *)(v0 + 208);
      return AsyncStream.Iterator.next(isolation:)(v23, v21, v20, v24);
    }
  }
}

uint64_t sub_100544150(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 272) = a1;
  *(void *)(v4 + 280) = v1;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 56);
  if (v1) {
    uint64_t v6 = sub_100544EAC;
  }
  else {
    uint64_t v6 = sub_1005442C4;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1005442C4()
{
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[36] = v1;
  uint64_t v2 = sub_1000172F8(&qword_10065B260);
  *uint64_t v1 = v0;
  v1[1] = sub_100544388;
  uint64_t v3 = v0[34];
  uint64_t v4 = v0[11];
  uint64_t v5 = v0[8];
  return Task.value.getter(v4, v3, v5, v2, &protocol self-conformance witness table for Error);
}

uint64_t sub_100544388()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 296) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 56);
    swift_release();
    uint64_t v4 = sub_100545554;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 56);
    uint64_t v4 = sub_1005444B0;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_1005444B0()
{
  char isCancelled = swift_task_isCancelled();
  swift_release();
  if (isCancelled)
  {
    static Logger.install.getter();
    swift_retain_n();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = swift_slowAlloc();
      uint64_t v5 = (void *)swift_slowAlloc();
      *(void *)(v0 + 48) = swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 138412546;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      unint64_t v6 = 0x656C626D61657270;
      uint64_t v7 = *(unsigned __int8 *)(v0 + 336);
      uint64_t v8 = *(void **)(*(void *)(v0 + 56) + 120);
      *(void *)(v4 + 4) = v8;
      *uint64_t v5 = v8;
      id v9 = v8;
      swift_release_n();
      *(_WORD *)(v4 + 12) = 2082;
      unint64_t v10 = 0xE800000000000000;
      switch(v7)
      {
        case 1:
          unint64_t v6 = 0x64616F6C6E776F64;
          break;
        case 2:
          unint64_t v10 = 0xE700000000000000;
          unint64_t v6 = 0x6C6C6174736E69;
          break;
        case 3:
          unint64_t v6 = 0x6C626D6174736F70;
          unint64_t v10 = 0xE900000000000065;
          break;
        case 4:
          unint64_t v6 = 0x656C6C65636E6163;
          unint64_t v10 = 0xE900000000000064;
          break;
        case 5:
          unint64_t v10 = 0xE600000000000000;
          uint64_t v31 = 1937072496;
          goto LABEL_20;
        case 6:
          unint64_t v6 = 0x64656873696E6966;
          break;
        case 7:
          unint64_t v10 = 0xE600000000000000;
          uint64_t v31 = 1818845542;
LABEL_20:
          unint64_t v6 = v31 & 0xFFFF0000FFFFFFFFLL | 0x646500000000;
          break;
        default:
          break;
      }
      uint64_t v32 = *(void *)(v0 + 104);
      uint64_t v46 = *(void *)(v0 + 96);
      uint64_t v47 = *(void *)(v0 + 128);
      uint64_t v49 = *(void *)(v0 + 88);
      *(void *)(v4 + 14) = sub_1000143F4(v6, v10, (uint64_t *)(v0 + 48));
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%@] Phase '%{public}s' cancelled", (uint8_t *)v4, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v47, v46);
      uint64_t v26 = v49;
    }
    else
    {
      uint64_t v22 = *(void *)(v0 + 128);
      uint64_t v23 = *(void *)(v0 + 96);
      uint64_t v24 = *(void *)(v0 + 104);
      uint64_t v25 = *(void *)(v0 + 88);
      swift_release();

      swift_release_n();
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
      uint64_t v26 = v25;
    }
    sub_100548AF4(v26, (uint64_t (*)(void))type metadata accessor for AppInstallTaskResult);
    uint64_t v33 = *(void *)(v0 + 232);
    uint64_t v34 = *(void *)(v0 + 56);
    uint64_t v35 = (void *)swift_task_alloc();
    *(void *)(v0 + 240) = v35;
    *uint64_t v35 = v0;
    v35[1] = sub_100543BCC;
    uint64_t v36 = *(void *)(v0 + 200);
    uint64_t v37 = *(void *)(v0 + 208);
    return AsyncStream.Iterator.next(isolation:)(v36, v34, v33, v37);
  }
  else
  {
    uint64_t v12 = *(void *)(v0 + 80);
    uint64_t v11 = *(void *)(v0 + 88);
    static Logger.install.getter();
    sub_100548C4C(v11, v12, (uint64_t (*)(void))type metadata accessor for AppInstallTaskResult);
    swift_retain_n();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v51 = (uint64_t *)(v0 + 40);
      uint64_t v15 = swift_slowAlloc();
      id v16 = (void *)swift_slowAlloc();
      *(void *)(v0 + 40) = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 138412802;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      unint64_t v17 = 0x656C626D61657270;
      uint64_t v18 = *(unsigned __int8 *)(v0 + 336);
      uint64_t v19 = *(void **)(*(void *)(v0 + 56) + 120);
      *(void *)(v15 + 4) = v19;
      *id v16 = v19;
      id v20 = v19;
      swift_release_n();
      *(_WORD *)(v15 + 12) = 2082;
      unint64_t v21 = 0xE800000000000000;
      switch(v18)
      {
        case 1:
          unint64_t v17 = 0x64616F6C6E776F64;
          break;
        case 2:
          unint64_t v21 = 0xE700000000000000;
          unint64_t v17 = 0x6C6C6174736E69;
          break;
        case 3:
          unint64_t v17 = 0x6C626D6174736F70;
          unint64_t v21 = 0xE900000000000065;
          break;
        case 4:
          unint64_t v17 = 0x656C6C65636E6163;
          unint64_t v21 = 0xE900000000000064;
          break;
        case 5:
          unint64_t v21 = 0xE600000000000000;
          uint64_t v38 = 1937072496;
          goto LABEL_31;
        case 6:
          unint64_t v17 = 0x64656873696E6966;
          break;
        case 7:
          unint64_t v21 = 0xE600000000000000;
          uint64_t v38 = 1818845542;
LABEL_31:
          unint64_t v17 = v38 & 0xFFFF0000FFFFFFFFLL | 0x646500000000;
          break;
        default:
          break;
      }
      uint64_t v39 = *(void *)(v0 + 104);
      uint64_t v48 = *(void *)(v0 + 96);
      uint64_t v50 = *(void *)(v0 + 136);
      uint64_t v40 = *(void *)(v0 + 80);
      *(void *)(v15 + 14) = sub_1000143F4(v17, v21, v51);
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 22) = 2082;
      uint64_t v41 = sub_1004F46E4();
      *(void *)(v15 + 24) = sub_1000143F4(v41, v42, v51);
      swift_bridgeObjectRelease();
      sub_100548AF4(v40, (uint64_t (*)(void))type metadata accessor for AppInstallTaskResult);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "[%@] Phase '%{public}s' completed with result: %{public}s", (uint8_t *)v15, 0x20u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v50, v48);
    }
    else
    {
      uint64_t v27 = *(void *)(v0 + 136);
      uint64_t v28 = *(void *)(v0 + 96);
      uint64_t v29 = *(void *)(v0 + 104);
      uint64_t v30 = *(void *)(v0 + 80);
      swift_release_n();
      sub_100548AF4(v30, (uint64_t (*)(void))type metadata accessor for AppInstallTaskResult);

      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
    }
    uint64_t v43 = (void *)swift_task_alloc();
    *(void *)(v0 + 304) = v43;
    *uint64_t v43 = v0;
    v43[1] = sub_100544CA4;
    uint64_t v44 = *(void *)(v0 + 88);
    return sub_10053EEB0(v44);
  }
}

uint64_t sub_100544CA4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 312) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 56);
  if (v0) {
    uint64_t v4 = sub_100545B30;
  }
  else {
    uint64_t v4 = sub_100544DD0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100544DD0()
{
  uint64_t v1 = v0[11];
  swift_release();
  sub_100548AF4(v1, (uint64_t (*)(void))type metadata accessor for AppInstallTaskResult);
  uint64_t v2 = v0[29];
  uint64_t v3 = v0[7];
  uint64_t v4 = (void *)swift_task_alloc();
  v0[30] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100543BCC;
  uint64_t v5 = v0[25];
  uint64_t v6 = v0[26];
  return AsyncStream.Iterator.next(isolation:)(v5, v3, v2, v6);
}

uint64_t sub_100544EAC()
{
  *(void *)(v0 + 16) = *(void *)(v0 + 280);
  swift_errorRetain();
  sub_1000172F8(&qword_10065B260);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
  }
  else
  {
    static Logger.install.getter();
    swift_retain();
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = swift_slowAlloc();
      uint64_t v4 = (void *)swift_slowAlloc();
      *(void *)(v0 + 24) = swift_slowAlloc();
      *(_DWORD *)uint64_t v3 = 138412802;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v5 = *(unsigned __int8 *)(v0 + 336);
      uint64_t v6 = *(void **)(*(void *)(v0 + 56) + 120);
      *(void *)(v3 + 4) = v6;
      *uint64_t v4 = v6;
      id v7 = v6;
      swift_release_n();
      *(_WORD *)(v3 + 12) = 2082;
      unint64_t v8 = 0xE800000000000000;
      unint64_t v9 = 0x656C626D61657270;
      switch(v5)
      {
        case 1:
          unint64_t v9 = 0x64616F6C6E776F64;
          break;
        case 2:
          unint64_t v8 = 0xE700000000000000;
          unint64_t v9 = 0x6C6C6174736E69;
          break;
        case 3:
          unint64_t v8 = 0xE900000000000065;
          unint64_t v9 = 0x6C626D6174736F70;
          break;
        case 4:
          unint64_t v9 = 0x656C6C65636E6163;
          unint64_t v8 = 0xE900000000000064;
          break;
        case 5:
          unint64_t v8 = 0xE600000000000000;
          uint64_t v13 = 1937072496;
          goto LABEL_15;
        case 6:
          unint64_t v9 = 0x64656873696E6966;
          break;
        case 7:
          unint64_t v8 = 0xE600000000000000;
          uint64_t v13 = 1818845542;
LABEL_15:
          unint64_t v9 = v13 & 0xFFFF0000FFFFFFFFLL | 0x646500000000;
          break;
        default:
          break;
      }
      uint64_t v23 = *(void *)(v0 + 120);
      uint64_t v15 = *(void *)(v0 + 96);
      uint64_t v14 = *(void *)(v0 + 104);
      *(void *)(v3 + 14) = sub_1000143F4(v9, v8, (uint64_t *)(v0 + 24));
      swift_bridgeObjectRelease();
      *(_WORD *)(v3 + 22) = 2114;
      swift_errorRetain();
      uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v3 + 24) = v16;
      v4[1] = v16;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%@] Phase '%{public}s' transition failed: %{public}@", (uint8_t *)v3, 0x20u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v23, v15);
    }
    else
    {
      uint64_t v10 = *(void *)(v0 + 120);
      uint64_t v11 = *(void *)(v0 + 96);
      uint64_t v12 = *(void *)(v0 + 104);
      swift_errorRelease();
      swift_release_n();
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    }
  }
  uint64_t v17 = *(void *)(v0 + 232);
  uint64_t v18 = *(void *)(v0 + 56);
  uint64_t v19 = (void *)swift_task_alloc();
  *(void *)(v0 + 240) = v19;
  *uint64_t v19 = v0;
  v19[1] = sub_100543BCC;
  uint64_t v20 = *(void *)(v0 + 200);
  uint64_t v21 = *(void *)(v0 + 208);
  return AsyncStream.Iterator.next(isolation:)(v20, v18, v17, v21);
}

uint64_t sub_100545308()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 72);
  uint64_t v4 = *(void *)(v2 + 56);
  if (v0)
  {
    swift_errorRelease();
    sub_100548AF4(v3, (uint64_t (*)(void))type metadata accessor for AppInstallTaskResult);
    uint64_t v5 = sub_100549D0C;
  }
  else
  {
    sub_100548AF4(v3, (uint64_t (*)(void))type metadata accessor for AppInstallTaskResult);
    uint64_t v5 = sub_10054548C;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_10054548C()
{
  swift_release();
  swift_errorRelease();
  uint64_t v1 = v0[29];
  uint64_t v2 = v0[7];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[30] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100543BCC;
  uint64_t v4 = v0[25];
  uint64_t v5 = v0[26];
  return AsyncStream.Iterator.next(isolation:)(v4, v2, v1, v5);
}

uint64_t sub_100545554()
{
  uint64_t v1 = *(void *)(v0 + 296);
  *(void *)(v0 + 320) = v1;
  static Logger.install.getter();
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(void *)(v0 + 32) = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412802;
    if ((swift_task_isCurrentExecutor() & 1) == 0) {
      swift_task_reportUnexpectedExecutor();
    }
    uint64_t v6 = *(unsigned __int8 *)(v0 + 336);
    uint64_t v7 = *(void **)(*(void *)(v0 + 56) + 120);
    *(void *)(v4 + 4) = v7;
    *uint64_t v5 = v7;
    id v8 = v7;
    swift_release_n();
    *(_WORD *)(v4 + 12) = 2082;
    unint64_t v9 = 0xE800000000000000;
    unint64_t v10 = 0x656C626D61657270;
    switch(v6)
    {
      case 1:
        unint64_t v10 = 0x64616F6C6E776F64;
        break;
      case 2:
        unint64_t v9 = 0xE700000000000000;
        unint64_t v10 = 0x6C6C6174736E69;
        break;
      case 3:
        unint64_t v10 = 0x6C626D6174736F70;
        unint64_t v9 = 0xE900000000000065;
        break;
      case 4:
        unint64_t v10 = 0x656C6C65636E6163;
        unint64_t v9 = 0xE900000000000064;
        break;
      case 5:
        unint64_t v9 = 0xE600000000000000;
        uint64_t v14 = 1937072496;
        goto LABEL_13;
      case 6:
        unint64_t v10 = 0x64656873696E6966;
        break;
      case 7:
        unint64_t v9 = 0xE600000000000000;
        uint64_t v14 = 1818845542;
LABEL_13:
        unint64_t v10 = v14 & 0xFFFF0000FFFFFFFFLL | 0x646500000000;
        break;
      default:
        break;
    }
    uint64_t v15 = *(void *)(v0 + 104);
    uint64_t v27 = *(void *)(v0 + 112);
    uint64_t v16 = *(void *)(v0 + 96);
    *(void *)(v4 + 14) = sub_1000143F4(v10, v9, (uint64_t *)(v0 + 32));
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 22) = 2114;
    swift_errorRetain();
    uint64_t v17 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v4 + 24) = v17;
    v5[1] = v17;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%@] Phase '%{public}s' failed with error: %{public}@", (uint8_t *)v4, 0x20u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v27, v16);
  }
  else
  {
    uint64_t v12 = *(void *)(v0 + 104);
    uint64_t v11 = *(void *)(v0 + 112);
    uint64_t v13 = *(void *)(v0 + 96);
    swift_release_n();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }
  switch(*(unsigned char *)(v0 + 336))
  {
    case 7:
      swift_bridgeObjectRelease();
      goto LABEL_18;
    default:
      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v18)
      {
LABEL_18:
        swift_release();
        swift_errorRelease();
        uint64_t v19 = *(void *)(v0 + 232);
        uint64_t v20 = *(void *)(v0 + 56);
        uint64_t v21 = (void *)swift_task_alloc();
        *(void *)(v0 + 240) = v21;
        *uint64_t v21 = v0;
        v21[1] = sub_100543BCC;
        uint64_t v22 = *(void *)(v0 + 200);
        uint64_t v23 = *(void *)(v0 + 208);
        return AsyncStream.Iterator.next(isolation:)(v22, v20, v19, v23);
      }
      else
      {
        **(void **)(v0 + 72) = v1;
        swift_storeEnumTagMultiPayload();
        swift_errorRetain();
        uint64_t v24 = (void *)swift_task_alloc();
        *(void *)(v0 + 328) = v24;
        *uint64_t v24 = v0;
        v24[1] = sub_100545308;
        uint64_t v25 = *(void *)(v0 + 72);
        return sub_10053EEB0(v25);
      }
  }
}

uint64_t sub_100545B30()
{
  sub_100548AF4(*(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for AppInstallTaskResult);
  uint64_t v1 = *(void *)(v0 + 312);
  *(void *)(v0 + 320) = v1;
  static Logger.install.getter();
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(void *)(v0 + 32) = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412802;
    if ((swift_task_isCurrentExecutor() & 1) == 0) {
      swift_task_reportUnexpectedExecutor();
    }
    uint64_t v6 = *(unsigned __int8 *)(v0 + 336);
    uint64_t v7 = *(void **)(*(void *)(v0 + 56) + 120);
    *(void *)(v4 + 4) = v7;
    *uint64_t v5 = v7;
    id v8 = v7;
    swift_release_n();
    *(_WORD *)(v4 + 12) = 2082;
    unint64_t v9 = 0xE800000000000000;
    unint64_t v10 = 0x656C626D61657270;
    switch(v6)
    {
      case 1:
        unint64_t v10 = 0x64616F6C6E776F64;
        break;
      case 2:
        unint64_t v9 = 0xE700000000000000;
        unint64_t v10 = 0x6C6C6174736E69;
        break;
      case 3:
        unint64_t v10 = 0x6C626D6174736F70;
        unint64_t v9 = 0xE900000000000065;
        break;
      case 4:
        unint64_t v10 = 0x656C6C65636E6163;
        unint64_t v9 = 0xE900000000000064;
        break;
      case 5:
        unint64_t v9 = 0xE600000000000000;
        uint64_t v14 = 1937072496;
        goto LABEL_13;
      case 6:
        unint64_t v10 = 0x64656873696E6966;
        break;
      case 7:
        unint64_t v9 = 0xE600000000000000;
        uint64_t v14 = 1818845542;
LABEL_13:
        unint64_t v10 = v14 & 0xFFFF0000FFFFFFFFLL | 0x646500000000;
        break;
      default:
        break;
    }
    uint64_t v15 = *(void *)(v0 + 104);
    uint64_t v27 = *(void *)(v0 + 112);
    uint64_t v16 = *(void *)(v0 + 96);
    *(void *)(v4 + 14) = sub_1000143F4(v10, v9, (uint64_t *)(v0 + 32));
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 22) = 2114;
    swift_errorRetain();
    uint64_t v17 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v4 + 24) = v17;
    v5[1] = v17;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%@] Phase '%{public}s' failed with error: %{public}@", (uint8_t *)v4, 0x20u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v27, v16);
  }
  else
  {
    uint64_t v12 = *(void *)(v0 + 104);
    uint64_t v11 = *(void *)(v0 + 112);
    uint64_t v13 = *(void *)(v0 + 96);
    swift_release_n();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }
  switch(*(unsigned char *)(v0 + 336))
  {
    case 7:
      swift_bridgeObjectRelease();
      goto LABEL_18;
    default:
      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v18)
      {
LABEL_18:
        swift_release();
        swift_errorRelease();
        uint64_t v19 = *(void *)(v0 + 232);
        uint64_t v20 = *(void *)(v0 + 56);
        uint64_t v21 = (void *)swift_task_alloc();
        *(void *)(v0 + 240) = v21;
        *uint64_t v21 = v0;
        v21[1] = sub_100543BCC;
        uint64_t v22 = *(void *)(v0 + 200);
        uint64_t v23 = *(void *)(v0 + 208);
        return AsyncStream.Iterator.next(isolation:)(v22, v20, v19, v23);
      }
      else
      {
        **(void **)(v0 + 72) = v1;
        swift_storeEnumTagMultiPayload();
        swift_errorRetain();
        uint64_t v24 = (void *)swift_task_alloc();
        *(void *)(v0 + 328) = v24;
        *uint64_t v24 = v0;
        v24[1] = sub_100545308;
        uint64_t v25 = *(void *)(v0 + 72);
        return sub_10053EEB0(v25);
      }
  }
}

void sub_100546128(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v24 = *(void *)(v4 - 8);
  uint64_t v25 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AppInstallEngine.Event(0);
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1000172F8(&qword_100666BC0);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((swift_task_isCurrentExecutor() & 1) == 0) {
    swift_task_reportUnexpectedExecutor();
  }
  uint64_t v14 = a2 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon16AppInstallEngine_eventContinuation;
  uint64_t v15 = sub_1000172F8(&qword_100662518);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v9, a1, v15);
  swift_storeEnumTagMultiPayload();
  sub_1000172F8(&qword_100666BB0);
  AsyncStream.Continuation.yield(_:)();
  if ((*(unsigned int (**)(char *, uint64_t))(v11 + 88))(v13, v10) == enum case for AsyncStream.Continuation.YieldResult.enqueued<A>(_:))
  {
    uint64_t v23 = v14;
    static Logger.install.getter();
    swift_retain_n();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      char v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = (void *)swift_slowAlloc();
      *(_DWORD *)char v18 = 138412290;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v19 = *(void **)(a2 + 120);
      uint64_t v26 = v19;
      id v20 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v22 = v19;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "[%@] Stopping event loop", v18, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v25);
    AsyncStream.Continuation.finish()();
  }
  else
  {
    CheckedContinuation.resume(returning:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
}

void sub_100546530(void **a1@<X0>, void *a2@<X1>, NSObject *a3@<X2>, void *a4@<X8>)
{
  os_log_t v95 = a3;
  long long v92 = a4;
  uint64_t v104 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v104 - 8);
  uint64_t v8 = __chkstk_darwin(v104);
  uint64_t v10 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v91 = (char *)&v86 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v93 = (char *)&v86 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v86 - v15;
  uint64_t v17 = a2[14];
  char v18 = *a1;
  type metadata accessor for AppInstallEntity.Entity();
  id v19 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v20 = v18;
  id v21 = [v19 initWithPersistentID:v17 onConnection:v20];
  LOBYTE(v17) = [v21 existsInDatabase];

  if (v17)
  {
    uint64_t v90 = a2;
    uint64_t v22 = (char *)v21;
    NSString v23 = String._bridgeToObjectiveC()();
    id v24 = [v22 valueForProperty:v23];

    if (v24)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v99 = 0u;
      long long v100 = 0u;
    }
    uint64_t v34 = v90;
    sub_100017238((uint64_t)&v99, (uint64_t)&v96, (uint64_t *)&unk_10065C9C0);
    uint64_t v94 = v7;
    if (*((void *)&v97 + 1))
    {
      sub_1001C5DD4(&v96, v103);
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      unsigned __int8 v35 = sub_100242F64(v103);
      if (v4)
      {
        swift_release();
        swift_unexpectedError();
        __break(1u);
        swift_release();
        sub_100014524((uint64_t)&v99);
        swift_unexpectedError();
        __break(1u);
        os_unfair_lock_unlock(v4);
        __break(1u);
        JUMPOUT(0x1005475F0);
      }
      unsigned __int8 v36 = v35;
      swift_release();
      sub_100014524((uint64_t)v103);
      sub_10001729C((uint64_t)&v99, (uint64_t *)&unk_10065C9C0);

      unsigned __int8 v37 = v95;
      if (sub_10051E8F0(v36, (char)v95))
      {
        *((void *)&v100 + 1) = &type metadata for AppInstallPhase;
        unint64_t v101 = sub_1001CDA60();
        unint64_t v102 = sub_1001CDAB4();
        LOBYTE(v99) = v37;
        type metadata accessor for JSONEncoder();
        swift_allocObject();
        uint64_t v22 = v22;
        JSONEncoder.init()();
        SQLiteEncodeValue(_:using:)(&v99, (uint64_t *)&v96);
        swift_release();
        sub_100014524((uint64_t)&v99);
        sub_10018AC60(&v96, *((uint64_t *)&v97 + 1));
        uint64_t v38 = _bridgeAnythingToObjectiveC<A>(_:)();
        sub_100014524((uint64_t)&v96);
        NSString v39 = String._bridgeToObjectiveC()();
        [v22 setValue:v38 forProperty:v39];

        swift_unknownObjectRelease();
        uint64_t v40 = sub_100547670(v37, v34[21]);
        if (v40)
        {
          uint64_t v42 = v40;
          uint64_t v43 = v41;
          uint64_t v44 = v34[20];
          uint64_t v45 = v34[16];
          id v86 = (id)v34[15];
          uint64_t v93 = 0;
          uint64_t v46 = v22;
          uint64_t v47 = v34[17];
          uint64_t v88 = v34[18];
          unint64_t v89 = *(void (**)(char *, id, uint64_t, id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 16);
          *((void *)&v97 + 1) = v40;
          uint64_t v98 = v41;
          uint64_t v87 = sub_10019CE94((uint64_t *)&v96);
          uint64_t v48 = v46;
          swift_retain();
          id v49 = v86;
          swift_bridgeObjectRetain();
          swift_unknownObjectRetain();
          uint64_t v85 = v43;
          uint64_t v50 = v49;
          id v51 = v49;
          uint64_t v52 = v93;
          v89(v48, v20, v44, v51, v45, v47, v88, v42, v85);
          if (v52)
          {

            sub_100254EB8((uint64_t)&v96);
          }
          else
          {
            uint64_t v93 = v48;
            sub_10018B164(&v96, (uint64_t)&v99);
            NSString v68 = v91;
            static Logger.install.getter();
            swift_retain_n();
            id v69 = Logger.logObject.getter();
            int v70 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v69, (os_log_type_t)v70))
            {
              uint64_t v87 = (uint64_t *)v69;
              LODWORD(v88) = v70;
              uint64_t v71 = swift_slowAlloc();
              id v72 = (void *)swift_slowAlloc();
              unint64_t v89 = (void (*)(char *, id, uint64_t, id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))swift_slowAlloc();
              *(void *)&long long v96 = v89;
              *(_DWORD *)uint64_t v71 = 138412546;
              *(void *)&v103[0] = v50;
              id v73 = v50;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *id v72 = v50;
              swift_release_n();
              *(_WORD *)(v71 + 12) = 2082;
              unint64_t v74 = 0xE800000000000000;
              uint64_t v75 = v94;
              uint64_t v76 = v87;
              uint64_t v77 = 0x656C626D61657270;
              switch((char)v95)
              {
                case 1:
                  uint64_t v77 = 0x64616F6C6E776F64;
                  break;
                case 2:
                  unint64_t v74 = 0xE700000000000000;
                  uint64_t v77 = 0x6C6C6174736E69;
                  break;
                case 3:
                  uint64_t v77 = 0x6C626D6174736F70;
                  unint64_t v74 = 0xE900000000000065;
                  break;
                case 4:
                  uint64_t v77 = 0x656C6C65636E6163;
                  unint64_t v74 = 0xE900000000000064;
                  break;
                case 5:
                  unint64_t v74 = 0xE600000000000000;
                  uint64_t v77 = 0x646573756170;
                  break;
                case 6:
                  uint64_t v77 = 0x64656873696E6966;
                  break;
                case 7:
                  unint64_t v74 = 0xE600000000000000;
                  uint64_t v77 = 0x64656C696166;
                  break;
                default:
                  break;
              }
              *(void *)&v103[0] = sub_1000143F4(v77, v74, (uint64_t *)&v96);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v76, (os_log_type_t)v88, "[%@] Phase '%{public}s' starting", (uint8_t *)v71, 0x16u);
              sub_1000172F8(&qword_10065DB10);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              uint64_t v80 = (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v68, v104);
            }
            else
            {

              swift_release_n();
              uint64_t v80 = (*(uint64_t (**)(char *, uint64_t))(v94 + 8))(v68, v104);
            }
            __chkstk_darwin(v80);
            uint64_t v82 = v81 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v81 + 16);
            uint64_t v83 = (os_unfair_lock_s *)(v81 + ((*(unsigned int *)(*(void *)v81 + 48) + 3) & 0x1FFFFFFFCLL));
            os_unfair_lock_lock(v83);
            sub_1005490FC(v82, (uint64_t *)&v96);
            os_unfair_lock_unlock(v83);
            uint64_t v84 = v96;

            *long long v92 = v84;
            sub_100014524((uint64_t)&v99);
          }
          return;
        }
        uint64_t v98 = 0;
        long long v96 = 0u;
        long long v97 = 0u;
        sub_10001729C((uint64_t)&v96, &qword_100666C68);
        uint64_t v62 = v93;
        static Logger.install.getter();
        uint64_t v63 = Logger.logObject.getter();
        os_log_type_t v64 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v63, v64))
        {
          uint64_t v65 = 0x656C626D61657270;
          int v66 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v99 = swift_slowAlloc();
          *(_DWORD *)int v66 = 136315138;
          unint64_t v67 = 0xE800000000000000;
          switch(v37)
          {
            case 1u:
              uint64_t v65 = 0x64616F6C6E776F64;
              break;
            case 2u:
              unint64_t v67 = 0xE700000000000000;
              uint64_t v65 = 0x6C6C6174736E69;
              break;
            case 3u:
              uint64_t v65 = 0x6C626D6174736F70;
              unint64_t v67 = 0xE900000000000065;
              break;
            case 4u:
              uint64_t v65 = 0x656C6C65636E6163;
              unint64_t v67 = 0xE900000000000064;
              break;
            case 5u:
              unint64_t v67 = 0xE600000000000000;
              uint64_t v65 = 0x646573756170;
              break;
            case 6u:
              uint64_t v65 = 0x64656873696E6966;
              break;
            case 7u:
              unint64_t v67 = 0xE600000000000000;
              uint64_t v65 = 0x64656C696166;
              break;
            default:
              break;
          }
          *(void *)&long long v96 = sub_1000143F4(v65, v67, (uint64_t *)&v99);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v63, v64, "Phase '%s' has no corresponding task", v66, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v94 + 8))(v93, v104);
        }
        else
        {

          (*(void (**)(char *, uint64_t))(v94 + 8))(v62, v104);
        }
LABEL_43:
        sub_1005490A8();
        swift_allocError();
        swift_willThrow();

        return;
      }
    }
    else
    {
      sub_10001729C((uint64_t)&v99, (uint64_t *)&unk_10065C9C0);

      unsigned __int8 v37 = v95;
    }
    static Logger.install.getter();
    swift_retain_n();
    uint64_t v53 = Logger.logObject.getter();
    int v54 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v53, (os_log_type_t)v54))
    {
      uint64_t v91 = v22;
      LODWORD(v92) = v54;
      os_log_t v95 = v53;
      uint64_t v55 = swift_slowAlloc();
      uint64_t v56 = (void *)swift_slowAlloc();
      uint64_t v93 = (char *)swift_slowAlloc();
      *(void *)&long long v99 = v93;
      *(_DWORD *)uint64_t v55 = 138412546;
      os_log_type_t v57 = (void *)v34[15];
      *(void *)&long long v96 = v57;
      id v58 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v56 = v57;
      swift_release_n();
      *(_WORD *)(v55 + 12) = 2082;
      unint64_t v59 = 0xE800000000000000;
      os_log_type_t v60 = v92;
      uint64_t v22 = v91;
      uint64_t v61 = 0x656C626D61657270;
      switch(v37)
      {
        case 1u:
          uint64_t v61 = 0x64616F6C6E776F64;
          break;
        case 2u:
          unint64_t v59 = 0xE700000000000000;
          uint64_t v61 = 0x6C6C6174736E69;
          break;
        case 3u:
          uint64_t v61 = 0x6C626D6174736F70;
          unint64_t v59 = 0xE900000000000065;
          break;
        case 4u:
          uint64_t v61 = 0x656C6C65636E6163;
          unint64_t v59 = 0xE900000000000064;
          break;
        case 5u:
          unint64_t v59 = 0xE600000000000000;
          uint64_t v61 = 0x646573756170;
          break;
        case 6u:
          uint64_t v61 = 0x64656873696E6966;
          break;
        case 7u:
          unint64_t v59 = 0xE600000000000000;
          uint64_t v61 = 0x64656C696166;
          break;
        default:
          break;
      }
      *(void *)&long long v96 = sub_1000143F4(v61, v59, (uint64_t *)&v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_log_type_t v78 = v60;
      os_log_t v79 = v95;
      _os_log_impl((void *)&_mh_execute_header, v95, v78, "[%@] Skipping outdated transition to '%{public}s'", (uint8_t *)v55, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    (*(void (**)(char *, uint64_t))(v94 + 8))(v10, v104);
    goto LABEL_43;
  }

  static Logger.install.getter();
  swift_retain_n();
  uint64_t v25 = Logger.logObject.getter();
  int v26 = static os_log_type_t.error.getter();
  uint64_t v27 = a2;
  if (os_log_type_enabled(v25, (os_log_type_t)v26))
  {
    LODWORD(v92) = v26;
    uint64_t v94 = v7;
    uint64_t v28 = swift_slowAlloc();
    uint64_t v29 = (void *)swift_slowAlloc();
    uint64_t v93 = (char *)swift_slowAlloc();
    *(void *)&long long v99 = v93;
    *(_DWORD *)uint64_t v28 = 138412546;
    uint64_t v30 = (void *)v27[15];
    *(void *)&long long v96 = v30;
    id v31 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v29 = v30;
    swift_release_n();
    *(_WORD *)(v28 + 12) = 2082;
    unint64_t v32 = 0xE800000000000000;
    uint64_t v7 = v94;
    uint64_t v33 = 0x656C626D61657270;
    switch((char)v95)
    {
      case 1:
        uint64_t v33 = 0x64616F6C6E776F64;
        break;
      case 2:
        unint64_t v32 = 0xE700000000000000;
        uint64_t v33 = 0x6C6C6174736E69;
        break;
      case 3:
        uint64_t v33 = 0x6C626D6174736F70;
        unint64_t v32 = 0xE900000000000065;
        break;
      case 4:
        uint64_t v33 = 0x656C6C65636E6163;
        unint64_t v32 = 0xE900000000000064;
        break;
      case 5:
        unint64_t v32 = 0xE600000000000000;
        uint64_t v33 = 0x646573756170;
        break;
      case 6:
        uint64_t v33 = 0x64656873696E6966;
        break;
      case 7:
        unint64_t v32 = 0xE600000000000000;
        uint64_t v33 = 0x64656C696166;
        break;
      default:
        break;
    }
    *(void *)&long long v96 = sub_1000143F4(v33, v32, (uint64_t *)&v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v92, "[%@] Installation not found when transitioning to '%{public}s'", (uint8_t *)v28, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v104);
  type metadata accessor for InternalError();
  sub_100549060((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
}

uint64_t sub_100547670(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = a2 + 48;
  uint64_t v6 = a1;
  while (2)
  {
    uint64_t v7 = *(void *)(v5 - 8);
    unint64_t v8 = 0xE800000000000000;
    unint64_t v9 = 0x656C626D61657270;
    switch(*(unsigned char *)(v5 - 16))
    {
      case 1:
        unint64_t v9 = 0x64616F6C6E776F64;
        break;
      case 2:
        unint64_t v8 = 0xE700000000000000;
        unint64_t v9 = 0x6C6C6174736E69;
        break;
      case 3:
        unint64_t v8 = 0xE900000000000065;
        unint64_t v9 = 0x6C626D6174736F70;
        break;
      case 4:
        unint64_t v9 = 0x656C6C65636E6163;
        unint64_t v8 = 0xE900000000000064;
        break;
      case 5:
        unint64_t v8 = 0xE600000000000000;
        uint64_t v10 = 1937072496;
        goto LABEL_11;
      case 6:
        unint64_t v9 = 0x64656873696E6966;
        break;
      case 7:
        unint64_t v8 = 0xE600000000000000;
        uint64_t v10 = 1818845542;
LABEL_11:
        unint64_t v9 = v10 & 0xFFFF0000FFFFFFFFLL | 0x646500000000;
        break;
      default:
        break;
    }
    unint64_t v11 = 0xE800000000000000;
    uint64_t v12 = 0x656C626D61657270;
    switch(v6)
    {
      case 1:
        if (v9 == 0x64616F6C6E776F64) {
          goto LABEL_24;
        }
        goto LABEL_25;
      case 2:
        unint64_t v11 = 0xE700000000000000;
        if (v9 != 0x6C6C6174736E69) {
          goto LABEL_25;
        }
        goto LABEL_24;
      case 3:
        unint64_t v11 = 0xE900000000000065;
        if (v9 != 0x6C626D6174736F70) {
          goto LABEL_25;
        }
        goto LABEL_24;
      case 4:
        unint64_t v11 = 0xE900000000000064;
        if (v9 != 0x656C6C65636E6163) {
          goto LABEL_25;
        }
        goto LABEL_24;
      case 5:
        unint64_t v11 = 0xE600000000000000;
        uint64_t v13 = 1937072496;
        goto LABEL_29;
      case 6:
        uint64_t v12 = 0x64656873696E6966;
        goto LABEL_23;
      case 7:
        unint64_t v11 = 0xE600000000000000;
        uint64_t v13 = 1818845542;
LABEL_29:
        if (v9 != (v13 & 0xFFFF0000FFFFFFFFLL | 0x646500000000)) {
          goto LABEL_25;
        }
        goto LABEL_24;
      default:
LABEL_23:
        if (v9 != v12) {
          goto LABEL_25;
        }
LABEL_24:
        if (v8 != v11)
        {
LABEL_25:
          char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v14) {
            goto LABEL_32;
          }
          v5 += 24;
          if (!--v2)
          {
            swift_bridgeObjectRelease();
            return 0;
          }
          continue;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_32:
        swift_bridgeObjectRelease();
        return v7;
    }
  }
}

uint64_t sub_10054795C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = a2[3];
  uint64_t v6 = a2[4];
  sub_10018AC60(a2, v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 24))(v5, v6);
  uint64_t v8 = *(int *)(type metadata accessor for AppInstallEngine.State(0) + 24);
  swift_release();
  *(void *)(a1 + v8) = v7;
  *a3 = v7;
  return swift_retain();
}

uint64_t sub_1005479F0()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_100014524(v0 + 176);
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon16AppInstallEngine_eventStream;
  uint64_t v2 = sub_1000172F8(&qword_100666BA8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon16AppInstallEngine_eventContinuation;
  uint64_t v4 = sub_1000172F8(&qword_100666BB0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_100547AE8()
{
  sub_1005479F0();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100547B14()
{
  return type metadata accessor for AppInstallEngine(0);
}

uint64_t type metadata accessor for AppInstallEngine(uint64_t a1)
{
  return sub_10019B200(a1, (uint64_t *)&unk_100666A10);
}

void sub_100547B3C()
{
  sub_100547CE8(319, &qword_100666A20, type metadata accessor for AppInstallEngine.Event, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for AsyncStream);
  if (v0 <= 0x3F)
  {
    sub_100547CE8(319, (unint64_t *)&unk_100666A28, type metadata accessor for AppInstallEngine.Event, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for AsyncStream.Continuation);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t type metadata accessor for AppInstallEngine.Event(uint64_t a1)
{
  return sub_10019B200(a1, (uint64_t *)&unk_100666B68);
}

void sub_100547CE8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t *sub_100547D4C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = sub_1000172F8(&qword_100662518);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_100547E48(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (!result)
  {
    uint64_t v3 = sub_1000172F8(&qword_100662518);
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *sub_100547EC4(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = sub_1000172F8(&qword_100662518);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_100547F7C(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100548AF4((uint64_t)a1, type metadata accessor for AppInstallEngine.Event);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = sub_1000172F8(&qword_100662518);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *sub_100548058(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = sub_1000172F8(&qword_100662518);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_100548110(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100548AF4((uint64_t)a1, type metadata accessor for AppInstallEngine.Event);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = sub_1000172F8(&qword_100662518);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void sub_1005481EC()
{
  sub_10054827C();
  if (v0 <= 0x3F) {
    swift_initEnumMetadataMultiPayload();
  }
}

void sub_10054827C()
{
  if (!qword_100666B78)
  {
    unint64_t v0 = type metadata accessor for CheckedContinuation();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100666B78);
    }
  }
}

uint64_t sub_1005482E8(uint64_t a1)
{
  uint64_t v2 = *(int *)(type metadata accessor for AppInstallEngine.State(0) + 20);
  uint64_t result = swift_release();
  *(void *)(a1 + v2) = 0;
  return result;
}

void sub_100548330(void **a1)
{
  sub_10053ED08(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t sub_100548350(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  int v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_100548430;
  return v5(v2 + 32);
}

uint64_t sub_100548430()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(unsigned char **)(*v0 + 16);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  *uint64_t v2 = *(unsigned char *)(v1 + 32);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

void *sub_100548544(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v44 = a2;
  uint64_t v41 = a1;
  uint64_t v13 = sub_1000172F8(&qword_10065B220);
  __chkstk_darwin(v13 - 8);
  uint64_t v48 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_1000172F8(&qword_100666BC8);
  uint64_t v15 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v17 = (char *)v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_1000172F8(&qword_100666BB0);
  uint64_t v46 = *(void *)(v18 - 8);
  uint64_t v47 = v18;
  __chkstk_darwin(v18);
  uint64_t v40 = (char *)v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = sub_1000172F8(&qword_100666BA8);
  uint64_t v42 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  NSString v39 = (char *)v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for AppInstallEngine.State(0);
  uint64_t v22 = v21 - 8;
  __chkstk_darwin(v21);
  id v24 = (char *)v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  uint64_t v25 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
  *(void *)&v24[*(int *)(v22 + 28)] = 0;
  *(void *)&v24[*(int *)(v22 + 32)] = 0;
  sub_1000172F8(&qword_100666BD0);
  uint64_t v26 = swift_allocObject();
  *(_DWORD *)(v26 + ((*(unsigned int *)(*(void *)v26 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_100548C4C((uint64_t)v24, v26 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v26 + 16), type metadata accessor for AppInstallEngine.State);
  sub_100548AF4((uint64_t)v24, type metadata accessor for AppInstallEngine.State);
  v7[27] = v26;
  v7[14] = v41;
  v7[15] = a4;
  v7[16] = a5;
  v7[17] = a6;
  v7[18] = a7;
  uint64_t v27 = v44;
  v7[20] = a3;
  v7[21] = v27;
  v38[1] = a3;
  uint64_t v28 = *(void *)(a3 + 192);
  v7[19] = *(void *)(v28 + 16);
  uint64_t v29 = *(void *)(v28 + 32);
  v7[25] = type metadata accessor for AppInstallScheduler();
  v7[26] = &off_100647778;
  v7[22] = v29;
  type metadata accessor for AppInstallEngine.Event(0);
  uint64_t v30 = v43;
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v17, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v43);
  id v31 = a4;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v33 = v39;
  unint64_t v32 = v40;
  static AsyncStream.makeStream(of:bufferingPolicy:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v30);
  (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))((uint64_t)v7 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon16AppInstallEngine_eventStream, v33, v45);
  (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))((uint64_t)v7 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon16AppInstallEngine_eventContinuation, v32, v47);
  uint64_t v34 = type metadata accessor for TaskPriority();
  uint64_t v35 = (uint64_t)v48;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v48, 1, 1, v34);
  unsigned __int8 v36 = (void *)swift_allocObject();
  v36[2] = 0;
  v36[3] = 0;
  v36[4] = v7;
  swift_retain();
  sub_100532ED8(v35, (uint64_t)&unk_100666BE0, (uint64_t)v36);
  swift_release();
  sub_10001729C(v35, &qword_10065B220);
  return v7;
}

uint64_t type metadata accessor for AppInstallEngine.State(uint64_t a1)
{
  return sub_10019B200(a1, qword_100666D00);
}

uint64_t sub_100548AF4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100548B58()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000B238;
  uint64_t v2 = (void *)swift_task_alloc();
  v1[2] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1000176B4;
  return sub_10054382C();
}

void sub_100548C2C(void **a1@<X0>, void *a2@<X8>)
{
  sub_100546530(a1, *(void **)(v2 + 16), *(unsigned __int8 *)(v2 + 24), a2);
}

uint64_t sub_100548C4C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_100548CB4(void **a1)
{
  sub_100542CC0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void sub_100548CD0(void **a1)
{
  sub_100541C7C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100548CEC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_100548D54(void **a1)
{
  sub_100541E38(a1, *(void *)(v1 + 16));
}

uint64_t sub_100548D70(uint64_t a1)
{
  return sub_100541FE8(a1, *(void *)(v1 + 16));
}

void sub_100548D8C(void **a1)
{
  sub_1005420A8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100548DA8(void *a1)
{
  return sub_10053EB4C(a1, v1);
}

uint64_t sub_100548DB0@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

void sub_100548DF4(void **a1)
{
  sub_100542E7C(a1, v1);
}

uint64_t sub_100548E10(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for AppInstallEngine.State(0) + 20);
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a1 + v3) = v1;
  return result;
}

uint64_t sub_100548E64(uint64_t a1)
{
  return sub_1001C6E34(a1);
}

uint64_t sub_100548E80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_1006666D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_100548EE8(void **a1)
{
  sub_1005436E8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t sub_100548F04()
{
  unint64_t result = qword_100666C40;
  if (!qword_100666C40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100666C40);
  }
  return result;
}

uint64_t sub_100548F58@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1001CA5B4(6, *(void *)(v1 + 112));
  *a1 = result;
  return result;
}

uint64_t sub_100548FA4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000176B4;
  return sub_100542424(a1, v4, v5, v6);
}

void sub_100549058(uint64_t a1)
{
  sub_100546128(a1, v1);
}

uint64_t sub_100549060(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1005490A8()
{
  unint64_t result = qword_100666C60;
  if (!qword_100666C60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100666C60);
  }
  return result;
}

uint64_t sub_1005490FC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10054795C(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_100549118()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100549150(void **a1@<X0>, char *a2@<X8>)
{
  sub_1005396C0(a1, v2, a2);
}

void sub_10054916C(void **a1@<X0>, char *a2@<X8>)
{
  sub_100539D4C(a1, v2, a2);
}

void sub_100549188(uint64_t *a1)
{
  sub_10033FECC(a1, *(void *)(v1 + 16));
}

uint64_t sub_1005491A4@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_10053A5F8(a1, v2, a2);
}

void sub_1005491AC(void **a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_1005491C4(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10053B394(a1, v2, a2);
}

void sub_1005491CC(void **a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(unsigned char *)(v2 + 27)) {
    int v3 = 0x1000000;
  }
  else {
    int v3 = 0;
  }
  if (*(unsigned char *)(v2 + 26)) {
    int v4 = 0x10000;
  }
  else {
    int v4 = 0;
  }
  if (*(unsigned char *)(v2 + 25)) {
    int v5 = 256;
  }
  else {
    int v5 = 0;
  }
  sub_10053C148(a1, *(void *)(v2 + 16), v5 | *(unsigned __int8 *)(v2 + 24) | v4 | v3, a2);
}

ValueMetadata *type metadata accessor for AppInstallEngine.SkipTransitionError()
{
  return &type metadata for AppInstallEngine.SkipTransitionError;
}

char *sub_100549238(char *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *(void *)a1 = *a2;
    int v4 = (char *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_1000172F8(&qword_10065C9B0);
      memcpy(v4, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(v8 + 16))(v4, a2, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v4, 0, 1, v7);
    }
    uint64_t v11 = *(int *)(a3 + 24);
    *(void *)&v4[*(int *)(a3 + 20)] = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    *(void *)&v4[v11] = *(uint64_t *)((char *)a2 + v11);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_1005493C0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  }
  swift_release();

  return swift_release();
}

char *sub_100549498(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_1000172F8(&qword_10065C9B0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 24);
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  *(void *)&a1[v9] = *(void *)&a2[v9];
  swift_retain();
  swift_retain();
  return a1;
}

char *sub_1005495D4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = sub_1000172F8(&qword_10065C9B0);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  swift_retain();
  swift_release();
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  swift_retain();
  swift_release();
  return a1;
}

char *sub_10054978C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_1000172F8(&qword_10065C9B0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 24);
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  *(void *)&a1[v9] = *(void *)&a2[v9];
  return a1;
}

char *sub_1005498BC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = sub_1000172F8(&qword_10065C9B0);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  swift_release();
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  swift_release();
  return a1;
}

uint64_t sub_100549A64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100549A78);
}

uint64_t sub_100549A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000172F8(&qword_10065C9B0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_100549B48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100549B5C);
}

uint64_t sub_100549B5C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1000172F8(&qword_10065C9B0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  return result;
}

void sub_100549C1C()
{
  sub_100547CE8(319, (unint64_t *)&unk_100662CD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_100549CF4(void **a1)
{
}

void sub_100549D10(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v25 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (a1 >> 32) - (int)a1;
      if (a1 >> 32 < (int)a1)
      {
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      sub_100012670(a1, a2);
      uint64_t v8 = __DataStorage._bytes.getter();
      if (v8)
      {
        uint64_t v9 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)a1, v9))
        {
          v8 += (int)a1 - v9;
          goto LABEL_7;
        }
LABEL_30:
        __break(1u);
      }
LABEL_7:
      uint64_t v10 = __DataStorage._length.getter();
      if (v10 >= v7) {
        uint64_t v11 = (a1 >> 32) - (int)a1;
      }
      else {
        uint64_t v11 = v10;
      }
      uint64_t v12 = v8 + v11;
      if (v8) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      sub_10054A394(v8, v13, a3, (uint64_t)&v25);
      sub_100013510(a1, a2);
      return;
    case 2uLL:
      uint64_t v14 = *(void *)(a1 + 16);
      uint64_t v15 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      uint64_t v16 = __DataStorage._bytes.getter();
      if (!v16) {
        goto LABEL_17;
      }
      uint64_t v17 = __DataStorage._offset.getter();
      if (__OFSUB__(v14, v17)) {
        goto LABEL_29;
      }
      v16 += v14 - v17;
LABEL_17:
      BOOL v18 = __OFSUB__(v15, v14);
      uint64_t v19 = v15 - v14;
      if (v18) {
        goto LABEL_28;
      }
      uint64_t v20 = __DataStorage._length.getter();
      if (v20 >= v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = v20;
      }
      uint64_t v22 = v16 + v21;
      if (v16) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      sub_10054A394(v16, v23, a3, (uint64_t)&v25);
      swift_release();
      swift_release();
      return;
    case 3uLL:
      memset(v24, 0, 14);
      uint64_t v6 = (char *)v24;
      goto LABEL_26;
    default:
      v24[0] = a1;
      LOWORD(v24[1]) = a2;
      BYTE2(v24[1]) = BYTE2(a2);
      BYTE3(v24[1]) = BYTE3(a2);
      BYTE4(v24[1]) = BYTE4(a2);
      BYTE5(v24[1]) = BYTE5(a2);
      uint64_t v6 = (char *)v24 + BYTE6(a2);
LABEL_26:
      sub_10054A394((uint64_t)v24, (uint64_t)v6, a3, (uint64_t)&v25);
      return;
  }
}

void sub_100549F80(uint64_t *a1)
{
  uint64_t v1 = *a1;
  switch((unint64_t)a1[1] >> 62)
  {
    case 1uLL:
      BOOL v2 = __OFSUB__(HIDWORD(v1), v1);
      LODWORD(v1) = HIDWORD(v1) - v1;
      if (v2)
      {
        __break(1u);
LABEL_8:
        __break(1u);
LABEL_9:
        __break(1u);
        JUMPOUT(0x100549FFCLL);
      }
      uint64_t v1 = (int)v1;
LABEL_5:
      if (v1 < 0x8000) {
        goto LABEL_9;
      }
      sub_10054A474(a1, (unint64_t)v1 >> 15);
      return;
    case 2uLL:
      uint64_t v5 = v1 + 16;
      uint64_t v3 = *(void *)(v1 + 16);
      uint64_t v4 = *(void *)(v5 + 8);
      BOOL v2 = __OFSUB__(v4, v3);
      uint64_t v1 = v4 - v3;
      if (!v2) {
        goto LABEL_5;
      }
      goto LABEL_8;
    default:
      goto LABEL_9;
  }
}

int32x4_t *sub_10054A00C(unsigned int a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t result = (int32x4_t *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a2) {
    return (int32x4_t *)_swiftEmptyArrayStorage;
  }
  uint64_t result = (int32x4_t *)static Array._allocateBufferUninitialized(minimumCapacity:)();
  result[1].i64[0] = a2;
  uint64_t v5 = (unsigned int *)&result[2];
  if (a2 < 8)
  {
    unint64_t v6 = 0;
LABEL_9:
    unint64_t v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  v5 += a2 & 0xFFFFFFFFFFFFFFF8;
  int32x4_t v7 = vdupq_n_s32(a1);
  uint64_t v8 = result + 3;
  unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *uint64_t v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v6 != a2) {
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_10054A0F8(uint64_t a1)
{
  unint64_t v2 = sub_10054B5A4();

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10054A134(uint64_t a1)
{
  unint64_t v2 = sub_10054B5A4();

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10054A170()
{
  if (v0[24]) {
    return 0;
  }
  else {
    return *(int *)v0;
  }
}

unint64_t sub_10054A188()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  int v4 = *((unsigned __int8 *)v0 + 24);
  if (v4) {
    uint64_t v5 = v1;
  }
  else {
    uint64_t v5 = v2;
  }
  if (v4) {
    uint64_t v6 = v2;
  }
  else {
    uint64_t v6 = v3;
  }
  sub_1000172F8(&qword_10065C3A0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v8;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v5;
  *(void *)(inited + 56) = v6;
  sub_10054ACFC();
  return sub_10044B428(inited);
}

void sub_10054A240(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if ((a3 & 0x8000000000000000) != 0 || HIDWORD(a3))
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    sub_10012C9A0();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_1004A1D74();
      swift_allocError();
      *(void *)uint64_t v5 = v4;
      *(_OWORD *)(v5 + 8) = xmmword_1005B1D80;
      *(unsigned char *)(v5 + 24) = 0;
      swift_willThrow();
    }
  }
}

void sub_10054A394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    uint64_t v4 = a2 - a1;
    if (v4 >= (uint64_t)&_mh_execute_header)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    sub_10004FDD0(a1, v4, a3, a4);
    if (v5) {
      goto LABEL_4;
    }
  }
  else
  {
    sub_10004FDD0(0, 0, a3, a4);
    if (v5)
    {
LABEL_4:
      uint64_t v6 = v5;
      sub_1004A1D74();
      swift_allocError();
      *(void *)uint64_t v7 = v6;
      *(_OWORD *)(v7 + 8) = xmmword_1005B1D80;
      *(unsigned char *)(v7 + 24) = 0;
      swift_willThrow();
    }
  }
}

void sub_10054A474(void *a1, unint64_t a2)
{
  unint64_t v2 = a1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      *(void *)&long long v16 = *a1;
      *((void *)&v16 + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      sub_10054A750((int *)&v16, a2);
      uint64_t v7 = v16;
      unint64_t v8 = *((void *)&v16 + 1) | 0x4000000000000000;
      goto LABEL_5;
    case 2uLL:
      *(void *)&long long v16 = *a1;
      *((void *)&v16 + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v9 = *((void *)&v16 + 1);
      uint64_t v10 = *(void *)(v16 + 16);
      uint64_t v11 = *(void *)(v16 + 24);
      if (!__DataStorage._bytes.getter())
      {
        __break(1u);
        JUMPOUT(0x10054A740);
      }
      if (__OFSUB__(v10, __DataStorage._offset.getter())) {
        goto LABEL_14;
      }
      if (__OFSUB__(v11, v10)) {
        goto LABEL_16;
      }
      __DataStorage._length.getter();
      uint64_t v12 = sub_10054A00C(0x8000u, a2);
      unint64_t v13 = v12[1].u64[0];
      if (v13 >> 61) {
        goto LABEL_17;
      }
      sub_10054A240((uint64_t)v12[2].i64, (uint64_t)v12[2].i64 + 4 * v13, a2);
      swift_bridgeObjectRelease();
      *a1 = v16;
      a1[1] = v9 | 0x8000000000000000;
      break;
    case 3uLL:
      *(void *)((char *)&v16 + 7) = 0;
      *(void *)&long long v16 = 0;
      uint64_t v14 = sub_10054A00C(0x8000u, a2);
      unint64_t v15 = v14[1].u64[0];
      if (v15 >> 61) {
        goto LABEL_15;
      }
      sub_10054A240((uint64_t)v14[2].i64, (uint64_t)v14[2].i64 + 4 * v15, a2);
      swift_bridgeObjectRelease();
      return;
    default:
      *(void *)&long long v16 = *a1;
      WORD4(v16) = v2;
      BYTE10(v16) = BYTE2(v2);
      BYTE11(v16) = BYTE3(v2);
      BYTE12(v16) = BYTE4(v2);
      BYTE13(v16) = BYTE5(v2);
      BYTE14(v16) = BYTE6(v2);
      unsigned int v5 = sub_10054A00C(0x8000u, a2);
      unint64_t v6 = v5[1].u64[0];
      if (v6 >> 61)
      {
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
      }
      sub_10054A240((uint64_t)v5[2].i64, (uint64_t)v5[2].i64 + 4 * v6, a2);
      swift_bridgeObjectRelease();
      uint64_t v7 = v16;
      unint64_t v8 = DWORD2(v16) | ((unint64_t)BYTE12(v16) << 32) | ((unint64_t)BYTE13(v16) << 40) | ((unint64_t)BYTE14(v16) << 48);
LABEL_5:
      *a1 = v7;
      a1[1] = v8;
      break;
  }
}

void sub_10054A750(int *a1, unint64_t a2)
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v4 = *a1;
  if (a1[1] < (int)v4)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (__DataStorage._bytes.getter())
  {
    if (!__OFSUB__(v4, __DataStorage._offset.getter()))
    {
      __DataStorage._length.getter();
      unsigned int v5 = sub_10054A00C(0x8000u, a2);
      unint64_t v6 = v5[1].u64[0];
      if (!(v6 >> 61))
      {
        sub_10054A240((uint64_t)v5[2].i64, (uint64_t)v5[2].i64 + 4 * v6, a2);
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_8;
    }
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
  }
  __break(1u);
}

id sub_10054A838()
{
  id v0 = [self sharedInstance];
  unint64_t v6 = 0;
  id v1 = [v0 fairplayContextWithError:&v6];

  unint64_t v2 = v6;
  if (!v6)
  {
    if (v1) {
      return v1;
    }
    sub_1004A1D74();
    swift_allocError();
    *(void *)uint64_t v5 = 0xD000000000000027;
    *(void *)(v5 + 8) = 0x80000001005C1930;
    *(void *)(v5 + 16) = 0;
    *(unsigned char *)(v5 + 24) = 1;
  }
  id v3 = v2;
  swift_willThrow();

  return v1;
}

id sub_10054A958(uint64_t a1, unint64_t a2)
{
  id result = sub_10054A838();
  if (v2) {
    return result;
  }
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1)
      {
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
      }
      sub_100012670(a1, a2);
      if (__DataStorage._bytes.getter() && __OFSUB__((int)a1, __DataStorage._offset.getter())) {
        goto LABEL_30;
      }
      __DataStorage._length.getter();
      sub_10009DB88();
      if (v17)
      {
        uint64_t v18 = v17;
        sub_1004A1D74();
        swift_allocError();
        *(void *)uint64_t v19 = v18;
        *(_OWORD *)(v19 + 8) = xmmword_1005B1D80;
        *(unsigned char *)(v19 + 24) = 0;
        swift_willThrow();
        return (id)sub_100013510(a1, a2);
      }
      else
      {
        sub_100013510(a1, a2);
        return 0;
      }
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      uint64_t v9 = __DataStorage._bytes.getter();
      if (!v9) {
        goto LABEL_8;
      }
      uint64_t v10 = __DataStorage._offset.getter();
      if (__OFSUB__(v7, v10)) {
        goto LABEL_29;
      }
      v9 += v7 - v10;
LABEL_8:
      BOOL v11 = __OFSUB__(v8, v7);
      uint64_t v12 = v8 - v7;
      if (v11) {
        goto LABEL_28;
      }
      uint64_t v13 = __DataStorage._length.getter();
      if (!v9 || (v13 >= v12 ? (uint64_t v14 = v12) : (uint64_t v14 = v13), v14 < (uint64_t)&_mh_execute_header))
      {
        sub_10009DB88();
        if (v20)
        {
          uint64_t v21 = v20;
          sub_1004A1D74();
          swift_allocError();
          *(void *)uint64_t v22 = v21;
          *(_OWORD *)(v22 + 8) = xmmword_1005B1D80;
          *(unsigned char *)(v22 + 24) = 0;
          swift_willThrow();
          swift_release();
          return (id)swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          return 0;
        }
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_15:
      sub_10009DB88();
      if (v6)
      {
LABEL_16:
        uint64_t v15 = v6;
        sub_1004A1D74();
        swift_allocError();
        *(void *)uint64_t v16 = v15;
        *(_OWORD *)(v16 + 8) = xmmword_1005B1D80;
        *(unsigned char *)(v16 + 24) = 0;
        return (id)swift_willThrow();
      }
      return 0;
    case 3uLL:
      goto LABEL_15;
    default:
      sub_10009DB88();
      if (!v6) {
        return 0;
      }
      goto LABEL_16;
  }
}

uint64_t sub_10054ACFC()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for FairPlay.Error()
{
  return sub_10054AD1C();
}

uint64_t sub_10054AD1C()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FairPlay.Error(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  char v6 = *((unsigned char *)a2 + 24);
  sub_10054ACFC();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for FairPlay.Error(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  char v6 = *((unsigned char *)a2 + 24);
  sub_10054ACFC();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  sub_10054AD1C();
  return a1;
}

uint64_t assignWithTake for FairPlay.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v4;
  sub_10054AD1C();
  return a1;
}

uint64_t getEnumTagSinglePayload for FairPlay.Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FairPlay.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)id result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10054AED8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_10054AEE0(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for FairPlay.Error()
{
  return &type metadata for FairPlay.Error;
}

uint64_t sub_10054AF00(uint64_t a1, unint64_t a2, uint64_t a3)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v21 = (a1 >> 32) - (int)a1;
      if (a1 >> 32 >= (int)a1)
      {
        sub_100012670(a1, a2);
        if (!__DataStorage._bytes.getter())
        {
          __DataStorage._length.getter();
          sub_1000AB404();
          if (v27)
          {
            a3 = v27;
            sub_1004A1D74();
            swift_allocError();
            *(void *)uint64_t v28 = a3;
            *(_OWORD *)(v28 + 8) = xmmword_1005B1D80;
            *(unsigned char *)(v28 + 24) = 0;
            swift_willThrow();
            _swiftEmptyArrayStorage[2] = 0;
          }
          else
          {
            _swiftEmptyArrayStorage[2] = 0;
            a3 = sub_1004E474C((uint64_t)_swiftEmptyArrayStorage);
            swift_release();
          }
LABEL_46:
          sub_100013510(a1, a2);
          return a3;
        }
        if (!__OFSUB__((int)a1, __DataStorage._offset.getter()))
        {
          uint64_t v22 = __DataStorage._length.getter();
          if (v22 < v21) {
            LODWORD(v21) = v22;
          }
          if (v21)
          {
            uint64_t v23 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
            void v23[2] = v21;
          }
          else
          {
            uint64_t v23 = _swiftEmptyArrayStorage;
          }
          sub_1000AB404();
          if (v33)
          {
            a3 = v33;
            sub_1004A1D74();
            swift_allocError();
            *(void *)uint64_t v34 = a3;
            *(_OWORD *)(v34 + 8) = xmmword_1005B1D80;
            *(unsigned char *)(v34 + 24) = 0;
            swift_willThrow();
            void v23[2] = 0;
          }
          else
          {
            void v23[2] = v21;
            a3 = sub_1004E474C((uint64_t)v23);
          }
          swift_bridgeObjectRelease();
          goto LABEL_46;
        }
        goto LABEL_54;
      }
      __break(1u);
      goto LABEL_53;
    case 2uLL:
      uint64_t v7 = (void *)(a2 & 0x3FFFFFFFFFFFFFFFLL);
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      uint64_t v10 = __DataStorage._bytes.getter();
      if (!v10)
      {
        uint64_t v13 = 0;
        uint64_t v14 = v9 - v8;
        if (!__OFSUB__(v9, v8)) {
          goto LABEL_7;
        }
LABEL_25:
        __break(1u);
LABEL_26:
        if (v36) {
          goto LABEL_55;
        }
        void v7[2] = 0;
        a3 = sub_1004E474C((uint64_t)v7);
        goto LABEL_50;
      }
      uint64_t v11 = v10;
      uint64_t v12 = __DataStorage._offset.getter();
      if (__OFSUB__(v8, v12))
      {
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        __break(1u);
        __break(1u);
        __break(1u);
        __break(1u);
      }
      uint64_t v13 = v11 + v8 - v12;
      uint64_t v14 = v9 - v8;
      if (__OFSUB__(v9, v8)) {
        goto LABEL_25;
      }
LABEL_7:
      uint64_t v15 = __DataStorage._length.getter();
      if (v15 >= v14) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = v15;
      }
      if (v13)
      {
        if (v16 > 0xFFFFFFFFLL)
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x10054B594);
        }
        if (v16)
        {
          unsigned int v17 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
          v17[2] = v16;
        }
        else
        {
          unsigned int v17 = _swiftEmptyArrayStorage;
        }
        sub_1000AB404();
        if (v31)
        {
          a3 = v31;
          sub_1004A1D74();
          swift_allocError();
          *(void *)uint64_t v32 = a3;
          *(_OWORD *)(v32 + 8) = xmmword_1005B1D80;
          *(unsigned char *)(v32 + 24) = 0;
          swift_willThrow();
          v17[2] = 0;
          swift_bridgeObjectRelease();
          goto LABEL_40;
        }
        v17[2] = v16;
        a3 = sub_1004E474C((uint64_t)v17);
        swift_bridgeObjectRelease();
        swift_release();
LABEL_50:
        swift_release();
        return a3;
      }
      sub_1000AB404();
      if (!v29)
      {
        _swiftEmptyArrayStorage[2] = 0;
        a3 = sub_1004E474C((uint64_t)_swiftEmptyArrayStorage);
        swift_release();
        swift_release();
        goto LABEL_50;
      }
      a3 = v29;
      sub_1004A1D74();
      swift_allocError();
      *(void *)uint64_t v30 = a3;
      *(_OWORD *)(v30 + 8) = xmmword_1005B1D80;
      *(unsigned char *)(v30 + 24) = 0;
      swift_willThrow();
      _swiftEmptyArrayStorage[2] = 0;
LABEL_40:
      swift_release();
      swift_release();
      return a3;
    case 3uLL:
      int v36 = 0;
      uint64_t v7 = _swiftEmptyArrayStorage;
      sub_1000AB404();
      if (!v18) {
        goto LABEL_26;
      }
      uint64_t v19 = v18;
      sub_1004A1D74();
      swift_allocError();
      *(void *)uint64_t v20 = v19;
      *(_OWORD *)(v20 + 8) = xmmword_1005B1D80;
      *(unsigned char *)(v20 + 24) = 0;
      swift_willThrow();
      _swiftEmptyArrayStorage[2] = 0;
      return a3;
    default:
      unsigned int v37 = BYTE6(a2);
      if (BYTE6(a2))
      {
        char v6 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
        v6[2] = BYTE6(a2);
      }
      else
      {
        char v6 = _swiftEmptyArrayStorage;
      }
      sub_1000AB404();
      if (v24)
      {
        uint64_t v25 = v24;
        sub_1004A1D74();
        swift_allocError();
        *(void *)uint64_t v26 = v25;
        *(_OWORD *)(v26 + 8) = xmmword_1005B1D80;
        *(unsigned char *)(v26 + 24) = 0;
        swift_willThrow();
        v6[2] = 0;
        swift_bridgeObjectRelease();
      }
      else
      {
        if (BYTE6(a2) < (unint64_t)v37) {
          goto LABEL_56;
        }
        v6[2] = v37;
        a3 = sub_1004E474C((uint64_t)v6);
        swift_bridgeObjectRelease();
      }
      return a3;
  }
}

unint64_t sub_10054B5A4()
{
  unint64_t result = qword_100666D40[0];
  if (!qword_100666D40[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100666D40);
  }
  return result;
}

uint64_t sub_10054B5F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

uint64_t sub_10054B600()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *sub_10054B694(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned int v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *(void *)a2;
    *unsigned int v3 = *(void *)a2;
    unsigned int v3 = (void *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    unsigned int v9 = a2[v5];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v5 <= 3) {
        uint64_t v11 = v5;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_19;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_19;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_19;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_19:
          int v13 = (v12 | (v10 << (8 * v5))) + 2;
          unsigned int v9 = v12 + 2;
          if (v5 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v9 == 1)
    {
      uint64_t v14 = *((void *)a2 + 1);
      *unsigned int v3 = *(void *)a2;
      v3[1] = v14;
      *((unsigned char *)v3 + v5) = 1;
      swift_bridgeObjectRetain();
    }
    else
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v5) = 0;
    }
  }
  return v3;
}

uint64_t sub_10054B810(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 0x10) {
    unint64_t v2 = 16;
  }
  unsigned int v3 = a1[v2];
  unsigned int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        int v7 = (v6 | (v4 << (8 * v2))) + 2;
        unsigned int v3 = v6 + 2;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 == 1) {
    return swift_bridgeObjectRelease();
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  }
}

void *sub_10054B910(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    uint64_t v10 = *((void *)a2 + 1);
    *a1 = *(void *)a2;
    a1[1] = v10;
    swift_bridgeObjectRetain();
    char v11 = 1;
  }
  else
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1);
    char v11 = 0;
  }
  *((unsigned char *)a1 + v4) = v11;
  return a1;
}

unsigned __int8 *sub_10054BA4C(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      swift_bridgeObjectRelease();
    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = *((void *)a2 + 1);
      a1[v7] = 1;
      swift_bridgeObjectRetain();
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      a1[v7] = 0;
    }
  }
  return a1;
}

_OWORD *sub_10054BC70(_OWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    *a1 = *(_OWORD *)a2;
    char v10 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1);
    char v10 = 0;
  }
  *((unsigned char *)a1 + v4) = v10;
  return a1;
}

unsigned __int8 *sub_10054BDA8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      swift_bridgeObjectRelease();
    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      char v18 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 0;
    }
    a1[v7] = v18;
  }
  return a1;
}

uint64_t sub_10054BFC0(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = 16;
  if (*(void *)(v3 + 64) > 0x10uLL) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 254) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 2) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 255;
}

void sub_10054C0F4(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x10054C2BCLL);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_10054C2E4(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = 16;
  if (*(void *)(v2 + 64) > 0x10uLL) {
    uint64_t v3 = *(void *)(v2 + 64);
  }
  uint64_t v4 = a1[v3];
  int v5 = v4 - 2;
  if (v4 >= 2)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v8 = (v7 | (v5 << (8 * v3))) + 2;
        LODWORD(v4) = v7 + 2;
        if (v3 >= 4) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v8;
        }
        break;
      default:
        return v4;
    }
  }
  return v4;
}

void sub_10054C39C(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    size_t v4 = 16;
  }
  else {
    size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (a2 > 1)
  {
    unsigned int v5 = a2 - 2;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if (v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if (v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t type metadata accessor for UnknownStringCodingKey()
{
  return swift_getGenericMetadata();
}

uint64_t sub_10054C48C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  uint64_t v45 = a1;
  uint64_t v46 = a8;
  uint64_t v44 = a4;
  uint64_t v48 = a9;
  uint64_t v15 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  int v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v42 = *(void *)(v18 - 8);
  uint64_t v43 = v18;
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v40 - v20;
  uint64_t v22 = *(void *)(a2 - 8);
  __chkstk_darwin(v19);
  uint64_t v41 = (char *)&v40 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = a2;
  uint64_t v50 = a4;
  uint64_t v51 = a5;
  uint64_t v52 = a6;
  uint64_t v53 = a7;
  uint64_t v24 = type metadata accessor for UnknownStringCodingKey();
  uint64_t v47 = *(void *)(v24 - 8);
  uint64_t v25 = __chkstk_darwin(v24);
  unsigned int v27 = (uint64_t *)((char *)&v40 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v25);
  unsigned int v29 = (char *)&v40 - v28;
  uint64_t v30 = v45;
  (*(void (**)(char *))(v15 + 16))(v17);
  dispatch thunk of CodingKeyRepresentable.init<A>(codingKey:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v21, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v42 + 8))(v21, v43);
    uint64_t v31 = dispatch thunk of CodingKey.stringValue.getter();
    uint64_t v33 = v32;
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v30, a3);
    *unsigned int v27 = v31;
    v27[1] = v33;
    swift_storeEnumTagMultiPayload();
    uint64_t v34 = v47;
    uint64_t v35 = *(void (**)(char *, uint64_t *, uint64_t))(v47 + 32);
    v35(v29, v27, v24);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v30, a3);
    int v36 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    unsigned int v37 = v41;
    v36(v41, v21, a2);
    v36(v29, v37, a2);
    swift_storeEnumTagMultiPayload();
    uint64_t v34 = v47;
    uint64_t v35 = *(void (**)(char *, uint64_t *, uint64_t))(v47 + 32);
  }
  uint64_t v38 = v48;
  v35(v48, (uint64_t *)v29, v24);
  return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v38, 0, 1, v24);
}

uint64_t sub_10054C884@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(a1);
  unsigned int v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unsigned int v10 = (void *)((char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v11 + 16))(v10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = *v10;
    uint64_t v13 = v10[1];
    v16[1] = v4;
    long long v14 = *(_OWORD *)(a1 + 40);
    long long v17 = *(_OWORD *)(a1 + 24);
    long long v18 = v14;
    a2[3] = type metadata accessor for UnknownStringCodingKey.StringCodingKey();
    uint64_t result = swift_getWitnessTable();
    a2[4] = result;
    *a2 = v12;
    a2[1] = v13;
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v5 + 32))(v8, v10, v4);
    dispatch thunk of CodingKeyRepresentable.codingKey.getter();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

uint64_t sub_10054CA64(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v9, v11, a2);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
    return swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v9, v3);
    Hasher._combine(_:)(0);
    dispatch thunk of Hashable.hash(into:)();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
}

uint64_t sub_10054CC28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  uint64_t v35 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v32 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = v5;
  uint64_t v38 = v6;
  uint64_t v39 = v7;
  uint64_t v40 = v8;
  uint64_t v41 = v5;
  uint64_t v42 = v9;
  uint64_t v10 = type metadata accessor for UnknownStringCodingKey();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  long long v14 = (uint64_t *)((char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v31 - v15;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v34 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v18 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v20 = (char *)&v31 - v19;
  uint64_t v21 = (char *)&v31 + *(int *)(v18 + 48) - v19;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v22((char *)&v31 - v19, v36, v10);
  v22(v21, v37, v10);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v27 = v35;
    v22(v16, (uint64_t)v20, v10);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v28 = v32;
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v32, v21, a3);
      char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
      unsigned int v29 = *(void (**)(char *, uint64_t))(v27 + 8);
      v29(v28, a3);
      v29(v16, a3);
      goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v16, a3);
    goto LABEL_11;
  }
  v22((char *)v14, (uint64_t)v20, v10);
  uint64_t v24 = *v14;
  uint64_t v23 = v14[1];
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    char v26 = 0;
    uint64_t v11 = v34;
    uint64_t v10 = TupleTypeMetadata2;
    goto LABEL_14;
  }
  if (v24 == *(void *)v21 && v23 == *((void *)v21 + 1))
  {
    swift_bridgeObjectRelease_n();
    char v26 = 1;
  }
  else
  {
    char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_14:
  (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v10);
  return v26 & 1;
}

BOOL sub_10054CFD0(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_10054CFE0(uint64_t a1, char a2)
{
}

uint64_t sub_10054D008(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E776F6E6BLL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E776F6E6B6E75 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

Swift::Int sub_10054D0F4(char a1)
{
  return Hasher._finalize()();
}

uint64_t sub_10054D13C(char a1)
{
  if (a1) {
    return 0x6E776F6E6B6E75;
  }
  else {
    return 0x6E776F6E6BLL;
  }
}

uint64_t sub_10054D170(uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

Swift::Int sub_10054D1E0(uint64_t a1)
{
  Hasher.init(_seed:)();
  sub_10054CA64((uint64_t)v3, a1);
  return Hasher._finalize()();
}

uint64_t sub_10054D228@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  int v70 = a7;
  *(void *)&long long v78 = a2;
  *((void *)&v78 + 1) = a3;
  *(void *)&long long v79 = a4;
  *((void *)&v79 + 1) = a5;
  uint64_t v80 = a6;
  uint64_t v13 = type metadata accessor for UnknownStringCodingKey.UnknownCodingKeys();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v68 = v13;
  uint64_t v60 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v63 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  id v69 = (char *)&v55 - v14;
  *(void *)&long long v78 = a2;
  *((void *)&v78 + 1) = a3;
  *(void *)&long long v79 = a4;
  *((void *)&v79 + 1) = a5;
  uint64_t v80 = a6;
  uint64_t v15 = type metadata accessor for UnknownStringCodingKey.KnownCodingKeys();
  uint64_t v64 = swift_getWitnessTable();
  uint64_t v65 = v15;
  uint64_t v59 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v62 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  int v66 = (char *)&v55 - v16;
  *(void *)&long long v78 = a2;
  *((void *)&v78 + 1) = a3;
  *(void *)&long long v79 = a4;
  *((void *)&v79 + 1) = a5;
  uint64_t v80 = a6;
  type metadata accessor for UnknownStringCodingKey.CodingKeys();
  uint64_t v75 = swift_getWitnessTable();
  uint64_t v17 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v72 = *(void *)(v17 - 8);
  uint64_t v73 = v17;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v55 - v18;
  uint64_t v74 = a2;
  *(void *)&long long v78 = a2;
  *((void *)&v78 + 1) = a3;
  uint64_t v61 = a4;
  *(void *)&long long v79 = a4;
  *((void *)&v79 + 1) = a5;
  uint64_t v80 = a6;
  uint64_t v71 = type metadata accessor for UnknownStringCodingKey();
  uint64_t v58 = *(void *)(v71 - 8);
  uint64_t v20 = __chkstk_darwin(v71);
  uint64_t v22 = (char *)&v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v55 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v55 - v26;
  sub_10018AC60(a1, a1[3]);
  uint64_t v28 = v81;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v28) {
    goto LABEL_7;
  }
  uint64_t v75 = (uint64_t)v25;
  uint64_t v56 = (uint64_t *)v22;
  os_log_type_t v57 = v27;
  uint64_t v81 = a1;
  uint64_t v29 = v73;
  *(void *)&long long v76 = KeyedDecodingContainer.allKeys.getter();
  type metadata accessor for Array();
  swift_getWitnessTable();
  *(void *)&long long v78 = ArraySlice.init<A>(_:)();
  *((void *)&v78 + 1) = v30;
  *(void *)&long long v79 = v31;
  *((void *)&v79 + 1) = v32;
  type metadata accessor for ArraySlice();
  swift_getWitnessTable();
  Collection<>.popFirst()();
  char v33 = v76;
  if (v76 == 2 || (long long v55 = v78, v76 = v78, v77 = v79, (Collection.isEmpty.getter() & 1) == 0))
  {
    uint64_t v35 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v37 = v36;
    sub_1000172F8(&qword_10065DF58);
    *uint64_t v37 = v71;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v35 - 8) + 104))(v37, enum case for DecodingError.typeMismatch(_:), v35);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v19, v29);
    a1 = v81;
LABEL_7:
    uint64_t v38 = (uint64_t)a1;
    return sub_100014524(v38);
  }
  if (v33)
  {
    LOBYTE(v76) = 1;
    uint64_t v40 = v69;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v50 = v70;
    uint64_t v44 = v60;
    uint64_t v45 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v46 = v40;
    uint64_t v51 = v45;
    uint64_t v53 = v52;
    (*(void (**)(char *, uint64_t))(v63 + 8))(v46, v44);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v19, v29);
    int v54 = v56;
    *uint64_t v56 = v51;
    v54[1] = v53;
    uint64_t v47 = v71;
    swift_storeEnumTagMultiPayload();
    uint64_t v48 = *(void (**)(char *, uint64_t *, uint64_t))(v58 + 32);
    uint64_t v49 = v57;
    v48(v57, v54, v47);
  }
  else
  {
    LOBYTE(v76) = 0;
    uint64_t v34 = v66;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v41 = v75;
    uint64_t v42 = v59;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v43 = v72;
    (*(void (**)(char *, uint64_t))(v62 + 8))(v34, v42);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v19, v29);
    uint64_t v47 = v71;
    swift_storeEnumTagMultiPayload();
    uint64_t v48 = *(void (**)(char *, uint64_t *, uint64_t))(v58 + 32);
    uint64_t v49 = v57;
    v48(v57, (uint64_t *)v41, v47);
    uint64_t v50 = v70;
  }
  v48(v50, (uint64_t *)v49, v47);
  uint64_t v38 = (uint64_t)v81;
  return sub_100014524(v38);
}

uint64_t sub_10054DA60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = nullsub_1(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6]);
  *a4 = result;
  a4[1] = v6;
  return result;
}

uint64_t sub_10054DA98@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10054E34C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10054DAD0(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_10054DB24(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

BOOL sub_10054DB78(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10054CFD0(*a1, *a2);
}

Swift::Int sub_10054DB94()
{
  return sub_10054D0F4(*v0);
}

void sub_10054DBAC(uint64_t a1)
{
  sub_10054CFE0(a1, *v1);
}

Swift::Int sub_10054DBC4()
{
  Hasher.init(_seed:)();
  sub_10054CFE0((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t sub_10054DC14()
{
  return sub_10054D13C(*v0);
}

uint64_t sub_10054DC2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10054D008(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10054DC64@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1001CE294();
  *a1 = result;
  return result;
}

uint64_t sub_10054DC9C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_10054DCF0(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t sub_10054DD48@<X0>(void *a1@<X1>, unsigned char *a2@<X8>)
{
  return sub_10054DE44(a1, (uint64_t (*)(void, void, void, void, void))sub_1001CDE08, a2);
}

uint64_t sub_10054DD60(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_10054DDB4(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t sub_10054DE08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10054D170(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10054DE44@<X0>(void *a1@<X1>, uint64_t (*a2)(void, void, void, void, void)@<X3>, unsigned char *a3@<X8>)
{
  uint64_t result = a2(a1[2], a1[3], a1[4], a1[5], a1[6]);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10054DE88(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_10054DEDC(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

Swift::Int sub_10054DF38(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  sub_10054CA64((uint64_t)v4, a2);
  return Hasher._finalize()();
}

uint64_t sub_10054DF7C@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X8>)
{
  return sub_10054D228(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a3);
}

uint64_t sub_10054DFA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, char *a5@<X8>)
{
  return sub_10054C48C(a1, a4[2], a2, a4[3], a4[4], a4[5], a4[6], a3, a5);
}

uint64_t sub_10054DFC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10054CC28(a1, a2, *(void *)(a3 + 16));
}

uint64_t sub_10054DFD8()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for UnknownStringCodingKey.UnknownCodingKeys()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for UnknownStringCodingKey.KnownCodingKeys()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for UnknownStringCodingKey.CodingKeys()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for UnknownStringCodingKey.StringCodingKey()
{
  return swift_getGenericMetadata();
}

uint64_t sub_10054E054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

unsigned char *sub_10054E05C(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10054E128);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_10054E154(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10054E1F0);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10054E218()
{
  return swift_getWitnessTable();
}

uint64_t sub_10054E234()
{
  return swift_getWitnessTable();
}

uint64_t sub_10054E250()
{
  return swift_getWitnessTable();
}

uint64_t sub_10054E26C()
{
  return swift_getWitnessTable();
}

uint64_t sub_10054E288()
{
  return swift_getWitnessTable();
}

uint64_t sub_10054E2A4()
{
  return swift_getWitnessTable();
}

uint64_t sub_10054E2C0()
{
  return swift_getWitnessTable();
}

uint64_t sub_10054E2DC()
{
  return swift_getWitnessTable();
}

uint64_t sub_10054E2F8()
{
  return swift_getWitnessTable();
}

uint64_t sub_10054E314()
{
  return swift_getWitnessTable();
}

uint64_t sub_10054E330()
{
  return swift_getWitnessTable();
}

uint64_t sub_10054E34C()
{
  return 0;
}

uint64_t sub_10054E358(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v16 = a1 + 32;
    swift_beginAccess();
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v5 = *(void **)a2;
      uint64_t v6 = *(void *)(*(void *)a2 + 16);
      if (v6)
      {
        uint64_t v7 = (uint64_t *)(v16 + 16 * v4);
        uint64_t v8 = *v7;
        uint64_t v9 = v7[1];
        if (v5[4] == *v7 && v5[5] == v9) {
          return v4;
        }
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if (result) {
          return v4;
        }
        if (v6 != 1) {
          break;
        }
      }
LABEL_3:
      if (++v4 == v2) {
        return 0;
      }
    }
    uint64_t v12 = v5 + 7;
    uint64_t v13 = 1;
    while (1)
    {
      uint64_t v14 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        break;
      }
      if (*(v12 - 1) == v8 && *v12 == v9) {
        return v4;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        return v4;
      }
      v12 += 2;
      ++v13;
      if (v14 == v6) {
        goto LABEL_3;
      }
    }
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t sub_10054E494(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

void sub_10054E55C(void *a1)
{
  id v3 = [self defaultWorkspace];
  if (v3)
  {
    uint64_t v4 = v3;
    id v32 = 0;
    id v5 = [v3 getPreferredAppMarketplacesWithError:&v32];
    id v6 = v32;
    if (v5)
    {
      uint64_t v7 = v5;
      uint64_t v8 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
      id v9 = v6;

      if (v8[2])
      {
        uint64_t v11 = v8[4];
        uint64_t v10 = v8[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (a1[2])
        {
          uint64_t v13 = a1[4];
          uint64_t v12 = a1[5];
          if (v11 != v13 || v10 != v12)
          {
            char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            if ((v15 & 1) == 0)
            {
              uint64_t v16 = (void *)sub_100551B90();
              if ((sub_10054E494(v13, v12, v16) & 1) == 0)
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                uint64_t v17 = v16;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v17 = sub_10028ED9C(0, v16[2] + 1, 1, v16);
                }
                unint64_t v18 = v17[2];
                unint64_t v19 = v17[3];
                unint64_t v20 = v18 + 1;
                if (v18 >= v19 >> 1)
                {
                  unint64_t v31 = v18 + 1;
                  uint64_t v28 = v17;
                  unint64_t v29 = v17[2];
                  uint64_t v30 = sub_10028ED9C((void *)(v19 > 1), v18 + 1, 1, v28);
                  unint64_t v18 = v29;
                  unint64_t v20 = v31;
                  uint64_t v17 = v30;
                }
                v17[2] = v20;
                uint64_t v21 = &v17[2 * v18];
                v21[4] = v13;
                v21[5] = v12;
                swift_bridgeObjectRelease();
                uint64_t v16 = v17;
              }
              swift_bridgeObjectRelease();
              sub_100551F50((uint64_t)v16);
              if (v1)
              {
                swift_bridgeObjectRelease();
LABEL_23:

                return;
              }
            }
          }
        }
      }
      swift_bridgeObjectRelease();
      id v22 = v4;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      id v32 = 0;
      unsigned int v24 = [v22 setPreferredAppMarketplaces:isa error:&v32];

      if (v24)
      {
        id v25 = v32;
        static PrivateNotifications.priorityOrAllowedDevelopersChangedNotificationName.getter();
        uint64_t v26 = String.utf8CString.getter();
        swift_bridgeObjectRelease();
        notify_post((const char *)(v26 + 32));

        swift_release();
        return;
      }
    }
    id v27 = v32;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_23;
  }
}

void sub_10054E838()
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [self defaultWorkspace];
  if (v6)
  {
    uint64_t v7 = v6;
    id v45 = 0;
    id v8 = [v6 getPreferredAppMarketplacesWithError:&v45];
    id v9 = v45;
    if (!v8) {
      goto LABEL_22;
    }
    uint64_t v10 = v8;
    uint64_t v11 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v12 = v9;

    uint64_t v46 = v11;
    if (!v11[2]
      || ((v13 = *(void *)(v0 + 16), uint64_t v14 = *(void *)(v0 + 24), v11[4] == v13) ? (v15 = v11[5] == v14) : (v15 = 0),
          v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {

      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v19 = sub_1005533F0((uint64_t)v11, v0);
    if (v20) {
      goto LABEL_19;
    }
    uint64_t v21 = v19;
    v41[1] = v1;
    uint64_t v22 = v19 + 1;
    if (!__OFADD__(v19, 1))
    {
      unint64_t v23 = v11[2];
      if (v22 == v23)
      {
        unint64_t v24 = v19 + 1;
LABEL_17:
        if ((uint64_t)v24 >= v21)
        {
LABEL_20:
          sub_100553480(v21, v24);
          swift_bridgeObjectRetain();
          sub_100552FCC(0, 0, v13, v14);
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          id v45 = 0;
          unsigned __int8 v26 = [v7 setPreferredAppMarketplaces:isa error:&v45];

          id v9 = v45;
          if (v26)
          {
            id v27 = v45;
LABEL_23:

            return;
          }
LABEL_22:
          id v28 = v9;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          goto LABEL_23;
        }
        __break(1u);
LABEL_19:
        uint64_t v21 = v11[2];
        unint64_t v24 = v21;
        goto LABEL_20;
      }
      uint64_t v29 = 2 * v19;
      unint64_t v24 = v19 + 1;
      uint64_t v44 = v19 + 1;
      while ((v22 & 0x8000000000000000) == 0)
      {
        if (v24 >= v23) {
          goto LABEL_44;
        }
        uint64_t v30 = &v11[v29];
        if (v11[v29 + 6] != v13 || v11[v29 + 7] != v14)
        {
          if (_stringCompareWithSmolCheck(_:_:expecting:)())
          {
            uint64_t v22 = v44;
          }
          else
          {
            uint64_t v22 = v44;
            if (v24 != v21)
            {
              if (v21 >= v23) {
                goto LABEL_46;
              }
              id v32 = &v11[2 * v21 + 4];
              uint64_t v34 = *v32;
              uint64_t v33 = v32[1];
              uint64_t v35 = v30[6];
              uint64_t v36 = v30[7];
              uint64_t v42 = v34;
              uint64_t v43 = v35;
              uint64_t v37 = v33;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v11 = sub_10055AC6C(v11);
              }
              uint64_t v38 = &v11[2 * v21];
              v38[4] = v43;
              v38[5] = v36;
              swift_bridgeObjectRelease();
              if (v24 >= v11[2]) {
                goto LABEL_47;
              }
              uint64_t v39 = &v11[v29];
              v39[6] = v42;
              v39[7] = v37;
              swift_bridgeObjectRelease();
              uint64_t v46 = v11;
              uint64_t v22 = v44;
            }
            if (__OFADD__(v21++, 1)) {
              goto LABEL_45;
            }
          }
        }
        ++v24;
        unint64_t v23 = v11[2];
        v29 += 2;
        if (v24 == v23) {
          goto LABEL_17;
        }
      }
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
    }
    __break(1u);
  }
  static Logger.storage.getter();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    unint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Unable to handle emergency reset because LSApplicationWorkspace was unavailable", v18, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_10054EC70@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10054EF1C(a1, (uint64_t (*)(uint64_t))sub_10055AC80, (uint64_t (*)(void))&type metadata accessor for ApprovedDeveloper, a2);
}

uint64_t sub_10054EC9C(unint64_t a1)
{
  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = sub_10055AC6C(v3);
  }
  unint64_t v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v5 = v4 - 1;
    uint64_t v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      uint64_t v7 = &v3[2 * a1];
      uint64_t v8 = v7[4];
      memmove(v7 + 4, v7 + 6, 16 * v6);
      v3[2] = v5;
      *uint64_t v1 = v3;
      return v8;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10054ED7C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v5 = sub_10055AD6C(v5);
  }
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v7 = v6 - 1;
  uint64_t v8 = *(void *)(type metadata accessor for DownloadRequest() - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  unint64_t v10 = v5 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + v9 * a1;
  uint64_t result = sub_1001C77F8(v10, a2);
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v9 > 0 || v10 >= v10 + v9 + v9 * (v7 - a1))
  {
    uint64_t result = swift_arrayInitWithTakeFrontToBack();
  }
  else if (v9)
  {
    uint64_t result = swift_arrayInitWithTakeBackToFront();
  }
  *(void *)(v5 + 16) = v7;
  *uint64_t v2 = v5;
  return result;
}

uint64_t sub_10054EEF0@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10054EF1C(a1, (uint64_t (*)(uint64_t))sub_10055AD80, (uint64_t (*)(void))&type metadata accessor for XPCApp, a2);
}

uint64_t sub_10054EF1C@<X0>(unint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v9 = a2(v9);
  }
  unint64_t v10 = *(void *)(v9 + 16);
  if (v10 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v11 = v10 - 1;
  uint64_t v12 = a3(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = v9 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)) + v14 * a1;
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v13 + 32))(a4, v15, v12);
  if ((uint64_t)(v11 - a1) < 0)
  {
LABEL_15:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v14 > 0 || v15 >= v15 + v14 + v14 * (v11 - a1))
  {
    uint64_t result = swift_arrayInitWithTakeFrontToBack();
  }
  else if (v14)
  {
    uint64_t result = swift_arrayInitWithTakeBackToFront();
  }
  *(void *)(v9 + 16) = v11;
  *unint64_t v4 = v9;
  return result;
}

unint64_t sub_10054F088(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v4 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return 0;
  }
  uint64_t v7 = 4 * v4;
  unint64_t v8 = 15;
  while (String.subscript.getter() != a1 || v9 != a2)
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v10) {
      return v8;
    }
    unint64_t v8 = String.index(after:)();
    if (v7 == v8 >> 14) {
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t sub_10054F178(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v14 = a4 >> 14;
  if (a4 >> 14 == a3 >> 14) {
    return 0;
  }
  if (Substring.subscript.getter() == a1 && v8 == a2)
  {
    unint64_t v4 = a3;
LABEL_6:
    swift_bridgeObjectRelease();
  }
  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v9)
    {
      return a3;
    }
    else
    {
      while (1)
      {
        unint64_t v11 = Substring.index(after:)();
        if (v11 >> 14 == v14) {
          return 0;
        }
        unint64_t v4 = v11;
        if (Substring.subscript.getter() == a1 && v12 == a2) {
          goto LABEL_6;
        }
        char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v10) {
          return v4;
        }
      }
    }
  }
  return v4;
}

uint64_t sub_10054F2F4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  BOOL v7 = a3[4] == a1 && a3[5] == a2;
  if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return 0;
  }
  uint64_t v9 = 0;
  char v10 = a3 + 7;
  uint64_t v11 = 1;
  while (1)
  {
    if (v3 == v11) {
      return 0;
    }
    ++v9;
    if (*(v10 - 1) == a1 && *v10 == a2) {
      break;
    }
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = v11++;
    v10 += 2;
    if (v13) {
      return result;
    }
  }
  return v9;
}

void sub_10054F3DC(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = [self defaultWorkspace];
  if (v10)
  {
    uint64_t v11 = v10;
    *(void *)keyExistsAndHasValidFormat = 0;
    id v12 = [v10 getPreferredAppMarketplacesWithError:keyExistsAndHasValidFormat];
    id v13 = *(id *)keyExistsAndHasValidFormat;
    if (v12)
    {
      unint64_t v14 = v12;
      unint64_t v15 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
      id v16 = v13;

      if (sub_10054E494(a1, a2, v15))
      {

LABEL_21:
        swift_bridgeObjectRelease();
        return;
      }
      uint64_t v52 = a1;
      keyExistsAndHasValidFormat[0] = 0;
      uint64_t v50 = "{ RestoreBatch: [";
      unint64_t v23 = (__CFString *)String._bridgeToObjectiveC()();
      uint64_t v51 = "HasEverHadMultipleMarketplaces";
      unint64_t v24 = (__CFString *)String._bridgeToObjectiveC()();
      int AppBooleanValue = CFPreferencesGetAppBooleanValue(v23, v24, keyExistsAndHasValidFormat);

      if (!keyExistsAndHasValidFormat[0] || !AppBooleanValue)
      {
        unsigned __int8 v26 = (void *)sub_100551B90();
        uint64_t v27 = *(void *)(v2 + 16);
        uint64_t v28 = *(void *)(v2 + 24);
        if ((sub_10054E494(v27, v28, v26) & 1) == 0)
        {
          uint64_t v49 = v27;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v29 = v26;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v29 = sub_10028ED9C(0, v26[2] + 1, 1, v26);
          }
          unint64_t v31 = v29[2];
          unint64_t v30 = v29[3];
          unint64_t v32 = v31 + 1;
          if (v31 >= v30 >> 1)
          {
            unint64_t v48 = v31 + 1;
            uint64_t v47 = sub_10028ED9C((void *)(v30 > 1), v31 + 1, 1, v29);
            unint64_t v32 = v48;
            uint64_t v29 = v47;
          }
          v29[2] = v32;
          uint64_t v33 = &v29[2 * v31];
          v33[4] = v49;
          v33[5] = v28;
          swift_bridgeObjectRelease();
          unsigned __int8 v26 = v29;
        }
        sub_100551F50((uint64_t)v26);
        if (v3)
        {

          swift_bridgeObjectRelease();
          goto LABEL_21;
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v15 = sub_10028ED9C(0, v15[2] + 1, 1, v15);
      }
      uint64_t v34 = v52;
      unint64_t v36 = v15[2];
      unint64_t v35 = v15[3];
      if (v36 >= v35 >> 1) {
        unint64_t v15 = sub_10028ED9C((void *)(v35 > 1), v36 + 1, 1, v15);
      }
      _OWORD v15[2] = v36 + 1;
      uint64_t v37 = &v15[2 * v36];
      v37[4] = v34;
      v37[5] = a2;
      swift_bridgeObjectRetain();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      *(void *)keyExistsAndHasValidFormat = 0;
      unsigned int v39 = [v11 setPreferredAppMarketplaces:isa error:keyExistsAndHasValidFormat];

      if (v39)
      {
        id v40 = *(id *)keyExistsAndHasValidFormat;
        static PrivateNotifications.priorityOrAllowedDevelopersChangedNotificationName.getter();
        uint64_t v41 = String.utf8CString.getter();
        swift_bridgeObjectRelease();
        notify_post((const char *)(v41 + 32));
        swift_release();
        unint64_t v42 = v15[2];
        swift_bridgeObjectRelease();
        if (v42 >= 2)
        {
          if (_stringCompareWithSmolCheck(_:_:expecting:)())
          {
            id v43 = [self standardUserDefaults];
          }
          else
          {
            id v44 = objc_allocWithZone((Class)NSUserDefaults);
            NSString v45 = String._bridgeToObjectiveC()();
            id v43 = [v44 initWithSuiteName:v45];
          }
          if (v43)
          {
            NSString v46 = String._bridgeToObjectiveC()();
            [v43 setBool:1 forKey:v46];

            return;
          }
        }
LABEL_33:

        return;
      }
      id v22 = *(id *)keyExistsAndHasValidFormat;
      swift_bridgeObjectRelease();
    }
    else
    {
      id v22 = *(id *)keyExistsAndHasValidFormat;
    }
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_33;
  }
  static Logger.storage.getter();
  swift_bridgeObjectRetain_n();
  os_log_type_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v52 = a1;
    char v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v51 = v3;
    *(void *)keyExistsAndHasValidFormat = v21;
    *(_DWORD *)char v20 = 136315138;
    uint64_t v50 = (const char *)(v20 + 4);
    swift_bridgeObjectRetain();
    uint64_t v53 = sub_1000143F4(v52, a2, (uint64_t *)keyExistsAndHasValidFormat);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Unable to add %s to the marketplace list because LSApplicationWorkspace was unavailable", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void sub_10054FA44(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void (***)(char *, uint64_t))(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v34 - v7;
  uint64_t v9 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v43 = 0;
  uint64_t v16 = container_system_path_for_identifier();
  uint64_t v41 = (void *)v16;
  if (v43 <= 1 && v16)
  {
    uint64_t v39 = v2;
    id v40 = *(void (***)(char *, uint64_t))(v13 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v40)(v11, 1, 1, v12);
    URL.init(fileURLWithFileSystemRepresentation:isDirectory:relativeTo:)();
    sub_10001729C((uint64_t)v11, &qword_10065C3C0);
    id v17 = [self defaultManager];
    URL._bridgeToObjectiveC()(v18);
    char v20 = v19;
    v44[0] = 0;
    unsigned int v21 = [v17 createDirectoryAtURL:v19 withIntermediateDirectories:1 attributes:0 error:v44];

    if (v21)
    {
      id v22 = v44[0];
      unint64_t v24 = v40;
      unint64_t v23 = v41;
    }
    else
    {
      uint64_t v38 = a1;
      id v28 = v44[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      static Logger.storage.getter();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v30))
      {
        os_log_t v37 = v29;
        unint64_t v31 = (uint8_t *)swift_slowAlloc();
        unint64_t v35 = (void *)swift_slowAlloc();
        unint64_t v36 = v31;
        *(_DWORD *)unint64_t v31 = 138412290;
        v34[1] = v31 + 4;
        swift_errorRetain();
        unint64_t v32 = (void *)_swift_stdlib_bridgeErrorToNSError();
        v44[0] = v32;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v35 = v32;
        swift_errorRelease();
        swift_errorRelease();
        os_log_t v33 = v37;
        _os_log_impl((void *)&_mh_execute_header, v37, v30, "Unable to obtain container path: error %@", v36, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      unint64_t v24 = v40;
      unint64_t v23 = v41;
      v3[1](v6, v39);
      a1 = v38;
    }
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a1, v15, v12);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v24)(a1, 0, 1, v12);
LABEL_14:
    free(v23);
    return;
  }
  static Logger.storage.getter();
  id v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    id v40 = v3;
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 134217984;
    swift_beginAccess();
    unint64_t v42 = v43;
    uint64_t v3 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Unable to obtain container path: error %llu", v27, 0xCu);
    swift_slowDealloc();
  }

  v3[1](v8, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a1, 1, 1, v12);
  unint64_t v23 = v41;
  if (v41) {
    goto LABEL_14;
  }
}

uint64_t sub_10054FFF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_100550014, 0, 0);
}

uint64_t sub_100550014()
{
  sub_100550090();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100550090()
{
  uint64_t v1 = v0;
  uint64_t v227 = type metadata accessor for Logger();
  uint64_t v229 = *(void *)(v227 - 8);
  uint64_t v2 = __chkstk_darwin(v227);
  os_log_t v220 = (os_log_t)((char *)&v213 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v218 = ((char *)&v213 - v5);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v217 = ((char *)&v213 - v7);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v219 = (char *)&v213 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = ((char *)&v213 - v11);
  __chkstk_darwin(v10);
  uint64_t v14 = ((char *)&v213 - v13);
  uint64_t v15 = type metadata accessor for LogKey.Prefix();
  __chkstk_darwin(v15);
  (*(void (**)(char *, void))(v17 + 104))((char *)&v213 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for LogKey.Prefix.internal(_:));
  id v18 = objc_allocWithZone((Class)type metadata accessor for LogKey());
  uint64_t v19 = (void *)LogKey.init(prefix:)();
  static Logger.storage.getter();
  char v20 = v19;
  unsigned int v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  BOOL v23 = os_log_type_enabled(v21, v22);
  uint64_t v225 = v20;
  v231 = v12;
  if (v23)
  {
    uint64_t v24 = swift_slowAlloc();
    long long v230 = v0;
    id v25 = (uint8_t *)v24;
    uint64_t v26 = swift_slowAlloc();
    uint64_t v228 = (uint64_t)v14;
    uint64_t v27 = (void *)v26;
    *(_DWORD *)id v25 = 138412290;
    aBlock[0] = (uint64_t)v20;
    id v28 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v27 = v20;

    _os_log_impl((void *)&_mh_execute_header, v21, v22, "[%@] Starting data consistency check", v25, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    uint64_t v14 = v228;
    swift_slowDealloc();
    uint64_t v1 = v230;
    swift_slowDealloc();
  }
  else
  {

    unsigned int v21 = v20;
  }

  uint64_t v29 = *(void (**)(NSObject *, uint64_t))(v229 + 8);
  v229 += 8;
  unint64_t v222 = v29;
  v29(v14, v227);
  uint64_t v30 = v221;
  uint64_t v31 = sub_100551B90();
  v233 = (void *)v31;
  v234 = (void *)v31;
  swift_bridgeObjectRetain_n();
  swift_retain();
  uint64_t v32 = sub_10055468C((uint64_t)&v233, v30);
  swift_release();
  int64_t v33 = v233[2];
  if (v33 < v32) {
    goto LABEL_230;
  }
  uint64_t v226 = v1;
  sub_100553480(v32, v33);
  sub_1000172F8(&qword_10065D360);
  uint64_t inited = (void *)swift_initStackObject();
  *((_OWORD *)inited + 1) = xmmword_1005A3EC0;
  uint64_t v35 = *(void *)(v30 + 24);
  inited[4] = *(void *)(v30 + 16);
  inited[5] = v35;
  unint64_t v36 = self;
  swift_bridgeObjectRetain();
  os_log_t v37 = [v36 enumeratorWithOptions:192];
  aBlock[4] = (uint64_t)sub_1005526AC;
  aBlock[5] = 0;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1004E598C;
  aBlock[3] = (uint64_t)&unk_10064BF28;
  uint64_t v38 = _Block_copy(aBlock);
  [v37 setFilter:v38];
  _Block_release(v38);
  id v39 = [v37 nextObject];
  unint64_t v224 = v37;
  if (v39)
  {
    id v40 = v39;
    p_base_prots = &XPCClientRegistry.base_prots;
    do
    {
      long long v230 = inited;
      while (1)
      {
        id v42 = objc_msgSend(v40, (SEL)p_base_prots[430]);
        if (v42) {
          break;
        }

        id v40 = [v37 nextObject];
        if (!v40)
        {
          uint64_t inited = v230;
          goto LABEL_44;
        }
      }
      unint64_t v43 = v42;
      uint64_t v223 = v31;
      uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v46 = v45;

      uint64_t v47 = v233;
      uint64_t v48 = v233[2];
      if (v48)
      {
        uint64_t v49 = 0;
        uint64_t v50 = 0;
        uint64_t v51 = v233 + 5;
        while (1)
        {
          BOOL v52 = *(v51 - 1) == v44 && *v51 == v46;
          if (v52 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          v51 += 2;
          ++v50;
          v49 += 2;
          if (v48 == v50)
          {
            uint64_t v50 = v48;
            goto LABEL_40;
          }
        }
        unint64_t v53 = v50 + 1;
        if (__OFADD__(v50, 1)) {
          goto LABEL_240;
        }
        if (v53 != v48)
        {
          swift_bridgeObjectRetain();
          do
          {
            unint64_t v56 = v47[2];
            if (v53 >= v56) {
              goto LABEL_222;
            }
            os_log_type_t v57 = &v47[v49];
            BOOL v58 = v47[v49 + 6] == v44 && v47[v49 + 7] == v46;
            if (!v58 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            {
              if (v53 != v50)
              {
                if (v50 >= v56) {
                  goto LABEL_234;
                }
                uint64_t v59 = (uint64_t)&v47[2 * v50 + 4];
                uint64_t v60 = *(void *)(v59 + 8);
                long long v216 = *(NSObject **)v59;
                uint64_t v61 = v57[6];
                uint64_t v62 = v57[7];
                uint64_t v228 = v61;
                uint64_t v63 = v60;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v47 = sub_10055AC6C(v47);
                }
                uint64_t v64 = &v47[2 * v50];
                v64[4] = v228;
                v64[5] = v62;
                swift_bridgeObjectRelease();
                if (v53 >= v47[2])
                {
LABEL_235:
                  __break(1u);
                  goto LABEL_236;
                }
                int v54 = &v47[v49];
                v54[6] = v216;
                v54[7] = v63;
                swift_bridgeObjectRelease();
                v233 = v47;
              }
              BOOL v55 = __OFADD__(v50++, 1);
              if (v55) {
                goto LABEL_229;
              }
            }
            ++v53;
            v49 += 2;
          }
          while (v53 != v47[2]);
          swift_bridgeObjectRelease();
        }
LABEL_40:
        int64_t v65 = v47[2];
        p_base_prots = (__objc2_prot_list **)(&XPCClientRegistry + 40);
        if (v65 < v50) {
          goto LABEL_233;
        }
      }
      else
      {
        int64_t v65 = 0;
        uint64_t v50 = 0;
      }
      sub_100553480(v50, v65);
      unint64_t v67 = v230[2];
      unint64_t v66 = v230[3];
      if (v67 >= v66 >> 1) {
        long long v230 = sub_10028ED9C((void *)(v66 > 1), v67 + 1, 1, v230);
      }
      uint64_t v68 = v230;
      v230[2] = v67 + 1;
      uint64_t inited = v68;
      id v69 = &v68[2 * v67];
      v69[4] = v44;
      v69[5] = v46;

      os_log_t v37 = v224;
      id v40 = [v224 nextObject];
      uint64_t v31 = v223;
    }
    while (v40);
  }
LABEL_44:
  uint64_t v70 = v233[2];
  long long v230 = inited;
  if (v70)
  {
    swift_bridgeObjectRelease();
    uint64_t v71 = v231;
    static Logger.storage.getter();
    uint64_t v72 = v225;
    uint64_t v73 = Logger.logObject.getter();
    os_log_type_t v74 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v73, v74))
    {
      uint64_t v75 = swift_slowAlloc();
      long long v76 = (void *)swift_slowAlloc();
      uint64_t v228 = swift_slowAlloc();
      aBlock[0] = v228;
      *(_DWORD *)uint64_t v75 = 138412546;
      v235 = v72;
      long long v77 = v72;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *long long v76 = v72;

      *(_WORD *)(v75 + 12) = 2082;
      swift_beginAccess();
      uint64_t v232 = (uint64_t)v233;
      swift_bridgeObjectRetain();
      sub_1000172F8((uint64_t *)&unk_10065C5D0);
      sub_10017B8C8();
      uint64_t v78 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v80 = v79;
      swift_bridgeObjectRelease();
      uint64_t v232 = sub_1000143F4(v78, v80, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "[%@] Removing non-installed apps from disabled sheet list: %{public}s", (uint8_t *)v75, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v81 = v231;
    }
    else
    {

      uint64_t v81 = v71;
    }
    v222(v81, v227);
    uint64_t v82 = v234;
    uint64_t v83 = v226;
    uint64_t v84 = sub_10054E358((uint64_t)v234, (uint64_t)&v233);
    uint64_t v226 = v83;
    if (v85) {
      goto LABEL_53;
    }
    uint64_t v86 = v84;
    int64_t v87 = v84 + 1;
    if (__OFADD__(v84, 1)) {
      goto LABEL_239;
    }
    if (v87 == v82[2])
    {
LABEL_51:
      if (v87 >= v86)
      {
LABEL_54:
        sub_100553480(v86, v87);
        uint64_t v31 = (uint64_t)v234;
        swift_bridgeObjectRetain();
        uint64_t inited = v230;
        os_log_t v37 = v224;
        goto LABEL_55;
      }
      __break(1u);
LABEL_53:
      uint64_t v86 = v82[2];
      int64_t v87 = v86;
      goto LABEL_54;
    }
    uint64_t v132 = v84;
    uint64_t v228 = v84 + 1;
    swift_beginAccess();
    uint64_t v133 = v228;
    uint64_t v86 = v132;
    int64_t v87 = v228;
    while (1)
    {
      if (v133 < 0) {
        goto LABEL_217;
      }
      unint64_t v134 = v82[2];
      if (v87 >= v134)
      {
LABEL_218:
        __break(1u);
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
LABEL_221:
        __break(1u);
LABEL_222:
        __break(1u);
LABEL_223:
        __break(1u);
LABEL_224:
        __break(1u);
LABEL_225:
        __break(1u);
LABEL_226:
        __break(1u);
LABEL_227:
        __break(1u);
LABEL_228:
        __break(1u);
LABEL_229:
        __break(1u);
LABEL_230:
        __break(1u);
LABEL_231:
        __break(1u);
LABEL_232:
        __break(1u);
LABEL_233:
        __break(1u);
LABEL_234:
        __break(1u);
        goto LABEL_235;
      }
      int v135 = &v82[2 * v87 + 4];
      uint64_t v136 = v233;
      uint64_t v137 = v233[2];
      if (!v137) {
        goto LABEL_135;
      }
      uint64_t v138 = *v135;
      uint64_t v139 = v135[1];
      if (v233[4] != *v135 || v233[5] != v139)
      {
        v231 = v86;
        if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
          goto LABEL_133;
        }
        uint64_t v86 = (uint64_t)v231;
        uint64_t v133 = v228;
        if (v137 == 1) {
          goto LABEL_135;
        }
        if (v136[6] != v138 || v136[7] != v139) {
          break;
        }
      }
LABEL_142:
      BOOL v55 = __OFADD__(v87++, 1);
      if (v55) {
        goto LABEL_219;
      }
      if (v87 == v82[2]) {
        goto LABEL_51;
      }
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v86 = (uint64_t)v231;
      uint64_t v133 = v228;
      if (v137 != 2)
      {
        unint64_t v150 = v136 + 9;
        uint64_t v151 = 2;
        while (!__OFADD__(v151, 1))
        {
          if (*(v150 - 1) == v138 && *v150 == v139) {
            goto LABEL_142;
          }
          long long v216 = (v151 + 1);
          uint64_t v223 = v151;
          if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
            goto LABEL_133;
          }
          v150 += 2;
          uint64_t v151 = v223 + 1;
          uint64_t v86 = (uint64_t)v231;
          uint64_t v133 = v228;
          if (v216 == v137) {
            goto LABEL_135;
          }
        }
LABEL_236:
        __break(1u);
LABEL_237:
        __break(1u);
LABEL_238:
        __break(1u);
LABEL_239:
        __break(1u);
LABEL_240:
        __break(1u);
      }
LABEL_135:
      if (v86 != v87)
      {
        if (v86 >= v134) {
          goto LABEL_227;
        }
        uint64_t v141 = v86;
        uint64_t v142 = &v82[2 * v86 + 4];
        uint64_t v143 = *v142;
        uint64_t v144 = v142[1];
        uint64_t v145 = *v135;
        uint64_t v146 = v135[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v82 = sub_10055AC6C(v82);
        }
        v147 = &v82[2 * v141 + 4];
        void *v147 = v145;
        v147[1] = v146;
        swift_bridgeObjectRelease();
        if (v87 >= v82[2]) {
          goto LABEL_228;
        }
        uint64_t v148 = &v82[2 * v87 + 4];
        *uint64_t v148 = v143;
        v148[1] = v144;
        swift_bridgeObjectRelease();
        v234 = v82;
        uint64_t v86 = v141;
        uint64_t v133 = v228;
      }
      BOOL v55 = __OFADD__(v86++, 1);
      if (v55) {
        goto LABEL_225;
      }
      goto LABEL_142;
    }
LABEL_133:
    uint64_t v86 = (uint64_t)v231;
    uint64_t v133 = v228;
    goto LABEL_142;
  }
LABEL_55:
  uint64_t v88 = [self defaultWorkspace];
  if (!v88)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static Logger.storage.getter();
    uint64_t v98 = v225;
    long long v99 = Logger.logObject.getter();
    os_log_type_t v100 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v99, v100))
    {
      unint64_t v101 = (uint8_t *)swift_slowAlloc();
      unint64_t v102 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v101 = 138412290;
      uint64_t v232 = (uint64_t)v98;
      uint64_t v103 = v98;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v102 = v98;

      _os_log_impl((void *)&_mh_execute_header, v99, v100, "[%@] Could not ensure distributor preferences data consistency because LSApplicationWorkspace was unavailable", v101, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v104 = v224;
      swift_slowDealloc();
    }
    else
    {

      long long v99 = v98;
      uint64_t v104 = v98;
    }

    v222(v220, v227);
    goto LABEL_210;
  }
  v236 = 0;
  unint64_t v89 = v88;
  id v90 = [v88 getPreferredAppMarketplacesWithError:&v236];
  uint64_t v91 = v236;
  if (!v90)
  {
    int v131 = v236;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_bridgeObjectRelease();

    goto LABEL_121;
  }
  long long v92 = v90;
  long long v216 = v89;
  uint64_t v93 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v94 = v91;

  uint64_t v232 = (uint64_t)v93;
  os_log_t v95 = v93[2];
  uint64_t v223 = v31;
  if (!v95)
  {
    int64_t v153 = 0;
    uint64_t v96 = 0;
    goto LABEL_165;
  }
  uint64_t v96 = 0;
  v231 = inited[2];
  long long v97 = inited + 7;
  os_log_t v220 = v95;
  while (1)
  {
    if (!v231)
    {
      uint64_t v96 = 0;
      unint64_t v113 = 1;
      goto LABEL_80;
    }
    unint64_t v105 = &v93[2 * v96 + 4];
    uint64_t v106 = *v105;
    uint64_t v107 = v105[1];
    BOOL v108 = inited[4] == *v105 && inited[5] == v107;
    if (!v108 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      break;
    }
LABEL_62:
    if (++v96 == v95) {
      goto LABEL_163;
    }
  }
  if (v231 == 1) {
    goto LABEL_79;
  }
  uint64_t v109 = v97;
  uint64_t v110 = 1;
  do
  {
    unint64_t v111 = (v110 + 1);
    if (__OFADD__(v110, 1)) {
      goto LABEL_221;
    }
    BOOL v112 = *(v109 - 1) == v106 && *v109 == v107;
    if (v112 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t inited = v230;
      os_log_t v95 = v220;
      goto LABEL_62;
    }
    v109 += 2;
    ++v110;
  }
  while (v111 != v231);
  uint64_t inited = v230;
  os_log_t v95 = v220;
LABEL_79:
  unint64_t v113 = v96 + 1;
  if (__OFADD__(v96, 1))
  {
    __break(1u);
LABEL_163:
    uint64_t v96 = (uint64_t)v95;
    goto LABEL_164;
  }
LABEL_80:
  if (v113 == v95) {
    goto LABEL_164;
  }
  unint64_t v214 = (char *)(inited + 9);
  do
  {
    unint64_t v114 = v93[2];
    if (v113 >= v114) {
      goto LABEL_223;
    }
    if (!v231) {
      goto LABEL_97;
    }
    uint64_t v228 = (uint64_t)v93;
    uint64_t v115 = v93 + 4;
    uint64_t v116 = &v93[2 * v113 + 4];
    uint64_t v117 = *v116;
    uint64_t v118 = v116[1];
    BOOL v119 = inited[4] == *v116 && inited[5] == v118;
    if (v119 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_89;
    }
    if (v231 == 1) {
      goto LABEL_101;
    }
    BOOL v127 = inited[6] == v117 && inited[7] == v118;
    if (v127 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_89;
    }
    if (v231 == 2) {
      goto LABEL_101;
    }
    uint64_t v128 = v214;
    uint64_t v129 = 2;
    do
    {
      if (__OFADD__(v129, 1)) {
        goto LABEL_238;
      }
      BOOL v130 = *(v128 - 1) == v117 && *v128 == v118;
      if (v130 || (*(void *)&long long v215 = v129 + 1, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        uint64_t inited = v230;
        os_log_t v95 = v220;
LABEL_89:
        if (v96 == v113)
        {
          uint64_t v93 = (void *)v228;
        }
        else
        {
          if (v96 >= v114) {
            goto LABEL_231;
          }
          char v120 = &v115[2 * v96];
          uint64_t v122 = *v120;
          uint64_t v121 = v120[1];
          uint64_t v123 = *v116;
          uint64_t v124 = v116[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v93 = (void *)v228;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v93 = sub_10055AC6C(v93);
          }
          uint64_t v125 = &v93[2 * v96 + 4];
          *uint64_t v125 = v123;
          v125[1] = v124;
          swift_bridgeObjectRelease();
          if (v113 >= v93[2]) {
            goto LABEL_232;
          }
          unint64_t v126 = &v93[2 * v113 + 4];
          *unint64_t v126 = v122;
          v126[1] = v121;
          swift_bridgeObjectRelease();
          uint64_t v232 = (uint64_t)v93;
          uint64_t inited = v230;
          os_log_t v95 = v220;
        }
        BOOL v55 = __OFADD__(v96++, 1);
        if (!v55)
        {
LABEL_97:
          BOOL v55 = __OFADD__(v113++, 1);
          if (!v55) {
            goto LABEL_98;
          }
          goto LABEL_224;
        }
        goto LABEL_226;
      }
      v128 += 2;
      ++v129;
    }
    while (v215 != v231);
    uint64_t inited = v230;
    os_log_t v95 = v220;
LABEL_101:
    uint64_t v93 = (void *)v228;
    BOOL v55 = __OFADD__(v113++, 1);
    if (v55) {
      goto LABEL_224;
    }
LABEL_98:
    ;
  }
  while (v113 != v93[2]);
LABEL_164:
  int64_t v153 = v93[2];
  if (v153 < v96) {
    goto LABEL_237;
  }
LABEL_165:
  sub_100553480(v96, v153);
  uint64_t v154 = v230;
  uint64_t v155 = v232;
  v156 = *(NSObject **)(v232 + 16);
  BOOL v157 = v95 != v156;
  id v158 = v95;
  uint64_t v159 = v230[2];
  if (!v159)
  {
    if (v158 == v156) {
      goto LABEL_205;
    }
    goto LABEL_202;
  }
  LODWORD(v220) = v157;
  v160 = v230 + 4;
  swift_bridgeObjectRetain();
  unint64_t v161 = 0;
  *(void *)&long long v162 = 138412546;
  long long v215 = v162;
  unint64_t v214 = (char *)&type metadata for Any + 8;
  uint64_t v228 = (uint64_t)(v154 + 4);
LABEL_167:
  v231 = v155 + 9;
  do
  {
    if (v161 >= v154[2])
    {
      __break(1u);
LABEL_217:
      __break(1u);
      goto LABEL_218;
    }
    v163 = &v160[2 * v161];
    uint64_t v165 = *v163;
    unint64_t v164 = v163[1];
    ++v161;
    Class isa = v155[2].isa;
    if (!isa) {
      goto LABEL_190;
    }
    BOOL v167 = v155[4].isa == (Class)v165 && v155[5].isa == (Class)v164;
    if (!v167 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if (isa == (Class)1) {
        goto LABEL_190;
      }
      if ((v155[6].isa != (Class)v165 || v155[7].isa != (Class)v164)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        if (isa == (Class)2)
        {
LABEL_190:
          swift_bridgeObjectRetain();
          uint64_t v172 = v219;
          static Logger.storage.getter();
          uint64_t v173 = v225;
          unint64_t v174 = v225;
          swift_bridgeObjectRetain_n();
          unint64_t v175 = v174;
          unint64_t v176 = Logger.logObject.getter();
          os_log_type_t v177 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v176, v177))
          {
            uint64_t v178 = v173;
            uint64_t v179 = swift_slowAlloc();
            uint64_t v180 = swift_slowAlloc();
            os_log_t v220 = v176;
            v181 = (void *)v180;
            v231 = swift_slowAlloc();
            v236 = v231;
            *(_DWORD *)uint64_t v179 = v215;
            *(void *)(v179 + 4) = v175;
            void *v181 = v178;

            *(_WORD *)(v179 + 12) = 2082;
            swift_bridgeObjectRetain();
            *(void *)(v179 + 14) = sub_1000143F4(v165, v164, (uint64_t *)&v236);
            swift_bridgeObjectRelease_n();
            os_log_t v182 = v220;
            sub_1000172F8(&qword_10065DB10);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v183 = v219;
          }
          else
          {

            swift_bridgeObjectRelease_n();
            uint64_t v183 = v172;
          }
          v222(v183, v227);
          uint64_t v155 = v232;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v155 = sub_10028ED9C(0, (int64_t)v155[2].isa + 1, 1, v155);
          }
          v160 = (void *)v228;
          unint64_t v185 = (unint64_t)v155[2].isa;
          unint64_t v184 = (unint64_t)v155[3].isa;
          if (v185 >= v184 >> 1) {
            uint64_t v155 = sub_10028ED9C((void *)(v184 > 1), v185 + 1, 1, v155);
          }
          v155[2].Class isa = (Class)(v185 + 1);
          unint64_t v186 = &v155[2 * v185];
          v186[4].Class isa = (Class)v165;
          v186[5].Class isa = (Class)v164;
          uint64_t v232 = (uint64_t)v155;
          LODWORD(v220) = 1;
          uint64_t v154 = v230;
          if (v161 == v159)
          {
            swift_bridgeObjectRelease();
            goto LABEL_202;
          }
          goto LABEL_167;
        }
        long long v168 = v231;
        uint64_t v169 = 2;
        while (1)
        {
          uint64_t v170 = v169 + 1;
          if (__OFADD__(v169, 1)) {
            goto LABEL_220;
          }
          BOOL v171 = v168[-1].isa == (Class)v165 && v168->isa == (Class)v164;
          if (v171 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          v168 += 2;
          ++v169;
          if ((Class)v170 == isa) {
            goto LABEL_190;
          }
        }
        uint64_t v154 = v230;
        v160 = (void *)v228;
      }
    }
  }
  while (v161 != v159);
  swift_bridgeObjectRelease();
  if (v220)
  {
LABEL_202:
    swift_bridgeObjectRelease();
    uint64_t v187 = (uint64_t)v234;
    uint64_t v188 = swift_bridgeObjectRetain();
    v189 = v226;
    sub_100551F50(v188);
    if (v189)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease_n();
      return swift_bridgeObjectRelease();
    }
    uint64_t v226 = 0;
    swift_bridgeObjectRelease();
    Class v201 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v236 = 0;
    uint64_t v202 = v216;
    unsigned int v203 = [v216 setPreferredAppMarketplaces:v201 error:&v236];

    if (v203)
    {
      uint64_t v223 = v187;
      v204 = v236;
      static PrivateNotifications.priorityOrAllowedDevelopersChangedNotificationName.getter();
      uint64_t v205 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      notify_post((const char *)(v205 + 32));
      swift_release();
      static Logger.storage.getter();
      v206 = v225;
      v207 = Logger.logObject.getter();
      os_log_type_t v208 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v207, v208))
      {
        v209 = (uint8_t *)swift_slowAlloc();
        v210 = (void *)swift_slowAlloc();
        uint64_t v211 = v207;
        *(_DWORD *)v209 = 138412290;
        v236 = v206;
        uint64_t v198 = v206;
        uint64_t v197 = v211;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v210 = v206;

        _os_log_impl((void *)&_mh_execute_header, v211, v208, "[%@] Distributor preference data consistency check complete with updates", v209, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        uint64_t v199 = v224;
        v191 = v217;
LABEL_207:
        uint64_t v200 = v216;
      }
      else
      {

        uint64_t v198 = v216;
        uint64_t v197 = v206;
        uint64_t v199 = v206;
        uint64_t v200 = v206;
        v191 = v217;
      }
      goto LABEL_209;
    }
    long long v212 = v236;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_bridgeObjectRelease();

LABEL_121:
    return swift_bridgeObjectRelease();
  }
LABEL_205:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v191 = v218;
  static Logger.storage.getter();
  os_log_t v192 = v225;
  uint64_t v193 = Logger.logObject.getter();
  os_log_type_t v194 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v193, v194))
  {
    v195 = (uint8_t *)swift_slowAlloc();
    id v196 = (void *)swift_slowAlloc();
    *(_DWORD *)v195 = 138412290;
    v236 = v192;
    uint64_t v197 = v193;
    uint64_t v198 = v192;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v196 = v192;

    _os_log_impl((void *)&_mh_execute_header, v197, v194, "[%@] Distributor preference data consistency check complete", v195, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    uint64_t v199 = v224;
    goto LABEL_207;
  }

  uint64_t v198 = v216;
  uint64_t v197 = v192;
  uint64_t v199 = v192;
  uint64_t v200 = v192;
LABEL_209:

  v222(v191, v227);
  swift_bridgeObjectRelease();
LABEL_210:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100551B90()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v23[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_1000172F8((uint64_t *)&unk_100661AB0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = &v23[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001893C(v1 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon27DistributorPreferencesStore_containerURL, (uint64_t)v11);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_10001729C((uint64_t)v11, &qword_10065C3C0);
    static Logger.storage.getter();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to save events without a container url", v18, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
    sub_1000172F8(&qword_10065D360);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_1005A3EC0;
    uint64_t v20 = *(void *)(v1 + 24);
    *(void *)(v19 + 32) = *(void *)(v1 + 16);
    *(void *)(v19 + 40) = v20;
    swift_bridgeObjectRetain();
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v13 + 32))(v15, v11, v12);
    uint64_t v21 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    __chkstk_darwin(v21);
    uint64_t v19 = sub_100018898("Loading distributor preferences", 31, 2, 0, 1, 0, (uint64_t)v8, (uint64_t)sub_10055411C, (uint64_t)&v23[-32], (void *)&_mh_execute_header);
    sub_10001729C((uint64_t)v8, (uint64_t *)&unk_100661AB0);
    (*(void (**)(unsigned char *, uint64_t))(v13 + 8))(v15, v12);
  }
  return v19;
}

uint64_t sub_100551F50(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v55 = a1;
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v58 = *(void *)(v3 - 8);
  uint64_t v59 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  os_log_type_t v57 = (char *)&v51 - v7;
  uint64_t v56 = type metadata accessor for URL.DirectoryHint();
  uint64_t v8 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = __chkstk_darwin(v14);
  os_log_type_t v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v51 - v19;
  __chkstk_darwin(v18);
  os_log_type_t v22 = (char *)&v51 - v21;
  uint64_t v23 = v2 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon27DistributorPreferencesStore_containerURL;
  uint64_t v25 = v24;
  sub_10001893C(v23, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v13, 1, v14) == 1)
  {
    sub_10001729C((uint64_t)v13, &qword_10065C3C0);
    static Logger.storage.getter();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      id v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Failed to save events without a container url", v28, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v6, v59);
  }
  else
  {
    uint64_t v51 = v17;
    uint64_t v53 = v25;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v13, v14);
    v61[0] = 0xD000000000000023;
    v61[1] = 0x80000001005B7F60;
    uint64_t v30 = v56;
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for URL.DirectoryHint.inferFromPath(_:), v56);
    sub_100017B14();
    BOOL v52 = v22;
    URL.appending<A>(component:directoryHint:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v30);
    swift_bridgeObjectRelease();
    static Logger.storage.getter();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    BOOL v33 = os_log_type_enabled(v31, v32);
    int v54 = v20;
    if (v33)
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      v61[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136380675;
      uint64_t v56 = (uint64_t)(v34 + 4);
      swift_beginAccess();
      sub_1002F9C14();
      uint64_t v35 = v14;
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v60 = sub_1000143F4(v36, v37, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Saving preferences store to: %{private}s", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v35 = v14;
    }

    (*(void (**)(char *, uint64_t))(v58 + 8))(v57, v59);
    uint64_t v38 = v61[4];
    id v39 = v52;
    uint64_t v40 = v53;
    uint64_t v41 = v55;
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    v61[0] = v41;
    sub_1005540C8();
    uint64_t v42 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v38)
    {
      uint64_t v44 = *(void (**)(char *, uint64_t))(v40 + 8);
      v44(v39, v35);
      swift_release();
      return ((uint64_t (*)(char *, uint64_t))v44)(v54, v35);
    }
    else
    {
      uint64_t v45 = v42;
      unint64_t v46 = v43;
      swift_release();
      uint64_t v47 = v54;
      swift_beginAccess();
      uint64_t v48 = v51;
      uint64_t v49 = v35;
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v51, v47, v35);
      Data.write(to:options:)();
      uint64_t v50 = *(void (**)(char *, uint64_t))(v40 + 8);
      v50(v48, v49);
      swift_beginAccess();
      LOBYTE(v48) = sub_1004D11C8();
      swift_endAccess();
      if (v48)
      {
        swift_beginAccess();
        sub_1004D0820(0);
        swift_endAccess();
        sub_100013510(v45, v46);
        v50(v39, v49);
      }
      else
      {
        v50(v39, v49);
        sub_100013510(v45, v46);
      }
      return ((uint64_t (*)(char *, uint64_t))v50)(v47, v49);
    }
  }
}

id sub_1005526AC(void *a1)
{
  return [a1 isManagedAppDistributor];
}

uint64_t sub_1005526CC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v35 = a1;
  uint64_t v42 = a2;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v37 = *(void *)(v2 - 8);
  uint64_t v38 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL.DirectoryHint();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v34 - v14;
  v43[0] = 0xD000000000000023;
  v43[1] = 0x80000001005B7F60;
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for URL.DirectoryHint.inferFromPath(_:), v5);
  sub_100017B14();
  URL.appending<A>(component:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRelease();
  static Logger.storage.getter();
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  uint64_t v40 = v15;
  v16(v13, v15, v9);
  uint64_t v36 = v4;
  os_log_type_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v41 = v10;
  if (v19)
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    v43[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136380675;
    v34[1] = v20 + 4;
    sub_1002F9C14();
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    v43[3] = sub_1000143F4(v21, v22, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v23 = *(void (**)(char *, uint64_t))(v10 + 8);
    v23(v13, v9);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Loading distributor preferences from: %{private}s", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v23 = *(void (**)(char *, uint64_t))(v10 + 8);
    v23(v13, v9);
  }

  (*(void (**)(char *, uint64_t))(v37 + 8))(v36, v38);
  uint64_t v24 = v39;
  uint64_t v25 = v40;
  uint64_t v26 = Data.init(contentsOf:options:)();
  id v28 = v42;
  if (v24)
  {
    swift_errorRelease();
    sub_1000172F8(&qword_10065D360);
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_1005A3EC0;
    uint64_t v32 = *(void *)(v35 + 24);
    *(void *)(v31 + 32) = *(void *)(v35 + 16);
    *(void *)(v31 + 40) = v32;
    swift_bridgeObjectRetain();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v23)(v25, v9);
    *id v28 = v31;
  }
  else
  {
    uint64_t v29 = v26;
    unint64_t v30 = v27;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    sub_100554138();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    v23(v25, v9);
    swift_release();
    return sub_100013510(v29, v30);
  }
  return result;
}

uint64_t sub_100552BEC()
{
  swift_bridgeObjectRelease();
  sub_10001729C(v0 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon27DistributorPreferencesStore_containerURL, &qword_10065C3C0);

  return swift_deallocClassInstance();
}

uint64_t sub_100552C60()
{
  return type metadata accessor for DistributorPreferencesStore();
}

uint64_t type metadata accessor for DistributorPreferencesStore()
{
  uint64_t result = qword_100666FF8;
  if (!qword_100666FF8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100552CB4()
{
  sub_10026B458();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_100552D50(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_1006670A0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_100554854();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = a2;
  sub_1000172F8((uint64_t *)&unk_10065C5D0);
  sub_10027210C(&qword_10065DEC0);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_100552EC4()
{
  return 0xD000000000000012;
}

uint64_t sub_100552EE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1005548A8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100552F0C(uint64_t a1)
{
  unint64_t v2 = sub_100554854();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100552F48(uint64_t a1)
{
  unint64_t v2 = sub_100554854();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100552F84@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100554930(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100552FB0(void *a1)
{
  return sub_100552D50(a1, *v1);
}

char *sub_100552FCC(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v6 = *(void **)v4;
  int64_t v7 = *(void *)(*(void *)v4 + 16);
  if (v7 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v10 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v11 = v7 + v10;
  if (__OFADD__(v7, v10))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v11 > v6[3] >> 1)
  {
    if (v7 <= v11) {
      int64_t v15 = v7 + v10;
    }
    else {
      int64_t v15 = v7;
    }
    uint64_t v6 = sub_10028ED9C(isUniquelyReferenced_nonNull_native, v15, 1, v6);
  }
  uint64_t v16 = &v6[2 * a1 + 4];
  uint64_t result = (char *)swift_arrayDestroy();
  if (!v10) {
    goto LABEL_20;
  }
  uint64_t v18 = v6[2];
  BOOL v19 = __OFSUB__(v18, a2);
  uint64_t v20 = v18 - a2;
  if (v19) {
    goto LABEL_26;
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    uint64_t result = (char *)(v16 + 2);
    uint64_t v21 = &v6[2 * a2 + 4];
    if (v16 + 2 != v21 || result >= (char *)&v21[2 * v20]) {
      uint64_t result = (char *)memmove(result, v21, 16 * v20);
    }
    uint64_t v22 = v6[2];
    BOOL v19 = __OFADD__(v22, v10);
    uint64_t v23 = v22 + v10;
    if (!v19)
    {
      v6[2] = v23;
LABEL_20:
      *uint64_t v16 = a3;
      v16[1] = a4;
      *(void *)uint64_t v4 = v6;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100553150(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  unint64_t v5 = *v3;
  int64_t v6 = *(void *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *(void *)(v5 + 24) >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    unint64_t v5 = sub_100290DB0(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *uint64_t v3 = v5;
  }
  uint64_t v14 = *(void *)(type metadata accessor for DownloadRequest() - 8);
  unint64_t v15 = v5 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  uint64_t v16 = *(void *)(v14 + 72);
  uint64_t v17 = v15 + v16 * a1;
  swift_arrayDestroy();
  if (!v9) {
    goto LABEL_25;
  }
  uint64_t v18 = *(void *)(v5 + 16);
  uint64_t v19 = v18 - a2;
  if (__OFSUB__(v18, a2)) {
    goto LABEL_33;
  }
  if (v19 < 0)
  {
LABEL_35:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  unint64_t v20 = v17 + v16;
  unint64_t v21 = v15 + v16 * a2;
  if (v17 + v16 < v21 || v20 >= v21 + v19 * v16)
  {
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (v20 != v21)
  {
    swift_arrayInitWithTakeBackToFront();
  }
  uint64_t v23 = *(void *)(v5 + 16);
  BOOL v24 = __OFADD__(v23, v9);
  uint64_t v25 = v23 + v9;
  if (v24)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  *(void *)(v5 + 16) = v25;
LABEL_25:
  if (v16 >= 1) {
    sub_1005133C0(a3, v17);
  }
  return sub_10001729C(a3, &qword_100664030);
}

uint64_t sub_10055335C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return 0;
  }
  uint64_t v6 = 0;
  for (uint64_t i = (void *)(a1 + 40); ; i += 2)
  {
    BOOL v8 = *(i - 1) == a2 && *i == a3;
    if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      break;
    }
    if (v3 == ++v6) {
      return 0;
    }
  }
  return v6;
}

uint64_t sub_1005533F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  for (uint64_t i = (void *)(a1 + 40); ; i += 2)
  {
    BOOL v7 = *(i - 1) == v4 && *i == v5;
    if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      break;
    }
    if (v2 == ++v3) {
      return 0;
    }
  }
  return v3;
}

uint64_t sub_100553480(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_10028ED9C(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (void *)&v16[16 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1005535EC(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = *(void **)v6;
  int64_t v9 = *(void *)(*(void *)v6 + 16);
  if (v9 < a2)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v11 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  int64_t v13 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v14 = v13 - v11;
  if (__OFSUB__(v13, v11))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  int64_t v15 = v9 + v14;
  if (__OFADD__(v9, v14))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v15 > v8[3] >> 1)
  {
    if (v9 <= v15) {
      int64_t v18 = v9 + v14;
    }
    else {
      int64_t v18 = v9;
    }
    uint64_t result = (char *)sub_10028F654(result, v18, 1, v8);
    uint64_t v8 = result;
  }
  uint64_t v19 = v8 + 4;
  unint64_t v20 = (char *)v8 + a1 + 32;
  if (!v14) {
    goto LABEL_21;
  }
  uint64_t v21 = v8[2];
  size_t v22 = v21 - a2;
  if (__OFSUB__(v21, a2)) {
    goto LABEL_30;
  }
  if ((v22 & 0x8000000000000000) != 0)
  {
LABEL_32:
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t result = &v20[v13];
  uint64_t v23 = (char *)v19 + a2;
  if (&v20[v13] != (char *)v19 + a2 || result >= &v23[v22]) {
    uint64_t result = (char *)memmove(result, v23, v22);
  }
  uint64_t v24 = v8[2];
  BOOL v25 = __OFADD__(v24, v14);
  uint64_t v26 = v24 + v14;
  if (v25)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  _OWORD v8[2] = v26;
LABEL_21:
  if (v13 >= 1) {
    uint64_t result = (char *)memcpy(v20, (const void *)(a4 + a5), v13);
  }
  *(void *)uint64_t v6 = v8;
  return result;
}

uint64_t sub_100553778(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v37 = a4;
  unint64_t v7 = a4[2];
  if ((a3 & 1) == 0)
  {
    if (v7)
    {
      BOOL v14 = a4[4] == a1 && a4[5] == a2;
      if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_43;
      }
      if (v7 != 1)
      {
        int64_t v15 = v4 + 7;
        uint64_t v16 = 1;
        while (1)
        {
          uint64_t v17 = v16 + 1;
          if (__OFADD__(v16, 1)) {
            break;
          }
          BOOL v18 = *(v15 - 1) == a1 && *v15 == a2;
          if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_43;
          }
          v15 += 2;
          ++v16;
          if (v17 == v7) {
            goto LABEL_30;
          }
        }
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
    }
LABEL_30:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (swift_isUniquelyReferenced_nonNull_native())
    {
LABEL_31:
      unint64_t v20 = v4[2];
      unint64_t v19 = v4[3];
      if (v20 >= v19 >> 1) {
        uint64_t v4 = sub_10028ED9C((void *)(v19 > 1), v20 + 1, 1, v4);
      }
      v4[2] = v20 + 1;
      uint64_t v21 = &v4[2 * v20];
      v21[4] = a1;
      v21[5] = a2;
      return (uint64_t)v4;
    }
LABEL_69:
    uint64_t v4 = sub_10028ED9C(0, v7 + 1, 1, v4);
    goto LABEL_31;
  }
  if (!v7)
  {
LABEL_43:
    swift_bridgeObjectRetain();
    return (uint64_t)v4;
  }
  BOOL v8 = a4[4] == a1 && a4[5] == a2;
  if (!v8 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (v7 != 1)
    {
      size_t v22 = v4 + 7;
      uint64_t v23 = 1;
      while (1)
      {
        uint64_t v24 = v23 + 1;
        if (__OFADD__(v23, 1)) {
          goto LABEL_65;
        }
        BOOL v25 = *(v22 - 1) == a1 && *v22 == a2;
        if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_8;
        }
        v22 += 2;
        ++v23;
        if (v24 == v7) {
          goto LABEL_43;
        }
      }
    }
    goto LABEL_43;
  }
LABEL_8:
  uint64_t result = sub_10055335C((uint64_t)v4, a1, a2);
  if (v10)
  {
LABEL_12:
    swift_bridgeObjectRetain();
    uint64_t v11 = v7;
LABEL_13:
    int64_t v13 = v4[2];
    if (v13 >= v11)
    {
      sub_100553480(v11, v13);
      return (uint64_t)v37;
    }
    goto LABEL_66;
  }
  uint64_t v11 = result;
  uint64_t v12 = result + 1;
  if (!__OFADD__(result, 1))
  {
    if (v12 == v7)
    {
      unint64_t v7 = result;
      goto LABEL_12;
    }
    swift_bridgeObjectRetain();
    uint64_t v26 = 2 * v11;
    unint64_t v27 = v12;
    while ((v12 & 0x8000000000000000) == 0)
    {
      unint64_t v7 = v4[2];
      if (v27 >= v7) {
        goto LABEL_62;
      }
      uint64_t v29 = &v4[v26];
      BOOL v30 = v4[v26 + 6] == a1 && v4[v26 + 7] == a2;
      if (!v30 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        if (v27 != v11)
        {
          if (v11 >= v7) {
            goto LABEL_67;
          }
          uint64_t v31 = &v4[2 * v11 + 4];
          unint64_t v7 = v31[1];
          uint64_t v36 = *v31;
          uint64_t v33 = v29[6];
          uint64_t v32 = v29[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v4 = sub_10055AC6C(v4);
          }
          uint64_t v34 = &v4[2 * v11];
          v34[4] = v33;
          v34[5] = v32;
          swift_bridgeObjectRelease();
          if (v27 >= v4[2]) {
            goto LABEL_68;
          }
          uint64_t v35 = &v4[v26];
          v35[6] = v36;
          v35[7] = v7;
          swift_bridgeObjectRelease();
          uint64_t v37 = v4;
        }
        if (__OFADD__(v11++, 1)) {
          goto LABEL_63;
        }
      }
      ++v27;
      v26 += 2;
      if (v27 == v4[2]) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  __break(1u);
  return result;
}

uint64_t sub_100553AB0(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  BOOL v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  char v10 = (char *)&v41 - v9;
  id v11 = [self defaultWorkspace];
  if (v11)
  {
    uint64_t v12 = v11;
    id v45 = 0;
    id v13 = [v11 getPreferredAppMarketplacesWithError:&v45];
    id v14 = v45;
    if (v13)
    {
      int64_t v15 = v13;
      uint64_t v16 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
      id v17 = v14;

      unint64_t v46 = v16;
      unint64_t v18 = sub_10054F2F4(a1, a2, v16);
      if (v19)
      {

        return swift_bridgeObjectRelease();
      }
      sub_10054EC9C(v18);
      swift_bridgeObjectRelease();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v45 = 0;
      unsigned int v21 = [v12 setPreferredAppMarketplaces:isa error:&v45];

      id v14 = v45;
      if (v21)
      {
        id v22 = v45;
        static PrivateNotifications.priorityOrAllowedDevelopersChangedNotificationName.getter();
        uint64_t v23 = String.utf8CString.getter();
        swift_bridgeObjectRelease();
        notify_post((const char *)(v23 + 32));

        return swift_release();
      }
    }
    id v28 = v14;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    static Logger.storage.getter();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    int v31 = v30;
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v32 = swift_slowAlloc();
      int v42 = v31;
      uint64_t v33 = v32;
      uint64_t v43 = swift_slowAlloc();
      unint64_t v46 = (void *)v43;
      *(_DWORD *)uint64_t v33 = 136446466;
      swift_bridgeObjectRetain();
      id v45 = (id)sub_1000143F4(a1, a2, (uint64_t *)&v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v33 + 12) = 2082;
      uint64_t v41 = v33 + 14;
      uint64_t ErrorValue = swift_getErrorValue();
      uint64_t v44 = v4;
      __chkstk_darwin(ErrorValue);
      (*(void (**)(char *))(v36 + 16))((char *)&v41 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v37 = String.init<A>(describing:)();
      id v45 = (id)sub_1000143F4(v37, v38, (uint64_t *)&v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v42, "Unable to remove %{public}s from distributor list: %{public}s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v44);
    }

    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();

    uint64_t v39 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
    uint64_t v40 = v8;
  }
  else
  {
    static Logger.storage.getter();
    swift_bridgeObjectRetain_n();
    BOOL v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      unint64_t v27 = (uint8_t *)swift_slowAlloc();
      unint64_t v46 = (void *)swift_slowAlloc();
      uint64_t v44 = v4;
      *(_DWORD *)unint64_t v27 = 136315138;
      swift_bridgeObjectRetain();
      id v45 = (id)sub_1000143F4(a1, a2, (uint64_t *)&v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Unable to remove %s from the distributor list because LSApplicationWorkspace was unavailable", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v44);
    }

    swift_bridgeObjectRelease_n();
    uint64_t v39 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
    uint64_t v40 = v10;
  }
  return v39(v40, v4);
}

unint64_t sub_1005540C8()
{
  unint64_t result = qword_100667088;
  if (!qword_100667088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100667088);
  }
  return result;
}

uint64_t sub_10055411C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1005526CC(*(void *)(v1 + 24), a1);
}

unint64_t sub_100554138()
{
  unint64_t result = qword_100667090;
  if (!qword_100667090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100667090);
  }
  return result;
}

uint64_t sub_10055418C(uint64_t a1, uint64_t a2)
{
  return sub_1005541BC(a1, a2, (void (*)(void))type metadata accessor for ADPInstallTask);
}

uint64_t sub_1005541A4(uint64_t a1, uint64_t a2)
{
  return sub_1005541BC(a1, a2, (void (*)(void))type metadata accessor for ADPBatchInstallTask);
}

uint64_t sub_1005541BC(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = a3;
    uint64_t v3 = a2;
    uint64_t v5 = a1;
    if (!(*v4 >> 62))
    {
      if (*(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v20 < v3) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v8 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v7 = v5 - v3;
  if (__OFSUB__(0, v8))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v10 = v21 + v7;
    if (!__OFADD__(v21, v7)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*v4 >> 62) {
    goto LABEL_32;
  }
  uint64_t v9 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v10 = v9 - v8;
  if (__OFADD__(v9, v7)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v11 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v4 = v11;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v11 & 0x8000000000000000) != 0
    || (v11 & 0x4000000000000000) != 0
    || (uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8, v10 > *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v11 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      *uint64_t v4 = v11;
      uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  v6(0);
  swift_arrayDestroy();
  if (v7)
  {
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v15 = v22 - v3;
      if (!__OFSUB__(v22, v3))
      {
LABEL_17:
        if (v15 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v16 = (const void *)(v13 + 32 + 8 * v3);
        if (v5 != v3 || v13 + 32 + 8 * v5 >= (unint64_t)v16 + 8 * v15) {
          memmove((void *)(v13 + 32 + 8 * v5), v16, 8 * v15);
        }
        if (!(v11 >> 62))
        {
          uint64_t v17 = *(void *)(v13 + 16);
          uint64_t v18 = v17 + v7;
          if (!__OFADD__(v17, v7))
          {
LABEL_23:
            *(void *)(v13 + 16) = v18;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v18 = v23 + v7;
        if (!__OFADD__(v23, v7)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v14 = *(void *)(v13 + 16);
      uint64_t v15 = v14 - v3;
      if (!__OFSUB__(v14, v3)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:

  return specialized Array._endMutation()();
}

uint64_t sub_1005544A4(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *(void *)(v4 + 24) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t v4 = sub_100290DB0(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t v12 = *(void *)(type metadata accessor for DownloadRequest() - 8);
  unint64_t v13 = v4 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  uint64_t v14 = *(void *)(v12 + 72);
  uint64_t v15 = v14 * a1;
  unint64_t v16 = v13 + v14 * a1;
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_25;
  }
  uint64_t v18 = *(void *)(v4 + 16);
  uint64_t v19 = v18 - a2;
  if (__OFSUB__(v18, a2)) {
    goto LABEL_31;
  }
  if ((v19 & 0x8000000000000000) == 0)
  {
    if (v15 < v14 * a2 || v16 >= v13 + v14 * a2 + v19 * v14)
    {
      uint64_t result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v15 != v14 * a2)
    {
      uint64_t result = swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v21 = *(void *)(v4 + 16);
    BOOL v22 = __OFADD__(v21, v8);
    uint64_t v23 = v21 - v7;
    if (!v22)
    {
      *(void *)(v4 + 16) = v23;
LABEL_25:
      *uint64_t v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10055468C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  while (1)
  {
    uint64_t result = v2[v4 + 4];
    if (result == v6 && v2[v4 + 5] == v7) {
      break;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      break;
    }
    ++v5;
    v4 += 2;
    if (v3 == v5) {
      return v3;
    }
  }
  unint64_t v10 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v10 == v3) {
      return v5;
    }
    while (1)
    {
      unint64_t v12 = v2[2];
      if (v10 >= v12) {
        break;
      }
      unint64_t v13 = &v2[v4];
      uint64_t result = v2[v4 + 6];
      if (result != v6 || v2[v4 + 7] != v7)
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0)
        {
          if (v10 != v5)
          {
            if (v5 >= v12) {
              goto LABEL_31;
            }
            uint64_t v15 = &v2[2 * v5 + 4];
            uint64_t v16 = v15[1];
            uint64_t v21 = *v15;
            uint64_t v17 = v13[6];
            uint64_t v18 = v13[7];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v2 = sub_10055AC6C(v2);
            }
            uint64_t v19 = &v2[2 * v5];
            v19[4] = v17;
            v19[5] = v18;
            uint64_t result = swift_bridgeObjectRelease();
            if (v10 >= v2[2]) {
              goto LABEL_32;
            }
            uint64_t v20 = &v2[v4];
            v20[6] = v21;
            v20[7] = v16;
            uint64_t result = swift_bridgeObjectRelease();
            *(void *)a1 = v2;
          }
          if (__OFADD__(v5++, 1)) {
            goto LABEL_30;
          }
        }
      }
      ++v10;
      v4 += 2;
      if (v10 == v2[2]) {
        return v5;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10055483C()
{
  return swift_release();
}

ValueMetadata *type metadata accessor for DistributorPreferences()
{
  return &type metadata for DistributorPreferences;
}

unint64_t sub_100554854()
{
  unint64_t result = qword_1006670A8;
  if (!qword_1006670A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006670A8);
  }
  return result;
}

uint64_t sub_1005548A8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x80000001005C11F0)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

void *sub_100554930(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_1006670B0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10018AC60(a1, a1[3]);
  sub_100554854();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100014524((uint64_t)a1);
  }
  else
  {
    sub_1000172F8((uint64_t *)&unk_10065C5D0);
    sub_10027210C((unint64_t *)&qword_10065DEA8);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    sub_100014524((uint64_t)a1);
  }
  return v7;
}

unsigned char *storeEnumTagSinglePayload for DistributorPreferences.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100554B68);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DistributorPreferences.CodingKeys()
{
  return &type metadata for DistributorPreferences.CodingKeys;
}

unint64_t sub_100554BA4()
{
  unint64_t result = qword_1006670B8;
  if (!qword_1006670B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006670B8);
  }
  return result;
}

unint64_t sub_100554BFC()
{
  unint64_t result = qword_1006670C0;
  if (!qword_1006670C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006670C0);
  }
  return result;
}

unint64_t sub_100554C54()
{
  unint64_t result = qword_1006670C8;
  if (!qword_1006670C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006670C8);
  }
  return result;
}

uint64_t sub_100554CA8(uint64_t a1)
{
  return sub_10055599C(a1, (uint64_t (*)(void))sub_10028F260, &qword_10065E628);
}

uint64_t sub_100554CC8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v22 = v4 + v2;
  }
  else {
    int64_t v22 = v4;
  }
  unint64_t v3 = sub_10028F758(isUniquelyReferenced_nonNull_native, v22, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = (*(void *)(v3 + 24) >> 1) - v8;
  uint64_t v10 = *(void *)(type metadata accessor for ManagedApp() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = v3 + v12 + v11 * v8;
  unint64_t v14 = a1 + v12;
  uint64_t v15 = v11 * v2;
  unint64_t v16 = v13 + v15;
  unint64_t v17 = v14 + v15;
  if (v14 < v16 && v13 < v17) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFADD__(v19, v2);
  uint64_t v21 = v19 + v2;
  if (!v20)
  {
    *(void *)(v3 + 16) = v21;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100554E6C(uint64_t a1)
{
  return sub_10055599C(a1, (uint64_t (*)(void))sub_10028F7A0, &qword_10065E5D0);
}

uint64_t sub_100554E8C(uint64_t a1)
{
  return sub_10055599C(a1, (uint64_t (*)(void))sub_10028F918, &qword_10065E5E8);
}

uint64_t sub_100554EAC(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *((void *)v3 + 3) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  unint64_t v3 = sub_10028FBAC(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[40 * v9 + 32];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8) {
    goto LABEL_24;
  }
  sub_1000172F8(&qword_10065E570);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = *((void *)v3 + 2);
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    *((void *)v3 + 2) = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100555024(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for XPCApp();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v86 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000172F8(&qword_100666530);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v87 = (uint64_t)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  __chkstk_darwin(v10);
  unint64_t v16 = (char *)&v70 - v15;
  uint64_t v17 = *(void *)(a1 + 16);
  int64_t v18 = *v1;
  int64_t v19 = *(void *)(*v1 + 16);
  int64_t v20 = v19 + v17;
  if (__OFADD__(v19, v17))
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v85 = v11;
  uint64_t v2 = v5;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v18;
  if (!isUniquelyReferenced_nonNull_native || (int64_t v22 = *(void *)(v18 + 24) >> 1, v22 < v20))
  {
    if (v19 <= v20) {
      int64_t v23 = v19 + v17;
    }
    else {
      int64_t v23 = v19;
    }
    int64_t v18 = sub_10028FBC0(isUniquelyReferenced_nonNull_native, v23, 1, v18);
    *uint64_t v1 = v18;
    int64_t v22 = *(void *)(v18 + 24) >> 1;
  }
  uint64_t v24 = *(void *)(v18 + 16);
  int64_t v19 = *(void *)(v5 + 72);
  int64_t v25 = v22 - v24;
  unint64_t v84 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v26 = sub_1001CFDB4(&v88, v18 + v84 + v19 * v24, v22 - v24, a1);
  if (v26 < v17) {
    goto LABEL_17;
  }
  if (v26)
  {
    uint64_t v29 = *(void *)(v18 + 16);
    BOOL v30 = __OFADD__(v29, v26);
    uint64_t v31 = v29 + v26;
    if (v30)
    {
      __break(1u);
      goto LABEL_22;
    }
    *(void *)(v18 + 16) = v31;
  }
  if (v26 == v25)
  {
LABEL_18:
    int64_t v18 = *(void *)(v18 + 16);
    uint64_t v17 = v88;
    uint64_t v28 = v89;
    int64_t v27 = v90;
    int64_t v25 = v91;
    int64_t v79 = v90;
    int64_t v83 = v89;
    if (v92)
    {
      unint64_t v33 = (v92 - 1) & v92;
      unint64_t v34 = __clz(__rbit64(v92)) | (v91 << 6);
LABEL_20:
      (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v16, *(void *)(v17 + 56) + v34 * v19, v4);
      os_log_type_t v74 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
      v74(v16, 0, 1, v4);
      unint64_t v35 = v33;
LABEL_43:
      unint64_t v81 = v35;
      int64_t v82 = v25;
      unint64_t v88 = v17;
      int64_t v89 = v83;
      int64_t v90 = v79;
      int64_t v91 = v25;
      unint64_t v92 = v35;
      uint64_t v41 = v85;
      sub_100017238((uint64_t)v16, v85, &qword_100666530);
      unint64_t v80 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
      int v42 = v80(v41, 1, v4);
      uint64_t v43 = v87;
      if (v42 == 1)
      {
LABEL_81:
        sub_10001729C((uint64_t)v16, &qword_100666530);
        sub_10024A370();
        return sub_10001729C(v85, &qword_100666530);
      }
      uint64_t v78 = (void (**)(void, void, void))(v5 + 32);
      uint64_t v72 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v73 = v5 + 56;
      uint64_t v71 = (void (**)(char *, uint64_t))(v5 + 8);
      uint64_t v44 = v85;
      id v45 = v86;
      uint64_t v75 = v16;
      while (1)
      {
        sub_10001729C(v44, &qword_100666530);
        uint64_t v47 = *v1;
        unint64_t v48 = *(void *)(*v1 + 24);
        int64_t v49 = v48 >> 1;
        if ((uint64_t)(v48 >> 1) < v18 + 1)
        {
          uint64_t v47 = sub_10028FBC0(v48 > 1, v18 + 1, 1, *v1);
          *uint64_t v1 = v47;
          int64_t v49 = *(void *)(v47 + 24) >> 1;
        }
        sub_100017238((uint64_t)v16, v43, &qword_100666530);
        if (v80(v43, 1, v4) != 1) {
          break;
        }
LABEL_50:
        sub_10001729C(v43, &qword_100666530);
        int64_t v46 = v18;
LABEL_46:
        *(void *)(*v1 + 16) = v46;
        uint64_t v44 = v85;
        sub_100017238((uint64_t)v16, v85, &qword_100666530);
        if (v80(v44, 1, v4) == 1)
        {
          int64_t v82 = v91;
          int64_t v83 = v89;
          unint64_t v81 = v92;
          goto LABEL_81;
        }
      }
      unint64_t v77 = v47 + v84;
      uint64_t v50 = *v78;
      if (v18 <= v49) {
        int64_t v51 = v49;
      }
      else {
        int64_t v51 = v18;
      }
      int64_t v79 = v51;
      long long v76 = v50;
      while (1)
      {
        uint64_t v55 = v45;
        uint64_t v56 = v43;
        uint64_t v57 = v43;
        uint64_t v58 = v45;
        uint64_t v59 = (uint64_t (*)(unint64_t, char *, uint64_t))v50;
        v50(v55, v56, v4);
        if (v18 == v79)
        {
          (*v71)(v58, v4);
          int64_t v46 = v79;
          int64_t v18 = v79;
          id v45 = v58;
          uint64_t v43 = v57;
          unint64_t v16 = v75;
          goto LABEL_46;
        }
        unint64_t v16 = v75;
        sub_10001729C((uint64_t)v75, &qword_100666530);
        int64_t v60 = v18;
        uint64_t result = v59(v77 + v18 * v19, v58, v4);
        uint64_t v61 = v89;
        int64_t v62 = v91;
        int64_t v83 = v60;
        unint64_t v81 = v88;
        int64_t v82 = v90;
        if (v92) {
          break;
        }
        int64_t v65 = v91 + 1;
        if (__OFADD__(v91, 1))
        {
          __break(1u);
          return result;
        }
        int64_t v66 = (unint64_t)(v90 + 64) >> 6;
        int64_t v64 = v91;
        if (v65 < v66)
        {
          unint64_t v67 = *(void *)(v89 + 8 * v65);
          if (v67) {
            goto LABEL_65;
          }
          int64_t v68 = v91 + 2;
          int64_t v64 = v91 + 1;
          if (v91 + 2 < v66)
          {
            unint64_t v67 = *(void *)(v89 + 8 * v68);
            if (v67) {
              goto LABEL_68;
            }
            int64_t v64 = v91 + 2;
            if (v91 + 3 < v66)
            {
              unint64_t v67 = *(void *)(v89 + 8 * (v91 + 3));
              if (v67)
              {
                int64_t v65 = v91 + 3;
                goto LABEL_65;
              }
              int64_t v68 = v91 + 4;
              int64_t v64 = v91 + 3;
              if (v91 + 4 < v66)
              {
                unint64_t v67 = *(void *)(v89 + 8 * v68);
                if (v67)
                {
LABEL_68:
                  int64_t v65 = v68;
                  goto LABEL_65;
                }
                int64_t v65 = v91 + 5;
                int64_t v64 = v91 + 4;
                if (v91 + 5 < v66)
                {
                  unint64_t v67 = *(void *)(v89 + 8 * v65);
                  if (!v67)
                  {
                    int64_t v64 = v66 - 1;
                    int64_t v69 = v91 + 6;
                    do
                    {
                      if (v66 == v69)
                      {
                        unint64_t v16 = v75;
                        goto LABEL_56;
                      }
                      unint64_t v67 = *(void *)(v89 + 8 * v69++);
                    }
                    while (!v67);
                    int64_t v65 = v69 - 1;
                    unint64_t v16 = v75;
                  }
LABEL_65:
                  unint64_t v52 = (v67 - 1) & v67;
                  unint64_t v63 = __clz(__rbit64(v67)) + (v65 << 6);
                  int64_t v62 = v65;
LABEL_61:
                  unint64_t v53 = v81;
                  (*v72)(v16, *(void *)(v81 + 56) + v63 * v19, v4);
                  v74(v16, 0, 1, v4);
                  int64_t v64 = v62;
                  goto LABEL_57;
                }
              }
            }
          }
        }
LABEL_56:
        v74(v16, 1, 1, v4);
        unint64_t v52 = 0;
        unint64_t v53 = v81;
LABEL_57:
        unint64_t v88 = v53;
        int64_t v89 = v61;
        int64_t v18 = v83 + 1;
        int64_t v90 = v82;
        int64_t v91 = v64;
        unint64_t v92 = v52;
        uint64_t v43 = v87;
        sub_100017238((uint64_t)v16, v87, &qword_100666530);
        int v54 = v80(v43, 1, v4);
        id v45 = v86;
        uint64_t v50 = v76;
        if (v54 == 1) {
          goto LABEL_50;
        }
      }
      unint64_t v52 = (v92 - 1) & v92;
      unint64_t v63 = __clz(__rbit64(v92)) | (v91 << 6);
      goto LABEL_61;
    }
LABEL_22:
    int64_t v36 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
LABEL_41:
      uint64_t v17 = v11;
      int64_t v18 = v12;
      uint64_t v4 = v13;
      unint64_t v16 = v14;
    }
    else
    {
      int64_t v37 = (unint64_t)(v27 + 64) >> 6;
      int64_t v82 = v25;
      if (v36 < v37)
      {
        unint64_t v38 = *(void *)(v28 + 8 * v36);
        if (v38)
        {
LABEL_25:
          unint64_t v33 = (v38 - 1) & v38;
          unint64_t v34 = __clz(__rbit64(v38)) + (v36 << 6);
          int64_t v25 = v36;
          goto LABEL_20;
        }
        int64_t v39 = v25 + 2;
        int64_t v82 = v25 + 1;
        if (v25 + 2 < v37)
        {
          uint64_t v14 = v16;
          uint64_t v13 = v4;
          int64_t v12 = v18;
          uint64_t v11 = v17;
          unint64_t v38 = *(void *)(v28 + 8 * v39);
          if (v38)
          {
LABEL_28:
            int64_t v36 = v39;
            goto LABEL_25;
          }
          int64_t v82 = v25 + 2;
          if (v25 + 3 < v37)
          {
            unint64_t v38 = *(void *)(v83 + 8 * (v25 + 3));
            if (v38)
            {
              int64_t v36 = v25 + 3;
              goto LABEL_25;
            }
            int64_t v39 = v25 + 4;
            int64_t v82 = v25 + 3;
            if (v25 + 4 < v37)
            {
              unint64_t v38 = *(void *)(v83 + 8 * v39);
              if (v38) {
                goto LABEL_28;
              }
              int64_t v36 = v25 + 5;
              int64_t v82 = v25 + 4;
              if (v25 + 5 < v37)
              {
                unint64_t v38 = *(void *)(v83 + 8 * v36);
                if (!v38)
                {
                  int64_t v82 = v37 - 1;
                  int64_t v40 = v25 + 6;
                  do
                  {
                    if (v37 == v40) {
                      goto LABEL_41;
                    }
                    unint64_t v38 = *(void *)(v83 + 8 * v40++);
                  }
                  while (!v38);
                  int64_t v36 = v40 - 1;
                }
                goto LABEL_25;
              }
            }
          }
        }
      }
    }
    os_log_type_t v74 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
    v74(v16, 1, 1, v4);
    unint64_t v35 = 0;
    int64_t v25 = v82;
    goto LABEL_43;
  }

  return sub_10024A370();
}

uint64_t sub_1005558E4(uint64_t a1)
{
  return sub_100555FD8(a1, (uint64_t (*)(void))sub_10028FC3C, (uint64_t (*)(void))&type metadata accessor for AppVersion);
}

uint64_t sub_100555910(uint64_t a1)
{
  return sub_10055599C(a1, (uint64_t (*)(void))sub_10028FC70, &qword_10065E690);
}

uint64_t sub_100555930(uint64_t a1)
{
  return sub_100555FD8(a1, (uint64_t (*)(void))sub_10028FEF0, type metadata accessor for AvailableUpdate);
}

uint64_t sub_10055595C(uint64_t a1)
{
  return sub_10055599C(a1, (uint64_t (*)(void))sub_10028FF58, &qword_10065E5B0);
}

uint64_t sub_10055597C(uint64_t a1)
{
  return sub_10055599C(a1, (uint64_t (*)(void))sub_1002901F8, &qword_10065E5A8);
}

uint64_t sub_10055599C(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v6 + v4 <= *(void *)(v5 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
  uint64_t v5 = a2();
  if (!*(void *)(a1 + 16))
  {
LABEL_15:
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v10 = *(void *)(v5 + 16);
  if ((*(void *)(v5 + 24) >> 1) - v10 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v11 = v5 + 40 * v10 + 32;
  if (a1 + 32 < v11 + 40 * v4 && v11 < a1 + 32 + 40 * v4) {
    goto LABEL_21;
  }
  sub_1000172F8(a3);
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    *unint64_t v3 = v5;
    return result;
  }
  uint64_t v13 = *(void *)(v5 + 16);
  BOOL v14 = __OFADD__(v13, v4);
  uint64_t v15 = v13 + v4;
  if (!v14)
  {
    *(void *)(v5 + 16) = v15;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100555B18(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = sub_10028ED9C(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100555C6C(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v23 = v4 + v2;
  }
  else {
    int64_t v23 = v4;
  }
  unint64_t v3 = sub_10029031C(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = (*(void *)(v3 + 24) >> 1) - v9;
  uint64_t v11 = *(void *)(sub_1000172F8((uint64_t *)&unk_100663D80) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v14 = v3 + v13 + v12 * v9;
  unint64_t v15 = a1 + v13;
  uint64_t v16 = v12 * v8;
  unint64_t v17 = v14 + v16;
  unint64_t v18 = v15 + v16;
  if (v15 < v17 && v14 < v18) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v20 = *(void *)(v3 + 16);
  BOOL v21 = __OFADD__(v20, v8);
  uint64_t v22 = v20 + v8;
  if (!v21)
  {
    *(void *)(v3 + 16) = v22;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100555E20(uint64_t a1)
{
  return sub_100555FD8(a1, (uint64_t (*)(void))sub_100290A94, (uint64_t (*)(void))type metadata accessor for AvailableRestore);
}

uint64_t sub_100555E4C(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  unint64_t v3 = sub_100290968(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[7 * v9 + 4];
  if (a1 + 32 < v10 + 56 * v8 && v10 < a1 + 32 + 56 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100555FAC(uint64_t a1)
{
  return sub_100555FD8(a1, (uint64_t (*)(void))sub_100290C0C, type metadata accessor for MediaAPIUpdates.App);
}

uint64_t sub_100555FD8(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  if (swift_isUniquelyReferenced_nonNull_native()
    && (int64_t)(v6 + v4) <= *(void *)(v5 + 24) >> 1)
  {
    unint64_t v10 = *(void *)(a1 + 16);
    if (v10) {
      goto LABEL_5;
    }
LABEL_15:
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
  uint64_t v5 = a2();
  unint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    goto LABEL_15;
  }
LABEL_5:
  uint64_t v11 = *(void *)(v5 + 16);
  uint64_t v12 = (*(void *)(v5 + 24) >> 1) - v11;
  uint64_t v13 = *(void *)(a3(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  if (v12 < (uint64_t)v10)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = v5 + v15 + v14 * v11;
  unint64_t v17 = a1 + v15;
  uint64_t v18 = v14 * v10;
  unint64_t v19 = v16 + v18;
  unint64_t v20 = v17 + v18;
  if (v17 < v19 && v16 < v20) {
    goto LABEL_21;
  }
  swift_arrayInitWithCopy();
  if (v10 < v4)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v22 = *(void *)(v5 + 16);
  BOOL v23 = __OFADD__(v22, v10);
  uint64_t v24 = v22 + v10;
  if (!v23)
  {
    *(void *)(v5 + 16) = v24;
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    *unint64_t v3 = v5;
    return result;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for AppStoreResponseDecoder()
{
  return self;
}

uint64_t sub_1005561BC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  sub_1000144C8(a1, (uint64_t)v14);
  uint64_t v6 = (void *)(v3 + 24);
  swift_beginAccess();
  uint64_t v7 = *(void **)(v3 + 24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v3 + 24) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v7 = sub_10029020C(0, v7[2] + 1, 1, v7);
    *uint64_t v6 = v7;
  }
  unint64_t v10 = v7[2];
  unint64_t v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    uint64_t v7 = sub_10029020C((void *)(v9 > 1), v10 + 1, 1, v7);
    *uint64_t v6 = v7;
  }
  void v7[2] = v10 + 1;
  sub_1001C5DD4(v14, &v7[4 * v10 + 4]);
  swift_endAccess();
  uint64_t v11 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = a2;
  uint64_t v12 = swift_bridgeObjectRetain();
  a3(v12);
  sub_1005562F8(v3, v11);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1005562F8(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  unint64_t v4 = *(void **)(a1 + 24);
  if (!v4[2])
  {
    __break(1u);
LABEL_6:
    uint64_t result = (uint64_t)sub_10055AC94(v4);
    unint64_t v4 = (void *)result;
    uint64_t v6 = *(void *)(result + 16);
    if (v6) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v6 = v4[2];
  if (v6)
  {
LABEL_4:
    uint64_t v7 = v6 - 1;
    sub_100014524((uint64_t)&v4[4 * v6]);
    v4[2] = v7;
    *(void *)(a1 + 24) = v4;
    swift_endAccess();
    *(void *)(a1 + 16) = a2;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRelease();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1005563B4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AppStoreResponseDecoderImpl()
{
  return self;
}

uint64_t sub_100556418()
{
  uint64_t v1 = v0 + 24;
  uint64_t result = swift_beginAccess();
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    sub_1000144C8(v3 + 32 * v4, (uint64_t)&v10);
    sub_1000172F8(&qword_10065FEA0);
    uint64_t result = swift_dynamicCast();
    if (result)
    {
      uint64_t v5 = *(void *)(v0 + 16);
      *(void *)&long long v10 = v0;
      *((void *)&v10 + 1) = v5;
      *(void *)&long long v11 = v13[0];
      type metadata accessor for AppStoreResponseDecoderImpl.KeyedContainer();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_getWitnessTable();
      return KeyedDecodingContainer.init<A>(_:)();
    }
    uint64_t v6 = *(void *)(*(void *)v1 + 16);
    if (v6)
    {
      sub_1000144C8(*(void *)v1 + 32 * v6, (uint64_t)v13);
      uint64_t v7 = *(void *)(v0 + 16);
      type metadata accessor for DecodingError();
      long long v10 = 0u;
      long long v11 = 0u;
      uint64_t v12 = 0;
      swift_allocError();
      unint64_t v9 = v8;
      swift_bridgeObjectRetain();
      sub_100556998(v13, v7, (uint64_t)&v10, &qword_10065FEA0, v9);
      swift_bridgeObjectRelease();
      sub_10001729C((uint64_t)&v10, &qword_100667218);
      sub_100014524((uint64_t)v13);
      return swift_willThrow();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1005565E4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  sub_100559430(a3, a2);
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  sub_10018AC60(a1, a1[3]);
  swift_getDynamicType();
  v6._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  sub_1000172F8(&qword_10065DF58);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  *a4 = &type metadata for String;
  uint64_t v7 = enum case for DecodingError.typeMismatch(_:);
  uint64_t v8 = type metadata accessor for DecodingError();
  unint64_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104);

  return v9(a4, v7, v8);
}

uint64_t sub_100556720@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  sub_100559430(a3, a2);
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  sub_10018AC60(a1, a1[3]);
  swift_getDynamicType();
  v6._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  sub_1000172F8(&qword_10065DF58);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  *a4 = &type metadata for Data;
  uint64_t v7 = enum case for DecodingError.typeMismatch(_:);
  uint64_t v8 = type metadata accessor for DecodingError();
  unint64_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104);

  return v9(a4, v7, v8);
}

uint64_t sub_10055685C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  sub_100559430(a3, a2);
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  sub_10018AC60(a1, a1[3]);
  swift_getDynamicType();
  v6._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  sub_1000172F8(&qword_10065DF58);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  *a4 = &type metadata for UInt64;
  uint64_t v7 = enum case for DecodingError.typeMismatch(_:);
  uint64_t v8 = type metadata accessor for DecodingError();
  unint64_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104);

  return v9(a4, v7, v8);
}

uint64_t sub_100556998@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9 = sub_1000172F8(a4);
  sub_100559430(a3, a2);
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  sub_10018AC60(a1, a1[3]);
  swift_getDynamicType();
  v10._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  sub_1000172F8(&qword_10065DF58);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  *a5 = v9;
  uint64_t v11 = enum case for DecodingError.typeMismatch(_:);
  uint64_t v12 = type metadata accessor for DecodingError();
  uint64_t v13 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104);

  return v13(a5, v11, v12);
}

uint64_t sub_100556AE4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  sub_100559430(a3, a2);
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  sub_10018AC60(a1, a1[3]);
  swift_getDynamicType();
  v6._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  sub_1000172F8(&qword_10065DF58);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  *a4 = &type metadata for Bool;
  uint64_t v7 = enum case for DecodingError.typeMismatch(_:);
  uint64_t v8 = type metadata accessor for DecodingError();
  uint64_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104);

  return v9(a4, v7, v8);
}

uint64_t sub_100556C20@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  sub_100559430(a3, a2);
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  sub_10018AC60(a1, a1[3]);
  swift_getDynamicType();
  v6._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  sub_1000172F8(&qword_10065DF58);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  *a4 = &type metadata for Double;
  uint64_t v7 = enum case for DecodingError.typeMismatch(_:);
  uint64_t v8 = type metadata accessor for DecodingError();
  uint64_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104);

  return v9(a4, v7, v8);
}

uint64_t sub_100556D5C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  sub_100559430(a3, a2);
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  sub_10018AC60(a1, a1[3]);
  swift_getDynamicType();
  v6._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  sub_1000172F8(&qword_10065DF58);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  *a4 = &type metadata for Float;
  uint64_t v7 = enum case for DecodingError.typeMismatch(_:);
  uint64_t v8 = type metadata accessor for DecodingError();
  uint64_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104);

  return v9(a4, v7, v8);
}

uint64_t sub_100556E98@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  sub_100559430(a3, a2);
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  sub_10018AC60(a1, a1[3]);
  swift_getDynamicType();
  v6._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  sub_1000172F8(&qword_10065DF58);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  *a4 = &type metadata for Int;
  uint64_t v7 = enum case for DecodingError.typeMismatch(_:);
  uint64_t v8 = type metadata accessor for DecodingError();
  uint64_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104);

  return v9(a4, v7, v8);
}

uint64_t sub_100556FD4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  sub_100559430(a3, a2);
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  sub_10018AC60(a1, a1[3]);
  swift_getDynamicType();
  v6._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  sub_1000172F8(&qword_10065DF58);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  *a4 = &type metadata for Int8;
  uint64_t v7 = enum case for DecodingError.typeMismatch(_:);
  uint64_t v8 = type metadata accessor for DecodingError();
  uint64_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104);

  return v9(a4, v7, v8);
}

uint64_t sub_100557110@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  sub_100559430(a3, a2);
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  sub_10018AC60(a1, a1[3]);
  swift_getDynamicType();
  v6._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  sub_1000172F8(&qword_10065DF58);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  *a4 = &type metadata for Int16;
  uint64_t v7 = enum case for DecodingError.typeMismatch(_:);
  uint64_t v8 = type metadata accessor for DecodingError();
  uint64_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104);

  return v9(a4, v7, v8);
}

uint64_t sub_10055724C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  sub_100559430(a3, a2);
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  sub_10018AC60(a1, a1[3]);
  swift_getDynamicType();
  v6._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  sub_1000172F8(&qword_10065DF58);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  *a4 = &type metadata for Int32;
  uint64_t v7 = enum case for DecodingError.typeMismatch(_:);
  uint64_t v8 = type metadata accessor for DecodingError();
  uint64_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104);

  return v9(a4, v7, v8);
}

uint64_t sub_100557388@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  sub_100559430(a3, a2);
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  sub_10018AC60(a1, a1[3]);
  swift_getDynamicType();
  v6._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  sub_1000172F8(&qword_10065DF58);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  *a4 = &type metadata for Int64;
  uint64_t v7 = enum case for DecodingError.typeMismatch(_:);
  uint64_t v8 = type metadata accessor for DecodingError();
  uint64_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104);

  return v9(a4, v7, v8);
}

uint64_t sub_1005574C4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  sub_100559430(a3, a2);
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  sub_10018AC60(a1, a1[3]);
  swift_getDynamicType();
  v6._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  sub_1000172F8(&qword_10065DF58);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  *a4 = &type metadata for UInt;
  uint64_t v7 = enum case for DecodingError.typeMismatch(_:);
  uint64_t v8 = type metadata accessor for DecodingError();
  uint64_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104);

  return v9(a4, v7, v8);
}

uint64_t sub_100557600@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  sub_100559430(a3, a2);
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  sub_10018AC60(a1, a1[3]);
  swift_getDynamicType();
  v6._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  sub_1000172F8(&qword_10065DF58);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  *a4 = &type metadata for UInt8;
  uint64_t v7 = enum case for DecodingError.typeMismatch(_:);
  uint64_t v8 = type metadata accessor for DecodingError();
  uint64_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104);

  return v9(a4, v7, v8);
}

uint64_t sub_10055773C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  sub_100559430(a3, a2);
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  sub_10018AC60(a1, a1[3]);
  swift_getDynamicType();
  v6._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  sub_1000172F8(&qword_10065DF58);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  *a4 = &type metadata for UInt16;
  uint64_t v7 = enum case for DecodingError.typeMismatch(_:);
  uint64_t v8 = type metadata accessor for DecodingError();
  uint64_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104);

  return v9(a4, v7, v8);
}

uint64_t sub_100557878@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  sub_100559430(a3, a2);
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  sub_10018AC60(a1, a1[3]);
  swift_getDynamicType();
  v6._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  sub_1000172F8(&qword_10065DF58);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  *a4 = &type metadata for UInt32;
  uint64_t v7 = enum case for DecodingError.typeMismatch(_:);
  uint64_t v8 = type metadata accessor for DecodingError();
  uint64_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104);

  return v9(a4, v7, v8);
}

uint64_t sub_1005579B4@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1 + 24;
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    sub_1000144C8(v5 + 32 * v6, (uint64_t)v14);
    sub_1000172F8(&qword_100662430);
    uint64_t result = swift_dynamicCast();
    if (result)
    {
      uint64_t v7 = v16[0];
      uint64_t v8 = *(void *)(v1 + 16);
      a1[3] = &type metadata for AppStoreResponseDecoderImpl.UnkeyedContainer;
      a1[4] = sub_100558334();
      uint64_t v9 = (void *)swift_allocObject();
      *a1 = v9;
      void v9[2] = v1;
      v9[3] = v8;
      void v9[4] = 0;
      v9[5] = v7;
      swift_retain();
      return swift_bridgeObjectRetain();
    }
    uint64_t v10 = *(void *)(*(void *)v3 + 16);
    if (v10)
    {
      sub_1000144C8(*(void *)v3 + 32 * v10, (uint64_t)v16);
      uint64_t v11 = *(void *)(v1 + 16);
      type metadata accessor for DecodingError();
      memset(v14, 0, sizeof(v14));
      uint64_t v15 = 0;
      swift_allocError();
      uint64_t v13 = v12;
      swift_bridgeObjectRetain();
      sub_100556998(v16, v11, (uint64_t)v14, &qword_100662430, v13);
      swift_bridgeObjectRelease();
      sub_10001729C((uint64_t)v14, &qword_100667218);
      sub_100014524((uint64_t)v16);
      return swift_willThrow();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100557B5C()
{
  return swift_bridgeObjectRetain();
}

void sub_100557B68()
{
  v0._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_100557BF0()
{
  return sub_100556418();
}

uint64_t sub_100557C14@<X0>(void *a1@<X8>)
{
  return sub_1005579B4(a1);
}

uint64_t sub_100557C38@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *v2;
  a2[3] = a1;
  a2[4] = sub_10055ACA8(&qword_100667210);
  *a2 = v4;
  return swift_retain();
}

uint64_t sub_100557CA0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = swift_beginAccess();
  uint64_t v10 = *(void *)(v4 + 24);
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    sub_1000144C8(v10 + 32 * v11, (uint64_t)v15);
    uint64_t v12 = *(void *)(v4 + 16);
    uint64_t v14 = 0;
    memset(v13, 0, sizeof(v13));
    swift_bridgeObjectRetain();
    sub_100557D80(v15, a1, v4, v12, (uint64_t)v13, a2, a3, a4);
    swift_bridgeObjectRelease();
    sub_10001729C((uint64_t)v13, &qword_100667218);
    return sub_100014524((uint64_t)v15);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100557D80@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v24 = a8;
  uint64_t v16 = type metadata accessor for URL();
  if ((void *)__chkstk_darwin(v16) == a2)
  {
    uint64_t result = sub_10055A694(a1, a4, a5, (uint64_t)&v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0) - 16]);
    if (v8) {
      return result;
    }
    return swift_dynamicCast();
  }
  if (a2 != &type metadata for Data)
  {
    uint64_t v18 = sub_100559430(a5, a4);
    __chkstk_darwin(v18);
    *((void *)&v21 - 4) = a6;
    *((void *)&v21 - 3) = a7;
    *((void *)&v21 - 2) = a2;
    *((void *)&v21 - 1) = a3;
    sub_1005561BC((uint64_t)a1, v18, (void (*)(uint64_t))sub_10055AC4C);
    return swift_bridgeObjectRelease();
  }
  sub_1000144C8((uint64_t)a1, (uint64_t)v22);
  if (swift_dynamicCast())
  {
    long long v23 = v21;
    return swift_dynamicCast();
  }
  type metadata accessor for DecodingError();
  swift_allocError();
  sub_100556720(a1, a4, a5, v20);
  return swift_willThrow();
}

void sub_100557F94()
{
  v0._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_10055801C()
{
  return sub_10055B208() & 1;
}

uint64_t sub_100558044()
{
  return sub_10055AD94();
}

uint64_t sub_100558068()
{
  return sub_10055B490();
}

uint64_t sub_10055808C()
{
  return sub_10055B718();
}

uint64_t sub_1005580B0()
{
  return sub_10055C290((uint64_t (*)(unsigned char *, uint64_t, _OWORD *))sub_10055B7D4);
}

uint64_t sub_1005580E8()
{
  return sub_10055C520((uint64_t (*)(unsigned char *, uint64_t, _OWORD *))sub_10055B99C);
}

uint64_t sub_100558120()
{
  return sub_10055C7B0((uint64_t (*)(unsigned char *, uint64_t, _OWORD *))sub_10055BB64);
}

uint64_t sub_100558158()
{
  return sub_10055CA40((uint64_t (*)(unsigned char *, uint64_t, _OWORD *))sub_10055BD30);
}

uint64_t sub_100558190()
{
  return sub_10055C290((uint64_t (*)(unsigned char *, uint64_t, _OWORD *))sub_10055BEFC);
}

uint64_t sub_1005581C8()
{
  return SingleValueDecodingContainer.decode(_:)();
}

uint64_t sub_1005581E0()
{
  return sub_10055C290((uint64_t (*)(unsigned char *, uint64_t, _OWORD *))sub_10055C0C8);
}

uint64_t sub_100558218()
{
  return sub_10055C520((uint64_t (*)(unsigned char *, uint64_t, _OWORD *))sub_10055C354);
}

uint64_t sub_100558250()
{
  return sub_10055C7B0((uint64_t (*)(unsigned char *, uint64_t, _OWORD *))sub_10055C5E4);
}

uint64_t sub_100558288()
{
  return sub_10055CA40((uint64_t (*)(unsigned char *, uint64_t, _OWORD *))sub_10055C874);
}

uint64_t sub_1005582C0()
{
  return sub_10055C290((uint64_t (*)(unsigned char *, uint64_t, _OWORD *))sub_10055AED0);
}

uint64_t sub_1005582F8()
{
  return SingleValueDecodingContainer.decode(_:)();
}

uint64_t sub_100558310@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_100557CA0(a1, a2, a3, a4);
}

unint64_t sub_100558334()
{
  unint64_t result = qword_100667220[0];
  if (!qword_100667220[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100667220);
  }
  return result;
}

uint64_t sub_100558388()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1005583D0()
{
  swift_bridgeObjectRetain();
  sub_1000172F8(&qword_1006672B8);
  sub_10055D5DC();
  uint64_t v0 = Sequence.compactMap<A>(_:)();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100558464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_bridgeObjectRetain();
  uint64_t v5 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a4 + 16))
  {
    sub_100016D20(v5, v6);
    char v8 = v7;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v8 = 0;
  }
  return v8 & 1;
}

uint64_t sub_1005584F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = a3;
  sub_1005585C4(a1, a3, a4, a5, a6, (void (*)(uint64_t *, uint64_t, uint64_t))v14);
  if (!v6)
  {
    v13[3] = a5;
    void v13[4] = a6;
    uint64_t v11 = sub_10019CE94(v13);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(v11, a1, a5);
    LOBYTE(v9) = sub_10055B09C(v14, v9, (uint64_t)v13);
    sub_100014524((uint64_t)v14);
    sub_10001729C((uint64_t)v13, &qword_100667218);
  }
  return v9 & 1;
}

_OWORD *sub_1005585C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, void (*a6)(uint64_t *, uint64_t, uint64_t)@<X8>)
{
  BOOL v30 = a6;
  uint64_t v35 = type metadata accessor for DecodingError.Context();
  uint64_t v31 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a3 + 16) && (unint64_t v15 = sub_100016D20(v13, v14), (v16 & 1) != 0))
  {
    sub_1000144C8(*(void *)(a3 + 56) + 32 * v15, (uint64_t)&v32);
    swift_bridgeObjectRelease();
    if (*((void *)&v33 + 1)) {
      return sub_1001C5DD4(&v32, v30);
    }
  }
  else
  {
    long long v32 = 0u;
    long long v33 = 0u;
    swift_bridgeObjectRelease();
  }
  sub_10001729C((uint64_t)&v32, (uint64_t *)&unk_10065C9C0);
  *((void *)&v33 + 1) = a4;
  uint64_t v34 = a5;
  uint64_t v18 = sub_10019CE94((uint64_t *)&v32);
  BOOL v30 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16);
  v30(v18, a1, a4);
  sub_100559430((uint64_t)&v32, a2);
  sub_10001729C((uint64_t)&v32, &qword_100667218);
  *(void *)&long long v32 = 0;
  *((void *)&v32 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(38);
  v19._object = (void *)0x80000001005C1EB0;
  v19._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v19);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v20._countAndFlagsBits = 2238496;
  v20._object = (void *)0xE300000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 10530;
  v22._object = (void *)0xE200000000000000;
  String.append(_:)(v22);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v23 = type metadata accessor for DecodingError();
  swift_allocError();
  int64_t v25 = v24;
  uint64_t v26 = (char *)v24 + *(int *)(sub_1000172F8(&qword_1006672B0) + 48);
  v25[3] = a4;
  v25[4] = a5;
  int64_t v27 = sub_10019CE94(v25);
  v30(v27, a1, a4);
  uint64_t v28 = v31;
  uint64_t v29 = v35;
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v26, v12, v35);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v23 - 8) + 104))(v25, enum case for DecodingError.keyNotFound(_:), v23);
  swift_willThrow();
  return (_OWORD *)(*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v12, v29);
}

uint64_t sub_1005588FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = a3;
  sub_1005585C4(a1, a3, a4, a5, a6, (void (*)(uint64_t *, uint64_t, uint64_t))v17);
  if (!v6)
  {
    v16[3] = a5;
    void v16[4] = a6;
    uint64_t v11 = sub_10019CE94(v16);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(v11, a1, a5);
    sub_1000144C8((uint64_t)v17, (uint64_t)v15);
    if (swift_dynamicCast())
    {
      uint64_t v9 = v14;
    }
    else
    {
      type metadata accessor for DecodingError();
      swift_allocError();
      sub_1005565E4(v17, v9, (uint64_t)v16, v12);
      swift_willThrow();
    }
    sub_100014524((uint64_t)v17);
    sub_10001729C((uint64_t)v16, &qword_100667218);
  }
  return v9;
}

double sub_100558A40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1005585C4(a1, a3, a4, a5, a6, (void (*)(uint64_t *, uint64_t, uint64_t))v15);
  if (!v6)
  {
    v14[3] = a5;
    void v14[4] = a6;
    uint64_t v12 = sub_10019CE94(v14);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(v12, a1, a5);
    double v7 = sub_10055B2C4(v15, a3, (uint64_t)v14);
    sub_100014524((uint64_t)v15);
    sub_10001729C((uint64_t)v14, &qword_100667218);
  }
  return v7;
}

float sub_100558B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1005585C4(a1, a3, a4, a5, a6, (void (*)(uint64_t *, uint64_t, uint64_t))v15);
  if (!v6)
  {
    v14[3] = a5;
    void v14[4] = a6;
    uint64_t v12 = sub_10019CE94(v14);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(v12, a1, a5);
    float v7 = sub_10055B54C(v15, a3, (uint64_t)v14);
    sub_100014524((uint64_t)v15);
    sub_10001729C((uint64_t)v14, &qword_100667218);
  }
  return v7;
}

uint64_t (*sub_100558BF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(unsigned char *, uint64_t, uint64_t *)))(unsigned char *, uint64_t, uint64_t *)
{
  sub_1005585C4(a1, a3, a4, a5, a6, (void (*)(uint64_t *, uint64_t, uint64_t))v16);
  if (!v7)
  {
    v15[3] = a5;
    void v15[4] = a6;
    uint64_t v13 = sub_10019CE94(v15);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(v13, a1, a5);
    a7 = (uint64_t (*)(unsigned char *, uint64_t, uint64_t *))a7(v16, a3, v15);
    sub_100014524((uint64_t)v16);
    sub_10001729C((uint64_t)v15, &qword_100667218);
  }
  return a7;
}

uint64_t (*sub_100558CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(unsigned char *, uint64_t, uint64_t *)))(unsigned char *, uint64_t, uint64_t *)
{
  sub_1005585C4(a1, a3, a4, a5, a6, (void (*)(uint64_t *, uint64_t, uint64_t))v16);
  if (!v7)
  {
    v15[3] = a5;
    void v15[4] = a6;
    uint64_t v13 = sub_10019CE94(v15);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(v13, a1, a5);
    a7 = (uint64_t (*)(unsigned char *, uint64_t, uint64_t *))a7(v16, a3, v15);
    sub_100014524((uint64_t)v16);
    sub_10001729C((uint64_t)v15, &qword_100667218);
  }
  return a7;
}

uint64_t (*sub_100558DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(unsigned char *, uint64_t, uint64_t *)))(unsigned char *, uint64_t, uint64_t *)
{
  sub_1005585C4(a1, a3, a4, a5, a6, (void (*)(uint64_t *, uint64_t, uint64_t))v16);
  if (!v7)
  {
    v15[3] = a5;
    void v15[4] = a6;
    uint64_t v13 = sub_10019CE94(v15);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(v13, a1, a5);
    a7 = (uint64_t (*)(unsigned char *, uint64_t, uint64_t *))a7(v16, a3, v15);
    sub_100014524((uint64_t)v16);
    sub_10001729C((uint64_t)v15, &qword_100667218);
  }
  return a7;
}

uint64_t (*sub_100558E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(unsigned char *, uint64_t, uint64_t *)))(unsigned char *, uint64_t, uint64_t *)
{
  sub_1005585C4(a1, a3, a4, a5, a6, (void (*)(uint64_t *, uint64_t, uint64_t))v16);
  if (!v7)
  {
    v15[3] = a5;
    void v15[4] = a6;
    uint64_t v13 = sub_10019CE94(v15);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(v13, a1, a5);
    a7 = (uint64_t (*)(unsigned char *, uint64_t, uint64_t *))a7(v16, a3, v15);
    sub_100014524((uint64_t)v16);
    sub_10001729C((uint64_t)v15, &qword_100667218);
  }
  return a7;
}

_OWORD *sub_100558F50@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  unint64_t result = sub_1005585C4(a2, a4, a5, a6, a8, (void (*)(uint64_t *, uint64_t, uint64_t))v22);
  if (!v10)
  {
    uint64_t v23 = a10;
    v21[3] = a6;
    v21[4] = a8;
    Swift::String v20 = sub_10019CE94(v21);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 16))(v20, a2, a6);
    sub_100557D80(v22, a1, a3, a4, (uint64_t)v21, a7, v23, a9);
    sub_100014524((uint64_t)v22);
    return (_OWORD *)sub_10001729C((uint64_t)v21, &qword_100667218);
  }
  return result;
}

uint64_t sub_100559068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = (uint64_t)sub_1005585C4(a2, a4, a5, a6, a8, (void (*)(uint64_t *, uint64_t, uint64_t))&v14);
  if (!v8)
  {
    sub_1000172F8(&qword_10065FEA0);
    if (swift_dynamicCast())
    {
      uint64_t v14 = a3;
      unint64_t v15 = a4;
      uint64_t v16 = v13;
      type metadata accessor for AppStoreResponseDecoderImpl.KeyedContainer();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_getWitnessTable();
      return KeyedDecodingContainer.init<A>(_:)();
    }
    else
    {
      uint64_t v14 = 0x203A4F444F54;
      unint64_t v15 = 0xE600000000000000;
      v12._countAndFlagsBits = StaticString.description.getter();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1005591E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t result = (uint64_t)sub_1005585C4(a1, a3, a4, a5, a6, (void (*)(uint64_t *, uint64_t, uint64_t))v15);
  if (!v7)
  {
    sub_1000172F8(&qword_100662430);
    if (swift_dynamicCast())
    {
      uint64_t v12 = v15[5];
      a7[3] = &type metadata for AppStoreResponseDecoderImpl.UnkeyedContainer;
      a7[4] = sub_100558334();
      uint64_t v13 = (void *)swift_allocObject();
      *a7 = v13;
      _OWORD v13[2] = a2;
      v13[3] = a3;
      void v13[4] = 0;
      uint64_t v13[5] = v12;
      swift_retain();
      return swift_bridgeObjectRetain();
    }
    else
    {
      v15[0] = 0x203A4F444F54;
      v15[1] = 0xE600000000000000;
      v14._countAndFlagsBits = StaticString.description.getter();
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  return result;
}

void sub_100559320()
{
  v0._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_1005593A8()
{
  v0._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_100559430(uint64_t a1, uint64_t a2)
{
  sub_100017238(a1, (uint64_t)&v5, &qword_100667218);
  if (v6)
  {
    sub_10018B164(&v5, (uint64_t)v7);
    sub_1000172F8(&qword_10065E568);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
    sub_10019B17C((uint64_t)v7, inited + 32);
    *(void *)&long long v5 = a2;
    swift_bridgeObjectRetain();
    sub_100554EAC(inited);
    a2 = v5;
    sub_100014524((uint64_t)v7);
  }
  else
  {
    sub_10001729C((uint64_t)&v5, &qword_100667218);
    swift_bridgeObjectRetain();
  }
  return a2;
}

uint64_t sub_100559524()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10055952C()
{
  return sub_1005583D0();
}

uint64_t sub_100559540(uint64_t a1)
{
  return sub_100558464(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_100559554(uint64_t a1, uint64_t a2)
{
  return sub_1005584F4(a1, *v2, v2[1], v2[2], *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1;
}

uint64_t sub_100559580(uint64_t a1, uint64_t a2)
{
  return sub_1005588FC(a1, *v2, v2[1], v2[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
}

double sub_1005595A8(uint64_t a1, uint64_t a2)
{
  return sub_100558A40(a1, *v2, v2[1], v2[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
}

float sub_1005595D0(uint64_t a1, uint64_t a2)
{
  return sub_100558B18(a1, *v2, v2[1], v2[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t (*sub_1005595F8(uint64_t a1, uint64_t a2, uint64_t a3))(unsigned char *, uint64_t, uint64_t *)
{
  return sub_10055984C(a1, a2, a3, (uint64_t (*)(unsigned char *, uint64_t, uint64_t *))sub_10055B7D4);
}

uint64_t (*sub_100559624(uint64_t a1, uint64_t a2, uint64_t a3))(unsigned char *, uint64_t, uint64_t *)
{
  return sub_100559744(a1, a2, a3, (uint64_t (*)(unsigned char *, uint64_t, uint64_t *))sub_10055B99C);
}

uint64_t (*sub_100559650(uint64_t a1, uint64_t a2, uint64_t a3))(unsigned char *, uint64_t, uint64_t *)
{
  return sub_10055979C(a1, a2, a3, (uint64_t (*)(unsigned char *, uint64_t, uint64_t *))sub_10055BB64);
}

uint64_t (*sub_10055967C(uint64_t a1, uint64_t a2, uint64_t a3))(unsigned char *, uint64_t, uint64_t *)
{
  return sub_1005597F4(a1, a2, a3, (uint64_t (*)(unsigned char *, uint64_t, uint64_t *))sub_10055BD30);
}

uint64_t (*sub_1005596A8(uint64_t a1, uint64_t a2, uint64_t a3))(unsigned char *, uint64_t, uint64_t *)
{
  return sub_10055984C(a1, a2, a3, (uint64_t (*)(unsigned char *, uint64_t, uint64_t *))sub_10055BEFC);
}

uint64_t sub_1005596D4()
{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)();
}

uint64_t (*sub_1005596EC(uint64_t a1, uint64_t a2, uint64_t a3))(unsigned char *, uint64_t, uint64_t *)
{
  return sub_10055984C(a1, a2, a3, (uint64_t (*)(unsigned char *, uint64_t, uint64_t *))sub_10055C0C8);
}

uint64_t (*sub_100559718(uint64_t a1, uint64_t a2, uint64_t a3))(unsigned char *, uint64_t, uint64_t *)
{
  return sub_100559744(a1, a2, a3, (uint64_t (*)(unsigned char *, uint64_t, uint64_t *))sub_10055C354);
}

uint64_t (*sub_100559744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(unsigned char *, uint64_t, uint64_t *)))(unsigned char *, uint64_t, uint64_t *)
{
  return sub_100558CC8(a1, *v4, v4[1], v4[2], *(void *)(a2 + 16), *(void *)(a2 + 24), a4);
}

uint64_t (*sub_100559770(uint64_t a1, uint64_t a2, uint64_t a3))(unsigned char *, uint64_t, uint64_t *)
{
  return sub_10055979C(a1, a2, a3, (uint64_t (*)(unsigned char *, uint64_t, uint64_t *))sub_10055C5E4);
}

uint64_t (*sub_10055979C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(unsigned char *, uint64_t, uint64_t *)))(unsigned char *, uint64_t, uint64_t *)
{
  return sub_100558DA0(a1, *v4, v4[1], v4[2], *(void *)(a2 + 16), *(void *)(a2 + 24), a4);
}

uint64_t (*sub_1005597C8(uint64_t a1, uint64_t a2, uint64_t a3))(unsigned char *, uint64_t, uint64_t *)
{
  return sub_1005597F4(a1, a2, a3, (uint64_t (*)(unsigned char *, uint64_t, uint64_t *))sub_10055C874);
}

uint64_t (*sub_1005597F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(unsigned char *, uint64_t, uint64_t *)))(unsigned char *, uint64_t, uint64_t *)
{
  return sub_100558E78(a1, *v4, v4[1], v4[2], *(void *)(a2 + 16), *(void *)(a2 + 24), a4);
}

uint64_t (*sub_100559820(uint64_t a1, uint64_t a2, uint64_t a3))(unsigned char *, uint64_t, uint64_t *)
{
  return sub_10055984C(a1, a2, a3, (uint64_t (*)(unsigned char *, uint64_t, uint64_t *))sub_10055AED0);
}

uint64_t (*sub_10055984C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(unsigned char *, uint64_t, uint64_t *)))(unsigned char *, uint64_t, uint64_t *)
{
  return sub_100558BF0(a1, *v4, v4[1], v4[2], *(void *)(a2 + 16), *(void *)(a2 + 24), a4);
}

uint64_t sub_100559878()
{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)();
}

uint64_t sub_100559890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100559C48(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, uint64_t, void, uint64_t))sub_100558F50);
}

uint64_t sub_1005598BC()
{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

uint64_t sub_1005598D4()
{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

uint64_t sub_1005598EC()
{
  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_100559910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100559B3C(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_10055993C()
{
  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_100559960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100559A84(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_10055998C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100559AE0(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_1005599B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100559B3C(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_1005599E4()
{
  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_100559A08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100559BC4(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_100559A34()
{
  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_100559A58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100559A84(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_100559A84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FF;
}

uint64_t sub_100559AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100559AE0(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_100559AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FFFF;
}

uint64_t sub_100559B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100559B3C(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_100559B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  unint64_t v4 = a4();
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

uint64_t sub_100559B74()
{
  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_100559B98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100559BC4(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_100559BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = a4();
  if (v4) {
    return v6;
  }
  return result;
}

uint64_t sub_100559BF0()
{
  return KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_100559C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100559C48(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, uint64_t, void, uint64_t))sub_100559068);
}

uint64_t sub_100559C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, void, void, void, void, uint64_t, void, uint64_t))
{
  return a7(a1, a2, *v7, v7[1], v7[2], *(void *)(a5 + 16), a3, *(void *)(a5 + 24), a4);
}

uint64_t sub_100559C8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100559D0C(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1005591E0);
}

void sub_100559CB8()
{
}

uint64_t sub_100559CE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100559D0C(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1005593A8);
}

uint64_t sub_100559D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void))
{
  return a4(a1, *v4, v4[1], v4[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t sub_100559D3C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6 = v4[2];
  if ((v6 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v8 = v4[3];
  if (v6 >= *(void *)(v8 + 16))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v11 = (void *)result;
  sub_1000144C8(v8 + 32 * v6 + 32, (uint64_t)v21);
  uint64_t v12 = *v4;
  uint64_t v13 = v4[1];
  Swift::String v19 = &type metadata for AppStoreResponseDecoderImpl.UnkeyedContainer.IndexKey;
  unint64_t v20 = sub_10055CDE0();
  unint64_t v17 = v6;
  char v18 = 0;
  sub_100557D80(v21, v11, v12, v13, (uint64_t)&v17, a2, a3, a4);
  sub_100014524((uint64_t)v21);
  uint64_t result = sub_10001729C((uint64_t)&v17, &qword_100667218);
  if (v5) {
    return result;
  }
  uint64_t v14 = v4[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  v4[2] = v16;
  return result;
}

void sub_100559E3C()
{
  if (*(unsigned char *)(v0 + 8))
  {
    __break(1u);
  }
  else
  {
    v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100559EB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
  return result;
}

uint64_t sub_100559EEC()
{
  return *(void *)v0;
}

uint64_t sub_100559EF8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(_WORD *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_100559F04(uint64_t a1)
{
  unint64_t v2 = sub_10055CDE0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100559F40(uint64_t a1)
{
  unint64_t v2 = sub_10055CDE0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100559F7C()
{
  return *(void *)(*(void *)(v0 + 24) + 16);
}

BOOL sub_100559F8C()
{
  return *(void *)(v0 + 16) >= *(void *)(*(void *)(v0 + 24) + 16);
}

uint64_t sub_100559FA0()
{
  return *(void *)(v0 + 16);
}

void sub_100559FA8()
{
  v0._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_10055A030()
{
  sub_10055CE34();
  return v0 & 1;
}

void sub_10055A04C()
{
}

void sub_10055A064()
{
}

void sub_10055A07C()
{
}

uint64_t sub_10055A094()
{
  return sub_10055D208((uint64_t)sub_10055B7D4);
}

uint64_t sub_10055A0C0()
{
  return sub_10055D2E4((uint64_t)sub_10055B99C);
}

uint64_t sub_10055A0EC()
{
  return sub_10055D3C0((uint64_t)sub_10055BB64);
}

uint64_t sub_10055A118()
{
  return sub_10055D49C((uint64_t)sub_10055BD30);
}

uint64_t sub_10055A144()
{
  return sub_10055D208((uint64_t)sub_10055BEFC);
}

uint64_t sub_10055A170()
{
  return UnkeyedDecodingContainer.decode(_:)();
}

uint64_t sub_10055A188()
{
  return sub_10055D208((uint64_t)sub_10055C0C8);
}

uint64_t sub_10055A1B4()
{
  return sub_10055D2E4((uint64_t)sub_10055C354);
}

uint64_t sub_10055A1E0()
{
  return sub_10055D3C0((uint64_t)sub_10055C5E4);
}

uint64_t sub_10055A20C()
{
  return sub_10055D49C((uint64_t)sub_10055C874);
}

uint64_t sub_10055A238()
{
  return sub_10055D208((uint64_t)sub_10055AED0);
}

uint64_t sub_10055A264()
{
  return UnkeyedDecodingContainer.decode(_:)();
}

uint64_t sub_10055A27C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_100559D3C(a1, a2, a3, a4);
}

uint64_t sub_10055A294()
{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

uint64_t sub_10055A2AC()
{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

uint64_t sub_10055A2C4()
{
  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_10055A2E8(uint64_t a1, uint64_t a2)
{
  return sub_10055A514(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_10055A314()
{
  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_10055A338(uint64_t a1, uint64_t a2)
{
  return sub_10055A45C(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_10055A364(uint64_t a1, uint64_t a2)
{
  return sub_10055A4B8(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_10055A390(uint64_t a1, uint64_t a2)
{
  return sub_10055A514(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_10055A3BC()
{
  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_10055A3E0(uint64_t a1, uint64_t a2)
{
  return sub_10055A59C(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_10055A40C()
{
  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_10055A430(uint64_t a1, uint64_t a2)
{
  return sub_10055A45C(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_10055A45C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FF;
}

uint64_t sub_10055A48C(uint64_t a1, uint64_t a2)
{
  return sub_10055A4B8(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_10055A4B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FFFF;
}

uint64_t sub_10055A4E8(uint64_t a1, uint64_t a2)
{
  return sub_10055A514(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_10055A514(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t v3 = a3();
  return v3 | ((HIDWORD(v3) & 1) << 32);
}

uint64_t sub_10055A54C()
{
  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_10055A570(uint64_t a1, uint64_t a2)
{
  return sub_10055A59C(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_10055A59C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result = a3();
  if (v3) {
    return v5;
  }
  return result;
}

uint64_t sub_10055A5C8()
{
  return UnkeyedDecodingContainer.decodeIfPresent<A>(_:)();
}

uint64_t sub_10055A5F4()
{
  return sub_100557BF0();
}

void sub_10055A60C()
{
  v0._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_10055A694@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for DecodingError.Context();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000144C8((uint64_t)a1, (uint64_t)&v31);
  if (swift_dynamicCast())
  {
    uint64_t v27 = a4;
    uint64_t v28 = a3;
    uint64_t v33 = v9;
    uint64_t v16 = v29;
    BOOL v15 = v30;
    URL.init(string:encodingInvalidCharacters:)();
    uint64_t v17 = type metadata accessor for URL();
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v14, 1, v17) == 1)
    {
      sub_10001729C((uint64_t)v14, &qword_10065C3C0);
      sub_100559430(v28, a2);
      uint64_t v31 = 0;
      unint64_t v32 = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      uint64_t v31 = 0x3C20676E69727453;
      unint64_t v32 = 0xE800000000000000;
      v19._countAndFlagsBits = v16;
      v19._object = v15;
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._object = (void *)0x80000001005C1B80;
      v20._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v20);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      uint64_t v21 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v23 = v22;
      uint64_t v24 = v33;
      (*(void (**)(uint64_t, char *, uint64_t))(v33 + 16))(v22, v11, v8);
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v21 - 8) + 104))(v23, enum case for DecodingError.dataCorrupted(_:), v21);
      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v11, v8);
    }
    else
    {
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(v27, v14, v17);
    }
  }
  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    sub_1005565E4(a1, a2, a3, v26);
    return swift_willThrow();
  }
}

uint64_t sub_10055AA0C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  sub_100559430(a3, a2);
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(a1, "description", 0xD000000000000010, 0x80000001005C1C00);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0xD000000000000012;
  v15._object = (void *)0x80000001005C1C20;
  String.append(_:)(v15);
  v16._countAndFlagsBits = a4;
  v16._object = a5;
  String.append(_:)(v16);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v17 = enum case for DecodingError.dataCorrupted(_:);
  uint64_t v18 = type metadata accessor for DecodingError();
  Swift::String v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104);

  return v19(a6, v17, v18);
}

uint64_t sub_10055AB74()
{
  return dispatch thunk of Decodable.init(from:)();
}

uint64_t type metadata accessor for AppStoreResponseDecoderImpl.KeyedContainer()
{
  return sub_100259AC0();
}

uint64_t sub_10055AC4C()
{
  return sub_10055AB74();
}

void *sub_10055AC6C(void *a1)
{
  return sub_10028ED9C(0, a1[2], 0, a1);
}

uint64_t sub_10055AC80(unint64_t a1)
{
  return sub_10028FBF4(0, *(void *)(a1 + 16), 0, a1);
}

void *sub_10055AC94(void *a1)
{
  return sub_10029020C(0, a1[2], 0, a1);
}

uint64_t sub_10055ACA8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AppStoreResponseDecoderImpl();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10055ACF0(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t sub_10055AD6C(unint64_t a1)
{
  return sub_100290DB0(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_10055AD80(unint64_t a1)
{
  return sub_10028FBC0(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_10055AD94()
{
  uint64_t result = swift_beginAccess();
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    sub_1000144C8(v3 + 32 * v4, (uint64_t)v11);
    uint64_t v5 = *(void *)(v0 + 16);
    uint64_t v10 = 0;
    memset(v9, 0, sizeof(v9));
    sub_1000144C8((uint64_t)v11, (uint64_t)v8);
    swift_bridgeObjectRetain();
    if (swift_dynamicCast())
    {
      uint64_t v1 = v7;
    }
    else
    {
      type metadata accessor for DecodingError();
      swift_allocError();
      sub_1005565E4(v11, v5, (uint64_t)v9, v6);
      swift_willThrow();
    }
    swift_bridgeObjectRelease();
    sub_10001729C((uint64_t)v9, &qword_100667218);
    sub_100014524((uint64_t)v11);
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10055AED0(void *a1, uint64_t a2, uint64_t a3)
{
  sub_1000144C8((uint64_t)a1, (uint64_t)&v15);
  sub_10018B1DC(0, (unint64_t *)&qword_100661DD0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_14;
  }
  id v7 = v16;
  if (kCFBooleanTrue) {
    BOOL v8 = v16 == kCFBooleanTrue;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8 || (kCFBooleanFalse ? (BOOL v9 = v16 == kCFBooleanFalse) : (BOOL v9 = 0), v9))
  {

LABEL_14:
    type metadata accessor for DecodingError();
    swift_allocError();
    sub_10055685C(a1, a2, a3, v12);
    swift_willThrow();
    return v3;
  }
  id v3 = [v16 unsignedLongLongValue];
  sub_10018B1DC(0, (unint64_t *)&qword_1006600C8);
  id v10 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedLongLong:v3];
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    sub_10055AA0C(v7, a2, a3, 0x3436746E4955, (void *)0xE600000000000000, v14);
    swift_willThrow();
  }

  return v3;
}

uint64_t sub_10055B09C(void *a1, uint64_t a2, uint64_t a3)
{
  sub_1000144C8((uint64_t)a1, (uint64_t)v12);
  sub_10018B1DC(0, (unint64_t *)&qword_100661DD0);
  if (swift_dynamicCast()) {
    BOOL v6 = v11 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if (kCFBooleanTrue) {
      goto LABEL_7;
    }
LABEL_17:
    char v7 = 1;
    return v7 & 1;
  }
  swift_unknownObjectRelease();
  if (kCFBooleanTrue) {
    BOOL v8 = v11 == kCFBooleanTrue;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8) {
    goto LABEL_17;
  }
LABEL_7:
  sub_1000144C8((uint64_t)a1, (uint64_t)v12);
  if (swift_dynamicCast() && v11)
  {
    swift_unknownObjectRelease();
    if (kCFBooleanFalse && v11 == kCFBooleanFalse) {
      goto LABEL_11;
    }
LABEL_19:
    type metadata accessor for DecodingError();
    swift_allocError();
    sub_100556AE4(a1, a2, a3, v9);
    swift_willThrow();
    return v7 & 1;
  }
  if (kCFBooleanFalse) {
    goto LABEL_19;
  }
LABEL_11:
  char v7 = 0;
  return v7 & 1;
}

uint64_t sub_10055B208()
{
  uint64_t result = swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    sub_1000144C8(v2 + 32 * v3, (uint64_t)v8);
    uint64_t v4 = *(void *)(v0 + 16);
    uint64_t v7 = 0;
    memset(v6, 0, sizeof(v6));
    swift_bridgeObjectRetain();
    char v5 = sub_10055B09C(v8, v4, (uint64_t)v6);
    swift_bridgeObjectRelease();
    sub_10001729C((uint64_t)v6, &qword_100667218);
    sub_100014524((uint64_t)v8);
    return v5 & 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

double sub_10055B2C4(void *a1, uint64_t a2, uint64_t a3)
{
  sub_1000144C8((uint64_t)a1, (uint64_t)&v16);
  sub_10018B1DC(0, (unint64_t *)&qword_100661DD0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_14;
  }
  id v7 = v17;
  if (kCFBooleanTrue) {
    BOOL v8 = v17 == kCFBooleanTrue;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8 || (kCFBooleanFalse ? (BOOL v9 = v17 == kCFBooleanFalse) : (BOOL v9 = 0), v9))
  {

LABEL_14:
    type metadata accessor for DecodingError();
    swift_allocError();
    sub_100556C20(a1, a2, a3, v13);
    swift_willThrow();
    return v3;
  }
  [v17 doubleValue];
  double v3 = v10;
  sub_10018B1DC(0, (unint64_t *)&qword_1006600C8);
  id v11 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v3];
  char v12 = static NSObject.== infix(_:_:)();

  if ((v12 & 1) == 0)
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    sub_10055AA0C(v7, a2, a3, 0x656C62756F44, (void *)0xE600000000000000, v15);
    swift_willThrow();
  }

  return v3;
}

uint64_t sub_10055B490()
{
  uint64_t result = swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    sub_1000144C8(v2 + 32 * v3, (uint64_t)v7);
    uint64_t v4 = *(void *)(v0 + 16);
    uint64_t v6 = 0;
    memset(v5, 0, sizeof(v5));
    swift_bridgeObjectRetain();
    sub_10055B2C4(v7, v4, (uint64_t)v5);
    swift_bridgeObjectRelease();
    sub_10001729C((uint64_t)v5, &qword_100667218);
    return sub_100014524((uint64_t)v7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

float sub_10055B54C(void *a1, uint64_t a2, uint64_t a3)
{
  sub_1000144C8((uint64_t)a1, (uint64_t)&v18);
  sub_10018B1DC(0, (unint64_t *)&qword_100661DD0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_14;
  }
  id v7 = v19;
  if (kCFBooleanTrue) {
    BOOL v8 = v19 == kCFBooleanTrue;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8 || (kCFBooleanFalse ? (BOOL v9 = v19 == kCFBooleanFalse) : (BOOL v9 = 0), v9))
  {

LABEL_14:
    type metadata accessor for DecodingError();
    swift_allocError();
    sub_100556D5C(a1, a2, a3, v15);
    swift_willThrow();
    return v3;
  }
  [v19 floatValue];
  float v3 = v10;
  sub_10018B1DC(0, (unint64_t *)&qword_1006600C8);
  id v11 = objc_allocWithZone((Class)NSNumber);
  *(float *)&double v12 = v3;
  id v13 = [v11 initWithFloat:v12];
  char v14 = static NSObject.== infix(_:_:)();

  if ((v14 & 1) == 0)
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    sub_10055AA0C(v7, a2, a3, 0x74616F6C46, (void *)0xE500000000000000, v17);
    swift_willThrow();
  }

  return v3;
}

uint64_t sub_10055B718()
{
  uint64_t result = swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    sub_1000144C8(v2 + 32 * v3, (uint64_t)v7);
    uint64_t v4 = *(void *)(v0 + 16);
    uint64_t v6 = 0;
    memset(v5, 0, sizeof(v5));
    swift_bridgeObjectRetain();
    sub_10055B54C(v7, v4, (uint64_t)v5);
    swift_bridgeObjectRelease();
    sub_10001729C((uint64_t)v5, &qword_100667218);
    return sub_100014524((uint64_t)v7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10055B7D4(void *a1, uint64_t a2, uint64_t a3)
{
  sub_1000144C8((uint64_t)a1, (uint64_t)&v15);
  sub_10018B1DC(0, (unint64_t *)&qword_100661DD0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_14;
  }
  id v7 = v16;
  if (kCFBooleanTrue) {
    BOOL v8 = v16 == kCFBooleanTrue;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8 || (kCFBooleanFalse ? (BOOL v9 = v16 == kCFBooleanFalse) : (BOOL v9 = 0), v9))
  {

LABEL_14:
    type metadata accessor for DecodingError();
    swift_allocError();
    sub_100556E98(a1, a2, a3, v12);
    swift_willThrow();
    return v3;
  }
  id v3 = [v16 integerValue];
  sub_10018B1DC(0, (unint64_t *)&qword_1006600C8);
  id v10 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v3];
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    sub_10055AA0C(v7, a2, a3, 7630409, (void *)0xE300000000000000, v14);
    swift_willThrow();
  }

  return v3;
}

id sub_10055B99C(void *a1, uint64_t a2, uint64_t a3)
{
  sub_1000144C8((uint64_t)a1, (uint64_t)&v15);
  sub_10018B1DC(0, (unint64_t *)&qword_100661DD0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_14;
  }
  id v7 = v16;
  if (kCFBooleanTrue) {
    BOOL v8 = v16 == kCFBooleanTrue;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8 || (kCFBooleanFalse ? (BOOL v9 = v16 == kCFBooleanFalse) : (BOOL v9 = 0), v9))
  {

LABEL_14:
    type metadata accessor for DecodingError();
    swift_allocError();
    sub_100556FD4(a1, a2, a3, v12);
    swift_willThrow();
    return v3;
  }
  id v3 = [v16 charValue];
  sub_10018B1DC(0, (unint64_t *)&qword_1006600C8);
  id v10 = [objc_allocWithZone((Class)NSNumber) initWithChar:v3];
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    sub_10055AA0C(v7, a2, a3, 947154505, (void *)0xE400000000000000, v14);
    swift_willThrow();
  }

  return v3;
}

id sub_10055BB64(void *a1, uint64_t a2, uint64_t a3)
{
  sub_1000144C8((uint64_t)a1, (uint64_t)&v15);
  sub_10018B1DC(0, (unint64_t *)&qword_100661DD0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_14;
  }
  id v7 = v16;
  if (kCFBooleanTrue) {
    BOOL v8 = v16 == kCFBooleanTrue;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8 || (kCFBooleanFalse ? (BOOL v9 = v16 == kCFBooleanFalse) : (BOOL v9 = 0), v9))
  {

LABEL_14:
    type metadata accessor for DecodingError();
    swift_allocError();
    sub_100557110(a1, a2, a3, v12);
    swift_willThrow();
    return v3;
  }
  id v3 = [v16 shortValue];
  sub_10018B1DC(0, (unint64_t *)&qword_1006600C8);
  id v10 = [objc_allocWithZone((Class)NSNumber) initWithShort:v3];
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    sub_10055AA0C(v7, a2, a3, 0x3631746E49, (void *)0xE500000000000000, v14);
    swift_willThrow();
  }

  return v3;
}

id sub_10055BD30(void *a1, uint64_t a2, uint64_t a3)
{
  sub_1000144C8((uint64_t)a1, (uint64_t)&v15);
  sub_10018B1DC(0, (unint64_t *)&qword_100661DD0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_14;
  }
  id v7 = v16;
  if (kCFBooleanTrue) {
    BOOL v8 = v16 == kCFBooleanTrue;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8 || (kCFBooleanFalse ? (BOOL v9 = v16 == kCFBooleanFalse) : (BOOL v9 = 0), v9))
  {

LABEL_14:
    type metadata accessor for DecodingError();
    swift_allocError();
    sub_10055724C(a1, a2, a3, v12);
    swift_willThrow();
    return v3;
  }
  id v3 = [v16 intValue];
  sub_10018B1DC(0, (unint64_t *)&qword_1006600C8);
  id v10 = [objc_allocWithZone((Class)NSNumber) initWithInt:v3];
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    sub_10055AA0C(v7, a2, a3, 0x3233746E49, (void *)0xE500000000000000, v14);
    swift_willThrow();
  }

  return v3;
}

id sub_10055BEFC(void *a1, uint64_t a2, uint64_t a3)
{
  sub_1000144C8((uint64_t)a1, (uint64_t)&v15);
  sub_10018B1DC(0, (unint64_t *)&qword_100661DD0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_14;
  }
  id v7 = v16;
  if (kCFBooleanTrue) {
    BOOL v8 = v16 == kCFBooleanTrue;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8 || (kCFBooleanFalse ? (BOOL v9 = v16 == kCFBooleanFalse) : (BOOL v9 = 0), v9))
  {

LABEL_14:
    type metadata accessor for DecodingError();
    swift_allocError();
    sub_100557388(a1, a2, a3, v12);
    swift_willThrow();
    return v3;
  }
  id v3 = [v16 longLongValue];
  sub_10018B1DC(0, (unint64_t *)&qword_1006600C8);
  id v10 = [objc_allocWithZone((Class)NSNumber) initWithLongLong:v3];
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    sub_10055AA0C(v7, a2, a3, 0x3436746E49, (void *)0xE500000000000000, v14);
    swift_willThrow();
  }

  return v3;
}

id sub_10055C0C8(void *a1, uint64_t a2, uint64_t a3)
{
  sub_1000144C8((uint64_t)a1, (uint64_t)&v15);
  sub_10018B1DC(0, (unint64_t *)&qword_100661DD0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_14;
  }
  id v7 = v16;
  if (kCFBooleanTrue) {
    BOOL v8 = v16 == kCFBooleanTrue;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8 || (kCFBooleanFalse ? (BOOL v9 = v16 == kCFBooleanFalse) : (BOOL v9 = 0), v9))
  {

LABEL_14:
    type metadata accessor for DecodingError();
    swift_allocError();
    sub_1005574C4(a1, a2, a3, v12);
    swift_willThrow();
    return v3;
  }
  id v3 = [v16 unsignedIntegerValue];
  sub_10018B1DC(0, (unint64_t *)&qword_1006600C8);
  id v10 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInteger:v3];
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    sub_10055AA0C(v7, a2, a3, 1953384789, (void *)0xE400000000000000, v14);
    swift_willThrow();
  }

  return v3;
}

uint64_t sub_10055C290(uint64_t (*a1)(unsigned char *, uint64_t, _OWORD *))
{
  uint64_t result = swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    sub_1000144C8(v4 + 32 * v5, (uint64_t)v10);
    uint64_t v6 = *(void *)(v1 + 16);
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    swift_bridgeObjectRetain();
    uint64_t v7 = a1(v10, v6, v8);
    swift_bridgeObjectRelease();
    sub_10001729C((uint64_t)v8, &qword_100667218);
    sub_100014524((uint64_t)v10);
    return v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10055C354(void *a1, uint64_t a2, uint64_t a3)
{
  sub_1000144C8((uint64_t)a1, (uint64_t)&v15);
  sub_10018B1DC(0, (unint64_t *)&qword_100661DD0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_14;
  }
  id v7 = v16;
  if (kCFBooleanTrue) {
    BOOL v8 = v16 == kCFBooleanTrue;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8 || (kCFBooleanFalse ? (BOOL v9 = v16 == kCFBooleanFalse) : (BOOL v9 = 0), v9))
  {

LABEL_14:
    type metadata accessor for DecodingError();
    swift_allocError();
    sub_100557600(a1, a2, a3, v12);
    swift_willThrow();
    return v3;
  }
  id v3 = [v16 unsignedCharValue];
  sub_10018B1DC(0, (unint64_t *)&qword_1006600C8);
  id v10 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedChar:v3];
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    sub_10055AA0C(v7, a2, a3, 0x38746E4955, (void *)0xE500000000000000, v14);
    swift_willThrow();
  }

  return v3;
}

uint64_t sub_10055C520(uint64_t (*a1)(unsigned char *, uint64_t, _OWORD *))
{
  uint64_t result = swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    sub_1000144C8(v4 + 32 * v5, (uint64_t)v10);
    uint64_t v6 = *(void *)(v1 + 16);
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    swift_bridgeObjectRetain();
    uint64_t v7 = a1(v10, v6, v8);
    swift_bridgeObjectRelease();
    sub_10001729C((uint64_t)v8, &qword_100667218);
    sub_100014524((uint64_t)v10);
    return v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10055C5E4(void *a1, uint64_t a2, uint64_t a3)
{
  sub_1000144C8((uint64_t)a1, (uint64_t)&v15);
  sub_10018B1DC(0, (unint64_t *)&qword_100661DD0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_14;
  }
  id v7 = v16;
  if (kCFBooleanTrue) {
    BOOL v8 = v16 == kCFBooleanTrue;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8 || (kCFBooleanFalse ? (BOOL v9 = v16 == kCFBooleanFalse) : (BOOL v9 = 0), v9))
  {

LABEL_14:
    type metadata accessor for DecodingError();
    swift_allocError();
    sub_10055773C(a1, a2, a3, v12);
    swift_willThrow();
    return v3;
  }
  id v3 = [v16 unsignedShortValue];
  sub_10018B1DC(0, (unint64_t *)&qword_1006600C8);
  id v10 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedShort:v3];
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    sub_10055AA0C(v7, a2, a3, 0x3631746E4955, (void *)0xE600000000000000, v14);
    swift_willThrow();
  }

  return v3;
}

uint64_t sub_10055C7B0(uint64_t (*a1)(unsigned char *, uint64_t, _OWORD *))
{
  uint64_t result = swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    sub_1000144C8(v4 + 32 * v5, (uint64_t)v10);
    uint64_t v6 = *(void *)(v1 + 16);
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    swift_bridgeObjectRetain();
    uint64_t v7 = a1(v10, v6, v8);
    swift_bridgeObjectRelease();
    sub_10001729C((uint64_t)v8, &qword_100667218);
    sub_100014524((uint64_t)v10);
    return v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10055C874(void *a1, uint64_t a2, uint64_t a3)
{
  sub_1000144C8((uint64_t)a1, (uint64_t)&v15);
  sub_10018B1DC(0, (unint64_t *)&qword_100661DD0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_14;
  }
  id v7 = v16;
  if (kCFBooleanTrue) {
    BOOL v8 = v16 == kCFBooleanTrue;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8 || (kCFBooleanFalse ? (BOOL v9 = v16 == kCFBooleanFalse) : (BOOL v9 = 0), v9))
  {

LABEL_14:
    type metadata accessor for DecodingError();
    swift_allocError();
    sub_100557878(a1, a2, a3, v12);
    swift_willThrow();
    return v3;
  }
  id v3 = [v16 unsignedIntValue];
  sub_10018B1DC(0, (unint64_t *)&qword_1006600C8);
  id v10 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInt:v3];
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    sub_10055AA0C(v7, a2, a3, 0x3233746E4955, (void *)0xE600000000000000, v14);
    swift_willThrow();
  }

  return v3;
}

uint64_t sub_10055CA40(uint64_t (*a1)(unsigned char *, uint64_t, _OWORD *))
{
  uint64_t result = swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    sub_1000144C8(v4 + 32 * v5, (uint64_t)v10);
    uint64_t v6 = *(void *)(v1 + 16);
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    swift_bridgeObjectRetain();
    uint64_t v7 = a1(v10, v6, v8);
    swift_bridgeObjectRelease();
    sub_10001729C((uint64_t)v8, &qword_100667218);
    sub_100014524((uint64_t)v10);
    return v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10055CB04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t sub_10055CB10()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_10055CB54(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10055CBA4(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10055CC1C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t destroy for AppStoreResponseDecoderImpl.UnkeyedContainer()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AppStoreResponseDecoderImpl.UnkeyedContainer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AppStoreResponseDecoderImpl.UnkeyedContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AppStoreResponseDecoderImpl.UnkeyedContainer(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AppStoreResponseDecoderImpl.UnkeyedContainer()
{
  return &type metadata for AppStoreResponseDecoderImpl.UnkeyedContainer;
}

unint64_t sub_10055CDE0()
{
  unint64_t result = qword_1006672A8;
  if (!qword_1006672A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006672A8);
  }
  return result;
}

void sub_10055CE34()
{
  unint64_t v2 = v0[2];
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v3 = v0[3];
  if (v2 >= *(void *)(v3 + 16))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  sub_1000144C8(v3 + 32 * v2 + 32, (uint64_t)v12);
  uint64_t v4 = v0[1];
  id v10 = &type metadata for AppStoreResponseDecoderImpl.UnkeyedContainer.IndexKey;
  unint64_t v11 = sub_10055CDE0();
  unint64_t v8 = v2;
  char v9 = 0;
  sub_10055B09C(v12, v4, (uint64_t)&v8);
  sub_100014524((uint64_t)v12);
  sub_10001729C((uint64_t)&v8, &qword_100667218);
  if (v1) {
    return;
  }
  uint64_t v5 = v0[2];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6)
  {
LABEL_9:
    __break(1u);
    return;
  }
  v0[2] = v7;
}

void sub_10055CF08()
{
  unint64_t v1 = v0[2];
  if ((v1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v2 = v0[3];
  if (v1 >= *(void *)(v2 + 16))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  sub_1000144C8(v2 + 32 * v1 + 32, (uint64_t)v13);
  uint64_t v3 = v0[1];
  unint64_t v11 = &type metadata for AppStoreResponseDecoderImpl.UnkeyedContainer.IndexKey;
  unint64_t v12 = sub_10055CDE0();
  unint64_t v9 = v1;
  char v10 = 0;
  sub_1000144C8((uint64_t)v13, (uint64_t)v8);
  if (!swift_dynamicCast())
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    sub_1005565E4(v13, v3, (uint64_t)&v9, v7);
    swift_willThrow();
    sub_100014524((uint64_t)v13);
    sub_10001729C((uint64_t)&v9, &qword_100667218);
    return;
  }
  sub_100014524((uint64_t)v13);
  sub_10001729C((uint64_t)&v9, &qword_100667218);
  uint64_t v4 = v0[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (!v5)
  {
    v0[2] = v6;
    return;
  }
LABEL_9:
  __break(1u);
}

void sub_10055D050()
{
  unint64_t v2 = v0[2];
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v3 = v0[3];
  if (v2 >= *(void *)(v3 + 16))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  sub_1000144C8(v3 + 32 * v2 + 32, (uint64_t)v12);
  uint64_t v4 = v0[1];
  char v10 = &type metadata for AppStoreResponseDecoderImpl.UnkeyedContainer.IndexKey;
  unint64_t v11 = sub_10055CDE0();
  unint64_t v8 = v2;
  char v9 = 0;
  sub_10055B2C4(v12, v4, (uint64_t)&v8);
  sub_100014524((uint64_t)v12);
  sub_10001729C((uint64_t)&v8, &qword_100667218);
  if (v1) {
    return;
  }
  uint64_t v5 = v0[2];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6)
  {
LABEL_9:
    __break(1u);
    return;
  }
  v0[2] = v7;
}

void sub_10055D12C()
{
  unint64_t v2 = v0[2];
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v3 = v0[3];
  if (v2 >= *(void *)(v3 + 16))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  sub_1000144C8(v3 + 32 * v2 + 32, (uint64_t)v12);
  uint64_t v4 = v0[1];
  char v10 = &type metadata for AppStoreResponseDecoderImpl.UnkeyedContainer.IndexKey;
  unint64_t v11 = sub_10055CDE0();
  unint64_t v8 = v2;
  char v9 = 0;
  sub_10055B54C(v12, v4, (uint64_t)&v8);
  sub_100014524((uint64_t)v12);
  sub_10001729C((uint64_t)&v8, &qword_100667218);
  if (v1) {
    return;
  }
  uint64_t v5 = v0[2];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6)
  {
LABEL_9:
    __break(1u);
    return;
  }
  v0[2] = v7;
}

uint64_t sub_10055D208(uint64_t result)
{
  unint64_t v3 = v1[2];
  if ((v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v4 = v1[3];
  if (v3 >= *(void *)(v4 + 16))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = (uint64_t (*)(unsigned char *, uint64_t, unint64_t *))result;
  sub_1000144C8(v4 + 32 * v3 + 32, (uint64_t)v15);
  uint64_t v6 = v1[1];
  id v13 = &type metadata for AppStoreResponseDecoderImpl.UnkeyedContainer.IndexKey;
  unint64_t v14 = sub_10055CDE0();
  unint64_t v11 = v3;
  char v12 = 0;
  uint64_t v7 = v5(v15, v6, &v11);
  sub_100014524((uint64_t)v15);
  unint64_t result = sub_10001729C((uint64_t)&v11, &qword_100667218);
  if (v2) {
    return v7;
  }
  uint64_t v8 = v1[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (!v9)
  {
    v1[2] = v10;
    return v7;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10055D2E4(uint64_t result)
{
  unint64_t v3 = v1[2];
  if ((v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v4 = v1[3];
  if (v3 >= *(void *)(v4 + 16))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = (uint64_t (*)(unsigned char *, uint64_t, unint64_t *))result;
  sub_1000144C8(v4 + 32 * v3 + 32, (uint64_t)v15);
  uint64_t v6 = v1[1];
  id v13 = &type metadata for AppStoreResponseDecoderImpl.UnkeyedContainer.IndexKey;
  unint64_t v14 = sub_10055CDE0();
  unint64_t v11 = v3;
  char v12 = 0;
  uint64_t v7 = v5(v15, v6, &v11);
  sub_100014524((uint64_t)v15);
  unint64_t result = sub_10001729C((uint64_t)&v11, &qword_100667218);
  if (v2) {
    return v7;
  }
  uint64_t v8 = v1[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (!v9)
  {
    v1[2] = v10;
    return v7;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10055D3C0(uint64_t result)
{
  unint64_t v3 = v1[2];
  if ((v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v4 = v1[3];
  if (v3 >= *(void *)(v4 + 16))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = (uint64_t (*)(unsigned char *, uint64_t, unint64_t *))result;
  sub_1000144C8(v4 + 32 * v3 + 32, (uint64_t)v15);
  uint64_t v6 = v1[1];
  id v13 = &type metadata for AppStoreResponseDecoderImpl.UnkeyedContainer.IndexKey;
  unint64_t v14 = sub_10055CDE0();
  unint64_t v11 = v3;
  char v12 = 0;
  uint64_t v7 = v5(v15, v6, &v11);
  sub_100014524((uint64_t)v15);
  unint64_t result = sub_10001729C((uint64_t)&v11, &qword_100667218);
  if (v2) {
    return v7;
  }
  uint64_t v8 = v1[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (!v9)
  {
    v1[2] = v10;
    return v7;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10055D49C(uint64_t result)
{
  unint64_t v3 = v1[2];
  if ((v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v4 = v1[3];
  if (v3 >= *(void *)(v4 + 16))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = (uint64_t (*)(unsigned char *, uint64_t, unint64_t *))result;
  sub_1000144C8(v4 + 32 * v3 + 32, (uint64_t)v15);
  uint64_t v6 = v1[1];
  id v13 = &type metadata for AppStoreResponseDecoderImpl.UnkeyedContainer.IndexKey;
  unint64_t v14 = sub_10055CDE0();
  unint64_t v11 = v3;
  char v12 = 0;
  uint64_t v7 = v5(v15, v6, &v11);
  sub_100014524((uint64_t)v15);
  unint64_t result = sub_10001729C((uint64_t)&v11, &qword_100667218);
  if (v2) {
    return v7;
  }
  uint64_t v8 = v1[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (!v9)
  {
    v1[2] = v10;
    return v7;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10055D578()
{
  return dispatch thunk of CodingKey.init(stringValue:)();
}

unint64_t sub_10055D5DC()
{
  unint64_t result = qword_1006672C0;
  if (!qword_1006672C0)
  {
    sub_10017B924(&qword_1006672B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006672C0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AppStoreResponseDecoderImpl.UnkeyedContainer.IndexKey(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AppStoreResponseDecoderImpl.UnkeyedContainer.IndexKey(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AppStoreResponseDecoderImpl.UnkeyedContainer.IndexKey()
{
  return &type metadata for AppStoreResponseDecoderImpl.UnkeyedContainer.IndexKey;
}

unint64_t sub_10055D698()
{
  unint64_t result = qword_1006672C8;
  if (!qword_1006672C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006672C8);
  }
  return result;
}

unint64_t sub_10055D6F0()
{
  unint64_t result = qword_1006672D0;
  if (!qword_1006672D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006672D0);
  }
  return result;
}

unint64_t sub_10055D748(char a1)
{
  unint64_t result = 0x5F746E756F636361;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x726168735F707061;
      break;
    case 2:
      unint64_t result = 0x695F656C646E7562;
      break;
    case 3:
      unint64_t result = 0x765F656C646E7562;
      break;
    case 4:
      unint64_t result = 0x6C72755F706461;
      break;
    case 5:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 6:
      unint64_t result = 0xD000000000000014;
      break;
    case 7:
      unint64_t result = 0x64695F6D657469;
      break;
    case 8:
      unint64_t result = 0x5F6E6F6973726576;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10055D890(unsigned __int8 *a1, char *a2)
{
  return sub_10051BE04(*a1, *a2);
}

Swift::Int sub_10055D89C()
{
  return Hasher._finalize()();
}

uint64_t sub_10055D8E4()
{
  return sub_1004498E4();
}

Swift::Int sub_10055D8EC()
{
  return Hasher._finalize()();
}

unint64_t sub_10055D930@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10055DE98(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_10055D960@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10055D748(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10055D98C(void *a1@<X8>)
{
  *a1 = &off_100636CF8;
}

id sub_10055DB3C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MarketplaceUpdateEntity.Entity();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for MarketplaceUpdateEntity.Entity()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for MarketplaceUpdateEntity.Property(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10055DC60);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MarketplaceUpdateEntity.Property()
{
  return &type metadata for MarketplaceUpdateEntity.Property;
}

ValueMetadata *type metadata accessor for MarketplaceUpdateEntity()
{
  return &type metadata for MarketplaceUpdateEntity;
}

unint64_t sub_10055DCB0()
{
  unint64_t result = qword_100667330;
  if (!qword_100667330)
  {
    sub_10017B924(&qword_100667338);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100667330);
  }
  return result;
}

unint64_t sub_10055DD10()
{
  unint64_t result = qword_100667340;
  if (!qword_100667340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100667340);
  }
  return result;
}

unint64_t sub_10055DD64(void *a1)
{
  a1[1] = sub_10055DD9C();
  a1[2] = sub_10055DDF0();
  unint64_t result = sub_10055DE44();
  a1[3] = result;
  return result;
}

unint64_t sub_10055DD9C()
{
  unint64_t result = qword_100667348;
  if (!qword_100667348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100667348);
  }
  return result;
}

unint64_t sub_10055DDF0()
{
  unint64_t result = qword_100667350;
  if (!qword_100667350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100667350);
  }
  return result;
}

unint64_t sub_10055DE44()
{
  unint64_t result = qword_100667358;
  if (!qword_100667358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100667358);
  }
  return result;
}

unint64_t sub_10055DE98(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10063A408, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9) {
    return 9;
  }
  else {
    return v3;
  }
}

uint64_t sub_10055DEE4()
{
  v1[40] = v0;
  uint64_t v2 = type metadata accessor for BagLanguageSource();
  v1[41] = v2;
  v1[42] = *(void *)(v2 - 8);
  v1[43] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Bag();
  v1[44] = v3;
  v1[45] = *(void *)(v3 - 8);
  v1[46] = swift_task_alloc();
  v1[47] = swift_task_alloc();
  type metadata accessor for JetPackPath();
  v1[48] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for LocalizedStringsBundle();
  v1[49] = v4;
  v1[50] = *(void *)(v4 - 8);
  v1[51] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for InMemoryJetPackResourceBundle();
  v1[52] = v5;
  v1[53] = *(void *)(v5 - 8);
  v1[54] = swift_task_alloc();
  v1[55] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for JetPackSigningPolicy();
  v1[56] = v6;
  v1[57] = *(void *)(v6 - 8);
  v1[58] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for InMemoryJetPackLoader();
  v1[59] = v7;
  v1[60] = *(void *)(v7 - 8);
  v1[61] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for JetPackAssetRequestSourcePolicy();
  v1[62] = v8;
  v1[63] = *(void *)(v8 - 8);
  v1[64] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for URL();
  v1[65] = v9;
  v1[66] = *(void *)(v9 - 8);
  v1[67] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for URLJetPackAssetRequest();
  v1[68] = v10;
  v1[69] = *(void *)(v10 - 8);
  v1[70] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for JetPackAsset();
  v1[71] = v11;
  v1[72] = *(void *)(v11 - 8);
  v1[73] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for URLJetPackAssetFetcher();
  v1[74] = v12;
  v1[75] = *(void *)(v12 - 8);
  v1[76] = swift_task_alloc();
  type metadata accessor for JetPackAssetSession.Configuration();
  v1[77] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Logger();
  v1[78] = v13;
  v1[79] = *(void *)(v13 - 8);
  v1[80] = swift_task_alloc();
  v1[81] = swift_task_alloc();
  v1[82] = swift_task_alloc();
  v1[83] = swift_task_alloc();
  sub_1000172F8(&qword_10065B8F0);
  v1[84] = swift_task_alloc();
  v1[85] = swift_task_alloc();
  v1[86] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for Date();
  v1[87] = v14;
  v1[88] = *(void *)(v14 - 8);
  v1[89] = swift_task_alloc();
  v1[90] = swift_task_alloc();
  return _swift_task_switch(sub_10055E4F0, v0, 0);
}

uint64_t sub_10055E4F0()
{
  uint64_t v56 = v0;
  uint64_t v1 = v0[40];
  if (!*(void *)(v1 + 112))
  {
    uint64_t v2 = v0[88];
    uint64_t v3 = v0[87];
    uint64_t v4 = v0[86];
    uint64_t v5 = OBJC_IVAR____TtC28ManagedAppDistributionDaemon19LocalizationJetPack_lastFailedLoadAttempt;
    v0[91] = OBJC_IVAR____TtC28ManagedAppDistributionDaemon19LocalizationJetPack_lastFailedLoadAttempt;
    uint64_t v6 = v1 + v5;
    swift_beginAccess();
    sub_100561A78(v6, v4);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1, v3) == 1)
    {
      sub_1004463F8(v0[86]);
LABEL_9:
      static Logger.general.getter();
      swift_retain_n();
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        v55[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136315138;
        if ((swift_task_isCurrentExecutor() & 1) == 0) {
          swift_task_reportUnexpectedExecutor();
        }
        uint64_t v24 = v0[79];
        uint64_t v51 = v0[78];
        uint64_t v53 = v0[82];
        sub_100561BB0(&qword_10065C4D8, (void (*)(uint64_t))&type metadata accessor for URL);
        uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
        v0[39] = sub_1000143F4(v25, v26, v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Loading localization resource bundle from %s", v23, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
        v27(v53, v51);
      }
      else
      {
        uint64_t v28 = v0[82];
        uint64_t v29 = v0[79];
        uint64_t v30 = v0[78];
        swift_release_n();

        uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
        v27(v28, v30);
      }
      v0[92] = v27;
      uint64_t v31 = type metadata accessor for JetPackAssetDiskCache();
      uint64_t v32 = JetPackAssetDiskCache.__allocating_init()();
      v0[93] = v32;
      uint64_t v33 = v0[67];
      uint64_t v34 = v0[66];
      uint64_t v52 = v0[65];
      uint64_t v36 = v0[63];
      uint64_t v35 = v0[64];
      uint64_t v54 = v0[62];
      uint64_t v37 = v0[40];
      v55[3] = v31;
      v55[4] = (uint64_t)&protocol witness table for JetPackAssetDiskCache;
      v55[0] = v32;
      swift_retain();
      JetPackAssetSession.Configuration.init(cache:)();
      type metadata accessor for JetPackAssetSession();
      swift_allocObject();
      v0[94] = JetPackAssetSession.init(configuration:)();
      uint64_t v38 = *(void *)(v37 + 120);
      v0[95] = v38;
      int64_t v39 = self;
      int64_t v40 = self;
      swift_unknownObjectRetain();
      id v41 = [v40 currentProcess];
      id v42 = objc_msgSend(v39, "ams_configurationWithProcessInfo:bag:", v41, v38);

      URLJetPackAssetFetcher.init(bag:urlSessionConfiguration:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v33, v37 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon19LocalizationJetPack_url, v52);
      (*(void (**)(uint64_t, void, uint64_t))(v36 + 104))(v35, enum case for JetPackAssetRequestSourcePolicy.standard(_:), v54);
      URLJetPackAssetRequest.init(url:sourcePolicy:)();
      uint64_t v43 = (void *)swift_task_alloc();
      v0[96] = v43;
      uint64_t v44 = sub_100561BB0(&qword_1006674A8, (void (*)(uint64_t))&type metadata accessor for URLJetPackAssetFetcher);
      *uint64_t v43 = v0;
      v43[1] = sub_10055EF4C;
      uint64_t v45 = v0[76];
      uint64_t v46 = v0[74];
      uint64_t v47 = v0[73];
      uint64_t v48 = v0[70];
      return JetPackAssetSession.jetPack<A>(for:fetcher:)(v47, v48, v45, v46, v44);
    }
    uint64_t v7 = v0[89];
    uint64_t v8 = v0[88];
    uint64_t v9 = v0[87];
    (*(void (**)(void, void, uint64_t))(v8 + 32))(v0[90], v0[86], v9);
    Date.init()();
    Date.timeIntervalSince(_:)();
    double v11 = v10;
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v12(v7, v9);
    if (v11 >= 3600.0)
    {
      v12(v0[90], v0[87]);
      goto LABEL_9;
    }
    static Logger.general.getter();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Failed to load localization resource bundle within the past 60 minutes; not reattempting.",
        v15,
        2u);
      swift_slowDealloc();
    }
    uint64_t v16 = v0[90];
    uint64_t v17 = v0[87];
    uint64_t v18 = v0[83];
    uint64_t v19 = v0[79];
    uint64_t v20 = v0[78];

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    v12(v16, v17);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int64_t v49 = (uint64_t (*)(void))v0[1];
  return v49();
}

uint64_t sub_10055EF4C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 776) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[70];
  uint64_t v4 = v2[69];
  uint64_t v5 = v2[68];
  uint64_t v6 = v2[40];
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    uint64_t v7 = sub_100560094;
  }
  else {
    uint64_t v7 = sub_10055F0C8;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_10055F0C8()
{
  (*(void (**)(uint64_t, void, uint64_t))(v0[57] + 104))(v0[58], enum case for JetPackSigningPolicy.required(_:), v0[56]);
  v0[25] = type metadata accessor for JetPackManagedKeyProvider();
  v0[26] = (uint64_t)&protocol witness table for JetPackManagedKeyProvider;
  sub_10019CE94(v0 + 22);
  JetPackManagedKeyProvider.init()();
  InMemoryJetPackLoader.init(signingPolicy:keyProvider:)();
  JetPackAsset.streamSource.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[98] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10055F1EC;
  uint64_t v2 = v0[55];
  return InMemoryJetPackLoader.bundle(from:)(v2, v0 + 2);
}

uint64_t sub_10055F1EC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1 + 16;
  *(void *)(*v1 + 792) = v0;
  swift_task_dealloc();
  uint64_t v4 = *(void *)(v2 + 320);
  sub_100014524(v3);
  if (v0) {
    uint64_t v5 = sub_10056054C;
  }
  else {
    uint64_t v5 = sub_10055F328;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_10055F328()
{
  long long v76 = v0;
  uint64_t v2 = v0[54];
  uint64_t v1 = v0[55];
  uint64_t v3 = v0[52];
  uint64_t v4 = v0[53];
  static Logger.general.getter();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v5(v2, v1, v3);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v66 = v0[81];
    int64_t v68 = (void (*)(uint64_t, uint64_t))v0[92];
    uint64_t v63 = v0[78];
    uint64_t v71 = v5;
    uint64_t v9 = v0[53];
    uint64_t v8 = v0[54];
    uint64_t v61 = v0[52];
    double v10 = (uint8_t *)swift_slowAlloc();
    v75[0] = swift_slowAlloc();
    *(_DWORD *)double v10 = 136315138;
    uint64_t v11 = JetPackResourceBundle.version.getter();
    if (v12)
    {
      unint64_t v13 = v12;
    }
    else
    {
      uint64_t v11 = 48;
      unint64_t v13 = 0xE100000000000000;
    }
    v0[38] = sub_1000143F4(v11, v13, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_type_t v14 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v14(v8, v61);
    uint64_t v5 = v71;
    os_log_type_t v15 = v7;
    uint64_t v16 = v14;
    _os_log_impl((void *)&_mh_execute_header, v6, v15, "Loaded resource bundle version %s", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v68(v66, v63);
  }
  else
  {
    uint64_t v17 = (void (*)(uint64_t, uint64_t))v0[92];
    uint64_t v18 = v0[81];
    uint64_t v19 = v0[78];
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v0[53] + 8);
    v16(v0[54], v0[52]);

    v17(v18, v19);
  }
  v0[100] = (uint64_t)v16;
  uint64_t v20 = v0[99];
  uint64_t v21 = v0[55];
  uint64_t v22 = v0[52];
  v0[20] = v22;
  v0[21] = (uint64_t)&protocol witness table for InMemoryJetPackResourceBundle;
  uint64_t v23 = sub_10019CE94(v0 + 17);
  v5((uint64_t)v23, v21, v22);
  JetPackPath.init(_:)();
  LocalizedStringsBundle.init(resourceBundle:indexPath:)();
  if (v20)
  {
    uint64_t v24 = v0[75];
    uint64_t v69 = v0[74];
    uint64_t v72 = v0[76];
    uint64_t v25 = v0[72];
    uint64_t v64 = v0[71];
    uint64_t v67 = v0[73];
    uint64_t v26 = v0[60];
    uint64_t v62 = v0[61];
    uint64_t v27 = v0[59];
    uint64_t v28 = v0[55];
    uint64_t v29 = v0[52];
    swift_release();
    swift_release();
    v16(v28, v29);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v62, v27);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v67, v64);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v72, v69);
    static Logger.general.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    uint64_t v33 = (void (*)(uint64_t, uint64_t))v0[92];
    uint64_t v34 = v0[80];
    uint64_t v35 = v0[78];
    if (v32)
    {
      uint64_t v73 = v0[78];
      uint64_t v70 = (void (*)(uint64_t, uint64_t))v0[92];
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      v75[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136446210;
      swift_getErrorValue();
      uint64_t v65 = v34;
      uint64_t v37 = *(void *)(v0[31] - 8);
      swift_task_alloc();
      (*(void (**)(void))(v37 + 16))();
      uint64_t v38 = String.init<A>(describing:)();
      unint64_t v40 = v39;
      swift_task_dealloc();
      v0[36] = sub_1000143F4(v38, v40, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Failed to load localization jetpack: %{public}s", v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v70(v65, v73);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      v33(v34, v35);
    }
    uint64_t v54 = v0[88];
    uint64_t v55 = v0[87];
    uint64_t v56 = v0[85];
    uint64_t v57 = v0[84];
    uint64_t v58 = v0[40] + v0[91];
    Date.init()();
    swift_errorRelease();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v54 + 56))(v56, 0, 1, v55);
    sub_100561AE0(v56, v57);
    swift_beginAccess();
    sub_100561B48(v57, v58);
    swift_endAccess();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v59 = (uint64_t (*)(void))v0[1];
    return v59();
  }
  else
  {
    uint64_t v41 = v0[50];
    uint64_t v74 = v0[51];
    uint64_t v42 = v0[49];
    uint64_t v44 = v0[46];
    uint64_t v43 = v0[47];
    uint64_t v46 = v0[44];
    uint64_t v45 = v0[45];
    uint64_t v47 = v0[42];
    uint64_t v48 = v0[43];
    uint64_t v49 = v0[41];
    swift_unknownObjectRetain();
    Bag.init(from:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))(v44, v43, v46);
    BagLanguageSource.init(bag:)();
    type metadata accessor for AppleServicesLocalizer();
    v0[15] = v42;
    v0[16] = (uint64_t)&protocol witness table for LocalizedStringsBundle;
    uint64_t v50 = sub_10019CE94(v0 + 12);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v41 + 16))(v50, v74, v42);
    v0[10] = v49;
    v0[11] = (uint64_t)&protocol witness table for BagLanguageSource;
    uint64_t v51 = sub_10019CE94(v0 + 7);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v47 + 16))(v51, v48, v49);
    type metadata accessor for BaseObjectGraph();
    uint64_t v52 = BaseObjectGraph.__allocating_init(name:_:)();
    v0[101] = v52;
    uint64_t v53 = (void *)swift_task_alloc();
    v0[102] = (uint64_t)v53;
    void *v53 = v0;
    v53[1] = sub_10055FC38;
    return static AppleServicesLocalizer.fetch(contentsOf:for:asPartOf:)(v0 + 12, v0 + 7, v52);
  }
}

uint64_t sub_10055FC38(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 824) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void *)(v4 + 320);
    swift_release();
    uint64_t v6 = sub_100560A4C;
    uint64_t v7 = v5;
  }
  else
  {
    uint64_t v8 = *(void *)(v4 + 320);
    swift_release();
    *(void *)(v4 + 832) = a1;
    sub_100014524(v4 + 56);
    sub_100014524(v4 + 96);
    uint64_t v6 = sub_10055FD9C;
    uint64_t v7 = v8;
  }
  return _swift_task_switch(v6, v7, 0);
}

uint64_t sub_10055FD9C()
{
  uint64_t v25 = v0[104];
  uint64_t v19 = (void (*)(uint64_t, uint64_t))v0[100];
  uint64_t v24 = v0[76];
  uint64_t v22 = v0[75];
  uint64_t v23 = v0[74];
  uint64_t v1 = v0[72];
  uint64_t v20 = v0[71];
  uint64_t v21 = v0[73];
  uint64_t v2 = v0[60];
  uint64_t v16 = v0[59];
  uint64_t v17 = v0[61];
  uint64_t v14 = v0[52];
  uint64_t v15 = v0[55];
  uint64_t v3 = v0[50];
  uint64_t v13 = v0[51];
  uint64_t v12 = v0[49];
  uint64_t v4 = v0[47];
  uint64_t v5 = v0[44];
  uint64_t v6 = v0[45];
  uint64_t v8 = v0[42];
  uint64_t v7 = v0[43];
  uint64_t v9 = v0[41];
  uint64_t v18 = v0[40];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v13, v12);
  v19(v15, v14);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v17, v16);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v21, v20);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v24, v23);
  *(void *)(v18 + 112) = v25;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100560094()
{
  uint64_t v25 = v0;
  uint64_t v1 = v0[76];
  uint64_t v2 = v0[75];
  uint64_t v3 = v0[74];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  static Logger.general.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v23 = (void (*)(uint64_t, uint64_t))v0[92];
    uint64_t v21 = v0[78];
    uint64_t v22 = v0[80];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446210;
    swift_getErrorValue();
    uint64_t v7 = *(void *)(v0[31] - 8);
    swift_task_alloc();
    (*(void (**)(void))(v7 + 16))();
    uint64_t v8 = String.init<A>(describing:)();
    unint64_t v10 = v9;
    swift_task_dealloc();
    v0[36] = sub_1000143F4(v8, v10, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to load localization jetpack: %{public}s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v23(v22, v21);
  }
  else
  {
    uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[92];
    uint64_t v12 = v0[80];
    uint64_t v13 = v0[78];
    swift_errorRelease();
    swift_errorRelease();

    v11(v12, v13);
  }
  uint64_t v14 = v0[88];
  uint64_t v15 = v0[87];
  uint64_t v16 = v0[85];
  uint64_t v17 = v0[84];
  uint64_t v18 = v0[40] + v0[91];
  Date.init()();
  swift_errorRelease();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v16, 0, 1, v15);
  sub_100561AE0(v16, v17);
  swift_beginAccess();
  sub_100561B48(v17, v18);
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_10056054C()
{
  os_log_type_t v31 = v0;
  uint64_t v28 = v0[76];
  uint64_t v1 = v0[75];
  uint64_t v2 = v0[74];
  uint64_t v3 = v0[73];
  uint64_t v4 = v0[72];
  uint64_t v5 = v0[71];
  uint64_t v6 = v0[60];
  uint64_t v7 = v0[61];
  uint64_t v8 = v0[59];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v28, v2);
  static Logger.general.getter();
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v29 = (void (*)(uint64_t, uint64_t))v0[92];
    uint64_t v26 = v0[78];
    uint64_t v27 = v0[80];
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136446210;
    swift_getErrorValue();
    uint64_t v12 = *(void *)(v0[31] - 8);
    swift_task_alloc();
    (*(void (**)(void))(v12 + 16))();
    uint64_t v13 = String.init<A>(describing:)();
    unint64_t v15 = v14;
    swift_task_dealloc();
    v0[36] = sub_1000143F4(v13, v15, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to load localization jetpack: %{public}s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v29(v27, v26);
  }
  else
  {
    uint64_t v16 = (void (*)(uint64_t, uint64_t))v0[92];
    uint64_t v17 = v0[80];
    uint64_t v18 = v0[78];
    swift_errorRelease();
    swift_errorRelease();

    v16(v17, v18);
  }
  uint64_t v19 = v0[88];
  uint64_t v20 = v0[87];
  uint64_t v21 = v0[85];
  uint64_t v22 = v0[84];
  uint64_t v23 = v0[40] + v0[91];
  Date.init()();
  swift_errorRelease();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v21, 0, 1, v20);
  sub_100561AE0(v21, v22);
  swift_beginAccess();
  sub_100561B48(v22, v23);
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = (uint64_t (*)(void))v0[1];
  return v24();
}

uint64_t sub_100560A4C()
{
  uint64_t v43 = v0;
  uint64_t v33 = (void (*)(uint64_t, uint64_t))v0[100];
  uint64_t v37 = v0[74];
  uint64_t v38 = v0[76];
  uint64_t v35 = v0[73];
  uint64_t v36 = v0[75];
  uint64_t v1 = v0[72];
  uint64_t v34 = v0[71];
  uint64_t v2 = v0[60];
  uint64_t v31 = v0[59];
  uint64_t v32 = v0[61];
  uint64_t v29 = v0[52];
  uint64_t v30 = v0[55];
  uint64_t v3 = v0[50];
  uint64_t v28 = v0[51];
  uint64_t v27 = v0[49];
  uint64_t v4 = v0[47];
  uint64_t v5 = v0[44];
  uint64_t v6 = v0[45];
  uint64_t v7 = v0[42];
  uint64_t v8 = v0[43];
  uint64_t v9 = v0[41];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v28, v27);
  v33(v30, v29);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v32, v31);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v35, v34);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v38, v37);
  sub_100014524((uint64_t)(v0 + 7));
  sub_100014524((uint64_t)(v0 + 12));
  static Logger.general.getter();
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v40 = v0[80];
    uint64_t v41 = (void (*)(uint64_t, uint64_t))v0[92];
    uint64_t v39 = v0[78];
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446210;
    swift_getErrorValue();
    uint64_t v13 = *(void *)(v0[31] - 8);
    swift_task_alloc();
    (*(void (**)(void))(v13 + 16))();
    uint64_t v14 = String.init<A>(describing:)();
    unint64_t v16 = v15;
    swift_task_dealloc();
    v0[36] = sub_1000143F4(v14, v16, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to load localization jetpack: %{public}s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v41(v40, v39);
  }
  else
  {
    uint64_t v17 = (void (*)(uint64_t, uint64_t))v0[92];
    uint64_t v18 = v0[80];
    uint64_t v19 = v0[78];
    swift_errorRelease();
    swift_errorRelease();

    v17(v18, v19);
  }
  uint64_t v20 = v0[88];
  uint64_t v21 = v0[87];
  uint64_t v22 = v0[85];
  uint64_t v23 = v0[84];
  uint64_t v24 = v0[40] + v0[91];
  Date.init()();
  swift_errorRelease();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v22, 0, 1, v21);
  sub_100561AE0(v22, v23);
  swift_beginAccess();
  sub_100561B48(v23, v24);
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

uint64_t sub_100560FFC(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for LocalizerLookupStrategy();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  return _swift_task_switch(sub_1005610BC, v1, 0);
}

uint64_t sub_1005610BC()
{
  v0[2] = sub_100298ED8();
  v0[3] = v1;
  v0[9] = v1;
  v0[10] = sub_100299848();
  v0[11] = sub_1002984B0();
  v0[12] = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[13] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10056116C;
  return sub_10055DEE4();
}

uint64_t sub_10056116C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  return _swift_task_switch(sub_10056127C, v1, 0);
}

uint64_t sub_10056127C()
{
  if (*(void *)(v0[5] + 112))
  {
    uint64_t v2 = v0[7];
    uint64_t v1 = v0[8];
    uint64_t v3 = v0[6];
    (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for LocalizerLookupStrategy.default(_:), v3);
    swift_retain();
    uint64_t v4 = AppleServicesLocalizer.string(forKey:with:using:)();
    uint64_t v6 = v5;
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
    v7._countAndFlagsBits = v4;
    v7._object = v6;
    Swift::Bool v8 = AppleServicesLocalizer.isLocalizedString(_:)(v7);
    uint64_t v9 = v0[12];
    if (v8)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    uint64_t v12 = v0[10];
    uint64_t v11 = v0[11];
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_100561804(v11, v9, v12);
    uint64_t v6 = v13;
    swift_release();
  }
  else
  {
    uint64_t v4 = sub_100561804(v0[11], v0[12], v0[10]);
    uint64_t v6 = v10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v6)
  {
    uint64_t v4 = sub_100298ED8();
    uint64_t v6 = v14;
  }
LABEL_8:
  swift_task_dealloc();
  unint64_t v15 = (uint64_t (*)(uint64_t, void *))v0[1];
  return v15(v4, v6);
}

uint64_t sub_10056142C()
{
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon19LocalizationJetPack_url;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_1004463F8(v0 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon19LocalizationJetPack_lastFailedLoadAttempt);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_1005614C8()
{
  return type metadata accessor for LocalizationJetPack();
}

uint64_t type metadata accessor for LocalizationJetPack()
{
  uint64_t result = qword_100667398;
  if (!qword_100667398) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10056151C()
{
  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    sub_100561608();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_100561608()
{
  if (!qword_1006673B8)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1006673B8);
    }
  }
}

uint64_t sub_100561660(uint64_t a1)
{
  uint64_t v2 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(string:)();
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for LocalizationJetPack();
    uint64_t v8 = swift_allocObject();
    swift_unknownObjectRetain();
    swift_defaultActor_initialize();
    *(void *)(v8 + 112) = 0;
    uint64_t v9 = v8 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon19LocalizationJetPack_lastFailedLoadAttempt;
    uint64_t v10 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v8 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon19LocalizationJetPack_url, v4, v5);
    *(void *)(v8 + 120) = a1;
    return v8;
  }
  return result;
}

uint64_t sub_100561804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3 || !a2)
  {
    swift_bridgeObjectRetain();
    return a1;
  }
  uint64_t v20 = a3 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a3 + 64);
  int64_t v21 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_7;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v17 >= v21) {
      goto LABEL_24;
    }
    unint64_t v18 = *(void *)(v20 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v21) {
        goto LABEL_24;
      }
      unint64_t v18 = *(void *)(v20 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v21) {
          goto LABEL_24;
        }
        unint64_t v18 = *(void *)(v20 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v18 - 1) & v18;
    unint64_t v11 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_7:
    uint64_t v12 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v11);
    uint64_t v13 = *v12;
    uint64_t v14 = (void *)v12[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15._countAndFlagsBits = v13;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 16448;
    v16._object = (void *)0xE200000000000000;
    String.append(_:)(v16);
    sub_100017B14();
    a1 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v21)
  {
LABEL_24:
    swift_release();
    return a1;
  }
  unint64_t v18 = *(void *)(v20 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v21) {
      goto LABEL_24;
    }
    unint64_t v18 = *(void *)(v20 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100561A78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_10065B8F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100561AE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_10065B8F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100561B48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_10065B8F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100561BB0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t destroy for IPA_PostambleTask(id *a1)
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for IPA_PostambleTask(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  int64_t v9 = *(void **)(a2 + 80);
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = v9;
  *(void *)(a1 + 88) = v8;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  id v10 = v3;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v11 = v9;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for IPA_PostambleTask(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  uint64_t v8 = *(void **)(a2 + 80);
  int64_t v9 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = v8;
  id v10 = v8;

  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for IPA_PostambleTask(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  swift_release();
  uint64_t v5 = *(void **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);

  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for IPA_PostambleTask(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IPA_PostambleTask(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IPA_PostambleTask()
{
  return &type metadata for IPA_PostambleTask;
}

uint64_t sub_100561FD4(uint64_t a1)
{
  v2[40] = a1;
  v2[41] = v1;
  sub_1000172F8(&qword_10065B220);
  v2[42] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for URL();
  v2[43] = v3;
  v2[44] = *(void *)(v3 - 8);
  v2[45] = swift_task_alloc();
  sub_1000172F8((uint64_t *)&unk_10065CA40);
  v2[46] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DDMPurchaseMethod();
  v2[47] = v4;
  v2[48] = *(void *)(v4 - 8);
  v2[49] = swift_task_alloc();
  sub_1000172F8(&qword_10065E4D0);
  v2[50] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ManagedAppStatus.State();
  v2[51] = v5;
  v2[52] = *(void *)(v5 - 8);
  v2[53] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DMCAppsScope();
  v2[54] = v6;
  v2[55] = *(void *)(v6 - 8);
  v2[56] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DMCAppsClient();
  v2[57] = v7;
  v2[58] = *(void *)(v7 - 8);
  v2[59] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v2[60] = v8;
  v2[61] = *(void *)(v8 - 8);
  v2[62] = swift_task_alloc();
  v2[63] = swift_task_alloc();
  v2[64] = swift_task_alloc();
  v2[65] = swift_task_alloc();
  v2[66] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for AppInstallRequestType();
  v2[67] = v9;
  v2[68] = *(void *)(v9 - 8);
  v2[69] = swift_task_alloc();
  v2[70] = swift_task_alloc();
  v2[71] = swift_task_alloc();
  sub_1000172F8(&qword_10065CFF0);
  unsigned char v2[72] = swift_task_alloc();
  v2[73] = swift_task_alloc();
  v2[74] = swift_task_alloc();
  sub_1000172F8(&qword_10065C9B0);
  v2[75] = swift_task_alloc();
  v2[76] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  v2[77] = v10;
  v2[78] = *(void *)(v10 - 8);
  v2[79] = swift_task_alloc();
  v2[80] = swift_task_alloc();
  return _swift_task_switch(sub_1005624C0, 0, 0);
}

uint64_t sub_1005624C0()
{
  *(_OWORD *)(v0 + 232) = *(_OWORD *)(*(void *)(v0 + 328) + 32);
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 240);
  *(void *)(v0 + 648) = v1;
  swift_retain();
  uint64_t v2 = sub_100312690(6, v1);
  uint64_t v4 = v3;
  *(void *)(v0 + 656) = v2;
  *(void *)(v0 + 664) = v3;
  sub_100263CCC(v0 + 232);
  if (v4)
  {
    uint64_t v5 = *(void *)(v0 + 624);
    uint64_t v6 = *(void *)(v0 + 616);
    uint64_t v7 = *(void *)(v0 + 608);
    swift_retain();
    sub_100311ADC(10, v1, v7);
    sub_100263CCC(v0 + 232);
    uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    *(void *)(v0 + 672) = v8;
    *(void *)(v0 + 680) = (v5 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
    if (v8(v7, 1, v6) == 1)
    {
      sub_10001729C(*(void *)(v0 + 608), &qword_10065C9B0);
    }
    else
    {
      uint64_t v11 = *(void *)(v0 + 640);
      uint64_t v12 = *(void *)(v0 + 328);
      (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 624) + 32))(v11, *(void *)(v0 + 608), *(void *)(v0 + 616));
      uint64_t v13 = *(void *)(*(void *)(v12 + 80)
                      + OBJC_IVAR____TtC28ManagedAppDistributionDaemon34InstallCoordinationInstallObserver_observers);
      *(void *)(swift_task_alloc() + 16) = v11;
      os_unfair_lock_lock((os_unfair_lock_t)(v13 + 24));
      sub_100549188((uint64_t *)(v13 + 16));
      os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 24));
      uint64_t v14 = *(void *)(v0 + 640);
      uint64_t v15 = *(void *)(v0 + 624);
      uint64_t v16 = *(void *)(v0 + 616);
      swift_task_dealloc();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    }
    int64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 688) = v17;
    *int64_t v17 = v0;
    v17[1] = sub_10056290C;
    void v17[4] = *(void *)(v0 + 328);
    return _swift_task_switch(sub_100568044, 0, 0);
  }
  else
  {
    type metadata accessor for InternalError();
    sub_10019FE50();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
}

uint64_t sub_10056290C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100562A34, 0, 0);
}

uint64_t sub_100562A34()
{
  uint64_t v1 = v0 + 232;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + 648);
  uint64_t v3 = *(void *)(v0 + 592);
  uint64_t v4 = *(void *)(v0 + 584);
  uint64_t v5 = *(void *)(v0 + 544);
  uint64_t v6 = *(void *)(v0 + 536);
  swift_retain();
  sub_100312650(16, v2, v3);
  sub_100263CCC(v0 + 232);
  sub_10056AB90(v3, v4);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  *(void *)(v0 + 696) = v7;
  *(void *)(v0 + 704) = (v5 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v7(v4, 1, v6) == 1)
  {
    sub_10001729C(*(void *)(v0 + 584), &qword_10065CFF0);
LABEL_3:
    uint64_t v8 = *(void *)(v0 + 328);
    static Logger.install.getter();
    sub_1004F8340(v8);
    sub_1004F8340(v8);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = *(void ***)(v0 + 328);
    if (v11)
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v52 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 138412290;
      uint64_t v14 = *v12;
      *(void *)(v0 + 296) = *v12;
      id v15 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v52 = v14;
      sub_10056ABF8((uint64_t)v12);
      sub_10056ABF8((uint64_t)v12);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "[%@] Failed to record install event because we didn't have an installType", v13, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      uint64_t v1 = v0 + 232;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10056ABF8(*(void *)(v0 + 328));
      sub_10056ABF8((uint64_t)v12);
    }
    uint64_t v38 = *(void *)(v0 + 520);
    uint64_t v39 = *(void *)(v0 + 480);
    uint64_t v40 = *(void *)(v0 + 488);

    uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    v41(v38, v39);
    goto LABEL_19;
  }
  uint64_t v16 = *(void *)(v0 + 328);
  (*(void (**)(void, void, void))(*(void *)(v0 + 544) + 32))(*(void *)(v0 + 568), *(void *)(v0 + 584), *(void *)(v0 + 536));
  uint64_t v17 = *(void *)(v16 + 8);
  if (*(void *)(v17 + 16) && (unint64_t v18 = sub_100016D20(0xD00000000000001ALL, 0x80000001005C1FE0), (v19 & 1) != 0))
  {
    sub_1000144C8(*(void *)(v17 + 56) + 32 * v18, v0 + 200);
  }
  else
  {
    *(_OWORD *)(v0 + 200) = 0u;
    *(_OWORD *)(v0 + 216) = 0u;
  }
  sub_1000172F8((uint64_t *)&unk_10065C9C0);
  if (swift_dynamicCast())
  {
    int v20 = *(unsigned __int8 *)(v0 + 193);
    if (v20 != 2 && (v20 & 1) == 0)
    {
      (*(void (**)(void, void))(*(void *)(v0 + 544) + 8))(*(void *)(v0 + 568), *(void *)(v0 + 536));
      goto LABEL_3;
    }
  }
  uint64_t v21 = *(void *)(v0 + 664);
  uint64_t v22 = *(void *)(v0 + 656);
  uint64_t v23 = *(os_unfair_lock_s **)(v0 + 648);
  uint64_t v24 = *(NSObject **)(v0 + 568);
  uint64_t v25 = *(void ***)(v0 + 328);
  swift_retain();
  uint64_t v26 = sub_100312690(30, v23);
  uint64_t v28 = v27;
  sub_100263CCC(v0 + 232);
  uint64_t v29 = *v25;
  char v30 = sub_100295AC8(v22, v21, v24, v26, v28, *v25);
  swift_bridgeObjectRelease();
  static Logger.install.getter();
  sub_1004F8340((uint64_t)v25);
  sub_1004F8340((uint64_t)v25);
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.info.getter();
  BOOL v33 = os_log_type_enabled(v31, v32);
  uint64_t v34 = *(void *)(v0 + 328);
  if (v33)
  {
    uint64_t v35 = swift_slowAlloc();
    uint64_t v36 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 138412546;
    *(void *)(v0 + 304) = v29;
    id v37 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v36 = v29;
    sub_10056ABF8(v34);
    sub_10056ABF8(v34);
    *(_WORD *)(v35 + 12) = 1024;
    *(_DWORD *)(v0 + 196) = v30 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "[%@] Recorded app install event with result: %{BOOL}d", (uint8_t *)v35, 0x12u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_10056ABF8(v34);
    sub_10056ABF8(v34);
  }
  uint64_t v42 = *(void *)(v0 + 568);
  uint64_t v43 = *(void *)(v0 + 544);
  uint64_t v44 = *(void *)(v0 + 536);
  uint64_t v41 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 488) + 8);
  v41(*(void *)(v0 + 528), *(void *)(v0 + 480));
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
  uint64_t v1 = v0 + 232;
LABEL_19:
  *(void *)(v0 + 712) = v41;
  uint64_t v45 = *(os_unfair_lock_s **)(v0 + 648);
  swift_retain();
  uint64_t v46 = sub_100312690(11, v45);
  uint64_t v48 = v47;
  *(void *)(v0 + 720) = v46;
  *(void *)(v0 + 728) = v47;
  sub_100263CCC(v1);
  if (v48)
  {
    uint64_t v49 = *(void *)(*(void *)(v0 + 328) + 72);
    *(void *)(v0 + 736) = v49;
    return _swift_task_switch(sub_10056307C, v49, 0);
  }
  else
  {
    uint64_t v50 = (void *)swift_task_alloc();
    *(void *)(v0 + 904) = v50;
    *uint64_t v50 = v0;
    v50[1] = sub_1005645C4;
    return sub_100568418();
  }
}

uint64_t sub_10056307C()
{
  uint64_t v1 = v0[91];
  uint64_t v2 = v0[90];
  uint64_t v3 = *(void *)(v0[92] + 112);
  v0[93] = v3;
  uint64_t v4 = swift_task_alloc();
  v0[94] = v4;
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  uint64_t v5 = swift_task_alloc();
  v0[95] = v5;
  *(void *)(v5 + 16) = sub_10023CA38;
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = dword_100660660;
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[96] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1005631C4;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100660660 + v6))((uint64_t)sub_1001C3EFC, v5, v3);
}

uint64_t sub_1005631C4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)*v3;
  v5[97] = a2;
  v5[98] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v6 = v5[92];
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = sub_100563AF8;
    uint64_t v8 = v6;
  }
  else
  {
    v5[99] = a1;
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = sub_1005633B4;
    uint64_t v8 = 0;
  }
  return _swift_task_switch(v7, v8, 0);
}

uint64_t sub_1005633B4()
{
  uint64_t v1 = v0[99];
  uint64_t v2 = (os_unfair_lock_s *)v0[97];
  uint64_t v4 = v0[55];
  uint64_t v3 = v0[56];
  uint64_t v5 = v0[54];
  swift_retain();
  char v6 = sub_100311928(9, v2);
  swift_release();
  uint64_t v7 = (unsigned int *)&enum case for DMCAppsScope.system(_:);
  if (v6) {
    uint64_t v7 = (unsigned int *)&enum case for DMCAppsScope.user(_:);
  }
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, *v7, v5);
  DMCAppsClient.init(scope:)();
  v0[5] = sub_1000172F8((uint64_t *)&unk_1006666B0);
  v0[6] = swift_getOpaqueTypeConformance2();
  v0[7] = swift_getOpaqueTypeConformance2();
  v0[8] = swift_getOpaqueTypeConformance2();
  v0[9] = swift_getOpaqueTypeConformance2();
  sub_10019CE94(v0 + 2);
  sub_10050B3CC(v1, v2);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[100] = (uint64_t)v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100563590;
  return DMCAppsClient.didInstallApplication(_:options:)(v0 + 2, 0);
}

uint64_t sub_100563590()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 808) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[58] + 8))(v2[59], v2[57]);
  if (v0)
  {
    uint64_t v3 = sub_1005638DC;
  }
  else
  {
    sub_100014524((uint64_t)(v2 + 2));
    uint64_t v3 = sub_100563714;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100563714()
{
  uint64_t v1 = (os_unfair_lock_s *)v0[97];
  uint64_t v2 = v0[50];
  (*(void (**)(void, void, void))(v0[52] + 104))(v0[53], enum case for ManagedAppStatus.State.managed(_:), v0[51]);
  uint64_t v3 = type metadata accessor for ManagedAppStatus.Reason();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  swift_retain();
  char v4 = sub_100311928(9, v1);
  swift_release();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[102] = v5;
  *uint64_t v5 = v0;
  uint64_t v6 = v0[91];
  if (v4 == 2)
  {
    v5[1] = sub_100563BC8;
    uint64_t v7 = v0[90];
    uint64_t v8 = v0[50];
    uint64_t v9 = v0[53];
    char v10 = 0;
  }
  else
  {
    v5[1] = sub_10056AF14;
    uint64_t v7 = v0[90];
    uint64_t v8 = v0[50];
    uint64_t v9 = v0[53];
    char v10 = v4;
  }
  return sub_10023FB0C(v9, v8, v7, v6, v10);
}

uint64_t sub_1005638DC()
{
  uint64_t v1 = *(void *)(v0 + 592);
  sub_100014524(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10001729C(v1, &qword_10065CFF0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100563AF8()
{
  swift_bridgeObjectRelease();
  swift_errorRelease();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 904) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1005645C4;
  return sub_100568418();
}

uint64_t sub_100563BC8()
{
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[123] = v0;
    uint64_t v4 = v2[52];
    uint64_t v3 = v2[53];
    uint64_t v7 = v2 + 50;
    uint64_t v5 = v2[50];
    uint64_t v6 = v7[1];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001729C(v5, &qword_10065E4D0);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v6);
    uint64_t v8 = sub_100567664;
  }
  else
  {
    uint64_t v10 = v2[52];
    uint64_t v9 = v2[53];
    uint64_t v13 = v2 + 50;
    uint64_t v11 = v2[50];
    uint64_t v12 = v13[1];
    swift_bridgeObjectRelease();
    sub_10001729C(v11, &qword_10065E4D0);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v12);
    uint64_t v8 = sub_100563D94;
  }
  return _swift_task_switch(v8, 0, 0);
}

uint64_t sub_100563D94()
{
  uint64_t v1 = v0[83];
  uint64_t v2 = v0[82];
  uint64_t v3 = *(void *)(v0[41] + 64);
  v0[103] = v3;
  uint64_t v4 = *(void *)(v3 + 184);
  v0[104] = v4;
  uint64_t v5 = swift_task_alloc();
  v0[105] = v5;
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v1;
  uint64_t v6 = dword_100660818;
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[106] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100563EC0;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100660818 + v6))((uint64_t)v7, (uint64_t)sub_10056ACF8, v5, v4);
}

uint64_t sub_100563EC0()
{
  *(void *)(*(void *)v1 + 856) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v2 = sub_10056785C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_10056405C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10056405C()
{
  uint64_t v1 = (os_unfair_lock_s *)v0[97];
  uint64_t v2 = v0[47];
  uint64_t v3 = v0[48];
  uint64_t v4 = v0[46];
  swift_retain();
  sub_1003119B0(14, v1, v4);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1) {
    __break(1u);
  }
  uint64_t v6 = v0[48];
  uint64_t v5 = v0[49];
  uint64_t v7 = v0[47];
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 32))(v5, v0[46], v7);
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 88))(v5, v7);
  int v9 = v8;
  int v10 = enum case for DDMPurchaseMethod.volumePurchaseProgram(_:);
  if (v8 != enum case for DDMPurchaseMethod.volumePurchaseProgram(_:))
  {
    if (v8 != enum case for DDMPurchaseMethod.manifest(_:)) {
      return _assertionFailure(_:_:file:line:flags:)();
    }
    uint64_t v11 = (os_unfair_lock_s *)v0[97];
    swift_retain();
    uint64_t v12 = sub_100311910(3, v11);
    uint64_t v14 = v13;
    swift_release();
    if (v14) {
      goto LABEL_8;
    }
    __break(1u);
  }
  uint64_t v15 = (os_unfair_lock_s *)v0[97];
  swift_retain();
  uint64_t v16 = sub_100311A30(0, v15);
  char v18 = v17;
  uint64_t result = swift_release();
  if (v18)
  {
    __break(1u);
    return result;
  }
  v0[36] = v16;
  uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v14 = v20;
LABEL_8:
  BOOL v21 = v9 != v10;
  v0[108] = v14;
  uint64_t v22 = *(void *)(*(void *)(v0[103] + 200) + 16);
  v0[109] = v22;
  uint64_t v23 = swift_task_alloc();
  v0[110] = v23;
  *(unsigned char *)(v23 + 16) = v21;
  *(void *)(v23 + 24) = v12;
  *(void *)(v23 + 32) = v14;
  uint64_t v24 = dword_1006607E0;
  swift_retain();
  uint64_t v25 = (void *)swift_task_alloc();
  v0[111] = v25;
  *uint64_t v25 = v0;
  v25[1] = sub_100564340;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1006607E0 + v24))((uint64_t)v25, (uint64_t)sub_10056AD14, v23, v22);
}

uint64_t sub_100564340()
{
  *(void *)(*(void *)v1 + 896) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v2 = sub_100567A54;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100564500;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100564500()
{
  swift_release();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 904) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1005645C4;
  return sub_100568418();
}

uint64_t sub_1005645C4()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  v2[114] = v0;
  swift_task_dealloc();
  uint64_t v4 = v2[83];
  if (v0)
  {
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_100567C4C, 0, 0);
  }
  else
  {
    uint64_t v5 = (void *)swift_task_alloc();
    v2[115] = v5;
    *uint64_t v5 = v3;
    v5[1] = sub_1005647B4;
    uint64_t v6 = v2[82];
    return sub_100568EE4(v6, v4);
  }
}

uint64_t sub_1005647B4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 664);
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 928) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100564958;
  uint64_t v5 = *(void *)(v1 + 656);
  return sub_1005697D4(v5, v2);
}

uint64_t sub_100564958()
{
  *(void *)(*(void *)v1 + 936) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_100567E38;
  }
  else
  {
    uint64_t v2 = sub_100564AA8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100564AA8()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 648);
  swift_retain();
  uint64_t v2 = sub_1003122C0(36, v1);
  uint64_t v4 = v3;
  unsigned __int8 v6 = v5;
  *(void *)(v0 + 944) = v2;
  int v7 = ~v5;
  *(void *)(v0 + 952) = v3;
  *(unsigned char *)(v0 + 194) = v5;
  sub_100263CCC(v0 + 232);
  if (v7)
  {
    uint64_t v8 = *(os_unfair_lock_s **)(v0 + 648);
    swift_retain();
    char v9 = sub_100312470(38, v8);
    sub_100263CCC(v0 + 232);
    if (v9 != 2)
    {
      char v141 = v6 & 1;
      if (v6)
      {
        uint64_t v27 = &type metadata for WebDistributor;
        unint64_t v28 = sub_1002BEA38();
      }
      else
      {
        uint64_t v27 = &type metadata for NativeDistributor;
        unint64_t v28 = sub_1002F9EF8();
      }
      uint64_t v138 = *(void *)(v0 + 328);
      *(void *)(v0 + 144) = v27;
      *(void *)(v0 + 152) = v28;
      *(void *)(v0 + 120) = v2;
      *(void *)(v0 + 128) = v4;
      sub_10018B164((long long *)(v0 + 120), v0 + 80);
      uint64_t v30 = *(void *)(v0 + 104);
      uint64_t v29 = *(void *)(v0 + 112);
      sub_10018AC60((void *)(v0 + 80), v30);
      uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t))(v29 + 40);
      sub_1001C617C();
      uint64_t v32 = v31(v30, v29);
      uint64_t v34 = v33;
      sub_100014524(v0 + 80);
      sub_10047F370(0, v32, v34, v9 & 1);
      swift_bridgeObjectRelease();
      uint64_t v35 = *(void *)(*(void *)(v138 + 64) + 168);
      swift_bridgeObjectRetain();
      uint64_t v36 = (void *)swift_task_alloc();
      *(void *)(v0 + 960) = v36;
      *uint64_t v36 = v0;
      v36[1] = sub_100565D2C;
      uint64_t v37 = *(void *)(v0 + 664);
      uint64_t v38 = *(void *)(v0 + 656);
      return sub_10056C26C(v2, v4, v141, v35, v38, v37);
    }
    sub_10018ACA4(v2, v4, v6);
  }
  int v10 = *(os_unfair_lock_s **)(v0 + 648);
  swift_retain();
  LOBYTE(v10) = sub_100312470(13, v10);
  sub_100263CCC(v0 + 232);
  uint64_t v11 = *(void *)(v0 + 936);
  if (v10)
  {
    uint64_t v12 = *(void *)(v0 + 664);
    uint64_t v13 = *(void *)(v0 + 656);
    objc_allocWithZone((Class)LSApplicationRecord);
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_1003DB240(v13, v12, 0);
    if (v11)
    {
      swift_errorRelease();
LABEL_7:
      uint64_t v11 = 0;
      goto LABEL_8;
    }
    uint64_t v39 = v14;
    if (!v14) {
      goto LABEL_7;
    }
    uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 696);
    uint64_t v41 = *(os_unfair_lock_s **)(v0 + 648);
    uint64_t v42 = *(void *)(v0 + 576);
    uint64_t v43 = *(void *)(v0 + 536);
    id v140 = [objc_allocWithZone((Class)BAAppStoreClient) init];
    swift_retain();
    sub_100312650(16, v41, v42);
    sub_100263CCC(v0 + 232);
    int v44 = v40(v42, 1, v43);
    uint64_t v45 = *(void *)(v0 + 576);
    uint64_t v46 = &selRef_initWithOptions_;
    uint64_t v142 = v39;
    if (v44 == 1)
    {
      sub_10001729C(v45, &qword_10065CFF0);
      char v47 = 0;
    }
    else
    {
      uint64_t v57 = *(void *)(v0 + 560);
      uint64_t v58 = *(void *)(v0 + 552);
      uint64_t v59 = *(void *)(v0 + 544);
      uint64_t v60 = *(void *)(v0 + 536);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 32))(v57, v45, v60);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16))(v58, v57, v60);
      int v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 88))(v58, v60);
      uint64_t v62 = 11;
      if (v61 != enum case for AppInstallRequestType.automaticUpdate(_:)
        && v61 != enum case for AppInstallRequestType.update(_:))
      {
        uint64_t v62 = 12;
        if (v61 != enum case for AppInstallRequestType.promotion(_:)
          && v61 != enum case for AppInstallRequestType.restore(_:))
        {
          (*(void (**)(void, void))(*(void *)(v0 + 544) + 8))(*(void *)(v0 + 552), *(void *)(v0 + 536));
          uint64_t v62 = 10;
        }
      }
      uint64_t v63 = *(void *)(v0 + 352);
      uint64_t v64 = *(void *)(v0 + 360);
      uint64_t v65 = *(void *)(v0 + 344);
      char v47 = AppInstallRequestType.isUserInitiated.getter();
      swift_bridgeObjectRetain();
      id v66 = [v39 URL];
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      NSString v67 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      URL._bridgeToObjectiveC()(v68);
      uint64_t v70 = v69;
      id v71 = [self descriptorWithAppBundleIdentifier:v67 appBundleURL:v69 event:v62 client:0];

      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v64, v65);
      [v71 setAutomaticInstall:(v47 & 1) == 0];
      [v71 setUserInitiated:v47 & 1];
      *(void *)(v0 + 248) = 0;
      unsigned int v72 = [v140 performEventWithDescriptor:v71 error:v0 + 248];
      uint64_t v73 = *(void **)(v0 + 248);
      if (!v72)
      {
        uint64_t v93 = *(void *)(v0 + 560);
        uint64_t v94 = *(void *)(v0 + 544);
        uint64_t v95 = *(void *)(v0 + 536);
        id v96 = v73;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v93, v95);
        goto LABEL_52;
      }
      uint64_t v74 = *(void *)(v0 + 328);
      id v75 = v73;
      static Logger.install.getter();
      sub_1004F8340(v74);
      sub_1004F8340(v74);
      long long v76 = Logger.logObject.getter();
      os_log_type_t v77 = static os_log_type_t.default.getter();
      BOOL v78 = os_log_type_enabled(v76, v77);
      int64_t v79 = *(void ***)(v0 + 328);
      if (v78)
      {
        unint64_t v80 = (uint8_t *)swift_slowAlloc();
        unint64_t v134 = (void *)swift_slowAlloc();
        int v135 = v80;
        *(_DWORD *)unint64_t v80 = 138412290;
        unint64_t v81 = *v79;
        *(void *)(v0 + 256) = *v79;
        id v82 = v81;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v134 = v81;
        sub_10056ABF8((uint64_t)v79);
        sub_10056ABF8((uint64_t)v79);
        _os_log_impl((void *)&_mh_execute_header, v76, v77, "[%@] Sent event to Background Assets", v135, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_10056ABF8((uint64_t)v79);
        sub_10056ABF8((uint64_t)v79);
      }
      uint64_t v97 = *(void *)(v0 + 560);
      uint64_t v98 = *(void *)(v0 + 544);
      uint64_t v99 = *(void *)(v0 + 536);
      (*(void (**)(void, void))(v0 + 712))(*(void *)(v0 + 512), *(void *)(v0 + 480));
      (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v97, v99);
      uint64_t v39 = v142;
      uint64_t v46 = &selRef_initWithOptions_;
    }
    uint64_t v101 = *(void *)(v0 + 352);
    uint64_t v100 = *(void *)(v0 + 360);
    uint64_t v102 = *(void *)(v0 + 344);
    swift_bridgeObjectRetain();
    id v103 = [v39 URL];
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    NSString v104 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    URL._bridgeToObjectiveC()(v105);
    uint64_t v107 = v106;
    id v108 = objc_msgSend(self, v46[95], v104, v106, 30, 0);

    (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v100, v102);
    [v108 setAutomaticInstall:(v47 & 1) == 0];
    [v108 setUserInitiated:v47 & 1];
    *(void *)(v0 + 272) = 0;
    unsigned int v109 = [v140 performEventWithDescriptor:v108 error:v0 + 272];
    uint64_t v110 = *(void **)(v0 + 272);
    if (v109)
    {
      uint64_t v111 = *(void *)(v0 + 328);
      id v112 = v110;
      static Logger.install.getter();
      sub_1004F8340(v111);
      sub_1004F8340(v111);
      unint64_t v113 = Logger.logObject.getter();
      os_log_type_t v114 = static os_log_type_t.default.getter();
      BOOL v115 = os_log_type_enabled(v113, v114);
      uint64_t v116 = *(void ***)(v0 + 328);
      if (v115)
      {
        uint64_t v117 = (uint8_t *)swift_slowAlloc();
        os_log_t log = (os_log_t)swift_slowAlloc();
        *(_DWORD *)uint64_t v117 = 138412290;
        uint64_t v139 = v113;
        uint64_t v118 = *v116;
        *(void *)(v0 + 312) = *v116;
        id v119 = v118;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        log->Class isa = (Class)v118;
        unint64_t v113 = v139;
        sub_10056ABF8((uint64_t)v116);
        sub_10056ABF8((uint64_t)v116);
        _os_log_impl((void *)&_mh_execute_header, v139, v114, "[%@] Sent installed event to Background Assets", v117, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_10056ABF8((uint64_t)v116);
        sub_10056ABF8((uint64_t)v116);
      }
      int v131 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
      uint64_t v132 = *(void *)(v0 + 504);
      uint64_t v133 = *(void *)(v0 + 480);

      v131(v132, v133);
      goto LABEL_7;
    }
    id v120 = v110;
    _convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_52:
    uint64_t v121 = *(void *)(v0 + 328);
    static Logger.install.getter();
    sub_1004F8340(v121);
    swift_errorRetain();
    sub_1004F8340(v121);
    swift_errorRetain();
    uint64_t v122 = Logger.logObject.getter();
    os_log_type_t v123 = static os_log_type_t.error.getter();
    BOOL v124 = os_log_type_enabled(v122, v123);
    uint64_t v125 = *(void ***)(v0 + 328);
    if (v124)
    {
      uint64_t v126 = swift_slowAlloc();
      BOOL v127 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v126 = 138412546;
      loga = v122;
      uint64_t v128 = *v125;
      *(void *)(v0 + 264) = *v125;
      id v129 = v128;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *BOOL v127 = v128;
      sub_10056ABF8((uint64_t)v125);
      sub_10056ABF8((uint64_t)v125);
      *(_WORD *)(v126 + 12) = 2114;
      swift_errorRetain();
      uint64_t v130 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 280) = v130;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v127[1] = v130;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, loga, v123, "[%@] Failed to send perform event to Background Assets: %{public}@", (uint8_t *)v126, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v122 = v142;
    }
    else
    {

      swift_errorRelease();
      sub_10056ABF8((uint64_t)v125);
      sub_10056ABF8((uint64_t)v125);
      swift_errorRelease();
    }
    swift_errorRelease();

    (*(void (**)(void, void))(v0 + 712))(*(void *)(v0 + 496), *(void *)(v0 + 480));
    goto LABEL_7;
  }
LABEL_8:
  *(void *)(v0 + 968) = v11;
  uint64_t v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 672);
  uint64_t v16 = *(os_unfair_lock_s **)(v0 + 648);
  uint64_t v17 = *(void *)(v0 + 616);
  uint64_t v18 = *(void *)(v0 + 600);
  swift_retain();
  sub_100311ADC(15, v16, v18);
  sub_100263CCC(v0 + 232);
  if (v15(v18, 1, v17) == 1)
  {
    sub_10001729C(*(void *)(v0 + 600), &qword_10065C9B0);
    uint64_t v19 = *(void *)(v0 + 968);
    uint64_t v20 = *(void *)(v0 + 664);
    uint64_t v21 = *(void *)(v0 + 656);
    objc_allocWithZone((Class)LSApplicationRecord);
    swift_bridgeObjectRetain();
    id v22 = sub_1003DB240(v21, v20, 0);
    if (v19)
    {
      sub_10001729C(*(void *)(v0 + 592), &qword_10065CFF0);
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
LABEL_42:
      return v23();
    }
    uint64_t v48 = v22;
    if ([v22 isPlaceholder])
    {
      sub_10001729C(*(void *)(v0 + 592), &qword_10065CFF0);

      swift_bridgeObjectRelease();
LABEL_41:
      type metadata accessor for AppInstallTaskResult();
      swift_storeEnumTagMultiPayload();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_42;
    }
    id v49 = [v48 iTunesMetadata];
    id v50 = [v49 distributorInfo];

    id v51 = [v50 distributorID];
    uint64_t v52 = *(void *)(v0 + 664);
    if (v51)
    {
      uint64_t v53 = *(void *)(v0 + 656);
      uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v56 = v55;

      if (v53 == v54 && v52 == v56)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_39:
        uint64_t v84 = *(void *)(v0 + 592);
        uint64_t v86 = *(void *)(v0 + 328);
        uint64_t v85 = *(void *)(v0 + 336);
        uint64_t v87 = *(void *)(*(void *)(v86 + 64) + 256);
        int64_t v89 = *(void **)v86;
        uint64_t v88 = *(void *)(v86 + 8);
        uint64_t v90 = type metadata accessor for TaskPriority();
        *(_OWORD *)uint64_t v143 = *(_OWORD *)(v86 + 16);
        *(_OWORD *)(v0 + 160) = 0u;
        *(_OWORD *)(v0 + 176) = 0u;
        *(unsigned char *)(v0 + 192) = 1;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v90 - 8) + 56))(v85, 1, 1, v90);
        uint64_t v91 = swift_allocObject();
        *(void *)(v91 + 16) = 0;
        *(void *)(v91 + 24) = 0;
        *(void *)(v91 + 32) = v87;
        *(void *)(v91 + 40) = v89;
        *(void *)(v91 + 48) = v88;
        *(_OWORD *)(v91 + 56) = *(_OWORD *)v143;
        *(unsigned char *)(v91 + 72) = 2;
        *(void *)(v91 + 80) = 0;
        *(void *)(v91 + 88) = 0;
        sub_1001D1528(v0 + 160, v91 + 96);
        *(unsigned char *)(v91 + 129) = 2;
        swift_retain();
        id v92 = v89;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        sub_1000163AC(v85, (uint64_t)&unk_100661890, v91);
        swift_release();

        sub_10001729C(v84, &qword_10065CFF0);
        goto LABEL_41;
      }
      char v83 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v83) {
        goto LABEL_39;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    sub_10001729C(*(void *)(v0 + 592), &qword_10065CFF0);

    goto LABEL_41;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 624) + 32))(*(void *)(v0 + 632), *(void *)(v0 + 600), *(void *)(v0 + 616));
  uint64_t v24 = (void *)swift_task_alloc();
  *(void *)(v0 + 976) = v24;
  *uint64_t v24 = v0;
  v24[1] = sub_100566F44;
  uint64_t v25 = *(void *)(v0 + 632);
  return sub_1002B86C0(v25);
}

uint64_t sub_100565D2C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 952);
  uint64_t v2 = *(void *)(*(void *)v0 + 944);
  unsigned __int8 v3 = *(unsigned char *)(*(void *)v0 + 194);
  swift_task_dealloc();
  sub_10018ACA4(v2, v1, v3);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100565EBC, 0, 0);
}

uint64_t sub_100565EBC()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 648);
  swift_retain();
  LOBYTE(v1) = sub_100312470(13, v1);
  sub_100263CCC(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 936);
  if (v1)
  {
    uint64_t v3 = *(void *)(v0 + 664);
    uint64_t v4 = *(void *)(v0 + 656);
    objc_allocWithZone((Class)LSApplicationRecord);
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_1003DB240(v4, v3, 0);
    if (v2)
    {
      swift_errorRelease();
LABEL_4:
      uint64_t v2 = 0;
      goto LABEL_5;
    }
    uint64_t v18 = v5;
    if (!v5) {
      goto LABEL_4;
    }
    uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 696);
    uint64_t v20 = *(os_unfair_lock_s **)(v0 + 648);
    uint64_t v21 = *(void *)(v0 + 576);
    uint64_t v22 = *(void *)(v0 + 536);
    id v118 = [objc_allocWithZone((Class)BAAppStoreClient) init];
    swift_retain();
    sub_100312650(16, v20, v21);
    sub_100263CCC(v0 + 232);
    int v23 = v19(v21, 1, v22);
    uint64_t v24 = *(void *)(v0 + 576);
    uint64_t v25 = &selRef_initWithOptions_;
    id v119 = v18;
    if (v23 == 1)
    {
      sub_10001729C(v24, &qword_10065CFF0);
      char v26 = 0;
    }
    else
    {
      uint64_t v36 = *(void *)(v0 + 560);
      uint64_t v37 = *(void *)(v0 + 552);
      uint64_t v38 = *(void *)(v0 + 544);
      uint64_t v39 = *(void *)(v0 + 536);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v36, v24, v39);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v37, v36, v39);
      int v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 88))(v37, v39);
      uint64_t v41 = 11;
      if (v40 != enum case for AppInstallRequestType.automaticUpdate(_:)
        && v40 != enum case for AppInstallRequestType.update(_:))
      {
        uint64_t v41 = 12;
        if (v40 != enum case for AppInstallRequestType.promotion(_:)
          && v40 != enum case for AppInstallRequestType.restore(_:))
        {
          (*(void (**)(void, void))(*(void *)(v0 + 544) + 8))(*(void *)(v0 + 552), *(void *)(v0 + 536));
          uint64_t v41 = 10;
        }
      }
      uint64_t v42 = *(void *)(v0 + 352);
      uint64_t v43 = *(void *)(v0 + 360);
      uint64_t v44 = *(void *)(v0 + 344);
      char v26 = AppInstallRequestType.isUserInitiated.getter();
      swift_bridgeObjectRetain();
      id v45 = [v18 URL];
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      NSString v46 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      URL._bridgeToObjectiveC()(v47);
      id v49 = v48;
      id v50 = [self descriptorWithAppBundleIdentifier:v46 appBundleURL:v48 event:v41 client:0];

      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v44);
      [v50 setAutomaticInstall:(v26 & 1) == 0];
      [v50 setUserInitiated:v26 & 1];
      *(void *)(v0 + 248) = 0;
      unsigned int v51 = [v118 performEventWithDescriptor:v50 error:v0 + 248];
      uint64_t v52 = *(void **)(v0 + 248);
      if (!v51)
      {
        uint64_t v72 = *(void *)(v0 + 560);
        uint64_t v73 = *(void *)(v0 + 544);
        uint64_t v74 = *(void *)(v0 + 536);
        id v75 = v52;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v72, v74);
        goto LABEL_43;
      }
      uint64_t v53 = *(void *)(v0 + 328);
      id v54 = v52;
      static Logger.install.getter();
      sub_1004F8340(v53);
      sub_1004F8340(v53);
      uint64_t v55 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.default.getter();
      BOOL v57 = os_log_type_enabled(v55, v56);
      uint64_t v58 = *(void ***)(v0 + 328);
      if (v57)
      {
        uint64_t v59 = (uint8_t *)swift_slowAlloc();
        unint64_t v113 = (void *)swift_slowAlloc();
        os_log_type_t v114 = v59;
        *(_DWORD *)uint64_t v59 = 138412290;
        uint64_t v60 = *v58;
        *(void *)(v0 + 256) = *v58;
        id v61 = v60;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v113 = v60;
        sub_10056ABF8((uint64_t)v58);
        sub_10056ABF8((uint64_t)v58);
        _os_log_impl((void *)&_mh_execute_header, v55, v56, "[%@] Sent event to Background Assets", v114, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_10056ABF8((uint64_t)v58);
        sub_10056ABF8((uint64_t)v58);
      }
      uint64_t v76 = *(void *)(v0 + 560);
      uint64_t v77 = *(void *)(v0 + 544);
      uint64_t v78 = *(void *)(v0 + 536);
      (*(void (**)(void, void))(v0 + 712))(*(void *)(v0 + 512), *(void *)(v0 + 480));
      (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v76, v78);
      uint64_t v18 = v119;
      uint64_t v25 = &selRef_initWithOptions_;
    }
    uint64_t v80 = *(void *)(v0 + 352);
    uint64_t v79 = *(void *)(v0 + 360);
    uint64_t v81 = *(void *)(v0 + 344);
    swift_bridgeObjectRetain();
    id v82 = [v18 URL];
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    NSString v83 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    URL._bridgeToObjectiveC()(v84);
    uint64_t v86 = v85;
    id v87 = objc_msgSend(self, v25[95], v83, v85, 30, 0);

    (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v79, v81);
    [v87 setAutomaticInstall:(v26 & 1) == 0];
    [v87 setUserInitiated:v26 & 1];
    *(void *)(v0 + 272) = 0;
    unsigned int v88 = [v118 performEventWithDescriptor:v87 error:v0 + 272];
    int64_t v89 = *(void **)(v0 + 272);
    if (v88)
    {
      uint64_t v90 = *(void *)(v0 + 328);
      id v91 = v89;
      static Logger.install.getter();
      sub_1004F8340(v90);
      sub_1004F8340(v90);
      id v92 = Logger.logObject.getter();
      os_log_type_t v93 = static os_log_type_t.default.getter();
      BOOL v94 = os_log_type_enabled(v92, v93);
      uint64_t v95 = *(void ***)(v0 + 328);
      if (v94)
      {
        id v96 = (uint8_t *)swift_slowAlloc();
        os_log_t log = (os_log_t)swift_slowAlloc();
        *(_DWORD *)id v96 = 138412290;
        uint64_t v117 = v92;
        uint64_t v97 = *v95;
        *(void *)(v0 + 312) = *v95;
        id v98 = v97;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        log->Class isa = (Class)v97;
        id v92 = v117;
        sub_10056ABF8((uint64_t)v95);
        sub_10056ABF8((uint64_t)v95);
        _os_log_impl((void *)&_mh_execute_header, v117, v93, "[%@] Sent installed event to Background Assets", v96, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_10056ABF8((uint64_t)v95);
        sub_10056ABF8((uint64_t)v95);
      }
      uint64_t v110 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
      uint64_t v111 = *(void *)(v0 + 504);
      uint64_t v112 = *(void *)(v0 + 480);

      v110(v111, v112);
      goto LABEL_4;
    }
    id v99 = v89;
    _convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_43:
    uint64_t v100 = *(void *)(v0 + 328);
    static Logger.install.getter();
    sub_1004F8340(v100);
    swift_errorRetain();
    sub_1004F8340(v100);
    swift_errorRetain();
    uint64_t v101 = Logger.logObject.getter();
    os_log_type_t v102 = static os_log_type_t.error.getter();
    BOOL v103 = os_log_type_enabled(v101, v102);
    NSString v104 = *(void ***)(v0 + 328);
    if (v103)
    {
      uint64_t v105 = swift_slowAlloc();
      uint64_t v106 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v105 = 138412546;
      loga = v101;
      uint64_t v107 = *v104;
      *(void *)(v0 + 264) = *v104;
      id v108 = v107;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v106 = v107;
      sub_10056ABF8((uint64_t)v104);
      sub_10056ABF8((uint64_t)v104);
      *(_WORD *)(v105 + 12) = 2114;
      swift_errorRetain();
      uint64_t v109 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 280) = v109;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v106[1] = v109;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, loga, v102, "[%@] Failed to send perform event to Background Assets: %{public}@", (uint8_t *)v105, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v101 = v119;
    }
    else
    {

      swift_errorRelease();
      sub_10056ABF8((uint64_t)v104);
      sub_10056ABF8((uint64_t)v104);
      swift_errorRelease();
    }
    swift_errorRelease();

    (*(void (**)(void, void))(v0 + 712))(*(void *)(v0 + 496), *(void *)(v0 + 480));
    goto LABEL_4;
  }
LABEL_5:
  *(void *)(v0 + 968) = v2;
  unsigned __int8 v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 672);
  int v7 = *(os_unfair_lock_s **)(v0 + 648);
  uint64_t v8 = *(void *)(v0 + 616);
  uint64_t v9 = *(void *)(v0 + 600);
  swift_retain();
  sub_100311ADC(15, v7, v9);
  sub_100263CCC(v0 + 232);
  if (v6(v9, 1, v8) == 1)
  {
    sub_10001729C(*(void *)(v0 + 600), &qword_10065C9B0);
    uint64_t v10 = *(void *)(v0 + 968);
    uint64_t v11 = *(void *)(v0 + 664);
    uint64_t v12 = *(void *)(v0 + 656);
    objc_allocWithZone((Class)LSApplicationRecord);
    swift_bridgeObjectRetain();
    id v13 = sub_1003DB240(v12, v11, 0);
    if (v10)
    {
      sub_10001729C(*(void *)(v0 + 592), &qword_10065CFF0);
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
LABEL_33:
      return v14();
    }
    uint64_t v27 = v13;
    if ([v13 isPlaceholder])
    {
      sub_10001729C(*(void *)(v0 + 592), &qword_10065CFF0);

      swift_bridgeObjectRelease();
LABEL_32:
      type metadata accessor for AppInstallTaskResult();
      swift_storeEnumTagMultiPayload();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_33;
    }
    id v28 = [v27 iTunesMetadata];
    id v29 = [v28 distributorInfo];

    id v30 = [v29 distributorID];
    uint64_t v31 = *(void *)(v0 + 664);
    if (v30)
    {
      uint64_t v32 = *(void *)(v0 + 656);
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v35 = v34;

      if (v32 == v33 && v31 == v35)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_30:
        uint64_t v63 = *(void *)(v0 + 592);
        uint64_t v65 = *(void *)(v0 + 328);
        uint64_t v64 = *(void *)(v0 + 336);
        uint64_t v66 = *(void *)(*(void *)(v65 + 64) + 256);
        int64_t v68 = *(void **)v65;
        uint64_t v67 = *(void *)(v65 + 8);
        uint64_t v69 = type metadata accessor for TaskPriority();
        *(_OWORD *)id v120 = *(_OWORD *)(v65 + 16);
        *(_OWORD *)(v0 + 160) = 0u;
        *(_OWORD *)(v0 + 176) = 0u;
        *(unsigned char *)(v0 + 192) = 1;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v64, 1, 1, v69);
        uint64_t v70 = swift_allocObject();
        *(void *)(v70 + 16) = 0;
        *(void *)(v70 + 24) = 0;
        *(void *)(v70 + 32) = v66;
        *(void *)(v70 + 40) = v68;
        *(void *)(v70 + 48) = v67;
        *(_OWORD *)(v70 + 56) = *(_OWORD *)v120;
        *(unsigned char *)(v70 + 72) = 2;
        *(void *)(v70 + 80) = 0;
        *(void *)(v70 + 88) = 0;
        sub_1001D1528(v0 + 160, v70 + 96);
        *(unsigned char *)(v70 + 129) = 2;
        swift_retain();
        id v71 = v68;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        sub_1000163AC(v64, (uint64_t)&unk_100661890, v70);
        swift_release();

        sub_10001729C(v63, &qword_10065CFF0);
        goto LABEL_32;
      }
      char v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v62) {
        goto LABEL_30;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    sub_10001729C(*(void *)(v0 + 592), &qword_10065CFF0);

    goto LABEL_32;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 624) + 32))(*(void *)(v0 + 632), *(void *)(v0 + 600), *(void *)(v0 + 616));
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 976) = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_100566F44;
  uint64_t v16 = *(void *)(v0 + 632);
  return sub_1002B86C0(v16);
}

uint64_t sub_100566F44()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10056706C, 0, 0);
}

uint64_t sub_10056706C()
{
  (*(void (**)(void, void))(*(void *)(v0 + 624) + 8))(*(void *)(v0 + 632), *(void *)(v0 + 616));
  uint64_t v1 = *(void *)(v0 + 968);
  uint64_t v2 = *(void *)(v0 + 664);
  uint64_t v3 = *(void *)(v0 + 656);
  objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain();
  id v4 = sub_1003DB240(v3, v2, 0);
  if (v1)
  {
    sub_10001729C(*(void *)(v0 + 592), &qword_10065CFF0);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_17;
  }
  unsigned __int8 v6 = v4;
  if (([v4 isPlaceholder] & 1) == 0)
  {
    id v7 = [v6 iTunesMetadata];
    id v8 = [v7 distributorInfo];

    id v9 = [v8 distributorID];
    uint64_t v10 = *(void *)(v0 + 664);
    if (v9)
    {
      uint64_t v11 = *(void *)(v0 + 656);
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;

      if (v11 == v12 && v10 == v14)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_15:
        uint64_t v17 = *(void *)(v0 + 592);
        uint64_t v19 = *(void *)(v0 + 328);
        uint64_t v18 = *(void *)(v0 + 336);
        uint64_t v20 = *(void *)(*(void *)(v19 + 64) + 256);
        uint64_t v22 = *(void **)v19;
        uint64_t v21 = *(void *)(v19 + 8);
        uint64_t v23 = type metadata accessor for TaskPriority();
        long long v27 = *(_OWORD *)(v19 + 16);
        *(_OWORD *)(v0 + 160) = 0u;
        *(_OWORD *)(v0 + 176) = 0u;
        *(unsigned char *)(v0 + 192) = 1;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v18, 1, 1, v23);
        uint64_t v24 = swift_allocObject();
        *(void *)(v24 + 16) = 0;
        *(void *)(v24 + 24) = 0;
        *(void *)(v24 + 32) = v20;
        *(void *)(v24 + 40) = v22;
        *(void *)(v24 + 48) = v21;
        *(_OWORD *)(v24 + 56) = v27;
        *(unsigned char *)(v24 + 72) = 2;
        *(void *)(v24 + 80) = 0;
        *(void *)(v24 + 88) = 0;
        sub_1001D1528(v0 + 160, v24 + 96);
        *(unsigned char *)(v24 + 129) = 2;
        swift_retain();
        id v25 = v22;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        sub_1000163AC(v18, (uint64_t)&unk_100661890, v24);
        swift_release();

        sub_10001729C(v17, &qword_10065CFF0);
        goto LABEL_16;
      }
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v16) {
        goto LABEL_15;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    sub_10001729C(*(void *)(v0 + 592), &qword_10065CFF0);

    goto LABEL_16;
  }
  sub_10001729C(*(void *)(v0 + 592), &qword_10065CFF0);

  swift_bridgeObjectRelease();
LABEL_16:
  type metadata accessor for AppInstallTaskResult();
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
LABEL_17:
  return v5();
}

uint64_t sub_100567664()
{
  uint64_t v1 = *(void *)(v0 + 592);
  swift_release();
  sub_10001729C(v1, &qword_10065CFF0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10056785C()
{
  uint64_t v1 = *(void *)(v0 + 592);
  swift_release();
  sub_10001729C(v1, &qword_10065CFF0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100567A54()
{
  uint64_t v1 = *(void *)(v0 + 592);
  swift_release();
  sub_10001729C(v1, &qword_10065CFF0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100567C4C()
{
  sub_10001729C(*(void *)(v0 + 592), &qword_10065CFF0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100567E38()
{
  sub_10001729C(*(void *)(v0 + 592), &qword_10065CFF0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100568024()
{
  *(void *)(v1 + 32) = v0;
  return _swift_task_switch(sub_100568044, 0, 0);
}

uint64_t sub_100568044()
{
  uint64_t v11 = v0;
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(*(void *)(v0 + 32) + 32);
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 24);
  swift_retain();
  int v2 = sub_100312B1C(32, v1);
  sub_100263CCC(v0 + 16);
  if (v2 == 2)
  {
    swift_retain();
    sub_1003139F8(31, v1, &v10);
    sub_100263CCC(v0 + 16);
    long long v3 = v10;
    *(_OWORD *)(v0 + 40) = v10;
    if (*((void *)&v3 + 1) >> 60 != 15)
    {
      swift_retain();
      uint64_t v4 = sub_100312690(6, v1);
      uint64_t v6 = v5;
      *(void *)(v0 + 56) = v5;
      sub_100263CCC(v0 + 16);
      if (v6)
      {
        id v7 = (void *)swift_task_alloc();
        *(void *)(v0 + 64) = v7;
        *id v7 = v0;
        v7[1] = sub_1005681D4;
        return sub_1003CC100(v4, v6, 0, 0, v3, *((uint64_t *)&v3 + 1));
      }
      sub_10018AE44(*(void *)(v0 + 40), *(void *)(v0 + 48));
    }
  }
  id v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_1005681D4()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1005682EC, 0, 0);
}

uint64_t sub_1005682EC()
{
  sub_10018AE44(v0[5], v0[6]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

void sub_10056834C(id *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v7 = *a1;
  swift_bridgeObjectRetain();
  id v8 = (void *)sub_10050A4F8(0, a2, a3, (uint64_t)sub_10050A440, 0, v7);
  swift_bridgeObjectRelease();

  if (v8) {
    goto LABEL_2;
  }
  id v9 = v7;
  swift_bridgeObjectRetain();
  id v10 = sub_1004E9D20(a2, a3, v9);
  if (!v4)
  {
    id v8 = v10;
LABEL_2:
  }
}

uint64_t sub_100568418()
{
  v1[25] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[26] = v2;
  v1[27] = *(void *)(v2 - 8);
  v1[28] = swift_task_alloc();
  v1[29] = swift_task_alloc();
  v1[30] = swift_task_alloc();
  uint64_t v3 = sub_1000172F8(&qword_1006674D8);
  v1[31] = v3;
  v1[32] = *(void *)(v3 - 8);
  v1[33] = swift_task_alloc();
  return _swift_task_switch(sub_100568554, 0, 0);
}

uint64_t sub_100568554()
{
  *(_OWORD *)(v0 + 144) = *(_OWORD *)(*(void *)(v0 + 200) + 32);
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 152);
  swift_retain();
  LODWORD(v1) = sub_100312B1C(32, v1);
  sub_100263CCC(v0 + 144);
  if (v1 == 1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 256);
    uint64_t v4 = *(void *)(v0 + 264);
    uint64_t v6 = *(void *)(v0 + 248);
    id v7 = [objc_allocWithZone((Class)AMSUniversalLinks) init];
    id v8 = [v7 updateUniversalLinks];
    *(void *)(v0 + 272) = v8;

    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 160;
    *(void *)(v0 + 24) = sub_1005687C8;
    swift_continuation_init();
    *(void *)(v0 + 136) = v6;
    id v9 = sub_10019CE94((uint64_t *)(v0 + 112));
    sub_10056AD84();
    sub_1000172F8(&qword_10065B260);
    CheckedContinuation.init(continuation:function:)();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 32))(v9, v4, v6);
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    *(void *)(v0 + 88) = 1107296256;
    *(void *)(v0 + 96) = sub_10056A94C;
    *(void *)(v0 + 104) = &unk_10064C380;
    [v8 resultWithCompletion:v0 + 80];
    return _swift_continuation_await(v0 + 16);
  }
}

uint64_t sub_1005687C8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 280) = v1;
  if (v1) {
    uint64_t v2 = sub_100568C4C;
  }
  else {
    uint64_t v2 = sub_1005688D8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1005688D8()
{
  uint64_t v1 = *(NSObject **)(v0 + 160);

  unsigned int v2 = [v1 success];
  uint64_t v3 = *(void *)(v0 + 200);
  if (v2)
  {
    uint64_t v4 = (void *)(v0 + 240);
    static Logger.install.getter();
    sub_1004F8340(v3);
    sub_1004F8340(v3);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.info.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    id v8 = *(void ***)(v0 + 200);
    if (v7)
    {
      id v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      uint64_t v22 = v1;
      *(_DWORD *)id v9 = 138412290;
      uint64_t v10 = *v8;
      *(void *)(v0 + 192) = *v8;
      id v11 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v20 = v10;
      sub_10056ABF8((uint64_t)v8);
      sub_10056ABF8((uint64_t)v8);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%@] Successfully updated AMS universal links", v9, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10056ABF8(*(void *)(v0 + 200));
      sub_10056ABF8((uint64_t)v8);
    }
  }
  else
  {
    uint64_t v4 = (void *)(v0 + 232);
    static Logger.install.getter();
    sub_1004F8340(v3);
    sub_1004F8340(v3);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    BOOL v13 = os_log_type_enabled(v5, v12);
    uint64_t v14 = *(void ***)(v0 + 200);
    if (v13)
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 138412290;
      char v16 = *v14;
      *(void *)(v0 + 184) = *v14;
      id v17 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v21 = v16;
      sub_10056ABF8((uint64_t)v14);
      sub_10056ABF8((uint64_t)v14);
      _os_log_impl((void *)&_mh_execute_header, v5, v12, "[%@] Unsuccessfully updated AMS universal links", v15, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v5 = v1;
    }
    else
    {

      sub_10056ABF8((uint64_t)v14);
      sub_10056ABF8((uint64_t)v14);
    }
  }

  (*(void (**)(void, void))(*(void *)(v0 + 216) + 8))(*v4, *(void *)(v0 + 208));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t sub_100568C4C()
{
  uint64_t v1 = (void *)v0[34];
  uint64_t v2 = v0[25];
  swift_willThrow();

  static Logger.install.getter();
  sub_1004F8340(v2);
  swift_errorRetain();
  sub_1004F8340(v2);
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (void **)v0[25];
    os_log_t log = v3;
    uint64_t v6 = swift_slowAlloc();
    BOOL v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412546;
    id v8 = *v5;
    v0[21] = *v5;
    id v9 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *BOOL v7 = v8;
    sub_10056ABF8((uint64_t)v5);
    sub_10056ABF8((uint64_t)v5);
    *(_WORD *)(v6 + 12) = 2114;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    v0[22] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v7[1] = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v4, "[%@] Failed to update AMS universal links: %{public}@", (uint8_t *)v6, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    uint64_t v11 = v0[25];
    swift_errorRelease();
    sub_10056ABF8(v11);
    sub_10056ABF8(v11);
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0[27] + 8))(v0[28], v0[26]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100568EE4(uint64_t a1, uint64_t a2)
{
  v3[24] = a2;
  v3[25] = v2;
  v3[23] = a1;
  uint64_t v4 = sub_1000172F8((uint64_t *)&unk_10065DC50);
  v3[26] = v4;
  v3[27] = *(void *)(v4 - 8);
  v3[28] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[29] = v5;
  v3[30] = *(void *)(v5 - 8);
  v3[31] = swift_task_alloc();
  v3[32] = swift_task_alloc();
  return _swift_task_switch(sub_100569018, 0, 0);
}

uint64_t sub_100569018()
{
  *(_OWORD *)(v0 + 144) = *(_OWORD *)(*(void *)(v0 + 200) + 32);
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 152);
  swift_retain();
  LOBYTE(v1) = sub_100312470(19, v1);
  sub_100263CCC(v0 + 144);
  if (v1)
  {
    uint64_t v4 = *(void *)(v0 + 200);
    static Logger.install.getter();
    sub_1004F8340(v4);
    sub_1004F8340(v4);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    id v8 = *(void ***)(v0 + 200);
    if (v7)
    {
      id v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = (void *)swift_slowAlloc();
      *(_DWORD *)id v9 = 138412290;
      uint64_t v11 = *v8;
      *(void *)(v0 + 176) = *v8;
      id v12 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v10 = v11;
      sub_10056ABF8((uint64_t)v8);
      sub_10056ABF8((uint64_t)v8);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%@] Notifying Game Center of app install", v9, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10056ABF8(*(void *)(v0 + 200));
      sub_10056ABF8((uint64_t)v8);
    }
    BOOL v13 = v5;
    uint64_t v14 = *(void *)(v0 + 256);
    uint64_t v16 = *(void *)(v0 + 232);
    uint64_t v15 = *(void *)(v0 + 240);
    uint64_t v17 = *(void *)(v0 + 216);
    uint64_t v18 = *(void *)(v0 + 224);
    uint64_t v19 = *(void *)(v0 + 208);

    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    *(void *)(v0 + 264) = v20;
    *(void *)(v0 + 272) = (v15 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v20(v14, v16);
    uint64_t v21 = self;
    NSString v22 = String._bridgeToObjectiveC()();
    *(void *)(v0 + 280) = v22;
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_1005693C8;
    swift_continuation_init();
    *(void *)(v0 + 136) = v19;
    uint64_t v23 = sub_10019CE94((uint64_t *)(v0 + 112));
    sub_1000172F8(&qword_10065B260);
    CheckedContinuation.init(continuation:function:)();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v17 + 32))(v23, v18, v19);
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    *(void *)(v0 + 88) = 1107296256;
    *(void *)(v0 + 96) = sub_1004A74E0;
    *(void *)(v0 + 104) = &unk_10064C358;
    objc_msgSend(v21, "notifyOfGameCenterEnabledAppInstall:withCompletionHandler:", v22);
    return _swift_continuation_await(v0 + 16);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
}

uint64_t sub_1005693C8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 288) = v1;
  if (v1) {
    uint64_t v2 = sub_100569554;
  }
  else {
    uint64_t v2 = sub_1005694D8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1005694D8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100569554()
{
  uint64_t v1 = *(void **)(v0 + 280);
  uint64_t v2 = *(void *)(v0 + 200);
  swift_willThrow();

  static Logger.install.getter();
  sub_1004F8340(v2);
  swift_errorRetain();
  sub_1004F8340(v2);
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void ***)(v0 + 200);
    os_log_t log = v3;
    uint64_t v6 = swift_slowAlloc();
    BOOL v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412546;
    id v8 = *v5;
    *(void *)(v0 + 160) = *v5;
    id v9 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *BOOL v7 = v8;
    sub_10056ABF8((uint64_t)v5);
    sub_10056ABF8((uint64_t)v5);
    *(_WORD *)(v6 + 12) = 2114;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 168) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v7[1] = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v4, "[%@] Failed to notify Game Center of app install: %{public}@", (uint8_t *)v6, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 200);
    swift_errorRelease();
    sub_10056ABF8(v11);
    sub_10056ABF8(v11);
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0 + 264))(*(void *)(v0 + 248), *(void *)(v0 + 232));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_1005697D4(uint64_t a1, uint64_t a2)
{
  v3[30] = a2;
  v3[31] = v2;
  v3[29] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[32] = v4;
  v3[33] = *(void *)(v4 - 8);
  v3[34] = swift_task_alloc();
  v3[35] = swift_task_alloc();
  v3[36] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for String.Encoding();
  v3[37] = v5;
  v3[38] = *(void *)(v5 - 8);
  v3[39] = swift_task_alloc();
  return _swift_task_switch(sub_100569910, 0, 0);
}

uint64_t sub_100569910()
{
  uint64_t v2 = v0[29];
  uint64_t v1 = v0[30];
  objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain();
  id v3 = sub_1003DB240(v2, v1, 0);
  v0[40] = v3;
  if (v3)
  {
    if ([v3 isManagedAppDistributor]) {
      sub_10054F3DC(v0[29], v0[30]);
    }
    uint64_t v6 = v0[30];
    uint64_t v7 = v0[29];
    uint64_t v8 = *(void *)(*(void *)(*(void *)(v0[31] + 64) + 200) + 24);
    v0[41] = v8;
    uint64_t v9 = swift_task_alloc();
    v0[42] = v9;
    *(void *)(v9 + 16) = v7;
    *(void *)(v9 + 24) = v6;
    uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100660668 + dword_100660668);
    swift_retain();
    uint64_t v10 = (void *)swift_task_alloc();
    v0[43] = v10;
    void *v10 = v0;
    v10[1] = sub_100569DEC;
    return v11((uint64_t)v11, (uint64_t)sub_10056AD4C, v9, v8);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_100569DEC()
{
  *(void *)(*(void *)v1 + 352) = v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10056A8B8;
  }
  else {
    uint64_t v2 = sub_100569F3C;
  }
  return _swift_task_switch(v2, 0, 0);
}

unsigned __int8 *sub_100569F3C()
{
  uint64_t v83 = v0;
  *(_OWORD *)(v0 + 144) = *(_OWORD *)(*(void *)(v0 + 248) + 32);
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 152);
  swift_retain();
  uint64_t v2 = sub_1003122C0(36, v1);
  uint64_t v4 = v3;
  unsigned __int8 v6 = v5;
  int v7 = ~v5;
  sub_100263CCC(v0 + 144);
  if (!v7) {
    goto LABEL_55;
  }
  swift_retain();
  char v8 = sub_100312470(38, v1);
  sub_100263CCC(v0 + 144);
  if (v8 == 2)
  {
    uint64_t v9 = *(void **)(v0 + 320);
    sub_10018ACA4(v2, v4, v6);

LABEL_56:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v42 = *(uint64_t (**)(void))(v0 + 8);
    return (unsigned __int8 *)v42();
  }
  if (v6)
  {
    uint64_t v10 = &type metadata for WebDistributor;
    unint64_t v11 = sub_1002BEA38();
  }
  else
  {
    uint64_t v10 = &type metadata for NativeDistributor;
    unint64_t v11 = sub_1002F9EF8();
  }
  *(void *)(v0 + 80) = v10;
  *(void *)(v0 + 88) = v11;
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = v4;
  sub_10018B164((long long *)(v0 + 56), v0 + 16);
  sub_1000172F8(&qword_10065C450);
  if (swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
  }
  else if ((v8 & 1) == 0)
  {
    goto LABEL_55;
  }
  swift_retain();
  uint64_t v12 = sub_100312690(2, v1);
  unint64_t v14 = v13;
  sub_100263CCC(v0 + 144);
  if (!v14) {
    goto LABEL_55;
  }
  uint64_t v15 = HIBYTE(v14) & 0xF;
  uint64_t v16 = v12 & 0xFFFFFFFFFFFFLL;
  if ((v14 & 0x2000000000000000) != 0) {
    uint64_t v17 = HIBYTE(v14) & 0xF;
  }
  else {
    uint64_t v17 = v12 & 0xFFFFFFFFFFFFLL;
  }
  if (!v17)
  {
    id v71 = *(void **)(v0 + 320);
    swift_bridgeObjectRelease();

    goto LABEL_56;
  }
  if ((v14 & 0x1000000000000000) != 0)
  {
    sub_1004D1D90(v12, v14, 10);
    char v73 = v72;
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void *)(v0 + 352);
    if ((v73 & 1) == 0) {
      goto LABEL_53;
    }
    goto LABEL_55;
  }
  if ((v14 & 0x2000000000000000) != 0)
  {
    v82[0] = v12;
    v82[1] = v14 & 0xFFFFFFFFFFFFFFLL;
    if (v12 == 43)
    {
      if (v15)
      {
        if (v15 != 1 && (BYTE1(v12) - 48) <= 9u)
        {
          unint64_t v28 = (BYTE1(v12) - 48);
          uint64_t v29 = v15 - 2;
          if (v29)
          {
            id v30 = (unsigned __int8 *)v82 + 2;
            while (1)
            {
              unsigned int v31 = *v30 - 48;
              if (v31 > 9) {
                goto LABEL_48;
              }
              if (!is_mul_ok(v28, 0xAuLL)) {
                goto LABEL_48;
              }
              BOOL v26 = __CFADD__(10 * v28, v31);
              unint64_t v28 = 10 * v28 + v31;
              if (v26) {
                goto LABEL_48;
              }
              char v27 = 0;
              ++v30;
              if (!--v29) {
                goto LABEL_51;
              }
            }
          }
          goto LABEL_50;
        }
        goto LABEL_48;
      }
    }
    else
    {
      if (v12 != 45)
      {
        if (v15 && (v12 - 48) <= 9u)
        {
          unint64_t v32 = (v12 - 48);
          uint64_t v33 = v15 - 1;
          if (v33)
          {
            uint64_t v58 = (unsigned __int8 *)v82 + 1;
            while (1)
            {
              unsigned int v59 = *v58 - 48;
              if (v59 > 9) {
                goto LABEL_48;
              }
              if (!is_mul_ok(v32, 0xAuLL)) {
                goto LABEL_48;
              }
              BOOL v26 = __CFADD__(10 * v32, v59);
              unint64_t v32 = 10 * v32 + v59;
              if (v26) {
                goto LABEL_48;
              }
              char v27 = 0;
              ++v58;
              if (!--v33) {
                goto LABEL_51;
              }
            }
          }
          goto LABEL_50;
        }
        goto LABEL_48;
      }
      if (v15)
      {
        if (v15 != 1 && (BYTE1(v12) - 48) <= 9u)
        {
          unint64_t v22 = -(uint64_t)(BYTE1(v12) - 48);
          if (BYTE1(v12) == 48)
          {
            uint64_t v23 = v15 - 2;
            if (v23)
            {
              uint64_t v24 = (unsigned __int8 *)v82 + 2;
              while (1)
              {
                unsigned int v25 = *v24 - 48;
                if (v25 > 9) {
                  goto LABEL_48;
                }
                if (!is_mul_ok(v22, 0xAuLL)) {
                  goto LABEL_48;
                }
                BOOL v26 = 10 * v22 >= v25;
                unint64_t v22 = 10 * v22 - v25;
                if (!v26) {
                  goto LABEL_48;
                }
                char v27 = 0;
                ++v24;
                if (!--v23) {
                  goto LABEL_51;
                }
              }
            }
LABEL_50:
            char v27 = 0;
            goto LABEL_51;
          }
LABEL_79:
          char v27 = 1;
          goto LABEL_51;
        }
LABEL_48:
        char v27 = 1;
LABEL_51:
        uint64_t v19 = *(void *)(v0 + 352);
LABEL_52:
        swift_bridgeObjectRelease();
        if ((v27 & 1) == 0)
        {
LABEL_53:
          swift_retain();
          sub_100312690(30, v1);
          uint64_t v35 = v34;
          sub_100263CCC(v0 + 144);
          if (v35)
          {
            uint64_t v37 = *(void *)(v0 + 304);
            uint64_t v36 = *(void *)(v0 + 312);
            uint64_t v38 = *(void *)(v0 + 296);
            static String.Encoding.utf8.getter();
            uint64_t v39 = String.data(using:allowLossyConversion:)();
            unint64_t v41 = v40;
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
            if (v41 >> 60 != 15)
            {
              static TokenHandoff.handoffPODToken(tokenData:advertisedItemID:)();
              uint64_t v43 = *(void *)(v0 + 248);
              if (v19)
              {
                static Logger.install.getter();
                sub_1004F8340(v43);
                swift_errorRetain();
                sub_1004F8340(v43);
                swift_errorRetain();
                uint64_t v44 = Logger.logObject.getter();
                os_log_type_t type = static os_log_type_t.error.getter();
                BOOL v45 = os_log_type_enabled(v44, type);
                uint64_t v47 = *(void *)(v0 + 264);
                uint64_t v46 = *(void *)(v0 + 272);
                uint64_t v48 = *(void ***)(v0 + 248);
                uint64_t v49 = *(void *)(v0 + 256);
                if (v45)
                {
                  uint64_t v77 = *(void *)(v0 + 272);
                  uint64_t v74 = *(void *)(v0 + 264);
                  id v75 = *(void **)(v0 + 320);
                  uint64_t v76 = *(void *)(v0 + 256);
                  uint64_t v50 = swift_slowAlloc();
                  unsigned int v51 = (void *)swift_slowAlloc();
                  v82[0] = swift_slowAlloc();
                  *(_DWORD *)uint64_t v50 = 138412546;
                  uint64_t v80 = v39;
                  uint64_t v52 = *v48;
                  *(void *)(v0 + 176) = *v48;
                  id v53 = v52;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  *unsigned int v51 = v52;
                  sub_10056ABF8((uint64_t)v48);
                  sub_10056ABF8((uint64_t)v48);
                  *(_WORD *)(v50 + 12) = 2082;
                  swift_getErrorValue();
                  uint64_t v54 = *(void *)(*(void *)(v0 + 104) - 8);
                  swift_task_alloc();
                  (*(void (**)(void))(v54 + 16))();
                  uint64_t v55 = String.init<A>(describing:)();
                  unint64_t v57 = v56;
                  swift_task_dealloc();
                  *(void *)(v0 + 184) = sub_1000143F4(v55, v57, v82);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  swift_errorRelease();
                  swift_errorRelease();
                  _os_log_impl((void *)&_mh_execute_header, v44, type, "[%@] Error handing off token: %{public}s", (uint8_t *)v50, 0x16u);
                  sub_1000172F8(&qword_10065DB10);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();

                  sub_10018AE44(v80, v41);
                  swift_errorRelease();
                  (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v77, v76);
                }
                else
                {

                  sub_10018AE44(v39, v41);
                  swift_errorRelease();
                  sub_10056ABF8((uint64_t)v48);
                  sub_10056ABF8((uint64_t)v48);
                  swift_errorRelease();
                  swift_errorRelease();

                  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v49);
                }
              }
              else
              {
                uint64_t v81 = v39;
                static Logger.install.getter();
                sub_1004F8340(v43);
                sub_1004F8340(v43);
                uint64_t v60 = Logger.logObject.getter();
                os_log_type_t v61 = static os_log_type_t.default.getter();
                BOOL v62 = os_log_type_enabled(v60, v61);
                uint64_t v63 = *(void ***)(v0 + 248);
                if (v62)
                {
                  uint64_t v78 = *(void **)(v0 + 320);
                  uint64_t v64 = (uint8_t *)swift_slowAlloc();
                  uint64_t v65 = (void *)swift_slowAlloc();
                  *(_DWORD *)uint64_t v64 = 138412290;
                  uint64_t v66 = *v63;
                  *(void *)(v0 + 192) = *v63;
                  id v67 = v66;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  *uint64_t v65 = v66;
                  sub_10056ABF8((uint64_t)v63);
                  sub_10056ABF8((uint64_t)v63);
                  _os_log_impl((void *)&_mh_execute_header, v60, v61, "[%@] Successfully handed off token", v64, 0xCu);
                  sub_1000172F8(&qword_10065DB10);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();
                }
                else
                {

                  sub_10056ABF8((uint64_t)v63);
                  sub_10056ABF8((uint64_t)v63);
                }
                uint64_t v68 = *(void *)(v0 + 288);
                uint64_t v69 = *(void *)(v0 + 256);
                uint64_t v70 = *(void *)(v0 + 264);
                sub_10018AE44(v81, v41);

                (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v68, v69);
              }
              goto LABEL_56;
            }
          }
        }
LABEL_55:

        goto LABEL_56;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_79;
  }
  if ((v12 & 0x1000000000000000) != 0) {
    uint64_t v18 = (unsigned __int8 *)((v14 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else {
    uint64_t v18 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
  uint64_t v19 = *(void *)(v0 + 352);
  uint64_t result = sub_1004D1D78(v18, v16, 10);
  if (!v19)
  {
    char v27 = v21 & 1;
    goto LABEL_52;
  }
  return result;
}

uint64_t sub_10056A8B8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_10056A94C(uint64_t a1, void *a2, void *a3)
{
  sub_10018AC60((void *)(a1 + 32), *(void *)(a1 + 56));
  if (a3)
  {
    id v5 = a3;
    sub_1000172F8(&qword_1006674D8);
    CheckedContinuation.resume(throwing:)();
  }
  else if (a2)
  {
    id v6 = a2;
    sub_1000172F8(&qword_1006674D8);
    CheckedContinuation.resume(returning:)();
  }
  else
  {
    __break(1u);
  }
}

void sub_10056A9F0(void **a1, uint64_t a2, uint64_t a3)
{
  id v5 = *a1;
  uint64_t v11 = sub_1000172F8(&qword_10065C3D0);
  unint64_t v12 = sub_1002BDACC();
  LOWORD(v9) = 2;
  *((void *)&v9 + 1) = a2;
  uint64_t v10 = a3;
  sub_1000172F8(&qword_10065C3E0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
  sub_10018B164(&v9, inited + 32);
  id v7 = v5;
  swift_bridgeObjectRetain();
  sub_10055595C(inited);
  char v8 = (void *)sub_10033241C(0, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)sub_100332380, 0, v7);

  swift_bridgeObjectRelease();
  if (v8)
  {
    [v8 deleteFromDatabase];
  }
}

__n128 sub_10056AB2C@<Q0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  sub_10056ADC4(a1, a2, a3, a4, a5, a6, a7, v12);
  long long v9 = v12[5];
  *(_OWORD *)(a8 + 64) = v12[4];
  *(_OWORD *)(a8 + 80) = v9;
  *(void *)(a8 + 96) = v13;
  long long v10 = v12[1];
  *(_OWORD *)a8 = v12[0];
  *(_OWORD *)(a8 + 16) = v10;
  __n128 result = (__n128)v12[3];
  *(_OWORD *)(a8 + 32) = v12[2];
  *(__n128 *)(a8 + 48) = result;
  return result;
}

uint64_t sub_10056AB90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_10065CFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10056ABF8(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 80);
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t sub_10056AC98()
{
  swift_unknownObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 130, 7);
}

void sub_10056ACF8(id *a1)
{
  sub_10056834C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void sub_10056AD14(void **a1)
{
  sub_1002E73BC(*(unsigned char *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *a1);
}

void sub_10056AD4C(void **a1)
{
  sub_10056A9F0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10056AD68(uint64_t a1)
{
  return sub_100014524(a1 + 32);
}

unint64_t sub_10056AD84()
{
  unint64_t result = qword_1006674E0;
  if (!qword_1006674E0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1006674E0);
  }
  return result;
}

uint64_t sub_10056ADC4@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  id v14 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  id v15 = sub_100249BF4(a1);
  uint64_t v28 = v16;
  id v29 = v15;
  uint64_t result = sub_10041CE88(a2, (uint64_t)[a1 persistentID]);
  uint64_t v26 = v18;
  uint64_t v27 = result;
  if (v18)
  {

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void *)(a3[30] + 16);
    uint64_t v20 = a3[24];
    id v21 = v14;
    unint64_t v22 = *(void **)(v20 + 24);
    uint64_t v23 = a3[28];
    swift_retain();
    id v24 = v22;
    swift_retain();
    swift_retain();
    swift_release();
    uint64_t v25 = *(void *)(v20 + 152);
    swift_retain();
    uint64_t result = swift_release();
    *a8 = v21;
    a8[1] = a5;
    a8[2] = a6;
    a8[3] = a7;
    a8[4] = v29;
    a8[5] = v28;
    a8[6] = v27;
    a8[7] = v26;
    a8[8] = a3;
    a8[9] = v19;
    a8[10] = v24;
    a8[11] = v23;
    a8[12] = v25;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10056AF14()
{
  return sub_100563BC8();
}

uint64_t sub_10056AF90(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v5 = v4;
  uint64_t v118 = a3;
  uint64_t v119 = a1;
  uint64_t v122 = a2;
  uint64_t v116 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v121 = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  BOOL v115 = (char *)&v106 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Container();
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v114 = (uint64_t)&v106 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  id v120 = (uint64_t *)((char *)&v106 - v11);
  uint64_t v12 = type metadata accessor for URL();
  __chkstk_darwin(v12 - 8);
  id v14 = (char *)&v106 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1000172F8(&qword_10065B220);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v106 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = (char *)&v106 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ApprovedDeveloperStore();
  uint64_t v21 = swift_allocObject();
  sub_10049DC30(v21 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon22ApprovedDeveloperStore_containerURL);
  *(void *)(v4 + 280) = v21;
  type metadata accessor for DistributorPreferencesStore();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = 0xD000000000000012;
  *(void *)(v22 + 24) = 0x80000001005B75E0;
  sub_10054FA44((uint64_t)v20);
  sub_10026400C((uint64_t)v20, v22 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon27DistributorPreferencesStore_containerURL);
  uint64_t v23 = type metadata accessor for TaskPriority();
  id v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56);
  v24(v17, 1, 1, v23);
  uint64_t v25 = (void *)swift_allocObject();
  _OWORD v25[2] = 0;
  v25[3] = 0;
  v25[4] = v22;
  swift_retain();
  sub_1000163AC((uint64_t)v17, (uint64_t)&unk_100667640, (uint64_t)v25);
  swift_release();
  *(void *)(v5 + 288) = v22;
  sub_1003C77F8((void *)0x6573616261746164, 0xEF6574696C71732ELL, (uint64_t)v14);
  type metadata accessor for SQLiteConnection();
  swift_allocObject();
  *(void *)(v5 + 24) = sub_10025B5B4((uint64_t)v14);
  long long v26 = a4[5];
  *(_OWORD *)(v5 + 96) = a4[4];
  *(_OWORD *)(v5 + 112) = v26;
  *(_OWORD *)(v5 + 127) = *(_OWORD *)((char *)a4 + 95);
  long long v27 = a4[1];
  *(_OWORD *)(v5 + 32) = *a4;
  *(_OWORD *)(v5 + 48) = v27;
  long long v28 = a4[3];
  *(_OWORD *)(v5 + 64) = a4[2];
  *(_OWORD *)(v5 + 80) = v28;
  type metadata accessor for DeviceStateObserver();
  uint64_t v29 = swift_allocObject();
  sub_1000172F8(&qword_100667648);
  uint64_t v30 = swift_allocObject();
  *(_DWORD *)(v30 + 32) = 0;
  *(_WORD *)(v30 + 16) = 0;
  *(_DWORD *)(v30 + 20) = -1;
  *(void *)(v30 + 24) = _swiftEmptyArrayStorage;
  *(void *)(v29 + 16) = v30;
  sub_10018AB28((uint64_t)a4);
  sub_10035D0E4();
  *(void *)(v5 + 144) = v29;
  type metadata accessor for XPCClientRegistry();
  uint64_t v31 = swift_allocObject();
  unint64_t v32 = sub_10044C948((uint64_t)_swiftEmptyArrayStorage);
  sub_1000172F8(&qword_100667650);
  uint64_t v33 = swift_allocObject();
  *(_DWORD *)(v33 + 24) = 0;
  *(void *)(v33 + 16) = v32;
  *(void *)(v31 + 16) = v33;
  *(void *)(v5 + 16) = v31;
  type metadata accessor for LocalizationJetPack();
  uint64_t v34 = v119;
  swift_getObjectType();
  uint64_t v35 = swift_unknownObjectRetain();
  uint64_t v36 = sub_100561660(v35);
  swift_unknownObjectRelease();
  *(void *)(v5 + 216) = v36;
  uint64_t v37 = *(void *)(v5 + 24);
  *(void *)(v5 + 296) = v37;
  uint64_t v38 = *(void *)(v5 + 280);
  v24(v17, 1, 1, v23);
  uint64_t v39 = (void *)swift_allocObject();
  v39[2] = 0;
  v39[3] = 0;
  v39[4] = v37;
  v39[5] = v38;
  swift_retain_n();
  swift_retain_n();
  sub_100017544((uint64_t)v17, (uint64_t)&unk_100667658, (uint64_t)v39);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v40 = *(void *)(v5 + 216);
  type metadata accessor for FeatureEligibility();
  uint64_t v41 = swift_allocObject();
  long long v42 = a4[5];
  *(_OWORD *)(v41 + 80) = a4[4];
  *(_OWORD *)(v41 + 96) = v42;
  *(_OWORD *)(v41 + 111) = *(_OWORD *)((char *)a4 + 95);
  long long v43 = a4[1];
  *(_OWORD *)(v41 + 16) = *a4;
  *(_OWORD *)(v41 + 32) = v43;
  long long v44 = a4[3];
  *(_OWORD *)(v41 + 48) = a4[2];
  *(_OWORD *)(v41 + 64) = v44;
  *(void *)(v41 + 128) = v40;
  *(void *)(v5 + 152) = v41;
  type metadata accessor for PurchaseDependencies();
  uint64_t v45 = swift_allocObject();
  uint64_t v46 = *(void *)(v5 + 24);
  *(void *)(v5 + 160) = v45;
  *(void *)(v5 + 168) = v46;
  type metadata accessor for AppInstallScheduler();
  swift_allocObject();
  swift_retain();
  sub_10018AB28((uint64_t)a4);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v47 = sub_10045F0F8(v46, v34);
  *(void *)(v5 + 176) = v47;
  type metadata accessor for UpdateDependencies();
  uint64_t v48 = swift_allocObject();
  *(void *)(v48 + 16) = v46;
  *(void *)(v48 + 24) = v46;
  *(void *)(v5 + 200) = v48;
  *(void *)(v5 + 184) = v46;
  uint64_t v49 = *(void *)(v5 + 16);
  type metadata accessor for ProgressCache();
  uint64_t v50 = (void *)swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_defaultActor_initialize();
  v50[14] = sub_10044C2E0((uint64_t)_swiftEmptyArrayStorage);
  v50[15] = 0;
  v50[16] = v49;
  v50[17] = v46;
  v50[18] = v47;
  v50[19] = v48;
  *(void *)(v5 + 224) = v50;
  uint64_t v51 = *(void *)(v5 + 24);
  uint64_t v53 = *(void *)(v5 + 280);
  uint64_t v52 = *(void *)(v5 + 288);
  sub_100334908(v122, (uint64_t)v120);
  uint64_t v107 = *(void *)(v5 + 152);
  uint64_t v54 = *(void *)(v5 + 176);
  uint64_t v108 = *(void *)(v5 + 168);
  uint64_t v109 = *(void *)(v5 + 184);
  uint64_t v55 = *(void *)(v5 + 16);
  uint64_t v56 = *(void *)(v5 + 216);
  uint64_t v110 = *(void *)(v5 + 200);
  uint64_t v111 = v56;
  type metadata accessor for RestoreManager();
  uint64_t v112 = swift_allocObject();
  swift_retain();
  uint64_t v117 = a4;
  sub_10018AB28((uint64_t)a4);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v57 = v109;
  swift_retain();
  uint64_t v58 = v110;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v59 = swift_retain();
  *((void *)&v105 + 1) = v55;
  *((void *)&v104 + 1) = v58;
  *(void *)&long long v105 = v50;
  *(void *)&long long v104 = v57;
  uint64_t v60 = v51;
  uint64_t v61 = v51;
  BOOL v62 = (void (*)(void, void, void))v120;
  uint64_t v63 = sub_1003A5CC8(a4, v53, v61, v52, (uint64_t)v120, v108, v107, v54, v104, v105, v59);
  swift_release();
  uint64_t v64 = v60;
  swift_release();
  swift_release();
  *(void *)(v5 + 256) = v63;
  swift_retain();
  sub_10037C498();
  swift_release();
  uint64_t v65 = *(void *)(v5 + 16);
  sub_100334908(v122, (uint64_t)v62);
  uint64_t v66 = v114;
  sub_100334908(v118, v114);
  uint64_t v68 = *(void *)(v5 + 168);
  uint64_t v67 = *(void *)(v5 + 176);
  uint64_t v69 = *(void *)(v5 + 256);
  type metadata accessor for InstallDependencies();
  uint64_t v112 = swift_allocObject();
  uint64_t v70 = v117;
  sub_10018AB28((uint64_t)v117);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v113 = v64;
  uint64_t v71 = sub_10033454C(v70, (uint64_t)v62, v66, v68, v67, v69, v64);
  swift_release();
  uint64_t v72 = v65;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  *(void *)(v5 + 192) = v71;
  type metadata accessor for ThermalPressureMonitor();
  swift_allocObject();
  *(void *)(v5 + 208) = sub_1003CA880();
  type metadata accessor for EnterpriseDependencies();
  uint64_t v73 = swift_allocObject();
  uint64_t v74 = v117;
  long long v75 = v117[2];
  *(_OWORD *)(v73 + 72) = v117[3];
  long long v76 = v74[5];
  *(_OWORD *)(v73 + 88) = v74[4];
  *(_OWORD *)(v73 + 104) = v76;
  *(_OWORD *)(v73 + 119) = *(_OWORD *)((char *)v74 + 95);
  long long v77 = v74[1];
  *(_OWORD *)(v73 + 24) = *v74;
  *(_OWORD *)(v73 + 40) = v77;
  *(void *)(v73 + 16) = v71;
  *(_OWORD *)(v73 + 56) = v75;
  *(void *)(v5 + 232) = v73;
  sub_100334908(v122, (uint64_t)v62);
  uint64_t v78 = *(void *)(v5 + 24);
  uint64_t v79 = *(void *)(v5 + 184);
  uint64_t v80 = *(void *)(v5 + 224);
  uint64_t v81 = *(void *)(v5 + 200);
  type metadata accessor for DDMDependencies();
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v82 = sub_1001A14C0((uint64_t)v120, v78, v72, v79, v73, v80, v81);
  swift_release();
  swift_release();
  swift_release();
  *(void *)(v5 + 240) = v82;
  type metadata accessor for AppInstallMetrics();
  *(void *)(v5 + 264) = swift_allocObject();
  type metadata accessor for DistributorDataSource();
  uint64_t v83 = swift_allocObject();
  swift_defaultActor_initialize();
  *(unsigned char *)(v83 + 112) = 0;
  id v84 = [self standardUserDefaults];
  NSString v85 = String._bridgeToObjectiveC()();
  LOBYTE(v78) = [v84 BOOLForKey:v85];

  *(unsigned char *)(v83 + 112) = v78;
  *(void *)(v5 + 272) = v83;
  uint64_t v86 = *(void *)(v5 + 16);
  uint64_t v87 = *(void *)(*(void *)(v5 + 240) + 16);
  uint64_t v88 = *(void *)(v5 + 184);
  uint64_t v89 = *(void *)(v5 + 192);
  uint64_t v90 = *(void *)(v5 + 200);
  uint64_t v91 = *(void *)(v5 + 224);
  uint64_t v92 = *(void *)(v5 + 288);
  type metadata accessor for LaunchServicesObserver();
  swift_allocObject();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  os_log_type_t v93 = sub_100332D44(v86, v87, v89, v88, v90, v91, v92);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  *(void *)(v5 + 248) = v93;
  sub_100176BD4();
  uint64_t v94 = enum case for DispatchQoS.QoSClass.default(_:);
  uint64_t v95 = v121;
  id v120 = *(void **)(v121 + 104);
  uint64_t v97 = v115;
  uint64_t v96 = v116;
  ((void (*)(char *, void, uint64_t))v120)(v115, enum case for DispatchQoS.QoSClass.default(_:), v116);
  id v98 = static OS_dispatch_queue.global(qos:)();
  id v99 = *(void (**)(char *, uint64_t))(v95 + 8);
  uint64_t v121 = v95 + 8;
  v99(v97, v96);
  BOOL v127 = sub_1004E507C;
  uint64_t v128 = 0;
  aBlock = _NSConcreteStackBlock;
  uint64_t v124 = 1107296256;
  uint64_t v125 = sub_1003E04C0;
  uint64_t v126 = &unk_10064C3F8;
  uint64_t v100 = _Block_copy(&aBlock);
  swift_release();
  xpc_set_event_stream_handler("com.apple.distnoted.matching", v98, v100);
  _Block_release(v100);

  ((void (*)(char *, uint64_t, uint64_t))v120)(v97, v94, v96);
  uint64_t v101 = static OS_dispatch_queue.global(qos:)();
  v99(v97, v96);
  BOOL v127 = sub_1004E52A0;
  uint64_t v128 = 0;
  aBlock = _NSConcreteStackBlock;
  uint64_t v124 = 1107296256;
  uint64_t v125 = sub_1003E04C0;
  uint64_t v126 = &unk_10064C420;
  os_log_type_t v102 = _Block_copy(&aBlock);
  swift_release();
  xpc_set_event_stream_handler("com.apple.notifyd.matching", v101, v102);
  _Block_release(v102);
  swift_release();
  swift_release();

  sub_1001A1588(v118);
  sub_1001A1588(v122);
  return v5;
}

uint64_t sub_10056BCBC()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_10056BDD0()
{
  sub_10056BCBC();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Dependencies()
{
  return self;
}

uint64_t sub_10056BE28()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10056BE68(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000B238;
  return sub_10054FFF4(a1, v4, v5, v6);
}

uint64_t sub_10056BF1C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10056BF64(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10000B238;
  return sub_10049E9E8(a1, v4, v5, v7, v6);
}

uint64_t sub_10056C024()
{
  return swift_release();
}

void sub_10056C034(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for RegisteredXPCClient();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v8 = v7 + 4;
  uint64_t v9 = v7 + 6;
  os_unfair_lock_lock(v7 + 6);
  sub_100352424(v8, &v23);
  os_unfair_lock_unlock(v9);
  int64_t v10 = 0;
  uint64_t v11 = v23;
  uint64_t v12 = v23 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(v23 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v23 + 64);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v16) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v12 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v16) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v12 + 8 * v10);
      if (!v20)
      {
        int64_t v10 = v19 + 2;
        if (v19 + 2 >= v16) {
          goto LABEL_23;
        }
        unint64_t v20 = *(void *)(v12 + 8 * v10);
        if (!v20)
        {
          int64_t v10 = v19 + 3;
          if (v19 + 3 >= v16) {
            goto LABEL_23;
          }
          unint64_t v20 = *(void *)(v12 + 8 * v10);
          if (!v20) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v15 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_5:
    sub_1005758D4(*(void *)(v11 + 56) + *(void *)(v4 + 72) * v18, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
    sub_10057362C(a1);
    sub_1005759A4((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
  }
  int64_t v21 = v19 + 4;
  if (v21 >= v16)
  {
LABEL_23:
    swift_release();
    return;
  }
  unint64_t v20 = *(void *)(v12 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v16) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v12 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_10056C26C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 48) = a6;
  *(void *)(v7 + 56) = v6;
  *(void *)(v7 + 32) = a4;
  *(void *)(v7 + 40) = a5;
  *(unsigned char *)(v7 + 88) = a3;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  return _swift_task_switch(sub_10056C298, 0, 0);
}

uint64_t sub_10056C298()
{
  uint64_t v13 = v0;
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  char v3 = *(unsigned char *)(v0 + 88) & 1;
  uint64_t v4 = *(os_unfair_lock_s **)(*(void *)(v0 + 56) + 16);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v1;
  *(unsigned char *)(v5 + 32) = v3;
  os_unfair_lock_lock(v4 + 6);
  sub_100333300(&v12);
  uint64_t v6 = *(void *)(v0 + 48);
  long long v11 = *(_OWORD *)(v0 + 32);
  os_unfair_lock_unlock(v4 + 6);
  uint64_t v7 = v12;
  *(void *)(v0 + 64) = v12;
  swift_task_dealloc();
  uint64_t v8 = swift_task_alloc();
  *(void *)(v0 + 72) = v8;
  *(void *)(v8 + 16) = v7;
  *(_OWORD *)(v8 + 24) = v11;
  *(void *)(v8 + 40) = v6;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_10056C424;
  return withDiscardingTaskGroup<A>(returning:isolation:body:)();
}

uint64_t sub_10056C424()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return _swift_task_switch(sub_10056C558, 0, 0);
}

uint64_t sub_10056C558()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10056C56C(uint64_t a1)
{
  uint64_t updated = type metadata accessor for AppStateUpdateIdentifier();
  int64_t v4 = *(void *)(updated - 8);
  uint64_t v106 = updated;
  int64_t v107 = v4;
  __chkstk_darwin(updated);
  long long v105 = (uint64_t *)((char *)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v104 = type metadata accessor for AppState();
  uint64_t v112 = *(void **)(v104 - 8);
  __chkstk_darwin(v104);
  BOOL v103 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = type metadata accessor for AppProgress();
  int64_t v111 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  uint64_t v101 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = type metadata accessor for XPCClientMessage();
  uint64_t v8 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  uint64_t v110 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = type metadata accessor for ProgressCache.Progress();
  uint64_t v108 = *(void *)(v98 - 8);
  uint64_t v10 = __chkstk_darwin(v98);
  uint64_t v97 = (uint64_t)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v78 - v12;
  uint64_t v14 = sub_1000172F8(&qword_100667738);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  unint64_t v17 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  int64_t v19 = (char *)&v78 - v18;
  uint64_t v82 = type metadata accessor for RegisteredXPCClient();
  uint64_t v83 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  int64_t v21 = (char *)&v78 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_1000172F8(&qword_100667740);
  uint64_t v23 = __chkstk_darwin(v22 - 8);
  uint64_t v86 = (char *)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v89 = (uint64_t)&v78 - v25;
  long long v26 = *(os_unfair_lock_s **)(v1 + 16);
  long long v27 = v26 + 4;
  long long v28 = v26 + 6;
  os_unfair_lock_lock(v26 + 6);
  sub_100352424(v27, &v113);
  os_unfair_lock_unlock(v28);
  int64_t v87 = 0;
  uint64_t v29 = *(void *)(v113 + 64);
  uint64_t v80 = v113 + 64;
  uint64_t v84 = v113;
  uint64_t v30 = 1 << *(unsigned char *)(v113 + 32);
  if (v30 < 64) {
    uint64_t v31 = ~(-1 << v30);
  }
  else {
    uint64_t v31 = -1;
  }
  unint64_t v32 = v31 & v29;
  uint64_t v109 = a1;
  uint64_t v90 = a1 + 64;
  uint64_t v95 = (void (**)(char *, uint64_t, uint64_t))(v112 + 2);
  unsigned int v94 = enum case for AppStateUpdateIdentifier.managedAppDistribution(_:);
  os_log_type_t v93 = (void (**)(void *, void, uint64_t))(v107 + 104);
  uint64_t v92 = (void (**)(char *, uint64_t))(v111 + 8);
  uint64_t v99 = v8;
  uint64_t v91 = v8 + 32;
  int64_t v81 = (unint64_t)(v30 + 63) >> 6;
  int64_t v79 = v81 - 1;
  uint64_t v96 = v19;
LABEL_6:
  if (!v32)
  {
    int64_t v41 = v87 + 1;
    if (__OFADD__(v87, 1))
    {
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    uint64_t v38 = (uint64_t)v86;
    if (v41 < v81)
    {
      unint64_t v42 = *(void *)(v80 + 8 * v41);
      if (v42)
      {
LABEL_12:
        uint64_t v88 = (v42 - 1) & v42;
        unint64_t v34 = __clz(__rbit64(v42)) + (v41 << 6);
        int64_t v87 = v41;
        goto LABEL_8;
      }
      int64_t v43 = v87 + 2;
      ++v87;
      if (v41 + 1 < v81)
      {
        unint64_t v42 = *(void *)(v80 + 8 * v43);
        if (v42)
        {
LABEL_15:
          int64_t v41 = v43;
          goto LABEL_12;
        }
        int64_t v87 = v41 + 1;
        if (v41 + 2 < v81)
        {
          unint64_t v42 = *(void *)(v80 + 8 * (v41 + 2));
          if (v42)
          {
            v41 += 2;
            goto LABEL_12;
          }
          int64_t v43 = v41 + 3;
          int64_t v87 = v41 + 2;
          if (v41 + 3 < v81)
          {
            unint64_t v42 = *(void *)(v80 + 8 * v43);
            if (v42) {
              goto LABEL_15;
            }
            while (1)
            {
              int64_t v41 = v43 + 1;
              if (__OFADD__(v43, 1)) {
                goto LABEL_69;
              }
              if (v41 >= v81) {
                break;
              }
              unint64_t v42 = *(void *)(v80 + 8 * v41);
              ++v43;
              if (v42) {
                goto LABEL_12;
              }
            }
            int64_t v87 = v79;
          }
        }
      }
    }
    uint64_t v44 = sub_1000172F8(&qword_100667748);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v38, 1, 1, v44);
    uint64_t v88 = 0;
    goto LABEL_27;
  }
  uint64_t v88 = (v32 - 1) & v32;
  unint64_t v34 = __clz(__rbit64(v32)) | (v87 << 6);
LABEL_8:
  uint64_t v35 = v84;
  uint64_t v36 = *(void *)(v84 + 48);
  uint64_t v37 = type metadata accessor for UUID();
  uint64_t v38 = (uint64_t)v86;
  (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v37 - 8) + 16))(v86, v36 + *(void *)(*(void *)(v37 - 8) + 72) * v34, v37);
  uint64_t v39 = *(void *)(v35 + 56) + *(void *)(v83 + 72) * v34;
  uint64_t v40 = sub_1000172F8(&qword_100667748);
  sub_1005758D4(v39, v38 + *(int *)(v40 + 48), (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v38, 0, 1, v40);
LABEL_27:
  uint64_t v45 = v89;
  sub_10001733C(v38, v89, &qword_100667740);
  uint64_t v46 = sub_1000172F8(&qword_100667748);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 48))(v45, 1, v46) == 1)
  {
    swift_release();
    return;
  }
  sub_10057593C(v45 + *(int *)(v46 + 48), (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
  uint64_t v47 = 1 << *(unsigned char *)(v109 + 32);
  if (v47 < 64) {
    uint64_t v48 = ~(-1 << v47);
  }
  else {
    uint64_t v48 = -1;
  }
  unint64_t v49 = v48 & *(void *)(v109 + 64);
  int64_t v107 = (unint64_t)(v47 + 63) >> 6;
  int64_t v85 = v107 - 1;
  swift_bridgeObjectRetain();
  int64_t v111 = 0;
  uint64_t v112 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v49)
    {
      unint64_t v52 = __clz(__rbit64(v49));
      v49 &= v49 - 1;
      unint64_t v53 = v52 | (v111 << 6);
LABEL_36:
      uint64_t v54 = v109;
      uint64_t v55 = *(void *)(v109 + 48);
      uint64_t v56 = type metadata accessor for UUID();
      (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v56 - 8) + 16))(v17, v55 + *(void *)(*(void *)(v56 - 8) + 72) * v53, v56);
      uint64_t v57 = *(void *)(v54 + 56) + *(void *)(v108 + 72) * v53;
      uint64_t v58 = sub_1000172F8(&qword_100667750);
      sub_1005758D4(v57, (uint64_t)&v17[*(int *)(v58 + 48)], (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v17, 0, 1, v58);
      goto LABEL_55;
    }
    int64_t v59 = v111 + 1;
    if (__OFADD__(v111, 1))
    {
      __break(1u);
      goto LABEL_67;
    }
    if (v59 < v107)
    {
      unint64_t v60 = *(void *)(v90 + 8 * v59);
      if (v60) {
        goto LABEL_40;
      }
      int64_t v61 = v111 + 2;
      ++v111;
      if (v59 + 1 < v107)
      {
        unint64_t v60 = *(void *)(v90 + 8 * v61);
        if (v60) {
          goto LABEL_43;
        }
        int64_t v111 = v59 + 1;
        if (v59 + 2 < v107)
        {
          unint64_t v60 = *(void *)(v90 + 8 * (v59 + 2));
          if (v60)
          {
            v59 += 2;
            goto LABEL_40;
          }
          int64_t v61 = v59 + 3;
          int64_t v111 = v59 + 2;
          if (v59 + 3 < v107) {
            break;
          }
        }
      }
    }
LABEL_54:
    uint64_t v62 = sub_1000172F8(&qword_100667750);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v17, 1, 1, v62);
    unint64_t v49 = 0;
LABEL_55:
    sub_10001733C((uint64_t)v17, (uint64_t)v19, &qword_100667738);
    uint64_t v63 = sub_1000172F8(&qword_100667750);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v63 - 8) + 48))(v19, 1, v63) == 1)
    {
      swift_release();
      long long v77 = v112;
      if (v112[2])
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        XPCClientProtocol.handleMessages(_:)((Swift::OpaquePointer)v77);
        swift_unknownObjectRelease();
      }
      swift_bridgeObjectRelease();
      sub_1005759A4((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
      uint64_t v33 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v33 - 8) + 8))(v89, v33);
      unint64_t v32 = v88;
      goto LABEL_6;
    }
    sub_10057593C((uint64_t)&v19[*(int *)(v63 + 48)], (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress);
    if (sub_10056E248((uint64_t)v13))
    {
      uint64_t v64 = v17;
      uint64_t v65 = v13;
      uint64_t v66 = (uint64_t)v13;
      uint64_t v67 = v97;
      sub_1005758D4(v66, v97, (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress);
      (*v95)(v103, v67 + *(int *)(v98 + 24), v104);
      uint64_t v68 = *(void *)(v67 + 8);
      uint64_t v69 = *(void *)(v67 + 16);
      char v70 = *(unsigned char *)(v67 + 24);
      if (v70) {
        uint64_t v69 = 0;
      }
      uint64_t v72 = v105;
      uint64_t v71 = v106;
      *long long v105 = *(void *)v67;
      v72[1] = v68;
      v72[2] = v69;
      *((unsigned char *)v72 + 24) = v70;
      (*v93)(v72, v94, v71);
      swift_bridgeObjectRetain();
      uint64_t v73 = v101;
      AppProgress.init(state:identifier:)();
      sub_1005759A4(v67, (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress);
      static XPCClientMessage.appProgress(_:)();
      (*v92)(v73, v102);
      unint64_t v74 = (unint64_t)v112;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v74 = sub_10028F3A0(0, *(void *)(v74 + 16) + 1, 1, v74);
      }
      unint64_t v76 = *(void *)(v74 + 16);
      unint64_t v75 = *(void *)(v74 + 24);
      uint64_t v112 = (void *)v74;
      uint64_t v13 = v65;
      if (v76 >= v75 >> 1) {
        uint64_t v112 = (void *)sub_10028F3A0(v75 > 1, v76 + 1, 1, (unint64_t)v112);
      }
      unint64_t v17 = v64;
      uint64_t v50 = v112;
      v112[2] = v76 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v99 + 32))((unint64_t)v50+ ((*(unsigned __int8 *)(v99 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80))+ *(void *)(v99 + 72) * v76, v110, v100);
      int64_t v19 = v96;
    }
    sub_1005759A4((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress);
    uint64_t v51 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v51 - 8) + 8))(v19, v51);
  }
  unint64_t v60 = *(void *)(v90 + 8 * v61);
  if (v60)
  {
LABEL_43:
    int64_t v59 = v61;
LABEL_40:
    unint64_t v49 = (v60 - 1) & v60;
    unint64_t v53 = __clz(__rbit64(v60)) + (v59 << 6);
    int64_t v111 = v59;
    goto LABEL_36;
  }
  while (1)
  {
    int64_t v59 = v61 + 1;
    if (__OFADD__(v61, 1)) {
      break;
    }
    if (v59 >= v107)
    {
      int64_t v111 = v85;
      goto LABEL_54;
    }
    unint64_t v60 = *(void *)(v90 + 8 * v59);
    ++v61;
    if (v60) {
      goto LABEL_40;
    }
  }
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
}

uint64_t sub_10056D39C(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for XPCClientMessage();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for RegisteredXPCClient();
  v2[7] = v4;
  v2[8] = *(void *)(v4 - 8);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  return _swift_task_switch(sub_10056D4C8, 0, 0);
}

uint64_t sub_10056D4C8()
{
  uint64_t v29 = v0;
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + 24) + 16);
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_100352424(v2, &v28);
  os_unfair_lock_unlock(v3);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v6 = v28;
  *(void *)(v0 + 88) = v28;
  char v7 = *(unsigned char *)(v6 + 32);
  *(unsigned char *)(v0 + 128) = v7;
  uint64_t v8 = -1;
  uint64_t v9 = -1 << v7;
  if (-v9 < 64) {
    uint64_t v8 = ~(-1 << -(char)v9);
  }
  unint64_t v10 = v8 & *(void *)(v6 + 64);
  if (v10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = __clz(__rbit64(v10));
    uint64_t v13 = (v10 - 1) & v10;
LABEL_5:
    *(void *)(v0 + 96) = v13;
    *(void *)(v0 + 104) = v11;
    uint64_t v14 = *(void *)(v0 + 72);
    uint64_t v15 = *(void *)(v0 + 80);
    sub_1005758D4(*(void *)(v6 + 56) + *(void *)(v4 + 72) * v12, v15, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
    sub_10057593C(v15, v14, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
    uint64_t v16 = (uint64_t *)(v14 + *(int *)(v5 + 24));
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    int64_t v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v19;
    *int64_t v19 = v0;
    v19[1] = sub_10056D790;
    uint64_t v20 = *(void *)(v0 + 16);
    return sub_10050057C(v20, 0, 0, v18, v17);
  }
  unint64_t v22 = 63 - v9;
  if ((unint64_t)(63 - v9) > 0x7F)
  {
    unint64_t v23 = *(void *)(v6 + 72);
    if (v23)
    {
      uint64_t v11 = 1;
LABEL_11:
      uint64_t v13 = (v23 - 1) & v23;
      unint64_t v12 = __clz(__rbit64(v23)) + (v11 << 6);
      goto LABEL_5;
    }
    if (v22 >= 0xC0)
    {
      unint64_t v23 = *(void *)(v6 + 80);
      if (v23)
      {
        uint64_t v11 = 2;
        goto LABEL_11;
      }
      if (v22 >= 0x100)
      {
        unint64_t v23 = *(void *)(v6 + 88);
        if (v23)
        {
          uint64_t v11 = 3;
          goto LABEL_11;
        }
        if (v22 >= 0x140)
        {
          unint64_t v23 = *(void *)(v6 + 96);
          if (v23)
          {
            uint64_t v11 = 4;
            goto LABEL_11;
          }
          if (v22 >= 0x180)
          {
            unint64_t v23 = *(void *)(v6 + 104);
            if (v23)
            {
              uint64_t v11 = 5;
              goto LABEL_11;
            }
            uint64_t v24 = 0;
            uint64_t v25 = v22 >> 6;
            if (v22 >> 6 <= 6) {
              uint64_t v25 = 6;
            }
            uint64_t v26 = v25 - 6;
            while (v26 != v24)
            {
              unint64_t v23 = *(void *)(v6 + 112 + 8 * v24++);
              if (v23)
              {
                uint64_t v11 = v24 + 5;
                goto LABEL_11;
              }
            }
          }
        }
      }
    }
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v27 = *(uint64_t (**)(void))(v0 + 8);
  return v27();
}

uint64_t sub_10056D790(uint64_t a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_errorRelease();
    uint64_t v5 = sub_10056DB88;
  }
  else
  {
    *(void *)(v4 + 120) = a1;
    uint64_t v5 = sub_10056D8BC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10056D8BC()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  swift_getObjectType();
  static XPCClientMessage.appCatalog(_:)();
  swift_bridgeObjectRelease();
  XPCClientProtocol.handleMessage(_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  uint64_t result = sub_1005759A4(*(void *)(v0 + 72), (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
  unint64_t v6 = *(void *)(v0 + 96);
  int64_t v5 = *(void *)(v0 + 104);
  if (v6)
  {
    uint64_t v7 = (v6 - 1) & v6;
    unint64_t v8 = __clz(__rbit64(v6)) | (v5 << 6);
    uint64_t result = *(void *)(v0 + 88);
LABEL_3:
    *(void *)(v0 + 96) = v7;
    *(void *)(v0 + 104) = v5;
    uint64_t v9 = *(void *)(v0 + 72);
    uint64_t v10 = *(void *)(v0 + 80);
    uint64_t v11 = *(void *)(v0 + 56);
    sub_1005758D4(*(void *)(result + 56) + *(void *)(*(void *)(v0 + 64) + 72) * v8, v10, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
    sub_10057593C(v10, v9, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
    unint64_t v12 = (uint64_t *)(v9 + *(int *)(v11 + 24));
    uint64_t v14 = *v12;
    uint64_t v13 = v12[1];
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_10056D790;
    uint64_t v16 = *(void *)(v0 + 16);
    return sub_10050057C(v16, 0, 0, v14, v13);
  }
  int64_t v17 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  int64_t v18 = (unint64_t)((1 << *(unsigned char *)(v0 + 128)) + 63) >> 6;
  uint64_t result = *(void *)(v0 + 88);
  if (v17 < v18)
  {
    uint64_t v19 = result + 64;
    unint64_t v20 = *(void *)(result + 64 + 8 * v17);
    ++v5;
    if (v20)
    {
LABEL_9:
      uint64_t v7 = (v20 - 1) & v20;
      unint64_t v8 = __clz(__rbit64(v20)) + (v5 << 6);
      goto LABEL_3;
    }
    int64_t v5 = v17 + 1;
    if (v17 + 1 < v18)
    {
      unint64_t v20 = *(void *)(v19 + 8 * v5);
      if (v20) {
        goto LABEL_9;
      }
      int64_t v5 = v17 + 2;
      if (v17 + 2 < v18)
      {
        unint64_t v20 = *(void *)(v19 + 8 * v5);
        if (v20) {
          goto LABEL_9;
        }
        int64_t v5 = v17 + 3;
        if (v17 + 3 < v18)
        {
          unint64_t v20 = *(void *)(v19 + 8 * v5);
          if (v20) {
            goto LABEL_9;
          }
          int64_t v21 = v17 + 4;
          if (v21 < v18)
          {
            unint64_t v20 = *(void *)(v19 + 8 * v21);
            if (v20)
            {
              int64_t v5 = v21;
              goto LABEL_9;
            }
            while (1)
            {
              int64_t v5 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                break;
              }
              if (v5 >= v18) {
                goto LABEL_22;
              }
              unint64_t v20 = *(void *)(v19 + 8 * v5);
              ++v21;
              if (v20) {
                goto LABEL_9;
              }
            }
LABEL_26:
            __break(1u);
            return result;
          }
        }
      }
    }
  }
LABEL_22:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

uint64_t sub_10056DB88()
{
  uint64_t result = sub_1005759A4(*(void *)(v0 + 72), (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
  unint64_t v3 = *(void *)(v0 + 96);
  int64_t v2 = *(void *)(v0 + 104);
  if (v3)
  {
    uint64_t v4 = (v3 - 1) & v3;
    unint64_t v5 = __clz(__rbit64(v3)) | (v2 << 6);
    uint64_t result = *(void *)(v0 + 88);
LABEL_3:
    *(void *)(v0 + 96) = v4;
    *(void *)(v0 + 104) = v2;
    uint64_t v6 = *(void *)(v0 + 72);
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 56);
    sub_1005758D4(*(void *)(result + 56) + *(void *)(*(void *)(v0 + 64) + 72) * v5, v7, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
    sub_10057593C(v7, v6, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
    uint64_t v9 = (uint64_t *)(v6 + *(int *)(v8 + 24));
    uint64_t v11 = *v9;
    uint64_t v10 = v9[1];
    unint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v12;
    *unint64_t v12 = v0;
    v12[1] = sub_10056D790;
    uint64_t v13 = *(void *)(v0 + 16);
    return sub_10050057C(v13, 0, 0, v11, v10);
  }
  int64_t v14 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  int64_t v15 = (unint64_t)((1 << *(unsigned char *)(v0 + 128)) + 63) >> 6;
  uint64_t result = *(void *)(v0 + 88);
  if (v14 < v15)
  {
    uint64_t v16 = result + 64;
    unint64_t v17 = *(void *)(result + 64 + 8 * v14);
    ++v2;
    if (v17)
    {
LABEL_9:
      uint64_t v4 = (v17 - 1) & v17;
      unint64_t v5 = __clz(__rbit64(v17)) + (v2 << 6);
      goto LABEL_3;
    }
    int64_t v2 = v14 + 1;
    if (v14 + 1 < v15)
    {
      unint64_t v17 = *(void *)(v16 + 8 * v2);
      if (v17) {
        goto LABEL_9;
      }
      int64_t v2 = v14 + 2;
      if (v14 + 2 < v15)
      {
        unint64_t v17 = *(void *)(v16 + 8 * v2);
        if (v17) {
          goto LABEL_9;
        }
        int64_t v2 = v14 + 3;
        if (v14 + 3 < v15)
        {
          unint64_t v17 = *(void *)(v16 + 8 * v2);
          if (v17) {
            goto LABEL_9;
          }
          int64_t v18 = v14 + 4;
          if (v18 < v15)
          {
            unint64_t v17 = *(void *)(v16 + 8 * v18);
            if (v17)
            {
              int64_t v2 = v18;
              goto LABEL_9;
            }
            while (1)
            {
              int64_t v2 = v18 + 1;
              if (__OFADD__(v18, 1)) {
                break;
              }
              if (v2 >= v15) {
                goto LABEL_22;
              }
              unint64_t v17 = *(void *)(v16 + 8 * v2);
              ++v18;
              if (v17) {
                goto LABEL_9;
              }
            }
LABEL_26:
            __break(1u);
            return result;
          }
        }
      }
    }
  }
LABEL_22:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
  return v19();
}

uint64_t sub_10056DDE8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 64) = a8;
  *(void *)(v9 + 72) = v8;
  *(void *)(v9 + 48) = a6;
  *(void *)(v9 + 56) = a7;
  *(void *)(v9 + 32) = a4;
  *(void *)(v9 + 40) = a5;
  *(unsigned char *)(v9 + 104) = a3;
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  return _swift_task_switch(sub_10056DE18, 0, 0);
}

uint64_t sub_10056DE18()
{
  uint64_t v16 = v0;
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  char v3 = *(unsigned char *)(v0 + 104) & 1;
  uint64_t v4 = *(os_unfair_lock_s **)(*(void *)(v0 + 72) + 16);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v1;
  *(unsigned char *)(v5 + 32) = v3;
  uint64_t v6 = v4 + 6;
  os_unfair_lock_lock(v4 + 6);
  sub_100576758(&v15);
  uint64_t v7 = *(void *)(v0 + 64);
  long long v14 = *(_OWORD *)(v0 + 48);
  uint64_t v9 = *(void *)(v0 + 32);
  uint64_t v8 = *(void *)(v0 + 40);
  os_unfair_lock_unlock(v6);
  uint64_t v10 = v15;
  *(void *)(v0 + 80) = v15;
  swift_task_dealloc();
  uint64_t v11 = swift_task_alloc();
  *(void *)(v0 + 88) = v11;
  *(void *)(v11 + 16) = v7;
  *(void *)(v11 + 24) = v10;
  *(void *)(v11 + 32) = v9;
  *(_OWORD *)(v11 + 40) = v14;
  *(void *)(v11 + 56) = v8;
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v12;
  *unint64_t v12 = v0;
  v12[1] = sub_10056DFAC;
  return withDiscardingTaskGroup<A>(returning:isolation:body:)();
}

uint64_t sub_10056DFAC()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return _swift_task_switch(sub_10056C558, 0, 0);
}

void (*sub_10056E0E0(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x40uLL);
  *a1 = v2;
  uint64_t v3 = type metadata accessor for UUID();
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  v2[5] = v4;
  uint64_t v6 = malloc(*(void *)(v4 + 64));
  v2[6] = v6;
  (*(void (**)(void))(v5 + 16))();
  v2[7] = sub_100571464(v2, (uint64_t)v6);
  return sub_10056E1D0;
}

void sub_10056E1D0(void *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v2 = *(void **)(*a1 + 48);
  uint64_t v3 = *(void *)(*a1 + 32);
  uint64_t v4 = *(void *)(*a1 + 40);
  (*(void (**)(void, void))(*a1 + 56))(*a1, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v2, v3);
  free(v2);

  free(v1);
}

uint64_t sub_10056E248(uint64_t a1)
{
  uint64_t updated = type metadata accessor for AppStateUpdateIdentifier();
  uint64_t v3 = *(void *)(updated - 8);
  __chkstk_darwin(updated);
  uint64_t v5 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for MessageRegistration();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v56 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v52 - v10;
  uint64_t v12 = type metadata accessor for RegisteredXPCClient();
  if ((sub_100506F40(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(uint64_t *)((char *)v1 + *(int *)(v12 + 24)), *(uint64_t *)((char *)v1 + *(int *)(v12 + 24) + 8)) & 1) == 0)return 0; {
  uint64_t v66 = v5;
  }
  uint64_t v67 = a1;
  uint64_t v13 = *v1;
  uint64_t v14 = *(void *)(v13 + 56);
  uint64_t v69 = v13 + 56;
  uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v77 = v16 & v14;
  int64_t v70 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v17 = v7 + 32;
  uint64_t v73 = v7 + 88;
  int v72 = enum case for MessageRegistration.appStateChange(_:);
  int v65 = enum case for MessageRegistration.appCatalog(_:);
  int v53 = enum case for MessageRegistration.globalAppProgress(_:);
  int v52 = enum case for MessageRegistration.logging(_:);
  uint64_t v64 = (void (**)(char *, uint64_t))(v7 + 96);
  unsigned int v63 = enum case for AppStateUpdateIdentifier.managedAppDistribution(_:);
  int64_t v61 = (void (**)(void *, uint64_t))(v3 + 8);
  uint64_t v62 = (void (**)(void *, void, uint64_t))(v3 + 104);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v19 = 0;
  uint64_t v20 = v56;
  uint64_t v55 = v6;
  uint64_t v54 = v7;
  int64_t v59 = v11;
  uint64_t v60 = v13;
  uint64_t v57 = v7 + 32;
  uint64_t v58 = v7 + 16;
  while (1)
  {
    while (1)
    {
      if (v77)
      {
        unint64_t v24 = __clz(__rbit64(v77));
        v77 &= v77 - 1;
        int64_t v74 = v19;
        unint64_t v25 = v24 | (v19 << 6);
      }
      else
      {
        int64_t v26 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          goto LABEL_46;
        }
        if (v26 >= v70)
        {
LABEL_42:
          swift_release();
          return 0;
        }
        unint64_t v27 = *(void *)(v69 + 8 * v26);
        int64_t v28 = v19 + 1;
        if (!v27)
        {
          int64_t v28 = v19 + 2;
          if (v19 + 2 >= v70) {
            goto LABEL_42;
          }
          unint64_t v27 = *(void *)(v69 + 8 * v28);
          if (!v27)
          {
            int64_t v28 = v19 + 3;
            if (v19 + 3 >= v70) {
              goto LABEL_42;
            }
            unint64_t v27 = *(void *)(v69 + 8 * v28);
            if (!v27)
            {
              uint64_t v29 = v19 + 4;
              if (v19 + 4 >= v70) {
                goto LABEL_42;
              }
              unint64_t v27 = *(void *)(v69 + 8 * v29);
              if (!v27)
              {
                while (1)
                {
                  int64_t v28 = v29 + 1;
                  if (__OFADD__(v29, 1)) {
                    goto LABEL_47;
                  }
                  if (v28 >= v70) {
                    goto LABEL_42;
                  }
                  unint64_t v27 = *(void *)(v69 + 8 * v28);
                  ++v29;
                  if (v27) {
                    goto LABEL_22;
                  }
                }
              }
              int64_t v28 = v19 + 4;
            }
          }
        }
LABEL_22:
        unint64_t v77 = (v27 - 1) & v27;
        int64_t v74 = v28;
        unint64_t v25 = __clz(__rbit64(v27)) + (v28 << 6);
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v11, *(void *)(v13 + 48) + *(void *)(v7 + 72) * v25, v6);
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v20, v11, v6);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v20, v6);
      if (result == v72) {
        break;
      }
      int64_t v19 = v74;
      if (result != v65)
      {
        if (result == v53) {
          goto LABEL_41;
        }
        if (result != v52)
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_40:
          swift_bridgeObjectRelease_n();
          sub_1001C3EC0(v17, v75, v76);
LABEL_41:
          swift_release();
          return 1;
        }
      }
    }
    (*v64)(v20, v6);
    uint64_t v21 = *(void *)v20;
    uint64_t v22 = *((void *)v20 + 1);
    int v23 = v20[16];
    uint64_t v30 = v66;
    uint64_t v31 = *(void *)(v67 + 8);
    uint64_t v32 = *(void *)(v67 + 16);
    char v33 = *(unsigned char *)(v67 + 24);
    if (v33) {
      uint64_t v32 = 0;
    }
    *uint64_t v66 = *(void *)v67;
    v30[1] = v31;
    v30[2] = v32;
    *((unsigned char *)v30 + 24) = v33;
    uint64_t v34 = updated;
    (*v62)(v30, v63, updated);
    swift_bridgeObjectRetain();
    uint64_t v35 = AppStateUpdateIdentifier.appStateIdentifiers.getter();
    (*v61)(v30, v34);
    uint64_t v71 = *(void *)(v35 + 16);
    if (v71) {
      break;
    }
LABEL_6:
    swift_bridgeObjectRelease();
    uint64_t result = sub_1001C3EC0(v21, v22, v23);
    uint64_t v11 = v59;
    uint64_t v13 = v60;
    uint64_t v17 = v57;
    int64_t v19 = v74;
  }
  uint64_t v37 = *(void *)(v35 + 32);
  uint64_t v36 = *(void *)(v35 + 40);
  char v38 = *(unsigned char *)(v35 + 48);
  swift_bridgeObjectRetain();
  sub_1001C3ED0(v37, v36, v38);
  uint64_t v75 = v22;
  int v76 = v23;
  char v39 = static StoreAppIdentifier.== infix(_:_:)();
  sub_1001C3EC0(v37, v36, v38);
  uint64_t v17 = v21;
  uint64_t v40 = v71;
  if (v39) {
    goto LABEL_40;
  }
  if (v71 == 1) {
    goto LABEL_5;
  }
  uint64_t v41 = *(void *)(v35 + 56);
  uint64_t v42 = *(void *)(v35 + 64);
  char v43 = *(unsigned char *)(v35 + 72);
  sub_1001C3ED0(v41, v42, v43);
  char v44 = static StoreAppIdentifier.== infix(_:_:)();
  uint64_t result = sub_1001C3EC0(v41, v42, v43);
  if (v44) {
    goto LABEL_40;
  }
  if (v40 == 2)
  {
LABEL_5:
    swift_bridgeObjectRelease();
    uint64_t v6 = v55;
    uint64_t v7 = v54;
    uint64_t v20 = v56;
    uint64_t v21 = v17;
    uint64_t v22 = v75;
    LOBYTE(v23) = v76;
    goto LABEL_6;
  }
  uint64_t v45 = (char *)(v35 + 96);
  uint64_t v46 = 2;
  while (1)
  {
    uint64_t v47 = v46 + 1;
    if (__OFADD__(v46, 1)) {
      break;
    }
    char v48 = *v45;
    uint64_t v50 = *((void *)v45 - 2);
    uint64_t v49 = *((void *)v45 - 1);
    sub_1001C3ED0(v50, v49, *v45);
    char v51 = static StoreAppIdentifier.== infix(_:_:)();
    uint64_t result = sub_1001C3EC0(v50, v49, v48);
    if (v51) {
      goto LABEL_40;
    }
    ++v46;
    v45 += 24;
    if (v47 == v40) {
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_10056E904(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v5 = v4;
  int v8 = a4;
  uint64_t v9 = type metadata accessor for MessageRegistration();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  int v72 = (char *)&v64 - v14;
  uint64_t v15 = (uint64_t *)((char *)v5 + *(int *)(type metadata accessor for RegisteredXPCClient() + 24));
  uint64_t v16 = v15[1];
  switch(v16)
  {
    case 0:
      uint64_t result = 0;
      if (v8 == 255 || (v8 & 1) == 0) {
        return result;
      }
      goto LABEL_19;
    case 1:
      if (v8 == 255) {
        return 0;
      }
      goto LABEL_19;
    case 2:
    case 4:
      goto LABEL_19;
    case 3:
      if (v8 == 255) {
        goto LABEL_19;
      }
      int64_t v70 = v13;
      if (v8)
      {
        int64_t v18 = &type metadata for WebDistributor;
        unint64_t v19 = sub_1002BEA38();
      }
      else
      {
        int64_t v18 = &type metadata for NativeDistributor;
        unint64_t v19 = sub_1002F9EF8();
      }
      LODWORD(v83) = v8 & 1;
      int64_t v85 = v18;
      unint64_t v86 = v19;
      *(void *)&long long v84 = a2;
      *((void *)&v84 + 1) = a3;
      sub_10018B164(&v84, (uint64_t)v87);
      uint64_t v23 = v88;
      uint64_t v22 = v89;
      uint64_t v82 = sub_10018AC60(v87, v88);
      unint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 48);
      sub_1001C617C();
      char v25 = v24(v23, v22);
      sub_100014524((uint64_t)v87);
      uint64_t v13 = v70;
      if (v25) {
        goto LABEL_19;
      }
      return 0;
    default:
      if (v8) {
        return 0;
      }
      if (*v15 != a2 || v16 != a3)
      {
        char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = 0;
        if ((v21 & 1) == 0) {
          return result;
        }
      }
LABEL_19:
      uint64_t updated = AppStateUpdateIdentifier.appStateIdentifiers.getter();
      uint64_t v27 = *v5;
      uint64_t v30 = *(void *)(*v5 + 56);
      uint64_t v29 = *v5 + 56;
      uint64_t v28 = v30;
      uint64_t v31 = 1 << *(unsigned char *)(v27 + 32);
      uint64_t v32 = -1;
      if (v31 < 64) {
        uint64_t v32 = ~(-1 << v31);
      }
      unint64_t v83 = v32 & v28;
      int64_t v79 = (unint64_t)(v31 + 63) >> 6;
      char v33 = v10 + 16;
      uint64_t v34 = v10 + 32;
      uint64_t v35 = v10 + 88;
      int v80 = enum case for MessageRegistration.appStateChange(_:);
      int v78 = enum case for MessageRegistration.appCatalog(_:);
      int v66 = enum case for MessageRegistration.globalAppProgress(_:);
      int v65 = enum case for MessageRegistration.logging(_:);
      unint64_t v77 = (void (**)(char *, uint64_t))(v10 + 96);
      swift_bridgeObjectRetain();
      int64_t v36 = 0;
      uint64_t v64 = (char *)(updated + 96);
      uint64_t v37 = v72;
      uint64_t v69 = v9;
      uint64_t v68 = v10;
      int64_t v70 = v13;
      uint64_t v71 = v27;
      uint64_t v76 = updated;
      uint64_t v67 = v29;
      uint64_t v74 = v10 + 32;
      uint64_t v75 = v10 + 16;
      uint64_t v73 = v10 + 88;
      break;
  }
  while (v83)
  {
    unint64_t v40 = __clz(__rbit64(v83));
    v83 &= v83 - 1;
    int64_t v81 = v36;
    unint64_t v41 = v40 | (v36 << 6);
LABEL_40:
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v37, *(void *)(v27 + 48) + *(void *)(v10 + 72) * v41, v9);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v37, v9);
    int v46 = (*(uint64_t (**)(char *, uint64_t))(v10 + 88))(v13, v9);
    if (v46 == v80)
    {
      (*v77)(v13, v9);
      uint64_t v34 = *(void *)v13;
      uint64_t v38 = *((void *)v13 + 1);
      char v39 = v13[16];
      uint64_t v82 = *(void **)(updated + 16);
      if (v82)
      {
        uint64_t v48 = *(void *)(updated + 32);
        uint64_t v47 = *(void *)(updated + 40);
        char v49 = *(unsigned char *)(updated + 48);
        uint64_t v50 = v38;
        char v51 = v39;
        swift_bridgeObjectRetain();
        sub_1001C3ED0(v48, v47, v49);
        uint64_t v35 = v50;
        char v33 = v51;
        char v52 = static StoreAppIdentifier.== infix(_:_:)();
        sub_1001C3EC0(v48, v47, v49);
        if (v52) {
          goto LABEL_55;
        }
        if (v82 != (void *)1)
        {
          uint64_t v53 = *(void *)(v76 + 56);
          uint64_t v54 = *(void *)(v76 + 64);
          char v55 = *(unsigned char *)(v76 + 72);
          sub_1001C3ED0(v53, v54, v55);
          char v56 = static StoreAppIdentifier.== infix(_:_:)();
          sub_1001C3EC0(v53, v54, v55);
          if (v56) {
            goto LABEL_55;
          }
          if (v82 != (void *)2)
          {
            uint64_t v57 = v64;
            uint64_t v58 = 2;
            while (1)
            {
              int64_t v59 = (void *)(v58 + 1);
              if (__OFADD__(v58, 1)) {
                break;
              }
              char v60 = *v57;
              uint64_t v62 = *((void *)v57 - 2);
              uint64_t v61 = *((void *)v57 - 1);
              sub_1001C3ED0(v62, v61, *v57);
              char v63 = static StoreAppIdentifier.== infix(_:_:)();
              sub_1001C3EC0(v62, v61, v60);
              if (v63) {
                goto LABEL_55;
              }
              ++v58;
              v57 += 24;
              if (v59 == v82) {
                goto LABEL_22;
              }
            }
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
            JUMPOUT(0x10056F028);
          }
        }
LABEL_22:
        uint64_t updated = v76;
        swift_bridgeObjectRelease();
        uint64_t v9 = v69;
        uint64_t v10 = v68;
        uint64_t v13 = v70;
        uint64_t v37 = v72;
        uint64_t v27 = v71;
        uint64_t v29 = v67;
        uint64_t v38 = v35;
        char v39 = v33;
      }
      sub_1001C3EC0(v34, v38, v39);
      uint64_t v34 = v74;
      char v33 = v75;
      uint64_t v35 = v73;
      int64_t v36 = v81;
    }
    else
    {
      int64_t v36 = v81;
      if (v46 != v78)
      {
        if (v46 == v66)
        {
          swift_bridgeObjectRelease();
LABEL_56:
          swift_release();
          return 1;
        }
        if (v46 != v65)
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_55:
          swift_bridgeObjectRelease();
          sub_1001C3EC0(v34, v35, v33);
          swift_bridgeObjectRelease();
          goto LABEL_56;
        }
      }
    }
  }
  int64_t v42 = v36 + 1;
  if (__OFADD__(v36, 1)) {
    goto LABEL_62;
  }
  if (v42 < v79)
  {
    unint64_t v43 = *(void *)(v29 + 8 * v42);
    int64_t v44 = v36 + 1;
    if (!v43)
    {
      int64_t v44 = v36 + 2;
      if (v36 + 2 >= v79) {
        goto LABEL_57;
      }
      unint64_t v43 = *(void *)(v29 + 8 * v44);
      if (!v43)
      {
        int64_t v44 = v36 + 3;
        if (v36 + 3 >= v79) {
          goto LABEL_57;
        }
        unint64_t v43 = *(void *)(v29 + 8 * v44);
        if (!v43)
        {
          uint64_t v45 = v36 + 4;
          if (v36 + 4 >= v79) {
            goto LABEL_57;
          }
          unint64_t v43 = *(void *)(v29 + 8 * v45);
          if (!v43)
          {
            while (1)
            {
              int64_t v44 = v45 + 1;
              if (__OFADD__(v45, 1)) {
                goto LABEL_63;
              }
              if (v44 >= v79) {
                goto LABEL_57;
              }
              unint64_t v43 = *(void *)(v29 + 8 * v44);
              ++v45;
              if (v43) {
                goto LABEL_39;
              }
            }
          }
          int64_t v44 = v36 + 4;
        }
      }
    }
LABEL_39:
    unint64_t v83 = (v43 - 1) & v43;
    int64_t v81 = v44;
    unint64_t v41 = __clz(__rbit64(v43)) + (v44 << 6);
    goto LABEL_40;
  }
LABEL_57:
  swift_bridgeObjectRelease();
  swift_release();
  return 0;
}

uint64_t sub_10056F03C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, BOOL *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  uint64_t v10 = sub_10056E0E0(v16);
  uint64_t v12 = v11;
  uint64_t v13 = type metadata accessor for RegisteredXPCClient();
  int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13);
  if (!v14) {
    sub_100571BBC(a2);
  }
  ((void (*)(void *, void))v10)(v16, 0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *a3 = v14 != 0;
  return result;
}

uint64_t sub_10056F1D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[12] = a5;
  v6[13] = a6;
  v6[10] = a3;
  v6[11] = a4;
  v6[9] = a2;
  sub_1000172F8(&qword_10065B220);
  v6[14] = swift_task_alloc();
  v6[15] = swift_task_alloc();
  uint64_t v7 = *(void *)(type metadata accessor for RegisteredXPCClient() - 8);
  v6[16] = v7;
  v6[17] = *(void *)(v7 + 64);
  v6[18] = swift_task_alloc();
  return _swift_task_switch(sub_10056F2DC, 0, 0);
}

uint64_t sub_10056F2DC()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 128);
    unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v5 = v1 + v4;
    uint64_t v28 = *(void *)(v3 + 72);
    unint64_t v29 = v4;
    unint64_t v27 = (*(void *)(v0 + 136) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    uint64_t v6 = &qword_10065B220;
    while (1)
    {
      uint64_t v31 = v2;
      uint64_t v7 = *(void *)(v0 + 144);
      uint64_t v8 = *(void *)(v0 + 120);
      uint64_t v32 = *(void *)(v0 + 112);
      uint64_t v9 = v6;
      uint64_t v10 = *(void *)(v0 + 96);
      uint64_t v11 = *(void *)(v0 + 104);
      uint64_t v12 = *(void *)(v0 + 88);
      uint64_t v30 = v5;
      sub_1005758D4(v5, v7, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 16) = 0;
      int v14 = (void *)(v13 + 16);
      *(void *)(v13 + 24) = 0;
      sub_10057593C(v7, v13 + v29, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
      *(void *)(v13 + v27) = v12;
      uint64_t v15 = (void *)(v13 + ((v27 + 15) & 0xFFFFFFFFFFFFFFF8));
      *uint64_t v15 = v10;
      v15[1] = v11;
      uint64_t v6 = v9;
      uint64_t v16 = type metadata accessor for TaskPriority();
      uint64_t v17 = *(void *)(v16 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v8, 1, 1, v16);
      sub_10001733C(v8, v32, v9);
      LODWORD(v8) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v32, 1, v16);
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v18 = *(void *)(v0 + 112);
      if (v8 == 1)
      {
        sub_10001729C(*(void *)(v0 + 112), v6);
        if (!*v14) {
          goto LABEL_8;
        }
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v16);
        if (!*v14)
        {
LABEL_8:
          uint64_t v19 = 0;
          uint64_t v21 = 0;
          goto LABEL_9;
        }
      }
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v19 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v21 = v20;
      swift_unknownObjectRelease();
LABEL_9:
      uint64_t v22 = **(void **)(v0 + 72);
      uint64_t v23 = swift_allocObject();
      *(void *)(v23 + 16) = &unk_100667718;
      *(void *)(v23 + 24) = v13;
      uint64_t v24 = v21 | v19;
      if (v21 | v19)
      {
        uint64_t v24 = v0 + 16;
        *(void *)(v0 + 16) = 0;
        *(void *)(v0 + 24) = 0;
        *(void *)(v0 + 32) = v19;
        *(void *)(v0 + 40) = v21;
      }
      *(void *)(v0 + 48) = 1;
      *(void *)(v0 + 56) = v24;
      *(void *)(v0 + 64) = v22;
      swift_task_create();
      swift_release();
      uint64_t v5 = v30 + v28;
      uint64_t v2 = v31 - 1;
      if (v31 == 1)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v25 = *(uint64_t (**)(void))(v0 + 8);
  return v25();
}

uint64_t sub_10056F664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[4] = a5;
  v6[5] = a6;
  _OWORD v6[2] = a3;
  v6[3] = a4;
  uint64_t v7 = type metadata accessor for XPCClientMessage();
  v6[6] = v7;
  v6[7] = *(void *)(v7 - 8);
  v6[8] = swift_task_alloc();
  return _swift_task_switch(sub_10056F728, 0, 0);
}

uint64_t sub_10056F728()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = type metadata accessor for RegisteredXPCClient();
  v0[9] = v2;
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(v2 + 24));
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  uint64_t v6 = (void *)swift_task_alloc();
  v0[10] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10056F7E4;
  uint64_t v7 = v0[4];
  uint64_t v8 = v0[5];
  uint64_t v9 = v0[3];
  return sub_10050057C(v9, v7, v8, v5, v4);
}

uint64_t sub_10056F7E4(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_errorRelease();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 88) = a1;
    return _swift_task_switch(sub_10056F940, 0, 0);
  }
}

uint64_t sub_10056F940()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[7];
  swift_getObjectType();
  static XPCClientMessage.appCatalog(_:)();
  swift_bridgeObjectRelease();
  XPCClientProtocol.handleMessage(_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10056FA10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[14] = a7;
  v8[15] = a8;
  v8[12] = a5;
  v8[13] = a6;
  v8[10] = a3;
  v8[11] = a4;
  v8[9] = a2;
  sub_1000172F8(&qword_10065B220);
  unsigned char v8[16] = swift_task_alloc();
  v8[17] = swift_task_alloc();
  uint64_t v9 = *(void *)(type metadata accessor for RegisteredXPCClient() - 8);
  v8[18] = v9;
  v8[19] = *(void *)(v9 + 64);
  v8[20] = swift_task_alloc();
  return _swift_task_switch(sub_10056FB20, 0, 0);
}

uint64_t sub_10056FB20()
{
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  type metadata accessor for MarketplaceKitError();
  sub_100575EA8(&qword_100666550, (void (*)(uint64_t))&type metadata accessor for MarketplaceKitError);
  uint64_t v1 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  unint64_t v3 = v2;
  swift_release();
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(v0 + 144);
    unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v8 = v4 + v7;
    uint64_t v34 = *(void *)(v6 + 72);
    unint64_t v35 = v7;
    unint64_t v33 = (*(void *)(v0 + 152) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v32 = (v33 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v31 = (v32 + 23) & 0xFFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    uint64_t v30 = v1;
    do
    {
      uint64_t v37 = v5;
      uint64_t v9 = *(void *)(v0 + 160);
      uint64_t v10 = *(void *)(v0 + 136);
      unint64_t v11 = v3;
      uint64_t v13 = *(void *)(v0 + 112);
      uint64_t v12 = *(void *)(v0 + 120);
      uint64_t v14 = *(void *)(v0 + 96);
      uint64_t v15 = *(void *)(v0 + 104);
      uint64_t v38 = *(void *)(v0 + 128);
      uint64_t v36 = v8;
      sub_1005758D4(v8, v9, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = 0;
      *(void *)(v16 + 24) = 0;
      sub_10057593C(v9, v16 + v35, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
      *(void *)(v16 + v33) = v14;
      uint64_t v17 = (void *)(v16 + v32);
      *uint64_t v17 = v15;
      v17[1] = v13;
      unint64_t v3 = v11;
      *(void *)(v16 + v31) = v12;
      uint64_t v1 = v30;
      uint64_t v18 = (uint64_t *)(v16 + ((v31 + 15) & 0xFFFFFFFFFFFFFFF8));
      uint64_t *v18 = v30;
      v18[1] = v11;
      uint64_t v19 = type metadata accessor for TaskPriority();
      uint64_t v20 = *(void *)(v19 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v10, 1, 1, v19);
      sub_10001733C(v10, v38, &qword_10065B220);
      LODWORD(v11) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v38, 1, v19);
      swift_retain();
      swift_bridgeObjectRetain();
      sub_10018B2A8(v30, v3);
      uint64_t v21 = *(void *)(v0 + 128);
      if (v11 == 1)
      {
        sub_10001729C(*(void *)(v0 + 128), &qword_10065B220);
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v19);
      }
      if (*(void *)(v16 + 16))
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v22 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v24 = v23;
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v24 = 0;
      }
      uint64_t v25 = **(void **)(v0 + 72);
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = &unk_100667778;
      *(void *)(v26 + 24) = v16;
      uint64_t v27 = v24 | v22;
      if (v24 | v22)
      {
        uint64_t v27 = v0 + 16;
        *(void *)(v0 + 16) = 0;
        *(void *)(v0 + 24) = 0;
        *(void *)(v0 + 32) = v22;
        *(void *)(v0 + 40) = v24;
      }
      *(void *)(v0 + 48) = 1;
      *(void *)(v0 + 56) = v27;
      *(void *)(v0 + 64) = v25;
      swift_task_create();
      swift_release();
      uint64_t v8 = v36 + v34;
      uint64_t v5 = v37 - 1;
    }
    while (v37 != 1);
    swift_bridgeObjectRelease();
  }
  sub_10018AE44(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

uint64_t sub_10056FF98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[8] = a8;
  v8[9] = v13;
  v8[6] = a6;
  v8[7] = a7;
  void v8[4] = a4;
  v8[5] = a5;
  v8[3] = a3;
  uint64_t v9 = type metadata accessor for XPCClientMessage();
  v8[10] = v9;
  v8[11] = *(void *)(v9 - 8);
  v8[12] = swift_task_alloc();
  sub_1000172F8(&qword_100666520);
  v8[13] = swift_task_alloc();
  v8[14] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for XPCApp();
  v8[15] = v10;
  unsigned char v8[16] = *(void *)(v10 - 8);
  v8[17] = swift_task_alloc();
  v8[18] = swift_task_alloc();
  v8[19] = swift_task_alloc();
  v8[20] = swift_task_alloc();
  return _swift_task_switch(sub_100570130, 0, 0);
}

uint64_t sub_100570130()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = type metadata accessor for RegisteredXPCClient();
  v0[21] = v2;
  unint64_t v3 = (uint64_t *)(v1 + *(int *)(v2 + 24));
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  uint64_t v6 = (void *)swift_task_alloc();
  v0[22] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1005701EC;
  uint64_t v7 = v0[5];
  uint64_t v8 = v0[6];
  uint64_t v9 = v0[4];
  return sub_10050057C(v9, v7, v8, v5, v4);
}

uint64_t sub_1005701EC(uint64_t a1)
{
  *(void *)(*(void *)v2 + 184) = a1;
  swift_task_dealloc();
  if (v1)
  {
    swift_errorRelease();
    unint64_t v3 = sub_1005708D4;
  }
  else
  {
    unint64_t v3 = sub_100570308;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100570308()
{
  unint64_t v1 = v0[23];
  v0[2] = v1;
  uint64_t v64 = *(void *)(v1 + 16);
  if (v64)
  {
    uint64_t v2 = v0[16];
    unint64_t v3 = *(void (**)(uint64_t, unint64_t, uint64_t))(v2 + 16);
    v2 += 16;
    unint64_t v4 = v1 + ((*(unsigned __int8 *)(v2 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 64));
    uint64_t v57 = *(void *)(v2 + 56);
    uint64_t v61 = v3;
    uint64_t v5 = (void (**)(uint64_t, uint64_t))(v2 - 8);
    swift_bridgeObjectRetain();
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = v0[20];
      uint64_t v8 = v0[15];
      uint64_t v9 = v0[7];
      v61(v7, v4, v8);
      uint64_t v10 = XPCApp.appleItemID.getter();
      uint64_t v11 = *v5;
      (*v5)(v7, v8);
      if (v10 == v9) {
        break;
      }
      ++v6;
      v4 += v57;
      if (v64 == v6)
      {
        uint64_t v12 = v0 + 23;
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
    }
    uint64_t v13 = v0[20];
    uint64_t v14 = v0[15];
    swift_bridgeObjectRelease();
    uint64_t v12 = v0 + 2;
    sub_10054EEF0(v6, v13);
    v11(v13, v14);
LABEL_7:
    unint64_t v1 = *v12;
  }
  unint64_t v58 = v0[19];
  uint64_t v65 = v0[18];
  uint64_t v15 = v0[16];
  uint64_t v62 = v0[15];
  uint64_t v16 = v0[13];
  uint64_t v17 = v0[14];
  uint64_t v18 = v0[8];
  unint64_t v55 = v0[9];
  uint64_t v19 = type metadata accessor for XPCApp.Metadata();
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56);
  v20(v17, 1, 1, v19);
  uint64_t v53 = v20;
  uint64_t v54 = v19;
  v20(v16, 1, 1, v19);
  swift_bridgeObjectRetain();
  sub_10018B2A8(v18, v55);
  XPCApp.init(appleItemID:bundleID:installedMetadata:installingMetadata:installErrorData:)();
  uint64_t v21 = v62;
  char v63 = *(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 16);
  v63(v65, v58, v21);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v1 = sub_10028FBC0(0, *(void *)(v1 + 16) + 1, 1, v1);
  }
  unint64_t v23 = *(void *)(v1 + 16);
  unint64_t v22 = *(void *)(v1 + 24);
  if (v23 >= v22 >> 1) {
    unint64_t v1 = sub_10028FBC0(v22 > 1, v23 + 1, 1, v1);
  }
  uint64_t v24 = v0[18];
  uint64_t v25 = v0[15];
  uint64_t v26 = v0[16];
  uint64_t v28 = v0[11];
  uint64_t v27 = v0[12];
  uint64_t v29 = v0[10];
  *(void *)(v1 + 16) = v23 + 1;
  uint64_t v30 = *(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 32);
  v26 += 32;
  unint64_t v31 = (*(unsigned __int8 *)(v26 + 48) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 48);
  uint64_t v56 = *(void *)(v26 + 40);
  uint64_t v59 = v29;
  v30(v1 + v31 + v56 * v23, v24, v25);
  swift_getObjectType();
  swift_bridgeObjectRetain();
  static XPCClientMessage.appCatalog(_:)();
  swift_bridgeObjectRelease();
  XPCClientProtocol.handleMessage(_:)();
  unint64_t v32 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
  v32(v27, v59);
  uint64_t v33 = *(void *)(v1 + 16);
  uint64_t v34 = (void (**)(uint64_t, uint64_t))(v26 - 24);
  if (v33)
  {
    char v52 = v32;
    swift_bridgeObjectRetain();
    unint64_t v35 = 0;
    char v60 = v34;
    while (1)
    {
      uint64_t v36 = v0[20];
      uint64_t v37 = v0[15];
      unint64_t v38 = v1;
      unint64_t v39 = v1 + v31;
      uint64_t v40 = v0[7];
      v63(v36, v39, v37);
      uint64_t v41 = XPCApp.appleItemID.getter();
      int64_t v42 = *v60;
      (*v60)(v36, v37);
      if (v41 == v40) {
        break;
      }
      ++v35;
      v31 += v56;
      unint64_t v1 = v38;
      if (v33 == v35)
      {
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
    }
    uint64_t v44 = v0[13];
    uint64_t v43 = v0[14];
    unint64_t v45 = v38;
    swift_bridgeObjectRelease();
    v53(v43, 1, 1, v54);
    v53(v44, 1, 1, v54);
    XPCApp.init(appleItemID:bundleID:installedMetadata:installingMetadata:installErrorData:)();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = sub_10055AD80(v38);
      unint64_t v45 = result;
    }
    if (v35 >= *(void *)(v45 + 16))
    {
      __break(1u);
      return result;
    }
    uint64_t v47 = v0[19];
    uint64_t v48 = v0[15];
    uint64_t v49 = v0[12];
    uint64_t v50 = v0[10];
    (*(void (**)(unint64_t, void, uint64_t))(v0[16] + 40))(v45 + v31, v0[17], v48);
    swift_getObjectType();
    static XPCClientMessage.appCatalog(_:)();
    swift_bridgeObjectRelease();
    XPCClientProtocol.handleMessage(_:)();
    v52(v49, v50);
    v42(v47, v48);
  }
  else
  {
    int64_t v42 = *v34;
LABEL_18:
    v42(v0[19], v0[15]);
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v51 = (uint64_t (*)(void))v0[1];
  return v51();
}

uint64_t sub_1005708D4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100570980@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, void *a4@<X8>)
{
  sub_1001C6164(a1, a2, a3);
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = sub_1005753BC(v8, a1, a2, a3);
  uint64_t result = sub_10018ACA4(a1, a2, a3);
  *a4 = v9;
  return result;
}

uint64_t type metadata accessor for XPCClientRegistry()
{
  return self;
}

uint64_t sub_100570A34(int *a1)
{
  unint64_t v4 = (uint64_t (*)(void))((char *)a1 + *a1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100006BEC;
  return v4();
}

uint64_t sub_100570B00()
{
  uint64_t v1 = type metadata accessor for RegisteredXPCClient();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + *(int *)(v1 + 20);
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  if (*(void *)(v0 + v3 + *(int *)(v1 + 24) + 8) >= 5uLL) {
    swift_bridgeObjectRelease();
  }
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100570C54()
{
  uint64_t v2 = *(void *)(type metadata accessor for RegisteredXPCClient() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = v0 + v3;
  uint64_t v9 = (uint64_t *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v12;
  *uint64_t v12 = v1;
  v12[1] = sub_1000176B4;
  return sub_10056F664(v5, v6, v8, v7, v10, v11);
}

uint64_t sub_100570D84()
{
  uint64_t v2 = *(int **)(v0 + 16);
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = sub_1000176B4;
  unint64_t v4 = (uint64_t (*)(int *))((char *)&dword_100667710 + dword_100667710);
  return v4(v2);
}

uint64_t sub_100570E30(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    id v5 = a1;
    char v6 = __CocoaSet.contains(_:)();

    if (v6)
    {
      uint64_t v7 = sub_1005712D8();
      swift_bridgeObjectRelease();
      return v7;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  Swift::Int v8 = *(void *)(v4 + 40);
  swift_bridgeObjectRetain();
  Swift::Int v9 = NSObject._rawHashValue(seed:)(v8);
  uint64_t v10 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v11 = v9 & ~v10;
  if (((*(void *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    goto LABEL_12;
  }
  type metadata accessor for InstallCoordinationInstallObserver.Observer(0);
  id v12 = *(id *)(*(void *)(v4 + 48) + 8 * v11);
  char v13 = static NSObject.== infix(_:_:)();

  if ((v13 & 1) == 0)
  {
    uint64_t v14 = ~v10;
    do
    {
      unint64_t v11 = (v11 + 1) & v14;
      if (((*(void *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
        goto LABEL_12;
      }
      id v15 = *(id *)(*(void *)(v4 + 48) + 8 * v11);
      char v16 = static NSObject.== infix(_:_:)();
    }
    while ((v16 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = *v2;
  uint64_t v20 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10032F2D4();
    uint64_t v18 = v20;
  }
  uint64_t v7 = *(void *)(*(void *)(v18 + 48) + 8 * v11);
  sub_100471558(v11);
  *uint64_t v2 = v20;
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_100570FF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for MessageRegistration();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::Int v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100575EA8(&qword_1006607F0, (void (*)(uint64_t))&type metadata accessor for MessageRegistration);
  swift_bridgeObjectRetain();
  uint64_t v31 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v13 = v9;
  uint64_t v30 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v26 = v2;
    uint64_t v27 = v6;
    uint64_t v28 = a2;
    uint64_t v29 = ~v11;
    char v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v15 = v6 + 16;
    uint64_t v14 = v16;
    uint64_t v17 = *(void *)(v15 + 56);
    while (1)
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v13 + 48) + v17 * v12, v5);
      sub_100575EA8(&qword_1006607F8, (void (*)(uint64_t))&type metadata accessor for MessageRegistration);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v8, v5);
      if (v19) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v29;
      uint64_t v13 = v18;
      if (((*(void *)(v30 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = 1;
        uint64_t v6 = v27;
        a2 = v28;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v21 = v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v21;
    uint64_t v32 = *v21;
    *uint64_t v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10032F868();
      uint64_t v23 = v32;
    }
    uint64_t v6 = v27;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 32))(v28, *(void *)(v23 + 48) + v17 * v12, v5);
    sub_100471998(v12);
    *uint64_t v21 = v32;
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
}

uint64_t sub_1005712D8()
{
  uint64_t v1 = v0;
  swift_bridgeObjectRelease();
  uint64_t v2 = __CocoaSet.count.getter();
  uint64_t v3 = swift_unknownObjectRetain();
  Swift::Int v4 = sub_10032A37C(v3, v2);
  Swift::Int v16 = v4;
  Swift::Int v5 = *(void *)(v4 + 40);
  swift_retain();
  Swift::Int v6 = NSObject._rawHashValue(seed:)(v5);
  uint64_t v7 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v8 = v6 & ~v7;
  if ((*(void *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    type metadata accessor for InstallCoordinationInstallObserver.Observer(0);
    id v9 = *(id *)(*(void *)(v4 + 48) + 8 * v8);
    char v10 = static NSObject.== infix(_:_:)();

    if (v10)
    {
LABEL_6:
      swift_release();
      uint64_t v14 = *(void *)(*(void *)(v4 + 48) + 8 * v8);
      sub_100471558(v8);
      if (static NSObject.== infix(_:_:)())
      {
        *uint64_t v1 = v16;
        return v14;
      }
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v7;
      while (1)
      {
        unint64_t v8 = (v8 + 1) & v11;
        if (((*(void *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
          break;
        }
        id v12 = *(id *)(*(void *)(v4 + 48) + 8 * v8);
        char v13 = static NSObject.== infix(_:_:)();

        if (v13) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

void (*sub_100571464(void *a1, uint64_t a2))(uint64_t a1)
{
  Swift::Int v4 = malloc(0x68uLL);
  *a1 = v4;
  uint64_t v5 = type metadata accessor for UUID();
  v4[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  v4[9] = v6;
  unint64_t v8 = malloc(*(void *)(v6 + 64));
  v4[10] = v8;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(v8, a2, v5);
  v4[11] = sub_1005718A0(v4);
  v4[12] = sub_10057161C(v4 + 4, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  return sub_100571584;
}

void sub_100571584(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 88);
  uint64_t v4 = *(void *)(*(void *)a1 + 72);
  uint64_t v3 = *(void **)(*(void *)a1 + 80);
  uint64_t v5 = *(void *)(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 96))();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  v2(v1, 0);
  free(v3);

  free(v1);
}

void (*sub_10057161C(void *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t v4 = v3;
  unint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  *unint64_t v8 = a2;
  v8[1] = v3;
  uint64_t v9 = sub_1000172F8(&qword_100667790);
  char v10 = malloc(*(void *)(*(void *)(v9 - 8) + 64));
  _OWORD v8[2] = v10;
  uint64_t v11 = *v3;
  unint64_t v13 = sub_10000F800(a2);
  *((unsigned char *)v8 + 32) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v13;
      if (v17)
      {
LABEL_8:
        uint64_t v19 = *(void *)(*v4 + 56);
        uint64_t v20 = type metadata accessor for RegisteredXPCClient();
        uint64_t v21 = *(void *)(v20 - 8);
        sub_10057593C(v19 + *(void *)(v21 + 72) * v13, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
        uint64_t v22 = 0;
LABEL_12:
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v10, v22, 1, v20);
        return sub_100571840;
      }
LABEL_11:
      uint64_t v20 = type metadata accessor for RegisteredXPCClient();
      uint64_t v21 = *(void *)(v20 - 8);
      uint64_t v22 = 1;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      sub_10052EF10();
      goto LABEL_7;
    }
    sub_100529218(v16, a3 & 1);
    unint64_t v23 = sub_10000F800(a2);
    if ((v17 & 1) == (v24 & 1))
    {
      unint64_t v13 = v23;
      v8[3] = v23;
      if (v17) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  type metadata accessor for UUID();
  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_100571840(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void *)(*a1)[2];
  sub_1005718DC((uint64_t)v2, *((unsigned __int8 *)*a1 + 32), (uint64_t *)(*a1)[1], (*a1)[3], **a1);
  sub_10001729C((uint64_t)v2, &qword_100667790);
  free(v2);

  free(v1);
}

uint64_t (*sub_1005718A0(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000;
  return sub_1005718D0;
}

uint64_t sub_1005718D0(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

unint64_t sub_1005718DC(uint64_t a1, int a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v23 = a5;
  unint64_t v25 = a4;
  int v26 = a2;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1000172F8(&qword_100667790);
  __chkstk_darwin(v10 - 8);
  char v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for RegisteredXPCClient();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  char v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v23 - v18;
  sub_100017238(a1, (uint64_t)v12, &qword_100667790);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    unint64_t result = sub_10001729C((uint64_t)v12, &qword_100667790);
    if (v26)
    {
      int64_t v21 = v25;
      swift_arrayDestroy();
      return sub_100430CE8(v21, *a3);
    }
  }
  else
  {
    sub_10057593C((uint64_t)v12, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
    uint64_t v22 = (void *)*a3;
    if (v26)
    {
      return sub_10057593C((uint64_t)v19, v22[7] + *(void *)(v14 + 72) * v25, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v9, v23, v7);
      sub_10057593C((uint64_t)v19, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
      return sub_1000179F4(v25, (uint64_t)v9, (uint64_t)v17, v22);
    }
  }
  return result;
}

uint64_t sub_100571BBC(uint64_t a1)
{
  uint64_t v3 = sub_1000172F8(&qword_100667788);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for MessageRegistration();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v25 - v12;
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v25 = a1 + 56;
  uint64_t v15 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  uint64_t v28 = v7 + 16;
  int64_t v26 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v27 = v7 + 32;
  uint64_t v18 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v19 = 0;
  while (1)
  {
    if (v17)
    {
      unint64_t v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v21 = v20 | (v19 << 6);
      goto LABEL_6;
    }
    int64_t v22 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v26) {
      return swift_release();
    }
    unint64_t v23 = *(void *)(v25 + 8 * v22);
    ++v19;
    if (!v23)
    {
      int64_t v19 = v22 + 1;
      if (v22 + 1 >= v26) {
        return swift_release();
      }
      unint64_t v23 = *(void *)(v25 + 8 * v19);
      if (!v23)
      {
        int64_t v19 = v22 + 2;
        if (v22 + 2 >= v26) {
          return swift_release();
        }
        unint64_t v23 = *(void *)(v25 + 8 * v19);
        if (!v23)
        {
          int64_t v19 = v22 + 3;
          if (v22 + 3 >= v26) {
            return swift_release();
          }
          unint64_t v23 = *(void *)(v25 + 8 * v19);
          if (!v23) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v17 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v19 << 6);
LABEL_6:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v13, *(void *)(v18 + 48) + *(void *)(v7 + 72) * v21, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v13, v6);
    sub_100570FF8((uint64_t)v10, (uint64_t)v5);
    sub_10001729C((uint64_t)v5, &qword_100667788);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  int64_t v24 = v22 + 4;
  if (v24 >= v26) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v25 + 8 * v24);
  if (v23)
  {
    int64_t v19 = v24;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v19 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v19 >= v26) {
      return swift_release();
    }
    unint64_t v23 = *(void *)(v25 + 8 * v19);
    ++v24;
    if (v23) {
      goto LABEL_23;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100571EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[9] = a5;
  v6[10] = a6;
  v6[7] = a3;
  v6[8] = a4;
  v6[5] = a1;
  v6[6] = a2;
  sub_1000172F8(&qword_10065C958);
  v6[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for XPCClientMessage();
  v6[12] = v7;
  v6[13] = *(void *)(v7 - 8);
  v6[14] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for MessageRegistration();
  v6[15] = v8;
  v6[16] = *(void *)(v8 - 8);
  v6[17] = swift_task_alloc();
  v6[18] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for RegisteredXPCClient();
  v6[19] = v9;
  v6[20] = *(void *)(v9 - 8);
  v6[21] = swift_task_alloc();
  v6[22] = swift_task_alloc();
  sub_1000172F8(&qword_1006677A0);
  v6[23] = swift_task_alloc();
  v6[24] = swift_task_alloc();
  v6[25] = swift_task_alloc();
  return _swift_task_switch(sub_1005720E4, 0, 0);
}

uint64_t sub_1005720E4()
{
  int64_t v70 = v0;
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[13];
  uint64_t v4 = v0[5];
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
  v0[26] = v5;
  v0[27] = (v3 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v5(v1, 1, 1, v2);
  uint64_t v6 = *(os_unfair_lock_s **)(v4 + 16);
  uint64_t v7 = v6 + 4;
  uint64_t v8 = v6 + 6;
  os_unfair_lock_lock(v6 + 6);
  sub_100352424(v7, &v69);
  os_unfair_lock_unlock(v8);
  uint64_t v9 = v69;
  v0[28] = v69;
  char v10 = *(unsigned char *)(v9 + 32);
  *((unsigned char *)v0 + 320) = v10;
  uint64_t v11 = 1 << v10;
  uint64_t v12 = *(void *)(v9 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  uint64_t result = swift_beginAccess();
  int64_t v16 = 0;
  *((_DWORD *)v0 + 78) = enum case for MessageRegistration.appCatalog(_:);
  *((_DWORD *)v0 + 79) = enum case for ManagedAppDistributionError.unrecoverableError(_:);
  uint64_t v68 = v0;
  if (v14) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v21 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
    goto LABEL_39;
  }
  int64_t v22 = (unint64_t)((1 << *((unsigned char *)v0 + 320)) + 63) >> 6;
  uint64_t result = v0[28];
  if (v21 < v22)
  {
    uint64_t v23 = result + 64;
    unint64_t v24 = *(void *)(result + 64 + 8 * v21);
    ++v16;
    if (v24) {
      goto LABEL_22;
    }
    int64_t v16 = v21 + 1;
    if (v21 + 1 < v22)
    {
      unint64_t v24 = *(void *)(v23 + 8 * v16);
      if (v24) {
        goto LABEL_22;
      }
      int64_t v16 = v21 + 2;
      if (v21 + 2 < v22)
      {
        unint64_t v24 = *(void *)(v23 + 8 * v16);
        if (v24) {
          goto LABEL_22;
        }
        int64_t v16 = v21 + 3;
        if (v21 + 3 < v22)
        {
          unint64_t v24 = *(void *)(v23 + 8 * v16);
          if (v24) {
            goto LABEL_22;
          }
          int64_t v25 = v21 + 4;
          if (v25 < v22)
          {
            unint64_t v24 = *(void *)(v23 + 8 * v25);
            int64_t v16 = v25;
            if (!v24)
            {
              while (1)
              {
                int64_t v16 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  break;
                }
                if (v16 >= v22) {
                  goto LABEL_32;
                }
                unint64_t v24 = *(void *)(v23 + 8 * v16);
                ++v25;
                if (v24) {
                  goto LABEL_22;
                }
              }
LABEL_39:
              __break(1u);
              return result;
            }
LABEL_22:
            uint64_t v19 = (v24 - 1) & v24;
            unint64_t v20 = __clz(__rbit64(v24)) + (v16 << 6);
            while (1)
            {
              unint64_t v65 = v19;
              int64_t v66 = v16;
              v0[29] = v19;
              v0[30] = v16;
              uint64_t v26 = *((unsigned int *)v0 + 78);
              uint64_t v28 = (uint64_t *)v0[21];
              uint64_t v27 = v0[22];
              uint64_t v29 = v0[20];
              uint64_t v30 = v0[18];
              uint64_t v31 = v68[16];
              uint64_t v32 = v68[15];
              sub_1005758D4(*(void *)(result + 56) + *(void *)(v29 + 72) * v20, v27, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
              sub_10057593C(v27, (uint64_t)v28, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
              uint64_t v33 = *v28;
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 104))(v30, v26, v32);
              uint64_t v0 = v68;
              if (*(void *)(v33 + 16)
                && (sub_100575EA8(&qword_1006607F0, (void (*)(uint64_t))&type metadata accessor for MessageRegistration), v34 = dispatch thunk of Hashable._rawHashValue(seed:)(), uint64_t v35 = -1 << *(unsigned char *)(v33 + 32), v36 = v34 & ~v35, ((*(void *)(v33 + 56 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36) & 1) != 0))
              {
                uint64_t v67 = ~v35;
                uint64_t v37 = v68[16];
                uint64_t v38 = *(void *)(v37 + 72);
                unint64_t v39 = *(void (**)(uint64_t, unint64_t, uint64_t))(v37 + 16);
                while (1)
                {
                  uint64_t v40 = v0[17];
                  uint64_t v42 = v0[15];
                  uint64_t v41 = v0[16];
                  v39(v40, *(void *)(v33 + 48) + v36 * v38, v42);
                  sub_100575EA8(&qword_1006607F8, (void (*)(uint64_t))&type metadata accessor for MessageRegistration);
                  char v43 = dispatch thunk of static Equatable.== infix(_:_:)();
                  uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
                  v44(v40, v42);
                  if (v43) {
                    break;
                  }
                  uint64_t v0 = v68;
                  unint64_t v36 = (v36 + 1) & v67;
                  if (((*(void *)(v33 + 56 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36) & 1) == 0) {
                    goto LABEL_6;
                  }
                }
                uint64_t v46 = v68[24];
                uint64_t v45 = v68[25];
                uint64_t v47 = v68[21];
                uint64_t v48 = v68[19];
                uint64_t v49 = v68[12];
                uint64_t v50 = v68[13];
                v44(v68[18], v68[15]);
                v68[31] = *(void *)(v47 + *(int *)(v48 + 28));
                sub_100017238(v45, v46, &qword_1006677A0);
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v46, 1, v49) == 1)
                {
                  uint64_t v56 = v68[11];
                  sub_10001729C(v68[24], &qword_1006677A0);
                  uint64_t v57 = type metadata accessor for ManagedAppDistributionError();
                  v68[32] = v57;
                  uint64_t v58 = *(void *)(v57 - 8);
                  v68[33] = v58;
                  uint64_t v59 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56);
                  v68[34] = v59;
                  v68[35] = (v58 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
                  v59(v56, 1, 1, v57);
                  char v60 = (void *)swift_task_alloc();
                  v68[36] = v60;
                  void *v60 = v68;
                  v60[1] = sub_100572800;
                  uint64_t v61 = v68[9];
                  uint64_t v62 = v68[10];
                  uint64_t v63 = v68[8];
                  uint64_t v64 = v68[7];
                  return sub_1001AF47C(v64, v63, v61, v62);
                }
                (*(void (**)(void, void, void))(v68[13] + 32))(v68[14], v68[24], v68[12]);
                uint64_t v51 = v68[21];
                uint64_t v52 = v68[14];
                uint64_t v53 = v68[13];
                uint64_t v54 = v68[12];
                swift_getObjectType();
                XPCClientProtocol.handleMessage(_:)();
                (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
                uint64_t v0 = v68;
                uint64_t result = sub_1005759A4(v51, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
                unint64_t v14 = v68[29];
                int64_t v16 = v68[30];
                if (!v14) {
                  goto LABEL_8;
                }
              }
              else
              {
LABEL_6:
                uint64_t v17 = v0[21];
                (*(void (**)(void, void))(v0[16] + 8))(v0[18], v0[15]);
                uint64_t result = sub_1005759A4(v17, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
                unint64_t v14 = v65;
                int64_t v16 = v66;
                if (!v65) {
                  goto LABEL_8;
                }
              }
LABEL_7:
              unint64_t v18 = __clz(__rbit64(v14));
              uint64_t v19 = (v14 - 1) & v14;
              unint64_t v20 = v18 | (v16 << 6);
              uint64_t result = v0[28];
            }
          }
        }
      }
    }
  }
LABEL_32:
  swift_release();
  sub_10001729C(v0[25], &qword_1006677A0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v55 = (uint64_t (*)(void))v0[1];
  return v55();
}

uint64_t sub_100572800(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 296) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100572F74;
  }
  else
  {
    *(void *)(v4 + 304) = a1;
    uint64_t v5 = sub_100572928;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100572928()
{
  uint64_t v1 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[26];
  uint64_t v2 = v0[25];
  uint64_t v3 = v0[23];
  uint64_t v5 = v0[13];
  uint64_t v4 = v0[14];
  uint64_t v7 = v0[11];
  uint64_t v6 = v0[12];
  static XPCClientMessage.managedAppCatalog(apps:error:)();
  swift_bridgeObjectRelease();
  sub_10001729C(v7, &qword_10065C958);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v4, v6);
  v1(v3, 0, 1, v6);
  sub_100575EF0(v3, v2);
  uint64_t v62 = v0;
  while (2)
  {
    uint64_t v8 = v0[21];
    uint64_t v9 = v0[13];
    uint64_t v10 = v0[14];
    uint64_t v11 = v0[12];
    swift_getObjectType();
    XPCClientProtocol.handleMessage(_:)();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    uint64_t result = sub_1005759A4(v8, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
    unint64_t v13 = v0[29];
    for (int64_t i = v0[30]; ; int64_t i = v60)
    {
      if (v13)
      {
        unint64_t v16 = __clz(__rbit64(v13));
        uint64_t v17 = (v13 - 1) & v13;
        unint64_t v18 = v16 | (i << 6);
        uint64_t result = v0[28];
      }
      else
      {
        int64_t v19 = i + 1;
        if (__OFADD__(i, 1))
        {
          __break(1u);
LABEL_36:
          __break(1u);
          return result;
        }
        int64_t v20 = (unint64_t)((1 << *((unsigned char *)v0 + 320)) + 63) >> 6;
        uint64_t result = v0[28];
        if (v19 >= v20) {
          goto LABEL_29;
        }
        uint64_t v21 = result + 64;
        unint64_t v22 = *(void *)(result + 64 + 8 * v19);
        ++i;
        if (!v22)
        {
          int64_t i = v19 + 1;
          if (v19 + 1 >= v20) {
            goto LABEL_29;
          }
          unint64_t v22 = *(void *)(v21 + 8 * i);
          if (!v22)
          {
            int64_t i = v19 + 2;
            if (v19 + 2 >= v20) {
              goto LABEL_29;
            }
            unint64_t v22 = *(void *)(v21 + 8 * i);
            if (!v22)
            {
              int64_t i = v19 + 3;
              if (v19 + 3 >= v20) {
                goto LABEL_29;
              }
              unint64_t v22 = *(void *)(v21 + 8 * i);
              if (!v22)
              {
                int64_t v23 = v19 + 4;
                if (v23 >= v20)
                {
LABEL_29:
                  swift_release();
                  sub_10001729C(v0[25], &qword_1006677A0);
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  uint64_t v49 = (uint64_t (*)(void))v0[1];
                  return v49();
                }
                unint64_t v22 = *(void *)(v21 + 8 * v23);
                for (int64_t i = v23; !v22; ++v23)
                {
                  int64_t i = v23 + 1;
                  if (__OFADD__(v23, 1)) {
                    goto LABEL_36;
                  }
                  if (i >= v20) {
                    goto LABEL_29;
                  }
                  unint64_t v22 = *(void *)(v21 + 8 * i);
                }
              }
            }
          }
        }
        uint64_t v17 = (v22 - 1) & v22;
        unint64_t v18 = __clz(__rbit64(v22)) + (i << 6);
      }
      unint64_t v59 = v17;
      int64_t v60 = i;
      v0[29] = v17;
      v0[30] = i;
      uint64_t v24 = *((unsigned int *)v0 + 78);
      uint64_t v26 = (uint64_t *)v0[21];
      uint64_t v25 = v0[22];
      uint64_t v27 = v0[18];
      uint64_t v29 = v0[15];
      uint64_t v28 = v0[16];
      sub_1005758D4(*(void *)(result + 56) + *(void *)(v0[20] + 72) * v18, v25, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
      uint64_t v0 = v62;
      sub_10057593C(v25, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
      uint64_t v30 = *v26;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 104))(v27, v24, v29);
      uint64_t v63 = v30;
      if (*(void *)(v30 + 16))
      {
        sub_100575EA8(&qword_1006607F0, (void (*)(uint64_t))&type metadata accessor for MessageRegistration);
        uint64_t v31 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v32 = -1 << *(unsigned char *)(v30 + 32);
        unint64_t v33 = v31 & ~v32;
        uint64_t v34 = v30 + 56;
        if ((*(void *)(v30 + 56 + ((v33 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v33)) {
          break;
        }
      }
LABEL_3:
      uint64_t v15 = v0[21];
      (*(void (**)(void, void))(v0[16] + 8))(v0[18], v0[15]);
      uint64_t result = sub_1005759A4(v15, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
      unint64_t v13 = v59;
    }
    uint64_t v61 = ~v32;
    uint64_t v35 = v62[16];
    uint64_t v36 = *(void *)(v35 + 72);
    uint64_t v37 = *(void (**)(uint64_t, unint64_t, uint64_t))(v35 + 16);
    while (1)
    {
      uint64_t v38 = v0[17];
      uint64_t v40 = v0[15];
      uint64_t v39 = v0[16];
      v37(v38, *(void *)(v63 + 48) + v33 * v36, v40);
      sub_100575EA8(&qword_1006607F8, (void (*)(uint64_t))&type metadata accessor for MessageRegistration);
      char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
      v42(v38, v40);
      if (v41) {
        break;
      }
      uint64_t v0 = v62;
      unint64_t v33 = (v33 + 1) & v61;
      if (((*(void *)(v34 + ((v33 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v33) & 1) == 0) {
        goto LABEL_3;
      }
    }
    uint64_t v0 = v62;
    uint64_t v44 = v62[24];
    uint64_t v43 = v62[25];
    uint64_t v45 = v62[21];
    uint64_t v46 = v62[19];
    uint64_t v48 = v62[12];
    uint64_t v47 = v62[13];
    v42(v62[18], v62[15]);
    v62[31] = *(void *)(v45 + *(int *)(v46 + 28));
    sub_100017238(v43, v44, &qword_1006677A0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v44, 1, v48) != 1)
    {
      (*(void (**)(void, void, void))(v62[13] + 32))(v62[14], v62[24], v62[12]);
      continue;
    }
    break;
  }
  uint64_t v50 = v62[11];
  sub_10001729C(v62[24], &qword_1006677A0);
  uint64_t v51 = type metadata accessor for ManagedAppDistributionError();
  v62[32] = v51;
  uint64_t v52 = *(void *)(v51 - 8);
  v62[33] = v52;
  uint64_t v53 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56);
  v62[34] = v53;
  v62[35] = (v52 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v53(v50, 1, 1, v51);
  uint64_t v54 = (void *)swift_task_alloc();
  v62[36] = v54;
  *uint64_t v54 = v62;
  v54[1] = sub_100572800;
  uint64_t v55 = v62[9];
  uint64_t v56 = v62[10];
  uint64_t v58 = v62[7];
  uint64_t v57 = v62[8];
  return sub_1001AF47C(v58, v57, v55, v56);
}

uint64_t sub_100572F74()
{
  uint64_t v1 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[34];
  uint64_t v2 = v0[32];
  uint64_t v3 = v0[33];
  uint64_t v4 = *((unsigned int *)v0 + 79);
  uint64_t v5 = v0[11];
  sub_10001729C(v5, &qword_10065C958);
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 104))(v5, v4, v2);
  v1(v5, 0, 1, v2);
  uint64_t v6 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[26];
  uint64_t v7 = v0[25];
  uint64_t v8 = v0[23];
  uint64_t v10 = v0[13];
  uint64_t v9 = v0[14];
  uint64_t v12 = v0[11];
  uint64_t v11 = v0[12];
  static XPCClientMessage.managedAppCatalog(apps:error:)();
  swift_bridgeObjectRelease();
  sub_10001729C(v12, &qword_10065C958);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v8, v9, v11);
  v6(v8, 0, 1, v11);
  sub_100575EF0(v8, v7);
  uint64_t v68 = v0;
  while (2)
  {
    uint64_t v13 = v0[21];
    uint64_t v14 = v0[14];
    uint64_t v15 = v68[13];
    uint64_t v16 = v68[12];
    swift_getObjectType();
    XPCClientProtocol.handleMessage(_:)();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    uint64_t v17 = v68;
    uint64_t result = sub_1005759A4(v13, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
    unint64_t v19 = v68[29];
    for (int64_t i = v68[30]; ; int64_t i = v66)
    {
      if (v19)
      {
        unint64_t v22 = __clz(__rbit64(v19));
        uint64_t v23 = (v19 - 1) & v19;
        unint64_t v24 = v22 | (i << 6);
        uint64_t result = v17[28];
      }
      else
      {
        int64_t v25 = i + 1;
        if (__OFADD__(i, 1))
        {
          __break(1u);
LABEL_36:
          __break(1u);
          return result;
        }
        int64_t v26 = (unint64_t)((1 << *((unsigned char *)v17 + 320)) + 63) >> 6;
        uint64_t result = v17[28];
        if (v25 >= v26) {
          goto LABEL_29;
        }
        uint64_t v27 = result + 64;
        unint64_t v28 = *(void *)(result + 64 + 8 * v25);
        ++i;
        if (!v28)
        {
          int64_t i = v25 + 1;
          if (v25 + 1 >= v26) {
            goto LABEL_29;
          }
          unint64_t v28 = *(void *)(v27 + 8 * i);
          if (!v28)
          {
            int64_t i = v25 + 2;
            if (v25 + 2 >= v26) {
              goto LABEL_29;
            }
            unint64_t v28 = *(void *)(v27 + 8 * i);
            if (!v28)
            {
              int64_t i = v25 + 3;
              if (v25 + 3 >= v26) {
                goto LABEL_29;
              }
              unint64_t v28 = *(void *)(v27 + 8 * i);
              if (!v28)
              {
                int64_t v29 = v25 + 4;
                if (v29 >= v26)
                {
LABEL_29:
                  swift_release();
                  sub_10001729C(v17[25], &qword_1006677A0);
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  uint64_t v55 = (uint64_t (*)(void))v17[1];
                  return v55();
                }
                unint64_t v28 = *(void *)(v27 + 8 * v29);
                for (int64_t i = v29; !v28; ++v29)
                {
                  int64_t i = v29 + 1;
                  if (__OFADD__(v29, 1)) {
                    goto LABEL_36;
                  }
                  if (i >= v26) {
                    goto LABEL_29;
                  }
                  unint64_t v28 = *(void *)(v27 + 8 * i);
                }
              }
            }
          }
        }
        uint64_t v23 = (v28 - 1) & v28;
        unint64_t v24 = __clz(__rbit64(v28)) + (i << 6);
      }
      unint64_t v65 = v23;
      int64_t v66 = i;
      v17[29] = v23;
      v17[30] = i;
      uint64_t v30 = *((unsigned int *)v17 + 78);
      uint64_t v32 = (uint64_t *)v17[21];
      uint64_t v31 = v17[22];
      uint64_t v33 = v17[20];
      uint64_t v34 = v17[18];
      uint64_t v35 = v68[16];
      uint64_t v36 = v68[15];
      sub_1005758D4(*(void *)(result + 56) + *(void *)(v33 + 72) * v24, v31, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
      sub_10057593C(v31, (uint64_t)v32, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
      uint64_t v37 = *v32;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 104))(v34, v30, v36);
      uint64_t v17 = v68;
      if (*(void *)(v37 + 16))
      {
        sub_100575EA8(&qword_1006607F0, (void (*)(uint64_t))&type metadata accessor for MessageRegistration);
        uint64_t v38 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v39 = -1 << *(unsigned char *)(v37 + 32);
        unint64_t v40 = v38 & ~v39;
        if ((*(void *)(v37 + 56 + ((v40 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v40)) {
          break;
        }
      }
LABEL_3:
      uint64_t v21 = v17[21];
      (*(void (**)(void, void))(v17[16] + 8))(v17[18], v17[15]);
      uint64_t result = sub_1005759A4(v21, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
      unint64_t v19 = v65;
    }
    uint64_t v67 = ~v39;
    uint64_t v41 = v68[16];
    uint64_t v42 = *(void *)(v41 + 72);
    uint64_t v43 = *(void (**)(uint64_t, unint64_t, uint64_t))(v41 + 16);
    while (1)
    {
      uint64_t v44 = v17[17];
      uint64_t v46 = v17[15];
      uint64_t v45 = v17[16];
      v43(v44, *(void *)(v37 + 48) + v40 * v42, v46);
      sub_100575EA8(&qword_1006607F8, (void (*)(uint64_t))&type metadata accessor for MessageRegistration);
      char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
      v48(v44, v46);
      if (v47) {
        break;
      }
      uint64_t v17 = v68;
      unint64_t v40 = (v40 + 1) & v67;
      if (((*(void *)(v37 + 56 + ((v40 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v40) & 1) == 0) {
        goto LABEL_3;
      }
    }
    uint64_t v50 = v68[24];
    uint64_t v49 = v68[25];
    uint64_t v51 = v68[21];
    uint64_t v52 = v68[19];
    uint64_t v53 = v68[12];
    uint64_t v54 = v68[13];
    v48(v68[18], v68[15]);
    uint64_t v0 = v68;
    v68[31] = *(void *)(v51 + *(int *)(v52 + 28));
    sub_100017238(v49, v50, &qword_1006677A0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v50, 1, v53) != 1)
    {
      (*(void (**)(void, void, void))(v68[13] + 32))(v68[14], v68[24], v68[12]);
      continue;
    }
    break;
  }
  uint64_t v56 = v68[11];
  sub_10001729C(v68[24], &qword_1006677A0);
  uint64_t v57 = type metadata accessor for ManagedAppDistributionError();
  v68[32] = v57;
  uint64_t v58 = *(void *)(v57 - 8);
  v68[33] = v58;
  unint64_t v59 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56);
  v68[34] = v59;
  v68[35] = (v58 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v59(v56, 1, 1, v57);
  int64_t v60 = (void *)swift_task_alloc();
  v68[36] = v60;
  void *v60 = v68;
  v60[1] = sub_100572800;
  uint64_t v61 = v68[9];
  uint64_t v62 = v68[10];
  uint64_t v63 = v68[8];
  uint64_t v64 = v68[7];
  return sub_1001AF47C(v64, v63, v61, v62);
}

uint64_t sub_10057362C(uint64_t a1)
{
  uint64_t v48 = type metadata accessor for AppProgress();
  uint64_t v2 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  char v47 = (char *)v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for XPCClientMessage();
  uint64_t v4 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  unint64_t v59 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AppState();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v45 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v50 = (char *)v39 - v10;
  uint64_t updated = type metadata accessor for AppStateUpdateIdentifier();
  uint64_t v12 = *(void *)(updated - 8);
  uint64_t v13 = __chkstk_darwin(updated);
  uint64_t v44 = (char *)v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v49 = (char *)v39 - v15;
  uint64_t v16 = sub_1000172F8(&qword_10065BDA8);
  uint64_t v17 = __chkstk_darwin(v16);
  int64_t v20 = (char *)v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *(void *)(a1 + 16);
  if (!v21)
  {
    uint64_t v37 = _swiftEmptyArrayStorage;
    if (!_swiftEmptyArrayStorage[2]) {
      return swift_bridgeObjectRelease();
    }
    goto LABEL_13;
  }
  uint64_t v58 = &v20[*(int *)(v17 + 48)];
  uint64_t v57 = &v20[*(int *)(v17 + 64)];
  uint64_t v22 = v7;
  uint64_t v23 = a1 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  uint64_t v55 = (void (**)(char *, char *, uint64_t))(v22 + 32);
  uint64_t v56 = (void (**)(uint64_t, char *, uint64_t))(v12 + 32);
  uint64_t v53 = *(void *)(v18 + 72);
  uint64_t v54 = (void (**)(char *, uint64_t))(v22 + 8);
  uint64_t v52 = (void (**)(uint64_t, uint64_t))(v12 + 8);
  uint64_t v41 = (void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v42 = (void (**)(char *, char *, uint64_t))(v22 + 16);
  unint64_t v40 = (void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v43 = v4;
  v39[2] = v4 + 32;
  v39[1] = a1;
  swift_bridgeObjectRetain();
  int64_t v60 = _swiftEmptyArrayStorage;
  uint64_t v24 = (uint64_t)v49;
  int64_t v25 = v50;
  uint64_t v51 = v20;
  do
  {
    uint64_t v61 = v21;
    sub_100017238(v23, (uint64_t)v20, &qword_10065BDA8);
    uint64_t v27 = *(void *)v57;
    uint64_t v28 = *((void *)v57 + 1);
    unsigned __int8 v29 = v57[16];
    (*v56)(v24, v20, updated);
    (*v55)(v25, v58, v6);
    uint64_t v30 = v6;
    char v31 = sub_10056E904(v24, v27, v28, v29);
    sub_10018ACA4(v27, v28, v29);
    if (v31)
    {
      (*v42)(v45, v25, v30);
      (*v41)(v44, v24, updated);
      uint64_t v32 = v47;
      AppProgress.init(state:identifier:)();
      static XPCClientMessage.appProgress(_:)();
      (*v40)(v32, v48);
      uint64_t v6 = v30;
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v24 = (uint64_t)v49;
        int64_t v25 = v50;
        int64_t v20 = v51;
        unint64_t v33 = (unint64_t)v60;
        uint64_t v26 = v61;
      }
      else
      {
        unint64_t v33 = sub_10028F3A0(0, v60[2] + 1, 1, (unint64_t)v60);
        uint64_t v24 = (uint64_t)v49;
        int64_t v25 = v50;
        int64_t v20 = v51;
        uint64_t v26 = v61;
      }
      unint64_t v35 = *(void *)(v33 + 16);
      unint64_t v34 = *(void *)(v33 + 24);
      if (v35 >= v34 >> 1) {
        unint64_t v33 = sub_10028F3A0(v34 > 1, v35 + 1, 1, v33);
      }
      *(void *)(v33 + 16) = v35 + 1;
      unint64_t v36 = (*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
      int64_t v60 = (void *)v33;
      (*(void (**)(unint64_t, char *, uint64_t))(v43 + 32))(v33 + v36 + *(void *)(v43 + 72) * v35, v59, v46);
    }
    else
    {
      uint64_t v6 = v30;
      int64_t v20 = v51;
      uint64_t v26 = v61;
    }
    (*v54)(v25, v6);
    (*v52)(v24, updated);
    v23 += v53;
    uint64_t v21 = v26 - 1;
  }
  while (v21);
  swift_bridgeObjectRelease();
  uint64_t v37 = v60;
  if (v60[2])
  {
LABEL_13:
    type metadata accessor for RegisteredXPCClient();
    swift_getObjectType();
    XPCClientProtocol.handleMessages(_:)((Swift::OpaquePointer)v37);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100573C58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[9] = a5;
  v6[10] = a6;
  v6[7] = a3;
  v6[8] = a4;
  v6[5] = a1;
  v6[6] = a2;
  sub_1000172F8(&qword_10065C958);
  v6[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for XPCClientMessage();
  v6[12] = v7;
  v6[13] = *(void *)(v7 - 8);
  v6[14] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for MessageRegistration();
  v6[15] = v8;
  v6[16] = *(void *)(v8 - 8);
  v6[17] = swift_task_alloc();
  v6[18] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for RegisteredXPCClient();
  v6[19] = v9;
  v6[20] = *(void *)(v9 - 8);
  v6[21] = swift_task_alloc();
  v6[22] = swift_task_alloc();
  sub_1000172F8(&qword_1006677A0);
  v6[23] = swift_task_alloc();
  v6[24] = swift_task_alloc();
  v6[25] = swift_task_alloc();
  return _swift_task_switch(sub_100573E74, 0, 0);
}

uint64_t sub_100573E74()
{
  int64_t v70 = v0;
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[13];
  uint64_t v4 = v0[5];
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
  v0[26] = v5;
  v0[27] = (v3 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v5(v1, 1, 1, v2);
  uint64_t v6 = *(os_unfair_lock_s **)(v4 + 16);
  uint64_t v7 = v6 + 4;
  uint64_t v8 = v6 + 6;
  os_unfair_lock_lock(v6 + 6);
  sub_100352424(v7, &v69);
  os_unfair_lock_unlock(v8);
  uint64_t v9 = v69;
  v0[28] = v69;
  char v10 = *(unsigned char *)(v9 + 32);
  *((unsigned char *)v0 + 320) = v10;
  uint64_t v11 = 1 << v10;
  uint64_t v12 = *(void *)(v9 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  uint64_t result = swift_beginAccess();
  int64_t v16 = 0;
  *((_DWORD *)v0 + 78) = enum case for MessageRegistration.appCatalog(_:);
  *((_DWORD *)v0 + 79) = enum case for ManagedAppDistributionError.unrecoverableError(_:);
  uint64_t v68 = v0;
  if (v14) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v21 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
    goto LABEL_39;
  }
  int64_t v22 = (unint64_t)((1 << *((unsigned char *)v0 + 320)) + 63) >> 6;
  uint64_t result = v0[28];
  if (v21 < v22)
  {
    uint64_t v23 = result + 64;
    unint64_t v24 = *(void *)(result + 64 + 8 * v21);
    ++v16;
    if (v24) {
      goto LABEL_22;
    }
    int64_t v16 = v21 + 1;
    if (v21 + 1 < v22)
    {
      unint64_t v24 = *(void *)(v23 + 8 * v16);
      if (v24) {
        goto LABEL_22;
      }
      int64_t v16 = v21 + 2;
      if (v21 + 2 < v22)
      {
        unint64_t v24 = *(void *)(v23 + 8 * v16);
        if (v24) {
          goto LABEL_22;
        }
        int64_t v16 = v21 + 3;
        if (v21 + 3 < v22)
        {
          unint64_t v24 = *(void *)(v23 + 8 * v16);
          if (v24) {
            goto LABEL_22;
          }
          int64_t v25 = v21 + 4;
          if (v25 < v22)
          {
            unint64_t v24 = *(void *)(v23 + 8 * v25);
            int64_t v16 = v25;
            if (!v24)
            {
              while (1)
              {
                int64_t v16 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  break;
                }
                if (v16 >= v22) {
                  goto LABEL_32;
                }
                unint64_t v24 = *(void *)(v23 + 8 * v16);
                ++v25;
                if (v24) {
                  goto LABEL_22;
                }
              }
LABEL_39:
              __break(1u);
              return result;
            }
LABEL_22:
            uint64_t v19 = (v24 - 1) & v24;
            unint64_t v20 = __clz(__rbit64(v24)) + (v16 << 6);
            while (1)
            {
              unint64_t v65 = v19;
              int64_t v66 = v16;
              v0[29] = v19;
              v0[30] = v16;
              uint64_t v26 = *((unsigned int *)v0 + 78);
              uint64_t v28 = (uint64_t *)v0[21];
              uint64_t v27 = v0[22];
              uint64_t v29 = v0[20];
              uint64_t v30 = v0[18];
              uint64_t v31 = v68[16];
              uint64_t v32 = v68[15];
              sub_1005758D4(*(void *)(result + 56) + *(void *)(v29 + 72) * v20, v27, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
              sub_10057593C(v27, (uint64_t)v28, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
              uint64_t v33 = *v28;
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 104))(v30, v26, v32);
              uint64_t v0 = v68;
              if (*(void *)(v33 + 16)
                && (sub_100575EA8(&qword_1006607F0, (void (*)(uint64_t))&type metadata accessor for MessageRegistration), v34 = dispatch thunk of Hashable._rawHashValue(seed:)(), uint64_t v35 = -1 << *(unsigned char *)(v33 + 32), v36 = v34 & ~v35, ((*(void *)(v33 + 56 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36) & 1) != 0))
              {
                uint64_t v67 = ~v35;
                uint64_t v37 = v68[16];
                uint64_t v38 = *(void *)(v37 + 72);
                uint64_t v39 = *(void (**)(uint64_t, unint64_t, uint64_t))(v37 + 16);
                while (1)
                {
                  uint64_t v40 = v0[17];
                  uint64_t v42 = v0[15];
                  uint64_t v41 = v0[16];
                  v39(v40, *(void *)(v33 + 48) + v36 * v38, v42);
                  sub_100575EA8(&qword_1006607F8, (void (*)(uint64_t))&type metadata accessor for MessageRegistration);
                  char v43 = dispatch thunk of static Equatable.== infix(_:_:)();
                  uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
                  v44(v40, v42);
                  if (v43) {
                    break;
                  }
                  uint64_t v0 = v68;
                  unint64_t v36 = (v36 + 1) & v67;
                  if (((*(void *)(v33 + 56 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36) & 1) == 0) {
                    goto LABEL_6;
                  }
                }
                uint64_t v46 = v68[24];
                uint64_t v45 = v68[25];
                uint64_t v47 = v68[21];
                uint64_t v48 = v68[19];
                uint64_t v49 = v68[12];
                uint64_t v50 = v68[13];
                v44(v68[18], v68[15]);
                v68[31] = *(void *)(v47 + *(int *)(v48 + 28));
                sub_100017238(v45, v46, &qword_1006677A0);
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v46, 1, v49) == 1)
                {
                  uint64_t v56 = v68[11];
                  sub_10001729C(v68[24], &qword_1006677A0);
                  uint64_t v57 = type metadata accessor for ManagedAppDistributionError();
                  v68[32] = v57;
                  uint64_t v58 = *(void *)(v57 - 8);
                  v68[33] = v58;
                  unint64_t v59 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56);
                  v68[34] = v59;
                  v68[35] = (v58 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
                  v59(v56, 1, 1, v57);
                  int64_t v60 = (void *)swift_task_alloc();
                  v68[36] = v60;
                  void *v60 = v68;
                  v60[1] = sub_100574590;
                  uint64_t v61 = v68[9];
                  uint64_t v62 = v68[10];
                  uint64_t v63 = v68[8];
                  uint64_t v64 = v68[7];
                  return sub_1001AF47C(v64, v63, v61, v62);
                }
                (*(void (**)(void, void, void))(v68[13] + 32))(v68[14], v68[24], v68[12]);
                uint64_t v51 = v68[21];
                uint64_t v52 = v68[14];
                uint64_t v53 = v68[13];
                uint64_t v54 = v68[12];
                swift_getObjectType();
                XPCClientProtocol.handleMessage(_:)();
                (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
                uint64_t v0 = v68;
                uint64_t result = sub_1005759A4(v51, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
                unint64_t v14 = v68[29];
                int64_t v16 = v68[30];
                if (!v14) {
                  goto LABEL_8;
                }
              }
              else
              {
LABEL_6:
                uint64_t v17 = v0[21];
                (*(void (**)(void, void))(v0[16] + 8))(v0[18], v0[15]);
                uint64_t result = sub_1005759A4(v17, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
                unint64_t v14 = v65;
                int64_t v16 = v66;
                if (!v65) {
                  goto LABEL_8;
                }
              }
LABEL_7:
              unint64_t v18 = __clz(__rbit64(v14));
              uint64_t v19 = (v14 - 1) & v14;
              unint64_t v20 = v18 | (v16 << 6);
              uint64_t result = v0[28];
            }
          }
        }
      }
    }
  }
LABEL_32:
  swift_release();
  sub_10001729C(v0[25], &qword_1006677A0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v55 = (uint64_t (*)(void))v0[1];
  return v55();
}

uint64_t sub_100574590(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 296) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100574D04;
  }
  else
  {
    *(void *)(v4 + 304) = a1;
    uint64_t v5 = sub_1005746B8;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1005746B8()
{
  uint64_t v1 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[26];
  uint64_t v2 = v0[25];
  uint64_t v3 = v0[23];
  uint64_t v5 = v0[13];
  uint64_t v4 = v0[14];
  uint64_t v7 = v0[11];
  uint64_t v6 = v0[12];
  static XPCClientMessage.managedAppCatalog(apps:error:)();
  swift_bridgeObjectRelease();
  sub_10001729C(v7, &qword_10065C958);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v4, v6);
  v1(v3, 0, 1, v6);
  sub_100575EF0(v3, v2);
  uint64_t v62 = v0;
  while (2)
  {
    uint64_t v8 = v0[21];
    uint64_t v9 = v0[13];
    uint64_t v10 = v0[14];
    uint64_t v11 = v0[12];
    swift_getObjectType();
    XPCClientProtocol.handleMessage(_:)();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    uint64_t result = sub_1005759A4(v8, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
    unint64_t v13 = v0[29];
    for (int64_t i = v0[30]; ; int64_t i = v60)
    {
      if (v13)
      {
        unint64_t v16 = __clz(__rbit64(v13));
        uint64_t v17 = (v13 - 1) & v13;
        unint64_t v18 = v16 | (i << 6);
        uint64_t result = v0[28];
      }
      else
      {
        int64_t v19 = i + 1;
        if (__OFADD__(i, 1))
        {
          __break(1u);
LABEL_36:
          __break(1u);
          return result;
        }
        int64_t v20 = (unint64_t)((1 << *((unsigned char *)v0 + 320)) + 63) >> 6;
        uint64_t result = v0[28];
        if (v19 >= v20) {
          goto LABEL_29;
        }
        uint64_t v21 = result + 64;
        unint64_t v22 = *(void *)(result + 64 + 8 * v19);
        ++i;
        if (!v22)
        {
          int64_t i = v19 + 1;
          if (v19 + 1 >= v20) {
            goto LABEL_29;
          }
          unint64_t v22 = *(void *)(v21 + 8 * i);
          if (!v22)
          {
            int64_t i = v19 + 2;
            if (v19 + 2 >= v20) {
              goto LABEL_29;
            }
            unint64_t v22 = *(void *)(v21 + 8 * i);
            if (!v22)
            {
              int64_t i = v19 + 3;
              if (v19 + 3 >= v20) {
                goto LABEL_29;
              }
              unint64_t v22 = *(void *)(v21 + 8 * i);
              if (!v22)
              {
                int64_t v23 = v19 + 4;
                if (v23 >= v20)
                {
LABEL_29:
                  swift_release();
                  sub_10001729C(v0[25], &qword_1006677A0);
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  uint64_t v49 = (uint64_t (*)(void))v0[1];
                  return v49();
                }
                unint64_t v22 = *(void *)(v21 + 8 * v23);
                for (int64_t i = v23; !v22; ++v23)
                {
                  int64_t i = v23 + 1;
                  if (__OFADD__(v23, 1)) {
                    goto LABEL_36;
                  }
                  if (i >= v20) {
                    goto LABEL_29;
                  }
                  unint64_t v22 = *(void *)(v21 + 8 * i);
                }
              }
            }
          }
        }
        uint64_t v17 = (v22 - 1) & v22;
        unint64_t v18 = __clz(__rbit64(v22)) + (i << 6);
      }
      unint64_t v59 = v17;
      int64_t v60 = i;
      v0[29] = v17;
      v0[30] = i;
      uint64_t v24 = *((unsigned int *)v0 + 78);
      uint64_t v26 = (uint64_t *)v0[21];
      uint64_t v25 = v0[22];
      uint64_t v27 = v0[18];
      uint64_t v29 = v0[15];
      uint64_t v28 = v0[16];
      sub_1005758D4(*(void *)(result + 56) + *(void *)(v0[20] + 72) * v18, v25, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
      uint64_t v0 = v62;
      sub_10057593C(v25, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
      uint64_t v30 = *v26;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 104))(v27, v24, v29);
      uint64_t v63 = v30;
      if (*(void *)(v30 + 16))
      {
        sub_100575EA8(&qword_1006607F0, (void (*)(uint64_t))&type metadata accessor for MessageRegistration);
        uint64_t v31 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v32 = -1 << *(unsigned char *)(v30 + 32);
        unint64_t v33 = v31 & ~v32;
        uint64_t v34 = v30 + 56;
        if ((*(void *)(v30 + 56 + ((v33 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v33)) {
          break;
        }
      }
LABEL_3:
      uint64_t v15 = v0[21];
      (*(void (**)(void, void))(v0[16] + 8))(v0[18], v0[15]);
      uint64_t result = sub_1005759A4(v15, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
      unint64_t v13 = v59;
    }
    uint64_t v61 = ~v32;
    uint64_t v35 = v62[16];
    uint64_t v36 = *(void *)(v35 + 72);
    uint64_t v37 = *(void (**)(uint64_t, unint64_t, uint64_t))(v35 + 16);
    while (1)
    {
      uint64_t v38 = v0[17];
      uint64_t v40 = v0[15];
      uint64_t v39 = v0[16];
      v37(v38, *(void *)(v63 + 48) + v33 * v36, v40);
      sub_100575EA8(&qword_1006607F8, (void (*)(uint64_t))&type metadata accessor for MessageRegistration);
      char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
      v42(v38, v40);
      if (v41) {
        break;
      }
      uint64_t v0 = v62;
      unint64_t v33 = (v33 + 1) & v61;
      if (((*(void *)(v34 + ((v33 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v33) & 1) == 0) {
        goto LABEL_3;
      }
    }
    uint64_t v0 = v62;
    uint64_t v44 = v62[24];
    uint64_t v43 = v62[25];
    uint64_t v45 = v62[21];
    uint64_t v46 = v62[19];
    uint64_t v48 = v62[12];
    uint64_t v47 = v62[13];
    v42(v62[18], v62[15]);
    v62[31] = *(void *)(v45 + *(int *)(v46 + 28));
    sub_100017238(v43, v44, &qword_1006677A0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v44, 1, v48) != 1)
    {
      (*(void (**)(void, void, void))(v62[13] + 32))(v62[14], v62[24], v62[12]);
      continue;
    }
    break;
  }
  uint64_t v50 = v62[11];
  sub_10001729C(v62[24], &qword_1006677A0);
  uint64_t v51 = type metadata accessor for ManagedAppDistributionError();
  v62[32] = v51;
  uint64_t v52 = *(void *)(v51 - 8);
  v62[33] = v52;
  uint64_t v53 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56);
  v62[34] = v53;
  v62[35] = (v52 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v53(v50, 1, 1, v51);
  uint64_t v54 = (void *)swift_task_alloc();
  v62[36] = v54;
  *uint64_t v54 = v62;
  v54[1] = sub_100574590;
  uint64_t v55 = v62[9];
  uint64_t v56 = v62[10];
  uint64_t v58 = v62[7];
  uint64_t v57 = v62[8];
  return sub_1001AF47C(v58, v57, v55, v56);
}

uint64_t sub_100574D04()
{
  uint64_t v1 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[34];
  uint64_t v2 = v0[32];
  uint64_t v3 = v0[33];
  uint64_t v4 = *((unsigned int *)v0 + 79);
  uint64_t v5 = v0[11];
  sub_10001729C(v5, &qword_10065C958);
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 104))(v5, v4, v2);
  v1(v5, 0, 1, v2);
  uint64_t v6 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[26];
  uint64_t v7 = v0[25];
  uint64_t v8 = v0[23];
  uint64_t v10 = v0[13];
  uint64_t v9 = v0[14];
  uint64_t v12 = v0[11];
  uint64_t v11 = v0[12];
  static XPCClientMessage.managedAppCatalog(apps:error:)();
  swift_bridgeObjectRelease();
  sub_10001729C(v12, &qword_10065C958);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v8, v9, v11);
  v6(v8, 0, 1, v11);
  sub_100575EF0(v8, v7);
  uint64_t v68 = v0;
  while (2)
  {
    uint64_t v13 = v0[21];
    uint64_t v14 = v0[14];
    uint64_t v15 = v68[13];
    uint64_t v16 = v68[12];
    swift_getObjectType();
    XPCClientProtocol.handleMessage(_:)();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    uint64_t v17 = v68;
    uint64_t result = sub_1005759A4(v13, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
    unint64_t v19 = v68[29];
    for (int64_t i = v68[30]; ; int64_t i = v66)
    {
      if (v19)
      {
        unint64_t v22 = __clz(__rbit64(v19));
        uint64_t v23 = (v19 - 1) & v19;
        unint64_t v24 = v22 | (i << 6);
        uint64_t result = v17[28];
      }
      else
      {
        int64_t v25 = i + 1;
        if (__OFADD__(i, 1))
        {
          __break(1u);
LABEL_36:
          __break(1u);
          return result;
        }
        int64_t v26 = (unint64_t)((1 << *((unsigned char *)v17 + 320)) + 63) >> 6;
        uint64_t result = v17[28];
        if (v25 >= v26) {
          goto LABEL_29;
        }
        uint64_t v27 = result + 64;
        unint64_t v28 = *(void *)(result + 64 + 8 * v25);
        ++i;
        if (!v28)
        {
          int64_t i = v25 + 1;
          if (v25 + 1 >= v26) {
            goto LABEL_29;
          }
          unint64_t v28 = *(void *)(v27 + 8 * i);
          if (!v28)
          {
            int64_t i = v25 + 2;
            if (v25 + 2 >= v26) {
              goto LABEL_29;
            }
            unint64_t v28 = *(void *)(v27 + 8 * i);
            if (!v28)
            {
              int64_t i = v25 + 3;
              if (v25 + 3 >= v26) {
                goto LABEL_29;
              }
              unint64_t v28 = *(void *)(v27 + 8 * i);
              if (!v28)
              {
                int64_t v29 = v25 + 4;
                if (v29 >= v26)
                {
LABEL_29:
                  swift_release();
                  sub_10001729C(v17[25], &qword_1006677A0);
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  uint64_t v55 = (uint64_t (*)(void))v17[1];
                  return v55();
                }
                unint64_t v28 = *(void *)(v27 + 8 * v29);
                for (int64_t i = v29; !v28; ++v29)
                {
                  int64_t i = v29 + 1;
                  if (__OFADD__(v29, 1)) {
                    goto LABEL_36;
                  }
                  if (i >= v26) {
                    goto LABEL_29;
                  }
                  unint64_t v28 = *(void *)(v27 + 8 * i);
                }
              }
            }
          }
        }
        uint64_t v23 = (v28 - 1) & v28;
        unint64_t v24 = __clz(__rbit64(v28)) + (i << 6);
      }
      unint64_t v65 = v23;
      int64_t v66 = i;
      v17[29] = v23;
      v17[30] = i;
      uint64_t v30 = *((unsigned int *)v17 + 78);
      uint64_t v32 = (uint64_t *)v17[21];
      uint64_t v31 = v17[22];
      uint64_t v33 = v17[20];
      uint64_t v34 = v17[18];
      uint64_t v35 = v68[16];
      uint64_t v36 = v68[15];
      sub_1005758D4(*(void *)(result + 56) + *(void *)(v33 + 72) * v24, v31, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
      sub_10057593C(v31, (uint64_t)v32, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
      uint64_t v37 = *v32;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 104))(v34, v30, v36);
      uint64_t v17 = v68;
      if (*(void *)(v37 + 16))
      {
        sub_100575EA8(&qword_1006607F0, (void (*)(uint64_t))&type metadata accessor for MessageRegistration);
        uint64_t v38 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v39 = -1 << *(unsigned char *)(v37 + 32);
        unint64_t v40 = v38 & ~v39;
        if ((*(void *)(v37 + 56 + ((v40 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v40)) {
          break;
        }
      }
LABEL_3:
      uint64_t v21 = v17[21];
      (*(void (**)(void, void))(v17[16] + 8))(v17[18], v17[15]);
      uint64_t result = sub_1005759A4(v21, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
      unint64_t v19 = v65;
    }
    uint64_t v67 = ~v39;
    uint64_t v41 = v68[16];
    uint64_t v42 = *(void *)(v41 + 72);
    uint64_t v43 = *(void (**)(uint64_t, unint64_t, uint64_t))(v41 + 16);
    while (1)
    {
      uint64_t v44 = v17[17];
      uint64_t v46 = v17[15];
      uint64_t v45 = v17[16];
      v43(v44, *(void *)(v37 + 48) + v40 * v42, v46);
      sub_100575EA8(&qword_1006607F8, (void (*)(uint64_t))&type metadata accessor for MessageRegistration);
      char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
      v48(v44, v46);
      if (v47) {
        break;
      }
      uint64_t v17 = v68;
      unint64_t v40 = (v40 + 1) & v67;
      if (((*(void *)(v37 + 56 + ((v40 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v40) & 1) == 0) {
        goto LABEL_3;
      }
    }
    uint64_t v50 = v68[24];
    uint64_t v49 = v68[25];
    uint64_t v51 = v68[21];
    uint64_t v52 = v68[19];
    uint64_t v53 = v68[12];
    uint64_t v54 = v68[13];
    v48(v68[18], v68[15]);
    uint64_t v0 = v68;
    v68[31] = *(void *)(v51 + *(int *)(v52 + 28));
    sub_100017238(v49, v50, &qword_1006677A0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v50, 1, v53) != 1)
    {
      (*(void (**)(void, void, void))(v68[13] + 32))(v68[14], v68[24], v68[12]);
      continue;
    }
    break;
  }
  uint64_t v56 = v68[11];
  sub_10001729C(v68[24], &qword_1006677A0);
  uint64_t v57 = type metadata accessor for ManagedAppDistributionError();
  v68[32] = v57;
  uint64_t v58 = *(void *)(v57 - 8);
  v68[33] = v58;
  unint64_t v59 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56);
  v68[34] = v59;
  v68[35] = (v58 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v59(v56, 1, 1, v57);
  int64_t v60 = (void *)swift_task_alloc();
  v68[36] = v60;
  void *v60 = v68;
  v60[1] = sub_100574590;
  uint64_t v61 = v68[9];
  uint64_t v62 = v68[10];
  uint64_t v63 = v68[8];
  uint64_t v64 = v68[7];
  return sub_1001AF47C(v64, v63, v61, v62);
}

void *sub_1005753BC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)&long long v54 = a2;
  *((void *)&v54 + 1) = a3;
  uint64_t v6 = type metadata accessor for RegisteredXPCClient();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v44 = (uint64_t)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v43 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v43 - v14;
  int64_t v16 = 0;
  uint64_t v45 = _swiftEmptyArrayStorage;
  uint64_t v64 = _swiftEmptyArrayStorage;
  uint64_t v17 = a1 + 64;
  uint64_t v18 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & *(void *)(a1 + 64);
  int64_t v55 = (unint64_t)(v18 + 63) >> 6;
  BOOL v21 = (_BYTE)a4 == 0xFF;
  if ((a4 & 1) == 0) {
    BOOL v21 = 1;
  }
  int v50 = a4;
  BOOL v51 = v21;
  uint64_t v48 = v13;
  uint64_t v49 = a1;
  uint64_t v47 = v7;
  uint64_t v46 = v12;
  uint64_t v52 = a1 + 64;
  uint64_t v53 = v15;
  if (v20) {
    goto LABEL_9;
  }
LABEL_10:
  int64_t v24 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
    goto LABEL_49;
  }
  if (v24 < v55)
  {
    unint64_t v25 = *(void *)(v17 + 8 * v24);
    int64_t v26 = v16 + 1;
    if (v25) {
      goto LABEL_25;
    }
    int64_t v26 = v16 + 2;
    if (v16 + 2 >= v55) {
      goto LABEL_47;
    }
    unint64_t v25 = *(void *)(v17 + 8 * v26);
    if (v25) {
      goto LABEL_25;
    }
    int64_t v26 = v16 + 3;
    if (v16 + 3 >= v55) {
      goto LABEL_47;
    }
    unint64_t v25 = *(void *)(v17 + 8 * v26);
    if (v25) {
      goto LABEL_25;
    }
    int64_t v26 = v16 + 4;
    if (v16 + 4 >= v55) {
      goto LABEL_47;
    }
    unint64_t v25 = *(void *)(v17 + 8 * v26);
    if (v25)
    {
LABEL_25:
      unint64_t v20 = (v25 - 1) & v25;
      int64_t v57 = v26;
      unint64_t v23 = __clz(__rbit64(v25)) + (v26 << 6);
      while (1)
      {
        uint64_t v28 = *(void *)(a1 + 56);
        uint64_t v56 = *(void *)(v7 + 72);
        sub_1005758D4(v28 + v56 * v23, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
        sub_10057593C((uint64_t)v12, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
        int64_t v29 = &v15[*(int *)(v6 + 24)];
        uint64_t v30 = *((void *)v29 + 1);
        switch(v30)
        {
          case 0:
            if (v51) {
              goto LABEL_8;
            }
            goto LABEL_41;
          case 1:
            if ((_BYTE)a4 == 0xFF) {
              goto LABEL_8;
            }
            goto LABEL_41;
          case 2:
          case 4:
            goto LABEL_41;
          case 3:
            if ((_BYTE)a4 == 0xFF) {
              goto LABEL_41;
            }
            if (a4)
            {
              unint64_t v59 = &type metadata for WebDistributor;
              unint64_t v32 = sub_1002BEA38();
            }
            else
            {
              unint64_t v59 = &type metadata for NativeDistributor;
              unint64_t v32 = sub_1002F9EF8();
            }
            unint64_t v60 = v32;
            long long v58 = v54;
            sub_10018B164(&v58, (uint64_t)v61);
            uint64_t v34 = v62;
            uint64_t v33 = v63;
            sub_10018AC60(v61, v62);
            uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t))(v33 + 48);
            LOBYTE(a4) = v50;
            sub_1001C617C();
            char v36 = v35(v34, v33);
            sub_100014524((uint64_t)v61);
            uint64_t v6 = v48;
            a1 = v49;
            uint64_t v7 = v47;
            uint64_t v12 = v46;
            uint64_t v17 = v52;
            uint64_t v15 = v53;
            if (v36) {
              goto LABEL_41;
            }
            goto LABEL_8;
          default:
            if ((a4 & 1) == 0
              && (*(void *)v29 == (void)v54 ? (BOOL v31 = v30 == *((void *)&v54 + 1)) : (BOOL v31 = 0),
                  v31 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
            {
LABEL_41:
              sub_10057593C((uint64_t)v15, v44, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
              uint64_t v37 = v45;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                sub_100456134(0, v37[2] + 1, 1);
              }
              uint64_t v38 = v64;
              unint64_t v40 = v64[2];
              unint64_t v39 = v64[3];
              if (v40 >= v39 >> 1)
              {
                sub_100456134(v39 > 1, v40 + 1, 1);
                uint64_t v38 = v64;
              }
              void v38[2] = v40 + 1;
              unint64_t v41 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
              uint64_t v45 = v38;
              sub_10057593C(v44, (uint64_t)v38 + v41 + v40 * v56, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
              uint64_t v17 = v52;
              uint64_t v15 = v53;
              int64_t v16 = v57;
              if (!v20) {
                goto LABEL_10;
              }
            }
            else
            {
LABEL_8:
              sub_1005759A4((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
              int64_t v16 = v57;
              if (!v20) {
                goto LABEL_10;
              }
            }
LABEL_9:
            unint64_t v22 = __clz(__rbit64(v20));
            v20 &= v20 - 1;
            int64_t v57 = v16;
            unint64_t v23 = v22 | (v16 << 6);
            break;
        }
      }
    }
    uint64_t v27 = v16 + 5;
    if (v16 + 5 < v55)
    {
      unint64_t v25 = *(void *)(v17 + 8 * v27);
      if (v25)
      {
        int64_t v26 = v16 + 5;
        goto LABEL_25;
      }
      while (1)
      {
        int64_t v26 = v27 + 1;
        if (__OFADD__(v27, 1)) {
          break;
        }
        if (v26 >= v55) {
          goto LABEL_47;
        }
        unint64_t v25 = *(void *)(v17 + 8 * v26);
        ++v27;
        if (v25) {
          goto LABEL_25;
        }
      }
LABEL_49:
      __break(1u);
      JUMPOUT(0x1005758C0);
    }
  }
LABEL_47:
  swift_release();
  return v45;
}

uint64_t sub_1005758D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10057593C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1005759A4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100575A04(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v11 = v2[6];
  uint64_t v10 = v2[7];
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v12;
  *uint64_t v12 = v3;
  v12[1] = sub_1000176B4;
  return sub_10056FA10(a1, a2, v6, v7, v8, v9, v11, v10);
}

uint64_t sub_100575AE0()
{
  uint64_t v1 = type metadata accessor for RegisteredXPCClient();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  unint64_t v4 = (((((((*(void *)(*(void *)(v1 - 8) + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  uint64_t v5 = v0 + v3;
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + *(int *)(v1 + 20);
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  if (*(void *)(v5 + *(int *)(v1 + 24) + 8) >= 5uLL) {
    swift_bridgeObjectRelease();
  }
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  unint64_t v8 = *(void *)(v0 + v4 + 8);
  if (v8 >> 60 != 15) {
    sub_100013510(*(void *)(v0 + v4), v8);
  }

  return _swift_deallocObject(v0, v4 + 16, v2 | 7);
}

uint64_t sub_100575C58()
{
  uint64_t v2 = *(void *)(type metadata accessor for RegisteredXPCClient() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v8 = *(void *)(v0 + 24);
  uint64_t v9 = v0 + v3;
  uint64_t v10 = *(void *)(v0 + v4);
  uint64_t v11 = *(void *)(v0 + v6);
  uint64_t v12 = *(void *)(v0 + v5);
  uint64_t v13 = *(void *)(v0 + v5 + 8);
  uint64_t v14 = *(void *)(v0 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v15;
  *uint64_t v15 = v1;
  v15[1] = sub_1000176B4;
  return sub_10056FF98(v7, v8, v9, v10, v12, v13, v11, v14);
}

uint64_t sub_100575DC4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100575DFC()
{
  uint64_t v2 = *(int **)(v0 + 16);
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = sub_10000B238;
  unint64_t v4 = (uint64_t (*)(int *))((char *)&dword_100667710 + dword_100667710);
  return v4(v2);
}

uint64_t sub_100575EA8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100575EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_1006677A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t *sub_100575F58(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = (uint64_t *)((char *)v7 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    unint64_t v16 = v15[1];
    if (v16 >= 5)
    {
      *uint64_t v14 = *v15;
      v14[1] = v16;
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    }
    *(uint64_t *)((char *)v7 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_unknownObjectRetain();
  }
  return v7;
}

uint64_t sub_10057608C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  if (*(void *)(a1 + *(int *)(a2 + 24) + 8) >= 5uLL) {
    swift_bridgeObjectRelease();
  }

  return swift_unknownObjectRelease();
}

void *sub_100576130(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  unint64_t v14 = v13[1];
  if (v14 >= 5)
  {
    *uint64_t v12 = *v13;
    v12[1] = v14;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  }
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_unknownObjectRetain();
  return a1;
}

void *sub_100576218(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  unint64_t v13 = *(void *)((char *)a1 + v10 + 8);
  unint64_t v14 = *(void *)((char *)a2 + v10 + 8);
  if (v13 >= 5)
  {
    if (v14 >= 5)
    {
      *uint64_t v11 = *v12;
      v11[1] = v12[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_100576344((uint64_t)v11);
    goto LABEL_6;
  }
  if (v14 < 5)
  {
LABEL_6:
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    goto LABEL_8;
  }
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
LABEL_8:
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t sub_100576344(uint64_t a1)
{
  return a1;
}

void *sub_100576398(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);
  return a1;
}

void *sub_100576438(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  if (*(void *)((char *)a1 + v10 + 8) >= 5uLL)
  {
    unint64_t v13 = v12[1];
    if (v13 >= 5)
    {
      *uint64_t v11 = *v12;
      v11[1] = v13;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_100576344((uint64_t)v11);
  }
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
LABEL_6:
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_unknownObjectRelease();
  return a1;
}

uint64_t sub_100576524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100576538);
}

uint64_t sub_100576538(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1005765E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005765FC);
}

void *sub_1005765FC(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1005766A4()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100576758@<X0>(void *a1@<X8>)
{
  return sub_100333300(a1);
}

uint64_t static CocoaError.fileNoSuchFile.getter()
{
  return static CocoaError.fileNoSuchFile.getter();
}

uint64_t static CocoaError.fileReadNoSuchFile.getter()
{
  return static CocoaError.fileReadNoSuchFile.getter();
}

uint64_t type metadata accessor for CocoaError.Code()
{
  return type metadata accessor for CocoaError.Code();
}

uint64_t URLRequest.httpMethod.getter()
{
  return URLRequest.httpMethod.getter();
}

uint64_t URLRequest.httpMethod.setter()
{
  return URLRequest.httpMethod.setter();
}

uint64_t URLRequest.cachePolicy.setter()
{
  return URLRequest.cachePolicy.setter();
}

uint64_t URLRequest.timeoutInterval.setter()
{
  return URLRequest.timeoutInterval.setter();
}

uint64_t URLRequest.debugDescription.getter()
{
  return URLRequest.debugDescription.getter();
}

NSURLRequest __swiftcall URLRequest._bridgeToObjectiveC()()
{
  uint64_t v0 = (objc_class *)URLRequest._bridgeToObjectiveC()();
  result._internal = v1;
  result.super.Class isa = v0;
  return result;
}

uint64_t URLRequest.allHTTPHeaderFields.getter()
{
  return URLRequest.allHTTPHeaderFields.getter();
}

uint64_t URLRequest.allowsCellularAccess.setter()
{
  return URLRequest.allowsCellularAccess.setter();
}

uint64_t URLRequest.httpShouldHandleCookies.setter()
{
  return URLRequest.httpShouldHandleCookies.setter();
}

uint64_t URLRequest.allowsExpensiveNetworkAccess.setter()
{
  return URLRequest.allowsExpensiveNetworkAccess.setter();
}

uint64_t URLRequest.allowsConstrainedNetworkAccess.setter()
{
  return URLRequest.allowsConstrainedNetworkAccess.setter();
}

uint64_t static URLRequest._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t URLRequest.init(url:cachePolicy:timeoutInterval:)()
{
  return URLRequest.init(url:cachePolicy:timeoutInterval:)();
}

uint64_t URLRequest.url.getter()
{
  return URLRequest.url.getter();
}

Swift::String_optional __swiftcall URLRequest.value(forHTTPHeaderField:)(Swift::String forHTTPHeaderField)
{
  uint64_t v1 = URLRequest.value(forHTTPHeaderField:)(forHTTPHeaderField._countAndFlagsBits, forHTTPHeaderField._object);
  result.value._object = v2;
  result.value._countAndFlagsBits = v1;
  return result;
}

uint64_t URLRequest.httpBody.getter()
{
  return URLRequest.httpBody.getter();
}

uint64_t URLRequest.httpBody.setter()
{
  return URLRequest.httpBody.setter();
}

Swift::Void __swiftcall URLRequest.setValue(_:forHTTPHeaderField:)(Swift::String_optional _, Swift::String forHTTPHeaderField)
{
}

uint64_t type metadata accessor for URLRequest()
{
  return type metadata accessor for URLRequest();
}

uint64_t type metadata accessor for JSONDecoder.KeyDecodingStrategy()
{
  return type metadata accessor for JSONDecoder.KeyDecodingStrategy();
}

uint64_t dispatch thunk of JSONDecoder.keyDecodingStrategy.setter()
{
  return dispatch thunk of JSONDecoder.keyDecodingStrategy.setter();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of JSONDecoder.decode<A>(_:from:)();
}

uint64_t JSONDecoder.init()()
{
  return JSONDecoder.init()();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return type metadata accessor for JSONDecoder();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return dispatch thunk of JSONEncoder.encode<A>(_:)();
}

uint64_t JSONEncoder.init()()
{
  return JSONEncoder.init()();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return type metadata accessor for JSONEncoder();
}

uint64_t Measurement.init(value:unit:)()
{
  return Measurement.init(value:unit:)();
}

uint64_t Measurement<>.converted(to:)()
{
  return Measurement<>.converted(to:)();
}

uint64_t Measurement<>.formatted()()
{
  return Measurement<>.formatted()();
}

uint64_t static CharacterSet.letters.getter()
{
  return static CharacterSet.letters.getter();
}

uint64_t CharacterSet.inverted.getter()
{
  return CharacterSet.inverted.getter();
}

uint64_t type metadata accessor for CharacterSet()
{
  return type metadata accessor for CharacterSet();
}

uint64_t DataProtocol.copyBytes<A>(to:)()
{
  return DataProtocol.copyBytes<A>(to:)();
}

uint64_t static DateInterval._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t DateInterval.init(start:end:)()
{
  return DateInterval.init(start:end:)();
}

uint64_t DateInterval.start.getter()
{
  return DateInterval.start.getter();
}

uint64_t DateInterval.duration.getter()
{
  return DateInterval.duration.getter();
}

uint64_t type metadata accessor for DateInterval()
{
  return type metadata accessor for DateInterval();
}

uint64_t static Notification._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Notification._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Notification.userInfo.getter()
{
  return Notification.userInfo.getter();
}

uint64_t type metadata accessor for Notification()
{
  return type metadata accessor for Notification();
}

uint64_t URLQueryItem.init(name:value:)()
{
  return URLQueryItem.init(name:value:)();
}

uint64_t URLQueryItem.name.getter()
{
  return URLQueryItem.name.getter();
}

uint64_t URLQueryItem.value.getter()
{
  return URLQueryItem.value.getter();
}

uint64_t type metadata accessor for URLQueryItem()
{
  return type metadata accessor for URLQueryItem();
}

uint64_t static CustomNSError.errorDomain.getter()
{
  return static CustomNSError.errorDomain.getter();
}

uint64_t URLComponents.queryItems.getter()
{
  return URLComponents.queryItems.getter();
}

uint64_t URLComponents.queryItems.setter()
{
  return URLComponents.queryItems.setter();
}

uint64_t URLComponents.percentEncodedQuery.getter()
{
  return URLComponents.percentEncodedQuery.getter();
}

uint64_t URLComponents.percentEncodedQuery.setter()
{
  return URLComponents.percentEncodedQuery.setter();
}

uint64_t URLComponents.init(url:resolvingAgainstBaseURL:)()
{
  return URLComponents.init(url:resolvingAgainstBaseURL:)();
}

uint64_t URLComponents.url.getter()
{
  return URLComponents.url.getter();
}

uint64_t URLComponents.host.setter()
{
  return URLComponents.host.setter();
}

uint64_t URLComponents.path.setter()
{
  return URLComponents.path.setter();
}

uint64_t URLComponents.port.setter()
{
  return URLComponents.port.setter();
}

uint64_t URLComponents.query.getter()
{
  return URLComponents.query.getter();
}

uint64_t URLComponents.query.setter()
{
  return URLComponents.query.setter();
}

uint64_t URLComponents.scheme.setter()
{
  return URLComponents.scheme.setter();
}

uint64_t URLComponents.init(string:)()
{
  return URLComponents.init(string:)();
}

uint64_t URLComponents.init()()
{
  return URLComponents.init()();
}

uint64_t type metadata accessor for URLComponents()
{
  return type metadata accessor for URLComponents();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return __DataStorage.init(bytes:length:)();
}

uint64_t __DataStorage._bytes.getter()
{
  return __DataStorage._bytes.getter();
}

uint64_t __DataStorage._length.getter()
{
  return __DataStorage._length.getter();
}

uint64_t __DataStorage._offset.getter()
{
  return __DataStorage._offset.getter();
}

uint64_t type metadata accessor for __DataStorage()
{
  return type metadata accessor for __DataStorage();
}

uint64_t LocalizedError.helpAnchor.getter()
{
  return LocalizedError.helpAnchor.getter();
}

uint64_t LocalizedError.failureReason.getter()
{
  return LocalizedError.failureReason.getter();
}

uint64_t LocalizedError.recoverySuggestion.getter()
{
  return LocalizedError.recoverySuggestion.getter();
}

uint64_t dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)()
{
  return dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
}

uint64_t URLResourceValues.isExcludedFromBackup.getter()
{
  return URLResourceValues.isExcludedFromBackup.getter();
}

uint64_t URLResourceValues.isExcludedFromBackup.setter()
{
  return URLResourceValues.isExcludedFromBackup.setter();
}

uint64_t URLResourceValues.volumeAvailableCapacity.getter()
{
  return URLResourceValues.volumeAvailableCapacity.getter();
}

uint64_t URLResourceValues.volumeAvailableCapacityForImportantUsage.getter()
{
  return URLResourceValues.volumeAvailableCapacityForImportantUsage.getter();
}

uint64_t URLResourceValues.init()()
{
  return URLResourceValues.init()();
}

uint64_t type metadata accessor for URLResourceValues()
{
  return type metadata accessor for URLResourceValues();
}

uint64_t static _ErrorCodeProtocol.~= infix(_:_:)()
{
  return static _ErrorCodeProtocol.~= infix(_:_:)();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
}

uint64_t PropertyListDecoder.init()()
{
  return PropertyListDecoder.init()();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return type metadata accessor for PropertyListDecoder();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return dispatch thunk of PropertyListEncoder.encode<A>(_:)();
}

uint64_t PropertyListEncoder.init()()
{
  return PropertyListEncoder.init()();
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return type metadata accessor for PropertyListEncoder();
}

uint64_t _BridgedStoredNSError.code.getter()
{
  return _BridgedStoredNSError.code.getter();
}

uint64_t _BridgedStoredNSError.init(_:userInfo:)()
{
  return _BridgedStoredNSError.init(_:userInfo:)();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t static LocalizedStringResource.BundleDescription.madFramework.getter()
{
  return static LocalizedStringResource.BundleDescription.madFramework.getter();
}

uint64_t type metadata accessor for LocalizedStringResource.BundleDescription()
{
  return type metadata accessor for LocalizedStringResource.BundleDescription();
}

uint64_t type metadata accessor for LocalizedStringResource()
{
  return type metadata accessor for LocalizedStringResource();
}

uint64_t LocalizedStringResource.init(_:table:locale:bundle:comment:)()
{
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)();
}

uint64_t NSFastEnumerationIterator.next()()
{
  return NSFastEnumerationIterator.next()();
}

uint64_t type metadata accessor for NSFastEnumerationIterator()
{
  return type metadata accessor for NSFastEnumerationIterator();
}

uint64_t URL.isFileURL.getter()
{
  return URL.isFileURL.getter();
}

uint64_t URL.description.getter()
{
  return URL.description.getter();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return type metadata accessor for URL.DirectoryHint();
}

uint64_t static URL.homeDirectory.getter()
{
  return static URL.homeDirectory.getter();
}

uint64_t URL.absoluteString.getter()
{
  return URL.absoluteString.getter();
}

uint64_t URL.resourceValues(forKeys:)()
{
  return URL.resourceValues(forKeys:)();
}

uint64_t URL.init(fileURLWithPath:)()
{
  return URL.init(fileURLWithPath:)();
}

uint64_t URL.hasDirectoryPath.getter()
{
  return URL.hasDirectoryPath.getter();
}

uint64_t URL.lastPathComponent.getter()
{
  return URL.lastPathComponent.getter();
}

uint64_t URL.setResourceValues(_:)()
{
  return URL.setResourceValues(_:)();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t URL.appendingPathExtension(_:)()
{
  return URL.appendingPathExtension(_:)();
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> URL.checkResourceIsReachable()()
{
  return URL.checkResourceIsReachable()();
}

uint64_t URL.deletingLastPathComponent()()
{
  return URL.deletingLastPathComponent()();
}

uint64_t static URL.applicationSupportDirectory.getter()
{
  return static URL.applicationSupportDirectory.getter();
}

uint64_t static URL.== infix(_:_:)()
{
  return static URL.== infix(_:_:)();
}

uint64_t URL.init(fileURLWithFileSystemRepresentation:isDirectory:relativeTo:)()
{
  return URL.init(fileURLWithFileSystemRepresentation:isDirectory:relativeTo:)();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

Swift::String_optional __swiftcall URL.host(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1 = URL.host(percentEncoded:)(percentEncoded);
  result.value._object = v2;
  result.value._countAndFlagsBits = v1;
  return result;
}

Swift::String __swiftcall URL.path(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1 = URL.path(percentEncoded:)(percentEncoded);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t URL.port.getter()
{
  return URL.port.getter();
}

uint64_t URL.scheme.getter()
{
  return URL.scheme.getter();
}

uint64_t URL.init(string:relativeTo:)()
{
  return URL.init(string:relativeTo:)();
}

uint64_t URL.init(string:encodingInvalidCharacters:)()
{
  return URL.init(string:encodingInvalidCharacters:)();
}

uint64_t URL.init(string:)()
{
  return URL.init(string:)();
}

uint64_t URL.init(filePath:directoryHint:relativeTo:)()
{
  return URL.init(filePath:directoryHint:relativeTo:)();
}

uint64_t URL.appending<A>(components:directoryHint:)()
{
  return URL.appending<A>(components:directoryHint:)();
}

uint64_t URL.appending<A>(path:directoryHint:)()
{
  return URL.appending<A>(path:directoryHint:)();
}

uint64_t URL.appending<A>(component:directoryHint:)()
{
  return URL.appending<A>(component:directoryHint:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

Swift::Void __swiftcall Data.LargeSlice.ensureUniqueReference()()
{
}

uint64_t Data.init(contentsOf:options:)()
{
  return Data.init(contentsOf:options:)();
}

Swift::Void __swiftcall Data.InlineSlice.ensureUniqueReference()()
{
}

uint64_t Data._copyContents(initializing:)()
{
  return Data._copyContents(initializing:)();
}

uint64_t Data.init(base64Encoded:options:)()
{
  return Data.init(base64Encoded:options:)();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return type metadata accessor for Data.RangeReference();
}

uint64_t Data._Representation.subscript.getter()
{
  return Data._Representation.subscript.getter();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  uint64_t v1 = Data.base64EncodedString(options:)(options);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Data.write(to:options:)()
{
  return Data.write(to:options:)();
}

uint64_t Data.append(_:)()
{
  return Data.append(_:)();
}

uint64_t type metadata accessor for Data.Iterator()
{
  return type metadata accessor for Data.Iterator();
}

uint64_t Date.timeIntervalSinceReferenceDate.getter()
{
  return Date.timeIntervalSinceReferenceDate.getter();
}

uint64_t Date.ISO8601Format(_:)()
{
  return Date.ISO8601Format(_:)();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return Date.timeIntervalSince(_:)();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator()
{
  return type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.DateSeparator()
{
  return type metadata accessor for Date.ISO8601FormatStyle.DateSeparator();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator()
{
  return type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator();
}

uint64_t Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)()
{
  return Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator()
{
  return type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle()
{
  return type metadata accessor for Date.ISO8601FormatStyle();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t static Date.- infix(_:_:)()
{
  return static Date.- infix(_:_:)();
}

uint64_t Date.timeIntervalSinceNow.getter()
{
  return Date.timeIntervalSinceNow.getter();
}

uint64_t Date.timeIntervalSince1970.getter()
{
  return Date.timeIntervalSince1970.getter();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

uint64_t Date.init()()
{
  return Date.init()();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t UUID.uuidString.getter()
{
  return UUID.uuidString.getter();
}

uint64_t static UUID.== infix(_:_:)()
{
  return static UUID.== infix(_:_:)();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t Locale.init(identifier:)()
{
  return Locale.init(identifier:)();
}

uint64_t static Locale.preferredLanguages.getter()
{
  return static Locale.preferredLanguages.getter();
}

uint64_t static Locale.current.getter()
{
  return static Locale.current.getter();
}

uint64_t Locale.Language.init(identifier:)()
{
  return Locale.Language.init(identifier:)();
}

uint64_t Locale.Language.minimalIdentifier.getter()
{
  return Locale.Language.minimalIdentifier.getter();
}

uint64_t type metadata accessor for Locale.Language()
{
  return type metadata accessor for Locale.Language();
}

uint64_t type metadata accessor for Locale()
{
  return type metadata accessor for Locale();
}

uint64_t Calendar.date(byAdding:value:to:wrappingComponents:)()
{
  return Calendar.date(byAdding:value:to:wrappingComponents:)();
}

uint64_t static Calendar.current.getter()
{
  return static Calendar.current.getter();
}

uint64_t type metadata accessor for Calendar.Component()
{
  return type metadata accessor for Calendar.Component();
}

uint64_t type metadata accessor for Calendar()
{
  return type metadata accessor for Calendar();
}

uint64_t TimeZone.init(secondsFromGMT:)()
{
  return TimeZone.init(secondsFromGMT:)();
}

uint64_t type metadata accessor for TimeZone()
{
  return type metadata accessor for TimeZone();
}

uint64_t static URLError.Code.networkConnectionLost.getter()
{
  return static URLError.Code.networkConnectionLost.getter();
}

uint64_t static URLError.Code.notConnectedToInternet.getter()
{
  return static URLError.Code.notConnectedToInternet.getter();
}

uint64_t static URLError.Code.timedOut.getter()
{
  return static URLError.Code.timedOut.getter();
}

uint64_t type metadata accessor for URLError.Code()
{
  return type metadata accessor for URLError.Code();
}

uint64_t URLError._nsError.getter()
{
  return URLError._nsError.getter();
}

uint64_t static URLError.cancelled.getter()
{
  return static URLError.cancelled.getter();
}

uint64_t type metadata accessor for URLError()
{
  return type metadata accessor for URLError();
}

uint64_t PackageValidator.init(signatureData:requireTrust:)()
{
  return PackageValidator.init(signatureData:requireTrust:)();
}

uint64_t dispatch thunk of PackageValidator.validateResource(_:withData:)()
{
  return dispatch thunk of PackageValidator.validateResource(_:withData:)();
}

uint64_t type metadata accessor for PackageValidator()
{
  return type metadata accessor for PackageValidator();
}

uint64_t static OSEligibilityAnswer.== infix(_:_:)()
{
  return static OSEligibilityAnswer.== infix(_:_:)();
}

uint64_t type metadata accessor for OSEligibilityAnswer()
{
  return type metadata accessor for OSEligibilityAnswer();
}

uint64_t type metadata accessor for OSEligibilityDomain()
{
  return type metadata accessor for OSEligibilityDomain();
}

uint64_t OSEligibilityResult.answer.getter()
{
  return OSEligibilityResult.answer.getter();
}

uint64_t static OSEligibilityResult.result(for:auditToken:)()
{
  return static OSEligibilityResult.result(for:auditToken:)();
}

uint64_t static OSEligibilityResult.result(for:)()
{
  return static OSEligibilityResult.result(for:)();
}

uint64_t type metadata accessor for OSEligibilityResult()
{
  return type metadata accessor for OSEligibilityResult();
}

uint64_t static _CFObject.== infix(_:_:)()
{
  return static _CFObject.== infix(_:_:)();
}

uint64_t _CFObject.hash(into:)()
{
  return _CFObject.hash(into:)();
}

uint64_t _CFObject.hashValue.getter()
{
  return _CFObject.hashValue.getter();
}

uint64_t MarketplaceKitError.description.getter()
{
  return MarketplaceKitError.description.getter();
}

uint64_t type metadata accessor for MarketplaceKitError()
{
  return type metadata accessor for MarketplaceKitError();
}

uint64_t AppVersion.init(appleItemID:appleVersionID:)()
{
  return AppVersion.init(appleItemID:appleVersionID:)();
}

uint64_t AppVersion.appleItemID.getter()
{
  return AppVersion.appleItemID.getter();
}

uint64_t type metadata accessor for AppVersion()
{
  return type metadata accessor for AppVersion();
}

uint64_t type metadata accessor for FeatureFlag()
{
  return type metadata accessor for FeatureFlag();
}

uint64_t UpdateMetadata.shortVersionString.getter()
{
  return UpdateMetadata.shortVersionString.getter();
}

uint64_t UpdateMetadata.itemID.getter()
{
  return UpdateMetadata.itemID.getter();
}

uint64_t UpdateMetadata.init(bundleID:bundleVersion:itemID:shortVersionString:)()
{
  return UpdateMetadata.init(bundleID:bundleVersion:itemID:shortVersionString:)();
}

uint64_t UpdateMetadata.bundleID.getter()
{
  return UpdateMetadata.bundleID.getter();
}

uint64_t type metadata accessor for UpdateMetadata()
{
  return type metadata accessor for UpdateMetadata();
}

uint64_t AutomaticUpdate.appShareURL.getter()
{
  return AutomaticUpdate.appShareURL.getter();
}

uint64_t AutomaticUpdate.appleItemID.getter()
{
  return AutomaticUpdate.appleItemID.getter();
}

uint64_t AutomaticUpdate.installVerificationToken.getter()
{
  return AutomaticUpdate.installVerificationToken.getter();
}

uint64_t AutomaticUpdate.alternativeDistributionPackage.getter()
{
  return AutomaticUpdate.alternativeDistributionPackage.getter();
}

uint64_t AutomaticUpdate.account.getter()
{
  return AutomaticUpdate.account.getter();
}

uint64_t type metadata accessor for AutomaticUpdate()
{
  return type metadata accessor for AutomaticUpdate();
}

uint64_t type metadata accessor for SecureButtonTag.ButtonImagePlacement()
{
  return type metadata accessor for SecureButtonTag.ButtonImagePlacement();
}

uint64_t SecureButtonTag.borderColor.getter()
{
  return SecureButtonTag.borderColor.getter();
}

uint64_t SecureButtonTag.borderWidth.getter()
{
  return SecureButtonTag.borderWidth.getter();
}

uint64_t SecureButtonTag.cornerRadius.getter()
{
  return SecureButtonTag.cornerRadius.getter();
}

uint64_t SecureButtonTag.imagePlacement.getter()
{
  return SecureButtonTag.imagePlacement.getter();
}

uint64_t SecureButtonTag.backgroundColor.getter()
{
  return SecureButtonTag.backgroundColor.getter();
}

uint64_t SecureButtonTag.foregroundColor.getter()
{
  return SecureButtonTag.foregroundColor.getter();
}

uint64_t SecureButtonTag.size.getter()
{
  return SecureButtonTag.size.getter();
}

uint64_t SecureButtonTag.label.getter()
{
  return SecureButtonTag.label.getter();
}

uint64_t SecureButtonTag.fontSize.getter()
{
  return SecureButtonTag.fontSize.getter();
}

uint64_t SecureButtonTag.imageName.getter()
{
  return SecureButtonTag.imageName.getter();
}

uint64_t type metadata accessor for SecureButtonTag()
{
  return type metadata accessor for SecureButtonTag();
}

uint64_t isFeatureEnabled(_:)()
{
  return isFeatureEnabled(_:)();
}

uint64_t AppInstallRequest.isMarketplaceInstall.getter()
{
  return AppInstallRequest.isMarketplaceInstall.getter();
}

uint64_t AppInstallRequest.oAuthToken.getter()
{
  return AppInstallRequest.oAuthToken.getter();
}

uint64_t AppInstallRequest.appShareURL.getter()
{
  return AppInstallRequest.appShareURL.getter();
}

uint64_t AppInstallRequest.installVerificationToken.getter()
{
  return AppInstallRequest.installVerificationToken.getter();
}

uint64_t AppInstallRequest.id.getter()
{
  return AppInstallRequest.id.getter();
}

uint64_t AppInstallRequest.adp.getter()
{
  return AppInstallRequest.adp.getter();
}

uint64_t AppInstallRequest.init(adp:type:oAuthToken:installVerificationToken:accountID:appShareURL:)()
{
  return AppInstallRequest.init(adp:type:oAuthToken:installVerificationToken:accountID:appShareURL:)();
}

uint64_t AppInstallRequest.type.getter()
{
  return AppInstallRequest.type.getter();
}

uint64_t AppInstallRequest.referrer.getter()
{
  return AppInstallRequest.referrer.getter();
}

uint64_t AppInstallRequest.accountID.getter()
{
  return AppInstallRequest.accountID.getter();
}

uint64_t type metadata accessor for AppInstallRequest()
{
  return type metadata accessor for AppInstallRequest();
}

uint64_t ApprovedDeveloper.identifier.getter()
{
  return ApprovedDeveloper.identifier.getter();
}

uint64_t ApprovedDeveloper.supportURL.getter()
{
  return ApprovedDeveloper.supportURL.getter();
}

uint64_t ApprovedDeveloper.init(name:identifier:supportURL:)()
{
  return ApprovedDeveloper.init(name:identifier:supportURL:)();
}

uint64_t ApprovedDeveloper.name.getter()
{
  return ApprovedDeveloper.name.getter();
}

uint64_t type metadata accessor for ApprovedDeveloper()
{
  return type metadata accessor for ApprovedDeveloper();
}

uint64_t CodableAuditToken.auditToken.getter()
{
  return CodableAuditToken.auditToken.getter();
}

uint64_t type metadata accessor for CodableAuditToken()
{
  return type metadata accessor for CodableAuditToken();
}

uint64_t type metadata accessor for FetchDataResponse.Response()
{
  return type metadata accessor for FetchDataResponse.Response();
}

uint64_t FetchDataResponse.init(response:)()
{
  return FetchDataResponse.init(response:)();
}

uint64_t type metadata accessor for FetchDataResponse()
{
  return type metadata accessor for FetchDataResponse();
}

uint64_t PromoteAppsRequest.appsToPromote.getter()
{
  return PromoteAppsRequest.appsToPromote.getter();
}

uint64_t type metadata accessor for PromoteAppsRequest()
{
  return type metadata accessor for PromoteAppsRequest();
}

uint64_t InstallRequirements.expectedInstallSize.getter()
{
  return InstallRequirements.expectedInstallSize.getter();
}

uint64_t InstallRequirements.ageRatingRank.getter()
{
  return InstallRequirements.ageRatingRank.getter();
}

uint64_t InstallRequirements.minimumSystemVersion.getter()
{
  return InstallRequirements.minimumSystemVersion.getter();
}

uint64_t InstallRequirements.requiredDeviceCapabilities.getter()
{
  return InstallRequirements.requiredDeviceCapabilities.getter();
}

uint64_t type metadata accessor for InstallRequirements()
{
  return type metadata accessor for InstallRequirements();
}

uint64_t type metadata accessor for InstallSheetContext.InstallType()
{
  return type metadata accessor for InstallSheetContext.InstallType();
}

uint64_t InstallSheetContext.Source.WebInstallContext.init(domain:developerName:developerID:appName:iconURL:)()
{
  return InstallSheetContext.Source.WebInstallContext.init(domain:developerName:developerID:appName:iconURL:)();
}

uint64_t type metadata accessor for InstallSheetContext.Source.WebInstallContext()
{
  return type metadata accessor for InstallSheetContext.Source.WebInstallContext();
}

uint64_t type metadata accessor for InstallSheetContext.Source()
{
  return type metadata accessor for InstallSheetContext.Source();
}

uint64_t InstallSheetContext.init(itemID:versionID:source:type:logKey:learnMoreURL:authenticationContextData:showBiometricsForAppStoreInstall:)()
{
  return InstallSheetContext.init(itemID:versionID:source:type:logKey:learnMoreURL:authenticationContextData:showBiometricsForAppStoreInstall:)();
}

uint64_t type metadata accessor for InstallSheetContext()
{
  return type metadata accessor for InstallSheetContext();
}

uint64_t AppDistributorResult.init(distributorID:requestingBundleID:)()
{
  return AppDistributorResult.init(distributorID:requestingBundleID:)();
}

uint64_t type metadata accessor for AppDistributorResult()
{
  return type metadata accessor for AppDistributorResult();
}

uint64_t type metadata accessor for PerformActionRequest.Request()
{
  return type metadata accessor for PerformActionRequest.Request();
}

uint64_t PerformActionRequest.stringValue.getter()
{
  return PerformActionRequest.stringValue.getter();
}

uint64_t PerformActionRequest.request.getter()
{
  return PerformActionRequest.request.getter();
}

uint64_t type metadata accessor for PerformActionRequest()
{
  return type metadata accessor for PerformActionRequest();
}

uint64_t PrioritizeAppRequest.appToPrioritize.getter()
{
  return PrioritizeAppRequest.appToPrioritize.getter();
}

uint64_t type metadata accessor for PrioritizeAppRequest()
{
  return type metadata accessor for PrioritizeAppRequest();
}

uint64_t static PrivateNotifications.priorityOrAllowedDevelopersChangedNotificationName.getter()
{
  return static PrivateNotifications.priorityOrAllowedDevelopersChangedNotificationName.getter();
}

uint64_t type metadata accessor for SetPublicDataRequest.Request()
{
  return type metadata accessor for SetPublicDataRequest.Request();
}

uint64_t SetPublicDataRequest.request.getter()
{
  return SetPublicDataRequest.request.getter();
}

uint64_t type metadata accessor for SetPublicDataRequest()
{
  return type metadata accessor for SetPublicDataRequest();
}

uint64_t type metadata accessor for PerformActionResponse.Response()
{
  return type metadata accessor for PerformActionResponse.Response();
}

uint64_t PerformActionResponse.init(response:)()
{
  return PerformActionResponse.init(response:)();
}

uint64_t type metadata accessor for PerformActionResponse()
{
  return type metadata accessor for PerformActionResponse();
}

uint64_t PollForUpdatesRequest.shouldStartUpdates.getter()
{
  return PollForUpdatesRequest.shouldStartUpdates.getter();
}

uint64_t PollForUpdatesRequest.domain.getter()
{
  return PollForUpdatesRequest.domain.getter();
}

uint64_t type metadata accessor for PollForUpdatesRequest()
{
  return type metadata accessor for PollForUpdatesRequest();
}

uint64_t type metadata accessor for SetPrivateDataRequest.Request()
{
  return type metadata accessor for SetPrivateDataRequest.Request();
}

uint64_t SetPrivateDataRequest.stringValue.getter()
{
  return SetPrivateDataRequest.stringValue.getter();
}

uint64_t SetPrivateDataRequest.request.getter()
{
  return SetPrivateDataRequest.request.getter();
}

uint64_t type metadata accessor for SetPrivateDataRequest()
{
  return type metadata accessor for SetPrivateDataRequest();
}

uint64_t UpdateMetadataRequest.shouldCheckInWithServer.getter()
{
  return UpdateMetadataRequest.shouldCheckInWithServer.getter();
}

uint64_t UpdateMetadataRequest.bundleID.getter()
{
  return UpdateMetadataRequest.bundleID.getter();
}

uint64_t type metadata accessor for UpdateMetadataRequest()
{
  return type metadata accessor for UpdateMetadataRequest();
}

uint64_t type metadata accessor for FetchPublicDataRequest.Request()
{
  return type metadata accessor for FetchPublicDataRequest.Request();
}

uint64_t FetchPublicDataRequest.request.getter()
{
  return FetchPublicDataRequest.request.getter();
}

uint64_t type metadata accessor for FetchPublicDataRequest()
{
  return type metadata accessor for FetchPublicDataRequest();
}

uint64_t DiscoverRestoresRequest.promptToInstallDistributors.getter()
{
  return DiscoverRestoresRequest.promptToInstallDistributors.getter();
}

uint64_t DiscoverRestoresRequest.accountID.getter()
{
  return DiscoverRestoresRequest.accountID.getter();
}

uint64_t type metadata accessor for DiscoverRestoresRequest()
{
  return type metadata accessor for DiscoverRestoresRequest();
}

uint64_t type metadata accessor for FetchPrivateDataRequest.Request()
{
  return type metadata accessor for FetchPrivateDataRequest.Request();
}

uint64_t FetchPrivateDataRequest.request.getter()
{
  return FetchPrivateDataRequest.request.getter();
}

uint64_t type metadata accessor for FetchPrivateDataRequest()
{
  return type metadata accessor for FetchPrivateDataRequest();
}

uint64_t LocalizedStringsRequest.LocalizedString.replacementTokens.getter()
{
  return LocalizedStringsRequest.LocalizedString.replacementTokens.getter();
}

uint64_t LocalizedStringsRequest.LocalizedString.key.getter()
{
  return LocalizedStringsRequest.LocalizedString.key.getter();
}

uint64_t type metadata accessor for LocalizedStringsRequest.LocalizedString()
{
  return type metadata accessor for LocalizedStringsRequest.LocalizedString();
}

uint64_t LicenseResolutionContext.init(logKey:url:)()
{
  return LicenseResolutionContext.init(logKey:url:)();
}

uint64_t type metadata accessor for LicenseResolutionContext()
{
  return type metadata accessor for LicenseResolutionContext();
}

uint64_t LicenseResolutionRequest.init(context:)()
{
  return LicenseResolutionRequest.init(context:)();
}

uint64_t type metadata accessor for LicenseResolutionRequest()
{
  return type metadata accessor for LicenseResolutionRequest();
}

uint64_t ManifestValidationRequest.primaryProductVariant.getter()
{
  return ManifestValidationRequest.primaryProductVariant.getter();
}

uint64_t ManifestValidationRequest.compatibleProductVariants.getter()
{
  return ManifestValidationRequest.compatibleProductVariants.getter();
}

uint64_t ManifestValidationRequest.url.getter()
{
  return ManifestValidationRequest.url.getter();
}

uint64_t ManifestValidationRequest.osVersion.getter()
{
  return ManifestValidationRequest.osVersion.getter();
}

uint64_t type metadata accessor for ManifestValidationRequest()
{
  return type metadata accessor for ManifestValidationRequest();
}

uint64_t OAuthAuthorizationContext.init(logKey:requestURL:)()
{
  return OAuthAuthorizationContext.init(logKey:requestURL:)();
}

uint64_t type metadata accessor for OAuthAuthorizationContext()
{
  return type metadata accessor for OAuthAuthorizationContext();
}

uint64_t OAuthAuthorizationRequest.init(context:)()
{
  return OAuthAuthorizationRequest.init(context:)();
}

uint64_t type metadata accessor for OAuthAuthorizationRequest()
{
  return type metadata accessor for OAuthAuthorizationRequest();
}

uint64_t SecureButtonActionRequest.Action.stringValue.getter()
{
  return SecureButtonActionRequest.Action.stringValue.getter();
}

uint64_t type metadata accessor for SecureButtonActionRequest.Action()
{
  return type metadata accessor for SecureButtonActionRequest.Action();
}

uint64_t SecureButtonActionRequest.authenticationMessage.getter()
{
  return SecureButtonActionRequest.authenticationMessage.getter();
}

uint64_t SecureButtonActionRequest.action.getter()
{
  return SecureButtonActionRequest.action.getter();
}

uint64_t type metadata accessor for SecureButtonActionRequest()
{
  return type metadata accessor for SecureButtonActionRequest();
}

uint64_t InstallConfirmationRequest.init(context:)()
{
  return InstallConfirmationRequest.init(context:)();
}

uint64_t type metadata accessor for InstallConfirmationRequest()
{
  return type metadata accessor for InstallConfirmationRequest();
}

uint64_t type metadata accessor for SecureButtonActionResponse.ResponseType()
{
  return type metadata accessor for SecureButtonActionResponse.ResponseType();
}

uint64_t SecureButtonActionResponse.init(type:)()
{
  return SecureButtonActionResponse.init(type:)();
}

uint64_t type metadata accessor for SecureButtonActionResponse()
{
  return type metadata accessor for SecureButtonActionResponse();
}

uint64_t AvailableAppMetadataRequest.distributorID.getter()
{
  return AvailableAppMetadataRequest.distributorID.getter();
}

uint64_t AvailableAppMetadataRequest.ids.getter()
{
  return AvailableAppMetadataRequest.ids.getter();
}

uint64_t type metadata accessor for AvailableAppMetadataRequest()
{
  return type metadata accessor for AvailableAppMetadataRequest();
}

uint64_t type metadata accessor for PerformPrivateActionRequest.Request()
{
  return type metadata accessor for PerformPrivateActionRequest.Request();
}

uint64_t PerformPrivateActionRequest.stringValue.getter()
{
  return PerformPrivateActionRequest.stringValue.getter();
}

uint64_t PerformPrivateActionRequest.request.getter()
{
  return PerformPrivateActionRequest.request.getter();
}

uint64_t type metadata accessor for PerformPrivateActionRequest()
{
  return type metadata accessor for PerformPrivateActionRequest();
}

uint64_t type metadata accessor for PerformPrivateActionResponse.Response()
{
  return type metadata accessor for PerformPrivateActionResponse.Response();
}

uint64_t PerformPrivateActionResponse.init(response:)()
{
  return PerformPrivateActionResponse.init(response:)();
}

uint64_t type metadata accessor for PerformPrivateActionResponse()
{
  return type metadata accessor for PerformPrivateActionResponse();
}

uint64_t DeveloperApprovalSheetContext.init(title:body:firstBulletTitle:firstBulletBody:secondBulletTitle:secondBulletBody:thirdBulletTitle:thirdBulletBody:allowButtonText:ignoreButtonText:developerID:developerName:supportURL:passcodeTitle:passcodeReason:touchIDTitle:touchIDReason:)()
{
  return DeveloperApprovalSheetContext.init(title:body:firstBulletTitle:firstBulletBody:secondBulletTitle:secondBulletBody:thirdBulletTitle:thirdBulletBody:allowButtonText:ignoreButtonText:developerID:developerName:supportURL:passcodeTitle:passcodeReason:touchIDTitle:touchIDReason:)();
}

uint64_t type metadata accessor for DeveloperApprovalSheetContext()
{
  return type metadata accessor for DeveloperApprovalSheetContext();
}

uint64_t static TokenHandoff.handoffPODToken(tokenData:advertisedItemID:)()
{
  return static TokenHandoff.handoffPODToken(tokenData:advertisedItemID:)();
}

uint64_t static RegexComponent<>.localizedInteger(locale:)()
{
  return static RegexComponent<>.localizedInteger(locale:)();
}

uint64_t Regex.Match.output.getter()
{
  return Regex.Match.output.getter();
}

uint64_t _AppExtensionProcess.auditToken.getter()
{
  return _AppExtensionProcess.auditToken.getter();
}

Swift::Void __swiftcall _AppExtensionProcess.invalidate()()
{
}

uint64_t _AppExtensionProcess.Configuration.init(appExtension:onInterruption:)()
{
  return _AppExtensionProcess.Configuration.init(appExtension:onInterruption:)();
}

uint64_t type metadata accessor for _AppExtensionProcess.Configuration()
{
  return type metadata accessor for _AppExtensionProcess.Configuration();
}

NSXPCConnection __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _AppExtensionProcess.makeXPCConnection()()
{
  return (NSXPCConnection)_AppExtensionProcess.makeXPCConnection()();
}

uint64_t type metadata accessor for _AppExtensionProcess()
{
  return type metadata accessor for _AppExtensionProcess();
}

uint64_t type metadata accessor for _AppExtensionIdentity()
{
  return type metadata accessor for _AppExtensionIdentity();
}

uint64_t _AppExtensionIdentity.init(_:)()
{
  return _AppExtensionIdentity.init(_:)();
}

uint64_t type metadata accessor for AppInstallType()
{
  return type metadata accessor for AppInstallType();
}

uint64_t AppInstallationEligibility.init(accountID:storefront:eligible:)()
{
  return AppInstallationEligibility.init(accountID:storefront:eligible:)();
}

uint64_t type metadata accessor for AppInstallationEligibility()
{
  return type metadata accessor for AppInstallationEligibility();
}

uint64_t AppInstallationEvent.init(bundleID:eligibility:externalVersionID:installDate:installType:isBeta:itemID:osVersion:platform:source:token:webDomain:)()
{
  return AppInstallationEvent.init(bundleID:eligibility:externalVersionID:installDate:installType:isBeta:itemID:osVersion:platform:source:token:webDomain:)();
}

uint64_t type metadata accessor for AppInstallationEvent()
{
  return type metadata accessor for AppInstallationEvent();
}

uint64_t type metadata accessor for AppInstallationMetricsClient()
{
  return type metadata accessor for AppInstallationMetricsClient();
}

uint64_t DDMAppOrUpdateManagedAppRequest.app.getter()
{
  return DDMAppOrUpdateManagedAppRequest.app.getter();
}

uint64_t type metadata accessor for DDMAppOrUpdateManagedAppRequest()
{
  return type metadata accessor for DDMAppOrUpdateManagedAppRequest();
}

Swift::Bool __swiftcall isManagedAppDistributionEnabled()()
{
  return isManagedAppDistributionEnabled()();
}

uint64_t StoreAppIdentifier.description.getter()
{
  return StoreAppIdentifier.description.getter();
}

uint64_t static StoreAppIdentifier.== infix(_:_:)()
{
  return static StoreAppIdentifier.== infix(_:_:)();
}

uint64_t StoreAppIdentifier.hash(into:)()
{
  return StoreAppIdentifier.hash(into:)();
}

uint64_t StoreAppIdentifier.itemID.getter()
{
  return StoreAppIdentifier.itemID.getter();
}

uint64_t StoreAppIdentifier.bundleID.getter()
{
  return StoreAppIdentifier.bundleID.getter();
}

uint64_t AppInstallRequestType.requiresInstallSheet.getter()
{
  return AppInstallRequestType.requiresInstallSheet.getter();
}

uint64_t AppInstallRequestType.isUserInitiated.getter()
{
  return AppInstallRequestType.isUserInitiated.getter();
}

uint64_t AppInstallRequestType.isUpdate.getter()
{
  return AppInstallRequestType.isUpdate.getter();
}

uint64_t AppInstallRequestType.rawValue.getter()
{
  return AppInstallRequestType.rawValue.getter();
}

uint64_t AppInstallRequestType.isRestore.getter()
{
  return AppInstallRequestType.isRestore.getter();
}

uint64_t type metadata accessor for AppInstallRequestType()
{
  return type metadata accessor for AppInstallRequestType();
}

uint64_t AppStateUpdateIdentifier.appStateIdentifiers.getter()
{
  return AppStateUpdateIdentifier.appStateIdentifiers.getter();
}

uint64_t type metadata accessor for AppStateUpdateIdentifier()
{
  return type metadata accessor for AppStateUpdateIdentifier();
}

uint64_t AppStateUpdateIdentifier.init(_:)()
{
  return AppStateUpdateIdentifier.init(_:)();
}

uint64_t AppState.isComplete.getter()
{
  return AppState.isComplete.getter();
}

uint64_t type metadata accessor for AppState.Availability()
{
  return type metadata accessor for AppState.Availability();
}

uint64_t static AppState.== infix(_:_:)()
{
  return static AppState.== infix(_:_:)();
}

uint64_t type metadata accessor for AppState()
{
  return type metadata accessor for AppState();
}

uint64_t AppProgress.init(state:identifier:)()
{
  return AppProgress.init(state:identifier:)();
}

uint64_t type metadata accessor for AppProgress()
{
  return type metadata accessor for AppProgress();
}

uint64_t ManagedApp.init(declarationIdentifier:bundleID:itemID:externalVersionID:platform:fileSize:metadataLanguage:name:subtitle:seller:genres:description:languages:requirements:version:releaseDate:releaseNotes:icon:iconURL:screenshots:contentRating:developerWebsite:privacyPolicy:hasLicenseAgreement:copyright:buyParams:)()
{
  return ManagedApp.init(declarationIdentifier:bundleID:itemID:externalVersionID:platform:fileSize:metadataLanguage:name:subtitle:seller:genres:description:languages:requirements:version:releaseDate:releaseNotes:icon:iconURL:screenshots:contentRating:developerWebsite:privacyPolicy:hasLicenseAgreement:copyright:buyParams:)();
}

uint64_t ManagedApp.declarationIdentifier.getter()
{
  return ManagedApp.declarationIdentifier.getter();
}

uint64_t ManagedApp.Artwork.init(urlTemplate:maxWidth:maxHeight:)()
{
  return ManagedApp.Artwork.init(urlTemplate:maxWidth:maxHeight:)();
}

uint64_t type metadata accessor for ManagedApp.Artwork()
{
  return type metadata accessor for ManagedApp.Artwork();
}

uint64_t ManagedApp.bundleID.getter()
{
  return ManagedApp.bundleID.getter();
}

uint64_t type metadata accessor for ManagedApp()
{
  return type metadata accessor for ManagedApp();
}

uint64_t ManagedAppDeclaration.Attributes.dictionaryRepresentation()()
{
  return ManagedAppDeclaration.Attributes.dictionaryRepresentation()();
}

uint64_t ManagedAppDeclaration.Attributes.rawValue.getter()
{
  return ManagedAppDeclaration.Attributes.rawValue.getter();
}

uint64_t ManagedAppDeclaration.Attributes.init(rawValue:)()
{
  return ManagedAppDeclaration.Attributes.init(rawValue:)();
}

uint64_t type metadata accessor for ManagedAppDeclaration.Attributes()
{
  return type metadata accessor for ManagedAppDeclaration.Attributes();
}

uint64_t ManagedAppDeclaration.attributes.getter()
{
  return ManagedAppDeclaration.attributes.getter();
}

uint64_t ManagedAppDeclaration.BackupBehavior.backupAppData.getter()
{
  return ManagedAppDeclaration.BackupBehavior.backupAppData.getter();
}

uint64_t type metadata accessor for ManagedAppDeclaration.BackupBehavior()
{
  return type metadata accessor for ManagedAppDeclaration.BackupBehavior();
}

uint64_t ManagedAppDeclaration.backupBehavior.getter()
{
  return ManagedAppDeclaration.backupBehavior.getter();
}

uint64_t ManagedAppDeclaration.declarationKey.getter()
{
  return ManagedAppDeclaration.declarationKey.getter();
}

uint64_t ManagedAppDeclaration.updateBehavior.getter()
{
  return ManagedAppDeclaration.updateBehavior.getter();
}

uint64_t type metadata accessor for ManagedAppDeclaration.InstallBehavior.InstallTimingEnum()
{
  return type metadata accessor for ManagedAppDeclaration.InstallBehavior.InstallTimingEnum();
}

uint64_t static ManagedAppDeclaration.InstallBehavior.LicenseEnum.== infix(_:_:)()
{
  return static ManagedAppDeclaration.InstallBehavior.LicenseEnum.== infix(_:_:)();
}

uint64_t type metadata accessor for ManagedAppDeclaration.InstallBehavior.LicenseEnum()
{
  return type metadata accessor for ManagedAppDeclaration.InstallBehavior.LicenseEnum();
}

uint64_t ManagedAppDeclaration.InstallBehavior.installTiming.getter()
{
  return ManagedAppDeclaration.InstallBehavior.installTiming.getter();
}

uint64_t ManagedAppDeclaration.InstallBehavior.purchaseMethod.getter()
{
  return ManagedAppDeclaration.InstallBehavior.purchaseMethod.getter();
}

uint64_t type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum()
{
  return type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum();
}

uint64_t ManagedAppDeclaration.InstallBehavior.isAccountPromptAllowed.getter()
{
  return ManagedAppDeclaration.InstallBehavior.isAccountPromptAllowed.getter();
}

uint64_t type metadata accessor for ManagedAppDeclaration.InstallBehavior()
{
  return type metadata accessor for ManagedAppDeclaration.InstallBehavior();
}

uint64_t ManagedAppDeclaration.installBehavior.getter()
{
  return ManagedAppDeclaration.installBehavior.getter();
}

uint64_t ManagedAppDeclaration.managementScope.getter()
{
  return ManagedAppDeclaration.managementScope.getter();
}

uint64_t ManagedAppDeclaration.personaIdentifier.getter()
{
  return ManagedAppDeclaration.personaIdentifier.getter();
}

uint64_t type metadata accessor for ManagedAppDeclaration.UpdateBehaviorEnum()
{
  return type metadata accessor for ManagedAppDeclaration.UpdateBehaviorEnum();
}

uint64_t ManagedAppDeclaration.declarationIdentifier.getter()
{
  return ManagedAppDeclaration.declarationIdentifier.getter();
}

uint64_t ManagedAppDeclaration.platform.getter()
{
  return ManagedAppDeclaration.platform.getter();
}

uint64_t type metadata accessor for ManagedAppDeclaration()
{
  return type metadata accessor for ManagedAppDeclaration();
}

uint64_t ManagedAppCancelRequest.declarationIdentifier.getter()
{
  return ManagedAppCancelRequest.declarationIdentifier.getter();
}

uint64_t type metadata accessor for ManagedAppCancelRequest()
{
  return type metadata accessor for ManagedAppCancelRequest();
}

uint64_t ManagedAppInstallRequest.userInitiated.getter()
{
  return ManagedAppInstallRequest.userInitiated.getter();
}

uint64_t ManagedAppInstallRequest.externalVersionID.getter()
{
  return ManagedAppInstallRequest.externalVersionID.getter();
}

uint64_t ManagedAppInstallRequest.declarationIdentifier.getter()
{
  return ManagedAppInstallRequest.declarationIdentifier.getter();
}

uint64_t type metadata accessor for ManagedAppInstallRequest()
{
  return type metadata accessor for ManagedAppInstallRequest();
}

uint64_t type metadata accessor for ManagedAppStatus.UpdateState()
{
  return type metadata accessor for ManagedAppStatus.UpdateState();
}

uint64_t ManagedAppStatus.InstalledVersionInfo.init(appleVersionID:bundleVersion:bundleShortVersion:)()
{
  return ManagedAppStatus.InstalledVersionInfo.init(appleVersionID:bundleVersion:bundleShortVersion:)();
}

uint64_t type metadata accessor for ManagedAppStatus.InstalledVersionInfo()
{
  return type metadata accessor for ManagedAppStatus.InstalledVersionInfo();
}

uint64_t ManagedAppStatus.State.rawValue.getter()
{
  return ManagedAppStatus.State.rawValue.getter();
}

uint64_t type metadata accessor for ManagedAppStatus.State()
{
  return type metadata accessor for ManagedAppStatus.State();
}

uint64_t ManagedAppStatus.Reason.rawValue.getter()
{
  return ManagedAppStatus.Reason.rawValue.getter();
}

uint64_t type metadata accessor for ManagedAppStatus.Reason()
{
  return type metadata accessor for ManagedAppStatus.Reason();
}

uint64_t ManagedAppStatus.init(bundleID:declarationIdentifier:declarationKey:state:updateState:reasons:name:installedVersionInfo:purchaseMethod:)()
{
  return ManagedAppStatus.init(bundleID:declarationIdentifier:declarationKey:state:updateState:reasons:name:installedVersionInfo:purchaseMethod:)();
}

uint64_t type metadata accessor for ManagedAppStatus()
{
  return type metadata accessor for ManagedAppStatus();
}

uint64_t ManagedAppDistributionError.description.getter()
{
  return ManagedAppDistributionError.description.getter();
}

uint64_t static ManagedAppDistributionError.== infix(_:_:)()
{
  return static ManagedAppDistributionError.== infix(_:_:)();
}

uint64_t type metadata accessor for ManagedAppDistributionError()
{
  return type metadata accessor for ManagedAppDistributionError();
}

uint64_t RestoreRequest.requestType.getter()
{
  return RestoreRequest.requestType.getter();
}

uint64_t type metadata accessor for RestoreRequest()
{
  return type metadata accessor for RestoreRequest();
}

uint64_t ServiceMachName.getter()
{
  return ServiceMachName.getter();
}

uint64_t decodeXPCValues<each A, B>(from:)()
{
  return decodeXPCValues<each A, B>(from:)();
}

uint64_t encodeXPCValues<each A>(_:)()
{
  return encodeXPCValues<each A>(_:)();
}

uint64_t static CellularIdentity.current()()
{
  return static CellularIdentity.current()();
}

uint64_t CellularIdentity.isRoaming.getter()
{
  return CellularIdentity.isRoaming.getter();
}

uint64_t type metadata accessor for CellularIdentity()
{
  return type metadata accessor for CellularIdentity();
}

uint64_t CellularSettings.cellularData.getter()
{
  return CellularSettings.cellularData.getter();
}

uint64_t CellularSettings.allowAutomaticDownloads.getter()
{
  return CellularSettings.allowAutomaticDownloads.getter();
}

uint64_t CellularSettings.init(for:)()
{
  return CellularSettings.init(for:)();
}

uint64_t type metadata accessor for CellularSettings.Prompt()
{
  return type metadata accessor for CellularSettings.Prompt();
}

uint64_t type metadata accessor for CellularSettings()
{
  return type metadata accessor for CellularSettings();
}

uint64_t static XPCClientMessage.managedAppCatalog(apps:error:)()
{
  return static XPCClientMessage.managedAppCatalog(apps:error:)();
}

uint64_t static XPCClientMessage.appCatalog(_:)()
{
  return static XPCClientMessage.appCatalog(_:)();
}

uint64_t static XPCClientMessage.appProgress(_:)()
{
  return static XPCClientMessage.appProgress(_:)();
}

uint64_t static XPCClientMessage.connectionEstablished.getter()
{
  return static XPCClientMessage.connectionEstablished.getter();
}

uint64_t type metadata accessor for XPCClientMessage()
{
  return type metadata accessor for XPCClientMessage();
}

uint64_t static DDMPurchaseMethod.== infix(_:_:)()
{
  return static DDMPurchaseMethod.== infix(_:_:)();
}

uint64_t type metadata accessor for DDMPurchaseMethod()
{
  return type metadata accessor for DDMPurchaseMethod();
}

uint64_t DiagnosticRequest.requestType.getter()
{
  return DiagnosticRequest.requestType.getter();
}

uint64_t type metadata accessor for DiagnosticRequest()
{
  return type metadata accessor for DiagnosticRequest();
}

uint64_t VPPInstallRequest.appIdentifier.getter()
{
  return VPPInstallRequest.appIdentifier.getter();
}

uint64_t VPPInstallRequest.accountIdentifier.getter()
{
  return VPPInstallRequest.accountIdentifier.getter();
}

uint64_t VPPInstallRequest.id.getter()
{
  return VPPInstallRequest.id.getter();
}

uint64_t VPPInstallRequest.evid.getter()
{
  return VPPInstallRequest.evid.getter();
}

uint64_t type metadata accessor for VPPInstallRequest()
{
  return type metadata accessor for VPPInstallRequest();
}

Swift::Void __swiftcall XPCClientProtocol.logMessage(_:)(Swift::String a1)
{
}

uint64_t XPCClientProtocol.handleMessage(_:)()
{
  return XPCClientProtocol.handleMessage(_:)();
}

Swift::Void __swiftcall XPCClientProtocol.handleMessages(_:)(Swift::OpaquePointer a1)
{
}

uint64_t static RestoreRequestType.== infix(_:_:)()
{
  return static RestoreRequestType.== infix(_:_:)();
}

uint64_t type metadata accessor for RestoreRequestType()
{
  return type metadata accessor for RestoreRequestType();
}

uint64_t type metadata accessor for MessageRegistration()
{
  return type metadata accessor for MessageRegistration();
}

uint64_t type metadata accessor for DiagnosticRequestType()
{
  return type metadata accessor for DiagnosticRequestType();
}

uint64_t OAuthAuthorizeRequest.endpointURL.getter()
{
  return OAuthAuthorizeRequest.endpointURL.getter();
}

uint64_t OAuthAuthorizeRequest.isMarketplace.getter()
{
  return OAuthAuthorizeRequest.isMarketplace.getter();
}

uint64_t OAuthAuthorizeRequest.isUpdate.getter()
{
  return OAuthAuthorizeRequest.isUpdate.getter();
}

uint64_t type metadata accessor for OAuthAuthorizeRequest()
{
  return type metadata accessor for OAuthAuthorizeRequest();
}

uint64_t OAuthInvalidateRequest.server.getter()
{
  return OAuthInvalidateRequest.server.getter();
}

uint64_t OAuthInvalidateRequest.accountID.getter()
{
  return OAuthInvalidateRequest.accountID.getter();
}

uint64_t type metadata accessor for OAuthInvalidateRequest()
{
  return type metadata accessor for OAuthInvalidateRequest();
}

uint64_t DDMPollForUpdatesRequest.shouldInitiateUpdates.getter()
{
  return DDMPollForUpdatesRequest.shouldInitiateUpdates.getter();
}

uint64_t type metadata accessor for DDMPollForUpdatesRequest()
{
  return type metadata accessor for DDMPollForUpdatesRequest();
}

uint64_t DDMDeclarationStatusRequest.declarationKey.getter()
{
  return DDMDeclarationStatusRequest.declarationKey.getter();
}

uint64_t type metadata accessor for DDMDeclarationStatusRequest()
{
  return type metadata accessor for DDMDeclarationStatusRequest();
}

uint64_t InstallEnterpriseManifestRequest.manifestURL.getter()
{
  return InstallEnterpriseManifestRequest.manifestURL.getter();
}

uint64_t type metadata accessor for InstallEnterpriseManifestRequest()
{
  return type metadata accessor for InstallEnterpriseManifestRequest();
}

uint64_t LogKey.description.getter()
{
  return LogKey.description.getter();
}

uint64_t LogKey.stringValue.getter()
{
  return LogKey.stringValue.getter();
}

uint64_t type metadata accessor for LogKey.Representation()
{
  return type metadata accessor for LogKey.Representation();
}

uint64_t LogKey.representation.getter()
{
  return LogKey.representation.getter();
}

uint64_t LogKey.Prefix.rawValue.getter()
{
  return LogKey.Prefix.rawValue.getter();
}

uint64_t type metadata accessor for LogKey.Prefix()
{
  return type metadata accessor for LogKey.Prefix();
}

uint64_t LogKey.init(prefix:)()
{
  return LogKey.init(prefix:)();
}

uint64_t LogKey.init(string:)()
{
  return LogKey.init(string:)();
}

uint64_t LogKey.init(strings:)()
{
  return LogKey.init(strings:)();
}

uint64_t type metadata accessor for LogKey()
{
  return type metadata accessor for LogKey();
}

uint64_t XPCApp.init(appleItemID:bundleID:installedMetadata:installingMetadata:installErrorData:)()
{
  return XPCApp.init(appleItemID:bundleID:installedMetadata:installingMetadata:installErrorData:)();
}

uint64_t XPCApp.appleItemID.getter()
{
  return XPCApp.appleItemID.getter();
}

uint64_t XPCApp.installingMetadata.getter()
{
  return XPCApp.installingMetadata.getter();
}

uint64_t XPCApp.installingMetadata.setter()
{
  return XPCApp.installingMetadata.setter();
}

uint64_t XPCApp.Metadata.init(appleVersionID:version:shortVersion:account:)()
{
  return XPCApp.Metadata.init(appleVersionID:version:shortVersion:account:)();
}

uint64_t type metadata accessor for XPCApp.Metadata()
{
  return type metadata accessor for XPCApp.Metadata();
}

uint64_t XPCApp.bundleID.getter()
{
  return XPCApp.bundleID.getter();
}

uint64_t type metadata accessor for XPCApp()
{
  return type metadata accessor for XPCApp();
}

uint64_t Platform.description.getter()
{
  return Platform.description.getter();
}

uint64_t static Platform.== infix(_:_:)()
{
  return static Platform.== infix(_:_:)();
}

uint64_t static Platform.iOS.getter()
{
  return static Platform.iOS.getter();
}

uint64_t static Platform.tvOS.getter()
{
  return static Platform.tvOS.getter();
}

uint64_t static Platform.macOS.getter()
{
  return static Platform.macOS.getter();
}

uint64_t static Platform.current.getter()
{
  return static Platform.current.getter();
}

uint64_t static Platform.watchOS.getter()
{
  return static Platform.watchOS.getter();
}

uint64_t type metadata accessor for Platform()
{
  return type metadata accessor for Platform();
}

uint64_t static XPCClient.daemonLaunchNotificationName.getter()
{
  return static XPCClient.daemonLaunchNotificationName.getter();
}

uint64_t type metadata accessor for XPCClient()
{
  return type metadata accessor for XPCClient();
}

uint64_t UTType.init(mimeType:conformingTo:)()
{
  return UTType.init(mimeType:conformingTo:)();
}

uint64_t static UTType.data.getter()
{
  return static UTType.data.getter();
}

uint64_t type metadata accessor for UTType()
{
  return type metadata accessor for UTType();
}

uint64_t OSSignpostID.rawValue.getter()
{
  return OSSignpostID.rawValue.getter();
}

uint64_t static OSSignpostID.exclusive.getter()
{
  return static OSSignpostID.exclusive.getter();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return type metadata accessor for OSSignpostID();
}

uint64_t OSSignposter.init(logger:)()
{
  return OSSignposter.init(logger:)();
}

uint64_t OSSignposter.logHandle.getter()
{
  return OSSignposter.logHandle.getter();
}

uint64_t type metadata accessor for OSSignposter()
{
  return type metadata accessor for OSSignposter();
}

uint64_t type metadata accessor for OSSignpostError()
{
  return type metadata accessor for OSSignpostError();
}

uint64_t OSSignpostIntervalState.signpostID.getter()
{
  return OSSignpostIntervalState.signpostID.getter();
}

uint64_t OSSignpostIntervalState.init(id:isOpen:)()
{
  return OSSignpostIntervalState.init(id:isOpen:)();
}

uint64_t type metadata accessor for OSSignpostIntervalState()
{
  return type metadata accessor for OSSignpostIntervalState();
}

uint64_t checkForErrorAndConsumeState(state:)()
{
  return checkForErrorAndConsumeState(state:)();
}

uint64_t static Logger.ald.getter()
{
  return static Logger.ald.getter();
}

uint64_t static Logger.general.getter()
{
  return static Logger.general.getter();
}

{
  return static Logger.general.getter();
}

uint64_t static Logger.appActions.getter()
{
  return static Logger.appActions.getter();
}

uint64_t static Logger.eligibility.getter()
{
  return static Logger.eligibility.getter();
}

uint64_t static Logger.madSubsystem.getter()
{
  return static Logger.madSubsystem.getter();
}

uint64_t static Logger.ddm.getter()
{
  return static Logger.ddm.getter();
}

uint64_t static Logger.sql.getter()
{
  return static Logger.sql.getter();
}

uint64_t static Logger.vpp.getter()
{
  return static Logger.vpp.getter();
}

uint64_t static Logger.xpc.getter()
{
  return static Logger.xpc.getter();
}

uint64_t static Logger.oauth.getter()
{
  return static Logger.oauth.getter();
}

uint64_t static Logger.daemon.getter()
{
  return static Logger.daemon.getter();
}

uint64_t static Logger.install.getter()
{
  return static Logger.install.getter();
}

uint64_t static Logger.library.getter()
{
  return static Logger.library.getter();
}

uint64_t static Logger.metrics.getter()
{
  return static Logger.metrics.getter();
}

uint64_t static Logger.restore.getter()
{
  return static Logger.restore.getter();
}

uint64_t static Logger.storage.getter()
{
  return static Logger.storage.getter();
}

uint64_t static Logger.updates.getter()
{
  return static Logger.updates.getter();
}

uint64_t static Logger.download.getter()
{
  return static Logger.download.getter();
}

uint64_t static Logger.progress.getter()
{
  return static Logger.progress.getter();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t XPC_EVENT_KEY_NAME.getter()
{
  return XPC_EVENT_KEY_NAME.getter();
}

uint64_t XPC_TYPE_DICTIONARY.getter()
{
  return XPC_TYPE_DICTIONARY.getter();
}

uint64_t noErr.getter()
{
  return noErr.getter();
}

uint64_t SIG_IGN.getter()
{
  return SIG_IGN.getter();
}

uint64_t type metadata accessor for DMCAppsScope()
{
  return type metadata accessor for DMCAppsScope();
}

uint64_t static DMCAppsClient.makeAppInfo(bundleID:originator:sourceID:attributes:installSource:installBehavior:updateBehavior:backupBehavior:removeBehavior:documentSyncBehavior:)()
{
  return static DMCAppsClient.makeAppInfo(bundleID:originator:sourceID:attributes:installSource:installBehavior:updateBehavior:backupBehavior:removeBehavior:documentSyncBehavior:)();
}

uint64_t DMCAppsClient.organizationName.getter()
{
  return DMCAppsClient.organizationName.getter();
}

uint64_t DMCAppsClient.init(scope:)()
{
  return DMCAppsClient.init(scope:)();
}

uint64_t type metadata accessor for DMCAppsClient()
{
  return type metadata accessor for DMCAppsClient();
}

uint64_t type metadata accessor for InstallSource()
{
  return type metadata accessor for InstallSource();
}

uint64_t BackupBehavior.init(backupAppData:)()
{
  return BackupBehavior.init(backupAppData:)();
}

uint64_t type metadata accessor for BackupBehavior()
{
  return type metadata accessor for BackupBehavior();
}

uint64_t RemoveBehavior.init(removable:removeKeychainGroupWhenUninstall:)()
{
  return RemoveBehavior.init(removable:removeKeychainGroupWhenUninstall:)();
}

uint64_t type metadata accessor for RemoveBehavior()
{
  return type metadata accessor for RemoveBehavior();
}

uint64_t type metadata accessor for UpdateBehavior()
{
  return type metadata accessor for UpdateBehavior();
}

uint64_t type metadata accessor for InstallBehavior()
{
  return type metadata accessor for InstallBehavior();
}

uint64_t type metadata accessor for DocumentSyncBehavior()
{
  return type metadata accessor for DocumentSyncBehavior();
}

uint64_t type metadata accessor for NWEndpoint()
{
  return type metadata accessor for NWEndpoint();
}

uint64_t type metadata accessor for NWInterface.InterfaceType()
{
  return type metadata accessor for NWInterface.InterfaceType();
}

uint64_t NWConnection.parameters.getter()
{
  return NWConnection.parameters.getter();
}

Swift::Void __swiftcall NWConnection.forceCancel()()
{
}

uint64_t NWConnection.pathUpdateHandler.setter()
{
  return NWConnection.pathUpdateHandler.setter();
}

uint64_t NWConnection.init(to:using:)()
{
  return NWConnection.init(to:using:)();
}

uint64_t NWConnection.start(queue:)()
{
  return NWConnection.start(queue:)();
}

uint64_t type metadata accessor for NWConnection()
{
  return type metadata accessor for NWConnection();
}

uint64_t NWParameters.sourceApplicationBundleID.setter()
{
  return NWParameters.sourceApplicationBundleID.setter();
}

uint64_t static NWParameters.udp.getter()
{
  return static NWParameters.udp.getter();
}

uint64_t type metadata accessor for NWParameters()
{
  return type metadata accessor for NWParameters();
}

uint64_t NWPathMonitor.makeAsyncIterator()()
{
  return NWPathMonitor.makeAsyncIterator()();
}

uint64_t NWPathMonitor.pathUpdateHandler.setter()
{
  return NWPathMonitor.pathUpdateHandler.setter();
}

uint64_t NWPathMonitor.start(queue:)()
{
  return NWPathMonitor.start(queue:)();
}

Swift::Void __swiftcall NWPathMonitor.cancel()()
{
}

uint64_t type metadata accessor for NWPathMonitor.Iterator()
{
  return type metadata accessor for NWPathMonitor.Iterator();
}

uint64_t NWPathMonitor.init()()
{
  return NWPathMonitor.init()();
}

uint64_t type metadata accessor for NWPathMonitor()
{
  return type metadata accessor for NWPathMonitor();
}

uint64_t NWPath.isExpensive.getter()
{
  return NWPath.isExpensive.getter();
}

uint64_t NWPath.isConstrained.getter()
{
  return NWPath.isConstrained.getter();
}

uint64_t NWPath.usesInterfaceType(_:)()
{
  return NWPath.usesInterfaceType(_:)();
}

uint64_t NWPath.availableInterfaces.getter()
{
  return NWPath.availableInterfaces.getter();
}

uint64_t static NWPath.Status.== infix(_:_:)()
{
  return static NWPath.Status.== infix(_:_:)();
}

uint64_t type metadata accessor for NWPath.Status()
{
  return type metadata accessor for NWPath.Status();
}

uint64_t NWPath.status.getter()
{
  return NWPath.status.getter();
}

uint64_t type metadata accessor for NWPath()
{
  return type metadata accessor for NWPath();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return type metadata accessor for DispatchTimeInterval();
}

uint64_t static DispatchTimeoutResult.== infix(_:_:)()
{
  return static DispatchTimeoutResult.== infix(_:_:)();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return type metadata accessor for DispatchQoS.QoSClass();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t static DispatchQoS.userInitiated.getter()
{
  return static DispatchQoS.userInitiated.getter();
}

uint64_t static DispatchQoS.utility.getter()
{
  return static DispatchQoS.utility.getter();
}

uint64_t DispatchQoS.qosClass.getter()
{
  return DispatchQoS.qosClass.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t static DispatchTime.now()()
{
  return static DispatchTime.now()();
}

uint64_t DispatchTime.advanced(by:)()
{
  return DispatchTime.advanced(by:)();
}

uint64_t type metadata accessor for DispatchTime()
{
  return type metadata accessor for DispatchTime();
}

uint64_t dispatch thunk of HashFunction.update(bufferPointer:)()
{
  return dispatch thunk of HashFunction.update(bufferPointer:)();
}

uint64_t dispatch thunk of HashFunction.finalize()()
{
  return dispatch thunk of HashFunction.finalize()();
}

uint64_t dispatch thunk of HashFunction.init()()
{
  return dispatch thunk of HashFunction.init()();
}

uint64_t type metadata accessor for SHA256Digest()
{
  return type metadata accessor for SHA256Digest();
}

uint64_t dispatch thunk of static Digest.byteCount.getter()
{
  return dispatch thunk of static Digest.byteCount.getter();
}

uint64_t Digest.makeIterator()()
{
  return Digest.makeIterator()();
}

uint64_t type metadata accessor for SHA256()
{
  return type metadata accessor for SHA256();
}

uint64_t InMemoryJetPackLoader.init(signingPolicy:keyProvider:)()
{
  return InMemoryJetPackLoader.init(signingPolicy:keyProvider:)();
}

uint64_t type metadata accessor for InMemoryJetPackLoader()
{
  return type metadata accessor for InMemoryJetPackLoader();
}

uint64_t type metadata accessor for InMemoryJetPackResourceBundle()
{
  return type metadata accessor for InMemoryJetPackResourceBundle();
}

uint64_t JetPackAssetSession.Configuration.init(cache:)()
{
  return JetPackAssetSession.Configuration.init(cache:)();
}

uint64_t type metadata accessor for JetPackAssetSession.Configuration()
{
  return type metadata accessor for JetPackAssetSession.Configuration();
}

uint64_t JetPackAssetSession.init(configuration:)()
{
  return JetPackAssetSession.init(configuration:)();
}

uint64_t type metadata accessor for JetPackAssetSession()
{
  return type metadata accessor for JetPackAssetSession();
}

uint64_t type metadata accessor for JetPackSigningPolicy()
{
  return type metadata accessor for JetPackSigningPolicy();
}

uint64_t JetPackAssetDiskCache.__allocating_init()()
{
  return JetPackAssetDiskCache.__allocating_init()();
}

uint64_t type metadata accessor for JetPackAssetDiskCache()
{
  return type metadata accessor for JetPackAssetDiskCache();
}

uint64_t JetPackResourceBundle.version.getter()
{
  return JetPackResourceBundle.version.getter();
}

uint64_t JetPackManagedKeyProvider.init()()
{
  return JetPackManagedKeyProvider.init()();
}

uint64_t type metadata accessor for JetPackManagedKeyProvider()
{
  return type metadata accessor for JetPackManagedKeyProvider();
}

uint64_t type metadata accessor for JetPackAssetRequestSourcePolicy()
{
  return type metadata accessor for JetPackAssetRequestSourcePolicy();
}

uint64_t type metadata accessor for JetPackPath()
{
  return type metadata accessor for JetPackPath();
}

uint64_t JetPackPath.init(_:)()
{
  return JetPackPath.init(_:)();
}

uint64_t JetPackAsset.streamSource.getter()
{
  return JetPackAsset.streamSource.getter();
}

uint64_t type metadata accessor for JetPackAsset()
{
  return type metadata accessor for JetPackAsset();
}

uint64_t BaseObjectGraph.__allocating_init(name:_:)()
{
  return BaseObjectGraph.__allocating_init(name:_:)();
}

uint64_t type metadata accessor for BaseObjectGraph()
{
  return type metadata accessor for BaseObjectGraph();
}

uint64_t BagLanguageSource.init(bag:)()
{
  return BagLanguageSource.init(bag:)();
}

uint64_t type metadata accessor for BagLanguageSource()
{
  return type metadata accessor for BagLanguageSource();
}

Swift::Bool __swiftcall AppleServicesLocalizer.isLocalizedString(_:)(Swift::String a1)
{
  return AppleServicesLocalizer.isLocalizedString(_:)(a1._countAndFlagsBits, a1._object);
}

uint64_t AppleServicesLocalizer.string(forKey:with:using:)()
{
  return AppleServicesLocalizer.string(forKey:with:using:)();
}

uint64_t type metadata accessor for AppleServicesLocalizer()
{
  return type metadata accessor for AppleServicesLocalizer();
}

uint64_t LocalizedStringsBundle.init(resourceBundle:indexPath:)()
{
  return LocalizedStringsBundle.init(resourceBundle:indexPath:)();
}

uint64_t type metadata accessor for LocalizedStringsBundle()
{
  return type metadata accessor for LocalizedStringsBundle();
}

uint64_t URLJetPackAssetFetcher.init(bag:urlSessionConfiguration:)()
{
  return URLJetPackAssetFetcher.init(bag:urlSessionConfiguration:)();
}

uint64_t type metadata accessor for URLJetPackAssetFetcher()
{
  return type metadata accessor for URLJetPackAssetFetcher();
}

uint64_t URLJetPackAssetRequest.init(url:sourcePolicy:)()
{
  return URLJetPackAssetRequest.init(url:sourcePolicy:)();
}

uint64_t type metadata accessor for URLJetPackAssetRequest()
{
  return type metadata accessor for URLJetPackAssetRequest();
}

uint64_t type metadata accessor for LocalizerLookupStrategy()
{
  return type metadata accessor for LocalizerLookupStrategy();
}

uint64_t Bag.init(from:)()
{
  return Bag.init(from:)();
}

uint64_t Array.init()()
{
  return Array.init()();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t BidirectionalCollection<>.firstMatch<A, B>(of:)()
{
  return BidirectionalCollection<>.firstMatch<A, B>(of:)();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t String.LocalizationValue.init(stringLiteral:)()
{
  return String.LocalizationValue.init(stringLiteral:)();
}

Swift::Void __swiftcall String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(Swift::String a1)
{
}

Swift::Void __swiftcall String.LocalizationValue.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t type metadata accessor for String.LocalizationValue.StringInterpolation()
{
  return type metadata accessor for String.LocalizationValue.StringInterpolation();
}

uint64_t String.LocalizationValue.init(stringInterpolation:)()
{
  return String.LocalizationValue.init(stringInterpolation:)();
}

uint64_t type metadata accessor for String.LocalizationValue()
{
  return type metadata accessor for String.LocalizationValue();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return String.data(using:allowLossyConversion:)();
}

uint64_t String.init(data:encoding:)()
{
  return String.init(data:encoding:)();
}

uint64_t String.init(format:_:)()
{
  return String.init(format:_:)();
}

uint64_t static String.Encoding.utf8.getter()
{
  return static String.Encoding.utf8.getter();
}

uint64_t static String.Encoding.ascii.getter()
{
  return static String.Encoding.ascii.getter();
}

uint64_t type metadata accessor for String.Encoding()
{
  return type metadata accessor for String.Encoding();
}

uint64_t String.init(localized:table:bundle:locale:comment:)()
{
  return String.init(localized:table:bundle:locale:comment:)();
}

uint64_t String.init(localized:)()
{
  return String.init(localized:)();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = String.lowercased()();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t String.utf8CString.getter()
{
  return String.utf8CString.getter();
}

uint64_t static String._fromSubstring(_:)()
{
  return static String._fromSubstring(_:)();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return static String._uncheckedFromUTF8(_:)();
}

uint64_t String.init(unsafeUninitializedCapacity:initializingUTF8With:)()
{
  return String.init(unsafeUninitializedCapacity:initializingUTF8With:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

uint64_t String.count.getter()
{
  return String.count.getter();
}

uint64_t String.index(after:)()
{
  return String.index(after:)();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return String.index(_:offsetBy:limitedBy:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

{
  String.append(_:)(a1._countAndFlagsBits, a1._object);
}

uint64_t String.init(cString:)()
{
  return String.init(cString:)();
}

Swift::String_optional __swiftcall String.Iterator.next()()
{
  uint64_t v0 = String.Iterator.next()();
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return String.UTF8View._foreignIndex(after:)();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return String.UTF8View._foreignIndex(_:offsetBy:)();
}

uint64_t String.UTF8View._foreignDistance(from:to:)()
{
  return String.UTF8View._foreignDistance(from:to:)();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return String.UTF8View._foreignSubscript(position:)();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return String.UTF16View.index(_:offsetBy:)();
}

Swift::String __swiftcall String.init(repeating:count:)(Swift::String repeating, Swift::Int count)
{
  uint64_t v2 = String.init(repeating:count:)(repeating._countAndFlagsBits, repeating._object, count);
  result._object = v3;
  result._countAndFlagsBits = v2;
  return result;
}

uint64_t String.subscript.getter()
{
  return String.subscript.getter();
}

{
  return String.subscript.getter();
}

uint64_t String.init<A>(_:)()
{
  return String.init<A>(_:)();
}

{
  return String.init<A>(_:)();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return dispatch thunk of Sequence.makeIterator()();
}

uint64_t Sequence.compactMap<A>(_:)()
{
  return Sequence.compactMap<A>(_:)();
}

uint64_t Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t Sequence.lazy.getter()
{
  return Sequence.lazy.getter();
}

uint64_t Sequence.flatMap<A>(_:)()
{
  return Sequence.flatMap<A>(_:)();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return RawRepresentable<>.encode(to:)();
}

{
  return RawRepresentable<>.encode(to:)();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return RawRepresentable<>.init(from:)();
}

{
  return RawRepresentable<>.init(from:)();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Array._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return static Array._allocateUninitialized(_:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t Array.append(_:)()
{
  return Array.append(_:)();
}

uint64_t type metadata accessor for Array()
{
  return type metadata accessor for Array();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)Bool._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t CheckedContinuation.init(continuation:function:)()
{
  return CheckedContinuation.init(continuation:function:)();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return CheckedContinuation.resume(throwing:)();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t type metadata accessor for CheckedContinuation()
{
  return type metadata accessor for CheckedContinuation();
}

uint64_t TaskGroup.makeAsyncIterator()()
{
  return TaskGroup.makeAsyncIterator()();
}

uint64_t static MainActor.shared.getter()
{
  return static MainActor.shared.getter();
}

uint64_t type metadata accessor for MainActor()
{
  return type metadata accessor for MainActor();
}

uint64_t static TaskPriority.background.getter()
{
  return static TaskPriority.background.getter();
}

uint64_t static TaskPriority.userInitiated.getter()
{
  return static TaskPriority.userInitiated.getter();
}

uint64_t static TaskPriority.high.getter()
{
  return static TaskPriority.high.getter();
}

uint64_t static TaskPriority.utility.getter()
{
  return static TaskPriority.utility.getter();
}

uint64_t TaskPriority.init(rawValue:)()
{
  return TaskPriority.init(rawValue:)();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

uint64_t static AsyncStream.makeStream(of:bufferingPolicy:)()
{
  return static AsyncStream.makeStream(of:bufferingPolicy:)();
}

uint64_t AsyncStream.Continuation.yield(_:)()
{
  return AsyncStream.Continuation.yield(_:)();
}

Swift::Void __swiftcall AsyncStream.Continuation.finish()()
{
}

uint64_t AsyncStream.makeAsyncIterator()()
{
  return AsyncStream.makeAsyncIterator()();
}

Swift::Void __swiftcall Task.cancel()()
{
}

uint64_t static Task<>.isCancelled.getter()
{
  return static Task<>.isCancelled.getter();
}

uint64_t ThrowingTaskGroup.makeAsyncIterator()()
{
  return ThrowingTaskGroup.makeAsyncIterator()();
}

uint64_t Double.write<A>(to:)()
{
  return Double.write<A>(to:)();
}

uint64_t dispatch thunk of Decodable.init(from:)()
{
  return dispatch thunk of Decodable.init(from:)();
}

uint64_t Float.write<A>(to:)()
{
  return Float.write<A>(to:)();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)Set._bridgeToObjectiveC()();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Set.description.getter()
{
  return Set.description.getter();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return Set.Iterator.init(_cocoa:)();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)Int._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Numeric.init<A>(exactly:)()
{
  return dispatch thunk of Numeric.init<A>(exactly:)();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return dispatch thunk of Collection.startIndex.getter();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return dispatch thunk of Collection.count.getter();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return dispatch thunk of Collection.formIndex(after:)();
}

uint64_t Collection<>.popFirst()()
{
  return Collection<>.popFirst()();
}

uint64_t Collection.isEmpty.getter()
{
  return Collection.isEmpty.getter();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return dispatch thunk of Collection.subscript.read();
}

uint64_t NSEnumerator.makeIterator()()
{
  return NSEnumerator.makeIterator()();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

uint64_t static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)()
{
  return static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t OS_dispatch_queue.sync<A>(execute:)()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return static OS_dispatch_queue.global(qos:)();
}

uint64_t static OS_dispatch_source.makeSignalSource(signal:queue:)()
{
  return static OS_dispatch_source.makeSignalSource(signal:queue:)();
}

uint64_t OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  return OS_dispatch_source.setEventHandler(qos:flags:handler:)();
}

Swift::Void __swiftcall OS_dispatch_source.cancel()()
{
}

Swift::Void __swiftcall OS_dispatch_source.activate()()
{
}

uint64_t static os_signpost_type_t.end.getter()
{
  return static os_signpost_type_t.end.getter();
}

uint64_t static os_signpost_type_t.begin.getter()
{
  return static os_signpost_type_t.begin.getter();
}

uint64_t OS_dispatch_semaphore.wait(timeout:)()
{
  return OS_dispatch_semaphore.wait(timeout:)();
}

Swift::Void __swiftcall OS_dispatch_semaphore.wait()()
{
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return OS_dispatch_semaphore.signal()();
}

uint64_t type metadata accessor for OS_dispatch_queue_serial.Attributes()
{
  return type metadata accessor for OS_dispatch_queue_serial.Attributes();
}

uint64_t OS_dispatch_queue_serial.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue_serial.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t OS_dispatch_queue_serial_executor.asUnownedSerialExecutor()()
{
  return OS_dispatch_queue_serial_executor.asUnownedSerialExecutor()();
}

uint64_t NSArray.makeIterator()()
{
  return NSArray.makeIterator()();
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)NSNumber.init(integerLiteral:)(integerLiteral);
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t NSObject.hashValue.getter()
{
  return NSObject.hashValue.getter();
}

uint64_t NSScanner.scanDouble(representation:)()
{
  return NSScanner.scanDouble(representation:)();
}

uint64_t type metadata accessor for NSScanner.NumberRepresentation()
{
  return type metadata accessor for NSScanner.NumberRepresentation();
}

uint64_t OS_os_log.signpostsEnabled.getter()
{
  return OS_os_log.signpostsEnabled.getter();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t Substring.index(after:)()
{
  return Substring.index(after:)();
}

uint64_t Substring.subscript.getter()
{
  return Substring.subscript.getter();
}

{
  return Substring.subscript.getter();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return dispatch thunk of IteratorProtocol.next()();
}

NSNumber __swiftcall UInt._bridgeToObjectiveC()()
{
  return (NSNumber)UInt._bridgeToObjectiveC()();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return StringProtocol.components<A>(separatedBy:)();
}

uint64_t StringProtocol.rangeOfCharacter(from:options:range:)()
{
  return StringProtocol.rangeOfCharacter(from:options:range:)();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t type metadata accessor for ArraySlice()
{
  return type metadata accessor for ArraySlice();
}

uint64_t ArraySlice.init<A>(_:)()
{
  return ArraySlice.init<A>(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return _HashTable.nextHole(atOrAfter:)();
}

uint64_t __CocoaSet.makeIterator()()
{
  return __CocoaSet.makeIterator()();
}

uint64_t __CocoaSet.count.getter()
{
  return __CocoaSet.count.getter();
}

uint64_t __CocoaSet.member(for:)()
{
  return __CocoaSet.member(for:)();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return __CocoaSet.Iterator.next()();
}

uint64_t __CocoaSet.contains(_:)()
{
  return __CocoaSet.contains(_:)();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return static _SetStorage.convert(_:capacity:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t type metadata accessor for LazySequence()
{
  return type metadata accessor for LazySequence();
}

uint64_t StaticString.description.getter()
{
  return StaticString.description.getter();
}

Swift::Void __swiftcall _ArrayBuffer._typeCheckSlowPath(_:)(Swift::Int a1)
{
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
}

uint64_t type metadata accessor for DecodingError.Context()
{
  return type metadata accessor for DecodingError.Context();
}

uint64_t type metadata accessor for DecodingError()
{
  return type metadata accessor for DecodingError();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

Swift::Void __swiftcall ContiguousArray.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t ContiguousArray.append(_:)()
{
  return ContiguousArray.append(_:)();
}

uint64_t ContiguousArray.init()()
{
  return ContiguousArray.init()();
}

uint64_t type metadata accessor for ContiguousArray()
{
  return type metadata accessor for ContiguousArray();
}

uint64_t static ContinuousClock.now.getter()
{
  return static ContinuousClock.now.getter();
}

uint64_t ContinuousClock.Instant.advanced(by:)()
{
  return ContinuousClock.Instant.advanced(by:)();
}

uint64_t type metadata accessor for ContinuousClock.Instant()
{
  return type metadata accessor for ContinuousClock.Instant();
}

uint64_t ContinuousClock.init()()
{
  return ContinuousClock.init()();
}

uint64_t type metadata accessor for ContinuousClock()
{
  return type metadata accessor for ContinuousClock();
}

uint64_t dispatch thunk of InstantProtocol.advanced(by:)()
{
  return dispatch thunk of InstantProtocol.advanced(by:)();
}

uint64_t dispatch thunk of _AnySequenceBox._makeIterator()()
{
  return dispatch thunk of _AnySequenceBox._makeIterator()();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t _CocoaArrayWrapper.subscript.getter()
{
  return _CocoaArrayWrapper.subscript.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t dispatch thunk of _AnyIteratorBoxBase.next()()
{
  return dispatch thunk of _AnyIteratorBoxBase.next()();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t dispatch thunk of CodingKeyRepresentable.codingKey.getter()
{
  return dispatch thunk of CodingKeyRepresentable.codingKey.getter();
}

uint64_t dispatch thunk of CodingKeyRepresentable.init<A>(codingKey:)()
{
  return dispatch thunk of CodingKeyRepresentable.init<A>(codingKey:)();
}

uint64_t KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)()
{
  return KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return KeyedDecodingContainer.codingPath.getter();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return KeyedDecodingContainer.allKeys.getter();
}

uint64_t type metadata accessor for KeyedDecodingContainer()
{
  return type metadata accessor for KeyedDecodingContainer();
}

uint64_t KeyedDecodingContainer.init<A>(_:)()
{
  return KeyedDecodingContainer.init<A>(_:)();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t _stringCompareInternal(_:_:_:_:expecting:)()
{
  return _stringCompareInternal(_:_:_:_:expecting:)();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)()
{
  return dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter()
{
  return dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter();
}

uint64_t UnkeyedDecodingContainer.decodeIfPresent(_:)()
{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

uint64_t UnkeyedDecodingContainer.decodeIfPresent<A>(_:)()
{
  return UnkeyedDecodingContainer.decodeIfPresent<A>(_:)();
}

uint64_t UnkeyedDecodingContainer.decode(_:)()
{
  return UnkeyedDecodingContainer.decode(_:)();
}

{
  return UnkeyedDecodingContainer.decode(_:)();
}

uint64_t _getErrorEmbeddedNSError<A>(_:)()
{
  return _getErrorEmbeddedNSError<A>(_:)();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  return DefaultStringInterpolation.appendInterpolation<A>(_:)();
}

{
  return DefaultStringInterpolation.appendInterpolation<A>(_:)();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return _bridgeAnythingToObjectiveC<A>(_:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decode(_:)()
{
  return dispatch thunk of SingleValueDecodingContainer.decode(_:)();
}

{
  return dispatch thunk of SingleValueDecodingContainer.decode(_:)();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)()
{
  return dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
}

uint64_t SingleValueDecodingContainer.decode(_:)()
{
  return SingleValueDecodingContainer.decode(_:)();
}

{
  return SingleValueDecodingContainer.decode(_:)();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encode(_:)()
{
  return dispatch thunk of SingleValueEncodingContainer.encode(_:)();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)()
{
  return dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return type metadata accessor for __ContiguousArrayStorageBase();
}

uint64_t KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)()
{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

uint64_t KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:)()
{
  return KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainerProtocol.decode(_:forKey:)()
{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)();
}

{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)();
}

uint64_t _findStringSwitchCaseWithCache(cases:string:cache:)()
{
  return _findStringSwitchCaseWithCache(cases:string:cache:)();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t dispatch thunk of Clock.now.getter()
{
  return dispatch thunk of Clock.now.getter();
}

uint64_t Error.localizedDescription.getter()
{
  return Error.localizedDescription.getter();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._code.getter()
{
  return Error._code.getter();
}

uint64_t Error._domain.getter()
{
  return Error._domain.getter();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

uint64_t print(_:separator:terminator:)()
{
  return print(_:separator:terminator:)();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

uint64_t Hasher.combine(bytes:)()
{
  return Hasher.combine(bytes:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
}

Swift::Int __swiftcall Hasher.finalize()()
{
  return Hasher.finalize()();
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t Hasher.init()()
{
  return Hasher.init()();
}

NSNumber __swiftcall UInt64._bridgeToObjectiveC()()
{
  return (NSNumber)UInt64._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Decoder.singleValueContainer()()
{
  return dispatch thunk of Decoder.singleValueContainer()();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of Encoder.singleValueContainer()()
{
  return dispatch thunk of Encoder.singleValueContainer()();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of CodingKey.stringValue.getter()
{
  return dispatch thunk of CodingKey.stringValue.getter();
}

uint64_t dispatch thunk of CodingKey.init(stringValue:)()
{
  return dispatch thunk of CodingKey.init(stringValue:)();
}

uint64_t TaskLocal.init(wrappedValue:)()
{
  return TaskLocal.init(wrappedValue:)();
}

uint64_t TaskLocal.get()()
{
  return TaskLocal.get()();
}

uint64_t _typeName(_:qualified:)()
{
  return _typeName(_:qualified:)();
}

uint64_t ACSLocateCachingServer()
{
  return _ACSLocateCachingServer();
}

uint64_t AnalyticsSendEventLazy()
{
  return _AnalyticsSendEventLazy();
}

uint64_t BSVersionedPIDForAuditToken()
{
  return _BSVersionedPIDForAuditToken();
}

uint64_t BYSetupAssistantNeedsToRun()
{
  return _BYSetupAssistantNeedsToRun();
}

CCRNGStatus CCRandomGenerateBytes(void *bytes, size_t count)
{
  return _CCRandomGenerateBytes(bytes, count);
}

int CC_MD5_Final(unsigned __int8 *md, CC_MD5_CTX *c)
{
  return _CC_MD5_Final(md, c);
}

int CC_MD5_Init(CC_MD5_CTX *c)
{
  return _CC_MD5_Init(c);
}

int CC_MD5_Update(CC_MD5_CTX *c, const void *data, CC_LONG len)
{
  return _CC_MD5_Update(c, data, len);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return _CC_SHA256_Final(md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return _CC_SHA256_Init(c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return _CC_SHA256_Update(c, data, len);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreateMutable(allocator, capacity, keyCallBacks, valueCallBacks);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return _CFNumberGetType(number);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return _CFPreferencesAppSynchronize(applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return _CFPreferencesCopyAppValue(key, applicationID);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return _CFPreferencesGetAppBooleanValue(key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
}

void CFRelease(CFTypeRef cf)
{
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return _CFStringGetCStringPtr(theString, encoding);
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return _CFStringGetCharactersPtr(theString);
}

CFStringEncoding CFStringGetFastestEncoding(CFStringRef theString)
{
  return _CFStringGetFastestEncoding(theString);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return _CFStringGetLength(theString);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return _CFUUIDCreate(alloc);
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  CFUUIDBytes v3 = _CFUUIDGetUUIDBytes(uuid);
  uint64_t v2 = *(void *)&v3.byte8;
  uint64_t v1 = *(void *)&v3.byte0;
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return _CFUserNotificationCreate(allocator, timeout, flags, error, dictionary);
}

SInt32 CFUserNotificationReceiveResponse(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags *responseFlags)
{
  return _CFUserNotificationReceiveResponse(userNotification, timeout, responseFlags);
}

CGColorRef CGColorCreateGenericRGB(CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  return _CGColorCreateGenericRGB(red, green, blue, alpha);
}

void CGContextRestoreGState(CGContextRef c)
{
}

void CGContextSaveGState(CGContextRef c)
{
}

CTFontRef CTFontCreateWithFontDescriptor(CTFontDescriptorRef descriptor, CGFloat size, const CGAffineTransform *matrix)
{
  return _CTFontCreateWithFontDescriptor(descriptor, size, matrix);
}

CTFontDescriptorRef CTFontDescriptorCreateWithAttributes(CFDictionaryRef attributes)
{
  return _CTFontDescriptorCreateWithAttributes(attributes);
}

uint64_t CWeMQvFE()
{
  return _CWeMQvFE();
}

uint64_t FbLnABIk()
{
  return _FbLnABIk();
}

uint64_t IXCreateUserPresentableError()
{
  return _IXCreateUserPresentableError();
}

uint64_t MKBDeviceUnlockedSinceBoot()
{
  return _MKBDeviceUnlockedSinceBoot();
}

uint64_t MKBGetDeviceLockState()
{
  return _MKBGetDeviceLockState();
}

uint64_t MobileGestalt_copy_buildVersion_obj()
{
  return _MobileGestalt_copy_buildVersion_obj();
}

uint64_t MobileGestalt_copy_compatibleAppVariants_obj()
{
  return _MobileGestalt_copy_compatibleAppVariants_obj();
}

uint64_t MobileGestalt_copy_deviceClass_obj()
{
  return _MobileGestalt_copy_deviceClass_obj();
}

uint64_t MobileGestalt_copy_marketingProductName_obj()
{
  return _MobileGestalt_copy_marketingProductName_obj();
}

uint64_t MobileGestalt_copy_productType_obj()
{
  return _MobileGestalt_copy_productType_obj();
}

uint64_t MobileGestalt_copy_productVersion_obj()
{
  return _MobileGestalt_copy_productVersion_obj();
}

uint64_t MobileGestalt_get_accelerometerCapability()
{
  return _MobileGestalt_get_accelerometerCapability();
}

uint64_t MobileGestalt_get_arm64ExecutionCapability()
{
  return _MobileGestalt_get_arm64ExecutionCapability();
}

uint64_t MobileGestalt_get_armV7ExecutionCapability()
{
  return _MobileGestalt_get_armV7ExecutionCapability();
}

uint64_t MobileGestalt_get_autoFocusCameraCapability()
{
  return _MobileGestalt_get_autoFocusCameraCapability();
}

uint64_t MobileGestalt_get_bluetoothLECapability()
{
  return _MobileGestalt_get_bluetoothLECapability();
}

uint64_t MobileGestalt_get_cameraCapability()
{
  return _MobileGestalt_get_cameraCapability();
}

uint64_t MobileGestalt_get_cameraFlashCapability()
{
  return _MobileGestalt_get_cameraFlashCapability();
}

uint64_t MobileGestalt_get_current_device()
{
  return _MobileGestalt_get_current_device();
}

uint64_t MobileGestalt_get_deviceClassNumber()
{
  return _MobileGestalt_get_deviceClassNumber();
}

uint64_t MobileGestalt_get_deviceCornerRadius()
{
  return _MobileGestalt_get_deviceCornerRadius();
}

uint64_t MobileGestalt_get_deviceSupportsARKit()
{
  return _MobileGestalt_get_deviceSupportsARKit();
}

uint64_t MobileGestalt_get_deviceSupportsNFC()
{
  return _MobileGestalt_get_deviceSupportsNFC();
}

uint64_t MobileGestalt_get_frontFacingCameraCapability()
{
  return _MobileGestalt_get_frontFacingCameraCapability();
}

uint64_t MobileGestalt_get_gameKitCapability()
{
  return _MobileGestalt_get_gameKitCapability();
}

uint64_t MobileGestalt_get_gpsCapability()
{
  return _MobileGestalt_get_gpsCapability();
}

uint64_t MobileGestalt_get_gyroscopeCapability()
{
  return _MobileGestalt_get_gyroscopeCapability();
}

uint64_t MobileGestalt_get_healthKitCapability()
{
  return _MobileGestalt_get_healthKitCapability();
}

uint64_t MobileGestalt_get_iPadCapability()
{
  return _MobileGestalt_get_iPadCapability();
}

uint64_t MobileGestalt_get_locationServicesCapability()
{
  return _MobileGestalt_get_locationServicesCapability();
}

uint64_t MobileGestalt_get_magnetometerCapability()
{
  return _MobileGestalt_get_magnetometerCapability();
}

uint64_t MobileGestalt_get_mainScreenHeight()
{
  return _MobileGestalt_get_mainScreenHeight();
}

uint64_t MobileGestalt_get_mainScreenWidth()
{
  return _MobileGestalt_get_mainScreenWidth();
}

uint64_t MobileGestalt_get_metalCapability()
{
  return _MobileGestalt_get_metalCapability();
}

uint64_t MobileGestalt_get_microphoneCapability()
{
  return _MobileGestalt_get_microphoneCapability();
}

uint64_t MobileGestalt_get_openGLES1Capability()
{
  return _MobileGestalt_get_openGLES1Capability();
}

uint64_t MobileGestalt_get_openGLES2Capability()
{
  return _MobileGestalt_get_openGLES2Capability();
}

uint64_t MobileGestalt_get_openGLES3Capability()
{
  return _MobileGestalt_get_openGLES3Capability();
}

uint64_t MobileGestalt_get_peer2PeerCapability()
{
  return _MobileGestalt_get_peer2PeerCapability();
}

uint64_t MobileGestalt_get_smsCapability()
{
  return _MobileGestalt_get_smsCapability();
}

uint64_t MobileGestalt_get_telephonyCapability()
{
  return _MobileGestalt_get_telephonyCapability();
}

uint64_t MobileGestalt_get_videoCameraCapability()
{
  return _MobileGestalt_get_videoCameraCapability();
}

uint64_t MobileGestalt_get_wapiCapability()
{
  return _MobileGestalt_get_wapiCapability();
}

uint64_t MobileGestalt_get_wifiCapability()
{
  return _MobileGestalt_get_wifiCapability();
}

uint64_t MobileInstallationCheckCapabilitiesMatch()
{
  return _MobileInstallationCheckCapabilitiesMatch();
}

NSString *NSHomeDirectory(void)
{
  return _NSHomeDirectory();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

uint64_t OZpDoyky()
{
  return _OZpDoyky();
}

uint64_t QSIlMWCo()
{
  return _QSIlMWCo();
}

CFStringRef SecCopyErrorMessageString(OSStatus status, void *reserved)
{
  return _SecCopyErrorMessageString(status, reserved);
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return _SecItemAdd(attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return _SecItemCopyMatching(query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return _SecItemDelete(query);
}

CFStringRef SecTaskCopySigningIdentifier(SecTaskRef task, CFErrorRef *error)
{
  return _SecTaskCopySigningIdentifier(task, error);
}

CFDictionaryRef SecTaskCopyValuesForEntitlements(SecTaskRef task, CFArrayRef entitlements, CFErrorRef *error)
{
  return _SecTaskCopyValuesForEntitlements(task, entitlements, error);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return _SecTaskCreateWithAuditToken(allocator, token);
}

uint64_t TBQFRWlW()
{
  return _TBQFRWlW();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFHostIsDomainTopLevel()
{
  return __CFHostIsDomainTopLevel();
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return __CFXPCCreateCFObjectFromXPCObject();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

int *__error(void)
{
  return ___error();
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return __os_activity_create(dso, description, activity, flags);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _set_user_dir_suffix()
{
  return __set_user_dir_suffix();
}

uint64_t _sl_dlopen()
{
  return __sl_dlopen();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

void abort(void)
{
}

uint64_t abort_report_np()
{
  return _abort_report_np();
}

pid_t audit_token_to_pid(audit_token_t *atoken)
{
  return _audit_token_to_pid(atoken);
}

void bzero(void *a1, size_t a2)
{
}

uint64_t cdHFeFDJ()
{
  return _cdHFeFDJ();
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return _clock_gettime_nsec_np(__clock_id);
}

uint64_t container_get_error_description()
{
  return _container_get_error_description();
}

uint64_t container_system_group_path_for_identifier()
{
  return _container_system_group_path_for_identifier();
}

uint64_t container_system_path_for_identifier()
{
  return _container_system_path_for_identifier();
}

uint64_t csr_check()
{
  return _csr_check();
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return _dispatch_get_global_queue(identifier, flags);
}

void dispatch_main(void)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

char *dlerror(void)
{
  return _dlerror();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return _dlsym(__handle, __symbol);
}

void exit(int a1)
{
}

void free(void *a1)
{
}

uint64_t fyzGzQHg()
{
  return _fyzGzQHg();
}

uint64_t g4Bksweo()
{
  return _g4Bksweo();
}

pid_t getpid(void)
{
  return _getpid();
}

uint64_t jYWQDEvI()
{
  return _jYWQDEvI();
}

uint64_t mach_continuous_time(void)
{
  return _mach_continuous_time();
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return _mach_msg(msg, option, send_size, rcv_size, rcv_name, timeout, notify);
}

void mach_msg_destroy(mach_msg_header_t *a1)
{
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return _mach_timebase_info(info);
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_calloc(count, size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

void mig_dealloc_reply_port(mach_port_t reply_port)
{
}

mach_port_t mig_get_reply_port(void)
{
  return _mig_get_reply_port();
}

void mig_put_reply_port(mach_port_t reply_port)
{
}

uint64_t niaOacKH()
{
  return _niaOacKH();
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return _notify_get_state(token, state64);
}

uint32_t notify_post(const char *name)
{
  return _notify_post(name);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_begin_catch(void *exc_buf)
{
  return _objc_begin_catch(exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_rethrow(void)
{
}

Class objc_getClass(const char *name)
{
  return _objc_getClass(name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return _objc_msgSendSuper2(a1, a2);
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return _objc_storeWeak(location, obj);
}

void objc_terminate(void)
{
}

os_activity_id_t os_activity_get_identifier(os_activity_t activity, os_activity_id_t *parent_id)
{
  return _os_activity_get_identifier(activity, parent_id);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return _os_log_create(subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

uint64_t os_transaction_get_description()
{
  return _os_transaction_get_description();
}

uint64_t os_transaction_get_timestamp()
{
  return _os_transaction_get_timestamp();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_content()
{
  return _os_variant_has_internal_content();
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return _proc_name(pid, buffer, buffersize);
}

uint64_t qENIaLkr()
{
  return _qENIaLkr();
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return _signal(a1, a2);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return _sqlite3_bind_blob(a1, a2, a3, n, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return _sqlite3_bind_double(a1, a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return _sqlite3_bind_int(a1, a2, a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return _sqlite3_bind_int64(a1, a2, a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return _sqlite3_bind_null(a1, a2);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return _sqlite3_bind_text(a1, a2, a3, a4, a5);
}

int sqlite3_bind_text16(sqlite3_stmt *a1, int a2, const void *a3, int a4, void (__cdecl *a5)(void *))
{
  return _sqlite3_bind_text16(a1, a2, a3, a4, a5);
}

int sqlite3_changes(sqlite3 *a1)
{
  return _sqlite3_changes(a1);
}

int sqlite3_clear_bindings(sqlite3_stmt *a1)
{
  return _sqlite3_clear_bindings(a1);
}

int sqlite3_close(sqlite3 *a1)
{
  return _sqlite3_close(a1);
}

int sqlite3_close_v2(sqlite3 *a1)
{
  return _sqlite3_close_v2(a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_blob(a1, iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_bytes(a1, iCol);
}

int sqlite3_column_count(sqlite3_stmt *pStmt)
{
  return _sqlite3_column_count(pStmt);
}

const char *__cdecl sqlite3_column_decltype(sqlite3_stmt *a1, int a2)
{
  return _sqlite3_column_decltype(a1, a2);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_double(a1, iCol);
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_int(a1, iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_int64(a1, iCol);
}

const char *__cdecl sqlite3_column_name(sqlite3_stmt *a1, int N)
{
  return _sqlite3_column_name(a1, N);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_text(a1, iCol);
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_type(a1, iCol);
}

int sqlite3_create_function(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (__cdecl *xFunc)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xStep)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xFinal)(sqlite3_context *))
{
  return _sqlite3_create_function(db, zFunctionName, nArg, eTextRep, pApp, xFunc, xStep, xFinal);
}

const char *__cdecl sqlite3_errstr(int a1)
{
  return _sqlite3_errstr(a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return _sqlite3_exec(a1, sql, callback, a4, errmsg);
}

int sqlite3_extended_result_codes(sqlite3 *a1, int onoff)
{
  return _sqlite3_extended_result_codes(a1, onoff);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return _sqlite3_finalize(pStmt);
}

uint64_t sqlite3_key()
{
  return _sqlite3_key();
}

sqlite3_stmt *__cdecl sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt)
{
  return _sqlite3_next_stmt(pDb, pStmt);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return _sqlite3_open_v2(filename, ppDb, flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return _sqlite3_prepare_v2(db, zSql, nByte, ppStmt, pzTail);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return _sqlite3_reset(pStmt);
}

void sqlite3_result_int64(sqlite3_context *a1, sqlite3_int64 a2)
{
}

const char *__cdecl sqlite3_sql(sqlite3_stmt *pStmt)
{
  return _sqlite3_sql(pStmt);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return _sqlite3_step(a1);
}

int sqlite3_stmt_readonly(sqlite3_stmt *pStmt)
{
  return _sqlite3_stmt_readonly(pStmt);
}

int strcmp(const char *__s1, const char *__s2)
{
  return _strcmp(__s1, __s2);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return _swift_allocateGenericClassMetadata();
}

uint64_t swift_allocateMetadataPack()
{
  return _swift_allocateMetadataPack();
}

uint64_t swift_allocateWitnessTablePack()
{
  return _swift_allocateWitnessTablePack();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_asyncLet_begin()
{
  return _swift_asyncLet_begin();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_checkMetadataState()
{
  return _swift_checkMetadataState();
}

uint64_t swift_continuation_init()
{
  return _swift_continuation_init();
}

uint64_t swift_continuation_throwingResume()
{
  return _swift_continuation_throwingResume();
}

uint64_t swift_deallocClassInstance()
{
  return _swift_deallocClassInstance();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_defaultActor_destroy()
{
  return _swift_defaultActor_destroy();
}

uint64_t swift_defaultActor_initialize()
{
  return _swift_defaultActor_initialize();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastClass()
{
  return _swift_dynamicCastClass();
}

uint64_t swift_dynamicCastMetatype()
{
  return _swift_dynamicCastMetatype();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return _swift_dynamicCastObjCClassUnconditional();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return _swift_dynamicCastObjCProtocolConditional();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return _swift_getAssociatedConformanceWitness();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return _swift_getAssociatedTypeWitness();
}

uint64_t swift_getAtKeyPath()
{
  return _swift_getAtKeyPath();
}

uint64_t swift_getDynamicType()
{
  return _swift_getDynamicType();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getExtendedExistentialTypeMetadata_unique()
{
  return _swift_getExtendedExistentialTypeMetadata_unique();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return _swift_getOpaqueTypeConformance2();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return _swift_getTupleTypeMetadata2();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return _swift_initEnumMetadataMultiPayload();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull()
{
  return _swift_isUniquelyReferenced_nonNull();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return _swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_projectBox()
{
  return _swift_projectBox();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return _swift_stdlib_isStackAllocationSafe();
}

uint64_t swift_stdlib_random()
{
  return _swift_stdlib_random();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_task_isCancelled()
{
  return _swift_task_isCancelled();
}

uint64_t swift_task_isCurrentExecutor()
{
  return _swift_task_isCurrentExecutor();
}

uint64_t swift_task_localValuePop()
{
  return _swift_task_localValuePop();
}

uint64_t swift_task_localValuePush()
{
  return _swift_task_localValuePush();
}

uint64_t swift_task_reportUnexpectedExecutor()
{
  return _swift_task_reportUnexpectedExecutor();
}

uint64_t swift_unexpectedError()
{
  return _swift_unexpectedError();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRelease_n()
{
  return _swift_unknownObjectRelease_n();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakCopyAssign()
{
  return _swift_unknownObjectWeakCopyAssign();
}

uint64_t swift_unknownObjectWeakCopyInit()
{
  return _swift_unknownObjectWeakCopyInit();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_unknownObjectWeakTakeAssign()
{
  return _swift_unknownObjectWeakTakeAssign();
}

uint64_t swift_unknownObjectWeakTakeInit()
{
  return _swift_unknownObjectWeakTakeInit();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

uint64_t swift_willThrowTypedImpl()
{
  return _swift_willThrowTypedImpl();
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return _sysctlbyname(a1, a2, a3, a4, a5);
}

int usleep(useconds_t a1)
{
  return _usleep(a1);
}

BOOLean_t voucher_mach_msg_set(mach_msg_header_t *msg)
{
  return _voucher_mach_msg_set(msg);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return _xpc_activity_get_state(activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return _xpc_activity_set_state(activity, state);
}

xpc_object_t xpc_dictionary_get_dictionary(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_dictionary(xdict, key);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_string(xdict, key);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return _xpc_get_type(object);
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

uint64_t xrPnDyPw()
{
  return _xrPnDyPw();
}

id objc_msgSend_JSONObjectWithData_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "JSONObjectWithData:options:error:");
}

id objc_msgSend_SQLForEntityClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "SQLForEntityClass:");
}

id objc_msgSend_SQLJoinClausesForEntityClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "SQLJoinClausesForEntityClass:");
}

id objc_msgSend_URLForColumnIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForColumnIndex:");
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDForColumnIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUIDForColumnIndex:");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend__copyNumberForKey_applicationId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyNumberForKey:applicationId:");
}

id objc_msgSend__isRunningInAppleVirtualMachine(void *a1, const char *a2, ...)
{
  return _[a1 _isRunningInAppleVirtualMachine];
}

id objc_msgSend__lockupDictionaryForRequest_includingKeys_withCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lockupDictionaryForRequest:includingKeys:withCompletionBlock:");
}

id objc_msgSend__newSelectSQLWithProperties_columns_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_newSelectSQLWithProperties:columns:");
}

id objc_msgSend__requestWithID_kind_context_appVersionId_distributorId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestWithID:kind:context:appVersionId:distributorId:");
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _[a1 absoluteString];
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_applyBinding_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyBinding:atIndex:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_base64EncodedDataWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedDataWithOptions:");
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_bindArray_atPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindArray:atPosition:");
}

id objc_msgSend_bindData_atPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindData:atPosition:");
}

id objc_msgSend_bindDictionary_atPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindDictionary:atPosition:");
}

id objc_msgSend_bindDouble_atPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindDouble:atPosition:");
}

id objc_msgSend_bindInt64_atPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindInt64:atPosition:");
}

id objc_msgSend_bindNullAtPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindNullAtPosition:");
}

id objc_msgSend_bindNumber_atPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindNumber:atPosition:");
}

id objc_msgSend_bindString_atPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindString:atPosition:");
}

id objc_msgSend_bindUUID_atPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindUUID:atPosition:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _[a1 bytes];
}

id objc_msgSend_cacheSize(void *a1, const char *a2, ...)
{
  return _[a1 cacheSize];
}

id objc_msgSend_clearBindings(void *a1, const char *a2, ...)
{
  return _[a1 clearBindings];
}

id objc_msgSend_comparisonType(void *a1, const char *a2, ...)
{
  return _[a1 comparisonType];
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conformsToProtocol:");
}

id objc_msgSend_connectionNeedsResetForCorruption_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionNeedsResetForCorruption:");
}

id objc_msgSend_connectionNeedsResetForReopen_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionNeedsResetForReopen:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_copyDefaultsKeyForEncryptionKeyWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyDefaultsKeyForEncryptionKeyWithIdentifier:");
}

id objc_msgSend_copySelectSQLWithProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copySelectSQLWithProperties:");
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyWithZone:");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_dataForColumnIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataForColumnIndex:");
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_dataWithJSONObject_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithJSONObject:options:error:");
}

id objc_msgSend_databaseEntityClass(void *a1, const char *a2, ...)
{
  return _[a1 databaseEntityClass];
}

id objc_msgSend_databaseID(void *a1, const char *a2, ...)
{
  return _[a1 databaseID];
}

id objc_msgSend_databasePath(void *a1, const char *a2, ...)
{
  return _[a1 databasePath];
}

id objc_msgSend_databaseTable(void *a1, const char *a2, ...)
{
  return _[a1 databaseTable];
}

id objc_msgSend_dateForColumnIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateForColumnIndex:");
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultProperties(void *a1, const char *a2, ...)
{
  return _[a1 defaultProperties];
}

id objc_msgSend_deleteFromDatabase(void *a1, const char *a2, ...)
{
  return _[a1 deleteFromDatabase];
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _[a1 description];
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_dictionaryWithSharedKeySet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithSharedKeySet:");
}

id objc_msgSend_disambiguatedSQLForProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disambiguatedSQLForProperty:");
}

id objc_msgSend_doubleForColumnIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleForColumnIndex:");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_encryptionKeyId(void *a1, const char *a2, ...)
{
  return _[a1 encryptionKeyId];
}

id objc_msgSend_entityClass(void *a1, const char *a2, ...)
{
  return _[a1 entityClass];
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateMemoryEntitiesUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateMemoryEntitiesUsingBlock:");
}

id objc_msgSend_enumerateMemoryEntitiesWithProperties_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateMemoryEntitiesWithProperties:usingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumeratePersistentIDsAndProperties_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratePersistentIDsAndProperties:usingBlock:");
}

id objc_msgSend_enumeratePersistentIDsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratePersistentIDsUsingBlock:");
}

id objc_msgSend_enumerateRowsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateRowsUsingBlock:");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_executeQuery_withResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeQuery:withResults:");
}

id objc_msgSend_executeStatement_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeStatement:error:");
}

id objc_msgSend_executeStatement_error_bindings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeStatement:error:bindings:");
}

id objc_msgSend_externalPropertyValues(void *a1, const char *a2, ...)
{
  return _[a1 externalPropertyValues];
}

id objc_msgSend_fetchKeyWithIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchKeyWithIdentifier:error:");
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 fileSystemRepresentation];
}

id objc_msgSend_finalizeStatement(void *a1, const char *a2, ...)
{
  return _[a1 finalizeStatement];
}

id objc_msgSend_foreignDatabaseColumnForProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "foreignDatabaseColumnForProperty:");
}

id objc_msgSend_foreignDatabaseTableForProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "foreignDatabaseTableForProperty:");
}

id objc_msgSend_foreignDatabaseTablesToDelete(void *a1, const char *a2, ...)
{
  return _[a1 foreignDatabaseTablesToDelete];
}

id objc_msgSend_foreignKeyColumnForTable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "foreignKeyColumnForTable:");
}

id objc_msgSend_getValuesForProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getValuesForProperties:");
}

id objc_msgSend_hasRows(void *a1, const char *a2, ...)
{
  return _[a1 hasRows];
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _[a1 hash];
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _[a1 identifier];
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _[a1 init];
}

id objc_msgSend_initOnConnection_descriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initOnConnection:descriptor:");
}

id objc_msgSend_initWithBase64EncodedData_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBase64EncodedData:options:");
}

id objc_msgSend_initWithBase64EncodedString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBase64EncodedString:options:");
}

id objc_msgSend_initWithDatabaseEntity_properties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseEntity:properties:");
}

id objc_msgSend_initWithDatabaseID_propertyValues_externalPropertyValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseID:propertyValues:externalPropertyValues:");
}

id objc_msgSend_initWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:code:userInfo:");
}

id objc_msgSend_initWithEntityClass_memoryEntityClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEntityClass:memoryEntityClass:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithGenre_genreID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithGenre:genreID:");
}

id objc_msgSend_initWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInt:");
}

id objc_msgSend_initWithLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLongLong:");
}

id objc_msgSend_initWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:");
}

id objc_msgSend_initWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjectsAndKeys:");
}

id objc_msgSend_initWithPersistentID_onConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersistentID:onConnection:");
}

id objc_msgSend_initWithStatement_onConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStatement:onConnection:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithStringValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStringValue:");
}

id objc_msgSend_initWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUTF8String:");
}

id objc_msgSend_initWithUUIDString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUIDString:");
}

id objc_msgSend_int64ForColumnIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "int64ForColumnIndex:");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _[a1 intValue];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _[a1 integerValue];
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDictionary:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isNegative(void *a1, const char *a2, ...)
{
  return _[a1 isNegative];
}

id objc_msgSend_isReadOnly(void *a1, const char *a2, ...)
{
  return _[a1 isReadOnly];
}

id objc_msgSend_joinClauseForProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "joinClauseForProperty:");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_limitCount(void *a1, const char *a2, ...)
{
  return _[a1 limitCount];
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _[a1 longLongValue];
}

id objc_msgSend_makeURLWithSubstitutions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeURLWithSubstitutions:");
}

id objc_msgSend_matchesNull(void *a1, const char *a2, ...)
{
  return _[a1 matchesNull];
}

id objc_msgSend_memoryEntityClass(void *a1, const char *a2, ...)
{
  return _[a1 memoryEntityClass];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_notifyOfGameCenterEnabledAppInstall_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyOfGameCenterEnabledAppInstall:withCompletionHandler:");
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _[a1 null];
}

id objc_msgSend_numberForColumnIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberForColumnIndex:");
}

id objc_msgSend_numberValueForProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberValueForProperty:");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_objCType(void *a1, const char *a2, ...)
{
  return _[a1 objCType];
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 objectEnumerator];
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_performTransaction_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performTransaction:error:");
}

id objc_msgSend_persistentID(void *a1, const char *a2, ...)
{
  return _[a1 persistentID];
}

id objc_msgSend_postNotificationName_object_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:userInfo:");
}

id objc_msgSend_predicate(void *a1, const char *a2, ...)
{
  return _[a1 predicate];
}

id objc_msgSend_predicateMatchingAnyPredicates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateMatchingAnyPredicates:");
}

id objc_msgSend_predicateWithProperty_equalToValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithProperty:equalToValue:");
}

id objc_msgSend_predicateWithProperty_value_comparisonType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithProperty:value:comparisonType:");
}

id objc_msgSend_predicates(void *a1, const char *a2, ...)
{
  return _[a1 predicates];
}

id objc_msgSend_property(void *a1, const char *a2, ...)
{
  return _[a1 property];
}

id objc_msgSend_propertyValues(void *a1, const char *a2, ...)
{
  return _[a1 propertyValues];
}

id objc_msgSend_protectionType(void *a1, const char *a2, ...)
{
  return _[a1 protectionType];
}

id objc_msgSend_query(void *a1, const char *a2, ...)
{
  return _[a1 query];
}

id objc_msgSend_queryOnConnection_predicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryOnConnection:predicate:");
}

id objc_msgSend_raise_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "raise:format:");
}

id objc_msgSend_reloadFromDatabaseEntity_properties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reloadFromDatabaseEntity:properties:");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _[a1 removeAllObjects];
}

id objc_msgSend_removeItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtPath:error:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_reset(void *a1, const char *a2, ...)
{
  return _[a1 reset];
}

id objc_msgSend_serialNumber(void *a1, const char *a2, ...)
{
  return _[a1 serialNumber];
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _[a1 set];
}

id objc_msgSend_setCacheSizeWithNumberOfKilobytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCacheSizeWithNumberOfKilobytes:");
}

id objc_msgSend_setDatabaseID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDatabaseID:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setOrderingDirections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOrderingDirections:");
}

id objc_msgSend_setOrderingProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOrderingProperties:");
}

id objc_msgSend_setPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPredicate:");
}

id objc_msgSend_setValues_forExternalProperties_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValues:forExternalProperties:count:");
}

id objc_msgSend_setValues_forProperties_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValues:forProperties:count:");
}

id objc_msgSend_setValuesWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValuesWithDictionary:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_sharedKeySetForKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedKeySetForKeys:");
}

id objc_msgSend_storeKey_withIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeKey:withIdentifier:error:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 stringByDeletingLastPathComponent];
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringForColumnIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForColumnIndex:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithString:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_strongToStrongObjectsMapTable(void *a1, const char *a2, ...)
{
  return _[a1 strongToStrongObjectsMapTable];
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceReferenceDate];
}

id objc_msgSend_unarchivedObjectOfClass_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedObjectOfClass:fromData:error:");
}

id objc_msgSend_unionSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unionSet:");
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return _[a1 value];
}

id objc_msgSend_valueForProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForProperty:");
}

id objc_msgSend_values(void *a1, const char *a2, ...)
{
  return _[a1 values];
}