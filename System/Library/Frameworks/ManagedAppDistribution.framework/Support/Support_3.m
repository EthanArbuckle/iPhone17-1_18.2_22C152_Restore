uint64_t sub_100270CA0@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  void v12[14];
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  unsigned char v17[32];
  uint64_t v18;
  char v19;

  if ((a2 & 1) == 0)
  {
    sub_100017238(a1, (uint64_t)&v13, &qword_10065DEC8);
    if (*((void *)&v14 + 1))
    {
      sub_1000172F8(&qword_10065DEE0);
      if (swift_dynamicCast()) {
        v4 = v12[0];
      }
      else {
        v4 = 0;
      }
    }
    else
    {
      sub_10001729C((uint64_t)&v13, &qword_10065DEC8);
      v4 = 0;
    }
    sub_1001D05AC(v4, (uint64_t)v12);
    result = sub_10001733C((uint64_t)v12, (uint64_t)&v13, &qword_10065DEE8);
    if ((v17[28] & 1) == 0)
    {
      a3[3] = (uint64_t)&type metadata for ResumableHash.MD5;
      a3[4] = sub_1002721D4();
      result = swift_allocObject();
      *a3 = result;
      v7 = v16;
      *(_OWORD *)(result + 48) = v15;
      *(_OWORD *)(result + 64) = v7;
      *(_OWORD *)(result + 80) = *(_OWORD *)v17;
      *(_OWORD *)(result + 92) = *(_OWORD *)&v17[12];
      v8 = v14;
      *(_OWORD *)(result + 16) = v13;
      *(_OWORD *)(result + 32) = v8;
      return result;
    }
    __break(1u);
    goto LABEL_18;
  }
  sub_100017238(a1, (uint64_t)&v13, &qword_10065DEC8);
  if (*((void *)&v14 + 1))
  {
    sub_1000172F8(&qword_10065DEE0);
    if (swift_dynamicCast()) {
      v5 = v12[0];
    }
    else {
      v5 = 0;
    }
  }
  else
  {
    sub_10001729C((uint64_t)&v13, &qword_10065DEC8);
    v5 = 0;
  }
  sub_1001D080C(v5, (uint64_t)v12);
  result = sub_10001733C((uint64_t)v12, (uint64_t)&v13, &qword_10065DED0);
  if (v19)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  a3[3] = (uint64_t)&type metadata for ResumableHash.SHA256;
  a3[4] = sub_100272170();
  result = swift_allocObject();
  *a3 = result;
  v9 = *(_OWORD *)&v17[16];
  *(_OWORD *)(result + 80) = *(_OWORD *)v17;
  *(_OWORD *)(result + 96) = v9;
  *(void *)(result + 112) = v18;
  v10 = v14;
  *(_OWORD *)(result + 16) = v13;
  *(_OWORD *)(result + 32) = v10;
  v11 = v16;
  *(_OWORD *)(result + 48) = v15;
  *(_OWORD *)(result + 64) = v11;
  return result;
}

void sub_100270E78(uint64_t a1, uint64_t a2)
{
  if (*(void *)(v2 + 64) >= *(void *)(*(void *)(v2 + 8) + 16))
  {
LABEL_38:
    type metadata accessor for InternalError();
    sub_10019FE50();
    swift_allocError();
LABEL_39:
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 72);
    if (a1) {
      int64_t v5 = a2 - a1;
    }
    else {
      int64_t v5 = 0;
    }
    uint64_t v6 = v4 + v5;
    if (__OFADD__(v4, v5))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    uint64_t v7 = *(void *)(v2 + 16);
    if (v6 < v7)
    {
      sub_100239C90(v2 + 24, *(void *)(v2 + 48));
      dispatch thunk of HashFunction.update(bufferPointer:)();
      *(void *)(v2 + 72) = v6;
      return;
    }
    int64_t v8 = v7 - v4;
    if (__OFSUB__(v7, v4)) {
      goto LABEL_48;
    }
    uint64_t v9 = *(void *)(v2 + 48);
    v33 = (void *)(v2 + 24);
    sub_100239C90(v2 + 24, v9);
    dispatch thunk of HashFunction.update(bufferPointer:)();
    if (__OFADD__(v4, v8))
    {
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    *(void *)(v2 + 72) = v4 + v8;
    sub_1002712B8();
    if (!v3)
    {
      uint64_t v10 = *(void *)(v2 + 16);
      if (!v10)
      {
LABEL_50:
        __break(1u);
        return;
      }
      BOOL v11 = v5 >= v8;
      if (v10 > 0) {
        BOOL v11 = v8 >= v5;
      }
      if (!v11)
      {
        uint64_t v26 = *(void *)(v2 + 16);
        int64_t v27 = v5;
        while (1)
        {
          int64_t v15 = __OFADD__(v8, v10) ? ((v8 + v10) >> 63) ^ 0x8000000000000000 : v8 + v10;
          uint64_t v16 = v5 - v8;
          if (__OFSUB__(v5, v8)) {
            break;
          }
          uint64_t v17 = *(void *)(v2 + 16);
          if (v17 >= v16) {
            uint64_t v18 = v16;
          }
          else {
            uint64_t v18 = *(void *)(v2 + 16);
          }
          if (v18 >= 1)
          {
            sub_100239C90((uint64_t)v33, *(void *)(v2 + 48));
            dispatch thunk of HashFunction.update(bufferPointer:)();
            uint64_t v19 = *(void *)(v2 + 72);
            BOOL v20 = __OFADD__(v19, v18);
            uint64_t v21 = v19 + v18;
            if (v20) {
              goto LABEL_44;
            }
            *(void *)(v2 + 72) = v21;
            uint64_t v10 = v26;
            if (v17 <= v16 && v21 >= 1)
            {
              if (*(void *)(v2 + 64) >= *(void *)(*(void *)(v2 + 8) + 16)) {
                goto LABEL_38;
              }
              sub_10018AC60(v33, *(void *)(v2 + 48));
              uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
              uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
              sub_10019CE94((uint64_t *)&v30);
              dispatch thunk of HashFunction.finalize()();
              sub_1004E845C();
              Swift::String v22 = String.lowercased()();
              swift_bridgeObjectRelease();
              sub_100014524((uint64_t)&v30);
              unint64_t v23 = *(void *)(v2 + 64);
              if ((v23 & 0x8000000000000000) != 0) {
                goto LABEL_46;
              }
              if (v23 >= *(void *)(*(void *)(v2 + 8) + 16)) {
                goto LABEL_47;
              }
              Swift::String v24 = String.lowercased()();
              if ((v22._countAndFlagsBits != v24._countAndFlagsBits || v22._object != v24._object)
                && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              {
                type metadata accessor for InternalError();
                sub_10019FE50();
                swift_allocError();
                Swift::String *v25 = v22;
                v25[1] = v24;
                goto LABEL_39;
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              *(void *)(v2 + 64) = v23 + 1;
              *(void *)(v2 + 72) = 0;
              char v12 = *(unsigned char *)v2;
              uint64_t v29 = 0;
              memset(v28, 0, sizeof(v28));
              sub_100270CA0((uint64_t)v28, v12, (uint64_t *)&v30);
              sub_10001729C((uint64_t)v28, &qword_10065DEC8);
              v13 = v33;
              sub_100014524((uint64_t)v33);
              sub_10018B164(&v30, (uint64_t)v13);
              uint64_t v10 = v26;
            }
          }
          int64_t v5 = v27;
          BOOL v14 = v27 >= v15;
          if (v10 > 0) {
            BOOL v14 = v15 >= v27;
          }
          int64_t v8 = v15;
          if (v14) {
            return;
          }
        }
        __break(1u);
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
    }
  }
}

void sub_1002712B8()
{
  if (*(uint64_t *)(v0 + 72) >= 1)
  {
    if (*(void *)(v0 + 64) < *(void *)(*(void *)(v0 + 8) + 16))
    {
      sub_10018AC60((void *)(v0 + 24), *(void *)(v0 + 48));
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      sub_10019CE94((uint64_t *)&v9);
      dispatch thunk of HashFunction.finalize()();
      sub_1004E845C();
      Swift::String v1 = String.lowercased()();
      swift_bridgeObjectRelease();
      sub_100014524((uint64_t)&v9);
      unint64_t v2 = *(void *)(v0 + 64);
      if ((v2 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v2 < *(void *)(*(void *)(v0 + 8) + 16))
      {
        Swift::String v3 = String.lowercased()();
        BOOL v4 = v1._countAndFlagsBits == v3._countAndFlagsBits && v1._object == v3._object;
        if (v4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(void *)(v0 + 64) = v2 + 1;
          *(void *)(v0 + 72) = 0;
          char v5 = *(unsigned char *)v0;
          uint64_t v8 = 0;
          memset(v7, 0, sizeof(v7));
          sub_100270CA0((uint64_t)v7, v5, (uint64_t *)&v9);
          sub_10001729C((uint64_t)v7, &qword_10065DEC8);
          sub_100014524(v0 + 24);
          sub_10018B164(&v9, v0 + 24);
          return;
        }
        type metadata accessor for InternalError();
        sub_10019FE50();
        swift_allocError();
        *uint64_t v6 = v1;
        v6[1] = v3;
        goto LABEL_12;
      }
      __break(1u);
      return;
    }
    type metadata accessor for InternalError();
    sub_10019FE50();
    swift_allocError();
LABEL_12:
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
}

uint64_t sub_10027151C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v8 = a3;
  uint64_t v11 = result & 1;
  if (a3)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = String.count.getter();
    result = swift_bridgeObjectRelease();
    uint64_t v13 = 64;
    if (!v11) {
      uint64_t v13 = 32;
    }
    if (v12 != v13)
    {
      swift_bridgeObjectRelease();
LABEL_21:
      result = swift_bridgeObjectRelease();
      uint64_t v11 = 0;
      a2 = 0;
      a4 = 0;
      BOOL v21 = 0;
      a5 = 0;
      uint64_t v8 = 1;
      goto LABEL_22;
    }
  }
  if (!a5)
  {
    a4 = 0;
    goto LABEL_19;
  }
  uint64_t v14 = *(void *)(a5 + 16);
  if (!v14)
  {
LABEL_19:
    BOOL v21 = a5 == 0;
LABEL_22:
    *a6 = v11;
    a6[1] = a2;
    a6[2] = v8;
    a6[3] = a4;
    a6[4] = v21;
    a6[5] = a5;
    return result;
  }
  if (v11) {
    uint64_t v15 = 64;
  }
  else {
    uint64_t v15 = 32;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v16 = String.count.getter();
  result = swift_bridgeObjectRelease();
  if (v16 != v15)
  {
LABEL_20:
    swift_bridgeObjectRelease_n();
    goto LABEL_21;
  }
  uint64_t v22 = v11;
  uint64_t v23 = a4;
  uint64_t v24 = a2;
  if (v14 == 1)
  {
LABEL_16:
    result = swift_bridgeObjectRelease();
    a4 = v23;
    a2 = v24;
    uint64_t v11 = v22;
    goto LABEL_19;
  }
  uint64_t v17 = a5 + 56;
  uint64_t v18 = 1;
  while (1)
  {
    uint64_t v19 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    swift_bridgeObjectRetain();
    uint64_t v20 = String.count.getter();
    result = swift_bridgeObjectRelease();
    if (v20 != v15) {
      goto LABEL_20;
    }
    ++v18;
    v17 += 16;
    if (v19 == v14) {
      goto LABEL_16;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1002716D0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 3499117 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x363532616873 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1002717AC(uint64_t a1)
{
  uint64_t v2 = sub_1000172F8(&qword_10065DF38);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v22 = v2;
  uint64_t v23 = v3;
  __chkstk_darwin(v2);
  char v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000172F8(&qword_10065DF40);
  uint64_t v25 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000172F8(&qword_10065DF48);
  uint64_t v24 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60((void *)a1, *(void *)(a1 + 24));
  sub_100272AC8();
  uint64_t v12 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    goto LABEL_7;
  }
  uint64_t v13 = v25;
  uint64_t v21 = v6;
  uint64_t v26 = a1;
  uint64_t v14 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v14 + 16) != 1)
  {
    uint64_t v16 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v18 = v17;
    sub_1000172F8(&qword_10065DF58);
    *uint64_t v18 = &type metadata for BlockDigest.Algorithm;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, enum case for DecodingError.typeMismatch(_:), v16);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v9);
    a1 = v26;
LABEL_7:
    sub_100014524(a1);
    return a1;
  }
  a1 = *(unsigned __int8 *)(v14 + 32);
  if (a1)
  {
    LODWORD(v25) = *(unsigned __int8 *)(v14 + 32);
    char v28 = 1;
    sub_100272B1C();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v15 = v24;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v9);
    a1 = v25;
  }
  else
  {
    char v27 = 0;
    sub_100272B70();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v19 = v24;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v21);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v9);
  }
  sub_100014524(v26);
  return a1;
}

uint64_t sub_100271BFC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x687469726F676C61 && a2 == 0xE90000000000006DLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x747365676964 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7A69536B636F6C62 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6769446B636F6C62 && a2 == 0xEC00000073747365)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_100271DE0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_1000172F8(&qword_10065DE98);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_1002720B8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    sub_100014524((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    char v24 = 0;
    sub_1002709BC();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v9 = v25;
    char v23 = 1;
    uint64_t v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v12 = v11;
    uint64_t v18 = v10;
    int v19 = v9;
    char v22 = 2;
    swift_bridgeObjectRetain();
    uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    HIDWORD(v17) = v14;
    sub_1000172F8((uint64_t *)&unk_10065C5D0);
    char v21 = 3;
    sub_10027210C((unint64_t *)&qword_10065DEA8);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v15 = v20;
    swift_bridgeObjectRetain();
    sub_100014524((uint64_t)a1);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(unsigned char *)a2 = v19;
    *(void *)(a2 + 8) = v18;
    *(void *)(a2 + 16) = v12;
    *(void *)(a2 + 24) = v13;
    *(unsigned char *)(a2 + 32) = BYTE4(v17) & 1;
    *(void *)(a2 + 40) = v15;
  }
  return result;
}

unint64_t sub_1002720B8()
{
  unint64_t result = qword_10065DEA0;
  if (!qword_10065DEA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065DEA0);
  }
  return result;
}

uint64_t sub_10027210C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10017B924((uint64_t *)&unk_10065C5D0);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100272170()
{
  unint64_t result = qword_10065DED8;
  if (!qword_10065DED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065DED8);
  }
  return result;
}

uint64_t sub_1002721C4()
{
  return _swift_deallocObject(v0, 120, 7);
}

unint64_t sub_1002721D4()
{
  unint64_t result = qword_10065DEF0;
  if (!qword_10065DEF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065DEF0);
  }
  return result;
}

uint64_t sub_100272228()
{
  return _swift_deallocObject(v0, 108, 7);
}

uint64_t destroy for BlockVerifier(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return sub_100014524(a1 + 24);
}

uint64_t initializeWithCopy for BlockVerifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = a2 + 24;
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v6;
  uint64_t v7 = v6;
  uint64_t v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain();
  v8(a1 + 24, v5, v7);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithCopy for BlockVerifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  sub_1002553AC((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

__n128 initializeWithTake for BlockVerifier(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for BlockVerifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  sub_100014524(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for BlockVerifier(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BlockVerifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BlockVerifier()
{
  return &type metadata for BlockVerifier;
}

ValueMetadata *type metadata accessor for BlockDigest.CodingKeys()
{
  return &type metadata for BlockDigest.CodingKeys;
}

ValueMetadata *type metadata accessor for BlockDigest.Algorithm()
{
  return &type metadata for BlockDigest.Algorithm;
}

uint64_t getEnumTagSinglePayload for NewLicenseRequest.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s28ManagedAppDistributionDaemon11BlockDigestV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100272650);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BlockVerifierState.CodingKeys()
{
  return &type metadata for BlockVerifierState.CodingKeys;
}

unint64_t sub_10027268C()
{
  unint64_t result = qword_10065DF00;
  if (!qword_10065DF00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065DF00);
  }
  return result;
}

unint64_t sub_1002726E4()
{
  unint64_t result = qword_10065DF08;
  if (!qword_10065DF08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065DF08);
  }
  return result;
}

unint64_t sub_10027273C()
{
  unint64_t result = qword_10065DF10;
  if (!qword_10065DF10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065DF10);
  }
  return result;
}

unint64_t sub_100272794()
{
  unint64_t result = qword_10065DF18;
  if (!qword_10065DF18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065DF18);
  }
  return result;
}

unint64_t sub_1002727EC()
{
  unint64_t result = qword_10065DF20;
  if (!qword_10065DF20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065DF20);
  }
  return result;
}

unint64_t sub_100272844()
{
  unint64_t result = qword_10065DF28;
  if (!qword_10065DF28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065DF28);
  }
  return result;
}

unint64_t sub_10027289C()
{
  unint64_t result = qword_10065DF30;
  if (!qword_10065DF30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065DF30);
  }
  return result;
}

uint64_t sub_1002728F0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x687469726F676C61 && a2 == 0xE90000000000006DLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7453726568736168 && a2 == 0xEB00000000657461 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001005BA480 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001005BA4A0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

unint64_t sub_100272AC8()
{
  unint64_t result = qword_10065DF50;
  if (!qword_10065DF50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065DF50);
  }
  return result;
}

unint64_t sub_100272B1C()
{
  unint64_t result = qword_10065DF60;
  if (!qword_10065DF60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065DF60);
  }
  return result;
}

unint64_t sub_100272B70()
{
  unint64_t result = qword_10065DF68;
  if (!qword_10065DF68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065DF68);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for EnterpriseAsset.Variant.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s28ManagedAppDistributionDaemon11BlockDigestV9AlgorithmOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100272D20);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_100272D48(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for BlockDigest.Algorithm.CodingKeys()
{
  return &type metadata for BlockDigest.Algorithm.CodingKeys;
}

ValueMetadata *type metadata accessor for BlockDigest.Algorithm.Md5CodingKeys()
{
  return &type metadata for BlockDigest.Algorithm.Md5CodingKeys;
}

ValueMetadata *type metadata accessor for BlockDigest.Algorithm.Sha256CodingKeys()
{
  return &type metadata for BlockDigest.Algorithm.Sha256CodingKeys;
}

unint64_t sub_100272D88()
{
  unint64_t result = qword_10065DF88;
  if (!qword_10065DF88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065DF88);
  }
  return result;
}

unint64_t sub_100272DE0()
{
  unint64_t result = qword_10065DF90;
  if (!qword_10065DF90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065DF90);
  }
  return result;
}

unint64_t sub_100272E38()
{
  unint64_t result = qword_10065DF98;
  if (!qword_10065DF98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065DF98);
  }
  return result;
}

unint64_t sub_100272E90()
{
  unint64_t result = qword_10065DFA0;
  if (!qword_10065DFA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065DFA0);
  }
  return result;
}

unint64_t sub_100272EE8()
{
  unint64_t result = qword_10065DFA8;
  if (!qword_10065DFA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065DFA8);
  }
  return result;
}

unint64_t sub_100272F40()
{
  unint64_t result = qword_10065DFB0;
  if (!qword_10065DFB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065DFB0);
  }
  return result;
}

unint64_t sub_100272F98()
{
  unint64_t result = qword_10065DFB8;
  if (!qword_10065DFB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10065DFB8);
  }
  return result;
}

uint64_t sub_100273008(uint64_t a1)
{
  v2[76] = v1;
  v2[75] = a1;
  sub_1000172F8(&qword_10065B810);
  v2[77] = swift_task_alloc();
  uint64_t v3 = sub_1000172F8(&qword_10065DFC8);
  v2[78] = v3;
  v2[79] = *(void *)(v3 - 8);
  v2[80] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[81] = v4;
  v2[82] = *(void *)(v4 - 8);
  v2[83] = swift_task_alloc();
  v2[84] = swift_task_alloc();
  v2[85] = swift_task_alloc();
  return _swift_task_switch(sub_100273178, 0, 0);
}

uint64_t sub_100273178()
{
  v36 = v0;
  uint64_t v1 = v0[76];
  v0[62] = 0;
  v0[63] = 0;
  if (*(unsigned char *)(v1 + 16))
  {
    unint64_t v2 = 0;
    uint64_t v30 = 0;
  }
  else
  {
    v0[74] = *(void *)(v1 + 8);
    uint64_t v3 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v2 = v4;
    uint64_t v30 = v3;
    v0[62] = v3;
    v0[63] = v4;
    uint64_t v1 = v0[76];
  }
  static Logger.install.getter();
  sub_100273F24(v1, (uint64_t)(v0 + 19));
  sub_100273F24(v1, (uint64_t)(v0 + 28));
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t type = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v5, type);
  uint64_t v7 = v0[85];
  uint64_t v8 = v0[82];
  if (v6)
  {
    uint64_t v29 = v0[81];
    uint64_t v28 = v0[85];
    uint64_t v9 = swift_slowAlloc();
    char v27 = (void *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138412802;
    uint64_t v10 = (void *)v0[22];
    log = v5;
    v0[71] = v10;
    id v11 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *char v27 = v10;
    sub_10019CB0C((uint64_t)(v0 + 19));
    *(_WORD *)(v9 + 12) = 2050;
    uint64_t v12 = v0[28];
    sub_10019CB0C((uint64_t)(v0 + 28));
    v0[72] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 22) = 2082;
    if (v2) {
      uint64_t v13 = v30;
    }
    else {
      uint64_t v13 = 16718;
    }
    if (v2) {
      unint64_t v14 = v2;
    }
    else {
      unint64_t v14 = 0xE200000000000000;
    }
    swift_bridgeObjectRetain();
    v0[73] = sub_1000143F4(v13, v14, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, log, type, "[%@] Fetching metadata for: %{public}llu : %{public}s", (uint8_t *)v9, 0x20u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v15(v28, v29);
  }
  else
  {
    uint64_t v16 = v0[81];
    sub_10019CB0C((uint64_t)(v0 + 28));
    sub_10019CB0C((uint64_t)(v0 + 19));
    swift_bridgeObjectRelease_n();

    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v15(v7, v16);
  }
  v0[86] = v15;
  uint64_t v17 = (void *)v0[76];
  sub_10019B17C((uint64_t)(v17 + 4), (uint64_t)(v0 + 54));
  sub_1000172F8(&qword_10065C450);
  if (swift_dynamicCast()) {
    uint64_t v18 = v0[65];
  }
  else {
    uint64_t v18 = 0;
  }
  v0[69] = *v17;
  dispatch thunk of CustomStringConvertible.description.getter();
  NSString v34 = String._bridgeToObjectiveC()();
  v0[87] = v34;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (v0[63])
  {
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v19 = 0;
  }
  v0[88] = v19;
  NSString v33 = v19;
  if (v18)
  {
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v20 = 0;
  }
  v0[89] = v20;
  uint64_t v21 = v0[80];
  uint64_t v22 = v0[79];
  uint64_t v23 = v0[78];
  typea = self;
  v0[2] = v0;
  v0[7] = v0 + 66;
  v0[3] = sub_100273718;
  swift_continuation_init();
  v0[53] = v23;
  char v24 = sub_10019CE94(v0 + 50);
  sub_1000172F8(&qword_10065DFD0);
  sub_1000172F8(&qword_10065B260);
  CheckedContinuation.init(continuation:function:)();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v22 + 32))(v24, v21, v23);
  v0[46] = _NSConcreteStackBlock;
  v0[47] = 1107296256;
  v0[48] = sub_100273E68;
  v0[49] = &unk_10063D9E0;
  [typea fetchMediaAPIMetadataForItemID:v34 versionID:v33 distributorID:v20 completion:v0 + 46];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_100273718()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 720) = v1;
  if (v1) {
    unint64_t v2 = sub_100273DA4;
  }
  else {
    unint64_t v2 = sub_100273828;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100273828()
{
  uint64_t v37 = v0;
  uint64_t v1 = *(void **)(v0 + 704);
  unint64_t v2 = *(void **)(v0 + 696);
  uint64_t v3 = *(void *)(v0 + 616);
  uint64_t v4 = *(void *)(v0 + 608);
  uint64_t v5 = *(void *)(v0 + 528);

  BOOL v6 = *(void **)(v4 + 24);
  swift_bridgeObjectRetain();
  sub_10047DBEC(v5, v6, v3);
  uint64_t v7 = type metadata accessor for MediaAPIMetadata();
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v3, 1, v7);
  uint64_t v9 = *(void *)(v0 + 616);
  uint64_t v10 = *(void *)(v0 + 608);
  if (v8 == 1)
  {
    sub_100273F78(*(void *)(v0 + 616));
    static Logger.install.getter();
    sub_100273F24(v10, v0 + 296);
    swift_bridgeObjectRetain();
    id v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    unint64_t v14 = *(void (**)(uint64_t, uint64_t))(v0 + 688);
    uint64_t v15 = *(void *)(v0 + 664);
    uint64_t v16 = *(void *)(v0 + 648);
    if (v13)
    {
      uint64_t v35 = *(void *)(v0 + 648);
      uint64_t v17 = swift_slowAlloc();
      log = v11;
      uint64_t v18 = (void *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 138412546;
      uint64_t v34 = v15;
      NSString v19 = *(void **)(v0 + 320);
      *(void *)(v0 + 536) = v19;
      id v20 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v18 = v19;
      sub_10019CB0C(v0 + 296);
      *(_WORD *)(v17 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v21 = Dictionary.description.getter();
      unint64_t v23 = v22;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 544) = sub_1000143F4(v21, v23, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, log, v12, "[%@] Invalid metadata: %s", (uint8_t *)v17, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v14(v34, v35);
    }
    else
    {
      sub_10019CB0C(v0 + 296);
      swift_bridgeObjectRelease_n();

      v14(v15, v16);
    }
    type metadata accessor for InternalError();
    sub_10019FE50();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v31 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    uint64_t v24 = *(void *)(v0 + 600);
    swift_bridgeObjectRelease();
    sub_10019C950(v9, v24);
    static Logger.install.getter();
    sub_100273F24(v10, v0 + 80);
    unsigned __int8 v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      char v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = (void *)swift_slowAlloc();
      *(_DWORD *)char v27 = 138412290;
      uint64_t v29 = *(void **)(v0 + 104);
      *(void *)(v0 + 560) = v29;
      id v30 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v28 = v29;
      sub_10019CB0C(v0 + 80);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "[%@] Successfully fetched metadata", v27, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10019CB0C(v0 + 80);
    }

    (*(void (**)(void, void))(v0 + 688))(*(void *)(v0 + 672), *(void *)(v0 + 648));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v31 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v31();
}

uint64_t sub_100273DA4()
{
  uint64_t v1 = (void *)v0[89];
  unint64_t v2 = (void *)v0[88];
  uint64_t v3 = (void *)v0[87];
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

void sub_100273E68(uint64_t a1, uint64_t a2, void *a3)
{
  sub_10018AC60((void *)(a1 + 32), *(void *)(a1 + 56));
  if (a3)
  {
    id v4 = a3;
    sub_1000172F8(&qword_10065DFC8);
    CheckedContinuation.resume(throwing:)();
  }
  else
  {
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000172F8(&qword_10065DFC8);
    CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_100273F24(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100273F5C(uint64_t a1)
{
  return sub_100014524(a1 + 32);
}

uint64_t sub_100273F78(uint64_t a1)
{
  uint64_t v2 = sub_1000172F8(&qword_10065B810);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for FetchMediaAPIMetadataTask(uint64_t a1)
{
  return sub_100014524(a1 + 32);
}

uint64_t initializeWithCopy for FetchMediaAPIMetadataTask(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  id v4 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = a1 + 32;
  uint64_t v6 = a2 + 32;
  long long v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v7;
  uint64_t v8 = v7;
  uint64_t v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  id v10 = v4;
  v9(v5, v6, v8);
  return a1;
}

uint64_t assignWithCopy for FetchMediaAPIMetadataTask(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void **)(a2 + 24);
  uint64_t v6 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v5;
  id v7 = v5;

  sub_1002553AC((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
  return a1;
}

uint64_t assignWithTake for FetchMediaAPIMetadataTask(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  sub_100014524(a1 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchMediaAPIMetadataTask(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FetchMediaAPIMetadataTask(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FetchMediaAPIMetadataTask()
{
  return &type metadata for FetchMediaAPIMetadataTask;
}

uint64_t sub_100274210@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (qword_10065B130 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_1004E3F50(a1, a2);
  if (v5)
  {
    sub_100274568(a3);
  }
  else
  {
    int v16 = 0x8000;
    uint64_t v18 = &type metadata for AppLicenseDeliveryDecryptionSession;
    NSString v19 = &off_10063DB10;
    uint64_t v17 = v11;
    sub_1002745DC(a4, (uint64_t)v15);
    *(_OWORD *)(a5 + 40) = xmmword_1005A5CE0;
    *(_OWORD *)(a5 + 56) = 0u;
    *(_OWORD *)(a5 + 72) = 0u;
    *(_OWORD *)(a5 + 88) = 0u;
    *(_OWORD *)(a5 + 104) = 0u;
    *(_OWORD *)(a5 + 120) = 0u;
    sub_10019B17C((uint64_t)&v16, a5);
    sub_100274644((uint64_t)a3, (uint64_t)&v20);
    if ((void)v21 == 1)
    {
      sub_10001729C((uint64_t)v15, &qword_1006666D0);
      sub_100014524((uint64_t)&v16);
      sub_10001729C(a5 + 56, &qword_10065DFD8);
      *(_OWORD *)(a5 + 56) = 0u;
      *(_OWORD *)(a5 + 72) = 0u;
      *(_OWORD *)(a5 + 88) = 0u;
      *(_OWORD *)(a5 + 104) = 0u;
      *(_OWORD *)(a5 + 120) = 0u;
    }
    else
    {
      v23[0] = v20;
      v23[1] = v21;
      v23[2] = v22;
      sub_1002745DC((uint64_t)v15, (uint64_t)v13);
      sub_100270A64((uint64_t)v23, (uint64_t)v13, (uint64_t)v14);
      sub_10001729C((uint64_t)v15, &qword_1006666D0);
      sub_100014524((uint64_t)&v16);
      sub_100274700((uint64_t)v14, a5 + 56);
    }
  }
  sub_1002745A0(a2);
  sub_1002745A0(a1);
  return sub_10001729C(a4, &qword_1006666D0);
}

void sub_1002743FC(uint64_t *a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (qword_10065B130 != -1) {
    swift_once();
  }
  sub_1004E4560(a1, v3, 0);
}

uint64_t sub_100274470(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v6 = a1;
  unint64_t v7 = a2;
  sub_100012670(a1, a2);
  if (qword_10065B130 != -1) {
    swift_once();
  }
  sub_1004E4560(&v6, v4, 1);
  uint64_t result = v6;
  if (v3) {
    return sub_100013510(v6, v7);
  }
  return result;
}

uint64_t sub_1002744FC()
{
  if (qword_10065B130 != -1) {
    swift_once();
  }
  unsigned int v0 = OZpDoyky();
  return sub_1004E18C8(v0);
}

uint64_t sub_100274560()
{
  return *v0;
}

uint64_t *sub_100274568(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1002745A0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002745DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_1006666D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100274644(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_10065D400);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002746AC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100274700(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_10065DFD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for AppLicenseDeliveryDecryptionSession(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)(a1 + 8)) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for AppLicenseDeliveryDecryptionSession(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)uint64_t result = a2 - 2;
    *(void *)(result + 8) = 0;
    if (a3 >= 2) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppLicenseDeliveryDecryptionSession()
{
  return &type metadata for AppLicenseDeliveryDecryptionSession;
}

uint64_t sub_1002747F8(uint64_t a1)
{
  uint64_t v3 = sub_1000172F8(&qword_10065BCD0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_1000172F8(&qword_100663D90);
  uint64_t v48 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  v55 = (uint64_t *)((char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (!v7) {
    return (uint64_t)v8;
  }
  v46 = v5;
  uint64_t v50 = v1;
  v61 = _swiftEmptyArrayStorage;
  sub_100455FF8(0, v7, 0);
  uint64_t v8 = v61;
  uint64_t v10 = sub_100458280(a1);
  uint64_t v11 = 0;
  uint64_t v12 = a1 + 64;
  char v13 = *(unsigned char *)(a1 + 32);
  uint64_t v42 = a1 + 80;
  uint64_t v47 = a1;
  int64_t v43 = v7;
  uint64_t v44 = v9;
  uint64_t v45 = a1 + 64;
  while ((v10 & 0x8000000000000000) == 0 && v10 < 1 << v13)
  {
    unint64_t v17 = (unint64_t)v10 >> 6;
    if ((*(void *)(v12 + 8 * ((unint64_t)v10 >> 6)) & (1 << v10)) == 0) {
      goto LABEL_37;
    }
    if (*(_DWORD *)(a1 + 36) != v9) {
      goto LABEL_38;
    }
    uint64_t v51 = v11;
    uint64_t v52 = 1 << v10;
    v54 = v8;
    uint64_t v18 = *(void *)(a1 + 48) + 24 * v10;
    uint64_t v20 = *(void *)v18;
    uint64_t v19 = *(void *)(v18 + 8);
    char v21 = *(unsigned char *)(v18 + 16);
    uint64_t v22 = *(void *)(*(void *)(a1 + 56) + 16 * v10 + 8);
    unint64_t v23 = v55;
    uint64_t *v55 = v20;
    v23[1] = v19;
    *((unsigned char *)v23 + 16) = v21;
    sub_1001C3ED0(v20, v19, v21);
    sub_1001C3ED0(v20, v19, v21);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v22 + 24));
    uint64_t v24 = *(void *)(v22 + 16);
    if (*(void *)(v24 + 16) && (unint64_t v25 = sub_100016D20(0x6D726F6674616C70, 0xE800000000000000), (v26 & 1) != 0))
    {
      sub_100017238(*(void *)(v24 + 56) + 32 * v25, (uint64_t)v60, (uint64_t *)&unk_10065C9C0);
    }
    else
    {
      memset(v60, 0, 24);
      v60[3] = 1;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v22 + 24));
    sub_100017238((uint64_t)v60, (uint64_t)v58, &qword_10065BC40);
    uint64_t v53 = v22;
    if (v59 == 1)
    {
      uint64_t v27 = type metadata accessor for Platform();
      uint64_t v28 = (uint64_t)v46;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v46, 1, 1, v27);
    }
    else
    {
      sub_10001733C((uint64_t)v58, (uint64_t)v57, (uint64_t *)&unk_10065C9C0);
      v56[3] = sub_1000172F8((uint64_t *)&unk_10065C9C0);
      v56[0] = swift_allocObject();
      sub_100017238((uint64_t)v57, v56[0] + 16, (uint64_t *)&unk_10065C9C0);
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      uint64_t v28 = (uint64_t)v46;
      uint64_t v29 = v50;
      sub_1002429E4(v56, (uint64_t)v46);
      uint64_t v50 = v29;
      if (v29) {
        goto LABEL_42;
      }
      swift_release();
      sub_100014524((uint64_t)v56);
      sub_10001729C((uint64_t)v57, (uint64_t *)&unk_10065C9C0);
      uint64_t v27 = type metadata accessor for Platform();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v28, 0, 1, v27);
    }
    id v30 = (char *)v55 + *(int *)(v49 + 48);
    sub_10001729C((uint64_t)v60, &qword_10065BC40);
    type metadata accessor for Platform();
    uint64_t v31 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v28, 1, v27) == 1)
    {
      static Platform.current.getter();
      sub_10001729C(v28, &qword_10065BCD0);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v30, v28, v27);
    }
    a1 = v47;
    sub_1001C3EC0(v20, v19, v21);
    swift_release();
    uint64_t v8 = v54;
    v61 = v54;
    unint64_t v33 = v54[2];
    unint64_t v32 = v54[3];
    if (v33 >= v32 >> 1)
    {
      sub_100455FF8(v32 > 1, v33 + 1, 1);
      uint64_t v8 = v61;
    }
    v8[2] = v33 + 1;
    sub_10001733C((uint64_t)v55, (uint64_t)v8+ ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(void *)(v48 + 72) * v33, &qword_100663D90);
    char v13 = *(unsigned char *)(a1 + 32);
    unint64_t v14 = 1 << v13;
    if (v10 >= 1 << v13) {
      goto LABEL_39;
    }
    uint64_t v12 = v45;
    uint64_t v34 = *(void *)(v45 + 8 * v17);
    if ((v34 & v52) == 0) {
      goto LABEL_40;
    }
    LODWORD(v9) = v44;
    if (*(_DWORD *)(a1 + 36) != v44) {
      goto LABEL_41;
    }
    unint64_t v35 = v34 & (-2 << (v10 & 0x3F));
    if (v35)
    {
      unint64_t v14 = __clz(__rbit64(v35)) | v10 & 0xFFFFFFFFFFFFFFC0;
      int64_t v15 = v43;
    }
    else
    {
      unint64_t v36 = v17 + 1;
      unint64_t v37 = (v14 + 63) >> 6;
      int64_t v15 = v43;
      if (v17 + 1 < v37)
      {
        unint64_t v38 = *(void *)(v45 + 8 * v36);
        if (v38)
        {
          uint64_t v16 = v51;
LABEL_34:
          unint64_t v14 = __clz(__rbit64(v38)) + (v36 << 6);
        }
        else
        {
          unint64_t v39 = v37 - 2;
          uint64_t v16 = v51;
          while (v39 != v17)
          {
            unint64_t v38 = *(void *)(v42 + 8 * v17++);
            if (v38)
            {
              unint64_t v36 = v17 + 1;
              goto LABEL_34;
            }
          }
        }
        goto LABEL_5;
      }
    }
    uint64_t v16 = v51;
LABEL_5:
    uint64_t v11 = v16 + 1;
    uint64_t v10 = v14;
    if (v11 == v15) {
      return (uint64_t)v8;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  swift_release();
  sub_100014524((uint64_t)v56);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_100274E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 968) = a5;
  *(void *)(v5 + 960) = a4;
  *(void *)(v5 + 952) = a3;
  *(void *)(v5 + 944) = a2;
  *(void *)(v5 + 936) = a1;
  *(void *)(v5 + 976) = *(void *)a2;
  *(_OWORD *)(v5 + 984) = *(_OWORD *)(a2 + 8);
  *(void *)(v5 + 1000) = *(void *)(a2 + 24);
  *(_OWORD *)(v5 + 1008) = *(_OWORD *)(a2 + 32);
  *(void *)(v5 + 1024) = *(void *)(a2 + 48);
  long long v6 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v5 + 1032) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v5 + 1048) = v6;
  *(void *)(v5 + 1064) = *(void *)(a2 + 88);
  *(void *)(v5 + 1328) = *(void *)(a2 + 96);
  *(_DWORD *)(v5 + 1336) = *(_DWORD *)(a2 + 104);
  *(unsigned char *)(v5 + 1340) = *(unsigned char *)(a2 + 108);
  *(_WORD *)(v5 + 1341) = *(_WORD *)(a2 + 109);
  uint64_t v7 = type metadata accessor for Logger();
  *(void *)(v5 + 1072) = v7;
  *(void *)(v5 + 1080) = *(void *)(v7 - 8);
  *(void *)(v5 + 1088) = swift_task_alloc();
  *(void *)(v5 + 1096) = swift_task_alloc();
  *(void *)(v5 + 1104) = swift_task_alloc();
  sub_1000172F8(&qword_10065BCD0);
  *(void *)(v5 + 1112) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Platform();
  *(void *)(v5 + 1120) = v8;
  *(void *)(v5 + 1128) = *(void *)(v8 - 8);
  *(void *)(v5 + 1136) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ManagedApp();
  *(void *)(v5 + 1144) = v9;
  *(void *)(v5 + 1152) = *(void *)(v9 - 8);
  *(void *)(v5 + 1160) = swift_task_alloc();
  *(void *)(v5 + 1168) = swift_task_alloc();
  *(void *)(v5 + 1176) = swift_task_alloc();
  type metadata accessor for MediaAPIApp(0);
  *(void *)(v5 + 1184) = swift_task_alloc();
  *(void *)(v5 + 1192) = swift_task_alloc();
  *(void *)(v5 + 1200) = swift_task_alloc();
  uint64_t v10 = sub_1000172F8((uint64_t *)&unk_100663D80);
  *(void *)(v5 + 1208) = v10;
  *(void *)(v5 + 1216) = *(void *)(v10 - 8);
  *(void *)(v5 + 1224) = swift_task_alloc();
  return _swift_task_switch(sub_100275154, 0, 0);
}

uint64_t sub_100275154()
{
  int v1 = *(_DWORD *)(v0 + 1336);
  uint64_t v2 = *(void *)(v0 + 1064);
  uint64_t v3 = *(void *)(v0 + 1024);
  uint64_t v4 = *(void *)(v0 + 1016);
  long long v5 = *(_OWORD *)(v0 + 1000);
  uint64_t v6 = *(void *)(v0 + 976);
  uint64_t v7 = *(void *)(v0 + 944);
  uint64_t v8 = *(void *)(v0 + 936);
  char v9 = *(unsigned char *)(v0 + 1342) & 1;
  char v10 = *(unsigned char *)(v0 + 1341) & 1;
  char v11 = *(unsigned char *)(v0 + 1340) & 1;
  *(void *)(v0 + 872) = v8;
  *(_OWORD *)(v0 + 696) = *(_OWORD *)(v0 + 960);
  *(void *)(v0 + 712) = v6;
  *(_OWORD *)(v0 + 720) = *(_OWORD *)(v0 + 984);
  *(_OWORD *)(v0 + 736) = v5;
  *(void *)(v0 + 752) = v4;
  *(void *)(v0 + 760) = v3;
  long long v12 = *(_OWORD *)(v0 + 1048);
  *(_OWORD *)(v0 + 768) = *(_OWORD *)(v0 + 1032);
  *(_OWORD *)(v0 + 784) = v12;
  *(void *)(v0 + 800) = v2;
  *(void *)(v0 + 808) = *(void *)(v0 + 1328);
  *(_DWORD *)(v0 + 816) = v1;
  *(unsigned char *)(v0 + 820) = v11;
  *(unsigned char *)(v0 + 821) = v10;
  *(unsigned char *)(v0 + 822) = v9;
  *(void *)(v0 + 824) = 0;
  uint64_t v13 = swift_allocObject();
  long long v14 = *(_OWORD *)(v0 + 808);
  *(_OWORD *)(v13 + 112) = *(_OWORD *)(v0 + 792);
  *(_OWORD *)(v13 + 128) = v14;
  uint64_t v15 = *(void *)(v0 + 824);
  long long v16 = *(_OWORD *)(v0 + 744);
  *(_OWORD *)(v13 + 48) = *(_OWORD *)(v0 + 728);
  *(_OWORD *)(v13 + 64) = v16;
  long long v17 = *(_OWORD *)(v0 + 776);
  *(_OWORD *)(v13 + 80) = *(_OWORD *)(v0 + 760);
  *(_OWORD *)(v13 + 96) = v17;
  long long v18 = *(_OWORD *)(v0 + 712);
  *(_OWORD *)(v13 + 16) = *(_OWORD *)(v0 + 696);
  *(_OWORD *)(v13 + 32) = v18;
  *(void *)(v13 + 144) = v15;
  *(void *)(v13 + 152) = v8;
  uint64_t v19 = swift_allocObject();
  *(void *)(v0 + 1232) = v19;
  *(void *)(v19 + 16) = &unk_10065DFF0;
  *(void *)(v19 + 24) = v13;
  swift_bridgeObjectRetain_n();
  swift_unknownObjectRetain();
  sub_10018AB28(v7);
  sub_100279F9C(v0 + 696);
  swift_retain();
  sub_10017B924(&qword_10065E008);
  swift_asyncLet_begin();
  return _swift_asyncLet_get_throwing(v0 + 16, v0 + 920, sub_100275348, v0 + 656);
}

uint64_t sub_100275348()
{
  *(void *)(v1 + 1240) = v0;
  if (v0) {
    return _swift_asyncLet_finish(v1 + 16, v1 + 920, sub_100276568, v1 + 832);
  }
  else {
    return _swift_task_switch(sub_10027538C, 0, 0);
  }
}

uint64_t sub_10027538C()
{
  uint64_t v85 = v0;
  uint64_t v1 = *(void *)(v0 + 920);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 1216);
    uint64_t v67 = *(void *)(v0 + 1184);
    uint64_t v4 = *(void *)(v0 + 1128);
    uint64_t v74 = *(void *)(v0 + 1224);
    uint64_t v75 = v74 + *(int *)(*(void *)(v0 + 1208) + 48);
    uint64_t v76 = *(void *)(v0 + 936);
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v73 = *(void *)(v3 + 72);
    v65 = (void (**)(void, void, void))(v4 + 32);
    v66 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
    uint64_t v64 = *(void *)(v0 + 1152);
    v77 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 1080) + 8);
    uint64_t v6 = *(void *)(v0 + 1240);
    swift_bridgeObjectRetain();
    v68 = _swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v8 = *(uint64_t **)(v0 + 1224);
      uint64_t v9 = *(void *)(v0 + 1200);
      sub_100017238(v5, (uint64_t)v8, (uint64_t *)&unk_100663D80);
      uint64_t v10 = *v8;
      uint64_t v11 = *(void *)(v74 + 8);
      char v12 = *(unsigned char *)(v74 + 16);
      sub_10027AE18(v75, v9, type metadata accessor for MediaAPIApp);
      uint64_t v81 = v11;
      uint64_t v82 = v5;
      uint64_t v80 = v10;
      char v83 = v12;
      if (!*(void *)(v76 + 16)) {
        goto LABEL_11;
      }
      sub_1001C3ED0(v10, v11, v12);
      unint64_t v13 = sub_100452714(v10, v11, v12);
      if ((v14 & 1) == 0) {
        break;
      }
      uint64_t v15 = *(void *)(v0 + 1200);
      uint64_t v16 = *(void *)(v0 + 1192);
      long long v17 = *(os_unfair_lock_s **)(*(void *)(v76 + 56) + 16 * v13 + 8);
      swift_retain();
      sub_1001C3EC0(v10, v11, v12);
      sub_10027AD10(v15, v16, type metadata accessor for MediaAPIApp);
      swift_retain();
      uint64_t v18 = sub_100311910(4, v17);
      uint64_t v20 = v19;
      uint64_t v21 = swift_release();
      if (!v20)
      {
        __break(1u);
        return _swift_asyncLet_finish(v21, v22, v23, v24);
      }
      uint64_t v25 = *(void *)(v0 + 1120);
      uint64_t v26 = *(void *)(v0 + 1112);
      swift_retain();
      sub_100311A5C(13, v17, v26);
      swift_release();
      if ((*v66)(v26, 1, v25) == 1)
      {
        uint64_t v27 = *(void *)(v0 + 1112);
        static Platform.current.getter();
        sub_10001729C(v27, &qword_10065BCD0);
      }
      else
      {
        (*v65)(*(void *)(v0 + 1136), *(void *)(v0 + 1112), *(void *)(v0 + 1120));
      }
      v40 = *(void **)(v0 + 1192);
      uint64_t v41 = *(void *)(v0 + 1176);
      uint64_t v42 = *(void *)(v0 + 944);
      int v43 = sub_1002ACA54(*(char **)(v0 + 1136));
      sub_10018AB28(v42);
      sub_1002A35F4(v40, v18, v20, v43, v42, v41);
      if (!v6)
      {
        if (swift_isUniquelyReferenced_nonNull_native()) {
          unint64_t v56 = (unint64_t)v68;
        }
        else {
          unint64_t v56 = sub_10028F758(0, v68[2] + 1, 1, (unint64_t)v68);
        }
        unint64_t v58 = *(void *)(v56 + 16);
        unint64_t v57 = *(void *)(v56 + 24);
        if (v58 >= v57 >> 1) {
          unint64_t v56 = sub_10028F758(v57 > 1, v58 + 1, 1, v56);
        }
        uint64_t v59 = *(void *)(v0 + 1200);
        uint64_t v60 = *(void *)(v0 + 1176);
        uint64_t v61 = *(void *)(v0 + 1144);
        *(void *)(v56 + 16) = v58 + 1;
        v68 = (void *)v56;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v64 + 32))(v56+ ((*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80))+ *(void *)(v64 + 72) * v58, v60, v61);
        sub_10042ECC8(v80, v81, v83);
        sub_1001C3EC0(v80, v81, v83);
        swift_release();
        swift_release();
        uint64_t v7 = v59;
        goto LABEL_4;
      }
      swift_release();
LABEL_18:
      static Logger.ddm.getter();
      swift_errorRetain();
      sub_1001C3ED0(v80, v81, v83);
      swift_errorRetain();
      uint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.error.getter();
      v79 = v44;
      BOOL v46 = os_log_type_enabled(v44, v45);
      uint64_t v47 = *(void *)(v0 + 1200);
      uint64_t v48 = *(void *)(v0 + 1088);
      uint64_t v49 = *(void *)(v0 + 1072);
      if (v46)
      {
        uint64_t v72 = *(void *)(v0 + 1200);
        uint64_t v50 = swift_slowAlloc();
        v69 = (void *)swift_slowAlloc();
        v84[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v50 = 136446466;
        sub_1001C3ED0(v80, v81, v83);
        uint64_t v70 = v48;
        uint64_t v71 = v49;
        uint64_t v51 = StoreAppIdentifier.description.getter();
        uint64_t v52 = v2;
        unint64_t v54 = v53;
        sub_1001C3EC0(v80, v81, v83);
        *(void *)(v50 + 4) = sub_1000143F4(v51, v54, v84);
        uint64_t v2 = v52;
        swift_bridgeObjectRelease();
        sub_1001C3EC0(v80, v81, v83);
        sub_1001C3EC0(v80, v81, v83);
        *(_WORD *)(v50 + 12) = 2114;
        swift_errorRetain();
        uint64_t v55 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v50 + 14) = v55;
        void *v69 = v55;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v79, v45, "Dropping '%{public}s', failed to fetch metadata: %{public}@", (uint8_t *)v50, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        (*v77)(v70, v71);
        uint64_t v7 = v72;
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        sub_1001C3EC0(v80, v81, v83);
        sub_1001C3EC0(v80, v81, v83);
        swift_errorRelease();
        (*v77)(v48, v49);
        uint64_t v7 = v47;
      }
LABEL_4:
      sub_10027AD78(v7, type metadata accessor for MediaAPIApp);
      uint64_t v6 = 0;
      uint64_t v5 = v82 + v73;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        v62 = v68;
        goto LABEL_28;
      }
    }
    sub_1001C3EC0(v10, v11, v12);
LABEL_11:
    uint64_t v28 = *(void *)(v0 + 1200);
    uint64_t v29 = *(void *)(v0 + 1184);
    static Logger.ddm.getter();
    sub_10027AD10(v28, v29, type metadata accessor for MediaAPIApp);
    id v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    unint64_t v33 = *(uint64_t **)(v0 + 1184);
    uint64_t v34 = *(void *)(v0 + 1104);
    uint64_t v35 = *(void *)(v0 + 1072);
    if (v32)
    {
      uint64_t v78 = *(void *)(v0 + 1072);
      uint64_t v36 = swift_slowAlloc();
      v84[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136315138;
      uint64_t v37 = *v33;
      unint64_t v38 = *(void *)(v67 + 8);
      swift_bridgeObjectRetain();
      *(void *)(v36 + 4) = sub_1000143F4(v37, v38, v84);
      swift_bridgeObjectRelease();
      sub_10027AD78((uint64_t)v33, type metadata accessor for MediaAPIApp);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Unable to map Media API response to declaration identifier for app with item ID %s", (uint8_t *)v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*v77)(v34, v78);
    }
    else
    {
      sub_10027AD78(*(void *)(v0 + 1184), type metadata accessor for MediaAPIApp);

      (*v77)(v34, v35);
    }
    type metadata accessor for InternalError();
    sub_100013B04((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    *unint64_t v39 = xmmword_1005A5D30;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    goto LABEL_18;
  }
  v62 = _swiftEmptyArrayStorage;
LABEL_28:
  uint64_t v22 = v0 + 920;
  uint64_t v21 = v0 + 16;
  uint64_t v24 = v0 + 880;
  *(void *)(v0 + 1248) = v62;
  unint64_t v23 = sub_100275CA0;
  return _swift_asyncLet_finish(v21, v22, v23, v24);
}

uint64_t sub_100275CA0()
{
  return _swift_task_switch(sub_100275CBC, 0, 0);
}

uint64_t sub_100275CBC()
{
  sub_10027A024(v0 + 696);
  swift_release();
  uint64_t v1 = *(void *)(v0 + 1248);
  uint64_t v2 = *(void *)(v0 + 872);
  *(void *)(v0 + 1256) = v2;
  char v3 = *(unsigned char *)(v2 + 32);
  *(unsigned char *)(v0 + 1343) = v3;
  uint64_t v4 = -1;
  uint64_t v5 = -1 << v3;
  uint64_t v6 = *(void *)(v2 + 64);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1 << -(char)v5);
  }
  *(void *)(v0 + 1264) = v1;
  unint64_t v7 = v4 & v6;
  if (v7)
  {
    uint64_t v8 = 0;
    unint64_t v9 = __clz(__rbit64(v7));
    uint64_t v10 = (v7 - 1) & v7;
LABEL_5:
    *(void *)(v0 + 1280) = v10;
    *(void *)(v0 + 1272) = v8;
    uint64_t v11 = *(void *)(v2 + 48) + 24 * v9;
    uint64_t v12 = *(void *)v11;
    *(void *)(v0 + 1288) = *(void *)v11;
    uint64_t v13 = *(void *)(v11 + 8);
    *(void *)(v0 + 1296) = v13;
    char v14 = *(unsigned char *)(v11 + 16);
    *(unsigned char *)(v0 + 1344) = v14;
    uint64_t v15 = *(void *)(*(void *)(v2 + 56) + 16 * v9 + 8);
    *(void *)(v0 + 1304) = v15;
    sub_1001C3ED0(v12, v13, v14);
    swift_retain();
    long long v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 1312) = v17;
    *long long v17 = v0;
    v17[1] = sub_100275FFC;
    uint64_t v18 = *(void *)(v0 + 1168);
    uint64_t v19 = *(void *)(v0 + 952);
    uint64_t v20 = *(void *)(v0 + 944);
    return sub_100276F1C(v18, v12, v13, v14, v16, v15, v20, v19);
  }
  unint64_t v22 = 63 - v5;
  if (v22 > 0x7F)
  {
    unint64_t v23 = *(void *)(v2 + 72);
    if (v23)
    {
      uint64_t v8 = 1;
LABEL_11:
      uint64_t v10 = (v23 - 1) & v23;
      unint64_t v9 = __clz(__rbit64(v23)) + (v8 << 6);
      goto LABEL_5;
    }
    if (v22 >= 0xC0)
    {
      unint64_t v23 = *(void *)(v2 + 80);
      if (v23)
      {
        uint64_t v8 = 2;
        goto LABEL_11;
      }
      if (v22 >= 0x100)
      {
        unint64_t v23 = *(void *)(v2 + 88);
        if (v23)
        {
          uint64_t v8 = 3;
          goto LABEL_11;
        }
        if (v22 >= 0x140)
        {
          unint64_t v23 = *(void *)(v2 + 96);
          if (v23)
          {
            uint64_t v8 = 4;
            goto LABEL_11;
          }
          uint64_t v24 = 0;
          uint64_t v25 = v22 >> 6;
          if (v25 <= 5) {
            uint64_t v25 = 5;
          }
          uint64_t v26 = v25 - 5;
          while (v26 != v24)
          {
            unint64_t v23 = *(void *)(v2 + 104 + 8 * v24++);
            if (v23)
            {
              uint64_t v8 = v24 + 4;
              goto LABEL_11;
            }
          }
        }
      }
    }
  }
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v27 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v27(v1);
}

uint64_t sub_100275FFC()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 1320) = v0;
  swift_task_dealloc();
  char v3 = *(unsigned char *)(v2 + 1344);
  uint64_t v4 = *(void *)(v2 + 1296);
  uint64_t v5 = *(void *)(v2 + 1288);
  if (v0)
  {
    swift_bridgeObjectRelease();
    sub_1001C3EC0(v5, v4, v3);
    uint64_t v6 = sub_100276A38;
  }
  else
  {
    sub_1001C3EC0(v5, v4, *(unsigned char *)(v2 + 1344));
    uint64_t v6 = sub_100276174;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_100276174()
{
  (*(void (**)(void, void, void))(*(void *)(v0 + 1152) + 16))(*(void *)(v0 + 1160), *(void *)(v0 + 1168), *(void *)(v0 + 1144));
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v2 = *(void *)(v0 + 1264);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v2 = sub_10028F758(0, *(void *)(v2 + 16) + 1, 1, *(void *)(v0 + 1264));
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    unint64_t v2 = sub_10028F758(v3 > 1, v4 + 1, 1, v2);
  }
  uint64_t v5 = *(void *)(v0 + 1168);
  uint64_t v6 = *(void *)(v0 + 1160);
  uint64_t v7 = *(void *)(v0 + 1152);
  uint64_t v8 = *(void *)(v0 + 1144);
  *(void *)(v2 + 16) = v4 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(v2+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v4, v6, v8);
  swift_release();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v5, v8);
  unint64_t v10 = *(void *)(v0 + 1280);
  int64_t v11 = *(void *)(v0 + 1272);
  *(void *)(v0 + 1264) = v2;
  if (v10)
  {
    uint64_t v12 = (v10 - 1) & v10;
    unint64_t v13 = __clz(__rbit64(v10)) | (v11 << 6);
    uint64_t result = *(void *)(v0 + 1256);
LABEL_7:
    *(void *)(v0 + 1280) = v12;
    *(void *)(v0 + 1272) = v11;
    uint64_t v14 = *(void *)(result + 48) + 24 * v13;
    uint64_t v15 = *(void *)v14;
    *(void *)(v0 + 1288) = *(void *)v14;
    uint64_t v16 = *(void *)(v14 + 8);
    *(void *)(v0 + 1296) = v16;
    char v17 = *(unsigned char *)(v14 + 16);
    *(unsigned char *)(v0 + 1344) = v17;
    uint64_t v18 = *(void *)(*(void *)(result + 56) + 16 * v13 + 8);
    *(void *)(v0 + 1304) = v18;
    sub_1001C3ED0(v15, v16, v17);
    swift_retain();
    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 1312) = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_100275FFC;
    uint64_t v21 = *(void *)(v0 + 1168);
    uint64_t v22 = *(void *)(v0 + 952);
    uint64_t v23 = *(void *)(v0 + 944);
    return sub_100276F1C(v21, v15, v16, v17, v19, v18, v23, v22);
  }
  int64_t v24 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  int64_t v25 = (unint64_t)((1 << *(unsigned char *)(v0 + 1343)) + 63) >> 6;
  uint64_t result = *(void *)(v0 + 1256);
  if (v24 < v25)
  {
    uint64_t v26 = result + 64;
    unint64_t v27 = *(void *)(result + 64 + 8 * v24);
    ++v11;
    if (v27)
    {
LABEL_13:
      uint64_t v12 = (v27 - 1) & v27;
      unint64_t v13 = __clz(__rbit64(v27)) + (v11 << 6);
      goto LABEL_7;
    }
    int64_t v11 = v24 + 1;
    if (v24 + 1 < v25)
    {
      unint64_t v27 = *(void *)(v26 + 8 * v11);
      if (v27) {
        goto LABEL_13;
      }
      int64_t v11 = v24 + 2;
      if (v24 + 2 < v25)
      {
        unint64_t v27 = *(void *)(v26 + 8 * v11);
        if (v27) {
          goto LABEL_13;
        }
        int64_t v28 = v24 + 3;
        if (v28 < v25)
        {
          unint64_t v27 = *(void *)(v26 + 8 * v28);
          if (v27)
          {
            int64_t v11 = v28;
            goto LABEL_13;
          }
          while (1)
          {
            int64_t v11 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              break;
            }
            if (v11 >= v25) {
              goto LABEL_24;
            }
            unint64_t v27 = *(void *)(v26 + 8 * v11);
            ++v28;
            if (v27) {
              goto LABEL_13;
            }
          }
LABEL_28:
          __break(1u);
          return result;
        }
      }
    }
  }
LABEL_24:
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = *(uint64_t (**)(unint64_t))(v0 + 8);
  return v29(v2);
}

uint64_t sub_100276568()
{
  return _swift_task_switch(sub_100276584, 0, 0);
}

uint64_t sub_100276584()
{
  sub_10027A024(v0 + 696);
  swift_release();
  static Logger.ddm.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    unint64_t v3 = (uint8_t *)swift_slowAlloc();
    unint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 928) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error looking up apps with Media API: %{public}@", v3, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(*(void *)(v0 + 1080) + 8))(*(void *)(v0 + 1096), *(void *)(v0 + 1072));
  uint64_t v6 = *(void *)(v0 + 872);
  *(void *)(v0 + 1256) = v6;
  char v7 = *(unsigned char *)(v6 + 32);
  *(unsigned char *)(v0 + 1343) = v7;
  uint64_t v8 = -1;
  uint64_t v9 = -1 << v7;
  uint64_t v10 = *(void *)(v6 + 64);
  if (-v9 < 64) {
    uint64_t v8 = ~(-1 << -(char)v9);
  }
  *(void *)(v0 + 1264) = _swiftEmptyArrayStorage;
  unint64_t v11 = v8 & v10;
  if (v11)
  {
    uint64_t v12 = 0;
    unint64_t v13 = __clz(__rbit64(v11));
    uint64_t v14 = (v11 - 1) & v11;
LABEL_8:
    *(void *)(v0 + 1280) = v14;
    *(void *)(v0 + 1272) = v12;
    uint64_t v15 = *(void *)(v6 + 48) + 24 * v13;
    uint64_t v16 = *(void *)v15;
    *(void *)(v0 + 1288) = *(void *)v15;
    uint64_t v17 = *(void *)(v15 + 8);
    *(void *)(v0 + 1296) = v17;
    char v18 = *(unsigned char *)(v15 + 16);
    *(unsigned char *)(v0 + 1344) = v18;
    uint64_t v19 = *(void *)(*(void *)(v6 + 56) + 16 * v13 + 8);
    *(void *)(v0 + 1304) = v19;
    sub_1001C3ED0(v16, v17, v18);
    swift_retain();
    uint64_t v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 1312) = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_100275FFC;
    uint64_t v22 = *(void *)(v0 + 1168);
    uint64_t v23 = *(void *)(v0 + 952);
    uint64_t v24 = *(void *)(v0 + 944);
    return sub_100276F1C(v22, v16, v17, v18, v20, v19, v24, v23);
  }
  unint64_t v26 = 63 - v9;
  if (v26 > 0x7F)
  {
    unint64_t v27 = *(void *)(v6 + 72);
    if (v27)
    {
      uint64_t v12 = 1;
LABEL_14:
      uint64_t v14 = (v27 - 1) & v27;
      unint64_t v13 = __clz(__rbit64(v27)) + (v12 << 6);
      goto LABEL_8;
    }
    if (v26 >= 0xC0)
    {
      unint64_t v27 = *(void *)(v6 + 80);
      if (v27)
      {
        uint64_t v12 = 2;
        goto LABEL_14;
      }
      if (v26 >= 0x100)
      {
        unint64_t v27 = *(void *)(v6 + 88);
        if (v27)
        {
          uint64_t v12 = 3;
          goto LABEL_14;
        }
        if (v26 >= 0x140)
        {
          unint64_t v27 = *(void *)(v6 + 96);
          if (v27)
          {
            uint64_t v12 = 4;
            goto LABEL_14;
          }
          uint64_t v28 = 0;
          uint64_t v29 = v26 >> 6;
          if (v29 <= 5) {
            uint64_t v29 = 5;
          }
          uint64_t v30 = v29 - 5;
          while (v30 != v28)
          {
            unint64_t v27 = *(void *)(v6 + 104 + 8 * v28++);
            if (v27)
            {
              uint64_t v12 = v28 + 4;
              goto LABEL_14;
            }
          }
        }
      }
    }
  }
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v31 = *(uint64_t (**)(void *))(v0 + 8);
  return v31(_swiftEmptyArrayStorage);
}

uint64_t sub_100276A38()
{
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100276B70(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _OWORD v7[2] = a1;
  char v13 = a4 & 1;
  v7[3] = type metadata accessor for AppStoreItem(0);
  uint64_t v14 = swift_task_alloc();
  v7[4] = v14;
  uint64_t v15 = (void *)swift_task_alloc();
  v7[5] = v15;
  *uint64_t v15 = v7;
  v15[1] = sub_100276C9C;
  return sub_100277B54(v14, a2, a3, v13, a5, a6, a7);
}

uint64_t sub_100276C9C()
{
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_100276EB8;
  }
  else {
    os_log_type_t v2 = sub_100276DB0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100276DB0()
{
  uint64_t v1 = v0[3];
  os_log_type_t v2 = (uint64_t *)v0[4];
  uint64_t v3 = v0[2];
  uint64_t v4 = (uint64_t *)((char *)v2 + *(int *)(v1 + 24));
  uint64_t v6 = v4[2];
  uint64_t v5 = v4[3];
  BOOL v15 = *v2 < 0;
  uint64_t v7 = *v2 & ~(*v2 >> 63);
  uint64_t v9 = v4[27];
  uint64_t v8 = v4[28];
  uint64_t v10 = (uint64_t *)((char *)v2 + *(int *)(v1 + 36));
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10027AD78((uint64_t)v2, type metadata accessor for AppStoreItem);
  swift_task_dealloc();
  *(void *)uint64_t v3 = v6;
  *(void *)(v3 + 8) = v5;
  *(void *)(v3 + 16) = v12;
  *(void *)(v3 + 24) = v11;
  *(void *)(v3 + 32) = v7;
  *(unsigned char *)(v3 + 40) = v15;
  *(void *)(v3 + 48) = v9;
  *(void *)(v3 + 56) = v8;
  char v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_100276EB8()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100276F1C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 80) = v13;
  *(void *)(v8 + 88) = v14;
  *(void *)(v8 + 64) = a7;
  *(void *)(v8 + 72) = a8;
  *(unsigned char *)(v8 + 200) = a4;
  *(void *)(v8 + 48) = a3;
  *(void *)(v8 + 56) = a6;
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = a2;
  uint64_t v9 = type metadata accessor for Logger();
  *(void *)(v8 + 96) = v9;
  *(void *)(v8 + 104) = *(void *)(v9 - 8);
  *(void *)(v8 + 112) = swift_task_alloc();
  sub_1000172F8(&qword_10065BCD0);
  *(void *)(v8 + 120) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Platform();
  *(void *)(v8 + 128) = v10;
  *(void *)(v8 + 136) = *(void *)(v10 - 8);
  *(void *)(v8 + 144) = swift_task_alloc();
  type metadata accessor for AppStoreItem(0);
  *(void *)(v8 + 152) = swift_task_alloc();
  *(void *)(v8 + 160) = swift_task_alloc();
  return _swift_task_switch(sub_1002770BC, 0, 0);
}

uint64_t sub_1002770BC()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 56);
  char v2 = *(unsigned char *)(v0 + 200);
  swift_retain();
  uint64_t v3 = sub_100311954(12, v1);
  uint64_t v5 = v4;
  swift_release();
  *(void *)(v0 + 168) = v3;
  *(void *)(v0 + 176) = v5;
  if (v5 == 2) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v3;
  }
  if (v5 == 2) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v5;
  }
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1002771B4;
  uint64_t v9 = *(void *)(v0 + 160);
  uint64_t v10 = *(void *)(v0 + 64);
  uint64_t v11 = *(void *)(v0 + 40);
  uint64_t v12 = *(void *)(v0 + 48);
  return sub_100277B54(v9, v11, v12, v2 & 1, v6, v7, v10);
}

uint64_t sub_1002771B4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1002777D4;
  }
  else
  {
    sub_1001C6440(*(void *)(v2 + 168), *(void *)(v2 + 176));
    uint64_t v3 = sub_1002772D0;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1002772D0()
{
  uint64_t v40 = v0;
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 56);
  sub_10027AD10(*(void *)(v0 + 160), *(void *)(v0 + 152), type metadata accessor for AppStoreItem);
  swift_retain();
  uint64_t v2 = sub_100311910(4, v1);
  uint64_t v4 = v3;
  uint64_t result = swift_release();
  if (v4)
  {
    uint64_t v6 = *(void *)(v0 + 128);
    uint64_t v7 = *(void *)(v0 + 136);
    uint64_t v8 = *(void *)(v0 + 120);
    uint64_t v9 = *(os_unfair_lock_s **)(v0 + 56);
    swift_retain();
    sub_100311A5C(13, v9, v8);
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6) == 1)
    {
      uint64_t v10 = *(void *)(v0 + 120);
      static Platform.current.getter();
      sub_10001729C(v10, &qword_10065BCD0);
    }
    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 136) + 32))(*(void *)(v0 + 144), *(void *)(v0 + 120), *(void *)(v0 + 128));
    }
    uint64_t v11 = *(void *)(v0 + 32);
    uint64_t v12 = *(void *)(v0 + 192);
    uint64_t v14 = *(void *)(v0 + 144);
    uint64_t v13 = *(void *)(v0 + 152);
    uint64_t v15 = *(void *)(v0 + 64);
    sub_10018AB28(v15);
    sub_1002A2DE4(v13, v2, v4, v14, v15, v11);
    if (v12)
    {
      sub_10027AD78(*(void *)(v0 + 160), type metadata accessor for AppStoreItem);
      uint64_t v17 = *(void *)(v0 + 40);
      uint64_t v16 = *(void *)(v0 + 48);
      char v18 = *(unsigned char *)(v0 + 200) & 1;
      static Logger.ddm.getter();
      sub_1001C3ED0(v17, v16, v18);
      swift_errorRetain();
      sub_1001C3ED0(v17, v16, v18);
      swift_errorRetain();
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t type = static os_log_type_t.error.getter();
      BOOL v20 = os_log_type_enabled(v19, type);
      uint64_t v21 = *(void *)(v0 + 104);
      uint64_t v22 = *(void *)(v0 + 112);
      uint64_t v23 = *(void *)(v0 + 96);
      char v24 = *(unsigned char *)(v0 + 200);
      uint64_t v26 = *(void *)(v0 + 40);
      uint64_t v25 = *(void *)(v0 + 48);
      char v27 = v24 & 1;
      if (v20)
      {
        uint64_t v37 = *(void *)(v0 + 112);
        uint64_t v28 = swift_slowAlloc();
        uint64_t v35 = (void *)swift_slowAlloc();
        uint64_t v39 = swift_slowAlloc();
        *(_DWORD *)uint64_t v28 = 136446466;
        sub_1001C3ED0(v26, v25, v27);
        uint64_t v36 = v21;
        uint64_t v29 = StoreAppIdentifier.description.getter();
        log = v19;
        unint64_t v31 = v30;
        sub_1001C3EC0(v26, v25, v27);
        *(void *)(v0 + 16) = sub_1000143F4(v29, v31, &v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1001C3EC0(v26, v25, v27);
        sub_1001C3EC0(v26, v25, v27);
        *(_WORD *)(v28 + 12) = 2114;
        swift_errorRetain();
        uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 24) = v32;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v35 = v32;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, log, type, "Dropping '%{public}s', failed to fetch metadata: %{public}@", (uint8_t *)v28, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v23);
      }
      else
      {
        sub_1001C3EC0(*(void *)(v0 + 40), *(void *)(v0 + 48), v24 & 1);
        sub_1001C3EC0(v26, v25, v27);
        swift_errorRelease();
        swift_errorRelease();

        (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v23);
      }
      swift_willThrow();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unint64_t v33 = *(uint64_t (**)(void))(v0 + 8);
    }
    else
    {
      sub_10027AD78(*(void *)(v0 + 160), type metadata accessor for AppStoreItem);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unint64_t v33 = *(uint64_t (**)(void))(v0 + 8);
    }
    return v33();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002777D4()
{
  uint64_t v28 = v0;
  sub_1001C6440(*(void *)(v0 + 168), *(void *)(v0 + 176));
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  char v3 = *(unsigned char *)(v0 + 200) & 1;
  static Logger.ddm.getter();
  sub_1001C3ED0(v2, v1, v3);
  swift_errorRetain();
  sub_1001C3ED0(v2, v1, v3);
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v24 = *(void *)(v0 + 104);
    uint64_t v25 = *(void *)(v0 + 96);
    uint64_t v26 = *(void *)(v0 + 112);
    char v6 = *(unsigned char *)(v0 + 200);
    uint64_t v7 = *(void *)(v0 + 40);
    uint64_t v8 = *(void *)(v0 + 48);
    uint64_t v9 = swift_slowAlloc();
    uint64_t v23 = (void *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446466;
    sub_1001C3ED0(v7, v8, v6 & 1);
    uint64_t v10 = StoreAppIdentifier.description.getter();
    log = v4;
    unint64_t v12 = v11;
    sub_1001C3EC0(v7, v8, v6 & 1);
    *(void *)(v0 + 16) = sub_1000143F4(v10, v12, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001C3EC0(v7, v8, v6 & 1);
    sub_1001C3EC0(v7, v8, v6 & 1);
    *(_WORD *)(v9 + 12) = 2114;
    swift_errorRetain();
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v23 = v13;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v5, "Dropping '%{public}s', failed to fetch metadata: %{public}@", (uint8_t *)v9, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v26, v25);
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 104);
    uint64_t v14 = *(void *)(v0 + 112);
    uint64_t v16 = *(void *)(v0 + 96);
    uint64_t v18 = *(void *)(v0 + 40);
    uint64_t v17 = *(void *)(v0 + 48);
    char v19 = *(unsigned char *)(v0 + 200) & 1;
    sub_1001C3EC0(v18, v17, v19);
    sub_1001C3EC0(v18, v17, v19);
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

uint64_t sub_100277B54(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 64) = a6;
  *(void *)(v7 + 72) = a7;
  *(unsigned char *)(v7 + 200) = a4;
  *(void *)(v7 + 48) = a3;
  *(void *)(v7 + 56) = a5;
  *(void *)(v7 + 32) = a1;
  *(void *)(v7 + 40) = a2;
  sub_1000172F8(&qword_10065CBD0);
  *(void *)(v7 + 80) = swift_task_alloc();
  sub_1000172F8((uint64_t *)&unk_100661AB0);
  *(void *)(v7 + 88) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ManagedAppDeclaration.InstallBehavior.LicenseEnum();
  *(void *)(v7 + 96) = v8;
  *(void *)(v7 + 104) = *(void *)(v8 - 8);
  *(void *)(v7 + 112) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  *(void *)(v7 + 120) = v9;
  *(void *)(v7 + 128) = *(void *)(v9 - 8);
  *(void *)(v7 + 136) = swift_task_alloc();
  *(void *)(v7 + 144) = swift_task_alloc();
  return _swift_task_switch(sub_100277CF0, 0, 0);
}

void sub_100277CF0()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  char v3 = *(unsigned char *)(v0 + 200) & 1;
  static Logger.vpp.getter();
  sub_1001C3ED0(v2, v1, v3);
  sub_1001C3ED0(v2, v1, v3);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v33 = *(void *)(v0 + 128);
    uint64_t v35 = *(void *)(v0 + 120);
    uint64_t v37 = *(void *)(v0 + 144);
    char v6 = *(unsigned char *)(v0 + 200);
    uint64_t v8 = *(void *)(v0 + 40);
    uint64_t v7 = *(void *)(v0 + 48);
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446210;
    char v10 = v6 & 1;
    sub_1001C3ED0(v8, v7, v6 & 1);
    uint64_t v11 = StoreAppIdentifier.description.getter();
    unint64_t v13 = v12;
    sub_1001C3EC0(v8, v7, v10);
    *(void *)(v0 + 24) = sub_1000143F4(v11, v13, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001C3EC0(v8, v7, v10);
    sub_1001C3EC0(v8, v7, v10);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Performing purchase lookup for: %{public}s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
    v14(v37, v35);
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 144);
    uint64_t v16 = *(void *)(v0 + 120);
    uint64_t v17 = *(void *)(v0 + 128);
    uint64_t v19 = *(void *)(v0 + 40);
    uint64_t v18 = *(void *)(v0 + 48);
    char v20 = *(unsigned char *)(v0 + 200) & 1;
    sub_1001C3EC0(v19, v18, v20);
    sub_1001C3EC0(v19, v18, v20);

    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v14(v15, v16);
  }
  *(void *)(v0 + 152) = v14;
  uint64_t v21 = *(void *)(v0 + 128);
  uint64_t v23 = *(void *)(v0 + 104);
  uint64_t v22 = *(void *)(v0 + 112);
  uint64_t v25 = *(void *)(v0 + 88);
  uint64_t v24 = *(void *)(v0 + 96);
  uint64_t v36 = *(void *)(v0 + 64);
  uint64_t v38 = *(void *)(v0 + 72);
  uint64_t v26 = *(void *)(v0 + 48);
  uint64_t v32 = *(void *)(v0 + 120);
  uint64_t v34 = *(void *)(v0 + 56);
  char v27 = *(unsigned char *)(v0 + 200);
  uint64_t v28 = *(void *)(v0 + 40);
  sub_10027ADD8();
  v27 &= 1u;
  sub_1001C3ED0(v28, v26, v27);
  id v29 = sub_1001D7EDC(v28, v26, v27);
  *(void *)(v0 + 160) = v29;
  (*(void (**)(uint64_t, void, uint64_t))(v23 + 104))(v22, enum case for ManagedAppDeclaration.InstallBehavior.LicenseEnum.user(_:), v24);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(v25, 1, 1, v32);
  uint64_t v30 = swift_task_alloc();
  *(void *)(v0 + 168) = v30;
  *(_OWORD *)(v30 + 16) = 0u;
  *(_OWORD *)(v30 + 32) = 0u;
  *(void *)(v30 + 48) = v34;
  *(void *)(v30 + 56) = v36;
  *(void *)(v30 + 64) = v29;
  *(void *)(v30 + 72) = v22;
  *(void *)(v30 + 80) = 0;
  *(unsigned char *)(v30 + 88) = 0;
  *(void *)(v30 + 96) = v38;
  *(unsigned char *)(v30 + 104) = 0;
  uint64_t v39 = (char *)&dword_10065C960 + dword_10065C960;
  unint64_t v31 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v31;
  *unint64_t v31 = v0;
  v31[1] = sub_1002780F4;
  uint64_t v42 = v30;
  int v43 = &_mh_execute_header;
  __asm { BR              X8; sub_1001D17CC }
}

uint64_t sub_1002780F4(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[23] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[11];
  if (v1)
  {
    sub_10001729C(v5, (uint64_t *)&unk_100661AB0);
    swift_task_dealloc();
    char v6 = sub_1002786B0;
  }
  else
  {
    v4[24] = a1;
    swift_task_dealloc();
    sub_10001729C(v5, (uint64_t *)&unk_100661AB0);
    char v6 = sub_100278278;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_100278278()
{
  uint64_t v32 = v0;
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void **)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  char v6 = *(unsigned char *)(v0 + 200) & 1;
  (*(void (**)(void, void))(*(void *)(v0 + 104) + 8))(*(void *)(v0 + 112), *(void *)(v0 + 96));

  sub_1002D6838(v5, v4, v6, v1, v3);
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for AppStoreItem(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v3, 1, v7) == 1)
  {
    uint64_t v9 = *(void *)(v0 + 40);
    uint64_t v8 = *(void *)(v0 + 48);
    char v10 = *(unsigned char *)(v0 + 200) & 1;
    sub_10001729C(*(void *)(v0 + 80), &qword_10065CBD0);
    static Logger.vpp.getter();
    sub_1001C3ED0(v9, v8, v10);
    sub_1001C3ED0(v9, v8, v10);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v0 + 152);
    uint64_t v15 = *(void *)(v0 + 136);
    uint64_t v16 = *(void *)(v0 + 120);
    char v17 = *(unsigned char *)(v0 + 200);
    uint64_t v19 = *(void *)(v0 + 40);
    uint64_t v18 = *(void *)(v0 + 48);
    char v20 = v17 & 1;
    if (v13)
    {
      uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v0 + 152);
      uint64_t v29 = *(void *)(v0 + 136);
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136446210;
      sub_1001C3ED0(v19, v18, v20);
      uint64_t v22 = StoreAppIdentifier.description.getter();
      uint64_t v28 = v16;
      unint64_t v24 = v23;
      sub_1001C3EC0(v19, v18, v20);
      *(void *)(v0 + 16) = sub_1000143F4(v22, v24, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001C3EC0(v19, v18, v20);
      sub_1001C3EC0(v19, v18, v20);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Missing expected metadata for %{public}s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v30(v29, v28);
    }
    else
    {
      sub_1001C3EC0(*(void *)(v0 + 40), *(void *)(v0 + 48), v17 & 1);
      sub_1001C3EC0(v19, v18, v20);

      v14(v15, v16);
    }
    type metadata accessor for InternalError();
    sub_100013B04((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    *uint64_t v26 = 0;
    v26[1] = 0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    sub_10027AE18(*(void *)(v0 + 80), *(void *)(v0 + 32), type metadata accessor for AppStoreItem);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v25();
}

uint64_t sub_1002786B0()
{
  uint64_t v1 = (void *)v0[20];
  (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_10027876C(uint64_t a1, uint64_t a2)
{
  v2[3] = a1;
  v2[4] = a2;
  sub_1000172F8(&qword_10065BCC0);
  v2[5] = swift_task_alloc();
  return _swift_task_switch(sub_100278800, 0, 0);
}

uint64_t sub_100278800()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = sub_1002747F8(v0[4]);
  v0[6] = v2;
  uint64_t v3 = type metadata accessor for Locale.Language();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v1, 1, 1, v3);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10065E020 + dword_10065E020);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[7] = (uint64_t)v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10027890C;
  uint64_t v5 = v0[5];
  return v7(v2, v5);
}

uint64_t sub_10027890C(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  *(void *)(*v2 + 64) = v1;
  swift_task_dealloc();
  sub_10001729C(*(void *)(v4 + 40), &qword_10065BCC0);
  swift_bridgeObjectRelease();
  if (v1)
  {
    return _swift_task_switch(sub_100278AAC, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    char v6 = *(uint64_t (**)(uint64_t))(v5 + 8);
    return v6(a1);
  }
}

uint64_t sub_100278AAC()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100278B10()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 160, 7);
}

uint64_t sub_100278B80()
{
  uint64_t v2 = v0 + 16;
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100278C1C;
  return sub_10027876C(v2, v3);
}

uint64_t sub_100278C1C(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_100278D18(uint64_t a1, uint64_t a2)
{
  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  sub_1000172F8(&qword_10065E028);
  v3[14] = swift_task_alloc();
  v3[15] = swift_task_alloc();
  sub_1000172F8(&qword_10065E030);
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  uint64_t v4 = sub_1000172F8(&qword_10065BCD0);
  v3[19] = v4;
  v3[20] = *(void *)(v4 - 8);
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  v3[24] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Platform();
  v3[25] = v5;
  v3[26] = *(void *)(v5 - 8);
  v3[27] = swift_task_alloc();
  v3[28] = swift_task_alloc();
  v3[29] = swift_task_alloc();
  v3[30] = swift_task_alloc();
  uint64_t v6 = sub_1000172F8(&qword_100663D90);
  v3[31] = v6;
  v3[32] = *(void *)(v6 - 8);
  v3[33] = swift_task_alloc();
  v3[34] = swift_task_alloc();
  v3[35] = swift_task_alloc();
  v3[36] = swift_task_alloc();
  return _swift_task_switch(sub_100278FA0, 0, 0);
}

uint64_t sub_100278FA0()
{
  v116 = v0;
  uint64_t v1 = v0 + 2;
  uint64_t v2 = v0[11];
  unint64_t v3 = *(void *)(v2 + 16);
  unint64_t v98 = v3;
  if (v3)
  {
    v96 = v0 + 2;
    uint64_t v4 = v0 + 10;
    uint64_t v107 = v0[35];
    uint64_t v109 = v0[36];
    uint64_t v5 = v0[32];
    uint64_t v105 = v0[31];
    uint64_t v6 = v0[26];
    uint64_t v7 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v101 = (void (**)(char *, char *, uint64_t))(v6 + 16);
    uint64_t v103 = *(void *)(v5 + 72);
    v99 = (void (**)(char *, uint64_t))(v6 + 8);
    swift_bridgeObjectRetain();
    uint64_t v8 = _swiftEmptyArrayStorage;
    unint64_t v9 = v3;
    do
    {
      v113 = v8;
      char v10 = (uint64_t *)v111[35];
      uint64_t v11 = (uint64_t *)v111[36];
      uint64_t v12 = v111[25];
      sub_100017238(v7, (uint64_t)v11, &qword_100663D90);
      uint64_t v13 = *(int *)(v105 + 48);
      uint64_t v14 = (char *)v10 + v13;
      uint64_t v15 = (char *)v11 + v13;
      uint64_t v16 = *v11;
      uint64_t v17 = *(void *)(v109 + 8);
      char v18 = *(unsigned char *)(v109 + 16);
      *char v10 = v16;
      *(void *)(v107 + 8) = v17;
      *(unsigned char *)(v107 + 16) = v18;
      (*v101)((char *)v10 + v13, v15, v12);
      sub_1001C3ED0(v16, v17, v18);
      uint64_t v19 = StoreAppIdentifier.itemID.getter();
      LOBYTE(v10) = v20;
      sub_1001C3EC0(v16, v17, v18);
      uint64_t v21 = v111[36];
      uint64_t v22 = v111[25];
      if (v10)
      {
        (*v99)(v14, v111[25]);
        sub_10001729C(v21, &qword_100663D90);
        uint64_t v8 = v113;
      }
      else
      {
        *uint64_t v4 = v19;
        uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v25 = v24;
        (*v99)(v14, v22);
        sub_10001729C(v21, &qword_100663D90);
        uint64_t v8 = v113;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v8 = sub_10028ED9C(0, v113[2] + 1, 1, v113);
        }
        unint64_t v27 = v8[2];
        unint64_t v26 = v8[3];
        if (v27 >= v26 >> 1) {
          uint64_t v8 = sub_10028ED9C((void *)(v26 > 1), v27 + 1, 1, v8);
        }
        v8[2] = v27 + 1;
        uint64_t v28 = &v8[2 * v27];
        v28[4] = v23;
        v28[5] = v25;
      }
      v7 += v103;
      --v9;
    }
    while (v9);
    uint64_t v0 = v111;
    swift_bridgeObjectRelease();
    uint64_t v2 = v111[11];
    uint64_t v1 = v96;
    unint64_t v3 = v98;
  }
  else
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
  }
  v0[37] = v8;
  v0[2] = v2;
  v0[3] = sub_1002A5B5C;
  v0[4] = 0;
  v0[5] = sub_10027ABBC;
  v0[6] = 0;
  v0[7] = sub_10027AC24;
  v0[8] = 0;
  v115 = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRetain_n();
  sub_10027A0A8(v1, 1, &v115);
  v114 = v8;
  uint64_t v29 = v0[32];
  uint64_t v108 = v0[31];
  uint64_t v30 = v0[29];
  uint64_t v31 = v0[30];
  uint64_t v32 = v0[25];
  uint64_t v33 = v0[26];
  uint64_t v34 = v111[20];
  swift_bridgeObjectRelease();
  v94 = v115;
  v111[38] = v115;
  static Platform.iOS.getter();
  v95 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
  v95(v30, v31, v32);
  sub_100013B04(&qword_10065E038, (void (*)(uint64_t))&type metadata accessor for Platform);
  swift_bridgeObjectRetain();
  uint64_t v35 = Set.init(minimumCapacity:)();
  unint64_t v43 = 0;
  v115 = (void *)v35;
  uint64_t v97 = v29;
  v104 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
  v106 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56);
  v112 = (void (**)(char *, uint64_t, uint64_t))(v33 + 32);
  v110 = (void (**)(uint64_t, uint64_t, uint64_t, void))(v33 + 56);
  uint64_t v44 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56);
  os_log_type_t v45 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
  BOOL v46 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
  unint64_t v100 = v33 + 8;
  v102 = (void (**)(void, uint64_t, uint64_t, void))(v34 + 56);
  while (1)
  {
    while (1)
    {
      if (v43 == v3)
      {
        uint64_t v47 = 1;
        unint64_t v43 = v3;
      }
      else
      {
        if (v43 >= v3)
        {
          __break(1u);
LABEL_39:
          __break(1u);
          return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(v35, v36, v37, v38, v39, v40, v41, v42);
        }
        sub_100017238(v111[11]+ ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80))+ *(void *)(v97 + 72) * v43, v111[15], &qword_100663D90);
        uint64_t v47 = 0;
        ++v43;
      }
      uint64_t v48 = v111[31];
      uint64_t v50 = v111[14];
      uint64_t v49 = v111[15];
      (*v106)(v49, v47, 1, v48);
      sub_10001733C(v49, v50, &qword_10065E028);
      if ((*v104)(v50, 1, v48) == 1)
      {
        uint64_t v51 = *v44;
        (*v44)(v111[17], 1, 1, v111[19]);
      }
      else
      {
        uint64_t v52 = v111[34];
        sub_10001733C(v111[14], v52, &qword_100663D90);
        uint64_t v53 = v52 + *(int *)(v108 + 48);
        sub_100013B04((unint64_t *)&qword_10065E048, (void (*)(uint64_t))&type metadata accessor for Platform);
        if (dispatch thunk of static Equatable.== infix(_:_:)())
        {
          uint64_t v54 = 1;
        }
        else
        {
          uint64_t v55 = v111[25];
          unint64_t v56 = (char *)v111[17];
          uint64_t v57 = v111[33] + *(int *)(v108 + 48);
          v95(v57, v53, v55);
          (*v112)(v56, v57, v55);
          uint64_t v54 = 0;
        }
        uint64_t v58 = v111[34];
        uint64_t v59 = v111[19];
        uint64_t v60 = v111[17];
        (*v110)(v60, v54, 1, v111[25]);
        sub_10001729C(v58, &qword_100663D90);
        uint64_t v51 = *v44;
        (*v44)(v60, 0, 1, v59);
      }
      uint64_t v61 = v111[19];
      uint64_t v62 = v111[17];
      v63 = *v45;
      if ((*v45)(v62, 1, v61) == 1)
      {
        uint64_t v64 = v111[18];
        sub_10001729C(v62, &qword_10065E030);
        v51(v64, 1, 1, v61);
        goto LABEL_29;
      }
      uint64_t v65 = v111[25];
      uint64_t v66 = v111[23];
      sub_10001733C(v62, v66, &qword_10065BCD0);
      int v67 = (*v46)(v66, 1, v65);
      uint64_t v68 = v111[23];
      if (v67 != 1) {
        break;
      }
      uint64_t v35 = sub_10001729C(v68, &qword_10065BCD0);
      unint64_t v3 = v98;
      uint64_t v44 = v102;
    }
    uint64_t v69 = v111[18];
    uint64_t v70 = v111[19];
    sub_10001733C(v68, v69, &qword_10065BCD0);
    uint64_t v44 = v102;
    v51(v69, 0, 1, v70);
LABEL_29:
    uint64_t v71 = v111[19];
    uint64_t v72 = v111[16];
    sub_10001733C(v111[18], v72, &qword_10065E030);
    unsigned int v73 = v63(v72, 1, v71);
    uint64_t v74 = v111[25];
    if (v73 == 1)
    {
      (*v110)(v111[24], 1, 1, v111[25]);
      uint64_t v75 = *v46;
    }
    else
    {
      uint64_t v77 = v111[21];
      uint64_t v76 = v111[22];
      sub_10001733C(v111[16], v76, &qword_10065BCD0);
      sub_100017238(v76, v77, &qword_10065BCD0);
      uint64_t v75 = *v46;
      uint64_t v35 = (*v46)(v77, 1, v74);
      if (v35 == 1) {
        goto LABEL_39;
      }
      uint64_t v78 = (char *)v111[24];
      uint64_t v79 = v111[25];
      uint64_t v80 = v111[22];
      (*v112)(v78, v111[21], v79);
      sub_10001729C(v80, &qword_10065BCD0);
      (*v110)((uint64_t)v78, 0, 1, v79);
      uint64_t v44 = v102;
    }
    uint64_t v81 = v111[24];
    uint64_t v82 = v111[25];
    if (v75(v81, 1, v82) == 1) {
      break;
    }
    v84 = (char *)v111[27];
    uint64_t v83 = v111[28];
    (*v112)(v84, v81, v82);
    sub_100328C9C(v83, v84);
    uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))v100)(v83, v82);
    unint64_t v3 = v98;
  }
  uint64_t v85 = v111[29];
  uint64_t v87 = v111[12];
  uint64_t v86 = v111[13];
  swift_bridgeObjectRelease();
  v88 = *(uint64_t (**)(uint64_t, uint64_t))v100;
  v111[39] = *(void *)v100;
  v111[40] = v100 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v88(v85, v82);
  v89 = v115;
  v111[41] = v115;
  uint64_t v90 = sub_1000172F8(&qword_10065E008);
  v91 = (void *)swift_task_alloc();
  v111[42] = v91;
  v91[2] = v114;
  v91[3] = v86;
  v91[4] = v89;
  v91[5] = v87;
  v91[6] = v94;
  v92 = (void *)swift_task_alloc();
  v111[43] = v92;
  void *v92 = v111;
  v92[1] = sub_100279998;
  uint64_t v118 = v90;
  uint64_t v40 = &unk_10065E040;
  uint64_t v35 = (uint64_t)(v111 + 9);
  uint64_t v36 = v90;
  uint64_t v37 = v90;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v41 = v91;
  uint64_t v42 = v90;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(v35, v36, v37, v38, v39, v40, v41, v42);
}

uint64_t sub_100279998()
{
  *(void *)(*(void *)v1 + 352) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100279C88;
  }
  else {
    uint64_t v2 = sub_100279B28;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100279B28()
{
  (*(void (**)(void, void))(v0 + 312))(*(void *)(v0 + 240), *(void *)(v0 + 200));
  uint64_t v3 = *(void *)(v0 + 72);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v1(v3);
}

uint64_t sub_100279C88()
{
  (*(void (**)(void, void))(v0 + 312))(*(void *)(v0 + 240), *(void *)(v0 + 200));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100279DDC(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_100238618;
  return v5();
}

uint64_t sub_100279EAC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100279EE4(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000176B4;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_10065DFF8 + dword_10065DFF8);
  return v6(a1, v4);
}

uint64_t sub_100279F9C(uint64_t a1)
{
  id v2 = *(id *)(a1 + 128);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10027A024(uint64_t a1)
{
  id v2 = *(void **)(a1 + 128);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return a1;
}

uint64_t sub_10027A0A8(uint64_t *a1, int a2, void *a3)
{
  v84 = a3;
  int v80 = a2;
  uint64_t v83 = type metadata accessor for Platform();
  uint64_t v78 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v82 = &v70[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v96 = sub_1000172F8(&qword_100663D90);
  uint64_t v5 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  uint64_t v87 = &v70[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_1000172F8(&qword_10065E028);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  unint64_t v98 = &v70[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  uint64_t v11 = &v70[-v10];
  uint64_t v12 = sub_1000172F8(&qword_10065E050);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v77 = &v70[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = &v70[-v16];
  __chkstk_darwin(v15);
  uint64_t v74 = &v70[-v18];
  uint64_t v19 = sub_1000172F8(&qword_10065E058);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v72 = &v70[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v23 = __chkstk_darwin(v21);
  v95 = &v70[-v24];
  __chkstk_darwin(v23);
  uint64_t v75 = (uint64_t *)&v70[-v25];
  uint64_t v26 = *a1;
  uint64_t v86 = (void (*)(unsigned char *))a1[1];
  uint64_t v27 = a1[2];
  v89 = (uint64_t (*)(uint64_t))a1[3];
  uint64_t v106 = v26;
  uint64_t v28 = a1[4];
  uint64_t v71 = (void (*)(unsigned char *))a1[5];
  uint64_t v29 = a1[6];
  unint64_t v97 = *(void *)(v26 + 16);
  sub_10019B2A0((uint64_t)&v106);
  uint64_t v85 = v5;
  v93 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  v94 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v30 = v26;
  uint64_t v31 = (uint64_t)v11;
  v99 = (unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v20 + 48);
  unint64_t v100 = (void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
  uint64_t v81 = (void (**)(char *, char *, uint64_t))(v78 + 32);
  uint64_t v88 = v27;
  swift_retain();
  uint64_t v90 = v28;
  swift_retain();
  uint64_t v73 = v29;
  swift_retain();
  unint64_t v32 = 0;
  uint64_t v76 = v11;
  while (2)
  {
    for (uint64_t i = (uint64_t)v98; ; uint64_t i = (uint64_t)v98)
    {
      if (v32 == v97)
      {
        uint64_t v34 = 1;
        unint64_t v32 = v97;
      }
      else
      {
        if (v32 >= *(void *)(v30 + 16))
        {
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
          goto LABEL_36;
        }
        sub_100017238(v30+ ((*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80))+ *(void *)(v85 + 72) * v32, v31, &qword_100663D90);
        uint64_t v34 = 0;
        ++v32;
      }
      uint64_t v35 = v96;
      (*v94)(v31, v34, 1, v96);
      sub_10001733C(v31, i, &qword_10065E028);
      if ((*v93)(i, 1, v35) == 1)
      {
        uint64_t v36 = (void (*)(void, void, void, void))*v100;
        (*v100)(v17, 1, 1, v19);
      }
      else
      {
        uint64_t v37 = v87;
        sub_10001733C(i, (uint64_t)v87, &qword_100663D90);
        v86(v37);
        sub_10001729C((uint64_t)v37, &qword_100663D90);
        uint64_t v36 = (void (*)(void, void, void, void))*v100;
        (*v100)(v17, 0, 1, v19);
      }
      uint64_t v38 = (uint64_t)v95;
      uint64_t v39 = (unsigned int (*)(void, void, void))*v99;
      if ((*v99)(v17, 1, v19) == 1)
      {
        sub_10001729C((uint64_t)v17, &qword_10065E050);
        uint64_t v40 = 1;
        uint64_t v41 = v74;
        goto LABEL_15;
      }
      v91 = v39;
      v92 = v36;
      sub_10001733C((uint64_t)v17, v38, &qword_10065E058);
      if (v89(v38)) {
        break;
      }
      sub_10001729C(v38, &qword_10065E058);
    }
    uint64_t v41 = v74;
    sub_10001733C(v38, (uint64_t)v74, &qword_10065E058);
    uint64_t v40 = 0;
    uint64_t v39 = v91;
    uint64_t v36 = v92;
LABEL_15:
    v36(v41, v40, 1, v19);
    uint64_t v42 = v77;
    sub_10001733C((uint64_t)v41, (uint64_t)v77, &qword_10065E050);
    if (v39(v42, 1, v19) == 1)
    {
      uint64_t v43 = sub_1000172F8(&qword_10065E060);
      uint64_t v44 = v75;
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v75, 1, 1, v43);
    }
    else
    {
      os_log_type_t v45 = v72;
      sub_10001733C((uint64_t)v42, (uint64_t)v72, &qword_10065E058);
      uint64_t v44 = v75;
      v71(v45);
      sub_10001729C((uint64_t)v45, &qword_10065E058);
      uint64_t v46 = sub_1000172F8(&qword_10065E060);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v44, 0, 1, v46);
    }
    uint64_t v31 = (uint64_t)v76;
    uint64_t v47 = sub_1000172F8(&qword_10065E060);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v47 - 8) + 48))(v44, 1, v47) == 1)
    {
      sub_10017B89C((uint64_t)&v106);
      swift_release();
      swift_release();
      swift_release();
      sub_10017B89C((uint64_t)&v106);
      swift_release();
      swift_release();
      return swift_release();
    }
    uint64_t v48 = (char *)v44 + *(int *)(v47 + 48);
    uint64_t v49 = *v44;
    uint64_t v50 = v44[1];
    uint64_t v104 = v49;
    uint64_t v105 = v50;
    uint64_t v79 = *v81;
    v79(v82, v48, v83);
    uint64_t v51 = (void *)*v84;
    v91 = (unsigned int (*)(void, void, void))v49;
    v92 = (void (*)(void, void, void, void))v50;
    unint64_t v53 = sub_100016D20(v49, v50);
    uint64_t v54 = v51[2];
    BOOL v55 = (v52 & 1) == 0;
    uint64_t v56 = v54 + v55;
    if (__OFADD__(v54, v55)) {
      goto LABEL_34;
    }
    char v57 = v52;
    if (v51[3] >= v56)
    {
      if (v80)
      {
        if (v52) {
          goto LABEL_29;
        }
      }
      else
      {
        sub_10052BD90();
        if (v57) {
          goto LABEL_29;
        }
      }
LABEL_26:
      uint64_t v60 = (void *)*v84;
      v60[(v53 >> 6) + 8] |= 1 << v53;
      uint64_t v61 = (void *)(v60[6] + 16 * v53);
      uint64_t v62 = (uint64_t)v92;
      void *v61 = v91;
      v61[1] = v62;
      v79((char *)(v60[7] + *(void *)(v78 + 72) * v53), v82, v83);
      uint64_t v63 = v60[2];
      BOOL v64 = __OFADD__(v63, 1);
      uint64_t v65 = v63 + 1;
      if (!v64)
      {
        v60[2] = v65;
        int v80 = 1;
        continue;
      }
      goto LABEL_35;
    }
    break;
  }
  sub_1005240C8(v56, v80 & 1);
  unint64_t v58 = sub_100016D20((uint64_t)v91, (uint64_t)v92);
  if ((v57 & 1) != (v59 & 1))
  {
LABEL_36:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    goto LABEL_37;
  }
  unint64_t v53 = v58;
  if ((v57 & 1) == 0) {
    goto LABEL_26;
  }
LABEL_29:
  uint64_t v66 = swift_allocError();
  swift_willThrow();
  uint64_t v103 = v66;
  swift_errorRetain();
  sub_1000172F8(&qword_10065B260);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_10017B89C((uint64_t)&v106);
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v78 + 8))(v82, v83);
    swift_bridgeObjectRelease();
    sub_10017B89C((uint64_t)&v106);
    swift_release();
    swift_release();
    swift_release();
    return swift_errorRelease();
  }
LABEL_37:
  uint64_t v101 = 0;
  unint64_t v102 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v68._object = (void *)0x80000001005B9220;
  v68._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v68);
  _print_unlocked<A, B>(_:_:)();
  v69._countAndFlagsBits = 39;
  v69._object = (void *)0xE100000000000000;
  String.append(_:)(v69);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

BOOL sub_10027ABBC(uint64_t a1)
{
  uint64_t v2 = sub_1000172F8(&qword_10065E060);
  return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 1, v2) != 1;
}

uint64_t sub_10027AC24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_1000172F8(&qword_10065E058);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100017238(a1, (uint64_t)v6, &qword_10065E058);
  uint64_t v7 = sub_1000172F8(&qword_10065E060);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (result != 1) {
    return sub_10001733C((uint64_t)v6, a2, &qword_10065E060);
  }
  __break(1u);
  return result;
}

uint64_t sub_10027AD10(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10027AD78(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_10027ADD8()
{
  unint64_t result = qword_10065CBE0;
  if (!qword_10065CBE0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10065CBE0);
  }
  return result;
}

uint64_t sub_10027AE18(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10027AE80(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v10 = v2[6];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v11;
  *uint64_t v11 = v3;
  v11[1] = sub_1000176B4;
  return sub_1002A68EC(a1, a2, v6, v7, v8, v9, v10);
}

uint64_t sub_10027AF58()
{
  if (*(void *)(v0 + 40)) {
    sub_100014524(v0 + 16);
  }

  return _swift_deallocObject(v0, 48, 7);
}

unint64_t sub_10027AF98@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Platform();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v2 + *(int *)(type metadata accessor for MediaAPIApp(0) + 24));
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  unsigned __int8 v10 = sub_1002ACA54(v8);
  if (*(void *)(v9 + 16) && (unint64_t result = sub_1004524C0(v10), (v12 & 1) != 0))
  {
    uint64_t v13 = (_OWORD *)(*(void *)(v9 + 56) + 160 * result);
    long long v14 = v13[7];
    a2[6] = v13[6];
    a2[7] = v14;
    long long v15 = v13[9];
    a2[8] = v13[8];
    a2[9] = v15;
    long long v16 = v13[3];
    a2[2] = v13[2];
    a2[3] = v16;
    long long v17 = v13[5];
    a2[4] = v13[4];
    a2[5] = v17;
    long long v18 = v13[1];
    *a2 = *v13;
    a2[1] = v18;
  }
  else
  {
    type metadata accessor for InternalError();
    sub_100013B04((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    *uint64_t v19 = 0xD000000000000012;
    v19[1] = 0x80000001005B7A30;
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_10027B160(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 320) = v13;
  *(_OWORD *)(v8 + 304) = v12;
  *(void *)(v8 + 288) = a7;
  *(void *)(v8 + 296) = a8;
  *(void *)(v8 + 272) = a5;
  *(void *)(v8 + 280) = a6;
  *(unsigned char *)(v8 + 408) = a4;
  *(void *)(v8 + 256) = a2;
  *(void *)(v8 + 264) = a3;
  *(void *)(v8 + 248) = a1;
  uint64_t v9 = type metadata accessor for Platform();
  *(void *)(v8 + 328) = v9;
  *(void *)(v8 + 336) = *(void *)(v9 - 8);
  *(void *)(v8 + 344) = swift_task_alloc();
  *(void *)(v8 + 352) = type metadata accessor for MediaAPIApp(0);
  *(void *)(v8 + 360) = swift_task_alloc();
  return _swift_task_switch(sub_10027B274, 0, 0);
}

uint64_t sub_10027B274()
{
  uint64_t v1 = *(void *)(v0 + 296);
  uint64_t v2 = *(void *)(v0 + 264);
  char v3 = *(unsigned char *)(v0 + 408);
  uint64_t v4 = *(void *)(v0 + 256);
  (*(void (**)(void, void, void))(*(void *)(v0 + 336) + 16))(*(void *)(v0 + 344), *(void *)(v0 + 272), *(void *)(v0 + 328));
  char v5 = v3 & 1;
  sub_1001C3ED0(v4, v2, v5);
  sub_10018AB28(v1);
  swift_unknownObjectRetain();
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 368) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10027B380;
  uint64_t v7 = *(void *)(v0 + 360);
  uint64_t v8 = *(void *)(v0 + 344);
  uint64_t v9 = *(void *)(v0 + 312);
  uint64_t v10 = *(void *)(v0 + 320);
  uint64_t v11 = *(void *)(v0 + 296);
  uint64_t v12 = *(void *)(v0 + 256);
  uint64_t v13 = *(void *)(v0 + 264);
  return sub_1002A2584(v7, v12, v13, v5, v11, v8, v9, v10);
}

uint64_t sub_10027B380()
{
  *(void *)(*(void *)v1 + 376) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10027B928;
  }
  else {
    uint64_t v2 = sub_10027B494;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10027B494()
{
  uint64_t v1 = *(void *)(v0 + 376);
  sub_10027AF98(*(void *)(v0 + 272), (_OWORD *)(v0 + 16));
  if (v1)
  {
    sub_10027AD78(*(void *)(v0 + 360), type metadata accessor for MediaAPIApp);
    *(void *)(v0 + 384) = v1;
    char v2 = *(unsigned char *)(v0 + 408);
    char v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 392) = v3;
    *char v3 = v0;
    v3[1] = sub_10027B750;
    uint64_t v4 = *(void *)(v0 + 296);
    uint64_t v5 = *(void *)(v0 + 280);
    uint64_t v6 = *(void *)(v0 + 288);
    uint64_t v7 = *(void *)(v0 + 256);
    uint64_t v8 = *(void *)(v0 + 264);
    return sub_100276B70(v0 + 176, v7, v8, v2 & 1, v5, v6, v4);
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 128);
    *(void *)(v0 + 240) = v10;
    uint64_t v11 = *(void *)(v10 + 16);
    if (v11)
    {
      sub_10027CC24((void *)(v0 + 16));
      sub_10019B2A0(v0 + 240);
      uint64_t v12 = (unsigned char *)(v10 + 48);
      while (1)
      {
        uint64_t v14 = *((void *)v12 - 2);
        uint64_t v13 = *((void *)v12 - 1);
        if ((*v12 & 1) == 0) {
          break;
        }
        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (v15) {
          goto LABEL_14;
        }
        swift_bridgeObjectRelease();
        v12 += 24;
        if (!--v11)
        {
          sub_10017B89C(v0 + 240);
          goto LABEL_12;
        }
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
LABEL_14:
      sub_10017B89C(v0 + 240);
    }
    else
    {
      sub_10027CC24((void *)(v0 + 16));
LABEL_12:
      uint64_t v14 = 0;
      uint64_t v13 = 0;
    }
    uint64_t v17 = *(void *)(v0 + 352);
    long long v16 = *(uint64_t **)(v0 + 360);
    uint64_t v18 = *(void *)(v0 + 24);
    uint64_t v30 = *(void *)(v0 + 16);
    uint64_t v19 = *v16;
    uint64_t v20 = v16[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_1004BD574(v19, v20);
    char v23 = v22;
    uint64_t v24 = (char *)v16 + *(int *)(v17 + 24);
    uint64_t v26 = *((void *)v24 + 2);
    uint64_t v25 = *((void *)v24 + 3);
    swift_bridgeObjectRetain();
    sub_10027AD78((uint64_t)v16, type metadata accessor for MediaAPIApp);
    sub_10027CD2C((void *)(v0 + 16));
    if (v13) {
      uint64_t v27 = v14;
    }
    else {
      uint64_t v27 = 0;
    }
    uint64_t v28 = *(void *)(v0 + 248);
    swift_task_dealloc();
    swift_task_dealloc();
    *(void *)uint64_t v28 = v30;
    *(void *)(v28 + 8) = v18;
    *(void *)(v28 + 16) = v27;
    *(void *)(v28 + 24) = v13;
    *(void *)(v28 + 32) = v21;
    *(unsigned char *)(v28 + 40) = v23 & 1;
    *(void *)(v28 + 48) = v26;
    *(void *)(v28 + 56) = v25;
    uint64_t v29 = *(uint64_t (**)(void))(v0 + 8);
    return v29();
  }
}

uint64_t sub_10027B750()
{
  *(void *)(*(void *)v1 + 400) = v0;
  swift_task_dealloc();
  if (v0) {
    char v2 = sub_10027B9E8;
  }
  else {
    char v2 = sub_10027B864;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10027B864()
{
  swift_errorRelease();
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 208);
  char v4 = *(unsigned char *)(v0 + 216);
  long long v8 = *(_OWORD *)(v0 + 176);
  long long v9 = *(_OWORD *)(v0 + 192);
  uint64_t v5 = *(void *)(v0 + 248);
  swift_task_dealloc();
  swift_task_dealloc();
  *(_OWORD *)uint64_t v5 = v8;
  *(_OWORD *)(v5 + 16) = v9;
  *(void *)(v5 + 32) = v3;
  *(unsigned char *)(v5 + 40) = v4;
  *(void *)(v5 + 48) = v1;
  *(void *)(v5 + 56) = v2;
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_10027B928()
{
  *(void *)(v0 + 384) = *(void *)(v0 + 376);
  char v1 = *(unsigned char *)(v0 + 408);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 392) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10027B750;
  uint64_t v3 = *(void *)(v0 + 296);
  uint64_t v4 = *(void *)(v0 + 280);
  uint64_t v5 = *(void *)(v0 + 288);
  uint64_t v6 = *(void *)(v0 + 256);
  uint64_t v7 = *(void *)(v0 + 264);
  return sub_100276B70(v0 + 176, v6, v7, v1 & 1, v4, v5, v3);
}

uint64_t sub_10027B9E8()
{
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10027BA64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[35] = a6;
  v7[36] = a7;
  v7[33] = a4;
  v7[34] = a5;
  v7[31] = a1;
  v7[32] = a3;
  sub_1000172F8(&qword_10065BCD0);
  v7[37] = swift_task_alloc();
  v7[38] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Platform();
  v7[39] = v8;
  v7[40] = *(void *)(v8 - 8);
  v7[41] = swift_task_alloc();
  v7[42] = swift_task_alloc();
  sub_1000172F8((uint64_t *)&unk_10065CA40);
  v7[43] = swift_task_alloc();
  v7[44] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DDMPurchaseMethod();
  v7[45] = v9;
  v7[46] = *(void *)(v9 - 8);
  v7[47] = swift_task_alloc();
  v7[48] = swift_task_alloc();
  v7[49] = type metadata accessor for MediaAPIApp(0);
  v7[50] = swift_task_alloc();
  return _swift_task_switch(sub_10027BC58, 0, 0);
}

uint64_t sub_10027BC58()
{
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v2 = *(void *)(v0 + 368);
  uint64_t v3 = *(void *)(v0 + 352);
  uint64_t v4 = *(os_unfair_lock_s **)(v0 + 256);
  swift_retain();
  sub_1003119B0(14, v4, v3);
  swift_release();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  *(void *)(v0 + 408) = v5;
  *(void *)(v0 + 416) = (v2 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  uint64_t result = v5(v3, 1, v1);
  if (result == 1)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v7 = *(void *)(v0 + 384);
  uint64_t v8 = *(void *)(v0 + 360);
  uint64_t v9 = *(void *)(v0 + 368);
  uint64_t v10 = *(void *)(v0 + 352);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
  *(void *)(v0 + 424) = v11;
  *(void *)(v0 + 432) = (v9 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v11(v7, v10, v8);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 88);
  *(void *)(v0 + 440) = v12;
  *(void *)(v0 + 448) = (v9 + 88) & 0xFFFFFFFFFFFFLL | 0xA3B5000000000000;
  int v13 = v12(v7, v8);
  int v14 = v13;
  int v15 = enum case for DDMPurchaseMethod.volumePurchaseProgram(_:);
  *(_DWORD *)(v0 + 544) = enum case for DDMPurchaseMethod.volumePurchaseProgram(_:);
  if (v13 != v15)
  {
    if (v13 != enum case for DDMPurchaseMethod.manifest(_:)) {
      return _assertionFailure(_:_:file:line:flags:)();
    }
    long long v16 = *(os_unfair_lock_s **)(v0 + 256);
    swift_retain();
    uint64_t v17 = sub_100311910(3, v16);
    uint64_t v19 = v18;
    swift_release();
    if (v19) {
      goto LABEL_8;
    }
    __break(1u);
  }
  uint64_t v20 = *(os_unfair_lock_s **)(v0 + 256);
  swift_retain();
  uint64_t v17 = sub_100311A30(0, v20);
  char v22 = v21;
  uint64_t result = swift_release();
  if (v22)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  uint64_t v19 = 0;
LABEL_8:
  uint64_t v23 = *(void *)(v0 + 312);
  uint64_t v24 = *(void *)(v0 + 320);
  uint64_t v25 = *(void *)(v0 + 304);
  uint64_t v27 = *(os_unfair_lock_s **)(v0 + 256);
  uint64_t v26 = *(void *)(v0 + 264);
  swift_retain();
  sub_10018AB28(v26);
  sub_100311A5C(13, v27, v25);
  swift_release();
  uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  *(void *)(v0 + 456) = v28;
  *(void *)(v0 + 464) = (v24 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v28(v25, 1, v23) == 1)
  {
    uint64_t v29 = *(void *)(v0 + 304);
    static Platform.current.getter();
    sub_10001729C(v29, &qword_10065BCD0);
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 320) + 32))(*(void *)(v0 + 336), *(void *)(v0 + 304), *(void *)(v0 + 312));
  }
  swift_unknownObjectRetain();
  uint64_t v30 = (void *)swift_task_alloc();
  *(void *)(v0 + 472) = v30;
  *uint64_t v30 = v0;
  v30[1] = sub_10027BF80;
  uint64_t v31 = *(void *)(v0 + 400);
  uint64_t v32 = *(void *)(v0 + 336);
  uint64_t v33 = *(void *)(v0 + 280);
  uint64_t v34 = *(void *)(v0 + 288);
  uint64_t v35 = *(void *)(v0 + 264);
  return sub_1002A2584(v31, v17, v19, v14 != v15, v35, v32, v33, v34);
}

uint64_t sub_10027BF80()
{
  *(void *)(*(void *)v1 + 480) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10027C888;
  }
  else {
    uint64_t v2 = sub_10027C094;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10027C094()
{
  uint64_t v1 = (void *)(v0 + 16);
  uint64_t v2 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 456);
  uint64_t v3 = *(void *)(v0 + 312);
  uint64_t v4 = *(void *)(v0 + 296);
  uint64_t v5 = *(os_unfair_lock_s **)(v0 + 256);
  swift_retain();
  sub_100311A5C(13, v5, v4);
  swift_release();
  if (v2(v4, 1, v3) == 1)
  {
    uint64_t v6 = *(void *)(v0 + 296);
    static Platform.current.getter();
    sub_10001729C(v6, &qword_10065BCD0);
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 320) + 32))(*(void *)(v0 + 328), *(void *)(v0 + 296), *(void *)(v0 + 312));
  }
  uint64_t v7 = *(void *)(v0 + 480);
  uint64_t v8 = *(os_unfair_lock_s **)(v0 + 320);
  sub_10027AF98(*(void *)(v0 + 328), (_OWORD *)(v0 + 16));
  uint64_t v9 = v8 + 2;
  if (!v7) {
    goto LABEL_10;
  }
  uint64_t v10 = *(void *)(v0 + 400);
  (*(void (**)(void, void))&v9->_os_unfair_lock_opaque)(*(void *)(v0 + 328), *(void *)(v0 + 312));
  sub_10027AD78(v10, type metadata accessor for MediaAPIApp);
  *(void *)(v0 + 488) = v7;
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 408);
  uint64_t v12 = *(void *)(v0 + 360);
  uint64_t v13 = *(void *)(v0 + 344);
  int v14 = *(os_unfair_lock_s **)(v0 + 256);
  swift_retain();
  sub_1003119B0(14, v14, v13);
  swift_release();
  uint64_t result = v11(v13, 1, v12);
  if (result == 1)
  {
    __break(1u);
    goto LABEL_38;
  }
  int v16 = *(_DWORD *)(v0 + 544);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 440);
  uint64_t v18 = *(void *)(v0 + 376);
  uint64_t v19 = *(void *)(v0 + 360);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 424))(v18, *(void *)(v0 + 344), v19);
  int v20 = v17(v18, v19);
  int v21 = v20;
  *(_DWORD *)(v0 + 548) = v20;
  if (v20 == v16)
  {
    uint64_t v32 = *(os_unfair_lock_s **)(v0 + 256);
    swift_retain();
    uint64_t v22 = sub_100311A30(0, v32);
    char v34 = v33;
    uint64_t result = swift_release();
    if ((v34 & 1) == 0)
    {
      uint64_t v1 = 0;
LABEL_19:
      char v35 = v21 != v16;
      *(void *)(v0 + 496) = v22;
      *(void *)(v0 + 504) = v1;
      uint64_t v36 = *(os_unfair_lock_s **)(v0 + 256);
      swift_retain();
      uint64_t v37 = sub_100311954(12, v36);
      uint64_t v39 = v38;
      swift_release();
      *(void *)(v0 + 512) = v37;
      *(void *)(v0 + 520) = v39;
      if (v39 == 2) {
        uint64_t v40 = 0;
      }
      else {
        uint64_t v40 = v37;
      }
      if (v39 == 2) {
        uint64_t v41 = 0;
      }
      else {
        uint64_t v41 = v39;
      }
      uint64_t v42 = (void *)swift_task_alloc();
      *(void *)(v0 + 528) = v42;
      *uint64_t v42 = v0;
      v42[1] = sub_10027C60C;
      uint64_t v43 = *(void *)(v0 + 264);
      return sub_100276B70(v0 + 176, v22, (uint64_t)v1, v35, v40, v41, v43);
    }
LABEL_38:
    __break(1u);
    return result;
  }
  if (v20 != enum case for DDMPurchaseMethod.manifest(_:)) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  uint64_t v9 = *(os_unfair_lock_s **)(v0 + 256);
  swift_retain();
  uint64_t v22 = sub_100311910(3, v9);
  uint64_t v1 = v23;
  swift_release();
  if (v1) {
    goto LABEL_19;
  }
  __break(1u);
LABEL_10:
  uint64_t v24 = *(void *)(v0 + 328);
  uint64_t v25 = *(void *)(v0 + 312);
  sub_10027CC24(v1);
  (*(void (**)(uint64_t, uint64_t))&v9->_os_unfair_lock_opaque)(v24, v25);
  uint64_t v26 = *(void *)(v0 + 128);
  *(void *)(v0 + 240) = v26;
  uint64_t v27 = *(void *)(v26 + 16);
  if (v27)
  {
    uint64_t v28 = (unsigned char *)(swift_bridgeObjectRetain() + 48);
    while (1)
    {
      uint64_t v30 = *((void *)v28 - 2);
      uint64_t v29 = *((void *)v28 - 1);
      if ((*v28 & 1) == 0) {
        break;
      }
      char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v31) {
        goto LABEL_30;
      }
      swift_bridgeObjectRelease();
      v28 += 24;
      if (!--v27)
      {
        sub_10017B89C(v0 + 240);
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
LABEL_30:
    sub_10017B89C(v0 + 240);
  }
  else
  {
LABEL_16:
    uint64_t v30 = 0;
    uint64_t v29 = 0;
  }
  uint64_t v44 = *(void *)(v0 + 392);
  os_log_type_t v45 = *(uint64_t **)(v0 + 400);
  uint64_t v58 = *(void *)(v0 + 24);
  uint64_t v59 = *(void *)(v0 + 16);
  uint64_t v46 = *v45;
  uint64_t v47 = v45[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v57 = sub_1004BD574(v46, v47);
  char v56 = v48;
  uint64_t v49 = (char *)v45 + *(int *)(v44 + 24);
  uint64_t v54 = *((void *)v49 + 3);
  uint64_t v55 = *((void *)v49 + 2);
  swift_bridgeObjectRetain();
  sub_10027AD78((uint64_t)v45, type metadata accessor for MediaAPIApp);
  sub_10027CD2C(v1);
  if (v29) {
    uint64_t v50 = v30;
  }
  else {
    uint64_t v50 = 0;
  }
  uint64_t v53 = v50;
  uint64_t v51 = *(void *)(v0 + 248);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  *(void *)uint64_t v51 = v59;
  *(void *)(v51 + 8) = v58;
  *(void *)(v51 + 16) = v53;
  *(void *)(v51 + 24) = v29;
  *(void *)(v51 + 32) = v57;
  *(unsigned char *)(v51 + 40) = v56 & 1;
  *(void *)(v51 + 48) = v55;
  *(void *)(v51 + 56) = v54;
  char v52 = *(uint64_t (**)(void))(v0 + 8);
  return v52();
}

uint64_t sub_10027C60C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 536) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_10027CB04;
  }
  else
  {
    unint64_t v4 = *(void *)(v2 + 520);
    uint64_t v6 = *(void *)(v2 + 504);
    uint64_t v5 = *(void *)(v2 + 512);
    uint64_t v7 = *(void *)(v2 + 496);
    char v8 = *(_DWORD *)(v2 + 548) != *(_DWORD *)(v2 + 544);
    sub_1001C6440(v5, v4);
    sub_1001C3EC0(v7, v6, v8);
    uint64_t v3 = sub_10027C758;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10027C758()
{
  swift_errorRelease();
  uint64_t v8 = *(void *)(v0 + 232);
  uint64_t v9 = *(void *)(v0 + 224);
  uint64_t v7 = *(void *)(v0 + 208);
  char v6 = *(unsigned char *)(v0 + 216);
  long long v4 = *(_OWORD *)(v0 + 176);
  long long v5 = *(_OWORD *)(v0 + 192);
  uint64_t v1 = *(void *)(v0 + 248);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  *(_OWORD *)uint64_t v1 = v4;
  *(_OWORD *)(v1 + 16) = v5;
  *(void *)(v1 + 32) = v7;
  *(unsigned char *)(v1 + 40) = v6;
  *(void *)(v1 + 48) = v9;
  *(void *)(v1 + 56) = v8;
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10027C888()
{
  *(void *)(v0 + 488) = *(void *)(v0 + 480);
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 408);
  uint64_t v2 = *(void *)(v0 + 360);
  uint64_t v3 = *(void *)(v0 + 344);
  long long v4 = *(os_unfair_lock_s **)(v0 + 256);
  swift_retain();
  sub_1003119B0(14, v4, v3);
  swift_release();
  uint64_t result = v1(v3, 1, v2);
  if (result == 1)
  {
    __break(1u);
    goto LABEL_19;
  }
  int v6 = *(_DWORD *)(v0 + 544);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 440);
  uint64_t v8 = *(void *)(v0 + 376);
  uint64_t v9 = *(void *)(v0 + 360);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 424))(v8, *(void *)(v0 + 344), v9);
  int v10 = v7(v8, v9);
  int v11 = v10;
  *(_DWORD *)(v0 + 548) = v10;
  if (v10 != v6)
  {
    if (v10 != enum case for DDMPurchaseMethod.manifest(_:)) {
      return _assertionFailure(_:_:file:line:flags:)();
    }
    uint64_t v12 = *(os_unfair_lock_s **)(v0 + 256);
    swift_retain();
    uint64_t v13 = sub_100311910(3, v12);
    uint64_t v15 = v14;
    swift_release();
    if (v15) {
      goto LABEL_8;
    }
    __break(1u);
  }
  int v16 = *(os_unfair_lock_s **)(v0 + 256);
  swift_retain();
  uint64_t v13 = sub_100311A30(0, v16);
  char v18 = v17;
  uint64_t result = swift_release();
  if (v18)
  {
LABEL_19:
    __break(1u);
    return result;
  }
  uint64_t v15 = 0;
LABEL_8:
  char v19 = v11 != v6;
  *(void *)(v0 + 496) = v13;
  *(void *)(v0 + 504) = v15;
  int v20 = *(os_unfair_lock_s **)(v0 + 256);
  swift_retain();
  uint64_t v21 = sub_100311954(12, v20);
  uint64_t v23 = v22;
  swift_release();
  *(void *)(v0 + 512) = v21;
  *(void *)(v0 + 520) = v23;
  if (v23 == 2) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = v21;
  }
  if (v23 == 2) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = v23;
  }
  uint64_t v26 = (void *)swift_task_alloc();
  *(void *)(v0 + 528) = v26;
  *uint64_t v26 = v0;
  v26[1] = sub_10027C60C;
  uint64_t v27 = *(void *)(v0 + 264);
  return sub_100276B70(v0 + 176, v13, v15, v19, v24, v25, v27);
}

uint64_t sub_10027CB04()
{
  uint64_t v1 = *(void *)(v0 + 504);
  uint64_t v2 = *(void *)(v0 + 496);
  char v3 = *(_DWORD *)(v0 + 548) != *(_DWORD *)(v0 + 544);
  sub_1001C6440(*(void *)(v0 + 512), *(void *)(v0 + 520));
  sub_1001C3EC0(v2, v1, v3);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

void *sub_10027CC24(void *a1)
{
  uint64_t v2 = a1[10];
  uint64_t v3 = a1[11];
  uint64_t v4 = a1[12];
  uint64_t v5 = a1[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10027CCE8(v2, v3, v4, v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10027CCE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void *sub_10027CD2C(void *a1)
{
  uint64_t v2 = a1[10];
  uint64_t v3 = a1[11];
  uint64_t v4 = a1[12];
  uint64_t v5 = a1[13];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10027CDF0(v2, v3, v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10027CDF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10027CE34()
{
  v1[3] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v1[7] = v3;
  v1[8] = *(void *)(v3 - 8);
  v1[9] = swift_task_alloc();
  return _swift_task_switch(sub_10027CF50, 0, 0);
}

uint64_t sub_10027CF50()
{
  uint64_t v1 = v0[3];
  v0[10] = *(void *)(*(void *)(*(void *)(v1 + *(int *)(type metadata accessor for EnterpriseIngestTask(0) + 24))
                                 + 16)
                     + 32);
  uint64_t v2 = swift_task_alloc();
  v0[11] = v2;
  *(void *)(v2 + 16) = v1;
  swift_retain();
  UUID.init()();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[12] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10027D058;
  uint64_t v4 = v0[9];
  return sub_100459F58(0, 0, v4, 0, (uint64_t)&unk_10065E090, v2);
}

uint64_t sub_10027D058()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[8] + 8))(v2[9], v2[7]);
  if (v0)
  {
    uint64_t v3 = sub_10027D220;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = sub_10027D1A8;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10027D1A8()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10027D220()
{
  swift_task_dealloc();
  static Logger.ddm.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to enqueue enterprise manifest install: %{public}@", v3, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  (*(void (**)(void, void))(v0[5] + 8))(v0[6], v0[4]);
  swift_willThrow();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t type metadata accessor for EnterpriseIngestTask(uint64_t a1)
{
  return sub_10019B200(a1, (uint64_t *)&unk_10065E100);
}

uint64_t sub_10027D440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[18] = a2;
  v3[19] = a3;
  v3[17] = a1;
  sub_1000172F8(&qword_10065BCD0);
  v3[20] = swift_task_alloc();
  type metadata accessor for EnterpriseApp();
  v3[21] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for AppInstallRequestType();
  v3[22] = v4;
  v3[23] = *(void *)(v4 - 8);
  v3[24] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v3[25] = v5;
  v3[26] = *(void *)(v5 - 8);
  v3[27] = swift_task_alloc();
  v3[28] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v3[29] = v6;
  v3[30] = *(void *)(v6 - 8);
  v3[31] = swift_task_alloc();
  return _swift_task_switch(sub_10027D628, 0, 0);
}

uint64_t sub_10027D628()
{
  uint64_t v38 = v0;
  uint64_t v1 = *(void (**)(char *, void (*)(void)))(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 144);
  static Logger.ddm.getter();
  uint64_t v36 = *(void (**)(void (*)(char *, void (*)(void)), uint64_t, uint64_t))(v3 + 16);
  v36(v1, v4, v2);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v33 = *(void *)(v0 + 240);
    uint64_t v34 = *(void *)(v0 + 232);
    uint64_t v35 = *(void *)(v0 + 248);
    uint64_t v32 = *(void *)(v0 + 224);
    uint64_t v8 = *(void *)(v0 + 200);
    uint64_t v7 = *(void *)(v0 + 208);
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446210;
    sub_10027ED40((unint64_t *)&qword_100665D30, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 128) = sub_1000143F4(v10, v11, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v32, v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Enqueuing enterprise manifest install '%{public}s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v35, v34);
  }
  else
  {
    uint64_t v13 = *(void *)(v0 + 240);
    uint64_t v12 = *(void *)(v0 + 248);
    uint64_t v14 = *(void *)(v0 + 232);
    (*(void (**)(void, void))(*(void *)(v0 + 208) + 8))(*(void *)(v0 + 224), *(void *)(v0 + 200));

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  uint64_t v15 = *(void (**)(char *, void (*)(void)))(v0 + 216);
  uint64_t v16 = *(void *)(v0 + 192);
  uint64_t v17 = *(void *)(v0 + 176);
  uint64_t v18 = *(void *)(v0 + 184);
  uint64_t v19 = *(void *)(v0 + 160);
  int v20 = *(void **)(v0 + 168);
  uint64_t v21 = *(void *)(v0 + 152);
  uint64_t v22 = *(void *)(v0 + 136);
  v36(v15, *(void *)(v0 + 144), *(void *)(v0 + 200));
  (*(void (**)(uint64_t, void, uint64_t))(v18 + 104))(v16, enum case for AppInstallRequestType.upp(_:), v17);
  sub_10027EDF0(v21, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for EnterpriseApp);
  uint64_t v23 = type metadata accessor for EnterpriseIngestTask(0);
  uint64_t v24 = *(void *)(v21 + *(int *)(v23 + 24));
  long long v25 = *(_OWORD *)(v24 + 88);
  long long v26 = *(_OWORD *)(v24 + 104);
  long long v27 = *(_OWORD *)(v24 + 72);
  *(_OWORD *)(v0 + 111) = *(_OWORD *)(v24 + 119);
  *(_OWORD *)(v0 + 80) = v25;
  *(_OWORD *)(v0 + 96) = v26;
  *(_OWORD *)(v0 + 64) = v27;
  long long v28 = *(_OWORD *)(v24 + 56);
  long long v29 = *(_OWORD *)(v24 + 40);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v24 + 24);
  *(_OWORD *)(v0 + 32) = v29;
  *(_OWORD *)(v0 + 48) = v28;
  sub_10027ECB8(v21 + *(int *)(v23 + 20), v19);
  sub_10018AB28(v0 + 16);
  sub_10027DA78(v15, v16, v20, v0 + 16, v19, v22);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

uint64_t sub_10027D9C8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10000B238;
  return sub_10027D440(a1, a2, v6);
}

uint64_t sub_10027DA78@<X0>(void (*a1)(char *, void (*)(void))@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v196 = a5;
  uint64_t v197 = a2;
  v204 = a1;
  uint64_t v9 = type metadata accessor for LogKey.Prefix();
  uint64_t v161 = *(void *)(v9 - 8);
  uint64_t v162 = v9;
  __chkstk_darwin(v9);
  v163 = (char *)&v137 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AppPackageTemplate();
  uint64_t v12 = *(void *)(v11 - 8);
  v159 = (int *)v11;
  uint64_t v160 = v12;
  __chkstk_darwin(v11);
  uint64_t v191 = (uint64_t)&v137 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  v172 = (char *)&v137 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v173 = (char *)&v137 - v18;
  uint64_t v19 = sub_1000172F8(&qword_10065BCD0);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v164 = (uint64_t)&v137 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v176 = (void (*)(char *, uint64_t, void (*)(void)))((char *)&v137 - v22);
  uint64_t v23 = type metadata accessor for Platform();
  uint64_t v24 = *(void *)(v23 - 8);
  v194 = (void (*)(void))v23;
  uint64_t v195 = v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v165 = (char *)&v137 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v167 = (char *)&v137 - v27;
  uint64_t v28 = sub_1000172F8(&qword_10065C3C0);
  uint64_t v29 = __chkstk_darwin(v28 - 8);
  uint64_t v171 = (uint64_t)&v137 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v29);
  v170 = (char *)&v137 - v32;
  __chkstk_darwin(v31);
  v175 = (char *)&v137 - v33;
  uint64_t v34 = (int *)type metadata accessor for AppInstallTemplate();
  uint64_t v35 = a6 + v34[7];
  uint64_t v177 = v15;
  uint64_t v36 = *(void (**)(void))(v15 + 56);
  uint64_t v193 = v35;
  uint64_t v190 = v14;
  v168 = v36;
  uint64_t v169 = v15 + 56;
  v36();
  uint64_t v37 = (void *)(a6 + v34[10]);
  *uint64_t v37 = 0;
  v37[1] = 0;
  v184 = v37;
  uint64_t v38 = (void *)(a6 + v34[14]);
  *uint64_t v38 = 0;
  v38[1] = 0;
  v188 = v38;
  uint64_t v39 = (void *)(a6 + v34[16]);
  uint64_t v40 = type metadata accessor for UUID();
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(v41 + 56);
  v189 = v39;
  v42(v39, 1, 1, v40);
  *(unsigned char *)(a6 + v34[17]) = 2;
  uint64_t v43 = (_OWORD *)(a6 + v34[19]);
  long long v192 = xmmword_1005A5CE0;
  *uint64_t v43 = xmmword_1005A5CE0;
  uint64_t v44 = v34[20];
  v186 = v43;
  uint64_t v187 = v44;
  *(void *)(a6 + v44) = 0;
  uint64_t v45 = a6 + v34[21];
  *(void *)uint64_t v45 = 0;
  *(unsigned char *)(v45 + 8) = 1;
  *(_DWORD *)(a6 + v34[22]) = 2;
  uint64_t v46 = a6 + v34[23];
  *(void *)uint64_t v46 = 0;
  *(unsigned char *)(v46 + 8) = 1;
  uint64_t v47 = a6 + v34[24];
  *(void *)uint64_t v47 = 0;
  *(unsigned char *)(v47 + 8) = 1;
  uint64_t v183 = a6 + v34[30];
  static Platform.current.getter();
  *(unsigned char *)(a6 + v34[31]) = 0;
  char v48 = (void *)(a6 + v34[32]);
  *char v48 = 0;
  v48[1] = 0;
  v180 = v48;
  uint64_t v181 = a6 + v34[33];
  *(_OWORD *)uint64_t v181 = v192;
  uint64_t v49 = (void *)(a6 + v34[34]);
  *uint64_t v49 = 0;
  v49[1] = 0;
  v182 = v49;
  uint64_t v50 = a6 + v34[35];
  *(void *)uint64_t v50 = 0;
  *(void *)(v50 + 8) = 0;
  uint64_t v185 = v50;
  *(unsigned char *)(v50 + 16) = -1;
  uint64_t v51 = (void *)(a6 + v34[36]);
  *uint64_t v51 = 0;
  v51[1] = 0;
  *(void *)&long long v192 = v51;
  *(unsigned char *)(a6 + v34[37]) = 0;
  sub_100280F38(a4, 3uLL, (uint64_t)v199);
  sub_10001733C((uint64_t)v199, (uint64_t)v202, &qword_10065BCD8);
  int v179 = sub_1001C3CF0((uint64_t)v202);
  if (v179 == 1)
  {
    sub_10018AB94(a4);
    type metadata accessor for EnterpriseIngestTask.Error(0);
    sub_10027ED40(&qword_10065E098, (void (*)(uint64_t))type metadata accessor for EnterpriseIngestTask.Error);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_10001729C(v196, &qword_10065BCD0);
    sub_10027EE58((uint64_t)a3, (uint64_t (*)(void))type metadata accessor for EnterpriseApp);
    uint64_t v52 = type metadata accessor for AppInstallRequestType();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v197, v52);
    (*(void (**)(void, uint64_t))(v41 + 8))(v204, v40);
    uint64_t v53 = v195;
LABEL_23:
    sub_10001729C(v193, &qword_10065C3C0);
    swift_bridgeObjectRelease();
    if (v179 != 1)
    {
      uint64_t v135 = a6 + v34[13];
      uint64_t v136 = type metadata accessor for AppInstallRequestType();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v136 - 8) + 8))(v135, v136);
    }
    swift_bridgeObjectRelease();
    sub_10001729C((uint64_t)v189, &qword_10065C9B0);
    sub_10018AE44(*(void *)v186, *((void *)v186 + 1));

    (*(void (**)(uint64_t, void (*)(void)))(v53 + 8))(v183, v194);
    swift_bridgeObjectRelease();
    sub_10018AE44(*(void *)v181, *(void *)(v181 + 8));
    swift_bridgeObjectRelease();
    sub_10018ACA4(*(void *)v185, *(void *)(v185 + 8), *(unsigned char *)(v185 + 16));
    return swift_bridgeObjectRelease();
  }
  uint64_t v166 = a4;
  v178 = a3;
  uint64_t v137 = v202[0];
  uint64_t v138 = v202[2];
  uint64_t v139 = v202[3];
  uint64_t v140 = v202[4];
  uint64_t v155 = v202[5];
  uint64_t v156 = v202[6];
  uint64_t v157 = v202[1];
  uint64_t v158 = v202[10];
  uint64_t v144 = v202[8];
  uint64_t v145 = v202[11];
  uint64_t v146 = v202[12];
  uint64_t v147 = v202[13];
  uint64_t v148 = v202[14];
  uint64_t v149 = v202[15];
  uint64_t v141 = v202[16];
  uint64_t v174 = v202[17];
  uint64_t v54 = v202[18];
  uint64_t v153 = v41;
  uint64_t v55 = *(void (**)(uint64_t, void (*)(void, void), uint64_t))(v41 + 16);
  uint64_t v154 = v40;
  v55(a6, (void (*)(void, void))v204, v40);
  v142 = v34;
  uint64_t v143 = a6;
  uint64_t v56 = a6 + v34[13];
  uint64_t v57 = type metadata accessor for AppInstallRequestType();
  uint64_t v151 = *(void *)(v57 - 8);
  uint64_t v152 = v57;
  (*(void (**)(uint64_t, uint64_t))(v151 + 16))(v56, v197);
  uint64_t v150 = v54;
  if (v54)
  {
    swift_bridgeObjectRetain();
    sub_10018A1C0(v198, v166, v54);
    swift_bridgeObjectRelease();
    uint64_t v58 = v198[0];
    uint64_t v59 = v198[1];
    uint64_t v60 = v198[2];
    uint64_t v54 = v198[3];
    uint64_t v61 = v198[4];
    uint64_t v62 = v198[5];
    uint64_t v63 = v198[6];
  }
  else
  {
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
  }
  v203[0] = v58;
  v203[1] = v59;
  v203[2] = v60;
  v203[3] = v54;
  v203[4] = v61;
  v203[5] = v62;
  v203[6] = v63;
  sub_100283FF8(0, (uint64_t)v203, (uint64_t)v200);
  sub_10018B054(v58, v59);
  sub_10001733C((uint64_t)v200, (uint64_t)v201, &qword_10065BCE0);
  uint64_t v64 = (uint64_t)v175;
  if (v201[10])
  {
    URL.init(string:)();
    sub_1001C3D78(v200);
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v168)(v175, 1, 1, v190);
  }
  uint64_t v53 = v195;
  uint64_t v65 = v196;
  uint64_t v66 = v194;
  uint64_t v67 = v174;
  uint64_t v68 = (uint64_t)v176;
  uint64_t v34 = v142;
  a6 = v143;
  sub_10018AB94(v166);
  sub_10027ED88(v64, v193);
  sub_10027ECB8(v65, v68);
  Swift::String v69 = *(unsigned int (**)(uint64_t, uint64_t, void (*)(void)))(v53 + 48);
  if (v69(v68, 1, v66) == 1)
  {
    sub_10001729C(v68, &qword_10065BCD0);
  }
  else
  {
    uint64_t v70 = v167;
    v176 = *(void (**)(char *, uint64_t, void (*)(void)))(v53 + 32);
    v176(v167, v68, v66);
    uint64_t v71 = type metadata accessor for EnterpriseApp();
    uint64_t v72 = v164;
    sub_10027ECB8((uint64_t)v178 + *(int *)(v71 + 20), v164);
    if (v69(v72, 1, v66) == 1)
    {
      uint64_t v73 = v195;
      (*(void (**)(char *, void (*)(void)))(v195 + 8))(v70, v66);
      sub_10001729C(v72, &qword_10065BCD0);
      uint64_t v53 = v73;
    }
    else
    {
      v176(v165, v72, v66);
      sub_10027ED40((unint64_t *)&qword_10065E048, (void (*)(uint64_t))&type metadata accessor for Platform);
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
      {
        sub_10018B054(v137, v157);
        swift_bridgeObjectRelease();
        sub_1001C3D08(v158, v145, v146);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        type metadata accessor for EnterpriseIngestTask.Error(0);
        sub_10027ED40(&qword_10065E098, (void (*)(uint64_t))type metadata accessor for EnterpriseIngestTask.Error);
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        sub_10001729C(v196, &qword_10065BCD0);
        sub_10027EE58((uint64_t)v178, (uint64_t (*)(void))type metadata accessor for EnterpriseApp);
        (*(void (**)(uint64_t, uint64_t))(v151 + 8))(v197, v152);
        uint64_t v133 = v154;
        v134 = *(void (**)(uint64_t, uint64_t))(v153 + 8);
        v134((uint64_t)v204, v154);
        v204 = *(void (**)(char *, void (*)(void)))(v195 + 8);
        v204(v165, v66);
        v204(v167, v66);
        uint64_t v53 = v195;
        v134(a6, v133);
        goto LABEL_23;
      }
      uint64_t v53 = v195;
      uint64_t v74 = *(void (**)(char *, void (*)(void)))(v195 + 8);
      v74(v165, v66);
      v74(v70, v66);
    }
    uint64_t v67 = v174;
  }
  uint64_t v75 = (uint64_t)v170;
  uint64_t v76 = v141;
  URL.init(string:)();
  uint64_t v77 = v177;
  uint64_t v78 = v190;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v177 + 48))(v75, 1, v190) == 1)
  {
    sub_10018B054(v137, v157);
    sub_10001729C(v75, &qword_10065C3C0);
    type metadata accessor for EnterpriseIngestTask.Error(0);
    sub_10027ED40(&qword_10065E098, (void (*)(uint64_t))type metadata accessor for EnterpriseIngestTask.Error);
    swift_allocError();
    void *v79 = v76;
    v79[1] = v67;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    sub_1001C3D08(v158, v145, v146);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001729C(v196, &qword_10065BCD0);
    sub_10027EE58((uint64_t)v178, (uint64_t (*)(void))type metadata accessor for EnterpriseApp);
    (*(void (**)(uint64_t, uint64_t))(v151 + 8))(v197, v152);
    uint64_t v80 = v154;
    uint64_t v81 = *(void (**)(uint64_t, uint64_t))(v153 + 8);
    v81((uint64_t)v204, v154);
    v81(a6, v80);
    goto LABEL_23;
  }
  uint64_t v82 = *(void (**)(void))(v77 + 32);
  uint64_t v83 = v173;
  ((void (*)(char *, uint64_t, uint64_t))v82)(v173, v75, v78);
  uint64_t v84 = (*(uint64_t (**)(char *, char *, uint64_t))(v77 + 16))(v172, v83, v78);
  v194 = v82;
  uint64_t v195 = v77 + 32;
  if (v157)
  {
    uint64_t v91 = v137;
    v202[19] = v137;
    v202[20] = v157;
    v202[21] = v138;
    v202[22] = v139;
    v202[23] = v140;
    v202[24] = v155;
    v202[25] = v156;
    uint64_t v92 = sub_10018A9D8(v84, v85, v86, v87, v88, v89, v90);
    uint64_t v187 = v93;
    v188 = (void *)v92;
    sub_10018B054(v91, v157);
  }
  else
  {
    uint64_t v187 = 0;
    v188 = 0;
  }
  v94 = v168;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v168)(v171, 1, 1, v78);
  v95 = v159;
  uint64_t v96 = v159[7];
  v189 = (void *)(v191 + v159[6]);
  *(void *)&long long v192 = v191 + v96;
  unint64_t v97 = (void *)(v191 + v159[9]);
  unint64_t v98 = (void *)(v191 + v159[10]);
  uint64_t v193 = v191 + v159[11];
  v94();
  uint64_t v99 = v191;
  uint64_t v100 = v191 + v95[14];
  *(void *)uint64_t v100 = 0;
  *(void *)(v100 + 8) = 0;
  *(unsigned char *)(v100 + 16) = -1;
  uint64_t v101 = (void *)(v99 + v95[15]);
  *uint64_t v101 = 0;
  v101[1] = 0;
  uint64_t v102 = v99;
  v194();
  *(void *)(v102 + v95[5]) = 0;
  uint64_t v103 = v189;
  void *v189 = 0;
  *((unsigned char *)v103 + 8) = 0;
  uint64_t v104 = v192;
  uint64_t v105 = v187;
  *(void *)long long v192 = v188;
  *(void *)(v104 + 8) = v105;
  *(unsigned char *)(v102 + v95[8]) = 0;
  uint64_t v106 = v158;
  *unint64_t v97 = v158;
  uint64_t v107 = v106;
  uint64_t v108 = v145;
  v97[1] = v145;
  uint64_t v109 = v108;
  uint64_t v110 = v146;
  uint64_t v111 = v147;
  v97[2] = v146;
  v97[3] = v111;
  uint64_t v112 = v149;
  v97[4] = v148;
  v97[5] = v112;
  *unint64_t v98 = 0;
  v98[1] = 0;
  v98[4] = 0;
  v98[5] = 0;
  v98[2] = 1;
  v98[3] = 0;
  uint64_t v113 = v109;
  uint64_t v114 = v110;
  sub_100254E0C(v107, v109, v110);
  sub_10027ED88(v171, v193);
  swift_bridgeObjectRelease();
  sub_1001C3D08(v158, v113, v114);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v115 = v191;
  *(unsigned char *)(v191 + v95[12]) = 0;
  uint64_t v116 = v115 + v95[13];
  *(_OWORD *)(v116 + 48) = 0u;
  *(_OWORD *)(v116 + 64) = 0u;
  *(_OWORD *)(v116 + 16) = 0u;
  *(_OWORD *)(v116 + 32) = 0u;
  *(_OWORD *)uint64_t v116 = 0u;
  *(void *)(v116 + 80) = 0;
  *(void *)(v116 + 88) = 0x8000000000000000;
  *(void *)(v116 + 96) = 0;
  *(void *)(v116 + 104) = 0;
  uint64_t v117 = v178;
  uint64_t v118 = v178[1];
  v119 = (void *)(a6 + v34[8]);
  void *v119 = *v178;
  v119[1] = v118;
  uint64_t v120 = v117[5];
  v121 = (void *)(a6 + v34[9]);
  void *v121 = v117[4];
  v121[1] = v120;
  uint64_t v122 = v117[3];
  v123 = (void *)(a6 + v34[29]);
  void *v123 = v117[2];
  v123[1] = v122;
  v124 = (void *)(a6 + v34[15]);
  void *v124 = 0;
  v124[1] = 0;
  sub_1000172F8(&qword_10065E0A0);
  unint64_t v125 = (*(unsigned __int8 *)(v160 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v160 + 80);
  uint64_t v126 = swift_allocObject();
  *(_OWORD *)(v126 + 16) = xmmword_1005A3EC0;
  uint64_t v127 = v126 + v125;
  uint64_t v128 = v191;
  sub_10027EDF0(v191, v127, (uint64_t (*)(void))type metadata accessor for AppPackageTemplate);
  *(void *)(a6 + v34[18]) = v126;
  (*(void (**)(char *, void, uint64_t))(v161 + 104))(v163, enum case for LogKey.Prefix.manifest(_:), v162);
  objc_allocWithZone((Class)type metadata accessor for LogKey());
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v129 = LogKey.init(prefix:)();
  sub_10001729C(v196, &qword_10065BCD0);
  sub_10027EE58((uint64_t)v117, (uint64_t (*)(void))type metadata accessor for EnterpriseApp);
  (*(void (**)(uint64_t, uint64_t))(v151 + 8))(v197, v152);
  (*(void (**)(void, uint64_t))(v153 + 8))(v204, v154);
  sub_10027EE58(v128, (uint64_t (*)(void))type metadata accessor for AppPackageTemplate);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v177 + 8))(v173, v190);
  *(void *)(a6 + v34[5]) = v129;
  uint64_t v131 = a6 + v34[6];
  *(void *)uint64_t v131 = 0;
  *(unsigned char *)(v131 + 8) = 1;
  *(unsigned char *)(a6 + v34[27]) = 0;
  v132 = (void *)(a6 + v34[11]);
  void *v132 = 0;
  v132[1] = 0;
  *(unsigned char *)(a6 + v34[25]) = 1;
  *(unsigned char *)(a6 + v34[28]) = 1;
  *(unsigned char *)(a6 + v34[26]) = 0;
  *(unsigned char *)(a6 + v34[12]) = 0;
  return result;
}

uint64_t sub_10027ECB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_10065BCD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for EnterpriseIngestTask.Error(uint64_t a1)
{
  return sub_10019B200(a1, qword_10065E1B8);
}

uint64_t sub_10027ED40(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10027ED88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_10065C3C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10027EDF0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10027EE58(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_10027EEB8(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    uint64_t v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    uint64_t v9 = a2[7];
    a1[6] = a2[6];
    a1[7] = v9;
    uint64_t v10 = (int *)type metadata accessor for EnterpriseApp();
    uint64_t v11 = v10[5];
    __dst = (char *)v4 + v11;
    uint64_t v26 = (char *)a2 + v11;
    uint64_t v12 = type metadata accessor for Platform();
    uint64_t v27 = *(void *)(v12 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13(v26, 1, v12))
    {
      uint64_t v14 = sub_1000172F8(&qword_10065BCD0);
      memcpy(__dst, v26, *(void *)(*(void *)(v14 - 8) + 64));
      uint64_t v15 = a3;
      uint64_t v16 = v27;
    }
    else
    {
      uint64_t v16 = v27;
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(__dst, v26, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v12);
      uint64_t v15 = a3;
    }
    *((unsigned char *)v4 + v10[6]) = *((unsigned char *)a2 + v10[6]);
    *((unsigned char *)v4 + v10[7]) = *((unsigned char *)a2 + v10[7]);
    *(void *)((char *)v4 + v10[8]) = *(void *)((char *)a2 + v10[8]);
    *(void *)((char *)v4 + v10[9]) = *(void *)((char *)a2 + v10[9]);
    uint64_t v18 = v15[5];
    uint64_t v19 = (char *)v4 + v18;
    uint64_t v20 = (char *)a2 + v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13(v20, 1, v12))
    {
      uint64_t v21 = sub_1000172F8(&qword_10065BCD0);
      memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v20, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v19, 0, 1, v12);
    }
    uint64_t v22 = v15[7];
    *(void *)((char *)v4 + v15[6]) = *(void *)((char *)a2 + v15[6]);
    uint64_t v23 = *(void **)((char *)a2 + v22);
    *(void *)((char *)v4 + v22) = v23;
    swift_retain();
    id v24 = v23;
  }
  return v4;
}

void sub_10027F190(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(type metadata accessor for EnterpriseApp() + 20);
  uint64_t v5 = type metadata accessor for Platform();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + *(int *)(a2 + 20);
  if (!v7(v8, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  }
  swift_release();
  uint64_t v9 = *(void **)(a1 + *(int *)(a2 + 28));
}

void *sub_10027F2F0(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  uint64_t v8 = a2[7];
  a1[6] = a2[6];
  a1[7] = v8;
  uint64_t v9 = (int *)type metadata accessor for EnterpriseApp();
  uint64_t v10 = v9[5];
  __dst = (char *)a1 + v10;
  uint64_t v23 = (char *)a2 + v10;
  uint64_t v11 = type metadata accessor for Platform();
  uint64_t v24 = *(void *)(v11 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12(v23, 1, v11))
  {
    uint64_t v13 = sub_1000172F8(&qword_10065BCD0);
    memcpy(__dst, v23, *(void *)(*(void *)(v13 - 8) + 64));
    uint64_t v14 = v24;
  }
  else
  {
    uint64_t v14 = v24;
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(__dst, v23, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v11);
  }
  *((unsigned char *)a1 + v9[6]) = *((unsigned char *)a2 + v9[6]);
  *((unsigned char *)a1 + v9[7]) = *((unsigned char *)a2 + v9[7]);
  *(void *)((char *)a1 + v9[8]) = *(void *)((char *)a2 + v9[8]);
  *(void *)((char *)a1 + v9[9]) = *(void *)((char *)a2 + v9[9]);
  uint64_t v15 = a3[5];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12(v17, 1, v11))
  {
    uint64_t v18 = sub_1000172F8(&qword_10065BCD0);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v17, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v16, 0, 1, v11);
  }
  uint64_t v19 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  uint64_t v20 = *(void **)((char *)a2 + v19);
  *(void *)((char *)a1 + v19) = v20;
  swift_retain();
  id v21 = v20;
  return a1;
}

void *sub_10027F574(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (int *)type metadata accessor for EnterpriseApp();
  uint64_t v6 = v5[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Platform();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_1000172F8(&qword_10065BCD0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  *((unsigned char *)a1 + v5[6]) = *((unsigned char *)a2 + v5[6]);
  *((unsigned char *)a1 + v5[7]) = *((unsigned char *)a2 + v5[7]);
  *(void *)((char *)a1 + v5[8]) = *(void *)((char *)a2 + v5[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + v5[9]) = *(void *)((char *)a2 + v5[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[5];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  int v18 = v11((char *)a1 + v15, 1, v9);
  int v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v16, v17, v9);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v20 = sub_1000172F8(&qword_10065BCD0);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v16, v17, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
LABEL_13:
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_retain();
  swift_release();
  uint64_t v21 = a3[7];
  uint64_t v22 = *(void **)((char *)a2 + v21);
  uint64_t v23 = *(void **)((char *)a1 + v21);
  *(void *)((char *)a1 + v21) = v22;
  id v24 = v22;

  return a1;
}

_OWORD *sub_10027F90C(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  long long v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = (int *)type metadata accessor for EnterpriseApp();
  uint64_t v9 = v8[5];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Platform();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v14(v11, 1, v12))
  {
    uint64_t v15 = sub_1000172F8(&qword_10065BCD0);
    memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  *((unsigned char *)a1 + v8[6]) = *((unsigned char *)a2 + v8[6]);
  *((unsigned char *)a1 + v8[7]) = *((unsigned char *)a2 + v8[7]);
  *(void *)((char *)a1 + v8[8]) = *(void *)((char *)a2 + v8[8]);
  *(void *)((char *)a1 + v8[9]) = *(void *)((char *)a2 + v8[9]);
  uint64_t v16 = a3[5];
  uint64_t v17 = (char *)a1 + v16;
  int v18 = (char *)a2 + v16;
  if (v14((char *)a2 + v16, 1, v12))
  {
    uint64_t v19 = sub_1000172F8(&qword_10065BCD0);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v18, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v17, 0, 1, v12);
  }
  uint64_t v20 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v20) = *(void *)((char *)a2 + v20);
  return a1;
}

void *sub_10027FB2C(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[7];
  a1[6] = a2[6];
  a1[7] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = (int *)type metadata accessor for EnterpriseApp();
  uint64_t v10 = v9[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Platform();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    uint64_t v18 = sub_1000172F8(&qword_10065BCD0);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v11, v12, v13);
LABEL_7:
  *((unsigned char *)a1 + v9[6]) = *((unsigned char *)a2 + v9[6]);
  *((unsigned char *)a1 + v9[7]) = *((unsigned char *)a2 + v9[7]);
  *(void *)((char *)a1 + v9[8]) = *(void *)((char *)a2 + v9[8]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + v9[9]) = *(void *)((char *)a2 + v9[9]);
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[5];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  int v22 = v15((char *)a1 + v19, 1, v13);
  int v23 = v15(v21, 1, v13);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v20, v21, v13);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v13);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    uint64_t v24 = sub_1000172F8(&qword_10065BCD0);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v20, v21, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v20, 0, 1, v13);
LABEL_13:
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_release();
  uint64_t v25 = a3[7];
  uint64_t v26 = *(void **)((char *)a1 + v25);
  *(void *)((char *)a1 + v25) = *(void *)((char *)a2 + v25);

  return a1;
}

uint64_t sub_10027FE68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027FE7C);
}

uint64_t sub_10027FE7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for EnterpriseApp();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_1000172F8(&qword_10065BCD0);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_10027FF94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027FFA8);
}

uint64_t sub_10027FFA8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for EnterpriseApp();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = sub_1000172F8(&qword_10065BCD0);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_1002800BC()
{
  type metadata accessor for EnterpriseApp();
  if (v0 <= 0x3F)
  {
    sub_1002801A0();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_1002801A0()
{
  if (!qword_10065E110)
  {
    type metadata accessor for Platform();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10065E110);
    }
  }
}

uint64_t *sub_1002801F8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v10 = type metadata accessor for Platform();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
  }
  return a1;
}

uint64_t sub_10028031C(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    uint64_t v3 = type metadata accessor for Platform();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  else if (result == 1)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_1002803C0(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v8 = type metadata accessor for Platform();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_1002804A0(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10027EE58((uint64_t)a1, type metadata accessor for EnterpriseIngestTask.Error);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v7 = type metadata accessor for Platform();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void *sub_1002805AC(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v6 = type metadata accessor for Platform();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_100280664(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10027EE58((uint64_t)a1, type metadata accessor for EnterpriseIngestTask.Error);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v6 = type metadata accessor for Platform();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100280740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_100280768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_100280794()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1002807A4()
{
  uint64_t result = type metadata accessor for Platform();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_100280844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  sub_1000172F8(&qword_10065BD70);
  v4[9] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URL();
  v4[10] = v6;
  v4[11] = *(void *)(v6 - 8);
  v4[12] = swift_task_alloc();
  return _swift_task_switch(sub_100280994, 0, 0);
}

uint64_t sub_100280994()
{
  unint64_t v1 = (void *)v0[5];
  (*(void (**)(void, void, void))(v0[11] + 16))(v0[12], v0[3], v0[10]);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10065E200 + dword_10065E200);
  swift_retain();
  id v2 = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[13] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100280A78;
  uint64_t v4 = v0[12];
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  return v8(v4, v5, v6);
}

uint64_t sub_100280A78(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 112) = a1;
  *(void *)(v3 + 120) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100280E8C;
  }
  else {
    uint64_t v4 = sub_100280B8C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100280B8C()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = type metadata accessor for EnterpriseApp();
  uint64_t v4 = *(void *)(v3 - 8);
  if (v2)
  {
    sub_100285A30(v1+ ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80)), *(void *)(v0 + 72));
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 1;
  }
  uint64_t v6 = *(void *)(v0 + 72);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v6, v5, 1, v3);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v3) == 1)
  {
    sub_10001729C(*(void *)(v0 + 72), &qword_10065BD70);
    static Logger.ddm.getter();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Enterprise manifest invalid: No item found", v9, 2u);
      swift_slowDealloc();
    }
    uint64_t v11 = *(void *)(v0 + 56);
    uint64_t v10 = *(void *)(v0 + 64);
    uint64_t v13 = *(void **)(v0 + 40);
    uint64_t v12 = *(void *)(v0 + 48);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    type metadata accessor for InternalError();
    sub_1002880BC((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    swift_release();
    (*(void (**)(void, void))(*(void *)(v0 + 88) + 8))(*(void *)(v0 + 24), *(void *)(v0 + 80));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 88);
    uint64_t v17 = *(void *)(v0 + 72);
    uint64_t v16 = *(void *)(v0 + 80);
    uint64_t v19 = *(void *)(v0 + 16);
    uint64_t v18 = *(void *)(v0 + 24);

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v18, v16);
    sub_100285A94(v17, v19);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v14();
}

uint64_t sub_100280E8C()
{
  swift_release();
  (*(void (**)(void, void))(*(void *)(v0 + 88) + 8))(*(void *)(v0 + 24), *(void *)(v0 + 80));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100280F38@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v206 = (long long *)a1;
  uint64_t v203 = a3;
  uint64_t v200 = 0;
  uint64_t v5 = sub_1000172F8(&qword_10065BCD0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v174 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Platform();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v174 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v174 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v174 - v16;
  uint64_t v18 = type metadata accessor for EnterpriseApp();
  sub_10027ECB8(v3 + *(int *)(v18 + 20), (uint64_t)v7);
  int v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  unint64_t v202 = a2;
  uint64_t v204 = v18;
  uint64_t v205 = v3;
  if (v19 == 1)
  {
    sub_10001729C((uint64_t)v7, &qword_10065BCD0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v17, v7, v8);
    static Platform.iOS.getter();
    char v20 = static Platform.== infix(_:_:)();
    uint64_t v21 = *(void (**)(char *, uint64_t))(v9 + 8);
    v21(v15, v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v17, v8);
    if (v20)
    {
      v21(v12, v8);
      v21(v17, v8);
    }
    else
    {
      int v22 = sub_100432758();
      __chkstk_darwin(v22);
      *(&v174 - 2) = (uint64_t)v12;
      uint64_t v23 = v200;
      BOOL v24 = sub_1002824D0((uint64_t (*)(char *))sub_1002859A0, (uint64_t)(&v174 - 4), (uint64_t)v22);
      swift_bridgeObjectRelease();
      v21(v12, v8);
      v21(v17, v8);
      if (!v24) {
        goto LABEL_60;
      }
      uint64_t v200 = v23;
    }
    LOBYTE(a2) = v202;
    uint64_t v18 = v204;
    uint64_t v3 = v205;
  }
  uint64_t v25 = *(void *)(v3 + *(int *)(v18 + 36));
  if (!v25)
  {
LABEL_43:
    uint64_t v71 = *(void *)(v205 + *(int *)(v204 + 32));
    uint64_t v72 = *(void *)(v71 + 16);
    if (v72)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v73 = v71 + 64;
      uint64_t v212 = a2;
      v208 = (uint64_t (*)())"messages-display-image";
      v209 = "json";
      v206 = (long long *)v71;
      unint64_t v207 = (unint64_t)"asset-pack-manifest";
      while (1)
      {
        uint64_t v74 = *(char **)(v73 - 32);
        uint64_t v75 = *(void *)(v73 - 24);
        uint64_t v76 = (const char *)*(unsigned __int8 *)(v73 - 16);
        uint64_t v77 = *(void *)(v73 - 8);
        uint64_t v78 = *(void *)v73;
        uint64_t v79 = *(void *)(v73 + 8);
        uint64_t v80 = *(void *)(v73 + 16);
        uint64_t v81 = *(void *)(v73 + 24);
        long long v82 = *(_OWORD *)(v73 + 32);
        unint64_t v83 = 0xEF6567616D692D65;
        uint64_t v84 = *(void *)(v73 + 48);
        unint64_t v85 = *(void *)(v73 + 56);
        unint64_t v86 = 0x7A69732D6C6C7566;
        unint64_t v210 = (unint64_t)v76;
        unint64_t v211 = (unint64_t)v74;
        switch((unint64_t)v76)
        {
          case 1uLL:
            unint64_t v86 = 0xD000000000000016;
            unint64_t v83 = (unint64_t)v209 | 0x8000000000000000;
            break;
          case 2uLL:
            unint64_t v86 = 0xD000000000000013;
            unint64_t v83 = (unint64_t)v208 | 0x8000000000000000;
            break;
          case 3uLL:
            unint64_t v83 = v207 | 0x8000000000000000;
            unint64_t v86 = 0xD000000000000010;
            break;
          case 4uLL:
            unint64_t v86 = 0x2D79616C70736964;
            unint64_t v83 = 0xED00006567616D69;
            break;
          default:
            break;
        }
        unint64_t v87 = 0x7A69732D6C6C7566;
        unint64_t v88 = 0xEF6567616D692D65;
        switch(v212)
        {
          case 1:
            unint64_t v87 = 0xD000000000000016;
            unint64_t v88 = (unint64_t)v209 | 0x8000000000000000;
            break;
          case 2:
            unint64_t v87 = 0xD000000000000013;
            unint64_t v88 = (unint64_t)v208 | 0x8000000000000000;
            break;
          case 3:
            unint64_t v88 = v207 | 0x8000000000000000;
            unint64_t v87 = 0xD000000000000010;
            break;
          case 4:
            unint64_t v87 = 0x2D79616C70736964;
            unint64_t v88 = 0xED00006567616D69;
            break;
          default:
            break;
        }
        long long v219 = v82;
        if (v86 == v87 && v83 == v88)
        {
          uint64_t v91 = v75;
          swift_bridgeObjectRetain();
          sub_100254E0C(v77, v78, v79);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease_n();
          goto LABEL_63;
        }
        uint64_t v213 = v72;
        v216 = (void *(*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))v83;
        unint64_t v218 = v88;
        uint64_t v89 = v75;
        LODWORD(v217) = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRetain();
        unint64_t v215 = v84;
        sub_100254E0C(v77, v78, v79);
        unint64_t v214 = v85;
        unint64_t v90 = v215;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v217) {
          break;
        }
        swift_bridgeObjectRelease();
        sub_1001C3D08(v77, v78, v79);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v73 += 96;
        uint64_t v72 = v213 - 1;
        if (v213 == 1)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_60;
        }
      }
      uint64_t v84 = v90;
      unint64_t v85 = v214;
      uint64_t v91 = v89;
LABEL_63:
      swift_bridgeObjectRelease_n();
      long long v233 = 0u;
      long long v234 = 0u;
      long long v232 = 0u;
      uint64_t v235 = 0;
      unint64_t v236 = v211;
      uint64_t v237 = v91;
      char v238 = v210;
      uint64_t v239 = v77;
      uint64_t v240 = v78;
      uint64_t v241 = v79;
      uint64_t v242 = v80;
      uint64_t v243 = v81;
      long long v244 = v219;
      uint64_t v245 = v84;
      unint64_t v246 = v85;
      nullsub_1(&v232, v92, v93, v94, v95, v96, v97);
      goto LABEL_64;
    }
LABEL_60:
    sub_100284CE4((uint64_t)&v232);
LABEL_64:
    unint64_t v98 = &v232;
    goto LABEL_65;
  }
  uint64_t v26 = swift_allocObject();
  *(unsigned char *)(v26 + 16) = a2;
  uint64_t v27 = (_OWORD *)swift_allocObject();
  uint64_t v28 = v206;
  long long v29 = v206[5];
  v27[5] = v206[4];
  v27[6] = v29;
  *(_OWORD *)((char *)v27 + 111) = *(long long *)((char *)v28 + 95);
  long long v30 = *v28;
  long long v31 = v28[1];
  v27[1] = *v28;
  v27[2] = v31;
  long long v32 = v28[3];
  v27[3] = v28[2];
  v27[4] = v32;
  long long v247 = v30;
  uint64_t v33 = *(void *(**)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))(v25 + 16);
  sub_10018AB28((uint64_t)v28);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10018AB28((uint64_t)v28);
  swift_bridgeObjectRetain();
  uint64_t v199 = v26;
  swift_retain();
  sub_10018B0F0((uint64_t)&v247);
  v198 = v27;
  swift_retain();
  if (!v33)
  {
    uint64_t v70 = 0;
    uint64_t v213 = 0;
LABEL_42:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    sub_100284E88((uint64_t)v70);
    swift_release();
    swift_release();
    sub_10018AB94((uint64_t)v206);
    sub_10018AFE0((uint64_t)&v247);
    swift_release();
    swift_bridgeObjectRelease();
    LOBYTE(a2) = v202;
    goto LABEL_43;
  }
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  unint64_t v36 = 0;
  uint64_t v213 = 0;
  uint64_t v37 = 0;
  uint64_t v197 = (void *(*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))((char *)v33 - 1);
  uint64_t v38 = 32;
  unint64_t v215 = a2;
  unint64_t v211 = (unint64_t)"json";
  unint64_t v210 = (unint64_t)"messages-display-image";
  v209 = "asset-pack-manifest";
  *(void *)&long long v219 = v25;
  uint64_t v196 = 32;
  while (1)
  {
    unint64_t v214 = v36;
    uint64_t v39 = (uint64_t)v37;
    unint64_t v218 = (unint64_t)v35;
    uint64_t v40 = v38 + 96 * (void)v34;
    uint64_t v41 = (void *(*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))v34;
    while (1)
    {
      if ((unint64_t)v41 >= *(void *)(v25 + 16))
      {
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
        JUMPOUT(0x100282458);
      }
      long long v42 = *(_OWORD *)(v25 + v40 + 16);
      long long v254 = *(_OWORD *)(v25 + v40);
      long long v255 = v42;
      long long v43 = *(_OWORD *)(v25 + v40 + 32);
      long long v44 = *(_OWORD *)(v25 + v40 + 48);
      long long v45 = *(_OWORD *)(v25 + v40 + 80);
      long long v258 = *(_OWORD *)(v25 + v40 + 64);
      long long v259 = v45;
      long long v256 = v43;
      long long v257 = v44;
      uint64_t v46 = (void *(*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))((char *)v41 + 1);
      unint64_t v47 = 0xEF6567616D692D65;
      unint64_t v48 = 0x7A69732D6C6C7566;
      switch((char)v255)
      {
        case 1:
          unint64_t v48 = 0xD000000000000016;
          unint64_t v47 = v211 | 0x8000000000000000;
          break;
        case 2:
          unint64_t v48 = 0xD000000000000013;
          unint64_t v47 = v210 | 0x8000000000000000;
          break;
        case 3:
          unint64_t v47 = (unint64_t)v209 | 0x8000000000000000;
          unint64_t v48 = 0xD000000000000010;
          break;
        case 4:
          unint64_t v48 = 0x2D79616C70736964;
          unint64_t v47 = 0xED00006567616D69;
          break;
        default:
          break;
      }
      unint64_t v49 = 0x7A69732D6C6C7566;
      unint64_t v50 = 0xEF6567616D692D65;
      switch(v215)
      {
        case 1uLL:
          unint64_t v49 = 0xD000000000000016;
          unint64_t v50 = v211 | 0x8000000000000000;
          break;
        case 2uLL:
          unint64_t v49 = 0xD000000000000013;
          unint64_t v50 = v210 | 0x8000000000000000;
          break;
        case 3uLL:
          unint64_t v50 = (unint64_t)v209 | 0x8000000000000000;
          unint64_t v49 = 0xD000000000000010;
          break;
        case 4uLL:
          unint64_t v49 = 0x2D79616C70736964;
          unint64_t v50 = 0xED00006567616D69;
          break;
        default:
          break;
      }
      v216 = v41;
      if (v48 == v49 && v47 == v50) {
        break;
      }
      char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
      sub_100284D18(&v254);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v51) {
        goto LABEL_29;
      }
      sub_100284DA0(&v254);
      v40 += 96;
      uint64_t v41 = v46;
      uint64_t v25 = v219;
      if (v33 == v46)
      {
        uint64_t v70 = (void *)v39;
        goto LABEL_42;
      }
    }
    sub_100284D18(&v254);
    swift_bridgeObjectRelease_n();
LABEL_29:
    uint64_t v70 = *((void *)&v259 + 1) ? (void *)*((void *)&v259 + 1) : _swiftEmptyArrayStorage;
    uint64_t v52 = (_OWORD *)swift_allocObject();
    uint64_t v53 = v206;
    long long v54 = v206[5];
    v52[5] = v206[4];
    v52[6] = v54;
    *(_OWORD *)((char *)v52 + 111) = *(long long *)((char *)v53 + 95);
    long long v55 = v53[1];
    v52[1] = *v53;
    v52[2] = v55;
    long long v56 = v53[3];
    v52[3] = v53[2];
    v52[4] = v56;
    uint64_t v57 = swift_allocObject();
    long long v58 = v257;
    *(_OWORD *)(v57 + 48) = v256;
    *(_OWORD *)(v57 + 64) = v58;
    long long v59 = v259;
    *(_OWORD *)(v57 + 80) = v258;
    *(_OWORD *)(v57 + 96) = v59;
    long long v60 = v255;
    *(_OWORD *)(v57 + 16) = v254;
    *(_OWORD *)(v57 + 32) = v60;
    sub_10018AB28((uint64_t)v53);
    swift_bridgeObjectRetain();
    sub_100284E88(v39);
    uint64_t v213 = v70[2];
    unint64_t v207 = (unint64_t)v52;
    v201 = (_OWORD *)v57;
    if (v213) {
      break;
    }
    uint64_t v25 = v219;
LABEL_39:
    uint64_t v34 = (char *)v216 + 1;
    uint64_t v35 = v201;
    unint64_t v36 = v207;
    uint64_t v37 = v70;
    uint64_t v38 = v196;
    if (v197 == v216) {
      goto LABEL_42;
    }
  }
  unint64_t v61 = 0;
  v208 = (uint64_t (*)())(v52 + 1);
  uint64_t v195 = (void *)(v57 + 16);
  uint64_t v62 = v70 + 5;
  uint64_t v217 = (uint64_t)v70;
  while (1)
  {
    if (v61 >= v70[2]) {
      goto LABEL_134;
    }
    uint64_t v63 = *(v62 - 1);
    uint64_t v64 = (void *(*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))*v62;
    unint64_t v66 = v62[1];
    uint64_t v65 = v62[2];
    uint64_t v67 = v62[3];
    uint64_t v68 = v62[4];
    unint64_t v218 = v61 + 1;
    uint64_t v69 = v62[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v212 = v63;
    *(void *)&long long v260 = v63;
    *((void *)&v260 + 1) = v64;
    unint64_t v214 = v66;
    *(void *)&long long v261 = v66;
    *((void *)&v261 + 1) = v65;
    *(void *)&long long v262 = v67;
    *((void *)&v262 + 1) = v68;
    *(void *)&long long v263 = v69;
    if (sub_1002A4DF4(v208)) {
      break;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v62 += 7;
    unint64_t v61 = v218;
    uint64_t v25 = v219;
    uint64_t v70 = (void *)v217;
    if (v213 == v218) {
      goto LABEL_39;
    }
  }
  uint64_t v194 = v67;
  uint64_t v101 = (void *(*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))*((void *)&v247 + 1);
  uint64_t v100 = v247;
  unint64_t v193 = *((void *)v201 + 2);
  uint64_t v102 = *((void *)v201 + 3);
  uint64_t v191 = v68;
  uint64_t v192 = v102;
  int v190 = *((unsigned __int8 *)v201 + 32);
  uint64_t v103 = *((void *)v201 + 5);
  uint64_t v188 = *((void *)v201 + 6);
  uint64_t v189 = v103;
  uint64_t v104 = *((void *)v201 + 7);
  uint64_t v186 = *((void *)v201 + 8);
  uint64_t v187 = v104;
  uint64_t v105 = *((void *)v201 + 9);
  uint64_t v184 = *((void *)v201 + 10);
  uint64_t v185 = v105;
  uint64_t v106 = *((void *)v201 + 11);
  uint64_t v182 = *((void *)v201 + 12);
  uint64_t v183 = v106;
  unint64_t v181 = *((void *)v201 + 13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100284D18(v195);
  uint64_t v196 = v69;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v108 = v218;
  uint64_t v107 = v219;
  uint64_t v195 = (void *)(v219 + 32);
  uint64_t v109 = v217;
  unint64_t v215 = (unint64_t)v216 + 1;
  uint64_t v197 = sub_100284E80;
  v208 = sub_100284E2C;
  uint64_t v213 = v202;
  uint64_t v110 = v65;
  uint64_t v111 = v212;
  uint64_t v112 = v64;
  int64_t v113 = v214;
  *(void *)&long long v179 = v101;
  *((void *)&v179 + 1) = v100;
LABEL_67:
  BOOL v114 = v111 == v100 && v112 == v101;
  int v115 = v114;
  int v178 = v115;
  v216 = v112;
  unint64_t v214 = v113;
  uint64_t v180 = v110;
  uint64_t v212 = v111;
LABEL_74:
  *(void *)&long long v232 = v111;
  *((void *)&v232 + 1) = v112;
  *(void *)&long long v233 = v113;
  *((void *)&v233 + 1) = v110;
  *(void *)&long long v234 = v194;
  *((void *)&v234 + 1) = v191;
  uint64_t v235 = v196;
  unint64_t v236 = v193;
  uint64_t v237 = v192;
  char v238 = v190;
  uint64_t v239 = v189;
  uint64_t v240 = v188;
  uint64_t v241 = v187;
  uint64_t v242 = v186;
  uint64_t v243 = v185;
  *(void *)&long long v244 = v184;
  *((void *)&v244 + 1) = v183;
  uint64_t v245 = v182;
  unint64_t v202 = v108;
  unint64_t v246 = v181;
  uint64_t v116 = v201;
  while (1)
  {
    uint64_t v217 = v109;
    v201 = v116;
    if (v109)
    {
      unint64_t v117 = v202;
      unint64_t v218 = *(void *)(v109 + 16);
      if (v202 != v218)
      {
        uint64_t v118 = (uint64_t *)(v109 + 56 * v202 + 40);
        while (1)
        {
          if (v117 >= *(void *)(v109 + 16)) {
            goto LABEL_137;
          }
          uint64_t v119 = *v118;
          uint64_t v121 = v118[1];
          uint64_t v120 = v118[2];
          uint64_t v123 = v118[3];
          uint64_t v122 = v118[4];
          uint64_t v124 = v118[5];
          unint64_t v125 = v117 + 1;
          uint64_t v204 = *(v118 - 1);
          uint64_t v205 = v120;
          v221[0] = v204;
          v221[1] = v119;
          v221[2] = v121;
          v221[3] = v120;
          v221[4] = v123;
          v221[5] = v122;
          v221[6] = v124;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (((uint64_t (*)(void *))v208)(v221)) {
            break;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v118 += 7;
          ++v117;
          uint64_t v107 = v219;
          BOOL v114 = v218 == v125;
          uint64_t v112 = v216;
          uint64_t v109 = v217;
          int64_t v113 = v214;
          if (v114)
          {
            unint64_t v202 = v218;
            goto LABEL_83;
          }
        }
        unint64_t v218 = v117 + 1;
        unint64_t v202 = v117;
        v220[0] = v204;
        v220[1] = v119;
        v220[2] = v121;
        v220[3] = v205;
        v220[4] = v123;
        v220[5] = v122;
        v220[6] = v124;
        ((void (*)(long long *__return_ptr, void *))v197)(&v222, v220);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        long long v266 = v228;
        long long v267 = v229;
        long long v268 = v230;
        long long v262 = v224;
        long long v263 = v225;
        unint64_t v269 = v231;
        long long v264 = v226;
        long long v265 = v227;
        long long v260 = v222;
        long long v261 = v223;
        uint64_t v153 = *((void *)&v223 + 1);
        uint64_t v152 = v223;
        uint64_t v204 = *((void *)&v222 + 1);
        uint64_t v205 = v224;
        uint64_t v154 = v225;
        uint64_t v176 = *((void *)&v224 + 1);
        uint64_t v177 = v222;
        if (__PAIR128__(v222, *((unint64_t *)&v222 + 1)) == v179)
        {
          uint64_t v107 = v219;
          uint64_t v155 = v216;
          uint64_t v109 = v217;
          int64_t v113 = v214;
          uint64_t v110 = v180;
          uint64_t v111 = v212;
          if ((v178 & 1) == 0)
          {
            unint64_t v156 = v214;
            uint64_t v157 = v216;
            char v158 = _stringCompareWithSmolCheck(_:_:expecting:)();
            uint64_t v155 = v157;
            int64_t v113 = v156;
            if ((v158 & 1) == 0)
            {
              uint64_t v177 = *((void *)&v179 + 1);
              uint64_t v204 = v179;
              goto LABEL_131;
            }
          }
        }
        else
        {
          uint64_t v175 = v223;
          uint64_t v159 = v225;
          uint64_t v160 = *((void *)&v223 + 1);
          char v161 = _stringCompareWithSmolCheck(_:_:expecting:)();
          char v162 = v161;
          uint64_t v163 = v219;
          uint64_t v155 = v216;
          uint64_t v109 = v217;
          int64_t v113 = v214;
          uint64_t v110 = v180;
          uint64_t v111 = v212;
          if (v178)
          {
            uint64_t v107 = v219;
            uint64_t v153 = v160;
            uint64_t v154 = v159;
            uint64_t v152 = v175;
            if ((v161 & 1) == 0) {
              goto LABEL_129;
            }
          }
          else
          {
            uint64_t v164 = v216;
            char v165 = _stringCompareWithSmolCheck(_:_:expecting:)();
            uint64_t v107 = v163;
            uint64_t v155 = v164;
            if (v162)
            {
              int64_t v113 = v214;
              uint64_t v153 = v160;
              uint64_t v154 = v159;
              uint64_t v152 = v175;
              if ((v165 & 1) == 0) {
                goto LABEL_131;
              }
            }
            else
            {
              int64_t v113 = v214;
              uint64_t v153 = v160;
              uint64_t v154 = v159;
              uint64_t v152 = v175;
              if (v165) {
                goto LABEL_129;
              }
            }
          }
        }
        if (!v154 || !v196) {
          goto LABEL_131;
        }
        if (v113 == v152)
        {
          if (v110 == v153)
          {
            if (v194 < v205)
            {
              uint64_t v152 = v113;
              uint64_t v153 = v110;
              goto LABEL_131;
            }
          }
          else if (v110 < v153)
          {
            uint64_t v152 = v113;
LABEL_131:
            sub_100284F94(&v232);
            uint64_t v192 = v264;
            unint64_t v193 = *((void *)&v263 + 1);
            int v190 = BYTE8(v264);
            uint64_t v188 = *((void *)&v265 + 1);
            uint64_t v189 = v265;
            uint64_t v186 = *((void *)&v266 + 1);
            uint64_t v187 = v266;
            uint64_t v110 = v153;
            unint64_t v108 = v202 + 1;
            uint64_t v184 = *((void *)&v267 + 1);
            uint64_t v185 = v267;
            int64_t v113 = v152;
            uint64_t v182 = *((void *)&v268 + 1);
            uint64_t v183 = v268;
            uint64_t v112 = (void *(*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))v204;
            uint64_t v194 = v205;
            uint64_t v111 = v177;
            uint64_t v191 = v176;
            uint64_t v196 = v154;
            unint64_t v181 = v269;
            uint64_t v100 = *((void *)&v179 + 1);
            uint64_t v101 = (void *(*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))v179;
            goto LABEL_67;
          }
        }
        else if (v113 < v152)
        {
          goto LABEL_131;
        }
LABEL_129:
        uint64_t v166 = v155;
        sub_100284F94(&v260);
        uint64_t v112 = v166;
        unint64_t v108 = v218;
        goto LABEL_74;
      }
    }
LABEL_83:
    uint64_t v126 = *(void *)(v107 + 16);
    if (v215 == v126) {
      break;
    }
    unint64_t v127 = v215;
    uint64_t v128 = (long long *)&v195[12 * v215];
    while (2)
    {
      if ((v215 & 0x8000000000000000) != 0) {
        goto LABEL_135;
      }
      if (v127 >= *(void *)(v107 + 16)) {
        goto LABEL_136;
      }
      long long v129 = v128[1];
      long long v248 = *v128;
      long long v249 = v129;
      long long v130 = v128[2];
      long long v131 = v128[3];
      long long v132 = v128[5];
      long long v252 = v128[4];
      long long v253 = v132;
      long long v250 = v130;
      long long v251 = v131;
      unint64_t v133 = v127 + 1;
      unint64_t v134 = 0xEF6567616D692D65;
      unint64_t v135 = 0x7A69732D6C6C7566;
      switch((char)v249)
      {
        case 1:
          unint64_t v135 = 0xD000000000000016;
          unint64_t v134 = v211 | 0x8000000000000000;
          break;
        case 2:
          unint64_t v135 = 0xD000000000000013;
          unint64_t v134 = v210 | 0x8000000000000000;
          break;
        case 3:
          unint64_t v134 = (unint64_t)v209 | 0x8000000000000000;
          unint64_t v135 = 0xD000000000000010;
          break;
        case 4:
          unint64_t v135 = 0x2D79616C70736964;
          unint64_t v134 = 0xED00006567616D69;
          break;
        default:
          break;
      }
      unint64_t v136 = 0x7A69732D6C6C7566;
      unint64_t v137 = 0xEF6567616D692D65;
      switch(v213)
      {
        case 1:
          unint64_t v138 = 0xD000000000000016;
          unint64_t v139 = v211;
          goto LABEL_95;
        case 2:
          unint64_t v138 = 0xD000000000000013;
          unint64_t v139 = v210;
LABEL_95:
          unint64_t v137 = v139 | 0x8000000000000000;
          if (v135 != v138) {
            goto LABEL_100;
          }
          goto LABEL_99;
        case 3:
          unint64_t v137 = (unint64_t)v209 | 0x8000000000000000;
          unint64_t v136 = 0xD000000000000010;
          goto LABEL_98;
        case 4:
          unint64_t v137 = 0xED00006567616D69;
          if (v135 != 0x2D79616C70736964) {
            goto LABEL_100;
          }
          goto LABEL_99;
        default:
LABEL_98:
          if (v135 != v136) {
            goto LABEL_100;
          }
LABEL_99:
          if (v134 != v137)
          {
LABEL_100:
            char v140 = _stringCompareWithSmolCheck(_:_:expecting:)();
            sub_100284D18(&v248);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v140) {
              goto LABEL_106;
            }
            sub_100284DA0(&v248);
            v128 += 6;
            ++v127;
            uint64_t v112 = v216;
            if (v126 == v133) {
              goto LABEL_132;
            }
            continue;
          }
          sub_100284D18(&v248);
          swift_bridgeObjectRelease_n();
LABEL_106:
          uint64_t v141 = (void *)*((void *)&v253 + 1);
          v142 = (_OWORD *)swift_allocObject();
          uint64_t v143 = v206;
          long long v144 = v206[5];
          v142[5] = v206[4];
          v142[6] = v144;
          *(_OWORD *)((char *)v142 + 111) = *(long long *)((char *)v143 + 95);
          long long v145 = v143[1];
          v142[1] = *v143;
          v142[2] = v145;
          long long v146 = v143[3];
          v142[3] = v143[2];
          v142[4] = v146;
          uint64_t v116 = (_OWORD *)swift_allocObject();
          long long v147 = v251;
          v116[3] = v250;
          v116[4] = v147;
          long long v148 = v253;
          v116[5] = v252;
          v116[6] = v148;
          long long v149 = v249;
          v116[1] = v248;
          v116[2] = v149;
          uint64_t v150 = (uint64_t)v143;
          int64_t v113 = v214;
          sub_10018AB28(v150);
          swift_bridgeObjectRetain();
          sub_100284E88(v217);
          unint64_t v202 = 0;
          uint64_t v151 = _swiftEmptyArrayStorage;
          if (v141) {
            uint64_t v151 = v141;
          }
          unint64_t v215 = v127 + 1;
          uint64_t v109 = (uint64_t)v151;
          uint64_t v197 = sub_1002894EC;
          unint64_t v207 = (unint64_t)v142;
          v208 = sub_1002894F0;
          uint64_t v112 = v216;
          break;
      }
      break;
    }
  }
LABEL_132:
  v167 = v112;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_100284E88(v217);
  swift_release();
  swift_release();
  sub_10018AB94((uint64_t)v206);
  sub_10018AFE0((uint64_t)&v247);
  swift_release();
  swift_bridgeObjectRelease();
  *(void *)&long long v222 = v212;
  *((void *)&v222 + 1) = v167;
  *(void *)&long long v223 = v113;
  *((void *)&v223 + 1) = v180;
  *(void *)&long long v224 = v194;
  *((void *)&v224 + 1) = v191;
  *(void *)&long long v225 = v196;
  *((void *)&v225 + 1) = v193;
  *(void *)&long long v226 = v192;
  BYTE8(v226) = v190;
  *(void *)&long long v227 = v189;
  *((void *)&v227 + 1) = v188;
  *(void *)&long long v228 = v187;
  *((void *)&v228 + 1) = v186;
  *(void *)&long long v229 = v185;
  *((void *)&v229 + 1) = v184;
  *(void *)&long long v230 = v183;
  *((void *)&v230 + 1) = v182;
  unint64_t v231 = v181;
  nullsub_1(&v222, v168, v169, v170, v171, v172, v173);
  unint64_t v98 = &v222;
LABEL_65:
  sub_10001733C((uint64_t)v98, (uint64_t)&v260, &qword_10065BCD8);
  return sub_10001733C((uint64_t)&v260, v203, &qword_10065BCD8);
}

BOOL sub_1002824D0(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v38 = a1;
  uint64_t v39 = type metadata accessor for Platform();
  uint64_t v6 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000172F8(&qword_10065BCD0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a3 + 16);
  if (v12)
  {
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v13 = v6 + 16;
    uint64_t v37 = v14;
    uint64_t v15 = a3 + ((*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64));
    uint64_t v16 = *(void *)(v13 + 56);
    uint64_t v34 = v8;
    uint64_t v35 = (uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 32);
    uint64_t v31 = v16;
    long long v32 = (void (**)(char *))(v13 + 16);
    uint64_t v33 = (void (**)(char *, uint64_t))(v13 - 8);
    v29[2] = a3;
    swift_bridgeObjectRetain();
    unint64_t v36 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 40);
    v29[1] = (v13 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    while (1)
    {
      uint64_t v17 = v39;
      uint64_t v18 = v13;
      v37(v11, v15, v39);
      int v19 = *v36;
      (*v36)(v11, 0, 1, v17);
      int v20 = (*v35)(v11, 1, v17);
      BOOL v21 = v20 != 1;
      if (v20 == 1) {
        break;
      }
      long long v30 = v19;
      int v22 = v11;
      uint64_t v23 = v34;
      BOOL v24 = v22;
      (*v32)(v34);
      char v25 = v38(v23);
      if (v4)
      {
        (*v33)(v23, v17);
        swift_bridgeObjectRelease();
        return v21;
      }
      char v26 = v25;
      (*v33)(v23, v17);
      if (v26) {
        break;
      }
      v15 += v31;
      --v12;
      uint64_t v4 = 0;
      uint64_t v13 = v18;
      uint64_t v11 = v24;
      if (!v12)
      {
        v30(v24, 1, 1, v39);
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    swift_bridgeObjectRetain();
    v27(v11, 1, 1, v39);
LABEL_9:
    BOOL v21 = 0;
  }
  swift_bridgeObjectRelease();
  return v21;
}

unint64_t sub_1002827B0(char a1)
{
  unint64_t result = 0x7A69732D6C6C7566;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000016;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0x2D79616C70736964;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100282884(unsigned __int8 *a1, char *a2)
{
  return sub_10051CF44(*a1, *a2);
}

Swift::Int sub_100282890()
{
  return sub_10040F270();
}

uint64_t sub_100282898()
{
  return sub_100449D58();
}

Swift::Int sub_1002828A0()
{
  return sub_10044AD44();
}

unint64_t sub_1002828A8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_100638170;
  unint64_t result = sub_1002879F8(*a1, v3);
  *a2 = result;
  return result;
}

unint64_t sub_1002828E0@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1002827B0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10028290C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10028296C(char *a1, char *a2)
{
  return sub_10051CE9C(*a1, *a2);
}

Swift::Int sub_100282978()
{
  return Hasher._finalize()();
}

uint64_t sub_1002829FC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100282A6C()
{
  return Hasher._finalize()();
}

uint64_t sub_100282AEC@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100638208, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_100282B4C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x656369766564;
  if (*v1) {
    uint64_t v2 = 0x69737265762D736FLL;
  }
  unint64_t v3 = 0xE600000000000000;
  if (*v1) {
    unint64_t v3 = 0xEA00000000006E6FLL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100282B8C()
{
  if (*v0) {
    return 0x69737265762D736FLL;
  }
  else {
    return 0x656369766564;
  }
}

uint64_t sub_100282BC8@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100638208, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_100282C2C(uint64_t a1)
{
  unint64_t v2 = sub_1002882E4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100282C68(uint64_t a1)
{
  unint64_t v2 = sub_1002882E4();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100282CA4@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100286F6C(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_100282CF4(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  return sub_100284C44(v5, v7) & 1;
}

uint64_t sub_100282D50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_10018A9D8(a1, a2, a3, a4, a5, a6, a7);
}

unint64_t sub_100282D94(char a1)
{
  unint64_t result = 0x4449656C646E7562;
  switch(a1)
  {
    case 1:
      unint64_t result = 1684957547;
      break;
    case 2:
      unint64_t result = 7107189;
      break;
    case 3:
      unint64_t result = 3499117;
      break;
    case 4:
      unint64_t result = 1932878957;
      break;
    case 5:
      unint64_t result = 0x657A69732D35646DLL;
      break;
    case 6:
      unint64_t result = 0xD000000000000012;
      break;
    case 7:
      unint64_t result = 0x49746E6169726176;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100282E7C(char a1)
{
  unint64_t result = 0x4449656C646E7562;
  switch(a1)
  {
    case 1:
      unint64_t result = 1684957547;
      break;
    case 2:
      unint64_t result = 7107189;
      break;
    case 3:
      unint64_t result = 3499117;
      break;
    case 4:
      unint64_t result = 1932878957;
      break;
    case 5:
      unint64_t result = 0x657A69732D35646DLL;
      break;
    case 6:
      unint64_t result = 0xD000000000000012;
      break;
    case 7:
      unint64_t result = 0x49746E6169726176;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100282F64(unsigned __int8 *a1, char *a2)
{
  return sub_10051D138(*a1, *a2);
}

Swift::Int sub_100282F70()
{
  return sub_10044AC18();
}

uint64_t sub_100282F7C()
{
  return sub_100449E60();
}

Swift::Int sub_100282F84()
{
  return sub_10044AC18();
}

unint64_t sub_100282F8C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1002871D0(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100282FBC@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100282D94(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100282FE8()
{
  return sub_100282E7C(*v0);
}

unint64_t sub_100282FF0@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1002871D0(a1);
  *a2 = result;
  return result;
}

void sub_100283018(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_100283024(uint64_t a1)
{
  unint64_t v2 = sub_100288104();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100283060(uint64_t a1)
{
  unint64_t v2 = sub_100288104();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_10028309C(char a1)
{
  unint64_t result = 0x617461646174656DLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6D726F6674616C70;
      break;
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0x737465737361;
      break;
    case 5:
      unint64_t result = 0x2D64656E6E696874;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100283178(char a1)
{
  unint64_t result = 0x617461646174656DLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6D726F6674616C70;
      break;
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0x737465737361;
      break;
    case 5:
      unint64_t result = 0x2D64656E6E696874;
      break;
    default:
      return result;
  }
  return result;
}

double sub_100283254@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10028721C(a1, (uint64_t)v8);
  if (!v2)
  {
    long long v5 = v8[3];
    a2[2] = v8[2];
    a2[3] = v5;
    long long v6 = v8[5];
    a2[4] = v8[4];
    a2[5] = v6;
    double result = *(double *)v8;
    long long v7 = v8[1];
    *a2 = v8[0];
    a2[1] = v7;
  }
  return result;
}

Swift::Int sub_1002832A0()
{
  return sub_100284980();
}

uint64_t sub_1002832B8()
{
  return String.hash(into:)();
}

Swift::Int sub_1002832D0()
{
  return sub_1002849F8();
}

uint64_t sub_1002832E8@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_100638480;
  return sub_100284A50(v2, a1, a2);
}

void sub_1002832F4(void *a1@<X8>)
{
  *a1 = 0x6572617774666F73;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_100283310()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100283370(unsigned __int8 *a1, char *a2)
{
  return sub_10051C5F4(*a1, *a2);
}

Swift::Int sub_10028337C()
{
  return sub_10040F38C();
}

uint64_t sub_100283384()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100283468()
{
  return sub_10044B01C();
}

unint64_t sub_100283470@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_100638338;
  unint64_t result = sub_1002879F8(*a1, v3);
  *a2 = result;
  return result;
}

void sub_1002834A8(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0x80000001005B7820;
  unint64_t v3 = 0xD000000000000011;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEE006E6F69737265;
      unint64_t v3 = 0x762D656C646E7562;
      goto LABEL_3;
    case 2:
      *a1 = 1684957547;
      a1[1] = 0xE400000000000000;
      break;
    case 3:
      *a1 = 0x656C746974627573;
      a1[1] = 0xE800000000000000;
      break;
    case 4:
      *a1 = 0x656C746974;
      a1[1] = 0xE500000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

unint64_t sub_100283568()
{
  unint64_t result = 0xD000000000000011;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x762D656C646E7562;
      break;
    case 2:
      unint64_t result = 1684957547;
      break;
    case 3:
      unint64_t result = 0x656C746974627573;
      break;
    case 4:
      unint64_t result = 0x656C746974;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100283618@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_100638338;
  unint64_t result = sub_1002879F8(a1, v3);
  *a2 = result;
  return result;
}

void sub_100283648(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_100283654(uint64_t a1)
{
  unint64_t v2 = sub_100289028();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100283690(uint64_t a1)
{
  unint64_t v2 = sub_100289028();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1002836CC@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100287A40(a1, (uint64_t *)v7);
  if (!v2)
  {
    long long v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    long long v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_100283710(unsigned __int8 *a1, char *a2)
{
  return sub_10051EC14(*a1, *a2);
}

Swift::Int sub_10028371C()
{
  return sub_10040F488();
}

uint64_t sub_100283724()
{
  return sub_10044A404();
}

Swift::Int sub_10028372C()
{
  return sub_10044A514();
}

unint64_t sub_100283734@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100287E00(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100283764@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10028309C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100283790()
{
  return sub_100283178(*v0);
}

unint64_t sub_100283798@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100287E00(a1);
  *a2 = result;
  return result;
}

void sub_1002837C0(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1002837CC(uint64_t a1)
{
  unint64_t v2 = sub_100288338();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100283808(uint64_t a1)
{
  unint64_t v2 = sub_100288338();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100283844@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v4 = sub_1000172F8(&qword_10065BCD0);
  __chkstk_darwin(v4 - 8);
  long long v6 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000172F8(&qword_10065E328);
  uint64_t v31 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  long long v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for EnterpriseApp();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  uint64_t v33 = a1;
  sub_10018AC60(a1, v13);
  sub_100288338();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100014524((uint64_t)v33);
  }
  long long v29 = v6;
  long long v30 = v12;
  uint64_t v15 = v31;
  uint64_t v14 = v32;
  char v39 = 0;
  sub_10028838C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  long long v17 = v35;
  uint64_t v18 = v36;
  uint64_t v19 = v37;
  int v20 = v30;
  *long long v30 = v34;
  v20[1] = v17;
  *((void *)v20 + 4) = v18;
  *((void *)v20 + 5) = v19;
  v20[3] = v38;
  LOBYTE(v34) = 2;
  *((unsigned char *)v20 + v10[6]) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v34) = 3;
  *((unsigned char *)v20 + v10[7]) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v21 = sub_1000172F8(&qword_10065E340);
  char v39 = 4;
  v28[1] = sub_1002881AC(&qword_10065E348, &qword_10065E340, (void (*)(void))sub_1002883E0);
  _OWORD v28[2] = v21;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)((char *)v20 + v10[8]) = v34;
  char v39 = 5;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  *(void *)((char *)v20 + v10[9]) = v34;
  LOBYTE(v34) = 1;
  uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  if (v23)
  {
    uint64_t v24 = (uint64_t)v29;
    sub_100283D40(v22, v23, (uint64_t)v29);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v7);
    uint64_t v25 = (uint64_t)v30;
    sub_10001733C(v24, (uint64_t)v30 + v10[5], &qword_10065BCD0);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v7);
    uint64_t v25 = (uint64_t)v30;
    char v26 = (char *)v30 + v10[5];
    uint64_t v27 = type metadata accessor for Platform();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 1, 1, v27);
  }
  sub_100285A30(v25, v14);
  sub_100014524((uint64_t)v33);
  return sub_100288434(v25);
}

uint64_t sub_100283D40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Platform();
  uint64_t v13 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 == 0xD00000000000001BLL && a2 == 0x80000001005BA500
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    static Platform.iOS.getter();
LABEL_5:
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a3, v8, v6);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(a3, 0, 1, v6);
  }
  if (a1 == 0xD000000000000019 && a2 == 0x80000001005BA520
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    static Platform.macOS.getter();
    goto LABEL_5;
  }
  if (a1 == 0xD00000000000001CLL && a2 == 0x80000001005BA540
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    static Platform.tvOS.getter();
    goto LABEL_5;
  }
  if (a1 == 0xD00000000000001ALL && a2 == 0x80000001005BA560)
  {
    swift_bridgeObjectRelease();
LABEL_18:
    static Platform.watchOS.getter();
    goto LABEL_5;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v10) {
    goto LABEL_18;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);

  return v11(a3, 1, 1, v6);
}

uint64_t sub_100283FF8@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_10001733C(a2, (uint64_t)&v88, &qword_10065E1F0);
  uint64_t v6 = v89;
  if (v89)
  {
    uint64_t v7 = v88;
    uint64_t v78 = v91;
    uint64_t v79 = v90;
    uint64_t v76 = v92;
    uint64_t v81 = v93;
    uint64_t v8 = *(void *)(v3 + *(int *)(type metadata accessor for EnterpriseApp() + 36));
    if (v8)
    {
      uint64_t v63 = *(void *)(v8 + 16);
      if (v63)
      {
        uint64_t v65 = a3;
        uint64_t v59 = v3;
        uint64_t v67 = v8 + 32;
        swift_bridgeObjectRetain_n();
        uint64_t v9 = 0;
        unsigned __int8 v60 = a1;
        uint64_t v66 = a1;
        while (1)
        {
          uint64_t v13 = (uint64_t *)(v67 + 96 * v9);
          uint64_t v14 = v13[1];
          uint64_t v74 = *v13;
          uint64_t v15 = *((unsigned __int8 *)v13 + 16);
          uint64_t v16 = v13[3];
          uint64_t v11 = v13[4];
          uint64_t v12 = v13[5];
          uint64_t v17 = v13[6];
          uint64_t v72 = v13[7];
          long long v18 = *((_OWORD *)v13 + 4);
          uint64_t v20 = v13[10];
          uint64_t v19 = (void *)v13[11];
          uint64_t v21 = v9 + 1;
          unint64_t v22 = 0xEF6567616D692D65;
          unint64_t v23 = 0x7A69732D6C6C7566;
          switch(v15)
          {
            case 1:
              unint64_t v23 = 0xD000000000000016;
              unint64_t v22 = 0x80000001005B7760;
              break;
            case 2:
              unint64_t v23 = 0xD000000000000013;
              unint64_t v22 = 0x80000001005B7780;
              break;
            case 3:
              unint64_t v22 = 0x80000001005B77A0;
              unint64_t v23 = 0xD000000000000010;
              break;
            case 4:
              unint64_t v23 = 0x2D79616C70736964;
              unint64_t v22 = 0xED00006567616D69;
              break;
            default:
              break;
          }
          uint64_t v70 = v19;
          unint64_t v24 = 0x7A69732D6C6C7566;
          unint64_t v25 = 0xEF6567616D692D65;
          switch(v66)
          {
            case 1:
              unint64_t v24 = 0xD000000000000016;
              unint64_t v25 = 0x80000001005B7760;
              break;
            case 2:
              unint64_t v24 = 0xD000000000000013;
              unint64_t v25 = 0x80000001005B7780;
              break;
            case 3:
              unint64_t v25 = 0x80000001005B77A0;
              unint64_t v24 = 0xD000000000000010;
              break;
            case 4:
              unint64_t v24 = 0x2D79616C70736964;
              unint64_t v25 = 0xED00006567616D69;
              break;
            default:
              break;
          }
          uint64_t v69 = v14;
          long long v87 = v18;
          uint64_t v68 = v21;
          unsigned int v64 = v15;
          if (v23 == v24 && v22 == v25) {
            break;
          }
          char v84 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRetain();
          sub_100254E0C(v16, v11, v12);
          uint64_t v10 = v16;
          char v26 = v70;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v84) {
            goto LABEL_21;
          }
LABEL_6:
          swift_bridgeObjectRelease();
          sub_1001C3D08(v10, v11, v12);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v9 = v68;
          if (v68 == v63)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v3 = v59;
            a1 = v60;
            a3 = v65;
            goto LABEL_47;
          }
        }
        swift_bridgeObjectRetain();
        sub_100254E0C(v16, v11, v12);
        uint64_t v10 = v16;
        char v26 = v70;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease_n();
LABEL_21:
        uint64_t v27 = v17;
        uint64_t v28 = v11;
        uint64_t v29 = v10;
        if (v26) {
          long long v30 = v26;
        }
        else {
          long long v30 = _swiftEmptyArrayStorage;
        }
        uint64_t v31 = v30[2];
        if (v31)
        {
          uint64_t v82 = v27;
          uint64_t v85 = v12;
          uint64_t v61 = v28;
          uint64_t v62 = v20;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v32 = v30 + 5;
          while (1)
          {
            uint64_t v33 = v32[1];
            uint64_t v34 = v32[2];
            uint64_t v35 = v32[3];
            uint64_t v36 = v32[5];
            BOOL v37 = *(v32 - 1) == v7 && *v32 == v6;
            if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              if (v36)
              {
                if (v81)
                {
                  BOOL v38 = v33 == v79 && v34 == v78;
                  if (v38 && v35 == v76)
                  {
LABEL_45:
                    swift_bridgeObjectRelease_n();
                    uint64_t result = swift_bridgeObjectRelease_n();
                    unsigned int v41 = v64;
                    a3 = v65;
                    uint64_t v43 = v69;
                    long long v42 = v70;
                    uint64_t v44 = v29;
                    uint64_t v45 = v61;
                    uint64_t v46 = v62;
                    uint64_t v47 = v85;
                    uint64_t v48 = v82;
                    uint64_t v49 = v72;
                    uint64_t v50 = v74;
                    goto LABEL_68;
                  }
                }
              }
              else if (!v81)
              {
                goto LABEL_45;
              }
            }
            v32 += 7;
            if (!--v31)
            {
              swift_bridgeObjectRelease_n();
              uint64_t v10 = v29;
              uint64_t v11 = v61;
              uint64_t v12 = v85;
              goto LABEL_6;
            }
          }
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v11 = v28;
        goto LABEL_6;
      }
    }
  }
LABEL_47:
  uint64_t result = type metadata accessor for EnterpriseApp();
  uint64_t v51 = *(void *)(v3 + *(int *)(result + 32));
  uint64_t v52 = *(void *)(v51 + 16);
  if (v52)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v53 = v51 + 64;
    uint64_t v73 = a1;
    while (1)
    {
      uint64_t v50 = *(void *)(v53 - 32);
      uint64_t v43 = *(void *)(v53 - 24);
      uint64_t v44 = *(void *)(v53 - 8);
      uint64_t v45 = *(void *)v53;
      uint64_t v86 = *(void *)(v53 + 8);
      uint64_t v49 = *(void *)(v53 + 24);
      uint64_t v83 = *(void *)(v53 + 16);
      unint64_t v54 = 0xEF6567616D692D65;
      uint64_t v46 = *(void *)(v53 + 48);
      long long v42 = *(void **)(v53 + 56);
      unint64_t v55 = 0x7A69732D6C6C7566;
      switch(*(unsigned char *)(v53 - 16))
      {
        case 1:
          unint64_t v55 = 0xD000000000000016;
          unint64_t v54 = 0x80000001005B7760;
          break;
        case 2:
          unint64_t v55 = 0xD000000000000013;
          unint64_t v54 = 0x80000001005B7780;
          break;
        case 3:
          unint64_t v54 = 0x80000001005B77A0;
          unint64_t v55 = 0xD000000000000010;
          break;
        case 4:
          unint64_t v55 = 0x2D79616C70736964;
          unint64_t v54 = 0xED00006567616D69;
          break;
        default:
          break;
      }
      unint64_t v56 = 0x7A69732D6C6C7566;
      unint64_t v57 = 0xEF6567616D692D65;
      switch(v73)
      {
        case 1:
          unint64_t v56 = 0xD000000000000016;
          unint64_t v57 = 0x80000001005B7760;
          break;
        case 2:
          unint64_t v56 = 0xD000000000000013;
          unint64_t v57 = 0x80000001005B7780;
          break;
        case 3:
          unint64_t v57 = 0x80000001005B77A0;
          unint64_t v56 = 0xD000000000000010;
          break;
        case 4:
          unint64_t v56 = 0x2D79616C70736964;
          unint64_t v57 = 0xED00006567616D69;
          break;
        default:
          break;
      }
      long long v87 = *(_OWORD *)(v53 + 32);
      unsigned int v71 = *(unsigned __int8 *)(v53 - 16);
      if (v55 == v56 && v54 == v57)
      {
        swift_bridgeObjectRetain();
        sub_100254E0C(v44, v45, v86);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease_n();
        goto LABEL_67;
      }
      uint64_t v75 = *(void *)(v53 - 32);
      uint64_t v77 = v52;
      char v80 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRetain();
      sub_100254E0C(v44, v45, v86);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v80) {
        break;
      }
      swift_bridgeObjectRelease();
      sub_1001C3D08(v44, v45, v86);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v53 += 96;
      --v52;
      if (v77 == 1)
      {
        uint64_t result = swift_bridgeObjectRelease_n();
        uint64_t v50 = 0;
        uint64_t v43 = 0;
        unsigned int v41 = 0;
        uint64_t v44 = 0;
        uint64_t v45 = 0;
        uint64_t v47 = 0;
        uint64_t v48 = 0;
        uint64_t v49 = 0;
        uint64_t v46 = 0;
        long long v42 = 0;
        long long v58 = 0uLL;
        goto LABEL_69;
      }
    }
    uint64_t v50 = v75;
LABEL_67:
    uint64_t result = swift_bridgeObjectRelease_n();
    unsigned int v41 = v71;
    uint64_t v47 = v86;
    uint64_t v48 = v83;
LABEL_68:
    long long v58 = v87;
  }
  else
  {
    uint64_t v50 = 0;
    uint64_t v43 = 0;
    unsigned int v41 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v46 = 0;
    long long v42 = 0;
    long long v58 = 0uLL;
  }
LABEL_69:
  *(void *)a3 = v50;
  *(void *)(a3 + 8) = v43;
  *(void *)(a3 + 16) = v41;
  *(void *)(a3 + 24) = v44;
  *(void *)(a3 + 32) = v45;
  *(void *)(a3 + 40) = v47;
  *(void *)(a3 + 48) = v48;
  *(void *)(a3 + 56) = v49;
  *(_OWORD *)(a3 + 64) = v58;
  *(void *)(a3 + 80) = v46;
  *(void *)(a3 + 88) = v42;
  return result;
}

uint64_t type metadata accessor for EnterpriseApp()
{
  uint64_t result = qword_10065E268;
  if (!qword_10065E268) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100284954@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100283844(a1, a2);
}

Swift::Int sub_10028496C()
{
  return sub_100284980();
}

Swift::Int sub_100284980()
{
  return Hasher._finalize()();
}

uint64_t sub_1002849D0()
{
  return String.hash(into:)();
}

Swift::Int sub_1002849E4()
{
  return sub_1002849F8();
}

Swift::Int sub_1002849F8()
{
  return Hasher._finalize()();
}

uint64_t sub_100284A44@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1006384B8;
  return sub_100284A50(v2, a1, a2);
}

uint64_t sub_100284A50@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, BOOL *a3@<X8>)
{
  Swift::Int v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v4 != 0;
  return result;
}

void sub_100284AA0(void *a1@<X8>)
{
  *a1 = 0x736D657469;
  a1[1] = 0xE500000000000000;
}

uint64_t sub_100284AB8()
{
  return 0x736D657469;
}

uint64_t sub_100284ACC@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006384F0, v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_100284B24(uint64_t a1)
{
  unint64_t v2 = sub_100287FC4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100284B60(uint64_t a1)
{
  unint64_t v2 = sub_100287FC4();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100284B9C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100287E4C(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

void *sub_100284BC8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v4 = *((_OWORD *)a1 + 2);
  *(_OWORD *)(a3 + 16) = *((_OWORD *)a1 + 1);
  *(_OWORD *)(a3 + 32) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a3 + 88) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a3 + 104) = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a3 + 120) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a3 + 136) = v6;
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a3 + 56) = *(_OWORD *)a2;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v10 = a1[6];
  *(void *)a3 = v8;
  *(void *)(a3 + 8) = v9;
  *(void *)(a3 + 48) = v10;
  *(_OWORD *)(a3 + 72) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return sub_100284D18((void *)a2);
}

uint64_t sub_100284C44(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    uint64_t v7 = a2[6];
    if (a1[6])
    {
      if (v7 && a1[2] == a2[2] && a1[3] == a2[3] && a1[4] == a2[4]) {
        return 1;
      }
    }
    else if (!v7)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

double sub_100284CE4(uint64_t a1)
{
  *(void *)(a1 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_100284D04()
{
  return _swift_deallocObject(v0, 17, 7);
}

void *sub_100284D18(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  swift_bridgeObjectRetain();
  sub_100254E0C(v2, v3, v4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_100284DA0(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  swift_bridgeObjectRelease();
  sub_1001C3D08(v2, v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100284E2C()
{
  return sub_1002A4DF4(v0 + 16) & 1;
}

void *sub_100284E80@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100284BC8(a1, v2 + 16, a2);
}

uint64_t sub_100284E88(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_100284ED8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 127, 7);
}

uint64_t sub_100284F34()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 56) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 112, 7);
}

void *sub_100284F94(void *a1)
{
  uint64_t v2 = a1[10];
  uint64_t v3 = a1[11];
  uint64_t v4 = a1[12];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1001C3D08(v2, v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100285040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[5] = a2;
  v3[6] = a3;
  v3[4] = a1;
  uint64_t v6 = type metadata accessor for Logger();
  v3[7] = v6;
  v3[8] = *(void *)(v6 - 8);
  v3[9] = swift_task_alloc();
  v3[10] = swift_task_alloc();
  uint64_t v7 = (void *)swift_task_alloc();
  v3[11] = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100285168;
  return sub_10044D2A4(a1, 0, 0x402E000000000000, 0, a3);
}

uint64_t sub_100285168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = (void *)*v4;
  v5[12] = a1;
  v5[13] = a2;
  v5[14] = a3;
  v5[15] = v3;
  swift_task_dealloc();
  if (v3) {
    uint64_t v6 = sub_1002858E8;
  }
  else {
    uint64_t v6 = sub_100285280;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_100285280()
{
  if ([*(id *)(v0 + 112) statusCode] != (id)200)
  {
    unint64_t v8 = *(void *)(v0 + 104);
    uint64_t v9 = *(void **)(v0 + 112);
    uint64_t v10 = *(void *)(v0 + 96);
    uint64_t v11 = *(void **)(v0 + 48);
    uint64_t v12 = *(void *)(v0 + 32);
    type metadata accessor for InternalError();
    sub_1002880BC((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    void *v13 = 0;
    v13[1] = 0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    sub_100013510(v10, v8);
    swift_release();
    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v12, v14);
LABEL_12:
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
    return v32();
  }
  uint64_t v1 = (uint64_t *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 120);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_100285AF8();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v2)
  {
    swift_release();
    static Logger.ddm.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      char v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v6 = (void *)swift_slowAlloc();
      *(_DWORD *)char v5 = 138543362;
      swift_errorRetain();
      uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 24) = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v6 = v7;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Enterprise manifest invalid: Decoding request failed: %{public}@", v5, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    unint64_t v25 = *(void *)(v0 + 104);
    unint64_t v24 = *(void **)(v0 + 112);
    uint64_t v26 = *(void *)(v0 + 96);
    uint64_t v28 = *(void *)(v0 + 64);
    uint64_t v27 = *(void *)(v0 + 72);
    long long v30 = *(void **)(v0 + 48);
    uint64_t v29 = *(void *)(v0 + 56);
    uint64_t v44 = *(void *)(v0 + 32);

    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    type metadata accessor for InternalError();
    sub_1002880BC((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    sub_100013510(v26, v25);
    swift_release();
    swift_errorRelease();
    uint64_t v31 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v44, v31);
    goto LABEL_12;
  }
  swift_release();
  uint64_t v15 = *v1;
  if (*(void *)(*v1 + 16) != 1)
  {
    static Logger.ddm.getter();
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Enterprise manifest invalid: Expected only one app", v35, 2u);
      swift_slowDealloc();
    }
    unint64_t v37 = *(void *)(v0 + 104);
    uint64_t v36 = *(void **)(v0 + 112);
    uint64_t v38 = *(void *)(v0 + 96);
    uint64_t v39 = *(void *)(v0 + 80);
    uint64_t v41 = *(void *)(v0 + 56);
    uint64_t v40 = *(void *)(v0 + 64);
    long long v42 = *(void **)(v0 + 48);
    uint64_t v45 = *(void *)(v0 + 32);

    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
    type metadata accessor for InternalError();
    sub_1002880BC((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    sub_100013510(v38, v37);
    swift_release();
    uint64_t v43 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v43 - 8) + 8))(v45, v43);
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  unint64_t v16 = *(void *)(v0 + 104);
  uint64_t v17 = *(void **)(v0 + 112);
  uint64_t v18 = *(void *)(v0 + 96);
  uint64_t v19 = *(void **)(v0 + 48);
  uint64_t v20 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();

  sub_100013510(v18, v16);
  swift_release();
  uint64_t v21 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v20, v21);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v22 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v22(v15);
}

uint64_t sub_1002858E8()
{
  uint64_t v1 = *(void *)(v0 + 32);

  swift_release();
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1002859A0()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t sub_100285A30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EnterpriseApp();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100285A94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EnterpriseApp();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100285AF8()
{
  unint64_t result = qword_10065E208;
  if (!qword_10065E208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E208);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnterpriseManifest()
{
  return &type metadata for EnterpriseManifest;
}

uint64_t destroy for EnterpriseAsset(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 40) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for EnterpriseAsset(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  if (v5 == 1)
  {
    long long v6 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v6;
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  }
  else
  {
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v5;
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for EnterpriseAsset(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = (long long *)(a1 + 24);
  uint64_t v5 = (long long *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40) == 1)
  {
    if (v6 == 1)
    {
      long long v7 = *v5;
      long long v8 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = v8;
      *uint64_t v4 = v7;
    }
    else
    {
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      uint64_t v11 = *(void *)(a2 + 48);
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      *(void *)(a1 + 48) = v11;
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v6 == 1)
  {
    sub_100285DF4(a1 + 24);
    long long v10 = *(_OWORD *)(a2 + 40);
    long long v9 = *(_OWORD *)(a2 + 56);
    *uint64_t v4 = *v5;
    *(_OWORD *)(a1 + 40) = v10;
    *(_OWORD *)(a1 + 56) = v9;
  }
  else
  {
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(a2 + 48);
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    *(void *)(a1 + 48) = v12;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100285DF4(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for EnterpriseAsset(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for EnterpriseAsset(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  if (*(void *)(a1 + 40) != 1)
  {
    uint64_t v5 = *(void *)(a2 + 40);
    if (v5 != 1)
    {
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v5;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_100285DF4(a1 + 24);
  }
  long long v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
LABEL_6:
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EnterpriseAsset(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EnterpriseAsset(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 80) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EnterpriseAsset()
{
  return &type metadata for EnterpriseAsset;
}

uint64_t destroy for EnterpriseAsset.Variant()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for EnterpriseAsset.Variant(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for EnterpriseAsset.Variant(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for EnterpriseAsset.Variant(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for EnterpriseAsset.Variant(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EnterpriseAsset.Variant(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EnterpriseAsset.Variant(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EnterpriseAsset.Variant()
{
  return &type metadata for EnterpriseAsset.Variant;
}

void *sub_100286208(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    uint64_t v10 = a2[7];
    uint64_t v11 = a3[5];
    __dst = (char *)a1 + v11;
    uint64_t v12 = (char *)a2 + v11;
    a1[6] = a2[6];
    a1[7] = v10;
    uint64_t v13 = type metadata accessor for Platform();
    uint64_t v19 = *(void *)(v13 - 8);
    uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v20(v12, 1, v13))
    {
      uint64_t v14 = sub_1000172F8(&qword_10065BCD0);
      memcpy(__dst, v12, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(__dst, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v13);
    }
    uint64_t v16 = a3[7];
    *((unsigned char *)v4 + a3[6]) = *((unsigned char *)a2 + a3[6]);
    *((unsigned char *)v4 + v16) = *((unsigned char *)a2 + v16);
    uint64_t v17 = a3[9];
    *(void *)((char *)v4 + a3[8]) = *(void *)((char *)a2 + a3[8]);
    *(void *)((char *)v4 + v17) = *(void *)((char *)a2 + v17);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_10028640C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Platform();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_100286500(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  uint64_t v8 = a2[7];
  uint64_t v9 = a3[5];
  __dst = (char *)a1 + v9;
  uint64_t v10 = (char *)a2 + v9;
  a1[6] = a2[6];
  a1[7] = v8;
  uint64_t v11 = type metadata accessor for Platform();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v17(v10, 1, v11))
  {
    uint64_t v13 = sub_1000172F8(&qword_10065BCD0);
    memcpy(__dst, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  uint64_t v14 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
  uint64_t v15 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v15) = *(void *)((char *)a2 + v15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1002866B0(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Platform();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_1000172F8(&qword_10065BCD0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_100286900(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  long long v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Platform();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_1000172F8(&qword_10065BCD0);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v14 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
  uint64_t v15 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v15) = *(void *)((char *)a2 + v15);
  return a1;
}

void *sub_100286A54(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Platform();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = sub_1000172F8(&qword_10065BCD0);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  uint64_t v19 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  *((unsigned char *)a1 + v19) = *((unsigned char *)a2 + v19);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100286C50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100286C64);
}

uint64_t sub_100286C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1000172F8(&qword_10065BCD0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100286D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100286D2C);
}

uint64_t sub_100286D2C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_1000172F8(&qword_10065BCD0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_100286DD8()
{
  sub_1002801A0();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t sub_100286E94(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100286EC4();
  unint64_t result = sub_100286F18();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100286EC4()
{
  unint64_t result = qword_10065E2B0;
  if (!qword_10065E2B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E2B0);
  }
  return result;
}

unint64_t sub_100286F18()
{
  unint64_t result = qword_10065E2B8;
  if (!qword_10065E2B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E2B8);
  }
  return result;
}

uint64_t sub_100286F6C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_1000172F8(&qword_10065E318);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_1002882E4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100014524((uint64_t)a1);
  }
  char v26 = 0;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  char v26 = 1;
  swift_bridgeObjectRetain();
  uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  if (v14)
  {
    sub_100447360(v13, v14, v25);
    uint64_t v15 = v25[4];
    uint64_t v23 = v25[2];
    uint64_t v24 = v25[3];
    int v16 = v8;
    uint64_t v17 = v25[1];
    uint64_t v18 = v5;
    uint64_t v19 = v25[0];
    (*(void (**)(char *, uint64_t))(v6 + 8))(v16, v18);
    uint64_t v20 = v23;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v19 = 0;
    uint64_t v17 = 0;
    uint64_t v20 = 0;
    uint64_t v24 = 0;
    uint64_t v15 = 0;
  }
  swift_bridgeObjectRetain();
  sub_100014524((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v10;
  a2[1] = v12;
  a2[2] = v19;
  a2[3] = v17;
  uint64_t v21 = v24;
  a2[4] = v20;
  a2[5] = v21;
  a2[6] = v15;
  return result;
}

unint64_t sub_1002871D0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100638258, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8) {
    return 8;
  }
  else {
    return v3;
  }
}

uint64_t sub_10028721C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_1000172F8(&qword_10065E2E8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_100288104();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100014524((uint64_t)a1);
  }
  LOBYTE(v60) = 0;
  uint64_t v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v12 = v11;
  uint64_t v61 = v10;
  uint64_t v62 = v11;
  char v75 = 1;
  sub_100288158();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v59 = v10;
  LODWORD(v10) = v60;
  char v63 = (char)v60;
  LOBYTE(v60) = 2;
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
  int v74 = v10;
  uint64_t v70 = v13;
  uint64_t v71 = v14;
  LOBYTE(v60) = 5;
  uint64_t v15 = v13;
  uint64_t v58 = v14;
  swift_bridgeObjectRetain();
  uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v57 = v15;
  if ((v17 & 1) != 0
    || (uint64_t v18 = v16,
        sub_1000172F8((uint64_t *)&unk_10065C5D0),
        char v75 = 4,
        sub_100288278(),
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(),
        !v60))
  {
    LOBYTE(v60) = 3;
    uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v21 = v20;
    if (v20)
    {
      uint64_t v22 = v19;
      swift_bridgeObjectRetain();
      int64_t v56 = String.count.getter();
      swift_bridgeObjectRelease();
      if (v56 == 32)
      {
        uint64_t v23 = 1;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        uint64_t v21 = 1;
      }
      int64_t v64 = 0;
      uint64_t v65 = v22;
      uint64_t v66 = v21;
      uint64_t v67 = 0;
      uint64_t v68 = v23;
      uint64_t v69 = 0;
    }
    else
    {
      int64_t v64 = 0;
      uint64_t v65 = 0;
      uint64_t v66 = 1;
      uint64_t v67 = 0;
      uint64_t v68 = 0;
      uint64_t v69 = 0;
    }
  }
  else
  {
    sub_10027151C(0, 0, 0, v18, (uint64_t)v60, v73);
    sub_10001733C((uint64_t)v73, (uint64_t)&v64, &qword_10065D400);
  }
  sub_1000172F8(&qword_10065E300);
  char v75 = 6;
  sub_1002881AC(&qword_10065E308, &qword_10065E300, (void (*)(void))sub_100288224);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v24 = v60;
  if (v60)
  {
    if (v60[2])
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      goto LABEL_27;
    }
    swift_bridgeObjectRelease();
  }
  sub_1000172F8((uint64_t *)&unk_10065C5D0);
  char v75 = 7;
  sub_100288278();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  if (v60)
  {
    int64_t v25 = v60[2];
    uint64_t v51 = v60;
    if (v25)
    {
      unsigned __int8 v60 = _swiftEmptyArrayStorage;
      int64_t v26 = v25;
      sub_100456028(0, v25, 0);
      uint64_t v27 = v60;
      uint64_t v28 = v51 + 5;
      do
      {
        unint64_t v55 = v28;
        uint64_t v29 = *v28;
        uint64_t v53 = *(v28 - 1);
        unsigned __int8 v60 = v27;
        unint64_t v30 = v27[2];
        unint64_t v52 = v27[3];
        int64_t v56 = v30 + 1;
        uint64_t v54 = v29;
        swift_bridgeObjectRetain();
        unint64_t v31 = v52;
        unint64_t v32 = v30;
        if (v30 >= v52 >> 1)
        {
          unint64_t v52 = v30;
          sub_100456028(v31 > 1, v56, 1);
          unint64_t v32 = v52;
          uint64_t v27 = v60;
        }
        uint64_t v33 = v55 + 2;
        v27[2] = v56;
        os_log_type_t v34 = &v27[7 * v32];
        uint64_t v35 = v54;
        v34[4] = v53;
        v34[5] = v35;
        *((_OWORD *)v34 + 3) = 0u;
        *((_OWORD *)v34 + 4) = 0u;
        v34[10] = 0;
        --v26;
        uint64_t v28 = v33;
      }
      while (v26);
      uint64_t v24 = v27;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_bridgeObjectRelease();
      goto LABEL_27;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  uint64_t v24 = 0;
LABEL_27:
  uint64_t v72 = v24;
  uint64_t v36 = v64;
  uint64_t v37 = v65;
  int64_t v56 = v64;
  unint64_t v55 = (void *)v65;
  uint64_t v38 = v66;
  uint64_t v54 = v66;
  uint64_t v53 = v67;
  unint64_t v52 = v68;
  uint64_t v47 = v69;
  swift_bridgeObjectRetain();
  uint64_t v39 = v47;
  sub_100254E0C(v36, v37, v38);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_100014524((uint64_t)a1);
  uint64_t v40 = v64;
  uint64_t v41 = v65;
  uint64_t v42 = v66;
  uint64_t v49 = v68;
  uint64_t v48 = v69;
  uint64_t v50 = v71;
  uint64_t v51 = v72;
  swift_bridgeObjectRelease();
  sub_1001C3D08(v40, v41, v42);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v59;
  *(void *)(a2 + 8) = v12;
  *(unsigned char *)(a2 + 16) = v74;
  uint64_t v43 = v55;
  *(void *)(a2 + 24) = v56;
  *(void *)(a2 + 32) = v43;
  uint64_t v44 = v53;
  *(void *)(a2 + 40) = v54;
  *(void *)(a2 + 48) = v44;
  *(void *)(a2 + 56) = v52;
  *(void *)(a2 + 64) = v39;
  uint64_t v45 = v58;
  *(void *)(a2 + 72) = v57;
  *(void *)(a2 + 80) = v45;
  *(void *)(a2 + 88) = v24;
  return result;
}

unint64_t sub_1002879F8(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 >= 5) {
    return 5;
  }
  else {
    return v5;
  }
}

uint64_t sub_100287A40@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_1000172F8(&qword_10065E3C8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_100289028();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100014524((uint64_t)a1);
  }
  char v32 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v26 = v9;
  char v31 = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v27 = v13;
  uint64_t v24 = v12;
  char v30 = 2;
  sub_10028907C();
  swift_bridgeObjectRetain();
  uint64_t v25 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v29 = 3;
  uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v23 = v14;
  char v28 = 4;
  swift_bridgeObjectRetain();
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v17 = v16;
  uint64_t v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v25 = v15;
  v18(v8, v5);
  swift_bridgeObjectRetain();
  uint64_t v19 = v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100014524((uint64_t)a1);
  uint64_t v20 = v23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v26;
  a2[1] = v11;
  a2[2] = v24;
  a2[3] = v19;
  a2[4] = v25;
  a2[5] = v17;
  a2[6] = v22;
  a2[7] = v20;
  return result;
}

unint64_t sub_100287E00(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006383D0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

void *sub_100287E4C(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_10065E2C0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10018AC60(a1, a1[3]);
  sub_100287FC4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100014524((uint64_t)a1);
  }
  else
  {
    sub_1000172F8(&qword_10065E2D0);
    sub_100288018();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    sub_100014524((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_100287FC4()
{
  unint64_t result = qword_10065E2C8;
  if (!qword_10065E2C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E2C8);
  }
  return result;
}

unint64_t sub_100288018()
{
  unint64_t result = qword_10065E2D8;
  if (!qword_10065E2D8)
  {
    sub_10017B924(&qword_10065E2D0);
    sub_1002880BC(&qword_10065E2E0, (void (*)(uint64_t))type metadata accessor for EnterpriseApp);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E2D8);
  }
  return result;
}

uint64_t sub_1002880BC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100288104()
{
  unint64_t result = qword_10065E2F0;
  if (!qword_10065E2F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E2F0);
  }
  return result;
}

unint64_t sub_100288158()
{
  unint64_t result = qword_10065E2F8;
  if (!qword_10065E2F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E2F8);
  }
  return result;
}

uint64_t sub_1002881AC(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10017B924(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100288224()
{
  unint64_t result = qword_10065E310;
  if (!qword_10065E310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E310);
  }
  return result;
}

unint64_t sub_100288278()
{
  unint64_t result = qword_10065DEA8;
  if (!qword_10065DEA8)
  {
    sub_10017B924((uint64_t *)&unk_10065C5D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065DEA8);
  }
  return result;
}

unint64_t sub_1002882E4()
{
  unint64_t result = qword_10065E320;
  if (!qword_10065E320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E320);
  }
  return result;
}

unint64_t sub_100288338()
{
  unint64_t result = qword_10065E330;
  if (!qword_10065E330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E330);
  }
  return result;
}

unint64_t sub_10028838C()
{
  unint64_t result = qword_10065E338;
  if (!qword_10065E338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E338);
  }
  return result;
}

unint64_t sub_1002883E0()
{
  unint64_t result = qword_10065E350;
  if (!qword_10065E350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E350);
  }
  return result;
}

uint64_t sub_100288434(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for EnterpriseApp();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for EnterpriseMetadata()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for EnterpriseMetadata(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for EnterpriseMetadata(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for EnterpriseMetadata(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EnterpriseMetadata(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EnterpriseMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EnterpriseMetadata()
{
  return &type metadata for EnterpriseMetadata;
}

uint64_t getEnumTagSinglePayload for EnterpriseApp.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for EnterpriseApp.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100288860);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EnterpriseApp.CodingKeys()
{
  return &type metadata for EnterpriseApp.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for EnterpriseAsset.Variant.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100288964);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EnterpriseAsset.Variant.CodingKeys()
{
  return &type metadata for EnterpriseAsset.Variant.CodingKeys;
}

ValueMetadata *type metadata accessor for EnterpriseAsset.Kind()
{
  return &type metadata for EnterpriseAsset.Kind;
}

uint64_t getEnumTagSinglePayload for EnterpriseAsset.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for EnterpriseAsset.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100288B10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EnterpriseAsset.CodingKeys()
{
  return &type metadata for EnterpriseAsset.CodingKeys;
}

ValueMetadata *type metadata accessor for EnterpriseManifest.CodingKeys()
{
  return &type metadata for EnterpriseManifest.CodingKeys;
}

unint64_t sub_100288B60()
{
  unint64_t result = qword_10065E358;
  if (!qword_10065E358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E358);
  }
  return result;
}

unint64_t sub_100288BB8()
{
  unint64_t result = qword_10065E360;
  if (!qword_10065E360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E360);
  }
  return result;
}

unint64_t sub_100288C10()
{
  unint64_t result = qword_10065E368;
  if (!qword_10065E368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E368);
  }
  return result;
}

unint64_t sub_100288C68()
{
  unint64_t result = qword_10065E370;
  if (!qword_10065E370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E370);
  }
  return result;
}

unint64_t sub_100288CC0()
{
  unint64_t result = qword_10065E378;
  if (!qword_10065E378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E378);
  }
  return result;
}

unint64_t sub_100288D18()
{
  unint64_t result = qword_10065E380;
  if (!qword_10065E380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E380);
  }
  return result;
}

unint64_t sub_100288D70()
{
  unint64_t result = qword_10065E388;
  if (!qword_10065E388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E388);
  }
  return result;
}

unint64_t sub_100288DC8()
{
  unint64_t result = qword_10065E390;
  if (!qword_10065E390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E390);
  }
  return result;
}

unint64_t sub_100288E20()
{
  unint64_t result = qword_10065E398;
  if (!qword_10065E398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E398);
  }
  return result;
}

unint64_t sub_100288E78()
{
  unint64_t result = qword_10065E3A0;
  if (!qword_10065E3A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E3A0);
  }
  return result;
}

unint64_t sub_100288ED0()
{
  unint64_t result = qword_10065E3A8;
  if (!qword_10065E3A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E3A8);
  }
  return result;
}

unint64_t sub_100288F28()
{
  unint64_t result = qword_10065E3B0;
  if (!qword_10065E3B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E3B0);
  }
  return result;
}

unint64_t sub_100288F80()
{
  unint64_t result = qword_10065E3B8;
  if (!qword_10065E3B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E3B8);
  }
  return result;
}

unint64_t sub_100288FD4()
{
  unint64_t result = qword_10065E3C0;
  if (!qword_10065E3C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E3C0);
  }
  return result;
}

unint64_t sub_100289028()
{
  unint64_t result = qword_10065E3D0;
  if (!qword_10065E3D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E3D0);
  }
  return result;
}

unint64_t sub_10028907C()
{
  unint64_t result = qword_10065E3D8;
  if (!qword_10065E3D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E3D8);
  }
  return result;
}

unsigned char *_s28ManagedAppDistributionDaemon18EnterpriseManifestV10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10028916CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for EnterpriseMetadata.Kind()
{
  return &type metadata for EnterpriseMetadata.Kind;
}

uint64_t getEnumTagSinglePayload for ConfigurationBag.LicenseConfiguration.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s28ManagedAppDistributionDaemon15EnterpriseAssetV4KindOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100289300);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EnterpriseMetadata.CodingKeys()
{
  return &type metadata for EnterpriseMetadata.CodingKeys;
}

unint64_t sub_10028933C()
{
  unint64_t result = qword_10065E3E0;
  if (!qword_10065E3E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E3E0);
  }
  return result;
}

unint64_t sub_100289394()
{
  unint64_t result = qword_10065E3E8;
  if (!qword_10065E3E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E3E8);
  }
  return result;
}

unint64_t sub_1002893EC()
{
  unint64_t result = qword_10065E3F0;
  if (!qword_10065E3F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E3F0);
  }
  return result;
}

unint64_t sub_100289444()
{
  unint64_t result = qword_10065E3F8;
  if (!qword_10065E3F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E3F8);
  }
  return result;
}

unint64_t sub_100289498()
{
  unint64_t result = qword_10065E400;
  if (!qword_10065E400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E400);
  }
  return result;
}

char *sub_1002894F4(char *a1, char **a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    unsigned int v6 = a2[2];
    *((void *)a1 + 1) = a2[1];
    *((void *)a1 + 2) = v6;
    BOOL v7 = a2[4];
    *((void *)a1 + 3) = a2[3];
    *((void *)a1 + 4) = v7;
    *((void *)a1 + 5) = a2[5];
    uint64_t v8 = *(int *)(a3 + 32);
    uint64_t v9 = &a1[v8];
    uint64_t v10 = (uint64_t)a2 + v8;
    *(void *)&a1[v8] = *(char **)((char *)a2 + v8);
    uint64_t v11 = v5;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v12 = *(int *)(sub_1000172F8(&qword_10065E410) + 36);
    uint64_t v13 = &v9[v12];
    uint64_t v14 = v10 + v12;
    uint64_t v15 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t sub_100289624(id *a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_release();
  int v4 = (char *)a1 + *(int *)(a2 + 32);
  swift_release();
  uint64_t v5 = &v4[*(int *)(sub_1000172F8(&qword_10065E410) + 36)];
  uint64_t v6 = type metadata accessor for URL();
  BOOL v7 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

void *sub_1002896D0(void *a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v7;
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = a2 + v8;
  *(void *)((char *)a1 + v8) = *(void *)(a2 + v8);
  id v11 = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v12 = *(int *)(sub_1000172F8(&qword_10065E410) + 36);
  uint64_t v13 = &v9[v12];
  uint64_t v14 = v10 + v12;
  uint64_t v15 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t sub_1002897B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  uint64_t v9 = *(int *)(a3 + 32);
  uint64_t v10 = a1 + v9;
  id v11 = (void *)(a2 + v9);
  *(void *)(a1 + v9) = *v11;
  swift_retain();
  swift_release();
  uint64_t v12 = *(int *)(sub_1000172F8(&qword_10065E410) + 36);
  uint64_t v13 = v10 + v12;
  uint64_t v14 = (char *)v11 + v12;
  uint64_t v15 = type metadata accessor for URL();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

uint64_t sub_1002898C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  *(void *)(a1 + v4) = *(void *)(a2 + v4);
  uint64_t v7 = *(int *)(sub_1000172F8(&qword_10065E410) + 36);
  uint64_t v8 = v5 + v7;
  uint64_t v9 = v6 + v7;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_10028997C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v7 = a2[2];
  *(void *)(a1 + 8) = a2[1];
  *(void *)(a1 + 16) = v7;
  swift_release();
  uint64_t v8 = a2[4];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = v8;
  swift_release();
  *(void *)(a1 + 40) = a2[5];
  swift_release();
  uint64_t v9 = *(int *)(a3 + 32);
  uint64_t v10 = a1 + v9;
  id v11 = (void *)((char *)a2 + v9);
  *(void *)(a1 + v9) = *v11;
  swift_release();
  uint64_t v12 = *(int *)(sub_1000172F8(&qword_10065E410) + 36);
  uint64_t v13 = v10 + v12;
  uint64_t v14 = (char *)v11 + v12;
  uint64_t v15 = type metadata accessor for URL();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_100289A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100289A74);
}

uint64_t sub_100289A74(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1000172F8(&qword_10065E410);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    id v11 = (char *)a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100289B28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100289B3C);
}

void *sub_100289B3C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_1000172F8(&qword_10065E410);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 32);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for IPA_InstallTask()
{
  uint64_t result = qword_10065E470;
  if (!qword_10065E470) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100289C34()
{
  sub_100289CE8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_100289CE8()
{
  if (!qword_10065E480)
  {
    type metadata accessor for LicenseStorageDatabaseConfig(255);
    unint64_t v0 = type metadata accessor for SQLiteDatabase();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10065E480);
    }
  }
}

uint64_t sub_100289D48@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  *a5 = a4;
  id v9 = a4;
  a5[1] = sub_100249BF4(a1);
  a5[2] = v10;
  uint64_t result = sub_10041CE88(a2, (uint64_t)[a1 persistentID]);
  if (v12)
  {
    uint64_t v13 = result;
    uint64_t v14 = v12;

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    a5[3] = v13;
    a5[4] = v14;
    uint64_t v15 = *(void *)(a3 + 192);
    a5[5] = *(void *)(v15 + 152);
    swift_retain();
    swift_retain();
    swift_release();
    uint64_t v16 = v15 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon19InstallDependencies_licenseStorage;
    uint64_t v17 = type metadata accessor for IPA_InstallTask();
    sub_100017238(v16, (uint64_t)a5 + *(int *)(v17 + 32), &qword_10065E410);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100289E58(uint64_t a1)
{
  v2[32] = a1;
  v2[33] = v1;
  sub_1000172F8((uint64_t *)&unk_100661AB0);
  v2[34] = swift_task_alloc();
  v2[35] = swift_task_alloc();
  sub_1000172F8(&qword_10065E410);
  v2[36] = swift_task_alloc();
  sub_1000172F8(&qword_10065E4D0);
  v2[37] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for ManagedAppStatus.State();
  v2[38] = v3;
  v2[39] = *(void *)(v3 - 8);
  v2[40] = swift_task_alloc();
  sub_1000172F8(&qword_10065C9B0);
  v2[41] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[42] = v4;
  v2[43] = *(void *)(v4 - 8);
  v2[44] = swift_task_alloc();
  v2[45] = type metadata accessor for IPA_InstallTask();
  v2[46] = swift_task_alloc();
  v2[47] = swift_task_alloc();
  v2[48] = swift_task_alloc();
  v2[49] = swift_task_alloc();
  v2[50] = swift_task_alloc();
  v2[51] = swift_task_alloc();
  v2[52] = swift_task_alloc();
  v2[53] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v2[54] = v5;
  v2[55] = *(void *)(v5 - 8);
  v2[56] = swift_task_alloc();
  v2[57] = swift_task_alloc();
  v2[58] = swift_task_alloc();
  v2[59] = swift_task_alloc();
  v2[60] = swift_task_alloc();
  v2[61] = swift_task_alloc();
  v2[62] = swift_task_alloc();
  v2[63] = swift_task_alloc();
  return _swift_task_switch(sub_10028A1AC, 0, 0);
}

uint64_t sub_10028A1AC()
{
  uint64_t v252 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 424);
  uint64_t v3 = *(void *)(v0 + 264);
  static Logger.install.getter();
  sub_10028E674(v3, v2);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  uint64_t v238 = v0;
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void ***)(v0 + 424);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    id v9 = *v6;
    *(void *)(v1 + 248) = *v6;
    id v10 = v9;
    uint64_t v1 = v238;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v9;
    sub_10028E6D8((uint64_t)v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%@] Beginning installation phase", v7, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10028E6D8(*(void *)(v0 + 424));
  }

  uint64_t v11 = *(void *)(v1 + 504);
  uint64_t v12 = *(void *)(v1 + 432);
  uint64_t v13 = *(void *)(v1 + 440);
  uint64_t v14 = *(void *)(v1 + 264);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  *(void *)(v1 + 512) = v15;
  *(void *)(v1 + 520) = (v13 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v15(v11, v12);
  uint64_t v16 = *(os_unfair_lock_s **)(v14 + 16);
  swift_retain();
  uint64_t v17 = sub_100312690(6, v16);
  unint64_t v19 = v18;
  swift_release();
  *(void *)(v1 + 528) = v17;
  *(void *)(v1 + 536) = v19;
  if (!v19) {
    goto LABEL_7;
  }
  uint64_t v20 = *(void *)(v1 + 336);
  uint64_t v21 = *(void *)(v1 + 344);
  uint64_t v22 = *(void *)(v1 + 328);
  swift_retain();
  sub_100311ADC(10, v16, v22);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v22, 1, v20) == 1)
  {
    uint64_t v23 = *(void *)(v1 + 328);
    swift_bridgeObjectRelease();
    sub_10001729C(v23, &qword_10065C9B0);
LABEL_7:
    type metadata accessor for InternalError();
    sub_10019FE50();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
LABEL_8:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = *(uint64_t (**)(void))(v238 + 8);
LABEL_9:
    return v24();
  }
  uint64_t v226 = v17;
  unint64_t v235 = v19;
  uint64_t v26 = *(void **)(v1 + 352);
  (*(void (**)(void *, void, void))(*(void *)(v1 + 344) + 32))(v26, *(void *)(v1 + 328), *(void *)(v1 + 336));
  uint64_t v27 = sub_1004E6034(v26);
  *(void *)(v1 + 544) = v27;
  if (!v27) {
    goto LABEL_19;
  }
  char v28 = v27;
  *(void *)(v1 + 200) = &OBJC_PROTOCOL___IXCoordinatorWithInstallOptions;
  uint64_t v29 = swift_dynamicCastObjCProtocolConditional();
  *(void *)(v1 + 552) = v29;
  if (!v29)
  {

LABEL_19:
    long long v233 = v15;
    *(void *)v220 = v14;
    uint64_t v41 = (void **)(v1 + 192);
    uint64_t v42 = *(void *)(v1 + 392);
    uint64_t v43 = *(void *)(v1 + 264);
    static Logger.install.getter();
    sub_10028E674(v43, v42);
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    BOOL v46 = os_log_type_enabled(v44, v45);
    uint64_t v47 = *(void ***)(v1 + 392);
    if (v46)
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      uint64_t v49 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v48 = 138412290;
      uint64_t v50 = *v47;
      *uint64_t v41 = *v47;
      id v51 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v49 = v50;
      sub_10028E6D8((uint64_t)v47);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "[%@] Coordinator is missing - checking if application is installed", v48, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      uint64_t v1 = v238;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10028E6D8((uint64_t)v47);
    }
    uint64_t v52 = *(void *)(v1 + 472);
    uint64_t v54 = *(void *)(v1 + 432);
    uint64_t v53 = *(void *)(v1 + 440);
    uint64_t v56 = *(void *)(v1 + 272);
    uint64_t v55 = *(void *)(v1 + 280);

    v233(v52, v54);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56))(v55, 1, 1, v54);
    sub_100017238(v55, v56, (uint64_t *)&unk_100661AB0);
    swift_bridgeObjectRetain_n();
    uint64_t v57 = sub_100011088("LSApplicationRecord", 19, 2, 0, 1, 1, v56, (void *)&_mh_execute_header);
    uint64_t v58 = (void *)v1;
    uint64_t v60 = v59;
    uint64_t v62 = v61;
    uint64_t v64 = v63;
    if (qword_10065B150 != -1) {
      swift_once();
    }
    v58[9] = v57;
    v58[10] = v60;
    v58[11] = v62;
    v58[12] = v64;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1000172F8(&qword_10065F9C0);
    swift_task_localValuePush();
    os_unfair_lock_lock((os_unfair_lock_t)(v60 + 24));
    sub_100006238((void **)(v60 + 16), v239);
    os_unfair_lock_unlock((os_unfair_lock_t)(v60 + 24));
    uint64_t v65 = (id *)(v58 + 13);
    uint64_t v66 = v239[0];
    if (v239[0])
    {
      sub_10000E2EC();
    }
    id v67 = objc_allocWithZone((Class)LSApplicationIdentity);
    unint64_t v68 = v235;
    swift_bridgeObjectRetain();
    NSString v69 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v70 = [v67 initWithBundleIdentifier:v69 URL:0 personaUniqueString:0 personaType:4];

    *uint64_t v65 = 0;
    id v71 = [v70 findApplicationRecordFetchingPlaceholder:0 error:v65];
    id v72 = *v65;
    if (v71)
    {

      swift_bridgeObjectRelease();
      uint64_t v73 = v71;
    }
    else
    {
      unint64_t v98 = v72;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
      swift_bridgeObjectRelease();
      uint64_t v73 = 0;
    }
    uint64_t v99 = *(void *)(v238 + 280);
    swift_task_localValuePop();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    sub_10001729C(v99, (uint64_t *)&unk_100661AB0);
    if (v73)
    {
      uint64_t v100 = *(os_unfair_lock_s **)(*(void *)v220 + 16);
      swift_retain();
      uint64_t v101 = sub_100312268(3, v100);
      char v103 = v102;
      swift_release();
      if (v103)
      {
      }
      else
      {
        uint64_t v104 = v238;
        id v105 = [v73 iTunesMetadata];
        id v106 = [v105 versionIdentifier];

        uint64_t v107 = *(void *)(v238 + 264);
        if ((id)v101 == v106)
        {
          long long v227 = v71;
          uint64_t v108 = *(void *)(v238 + 384);
          swift_bridgeObjectRelease();
          static Logger.install.getter();
          sub_10028E674(v107, v108);
          uint64_t v109 = Logger.logObject.getter();
          os_log_type_t v110 = static os_log_type_t.default.getter();
          BOOL v111 = os_log_type_enabled(v109, v110);
          uint64_t v112 = *(void *)(v238 + 464);
          uint64_t v236 = *(void *)(v238 + 432);
          int64_t v113 = *(void ***)(v238 + 384);
          uint64_t v115 = *(void *)(v238 + 344);
          uint64_t v114 = *(void *)(v238 + 352);
          uint64_t v116 = *(void *)(v238 + 336);
          if (v111)
          {
            uint64_t v224 = *(void *)(v238 + 464);
            uint64_t v117 = swift_slowAlloc();
            os_log_type_t type = v110;
            uint64_t v118 = (void *)swift_slowAlloc();
            v239[0] = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v117 = 138412546;
            uint64_t v119 = *v113;
            *(void *)(v238 + 168) = *v113;
            id v120 = v119;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v118 = v119;
            sub_10028E6D8((uint64_t)v113);
            *(_WORD *)(v117 + 12) = 2080;
            *(void *)(v238 + 176) = v101;
            uint64_t v104 = v238;
            uint64_t v121 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v238 + 184) = sub_1000143F4(v121, v122, (uint64_t *)v239);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v109, type, "[%@] Expected application appears to be installed with version: %s, proceeding to postamble", (uint8_t *)v117, 0x16u);
            sub_1000172F8(&qword_10065DB10);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            v233(v224, v236);
          }
          else
          {

            sub_10028E6D8((uint64_t)v113);
            v233(v112, v236);
          }
          (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v114, v116);
          **(unsigned char **)(v104 + 256) = 3;
          type metadata accessor for AppInstallTaskResult();
          goto LABEL_41;
        }
        uint64_t v131 = *(void *)(v238 + 376);
        static Logger.install.getter();
        sub_10028E674(v107, v131);
        long long v132 = Logger.logObject.getter();
        os_log_type_t v221 = static os_log_type_t.error.getter();
        BOOL v133 = os_log_type_enabled(v132, v221);
        uint64_t v134 = *(void *)(v238 + 456);
        uint64_t v135 = *(void *)(v238 + 432);
        unint64_t v136 = *(void ***)(v238 + 376);
        if (v133)
        {
          uint64_t v219 = *(void *)(v238 + 432);
          uint64_t v137 = swift_slowAlloc();
          os_log_t log = (os_log_t)swift_slowAlloc();
          v239[0] = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v137 = 138412802;
          unint64_t v138 = *v136;
          *(void *)(v238 + 128) = *v136;
          id v139 = v138;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          log->isa = (Class)v138;
          sub_10028E6D8((uint64_t)v136);
          *(_WORD *)(v137 + 12) = 2080;
          *(void *)(v238 + 136) = v101;
          uint64_t v140 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v238 + 144) = sub_1000143F4(v140, v141, (uint64_t *)v239);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v137 + 22) = 2080;
          *(void *)(v238 + 152) = v106;
          uint64_t v142 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v238 + 160) = sub_1000143F4(v142, v143, (uint64_t *)v239);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v132, v221, "[%@] Expected application with version: %s not installed. Installed version is: %s", (uint8_t *)v137, 0x20u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v144 = v134;
          uint64_t v145 = v219;
        }
        else
        {

          sub_10028E6D8((uint64_t)v136);
          uint64_t v144 = v134;
          uint64_t v145 = v135;
        }
        v233(v144, v145);
        unint64_t v68 = v235;
      }
    }
    long long v149 = (void *)v238;
    uint64_t v150 = *(void *)(v238 + 368);
    uint64_t v151 = *(void *)(v238 + 264);
    static Logger.install.getter();
    sub_10028E674(v151, v150);
    swift_bridgeObjectRetain();
    uint64_t v152 = Logger.logObject.getter();
    os_log_type_t v153 = static os_log_type_t.error.getter();
    BOOL v154 = os_log_type_enabled(v152, v153);
    uint64_t v155 = *(void *)(v238 + 448);
    uint64_t v156 = *(void *)(v238 + 432);
    uint64_t v157 = *(void ***)(v238 + 368);
    if (v154)
    {
      uint64_t v237 = *(void *)(v238 + 448);
      unint64_t v158 = v68;
      uint64_t v159 = swift_slowAlloc();
      unint64_t v218 = v152;
      uint64_t v160 = (void *)swift_slowAlloc();
      v239[0] = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v159 = 138412546;
      char v161 = *v157;
      *(void *)(v238 + 112) = *v157;
      id v162 = v161;
      long long v149 = (void *)v238;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v160 = v161;
      sub_10028E6D8((uint64_t)v157);
      *(_WORD *)(v159 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)(v238 + 120) = sub_1000143F4(v226, v158, (uint64_t *)v239);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v163 = v237;
    }
    else
    {
      sub_10028E6D8(*(void *)(v238 + 368));
      swift_bridgeObjectRelease_n();

      uint64_t v163 = v155;
    }
    v233(v163, v156);
    uint64_t v165 = v149[43];
    uint64_t v164 = v149[44];
    uint64_t v166 = v149[42];
    type metadata accessor for InternalError();
    sub_10019FE50();
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v165 + 16))(v167, v164, v166);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    goto LABEL_66;
  }
  swift_retain();
  id v30 = v28;
  char v31 = sub_100312470(4, v16);
  uint64_t result = swift_release();
  if (v31 == 2)
  {
    __break(1u);
    return result;
  }
  if ((v31 & 1) == 0)
  {
    uint64_t v32 = *(void *)(v1 + 400);
    uint64_t v33 = *(void *)(v1 + 264);
    swift_bridgeObjectRelease();
    static Logger.install.getter();
    sub_10028E674(v33, v32);
    os_log_type_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    BOOL v36 = os_log_type_enabled(v34, v35);
    uint64_t v37 = *(void ***)(v1 + 400);
    if (v36)
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      long long v229 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 138412290;
      long long v232 = v15;
      uint64_t v39 = *v37;
      *(void *)(v1 + 208) = *v37;
      id v40 = v39;
      uint64_t v1 = v238;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *long long v229 = v39;
      uint64_t v15 = v232;
      sub_10028E6D8((uint64_t)v37);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "[%@] Parking to wait for device approval to be granted", v38, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_10028E6D8((uint64_t)v37);
    }

    uint64_t v96 = *(void *)(v1 + 344);
    uint64_t v95 = *(void *)(v1 + 352);
    uint64_t v97 = *(void *)(v1 + 336);
    v15(*(void *)(v1 + 480), *(void *)(v1 + 432));
    (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v95, v97);
    type metadata accessor for AppInstallScheduler.ParkReason();
    swift_storeEnumTagMultiPayload();
    type metadata accessor for AppInstallTaskResult();
    goto LABEL_41;
  }
  *(void *)(v1 + 216) = &OBJC_PROTOCOL___IXCoordinatorWithDeviceSecurityPromise;
  uint64_t v74 = swift_dynamicCastObjCProtocolConditional();
  if (!v74
    || ((uint64_t v75 = v74, swift_getObjectType(), sub_10018B1DC(0, &qword_10065C700), swift_dynamicCastMetatype())
      ? (uint64_t v76 = v75)
      : (uint64_t v76 = 0),
        !v76))
  {
    uint64_t v86 = *(os_unfair_lock_s **)(*(void *)(v1 + 264) + 16);
    swift_retain();
    uint64_t v87 = sub_100312690(11, v86);
    uint64_t v89 = v88;
    swift_release();
    *(void *)(v1 + 592) = v89;
    if (v89)
    {
      uint64_t v90 = *(void *)(v1 + 296);
      (*(void (**)(void, void, void))(*(void *)(v1 + 312) + 104))(*(void *)(v1 + 320), enum case for ManagedAppStatus.State.installing(_:), *(void *)(v1 + 304));
      uint64_t v91 = type metadata accessor for ManagedAppStatus.Reason();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v91 - 8) + 56))(v90, 1, 1, v91);
      uint64_t v92 = (void *)swift_task_alloc();
      *(void *)(v1 + 600) = v92;
      void *v92 = v1;
      v92[1] = sub_10028C974;
      uint64_t v93 = *(void *)(v1 + 296);
      uint64_t v94 = *(void *)(v1 + 320);
      return sub_10023FB0C(v94, v93, v87, v89, 0);
    }
    *(void *)(v1 + 616) = sub_10028E0A8();
    uint64_t v168 = *(os_unfair_lock_s **)(*(void *)(v1 + 264) + 32);
    swift_retain();
    sub_100312814(6, v168, (uint64_t)v239);
    swift_release();
    uint64_t v169 = v239[0];
    uint64_t v170 = v239[1];
    *(void **)(v1 + 624) = v239[0];
    *(void *)(v1 + 632) = v170;
    uint64_t v171 = v240;
    unint64_t v172 = v241;
    *(void *)(v1 + 640) = v240;
    *(void *)(v1 + 648) = v172;
    uint64_t v173 = v242;
    uint64_t v174 = v243;
    *(void *)(v1 + 656) = v242;
    *(void *)(v1 + 664) = v174;
    uint64_t v176 = v244;
    uint64_t v175 = v245;
    *(void *)(v1 + 672) = v244;
    *(void *)(v1 + 680) = v175;
    uint64_t v178 = v246;
    unint64_t v177 = v247;
    *(void *)(v1 + 688) = v246;
    *(void *)(v1 + 696) = v177;
    unint64_t v179 = v248;
    unint64_t v180 = v249;
    *(void *)(v1 + 704) = v248;
    *(void *)(v1 + 712) = v180;
    uint64_t v181 = v250;
    uint64_t v182 = v251;
    *(void *)(v1 + 720) = v250;
    *(void *)(v1 + 728) = v182;
    if ((~v179 & 0x3000000000000000) != 0 || (v180 & 0xFFFFFFFFFFFFFFFELL) != 0x7FFFFFFE)
    {
      uint64_t v183 = (void *)v238;
      uint64_t v184 = *(void *)(v238 + 536);
      if (v180 >> 62 == 1)
      {
        uint64_t v185 = *(void *)(v238 + 528);
        uint64_t v186 = *(void *)(v238 + 360);
        uint64_t v187 = *(void *)(v238 + 288);
        uint64_t v188 = *(void *)(v238 + 264);
        *(void *)(v238 + 16) = v175;
        *(void *)(v238 + 24) = v178;
        *(void *)(v238 + 32) = v177;
        *(void *)(v238 + 40) = v179;
        *(unsigned char *)(v238 + 48) = v180 & 1;
        *(void *)(v238 + 56) = v181;
        *(void *)(v238 + 64) = v182;
        uint64_t v189 = v177;
        uint64_t v190 = v184;
        sub_100017238(v188 + *(int *)(v186 + 32), v187, &qword_10065E410);
        uint64_t v191 = (void *)swift_task_alloc();
        *(void *)(v238 + 736) = v191;
        v191[2] = v238 + 16;
        v191[3] = v185;
        v191[4] = v190;
        sub_100012670(v189, v179);
        uint64_t v192 = dword_100660670;
        swift_bridgeObjectRetain();
        unint64_t v193 = (void *)swift_task_alloc();
        *(void *)(v238 + 744) = v193;
        *unint64_t v193 = v238;
        v193[1] = sub_10028D2D8;
        return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100660670 + v192))((uint64_t)v193, (uint64_t)sub_10028E880, (uint64_t)v191);
      }
      unint64_t v222 = v177;
      uint64_t v225 = (uint64_t)v169;
      unint64_t v228 = (unint64_t)v170;
      uint64_t v231 = v171;
      unint64_t v234 = v172;
      swift_bridgeObjectRelease();
      sub_10028E734(v225, v228, v231, v234, v173, v174, v176, v175, v178, v222, v179, v180);
    }
    else
    {
      uint64_t v183 = (void *)v238;
      swift_bridgeObjectRelease();
    }
    uint64_t v194 = v183 + 28;
    uint64_t v195 = v183[51];
    uint64_t v196 = v183[33];
    static Logger.install.getter();
    sub_10028E674(v196, v195);
    uint64_t v197 = Logger.logObject.getter();
    os_log_type_t v198 = static os_log_type_t.default.getter();
    BOOL v199 = os_log_type_enabled(v197, v198);
    uint64_t v200 = (void **)v183[51];
    if (v199)
    {
      v201 = (uint8_t *)swift_slowAlloc();
      unint64_t v202 = (void *)swift_slowAlloc();
      *(_DWORD *)v201 = 138412290;
      uint64_t v203 = *v200;
      v183[29] = *v200;
      id v204 = v203;
      uint64_t v183 = (void *)v238;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v202 = v203;
      sub_10028E6D8((uint64_t)v200);
      _os_log_impl((void *)&_mh_execute_header, v197, v198, "[%@] Setting install options", v201, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10028E6D8(v183[51]);
    }
    uint64_t v205 = v183[77];
    v206 = (void *)v183[69];
    unint64_t v207 = (void (*)(uint64_t, uint64_t))v183[64];
    uint64_t v208 = v183[61];
    uint64_t v209 = v183[54];

    v207(v208, v209);
    v183[28] = 0;
    unsigned int v210 = [v206 setInstallOptions:v205 error:v194];
    unint64_t v211 = (void *)v183[28];
    uint64_t v212 = (void *)v183[77];
    uint64_t v213 = (void *)v183[68];
    uint64_t v165 = v183[43];
    uint64_t v164 = v183[44];
    uint64_t v166 = v183[42];
    if (v210)
    {
      id v214 = v211;

      (*(void (**)(uint64_t, uint64_t))(v165 + 8))(v164, v166);
      type metadata accessor for AppInstallScheduler.ParkReason();
      swift_storeEnumTagMultiPayload();
      type metadata accessor for AppInstallTaskResult();
LABEL_41:
      swift_storeEnumTagMultiPayload();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v24 = *(uint64_t (**)(void))(v238 + 8);
      goto LABEL_9;
    }
    id v215 = v211;
    _convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_66:
    (*(void (**)(uint64_t, uint64_t))(v165 + 8))(v164, v166);
    goto LABEL_8;
  }
  uint64_t v77 = *(void *)(v1 + 416);
  uint64_t v78 = *(void *)(v1 + 264);
  id v230 = v30;
  static Logger.install.getter();
  sub_10028E674(v78, v77);
  uint64_t v79 = Logger.logObject.getter();
  os_log_type_t v80 = static os_log_type_t.default.getter();
  BOOL v81 = os_log_type_enabled(v79, v80);
  uint64_t v82 = *(void ***)(v1 + 416);
  if (v81)
  {
    uint64_t v83 = (uint8_t *)swift_slowAlloc();
    long long v223 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v83 = 138412290;
    char v84 = *v82;
    *(void *)(v238 + 240) = *v82;
    id v85 = v84;
    uint64_t v1 = v238;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v223 = v84;
    sub_10028E6D8((uint64_t)v82);
    _os_log_impl((void *)&_mh_execute_header, v79, v80, "[%@] Completing device security promise", v83, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10028E6D8(*(void *)(v1 + 416));
  }
  uint64_t v123 = *(void *)(v1 + 496);
  uint64_t v124 = *(void *)(v1 + 432);

  v15(v123, v124);
  id v125 = objc_allocWithZone((Class)IXPromisedOutOfBandTransfer);
  NSString v126 = String._bridgeToObjectiveC()();
  id v127 = [v125 initWithName:v126 client:28 diskSpaceNeeded:0];
  *(void *)(v1 + 560) = v127;

  if (!v127)
  {
    uint64_t v147 = *(void *)(v1 + 344);
    uint64_t v146 = *(void *)(v1 + 352);
    uint64_t v148 = *(void *)(v1 + 336);
    type metadata accessor for InternalError();
    sub_10019FE50();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v147 + 8))(v146, v148);

    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  [v127 setComplete:1];
  uint64_t v128 = swift_task_alloc();
  *(void *)(v1 + 568) = v128;
  *(void *)(v128 + 16) = v76;
  *(void *)(v128 + 24) = v127;
  uint64_t v129 = dword_10065DC08;
  long long v130 = (void *)swift_task_alloc();
  *(void *)(v1 + 576) = v130;
  *long long v130 = v1;
  v130[1] = sub_10028BF18;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10065DC08 + v129))((uint64_t)v127, (int *)&unk_10065E548);
}

uint64_t sub_10028BF18()
{
  *(void *)(*(void *)v1 + 584) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v2 = sub_10028DA2C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_10028C094;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10028C094()
{
  uint64_t v83 = v0;
  uint64_t v1 = *(void **)(v0 + 544);

  uint64_t v2 = *(void *)(v0 + 584);
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)(v0 + 264) + 16);
  swift_retain();
  uint64_t v4 = sub_100312690(11, v3);
  uint64_t v6 = v5;
  swift_release();
  *(void *)(v0 + 592) = v6;
  if (v6)
  {
    uint64_t v7 = *(void *)(v0 + 296);
    (*(void (**)(void, void, void))(*(void *)(v0 + 312) + 104))(*(void *)(v0 + 320), enum case for ManagedAppStatus.State.installing(_:), *(void *)(v0 + 304));
    uint64_t v8 = type metadata accessor for ManagedAppStatus.Reason();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
    id v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 600) = v9;
    *id v9 = v0;
    v9[1] = sub_10028C974;
    uint64_t v10 = *(void *)(v0 + 320);
    uint64_t v11 = *(void *)(v0 + 296);
    return sub_10023FB0C(v10, v11, v4, v6, 0);
  }
  *(void *)(v0 + 616) = sub_10028E0A8();
  if (v2)
  {
    uint64_t v13 = *(void **)(v0 + 544);
    (*(void (**)(void, void))(*(void *)(v0 + 344) + 8))(*(void *)(v0 + 352), *(void *)(v0 + 336));

    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  uint64_t v15 = *(os_unfair_lock_s **)(*(void *)(v0 + 264) + 32);
  swift_retain();
  sub_100312814(6, v15, (uint64_t)v70);
  swift_release();
  uint64_t v16 = v70[0];
  unint64_t v17 = v70[1];
  *(void *)(v0 + 624) = v70[0];
  *(void *)(v0 + 632) = v17;
  uint64_t v18 = v71;
  unint64_t v19 = v72;
  *(void *)(v0 + 640) = v71;
  *(void *)(v0 + 648) = v19;
  uint64_t v21 = v73;
  uint64_t v20 = v74;
  *(void *)(v0 + 656) = v73;
  *(void *)(v0 + 664) = v20;
  uint64_t v23 = v75;
  uint64_t v22 = v76;
  *(void *)(v0 + 672) = v75;
  *(void *)(v0 + 680) = v22;
  uint64_t v25 = v77;
  unint64_t v24 = v78;
  *(void *)(v0 + 688) = v77;
  *(void *)(v0 + 696) = v24;
  unint64_t v26 = v79;
  unint64_t v27 = v80;
  *(void *)(v0 + 704) = v79;
  *(void *)(v0 + 712) = v27;
  uint64_t v28 = v81;
  uint64_t v29 = v82;
  *(void *)(v0 + 720) = v81;
  *(void *)(v0 + 728) = v29;
  if ((~v26 & 0x3000000000000000) == 0 && (v27 & 0xFFFFFFFFFFFFFFFELL) == 0x7FFFFFFE)
  {
    swift_bridgeObjectRelease();
LABEL_19:
    uint64_t v40 = v0 + 224;
    uint64_t v41 = *(void *)(v0 + 408);
    uint64_t v42 = *(void *)(v0 + 264);
    static Logger.install.getter();
    sub_10028E674(v42, v41);
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.default.getter();
    BOOL v45 = os_log_type_enabled(v43, v44);
    BOOL v46 = *(void ***)(v0 + 408);
    if (v45)
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      uint64_t v48 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v47 = 138412290;
      uint64_t v49 = *v46;
      *(void *)(v0 + 232) = *v46;
      id v50 = v49;
      uint64_t v40 = v0 + 224;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v48 = v49;
      sub_10028E6D8((uint64_t)v46);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "[%@] Setting install options", v47, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10028E6D8(*(void *)(v0 + 408));
    }
    uint64_t v51 = *(void *)(v0 + 616);
    uint64_t v52 = *(void **)(v0 + 552);
    uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v0 + 512);
    uint64_t v54 = *(void *)(v0 + 488);
    uint64_t v55 = *(void *)(v0 + 432);

    v53(v54, v55);
    *(void *)(v0 + 224) = 0;
    unsigned int v56 = [v52 setInstallOptions:v51 error:v40];
    uint64_t v57 = *(void **)(v0 + 224);
    uint64_t v58 = *(void **)(v0 + 616);
    uint64_t v59 = *(void **)(v0 + 544);
    uint64_t v61 = *(void *)(v0 + 344);
    uint64_t v60 = *(void *)(v0 + 352);
    uint64_t v62 = *(void *)(v0 + 336);
    if (v56)
    {
      id v63 = v57;

      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
      type metadata accessor for AppInstallScheduler.ParkReason();
      swift_storeEnumTagMultiPayload();
      type metadata accessor for AppInstallTaskResult();
      swift_storeEnumTagMultiPayload();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_8;
    }
    id v64 = v57;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
LABEL_7:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
LABEL_8:
    return v14();
  }
  uint64_t v30 = *(void *)(v0 + 536);
  if (v27 >> 62 != 1)
  {
    unint64_t v65 = v24;
    uint64_t v66 = v16;
    unint64_t v67 = v17;
    uint64_t v68 = v18;
    unint64_t v69 = v19;
    swift_bridgeObjectRelease();
    sub_10028E734(v66, v67, v68, v69, v21, v20, v23, v22, v25, v65, v26, v27);
    goto LABEL_19;
  }
  uint64_t v31 = *(void *)(v0 + 528);
  uint64_t v32 = *(void *)(v0 + 360);
  uint64_t v33 = *(void *)(v0 + 288);
  uint64_t v34 = *(void *)(v0 + 264);
  *(void *)(v0 + 16) = v22;
  *(void *)(v0 + 24) = v25;
  *(void *)(v0 + 32) = v24;
  *(void *)(v0 + 40) = v26;
  *(unsigned char *)(v0 + 48) = v27 & 1;
  *(void *)(v0 + 56) = v28;
  *(void *)(v0 + 64) = v29;
  uint64_t v35 = v24;
  uint64_t v36 = v30;
  sub_100017238(v34 + *(int *)(v32 + 32), v33, &qword_10065E410);
  uint64_t v37 = (void *)swift_task_alloc();
  *(void *)(v0 + 736) = v37;
  v37[2] = v0 + 16;
  v37[3] = v31;
  v37[4] = v36;
  sub_100012670(v35, v26);
  uint64_t v38 = dword_100660670;
  swift_bridgeObjectRetain();
  uint64_t v39 = (void *)swift_task_alloc();
  *(void *)(v0 + 744) = v39;
  *uint64_t v39 = v0;
  v39[1] = sub_10028D2D8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100660670 + v38))((uint64_t)v39, (uint64_t)sub_10028E880, (uint64_t)v37);
}

uint64_t sub_10028C974()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 608) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = v2[39];
    uint64_t v3 = v2[40];
    uint64_t v7 = v2 + 37;
    uint64_t v5 = v2[37];
    uint64_t v6 = v7[1];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001729C(v5, &qword_10065E4D0);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v6);
    uint64_t v8 = sub_10028DC2C;
  }
  else
  {
    uint64_t v10 = v2[39];
    uint64_t v9 = v2[40];
    uint64_t v13 = v2 + 37;
    uint64_t v11 = v2[37];
    uint64_t v12 = v13[1];
    swift_bridgeObjectRelease();
    sub_10001729C(v11, &qword_10065E4D0);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v12);
    uint64_t v8 = sub_10028CB4C;
  }
  return _swift_task_switch(v8, 0, 0);
}

uint64_t sub_10028CB4C()
{
  uint64_t v73 = v0;
  uint64_t v1 = *(void *)(v0 + 608);
  *(void *)(v0 + 616) = sub_10028E0A8();
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 544);
    (*(void (**)(void, void))(*(void *)(v0 + 344) + 8))(*(void *)(v0 + 352), *(void *)(v0 + 336));

    swift_bridgeObjectRelease();
    goto LABEL_3;
  }
  uint64_t v5 = *(os_unfair_lock_s **)(*(void *)(v0 + 264) + 32);
  swift_retain();
  sub_100312814(6, v5, (uint64_t)v60);
  swift_release();
  uint64_t v6 = v60[0];
  unint64_t v7 = v60[1];
  *(void *)(v0 + 624) = v60[0];
  *(void *)(v0 + 632) = v7;
  uint64_t v8 = v61;
  unint64_t v9 = v62;
  *(void *)(v0 + 640) = v61;
  *(void *)(v0 + 648) = v9;
  uint64_t v11 = v63;
  uint64_t v10 = v64;
  *(void *)(v0 + 656) = v63;
  *(void *)(v0 + 664) = v10;
  uint64_t v13 = v65;
  uint64_t v12 = v66;
  *(void *)(v0 + 672) = v65;
  *(void *)(v0 + 680) = v12;
  uint64_t v15 = v67;
  unint64_t v14 = v68;
  *(void *)(v0 + 688) = v67;
  *(void *)(v0 + 696) = v14;
  unint64_t v16 = v69;
  unint64_t v17 = v70;
  *(void *)(v0 + 704) = v69;
  *(void *)(v0 + 712) = v17;
  uint64_t v18 = v71;
  uint64_t v19 = v72;
  *(void *)(v0 + 720) = v71;
  *(void *)(v0 + 728) = v19;
  if ((~v16 & 0x3000000000000000) == 0 && (v17 & 0xFFFFFFFFFFFFFFFELL) == 0x7FFFFFFE)
  {
    swift_bridgeObjectRelease();
LABEL_15:
    uint64_t v30 = v0 + 224;
    uint64_t v31 = *(void *)(v0 + 408);
    uint64_t v32 = *(void *)(v0 + 264);
    static Logger.install.getter();
    sub_10028E674(v32, v31);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    BOOL v35 = os_log_type_enabled(v33, v34);
    uint64_t v36 = *(void ***)(v0 + 408);
    if (v35)
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v38 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 138412290;
      uint64_t v39 = *v36;
      *(void *)(v0 + 232) = *v36;
      id v40 = v39;
      uint64_t v30 = v0 + 224;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v38 = v39;
      sub_10028E6D8((uint64_t)v36);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "[%@] Setting install options", v37, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10028E6D8(*(void *)(v0 + 408));
    }
    uint64_t v41 = *(void *)(v0 + 616);
    uint64_t v42 = *(void **)(v0 + 552);
    uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v0 + 512);
    uint64_t v44 = *(void *)(v0 + 488);
    uint64_t v45 = *(void *)(v0 + 432);

    v43(v44, v45);
    *(void *)(v0 + 224) = 0;
    unsigned int v46 = [v42 setInstallOptions:v41 error:v30];
    uint64_t v47 = *(void **)(v0 + 224);
    uint64_t v48 = *(void **)(v0 + 616);
    uint64_t v49 = *(void **)(v0 + 544);
    uint64_t v51 = *(void *)(v0 + 344);
    uint64_t v50 = *(void *)(v0 + 352);
    uint64_t v52 = *(void *)(v0 + 336);
    if (v46)
    {
      id v53 = v47;

      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
      type metadata accessor for AppInstallScheduler.ParkReason();
      swift_storeEnumTagMultiPayload();
      type metadata accessor for AppInstallTaskResult();
      swift_storeEnumTagMultiPayload();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_4;
    }
    id v54 = v47;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
LABEL_3:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
LABEL_4:
    return v3();
  }
  uint64_t v20 = *(void *)(v0 + 536);
  if (v17 >> 62 != 1)
  {
    unint64_t v55 = v14;
    uint64_t v56 = v6;
    unint64_t v57 = v7;
    uint64_t v58 = v8;
    unint64_t v59 = v9;
    swift_bridgeObjectRelease();
    sub_10028E734(v56, v57, v58, v59, v11, v10, v13, v12, v15, v55, v16, v17);
    goto LABEL_15;
  }
  uint64_t v21 = *(void *)(v0 + 528);
  uint64_t v22 = *(void *)(v0 + 360);
  uint64_t v23 = *(void *)(v0 + 288);
  uint64_t v24 = *(void *)(v0 + 264);
  *(void *)(v0 + 16) = v12;
  *(void *)(v0 + 24) = v15;
  *(void *)(v0 + 32) = v14;
  *(void *)(v0 + 40) = v16;
  *(unsigned char *)(v0 + 48) = v17 & 1;
  *(void *)(v0 + 56) = v18;
  *(void *)(v0 + 64) = v19;
  uint64_t v25 = v14;
  uint64_t v26 = v20;
  sub_100017238(v24 + *(int *)(v22 + 32), v23, &qword_10065E410);
  unint64_t v27 = (void *)swift_task_alloc();
  *(void *)(v0 + 736) = v27;
  v27[2] = v0 + 16;
  v27[3] = v21;
  v27[4] = v26;
  sub_100012670(v25, v16);
  uint64_t v28 = dword_100660670;
  swift_bridgeObjectRetain();
  uint64_t v29 = (void *)swift_task_alloc();
  *(void *)(v0 + 744) = v29;
  *uint64_t v29 = v0;
  v29[1] = sub_10028D2D8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100660670 + v28))((uint64_t)v29, (uint64_t)sub_10028E880, (uint64_t)v27);
}

uint64_t sub_10028D2D8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 752) = v0;
  swift_task_dealloc();
  sub_10001729C(*(void *)(v2 + 288), &qword_10065E410);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  if (v0) {
    uint64_t v3 = sub_10028DE20;
  }
  else {
    uint64_t v3 = sub_10028D480;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10028D480()
{
  unint64_t v1 = v0[89];
  unint64_t v2 = v0[88];
  unint64_t v3 = v0[87];
  uint64_t v33 = v0[86];
  uint64_t v36 = v0[84];
  uint64_t v37 = v0[85];
  uint64_t v35 = v0[83];
  uint64_t v34 = v0[82];
  unint64_t v4 = v0[81];
  uint64_t v5 = v0[80];
  unint64_t v6 = v0[79];
  uint64_t v7 = v0[78];
  sub_100013510(v3, v2);
  swift_bridgeObjectRelease();
  sub_10028E734(v7, v6, v5, v4, v34, v35, v36, v37, v33, v3, v2, v1);
  uint64_t v8 = v0[51];
  uint64_t v9 = v0[33];
  static Logger.install.getter();
  sub_10028E674(v9, v8);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (void **)v0[51];
    uint64_t v38 = (uint64_t)v12;
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    unint64_t v14 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 138412290;
    uint64_t v15 = *v12;
    v0[29] = v15;
    id v16 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v14 = v15;
    sub_10028E6D8(v38);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "[%@] Setting install options", v13, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10028E6D8(v0[51]);
  }
  uint64_t v17 = v0[77];
  uint64_t v18 = (void *)v0[69];
  uint64_t v19 = (void (*)(uint64_t, uint64_t))v0[64];
  uint64_t v20 = v0[61];
  uint64_t v21 = v0[54];

  v19(v20, v21);
  v0[28] = 0;
  unsigned int v22 = [v18 setInstallOptions:v17 error:v0 + 28];
  uint64_t v23 = (void *)v0[28];
  uint64_t v24 = (void *)v0[77];
  uint64_t v25 = (void *)v0[68];
  uint64_t v27 = v0[43];
  uint64_t v26 = v0[44];
  uint64_t v28 = v0[42];
  if (v22)
  {
    id v29 = v23;

    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
    type metadata accessor for AppInstallScheduler.ParkReason();
    swift_storeEnumTagMultiPayload();
    type metadata accessor for AppInstallTaskResult();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    id v31 = v23;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v30 = (uint64_t (*)(void))v0[1];
  return v30();
}

uint64_t sub_10028DA2C()
{
  unint64_t v1 = *(void **)(v0 + 544);
  uint64_t v3 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 352);
  uint64_t v4 = *(void *)(v0 + 336);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10028DC2C()
{
  unint64_t v1 = (void *)v0[68];
  uint64_t v3 = v0[43];
  uint64_t v2 = v0[44];
  uint64_t v4 = v0[42];

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10028DE20()
{
  unint64_t v13 = v0[89];
  unint64_t v1 = v0[88];
  unint64_t v2 = v0[87];
  uint64_t v12 = v0[86];
  uint64_t v16 = v0[84];
  uint64_t v17 = v0[85];
  uint64_t v14 = v0[82];
  uint64_t v15 = v0[83];
  unint64_t v11 = v0[81];
  uint64_t v3 = v0[80];
  unint64_t v4 = v0[79];
  uint64_t v5 = v0[78];
  unint64_t v6 = (void *)v0[77];
  uint64_t v7 = (void *)v0[68];
  uint64_t v8 = v0[43];
  uint64_t v18 = v0[42];
  uint64_t v19 = v0[44];
  sub_100013510(v2, v1);
  swift_bridgeObjectRelease();

  sub_10028E734(v5, v4, v3, v11, v14, v15, v16, v17, v12, v2, v1, v13);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v19, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

id sub_10028E0A8()
{
  id v1 = [objc_allocWithZone((Class)MIInstallOptions) init];
  [v1 setInstallTargetType:1];
  unint64_t v2 = *(os_unfair_lock_s **)(v0 + 16);
  swift_retain();
  uint64_t v3 = sub_10050B1C0(34, v2);
  unint64_t v5 = v4;
  swift_release();
  if (v5 >> 60 != 15)
  {
    long long v41 = 0u;
    long long v42 = 0u;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [(objc_class *)isa getBytes:&v41 length:32];

    [v1 setInstallationRequestorAuditToken:&v41];
    sub_10018AE44(v3, v5);
  }
  swift_retain();
  char v7 = sub_100312B1C(32, v2);
  swift_release();
  if (v7 == 4) {
    goto LABEL_10;
  }
  if (v7 == 1) {
    [v1 setSystemAppInstall:1];
  }
  swift_retain();
  uint64_t v8 = (void *)sub_100312458(33, v2);
  swift_release();
  if (!v8)
  {
    if ((v7 & 0xFE) != 2) {
      return v1;
    }
LABEL_10:
    type metadata accessor for InternalError();
    sub_10019FE50();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    return v1;
  }
  [v8 copy];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_10018B1DC(0, (unint64_t *)&qword_10065DC30);
  swift_dynamicCast();

  uint64_t v9 = *(os_unfair_lock_s **)(v0 + 16);
  swift_retain();
  sub_100312690(11, v9);
  uint64_t v11 = v10;
  swift_release();
  if (v11)
  {
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v12 = 0;
  }
  [v40 setManagementDeclarationIdentifier:v12];

  unint64_t v13 = *(os_unfair_lock_s **)(v0 + 32);
  swift_retain();
  sub_100312998(15, v13);
  uint64_t v15 = v14;
  swift_release();
  if (v15)
  {
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v16 = 0;
  }
  [v40 setVariantID:v16];

  swift_retain();
  sub_100312814(6, v13, (uint64_t)&v41);
  swift_release();
  uint64_t v17 = v42;
  uint64_t v18 = v45;
  uint64_t v20 = v47;
  unint64_t v19 = v48;
  unint64_t v21 = v49;
  unint64_t v22 = v50;
  if ((~v49 & 0x3000000000000000) != 0 || (v50 & 0xFFFFFFFFFFFFFFFELL) != 0x7FFFFFFE)
  {
    if (v50 >> 62)
    {
      if (v50 >> 62 == 1)
      {
        unint64_t v30 = *((void *)&v41 + 1);
        uint64_t v32 = v41;
        long long v23 = v42;
        uint64_t v36 = v44;
        uint64_t v38 = v46;
        uint64_t v34 = v43;
        sub_100012670(v42, *((unint64_t *)&v42 + 1));
        swift_bridgeObjectRetain();
        uint64_t v28 = v18;
        Class v24 = Data._bridgeToObjectiveC()().super.isa;
        [v1 setSinfData:v24];

        [v1 setSinfDataType:1];
        sub_10028E734(v32, v30, v23, *((unint64_t *)&v23 + 1), v34, v36, v28, v38, v20, v19, v21, v22);
        sub_100013510(v23, *((unint64_t *)&v23 + 1));
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      unint64_t v31 = *((void *)&v41 + 1);
      uint64_t v33 = v41;
      unint64_t v27 = *((void *)&v42 + 1);
      uint64_t v37 = v44;
      uint64_t v39 = v46;
      uint64_t v35 = v43;
      sub_100012670(v47, v48);
      uint64_t v29 = v18;
      Class v25 = Data._bridgeToObjectiveC()().super.isa;
      [v1 setSinfData:v25];

      sub_10050C628(v20, v19, 1);
      sub_10028E734(v33, v31, v17, v27, v35, v37, v29, v39, v20, v19, v21, v22);
      sub_100013510(v20, v19);
    }
  }
  [v1 setITunesMetadata:v40];

  return v1;
}

void sub_10028E59C(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10043AF3C(a3, a4);
  sub_10043C77C((id *)a2);
  if (!v4)
  {
    uint64_t v9 = *(void *)(a2 + 48);
    id v10 = *(id *)a2;
    uint64_t v11 = *a1;
    *(void *)&long long v12 = *(void *)(a2 + 40);
    *((void *)&v12 + 1) = v9;
    uint64_t v13 = a3;
    uint64_t v14 = a4;
    id v15 = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
}

uint64_t sub_10028E64C@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  return sub_100289D48(a1, a2, a3, a4, a5);
}

uint64_t sub_10028E674(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IPA_InstallTask();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10028E6D8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IPA_InstallTask();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10028E734(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, unint64_t a11, unint64_t a12)
{
  if ((~a11 & 0x3000000000000000) != 0 || (a12 & 0xFFFFFFFFFFFFFFFELL) != 2147483646) {
    return sub_10028E770(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  }
  return result;
}

uint64_t sub_10028E770(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, unint64_t a11, unint64_t a12)
{
  if (a12 >> 62 == 1)
  {
    sub_100013510(a3, a4);
    swift_bridgeObjectRelease();
    sub_100013510(a10, a11);
    return swift_bridgeObjectRelease();
  }
  else if (!(a12 >> 62))
  {
    sub_10028E830(result, a2, a3, a4, a5);
    return sub_100013510(a9, a10);
  }
  return result;
}

uint64_t sub_10028E830(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 != 1)
  {
    sub_100013510(result, a2);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_10028E880(void **a1)
{
  sub_10028E59C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10028E8A0()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_10000B238;
  *(_OWORD *)(v2 + 24) = v3;
  return _swift_task_switch(sub_100263A60, 0, 0);
}

void sub_10028E94C()
{
  Hasher._combine(_:)(*(unsigned char *)v0 & 1);
  Hasher._combine(_:)(*(void *)(v0 + 8));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 16) & 1);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 17) & 1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 48))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(*(unsigned char *)(v0 + 56) & 1);
}

Swift::Int sub_10028EA14()
{
  return Hasher._finalize()();
}

Swift::Int sub_10028EA58()
{
  return Hasher._finalize()();
}

uint64_t sub_10028EA94(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  v6[0] = a1[2];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)a1 + 41);
  long long v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v8[0] = a2[2];
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)a2 + 41);
  return sub_100290F50((unsigned __int8 *)v5, (unsigned __int8 *)v7) & 1;
}

uint64_t sub_10028EAF0()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  long long v3 = sub_10028ED9C(0, 1, 1, _swiftEmptyArrayStorage);
  unint64_t v5 = v3[2];
  unint64_t v4 = v3[3];
  unint64_t v6 = v5 + 1;
  if (v5 >= v4 >> 1) {
    long long v3 = sub_10028ED9C((void *)(v4 > 1), v5 + 1, 1, v3);
  }
  v3[2] = v6;
  char v7 = &v3[2 * v5];
  v7[4] = v2;
  v7[5] = v1;
  uint64_t v8 = *(void *)(v0 + 48);
  if (v8)
  {
    uint64_t v9 = *(void *)(v0 + 40);
    unint64_t v10 = v3[3];
    swift_bridgeObjectRetain();
    if (v6 >= v10 >> 1) {
      long long v3 = sub_10028ED9C((void *)(v10 > 1), v5 + 2, 1, v3);
    }
    v3[2] = v5 + 2;
    uint64_t v11 = &v3[2 * v6];
    v11[4] = v9;
    v11[5] = v8;
  }
  if (*(unsigned char *)v0)
  {
    uint64_t v12 = *(void *)(v0 + 8);
    if (v12) {
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v14 = v3[2];
    unint64_t v13 = v3[3];
    if (v14 >= v13 >> 1) {
      long long v3 = sub_10028ED9C((void *)(v13 > 1), v14 + 1, 1, v3);
    }
    v3[2] = v14 + 1;
    id v15 = &v3[2 * v14];
    v15[4] = 0x7265776F70;
    v15[5] = 0xE500000000000000;
    uint64_t v12 = *(void *)(v0 + 8);
    if (v12)
    {
LABEL_9:
      if ((v12 & 2) != 0) {
        goto LABEL_10;
      }
      goto LABEL_18;
    }
  }
  unint64_t v17 = v3[2];
  unint64_t v16 = v3[3];
  if (v17 >= v16 >> 1) {
    long long v3 = sub_10028ED9C((void *)(v16 > 1), v17 + 1, 1, v3);
  }
  v3[2] = v17 + 1;
  uint64_t v18 = &v3[2 * v17];
  v18[4] = 0x69662D6977;
  v18[5] = 0xE500000000000000;
  if ((v12 & 2) != 0)
  {
LABEL_10:
    if ((v12 & 4) != 0) {
      goto LABEL_24;
    }
    goto LABEL_21;
  }
LABEL_18:
  unint64_t v20 = v3[2];
  unint64_t v19 = v3[3];
  if (v20 >= v19 >> 1) {
    long long v3 = sub_10028ED9C((void *)(v19 > 1), v20 + 1, 1, v3);
  }
  v3[2] = v20 + 1;
  unint64_t v21 = &v3[2 * v20];
  v21[4] = 0x7461642D68676968;
  v21[5] = 0xE900000000000061;
  if ((v12 & 4) == 0)
  {
LABEL_21:
    unint64_t v23 = v3[2];
    unint64_t v22 = v3[3];
    if (v23 >= v22 >> 1) {
      long long v3 = sub_10028ED9C((void *)(v22 > 1), v23 + 1, 1, v3);
    }
    v3[2] = v23 + 1;
    Class v24 = &v3[2 * v23];
    v24[4] = 0x736E657078656E69;
    v24[5] = 0xEB00000000657669;
  }
LABEL_24:
  sub_1000172F8((uint64_t *)&unk_10065C5D0);
  sub_10017B8C8();
  uint64_t v25 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v25;
}

void *sub_10028ED9C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000172F8(&qword_10065D360);
      unint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      unint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v10 = _swiftEmptyArrayStorage;
      unint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10029103C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10028EEAC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000172F8(&qword_10065E550);
      unint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      unint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v10 = _swiftEmptyArrayStorage;
      unint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100291130(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_10028EFBC(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_10028FFAC(a1, a2, a3, a4, &qword_10065E620);
}

void *sub_10028EFC8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000172F8(&qword_10065E618);
      unint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100291224(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10028F0F4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10028F660(a1, a2, a3, a4, &qword_100663C60);
}

uint64_t sub_10028F100(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10028F3D4(a1, a2, a3, a4, &qword_10065E0A0, (uint64_t (*)(void))type metadata accessor for AppPackageTemplate, (uint64_t (*)(void))type metadata accessor for AppPackageTemplate);
}

void *sub_10028F134(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000172F8(&qword_10065E630);
      unint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100291410(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_10028F260(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_10028F7B4(a1, a2, a3, a4, &qword_10065B908, &qword_10065E628);
}

void *sub_10028F274(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000172F8(&qword_10065E588);
      unint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4]) {
          memmove(v12, a4 + 4, 72 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100291508(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10028F3A0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10028F3D4(a1, a2, a3, a4, &qword_10065E5E0, (uint64_t (*)(void))&type metadata accessor for XPCClientMessage, (uint64_t (*)(void))&type metadata accessor for XPCClientMessage);
}

uint64_t sub_10028F3D4(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_1000172F8(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = j__malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1002926C0(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void *sub_10028F654(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10028F660(a1, a2, a3, a4, &qword_10065E6B0);
}

void *sub_10028F660(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  int64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v8 = a2;
    }
LABEL_8:
    int64_t v9 = a4[2];
    if (v8 <= v9) {
      int64_t v10 = a4[2];
    }
    else {
      int64_t v10 = v8;
    }
    if (v10)
    {
      sub_1000172F8(a5);
      unint64_t v11 = (void *)swift_allocObject();
      size_t v12 = j__malloc_size(v11);
      v11[2] = v9;
      v11[3] = 2 * v12 - 64;
      uint64_t v13 = v11 + 4;
      if (v6)
      {
LABEL_13:
        if (v11 != a4 || v13 >= (void *)((char *)a4 + v9 + 32)) {
          memmove(v13, a4 + 4, v9);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100291FB8(0, v9, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_10028F758(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10028F3D4(a1, a2, a3, a4, &qword_10065E6A8, (uint64_t (*)(void))&type metadata accessor for ManagedApp, (uint64_t (*)(void))&type metadata accessor for ManagedApp);
}

uint64_t sub_10028F78C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10028F940(a1, a2, a3, a4, &qword_10065E6A0, &qword_10065BC38);
}

char *sub_10028F7A0(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_10028F7B4(a1, a2, a3, a4, &qword_10065BD58, &qword_10065E5D0);
}

char *sub_10028F7B4(char *result, int64_t a2, char a3, char *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = *((void *)a4 + 3);
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = *((void *)a4 + 2);
    if (v10 <= v11) {
      uint64_t v12 = *((void *)a4 + 2);
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      sub_1000172F8(a5);
      uint64_t v13 = (char *)swift_allocObject();
      size_t v14 = j__malloc_size(v13);
      *((void *)v13 + 2) = v11;
      *((void *)v13 + 3) = 2 * ((uint64_t)(v14 - 32) / 40);
      uint64_t v15 = v13 + 32;
      if (v8)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[40 * v11 + 32]) {
          memmove(v15, a4 + 32, 40 * v11);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v15 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100291CC8(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_10028F8E4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10028F3D4(a1, a2, a3, a4, &qword_10065CB28, (uint64_t (*)(void))&type metadata accessor for ManagedAppStatus, (uint64_t (*)(void))&type metadata accessor for ManagedAppStatus);
}

char *sub_10028F918(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_10028F7B4(a1, a2, a3, a4, &qword_10065BDF8, &qword_10065E5E8);
}

uint64_t sub_10028F92C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10028F940(a1, a2, a3, a4, &qword_10065E608, (uint64_t *)&unk_10065D3C0);
}

uint64_t sub_10028F940(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v10 = a2;
      }
    }
  }
  else
  {
    uint64_t v10 = a2;
  }
  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_1000172F8(a5);
  uint64_t v13 = *(void *)(sub_1000172F8(a6) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (BOOL v18 = v14 == -1) : (BOOL v18 = 0), v18))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(sub_1000172F8(a6) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v16 + v20;
  if (a1)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(void *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1002920A0(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

char *sub_10028FBAC(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_10028F7B4(a1, a2, a3, a4, &qword_10065E568, &qword_10065E570);
}

uint64_t sub_10028FBC0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10028F3D4(a1, a2, a3, a4, &qword_10065E5B8, (uint64_t (*)(void))&type metadata accessor for XPCApp, (uint64_t (*)(void))&type metadata accessor for XPCApp);
}

uint64_t sub_10028FBF4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10028F3D4(a1, a2, a3, a4, &qword_100663CC0, (uint64_t (*)(void))&type metadata accessor for ApprovedDeveloper, (uint64_t (*)(void))&type metadata accessor for ApprovedDeveloper);
}

void *sub_10028FC28(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100290818(a1, a2, a3, a4, &qword_10065E580);
}

uint64_t sub_10028FC3C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10028F3D4(a1, a2, a3, a4, &qword_10065E638, (uint64_t (*)(void))&type metadata accessor for AppVersion, (uint64_t (*)(void))&type metadata accessor for AppVersion);
}

char *sub_10028FC70(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_10028F7B4(a1, a2, a3, a4, &qword_10065C6D8, &qword_10065E690);
}

uint64_t sub_10028FC84(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10028F3D4(a1, a2, a3, a4, &qword_10065E660, (uint64_t (*)(void))type metadata accessor for LicenseUtilities.Batch, (uint64_t (*)(void))type metadata accessor for LicenseUtilities.Batch);
}

void *sub_10028FCB8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000172F8(&qword_10065E658);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 31;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 6);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1002918F8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10028FDC8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000172F8(&qword_10065E650);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100291800(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10028FEF0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10028F3D4(a1, a2, a3, a4, &qword_10065E648, type metadata accessor for AvailableUpdate, type metadata accessor for AvailableUpdate);
}

uint64_t sub_10028FF24(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10028F3D4(a1, a2, a3, a4, &qword_10065E640, type metadata accessor for IdentifiableAvailableUpdate, type metadata accessor for IdentifiableAvailableUpdate);
}

char *sub_10028FF58(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_10028F7B4(a1, a2, a3, a4, &qword_10065C3E0, &qword_10065E5B0);
}

uint64_t sub_10028FF6C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10028F3D4(a1, a2, a3, a4, &qword_10065E5F0, (uint64_t (*)(void))&type metadata accessor for _AppExtensionProcess, (uint64_t (*)(void))&type metadata accessor for _AppExtensionProcess);
}

char *sub_10028FFA0(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_10028FFAC(a1, a2, a3, a4, &qword_100663C00);
}

char *sub_10028FFAC(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = *((void *)a4 + 3);
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = *((void *)a4 + 2);
    if (v8 <= v9) {
      uint64_t v10 = *((void *)a4 + 2);
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      sub_1000172F8(a5);
      size_t v11 = (char *)swift_allocObject();
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      *((void *)v11 + 2) = v9;
      *((void *)v11 + 3) = 2 * (v13 >> 3);
      uint64_t v14 = v11 + 32;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      size_t v11 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[8 * v9 + 32]) {
          memmove(v14, a4 + 32, 8 * v9);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100291AE4(0, v9, v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_1002900B8(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_1002906C0(a1, a2, a3, a4, &qword_10065E590);
}

char *sub_1002900CC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000172F8(&qword_10065E598);
      uint64_t v10 = (char *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
      int64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[72 * v8 + 32]) {
          memmove(v12, a4 + 32, 72 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      int64_t v12 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100291BD0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_1002901F8(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_10028F7B4(a1, a2, a3, a4, &qword_10065E5A0, &qword_10065E5A8);
}

void *sub_10029020C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000172F8(&qword_10065E578);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1002919EC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10029031C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10028F940(a1, a2, a3, a4, &qword_10065E6C8, (uint64_t *)&unk_100663D80);
}

void *sub_100290330(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = a4[2];
    if (v7 <= v8) {
      int64_t v9 = a4[2];
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000172F8(&qword_10065E700);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * v11 - 64;
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= (void *)((char *)a4 + v8 + 32)) {
          memmove(v12, a4 + 4, v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100291FB8(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10029042C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = a4[2];
    if (v7 <= v8) {
      int64_t v9 = a4[2];
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000172F8(&qword_10065E6F8);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * v11 - 64;
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= (void *)((char *)a4 + v8 + 32)) {
          memmove(v12, a4 + 4, v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100291FB8(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100290528(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10028F660(a1, a2, a3, a4, &qword_10065E6F0);
}

uint64_t sub_100290534(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10028F3D4(a1, a2, a3, a4, &qword_10065E6C0, type metadata accessor for AppStorePackage, type metadata accessor for AppStorePackage);
}

uint64_t sub_100290568(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10028F3D4(a1, a2, a3, a4, &qword_10065E6B8, type metadata accessor for AppStoreItem, type metadata accessor for AppStoreItem);
}

void *sub_10029059C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000172F8(&qword_10065E678);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100291DD4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_1002906AC(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_1002906C0(a1, a2, a3, a4, &qword_10065E5D8);
}

char *sub_1002906C0(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = *((void *)a4 + 3);
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = *((void *)a4 + 2);
    if (v8 <= v9) {
      uint64_t v10 = *((void *)a4 + 2);
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      sub_1000172F8(a5);
      int64_t v11 = (char *)swift_allocObject();
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      *((void *)v11 + 2) = v9;
      *((void *)v11 + 3) = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 32;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v11 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[16 * v9 + 32]) {
          memmove(v14, a4 + 32, 16 * v9);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100291EC8(0, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002907DC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10028F940(a1, a2, a3, a4, &qword_10065BDB0, &qword_10065BDA8);
}

uint64_t sub_1002907F0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10028F940(a1, a2, a3, a4, &qword_10065E558, &qword_10065E560);
}

void *sub_100290804(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100290818(a1, a2, a3, a4, &qword_100663AE0);
}

void *sub_100290818(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      sub_1000172F8(a5);
      int64_t v11 = (void *)swift_allocObject();
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 1;
      }
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 5);
      uint64_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v9 + 4]) {
          memmove(v14, a4 + 4, 32 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100291710(0, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100290934(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10028F3D4(a1, a2, a3, a4, &qword_10065E680, (uint64_t (*)(void))type metadata accessor for Restore, (uint64_t (*)(void))type metadata accessor for Restore);
}

void *sub_100290968(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000172F8(&qword_10065E668);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      int64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      int64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100291618(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100290A94(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10028F3D4(a1, a2, a3, a4, &qword_10065E670, (uint64_t (*)(void))type metadata accessor for AvailableRestore, (uint64_t (*)(void))type metadata accessor for AvailableRestore);
}

void *sub_100290AC8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000172F8(&qword_10065E688);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 95;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 7);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 7);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10029131C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100290BD8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10028F3D4(a1, a2, a3, a4, &qword_10065E708, (uint64_t (*)(void))&type metadata accessor for URL, (uint64_t (*)(void))&type metadata accessor for URL);
}

uint64_t sub_100290C0C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10028F3D4(a1, a2, a3, a4, &qword_100663DC0, type metadata accessor for MediaAPIUpdates.App, type metadata accessor for MediaAPIUpdates.App);
}

char *sub_100290C40(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_10028F7B4(a1, a2, a3, a4, &qword_10065E5F8, &qword_10065E600);
}

void *sub_100290C54(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000172F8(&qword_10065E6D0);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1002921F8(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100290D7C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10028F3D4(a1, a2, a3, a4, &qword_10065E6E0, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100290DB0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10028F3D4(a1, a2, a3, a4, &qword_10065E610, (uint64_t (*)(void))type metadata accessor for DownloadRequest, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
}

void *sub_100290DE4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000172F8(&qword_100663D10);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100292308(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100290F08(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10028F3D4(a1, a2, a3, a4, &qword_10065DBF0, (uint64_t (*)(void))type metadata accessor for AppInstallTaskResult, (uint64_t (*)(void))type metadata accessor for AppInstallTaskResult);
}

uint64_t sub_100290F3C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10028F940(a1, a2, a3, a4, &qword_10065E5C0, &qword_10065E5C8);
}

uint64_t sub_100290F50(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (((*a1 ^ *a2) & 1) != 0
    || *((void *)a1 + 1) != *((void *)a2 + 1)
    || ((a1[16] ^ a2[16]) & 1) != 0
    || ((a1[17] ^ a2[17]) & 1) != 0)
  {
    goto LABEL_5;
  }
  if (*((void *)a1 + 3) != *((void *)a2 + 3) || *((void *)a1 + 4) != *((void *)a2 + 4))
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v4 = 0;
    if ((v6 & 1) == 0) {
      return v4 & 1;
    }
  }
  uint64_t v7 = *((void *)a1 + 6);
  uint64_t v8 = *((void *)a2 + 6);
  if (!v7)
  {
    if (!v8)
    {
LABEL_17:
      char v4 = ((a1[56] & 1) == 0) ^ a2[56];
      return v4 & 1;
    }
LABEL_5:
    char v4 = 0;
    return v4 & 1;
  }
  if (!v8) {
    goto LABEL_5;
  }
  if (*((void *)a1 + 5) == *((void *)a2 + 5) && v7 == v8) {
    goto LABEL_17;
  }
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  char v4 = 0;
  if (v9) {
    goto LABEL_17;
  }
  return v4 & 1;
}

uint64_t sub_10029103C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100291130(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100291224(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10029131C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 7) + 32;
    unint64_t v6 = a3 + (v4 << 7);
    if (v5 >= v6 || v5 + (v4 << 7) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100291410(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100291508(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 72 * a1 + 32;
    unint64_t v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      sub_1000172F8(&qword_100663CD0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100291618(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100291710(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100291800(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002918F8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002919EC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100291AE4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100291BD0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 72 * a1 + 32;
    unint64_t v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100291CC8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 40 * a1 + 32;
    unint64_t v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      sub_1000172F8(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100291DD4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100291EC8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100291FB8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    unint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002920A0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(sub_1000172F8(a5) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002921F8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_1000172F8(&qword_10065E6D8);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100292308(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t destroy for DownloadPolicy()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DownloadPolicy(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DownloadPolicy(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

__n128 initializeWithTake for DownloadPolicy(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DownloadPolicy(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for DownloadPolicy(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 57)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DownloadPolicy(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DownloadPolicy()
{
  return &type metadata for DownloadPolicy;
}

unint64_t sub_10029266C()
{
  unint64_t result = qword_10065E6E8;
  if (!qword_10065E6E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E6E8);
  }
  return result;
}

uint64_t sub_1002926C0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_10029281C()
{
  return 0xD000000000000026;
}

uint64_t sub_100292850(uint64_t a1)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return _swift_task_switch(sub_100292870, 0, 0);
}

uint64_t sub_100292870()
{
  swift_getAtKeyPath();
  *(void *)(v0 + 56) = *(void *)(v0 + 24);
  *(unsigned char *)(v0 + 33) = *(unsigned char *)(v0 + 32);
  uint64_t ObjectType = swift_getObjectType();
  swift_bridgeObjectRetain();
  NSString v2 = String._bridgeToObjectiveC()();
  *(void *)(v0 + 64) = v2;
  swift_bridgeObjectRelease();
  long long v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v3;
  *long long v3 = v0;
  v3[1] = sub_100292960;
  return sub_1004F896C((uint64_t)v2, ObjectType);
}

uint64_t sub_100292960(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void **)(*v2 + 64);
  swift_task_dealloc();

  if (v1)
  {
    swift_errorRelease();
    unint64_t v6 = sub_100292B20;
  }
  else
  {
    *(unsigned char *)(v4 + 34) = a1;
    unint64_t v6 = sub_100292AAC;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_100292AAC()
{
  int v1 = *(unsigned __int8 *)(v0 + 34);
  char v2 = *(unsigned char *)(v0 + 33);
  swift_bridgeObjectRelease();
  if (v1 == 2) {
    char v3 = v2;
  }
  else {
    char v3 = v1;
  }
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4(v3 & 1);
}

uint64_t sub_100292B20()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(unsigned __int8 *)(v0 + 33);
  char v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_100292B84(uint64_t a1)
{
  v2[23] = a1;
  v2[24] = v1;
  uint64_t v3 = sub_1000172F8(&qword_10065E740);
  v2[25] = v3;
  v2[26] = *(void *)(v3 - 8);
  v2[27] = swift_task_alloc();
  return _swift_task_switch(sub_100292C48, 0, 0);
}

uint64_t sub_100292C48()
{
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 200);
  swift_getAtKeyPath();
  *(_OWORD *)(v0 + 224) = *(_OWORD *)(v0 + 152);
  uint64_t v5 = *(void **)(v4 + 16);
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 dictionaryForKey:v6];
  *(void *)(v0 + 240) = v7;

  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 168;
  *(void *)(v0 + 24) = sub_100292E30;
  swift_continuation_init();
  *(void *)(v0 + 136) = v3;
  uint64_t v8 = sub_10019CE94((uint64_t *)(v0 + 112));
  sub_1000172F8(&qword_10065E748);
  sub_1000172F8(&qword_10065B260);
  CheckedContinuation.init(continuation:function:)();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 32))(v8, v1, v3);
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 1107296256;
  *(void *)(v0 + 96) = sub_1002930B0;
  *(void *)(v0 + 104) = &unk_10063E348;
  [v7 valueWithCompletion:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_100292E30()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 248) = v1;
  if (v1) {
    uint64_t v2 = sub_100293014;
  }
  else {
    uint64_t v2 = sub_100292F40;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100292F40()
{
  uint64_t v1 = *(void **)(v0 + 168);

  sub_1000172F8((uint64_t *)&unk_10065C5D0);
  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v0 + 232);
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_100293014()
{
  uint64_t v1 = (void *)v0[30];
  swift_willThrow();
  swift_errorRelease();

  swift_bridgeObjectRelease();
  uint64_t v2 = v0[29];
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(uint64_t))v0[1];
  return v3(v2);
}

void sub_1002930B0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  sub_10018AC60((void *)(a1 + 32), *(void *)(a1 + 56));
  if (a4)
  {
    id v6 = a4;
    sub_1000172F8(&qword_10065E740);
    CheckedContinuation.resume(throwing:)();
  }
  else if (a2)
  {
    id v7 = a2;
    sub_1000172F8(&qword_10065E740);
    CheckedContinuation.resume(returning:)();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10029315C(uint64_t a1)
{
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = v1;
  return _swift_task_switch(sub_10029317C, 0, 0);
}

uint64_t sub_10029317C()
{
  swift_getAtKeyPath();
  uint64_t ObjectType = swift_getObjectType();
  swift_bridgeObjectRetain();
  NSString v2 = String._bridgeToObjectiveC()();
  *(void *)(v0 + 72) = v2;
  swift_bridgeObjectRelease();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v3;
  unint64_t v4 = sub_1001779A8();
  *uint64_t v3 = v0;
  v3[1] = sub_100293284;
  return sub_1004F8C5C(v0 + 40, (uint64_t)v2, ObjectType, (uint64_t)&type metadata for Int, v4);
}

uint64_t sub_100293284()
{
  NSString v2 = *(void **)(*(void *)v1 + 72);
  swift_task_dealloc();

  if (v0)
  {
    swift_errorRelease();
    uint64_t v3 = sub_1002933B4;
  }
  else
  {
    uint64_t v3 = sub_100293418;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1002933B4()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 32);
  NSString v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_100293418()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = (uint64_t *)(v0 + 32);
  if (!*(unsigned char *)(v0 + 48)) {
    uint64_t v1 = (uint64_t *)(v0 + 40);
  }
  uint64_t v2 = *v1;
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_100293490(uint64_t a1)
{
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = v1;
  return _swift_task_switch(sub_1002934B0, 0, 0);
}

uint64_t sub_1002934B0()
{
  swift_getAtKeyPath();
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  v0[8] = v0[3];
  v0[9] = v1;
  v0[10] = v2;
  uint64_t ObjectType = swift_getObjectType();
  NSString v4 = String._bridgeToObjectiveC()();
  v0[11] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[12] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100293590;
  return sub_1004F8F4C((uint64_t)v4, ObjectType);
}

uint64_t sub_100293590(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v3;
  uint64_t v5 = *(void **)(*v3 + 88);
  *(void *)(v4 + 104) = a1;
  *(void *)(v4 + 112) = a2;
  swift_task_dealloc();

  if (v2)
  {
    swift_errorRelease();
    uint64_t v6 = sub_10029375C;
  }
  else
  {
    uint64_t v6 = sub_1002936C8;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1002936C8()
{
  uint64_t v1 = v0[14];
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = 13;
  }
  else
  {
    uint64_t v1 = v0[10];
    uint64_t v2 = 9;
  }
  uint64_t v3 = v0[v2];
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v4(v3, v1);
}

uint64_t sub_10029375C()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v3(v1, v2);
}

uint64_t sub_1002937C0()
{
  return 0x437972746E756F63;
}

unint64_t sub_1002937E0()
{
  return 0xD00000000000001CLL;
}

unint64_t sub_100293800()
{
  return 0xD000000000000024;
}

unint64_t sub_100293820()
{
  return 0xD000000000000016;
}

unint64_t sub_100293840()
{
  return 0xD00000000000001CLL;
}

unint64_t sub_100293860()
{
  return 0xD000000000000016;
}

unint64_t sub_100293894()
{
  return 0xD000000000000019;
}

unint64_t sub_1002938B4()
{
  return 0xD00000000000002ELL;
}

unint64_t sub_1002938E8()
{
  return 0xD000000000000030;
}

unint64_t sub_10029391C()
{
  return 0xD00000000000002DLL;
}

unint64_t sub_100293950()
{
  return 0xD000000000000035;
}

unint64_t sub_100293984()
{
  return 0xD000000000000022;
}

uint64_t sub_1002939C0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 872) = a2;
  *(void *)(v2 + 864) = a1;
  return _swift_task_switch(sub_1002939E4, 0, 0);
}

uint64_t sub_1002939E4()
{
  v0[110] = swift_getKeyPath();
  swift_getAtKeyPath();
  swift_getObjectType();
  NSString v1 = String._bridgeToObjectiveC()();
  v0[111] = v1;
  swift_bridgeObjectRelease();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[112] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100293ADC;
  return sub_1004F9D70((uint64_t)v1);
}

uint64_t sub_100293ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 904) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_1002957E4;
  }
  else
  {

    *(void *)(v6 + 912) = a2;
    *(void *)(v6 + 920) = a1;
    uint64_t v7 = sub_100293C1C;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_100293C1C()
{
  uint64_t v1 = v0[115];
  uint64_t v2 = v0[114];
  swift_release();
  v0[5] = &type metadata for String;
  v0[2] = v1;
  v0[3] = v2;
  sub_1001CD9F8((uint64_t)(v0 + 2), (uint64_t)(v0 + 10));
  sub_1002B613C((uint64_t)(v0 + 10), 0x437972746E756F63, 0xEB0000000065646FLL);
  sub_100016E7C((uint64_t)(v0 + 2));
  uint64_t KeyPath = swift_getKeyPath();
  v0[116] = KeyPath;
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)&dword_10065E718 + dword_10065E718);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[117] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100293D50;
  return v6(KeyPath);
}

uint64_t sub_100293D50(char a1)
{
  *(unsigned char *)(*(void *)v1 + 1224) = a1;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100293E70, 0, 0);
}

uint64_t sub_100293E70()
{
  char v1 = *(unsigned char *)(v0 + 1224);
  *(void *)(v0 + 136) = &type metadata for Bool;
  *(unsigned char *)(v0 + 112) = v1;
  sub_1001CD9F8(v0 + 112, v0 + 144);
  sub_1002B613C(v0 + 144, 0xD00000000000001CLL, 0x80000001005BA640);
  sub_100016E7C(v0 + 112);
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)(v0 + 944) = KeyPath;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&dword_10065E718 + dword_10065E718);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 952) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100293F88;
  return v5(KeyPath);
}

uint64_t sub_100293F88(char a1)
{
  *(unsigned char *)(*(void *)v1 + 1225) = a1;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1002940A8, 0, 0);
}

uint64_t sub_1002940A8()
{
  char v1 = *(unsigned char *)(v0 + 1225);
  *(void *)(v0 + 200) = &type metadata for Bool;
  *(unsigned char *)(v0 + 176) = v1;
  sub_1001CD9F8(v0 + 176, v0 + 208);
  sub_1002B613C(v0 + 208, 0xD000000000000024, 0x80000001005BA660);
  sub_100016E7C(v0 + 176);
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)(v0 + 960) = KeyPath;
  *(void *)(v0 + 264) = &type metadata for Int;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&dword_10065E720 + dword_10065E720);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 968) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1002941CC;
  return v5(KeyPath);
}

uint64_t sub_1002941CC(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_task_dealloc();
  swift_release();
  *(void *)(v3 + 240) = a1;
  return _swift_task_switch(sub_1002942F4, 0, 0);
}

uint64_t sub_1002942F4()
{
  sub_1001CD9F8((uint64_t)(v0 + 30), (uint64_t)(v0 + 34));
  sub_1002B613C((uint64_t)(v0 + 34), 0xD000000000000016, 0x80000001005BA690);
  sub_100016E7C((uint64_t)(v0 + 30));
  uint64_t KeyPath = swift_getKeyPath();
  v0[122] = KeyPath;
  v0[41] = &type metadata for Int;
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)&dword_10065E720 + dword_10065E720);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[123] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100294404;
  return v4(KeyPath);
}

uint64_t sub_100294404(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_task_dealloc();
  swift_release();
  *(void *)(v3 + 304) = a1;
  return _swift_task_switch(sub_10029452C, 0, 0);
}

uint64_t sub_10029452C()
{
  sub_1001CD9F8(v0 + 304, v0 + 336);
  sub_1002B613C(v0 + 336, 0xD00000000000001CLL, 0x80000001005BA6B0);
  sub_100016E7C(v0 + 304);
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)(v0 + 992) = KeyPath;
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)&dword_10065E728 + dword_10065E728);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 1000) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100294630;
  return v4(KeyPath);
}

uint64_t sub_100294630(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 1008) = a1;
  *(void *)(v3 + 1016) = a2;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100294754, 0, 0);
}

uint64_t sub_100294754()
{
  uint64_t v1 = v0[127];
  uint64_t v2 = v0[126];
  v0[49] = &type metadata for String;
  v0[46] = v2;
  v0[47] = v1;
  sub_1001CD9F8((uint64_t)(v0 + 46), (uint64_t)(v0 + 50));
  sub_1002B613C((uint64_t)(v0 + 50), 0xD000000000000016, 0x80000001005BA6D0);
  sub_100016E7C((uint64_t)(v0 + 46));
  uint64_t KeyPath = swift_getKeyPath();
  v0[128] = KeyPath;
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)&dword_10065E718 + dword_10065E718);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[129] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100294870;
  return v6(KeyPath);
}

uint64_t sub_100294870(char a1)
{
  *(unsigned char *)(*(void *)v1 + 1226) = a1;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100294990, 0, 0);
}

uint64_t sub_100294990()
{
  char v1 = *(unsigned char *)(v0 + 1226);
  *(void *)(v0 + 456) = &type metadata for Bool;
  *(unsigned char *)(v0 + 432) = v1;
  sub_1001CD9F8(v0 + 432, v0 + 464);
  sub_1002B613C(v0 + 464, 0xD000000000000019, 0x80000001005BA620);
  sub_100016E7C(v0 + 432);
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)(v0 + 1040) = KeyPath;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&dword_10065E728 + dword_10065E728);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 1048) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100294AA8;
  return v5(KeyPath);
}

uint64_t sub_100294AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 1056) = a1;
  *(void *)(v3 + 1064) = a2;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100294BCC, 0, 0);
}

uint64_t sub_100294BCC()
{
  uint64_t v1 = v0[133];
  uint64_t v2 = v0[132];
  v0[65] = &type metadata for String;
  v0[62] = v2;
  v0[63] = v1;
  sub_1001CD9F8((uint64_t)(v0 + 62), (uint64_t)(v0 + 66));
  sub_1002B613C((uint64_t)(v0 + 66), 0xD00000000000002ELL, 0x80000001005BA6F0);
  sub_100016E7C((uint64_t)(v0 + 62));
  uint64_t KeyPath = swift_getKeyPath();
  v0[134] = KeyPath;
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)&dword_10065E728 + dword_10065E728);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[135] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100294CE8;
  return v6(KeyPath);
}

uint64_t sub_100294CE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 1088) = a1;
  *(void *)(v3 + 1096) = a2;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100294E0C, 0, 0);
}

uint64_t sub_100294E0C()
{
  uint64_t v1 = v0[137];
  uint64_t v2 = v0[136];
  v0[73] = &type metadata for String;
  v0[70] = v2;
  v0[71] = v1;
  sub_1001CD9F8((uint64_t)(v0 + 70), (uint64_t)(v0 + 74));
  sub_1002B613C((uint64_t)(v0 + 74), 0xD000000000000030, 0x80000001005BA720);
  sub_100016E7C((uint64_t)(v0 + 70));
  uint64_t KeyPath = swift_getKeyPath();
  v0[138] = KeyPath;
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)&dword_10065E728 + dword_10065E728);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[139] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100294F2C;
  return v6(KeyPath);
}

uint64_t sub_100294F2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 1120) = a1;
  *(void *)(v3 + 1128) = a2;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100295050, 0, 0);
}

uint64_t sub_100295050()
{
  uint64_t v1 = v0[141];
  uint64_t v2 = v0[140];
  v0[81] = &type metadata for String;
  v0[78] = v2;
  v0[79] = v1;
  sub_1001CD9F8((uint64_t)(v0 + 78), (uint64_t)(v0 + 82));
  sub_1002B613C((uint64_t)(v0 + 82), 0xD00000000000002DLL, 0x80000001005BA760);
  sub_100016E7C((uint64_t)(v0 + 78));
  uint64_t KeyPath = swift_getKeyPath();
  v0[142] = KeyPath;
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)&dword_10065E728 + dword_10065E728);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[143] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100295170;
  return v6(KeyPath);
}

uint64_t sub_100295170(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 1152) = a1;
  *(void *)(v3 + 1160) = a2;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100295294, 0, 0);
}

uint64_t sub_100295294()
{
  uint64_t v1 = v0[145];
  uint64_t v2 = v0[144];
  v0[89] = &type metadata for String;
  v0[86] = v2;
  v0[87] = v1;
  sub_1001CD9F8((uint64_t)(v0 + 86), (uint64_t)(v0 + 90));
  sub_1002B613C((uint64_t)(v0 + 90), 0xD000000000000035, 0x80000001005BA790);
  sub_100016E7C((uint64_t)(v0 + 86));
  uint64_t KeyPath = swift_getKeyPath();
  v0[146] = KeyPath;
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)&dword_10065E728 + dword_10065E728);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[147] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1002953B4;
  return v6(KeyPath);
}

uint64_t sub_1002953B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 1184) = a1;
  *(void *)(v3 + 1192) = a2;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1002954D8, 0, 0);
}

uint64_t sub_1002954D8()
{
  uint64_t v1 = v0[149];
  uint64_t v2 = v0[148];
  v0[97] = &type metadata for String;
  v0[94] = v2;
  v0[95] = v1;
  sub_1001CD9F8((uint64_t)(v0 + 94), (uint64_t)(v0 + 98));
  sub_1002B613C((uint64_t)(v0 + 98), 0xD000000000000026, 0x80000001005B8D20);
  sub_100016E7C((uint64_t)(v0 + 94));
  sub_10044BF78((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  v0[150] = KeyPath;
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)&dword_10065E730 + dword_10065E730);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[151] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100295608;
  return v6(KeyPath);
}

uint64_t sub_100295608(uint64_t a1)
{
  *(void *)(*(void *)v1 + 1216) = a1;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100295728, 0, 0);
}

uint64_t sub_100295728()
{
  uint64_t v1 = v0[152];
  v0[105] = sub_1000172F8(&qword_10065E738);
  v0[102] = v1;
  sub_1001CD9F8((uint64_t)(v0 + 102), (uint64_t)(v0 + 6));
  sub_1002B613C((uint64_t)(v0 + 6), 0xD000000000000022, 0x80000001005BA7D0);
  sub_100016E7C((uint64_t)(v0 + 102));
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1002957E4()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_100295854(void *a1@<X8>)
{
  *a1 = 0x437972746E756F63;
  a1[1] = 0xEB0000000065646FLL;
}

void sub_100295878(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000001CLL;
  *(void *)(a1 + 8) = 0x80000001005BA640;
  *(unsigned char *)(a1 + 16) = 1;
}

void sub_1002958A0(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000024;
  *(void *)(a1 + 8) = 0x80000001005BA660;
  *(unsigned char *)(a1 + 16) = 1;
}

void sub_1002958C8(void *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x80000001005BA690;
  a1[2] = 0;
}

void sub_1002958EC(void *a1@<X8>)
{
  *a1 = 0xD00000000000001CLL;
  a1[1] = 0x80000001005BA6B0;
  a1[2] = 100;
}

void sub_100295914(void *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x80000001005BA6D0;
  a1[2] = 0xD000000000000016;
  a1[3] = 0x80000001005BA830;
}

void sub_10029594C(void *a1@<X8>)
{
  *a1 = 0xD00000000000002ELL;
  a1[1] = 0x80000001005BA6F0;
  a1[2] = 0xD000000000000016;
  a1[3] = 0x80000001005B8D50;
}

void sub_100295984(void *a1@<X8>)
{
  *a1 = 0xD000000000000030;
  a1[1] = 0x80000001005BA720;
  a1[2] = 0xD000000000000016;
  a1[3] = 0x80000001005B8D50;
}

void sub_1002959BC(void *a1@<X8>)
{
  *a1 = 0xD00000000000002DLL;
  a1[1] = 0x80000001005BA760;
  a1[2] = 0xD000000000000016;
  a1[3] = 0x80000001005B8D50;
}

void sub_1002959F4(void *a1@<X8>)
{
  *a1 = 0xD000000000000035;
  a1[1] = 0x80000001005BA790;
  a1[2] = 0xD000000000000016;
  a1[3] = 0x80000001005B8D50;
}

void sub_100295A2C(void *a1@<X8>)
{
  *a1 = 0xD000000000000026;
  a1[1] = 0x80000001005B8D20;
  a1[2] = 0xD000000000000016;
  a1[3] = 0x80000001005B8D50;
}

unint64_t sub_100295A64@<X0>(void *a1@<X8>)
{
  unint64_t result = sub_10044BF78((uint64_t)_swiftEmptyArrayStorage);
  *a1 = 0xD000000000000022;
  a1[1] = 0x80000001005BA7D0;
  a1[2] = result;
  return result;
}

uint64_t sub_100295AB0(uint64_t a1)
{
  return sub_100014524(a1 + 32);
}

ValueMetadata *type metadata accessor for MADBagKeys()
{
  return &type metadata for MADBagKeys;
}

uint64_t sub_100295AC8(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v211 = a6;
  uint64_t v185 = a5;
  uint64_t v186 = a4;
  os_log_t v210 = a3;
  uint64_t v206 = type metadata accessor for AppInstallRequestType();
  uint64_t v209 = *(void **)(v206 - 8);
  uint64_t v8 = __chkstk_darwin(v206);
  v201 = (char *)&v173 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v207 = (unint64_t)&v173 - v10;
  uint64_t v11 = sub_1000172F8(&qword_10065B220);
  __chkstk_darwin(v11 - 8);
  uint64_t v188 = (char *)&v173 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v191 = type metadata accessor for AppInstallationEvent();
  uint64_t v190 = *(void *)(v191 - 8);
  uint64_t v13 = __chkstk_darwin(v191);
  uint64_t v184 = (char *)&v173 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v183 = v14;
  __chkstk_darwin(v13);
  uint64_t v187 = (char *)&v173 - v15;
  uint64_t v194 = type metadata accessor for AppInstallationEligibility();
  uint64_t v197 = *(void *)(v194 - 8);
  uint64_t v16 = __chkstk_darwin(v194);
  uint64_t v195 = (char *)&v173 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v196 = (char *)&v173 - v18;
  uint64_t v193 = type metadata accessor for Date();
  uint64_t v192 = *(void *)(v193 - 8);
  uint64_t v19 = __chkstk_darwin(v193);
  uint64_t v189 = (char *)&v173 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  os_log_type_t v198 = (char *)&v173 - v21;
  uint64_t v204 = type metadata accessor for Locale();
  uint64_t v200 = *(void *)(v204 - 8);
  __chkstk_darwin(v204);
  unint64_t v202 = (char *)&v173 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v203 = sub_1000172F8(&qword_10065E800);
  uint64_t v205 = *(void **)(v203 - 8);
  __chkstk_darwin(v203);
  BOOL v199 = (char *)&v173 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_1000172F8(&qword_10065E808);
  __chkstk_darwin(v24 - 8);
  uint64_t v26 = (char *)&v173 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for AppInstallType();
  uint64_t v208 = *(void *)(v27 - 8);
  uint64_t v28 = __chkstk_darwin(v27);
  unint64_t v30 = (char *)&v173 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v173 - v31;
  uint64_t v33 = sub_1000172F8(&qword_10065E810);
  uint64_t v34 = __chkstk_darwin(v33 - 8);
  uint64_t v36 = (char *)&v173 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  uint64_t v38 = (char *)&v173 - v37;
  id v39 = objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain();
  uint64_t v40 = a1;
  uint64_t v41 = a1;
  uint64_t v42 = a2;
  id v43 = sub_1003DB240(v41, a2, 0);
  uint64_t v178 = (uint64_t)v26;
  uint64_t v44 = v209;
  os_log_t v45 = v210;
  uint64_t v176 = v30;
  uint64_t v175 = v40;
  uint64_t v177 = v42;
  unint64_t v179 = v32;
  uint64_t v180 = v27;
  uint64_t v181 = v38;
  id v182 = v43;
  if ([v43 isPlaceholder])
  {
    if (qword_10065B0D8 != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    sub_10000E6AC(v46, (uint64_t)qword_10065E750);
    uint64_t v47 = v211;
    unint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v48, v49))
    {
      unint64_t v50 = (uint8_t *)swift_slowAlloc();
      uint64_t v51 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v50 = 138412290;
      uint64_t v212 = v47;
      uint64_t v52 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v51 = v47;

      _os_log_impl((void *)&_mh_execute_header, v48, v49, "[%@] Skipping app install event due to app not being installed", v50, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return 0;
  }
  uint64_t v53 = (uint64_t)v181;
  sub_1002975D4((uint64_t)v45, (uint64_t)v181);
  sub_100297E70(v53, (uint64_t)v36);
  uint64_t v54 = v208;
  uint64_t v55 = v180;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v208 + 48))(v36, 1, v180) == 1)
  {
    sub_10001729C((uint64_t)v36, &qword_10065E810);
    if (qword_10065B0D8 != -1) {
      swift_once();
    }
    uint64_t v56 = type metadata accessor for Logger();
    sub_10000E6AC(v56, (uint64_t)qword_10065E750);
    unint64_t v57 = v44;
    uint64_t v58 = (void (*)(unint64_t, os_log_t, uint64_t))v44[2];
    uint64_t v59 = v206;
    unint64_t v60 = v207;
    v58(v207, v45, v206);
    id v61 = v211;
    unint64_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.error.getter();
    int v64 = v63;
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v65 = swift_slowAlloc();
      os_log_t v210 = v62;
      uint64_t v66 = v65;
      uint64_t v205 = (void *)swift_slowAlloc();
      id v211 = (id)swift_slowAlloc();
      uint64_t v212 = v211;
      *(_DWORD *)uint64_t v66 = 138412546;
      uint64_t v214 = (uint64_t)v61;
      LODWORD(v208) = v64;
      id v67 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v205 = v61;

      *(_WORD *)(v66 + 12) = 2082;
      unint64_t v68 = v207;
      v58((unint64_t)v201, (os_log_t)v207, v59);
      uint64_t v69 = String.init<A>(describing:)();
      uint64_t v214 = sub_1000143F4(v69, v70, (uint64_t *)&v212);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      ((void (*)(unint64_t, uint64_t))v57[1])(v68, v59);
      os_log_t v71 = v210;
      _os_log_impl((void *)&_mh_execute_header, v210, (os_log_type_t)v208, "[%@] Skipping unsupported installType: %{public}s)", (uint8_t *)v66, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      ((void (*)(unint64_t, uint64_t))v57[1])(v60, v59);
    }
    goto LABEL_52;
  }
  uint64_t v72 = (uint64_t)v179;
  (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v179, v36, v55);
  uint64_t v73 = (void *)sub_100297ED8();
  uint64_t v74 = v73;
  if (v73)
  {
    uint64_t v75 = objc_msgSend(v73, "ams_DSID");
    uint64_t v76 = v75;
    LODWORD(v210) = v75 == 0;
    if (v75)
    {
      uint64_t v77 = [v75 longLongValue];
    }
    else
    {
      uint64_t v77 = 0;
    }
    uint64_t v78 = v203;
    uint64_t v79 = v204;
    unint64_t v80 = v202;
    id v81 = objc_msgSend(v74, "ams_storefront");
    uint64_t v82 = v205;
    if (v81)
    {
      uint64_t v83 = v81;
      os_log_t v210 = v76;
      uint64_t v84 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v86 = v85;

      uint64_t v212 = v84;
      uint64_t v213 = v86;
      Locale.init(identifier:)();
      uint64_t v87 = v80;
      uint64_t v88 = v199;
      static RegexComponent<>.localizedInteger(locale:)();
      (*(void (**)(char *, uint64_t))(v200 + 8))(v87, v79);
      sub_1002980F8();
      sub_10029814C();
      uint64_t v89 = v178;
      BidirectionalCollection<>.firstMatch<A, B>(of:)();
      ((void (*)(char *, uint64_t))v82[1])(v88, v78);
      swift_bridgeObjectRelease();
      uint64_t v90 = sub_1000172F8(&qword_10065E830);
      uint64_t v91 = *(void *)(v90 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v91 + 48))(v89, 1, v90) == 1)
      {
        sub_10001729C(v89, &qword_10065E808);
        if (qword_10065B0D8 != -1) {
          swift_once();
        }
        uint64_t v92 = type metadata accessor for Logger();
        sub_10000E6AC(v92, (uint64_t)qword_10065E750);
        uint64_t v93 = v211;
        uint64_t v94 = Logger.logObject.getter();
        os_log_type_t v95 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v94, v95))
        {
          uint64_t v96 = (uint8_t *)swift_slowAlloc();
          uint64_t v97 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v96 = 138412290;
          uint64_t v212 = v93;
          unint64_t v98 = v93;
          uint64_t v72 = (uint64_t)v179;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v97 = v93;

          _os_log_impl((void *)&_mh_execute_header, v94, v95, "[%@] Skipping because we could not determine the storefront as a number", v96, 0xCu);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          uint64_t v93 = v74;
LABEL_51:
          uint64_t v136 = v208;

          (*(void (**)(uint64_t, uint64_t))(v136 + 8))(v72, v180);
          goto LABEL_52;
        }

        goto LABEL_50;
      }
      uint64_t v209 = v74;
      Regex.Match.output.getter();
      os_log_type_t v110 = v212;
      (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v89, v90);
      id v111 = v182;
      id v112 = [v182 iTunesMetadata];
      id v113 = [v112 storeItemIdentifier];

      if (!v113)
      {
        if (qword_10065B0D8 == -1)
        {
LABEL_35:
          uint64_t v120 = type metadata accessor for Logger();
          sub_10000E6AC(v120, (uint64_t)qword_10065E750);
          uint64_t v93 = v211;
          uint64_t v94 = Logger.logObject.getter();
          os_log_type_t v121 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v94, v121))
          {
            unint64_t v122 = (uint8_t *)swift_slowAlloc();
            uint64_t v123 = (void *)swift_slowAlloc();
            *(_DWORD *)unint64_t v122 = 138412290;
            uint64_t v212 = v93;
            uint64_t v124 = v93;
            uint64_t v72 = (uint64_t)v179;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            void *v123 = v93;

            _os_log_impl((void *)&_mh_execute_header, v94, v121, "[%@] Skipping because we could not determine the appleItemID", v122, 0xCu);
            sub_1000172F8(&qword_10065DB10);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
            uint64_t v93 = v209;
            goto LABEL_51;
          }

LABEL_50:
          goto LABEL_51;
        }
LABEL_76:
        swift_once();
        goto LABEL_35;
      }
      uint64_t v206 = (uint64_t)v77;
      id v114 = [v111 iTunesMetadata];
      id v115 = [v114 storeItemIdentifier];

      id v116 = [v111 iTunesMetadata];
      id v117 = [v116 sourceApp];

      uint64_t v204 = (uint64_t)v115;
      uint64_t v205 = v110;
      if (v117)
      {
        uint64_t v118 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v202 = v119;
      }
      else
      {
        unint64_t v202 = (char *)0x80000001005B8B20;
        uint64_t v118 = 0xD000000000000021;
      }
      id v125 = [v182 iTunesMetadata];
      id v126 = [v125 distributorInfo];

      id v127 = [v126 distributorID];
      if (v127)
      {
        uint64_t v128 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v130 = v129;
      }
      else
      {
        uint64_t v128 = 0;
        uint64_t v130 = 0;
      }
      id v131 = [v182 bundleIdentifier];
      if (v131)
      {
        long long v132 = v131;
        uint64_t v133 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v135 = v134;

        if (v130)
        {
          if (v135)
          {
            if (v128 == v133 && v130 == v135)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              char v139 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v139 & 1) == 0) {
                goto LABEL_61;
              }
            }
            goto LABEL_59;
          }
LABEL_57:
          swift_bridgeObjectRelease();
          goto LABEL_61;
        }
        if (v135) {
          goto LABEL_57;
        }
      }
      else if (v130)
      {
        goto LABEL_57;
      }
LABEL_59:
      id v140 = [v182 iTunesMetadata];
      id v141 = [v140 distributorInfo];

      id v142 = [v141 domain];
      if (v142)
      {
        uint64_t v178 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v174 = v143;

LABEL_62:
        uint64_t v144 = v194;
        uint64_t v145 = v193;
        uint64_t v146 = v192;
        uint64_t v72 = 0x6E776F6E6B6E55;
        id v147 = v182;
        unsigned int v148 = [v182 isBeta];
        id v149 = [v147 iTunesMetadata];
        uint64_t v150 = v149;
        uint64_t v151 = &selRef_betaVersionIdentifier;
        LODWORD(v201) = v148;
        if (!v148) {
          uint64_t v151 = &selRef_versionIdentifier;
        }
        unint64_t v207 = (unint64_t)[v149 *v151];

        static Date.now.getter();
        id v152 = [self productVersion];
        uint64_t v153 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        BOOL v199 = v154;
        uint64_t v200 = v153;

        id v155 = (id)MobileGestalt_get_current_device();
        uint64_t v203 = v118;
        if (v155)
        {
          uint64_t v156 = v155;
          int deviceClassNumber = MobileGestalt_get_deviceClassNumber();
          uint64_t v158 = v197;
          if (deviceClassNumber == 3)
          {
            uint64_t v72 = 1684099177;
          }
          else if (deviceClassNumber == 1)
          {
            uint64_t v72 = 0x656E6F685069;
          }
        }
        else
        {
          uint64_t v158 = v197;
        }
        uint64_t v212 = v205;
        dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v159 = v196;
        AppInstallationEligibility.init(accountID:storefront:eligible:)();
        (*(void (**)(char *, char *, uint64_t))(v158 + 16))(v195, v159, v144);
        if ((v207 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v189, v198, v145);
          uint64_t v160 = v208;
          (*(void (**)(char *, char *, uint64_t))(v208 + 16))(v176, v179, v180);
          uint64_t v161 = v191;
          uint64_t v162 = v190;
          if ((v204 & 0x8000000000000000) == 0)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v163 = v187;
            AppInstallationEvent.init(bundleID:eligibility:externalVersionID:installDate:installType:isBeta:itemID:osVersion:platform:source:token:webDomain:)();
            uint64_t v164 = type metadata accessor for TaskPriority();
            uint64_t v137 = 1;
            uint64_t v165 = (uint64_t)v188;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v164 - 8) + 56))(v188, 1, 1, v164);
            uint64_t v166 = v184;
            (*(void (**)(char *, char *, uint64_t))(v162 + 16))(v184, v163, v161);
            uint64_t v167 = v162;
            unint64_t v168 = (*(unsigned __int8 *)(v162 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80);
            uint64_t v169 = v161;
            uint64_t v170 = (char *)swift_allocObject();
            *((void *)v170 + 2) = 0;
            *((void *)v170 + 3) = 0;
            id v171 = v211;
            *((void *)v170 + 4) = v211;
            (*(void (**)(char *, char *, uint64_t))(v167 + 32))(&v170[v168], v166, v169);
            id v172 = v171;
            sub_1000163AC(v165, (uint64_t)&unk_10065E840, (uint64_t)v170);

            swift_release();
            (*(void (**)(char *, uint64_t))(v167 + 8))(v163, v169);
            (*(void (**)(char *, uint64_t))(v197 + 8))(v196, v194);
            (*(void (**)(char *, uint64_t))(v192 + 8))(v198, v193);
            (*(void (**)(char *, uint64_t))(v160 + 8))(v179, v180);
            sub_10001729C((uint64_t)v181, &qword_10065E810);
            return v137;
          }
        }
        __break(1u);
        goto LABEL_76;
      }
LABEL_61:
      uint64_t v178 = 0;
      uint64_t v174 = 0;
      goto LABEL_62;
    }
    uint64_t v53 = (uint64_t)v181;
  }
  else
  {
    uint64_t v77 = 0;
    LODWORD(v210) = 1;
  }
  id v99 = v211;
  if (qword_10065B0D8 != -1) {
    swift_once();
  }
  uint64_t v100 = type metadata accessor for Logger();
  sub_10000E6AC(v100, (uint64_t)qword_10065E750);
  uint64_t v101 = v99;
  char v102 = Logger.logObject.getter();
  os_log_type_t v103 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v102, v103))
  {
    uint64_t v104 = swift_slowAlloc();
    id v105 = (void *)swift_slowAlloc();
    id v211 = (id)swift_slowAlloc();
    uint64_t v212 = v101;
    uint64_t v214 = (uint64_t)v211;
    *(_DWORD *)uint64_t v104 = 138412546;
    uint64_t v209 = v74;
    id v106 = v101;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v105 = v101;

    *(_WORD *)(v104 + 12) = 2080;
    uint64_t v212 = v77;
    LOBYTE(v213) = (_BYTE)v210;
    sub_1000172F8(&qword_10065E818);
    uint64_t v107 = String.init<A>(describing:)();
    uint64_t v212 = (void *)sub_1000143F4(v107, v108, &v214);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v102, v103, "[%@] Skipping because we could not determine the storefront for accountID: %s", (uint8_t *)v104, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v208 + 8))(v179, v180);
LABEL_52:
    uint64_t v109 = (uint64_t)v181;
    goto LABEL_53;
  }

  (*(void (**)(char *, uint64_t))(v54 + 8))(v179, v180);
  uint64_t v109 = v53;
LABEL_53:
  sub_10001729C(v109, &qword_10065E810);
  return 0;
}

uint64_t sub_1002975D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AppInstallRequestType();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == enum case for AppInstallRequestType.automaticInstall(_:))
  {
    uint64_t v9 = (unsigned int *)&enum case for AppInstallType.autoDownload(_:);
LABEL_21:
    uint64_t v10 = *v9;
    uint64_t v11 = type metadata accessor for AppInstallType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104))(a2, v10, v11);
    type metadata accessor for AppInstallType();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a2, 0, 1, v11);
  }
  if (v8 == enum case for AppInstallRequestType.install(_:))
  {
    uint64_t v9 = (unsigned int *)&enum case for AppInstallType.buy(_:);
    goto LABEL_21;
  }
  if (v8 == enum case for AppInstallRequestType.automaticUpdate(_:))
  {
    uint64_t v9 = (unsigned int *)&enum case for AppInstallType.updateAutomatic(_:);
    goto LABEL_21;
  }
  if (v8 == enum case for AppInstallRequestType.update(_:))
  {
    uint64_t v9 = (unsigned int *)&enum case for AppInstallType.storeUpdate(_:);
    goto LABEL_21;
  }
  if (v8 == enum case for AppInstallRequestType.promotion(_:))
  {
    uint64_t v9 = (unsigned int *)&enum case for AppInstallType.promotion(_:);
    goto LABEL_21;
  }
  if (v8 == enum case for AppInstallRequestType.restore(_:))
  {
    uint64_t v9 = (unsigned int *)&enum case for AppInstallType.restore(_:);
    goto LABEL_21;
  }
  if (v8 == enum case for AppInstallRequestType.deviceVPP(_:))
  {
    uint64_t v9 = (unsigned int *)&enum case for AppInstallType.deviceManagedInstall(_:);
    goto LABEL_21;
  }
  if (v8 == enum case for AppInstallRequestType.userVPP(_:))
  {
    uint64_t v9 = (unsigned int *)&enum case for AppInstallType.userManagedInstall(_:);
    goto LABEL_21;
  }
  if (v8 == enum case for AppInstallRequestType.upp(_:))
  {
    uint64_t v9 = (unsigned int *)&enum case for AppInstallType.upp(_:);
    goto LABEL_21;
  }
  if (v8 == enum case for AppInstallRequestType.restoreUpdate(_:))
  {
    uint64_t v9 = (unsigned int *)&enum case for AppInstallType.restoreUpdate(_:);
    goto LABEL_21;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002978C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 32) = a4;
  *(void *)(v5 + 40) = a5;
  return _swift_task_switch(sub_1002978E8, 0, 0);
}

uint64_t sub_1002978E8()
{
  if (qword_10065B0D8 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[4];
  uint64_t v2 = type metadata accessor for Logger();
  v0[6] = sub_10000E6AC(v2, (uint64_t)qword_10065E750);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = (void *)v0[4];
  if (v6)
  {
    int v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    *(_DWORD *)int v8 = 138412290;
    v0[3] = v7;
    id v9 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v13 = v7;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%@] Sending app install event", v8, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  type metadata accessor for AppInstallationMetricsClient();
  uint64_t v10 = (void *)swift_task_alloc();
  v0[7] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100297B08;
  uint64_t v11 = v0[5];
  return static AppInstallationMetricsClient.addInstall(_:)(v11);
}

uint64_t sub_100297B08()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    id v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_100297C38, 0, 0);
  }
}

uint64_t sub_100297C38()
{
  id v1 = *(id *)(v0 + 32);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void **)(v0 + 32);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    id v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412290;
    *(void *)(v0 + 16) = v4;
    id v6 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v9 = v4;

    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%@] Sent app install event", v5, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v2 = *(NSObject **)(v0 + 32);
  }

  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100297DD4()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AppInstallMetrics()
{
  return self;
}

uint64_t sub_100297E08()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1002983A4(v0, qword_10065E750);
  sub_10000E6AC(v0, (uint64_t)qword_10065E750);
  static Logger.madSubsystem.getter();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100297E70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_10065E810);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100297ED8()
{
  id v0 = objc_msgSend(self, "ams_sharedAccountStore");
  id v1 = [v0 accounts];

  if (v1)
  {
    sub_100298364();
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  return 0;
}

unint64_t sub_1002980F8()
{
  unint64_t result = qword_10065E820;
  if (!qword_10065E820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E820);
  }
  return result;
}

unint64_t sub_10029814C()
{
  unint64_t result = qword_10065E828;
  if (!qword_10065E828)
  {
    sub_10017B924(&qword_10065E800);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E828);
  }
  return result;
}

uint64_t sub_1002981A8()
{
  uint64_t v1 = type metadata accessor for AppInstallationEvent();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10029827C()
{
  uint64_t v2 = *(void *)(type metadata accessor for AppInstallationEvent() - 8);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10000B238;
  v5[4] = v3;
  v5[5] = v4;
  return _swift_task_switch(sub_1002978E8, 0, 0);
}

unint64_t sub_100298364()
{
  unint64_t result = qword_10065E848;
  if (!qword_10065E848)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10065E848);
  }
  return result;
}

uint64_t *sub_1002983A4(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_100298408()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for EnterpriseDependencies()
{
  return self;
}

uint64_t sub_1002984B0()
{
  sub_100298EB0(v0, (uint64_t)&v5);
  uint64_t result = 0x1000000000000095;
  switch(v13)
  {
    case 1:
      return 0x1000000000000096;
    case 2:
      return 0x1000000000000094;
    case 3:
      return 0x1000000000000073;
    case 4:
      return 0x100000000000006BLL;
    case 5:
      return 0x100000000000001ELL;
    case 6:
      return 0x100000000000003ELL;
    case 7:
      return 0x100000000000003ALL;
    case 8:
      return 0x100000000000001DLL;
    case 9:
      return 0x1000000000000039;
    case 10:
    case 11:
      return 0x100000000000002ELL;
    case 12:
      return 0x10000000000000C8;
    case 13:
    case 14:
      return 0x1000000000000027;
    case 15:
      return 0x10000000000000BBLL;
    case 16:
      return 0xD00000000000003FLL;
    case 17:
      return 0xD00000000000003BLL;
    case 18:
      return 0xD00000000000001BLL;
    case 19:
      return 0xD00000000000001CLL;
    case 20:
      return 0x1000000000000061;
    case 21:
      return 0x100000000000001BLL;
    case 22:
      return 0xD000000000000019;
    case 23:
      return 0xD000000000000037;
    case 24:
      return 0x1000000000000061;
    case 25:
      return 0x1000000000000070;
    case 26:
      uint64_t v2 = v9 | v8 | v7;
      if (!(v11 | v12 | v5 | v10 | v2 | v6)) {
        return 19279;
      }
      uint64_t v3 = v11 | v12 | v10 | v2 | v6;
      if (v5 == 1 && !v3) {
        return 0x776F4E20746F4ELL;
      }
      if (v5 == 2 && !v3) {
        return 0x6F4D206E7261654CLL;
      }
      if (v5 == 3 && !v3) {
        return 0x6DA0C26E7261654CLL;
      }
      if (v5 == 4 && !v3) {
        return 0x65756E69746E6F43;
      }
      if (v5 == 5 && !v3) {
        return 0x776F6C6C41;
      }
      if (v5 == 6 && !v3) {
        return 0x65726F6E6749;
      }
      if (v5 == 7 && !v3) {
        return 0x6C65636E6143;
      }
      if (v5 == 8 && !v3) {
        return 0x65766C6F736552;
      }
      if (v5 == 9 && !v3) {
        return 0x73676E6974746553;
      }
      uint64_t result = 0xD000000000000015;
      if (v5 == 10 && !v3) {
        return 0xD000000000000018;
      }
      unint64_t v4 = 0xD000000000000010;
      if (v5 == 11 && !v3) {
        return v4;
      }
      if (v5 == 12 && !v3) {
        return 0xD00000000000001DLL;
      }
      if (v5 == 13 && !v3) {
        return result;
      }
      if (v5 == 14 && !v3) {
        return 0x2070704120656874;
      }
      if (v5 == 15 && !v3) {
        return result;
      }
      if (v5 == 16 && !v3) {
        return 0xD00000000000002DLL;
      }
      if (v5 == 17 && !v3) {
        return 0xD00000000000002CLL;
      }
      if (v5 == 18 && !v3) {
        return 0xD000000000000035;
      }
      if (v5 == 19 && !v3) {
        return 0xD000000000000034;
      }
      if (v5 == 20 && !v3) {
        return v4;
      }
      if (v5 == 21 && !v3) {
        return 0xD00000000000005ALL;
      }
      if (v5 == 22 && !v3) {
        return 0x7461442072756F59;
      }
      if (v5 == 23 && !v3) {
        return 0xD000000000000062;
      }
      if (v5 == 24 && !v3) {
        return 0xD000000000000014;
      }
      if (v5 == 25 && !v3) {
        return 0xD000000000000090;
      }
      if (v5 == 26 && !v3) {
        return v4;
      }
      if (v5 == 27 && !v3) {
        return 0xD000000000000068;
      }
      if (v5 == 28 && !v3) {
        return 0xD000000000000066;
      }
      if (v5 == 29 && !v3) {
        return 0x7461442072756F59;
      }
      if (v5 == 30 && !v3) {
        return 0xD00000000000005ALL;
      }
      if (v5 == 31 && !v3) {
        return 0xD000000000000014;
      }
      if (v5 == 32 && !v3) {
        return 0xD000000000000090;
      }
      if (v5 == 33 && !v3) {
        return 0x654420776F6C6C41;
      }
      if (v5 == 34 && !v3) {
        return 0x6150207265746E45;
      }
      if (v5 == 35 && !v3) {
        return 0xD000000000000032;
      }
      if (v5 == 36 && !v3) {
        return 0x4449206863756F54;
      }
      if (v5 == 37 && !v3) {
        return 0xD000000000000025;
      }
      if (v5 == 38 && !v3) {
        return 0xD00000000000001ALL;
      }
      if (v5 == 39 && !v3) {
        return 0x1000000000000048;
      }
      if (v5 == 40 && !v3) {
        return 0x1000000000000046;
      }
      unint64_t v4 = 0xD000000000000012;
      if (v5 == 41 && !v3) {
        return v4;
      }
      if (v5 == 42 && !v3) {
        return 0x1000000000000056;
      }
      if (v5 == 43 && !v3) {
        return 0x1000000000000054;
      }
      if (v5 == 44 && !v3) {
        return v4;
      }
      if (v5 == 45 && !v3) {
        return 0x1000000000000040;
      }
      if (v5 == 46 && !v3) {
        return 0x100000000000003ELL;
      }
      if (v5 == 47 && !v3) {
        return 0x1000000000000056;
      }
      if (v5 == 48 && !v3) {
        return 0x1000000000000054;
      }
      if (v5 == 49 && !v3) {
        return 0x412065766F6D6552;
      }
      if (v5 != 50 || v3)
      {
        if (v5 != 51 || v3)
        {
          if (v5 != 52 || v3)
          {
            if (v5 != 53 || v3)
            {
              if (v5 != 54 || v3)
              {
                if (v5 != 55 || v3)
                {
                  if (v5 != 56 || v3)
                  {
                    if (v5 != 57 || v3)
                    {
                      if (v5 != 58 || v3)
                      {
                        if (v5 != 59 || v3)
                        {
                          if (v5 != 60 || v3 != 0) {
                            return 0x100000000000004FLL;
                          }
                        }
                        else
                        {
                          return 0xD00000000000001BLL;
                        }
                      }
                      else
                      {
                        return 0xD000000000000013;
                      }
                    }
                    else
                    {
                      return 0xD000000000000027;
                    }
                  }
                  else
                  {
                    return 0xD000000000000029;
                  }
                }
                else
                {
                  return 0xD000000000000031;
                }
              }
              else
              {
                return 0xD000000000000024;
              }
            }
            else
            {
              return 0xD000000000000011;
            }
          }
          else
          {
            return 0xD00000000000004ELL;
          }
        }
        else
        {
          return 0xD000000000000044;
        }
      }
      return result;
    default:
      return result;
  }
}

uint64_t sub_100298EB0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  long long v2 = *(_OWORD *)(a1 + 16);
  long long v3 = *(_OWORD *)(a1 + 32);
  long long v4 = *(_OWORD *)(a1 + 48);
  *(unsigned char *)(a2 + 64) = *(unsigned char *)(a1 + 64);
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 16) = v2;
  return a2;
}

unint64_t sub_100298ED8()
{
  unint64_t v1 = 0xD000000000000035;
  sub_100298EB0(v0, (uint64_t)&v10);
  switch(v18)
  {
    case 1:
      return 0xD000000000000029;
    case 2:
      return 0xD00000000000002ELL;
    case 3:
      return 0xD000000000000032;
    case 4:
      return 0xD000000000000039;
    case 5:
      return 0xD000000000000028;
    case 6:
      return 0xD00000000000002ALL;
    case 7:
      return 0xD000000000000031;
    case 8:
      return 0xD000000000000027;
    case 9:
      return 0xD000000000000029;
    case 10:
      return 0xD000000000000036;
    case 11:
      return 0xD00000000000002ELL;
    case 12:
      return 0xD00000000000002DLL;
    case 13:
      return 0xD00000000000003ALL;
    case 14:
      return 0xD000000000000032;
    case 15:
      return 0xD000000000000031;
    case 16:
      return 0xD000000000000040;
    case 17:
      return 0xD000000000000039;
    case 18:
      return 0xD000000000000039;
    case 19:
      return 0xD000000000000037;
    case 20:
      return 0xD000000000000040;
    case 21:
      return 0xD00000000000003DLL;
    case 22:
      return 0xD00000000000003BLL;
    case 23:
      return 0xD00000000000003DLL;
    case 24:
      return 0xD000000000000030;
    case 25:
      return 0xD00000000000003BLL;
    case 26:
      uint64_t v2 = v14 | v13 | v12;
      if (!(v16 | v17 | v10 | v15 | v2 | v11)) {
        return 0xD000000000000020;
      }
      uint64_t v3 = v16 | v17 | v15 | v2 | v11;
      unint64_t v4 = 0xD000000000000024;
      if (v10 == 1 && !v3) {
        return v4;
      }
      unint64_t v6 = 0xD000000000000027;
      if (v10 == 2 && !v3) {
        return v6;
      }
      if (v10 == 3 && !v3) {
        return 0xD000000000000038;
      }
      unint64_t v7 = 0xD000000000000026;
      if (v10 == 4 && !v3) {
        return v7;
      }
      if (v10 == 5 && !v3) {
        return 0xD000000000000023;
      }
      if (v10 == 6 && !v3 || v10 == 7 && !v3) {
        return v4;
      }
      unint64_t v8 = 0xD000000000000025;
      if (v10 == 8 && !v3) {
        return v8;
      }
      if (v10 == 9 && !v3) {
        return v7;
      }
      unint64_t v7 = 0xD000000000000033;
      if (v10 == 10 && !v3) {
        return v7;
      }
      if (v10 == 11 && !v3) {
        return v6;
      }
      unint64_t v6 = 0xD00000000000002FLL;
      if (v10 == 12 && !v3) {
        return v6;
      }
      unint64_t v9 = 0xD000000000000030;
      if (v10 == 13 && !v3) {
        return v9;
      }
      if (v10 == 14 && !v3) {
        return v7;
      }
      if (v10 == 15 && !v3) {
        return 0xD000000000000031;
      }
      if (v10 == 16 && !v3) {
        return 0xD00000000000003FLL;
      }
      if (v10 == 17 && !v3) {
        return 0xD00000000000003ELL;
      }
      if (v10 == 18 && !v3) {
        return 0xD000000000000047;
      }
      if (v10 == 19 && !v3) {
        return 0xD000000000000046;
      }
      if (v10 == 20 && !v3) {
        return 0xD00000000000003ELL;
      }
      if (v10 == 21 && !v3) {
        return 0xD00000000000003DLL;
      }
      if (v10 == 22 && !v3) {
        return 0xD000000000000037;
      }
      if (v10 == 23 && !v3) {
        return 0xD000000000000036;
      }
      if (v10 == 24 && !v3) {
        return 0xD000000000000042;
      }
      if (v10 == 25 && !v3) {
        return 0xD000000000000041;
      }
      if (v10 == 26 && !v3) {
        return 0xD000000000000042;
      }
      if (v10 == 27 && !v3) {
        return 0xD000000000000041;
      }
      if (v10 == 28 && !v3) {
        return 0xD000000000000046;
      }
      if (v10 == 29 && !v3) {
        return 0xD00000000000003BLL;
      }
      if (v10 == 30 && !v3) {
        return 0xD00000000000003ALL;
      }
      if (v10 == 31 && !v3) {
        return 0xD000000000000046;
      }
      if (v10 == 32 && !v3) {
        return 0xD000000000000045;
      }
      if (v10 == 33 && !v3) {
        return 0xD00000000000003BLL;
      }
      if (v10 == 34 && !v3) {
        return v8;
      }
      if (v10 == 35 && !v3) {
        return v9;
      }
      if (v10 == 36 && !v3) {
        return v4;
      }
      if (v10 == 37 && !v3) {
        return v6;
      }
      if (v10 == 38 && !v3) {
        return v7;
      }
      if (v10 == 39 && !v3) {
        return v1;
      }
      if (v10 == 40 && !v3) {
        return 0xD00000000000003ALL;
      }
      unint64_t v4 = 0xD00000000000002BLL;
      if (v10 == 41 && !v3) {
        return v4;
      }
      unint64_t v8 = 0xD00000000000002DLL;
      if (v10 == 42 && !v3) {
        return v8;
      }
      unint64_t v9 = 0xD000000000000032;
      if (v10 == 43 && !v3) {
        return v9;
      }
      if (v10 == 44 && !v3) {
        return v4;
      }
      if (v10 == 45 && !v3) {
        return v8;
      }
      if (v10 == 46 && !v3) {
        return v9;
      }
      if (v10 == 47 && !v3) {
        return 0xD00000000000003CLL;
      }
      if (v10 == 48 && !v3) {
        return 0xD000000000000041;
      }
      if (v10 == 49 && !v3) {
        return 0xD00000000000003FLL;
      }
      if (v10 == 50 && !v3) {
        return v6;
      }
      if (v10 == 51 && !v3) {
        return 0xD000000000000031;
      }
      if (v10 != 52 || v3)
      {
        if (v10 == 53 && !v3) {
          return 0xD00000000000002CLL;
        }
        unint64_t v6 = 0xD00000000000002ELL;
        if (v10 == 54 && !v3) {
          return v6;
        }
        if (v10 == 55 && !v3) {
          return 0xD00000000000003DLL;
        }
        if (v10 != 56 || v3)
        {
          if (v10 == 57 && !v3) {
            return 0xD00000000000003ALL;
          }
          if (v10 == 58 && !v3) {
            return v6;
          }
          if (v10 != 59 || v3)
          {
            if (v10 == 60 && v3 == 0) {
              return 0xD000000000000033;
            }
          }
          else
          {
            return 0xD000000000000036;
          }
        }
      }
      return v1;
    default:
      return v1;
  }
}

unint64_t sub_100299848()
{
  sub_100298EB0(v0, (uint64_t)v40);
  sub_100298EB0(v0, (uint64_t)&v41);
  switch(v49)
  {
    case 0:
    case 1:
    case 2:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      uint64_t v2 = v41;
      uint64_t v1 = v42;
      sub_1000172F8(&qword_10065B658);
      uint64_t v3 = swift_allocObject();
      uint64_t v4 = v3;
      *(_OWORD *)(v3 + 16) = xmmword_1005A3EC0;
      uint64_t v5 = 1701667182;
      unint64_t v6 = 0xE400000000000000;
      goto LABEL_5;
    case 3:
      uint64_t v18 = v41;
      uint64_t v17 = v42;
      uint64_t v20 = v43;
      uint64_t v19 = v44;
      uint64_t v22 = v45;
      uint64_t v21 = v46;
      sub_1000172F8(&qword_10065B658);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1005A6B00;
      *(void *)(inited + 32) = 0x656D614E707061;
      *(void *)(inited + 40) = 0xE700000000000000;
      *(void *)(inited + 48) = v18;
      *(void *)(inited + 56) = v17;
      *(void *)(inited + 64) = 0x7562697274736964;
      *(void *)(inited + 72) = 0xEB00000000726F74;
      *(void *)(inited + 80) = v20;
      *(void *)(inited + 88) = v19;
      strcpy((char *)(inited + 96), "newDistributor");
      *(unsigned char *)(inited + 111) = -18;
      *(void *)(inited + 112) = v22;
      *(void *)(inited + 120) = v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v7 = inited;
      goto LABEL_14;
    case 4:
      uint64_t v25 = v41;
      uint64_t v24 = v42;
      uint64_t v27 = v43;
      uint64_t v26 = v44;
      sub_1000172F8(&qword_10065B658);
      uint64_t v28 = swift_initStackObject();
      uint64_t v29 = v28;
      *(_OWORD *)(v28 + 16) = xmmword_1005A4070;
      *(void *)(v28 + 32) = 0x656D614E707061;
      *(void *)(v28 + 40) = 0xE700000000000000;
      *(void *)(v28 + 48) = v25;
      *(void *)(v28 + 56) = v24;
      uint64_t v30 = 0x727473694477656ELL;
      unint64_t v31 = 0xEE00726F74756269;
      goto LABEL_11;
    case 10:
    case 11:
    case 13:
    case 14:
      uint64_t v2 = v41;
      uint64_t v1 = v42;
      sub_1000172F8(&qword_10065B658);
      uint64_t v3 = swift_initStackObject();
      uint64_t v4 = v3;
      *(_OWORD *)(v3 + 16) = xmmword_1005A3EC0;
      uint64_t v5 = 0x65706F6C65766564;
      unint64_t v6 = 0xED0000656D614E72;
      goto LABEL_5;
    case 12:
    case 15:
      uint64_t v9 = v43;
      uint64_t v8 = v44;
      uint64_t v11 = v45;
      uint64_t v10 = v46;
      uint64_t v13 = v47;
      uint64_t v12 = v48;
      uint64_t v15 = v41;
      uint64_t v14 = v42;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1000172F8(&qword_10065B658);
      uint64_t v7 = swift_initStackObject();
      *(_OWORD *)(v7 + 16) = xmmword_1005A3FC0;
      *(void *)(v7 + 32) = 0x656D614E707061;
      *(void *)(v7 + 40) = 0xE700000000000000;
      *(void *)(v7 + 48) = v15;
      *(void *)(v7 + 56) = v14;
      *(void *)(v7 + 64) = 0x6E69616D6F64;
      *(void *)(v7 + 72) = 0xE600000000000000;
      *(void *)(v7 + 80) = v9;
      *(void *)(v7 + 88) = v8;
      strcpy((char *)(v7 + 96), "developerName");
      *(_WORD *)(v7 + 110) = -4864;
      *(void *)(v7 + 112) = v11;
      *(void *)(v7 + 120) = v10;
      strcpy((char *)(v7 + 128), "learnMoreLink");
      *(_WORD *)(v7 + 142) = -4864;
      *(void *)(v7 + 144) = v13;
      *(void *)(v7 + 152) = v12;
      goto LABEL_14;
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
      uint64_t v34 = v41;
      uint64_t v35 = v42;
      sub_1000172F8(&qword_10065B658);
      uint64_t v36 = swift_initStackObject();
      uint64_t v37 = v36;
      *(_OWORD *)(v36 + 16) = xmmword_1005A3EC0;
      uint64_t v38 = 0x6C7074656B72616DLL;
      unsigned int v39 = 1315267425;
      goto LABEL_13;
    case 20:
      uint64_t v33 = v41;
      uint64_t v32 = v42;
      uint64_t v27 = v43;
      uint64_t v26 = v44;
      sub_1000172F8(&qword_10065B658);
      uint64_t v28 = swift_initStackObject();
      uint64_t v29 = v28;
      *(_OWORD *)(v28 + 16) = xmmword_1005A4070;
      *(void *)(v28 + 32) = 0x656D614E707061;
      *(void *)(v28 + 40) = 0xE700000000000000;
      *(void *)(v28 + 48) = v33;
      *(void *)(v28 + 56) = v32;
      uint64_t v30 = 0x6C7074656B72616DLL;
      unint64_t v31 = 0xEF656D614E656361;
LABEL_11:
      *(void *)(v28 + 64) = v30;
      *(void *)(v28 + 72) = v31;
      *(void *)(v28 + 80) = v27;
      *(void *)(v28 + 88) = v26;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v7 = v29;
      goto LABEL_14;
    case 22:
    case 24:
    case 25:
      uint64_t v2 = v41;
      uint64_t v1 = v42;
      sub_1000172F8(&qword_10065B658);
      uint64_t v3 = swift_allocObject();
      uint64_t v4 = v3;
      *(_OWORD *)(v3 + 16) = xmmword_1005A3EC0;
      uint64_t v5 = 0x656D614E707061;
      unint64_t v6 = 0xE700000000000000;
LABEL_5:
      *(void *)(v3 + 32) = v5;
      *(void *)(v3 + 40) = v6;
      *(void *)(v3 + 48) = v2;
      *(void *)(v3 + 56) = v1;
      sub_100299DB0(v0);
      uint64_t v7 = v4;
      goto LABEL_14;
    case 23:
      uint64_t v34 = v41;
      uint64_t v35 = v42;
      sub_1000172F8(&qword_10065B658);
      uint64_t v36 = swift_allocObject();
      uint64_t v37 = v36;
      *(_OWORD *)(v36 + 16) = xmmword_1005A3EC0;
      uint64_t v38 = 0x7562697274736964;
      unsigned int v39 = 1316122484;
LABEL_13:
      *(void *)(v36 + 32) = v38;
      *(void *)(v36 + 40) = v39 | 0xEF656D6100000000;
      *(void *)(v36 + 48) = v34;
      *(void *)(v36 + 56) = v35;
      swift_bridgeObjectRetain();
      uint64_t v7 = v37;
LABEL_14:
      unint64_t result = sub_10044B560(v7);
      break;
    default:
      unint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_100299DB0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100299DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result = a2;
  switch(a9)
  {
    case 0:
    case 1:
    case 2:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 13:
    case 14:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      goto LABEL_2;
    case 3:
      goto LABEL_6;
    case 4:
    case 20:
      goto LABEL_7;
    case 12:
    case 15:
      swift_bridgeObjectRetain();
LABEL_6:
      swift_bridgeObjectRetain();
LABEL_7:
      swift_bridgeObjectRetain();
LABEL_2:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for LocalizationKey(uint64_t a1)
{
  return sub_10019C9FC(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
}

uint64_t initializeWithCopy for LocalizationKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  char v11 = *(unsigned char *)(a2 + 64);
  sub_100299DFC(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 64) = v11;
  return a1;
}

uint64_t assignWithCopy for LocalizationKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  char v11 = *(unsigned char *)(a2 + 64);
  sub_100299DFC(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  char v20 = *(unsigned char *)(a1 + 64);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 64) = v11;
  sub_10019C9FC(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

__n128 initializeWithTake for LocalizationKey(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for LocalizationKey(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 64);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  char v12 = *(unsigned char *)(a1 + 64);
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  long long v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(unsigned char *)(a1 + 64) = v3;
  sub_10019C9FC(v4, v6, v5, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocalizationKey(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xE6 && *(unsigned char *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 230);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 <= 0x1A) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LocalizationKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xE5)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)__n128 result = a2 - 230;
    if (a3 >= 0xE6) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0xE6) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 64) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10029A1C8(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 64) <= 0x19u) {
    return *(unsigned __int8 *)(a1 + 64);
  }
  else {
    return (*(_DWORD *)a1 + 26);
  }
}

uint64_t sub_10029A1E0(uint64_t result, unsigned int a2)
{
  if (a2 >= 0x1A)
  {
    *(void *)__n128 result = a2 - 26;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(void *)(result + 56) = 0;
    LOBYTE(a2) = 26;
  }
  *(unsigned char *)(result + 64) = a2;
  return result;
}

ValueMetadata *type metadata accessor for LocalizationKey()
{
  return &type metadata for LocalizationKey;
}

uint64_t sub_10029A21C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SecureButtonTag.ButtonImagePlacement();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v14 - v7;
  v14[1] = a1;
  SecureButtonTag.imagePlacement.getter();
  uint64_t v9 = *(void (**)(char *, void, uint64_t))(v3 + 104);
  v9(v6, enum case for SecureButtonTag.ButtonImagePlacement.top(_:), v2);
  sub_10029AB90((unint64_t *)&qword_10065E900, (void (*)(uint64_t))&type metadata accessor for SecureButtonTag.ButtonImagePlacement);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v11 = v14[2];
  uint64_t v10 = v14[3];
  char v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v12(v6, v2);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v12)(v8, v2);
  if (v10 != v11)
  {
    SecureButtonTag.imagePlacement.getter();
    v9(v6, enum case for SecureButtonTag.ButtonImagePlacement.bottom(_:), v2);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    v12(v6, v2);
    return ((uint64_t (*)(char *, uint64_t))v12)(v8, v2);
  }
  return result;
}

id sub_10029A48C(uint64_t a1, unint64_t a2, void *a3, void *a4, double a5)
{
  uint64_t v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return 0;
  }
  NSString v9 = String._bridgeToObjectiveC()();
  sub_1000172F8(&qword_10065E908);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A4070;
  *(void *)(inited + 32) = kCTFontAttributeName;
  type metadata accessor for CTFont(0);
  *(void *)(inited + 40) = a3;
  *(void *)(inited + 64) = v11;
  *(void *)(inited + 72) = kCTForegroundColorAttributeName;
  type metadata accessor for CGColor(0);
  *(void *)(inited + 104) = v12;
  *(void *)(inited + 80) = a4;
  CFStringRef v13 = (id)kCTFontAttributeName;
  id v14 = a3;
  CFStringRef v15 = (id)kCTForegroundColorAttributeName;
  id v16 = a4;
  sub_10044B684(inited);
  type metadata accessor for CFString(0);
  sub_10029AB90(&qword_10065B450, type metadata accessor for CFString);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v18 = [objc_allocWithZone((Class)UISTextLineDrawing) initWithString:v9 attributes:isa lineBreakMode:2 textAlignment:0 width:NAN scale:a5];

  return v18;
}

void sub_10029A620(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  sub_1000172F8(&qword_10065E8F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
  *(void *)(inited + 32) = kCTFontNameAttribute;
  CFStringRef v7 = (id)kCTFontNameAttribute;
  *(void *)(inited + 40) = [a1 fontContentSizeCategory];
  sub_10044C640(inited);
  type metadata accessor for CFString(0);
  sub_10029AB90(&qword_10065B450, type metadata accessor for CFString);
  CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v9 = CTFontDescriptorCreateWithAttributes(isa);

  SecureButtonTag.fontSize.getter();
  uint64_t v11 = CTFontCreateWithFontDescriptor(v9, v10, 0);
  id v72 = [a1 fontContentSizeCategory];
  unsigned int v12 = [a1 displayScale];
  uint64_t v13 = SecureButtonTag.label.getter();
  unint64_t v15 = v14;
  swift_bridgeObjectRetain();
  SecureButtonTag.imageName.getter();
  id v17 = v16;
  if (v16)
  {
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v17 = [a1 assetGlyphWithName:v18 glyphSize:3 textStyle:kCTUIFontTextStyleShortBody];
  }
  id v19 = v17;
  CGColorRef GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
  CGColorRef v73 = GenericRGB;
  unint64_t v70 = v19;
  if (v17)
  {
    id v21 = [objc_allocWithZone((Class)UISVectorGlyphDrawing) initWithVectorGlyph:v19 tintColor:GenericRGB];
    CGColorRef v22 = v73;
    uint64_t v23 = v21;
  }
  else
  {
    CGColorRef v22 = GenericRGB;
    uint64_t v23 = 0;
  }
  double v24 = (double)v12;
  id v25 = sub_10029A48C(v13, v15, v11, v22, (double)v12);
  swift_bridgeObjectRelease();

  id v71 = v17;
  if (v25)
  {
    if (v23)
    {
      unint64_t v68 = v11;
      id v26 = v23;
      id v27 = v25;
      [v26 drawingSize];
      [v27 drawingSize];
      sub_10029A21C((uint64_t)a2);
      double v29 = v28;
      double v31 = v30;
      [v26 alignmentRect];
      [v27 alignmentRect];
      double v32 = v31;
      sub_10029A21C((uint64_t)a2);
      double v34 = v33;
      double v36 = v35;
      [v26 alignmentRect];
      [v26 alignmentRect];
      [v27 alignmentRect];
      double v37 = v36;
      sub_10029A21C((uint64_t)a2);
      double v39 = v38;
      double v41 = v40;

      uint64_t v11 = v68;
    }
    else
    {
      id v27 = v25;
      [v27 drawingSize];
      double v29 = v49;
      double v32 = v50;
      [v27 alignmentRect];
      double v34 = v51;
      double v37 = v52;
      [v27 alignmentRect];
      double v39 = v53;
      double v41 = v54;
    }
  }
  else if (v23)
  {
    id v42 = v23;
    [v42 drawingSize];
    double v29 = v43;
    double v32 = v44;
    [v42 alignmentRect];
    double v34 = v45;
    double v37 = v46;
    [v42 alignmentRect];
    double v39 = v47;
    [v42 alignmentRect];
    double v41 = v48;
  }
  else
  {
    double v41 = 0.0;
    double v39 = 0.0;
    double v37 = 0.0;
    double v34 = 0.0;
    double v32 = 0.0;
    double v29 = 0.0;
  }
  id v55 = [a1 preferredContentSizeCategory];
  double v56 = 0.0;
  if ((unint64_t)v55 >= 7)
  {
    id v57 = objc_msgSend(a1, "preferredContentSizeCategory", 0.0);
    if ((unint64_t)v57 < 7)
    {
      __break(1u);
      return;
    }
    double v56 = (double)((unint64_t)v57 - 6) * 4.0;
  }
  if (1.0 / v24 <= 1.0) {
    double v58 = 1.0 / v24;
  }
  else {
    double v58 = 1.0;
  }
  double v59 = v34 + 32.0 + v56;
  if (v59 <= v29) {
    double v59 = v29;
  }
  double v69 = v59;
  double v60 = v37 + 16.0;
  if (v37 + 16.0 <= v32) {
    double v60 = v32;
  }
  double v67 = v60;
  SecureButtonTag.borderWidth.getter();
  double v62 = v39 + 16.0 + v61 + v61;
  if (v62 > v29) {
    double v63 = v62;
  }
  else {
    double v63 = v29;
  }
  SecureButtonTag.borderWidth.getter();
  double v65 = v64;

  double v66 = v41 + 16.0 + v65 + v65;
  if (v66 <= v32) {
    double v66 = v32;
  }
  *(void *)a3 = v13;
  *(void *)(a3 + 8) = v15;
  *(void *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v71;
  *(double *)(a3 + 32) = v34;
  *(double *)(a3 + 40) = v37;
  *(void *)(a3 + 48) = v72;
  *(double *)(a3 + 56) = v24;
  *(double *)(a3 + 64) = v69;
  *(double *)(a3 + 72) = v67;
  *(double *)(a3 + 80) = v63 - v58;
  *(double *)(a3 + 88) = v66 - v58;
}

uint64_t sub_10029AB90(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

_OWORD *sub_10029ABD8@<X0>(char a1@<W2>, uint64_t a2@<X3>, _OWORD *a3@<X8>)
{
  id v5 = sub_10029AFE4(a1);
  if (v5)
  {
    uint64_t v6 = v5;
    NSString v7 = String._bridgeToObjectiveC()();
    id v8 = [v6 objectForKey:v7];

    if (v8)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v10, 0, sizeof(v10));
    }
    sub_10001733C((uint64_t)v10, (uint64_t)&v11, (uint64_t *)&unk_10065C9C0);
  }
  else
  {
    long long v11 = 0u;
    long long v12 = 0u;
  }
  sub_100017238(a2, (uint64_t)v10, (uint64_t *)&unk_10065C9C0);
  if (*((void *)&v12 + 1))
  {
    sub_10001729C((uint64_t)v10, (uint64_t *)&unk_10065C9C0);
    return sub_1001C5DD4(&v11, a3);
  }
  else
  {
    sub_10001733C((uint64_t)v10, (uint64_t)a3, (uint64_t *)&unk_10065C9C0);
    return (_OWORD *)sub_10001729C((uint64_t)&v11, (uint64_t *)&unk_10065C9C0);
  }
}

uint64_t sub_10029AD08@<X0>(char a1@<W2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_1000172F8(&qword_10065B8F0);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  NSString v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  long long v11 = (char *)v20 - v10;
  id v12 = sub_10029AFE4(a1);
  if (v12)
  {
    uint64_t v13 = v12;
    NSString v14 = String._bridgeToObjectiveC()();
    id v15 = [v13 objectForKey:v14];

    if (v15)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v20, 0, sizeof(v20));
    }
    sub_10001733C((uint64_t)v20, (uint64_t)&v21, (uint64_t *)&unk_10065C9C0);
    if (*((void *)&v22 + 1))
    {
      uint64_t v16 = type metadata accessor for Date();
      int v17 = swift_dynamicCast();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v11, v17 ^ 1u, 1, v16);
      goto LABEL_9;
    }
  }
  else
  {
    long long v21 = 0u;
    long long v22 = 0u;
  }
  sub_10001729C((uint64_t)&v21, (uint64_t *)&unk_10065C9C0);
  uint64_t v16 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v11, 1, 1, v16);
LABEL_9:
  sub_100017238(a2, (uint64_t)v9, &qword_10065B8F0);
  type metadata accessor for Date();
  uint64_t v18 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v11, 1, v16) == 1)
  {
    sub_10001733C((uint64_t)v9, a3, &qword_10065B8F0);
    return sub_10001729C((uint64_t)v11, &qword_10065B8F0);
  }
  else
  {
    sub_10001729C((uint64_t)v9, &qword_10065B8F0);
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(a3, v11, v16);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(a3, 0, 1, v16);
  }
}

id sub_10029AFE4(char a1)
{
  if (a1 == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v1 & 1) == 0)
    {
      id v3 = objc_allocWithZone((Class)NSUserDefaults);
      NSString v4 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v2 = [v3 initWithSuiteName:v4];

      return v2;
    }
  }
  return [self standardUserDefaults];
}

uint64_t sub_10029B154(uint64_t a1, uint64_t a2, void *a3)
{
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  strcpy((char *)v9, "Error code: ");
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8236;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = a2;
  v7._object = a3;
  String.append(_:)(v7);
  return v9[0];
}

uint64_t sub_10029B21C(uint64_t a1)
{
  unint64_t v2 = sub_10029CE3C();

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10029B258(uint64_t a1)
{
  unint64_t v2 = sub_10029CE3C();

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10029B298()
{
  return *v0;
}

unint64_t sub_10029B2A0()
{
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v1 = *(void *)(v0 + 16);
  sub_1000172F8(&qword_10065C3A0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v4;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v2;
  *(void *)(inited + 56) = v1;
  swift_bridgeObjectRetain();
  return sub_10044B428(inited);
}

uint64_t sub_10029B328()
{
  return sub_10029B154(*v0, *((void *)v0 + 1), *((void **)v0 + 2));
}

uint64_t sub_10029B340@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10029B374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(v8 + 120) = v13;
  *(_OWORD *)(v8 + 104) = v12;
  *(void *)(v8 + 88) = a6;
  *(void *)(v8 + 96) = a8;
  *(unsigned char *)(v8 + 256) = a7;
  *(void *)(v8 + 72) = a4;
  *(void *)(v8 + 80) = a5;
  *(void *)(v8 + 56) = a2;
  *(void *)(v8 + 64) = a3;
  *(void *)(v8 + 48) = a1;
  uint64_t v9 = type metadata accessor for Logger();
  *(void *)(v8 + 128) = v9;
  *(void *)(v8 + 136) = *(void *)(v9 - 8);
  *(void *)(v8 + 144) = swift_task_alloc();
  return _swift_task_switch(sub_10029B484, 0, 0);
}

uint64_t sub_10029B484()
{
  uint64_t v1 = *(void *)(v0 + 48);
  *(_DWORD *)(v0 + 216) = v1;
  *(void *)(v0 + 32) = 0;
  uint64_t v2 = (char **)(v0 + 32);
  *(_DWORD *)(v0 + 248) = 0;
  int v3 = *(unsigned __int8 *)(v0 + 256);
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v6 = *(void *)(v0 + 56);
  *(_DWORD *)(v0 + 220) = HIDWORD(v1);
  *(void *)(v0 + 224) = v6;
  *(void *)(v0 + 232) = v5;
  *(void *)(v0 + 240) = v4;
  uint64_t v7 = sub_10018AD90((unsigned char *)(v0 + 216), 32);
  unint64_t v9 = v8;
  *(void *)(v0 + 152) = v7;
  *(void *)(v0 + 160) = v8;
  if (v3 == 1)
  {
    uint64_t v11 = *(void *)(v0 + 80);
    unint64_t v10 = *(void *)(v0 + 88);
    sub_100012670(v11, v10);
    long long v12 = sub_1004E257C(v11, v10);
    sub_100013510(v11, v10);
    sub_100012670(v7, v9);
    uint64_t v13 = sub_1004E257C(v7, v9);
    sub_100013510(v7, v9);
    unint64_t v14 = v13[2];
    if (HIDWORD(v14)) {
      return _assertionFailure(_:_:file:line:flags:)();
    }
    unint64_t v15 = v12[2];
    if (HIDWORD(v15)) {
      return _assertionFailure(_:_:file:line:flags:)();
    }
    sub_10003733C((uint64_t)(v13 + 4), v14, (uint64_t)(v12 + 4), v15, v0 + 32, v0 + 248);
    int v17 = v16;
    swift_release();
    swift_release();
    if (v17)
    {
      uint64_t v19 = *(void *)(v0 + 96);
      uint64_t v18 = *(void **)(v0 + 104);
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      v20._countAndFlagsBits = v19;
      v20._object = v18;
      String.append(_:)(v20);
      sub_10023AE84();
      swift_allocError();
      *(_DWORD *)uint64_t v21 = v17;
      *(void *)(v21 + 8) = 0xD000000000000020;
      *(void *)(v21 + 16) = 0x80000001005BD090;
LABEL_8:
      swift_willThrow();
      uint64_t v28 = v7;
      unint64_t v29 = v9;
LABEL_9:
      sub_100013510(v28, v29);
      swift_task_dealloc();
      double v30 = *(uint64_t (**)(void))(v0 + 8);
      return v30();
    }
    double v38 = *v2;
    if (!*v2)
    {
      uint64_t v48 = *(void *)(v0 + 152);
      unint64_t v49 = *(void *)(v0 + 160);
      uint64_t v50 = type metadata accessor for MarketplaceKitError();
      sub_10029CC2C((unint64_t *)&qword_10065B538, (void (*)(uint64_t))&type metadata accessor for MarketplaceKitError);
      swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v50 - 8) + 104))(v51, enum case for MarketplaceKitError.featureUnavailable(_:), v50);
      swift_willThrow();
      uint64_t v28 = v48;
      unint64_t v29 = v49;
      goto LABEL_9;
    }
    int v39 = *(unsigned __int8 *)(v0 + 256);
    double v40 = sub_1004FD69C(v38, *(unsigned int *)(v0 + 248));
    uint64_t v41 = sub_1004E2738((uint64_t)v40);
    uint64_t v43 = v42;
    swift_release();
    if (v39 == 1)
    {
      sub_10010AF08((uint64_t)v38);
      int v45 = v44;
      if (v44 != noErr.getter())
      {
        static Logger.daemon.getter();
        double v54 = Logger.logObject.getter();
        os_log_type_t v55 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v54, v55))
        {
          uint64_t v60 = *(void *)(v0 + 152);
          unint64_t v61 = *(void *)(v0 + 160);
          uint64_t v56 = swift_slowAlloc();
          double v59 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v56 = 138412546;
          uint64_t v57 = sub_1005163F0();
          *(void *)(v0 + 40) = v57;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *double v59 = v57;
          *(_WORD *)(v56 + 12) = 1026;
          *(_DWORD *)(v0 + 252) = v45;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v54, v55, "[%@] Unable to dispose of provisioning data: %{public}d", (uint8_t *)v56, 0x12u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          sub_100013510(v60, v61);
        }
        else
        {
          sub_100013510(*(void *)(v0 + 152), *(void *)(v0 + 160));
        }
        (*(void (**)(void, void))(*(void *)(v0 + 136) + 8))(*(void *)(v0 + 144), *(void *)(v0 + 128));
        goto LABEL_26;
      }
      uint64_t v46 = *(void *)(v0 + 152);
      unint64_t v47 = *(void *)(v0 + 160);
    }
    else
    {
      uint64_t v53 = *(void *)(v0 + 152);
      unint64_t v52 = *(void *)(v0 + 160);
      qENIaLkr();
      uint64_t v46 = v53;
      unint64_t v47 = v52;
    }
    sub_100013510(v46, v47);
LABEL_26:
    swift_task_dealloc();
    double v58 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v58(v41, v43);
  }
  *(void *)(v0 + 168) = sub_1004FC2F8();
  *(void *)(v0 + 176) = v22;
  if (v22 >> 60 == 15)
  {
    uint64_t v24 = *(void *)(v0 + 96);
    uint64_t v23 = *(void **)(v0 + 104);
    type metadata accessor for InternalError();
    sub_10029CC2C((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    id v26 = v25;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = v24;
    v27._object = v23;
    String.append(_:)(v27);
    *id v26 = 0xD00000000000001ALL;
    v26[1] = 0x80000001005BD070;
    swift_storeEnumTagMultiPayload();
    goto LABEL_8;
  }
  uint64_t v33 = *(void *)(v0 + 96);
  uint64_t v32 = *(void *)(v0 + 104);
  uint64_t v34 = swift_task_alloc();
  *(void *)(v0 + 184) = v34;
  *(void *)(v34 + 16) = v33;
  *(void *)(v34 + 24) = v32;
  uint64_t v35 = swift_task_alloc();
  *(void *)(v0 + 192) = v35;
  *(void *)(v35 + 16) = sub_10029CC74;
  *(void *)(v35 + 24) = v34;
  uint64_t v36 = dword_1006607A8;
  double v37 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v37;
  *double v37 = v0;
  v37[1] = sub_10029BC00;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1006607A8 + v36))(v0 + 16, (uint64_t)sub_10029CCA0, v35);
}

uint64_t sub_10029BC00()
{
  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10029C18C;
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = sub_10029BD58;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10029BD58()
{
  uint64_t v1 = (char **)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  if (qword_10065B130 != -1) {
    swift_once();
  }
  uint64_t v4 = *(void *)(v0 + 208);
  sub_1004E393C(*(void *)(v0 + 152), *(void *)(v0 + 160), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 168), *(void *)(v0 + 176), v2, v3, v0 + 32, v0 + 248, *(void *)(v0 + 96), *(void **)(v0 + 104));
  uint64_t v5 = v4;
  uint64_t v7 = *(void *)(v0 + 168);
  unint64_t v6 = *(void *)(v0 + 176);
  if (v5)
  {
    uint64_t v9 = *(void *)(v0 + 152);
    unint64_t v8 = *(void *)(v0 + 160);
    sub_100013510(v2, v3);
    sub_10018AE44(v7, v6);
    uint64_t v10 = v9;
    unint64_t v11 = v8;
LABEL_5:
    sub_100013510(v10, v11);
    swift_task_dealloc();
    long long v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
  sub_100013510(v2, v3);
  sub_10018AE44(v7, v6);
  unint64_t v14 = *v1;
  if (!*v1)
  {
    uint64_t v25 = *(void *)(v0 + 152);
    unint64_t v24 = *(void *)(v0 + 160);
    uint64_t v26 = type metadata accessor for MarketplaceKitError();
    sub_10029CC2C((unint64_t *)&qword_10065B538, (void (*)(uint64_t))&type metadata accessor for MarketplaceKitError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v26 - 8) + 104))(v27, enum case for MarketplaceKitError.featureUnavailable(_:), v26);
    swift_willThrow();
    uint64_t v10 = v25;
    unint64_t v11 = v24;
    goto LABEL_5;
  }
  int v15 = *(unsigned __int8 *)(v0 + 256);
  int v16 = sub_1004FD69C(*v1, *(unsigned int *)(v0 + 248));
  uint64_t v17 = sub_1004E2738((uint64_t)v16);
  uint64_t v19 = v18;
  swift_release();
  if (v15 == 1)
  {
    sub_10010AF08((uint64_t)v14);
    int v21 = v20;
    if (v20 != noErr.getter())
    {
      static Logger.daemon.getter();
      double v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v36 = *(void *)(v0 + 152);
        unint64_t v37 = *(void *)(v0 + 160);
        uint64_t v32 = swift_slowAlloc();
        uint64_t v33 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v32 = 138412546;
        uint64_t v34 = sub_1005163F0();
        *(void *)(v0 + 40) = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v33 = v34;
        *(_WORD *)(v32 + 12) = 1026;
        *(_DWORD *)(v0 + 252) = v21;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "[%@] Unable to dispose of provisioning data: %{public}d", (uint8_t *)v32, 0x12u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_100013510(v36, v37);
      }
      else
      {
        sub_100013510(*(void *)(v0 + 152), *(void *)(v0 + 160));
      }
      (*(void (**)(void, void))(*(void *)(v0 + 136) + 8))(*(void *)(v0 + 144), *(void *)(v0 + 128));
      goto LABEL_19;
    }
    uint64_t v22 = *(void *)(v0 + 152);
    unint64_t v23 = *(void *)(v0 + 160);
  }
  else
  {
    uint64_t v29 = *(void *)(v0 + 152);
    unint64_t v28 = *(void *)(v0 + 160);
    qENIaLkr();
    uint64_t v22 = v29;
    unint64_t v23 = v28;
  }
  sub_100013510(v22, v23);
LABEL_19:
  swift_task_dealloc();
  uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v35(v17, v19);
}

uint64_t sub_10029C18C()
{
  uint64_t v2 = v0[21];
  unint64_t v1 = v0[22];
  sub_100013510(v0[19], v0[20]);
  sub_10018AE44(v2, v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10029C258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[29] = a6;
  v7[30] = a7;
  v7[27] = a4;
  v7[28] = a5;
  v7[25] = a2;
  v7[26] = a3;
  v7[24] = a1;
  return _swift_task_switch(sub_10029C284, 0, 0);
}

uint64_t sub_10029C284()
{
  uint64_t v1 = audit_token_t.signingIdentifier.getter(*(void *)(v0 + 192), *(void *)(v0 + 200), *(void *)(v0 + 208), *(void *)(v0 + 216));
  *(void *)(v0 + 248) = v2;
  if (v2)
  {
    uint64_t v3 = v1;
    uint64_t v4 = v2;
    id v5 = objc_allocWithZone((Class)LSApplicationRecord);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 256) = sub_1003DB240(v3, v4, 0);
    sub_10050BD10(v0 + 56);
    if (*(void *)(v0 + 80))
    {
      sub_10018B164((long long *)(v0 + 56), v0 + 16);
      uint64_t v10 = *(void *)(v0 + 40);
      uint64_t v11 = *(void *)(v0 + 48);
      sub_10018AC60((void *)(v0 + 16), v10);
      char v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 48))(v10, v11);
      uint64_t v13 = (void *)swift_task_alloc();
      *(void *)(v0 + 264) = v13;
      void *v13 = v0;
      if ((v12 & 1) == 0)
      {
        v13[1] = sub_10029C7B4;
        uint64_t v14 = *(void *)(v0 + 232);
        uint64_t v15 = *(void *)(v0 + 216);
        uint64_t v16 = *(void *)(v0 + 224);
        uint64_t v17 = *(void *)(v0 + 200);
        uint64_t v18 = *(void *)(v0 + 208);
        uint64_t v19 = *(void *)(v0 + 192);
        char v21 = 0;
        goto LABEL_12;
      }
      v13[1] = sub_10029C594;
      uint64_t v14 = *(void *)(v0 + 232);
      uint64_t v15 = *(void *)(v0 + 216);
      uint64_t v16 = *(void *)(v0 + 224);
      uint64_t v17 = *(void *)(v0 + 200);
      uint64_t v18 = *(void *)(v0 + 208);
      uint64_t v19 = *(void *)(v0 + 192);
    }
    else
    {
      sub_10029CBCC(v0 + 56);
      int v20 = (void *)swift_task_alloc();
      *(void *)(v0 + 288) = v20;
      *int v20 = v0;
      v20[1] = sub_10029C9D4;
      uint64_t v14 = *(void *)(v0 + 232);
      uint64_t v15 = *(void *)(v0 + 216);
      uint64_t v16 = *(void *)(v0 + 224);
      uint64_t v17 = *(void *)(v0 + 200);
      uint64_t v18 = *(void *)(v0 + 208);
      uint64_t v19 = *(void *)(v0 + 192);
    }
    char v21 = 1;
LABEL_12:
    return sub_10029B374(v19, v17, v18, v15, v16, v14, v21, v3);
  }
  uint64_t v6 = type metadata accessor for MarketplaceKitError();
  sub_10029CC2C((unint64_t *)&qword_10065B538, (void (*)(uint64_t))&type metadata accessor for MarketplaceKitError);
  swift_allocError();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v6 - 8) + 104))(v7, enum case for MarketplaceKitError.featureUnavailable(_:), v6);
  swift_willThrow();
  unint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_10029C594(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[12] = v3;
  v4[13] = a1;
  v4[14] = a2;
  v4[15] = v2;
  v4[34] = v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v2) {
    id v5 = sub_10029C744;
  }
  else {
    id v5 = sub_10029C6D0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10029C6D0()
{
  sub_100014524(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v3(v1, v2);
}

uint64_t sub_10029C744()
{
  sub_100014524(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10029C7B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[16] = v3;
  v4[17] = a1;
  v4[18] = a2;
  v4[19] = v2;
  v4[35] = v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v2) {
    uint64_t v5 = sub_10029C964;
  }
  else {
    uint64_t v5 = sub_10029C8F0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10029C8F0()
{
  sub_100014524(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v3(v1, v2);
}

uint64_t sub_10029C964()
{
  sub_100014524(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10029C9D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[20] = v3;
  v4[21] = a1;
  v4[22] = a2;
  v4[23] = v2;
  v4[37] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_10029CB60;
  }
  else {
    uint64_t v5 = sub_10029CAF0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10029CAF0()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v3(v1, v2);
}

uint64_t sub_10029CB60()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10029CBCC(uint64_t a1)
{
  uint64_t v2 = sub_1000172F8(&qword_10065D3A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10029CC2C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10029CC74()
{
  return sub_10043AA30(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10029CCA0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2)
  {
    *a1 = result;
    a1[1] = v5;
  }
  return result;
}

uint64_t destroy for PassbookProvisioningUtilities.Error()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s28ManagedAppDistributionDaemon29PassbookProvisioningUtilitiesO5ErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PassbookProvisioningUtilities.Error(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PassbookProvisioningUtilities.Error(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PassbookProvisioningUtilities.Error(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PassbookProvisioningUtilities.Error(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PassbookProvisioningUtilities.Error()
{
  return &type metadata for PassbookProvisioningUtilities.Error;
}

unint64_t sub_10029CE3C()
{
  unint64_t result = qword_10065E920;
  if (!qword_10065E920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10065E920);
  }
  return result;
}

uint64_t sub_10029CE90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a1;
  uint64_t v7 = type metadata accessor for Logger();
  v4[4] = v7;
  v4[5] = *(void *)(v7 - 8);
  v4[6] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UTType();
  v4[7] = v8;
  v4[8] = *(void *)(v8 - 8);
  v4[9] = swift_task_alloc();
  sub_1000172F8(&qword_10065DCB8);
  v4[10] = swift_task_alloc();
  uint64_t v9 = (void *)swift_task_alloc();
  v4[11] = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10029D030;
  return sub_10044D2A4(a2, 0, 0x403E000000000000, 0, a4);
}

uint64_t sub_10029D030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[12] = a1;
  v5[13] = a2;
  v5[14] = a3;
  swift_task_dealloc();
  if (v3)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v5[1];
    return v6();
  }
  else
  {
    return _swift_task_switch(sub_10029D190, 0, 0);
  }
}

uint64_t sub_10029D190()
{
  id v1 = [*(id *)(v0 + 112) statusCode];
  unint64_t v2 = *(void **)(v0 + 112);
  if (v1 == (id)200)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 64) + 56))(*(void *)(v0 + 24), 1, 1, *(void *)(v0 + 56));
    NSString v3 = String._bridgeToObjectiveC()();
    id v4 = [v2 valueForHTTPHeaderField:v3];

    uint64_t v5 = *(void **)(v0 + 112);
    if (v4)
    {
      uint64_t v6 = *(void *)(v0 + 80);
      uint64_t v7 = *(void *)(v0 + 24);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      static UTType.data.getter();
      UTType.init(mimeType:conformingTo:)();

      sub_10029D500(v7);
      sub_10029D560(v6, v7);
    }
    else
    {
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v21 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    uint64_t v22 = *(void *)(v0 + 96);
    uint64_t v23 = *(void *)(v0 + 104);
    return v21(v22, v23);
  }
  else
  {
    static Logger.install.getter();
    id v8 = v2;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    char v12 = *(void **)(v0 + 112);
    if (v11)
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 134217984;
      *(void *)(v0 + 16) = [v12 statusCode];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Artwork download failed with invalid status code %ld", v13, 0xCu);
      swift_slowDealloc();
    }
    else
    {
    }
    unint64_t v14 = *(void *)(v0 + 104);
    uint64_t v15 = *(void **)(v0 + 112);
    uint64_t v16 = *(void *)(v0 + 96);
    (*(void (**)(void, void))(*(void *)(v0 + 40) + 8))(*(void *)(v0 + 48), *(void *)(v0 + 32));
    id v17 = [v15 statusCode];
    sub_10029D4AC();
    swift_allocError();
    *(void *)uint64_t v18 = v17;
    *(unsigned char *)(v18 + 8) = 0;
    swift_willThrow();

    sub_100013510(v16, v14);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
    return v19();
  }
}

unint64_t sub_10029D4AC()
{
  unint64_t result = qword_10065E930;
  if (!qword_10065E930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E930);
  }
  return result;
}

uint64_t sub_10029D500(uint64_t a1)
{
  uint64_t v2 = sub_1000172F8(&qword_10065DCB8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10029D560(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_10065DCB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10029D5C8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000172F8(&qword_10065E940);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10018AC60(a1, a1[3]);
  sub_10029DF08();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v11 = *(void *)(v3 + 48);
    v10[15] = 3;
    sub_1000172F8(&qword_10065E950);
    sub_10029DF5C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10029D7A0()
{
  unint64_t result = 0x5265736E6563696CLL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x4B65736E6563696CLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000017;
      break;
    case 3:
      unint64_t result = 0x6449794273707061;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10029D844@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10029E044(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10029D86C(uint64_t a1)
{
  unint64_t v2 = sub_10029DF08();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029D8A8(uint64_t a1)
{
  unint64_t v2 = sub_10029DF08();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10029D8E4(void *a1)
{
  return sub_10029D5C8(a1);
}

uint64_t sub_10029D8FC()
{
  if (*v0) {
    return 0x736E6563696C6E75;
  }
  else {
    return 0x65736E6563696CLL;
  }
}

uint64_t sub_10029D944@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10029E228(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10029D96C(uint64_t a1)
{
  unint64_t v2 = sub_10029E564();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029D9A8(uint64_t a1)
{
  unint64_t v2 = sub_10029E564();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10029D9E4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10029E340(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

unint64_t sub_10029DA14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  sub_1000172F8(&qword_10065E938);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
  *(void *)(inited + 32) = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(inited + 40) = v12;
  sub_1000172F8(&qword_10065B658);
  uint64_t v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1005A4070;
  strcpy((char *)(v13 + 32), "appleVersionId");
  *(unsigned char *)(v13 + 47) = -18;
  *(void *)(v13 + 48) = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(v13 + 56) = v14;
  strcpy((char *)(v13 + 64), "assetPublicId");
  *(_WORD *)(v13 + 78) = -4864;
  *(void *)(v13 + 80) = a5;
  *(void *)(v13 + 88) = a6;
  *(void *)(inited + 48) = sub_10044B560(v13);
  unint64_t result = sub_10044B8C4(inited);
  *(void *)a7 = a1;
  *(void *)(a7 + 8) = a2;
  *(void *)(a7 + 16) = a3;
  *(void *)(a7 + 24) = a4;
  *(void *)(a7 + 32) = 0;
  *(unsigned char *)(a7 + 40) = 1;
  *(void *)(a7 + 48) = result;
  return result;
}

uint64_t destroy for NewLicenseResponse()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s28ManagedAppDistributionDaemon18NewLicenseResponseVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for NewLicenseResponse(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NewLicenseResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NewLicenseResponse(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NewLicenseResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NewLicenseResponse()
{
  return &type metadata for NewLicenseResponse;
}

uint64_t destroy for NewLicenseRequest()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NewLicenseRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NewLicenseRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NewLicenseRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NewLicenseRequest()
{
  return &type metadata for NewLicenseRequest;
}

unint64_t sub_10029DF08()
{
  unint64_t result = qword_10065E948;
  if (!qword_10065E948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E948);
  }
  return result;
}

unint64_t sub_10029DF5C()
{
  unint64_t result = qword_10065E958;
  if (!qword_10065E958)
  {
    sub_10017B924(&qword_10065E950);
    sub_10029DFD8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E958);
  }
  return result;
}

unint64_t sub_10029DFD8()
{
  unint64_t result = qword_10065D020;
  if (!qword_10065D020)
  {
    sub_10017B924(&qword_10065D008);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065D020);
  }
  return result;
}

uint64_t sub_10029E044(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x5265736E6563696CLL && a2 == 0xEE00747365757165;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4B65736E6563696CLL && a2 == 0xEA00000000007965 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001005BD0C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6449794273707061 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_10029E228(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65736E6563696CLL && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736E6563696C6E75 && a2 == 0xEE00737070416465)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10029E340(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_10065E960);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[4];
  sub_10018AC60(a1, a1[3]);
  sub_10029E564();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100014524((uint64_t)a1);
  }
  else
  {
    v9[31] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    sub_1000172F8((uint64_t *)&unk_10065C5D0);
    v9[15] = 1;
    sub_100288278();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    sub_100014524((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_10029E564()
{
  unint64_t result = qword_10065E968;
  if (!qword_10065E968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E968);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NewLicenseResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10029E684);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NewLicenseResponse.CodingKeys()
{
  return &type metadata for NewLicenseResponse.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for NewLicenseRequest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10029E788);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NewLicenseRequest.CodingKeys()
{
  return &type metadata for NewLicenseRequest.CodingKeys;
}

unint64_t sub_10029E7C4()
{
  unint64_t result = qword_10065E970;
  if (!qword_10065E970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E970);
  }
  return result;
}

unint64_t sub_10029E81C()
{
  unint64_t result = qword_10065E978;
  if (!qword_10065E978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E978);
  }
  return result;
}

unint64_t sub_10029E874()
{
  unint64_t result = qword_10065E980;
  if (!qword_10065E980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E980);
  }
  return result;
}

unint64_t sub_10029E8CC()
{
  unint64_t result = qword_10065E988;
  if (!qword_10065E988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E988);
  }
  return result;
}

unint64_t sub_10029E924()
{
  unint64_t result = qword_10065E990;
  if (!qword_10065E990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E990);
  }
  return result;
}

unint64_t sub_10029E97C()
{
  unint64_t result = qword_10065E998;
  if (!qword_10065E998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E998);
  }
  return result;
}

void sub_10029E9D0(uint64_t a1, void *a2, void *a3)
{
  sub_10018AC60((void *)(a1 + 32), *(void *)(a1 + 56));
  if (a3)
  {
    id v5 = a3;
    sub_1000172F8(&qword_10065E9B0);
    CheckedContinuation.resume(throwing:)();
  }
  else if (a2)
  {
    id v6 = a2;
    sub_1000172F8(&qword_10065E9B0);
    CheckedContinuation.resume(returning:)();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10029EA74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[24] = a2;
  v3[25] = a3;
  v3[23] = a1;
  uint64_t v4 = sub_1000172F8(&qword_10065E9B0);
  v3[26] = v4;
  v3[27] = *(void *)(v4 - 8);
  v3[28] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[29] = v5;
  v3[30] = *(void *)(v5 - 8);
  v3[31] = swift_task_alloc();
  v3[32] = swift_task_alloc();
  v3[33] = swift_task_alloc();
  v3[34] = swift_task_alloc();
  return _swift_task_switch(sub_10029EBC0, 0, 0);
}

uint64_t sub_10029EBC0()
{
  if ([*(id *)(v0 + 184) isPlaceholder])
  {
    static Logger.appActions.getter();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v1, v2))
    {
      int v3 = (uint8_t *)swift_slowAlloc();
      uint64_t v4 = (void *)swift_slowAlloc();
      *(_DWORD *)int v3 = 138412290;
      uint64_t v5 = sub_1005163F0();
      *(void *)(v0 + 176) = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v4 = v5;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%@] Can't launch placeholder", v3, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v6 = *(void *)(v0 + 248);
LABEL_5:
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 240) + 8))(v6, *(void *)(v0 + 232));
LABEL_15:
    sub_1002A0194();
    swift_allocError();
    *int v20 = 0;
LABEL_16:
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
  id v7 = [*(id *)(v0 + 184) bundleIdentifier];
  *(void *)(v0 + 280) = v7;
  if (!v7) {
    goto LABEL_15;
  }
  id v8 = v7;
  if (!*(void *)(v0 + 200)) {
    goto LABEL_24;
  }
  uint64_t v9 = *(void **)(v0 + 184);
  swift_bridgeObjectRetain();
  id v10 = [v9 iTunesMetadata];
  id v11 = [v10 distributorInfo];

  id v12 = [v11 distributorID];
  if (!v12)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  uint64_t v13 = *(void *)(v0 + 192);
  uint64_t v14 = *(void *)(v0 + 200);
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  if (v15 == v13 && v14 == v17)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v19 & 1) == 0)
  {
LABEL_20:

    static Logger.appActions.getter();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 138412290;
      uint64_t v27 = sub_1005163F0();
      *(void *)(v0 + 168) = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v26 = v27;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "[%@] Can't launch app not installed by the requesting distributor", v25, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v6 = *(void *)(v0 + 272);
    goto LABEL_5;
  }
LABEL_24:
  if ([*(id *)(v0 + 184) isLaunchProhibited])
  {

    static Logger.appActions.getter();
    unint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      double v30 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v31 = (void *)swift_slowAlloc();
      *(_DWORD *)double v30 = 138412290;
      uint64_t v32 = sub_1005163F0();
      *(void *)(v0 + 160) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v31 = v32;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "[%@] App is launch prohibited", v30, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(void, void))(*(void *)(v0 + 240) + 8))(*(void *)(v0 + 256), *(void *)(v0 + 232));
    sub_1002A0194();
    swift_allocError();
    unsigned char *v33 = 1;
    goto LABEL_16;
  }
  id v34 = [self serviceWithDefaultShellEndpoint];
  *(void *)(v0 + 288) = v34;
  if (!v34)
  {

    static Logger.appActions.getter();
    double v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      uint64_t v43 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 138412290;
      uint64_t v44 = sub_1005163F0();
      *(void *)(v0 + 152) = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v43 = v44;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "[%@] Unable to find open service", v42, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(void, void))(*(void *)(v0 + 240) + 8))(*(void *)(v0 + 264), *(void *)(v0 + 232));
    sub_1002A0194();
    swift_allocError();
    *int v45 = 2;
    goto LABEL_16;
  }
  uint64_t v35 = v34;
  uint64_t v36 = *(void *)(v0 + 216);
  uint64_t v37 = *(void *)(v0 + 224);
  uint64_t v38 = *(void *)(v0 + 208);
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 144;
  *(void *)(v0 + 24) = sub_10029F3E8;
  swift_continuation_init();
  *(void *)(v0 + 136) = v38;
  int v39 = sub_10019CE94((uint64_t *)(v0 + 112));
  sub_10018B1DC(0, &qword_10065E9C0);
  sub_1000172F8(&qword_10065B260);
  CheckedContinuation.init(continuation:function:)();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v36 + 32))(v39, v37, v38);
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 1107296256;
  *(void *)(v0 + 96) = sub_10029E9D0;
  *(void *)(v0 + 104) = &unk_10063E720;
  objc_msgSend(v35, "openApplication:withOptions:completion:", v8, 0);
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_10029F3E8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 296) = v1;
  if (v1) {
    os_log_type_t v2 = sub_10029F5AC;
  }
  else {
    os_log_type_t v2 = sub_10029F4F8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10029F4F8()
{
  uint64_t v1 = *(void **)(v0 + 280);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10029F5AC()
{
  uint64_t v1 = (void *)v0[36];
  os_log_type_t v2 = (void *)v0[35];
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10029F65C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[12] = a3;
  v4[13] = a4;
  v4[10] = a1;
  v4[11] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[14] = v5;
  v4[15] = *(void *)(v5 - 8);
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  return _swift_task_switch(sub_10029F73C, 0, 0);
}

uint64_t sub_10029F73C()
{
  unint64_t v28 = v0;
  static Logger.appActions.getter();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v24 = v0[15];
    uint64_t v25 = v0[14];
    uint64_t v26 = v0[18];
    unint64_t v3 = v0[11];
    uint64_t v22 = v0[12];
    uint64_t v23 = v0[13];
    uint64_t v21 = v0[10];
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    v27[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412802;
    uint64_t v6 = sub_1005163F0();
    v0[6] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    *(_WORD *)(v4 + 12) = 2082;
    swift_bridgeObjectRetain();
    v0[7] = sub_1000143F4(v21, v3, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v4 + 22) = 2082;
    v0[2] = v22;
    v0[3] = v23;
    swift_bridgeObjectRetain();
    sub_1000172F8(&qword_10065C4D0);
    uint64_t v7 = String.init<A>(describing:)();
    v0[9] = sub_1000143F4(v7, v8, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%@] Handling app launch request of %{public}s for %{public}s", (uint8_t *)v4, 0x20u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v9(v26, v25);
  }
  else
  {
    uint64_t v10 = v0[18];
    uint64_t v11 = v0[14];
    uint64_t v12 = v0[15];
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v9(v10, v11);
  }
  v0[19] = v9;
  uint64_t v13 = v0[10];
  uint64_t v14 = v0[11];
  objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain();
  id v15 = sub_1003DB240(v13, v14, 1);
  v0[20] = v15;
  uint64_t v16 = (uint64_t)v15;
  uint64_t v17 = (void *)swift_task_alloc();
  v0[21] = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_10029FCBC;
  uint64_t v18 = v0[12];
  uint64_t v19 = v0[13];
  return sub_10029EA74(v16, v18, v19);
}

uint64_t sub_10029FCBC()
{
  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_10029FF74;
  }
  else {
    os_log_type_t v2 = sub_10029FDD0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10029FDD0()
{
  static Logger.appActions.getter();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    unint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v3 = 138412290;
    uint64_t v5 = sub_1005163F0();
    *(void *)(v0 + 40) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%@] Successfully launched", v3, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v0 + 152);
  uint64_t v7 = *(void *)(v0 + 136);
  uint64_t v8 = *(void *)(v0 + 112);

  v6(v7, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_10029FF74()
{
  static Logger.appActions.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412546;
    uint64_t v5 = sub_1005163F0();
    *(void *)(v0 + 64) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v4[1] = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%@] Error launching app: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 152);
  uint64_t v8 = *(void *)(v0 + 128);
  uint64_t v9 = *(void *)(v0 + 112);

  v7(v8, v9);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

unint64_t sub_1002A0194()
{
  unint64_t result = qword_10065E9B8;
  if (!qword_10065E9B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E9B8);
  }
  return result;
}

uint64_t sub_1002A01E8(uint64_t a1)
{
  return sub_100014524(a1 + 32);
}

uint64_t sub_1002A01F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[12] = a2;
  v3[13] = a3;
  v3[11] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[14] = v4;
  v3[15] = *(void *)(v4 - 8);
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  v3[19] = swift_task_alloc();
  return _swift_task_switch(sub_1002A0308, 0, 0);
}

uint64_t sub_1002A0308()
{
  double v66 = v0;
  uint64_t v1 = v0;
  double v64 = v0 + 2;
  static Logger.appActions.getter();
  swift_bridgeObjectRetain_n();
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v61 = v0[15];
    unint64_t v4 = v0[13];
    uint64_t v62 = v0[14];
    uint64_t v63 = v0[19];
    uint64_t v60 = v0[12];
    uint64_t v58 = v0[11];
    uint64_t v5 = swift_slowAlloc();
    double v59 = (void *)swift_slowAlloc();
    uint64_t v65 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412802;
    uint64_t v6 = sub_1005163F0();
    v0[8] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *double v59 = v6;
    *(_WORD *)(v5 + 12) = 2050;
    v0[9] = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 22) = 2082;
    swift_bridgeObjectRetain();
    v0[10] = sub_1000143F4(v60, v4, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%@] Handling app delete request of %{public}llu for %{public}s", (uint8_t *)v5, 0x20u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
    v7(v63, v62);
  }
  else
  {
    uint64_t v8 = v0[19];
    uint64_t v9 = v1[14];
    uint64_t v10 = v1[15];
    swift_bridgeObjectRelease_n();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v7(v8, v9);
  }
  v1[20] = v7;
  uint64_t v11 = v1[11];
  id v12 = objc_allocWithZone((Class)LSApplicationRecord);
  v1[2] = 0;
  id v13 = [v12 initWithStoreItemIdentifier:v11 error:v64];
  v1[21] = v13;
  uint64_t v14 = (void *)v1[2];
  if (v13)
  {
    id v15 = v13;
    id v16 = v14;
    id v17 = [v15 iTunesMetadata];
    id v18 = [v17 distributorInfo];

    id v19 = [v18 distributorID];
    if (v19)
    {
      uint64_t v21 = v1[12];
      uint64_t v20 = v1[13];
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v24 = v23;

      if (v22 == v21 && v24 == v20)
      {
        swift_bridgeObjectRelease();
LABEL_11:
        id v27 = objc_msgSend(v15, "bundleIdentifier", v58);
        if (v27)
        {
          unint64_t v28 = v27;
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          id v29 = objc_allocWithZone((Class)IXApplicationIdentity);
          NSString v30 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v31 = [v29 initWithBundleIdentifier:v30];
          v1[22] = v31;

          if (v31)
          {
            id v32 = [objc_allocWithZone((Class)IXUninstallOptions) init];
            v1[23] = v32;
            if (v32)
            {
              id v33 = v32;
              [v32 setRequestUserConfirmation:0];
              uint64_t v34 = sub_10018B1DC(0, &qword_10065C700);
              uint64_t v35 = (void *)swift_task_alloc();
              v1[24] = v35;
              v35[2] = v34;
              v35[3] = v31;
              v35[4] = v33;
              uint64_t v36 = (void *)swift_task_alloc();
              v1[25] = v36;
              type metadata accessor for IXUninstallDisposition(0);
              void *v36 = v1;
              v36[1] = sub_1002A0BEC;
              return withCheckedThrowingContinuation<A>(isolation:function:_:)(v1 + 6, 0, 0, 0xD00000000000001BLL, 0x80000001005B9270, sub_1001C5DC8, v35, v37);
            }
            sub_1002A0194();
            swift_allocError();
            *uint64_t v56 = 2;
            swift_willThrow();

            goto LABEL_21;
          }
        }
LABEL_20:
        sub_1002A0194();
        swift_allocError();
        *int v45 = 0;
        swift_willThrow();
LABEL_21:

        goto LABEL_22;
      }
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v26) {
        goto LABEL_11;
      }
    }
    static Logger.appActions.getter();
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      double v40 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v41 = (void *)swift_slowAlloc();
      *(_DWORD *)double v40 = 138412290;
      uint64_t v42 = sub_1005163F0();
      v1[5] = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v41 = v42;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "[%@] Can't delete app not installed by the requesting distributor", v40, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    uint64_t v43 = v1[17];
    uint64_t v44 = v1[14];

    v7(v43, v44);
    goto LABEL_20;
  }
  id v25 = v14;
  _convertNSErrorToError(_:)();

  swift_willThrow();
LABEL_22:
  static Logger.appActions.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v46, v47))
  {
    uint64_t v48 = swift_slowAlloc();
    unint64_t v49 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v48 = 138412546;
    uint64_t v50 = sub_1005163F0();
    v1[3] = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v49 = v50;
    *(_WORD *)(v48 + 12) = 2114;
    swift_errorRetain();
    uint64_t v51 = _swift_stdlib_bridgeErrorToNSError();
    v1[4] = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v49[1] = v51;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "[%@] Error deleting app app: %{public}@", (uint8_t *)v48, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  unint64_t v52 = (void (*)(uint64_t, uint64_t))v1[20];
  uint64_t v53 = v1[16];
  uint64_t v54 = v1[14];

  v52(v53, v54);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v55 = (uint64_t (*)(void))v1[1];
  return v55();
}

uint64_t sub_1002A0BEC()
{
  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v2 = sub_1002A0D3C;
  }
  else
  {
    swift_task_dealloc();
    os_log_type_t v2 = sub_1002A0FA8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002A0D3C()
{
  uint64_t v1 = (void *)v0[23];
  os_log_type_t v3 = (void *)v0[21];
  os_log_type_t v2 = (void *)v0[22];
  swift_task_dealloc();

  static Logger.appActions.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412546;
    uint64_t v8 = sub_1005163F0();
    v0[3] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v8;
    *(_WORD *)(v6 + 12) = 2114;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v7[1] = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%@] Error deleting app app: %{public}@", (uint8_t *)v6, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v10 = (void (*)(uint64_t, uint64_t))v0[20];
  uint64_t v11 = v0[16];
  uint64_t v12 = v0[14];

  v10(v11, v12);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_1002A0FA8()
{
  uint64_t v1 = *(void **)(v0 + 176);
  os_log_type_t v2 = *(void **)(v0 + 168);

  static Logger.appActions.getter();
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v5 = 138412290;
    uint64_t v7 = sub_1005163F0();
    *(void *)(v0 + 56) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%@] Successfully deleted", v5, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0 + 160);
  uint64_t v9 = *(void *)(v0 + 144);
  uint64_t v10 = *(void *)(v0 + 112);

  v8(v9, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_1002A1198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[10] = a2;
  v3[11] = a3;
  v3[9] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[12] = v4;
  v3[13] = *(void *)(v4 - 8);
  v3[14] = swift_task_alloc();
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  return _swift_task_switch(sub_1002A12A4, 0, 0);
}

uint64_t sub_1002A12A4()
{
  double v40 = v0;
  uint64_t v1 = v0;
  os_log_type_t v2 = v0 + 2;
  static Logger.appActions.getter();
  swift_bridgeObjectRetain_n();
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v36 = v0[13];
    unint64_t v5 = v0[11];
    uint64_t v37 = v0[12];
    uint64_t v38 = v0[16];
    uint64_t v35 = v0[10];
    uint64_t v33 = v0[9];
    uint64_t v6 = swift_slowAlloc();
    uint64_t v34 = (void *)swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412802;
    uint64_t v7 = sub_1005163F0();
    v0[6] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v34 = v7;
    *(_WORD *)(v6 + 12) = 2050;
    v0[7] = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 22) = 2082;
    swift_bridgeObjectRetain();
    v0[8] = sub_1000143F4(v35, v5, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%@] Handling app launch request of %{public}llu for %{public}s", (uint8_t *)v6, 0x20u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    os_log_type_t v2 = v0 + 2;
    swift_slowDealloc();

    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v8(v38, v37);
  }
  else
  {
    uint64_t v9 = v0[16];
    uint64_t v10 = v1[12];
    uint64_t v11 = v1[13];
    swift_bridgeObjectRelease_n();

    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v8(v9, v10);
  }
  v1[17] = v8;
  uint64_t v12 = v1[9];
  id v13 = objc_allocWithZone((Class)LSApplicationRecord);
  v1[2] = 0;
  id v14 = [v13 initWithStoreItemIdentifier:v12 error:v2];
  v1[18] = v14;
  uint64_t v15 = (void *)v1[2];
  if (v14)
  {
    uint64_t v16 = (uint64_t)v14;
    uint64_t v17 = v1[11];
    id v18 = v15;
    id v19 = (void *)swift_task_alloc();
    v1[19] = v19;
    *id v19 = v1;
    v19[1] = sub_1002A182C;
    uint64_t v20 = v1[10];
    return sub_10029EA74(v16, v20, v17);
  }
  else
  {
    id v22 = v15;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    static Logger.appActions.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      char v26 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 138412546;
      uint64_t v27 = sub_1005163F0();
      v1[3] = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v26 = v27;
      *(_WORD *)(v25 + 12) = 2114;
      swift_errorRetain();
      uint64_t v28 = _swift_stdlib_bridgeErrorToNSError();
      v1[4] = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v26[1] = v28;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "[%@] Error launching app: %{public}@", (uint8_t *)v25, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    id v29 = (void (*)(uint64_t, uint64_t))v1[17];
    uint64_t v30 = v1[14];
    uint64_t v31 = v1[12];

    v29(v30, v31);
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v32 = (uint64_t (*)(void))v1[1];
    return v32();
  }
}

uint64_t sub_1002A182C()
{
  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_1002A1B3C;
  }
  else {
    os_log_type_t v2 = sub_1002A196C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002A196C()
{
  static Logger.appActions.getter();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v3 = 138412290;
    uint64_t v5 = sub_1005163F0();
    *(void *)(v0 + 40) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%@] Successfully launched", v3, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v0 + 136);
  uint64_t v7 = *(void *)(v0 + 120);
  uint64_t v8 = *(void *)(v0 + 96);

  v6(v7, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_1002A1B3C()
{
  static Logger.appActions.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412546;
    uint64_t v5 = sub_1005163F0();
    *(void *)(v0 + 24) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v4[1] = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%@] Error launching app: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 136);
  uint64_t v8 = *(void *)(v0 + 112);
  uint64_t v9 = *(void *)(v0 + 96);

  v7(v8, v9);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t getEnumTagSinglePayload for ValidatedAppActions.Error(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ValidatedAppActions.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002A1EE8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ValidatedAppActions.Error()
{
  return &type metadata for ValidatedAppActions.Error;
}

unint64_t sub_1002A1F24()
{
  unint64_t result = qword_10065E9D8;
  if (!qword_10065E9D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065E9D8);
  }
  return result;
}

void *sub_1002A1F78(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_100455C1C(0, v2, 0);
    unsigned int v4 = (unsigned __int8 *)(a1 + 32);
    unint64_t result = _swiftEmptyArrayStorage;
    unint64_t v5 = (unint64_t)"platformAttributes";
    unint64_t v6 = (unint64_t)"";
    unint64_t v7 = (unint64_t)"requirementsByDeviceFamily";
    unint64_t v8 = (unint64_t)"System";
    do
    {
      int v9 = *v4++;
      unint64_t v10 = 0xD000000000000012;
      unint64_t v11 = 0x80000001005B7A30;
      switch(v9)
      {
        case 1:
          unint64_t v11 = v5 | 0x8000000000000000;
          goto LABEL_13;
        case 2:
          unint64_t v11 = 0xE400000000000000;
          unint64_t v10 = 1701667182;
          break;
        case 3:
          unint64_t v11 = 0xE800000000000000;
          unint64_t v10 = 0x656C746974627573;
          break;
        case 4:
          unint64_t v10 = 0x614E747369747261;
          unint64_t v11 = 0xEA0000000000656DLL;
          break;
        case 5:
          unint64_t v10 = 0xD00000000000001ALL;
          unint64_t v11 = v6 | 0x8000000000000000;
          break;
        case 6:
          unint64_t v10 = 0xD000000000000016;
          unint64_t v11 = v7 | 0x8000000000000000;
          break;
        case 7:
          unint64_t v11 = 0xE900000000000074;
          unint64_t v10 = 0x6867697279706F63;
          break;
        case 8:
          unint64_t v11 = 0xE700000000000000;
          unint64_t v10 = 0x616C7545736168;
          break;
        case 9:
          unint64_t v11 = v8 | 0x8000000000000000;
LABEL_13:
          unint64_t v10 = 0xD000000000000010;
          break;
        case 10:
          unint64_t v11 = 0xEA00000000006C72;
          unint64_t v10 = 0x5565746973626577;
          break;
        default:
          break;
      }
      id v19 = result;
      unint64_t v13 = result[2];
      unint64_t v12 = result[3];
      if (v13 >= v12 >> 1)
      {
        uint64_t v17 = (char *)v6;
        id v18 = (const char *)v5;
        uint64_t v15 = (char *)v8;
        uint64_t v16 = (const char *)v7;
        sub_100455C1C(v12 > 1, v13 + 1, 1);
        unint64_t v8 = (unint64_t)v15;
        unint64_t v7 = (unint64_t)v16;
        unint64_t v6 = (unint64_t)v17;
        unint64_t v5 = (unint64_t)v18;
        unint64_t result = v19;
      }
      result[2] = v13 + 1;
      id v14 = &result[2 * v13];
      void v14[4] = v10;
      v14[5] = v11;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *sub_1002A21BC(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_100455C1C(0, v2, 0);
    unint64_t result = _swiftEmptyArrayStorage;
    unsigned int v4 = (unsigned __int8 *)(a1 + 32);
    unint64_t v5 = (unint64_t)"1";
    unint64_t v6 = (unint64_t)"externalVersionId";
    unint64_t v7 = 0xD000000000000010;
    do
    {
      int v8 = *v4++;
      unint64_t v9 = 0xE800000000000000;
      unint64_t v10 = 0x6449656C646E7562;
      switch(v8)
      {
        case 1:
          unint64_t v9 = v5 | 0x8000000000000000;
          goto LABEL_11;
        case 2:
          unint64_t v9 = v6 | 0x8000000000000000;
          goto LABEL_11;
        case 3:
          unint64_t v9 = 0x80000001005B79E0;
          unint64_t v10 = v7;
          break;
        case 4:
          unint64_t v9 = 0xEB000000006E6F69;
          unint64_t v10 = 0x7470697263736564;
          break;
        case 5:
          unint64_t v9 = 0xE600000000000000;
          unint64_t v10 = 0x73726566666FLL;
          break;
        case 6:
          unint64_t v9 = 0xE700000000000000;
          unint64_t v10 = 0x6B726F77747261;
          break;
        case 7:
          unint64_t v9 = 0x80000001005B7A10;
LABEL_11:
          unint64_t v10 = 0xD000000000000011;
          break;
        default:
          break;
      }
      uint64_t v17 = result;
      unint64_t v12 = result[2];
      unint64_t v11 = result[3];
      if (v12 >= v11 >> 1)
      {
        uint64_t v15 = (const char *)v6;
        uint64_t v16 = (char *)v5;
        unint64_t v14 = v7;
        sub_100455C1C(v11 > 1, v12 + 1, 1);
        unint64_t v7 = v14;
        unint64_t v6 = (unint64_t)v15;
        unint64_t v5 = (unint64_t)v16;
        unint64_t result = v17;
      }
      result[2] = v12 + 1;
      unint64_t v13 = &result[2 * v12];
      v13[4] = v10;
      v13[5] = v9;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1002A23A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = v3;
  uint64_t v7 = sub_1000172F8(&qword_10065B220);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100017238(a1, (uint64_t)v9, &qword_10065B220);
  uint64_t v10 = type metadata accessor for TaskPriority();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_10001729C((uint64_t)v9, &qword_10065B220);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v12 = 0;
  uint64_t v14 = 0;
LABEL_6:
  uint64_t v15 = *v4;
  sub_1000172F8(&qword_10065E008);
  uint64_t v16 = (void *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    uint64_t v16 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  v18[1] = 1;
  v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t sub_1002A2584(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 320) = a7;
  *(void *)(v8 + 328) = a8;
  *(unsigned char *)(v8 + 504) = a4;
  *(void *)(v8 + 304) = a3;
  *(void *)(v8 + 312) = a6;
  *(void *)(v8 + 288) = a1;
  *(void *)(v8 + 296) = a2;
  *(void *)(v8 + 336) = *(void *)a5;
  *(_OWORD *)(v8 + 344) = *(_OWORD *)(a5 + 8);
  *(void *)(v8 + 360) = *(void *)(a5 + 24);
  *(_OWORD *)(v8 + 368) = *(_OWORD *)(a5 + 32);
  *(void *)(v8 + 384) = *(void *)(a5 + 48);
  long long v9 = *(_OWORD *)(a5 + 72);
  *(_OWORD *)(v8 + 392) = *(_OWORD *)(a5 + 56);
  *(_OWORD *)(v8 + 408) = v9;
  *(void *)(v8 + 424) = *(void *)(a5 + 88);
  *(void *)(v8 + 488) = *(void *)(a5 + 96);
  *(_DWORD *)(v8 + 496) = *(_DWORD *)(a5 + 104);
  *(unsigned char *)(v8 + 505) = *(unsigned char *)(a5 + 108);
  *(_WORD *)(v8 + 506) = *(_WORD *)(a5 + 109);
  sub_1000172F8(&qword_10065BCC0);
  *(void *)(v8 + 432) = swift_task_alloc();
  sub_1000172F8(&qword_10065EA58);
  *(void *)(v8 + 440) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for MediaAPIApp(0);
  *(void *)(v8 + 448) = v10;
  *(void *)(v8 + 456) = *(void *)(v10 - 8);
  *(void *)(v8 + 464) = swift_task_alloc();
  return _swift_task_switch(sub_1002A2710, 0, 0);
}

uint64_t sub_1002A2710()
{
  int v1 = *(_DWORD *)(v0 + 496);
  uint64_t v2 = *(void *)(v0 + 424);
  uint64_t v3 = *(void *)(v0 + 432);
  uint64_t v4 = *(void *)(v0 + 384);
  long long v5 = *(_OWORD *)(v0 + 368);
  uint64_t v6 = *(void *)(v0 + 360);
  uint64_t v7 = *(void *)(v0 + 336);
  char v8 = *(unsigned char *)(v0 + 504);
  uint64_t v9 = *(void *)(v0 + 288);
  char v10 = *(unsigned char *)(v0 + 507) & 1;
  char v11 = *(unsigned char *)(v0 + 506) & 1;
  char v12 = *(unsigned char *)(v0 + 505) & 1;
  uint64_t v13 = *(int *)(*(void *)(v0 + 448) + 28);
  *(_DWORD *)(v0 + 500) = v13;
  uint64_t v14 = *(void *)(v0 + 488);
  long long v15 = *(_OWORD *)(v0 + 392);
  long long v16 = *(_OWORD *)(v0 + 408);
  long long v17 = *(_OWORD *)(v0 + 320);
  long long v18 = *(_OWORD *)(v0 + 344);
  *(void *)(v9 + v13) = 1;
  *(_OWORD *)(v0 + 16) = v17;
  *(void *)(v0 + 32) = v7;
  *(_OWORD *)(v0 + 40) = v18;
  *(void *)(v0 + 56) = v6;
  *(_OWORD *)(v0 + 64) = v5;
  *(void *)(v0 + 80) = v4;
  *(_OWORD *)(v0 + 88) = v15;
  *(_OWORD *)(v0 + 104) = v16;
  *(void *)(v0 + 120) = v2;
  *(void *)(v0 + 128) = v14;
  *(_DWORD *)(v0 + 136) = v1;
  *(unsigned char *)(v0 + 140) = v12;
  *(unsigned char *)(v0 + 141) = v11;
  *(unsigned char *)(v0 + 142) = v10;
  *(void *)(v0 + 144) = 0;
  long long v19 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 152) = *(_OWORD *)(v0 + 16);
  long long v20 = *(_OWORD *)(v0 + 48);
  long long v21 = *(_OWORD *)(v0 + 64);
  long long v22 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 216) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 200) = v21;
  *(_OWORD *)(v0 + 184) = v20;
  *(_OWORD *)(v0 + 168) = v19;
  long long v23 = *(_OWORD *)(v0 + 112);
  long long v24 = *(_OWORD *)(v0 + 128);
  *(void *)(v0 + 280) = 0;
  *(_OWORD *)(v0 + 264) = v24;
  *(_OWORD *)(v0 + 248) = v23;
  *(_OWORD *)(v0 + 232) = v22;
  uint64_t v25 = type metadata accessor for Locale.Language();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v3, 1, 1, v25);
  swift_unknownObjectRetain();
  char v26 = (void *)swift_task_alloc();
  *(void *)(v0 + 472) = v26;
  *char v26 = v0;
  v26[1] = sub_1002A28E0;
  uint64_t v28 = *(void *)(v0 + 432);
  uint64_t v27 = *(void *)(v0 + 440);
  uint64_t v29 = *(void *)(v0 + 304);
  uint64_t v30 = *(void *)(v0 + 312);
  uint64_t v31 = *(void *)(v0 + 296);
  return sub_1002A5400(v27, v31, v29, v8 & 1, v30, v28);
}

uint64_t sub_1002A28E0()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 480) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 432);
  if (v0)
  {
    uint64_t v5 = *(void *)(v2 + 296);
    uint64_t v4 = *(void *)(v2 + 304);
    char v6 = *(unsigned char *)(v2 + 504) & 1;
    sub_10001729C(v3, &qword_10065BCC0);
    sub_1001C3EC0(v5, v4, v6);
    uint64_t v7 = sub_1002A2CF4;
  }
  else
  {
    sub_10001729C(v3, &qword_10065BCC0);
    uint64_t v7 = sub_1002A2A44;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1002A2A44()
{
  uint64_t v1 = *(void *)(v0 + 440);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 456) + 48))(v1, 1, *(void *)(v0 + 448)) == 1)
  {
    char v2 = *(unsigned char *)(v0 + 504);
    uint64_t v4 = *(void *)(v0 + 296);
    uint64_t v3 = *(void *)(v0 + 304);
    sub_10001729C(v1, &qword_10065EA58);
    type metadata accessor for InternalError();
    sub_100013B4C((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    char v6 = v5;
    uint64_t v7 = StoreAppIdentifier.description.getter();
    uint64_t v9 = v8;
    sub_1001C3EC0(v4, v3, v2 & 1);
    *char v6 = v7;
    v6[1] = v9;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    uint64_t v10 = *(int *)(v0 + 500);
    uint64_t v11 = *(void *)(v0 + 312);
    uint64_t v12 = *(void *)(v0 + 288);
    sub_10027A024(v0 + 16);
    swift_unknownObjectRelease();
    uint64_t v13 = type metadata accessor for Platform();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v11, v13);
    sub_1002AD7D4(*(void *)(v12 + v10));
  }
  else
  {
    uint64_t v15 = *(int *)(v0 + 500);
    uint64_t v16 = *(void *)(v0 + 464);
    uint64_t v17 = *(void *)(v0 + 312);
    uint64_t v18 = *(void *)(v0 + 288);
    sub_1001C3EC0(*(void *)(v0 + 296), *(void *)(v0 + 304), *(unsigned char *)(v0 + 504) & 1);
    sub_10027A024(v0 + 16);
    swift_unknownObjectRelease();
    uint64_t v19 = type metadata accessor for Platform();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v17, v19);
    sub_1002B2FD4(v1, v16, type metadata accessor for MediaAPIApp);
    sub_1002AD7D4(*(void *)(v18 + v15));
    sub_1002B2FD4(v16, v18, type metadata accessor for MediaAPIApp);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_1002A2CF4()
{
  uint64_t v1 = *(int *)(v0 + 500);
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v3 = *(void *)(v0 + 288);
  sub_10027A024(v0 + 16);
  swift_unknownObjectRelease();
  uint64_t v4 = type metadata accessor for Platform();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v2, v4);
  sub_1002AD7D4(*(void *)(v3 + v1));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1002A2DE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v73 = a3;
  uint64_t v71 = a6;
  uint64_t v72 = a2;
  uint64_t v9 = sub_1000172F8(&qword_10065C3C0);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  unint64_t v70 = (char *)v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  double v69 = (char *)v59 - v13;
  __chkstk_darwin(v12);
  unint64_t v68 = (char *)v59 - v14;
  uint64_t v15 = sub_1000172F8(&qword_10065BCB8);
  __chkstk_darwin(v15 - 8);
  uint64_t v76 = (char *)v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_1000172F8(&qword_10065B8F0);
  __chkstk_darwin(v17 - 8);
  uint64_t v74 = (char *)v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_1000172F8(&qword_10065BCC0);
  __chkstk_darwin(v19 - 8);
  uint64_t v75 = (char *)v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_1000172F8(&qword_10065BCC8);
  __chkstk_darwin(v21 - 8);
  long long v23 = (char *)v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for Platform();
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)v59 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AB94(a5);
  uint64_t v28 = type metadata accessor for AppStoreItem(0);
  uint64_t v29 = (void *)(a1 + *(int *)(v28 + 24));
  uint64_t v30 = v29[2];
  uint64_t v31 = v29[3];
  uint64_t v62 = v29[26];
  uint64_t v63 = v30;
  uint64_t v64 = v29[12];
  uint64_t v65 = v27;
  uint64_t v66 = v25;
  uint64_t v67 = v24;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 16))(v27, a4, v24);
  uint64_t v33 = v28;
  uint64_t v34 = *(int *)(v28 + 28);
  uint64_t v61 = a1;
  if (*(void *)(*(void *)(a1 + v34) + 16))
  {
    uint64_t v60 = a4;
    type metadata accessor for AppStorePackage(0);
    uint64_t v35 = self;
    uint64_t v36 = v31;
    swift_bridgeObjectRetain();
    id v37 = [v35 bytes];
    sub_10018B1DC(0, (unint64_t *)&qword_10065B540);
    Measurement.init(value:unit:)();
    uint64_t v38 = sub_1000172F8(&qword_10065BCE8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v23, 0, 1, v38);
    uint64_t v39 = type metadata accessor for Locale.Language();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v75, 1, 1, v39);
    uint64_t v40 = v29[28];
    v59[8] = v29[27];
    uint64_t v41 = v29[1];
    v59[6] = *v29;
    sub_1000172F8(&qword_10065D360);
    uint64_t v42 = swift_allocObject();
    *(_OWORD *)(v42 + 16) = xmmword_1005A3EC0;
    uint64_t v43 = v29[15];
    *(void *)(v42 + 32) = v29[14];
    *(void *)(v42 + 40) = v43;
    v59[4] = v42;
    uint64_t v44 = v29[7];
    v59[3] = v29[6];
    id v45 = objc_allocWithZone((Class)NSISO8601DateFormatter);
    v59[7] = v40;
    swift_bridgeObjectRetain();
    v59[5] = v41;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v59[2] = v44;
    swift_bridgeObjectRetain();
    id v46 = [v45 init];
    NSString v47 = String._bridgeToObjectiveC()();
    id v48 = [v46 dateFromString:v47];

    v59[9] = v36;
    v59[10] = v23;
    if (v48)
    {
      unint64_t v49 = v74;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v50 = type metadata accessor for Date();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v49, 0, 1, v50);
    }
    else
    {
      uint64_t v51 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v74, 1, 1, v51);
    }
    uint64_t v52 = type metadata accessor for ManagedApp.Artwork();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v76, 1, 1, v52);
    uint64_t v53 = v61;
    uint64_t v54 = v61 + *(int *)(v33 + 20);
    uint64_t v55 = type metadata accessor for URL();
    uint64_t v56 = *(void *)(v55 - 8);
    uint64_t v57 = v68;
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v68, v54, v55);
    uint64_t v58 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v56 + 56);
    v58(v57, 0, 1, v55);
    v59[1] = v29[35];
    v58(v69, 1, 1, v55);
    v58(v70, 1, 1, v55);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    ManagedApp.init(declarationIdentifier:bundleID:itemID:externalVersionID:platform:fileSize:metadataLanguage:name:subtitle:seller:genres:description:languages:requirements:version:releaseDate:releaseNotes:icon:iconURL:screenshots:contentRating:developerWebsite:privacyPolicy:hasLicenseAgreement:copyright:buyParams:)();
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v60, v67);
    return sub_1002AD9C8(v53, type metadata accessor for AppStoreItem);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002A35F4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v168 = a2;
  uint64_t v167 = a6;
  uint64_t v180 = type metadata accessor for ManagedApp.Artwork();
  uint64_t v181 = *(void *)(v180 - 8);
  __chkstk_darwin(v180);
  uint64_t v163 = (char *)&v145 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000172F8(&qword_10065C3C0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v166 = (uint64_t)&v145 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v165 = (uint64_t)&v145 - v15;
  __chkstk_darwin(v14);
  uint64_t v177 = (char *)&v145 - v16;
  uint64_t v17 = sub_1000172F8(&qword_10065BCB8);
  __chkstk_darwin(v17 - 8);
  uint64_t v176 = (char *)&v145 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v184 = type metadata accessor for Locale.Language();
  uint64_t v196 = *(void *)(v184 - 8);
  __chkstk_darwin(v184);
  uint64_t v170 = (char *)&v145 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_1000172F8(&qword_10065B8F0);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v169 = (char *)&v145 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v175 = (uint64_t)&v145 - v23;
  uint64_t v24 = sub_1000172F8(&qword_10065BCC0);
  __chkstk_darwin(v24 - 8);
  uint64_t v174 = (char *)&v145 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_1000172F8(&qword_10065BCC8);
  __chkstk_darwin(v26 - 8);
  uint64_t v173 = (uint64_t)&v145 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v179 = type metadata accessor for Platform();
  uint64_t v183 = *(void *)(v179 - 8);
  uint64_t v28 = __chkstk_darwin(v179);
  id v172 = (char *)&v145 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v178 = (uint64_t *)((char *)&v145 - v31);
  __chkstk_darwin(v30);
  id v182 = (char *)&v145 - v32;
  uint64_t v33 = type metadata accessor for URLQueryItem();
  uint64_t v164 = *(void *)(v33 - 8);
  uint64_t v34 = __chkstk_darwin(v33);
  uint64_t v36 = (char *)&v145 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  uint64_t v38 = (char *)&v145 - v37;
  uint64_t v39 = sub_1000172F8(&qword_10065B650);
  __chkstk_darwin(v39 - 8);
  uint64_t v41 = (char *)&v145 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = *a1;
  uint64_t v42 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t v44 = sub_1004BD574(v43, v42);
  if (v45)
  {
    swift_bridgeObjectRelease();
    sub_10018AB94(a5);
    type metadata accessor for InternalError();
    sub_100013B4C((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    *uint64_t v63 = xmmword_1005A6FA0;
LABEL_8:
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return sub_1002AD9C8((uint64_t)a1, type metadata accessor for MediaAPIApp);
  }
  LODWORD(v162) = a4;
  uint64_t v46 = a3;
  id v171 = (int32x2_t *)a5;
  uint64_t v160 = v44;
  uint64_t v47 = type metadata accessor for MediaAPIApp(0);
  uint64_t v161 = (void *)((char *)a1 + *(int *)(v47 + 24));
  uint64_t v48 = *v161;
  if (!*(void *)(*v161 + 16) || (uint64_t v49 = v47, v50 = sub_1004524C0(v162), (v51 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    sub_10018AB94((uint64_t)v171);
    type metadata accessor for InternalError();
    sub_100013B4C((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    *uint64_t v64 = 0xD000000000000012;
    v64[1] = 0x80000001005B7A30;
    goto LABEL_8;
  }
  uint64_t v156 = v49;
  uint64_t v52 = (long long *)(*(void *)(v48 + 56) + 160 * v50);
  long long v53 = v52[1];
  long long v186 = *v52;
  long long v187 = v53;
  long long v54 = v52[5];
  long long v56 = v52[2];
  long long v55 = v52[3];
  long long v190 = v52[4];
  long long v191 = v54;
  long long v188 = v56;
  long long v189 = v55;
  long long v57 = v52[6];
  long long v58 = v52[7];
  long long v59 = v52[9];
  long long v194 = v52[8];
  long long v195 = v59;
  long long v192 = v57;
  long long v193 = v58;
  sub_10027CC24(&v186);
  URLComponents.init(string:)();
  uint64_t v60 = type metadata accessor for URLComponents();
  uint64_t v61 = *(void *)(v60 - 8);
  int v62 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v61 + 48))(v41, 1, v60);
  uint64_t v157 = v46;
  if (v62 == 1)
  {
    sub_10001729C((uint64_t)v41, &qword_10065B650);
    goto LABEL_19;
  }
  uint64_t v66 = URLComponents.queryItems.getter();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v41, v60);
  if (!v66)
  {
LABEL_19:
    uint64_t v159 = 0;
    uint64_t v164 = 0;
LABEL_20:
    uint64_t v72 = v179;
    uint64_t v73 = v171;
    goto LABEL_21;
  }
  uint64_t v67 = *(void *)(v66 + 16);
  if (!v67)
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  id v155 = a1;
  uint64_t v159 = *(void (**)(char *, unint64_t, uint64_t))(v164 + 16);
  unint64_t v68 = v66 + ((*(unsigned __int8 *)(v164 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v164 + 80));
  double v69 = (void (**)(char *, uint64_t))(v164 + 8);
  uint64_t v158 = *(void *)(v164 + 72);
  uint64_t v154 = v66;
  swift_bridgeObjectRetain();
  while (1)
  {
    v159(v36, v68, v33);
    if (URLQueryItem.name.getter() == 108 && v70 == 0xE100000000000000) {
      break;
    }
    char v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v71) {
      goto LABEL_79;
    }
    (*v69)(v36, v33);
    v68 += v158;
    if (!--v67)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v159 = 0;
      uint64_t v164 = 0;
      a1 = v155;
      goto LABEL_20;
    }
  }
  swift_bridgeObjectRelease();
LABEL_79:
  uint64_t v72 = v179;
  uint64_t v73 = v171;
  swift_bridgeObjectRelease();
  uint64_t v135 = v164 + 32;
  (*(void (**)(char *, char *, uint64_t))(v164 + 32))(v38, v36, v33);
  uint64_t v159 = (void (*)(char *, unint64_t, uint64_t))URLQueryItem.value.getter();
  uint64_t v164 = v136;
  (*(void (**)(char *, uint64_t))(v135 - 24))(v38, v33);
  swift_bridgeObjectRelease();
  a1 = v155;
LABEL_21:
  uint64_t v74 = v161[8];
  if (v74)
  {
    Swift::String v75 = String.lowercased()();
    if (*(void *)(v74 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v76 = sub_100016D20(v75._countAndFlagsBits, (uint64_t)v75._object);
      if (v77)
      {
        uint64_t v78 = *(void *)(v74 + 56) + 32 * v76;
        uint64_t v79 = *(void *)(v78 + 16);
        uint64_t v80 = *(void *)(v78 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_29;
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v79 = 0;
  uint64_t v80 = 0;
LABEL_29:
  id v81 = v178;
  if ((_BYTE)v162)
  {
    if (v162 == 1) {
      static Platform.iOS.getter();
    }
    else {
      static Platform.tvOS.getter();
    }
  }
  else
  {
    static Platform.macOS.getter();
  }
  uint64_t v82 = (uint64_t)v182;
  (*(void (**)(char *, void *, uint64_t))(v183 + 32))(v182, v81, v72);
  uint64_t v178 = sub_1002ACDF0(v82, v73);
  uint64_t v83 = v193;
  uint64_t v84 = *(void *)(v193 + 16);
  if (!v84)
  {
    swift_bridgeObjectRelease();
LABEL_41:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10027CD2C(&v186);
    sub_10018AB94((uint64_t)v73);
    type metadata accessor for InternalError();
    sub_100013B4C((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    *uint64_t v88 = xmmword_1005A6FB0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v183 + 8))(v182, v72);
    return sub_1002AD9C8((uint64_t)a1, type metadata accessor for MediaAPIApp);
  }
  uint64_t v158 = v79;
  uint64_t v162 = v80;
  swift_bridgeObjectRetain();
  uint64_t v85 = (unsigned char *)(v83 + 48);
  while (1)
  {
    uint64_t v86 = *((void *)v85 - 2);
    if ((*v85 & 1) == 0) {
      break;
    }
    char v87 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v87) {
      goto LABEL_43;
    }
    v85 += 24;
    swift_bridgeObjectRelease();
    if (!--v84)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v73 = v171;
      goto LABEL_41;
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_43:
  swift_bridgeObjectRelease();
  uint64_t v89 = *((void *)&v186 + 1);
  uint64_t v154 = v186;
  (*(void (**)(char *, char *, uint64_t))(v183 + 16))(v172, v182, v72);
  uint64_t v153 = v89;
  swift_bridgeObjectRetain();
  uint64_t v90 = (uint64_t)v171;
  sub_1002A8E9C((uint64_t)v171, v173);
  sub_10018AB94(v90);
  uint64_t v91 = v170;
  if (v164)
  {
    swift_bridgeObjectRetain();
    uint64_t v92 = v174;
    Locale.Language.init(identifier:)();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v196 + 56))(v92, 0, 1, v184);
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v196 + 56))(v174, 1, 1, v184);
  }
  uint64_t v93 = v161[2];
  uint64_t v94 = (void (*)(char *, unint64_t, uint64_t))v161[3];
  uint64_t v96 = v161[4];
  uint64_t v95 = v161[5];
  uint64_t v97 = v161[6];
  uint64_t v98 = v161[7];
  unint64_t v99 = *(void *)((char *)a1 + *(int *)(v156 + 28));
  id v171 = (int32x2_t *)v86;
  uint64_t v159 = v94;
  uint64_t v156 = v98;
  id v155 = a1;
  uint64_t v164 = v93;
  uint64_t v152 = v96;
  uint64_t v151 = v95;
  uint64_t v150 = v97;
  if (v99 >= 2 && (int64_t v100 = *(void *)(v99 + 16)) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1002AD7C4(v99);
    uint64_t v185 = _swiftEmptyArrayStorage;
    sub_100455C1C(0, v100, 0);
    uint64_t v101 = v185;
    unint64_t v149 = v99;
    char v102 = (uint64_t *)(v99 + 40);
    os_log_type_t v103 = v178;
    do
    {
      uint64_t v104 = *(v102 - 1);
      uint64_t v105 = *v102;
      uint64_t v185 = v101;
      unint64_t v107 = v101[2];
      unint64_t v106 = v101[3];
      swift_bridgeObjectRetain();
      if (v107 >= v106 >> 1)
      {
        sub_100455C1C(v106 > 1, v107 + 1, 1);
        uint64_t v101 = v185;
      }
      v102 += 2;
      v101[2] = v107 + 1;
      unint64_t v108 = &v101[2 * v107];
      v108[4] = v104;
      v108[5] = v105;
      --v100;
    }
    while (v100);
    sub_1002AD7D4(v149);
    uint64_t v91 = v170;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v101 = _swiftEmptyArrayStorage;
    os_log_type_t v103 = v178;
  }
  unint64_t v149 = *((void *)&v192 + 1);
  if (*((void *)&v192 + 1))
  {
    uint64_t v148 = v192;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v148 = 0;
  }
  uint64_t v170 = (char *)v101;
  uint64_t v109 = *((void *)&v190 + 1);
  int64_t v110 = *(void *)(*((void *)&v190 + 1) + 16);
  if (v110)
  {
    uint64_t v185 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_100455DB4(0, v110, 0);
    id v111 = v185;
    uint64_t v147 = v109;
    uint64_t v112 = v109 + 40;
    do
    {
      swift_bridgeObjectRetain();
      Locale.Language.init(identifier:)();
      uint64_t v185 = v111;
      unint64_t v114 = v111[2];
      unint64_t v113 = v111[3];
      if (v114 >= v113 >> 1)
      {
        sub_100455DB4(v113 > 1, v114 + 1, 1);
        id v111 = v185;
      }
      v112 += 16;
      v111[2] = v114 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v196 + 32))((unint64_t)v111+ ((*(unsigned __int8 *)(v196 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v196 + 80))+ *(void *)(v196 + 72) * v114, v91, v184);
      --v110;
    }
    while (v110);
    swift_bridgeObjectRelease();
    os_log_type_t v103 = v178;
  }
  id v115 = (void *)v188;
  uint64_t v184 = *((void *)&v187 + 1);
  id v116 = (char *)v189;
  uint64_t v147 = *((void *)&v188 + 1);
  id v117 = objc_allocWithZone((Class)NSISO8601DateFormatter);
  uint64_t v178 = v115;
  swift_bridgeObjectRetain();
  id v118 = [v117 init];
  NSString v119 = String._bridgeToObjectiveC()();
  id v120 = [v118 dateFromString:v119];

  if (v120)
  {
    uint64_t v121 = (uint64_t)v169;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v122 = type metadata accessor for Date();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v122 - 8) + 56))(v121, 0, 1, v122);
  }
  else
  {
    uint64_t v123 = type metadata accessor for Date();
    uint64_t v121 = (uint64_t)v169;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v123 - 8) + 56))(v169, 1, 1, v123);
  }
  sub_10001733C(v121, v175, &qword_10065B8F0);
  uint64_t v169 = v116;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v124 = v176;
  ManagedApp.Artwork.init(urlTemplate:maxWidth:maxHeight:)();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v181 + 56))(v124, 0, 1, v180);
  uint64_t v125 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v125 - 8) + 56))(v177, 1, 1, v125);
  uint64_t v126 = sub_1002A912C(*((uint64_t *)&v195 + 1));
  unint64_t v127 = v103[2];
  if (!v127)
  {
    swift_bridgeObjectRelease();
    goto LABEL_74;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v128 = 0;
  while (1)
  {
    if (*(void *)(v126 + 16))
    {
      uint64_t v129 = *((unsigned __int8 *)v103 + v128 + 32);
      swift_bridgeObjectRetain();
      sub_10045264C(v129);
      char v131 = v130;
      uint64_t result = swift_bridgeObjectRelease();
      if (v131) {
        break;
      }
    }
    if (v127 == ++v128) {
      goto LABEL_72;
    }
  }
  if (v127 == v128)
  {
LABEL_72:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    goto LABEL_75;
  }
  if (v128 >= v127)
  {
    __break(1u);
    goto LABEL_91;
  }
  if (!*(void *)(v126 + 16))
  {
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  uint64_t result = sub_10045264C(*((unsigned __int8 *)v103 + v128 + 32));
  if ((v137 & 1) == 0)
  {
LABEL_92:
    __break(1u);
    return result;
  }
  uint64_t v138 = *(void *)(*(void *)(v126 + 56) + 8 * result);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  uint64_t v146 = v138;
  int64_t v139 = *(void *)(v138 + 16);
  if (v139)
  {
    uint64_t v185 = _swiftEmptyArrayStorage;
    sub_100455D78(0, v139, 0);
    id v140 = v185;
    uint64_t v196 = v181 + 32;
    uint64_t v141 = v146 + 56;
    id v142 = v163;
    do
    {
      swift_bridgeObjectRetain();
      ManagedApp.Artwork.init(urlTemplate:maxWidth:maxHeight:)();
      uint64_t v185 = v140;
      unint64_t v144 = v140[2];
      unint64_t v143 = v140[3];
      if (v144 >= v143 >> 1)
      {
        sub_100455D78(v143 > 1, v144 + 1, 1);
        id v140 = v185;
      }
      v141 += 32;
      v140[2] = v144 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v181 + 32))((unint64_t)v140+ ((*(unsigned __int8 *)(v181 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v181 + 80))+ *(void *)(v181 + 72) * v144, v142, v180);
      --v139;
    }
    while (v139);
  }
LABEL_74:
  swift_bridgeObjectRelease();
LABEL_75:
  long long v132 = v161;
  uint64_t v133 = v161[9];
  if (!v161[10]) {
    uint64_t v133 = 0;
  }
  uint64_t v196 = v133;
  uint64_t v180 = v187;
  uint64_t v134 = type metadata accessor for MediaAPIApp.Attributes(0);
  sub_100017238((uint64_t)v132 + *(int *)(v134 + 56), v165, &qword_10065C3C0);
  sub_100017238((uint64_t)v132 + *(int *)(v134 + 52), v166, &qword_10065C3C0);
  LODWORD(v181) = *((unsigned __int8 *)v132 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ManagedApp.init(declarationIdentifier:bundleID:itemID:externalVersionID:platform:fileSize:metadataLanguage:name:subtitle:seller:genres:description:languages:requirements:version:releaseDate:releaseNotes:icon:iconURL:screenshots:contentRating:developerWebsite:privacyPolicy:hasLicenseAgreement:copyright:buyParams:)();
  sub_10027CD2C(&v186);
  (*(void (**)(char *, uint64_t))(v183 + 8))(v182, v179);
  return sub_1002AD9C8((uint64_t)v155, type metadata accessor for MediaAPIApp);
}

unint64_t sub_1002A4C9C(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
    case 9:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 1701667182;
      break;
    case 3:
      unint64_t result = 0x656C746974627573;
      break;
    case 4:
      unint64_t result = 0x614E747369747261;
      break;
    case 5:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 6:
      unint64_t result = 0xD000000000000016;
      break;
    case 7:
      unint64_t result = 0x6867697279706F63;
      break;
    case 8:
      unint64_t result = 0x616C7545736168;
      break;
    case 10:
      unint64_t result = 0x5565746973626577;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1002A4DF8(void *a1)
{
  uint64_t v2 = (void *)a1[2];
  uint64_t v3 = v2[2];
  if (!v3) {
    return 0;
  }
  uint64_t v5 = *v1;
  uint64_t v6 = v1[1];
  BOOL v7 = v2[4] == *v1 && v2[5] == v6;
  if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
LABEL_7:
    sub_10001733C((uint64_t)(v1 + 2), (uint64_t)v18, &qword_10065B648);
    sub_10001733C((uint64_t)v18, (uint64_t)&v19, &qword_10065B648);
    if (!v22) {
      return 1;
    }
    uint64_t v8 = a1[7];
    uint64_t v9 = a1[8];
    BOOL v10 = v9 < v20;
    if (v9 == v20) {
      BOOL v10 = a1[9] < v21;
    }
    if (v8 == v19) {
      BOOL v11 = v10;
    }
    else {
      BOOL v11 = v8 < v19;
    }
    return !v11;
  }
  if (v3 == 1) {
    return 0;
  }
  if (v2[6] == v5 && v2[7] == v6) {
    goto LABEL_7;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    goto LABEL_7;
  }
  if (v3 == 2) {
    return 0;
  }
  uint64_t v14 = v2 + 9;
  for (uint64_t i = 2; ; ++i)
  {
    uint64_t v16 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v17 = *(v14 - 1) == v5 && *v14 == v6;
    if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_7;
    }
    uint64_t result = 0;
    v14 += 2;
    if (v16 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1002A4F68@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(long long *, void *)@<X1>, void *a3@<X8>)
{
  void (*v3)(void *__return_ptr, void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  long long v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  int64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  long long v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(long long *__return_ptr, void *);
  int64_t v59;
  uint64_t (*v60)(long long *);
  void v61[3];
  long long v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  long long v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int64_t v79;
  unint64_t v80;
  void (*v81)(void *__return_ptr, void);
  uint64_t v82;
  uint64_t (*v83)(void);
  uint64_t v84;
  uint64_t v85;
  long long v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void v92[8];

  uint64_t v3 = (void (*)(void *__return_ptr, void))a1[1];
  uint64_t v85 = *a1;
  uint64_t v4 = -1 << *(unsigned char *)(v85 + 32);
  uint64_t v5 = ~v4;
  uint64_t v6 = -v4;
  if (v6 < 64) {
    BOOL v7 = ~(-1 << v6);
  }
  else {
    BOOL v7 = -1;
  }
  uint64_t v8 = v7 & *(void *)(v85 + 64);
  BOOL v10 = a1[2];
  uint64_t v9 = (uint64_t (*)(void))a1[3];
  BOOL v11 = a1[4];
  unint64_t v76 = v85;
  char v77 = v85 + 64;
  uint64_t v78 = v5;
  uint64_t v79 = 0;
  uint64_t v80 = v8;
  id v81 = v3;
  long long v58 = (void (*)(long long *__return_ptr, void *))v3;
  uint64_t v82 = v10;
  uint64_t v83 = v9;
  uint64_t v60 = (uint64_t (*)(long long *))v9;
  uint64_t v84 = v11;
  sub_10019B2A0((uint64_t)&v85);
  swift_retain();
  swift_retain();
  while (1)
  {
    sub_1003A42F8(&v62);
    uint64_t v12 = v62;
    uint64_t v13 = v63;
    uint64_t v14 = v64;
    uint64_t v15 = v65;
    BOOL v17 = v67;
    uint64_t v16 = v68;
    if (!*((void *)&v62 + 1))
    {
      uint64_t v20 = v65;
      uint64_t v21 = v66;
      sub_10024A370();
      swift_release();
      swift_release();
      uint64_t result = swift_release();
      *a3 = v12;
      a3[1] = 0;
      a3[2] = v13;
      a3[3] = v14;
      a3[4] = v20;
      a3[5] = v21;
      a3[6] = v17;
      a3[7] = v16;
      return result;
    }
    double v69 = v62;
    uint64_t v70 = v63;
    char v71 = v64;
    uint64_t v72 = v65;
    uint64_t v73 = v66;
    uint64_t v74 = v67;
    Swift::String v75 = v68;
    uint64_t v18 = v66;
    uint64_t result = v60(&v69);
    if (result) {
      break;
    }
    sub_10018B054(v12, *((uint64_t *)&v12 + 1));
  }
  unint64_t v50 = *((void *)&v12 + 1);
  uint64_t v47 = v18;
  uint64_t v48 = v15;
  long long v53 = v14;
  long long v54 = v13;
  long long v55 = v12;
  long long v56 = v17;
  uint64_t v46 = v16;
LABEL_10:
  long long v57 = v76;
  long long v59 = v79;
  uint64_t v22 = v80;
  char v51 = v77;
  uint64_t v52 = (unint64_t)(v78 + 64) >> 6;
  while (v22)
  {
    uint64_t v23 = __clz(__rbit64(v22));
    v22 &= v22 - 1;
    uint64_t v24 = v23 | (v59 << 6);
LABEL_24:
    uint64_t v34 = (void *)(*(void *)(v57 + 48) + 16 * v24);
    uint64_t v35 = v34[1];
    uint64_t v36 = *(void *)(*(void *)(v57 + 56) + 8 * v24);
    v61[0] = *v34;
    v61[1] = v35;
    v61[2] = v36;
    swift_bridgeObjectRetain();
    v58(&v62, v61);
    swift_bridgeObjectRelease();
    uint64_t v37 = v62;
    uint64_t v39 = v63;
    uint64_t v38 = v64;
    uint64_t v41 = v65;
    uint64_t v40 = v66;
    uint64_t v42 = v67;
    uint64_t v43 = v68;
    double v69 = v62;
    uint64_t v70 = v63;
    char v71 = v64;
    uint64_t v72 = v65;
    uint64_t v73 = v66;
    uint64_t v74 = v67;
    Swift::String v75 = v68;
    if (v60(&v69))
    {
      uint64_t v86 = v37;
      char v87 = v39;
      uint64_t v88 = v38;
      uint64_t v89 = v41;
      uint64_t v90 = v40;
      uint64_t v91 = v42;
      v92[0] = v55;
      v92[1] = v50;
      v92[2] = v54;
      v92[3] = v53;
      v92[4] = v48;
      v92[5] = v47;
      v92[6] = v56;
      if (a2(&v86, v92))
      {
        uint64_t v46 = v43;
        uint64_t v79 = v59;
        uint64_t v80 = v22;
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        long long v54 = v39;
        unint64_t v50 = *((void *)&v37 + 1);
        long long v55 = v37;
        long long v53 = v38;
        uint64_t v47 = v40;
        uint64_t v48 = v41;
        long long v56 = v42;
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  uint64_t v25 = v59 + 1;
  if (!__OFADD__(v59, 1))
  {
    if (v25 >= v52)
    {
      uint64_t v27 = v46;
      uint64_t v29 = v55;
      uint64_t v28 = v56;
      uint64_t v31 = v53;
      uint64_t v30 = v54;
LABEL_38:
      sub_10024A370();
      swift_release();
      swift_release();
      uint64_t result = swift_release();
      *a3 = v29;
      a3[1] = v50;
      a3[2] = v30;
      a3[3] = v31;
      a3[4] = v48;
      a3[5] = v47;
      a3[6] = v28;
      a3[7] = v27;
      return result;
    }
    uint64_t v26 = *(void *)(v51 + 8 * v25);
    uint64_t v27 = v46;
    uint64_t v29 = v55;
    uint64_t v28 = v56;
    uint64_t v31 = v53;
    uint64_t v30 = v54;
    if (v26) {
      goto LABEL_23;
    }
    uint64_t v32 = v59 + 2;
    if (v59 + 2 >= v52) {
      goto LABEL_38;
    }
    uint64_t v26 = *(void *)(v51 + 8 * v32);
    if (v26) {
      goto LABEL_19;
    }
    uint64_t v33 = v59 + 3;
    if (v59 + 3 >= v52) {
      goto LABEL_38;
    }
    uint64_t v26 = *(void *)(v51 + 8 * v33);
    if (!v26)
    {
      uint64_t v32 = v59 + 4;
      if (v59 + 4 >= v52) {
        goto LABEL_38;
      }
      uint64_t v26 = *(void *)(v51 + 8 * v32);
      if (v26)
      {
LABEL_19:
        uint64_t v25 = v32;
LABEL_23:
        uint64_t v22 = (v26 - 1) & v26;
        uint64_t v24 = __clz(__rbit64(v26)) + (v25 << 6);
        long long v59 = v25;
        goto LABEL_24;
      }
      uint64_t v33 = v59 + 5;
      if (v59 + 5 >= v52) {
        goto LABEL_38;
      }
      uint64_t v26 = *(void *)(v51 + 8 * v33);
      if (!v26)
      {
        uint64_t v25 = v59 + 6;
        if (v59 + 6 >= v52) {
          goto LABEL_38;
        }
        uint64_t v26 = *(void *)(v51 + 8 * v25);
        if (!v26)
        {
          uint64_t v44 = v59 + 7;
          while (v52 != v44)
          {
            uint64_t v26 = *(void *)(v51 + 8 * v44++);
            if (v26)
            {
              uint64_t v25 = v44 - 1;
              goto LABEL_23;
            }
          }
          goto LABEL_38;
        }
        goto LABEL_23;
      }
    }
    uint64_t v25 = v33;
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002A5400(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 48) = a6;
  *(void *)(v7 + 56) = v6;
  *(unsigned char *)(v7 + 152) = a4;
  *(void *)(v7 + 32) = a3;
  *(void *)(v7 + 40) = a5;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  uint64_t v8 = sub_1000172F8((uint64_t *)&unk_100663D80);
  *(void *)(v7 + 64) = v8;
  *(void *)(v7 + 72) = *(void *)(v8 - 8);
  *(void *)(v7 + 80) = swift_task_alloc();
  *(void *)(v7 + 88) = swift_task_alloc();
  *(void *)(v7 + 96) = swift_task_alloc();
  sub_1000172F8(&qword_10065EA38);
  *(void *)(v7 + 104) = swift_task_alloc();
  *(void *)(v7 + 112) = swift_task_alloc();
  return _swift_task_switch(sub_1002A552C, 0, 0);
}

uint64_t sub_1002A552C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 24);
  char v4 = *(unsigned char *)(v0 + 152) & 1;
  sub_1000172F8(qword_10065EA68);
  uint64_t v5 = (int *)(sub_1000172F8(&qword_100663D90) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(*(void *)v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v5 + 80);
  uint64_t v7 = swift_allocObject();
  *(void *)(v0 + 120) = v7;
  *(_OWORD *)(v7 + 16) = xmmword_1005A3EC0;
  unint64_t v8 = v7 + v6;
  unint64_t v9 = v7 + v6 + v5[14];
  *(void *)unint64_t v8 = v3;
  *(void *)(v8 + 8) = v1;
  *(unsigned char *)(v8 + 16) = v4;
  uint64_t v10 = type metadata accessor for Platform();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v9, v2, v10);
  sub_1001C3ED0(v3, v1, v4);
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10065E020 + dword_10065E020);
  BOOL v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v11;
  *BOOL v11 = v0;
  v11[1] = sub_1002A56EC;
  uint64_t v12 = *(void *)(v0 + 48);
  return v14(v7, v12);
}

uint64_t sub_1002A56EC(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 136) = a1;
  *(void *)(v3 + 144) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1) {
    char v4 = sub_1002A5AC8;
  }
  else {
    char v4 = sub_1002A5820;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1002A5820()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[9];
    uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v5 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100017238(v4, v0[12], (uint64_t *)&unk_100663D80);
      if (static StoreAppIdentifier.== infix(_:_:)()) {
        break;
      }
      sub_10001729C(v0[12], (uint64_t *)&unk_100663D80);
      v4 += v5;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    uint64_t v7 = v0[14];
    uint64_t v8 = v0[12];
    swift_bridgeObjectRelease();
    sub_10001733C(v8, v7, (uint64_t *)&unk_100663D80);
    uint64_t v6 = 0;
  }
  else
  {
LABEL_6:
    uint64_t v6 = 1;
  }
  uint64_t v10 = v0[13];
  uint64_t v9 = v0[14];
  uint64_t v11 = v0[8];
  uint64_t v12 = v0[9];
  uint64_t v13 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v9, v6, 1, v11);
  swift_bridgeObjectRelease();
  sub_100017238(v9, v10, &qword_10065EA38);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) != 1)
  {
    uint64_t v15 = v0[10];
    uint64_t v14 = v0[11];
    uint64_t v16 = v0[8];
    uint64_t v17 = v0[2];
    sub_10001733C(v0[13], v14, (uint64_t *)&unk_100663D80);
    uint64_t v18 = *(int *)(v16 + 48);
    uint64_t v19 = v15 + v18;
    sub_1002B2F18(v14 + v18, v19, type metadata accessor for MediaAPIApp);
    sub_1002B2FD4(v19, v17, type metadata accessor for MediaAPIApp);
    sub_10001729C(v14, (uint64_t *)&unk_100663D80);
    uint64_t v13 = 0;
  }
  uint64_t v20 = v0[14];
  uint64_t v21 = v0[2];
  uint64_t v22 = type metadata accessor for MediaAPIApp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, v13, 1, v22);
  sub_10001729C(v20, &qword_10065EA38);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t sub_1002A5AC8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002A5B5C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v3 = sub_1000172F8(&qword_100663D90);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v38 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v34 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v34 - v10;
  uint64_t v12 = *(int *)(v9 + 48);
  uint64_t v13 = (char *)&v34 + v12 - v10;
  uint64_t v14 = a1 + v12;
  uint64_t v39 = (void (*)(char *, uint64_t, uint64_t))(a1 + v12);
  uint64_t v15 = *(void *)a1;
  uint64_t v16 = *(void *)(a1 + 8);
  char v17 = *(unsigned char *)(a1 + 16);
  *(void *)uint64_t v11 = *(void *)a1;
  *((void *)v11 + 1) = v16;
  v11[16] = v17;
  uint64_t v18 = type metadata accessor for Platform();
  uint64_t v41 = *(void *)(v18 - 8);
  uint64_t v42 = v13;
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 16);
  v19(v13, v14, v18);
  sub_1001C3ED0(v15, v16, v17);
  uint64_t v36 = StoreAppIdentifier.bundleID.getter();
  uint64_t v21 = v20;
  sub_1001C3EC0(v15, v16, v17);
  uint64_t v37 = v3;
  uint64_t v22 = &v8[*(int *)(v3 + 48)];
  uint64_t v40 = v15;
  *(void *)uint64_t v8 = v15;
  *((void *)v8 + 1) = v16;
  uint64_t v23 = v18;
  v8[16] = v17;
  uint64_t v24 = v39;
  uint64_t v39 = v19;
  v19(v22, (uint64_t)v24, v18);
  if (v21)
  {
    uint64_t v25 = sub_1000172F8(&qword_10065E060);
    uint64_t v26 = *(int *)(v25 + 48);
    uint64_t v35 = v8;
    uint64_t v27 = v43;
    uint64_t v34 = (char *)v43 + v26;
    *uint64_t v43 = v36;
    v27[1] = v21;
    uint64_t v28 = &v38[*(int *)(v37 + 48)];
    v39(v28, (uint64_t)v22, v18);
    uint64_t v29 = v41;
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v34, v28, v23);
    uint64_t v30 = v27;
    uint64_t v8 = v35;
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v30, 0, 1, v25);
    uint64_t v31 = v29;
  }
  else
  {
    uint64_t v32 = sub_1000172F8(&qword_10065E060);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v43, 1, 1, v32);
    uint64_t v31 = v41;
  }
  sub_1001C3ED0(v40, v16, v17);
  sub_10001729C((uint64_t)v8, &qword_100663D90);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v42, v23);
}

uint64_t sub_1002A5E5C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v70 = a3;
  uint64_t v5 = sub_1000172F8(&qword_10065BCC0);
  __chkstk_darwin(v5 - 8);
  uint64_t v71 = (uint64_t)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Locale.Language();
  uint64_t v73 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  double v69 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Platform();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v80 = (char *)&v67 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v85 = (char *)&v67 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v84 = (char *)&v67 - v19;
  __chkstk_darwin(v18);
  uint64_t v79 = (char *)&v67 - v20;
  sub_10018B1DC(0, &qword_10065EA48);
  uint64_t v21 = *a1;
  swift_getObjectType();
  swift_unknownObjectRetain();
  id v72 = sub_1002AC990(0, 0xD000000000000020, 0x80000001005BD180, 49, 0xE100000000000000, v21);
  int64_t v22 = *(void *)(a2 + 16);
  if (v22)
  {
    uint64_t v67 = v7;
    unint64_t v68 = a1;
    uint64_t v86 = _swiftEmptyArrayStorage;
    sub_100456048(0, v22, 0);
    int64_t v24 = sub_100257AF4(a2);
    int v26 = v25 & 1;
    uint64_t v78 = a2 + 56;
    uint64_t v75 = v10 + 16;
    uint64_t v74 = v10 + 32;
    uint64_t v76 = v10;
    uint64_t v81 = v10 + 8;
    uint64_t v77 = a2;
    while ((v24 & 0x8000000000000000) == 0 && v24 < 1 << *(unsigned char *)(a2 + 32))
    {
      if (((*(void *)(v78 + (((unint64_t)v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24) & 1) == 0) {
        goto LABEL_22;
      }
      if (*(_DWORD *)(a2 + 36) != v23) {
        goto LABEL_23;
      }
      int v82 = v26;
      uint64_t v83 = v23;
      uint64_t v27 = *(void *)(a2 + 48);
      uint64_t v28 = v76;
      uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v76 + 16);
      uint64_t v30 = v79;
      v29(v79, v27 + *(void *)(v76 + 72) * v24, v9);
      uint64_t v31 = v84;
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v84, v30, v9);
      uint64_t v32 = v85;
      v29(v85, (uint64_t)v31, v9);
      uint64_t v33 = v13;
      uint64_t v34 = v80;
      v29(v80, (uint64_t)v32, v9);
      static Platform.macOS.getter();
      sub_100013B4C((unint64_t *)&qword_10065E048, (void (*)(uint64_t))&type metadata accessor for Platform);
      LOBYTE(v29) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v35 = *(void (**)(char *, uint64_t))(v28 + 8);
      v35(v33, v9);
      uint64_t v36 = (void **)&AMSMediaTaskPlatformMac;
      if ((v29 & 1) == 0)
      {
        static Platform.iOS.getter();
        char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
        v35(v33, v9);
        uint64_t v36 = (void **)&AMSMediaTaskPlatformiPhone;
        if ((v37 & 1) == 0)
        {
          static Platform.tvOS.getter();
          char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
          v35(v33, v9);
          uint64_t v36 = (void **)&AMSMediaTaskPlatformAppleTV;
          if ((v38 & 1) == 0)
          {
            static Platform.watchOS.getter();
            char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
            v35(v33, v9);
            uint64_t v36 = (void **)&AMSMediaTaskPlatformAppleWatch;
            if ((v39 & 1) == 0) {
              goto LABEL_24;
            }
          }
        }
      }
      uint64_t v40 = *v36;
      v35(v34, v9);
      id v41 = v40;
      v35(v85, v9);
      v35(v84, v9);
      uint64_t v42 = v86;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100456048(0, v42[2] + 1, 1);
        uint64_t v42 = v86;
      }
      uint64_t v13 = v33;
      int v43 = v83;
      unint64_t v45 = v42[2];
      unint64_t v44 = v42[3];
      if (v45 >= v44 >> 1)
      {
        sub_100456048(v44 > 1, v45 + 1, 1);
        uint64_t v42 = v86;
      }
      v42[2] = v45 + 1;
      v42[v45 + 4] = v41;
      a2 = v77;
      int64_t v46 = sub_100257AF8(v24, v43, v82 & 1, v77);
      int64_t v24 = v46;
      int v26 = v47 & 1;
      if (!--v22)
      {
        sub_1000162C0(v46, v23, v26);
        a1 = v68;
        uint64_t v7 = v67;
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_17:
    type metadata accessor for AMSMediaTaskPlatform(0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v49 = v72;
    [v72 setAdditionalPlatforms:isa];

    sub_1000172F8(&qword_10065B658);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1005A4070;
    *(void *)(inited + 32) = 0x73646C656966;
    *(void *)(inited + 40) = 0xE600000000000000;
    char v51 = sub_1002A1F78((uint64_t)&off_100638528);
    uint64_t v52 = sub_1002A21BC((uint64_t)&off_100638558);
    uint64_t v86 = v51;
    sub_100555B18((uint64_t)v52);
    sub_1000172F8((uint64_t *)&unk_10065C5D0);
    sub_10000DDFC((unint64_t *)&qword_10065D350, (uint64_t *)&unk_10065C5D0);
    uint64_t v53 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v55 = v54;
    swift_bridgeObjectRelease();
    *(void *)(inited + 48) = v53;
    *(void *)(inited + 56) = v55;
    *(void *)(inited + 64) = 0x6574616C6572;
    *(void *)(inited + 72) = 0xE600000000000000;
    *(void *)(inited + 80) = 0x7365726E6567;
    *(void *)(inited + 88) = 0xE600000000000000;
    unint64_t v56 = sub_10044B560(inited);
    uint64_t v57 = v71;
    sub_100017238(v70, v71, &qword_10065BCC0);
    uint64_t v58 = v73;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v57, 1, v7) == 1)
    {
      sub_10001729C(v57, &qword_10065BCC0);
    }
    else
    {
      long long v59 = v69;
      (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(v69, v57, v7);
      uint64_t v60 = Locale.Language.minimalIdentifier.getter();
      uint64_t v62 = v61;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v86 = (void *)v56;
      sub_100529754(v60, v62, 108, 0xE100000000000000, isUniquelyReferenced_nonNull_native);
      unint64_t v56 = (unint64_t)v86;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v7);
    }
    char v64 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v86 = (void *)v56;
    sub_100529754(0x64657473696C6E75, 0xEC00000073707041, 1752459639, 0xE400000000000000, v64);
    swift_bridgeObjectRelease();
    Class v65 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v49 setAdditionalQueryParams:v65];

    [v49 setAccount:a1[16]];
    return (uint64_t)v49;
  }
  return result;
}

unint64_t sub_1002A67F0(char a1)
{
  unint64_t result = 0x6449656C646E7562;
  switch(a1)
  {
    case 1:
    case 2:
    case 7:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0x7470697263736564;
      break;
    case 5:
      unint64_t result = 0x73726566666FLL;
      break;
    case 6:
      unint64_t result = 0x6B726F77747261;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1002A68EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[10] = a6;
  v7[11] = a7;
  v7[8] = a4;
  v7[9] = a5;
  v7[6] = a2;
  v7[7] = a3;
  v7[5] = a1;
  uint64_t v8 = sub_1000172F8(&qword_10065E9F0);
  v7[12] = v8;
  v7[13] = *(void *)(v8 - 8);
  v7[14] = swift_task_alloc();
  uint64_t v9 = *(void *)(sub_1000172F8(&qword_10065BCC0) - 8);
  v7[15] = v9;
  v7[16] = *(void *)(v9 + 64);
  v7[17] = swift_task_alloc();
  sub_1000172F8(&qword_10065B220);
  v7[18] = swift_task_alloc();
  return _swift_task_switch(sub_1002A6A50, 0, 0);
}

uint64_t sub_1002A6A50()
{
  uint64_t v1 = v0[7];
  if (*(void *)(v1 + 16))
  {
    uint64_t v3 = v0[17];
    uint64_t v2 = v0[18];
    uint64_t v4 = v0[15];
    uint64_t v5 = v0[16];
    uint64_t v6 = v0[9];
    uint64_t v7 = v0[10];
    uint64_t v8 = v0[8];
    uint64_t v9 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v2, 1, 1, v9);
    sub_100017238(v7, v3, &qword_10065BCC0);
    unint64_t v10 = (*(unsigned __int8 *)(v4 + 80) + 176) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = 0;
    *(void *)(v11 + 24) = 0;
    uint64_t v12 = *(void *)(v8 + 128);
    long long v14 = *(_OWORD *)(v8 + 96);
    long long v13 = *(_OWORD *)(v8 + 112);
    *(_OWORD *)(v11 + 112) = *(_OWORD *)(v8 + 80);
    *(_OWORD *)(v11 + 128) = v14;
    *(_OWORD *)(v11 + 144) = v13;
    *(void *)(v11 + 160) = v12;
    long long v16 = *(_OWORD *)(v8 + 48);
    long long v15 = *(_OWORD *)(v8 + 64);
    long long v17 = *(_OWORD *)(v8 + 32);
    *(_OWORD *)(v11 + 48) = *(_OWORD *)(v8 + 16);
    *(_OWORD *)(v11 + 64) = v17;
    *(_OWORD *)(v11 + 80) = v16;
    *(_OWORD *)(v11 + 96) = v15;
    *(_OWORD *)(v11 + 32) = *(_OWORD *)v8;
    *(void *)(v11 + 168) = v6;
    sub_10001733C(v3, v11 + v10, &qword_10065BCC0);
    *(void *)(v11 + ((v5 + v10 + 7) & 0xFFFFFFFFFFFFFFF8)) = v1;
    sub_100279F9C(v8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1002A23A0(v2, (uint64_t)&unk_10065EA00, v11);
    sub_10001729C(v2, &qword_10065B220);
  }
  uint64_t v18 = v0[11];
  if (*(void *)(v18 + 16))
  {
    uint64_t v20 = v0[17];
    uint64_t v19 = v0[18];
    uint64_t v21 = v0[15];
    uint64_t v22 = v0[16];
    uint64_t v23 = v0[9];
    uint64_t v24 = v0[10];
    uint64_t v25 = v0[8];
    uint64_t v26 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v19, 1, 1, v26);
    sub_100017238(v24, v20, &qword_10065BCC0);
    unint64_t v27 = (*(unsigned __int8 *)(v21 + 80) + 176) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = 0;
    *(void *)(v28 + 24) = 0;
    uint64_t v29 = *(void *)(v25 + 128);
    long long v31 = *(_OWORD *)(v25 + 96);
    long long v30 = *(_OWORD *)(v25 + 112);
    *(_OWORD *)(v28 + 112) = *(_OWORD *)(v25 + 80);
    *(_OWORD *)(v28 + 128) = v31;
    *(_OWORD *)(v28 + 144) = v30;
    *(void *)(v28 + 160) = v29;
    long long v33 = *(_OWORD *)(v25 + 48);
    long long v32 = *(_OWORD *)(v25 + 64);
    long long v34 = *(_OWORD *)(v25 + 32);
    *(_OWORD *)(v28 + 48) = *(_OWORD *)(v25 + 16);
    *(_OWORD *)(v28 + 64) = v34;
    *(_OWORD *)(v28 + 80) = v33;
    *(_OWORD *)(v28 + 96) = v32;
    *(_OWORD *)(v28 + 32) = *(_OWORD *)v25;
    *(void *)(v28 + 168) = v23;
    sub_10001733C(v20, v28 + v27, &qword_10065BCC0);
    *(void *)(v28 + ((v22 + v27 + 7) & 0xFFFFFFFFFFFFFFF8)) = v18;
    sub_100279F9C(v25);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1002A23A0(v19, (uint64_t)&unk_10065EA10, v28);
    sub_10001729C(v19, &qword_10065B220);
  }
  v0[2] = _swiftEmptyArrayStorage;
  sub_1000172F8(&qword_10065E008);
  sub_1000172F8(&qword_10065B260);
  ThrowingTaskGroup.makeAsyncIterator()();
  uint64_t v35 = (void *)swift_task_alloc();
  v0[19] = v35;
  *uint64_t v35 = v0;
  v35[1] = sub_1002A6DFC;
  uint64_t v36 = v0[12];
  return __sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v0 + 3, 0, 0, v36, v0 + 4);
}

uint64_t sub_1002A6DFC()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v1 = sub_1002A705C;
  }
  else
  {
    uint64_t v1 = sub_1002A6F14;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_1002A6F14()
{
  uint64_t v1 = v0[3];
  if (v1)
  {
    sub_100555C6C(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[19] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1002A6DFC;
    uint64_t v3 = v0[12];
    return __sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v0 + 3, 0, 0, v3, v0 + 4);
  }
  else
  {
    uint64_t v4 = (void *)v0[5];
    (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
    *uint64_t v4 = v0[2];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_1002A705C()
{
  (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1002A70F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[23] = a6;
  v7[24] = a7;
  v7[21] = a4;
  v7[22] = a5;
  v7[20] = a1;
  v7[25] = *(void *)(type metadata accessor for MediaAPIApp(0) - 8);
  v7[26] = swift_task_alloc();
  uint64_t v8 = sub_1000172F8((uint64_t *)&unk_100663D80);
  v7[27] = v8;
  v7[28] = *(void *)(v8 - 8);
  v7[29] = swift_task_alloc();
  uint64_t v9 = sub_1000172F8(&qword_10065EA18);
  v7[30] = v9;
  v7[31] = *(void *)(v9 - 8);
  v7[32] = swift_task_alloc();
  return _swift_task_switch(sub_1002A727C, 0, 0);
}

uint64_t sub_1002A727C()
{
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v3 = *(void *)(v0 + 240);
  uint64_t v4 = (void *)sub_1002A5E5C(*(uint64_t **)(v0 + 168), *(void *)(v0 + 176), *(void *)(v0 + 184));
  *(void *)(v0 + 264) = v4;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v4 setItemIdentifiers:isa];

  id v6 = [v4 perform];
  *(void *)(v0 + 272) = v6;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 144;
  *(void *)(v0 + 24) = sub_1002A7480;
  swift_continuation_init();
  *(void *)(v0 + 136) = v3;
  uint64_t v7 = sub_10019CE94((uint64_t *)(v0 + 112));
  sub_10018B1DC(0, &qword_10065EA20);
  sub_1000172F8(&qword_10065B260);
  CheckedContinuation.init(continuation:function:)();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 32))(v7, v1, v3);
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 1107296256;
  *(void *)(v0 + 96) = sub_1002A7C78;
  *(void *)(v0 + 104) = &unk_10063E8C8;
  [v6 resultWithCompletion:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_1002A7480()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 280) = v1;
  if (v1) {
    uint64_t v2 = sub_1002A7BE0;
  }
  else {
    uint64_t v2 = sub_1002A7590;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002A7590()
{
  uint64_t v55 = v0;
  uint64_t v1 = *(void **)(v0 + 272);
  uint64_t v2 = *(void **)(v0 + 144);
  id v3 = [v2 data];

  uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v6 = v5;

  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_1000172F8(&qword_10065EA28);
  sub_10000DDFC(&qword_10065EA30, &qword_10065EA28);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  uint64_t v7 = *(void *)(v0 + 152);
  int64_t v8 = *(void *)(v7 + 16);
  if (!v8)
  {
    char v47 = *(void **)(v0 + 264);
    sub_100013510(v4, v6);

    swift_bridgeObjectRelease();
LABEL_71:
    **(void **)(v0 + 160) = _swiftEmptyArrayStorage;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v48 = *(uint64_t (**)(void))(v0 + 8);
    return v48();
  }
  uint64_t v49 = v4;
  unint64_t v50 = v6;
  uint64_t v9 = *(void *)(v0 + 224);
  uint64_t v10 = *(void *)(v0 + 232);
  uint64_t v51 = *(void *)(v0 + 216);
  uint64_t v11 = *(void *)(v0 + 200);
  uint64_t v53 = *(void *)(v0 + 208);
  sub_100456068(0, v8, 0);
  uint64_t v12 = 0;
  uint64_t v52 = v7 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  uint64_t v13 = *(void *)(v11 + 72);
  while (1)
  {
    long long v14 = *(uint64_t **)(v0 + 208);
    uint64_t result = sub_1002B2F18(v52 + v12 * v13, (uint64_t)v14, type metadata accessor for MediaAPIApp);
    uint64_t v16 = *v14;
    unint64_t v17 = *(void *)(v53 + 8);
    uint64_t v18 = HIBYTE(v17) & 0xF;
    uint64_t v19 = *v14 & 0xFFFFFFFFFFFFLL;
    if (!((v17 & 0x2000000000000000) != 0 ? HIBYTE(v17) & 0xF : *v14 & 0xFFFFFFFFFFFFLL)) {
      break;
    }
    if ((v17 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      unint64_t v23 = sub_1004D1D90(v16, v17, 10);
      char v45 = v44;
      uint64_t result = swift_bridgeObjectRelease();
      if (v45) {
        goto LABEL_77;
      }
    }
    else
    {
      if ((v17 & 0x2000000000000000) != 0)
      {
        v54[0] = *v14;
        v54[1] = v17 & 0xFFFFFFFFFFFFFFLL;
        if (v16 == 43)
        {
          if (!v18) {
            goto LABEL_76;
          }
          if (v18 != 1)
          {
            if ((BYTE1(v16) - 48) <= 9u)
            {
              unint64_t v23 = (BYTE1(v16) - 48);
              if (v18 == 2) {
                goto LABEL_39;
              }
              if ((BYTE2(v16) - 48) <= 9u)
              {
                unint64_t v23 = 10 * (BYTE1(v16) - 48) + (BYTE2(v16) - 48);
                uint64_t v27 = v18 - 3;
                if (v18 != 3)
                {
                  uint64_t v28 = (unsigned __int8 *)v54 + 3;
                  while (1)
                  {
                    unsigned int v29 = *v28 - 48;
                    if (v29 > 9) {
                      goto LABEL_36;
                    }
                    if (!is_mul_ok(v23, 0xAuLL)) {
                      goto LABEL_36;
                    }
                    BOOL v25 = __CFADD__(10 * v23, v29);
                    unint64_t v23 = 10 * v23 + v29;
                    if (v25) {
                      goto LABEL_36;
                    }
                    LOBYTE(v18) = 0;
                    ++v28;
                    if (!--v27) {
                      goto LABEL_40;
                    }
                  }
                }
                goto LABEL_39;
              }
            }
            goto LABEL_36;
          }
        }
        else
        {
          if (v16 != 45)
          {
            if (v18 && (v16 - 48) <= 9u)
            {
              unint64_t v23 = (v16 - 48);
              if (v18 == 1) {
                goto LABEL_39;
              }
              if ((BYTE1(v16) - 48) <= 9u)
              {
                unint64_t v23 = 10 * (v16 - 48) + (BYTE1(v16) - 48);
                uint64_t v36 = v18 - 2;
                if (v18 != 2)
                {
                  char v37 = (unsigned __int8 *)v54 + 2;
                  while (1)
                  {
                    unsigned int v38 = *v37 - 48;
                    if (v38 > 9) {
                      goto LABEL_36;
                    }
                    if (!is_mul_ok(v23, 0xAuLL)) {
                      goto LABEL_36;
                    }
                    BOOL v25 = __CFADD__(10 * v23, v38);
                    unint64_t v23 = 10 * v23 + v38;
                    if (v25) {
                      goto LABEL_36;
                    }
                    LOBYTE(v18) = 0;
                    ++v37;
                    if (!--v36) {
                      goto LABEL_40;
                    }
                  }
                }
                goto LABEL_39;
              }
            }
            goto LABEL_36;
          }
          if (!v18) {
            goto LABEL_75;
          }
          if (v18 != 1)
          {
            unsigned __int8 v24 = BYTE1(v16) - 48;
            if ((BYTE1(v16) - 48) <= 9u)
            {
              unint64_t v23 = 0;
              BOOL v25 = v24 == 0;
              unint64_t v26 = -(uint64_t)v24;
              if (!v25)
              {
LABEL_37:
                LOBYTE(v18) = 1;
                goto LABEL_40;
              }
              if (v18 == 2)
              {
                LOBYTE(v18) = 0;
                unint64_t v23 = v26;
                goto LABEL_40;
              }
              unsigned __int8 v39 = BYTE2(v16) - 48;
              if ((BYTE2(v16) - 48) <= 9u && is_mul_ok(v26, 0xAuLL))
              {
                unint64_t v40 = 10 * v26;
                unint64_t v23 = v40 - v39;
                if (v40 >= v39)
                {
                  uint64_t v41 = v18 - 3;
                  if (v18 != 3)
                  {
                    uint64_t v42 = (unsigned __int8 *)v54 + 3;
                    while (1)
                    {
                      unsigned int v43 = *v42 - 48;
                      if (v43 > 9) {
                        goto LABEL_36;
                      }
                      if (!is_mul_ok(v23, 0xAuLL)) {
                        goto LABEL_36;
                      }
                      BOOL v25 = 10 * v23 >= v43;
                      unint64_t v23 = 10 * v23 - v43;
                      if (!v25) {
                        goto LABEL_36;
                      }
                      LOBYTE(v18) = 0;
                      ++v42;
                      if (!--v41) {
                        goto LABEL_40;
                      }
                    }
                  }
LABEL_39:
                  LOBYTE(v18) = 0;
LABEL_40:
                  if (v18) {
                    goto LABEL_77;
                  }
                  goto LABEL_41;
                }
              }
            }
LABEL_36:
            unint64_t v23 = 0;
            goto LABEL_37;
          }
        }
        unint64_t v23 = 0;
        goto LABEL_40;
      }
      if ((v16 & 0x1000000000000000) != 0) {
        uint64_t v21 = (unsigned __int8 *)((v17 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v21 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t result = (uint64_t)sub_1004D1D78(v21, v19, 10);
      if (v22) {
        goto LABEL_77;
      }
      unint64_t v23 = result;
    }
LABEL_41:
    long long v30 = *(unint64_t **)(v0 + 232);
    uint64_t v31 = *(void *)(v0 + 208);
    uint64_t v32 = (uint64_t)v30 + *(int *)(v51 + 48);
    *long long v30 = v23;
    *(void *)(v10 + 8) = 0;
    *(unsigned char *)(v10 + 16) = 0;
    sub_1002B2FD4(v31, v32, type metadata accessor for MediaAPIApp);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      sub_100456068(0, _swiftEmptyArrayStorage[2] + 1, 1);
    }
    unint64_t v34 = _swiftEmptyArrayStorage[2];
    unint64_t v33 = _swiftEmptyArrayStorage[3];
    if (v34 >= v33 >> 1) {
      sub_100456068(v33 > 1, v34 + 1, 1);
    }
    ++v12;
    uint64_t v35 = *(void *)(v0 + 232);
    _swiftEmptyArrayStorage[2] = v34 + 1;
    sub_10001733C(v35, (uint64_t)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v34, (uint64_t *)&unk_100663D80);
    if (v12 == v8)
    {
      int64_t v46 = *(void **)(v0 + 264);
      sub_100013510(v49, v50);

      swift_bridgeObjectRelease();
      goto LABEL_71;
    }
  }
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
  return result;
}

uint64_t sub_1002A7BE0()
{
  uint64_t v1 = (void *)v0[34];
  uint64_t v2 = (void *)v0[33];
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

void sub_1002A7C78(uint64_t a1, void *a2, void *a3)
{
  sub_10018AC60((void *)(a1 + 32), *(void *)(a1 + 56));
  if (a3)
  {
    id v5 = a3;
    sub_1000172F8(&qword_10065EA18);
    CheckedContinuation.resume(throwing:)();
  }
  else if (a2)
  {
    id v6 = a2;
    sub_1000172F8(&qword_10065EA18);
    CheckedContinuation.resume(returning:)();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1002A7D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[24] = a6;
  v7[25] = a7;
  v7[22] = a4;
  v7[23] = a5;
  v7[21] = a1;
  uint64_t v8 = type metadata accessor for Logger();
  v7[26] = v8;
  v7[27] = *(void *)(v8 - 8);
  v7[28] = swift_task_alloc();
  type metadata accessor for String.Encoding();
  v7[29] = swift_task_alloc();
  uint64_t v9 = sub_1000172F8(&qword_10065EA18);
  v7[30] = v9;
  v7[31] = *(void *)(v9 - 8);
  v7[32] = swift_task_alloc();
  return _swift_task_switch(sub_1002A7E70, 0, 0);
}

uint64_t sub_1002A7E70()
{
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v3 = *(void *)(v0 + 240);
  uint64_t v4 = (void *)sub_1002A5E5C(*(uint64_t **)(v0 + 176), *(void *)(v0 + 184), *(void *)(v0 + 192));
  *(void *)(v0 + 264) = v4;
  uint64_t v5 = swift_bridgeObjectRetain();
  sub_1004FD9E8(v5);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  [v4 setBundleIdentifiers:isa];

  id v7 = [v4 perform];
  *(void *)(v0 + 272) = v7;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 144;
  *(void *)(v0 + 24) = sub_1002A8094;
  swift_continuation_init();
  *(void *)(v0 + 136) = v3;
  uint64_t v8 = sub_10019CE94((uint64_t *)(v0 + 112));
  sub_10018B1DC(0, &qword_10065EA20);
  sub_1000172F8(&qword_10065B260);
  CheckedContinuation.init(continuation:function:)();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 32))(v8, v1, v3);
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 1107296256;
  *(void *)(v0 + 96) = sub_1002A7C78;
  *(void *)(v0 + 104) = &unk_10063E8A0;
  [v7 resultWithCompletion:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_1002A8094()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 280) = v1;
  if (v1) {
    uint64_t v2 = sub_1002A853C;
  }
  else {
    uint64_t v2 = sub_1002A81A4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002A81A4()
{
  uint64_t v28 = v0;
  uint64_t v1 = (void *)v0[34];
  uint64_t v2 = (void *)v0[18];
  id v3 = [v2 data];

  uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v6 = v5;

  static String.Encoding.utf8.getter();
  uint64_t result = String.init(data:encoding:)();
  uint64_t v26 = result;
  if (v8)
  {
    unint64_t v9 = v8;
    static Logger.general.getter();
    swift_bridgeObjectRetain();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v14 = v0[27];
    uint64_t v13 = v0[28];
    uint64_t v15 = v0[26];
    if (v12)
    {
      uint64_t v24 = v0[28];
      unint64_t v25 = v6;
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315138;
      swift_bridgeObjectRetain();
      v0[20] = sub_1000143F4(v26, v9, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      unint64_t v6 = v25;
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v24, v15);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    }
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    sub_1000172F8(&qword_10065EA28);
    sub_10000DDFC(&qword_10065EA30, &qword_10065EA28);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    unint64_t v17 = (void *)v0[33];
    unint64_t v18 = v6;
    uint64_t v19 = v0[25];
    uint64_t v20 = (void *)v0[21];
    swift_release();
    uint64_t v21 = v0[19];
    swift_bridgeObjectRetain();
    char v22 = sub_1002ADE50(v21, v19);
    swift_bridgeObjectRelease();
    sub_100013510(v4, v18);

    swift_bridgeObjectRelease();
    *uint64_t v20 = v22;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v23 = (uint64_t (*)(void))v0[1];
    return v23();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002A853C()
{
  uint64_t v1 = (void *)v0[34];
  uint64_t v2 = (void *)v0[33];
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1002A85D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v67 = a3;
  uint64_t v80 = sub_1000172F8(&qword_10065EA40);
  __chkstk_darwin(v80);
  uint64_t v86 = (uint64_t)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Platform();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v68 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v85 = (char *)&v65 - v10;
  uint64_t v11 = sub_1000172F8(&qword_10065BCD0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v73 = (uint64_t)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v89 = (uint64_t)&v65 - v15;
  __chkstk_darwin(v14);
  uint64_t v87 = (uint64_t)&v65 - v16;
  uint64_t v17 = *(int *)(type metadata accessor for MediaAPIApp(0) + 24);
  uint64_t v66 = a1;
  uint64_t v18 = *(void *)(a1 + v17);
  uint64_t v19 = *(void *)(v18 + 64);
  uint64_t v74 = v18 + 64;
  uint64_t v20 = 1 << *(unsigned char *)(v18 + 32);
  uint64_t v21 = -1;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  unint64_t v22 = v21 & v19;
  int64_t v75 = (unint64_t)(v20 + 63) >> 6;
  int v82 = (void (**)(uint64_t, char *, uint64_t))(v7 + 32);
  unint64_t v23 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
  uint64_t v69 = v7 + 16;
  uint64_t v79 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  uint64_t v70 = v7;
  id v72 = (void (**)(uint64_t, uint64_t))(v7 + 8);
  uint64_t v81 = v18;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v25 = 0;
  uint64_t v77 = a2;
  uint64_t v76 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
  while (1)
  {
    if (v22)
    {
      unint64_t v26 = __clz(__rbit64(v22));
      uint64_t v27 = (v22 - 1) & v22;
      unint64_t v28 = v26 | (v25 << 6);
      uint64_t v29 = v87;
      goto LABEL_23;
    }
    int64_t v30 = v25 + 1;
    uint64_t v29 = v87;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
    if (v30 >= v75) {
      goto LABEL_39;
    }
    unint64_t v31 = *(void *)(v74 + 8 * v30);
    ++v25;
    if (!v31)
    {
      int64_t v25 = v30 + 1;
      if (v30 + 1 >= v75) {
        goto LABEL_39;
      }
      unint64_t v31 = *(void *)(v74 + 8 * v25);
      if (!v31)
      {
        int64_t v25 = v30 + 2;
        if (v30 + 2 >= v75) {
          goto LABEL_39;
        }
        unint64_t v31 = *(void *)(v74 + 8 * v25);
        if (!v31) {
          break;
        }
      }
    }
LABEL_22:
    uint64_t v27 = (v31 - 1) & v31;
    unint64_t v28 = __clz(__rbit64(v31)) + (v25 << 6);
LABEL_23:
    int v33 = *(unsigned __int8 *)(*(void *)(v81 + 48) + v28);
    unint64_t v34 = (_OWORD *)(*(void *)(v81 + 56) + 160 * v28);
    long long v35 = v34[1];
    v88[0] = *v34;
    v88[1] = v35;
    long long v36 = v34[5];
    long long v38 = v34[2];
    long long v37 = v34[3];
    v88[4] = v34[4];
    v88[5] = v36;
    v88[2] = v38;
    v88[3] = v37;
    long long v39 = v34[9];
    long long v41 = v34[6];
    long long v40 = v34[7];
    v88[8] = v34[8];
    v88[9] = v39;
    v88[6] = v41;
    v88[7] = v40;
    if (v33)
    {
      if (v33 == 1)
      {
        sub_10027CC24(v88);
        static Platform.iOS.getter();
      }
      else
      {
        sub_10027CC24(v88);
        static Platform.tvOS.getter();
      }
    }
    else
    {
      sub_10027CC24(v88);
      static Platform.macOS.getter();
    }
    uint64_t v42 = *v82;
    (*v82)(v29, v85, v6);
    unsigned int v43 = *v23;
    (*v23)(v29, 0, 1, v6);
    long long v44 = v88[0];
    uint64_t v45 = *(void *)(a2 + 16);
    int64_t v84 = v25;
    unint64_t v83 = v27;
    uint64_t v78 = *(void *)&v88[0];
    if (v45)
    {
      swift_bridgeObjectRetain();
      unint64_t v46 = sub_100016D20(v44, *((uint64_t *)&v44 + 1));
      if (v47)
      {
        unint64_t v48 = *(void *)(a2 + 56) + *(void *)(v70 + 72) * v46;
        uint64_t v49 = v89;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v70 + 16))(v89, v48, v6);
        uint64_t v50 = v49;
        uint64_t v51 = 0;
      }
      else
      {
        uint64_t v50 = v89;
        uint64_t v51 = 1;
      }
      v43(v50, v51, 1, v6);
      swift_bridgeObjectRelease();
    }
    else
    {
      v43(v89, 1, 1, v6);
    }
    uint64_t v52 = v86;
    uint64_t v53 = v86 + *(int *)(v80 + 48);
    uint64_t v54 = v87;
    sub_100017238(v87, v86, &qword_10065BCD0);
    sub_100017238(v89, v53, &qword_10065BCD0);
    uint64_t v55 = *v79;
    if ((*v79)(v52, 1, v6) == 1)
    {
      sub_10001729C(v89, &qword_10065BCD0);
      sub_10001729C(v54, &qword_10065BCD0);
      if (v55(v53, 1, v6) == 1)
      {
        sub_10001729C(v86, &qword_10065BCD0);
LABEL_41:
        swift_release();
        uint64_t v62 = sub_1000172F8((uint64_t *)&unk_100663D80);
        uint64_t v63 = v67;
        uint64_t v64 = v67 + *(int *)(v62 + 48);
        swift_bridgeObjectRetain();
        sub_10027CD2C(v88);
        *(void *)uint64_t v63 = v78;
        *(void *)(v63 + 8) = *((void *)&v44 + 1);
        *(unsigned char *)(v63 + 16) = 1;
        sub_1002B2F18(v66, v64, type metadata accessor for MediaAPIApp);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v63, 0, 1, v62);
      }
      goto LABEL_5;
    }
    uint64_t v56 = v89;
    uint64_t v57 = v73;
    sub_100017238(v86, v73, &qword_10065BCD0);
    if (v55(v53, 1, v6) == 1)
    {
      sub_10001729C(v56, &qword_10065BCD0);
      sub_10001729C(v87, &qword_10065BCD0);
      (*v72)(v57, v6);
LABEL_5:
      sub_10001729C(v86, &qword_10065EA40);
      goto LABEL_6;
    }
    uint64_t v58 = v68;
    v42((uint64_t)v68, (char *)v53, v6);
    sub_100013B4C((unint64_t *)&qword_10065E048, (void (*)(uint64_t))&type metadata accessor for Platform);
    int v71 = dispatch thunk of static Equatable.== infix(_:_:)();
    long long v59 = *v72;
    uint64_t v60 = v86;
    (*v72)((uint64_t)v58, v6);
    sub_10001729C(v56, &qword_10065BCD0);
    sub_10001729C(v87, &qword_10065BCD0);
    v59(v57, v6);
    sub_10001729C(v60, &qword_10065BCD0);
    if (v71) {
      goto LABEL_41;
    }
LABEL_6:
    uint64_t result = (uint64_t)sub_10027CD2C(v88);
    a2 = v77;
    unint64_t v23 = v76;
    int64_t v25 = v84;
    unint64_t v22 = v83;
  }
  int64_t v32 = v30 + 3;
  if (v32 >= v75)
  {
LABEL_39:
    swift_release();
    uint64_t v61 = sub_1000172F8((uint64_t *)&unk_100663D80);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v67, 1, 1, v61);
  }
  unint64_t v31 = *(void *)(v74 + 8 * v32);
  if (v31)
  {
    int64_t v25 = v32;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v25 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v25 >= v75) {
      goto LABEL_39;
    }
    unint64_t v31 = *(void *)(v74 + 8 * v25);
    ++v32;
    if (v31) {
      goto LABEL_22;
    }
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_1002A8E9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = v5;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_1002AD81C;
  *(void *)(v8 + 24) = v7;
  uint64_t v9 = *(void *)(v2 + *(int *)(type metadata accessor for MediaAPIApp(0) + 24) + 8);
  if (v9)
  {
    uint64_t v10 = (_OWORD *)swift_allocObject();
    long long v11 = *(_OWORD *)(a1 + 80);
    v10[5] = *(_OWORD *)(a1 + 64);
    v10[6] = v11;
    *(_OWORD *)((char *)v10 + 111) = *(_OWORD *)(a1 + 95);
    long long v12 = *(_OWORD *)(a1 + 16);
    v10[1] = *(_OWORD *)a1;
    _OWORD v10[2] = v12;
    long long v13 = *(_OWORD *)(a1 + 48);
    v10[3] = *(_OWORD *)(a1 + 32);
    v10[4] = v13;
    v20[0] = v9;
    v20[1] = (uint64_t)sub_1002A9108;
    _OWORD v20[2] = 0;
    v20[3] = (uint64_t)sub_1002AD978;
    v20[4] = (uint64_t)v10;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_10018AB28(a1);
    sub_1002A4F68(v20, (uint64_t (*)(long long *, void *))sub_1002AD8B4, &v18);
    swift_release();
    swift_bridgeObjectRelease();
    if (v19)
    {
      sub_10018B054(v18, v19);
      id v14 = [self bytes];
      sub_10018B1DC(0, (unint64_t *)&qword_10065B540);
      Measurement.init(value:unit:)();
      uint64_t v15 = sub_1000172F8(&qword_10065BCE8);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a2, 0, 1, v15);
      goto LABEL_6;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v16 = sub_1000172F8(&qword_10065BCE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a2, 1, 1, v16);
LABEL_6:

  return swift_release();
}

uint64_t sub_1002A9108@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  *(void *)a2 = *a1;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1002A912C(uint64_t a1)
{
  uint64_t v2 = (void *)sub_10044C1B4((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (2)
  {
    if (v6)
    {
LABEL_5:
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_20;
    }
    while (1)
    {
      int64_t v11 = v8 + 1;
      if (__OFADD__(v8, 1))
      {
        __break(1u);
        goto LABEL_37;
      }
      if (v11 >= v7) {
        goto LABEL_35;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v11);
      ++v8;
      if (!v12)
      {
        int64_t v8 = v11 + 1;
        if (v11 + 1 >= v7) {
          goto LABEL_35;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 2;
          if (v11 + 2 >= v7) {
            goto LABEL_35;
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          if (!v12)
          {
            int64_t v13 = v11 + 3;
            if (v13 >= v7)
            {
LABEL_35:
              swift_release();
              return (uint64_t)v2;
            }
            unint64_t v12 = *(void *)(v3 + 8 * v13);
            if (!v12)
            {
              while (1)
              {
                int64_t v8 = v13 + 1;
                if (__OFADD__(v13, 1)) {
                  break;
                }
                if (v8 >= v7) {
                  goto LABEL_35;
                }
                unint64_t v12 = *(void *)(v3 + 8 * v8);
                ++v13;
                if (v12) {
                  goto LABEL_19;
                }
              }
LABEL_37:
              __break(1u);
LABEL_38:
              __break(1u);
              goto LABEL_39;
            }
            int64_t v8 = v13;
          }
        }
      }
LABEL_19:
      unint64_t v6 = (v12 - 1) & v12;
      unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_20:
      uint64_t v14 = *(void *)(a1 + 48) + 24 * v10;
      uint64_t v15 = *(void *)v14;
      if ((*(unsigned char *)(v14 + 16) & 1) == 0) {
        break;
      }
      sub_1001C3ED0(*(void *)v14, *(void *)(v14 + 8), 1);
      swift_bridgeObjectRelease();
      if (v6) {
        goto LABEL_5;
      }
    }
    uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8 * v10);
    sub_1001C3ED0(v15, *(void *)(v14 + 8), 0);
    uint64_t v32 = v16;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v19 = sub_10045264C(v15);
    uint64_t v20 = v2[2];
    BOOL v21 = (v18 & 1) == 0;
    uint64_t v22 = v20 + v21;
    if (__OFADD__(v20, v21)) {
      goto LABEL_38;
    }
    char v23 = v18;
    if (v2[3] >= v22)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v26 = v32;
        if ((v18 & 1) == 0) {
          break;
        }
      }
      else
      {
        sub_10052C250();
        uint64_t v26 = v32;
        if ((v23 & 1) == 0) {
          break;
        }
      }
      goto LABEL_30;
    }
    sub_1005247F0(v22, isUniquelyReferenced_nonNull_native);
    uint64_t v24 = sub_10045264C(v15);
    if ((v23 & 1) != (v25 & 1)) {
      goto LABEL_40;
    }
    unint64_t v19 = v24;
    uint64_t v26 = v32;
    if (v23)
    {
LABEL_30:
      uint64_t v27 = v2[7];
      swift_bridgeObjectRelease();
      *(void *)(v27 + 8 * v19) = v26;
LABEL_34:
      swift_bridgeObjectRelease();
      continue;
    }
    break;
  }
  v2[(v19 >> 6) + 8] |= 1 << v19;
  *(unsigned char *)(v2[6] + v19) = v15;
  *(void *)(v2[7] + 8 * v19) = v26;
  uint64_t v28 = v2[2];
  BOOL v29 = __OFADD__(v28, 1);
  uint64_t v30 = v28 + 1;
  if (!v29)
  {
    v2[2] = v30;
    goto LABEL_34;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1002A93E8(uint64_t a1, uint64_t a2)
{
  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

void *sub_1002A9460(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a3;
  type metadata accessor for MediaAPIResponse.CodingKeys();
  swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v12 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v7 = (char *)&v11 - v6;
  int64_t v8 = sub_10018AC60(a1, a1[3]);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v3)
  {
    uint64_t v9 = v12;
    type metadata accessor for Array();
    uint64_t v14 = v13;
    swift_getWitnessTable();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v5);
    int64_t v8 = v15;
  }
  sub_100014524((uint64_t)a1);
  return v8;
}

uint64_t sub_1002A9650()
{
  return 1635017060;
}

uint64_t sub_1002A9660@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002A93E8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1002A9694@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1001CDE08();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1002A96C4(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_1002A9718(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

void *sub_1002A976C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_1002A9460(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t sub_1002A97A0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10051DC60(*a1, *a2);
}

Swift::Int sub_1002A97AC()
{
  return Hasher._finalize()();
}

uint64_t sub_1002A9844()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1002A98C8()
{
  return Hasher._finalize()();
}

unint64_t sub_1002A995C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1002B110C(*a1);
  *a2 = result;
  return result;
}

void sub_1002A998C(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE300000000000000;
  unint64_t v4 = 0xE300000000000000;
  uint64_t v5 = 7565161;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6F7674656C707061;
    unint64_t v4 = 0xE900000000000073;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 7893871;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1002A99E0()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1002A9A40(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1002B4BB4();

  return RawRepresentable<>.codingKey.getter(a1, a2, v4);
}

uint64_t sub_1002A9A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = sub_1002B4BB4();

  return RawRepresentable<>.init<A>(codingKey:)(a1, a4, a2, a5, v10, a3);
}

uint64_t sub_1002A9B10()
{
  unint64_t v1 = 0x4E657361656C6572;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000010;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x446E6F6973726576;
  }
}

uint64_t sub_1002A9B84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002B1158(a1, a2);
  *a3 = result;
  return result;
}

void sub_1002A9BAC(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1002A9BB8(uint64_t a1)
{
  unint64_t v2 = sub_1002B4A64();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002A9BF4(uint64_t a1)
{
  unint64_t v2 = sub_1002B4A64();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1002A9C30@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1002B12E8(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1002A9C74(char a1)
{
  uint64_t result = 6513005;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x5F6F725064617069;
      break;
    case 2:
      uint64_t result = 0x6F725064617069;
      break;
    case 3:
      uint64_t result = 0x31315F64617069;
      break;
    case 4:
      uint64_t result = 0x5F30315F64617069;
      break;
    case 5:
      uint64_t result = 1684107369;
      break;
    case 6:
      uint64_t result = 0x656E6F687069;
      break;
    case 7:
      uint64_t result = 0x35656E6F687069;
      break;
    case 8:
      uint64_t result = 0x36656E6F687069;
      break;
    case 9:
      uint64_t result = 0x2B36656E6F687069;
      break;
    case 10:
      uint64_t result = 0x355F656E6F687069;
      break;
    case 11:
      uint64_t result = 0x365F656E6F687069;
      break;
    case 12:
      uint64_t result = 0x645F656E6F687069;
      break;
    case 13:
      uint64_t result = 0x645F656E6F687069;
      break;
    case 14:
    case 15:
    case 17:
    case 18:
      uint64_t result = 0x746157656C707061;
      break;
    case 16:
      uint64_t result = 0x5654656C707061;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1002A9EB8(char a1)
{
  unint64_t result = 0x6449656C646E7562;
  switch(a1)
  {
    case 1:
    case 2:
    case 7:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0x7470697263736564;
      break;
    case 5:
      unint64_t result = 0x73726566666FLL;
      break;
    case 6:
      unint64_t result = 0x6B726F77747261;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1002A9FB4()
{
  if (*v0) {
    return 0x647261646E617473;
  }
  else {
    return 0x74726F6873;
  }
}

uint64_t sub_1002A9FEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002B1580(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002AA014(uint64_t a1)
{
  unint64_t v2 = sub_1002B2B60();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002AA050(uint64_t a1)
{
  unint64_t v2 = sub_1002B2B60();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002AA08C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1002B166C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1002AA0BC(char *a1, char *a2)
{
  return sub_10051DD64(*a1, *a2);
}

Swift::Int sub_1002AA0C8()
{
  return Hasher._finalize()();
}

uint64_t sub_1002AA140()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1002AA1A4()
{
  return Hasher._finalize()();
}

uint64_t sub_1002AA218@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006385E8, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_1002AA278(uint64_t *a1@<X8>)
{
  uint64_t v2 = 7628135;
  if (*v1) {
    uint64_t v2 = 0x657461647075;
  }
  unint64_t v3 = 0xE300000000000000;
  if (*v1) {
    unint64_t v3 = 0xE600000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1002AA2AC()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1002AA30C()
{
  if (*v0) {
    return 1701869940;
  }
  else {
    return 0x6D61726150797562;
  }
}

uint64_t sub_1002AA344@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002B1850(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002AA36C(uint64_t a1)
{
  unint64_t v2 = sub_1002B4B0C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002AA3A8(uint64_t a1)
{
  unint64_t v2 = sub_1002B4B0C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002AA3E4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1002B1940(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6 & 1;
  }
  return result;
}

uint64_t sub_1002AA418()
{
  return 6775156;
}

uint64_t sub_1002AA428@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 6775156 && a2 == 0xE300000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1002AA4B0(uint64_t a1)
{
  unint64_t v2 = sub_1002B4AB8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002AA4EC(uint64_t a1)
{
  unint64_t v2 = sub_1002B4AB8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002AA528@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1002AB418(a1, &qword_10065EED8, (void (*)(void))sub_1002B4AB8, a2);
}

uint64_t sub_1002AA564()
{
  uint64_t v1 = 0x746867696568;
  if (*v0 != 1) {
    uint64_t v1 = 0x6874646977;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 7107189;
  }
}

uint64_t sub_1002AA5B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002B1B48(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002AA5D8(uint64_t a1)
{
  unint64_t v2 = sub_1002B1E9C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002AA614(uint64_t a1)
{
  unint64_t v2 = sub_1002B1E9C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002AA650@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1002B1C80(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1002AA680(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1002AB71C(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_1002A9C74);
}

Swift::Int sub_1002AA698(uint64_t a1, uint64_t a2)
{
  return sub_1002AB7CC(a1, a2, (void (*)(uint64_t))sub_1002A9C74);
}

uint64_t sub_1002AA6B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002AB850(a1, a2, a3, (void (*)(void))sub_1002A9C74);
}

Swift::Int sub_1002AA6C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002AB8C0(a1, a2, a3, (void (*)(uint64_t))sub_1002A9C74);
}

uint64_t sub_1002AA6E0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1002B1EF0();
  *a1 = result;
  return result;
}

uint64_t sub_1002AA710@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1002A9C74(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1002AA73C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1002AA79C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1002B2BB4();

  return RawRepresentable<>.codingKey.getter(a1, a2, v4);
}

uint64_t sub_1002AA7F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = sub_1002B2BB4();

  return RawRepresentable<>.init<A>(codingKey:)(a1, a4, a2, a5, v10, a3);
}

uint64_t sub_1002AA86C(unsigned __int8 *a1, char *a2)
{
  return sub_10051DE00(*a1, *a2);
}

Swift::Int sub_1002AA878()
{
  return sub_10044A884();
}

uint64_t sub_1002AA884()
{
  return sub_10044A1A4();
}

Swift::Int sub_1002AA88C()
{
  return sub_10044A884();
}

unint64_t sub_1002AA894@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1002B1F44(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1002AA8C4@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1002A67F0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1002AA8F0()
{
  return sub_1002A9EB8(*v0);
}

unint64_t sub_1002AA8F8@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1002B1F44(a1);
  *a2 = result;
  return result;
}

void sub_1002AA920(void *a1@<X8>)
{
  *a1 = &off_100638558;
}

uint64_t sub_1002AA930(uint64_t a1)
{
  unint64_t v2 = sub_1002B28A4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002AA96C(uint64_t a1)
{
  unint64_t v2 = sub_1002B28A4();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1002AA9A8@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1002B1F90(a1, v10);
  if (!v2)
  {
    long long v5 = v10[7];
    a2[6] = v10[6];
    a2[7] = v5;
    long long v6 = v10[9];
    a2[8] = v10[8];
    a2[9] = v6;
    long long v7 = v10[3];
    a2[2] = v10[2];
    a2[3] = v7;
    long long v8 = v10[5];
    a2[4] = v10[4];
    a2[5] = v8;
    double result = *(double *)v10;
    long long v9 = v10[1];
    *a2 = v10[0];
    a2[1] = v9;
  }
  return result;
}

uint64_t sub_1002AAA04()
{
  if (*v0) {
    return 0xD000000000000011;
  }
  else {
    return 0x6146656369766564;
  }
}

uint64_t sub_1002AAA4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002B3090(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002AAA74(uint64_t a1)
{
  unint64_t v2 = sub_1002B4C08();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002AAAB0(uint64_t a1)
{
  unint64_t v2 = sub_1002B4C08();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002AAAEC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1002B3198(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

unint64_t sub_1002AAB1C(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
    case 9:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 1701667182;
      break;
    case 3:
      unint64_t result = 0x656C746974627573;
      break;
    case 4:
      unint64_t result = 0x614E747369747261;
      break;
    case 5:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 6:
      unint64_t result = 0xD000000000000016;
      break;
    case 7:
      unint64_t result = 0x6867697279706F63;
      break;
    case 8:
      unint64_t result = 0x616C7545736168;
      break;
    case 10:
      unint64_t result = 0x5565746973626577;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1002AAC74@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v3 = sub_1000172F8(&qword_10065C3C0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v28 = (uint64_t)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v27 - v6;
  uint64_t v8 = sub_1000172F8(&qword_10065ECF8);
  uint64_t v29 = *(void *)(v8 - 8);
  uint64_t v30 = v8;
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for MediaAPIApp.Attributes(0);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 8) = 0;
  *((void *)v14 + 4) = 0;
  *((void *)v14 + 5) = 0;
  *((void *)v14 + 11) = 0;
  *((void *)v14 + 12) = 0;
  uint64_t v15 = (uint64_t)&v14[*(int *)(v12 + 60)];
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v34 = v15;
  v17(v15, 1, 1, v16);
  uint64_t v18 = (uint64_t)&v14[*(int *)(v12 + 64)];
  v17(v18, 1, 1, v16);
  uint64_t v19 = a1[3];
  uint64_t v32 = a1;
  sub_10018AC60(a1, v19);
  sub_1002B2C08();
  unint64_t v31 = v10;
  uint64_t v20 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20)
  {
    sub_100014524((uint64_t)v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001729C(v34, &qword_10065C3C0);
    return sub_10001729C(v18, &qword_10065C3C0);
  }
  else
  {
    uint64_t v33 = v16;
    uint64_t v21 = v29;
    sub_1000172F8(&qword_10065ED08);
    char v36 = 0;
    sub_1002B2C5C();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)uint64_t v14 = v35;
    sub_1000172F8(&qword_10065ED28);
    char v36 = 1;
    sub_1002B2D80();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *((void *)v14 + 1) = v35;
    LOBYTE(v35) = 2;
    *((void *)v14 + 2) = KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v14 + 3) = v22;
    LOBYTE(v35) = 3;
    *((void *)v14 + 4) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *((void *)v14 + 5) = v23;
    LOBYTE(v35) = 4;
    *((void *)v14 + 6) = KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v14 + 7) = v24;
    sub_1000172F8(&qword_10065ED38);
    char v36 = 5;
    sub_1002B2DF4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *((void *)v14 + 8) = v35;
    char v36 = 6;
    sub_1002B2EC4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)(v14 + 72) = v35;
    LOBYTE(v35) = 7;
    *((void *)v14 + 11) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *((void *)v14 + 12) = v25;
    LOBYTE(v35) = 8;
    v14[104] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v35) = 9;
    sub_100013B4C(&qword_10065CFD8, (void (*)(uint64_t))&type metadata accessor for URL);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_10027ED88((uint64_t)v7, v34);
    LOBYTE(v35) = 10;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v31, v30);
    sub_10027ED88(v28, v18);
    sub_1002B2F18((uint64_t)v14, v27, type metadata accessor for MediaAPIApp.Attributes);
    sub_100014524((uint64_t)v32);
    return sub_1002AD9C8((uint64_t)v14, type metadata accessor for MediaAPIApp.Attributes);
  }
}

uint64_t sub_1002AB350()
{
  return 1701667182;
}

uint64_t sub_1002AB364(uint64_t a1)
{
  unint64_t v2 = sub_1002B57C4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002AB3A0(uint64_t a1)
{
  unint64_t v2 = sub_1002B57C4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002AB3DC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1002AB418(a1, &qword_10065EFF8, (void (*)(void))sub_1002B57C4, a2);
}

uint64_t sub_1002AB418@<X0>(void *a1@<X0>, uint64_t *a2@<X3>, void (*a3)(void)@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v18 = a4;
  uint64_t v7 = sub_1000172F8(a2);
  uint64_t v17 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v4) {
    return sub_100014524((uint64_t)a1);
  }
  uint64_t v10 = v17;
  uint64_t v11 = v18;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v7);
  uint64_t result = sub_100014524((uint64_t)a1);
  *uint64_t v11 = v12;
  v11[1] = v14;
  return result;
}

uint64_t sub_1002AB5A0()
{
  return 0x6C70704173707061;
}

uint64_t sub_1002AB5BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6C70704173707061 && a2 == 0xE900000000000065)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1002AB660(uint64_t a1)
{
  unint64_t v2 = sub_1002B4C5C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002AB69C(uint64_t a1)
{
  unint64_t v2 = sub_1002B4C5C();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1002AB6D8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1002B33A0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1002AB704(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1002AB71C(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_1002A4C9C);
}

uint64_t sub_1002AB71C(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = *a2;
  uint64_t v7 = a5(*a1);
  uint64_t v9 = v8;
  if (v7 == a5(v6) && v9 == v10) {
    char v12 = 1;
  }
  else {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

Swift::Int sub_1002AB7B4(uint64_t a1, uint64_t a2)
{
  return sub_1002AB7CC(a1, a2, (void (*)(uint64_t))sub_1002A4C9C);
}

Swift::Int sub_1002AB7CC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)();
  a3(v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1002AB838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002AB850(a1, a2, a3, (void (*)(void))sub_1002A4C9C);
}

uint64_t sub_1002AB850(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4(*v4);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1002AB8A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002AB8C0(a1, a2, a3, (void (*)(uint64_t))sub_1002A4C9C);
}

Swift::Int sub_1002AB8C0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)();
  a4(v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_1002AB928@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1002B3510(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1002AB958@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1002A4C9C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1002AB984()
{
  return sub_1002AAB1C(*v0);
}

unint64_t sub_1002AB98C@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1002B3510(a1);
  *a2 = result;
  return result;
}

void sub_1002AB9B4(unsigned char *a1@<X8>)
{
  *a1 = 11;
}

void sub_1002AB9C0(void *a1@<X8>)
{
  *a1 = &off_100638528;
}

uint64_t sub_1002AB9D0(uint64_t a1)
{
  unint64_t v2 = sub_1002B2C08();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002ABA0C(uint64_t a1)
{
  unint64_t v2 = sub_1002B2C08();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002ABA48@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002AAC74(a1, a2);
}

uint64_t sub_1002ABA60@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v3 = type metadata accessor for MediaAPIApp.Attributes(0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000172F8(&qword_10065ED58);
  uint64_t v22 = *(void *)(v6 - 8);
  uint64_t v23 = v6;
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for MediaAPIApp(0);
  uint64_t v24 = *(int *)(__chkstk_darwin(v7) + 28);
  uint64_t v26 = (uint64_t *)((char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(uint64_t *)((char *)v26 + v24) = 1;
  sub_10018AC60(a1, a1[3]);
  sub_1002B2F80();
  uint64_t v9 = (uint64_t)v25;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v9)
  {
    sub_100014524((uint64_t)a1);
    return sub_1002AD7D4(*(uint64_t *)((char *)v26 + v24));
  }
  else
  {
    uint64_t v25 = a1;
    uint64_t v20 = v3;
    uint64_t v10 = (uint64_t)v5;
    uint64_t v11 = v22;
    uint64_t v12 = v23;
    char v31 = 0;
    uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v14 = v26;
    *uint64_t v26 = v13;
    v14[1] = v15;
    char v30 = 1;
    v14[2] = KeyedDecodingContainer.decode(_:forKey:)();
    v14[3] = v16;
    char v29 = 2;
    sub_100013B4C(&qword_10065ED68, (void (*)(uint64_t))type metadata accessor for MediaAPIApp.Attributes);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_1002B2FD4(v10, (uint64_t)v14 + *(int *)(v7 + 24), type metadata accessor for MediaAPIApp.Attributes);
    char v28 = 3;
    sub_1002B303C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(void, uint64_t))(v11 + 8))(0, v12);
    uint64_t v17 = v27;
    uint64_t v18 = v24;
    sub_1002AD7D4(*(uint64_t *)((char *)v14 + v24));
    *(uint64_t *)((char *)v14 + v18) = v17;
    sub_1002B2F18((uint64_t)v14, v21, type metadata accessor for MediaAPIApp);
    sub_100014524((uint64_t)v25);
    return sub_1002AD9C8((uint64_t)v14, type metadata accessor for MediaAPIApp);
  }
}

uint64_t sub_1002ABE8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1002ABF14(uint64_t a1)
{
  unint64_t v2 = sub_1002B5B00();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002ABF50(uint64_t a1)
{
  unint64_t v2 = sub_1002B5B00();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002ABF8C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1002AB418(a1, &qword_10065F050, (void (*)(void))sub_1002B5B00, a2);
}

uint64_t sub_1002ABFC8()
{
  return 0x7475626972747461;
}

uint64_t sub_1002ABFE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x7475626972747461 && a2 == 0xEA00000000007365)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1002AC088(uint64_t a1)
{
  unint64_t v2 = sub_1002B5818();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002AC0C4(uint64_t a1)
{
  unint64_t v2 = sub_1002B5818();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1002AC100@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1002B355C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1002AC12C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1002AC1B4(uint64_t a1)
{
  unint64_t v2 = sub_1002B4D50();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002AC1F0(uint64_t a1)
{
  unint64_t v2 = sub_1002B4D50();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1002AC22C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1002B36CC(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1002AC258()
{
  return 0x7365726E6567;
}

uint64_t sub_1002AC26C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x7365726E6567 && a2 == 0xE600000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1002AC2FC(uint64_t a1)
{
  unint64_t v2 = sub_1002B39D4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002AC338(uint64_t a1)
{
  unint64_t v2 = sub_1002B39D4();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1002AC374@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1002B3868(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1002AC3A0(char *a1, char *a2)
{
  return sub_10051DAD4(*a1, *a2);
}

Swift::Int sub_1002AC3AC()
{
  return Hasher._finalize()();
}

uint64_t sub_1002AC484()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1002AC544()
{
  return Hasher._finalize()();
}

unint64_t sub_1002AC618@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1002B4D04(*a1);
  *a2 = result;
  return result;
}

void sub_1002AC648(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE200000000000000;
  uint64_t v3 = 25705;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v3 = 1717924456;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x7475626972747461;
      *(void *)(a1 + 8) = 0xEA00000000007365;
      break;
    case 3:
      strcpy((char *)a1, "relationships");
      *(_WORD *)(a1 + 14) = -4864;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

uint64_t sub_1002AC6E0()
{
  uint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1717924456;
      break;
    case 2:
      uint64_t result = 0x7475626972747461;
      break;
    case 3:
      uint64_t result = 0x6E6F6974616C6572;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1002AC76C@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1002B4D04(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1002AC794(uint64_t a1)
{
  unint64_t v2 = sub_1002B2F80();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002AC7D0(uint64_t a1)
{
  unint64_t v2 = sub_1002B2F80();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002AC80C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002ABA60(a1, a2);
}

uint64_t sub_1002AC824(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (*a1 == a3 && a1[1] == a4)
  {
    BOOL v12 = *a2 == a3 && a2[1] == a4;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return 1;
    }
    goto LABEL_19;
  }
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (*a2 == a3 && a2[1] == a4)
  {
    if (v9) {
      goto LABEL_19;
    }
    return 0;
  }
  char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((v9 & 1) == 0)
  {
    if ((v11 & 1) == 0) {
      goto LABEL_19;
    }
    return 0;
  }
  if ((v11 & 1) == 0) {
    return 1;
  }
LABEL_19:
  sub_10001733C((uint64_t)(a1 + 2), (uint64_t)v19, &qword_10065B648);
  sub_10001733C((uint64_t)v19, (uint64_t)v20, &qword_10065B648);
  if (!v20[4]) {
    return 1;
  }
  uint64_t v13 = v20[0];
  uint64_t v14 = v20[1];
  uint64_t v15 = v20[2];
  sub_10001733C((uint64_t)(a2 + 2), (uint64_t)v18, &qword_10065B648);
  sub_10001733C((uint64_t)v18, (uint64_t)&v21, &qword_10065B648);
  if (!v24) {
    return 1;
  }
  BOOL v16 = v22 < v14;
  if (v22 == v14) {
    BOOL v16 = v23 < v15;
  }
  if (v21 == v13) {
    return v16;
  }
  else {
    return v21 < v13;
  }
}

id sub_1002AC990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v8 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = [v8 initWithType:a1 clientIdentifier:v9 clientVersion:v10 bag:a6];

  swift_unknownObjectRelease();
  return v11;
}

uint64_t sub_1002ACA54(char *a1)
{
  uint64_t v2 = type metadata accessor for Platform();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  id v8 = (char *)&v16 - v7;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))((char *)&v16 - v7, a1, v2);
  static Platform.macOS.getter();
  sub_100013B4C((unint64_t *)&qword_10065E048, (void (*)(uint64_t))&type metadata accessor for Platform);
  char v9 = dispatch thunk of static Equatable.== infix(_:_:)();
  NSString v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v6, v2);
  if (v9)
  {
    uint64_t v11 = 0;
LABEL_8:
    v10(a1, v2);
    v10(v8, v2);
    return v11;
  }
  static Platform.iOS.getter();
  char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
  v10(v6, v2);
  if (v12) {
    goto LABEL_7;
  }
  static Platform.tvOS.getter();
  char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
  v10(v6, v2);
  if (v13)
  {
    uint64_t v11 = 2;
    goto LABEL_8;
  }
  static Platform.watchOS.getter();
  char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
  v10(v6, v2);
  if (v14)
  {
LABEL_7:
    uint64_t v11 = 1;
    goto LABEL_8;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for MediaAPIApp(uint64_t a1)
{
  return sub_10019B200(a1, qword_10065EC00);
}

size_t sub_1002ACD08(size_t result, uint64_t a2, unint64_t a3)
{
  int64_t v3 = a3 >> 1;
  size_t v4 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2)) {
    goto LABEL_11;
  }
  size_t v6 = result;
  if (v4)
  {
    sub_1000172F8(&qword_10065E6B0);
    uint64_t v7 = (void *)swift_allocObject();
    uint64_t result = j__malloc_size(v7);
    _OWORD v7[2] = v4;
    _OWORD v7[3] = 2 * result - 64;
    if (v3 >= a2) {
      goto LABEL_4;
    }
    goto LABEL_10;
  }
  uint64_t v7 = _swiftEmptyArrayStorage;
  if (v3 < a2)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
LABEL_4:
  uint64_t result = (size_t)memcpy(v7 + 4, (const void *)(v6 + a2), v4);
  if (__OFSUB__(0, a2))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v8 = v7[2];
  BOOL v9 = __OFADD__(a2, v8);
  uint64_t v10 = a2 + v8;
  if (v9)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v10 < a2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((v10 & 0x8000000000000000) == 0) {
    return (size_t)v7;
  }
LABEL_15:
  __break(1u);
  return result;
}

void *sub_1002ACDF0(uint64_t a1, int32x2_t *a2)
{
  uint64_t v4 = type metadata accessor for Platform();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000172F8(&qword_10065E9E0);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v57 = a2[13].u8[4];
  uint64_t v12 = *(int *)(v9 + 56);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v11, a1, v4);
  v11[v12] = v57;
  static Platform.macOS.getter();
  sub_100013B4C((unint64_t *)&qword_10065E048, (void (*)(uint64_t))&type metadata accessor for Platform);
  LOBYTE(a1) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  unint64_t v13 = v5 + 8;
  char v14 = v15;
  v15(v7, v4);
  if ((a1 & 1) == 0)
  {
    static Platform.watchOS.getter();
    char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    v14(v7, v4);
    if (v17)
    {
      v14(v11, v4);
      return &off_100636DD0;
    }
    static Platform.tvOS.getter();
    char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    v14(v7, v4);
    if (v18)
    {
      v14(v11, v4);
      return &off_100636DF8;
    }
    int v19 = v57;
    static Platform.iOS.getter();
    char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
    v14(v7, v4);
    if (v19 == 1)
    {
      if (v20)
      {
        __int32 v23 = a2[12].i32[0];
        int v22 = a2[12].i32[1];
        v21.n128_u32[0] = a2[13].u32[0];
        if (v23 == 1024 && v21.n128_f32[0] == 0.0 && v22 == 1366
          || v23 == 1366 && v21.n128_f32[0] == 0.0 && v22 == 1024)
        {
          v14(v11, v4);
          return &off_100636E20;
        }
        BOOL v33 = v23 == 1366 && v22 == 1024;
        BOOL v34 = v22 == 1366 && v23 == 1024;
        if (v34 || v33)
        {
          ((void (*)(char *, uint64_t, __n128))v14)(v11, v4, v21);
          return &off_100636E48;
        }
        if (v23 == 834 && v22 == 1194)
        {
LABEL_38:
          ((void (*)(char *, uint64_t, __n128))v14)(v11, v4, v21);
          return &off_100636E70;
        }
        switch(v23)
        {
          case 744:
            if (v22 == 1133) {
              goto LABEL_38;
            }
            goto LABEL_99;
          case 1133:
            if (v22 == 744) {
              goto LABEL_38;
            }
            goto LABEL_99;
          case 1194:
            if (v22 == 834) {
              goto LABEL_38;
            }
LABEL_99:
            ((void (*)(char *, uint64_t, __n128))v14)(v11, v4, v21);
            return &off_100636F10;
        }
        if (v23 == 834 && v22 == 1112)
        {
          ((void (*)(char *, uint64_t, __n128))v14)(v11, v4, v21);
          return &off_100636E98;
        }
        if (v23 != 810)
        {
          if (v23 == 820 && v22 == 1180)
          {
            ((void (*)(char *, uint64_t, __n128))v14)(v11, v4, v21);
            return &off_100636EC0;
          }
          goto LABEL_99;
        }
LABEL_97:
        if (v22 == 1080)
        {
          v14(v11, v4);
          return &off_100636EE8;
        }
        goto LABEL_99;
      }
LABEL_24:
      sub_10001729C((uint64_t)v11, &qword_10065E9E0);
      return _swiftEmptyArrayStorage;
    }
    if ((v20 & 1) == 0) {
      goto LABEL_24;
    }
    uint64_t v24 = &off_100636D80;
    uint64_t v56 = &off_100636D80;
    uint64_t v25 = 0;
    int32x2_t v26 = a2[12];
    while (1)
    {
      uint64_t v27 = v24;
      uint64_t v28 = (uint64_t)*(&off_10063F9D0 + *((char *)v24 + v25 + 32));
      uint64_t v29 = *(void *)(v28 + 16);
      if (v29) {
        break;
      }
LABEL_18:
      swift_bridgeObjectRelease();
      ++v25;
      uint64_t v24 = v27;
      if (v25 == 8)
      {
        uint64_t v25 = 0;
        unint64_t v54 = 0xEA00000000003337;
        unint64_t v55 = 0xEA0000000000355FLL;
        unint64_t v53 = 0xEA00000000003437;
        while (2)
        {
          switch(*((unsigned char *)v27 + v25 + 32))
          {
            case 0xA:
              goto LABEL_46;
            default:
              char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if (v35) {
                goto LABEL_47;
              }
              uint64_t v36 = v25 + 1;
              if (__OFADD__(v25, 1))
              {
                __break(1u);
                goto LABEL_101;
              }
              ++v25;
              if (v36 != 8) {
                continue;
              }
              __break(1u);
              break;
          }
          goto LABEL_46;
        }
      }
    }
    uint64_t v30 = 0;
    while (1)
    {
      int32x2_t v31 = vceq_s32(*(int32x2_t *)(v28 + 8 * v30 + 32), v26);
      if (v31.i32[0] & v31.i32[1]) {
        break;
      }
      if (v29 == ++v30) {
        goto LABEL_18;
      }
    }
LABEL_46:
    swift_bridgeObjectRelease();
LABEL_47:
    int64_t v37 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
LABEL_101:
      __break(1u);
    }
    else if ((v37 & 0x8000000000000000) == 0)
    {
      int v22 = 8;
      if ((unint64_t)v37 <= 8)
      {
        size_t v38 = (size_t)v27;
        unint64_t v39 = (2 * v37) | 1;
        size_t v40 = (size_t)(v27 + 4);
        if ((unint64_t)v37 >= 2)
        {
          unint64_t v53 = (unint64_t)v14;
          unint64_t v54 = v13;
          unint64_t v41 = 0;
          uint64_t v42 = 0;
          int64_t v52 = v37;
          uint64_t v43 = v37 - 1;
          while ((uint64_t)v41 >= v42)
          {
            char v14 = (void (*)(char *, uint64_t))(v39 >> 1);
            if (v41 >= v39 >> 1) {
              break;
            }
            if (v43 < v42 || v43 >= (uint64_t)v14) {
              goto LABEL_94;
            }
            LODWORD(v55) = *(unsigned __int8 *)(v40 + v41);
            char v44 = *(unsigned char *)(v40 + v43);
            if ((v39 & 1) == 0 || (swift_isUniquelyReferenced_nonNull() & 1) == 0)
            {
              size_t v38 = sub_1002ACD08(v40, v42, v39);
              size_t v40 = v45;
              uint64_t v42 = v46;
              unint64_t v39 = v47;
              swift_unknownObjectRelease();
              char v14 = (void (*)(char *, uint64_t))(v39 >> 1);
            }
            if ((uint64_t)v41 < v42 || v41 >= (unint64_t)v14) {
              goto LABEL_95;
            }
            *(unsigned char *)(v40 + v41) = v44;
            if ((v39 & 1) == 0)
            {
              size_t v38 = sub_1002ACD08(v40, v42, v39);
              size_t v40 = v48;
              uint64_t v42 = v49;
              unint64_t v39 = v50;
              swift_unknownObjectRelease();
              char v14 = (void (*)(char *, uint64_t))(v39 >> 1);
            }
            if (v43 < v42 || v43 >= (uint64_t)v14) {
              goto LABEL_96;
            }
            int v22 = v55;
            *(unsigned char *)(v40 + v43) = v55;
            if ((uint64_t)++v41 >= --v43)
            {
              char v14 = (void (*)(char *, uint64_t))v53;
              int64_t v37 = v52;
              goto LABEL_68;
            }
          }
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
          goto LABEL_97;
        }
        uint64_t v42 = 0;
LABEL_68:
        if (v37 <= 8)
        {
          if ((_UNKNOWN *)(v40 + v42) != &unk_100636DA0)
          {
LABEL_70:
            sub_1005535EC(0, v37, v38, v40, v42, v39);
LABEL_71:
            swift_unknownObjectRelease();
            uint64_t v16 = v56;
            v14(v11, v4);
            return v16;
          }
          if ((uint64_t)(v39 >> 1) >= v42)
          {
            if (!v42 && v37 == v39 >> 1) {
              goto LABEL_71;
            }
            goto LABEL_70;
          }
LABEL_105:
          __break(1u);
          __break(1u);
          JUMPOUT(0x1002AD758);
        }
LABEL_104:
        __break(1u);
        goto LABEL_105;
      }
LABEL_103:
      __break(1u);
      goto LABEL_104;
    }
    __break(1u);
    goto LABEL_103;
  }
  v14(v11, v4);
  return &off_100636DA8;
}

uint64_t type metadata accessor for MediaAPIApp.Attributes(uint64_t a1)
{
  return sub_10019B200(a1, qword_10065EB48);
}

uint64_t sub_1002AD7C4(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1002AD7D4(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1002AD7E4()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002AD81C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24);
  long long v5 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v5;
  _OWORD v8[2] = *(_OWORD *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 48);
  long long v6 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v6;
  _OWORD v10[2] = *(_OWORD *)(a2 + 32);
  uint64_t v11 = *(void *)(a2 + 48);
  return sub_1002AC824(v8, v10, v3, v4) & 1;
}

uint64_t sub_1002AD87C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002AD8B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(_OWORD *, _OWORD *))(v2 + 16);
  long long v4 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v4;
  void v9[2] = *(_OWORD *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 48);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  return v3(v9, v7) & 1;
}

uint64_t sub_1002AD920()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 127, 7);
}

uint64_t sub_1002AD978()
{
  return sub_1002A4DF8((void *)(v0 + 16)) & 1;
}

uint64_t sub_1002AD9C8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1002ADA2C(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_1000172F8(&qword_10065BCC0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 176) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = (uint64_t)(v1 + 4);
  uint64_t v9 = v1[21];
  uint64_t v10 = (uint64_t)v1 + v5;
  uint64_t v11 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = sub_1000176B4;
  return sub_1002A70F8(a1, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1002ADB70()
{
  uint64_t v1 = *(void *)(sub_1000172F8(&qword_10065BCC0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 176) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for Locale.Language();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_1002ADCF4(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_1000172F8(&qword_10065BCC0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 176) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = (uint64_t)(v1 + 4);
  uint64_t v9 = v1[21];
  uint64_t v10 = (uint64_t)v1 + v5;
  uint64_t v11 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = sub_10000B238;
  return sub_1002A7D1C(a1, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1002ADE34(uint64_t a1)
{
  return sub_100014524(a1 + 32);
}

void *sub_1002ADE50(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_1000172F8(&qword_10065EA38);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_1000172F8((uint64_t *)&unk_100663D80);
  uint64_t v8 = *(void *)(v27 - 8);
  uint64_t v9 = __chkstk_darwin(v27);
  uint64_t v26 = (uint64_t)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v25 = (uint64_t)v22 - v11;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v13 = *(void *)(type metadata accessor for MediaAPIApp(0) - 8);
  uint64_t v14 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v23 = v8;
  uint64_t v15 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v16 = *(void *)(v13 + 72);
  v22[1] = a1;
  swift_bridgeObjectRetain();
  char v17 = _swiftEmptyArrayStorage;
  uint64_t v24 = a2;
  do
  {
    sub_1002A85D0(v14, a2, (uint64_t)v7);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v17;
    }
    if ((*v15)(v7, 1, v27) == 1)
    {
      sub_10001729C((uint64_t)v7, &qword_10065EA38);
    }
    else
    {
      uint64_t v18 = v25;
      sub_10001733C((uint64_t)v7, v25, (uint64_t *)&unk_100663D80);
      sub_10001733C(v18, v26, (uint64_t *)&unk_100663D80);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v17 = (void *)sub_10029031C(0, v17[2] + 1, 1, (unint64_t)v17);
      }
      unint64_t v20 = v17[2];
      unint64_t v19 = v17[3];
      if (v20 >= v19 >> 1) {
        char v17 = (void *)sub_10029031C(v19 > 1, v20 + 1, 1, (unint64_t)v17);
      }
      v17[2] = v20 + 1;
      sub_10001733C(v26, (uint64_t)v17+ ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))+ *(void *)(v23 + 72) * v20, (uint64_t *)&unk_100663D80);
      a2 = v24;
    }
    v14 += v16;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t type metadata accessor for MediaAPIResponse()
{
  return sub_100259AC0();
}

uint64_t initializeWithCopy for MediaAPIApp.Attributes.PlatformAttributes.Artwork(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MediaAPIApp.Attributes.PlatformAttributes.Artwork(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for MediaAPIApp.Attributes.PlatformAttributes.Artwork(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for MediaAPIApp.Attributes.PlatformAttributes.Artwork()
{
  return &type metadata for MediaAPIApp.Attributes.PlatformAttributes.Artwork;
}

uint64_t destroy for MediaAPIApp.Attributes.PlatformAttributes(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 104))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MediaAPIApp.Attributes.PlatformAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = v9;
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v10;
  }
  uint64_t v11 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v11;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MediaAPIApp.Attributes.PlatformAttributes(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + 10;
  uint64_t v5 = a2 + 10;
  uint64_t v6 = a2[13];
  if (a1[13])
  {
    if (v6)
    {
      a1[10] = a2[10];
      a1[11] = a2[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[12] = a2[12];
      a1[13] = a2[13];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1002AE5B8((uint64_t)(a1 + 10));
      long long v7 = *((_OWORD *)a2 + 6);
      *uint64_t v4 = *v5;
      *((_OWORD *)a1 + 6) = v7;
    }
  }
  else if (v6)
  {
    a1[10] = a2[10];
    a1[11] = a2[11];
    a1[12] = a2[12];
    a1[13] = a2[13];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 6);
    *uint64_t v4 = *v5;
    *((_OWORD *)a1 + 6) = v8;
  }
  a1[14] = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[15] = a2[15];
  a1[16] = a2[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[17] = a2[17];
  a1[18] = a2[18];
  a1[19] = a2[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1002AE5B8(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for MediaAPIApp.Attributes.PlatformAttributes(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for MediaAPIApp.Attributes.PlatformAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  if (!*(void *)(a1 + 104)) {
    goto LABEL_5;
  }
  uint64_t v7 = *(void *)(a2 + 104);
  if (!v7)
  {
    sub_1002AE5B8(a1 + 80);
LABEL_5:
    long long v9 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v9;
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v7;
  swift_bridgeObjectRelease();
LABEL_6:
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v10;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MediaAPIApp.Attributes.PlatformAttributes(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 160)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MediaAPIApp.Attributes.PlatformAttributes(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 160) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 160) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaAPIApp.Attributes.PlatformAttributes()
{
  return &type metadata for MediaAPIApp.Attributes.PlatformAttributes;
}

uint64_t getEnumTagSinglePayload for MediaAPIApp.Attributes.PlatformAttributes.Description(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MediaAPIApp.Attributes.PlatformAttributes.Description(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaAPIApp.Attributes.PlatformAttributes.Description()
{
  return &type metadata for MediaAPIApp.Attributes.PlatformAttributes.Description;
}

uint64_t getEnumTagSinglePayload for MediaAPIApp.Attributes.PlatformAttributes.MediaType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEE) {
    goto LABEL_17;
  }
  if (a2 + 18 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 18) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 18;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x13;
  int v8 = v6 - 19;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MediaAPIApp.Attributes.PlatformAttributes.MediaType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 18 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 18) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xED)
  {
    unsigned int v6 = ((a2 - 238) >> 8) + 1;
    *__n128 result = a2 + 18;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002AE9F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 18;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaAPIApp.Attributes.PlatformAttributes.MediaType()
{
  return &type metadata for MediaAPIApp.Attributes.PlatformAttributes.MediaType;
}

uint64_t sub_1002AEA28(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v6 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v6 = a1;
    uint64_t v7 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v7;
    uint64_t v8 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v8;
    uint64_t v9 = a2[6];
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v9;
    uint64_t v10 = a2[8];
    *(void *)(a1 + 56) = a2[7];
    *(void *)(a1 + 64) = v10;
    uint64_t v11 = a2[10];
    *(void *)(a1 + 72) = a2[9];
    *(void *)(a1 + 80) = v11;
    uint64_t v12 = a2[11];
    uint64_t v13 = a2[12];
    *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
    uint64_t v14 = *(int *)(a3 + 52);
    __dst = (void *)(a1 + v14);
    uint64_t v15 = (char *)a2 + v14;
    *(void *)(a1 + 88) = v12;
    *(void *)(a1 + 96) = v13;
    uint64_t v16 = type metadata accessor for URL();
    uint64_t v25 = *(void *)(v16 - 8);
    char v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v17(v15, 1, v16))
    {
      uint64_t v18 = sub_1000172F8(&qword_10065C3C0);
      memcpy(__dst, v15, *(void *)(*(void *)(v18 - 8) + 64));
      uint64_t v19 = v25;
    }
    else
    {
      uint64_t v19 = v25;
      (*(void (**)(void *, char *, uint64_t))(v25 + 16))(__dst, v15, v16);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(__dst, 0, 1, v16);
    }
    uint64_t v20 = *(int *)(a3 + 56);
    __n128 v21 = (void *)(v6 + v20);
    int v22 = (char *)a2 + v20;
    if (v17(v22, 1, v16))
    {
      uint64_t v23 = sub_1000172F8(&qword_10065C3C0);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v19 + 16))(v21, v22, v16);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v21, 0, 1, v16);
    }
  }
  return v6;
}

uint64_t sub_1002AECD4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 52);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v5 - 8);
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v6(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v4, v5);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 56);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v7, 1, v5);
  if (!result)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
    return v9(v7, v5);
  }
  return result;
}

uint64_t sub_1002AEE34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v10;
  uint64_t v11 = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v12 = *(int *)(a3 + 52);
  __dst = (void *)(a1 + v12);
  uint64_t v13 = (const void *)(a2 + v12);
  *(void *)(a1 + 96) = v11;
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v23 = *(void *)(v14 - 8);
  uint64_t v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v15(v13, 1, v14))
  {
    uint64_t v16 = sub_1000172F8(&qword_10065C3C0);
    memcpy(__dst, v13, *(void *)(*(void *)(v16 - 8) + 64));
    uint64_t v17 = v23;
  }
  else
  {
    uint64_t v17 = v23;
    (*(void (**)(void *, const void *, uint64_t))(v23 + 16))(__dst, v13, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(__dst, 0, 1, v14);
  }
  uint64_t v18 = *(int *)(a3 + 56);
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  if (v15(v20, 1, v14))
  {
    uint64_t v21 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v19, v20, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_1002AF094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v6 = *(int *)(a3 + 52);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 56);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  int v18 = v11((void *)(a1 + v15), 1, v9);
  int v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v16, v17, v9);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v20 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v16, v17, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
  return a1;
}

uint64_t sub_1002AF400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  long long v8 = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v9 = *(int *)(a3 + 52);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  *(_OWORD *)(a1 + 88) = v8;
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
  if (v14(v11, 1, v12))
  {
    uint64_t v15 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  uint64_t v16 = *(int *)(a3 + 56);
  uint64_t v17 = (void *)(a1 + v16);
  int v18 = (const void *)(a2 + v16);
  if (v14(v18, 1, v12))
  {
    uint64_t v19 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v17, v18, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v17, 0, 1, v12);
  }
  return a1;
}

uint64_t sub_1002AF5F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v10;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v11 = *(int *)(a3 + 52);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 32))(v12, v13, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
LABEL_6:
    uint64_t v19 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 40))(v12, v13, v14);
LABEL_7:
  uint64_t v20 = *(int *)(a3 + 56);
  uint64_t v21 = (void *)(a1 + v20);
  int v22 = (void *)(a2 + v20);
  int v23 = v16((void *)(a1 + v20), 1, v14);
  int v24 = v16(v22, 1, v14);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 40))(v21, v22, v14);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v21, v14);
    goto LABEL_12;
  }
  if (v24)
  {
LABEL_12:
    uint64_t v25 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 32))(v21, v22, v14);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v21, 0, 1, v14);
  return a1;
}

uint64_t sub_1002AF8FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002AF910);
}

uint64_t sub_1002AF910(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1000172F8(&qword_10065C3C0);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 52);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1002AF9C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002AF9D8);
}

void *sub_1002AF9D8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_1000172F8(&qword_10065C3C0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 52);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_1002AFA84()
{
  sub_10026B458();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *sub_1002AFB50(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v30 = *(uint64_t *)((char *)a2 + v8 + 8);
    *(void *)uint64_t v9 = *(uint64_t *)((char *)a2 + v8);
    *((void *)v9 + 1) = v30;
    uint64_t v11 = *(uint64_t *)((char *)a2 + v8 + 24);
    *((void *)v9 + 2) = *(uint64_t *)((char *)a2 + v8 + 16);
    *((void *)v9 + 3) = v11;
    uint64_t v12 = *(uint64_t *)((char *)a2 + v8 + 40);
    *((void *)v9 + 4) = *(uint64_t *)((char *)a2 + v8 + 32);
    *((void *)v9 + 5) = v12;
    uint64_t v13 = *(uint64_t *)((char *)a2 + v8 + 56);
    *((void *)v9 + 6) = *(uint64_t *)((char *)a2 + v8 + 48);
    *((void *)v9 + 7) = v13;
    uint64_t v14 = *(uint64_t *)((char *)a2 + v8 + 72);
    *((void *)v9 + 8) = *((void *)v10 + 8);
    *((void *)v9 + 9) = v14;
    uint64_t v15 = *((void *)v10 + 11);
    *((void *)v9 + 10) = *((void *)v10 + 10);
    *((void *)v9 + 11) = v15;
    *((void *)v9 + 12) = *((void *)v10 + 12);
    v9[104] = v10[104];
    uint64_t v16 = type metadata accessor for MediaAPIApp.Attributes(0);
    uint64_t v17 = *(int *)(v16 + 52);
    __dst = &v9[v17];
    uint64_t v33 = v16;
    int v18 = &v10[v17];
    uint64_t v19 = type metadata accessor for URL();
    uint64_t v31 = *(void *)(v19 - 8);
    uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v20(v18, 1, v19))
    {
      uint64_t v21 = sub_1000172F8(&qword_10065C3C0);
      memcpy(__dst, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(__dst, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(__dst, 0, 1, v19);
    }
    uint64_t v23 = *(int *)(v33 + 56);
    int v24 = &v9[v23];
    uint64_t v25 = &v10[v23];
    if (v20(v25, 1, v19))
    {
      uint64_t v26 = sub_1000172F8(&qword_10065C3C0);
      memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v24, v25, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v24, 0, 1, v19);
    }
    uint64_t v27 = *(int *)(a3 + 28);
    uint64_t v28 = *(uint64_t *)((char *)a2 + v27);
    if (v28 == 1)
    {
      *(uint64_t *)((char *)v4 + v27) = 1;
    }
    else
    {
      *(uint64_t *)((char *)v4 + v27) = v28;
      swift_bridgeObjectRetain();
    }
  }
  return v4;
}

uint64_t sub_1002AFE78(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for MediaAPIApp.Attributes(0);
  uint64_t v6 = v4 + *(int *)(v5 + 52);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  uint64_t v10 = v4 + *(int *)(v5 + 56);
  if (!v9(v10, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  }
  uint64_t result = *(void *)(a1 + *(int *)(a2 + 28));
  if (result != 1)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_1002B0018(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v27 = *(void *)((char *)a2 + v5 + 8);
  *(void *)uint64_t v6 = *(void *)((char *)a2 + v5);
  *((void *)v6 + 1) = v27;
  uint64_t v8 = *(void *)((char *)a2 + v5 + 24);
  *((void *)v6 + 2) = *(void *)((char *)a2 + v5 + 16);
  *((void *)v6 + 3) = v8;
  uint64_t v9 = *(void *)((char *)a2 + v5 + 40);
  *((void *)v6 + 4) = *(void *)((char *)a2 + v5 + 32);
  *((void *)v6 + 5) = v9;
  uint64_t v10 = *(void *)((char *)a2 + v5 + 56);
  *((void *)v6 + 6) = *(void *)((char *)a2 + v5 + 48);
  *((void *)v6 + 7) = v10;
  uint64_t v11 = *(void *)((char *)a2 + v5 + 72);
  *((void *)v6 + 8) = *((void *)v7 + 8);
  *((void *)v6 + 9) = v11;
  uint64_t v12 = *((void *)v7 + 11);
  *((void *)v6 + 10) = *((void *)v7 + 10);
  *((void *)v6 + 11) = v12;
  *((void *)v6 + 12) = *((void *)v7 + 12);
  v6[104] = v7[104];
  uint64_t v13 = type metadata accessor for MediaAPIApp.Attributes(0);
  uint64_t v14 = *(int *)(v13 + 52);
  __dst = &v6[v14];
  uint64_t v30 = v13;
  uint64_t v15 = &v7[v14];
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v28 = *(void *)(v16 - 8);
  uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v17(v15, 1, v16))
  {
    uint64_t v18 = sub_1000172F8(&qword_10065C3C0);
    memcpy(__dst, v15, *(void *)(*(void *)(v18 - 8) + 64));
    uint64_t v19 = v28;
  }
  else
  {
    uint64_t v19 = v28;
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(__dst, v15, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v16);
  }
  uint64_t v20 = *(int *)(v30 + 56);
  uint64_t v21 = &v6[v20];
  uint64_t v22 = &v7[v20];
  if (v17(&v7[v20], 1, v16))
  {
    uint64_t v23 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v21, v22, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v21, 0, 1, v16);
  }
  uint64_t v24 = *(int *)(a3 + 28);
  uint64_t v25 = *(void *)((char *)a2 + v24);
  if (v25 != 1) {
    uint64_t v25 = swift_bridgeObjectRetain();
  }
  *(void *)((char *)a1 + v24) = v25;
  return a1;
}

void *sub_1002B02DC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = a2;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v31 = a1;
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *(void *)((char *)a1 + v6) = *(void *)((char *)a2 + v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 1) = *((void *)v8 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 2) = *((void *)v8 + 2);
  *((void *)v7 + 3) = *((void *)v8 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 4) = *((void *)v8 + 4);
  *((void *)v7 + 5) = *((void *)v8 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 6) = *((void *)v8 + 6);
  *((void *)v7 + 7) = *((void *)v8 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 8) = *((void *)v8 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 9) = *((void *)v8 + 9);
  *((void *)v7 + 10) = *((void *)v8 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 11) = *((void *)v8 + 11);
  *((void *)v7 + 12) = *((void *)v8 + 12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[104] = v8[104];
  uint64_t v9 = type metadata accessor for MediaAPIApp.Attributes(0);
  uint64_t v10 = *(int *)(v9 + 52);
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    uint64_t v18 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
LABEL_7:
  uint64_t v19 = *(int *)(v9 + 56);
  uint64_t v20 = &v7[v19];
  uint64_t v21 = &v8[v19];
  int v22 = v15(&v7[v19], 1, v13);
  int v23 = v15(v21, 1, v13);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v20, v21, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v20, 0, 1, v13);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v13);
LABEL_12:
    uint64_t v24 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v20, v21, v13);
LABEL_13:
  uint64_t v25 = *(int *)(a3 + 28);
  uint64_t v26 = (void *)((char *)v31 + v25);
  uint64_t v27 = *(void *)((char *)v30 + v25);
  if (*(void *)((char *)v31 + v25) == 1)
  {
    if (v27 != 1)
    {
      *uint64_t v26 = v27;
      swift_bridgeObjectRetain();
      return v31;
    }
    uint64_t v28 = 1;
  }
  else
  {
    if (v27 != 1)
    {
      *uint64_t v26 = v27;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return v31;
    }
    sub_10017B89C((uint64_t)v31 + v25);
    uint64_t v28 = *(void *)((char *)v30 + v25);
  }
  *uint64_t v26 = v28;
  return v31;
}

_OWORD *sub_1002B0718(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = *(void *)((char *)a2 + v5 + 8);
  *(void *)uint64_t v6 = *(void *)((char *)a2 + v5);
  *((void *)v6 + 1) = v8;
  long long v9 = *(_OWORD *)((char *)a2 + v5 + 32);
  *((_OWORD *)v6 + 1) = *(_OWORD *)((char *)a2 + v5 + 16);
  *((_OWORD *)v6 + 2) = v9;
  *((_OWORD *)v6 + 3) = *(_OWORD *)((char *)a2 + v5 + 48);
  *((void *)v6 + 8) = *(void *)((char *)a2 + v5 + 64);
  *(_OWORD *)(v6 + 72) = *(_OWORD *)((char *)a2 + v5 + 72);
  *(_OWORD *)(v6 + 88) = *(_OWORD *)((char *)a2 + v5 + 88);
  v6[104] = *((unsigned char *)a2 + v5 + 104);
  uint64_t v10 = type metadata accessor for MediaAPIApp.Attributes(0);
  uint64_t v11 = *(int *)(v10 + 52);
  uint64_t v12 = &v6[v11];
  uint64_t v13 = &v7[v11];
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v14 - 8);
  int v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v16(v13, 1, v14))
  {
    uint64_t v17 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v18 = *(int *)(v10 + 56);
  uint64_t v19 = &v6[v18];
  uint64_t v20 = &v7[v18];
  if (v16(&v7[v18], 1, v14))
  {
    uint64_t v21 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v19, v20, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v19, 0, 1, v14);
  }
  *(void *)((char *)a1 + *(int *)(a3 + 28)) = *(void *)((char *)a2 + *(int *)(a3 + 28));
  return a1;
}

void *sub_1002B0944(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  size_t v38 = a2;
  uint64_t v8 = *(int *)(a3 + 24);
  long long v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  *(void *)((char *)a1 + v8) = *(void *)((char *)a2 + v8);
  swift_bridgeObjectRelease();
  *((void *)v9 + 1) = *((void *)v10 + 1);
  swift_bridgeObjectRelease();
  uint64_t v11 = *((void *)v10 + 3);
  *((void *)v9 + 2) = *((void *)v10 + 2);
  *((void *)v9 + 3) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *((void *)v10 + 5);
  *((void *)v9 + 4) = *((void *)v10 + 4);
  *((void *)v9 + 5) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *((void *)v10 + 7);
  *((void *)v9 + 6) = *((void *)v10 + 6);
  *((void *)v9 + 7) = v13;
  swift_bridgeObjectRelease();
  *((void *)v9 + 8) = *((void *)v10 + 8);
  swift_bridgeObjectRelease();
  uint64_t v14 = *((void *)v10 + 10);
  *((void *)v9 + 9) = *((void *)v10 + 9);
  *((void *)v9 + 10) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *((void *)v10 + 12);
  *((void *)v9 + 11) = *((void *)v10 + 11);
  *((void *)v9 + 12) = v15;
  swift_bridgeObjectRelease();
  v9[104] = v10[104];
  uint64_t v37 = type metadata accessor for MediaAPIApp.Attributes(0);
  uint64_t v16 = *(int *)(v37 + 52);
  uint64_t v17 = &v9[v16];
  uint64_t v18 = &v10[v16];
  uint64_t v19 = type metadata accessor for URL();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (v23)
    {
      uint64_t v24 = sub_1000172F8(&qword_10065C3C0);
      memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
      uint64_t v25 = v20;
    }
    else
    {
      uint64_t v25 = v20;
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
  }
  else
  {
    uint64_t v25 = v20;
    if (v23)
    {
      (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
      uint64_t v26 = sub_1000172F8(&qword_10065C3C0);
      memcpy(v17, v18, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
    }
  }
  uint64_t v27 = *(int *)(v37 + 56);
  uint64_t v28 = &v9[v27];
  uint64_t v29 = &v10[v27];
  int v30 = v21(&v9[v27], 1, v19);
  int v31 = v21(v29, 1, v19);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v28, v29, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v28, 0, 1, v19);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v19);
LABEL_13:
    uint64_t v32 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 40))(v28, v29, v19);
LABEL_14:
  uint64_t v33 = *(int *)(a3 + 28);
  BOOL v34 = (void *)((char *)a1 + v33);
  uint64_t v35 = *(void *)((char *)v38 + v33);
  if (*(void *)((char *)a1 + v33) != 1)
  {
    if (v35 != 1)
    {
      *BOOL v34 = v35;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_10017B89C((uint64_t)a1 + v33);
    uint64_t v35 = *(void *)((char *)v38 + v33);
  }
  *BOOL v34 = v35;
  return a1;
}

uint64_t sub_1002B0D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002B0D28);
}

uint64_t sub_1002B0D28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for MediaAPIApp.Attributes(0);
    long long v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1002B0DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002B0DEC);
}

uint64_t sub_1002B0DEC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for MediaAPIApp.Attributes(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1002B0E94()
{
  uint64_t result = type metadata accessor for MediaAPIApp.Attributes(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for MediaAPIApp.Relationships(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MediaAPIApp.Relationships(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for MediaAPIApp.Relationships(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void *assignWithTake for MediaAPIApp.Relationships(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MediaAPIApp.Relationships(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MediaAPIApp.Relationships(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaAPIApp.Relationships()
{
  return &type metadata for MediaAPIApp.Relationships;
}

unint64_t sub_1002B10A0()
{
  unint64_t result = qword_10065EC40;
  if (!qword_10065EC40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EC40);
  }
  return result;
}

uint64_t type metadata accessor for MediaAPIResponse.CodingKeys()
{
  return sub_100259AC0();
}

unint64_t sub_1002B110C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100638580, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_1002B1158(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x446E6F6973726576 && a2 == 0xEE0079616C707369;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4E657361656C6572 && a2 == 0xEC0000007365746FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001005BD1B0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1002B12E8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_1000172F8(&qword_10065EEC8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_1002B4A64();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100014524((uint64_t)a1);
  }
  char v27 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v24 = v9;
  char v26 = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v22 = v12;
  char v25 = 2;
  swift_bridgeObjectRetain();
  uint64_t v23 = v14;
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v17 = v16;
  uint64_t v18 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain();
  sub_100014524((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v19 = v23;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v24;
  a2[1] = v11;
  a2[2] = v22;
  a2[3] = v19;
  a2[4] = v18;
  a2[5] = v17;
  return result;
}

uint64_t sub_1002B1580(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74726F6873 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x647261646E617473 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1002B166C(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_10065ECE0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[4];
  sub_10018AC60(a1, a1[3]);
  sub_1002B2B60();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100014524((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    char v11 = 0;
    uint64_t v7 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v10 = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100014524((uint64_t)a1);
  }
  return v7;
}

uint64_t sub_1002B1850(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6D61726150797562 && a2 == 0xE900000000000073;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1002B1940(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_10065EEE8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[4];
  sub_10018AC60(a1, a1[3]);
  sub_1002B4B0C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100014524((uint64_t)a1);
  }
  else
  {
    v9[15] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[13] = 1;
    sub_1002B4B60();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100014524((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_1002B1B48(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7107189 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746867696568 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6874646977 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1002B1C80(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_10065EC48);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[4];
  sub_10018AC60(a1, a1[3]);
  sub_1002B1E9C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100014524((uint64_t)a1);
  }
  else
  {
    char v12 = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    char v11 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    char v10 = 2;
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100014524((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_1002B1E9C()
{
  unint64_t result = qword_10065EC50;
  if (!qword_10065EC50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EC50);
  }
  return result;
}

uint64_t sub_1002B1EF0()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x13) {
    return 19;
  }
  else {
    return v0;
  }
}

unint64_t sub_1002B1F44(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100638820, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8) {
    return 8;
  }
  else {
    return v3;
  }
}

void *sub_1002B1F90@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v58 = sub_1000172F8(&qword_10065EC58);
  uint64_t v5 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_1002B28A4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    sub_100014524((uint64_t)a1);
    return (void *)sub_10027CDF0(0, 0, 0, 0);
  }
  else
  {
    uint64_t v55 = v5;
    LOBYTE(v69) = 0;
    uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v10 = v9;
    uint64_t v51 = v8;
    LOBYTE(v59) = 1;
    sub_10024A5E0();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v11 = (uint64_t)a1;
    uint64_t v49 = v69;
    LOBYTE(v59) = 2;
    sub_1002B28F8();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v12 = v70;
    uint64_t v13 = v72;
    uint64_t v46 = v71;
    uint64_t v47 = v69;
    uint64_t v45 = v73;
    uint64_t v50 = v74;
    sub_1000172F8(&qword_10065EC70);
    LOBYTE(v59) = 3;
    sub_1002B4DA4(&qword_10065EC78, &qword_10065EC70, (void (*)(void))sub_1002B294C);
    uint64_t v54 = v12;
    swift_bridgeObjectRetain();
    uint64_t v48 = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v14 = v69;
    LOBYTE(v59) = 4;
    sub_1002B29A0();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v53 = v14;
    uint64_t v44 = v10;
    uint64_t v15 = v69;
    uint64_t v16 = v70;
    uint64_t v17 = v71;
    uint64_t v18 = v72;
    uint64_t v52 = sub_1000172F8(&qword_10065EC90);
    LOBYTE(v59) = 5;
    uint64_t v42 = v15;
    uint64_t v43 = v18;
    uint64_t v57 = v16;
    sub_10027CCE8(v15, v16, v17, v18);
    sub_1002B4DA4(&qword_10065EC98, &qword_10065EC90, (void (*)(void))sub_1002B29F4);
    uint64_t v19 = v58;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v56 = v17;
    uint64_t v20 = v42;
    uint64_t v21 = v69;
    LOBYTE(v59) = 6;
    sub_1002B2A48();
    uint64_t v52 = v21;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v22 = v70;
    uint64_t v40 = v71;
    uint64_t v41 = v69;
    uint64_t v39 = v72;
    sub_1000172F8(&qword_10065ECB0);
    char v89 = 7;
    sub_1002B2A9C();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v7, v19);
    uint64_t v58 = v90;
    *(void *)&long long v59 = v51;
    *((void *)&v59 + 1) = v44;
    *(void *)&long long v60 = v49;
    *((void *)&v60 + 1) = v47;
    *(void *)&long long v61 = v54;
    *((void *)&v61 + 1) = v46;
    *(void *)&long long v62 = v48;
    uint64_t v23 = v22;
    *((void *)&v62 + 1) = v45;
    *(void *)&long long v63 = v50;
    *((void *)&v63 + 1) = v53;
    *(void *)&long long v64 = v20;
    uint64_t v24 = v57;
    *((void *)&v64 + 1) = v57;
    *(void *)&long long v65 = v56;
    uint64_t v25 = v43;
    *((void *)&v65 + 1) = v43;
    *(void *)&long long v66 = v52;
    *((void *)&v66 + 1) = v41;
    *(void *)&long long v67 = v23;
    uint64_t v38 = v23;
    *((void *)&v67 + 1) = v40;
    *(void *)&long long v68 = v39;
    *((void *)&v68 + 1) = v90;
    sub_10027CC24(&v59);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10027CDF0(v20, v24, v56, v25);
    uint64_t v26 = v44;
    swift_bridgeObjectRelease();
    uint64_t v27 = v50;
    swift_bridgeObjectRelease();
    uint64_t v28 = v48;
    swift_bridgeObjectRelease();
    uint64_t v29 = v54;
    swift_bridgeObjectRelease();
    uint64_t v30 = v53;
    swift_bridgeObjectRelease();
    sub_100014524(v11);
    uint64_t v69 = v51;
    uint64_t v70 = v26;
    uint64_t v71 = v49;
    uint64_t v72 = v47;
    uint64_t v73 = v29;
    uint64_t v74 = v46;
    uint64_t v75 = v28;
    uint64_t v76 = v45;
    uint64_t v77 = v27;
    uint64_t v78 = v30;
    uint64_t v79 = v42;
    uint64_t v80 = v57;
    uint64_t v81 = v56;
    uint64_t v82 = v43;
    uint64_t v83 = v52;
    uint64_t v84 = v41;
    uint64_t v85 = v38;
    uint64_t v86 = v40;
    uint64_t v87 = v39;
    uint64_t v88 = v58;
    unint64_t result = sub_10027CD2C(&v69);
    long long v32 = v66;
    a2[6] = v65;
    a2[7] = v32;
    long long v33 = v68;
    a2[8] = v67;
    a2[9] = v33;
    long long v34 = v62;
    a2[2] = v61;
    a2[3] = v34;
    long long v35 = v64;
    a2[4] = v63;
    a2[5] = v35;
    long long v36 = v60;
    *a2 = v59;
    a2[1] = v36;
  }
  return result;
}

unint64_t sub_1002B28A4()
{
  unint64_t result = qword_10065EC60;
  if (!qword_10065EC60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EC60);
  }
  return result;
}

unint64_t sub_1002B28F8()
{
  unint64_t result = qword_10065EC68;
  if (!qword_10065EC68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EC68);
  }
  return result;
}

unint64_t sub_1002B294C()
{
  unint64_t result = qword_10065EC80;
  if (!qword_10065EC80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EC80);
  }
  return result;
}

unint64_t sub_1002B29A0()
{
  unint64_t result = qword_10065EC88;
  if (!qword_10065EC88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EC88);
  }
  return result;
}

unint64_t sub_1002B29F4()
{
  unint64_t result = qword_10065ECA0;
  if (!qword_10065ECA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065ECA0);
  }
  return result;
}

unint64_t sub_1002B2A48()
{
  unint64_t result = qword_10065ECA8;
  if (!qword_10065ECA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065ECA8);
  }
  return result;
}

unint64_t sub_1002B2A9C()
{
  unint64_t result = qword_10065ECB8;
  if (!qword_10065ECB8)
  {
    sub_10017B924(&qword_10065ECB0);
    sub_10000DDFC(&qword_10065ECC0, &qword_10065ECC8);
    sub_1002B4DA4(&qword_10065ECD0, &qword_10065ECD8, (void (*)(void))sub_1002B2A48);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065ECB8);
  }
  return result;
}

unint64_t sub_1002B2B60()
{
  unint64_t result = qword_10065ECE8;
  if (!qword_10065ECE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065ECE8);
  }
  return result;
}

unint64_t sub_1002B2BB4()
{
  unint64_t result = qword_10065ECF0;
  if (!qword_10065ECF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065ECF0);
  }
  return result;
}

unint64_t sub_1002B2C08()
{
  unint64_t result = qword_10065ED00;
  if (!qword_10065ED00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065ED00);
  }
  return result;
}

unint64_t sub_1002B2C5C()
{
  unint64_t result = qword_10065ED10;
  if (!qword_10065ED10)
  {
    sub_10017B924(&qword_10065ED08);
    sub_1002B2CD8();
    sub_1002B2D2C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065ED10);
  }
  return result;
}

unint64_t sub_1002B2CD8()
{
  unint64_t result = qword_10065ED18;
  if (!qword_10065ED18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065ED18);
  }
  return result;
}

unint64_t sub_1002B2D2C()
{
  unint64_t result = qword_10065ED20;
  if (!qword_10065ED20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065ED20);
  }
  return result;
}

unint64_t sub_1002B2D80()
{
  unint64_t result = qword_10065ED30;
  if (!qword_10065ED30)
  {
    sub_10017B924(&qword_10065ED28);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065ED30);
  }
  return result;
}

unint64_t sub_1002B2DF4()
{
  unint64_t result = qword_10065ED40;
  if (!qword_10065ED40)
  {
    sub_10017B924(&qword_10065ED38);
    sub_1002B2E70();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065ED40);
  }
  return result;
}

unint64_t sub_1002B2E70()
{
  unint64_t result = qword_10065ED48;
  if (!qword_10065ED48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065ED48);
  }
  return result;
}

unint64_t sub_1002B2EC4()
{
  unint64_t result = qword_10065ED50;
  if (!qword_10065ED50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065ED50);
  }
  return result;
}

uint64_t sub_1002B2F18(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1002B2F80()
{
  unint64_t result = qword_10065ED60;
  if (!qword_10065ED60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065ED60);
  }
  return result;
}

uint64_t sub_1002B2FD4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_1002B303C()
{
  unint64_t result = qword_10065ED70;
  if (!qword_10065ED70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065ED70);
  }
  return result;
}

uint64_t sub_1002B3090(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6146656369766564 && a2 == 0xEC000000796C696DLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001005BD1D0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1002B3198(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_10065EF08);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[4];
  sub_10018AC60(a1, a1[3]);
  sub_1002B4C08();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100014524((uint64_t)a1);
  }
  else
  {
    char v11 = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    char v10 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    sub_100014524((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

void *sub_1002B33A0(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_10065EF18);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10018AC60(a1, a1[3]);
  sub_1002B4C5C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100014524((uint64_t)a1);
  }
  else
  {
    sub_1002B4CB0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = v9;
    sub_100014524((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_1002B3510(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100638900, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xB) {
    return 11;
  }
  else {
    return v3;
  }
}

void *sub_1002B355C(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_10065F008);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10018AC60(a1, a1[3]);
  sub_1002B5818();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100014524((uint64_t)a1);
  }
  else
  {
    sub_1002B586C();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = v9;
    sub_100014524((uint64_t)a1);
  }
  return v7;
}

void *sub_1002B36CC(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_10065EF30);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10018AC60(a1, a1[3]);
  sub_1002B4D50();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100014524((uint64_t)a1);
  }
  else
  {
    sub_1000172F8(&qword_10065EF40);
    sub_1002B4DA4(&qword_10065EF48, &qword_10065EF40, (void (*)(void))sub_1002B4E1C);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    sub_100014524((uint64_t)a1);
  }
  return v7;
}

void *sub_1002B3868(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_10065ED78);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10018AC60(a1, a1[3]);
  sub_1002B39D4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100014524((uint64_t)a1);
  }
  else
  {
    sub_1002B3A28();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    sub_100014524((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_1002B39D4()
{
  unint64_t result = qword_10065ED80;
  if (!qword_10065ED80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065ED80);
  }
  return result;
}

unint64_t sub_1002B3A28()
{
  unint64_t result = qword_10065ED88[0];
  if (!qword_10065ED88[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10065ED88);
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaAPIApp.Relationships.Genres()
{
  return &type metadata for MediaAPIApp.Relationships.Genres;
}

ValueMetadata *type metadata accessor for MediaAPIApp.Relationships.CodingKeys()
{
  return &type metadata for MediaAPIApp.Relationships.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for MediaAPIApp.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002B3B6CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaAPIApp.CodingKeys()
{
  return &type metadata for MediaAPIApp.CodingKeys;
}

uint64_t getEnumTagSinglePayload for MediaAPIApp.Attributes.ContentRatings(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MediaAPIApp.Attributes.ContentRatings(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaAPIApp.Attributes.ContentRatings()
{
  return &type metadata for MediaAPIApp.Attributes.ContentRatings;
}

ValueMetadata *type metadata accessor for MediaAPIApp.Attributes.Requirements()
{
  return &type metadata for MediaAPIApp.Attributes.Requirements;
}

ValueMetadata *type metadata accessor for MediaAPIApp.Attributes.Platform()
{
  return &type metadata for MediaAPIApp.Attributes.Platform;
}

uint64_t getEnumTagSinglePayload for MediaAPIApp.Attributes.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MediaAPIApp.Attributes.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *unint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002B3DE8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaAPIApp.Attributes.CodingKeys()
{
  return &type metadata for MediaAPIApp.Attributes.CodingKeys;
}

ValueMetadata *type metadata accessor for MediaAPIApp.Attributes.PlatformAttributes.Description.CodingKeys()
{
  return &type metadata for MediaAPIApp.Attributes.PlatformAttributes.Description.CodingKeys;
}

uint64_t sub_1002B3E38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MediaAPIApp.Attributes.PlatformAttributes.Offer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for MediaAPIApp.Attributes.PlatformAttributes.Offer(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for MediaAPIApp.Attributes.PlatformAttributes.Offer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for MediaAPIApp.Attributes.PlatformAttributes.Offer(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MediaAPIApp.Attributes.PlatformAttributes.Offer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaAPIApp.Attributes.PlatformAttributes.Offer()
{
  return &type metadata for MediaAPIApp.Attributes.PlatformAttributes.Offer;
}

ValueMetadata *type metadata accessor for MediaAPIApp.Attributes.PlatformAttributes.Locale()
{
  return &type metadata for MediaAPIApp.Attributes.PlatformAttributes.Locale;
}

uint64_t destroy for MediaAPIApp.Attributes.PlatformAttributes.VersionInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for MediaAPIApp.Attributes.PlatformAttributes.VersionInfo(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MediaAPIApp.Attributes.PlatformAttributes.VersionInfo(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for MediaAPIApp.Attributes.PlatformAttributes.VersionInfo(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MediaAPIApp.Attributes.PlatformAttributes.VersionInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MediaAPIApp.Attributes.PlatformAttributes.VersionInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaAPIApp.Attributes.PlatformAttributes.VersionInfo()
{
  return &type metadata for MediaAPIApp.Attributes.PlatformAttributes.VersionInfo;
}

unsigned char *storeEnumTagSinglePayload for MediaAPIApp.Attributes.PlatformAttributes.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *__n128 result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002B42C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaAPIApp.Attributes.PlatformAttributes.CodingKeys()
{
  return &type metadata for MediaAPIApp.Attributes.PlatformAttributes.CodingKeys;
}

ValueMetadata *type metadata accessor for MediaAPIApp.Attributes.PlatformAttributes.Artwork.CodingKeys()
{
  return &type metadata for MediaAPIApp.Attributes.PlatformAttributes.Artwork.CodingKeys;
}

uint64_t sub_1002B4308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t sub_1002B4310()
{
  return swift_getWitnessTable();
}

unint64_t sub_1002B4330()
{
  unint64_t result = qword_10065EE10;
  if (!qword_10065EE10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EE10);
  }
  return result;
}

uint64_t sub_1002B4384()
{
  return sub_10000DDFC(&qword_10065EE18, &qword_10065EE20);
}

unint64_t sub_1002B43C4()
{
  unint64_t result = qword_10065EE28;
  if (!qword_10065EE28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EE28);
  }
  return result;
}

unint64_t sub_1002B441C()
{
  unint64_t result = qword_10065EE30;
  if (!qword_10065EE30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EE30);
  }
  return result;
}

uint64_t sub_1002B4470()
{
  return sub_10000DDFC(&qword_10065EE38, &qword_10065EE40);
}

unint64_t sub_1002B44B0()
{
  unint64_t result = qword_10065EE48;
  if (!qword_10065EE48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EE48);
  }
  return result;
}

unint64_t sub_1002B4508()
{
  unint64_t result = qword_10065EE50;
  if (!qword_10065EE50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EE50);
  }
  return result;
}

unint64_t sub_1002B4560()
{
  unint64_t result = qword_10065EE58;
  if (!qword_10065EE58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EE58);
  }
  return result;
}

unint64_t sub_1002B45B8()
{
  unint64_t result = qword_10065EE60;
  if (!qword_10065EE60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EE60);
  }
  return result;
}

unint64_t sub_1002B4610()
{
  unint64_t result = qword_10065EE68;
  if (!qword_10065EE68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EE68);
  }
  return result;
}

unint64_t sub_1002B4668()
{
  unint64_t result = qword_10065EE70;
  if (!qword_10065EE70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EE70);
  }
  return result;
}

unint64_t sub_1002B46C0()
{
  unint64_t result = qword_10065EE78;
  if (!qword_10065EE78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EE78);
  }
  return result;
}

unint64_t sub_1002B4718()
{
  unint64_t result = qword_10065EE80;
  if (!qword_10065EE80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EE80);
  }
  return result;
}

unint64_t sub_1002B4770()
{
  unint64_t result = qword_10065EE88;
  if (!qword_10065EE88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EE88);
  }
  return result;
}

unint64_t sub_1002B47C8()
{
  unint64_t result = qword_10065EE90;
  if (!qword_10065EE90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EE90);
  }
  return result;
}

unint64_t sub_1002B4820()
{
  unint64_t result = qword_10065EE98;
  if (!qword_10065EE98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EE98);
  }
  return result;
}

unint64_t sub_1002B4878()
{
  unint64_t result = qword_10065EEA0;
  if (!qword_10065EEA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EEA0);
  }
  return result;
}

unint64_t sub_1002B48D0()
{
  unint64_t result = qword_10065EEA8;
  if (!qword_10065EEA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EEA8);
  }
  return result;
}

unint64_t sub_1002B4928()
{
  unint64_t result = qword_10065EEB0;
  if (!qword_10065EEB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EEB0);
  }
  return result;
}

unint64_t sub_1002B4980()
{
  unint64_t result = qword_10065EEB8;
  if (!qword_10065EEB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EEB8);
  }
  return result;
}

unint64_t sub_1002B49D8()
{
  unint64_t result = qword_10065EEC0;
  if (!qword_10065EEC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EEC0);
  }
  return result;
}

uint64_t sub_1002B4A2C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1002B4A48()
{
  return swift_getWitnessTable();
}

unint64_t sub_1002B4A64()
{
  unint64_t result = qword_10065EED0;
  if (!qword_10065EED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EED0);
  }
  return result;
}

unint64_t sub_1002B4AB8()
{
  unint64_t result = qword_10065EEE0;
  if (!qword_10065EEE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EEE0);
  }
  return result;
}

unint64_t sub_1002B4B0C()
{
  unint64_t result = qword_10065EEF0;
  if (!qword_10065EEF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EEF0);
  }
  return result;
}

unint64_t sub_1002B4B60()
{
  unint64_t result = qword_10065EEF8;
  if (!qword_10065EEF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EEF8);
  }
  return result;
}

unint64_t sub_1002B4BB4()
{
  unint64_t result = qword_10065EF00;
  if (!qword_10065EF00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EF00);
  }
  return result;
}

unint64_t sub_1002B4C08()
{
  unint64_t result = qword_10065EF10;
  if (!qword_10065EF10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EF10);
  }
  return result;
}

unint64_t sub_1002B4C5C()
{
  unint64_t result = qword_10065EF20;
  if (!qword_10065EF20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EF20);
  }
  return result;
}

unint64_t sub_1002B4CB0()
{
  unint64_t result = qword_10065EF28;
  if (!qword_10065EF28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EF28);
  }
  return result;
}

unint64_t sub_1002B4D04(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100638A28, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

unint64_t sub_1002B4D50()
{
  unint64_t result = qword_10065EF38;
  if (!qword_10065EF38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EF38);
  }
  return result;
}

uint64_t sub_1002B4DA4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10017B924(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1002B4E1C()
{
  unint64_t result = qword_10065EF50;
  if (!qword_10065EF50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EF50);
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaAPIApp.Relationships.Genres.Data()
{
  return &type metadata for MediaAPIApp.Relationships.Genres.Data;
}

ValueMetadata *type metadata accessor for MediaAPIApp.Relationships.Genres.CodingKeys()
{
  return &type metadata for MediaAPIApp.Relationships.Genres.CodingKeys;
}

ValueMetadata *type metadata accessor for MediaAPIApp.Attributes.ContentRatings.ContentRating()
{
  return &type metadata for MediaAPIApp.Attributes.ContentRatings.ContentRating;
}

ValueMetadata *type metadata accessor for MediaAPIApp.Attributes.ContentRatings.CodingKeys()
{
  return &type metadata for MediaAPIApp.Attributes.ContentRatings.CodingKeys;
}

ValueMetadata *type metadata accessor for MediaAPIApp.Attributes.Requirements.CodingKeys()
{
  return &type metadata for MediaAPIApp.Attributes.Requirements.CodingKeys;
}

ValueMetadata *type metadata accessor for MediaAPIApp.Attributes.PlatformAttributes.Offer.OfferType()
{
  return &type metadata for MediaAPIApp.Attributes.PlatformAttributes.Offer.OfferType;
}

unsigned char *_s28ManagedAppDistributionDaemon11MediaAPIAppV10AttributesV18PlatformAttributesV11DescriptionV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002B4F9CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaAPIApp.Attributes.PlatformAttributes.Offer.CodingKeys()
{
  return &type metadata for MediaAPIApp.Attributes.PlatformAttributes.Offer.CodingKeys;
}

ValueMetadata *type metadata accessor for MediaAPIApp.Attributes.PlatformAttributes.Locale.CodingKeys()
{
  return &type metadata for MediaAPIApp.Attributes.PlatformAttributes.Locale.CodingKeys;
}

unsigned char *_s28ManagedAppDistributionDaemon11MediaAPIAppV10AttributesV8PlatformOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002B50B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaAPIApp.Attributes.PlatformAttributes.VersionInfo.CodingKeys()
{
  return &type metadata for MediaAPIApp.Attributes.PlatformAttributes.VersionInfo.CodingKeys;
}

unint64_t sub_1002B50EC()
{
  unint64_t result = qword_10065EF58;
  if (!qword_10065EF58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EF58);
  }
  return result;
}

unint64_t sub_1002B5144()
{
  unint64_t result = qword_10065EF60;
  if (!qword_10065EF60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EF60);
  }
  return result;
}

unint64_t sub_1002B519C()
{
  unint64_t result = qword_10065EF68;
  if (!qword_10065EF68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EF68);
  }
  return result;
}

unint64_t sub_1002B51F4()
{
  unint64_t result = qword_10065EF70;
  if (!qword_10065EF70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EF70);
  }
  return result;
}

unint64_t sub_1002B524C()
{
  unint64_t result = qword_10065EF78;
  if (!qword_10065EF78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EF78);
  }
  return result;
}

unint64_t sub_1002B52A4()
{
  unint64_t result = qword_10065EF80;
  if (!qword_10065EF80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EF80);
  }
  return result;
}

unint64_t sub_1002B52FC()
{
  unint64_t result = qword_10065EF88;
  if (!qword_10065EF88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EF88);
  }
  return result;
}

unint64_t sub_1002B5354()
{
  unint64_t result = qword_10065EF90;
  if (!qword_10065EF90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EF90);
  }
  return result;
}

unint64_t sub_1002B53AC()
{
  unint64_t result = qword_10065EF98;
  if (!qword_10065EF98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EF98);
  }
  return result;
}

unint64_t sub_1002B5404()
{
  unint64_t result = qword_10065EFA0;
  if (!qword_10065EFA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EFA0);
  }
  return result;
}

unint64_t sub_1002B545C()
{
  unint64_t result = qword_10065EFA8;
  if (!qword_10065EFA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EFA8);
  }
  return result;
}

unint64_t sub_1002B54B4()
{
  unint64_t result = qword_10065EFB0;
  if (!qword_10065EFB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EFB0);
  }
  return result;
}

unint64_t sub_1002B550C()
{
  unint64_t result = qword_10065EFB8;
  if (!qword_10065EFB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EFB8);
  }
  return result;
}

unint64_t sub_1002B5564()
{
  unint64_t result = qword_10065EFC0;
  if (!qword_10065EFC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EFC0);
  }
  return result;
}

unint64_t sub_1002B55BC()
{
  unint64_t result = qword_10065EFC8;
  if (!qword_10065EFC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EFC8);
  }
  return result;
}

unint64_t sub_1002B5614()
{
  unint64_t result = qword_10065EFD0;
  if (!qword_10065EFD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EFD0);
  }
  return result;
}

unint64_t sub_1002B566C()
{
  unint64_t result = qword_10065EFD8;
  if (!qword_10065EFD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EFD8);
  }
  return result;
}

unint64_t sub_1002B56C4()
{
  unint64_t result = qword_10065EFE0;
  if (!qword_10065EFE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EFE0);
  }
  return result;
}

unint64_t sub_1002B571C()
{
  unint64_t result = qword_10065EFE8;
  if (!qword_10065EFE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EFE8);
  }
  return result;
}

unint64_t sub_1002B5770()
{
  unint64_t result = qword_10065EFF0;
  if (!qword_10065EFF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065EFF0);
  }
  return result;
}

unint64_t sub_1002B57C4()
{
  unint64_t result = qword_10065F000;
  if (!qword_10065F000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065F000);
  }
  return result;
}

unint64_t sub_1002B5818()
{
  unint64_t result = qword_10065F010;
  if (!qword_10065F010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065F010);
  }
  return result;
}

unint64_t sub_1002B586C()
{
  unint64_t result = qword_10065F018;
  if (!qword_10065F018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065F018);
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaAPIApp.Relationships.Genres.Data.Attributes()
{
  return &type metadata for MediaAPIApp.Relationships.Genres.Data.Attributes;
}

ValueMetadata *type metadata accessor for MediaAPIApp.Relationships.Genres.Data.CodingKeys()
{
  return &type metadata for MediaAPIApp.Relationships.Genres.Data.CodingKeys;
}

ValueMetadata *type metadata accessor for MediaAPIApp.Attributes.ContentRatings.ContentRating.CodingKeys()
{
  return &type metadata for MediaAPIApp.Attributes.ContentRatings.ContentRating.CodingKeys;
}

unint64_t sub_1002B58F4()
{
  unint64_t result = qword_10065F020;
  if (!qword_10065F020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065F020);
  }
  return result;
}

unint64_t sub_1002B594C()
{
  unint64_t result = qword_10065F028;
  if (!qword_10065F028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065F028);
  }
  return result;
}

unint64_t sub_1002B59A4()
{
  unint64_t result = qword_10065F030;
  if (!qword_10065F030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065F030);
  }
  return result;
}

unint64_t sub_1002B59FC()
{
  unint64_t result = qword_10065F038;
  if (!qword_10065F038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065F038);
  }
  return result;
}

unint64_t sub_1002B5A54()
{
  unint64_t result = qword_10065F040;
  if (!qword_10065F040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065F040);
  }
  return result;
}

unint64_t sub_1002B5AAC()
{
  unint64_t result = qword_10065F048;
  if (!qword_10065F048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065F048);
  }
  return result;
}

unint64_t sub_1002B5B00()
{
  unint64_t result = qword_10065F058;
  if (!qword_10065F058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065F058);
  }
  return result;
}

unsigned char *_s28ManagedAppDistributionDaemon11MediaAPIAppV13RelationshipsV10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1002B5BF0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaAPIApp.Relationships.Genres.Data.Attributes.CodingKeys()
{
  return &type metadata for MediaAPIApp.Relationships.Genres.Data.Attributes.CodingKeys;
}

unint64_t sub_1002B5C2C()
{
  unint64_t result = qword_10065F060;
  if (!qword_10065F060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065F060);
  }
  return result;
}

unint64_t sub_1002B5C84()
{
  unint64_t result = qword_10065F068;
  if (!qword_10065F068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065F068);
  }
  return result;
}

unint64_t sub_1002B5CDC()
{
  unint64_t result = qword_10065F070;
  if (!qword_10065F070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065F070);
  }
  return result;
}

uint64_t sub_1002B5D44(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  if (*(void *)(a1 + 24))
  {
    sub_10018B164((long long *)a1, (uint64_t)&v18);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v2;
    *Swift::String v2 = 0x8000000000000000;
    uint64_t v6 = sub_100239C90((uint64_t)&v18, *((uint64_t *)&v19 + 1));
    __chkstk_darwin(v6);
    int v8 = (uint64_t *)((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v9 + 16))(v8);
    sub_1002BC020(*v8, a2, isUniquelyReferenced_nonNull_native, &v17);
    sub_100014524((uint64_t)&v18);
    *Swift::String v2 = v17;
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_10001729C(a1, &qword_10065F220);
    unint64_t v11 = sub_10045257C(a2);
    if (v12)
    {
      unint64_t v13 = v11;
      char v14 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v15 = *v3;
      uint64_t v17 = *v3;
      *int v3 = 0x8000000000000000;
      if ((v14 & 1) == 0)
      {
        sub_10052C088();
        uint64_t v15 = v17;
      }
      sub_10018B164((long long *)(*(void *)(v15 + 56) + 40 * v13), (uint64_t)&v18);
      sub_10042FBCC(v13, v15);
      *int v3 = v15;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v20 = 0;
      long long v18 = 0u;
      long long v19 = 0u;
    }
    return sub_10001729C((uint64_t)&v18, &qword_10065F220);
  }
}

uint64_t sub_1002B5F1C(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = sub_1000172F8(&qword_10065F200);
  __chkstk_darwin(v6 - 8);
  int v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ProgressCache.Progress();
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_10001729C(a1, &qword_10065F200);
    sub_10042EDBC(a2, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return sub_10001729C((uint64_t)v8, &qword_10065F200);
  }
  else
  {
    sub_1002BC414(a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    *int v3 = 0x8000000000000000;
    sub_100529E78((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    *int v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_1002B613C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_1001C5DD4((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    *int v3 = 0x8000000000000000;
    sub_10052A468(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *int v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_10001729C(a1, (uint64_t *)&unk_10065C9C0);
    sub_10042EF88(a2, a3, v9);
    swift_bridgeObjectRelease();
    return sub_10001729C((uint64_t)v9, (uint64_t *)&unk_10065C9C0);
  }
}

uint64_t sub_1002B6214(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = sub_1000172F8(&qword_10065F228);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AppInstallScheduler.ParkReason();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_10001729C(a1, &qword_10065F228);
    unint64_t v13 = sub_10045257C(a2);
    if (v14)
    {
      unint64_t v15 = v13;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v17 = *v3;
      uint64_t v21 = *v3;
      *int v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10052E9B0();
        uint64_t v17 = v21;
      }
      sub_1002BC414(*(void *)(v17 + 56) + *(void *)(v10 + 72) * v15, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
      sub_1004308F8(v15, v17);
      *int v3 = v17;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    }
    return sub_10001729C((uint64_t)v8, &qword_10065F228);
  }
  else
  {
    sub_1002BC414(a1, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
    char v18 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v3;
    *int v3 = 0x8000000000000000;
    sub_10052AB84((uint64_t)v12, a2, v18);
    *int v3 = v21;
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1002B6474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = v3;
  uint64_t v8 = sub_1000172F8(&qword_10065B8F0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  char v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(a1, 1, v11) == 1)
  {
    sub_10001729C(a1, &qword_10065B8F0);
    sub_10042F184(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease();
    return sub_10001729C((uint64_t)v10, &qword_10065B8F0);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v14, a1, v11);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v4;
    *unsigned int v4 = 0x8000000000000000;
    sub_10052ACD8((uint64_t)v14, a2, a3, isUniquelyReferenced_nonNull_native);
    *unsigned int v4 = v18;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1002B6654()
{
  uint64_t v4 = *v0;
  swift_bridgeObjectRetain();
  v1._countAndFlagsBits = 8250;
  v1._object = (void *)0xE200000000000000;
  String.append(_:)(v1);
  type metadata accessor for AppState();
  sub_1002BCD58(&qword_10065F2C8, 255, (void (*)(uint64_t))&type metadata accessor for AppState);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t (*sub_1002B6714())()
{
  return j__swift_endAccess;
}

uint64_t sub_1002B676C(uint64_t a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5, char *a6, int a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, void *a11)
{
  uint64_t v62 = a8;
  LODWORD(v59) = a7;
  uint64_t v56 = a5;
  uint64_t v57 = a6;
  uint64_t v52 = a3;
  uint64_t v65 = a10;
  uint64_t v55 = a11;
  int v53 = a9;
  LODWORD(v54) = a4;
  uint64_t v13 = sub_1000172F8(&qword_10065F200);
  __chkstk_darwin(v13 - 8);
  uint64_t v64 = (uint64_t)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  long long v63 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v50 - v19;
  uint64_t v61 = type metadata accessor for Logger();
  uint64_t v58 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v22 = (char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for ProgressCache.Progress();
  uint64_t v60 = *(void *)(v23 - 8);
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v50 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = &v26[*(int *)(v24 + 24)];
  uint64_t v28 = enum case for AppState.waiting(_:);
  uint64_t v29 = type metadata accessor for AppState();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 104))(v27, v28, v29);
  uint64_t v51 = a1;
  *(void *)uint64_t v26 = a1;
  *((void *)v26 + 1) = a2;
  *((void *)v26 + 2) = v52;
  v26[24] = v54 & 1;
  uint64_t v31 = v56;
  uint64_t v30 = (uint64_t)v57;
  *((void *)v26 + 4) = v56;
  *((void *)v26 + 5) = v30;
  LOBYTE(v27) = (_BYTE)v59;
  v26[48] = (char)v59;
  *((void *)v26 + 7) = v62;
  v26[64] = v53 & 1;
  uint64_t v62 = v23;
  uint64_t v32 = *(int *)(v23 + 28);
  long long v33 = v55;
  *(void *)&v26[v32] = v55;
  swift_bridgeObjectRetain();
  sub_1001C6164(v31, v30, v27);
  id v34 = v33;
  static Logger.progress.getter();
  long long v59 = *(void (**)(void))(v16 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v59)(v20, v65, v15);
  swift_bridgeObjectRetain_n();
  uint64_t v57 = v22;
  long long v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.default.getter();
  int v37 = v36;
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v38 = swift_slowAlloc();
    uint64_t v56 = swift_slowAlloc();
    v67[0] = v56;
    *(_DWORD *)uint64_t v38 = 136446466;
    uint64_t v54 = v38 + 4;
    sub_1002BCD58((unint64_t *)&qword_100665D30, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    LODWORD(v55) = v37;
    uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v66 = sub_1000143F4(v39, v40, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v15);
    *(_WORD *)(v38 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v66 = sub_1000143F4(v51, a2, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v55, "[ProgressCache] Starting progress for %{public}s (%{public}s)", (uint8_t *)v38, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v15);
    swift_bridgeObjectRelease_n();
  }

  (*(void (**)(char *, uint64_t))(v58 + 8))(v57, v61);
  uint64_t v41 = (uint64_t)v63;
  uint64_t v42 = v59;
  ((void (*)(char *, uint64_t, uint64_t))v59)(v63, v65, v15);
  uint64_t v43 = v64;
  sub_1002BBE5C((uint64_t)v26, v64);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v60 + 56))(v43, 0, 1, v62);
  swift_beginAccess();
  sub_1002B5F1C(v43, v41);
  swift_endAccess();
  sub_1000172F8(&qword_10065F208);
  uint64_t v44 = (int *)(sub_1000172F8(&qword_10065F210) - 8);
  unint64_t v45 = (*(unsigned __int8 *)(*(void *)v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v44 + 80);
  uint64_t v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_1005A3EC0;
  uint64_t v47 = v46 + v45 + v44[14];
  v42();
  sub_1002BBE5C((uint64_t)v26, v47);
  unint64_t v48 = sub_10044C2E0(v46);
  sub_1002BB248(v48);
  swift_bridgeObjectRelease();
  return sub_1002BBEC0((uint64_t)v26);
}

uint64_t sub_1002B6DF8(uint64_t a1, double a2)
{
  uint64_t v40 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v38 = *(void *)(v8 - 8);
  uint64_t v39 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000172F8(&qword_10065F200);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ProgressCache.Progress();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v18 = *(void *)(v2 + 112);
  uint64_t v19 = *(void *)(v18 + 16);
  uint64_t v41 = (uint8_t *)a1;
  if (v19)
  {
    swift_bridgeObjectRetain();
    unint64_t v20 = sub_10000F800(a1);
    if (v21)
    {
      sub_1002BBE5C(*(void *)(v18 + 56) + *(void *)(v15 + 72) * v20, (uint64_t)v13);
      uint64_t v22 = 0;
    }
    else
    {
      uint64_t v22 = 1;
    }
    uint64_t v23 = v5;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, v22, 1, v14);
    swift_bridgeObjectRelease();
    int v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14);
    uint64_t v24 = v40;
    if (v25 != 1)
    {
      sub_1002BC414((uint64_t)v13, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress);
      uint64_t v31 = swift_allocObject();
      *(double *)(v31 + 16) = a2;
      uint64_t v32 = (uint64_t *)&v17[*(int *)(v14 + 24)];
      uint64_t v33 = type metadata accessor for AppState();
      uint64_t v34 = *(void *)(v33 - 8);
      (*(void (**)(uint64_t *, uint64_t))(v34 + 8))(v32, v33);
      *uint64_t v32 = v31;
      (*(void (**)(uint64_t *, void, uint64_t))(v34 + 104))(v32, enum case for AppState.installing(_:), v33);
      uint64_t v35 = *(int *)(v14 + 28);

      *(void *)&v17[v35] = 0;
      sub_1002B9240((uint64_t)v41, (uint64_t)v17);
      return sub_1002BBEC0((uint64_t)v17);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
    uint64_t v23 = v5;
    uint64_t v24 = v40;
  }
  sub_10001729C((uint64_t)v13, &qword_10065F200);
  static Logger.progress.getter();
  (*(void (**)(char *, uint8_t *, uint64_t))(v23 + 16))(v7, v41, v24);
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 136446210;
    uint64_t v41 = v28 + 4;
    sub_1002BCD58((unint64_t *)&qword_100665D30, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v42 = sub_1000143F4(v29, v30, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v24);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "[ProgressCache] Can't update untracked progress for %{public}s", v28, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v24);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v10, v39);
}

uint64_t sub_1002B7380(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = type metadata accessor for AppState();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[12] = v4;
  v2[13] = *(void *)(v4 - 8);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v2[16] = v5;
  v2[17] = *(void *)(v5 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  sub_1000172F8(&qword_10065F200);
  v2[20] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ProgressCache.Progress();
  v2[21] = v6;
  v2[22] = *(void *)(v6 - 8);
  v2[23] = swift_task_alloc();
  return _swift_task_switch(sub_1002B75A4, v1, 0);
}

uint64_t sub_1002B75A4()
{
  uint64_t v1 = v0[8];
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 112);
  if (!*(void *)(v2 + 16))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[22] + 56))(v0[20], 1, 1, v0[21]);
LABEL_7:
    uint64_t v11 = v0[13];
    uint64_t v10 = v0[14];
    uint64_t v12 = v0[12];
    uint64_t v13 = v0[7];
    sub_10001729C(v0[20], &qword_10065F200);
    static Logger.progress.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v13, v12);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    uint64_t v17 = v0[17];
    uint64_t v18 = v0[18];
    uint64_t v19 = v0[16];
    uint64_t v21 = v0[13];
    uint64_t v20 = v0[14];
    uint64_t v22 = v0[12];
    if (v16)
    {
      uint64_t v57 = v0[18];
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v61 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136446210;
      sub_1002BCD58((unint64_t *)&qword_100665D30, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[5] = sub_1000143F4(v24, v25, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "[ProgressCache] Can't cancel untracked progress for %{public}s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v57, v19);
    }
    else
    {
      (*(void (**)(void, void))(v21 + 8))(v0[14], v0[12]);

      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = (uint64_t (*)(void))v0[1];
    return v26();
  }
  uint64_t v3 = v0[7];
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_10000F800(v3);
  if (v5)
  {
    sub_1002BBE5C(*(void *)(v2 + 56) + *(void *)(v0[22] + 72) * v4, v0[20]);
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 1;
  }
  uint64_t v8 = v0[21];
  uint64_t v7 = v0[22];
  uint64_t v9 = v0[20];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v9, v6, 1, v8);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1, v8) == 1) {
    goto LABEL_7;
  }
  uint64_t v28 = v0[15];
  uint64_t v30 = v0[12];
  uint64_t v29 = v0[13];
  uint64_t v31 = v0[7];
  sub_1002BC414(v0[20], v0[23], (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress);
  static Logger.progress.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v28, v31, v30);
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  BOOL v34 = os_log_type_enabled(v32, v33);
  uint64_t v35 = v0[19];
  uint64_t v37 = v0[16];
  uint64_t v36 = v0[17];
  uint64_t v38 = v0[15];
  uint64_t v40 = v0[12];
  uint64_t v39 = v0[13];
  if (v34)
  {
    uint64_t v59 = v0[19];
    uint64_t v58 = v0[16];
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    uint64_t v61 = swift_slowAlloc();
    *(_DWORD *)uint64_t v41 = 136446210;
    sub_1002BCD58((unint64_t *)&qword_100665D30, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[6] = sub_1000143F4(v42, v43, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "[ProgressCache] Canceling progress for %{public}s", v41, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v59, v58);
  }
  else
  {
    (*(void (**)(void, void))(v39 + 8))(v0[15], v0[12]);

    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
  }
  uint64_t v44 = v0[23];
  int v45 = *(unsigned __int8 *)(v44 + 48);
  if (v45 == 255)
  {
    uint64_t v46 = 0;
    uint64_t v47 = 3;
  }
  else if (v45)
  {
    uint64_t v46 = 0;
    uint64_t v47 = 0;
  }
  else
  {
    uint64_t v46 = *(void *)(v44 + 32);
    uint64_t v47 = *(void *)(v44 + 40);
    sub_1001C617C();
    uint64_t v44 = v0[23];
  }
  v0[24] = v46;
  v0[25] = v47;
  unint64_t v48 = (void *)v0[8];
  uint64_t v49 = *(void *)v44;
  uint64_t v50 = *(void *)(v44 + 8);
  v0[26] = v50;
  uint64_t v51 = v48[17];
  uint64_t v52 = v48[18];
  uint64_t v53 = v48[19];
  swift_bridgeObjectRetain();
  uint64_t v54 = (void *)swift_task_alloc();
  v0[27] = v54;
  void *v54 = v0;
  v54[1] = sub_1002B7C48;
  uint64_t v55 = v0[11];
  uint64_t v56 = v0[8];
  return sub_100501ACC(v55, v49, v50, 1, v51, v52, v56, v53);
}

uint64_t sub_1002B7C48()
{
  unint64_t v1 = *(void *)(*(void *)v0 + 200);
  uint64_t v2 = *(void *)(*(void *)v0 + 192);
  uint64_t v3 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_10000F7EC(v2, v1);
  return _swift_task_switch(sub_1002B7DB0, v3, 0);
}

uint64_t sub_1002B7DB0()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[7];
  (*(void (**)(uint64_t, void, void))(v0[10] + 40))(v1 + *(int *)(v2 + 24), v0[11], v0[9]);
  uint64_t v4 = *(int *)(v2 + 28);

  *(void *)(v1 + v4) = 0;
  sub_1002B9240(v3, v1);
  sub_1002BBEC0(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1002B7EB0(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[13] = v4;
  v2[14] = *(void *)(v4 - 8);
  v2[15] = swift_task_alloc();
  v2[16] = swift_task_alloc();
  sub_1000172F8(&qword_10065F200);
  v2[17] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ProgressCache.Progress();
  v2[18] = v5;
  v2[19] = *(void *)(v5 - 8);
  v2[20] = swift_task_alloc();
  return _swift_task_switch(sub_1002B8078, v1, 0);
}

uint64_t sub_1002B8078()
{
  uint64_t v57 = v0;
  uint64_t v1 = v0[8];
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 112);
  if (*(void *)(v2 + 16))
  {
    uint64_t v3 = v0[7];
    swift_bridgeObjectRetain();
    unint64_t v4 = sub_10000F800(v3);
    if (v5)
    {
      sub_1002BBE5C(*(void *)(v2 + 56) + *(void *)(v0[19] + 72) * v4, v0[17]);
      uint64_t v6 = 0;
    }
    else
    {
      uint64_t v6 = 1;
    }
    uint64_t v8 = v0[18];
    uint64_t v7 = v0[19];
    uint64_t v9 = v0[17];
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v9, v6, 1, v8);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1, v8) != 1)
    {
      uint64_t v26 = v0[12];
      uint64_t v28 = v0[9];
      uint64_t v27 = v0[10];
      uint64_t v29 = v0[7];
      sub_1002BC414(v0[17], v0[20], (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress);
      static Logger.progress.getter();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v26, v29, v28);
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      BOOL v32 = os_log_type_enabled(v30, v31);
      uint64_t v33 = v0[16];
      uint64_t v35 = v0[13];
      uint64_t v34 = v0[14];
      uint64_t v36 = v0[12];
      uint64_t v38 = v0[9];
      uint64_t v37 = v0[10];
      if (v32)
      {
        uint64_t v55 = v0[16];
        uint64_t v54 = v0[13];
        uint64_t v39 = (uint8_t *)swift_slowAlloc();
        uint64_t v56 = swift_slowAlloc();
        *(_DWORD *)uint64_t v39 = 136446210;
        sub_1002BCD58((unint64_t *)&qword_100665D30, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
        v0[6] = sub_1000143F4(v40, v41, &v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "[ProgressCache] Pausing progress for %{public}s", v39, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v55, v54);
      }
      else
      {
        (*(void (**)(void, void))(v37 + 8))(v0[12], v0[9]);

        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
      }
      uint64_t v42 = v0[20];
      uint64_t v43 = v0[18];
      uint64_t v44 = v0[7];
      uint64_t v45 = type metadata accessor for AppState();
      uint64_t v46 = swift_allocBox();
      uint64_t v47 = (uint64_t *)(v42 + *(int *)(v43 + 24));
      uint64_t v48 = *(void *)(v45 - 8);
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(v48 + 32))(v49, v47, v45);
      *uint64_t v47 = v46;
      (*(void (**)(uint64_t *, void, uint64_t))(v48 + 104))(v47, enum case for AppState.paused(_:), v45);
      uint64_t v50 = *(int *)(v43 + 28);

      *(void *)(v42 + v50) = 0;
      sub_1002B9240(v44, v42);
      sub_1002BBEC0(v42);
      goto LABEL_14;
    }
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[19] + 56))(v0[17], 1, 1, v0[18]);
  }
  uint64_t v11 = v0[10];
  uint64_t v10 = v0[11];
  uint64_t v12 = v0[9];
  uint64_t v13 = v0[7];
  sub_10001729C(v0[17], &qword_10065F200);
  static Logger.progress.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v13, v12);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v17 = v0[14];
  uint64_t v18 = v0[15];
  uint64_t v19 = v0[13];
  uint64_t v21 = v0[10];
  uint64_t v20 = v0[11];
  uint64_t v22 = v0[9];
  if (v16)
  {
    uint64_t v53 = v0[15];
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v56 = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136446210;
    sub_1002BCD58((unint64_t *)&qword_100665D30, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[5] = sub_1000143F4(v24, v25, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "[ProgressCache] Can't pause untracked progress for %{public}s", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v53, v19);
  }
  else
  {
    (*(void (**)(void, void))(v21 + 8))(v0[11], v0[9]);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
  }
LABEL_14:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v51 = (uint64_t (*)(void))v0[1];
  return v51();
}

uint64_t sub_1002B86C0(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = type metadata accessor for AppState();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[12] = v4;
  v2[13] = *(void *)(v4 - 8);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v2[16] = v5;
  v2[17] = *(void *)(v5 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  sub_1000172F8(&qword_10065F200);
  v2[20] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ProgressCache.Progress();
  v2[21] = v6;
  v2[22] = *(void *)(v6 - 8);
  v2[23] = swift_task_alloc();
  return _swift_task_switch(sub_1002B88E4, v1, 0);
}

uint64_t sub_1002B88E4()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 112);
  if (!*(void *)(v2 + 16))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 176) + 56))(*(void *)(v0 + 160), 1, 1, *(void *)(v0 + 168));
LABEL_7:
    uint64_t v11 = *(void *)(v0 + 104);
    uint64_t v10 = *(void *)(v0 + 112);
    uint64_t v12 = *(void *)(v0 + 96);
    uint64_t v13 = *(void *)(v0 + 56);
    sub_10001729C(*(void *)(v0 + 160), &qword_10065F200);
    static Logger.progress.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v13, v12);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    uint64_t v17 = *(void *)(v0 + 136);
    uint64_t v18 = *(void *)(v0 + 144);
    uint64_t v19 = *(void *)(v0 + 128);
    uint64_t v21 = *(void *)(v0 + 104);
    uint64_t v20 = *(void *)(v0 + 112);
    uint64_t v22 = *(void *)(v0 + 96);
    if (v16)
    {
      uint64_t v60 = *(void *)(v0 + 144);
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v64 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136446210;
      sub_1002BCD58((unint64_t *)&qword_100665D30, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 40) = sub_1000143F4(v24, v25, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "[ProgressCache] Can't finish untracked progress for %{public}s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v60, v19);
    }
    else
    {
      (*(void (**)(void, void))(v21 + 8))(*(void *)(v0 + 112), *(void *)(v0 + 96));

      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
    }
LABEL_10:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
    return v26();
  }
  uint64_t v3 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_10000F800(v3);
  if (v5)
  {
    sub_1002BBE5C(*(void *)(v2 + 56) + *(void *)(*(void *)(v0 + 176) + 72) * v4, *(void *)(v0 + 160));
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 1;
  }
  uint64_t v8 = *(void *)(v0 + 168);
  uint64_t v7 = *(void *)(v0 + 176);
  uint64_t v9 = *(void *)(v0 + 160);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v9, v6, 1, v8);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1, v8) == 1) {
    goto LABEL_7;
  }
  uint64_t v28 = *(void *)(v0 + 120);
  uint64_t v30 = *(void *)(v0 + 96);
  uint64_t v29 = *(void *)(v0 + 104);
  uint64_t v31 = *(void *)(v0 + 56);
  sub_1002BC414(*(void *)(v0 + 160), *(void *)(v0 + 184), (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress);
  static Logger.progress.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v28, v31, v30);
  BOOL v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  BOOL v34 = os_log_type_enabled(v32, v33);
  uint64_t v35 = *(void *)(v0 + 152);
  uint64_t v37 = *(void *)(v0 + 128);
  uint64_t v36 = *(void *)(v0 + 136);
  uint64_t v38 = *(void *)(v0 + 120);
  uint64_t v40 = *(void *)(v0 + 96);
  uint64_t v39 = *(void *)(v0 + 104);
  if (v34)
  {
    uint64_t v62 = *(void *)(v0 + 152);
    uint64_t v61 = *(void *)(v0 + 128);
    unint64_t v41 = (uint8_t *)swift_slowAlloc();
    uint64_t v64 = swift_slowAlloc();
    *(_DWORD *)unint64_t v41 = 136446210;
    sub_1002BCD58((unint64_t *)&qword_100665D30, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 48) = sub_1000143F4(v42, v43, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "[ProgressCache] Completing progress for %{public}s", v41, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v62, v61);
  }
  else
  {
    (*(void (**)(void, void))(v39 + 8))(*(void *)(v0 + 120), *(void *)(v0 + 96));

    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
  }
  *(_DWORD *)(v0 + 224) = *(_DWORD *)(*(void *)(v0 + 168) + 24);
  char v44 = AppState.isComplete.getter();
  uint64_t v45 = *(void *)(v0 + 184);
  if (v44)
  {
    uint64_t v46 = *(void *)(v0 + 56);
    uint64_t v47 = *(int *)(*(void *)(v0 + 168) + 28);

    *(void *)(v45 + v47) = 0;
    sub_1002B9240(v46, v45);
    sub_1002BBEC0(v45);
    goto LABEL_10;
  }
  int v48 = *(unsigned __int8 *)(v45 + 48);
  if (v48 == 255)
  {
    uint64_t v49 = 0;
    uint64_t v50 = 3;
  }
  else if (v48)
  {
    uint64_t v49 = 0;
    uint64_t v50 = 0;
  }
  else
  {
    uint64_t v49 = *(void *)(v45 + 32);
    uint64_t v50 = *(void *)(v45 + 40);
    sub_1001C617C();
    uint64_t v45 = *(void *)(v0 + 184);
  }
  *(void *)(v0 + 192) = v49;
  *(void *)(v0 + 200) = v50;
  uint64_t v51 = *(void **)(v0 + 64);
  uint64_t v53 = *(void *)v45;
  uint64_t v52 = *(void *)(v45 + 8);
  *(void *)(v0 + 208) = v52;
  uint64_t v54 = v51[17];
  uint64_t v55 = v51[18];
  uint64_t v56 = v51[19];
  swift_bridgeObjectRetain();
  uint64_t v57 = (void *)swift_task_alloc();
  *(void *)(v0 + 216) = v57;
  *uint64_t v57 = v0;
  v57[1] = sub_1002B8FD4;
  uint64_t v58 = *(void *)(v0 + 88);
  uint64_t v59 = *(void *)(v0 + 64);
  return sub_100501ACC(v58, v53, v52, 1, v54, v55, v59, v56);
}

uint64_t sub_1002B8FD4()
{
  unint64_t v1 = *(void *)(*(void *)v0 + 200);
  uint64_t v2 = *(void *)(*(void *)v0 + 192);
  uint64_t v3 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_10000F7EC(v2, v1);
  return _swift_task_switch(sub_1002B913C, v3, 0);
}

uint64_t sub_1002B913C()
{
  (*(void (**)(void, void, void))(*(void *)(v0 + 80) + 40))(*(void *)(v0 + 184) + *(int *)(v0 + 224), *(void *)(v0 + 88), *(void *)(v0 + 72));
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = *(int *)(*(void *)(v0 + 168) + 28);

  *(void *)(v1 + v3) = 0;
  sub_1002B9240(v2, v1);
  sub_1002BBEC0(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1002B9240(uint64_t a1, uint64_t a2)
{
  uint64_t v113 = a2;
  id v116 = (char *)a1;
  uint64_t v108 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v108 - 8);
  uint64_t v4 = __chkstk_darwin(v108);
  os_log_type_t v103 = (char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  char v102 = (char *)&v99 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v99 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v104 = (char *)&v99 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  id v115 = (char **)((char *)&v99 - v14);
  __chkstk_darwin(v13);
  unint64_t v99 = (char *)&v99 - v15;
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v112 = *(void *)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  int64_t v100 = (char *)&v99 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v99 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  unint64_t v107 = (char *)&v99 - v23;
  __chkstk_darwin(v22);
  unint64_t v106 = (void (*)(void))((char *)&v99 - v24);
  uint64_t v25 = sub_1000172F8(&qword_10065F200);
  uint64_t v26 = __chkstk_darwin(v25 - 8);
  uint64_t v110 = (uint64_t)&v99 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v29 = (char *)&v99 - v28;
  uint64_t v30 = type metadata accessor for ProgressCache.Progress();
  uint64_t v31 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  os_log_type_t v33 = (char *)&v99 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = v2 + 112;
  swift_beginAccess();
  uint64_t v34 = *(void *)(v2 + 112);
  uint64_t v35 = *(void *)(v34 + 16);
  uint64_t v111 = v16;
  uint64_t v105 = v10;
  uint64_t v101 = v21;
  if (!v35)
  {
    unint64_t v106 = (void (*)(void))v31;
    uint64_t v41 = v30;
    uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56);
    v42(v29, 1, 1, v30);
    uint64_t v43 = v108;
    uint64_t v44 = (uint64_t)v116;
LABEL_8:
    uint64_t v45 = v110;
    sub_10001729C((uint64_t)v29, &qword_10065F200);
    uint64_t v46 = v113;
    goto LABEL_9;
  }
  uint64_t v36 = v3;
  swift_bridgeObjectRetain();
  uint64_t v37 = (uint64_t)v116;
  unint64_t v38 = sub_10000F800((uint64_t)v116);
  if (v39)
  {
    sub_1002BBE5C(*(void *)(v34 + 56) + *(void *)(v31 + 72) * v38, (uint64_t)v29);
    uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56);
    v40(v29, 0, 1, v30);
  }
  else
  {
    uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56);
    v40(v29, 1, 1, v30);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) == 1)
  {
    unint64_t v106 = (void (*)(void))v31;
    uint64_t v42 = v40;
    uint64_t v41 = v30;
    uint64_t v43 = v108;
    uint64_t v44 = v37;
    uint64_t v3 = v36;
    goto LABEL_8;
  }
  sub_1002BC414((uint64_t)v29, (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress);
  uint64_t v46 = v113;
  if (sub_1002BC200((uint64_t)v33, v113))
  {
    uint64_t v71 = v106;
    static Logger.progress.getter();
    uint64_t v72 = v99;
    uint64_t v73 = v108;
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v99, v37, v108);
    uint64_t v74 = Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v74, v75))
    {
      uint64_t v76 = swift_slowAlloc();
      id v116 = v33;
      uint64_t v77 = (uint8_t *)v76;
      v120[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v77 = 136446210;
      id v115 = (char **)(v77 + 4);
      sub_1002BCD58((unint64_t *)&qword_100665D30, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v78 = dispatch thunk of CustomStringConvertible.description.getter();
      v119[0] = sub_1000143F4(v78, v79, v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v72, v73);
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "[ProgressCache] Not posting progress for %{public}s. No state change.", v77, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(void (*)(void), uint64_t))(v112 + 8))(v71, v111);
      return sub_1002BBEC0((uint64_t)v116);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v36 + 8))(v72, v73);
      (*(void (**)(void (*)(void), uint64_t))(v112 + 8))(v71, v16);
      return sub_1002BBEC0((uint64_t)v33);
    }
  }
  unint64_t v106 = (void (*)(void))v31;
  uint64_t v42 = v40;
  uint64_t v41 = v30;
  sub_1002BBEC0((uint64_t)v33);
  uint64_t v43 = v108;
  uint64_t v44 = v37;
  uint64_t v3 = v36;
  uint64_t v45 = v110;
LABEL_9:
  uint64_t v108 = v3;
  uint64_t v49 = *(void (**)(void))(v3 + 16);
  uint64_t v47 = (char *)(v3 + 16);
  int v48 = v49;
  uint64_t v50 = (void (*)(void, void))v115;
  ((void (*)(char **, uint64_t, uint64_t))v49)(v115, v44, v43);
  sub_1002BBE5C(v46, v45);
  v42((char *)v45, 0, 1, v41);
  swift_beginAccess();
  sub_1002B5F1C(v45, (uint64_t)v50);
  swift_endAccess();
  uint64_t v51 = v114;
  uint64_t v52 = (void *)(v114 + 120);
  swift_beginAccess();
  if (*(void *)(v51 + 120))
  {
    v119[0] = *(void *)(v51 + 120);
    swift_bridgeObjectRetain();
    uint64_t v53 = v107;
    static Logger.progress.getter();
    uint64_t v54 = v104;
    ((void (*)(char *, uint64_t, uint64_t))v48)(v104, v44, v43);
    uint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = swift_slowAlloc();
      unint64_t v106 = v48;
      unint64_t v99 = v47;
      uint64_t v58 = (uint8_t *)v57;
      uint64_t v118 = swift_slowAlloc();
      *(_DWORD *)uint64_t v58 = 136446210;
      sub_1002BCD58((unint64_t *)&qword_100665D30, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v117 = sub_1000143F4(v59, v60, &v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v61 = *(void (**)(char *, uint64_t))(v108 + 8);
      v61(v54, v43);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "[ProgressCache] Coalescing progress for %{public}s", v58, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      int v48 = v106;
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v112 + 8))(v107, v111);
    }
    else
    {
      uint64_t v81 = v53;
      uint64_t v61 = *(void (**)(char *, uint64_t))(v108 + 8);
      v61(v54, v43);

      (*(void (**)(char *, uint64_t))(v112 + 8))(v81, v111);
    }
    uint64_t v82 = v105;
    ((void (*)(char *, char *, uint64_t))v48)(v105, v116, v43);
    uint64_t v83 = (char *)v115;
    sub_100328FC0((uint64_t)v115, v82);
    v61(v83, v43);
    *uint64_t v52 = v119[0];
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v62 = v101;
    static Logger.progress.getter();
    uint64_t v63 = v102;
    unint64_t v106 = v48;
    unint64_t v99 = v47;
    ((void (*)(char *, uint64_t, uint64_t))v48)(v102, v44, v43);
    uint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = v43;
      long long v67 = v63;
      long long v68 = (uint8_t *)swift_slowAlloc();
      v119[0] = swift_slowAlloc();
      *(_DWORD *)long long v68 = 136446210;
      id v115 = (char **)(v68 + 4);
      sub_1002BCD58((unint64_t *)&qword_100665D30, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v118 = sub_1000143F4(v69, v70, v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      id v115 = *(char ***)(v108 + 8);
      ((void (*)(char *, uint64_t))v115)(v67, v43);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "[ProgressCache] Inserting first progress event %{public}s", v68, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      unint64_t v107 = *(char **)(v112 + 8);
      ((void (*)(char *, uint64_t))v107)(v62, v111);
    }
    else
    {
      id v115 = *(char ***)(v108 + 8);
      ((void (*)(char *, uint64_t))v115)(v63, v43);

      unint64_t v107 = *(char **)(v112 + 8);
      ((void (*)(char *, uint64_t))v107)(v62, v111);
      uint64_t v66 = v43;
    }
    uint64_t v84 = v103;
    *(void *)(v114 + 120) = &_swiftEmptySetSingleton;
    swift_bridgeObjectRelease();
    sub_1000172F8(&qword_10065F208);
    uint64_t v85 = (int *)(sub_1000172F8(&qword_10065F210) - 8);
    unint64_t v86 = (*(unsigned __int8 *)(*(void *)v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v85 + 80);
    uint64_t v87 = swift_allocObject();
    *(_OWORD *)(v87 + 16) = xmmword_1005A3EC0;
    uint64_t v88 = v87 + v86 + v85[14];
    uint64_t v89 = (uint64_t)v116;
    uint64_t v90 = v106;
    v106();
    sub_1002BBE5C(v113, v88);
    unint64_t v91 = sub_10044C2E0(v87);
    sub_1002BB248(v91);
    swift_bridgeObjectRelease();
    if (AppState.isComplete.getter())
    {
      uint64_t v92 = v100;
      static Logger.progress.getter();
      ((void (*)(char *, uint64_t, uint64_t))v90)(v84, v89, v66);
      uint64_t v93 = Logger.logObject.getter();
      os_log_type_t v94 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v93, v94))
      {
        uint64_t v95 = (uint8_t *)swift_slowAlloc();
        v119[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v95 = 136446210;
        sub_1002BCD58((unint64_t *)&qword_100665D30, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v96 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v118 = sub_1000143F4(v96, v97, v119);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        ((void (*)(char *, uint64_t))v115)(v84, v66);
        _os_log_impl((void *)&_mh_execute_header, v93, v94, "[ProgressCache] Removing completed item %{public}s", v95, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v89 = (uint64_t)v116;
        swift_slowDealloc();
      }
      else
      {
        ((void (*)(char *, uint64_t))v115)(v84, v66);
      }

      ((void (*)(char *, uint64_t))v107)(v92, v111);
      swift_beginAccess();
      uint64_t v98 = v110;
      sub_10042EDBC(v89, v110);
      sub_10001729C(v98, &qword_10065F200);
      swift_endAccess();
    }
    return sub_1002BB4D0();
  }
}

uint64_t sub_1002BA19C()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v116 = &v109[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = sub_1000172F8(&qword_10065F200);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = &v109[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  char v130 = &v109[-v8];
  uint64_t v136 = type metadata accessor for ProgressCache.Progress();
  uint64_t v122 = *(void *)(v136 - 8);
  uint64_t v9 = __chkstk_darwin(v136);
  uint64_t v117 = &v109[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  *(void *)&long long v118 = &v109[-v11];
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v139 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  unint64_t v127 = &v109[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = __chkstk_darwin(v13);
  NSString v119 = &v109[-v16];
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v114 = &v109[-v18];
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v113 = &v109[-v20];
  uint64_t v21 = __chkstk_darwin(v19);
  id v120 = &v109[-v22];
  __chkstk_darwin(v21);
  uint64_t v24 = &v109[-v23];
  uint64_t v25 = sub_1000172F8(&qword_10065C9B0);
  uint64_t v26 = __chkstk_darwin(v25 - 8);
  uint64_t v28 = &v109[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v26);
  uint64_t v30 = &v109[-v29];
  swift_beginAccess();
  uint64_t v31 = *(void *)(v0 + 120);
  if (!v31 || !*(void *)(v31 + 16))
  {
    *(void *)(v0 + 120) = 0;
    return swift_bridgeObjectRelease();
  }
  uint64_t v111 = v2;
  uint64_t v125 = v1;
  unint64_t v143 = (char *)&_swiftEmptySetSingleton;
  uint64_t v32 = *(void *)(v31 + 56);
  uint64_t v123 = (void (**)(unsigned char *, uint64_t))(v31 + 56);
  uint64_t v33 = 1 << *(unsigned char *)(v31 + 32);
  uint64_t v34 = -1;
  if (v33 < 64) {
    uint64_t v34 = ~(-1 << v33);
  }
  unint64_t v35 = v34 & v32;
  uint64_t v115 = v0;
  swift_bridgeObjectRetain();
  uint64_t v134 = (uint64_t *)(v0 + 112);
  swift_beginAccess();
  int64_t v36 = 0;
  int64_t v126 = (unint64_t)(v33 + 63) >> 6;
  char v137 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v139 + 56);
  uint64_t v138 = v139 + 16;
  uint64_t v135 = v139 + 48;
  uint64_t v133 = (void (**)(void (*)(unsigned char *, uint64_t, uint64_t, uint64_t), char *, uint64_t))(v139 + 32);
  long long v132 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v122 + 56);
  uint64_t v121 = (uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v122 + 48);
  id v140 = (void (**)(uint64_t, uint64_t))(v139 + 8);
  uint64_t v112 = (uint64_t)&_swiftEmptyDictionarySingleton;
  uint64_t v129 = v28;
  unint64_t v128 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v24;
  uint64_t v124 = v7;
  if (!v35) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v37 = __clz(__rbit64(v35));
  v35 &= v35 - 1;
  int64_t v131 = v36;
  for (unint64_t i = v37 | (v36 << 6); ; unint64_t i = __clz(__rbit64(v40)) + (v41 << 6))
  {
    uint64_t v43 = v31;
    uint64_t v44 = v139;
    uint64_t v45 = *(void *)(v139 + 72);
    uint64_t v46 = *(void (**)(char *, unint64_t, uint64_t))(v139 + 16);
    v46(v30, *(void *)(v31 + 48) + v45 * i, v12);
    uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v44 + 56);
    v47(v30, 0, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v30, 1, v12) == 1)
    {
      unint64_t v128 = v47;
      goto LABEL_48;
    }
    uint64_t v48 = (uint64_t)v128;
    (*v133)(v128, v30, v12);
    uint64_t v49 = *v134;
    if (!*(void *)(*v134 + 16))
    {
      uint64_t v52 = v130;
      (*v132)((uint64_t)v130, 1, 1, v136);
LABEL_28:
      (*v140)(v48, v12);
      sub_10001729C((uint64_t)v52, &qword_10065F200);
      goto LABEL_29;
    }
    swift_bridgeObjectRetain();
    unint64_t v50 = sub_10000F800(v48);
    if (v51)
    {
      uint64_t v52 = v130;
      sub_1002BBE5C(*(void *)(v49 + 56) + *(void *)(v122 + 72) * v50, (uint64_t)v130);
      uint64_t v53 = 0;
    }
    else
    {
      uint64_t v53 = 1;
      uint64_t v52 = v130;
    }
    uint64_t v54 = v136;
    (*v132)((uint64_t)v52, v53, 1, v136);
    swift_bridgeObjectRelease();
    int v55 = (*v121)(v52, 1, v54);
    uint64_t v28 = v129;
    if (v55 == 1) {
      goto LABEL_28;
    }
    uint64_t v56 = v118;
    sub_1002BC414((uint64_t)v52, v118, (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress);
    uint64_t v57 = v120;
    v46(v120, v48, v12);
    sub_1002BBE5C(v56, (uint64_t)v117);
    uint64_t v58 = v112;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v142 = (void *)v58;
    unint64_t v60 = sub_10000F800((uint64_t)v57);
    uint64_t v61 = *(void *)(v58 + 16);
    BOOL v62 = (v59 & 1) == 0;
    uint64_t v63 = v61 + v62;
    if (__OFADD__(v61, v62)) {
      goto LABEL_87;
    }
    if (*(void *)(v58 + 24) >= v63)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v66 = v142;
        if ((v59 & 1) == 0) {
          goto LABEL_40;
        }
      }
      else
      {
        LODWORD(v112) = v59;
        sub_10052C7A8();
        uint64_t v66 = v142;
        if ((v112 & 1) == 0) {
          goto LABEL_40;
        }
      }
    }
    else
    {
      LODWORD(v112) = v59;
      sub_1005253A8(v63, isUniquelyReferenced_nonNull_native);
      unint64_t v64 = sub_10000F800((uint64_t)v120);
      if ((v112 & 1) != (v65 & 1)) {
        goto LABEL_89;
      }
      unint64_t v60 = v64;
      uint64_t v66 = v142;
      if ((v112 & 1) == 0)
      {
LABEL_40:
        v66[(v60 >> 6) + 8] |= 1 << v60;
        v46((char *)(v66[6] + v60 * v45), (unint64_t)v120, v12);
        sub_1002BC414((uint64_t)v117, v66[7] + *(void *)(v122 + 72) * v60, (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress);
        uint64_t v67 = v66[2];
        BOOL v68 = __OFADD__(v67, 1);
        uint64_t v69 = v67 + 1;
        if (v68) {
          goto LABEL_88;
        }
        v66[2] = v69;
        uint64_t v112 = (uint64_t)v142;
        goto LABEL_42;
      }
    }
    uint64_t v112 = (uint64_t)v66;
    sub_1002BBF1C((uint64_t)v117, v66[7] + *(void *)(v122 + 72) * v60);
LABEL_42:
    swift_bridgeObjectRelease();
    unint64_t v70 = *v140;
    (*v140)((uint64_t)v120, v12);
    if (AppState.isComplete.getter())
    {
      v46(v114, v48, v12);
      uint64_t v71 = v113;
      sub_100328FC0((uint64_t)v113, v114);
      v70((uint64_t)v71, v12);
    }
    sub_1002BBEC0(v118);
    v70(v48, v12);
LABEL_29:
    uint64_t v31 = v43;
    int64_t v36 = v131;
    if (v35) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v39 = v36 + 1;
    if (__OFADD__(v36, 1))
    {
      __break(1u);
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
    if (v39 >= v126) {
      goto LABEL_47;
    }
    unint64_t v40 = (unint64_t)v123[v39];
    int64_t v41 = v36 + 1;
    if (!v40)
    {
      int64_t v41 = v39 + 1;
      if (v39 + 1 >= v126) {
        goto LABEL_47;
      }
      unint64_t v40 = (unint64_t)v123[v41];
      if (!v40)
      {
        int64_t v41 = v39 + 2;
        if (v39 + 2 >= v126) {
          goto LABEL_47;
        }
        unint64_t v40 = (unint64_t)v123[v41];
        if (!v40) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v35 = (v40 - 1) & v40;
    int64_t v131 = v41;
  }
  int64_t v42 = v39 + 3;
  if (v42 < v126)
  {
    unint64_t v40 = (unint64_t)v123[v42];
    if (!v40)
    {
      while (1)
      {
        int64_t v41 = v42 + 1;
        if (__OFADD__(v42, 1)) {
          break;
        }
        if (v41 >= v126) {
          goto LABEL_47;
        }
        unint64_t v40 = (unint64_t)v123[v41];
        ++v42;
        if (v40) {
          goto LABEL_20;
        }
      }
LABEL_85:
      __break(1u);
      goto LABEL_86;
    }
    int64_t v41 = v42;
    goto LABEL_20;
  }
LABEL_47:
  unint64_t v128 = *v137;
  v128(v30, 1, 1, v12);
LABEL_48:
  swift_release();
  uint64_t v73 = v116;
  if (*(void *)(v112 + 16)) {
    sub_1002BB248(v112);
  }
  swift_bridgeObjectRelease();
  os_log_type_t v75 = sub_1002B6714();
  if (*v74)
  {
    uint64_t v76 = v74;
    swift_bridgeObjectRelease();
    *uint64_t v76 = &_swiftEmptySetSingleton;
  }
  ((void (*)(void **, void))v75)(&v142, 0);
  uint64_t v78 = v127;
  int64_t v79 = 0;
  uint64_t v80 = *((void *)v143 + 7);
  id v120 = v143 + 56;
  int64_t v126 = (int64_t)v143;
  uint64_t v81 = 1 << v143[32];
  uint64_t v82 = -1;
  if (v81 < 64) {
    uint64_t v82 = ~(-1 << v81);
  }
  unint64_t v83 = v82 & v80;
  uint64_t v121 = (uint64_t (**)(unsigned char *, uint64_t, uint64_t))((unint64_t)(v81 + 63) >> 6);
  uint64_t v123 = (void (**)(unsigned char *, uint64_t))(v111 + 8);
  *(void *)&long long v77 = 136446210;
  long long v118 = v77;
  uint64_t v117 = (char *)&type metadata for Any + 8;
  uint64_t v84 = (uint64_t)v119;
  while (2)
  {
    if (v83)
    {
      char v130 = (unsigned char *)((v83 - 1) & v83);
      int64_t v131 = v79;
      unint64_t v86 = __clz(__rbit64(v83)) | (v79 << 6);
LABEL_73:
      uint64_t v91 = v139;
      uint64_t v92 = *(void *)(v139 + 72);
      uint64_t v93 = *(void (**)(unsigned char *, unint64_t, uint64_t))(v139 + 16);
      v93(v28, *(void *)(v126 + 48) + v92 * v86, v12);
      v128(v28, 0, 1, v12);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v91 + 48))(v28, 1, v12) == 1) {
        goto LABEL_82;
      }
      (*v133)(v84, v28, v12);
      static Logger.progress.getter();
      v93(v78, v84, v12);
      os_log_type_t v94 = v73;
      uint64_t v95 = Logger.logObject.getter();
      os_log_type_t v96 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v95, v96))
      {
        uint64_t v97 = swift_slowAlloc();
        id v142 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v97 = v118;
        sub_1002BCD58((unint64_t *)&qword_100665D30, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v98 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v97 + 4) = sub_1000143F4(v98, v99, (uint64_t *)&v142);
        swift_bridgeObjectRelease();
        int64_t v100 = *v140;
        uint64_t v84 = (uint64_t)v119;
        (*v140)((uint64_t)v78, v12);
        _os_log_impl((void *)&_mh_execute_header, v95, v96, "[ProgressCache] Removing completed item %{public}s", (uint8_t *)v97, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        int64_t v100 = *v140;
        (*v140)((uint64_t)v78, v12);
      }

      (*v123)(v94, v125);
      uint64_t v73 = v94;
      uint64_t v101 = v134;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      unint64_t v102 = sub_10000F800(v84);
      char v104 = v103;
      swift_bridgeObjectRelease();
      uint64_t v105 = (uint64_t)v124;
      if (v104)
      {
        int v106 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v107 = *v101;
        uint64_t v141 = *v101;
        *uint64_t v101 = 0x8000000000000000;
        if (!v106)
        {
          sub_10052C7A8();
          uint64_t v107 = v141;
        }
        v100(*(void *)(v107 + 48) + v102 * v92, v12);
        uint64_t v108 = v141;
        sub_1002BC414(*(void *)(v141 + 56) + *(void *)(v122 + 72) * v102, v105, (uint64_t (*)(void))type metadata accessor for ProgressCache.Progress);
        sub_10042FFE4(v102, v108);
        *uint64_t v101 = v108;
        swift_bridgeObjectRelease();
        uint64_t v85 = 0;
        uint64_t v28 = v129;
      }
      else
      {
        uint64_t v85 = 1;
        uint64_t v28 = v129;
      }
      (*v132)(v105, v85, 1, v136);
      sub_10001729C(v105, &qword_10065F200);
      swift_endAccess();
      v100(v84, v12);
      uint64_t v78 = v127;
      int64_t v79 = v131;
      unint64_t v83 = (unint64_t)v130;
      continue;
    }
    break;
  }
  uint64_t v87 = v79 + 1;
  if (__OFADD__(v79, 1)) {
    goto LABEL_84;
  }
  if (v87 >= (uint64_t)v121)
  {
LABEL_81:
    v128(v28, 1, 1, v12);
LABEL_82:
    swift_release();
    return sub_1002BB4D0();
  }
  unint64_t v88 = *(void *)&v120[8 * v87];
  uint64_t v89 = v79 + 1;
  if (v88) {
    goto LABEL_72;
  }
  uint64_t v89 = v79 + 2;
  if (v79 + 2 >= (uint64_t)v121) {
    goto LABEL_81;
  }
  unint64_t v88 = *(void *)&v120[8 * v89];
  if (v88) {
    goto LABEL_72;
  }
  uint64_t v89 = v79 + 3;
  if (v79 + 3 >= (uint64_t)v121) {
    goto LABEL_81;
  }
  unint64_t v88 = *(void *)&v120[8 * v89];
  if (v88)
  {
LABEL_72:
    char v130 = (unsigned char *)((v88 - 1) & v88);
    int64_t v131 = v89;
    unint64_t v86 = __clz(__rbit64(v88)) + (v89 << 6);
    goto LABEL_73;
  }
  uint64_t v90 = v79 + 4;
  if (v79 + 4 >= (uint64_t)v121) {
    goto LABEL_81;
  }
  unint64_t v88 = *(void *)&v120[8 * v90];
  if (v88)
  {
    uint64_t v89 = v79 + 4;
    goto LABEL_72;
  }
  while (1)
  {
    uint64_t v89 = v90 + 1;
    if (__OFADD__(v90, 1)) {
      break;
    }
    if (v89 >= (uint64_t)v121) {
      goto LABEL_81;
    }
    unint64_t v88 = *(void *)&v120[8 * v89];
    ++v90;
    if (v88) {
      goto LABEL_72;
    }
  }
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1002BB248(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.progress.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v16 = v2;
    uint64_t v10 = swift_slowAlloc();
    uint64_t v15 = v4;
    uint64_t v11 = (uint8_t *)v10;
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136446210;
    v14[1] = v11 + 4;
    type metadata accessor for UUID();
    type metadata accessor for ProgressCache.Progress();
    sub_1002BCD58((unint64_t *)&unk_100660E70, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v12 = Dictionary.description.getter();
    uint64_t v17 = sub_1000143F4(v12, v13, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[ProgressCache] Posting progress changes: %{public}s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v15);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  sub_10056C56C(a1);
}

uint64_t sub_1002BB4D0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000172F8(&qword_10065B220);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = v4;
  uint64_t v5 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  os_log_type_t v9 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v19 - v10;
  static ContinuousClock.now.getter();
  ContinuousClock.Instant.advanced(by:)();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  v20(v9, v5);
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v4, 1, 1, v12);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
  uint64_t v14 = sub_1002BCD58(&qword_10065F1E8, v13, (void (*)(uint64_t))type metadata accessor for ProgressCache);
  unint64_t v15 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v16 = (v7 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v1;
  *(void *)(v17 + 24) = v14;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v17 + v15, v9, v5);
  *(void *)(v17 + v16) = v1;
  swift_retain_n();
  sub_1000163AC((uint64_t)v19, (uint64_t)&unk_10065F1F0, v17);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v20)(v11, v5);
}

uint64_t sub_1002BB770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  uint64_t v7 = type metadata accessor for ContinuousClock();
  v5[7] = v7;
  v5[8] = *(void *)(v7 - 8);
  v5[9] = swift_task_alloc();
  return _swift_task_switch(sub_1002BB834, a5, 0);
}

uint64_t sub_1002BB834()
{
  *(void *)(v0 + 24) = 0;
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 32) = 1;
  ContinuousClock.init()();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v1;
  uint64_t v2 = sub_1002BCD58(&qword_10065F1F8, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  *uint64_t v1 = v0;
  v1[1] = sub_1002BB930;
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 40);
  return static Task<>.sleep<A>(until:tolerance:clock:)(v5, v0 + 16, v3, v4, v2);
}

uint64_t sub_1002BB930()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 72);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *(void *)(*v1 + 56);
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v2 + 48);
  if (v0) {
    uint64_t v7 = sub_1002BBB1C;
  }
  else {
    uint64_t v7 = sub_1002BBAAC;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_1002BBAAC()
{
  sub_1002BA19C();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002BBB1C()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002BBB80()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ProgressCache()
{
  return self;
}

uint64_t sub_1002BBC04()
{
  uint64_t v1 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1002BBCEC(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContinuousClock.Instant() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10000B238;
  return sub_1002BB770(a1, v6, v7, v8, v9);
}

uint64_t type metadata accessor for ProgressCache.Progress()
{
  uint64_t result = qword_10065F288;
  if (!qword_10065F288) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002BBE5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ProgressCache.Progress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002BBEC0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ProgressCache.Progress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002BBF1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ProgressCache.Progress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002BBF80(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v13 = type metadata accessor for IPA_AppInstall();
  uint64_t v14 = &off_100642748;
  *(void *)&long long v12 = a3;
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_10018B164(&v12, a4[7] + 40 * a1);
  uint64_t v9 = a4[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a4[2] = v11;
  }
  return result;
}

uint64_t sub_1002BC020(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v8 = type metadata accessor for IPA_AppInstall();
  uint64_t v28 = v8;
  uint64_t v29 = &off_100642748;
  *(void *)&long long v27 = a1;
  uint64_t v9 = (void *)*a4;
  unint64_t v11 = sub_10045257C(a2);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v15 = v10;
  uint64_t v16 = v9[3];
  if (v16 >= v14 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v17 = (void *)*a4;
    if (v15)
    {
LABEL_8:
      uint64_t v18 = v17[7] + 40 * v11;
      sub_100014524(v18);
      return sub_10018B164(&v27, v18);
    }
    goto LABEL_11;
  }
  if (v16 >= v14 && (a3 & 1) == 0)
  {
    sub_10052C088();
    goto LABEL_7;
  }
  sub_100524528(v14, a3 & 1);
  unint64_t v20 = sub_10045257C(a2);
  if ((v15 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v11 = v20;
  uint64_t v17 = (void *)*a4;
  if (v15) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v22 = sub_100239C90((uint64_t)&v27, v8);
  __chkstk_darwin(v22);
  uint64_t v24 = (uint64_t *)((char *)&v26 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v25 + 16))(v24);
  sub_1002BBF80(v11, a2, *v24, v17);
  return sub_100014524((uint64_t)&v27);
}

BOOL sub_1002BC200(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  char v5 = *(unsigned char *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  int v8 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v9 = *(void *)(a2 + 16);
  int v10 = *(unsigned __int8 *)(a2 + 24);
  uint64_t v12 = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(a2 + 40);
  int v13 = *(unsigned __int8 *)(a2 + 48);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    || (uint64_t v27 = *(void *)(a2 + 16),
        int v28 = *(unsigned __int8 *)(a2 + 24),
        char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(),
        uint64_t v9 = v27,
        int v10 = v28,
        char v15 = v14,
        BOOL result = 0,
        (v15 & 1) != 0))
  {
    if (v5)
    {
      if (!v10) {
        return 0;
      }
    }
    else
    {
      if (v4 == v9) {
        char v17 = v10;
      }
      else {
        char v17 = 1;
      }
      if (v17) {
        return 0;
      }
    }
    if (v8 == 255)
    {
      if (v13 != 255) {
        return 0;
      }
      goto LABEL_13;
    }
    if (v13 == 255) {
      return 0;
    }
    if (v8)
    {
      if ((v13 & 1) == 0) {
        return 0;
      }
    }
    else if (v13)
    {
      return 0;
    }
    if (v7 == v12 && v6 == v11 || (char v26 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v26 & 1) != 0))
    {
LABEL_13:
      char v18 = *(unsigned char *)(a2 + 64);
      if (*(unsigned char *)(a1 + 64))
      {
        if (!*(unsigned char *)(a2 + 64)) {
          return 0;
        }
      }
      else
      {
        if (*(void *)(a1 + 56) != *(void *)(a2 + 56)) {
          char v18 = 1;
        }
        if (v18) {
          return 0;
        }
      }
      uint64_t v19 = type metadata accessor for ProgressCache.Progress();
      if (static AppState.== infix(_:_:)())
      {
        uint64_t v20 = *(int *)(v19 + 28);
        char v21 = *(void **)(a1 + v20);
        uint64_t v22 = *(void **)(a2 + v20);
        if (v21)
        {
          if (!v22) {
            return 0;
          }
          sub_1002BC3C4();
          id v23 = v22;
          id v24 = v21;
          char v25 = static NSObject.== infix(_:_:)();

          return (v25 & 1) != 0;
        }
        if (!v22) {
          return 1;
        }
      }
      return 0;
    }
  }
  return result;
}

unint64_t sub_1002BC3C4()
{
  unint64_t result = qword_10065F218;
  if (!qword_10065F218)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10065F218);
  }
  return result;
}

uint64_t sub_1002BC404()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002BC414(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002BC47C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = a2[2];
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    int v8 = *((unsigned __int8 *)a2 + 48);
    swift_bridgeObjectRetain();
    if (v8 == 255)
    {
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    }
    else
    {
      uint64_t v10 = a2[4];
      uint64_t v11 = a2[5];
      sub_1001C617C();
      *(void *)(a1 + 32) = v10;
      *(void *)(a1 + 40) = v11;
      *(unsigned char *)(a1 + 48) = v8 & 1;
    }
    *(void *)(a1 + 56) = a2[7];
    *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 + 64);
    uint64_t v12 = *(int *)(a3 + 24);
    uint64_t v13 = a1 + v12;
    uint64_t v14 = (uint64_t)a2 + v12;
    uint64_t v15 = type metadata accessor for AppState();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    uint64_t v16 = *(int *)(a3 + 28);
    char v17 = *(void **)((char *)a2 + v16);
    *(void *)(a1 + v16) = v17;
    id v18 = v17;
  }
  return a1;
}

void sub_1002BC5D4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  if (*(unsigned __int8 *)(a1 + 48) != 255) {
    sub_10018ACBC();
  }
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for AppState();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = *(void **)(a1 + *(int *)(a2 + 28));
}

uint64_t sub_1002BC678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  int v7 = *(unsigned __int8 *)(a2 + 48);
  swift_bridgeObjectRetain();
  if (v7 == 255)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  }
  else
  {
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v9 = *(void *)(a2 + 40);
    sub_1001C617C();
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v9;
    *(unsigned char *)(a1 + 48) = v7 & 1;
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for AppState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = *(void **)(a2 + v14);
  *(void *)(a1 + v14) = v15;
  id v16 = v15;
  return a1;
}

uint64_t sub_1002BC780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  int v7 = (long long *)(a1 + 32);
  uint64_t v8 = (long long *)(a2 + 32);
  int v9 = *(unsigned __int8 *)(a2 + 48);
  if (*(unsigned __int8 *)(a1 + 48) == 255)
  {
    if (v9 == 255)
    {
      long long v11 = *v8;
      *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
      *int v7 = v11;
    }
    else
    {
      char v15 = v9 & 1;
      uint64_t v16 = *(void *)(a2 + 32);
      uint64_t v17 = *(void *)(a2 + 40);
      sub_1001C617C();
      *(void *)(a1 + 32) = v16;
      *(void *)(a1 + 40) = v17;
      *(unsigned char *)(a1 + 48) = v15;
    }
  }
  else if (v9 == 255)
  {
    sub_1002BC904(a1 + 32);
    char v10 = *(unsigned char *)(a2 + 48);
    *int v7 = *v8;
    *(unsigned char *)(a1 + 48) = v10;
  }
  else
  {
    char v12 = v9 & 1;
    uint64_t v13 = *(void *)(a2 + 32);
    uint64_t v14 = *(void *)(a2 + 40);
    sub_1001C617C();
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v14;
    *(unsigned char *)(a1 + 48) = v12;
    sub_10018ACBC();
  }
  uint64_t v18 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v18;
  uint64_t v19 = *(int *)(a3 + 24);
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = type metadata accessor for AppState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 24))(v20, v21, v22);
  uint64_t v23 = *(int *)(a3 + 28);
  id v24 = *(void **)(a1 + v23);
  char v25 = *(void **)(a2 + v23);
  *(void *)(a1 + v23) = v25;
  id v26 = v25;

  return a1;
}

uint64_t sub_1002BC904(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002BC958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(_OWORD *)(a1 + 32) = v7;
  uint64_t v11 = type metadata accessor for AppState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  *(void *)(a1 + *(int *)(a3 + 28)) = *(void *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_1002BCA10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  long long v7 = (_OWORD *)(a2 + 32);
  if (*(unsigned __int8 *)(a1 + 48) != 255)
  {
    int v8 = *(unsigned __int8 *)(a2 + 48);
    if (v8 != 255)
    {
      *(_OWORD *)(a1 + 32) = *v7;
      *(unsigned char *)(a1 + 48) = v8 & 1;
      sub_10018ACBC();
      goto LABEL_6;
    }
    sub_1002BC904(a1 + 32);
  }
  *(_OWORD *)(a1 + 32) = *v7;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
LABEL_6:
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for AppState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = *(void **)(a1 + v13);
  *(void *)(a1 + v13) = *(void *)(a2 + v13);

  return a1;
}

uint64_t sub_1002BCB30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002BCB44);
}

uint64_t sub_1002BCB44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for AppState();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1002BCBF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002BCC08);
}

uint64_t sub_1002BCC08(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for AppState();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1002BCCB0()
{
  uint64_t result = type metadata accessor for AppState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1002BCD58(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1002BCDA0(void *a1, void *a2)
{
  unint64_t v70 = (int *)type metadata accessor for IdentifiableAvailableUpdate(0);
  __chkstk_darwin(v70);
  uint64_t v5 = (uint64_t *)((char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  updated = (int *)type metadata accessor for MarketplaceUpdateTemplate();
  uint64_t v7 = __chkstk_darwin(updated);
  uint64_t v68 = (uint64_t)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v68 - v9);
  uint64_t v11 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1[4];
  uint64_t v15 = a1[5];
  uint64_t v73 = (void *)sub_1000172F8(&qword_10065C3D0);
  uint64_t v74 = (void *)sub_1002BDACC();
  LOWORD(v71) = 7;
  *((void *)&v71 + 1) = v14;
  uint64_t v72 = v15;
  sub_1000172F8(&qword_10065C3E0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
  sub_10018B164(&v71, inited + 32);
  v76[0] = (uint64_t)_swiftEmptyArrayStorage;
  id v17 = a2;
  swift_bridgeObjectRetain();
  sub_10055595C(inited);
  uint64_t v18 = (void *)sub_10033241C(0, v76[0], (uint64_t)sub_100332380, 0, v17);

  swift_bridgeObjectRelease();
  if (v18)
  {
    uint64_t v19 = (void *)((char *)a1 + v70[9]);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    uint64_t v73 = &type metadata for String;
    uint64_t v74 = &protocol witness table for String;
    os_log_type_t v75 = &protocol witness table for String;
    *(void *)&long long v71 = v20;
    *((void *)&v71 + 1) = v21;
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    swift_bridgeObjectRetain_n();
    id v22 = v18;
    JSONEncoder.init()();
    uint64_t v23 = v69;
    SQLiteEncodeValue(_:using:)(&v71, v76);
    swift_release();
    sub_100014524((uint64_t)&v71);
    if (v23)
    {
      swift_unexpectedError();
      __break(1u);
    }
    else
    {
      sub_10018AC60(v76, v77);
      uint64_t v24 = _bridgeAnythingToObjectiveC<A>(_:)();
      sub_100014524((uint64_t)v76);
      NSString v25 = String._bridgeToObjectiveC()();
      [v22 setValue:v24 forProperty:v25];
      swift_bridgeObjectRelease();

      swift_unknownObjectRelease();
      id v26 = v70;
      uint64_t v27 = (char *)a1 + v70[8];
      uint64_t v28 = type metadata accessor for URL();
      uint64_t v29 = *(void *)(v28 - 8);
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v13, v27, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v13, 0, 1, v28);
      sub_1002459EC((uint64_t)v13, 4, v22);
      sub_1002BDBEC((uint64_t)v13);
      uint64_t v30 = (void *)((char *)a1 + v26[11]);
      uint64_t v32 = *v30;
      uint64_t v31 = v30[1];
      swift_bridgeObjectRetain();
      sub_100245EC4(v32, v31, 5, v22);
      swift_bridgeObjectRelease();
      uint64_t v33 = (void *)((char *)a1 + v26[10]);
      uint64_t v35 = *v33;
      uint64_t v34 = v33[1];
      swift_bridgeObjectRetain();
      sub_100245EC4(v35, v34, 6, v22);
      swift_bridgeObjectRelease();
      uint64_t v36 = a1[6];
      uint64_t v37 = a1[7];
      uint64_t v73 = &type metadata for String;
      uint64_t v74 = &protocol witness table for String;
      os_log_type_t v75 = &protocol witness table for String;
      *(void *)&long long v71 = v36;
      *((void *)&v71 + 1) = v37;
      swift_allocObject();
      swift_bridgeObjectRetain_n();
      id v38 = v22;
      JSONEncoder.init()();
      SQLiteEncodeValue(_:using:)(&v71, v76);
      swift_release();
      sub_100014524((uint64_t)&v71);
      sub_10018AC60(v76, v77);
      uint64_t v39 = _bridgeAnythingToObjectiveC<A>(_:)();
      sub_100014524((uint64_t)v76);
      NSString v40 = String._bridgeToObjectiveC()();
      [v38 setValue:v39 forProperty:v40];
      swift_bridgeObjectRelease();

      swift_unknownObjectRelease();
    }
  }
  else
  {
    sub_1002BDB28((uint64_t)a1, (uint64_t)v5, type metadata accessor for IdentifiableAvailableUpdate);
    uint64_t v41 = v5[1];
    *uint64_t v10 = *v5;
    v10[1] = v41;
    int64_t v42 = v70;
    sub_10026400C((uint64_t)v5 + v70[12], (uint64_t)v10 + updated[5]);
    uint64_t v43 = v5[3];
    uint64_t v44 = (void *)((char *)v10 + updated[6]);
    *uint64_t v44 = v5[2];
    v44[1] = v43;
    uint64_t v45 = (void *)((char *)v5 + v42[9]);
    uint64_t v47 = *v45;
    uint64_t v46 = v45[1];
    uint64_t v48 = (void *)((char *)v10 + updated[7]);
    *uint64_t v48 = v47;
    v48[1] = v46;
    uint64_t v49 = (char *)v5 + v42[8];
    unint64_t v50 = (char *)v10 + updated[8];
    uint64_t v51 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 32))(v50, v49, v51);
    uint64_t v52 = (void *)((char *)v5 + v42[11]);
    uint64_t v54 = *v52;
    uint64_t v53 = v52[1];
    int v55 = (void *)((char *)v10 + updated[9]);
    void *v55 = v54;
    v55[1] = v53;
    uint64_t v56 = (void *)((char *)v5 + v42[10]);
    uint64_t v58 = *v56;
    uint64_t v57 = v56[1];
    int v59 = (void *)((char *)v10 + updated[10]);
    *int v59 = v58;
    v59[1] = v57;
    uint64_t v60 = v5[5];
    uint64_t v61 = (void *)((char *)v10 + updated[11]);
    void *v61 = v5[4];
    v61[1] = v60;
    uint64_t v62 = v5[7];
    uint64_t v63 = (void *)((char *)v10 + updated[12]);
    *uint64_t v63 = v5[6];
    v63[1] = v62;
    uint64_t v64 = v68;
    sub_1002BDB28((uint64_t)v10, v68, (uint64_t (*)(void))type metadata accessor for MarketplaceUpdateTemplate);
    id v65 = v17;
    uint64_t v66 = v69;
    id v67 = sub_1004EA2A0(v64, v65);
    if (!v66) {

    }
    sub_1002BDB90((uint64_t)v10);
  }
}

unint64_t *sub_1002BD4A8()
{
  sub_1000172F8((uint64_t *)&unk_100663BE0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
  *(void *)(inited + 56) = &type metadata for SQLiteTable;
  *(void *)(inited + 64) = &off_1006493B8;
  unint64_t v1 = (void *)swift_allocObject();
  *(void *)(inited + 32) = v1;
  v1[2] = sub_1002BD58C;
  v1[3] = 0;
  v1[4] = 0xD000000000000012;
  v1[5] = 0x80000001005BD290;
  uint64_t v2 = sub_1004AB980(inited);
  swift_setDeallocating();
  sub_1000172F8(&qword_10065C038);
  swift_arrayDestroy();
  return v2;
}

unint64_t *sub_1002BD58C()
{
  v58[0] = 0x5F746E756F636361;
  v58[1] = 0xEA00000000006469;
  v58[2] = 1415071060;
  v58[3] = 0xE400000000000000;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  char v62 = 0;
  strcpy((char *)v51, "app_share_url");
  v51[7] = -4864;
  uint64_t v52 = 1112493122;
  unint64_t v53 = 0xE400000000000000;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  char v57 = 0;
  v46[0] = 0x695F656C646E7562;
  v46[1] = 0xE900000000000064;
  v46[2] = 1415071060;
  v46[3] = 0xE400000000000000;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  char v50 = 0;
  strcpy(v39, "bundle_version");
  v39[15] = -18;
  uint64_t v40 = 1415071060;
  unint64_t v41 = 0xE400000000000000;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  char v45 = 0;
  v34[0] = 0x6C72755F706461;
  v34[1] = 0xE700000000000000;
  v34[2] = 1112493122;
  v34[3] = 0xE400000000000000;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  char v38 = 0;
  v29[0] = 0xD00000000000001ALL;
  v29[1] = 0x80000001005B73A0;
  v29[2] = 1415071060;
  void v29[3] = 0xE400000000000000;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  char v33 = 0;
  v24[0] = 0xD000000000000014;
  v24[1] = 0x80000001005B84F0;
  v24[2] = 1415071060;
  v24[3] = 0xE400000000000000;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  char v28 = 0;
  v19[0] = 0x64695F6D657469;
  v19[1] = 0xE700000000000000;
  v19[2] = 1415071060;
  v19[3] = 0xE400000000000000;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  char v23 = 0;
  v14[0] = 0x5F6E6F6973726576;
  v14[1] = 0xEA00000000006469;
  void v14[2] = 1415071060;
  v14[3] = 0xE400000000000000;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  char v18 = 0;
  sub_1000172F8((uint64_t *)&unk_100663BE0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1005A8950;
  *(void *)(v0 + 56) = &type metadata for SQLiteColumn;
  *(void *)(v0 + 64) = &off_1006493B0;
  uint64_t v1 = swift_allocObject();
  *(void *)(v0 + 32) = v1;
  sub_1001CD8D8((uint64_t)v58, v1 + 16);
  *(void *)(v0 + 96) = &type metadata for SQLiteColumn;
  *(void *)(v0 + 104) = &off_1006493B0;
  uint64_t v2 = swift_allocObject();
  *(void *)(v0 + 72) = v2;
  sub_1001CD8D8((uint64_t)v51, v2 + 16);
  *(void *)(v0 + 136) = &type metadata for SQLiteColumn;
  *(void *)(v0 + 144) = &off_1006493B0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v0 + 112) = v3;
  sub_1001CD8D8((uint64_t)v46, v3 + 16);
  *(void *)(v0 + 176) = &type metadata for SQLiteColumn;
  *(void *)(v0 + 184) = &off_1006493B0;
  uint64_t v4 = swift_allocObject();
  *(void *)(v0 + 152) = v4;
  sub_1001CD8D8((uint64_t)v39, v4 + 16);
  *(void *)(v0 + 216) = &type metadata for SQLiteColumn;
  *(void *)(v0 + 224) = &off_1006493B0;
  uint64_t v5 = swift_allocObject();
  *(void *)(v0 + 192) = v5;
  sub_1001CD8D8((uint64_t)v34, v5 + 16);
  *(void *)(v0 + 256) = &type metadata for SQLiteColumn;
  *(void *)(v0 + 264) = &off_1006493B0;
  uint64_t v6 = swift_allocObject();
  *(void *)(v0 + 232) = v6;
  sub_1001CD8D8((uint64_t)v29, v6 + 16);
  *(void *)(v0 + 296) = &type metadata for SQLiteColumn;
  *(void *)(v0 + 304) = &off_1006493B0;
  uint64_t v7 = swift_allocObject();
  *(void *)(v0 + 272) = v7;
  sub_1001CD8D8((uint64_t)v24, v7 + 16);
  *(void *)(v0 + 336) = &type metadata for SQLiteColumn;
  *(void *)(v0 + 344) = &off_1006493B0;
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 312) = v8;
  sub_1001CD8D8((uint64_t)v19, v8 + 16);
  *(void *)(v0 + 376) = &type metadata for SQLiteColumn;
  *(void *)(v0 + 384) = &off_1006493B0;
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 352) = v9;
  sub_1001CD8D8((uint64_t)v14, v9 + 16);
  *(void *)(v0 + 416) = &type metadata for SQLiteIndex;
  *(void *)(v0 + 424) = &off_1006493A8;
  uint64_t v10 = swift_allocObject();
  *(void *)(v0 + 392) = v10;
  *(void *)(v10 + 16) = 0x695F656C646E7562;
  *(void *)(v10 + 24) = 0xE900000000000064;
  strcpy((char *)(v10 + 32), "bundle_id_idx");
  *(_WORD *)(v10 + 46) = -4864;
  *(unsigned char *)(v10 + 48) = 0;
  *(void *)(v0 + 456) = &type metadata for SQLiteIndex;
  *(void *)(v0 + 464) = &off_1006493A8;
  uint64_t v11 = swift_allocObject();
  *(void *)(v0 + 432) = v11;
  *(void *)(v11 + 16) = 0x64695F6D657469;
  *(void *)(v11 + 24) = 0xE700000000000000;
  *(void *)(v11 + 32) = 0x5F64695F6D657469;
  *(void *)(v11 + 40) = 0xEB00000000786469;
  *(unsigned char *)(v11 + 48) = 0;
  uint64_t v12 = sub_1004AB980(v0);
  swift_setDeallocating();
  sub_1000172F8(&qword_10065C038);
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_1001CD934((uint64_t)v14);
  sub_1001CD934((uint64_t)v19);
  sub_1001CD934((uint64_t)v24);
  sub_1001CD934((uint64_t)v29);
  sub_1001CD934((uint64_t)v34);
  sub_1001CD934((uint64_t)v39);
  sub_1001CD934((uint64_t)v46);
  sub_1001CD934((uint64_t)v51);
  sub_1001CD934((uint64_t)v58);
  return v12;
}

uint64_t sub_1002BDA44()
{
  return sub_1001CD9A4((void (*)(void))&_swift_release, 48);
}

uint64_t sub_1002BDA60()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 72)) {
    sub_100014524(v0 + 48);
  }

  return _swift_deallocObject(v0, 97, 7);
}

uint64_t sub_1002BDAB0()
{
  return sub_1001CD9A4((void (*)(void))&_swift_bridgeObjectRelease, 49);
}

unint64_t sub_1002BDACC()
{
  unint64_t result = qword_10065C3D8;
  if (!qword_10065C3D8)
  {
    sub_10017B924(&qword_10065C3D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065C3D8);
  }
  return result;
}

uint64_t sub_1002BDB28(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002BDB90(uint64_t a1)
{
  uint64_t updated = type metadata accessor for MarketplaceUpdateTemplate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(updated - 8) + 8))(a1, updated);
  return a1;
}

uint64_t sub_1002BDBEC(uint64_t a1)
{
  uint64_t v2 = sub_1000172F8(&qword_10065C3C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002BDC4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10019B17C(a1, a2);
}

uint64_t sub_1002BDC78@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 40);
  return swift_retain();
}

uint64_t sub_1002BDC98@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 48);
  return result;
}

uint64_t sub_1002BDCA4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = type metadata accessor for ADPInstallConfiguration.Storage(0);
  *a2 = *(unsigned char *)(a1 + *(int *)(result + 40));
  return result;
}

uint64_t sub_1002BDCEC(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for ADPInstallConfiguration.Storage(0);
  *(unsigned char *)(a1 + *(int *)(result + 40)) = a2;
  return result;
}

uint64_t sub_1002BDD30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ADPInstallConfiguration.Storage(0);
  return sub_100017238(a1 + *(int *)(v4 + 36), a2, &qword_10065B810);
}

uint64_t sub_1002BDD84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ADPInstallConfiguration.Storage(0);
  return sub_1002BEAC4(a2, a1 + *(int *)(v4 + 36));
}

uint64_t sub_1002BDDD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + *(int *)(type metadata accessor for ADPInstallConfiguration.Storage(0) + 28);
  uint64_t v4 = type metadata accessor for AppInstallRequestType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, v3, v4);
}

uint64_t sub_1002BDE50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ADPInstallConfiguration.Storage(0);
  uint64_t v5 = a1 + *(int *)(v4 + 28);
  uint64_t v6 = type metadata accessor for AppInstallRequestType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(v5, a2, v6);
  uint64_t result = AppInstallRequestType.requiresInstallSheet.getter();
  *(unsigned char *)(a1 + *(int *)(v4 + 40)) = result & 1;
  return result;
}

uint64_t sub_1002BDEEC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(a1 + *(int *)(type metadata accessor for ADPInstallConfiguration.Storage(0) + 32));
  uint64_t v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1002BDF3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + *(int *)(type metadata accessor for ADPInstallConfiguration.Storage(0) + 32));
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a2;
  v5[1] = a3;
  return result;
}

BOOL sub_1002BDF9C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v11[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage);
  uint64_t v6 = v5 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v5 + 16);
  uint64_t v7 = (os_unfair_lock_s *)(v5 + ((*(unsigned int *)(*(void *)v5 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v7);
  sub_1002BDC4C(v6, (uint64_t)v12);
  os_unfair_lock_unlock(v7);
  sub_1000172F8(&qword_10065C450);
  if (!swift_dynamicCast()) {
    return 0;
  }
  swift_bridgeObjectRelease();
  sub_100017238(v1 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_referrer, (uint64_t)v4, &qword_10065C3C0);
  uint64_t v8 = type metadata accessor for URL();
  BOOL v9 = (*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) != 1;
  sub_1002BDBEC((uint64_t)v4);
  return v9;
}

void sub_1002BE140(id a1)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage);
  uint64_t v4 = (uint64_t *)(v3 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v3 + 16));
  uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_1002BDC4C((uint64_t)v4, (uint64_t)v18);
  os_unfair_lock_unlock(v5);
  sub_1000172F8(&qword_10065C450);
  if (swift_dynamicCast())
  {
    id v6 = objc_allocWithZone((Class)LSApplicationRecord);
    id v7 = sub_1003DB240(v16, v17, 0);
    uint64_t v8 = v7;
    if (v7)
    {
      id v9 = [v7 iTunesMetadata];
      id v10 = [v9 storeItemIdentifier];

      if (v10 == a1)
      {
        uint64_t v11 = sub_1004CF23C();
        if (v12)
        {
          uint64_t v13 = v11;
          uint64_t v14 = v12;
          v18[3] = &type metadata for WebDistributor;
          unint64_t v19 = sub_1002BEA38();
          v18[0] = v13;
          v18[1] = v14;
          __chkstk_darwin(v19);
          swift_bridgeObjectRetain();
          os_unfair_lock_lock(v5);
          sub_1002BEA8C(v4);
          os_unfair_lock_unlock(v5);
          sub_100014524((uint64_t)v18);
          uint64_t v15 = swift_bridgeObjectRelease();
          __chkstk_darwin(v15);
          os_unfair_lock_lock(v5);
          sub_1002BEAB8((uint64_t)v4);
          os_unfair_lock_unlock(v5);
          sub_1002BE38C();
        }
      }
    }
  }
}

uint64_t sub_1002BE38C()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage);
  uint64_t v2 = v1 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v1 + 16);
  uint64_t v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(void *)v1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  sub_1002BDC4C(v2, (uint64_t)v14);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_accountID);
  unint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_accountID + 8);
  char v6 = *(unsigned char *)(v0 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_allowAccountPrompt);
  id v7 = *(void **)(v0 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_logKey);
  uint64_t v8 = self;
  swift_bridgeObjectRetain();
  id v9 = v7;
  id v10 = [v8 ephemeralSessionConfiguration];
  [v10 setHTTPShouldSetCookies:0];
  [v10 setHTTPCookieAcceptPolicy:1];
  [v10 setRequestCachePolicy:1];
  sub_100373694(1);
  id v11 = [self sessionWithConfiguration:v10];

  type metadata accessor for PlainHTTP();
  uint64_t v12 = swift_allocObject();
  *(unsigned char *)(v12 + 24) = 0;
  *(void *)(v12 + 16) = v11;
  type metadata accessor for DecoratedHTTP();
  swift_allocObject();
  sub_1002C20CC(v12, (uint64_t)v14, v4, v5, v6, v9);
  os_unfair_lock_lock(v3);
  sub_1002BEB2C(v2);
  os_unfair_lock_unlock(v3);
  return swift_release();
}

uint64_t sub_1002BE5A4()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_id;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = v0 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_url;
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  sub_1002BDBEC(v0 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_referrer);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  sub_10018AE44(*(void *)(v0 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_authenticationContextData), *(void *)(v0+ OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_authenticationContextData+ 8));
  swift_release();
  swift_release();
  sub_1002BDBEC(v0 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_appShareURL);
  swift_release();
  return v0;
}

uint64_t sub_1002BE7E8()
{
  sub_1002BE5A4();

  return swift_deallocClassInstance();
}

uint64_t sub_1002BE840()
{
  return type metadata accessor for ADPInstallConfiguration(0);
}

uint64_t type metadata accessor for ADPInstallConfiguration(uint64_t a1)
{
  return sub_10019B200(a1, qword_10065F300);
}

void sub_1002BE868()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for URL();
    if (v1 <= 0x3F)
    {
      sub_1002C1A10(319, (unint64_t *)&qword_100661BB0, (void (*)(uint64_t))&type metadata accessor for URL);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t type metadata accessor for ADPInstallConfiguration.Storage(uint64_t a1)
{
  return sub_10019B200(a1, (uint64_t *)&unk_10065F4B8);
}

unint64_t sub_1002BEA38()
{
  unint64_t result = qword_10065F450;
  if (!qword_10065F450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065F450);
  }
  return result;
}

uint64_t *sub_1002BEA8C(uint64_t *a1)
{
  return sub_1002553AC(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_1002BEAB8(uint64_t result)
{
  *(unsigned char *)(result + 48) = *(unsigned char *)(v1 + 16);
  return result;
}

uint64_t sub_1002BEAC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_10065B810);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002BEB2C(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a1 + 40) = v3;
  return result;
}

uint64_t sub_1002BEB78(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _OWORD *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,unint64_t a28,unsigned __int8 a29,unsigned __int8 a30,uint64_t a31,uint64_t a32,unsigned __int8 a33,uint64_t a34,unsigned __int8 a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t v111 = a8;
  uint64_t v112 = a7;
  uint64_t v106 = a6;
  uint64_t v105 = a5;
  uint64_t v102 = a3;
  id v90 = a2;
  uint64_t v114 = a16;
  uint64_t v115 = a15;
  uint64_t v122 = a37;
  uint64_t v104 = a36;
  int v103 = a35;
  uint64_t v101 = a34;
  int v100 = a33;
  uint64_t v99 = a32;
  uint64_t v98 = a31;
  int v97 = a30;
  int v96 = a29;
  unint64_t v118 = a28;
  uint64_t v119 = a27;
  uint64_t v95 = a26;
  uint64_t v120 = a25;
  uint64_t v121 = a23;
  uint64_t v116 = a22;
  uint64_t v117 = a24;
  uint64_t v94 = a21;
  uint64_t v93 = a20;
  uint64_t v92 = a19;
  uint64_t v91 = a18;
  uint64_t v89 = a13;
  uint64_t v88 = a12;
  uint64_t v109 = a9;
  uint64_t v108 = type metadata accessor for ADPInstallConfiguration.Storage(0);
  __chkstk_darwin(v108);
  uint64_t v87 = (char *)&v87 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126[3] = a39;
  v126[4] = a40;
  long long v44 = sub_10019CE94(v126);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a39 - 8) + 32))(v44, a4, a39);
  uint64_t v45 = a38 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_id;
  uint64_t v46 = type metadata accessor for UUID();
  uint64_t v107 = *(void *)(v46 - 8);
  long long v47 = *(void (**)(uint64_t, uint64_t))(v107 + 16);
  uint64_t v113 = a1;
  uint64_t v110 = v46;
  v47(v45, a1);
  *(void *)(a38 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_logKey) = a2;
  long long v48 = (uint64_t *)(a38 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_oAuthToken);
  uint64_t v49 = v112;
  *long long v48 = v106;
  v48[1] = v49;
  char v50 = (void *)(a38 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_accountID);
  *char v50 = a10;
  v50[1] = a11;
  uint64_t v51 = (void *)(a38 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_clientID);
  uint64_t v52 = v89;
  *uint64_t v51 = v88;
  v51[1] = v52;
  uint64_t v53 = a38 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_url;
  uint64_t v54 = type metadata accessor for URL();
  uint64_t v89 = *(void *)(v54 - 8);
  long long v55 = *(void (**)(uint64_t, uint64_t))(v89 + 16);
  uint64_t v112 = a14;
  uint64_t v106 = v54;
  v55(v53, a14);
  sub_100017238(v115, a38 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_referrer, &qword_10065C3C0);
  *(void *)(a38 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_distributorPreferencesStore) = v114;
  long long v56 = (_OWORD *)(a38 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_device);
  long long v57 = a17[5];
  void v56[4] = a17[4];
  v56[5] = v57;
  *(_OWORD *)((char *)v56 + 95) = *(_OWORD *)((char *)a17 + 95);
  long long v58 = a17[1];
  *long long v56 = *a17;
  v56[1] = v58;
  long long v59 = a17[3];
  v56[2] = a17[2];
  v56[3] = v59;
  *(void *)(a38 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_localizer) = v91;
  *(void *)(a38 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_featureEligibility) = v92;
  *(void *)(a38 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_scheduler) = v93;
  *(void *)(a38 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_updates) = v94;
  *(void *)(a38 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_progressCache) = v116;
  *(void *)(a38 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_clientRegistry) = v121;
  long long v60 = (void *)(a38 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_bag);
  uint64_t v61 = v120;
  *long long v60 = v117;
  v60[1] = v61;
  void v60[2] = v95;
  char v62 = (void *)(a38
                 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_authenticationContextData);
  unint64_t v63 = v118;
  void *v62 = v119;
  v62[1] = v63;
  *(unsigned char *)(a38 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_userInitiatedOverride) = v96;
  *(unsigned char *)(a38 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_allowAccountPrompt) = v97;
  *(void *)(a38 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_approvedDeveloperStore) = v102;
  *(void *)(a38 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_certificateStore) = v98;
  uint64_t v64 = a38 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_originallyRequestedVersion;
  *(void *)uint64_t v64 = v99;
  *(unsigned char *)(v64 + 8) = v100 & 1;
  uint64_t v65 = a38 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_itemIDFromButtonConfiguration;
  *(void *)uint64_t v65 = v101;
  *(unsigned char *)(v65 + 8) = v103 & 1;
  *(void *)(a38 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_installDatabase) = v104;
  uint64_t v66 = v105;
  sub_100017238(v122, a38 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_appShareURL, &qword_10065C3C0);
  id v67 = v90;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  sub_10018B2A8(v119, v118);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v68 = v66;
  if (AppInstallRequestType.requiresInstallSheet.getter())
  {
    sub_10019B17C((uint64_t)v126, (uint64_t)v125);
    sub_1000172F8(&qword_10065C450);
    int v69 = swift_dynamicCast();
    uint64_t v70 = v115;
    uint64_t v71 = v89;
    uint64_t v72 = (uint64_t)v87;
    if (v69)
    {
      uint64_t v73 = v123;
      uint64_t v74 = v124;
      os_log_type_t v75 = (void *)sub_100551B90();
      LOBYTE(v73) = sub_10054E494(v73, v74, v75);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v76 = v73 ^ 1;
    }
    else
    {
      char v76 = 1;
    }
  }
  else
  {
    char v76 = 0;
    uint64_t v70 = v115;
    uint64_t v71 = v89;
    uint64_t v72 = (uint64_t)v87;
  }
  sub_10019B17C((uint64_t)v126, v72);
  uint64_t v77 = (int *)v108;
  uint64_t v78 = v72 + *(int *)(v108 + 28);
  uint64_t v79 = type metadata accessor for AppInstallRequestType();
  uint64_t v80 = *(void *)(v79 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 16))(v78, v68, v79);
  uint64_t v81 = v72 + v77[9];
  uint64_t v82 = type metadata accessor for MediaAPIMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v81, 1, 1, v82);
  *(void *)(v72 + 40) = 0;
  *(unsigned char *)(v72 + 48) = 0;
  unint64_t v83 = (void *)(v72 + v77[8]);
  uint64_t v84 = v109;
  *unint64_t v83 = v111;
  v83[1] = v84;
  *(unsigned char *)(v72 + v77[10]) = v76 & 1;
  sub_1000172F8(&qword_10065F458);
  uint64_t v85 = swift_allocObject();
  *(_DWORD *)(v85 + ((*(unsigned int *)(*(void *)v85 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_1002BFC94(v72, v85 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v85 + 16));
  sub_1002C0DA8(v72, type metadata accessor for ADPInstallConfiguration.Storage);
  sub_1002BDBEC(v122);
  sub_1002BDBEC(v70);
  (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v112, v106);
  (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v68, v79);
  sub_100014524((uint64_t)v126);
  (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v113, v110);
  *(void *)(a38 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage) = v85;
  return a38;
}

uint64_t sub_1002BF414(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t a19, unsigned __int8 a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v91 = a8;
  uint64_t v94 = a7;
  uint64_t v93 = a6;
  uint64_t v92 = a5;
  uint64_t v107 = a4;
  uint64_t v95 = a3;
  id v90 = a2;
  uint64_t v102 = a1;
  long long v89 = a9;
  uint64_t v87 = a10;
  uint64_t v86 = a11;
  uint64_t v88 = a16;
  uint64_t v83 = a17;
  uint64_t v84 = a18;
  unint64_t v85 = a19;
  int v82 = a20;
  uint64_t v81 = a21;
  uint64_t v74 = a24;
  uint64_t v108 = a23;
  uint64_t v104 = a12;
  uint64_t v105 = a15;
  uint64_t v106 = a13;
  int v80 = a22 & 1;
  uint64_t v77 = a26;
  uint64_t v96 = a25;
  uint64_t v26 = sub_1000172F8(&qword_10065C3C0);
  uint64_t v27 = __chkstk_darwin(v26 - 8);
  uint64_t v99 = (uint64_t)v63 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v97 = (uint64_t)v63 - v29;
  uint64_t v101 = type metadata accessor for URL();
  uint64_t v100 = *(void *)(v101 - 8);
  __chkstk_darwin(v101);
  long long v31 = (char *)v63 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = v31;
  uint64_t v32 = type metadata accessor for AppInstallRequestType();
  uint64_t v75 = v32;
  uint64_t v76 = *(void *)(v32 - 8);
  uint64_t v33 = v76;
  __chkstk_darwin(v32);
  long long v35 = (char *)v63 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = v35;
  uint64_t v36 = type metadata accessor for UUID();
  uint64_t v78 = v36;
  uint64_t v79 = *(void *)(v36 - 8);
  uint64_t v37 = v79;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v40 = (char *)v63 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = v40;
  uint64_t v41 = *(void *)(a25 - 8);
  uint64_t v42 = __chkstk_darwin(v38);
  uint64_t v98 = (uint64_t)v63 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  int v103 = (char *)v63 - v44;
  uint64_t v73 = v41;
  (*(void (**)(void))(v41 + 32))();
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v40, v102, v36);
  uint64_t v69 = *(void *)(a14 + 280);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v35, v107, v32);
  (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v31, v104, v101);
  sub_100017238(v106, v97, &qword_10065C3C0);
  uint64_t v68 = *(void *)(a14 + 288);
  long long v45 = *(_OWORD *)(a14 + 112);
  unsigned char v109[4] = *(_OWORD *)(a14 + 96);
  *(_OWORD *)uint64_t v110 = v45;
  *(_OWORD *)&v110[15] = *(_OWORD *)(a14 + 127);
  long long v46 = *(_OWORD *)(a14 + 80);
  v109[2] = *(_OWORD *)(a14 + 64);
  v109[3] = v46;
  long long v47 = *(_OWORD *)(a14 + 48);
  v109[0] = *(_OWORD *)(a14 + 32);
  v109[1] = v47;
  uint64_t v48 = *(void *)(a14 + 152);
  uint64_t v49 = *(void *)(a14 + 192);
  uint64_t v50 = *(void *)(a14 + 200);
  uint64_t v65 = *(void *)(v49 + 32);
  uint64_t v51 = *(void *)(a14 + 224);
  uint64_t v67 = *(void *)(a14 + 216);
  uint64_t v95 = *(void *)(a14 + 16);
  uint64_t v64 = *(void *)(v49 + 160);
  uint64_t v66 = *(void *)(a14 + 168);
  sub_100017238(v108, v99, &qword_10065C3C0);
  uint64_t v52 = swift_allocObject();
  uint64_t v53 = *(void (**)(uint64_t, char *, uint64_t))(v41 + 16);
  uint64_t v54 = v96;
  v53(v98, v103, v96);
  swift_retain();
  swift_retain();
  sub_10018AB28((uint64_t)v109);
  swift_retain();
  uint64_t v55 = v48;
  swift_retain();
  swift_retain();
  uint64_t v56 = v50;
  v63[1] = v50;
  swift_retain();
  v63[2] = v51;
  swift_retain();
  uint64_t v57 = v95;
  swift_retain();
  uint64_t v58 = v64;
  swift_retain();
  uint64_t v59 = v66;
  swift_retain();
  uint64_t v60 = v84;
  unint64_t v61 = v85;
  uint64_t v99 = sub_1002BEB78((uint64_t)v72, v90, v69, v98, (uint64_t)v71, v92, v93, v94, v91, v89, *((uint64_t *)&v89 + 1), v87, v86, (uint64_t)v70, v97, v68, v109, v67, v55,
          v65,
          v56,
          v51,
          v57,
          v105,
          v88,
          v83,
          v84,
          v85,
          2u,
          v82,
          v58,
          0,
          1u,
          v81,
          v80,
          v59,
          v99,
          v52,
          v54,
          v77);
  swift_release();
  swift_release();
  sub_10018AE44(v60, v61);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  sub_1002BDBEC(v108);
  sub_1002BDBEC(v106);
  (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v104, v101);
  (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v107, v75);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v103, v96);
  (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v102, v78);
  return v99;
}

uint64_t sub_1002BFC94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ADPInstallConfiguration.Storage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002BFCF8(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v24 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    *(void *)(v4 + 40) = a2[5];
    *(unsigned char *)(v4 + 48) = *((unsigned char *)a2 + 48);
    uint64_t v8 = a3[7];
    uint64_t v9 = v4 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for AppInstallRequestType();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_retain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[8];
    uint64_t v14 = a3[9];
    uint64_t v15 = (void *)(v4 + v13);
    uint64_t v16 = (uint64_t *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    char v18 = (void *)(v4 + v14);
    unint64_t v19 = (uint64_t *)((char *)a2 + v14);
    long long v20 = (int *)type metadata accessor for MediaAPIMetadata();
    uint64_t v21 = *((void *)v20 - 1);
    long long v22 = *(unsigned int (**)(void *, uint64_t, int *))(v21 + 48);
    swift_bridgeObjectRetain();
    if (v22(v19, 1, v20))
    {
      uint64_t v23 = sub_1000172F8(&qword_10065B810);
      memcpy(v18, v19, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      uint64_t v50 = v21;
      uint64_t v25 = v19[1];
      *char v18 = *v19;
      v18[1] = v25;
      uint64_t v26 = v19[3];
      v18[2] = v19[2];
      v18[3] = v26;
      uint64_t v27 = v19[5];
      void v18[4] = v19[4];
      v18[5] = v27;
      uint64_t v28 = v19[7];
      v18[6] = v19[6];
      v18[7] = v28;
      uint64_t v29 = v20[7];
      __dst = (char *)v18 + v29;
      uint64_t v52 = (char *)v19 + v29;
      uint64_t v30 = type metadata accessor for URL();
      uint64_t v48 = *(void *)(v30 - 8);
      uint64_t v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v51(v52, 1, v30))
      {
        uint64_t v31 = sub_1000172F8(&qword_10065C3C0);
        memcpy(__dst, v52, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v48 + 16))(__dst, v52, v30);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(__dst, 0, 1, v30);
      }
      *((unsigned char *)v18 + v20[8]) = *((unsigned char *)v19 + v20[8]);
      uint64_t v32 = v20[9];
      uint64_t v33 = (char *)v18 + v32;
      uint64_t v34 = (char *)v19 + v32;
      *(void *)uint64_t v33 = *(void *)v34;
      v33[8] = v34[8];
      uint64_t v35 = v20[10];
      uint64_t v36 = (void *)((char *)v18 + v35);
      uint64_t v37 = (void *)((char *)v19 + v35);
      uint64_t v38 = v37[1];
      void *v36 = *v37;
      v36[1] = v38;
      uint64_t v39 = v20[11];
      uint64_t v40 = (void *)((char *)v18 + v39);
      uint64_t v41 = (void *)((char *)v19 + v39);
      uint64_t v42 = v41[1];
      void *v40 = *v41;
      v40[1] = v42;
      *(void *)((char *)v18 + v20[12]) = *(void *)((char *)v19 + v20[12]);
      *(void *)((char *)v18 + v20[13]) = *(void *)((char *)v19 + v20[13]);
      uint64_t v43 = v20[14];
      uint64_t v44 = (void *)((char *)v18 + v43);
      long long v45 = (void *)((char *)v19 + v43);
      uint64_t v46 = v45[1];
      *uint64_t v44 = *v45;
      v44[1] = v46;
      *(void *)((char *)v18 + v20[15]) = *(void *)((char *)v19 + v20[15]);
      uint64_t v53 = *(void (**)(void *, void, uint64_t, int *))(v50 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v53(v18, 0, 1, v20);
    }
    *(unsigned char *)(v4 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  }
  return v4;
}

uint64_t sub_1002C010C(uint64_t a1, uint64_t a2)
{
  sub_100014524(a1);
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for AppInstallRequestType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + *(int *)(a2 + 36);
  uint64_t v7 = type metadata accessor for MediaAPIMetadata();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = v6 + *(int *)(v7 + 28);
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v11 = *(void *)(v10 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1002C02EC(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v7 = a3[7];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for AppInstallRequestType();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_retain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[8];
  uint64_t v13 = a3[9];
  uint64_t v14 = (void *)(a1 + v12);
  uint64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = (void *)(a1 + v13);
  char v18 = (void *)(a2 + v13);
  unint64_t v19 = (int *)type metadata accessor for MediaAPIMetadata();
  uint64_t v20 = *((void *)v19 - 1);
  uint64_t v21 = *(unsigned int (**)(void *, uint64_t, int *))(v20 + 48);
  swift_bridgeObjectRetain();
  if (v21(v18, 1, v19))
  {
    uint64_t v22 = sub_1000172F8(&qword_10065B810);
    memcpy(v17, v18, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    uint64_t v51 = v20;
    uint64_t v52 = a3;
    uint64_t v23 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v23;
    uint64_t v24 = v18[3];
    v17[2] = v18[2];
    v17[3] = v24;
    uint64_t v25 = v18[5];
    v17[4] = v18[4];
    v17[5] = v25;
    uint64_t v26 = v18[7];
    v17[6] = v18[6];
    v17[7] = v26;
    uint64_t v27 = v19[7];
    __dst = (char *)v17 + v27;
    uint64_t v48 = (char *)v18 + v27;
    uint64_t v28 = type metadata accessor for URL();
    uint64_t v47 = *(void *)(v28 - 8);
    uint64_t v49 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v49(v48, 1, v28))
    {
      uint64_t v29 = sub_1000172F8(&qword_10065C3C0);
      memcpy(__dst, v48, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v47 + 16))(__dst, v48, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(__dst, 0, 1, v28);
    }
    *((unsigned char *)v17 + v19[8]) = *((unsigned char *)v18 + v19[8]);
    uint64_t v30 = v19[9];
    uint64_t v31 = (char *)v17 + v30;
    uint64_t v32 = (char *)v18 + v30;
    *(void *)uint64_t v31 = *(void *)v32;
    v31[8] = v32[8];
    uint64_t v33 = v19[10];
    uint64_t v34 = (void *)((char *)v17 + v33);
    uint64_t v35 = (void *)((char *)v18 + v33);
    uint64_t v36 = v35[1];
    *uint64_t v34 = *v35;
    v34[1] = v36;
    uint64_t v37 = v19[11];
    uint64_t v38 = (void *)((char *)v17 + v37);
    uint64_t v39 = (void *)((char *)v18 + v37);
    uint64_t v40 = v39[1];
    *uint64_t v38 = *v39;
    v38[1] = v40;
    *(void *)((char *)v17 + v19[12]) = *(void *)((char *)v18 + v19[12]);
    *(void *)((char *)v17 + v19[13]) = *(void *)((char *)v18 + v19[13]);
    uint64_t v41 = v19[14];
    uint64_t v42 = (void *)((char *)v17 + v41);
    uint64_t v43 = (void *)((char *)v18 + v41);
    uint64_t v44 = v43[1];
    *uint64_t v42 = *v43;
    v42[1] = v44;
    *(void *)((char *)v17 + v19[15]) = *(void *)((char *)v18 + v19[15]);
    long long v45 = *(void (**)(void *, void, uint64_t, int *))(v51 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v45(v17, 0, 1, v19);
    a3 = v52;
  }
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_1002C06A4(uint64_t a1, uint64_t a2, int *a3)
{
  sub_1002553AC((uint64_t *)a1, (uint64_t *)a2);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v6 = a3[7];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for AppInstallRequestType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[8];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[9];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  uint64_t v16 = (int *)type metadata accessor for MediaAPIMetadata();
  uint64_t v17 = *((void *)v16 - 1);
  char v18 = *(uint64_t (**)(void *, uint64_t, int *))(v17 + 48);
  int v19 = v18(v14, 1, v16);
  int v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (v20)
    {
      sub_1002C0DA8((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for MediaAPIMetadata);
      goto LABEL_7;
    }
    uint64_t v67 = a3;
    *uint64_t v14 = *v15;
    v14[1] = v15[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    void v14[2] = v15[2];
    v14[3] = v15[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    void v14[4] = v15[4];
    v14[5] = v15[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v14[6] = v15[6];
    v14[7] = v15[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v25 = v16[7];
    uint64_t v26 = (char *)v14 + v25;
    uint64_t v27 = (char *)v15 + v25;
    uint64_t v28 = type metadata accessor for URL();
    uint64_t v64 = *(void *)(v28 - 8);
    uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v64 + 48);
    __dsta = v26;
    LODWORD(v26) = v29(v26, 1, v28);
    int v30 = v29(v27, 1, v28);
    if (v26)
    {
      if (!v30)
      {
        (*(void (**)(void *, char *, uint64_t))(v64 + 16))(__dsta, v27, v28);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v64 + 56))(__dsta, 0, 1, v28);
        goto LABEL_18;
      }
      size_t v31 = *(void *)(*(void *)(sub_1000172F8(&qword_10065C3C0) - 8) + 64);
      uint64_t v32 = __dsta;
    }
    else
    {
      if (!v30)
      {
        (*(void (**)(void *, char *, uint64_t))(v64 + 24))(__dsta, v27, v28);
        goto LABEL_18;
      }
      (*(void (**)(void *, uint64_t))(v64 + 8))(__dsta, v28);
      size_t v31 = *(void *)(*(void *)(sub_1000172F8(&qword_10065C3C0) - 8) + 64);
      uint64_t v32 = __dsta;
    }
    memcpy(v32, v27, v31);
LABEL_18:
    a3 = v67;
    *((unsigned char *)v14 + v16[8]) = *((unsigned char *)v15 + v16[8]);
    uint64_t v47 = v16[9];
    uint64_t v48 = (char *)v14 + v47;
    uint64_t v49 = (char *)v15 + v47;
    uint64_t v50 = *(void *)v49;
    v48[8] = v49[8];
    *(void *)uint64_t v48 = v50;
    uint64_t v51 = v16[10];
    uint64_t v52 = (void *)((char *)v14 + v51);
    uint64_t v53 = (void *)((char *)v15 + v51);
    *uint64_t v52 = *v53;
    v52[1] = v53[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v54 = v16[11];
    uint64_t v55 = (void *)((char *)v14 + v54);
    uint64_t v56 = (void *)((char *)v15 + v54);
    void *v55 = *v56;
    v55[1] = v56[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)((char *)v14 + v16[12]) = *(void *)((char *)v15 + v16[12]);
    *(void *)((char *)v14 + v16[13]) = *(void *)((char *)v15 + v16[13]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v57 = v16[14];
    uint64_t v58 = (void *)((char *)v14 + v57);
    uint64_t v59 = (void *)((char *)v15 + v57);
    *uint64_t v58 = *v59;
    v58[1] = v59[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)((char *)v14 + v16[15]) = *(void *)((char *)v15 + v16[15]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  if (v20)
  {
LABEL_7:
    uint64_t v24 = sub_1000172F8(&qword_10065B810);
    memcpy(v14, v15, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_19;
  }
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  void v14[2] = v15[2];
  v14[3] = v15[3];
  void v14[4] = v15[4];
  v14[5] = v15[5];
  v14[6] = v15[6];
  v14[7] = v15[7];
  uint64_t v21 = v16[7];
  __dst = (char *)v14 + v21;
  char v62 = (char *)v15 + v21;
  uint64_t v22 = type metadata accessor for URL();
  uint64_t v61 = *(void *)(v22 - 8);
  unint64_t v63 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v63(v62, 1, v22))
  {
    uint64_t v23 = sub_1000172F8(&qword_10065C3C0);
    memcpy(__dst, v62, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v61 + 16))(__dst, v62, v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(__dst, 0, 1, v22);
  }
  *((unsigned char *)v14 + v16[8]) = *((unsigned char *)v15 + v16[8]);
  uint64_t v33 = v16[9];
  uint64_t v34 = (char *)v14 + v33;
  uint64_t v35 = (char *)v15 + v33;
  uint64_t v36 = *(void *)v35;
  v34[8] = v35[8];
  *(void *)uint64_t v34 = v36;
  uint64_t v37 = v16[10];
  uint64_t v38 = (void *)((char *)v14 + v37);
  uint64_t v39 = (void *)((char *)v15 + v37);
  *uint64_t v38 = *v39;
  v38[1] = v39[1];
  uint64_t v40 = v16[11];
  uint64_t v41 = (void *)((char *)v14 + v40);
  uint64_t v42 = (void *)((char *)v15 + v40);
  *uint64_t v41 = *v42;
  v41[1] = v42[1];
  *(void *)((char *)v14 + v16[12]) = *(void *)((char *)v15 + v16[12]);
  *(void *)((char *)v14 + v16[13]) = *(void *)((char *)v15 + v16[13]);
  uint64_t v43 = v16[14];
  uint64_t v44 = (void *)((char *)v14 + v43);
  long long v45 = (void *)((char *)v15 + v43);
  *uint64_t v44 = *v45;
  v44[1] = v45[1];
  *(void *)((char *)v14 + v16[15]) = *(void *)((char *)v15 + v16[15]);
  uint64_t v46 = *(void (**)(void *, void, uint64_t, int *))(v17 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v46(v14, 0, 1, v16);
LABEL_19:
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_1002C0DA8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1002C0E08(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for AppInstallRequestType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  uint64_t v13 = (_OWORD *)(a1 + v12);
  uint64_t v14 = (_OWORD *)(a2 + v12);
  uint64_t v15 = (int *)type metadata accessor for MediaAPIMetadata();
  uint64_t v16 = *((void *)v15 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_1000172F8(&qword_10065B810);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    long long v18 = v14[1];
    _OWORD *v13 = *v14;
    v13[1] = v18;
    long long v19 = v14[3];
    v13[2] = v14[2];
    v13[3] = v19;
    uint64_t v20 = v15[7];
    __dst = (char *)v13 + v20;
    uint64_t v21 = (char *)v14 + v20;
    uint64_t v22 = type metadata accessor for URL();
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      uint64_t v24 = sub_1000172F8(&qword_10065C3C0);
      memcpy(__dst, v21, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(__dst, v21, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(__dst, 0, 1, v22);
    }
    *((unsigned char *)v13 + v15[8]) = *((unsigned char *)v14 + v15[8]);
    uint64_t v25 = v15[9];
    uint64_t v26 = (char *)v13 + v25;
    uint64_t v27 = (char *)v14 + v25;
    *(void *)uint64_t v26 = *(void *)v27;
    v26[8] = v27[8];
    *(_OWORD *)((char *)v13 + v15[10]) = *(_OWORD *)((char *)v14 + v15[10]);
    *(_OWORD *)((char *)v13 + v15[11]) = *(_OWORD *)((char *)v14 + v15[11]);
    *(void *)((char *)v13 + v15[12]) = *(void *)((char *)v14 + v15[12]);
    *(void *)((char *)v13 + v15[13]) = *(void *)((char *)v14 + v15[13]);
    *(_OWORD *)((char *)v13 + v15[14]) = *(_OWORD *)((char *)v14 + v15[14]);
    *(void *)((char *)v13 + v15[15]) = *(void *)((char *)v14 + v15[15]);
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_1002C10E4(uint64_t a1, uint64_t a2, int *a3)
{
  sub_100014524(a1);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for AppInstallRequestType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  void *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[9];
  long long v18 = (void *)(a1 + v17);
  long long v19 = (void *)(a2 + v17);
  uint64_t v20 = (int *)type metadata accessor for MediaAPIMetadata();
  uint64_t v21 = *((void *)v20 - 1);
  uint64_t v22 = *(uint64_t (**)(void *, uint64_t, int *))(v21 + 48);
  int v23 = v22(v18, 1, v20);
  int v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (v24)
    {
      sub_1002C0DA8((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for MediaAPIMetadata);
      goto LABEL_7;
    }
    uint64_t v33 = v19[1];
    *long long v18 = *v19;
    v18[1] = v33;
    swift_bridgeObjectRelease();
    uint64_t v34 = v19[3];
    v18[2] = v19[2];
    v18[3] = v34;
    swift_bridgeObjectRelease();
    uint64_t v35 = v19[5];
    void v18[4] = v19[4];
    v18[5] = v35;
    swift_bridgeObjectRelease();
    uint64_t v36 = v19[7];
    v18[6] = v19[6];
    v18[7] = v36;
    swift_bridgeObjectRelease();
    uint64_t v37 = v20[7];
    uint64_t v38 = (char *)v18 + v37;
    __dsta = (char *)v19 + v37;
    uint64_t v39 = type metadata accessor for URL();
    uint64_t v66 = *(void *)(v39 - 8);
    uint64_t v67 = v38;
    uint64_t v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48);
    LODWORD(v38) = v40(v38, 1, v39);
    int v41 = v40(__dsta, 1, v39);
    if (v38)
    {
      if (!v41)
      {
        (*(void (**)(void *, char *, uint64_t))(v66 + 32))(v67, __dsta, v39);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v66 + 56))(v67, 0, 1, v39);
        goto LABEL_18;
      }
      size_t v42 = *(void *)(*(void *)(sub_1000172F8(&qword_10065C3C0) - 8) + 64);
      uint64_t v43 = v67;
    }
    else
    {
      if (!v41)
      {
        (*(void (**)(void *, char *, uint64_t))(v66 + 40))(v67, __dsta, v39);
        goto LABEL_18;
      }
      (*(void (**)(void *, uint64_t))(v66 + 8))(v67, v39);
      size_t v42 = *(void *)(*(void *)(sub_1000172F8(&qword_10065C3C0) - 8) + 64);
      uint64_t v43 = v67;
    }
    memcpy(v43, __dsta, v42);
LABEL_18:
    *((unsigned char *)v18 + v20[8]) = *((unsigned char *)v19 + v20[8]);
    uint64_t v47 = v20[9];
    uint64_t v48 = (char *)v18 + v47;
    uint64_t v49 = (char *)v19 + v47;
    *(void *)uint64_t v48 = *(void *)v49;
    v48[8] = v49[8];
    uint64_t v50 = v20[10];
    uint64_t v51 = (void *)((char *)v18 + v50);
    uint64_t v52 = (void *)((char *)v19 + v50);
    uint64_t v54 = *v52;
    uint64_t v53 = v52[1];
    *uint64_t v51 = v54;
    v51[1] = v53;
    swift_bridgeObjectRelease();
    uint64_t v55 = v20[11];
    uint64_t v56 = (void *)((char *)v18 + v55);
    uint64_t v57 = (void *)((char *)v19 + v55);
    uint64_t v59 = *v57;
    uint64_t v58 = v57[1];
    *uint64_t v56 = v59;
    v56[1] = v58;
    swift_bridgeObjectRelease();
    *(void *)((char *)v18 + v20[12]) = *(void *)((char *)v19 + v20[12]);
    *(void *)((char *)v18 + v20[13]) = *(void *)((char *)v19 + v20[13]);
    swift_bridgeObjectRelease();
    uint64_t v60 = v20[14];
    uint64_t v61 = (void *)((char *)v18 + v60);
    char v62 = (void *)((char *)v19 + v60);
    uint64_t v64 = *v62;
    uint64_t v63 = v62[1];
    void *v61 = v64;
    v61[1] = v63;
    swift_bridgeObjectRelease();
    *(void *)((char *)v18 + v20[15]) = *(void *)((char *)v19 + v20[15]);
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  if (v24)
  {
LABEL_7:
    uint64_t v32 = sub_1000172F8(&qword_10065B810);
    memcpy(v18, v19, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_19;
  }
  long long v25 = *((_OWORD *)v19 + 1);
  *(_OWORD *)long long v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v25;
  long long v26 = *((_OWORD *)v19 + 3);
  *((_OWORD *)v18 + 2) = *((_OWORD *)v19 + 2);
  *((_OWORD *)v18 + 3) = v26;
  uint64_t v27 = v20[7];
  __dst = (char *)v18 + v27;
  uint64_t v28 = (char *)v19 + v27;
  uint64_t v29 = type metadata accessor for URL();
  uint64_t v30 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    uint64_t v31 = sub_1000172F8(&qword_10065C3C0);
    memcpy(__dst, v28, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(__dst, v28, v29);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(__dst, 0, 1, v29);
  }
  *((unsigned char *)v18 + v20[8]) = *((unsigned char *)v19 + v20[8]);
  uint64_t v44 = v20[9];
  long long v45 = (char *)v18 + v44;
  uint64_t v46 = (char *)v19 + v44;
  *(void *)long long v45 = *(void *)v46;
  v45[8] = v46[8];
  *(_OWORD *)((char *)v18 + v20[10]) = *(_OWORD *)((char *)v19 + v20[10]);
  *(_OWORD *)((char *)v18 + v20[11]) = *(_OWORD *)((char *)v19 + v20[11]);
  *(void *)((char *)v18 + v20[12]) = *(void *)((char *)v19 + v20[12]);
  *(void *)((char *)v18 + v20[13]) = *(void *)((char *)v19 + v20[13]);
  *(_OWORD *)((char *)v18 + v20[14]) = *(_OWORD *)((char *)v19 + v20[14]);
  *(void *)((char *)v18 + v20[15]) = *(void *)((char *)v19 + v20[15]);
  (*(void (**)(void *, void, uint64_t, int *))(v21 + 56))(v18, 0, 1, v20);
LABEL_19:
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_1002C167C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002C1690);
}

uint64_t sub_1002C1690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for AppInstallRequestType();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 28);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1000172F8(&qword_10065B810);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 36);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_1002C17C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002C17D4);
}

uint64_t sub_1002C17D4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for AppInstallRequestType();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 28);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1000172F8(&qword_10065B810);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 36);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_1002C1904()
{
  type metadata accessor for AppInstallRequestType();
  if (v0 <= 0x3F)
  {
    sub_1002C1A10(319, (unint64_t *)&unk_10065F4C8, (void (*)(uint64_t))type metadata accessor for MediaAPIMetadata);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_1002C1A10(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t type metadata accessor for PurchaseDependencies()
{
  return self;
}

uint64_t sub_1002C1A88(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for URLRequest();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  v3[8] = swift_task_alloc();
  sub_1000172F8(&qword_10065D390);
  v3[9] = swift_task_alloc();
  return _swift_task_switch(sub_1002C1B8C, 0, 0);
}

uint64_t sub_1002C1B8C()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v5 = v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v6 = v4[7];
  uint64_t v7 = v4[8];
  sub_10018AC60(v4 + 4, v6);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[10] = v8;
  v0[11] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v8(v1, v5, v2);
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 16) + **(int **)(v7 + 16));
  uint64_t v9 = (void *)swift_task_alloc();
  v0[12] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1002C1CDC;
  uint64_t v11 = v0[8];
  uint64_t v10 = v0[9];
  return v13(v10, v11, v6, v7);
}

uint64_t sub_1002C1CDC()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v1 = sub_1002C1F60;
  }
  else
  {
    uint64_t v1 = sub_1002C1DF4;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_1002C1DF4()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[10];
  uint64_t v2 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[3];
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v2, 0, 1, v5);
  v1(v3, v6, v5);
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v5);
  uint64_t v8 = v0[9];
  uint64_t v9 = v0[6];
  uint64_t v10 = v0[5];
  uint64_t v11 = v0[2];
  if (v7 == 1)
  {
    (*(void (**)(void, void, void))(v9 + 32))(v0[2], v0[7], v0[5]);
    sub_10001729C(v8, &qword_10065D390);
  }
  else
  {
    (*(void (**)(void, void))(v9 + 8))(v0[7], v0[5]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v11, v8, v10);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_1002C1F60()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[10];
  uint64_t v2 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[3];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v5);
  v1(v3, v6, v5);
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v5);
  uint64_t v8 = v0[9];
  uint64_t v9 = v0[6];
  uint64_t v10 = v0[5];
  uint64_t v11 = v0[2];
  if (v7 == 1)
  {
    (*(void (**)(void, void, void))(v9 + 32))(v0[2], v0[7], v0[5]);
    sub_10001729C(v8, &qword_10065D390);
  }
  else
  {
    (*(void (**)(void, void))(v9 + 8))(v0[7], v0[5]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v11, v8, v10);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_1002C20CC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5, void *a6)
{
  uint64_t v7 = v6;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a6;
  sub_10019B17C(a2, (uint64_t)v29);
  swift_retain();
  id v13 = a6;
  sub_1000172F8(&qword_10065C450);
  if (swift_dynamicCast())
  {
    uint64_t v14 = v27;
    uint64_t v15 = v28;
    uint64_t v16 = type metadata accessor for NativeDecorator();
    uint64_t v17 = (void *)swift_allocObject();
    v17[4] = a4;
    v17[5] = v14;
    v17[6] = v15;
    v17[2] = v13;
    v17[3] = a3;
    uint64_t v25 = v16;
    long long v26 = &off_10063FB30;
    swift_release();
    *(void *)&long long v24 = v17;
LABEL_5:
    sub_100014524(a2);
    sub_10018B164(&v24, v7 + 32);
    sub_100014524((uint64_t)v29);
    return v7;
  }
  uint64_t v23 = a3;
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    uint64_t v19 = *(void *)(v7 + 16);
    uint64_t v20 = type metadata accessor for OAuthDecorator();
    swift_allocObject();
    uint64_t v21 = v13;
    swift_retain();
    uint64_t v22 = sub_1002C258C(v23, a4, v27, v28, a5 & 1, v19, v21);
    uint64_t v25 = v20;
    long long v26 = &off_10063FB50;
    swift_release();

    *(void *)&long long v24 = v22;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002C2288()
{
  swift_release();

  sub_100014524(v0 + 32);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DecoratedHTTP()
{
  return self;
}

uint64_t sub_1002C22F4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v5 + 57) = a4;
  *(void *)(v5 + 64) = a1;
  *(void *)(v5 + 72) = a3;
  *(void *)(v5 + 80) = *v4;
  return _swift_task_switch(sub_1002C2320, 0, 0);
}

uint64_t sub_1002C2320()
{
  char v1 = *(unsigned char *)(v0 + 57);
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(unsigned char *)(v0 + 56) = -1;
  uint64_t v6 = (char *)&dword_10065F848 + dword_10065F848;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1002C23FC;
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 64);
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t, void))v6)(v4, 0, v0 + 16, v3, v1 & 1);
}

uint64_t sub_1002C23FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v4 + 16;
  uint64_t v9 = *v4;
  *(void *)(v9 + 96) = v3;
  swift_task_dealloc();
  sub_10001729C(v8, &qword_10065B8E8);
  if (v3)
  {
    return _swift_task_switch(sub_1002C2574, 0, 0);
  }
  else
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 8);
    return v10(a1, a2, a3);
  }
}

uint64_t sub_1002C2574()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002C258C(uint64_t a1, unint64_t a2, uint64_t a3, NSObject *a4, char a5, uint64_t a6, NSObject *a7)
{
  uint64_t v15 = sub_1000172F8(&qword_10065F858);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  uint64_t v18 = v7
      + OBJC_IVAR____TtC28ManagedAppDistributionDaemonP33_7EC653A4C512B1F4D7EE1900495297C014OAuthDecorator_credential;
  uint64_t v19 = type metadata accessor for OAuthCredential();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  *(void *)(v7 + 136) = a1;
  *(void *)(v7 + 144) = a2;
  *(void *)(v7 + 152) = a3;
  *(void *)(v7 + 160) = a4;
  *(unsigned char *)(v7 + 120) = a5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1003C2ABC(a1, a2, a3, a4, a7, (uint64_t)v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  sub_1002C6780((uint64_t)v17, v18);
  swift_endAccess();
  *(void *)(v7 + 128) = a6;
  *(void *)(v7 + 112) = a7;
  return v7;
}

uint64_t sub_1002C2704(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  uint64_t v4 = type metadata accessor for OAuthCredential();
  v3[15] = v4;
  v3[16] = *(void *)(v4 - 8);
  v3[17] = swift_task_alloc();
  sub_1000172F8(&qword_10065F858);
  v3[18] = swift_task_alloc();
  return _swift_task_switch(sub_1002C27F8, v2, 0);
}

uint64_t sub_1002C27F8()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[14]
     + OBJC_IVAR____TtC28ManagedAppDistributionDaemonP33_7EC653A4C512B1F4D7EE1900495297C014OAuthDecorator_credential;
  swift_beginAccess();
  sub_100017238(v4, v1, &qword_10065F858);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2))
  {
    sub_10001729C(v0[18], &qword_10065F858);
  }
  else
  {
    uint64_t v6 = v0[17];
    uint64_t v5 = v0[18];
    uint64_t v7 = v0[15];
    uint64_t v22 = v0[13];
    sub_1002C67E8(v5, v6);
    sub_10001729C(v5, &qword_10065F858);
    uint64_t v8 = (uint64_t *)(v6 + *(int *)(v7 + 20));
    uint64_t v10 = *v8;
    uint64_t v9 = (void *)v8[1];
    uint64_t v12 = v8[2];
    uint64_t v11 = v8[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1002C6924(v6, (uint64_t (*)(void))type metadata accessor for OAuthCredential);
    sub_1000172F8(&qword_10065F868);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
    *(unsigned char *)(inited + 32) = 0;
    swift_bridgeObjectRetain();
    v14._countAndFlagsBits = 32;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    swift_bridgeObjectRetain();
    v15._countAndFlagsBits = v10;
    v15._object = v9;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    *(void *)(inited + 40) = v12;
    *(void *)(inited + 48) = v11;
    unint64_t v16 = sub_10044B7B4(inited);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(swift_task_alloc() + 16) = v22;
    sub_100458680(v16, (void (*)(uint64_t, uint64_t, uint64_t))sub_1002C6A50);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
  }
  uint64_t v18 = v0[12];
  uint64_t v17 = v0[13];
  uint64_t v19 = type metadata accessor for URLRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v18, v17, v19);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t sub_1002C2AB4(char a1, Swift::String_optional _)
{
  object = _.value._object;
  unint64_t v3 = 0xED00006E6F697461;
  _.value._object = (void *)0x7A69726F68747541;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xEC00000065707954;
      _.value._object = (void *)0x2D746E65746E6F43;
      break;
    case 2:
      unint64_t v3 = 0xEA0000000000746ELL;
      _.value._object = (void *)0x6567412D72657355;
      break;
    case 3:
      unint64_t v3 = 0xE500000000000000;
      _.value._object = (void *)0x65676E6152;
      break;
    default:
      break;
  }
  uint64_t countAndFlagsBits = _.value._countAndFlagsBits;
  _.value._uint64_t countAndFlagsBits = (uint64_t)object;
  unint64_t v5 = v3;
  URLRequest.setValue(_:forHTTPHeaderField:)(*(Swift::String_optional *)((char *)&_ - 8), *(Swift::String *)&_.value._object);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002C2B9C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001729C(v0 + OBJC_IVAR____TtC28ManagedAppDistributionDaemonP33_7EC653A4C512B1F4D7EE1900495297C014OAuthDecorator_credential, &qword_10065F858);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_1002C2C10()
{
  return type metadata accessor for OAuthDecorator();
}

uint64_t type metadata accessor for OAuthDecorator()
{
  uint64_t result = qword_10065F688;
  if (!qword_10065F688) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1002C2C64()
{
  sub_1002C2D30();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1002C2D30()
{
  if (!qword_10065F6A0)
  {
    type metadata accessor for OAuthCredential();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10065F6A0);
    }
  }
}

uint64_t sub_1002C2D88(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = sub_10000B238;
  return sub_1002C2704(a1, a2);
}

uint64_t sub_1002C2E34()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1002C2EC4;
  return sub_1002C3D28();
}

uint64_t sub_1002C2EC4(char a1)
{
  uint64_t v7 = *v2;
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (v1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = a1 & 1;
  }
  return v4(v5);
}

uint64_t sub_1002C2FCC(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[10] = v4;
  v3[11] = *(void *)(v4 - 8);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  return _swift_task_switch(sub_1002C30A0, 0, 0);
}

uint64_t sub_1002C30A0()
{
  uint64_t v1 = (void *)v0[9];
  uint64_t v2 = v1[5];
  v0[14] = v2;
  uint64_t v3 = v1[6];
  v0[15] = v3;
  uint64_t v5 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v6 = v1[2];
  v0[16] = v6;
  swift_bridgeObjectRetain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[17] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1002C3184;
  uint64_t v8 = v0[8];
  return sub_1003D1F0C(v8, v2, v3, v5, v4, v6);
}

uint64_t sub_1002C3184(uint64_t a1)
{
  *(void *)(*(void *)v1 + 144) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1002C3284, 0, 0);
}

uint64_t sub_1002C3284()
{
  uint64_t v64 = v0;
  uint64_t v1 = v0[18];
  if (!v1)
  {
    if (os_variant_has_internal_content())
    {
      static Logger.general.getter();
      swift_retain_n();
      swift_bridgeObjectRetain();
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v12, v13))
      {
        unint64_t v15 = v0[15];
        Swift::String v14 = (void *)v0[16];
        uint64_t type = v0[14];
        uint64_t v56 = v0[11];
        uint64_t v58 = v0[10];
        uint64_t v60 = v0[12];
        uint64_t v16 = swift_slowAlloc();
        uint64_t v17 = (void *)swift_slowAlloc();
        uint64_t v63 = swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 138412546;
        v0[2] = v14;
        id v18 = v14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v17 = v14;
        swift_release_n();
        *(_WORD *)(v16 + 12) = 2082;
        swift_bridgeObjectRetain();
        v0[3] = sub_1000143F4(type, v15, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "[%@] Received no additional headers from %{public}s", (uint8_t *)v16, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v60, v58);
      }
      else
      {
        uint64_t v50 = v0[11];
        uint64_t v49 = v0[12];
        uint64_t v51 = v0[10];
        swift_release_n();
        swift_bridgeObjectRelease_n();

        (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
LABEL_38:
    uint64_t v46 = v0[7];
    uint64_t v45 = v0[8];
    uint64_t v47 = type metadata accessor for URLRequest();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 32))(v46, v45, v47);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v48 = (uint64_t (*)(void))v0[1];
    return v48();
  }
  if (os_variant_has_internal_content())
  {
    static Logger.general.getter();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      unint64_t v4 = v0[15];
      uint64_t v5 = (void *)v0[16];
      uint64_t v52 = v0[14];
      uint64_t v55 = v0[11];
      uint64_t v57 = v0[10];
      uint64_t v59 = v0[13];
      os_log_t log = v2;
      uint64_t v6 = swift_slowAlloc();
      uint64_t v7 = (void *)swift_slowAlloc();
      uint64_t v63 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 138412802;
      v0[4] = v5;
      id v8 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v7 = v5;
      swift_release_n();
      *(_WORD *)(v6 + 12) = 2082;
      swift_bridgeObjectRetain();
      v0[5] = sub_1000143F4(v52, v4, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v6 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v9 = Dictionary.description.getter();
      unint64_t v11 = v10;
      swift_bridgeObjectRelease();
      v0[6] = sub_1000143F4(v9, v11, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, log, v3, "[%@] Received additional headers from %{public}s: %s", (uint8_t *)v6, 0x20u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v59, v57);
    }
    else
    {
      uint64_t v19 = v0[13];
      uint64_t v20 = v0[10];
      uint64_t v21 = v0[11];
      swift_release_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t result = URLRequest.allHTTPHeaderFields.getter();
  char v62 = v0;
  if (!result) {
    uint64_t result = sub_10044B560((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v23 = result;
  int64_t v24 = 0;
  uint64_t v61 = v1 + 64;
  uint64_t v25 = -1;
  uint64_t v26 = -1 << *(unsigned char *)(v1 + 32);
  if (-v26 < 64) {
    uint64_t v25 = ~(-1 << -(char)v26);
  }
  unint64_t v27 = v25 & *(void *)(v1 + 64);
  int64_t v28 = (unint64_t)(63 - v26) >> 6;
  while (v27)
  {
    unint64_t v31 = __clz(__rbit64(v27));
    v27 &= v27 - 1;
    unint64_t v32 = v31 | (v24 << 6);
LABEL_34:
    uint64_t v36 = 16 * v32;
    uint64_t v37 = (uint64_t *)(*(void *)(v1 + 48) + v36);
    uint64_t v39 = *v37;
    uint64_t v38 = (void *)v37[1];
    uint64_t v40 = (uint64_t *)(*(void *)(v1 + 56) + v36);
    uint64_t v42 = *v40;
    int v41 = (void *)v40[1];
    uint64_t v43 = *(void *)(v23 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v43 || (sub_100016D20(v39, (uint64_t)v38), (v44 & 1) == 0))
    {
      v29.value._uint64_t countAndFlagsBits = v42;
      v29.value._object = v41;
      v30._uint64_t countAndFlagsBits = v39;
      v30._object = v38;
      URLRequest.setValue(_:forHTTPHeaderField:)(v29, v30);
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v33 = v24 + 1;
  if (__OFADD__(v24, 1))
  {
    __break(1u);
    goto LABEL_43;
  }
  if (v33 >= v28) {
    goto LABEL_37;
  }
  unint64_t v34 = *(void *)(v61 + 8 * v33);
  ++v24;
  if (v34) {
    goto LABEL_33;
  }
  int64_t v24 = v33 + 1;
  if (v33 + 1 >= v28) {
    goto LABEL_37;
  }
  unint64_t v34 = *(void *)(v61 + 8 * v24);
  if (v34) {
    goto LABEL_33;
  }
  int64_t v24 = v33 + 2;
  if (v33 + 2 >= v28) {
    goto LABEL_37;
  }
  unint64_t v34 = *(void *)(v61 + 8 * v24);
  if (v34)
  {
LABEL_33:
    unint64_t v27 = (v34 - 1) & v34;
    unint64_t v32 = __clz(__rbit64(v34)) + (v24 << 6);
    goto LABEL_34;
  }
  int64_t v35 = v33 + 3;
  if (v35 >= v28)
  {
LABEL_37:
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v0 = v62;
    goto LABEL_38;
  }
  unint64_t v34 = *(void *)(v61 + 8 * v35);
  if (v34)
  {
    int64_t v24 = v35;
    goto LABEL_33;
  }
  while (1)
  {
    int64_t v24 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      break;
    }
    if (v24 >= v28) {
      goto LABEL_37;
    }
    unint64_t v34 = *(void *)(v61 + 8 * v24);
    ++v35;
    if (v34) {
      goto LABEL_33;
    }
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_1002C3A38()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NativeDecorator()
{
  return self;
}

uint64_t sub_1002C3AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000176B4;
  return sub_1002C2FCC(a1, a2);
}

uint64_t sub_1002C3B50(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v3;
  return _swift_task_switch(sub_1002C3B74, 0, 0);
}

uint64_t sub_1002C3B74()
{
  uint64_t v1 = (void *)v0[3];
  uint64_t v3 = v1[5];
  uint64_t v2 = v1[6];
  uint64_t v4 = v1[2];
  uint64_t v5 = (void *)swift_task_alloc();
  v0[4] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1002C3C28;
  uint64_t v6 = v0[2];
  return sub_1003D26E0(v6, v3, v2, v4);
}

uint64_t sub_1002C3C28(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_1002C3D28()
{
  v1[40] = v0;
  type metadata accessor for OAuthClient();
  v1[41] = swift_task_alloc();
  sub_1000172F8(&qword_10065C9B0);
  v1[42] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for UUID();
  v1[43] = v2;
  v1[44] = *(void *)(v2 - 8);
  v1[45] = swift_task_alloc();
  v1[46] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for OAuthCredential();
  v1[47] = v3;
  v1[48] = *(void *)(v3 - 8);
  v1[49] = swift_task_alloc();
  sub_1000172F8(&qword_10065F858);
  v1[50] = swift_task_alloc();
  v1[51] = swift_task_alloc();
  v1[52] = swift_task_alloc();
  v1[53] = swift_task_alloc();
  return _swift_task_switch(sub_1002C3F08, v0, 0);
}

uint64_t sub_1002C3F08()
{
  uint64_t v1 = *(void *)(v0 + 424);
  uint64_t v2 = *(void *)(v0 + 376);
  uint64_t v3 = *(void *)(v0 + 384);
  uint64_t v4 = *(void *)(v0 + 320);
  uint64_t v5 = OBJC_IVAR____TtC28ManagedAppDistributionDaemonP33_7EC653A4C512B1F4D7EE1900495297C014OAuthDecorator_credential;
  *(void *)(v0 + 432) = OBJC_IVAR____TtC28ManagedAppDistributionDaemonP33_7EC653A4C512B1F4D7EE1900495297C014OAuthDecorator_credential;
  uint64_t v6 = v4 + v5;
  swift_beginAccess();
  sub_100017238(v6, v1, &qword_10065F858);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  int v8 = v7(v1, 1, v2);
  uint64_t v9 = *(void *)(v0 + 424);
  if (v8)
  {
    unint64_t v10 = &qword_10065F858;
    uint64_t v11 = *(void *)(v0 + 424);
    goto LABEL_7;
  }
  uint64_t v12 = *(void *)(v0 + 416);
  uint64_t v13 = *(void *)(v0 + 392);
  uint64_t v14 = *(void *)(v0 + 376);
  sub_1002C67E8(*(void *)(v0 + 424), v13);
  sub_10001729C(v9, &qword_10065F858);
  uint64_t v15 = v13 + *(int *)(v14 + 20);
  long long v16 = *(_OWORD *)(v15 + 32);
  long long v17 = *(_OWORD *)(v15 + 48);
  long long v18 = *(_OWORD *)(v15 + 64);
  *(void *)(v0 + 96) = *(void *)(v15 + 80);
  *(_OWORD *)(v0 + 64) = v17;
  *(_OWORD *)(v0 + 80) = v18;
  *(_OWORD *)(v0 + 48) = v16;
  long long v19 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)v15;
  *(_OWORD *)(v0 + 32) = v19;
  sub_1002C684C(v0 + 16);
  sub_1002C6924(v13, (uint64_t (*)(void))type metadata accessor for OAuthCredential);
  sub_100017238(v6, v12, &qword_10065F858);
  int v20 = v7(v12, 1, v14);
  uint64_t v21 = *(void *)(v0 + 416);
  if (v20)
  {
    uint64_t v22 = *(void *)(v0 + 344);
    uint64_t v23 = *(void *)(v0 + 352);
    uint64_t v24 = *(void *)(v0 + 336);
    sub_10001729C(*(void *)(v0 + 416), &qword_10065F858);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v24, 1, 1, v22);
LABEL_6:
    uint64_t v30 = *(void *)(v0 + 336);
    sub_1002C68B8(v0 + 16);
    unint64_t v10 = &qword_10065C9B0;
    uint64_t v11 = v30;
LABEL_7:
    sub_10001729C(v11, v10);
    type metadata accessor for InternalError();
    sub_10019FE50();
    uint64_t v31 = swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    *(void *)(v0 + 512) = v31;
    uint64_t v32 = *(void *)(v0 + 320);
    if (*(unsigned char *)(v32 + 120) == 1)
    {
      uint64_t v33 = *(void *)(v32 + 136);
      *(void *)(v0 + 520) = v33;
      uint64_t v34 = *(void *)(v32 + 144);
      *(void *)(v0 + 528) = v34;
      uint64_t v35 = *(void *)(v32 + 152);
      *(void *)(v0 + 536) = v35;
      uint64_t v36 = *(void *)(v32 + 160);
      *(void *)(v0 + 544) = v36;
      uint64_t v37 = *(void *)(v32 + 128);
      *(void *)(v0 + 552) = v37;
      uint64_t v38 = *(void **)(v32 + 112);
      *(void *)(v0 + 560) = v38;
      *(void *)(v0 + 192) = v33;
      *(void *)(v0 + 200) = v34;
      *(void *)(v0 + 208) = v35;
      *(void *)(v0 + 216) = v36;
      *(void *)(v0 + 224) = v37;
      *(void *)(v0 + 232) = v38;
      *(_WORD *)(v0 + 240) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      id v39 = v38;
      uint64_t v40 = (void *)swift_task_alloc();
      *(void *)(v0 + 568) = v40;
      void *v40 = v0;
      v40[1] = sub_1002C492C;
      return sub_1004C5C6C();
    }
    else
    {
      swift_willThrow();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v42 = *(uint64_t (**)(void))(v0 + 8);
      return v42(0);
    }
  }
  uint64_t v25 = *(void *)(v0 + 392);
  uint64_t v26 = *(void *)(v0 + 344);
  uint64_t v27 = *(void *)(v0 + 352);
  uint64_t v28 = *(void *)(v0 + 336);
  sub_1002C67E8(*(void *)(v0 + 416), v25);
  sub_10001729C(v21, &qword_10065F858);
  Swift::String_optional v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16);
  *(void *)(v0 + 440) = v29;
  *(void *)(v0 + 448) = (v27 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v29(v28, v25, v26);
  sub_1002C6924(v25, (uint64_t (*)(void))type metadata accessor for OAuthCredential);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56))(v28, 0, 1, v26);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v28, 1, v26) == 1) {
    goto LABEL_6;
  }
  uint64_t v43 = *(void *)(v0 + 360);
  uint64_t v44 = *(void *)(v0 + 368);
  uint64_t v45 = *(void *)(v0 + 344);
  uint64_t v46 = *(void **)(v0 + 320);
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v0 + 352) + 32))(v44, *(void *)(v0 + 336), v45);
  v29(v43, v44, v45);
  uint64_t v47 = v46[19];
  *(void *)(v0 + 456) = v47;
  uint64_t v48 = v46[20];
  *(void *)(v0 + 464) = v48;
  uint64_t v49 = v46[16];
  uint64_t v50 = (void *)v46[14];
  *(void *)(v0 + 472) = v50;
  swift_bridgeObjectRetain();
  swift_retain();
  id v51 = v50;
  uint64_t v52 = (void *)swift_task_alloc();
  *(void *)(v0 + 480) = v52;
  *uint64_t v52 = v0;
  v52[1] = sub_1002C4448;
  uint64_t v53 = *(void *)(v0 + 360);
  uint64_t v54 = *(void *)(v0 + 328);
  return sub_10051F150(v54, v53, v47, v48, v49, (uint64_t)v51);
}

uint64_t sub_1002C4448()
{
  uint64_t v2 = *v1 + 16;
  uint64_t v3 = (void *)*v1;
  v3[61] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = v3[40];
    sub_1002C68B8(v2);
    return _swift_task_switch(sub_1002C4BB0, v4, 0);
  }
  else
  {
    uint64_t v5 = (void *)swift_task_alloc();
    v3[62] = v5;
    *uint64_t v5 = v3;
    v5[1] = sub_1002C45E4;
    uint64_t v6 = v3[59];
    return sub_10052005C((uint64_t)(v3 + 13), v2, v6);
  }
}

uint64_t sub_1002C45E4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1 + 16;
  *(void *)(*v1 + 504) = v0;
  swift_task_dealloc();
  uint64_t v4 = *(void *)(v2 + 320);
  sub_1002C68B8(v3);
  if (v0) {
    uint64_t v5 = sub_1002C4D90;
  }
  else {
    uint64_t v5 = sub_1002C4720;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1002C4720()
{
  unint64_t v18 = *(void *)(v0 + 464);
  long long v19 = *(void **)(v0 + 472);
  uint64_t v17 = *(void *)(v0 + 456);
  uint64_t v1 = *(void *)(v0 + 408);
  uint64_t v2 = *(void *)(v0 + 384);
  uint64_t v3 = *(void **)(v0 + 392);
  uint64_t v4 = *(void *)(v0 + 368);
  uint64_t v5 = *(void *)(v0 + 376);
  uint64_t v7 = *(void *)(v0 + 320);
  uint64_t v6 = *(void *)(v0 + 328);
  uint64_t v20 = v7 + *(void *)(v0 + 432);
  uint64_t v21 = *(void *)(v0 + 400);
  uint64_t v8 = *(void *)(v0 + 344);
  uint64_t v9 = *(void *)(v0 + 352);
  (*(void (**)(void *, uint64_t, uint64_t))(v0 + 440))(v3, v4, v8);
  unint64_t v10 = (char *)v3 + *(int *)(v5 + 20);
  long long v11 = *(_OWORD *)(v0 + 120);
  *(_OWORD *)unint64_t v10 = *(_OWORD *)(v0 + 104);
  *((_OWORD *)v10 + 1) = v11;
  long long v12 = *(_OWORD *)(v0 + 136);
  long long v13 = *(_OWORD *)(v0 + 152);
  long long v14 = *(_OWORD *)(v0 + 168);
  *((void *)v10 + 10) = *(void *)(v0 + 184);
  *((_OWORD *)v10 + 3) = v13;
  *((_OWORD *)v10 + 4) = v14;
  *((_OWORD *)v10 + 2) = v12;
  sub_1003C4AD4(v3, *(void *)(v7 + 136), *(void *)(v7 + 144), v17, v18, v19);
  sub_1002C6924(v6, (uint64_t (*)(void))type metadata accessor for OAuthClient);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v4, v8);
  sub_1002C6984((uint64_t)v3, v1);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v1, 0, 1, v5);
  sub_1002C69E8(v1, v21);
  swift_beginAccess();
  sub_1002C6780(v21, v20);
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v15(1);
}

uint64_t sub_1002C492C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 576) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 320);
    uint64_t v4 = sub_1002C4F94;
  }
  else
  {
    uint64_t v5 = *(void **)(v2 + 560);
    uint64_t v6 = *(void *)(v2 + 320);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();

    uint64_t v4 = sub_1002C4A7C;
    uint64_t v3 = v6;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002C4A7C()
{
  uint64_t v1 = *(void *)(v0 + 408);
  uint64_t v2 = *(void *)(v0 + 320) + *(void *)(v0 + 432);
  sub_1003C2ABC(*(void *)(v0 + 520), *(void *)(v0 + 528), *(void *)(v0 + 536), *(NSObject **)(v0 + 544), *(NSObject **)(v0 + 560), v1);
  swift_errorRelease();
  swift_beginAccess();
  sub_1002C6780(v1, v2);
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(1);
}

uint64_t sub_1002C4BB0()
{
  (*(void (**)(void, void))(*(void *)(v0 + 352) + 8))(*(void *)(v0 + 368), *(void *)(v0 + 344));
  *(void *)(v0 + 512) = *(void *)(v0 + 488);
  uint64_t v1 = *(void *)(v0 + 320);
  if (*(unsigned char *)(v1 + 120) == 1)
  {
    uint64_t v2 = *(void *)(v1 + 136);
    *(void *)(v0 + 520) = v2;
    uint64_t v3 = *(void *)(v1 + 144);
    *(void *)(v0 + 528) = v3;
    uint64_t v4 = *(void *)(v1 + 152);
    *(void *)(v0 + 536) = v4;
    uint64_t v5 = *(void *)(v1 + 160);
    *(void *)(v0 + 544) = v5;
    uint64_t v6 = *(void *)(v1 + 128);
    *(void *)(v0 + 552) = v6;
    uint64_t v7 = *(void **)(v1 + 112);
    *(void *)(v0 + 560) = v7;
    *(void *)(v0 + 192) = v2;
    *(void *)(v0 + 200) = v3;
    *(void *)(v0 + 208) = v4;
    *(void *)(v0 + 216) = v5;
    *(void *)(v0 + 224) = v6;
    *(void *)(v0 + 232) = v7;
    *(_WORD *)(v0 + 240) = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    id v8 = v7;
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 568) = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_1002C492C;
    return sub_1004C5C6C();
  }
  else
  {
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11(0);
  }
}

uint64_t sub_1002C4D90()
{
  uint64_t v1 = *(void *)(v0 + 368);
  uint64_t v2 = *(void *)(v0 + 344);
  uint64_t v3 = *(void *)(v0 + 352);
  sub_1002C6924(*(void *)(v0 + 328), (uint64_t (*)(void))type metadata accessor for OAuthClient);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  *(void *)(v0 + 512) = *(void *)(v0 + 504);
  uint64_t v4 = *(void *)(v0 + 320);
  if (*(unsigned char *)(v4 + 120) == 1)
  {
    uint64_t v5 = *(void *)(v4 + 136);
    *(void *)(v0 + 520) = v5;
    uint64_t v6 = *(void *)(v4 + 144);
    *(void *)(v0 + 528) = v6;
    uint64_t v7 = *(void *)(v4 + 152);
    *(void *)(v0 + 536) = v7;
    uint64_t v8 = *(void *)(v4 + 160);
    *(void *)(v0 + 544) = v8;
    uint64_t v9 = *(void *)(v4 + 128);
    *(void *)(v0 + 552) = v9;
    unint64_t v10 = *(void **)(v4 + 112);
    *(void *)(v0 + 560) = v10;
    *(void *)(v0 + 192) = v5;
    *(void *)(v0 + 200) = v6;
    *(void *)(v0 + 208) = v7;
    *(void *)(v0 + 216) = v8;
    *(void *)(v0 + 224) = v9;
    *(void *)(v0 + 232) = v10;
    *(_WORD *)(v0 + 240) = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    id v11 = v10;
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 568) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_1002C492C;
    return sub_1004C5C6C();
  }
  else
  {
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v14 = *(uint64_t (**)(void))(v0 + 8);
    return v14(0);
  }
}

uint64_t sub_1002C4F94()
{
  uint64_t v1 = *(void **)(v0 + 560);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2(0);
}

uint64_t sub_1002C50A0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  *(unsigned char *)(v6 + 58) = a5;
  *(void *)(v6 + 200) = a4;
  *(void *)(v6 + 208) = v5;
  *(unsigned char *)(v6 + 57) = a2;
  *(void *)(v6 + 184) = a1;
  *(void *)(v6 + 192) = a3;
  uint64_t v7 = type metadata accessor for Logger();
  *(void *)(v6 + 216) = v7;
  *(void *)(v6 + 224) = *(void *)(v7 - 8);
  *(void *)(v6 + 232) = swift_task_alloc();
  *(void *)(v6 + 240) = swift_task_alloc();
  *(void *)(v6 + 248) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for URL();
  *(void *)(v6 + 256) = v8;
  *(void *)(v6 + 264) = *(void *)(v8 - 8);
  *(void *)(v6 + 272) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for URLRequest();
  *(void *)(v6 + 280) = v9;
  *(void *)(v6 + 288) = *(void *)(v9 - 8);
  *(void *)(v6 + 296) = swift_task_alloc();
  *(void *)(v6 + 304) = swift_task_alloc();
  *(void *)(v6 + 312) = swift_task_alloc();
  return _swift_task_switch(sub_1002C525C, 0, 0);
}

uint64_t sub_1002C525C()
{
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v2 = *(void (**)(void, void, uint64_t))(*(void *)(v0 + 264) + 16);
  *(unsigned char *)(v0 + 59) = 0;
  *(void *)(v0 + 336) = 0;
  *(void *)(v0 + 344) = 0xF000000000000000;
  *(void *)(v0 + 320) = v2;
  *(void *)(v0 + 328) = 0;
  uint64_t v3 = *(void *)(v0 + 192);
  v2(*(void *)(v0 + 272), *(void *)(v0 + 184), v1);
  sub_100017238(v3, v0 + 16, &qword_10065B8E8);
  if (*(unsigned __int8 *)(v0 + 56) == 255)
  {
    sub_10001729C(v0 + 16, &qword_10065B8E8);
    uint64_t v4 = 0;
    unint64_t v6 = 0xF000000000000000;
  }
  else
  {
    uint64_t v4 = sub_10044D7F8();
    unint64_t v6 = v5;
    sub_1002C672C(v0 + 16);
  }
  sub_100017238(*(void *)(v0 + 192), v0 + 64, &qword_10065B8E8);
  if (*(unsigned __int8 *)(v0 + 104) == 255)
  {
    sub_10001729C(v0 + 64, &qword_10065B8E8);
    unsigned __int8 v8 = 2;
  }
  else
  {
    sub_1002C66D0(v0 + 64, v0 + 112);
    char v7 = *(unsigned char *)(v0 + 152);
    sub_1002C672C(v0 + 112);
    sub_1002C672C(v0 + 64);
    unsigned __int8 v8 = (v7 & 1) == 0;
  }
  uint64_t v9 = *(void *)(v0 + 312);
  uint64_t v11 = *(void *)(v0 + 288);
  uint64_t v10 = *(void *)(v0 + 296);
  uint64_t v12 = *(void *)(v0 + 280);
  long long v13 = *(void **)(v0 + 208);
  long long v14 = v13 + 4;
  sub_1004E4860(*(void *)(v0 + 272), *(unsigned __int8 *)(v0 + 57), v4, v6, v8);
  uint64_t v15 = v13[7];
  uint64_t v16 = v13[8];
  sub_10018AC60(v14, v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v9, v12);
  uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 + 16) + **(int **)(v16 + 16));
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 352) = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_1002C556C;
  uint64_t v19 = *(void *)(v0 + 296);
  uint64_t v18 = *(void *)(v0 + 304);
  return v21(v18, v19, v15, v16);
}

uint64_t sub_1002C556C()
{
  *(void *)(*(void *)v1 + 360) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1002C641C;
  }
  else {
    uint64_t v2 = sub_1002C5680;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002C5680()
{
  uint64_t v1 = v0[38];
  uint64_t v2 = v0[39];
  uint64_t v3 = v0[35];
  uint64_t v4 = v0[36];
  uint64_t v5 = v0[26];
  unint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v0[46] = v6;
  v0[47] = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v2, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2, v1, v3);
  v7.value._uint64_t countAndFlagsBits = sub_10044DADC(0);
  v8._uint64_t countAndFlagsBits = 0x6567412D72657355;
  v8._object = (void *)0xEA0000000000746ELL;
  URLRequest.setValue(_:forHTTPHeaderField:)(v7, v8);
  swift_bridgeObjectRelease();
  URLRequest.timeoutInterval.setter();
  URLRequest.cachePolicy.setter();
  URLRequest.httpShouldHandleCookies.setter();
  uint64_t v9 = *(void *)(v5 + 24);
  v0[48] = v9;
  uint64_t v10 = (void *)swift_task_alloc();
  v0[49] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1002C57E0;
  uint64_t v11 = v0[39];
  return sub_10044DDBC(v11, v9);
}

uint64_t sub_1002C57E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[50] = a1;
  v5[51] = a2;
  v5[52] = a3;
  v5[53] = v3;
  swift_task_dealloc();
  if (v3) {
    unint64_t v6 = sub_1002C6508;
  }
  else {
    unint64_t v6 = sub_1002C58F8;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1002C58F8()
{
  char v1 = *(unsigned char *)(v0 + 59);
  uint64_t v2 = *(void *)(v0 + 336);
  unint64_t v3 = *(void *)(v0 + 344);

  sub_10018AE44(v2, v3);
  if ((v1 & 1) == 0)
  {
    if ([*(id *)(v0 + 416) statusCode] == (id)403
      || [*(id *)(v0 + 416) statusCode] == (id)401)
    {
      static Logger.general.getter();
      swift_retain_n();
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v4, v5))
      {
        unint64_t v6 = *(void **)(v0 + 384);
        Swift::String_optional v7 = (uint8_t *)swift_slowAlloc();
        uint64_t v8 = (void *)swift_slowAlloc();
        *(_DWORD *)Swift::String_optional v7 = 138412290;
        *(void *)(v0 + 176) = v6;
        id v9 = v6;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v8 = v6;
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%@] Request failed, attempting to recover", v7, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      uint64_t v10 = *(void *)(v0 + 248);
      uint64_t v11 = *(void *)(v0 + 216);
      uint64_t v12 = *(void *)(v0 + 224);
      uint64_t v13 = *(void **)(v0 + 208);
      long long v14 = v13 + 4;
      uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      *(void *)(v0 + 432) = v15;
      *(void *)(v0 + 440) = (v12 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v15(v10, v11);
      uint64_t v16 = v13[7];
      uint64_t v17 = v13[8];
      sub_10018AC60(v14, v16);
      uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 24) + **(int **)(v17 + 24));
      uint64_t v18 = (void *)swift_task_alloc();
      *(void *)(v0 + 448) = v18;
      *uint64_t v18 = v0;
      v18[1] = sub_1002C5C68;
      uint64_t v19 = *(void *)(v0 + 416);
      uint64_t v20 = v16;
      uint64_t v21 = v17;
      uint64_t v22 = v24;
      return v22(v19, v20, v21);
    }
  }
  (*(void (**)(void, void))(v0 + 368))(*(void *)(v0 + 312), *(void *)(v0 + 280));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8);
  uint64_t v20 = *(void *)(v0 + 408);
  uint64_t v21 = *(void *)(v0 + 416);
  uint64_t v19 = *(void *)(v0 + 400);
  return v22(v19, v20, v21);
}

uint64_t sub_1002C5C68(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 456) = v1;
  swift_task_dealloc();

  if (v1)
  {
    os_log_type_t v5 = sub_1002C65EC;
  }
  else
  {
    *(unsigned char *)(v4 + 60) = a1 & 1;
    os_log_type_t v5 = sub_1002C5DB0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1002C5DB0()
{
  if (*(unsigned char *)(v0 + 60))
  {
    static Logger.general.getter();
    swift_retain_n();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    uint64_t v51 = v0 + 16;
    if (os_log_type_enabled(v1, v2))
    {
      unint64_t v3 = *(void **)(v0 + 384);
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v5 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 138412290;
      *(void *)(v0 + 168) = v3;
      id v6 = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v5 = v3;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%@] Recovery performed, retrying one more time", v4, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v0 + 432);
    long long v14 = *(void (**)(uint64_t, uint64_t))(v0 + 368);
    uint64_t v15 = *(void *)(v0 + 312);
    uint64_t v16 = *(void *)(v0 + 280);
    uint64_t v17 = *(void *)(v0 + 240);
    uint64_t v18 = *(void *)(v0 + 216);

    v13(v17, v18);
    v14(v15, v16);
    uint64_t v19 = *(void *)(v0 + 456);
    unint64_t v21 = *(void *)(v0 + 408);
    uint64_t v20 = *(void **)(v0 + 416);
    uint64_t v22 = *(void *)(v0 + 400);
    *(unsigned char *)(v0 + 59) = 1;
    *(void *)(v0 + 336) = v22;
    *(void *)(v0 + 344) = v21;
    *(void *)(v0 + 328) = v20;
    uint64_t v23 = *(void *)(v0 + 192);
    (*(void (**)(void, void, void))(v0 + 320))(*(void *)(v0 + 272), *(void *)(v0 + 184), *(void *)(v0 + 256));
    sub_100017238(v23, v51, &qword_10065B8E8);
    if (*(unsigned __int8 *)(v0 + 56) == 255)
    {
      sub_10001729C(v51, &qword_10065B8E8);
      uint64_t v35 = 0;
      unint64_t v36 = 0xF000000000000000;
    }
    else
    {
      uint64_t v24 = sub_10044D7F8();
      if (v19)
      {
        (*(void (**)(void, void))(*(void *)(v0 + 264) + 8))(*(void *)(v0 + 272), *(void *)(v0 + 256));

        sub_10018AE44(v22, v21);
        sub_1002C672C(v51);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
        return v26();
      }
      uint64_t v35 = v24;
      unint64_t v36 = v25;
      sub_1002C672C(v51);
    }
    sub_100017238(*(void *)(v0 + 192), v0 + 64, &qword_10065B8E8);
    if (*(unsigned __int8 *)(v0 + 104) == 255)
    {
      sub_10001729C(v0 + 64, &qword_10065B8E8);
      unsigned __int8 v38 = 2;
    }
    else
    {
      sub_1002C66D0(v0 + 64, v0 + 112);
      char v37 = *(unsigned char *)(v0 + 152);
      sub_1002C672C(v0 + 112);
      sub_1002C672C(v0 + 64);
      unsigned __int8 v38 = (v37 & 1) == 0;
    }
    uint64_t v39 = *(void *)(v0 + 312);
    uint64_t v41 = *(void *)(v0 + 288);
    uint64_t v40 = *(void *)(v0 + 296);
    uint64_t v42 = *(void *)(v0 + 280);
    uint64_t v43 = *(void **)(v0 + 208);
    uint64_t v44 = v43 + 4;
    sub_1004E4860(*(void *)(v0 + 272), *(unsigned __int8 *)(v0 + 57), v35, v36, v38);
    uint64_t v45 = v43[7];
    uint64_t v46 = v43[8];
    sub_10018AC60(v44, v45);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v40, v39, v42);
    uint64_t v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v46 + 16) + **(int **)(v46 + 16));
    uint64_t v47 = (void *)swift_task_alloc();
    *(void *)(v0 + 352) = v47;
    *uint64_t v47 = v0;
    v47[1] = sub_1002C556C;
    uint64_t v49 = *(void *)(v0 + 296);
    uint64_t v48 = *(void *)(v0 + 304);
    return v50(v48, v49, v45, v46);
  }
  else
  {
    static Logger.general.getter();
    swift_retain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      id v9 = *(void **)(v0 + 384);
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 138412290;
      *(void *)(v0 + 160) = v9;
      id v12 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v11 = v9;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "[%@] Recovery failed, not trying again", v10, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v0 + 432);
    uint64_t v29 = *(void *)(v0 + 232);
    uint64_t v30 = *(void *)(v0 + 216);

    v28(v29, v30);
    (*(void (**)(void, void))(v0 + 368))(*(void *)(v0 + 312), *(void *)(v0 + 280));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8);
    uint64_t v32 = *(void *)(v0 + 408);
    uint64_t v33 = *(void *)(v0 + 416);
    uint64_t v34 = *(void *)(v0 + 400);
    return v31(v34, v32, v33);
  }
}

uint64_t sub_1002C641C()
{
  uint64_t v1 = (void *)v0[41];
  uint64_t v2 = v0[39];
  uint64_t v3 = v0[35];
  uint64_t v4 = v0[36];
  sub_10018AE44(v0[42], v0[43]);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1002C6508()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[46];
  uint64_t v2 = (void *)v0[41];
  uint64_t v3 = v0[39];
  uint64_t v4 = v0[35];
  sub_10018AE44(v0[42], v0[43]);

  v1(v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1002C65EC()
{
  uint64_t v1 = (void *)v0[52];
  uint64_t v2 = (void (*)(uint64_t, uint64_t))v0[46];
  uint64_t v3 = v0[39];
  uint64_t v4 = v0[35];
  sub_100013510(v0[50], v0[51]);

  v2(v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1002C66D0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1002C672C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002C6780(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_10065F858);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002C67E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OAuthCredential();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002C684C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002C68B8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002C6924(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1002C6984(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OAuthCredential();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002C69E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_10065F858);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002C6A50(char a1, Swift::String_optional _)
{
  return sub_1002C2AB4(a1, _);
}

uint64_t sub_1002C6A58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(unsigned char *)(v8 + 697) = v19;
  *(void *)(v8 + 408) = v18;
  *(unsigned char *)(v8 + 696) = v17;
  *(_OWORD *)(v8 + 392) = v16;
  *(void *)(v8 + 376) = a7;
  *(void *)(v8 + 384) = a8;
  *(void *)(v8 + 360) = a5;
  *(void *)(v8 + 368) = a6;
  *(void *)(v8 + 344) = a3;
  *(void *)(v8 + 352) = a4;
  *(void *)(v8 + 328) = a1;
  *(void *)(v8 + 336) = a2;
  uint64_t v9 = type metadata accessor for AppStorePurchaser.VendorID();
  *(void *)(v8 + 416) = v9;
  *(void *)(v8 + 424) = *(void *)(v9 - 8);
  *(void *)(v8 + 432) = swift_task_alloc();
  uint64_t v10 = sub_1000172F8(&qword_10065F990);
  *(void *)(v8 + 440) = v10;
  *(void *)(v8 + 448) = *(void *)(v10 - 8);
  *(void *)(v8 + 456) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for ManagedAppDeclaration.InstallBehavior.LicenseEnum();
  *(void *)(v8 + 464) = v11;
  *(void *)(v8 + 472) = *(void *)(v11 - 8);
  *(void *)(v8 + 480) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for UUID();
  *(void *)(v8 + 488) = v12;
  *(void *)(v8 + 496) = *(void *)(v12 - 8);
  *(void *)(v8 + 504) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Logger();
  *(void *)(v8 + 512) = v13;
  *(void *)(v8 + 520) = *(void *)(v13 - 8);
  *(void *)(v8 + 528) = swift_task_alloc();
  *(void *)(v8 + 536) = swift_task_alloc();
  *(void *)(v8 + 544) = swift_task_alloc();
  *(void *)(v8 + 552) = swift_task_alloc();
  *(void *)(v8 + 560) = swift_task_alloc();
  *(void *)(v8 + 568) = swift_task_alloc();
  sub_1000172F8(&qword_10065F998);
  *(void *)(v8 + 576) = swift_task_alloc();
  *(void *)(v8 + 584) = swift_task_alloc();
  *(void *)(v8 + 592) = swift_task_alloc();
  return _swift_task_switch(sub_1002C6D4C, 0, 0);
}

uint64_t sub_1002C6D4C()
{
  uint64_t v103 = v0;
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 592);
  if (v1)
  {
    uint64_t v3 = *(void *)(v0 + 584);
    uint64_t v4 = *(void *)(v0 + 424);
    uint64_t v97 = *(void *)(v0 + 416);
    uint64_t v98 = *(void *)(v0 + 576);
    uint64_t v6 = *(void *)(v0 + 368);
    unint64_t v5 = *(void *)(v0 + 376);
    uint64_t v8 = *(void *)(v0 + 352);
    uint64_t v7 = *(void *)(v0 + 360);
    uint64_t v9 = *(void *)(v0 + 336);
    sub_1002CB9FC(v9, v1);
    sub_1001C5E20(v6, v5);
    sub_1002C9EF4(v9, v1, v8, v7, v6, v5, v3);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v3, 0, 1, v97);
    sub_1002CBA40(v3, v2);
    sub_100017238(v2, v98, &qword_10065F998);
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v98, 1, v97);
    if (v10 == 1)
    {
      __break(1u);
      return _swift_continuation_await(v10);
    }
    uint64_t v11 = *(void *)(v0 + 576);
    uint64_t v13 = *(void *)(v0 + 496);
    uint64_t v12 = *(void *)(v0 + 504);
    uint64_t v14 = *(void *)(v0 + 488);
    uint64_t v15 = *(void **)(v0 + 384);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v11, v14);
    sub_1002CB8EC(v11);
    UUID.uuidString.getter();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v15 setParameter:v16 forKey:AMSBuyParamPropertyVendorID];
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 424) + 56))(*(void *)(v0 + 592), 1, 1, *(void *)(v0 + 416));
    static Logger.vpp.getter();
    char v17 = Logger.logObject.getter();
    uint64_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, (os_log_type_t)v18))
    {
      char v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)v18, "Vendor info not provided, receipt will be missing", v19, 2u);
      swift_slowDealloc();
    }
    uint64_t v20 = *(void *)(v0 + 568);
    uint64_t v21 = *(void *)(v0 + 520);
    uint64_t v22 = *(void *)(v0 + 512);

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  }
  uint64_t v24 = *(void *)(v0 + 472);
  uint64_t v23 = *(void *)(v0 + 480);
  uint64_t v25 = *(void *)(v0 + 464);
  uint64_t v26 = *(void **)(v0 + 384);
  id v27 = [self serialNumber];
  [v26 setParameter:v27 forKey:AMSBuyParamPropertySerialNumber];

  (*(void (**)(uint64_t, void, uint64_t))(v24 + 104))(v23, enum case for ManagedAppDeclaration.InstallBehavior.LicenseEnum.user(_:), v25);
  char v28 = static ManagedAppDeclaration.InstallBehavior.LicenseEnum.== infix(_:_:)();
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
  if ((v28 & 1) == 0)
  {
    *(void *)(v0 + 632) = 0;
    if (*(void *)(v0 + 400))
    {
      uint64_t v33 = *(void *)(v0 + 384);
      *(void *)(swift_task_alloc() + 16) = v33;
      uint64_t v34 = swift_bridgeObjectRetain();
      sub_1002CB0A0(v34, (void (*)(id, uint64_t, uint64_t))sub_1002CB994);
      swift_bridgeObjectRelease();
      swift_task_dealloc();
    }
    uint64_t v35 = *(void **)(v0 + 384);
    static Logger.vpp.getter();
    id v36 = v35;
    char v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    BOOL v39 = os_log_type_enabled(v37, v38);
    uint64_t v40 = *(void *)(v0 + 560);
    uint64_t v41 = *(void *)(v0 + 520);
    uint64_t v42 = *(void *)(v0 + 512);
    uint64_t v43 = *(void **)(v0 + 384);
    if (v39)
    {
      uint64_t v100 = *(void *)(v0 + 560);
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      v102[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v44 = 136446210;
      id v45 = [v43 stringValue];
      uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v48 = v47;

      *(void *)(v0 + 320) = sub_1000143F4(v46, v48, v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Performing purchase with parameters: %{public}s", v44, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
      v49(v100, v42);
    }
    else
    {

      uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
      v49(v40, v42);
    }
    uint64_t v50 = (uint64_t *)(v0 + 280);
    *(void *)(v0 + 640) = v49;
    id v51 = [objc_allocWithZone((Class)AMSPurchase) initWithPurchaseType:5 buyParams:*(void *)(v0 + 384)];
    *(void *)(v0 + 648) = v51;
    uint64_t v52 = *(void *)(v0 + 408);
    int v53 = *(unsigned __int8 *)(v0 + 696);
    [v51 setUserInitiated:*(unsigned __int8 *)(v0 + 696)];
    [v51 setIgnoreRequirePasswordRestriction:v53 ^ 1u];
    uint64_t v54 = &_swiftEmptyDictionarySingleton;
    *(void *)(v0 + 280) = &_swiftEmptyDictionarySingleton;
    uint64_t v55 = *(void *)(v52 + 16);
    *(void *)(v0 + 304) = v55;
    if (*(void *)(v55 + 16))
    {
      *(void *)(v0 + 256) = v55;
      swift_bridgeObjectRetain();
      sub_1000172F8((uint64_t *)&unk_10065C5D0);
      sub_10017B8C8();
      uint64_t v56 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v58 = v57;
      sub_10017B89C(v0 + 304);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v102[0] = *v50;
      *uint64_t v50 = 0x8000000000000000;
      sub_100529754(v56, v58, 0xD000000000000011, 0x80000001005BD7C0, isUniquelyReferenced_nonNull_native);
      *uint64_t v50 = v102[0];
      swift_bridgeObjectRelease();
      uint64_t v54 = (void *)*v50;
    }
    if (*(unsigned char *)(*(void *)(v0 + 408) + 110))
    {
      char v60 = swift_isUniquelyReferenced_nonNull_native();
      v102[0] = *v50;
      *uint64_t v50 = 0x8000000000000000;
      sub_100529754(1702195828, 0xE400000000000000, 0xD000000000000010, 0x80000001005BD810, v60);
      *uint64_t v50 = v102[0];
      swift_bridgeObjectRelease();
      uint64_t v54 = (void *)*v50;
    }
    uint64_t v101 = v49;
    if (v54[2])
    {
      static Logger.vpp.getter();
      uint64_t v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.default.getter();
      BOOL v63 = os_log_type_enabled(v61, v62);
      uint64_t v64 = *(void *)(v0 + 552);
      uint64_t v65 = *(void *)(v0 + 512);
      if (v63)
      {
        uint64_t v95 = *(void *)(v0 + 552);
        uint64_t v66 = (uint8_t *)swift_slowAlloc();
        v102[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v66 = 136446210;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        uint64_t v94 = v65;
        uint64_t v67 = Dictionary.description.getter();
        unint64_t v69 = v68;
        swift_bridgeObjectRelease();
        *(void *)(v0 + 312) = sub_1000143F4(v67, v69, v102);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "Setting additional purchase headers: %{public}s", v66, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v49(v95, v94);
      }
      else
      {

        v49(v64, v65);
      }
      swift_beginAccess();
      swift_bridgeObjectRetain();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v51 setAdditionalHeaders:isa];
    }
    uint64_t v71 = *(void **)(v0 + 384);
    id v72 = v51;
    NSString v73 = String._bridgeToObjectiveC()();
    NSString v74 = String._bridgeToObjectiveC()();
    id v75 = [self bagForProfile:v73 profileVersion:v74];

    id v76 = [objc_allocWithZone((Class)AMSPurchaseTask) initWithPurchase:v72 bag:v75];
    *(void *)(v0 + 656) = v76;

    id v77 = [objc_allocWithZone((Class)type metadata accessor for AppStorePurchaser.PurchaseDelegate()) init];
    *(void *)(v0 + 664) = v77;
    id v96 = v76;
    [v76 setDelegate:v77];
    static Logger.vpp.getter();
    id v78 = v71;
    uint64_t v79 = Logger.logObject.getter();
    os_log_type_t v80 = static os_log_type_t.default.getter();
    BOOL v81 = os_log_type_enabled(v79, v80);
    int v82 = *(void **)(v0 + 384);
    if (v81)
    {
      uint64_t v83 = (uint8_t *)swift_slowAlloc();
      uint64_t v84 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v83 = 138543362;
      *(void *)(v0 + 296) = v82;
      id v85 = v82;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v84 = v82;

      _os_log_impl((void *)&_mh_execute_header, v79, v80, "Performing purchase with buy params: %{public}@", v83, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v79 = *(NSObject **)(v0 + 384);
    }
    uint64_t v86 = *(void *)(v0 + 544);
    uint64_t v87 = *(void *)(v0 + 520);
    uint64_t v88 = *(void *)(v0 + 512);
    uint64_t v90 = *(void *)(v0 + 448);
    uint64_t v89 = *(void *)(v0 + 456);
    uint64_t v91 = *(void *)(v0 + 440);

    *(void *)(v0 + 672) = (v87 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v101(v86, v88);
    id v92 = [v96 performPurchase];
    *(void *)(v0 + 680) = v92;
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 248;
    *(void *)(v0 + 24) = sub_1002C8F0C;
    swift_continuation_init();
    *(void *)(v0 + 136) = v91;
    uint64_t v93 = sub_10019CE94((uint64_t *)(v0 + 112));
    sub_10018B1DC(0, (unint64_t *)&unk_10065F9A0);
    sub_1000172F8(&qword_10065B260);
    CheckedContinuation.init(continuation:function:)();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v90 + 32))(v93, v89, v91);
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    *(void *)(v0 + 88) = 1107296256;
    *(void *)(v0 + 96) = sub_1002CA454;
    *(void *)(v0 + 104) = &unk_10063FD10;
    objc_msgSend(v92, "resultWithCompletion:");
    uint64_t v10 = v0 + 16;
    return _swift_continuation_await(v10);
  }
  *(void *)(v0 + 600) = objc_msgSend(self, "ams_sharedAccountStore");
  uint64_t v99 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1006666D8 + dword_1006666D8);
  uint64_t v29 = (void *)swift_task_alloc();
  *(void *)(v0 + 608) = v29;
  *uint64_t v29 = v0;
  v29[1] = sub_1002C7A58;
  uint64_t v31 = *(void *)(v0 + 368);
  uint64_t v30 = *(void *)(v0 + 376);
  return v99(v31, v30);
}

uint64_t sub_1002C7A58(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 616) = a1;
  *(void *)(v4 + 624) = v1;
  swift_task_dealloc();

  if (v1)
  {
    swift_errorRelease();
    unint64_t v5 = sub_1002C85A4;
  }
  else
  {
    unint64_t v5 = sub_1002C7BA0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1002C7BA0()
{
  uint64_t v80 = v0;
  uint64_t v1 = *(void **)(v0 + 616);
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 384);
    id v3 = v1;
    id v4 = objc_msgSend(v3, "ams_DSID");
    [v2 setParameter:v4 forKey:AMSBuyParamPropertyDsid];

    uint64_t v5 = *(void *)(v0 + 616);
  }
  else
  {
    uint64_t v5 = 0;
  }
  *(void *)(v0 + 632) = v5;
  if (*(void *)(v0 + 400))
  {
    uint64_t v6 = *(void *)(v0 + 384);
    *(void *)(swift_task_alloc() + 16) = v6;
    uint64_t v7 = swift_bridgeObjectRetain();
    sub_1002CB0A0(v7, (void (*)(id, uint64_t, uint64_t))sub_1002CB994);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
  }
  uint64_t v8 = *(void **)(v0 + 384);
  static Logger.vpp.getter();
  id v9 = v8;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = *(void *)(v0 + 560);
  uint64_t v14 = *(void *)(v0 + 520);
  uint64_t v15 = *(void *)(v0 + 512);
  NSString v16 = *(void **)(v0 + 384);
  if (v12)
  {
    uint64_t v77 = *(void *)(v0 + 560);
    char v17 = (uint8_t *)swift_slowAlloc();
    v79[0] = swift_slowAlloc();
    *(_DWORD *)char v17 = 136446210;
    buf = v17;
    uint64_t v75 = v15;
    id v18 = [v16 stringValue];
    uint64_t v19 = v5;
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v22 = v21;

    uint64_t v23 = v20;
    uint64_t v5 = v19;
    *(void *)(v0 + 320) = sub_1000143F4(v23, v22, v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Performing purchase with parameters: %{public}s", buf, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v24(v77, v75);
  }
  else
  {

    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v24(v13, v15);
  }
  *(void *)(v0 + 640) = v24;
  id v25 = [objc_allocWithZone((Class)AMSPurchase) initWithPurchaseType:5 buyParams:*(void *)(v0 + 384)];
  uint64_t v26 = v25;
  *(void *)(v0 + 648) = v25;
  if (v5) {
    [v25 setAccount:v5];
  }
  id v27 = (uint64_t *)(v0 + 280);
  uint64_t v28 = *(void *)(v0 + 408);
  int v29 = *(unsigned __int8 *)(v0 + 696);
  [v26 setUserInitiated:*(unsigned __int8 *)(v0 + 696)];
  [v26 setIgnoreRequirePasswordRestriction:v29 ^ 1u];
  uint64_t v30 = &_swiftEmptyDictionarySingleton;
  *(void *)(v0 + 280) = &_swiftEmptyDictionarySingleton;
  uint64_t v31 = *(void *)(v28 + 16);
  *(void *)(v0 + 304) = v31;
  if (*(void *)(v31 + 16))
  {
    *(void *)(v0 + 256) = v31;
    swift_bridgeObjectRetain();
    sub_1000172F8((uint64_t *)&unk_10065C5D0);
    sub_10017B8C8();
    uint64_t v32 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v34 = v33;
    sub_10017B89C(v0 + 304);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v79[0] = *v27;
    *id v27 = 0x8000000000000000;
    sub_100529754(v32, v34, 0xD000000000000011, 0x80000001005BD7C0, isUniquelyReferenced_nonNull_native);
    *id v27 = v79[0];
    swift_bridgeObjectRelease();
    uint64_t v30 = (void *)*v27;
  }
  if (*(unsigned char *)(*(void *)(v0 + 408) + 110))
  {
    char v36 = swift_isUniquelyReferenced_nonNull_native();
    v79[0] = *v27;
    *id v27 = 0x8000000000000000;
    sub_100529754(1702195828, 0xE400000000000000, 0xD000000000000010, 0x80000001005BD810, v36);
    *id v27 = v79[0];
    swift_bridgeObjectRelease();
    uint64_t v30 = (void *)*v27;
  }
  id v78 = v24;
  if (v30[2])
  {
    static Logger.vpp.getter();
    char v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    BOOL v39 = os_log_type_enabled(v37, v38);
    uint64_t v40 = *(void *)(v0 + 552);
    uint64_t v41 = *(void *)(v0 + 512);
    if (v39)
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      v79[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 136446210;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      uint64_t v73 = v41;
      uint64_t v43 = Dictionary.description.getter();
      unint64_t v45 = v44;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 312) = sub_1000143F4(v43, v45, v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Setting additional purchase headers: %{public}s", v42, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v46 = v40;
      uint64_t v47 = v73;
    }
    else
    {

      uint64_t v46 = v40;
      uint64_t v47 = v41;
    }
    v24(v46, v47);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v26 setAdditionalHeaders:isa];
  }
  uint64_t v49 = *(void **)(v0 + 384);
  id v50 = v26;
  NSString v51 = String._bridgeToObjectiveC()();
  NSString v52 = String._bridgeToObjectiveC()();
  id v53 = [self bagForProfile:v51 profileVersion:v52];

  id v54 = [objc_allocWithZone((Class)AMSPurchaseTask) initWithPurchase:v50 bag:v53];
  *(void *)(v0 + 656) = v54;

  id v55 = [objc_allocWithZone((Class)type metadata accessor for AppStorePurchaser.PurchaseDelegate()) init];
  *(void *)(v0 + 664) = v55;
  [v54 setDelegate:v55];
  static Logger.vpp.getter();
  id v56 = v49;
  uint64_t v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.default.getter();
  BOOL v59 = os_log_type_enabled(v57, v58);
  char v60 = *(void **)(v0 + 384);
  id v76 = v54;
  if (v59)
  {
    uint64_t v61 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v62 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v61 = 138543362;
    *(void *)(v0 + 296) = v60;
    id v63 = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v62 = v60;

    _os_log_impl((void *)&_mh_execute_header, v57, v58, "Performing purchase with buy params: %{public}@", v61, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v57 = *(NSObject **)(v0 + 384);
  }
  uint64_t v64 = *(void *)(v0 + 544);
  uint64_t v65 = *(void *)(v0 + 520);
  uint64_t v66 = *(void *)(v0 + 512);
  uint64_t v68 = *(void *)(v0 + 448);
  uint64_t v67 = *(void *)(v0 + 456);
  uint64_t v69 = *(void *)(v0 + 440);

  *(void *)(v0 + 672) = (v65 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v78(v64, v66);
  id v70 = [v76 performPurchase];
  *(void *)(v0 + 680) = v70;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 248;
  *(void *)(v0 + 24) = sub_1002C8F0C;
  swift_continuation_init();
  *(void *)(v0 + 136) = v69;
  uint64_t v71 = sub_10019CE94((uint64_t *)(v0 + 112));
  sub_10018B1DC(0, (unint64_t *)&unk_10065F9A0);
  sub_1000172F8(&qword_10065B260);
  CheckedContinuation.init(continuation:function:)();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v68 + 32))(v71, v67, v69);
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 1107296256;
  *(void *)(v0 + 96) = sub_1002CA454;
  *(void *)(v0 + 104) = &unk_10063FD10;
  objc_msgSend(v70, "resultWithCompletion:");
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_1002C85A4()
{
  uint64_t v71 = v0;
  *(void *)(v0 + 632) = 0;
  if (*(void *)(v0 + 400))
  {
    uint64_t v1 = *(void *)(v0 + 384);
    *(void *)(swift_task_alloc() + 16) = v1;
    uint64_t v2 = swift_bridgeObjectRetain();
    sub_1002CB0A0(v2, (void (*)(id, uint64_t, uint64_t))sub_1002CB994);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
  }
  id v3 = *(void **)(v0 + 384);
  static Logger.vpp.getter();
  id v4 = v3;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void *)(v0 + 560);
  uint64_t v9 = *(void *)(v0 + 520);
  uint64_t v10 = *(void *)(v0 + 512);
  os_log_type_t v11 = *(void **)(v0 + 384);
  if (v7)
  {
    uint64_t v68 = *(void *)(v0 + 560);
    BOOL v12 = (uint8_t *)swift_slowAlloc();
    v70[0] = swift_slowAlloc();
    *(_DWORD *)BOOL v12 = 136446210;
    id v13 = [v11 stringValue];
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;

    *(void *)(v0 + 320) = sub_1000143F4(v14, v16, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Performing purchase with parameters: %{public}s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    char v17 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v17(v68, v10);
  }
  else
  {

    char v17 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v17(v8, v10);
  }
  id v18 = (uint64_t *)(v0 + 280);
  *(void *)(v0 + 640) = v17;
  id v19 = [objc_allocWithZone((Class)AMSPurchase) initWithPurchaseType:5 buyParams:*(void *)(v0 + 384)];
  *(void *)(v0 + 648) = v19;
  uint64_t v20 = *(void *)(v0 + 408);
  int v21 = *(unsigned __int8 *)(v0 + 696);
  [v19 setUserInitiated:*(unsigned __int8 *)(v0 + 696)];
  [v19 setIgnoreRequirePasswordRestriction:v21 ^ 1u];
  unint64_t v22 = &_swiftEmptyDictionarySingleton;
  *(void *)(v0 + 280) = &_swiftEmptyDictionarySingleton;
  uint64_t v23 = *(void *)(v20 + 16);
  *(void *)(v0 + 304) = v23;
  if (*(void *)(v23 + 16))
  {
    *(void *)(v0 + 256) = v23;
    swift_bridgeObjectRetain();
    sub_1000172F8((uint64_t *)&unk_10065C5D0);
    sub_10017B8C8();
    uint64_t v24 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v26 = v25;
    sub_10017B89C(v0 + 304);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v70[0] = *v18;
    *id v18 = 0x8000000000000000;
    sub_100529754(v24, v26, 0xD000000000000011, 0x80000001005BD7C0, isUniquelyReferenced_nonNull_native);
    *id v18 = v70[0];
    swift_bridgeObjectRelease();
    unint64_t v22 = (void *)*v18;
  }
  if (*(unsigned char *)(*(void *)(v0 + 408) + 110))
  {
    char v28 = swift_isUniquelyReferenced_nonNull_native();
    v70[0] = *v18;
    *id v18 = 0x8000000000000000;
    sub_100529754(1702195828, 0xE400000000000000, 0xD000000000000010, 0x80000001005BD810, v28);
    *id v18 = v70[0];
    swift_bridgeObjectRelease();
    unint64_t v22 = (void *)*v18;
  }
  uint64_t v69 = v17;
  if (v22[2])
  {
    static Logger.vpp.getter();
    int v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    BOOL v31 = os_log_type_enabled(v29, v30);
    uint64_t v32 = *(void *)(v0 + 552);
    uint64_t v33 = *(void *)(v0 + 512);
    if (v31)
    {
      uint64_t v66 = *(void *)(v0 + 552);
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      v70[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136446210;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      uint64_t v65 = v33;
      uint64_t v35 = Dictionary.description.getter();
      unint64_t v37 = v36;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 312) = sub_1000143F4(v35, v37, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Setting additional purchase headers: %{public}s", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v38 = v66;
      uint64_t v39 = v65;
    }
    else
    {

      uint64_t v38 = v32;
      uint64_t v39 = v33;
    }
    v17(v38, v39);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v19 setAdditionalHeaders:isa];
  }
  uint64_t v41 = *(void **)(v0 + 384);
  id v42 = v19;
  NSString v43 = String._bridgeToObjectiveC()();
  NSString v44 = String._bridgeToObjectiveC()();
  id v45 = [self bagForProfile:v43 profileVersion:v44];

  id v46 = [objc_allocWithZone((Class)AMSPurchaseTask) initWithPurchase:v42 bag:v45];
  *(void *)(v0 + 656) = v46;

  id v47 = [objc_allocWithZone((Class)type metadata accessor for AppStorePurchaser.PurchaseDelegate()) init];
  *(void *)(v0 + 664) = v47;
  [v46 setDelegate:v47];
  static Logger.vpp.getter();
  id v48 = v41;
  uint64_t v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.default.getter();
  BOOL v51 = os_log_type_enabled(v49, v50);
  NSString v52 = *(void **)(v0 + 384);
  id v67 = v46;
  if (v51)
  {
    id v53 = (uint8_t *)swift_slowAlloc();
    id v54 = (void *)swift_slowAlloc();
    *(_DWORD *)id v53 = 138543362;
    *(void *)(v0 + 296) = v52;
    id v55 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v54 = v52;

    _os_log_impl((void *)&_mh_execute_header, v49, v50, "Performing purchase with buy params: %{public}@", v53, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v49 = *(NSObject **)(v0 + 384);
  }
  uint64_t v56 = *(void *)(v0 + 544);
  uint64_t v57 = *(void *)(v0 + 520);
  uint64_t v58 = *(void *)(v0 + 512);
  uint64_t v60 = *(void *)(v0 + 448);
  uint64_t v59 = *(void *)(v0 + 456);
  uint64_t v61 = *(void *)(v0 + 440);

  *(void *)(v0 + 672) = (v57 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v69(v56, v58);
  id v62 = [v67 performPurchase];
  *(void *)(v0 + 680) = v62;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 248;
  *(void *)(v0 + 24) = sub_1002C8F0C;
  swift_continuation_init();
  *(void *)(v0 + 136) = v61;
  id v63 = sub_10019CE94((uint64_t *)(v0 + 112));
  sub_10018B1DC(0, (unint64_t *)&unk_10065F9A0);
  sub_1000172F8(&qword_10065B260);
  CheckedContinuation.init(continuation:function:)();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v60 + 32))(v63, v59, v61);
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 1107296256;
  *(void *)(v0 + 96) = sub_1002CA454;
  *(void *)(v0 + 104) = &unk_10063FD10;
  objc_msgSend(v62, "resultWithCompletion:");
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_1002C8F0C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 688) = v1;
  if (v1) {
    uint64_t v2 = sub_1002C991C;
  }
  else {
    uint64_t v2 = sub_1002C901C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002C901C()
{
  uint64_t v67 = v0;
  uint64_t v1 = *(void **)(v0 + 248);

  static Logger.vpp.getter();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Purchase completed successfully", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v0 + 640);
  uint64_t v6 = *(void *)(v0 + 536);
  uint64_t v7 = *(void *)(v0 + 512);

  v5(v6, v7);
  id v8 = [v1 responseDictionary];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v11 = sub_1002DB020(v10, *(unsigned char *)(v0 + 697));
  if (!v12)
  {
    type metadata accessor for InternalError();
    sub_10019FE50();
    swift_allocError();
    *uint64_t v20 = 0;
    v20[1] = 0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    static Logger.vpp.getter();
    swift_errorRetain();
    swift_errorRetain();
    int v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    BOOL v23 = os_log_type_enabled(v21, v22);
    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v0 + 640);
    uint64_t v25 = *(void *)(v0 + 528);
    uint64_t v26 = *(void *)(v0 + 512);
    if (v23)
    {
      uint64_t v64 = *(void *)(v0 + 528);
      id v63 = *(void (**)(uint64_t, uint64_t))(v0 + 640);
      id v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      *(_DWORD *)id v27 = 136446210;
      swift_getErrorValue();
      uint64_t v28 = *(void *)(*(void *)(v0 + 208) - 8);
      swift_task_alloc();
      (*(void (**)(void))(v28 + 16))();
      uint64_t v29 = String.init<A>(describing:)();
      unint64_t v31 = v30;
      swift_task_dealloc();
      *(void *)(v0 + 288) = sub_1000143F4(v29, v31, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Purchase completed with error: %{public}s", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v63(v64, v26);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      v24(v25, v26);
    }
    uint64_t v35 = *(void *)(v0 + 592);
    uint64_t v36 = *(void *)(v0 + 416);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 424) + 48))(v35, 1, v36))
    {
      uint64_t v37 = *(void *)(v0 + 432);
      sub_1002CB888(v35, v37);
      if (*(unsigned char *)(v37 + *(int *)(v36 + 24)) == 1)
      {
        sub_10018B1DC(0, (unint64_t *)&qword_10065F9B0);
        sub_1004FCEAC();
      }
      sub_1002CB8EC(*(void *)(v0 + 432));
    }
    uint64_t v38 = (void *)_convertErrorToNSError(_:)();
    if ([v38 code] == (id)305)
    {
      id v39 = [v38 userInfo];
      uint64_t v40 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (*(void *)(v40 + 16) && (unint64_t v43 = sub_100016D20(v41, v42), (v44 & 1) != 0))
      {
        sub_1000144C8(*(void *)(v40 + 56) + 32 * v43, v0 + 144);
      }
      else
      {
        *(_OWORD *)(v0 + 144) = 0u;
        *(_OWORD *)(v0 + 160) = 0u;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(v0 + 168))
      {
        if ((swift_dynamicCast() & 1) != 0 && *(void *)(v0 + 264) == 9610)
        {
          swift_allocError();
          uint64_t v46 = v45;
          uint64_t v47 = enum case for ManagedAppDistributionError.licenseNotFound(_:);
          uint64_t v48 = type metadata accessor for ManagedAppDistributionError();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 104))(v46, v47, v48);
          swift_storeEnumTagMultiPayload();
LABEL_36:
          uint64_t v57 = v38;
          swift_willThrow();
          uint64_t v58 = *(void **)(v0 + 664);
          uint64_t v59 = *(void **)(v0 + 656);
          uint64_t v60 = *(void **)(v0 + 632);
          uint64_t v61 = *(void *)(v0 + 592);

          swift_errorRelease();
          swift_bridgeObjectRelease();
          sub_10001729C(v61, &qword_10065F998);
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v56 = *(uint64_t (**)(void))(v0 + 8);
          goto LABEL_37;
        }
      }
      else
      {
        sub_10001729C(v0 + 144, (uint64_t *)&unk_10065C9C0);
      }
    }
    v38;
    goto LABEL_36;
  }
  uint64_t v15 = v12;
  uint64_t v16 = v13;
  unint64_t v17 = v14;
  uint64_t v65 = v11;
  if (v14 >> 60 == 15)
  {
    id v18 = *(void **)(v0 + 656);
    id v19 = *(void **)(v0 + 632);
  }
  else
  {
    switch(v14 >> 62)
    {
      case 1uLL:
        uint64_t v49 = (int)v13;
        uint64_t v50 = v13 >> 32;
        goto LABEL_30;
      case 2uLL:
        uint64_t v49 = *(void *)(v13 + 16);
        uint64_t v50 = *(void *)(v13 + 24);
LABEL_30:
        sub_100012670(v13, v14);
        if (v49 == v50) {
          goto LABEL_31;
        }
        goto LABEL_13;
      case 3uLL:
        goto LABEL_31;
      default:
        if ((v14 & 0xFF000000000000) != 0)
        {
LABEL_13:
          uint64_t v32 = *(void **)(v0 + 656);
          uint64_t v33 = *(void **)(v0 + 648);
          uint64_t v34 = *(void **)(v0 + 632);
          sub_10050E5A0();
        }
        else
        {
LABEL_31:
          BOOL v51 = *(void **)(v0 + 656);
          NSString v52 = *(void **)(v0 + 648);
          uint64_t v34 = *(void **)(v0 + 632);
        }
        sub_10018AE44(v16, v17);
        break;
    }
  }
  id v53 = *(void **)(v0 + 664);
  uint64_t v54 = *(void *)(v0 + 592);
  id v55 = *(uint64_t **)(v0 + 328);
  swift_bridgeObjectRetain();
  sub_1002CB948(v65, v15, v16, v17);
  uint64_t *v55 = v15;

  swift_bridgeObjectRelease();
  sub_10001729C(v54, &qword_10065F998);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v56 = *(uint64_t (**)(void))(v0 + 8);
LABEL_37:
  return v56();
}

uint64_t sub_1002C991C()
{
  uint64_t v37 = v0;
  uint64_t v1 = *(void **)(v0 + 680);
  swift_willThrow();

  static Logger.vpp.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v0 + 640);
    uint64_t v34 = *(void *)(v0 + 528);
    uint64_t v33 = *(void *)(v0 + 512);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    swift_getErrorValue();
    uint64_t v5 = *(void *)(*(void *)(v0 + 208) - 8);
    swift_task_alloc();
    (*(void (**)(void))(v5 + 16))();
    uint64_t v6 = String.init<A>(describing:)();
    unint64_t v8 = v7;
    swift_task_dealloc();
    *(void *)(v0 + 288) = sub_1000143F4(v6, v8, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Purchase completed with error: %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v35(v34, v33);
  }
  else
  {
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v0 + 640);
    uint64_t v10 = *(void *)(v0 + 528);
    uint64_t v11 = *(void *)(v0 + 512);
    swift_errorRelease();
    swift_errorRelease();

    v9(v10, v11);
  }
  uint64_t v12 = *(void *)(v0 + 592);
  uint64_t v13 = *(void *)(v0 + 416);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 424) + 48))(v12, 1, v13))
  {
    uint64_t v14 = *(void *)(v0 + 432);
    sub_1002CB888(v12, v14);
    if (*(unsigned char *)(v14 + *(int *)(v13 + 24)) == 1)
    {
      sub_10018B1DC(0, (unint64_t *)&qword_10065F9B0);
      sub_1004FCEAC();
    }
    sub_1002CB8EC(*(void *)(v0 + 432));
  }
  uint64_t v15 = (void *)_convertErrorToNSError(_:)();
  if ([v15 code] == (id)305)
  {
    id v16 = [v15 userInfo];
    uint64_t v17 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (*(void *)(v17 + 16) && (unint64_t v20 = sub_100016D20(v18, v19), (v21 & 1) != 0))
    {
      sub_1000144C8(*(void *)(v17 + 56) + 32 * v20, v0 + 144);
    }
    else
    {
      *(_OWORD *)(v0 + 144) = 0u;
      *(_OWORD *)(v0 + 160) = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(v0 + 168))
    {
      if ((swift_dynamicCast() & 1) != 0 && *(void *)(v0 + 264) == 9610)
      {
        type metadata accessor for InternalError();
        sub_10019FE50();
        swift_allocError();
        uint64_t v23 = v22;
        uint64_t v24 = enum case for ManagedAppDistributionError.licenseNotFound(_:);
        uint64_t v25 = type metadata accessor for ManagedAppDistributionError();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 104))(v23, v24, v25);
        swift_storeEnumTagMultiPayload();
        goto LABEL_19;
      }
    }
    else
    {
      sub_10001729C(v0 + 144, (uint64_t *)&unk_10065C9C0);
    }
  }
  v15;
LABEL_19:
  uint64_t v26 = v15;
  swift_willThrow();
  id v27 = *(void **)(v0 + 664);
  uint64_t v28 = *(void **)(v0 + 656);
  uint64_t v29 = *(void **)(v0 + 632);
  uint64_t v30 = *(void *)(v0 + 592);

  swift_errorRelease();
  swift_bridgeObjectRelease();
  sub_10001729C(v30, &qword_10065F998);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
  return v31();
}

uint64_t sub_1002C9EF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = sub_1000172F8(&qword_10065C9B0);
  __chkstk_darwin(v14 - 8);
  uint64_t v56 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v54 = *(void *)(v16 - 8);
  uint64_t v55 = v16;
  uint64_t v17 = __chkstk_darwin(v16);
  id v53 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  NSString v52 = (char *)&v51 - v19;
  uint64_t v20 = sub_1000172F8((uint64_t *)&unk_100661AB0);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v51 - v24;
  uint64_t v26 = type metadata accessor for AppStorePurchaser.VendorID();
  uint64_t v57 = a1;
  uint64_t v58 = v26;
  uint64_t v27 = *(int *)(v26 + 20);
  uint64_t v61 = a7;
  uint64_t v62 = a3;
  uint64_t v28 = (void *)(a7 + v27);
  *uint64_t v28 = a1;
  v28[1] = a2;
  _OWORD v28[2] = a3;
  void v28[3] = a4;
  uint64_t v29 = type metadata accessor for Logger();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v25, 1, 1, v29);
  sub_100017238((uint64_t)v25, (uint64_t)v23, (uint64_t *)&unk_100661AB0);
  uint64_t v59 = a4;
  swift_bridgeObjectRetain_n();
  uint64_t v60 = a2;
  swift_bridgeObjectRetain();
  sub_1001C5E20(a5, a6);
  uint64_t v30 = sub_100011088("LSApplicationRecord", 19, 2, 0, 1, 1, (uint64_t)v23, (void *)&_mh_execute_header);
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  if (qword_10065B150 != -1) {
    swift_once();
  }
  v64[0] = v30;
  v64[1] = v32;
  v64[2] = v34;
  v64[3] = v36;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000172F8(&qword_10065F9C0);
  swift_task_localValuePush();
  os_unfair_lock_lock((os_unfair_lock_t)(v32 + 24));
  sub_100006238((void **)(v32 + 16), &v63);
  os_unfair_lock_unlock((os_unfair_lock_t)(v32 + 24));
  uint64_t v37 = v63;
  if (v63)
  {
    sub_10000E2EC();
  }
  sub_1004FD17C(a5, a6, 0, v64);
  sub_1001C5E34(a5, a6);
  swift_bridgeObjectRelease();
  uint64_t v38 = (void *)v64[0];
  swift_task_localValuePop();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10001729C((uint64_t)v25, (uint64_t *)&unk_100661AB0);
  sub_1001C5E34(a5, a6);
  uint64_t v39 = v61;
  if (!v38) {
    goto LABEL_11;
  }
  id v40 = [v38 deviceIdentifierForVendor];
  if (!v40)
  {

    uint64_t v45 = (uint64_t)v56;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v56, 1, 1, v55);
    goto LABEL_10;
  }
  uint64_t v41 = v40;
  uint64_t v42 = v53;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v43 = v54;
  char v44 = *(void (**)(char *, char *, uint64_t))(v54 + 32);
  uint64_t v45 = (uint64_t)v56;
  uint64_t v46 = v42;
  uint64_t v47 = v55;
  v44(v56, v46, v55);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v45, 0, 1, v47);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v45, 1, v47) == 1)
  {
LABEL_10:
    sub_10001729C(v45, &qword_10065C9B0);
LABEL_11:
    sub_10018B1DC(0, (unint64_t *)&qword_10065F9B0);
    sub_1004FCC64(v39);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    char v50 = 1;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v48 = v52;
  v44(v52, (char *)v45, v47);
  uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v44)(v39, v48, v47);
  char v50 = 0;
LABEL_12:
  *(unsigned char *)(v39 + *(int *)(v58 + 24)) = v50;
  return result;
}

void sub_1002CA454(uint64_t a1, void *a2, void *a3)
{
}

uint64_t sub_1002CA5E4(void *a1, void *a2, void *aBlock, void *a4)
{
  v4[3] = a2;
  v4[4] = a4;
  v4[2] = a1;
  v4[5] = _Block_copy(aBlock);
  id v8 = a1;
  id v9 = a2;
  id v10 = a4;
  return _swift_task_switch(sub_1002CC128, 0, 0);
}

void sub_1002CA67C(uint64_t a1, void *a2, void *a3)
{
}

void sub_1002CA688(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  sub_10018AC60((void *)(a1 + 32), *(void *)(a1 + 56));
  if (a3)
  {
    id v7 = a3;
    sub_1000172F8(a4);
    CheckedContinuation.resume(throwing:)();
  }
  else if (a2)
  {
    id v8 = a2;
    sub_1000172F8(a4);
    CheckedContinuation.resume(returning:)();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1002CA8AC(void *a1, void *a2, void *aBlock, void *a4)
{
  v4[3] = a2;
  v4[4] = a4;
  v4[2] = a1;
  v4[5] = _Block_copy(aBlock);
  id v8 = a1;
  id v9 = a2;
  id v10 = a4;
  uint64_t v11 = (void *)swift_task_alloc();
  v4[6] = v11;
  *uint64_t v11 = v4;
  v11[1] = sub_1002CA978;
  return sub_1002CB258((uint64_t)v9);
}

uint64_t sub_1002CA978(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v6 = *(void **)(*v2 + 32);
  id v7 = *(void **)(*v2 + 24);
  id v8 = *(void **)(*v2 + 16);
  uint64_t v9 = *v2;
  swift_task_dealloc();

  id v10 = *(void (***)(void, void, void))(v5 + 40);
  if (v3)
  {
    uint64_t v11 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void *))v10)[2](v10, 0, v11);

    _Block_release(v10);
  }
  else
  {
    ((void (**)(void, void *, void))v10)[2](v10, a1, 0);
    _Block_release(v10);
  }
  uint64_t v12 = *(uint64_t (**)(void))(v9 + 8);
  return v12();
}

uint64_t sub_1002CACD4(void *a1, void *a2, void *aBlock, void *a4)
{
  v4[3] = a2;
  v4[4] = a4;
  v4[2] = a1;
  v4[5] = _Block_copy(aBlock);
  id v8 = a1;
  id v9 = a2;
  id v10 = a4;
  return _swift_task_switch(sub_1002CAD6C, 0, 0);
}

uint64_t sub_1002CAD6C()
{
  uint64_t v2 = (void *)v0[4];
  uint64_t v1 = (void (**)(void, void, void))v0[5];
  uint64_t v4 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  type metadata accessor for InternalError();
  sub_10019FE50();
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();

  uint64_t v5 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  ((void (**)(void, void, void *))v1)[2](v1, 0, v5);

  _Block_release(v1);
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

id sub_1002CAEAC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppStorePurchaser.PurchaseDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AppStorePurchaser.PurchaseDelegate()
{
  return self;
}

uint64_t sub_1002CAF0C()
{
  objc_super v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_10000B238;
  id v7 = (uint64_t (*)(void *, void *, void *, void *))((char *)&dword_10065F910 + dword_10065F910);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_1002CAFD8()
{
  objc_super v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_1000176B4;
  id v7 = (uint64_t (*)(void *, void *, void *, void *))((char *)&dword_10065F928 + dword_10065F928);
  return v7(v2, v3, v5, v4);
}

void sub_1002CB0A0(uint64_t a1, void (*a2)(id, uint64_t, uint64_t))
{
  uint64_t v19 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    int64_t v16 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v16 >= v7) {
      goto LABEL_23;
    }
    unint64_t v17 = *(void *)(v19 + 8 * v16);
    ++v8;
    if (!v17)
    {
      int64_t v8 = v16 + 1;
      if (v16 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v17 = *(void *)(v19 + 8 * v8);
      if (!v17)
      {
        int64_t v8 = v16 + 2;
        if (v16 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v17 = *(void *)(v19 + 8 * v8);
        if (!v17)
        {
          int64_t v8 = v16 + 3;
          if (v16 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v17 = *(void *)(v19 + 8 * v8);
          if (!v17) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v17 - 1) & v17;
    unint64_t v10 = __clz(__rbit64(v17)) + (v8 << 6);
LABEL_5:
    uint64_t v11 = *(void **)(*(void *)(a1 + 48) + 8 * v10);
    uint64_t v12 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v10);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    id v15 = v11;
    swift_bridgeObjectRetain();
    a2(v15, v13, v14);
    swift_bridgeObjectRelease();
  }
  int64_t v18 = v16 + 4;
  if (v18 >= v7)
  {
LABEL_23:
    swift_release();
    return;
  }
  unint64_t v17 = *(void *)(v19 + 8 * v18);
  if (v17)
  {
    int64_t v8 = v18;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v8 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v8 >= v7) {
      goto LABEL_23;
    }
    unint64_t v17 = *(void *)(v19 + 8 * v8);
    ++v18;
    if (v17) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_1002CB258(uint64_t a1)
{
  v1[19] = a1;
  uint64_t v2 = sub_1000172F8(&qword_10065F950);
  v1[20] = v2;
  v1[21] = *(void *)(v2 - 8);
  v1[22] = swift_task_alloc();
  return _swift_task_switch(sub_1002CB31C, 0, 0);
}

uint64_t sub_1002CB31C()
{
  uint64_t v2 = v0[21];
  uint64_t v1 = v0[22];
  uint64_t v3 = v0[20];
  id v4 = [objc_allocWithZone((Class)AMSAuthenticateTask) initWithRequest:v0[19]];
  v0[23] = v4;
  id v5 = [v4 performAuthentication];
  v0[24] = v5;
  v0[2] = v0;
  v0[7] = v0 + 18;
  v0[3] = sub_1002CB4FC;
  swift_continuation_init();
  v0[17] = v3;
  unint64_t v6 = sub_10019CE94(v0 + 14);
  sub_10018B1DC(0, (unint64_t *)&unk_10065F958);
  sub_1000172F8(&qword_10065B260);
  CheckedContinuation.init(continuation:function:)();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 32))(v6, v1, v3);
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 1107296256;
  v0[12] = sub_1002CA67C;
  v0[13] = &unk_10063FC70;
  [v5 resultWithCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1002CB4FC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 200) = v1;
  if (v1) {
    uint64_t v2 = sub_1002CB690;
  }
  else {
    uint64_t v2 = sub_1002CB60C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002CB60C()
{
  uint64_t v1 = *(void **)(v0 + 192);

  uint64_t v2 = *(void *)(v0 + 144);
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_1002CB690()
{
  uint64_t v1 = (void *)v0[24];
  uint64_t v2 = (void *)v0[23];
  swift_willThrow();

  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1002CB718(uint64_t a1)
{
  return sub_100014524(a1 + 32);
}

uint64_t sub_1002CB724()
{
  _Block_release(*(const void **)(v0 + 32));

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002CB774()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *unint64_t v6 = v1;
  v6[1] = sub_1000176B4;
  int64_t v7 = (uint64_t (*)(void *, void *, void *, void *))((char *)&dword_10065F968 + dword_10065F968);
  return v7(v2, v3, v5, v4);
}

uint64_t type metadata accessor for AppStorePurchaser.VendorID()
{
  uint64_t result = qword_10065FA20;
  if (!qword_10065FA20) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002CB888(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppStorePurchaser.VendorID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002CB8EC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AppStorePurchaser.VendorID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1002CB948(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    sub_10018AE44(a3, a4);
  }
}

void sub_1002CB994(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  id v4 = String._bridgeToObjectiveC()();
  [v3 setParameter:v4 forKey:a1];
}

uint64_t sub_1002CB9FC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1002CBA40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_10065F998);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for AppStorePurchaser()
{
  return &type metadata for AppStorePurchaser;
}

void *sub_1002CBAB8(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    unint64_t v10 = (void *)((char *)a1 + v8);
    uint64_t v11 = (void *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *unint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = v11[3];
    _OWORD v10[2] = v11[2];
    _OWORD v10[3] = v13;
    *((unsigned char *)a1 + v9) = *((unsigned char *)a2 + v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1002CBBA8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002CBC28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v7);
  unint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = v10[3];
  _OWORD v9[2] = v10[2];
  _OWORD v9[3] = v12;
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1002CBCC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = a2 + v7;
  *uint64_t v8 = *(void *)(a2 + v7);
  v8[1] = *(void *)(a2 + v7 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  _OWORD v8[2] = *(void *)(v9 + 16);
  _OWORD v8[3] = *(void *)(v9 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1002CBD98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (_OWORD *)(a1 + v7);
  unint64_t v10 = (_OWORD *)(a2 + v7);
  long long v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  return a1;
}

uint64_t sub_1002CBE24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a2 + v7 + 8);
  *uint64_t v8 = *(void *)(a2 + v7);
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(v9 + 24);
  _OWORD v8[2] = *(void *)(v9 + 16);
  _OWORD v8[3] = v11;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1002CBED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002CBEE8);
}

uint64_t sub_1002CBEE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1002CBFAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002CBFC0);
}

uint64_t sub_1002CBFC0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1002CC080()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1002CC12C(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_10065FD80);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10018AC60(a1, a1[3]);
  sub_1002D4370();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for ConfigurationBag.UpdatesConfiguration(0);
  v8[15] = 0;
  type metadata accessor for URL();
  sub_1002CF57C(&qword_10065CFE0, (void (*)(uint64_t))&type metadata accessor for URL);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1002CC2EC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v17 = a2;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v20 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_1000172F8(&qword_10065FD70);
  uint64_t v18 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for ConfigurationBag.UpdatesConfiguration(0);
  __chkstk_darwin(v19);
  unint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  sub_10018AC60(a1, a1[3]);
  sub_1002D4370();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    sub_100014524((uint64_t)a1);
    uint64_t v13 = type metadata accessor for UUID();
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8))(v10, v13);
  }
  else
  {
    uint64_t v11 = v18;
    char v23 = 0;
    sub_1002CF57C(&qword_10065CFD8, (void (*)(uint64_t))&type metadata accessor for URL);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v12 = v19;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(&v10[*(int *)(v19 + 20)], v6, v4);
    char v22 = 1;
    uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v21);
    *(void *)&v10[*(int *)(v12 + 24)] = v14;
    sub_1002D4308((uint64_t)v10, v17, type metadata accessor for ConfigurationBag.UpdatesConfiguration);
    sub_100014524((uint64_t)a1);
    return sub_1002D2C3C((uint64_t)v10, type metadata accessor for ConfigurationBag.UpdatesConfiguration);
  }
}

uint64_t sub_1002CC694(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_10065FD68);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10018AC60(a1, a1[3]);
  sub_1002D42B4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for URL();
  sub_1002CF57C(&qword_10065CFE0, (void (*)(uint64_t))&type metadata accessor for URL);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for ConfigurationBag.RestoresConfiguration(0);
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1002CC848@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v22 = *(void *)(v4 - 8);
  uint64_t v23 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_1000172F8(&qword_10065FD58);
  uint64_t v21 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ConfigurationBag.RestoresConfiguration(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_1002D42B4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100014524((uint64_t)a1);
  }
  uint64_t v19 = v11;
  uint64_t v12 = v21;
  uint64_t v13 = v22;
  char v26 = 0;
  sub_1002CF57C(&qword_10065CFD8, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v14 = v23;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v19, v6, v14);
  char v25 = 1;
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v24);
  uint64_t v17 = (uint64_t)v19;
  uint64_t v16 = v20;
  *(void *)&v19[*(int *)(v9 + 20)] = v15;
  sub_1002D4308(v17, v16, type metadata accessor for ConfigurationBag.RestoresConfiguration);
  sub_100014524((uint64_t)a1);
  return sub_1002D2C3C(v17, type metadata accessor for ConfigurationBag.RestoresConfiguration);
}

unint64_t sub_1002CCB94(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 2:
      unint64_t result = 0xD000000000000015;
      break;
    case 3:
      unint64_t result = 0xD000000000000018;
      break;
    case 4:
      unint64_t result = 0xD000000000000014;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1002CCC2C(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_10065FD98);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_1002D43C4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  type metadata accessor for URL();
  sub_1002CF57C(&qword_10065CFE0, (void (*)(uint64_t))&type metadata accessor for URL);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for ConfigurationBag.LicenseConfiguration(0);
    char v12 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v11 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v10 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v9 = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1002CCE90@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v3 = sub_1000172F8(&qword_10065C3C0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v37 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v38 = (char *)&v32 - v6;
  uint64_t v41 = type metadata accessor for URL();
  uint64_t v39 = *(void *)(v41 - 8);
  uint64_t v7 = __chkstk_darwin(v41);
  char v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  char v12 = (char *)&v32 - v11;
  __chkstk_darwin(v10);
  uint64_t v43 = (char *)&v32 - v13;
  uint64_t v42 = sub_1000172F8(&qword_10065FD88);
  uint64_t v40 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (int *)type metadata accessor for ConfigurationBag.LicenseConfiguration(0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_1002D43C4();
  char v44 = v15;
  uint64_t v19 = (uint64_t)v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v19) {
    return sub_100014524((uint64_t)a1);
  }
  uint64_t v34 = v9;
  uint64_t v35 = v12;
  uint64_t v45 = a1;
  char v50 = 0;
  uint64_t v20 = sub_1002CF57C(&qword_10065CFD8, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v21 = v42;
  uint64_t v22 = v41;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
  v23(v18, v43, v22);
  char v49 = 1;
  uint64_t v24 = (char *)v20;
  uint64_t v25 = (uint64_t)v38;
  uint64_t v43 = v24;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v33 = v23;
  sub_10001733C(v25, (uint64_t)&v18[v16[5]], &qword_10065C3C0);
  char v48 = 2;
  char v26 = v35;
  uint64_t v38 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v27 = (uint64_t)v18;
  v33(&v18[v16[6]], v26, v22);
  char v47 = 3;
  uint64_t v28 = v34;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v29 = v16;
  v33((char *)(v27 + v16[7]), v28, v22);
  char v46 = 4;
  uint64_t v30 = (uint64_t)v37;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v44, v21);
  sub_10001733C(v30, v27 + v29[8], &qword_10065C3C0);
  sub_1002D4308(v27, v36, type metadata accessor for ConfigurationBag.LicenseConfiguration);
  sub_100014524((uint64_t)v45);
  return sub_1002D2C3C(v27, type metadata accessor for ConfigurationBag.LicenseConfiguration);
}

uint64_t sub_1002CD4D4()
{
  if (*v0) {
    return 0x49676E696C6C6F70;
  }
  else {
    return 7107189;
  }
}

uint64_t sub_1002CD514@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002D4C04(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002CD53C(uint64_t a1)
{
  unint64_t v2 = sub_1002D4370();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002CD578(uint64_t a1)
{
  unint64_t v2 = sub_1002D4370();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002CD5B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002CC2EC(a1, a2);
}

uint64_t sub_1002CD5CC(void *a1)
{
  return sub_1002CC12C(a1);
}

Swift::Int sub_1002CD5E4(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_1002CF57C((unint64_t *)&unk_100660E70, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for URL();
  sub_1002CF57C(&qword_10065FA78, (void (*)(uint64_t))&type metadata accessor for URL);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(void *)(v1 + *(int *)(a1 + 24)));
  return Hasher._finalize()();
}

void sub_1002CD6E4(uint64_t a1, uint64_t a2)
{
  type metadata accessor for UUID();
  sub_1002CF57C((unint64_t *)&unk_100660E70, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for URL();
  sub_1002CF57C(&qword_10065FA78, (void (*)(uint64_t))&type metadata accessor for URL);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(void *)(v2 + *(int *)(a2 + 24)));
}

Swift::Int sub_1002CD7D4(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_1002CF57C((unint64_t *)&unk_100660E70, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for URL();
  sub_1002CF57C(&qword_10065FA78, (void (*)(uint64_t))&type metadata accessor for URL);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(void *)(v2 + *(int *)(a2 + 24)));
  return Hasher._finalize()();
}

BOOL sub_1002CD8D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static UUID.== infix(_:_:)() & 1) != 0
      && (static URL.== infix(_:_:)() & 1) != 0
      && *(void *)(a1 + *(int *)(a3 + 24)) == *(void *)(a2 + *(int *)(a3 + 24));
}

uint64_t sub_1002CD938()
{
  if (*v0) {
    return 0x7A69536863746162;
  }
  else {
    return 7107189;
  }
}

uint64_t sub_1002CD970@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002D4D0C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002CD998(uint64_t a1)
{
  unint64_t v2 = sub_1002D42B4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002CD9D4(uint64_t a1)
{
  unint64_t v2 = sub_1002D42B4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002CDA10@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002CC848(a1, a2);
}

uint64_t sub_1002CDA28(void *a1)
{
  return sub_1002CC694(a1);
}

unint64_t sub_1002CDA40()
{
  return sub_1002CCB94(*v0);
}

uint64_t sub_1002CDA48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002D4DFC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002CDA70(uint64_t a1)
{
  unint64_t v2 = sub_1002D43C4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002CDAAC(uint64_t a1)
{
  unint64_t v2 = sub_1002D43C4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002CDAE8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002CCE90(a1, a2);
}

uint64_t sub_1002CDB00(void *a1)
{
  return sub_1002CCC2C(a1);
}

uint64_t sub_1002CDB18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  _OWORD v5[3] = a2;
  v5[4] = a3;
  _OWORD v5[2] = a1;
  sub_1000172F8(&qword_10065C3C0);
  v5[7] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URL();
  v5[8] = v6;
  v5[9] = *(void *)(v6 - 8);
  v5[10] = swift_task_alloc();
  return _swift_task_switch(sub_1002CDC3C, 0, 0);
}

uint64_t sub_1002CDC3C()
{
  if (os_variant_has_internal_content())
  {
    *(unsigned char *)(v0 + 128) = 0;
    uint64_t v1 = (__CFString *)String._bridgeToObjectiveC()();
    unint64_t v2 = (__CFString *)String._bridgeToObjectiveC()();
    CFPreferencesGetAppBooleanValue(v1, v2, (Boolean *)(v0 + 128));
  }
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v7 = *(void *)(v0 + 24);
  uint64_t v6 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  sub_1004CFE38(v7, v6, v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3) == 1)
  {
    sub_10001729C(*(void *)(v0 + 56), &qword_10065C3C0);
    sub_1002CE3E8();
    swift_allocError();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  else
  {
    uint64_t v10 = *(void **)(v0 + 40);
    (*(void (**)(void, void, void))(*(void *)(v0 + 72) + 32))(*(void *)(v0 + 80), *(void *)(v0 + 56), *(void *)(v0 + 64));
    uint64_t v11 = v10[3];
    uint64_t v12 = v10[4];
    sub_10018AC60(v10, v11);
    uint64_t v16 = (uint64_t (*)(uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 + 8)
                                                                                              + **(int **)(v12 + 8));
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 88) = v13;
    void *v13 = v0;
    v13[1] = sub_1002CDF64;
    uint64_t v14 = *(void *)(v0 + 48);
    uint64_t v15 = *(void *)(v0 + 80);
    return v16(v15, 0, 0, 1, v14, v11, v12);
  }
}

uint64_t sub_1002CDF64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[12] = a1;
  v5[13] = a2;
  v5[14] = a3;
  v5[15] = v3;
  swift_task_dealloc();
  if (v3) {
    uint64_t v6 = sub_1002CE32C;
  }
  else {
    uint64_t v6 = sub_1002CE0A8;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1002CE0A8()
{
  if ([*(id *)(v0 + 112) statusCode] != (id)200)
  {
    unint64_t v9 = *(void *)(v0 + 104);
    uint64_t v8 = *(void **)(v0 + 112);
    uint64_t v10 = *(void *)(v0 + 96);
    uint64_t v12 = *(void *)(v0 + 72);
    uint64_t v11 = *(void *)(v0 + 80);
    uint64_t v13 = *(void *)(v0 + 64);
    id v14 = [v8 statusCode];
    sub_10029D4AC();
    swift_allocError();
    *(void *)uint64_t v15 = v14;
    *(unsigned char *)(v15 + 8) = 0;
    swift_willThrow();

    sub_100013510(v10, v9);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    goto LABEL_5;
  }
  uint64_t v1 = *(void *)(v0 + 120);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  type metadata accessor for ConfigurationBag(0);
  sub_1002CF57C(&qword_10065FA70, (void (*)(uint64_t))type metadata accessor for ConfigurationBag);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  uint64_t v2 = v1;
  unint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = *(void **)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 72);
  uint64_t v7 = *(void *)(v0 + 64);
  if (v2)
  {
    (*(void (**)(void, uint64_t))(v6 + 8))(*(void *)(v0 + 80), v7);
    swift_release();

    sub_100013510(v5, v3);
LABEL_5:
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_6;
  }
  (*(void (**)(void, uint64_t))(v6 + 8))(*(void *)(v0 + 80), v7);
  swift_release();

  sub_100013510(v5, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
LABEL_6:
  return v16();
}

uint64_t sub_1002CE32C()
{
  (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

unint64_t sub_1002CE3E8()
{
  unint64_t result = qword_10065FA68;
  if (!qword_10065FA68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FA68);
  }
  return result;
}

uint64_t type metadata accessor for ConfigurationBag(uint64_t a1)
{
  return sub_10019B200(a1, (uint64_t *)&unk_10065FCB0);
}

uint64_t sub_1002CE45C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v36 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ConfigurationBag(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v31 - v17;
  if (!a2) {
    return sub_1002D4308(v4, a3, type metadata accessor for ConfigurationBag);
  }
  uint64_t v19 = *(void *)(v3 + *(int *)(v16 + 36));
  if (!v19 || !*(void *)(v19 + 16)) {
    return sub_1002D4308(v4, a3, type metadata accessor for ConfigurationBag);
  }
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_100016D20(a1, a2);
  if ((v21 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return sub_1002D4308(v4, a3, type metadata accessor for ConfigurationBag);
  }
  sub_1002D4308(*(void *)(v19 + 56) + *(void *)(v12 + 72) * v20, (uint64_t)v15, type metadata accessor for ConfigurationBag);
  sub_1002D41A0((uint64_t)v15, (uint64_t)v18, type metadata accessor for ConfigurationBag);
  static Logger.daemon.getter();
  swift_bridgeObjectRetain();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  int v24 = v23;
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v25 = swift_slowAlloc();
    int v34 = v24;
    uint64_t v26 = v25;
    uint64_t v32 = (void *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v38 = v35;
    *(_DWORD *)uint64_t v26 = 138412546;
    uint64_t v27 = sub_1005163F0();
    os_log_t v33 = v22;
    uint64_t v28 = v27;
    uint64_t v37 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v32 = v28;
    *(_WORD *)(v26 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_1000143F4(a1, a2, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_log_t v29 = v33;
    _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v34, "[%@] Overridden bag found for %{public}s", (uint8_t *)v26, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v8);
  return sub_1002D41A0((uint64_t)v18, a3, type metadata accessor for ConfigurationBag);
}

uint64_t sub_1002CE840(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000172F8(&qword_10065FDA0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10018AC60(a1, a1[3]);
  sub_1002D414C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v17 = 0;
  type metadata accessor for ConfigurationBag.UpdatesConfiguration(0);
  sub_1002CF57C(&qword_10065FDA8, (void (*)(uint64_t))type metadata accessor for ConfigurationBag.UpdatesConfiguration);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for ConfigurationBag(0);
    char v16 = 1;
    type metadata accessor for ConfigurationBag.LicenseConfiguration(0);
    sub_1002CF57C(&qword_10065FDB0, (void (*)(uint64_t))type metadata accessor for ConfigurationBag.LicenseConfiguration);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v15 = 2;
    type metadata accessor for URL();
    sub_1002CF57C(&qword_10065CFE0, (void (*)(uint64_t))&type metadata accessor for URL);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v14 = 3;
    type metadata accessor for ConfigurationBag.RestoresConfiguration(0);
    sub_1002CF57C(&qword_10065FDB8, (void (*)(uint64_t))type metadata accessor for ConfigurationBag.RestoresConfiguration);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v13 = 4;
    type metadata accessor for OAuthServerMetadata();
    sub_1002CF57C(&qword_10065FDC0, (void (*)(uint64_t))type metadata accessor for OAuthServerMetadata);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + *(int *)(v9 + 36));
    v11[15] = 5;
    sub_1000172F8(&qword_10065FD48);
    sub_1002D4418();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1002CEBFC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v3 = sub_1000172F8(&qword_10065FC50);
  __chkstk_darwin(v3 - 8);
  uint64_t v27 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000172F8(&qword_10065FC48);
  __chkstk_darwin(v5 - 8);
  uint64_t v28 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v7 - 8);
  os_log_t v29 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for ConfigurationBag.LicenseConfiguration(0);
  __chkstk_darwin(v31);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ConfigurationBag.UpdatesConfiguration(0);
  __chkstk_darwin(v11);
  uint64_t v33 = (uint64_t)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_1000172F8(&qword_10065FD18);
  uint64_t v30 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v13 = type metadata accessor for ConfigurationBag(0);
  __chkstk_darwin(v13);
  char v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a1[3];
  int v34 = a1;
  sub_10018AC60(a1, v16);
  sub_1002D414C();
  uint64_t v17 = v35;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17) {
    return sub_100014524((uint64_t)v34);
  }
  uint64_t v18 = (uint64_t)v15;
  char v42 = 0;
  sub_1002CF57C(&qword_10065FD28, (void (*)(uint64_t))type metadata accessor for ConfigurationBag.UpdatesConfiguration);
  uint64_t v19 = v32;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  sub_1002D41A0(v33, v18, type metadata accessor for ConfigurationBag.UpdatesConfiguration);
  char v41 = 1;
  sub_1002CF57C(&qword_10065FD30, (void (*)(uint64_t))type metadata accessor for ConfigurationBag.LicenseConfiguration);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v21 = (int *)v13;
  sub_1002D41A0((uint64_t)v10, v18 + *(int *)(v13 + 20), type metadata accessor for ConfigurationBag.LicenseConfiguration);
  type metadata accessor for URL();
  char v40 = 2;
  sub_1002CF57C(&qword_10065CFD8, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v22 = (uint64_t)v29;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_10001733C(v22, v18 + v21[6], &qword_10065C3C0);
  type metadata accessor for ConfigurationBag.RestoresConfiguration(0);
  char v39 = 3;
  sub_1002CF57C(&qword_10065FD38, (void (*)(uint64_t))type metadata accessor for ConfigurationBag.RestoresConfiguration);
  uint64_t v23 = (uint64_t)v28;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_10001733C(v23, v18 + v21[7], &qword_10065FC48);
  type metadata accessor for OAuthServerMetadata();
  char v38 = 4;
  sub_1002CF57C(&qword_10065FD40, (void (*)(uint64_t))type metadata accessor for OAuthServerMetadata);
  uint64_t v24 = (uint64_t)v27;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_10001733C(v24, v18 + v21[8], &qword_10065FC50);
  sub_1000172F8(&qword_10065FD48);
  char v37 = 5;
  sub_1002D4208();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(void, uint64_t))(v30 + 8))(0, v19);
  *(void *)(v18 + v21[9]) = v36;
  sub_1002D4308(v18, v26, type metadata accessor for ConfigurationBag);
  sub_100014524((uint64_t)v34);
  return sub_1002D2C3C(v18, type metadata accessor for ConfigurationBag);
}

unint64_t sub_1002CF3EC()
{
  unint64_t result = 0x73657461647075;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x65736E6563696CLL;
      break;
    case 2:
      unint64_t result = 0x65726F74736572;
      break;
    case 3:
      unint64_t result = 0x7365726F74736572;
      break;
    case 4:
      unint64_t result = 0x687475616FLL;
      break;
    case 5:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1002CF4AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002D4FEC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002CF4D4(uint64_t a1)
{
  unint64_t v2 = sub_1002D414C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002CF510(uint64_t a1)
{
  unint64_t v2 = sub_1002D414C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002CF54C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002CEBFC(a1, a2);
}

uint64_t sub_1002CF564(void *a1)
{
  return sub_1002CE840(a1);
}

uint64_t sub_1002CF57C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_1002CF5C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_1002CF690(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_1002CF6F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1002CF770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1002CF7EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1002CF868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1002CF8E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002CF8F8);
}

uint64_t sub_1002CF8F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1002CF964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002CF978);
}

uint64_t sub_1002CF978(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ConfigurationBag.RestoresConfiguration(uint64_t a1)
{
  return sub_10019B200(a1, qword_10065FAD8);
}

uint64_t sub_1002CFA08()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1002CFAA0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t sub_1002CFBBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t sub_1002CFC64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1002CFD30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1002CFDFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1002CFEC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1002CFF94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002CFFA8);
}

uint64_t sub_1002CFFA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_1002D00A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002D00B4);
}

uint64_t sub_1002D00B4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for URL();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t type metadata accessor for ConfigurationBag.UpdatesConfiguration(uint64_t a1)
{
  return sub_10019B200(a1, qword_10065FB68);
}

uint64_t sub_1002D01D8()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for URL();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1002D02AC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    uint64_t v10 = a3[5];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    unint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    if (v20((char *)a2 + v10, 1, v7))
    {
      uint64_t v13 = sub_1000172F8(&qword_10065C3C0);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      v9((uint64_t *)v11, (uint64_t *)v12, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
    }
    v9((uint64_t *)((char *)a1 + a3[6]), (uint64_t *)((char *)a2 + a3[6]), v7);
    v9((uint64_t *)((char *)a1 + a3[7]), (uint64_t *)((char *)a2 + a3[7]), v7);
    uint64_t v15 = a3[8];
    uint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    if (v20(v17, 1, v7))
    {
      uint64_t v18 = sub_1000172F8(&qword_10065C3C0);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      v9((uint64_t *)v16, (uint64_t *)v17, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v16, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_1002D0528(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v10(a1, v4);
  uint64_t v6 = a1 + a2[5];
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v7(v6, 1, v4)) {
    v10(v6, v4);
  }
  v10(a1 + a2[6], v4);
  v10(a1 + a2[7], v4);
  uint64_t v8 = a1 + a2[8];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v8, 1, v4);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v8, v4);
  }
  return result;
}

char *sub_1002D06A8(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  if (v18(&a2[v9], 1, v6))
  {
    uint64_t v12 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  v8(&a1[a3[6]], &a2[a3[6]], v6);
  v8(&a1[a3[7]], &a2[a3[7]], v6);
  uint64_t v13 = a3[8];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  if (v18(v15, 1, v6))
  {
    uint64_t v16 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v8(v14, v15, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v14, 0, 1, v6);
  }
  return a1;
}

uint64_t sub_1002D08D4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v24(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(a1 + v8, 1, v6);
  int v13 = v11((uint64_t)v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v9, v10, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
LABEL_7:
      uint64_t v15 = v24;
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v14 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
    goto LABEL_6;
  }
  uint64_t v23 = (uint64_t)v10;
  uint64_t v15 = v24;
  v24((uint64_t)v9, v23, v6);
LABEL_8:
  v15(a1 + a3[6], a2 + a3[6], v6);
  v15(a1 + a3[7], a2 + a3[7], v6);
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  int v19 = v11(a1 + v16, 1, v6);
  int v20 = v11((uint64_t)v18, 1, v6);
  if (!v19)
  {
    if (!v20)
    {
      v15((uint64_t)v17, (uint64_t)v18, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v17, v6);
    goto LABEL_13;
  }
  if (v20)
  {
LABEL_13:
    uint64_t v21 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v17, v18, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
  return a1;
}

char *sub_1002D0BD4(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  if (v18(&a2[v9], 1, v6))
  {
    uint64_t v12 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  v8(&a1[a3[6]], &a2[a3[6]], v6);
  v8(&a1[a3[7]], &a2[a3[7]], v6);
  uint64_t v13 = a3[8];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  if (v18(v15, 1, v6))
  {
    uint64_t v16 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v8(v14, v15, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v14, 0, 1, v6);
  }
  return a1;
}

uint64_t sub_1002D0E00(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v24(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(a1 + v8, 1, v6);
  int v13 = v11((uint64_t)v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
LABEL_7:
      uint64_t v15 = v24;
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v14 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
    goto LABEL_6;
  }
  uint64_t v23 = (uint64_t)v10;
  uint64_t v15 = v24;
  v24((uint64_t)v9, v23, v6);
LABEL_8:
  v15(a1 + a3[6], a2 + a3[6], v6);
  v15(a1 + a3[7], a2 + a3[7], v6);
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  int v19 = v11(a1 + v16, 1, v6);
  int v20 = v11((uint64_t)v18, 1, v6);
  if (!v19)
  {
    if (!v20)
    {
      v15((uint64_t)v17, (uint64_t)v18, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v17, v6);
    goto LABEL_13;
  }
  if (v20)
  {
LABEL_13:
    uint64_t v21 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v17, v18, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
  return a1;
}

uint64_t sub_1002D1100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002D1114);
}

uint64_t sub_1002D1114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = sub_1000172F8(&qword_10065C3C0);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_1002D1210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002D1224);
}

uint64_t sub_1002D1224(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = sub_1000172F8(&qword_10065C3C0);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t type metadata accessor for ConfigurationBag.LicenseConfiguration(uint64_t a1)
{
  return sub_10019B200(a1, qword_10065FC00);
}

void sub_1002D134C()
{
  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    sub_1002D4058(319, (unint64_t *)&qword_100661BB0, (void (*)(uint64_t))&type metadata accessor for URL);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unsigned char *storeEnumTagSinglePayload for ConfigurationBag.ConfigurationBagError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1002D14D0);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfigurationBag.ConfigurationBagError()
{
  return &type metadata for ConfigurationBag.ConfigurationBagError;
}

void *sub_1002D1508(void *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *(void *)a2;
    *a1 = *(void *)a2;
    uint64_t v25 = (void *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = type metadata accessor for ConfigurationBag.UpdatesConfiguration(0);
    uint64_t v9 = *(int *)(v8 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = &a2[v9];
    uint64_t v12 = type metadata accessor for URL();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = a1;
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    v15(v10, v11, v12);
    *(void *)((char *)v14 + *(int *)(v8 + 24)) = *(void *)&a2[*(int *)(v8 + 24)];
    id v53 = a2;
    uint64_t v54 = a3;
    uint64_t v16 = *(int *)(a3 + 20);
    NSString v52 = v14;
    uint64_t v17 = (char *)v14 + v16;
    uint64_t v18 = &a2[v16];
    v15((char *)v14 + v16, &a2[v16], v12);
    int v19 = (int *)type metadata accessor for ConfigurationBag.LicenseConfiguration(0);
    uint64_t v20 = v19[5];
    uint64_t v21 = &v17[v20];
    uint64_t v22 = &v18[v20];
    uint64_t v55 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    if (v55(&v18[v20], 1, v12))
    {
      uint64_t v23 = sub_1000172F8(&qword_10065C3C0);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      v15(v21, v22, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v21, 0, 1, v12);
    }
    v15(&v17[v19[6]], &v18[v19[6]], v12);
    v15(&v17[v19[7]], &v18[v19[7]], v12);
    uint64_t v26 = v19[8];
    uint64_t v27 = &v17[v26];
    uint64_t v28 = &v18[v26];
    uint64_t v29 = a3;
    uint64_t v30 = v15;
    if (v55(v28, 1, v12))
    {
      uint64_t v31 = sub_1000172F8(&qword_10065C3C0);
      memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      v15(v27, v28, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v27, 0, 1, v12);
    }
    uint64_t v32 = *(int *)(a3 + 24);
    uint64_t v25 = v52;
    uint64_t v33 = (char *)v52 + v32;
    int v34 = &v53[v32];
    uint64_t v35 = v12;
    if (v55(&v53[v32], 1, v12))
    {
      uint64_t v36 = sub_1000172F8(&qword_10065C3C0);
      memcpy(v33, v34, *(void *)(*(void *)(v36 - 8) + 64));
      char v37 = v30;
    }
    else
    {
      char v37 = v30;
      v30(v33, v34, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v33, 0, 1, v12);
    }
    uint64_t v38 = *(int *)(v54 + 28);
    char v39 = (char *)v52 + v38;
    char v40 = &v53[v38];
    uint64_t v41 = type metadata accessor for ConfigurationBag.RestoresConfiguration(0);
    uint64_t v42 = *(void *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
    {
      uint64_t v43 = sub_1000172F8(&qword_10065FC48);
      memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      v37(v39, v40, v35);
      *(void *)&v39[*(int *)(v41 + 20)] = *(void *)&v40[*(int *)(v41 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
    }
    uint64_t v44 = *(int *)(v54 + 32);
    uint64_t v45 = (char *)v52 + v44;
    char v46 = &v53[v44];
    char v47 = (int *)type metadata accessor for OAuthServerMetadata();
    uint64_t v48 = *((void *)v47 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v48 + 48))(v46, 1, v47))
    {
      uint64_t v49 = sub_1000172F8(&qword_10065FC50);
      memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      v37(v45, v46, v35);
      v37(&v45[v47[5]], &v46[v47[5]], v35);
      *(void *)&v45[v47[6]] = *(void *)&v46[v47[6]];
      *(void *)&v45[v47[7]] = *(void *)&v46[v47[7]];
      *(void *)&v45[v47[8]] = *(void *)&v46[v47[8]];
      *(void *)&v45[v47[9]] = *(void *)&v46[v47[9]];
      char v50 = *(void (**)(char *, void, uint64_t, int *))(v48 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v29 = v54;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v50(v45, 0, 1, v47);
    }
    *(void *)((char *)v52 + *(int *)(v29 + 36)) = *(void *)&v53[*(int *)(v29 + 36)];
    swift_bridgeObjectRetain();
  }
  return v25;
}

uint64_t sub_1002D1B18(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(type metadata accessor for ConfigurationBag.UpdatesConfiguration(0) + 20);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = a1 + a2[5];
  v8(v9, v6);
  uint64_t v10 = (int *)type metadata accessor for ConfigurationBag.LicenseConfiguration(0);
  uint64_t v11 = v9 + v10[5];
  uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v12(v11, 1, v6)) {
    v8(v11, v6);
  }
  v8(v9 + v10[6], v6);
  v8(v9 + v10[7], v6);
  uint64_t v13 = v9 + v10[8];
  if (!v12(v13, 1, v6)) {
    v8(v13, v6);
  }
  uint64_t v14 = a1 + a2[6];
  if (!v12(v14, 1, v6)) {
    v8(v14, v6);
  }
  uint64_t v15 = a1 + a2[7];
  uint64_t v16 = type metadata accessor for ConfigurationBag.RestoresConfiguration(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v15, 1, v16)) {
    v8(v15, v6);
  }
  uint64_t v17 = a1 + a2[8];
  uint64_t v18 = type metadata accessor for OAuthServerMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v17, 1, v18))
  {
    v8(v17, v6);
    v8(v17 + *(int *)(v18 + 20), v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002D1E18(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for ConfigurationBag.UpdatesConfiguration(0);
  uint64_t v8 = *(int *)(v7 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  v13(v9, v10, v11);
  *(void *)(a1 + *(int *)(v7 + 24)) = *(void *)(a2 + *(int *)(v7 + 24));
  uint64_t v51 = a2;
  NSString v52 = a3;
  uint64_t v14 = a3[5];
  uint64_t v50 = a1;
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  v13(a1 + v14, a2 + v14, v11);
  uint64_t v17 = (int *)type metadata accessor for ConfigurationBag.LicenseConfiguration(0);
  uint64_t v18 = v17[5];
  int v19 = (void *)(v15 + v18);
  uint64_t v20 = (const void *)(v16 + v18);
  uint64_t v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  uint64_t v49 = v12;
  if (v48(v16 + v18, 1, v11))
  {
    uint64_t v21 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    v13((uint64_t)v19, (uint64_t)v20, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v19, 0, 1, v11);
  }
  v13(v15 + v17[6], v16 + v17[6], v11);
  v13(v15 + v17[7], v16 + v17[7], v11);
  uint64_t v22 = v17[8];
  uint64_t v23 = (void *)(v15 + v22);
  uint64_t v24 = (const void *)(v16 + v22);
  uint64_t v25 = a2;
  uint64_t v26 = v13;
  if (v48((uint64_t)v24, 1, v11))
  {
    uint64_t v27 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    uint64_t v28 = v49;
  }
  else
  {
    v13((uint64_t)v23, (uint64_t)v24, v11);
    uint64_t v28 = v49;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v49 + 56))(v23, 0, 1, v11);
  }
  uint64_t v29 = v52[6];
  uint64_t v30 = (void *)(v50 + v29);
  uint64_t v31 = (const void *)(a2 + v29);
  if (v48(a2 + v29, 1, v11))
  {
    uint64_t v32 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
    uint64_t v33 = (void (*)(char *, char *, uint64_t))v26;
  }
  else
  {
    uint64_t v33 = (void (*)(char *, char *, uint64_t))v26;
    v26((uint64_t)v30, (uint64_t)v31, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v30, 0, 1, v11);
  }
  uint64_t v34 = v52[7];
  uint64_t v35 = (char *)(v50 + v34);
  uint64_t v36 = (char *)(v51 + v34);
  uint64_t v37 = type metadata accessor for ConfigurationBag.RestoresConfiguration(0);
  uint64_t v38 = *(void *)(v37 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
  {
    uint64_t v39 = sub_1000172F8(&qword_10065FC48);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    v33(v35, v36, v11);
    *(void *)&v35[*(int *)(v37 + 20)] = *(void *)&v36[*(int *)(v37 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
  }
  uint64_t v40 = v52[8];
  uint64_t v41 = (char *)(v50 + v40);
  uint64_t v42 = (char *)(v51 + v40);
  uint64_t v43 = (int *)type metadata accessor for OAuthServerMetadata();
  uint64_t v44 = *((void *)v43 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v44 + 48))(v42, 1, v43))
  {
    uint64_t v45 = sub_1000172F8(&qword_10065FC50);
    memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    v33(v41, v42, v11);
    v33(&v41[v43[5]], &v42[v43[5]], v11);
    *(void *)&v41[v43[6]] = *(void *)&v42[v43[6]];
    *(void *)&v41[v43[7]] = *(void *)&v42[v43[7]];
    *(void *)&v41[v43[8]] = *(void *)&v42[v43[8]];
    *(void *)&v41[v43[9]] = *(void *)&v42[v43[9]];
    char v46 = *(void (**)(char *, void, uint64_t, int *))(v44 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v25 = v51;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v46(v41, 0, 1, v43);
  }
  *(void *)(v50 + v52[9]) = *(void *)(v25 + v52[9]);
  swift_bridgeObjectRetain();
  return v50;
}

uint64_t sub_1002D23D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for ConfigurationBag.UpdatesConfiguration(0);
  uint64_t v8 = *(int *)(v7 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 24);
  v13(v9, v10, v11);
  *(void *)(a1 + *(int *)(v7 + 24)) = *(void *)(a2 + *(int *)(v7 + 24));
  uint64_t v61 = a3;
  uint64_t v14 = a3[5];
  uint64_t v58 = a1;
  uint64_t v59 = (void (*)(void *, const void *, uint64_t))v13;
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2;
  uint64_t v17 = a2 + v14;
  v13(v15, a2 + v14, v11);
  uint64_t v18 = (int *)type metadata accessor for ConfigurationBag.LicenseConfiguration(0);
  uint64_t v19 = v18[5];
  uint64_t v20 = (void *)(v15 + v19);
  uint64_t v21 = (const void *)(v17 + v19);
  uint64_t v60 = v12;
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  LODWORD(v12) = v22(v15 + v19, 1, v11);
  int v23 = v22((uint64_t)v21, 1, v11);
  if (v12)
  {
    if (!v23)
    {
      (*(void (**)(void *, const void *, uint64_t))(v60 + 16))(v20, v21, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v60 + 56))(v20, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    (*(void (**)(void *, uint64_t))(v60 + 8))(v20, v11);
LABEL_6:
    uint64_t v24 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  v59(v20, v21, v11);
LABEL_7:
  v59((void *)(v15 + v18[6]), (const void *)(v17 + v18[6]), v11);
  v59((void *)(v15 + v18[7]), (const void *)(v17 + v18[7]), v11);
  uint64_t v25 = v18[8];
  uint64_t v26 = (void *)(v15 + v25);
  uint64_t v27 = (const void *)(v17 + v25);
  int v28 = v22((uint64_t)v26, 1, v11);
  int v29 = v22((uint64_t)v27, 1, v11);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(void *, const void *, uint64_t))(v60 + 16))(v26, v27, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v60 + 56))(v26, 0, 1, v11);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v29)
  {
    (*(void (**)(void *, uint64_t))(v60 + 8))(v26, v11);
LABEL_12:
    uint64_t v30 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  v59(v26, v27, v11);
LABEL_13:
  uint64_t v31 = v61[6];
  uint64_t v32 = (void *)(v58 + v31);
  uint64_t v33 = (const void *)(a2 + v31);
  int v34 = v22(v58 + v31, 1, v11);
  int v35 = v22((uint64_t)v33, 1, v11);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(void *, const void *, uint64_t))(v60 + 16))(v32, v33, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v60 + 56))(v32, 0, 1, v11);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v35)
  {
    (*(void (**)(void *, uint64_t))(v60 + 8))(v32, v11);
LABEL_18:
    uint64_t v36 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
    goto LABEL_19;
  }
  v59(v32, v33, v11);
LABEL_19:
  uint64_t v37 = v61[7];
  uint64_t v38 = (char *)(v58 + v37);
  uint64_t v39 = (char *)(a2 + v37);
  uint64_t v40 = type metadata accessor for ConfigurationBag.RestoresConfiguration(0);
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48);
  int v43 = v42(v38, 1, v40);
  int v44 = v42(v39, 1, v40);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v38, v39, v11);
      *(void *)&v38[*(int *)(v40 + 20)] = *(void *)&v39[*(int *)(v40 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v44)
  {
    sub_1002D2C3C((uint64_t)v38, type metadata accessor for ConfigurationBag.RestoresConfiguration);
LABEL_24:
    uint64_t v45 = sub_1000172F8(&qword_10065FC48);
    memcpy(v38, v39, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_25;
  }
  v59(v38, v39, v11);
  *(void *)&v38[*(int *)(v40 + 20)] = *(void *)&v39[*(int *)(v40 + 20)];
LABEL_25:
  uint64_t v46 = v61[8];
  char v47 = (char *)(v58 + v46);
  uint64_t v48 = (char *)(v16 + v46);
  uint64_t v49 = (int *)type metadata accessor for OAuthServerMetadata();
  uint64_t v50 = *((void *)v49 - 1);
  uint64_t v51 = *(uint64_t (**)(char *, uint64_t, int *))(v50 + 48);
  int v52 = v51(v47, 1, v49);
  int v53 = v51(v48, 1, v49);
  if (!v52)
  {
    if (!v53)
    {
      v59(v47, v48, v11);
      v59(&v47[v49[5]], &v48[v49[5]], v11);
      *(void *)&v47[v49[6]] = *(void *)&v48[v49[6]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&v47[v49[7]] = *(void *)&v48[v49[7]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&v47[v49[8]] = *(void *)&v48[v49[8]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&v47[v49[9]] = *(void *)&v48[v49[9]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }
    sub_1002D2C3C((uint64_t)v47, (uint64_t (*)(void))type metadata accessor for OAuthServerMetadata);
    goto LABEL_30;
  }
  if (v53)
  {
LABEL_30:
    uint64_t v56 = sub_1000172F8(&qword_10065FC50);
    memcpy(v47, v48, *(void *)(*(void *)(v56 - 8) + 64));
    goto LABEL_31;
  }
  uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v60 + 16);
  v54(v47, v48, v11);
  v54(&v47[v49[5]], &v48[v49[5]], v11);
  *(void *)&v47[v49[6]] = *(void *)&v48[v49[6]];
  *(void *)&v47[v49[7]] = *(void *)&v48[v49[7]];
  *(void *)&v47[v49[8]] = *(void *)&v48[v49[8]];
  *(void *)&v47[v49[9]] = *(void *)&v48[v49[9]];
  uint64_t v55 = *(void (**)(char *, void, uint64_t, int *))(v50 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v55(v47, 0, 1, v49);
LABEL_31:
  *(void *)(v58 + v61[9]) = *(void *)(v16 + v61[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v58;
}

uint64_t sub_1002D2C3C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1002D2C9C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for ConfigurationBag.UpdatesConfiguration(0);
  uint64_t v8 = *(int *)(v7 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
  v13(v9, v10, v11);
  *(void *)(a1 + *(int *)(v7 + 24)) = *(void *)(a2 + *(int *)(v7 + 24));
  uint64_t v46 = a1;
  char v47 = a3;
  uint64_t v14 = a3[5];
  uint64_t v15 = a1 + v14;
  uint64_t v48 = a2;
  uint64_t v16 = a2 + v14;
  v13(a1 + v14, a2 + v14, v11);
  uint64_t v17 = (int *)type metadata accessor for ConfigurationBag.LicenseConfiguration(0);
  uint64_t v18 = v17[5];
  uint64_t v19 = (void *)(v15 + v18);
  uint64_t v20 = (const void *)(v16 + v18);
  uint64_t v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  uint64_t v44 = v12;
  if (v45(v16 + v18, 1, v11))
  {
    uint64_t v21 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    v13((uint64_t)v19, (uint64_t)v20, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v19, 0, 1, v11);
  }
  v13(v15 + v17[6], v16 + v17[6], v11);
  v13(v15 + v17[7], v16 + v17[7], v11);
  uint64_t v22 = v17[8];
  int v23 = (void *)(v15 + v22);
  uint64_t v24 = (const void *)(v16 + v22);
  if (v45((uint64_t)v24, 1, v11))
  {
    uint64_t v25 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    v13((uint64_t)v23, (uint64_t)v24, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v23, 0, 1, v11);
  }
  uint64_t v26 = v47[6];
  uint64_t v27 = (void *)(v46 + v26);
  int v28 = (const void *)(a2 + v26);
  if (v45(a2 + v26, 1, v11))
  {
    uint64_t v29 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
    uint64_t v30 = (void (*)(char *, char *, uint64_t))v13;
  }
  else
  {
    uint64_t v30 = (void (*)(char *, char *, uint64_t))v13;
    v13((uint64_t)v27, (uint64_t)v28, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v44 + 56))(v27, 0, 1, v11);
  }
  uint64_t v31 = v47[7];
  uint64_t v32 = (char *)(v46 + v31);
  uint64_t v33 = (char *)(a2 + v31);
  uint64_t v34 = type metadata accessor for ConfigurationBag.RestoresConfiguration(0);
  uint64_t v35 = *(void *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    uint64_t v36 = sub_1000172F8(&qword_10065FC48);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    v30(v32, v33, v11);
    *(void *)&v32[*(int *)(v34 + 20)] = *(void *)&v33[*(int *)(v34 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  uint64_t v37 = v47[8];
  uint64_t v38 = (char *)(v46 + v37);
  uint64_t v39 = (char *)(v48 + v37);
  uint64_t v40 = (int *)type metadata accessor for OAuthServerMetadata();
  uint64_t v41 = *((void *)v40 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v41 + 48))(v39, 1, v40))
  {
    uint64_t v42 = sub_1000172F8(&qword_10065FC50);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    v30(v38, v39, v11);
    v30(&v38[v40[5]], &v39[v40[5]], v11);
    *(void *)&v38[v40[6]] = *(void *)&v39[v40[6]];
    *(void *)&v38[v40[7]] = *(void *)&v39[v40[7]];
    *(void *)&v38[v40[8]] = *(void *)&v39[v40[8]];
    *(void *)&v38[v40[9]] = *(void *)&v39[v40[9]];
    (*(void (**)(char *, void, uint64_t, int *))(v41 + 56))(v38, 0, 1, v40);
  }
  *(void *)(v46 + v47[9]) = *(void *)(v48 + v47[9]);
  return v46;
}

uint64_t sub_1002D3228(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for ConfigurationBag.UpdatesConfiguration(0);
  uint64_t v8 = *(int *)(v7 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  *(void *)(a1 + *(int *)(v7 + 24)) = *(void *)(a2 + *(int *)(v7 + 24));
  uint64_t v59 = a3;
  uint64_t v14 = a3[5];
  uint64_t v15 = a1 + v14;
  uint64_t v56 = a2;
  uint64_t v57 = (void (*)(void *, const void *, uint64_t))v13;
  uint64_t v16 = a2 + v14;
  v13(a1 + v14, a2 + v14, v11);
  uint64_t v17 = (int *)type metadata accessor for ConfigurationBag.LicenseConfiguration(0);
  uint64_t v18 = v17[5];
  uint64_t v19 = (void *)(v15 + v18);
  uint64_t v20 = (const void *)(v16 + v18);
  uint64_t v58 = v12;
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  LODWORD(v12) = v21(v15 + v18, 1, v11);
  int v22 = v21((uint64_t)v20, 1, v11);
  if (v12)
  {
    if (!v22)
    {
      (*(void (**)(void *, const void *, uint64_t))(v58 + 32))(v19, v20, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v58 + 56))(v19, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    (*(void (**)(void *, uint64_t))(v58 + 8))(v19, v11);
LABEL_6:
    uint64_t v23 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  v57(v19, v20, v11);
LABEL_7:
  v57((void *)(v15 + v17[6]), (const void *)(v16 + v17[6]), v11);
  v57((void *)(v15 + v17[7]), (const void *)(v16 + v17[7]), v11);
  uint64_t v24 = v17[8];
  uint64_t v25 = (void *)(v15 + v24);
  uint64_t v26 = (const void *)(v16 + v24);
  int v27 = v21((uint64_t)v25, 1, v11);
  int v28 = v21((uint64_t)v26, 1, v11);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, const void *, uint64_t))(v58 + 32))(v25, v26, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v58 + 56))(v25, 0, 1, v11);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(void *, uint64_t))(v58 + 8))(v25, v11);
LABEL_12:
    uint64_t v29 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  v57(v25, v26, v11);
LABEL_13:
  uint64_t v30 = v59[6];
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (const void *)(a2 + v30);
  int v33 = v21(a1 + v30, 1, v11);
  int v34 = v21((uint64_t)v32, 1, v11);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(void *, const void *, uint64_t))(v58 + 32))(v31, v32, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v58 + 56))(v31, 0, 1, v11);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v34)
  {
    (*(void (**)(void *, uint64_t))(v58 + 8))(v31, v11);
LABEL_18:
    uint64_t v35 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
    goto LABEL_19;
  }
  v57(v31, v32, v11);
LABEL_19:
  uint64_t v36 = v59[7];
  uint64_t v37 = (char *)(a1 + v36);
  uint64_t v38 = (char *)(a2 + v36);
  uint64_t v39 = type metadata accessor for ConfigurationBag.RestoresConfiguration(0);
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
  int v42 = v41(v37, 1, v39);
  int v43 = v41(v38, 1, v39);
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v37, v38, v11);
      *(void *)&v37[*(int *)(v39 + 20)] = *(void *)&v38[*(int *)(v39 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v43)
  {
    sub_1002D2C3C((uint64_t)v37, type metadata accessor for ConfigurationBag.RestoresConfiguration);
LABEL_24:
    uint64_t v44 = sub_1000172F8(&qword_10065FC48);
    memcpy(v37, v38, *(void *)(*(void *)(v44 - 8) + 64));
    goto LABEL_25;
  }
  v57(v37, v38, v11);
  *(void *)&v37[*(int *)(v39 + 20)] = *(void *)&v38[*(int *)(v39 + 20)];
LABEL_25:
  uint64_t v45 = v59[8];
  uint64_t v46 = (char *)(a1 + v45);
  char v47 = (char *)(v56 + v45);
  uint64_t v48 = (int *)type metadata accessor for OAuthServerMetadata();
  uint64_t v49 = *((void *)v48 - 1);
  uint64_t v50 = *(uint64_t (**)(char *, uint64_t, int *))(v49 + 48);
  int v51 = v50(v46, 1, v48);
  int v52 = v50(v47, 1, v48);
  if (!v51)
  {
    if (!v52)
    {
      v57(v46, v47, v11);
      v57(&v46[v48[5]], &v47[v48[5]], v11);
      *(void *)&v46[v48[6]] = *(void *)&v47[v48[6]];
      swift_bridgeObjectRelease();
      *(void *)&v46[v48[7]] = *(void *)&v47[v48[7]];
      swift_bridgeObjectRelease();
      *(void *)&v46[v48[8]] = *(void *)&v47[v48[8]];
      swift_bridgeObjectRelease();
      *(void *)&v46[v48[9]] = *(void *)&v47[v48[9]];
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }
    sub_1002D2C3C((uint64_t)v46, (uint64_t (*)(void))type metadata accessor for OAuthServerMetadata);
    goto LABEL_30;
  }
  if (v52)
  {
LABEL_30:
    uint64_t v54 = sub_1000172F8(&qword_10065FC50);
    memcpy(v46, v47, *(void *)(*(void *)(v54 - 8) + 64));
    goto LABEL_31;
  }
  int v53 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
  v53(v46, v47, v11);
  v53(&v46[v48[5]], &v47[v48[5]], v11);
  *(void *)&v46[v48[6]] = *(void *)&v47[v48[6]];
  *(void *)&v46[v48[7]] = *(void *)&v47[v48[7]];
  *(void *)&v46[v48[8]] = *(void *)&v47[v48[8]];
  *(void *)&v46[v48[9]] = *(void *)&v47[v48[9]];
  (*(void (**)(char *, void, uint64_t, int *))(v49 + 56))(v46, 0, 1, v48);
LABEL_31:
  *(void *)(a1 + v59[9]) = *(void *)(v56 + v59[9]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1002D3A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002D3A5C);
}

uint64_t sub_1002D3A5C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ConfigurationBag.UpdatesConfiguration(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_12:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for ConfigurationBag.LicenseConfiguration(0);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_11:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_12;
  }
  uint64_t v14 = sub_1000172F8(&qword_10065C3C0);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_11;
  }
  uint64_t v15 = sub_1000172F8(&qword_10065FC48);
  if (*(_DWORD *)(*(void *)(v15 - 8) + 84) == a2)
  {
    uint64_t v8 = v15;
    uint64_t v12 = *(void *)(v15 - 8);
    uint64_t v13 = a3[7];
    goto LABEL_11;
  }
  uint64_t v16 = sub_1000172F8(&qword_10065FC50);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a2)
  {
    uint64_t v8 = v16;
    uint64_t v12 = *(void *)(v16 - 8);
    uint64_t v13 = a3[8];
    goto LABEL_11;
  }
  unint64_t v18 = *(void *)(a1 + a3[9]);
  if (v18 >= 0xFFFFFFFF) {
    LODWORD(v18) = -1;
  }
  int v19 = v18 - 1;
  if (v19 < 0) {
    int v19 = -1;
  }
  return (v19 + 1);
}

uint64_t sub_1002D3C6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002D3C80);
}

uint64_t sub_1002D3C80(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for ConfigurationBag.UpdatesConfiguration(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = type metadata accessor for ConfigurationBag.LicenseConfiguration(0);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      uint64_t v16 = sub_1000172F8(&qword_10065C3C0);
      if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
      {
        uint64_t v10 = v16;
        uint64_t v14 = *(void *)(v16 - 8);
        uint64_t v15 = a4[6];
      }
      else
      {
        uint64_t v17 = sub_1000172F8(&qword_10065FC48);
        if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a3)
        {
          uint64_t v10 = v17;
          uint64_t v14 = *(void *)(v17 - 8);
          uint64_t v15 = a4[7];
        }
        else
        {
          uint64_t result = sub_1000172F8(&qword_10065FC50);
          if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
          {
            *(void *)(a1 + a4[9]) = a2;
            return result;
          }
          uint64_t v10 = result;
          uint64_t v14 = *(void *)(result - 8);
          uint64_t v15 = a4[8];
        }
      }
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_1002D3E80()
{
  type metadata accessor for ConfigurationBag.UpdatesConfiguration(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for ConfigurationBag.LicenseConfiguration(319);
    if (v1 <= 0x3F)
    {
      sub_1002D4058(319, (unint64_t *)&qword_100661BB0, (void (*)(uint64_t))&type metadata accessor for URL);
      if (v2 <= 0x3F)
      {
        sub_1002D4058(319, &qword_10065FCC0, (void (*)(uint64_t))type metadata accessor for ConfigurationBag.RestoresConfiguration);
        if (v3 <= 0x3F)
        {
          sub_1002D4058(319, (unint64_t *)&unk_10065FCC8, (void (*)(uint64_t))type metadata accessor for OAuthServerMetadata);
          if (v4 <= 0x3F) {
            swift_initStructMetadata();
          }
        }
      }
    }
  }
}

void sub_1002D4058(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_1002D40B0()
{
  unint64_t result = qword_10065FD08;
  if (!qword_10065FD08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FD08);
  }
  return result;
}

uint64_t sub_1002D4104()
{
  return sub_1002CF57C(&qword_10065FD10, (void (*)(uint64_t))type metadata accessor for ConfigurationBag.UpdatesConfiguration);
}

unint64_t sub_1002D414C()
{
  unint64_t result = qword_10065FD20;
  if (!qword_10065FD20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FD20);
  }
  return result;
}

uint64_t sub_1002D41A0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_1002D4208()
{
  unint64_t result = qword_10065FD50;
  if (!qword_10065FD50)
  {
    sub_10017B924(&qword_10065FD48);
    sub_1002CF57C(&qword_10065FA70, (void (*)(uint64_t))type metadata accessor for ConfigurationBag);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FD50);
  }
  return result;
}

unint64_t sub_1002D42B4()
{
  unint64_t result = qword_10065FD60;
  if (!qword_10065FD60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FD60);
  }
  return result;
}

uint64_t sub_1002D4308(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1002D4370()
{
  unint64_t result = qword_10065FD78;
  if (!qword_10065FD78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FD78);
  }
  return result;
}

unint64_t sub_1002D43C4()
{
  unint64_t result = qword_10065FD90;
  if (!qword_10065FD90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FD90);
  }
  return result;
}

unint64_t sub_1002D4418()
{
  unint64_t result = qword_10065FDC8;
  if (!qword_10065FDC8)
  {
    sub_10017B924(&qword_10065FD48);
    sub_1002CF57C(&qword_10065FDD0, (void (*)(uint64_t))type metadata accessor for ConfigurationBag);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FDC8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ConfigurationBag.LicenseConfiguration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002D4590);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfigurationBag.LicenseConfiguration.CodingKeys()
{
  return &type metadata for ConfigurationBag.LicenseConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for ConfigurationBag.UpdatesConfiguration.CodingKeys()
{
  return &type metadata for ConfigurationBag.UpdatesConfiguration.CodingKeys;
}

unsigned char *_s28ManagedAppDistributionDaemon16ConfigurationBagV20UpdatesConfigurationV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002D46A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfigurationBag.RestoresConfiguration.CodingKeys()
{
  return &type metadata for ConfigurationBag.RestoresConfiguration.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ConfigurationBag.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002D47ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfigurationBag.CodingKeys()
{
  return &type metadata for ConfigurationBag.CodingKeys;
}

unint64_t sub_1002D47E8()
{
  unint64_t result = qword_10065FDD8;
  if (!qword_10065FDD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FDD8);
  }
  return result;
}

unint64_t sub_1002D4840()
{
  unint64_t result = qword_10065FDE0;
  if (!qword_10065FDE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FDE0);
  }
  return result;
}

unint64_t sub_1002D4898()
{
  unint64_t result = qword_10065FDE8;
  if (!qword_10065FDE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FDE8);
  }
  return result;
}

unint64_t sub_1002D48F0()
{
  unint64_t result = qword_10065FDF0;
  if (!qword_10065FDF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FDF0);
  }
  return result;
}

unint64_t sub_1002D4948()
{
  unint64_t result = qword_10065FDF8;
  if (!qword_10065FDF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FDF8);
  }
  return result;
}

unint64_t sub_1002D49A0()
{
  unint64_t result = qword_10065FE00;
  if (!qword_10065FE00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FE00);
  }
  return result;
}

unint64_t sub_1002D49F8()
{
  unint64_t result = qword_10065FE08;
  if (!qword_10065FE08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FE08);
  }
  return result;
}

unint64_t sub_1002D4A50()
{
  unint64_t result = qword_10065FE10;
  if (!qword_10065FE10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FE10);
  }
  return result;
}

unint64_t sub_1002D4AA8()
{
  unint64_t result = qword_10065FE18;
  if (!qword_10065FE18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FE18);
  }
  return result;
}

unint64_t sub_1002D4B00()
{
  unint64_t result = qword_10065FE20;
  if (!qword_10065FE20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FE20);
  }
  return result;
}

unint64_t sub_1002D4B58()
{
  unint64_t result = qword_10065FE28;
  if (!qword_10065FE28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FE28);
  }
  return result;
}

unint64_t sub_1002D4BB0()
{
  unint64_t result = qword_10065FE30;
  if (!qword_10065FE30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FE30);
  }
  return result;
}

uint64_t sub_1002D4C04(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7107189 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x49676E696C6C6F70 && a2 == 0xEF6C61767265746ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1002D4D0C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7107189 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7A69536863746162 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1002D4DFC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x80000001005BD890
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001005BD8B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001005BD8D0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001005BD8F0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001005BD910)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_1002D4FEC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x73657461647075 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65736E6563696CLL && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65726F74736572 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7365726F74736572 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x687475616FLL && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001005BD870)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

void *sub_1002D5264@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

void sub_1002D5284(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1002D5290()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1002D52F0()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1002D5340(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000172F8(&qword_10065FE60);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_1002D6380();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + 16);
    char v11 = 2;
    sub_10024A9C8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = *(unsigned char *)(v3 + 32);
    char v11 = 3;
    sub_1002D6428();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1002D5548()
{
  uint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x4449746E65726170;
      break;
    case 2:
      uint64_t result = 1635017060;
      break;
    case 3:
      uint64_t result = 1701869940;
      break;
    case 4:
      uint64_t result = 0x6275507465737361;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1002D55E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002D5E48(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002D560C(uint64_t a1)
{
  unint64_t v2 = sub_1002D6380();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002D5648(uint64_t a1)
{
  unint64_t v2 = sub_1002D6380();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1002D5684@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1002D6054(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_1002D56D4(void *a1)
{
  return sub_1002D5340(a1);
}

void *sub_1002D56EC(int a1, unsigned int a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v46 = a4;
  uint64_t v45 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  char v11 = (char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v12 = 0;
  if (!(a1 | a2)) {
    return v12;
  }
  if (a3)
  {
    uint64_t v13 = sub_1004FD7C0(a3, a2);
    uint64_t v15 = *((void *)v13 + 2);
    if (v15)
    {
      uint64_t v44 = (void (**)(char *, uint64_t))(v9 + 8);
      long long v12 = _swiftEmptyArrayStorage;
      v42[1] = v13;
      uint64_t v16 = (unsigned int *)(v13 + 64);
      *(void *)&long long v14 = 67240192;
      long long v43 = v14;
      while (1)
      {
        int v17 = *(v16 - 8);
        unint64_t v18 = (char *)*((void *)v16 - 1);
        size_t v19 = *v16;
        if (v17 == 2) {
          break;
        }
        if (v17 == 3)
        {
          char v20 = 1;
LABEL_11:
          if (!v18) {
            __break(1u);
          }
          long long v47 = *(_OWORD *)(v16 - 6);
          if (v19)
          {
            sub_1000172F8(&qword_100663C60);
            uint64_t v21 = (char *)swift_allocObject();
            size_t v22 = j__malloc_size(v21);
            *((void *)v21 + 2) = v19;
            *((void *)v21 + 3) = 2 * v22 - 64;
            uint64_t v23 = v21 + 32;
            if (&v21[v19 + 32] > v18 && v23 < &v18[v19]) {
              goto LABEL_39;
            }
            memcpy(v23, v18, v19);
          }
          else
          {
            uint64_t v21 = (char *)_swiftEmptyArrayStorage;
          }
          uint64_t v28 = sub_1000172F8(&qword_10065FE38);
          v50[3] = v28;
          v50[4] = sub_1002D5BD0();
          v50[0] = v21;
          uint64_t v29 = sub_10018AC60(v50, v28);
          uint64_t v30 = *v29;
          size_t v31 = *(void *)(*v29 + 16);
          if (v31)
          {
            if (v31 <= 0xE)
            {
              memset(__dst, 0, sizeof(__dst));
              unsigned __int8 v49 = v31;
              memcpy(__dst, (const void *)(v30 + 32), v31);
              uint64_t v34 = *(void *)__dst;
              unint64_t v35 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v49 << 48);
              swift_bridgeObjectRetain();
              swift_retain();
            }
            else
            {
              type metadata accessor for __DataStorage();
              swift_allocObject();
              swift_bridgeObjectRetain();
              swift_retain();
              uint64_t v32 = __DataStorage.init(bytes:length:)();
              uint64_t v33 = v32;
              if (v31 >= 0x7FFFFFFF)
              {
                type metadata accessor for Data.RangeReference();
                uint64_t v34 = swift_allocObject();
                *(void *)(v34 + 16) = 0;
                *(void *)(v34 + 24) = v31;
                unint64_t v35 = v33 | 0x8000000000000000;
              }
              else
              {
                uint64_t v34 = v31 << 32;
                unint64_t v35 = v32 | 0x4000000000000000;
              }
            }
          }
          else
          {
            swift_bridgeObjectRetain();
            swift_retain();
            uint64_t v34 = 0;
            unint64_t v35 = 0xC000000000000000;
          }
          swift_release();
          sub_100014524((uint64_t)v50);
          sub_100012670(v34, v35);
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            long long v12 = sub_10028EFC8(0, v12[2] + 1, 1, v12);
          }
          unint64_t v37 = v12[2];
          unint64_t v36 = v12[3];
          long long v38 = v47;
          if (v37 >= v36 >> 1)
          {
            uint64_t v40 = sub_10028EFC8((void *)(v36 > 1), v37 + 1, 1, v12);
            long long v38 = v47;
            long long v12 = v40;
          }
          v12[2] = v37 + 1;
          uint64_t v39 = &v12[7 * v37];
          *((_OWORD *)v39 + 2) = v38;
          v39[6] = v34;
          v39[7] = v35;
          *((unsigned char *)v39 + 64) = v20;
          v39[9] = v46;
          v39[10] = a5;
          sub_100013510(v34, v35);
          goto LABEL_6;
        }
        swift_bridgeObjectRetain();
        static Logger.ald.getter();
        uint64_t v25 = Logger.logObject.getter();
        os_log_type_t v26 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v25, v26))
        {
          uint64_t v27 = swift_slowAlloc();
          *(_DWORD *)uint64_t v27 = v43;
          *(_DWORD *)(v27 + 4) = v17;
          _os_log_impl((void *)&_mh_execute_header, v25, v26, "Unhandled license type: %{public}u", (uint8_t *)v27, 8u);
          swift_slowDealloc();
        }

        (*v44)(v11, v45);
LABEL_6:
        v16 += 10;
        swift_bridgeObjectRelease();
        if (!--v15)
        {
          swift_release();
          return v12;
        }
      }
      char v20 = 0;
      goto LABEL_11;
    }
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  __break(1u);
LABEL_39:
  double result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_1002D5BD0()
{
  unint64_t result = qword_10065FE40;
  if (!qword_10065FE40)
  {
    sub_10017B924(&qword_10065FE38);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FE40);
  }
  return result;
}

uint64_t destroy for AppLicenseDeliveryKey(uint64_t a1)
{
  sub_100013510(*(void *)(a1 + 16), *(void *)(a1 + 24));

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AppLicenseDeliveryKey(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 24);
  sub_100012670(v4, v5);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AppLicenseDeliveryKey(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 24);
  sub_100012670(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  sub_100013510(v6, v7);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AppLicenseDeliveryKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(void *)(a1 + 24);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  sub_100013510(v4, v5);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AppLicenseDeliveryKey(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppLicenseDeliveryKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppLicenseDeliveryKey()
{
  return &type metadata for AppLicenseDeliveryKey;
}

uint64_t sub_1002D5E48(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4449746E65726170 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6275507465737361 && a2 == 0xED0000444963696CLL)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_1002D6054@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_1000172F8(&qword_10065FE48);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_1002D6380();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100014524((uint64_t)a1);
  }
  LOBYTE(v24) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v24) = 1;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  char v27 = 2;
  sub_10024A974();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v22 = v10;
  unint64_t v11 = v25;
  char v27 = 3;
  uint64_t v23 = v24;
  sub_100012670(v24, v25);
  sub_1002D63D4();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  unint64_t v21 = v11;
  uint64_t v12 = v23;
  int v26 = v24;
  LOBYTE(v24) = 4;
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v15 = v14;
  uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v20 = v13;
  v16(v8, v5);
  unint64_t v17 = v21;
  sub_100012670(v12, v21);
  swift_bridgeObjectRetain();
  sub_100013510(v12, v17);
  sub_100014524((uint64_t)a1);
  sub_100013510(v12, v17);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v19 = v22;
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v19;
  *(void *)(a2 + 16) = v12;
  *(void *)(a2 + 24) = v17;
  *(unsigned char *)(a2 + 32) = v26;
  *(void *)(a2 + 40) = v20;
  *(void *)(a2 + 48) = v15;
  return result;
}

unint64_t sub_1002D6380()
{
  unint64_t result = qword_10065FE50;
  if (!qword_10065FE50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FE50);
  }
  return result;
}

unint64_t sub_1002D63D4()
{
  unint64_t result = qword_10065FE58;
  if (!qword_10065FE58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FE58);
  }
  return result;
}

unint64_t sub_1002D6428()
{
  unint64_t result = qword_10065FE68;
  if (!qword_10065FE68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FE68);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AppLicenseDeliveryKey.KeyType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002D6548);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppLicenseDeliveryKey.KeyType()
{
  return &type metadata for AppLicenseDeliveryKey.KeyType;
}

unsigned char *storeEnumTagSinglePayload for AppLicenseDeliveryKey.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002D664CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppLicenseDeliveryKey.CodingKeys()
{
  return &type metadata for AppLicenseDeliveryKey.CodingKeys;
}

unint64_t sub_1002D6688()
{
  unint64_t result = qword_10065FE70;
  if (!qword_10065FE70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FE70);
  }
  return result;
}

unint64_t sub_1002D66E0()
{
  unint64_t result = qword_10065FE78;
  if (!qword_10065FE78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FE78);
  }
  return result;
}

unint64_t sub_1002D6738()
{
  unint64_t result = qword_10065FE80;
  if (!qword_10065FE80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FE80);
  }
  return result;
}

unint64_t sub_1002D6790()
{
  unint64_t result = qword_10065FE88;
  if (!qword_10065FE88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FE88);
  }
  return result;
}

unint64_t sub_1002D67E4()
{
  unint64_t result = qword_10065FE90;
  if (!qword_10065FE90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FE90);
  }
  return result;
}

uint64_t sub_1002D6838@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for AppStoreItem(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (uint64_t *)((char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v27 - v15;
  if (a3)
  {
    uint64_t v21 = *(void *)(a4 + 16);
    if (v21)
    {
      uint64_t v22 = a4 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
      uint64_t v23 = *(void *)(v11 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_1002DB744(v22, (uint64_t)v16, type metadata accessor for AppStoreItem);
        uint64_t v24 = &v16[*(int *)(v10 + 24)];
        BOOL v25 = *((void *)v24 + 2) == a1 && *((void *)v24 + 3) == a2;
        if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        sub_1002DB7AC((uint64_t)v16, type metadata accessor for AppStoreItem);
        v22 += v23;
        if (!--v21)
        {
LABEL_16:
          swift_bridgeObjectRelease();
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a5, 1, 1, v10);
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v20 = (uint64_t)v16;
      goto LABEL_19;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a5, 1, 1, v10);
  }
  uint64_t v17 = *(void *)(a4 + 16);
  if (!v17) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a5, 1, 1, v10);
  }
  uint64_t v18 = a4 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  uint64_t v19 = *(void *)(v11 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_1002DB744(v18, (uint64_t)v14, type metadata accessor for AppStoreItem);
    if ((*v14 & 0x8000000000000000) == 0 && *v14 == a1) {
      break;
    }
    sub_1002DB7AC((uint64_t)v14, type metadata accessor for AppStoreItem);
    v18 += v19;
    if (!--v17) {
      goto LABEL_16;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v20 = (uint64_t)v14;
LABEL_19:
  sub_1002DB6DC(v20, a5, type metadata accessor for AppStoreItem);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(a5, 0, 1, v10);
}

uint64_t type metadata accessor for AppStoreItem(uint64_t a1)
{
  return sub_10019B200(a1, qword_100660008);
}

uint64_t sub_1002D6AE4()
{
  uint64_t v6 = *(void *)(v0 + *(int *)(type metadata accessor for AppStoreItem(0) + 24) + 16);
  swift_bridgeObjectRetain();
  v1._uint64_t countAndFlagsBits = 58;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 58;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1002D6BBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_1000172F8(&qword_10065C3C0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v95 - v8;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v105 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (int *)type metadata accessor for AppStorePackage(0);
  uint64_t v14 = *((void *)v13 - 1);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16)
    || (v106 = a2, unint64_t v17 = sub_100016D20(5001813, 0xE300000000000000), a2 = v106, (v18 & 1) == 0)
    || (sub_1000144C8(*(void *)(a1 + 56) + 32 * v17, (uint64_t)&v109), (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v14 + 56))(a2, 1, 1, v13);
  }
  URL.init(string:)();
  swift_bridgeObjectRelease();
  uint64_t v19 = v105;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48))(v9, 1, v10) == 1)
  {
    swift_bridgeObjectRelease();
    sub_10001729C((uint64_t)v9, &qword_10065C3C0);
    a2 = v106;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v14 + 56))(a2, 1, 1, v13);
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v12, v9, v10);
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v12, v10);
  if (!*(void *)(a1 + 16)) {
    goto LABEL_50;
  }
  unint64_t v21 = sub_100016D20(0x6E692D7465737361, 0xEA00000000006F66);
  if ((v22 & 1) == 0) {
    goto LABEL_48;
  }
  sub_1000144C8(*(void *)(a1 + 56) + 32 * v21, (uint64_t)&v109);
  sub_1000172F8(&qword_10065FEA0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_48;
  }
  uint64_t v23 = v121;
  if (*(void *)(v121 + 16) && (unint64_t v24 = sub_100016D20(0x7A69732D656C6966, 0xE900000000000065), (v25 & 1) != 0))
  {
    sub_1000144C8(*(void *)(v23 + 56) + 32 * v24, (uint64_t)&v109);
  }
  else
  {
    long long v109 = 0u;
    long long v110 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v110 + 1))
  {
    swift_bridgeObjectRelease();
    sub_10001729C((uint64_t)&v109, (uint64_t *)&unk_10065C9C0);
    uint64_t v19 = v105;
LABEL_51:
    uint64_t v48 = v19;
LABEL_52:
    unsigned __int8 v49 = *(void (**)(char *, uint64_t))(v48 + 8);
    v49(v12, v10);
LABEL_53:
    v49(v16, v10);
    a2 = v106;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v14 + 56))(a2, 1, 1, v13);
  }
  char v26 = swift_dynamicCast();
  uint64_t v19 = v105;
  if ((v26 & 1) == 0) {
    goto LABEL_50;
  }
  *(void *)&v16[v13[5]] = v121;
  uint64_t v27 = *(void *)(a1 + 16);
  if (v27)
  {
    unint64_t v28 = sub_100016D20(0xD000000000000010, 0x80000001005BD950);
    if (v29)
    {
      sub_1000144C8(*(void *)(a1 + 56) + 32 * v28, (uint64_t)&v109);
      int v30 = swift_dynamicCast();
      uint64_t v27 = v121;
      if (!v30) {
        uint64_t v27 = 0;
      }
      char v31 = v30 ^ 1;
    }
    else
    {
      uint64_t v27 = 0;
      char v31 = 1;
    }
    uint64_t v19 = v105;
  }
  else
  {
    char v31 = 1;
  }
  uint64_t v32 = &v16[v13[6]];
  *(void *)uint64_t v32 = v27;
  v32[8] = v31;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_50;
  }
  unint64_t v33 = sub_100016D20(3499117, 0xE300000000000000);
  if ((v34 & 1) == 0)
  {
LABEL_48:
    swift_bridgeObjectRelease();
    uint64_t v19 = v105;
    goto LABEL_51;
  }
  sub_1000144C8(*(void *)(a1 + 56) + 32 * v33, (uint64_t)&v109);
  char v35 = swift_dynamicCast();
  uint64_t v19 = v105;
  if ((v35 & 1) == 0)
  {
LABEL_50:
    swift_bridgeObjectRelease();
    goto LABEL_51;
  }
  if (!*(void *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_50;
  }
  long long v104 = v121;
  unint64_t v36 = sub_100016D20(0x736B6E756863, 0xE600000000000000);
  if ((v37 & 1) == 0) {
    goto LABEL_47;
  }
  sub_1000144C8(*(void *)(a1 + 56) + 32 * v36, (uint64_t)&v109);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_47;
  }
  uint64_t v38 = v121;
  if (!*(void *)(v121 + 16) || (unint64_t v39 = sub_100016D20(0x7A69536B6E756863, 0xE900000000000065), (v40 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
  uint64_t v101 = v38;
  sub_1000144C8(*(void *)(v38 + 56) + 32 * v39, (uint64_t)&v109);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_47:
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
  if (!*(void *)(a1 + 16)
    || (v98 = v121, unint64_t v41 = sub_100016D20(0x73666E6973, 0xE500000000000000), (v42 & 1) == 0)
    || (sub_1000144C8(*(void *)(a1 + 56) + 32 * v41, (uint64_t)&v109),
        sub_1000172F8(&qword_10065FE98),
        (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v48 = v105;
    goto LABEL_52;
  }
  uint64_t v102 = v121;
  uint64_t v100 = *(void *)(v121 + 16);
  if (!v100)
  {
LABEL_60:
    unsigned __int8 v49 = *(void (**)(char *, uint64_t))(v105 + 8);
    v49(v12, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_53;
  }
  swift_bridgeObjectRetain();
  unint64_t v103 = 0;
  long long v99 = xmmword_1005A5CE0;
  unint64_t v97 = (unint64_t)&type metadata for Any + 8;
  while (1)
  {
    uint64_t v43 = *(void *)(v102 + 8 * v103 + 32);
    uint64_t v44 = *(void *)(v43 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v44
      || (unint64_t v45 = sub_100016D20(1718511987, 0xE400000000000000), (v46 & 1) == 0)
      || (sub_1000144C8(*(void *)(v43 + 56) + 32 * v45, (uint64_t)&v109), (swift_dynamicCast() & 1) == 0))
    {
      long long v121 = v99;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v47 = *((void *)&v121 + 1);
    uint64_t result = sub_10018AE44(v121, *((unint64_t *)&v121 + 1));
    if (v47 >> 60 != 15) {
      break;
    }
    if (v100 == ++v103) {
      goto LABEL_59;
    }
  }
  if (v100 == v103)
  {
LABEL_59:
    swift_bridgeObjectRelease();
    goto LABEL_60;
  }
  if (v103 >= *(void *)(v102 + 16))
  {
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
    goto LABEL_140;
  }
  uint64_t v50 = *(void *)(v102 + 8 * v103 + 32);
  if (!*(void *)(v50 + 16)) {
    goto LABEL_139;
  }
  uint64_t result = sub_100016D20(1718511987, 0xE400000000000000);
  if ((v51 & 1) == 0) {
    goto LABEL_139;
  }
  sub_1000144C8(*(void *)(v50 + 56) + 32 * result, (uint64_t)&v109);
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0) {
    goto LABEL_139;
  }
  uint64_t v52 = *((void *)&v121 + 1);
  if (*((void *)&v121 + 1) >> 60 == 15) {
    goto LABEL_139;
  }
  uint64_t v53 = v121;
  swift_bridgeObjectRelease();
  unint64_t v103 = 0;
  uint64_t v54 = &v16[v13[8]];
  *(void *)uint64_t v54 = v53;
  *((void *)v54 + 1) = v52;
  unint64_t v97 = (unint64_t)&type metadata for Any + 8;
  while (1)
  {
    uint64_t v55 = *(void *)(v102 + 8 * v103 + 32);
    uint64_t v56 = *(void *)(v55 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v56
      || (unint64_t v57 = sub_100016D20(0x6F666E497064, 0xE600000000000000), (v58 & 1) == 0)
      || (sub_1000144C8(*(void *)(v55 + 56) + 32 * v57, (uint64_t)&v109), (swift_dynamicCast() & 1) == 0))
    {
      long long v121 = v99;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v59 = *((void *)&v121 + 1);
    uint64_t result = sub_10018AE44(v121, *((unint64_t *)&v121 + 1));
    if (v59 >> 60 != 15)
    {
      if (v100 == v103)
      {
LABEL_76:
        swift_bridgeObjectRelease();
        if (*(void *)(v101 + 16) && (unint64_t v61 = sub_100016D20(0x736568736168, 0xE600000000000000), (v62 & 1) != 0))
        {
          sub_1000144C8(*(void *)(v101 + 56) + 32 * v61, (uint64_t)&v109);
        }
        else
        {
          long long v109 = 0u;
          long long v110 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v110 + 1))
        {
          sub_1000172F8((uint64_t *)&unk_10065C5D0);
          if (swift_dynamicCast())
          {
            sub_10027151C(0, v104, *((uint64_t *)&v104 + 1), v98, v121, (uint64_t *)&v115);
            sub_10001733C((uint64_t)&v115, (uint64_t)&v118, &qword_10065D400);
            if ((void)v119 != 1)
            {
              long long v121 = v118;
              long long v122 = v119;
              long long v123 = v120;
              sub_10001733C((uint64_t)&v121 + 8, (uint64_t)v114, &qword_10065C4D0);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              sub_10018AFE0((uint64_t)v114);
              sub_10001733C((uint64_t)&v123 + 8, (uint64_t)v113, &qword_10065DEB8);
              sub_10017B89C((uint64_t)v113);
              id v70 = &v16[v13[7]];
              *(_OWORD *)id v70 = 0u;
              *((_OWORD *)v70 + 1) = 0u;
              *((void *)v70 + 4) = 1;
              *((void *)v70 + 5) = 0;
              *((void *)v70 + 6) = 0;
              *((void *)v70 + 7) = 0;
              sub_10001733C((uint64_t)&v115, (uint64_t)&v16[v13[9]], &qword_10065D400);
              uint64_t v71 = &v16[v13[10]];
              *(void *)uint64_t v71 = 0;
              *((void *)v71 + 1) = 0;
              *((void *)v71 + 2) = 1;
              *((void *)v71 + 3) = 0;
              *((void *)v71 + 4) = 0;
              *((void *)v71 + 5) = 0;
              goto LABEL_104;
            }
          }
          else
          {
LABEL_134:
            swift_bridgeObjectRelease();
          }
          goto LABEL_100;
        }
        swift_bridgeObjectRelease();
        goto LABEL_85;
      }
      if ((v103 & 0x8000000000000000) != 0) {
        goto LABEL_137;
      }
      if (v103 < *(void *)(v102 + 16))
      {
        uint64_t v63 = *(void *)(v102 + 8 * v103 + 32);
        if (*(void *)(v63 + 16))
        {
          uint64_t result = sub_100016D20(0x6F666E497064, 0xE600000000000000);
          if (v64)
          {
            sub_1000144C8(*(void *)(v63 + 56) + 32 * result, (uint64_t)&v109);
            uint64_t result = swift_dynamicCast();
            if (result)
            {
              unint64_t v103 = *((void *)&v121 + 1);
              if (*((void *)&v121 + 1) >> 60 != 15)
              {
                uint64_t v100 = v121;
                swift_bridgeObjectRelease();
                if (!*(void *)(v101 + 16)
                  || (unint64_t v65 = sub_100016D20(0x736568736168, 0xE600000000000000), (v66 & 1) == 0)
                  || (sub_1000144C8(*(void *)(v101 + 56) + 32 * v65, (uint64_t)&v109),
                      sub_1000172F8((uint64_t *)&unk_10065C5D0),
                      (swift_dynamicCast() & 1) == 0))
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  sub_10018AE44(v100, v103);
LABEL_100:
                  swift_bridgeObjectRelease();
                  goto LABEL_101;
                }
                uint64_t v102 = v121;
                if (*(void *)(v101 + 16)
                  && (unint64_t v67 = sub_100016D20(0x7361487261656C63, 0xEB00000000736568), (v68 & 1) != 0))
                {
                  sub_1000144C8(*(void *)(v101 + 56) + 32 * v67, (uint64_t)&v109);
                }
                else
                {
                  long long v109 = 0u;
                  long long v110 = 0u;
                }
                swift_bridgeObjectRelease();
                if (*((void *)&v110 + 1))
                {
                  if ((swift_dynamicCast() & 1) == 0) {
                    goto LABEL_133;
                  }
                  uint64_t v56 = v121;
                  uint64_t v86 = *((void *)&v104 + 1);
                  swift_bridgeObjectRetain();
                  sub_10027151C(0, v104, v86, v98, v102, v113);
                  sub_10001733C((uint64_t)v113, (uint64_t)&v121, &qword_10065D400);
                  unint64_t v59 = v122;
                  if ((void)v122 != 1) {
                    goto LABEL_132;
                  }
                  uint64_t v69 = *(void (**)(char *, uint64_t))(v105 + 8);
                  v69(v12, v10);
                  sub_10018AE44(v100, v103);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
LABEL_102:
                  v69(v16, v10);
                  sub_10018AE44(*(void *)&v16[v13[8]], *(void *)&v16[v13[8] + 8]);
                  a2 = v106;
                  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v14 + 56))(a2, 1, 1, v13);
                }
                swift_bridgeObjectRelease();
                sub_10018AE44(v100, v103);
                swift_bridgeObjectRelease();
LABEL_85:
                swift_bridgeObjectRelease();
                sub_10001729C((uint64_t)&v109, (uint64_t *)&unk_10065C9C0);
LABEL_101:
                uint64_t v69 = *(void (**)(char *, uint64_t))(v105 + 8);
                v69(v12, v10);
                goto LABEL_102;
              }
            }
          }
        }
LABEL_140:
        __break(1u);
        return result;
      }
      goto LABEL_138;
    }
    uint64_t v60 = v103 + 1;
    if (__OFADD__(v103, 1)) {
      break;
    }
    ++v103;
    if (v60 == v100) {
      goto LABEL_76;
    }
  }
  __break(1u);
LABEL_132:
  unint64_t v97 = v121;
  uint64_t v96 = *((void *)&v121 + 1);
  *(void *)&long long v99 = *((void *)&v122 + 1);
  uint64_t v101 = v123;
  uint64_t v102 = *((void *)&v123 + 1);
  sub_10027151C(0, v104, *((uint64_t *)&v104 + 1), v98, v56, v114);
  *((void *)&v104 + 1) = v114[2];
  sub_10001733C((uint64_t)v114, (uint64_t)&v115, &qword_10065D400);
  if ((void)v116 == 1)
  {
LABEL_133:
    swift_bridgeObjectRelease();
    sub_10018AE44(v100, v103);
    goto LABEL_134;
  }
  long long v118 = v115;
  long long v119 = v116;
  long long v120 = v117;
  sub_10001733C((uint64_t)&v118 + 8, (uint64_t)v124, &qword_10065C4D0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10018AFE0((uint64_t)v124);
  sub_10001733C((uint64_t)&v120 + 8, (uint64_t)v125, &qword_10065DEB8);
  sub_10017B89C((uint64_t)v125);
  uint64_t v87 = &v16[v13[7]];
  uint64_t v89 = v102;
  unint64_t v88 = v103;
  *(void *)uint64_t v87 = v100;
  *((void *)v87 + 1) = v88;
  uint64_t v90 = v96;
  *((void *)v87 + 2) = v97;
  *((void *)v87 + 3) = v90;
  uint64_t v91 = v99;
  *((void *)v87 + 4) = v59;
  *((void *)v87 + 5) = v91;
  *((void *)v87 + 6) = v101;
  *((void *)v87 + 7) = v89;
  sub_10001733C((uint64_t)v114, (uint64_t)&v16[v13[9]], &qword_10065D400);
  id v92 = &v16[v13[10]];
  uint64_t v93 = v96;
  *(void *)id v92 = v97;
  *((void *)v92 + 1) = v93;
  uint64_t v94 = v99;
  *((void *)v92 + 2) = v59;
  *((void *)v92 + 3) = v94;
  *((void *)v92 + 4) = v101;
  *((void *)v92 + 5) = v89;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_104:
  if (*(void *)(a1 + 16)
    && (unint64_t v72 = sub_100016D20(0xD000000000000013, 0x80000001005BD970), (v73 & 1) != 0)
    && (sub_1000144C8(*(void *)(a1 + 56) + 32 * v72, (uint64_t)&v109), (swift_dynamicCast() & 1) != 0))
  {
    URL.init(string:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v105 + 56))(v7, 1, 1, v10);
  }
  sub_10001733C((uint64_t)v7, (uint64_t)&v16[v13[11]], &qword_10065C3C0);
  if (*(void *)(a1 + 16)
    && (unint64_t v74 = sub_100016D20(0x49746E6169726176, 0xE900000000000064), (v75 & 1) != 0)
    && (sub_1000144C8(*(void *)(a1 + 56) + 32 * v74, (uint64_t)&v109), (swift_dynamicCast() & 1) != 0))
  {
    sub_10026EC78(v107, v108, (uint64_t)&v109);
    long long v76 = v109;
    long long v77 = v110;
    long long v78 = v111;
    uint64_t v79 = v112;
  }
  else
  {
    uint64_t v79 = 0;
    long long v76 = 0uLL;
    long long v109 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    uint64_t v112 = 0;
    long long v77 = 0uLL;
    long long v78 = 0uLL;
  }
  uint64_t v80 = &v16[v13[12]];
  *(_OWORD *)uint64_t v80 = v76;
  *((_OWORD *)v80 + 1) = v77;
  *((_OWORD *)v80 + 2) = v78;
  *((void *)v80 + 6) = v79;
  if (*(void *)(a1 + 16) && (unint64_t v81 = sub_100016D20(0xD000000000000011, 0x80000001005BD990), (v82 & 1) != 0))
  {
    sub_1000144C8(*(void *)(a1 + 56) + 32 * v81, (uint64_t)&v109);
  }
  else
  {
    long long v109 = 0u;
    long long v110 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((void *)&v110 + 1))
  {
    sub_1000172F8(&qword_10065DFD0);
    if (swift_dynamicCast())
    {
      uint64_t v83 = *(void *)(v107 + 16);
      swift_bridgeObjectRelease();
      BOOL v84 = v83 == 0;
      goto LABEL_123;
    }
  }
  else
  {
    sub_10001729C((uint64_t)&v109, (uint64_t *)&unk_10065C9C0);
  }
  BOOL v84 = 0;
LABEL_123:
  (*(void (**)(char *, uint64_t))(v105 + 8))(v12, v10);
  v16[v13[13]] = v84;
  uint64_t v85 = v106;
  sub_1002DB744((uint64_t)v16, v106, type metadata accessor for AppStorePackage);
  (*(void (**)(uint64_t, void, uint64_t, int *))(v14 + 56))(v85, 0, 1, v13);
  return sub_1002DB7AC((uint64_t)v16, type metadata accessor for AppStorePackage);
}

uint64_t sub_1002D7E20()
{
  if (*v0) {
    return 0x6C6562616CLL;
  }
  else {
    return 1802396018;
  }
}

uint64_t sub_1002D7E50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002DF344(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002D7E78(uint64_t a1)
{
  unint64_t v2 = sub_1002DF808();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002D7EB4(uint64_t a1)
{
  unint64_t v2 = sub_1002DF808();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002D7EF0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1002DF420(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1002D7F20(char *a1, char *a2)
{
  return sub_10051C7BC(*a1, *a2);
}

Swift::Int sub_1002D7F2C()
{
  return Hasher._finalize()();
}

uint64_t sub_1002D7FA4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1002D8008()
{
  return Hasher._finalize()();
}

uint64_t sub_1002D807C@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_100638AA8;
  return sub_1002D86FC(v2, a1, a2);
}

void sub_1002D8088(uint64_t *a1@<X8>)
{
  uint64_t v2 = 7565161;
  if (*v1) {
    uint64_t v2 = 0x736F63616DLL;
  }
  unint64_t v3 = 0xE300000000000000;
  if (*v1) {
    unint64_t v3 = 0xE500000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1002D80BC()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1002D811C()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t sub_1002D816C(char a1)
{
  unint64_t result = 0x614E747369747261;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000017;
      break;
    case 2:
    case 19:
    case 30:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0xD000000000000018;
      break;
    case 4:
      unint64_t result = 0x6556656C646E7562;
      break;
    case 5:
      unint64_t result = 0x6867697279706F63;
      break;
    case 6:
      unint64_t result = 0xD000000000000021;
      break;
    case 7:
      unint64_t result = 0xD000000000000015;
      break;
    case 8:
      unint64_t result = 0x65726E6567;
      break;
    case 9:
      unint64_t result = 0x644965726E6567;
      break;
    case 10:
      unint64_t result = 0xD000000000000014;
      break;
    case 11:
      unint64_t result = 0xD000000000000012;
      break;
    case 12:
      unint64_t result = 0x727474612D646169;
      break;
    case 13:
      unint64_t result = 0xD000000000000013;
      break;
    case 14:
      unint64_t result = 0xD000000000000013;
      break;
    case 15:
      unint64_t result = 0x4F6C616974696E69;
      break;
    case 16:
      unint64_t result = 0xD000000000000010;
      break;
    case 17:
      unint64_t result = 0x4F74694232337369;
      break;
    case 18:
      unint64_t result = 0x7375434232427369;
      break;
    case 20:
      unint64_t result = 0xD000000000000010;
      break;
    case 21:
      unint64_t result = 0xD000000000000017;
      break;
    case 22:
      unint64_t result = 0x64496D657469;
      break;
    case 23:
      unint64_t result = 0x656D614E6D657469;
      break;
    case 24:
      unint64_t result = 1684957547;
      break;
    case 25:
      unint64_t result = 0xD000000000000012;
      break;
    case 26:
      unint64_t result = 0x6573616863727570;
      break;
    case 27:
      unint64_t result = 0x676E69746172;
      break;
    case 28:
      unint64_t result = 0x44657361656C6572;
      break;
    case 29:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 31:
      unint64_t result = 0x686F4365726F7473;
      break;
    case 32:
      unint64_t result = 115;
      break;
    case 33:
      unint64_t result = 0x65726E6567627573;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1002D857C(char *a1, char *a2)
{
  return sub_10051E84C(*a1, *a2);
}

Swift::Int sub_1002D8588()
{
  return Hasher._finalize()();
}

uint64_t sub_1002D8608()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1002D8674()
{
  return Hasher._finalize()();
}

uint64_t sub_1002D86F0@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_100638AF8;
  return sub_1002D86FC(v2, a1, a2);
}

uint64_t sub_1002D86FC@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, char *a3@<X8>)
{
  Swift::Int v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  uint64_t result = swift_bridgeObjectRelease();
  if (v4 == 1) {
    char v6 = 1;
  }
  else {
    char v6 = 2;
  }
  if (!v4) {
    char v6 = 0;
  }
  *a3 = v6;
  return result;
}

void sub_1002D8758(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x65726E6567;
  if (*v1) {
    uint64_t v2 = 0x644965726E6567;
  }
  unint64_t v3 = 0xE500000000000000;
  if (*v1) {
    unint64_t v3 = 0xE700000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1002D8794()
{
  if (*v0) {
    return 0x644965726E6567;
  }
  else {
    return 0x65726E6567;
  }
}

uint64_t sub_1002D87CC@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100638AF8, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_1002D8830(uint64_t a1)
{
  unint64_t v2 = sub_1002DF8B0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002D886C(uint64_t a1)
{
  unint64_t v2 = sub_1002DF8B0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002D88A8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1002DF5C8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1002D88D8(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_1002D816C(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_1002D816C(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_1002D8964()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1002D816C(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1002D89C8()
{
  sub_1002D816C(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1002D8A1C()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1002D816C(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1002D8A7C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1002DF7B4();
  *a1 = result;
  return result;
}

unint64_t sub_1002D8AAC@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1002D816C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1002D8AD8()
{
  return sub_1002D816C(*v0);
}

uint64_t sub_1002D8AE0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1002DF7B4();
  *a1 = result;
  return result;
}

void sub_1002D8B08(unsigned char *a1@<X8>)
{
  *a1 = 34;
}

uint64_t sub_1002D8B14(uint64_t a1)
{
  unint64_t v2 = sub_1002DB80C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002D8B50(uint64_t a1)
{
  unint64_t v2 = sub_1002DB80C();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1002D8B8C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1002D9980(a1, __src);
  if (!v2) {
    return memcpy(a2, __src, 0x168uLL);
  }
  return result;
}

uint64_t sub_1002D8BE0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v75 = a2;
  uint64_t v83 = a3;
  uint64_t v4 = sub_1000172F8(&qword_10065BE08);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v76 = (uint64_t)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  char v8 = (char *)&v65 - v7;
  uint64_t v9 = type metadata accessor for AppStorePackage(0);
  uint64_t v77 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v74 = (uint64_t)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v73 = (uint64_t)&v65 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v65 - v15;
  __chkstk_darwin(v14);
  char v18 = (char *)&v65 - v17;
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v78 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v20 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v20 - 8);
  char v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for URL();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v81 = v23;
  uint64_t v82 = v24;
  __chkstk_darwin(v23);
  uint64_t v80 = (char *)&v65 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for AppStoreItem(0);
  uint64_t v26 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v79 = (char *)&v65 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16)
    || (unint64_t v28 = sub_100016D20(0x6449676E6F73, 0xE600000000000000), (v29 & 1) == 0)
    || (sub_1000144C8(*(void *)(a1 + 56) + 32 * v28, (uint64_t)v87), (swift_dynamicCast() & 1) == 0)
    || !*(void *)(a1 + 16)
    || (v72 = v86[0], unint64_t v30 = sub_100016D20(0x556B726F77747261, 0xEA00000000004C52), (v31 & 1) == 0)
    || (sub_1000144C8(*(void *)(a1 + 56) + 32 * v30, (uint64_t)v87), (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  uint64_t v71 = v86[1];
  URL.init(string:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v22, 1, v81) == 1)
  {
    swift_bridgeObjectRelease();
    sub_10001729C((uint64_t)v22, &qword_10065C3C0);
LABEL_10:
    uint64_t v32 = v83;
    uint64_t v33 = v84;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v32, 1, 1, v33);
  }
  char v35 = v22;
  uint64_t v36 = v81;
  id v70 = *(void (**)(char *, char *, uint64_t))(v82 + 32);
  uint64_t v71 = v82 + 32;
  v70(v80, v35, v81);
  if (!*(void *)(a1 + 16)
    || (unint64_t v37 = sub_100016D20(0x617461646174656DLL, 0xE800000000000000), (v38 & 1) == 0)
    || (sub_1000144C8(*(void *)(a1 + 56) + 32 * v37, (uint64_t)v87),
        uint64_t v69 = sub_1000172F8(&qword_10065FEA0),
        (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v82 + 8))(v80, v36);
    goto LABEL_10;
  }
  uint64_t v68 = v86[0];
  *((void *)&v87[1] + 1) = v69;
  *(void *)&v87[0] = v86[0];
  uint64_t v66 = type metadata accessor for AppStoreResponseDecoderImpl();
  uint64_t v67 = swift_allocObject();
  *(void *)(v67 + 16) = _swiftEmptyArrayStorage;
  sub_1000172F8(&qword_10065E578);
  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_1005A3EC0;
  sub_1001C5DD4(v87, (_OWORD *)(v39 + 32));
  *(void *)(v67 + 24) = v39;
  v86[3] = v66;
  v86[4] = sub_1002DB548();
  v86[0] = v67;
  swift_bridgeObjectRetain();
  sub_1002D9980(v86, v87);
  swift_bridgeObjectRelease();
  uint64_t v33 = v84;
  char v40 = &v79[*(int *)(v84 + 24)];
  memcpy(v40, v87, 0x168uLL);
  uint64_t v41 = v82;
  if (*(void *)(a1 + 16)
    && (unint64_t v42 = sub_100016D20(0x656365722D707061, 0xEB00000000747069), (v43 & 1) != 0)
    && (sub_1000144C8(*(void *)(a1 + 56) + 32 * v42, (uint64_t)v86), (swift_dynamicCast() & 1) != 0))
  {
    long long v44 = v85;
  }
  else
  {
    long long v44 = xmmword_1005A5CE0;
  }
  *(_OWORD *)&v79[*(int *)(v33 + 32)] = v44;
  if (!*(void *)(a1 + 16)
    || (unint64_t v45 = sub_100016D20(0xD000000000000011, 0x80000001005BD930), (v46 & 1) == 0)
    || (sub_1000144C8(*(void *)(a1 + 56) + 32 * v45, (uint64_t)v86), (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v80, v81);
    int v52 = 0;
    uint64_t v32 = v83;
    goto LABEL_31;
  }
  unint64_t v47 = v40;
  uint64_t v48 = *((void *)&v85 + 1);
  unsigned __int8 v49 = &v79[*(int *)(v33 + 36)];
  *(void *)unsigned __int8 v49 = v85;
  *((void *)v49 + 1) = v48;
  if (*(void *)(a1 + 16)
    && (unint64_t v50 = sub_100016D20(0x2D64656E6E696874, 0xEB00000000707061), (v51 & 1) != 0)
    && (sub_1000144C8(*(void *)(a1 + 56) + 32 * v50, (uint64_t)v86), (swift_dynamicCast() & 1) != 0))
  {
    sub_1002D6BBC(v85, (uint64_t)v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v8, 1, v9) == 1)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v82 + 8))(v80, v81);
      sub_10001729C((uint64_t)v8, &qword_10065BE08);
LABEL_49:
      int v52 = 1;
      char v40 = v47;
      uint64_t v32 = v83;
      uint64_t v33 = v84;
LABEL_31:
      uint64_t v53 = v79;
      memcpy(v86, v40, 0x168uLL);
      sub_1002DB5A0((uint64_t)v86);
      sub_10018AE44(*(void *)&v53[*(int *)(v33 + 32)], *(void *)&v53[*(int *)(v33 + 32) + 8]);
      if (v52) {
        swift_bridgeObjectRelease();
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v32, 1, 1, v33);
    }
    sub_1002DB6DC((uint64_t)v8, (uint64_t)v18, type metadata accessor for AppStorePackage);
    sub_1002DB744((uint64_t)v18, (uint64_t)v16, type metadata accessor for AppStorePackage);
    uint64_t v54 = (void *)sub_100290534(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    unint64_t v56 = v54[2];
    unint64_t v55 = v54[3];
    if (v56 >= v55 >> 1) {
      uint64_t v54 = (void *)sub_100290534(v55 > 1, v56 + 1, 1, (unint64_t)v54);
    }
    v54[2] = v56 + 1;
    sub_1002DB6DC((uint64_t)v16, (uint64_t)v54+ ((*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80))+ *(void *)(v77 + 72) * v56, type metadata accessor for AppStorePackage);
    sub_1002DB7AC((uint64_t)v18, type metadata accessor for AppStorePackage);
    if (!v54[2]) {
      goto LABEL_39;
    }
  }
  else
  {
    uint64_t v54 = _swiftEmptyArrayStorage;
    if (!_swiftEmptyArrayStorage[2]) {
      goto LABEL_39;
    }
  }
  if ((v75 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_46;
  }
LABEL_39:
  uint64_t v57 = v76;
  sub_1002D6BBC(a1, v76);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48))(v57, 1, v9) == 1)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v82 + 8))(v80, v81);
    sub_10001729C(v76, &qword_10065BE08);
    goto LABEL_49;
  }
  uint64_t v58 = v73;
  sub_1002DB6DC(v76, v73, type metadata accessor for AppStorePackage);
  sub_1002DB744(v58, v74, type metadata accessor for AppStorePackage);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v54 = (void *)sub_100290534(0, v54[2] + 1, 1, (unint64_t)v54);
  }
  unint64_t v60 = v54[2];
  unint64_t v59 = v54[3];
  if (v60 >= v59 >> 1) {
    uint64_t v54 = (void *)sub_100290534(v59 > 1, v60 + 1, 1, (unint64_t)v54);
  }
  v54[2] = v60 + 1;
  sub_1002DB6DC(v74, (uint64_t)v54+ ((*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80))+ *(void *)(v77 + 72) * v60, type metadata accessor for AppStorePackage);
  sub_1002DB7AC(v73, type metadata accessor for AppStorePackage);
LABEL_46:
  if (!v54[2])
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v82 + 8))(v80, v81);
    goto LABEL_49;
  }
  uint64_t v61 = v84;
  uint64_t v63 = v79;
  char v62 = v80;
  *(void *)&v79[*(int *)(v84 + 28)] = v54;
  *(void *)uint64_t v63 = v72;
  v70(&v63[*(int *)(v61 + 20)], v62, v81);
  uint64_t v64 = v83;
  sub_1002DB744((uint64_t)v63, v83, type metadata accessor for AppStoreItem);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v64, 0, 1, v61);
  return sub_1002DB7AC((uint64_t)v63, type metadata accessor for AppStoreItem);
}

void *sub_1002D9980@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_1000172F8(&qword_10065FEB0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  uint64_t v163 = a1;
  sub_10018AC60(a1, v9);
  sub_1002DB80C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return (void *)sub_100014524((uint64_t)v163);
  }
  uint64_t v86 = a2;
  LOBYTE(v100) = 0;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v100) = 1;
  uint64_t v12 = v11;
  swift_bridgeObjectRetain();
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v98 = v12;
  uint64_t v14 = v13;
  LOBYTE(v100) = 2;
  uint64_t v16 = v15;
  swift_bridgeObjectRetain();
  uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v97 = v16;
  uint64_t v85 = v17;
  LOBYTE(v100) = 3;
  uint64_t v19 = v18;
  swift_bridgeObjectRetain();
  uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v96 = v19;
  uint64_t v84 = v20;
  LOBYTE(v100) = 4;
  uint64_t v22 = v21;
  swift_bridgeObjectRetain();
  uint64_t v23 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v95 = v22;
  uint64_t v83 = v23;
  LOBYTE(v100) = 5;
  uint64_t v25 = v24;
  swift_bridgeObjectRetain();
  uint64_t v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v94 = v25;
  uint64_t v82 = v26;
  LOBYTE(v100) = 6;
  uint64_t v28 = v27;
  swift_bridgeObjectRetain();
  uint64_t v29 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v93 = v28;
  uint64_t v81 = v29;
  LOBYTE(v100) = 7;
  LODWORD(v28) = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v100) = 8;
  uint64_t v30 = KeyedDecodingContainer.decode(_:forKey:)();
  int v78 = v28;
  uint64_t v80 = v30;
  LOBYTE(v100) = 9;
  uint64_t v92 = v31;
  swift_bridgeObjectRetain();
  uint64_t v79 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v100) = 10;
  int v77 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v100) = 11;
  int v76 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v100) = 12;
  uint64_t v74 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v75 = v32;
  LOBYTE(v100) = 13;
  swift_bridgeObjectRetain();
  uint64_t v72 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v73 = v33;
  LOBYTE(v100) = 14;
  swift_bridgeObjectRetain();
  uint64_t v70 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v71 = v34;
  LOBYTE(v100) = 15;
  swift_bridgeObjectRetain();
  uint64_t v68 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LODWORD(v69) = v35;
  char v159 = v35 & 1;
  LOBYTE(v100) = 16;
  int v67 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v100) = 17;
  int v66 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v100) = 18;
  int v65 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v100) = 19;
  int v64 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v100) = 20;
  int v63 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v100) = 21;
  int v62 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v100) = 22;
  uint64_t v61 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v100) = 23;
  uint64_t v60 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v91 = v36;
  LOBYTE(v100) = 24;
  swift_bridgeObjectRetain();
  uint64_t v59 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v90 = v37;
  sub_1000172F8(&qword_10065E738);
  LOBYTE(v99[0]) = 25;
  sub_1002DB860();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v38 = v100;
  LOBYTE(v100) = 26;
  uint64_t v89 = v38;
  swift_bridgeObjectRetain();
  uint64_t v58 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v88 = v39;
  LOBYTE(v99[0]) = 27;
  sub_1002DB8DC();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v56 = v101;
  uint64_t v57 = v100;
  LOBYTE(v100) = 28;
  uint64_t v87 = v102;
  swift_bridgeObjectRetain();
  uint64_t v55 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v41 = v40;
  sub_1000172F8(&qword_10065FED0);
  LOBYTE(v99[0]) = 29;
  sub_1002DB930();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v42 = v100;
  LOBYTE(v99[0]) = 30;
  sub_1002DB9A4();
  uint64_t v54 = v42;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v52 = v100;
  LOBYTE(v100) = 31;
  uint64_t v51 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v53 = v43;
  LOBYTE(v100) = 32;
  swift_bridgeObjectRetain();
  uint64_t v50 = KeyedDecodingContainer.decode(_:forKey:)();
  sub_1000172F8(&qword_10065FEE8);
  char v156 = 33;
  sub_1002DB9F8();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v78 &= 1u;
  v64 &= 1u;
  LOBYTE(v42) = v64;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  LOBYTE(v99[25]) = v69 & 1;
  uint64_t v69 = v157;
  v99[0] = v10;
  v99[1] = v98;
  v99[2] = v14;
  v99[3] = v97;
  v99[4] = v85;
  v99[5] = v96;
  v99[6] = v84;
  v99[7] = v95;
  v99[8] = v83;
  v99[9] = v94;
  v99[10] = v82;
  v99[11] = v93;
  v99[12] = v81;
  LOBYTE(v99[13]) = v78;
  v99[14] = v80;
  v99[15] = v92;
  v99[16] = v79;
  LOBYTE(v99[17]) = v77;
  BYTE1(v99[17]) = v76;
  v99[18] = v74;
  v99[19] = v75;
  v99[20] = v72;
  v99[21] = v73;
  v99[22] = v70;
  v99[23] = v71;
  v99[24] = v68;
  BYTE1(v99[25]) = v66;
  BYTE2(v99[25]) = v67;
  BYTE3(v99[25]) = v65;
  BYTE4(v99[25]) = v42;
  BYTE5(v99[25]) = v63;
  BYTE6(v99[25]) = v62;
  v99[26] = v61;
  v99[27] = v60;
  v99[28] = v91;
  v99[29] = v59;
  v99[30] = v90;
  v99[31] = v89;
  v99[32] = v58;
  v99[33] = v88;
  v99[34] = v57;
  v99[35] = v56;
  v99[36] = v87;
  v99[37] = v55;
  v99[38] = v41;
  v99[39] = v54;
  LOBYTE(v99[40]) = v52;
  v99[41] = v51;
  v99[42] = v53;
  v99[43] = v50;
  v99[44] = v157;
  sub_1001C65EC((uint64_t)v99);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v44 = v95;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v45 = v93;
  swift_bridgeObjectRelease();
  uint64_t v46 = v92;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v47 = v73;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100014524((uint64_t)v163);
  uint64_t v100 = v10;
  uint64_t v101 = v98;
  uint64_t v102 = v14;
  uint64_t v103 = v97;
  uint64_t v104 = v85;
  uint64_t v105 = v96;
  uint64_t v106 = v84;
  uint64_t v107 = v44;
  uint64_t v108 = v83;
  uint64_t v109 = v94;
  uint64_t v110 = v82;
  uint64_t v111 = v45;
  uint64_t v112 = v81;
  char v113 = v78;
  uint64_t v115 = v80;
  uint64_t v116 = v46;
  uint64_t v117 = v79;
  char v118 = v77;
  char v119 = v76;
  uint64_t v122 = v74;
  uint64_t v123 = v75;
  uint64_t v124 = v72;
  uint64_t v125 = v47;
  *(_DWORD *)uint64_t v114 = v162[0];
  *(_DWORD *)&v114[3] = *(_DWORD *)((char *)v162 + 3);
  int v120 = v160;
  __int16 v121 = v161;
  uint64_t v126 = v70;
  uint64_t v127 = v71;
  uint64_t v128 = v68;
  char v129 = v159;
  char v130 = v66;
  char v131 = v67;
  char v132 = v65;
  char v133 = v64;
  char v134 = v63;
  char v135 = v62;
  uint64_t v136 = v61;
  uint64_t v137 = v60;
  uint64_t v138 = v91;
  uint64_t v139 = v59;
  uint64_t v140 = v90;
  uint64_t v141 = v89;
  uint64_t v142 = v58;
  uint64_t v143 = v88;
  uint64_t v144 = v57;
  uint64_t v145 = v56;
  uint64_t v146 = v87;
  uint64_t v147 = v55;
  uint64_t v148 = v41;
  uint64_t v149 = v54;
  char v150 = v52;
  *(_DWORD *)uint64_t v151 = *(_DWORD *)v158;
  *(_DWORD *)&v151[3] = *(_DWORD *)&v158[3];
  uint64_t v152 = v51;
  uint64_t v153 = v53;
  uint64_t v154 = v50;
  uint64_t v155 = v69;
  sub_1002DB5A0((uint64_t)&v100);
  return memcpy(v86, v99, 0x168uLL);
}

uint64_t sub_1002DB020(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1000172F8(&qword_10065CBD0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AppStoreItem(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v36 = (uint64_t)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v31 - v11;
  if (!a1) {
    return 0;
  }
  uint64_t v37 = 0x737574617473;
  unint64_t v38 = 0xE600000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v13 = sub_100451EDC((uint64_t)v39), (v14 & 1) != 0))
  {
    sub_1000144C8(*(void *)(a1 + 56) + 32 * v13, (uint64_t)&v40);
  }
  else
  {
    long long v40 = 0u;
    long long v41 = 0u;
  }
  sub_10025C22C((uint64_t)v39);
  if (!*((void *)&v41 + 1)) {
    goto LABEL_18;
  }
  uint64_t v35 = v7;
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v15 = v37;
  uint64_t v37 = 0x7473694C676E6F73;
  unint64_t v38 = 0xE800000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v16 = sub_100451EDC((uint64_t)v39), (v17 & 1) != 0))
  {
    sub_1000144C8(*(void *)(a1 + 56) + 32 * v16, (uint64_t)&v40);
  }
  else
  {
    long long v40 = 0u;
    long long v41 = 0u;
  }
  sub_10025C22C((uint64_t)v39);
  if (!*((void *)&v41 + 1))
  {
LABEL_18:
    swift_bridgeObjectRelease();
    sub_10001729C((uint64_t)&v40, (uint64_t *)&unk_10065C9C0);
    return 0;
  }
  sub_1000172F8(&qword_10065FE98);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_19;
  }
  uint64_t v19 = v37;
  *(void *)&long long v40 = 0x67616279656BLL;
  *((void *)&v40 + 1) = 0xE600000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v20 = sub_100451EDC((uint64_t)v39), (v21 & 1) != 0))
  {
    sub_1000144C8(*(void *)(a1 + 56) + 32 * v20, (uint64_t)&v40);
  }
  else
  {
    long long v40 = 0u;
    long long v41 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10025C22C((uint64_t)v39);
  if (*((void *)&v41 + 1)) {
    swift_dynamicCast();
  }
  else {
    sub_10001729C((uint64_t)&v40, (uint64_t *)&unk_10065C9C0);
  }
  uint64_t v22 = v35;
  v31[1] = v19;
  uint64_t v32 = v15;
  uint64_t v23 = *(void *)(v19 + 16);
  if (v23)
  {
    uint64_t v24 = v19 + 32;
    uint64_t v34 = v8;
    uint64_t v25 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    uint64_t v26 = _swiftEmptyArrayStorage;
    int v27 = a2 & 1;
    int v33 = v27;
    do
    {
      uint64_t v28 = swift_bridgeObjectRetain();
      sub_1002D8BE0(v28, v27, (uint64_t)v6);
      if ((*v25)(v6, 1, v22) == 1)
      {
        sub_10001729C((uint64_t)v6, &qword_10065CBD0);
      }
      else
      {
        sub_1002DB6DC((uint64_t)v6, (uint64_t)v12, type metadata accessor for AppStoreItem);
        sub_1002DB744((uint64_t)v12, v36, type metadata accessor for AppStoreItem);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v26 = (void *)sub_100290568(0, v26[2] + 1, 1, (unint64_t)v26);
        }
        unint64_t v30 = v26[2];
        unint64_t v29 = v26[3];
        if (v30 >= v29 >> 1) {
          uint64_t v26 = (void *)sub_100290568(v29 > 1, v30 + 1, 1, (unint64_t)v26);
        }
        v26[2] = v30 + 1;
        sub_1002DB6DC(v36, (uint64_t)v26+ ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))+ *(void *)(v34 + 72) * v30, type metadata accessor for AppStoreItem);
        sub_1002DB7AC((uint64_t)v12, type metadata accessor for AppStoreItem);
        uint64_t v22 = v35;
        int v27 = v33;
      }
      v24 += 8;
      --v23;
    }
    while (v23);
  }
  swift_bridgeObjectRelease();
  return v32;
}

uint64_t type metadata accessor for AppStorePackage(uint64_t a1)
{
  return sub_10019B200(a1, qword_10065FF58);
}

unint64_t sub_1002DB548()
{
  unint64_t result = qword_10065FEA8;
  if (!qword_10065FEA8)
  {
    type metadata accessor for AppStoreResponseDecoderImpl();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FEA8);
  }
  return result;
}

uint64_t sub_1002DB5A0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002DB6DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002DB744(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002DB7AC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1002DB80C()
{
  unint64_t result = qword_10065FEB8;
  if (!qword_10065FEB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FEB8);
  }
  return result;
}

unint64_t sub_1002DB860()
{
  unint64_t result = qword_10065FEC0;
  if (!qword_10065FEC0)
  {
    sub_10017B924(&qword_10065E738);
    sub_100288278();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FEC0);
  }
  return result;
}

unint64_t sub_1002DB8DC()
{
  unint64_t result = qword_10065FEC8;
  if (!qword_10065FEC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FEC8);
  }
  return result;
}

unint64_t sub_1002DB930()
{
  unint64_t result = qword_10065FED8;
  if (!qword_10065FED8)
  {
    sub_10017B924(&qword_10065FED0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FED8);
  }
  return result;
}

unint64_t sub_1002DB9A4()
{
  unint64_t result = qword_10065FEE0;
  if (!qword_10065FEE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FEE0);
  }
  return result;
}

unint64_t sub_1002DB9F8()
{
  unint64_t result = qword_10065FEF0;
  if (!qword_10065FEF0)
  {
    sub_10017B924(&qword_10065FEE8);
    sub_1002DBA6C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FEF0);
  }
  return result;
}

unint64_t sub_1002DBA6C()
{
  unint64_t result = qword_10065FEF8;
  if (!qword_10065FEF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065FEF8);
  }
  return result;
}

void *sub_1002DBAC4(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AppStoreSubGenre(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

void *assignWithTake for AppStoreSubGenre(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

ValueMetadata *type metadata accessor for AppStoreSubGenre()
{
  return &type metadata for AppStoreSubGenre;
}

ValueMetadata *type metadata accessor for SoftwarePlatform()
{
  return &type metadata for SoftwarePlatform;
}

uint64_t initializeBufferWithCopyOfBuffer for AppStoreRating(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AppStoreRating(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AppStoreRating(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AppStoreRating()
{
  return &type metadata for AppStoreRating;
}

uint64_t destroy for AppStoreMetadata()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AppStoreMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v9 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v9;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  uint64_t v10 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v10;
  uint64_t v11 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v11;
  uint64_t v12 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v12;
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_DWORD *)(a1 + 201) = *(_DWORD *)(a2 + 201);
  *(unsigned char *)(a1 + 205) = *(unsigned char *)(a2 + 205);
  *(unsigned char *)(a1 + 206) = *(unsigned char *)(a2 + 206);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  uint64_t v13 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v13;
  uint64_t v14 = *(void *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v14;
  uint64_t v15 = *(void *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = v15;
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  uint64_t v16 = *(void *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v16;
  uint64_t v17 = *(void *)(a2 + 312);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 312) = v17;
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  uint64_t v18 = *(void *)(a2 + 336);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = v18;
  uint64_t v19 = *(void *)(a2 + 352);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 352) = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AppStoreMetadata(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(unsigned char *)(a1 + 137) = *(unsigned char *)(a2 + 137);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 192) = v4;
  *(unsigned char *)(a1 + 201) = *(unsigned char *)(a2 + 201);
  *(unsigned char *)(a1 + 202) = *(unsigned char *)(a2 + 202);
  *(unsigned char *)(a1 + 203) = *(unsigned char *)(a2 + 203);
  *(unsigned char *)(a1 + 204) = *(unsigned char *)(a2 + 204);
  *(unsigned char *)(a1 + 205) = *(unsigned char *)(a2 + 205);
  *(unsigned char *)(a1 + 206) = *(unsigned char *)(a2 + 206);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for AppStoreMetadata(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x168uLL);
}

uint64_t assignWithTake for AppStoreMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  uint64_t v11 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v13;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(unsigned char *)(a1 + 204) = *(unsigned char *)(a2 + 204);
  *(_WORD *)(a1 + 205) = *(_WORD *)(a2 + 205);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v14;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = v15;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = v16;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  uint64_t v17 = *(void *)(a2 + 336);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = v17;
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(a2 + 352);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 352) = v18;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AppStoreMetadata(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 360)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppStoreMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 360) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 360) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppStoreMetadata()
{
  return &type metadata for AppStoreMetadata;
}

uint64_t getEnumTagSinglePayload for AppStoreMetadata.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xDF) {
    goto LABEL_17;
  }
  if (a2 + 33 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 33) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 33;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 33;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 33;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x22;
  int v8 = v6 - 34;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AppStoreMetadata.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 33 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 33) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xDF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xDE)
  {
    unsigned int v6 = ((a2 - 223) >> 8) + 1;
    *unint64_t result = a2 + 33;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002DC640);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 33;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppStoreMetadata.CodingKeys()
{
  return &type metadata for AppStoreMetadata.CodingKeys;
}

char *sub_1002DC678(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    uint64_t v10 = a3[6];
    *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    *(void *)uint64_t v11 = *(void *)v12;
    unsigned char v11[8] = v12[8];
    uint64_t v13 = a3[7];
    uint64_t v14 = &a1[v13];
    uint64_t v15 = &a2[v13];
    uint64_t v48 = v9;
    if (*(void *)&a2[v13 + 32] == 1)
    {
      long long v16 = *((_OWORD *)v15 + 1);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      *((_OWORD *)v14 + 1) = v16;
      long long v17 = *((_OWORD *)v15 + 3);
      *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
      *((_OWORD *)v14 + 3) = v17;
    }
    else
    {
      uint64_t v19 = *(void *)v15;
      unint64_t v20 = *((void *)v15 + 1);
      sub_100012670(*(void *)v15, v20);
      *(void *)uint64_t v14 = v19;
      *((void *)v14 + 1) = v20;
      v14[16] = v15[16];
      uint64_t v21 = *((void *)v15 + 4);
      *((void *)v14 + 3) = *((void *)v15 + 3);
      *((void *)v14 + 4) = v21;
      *((void *)v14 + 5) = *((void *)v15 + 5);
      v14[48] = v15[48];
      *((void *)v14 + 7) = *((void *)v15 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v22 = a3[8];
    uint64_t v23 = &a1[v22];
    uint64_t v24 = &a2[v22];
    unint64_t v25 = *((void *)v24 + 1);
    if (v25 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    }
    else
    {
      uint64_t v26 = *(void *)v24;
      sub_100012670(*(void *)v24, *((void *)v24 + 1));
      *(void *)uint64_t v23 = v26;
      *((void *)v23 + 1) = v25;
    }
    uint64_t v27 = a3[9];
    uint64_t v28 = &a1[v27];
    unint64_t v29 = &a2[v27];
    uint64_t v30 = *((void *)v29 + 2);
    if (v30 == 1)
    {
      long long v31 = *((_OWORD *)v29 + 1);
      *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
      *((_OWORD *)v28 + 1) = v31;
      *((_OWORD *)v28 + 2) = *((_OWORD *)v29 + 2);
    }
    else
    {
      *uint64_t v28 = *v29;
      *((void *)v28 + 1) = *((void *)v29 + 1);
      *((void *)v28 + 2) = v30;
      *((void *)v28 + 3) = *((void *)v29 + 3);
      v28[32] = v29[32];
      *((void *)v28 + 5) = *((void *)v29 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v32 = a3[10];
    int v33 = &a1[v32];
    uint64_t v34 = &a2[v32];
    uint64_t v35 = *((void *)v34 + 2);
    if (v35 == 1)
    {
      long long v36 = *((_OWORD *)v34 + 1);
      *(_OWORD *)int v33 = *(_OWORD *)v34;
      *((_OWORD *)v33 + 1) = v36;
      *((_OWORD *)v33 + 2) = *((_OWORD *)v34 + 2);
    }
    else
    {
      char *v33 = *v34;
      *((void *)v33 + 1) = *((void *)v34 + 1);
      *((void *)v33 + 2) = v35;
      *((void *)v33 + 3) = *((void *)v34 + 3);
      v33[32] = v34[32];
      *((void *)v33 + 5) = *((void *)v34 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v37 = a3[11];
    unint64_t v38 = &a1[v37];
    uint64_t v39 = &a2[v37];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(&a2[v37], 1, v7))
    {
      uint64_t v40 = sub_1000172F8(&qword_10065C3C0);
      memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      v48(v38, v39, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v38, 0, 1, v7);
    }
    uint64_t v41 = a3[12];
    uint64_t v42 = &a1[v41];
    uint64_t v43 = &a2[v41];
    uint64_t v44 = *((void *)v43 + 1);
    if (v44)
    {
      *(void *)uint64_t v42 = *(void *)v43;
      *((void *)v42 + 1) = v44;
      long long v45 = *((_OWORD *)v43 + 2);
      *((_OWORD *)v42 + 1) = *((_OWORD *)v43 + 1);
      *((_OWORD *)v42 + 2) = v45;
      *((void *)v42 + 6) = *((void *)v43 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v46 = *((_OWORD *)v43 + 1);
      *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
      *((_OWORD *)v42 + 1) = v46;
      *((_OWORD *)v42 + 2) = *((_OWORD *)v43 + 2);
      *((void *)v42 + 6) = *((void *)v43 + 6);
    }
    a1[a3[13]] = a2[a3[13]];
  }
  return a1;
}

uint64_t sub_1002DCA1C(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  unsigned int v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  uint64_t v7 = (uint64_t *)(a1 + a2[7]);
  if (v7[4] != 1)
  {
    sub_100013510(*v7, v7[1]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = (uint64_t *)(a1 + a2[8]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    sub_100013510(*v8, v9);
  }
  if (*(void *)(a1 + a2[9] + 16) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + a2[10] + 16) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = a1 + a2[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4)) {
    v6(v10, v4);
  }
  uint64_t result = *(void *)(a1 + a2[12] + 8);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *sub_1002DCBC8(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  uint64_t v9 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = a3[7];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  long long v46 = v8;
  if (*(void *)&a2[v12 + 32] == 1)
  {
    long long v15 = *((_OWORD *)v14 + 1);
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    *((_OWORD *)v13 + 1) = v15;
    long long v16 = *((_OWORD *)v14 + 3);
    *((_OWORD *)v13 + 2) = *((_OWORD *)v14 + 2);
    *((_OWORD *)v13 + 3) = v16;
  }
  else
  {
    uint64_t v17 = *(void *)v14;
    unint64_t v18 = *((void *)v14 + 1);
    sub_100012670(*(void *)v14, v18);
    *(void *)uint64_t v13 = v17;
    *((void *)v13 + 1) = v18;
    v13[16] = v14[16];
    uint64_t v19 = *((void *)v14 + 4);
    *((void *)v13 + 3) = *((void *)v14 + 3);
    *((void *)v13 + 4) = v19;
    *((void *)v13 + 5) = *((void *)v14 + 5);
    v13[48] = v14[48];
    *((void *)v13 + 7) = *((void *)v14 + 7);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v20 = a3[8];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = (uint64_t *)&a2[v20];
  unint64_t v23 = v22[1];
  if (v23 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  }
  else
  {
    uint64_t v24 = *v22;
    sub_100012670(*v22, v22[1]);
    *(void *)uint64_t v21 = v24;
    *((void *)v21 + 1) = v23;
  }
  uint64_t v25 = a3[9];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  uint64_t v28 = *((void *)v27 + 2);
  if (v28 == 1)
  {
    long long v29 = *((_OWORD *)v27 + 1);
    *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
    *((_OWORD *)v26 + 1) = v29;
    *((_OWORD *)v26 + 2) = *((_OWORD *)v27 + 2);
  }
  else
  {
    *uint64_t v26 = *v27;
    *((void *)v26 + 1) = *((void *)v27 + 1);
    *((void *)v26 + 2) = v28;
    *((void *)v26 + 3) = *((void *)v27 + 3);
    v26[32] = v27[32];
    *((void *)v26 + 5) = *((void *)v27 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v30 = a3[10];
  long long v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  uint64_t v33 = *((void *)v32 + 2);
  if (v33 == 1)
  {
    long long v34 = *((_OWORD *)v32 + 1);
    *(_OWORD *)long long v31 = *(_OWORD *)v32;
    *((_OWORD *)v31 + 1) = v34;
    *((_OWORD *)v31 + 2) = *((_OWORD *)v32 + 2);
  }
  else
  {
    *long long v31 = *v32;
    *((void *)v31 + 1) = *((void *)v32 + 1);
    *((void *)v31 + 2) = v33;
    *((void *)v31 + 3) = *((void *)v32 + 3);
    v31[32] = v32[32];
    *((void *)v31 + 5) = *((void *)v32 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v35 = a3[11];
  long long v36 = &a1[v35];
  uint64_t v37 = &a2[v35];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(&a2[v35], 1, v6))
  {
    uint64_t v38 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    v46(v36, v37, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v36, 0, 1, v6);
  }
  uint64_t v39 = a3[12];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  uint64_t v42 = *((void *)v41 + 1);
  if (v42)
  {
    *(void *)uint64_t v40 = *(void *)v41;
    *((void *)v40 + 1) = v42;
    long long v43 = *((_OWORD *)v41 + 2);
    *((_OWORD *)v40 + 1) = *((_OWORD *)v41 + 1);
    *((_OWORD *)v40 + 2) = v43;
    *((void *)v40 + 6) = *((void *)v41 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v44 = *((_OWORD *)v41 + 1);
    *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
    *((_OWORD *)v40 + 1) = v44;
    *((_OWORD *)v40 + 2) = *((_OWORD *)v41 + 2);
    *((void *)v40 + 6) = *((void *)v41 + 6);
  }
  a1[a3[13]] = a2[a3[13]];
  return a1;
}

uint64_t sub_1002DCF1C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v80(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  char v11 = *(unsigned char *)(v10 + 8);
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = v11;
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (long long *)(a2 + v12);
  uint64_t v15 = *(void *)(a1 + v12 + 32);
  uint64_t v16 = *(void *)(a2 + v12 + 32);
  if (v15 == 1)
  {
    if (v16 == 1)
    {
      long long v17 = *v14;
      long long v18 = v14[1];
      long long v19 = v14[3];
      *(_OWORD *)(v13 + 32) = v14[2];
      *(_OWORD *)(v13 + 48) = v19;
      *(_OWORD *)uint64_t v13 = v17;
      *(_OWORD *)(v13 + 16) = v18;
    }
    else
    {
      uint64_t v23 = *(void *)v14;
      unint64_t v24 = *((void *)v14 + 1);
      sub_100012670(*(void *)v14, v24);
      *(void *)uint64_t v13 = v23;
      *(void *)(v13 + 8) = v24;
      *(unsigned char *)(v13 + 16) = *((unsigned char *)v14 + 16);
      *(void *)(v13 + 24) = *((void *)v14 + 3);
      *(void *)(v13 + 32) = *((void *)v14 + 4);
      uint64_t v25 = *((void *)v14 + 5);
      *(unsigned char *)(v13 + 48) = *((unsigned char *)v14 + 48);
      *(void *)(v13 + 40) = v25;
      *(void *)(v13 + 56) = *((void *)v14 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v16 == 1)
  {
    sub_1002DD574(v13);
    long long v20 = v14[3];
    long long v22 = *v14;
    long long v21 = v14[1];
    *(_OWORD *)(v13 + 32) = v14[2];
    *(_OWORD *)(v13 + 48) = v20;
    *(_OWORD *)uint64_t v13 = v22;
    *(_OWORD *)(v13 + 16) = v21;
  }
  else
  {
    uint64_t v26 = *(void *)v14;
    unint64_t v27 = *((void *)v14 + 1);
    sub_100012670(*(void *)v14, v27);
    uint64_t v28 = *(void *)v13;
    unint64_t v29 = *(void *)(v13 + 8);
    *(void *)uint64_t v13 = v26;
    *(void *)(v13 + 8) = v27;
    sub_100013510(v28, v29);
    *(unsigned char *)(v13 + 16) = *((unsigned char *)v14 + 16);
    *(void *)(v13 + 24) = *((void *)v14 + 3);
    *(void *)(v13 + 32) = *((void *)v14 + 4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v30 = *((void *)v14 + 5);
    *(unsigned char *)(v13 + 48) = *((unsigned char *)v14 + 48);
    *(void *)(v13 + 40) = v30;
    *(void *)(v13 + 56) = *((void *)v14 + 7);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v31 = a3[8];
  uint64_t v32 = (uint64_t *)(a1 + v31);
  uint64_t v33 = (uint64_t *)(a2 + v31);
  unint64_t v34 = *(void *)(a2 + v31 + 8);
  if (*(void *)(a1 + v31 + 8) >> 60 == 15)
  {
    if (v34 >> 60 != 15)
    {
      uint64_t v35 = *v33;
      sub_100012670(v35, v34);
      *uint64_t v32 = v35;
      v32[1] = v34;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v34 >> 60 == 15)
  {
    sub_1002DD5C8((uint64_t)v32);
LABEL_13:
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    goto LABEL_15;
  }
  uint64_t v36 = *v33;
  sub_100012670(v36, v34);
  uint64_t v37 = *v32;
  unint64_t v38 = v32[1];
  *uint64_t v32 = v36;
  v32[1] = v34;
  sub_100013510(v37, v38);
LABEL_15:
  uint64_t v39 = a3[9];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = (long long *)(a2 + v39);
  uint64_t v42 = *(void *)(a1 + v39 + 16);
  uint64_t v43 = *(void *)(a2 + v39 + 16);
  if (v42 == 1)
  {
    if (v43 == 1)
    {
      long long v44 = *v41;
      long long v45 = v41[2];
      *(_OWORD *)(v40 + 16) = v41[1];
      *(_OWORD *)(v40 + 32) = v45;
      *(_OWORD *)uint64_t v40 = v44;
    }
    else
    {
      *(unsigned char *)uint64_t v40 = *(unsigned char *)v41;
      *(void *)(v40 + 8) = *((void *)v41 + 1);
      *(void *)(v40 + 16) = *((void *)v41 + 2);
      uint64_t v48 = *((void *)v41 + 3);
      *(unsigned char *)(v40 + 32) = *((unsigned char *)v41 + 32);
      *(void *)(v40 + 24) = v48;
      *(void *)(v40 + 40) = *((void *)v41 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v43 == 1)
  {
    sub_100285DF4(v40);
    long long v47 = v41[1];
    long long v46 = v41[2];
    *(_OWORD *)uint64_t v40 = *v41;
    *(_OWORD *)(v40 + 16) = v47;
    *(_OWORD *)(v40 + 32) = v46;
  }
  else
  {
    *(unsigned char *)uint64_t v40 = *(unsigned char *)v41;
    *(void *)(v40 + 8) = *((void *)v41 + 1);
    *(void *)(v40 + 16) = *((void *)v41 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v49 = *((void *)v41 + 3);
    *(unsigned char *)(v40 + 32) = *((unsigned char *)v41 + 32);
    *(void *)(v40 + 24) = v49;
    *(void *)(v40 + 40) = *((void *)v41 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v50 = a3[10];
  uint64_t v51 = a1 + v50;
  int v52 = (long long *)(a2 + v50);
  uint64_t v53 = *(void *)(a1 + v50 + 16);
  uint64_t v54 = *(void *)(a2 + v50 + 16);
  if (v53 == 1)
  {
    if (v54 == 1)
    {
      long long v55 = *v52;
      long long v56 = v52[2];
      *(_OWORD *)(v51 + 16) = v52[1];
      *(_OWORD *)(v51 + 32) = v56;
      *(_OWORD *)uint64_t v51 = v55;
    }
    else
    {
      *(unsigned char *)uint64_t v51 = *(unsigned char *)v52;
      *(void *)(v51 + 8) = *((void *)v52 + 1);
      *(void *)(v51 + 16) = *((void *)v52 + 2);
      uint64_t v59 = *((void *)v52 + 3);
      *(unsigned char *)(v51 + 32) = *((unsigned char *)v52 + 32);
      *(void *)(v51 + 24) = v59;
      *(void *)(v51 + 40) = *((void *)v52 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v54 == 1)
  {
    sub_100285DF4(v51);
    long long v58 = v52[1];
    long long v57 = v52[2];
    *(_OWORD *)uint64_t v51 = *v52;
    *(_OWORD *)(v51 + 16) = v58;
    *(_OWORD *)(v51 + 32) = v57;
  }
  else
  {
    *(unsigned char *)uint64_t v51 = *(unsigned char *)v52;
    *(void *)(v51 + 8) = *((void *)v52 + 1);
    *(void *)(v51 + 16) = *((void *)v52 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v60 = *((void *)v52 + 3);
    *(unsigned char *)(v51 + 32) = *((unsigned char *)v52 + 32);
    *(void *)(v51 + 24) = v60;
    *(void *)(v51 + 40) = *((void *)v52 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v61 = a3[11];
  int v62 = (void *)(a1 + v61);
  int v63 = (const void *)(a2 + v61);
  int v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v65 = v64(a1 + v61, 1, v6);
  int v66 = v64((uint64_t)v63, 1, v6);
  if (v65)
  {
    if (!v66)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v62, v63, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v62, 0, 1, v6);
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  if (v66)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v62, v6);
LABEL_34:
    uint64_t v67 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v62, v63, *(void *)(*(void *)(v67 - 8) + 64));
    goto LABEL_35;
  }
  v80((uint64_t)v62, (uint64_t)v63, v6);
LABEL_35:
  uint64_t v68 = a3[12];
  uint64_t v69 = (void *)(a1 + v68);
  uint64_t v70 = (void *)(a2 + v68);
  uint64_t v71 = *(void *)(a1 + v68 + 8);
  uint64_t v72 = *(void *)(a2 + v68 + 8);
  if (v71)
  {
    if (v72)
    {
      void *v69 = *v70;
      v69[1] = v70[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v69[2] = v70[2];
      v69[3] = v70[3];
      v69[4] = v70[4];
      v69[5] = v70[5];
      v69[6] = v70[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1002DD61C((uint64_t)v69);
      long long v74 = *((_OWORD *)v70 + 1);
      long long v73 = *((_OWORD *)v70 + 2);
      long long v75 = *(_OWORD *)v70;
      v69[6] = v70[6];
      *((_OWORD *)v69 + 1) = v74;
      *((_OWORD *)v69 + 2) = v73;
      *(_OWORD *)uint64_t v69 = v75;
    }
  }
  else if (v72)
  {
    void *v69 = *v70;
    v69[1] = v70[1];
    v69[2] = v70[2];
    v69[3] = v70[3];
    v69[4] = v70[4];
    v69[5] = v70[5];
    v69[6] = v70[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v76 = *(_OWORD *)v70;
    long long v77 = *((_OWORD *)v70 + 1);
    long long v78 = *((_OWORD *)v70 + 2);
    v69[6] = v70[6];
    *((_OWORD *)v69 + 1) = v77;
    *((_OWORD *)v69 + 2) = v78;
    *(_OWORD *)uint64_t v69 = v76;
  }
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_1002DD574(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002DD5C8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002DD61C(uint64_t a1)
{
  return a1;
}

char *sub_1002DD670(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  uint64_t v9 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  uint64_t v10 = &a1[v9];
  char v11 = &a2[v9];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = a3[7];
  uint64_t v13 = a3[8];
  uint64_t v14 = &a1[v12];
  uint64_t v15 = &a2[v12];
  long long v16 = *((_OWORD *)v15 + 1);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *((_OWORD *)v14 + 1) = v16;
  long long v17 = *((_OWORD *)v15 + 3);
  *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
  *((_OWORD *)v14 + 3) = v17;
  *(_OWORD *)&a1[v13] = *(_OWORD *)&a2[v13];
  uint64_t v18 = a3[9];
  uint64_t v19 = a3[10];
  long long v20 = &a1[v18];
  long long v21 = &a2[v18];
  long long v22 = *((_OWORD *)v21 + 1);
  *(_OWORD *)long long v20 = *(_OWORD *)v21;
  *((_OWORD *)v20 + 1) = v22;
  *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
  uint64_t v23 = &a1[v19];
  unint64_t v24 = (long long *)&a2[v19];
  long long v25 = *v24;
  long long v26 = v24[2];
  *((_OWORD *)v23 + 1) = v24[1];
  *((_OWORD *)v23 + 2) = v26;
  uint64_t v27 = a3[11];
  uint64_t v28 = &a1[v27];
  *(_OWORD *)uint64_t v23 = v25;
  unint64_t v29 = &a2[v27];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(&a2[v27], 1, v6))
  {
    uint64_t v30 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    v8(v28, v29, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v28, 0, 1, v6);
  }
  uint64_t v31 = a3[12];
  uint64_t v32 = a3[13];
  uint64_t v33 = &a1[v31];
  unint64_t v34 = &a2[v31];
  long long v35 = *((_OWORD *)v34 + 1);
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
  *((_OWORD *)v33 + 1) = v35;
  *((_OWORD *)v33 + 2) = *((_OWORD *)v34 + 2);
  *((void *)v33 + 6) = *((void *)v34 + 6);
  a1[v32] = a2[v32];
  return a1;
}

char *sub_1002DD868(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v49 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v49(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  *(void *)uint64_t v9 = *(void *)v10;
  v9[8] = v10[8];
  uint64_t v11 = a3[7];
  uint64_t v12 = (uint64_t)&a1[v11];
  uint64_t v13 = &a2[v11];
  if (*(void *)&a1[v11 + 32] == 1) {
    goto LABEL_4;
  }
  if (*((void *)v13 + 4) == 1)
  {
    sub_1002DD574(v12);
LABEL_4:
    long long v14 = *((_OWORD *)v13 + 1);
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    *(_OWORD *)(v12 + 16) = v14;
    long long v15 = *((_OWORD *)v13 + 3);
    *(_OWORD *)(v12 + 32) = *((_OWORD *)v13 + 2);
    *(_OWORD *)(v12 + 48) = v15;
    goto LABEL_6;
  }
  uint64_t v16 = *(void *)v12;
  unint64_t v17 = *(void *)(v12 + 8);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  sub_100013510(v16, v17);
  *(unsigned char *)(v12 + 16) = v13[16];
  uint64_t v18 = *((void *)v13 + 4);
  *(void *)(v12 + 24) = *((void *)v13 + 3);
  *(void *)(v12 + 32) = v18;
  swift_bridgeObjectRelease();
  *(void *)(v12 + 40) = *((void *)v13 + 5);
  *(unsigned char *)(v12 + 48) = v13[48];
  *(void *)(v12 + 56) = *((void *)v13 + 7);
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v19 = a3[8];
  uint64_t v20 = (uint64_t)&a1[v19];
  long long v21 = &a2[v19];
  unint64_t v22 = *(void *)&a1[v19 + 8];
  if (v22 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    goto LABEL_11;
  }
  unint64_t v23 = *((void *)v21 + 1);
  if (v23 >> 60 == 15)
  {
    sub_1002DD5C8(v20);
    goto LABEL_9;
  }
  uint64_t v24 = *(void *)v20;
  *(void *)uint64_t v20 = *(void *)v21;
  *(void *)(v20 + 8) = v23;
  sub_100013510(v24, v22);
LABEL_11:
  uint64_t v25 = a3[9];
  uint64_t v26 = (uint64_t)&a1[v25];
  uint64_t v27 = &a2[v25];
  if (*(void *)&a1[v25 + 16] == 1)
  {
LABEL_14:
    long long v29 = *((_OWORD *)v27 + 1);
    *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
    *(_OWORD *)(v26 + 16) = v29;
    *(_OWORD *)(v26 + 32) = *((_OWORD *)v27 + 2);
    goto LABEL_16;
  }
  uint64_t v28 = *((void *)v27 + 2);
  if (v28 == 1)
  {
    sub_100285DF4(v26);
    goto LABEL_14;
  }
  *(unsigned char *)uint64_t v26 = *v27;
  *(void *)(v26 + 8) = *((void *)v27 + 1);
  *(void *)(v26 + 16) = v28;
  swift_bridgeObjectRelease();
  *(void *)(v26 + 24) = *((void *)v27 + 3);
  *(unsigned char *)(v26 + 32) = v27[32];
  *(void *)(v26 + 40) = *((void *)v27 + 5);
  swift_bridgeObjectRelease();
LABEL_16:
  uint64_t v30 = a3[10];
  uint64_t v31 = (uint64_t)&a1[v30];
  uint64_t v32 = &a2[v30];
  if (*(void *)&a1[v30 + 16] == 1)
  {
LABEL_19:
    long long v34 = *((_OWORD *)v32 + 1);
    *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
    *(_OWORD *)(v31 + 16) = v34;
    *(_OWORD *)(v31 + 32) = *((_OWORD *)v32 + 2);
    goto LABEL_21;
  }
  uint64_t v33 = *((void *)v32 + 2);
  if (v33 == 1)
  {
    sub_100285DF4(v31);
    goto LABEL_19;
  }
  *(unsigned char *)uint64_t v31 = *v32;
  *(void *)(v31 + 8) = *((void *)v32 + 1);
  *(void *)(v31 + 16) = v33;
  swift_bridgeObjectRelease();
  *(void *)(v31 + 24) = *((void *)v32 + 3);
  *(unsigned char *)(v31 + 32) = v32[32];
  *(void *)(v31 + 40) = *((void *)v32 + 5);
  swift_bridgeObjectRelease();
LABEL_21:
  uint64_t v35 = a3[11];
  uint64_t v36 = &a1[v35];
  uint64_t v37 = &a2[v35];
  unint64_t v38 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  int v39 = v38(&a1[v35], 1, v6);
  int v40 = v38(v37, 1, v6);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v36, v37, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v36, 0, 1, v6);
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v36, v6);
LABEL_26:
    uint64_t v41 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v36, v37, *(void *)(*(void *)(v41 - 8) + 64));
    goto LABEL_27;
  }
  v49(v36, v37, v6);
LABEL_27:
  uint64_t v42 = a3[12];
  uint64_t v43 = (uint64_t)&a1[v42];
  long long v44 = &a2[v42];
  if (!*(void *)&a1[v42 + 8])
  {
LABEL_31:
    long long v47 = *((_OWORD *)v44 + 1);
    *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
    *(_OWORD *)(v43 + 16) = v47;
    *(_OWORD *)(v43 + 32) = *((_OWORD *)v44 + 2);
    *(void *)(v43 + 48) = *((void *)v44 + 6);
    goto LABEL_32;
  }
  uint64_t v45 = *((void *)v44 + 1);
  if (!v45)
  {
    sub_1002DD61C(v43);
    goto LABEL_31;
  }
  *(void *)uint64_t v43 = *(void *)v44;
  *(void *)(v43 + 8) = v45;
  swift_bridgeObjectRelease();
  long long v46 = *((_OWORD *)v44 + 2);
  *(_OWORD *)(v43 + 16) = *((_OWORD *)v44 + 1);
  *(_OWORD *)(v43 + 32) = v46;
  *(void *)(v43 + 48) = *((void *)v44 + 6);
  swift_bridgeObjectRelease();
LABEL_32:
  a1[a3[13]] = a2[a3[13]];
  return a1;
}

uint64_t sub_1002DDC7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002DDC90);
}

uint64_t sub_1002DDC90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_1000172F8(&qword_10065C3C0);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 44);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 48) + 8);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  int v15 = v14 - 1;
  if (v15 < 0) {
    int v15 = -1;
  }
  return (v15 + 1);
}

uint64_t sub_1002DDDB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002DDDCC);
}

uint64_t sub_1002DDDCC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = sub_1000172F8(&qword_10065C3C0);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 48) + 8) = a2;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 44);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_1002DDEE4()
{
  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    sub_10026B458();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *sub_1002DDFF8(void *a1, void *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v36 = *a2;
    *a1 = *a2;
    uint64_t v37 = (void *)(v36 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v5 = a3[5];
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v10 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v6, v7, v10);
    uint64_t v11 = a3[6];
    uint64_t v12 = a3[7];
    uint64_t v13 = a3;
    uint64_t v14 = (char *)a1 + v11;
    int v15 = a2;
    uint64_t v16 = (char *)a2 + v11;
    uint64_t v17 = *((void *)v16 + 1);
    *(void *)uint64_t v14 = *(void *)v16;
    *((void *)v14 + 1) = v17;
    uint64_t v18 = *((void *)v16 + 3);
    *((void *)v14 + 2) = *((void *)v16 + 2);
    *((void *)v14 + 3) = v18;
    uint64_t v19 = *((void *)v16 + 5);
    *((void *)v14 + 4) = *((void *)v16 + 4);
    *((void *)v14 + 5) = v19;
    uint64_t v20 = *((void *)v16 + 7);
    *((void *)v14 + 6) = *((void *)v16 + 6);
    *((void *)v14 + 7) = v20;
    uint64_t v21 = *((void *)v16 + 9);
    *((void *)v14 + 8) = *((void *)v16 + 8);
    *((void *)v14 + 9) = v21;
    uint64_t v22 = *((void *)v16 + 11);
    *((void *)v14 + 10) = *((void *)v16 + 10);
    *((void *)v14 + 11) = v22;
    *((void *)v14 + 12) = *((void *)v16 + 12);
    v14[104] = v16[104];
    uint64_t v23 = *((void *)v16 + 15);
    *((void *)v14 + 14) = *((void *)v16 + 14);
    *((void *)v14 + 15) = v23;
    *((void *)v14 + 16) = *((void *)v16 + 16);
    v14[136] = v16[136];
    v14[137] = v16[137];
    uint64_t v24 = *((void *)v16 + 19);
    *((void *)v14 + 18) = *((void *)v16 + 18);
    *((void *)v14 + 19) = v24;
    uint64_t v25 = *((void *)v16 + 21);
    *((void *)v14 + 20) = *((void *)v16 + 20);
    *((void *)v14 + 21) = v25;
    uint64_t v26 = *((void *)v16 + 23);
    *((void *)v14 + 22) = *((void *)v16 + 22);
    *((void *)v14 + 23) = v26;
    v14[200] = v16[200];
    *((void *)v14 + 24) = *((void *)v16 + 24);
    *(_DWORD *)(v14 + 201) = *(_DWORD *)(v16 + 201);
    v14[205] = v16[205];
    v14[206] = v16[206];
    *((_OWORD *)v14 + 13) = *((_OWORD *)v16 + 13);
    uint64_t v27 = *((void *)v16 + 29);
    *((void *)v14 + 28) = *((void *)v16 + 28);
    *((void *)v14 + 29) = v27;
    uint64_t v28 = *((void *)v16 + 31);
    *((void *)v14 + 30) = *((void *)v16 + 30);
    *((void *)v14 + 31) = v28;
    uint64_t v29 = *((void *)v16 + 33);
    *((void *)v14 + 32) = *((void *)v16 + 32);
    *((void *)v14 + 33) = v29;
    *((_OWORD *)v14 + 17) = *((_OWORD *)v16 + 17);
    uint64_t v30 = *((void *)v16 + 37);
    *((void *)v14 + 36) = *((void *)v16 + 36);
    *((void *)v14 + 37) = v30;
    uint64_t v31 = *((void *)v16 + 39);
    *((void *)v14 + 38) = *((void *)v16 + 38);
    *((void *)v14 + 39) = v31;
    v14[320] = v16[320];
    uint64_t v32 = *((void *)v16 + 42);
    *((void *)v14 + 41) = *((void *)v16 + 41);
    *((void *)v14 + 42) = v32;
    uint64_t v33 = *((void *)v16 + 44);
    *((void *)v14 + 43) = *((void *)v16 + 43);
    *((void *)v14 + 44) = v33;
    *(void *)((char *)a1 + v12) = *(void *)((char *)v15 + v12);
    long long v46 = v13;
    uint64_t v34 = v13[8];
    uint64_t v48 = a1;
    uint64_t v45 = (char *)a1 + v34;
    long long v47 = v15;
    uint64_t v35 = (_OWORD *)((char *)v15 + v34);
    unint64_t v44 = *(void *)((char *)v15 + v34 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v44 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v45 = *v35;
    }
    else
    {
      uint64_t v38 = *(void *)v35;
      sub_100012670(v38, v44);
      *(void *)uint64_t v45 = v38;
      *((void *)v45 + 1) = v44;
    }
    uint64_t v39 = v46[9];
    uint64_t v37 = v48;
    int v40 = (void *)((char *)v48 + v39);
    uint64_t v41 = (void *)((char *)v47 + v39);
    uint64_t v42 = v41[1];
    void *v40 = *v41;
    v40[1] = v42;
    swift_bridgeObjectRetain();
  }
  return v37;
}

uint64_t sub_1002DE334(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(a2 + 32));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    sub_100013510(*v6, v7);
  }

  return swift_bridgeObjectRelease();
}

void *sub_1002DE488(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v4 = a3[5];
  uint64_t v6 = (char *)a1 + v4;
  uint64_t v8 = (char *)a2 + v4;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v6, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = a3;
  uint64_t v13 = a1;
  uint64_t v14 = (char *)a1 + v10;
  int v15 = (char *)a2 + v10;
  uint64_t v16 = *((void *)v15 + 1);
  *(void *)uint64_t v14 = *(void *)v15;
  *((void *)v14 + 1) = v16;
  uint64_t v17 = *((void *)v15 + 3);
  *((void *)v14 + 2) = *((void *)v15 + 2);
  *((void *)v14 + 3) = v17;
  uint64_t v18 = *((void *)v15 + 5);
  *((void *)v14 + 4) = *((void *)v15 + 4);
  *((void *)v14 + 5) = v18;
  uint64_t v19 = *((void *)v15 + 7);
  *((void *)v14 + 6) = *((void *)v15 + 6);
  *((void *)v14 + 7) = v19;
  uint64_t v20 = *((void *)v15 + 9);
  *((void *)v14 + 8) = *((void *)v15 + 8);
  *((void *)v14 + 9) = v20;
  uint64_t v21 = *((void *)v15 + 11);
  *((void *)v14 + 10) = *((void *)v15 + 10);
  *((void *)v14 + 11) = v21;
  *((void *)v14 + 12) = *((void *)v15 + 12);
  v14[104] = v15[104];
  uint64_t v22 = *((void *)v15 + 15);
  *((void *)v14 + 14) = *((void *)v15 + 14);
  *((void *)v14 + 15) = v22;
  *((void *)v14 + 16) = *((void *)v15 + 16);
  v14[136] = v15[136];
  v14[137] = v15[137];
  uint64_t v23 = *((void *)v15 + 19);
  *((void *)v14 + 18) = *((void *)v15 + 18);
  *((void *)v14 + 19) = v23;
  uint64_t v24 = *((void *)v15 + 21);
  *((void *)v14 + 20) = *((void *)v15 + 20);
  *((void *)v14 + 21) = v24;
  uint64_t v25 = *((void *)v15 + 23);
  *((void *)v14 + 22) = *((void *)v15 + 22);
  *((void *)v14 + 23) = v25;
  v14[200] = v15[200];
  *((void *)v14 + 24) = *((void *)v15 + 24);
  *(_DWORD *)(v14 + 201) = *(_DWORD *)(v15 + 201);
  v14[205] = v15[205];
  v14[206] = v15[206];
  *((_OWORD *)v14 + 13) = *((_OWORD *)v15 + 13);
  uint64_t v26 = *((void *)v15 + 29);
  *((void *)v14 + 28) = *((void *)v15 + 28);
  *((void *)v14 + 29) = v26;
  uint64_t v27 = *((void *)v15 + 31);
  *((void *)v14 + 30) = *((void *)v15 + 30);
  *((void *)v14 + 31) = v27;
  uint64_t v28 = *((void *)v15 + 33);
  *((void *)v14 + 32) = *((void *)v15 + 32);
  *((void *)v14 + 33) = v28;
  *((_OWORD *)v14 + 17) = *((_OWORD *)v15 + 17);
  uint64_t v29 = *((void *)v15 + 37);
  *((void *)v14 + 36) = *((void *)v15 + 36);
  *((void *)v14 + 37) = v29;
  uint64_t v30 = *((void *)v15 + 39);
  *((void *)v14 + 38) = *((void *)v15 + 38);
  *((void *)v14 + 39) = v30;
  v14[320] = v15[320];
  uint64_t v31 = *((void *)v15 + 42);
  *((void *)v14 + 41) = *((void *)v15 + 41);
  *((void *)v14 + 42) = v31;
  uint64_t v32 = *((void *)v15 + 44);
  *((void *)v14 + 43) = *((void *)v15 + 43);
  *((void *)v14 + 44) = v32;
  *(void *)((char *)v13 + v11) = *(void *)((char *)a2 + v11);
  uint64_t v43 = v12;
  uint64_t v33 = v12[8];
  unint64_t v44 = v13;
  uint64_t v42 = (char *)v13 + v33;
  uint64_t v41 = (void *)((char *)a2 + v33);
  unint64_t v40 = *(void *)((char *)a2 + v33 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v40 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v42 = *(_OWORD *)v41;
  }
  else
  {
    uint64_t v34 = *v41;
    sub_100012670(*v41, v40);
    *(void *)uint64_t v42 = v34;
    *((void *)v42 + 1) = v40;
  }
  uint64_t v35 = v43[9];
  uint64_t v36 = (void *)((char *)v44 + v35);
  uint64_t v37 = (void *)((char *)a2 + v35);
  uint64_t v38 = v37[1];
  void *v36 = *v37;
  v36[1] = v38;
  swift_bridgeObjectRetain();
  return v44;
}

void *sub_1002DE784(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)uint64_t v11 = *(void *)((char *)a2 + v10);
  *((void *)v11 + 1) = *(void *)((char *)a2 + v10 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v11 + 2) = *((void *)v12 + 2);
  *((void *)v11 + 3) = *((void *)v12 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v11 + 4) = *((void *)v12 + 4);
  *((void *)v11 + 5) = *((void *)v12 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v11 + 6) = *((void *)v12 + 6);
  *((void *)v11 + 7) = *((void *)v12 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v11 + 8) = *((void *)v12 + 8);
  *((void *)v11 + 9) = *((void *)v12 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v11 + 10) = *((void *)v12 + 10);
  *((void *)v11 + 11) = *((void *)v12 + 11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v11 + 12) = *((void *)v12 + 12);
  v11[104] = v12[104];
  *((void *)v11 + 14) = *((void *)v12 + 14);
  *((void *)v11 + 15) = *((void *)v12 + 15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v11 + 16) = *((void *)v12 + 16);
  v11[136] = v12[136];
  v11[137] = v12[137];
  *((void *)v11 + 18) = *((void *)v12 + 18);
  *((void *)v11 + 19) = *((void *)v12 + 19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v11 + 20) = *((void *)v12 + 20);
  *((void *)v11 + 21) = *((void *)v12 + 21);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v11 + 22) = *((void *)v12 + 22);
  *((void *)v11 + 23) = *((void *)v12 + 23);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = *((void *)v12 + 24);
  v11[200] = v12[200];
  *((void *)v11 + 24) = v13;
  v11[201] = v12[201];
  v11[202] = v12[202];
  v11[203] = v12[203];
  v11[204] = v12[204];
  v11[205] = v12[205];
  v11[206] = v12[206];
  *((void *)v11 + 26) = *((void *)v12 + 26);
  *((void *)v11 + 27) = *((void *)v12 + 27);
  *((void *)v11 + 28) = *((void *)v12 + 28);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v11 + 29) = *((void *)v12 + 29);
  *((void *)v11 + 30) = *((void *)v12 + 30);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v11 + 31) = *((void *)v12 + 31);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v11 + 32) = *((void *)v12 + 32);
  *((void *)v11 + 33) = *((void *)v12 + 33);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v11 + 34) = *((void *)v12 + 34);
  *((void *)v11 + 35) = *((void *)v12 + 35);
  *((void *)v11 + 36) = *((void *)v12 + 36);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v11 + 37) = *((void *)v12 + 37);
  *((void *)v11 + 38) = *((void *)v12 + 38);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v11 + 39) = *((void *)v12 + 39);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11[320] = v12[320];
  *((void *)v11 + 41) = *((void *)v12 + 41);
  *((void *)v11 + 42) = *((void *)v12 + 42);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v11 + 43) = *((void *)v12 + 43);
  *((void *)v11 + 44) = *((void *)v12 + 44);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[8];
  int v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  unint64_t v17 = *(void *)((char *)a2 + v14 + 8);
  if (*(void *)((char *)a1 + v14 + 8) >> 60 != 15)
  {
    if (v17 >> 60 != 15)
    {
      uint64_t v19 = *v16;
      sub_100012670(v19, v17);
      uint64_t v20 = *v15;
      unint64_t v21 = v15[1];
      *int v15 = v19;
      v15[1] = v17;
      sub_100013510(v20, v21);
      goto LABEL_8;
    }
    sub_1002DEBB4((uint64_t)v15);
    goto LABEL_6;
  }
  if (v17 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)int v15 = *(_OWORD *)v16;
    goto LABEL_8;
  }
  uint64_t v18 = *v16;
  sub_100012670(v18, v17);
  *int v15 = v18;
  v15[1] = v17;
LABEL_8:
  uint64_t v22 = a3[9];
  uint64_t v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = (void *)((char *)a2 + v22);
  *uint64_t v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1002DEBB4(uint64_t a1)
{
  return a1;
}

void *sub_1002DEC08(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  memcpy((char *)a1 + a3[6], (char *)a2 + a3[6], 0x168uLL);
  uint64_t v10 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  return a1;
}

void *sub_1002DECC8(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = *(void *)((char *)a2 + v10 + 8);
  *(void *)uint64_t v11 = *(void *)((char *)a2 + v10);
  *((void *)v11 + 1) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *((void *)v12 + 3);
  *((void *)v11 + 2) = *((void *)v12 + 2);
  *((void *)v11 + 3) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *((void *)v12 + 5);
  *((void *)v11 + 4) = *((void *)v12 + 4);
  *((void *)v11 + 5) = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = *((void *)v12 + 7);
  *((void *)v11 + 6) = *((void *)v12 + 6);
  *((void *)v11 + 7) = v16;
  swift_bridgeObjectRelease();
  uint64_t v17 = *((void *)v12 + 9);
  *((void *)v11 + 8) = *((void *)v12 + 8);
  *((void *)v11 + 9) = v17;
  swift_bridgeObjectRelease();
  uint64_t v18 = *((void *)v12 + 11);
  *((void *)v11 + 10) = *((void *)v12 + 10);
  *((void *)v11 + 11) = v18;
  swift_bridgeObjectRelease();
  *((void *)v11 + 12) = *((void *)v12 + 12);
  v11[104] = v12[104];
  uint64_t v19 = *((void *)v12 + 15);
  *((void *)v11 + 14) = *((void *)v12 + 14);
  *((void *)v11 + 15) = v19;
  swift_bridgeObjectRelease();
  *((void *)v11 + 16) = *((void *)v12 + 16);
  *((_WORD *)v11 + 68) = *((_WORD *)v12 + 68);
  uint64_t v20 = *((void *)v12 + 19);
  *((void *)v11 + 18) = *((void *)v12 + 18);
  *((void *)v11 + 19) = v20;
  swift_bridgeObjectRelease();
  uint64_t v21 = *((void *)v12 + 21);
  *((void *)v11 + 20) = *((void *)v12 + 20);
  *((void *)v11 + 21) = v21;
  swift_bridgeObjectRelease();
  uint64_t v22 = *((void *)v12 + 23);
  *((void *)v11 + 22) = *((void *)v12 + 22);
  *((void *)v11 + 23) = v22;
  swift_bridgeObjectRelease();
  *((void *)v11 + 24) = *((void *)v12 + 24);
  *((_DWORD *)v11 + 50) = *((_DWORD *)v12 + 50);
  v11[204] = v12[204];
  *(_WORD *)(v11 + 205) = *(_WORD *)(v12 + 205);
  *((_OWORD *)v11 + 13) = *((_OWORD *)v12 + 13);
  *((void *)v11 + 28) = *((void *)v12 + 28);
  swift_bridgeObjectRelease();
  uint64_t v23 = *((void *)v12 + 30);
  *((void *)v11 + 29) = *((void *)v12 + 29);
  *((void *)v11 + 30) = v23;
  swift_bridgeObjectRelease();
  *((void *)v11 + 31) = *((void *)v12 + 31);
  swift_bridgeObjectRelease();
  uint64_t v24 = *((void *)v12 + 33);
  *((void *)v11 + 32) = *((void *)v12 + 32);
  *((void *)v11 + 33) = v24;
  swift_bridgeObjectRelease();
  *((_OWORD *)v11 + 17) = *((_OWORD *)v12 + 17);
  *((void *)v11 + 36) = *((void *)v12 + 36);
  swift_bridgeObjectRelease();
  uint64_t v25 = *((void *)v12 + 38);
  *((void *)v11 + 37) = *((void *)v12 + 37);
  *((void *)v11 + 38) = v25;
  swift_bridgeObjectRelease();
  *((void *)v11 + 39) = *((void *)v12 + 39);
  swift_bridgeObjectRelease();
  v11[320] = v12[320];
  uint64_t v26 = *((void *)v12 + 42);
  *((void *)v11 + 41) = *((void *)v12 + 41);
  *((void *)v11 + 42) = v26;
  swift_bridgeObjectRelease();
  uint64_t v27 = *((void *)v12 + 44);
  *((void *)v11 + 43) = *((void *)v12 + 43);
  *((void *)v11 + 44) = v27;
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  uint64_t v28 = a3[8];
  uint64_t v29 = (void *)((char *)a1 + v28);
  uint64_t v30 = (void *)((char *)a2 + v28);
  unint64_t v31 = *(void *)((char *)a1 + v28 + 8);
  if (v31 >> 60 != 15)
  {
    unint64_t v32 = v30[1];
    if (v32 >> 60 != 15)
    {
      uint64_t v33 = *v29;
      *uint64_t v29 = *v30;
      v29[1] = v32;
      sub_100013510(v33, v31);
      goto LABEL_6;
    }
    sub_1002DEBB4((uint64_t)v29);
  }
  *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
LABEL_6:
  uint64_t v34 = a3[9];
  uint64_t v35 = (void *)((char *)a1 + v34);
  uint64_t v36 = (void *)((char *)a2 + v34);
  uint64_t v38 = *v36;
  uint64_t v37 = v36[1];
  *uint64_t v35 = v38;
  v35[1] = v37;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1002DEF68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002DEF7C);
}

uint64_t sub_1002DEF7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_1002DF044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002DF058);
}

uint64_t sub_1002DF058(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for URL();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1002DF11C()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1002DF1E8()
{
  unint64_t result = qword_100660050;
  if (!qword_100660050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660050);
  }
  return result;
}

unint64_t sub_1002DF240()
{
  unint64_t result = qword_100660058;
  if (!qword_100660058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660058);
  }
  return result;
}

unint64_t sub_1002DF298()
{
  unint64_t result = qword_100660060;
  if (!qword_100660060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660060);
  }
  return result;
}

unint64_t sub_1002DF2F0()
{
  unint64_t result = qword_100660068;
  if (!qword_100660068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660068);
  }
  return result;
}

uint64_t sub_1002DF344(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1802396018 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6562616CLL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1002DF420(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_100660070);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_10018AC60(a1, v7);
  sub_1002DF808();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v9[15] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[14] = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  }
  sub_100014524((uint64_t)a1);
  return v7;
}

uint64_t sub_1002DF5C8(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_100660088);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[4];
  sub_10018AC60(a1, a1[3]);
  sub_1002DF8B0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100014524((uint64_t)a1);
  }
  else
  {
    v9[15] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[14] = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100014524((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_1002DF7B4()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x22) {
    return 34;
  }
  else {
    return v0;
  }
}

unint64_t sub_1002DF808()
{
  unint64_t result = qword_100660078;
  if (!qword_100660078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660078);
  }
  return result;
}

unint64_t sub_1002DF85C()
{
  unint64_t result = qword_100660080;
  if (!qword_100660080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660080);
  }
  return result;
}

unint64_t sub_1002DF8B0()
{
  unint64_t result = qword_100660090;
  if (!qword_100660090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660090);
  }
  return result;
}

ValueMetadata *type metadata accessor for AppStoreSubGenre.CodingKeys()
{
  return &type metadata for AppStoreSubGenre.CodingKeys;
}

unsigned char *_s28ManagedAppDistributionDaemon16SoftwarePlatformOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002DF9E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppStoreRating.CodingKeys()
{
  return &type metadata for AppStoreRating.CodingKeys;
}

unint64_t sub_1002DFA1C()
{
  unint64_t result = qword_100660098;
  if (!qword_100660098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660098);
  }
  return result;
}

unint64_t sub_1002DFA74()
{
  unint64_t result = qword_1006600A0;
  if (!qword_1006600A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006600A0);
  }
  return result;
}

unint64_t sub_1002DFACC()
{
  unint64_t result = qword_1006600A8;
  if (!qword_1006600A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006600A8);
  }
  return result;
}

unint64_t sub_1002DFB24()
{
  unint64_t result = qword_1006600B0;
  if (!qword_1006600B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006600B0);
  }
  return result;
}

unint64_t sub_1002DFB7C()
{
  unint64_t result = qword_1006600B8;
  if (!qword_1006600B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006600B8);
  }
  return result;
}

unint64_t sub_1002DFBD4()
{
  unint64_t result = qword_1006600C0;
  if (!qword_1006600C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006600C0);
  }
  return result;
}

void sub_1002DFC2C(int a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.metrics.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  int v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, (os_log_type_t)v9))
  {
    int v21 = v9;
    uint64_t v22 = v4;
    uint64_t v10 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    aBlock[0] = v20;
    *(_DWORD *)uint64_t v10 = 136446466;
    int v23 = a1;
    if ((_BYTE)a1)
    {
      if (a1 == 1) {
        uint64_t v11 = 0xD000000000000033;
      }
      else {
        uint64_t v11 = 0xD000000000000036;
      }
      if (a1 == 1) {
        unint64_t v12 = 0x80000001005BDA10;
      }
      else {
        unint64_t v12 = 0x80000001005BD9B0;
      }
    }
    else
    {
      uint64_t v11 = 0xD00000000000003ALL;
      unint64_t v12 = 0x80000001005BDA50;
    }
    uint64_t v24 = sub_1000143F4(v11, v12, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v13 = Dictionary.description.getter();
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    uint64_t v24 = sub_1000143F4(v13, v15, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, (os_log_type_t)v21, "Posting CA event for %{public}s: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v22);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a2;
  aBlock[4] = (uint64_t)sub_1002E0454;
  aBlock[5] = v17;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1002E0390;
  aBlock[3] = (uint64_t)&unk_100640640;
  uint64_t v18 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v18);
}

void sub_1002E0034(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_1000172F8(&qword_1006600D0);
    BOOL v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    BOOL v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v32 = v1 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(v1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(v1 + 64);
  uint64_t v6 = &v37;
  int64_t v31 = (unint64_t)(63 - v4) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  uint64_t v8 = (char *)&type metadata for Any + 8;
  while (1)
  {
    if (v5)
    {
      uint64_t v15 = (v5 - 1) & v5;
      unint64_t v16 = __clz(__rbit64(v5)) | (v7 << 6);
      int64_t v17 = v7;
    }
    else
    {
      int64_t v18 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        goto LABEL_36;
      }
      if (v18 >= v31)
      {
LABEL_33:
        sub_10024A370();
        return;
      }
      unint64_t v19 = *(void *)(v32 + 8 * v18);
      int64_t v17 = v7 + 1;
      if (!v19)
      {
        int64_t v17 = v7 + 2;
        if (v7 + 2 >= v31) {
          goto LABEL_33;
        }
        unint64_t v19 = *(void *)(v32 + 8 * v17);
        if (!v19)
        {
          int64_t v17 = v7 + 3;
          if (v7 + 3 >= v31) {
            goto LABEL_33;
          }
          unint64_t v19 = *(void *)(v32 + 8 * v17);
          if (!v19)
          {
            int64_t v17 = v7 + 4;
            if (v7 + 4 >= v31) {
              goto LABEL_33;
            }
            unint64_t v19 = *(void *)(v32 + 8 * v17);
            if (!v19)
            {
              int64_t v20 = v7 + 5;
              if (v7 + 5 >= v31) {
                goto LABEL_33;
              }
              unint64_t v19 = *(void *)(v32 + 8 * v20);
              if (!v19)
              {
                while (1)
                {
                  int64_t v17 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_37;
                  }
                  if (v17 >= v31) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = *(void *)(v32 + 8 * v17);
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }
              int64_t v17 = v7 + 5;
            }
          }
        }
      }
LABEL_26:
      uint64_t v15 = (v19 - 1) & v19;
      unint64_t v16 = __clz(__rbit64(v19)) + (v17 << 6);
    }
    int v21 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v16);
    uint64_t v23 = *v21;
    uint64_t v22 = v21[1];
    sub_1000144C8(*(void *)(v1 + 56) + 32 * v16, (uint64_t)v6);
    v36[0] = v23;
    v36[1] = v22;
    sub_1000144C8((uint64_t)v6, (uint64_t)v35);
    swift_bridgeObjectRetain_n();
    sub_1002E04A4((uint64_t)v36);
    sub_1002E0464();
    if (!swift_dynamicCast())
    {
      swift_bridgeObjectRelease();

      sub_10024A370();
      swift_release();
      return;
    }
    unint64_t v33 = v15;
    unint64_t v24 = sub_100016D20(v23, v22);
    unint64_t v25 = v24;
    if (v26)
    {
      int v9 = v6;
      uint64_t v10 = v1;
      uint64_t v11 = v8;
      unint64_t v12 = (uint64_t *)(v2[6] + 16 * v24);
      swift_bridgeObjectRelease();
      *unint64_t v12 = v23;
      v12[1] = v22;
      uint64_t v13 = v2[7];
      uint64_t v14 = 8 * v25;

      *(void *)(v13 + v14) = v34;
      uint64_t v8 = v11;
      uint64_t v1 = v10;
      uint64_t v6 = v9;
      goto LABEL_8;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v24;
    uint64_t v27 = (uint64_t *)(v2[6] + 16 * v24);
    *uint64_t v27 = v23;
    v27[1] = v22;
    *(void *)(v2[7] + 8 * v24) = v34;
    uint64_t v28 = v2[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_35;
    }
    v2[2] = v30;
LABEL_8:
    int64_t v7 = v17;
    unint64_t v5 = v33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
}

Class sub_1002E0390(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  if (v3)
  {
    sub_1002E0464();
    v4.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4.super.Class isa = 0;
  }

  return v4.super.isa;
}

uint64_t sub_1002E041C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1002E0454()
{
  sub_1002E0034(*(void *)(v0 + 16));
}

uint64_t sub_1002E045C()
{
  return swift_release();
}

unint64_t sub_1002E0464()
{
  unint64_t result = qword_1006600C8;
  if (!qword_1006600C8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1006600C8);
  }
  return result;
}

uint64_t sub_1002E04A4(uint64_t a1)
{
  uint64_t v2 = sub_1000172F8(&qword_1006600D8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002E0504(uint64_t a1, os_unfair_lock_s *a2)
{
  _StringGuts.grow(_:)(17);
  swift_retain();
  uint64_t v3 = sub_100311E74(2, a2);
  unint64_t v5 = v4;
  swift_release();
  if (v5) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = 0;
  }
  if (!v5) {
    unint64_t v5 = 0xE000000000000000;
  }
  unint64_t v7 = v5;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 58;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  swift_retain();
  uint64_t v9 = sub_100311E74(7, a2);
  unint64_t v11 = v10;
  swift_release();
  if (v11) {
    uint64_t v12 = v9;
  }
  else {
    uint64_t v12 = 0;
  }
  if (!v11) {
    unint64_t v11 = 0xE000000000000000;
  }
  unint64_t v13 = v11;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 58;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  swift_retain();
  uint64_t v15 = sub_100311E74(8, a2);
  unint64_t v17 = v16;
  swift_release();
  if (v17) {
    uint64_t v18 = v15;
  }
  else {
    uint64_t v18 = 0;
  }
  if (!v17) {
    unint64_t v17 = 0xE000000000000000;
  }
  unint64_t v19 = v17;
  String.append(_:)(*(Swift::String *)&v18);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 2108704;
  v20._object = (void *)0xE300000000000000;
  String.append(_:)(v20);
  swift_retain();
  uint64_t v21 = sub_100311E74(6, a2);
  unint64_t v23 = v22;
  swift_release();
  if (v23) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = 0;
  }
  if (!v23) {
    unint64_t v23 = 0xE000000000000000;
  }
  unint64_t v25 = v23;
  String.append(_:)(*(Swift::String *)&v24);
  swift_bridgeObjectRelease();
  v26._uint64_t countAndFlagsBits = 40;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  swift_retain();
  uint64_t v27 = sub_100311E74(3, a2);
  unint64_t v29 = v28;
  swift_release();
  if (v29) {
    uint64_t v30 = v27;
  }
  else {
    uint64_t v30 = 0;
  }
  if (v29) {
    unint64_t v31 = v29;
  }
  else {
    unint64_t v31 = 0xE000000000000000;
  }
  unint64_t v32 = v31;
  String.append(_:)(*(Swift::String *)&v30);
  swift_bridgeObjectRelease();
  v33._uint64_t countAndFlagsBits = 41;
  v33._object = (void *)0xE100000000000000;
  String.append(_:)(v33);
  return 0;
}

unint64_t sub_1002E06FC()
{
  uint64_t v1 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000172F8(&qword_1006600E0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A9C60;
  *(unsigned char *)(inited + 32) = 0;
  uint64_t v5 = *v0;
  uint64_t v6 = v0[1];
  *(void *)(inited + 64) = &type metadata for String;
  *(void *)(inited + 72) = &protocol witness table for String;
  *(void *)(inited + 80) = &protocol witness table for String;
  *(void *)(inited + 40) = v5;
  *(void *)(inited + 48) = v6;
  unint64_t v7 = (uint64_t *)(inited + 96);
  *(unsigned char *)(inited + 88) = 1;
  uint64_t updated = (int *)type metadata accessor for MarketplaceUpdateTemplate();
  sub_10001893C((uint64_t)v0 + updated[5], (uint64_t)v3);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v3, 1, v9) == 1)
  {
    swift_bridgeObjectRetain();
    sub_1002BDBEC((uint64_t)v3);
    *(_OWORD *)unint64_t v7 = 0u;
    *(_OWORD *)(inited + 112) = 0u;
    *(_OWORD *)(inited + 128) = 0u;
  }
  else
  {
    *(void *)(inited + 120) = v9;
    *(void *)(inited + 128) = sub_1002E0B34(&qword_10065CFD8);
    *(void *)(inited + 136) = sub_1002E0B34(&qword_10065CFE0);
    unint64_t v11 = sub_10019CE94(v7);
    (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 32))(v11, v3, v9);
    swift_bridgeObjectRetain();
  }
  *(unsigned char *)(inited + 144) = 2;
  uint64_t v12 = (uint64_t *)((char *)v0 + updated[6]);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  *(void *)(inited + 176) = &type metadata for String;
  *(void *)(inited + 184) = &protocol witness table for String;
  *(void *)(inited + 192) = &protocol witness table for String;
  *(void *)(inited + 152) = v13;
  *(void *)(inited + 160) = v14;
  *(unsigned char *)(inited + 200) = 3;
  uint64_t v15 = (uint64_t *)((char *)v0 + updated[7]);
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  *(void *)(inited + 232) = &type metadata for String;
  *(void *)(inited + 240) = &protocol witness table for String;
  *(void *)(inited + 248) = &protocol witness table for String;
  *(void *)(inited + 208) = v16;
  *(void *)(inited + 216) = v17;
  *(unsigned char *)(inited + 256) = 4;
  uint64_t v18 = (char *)v0 + updated[8];
  *(void *)(inited + 288) = v9;
  *(void *)(inited + 296) = sub_1002E0B34(&qword_10065CFD8);
  *(void *)(inited + 304) = sub_1002E0B34(&qword_10065CFE0);
  unint64_t v19 = sub_10019CE94((uint64_t *)(inited + 264));
  (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 16))(v19, v18, v9);
  *(unsigned char *)(inited + 312) = 5;
  Swift::String v20 = (uint64_t *)((char *)v0 + updated[9]);
  uint64_t v21 = v20[1];
  if (v21)
  {
    uint64_t v22 = *v20;
    unint64_t v23 = &protocol witness table for String;
    uint64_t v24 = &protocol witness table for String;
    unint64_t v25 = &type metadata for String;
  }
  else
  {
    uint64_t v22 = 0;
    unint64_t v25 = 0;
    uint64_t v24 = 0;
    unint64_t v23 = 0;
    *(void *)(inited + 336) = 0;
  }
  *(void *)(inited + 320) = v22;
  *(void *)(inited + 328) = v21;
  *(void *)(inited + 344) = v25;
  *(void *)(inited + 352) = v24;
  *(void *)(inited + 360) = v23;
  *(unsigned char *)(inited + 368) = 6;
  Swift::String v26 = (uint64_t *)((char *)v0 + updated[10]);
  uint64_t v27 = *v26;
  uint64_t v28 = v26[1];
  *(void *)(inited + 400) = &type metadata for String;
  *(void *)(inited + 408) = &protocol witness table for String;
  *(void *)(inited + 416) = &protocol witness table for String;
  *(void *)(inited + 376) = v27;
  *(void *)(inited + 384) = v28;
  *(unsigned char *)(inited + 424) = 7;
  unint64_t v29 = (uint64_t *)((char *)v0 + updated[11]);
  uint64_t v30 = *v29;
  uint64_t v31 = v29[1];
  *(void *)(inited + 456) = &type metadata for String;
  *(void *)(inited + 464) = &protocol witness table for String;
  *(void *)(inited + 472) = &protocol witness table for String;
  *(void *)(inited + 432) = v30;
  *(void *)(inited + 440) = v31;
  *(unsigned char *)(inited + 480) = 8;
  unint64_t v32 = (uint64_t *)((char *)v0 + updated[12]);
  uint64_t v33 = *v32;
  uint64_t v34 = v32[1];
  *(void *)(inited + 512) = &type metadata for String;
  *(void *)(inited + 520) = &protocol witness table for String;
  *(void *)(inited + 528) = &protocol witness table for String;
  *(void *)(inited + 488) = v33;
  *(void *)(inited + 496) = v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_10044BDD8(inited);
}

uint64_t type metadata accessor for MarketplaceUpdateTemplate()
{
  uint64_t result = qword_100660140;
  if (!qword_100660140) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002E0B34(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for URL();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_1002E0B78(uint64_t *a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = sub_1000172F8(&qword_10065C3C0);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = a3[6];
    uint64_t v17 = a3[7];
    uint64_t v18 = (uint64_t *)((char *)v4 + v16);
    unint64_t v19 = (uint64_t *)((char *)a2 + v16);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = (uint64_t *)((char *)v4 + v17);
    uint64_t v22 = (uint64_t *)((char *)a2 + v17);
    uint64_t v23 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = a3[8];
    unint64_t v25 = (char *)v4 + v24;
    Swift::String v26 = (char *)a2 + v24;
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v27(v25, v26, v11);
    uint64_t v28 = a3[9];
    uint64_t v29 = a3[10];
    uint64_t v30 = (uint64_t *)((char *)v4 + v28);
    uint64_t v31 = (uint64_t *)((char *)a2 + v28);
    uint64_t v32 = v31[1];
    *uint64_t v30 = *v31;
    v30[1] = v32;
    uint64_t v33 = (uint64_t *)((char *)v4 + v29);
    uint64_t v34 = (uint64_t *)((char *)a2 + v29);
    uint64_t v35 = v34[1];
    void *v33 = *v34;
    v33[1] = v35;
    uint64_t v36 = a3[11];
    uint64_t v37 = a3[12];
    uint64_t v38 = (uint64_t *)((char *)v4 + v36);
    uint64_t v39 = (uint64_t *)((char *)a2 + v36);
    uint64_t v40 = v39[1];
    *uint64_t v38 = *v39;
    v38[1] = v40;
    uint64_t v41 = (uint64_t *)((char *)v4 + v37);
    uint64_t v42 = (uint64_t *)((char *)a2 + v37);
    uint64_t v43 = v42[1];
    *uint64_t v41 = *v42;
    v41[1] = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1002E0DBC(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1 + *(int *)(a2 + 32), v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_1002E0F00(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = a3[6];
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)((char *)a1 + v14);
  uint64_t v17 = (void *)((char *)a2 + v14);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  unint64_t v19 = (void *)((char *)a1 + v15);
  uint64_t v20 = (void *)((char *)a2 + v15);
  uint64_t v21 = v20[1];
  *unint64_t v19 = *v20;
  v19[1] = v21;
  uint64_t v22 = a3[8];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  unint64_t v25 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v25(v23, v24, v10);
  uint64_t v26 = a3[9];
  uint64_t v27 = a3[10];
  uint64_t v28 = (void *)((char *)a1 + v26);
  uint64_t v29 = (void *)((char *)a2 + v26);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  uint64_t v31 = (void *)((char *)a1 + v27);
  uint64_t v32 = (void *)((char *)a2 + v27);
  uint64_t v33 = v32[1];
  *uint64_t v31 = *v32;
  v31[1] = v33;
  uint64_t v34 = a3[11];
  uint64_t v35 = a3[12];
  uint64_t v36 = (void *)((char *)a1 + v34);
  uint64_t v37 = (void *)((char *)a2 + v34);
  uint64_t v38 = v37[1];
  void *v36 = *v37;
  v36[1] = v38;
  uint64_t v39 = (void *)((char *)a1 + v35);
  uint64_t v40 = (void *)((char *)a2 + v35);
  uint64_t v41 = v40[1];
  *uint64_t v39 = *v40;
  v39[1] = v41;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_1002E10F4(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = *((void *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[7];
  unint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  *(void *)unint64_t v19 = *(void *)v20;
  *((void *)v19 + 1) = *((void *)v20 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(&a1[a3[8]], &a2[a3[8]], v9);
  uint64_t v21 = a3[9];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  *(void *)uint64_t v22 = *(void *)v23;
  *((void *)v22 + 1) = *((void *)v23 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[10];
  unint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  *(void *)unint64_t v25 = *(void *)v26;
  *((void *)v25 + 1) = *((void *)v26 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[11];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  *(void *)uint64_t v28 = *(void *)v29;
  *((void *)v28 + 1) = *((void *)v29 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[12];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  *(void *)uint64_t v31 = *(void *)v32;
  *((void *)v31 + 1) = *((void *)v32 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_1002E13C4(char *a1, char *a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
    int v12 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  }
  else
  {
    int v12 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v12(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_OWORD *)&a1[v13] = *(_OWORD *)&a2[v13];
  v12(&a1[a3[8]], &a2[a3[8]], v9);
  uint64_t v14 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  *(_OWORD *)&a1[v14] = *(_OWORD *)&a2[v14];
  uint64_t v15 = a3[12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  *(_OWORD *)&a1[v15] = *(_OWORD *)&a2[v15];
  return a1;
}

char *sub_1002E1554(char *a1, char *a2, int *a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = &a1[v7];
  uint64_t v9 = &a2[v7];
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  uint64_t v16 = a3[6];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v20 = *(void *)v18;
  uint64_t v19 = *((void *)v18 + 1);
  *(void *)uint64_t v17 = v20;
  *((void *)v17 + 1) = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[7];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v25 = *(void *)v23;
  uint64_t v24 = *((void *)v23 + 1);
  *(void *)uint64_t v22 = v25;
  *((void *)v22 + 1) = v24;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(&a1[a3[8]], &a2[a3[8]], v10);
  uint64_t v26 = a3[9];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  uint64_t v30 = *(void *)v28;
  uint64_t v29 = *((void *)v28 + 1);
  *(void *)uint64_t v27 = v30;
  *((void *)v27 + 1) = v29;
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[10];
  uint64_t v32 = &a1[v31];
  uint64_t v33 = &a2[v31];
  uint64_t v35 = *(void *)v33;
  uint64_t v34 = *((void *)v33 + 1);
  *(void *)uint64_t v32 = v35;
  *((void *)v32 + 1) = v34;
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[11];
  uint64_t v37 = &a1[v36];
  uint64_t v38 = &a2[v36];
  uint64_t v40 = *(void *)v38;
  uint64_t v39 = *((void *)v38 + 1);
  *(void *)uint64_t v37 = v40;
  *((void *)v37 + 1) = v39;
  swift_bridgeObjectRelease();
  uint64_t v41 = a3[12];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = &a2[v41];
  uint64_t v45 = *(void *)v43;
  uint64_t v44 = *((void *)v43 + 1);
  *(void *)uint64_t v42 = v45;
  *((void *)v42 + 1) = v44;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1002E17B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002E17C8);
}

uint64_t sub_1002E17C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1000172F8(&qword_10065C3C0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 20);
      int v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for URL();
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 32);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_1002E18F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002E190C);
}

uint64_t sub_1002E190C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_1000172F8(&qword_10065C3C0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 20);
      int v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for URL();
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 32);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_1002E1A3C()
{
  sub_10026B458();
  if (v0 <= 0x3F)
  {
    type metadata accessor for URL();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unint64_t sub_1002E1B28()
{
  unint64_t result = qword_100660198;
  if (!qword_100660198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660198);
  }
  return result;
}

uint64_t destroy for SetDistributorMetadataTask(id *a1)
{
  return swift_bridgeObjectRelease();
}

void *_s28ManagedAppDistributionDaemon26SetDistributorMetadataTaskVwCP_0(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  a1[2] = *(void *)(a2 + 16);
  id v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SetDistributorMetadataTask(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SetDistributorMetadataTask(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v5 = a2[2];
  *(void *)(a1 + 8) = a2[1];
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SetDistributorMetadataTask()
{
  return &type metadata for SetDistributorMetadataTask;
}

void sub_1002E1CB8(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
}

uint64_t sub_1002E1CC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[19] = a1;
  v3[20] = a3;
  uint64_t v4 = type metadata accessor for Logger();
  v3[21] = v4;
  v3[22] = *(void *)(v4 - 8);
  v3[23] = swift_task_alloc();
  v3[24] = swift_task_alloc();
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URL.DirectoryHint();
  v3[27] = v5;
  v3[28] = *(void *)(v5 - 8);
  v3[29] = swift_task_alloc();
  sub_1000172F8(&qword_10065C3C0);
  v3[30] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URL();
  v3[31] = v6;
  v3[32] = *(void *)(v6 - 8);
  v3[33] = swift_task_alloc();
  v3[34] = swift_task_alloc();
  v3[35] = swift_task_alloc();
  return _swift_task_switch(sub_1002E1EE0, 0, 0);
}

uint64_t sub_1002E1EE0()
{
  long long v194 = v0;
  id v1 = [self enumeratorWithOptions:192];
  v0[6] = sub_1002E3604;
  v0[7] = 0;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_1004E598C;
  v0[5] = &unk_100640700;
  uint64_t v174 = v0;
  uint64_t v2 = _Block_copy(v0 + 2);
  [v1 setFilter:v2];
  _Block_release(v2);
  id v168 = v1;
  id v3 = [v1 nextObject];
  if (v3)
  {
    id v4 = v3;
    int v160 = 0;
    uint64_t v5 = &_swiftEmptyDictionarySingleton;
    p_base_prots = &XPCClientRegistry.base_prots;
    while (1)
    {
      while (1)
      {
        id v7 = [v4 bundleIdentifier];
        if (!v7) {
          goto LABEL_5;
        }
        uint64_t v8 = v7;
        uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v11 = v10;

        id v12 = [v4 iTunesMetadata];
        id v13 = [v12 distributorInfo];

        id v14 = objc_msgSend(v13, (SEL)p_base_prots[457]);
        if (v14) {
          break;
        }
LABEL_4:
        swift_bridgeObjectRelease();
LABEL_5:

        id v4 = [v168 nextObject];
        if (!v4) {
          goto LABEL_29;
        }
      }
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v17 = v16;

      if ([v4 isManagedAppDistributor])
      {
        swift_bridgeObjectRelease();
        goto LABEL_4;
      }
      sub_10023C7B4((uint64_t)v160);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v193[0] = (uint64_t)v5;
      unint64_t v191 = sub_100016D20(v15, v17);
      uint64_t v19 = v5[2];
      char v190 = v20;
      BOOL v21 = (v20 & 1) == 0;
      uint64_t v22 = v19 + v21;
      if (__OFADD__(v19, v21)) {
        goto LABEL_98;
      }
      if (v5[3] >= v22)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10052C77C();
          uint64_t v5 = (void *)v193[0];
        }
        char v24 = v190;
      }
      else
      {
        sub_10052537C(v22, isUniquelyReferenced_nonNull_native);
        uint64_t v5 = (void *)v193[0];
        unint64_t v191 = sub_100016D20(v15, v17);
        char v24 = v190;
        if ((v190 & 1) != (v23 & 1)) {
          goto LABEL_94;
        }
      }
      swift_bridgeObjectRelease();
      if ((v24 & 1) == 0)
      {
        v5[(v191 >> 6) + 8] |= 1 << v191;
        uint64_t v25 = (uint64_t *)(v5[6] + 16 * v191);
        uint64_t *v25 = v15;
        v25[1] = v17;
        *(void *)(v5[7] + 8 * v191) = _swiftEmptyArrayStorage;
        uint64_t v26 = v5[2];
        uint64_t v27 = v26 + 1;
        BOOL v28 = __OFADD__(v26, 1);
        swift_bridgeObjectRetain();
        if (v28) {
          goto LABEL_99;
        }
        _OWORD v5[2] = v27;
      }
      uint64_t v29 = v5[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v30 = *(void **)(v29 + 8 * v191);
      char v31 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v29 + 8 * v191) = v30;
      if ((v31 & 1) == 0)
      {
        uint64_t v30 = sub_10028ED9C(0, v30[2] + 1, 1, v30);
        *(void *)(v29 + 8 * v191) = v30;
      }
      unint64_t v33 = v30[2];
      unint64_t v32 = v30[3];
      if (v33 >= v32 >> 1)
      {
        uint64_t v30 = sub_10028ED9C((void *)(v32 > 1), v33 + 1, 1, v30);
        *(void *)(v29 + 8 * v191) = v30;
      }
      v30[2] = v33 + 1;
      uint64_t v34 = &v30[2 * v33];
      void v34[4] = v9;
      v34[5] = v11;

      swift_bridgeObjectRelease();
      id v4 = [v168 nextObject];
      int v160 = sub_1002E1CB8;
      p_base_prots = (__objc2_prot_list **)(&XPCClientRegistry + 40);
      if (!v4) {
        goto LABEL_29;
      }
    }
  }
  int v160 = 0;
  uint64_t v5 = &_swiftEmptyDictionarySingleton;
LABEL_29:
  int64_t v35 = 0;
  uint64_t v36 = v174;
  long long v192 = (void **)(v174 + 10);
  uint64_t v176 = (void **)(v174 + 11);
  uint64_t v167 = v174[19];
  uint64_t v37 = v174[32];
  uint64_t v38 = v174[28];
  id v171 = (char *)(v5 + 8);
  uint64_t v39 = -1;
  uint64_t v40 = -1 << *((unsigned char *)v5 + 32);
  if (-v40 < 64) {
    uint64_t v39 = ~(-1 << -(char)v40);
  }
  unint64_t v41 = v39 & v5[8];
  int64_t v172 = (unint64_t)(63 - v40) >> 6;
  long long v188 = (void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32);
  long long v189 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56);
  uint64_t v185 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
  unsigned int v182 = enum case for URL.DirectoryHint.inferFromPath(_:);
  uint64_t v180 = (void (**)(uint64_t, uint64_t))(v38 + 8);
  uint64_t v181 = (void (**)(uint64_t, void, uint64_t))(v38 + 104);
  uint64_t v179 = (void (**)(uint64_t, uint64_t))(v37 + 8);
  uint64_t v173 = (void (**)(uint64_t, uint64_t))(v174[22] + 8);
  uint64_t v175 = v5;
  while (1)
  {
LABEL_33:
    if (v41)
    {
      unint64_t v42 = __clz(__rbit64(v41));
      v41 &= v41 - 1;
      unint64_t v43 = v42 | (v35 << 6);
      goto LABEL_46;
    }
    if (__OFADD__(v35++, 1)) {
      break;
    }
    if (v35 >= v172) {
      goto LABEL_90;
    }
    unint64_t v45 = *(void *)&v171[8 * v35];
    if (!v45)
    {
      int64_t v46 = v35 + 1;
      if (v35 + 1 >= v172) {
        goto LABEL_90;
      }
      unint64_t v45 = *(void *)&v171[8 * v46];
      if (!v45)
      {
        int64_t v46 = v35 + 2;
        if (v35 + 2 >= v172) {
          goto LABEL_90;
        }
        unint64_t v45 = *(void *)&v171[8 * v46];
        if (!v45)
        {
          int64_t v46 = v35 + 3;
          if (v35 + 3 >= v172)
          {
LABEL_90:
            swift_release();

            sub_10023C7B4((uint64_t)v160);
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            uint64_t v158 = (uint64_t (*)(void))v174[1];
            return v158();
          }
          unint64_t v45 = *(void *)&v171[8 * v46];
          if (!v45)
          {
            while (1)
            {
              int64_t v35 = v46 + 1;
              if (__OFADD__(v46, 1)) {
                break;
              }
              if (v35 >= v172) {
                goto LABEL_90;
              }
              unint64_t v45 = *(void *)&v171[8 * v35];
              ++v46;
              if (v45) {
                goto LABEL_45;
              }
            }
            __break(1u);
LABEL_98:
            __break(1u);
LABEL_99:
            __break(1u);
          }
        }
      }
      int64_t v35 = v46;
    }
LABEL_45:
    unint64_t v41 = (v45 - 1) & v45;
    unint64_t v43 = __clz(__rbit64(v45)) + (v35 << 6);
LABEL_46:
    long long v47 = (uint64_t *)(v5[6] + 16 * v43);
    uint64_t v49 = *v47;
    unint64_t v48 = v47[1];
    uint64_t v50 = *(void *)(v5[7] + 8 * v43);
    id v51 = objc_allocWithZone((Class)LSApplicationRecord);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    NSString v52 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    *uint64_t v176 = 0;
    id v53 = [v51 initWithBundleIdentifier:v52 allowPlaceholder:1 error:v176];

    id v54 = v53;
    long long v55 = *v176;
    if (!v54)
    {
      unint64_t v183 = v41;
      char v135 = (void *)v36[19];
      id v136 = v55;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      static Logger.daemon.getter();
      id v137 = v135;
      swift_bridgeObjectRetain();
      id v138 = v137;
      swift_bridgeObjectRetain();
      uint64_t v139 = Logger.logObject.getter();
      os_log_type_t v140 = static os_log_type_t.error.getter();
      BOOL v141 = os_log_type_enabled(v139, v140);
      uint64_t v142 = v36[24];
      uint64_t v143 = v36[21];
      uint64_t v144 = (void *)v36[19];
      if (v141)
      {
        uint64_t v145 = swift_slowAlloc();
        uint64_t v146 = (void *)swift_slowAlloc();
        v193[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v145 = 138412546;
        *(void *)(v145 + 4) = v144;
        *uint64_t v146 = v167;

        swift_bridgeObjectRelease();
        *(_WORD *)(v145 + 12) = 2082;
        swift_bridgeObjectRetain();
        *(void *)(v145 + 14) = sub_1000143F4(v49, v48, v193);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v139, v140, "[%@] Distributor with ID %{public}s not found, can't update installed app metadata.", (uint8_t *)v145, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v36 = v174;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
      }

      (*v173)(v142, v143);
      goto LABEL_83;
    }
    long long v56 = v54;
    id v57 = v55;
    uint64_t v178 = v56;
    id v58 = [v56 iTunesMetadata];
    id v59 = [v58 storeItemIdentifier];

    if (v59)
    {
      unint64_t v183 = v41;
      swift_bridgeObjectRelease();
      uint64_t v60 = *(void *)(v50 + 16);
      if (v60)
      {
        int64_t v177 = v35;
        uint64_t v61 = (unint64_t *)(v50 + 40);
        while (1)
        {
          uint64_t v63 = *(v61 - 1);
          unint64_t v64 = *v61;
          id v65 = objc_allocWithZone((Class)LSApplicationRecord);
          swift_bridgeObjectRetain_n();
          NSString v66 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          *long long v192 = 0;
          id v67 = [v65 initWithBundleIdentifier:v66 allowPlaceholder:1 error:v192];

          uint64_t v68 = *v192;
          if (v67) {
            break;
          }
          id v62 = v68;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_errorRelease();
LABEL_51:
          v61 += 2;
          if (!--v60)
          {
            swift_bridgeObjectRelease();

            uint64_t v5 = v175;
            int64_t v35 = v177;
            unint64_t v41 = v183;
            goto LABEL_33;
          }
        }
        id v69 = v68;
        id v70 = [v67 bundleContainerURL];
        if (v70)
        {
          uint64_t v71 = v70;
          uint64_t v186 = v63;
          uint64_t v72 = v36[34];
          uint64_t v74 = v36[30];
          uint64_t v73 = v36[31];
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          long long v75 = *v188;
          (*v188)(v74, v72, v73);
          (*v189)(v74, 0, 1, v73);
          if ((*v185)(v74, 1, v73) != 1)
          {
            uint64_t v76 = v36[29];
            uint64_t v77 = v36[27];
            v75(v36[35], v36[30], v36[31]);
            v36[8] = 0xD000000000000014;
            v36[9] = 0x80000001005BDA90;
            (*v181)(v76, v182, v77);
            sub_100017B14();
            URL.appending<A>(component:directoryHint:)();
            (*v180)(v76, v77);
            swift_bridgeObjectRelease();
            Swift::Bool v78 = URL.checkResourceIsReachable()();
            if (v80)
            {
              swift_errorRelease();
            }
            else if (v78)
            {
              URL._bridgeToObjectiveC()(v79);
              uint64_t v82 = v81;
              uint64_t v83 = self;
              v36[12] = 0;
              id v84 = [v83 metadataFromPlistAtURL:v82 error:v174 + 12];

              uint64_t v85 = (void *)v36[12];
              uint64_t v169 = v36[35];
              uint64_t v86 = v36[33];
              uint64_t v87 = v36[31];
              if (v84)
              {
                uint64_t v88 = *v179;
                id v89 = v85;
                v88(v86, v87);
                v88(v169, v87);
                id v90 = [v84 distributorInfo];
                if (v90)
                {
                  uint64_t v91 = v90;
                  id v92 = [v178 iTunesMetadata];
                  id v93 = [v92 distributorInfo];

                  id v94 = [v93 domain];
                  [v91 setMarketplaceDomain:v94];
                }
                id v95 = [v84 distributorInfo];
                uint64_t v36 = v174;
                if (v95)
                {
                  uint64_t v96 = v95;
                  id v97 = [v178 iTunesMetadata];
                  id v98 = [v97 storeItemIdentifier];

                  id v99 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedLongLong:v98];
                  [v96 setMarketplaceItemID:v99];
                }
                id v100 = objc_allocWithZone((Class)IXApplicationIdentity);
                swift_bridgeObjectRetain();
                NSString v101 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease();
                id v102 = [v100 initWithBundleID:v101];

                uint64_t v103 = self;
                v174[13] = 0;
                uint64_t v170 = v84;
                uint64_t v166 = v102;
                unsigned int v104 = [v103 updateiTunesMetadata:v84 forAppWithIdentity:v102 error:v174 + 13];
                uint64_t v105 = (void *)v174[13];
                uint64_t v106 = (void *)v174[19];
                if (v104)
                {
                  id v107 = v105;
                  static Logger.daemon.getter();
                  id v108 = v106;
                  swift_bridgeObjectRetain_n();
                  swift_bridgeObjectRetain();
                  id v109 = v108;
                  uint64_t v110 = Logger.logObject.getter();
                  os_log_type_t v111 = static os_log_type_t.default.getter();
                  BOOL v112 = os_log_type_enabled(v110, v111);
                  uint64_t v165 = v174[26];
                  uint64_t v113 = v174[21];
                  uint64_t v114 = (void *)v174[19];
                  if (v112)
                  {
                    os_log_type_t type = v111;
                    uint64_t v115 = swift_slowAlloc();
                    uint64_t v116 = (void *)swift_slowAlloc();
                    v193[0] = swift_slowAlloc();
                    *(_DWORD *)uint64_t v115 = 138412546;
                    v174[17] = v114;
                    id v117 = v114;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    void *v116 = v167;

                    swift_bridgeObjectRelease_n();
                    *(_WORD *)(v115 + 12) = 2082;
                    swift_bridgeObjectRetain();
                    v174[18] = sub_1000143F4(v186, v64, v193);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease_n();
                    _os_log_impl((void *)&_mh_execute_header, v110, type, "[%@] Updated distributor metadata for %{public}s.", (uint8_t *)v115, 0x16u);
                    sub_1000172F8(&qword_10065DB10);
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    swift_slowDealloc();
                  }
                  else
                  {

                    swift_bridgeObjectRelease_n();
                    swift_bridgeObjectRelease_n();
                  }

                  (*v173)(v165, v113);
                }
                else
                {
                  id v123 = v105;
                  _convertNSErrorToError(_:)();

                  swift_willThrow();
                  static Logger.daemon.getter();
                  id v124 = v106;
                  swift_bridgeObjectRetain();
                  swift_errorRetain();
                  swift_bridgeObjectRetain();
                  id v125 = v124;
                  swift_bridgeObjectRetain();
                  swift_errorRetain();
                  uint64_t v126 = Logger.logObject.getter();
                  os_log_type_t v127 = static os_log_type_t.error.getter();
                  BOOL v128 = os_log_type_enabled(v126, v127);
                  uint64_t v164 = v174[23];
                  uint64_t v129 = v174[21];
                  char v130 = (void *)v174[19];
                  if (v128)
                  {
                    os_log_type_t log = v127;
                    uint64_t v131 = swift_slowAlloc();
                    char v132 = (void *)swift_slowAlloc();
                    uint64_t v163 = v129;
                    v193[0] = swift_slowAlloc();
                    *(_DWORD *)uint64_t v131 = 138412802;
                    v174[14] = v130;
                    id v133 = v130;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    void *v132 = v167;

                    swift_bridgeObjectRelease_n();
                    *(_WORD *)(v131 + 12) = 2082;
                    swift_bridgeObjectRetain();
                    v174[15] = sub_1000143F4(v186, v64, v193);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease_n();
                    *(_WORD *)(v131 + 22) = 2114;
                    swift_errorRetain();
                    uint64_t v134 = _swift_stdlib_bridgeErrorToNSError();
                    v174[16] = v134;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    v132[1] = v134;
                    swift_errorRelease();
                    swift_errorRelease();
                    _os_log_impl((void *)&_mh_execute_header, v126, log, "[%@] Failed to update distributor metadata for %{public}s: %{public}@", (uint8_t *)v131, 0x20u);
                    sub_1000172F8(&qword_10065DB10);
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    swift_slowDealloc();

                    swift_errorRelease();
                    (*v173)(v164, v163);
                  }
                  else
                  {

                    swift_errorRelease();
                    swift_bridgeObjectRelease_n();
                    swift_bridgeObjectRelease_n();
                    swift_errorRelease();
                    swift_errorRelease();

                    (*v173)(v164, v129);
                  }
                }
              }
              else
              {
                id v121 = v85;
                _convertNSErrorToError(_:)();

                swift_willThrow();
                swift_errorRelease();
                uint64_t v122 = *v179;
                (*v179)(v86, v87);
                v122(v169, v87);

                swift_bridgeObjectRelease();
                uint64_t v36 = v174;
              }
              goto LABEL_51;
            }
            uint64_t v118 = v36[35];
            uint64_t v119 = v36[31];
            int v120 = *v179;
            (*v179)(v36[33], v119);
            v120(v118, v119);
            goto LABEL_70;
          }
        }
        else
        {
          (*v189)(v36[30], 1, 1, v36[31]);
        }
        sub_1002BDBEC(v36[30]);
LABEL_70:

        swift_bridgeObjectRelease();
        goto LABEL_51;
      }
      swift_bridgeObjectRelease();

LABEL_83:
      unint64_t v41 = v183;
      uint64_t v5 = v175;
    }
    else
    {
      uint64_t v147 = (void *)v36[19];
      swift_bridgeObjectRelease();
      static Logger.daemon.getter();
      id v148 = v147;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      id v149 = v148;
      char v150 = Logger.logObject.getter();
      uint64_t v151 = static os_log_type_t.error.getter();
      BOOL v152 = os_log_type_enabled(v150, (os_log_type_t)v151);
      uint64_t v153 = v36[25];
      uint64_t v154 = v36[21];
      uint64_t v155 = (void *)v36[19];
      if (v152)
      {
        unint64_t v184 = v41;
        uint64_t v156 = swift_slowAlloc();
        uint64_t v187 = v154;
        uint64_t v157 = (void *)swift_slowAlloc();
        v193[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v156 = 138412546;
        *(void *)(v156 + 4) = v155;
        *uint64_t v157 = v167;
        swift_bridgeObjectRelease_n();

        *(_WORD *)(v156 + 12) = 2082;
        swift_bridgeObjectRetain();
        *(void *)(v156 + 14) = sub_1000143F4(v49, v48, v193);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v150, (os_log_type_t)v151, "[%@] Distributor with ID %{public}s not installed from the web, can't update installed app metadata.", (uint8_t *)v156, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        unint64_t v41 = v184;
        swift_slowDealloc();

        (*v173)(v153, v187);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();

        (*v173)(v153, v154);
      }
      uint64_t v36 = v174;
      uint64_t v5 = v175;
    }
  }
  __break(1u);
LABEL_94:
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_1002E3604(void *a1)
{
  id v2 = [a1 iTunesMetadata];
  id v3 = [v2 distributorInfo];

  id v4 = [v3 distributorID];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  if (v5 == 0xD000000000000012 && v7 == 0x80000001005B75E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v5 == 0xD000000000000014 && v7 == 0x80000001005B8C80)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = 0;
  if ((v9 & 1) == 0)
  {
    id v10 = [a1 iTunesMetadata];
    id v11 = [v10 distributorInfo];

    id v12 = [v11 marketplaceDomain];
    if (!v12) {
      return 1;
    }

    id v13 = [a1 iTunesMetadata];
    id v14 = [v13 distributorInfo];

    id v15 = [v14 marketplaceItemID];
    if (!v15) {
      return 1;
    }

    return 0;
  }
  return result;
}

uint64_t sub_1002E3810()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1002E3840()
{
  uint64_t v2 = *v0;
  uint64_t v3 = v0[2];
  id v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *id v4 = v1;
  v4[1] = sub_10000B238;
  return sub_1002E1CC8(v2, v5, v3);
}

uint64_t sub_1002E38DC()
{
  return swift_release();
}

uint64_t sub_1002E38E4(uint64_t a1)
{
  v2[78] = v1;
  v2[77] = a1;
  v2[79] = type metadata accessor for EnsureAllowedDeveloperTask();
  v2[80] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for FeatureFlag();
  v2[81] = v3;
  v2[82] = *(void *)(v3 - 8);
  v2[83] = swift_task_alloc();
  sub_1000172F8(&qword_10065C3C0);
  v2[84] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for AppInstallRequestType();
  v2[85] = v4;
  v2[86] = *(void *)(v4 - 8);
  v2[87] = swift_task_alloc();
  v2[88] = swift_task_alloc();
  v2[89] = swift_task_alloc();
  v2[90] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MediaAPIMetadata();
  v2[91] = v5;
  v2[92] = *(void *)(v5 - 8);
  v2[93] = swift_task_alloc();
  v2[94] = swift_task_alloc();
  sub_1000172F8(&qword_10065B810);
  v2[95] = swift_task_alloc();
  v2[96] = swift_task_alloc();
  v2[97] = swift_task_alloc();
  return _swift_task_switch(sub_1002E3B44, 0, 0);
}

uint64_t sub_1002E3B44()
{
  uint64_t v1 = *(void *)(v0 + 776);
  uint64_t v2 = *(void *)(v0 + 736);
  uint64_t v3 = *(void *)(v0 + 728);
  uint64_t v4 = *(uint64_t **)(v0 + 624);
  uint64_t v5 = *v4;
  uint64_t v6 = *(void **)(*v4 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_logKey);
  *(void *)(v0 + 784) = v6;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56);
  *(void *)(v0 + 792) = v7;
  *(void *)(v0 + 800) = (v2 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v7(v1, 1, 1, v3);
  uint64_t v8 = v4[3];
  uint64_t v9 = v4[4];
  uint64_t v10 = *(void *)(v5 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage);
  uint64_t v11 = v10 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v10 + 16);
  id v12 = (os_unfair_lock_s *)(v10 + ((*(unsigned int *)(*(void *)v10 + 48) + 3) & 0x1FFFFFFFCLL));
  id v13 = v6;
  os_unfair_lock_lock(v12);
  sub_1002BDC4C(v11, v0 + 304);
  os_unfair_lock_unlock(v12);
  *(void *)(v0 + 16) = v8;
  *(void *)(v0 + 24) = v9;
  *(unsigned char *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = v13;
  sub_10018B164((long long *)(v0 + 304), v0 + 48);
  id v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 808) = v14;
  *id v14 = v0;
  v14[1] = sub_1002E3D0C;
  uint64_t v15 = *(void *)(v0 + 768);
  return sub_100273008(v15);
}

uint64_t sub_1002E3D0C()
{
  *(void *)(*(void *)v1 + 816) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1002E5C34;
  }
  else {
    uint64_t v2 = sub_1002E3E20;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_1002E3E20()
{
  id v168 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[99];
  uint64_t v3 = v0[97];
  uint64_t v4 = v0[96];
  uint64_t v5 = v0[95];
  uint64_t v6 = v0[92];
  uint64_t v7 = v0[91];
  sub_10019CB0C((uint64_t)(v0 + 2));
  sub_10001729C(v3, &qword_10065B810);
  v2(v4, 0, 1, v7);
  sub_1002E6AD8(v4, v3);
  sub_100017238(v3, v5, &qword_10065B810);
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v5, 1, v7);
  uint64_t v9 = v0[95];
  if (v8 == 1)
  {
    sub_10001729C(v9, &qword_10065B810);
    if (qword_10065B0E0 != -1) {
      swift_once();
    }
    uint64_t v10 = (void *)v0[98];
    uint64_t v11 = type metadata accessor for Logger();
    sub_10000E6AC(v11, (uint64_t)qword_1006601D0);
    id v12 = v10;
    id v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    BOOL v15 = os_log_type_enabled(v13, v14);
    uint64_t v16 = (void *)v1[98];
    if (v15)
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 138412290;
      v1[69] = v16;
      uint64_t v19 = v1;
      id v20 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v18 = v16;

      uint64_t v1 = v19;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "[%@] No metadata available", v17, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      BOOL v21 = v19[98];
    }
    else
    {

      BOOL v21 = v1[98];
      id v13 = v21;
    }

    type metadata accessor for InternalError();
    sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    goto LABEL_21;
  }
  uint64_t v22 = v0[94];
  uint64_t v23 = v0[91];
  sub_10019C950(v9, v1[94]);
  uint64_t v24 = *(void *)(v22 + *(int *)(v23 + 48));
  id v25 = [self sharedConnection];
  if (!v25)
  {
    __break(1u);
    return;
  }
  uint64_t v26 = v25;
  id v27 = [v25 effectiveValueForSetting:MCFeatureMaximumAppsRating];

  if (v27)
  {
    id v28 = [v27 integerValue];

    if ((uint64_t)v28 < v24)
    {
LABEL_9:
      if (qword_10065B0E0 != -1) {
        swift_once();
      }
      uint64_t v29 = (void *)v1[98];
      uint64_t v30 = type metadata accessor for Logger();
      sub_10000E6AC(v30, (uint64_t)qword_1006601D0);
      id v31 = v29;
      unint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.error.getter();
      BOOL v34 = os_log_type_enabled(v32, v33);
      int64_t v35 = (void *)v1[98];
      if (v34)
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        uint64_t v37 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v36 = 138412290;
        v1[76] = v35;
        uint64_t v38 = v1;
        id v39 = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v37 = v35;

        uint64_t v1 = v38;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "[%@] Rating above max allowed rating.", v36, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        uint64_t v40 = v38[98];
      }
      else
      {

        uint64_t v40 = v1[98];
        unint64_t v32 = v40;
      }
      uint64_t v45 = v1[94];

      type metadata accessor for InternalError();
      sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      goto LABEL_20;
    }
  }
  else if (v24 > 1000)
  {
    goto LABEL_9;
  }
  uint64_t v41 = v1[102];
  uint64_t v42 = *(void *)(*(void *)v1[78]
                  + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage);
  uint64_t v43 = v42 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v42 + 16);
  uint64_t v44 = (os_unfair_lock_s *)(v42 + ((*(unsigned int *)(*(void *)v42 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v44);
  sub_1002BDC4C(v43, (uint64_t)(v1 + 43));
  os_unfair_lock_unlock(v44);
  if (v41) {
    return;
  }
  sub_1000172F8(&qword_10065C450);
  if (!swift_dynamicCast())
  {

    sub_10001729C(v1[97], &qword_10065B810);
    goto LABEL_36;
  }
  uint64_t v47 = v1[90];
  unint64_t v48 = (void *)v1[78];
  swift_bridgeObjectRelease();
  uint64_t v49 = *(void *)(*v48 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage);
  uint64_t v50 = v49 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v49 + 16);
  id v51 = (os_unfair_lock_s *)(v49 + ((*(unsigned int *)(*(void *)v49 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v51);
  sub_1002BDDD0(v50, v47);
  os_unfair_lock_unlock(v51);
  NSString v52 = v1;
  uint64_t v164 = v1 + 66;
  uint64_t v53 = v1[90];
  uint64_t v54 = v1[86];
  uint64_t v55 = v52[85];
  char v56 = AppInstallRequestType.isUpdate.getter();
  uint64_t v166 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
  v166(v53, v55);
  if (v56) {
    goto LABEL_27;
  }
  uint64_t v74 = v52[89];
  uint64_t v75 = *(void *)(*(void *)v52[78]
                  + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage);
  uint64_t v76 = v75 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v75 + 16);
  uint64_t v77 = (os_unfair_lock_s *)(v75 + ((*(unsigned int *)(*(void *)v75 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v77);
  sub_1002BDDD0(v76, v74);
  os_unfair_lock_unlock(v77);
  uint64_t v78 = v52[89];
  uint64_t v79 = v52[85];
  LOBYTE(v76) = AppInstallRequestType.isRestore.getter();
  v166(v78, v79);
  if (v76)
  {
LABEL_27:
    id v57 = v52;
    uint64_t v58 = sub_1004D0418();
    if (!v59)
    {
      if (qword_10065B0E0 != -1) {
        swift_once();
      }
      uint64_t v1 = v52;
      id v98 = (void *)v52[98];
      uint64_t v99 = type metadata accessor for Logger();
      sub_10000E6AC(v99, (uint64_t)qword_1006601D0);
      id v100 = v98;
      NSString v101 = Logger.logObject.getter();
      os_log_type_t v102 = static os_log_type_t.error.getter();
      BOOL v103 = os_log_type_enabled(v101, v102);
      unsigned int v104 = (void *)v52[98];
      if (v103)
      {
        uint64_t v105 = (uint8_t *)swift_slowAlloc();
        uint64_t v106 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v105 = 138412290;
        v57[75] = v104;
        id v107 = v104;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v106 = v104;

        uint64_t v1 = v57;
        _os_log_impl((void *)&_mh_execute_header, v101, v102, "[%@] The domain is invalid for distribution.", v105, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        uint64_t v40 = v57[98];
LABEL_61:
        uint64_t v45 = v1[94];

        uint64_t v127 = type metadata accessor for MarketplaceKitError();
        sub_100013B94((unint64_t *)&qword_10065B538, (void (*)(uint64_t))&type metadata accessor for MarketplaceKitError);
        swift_allocError();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v127 - 8) + 104))(v128, enum case for MarketplaceKitError.invalidAlternativeDistributionPackageURL(_:), v127);
LABEL_20:
        swift_willThrow();

        sub_1002E6BA4(v45, (uint64_t (*)(void))type metadata accessor for MediaAPIMetadata);
LABEL_21:
        sub_10001729C(v1[97], &qword_10065B810);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        int64_t v46 = (void (*)(void))v1[1];
LABEL_22:
        v46();
        return;
      }
LABEL_60:

      uint64_t v40 = v1[98];
      NSString v101 = v40;
      goto LABEL_61;
    }
    uint64_t v60 = v58;
    unint64_t v61 = v59;
  }
  else
  {
    uint64_t v80 = v52[84];
    sub_100017238(*(void *)v52[78] + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_referrer, v80, &qword_10065C3C0);
    uint64_t v81 = type metadata accessor for URL();
    uint64_t v82 = *(void *)(v81 - 8);
    int v83 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81);
    id v57 = v52;
    uint64_t v84 = v52[84];
    if (v83 == 1)
    {
      sub_10001729C(v52[84], &qword_10065C3C0);
      goto LABEL_56;
    }
    uint64_t v60 = sub_1004D0418();
    unint64_t v118 = v117;
    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v84, v81);
    if (!v118)
    {
LABEL_56:
      if (qword_10065B0E0 != -1) {
        swift_once();
      }
      uint64_t v1 = v57;
      uint64_t v119 = (void *)v57[98];
      uint64_t v120 = type metadata accessor for Logger();
      sub_10000E6AC(v120, (uint64_t)qword_1006601D0);
      id v121 = v119;
      NSString v101 = Logger.logObject.getter();
      os_log_type_t v122 = static os_log_type_t.error.getter();
      BOOL v123 = os_log_type_enabled(v101, v122);
      unsigned int v104 = (void *)v57[98];
      if (v123)
      {
        id v124 = (uint8_t *)swift_slowAlloc();
        id v125 = (void *)swift_slowAlloc();
        *(_DWORD *)id v124 = 138412290;
        v57[65] = v104;
        id v126 = v104;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v125 = v104;

        _os_log_impl((void *)&_mh_execute_header, v101, v122, "[%@] Required referrer not found, failing.", v124, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        uint64_t v40 = v57[98];
        goto LABEL_61;
      }
      goto LABEL_60;
    }
    unint64_t v61 = v118;
  }
  id v62 = v57;
  uint64_t v63 = *(void **)(v57[94] + *(int *)(v57[91] + 60));
  if (!v63 || (sub_10054E494(v60, v61, v63) & 1) == 0)
  {
    uint64_t v85 = v57[78];
    uint64_t v86 = *(void *)(v85 + 8);
    unint64_t v87 = *(void *)(v85 + 16);
    uint64_t v88 = qword_10065B0E0;
    swift_bridgeObjectRetain();
    if (v88 != -1) {
      swift_once();
    }
    id v89 = (void *)v62[98];
    uint64_t v90 = type metadata accessor for Logger();
    sub_10000E6AC(v90, (uint64_t)qword_1006601D0);
    id v91 = v89;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v92 = Logger.logObject.getter();
    os_log_type_t v93 = static os_log_type_t.error.getter();
    BOOL v94 = os_log_type_enabled(v92, v93);
    id v95 = (void *)v62[98];
    if (v94)
    {
      uint64_t v96 = swift_slowAlloc();
      uint64_t v158 = (void *)swift_slowAlloc();
      v167[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v96 = 138412802;
      *uint64_t v164 = v95;
      os_log_type_t log = v92;
      id v97 = v95;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v158 = v95;

      *(_WORD *)(v96 + 12) = 2082;
      swift_bridgeObjectRetain();
      v62[67] = sub_1000143F4(v60, v61, v167);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v96 + 22) = 2082;
      swift_bridgeObjectRetain();
      v62[68] = sub_1000143F4(v86, v87, v167);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      id v92 = log;
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    id v108 = (void *)v62[98];
    uint64_t v109 = v62[94];
    uint64_t v110 = type metadata accessor for MarketplaceKitError();
    sub_100013B94((unint64_t *)&qword_10065B538, (void (*)(uint64_t))&type metadata accessor for MarketplaceKitError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v110 - 8) + 104))(v111, enum case for MarketplaceKitError.featureUnavailable(_:), v110);
    swift_willThrow();

    sub_1002E6BA4(v109, (uint64_t (*)(void))type metadata accessor for MediaAPIMetadata);
    uint64_t v1 = v62;
    goto LABEL_21;
  }
  uint64_t v163 = v60;
  unint64_t v64 = v57;
  uint64_t v65 = v57[83];
  uint64_t v66 = v57[82];
  uint64_t v67 = v62[81];
  *((_DWORD *)v62 + 39) = enum case for FeatureFlag.newInstallSheetFlow(_:);
  uint64_t v68 = *(void (**)(uint64_t))(v66 + 104);
  v62[103] = v68;
  v62[104] = (v66 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v68(v65);
  char v69 = isFeatureEnabled(_:)();
  id v70 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
  v62[105] = v70;
  v62[106] = (v66 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v70(v65, v67);
  uint64_t v71 = v62[94];
  if (v69)
  {
    if ((*(unsigned char *)(v71 + *(int *)(v62[91] + 32)) & 1) != 0 || (uint64_t v72 = v62[78], *(unsigned char *)(v72 + 41) == 1))
    {
      uint64_t v73 = (void *)v62[98];
      sub_10001729C(v62[97], &qword_10065B810);

      swift_bridgeObjectRelease();
      uint64_t v1 = v62;
LABEL_36:
      sub_10019C950(v1[94], v1[77]);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      int64_t v46 = (void (*)(void))v1[1];
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v72 = v62[78];
  }
  unint64_t v159 = v61;
  BOOL v112 = v62 + 52;
  sub_1002E6B40(v71, v62[93]);
  *(void *)os_log_type_t type = *(void *)v72;
  uint64_t v113 = *(void *)v72 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_bag;
  uint64_t v114 = *(void *)v113;
  unint64_t v165 = 0xD000000000000016;
  if (*(void *)(*(void *)v113 + 16))
  {
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    unint64_t v115 = sub_100016D20(0xD00000000000002ELL, 0x80000001005BA6F0);
    if (v116)
    {
      sub_1000144C8(*(void *)(v114 + 56) + 32 * v115, (uint64_t)(v64 + 52));
    }
    else
    {
      *BOOL v112 = 0u;
      *((_OWORD *)v64 + 27) = 0u;
    }
  }
  else
  {
    *BOOL v112 = 0u;
    *((_OWORD *)v64 + 27) = 0u;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  sub_1000172F8((uint64_t *)&unk_10065C9C0);
  if ((swift_dynamicCast() & 1) != 0 && v62[60])
  {
    unint64_t v129 = v62[60];
    unint64_t v160 = v62[59];
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v130 = v129;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v130 = 0x80000001005B8D50;
    unint64_t v160 = 0xD000000000000016;
  }
  uint64_t v131 = v62 + 48;
  uint64_t v132 = *(void *)v113;
  if (*(void *)(*(void *)v113 + 16))
  {
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    unint64_t v133 = sub_100016D20(0xD000000000000030, 0x80000001005BA720);
    if (v134)
    {
      sub_1000144C8(*(void *)(v132 + 56) + 32 * v133, (uint64_t)(v62 + 48));
    }
    else
    {
      *uint64_t v131 = 0u;
      *((_OWORD *)v62 + 25) = 0u;
    }
  }
  else
  {
    *uint64_t v131 = 0u;
    *((_OWORD *)v62 + 25) = 0u;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }
  if ((swift_dynamicCast() & 1) != 0 && (unint64_t v135 = v62[62]) != 0)
  {
    unint64_t v165 = v62[61];
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v135 = 0x80000001005B8D50;
  }
  uint64_t v136 = *(void *)(*(void *)type
                   + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_approvedDeveloperStore);
  int v137 = *(unsigned __int8 *)(*(void *)type
                            + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_userInitiatedOverride);
  if (v137 == 2)
  {
    uint64_t v138 = v62[88];
    uint64_t v139 = *(void *)(*(void *)type
                     + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage);
    uint64_t v140 = v139 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v139 + 16);
    BOOL v141 = (os_unfair_lock_s *)(v139 + ((*(unsigned int *)(*(void *)v139 + 48) + 3) & 0x1FFFFFFFCLL));
    swift_retain();
    os_unfair_lock_lock(v141);
    sub_1002BDDD0(v140, v138);
    os_unfair_lock_unlock(v141);
    uint64_t v142 = v62[88];
    uint64_t v143 = v62[85];
    char v144 = AppInstallRequestType.isUserInitiated.getter();
    v166(v142, v143);
  }
  else
  {
    char v144 = v137 & 1;
    swift_retain();
  }
  uint64_t v145 = v62;
  uint64_t v146 = (void *)v62[98];
  uint64_t v147 = v62[93];
  uint64_t v148 = v62[80];
  uint64_t v149 = *(void *)v62[78];
  uint64_t v150 = *(void *)(v149 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_localizer);
  uint64_t v151 = (int *)v145[79];
  char v152 = *(unsigned char *)(v149 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_device + 108);
  sub_10019C950(v147, v148);
  uint64_t v153 = (uint64_t *)(v148 + v151[5]);
  *uint64_t v153 = v163;
  v153[1] = v159;
  uint64_t v154 = (unint64_t *)(v148 + v151[6]);
  *uint64_t v154 = v160;
  v154[1] = v130;
  uint64_t v155 = (unint64_t *)(v148 + v151[7]);
  *uint64_t v155 = v165;
  v155[1] = v135;
  *(void *)(v148 + v151[8]) = v136;
  *(unsigned char *)(v148 + v151[9]) = v144 & 1;
  *(void *)(v148 + v151[10]) = v146;
  *(void *)(v148 + v151[11]) = v150;
  *(unsigned char *)(v148 + v151[12]) = v152;
  id v156 = v146;
  swift_retain();
  uint64_t v157 = (void *)swift_task_alloc();
  v145[107] = v157;
  *uint64_t v157 = v145;
  v157[1] = sub_1002E5478;
  sub_100423DD0();
}

uint64_t sub_1002E5478(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 864) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1002E691C;
  }
  else
  {
    *(unsigned char *)(v4 + 153) = a1;
    uint64_t v5 = sub_1002E55A0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1002E55A0()
{
  if (*(unsigned char *)(v0 + 153))
  {
    uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0 + 840);
    uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 824);
    uint64_t v5 = *(unsigned int *)(v0 + 156);
    uint64_t v6 = *(void *)(v0 + 664);
    uint64_t v7 = *(void *)(v0 + 648);
    *(unsigned char *)(*(void *)(v0 + 624) + 40) = 1;
    v4(v6, v5, v7);
    char v8 = isFeatureEnabled(_:)();
    v3(v6, v7);
    if (v8)
    {
      if (qword_10065B0E0 != -1) {
        swift_once();
      }
      uint64_t v9 = *(void **)(v0 + 784);
      uint64_t v10 = type metadata accessor for Logger();
      sub_10000E6AC(v10, (uint64_t)qword_1006601D0);
      id v11 = v9;
      id v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.error.getter();
      BOOL v14 = os_log_type_enabled(v12, v13);
      BOOL v15 = *(void **)(v0 + 784);
      if (v14)
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        uint64_t v36 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 138412290;
        *(void *)(v0 + 592) = v15;
        id v17 = v15;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v36 = v15;

        _os_log_impl((void *)&_mh_execute_header, v12, v13, "[%@] Developer not allowed, waiting for developer approval.", v16, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        uint64_t v18 = *(NSObject **)(v0 + 784);
      }
      else
      {

        uint64_t v18 = *(NSObject **)(v0 + 784);
        id v12 = v18;
      }
      uint64_t v29 = *(void *)(v0 + 752);
      uint64_t v30 = *(void *)(v0 + 640);

      type metadata accessor for InternalError();
      sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
      swift_allocError();
      uint64_t v31 = *(void *)(v29 + 40);
      *unint64_t v32 = *(void *)(v29 + 32);
      v32[1] = v31;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
    }
    else
    {
      if (qword_10065B0E0 != -1) {
        swift_once();
      }
      uint64_t v19 = *(void **)(v0 + 784);
      uint64_t v20 = type metadata accessor for Logger();
      sub_10000E6AC(v20, (uint64_t)qword_1006601D0);
      id v21 = v19;
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.error.getter();
      BOOL v24 = os_log_type_enabled(v22, v23);
      id v25 = *(void **)(v0 + 784);
      if (v24)
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        id v27 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v26 = 138412290;
        *(void *)(v0 + 584) = v25;
        id v28 = v25;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v27 = v25;

        _os_log_impl((void *)&_mh_execute_header, v22, v23, "[%@] Developer not allowed, failing.", v26, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        uint64_t v18 = *(NSObject **)(v0 + 784);
      }
      else
      {

        uint64_t v18 = *(NSObject **)(v0 + 784);
        uint64_t v22 = v18;
      }
      uint64_t v29 = *(void *)(v0 + 752);
      uint64_t v30 = *(void *)(v0 + 640);

      uint64_t v33 = type metadata accessor for MarketplaceKitError();
      sub_100013B94((unint64_t *)&qword_10065B538, (void (*)(uint64_t))&type metadata accessor for MarketplaceKitError);
      swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v33 - 8) + 104))(v34, enum case for MarketplaceKitError.cancelled(_:), v33);
    }
    swift_willThrow();

    sub_1002E6BA4(v30, (uint64_t (*)(void))type metadata accessor for EnsureAllowedDeveloperTask);
    sub_1002E6BA4(v29, (uint64_t (*)(void))type metadata accessor for MediaAPIMetadata);
    sub_10001729C(*(void *)(v0 + 776), &qword_10065B810);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    uint64_t v1 = *(void *)(v0 + 640);

    sub_1002E6BA4(v1, (uint64_t (*)(void))type metadata accessor for EnsureAllowedDeveloperTask);
    sub_10001729C(*(void *)(v0 + 776), &qword_10065B810);
    sub_10019C950(*(void *)(v0 + 752), *(void *)(v0 + 616));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v2();
}

uint64_t sub_1002E5C34()
{
  uint64_t v31 = v0;
  sub_10019CB0C(v0 + 16);
  if (qword_10065B0E0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 784);
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000E6AC(v2, (uint64_t)qword_1006601D0);
  id v3 = v1;
  swift_errorRetain();
  id v4 = v3;
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  char v8 = *(void **)(v0 + 784);
  if (v7)
  {
    os_log_type_t log = v5;
    uint64_t v9 = swift_slowAlloc();
    os_log_type_t type = v6;
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138412546;
    *(void *)(v0 + 576) = v8;
    id v11 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v10 = v8;

    *(_WORD *)(v9 + 12) = 2082;
    swift_getErrorValue();
    uint64_t v12 = *(void *)(*(void *)(v0 + 456) - 8);
    swift_task_alloc();
    (*(void (**)(void))(v12 + 16))();
    uint64_t v13 = String.init<A>(describing:)();
    unint64_t v15 = v14;
    swift_task_dealloc();
    *(void *)(v0 + 560) = sub_1000143F4(v13, v15, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, type, "[%@] Error fetching metadata: %{public}s", (uint8_t *)v9, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v16 = *(void *)(v0 + 696);
  uint64_t v17 = *(void *)(**(void **)(v0 + 624)
                  + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage);
  uint64_t v18 = v17 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v17 + 16);
  uint64_t v19 = (os_unfair_lock_s *)(v17 + ((*(unsigned int *)(*(void *)v17 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v19);
  sub_1002BDDD0(v18, v16);
  os_unfair_lock_unlock(v19);
  uint64_t v20 = *(void *)(v0 + 696);
  uint64_t v21 = *(void *)(v0 + 688);
  uint64_t v22 = *(void *)(v0 + 680);
  uint64_t v23 = AppInstallRequestType.isUserInitiated.getter();
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  if (v23)
  {
    *(void *)(v0 + 872) = *(void *)(**(void **)(v0 + 624)
                                      + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_localizer);
    *(void *)(v0 + 88) = 53;
    *(_OWORD *)(v0 + 96) = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
    *(_OWORD *)(v0 + 128) = 0u;
    *(void *)(v0 + 144) = 0;
    *(unsigned char *)(v0 + 152) = 26;
    *(void *)(v0 + 160) = 54;
    *(_OWORD *)(v0 + 168) = 0u;
    *(_OWORD *)(v0 + 184) = 0u;
    *(_OWORD *)(v0 + 200) = 0u;
    *(void *)(v0 + 216) = 0;
    *(unsigned char *)(v0 + 224) = 26;
    *(_OWORD *)(v0 + 232) = 0u;
    *(_OWORD *)(v0 + 248) = 0u;
    *(_OWORD *)(v0 + 264) = 0u;
    *(_OWORD *)(v0 + 280) = 0u;
    *(unsigned char *)(v0 + 296) = 26;
    swift_retain();
    BOOL v24 = (void *)swift_task_alloc();
    *(void *)(v0 + 880) = v24;
    *BOOL v24 = v0;
    v24[1] = sub_1002E6214;
    return sub_100560FFC(v0 + 88);
  }
  else
  {
    uint64_t v26 = *(void **)(v0 + 784);
    swift_willThrow();

    sub_10001729C(*(void *)(v0 + 776), &qword_10065B810);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v27 = *(uint64_t (**)(void))(v0 + 8);
    return v27();
  }
}

uint64_t sub_1002E6214(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)*v2;
  os_log_type_t v6 = (void *)*v2;
  v3[111] = a1;
  v3[112] = a2;
  swift_task_dealloc();
  id v4 = (void *)swift_task_alloc();
  v3[113] = v4;
  *id v4 = v6;
  v4[1] = sub_1002E636C;
  return sub_100560FFC((uint64_t)(v3 + 20));
}

uint64_t sub_1002E636C(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)*v2;
  os_log_type_t v6 = (void *)*v2;
  v3[114] = a1;
  v3[115] = a2;
  swift_task_dealloc();
  id v4 = (void *)swift_task_alloc();
  v3[116] = v4;
  *id v4 = v6;
  v4[1] = sub_1002E64C4;
  return sub_100560FFC((uint64_t)(v3 + 29));
}

uint64_t sub_1002E64C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 936) = a1;
  *(void *)(v3 + 944) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_1002E65C8, 0, 0);
}

uint64_t sub_1002E65C8()
{
  uint64_t v1 = *(void *)(v0 + 944);
  uint64_t v2 = *(void *)(v0 + 936);
  long long v6 = *(_OWORD *)(v0 + 888);
  long long v7 = *(_OWORD *)(v0 + 912);
  type metadata accessor for SystemAlert();
  uint64_t v3 = swift_allocObject();
  *(void *)(v0 + 952) = v3;
  *(_OWORD *)(v3 + 16) = v6;
  *(_OWORD *)(v3 + 32) = v7;
  *(void *)(v3 + 48) = v2;
  *(void *)(v3 + 56) = v1;
  *(void *)(v3 + 64) = 0;
  *(void *)(v3 + 72) = 0;
  *(_WORD *)(v3 + 80) = 0;
  swift_release();
  id v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 960) = v4;
  *id v4 = v0;
  v4[1] = sub_1002E66C0;
  return sub_10042D9F4();
}

uint64_t sub_1002E66C0()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1002E67D8, 0, 0);
}

uint64_t sub_1002E67D8()
{
  *(unsigned char *)(v0[78] + 40) = 1;
  uint64_t v1 = (void *)v0[98];
  swift_willThrow();

  sub_10001729C(v0[97], &qword_10065B810);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1002E691C()
{
  uint64_t v1 = *(void *)(v0 + 752);
  uint64_t v2 = *(void *)(v0 + 640);

  sub_1002E6BA4(v2, (uint64_t (*)(void))type metadata accessor for EnsureAllowedDeveloperTask);
  sub_1002E6BA4(v1, (uint64_t (*)(void))type metadata accessor for MediaAPIMetadata);
  sub_10001729C(*(void *)(v0 + 776), &qword_10065B810);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1002E6A8C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1002983A4(v0, qword_1006601D0);
  sub_10000E6AC(v0, (uint64_t)qword_1006601D0);
  return static Logger.install.getter();
}

uint64_t sub_1002E6AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_10065B810);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002E6B40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MediaAPIMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002E6BA4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_1002E6C04(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  id v10 = objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain();
  id v11 = sub_1002E7BC0();
  if (!v4)
  {
    uint64_t v12 = v11;
    id v13 = sub_1004FBD68();
    if (!v13) {
      goto LABEL_15;
    }
    unint64_t v14 = v13;
    id v15 = [v13 managementDeclarationIdentifier];

    if (!v15) {
      goto LABEL_15;
    }
    id v25 = v12;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    if (v16 == a2 && v18 == a3)
    {
      swift_bridgeObjectRelease();
      uint64_t v12 = v25;
    }
    else
    {
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v12 = v25;
      if ((v20 & 1) == 0)
      {
LABEL_15:

        goto LABEL_16;
      }
    }
    id v21 = [v12 bundleVersion];
    if (v21)
    {
      uint64_t v22 = v21;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1002E7CF8();
      uint64_t v24 = a1[2];
      unint64_t v23 = a1[3];
      LOBYTE(v22) = sub_1004FCF70();
      swift_bridgeObjectRelease();
      if (v22)
      {
        sub_1002E6DE4(1, v8, v9, v24, v23, a4);

        return;
      }
    }
    goto LABEL_15;
  }
  swift_errorRelease();
LABEL_16:
  sub_1002E73BC(1, v8, v9, a4);
}

void sub_1002E6DE4(char a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, void *a6)
{
  uint64_t v7 = v6;
  id v38 = a6;
  int v12 = a1 & 1;
  uint64_t v37 = type metadata accessor for Logger();
  uint64_t v36 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  unint64_t v14 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.updates.getter();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v39 = a4;
  if (v17)
  {
    uint64_t v18 = swift_slowAlloc();
    int v33 = v12;
    uint64_t v19 = v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v35 = a2;
    v32[1] = v20;
    *(void *)&long long v45 = v20;
    *(_DWORD *)uint64_t v19 = 136446466;
    swift_bridgeObjectRetain();
    v49[0] = sub_1000143F4(v35, a3, (uint64_t *)&v45);
    uint64_t v34 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 12) = 2082;
    swift_bridgeObjectRetain();
    a2 = v35;
    v49[0] = sub_1000143F4(a4, a5, (uint64_t *)&v45);
    uint64_t v7 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Adding available update for: %{public}s / %{public}s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    int v12 = v33;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v37);
  uint64_t v21 = sub_1002E7720(v12, a2, a3);
  int64_t v46 = (void *)sub_1000172F8(&qword_10065BDF0);
  uint64_t v22 = sub_10000DDFC((unint64_t *)&unk_10065CA50, &qword_10065BDF0);
  LOBYTE(v45) = 0;
  uint64_t v47 = (void *)v22;
  *((void *)&v45 + 1) = v21;
  sub_1000172F8(&qword_10065BDF8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
  sub_10018B164(&v45, inited + 32);
  v49[0] = (uint64_t)_swiftEmptyArrayStorage;
  id v24 = v38;
  swift_bridgeObjectRetain();
  sub_100554E8C(inited);
  id v25 = (void *)sub_10050A22C(0, v49[0], (uint64_t)sub_10050A214, 0, v24);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  if (v25)
  {
    int64_t v46 = &type metadata for String;
    uint64_t v47 = &protocol witness table for String;
    unint64_t v48 = &protocol witness table for String;
    *(void *)&long long v45 = v39;
    *((void *)&v45 + 1) = a5;
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    swift_bridgeObjectRetain_n();
    id v26 = v25;
    JSONEncoder.init()();
    SQLiteEncodeValue(_:using:)(&v45, v49);
    if (!v7)
    {
      swift_release();
      sub_100014524((uint64_t)&v45);
      sub_10018AC60(v49, v49[3]);
      uint64_t v27 = _bridgeAnythingToObjectiveC<A>(_:)();
      sub_100014524((uint64_t)v49);
      NSString v28 = String._bridgeToObjectiveC()();
      [v26 setValue:v27 forProperty:v28];
      swift_bridgeObjectRelease();

      swift_unknownObjectRelease();
LABEL_7:

      return;
    }
    swift_release();
    sub_100014524((uint64_t)&v45);
    swift_unexpectedError();
    __break(1u);
  }
  else
  {
    uint64_t v29 = 0x6972707265746E65;
    if (!v12) {
      uint64_t v29 = 0x65726F7453707061;
    }
    unint64_t v30 = 0xEA00000000006573;
    if (!v12) {
      unint64_t v30 = 0xE800000000000000;
    }
    *(void *)&long long v40 = v29;
    *((void *)&v40 + 1) = v30;
    uint64_t v41 = a2;
    unint64_t v42 = a3;
    uint64_t v43 = v39;
    unint64_t v44 = a5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v31 = sub_1004E9490(&v40, v24);
    if (!v7)
    {
      NSString v28 = v31;
      goto LABEL_7;
    }
  }
}

void sub_1002E73BC(char a1, uint64_t a2, unint64_t a3, void *a4)
{
  char v7 = a1 & 1;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1002E7720(v7, a2, a3);
  uint64_t v25 = sub_1000172F8(&qword_10065BDF0);
  uint64_t v13 = sub_10000DDFC((unint64_t *)&unk_10065CA50, &qword_10065BDF0);
  LOBYTE(v24) = 0;
  uint64_t v26 = v13;
  *((void *)&v24 + 1) = v12;
  sub_1000172F8(&qword_10065BDF8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
  sub_10018B164(&v24, inited + 32);
  unint64_t v23 = _swiftEmptyArrayStorage;
  id v15 = a4;
  swift_bridgeObjectRetain();
  sub_100554E8C(inited);
  os_log_type_t v16 = (void *)sub_10050A22C(0, (uint64_t)v23, (uint64_t)sub_10050A214, 0, v15);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  if (v16)
  {
    static Logger.updates.getter();
    swift_bridgeObjectRetain_n();
    BOOL v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v22 = v8;
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v21 = v9;
      *(void *)&long long v24 = v20;
      *(_DWORD *)uint64_t v19 = 136446210;
      swift_bridgeObjectRetain();
      unint64_t v23 = (void *)sub_1000143F4(a2, a3, (uint64_t *)&v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Removing available update for: %{public}s", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v21 + 8))(v11, v22);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
    [v16 deleteFromDatabase];
  }
}

uint64_t sub_1002E7720(char a1, uint64_t a2, unint64_t a3)
{
  if (a1) {
    uint64_t v5 = 0x6972707265746E65;
  }
  else {
    uint64_t v5 = 0x65726F7453707061;
  }
  if (a1) {
    unint64_t v6 = 0xEA00000000006573;
  }
  else {
    unint64_t v6 = 0xE800000000000000;
  }
  uint64_t v7 = sub_1000172F8(&qword_1006601F0);
  uint64_t v16 = v7;
  uint64_t v8 = sub_10000DDFC(&qword_1006601F8, &qword_1006601F0);
  uint64_t v17 = v8;
  LOWORD(v14) = 0;
  *((void *)&v14 + 1) = v5;
  unint64_t v15 = v6;
  sub_1000172F8(&qword_10065BDF8);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1005A3EC0;
  sub_10018B164(&v14, v9 + 32);
  uint64_t v16 = v7;
  uint64_t v17 = v8;
  LOWORD(v14) = 1;
  *((void *)&v14 + 1) = a2;
  unint64_t v15 = a3;
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1005A3EC0;
  sub_10018B164(&v14, v10 + 32);
  *(void *)&long long v14 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  uint64_t v11 = swift_bridgeObjectRetain();
  sub_100554E8C(v11);
  uint64_t v12 = swift_bridgeObjectRetain();
  sub_100554E8C(v12);
  sub_1000172F8(&qword_100660200);
  swift_arrayDestroy();
  return v14;
}

unint64_t *sub_1002E78B4()
{
  sub_1000172F8((uint64_t *)&unk_100663BE0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
  *(void *)(inited + 56) = &type metadata for SQLiteTable;
  *(void *)(inited + 64) = &off_1006493B8;
  uint64_t v1 = (void *)swift_allocObject();
  *(void *)(inited + 32) = v1;
  v1[2] = sub_1002E7998;
  v1[3] = 0;
  v1[4] = 0x616470755F6D6464;
  v1[5] = 0xEA00000000006574;
  uint64_t v2 = sub_1004AB980(inited);
  swift_setDeallocating();
  sub_1000172F8(&qword_10065C038);
  swift_arrayDestroy();
  return v2;
}

unint64_t *sub_1002E7998()
{
  v17[0] = 1701869940;
  v17[1] = 0xE400000000000000;
  v17[2] = 1415071060;
  v17[3] = 0xE400000000000000;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  char v21 = 0;
  v12[0] = 0x696669746E656469;
  v12[1] = 0xEA00000000007265;
  v12[2] = 1415071060;
  v12[3] = 0xE400000000000000;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  char v16 = 0;
  v7[0] = 0x6E6F6973726576;
  v7[1] = 0xE700000000000000;
  _OWORD v7[2] = 1415071060;
  _OWORD v7[3] = 0xE400000000000000;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  char v11 = 0;
  sub_1000172F8((uint64_t *)&unk_100663BE0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A3FC0;
  *(void *)(inited + 56) = &type metadata for SQLiteColumn;
  *(void *)(inited + 64) = &off_1006493B0;
  uint64_t v1 = swift_allocObject();
  *(void *)(inited + 32) = v1;
  sub_1001CD8D8((uint64_t)v17, v1 + 16);
  *(void *)(inited + 96) = &type metadata for SQLiteColumn;
  *(void *)(inited + 104) = &off_1006493B0;
  uint64_t v2 = swift_allocObject();
  *(void *)(inited + 72) = v2;
  sub_1001CD8D8((uint64_t)v12, v2 + 16);
  *(void *)(inited + 136) = &type metadata for SQLiteColumn;
  *(void *)(inited + 144) = &off_1006493B0;
  uint64_t v3 = swift_allocObject();
  *(void *)(inited + 112) = v3;
  sub_1001CD8D8((uint64_t)v7, v3 + 16);
  *(void *)(inited + 176) = &type metadata for SQLiteIndex;
  *(void *)(inited + 184) = &off_1006493A8;
  uint64_t v4 = swift_allocObject();
  *(void *)(inited + 152) = v4;
  *(void *)(v4 + 16) = 0x696669746E656469;
  *(void *)(v4 + 24) = 0xEA00000000007265;
  strcpy((char *)(v4 + 32), "identifier_idx");
  *(unsigned char *)(v4 + 47) = -18;
  *(unsigned char *)(v4 + 48) = 0;
  uint64_t v5 = sub_1004AB980(inited);
  swift_setDeallocating();
  sub_1000172F8(&qword_10065C038);
  swift_arrayDestroy();
  sub_1001CD934((uint64_t)v7);
  sub_1001CD934((uint64_t)v12);
  sub_1001CD934((uint64_t)v17);
  return v5;
}

uint64_t sub_1002E7BA4()
{
  return sub_1001CD9A4((void (*)(void))&_swift_release, 48);
}

id sub_1002E7BC0()
{
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = 0;
  id v2 = [v0 initForInstallMachineryWithBundleIdentifier:v1 error:&v6];

  if (v2)
  {
    id v3 = v6;
  }
  else
  {
    id v4 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

uint64_t sub_1002E7C8C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 72)) {
    sub_100014524(v0 + 48);
  }

  return _swift_deallocObject(v0, 97, 7);
}

uint64_t sub_1002E7CDC()
{
  return sub_1001CD9A4((void (*)(void))&_swift_bridgeObjectRelease, 49);
}

unint64_t sub_1002E7CF8()
{
  unint64_t result = qword_10065F9B0;
  if (!qword_10065F9B0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10065F9B0);
  }
  return result;
}

uint64_t sub_1002E7D38(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_11;
      }
      uint64_t v6 = HIDWORD(a1) - (int)a1;
LABEL_6:
      long long v9 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 32);
      unsigned int v10 = v9(a3, a4);
      if (!v10)
      {
        __break(1u);
        goto LABEL_10;
      }
      uint64_t v11 = v6 / v10;
      uint64_t v12 = v9(a3, a4);
      uint64_t result = v11 * v12;
      if ((unsigned __int128)(v11 * (__int128)v12) >> 64 != (v11 * v12) >> 63)
      {
LABEL_10:
        __break(1u);
LABEL_11:
        __break(1u);
LABEL_12:
        __break(1u);
        JUMPOUT(0x1002E7E28);
      }
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v7 = *(void *)(a1 + 24);
      uint64_t v6 = v7 - v8;
      if (!__OFSUB__(v7, v8)) {
        goto LABEL_6;
      }
      goto LABEL_12;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v6 = BYTE6(a2);
      goto LABEL_6;
  }
}

unint64_t sub_1002E7E38(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  unint64_t v62 = a2;
  uint64_t v61 = a1;
  uint64_t v4 = type metadata accessor for OSSignpostID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unsigned int v10 = (char *)&v55 - v9;
  uint64_t v11 = type metadata accessor for Logger();
  __chkstk_darwin(v11 - 8);
  uint64_t v12 = type metadata accessor for OSSignposter();
  uint64_t v59 = *(void *)(v12 - 8);
  uint64_t v60 = v12;
  __chkstk_darwin(v12);
  long long v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.download.getter();
  OSSignposter.init(logger:)();
  static OSSignpostID.exclusive.getter();
  long long v15 = OSSignposter.logHandle.getter();
  os_signpost_type_t v16 = static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    char v56 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    uint64_t v57 = v5;
    v56(v8, v10, v4);
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v58 = v2;
    long long v18 = v17;
    *(_WORD *)uint64_t v17 = 0;
    os_signpost_id_t v19 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, v16, v19, "Download/Decode", "", v18, 2u);
    uint64_t v3 = v58;
    swift_slowDealloc();

    uint64_t v20 = v57;
    (*(void (**)(char *, uint64_t))(v57 + 8))(v8, v4);
    v56(v8, v10, v4);
  }
  else
  {

    uint64_t v20 = v5;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
  }
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v58 = OSSignpostIntervalState.init(id:isOpen:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v4);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v14, v60);
  char v21 = v63;
  uint64_t v23 = v63[5];
  unint64_t v22 = v63[6];
  if (v22 >> 60 == 15)
  {
    uint64_t v25 = v61;
    unint64_t v24 = v62;
    uint64_t v66 = v61;
    unint64_t v67 = v62;
    sub_100012670(v61, v62);
  }
  else
  {
    uint64_t v66 = v63[5];
    unint64_t v67 = v22;
    sub_100012670(v23, v22);
    Data.append(_:)();
    sub_10018AE44(v23, v22);
    uint64_t v23 = 0;
    *(_OWORD *)(v21 + 5) = xmmword_1005A5CE0;
    unint64_t v22 = 0xF000000000000000;
    uint64_t v25 = v66;
    unint64_t v24 = v67;
  }
  uint64_t v26 = v21[3];
  uint64_t v27 = v21[4];
  sub_10018AC60(v21, v26);
  sub_100012670(v25, v24);
  uint64_t v28 = sub_1002E7D38(v25, v24, v26, v27);
  uint64_t v30 = v29;
  sub_100013510(v25, v24);
  uint64_t v31 = v28 + v30;
  if (__OFADD__(v28, v30))
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  unint64_t v32 = v24 >> 62;
  uint64_t v33 = 0;
  uint64_t v34 = v63;
  switch(v24 >> 62)
  {
    case 1uLL:
      LODWORD(v33) = HIDWORD(v25) - v25;
      if (__OFSUB__(HIDWORD(v25), v25)) {
        goto LABEL_64;
      }
      uint64_t v33 = (int)v33;
LABEL_13:
      if (v31 != v33) {
        goto LABEL_61;
      }
      if (v30 >= 1)
      {
        sub_100012670(v25, v24);
        sub_1002E8B9C(v28, v25, v24, &v64);
        sub_10018AE44(v23, v22);
        uint64_t v23 = v64;
        unint64_t v22 = v65;
        v34[5] = v64;
        v34[6] = v22;
        sub_1002E8D4C(v30, v25, v24, &v64);
        uint64_t v25 = v64;
        unint64_t v24 = v65;
        uint64_t v66 = v64;
        unint64_t v67 = v65;
        unint64_t v32 = v65 >> 62;
      }
      uint64_t v38 = 0;
      switch(v32)
      {
        case 1uLL:
          LODWORD(v38) = HIDWORD(v25) - v25;
          if (__OFSUB__(HIDWORD(v25), v25)) {
            goto LABEL_66;
          }
          uint64_t v38 = (int)v38;
LABEL_21:
          if (v22 >> 60 != 15)
          {
            uint64_t v41 = 0;
            switch(v22 >> 62)
            {
              case 1uLL:
                LODWORD(v41) = HIDWORD(v23) - v23;
                if (__OFSUB__(HIDWORD(v23), v23)) {
                  goto LABEL_68;
                }
                uint64_t v41 = (int)v41;
                goto LABEL_23;
              case 2uLL:
                uint64_t v48 = *(void *)(v23 + 16);
                uint64_t v47 = *(void *)(v23 + 24);
                BOOL v37 = __OFSUB__(v47, v48);
                uint64_t v41 = v47 - v48;
                if (!v37) {
                  goto LABEL_23;
                }
                __break(1u);
                goto LABEL_48;
              case 3uLL:
                goto LABEL_23;
              default:
                uint64_t v41 = BYTE6(v22);
                goto LABEL_23;
            }
          }
          uint64_t v41 = 0;
LABEL_23:
          BOOL v37 = __OFADD__(v38, v41);
          uint64_t v42 = v38 + v41;
          if (v37) {
            goto LABEL_62;
          }
          if (v42 != v31) {
            goto LABEL_63;
          }
          break;
        case 2uLL:
          uint64_t v40 = *(void *)(v25 + 16);
          uint64_t v39 = *(void *)(v25 + 24);
          BOOL v37 = __OFSUB__(v39, v40);
          uint64_t v38 = v39 - v40;
          if (!v37) {
            goto LABEL_21;
          }
          goto LABEL_67;
        case 3uLL:
          goto LABEL_21;
        default:
          uint64_t v38 = BYTE6(v24);
          goto LABEL_21;
      }
      break;
    case 2uLL:
      uint64_t v36 = *(void *)(v25 + 16);
      uint64_t v35 = *(void *)(v25 + 24);
      BOOL v37 = __OFSUB__(v35, v36);
      uint64_t v33 = v35 - v36;
      if (!v37) {
        goto LABEL_13;
      }
      goto LABEL_65;
    case 3uLL:
      goto LABEL_13;
    default:
      uint64_t v33 = BYTE6(v24);
      goto LABEL_13;
  }
  switch((int)v32)
  {
    case 1:
      if ((int)v25 == v25 >> 32) {
        goto LABEL_41;
      }
      goto LABEL_34;
    case 2:
      if (*(void *)(v25 + 16) == *(void *)(v25 + 24)) {
        goto LABEL_41;
      }
LABEL_34:
      if (v28 < 1)
      {
LABEL_41:
        sub_100013510(v25, v24);
        unint64_t v43 = 0;
        uint64_t v44 = v58;
        goto LABEL_42;
      }
LABEL_35:
      if (!v34[8]) {
        goto LABEL_55;
      }
      if (v32)
      {
        if (v32 != 1)
        {
          uint64_t v49 = *(void *)(v25 + 16);
          uint64_t v50 = *(void *)(v25 + 24);
          sub_100012670(v25, v24);
          swift_retain();
          swift_retain();
          sub_1002E94B8(v49, v50);
          if (!v3)
          {
            swift_release();
            swift_release();
LABEL_54:
            sub_100013510(v25, v24);
            uint64_t v34 = v63;
            goto LABEL_55;
          }
          swift_release();
          swift_release();
LABEL_52:
          sub_100013510(v25, v24);
          sub_100013510(v25, v24);
          uint64_t v44 = v58;
LABEL_57:
          uint64_t v53 = v61;
          unint64_t v43 = v62;
          sub_1002E86CC(v44, v61, v62);
          sub_100013510(v53, v43);
          swift_release();
          return v43;
        }
        if (v25 >> 32 >= (int)v25)
        {
          sub_100012670(v25, v24);
          sub_1002E94B8((int)v25, v25 >> 32);
          if (!v3) {
            goto LABEL_54;
          }
          goto LABEL_52;
        }
LABEL_69:
        __break(1u);
      }
LABEL_48:
      uint64_t v64 = v25;
      LOWORD(v65) = v24;
      BYTE2(v65) = BYTE2(v24);
      BYTE3(v65) = BYTE3(v24);
      BYTE4(v65) = BYTE4(v24);
      BYTE5(v65) = BYTE5(v24);
      sub_100270E78((uint64_t)&v64, (uint64_t)&v64 + BYTE6(v24));
      if (v3) {
        goto LABEL_52;
      }
      sub_100013510(v25, v24);
LABEL_55:
      uint64_t v51 = v34[3];
      uint64_t v52 = v34[4];
      sub_10018AC60(v34, v51);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v52 + 8))(&v66, v51, v52);
      uint64_t v44 = v58;
      if (v3)
      {
        sub_100013510(v66, v67);
        goto LABEL_57;
      }
      unint64_t v43 = v66;
LABEL_42:
      uint64_t v46 = v61;
      unint64_t v45 = v62;
      sub_1002E86CC(v44, v61, v62);
      sub_100013510(v46, v45);
      swift_release();
      return v43;
    case 3:
      goto LABEL_41;
    default:
      if ((v24 & 0xFF000000000000) == 0 || v28 <= 0) {
        goto LABEL_41;
      }
      goto LABEL_35;
  }
}

uint64_t sub_1002E86CC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v56 = a1;
  uint64_t v5 = type metadata accessor for OSSignpostError();
  uint64_t v53 = *(void *)(v5 - 8);
  uint64_t v54 = v5;
  __chkstk_darwin(v5);
  uint64_t v52 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for OSSignpostID();
  uint64_t v7 = *(void *)(v57 - 8);
  uint64_t v8 = __chkstk_darwin(v57);
  uint64_t v55 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v45 - v10;
  uint64_t v12 = type metadata accessor for Logger();
  __chkstk_darwin(v12 - 8);
  uint64_t v13 = type metadata accessor for OSSignposter();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  os_signpost_type_t v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.download.getter();
  OSSignposter.init(logger:)();
  uint64_t v17 = a2;
  sub_100012670(a2, a3);
  long long v18 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  int v51 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    os_log_t v46 = v18;
    uint64_t v47 = v13;
    uint64_t v48 = v14;
    uint64_t v49 = v17;
    uint64_t v19 = v57;
    unint64_t v50 = a3;
    unint64_t v20 = a3 >> 62;
    swift_retain();
    char v21 = v52;
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v23 = v53;
    uint64_t v22 = v54;
    if ((*(unsigned int (**)(char *, uint64_t))(v53 + 88))(v21, v54) == enum case for OSSignpostError.doubleEnd(_:))
    {
      char v24 = 0;
      uint64_t v25 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v23 + 8))(v21, v22);
      uint64_t v25 = "bytes%ld";
      char v24 = 1;
    }
    uint64_t v27 = v7;
    uint64_t v28 = v16;
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    uint64_t v30 = v11;
    v29(v55, v11, v19);
    uint64_t v31 = swift_slowAlloc();
    *(unsigned char *)uint64_t v31 = 0;
    *(unsigned char *)(v31 + 1) = v24;
    *(_WORD *)(v31 + 2) = 2048;
    uint64_t v32 = v20;
    uint64_t v33 = (uint8_t *)v31;
    uint64_t v34 = 0;
    uint64_t v36 = v49;
    unint64_t v35 = v50;
    uint64_t v37 = v48;
    switch(v32)
    {
      case 1:
        LODWORD(v34) = HIDWORD(v49) - v49;
        if (__OFSUB__(HIDWORD(v49), v49))
        {
          __break(1u);
LABEL_14:
          __break(1u);
          JUMPOUT(0x1002E8B8CLL);
        }
        uint64_t v34 = (int)v34;
LABEL_11:
        uint64_t v58 = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_100013510(v36, v35);
        uint64_t v41 = v55;
        os_signpost_id_t v42 = OSSignpostID.rawValue.getter();
        os_log_t v43 = v46;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v46, (os_signpost_type_t)v51, v42, "Download/Decode", v25, v33, 0xCu);
        swift_slowDealloc();

        uint64_t v44 = *(void (**)(char *, uint64_t))(v27 + 8);
        v44(v30, v19);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v28, v47);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v44)(v41, v19);
        break;
      case 2:
        uint64_t v39 = *(void *)(v49 + 16);
        uint64_t v38 = *(void *)(v49 + 24);
        BOOL v40 = __OFSUB__(v38, v39);
        uint64_t v34 = v38 - v39;
        if (!v40) {
          goto LABEL_11;
        }
        goto LABEL_14;
      case 3:
        goto LABEL_11;
      default:
        uint64_t v34 = BYTE6(v50);
        goto LABEL_11;
    }
  }
  else
  {

    sub_100013510(v17, a3);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v57);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  return result;
}

uint64_t sub_1002E8B9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (int)a2;
      uint64_t v9 = a2 >> 32;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v10 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v11 = sub_1002E9C58(v10, v9, a2, a3);
  if (!a1 || v11 < 0 || v11 >= a1)
  {
    uint64_t v12 = sub_1002E9BDC(v10, a1, a2, a3);
    uint64_t v13 = 0;
    switch((int)v5)
    {
      case 1:
        uint64_t v13 = a2 >> 32;
        break;
      case 2:
        uint64_t v13 = *(void *)(a2 + 24);
        break;
      case 3:
        break;
      default:
        uint64_t v13 = BYTE6(a3);
        break;
    }
    if (v13 < v12)
    {
LABEL_16:
      __break(1u);
      JUMPOUT(0x1002E8D1CLL);
    }
  }
  uint64_t v14 = Data._Representation.subscript.getter();
  uint64_t v16 = v15;
  uint64_t result = sub_100013510(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

uint64_t sub_1002E8D4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
LABEL_14:
    __break(1u);
    JUMPOUT(0x1002E8EBCLL);
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = a2 >> 32;
      uint64_t v8 = (int)a2;
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v8 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v10 = -a1;
  uint64_t v11 = sub_1002E9C58(v9, v8, a2, a3);
  if (v11 > 0 || v11 <= v10)
  {
    uint64_t v12 = sub_1002E9BDC(v9, v10, a2, a3);
    uint64_t v13 = 0;
    switch((int)v5)
    {
      case 1:
        uint64_t v13 = (int)a2;
        break;
      case 2:
        uint64_t v13 = *(void *)(a2 + 16);
        break;
      default:
        break;
    }
    if (v12 < v13)
    {
      __break(1u);
      goto LABEL_14;
    }
  }
  uint64_t v14 = Data._Representation.subscript.getter();
  uint64_t v16 = v15;
  uint64_t result = sub_100013510(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

uint64_t sub_1002E8EEC()
{
  unint64_t v3 = v0[6];
  if (v3 >> 60 == 15)
  {
    uint64_t v2 = 0;
    unint64_t v4 = 0xF000000000000000;
    if (!v0[8]) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v5 = v0[5];
    if (v0[8])
    {
      switch(v3 >> 62)
      {
        case 1uLL:
          uint64_t v2 = v5 >> 32;
          if (v5 >> 32 < (int)v5) {
            __break(1u);
          }
          sub_100012670(v0[5], v3);
          sub_1002E94B8((int)v5, v5 >> 32);
          if (!v1) {
            break;
          }
          goto LABEL_19;
        case 2uLL:
          uint64_t v2 = *(void *)(v5 + 16);
          uint64_t v7 = *(void *)(v5 + 24);
          sub_10018B2A8(v0[5], v3);
          swift_retain();
          swift_retain();
          sub_1002E94B8(v2, v7);
          if (v1)
          {
            swift_release();
            swift_release();
            goto LABEL_19;
          }
          swift_release();
          swift_release();
          break;
        case 3uLL:
          *(void *)&v18[6] = 0;
          *(void *)long long v18 = 0;
          sub_100012670(v5, v3);
          uint64_t v6 = v18;
          goto LABEL_15;
        default:
          *(void *)long long v18 = v0[5];
          *(_WORD *)&v18[8] = v3;
          v18[10] = BYTE2(v3);
          v18[11] = BYTE3(v3);
          v18[12] = BYTE4(v3);
          v18[13] = BYTE5(v3);
          sub_100012670(v5, v3);
          uint64_t v6 = &v18[BYTE6(v3)];
LABEL_15:
          sub_100270E78((uint64_t)v18, (uint64_t)v6);
          if (!v1) {
            break;
          }
          goto LABEL_19;
      }
    }
    else
    {
      sub_100012670(v0[5], v0[6]);
    }
    uint64_t v8 = v0[3];
    uint64_t v2 = v0[4];
    sub_10018AC60(v0, v8);
    uint64_t v9 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v2 + 16))(v5, v3, v8, v2);
    if (v1)
    {
LABEL_19:
      sub_10018AE44(v5, v3);
      goto LABEL_23;
    }
    uint64_t v2 = v9;
    unint64_t v4 = v10;
    sub_10018AE44(v5, v3);
    if (!v0[8]) {
      goto LABEL_21;
    }
  }
  sub_1002E92D8((uint64_t)(v0 + 7), (uint64_t)v18);
  sub_1002712B8();
  sub_1002E9334((uint64_t)v18);
  if (v1)
  {
    sub_10018AE44(v2, v4);
    goto LABEL_23;
  }
LABEL_21:
  uint64_t v11 = v0[3];
  uint64_t v12 = v0[4];
  uint64_t v13 = sub_10018AC60(v0, v11);
  __chkstk_darwin(v13);
  (*(void (**)(unsigned char *))(v15 + 16))(&v18[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8]);
  (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v11, v12);
  if (v1) {
    sub_10018AE44(v2, v4);
  }
LABEL_23:
  sub_1002746AC((uint64_t)v0);
  return v2;
}

uint64_t sub_1002E92D8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1002E9334(uint64_t a1)
{
  return a1;
}

double sub_1002E9388@<D0>(uint64_t a1@<X8>)
{
  sub_1002E954C(v1 + 56, (uint64_t)v8);
  if (v9)
  {
    char v3 = v8[0];
    uint64_t v4 = v11;
    uint64_t v5 = v12;
    sub_10018AC60(v10, v11);
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 32);
    *(void *)(a1 + 32) = swift_getAssociatedTypeWitness();
    *(void *)(a1 + 40) = swift_getAssociatedConformanceWitness();
    sub_10019CE94((uint64_t *)(a1 + 8));
    v6(v4, v5);
    *(unsigned char *)a1 = v3;
    *(_OWORD *)(a1 + 48) = v13;
    sub_1002E9334((uint64_t)v8);
  }
  else
  {
    sub_1002E95B4((uint64_t)v8);
    double result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

unint64_t sub_1002E94A0(uint64_t a1, unint64_t a2)
{
  return sub_1002E7E38(a1, a2);
}

void sub_1002E94B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __DataStorage._bytes.getter();
  if (v4)
  {
    uint64_t v5 = __DataStorage._offset.getter();
    if (__OFSUB__(a1, v5))
    {
LABEL_13:
      __break(1u);
      return;
    }
    v4 += a1 - v5;
  }
  BOOL v6 = __OFSUB__(a2, a1);
  uint64_t v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v8 = __DataStorage._length.getter();
  if (v8 >= v7) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t v10 = v4 + v9;
  if (v4) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  sub_100270E78(v4, v11);
}

uint64_t sub_1002E954C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_10065DFD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002E95B4(uint64_t a1)
{
  uint64_t v2 = sub_1000172F8(&qword_10065DFD8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for Decrypter(uint64_t *a1)
{
  sub_100014524((uint64_t)a1);
  unint64_t v2 = a1[6];
  if (v2 >> 60 != 15) {
    sub_100013510(a1[5], v2);
  }
  uint64_t result = a1[8];
  if (result)
  {
    swift_bridgeObjectRelease();
    return sub_100014524((uint64_t)(a1 + 10));
  }
  return result;
}

uint64_t initializeWithCopy for Decrypter(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = (uint64_t *)(a2 + 40);
  unint64_t v6 = *(void *)(a2 + 48);
  if (v6 >> 60 != 15)
  {
    uint64_t v12 = *v5;
    sub_100012670(*v5, *(void *)(a2 + 48));
    *(void *)(a1 + 40) = v12;
    *(void *)(a1 + 48) = v6;
    uint64_t v7 = *(void *)(a2 + 64);
    if (v7) {
      goto LABEL_3;
    }
LABEL_5:
    long long v13 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v13;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    long long v14 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v14;
    return a1;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)v5;
  uint64_t v7 = *(void *)(a2 + 64);
  if (!v7) {
    goto LABEL_5;
  }
LABEL_3:
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 72) = v8;
  long long v9 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v9;
  uint64_t v10 = v9;
  uint64_t v11 = **(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8);
  swift_bridgeObjectRetain();
  v11(a1 + 80, a2 + 80, v10);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  return a1;
}

uint64_t assignWithCopy for Decrypter(uint64_t a1, uint64_t a2)
{
  sub_1002553AC((uint64_t *)a1, (uint64_t *)a2);
  long long v4 = (uint64_t *)(a2 + 40);
  unint64_t v5 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48) >> 60 == 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v6 = *v4;
      sub_100012670(*v4, *(void *)(a2 + 48));
      *(void *)(a1 + 40) = v6;
      *(void *)(a1 + 48) = v5;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
    sub_1002E9998(a1 + 40);
LABEL_6:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  uint64_t v7 = *v4;
  sub_100012670(*v4, *(void *)(a2 + 48));
  uint64_t v8 = *(void *)(a1 + 40);
  unint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v5;
  sub_100013510(v8, v9);
LABEL_8:
  uint64_t v10 = (_OWORD *)(a1 + 56);
  uint64_t v11 = (_OWORD *)(a2 + 56);
  uint64_t v12 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64))
  {
    if (!v12)
    {
      sub_1002E9334(a1 + 56);
      *uint64_t v10 = *v11;
      long long v15 = *(_OWORD *)(a2 + 120);
      long long v17 = *(_OWORD *)(a2 + 72);
      long long v16 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 120) = v15;
      *(_OWORD *)(a1 + 72) = v17;
      *(_OWORD *)(a1 + 88) = v16;
      return a1;
    }
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    sub_1002553AC((uint64_t *)(a1 + 80), (uint64_t *)(a2 + 80));
  }
  else
  {
    if (!v12)
    {
      *uint64_t v10 = *v11;
      long long v18 = *(_OWORD *)(a2 + 72);
      long long v19 = *(_OWORD *)(a2 + 88);
      long long v20 = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 120) = v20;
      *(_OWORD *)(a1 + 72) = v18;
      *(_OWORD *)(a1 + 88) = v19;
      return a1;
    }
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    uint64_t v13 = *(void *)(a2 + 104);
    *(void *)(a1 + 104) = v13;
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    long long v14 = **(void (***)(uint64_t, uint64_t, uint64_t))(v13 - 8);
    swift_bridgeObjectRetain();
    v14(a1 + 80, a2 + 80, v13);
  }
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  return a1;
}

uint64_t sub_1002E9998(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for Decrypter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for Decrypter(uint64_t a1, uint64_t a2)
{
  sub_100014524(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  unint64_t v5 = (_OWORD *)(a2 + 40);
  unint64_t v6 = *(void *)(a1 + 48);
  if (v6 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v7 = *(void *)(a2 + 48);
  if (v7 >> 60 == 15)
  {
    sub_1002E9998(a1 + 40);
LABEL_4:
    *(_OWORD *)(a1 + 40) = *v5;
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)v5;
  *(void *)(a1 + 48) = v7;
  sub_100013510(v8, v6);
LABEL_6:
  if (!*(void *)(a1 + 64))
  {
LABEL_10:
    long long v11 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v11;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    long long v12 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v12;
    return a1;
  }
  uint64_t v9 = *(void *)(a2 + 64);
  if (!v9)
  {
    sub_1002E9334(a1 + 56);
    goto LABEL_10;
  }
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = v9;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  sub_100014524(a1 + 80);
  long long v10 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v10;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for Decrypter(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 136)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Decrypter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Decrypter()
{
  return &type metadata for Decrypter;
}

uint64_t sub_1002E9BDC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v4)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < result || result < v7)
  {
LABEL_10:
    __break(1u);
    JUMPOUT(0x1002E9C48);
  }
  return result;
}

uint64_t sub_1002E9C58(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = (int)a3;
      uint64_t v4 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a3 + 16);
      uint64_t v4 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = 0;
      uint64_t v4 = BYTE6(a4);
      break;
  }
  if (v4 < a1 || v5 > a1)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < a2 || v7 > a2) {
    goto LABEL_16;
  }
  BOOL v8 = __OFSUB__(a2, a1);
  uint64_t result = a2 - a1;
  if (v8)
  {
LABEL_17:
    __break(1u);
    JUMPOUT(0x1002E9D24);
  }
  return result;
}

uint64_t sub_1002E9D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4;
  uint64_t v31 = a3;
  uint64_t v10 = type metadata accessor for CharacterSet();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  long long v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  long long v16 = (char *)&v30 - v15;
  if (!a2) {
    goto LABEL_6;
  }
  if (String.count.getter() < 2) {
    goto LABEL_5;
  }
  if (String.count.getter() > 3) {
    goto LABEL_5;
  }
  *(void *)&long long v33 = a1;
  *((void *)&v33 + 1) = a2;
  static CharacterSet.letters.getter();
  CharacterSet.inverted.getter();
  uint64_t v30 = v5;
  long long v17 = *(void (**)(char *, uint64_t))(v11 + 8);
  v17(v16, v10);
  sub_100017B14();
  StringProtocol.rangeOfCharacter(from:options:range:)();
  char v19 = v18;
  v17(v14, v10);
  if (v19)
  {
LABEL_6:
    char v21 = *v6;
    uint64_t v34 = sub_1000172F8(&qword_10065C6C8);
    unint64_t v22 = sub_1002EAD64();
    LOWORD(v33) = 1;
    unint64_t v35 = v22;
    *((void *)&v33 + 1) = 1;
    sub_1000172F8(&qword_10065C6D8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
    sub_10018B164(&v33, inited + 32);
    uint64_t v32 = _swiftEmptyArrayStorage;
    id v24 = v21;
    sub_100555910(inited);
    uint64_t v25 = (void *)sub_1002EAB00(0, (uint64_t)v32, (uint64_t)sub_1002EAA64, 0, v24);

    swift_bridgeObjectRelease();
    uint64_t v26 = &_swiftEmptyDictionarySingleton;
    if (v25)
    {
      uint64_t v27 = sub_100241818(4, v25);

      if (v27) {
        uint64_t v26 = (void *)v27;
      }
    }
    *(void *)&long long v33 = v26;
    swift_bridgeObjectRetain();
    if (a2)
    {
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v32 = v26;
      sub_100529754(a1, a2, v31, a4, isUniquelyReferenced_nonNull_native);
      uint64_t v29 = v32;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10042E9F4(v31, a4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v29 = (void *)v33;
    }
    sub_1002EA0D4((uint64_t)v29, 4, *v6);
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_5:
    type metadata accessor for InternalError();
    sub_10019FE50();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
}

id sub_1002EA0D4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = sub_1000172F8(&qword_10065C6C8);
  LOWORD(v11) = 1;
  unint64_t v13 = sub_1002EAD64();
  *((void *)&v11 + 1) = 1;
  sub_1000172F8(&qword_10065C6D8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
  sub_10018B164(&v11, inited + 32);
  id v7 = a3;
  sub_100555910(inited);
  BOOL v8 = (void *)sub_1002EAB00(0, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)sub_1002EAA64, 0, v7);

  swift_bridgeObjectRelease();
  if (v8) {
    goto LABEL_2;
  }
  id result = sub_1004E9760((uint64_t)&off_100637A10, (uint64_t)&off_100637A40, 0, 0, v7);
  if (!v3)
  {
    BOOL v8 = result;
LABEL_2:
    uint64_t v9 = swift_bridgeObjectRetain();
    sub_100245370(v9, a2, v8);

    return (id)swift_bridgeObjectRelease();
  }
  return result;
}

id sub_1002EA258(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = sub_1000172F8(&qword_10065C6C8);
  LOWORD(v11) = 1;
  unint64_t v13 = sub_1002EAD64();
  *((void *)&v11 + 1) = 1;
  sub_1000172F8(&qword_10065C6D8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
  sub_10018B164(&v11, inited + 32);
  id v7 = a3;
  sub_100555910(inited);
  BOOL v8 = (void *)sub_1002EAB00(0, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)sub_1002EAA64, 0, v7);

  swift_bridgeObjectRelease();
  if (v8) {
    goto LABEL_2;
  }
  id result = sub_1004E9760((uint64_t)&off_100638E98, (uint64_t)&off_100638EC8, 0, 0, v7);
  if (!v3)
  {
    BOOL v8 = result;
LABEL_2:
    uint64_t v9 = swift_bridgeObjectRetain();
    sub_100246144(v9, a2, v8);

    return (id)swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1002EA3DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for ApprovedDeveloper();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v28 = (uint64_t)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  uint64_t v32 = sub_1000172F8(&qword_10065C6C8);
  unint64_t v11 = sub_1002EAD64();
  LOWORD(v31) = 1;
  unint64_t v33 = v11;
  *((void *)&v31 + 1) = 1;
  sub_1000172F8(&qword_10065C6D8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
  sub_10018B164(&v31, inited + 32);
  uint64_t v29 = _swiftEmptyArrayStorage;
  id v13 = v10;
  sub_100555910(inited);
  long long v14 = (void *)sub_1002EAB00(0, (uint64_t)v29, (uint64_t)sub_1002EAA64, 0, v13);

  swift_bridgeObjectRelease();
  if (v14)
  {
    uint64_t v15 = sub_100241A94(3, v14);

    if (v15)
    {
      uint64_t v27 = v8;
      uint64_t v30 = v15;
      uint64_t v16 = *(void *)(v15 + 16);
      if (v16)
      {
        uint64_t v24 = v7;
        uint64_t v25 = v4;
        uint64_t v26 = v3;
        unint64_t v17 = v15 + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
        uint64_t v18 = *(void *)(v27 + 72);
        swift_bridgeObjectRetain();
        unint64_t v19 = 0;
        while (ApprovedDeveloper.identifier.getter() != a1 || v20 != a2)
        {
          char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v21) {
            goto LABEL_12;
          }
          ++v19;
          v17 += v18;
          if (v16 == v19)
          {
            swift_bridgeObjectRelease();
            goto LABEL_13;
          }
        }
        swift_bridgeObjectRelease();
LABEL_12:
        swift_bridgeObjectRelease();
        uint64_t v22 = v28;
        sub_10054EC70(v19, v28);
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v22, v24);
        sub_1002EA258(v30, 3, *v25);
      }
LABEL_13:
      swift_bridgeObjectRelease();
    }
  }
}

unint64_t *sub_1002EA6BC()
{
  sub_1000172F8((uint64_t *)&unk_100663BE0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
  *(void *)(inited + 56) = &type metadata for SQLiteTable;
  *(void *)(inited + 64) = &off_1006493B8;
  uint64_t v1 = swift_allocObject();
  *(void *)(inited + 32) = v1;
  *(void *)(v1 + 16) = sub_1002EA7A8;
  *(void *)(v1 + 24) = 0;
  strcpy((char *)(v1 + 32), "secure_storage");
  *(unsigned char *)(v1 + 47) = -18;
  unint64_t v2 = sub_1004AB980(inited);
  swift_setDeallocating();
  sub_1000172F8(&qword_10065C038);
  swift_arrayDestroy();
  return v2;
}

unint64_t *sub_1002EA7A8()
{
  v28[0] = 0xD000000000000012;
  v28[1] = 0x80000001005B8040;
  _OWORD v28[2] = 0x52454745544E49;
  void v28[3] = 0xE700000000000000;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  char v32 = 0;
  v23[0] = 0xD000000000000019;
  v23[1] = 0x80000001005B8020;
  v23[2] = 1112493122;
  _OWORD v23[3] = 0xE400000000000000;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  char v27 = 0;
  v18[0] = 0xD000000000000016;
  v18[1] = 0x80000001005B8060;
  v18[2] = 1112493122;
  v18[3] = 0xE400000000000000;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  char v22 = 0;
  v13[0] = 0xD000000000000013;
  v13[1] = 0x80000001005B8080;
  v13[2] = 1112493122;
  v13[3] = 0xE400000000000000;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  char v17 = 0;
  v8[0] = 0xD000000000000010;
  v8[1] = 0x80000001005B80A0;
  _OWORD v8[2] = 1112493122;
  _OWORD v8[3] = 0xE400000000000000;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  char v12 = 0;
  sub_1000172F8((uint64_t *)&unk_100663BE0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A9D80;
  *(void *)(inited + 56) = &type metadata for SQLiteColumn;
  *(void *)(inited + 64) = &off_1006493B0;
  uint64_t v1 = swift_allocObject();
  *(void *)(inited + 32) = v1;
  sub_1001CD8D8((uint64_t)v28, v1 + 16);
  *(void *)(inited + 96) = &type metadata for SQLiteColumn;
  *(void *)(inited + 104) = &off_1006493B0;
  uint64_t v2 = swift_allocObject();
  *(void *)(inited + 72) = v2;
  sub_1001CD8D8((uint64_t)v23, v2 + 16);
  *(void *)(inited + 136) = &type metadata for SQLiteColumn;
  *(void *)(inited + 144) = &off_1006493B0;
  uint64_t v3 = swift_allocObject();
  *(void *)(inited + 112) = v3;
  sub_1001CD8D8((uint64_t)v18, v3 + 16);
  *(void *)(inited + 176) = &type metadata for SQLiteColumn;
  *(void *)(inited + 184) = &off_1006493B0;
  uint64_t v4 = swift_allocObject();
  *(void *)(inited + 152) = v4;
  sub_1001CD8D8((uint64_t)v13, v4 + 16);
  *(void *)(inited + 216) = &type metadata for SQLiteColumn;
  *(void *)(inited + 224) = &off_1006493B0;
  uint64_t v5 = swift_allocObject();
  *(void *)(inited + 192) = v5;
  sub_1001CD8D8((uint64_t)v8, v5 + 16);
  uint64_t v6 = sub_1004AB980(inited);
  swift_setDeallocating();
  sub_1000172F8(&qword_10065C038);
  swift_arrayDestroy();
  sub_1001CD934((uint64_t)v8);
  sub_1001CD934((uint64_t)v13);
  sub_1001CD934((uint64_t)v18);
  sub_1001CD934((uint64_t)v23);
  sub_1001CD934((uint64_t)v28);
  return v6;
}

uint64_t sub_1002EAA24()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1002EAA64(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  type metadata accessor for SecureStorageEntity.Entity();
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v7 = a2;
  id v8 = [v6 initWithPersistentID:a1 onConnection:v7];
  LODWORD(a1) = [v8 existsInDatabase];

  if (!a1)
  {

    id v8 = 0;
  }
  *a3 = v8;
}

uint64_t sub_1002EAB00(char a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = a1 & 1;
  uint64_t v20 = 0;
  type metadata accessor for SecureStorageEntity.Entity();
  id v10 = [objc_allocWithZone((Class)ASUSQLiteQueryDescriptor) initWithEntityClass:swift_getObjCClassFromMetadata() memoryEntityClass:0];
  long long v11 = (void *)sub_10043DAEC(v9, a2);
  [v10 setPredicate:v11];

  id v12 = [objc_allocWithZone((Class)ASUSQLiteQuery) initOnConnection:a5 descriptor:v10];
  id v13 = (void *)swift_allocObject();
  v13[2] = &v20;
  v13[3] = a3;
  void v13[4] = a4;
  v13[5] = a5;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_1001A2178;
  *(void *)(v14 + 24) = v13;
  aBlock[4] = sub_1001A2194;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100248D44;
  aBlock[3] = &unk_1006408F0;
  long long v15 = _Block_copy(aBlock);
  id v16 = a5;
  swift_retain();
  swift_release();
  [v12 enumeratePersistentIDsUsingBlock:v15];

  _Block_release(v15);
  LOBYTE(a5) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (a5)
  {
    __break(1u);
  }
  else
  {
    uint64_t v18 = v20;
    swift_release();
    return v18;
  }
  return result;
}

uint64_t sub_1002EAD14()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 72)) {
    sub_100014524(v0 + 48);
  }

  return _swift_deallocObject(v0, 97, 7);
}

unint64_t sub_1002EAD64()
{
  unint64_t result = qword_10065C6D0;
  if (!qword_10065C6D0)
  {
    sub_10017B924(&qword_10065C6C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065C6D0);
  }
  return result;
}

uint64_t sub_1002EADC0()
{
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002EADF8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002EAE08()
{
  return swift_release();
}

uint64_t sub_1002EAE10()
{
  *(void *)(v1 + 72) = v0;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 80) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1002EAEA4;
  return sub_1002EB310(1);
}

uint64_t sub_1002EAEA4(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 88) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_1002EAFE0, 0, 0);
  }
  else
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

uint64_t sub_1002EAFE0()
{
  *(void *)(v0 + 64) = *(void *)(v0 + 88);
  swift_errorRetain();
  sub_1000172F8(&qword_10065B260);
  if (swift_dynamicCast()
    && *(void *)(v0 + 32)
    && (int v1 = *(_DWORD *)(v0 + 16), swift_bridgeObjectRelease(), v1 == -7006))
  {
    swift_errorRelease();
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 96) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1002EB128;
    return sub_1002EB310(0);
  }
  else
  {
    swift_errorRelease();
    swift_willThrow();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
}

uint64_t sub_1002EB128(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[5] = v2;
  v3[6] = a1;
  v3[7] = v1;
  v3[13] = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1002EB2AC;
  }
  else {
    uint64_t v4 = sub_1002EB244;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1002EB244()
{
  swift_errorRelease();
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1002EB2AC()
{
  swift_errorRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002EB310(char a1)
{
  *(void *)(v2 + 200) = v1;
  *(unsigned char *)(v2 + 464) = a1;
  type metadata accessor for ConfigurationBag(0);
  *(void *)(v2 + 208) = swift_task_alloc();
  *(void *)(v2 + 216) = type metadata accessor for ADPNewLicenseTask(0);
  *(void *)(v2 + 224) = swift_task_alloc();
  *(void *)(v2 + 232) = swift_task_alloc();
  *(void *)(v2 + 240) = swift_task_alloc();
  *(void *)(v2 + 248) = swift_task_alloc();
  *(void *)(v2 + 256) = swift_task_alloc();
  *(void *)(v2 + 264) = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  *(void *)(v2 + 272) = v3;
  *(void *)(v2 + 280) = *(void *)(v3 - 8);
  *(void *)(v2 + 288) = swift_task_alloc();
  *(void *)(v2 + 296) = swift_task_alloc();
  *(void *)(v2 + 304) = swift_task_alloc();
  *(void *)(v2 + 312) = swift_task_alloc();
  *(void *)(v2 + 320) = swift_task_alloc();
  return _swift_task_switch(sub_1002EB4A4, 0, 0);
}

uint64_t sub_1002EB4A4()
{
  uint64_t v81 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0[25];
  uint64_t v3 = (uint64_t)(v0 + 2);
  uint64_t v5 = v0[32];
  uint64_t v4 = v0[33];
  static Logger.ald.getter();
  sub_1002EDEAC(v2, v4, type metadata accessor for ADPNewLicenseTask);
  sub_1002EDEAC(v2, v5, type metadata accessor for ADPNewLicenseTask);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t log = v6;
    uint64_t v76 = v0[35];
    uint64_t v77 = v0[34];
    uint64_t v78 = v0[40];
    os_log_type_t type = v7;
    uint64_t v8 = v0[33];
    uint64_t v71 = v0[32];
    uint64_t v9 = v0[27];
    uint64_t v10 = swift_slowAlloc();
    uint64_t v72 = (void *)swift_slowAlloc();
    uint64_t v73 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 138412546;
    long long v11 = *(void **)(v8 + *(int *)(v9 + 24));
    v0[23] = v11;
    uint64_t v80 = v73;
    id v12 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v72 = v11;
    sub_1002EDE4C(v8, type metadata accessor for ADPNewLicenseTask);
    *(_WORD *)(v10 + 12) = 2080;
    uint64_t v13 = *(void *)(v71 + 56);
    unint64_t v14 = *(void *)(v71 + 64);
    swift_bridgeObjectRetain();
    v0[24] = sub_1000143F4(v13, v14, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1002EDE4C(v71, type metadata accessor for ADPNewLicenseTask);
    _os_log_impl((void *)&_mh_execute_header, log, type, "[%@] Fetching license for %s", (uint8_t *)v10, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    long long v15 = *(void (**)(uint64_t, uint64_t))(v76 + 8);
    v15(v78, v77);
  }
  else
  {
    id v16 = v6;
    uint64_t v17 = v0[40];
    uint64_t v18 = v0[34];
    uint64_t v19 = v1[35];
    uint64_t v20 = v1[32];
    sub_1002EDE4C(v1[33], type metadata accessor for ADPNewLicenseTask);
    sub_1002EDE4C(v20, type metadata accessor for ADPNewLicenseTask);

    long long v15 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v15(v17, v18);
  }
  v1[41] = v15;
  sub_10019B17C(v1[25], v3);
  sub_1000172F8(&qword_10065C450);
  if (swift_dynamicCast())
  {
    uint64_t v22 = v1[17];
    uint64_t v21 = v1[18];
LABEL_8:
    v1[42] = v21;
    uint64_t v25 = v1[31];
    uint64_t v26 = v1[25];
    static Logger.ald.getter();
    sub_1002EDEAC(v26, v25, type metadata accessor for ADPNewLicenseTask);
    char v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    uint64_t v30 = v1[31];
    uint64_t v79 = v21;
    if (v29)
    {
      uint64_t v31 = v1[27];
      char v32 = (uint8_t *)swift_slowAlloc();
      unint64_t v33 = (void *)swift_slowAlloc();
      *(_DWORD *)char v32 = 138412290;
      uint64_t v34 = *(void **)(v30 + *(int *)(v31 + 24));
      v1[22] = v34;
      id v35 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v33 = v34;
      sub_1002EDE4C(v30, type metadata accessor for ADPNewLicenseTask);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "[%@] Fetching configuration bag", v32, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1002EDE4C(v30, type metadata accessor for ADPNewLicenseTask);
    }
    uint64_t v36 = v1[39];
    uint64_t v37 = v1[34];
    uint64_t v38 = v1[35];
    uint64_t v39 = v1[27];
    uint64_t v40 = v1[25];

    v1[43] = (v38 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v15(v36, v37);
    sub_10019B17C(v40, (uint64_t)(v1 + 12));
    uint64_t v41 = *(int *)(v39 + 24);
    LOBYTE(v38) = *(unsigned char *)(v40 + *(int *)(v39 + 20));
    uint64_t v43 = *(void *)(v40 + 40);
    unint64_t v42 = *(void *)(v40 + 48);
    *((_DWORD *)v1 + 114) = v41;
    uint64_t v44 = *(void **)(v40 + v41);
    uint64_t v45 = self;
    swift_bridgeObjectRetain();
    id v46 = v44;
    id v47 = [v45 ephemeralSessionConfiguration];
    [v47 setHTTPShouldSetCookies:0];
    [v47 setHTTPCookieAcceptPolicy:1];
    [v47 setRequestCachePolicy:1];
    sub_100373694(1);
    id v48 = [self sessionWithConfiguration:v47];

    type metadata accessor for PlainHTTP();
    uint64_t v49 = swift_allocObject();
    *(unsigned char *)(v49 + 24) = 0;
    *(void *)(v49 + 16) = v48;
    uint64_t v50 = type metadata accessor for DecoratedHTTP();
    swift_allocObject();
    uint64_t v51 = sub_1002C20CC(v49, (uint64_t)(v1 + 12), v43, v42, v38, v46);
    v1[44] = v51;
    v1[10] = v50;
    v1[11] = &off_10063FB70;
    v1[7] = v51;
    swift_retain();
    uint64_t v52 = (void *)swift_task_alloc();
    v1[45] = v52;
    *uint64_t v52 = v1;
    v52[1] = sub_1002EBE24;
    uint64_t v53 = v1[26];
    return sub_1002CDB18(v53, v22, v79, (uint64_t)(v1 + 7), (uint64_t)v46);
  }
  type metadata accessor for NewLicenseBatch(0);
  uint64_t v23 = sub_1004CF23C();
  if (v24)
  {
    uint64_t v22 = v23;
    uint64_t v21 = v24;
    goto LABEL_8;
  }
  uint64_t v55 = v1[28];
  uint64_t v56 = v1[25];
  static Logger.ald.getter();
  sub_1002EDEAC(v56, v55, type metadata accessor for ADPNewLicenseTask);
  uint64_t v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.error.getter();
  BOOL v59 = os_log_type_enabled(v57, v58);
  uint64_t v60 = v1[28];
  if (v59)
  {
    uint64_t v61 = v1[27];
    unint64_t v62 = (uint8_t *)swift_slowAlloc();
    uint64_t v63 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v62 = 138412290;
    uint64_t v64 = *(void **)(v60 + *(int *)(v61 + 24));
    v1[19] = v64;
    id v65 = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v63 = v64;
    sub_1002EDE4C(v60, type metadata accessor for ADPNewLicenseTask);
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "[%@] Unable to fetch configuration bag", v62, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1002EDE4C(v1[28], type metadata accessor for ADPNewLicenseTask);
  }
  uint64_t v66 = v1[36];
  uint64_t v67 = v1[34];

  v15(v66, v67);
  uint64_t v68 = type metadata accessor for MarketplaceKitError();
  sub_10026F43C();
  swift_allocError();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v68 - 8) + 104))(v69, enum case for MarketplaceKitError.invalidURL(_:), v68);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v70 = (uint64_t (*)(void))v1[1];
  return v70();
}

uint64_t sub_1002EBE24()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 368) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v3 = sub_1002ECB48;
  }
  else
  {
    sub_100014524(v2 + 56);
    uint64_t v3 = sub_1002EBF54;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1002EBF54()
{
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 200);
  static Logger.ald.getter();
  sub_1002EDEAC(v2, v1, type metadata accessor for ADPNewLicenseTask);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 240);
    uint64_t v25 = v5;
    uint64_t v6 = *(void *)(v0 + 216);
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v7 = 138412290;
    uint64_t v9 = *(void **)(v5 + *(int *)(v6 + 24));
    *(void *)(v0 + 168) = v9;
    id v10 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v9;
    sub_1002EDE4C(v25, type metadata accessor for ADPNewLicenseTask);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%@] Fetching certificates", v7, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1002EDE4C(*(void *)(v0 + 240), type metadata accessor for ADPNewLicenseTask);
  }
  uint64_t v11 = *(int *)(v0 + 456);
  id v12 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
  uint64_t v13 = *(void *)(v0 + 304);
  uint64_t v14 = *(void *)(v0 + 272);
  uint64_t v15 = *(void *)(v0 + 216);
  uint64_t v16 = *(void *)(v0 + 200);

  v12(v13, v14);
  uint64_t v17 = *(void *)(v16 + v11);
  uint64_t v18 = *(void *)(v16 + *(int *)(type metadata accessor for NewLicenseBatch(0) + 36));
  uint64_t v19 = *(void *)(v16 + *(int *)(v15 + 28));
  uint64_t v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, char))((char *)&dword_10065B8D8
                                                                                        + dword_10065B8D8);
  uint64_t v20 = (void *)swift_task_alloc();
  *(void *)(v0 + 376) = v20;
  *uint64_t v20 = v0;
  v20[1] = sub_1002EC1E0;
  uint64_t v21 = *(void *)(v0 + 352);
  uint64_t v22 = *(void *)(v0 + 200);
  char v23 = *(unsigned char *)(v0 + 464);
  return v26(v21, v22, v17, v18, 0, v19, v23);
}

uint64_t sub_1002EC1E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)*v5;
  v6[48] = a1;
  v6[49] = a2;
  v6[50] = a3;
  v6[51] = a4;
  v6[52] = v4;
  swift_task_dealloc();
  if (v4) {
    os_log_type_t v7 = sub_1002EC560;
  }
  else {
    os_log_type_t v7 = sub_1002EC2FC;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1002EC2FC()
{
  uint64_t v1 = v0[29];
  uint64_t v2 = v0[25];
  static Logger.ald.getter();
  sub_1002EDEAC(v2, v1, type metadata accessor for ADPNewLicenseTask);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = v0[29];
    uint64_t v26 = v5;
    uint64_t v6 = v0[27];
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v7 = 138412290;
    uint64_t v9 = *(void **)(v5 + *(int *)(v6 + 24));
    v0[20] = v9;
    id v10 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v9;
    sub_1002EDE4C(v26, type metadata accessor for ADPNewLicenseTask);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%@] Fetching license", v7, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1002EDE4C(v0[29], type metadata accessor for ADPNewLicenseTask);
  }
  uint64_t v12 = v0[50];
  unint64_t v11 = v0[51];
  uint64_t v14 = v0[48];
  unint64_t v13 = v0[49];
  uint64_t v15 = (void (*)(uint64_t, uint64_t))v0[41];
  uint64_t v16 = v0[37];
  uint64_t v17 = v0[34];

  v15(v16, v17);
  sub_100012670(v14, v13);
  sub_100012670(v12, v11);
  uint64_t v18 = (void *)swift_task_alloc();
  v0[53] = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_1002EC688;
  uint64_t v19 = v0[50];
  uint64_t v20 = v0[51];
  uint64_t v21 = v0[48];
  uint64_t v22 = v0[49];
  uint64_t v23 = v0[44];
  uint64_t v24 = v0[26];
  return sub_1002ECDE0(v23, v24, v21, v22, v19, v20);
}

uint64_t sub_1002EC560()
{
  uint64_t v1 = *(void *)(v0 + 208);
  swift_release();
  sub_1002EDE4C(v1, type metadata accessor for ConfigurationBag);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1002EC688(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = (void *)*v4;
  uint64_t v6 = (void *)*v4;
  v6[54] = a1;
  v6[55] = a2;
  *((_DWORD *)v6 + 115) = a3;
  v6[56] = v3;
  swift_task_dealloc();
  unint64_t v7 = v5[49];
  uint64_t v8 = v5[48];
  sub_100013510(v5[50], v5[51]);
  sub_100013510(v8, v7);
  if (v3) {
    uint64_t v9 = sub_1002ECC5C;
  }
  else {
    uint64_t v9 = sub_1002EC814;
  }
  return _swift_task_switch(v9, 0, 0);
}

uint64_t sub_1002EC814()
{
  uint64_t v2 = *(void *)(v0 + 400);
  unint64_t v1 = *(void *)(v0 + 408);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void **)(v3 + *(int *)(v0 + 456));
  sub_100012670(*(void *)(v0 + 384), *(void *)(v0 + 392));
  sub_100012670(v2, v1);
  if (qword_10065B130 != -1) {
    swift_once();
  }
  uint64_t v7 = *(void *)(v0 + 448);
  unint64_t v8 = sub_1004E2C70(*(void *)(v0 + 384), *(void *)(v0 + 392), *(void *)(v0 + 400), *(void *)(v0 + 408), *(void *)(v0 + 432), *(void *)(v0 + 440), *(_DWORD *)(v0 + 460), v4, v5, v6);
  uint64_t v10 = *(void *)(v0 + 432);
  unint64_t v9 = *(void *)(v0 + 440);
  uint64_t v12 = *(void *)(v0 + 400);
  unint64_t v11 = *(void *)(v0 + 408);
  uint64_t v14 = *(void *)(v0 + 384);
  unint64_t v13 = *(void *)(v0 + 392);
  if (v7)
  {
    sub_1002EDE4C(*(void *)(v0 + 208), type metadata accessor for ConfigurationBag);
    swift_release();
    sub_100013510(v12, v11);
    sub_100013510(v14, v13);
    sub_100013510(v10, v9);
    sub_100013510(v14, v13);
    sub_100013510(v12, v11);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
  else
  {
    unint64_t v18 = v8;
    sub_1002EDE4C(*(void *)(v0 + 208), type metadata accessor for ConfigurationBag);
    swift_release();
    sub_100013510(v12, v11);
    sub_100013510(v14, v13);
    sub_100013510(v10, v9);
    sub_100013510(v14, v13);
    sub_100013510(v12, v11);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = *(uint64_t (**)(unint64_t))(v0 + 8);
    return v17(v18);
  }
}

uint64_t sub_1002ECB48()
{
  swift_release();
  sub_100014524(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002ECC5C()
{
  uint64_t v1 = v0[50];
  unint64_t v2 = v0[51];
  uint64_t v3 = v0[26];
  sub_100013510(v0[48], v0[49]);
  sub_100013510(v1, v2);
  swift_release();
  sub_1002EDE4C(v3, type metadata accessor for ConfigurationBag);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t type metadata accessor for ADPNewLicenseTask(uint64_t a1)
{
  return sub_10019B200(a1, qword_100660330);
}

uint64_t type metadata accessor for NewLicenseBatch(uint64_t a1)
{
  return sub_10019B200(a1, qword_100660288);
}

uint64_t sub_1002ECDE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[39] = a6;
  v7[40] = v6;
  v7[37] = a4;
  v7[38] = a5;
  v7[35] = a2;
  v7[36] = a3;
  v7[34] = a1;
  type metadata accessor for ConfigurationBag.LicenseConfiguration(0);
  v7[41] = swift_task_alloc();
  v7[42] = type metadata accessor for ConfigurationBag(0);
  v7[43] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for URL();
  v7[44] = v8;
  v7[45] = *(void *)(v8 - 8);
  v7[46] = swift_task_alloc();
  v7[47] = type metadata accessor for ADPNewLicenseTask(0);
  v7[48] = swift_task_alloc();
  v7[49] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  v7[50] = v9;
  v7[51] = *(void *)(v9 - 8);
  v7[52] = swift_task_alloc();
  v7[53] = swift_task_alloc();
  return _swift_task_switch(sub_1002ECFE0, 0, 0);
}

uint64_t sub_1002ECFE0()
{
  uint64_t v1 = *(void *)(v0 + 392);
  uint64_t v2 = *(void *)(v0 + 320);
  static Logger.ald.getter();
  sub_1002EDEAC(v2, v1, type metadata accessor for ADPNewLicenseTask);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 392);
    uint64_t v6 = *(void *)(v0 + 376);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    uint64_t v9 = *(void **)(v5 + *(int *)(v6 + 24));
    *(void *)(v0 + 264) = v9;
    id v10 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v9;
    sub_1002EDE4C(v5, type metadata accessor for ADPNewLicenseTask);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%@] Fetching dynamic license", v7, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1002EDE4C(*(void *)(v0 + 392), type metadata accessor for ADPNewLicenseTask);
  }

  uint64_t v11 = *(void *)(v0 + 424);
  uint64_t v12 = *(void *)(v0 + 400);
  uint64_t v13 = *(void *)(v0 + 408);
  uint64_t v14 = *(void *)(v0 + 320);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  *(void *)(v0 + 432) = v15;
  *(void *)(v0 + 440) = (v13 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v15(v11, v12);
  sub_1000172F8(&qword_10065E620);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
  uint64_t v17 = *(void *)(v14 + *(int *)(type metadata accessor for NewLicenseBatch(0) + 36));
  *(void *)(inited + 32) = v17;
  if (qword_10065B130 != -1) {
    swift_once();
  }
  sub_1004E27F8(inited, 0, *(void *)(v0 + 288), *(void *)(v0 + 296), *(void *)(v0 + 304), *(void *)(v0 + 312));
  *(_DWORD *)(v0 + 116) = v39;
  uint64_t v34 = *(void *)(v0 + 368);
  uint64_t v32 = *(void *)(v0 + 360);
  uint64_t v33 = *(void *)(v0 + 352);
  uint64_t v29 = *(void *)(v0 + 344);
  uint64_t v30 = *(void *)(v0 + 336);
  uint64_t v18 = *(void *)(v0 + 320);
  uint64_t v31 = *(void *)(v0 + 328);
  swift_setDeallocating();
  uint64_t v20 = *(void *)(v18 + 56);
  uint64_t v19 = *(void *)(v18 + 64);
  swift_bridgeObjectRetain();
  sub_10029DA14(v35, v36, v37, v38, v20, v19, v0 + 16);
  *(void *)(v0 + 232) = v17;
  uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
  sub_1002CE45C(v21, v22, v29);
  sub_1002EDEAC(v29 + *(int *)(v30 + 20), v31, type metadata accessor for ConfigurationBag.LicenseConfiguration);
  sub_1002EDE4C(v29, type metadata accessor for ConfigurationBag);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v34, v31, v33);
  sub_1002EDE4C(v31, type metadata accessor for ConfigurationBag.LicenseConfiguration);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 144) = &type metadata for NewLicenseRequest;
  *(void *)(v0 + 152) = sub_1002EDF14();
  uint64_t v23 = swift_allocObject();
  *(void *)(v0 + 120) = v23;
  long long v24 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v23 + 16) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v23 + 32) = v24;
  *(_OWORD *)(v23 + 48) = *(_OWORD *)(v0 + 48);
  *(void *)(v23 + 64) = *(void *)(v0 + 64);
  *(unsigned char *)(v0 + 160) = 0;
  sub_1002C66D0(v0 + 120, v0 + 72);
  uint64_t v25 = dword_10065F848;
  uint64_t v26 = (void *)swift_task_alloc();
  *(void *)(v0 + 448) = v26;
  *uint64_t v26 = v0;
  v26[1] = sub_1002ED548;
  uint64_t v27 = *(void *)(v0 + 368);
  return ((uint64_t (*)(uint64_t, char, uint64_t, uint64_t, char))((char *)&dword_10065F848 + v25))(v27, 1, v0 + 72, 0, 1);
}

uint64_t sub_1002ED548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[57] = a1;
  v5[58] = a2;
  v5[59] = a3;
  v5[60] = v3;
  swift_task_dealloc();
  sub_1002EDFB0((uint64_t)(v5 + 9));
  if (v3)
  {
    uint64_t v6 = sub_1002EDD40;
  }
  else
  {
    sub_1002C672C((uint64_t)(v5 + 15));
    uint64_t v6 = sub_1002ED6B4;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1002ED6B4()
{
  uint64_t v49 = v0;
  if ([*(id *)(v0 + 472) statusCode] != (id)200)
  {
    unint64_t v5 = *(void *)(v0 + 464);
    uint64_t v6 = *(void **)(v0 + 472);
    uint64_t v7 = *(void *)(v0 + 456);
    uint64_t v9 = *(void *)(v0 + 360);
    uint64_t v8 = *(void *)(v0 + 368);
    uint64_t v10 = *(void *)(v0 + 352);
    uint64_t v11 = type metadata accessor for MarketplaceKitError();
    sub_10026F43C();
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v11 - 8) + 104))(v12, enum case for MarketplaceKitError.invalidLicense(_:), v11);
    swift_willThrow();

    sub_100013510(v7, v5);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    goto LABEL_5;
  }
  uint64_t v1 = *(void *)(v0 + 480);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_1002EE010();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v1)
  {
    unint64_t v2 = *(void *)(v0 + 464);
    uint64_t v3 = *(void **)(v0 + 472);
    uint64_t v4 = *(void *)(v0 + 456);
    (*(void (**)(void, void))(*(void *)(v0 + 360) + 8))(*(void *)(v0 + 368), *(void *)(v0 + 352));
    swift_release();

    sub_100013510(v4, v2);
LABEL_5:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
  swift_release();
  uint64_t v15 = *(void *)(v0 + 224);
  if (v15)
  {
    uint64_t v16 = *(void *)(v0 + 384);
    uint64_t v17 = *(void *)(v0 + 320);
    swift_bridgeObjectRetain();
    static Logger.ald.getter();
    sub_1002EDEAC(v17, v16, type metadata accessor for ADPNewLicenseTask);
    swift_bridgeObjectRetain();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    BOOL v20 = os_log_type_enabled(v18, v19);
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v0 + 432);
    uint64_t v22 = *(void *)(v0 + 416);
    uint64_t v47 = *(void *)(v0 + 400);
    uint64_t v23 = *(void *)(v0 + 384);
    if (v20)
    {
      id v46 = *(void (**)(uint64_t, uint64_t))(v0 + 432);
      uint64_t v24 = *(void *)(v0 + 376);
      uint64_t v45 = *(void *)(v0 + 416);
      uint64_t v25 = swift_slowAlloc();
      os_log_type_t log = v18;
      uint64_t v26 = (void *)swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 138412546;
      uint64_t v27 = *(void **)(v23 + *(int *)(v24 + 24));
      *(void *)(v0 + 240) = v27;
      id v28 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v26 = v27;
      sub_1002EDE4C(v23, type metadata accessor for ADPNewLicenseTask);
      *(_WORD *)(v25 + 12) = 2082;
      *(void *)(v0 + 248) = v15;
      sub_1000172F8((uint64_t *)&unk_10065C5D0);
      sub_10017B8C8();
      uint64_t v29 = BidirectionalCollection<>.joined(separator:)();
      *(void *)(v0 + 256) = sub_1000143F4(v29, v30, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, log, v19, "[%@] License unavailable for %{public}s", (uint8_t *)v25, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v46(v45, v47);
    }
    else
    {
      sub_1002EDE4C(*(void *)(v0 + 384), type metadata accessor for ADPNewLicenseTask);
      swift_bridgeObjectRelease_n();

      v21(v22, v47);
    }
  }
  uint64_t v31 = Data.init(base64Encoded:options:)();
  unint64_t v33 = v32;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v34 = *(void *)(v0 + 464);
  uint64_t v35 = *(void **)(v0 + 472);
  uint64_t v36 = *(void *)(v0 + 456);
  if (v33 >> 60 == 15)
  {
    uint64_t v38 = *(void *)(v0 + 360);
    uint64_t v37 = *(void *)(v0 + 368);
    uint64_t v39 = *(void *)(v0 + 352);
    uint64_t v40 = type metadata accessor for MarketplaceKitError();
    sub_10026F43C();
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v40 - 8) + 104))(v41, enum case for MarketplaceKitError.invalidLicense(_:), v40);
    swift_willThrow();

    sub_100013510(v36, v34);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
    goto LABEL_5;
  }
  (*(void (**)(void, void))(*(void *)(v0 + 360) + 8))(*(void *)(v0 + 368), *(void *)(v0 + 352));

  sub_100013510(v36, v34);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v42 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v0 + 8);
  uint64_t v43 = *(unsigned int *)(v0 + 116);
  return v42(v31, v33, v43);
}

uint64_t sub_1002EDD40()
{
  (*(void (**)(void, void))(v0[45] + 8))(v0[46], v0[44]);
  sub_1002C672C((uint64_t)(v0 + 15));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1002EDE4C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1002EDEAC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1002EDF14()
{
  unint64_t result = qword_100660220;
  if (!qword_100660220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660220);
  }
  return result;
}

uint64_t sub_1002EDF68()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1002EDFB0(uint64_t a1)
{
  uint64_t v2 = sub_1000172F8(&qword_10065B8E8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1002EE010()
{
  unint64_t result = qword_100660228;
  if (!qword_100660228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660228);
  }
  return result;
}

void *sub_1002EE064(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    uint64_t v8 = a2[6];
    v4[5] = a2[5];
    v4[6] = v8;
    uint64_t v9 = a2[8];
    v4[7] = a2[7];
    v4[8] = v9;
    uint64_t v10 = a3[7];
    uint64_t v11 = (char *)v4 + v10;
    uint64_t v12 = (uint64_t)a2 + v10;
    uint64_t v13 = type metadata accessor for URL();
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
    uint64_t v15 = a3[8];
    long long v16 = *(_OWORD *)((char *)a2 + v15 + 24);
    *(_OWORD *)((char *)v4 + v15 + 24) = v16;
    (**(void (***)(void))(v16 - 8))();
    uint64_t v17 = a3[10];
    *(void *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(void *)((char *)v4 + v17) = *(uint64_t *)((char *)a2 + v17);
  }
  return v4;
}

uint64_t sub_1002EE210(uint64_t a1, uint64_t a2)
{
  sub_100014524(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 32);

  return sub_100014524(v6);
}

uint64_t sub_1002EE2A8(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v8;
  uint64_t v9 = a3[7];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  uint64_t v14 = a3[8];
  long long v15 = *(_OWORD *)(a2 + v14 + 24);
  *(_OWORD *)(a1 + v14 + 24) = v15;
  (**(void (***)(void))(v15 - 8))();
  uint64_t v16 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  return a1;
}

uint64_t *sub_1002EE3FC(uint64_t *a1, uint64_t *a2, int *a3)
{
  sub_1002553AC(a1, a2);
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[7];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  sub_1002553AC((uint64_t *)((char *)a1 + a3[8]), (uint64_t *)((char *)a2 + a3[8]));
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  return a1;
}

uint64_t sub_1002EE4EC(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v7 = a3[7];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[8];
  uint64_t v12 = a3[9];
  uint64_t v13 = a1 + v11;
  uint64_t v14 = (long long *)(a2 + v11);
  long long v15 = *v14;
  long long v16 = v14[1];
  *(void *)(v13 + 32) = *((void *)v14 + 4);
  *(_OWORD *)uint64_t v13 = v15;
  *(_OWORD *)(v13 + 16) = v16;
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_1002EE5C0(uint64_t a1, uint64_t a2, int *a3)
{
  sub_100014524(a1);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[8];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  sub_100014524(a1 + v12);
  long long v15 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v15;
  *(void *)(v13 + 32) = *(void *)(v14 + 32);
  uint64_t v16 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  return a1;
}

uint64_t sub_1002EE6B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002EE6C4);
}

uint64_t sub_1002EE6C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1002EE774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002EE788);
}

uint64_t sub_1002EE788(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1002EE830()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_1002EE8E4(uint64_t a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *(void *)a1 = *a2;
    unint64_t v4 = (void *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    uint64_t v8 = a2[6];
    v4[5] = a2[5];
    v4[6] = v8;
    uint64_t v9 = a2[8];
    v4[7] = a2[7];
    v4[8] = v9;
    uint64_t v10 = (int *)type metadata accessor for NewLicenseBatch(0);
    uint64_t v11 = v10[7];
    uint64_t v22 = (char *)v4 + v11;
    uint64_t v12 = (uint64_t)a2 + v11;
    uint64_t v13 = type metadata accessor for URL();
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v22, v12, v13);
    uint64_t v15 = v10[8];
    long long v16 = *(_OWORD *)((char *)a2 + v15 + 24);
    *(_OWORD *)((char *)v4 + v15 + 24) = v16;
    (**(void (***)(void))(v16 - 8))();
    *(void *)((char *)v4 + v10[9]) = *(uint64_t *)((char *)a2 + v10[9]);
    *(void *)((char *)v4 + v10[10]) = *(uint64_t *)((char *)a2 + v10[10]);
    uint64_t v17 = a3[6];
    *((unsigned char *)v4 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    uint64_t v18 = *(void **)((char *)a2 + v17);
    *(void *)((char *)v4 + v17) = v18;
    *(void *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    id v19 = v18;
  }
  swift_retain();
  return v4;
}

uint64_t sub_1002EEAD4(uint64_t a1, uint64_t a2)
{
  sub_100014524(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = type metadata accessor for NewLicenseBatch(0);
  uint64_t v5 = a1 + *(int *)(v4 + 28);
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  sub_100014524(a1 + *(int *)(v4 + 32));

  return swift_release();
}

uint64_t sub_1002EEB90(uint64_t a1, uint64_t a2, int *a3)
{
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v5;
  (**(void (***)(void))(v5 - 8))();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  uint64_t v8 = (int *)type metadata accessor for NewLicenseBatch(0);
  uint64_t v9 = v8[7];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  uint64_t v14 = v8[8];
  long long v15 = *(_OWORD *)(a2 + v14 + 24);
  *(_OWORD *)(a1 + v14 + 24) = v15;
  (**(void (***)(void))(v15 - 8))();
  *(void *)(a1 + v8[9]) = *(void *)(a2 + v8[9]);
  *(void *)(a1 + v8[10]) = *(void *)(a2 + v8[10]);
  uint64_t v16 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v17 = *(void **)(a2 + v16);
  *(void *)(a1 + v16) = v17;
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  id v18 = v17;
  swift_retain();
  return a1;
}

uint64_t *sub_1002EED30(uint64_t *a1, uint64_t *a2, int *a3)
{
  sub_1002553AC(a1, a2);
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (int *)type metadata accessor for NewLicenseBatch(0);
  uint64_t v7 = v6[7];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  sub_1002553AC((uint64_t *)((char *)a1 + v6[8]), (uint64_t *)((char *)a2 + v6[8]));
  *(uint64_t *)((char *)a1 + v6[9]) = *(uint64_t *)((char *)a2 + v6[9]);
  *(uint64_t *)((char *)a1 + v6[10]) = *(uint64_t *)((char *)a2 + v6[10]);
  *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
  uint64_t v11 = a3[6];
  uint64_t v12 = *(void **)((char *)a2 + v11);
  uint64_t v13 = *(void **)((char *)a1 + v11);
  *(uint64_t *)((char *)a1 + v11) = (uint64_t)v12;
  id v14 = v12;

  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1002EEE6C(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v7 = (int *)type metadata accessor for NewLicenseBatch(0);
  uint64_t v8 = v7[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = v7[8];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  long long v15 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v15;
  *(void *)(v13 + 32) = *(void *)(v14 + 32);
  *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
  *(void *)(a1 + v7[10]) = *(void *)(a2 + v7[10]);
  uint64_t v16 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1002EEF70(uint64_t a1, uint64_t a2, int *a3)
{
  sub_100014524(a1);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = (int *)type metadata accessor for NewLicenseBatch(0);
  uint64_t v9 = v8[7];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  uint64_t v13 = v8[8];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  sub_100014524(a1 + v13);
  long long v16 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *(_OWORD *)(v14 + 16) = v16;
  *(void *)(v14 + 32) = *(void *)(v15 + 32);
  *(void *)(a1 + v8[9]) = *(void *)(a2 + v8[9]);
  *(void *)(a1 + v8[10]) = *(void *)(a2 + v8[10]);
  uint64_t v17 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  id v18 = *(void **)(a1 + v17);
  *(void *)(a1 + v17) = *(void *)(a2 + v17);

  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_release();
  return a1;
}

uint64_t sub_1002EF0A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002EF0B4);
}

uint64_t sub_1002EF0B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NewLicenseBatch(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1002EF174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002EF188);
}

uint64_t sub_1002EF188(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for NewLicenseBatch(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1002EF244()
{
  uint64_t result = type metadata accessor for NewLicenseBatch(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1002EF2F0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    long long v5 = (void **)result;
    uint64_t v6 = *(void *)(type metadata accessor for IdentifiableAvailableUpdate(0) - 8);
    uint64_t v7 = (void *)(a2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)));
    uint64_t v8 = *v5;
    uint64_t v9 = *(void *)(v6 + 72);
    swift_bridgeObjectRetain();
    uint64_t v10 = v3 - 1;
    do
    {
      uint64_t v11 = v10;
      sub_1002BCDA0(v7, v8);
      if (v2) {
        break;
      }
      uint64_t v10 = v11 - 1;
      uint64_t v7 = (void *)((char *)v7 + v9);
    }
    while (v11);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1002EF3CC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = &v76[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  uint64_t v12 = &v76[-v11];
  sub_10050BD10((uint64_t)v83);
  if (!v84)
  {
    sub_10001729C((uint64_t)v83, &qword_10065D3A0);
    goto LABEL_36;
  }
  sub_1000172F8(&qword_10065C450);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_36:
    char v59 = 0;
    return v59 & 1;
  }
  swift_bridgeObjectRelease();
  id v13 = [a1 iTunesMetadata];
  id v14 = [v13 distributorInfo];

  id v15 = [v14 developerID];
  if (!v15)
  {
    static Logger.updates.getter();
    id v25 = a1;
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v80 = v7;
      uint64_t v78 = (void *)v6;
      uint64_t v28 = swift_slowAlloc();
      uint64_t v29 = (void *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      v83[0] = v30;
      *(_DWORD *)uint64_t v28 = 138412546;
      uint64_t v31 = sub_1005163F0();
      *(void *)&long long v81 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v29 = v31;
      *(_WORD *)(v28 + 12) = 2082;
      id v32 = [v25 bundleIdentifier];
      uint64_t v79 = (unsigned char *)v30;
      if (v32)
      {
        unint64_t v33 = v32;
        uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v36 = v35;
      }
      else
      {
        uint64_t v34 = 0x6E776F6E6B6E55;
        unint64_t v36 = 0xE700000000000000;
      }
      *(void *)&long long v81 = sub_1000143F4(v34, v36, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "[%@] Skipping update check for %{public}s because we don't have a developer for it", (uint8_t *)v28, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(unsigned char *, void *))(v80 + 8))(v12, v78);
    }
    else
    {

      (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v12, v6);
    }
    goto LABEL_36;
  }
  uint64_t v79 = v10;
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  uint64_t v19 = *(void *)(a2 + 16);
  uint64_t v80 = v7;
  if (!v19)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    uint64_t v37 = v79;
    static Logger.updates.getter();
    id v38 = a1;
    uint64_t v39 = Logger.logObject.getter();
    int v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, (os_log_type_t)v40))
    {
      int v77 = v40;
      uint64_t v41 = swift_slowAlloc();
      unint64_t v42 = (void *)swift_slowAlloc();
      v83[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 138412802;
      uint64_t v43 = sub_1005163F0();
      *(void *)&long long v81 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v78 = v42;
      *unint64_t v42 = v43;
      *(_WORD *)(v41 + 12) = 2082;
      id v44 = [v38 bundleIdentifier];
      if (v44)
      {
        uint64_t v45 = v44;
        uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v48 = v47;
      }
      else
      {
        unint64_t v48 = 0xE700000000000000;
        uint64_t v46 = 0x6E776F6E6B6E55;
      }
      os_log_type_t v60 = v77;
      *(void *)&long long v81 = sub_1000143F4(v46, v48, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v41 + 22) = 2080;
      id v61 = [v38 iTunesMetadata];
      id v62 = [v61 distributorInfo];

      id v63 = [v62 developerName];
      if (v63)
      {
        uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v66 = v65;
      }
      else
      {
        unint64_t v66 = 0xE700000000000000;
        uint64_t v64 = 0x6E776F6E6B6E55;
      }
      *(void *)&long long v81 = sub_1000143F4(v64, v66, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(unsigned char *, uint64_t))(v80 + 8))(v79, v6);
    }
    else
    {

      (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v37, v6);
    }
    goto LABEL_36;
  }
  uint64_t v78 = (void *)v6;
  uint64_t v20 = *(void *)(type metadata accessor for ApprovedDeveloper() - 8);
  uint64_t v21 = a2 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  uint64_t v22 = *(void *)(v20 + 72);
  swift_bridgeObjectRetain();
  while (ApprovedDeveloper.identifier.getter() != v16 || v23 != v18)
  {
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v24) {
      goto LABEL_21;
    }
    v21 += v22;
    if (!--v19)
    {
      swift_bridgeObjectRelease();
      uint64_t v6 = (uint64_t)v78;
      uint64_t v7 = v80;
      goto LABEL_15;
    }
  }
  swift_bridgeObjectRelease();
LABEL_21:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100017238(a3, (uint64_t)&v81, &qword_10065D3A0);
  if (v82)
  {
    sub_10018B164(&v81, (uint64_t)v83);
    sub_10050BD10((uint64_t)&v81);
    uint64_t v49 = v82;
    if (!v82)
    {
      sub_10001729C((uint64_t)&v81, &qword_10065D3A0);
      uint64_t v68 = v84;
      sub_10018AC60(v83, v84);
      sub_10047F490(v68);
      sub_10018ACBC();
      char v59 = 0;
      goto LABEL_50;
    }
    sub_10018AC60(&v81, v82);
    uint64_t v50 = sub_10047F490(v49);
    uint64_t v52 = v51;
    char v54 = v53;
    sub_100014524((uint64_t)&v81);
    uint64_t v55 = v84;
    sub_10018AC60(v83, v84);
    uint64_t v56 = sub_10047F490(v55);
    if (v54)
    {
      unsigned __int8 v69 = v54 & 1;
      if (v58)
      {
        if (v50 == v56 && v52 == v57) {
          char v59 = 1;
        }
        else {
          char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        sub_10018ACBC();
        uint64_t v73 = v50;
        uint64_t v74 = v52;
        unsigned __int8 v75 = v69;
        goto LABEL_49;
      }
      sub_10018ACBC();
      uint64_t v70 = v50;
      uint64_t v71 = v52;
      unsigned __int8 v72 = v69;
    }
    else
    {
      if ((v58 & 1) == 0)
      {
        if (v50 == v56 && v52 == v57)
        {
          sub_10018ACBC();
          sub_10018ACA4(v50, v52, 0);
          char v59 = 1;
LABEL_50:
          sub_100014524((uint64_t)v83);
          return v59 & 1;
        }
        char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
        sub_10018ACBC();
        uint64_t v73 = v50;
        uint64_t v74 = v52;
        unsigned __int8 v75 = 0;
LABEL_49:
        sub_10018ACA4(v73, v74, v75);
        goto LABEL_50;
      }
      sub_10018ACBC();
      uint64_t v70 = v50;
      uint64_t v71 = v52;
      unsigned __int8 v72 = 0;
    }
    sub_10018ACA4(v70, v71, v72);
    char v59 = 0;
    goto LABEL_50;
  }
  sub_10001729C((uint64_t)&v81, &qword_10065D3A0);
  char v59 = 1;
  return v59 & 1;
}

Swift::Int sub_1002EFDA4()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 16));
  swift_bridgeObjectRetain();
  String.hash(into:)();
  sub_10018ACBC();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_1002EFE50()
{
  return sub_1002EFDA4();
}

uint64_t sub_1002EFE8C()
{
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 16));
  swift_bridgeObjectRetain();
  String.hash(into:)();
  sub_10018ACBC();
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1002EFF30()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  sub_10018ACBC();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1002EFFD4(__n128 *a1, __n128 *a2)
{
  __n128 v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  unint64_t v6 = a1[2].n128_u64[0];
  __n128 v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  unint64_t v8 = a2[2].n128_u64[0];
  return sub_1002F0020(v5, v7) & 1;
}

uint64_t sub_1002F0020(__n128 *a1, __n128 *a2)
{
  sub_1002F9F4C(a1, &v9);
  sub_1002F9F4C(a2, &v8);
  sub_1002F9F4C(&v9, &v10);
  __n128 v4 = v10;
  if ((v11 & 1) == 0)
  {
    sub_1002F9F4C(&v8, &v12);
    if ((v13 & 1) == 0) {
      goto LABEL_3;
    }
LABEL_9:
    char v6 = 0;
    return v6 & 1;
  }
  sub_1002F9F4C(&v8, &v12);
  if ((v13 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  if (*(_OWORD *)&v4 == *(_OWORD *)&v12 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), v6 = 0, (v5 & 1) != 0))
  {
    if (a1[1].n128_u64[1] == a2[1].n128_u64[1] && a1[2].n128_u64[0] == a2[2].n128_u64[0]) {
      char v6 = 1;
    }
    else {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return v6 & 1;
}

uint64_t sub_1002F0104(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t a19, unsigned __int8 a20,uint64_t a21,char a22,uint64_t a23)
{
  return sub_1002F48A4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           (uint64_t)&type metadata for NativeDistributor,
           (uint64_t (*)(uint64_t))sub_1002F9EF8);
}

uint64_t sub_1002F0188(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v111 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2 || !*(void *)(a2 + 16))
  {
    static Logger.updates.getter();
    uint64_t v79 = Logger.logObject.getter();
    os_log_type_t v80 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v79, v80))
    {
      long long v81 = (uint8_t *)swift_slowAlloc();
      uint64_t v82 = (void *)swift_slowAlloc();
      *(_DWORD *)long long v81 = 138412290;
      uint64_t v83 = sub_1005163F0();
      *(void *)&long long aBlock = v83;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v82 = v83;
      _os_log_impl((void *)&_mh_execute_header, v79, v80, "[%@] Skipping update checks because there are no allowed developers", v81, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  __n128 v8 = self;
  swift_bridgeObjectRetain();
  id v9 = [v8 enumeratorWithOptions:0];
  sub_100017238(a1, (uint64_t)&v130, &qword_10065D3A0);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  sub_10001733C((uint64_t)&v130, v10 + 24, &qword_10065D3A0);
  *(void *)&long long v124 = sub_1002F9EE4;
  *((void *)&v124 + 1) = v10;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v123 = sub_1004E598C;
  *((void *)&v123 + 1) = &unk_100640968;
  char v11 = _Block_copy(&aBlock);
  swift_release();
  [v9 setFilter:v11];
  _Block_release(v11);
  id v12 = [v9 nextObject];
  id v116 = v9;
  if (!v12)
  {
    id v14 = &_swiftEmptyDictionarySingleton;
    goto LABEL_41;
  }
  id v13 = v12;
  id v14 = &_swiftEmptyDictionarySingleton;
  p_base_prots = &XPCClientRegistry.base_prots;
  do
  {
    int64_t v118 = (int64_t)v14;
    while (1)
    {
      id v16 = [v13 iTunesMetadata];
      id v17 = objc_msgSend(v16, (SEL)p_base_prots[374]);

      id v18 = [v17 distributorID];
      if (v18)
      {
        uint64_t v19 = v18;
        uint64_t v20 = p_base_prots;
        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v23 = v22;

        id v24 = [v13 bundleIdentifier];
        if (!v24) {
          goto LABEL_15;
        }
        id v25 = v24;
        uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v28 = v27;

        if (v21 == v26 && v23 == v28)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v30 & 1) == 0)
          {
LABEL_15:
            *((void *)&v120 + 1) = &type metadata for NativeDistributor;
            unint64_t v31 = sub_1002F9EF8();
            p_base_prots = v20;
            goto LABEL_19;
          }
        }
        swift_bridgeObjectRelease();
        id v32 = [v17 domain];
        p_base_prots = v20;
        if (v32) {
          break;
        }
      }

      unint64_t v121 = 0;
      long long v120 = 0u;
      long long v119 = 0u;

      sub_10001729C((uint64_t)&v119, &qword_10065D3A0);
LABEL_7:
      id v13 = [v9 nextObject];
      if (!v13)
      {
        id v14 = (void *)v118;
        goto LABEL_41;
      }
    }
    unint64_t v33 = v32;
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v34;

    *((void *)&v120 + 1) = &type metadata for WebDistributor;
    unint64_t v31 = sub_1002BEA38();
LABEL_19:
    unint64_t v121 = v31;

    *(void *)&long long v119 = v21;
    *((void *)&v119 + 1) = v23;
    sub_10018B164(&v119, (uint64_t)&aBlock);
    id v35 = [v13 iTunesMetadata];
    id v36 = objc_msgSend(v35, (SEL)p_base_prots[374]);

    id v37 = [v36 accountID];
    if (!v37) {
      goto LABEL_22;
    }
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v40 = v39;

    uint64_t v41 = *((void *)&v123 + 1);
    uint64_t v42 = v124;
    sub_10018AC60(&aBlock, *((uint64_t *)&v123 + 1));
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v42 + 48))(v41, v42))
    {
      swift_bridgeObjectRelease();
LABEL_22:

      sub_100014524((uint64_t)&aBlock);
      goto LABEL_7;
    }
    id v43 = [v13 bundleIdentifier];
    if (v43)
    {
      id v44 = v43;
      uint64_t v115 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v114 = v45;

      sub_10019B17C((uint64_t)&aBlock, (uint64_t)&v119);
      uint64_t v46 = *((void *)&v120 + 1);
      sub_10018AC60(&v119, *((uint64_t *)&v120 + 1));
      swift_bridgeObjectRetain();
      uint64_t v47 = sub_10047F490(v46);
      unint64_t v49 = v48;
      char v51 = v50;
      sub_100014524((uint64_t)&v119);
      if (*(void *)(v118 + 16))
      {
        v130.n128_u64[0] = v47;
        v130.n128_u64[1] = v49;
        char v131 = v51 & 1;
        uint64_t v132 = v38;
        uint64_t v133 = v40;
        unint64_t v52 = sub_1004527A0(&v130);
        char v53 = _swiftEmptyArrayStorage;
        if (v54)
        {
          char v53 = *(void **)(*(void *)(v118 + 56) + 8 * v52);
          swift_bridgeObjectRetain();
        }
      }
      else
      {
        char v53 = _swiftEmptyArrayStorage;
      }
      unint64_t v117 = v53;
      sub_10018ACBC();
      swift_bridgeObjectRelease();
      id v55 = [v13 iTunesMetadata];
      id v56 = [v55 storeItemIdentifier];

      *(void *)&long long v119 = v56;
      uint64_t v113 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v112 = v57;
      id v58 = [v13 iTunesMetadata];
      id v59 = [v58 versionIdentifier];

      *(void *)&long long v119 = v59;
      uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v62 = v61;
      id v63 = v117;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v65 = v63;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        unint64_t v65 = sub_10028FDC8(0, v63[2] + 1, 1, v63);
      }
      unint64_t v67 = v65[2];
      unint64_t v66 = v65[3];
      if (v67 >= v66 >> 1) {
        unint64_t v65 = sub_10028FDC8((void *)(v66 > 1), v67 + 1, 1, v65);
      }
      unint64_t v117 = v65;
      v65[2] = v67 + 1;
      uint64_t v68 = &v65[6 * v67];
      uint64_t v69 = v114;
      v68[4] = v115;
      v68[5] = v69;
      uint64_t v70 = v112;
      v68[6] = v113;
      v68[7] = v70;
      v68[8] = v60;
      v68[9] = v62;
      sub_10019B17C((uint64_t)&aBlock, (uint64_t)&v119);
      uint64_t v71 = *((void *)&v120 + 1);
      sub_10018AC60(&v119, *((uint64_t *)&v120 + 1));
      uint64_t v72 = sub_10047F490(v71);
      uint64_t v74 = v73;
      char v76 = v75 & 1;
      sub_100014524((uint64_t)&v119);
      v126[0] = v72;
      v126[1] = v74;
      char v127 = v76;
      uint64_t v128 = v38;
      uint64_t v129 = v40;
      int64_t v77 = v118;
      char v78 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v119 = v77;
      sub_10052A2F0((uint64_t)v117, (uint64_t)v126, v78);
      int64_t v118 = v119;
      swift_bridgeObjectRelease();
      sub_10018ACBC();

      swift_bridgeObjectRelease();
      id v9 = v116;
      p_base_prots = v20;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    sub_100014524((uint64_t)&aBlock);
    id v13 = [v9 nextObject];
    id v14 = (void *)v118;
  }
  while (v13);
LABEL_41:
  uint64_t v85 = v14[8];
  unint64_t v117 = v14 + 8;
  uint64_t v86 = 1 << *((unsigned char *)v14 + 32);
  uint64_t v87 = -1;
  if (v86 < 64) {
    uint64_t v87 = ~(-1 << v86);
  }
  unint64_t v88 = v87 & v85;
  int64_t v118 = (unint64_t)(v86 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v90 = 0;
  uint64_t v84 = _swiftEmptyArrayStorage;
  if (!v88) {
    goto LABEL_45;
  }
  while (2)
  {
    unint64_t v91 = __clz(__rbit64(v88));
    v88 &= v88 - 1;
    unint64_t v92 = v91 | (v90 << 6);
LABEL_59:
    uint64_t v96 = v14[7];
    id v97 = v14;
    uint64_t v98 = v14[6] + 40 * v92;
    uint64_t v100 = *(void *)v98;
    uint64_t v99 = *(void *)(v98 + 8);
    uint64_t v102 = *(void *)(v98 + 24);
    uint64_t v101 = *(void *)(v98 + 32);
    uint64_t v103 = *(void *)(v96 + 8 * v92);
    if (*(unsigned char *)(v98 + 16))
    {
      *((void *)&v123 + 1) = &type metadata for WebDistributor;
      unint64_t v104 = sub_1002BEA38();
    }
    else
    {
      *((void *)&v123 + 1) = &type metadata for NativeDistributor;
      unint64_t v104 = sub_1002F9EF8();
    }
    *(void *)&long long v124 = v104;
    *(void *)&long long aBlock = v100;
    *((void *)&aBlock + 1) = v99;
    sub_10018B164(&aBlock, (uint64_t)&v119);
    sub_10018B164(&v119, (uint64_t)&aBlock);
    *((void *)&v124 + 1) = v102;
    *(void *)&long long v125 = v101;
    *((void *)&v125 + 1) = v103;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1001C617C();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_10028FCB8(0, v84[2] + 1, 1, v84);
      uint64_t v84 = (void *)result;
    }
    id v14 = v97;
    unint64_t v106 = v84[2];
    unint64_t v105 = v84[3];
    if (v106 >= v105 >> 1)
    {
      uint64_t result = (uint64_t)sub_10028FCB8((void *)(v105 > 1), v106 + 1, 1, v84);
      uint64_t v84 = (void *)result;
    }
    v84[2] = v106 + 1;
    id v107 = &v84[8 * v106];
    long long v108 = aBlock;
    long long v109 = v123;
    long long v110 = v125;
    v107[4] = v124;
    v107[5] = v110;
    v107[2] = v108;
    v107[3] = v109;
    if (v88) {
      continue;
    }
    break;
  }
LABEL_45:
  int64_t v93 = v90 + 1;
  if (__OFADD__(v90, 1))
  {
    __break(1u);
    goto LABEL_71;
  }
  if (v93 >= v118) {
    goto LABEL_68;
  }
  unint64_t v94 = v117[v93];
  ++v90;
  if (v94) {
    goto LABEL_58;
  }
  int64_t v90 = v93 + 1;
  if (v93 + 1 >= v118) {
    goto LABEL_68;
  }
  unint64_t v94 = v117[v90];
  if (v94) {
    goto LABEL_58;
  }
  int64_t v90 = v93 + 2;
  if (v93 + 2 >= v118) {
    goto LABEL_68;
  }
  unint64_t v94 = v117[v90];
  if (v94)
  {
LABEL_58:
    unint64_t v88 = (v94 - 1) & v94;
    unint64_t v92 = __clz(__rbit64(v94)) + (v90 << 6);
    goto LABEL_59;
  }
  int64_t v95 = v93 + 3;
  if (v95 >= v118)
  {
LABEL_68:

    swift_release();
    swift_bridgeObjectRelease();
    return (uint64_t)v84;
  }
  unint64_t v94 = v117[v95];
  if (v94)
  {
    int64_t v90 = v95;
    goto LABEL_58;
  }
  while (1)
  {
    int64_t v90 = v95 + 1;
    if (__OFADD__(v95, 1)) {
      break;
    }
    if (v90 >= v118) {
      goto LABEL_68;
    }
    unint64_t v94 = v117[v90];
    ++v95;
    if (v94) {
      goto LABEL_58;
    }
  }
LABEL_71:
  __break(1u);
  return result;
}

uint64_t sub_1002F0CFC(uint64_t a1, uint64_t a2, char a3)
{
  *(unsigned char *)(v3 + 756) = a3;
  *(void *)(v3 + 528) = a2;
  *(void *)(v3 + 520) = a1;
  uint64_t v4 = type metadata accessor for IdentifiableAvailableUpdate(0);
  *(void *)(v3 + 536) = v4;
  *(void *)(v3 + 544) = *(void *)(v4 - 8);
  *(void *)(v3 + 552) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for AvailableUpdate(0);
  *(void *)(v3 + 560) = v5;
  *(void *)(v3 + 568) = *(void *)(v5 - 8);
  *(void *)(v3 + 576) = swift_task_alloc();
  *(void *)(v3 + 584) = swift_task_alloc();
  *(void *)(v3 + 592) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for LogKey.Prefix();
  *(void *)(v3 + 600) = v6;
  *(void *)(v3 + 608) = *(void *)(v6 - 8);
  *(void *)(v3 + 616) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  *(void *)(v3 + 624) = v7;
  *(void *)(v3 + 632) = *(void *)(v7 - 8);
  *(void *)(v3 + 640) = swift_task_alloc();
  *(void *)(v3 + 648) = swift_task_alloc();
  *(void *)(v3 + 656) = swift_task_alloc();
  *(void *)(v3 + 664) = swift_task_alloc();
  *(void *)(v3 + 672) = swift_task_alloc();
  *(void *)(v3 + 680) = swift_task_alloc();
  *(void *)(v3 + 688) = swift_task_alloc();
  return _swift_task_switch(sub_1002F0F40, 0, 0);
}

uint64_t sub_1002F0F40()
{
  uint64_t v79 = v0;
  uint64_t v64 = (void **)(v0 + 63);
  uint64_t v1 = v0[65];
  v0[53] = _swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(v1 + 16);
  v0[87] = v2;
  if (v2)
  {
    *((_DWORD *)v0 + 188) = enum case for LogKey.Prefix.undefined(_:);
    v0[88] = 0;
    uint64_t v3 = v1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v63 = (uint64_t)(v0 + 24);
    sub_1002F9C6C(v3, (uint64_t)(v0 + 24));
    static Logger.updates.getter();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 138412290;
      uint64_t v8 = sub_1005163F0();
      v0[64] = v8;
      uint64_t v0 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v7 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%@] Sending installed versions:", v6, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    uint64_t v9 = v0[86];
    uint64_t v10 = v0[79];
    uint64_t v11 = v0[78];

    id v12 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v0[89] = v12;
    v0[90] = (v10 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v12(v9, v11);
    uint64_t v13 = *(void *)(v0[31] + 16);
    if (v13)
    {
      uint64_t v71 = v0 + 61;
      id v14 = (unint64_t *)(swift_bridgeObjectRetain() + 72);
      unint64_t v66 = v12;
      do
      {
        unint64_t v17 = *(v14 - 4);
        unint64_t v18 = *(v14 - 2);
        uint64_t v73 = *(v14 - 5);
        uint64_t v74 = *(v14 - 3);
        uint64_t v20 = *(v14 - 1);
        unint64_t v19 = *v14;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        static Logger.updates.getter();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v21 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v21, v22))
        {
          os_log_type_t v69 = v22;
          uint64_t v70 = v13;
          uint64_t v23 = swift_slowAlloc();
          uint64_t v68 = (void *)swift_slowAlloc();
          *uint64_t v71 = swift_slowAlloc();
          *(_DWORD *)uint64_t v23 = 138413058;
          if (qword_10065B150 != -1) {
            swift_once();
          }
          TaskLocal.get()();
          uint64_t v24 = v0[37];
          if (!v24) {
            goto LABEL_13;
          }
          swift_release();
          swift_release();
          swift_release();
          os_unfair_lock_lock((os_unfair_lock_t)(v24 + 24));
          sub_100006250((void **)(v24 + 16), v64);
          os_unfair_lock_unlock((os_unfair_lock_t)(v24 + 24));
          uint64_t v25 = (uint64_t)*v64;
          swift_release();
          uint64_t v0 = v65;
          if (!v25)
          {
LABEL_13:
            (*(void (**)(void, void, void))(v0[76] + 104))(v0[77], *((unsigned int *)v0 + 188), v0[75]);
            id v26 = objc_allocWithZone((Class)type metadata accessor for LogKey());
            uint64_t v25 = LogKey.init(prefix:)();
          }
          uint64_t v27 = v0[85];
          uint64_t v67 = v0[78];
          *(void *)(v23 + 4) = v25;
          void *v68 = v25;
          *(_WORD *)(v23 + 12) = 2082;
          swift_bridgeObjectRetain();
          *(void *)(v23 + 14) = sub_1000143F4(v73, v17, v71);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v23 + 22) = 2082;
          swift_bridgeObjectRetain();
          *(void *)(v23 + 24) = sub_1000143F4(v74, v18, v71);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v23 + 32) = 2082;
          swift_bridgeObjectRetain();
          *(void *)(v23 + 34) = sub_1000143F4(v20, v19, v71);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v21, v69, "[%@] %{public}s - %{public}s : %{public}s", (uint8_t *)v23, 0x2Au);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          id v12 = v66;
          v66(v27, v67);
          uint64_t v13 = v70;
        }
        else
        {
          uint64_t v15 = v0[85];
          uint64_t v16 = v0[78];
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();

          v12(v15, v16);
        }
        v14 += 6;
        --v13;
      }
      while (v13);
      swift_bridgeObjectRelease();
    }
    char v45 = *((unsigned char *)v0 + 756);
    uint64_t v46 = (long long *)v0[66];
    sub_1002F9C6C(v63, (uint64_t)(v0 + 2));
    long long v47 = *v46;
    long long v48 = v46[2];
    *((_OWORD *)v0 + 6) = v46[1];
    *((_OWORD *)v0 + 7) = v48;
    *((_OWORD *)v0 + 5) = v47;
    long long v49 = v46[3];
    long long v50 = v46[4];
    long long v51 = v46[5];
    *(_OWORD *)((char *)v0 + 175) = *(long long *)((char *)v46 + 95);
    *((_OWORD *)v0 + 9) = v50;
    *((_OWORD *)v0 + 10) = v51;
    *((_OWORD *)v0 + 8) = v49;
    *((unsigned char *)v0 + 191) = v45;
    sub_10018AB28((uint64_t)v46);
    unint64_t v52 = (void *)swift_task_alloc();
    v0[91] = v52;
    *unint64_t v52 = v0;
    v52[1] = sub_1002F1A60;
    return sub_1004C85B8();
  }
  else
  {
    if (_swiftEmptyArrayStorage[2])
    {
      static Logger.updates.getter();
      swift_bridgeObjectRetain_n();
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.default.getter();
      BOOL v30 = os_log_type_enabled(v28, v29);
      uint64_t v31 = v0[82];
      id v32 = v0;
      uint64_t v33 = v0[79];
      uint64_t v34 = v0[78];
      if (v30)
      {
        uint64_t v72 = v34;
        uint64_t v35 = swift_slowAlloc();
        id v36 = (void *)swift_slowAlloc();
        uint64_t v76 = swift_slowAlloc();
        *(_DWORD *)uint64_t v35 = 138412546;
        uint64_t v37 = sub_1005163F0();
        v32[62] = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v36 = v37;
        *(_WORD *)(v35 + 12) = 2082;
        uint64_t v38 = _swiftEmptyArrayStorage[2];
        v32[55] = v38;
        uint64_t v77 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v78 = v39;
        v40._uint64_t countAndFlagsBits = 32;
        v40._object = (void *)0xE100000000000000;
        String.append(_:)(v40);
        v41._uint64_t countAndFlagsBits = 0x657461647075;
        v41._object = (void *)0xE600000000000000;
        String.append(_:)(v41);
        if (v38 == 1) {
          uint64_t v42 = 0;
        }
        else {
          uint64_t v42 = 115;
        }
        if (v38 == 1) {
          unint64_t v43 = 0xE000000000000000;
        }
        else {
          unint64_t v43 = 0xE100000000000000;
        }
        unint64_t v44 = v43;
        String.append(_:)(*(Swift::String *)&v42);
        swift_bridgeObjectRelease();
        v32[51] = sub_1000143F4(v77, v78, &v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "[%@] Discovered %{public}s", (uint8_t *)v35, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v72);
      }
      else
      {
        swift_bridgeObjectRelease_n();

        (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v34);
      }
      uint64_t v0 = v32;
    }
    else
    {
      static Logger.updates.getter();
      char v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v54, v55))
      {
        id v56 = (uint8_t *)swift_slowAlloc();
        uint64_t v57 = (void *)swift_slowAlloc();
        *(_DWORD *)id v56 = 138412290;
        uint64_t v58 = sub_1005163F0();
        v65[48] = v58;
        uint64_t v0 = v65;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v57 = v58;
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "[%@] No updates discovered", v56, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      uint64_t v59 = v0[81];
      uint64_t v60 = v0[79];
      uint64_t v61 = v0[78];

      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v61);
    }
    swift_beginAccess();
    uint64_t v75 = v0[53];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v62 = (uint64_t (*)(uint64_t))v0[1];
    return v62(v75);
  }
}

uint64_t sub_1002F1A60(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 736) = a1;
  *(void *)(v3 + 744) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1002F3130;
  }
  else {
    uint64_t v4 = sub_1002F1B78;
  }
  return _swift_task_switch(v4, 0, 0);
}

void sub_1002F1B78()
{
  uint64_t v198 = v0;
  uint64_t v178 = (uint64_t *)(v0 + 488);
  uint64_t v1 = *(void *)(v0 + 736);
  uint64_t v188 = *(void *)(v1 + 16);
  if (!v188)
  {
    swift_bridgeObjectRelease();
    uint64_t v177 = *(void *)(v0 + 744);
LABEL_46:
    os_log_t log = (os_log_t)(v0 + 504);
    sub_1002F9CC8(v0 + 16);
    sub_1002F9D1C(v0 + 192);
    uint64_t v96 = *(void *)(v0 + 704) + 1;
    if (v96 == *(void *)(v0 + 696))
    {
      swift_bridgeObjectRelease();
      uint64_t v97 = *(void *)(v0 + 424);
      if (*(void *)(v97 + 16))
      {
        static Logger.updates.getter();
        swift_bridgeObjectRetain_n();
        uint64_t v98 = Logger.logObject.getter();
        os_log_type_t v99 = static os_log_type_t.default.getter();
        BOOL v100 = os_log_type_enabled(v98, v99);
        uint64_t v101 = *(void *)(v0 + 656);
        uint64_t v102 = *(void *)(v0 + 632);
        uint64_t v103 = *(void *)(v0 + 624);
        if (v100)
        {
          uint64_t v187 = *(void *)(v0 + 624);
          uint64_t v104 = swift_slowAlloc();
          unint64_t v105 = (void *)swift_slowAlloc();
          uint64_t v195 = swift_slowAlloc();
          *(_DWORD *)uint64_t v104 = 138412546;
          uint64_t v106 = sub_1005163F0();
          *(void *)(v0 + 496) = v106;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *unint64_t v105 = v106;
          *(_WORD *)(v104 + 12) = 2082;
          uint64_t v107 = *(void *)(v97 + 16);
          *(void *)(v192 + 440) = v107;
          uint64_t v196 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v197 = v108;
          unint64_t v109 = 0xE100000000000000;
          v110._uint64_t countAndFlagsBits = 32;
          v110._object = (void *)0xE100000000000000;
          String.append(_:)(v110);
          v111._uint64_t countAndFlagsBits = 0x657461647075;
          v111._object = (void *)0xE600000000000000;
          String.append(_:)(v111);
          BOOL v112 = v107 == 1;
          uint64_t v0 = v192;
          if (v112) {
            uint64_t v113 = 0;
          }
          else {
            uint64_t v113 = 115;
          }
          if (v112) {
            unint64_t v109 = 0xE000000000000000;
          }
          unint64_t v114 = v109;
          String.append(_:)(*(Swift::String *)&v113);
          swift_bridgeObjectRelease();
          *(void *)(v192 + 408) = sub_1000143F4(v196, v197, &v195);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v98, v99, "[%@] Discovered %{public}s", (uint8_t *)v104, 0x16u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v101, v187);
        }
        else
        {
          swift_bridgeObjectRelease_n();

          (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v101, v103);
        }
      }
      else
      {
        static Logger.updates.getter();
        uint64_t v151 = Logger.logObject.getter();
        os_log_type_t v152 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v151, v152))
        {
          uint64_t v153 = (uint8_t *)swift_slowAlloc();
          uint64_t v154 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v153 = 138412290;
          uint64_t v0 = v192;
          uint64_t v155 = sub_1005163F0();
          *(void *)(v192 + 384) = v155;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v154 = v155;
          _os_log_impl((void *)&_mh_execute_header, v151, v152, "[%@] No updates discovered", v153, 0xCu);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        uint64_t v156 = *(void *)(v0 + 648);
        uint64_t v157 = *(void *)(v192 + 632);
        uint64_t v158 = *(void *)(v192 + 624);

        (*(void (**)(uint64_t, uint64_t))(v157 + 8))(v156, v158);
        uint64_t v0 = v192;
      }
      swift_beginAccess();
      uint64_t v191 = *(void *)(v0 + 424);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unint64_t v159 = *(void (**)(uint64_t))(v0 + 8);
      v159(v191);
      return;
    }
    uint64_t v166 = v0 + 192;
    uint64_t v167 = v0 + 16;
    *(void *)(v0 + 704) = v96;
    sub_1002F9C6C(*(void *)(v0 + 520) + (v96 << 6) + 32, v0 + 192);
    static Logger.updates.getter();
    uint64_t v115 = Logger.logObject.getter();
    os_log_type_t v116 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v115, v116))
    {
      unint64_t v117 = (uint64_t *)(v0 + 512);
      int64_t v118 = (uint8_t *)swift_slowAlloc();
      long long v119 = (void *)swift_slowAlloc();
      *(_DWORD *)int64_t v118 = 138412290;
      uint64_t v0 = v192;
      uint64_t v120 = sub_1005163F0();
      *unint64_t v117 = v120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v119 = v120;
      _os_log_impl((void *)&_mh_execute_header, v115, v116, "[%@] Sending installed versions:", v118, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    uint64_t v121 = *(void *)(v0 + 688);
    uint64_t v122 = *(void *)(v0 + 632);
    uint64_t v123 = *(void *)(v0 + 624);

    long long v124 = *(void (**)(uint64_t, uint64_t))(v122 + 8);
    *(void *)(v0 + 712) = v124;
    *(void *)(v0 + 720) = (v122 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v124(v121, v123);
    uint64_t v125 = *(void *)(*(void *)(v0 + 248) + 16);
    if (!v125)
    {
LABEL_72:
      uint64_t v142 = v0;
      char v143 = *(unsigned char *)(v0 + 756);
      char v144 = *(long long **)(v142 + 528);
      sub_1002F9C6C(v166, v167);
      long long v145 = *v144;
      long long v146 = v144[2];
      *(_OWORD *)(v142 + 96) = v144[1];
      *(_OWORD *)(v142 + 112) = v146;
      *(_OWORD *)(v142 + 80) = v145;
      long long v147 = v144[3];
      long long v148 = v144[4];
      long long v149 = v144[5];
      *(_OWORD *)(v142 + 175) = *(long long *)((char *)v144 + 95);
      *(_OWORD *)(v142 + 144) = v148;
      *(_OWORD *)(v142 + 160) = v149;
      *(_OWORD *)(v142 + 128) = v147;
      *(unsigned char *)(v142 + 191) = v143;
      sub_10018AB28((uint64_t)v144);
      uint64_t v150 = (void *)swift_task_alloc();
      *(void *)(v142 + 728) = v150;
      *uint64_t v150 = v142;
      v150[1] = sub_1002F1A60;
      sub_1004C85B8();
      return;
    }
    id v126 = (unint64_t *)(swift_bridgeObjectRetain() + 72);
    long long v189 = v124;
    while (1)
    {
      unint64_t v129 = *(v126 - 4);
      uint64_t v193 = *(v126 - 5);
      uint64_t v131 = *(v126 - 3);
      unint64_t v130 = *(v126 - 2);
      uint64_t v132 = *(v126 - 1);
      unint64_t v133 = *v126;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      static Logger.updates.getter();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      char v134 = Logger.logObject.getter();
      os_log_type_t v135 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v134, v135)) {
        break;
      }
      uint64_t v127 = *(void *)(v0 + 680);
      uint64_t v128 = *(void *)(v0 + 624);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      v189(v127, v128);
LABEL_60:
      v126 += 6;
      if (!--v125)
      {
        swift_bridgeObjectRelease();
        goto LABEL_72;
      }
    }
    uint64_t v171 = v131;
    os_log_type_t v174 = v135;
    uint64_t v180 = v132;
    uint64_t v136 = (_DWORD *)swift_slowAlloc();
    uint64_t v173 = (void *)swift_slowAlloc();
    uint64_t *v178 = swift_slowAlloc();
    *uint64_t v136 = 138413058;
    if (qword_10065B150 != -1) {
      swift_once();
    }
    TaskLocal.get()();
    uint64_t v137 = *(void *)(v0 + 296);
    unint64_t v184 = v136;
    if (v137)
    {
      swift_release();
      swift_release();
      swift_release();
      unint64_t v44 = (os_unfair_lock_s *)(v137 + 24);
      os_unfair_lock_lock((os_unfair_lock_t)(v137 + 24));
      sub_100006250((void **)(v137 + 16), (void **)&log->isa);
      if (v177) {
        goto LABEL_78;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(v137 + 24));
      uint64_t isa = (uint64_t)log->isa;
      swift_release();
      if (isa)
      {
        uint64_t v177 = 0;
        uint64_t v139 = v193;
LABEL_70:
        uint64_t v141 = *(void *)(v0 + 680);
        uint64_t v194 = *(void *)(v0 + 624);
        *(void *)(v184 + 1) = isa;
        void *v173 = isa;
        *((_WORD *)v184 + 6) = 2082;
        swift_bridgeObjectRetain();
        *(void *)((char *)v184 + 14) = sub_1000143F4(v139, v129, v178);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        *((_WORD *)v184 + 11) = 2082;
        swift_bridgeObjectRetain();
        *((void *)v184 + 3) = sub_1000143F4(v171, v130, v178);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        *((_WORD *)v184 + 16) = 2082;
        swift_bridgeObjectRetain();
        *(void *)((char *)v184 + 34) = sub_1000143F4(v180, v133, v178);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v134, v174, "[%@] %{public}s - %{public}s : %{public}s", (uint8_t *)v184, 0x2Au);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v189(v141, v194);
        goto LABEL_60;
      }
      uint64_t v177 = 0;
    }
    uint64_t v139 = v193;
    (*(void (**)(void, void, void))(*(void *)(v0 + 608) + 104))(*(void *)(v0 + 616), *(unsigned int *)(v0 + 752), *(void *)(v0 + 600));
    id v140 = objc_allocWithZone((Class)type metadata accessor for LogKey());
    uint64_t isa = LogKey.init(prefix:)();
    goto LABEL_70;
  }
  unint64_t v2 = 0;
  int64_t v172 = (uint64_t *)(v0 + 432);
  unint64_t v160 = (void **)(v0 + 448);
  uint64_t v163 = (uint64_t *)(v0 + 464);
  uint64_t v164 = (uint64_t *)(v0 + 456);
  __int16 v161 = (uint64_t *)(v0 + 480);
  uint64_t v162 = (uint64_t *)(v0 + 472);
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v0 + 568) + 80);
  uint64_t v186 = v1 + ((v3 + 32) & ~v3);
  uint64_t v177 = *(void *)(v0 + 744);
  uint64_t v185 = *(void *)(v0 + 736);
  while (v2 < *(void *)(v1 + 16))
  {
    sub_1002F9D70(v186 + *(void *)(*(void *)(v0 + 568) + 72) * v2, *(void *)(v0 + 592), type metadata accessor for AvailableUpdate);
    uint64_t v8 = *(void **)(v0 + 248);
    uint64_t v9 = v8[2];
    unint64_t v190 = v2;
    if (v9)
    {
      uint64_t v10 = *(uint64_t **)(v0 + 592);
      uint64_t v11 = v8[4];
      unint64_t v12 = v8[5];
      uint64_t v14 = v8[8];
      unint64_t v13 = v8[9];
      uint64_t v15 = *v10;
      uint64_t v16 = v10[1];
      BOOL v17 = v8[6] == *v10 && v8[7] == v16;
      if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_33;
      }
      uint64_t v181 = v16;
      if (v9 != 1)
      {
        unint64_t v18 = v8 + 15;
        uint64_t v19 = 1;
        while (1)
        {
          uint64_t v20 = v19 + 1;
          if (__OFADD__(v19, 1)) {
            goto LABEL_86;
          }
          uint64_t v21 = *(v18 - 5);
          unint64_t v12 = *(v18 - 4);
          uint64_t v14 = *(v18 - 1);
          unint64_t v13 = *v18;
          BOOL v22 = *(v18 - 3) == v15 && *(v18 - 2) == v181;
          if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          ++v19;
          v18 += 6;
          if (v20 == v9) {
            goto LABEL_22;
          }
        }
        uint64_t v0 = v192;
        uint64_t v11 = v21;
LABEL_33:
        uint64_t v183 = v11;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v50 = sub_1004CF960(v14, v13);
        if ((v51 & 1) == 0)
        {
          unint64_t v52 = v50;
          uint64_t v53 = *(void *)(v0 + 592);
          uint64_t v54 = *(void *)(v53 + 16);
          unint64_t v55 = *(void *)(v53 + 24);
          swift_bridgeObjectRetain();
          unint64_t v56 = sub_1004CF960(v54, v55);
          if ((v57 & 1) == 0 && v52 < v56)
          {
            uint64_t v58 = *(void *)(v0 + 592);
            uint64_t v59 = *(void **)(v0 + 584);
            uint64_t v60 = *(int **)(v0 + 560);
            uint64_t v61 = *(void **)(v0 + 552);
            uint64_t v62 = *(int **)(v0 + 536);
            uint64_t v63 = *(void *)(v192 + 232);
            uint64_t v64 = *(void *)(v192 + 240);
            sub_1002F9D70(v58, (uint64_t)v59, type metadata accessor for AvailableUpdate);
            void *v61 = v63;
            v61[1] = v64;
            v61[2] = v183;
            v61[3] = v12;
            uint64_t v65 = v59[1];
            v61[4] = *v59;
            v61[5] = v65;
            uint64_t v66 = v59[3];
            v61[6] = v59[2];
            v61[7] = v66;
            uint64_t v67 = (char *)v59 + v60[8];
            uint64_t v68 = (char *)v61 + v62[8];
            uint64_t v69 = type metadata accessor for URL();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 32))(v68, v67, v69);
            uint64_t v70 = v59[5];
            uint64_t v71 = (void *)((char *)v61 + v62[9]);
            *uint64_t v71 = v59[4];
            v71[1] = v70;
            uint64_t v72 = v59[7];
            uint64_t v73 = (void *)((char *)v61 + v62[10]);
            *uint64_t v73 = v59[6];
            v73[1] = v72;
            uint64_t v74 = (void *)((char *)v59 + v60[9]);
            uint64_t v76 = *v74;
            uint64_t v75 = v74[1];
            uint64_t v77 = (void *)((char *)v61 + v62[11]);
            *uint64_t v77 = v76;
            v77[1] = v75;
            sub_10001733C((uint64_t)v59 + v60[10], (uint64_t)v61 + v62[12], &qword_10065C3C0);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v78 = *(void *)(v192 + 424);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v78 = sub_10028FF24(0, *(void *)(v78 + 16) + 1, 1, v78);
            }
            unint64_t v7 = v190;
            unint64_t v80 = *(void *)(v78 + 16);
            unint64_t v79 = *(void *)(v78 + 24);
            if (v80 >= v79 >> 1) {
              unint64_t v78 = sub_10028FF24(v79 > 1, v80 + 1, 1, v78);
            }
            uint64_t v81 = *(void *)(v192 + 552);
            uint64_t v82 = *(void *)(v192 + 544);
            *(void *)(v78 + 16) = v80 + 1;
            uint64_t v83 = v78
                + ((*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80))
                + *(void *)(v82 + 72) * v80;
            uint64_t v0 = v192;
            sub_1002F9E38(v81, v83);
            *(void *)(v192 + 424) = v78;
            uint64_t v1 = v185;
            goto LABEL_5;
          }
        }
        uint64_t v84 = *(void *)(v0 + 592);
        uint64_t v85 = *(void *)(v0 + 576);
        static Logger.updates.getter();
        sub_1002F9D70(v84, v85, type metadata accessor for AvailableUpdate);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v86 = Logger.logObject.getter();
        os_log_type_t typea = static os_log_type_t.error.getter();
        BOOL v87 = os_log_type_enabled(v86, typea);
        unint64_t v88 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
        uint64_t v89 = *(void *)(v0 + 672);
        uint64_t v179 = *(void *)(v0 + 624);
        uint64_t v90 = *(void *)(v0 + 576);
        if (v87)
        {
          uint64_t v170 = *(void *)(v0 + 672);
          uint64_t v91 = swift_slowAlloc();
          uint64_t v165 = v14;
          unint64_t v92 = (void *)swift_slowAlloc();
          uint64_t v196 = swift_slowAlloc();
          *(_DWORD *)uint64_t v91 = 138413058;
          uint64_t v169 = v88;
          uint64_t v93 = sub_1005163F0();
          *uint64_t v164 = v93;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v92 = v93;
          *(_WORD *)(v91 + 12) = 2082;
          swift_bridgeObjectRetain();
          uint64_t *v163 = sub_1000143F4(v183, v12, &v196);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v91 + 22) = 2082;
          swift_bridgeObjectRetain();
          *uint64_t v162 = sub_1000143F4(v165, v13, &v196);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v91 + 32) = 2082;
          uint64_t v94 = *(void *)(v90 + 16);
          unint64_t v95 = *(void *)(v90 + 24);
          swift_bridgeObjectRetain();
          *__int16 v161 = sub_1000143F4(v94, v95, &v196);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1002F9DD8(v90, type metadata accessor for AvailableUpdate);
          _os_log_impl((void *)&_mh_execute_header, v86, typea, "[%@] Dropping update for %{public}s, have %{public}s and received %{public}s", (uint8_t *)v91, 0x2Au);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v169(v170, v179);
        }
        else
        {
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          sub_1002F9DD8(v90, type metadata accessor for AvailableUpdate);

          v88(v89, v179);
        }
        goto LABEL_4;
      }
    }
LABEL_22:
    uint64_t v0 = v192;
    uint64_t v23 = *(void **)(v192 + 592);
    uint64_t v24 = v23[1];
    *(void *)(v192 + 368) = *v23;
    *(void *)(v192 + 376) = v24;
    swift_bridgeObjectRetain();
    v25._uint64_t countAndFlagsBits = 58;
    v25._object = (void *)0xE100000000000000;
    String.append(_:)(v25);
    uint64_t v27 = v23[2];
    id v26 = (void *)v23[3];
    swift_bridgeObjectRetain();
    v28._uint64_t countAndFlagsBits = v27;
    v28._object = v26;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._uint64_t countAndFlagsBits = 32;
    v29._object = (void *)0xE100000000000000;
    String.append(_:)(v29);
    uint64_t v31 = v23[6];
    BOOL v30 = (void *)v23[7];
    swift_bridgeObjectRetain();
    v32._uint64_t countAndFlagsBits = v31;
    v32._object = v30;
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._uint64_t countAndFlagsBits = 10272;
    v33._object = (void *)0xE200000000000000;
    String.append(_:)(v33);
    uint64_t v35 = v23[4];
    uint64_t v34 = (void *)v23[5];
    swift_bridgeObjectRetain();
    v36._uint64_t countAndFlagsBits = v35;
    v36._object = v34;
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._uint64_t countAndFlagsBits = 41;
    v37._object = (void *)0xE100000000000000;
    String.append(_:)(v37);
    uint64_t v38 = *(void *)(v192 + 368);
    unint64_t v39 = *(void *)(v192 + 376);
    static Logger.updates.getter();
    swift_bridgeObjectRetain();
    Swift::String v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = swift_slowAlloc();
      os_log_type_t type = (void *)swift_slowAlloc();
      uint64_t *v172 = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 138412546;
      if (qword_10065B150 != -1) {
        swift_once();
      }
      uint64_t v182 = v38;
      TaskLocal.get()();
      uint64_t v43 = *(void *)(v192 + 264);
      if (v43)
      {
        swift_release();
        swift_release();
        swift_release();
        unint64_t v44 = (os_unfair_lock_s *)(v43 + 24);
        os_unfair_lock_lock((os_unfair_lock_t)(v43 + 24));
        sub_100006250((void **)(v43 + 16), v160);
        if (v177)
        {
LABEL_78:
          os_unfair_lock_unlock(v44);
          return;
        }
        os_unfair_lock_unlock((os_unfair_lock_t)(v43 + 24));
        uint64_t v45 = (uint64_t)*v160;
        swift_release();
        if (v45)
        {
          uint64_t v177 = 0;
LABEL_31:
          long long v47 = *(void (**)(uint64_t, uint64_t))(v192 + 712);
          uint64_t v48 = *(void *)(v192 + 664);
          uint64_t v49 = *(void *)(v192 + 624);
          *(void *)(v42 + 4) = v45;
          *os_log_type_t type = v45;
          *(_WORD *)(v42 + 12) = 2082;
          swift_bridgeObjectRetain();
          *(void *)(v42 + 14) = sub_1000143F4(v182, v39, v172);
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v40, v41, "[%@] Dropping update for unrequested app: %{public}s", (uint8_t *)v42, 0x16u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v47(v48, v49);
          goto LABEL_4;
        }
        uint64_t v177 = 0;
      }
      (*(void (**)(void, void, void))(*(void *)(v192 + 608) + 104))(*(void *)(v192 + 616), *(unsigned int *)(v192 + 752), *(void *)(v192 + 600));
      id v46 = objc_allocWithZone((Class)type metadata accessor for LogKey());
      uint64_t v45 = LogKey.init(prefix:)();
      goto LABEL_31;
    }
    uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v192 + 712);
    uint64_t v5 = *(void *)(v192 + 664);
    uint64_t v6 = *(void *)(v192 + 624);
    swift_bridgeObjectRelease_n();

    v4(v5, v6);
    uint64_t v0 = v192;
LABEL_4:
    uint64_t v1 = v185;
    unint64_t v7 = v190;
LABEL_5:
    unint64_t v2 = v7 + 1;
    sub_1002F9DD8(*(void *)(v0 + 592), type metadata accessor for AvailableUpdate);
    if (v2 == v188)
    {
      swift_bridgeObjectRelease();
      goto LABEL_46;
    }
  }
  __break(1u);
LABEL_86:
  __break(1u);
}

uint64_t sub_1002F3130()
{
  uint64_t v98 = v0;
  uint64_t v1 = v0 + 192;
  uint64_t v78 = v0 + 16;
  sub_1002F9CC8(v0 + 16);
  static Logger.updates.getter();
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  uint64_t v82 = v0;
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v90 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
    uint64_t v86 = *(void *)(v0 + 624);
    uint64_t v88 = *(void *)(v0 + 640);
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v96 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412546;
    uint64_t v6 = sub_1005163F0();
    *(void *)(v0 + 392) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    *(_WORD *)(v4 + 12) = 2082;
    swift_getErrorValue();
    uint64_t v7 = *(void *)(*(void *)(v0 + 328) - 8);
    swift_task_alloc();
    (*(void (**)(void))(v7 + 16))();
    uint64_t v8 = String.init<A>(describing:)();
    unint64_t v10 = v9;
    swift_task_dealloc();
    *(void *)(v0 + 416) = sub_1000143F4(v8, v10, &v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%@] Error fetching updates: %{public}s", (uint8_t *)v4, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    uint64_t v1 = v0 + 192;
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    v90(v88, v86);
  }
  else
  {
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
    uint64_t v12 = *(void *)(v0 + 640);
    uint64_t v13 = *(void *)(v0 + 624);

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    v11(v12, v13);
  }
  sub_1002F9D1C(v1);
  unint64_t v80 = (void **)(v0 + 504);
  uint64_t v14 = *(void *)(v0 + 704) + 1;
  if (v14 == *(void *)(v0 + 696))
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = (void *)v0;
    uint64_t v16 = *(void *)(v0 + 424);
    if (*(void *)(v16 + 16))
    {
      static Logger.updates.getter();
      swift_bridgeObjectRetain_n();
      BOOL v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      BOOL v19 = os_log_type_enabled(v17, v18);
      uint64_t v20 = *(void *)(v0 + 656);
      uint64_t v21 = *(void *)(v0 + 632);
      uint64_t v22 = *(void *)(v0 + 624);
      if (v19)
      {
        uint64_t v91 = v22;
        uint64_t v23 = swift_slowAlloc();
        uint64_t v24 = (void *)swift_slowAlloc();
        uint64_t v95 = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 138412546;
        uint64_t v25 = sub_1005163F0();
        v15[62] = v25;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v24 = v25;
        *(_WORD *)(v23 + 12) = 2082;
        uint64_t v26 = *(void *)(v16 + 16);
        v15[55] = v26;
        uint64_t v96 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v97 = v27;
        v28._uint64_t countAndFlagsBits = 32;
        v28._object = (void *)0xE100000000000000;
        String.append(_:)(v28);
        v29._uint64_t countAndFlagsBits = 0x657461647075;
        v29._object = (void *)0xE600000000000000;
        String.append(_:)(v29);
        if (v26 == 1) {
          uint64_t v30 = 0;
        }
        else {
          uint64_t v30 = 115;
        }
        if (v26 == 1) {
          unint64_t v31 = 0xE000000000000000;
        }
        else {
          unint64_t v31 = 0xE100000000000000;
        }
        unint64_t v32 = v31;
        String.append(_:)(*(Swift::String *)&v30);
        swift_bridgeObjectRelease();
        v15[51] = sub_1000143F4(v96, v97, &v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "[%@] Discovered %{public}s", (uint8_t *)v23, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v91);
      }
      else
      {
        swift_bridgeObjectRelease_n();

        (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
      }
      uint64_t v70 = v15;
    }
    else
    {
      static Logger.updates.getter();
      uint64_t v68 = Logger.logObject.getter();
      os_log_type_t v69 = static os_log_type_t.default.getter();
      uint64_t v70 = (void *)v0;
      if (os_log_type_enabled(v68, v69))
      {
        uint64_t v71 = (uint8_t *)swift_slowAlloc();
        uint64_t v72 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v71 = 138412290;
        uint64_t v73 = sub_1005163F0();
        *(void *)(v0 + 384) = v73;
        uint64_t v70 = (void *)v0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v72 = v73;
        _os_log_impl((void *)&_mh_execute_header, v68, v69, "[%@] No updates discovered", v71, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      uint64_t v74 = v70[81];
      uint64_t v75 = v70[79];
      uint64_t v76 = v70[78];

      (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v74, v76);
    }
    swift_beginAccess();
    uint64_t v94 = v70[53];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v77 = (uint64_t (*)(uint64_t))v70[1];
    return v77(v94);
  }
  else
  {
    *(void *)(v0 + 704) = v14;
    sub_1002F9C6C(*(void *)(v0 + 520) + (v14 << 6) + 32, v1);
    static Logger.updates.getter();
    Swift::String v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint64_t *)(v0 + 512);
      Swift::String v36 = (uint8_t *)swift_slowAlloc();
      Swift::String v37 = (void *)swift_slowAlloc();
      *(_DWORD *)Swift::String v36 = 138412290;
      uint64_t v38 = v1;
      uint64_t v39 = sub_1005163F0();
      *uint64_t v35 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *Swift::String v37 = v39;
      uint64_t v1 = v38;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "[%@] Sending installed versions:", v36, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      uint64_t v0 = v82;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    uint64_t v40 = *(void *)(v0 + 688);
    uint64_t v41 = *(void *)(v0 + 632);
    uint64_t v42 = *(void *)(v0 + 624);

    uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    *(void *)(v0 + 712) = v43;
    *(void *)(v0 + 720) = (v41 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v43(v40, v42);
    uint64_t v44 = *(void *)(*(void *)(v0 + 248) + 16);
    if (v44)
    {
      uint64_t v79 = v1;
      uint64_t v89 = (uint64_t *)(v0 + 488);
      uint64_t v45 = (unint64_t *)(swift_bridgeObjectRetain() + 72);
      uint64_t v81 = v43;
      do
      {
        unint64_t v48 = *(v45 - 4);
        unint64_t v49 = *(v45 - 2);
        uint64_t v92 = *(v45 - 5);
        uint64_t v93 = *(v45 - 3);
        uint64_t v50 = *(v45 - 1);
        unint64_t v51 = *v45;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        static Logger.updates.getter();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        unint64_t v52 = Logger.logObject.getter();
        os_log_type_t v53 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v52, v53))
        {
          os_log_type_t v85 = v53;
          uint64_t v87 = v44;
          uint64_t v54 = swift_slowAlloc();
          uint64_t v84 = (void *)swift_slowAlloc();
          uint64_t *v89 = swift_slowAlloc();
          *(_DWORD *)uint64_t v54 = 138413058;
          if (qword_10065B150 != -1) {
            swift_once();
          }
          TaskLocal.get()();
          uint64_t v55 = *(void *)(v0 + 296);
          if (!v55) {
            goto LABEL_25;
          }
          swift_release();
          swift_release();
          swift_release();
          os_unfair_lock_lock((os_unfair_lock_t)(v55 + 24));
          sub_100006250((void **)(v55 + 16), v80);
          os_unfair_lock_unlock((os_unfair_lock_t)(v55 + 24));
          uint64_t v56 = (uint64_t)*v80;
          swift_release();
          uint64_t v0 = v82;
          if (!v56)
          {
LABEL_25:
            (*(void (**)(void, void, void))(*(void *)(v0 + 608) + 104))(*(void *)(v0 + 616), *(unsigned int *)(v0 + 752), *(void *)(v0 + 600));
            id v57 = objc_allocWithZone((Class)type metadata accessor for LogKey());
            uint64_t v56 = LogKey.init(prefix:)();
          }
          uint64_t v58 = *(void *)(v0 + 680);
          uint64_t v83 = *(void *)(v0 + 624);
          *(void *)(v54 + 4) = v56;
          void *v84 = v56;
          *(_WORD *)(v54 + 12) = 2082;
          swift_bridgeObjectRetain();
          *(void *)(v54 + 14) = sub_1000143F4(v92, v48, v89);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v54 + 22) = 2082;
          swift_bridgeObjectRetain();
          *(void *)(v54 + 24) = sub_1000143F4(v93, v49, v89);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v54 + 32) = 2082;
          swift_bridgeObjectRetain();
          *(void *)(v54 + 34) = sub_1000143F4(v50, v51, v89);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v52, v85, "[%@] %{public}s - %{public}s : %{public}s", (uint8_t *)v54, 0x2Au);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v43 = v81;
          v81(v58, v83);
          uint64_t v44 = v87;
        }
        else
        {
          uint64_t v46 = *(void *)(v0 + 680);
          uint64_t v47 = *(void *)(v0 + 624);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();

          v43(v46, v47);
        }
        v45 += 6;
        --v44;
      }
      while (v44);
      swift_bridgeObjectRelease();
      uint64_t v1 = v79;
    }
    char v59 = *(unsigned char *)(v0 + 756);
    uint64_t v60 = *(long long **)(v0 + 528);
    sub_1002F9C6C(v1, v78);
    long long v61 = *v60;
    long long v62 = v60[2];
    *(_OWORD *)(v0 + 96) = v60[1];
    *(_OWORD *)(v0 + 112) = v62;
    *(_OWORD *)(v0 + 80) = v61;
    long long v63 = v60[3];
    long long v64 = v60[4];
    long long v65 = v60[5];
    *(_OWORD *)(v0 + 175) = *(long long *)((char *)v60 + 95);
    *(_OWORD *)(v0 + 144) = v64;
    *(_OWORD *)(v0 + 160) = v65;
    *(_OWORD *)(v0 + 128) = v63;
    *(unsigned char *)(v0 + 191) = v59;
    sub_10018AB28((uint64_t)v60);
    uint64_t v66 = (void *)swift_task_alloc();
    *(void *)(v0 + 728) = v66;
    *uint64_t v66 = v0;
    v66[1] = sub_1002F1A60;
    return sub_1004C85B8();
  }
}

uint64_t sub_1002F3F30(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _OWORD *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,unint64_t a29,unsigned __int8 a30,unsigned __int8 a31,uint64_t a32,uint64_t a33,unsigned __int8 a34,uint64_t a35,unsigned __int8 a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t (*a41)(uint64_t))
{
  uint64_t v110 = a8;
  uint64_t v91 = a7;
  uint64_t v101 = a6;
  uint64_t v107 = a3;
  id v93 = a2;
  uint64_t v123 = a16;
  uint64_t v124 = a15;
  uint64_t v113 = a10;
  uint64_t v112 = a9;
  uint64_t v122 = a38;
  uint64_t v108 = a37;
  int v106 = a36;
  uint64_t v105 = a35;
  int v104 = a34;
  uint64_t v103 = a33;
  uint64_t v102 = a32;
  int v100 = a31;
  int v99 = a30;
  unint64_t v119 = a29;
  uint64_t v120 = a28;
  uint64_t v98 = a27;
  uint64_t v121 = a26;
  uint64_t v117 = a24;
  uint64_t v118 = a25;
  uint64_t v97 = a23;
  uint64_t v96 = a22;
  uint64_t v95 = a21;
  uint64_t v94 = a20;
  uint64_t v92 = a19;
  uint64_t v116 = a17;
  uint64_t v90 = a14;
  uint64_t v89 = a13;
  uint64_t v111 = type metadata accessor for ADPInstallConfiguration.Storage(0);
  uint64_t v45 = __chkstk_darwin(v111);
  uint64_t v88 = (char *)&v87 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128[3] = a40;
  v128[4] = a41(v45);
  v128[0] = a4;
  v128[1] = a5;
  uint64_t v47 = a39 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_id;
  uint64_t v48 = type metadata accessor for UUID();
  uint64_t v109 = *(void *)(v48 - 8);
  unint64_t v49 = *(void (**)(uint64_t, uint64_t))(v109 + 16);
  uint64_t v115 = a1;
  uint64_t v114 = v48;
  v49(v47, a1);
  *(void *)(a39 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_logKey) = a2;
  uint64_t v50 = (void *)(a39 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_oAuthToken);
  uint64_t v51 = v110;
  *uint64_t v50 = v91;
  v50[1] = v51;
  unint64_t v52 = (void *)(a39 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_accountID);
  *unint64_t v52 = a11;
  v52[1] = a12;
  os_log_type_t v53 = (void *)(a39 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_clientID);
  uint64_t v54 = v90;
  *os_log_type_t v53 = v89;
  v53[1] = v54;
  uint64_t v55 = a39 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_url;
  uint64_t v56 = type metadata accessor for URL();
  uint64_t v91 = *(void *)(v56 - 8);
  id v57 = *(void (**)(uint64_t, uint64_t))(v91 + 16);
  uint64_t v110 = v56;
  v57(v55, v124);
  sub_100017238(v123, a39 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_referrer, &qword_10065C3C0);
  *(void *)(a39 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_distributorPreferencesStore) = v116;
  uint64_t v58 = (_OWORD *)(a39 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_device);
  long long v59 = a18[1];
  *uint64_t v58 = *a18;
  v58[1] = v59;
  *(_OWORD *)((char *)v58 + 95) = *(_OWORD *)((char *)a18 + 95);
  long long v60 = a18[5];
  void v58[4] = a18[4];
  v58[5] = v60;
  long long v61 = a18[3];
  v58[2] = a18[2];
  v58[3] = v61;
  *(void *)(a39 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_localizer) = v92;
  *(void *)(a39 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_featureEligibility) = v94;
  *(void *)(a39 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_scheduler) = v95;
  *(void *)(a39 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_updates) = v96;
  *(void *)(a39 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_progressCache) = v97;
  *(void *)(a39 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_clientRegistry) = v117;
  long long v62 = (void *)(a39 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_bag);
  uint64_t v63 = v121;
  void *v62 = v118;
  v62[1] = v63;
  v62[2] = v98;
  long long v64 = (void *)(a39
                 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_authenticationContextData);
  unint64_t v65 = v119;
  *long long v64 = v120;
  v64[1] = v65;
  *(unsigned char *)(a39 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_userInitiatedOverride) = v99;
  *(unsigned char *)(a39 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_allowAccountPrompt) = v100;
  *(void *)(a39 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_approvedDeveloperStore) = v107;
  *(void *)(a39 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_certificateStore) = v102;
  uint64_t v66 = a39 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_originallyRequestedVersion;
  *(void *)uint64_t v66 = v103;
  *(unsigned char *)(v66 + 8) = v104 & 1;
  uint64_t v67 = a39 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_itemIDFromButtonConfiguration;
  *(void *)uint64_t v67 = v105;
  *(unsigned char *)(v67 + 8) = v106 & 1;
  *(void *)(a39 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_installDatabase) = v108;
  sub_100017238(v122, a39 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_appShareURL, &qword_10065C3C0);
  id v68 = v93;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  sub_10018B2A8(v120, v119);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v69 = v101;
  if (AppInstallRequestType.requiresInstallSheet.getter())
  {
    sub_10019B17C((uint64_t)v128, (uint64_t)v127);
    sub_1000172F8(&qword_10065C450);
    int v70 = swift_dynamicCast();
    uint64_t v71 = v91;
    uint64_t v72 = (uint64_t)v88;
    if (v70)
    {
      uint64_t v73 = v125;
      uint64_t v74 = v126;
      uint64_t v75 = (void *)sub_100551B90();
      LOBYTE(v73) = sub_10054E494(v73, v74, v75);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v76 = v73 ^ 1;
    }
    else
    {
      char v76 = 1;
    }
  }
  else
  {
    char v76 = 0;
    uint64_t v71 = v91;
    uint64_t v72 = (uint64_t)v88;
  }
  sub_10019B17C((uint64_t)v128, v72);
  uint64_t v77 = (int *)v111;
  uint64_t v78 = v72 + *(int *)(v111 + 28);
  uint64_t v79 = type metadata accessor for AppInstallRequestType();
  uint64_t v80 = *(void *)(v79 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 16))(v78, v69, v79);
  uint64_t v81 = v72 + v77[9];
  uint64_t v82 = type metadata accessor for MediaAPIMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v81, 1, 1, v82);
  *(void *)(v72 + 40) = 0;
  *(unsigned char *)(v72 + 48) = 0;
  uint64_t v83 = (void *)(v72 + v77[8]);
  uint64_t v84 = v113;
  *uint64_t v83 = v112;
  v83[1] = v84;
  *(unsigned char *)(v72 + v77[10]) = v76 & 1;
  sub_1000172F8(&qword_10065F458);
  uint64_t v85 = swift_allocObject();
  *(_DWORD *)(v85 + ((*(unsigned int *)(*(void *)v85 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_1002F9D70(v72, v85 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v85 + 16), type metadata accessor for ADPInstallConfiguration.Storage);
  sub_1002F9DD8(v72, type metadata accessor for ADPInstallConfiguration.Storage);
  sub_10001729C(v122, &qword_10065C3C0);
  sub_10001729C(v123, &qword_10065C3C0);
  (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v124, v110);
  (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v69, v79);
  sub_100014524((uint64_t)v128);
  (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v115, v114);
  *(void *)(a39 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage) = v85;
  return a39;
}

uint64_t sub_1002F4820(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t a19, unsigned __int8 a20,uint64_t a21,char a22,uint64_t a23)
{
  return sub_1002F48A4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           (uint64_t)&type metadata for WebDistributor,
           (uint64_t (*)(uint64_t))sub_1002BEA38);
}

uint64_t sub_1002F48A4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t a19, unsigned __int8 a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t (*a25)(uint64_t))
{
  uint64_t v88 = a8;
  uint64_t v90 = a7;
  uint64_t v89 = a6;
  uint64_t v94 = a4;
  uint64_t v95 = a5;
  uint64_t v87 = a3;
  uint64_t v86 = a2;
  uint64_t v78 = a1;
  long long v85 = a9;
  long long v84 = a10;
  uint64_t v96 = a15;
  uint64_t v83 = a16;
  uint64_t v76 = a17;
  uint64_t v82 = a18;
  unint64_t v81 = a19;
  int v75 = a20;
  uint64_t v74 = a21;
  int v70 = a25;
  uint64_t v71 = a24;
  uint64_t v97 = a23;
  uint64_t v80 = a11;
  uint64_t v93 = a12;
  int v69 = a22 & 1;
  uint64_t v92 = a13;
  uint64_t v25 = sub_1000172F8(&qword_10065C3C0);
  uint64_t v26 = __chkstk_darwin(v25 - 8);
  uint64_t v91 = (uint64_t)v58 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  Swift::String v29 = (char *)v58 - v28;
  uint64_t v63 = (uint64_t)v58 - v28;
  uint64_t v30 = type metadata accessor for URL();
  uint64_t v67 = v30;
  uint64_t v68 = *(void *)(v30 - 8);
  uint64_t v31 = v68;
  __chkstk_darwin(v30);
  Swift::String v33 = (char *)v58 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v64 = v33;
  uint64_t v34 = type metadata accessor for AppInstallRequestType();
  uint64_t v72 = v34;
  uint64_t v73 = *(void *)(v34 - 8);
  uint64_t v35 = v73;
  __chkstk_darwin(v34);
  Swift::String v37 = (char *)v58 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v65 = v37;
  uint64_t v77 = type metadata accessor for UUID();
  uint64_t v79 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v66 = (uint64_t)v58 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(void))(v39 + 16))();
  uint64_t v62 = *(void *)(a14 + 280);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v37, v95, v34);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v33, v93, v30);
  sub_100017238(v92, (uint64_t)v29, &qword_10065C3C0);
  uint64_t v40 = *(void *)(a14 + 288);
  long long v41 = *(_OWORD *)(a14 + 112);
  v98[4] = *(_OWORD *)(a14 + 96);
  *(_OWORD *)int v99 = v41;
  *(_OWORD *)&v99[15] = *(_OWORD *)(a14 + 127);
  long long v42 = *(_OWORD *)(a14 + 80);
  v98[2] = *(_OWORD *)(a14 + 64);
  v98[3] = v42;
  long long v43 = *(_OWORD *)(a14 + 48);
  v98[0] = *(_OWORD *)(a14 + 32);
  v98[1] = v43;
  uint64_t v61 = *(void *)(a14 + 152);
  uint64_t v44 = *(void *)(a14 + 192);
  uint64_t v45 = *(void *)(a14 + 200);
  uint64_t v46 = *(void *)(v44 + 32);
  uint64_t v48 = *(void *)(a14 + 216);
  uint64_t v47 = *(void *)(a14 + 224);
  uint64_t v49 = *(void *)(a14 + 16);
  uint64_t v59 = *(void *)(v44 + 160);
  uint64_t v60 = *(void *)(a14 + 168);
  sub_100017238(v97, v91, &qword_10065C3C0);
  type metadata accessor for ADPInstallConfiguration(0);
  uint64_t v50 = swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  v58[0] = v40;
  swift_retain();
  sub_10018AB28((uint64_t)v98);
  v58[1] = v48;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v51 = v49;
  v58[2] = v49;
  swift_retain();
  uint64_t v52 = v59;
  swift_retain();
  uint64_t v53 = swift_retain();
  uint64_t v57 = v48;
  unint64_t v54 = v81;
  uint64_t v55 = v82;
  uint64_t v94 = sub_1002F3F30(v66, v86, v62, v87, v94, (uint64_t)v65, v89, v90, v88, v85, *((uint64_t *)&v85 + 1), v84, *((uint64_t *)&v84 + 1), v80, (uint64_t)v64, v63, v40, v98, v57,
          v61,
          v46,
          v45,
          v47,
          v51,
          v96,
          v83,
          v76,
          v82,
          v81,
          2u,
          v75,
          v52,
          0,
          1u,
          v74,
          v69,
          v53,
          v91,
          v50,
          v71,
          v70);
  swift_release();
  swift_release();
  sub_10018AE44(v55, v54);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001729C(v97, &qword_10065C3C0);
  sub_10001729C(v92, &qword_10065C3C0);
  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v93, v67);
  (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v95, v72);
  (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v78, v77);
  return v94;
}

uint64_t sub_1002F4FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(v8 + 568) = v19;
  *(void *)(v8 + 560) = a8;
  *(unsigned char *)(v8 + 127) = a7;
  *(void *)(v8 + 552) = a6;
  *(void *)(v8 + 544) = a5;
  *(void *)(v8 + 536) = a4;
  *(void *)(v8 + 528) = a3;
  *(void *)(v8 + 520) = a2;
  *(void *)(v8 + 512) = a1;
  sub_1000172F8(&qword_10065C3C0);
  *(void *)(v8 + 576) = swift_task_alloc();
  *(void *)(v8 + 584) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for URL();
  *(void *)(v8 + 592) = v10;
  *(void *)(v8 + 600) = *(void *)(v10 - 8);
  *(void *)(v8 + 608) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for AppInstallRequestType();
  *(void *)(v8 + 616) = v11;
  *(void *)(v8 + 624) = *(void *)(v11 - 8);
  *(void *)(v8 + 632) = swift_task_alloc();
  type metadata accessor for UUID();
  *(void *)(v8 + 640) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for LogKey.Prefix();
  *(void *)(v8 + 648) = v12;
  *(void *)(v8 + 656) = *(void *)(v12 - 8);
  *(void *)(v8 + 664) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for IdentifiableAvailableUpdate(0);
  *(void *)(v8 + 672) = v13;
  *(void *)(v8 + 680) = *(void *)(v13 - 8);
  *(void *)(v8 + 688) = swift_task_alloc();
  *(void *)(v8 + 696) = swift_task_alloc();
  *(void *)(v8 + 704) = swift_task_alloc();
  *(void *)(v8 + 712) = swift_task_alloc();
  uint64_t v14 = type metadata accessor for Logger();
  *(void *)(v8 + 720) = v14;
  *(void *)(v8 + 728) = *(void *)(v14 - 8);
  *(void *)(v8 + 736) = swift_task_alloc();
  *(void *)(v8 + 744) = swift_task_alloc();
  *(void *)(v8 + 752) = swift_task_alloc();
  *(void *)(v8 + 760) = swift_task_alloc();
  *(void *)(v8 + 768) = swift_task_alloc();
  *(void *)(v8 + 776) = swift_task_alloc();
  BOOL v17 = (uint64_t (*)(uint64_t))((char *)&dword_1006638A0 + dword_1006638A0);
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v8 + 784) = v15;
  *uint64_t v15 = v8;
  v15[1] = sub_1002F5360;
  return v17(a2);
}

uint64_t sub_1002F5360(char a1)
{
  *(unsigned char *)(*(void *)v1 + 960) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1002F5460, 0, 0);
}

uint64_t sub_1002F5460()
{
  uint64_t v39 = v0;
  if (*(unsigned char *)(v0 + 960) == 1)
  {
    uint64_t v1 = (_OWORD *)(v0 + 16);
    uint64_t v2 = v0 + 128;
    unint64_t v3 = *(void *)(v0 + 552);
    if (v3)
    {
      swift_bridgeObjectRetain();
      static Logger.updates.getter();
      swift_bridgeObjectRetain();
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.default.getter();
      BOOL v6 = os_log_type_enabled(v4, v5);
      uint64_t v7 = *(void *)(v0 + 776);
      uint64_t v8 = *(void *)(v0 + 728);
      uint64_t v9 = *(void *)(v0 + 720);
      if (v6)
      {
        uint64_t v35 = *(void *)(v0 + 544);
        uint64_t v10 = swift_slowAlloc();
        os_log_t log = v4;
        uint64_t v11 = (void *)swift_slowAlloc();
        uint64_t v38 = swift_slowAlloc();
        *(_DWORD *)uint64_t v10 = 138412546;
        uint64_t v37 = v7;
        uint64_t v12 = sub_1005163F0();
        *(void *)(v0 + 496) = v12;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v11 = v12;
        *(_WORD *)(v10 + 12) = 2082;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 504) = sub_1000143F4(v35, v3, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, log, v5, "[%@] Polling for updates for %{public}s", (uint8_t *)v10, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        uint64_t v2 = v0 + 128;
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v37, v9);
      }
      else
      {
        swift_bridgeObjectRelease_n();

        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      }
      uint64_t v25 = *(void *)(v0 + 544);
      *(void *)(v0 + 152) = &type metadata for WebDistributor;
      *(void *)(v0 + 160) = sub_1002BEA38();
      *(void *)(v0 + 128) = v25;
      *(void *)(v0 + 136) = v3;
    }
    else
    {
      static Logger.updates.getter();
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        uint64_t v23 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v22 = 138412290;
        uint64_t v24 = sub_1005163F0();
        *(void *)(v0 + 488) = v24;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v23 = v24;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "[%@] Polling for all updates", v22, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        uint64_t v2 = v0 + 128;
        swift_slowDealloc();
        swift_slowDealloc();
      }

      (*(void (**)(void, void))(*(void *)(v0 + 728) + 8))(*(void *)(v0 + 768), *(void *)(v0 + 720));
      *(void *)(v2 + 32) = 0;
      *(_OWORD *)uint64_t v2 = 0u;
      *(_OWORD *)(v2 + 16) = 0u;
    }
    uint64_t v26 = *(_OWORD **)(v0 + 512);
    swift_bridgeObjectRetain();
    uint64_t v27 = sub_1000084C4();
    uint64_t v28 = sub_1002F0188(v2, v27);
    *(void *)(v0 + 792) = v28;
    swift_bridgeObjectRelease();
    sub_10001729C(v2, &qword_10065D3A0);
    long long v30 = v26[3];
    long long v29 = v26[4];
    *uint64_t v1 = v26[2];
    *(_OWORD *)(v0 + 32) = v30;
    *(_OWORD *)(v0 + 48) = v29;
    long long v32 = v26[6];
    long long v31 = v26[7];
    long long v33 = v26[5];
    *(_OWORD *)(v0 + 111) = *(_OWORD *)((char *)v26 + 127);
    *(_OWORD *)(v0 + 80) = v32;
    *(_OWORD *)(v0 + 96) = v31;
    *(_OWORD *)(v0 + 64) = v33;
    uint64_t v34 = (void *)swift_task_alloc();
    *(void *)(v0 + 800) = v34;
    *uint64_t v34 = v0;
    v34[1] = sub_1002F5AF0;
    return sub_1002F0CFC(v28, (uint64_t)v1, 0);
  }
  else
  {
    static Logger.updates.getter();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 138412290;
      uint64_t v17 = sub_1005163F0();
      *(void *)(v0 + 472) = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v16 = v17;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "[%@] Ignoring update poll request due to feature ineligibility", v15, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(void, void))(*(void *)(v0 + 728) + 8))(*(void *)(v0 + 752), *(void *)(v0 + 720));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
}

uint64_t sub_1002F5AF0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 808) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1002F5C10, 0, 0);
}

uint64_t sub_1002F5C10()
{
  uint64_t v1 = v0[101];
  uint64_t v2 = *(void *)(*(void *)(v0[64] + 200) + 24);
  v0[102] = v2;
  uint64_t v3 = swift_task_alloc();
  v0[103] = v3;
  *(void *)(v3 + 16) = v1;
  BOOL v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100660668 + dword_100660668);
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[104] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1002F5D08;
  return v6((uint64_t)v6, (uint64_t)sub_1002F9BF8, v3, v2);
}

uint64_t sub_1002F5D08()
{
  *(void *)(*(void *)v1 + 840) = v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1002F8BA4;
  }
  else {
    uint64_t v2 = sub_1002F5E58;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_1002F5E58()
{
  uint64_t v1 = v0[105];
  uint64_t v2 = v0[101];
  uint64_t v3 = v0[70];
  uint64_t v4 = *(void *)(v2 + 16);
  v0[106] = v4;
  uint64_t v116 = v1;
  if (!v4)
  {
    if (v3)
    {
      swift_getObjectType();
      v35._uint64_t countAndFlagsBits = 0xD000000000000026;
      v35._object = (void *)0x80000001005BDB40;
      XPCClientProtocol.logMessage(_:)(v35);
    }
LABEL_12:
    if (!v4 || (*((unsigned char *)v0 + 127) & 1) == 0)
    {
LABEL_14:
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v36 = (void (*)(void))v0[1];
      v36();
      return;
    }
    goto LABEL_18;
  }
  if (v3)
  {
    os_log_type_t v5 = (void *)v0[89];
    uint64_t v6 = v0[85];
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    uint64_t v7 = v2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v122 = *(void *)(v6 + 72);
    swift_bridgeObjectRetain();
    uint64_t v8 = _swiftEmptyArrayStorage;
    uint64_t v119 = v4;
    uint64_t v9 = v4;
    do
    {
      uint64_t v10 = v0[89];
      sub_1002F9D70(v7, v10, type metadata accessor for IdentifiableAvailableUpdate);
      _StringGuts.grow(_:)(53);
      v11._uint64_t countAndFlagsBits = 0x4920656C646E7562;
      v11._object = (void *)0xEB00000000203A44;
      String.append(_:)(v11);
      uint64_t v12 = v8;
      uint64_t v13 = v5[2];
      os_log_type_t v14 = (void *)v5[3];
      swift_bridgeObjectRetain();
      v15._uint64_t countAndFlagsBits = v13;
      v15._object = v14;
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      v16._uint64_t countAndFlagsBits = 0x49206D657469202CLL;
      v16._object = (void *)0xEB00000000203A44;
      String.append(_:)(v16);
      uint64_t v17 = v5[4];
      uint64_t v18 = (void *)v5[5];
      swift_bridgeObjectRetain();
      v19._uint64_t countAndFlagsBits = v17;
      v19._object = v18;
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._uint64_t countAndFlagsBits = 0x6F6973726576202CLL;
      v20._object = (void *)0xEE00203A4449206ELL;
      String.append(_:)(v20);
      uint64_t v21 = v5[6];
      uint64_t v22 = (void *)v5[7];
      swift_bridgeObjectRetain();
      v23._uint64_t countAndFlagsBits = v21;
      v23._object = v22;
      String.append(_:)(v23);
      uint64_t v8 = v12;
      swift_bridgeObjectRelease();
      v24._uint64_t countAndFlagsBits = 0x203A504441202CLL;
      v24._object = (void *)0xE700000000000000;
      String.append(_:)(v24);
      sub_1002F9C14();
      v25._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      v26._uint64_t countAndFlagsBits = 0;
      v26._object = (void *)0xE000000000000000;
      String.append(_:)(v26);
      sub_1002F9DD8(v10, type metadata accessor for IdentifiableAvailableUpdate);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = sub_10028ED9C(0, v12[2] + 1, 1, v12);
      }
      unint64_t v28 = v8[2];
      unint64_t v27 = v8[3];
      uint64_t v0 = v126;
      if (v28 >= v27 >> 1) {
        uint64_t v8 = sub_10028ED9C((void *)(v27 > 1), v28 + 1, 1, v8);
      }
      _OWORD v8[2] = v28 + 1;
      long long v29 = &v8[2 * v28];
      void v29[4] = 0;
      v29[5] = 0xE000000000000000;
      v7 += v122;
      --v9;
    }
    while (v9);
    swift_getObjectType();
    swift_bridgeObjectRelease();
    v126[56] = v8;
    sub_1000172F8((uint64_t *)&unk_10065C5D0);
    sub_10017B8C8();
    uint64_t v30 = BidirectionalCollection<>.joined(separator:)();
    long long v32 = v31;
    swift_bridgeObjectRelease();
    v33._uint64_t countAndFlagsBits = v30;
    v33._object = v32;
    String.append(_:)(v33);
    uint64_t v0 = v126;
    swift_bridgeObjectRelease();
    v34._uint64_t countAndFlagsBits = 0xD000000000000014;
    v34._object = (void *)0x80000001005BDB20;
    XPCClientProtocol.logMessage(_:)(v34);
    swift_bridgeObjectRelease();
    uint64_t v4 = v119;
    goto LABEL_12;
  }
  if (*((unsigned char *)v0 + 127) != 1) {
    goto LABEL_14;
  }
LABEL_18:
  uint64_t v37 = 0;
  uint64_t v38 = v0 + 51;
  uint64_t v102 = (void **)(v0 + 55);
  uint64_t v39 = v0[85];
  *((_DWORD *)v0 + 236) = *(_DWORD *)(v39 + 80);
  v0[107] = *(void *)(v39 + 72);
  *((_DWORD *)v0 + 237) = enum case for LogKey.Prefix.undefined(_:);
  *((_DWORD *)v0 + 238) = enum case for LogKey.Prefix.automaticUpdate(_:);
  *((_DWORD *)v0 + 239) = enum case for AppInstallRequestType.automaticUpdate(_:);
  int v104 = v0 + 51;
  while (1)
  {
    v0[108] = v37;
    uint64_t v40 = v0[88];
    uint64_t v41 = v0[87];
    sub_1002F9D70(v0[101]+ ((*((unsigned __int8 *)v0 + 944) + 32) & ~(unint64_t)*((unsigned __int8 *)v0 + 944))+ v0[107] * v37, v40, type metadata accessor for IdentifiableAvailableUpdate);
    static Logger.updates.getter();
    sub_1002F9D70(v40, v41, type metadata accessor for IdentifiableAvailableUpdate);
    long long v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v42, v43))
    {
      uint64_t v49 = v0[95];
      uint64_t v50 = v0[91];
      uint64_t v51 = v0[90];
      sub_1002F9DD8(v0[87], type metadata accessor for IdentifiableAvailableUpdate);

      uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
      v52(v49, v51);
      goto LABEL_31;
    }
    uint64_t v44 = swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    *uint64_t v38 = swift_slowAlloc();
    *(_DWORD *)uint64_t v44 = 138412546;
    if (qword_10065B150 != -1) {
      swift_once();
    }
    TaskLocal.get()();
    uint64_t v46 = v0[22];
    os_log_type_t v123 = v43;
    if (!v46)
    {
      uint64_t v48 = (void *)v45;
LABEL_29:
      (*(void (**)(void, void, void))(v0[82] + 104))(v0[83], *((unsigned int *)v0 + 237), v0[81]);
      id v53 = objc_allocWithZone((Class)type metadata accessor for LogKey());
      uint64_t v47 = LogKey.init(prefix:)();
      goto LABEL_30;
    }
    swift_release();
    swift_release();
    swift_release();
    os_unfair_lock_lock((os_unfair_lock_t)(v46 + 24));
    sub_100006250((void **)(v46 + 16), v102);
    os_unfair_lock_unlock((os_unfair_lock_t)(v46 + 24));
    if (v116) {
      return;
    }
    uint64_t v47 = (uint64_t)*v102;
    swift_release();
    uint64_t v48 = (void *)v45;
    if (!v47)
    {
      uint64_t v116 = 0;
      uint64_t v0 = v126;
      goto LABEL_29;
    }
    uint64_t v116 = 0;
    uint64_t v0 = v126;
LABEL_30:
    uint64_t v54 = v0[91];
    uint64_t v117 = v0[90];
    uint64_t v120 = v0[95];
    uint64_t v55 = (void *)v0[87];
    uint64_t v56 = v0[84];
    *(void *)(v44 + 4) = v47;
    *uint64_t v48 = v47;
    *(_WORD *)(v44 + 12) = 2082;
    v0[42] = 0;
    v0[43] = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    uint64_t v57 = v55[2];
    uint64_t v58 = v55[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v126[36] = v57;
    v126[37] = v58;
    v59._uint64_t countAndFlagsBits = 58;
    v59._object = (void *)0xE100000000000000;
    String.append(_:)(v59);
    uint64_t v60 = v55[4];
    uint64_t v61 = (void *)v55[5];
    swift_bridgeObjectRetain();
    v62._uint64_t countAndFlagsBits = v60;
    v62._object = v61;
    String.append(_:)(v62);
    swift_bridgeObjectRelease();
    v63._uint64_t countAndFlagsBits = 58;
    v63._object = (void *)0xE100000000000000;
    String.append(_:)(v63);
    uint64_t v64 = v55[6];
    unint64_t v65 = (void *)v55[7];
    swift_bridgeObjectRetain();
    v66._uint64_t countAndFlagsBits = v64;
    v66._object = v65;
    String.append(_:)(v66);
    swift_bridgeObjectRelease();
    v67._uint64_t countAndFlagsBits = 2108704;
    v67._object = (void *)0xE300000000000000;
    String.append(_:)(v67);
    uint64_t v68 = (void *)((char *)v55 + *(int *)(v56 + 40));
    uint64_t v69 = *v68;
    int v70 = (void *)v68[1];
    swift_bridgeObjectRetain();
    v71._uint64_t countAndFlagsBits = v69;
    v71._object = v70;
    String.append(_:)(v71);
    swift_bridgeObjectRelease();
    v72._uint64_t countAndFlagsBits = 40;
    v72._object = (void *)0xE100000000000000;
    String.append(_:)(v72);
    uint64_t v73 = (void *)((char *)v55 + *(int *)(v56 + 36));
    uint64_t v74 = *v73;
    int v75 = (void *)v73[1];
    swift_bridgeObjectRetain();
    v76._uint64_t countAndFlagsBits = v74;
    v76._object = v75;
    String.append(_:)(v76);
    uint64_t v0 = v126;
    swift_bridgeObjectRelease();
    v77._uint64_t countAndFlagsBits = 41;
    v77._object = (void *)0xE100000000000000;
    String.append(_:)(v77);
    uint64_t v38 = v104;
    *(void *)(v44 + 14) = sub_1000143F4(v126[36], v126[37], v104);
    swift_bridgeObjectRelease();
    sub_1002F9DD8((uint64_t)v55, type metadata accessor for IdentifiableAvailableUpdate);
    _os_log_impl((void *)&_mh_execute_header, v42, v123, "[%@] Starting update for %{public}s", (uint8_t *)v44, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
    v52(v120, v117);
LABEL_31:
    v0[109] = v52;
    if (v0[70])
    {
      swift_getObjectType();
      v0[44] = 0;
      v0[45] = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      v0[34] = 0xD000000000000014;
      v0[35] = 0x80000001005BDB00;
      v78._uint64_t countAndFlagsBits = sub_1004DC08C(1);
      String.append(_:)(v78);
      swift_bridgeObjectRelease();
      XPCClientProtocol.logMessage(_:)(*((Swift::String *)v0 + 17));
      swift_bridgeObjectRelease();
    }
    uint64_t v79 = v0[88] + *(int *)(v0[84] + 32);
    Swift::String_optional v80 = URL.host(percentEncoded:)(1);
    if (v80.value._object) {
      break;
    }
    sub_1002F9DD8(v0[88], type metadata accessor for IdentifiableAvailableUpdate);
    uint64_t v37 = v0[108] + 1;
    if (v37 == v0[106]) {
      goto LABEL_14;
    }
  }
  uint64_t countAndFlagsBits = v80.value._countAndFlagsBits;
  object = v80.value._object;
  uint64_t v83 = URL.port.getter();
  if ((v84 & 1) == 0)
  {
    uint64_t v85 = v83;
    *((Swift::String_optional *)v0 + 23) = v80;
    v86._uint64_t countAndFlagsBits = 58;
    v86._object = (void *)0xE100000000000000;
    String.append(_:)(v86);
    v0[48] = v85;
    v87._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v87);
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = v0[46];
    object = (void *)v0[47];
  }
  unsigned int v111 = *((_DWORD *)v0 + 239);
  unsigned int v114 = *((_DWORD *)v0 + 238);
  uint64_t v88 = (uint64_t *)v0[88];
  uint64_t v103 = v0[84];
  uint64_t v89 = v0[83];
  uint64_t v90 = v0[82];
  uint64_t v91 = v0[81];
  uint64_t v121 = v0[80];
  uint64_t v127 = v0[79];
  uint64_t v92 = v0[78];
  uint64_t v108 = v0[77];
  uint64_t v125 = v0[76];
  uint64_t v93 = v0[75];
  uint64_t v105 = v0[74];
  uint64_t v106 = v0[73];
  uint64_t v107 = v0[72];
  uint64_t v124 = v0[71];
  uint64_t v118 = v0[67];
  uint64_t v113 = v0[65];
  uint64_t v110 = v0[64];
  UUID.init()();
  (*(void (**)(uint64_t, void, uint64_t))(v90 + 104))(v89, v114, v91);
  id v94 = objc_allocWithZone((Class)type metadata accessor for LogKey());
  uint64_t v115 = (void *)LogKey.init(prefix:)();
  (*(void (**)(uint64_t, void, uint64_t))(v92 + 104))(v127, v111, v108);
  uint64_t v95 = (uint64_t *)((char *)v88 + *(int *)(v103 + 44));
  uint64_t v96 = v95[1];
  uint64_t v112 = *v95;
  unint64_t v97 = v88[1];
  uint64_t v109 = *v88;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 16))(v125, v79, v105);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v93 + 56))(v106, 1, 1, v105);
  sub_100017238((uint64_t)v88 + *(int *)(v103 + 48), v107, &qword_10065C3C0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v98 = swift_unknownObjectRetain();
  *((void *)&v101 + 1) = v109;
  *(void *)&long long v101 = v96;
  v0[110] = sub_1002F48A4(v121, v115, countAndFlagsBits, (uint64_t)object, v127, 0, 0, v112, v101, v97, 0, v125, v106, v110, v113, v98, v118, 0, 0xF000000000000000,
              0,
              0,
              1,
              v107,
              (uint64_t)&type metadata for WebDistributor,
              (uint64_t (*)(uint64_t))sub_1002BEA38);
  swift_release();
  swift_bridgeObjectRelease();

  type metadata accessor for ADPInstallTask();
  swift_allocObject();
  uint64_t v99 = swift_retain();
  uint64_t v100 = sub_100346FA4(v99, v124);
  v0[111] = v100;
  _swift_task_switch(sub_1002F6C20, v100, 0);
}

uint64_t sub_1002F6C20()
{
  *(unsigned char *)(*(void *)(v0 + 888)
           + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_shouldCacheInstallAsPending) = 0;
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 896) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1002F6CC0;
  return sub_10034213C();
}

uint64_t sub_1002F6CC0()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[116] = v0;
    uint64_t v4 = (void *)swift_task_alloc();
    v2[117] = v4;
    *uint64_t v4 = v3;
    v4[1] = sub_1002F7BBC;
    return sub_10034A584(v0);
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    v2[113] = v6;
    *uint64_t v6 = v3;
    v6[1] = sub_1002F6E70;
    return sub_1003580F4();
  }
}

uint64_t sub_1002F6E70()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[116] = v0;
    uint64_t v4 = (void *)swift_task_alloc();
    v2[117] = v4;
    *uint64_t v4 = v3;
    v4[1] = sub_1002F7BBC;
    return sub_10034A584(v0);
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    v2[114] = v6;
    *uint64_t v6 = v3;
    v6[1] = sub_1002F7020;
    return sub_100348D6C();
  }
}

uint64_t sub_1002F7020()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  *(void *)(*v1 + 920) = v0;
  swift_task_dealloc();
  if (v0)
  {
    *(void *)(v2 + 928) = v0;
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v2 + 936) = v4;
    *uint64_t v4 = v3;
    v4[1] = sub_1002F7BBC;
    return sub_10034A584(v0);
  }
  else
  {
    return _swift_task_switch(sub_1002F71A8, 0, 0);
  }
}

void sub_1002F71A8()
{
  uint64_t v1 = *(void *)(v0 + 704);
  swift_release();
  swift_release();
  sub_1002F9DD8(v1, type metadata accessor for IdentifiableAvailableUpdate);
  uint64_t v2 = *(void *)(v0 + 864) + 1;
  if (v2 == *(void *)(v0 + 848))
  {
LABEL_2:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(void (**)(void))(v0 + 8);
    v3();
    return;
  }
  uint64_t v4 = (uint64_t *)(v0 + 408);
  Swift::String v72 = (void **)(v0 + 440);
  uint64_t v76 = *(void *)(v0 + 920);
  while (1)
  {
    *(void *)(v0 + 864) = v2;
    uint64_t v5 = *(void *)(v0 + 704);
    uint64_t v6 = *(void *)(v0 + 696);
    sub_1002F9D70(*(void *)(v0 + 808)+ ((*(unsigned __int8 *)(v0 + 944) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 944))+ *(void *)(v0 + 856) * v2, v5, type metadata accessor for IdentifiableAvailableUpdate);
    static Logger.updates.getter();
    sub_1002F9D70(v5, v6, type metadata accessor for IdentifiableAvailableUpdate);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v7, v8))
    {
      uint64_t v13 = *(void *)(v0 + 760);
      uint64_t v14 = *(void *)(v0 + 728);
      uint64_t v15 = *(void *)(v0 + 720);
      sub_1002F9DD8(*(void *)(v0 + 696), type metadata accessor for IdentifiableAvailableUpdate);

      Swift::String v16 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
      v16(v13, v15);
      goto LABEL_17;
    }
    os_log_type_t v85 = v8;
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    *uint64_t v4 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138412546;
    if (qword_10065B150 != -1) {
      swift_once();
    }
    TaskLocal.get()();
    uint64_t v11 = *(void *)(v0 + 176);
    if (!v11) {
      goto LABEL_15;
    }
    swift_release();
    swift_release();
    swift_release();
    os_unfair_lock_lock((os_unfair_lock_t)(v11 + 24));
    sub_100006250((void **)(v11 + 16), v72);
    os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 24));
    if (v76) {
      return;
    }
    uint64_t v12 = (uint64_t)*v72;
    swift_release();
    if (!v12)
    {
      uint64_t v76 = 0;
LABEL_15:
      (*(void (**)(void, void, void))(*(void *)(v0 + 656) + 104))(*(void *)(v0 + 664), *(unsigned int *)(v0 + 948), *(void *)(v0 + 648));
      id v17 = objc_allocWithZone((Class)type metadata accessor for LogKey());
      uint64_t v12 = LogKey.init(prefix:)();
      goto LABEL_16;
    }
    uint64_t v76 = 0;
LABEL_16:
    uint64_t v18 = *(void *)(v0 + 728);
    uint64_t v81 = *(void *)(v0 + 720);
    uint64_t v83 = *(void *)(v0 + 760);
    Swift::String v19 = *(void **)(v0 + 696);
    uint64_t v20 = *(void *)(v0 + 672);
    *(void *)(v9 + 4) = v12;
    *uint64_t v10 = v12;
    *(_WORD *)(v9 + 12) = 2082;
    *(void *)(v0 + 336) = 0;
    *(void *)(v0 + 344) = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    uint64_t v21 = v19[2];
    uint64_t v22 = v19[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v0 + 288) = v21;
    *(void *)(v0 + 296) = v22;
    v23._uint64_t countAndFlagsBits = 58;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    uint64_t v24 = v19[4];
    Swift::String v25 = (void *)v19[5];
    swift_bridgeObjectRetain();
    v26._uint64_t countAndFlagsBits = v24;
    v26._object = v25;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._uint64_t countAndFlagsBits = 58;
    v27._object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    uint64_t v28 = v19[6];
    long long v29 = (void *)v19[7];
    swift_bridgeObjectRetain();
    v30._uint64_t countAndFlagsBits = v28;
    v30._object = v29;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._uint64_t countAndFlagsBits = 2108704;
    v31._object = (void *)0xE300000000000000;
    String.append(_:)(v31);
    long long v32 = (void *)((char *)v19 + *(int *)(v20 + 40));
    uint64_t v33 = *v32;
    Swift::String v34 = (void *)v32[1];
    swift_bridgeObjectRetain();
    v35._uint64_t countAndFlagsBits = v33;
    v35._object = v34;
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._uint64_t countAndFlagsBits = 40;
    v36._object = (void *)0xE100000000000000;
    String.append(_:)(v36);
    uint64_t v37 = (void *)((char *)v19 + *(int *)(v20 + 36));
    uint64_t v38 = *v37;
    uint64_t v39 = (void *)v37[1];
    swift_bridgeObjectRetain();
    v40._uint64_t countAndFlagsBits = v38;
    v40._object = v39;
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v41._uint64_t countAndFlagsBits = 41;
    v41._object = (void *)0xE100000000000000;
    String.append(_:)(v41);
    uint64_t v4 = (uint64_t *)(v0 + 408);
    *(void *)(v9 + 14) = sub_1000143F4(*(void *)(v0 + 288), *(void *)(v0 + 296), (uint64_t *)(v0 + 408));
    swift_bridgeObjectRelease();
    sub_1002F9DD8((uint64_t)v19, type metadata accessor for IdentifiableAvailableUpdate);
    _os_log_impl((void *)&_mh_execute_header, v7, v85, "[%@] Starting update for %{public}s", (uint8_t *)v9, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    Swift::String v16 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v16(v83, v81);
LABEL_17:
    *(void *)(v0 + 872) = v16;
    if (*(void *)(v0 + 560))
    {
      swift_getObjectType();
      *(void *)(v0 + 352) = 0;
      *(void *)(v0 + 360) = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 272) = 0xD000000000000014;
      *(void *)(v0 + 280) = 0x80000001005BDB00;
      v42._uint64_t countAndFlagsBits = sub_1004DC08C(1);
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      XPCClientProtocol.logMessage(_:)(*(Swift::String *)(v0 + 272));
      swift_bridgeObjectRelease();
    }
    uint64_t v43 = *(void *)(v0 + 704) + *(int *)(*(void *)(v0 + 672) + 32);
    Swift::String_optional v44 = URL.host(percentEncoded:)(1);
    if (v44.value._object) {
      break;
    }
    sub_1002F9DD8(*(void *)(v0 + 704), type metadata accessor for IdentifiableAvailableUpdate);
    uint64_t v2 = *(void *)(v0 + 864) + 1;
    if (v2 == *(void *)(v0 + 848)) {
      goto LABEL_2;
    }
  }
  uint64_t countAndFlagsBits = v44.value._countAndFlagsBits;
  object = v44.value._object;
  uint64_t v47 = URL.port.getter();
  if ((v48 & 1) == 0)
  {
    uint64_t v49 = v47;
    *(Swift::String_optional *)(v0 + 368) = v44;
    v50._uint64_t countAndFlagsBits = 58;
    v50._object = (void *)0xE100000000000000;
    String.append(_:)(v50);
    *(void *)(v0 + 384) = v49;
    v51._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v51);
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = *(void *)(v0 + 368);
    object = *(void **)(v0 + 376);
  }
  unsigned int v74 = *(_DWORD *)(v0 + 956);
  unsigned int v78 = *(_DWORD *)(v0 + 952);
  uint64_t v52 = *(uint64_t **)(v0 + 704);
  uint64_t v66 = *(void *)(v0 + 672);
  uint64_t v53 = *(void *)(v0 + 664);
  uint64_t v54 = *(void *)(v0 + 656);
  uint64_t v55 = *(void *)(v0 + 648);
  uint64_t v82 = *(void *)(v0 + 640);
  uint64_t v56 = *(void *)(v0 + 624);
  uint64_t v70 = *(void *)(v0 + 616);
  uint64_t v86 = *(void *)(v0 + 608);
  uint64_t v87 = *(void *)(v0 + 632);
  uint64_t v57 = *(void *)(v0 + 600);
  uint64_t v67 = *(void *)(v0 + 592);
  uint64_t v68 = *(void *)(v0 + 584);
  uint64_t v69 = *(void *)(v0 + 576);
  uint64_t v84 = *(void *)(v0 + 568);
  uint64_t v80 = *(void *)(v0 + 536);
  uint64_t v77 = *(void *)(v0 + 520);
  uint64_t v73 = *(void *)(v0 + 512);
  UUID.init()();
  (*(void (**)(uint64_t, void, uint64_t))(v54 + 104))(v53, v78, v55);
  id v58 = objc_allocWithZone((Class)type metadata accessor for LogKey());
  uint64_t v79 = (void *)LogKey.init(prefix:)();
  (*(void (**)(uint64_t, void, uint64_t))(v56 + 104))(v87, v74, v70);
  Swift::String v59 = (uint64_t *)((char *)v52 + *(int *)(v66 + 44));
  uint64_t v60 = v59[1];
  uint64_t v75 = *v59;
  unint64_t v61 = v52[1];
  uint64_t v71 = *v52;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 16))(v86, v43, v67);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 56))(v68, 1, 1, v67);
  sub_100017238((uint64_t)v52 + *(int *)(v66 + 48), v69, &qword_10065C3C0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v62 = swift_unknownObjectRetain();
  *(void *)&long long v65 = v60;
  *((void *)&v65 + 1) = v71;
  *(void *)(v0 + 880) = sub_1002F48A4(v82, v79, countAndFlagsBits, (uint64_t)object, v87, 0, 0, v75, v65, v61, 0, v86, v68, v73, v77, v62, v80, 0, 0xF000000000000000,
                            0,
                            0,
                            1,
                            v69,
                            (uint64_t)&type metadata for WebDistributor,
                            (uint64_t (*)(uint64_t))sub_1002BEA38);
  swift_release();
  swift_bridgeObjectRelease();

  type metadata accessor for ADPInstallTask();
  swift_allocObject();
  uint64_t v63 = swift_retain();
  uint64_t v64 = sub_100346FA4(v63, v84);
  *(void *)(v0 + 888) = v64;
  _swift_task_switch(sub_1002F6C20, v64, 0);
}

uint64_t sub_1002F7BBC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 888);
  swift_task_dealloc();
  return _swift_task_switch(sub_1002F7CCC, v1, 0);
}

uint64_t sub_1002F7CCC()
{
  swift_willThrow();
  return _swift_task_switch(sub_1002F7D3C, 0, 0);
}

uint64_t sub_1002F7D3C()
{
  uint64_t v115 = v0;
  if (*(void *)(v0 + 560))
  {
    swift_getObjectType();
    *(void *)(v0 + 320) = 0;
    *(void *)(v0 + 328) = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    uint64_t v1 = *(void *)(v0 + 328);
    *(void *)(v0 + 304) = *(void *)(v0 + 320);
    *(void *)(v0 + 312) = v1;
    v2._uint64_t countAndFlagsBits = 0xD000000000000019;
    v2._object = (void *)0x80000001005BDAE0;
    String.append(_:)(v2);
    v3._uint64_t countAndFlagsBits = sub_1004DC2E4();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._uint64_t countAndFlagsBits = 8250;
    v4._object = (void *)0xE200000000000000;
    String.append(_:)(v4);
    swift_getErrorValue();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    XPCClientProtocol.logMessage(_:)(*(Swift::String *)(v0 + 304));
    swift_bridgeObjectRelease();
  }
  uint64_t v5 = *(void *)(v0 + 704);
  uint64_t v6 = *(void *)(v0 + 688);
  static Logger.updates.getter();
  sub_1002F9D70(v5, v6, type metadata accessor for IdentifiableAvailableUpdate);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v0 + 872);
  uint64_t v112 = *(void *)(v0 + 736);
  uint64_t v109 = *(void *)(v0 + 720);
  uint64_t v11 = *(void *)(v0 + 704);
  uint64_t v12 = *(void *)(v0 + 688);
  if (v9)
  {
    uint64_t v104 = *(void *)(v0 + 704);
    uint64_t v13 = swift_slowAlloc();
    os_log_type_t type = v8;
    uint64_t v14 = (void *)swift_slowAlloc();
    v114[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 138412802;
    uint64_t v99 = v10;
    uint64_t v15 = sub_1005163F0();
    *(void *)(v0 + 416) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v15;
    *(_WORD *)(v13 + 12) = 2082;
    uint64_t v16 = sub_1004DC2E4();
    *(void *)(v0 + 400) = sub_1000143F4(v16, v17, v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1002F9DD8(v12, type metadata accessor for IdentifiableAvailableUpdate);
    *(_WORD *)(v13 + 22) = 2082;
    swift_getErrorValue();
    uint64_t v18 = *(void *)(*(void *)(v0 + 256) - 8);
    swift_task_alloc();
    (*(void (**)(void))(v18 + 16))();
    uint64_t v19 = String.init<A>(describing:)();
    unint64_t v21 = v20;
    swift_task_dealloc();
    *(void *)(v0 + 424) = sub_1000143F4(v19, v21, v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, type, "[%@] Unable to enqueue update %{public}s: %{public}s", (uint8_t *)v13, 0x20u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    swift_errorRelease();
    swift_release();
    v99(v112, v109);
    uint64_t v22 = v104;
  }
  else
  {
    swift_release();

    swift_errorRelease();
    swift_errorRelease();
    sub_1002F9DD8(v12, type metadata accessor for IdentifiableAvailableUpdate);
    swift_errorRelease();
    swift_release();
    v10(v112, v109);
    uint64_t v22 = v11;
  }
  sub_1002F9DD8(v22, type metadata accessor for IdentifiableAvailableUpdate);
  uint64_t v23 = *(void *)(v0 + 864) + 1;
  uint64_t v24 = (uint64_t *)(v0 + 408);
  if (v23 == *(void *)(v0 + 848))
  {
LABEL_7:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    Swift::String v25 = *(uint64_t (**)(void))(v0 + 8);
    return v25();
  }
  else
  {
    Swift::String v27 = (void **)(v0 + 440);
    while (1)
    {
      *(void *)(v0 + 864) = v23;
      uint64_t v28 = *(void *)(v0 + 704);
      uint64_t v29 = *(void *)(v0 + 696);
      sub_1002F9D70(*(void *)(v0 + 808)+ ((*(unsigned __int8 *)(v0 + 944) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 944))+ *(void *)(v0 + 856) * v23, v28, type metadata accessor for IdentifiableAvailableUpdate);
      static Logger.updates.getter();
      sub_1002F9D70(v28, v29, type metadata accessor for IdentifiableAvailableUpdate);
      Swift::String v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        os_log_type_t v110 = v31;
        uint64_t v32 = swift_slowAlloc();
        uint64_t v33 = (void *)swift_slowAlloc();
        *uint64_t v24 = swift_slowAlloc();
        *(_DWORD *)uint64_t v32 = 138412546;
        if (qword_10065B150 != -1) {
          swift_once();
        }
        TaskLocal.get()();
        uint64_t v34 = *(void *)(v0 + 176);
        if (!v34) {
          goto LABEL_16;
        }
        swift_release();
        swift_release();
        swift_release();
        os_unfair_lock_lock((os_unfair_lock_t)(v34 + 24));
        sub_100006250((void **)(v34 + 16), v27);
        os_unfair_lock_unlock((os_unfair_lock_t)(v34 + 24));
        uint64_t v35 = (uint64_t)*v27;
        swift_release();
        if (!v35)
        {
LABEL_16:
          (*(void (**)(void, void, void))(*(void *)(v0 + 656) + 104))(*(void *)(v0 + 664), *(unsigned int *)(v0 + 948), *(void *)(v0 + 648));
          id v36 = objc_allocWithZone((Class)type metadata accessor for LogKey());
          uint64_t v35 = LogKey.init(prefix:)();
        }
        uint64_t v37 = *(void *)(v0 + 728);
        uint64_t v105 = *(void *)(v0 + 720);
        uint64_t v107 = *(void *)(v0 + 760);
        uint64_t v38 = *(void **)(v0 + 696);
        uint64_t v39 = *(void *)(v0 + 672);
        *(void *)(v32 + 4) = v35;
        void *v33 = v35;
        *(_WORD *)(v32 + 12) = 2082;
        *(void *)(v0 + 336) = 0;
        *(void *)(v0 + 344) = 0xE000000000000000;
        _StringGuts.grow(_:)(17);
        uint64_t v41 = v38[2];
        uint64_t v40 = v38[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(v0 + 288) = v41;
        *(void *)(v0 + 296) = v40;
        v42._uint64_t countAndFlagsBits = 58;
        v42._object = (void *)0xE100000000000000;
        String.append(_:)(v42);
        uint64_t v44 = v38[4];
        uint64_t v43 = (void *)v38[5];
        swift_bridgeObjectRetain();
        v45._uint64_t countAndFlagsBits = v44;
        v45._object = v43;
        String.append(_:)(v45);
        swift_bridgeObjectRelease();
        v46._uint64_t countAndFlagsBits = 58;
        v46._object = (void *)0xE100000000000000;
        String.append(_:)(v46);
        uint64_t v48 = v38[6];
        uint64_t v47 = (void *)v38[7];
        swift_bridgeObjectRetain();
        v49._uint64_t countAndFlagsBits = v48;
        v49._object = v47;
        String.append(_:)(v49);
        swift_bridgeObjectRelease();
        v50._uint64_t countAndFlagsBits = 2108704;
        v50._object = (void *)0xE300000000000000;
        String.append(_:)(v50);
        Swift::String v51 = (void *)((char *)v38 + *(int *)(v39 + 40));
        uint64_t v53 = *v51;
        uint64_t v52 = (void *)v51[1];
        swift_bridgeObjectRetain();
        v54._uint64_t countAndFlagsBits = v53;
        v54._object = v52;
        String.append(_:)(v54);
        swift_bridgeObjectRelease();
        v55._uint64_t countAndFlagsBits = 40;
        v55._object = (void *)0xE100000000000000;
        String.append(_:)(v55);
        uint64_t v56 = (void *)((char *)v38 + *(int *)(v39 + 36));
        uint64_t v57 = *v56;
        id v58 = (void *)v56[1];
        swift_bridgeObjectRetain();
        v59._uint64_t countAndFlagsBits = v57;
        v59._object = v58;
        String.append(_:)(v59);
        swift_bridgeObjectRelease();
        v60._uint64_t countAndFlagsBits = 41;
        v60._object = (void *)0xE100000000000000;
        String.append(_:)(v60);
        uint64_t v24 = (uint64_t *)(v0 + 408);
        *(void *)(v32 + 14) = sub_1000143F4(*(void *)(v0 + 288), *(void *)(v0 + 296), (uint64_t *)(v0 + 408));
        swift_bridgeObjectRelease();
        sub_1002F9DD8((uint64_t)v38, type metadata accessor for IdentifiableAvailableUpdate);
        _os_log_impl((void *)&_mh_execute_header, v30, v110, "[%@] Starting update for %{public}s", (uint8_t *)v32, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        unint64_t v61 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
        v61(v107, v105);
        Swift::String v27 = (void **)(v0 + 440);
      }
      else
      {
        uint64_t v62 = *(void *)(v0 + 760);
        uint64_t v63 = *(void *)(v0 + 728);
        uint64_t v64 = *(void *)(v0 + 720);
        sub_1002F9DD8(*(void *)(v0 + 696), type metadata accessor for IdentifiableAvailableUpdate);

        unint64_t v61 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
        v61(v62, v64);
      }
      *(void *)(v0 + 872) = v61;
      if (*(void *)(v0 + 560))
      {
        swift_getObjectType();
        *(void *)(v0 + 352) = 0;
        *(void *)(v0 + 360) = 0xE000000000000000;
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease();
        *(void *)(v0 + 272) = 0xD000000000000014;
        *(void *)(v0 + 280) = 0x80000001005BDB00;
        v65._uint64_t countAndFlagsBits = sub_1004DC08C(1);
        String.append(_:)(v65);
        swift_bridgeObjectRelease();
        XPCClientProtocol.logMessage(_:)(*(Swift::String *)(v0 + 272));
        swift_bridgeObjectRelease();
      }
      uint64_t v66 = *(void *)(v0 + 704) + *(int *)(*(void *)(v0 + 672) + 32);
      Swift::String_optional v67 = URL.host(percentEncoded:)(1);
      if (v67.value._object) {
        break;
      }
      sub_1002F9DD8(*(void *)(v0 + 704), type metadata accessor for IdentifiableAvailableUpdate);
      uint64_t v23 = *(void *)(v0 + 864) + 1;
      if (v23 == *(void *)(v0 + 848)) {
        goto LABEL_7;
      }
    }
    uint64_t countAndFlagsBits = v67.value._countAndFlagsBits;
    object = v67.value._object;
    uint64_t v70 = URL.port.getter();
    if ((v71 & 1) == 0)
    {
      uint64_t v72 = v70;
      *(Swift::String_optional *)(v0 + 368) = v67;
      v73._uint64_t countAndFlagsBits = 58;
      v73._object = (void *)0xE100000000000000;
      String.append(_:)(v73);
      *(void *)(v0 + 384) = v72;
      v74._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v74);
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = *(void *)(v0 + 368);
      object = *(void **)(v0 + 376);
    }
    unsigned int v97 = *(_DWORD *)(v0 + 956);
    unsigned int v101 = *(_DWORD *)(v0 + 952);
    uint64_t v75 = *(void **)(v0 + 704);
    uint64_t v89 = *(void *)(v0 + 672);
    uint64_t v76 = *(void *)(v0 + 664);
    uint64_t v77 = *(void *)(v0 + 656);
    uint64_t v78 = *(void *)(v0 + 648);
    uint64_t v106 = *(void *)(v0 + 640);
    uint64_t v113 = *(void *)(v0 + 632);
    uint64_t v79 = *(void *)(v0 + 624);
    *(void *)os_log_type_t typea = *(void *)(v0 + 616);
    uint64_t v111 = *(void *)(v0 + 608);
    uint64_t v80 = *(void *)(v0 + 600);
    uint64_t v90 = *(void *)(v0 + 592);
    uint64_t v91 = *(void *)(v0 + 584);
    uint64_t v92 = *(void *)(v0 + 576);
    uint64_t v108 = *(void *)(v0 + 568);
    uint64_t v103 = *(void *)(v0 + 536);
    uint64_t v100 = *(void *)(v0 + 520);
    uint64_t v96 = *(void *)(v0 + 512);
    UUID.init()();
    (*(void (**)(uint64_t, void, uint64_t))(v77 + 104))(v76, v101, v78);
    id v81 = objc_allocWithZone((Class)type metadata accessor for LogKey());
    uint64_t v102 = (void *)LogKey.init(prefix:)();
    (*(void (**)(uint64_t, void, os_log_type_t *))(v79 + 104))(v113, v97, *(os_log_type_t **)typea);
    uint64_t v82 = (void *)((char *)v75 + *(int *)(v89 + 44));
    uint64_t v83 = v82[1];
    uint64_t v98 = *v82;
    unint64_t v84 = v75[1];
    *(void *)typeb = *v75;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 16))(v111, v66, v90);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v80 + 56))(v91, 1, 1, v90);
    sub_100017238((uint64_t)v75 + *(int *)(v89 + 48), v92, &qword_10065C3C0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v85 = swift_unknownObjectRetain();
    *((void *)&v88 + 1) = *(void *)typeb;
    *(void *)&long long v88 = v83;
    *(void *)(v0 + 880) = sub_1002F48A4(v106, v102, countAndFlagsBits, (uint64_t)object, v113, 0, 0, v98, v88, v84, 0, v111, v91, v96, v100, v85, v103, 0, 0xF000000000000000,
                              0,
                              0,
                              1,
                              v92,
                              (uint64_t)&type metadata for WebDistributor,
                              (uint64_t (*)(uint64_t))sub_1002BEA38);
    swift_release();
    swift_bridgeObjectRelease();

    type metadata accessor for ADPInstallTask();
    swift_allocObject();
    uint64_t v86 = swift_retain();
    uint64_t v87 = sub_100346FA4(v86, v108);
    *(void *)(v0 + 888) = v87;
    return _swift_task_switch(sub_1002F6C20, v87, 0);
  }
}

uint64_t sub_1002F8BA4()
{
  char v143 = v0;
  uint64_t v1 = v0;
  static Logger.updates.getter();
  swift_errorRetain();
  swift_errorRetain();
  Swift::String v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v132 = v0[91];
    uint64_t v135 = v0[90];
    uint64_t v138 = v0[93];
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v141 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412546;
    uint64_t v6 = sub_1005163F0();
    v0[57] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    *(_WORD *)(v4 + 12) = 2082;
    swift_getErrorValue();
    uint64_t v7 = *(void *)(v0[26] - 8);
    swift_task_alloc();
    (*(void (**)(void))(v7 + 16))();
    uint64_t v8 = String.init<A>(describing:)();
    unint64_t v10 = v9;
    swift_task_dealloc();
    v1[60] = sub_1000143F4(v8, v10, &v141);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%@] Error saving updates to database: %{public}s", (uint8_t *)v4, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v138, v135);
  }
  else
  {
    uint64_t v11 = v0[93];
    uint64_t v12 = v0[91];
    uint64_t v13 = v1[90];
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }
  uint64_t v14 = v1;
  uint64_t v15 = v1[101];
  uint64_t v16 = v1[70];
  uint64_t v17 = *(void *)(v15 + 16);
  v1[106] = v17;
  if (!v17)
  {
    if (v16)
    {
      swift_getObjectType();
      v48._uint64_t countAndFlagsBits = 0xD000000000000026;
      v48._object = (void *)0x80000001005BDB40;
      XPCClientProtocol.logMessage(_:)(v48);
    }
    goto LABEL_16;
  }
  uint64_t v139 = v1;
  if (v16)
  {
    uint64_t v18 = (void *)v1[89];
    uint64_t v19 = v1[85];
    uint64_t v141 = 0;
    unint64_t v142 = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    uint64_t v20 = v15 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    uint64_t v133 = *(void *)(v19 + 72);
    swift_bridgeObjectRetain();
    unint64_t v21 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v22 = v14[89];
      sub_1002F9D70(v20, v22, type metadata accessor for IdentifiableAvailableUpdate);
      uint64_t v141 = 0;
      unint64_t v142 = 0xE000000000000000;
      _StringGuts.grow(_:)(53);
      v23._uint64_t countAndFlagsBits = 0x4920656C646E7562;
      v23._object = (void *)0xEB00000000203A44;
      String.append(_:)(v23);
      uint64_t v24 = v18[2];
      Swift::String v25 = (void *)v18[3];
      swift_bridgeObjectRetain();
      v26._uint64_t countAndFlagsBits = v24;
      v26._object = v25;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._uint64_t countAndFlagsBits = 0x49206D657469202CLL;
      v27._object = (void *)0xEB00000000203A44;
      String.append(_:)(v27);
      uint64_t v28 = v18[4];
      uint64_t v29 = (void *)v18[5];
      swift_bridgeObjectRetain();
      v30._uint64_t countAndFlagsBits = v28;
      v30._object = v29;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31._uint64_t countAndFlagsBits = 0x6F6973726576202CLL;
      v31._object = (void *)0xEE00203A4449206ELL;
      String.append(_:)(v31);
      uint64_t v32 = v18[6];
      uint64_t v33 = (void *)v18[7];
      swift_bridgeObjectRetain();
      v34._uint64_t countAndFlagsBits = v32;
      v34._object = v33;
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      v35._uint64_t countAndFlagsBits = 0x203A504441202CLL;
      v35._object = (void *)0xE700000000000000;
      String.append(_:)(v35);
      sub_1002F9C14();
      v36._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v36);
      swift_bridgeObjectRelease();
      v37._uint64_t countAndFlagsBits = 0;
      v37._object = (void *)0xE000000000000000;
      String.append(_:)(v37);
      uint64_t v38 = v141;
      unint64_t v39 = v142;
      sub_1002F9DD8(v22, type metadata accessor for IdentifiableAvailableUpdate);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v21 = sub_10028ED9C(0, v21[2] + 1, 1, v21);
      }
      uint64_t v14 = v139;
      unint64_t v41 = v21[2];
      unint64_t v40 = v21[3];
      if (v41 >= v40 >> 1) {
        unint64_t v21 = sub_10028ED9C((void *)(v40 > 1), v41 + 1, 1, v21);
      }
      v21[2] = v41 + 1;
      Swift::String v42 = &v21[2 * v41];
      v42[4] = v38;
      v42[5] = v39;
      v20 += v133;
      --v17;
    }
    while (v17);
    swift_getObjectType();
    swift_bridgeObjectRelease();
    v139[56] = v21;
    sub_1000172F8((uint64_t *)&unk_10065C5D0);
    sub_10017B8C8();
    uint64_t v43 = BidirectionalCollection<>.joined(separator:)();
    Swift::String v45 = v44;
    swift_bridgeObjectRelease();
    v46._uint64_t countAndFlagsBits = v43;
    v46._object = v45;
    String.append(_:)(v46);
    uint64_t v14 = v139;
    swift_bridgeObjectRelease();
    v47._uint64_t countAndFlagsBits = 0xD000000000000014;
    v47._object = (void *)0x80000001005BDB20;
    XPCClientProtocol.logMessage(_:)(v47);
    swift_bridgeObjectRelease();
    if (*((unsigned char *)v139 + 127)) {
      goto LABEL_20;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    Swift::String v49 = (uint64_t (*)(void))v14[1];
    return v49();
  }
  if (*((unsigned char *)v1 + 127) != 1) {
    goto LABEL_16;
  }
LABEL_20:
  uint64_t v51 = 0;
  uint64_t v136 = v14 + 51;
  uint64_t v121 = (void **)(v14 + 55);
  uint64_t v52 = v14[85];
  *((_DWORD *)v14 + 236) = *(_DWORD *)(v52 + 80);
  v14[107] = *(void *)(v52 + 72);
  *((_DWORD *)v14 + 237) = enum case for LogKey.Prefix.undefined(_:);
  *((_DWORD *)v14 + 238) = enum case for LogKey.Prefix.automaticUpdate(_:);
  *((_DWORD *)v14 + 239) = enum case for AppInstallRequestType.automaticUpdate(_:);
  while (1)
  {
    v14[108] = v51;
    uint64_t v53 = v14[88];
    uint64_t v54 = v14[87];
    sub_1002F9D70(v14[101]+ ((*((unsigned __int8 *)v14 + 944) + 32) & ~(unint64_t)*((unsigned __int8 *)v14 + 944))+ v14[107] * v51, v53, type metadata accessor for IdentifiableAvailableUpdate);
    static Logger.updates.getter();
    sub_1002F9D70(v53, v54, type metadata accessor for IdentifiableAvailableUpdate);
    Swift::String v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v55, v56))
    {
      uint64_t v61 = v14[95];
      uint64_t v62 = v14[91];
      uint64_t v63 = v14[90];
      sub_1002F9DD8(v14[87], type metadata accessor for IdentifiableAvailableUpdate);

      uint64_t v64 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
      v64(v61, v63);
      goto LABEL_31;
    }
    uint64_t v57 = swift_slowAlloc();
    id v58 = (void *)swift_slowAlloc();
    *uint64_t v136 = swift_slowAlloc();
    *(_DWORD *)uint64_t v57 = 138412546;
    if (qword_10065B150 != -1) {
      swift_once();
    }
    TaskLocal.get()();
    uint64_t v59 = v14[22];
    if (!v59) {
      goto LABEL_29;
    }
    swift_release();
    swift_release();
    swift_release();
    os_unfair_lock_lock((os_unfair_lock_t)(v59 + 24));
    sub_100006250((void **)(v59 + 16), v121);
    os_unfair_lock_unlock((os_unfair_lock_t)(v59 + 24));
    uint64_t v60 = (uint64_t)*v121;
    swift_release();
    if (!v60)
    {
      uint64_t v14 = v139;
LABEL_29:
      (*(void (**)(void, void, void))(v14[82] + 104))(v14[83], *((unsigned int *)v14 + 237), v14[81]);
      id v65 = objc_allocWithZone((Class)type metadata accessor for LogKey());
      uint64_t v60 = LogKey.init(prefix:)();
      goto LABEL_30;
    }
    uint64_t v14 = v139;
LABEL_30:
    uint64_t v66 = v14[91];
    uint64_t v128 = v14[90];
    uint64_t v130 = v14[95];
    Swift::String_optional v67 = (void *)v14[87];
    uint64_t v68 = v14[84];
    *(void *)(v57 + 4) = v60;
    *id v58 = v60;
    *(_WORD *)(v57 + 12) = 2082;
    v14[42] = 0;
    v14[43] = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    uint64_t v69 = v67[2];
    uint64_t v70 = v67[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v139[36] = v69;
    v139[37] = v70;
    v71._uint64_t countAndFlagsBits = 58;
    v71._object = (void *)0xE100000000000000;
    String.append(_:)(v71);
    uint64_t v72 = v67[4];
    Swift::String v73 = (void *)v67[5];
    swift_bridgeObjectRetain();
    v74._uint64_t countAndFlagsBits = v72;
    v74._object = v73;
    String.append(_:)(v74);
    swift_bridgeObjectRelease();
    v75._uint64_t countAndFlagsBits = 58;
    v75._object = (void *)0xE100000000000000;
    String.append(_:)(v75);
    uint64_t v76 = v67[6];
    uint64_t v77 = (void *)v67[7];
    swift_bridgeObjectRetain();
    v78._uint64_t countAndFlagsBits = v76;
    v78._object = v77;
    String.append(_:)(v78);
    swift_bridgeObjectRelease();
    v79._uint64_t countAndFlagsBits = 2108704;
    v79._object = (void *)0xE300000000000000;
    String.append(_:)(v79);
    uint64_t v80 = (void *)((char *)v67 + *(int *)(v68 + 40));
    uint64_t v81 = *v80;
    uint64_t v82 = (void *)v80[1];
    swift_bridgeObjectRetain();
    v83._uint64_t countAndFlagsBits = v81;
    v83._object = v82;
    String.append(_:)(v83);
    swift_bridgeObjectRelease();
    v84._uint64_t countAndFlagsBits = 40;
    v84._object = (void *)0xE100000000000000;
    String.append(_:)(v84);
    uint64_t v85 = (void *)((char *)v67 + *(int *)(v68 + 36));
    uint64_t v86 = *v85;
    uint64_t v87 = (void *)v85[1];
    swift_bridgeObjectRetain();
    v88._uint64_t countAndFlagsBits = v86;
    v88._object = v87;
    String.append(_:)(v88);
    uint64_t v14 = v139;
    swift_bridgeObjectRelease();
    v89._uint64_t countAndFlagsBits = 41;
    v89._object = (void *)0xE100000000000000;
    String.append(_:)(v89);
    *(void *)(v57 + 14) = sub_1000143F4(v139[36], v139[37], v136);
    swift_bridgeObjectRelease();
    sub_1002F9DD8((uint64_t)v67, type metadata accessor for IdentifiableAvailableUpdate);
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "[%@] Starting update for %{public}s", (uint8_t *)v57, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v64 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
    v64(v130, v128);
LABEL_31:
    v14[109] = v64;
    if (v14[70])
    {
      swift_getObjectType();
      v14[44] = 0;
      v14[45] = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      v14[34] = 0xD000000000000014;
      v14[35] = 0x80000001005BDB00;
      v90._uint64_t countAndFlagsBits = sub_1004DC08C(1);
      String.append(_:)(v90);
      swift_bridgeObjectRelease();
      XPCClientProtocol.logMessage(_:)(*((Swift::String *)v14 + 17));
      swift_bridgeObjectRelease();
    }
    uint64_t v91 = v14[88] + *(int *)(v14[84] + 32);
    Swift::String_optional v92 = URL.host(percentEncoded:)(1);
    if (v92.value._object) {
      break;
    }
    sub_1002F9DD8(v14[88], type metadata accessor for IdentifiableAvailableUpdate);
    uint64_t v51 = v14[108] + 1;
    if (v51 == v14[106]) {
      goto LABEL_16;
    }
  }
  uint64_t countAndFlagsBits = v92.value._countAndFlagsBits;
  object = v92.value._object;
  uint64_t v95 = URL.port.getter();
  if ((v96 & 1) == 0)
  {
    uint64_t v97 = v95;
    *((Swift::String_optional *)v14 + 23) = v92;
    v98._uint64_t countAndFlagsBits = 58;
    v98._object = (void *)0xE100000000000000;
    String.append(_:)(v98);
    v14[48] = v97;
    v99._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v99);
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = v14[46];
    object = (void *)v14[47];
  }
  unsigned int v123 = *((_DWORD *)v14 + 239);
  unsigned int v126 = *((_DWORD *)v14 + 238);
  uint64_t v100 = (uint64_t *)v14[88];
  uint64_t v115 = v14[84];
  uint64_t v101 = v14[83];
  uint64_t v102 = v14[82];
  uint64_t v103 = v14[81];
  uint64_t v131 = v14[80];
  uint64_t v140 = v14[79];
  uint64_t v104 = v14[78];
  uint64_t v119 = v14[77];
  uint64_t v137 = v14[76];
  uint64_t v105 = v14;
  uint64_t v106 = v14[75];
  uint64_t v116 = v105[74];
  uint64_t v117 = v105[73];
  uint64_t v118 = v105[72];
  uint64_t v134 = v105[71];
  uint64_t v129 = v105[67];
  uint64_t v125 = v105[65];
  uint64_t v122 = v105[64];
  UUID.init()();
  (*(void (**)(uint64_t, void, uint64_t))(v102 + 104))(v101, v126, v103);
  id v107 = objc_allocWithZone((Class)type metadata accessor for LogKey());
  uint64_t v127 = (void *)LogKey.init(prefix:)();
  (*(void (**)(uint64_t, void, uint64_t))(v104 + 104))(v140, v123, v119);
  uint64_t v108 = (uint64_t *)((char *)v100 + *(int *)(v115 + 44));
  uint64_t v109 = v108[1];
  uint64_t v124 = *v108;
  unint64_t v110 = v100[1];
  uint64_t v120 = *v100;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v106 + 16))(v137, v91, v116);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v106 + 56))(v117, 1, 1, v116);
  sub_100017238((uint64_t)v100 + *(int *)(v115 + 48), v118, &qword_10065C3C0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v111 = swift_unknownObjectRetain();
  *((void *)&v114 + 1) = v120;
  *(void *)&long long v114 = v109;
  v105[110] = sub_1002F48A4(v131, v127, countAndFlagsBits, (uint64_t)object, v140, 0, 0, v124, v114, v110, 0, v137, v117, v122, v125, v111, v129, 0, 0xF000000000000000,
                0,
                0,
                1,
                v118,
                (uint64_t)&type metadata for WebDistributor,
                (uint64_t (*)(uint64_t))sub_1002BEA38);

  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for ADPInstallTask();
  swift_allocObject();
  uint64_t v112 = swift_retain();
  uint64_t v113 = sub_100346FA4(v112, v134);
  v105[111] = v113;
  return _swift_task_switch(sub_1002F6C20, v113, 0);
}

uint64_t sub_1002F9BF8(uint64_t a1)
{
  return sub_1002EF2F0(a1, *(void *)(v1 + 16));
}

unint64_t sub_1002F9C14()
{
  unint64_t result = qword_10065C4D8;
  if (!qword_10065C4D8)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10065C4D8);
  }
  return result;
}

uint64_t sub_1002F9C6C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1002F9CC8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002F9D1C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002F9D70(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002F9DD8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1002F9E38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IdentifiableAvailableUpdate(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002F9E9C()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 48)) {
    sub_100014524(v0 + 24);
  }

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1002F9EE4(void *a1)
{
  return sub_1002EF3CC(a1, *(void *)(v1 + 16), v1 + 24);
}

uint64_t sub_1002F9EF0()
{
  return swift_release();
}

unint64_t sub_1002F9EF8()
{
  unint64_t result = qword_1006666C0;
  if (!qword_1006666C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006666C0);
  }
  return result;
}

__n128 *sub_1002F9F4C(__n128 *a1, __n128 *a2)
{
  return a2;
}

uint64_t destroy for WebDistributionUpdateDiscovery.Key()
{
  sub_10018ACBC();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for WebDistributionUpdateDiscovery.Key(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  char v6 = *((unsigned char *)a2 + 16);
  sub_1001C617C();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v7 = a2[4];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for WebDistributionUpdateDiscovery.Key(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  char v6 = *((unsigned char *)a2 + 16);
  sub_1001C617C();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  sub_10018ACBC();
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for WebDistributionUpdateDiscovery.Key(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  sub_10018ACBC();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for WebDistributionUpdateDiscovery.Key(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WebDistributionUpdateDiscovery.Key(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WebDistributionUpdateDiscovery.Key()
{
  return &type metadata for WebDistributionUpdateDiscovery.Key;
}

unint64_t sub_1002FA1D0()
{
  unint64_t result = qword_100660380;
  if (!qword_100660380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660380);
  }
  return result;
}

uint64_t sub_1002FA224(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000172F8(&qword_100660428);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10018AC60(a1, a1[3]);
  sub_1002FD068();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v11 = *v3;
  v10[7] = 0;
  sub_1000172F8(&qword_100660438);
  sub_1002FDCE8(&qword_100660440, &qword_100660438, (void (*)(void))sub_1002FD0BC);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v10[6] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[5] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1002FA408(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[0] = a4;
  v12[1] = a5;
  uint64_t v7 = sub_1000172F8(&qword_100660490);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_1002FDDA8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    char v13 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

unint64_t sub_1002FA57C(char a1)
{
  unint64_t result = 0x657449656C707061;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x726556656C707061;
      break;
    case 2:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 3:
      unint64_t result = 0x6572616853707061;
      break;
    case 4:
      unint64_t result = 0xD000000000000018;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1002FA654(char a1)
{
  unint64_t result = 0x657449656C707061;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x726556656C707061;
      break;
    case 2:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 3:
      unint64_t result = 0x6572616853707061;
      break;
    case 4:
      unint64_t result = 0xD000000000000018;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1002FA72C()
{
  uint64_t v1 = 0x6D726F6674616C70;
  if (*v0 != 1) {
    uint64_t v1 = 0x6F6973726556736FLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1936748641;
  }
}

uint64_t sub_1002FA784@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002FD110(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002FA7AC(uint64_t a1)
{
  unint64_t v2 = sub_1002FD068();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002FA7E8(uint64_t a1)
{
  unint64_t v2 = sub_1002FD068();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002FA824(void *a1)
{
  return sub_1002FA224(a1);
}

uint64_t sub_1002FA83C()
{
  if (*v0) {
    return 0x726556656C707061;
  }
  else {
    return 0x657449656C707061;
  }
}

uint64_t sub_1002FA88C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002FD264(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002FA8B4(uint64_t a1)
{
  unint64_t v2 = sub_1002FDDA8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002FA8F0(uint64_t a1)
{
  unint64_t v2 = sub_1002FDDA8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002FA92C(void *a1)
{
  return sub_1002FA408(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1002FA94C(unsigned __int8 *a1, char *a2)
{
  return sub_10051C914(*a1, *a2);
}

Swift::Int sub_1002FA958()
{
  return sub_10040F5AC();
}

uint64_t sub_1002FA960()
{
  return sub_100449C4C();
}

Swift::Int sub_1002FA968()
{
  return sub_10044AF00();
}

unint64_t sub_1002FA970@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1002FD394(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1002FA9A0@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1002FA57C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1002FA9CC()
{
  return sub_1002FA654(*v0);
}

unint64_t sub_1002FA9D4@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1002FD394(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1002FA9FC(uint64_t a1)
{
  unint64_t v2 = sub_1002FDEA4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002FAA38(uint64_t a1)
{
  unint64_t v2 = sub_1002FDEA4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002FAA74()
{
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  uint64_t v1 = *v0;
  unint64_t v2 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0x203A64697665202CLL;
  v4._object = (void *)0xE800000000000000;
  String.append(_:)(v4);
  uint64_t v5 = v0[2];
  uint64_t v6 = (void *)v0[3];
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 0x203A504441202CLL;
  v8._object = (void *)0xE700000000000000;
  String.append(_:)(v8);
  type metadata accessor for AvailableRestore();
  type metadata accessor for URL();
  sub_1002FDFC0(&qword_10065C4D8, (void (*)(uint64_t))&type metadata accessor for URL);
  v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  return 0x3A4449206D657469;
}

uint64_t sub_1002FABD0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v3 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v3 - 8);
  Swift::String v30 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for URL();
  uint64_t v31 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000172F8(&qword_1006604B8);
  uint64_t v32 = *(void *)(v7 - 8);
  uint64_t v33 = v7;
  __chkstk_darwin(v7);
  Swift::String v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AvailableRestore();
  __chkstk_darwin(v10);
  uint64_t v12 = (void *)((char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10018AC60(a1, a1[3]);
  sub_1002FDEA4();
  uint64_t v13 = (uint64_t)v35;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    return sub_100014524((uint64_t)a1);
  }
  char v14 = v6;
  Swift::String v35 = a1;
  uint64_t v28 = (int *)v10;
  uint64_t v15 = v34;
  char v40 = 0;
  uint64_t v17 = v32;
  uint64_t v16 = v33;
  *uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  v12[1] = v18;
  char v39 = 1;
  void v12[2] = KeyedDecodingContainer.decode(_:forKey:)();
  v12[3] = v19;
  char v38 = 2;
  sub_1002FDFC0(&qword_10065CFD8, (void (*)(uint64_t))&type metadata accessor for URL);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))((char *)v12 + v28[6], v14, v15);
  char v37 = 3;
  uint64_t v20 = (uint64_t)v30;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v27[1] = 0;
  sub_10026400C(v20, (uint64_t)v12 + v28[7]);
  char v36 = 4;
  uint64_t v21 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v23 = v22;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v9, v16);
  uint64_t v24 = v29;
  Swift::String v25 = (uint64_t *)((char *)v12 + v28[8]);
  uint64_t *v25 = v21;
  v25[1] = v23;
  sub_1002FDEF8((uint64_t)v12, v24, (uint64_t (*)(void))type metadata accessor for AvailableRestore);
  sub_100014524((uint64_t)v35);
  return sub_1002FDF60((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for AvailableRestore);
}

uint64_t sub_1002FB0E8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002FABD0(a1, a2);
}

uint64_t sub_1002FB104(char *a1, char *a2)
{
  return sub_10051DA2C(*a1, *a2);
}

Swift::Int sub_1002FB110()
{
  return Hasher._finalize()();
}

uint64_t sub_1002FB194()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1002FB204()
{
  return Hasher._finalize()();
}

uint64_t sub_1002FB284@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100638F90, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_1002FB2E4(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1701080931;
  if (*v1) {
    uint64_t v2 = 0x7470697263736564;
  }
  unint64_t v3 = 0xE400000000000000;
  if (*v1) {
    unint64_t v3 = 0xEB000000006E6F69;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1002FB324()
{
  if (*v0) {
    return 0x7470697263736564;
  }
  else {
    return 1701080931;
  }
}

uint64_t sub_1002FB360@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100638F90, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_1002FB3C4(uint64_t a1)
{
  unint64_t v2 = sub_1002FE780();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002FB400(uint64_t a1)
{
  unint64_t v2 = sub_1002FE780();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002FB43C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1002FD3E0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1002FB46C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10051D8F0(*a1, *a2);
}

Swift::Int sub_1002FB478()
{
  return Hasher._finalize()();
}

uint64_t sub_1002FB530()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1002FB5D4()
{
  return Hasher._finalize()();
}

unint64_t sub_1002FB688@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1002FD588(*a1);
  *a2 = result;
  return result;
}

void sub_1002FB6B8(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xEB0000000064496DLL;
  unint64_t v4 = 0xEE0064496E6F6973;
  uint64_t v5 = 0x726556656C707061;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6572756C696166;
    unint64_t v4 = 0xE700000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x657449656C707061;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1002FB72C()
{
  uint64_t v1 = 0x726556656C707061;
  if (*v0 != 1) {
    uint64_t v1 = 0x6572756C696166;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x657449656C707061;
  }
}

unint64_t sub_1002FB79C@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1002FD588(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1002FB7C4(uint64_t a1)
{
  unint64_t v2 = sub_1002FDDFC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002FB800(uint64_t a1)
{
  unint64_t v2 = sub_1002FDDFC();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1002FB83C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1002FD5D4(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_1002FB88C()
{
  if (*v0) {
    return 0x736572756C696166;
  }
  else {
    return 0x7365726F74736572;
  }
}

uint64_t sub_1002FB8C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002FD89C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002FB8E8(uint64_t a1)
{
  unint64_t v2 = sub_1002FDBF0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002FB924(uint64_t a1)
{
  unint64_t v2 = sub_1002FDBF0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002FB960@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1002FD990(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1002FB98C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Platform();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  Swift::String v48 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v9 = (int *)type metadata accessor for Restore();
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    uint64_t v44 = v7;
    uint64_t v45 = v6;
    uint64_t v46 = a2;
    Swift::String v47 = a3;
    uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
    uint64_t v43 = a1;
    uint64_t v15 = a1 + ((v14 + 32) & ~v14);
    uint64_t v16 = *(void *)(v10 + 72);
    uint64_t v17 = _swiftEmptyArrayStorage;
    uint64_t v49 = v16;
    do
    {
      sub_1002FDEF8(v15, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Restore);
      uint64_t v19 = &v12[v9[15]];
      if ((v19[8] & 1) == 0)
      {
        uint64_t v20 = *(void *)v19;
        uint64_t v21 = &v12[v9[16]];
        if (v21[8])
        {
          *(void *)&v51[0] = v20;
          uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v24 = v23;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v17 = sub_10029059C(0, v17[2] + 1, 1, v17);
          }
          unint64_t v26 = v17[2];
          unint64_t v25 = v17[3];
          if (v26 >= v25 >> 1) {
            uint64_t v17 = sub_10029059C((void *)(v25 > 1), v26 + 1, 1, v17);
          }
          v17[2] = v26 + 1;
          uint64_t v18 = &v17[4 * v26];
          void v18[4] = v22;
          v18[5] = v24;
          v18[6] = 0;
          v18[7] = 0;
        }
        else
        {
          if (v12[v9[22]])
          {
            uint64_t v50 = 0;
            uint64_t v27 = 0;
          }
          else
          {
            *(void *)&v51[0] = *(void *)v21;
            uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v27 = v28;
          }
          *(void *)&v51[0] = v20;
          uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v31 = v30;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v17 = sub_10029059C(0, v17[2] + 1, 1, v17);
          }
          unint64_t v33 = v17[2];
          unint64_t v32 = v17[3];
          if (v33 >= v32 >> 1) {
            uint64_t v17 = sub_10029059C((void *)(v32 > 1), v33 + 1, 1, v17);
          }
          v17[2] = v33 + 1;
          uint64_t v34 = &v17[4 * v33];
          void v34[4] = v29;
          v34[5] = v31;
          uint64_t v16 = v49;
          v34[6] = v50;
          v34[7] = v27;
        }
      }
      sub_1002FDF60((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Restore);
      v15 += v16;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    a2 = v46;
    a3 = v47;
    uint64_t v7 = v44;
    uint64_t v6 = v45;
    if ((*(unsigned char *)(v46 + 108) & 1) == 0) {
      goto LABEL_20;
    }
LABEL_22:
    unint64_t v38 = 0xE600000000000000;
    uint64_t v36 = 0x534F64615069;
    goto LABEL_23;
  }
  swift_bridgeObjectRelease();
  uint64_t v17 = _swiftEmptyArrayStorage;
  if (*(unsigned char *)(a2 + 108)) {
    goto LABEL_22;
  }
LABEL_20:
  Swift::String v35 = v48;
  static Platform.iOS.getter();
  uint64_t v36 = Platform.description.getter();
  unint64_t v38 = v37;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v35, v6);
LABEL_23:
  long long v39 = *(_OWORD *)(a2 + 72);
  v51[0] = *(_OWORD *)(a2 + 56);
  v51[1] = v39;
  uint64_t v40 = *(void *)(a2 + 88);
  uint64_t v52 = v40;
  uint64_t v41 = *((void *)&v39 + 1);
  uint64_t result = sub_10018B098((uint64_t)v51);
  *a3 = v17;
  a3[1] = v36;
  a3[2] = v38;
  a3[3] = v41;
  a3[4] = v40;
  return result;
}

ValueMetadata *type metadata accessor for RestoreAppHTTPRequest()
{
  return &type metadata for RestoreAppHTTPRequest;
}

uint64_t destroy for RestoresResponse()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s28ManagedAppDistributionDaemon16RestoresResponseVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for RestoresResponse(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for RestoresResponse(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RestoresResponse(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RestoresResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RestoresResponse()
{
  return &type metadata for RestoresResponse;
}

uint64_t destroy for RestoreHTTPRequest()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for RestoreHTTPRequest(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for RestoreHTTPRequest(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for RestoreHTTPRequest(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RestoreHTTPRequest(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RestoreHTTPRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RestoreHTTPRequest()
{
  return &type metadata for RestoreHTTPRequest;
}

uint64_t initializeWithCopy for FailedRestore(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for FailedRestore(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FailedRestore(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for FailedRestore()
{
  return &type metadata for FailedRestore;
}

void *sub_1002FC2CC(void *a1, char *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *(void *)a2;
    *uint64_t v4 = *(void *)a2;
    uint64_t v4 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *((void *)a2 + 1);
    *a1 = *(void *)a2;
    a1[1] = v7;
    uint64_t v8 = *((void *)a2 + 3);
    a1[2] = *((void *)a2 + 2);
    a1[3] = v8;
    uint64_t v9 = a3[6];
    uint64_t v24 = (char *)a1 + v9;
    uint64_t v10 = &a2[v9];
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v24, v10, v11);
    uint64_t v14 = a3[7];
    uint64_t v15 = (char *)v4 + v14;
    uint64_t v16 = &a2[v14];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&a2[v14], 1, v11))
    {
      uint64_t v17 = sub_1000172F8(&qword_10065C3C0);
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      v13(v15, v16, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
    }
    uint64_t v19 = a3[8];
    uint64_t v20 = (void *)((char *)v4 + v19);
    uint64_t v21 = &a2[v19];
    uint64_t v22 = *((void *)v21 + 1);
    *uint64_t v20 = *(void *)v21;
    v20[1] = v22;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1002FC4A8(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  uint64_t v8 = a1 + *(int *)(a2 + 28);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }

  return swift_bridgeObjectRelease();
}

void *sub_1002FC5A8(void *a1, char *a2, int *a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *a1 = *(void *)a2;
  a1[1] = v6;
  uint64_t v7 = *((void *)a2 + 3);
  a1[2] = *((void *)a2 + 2);
  a1[3] = v7;
  uint64_t v8 = a3[6];
  uint64_t v22 = (char *)a1 + v8;
  uint64_t v9 = &a2[v8];
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v22, v9, v10);
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = &a2[v13];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(&a2[v13], 1, v10))
  {
    uint64_t v16 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v12(v14, v15, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
  }
  uint64_t v17 = a3[8];
  uint64_t v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = &a2[v17];
  uint64_t v20 = *((void *)v19 + 1);
  *uint64_t v18 = *(void *)v19;
  v18[1] = v20;
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_1002FC734(char *a1, void *a2, uint64_t a3)
{
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 2) = a2[2];
  *((void *)a1 + 3) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v21(v7, v8, v9);
  uint64_t v22 = a3;
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = &a1[v11];
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  LODWORD(a3) = v14(&a1[v11], 1, v9);
  int v15 = v14(v13, 1, v9);
  if (!a3)
  {
    if (!v15)
    {
      v21(v12, v13, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v16 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v13, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
LABEL_7:
  uint64_t v17 = *(int *)(v22 + 32);
  uint64_t v18 = &a1[v17];
  uint64_t v19 = (void *)((char *)a2 + v17);
  *(void *)uint64_t v18 = *v19;
  *((void *)v18 + 1) = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1002FC964(_OWORD *a1, char *a2, int *a3)
{
  long long v6 = *((_OWORD *)a2 + 1);
  *a1 = *(_OWORD *)a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = &a2[v7];
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v12(v8, v9, v10);
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v13;
  int v15 = &a2[v13];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(&a2[v13], 1, v10))
  {
    uint64_t v16 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v12(v14, v15, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
  }
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)&a2[a3[8]];
  return a1;
}

char *sub_1002FCAC0(char *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  *((void *)a1 + 2) = a2[2];
  *((void *)a1 + 3) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  unint64_t v25 = *(void (**)(char *, char *, uint64_t))(v12 + 40);
  v25(v9, v10, v11);
  uint64_t v26 = a3;
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = &a1[v13];
  int v15 = (char *)a2 + v13;
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  LODWORD(a3) = v16(&a1[v13], 1, v11);
  int v17 = v16(v15, 1, v11);
  if (!a3)
  {
    if (!v17)
    {
      v25(v14, v15, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v15, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
LABEL_7:
  uint64_t v19 = *(int *)(v26 + 32);
  uint64_t v20 = &a1[v19];
  uint64_t v21 = (void *)((char *)a2 + v19);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  *(void *)uint64_t v20 = v23;
  *((void *)v20 + 1) = v22;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1002FCCC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002FCCD4);
}

uint64_t sub_1002FCCD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1000172F8(&qword_10065C3C0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_1002FCE04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002FCE18);
}

uint64_t sub_1002FCE18(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1000172F8(&qword_10065C3C0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 28);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for AvailableRestore()
{
  uint64_t result = qword_1006603E0;
  if (!qword_1006603E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1002FCF94()
{
  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    sub_10026B458();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unint64_t sub_1002FD068()
{
  unint64_t result = qword_100660430;
  if (!qword_100660430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660430);
  }
  return result;
}

unint64_t sub_1002FD0BC()
{
  unint64_t result = qword_100660448;
  if (!qword_100660448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660448);
  }
  return result;
}

uint64_t sub_1002FD110(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1936748641 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D726F6674616C70 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F6973726556736FLL && a2 == 0xE90000000000006ELL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1002FD264(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x657449656C707061 && a2 == 0xEB0000000064496DLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726556656C707061 && a2 == 0xEE0064496E6F6973)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t sub_1002FD394(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100638EF8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

uint64_t sub_1002FD3E0(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_100660540);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_10018AC60(a1, v7);
  sub_1002FE780();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v9[15] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[14] = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  }
  sub_100014524((uint64_t)a1);
  return v7;
}

unint64_t sub_1002FD588(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100638FE0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_1002FD5D4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_1000172F8(&qword_1006604A0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_1002FDDFC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100014524((uint64_t)a1);
  }
  LOBYTE(v23) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v22 = v9;
  LOBYTE(v23) = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v20 = v12;
  char v26 = 2;
  sub_1002FDE50();
  swift_bridgeObjectRetain();
  uint64_t v21 = v14;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v15 = v23;
  uint64_t v16 = v24;
  uint64_t v17 = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_100014524((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v18 = v21;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v22;
  a2[1] = v11;
  a2[2] = v20;
  a2[3] = v18;
  a2[4] = v15;
  a2[5] = v16;
  a2[6] = v17;
  return result;
}

uint64_t sub_1002FD89C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7365726F74736572 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736572756C696166 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1002FD990(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_100660450);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[3];
  sub_10018AC60(a1, v7);
  sub_1002FDBF0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100014524((uint64_t)a1);
  }
  else
  {
    sub_1000172F8(&qword_100660460);
    HIBYTE(v9) = 0;
    sub_1002FDC44();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = v10;
    sub_1000172F8(&qword_100660478);
    HIBYTE(v9) = 1;
    sub_1002FDCE8(&qword_100660480, &qword_100660478, (void (*)(void))sub_1002FDD54);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    sub_100014524((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_1002FDBF0()
{
  unint64_t result = qword_100660458;
  if (!qword_100660458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660458);
  }
  return result;
}

unint64_t sub_1002FDC44()
{
  unint64_t result = qword_100660468;
  if (!qword_100660468)
  {
    sub_10017B924(&qword_100660460);
    sub_1002FDFC0(&qword_100660470, (void (*)(uint64_t))type metadata accessor for AvailableRestore);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660468);
  }
  return result;
}

uint64_t sub_1002FDCE8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10017B924(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1002FDD54()
{
  unint64_t result = qword_100660488;
  if (!qword_100660488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660488);
  }
  return result;
}

unint64_t sub_1002FDDA8()
{
  unint64_t result = qword_100660498;
  if (!qword_100660498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660498);
  }
  return result;
}

unint64_t sub_1002FDDFC()
{
  unint64_t result = qword_1006604A8;
  if (!qword_1006604A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006604A8);
  }
  return result;
}

unint64_t sub_1002FDE50()
{
  unint64_t result = qword_1006604B0;
  if (!qword_1006604B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006604B0);
  }
  return result;
}

unint64_t sub_1002FDEA4()
{
  unint64_t result = qword_1006604C0;
  if (!qword_1006604C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006604C0);
  }
  return result;
}

uint64_t sub_1002FDEF8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002FDF60(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1002FDFC0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AvailableRestore.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002FE0D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AvailableRestore.CodingKeys()
{
  return &type metadata for AvailableRestore.CodingKeys;
}

ValueMetadata *type metadata accessor for RestoreError()
{
  return &type metadata for RestoreError;
}

ValueMetadata *type metadata accessor for FailedRestore.CodingKeys()
{
  return &type metadata for FailedRestore.CodingKeys;
}

ValueMetadata *type metadata accessor for RestoreAppHTTPRequest.CodingKeys()
{
  return &type metadata for RestoreAppHTTPRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for RestoresResponse.CodingKeys()
{
  return &type metadata for RestoresResponse.CodingKeys;
}

unsigned char *_s28ManagedAppDistributionDaemon13FailedRestoreV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002FE220);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RestoreHTTPRequest.CodingKeys()
{
  return &type metadata for RestoreHTTPRequest.CodingKeys;
}

unint64_t sub_1002FE25C()
{
  unint64_t result = qword_1006604C8;
  if (!qword_1006604C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006604C8);
  }
  return result;
}

unint64_t sub_1002FE2B4()
{
  unint64_t result = qword_1006604D0;
  if (!qword_1006604D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006604D0);
  }
  return result;
}

unint64_t sub_1002FE30C()
{
  unint64_t result = qword_1006604D8;
  if (!qword_1006604D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006604D8);
  }
  return result;
}

unint64_t sub_1002FE364()
{
  unint64_t result = qword_1006604E0;
  if (!qword_1006604E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006604E0);
  }
  return result;
}

unint64_t sub_1002FE3BC()
{
  unint64_t result = qword_1006604E8;
  if (!qword_1006604E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006604E8);
  }
  return result;
}

unint64_t sub_1002FE414()
{
  unint64_t result = qword_1006604F0;
  if (!qword_1006604F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006604F0);
  }
  return result;
}

unint64_t sub_1002FE46C()
{
  unint64_t result = qword_1006604F8;
  if (!qword_1006604F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006604F8);
  }
  return result;
}

unint64_t sub_1002FE4C4()
{
  unint64_t result = qword_100660500;
  if (!qword_100660500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660500);
  }
  return result;
}

unint64_t sub_1002FE51C()
{
  unint64_t result = qword_100660508;
  if (!qword_100660508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660508);
  }
  return result;
}

unint64_t sub_1002FE574()
{
  unint64_t result = qword_100660510;
  if (!qword_100660510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660510);
  }
  return result;
}

unint64_t sub_1002FE5CC()
{
  unint64_t result = qword_100660518;
  if (!qword_100660518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660518);
  }
  return result;
}

unint64_t sub_1002FE624()
{
  unint64_t result = qword_100660520;
  if (!qword_100660520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660520);
  }
  return result;
}

unint64_t sub_1002FE67C()
{
  unint64_t result = qword_100660528;
  if (!qword_100660528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660528);
  }
  return result;
}

unint64_t sub_1002FE6D4()
{
  unint64_t result = qword_100660530;
  if (!qword_100660530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660530);
  }
  return result;
}

unint64_t sub_1002FE72C()
{
  unint64_t result = qword_100660538;
  if (!qword_100660538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660538);
  }
  return result;
}

unint64_t sub_1002FE780()
{
  unint64_t result = qword_100660548;
  if (!qword_100660548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660548);
  }
  return result;
}

unsigned char *_s28ManagedAppDistributionDaemon21RestoreAppHTTPRequestV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002FE8A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RestoreError.CodingKeys()
{
  return &type metadata for RestoreError.CodingKeys;
}

unint64_t sub_1002FE8DC()
{
  unint64_t result = qword_100660550;
  if (!qword_100660550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660550);
  }
  return result;
}

unint64_t sub_1002FE934()
{
  unint64_t result = qword_100660558;
  if (!qword_100660558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660558);
  }
  return result;
}

unint64_t sub_1002FE98C()
{
  unint64_t result = qword_100660560;
  if (!qword_100660560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660560);
  }
  return result;
}

uint64_t sub_1002FE9E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v6 = type metadata accessor for Logger();
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  v4[2] = a4;
  v4[12] = type metadata accessor for SQLiteConnection();
  v4[13] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1002FEB08, v8, v7);
}

uint64_t sub_1002FEB08()
{
  sub_1003143E4();
  *(void *)(v0 + 112) = 0;
  return _swift_task_switch(sub_1002FEB94, 0, 0);
}

uint64_t sub_1002FEB94()
{
  uint64_t v1 = *(void *)(v0 + 64);
  *(void *)(v0 + 120) = *(void *)(v0 + 112);
  *(void *)(v0 + 128) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 136) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 48);
  *(void *)(v2 + 32) = v0 + 16;
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1002FEF20, v4, v3);
}

uint64_t sub_1002FEC3C()
{
  uint64_t v19 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = *(void *)(v0 + 80);
    uint64_t v16 = *(void *)(v0 + 72);
    uint64_t v17 = *(void *)(v0 + 88);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0xD000000000000016, 0x80000001005BDCA0, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v6 = *(void *)(v0 + 88);
    uint64_t v8 = *(void *)(v0 + 72);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 64);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 120) = 0;
  *(void *)(v0 + 128) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 136) = v10;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 + 48);
  *(void *)(v10 + 32) = v0 + 16;
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1002FEF20, v12, v11);
}

uint64_t sub_1002FEF20()
{
  uint64_t v1 = *(void *)(v0 + 120);
  sub_10031B978((uint64_t)sub_1003338FC, *(void *)(v0 + 136), *(void **)(v0 + 40));
  *(void *)(v0 + 144) = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_1002FF008, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
}

uint64_t sub_1002FF008()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002FF06C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[2] = a3;
  v3[11] = type metadata accessor for SQLiteConnection();
  v3[12] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1002FF194, v7, v6);
}

uint64_t sub_1002FF194()
{
  sub_100314FE0();
  *(void *)(v0 + 104) = 0;
  return _swift_task_switch(sub_1002FF220, 0, 0);
}

uint64_t sub_1002FF220()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 112) = *(void *)(v0 + 104);
  *(void *)(v0 + 120) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 32) = v0 + 16;
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1002FF5A0, v4, v3);
}

uint64_t sub_1002FF2C8()
{
  uint64_t v19 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v16 = *(void *)(v0 + 64);
    uint64_t v17 = *(void *)(v0 + 80);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(5063748, 0xE300000000000000, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 56);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 128) = v10;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 32) = v0 + 16;
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1002FF5A0, v12, v11);
}

uint64_t sub_1002FF5A0()
{
  uint64_t v1 = v0[14];
  os_log_type_t v2 = sub_10031BE6C((uint64_t)sub_100333214, v0[16]);
  v0[17] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_1003342C4, 0, 0);
  }
  else
  {
    uint64_t v4 = v2;
    uint64_t v5 = v3;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void *, uint64_t))v0[1];
    return v6(v4, v5);
  }
}

uint64_t sub_1002FF694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[2] = a3;
  v3[11] = type metadata accessor for SQLiteConnection();
  v3[12] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1002FF7BC, v7, v6);
}

uint64_t sub_1002FF7BC()
{
  sub_100314FE0();
  *(void *)(v0 + 104) = 0;
  return _swift_task_switch(sub_1002FF848, 0, 0);
}

uint64_t sub_1002FF848()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 112) = *(void *)(v0 + 104);
  *(void *)(v0 + 120) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 32) = v0 + 16;
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1002FFBC8, v4, v3);
}

uint64_t sub_1002FF8F0()
{
  uint64_t v19 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v16 = *(void *)(v0 + 64);
    uint64_t v17 = *(void *)(v0 + 80);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(5063748, 0xE300000000000000, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 56);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 128) = v10;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 32) = v0 + 16;
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1002FFBC8, v12, v11);
}

uint64_t sub_1002FFBC8()
{
  uint64_t v1 = v0[14];
  os_log_type_t v2 = sub_10031C0E8((uint64_t)sub_100334260, v0[16]);
  v0[17] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_1003342C4, 0, 0);
  }
  else
  {
    uint64_t v3 = v2;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void *))v0[1];
    return v4(v3);
  }
}

uint64_t sub_1002FFCB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[2] = a3;
  v3[11] = type metadata accessor for SQLiteConnection();
  v3[12] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1002FFDDC, v7, v6);
}

uint64_t sub_1002FFDDC()
{
  sub_100316754();
  *(void *)(v0 + 104) = 0;
  return _swift_task_switch(sub_1002FFE68, 0, 0);
}

uint64_t sub_1002FFE68()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 112) = *(void *)(v0 + 104);
  *(void *)(v0 + 120) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 32) = v0 + 16;
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003001F4, v4, v3);
}

uint64_t sub_1002FFF10()
{
  uint64_t v19 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v16 = *(void *)(v0 + 64);
    uint64_t v17 = *(void *)(v0 + 80);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0x74616470554D4444, 0xE900000000000065, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 56);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 128) = v10;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 32) = v0 + 16;
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003001F4, v12, v11);
}

uint64_t sub_1003001F4()
{
  uint64_t v1 = v0[14];
  char v2 = sub_10031C5D8((uint64_t)sub_100334230, v0[16]);
  v0[17] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_1003342CC, 0, 0);
  }
  else
  {
    char v3 = v2;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4(v3 & 1);
  }
}

uint64_t sub_1003002E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[2] = a3;
  v3[11] = type metadata accessor for SQLiteConnection();
  v3[12] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100300408, v7, v6);
}

uint64_t sub_100300408()
{
  sub_10031735C();
  *(void *)(v0 + 104) = 0;
  return _swift_task_switch(sub_100300494, 0, 0);
}

uint64_t sub_100300494()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 112) = *(void *)(v0 + 104);
  *(void *)(v0 + 120) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 32) = v0 + 16;
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100300820, v4, v3);
}

uint64_t sub_10030053C()
{
  uint64_t v19 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v16 = *(void *)(v0 + 64);
    uint64_t v17 = *(void *)(v0 + 80);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0x6174736E49707041, 0xEA00000000006C6CLL, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 56);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 128) = v10;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 32) = v0 + 16;
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100300820, v12, v11);
}

uint64_t sub_100300820()
{
  uint64_t v1 = v0[14];
  os_log_type_t v2 = sub_10031C83C((uint64_t)sub_100334260, v0[16]);
  v0[17] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_1003342C4, 0, 0);
  }
  else
  {
    uint64_t v3 = v2;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void *))v0[1];
    return v4(v3);
  }
}

uint64_t sub_10030090C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v6 = type metadata accessor for Logger();
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  v4[2] = a4;
  v4[12] = type metadata accessor for SQLiteConnection();
  v4[13] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100300A34, v8, v7);
}

uint64_t sub_100300A34()
{
  sub_10031735C();
  *(void *)(v0 + 112) = 0;
  return _swift_task_switch(sub_100300AC0, 0, 0);
}

uint64_t sub_100300AC0()
{
  uint64_t v1 = *(void *)(v0 + 64);
  *(void *)(v0 + 120) = *(void *)(v0 + 112);
  *(void *)(v0 + 128) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 136) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 48);
  *(void *)(v2 + 32) = v0 + 16;
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100300E4C, v4, v3);
}

uint64_t sub_100300B68()
{
  uint64_t v19 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = *(void *)(v0 + 80);
    uint64_t v16 = *(void *)(v0 + 72);
    uint64_t v17 = *(void *)(v0 + 88);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0x6174736E49707041, 0xEA00000000006C6CLL, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v6 = *(void *)(v0 + 88);
    uint64_t v8 = *(void *)(v0 + 72);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 64);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 120) = 0;
  *(void *)(v0 + 128) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 136) = v10;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 + 48);
  *(void *)(v10 + 32) = v0 + 16;
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100300E4C, v12, v11);
}

uint64_t sub_100300E4C()
{
  uint64_t v1 = v0[15];
  sub_10031CD24((uint64_t)sub_100333B74, v0[17], v0[5]);
  v0[18] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_1003342C8, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
}

uint64_t sub_100300F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[2] = a3;
  v3[11] = type metadata accessor for SQLiteConnection();
  v3[12] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030105C, v7, v6);
}

uint64_t sub_10030105C()
{
  sub_10031735C();
  *(void *)(v0 + 104) = 0;
  return _swift_task_switch(sub_1002FFE68, 0, 0);
}

uint64_t sub_1003010E8()
{
  uint64_t v19 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v16 = *(void *)(v0 + 64);
    uint64_t v17 = *(void *)(v0 + 80);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0x6174736E49707041, 0xEA00000000006C6CLL, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 56);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 128) = v10;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 32) = v0 + 16;
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003001F4, v12, v11);
}

uint64_t sub_1003013CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[2] = a3;
  v3[11] = type metadata accessor for SQLiteConnection();
  v3[12] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003014F4, v7, v6);
}

uint64_t sub_1003014F4()
{
  sub_100317F64();
  *(void *)(v0 + 104) = 0;
  return _swift_task_switch(sub_100301580, 0, 0);
}

uint64_t sub_100301580()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 112) = *(void *)(v0 + 104);
  *(void *)(v0 + 120) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 32) = v0 + 16;
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030190C, v4, v3);
}

uint64_t sub_100301628()
{
  uint64_t v19 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v16 = *(void *)(v0 + 64);
    uint64_t v17 = *(void *)(v0 + 80);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0xD000000000000011, 0x80000001005BDC80, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 56);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 128) = v10;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 32) = v0 + 16;
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030190C, v12, v11);
}

uint64_t sub_10030190C()
{
  uint64_t v1 = v0[14];
  char v2 = sub_10031C5D8((uint64_t)sub_10033348C, v0[16]);
  v0[17] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_1003019F8, 0, 0);
  }
  else
  {
    char v3 = v2;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4(v3 & 1);
  }
}

uint64_t sub_1003019F8()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_100301A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[2] = a3;
  v3[11] = type metadata accessor for SQLiteConnection();
  v3[12] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100301B88, v7, v6);
}

uint64_t sub_100301B88()
{
  sub_100316754();
  *(void *)(v0 + 104) = 0;
  return _swift_task_switch(sub_100301C14, 0, 0);
}

uint64_t sub_100301C14()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 112) = *(void *)(v0 + 104);
  *(void *)(v0 + 120) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 32) = v0 + 16;
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100301FA0, v4, v3);
}

uint64_t sub_100301CBC()
{
  uint64_t v19 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v16 = *(void *)(v0 + 64);
    uint64_t v17 = *(void *)(v0 + 80);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0x74616470554D4444, 0xE900000000000065, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 56);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 128) = v10;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 32) = v0 + 16;
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100301FA0, v12, v11);
}

uint64_t sub_100301FA0()
{
  uint64_t v1 = v0[14];
  os_log_type_t v2 = sub_10031D2BC((uint64_t)sub_100333534, v0[16]);
  v0[17] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_100302094, 0, 0);
  }
  else
  {
    uint64_t v4 = v2;
    uint64_t v5 = v3 & 1;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void *, uint64_t))v0[1];
    return v6(v4, v5);
  }
}

uint64_t sub_100302094()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1003020F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[2] = a3;
  v3[11] = type metadata accessor for SQLiteConnection();
  v3[12] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100302220, v7, v6);
}

uint64_t sub_100302220()
{
  sub_100316754();
  *(void *)(v0 + 104) = 0;
  return _swift_task_switch(sub_1003022AC, 0, 0);
}

uint64_t sub_1003022AC()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 112) = *(void *)(v0 + 104);
  *(void *)(v0 + 120) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 32) = v0 + 16;
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100302638, v4, v3);
}

uint64_t sub_100302354()
{
  uint64_t v19 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v16 = *(void *)(v0 + 64);
    uint64_t v17 = *(void *)(v0 + 80);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0x74616470554D4444, 0xE900000000000065, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 56);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 128) = v10;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 32) = v0 + 16;
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100302638, v12, v11);
}

uint64_t sub_100302638()
{
  uint64_t v1 = v0[14];
  os_log_type_t v2 = sub_10031D528((uint64_t)sub_100334278, v0[16]);
  v0[17] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_1003342C4, 0, 0);
  }
  else
  {
    uint64_t v4 = v2;
    uint64_t v5 = v3;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void *, uint64_t))v0[1];
    return v6(v4, v5);
  }
}

uint64_t sub_10030272C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[2] = a3;
  v3[11] = type metadata accessor for SQLiteConnection();
  v3[12] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100302854, v7, v6);
}

uint64_t sub_100302854()
{
  sub_10031735C();
  *(void *)(v0 + 104) = 0;
  return _swift_task_switch(sub_1003028E0, 0, 0);
}

uint64_t sub_1003028E0()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 112) = *(void *)(v0 + 104);
  *(void *)(v0 + 120) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 32) = v0 + 16;
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100302C6C, v4, v3);
}

uint64_t sub_100302988()
{
  uint64_t v19 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v16 = *(void *)(v0 + 64);
    uint64_t v17 = *(void *)(v0 + 80);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0x6174736E49707041, 0xEA00000000006C6CLL, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 56);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 128) = v10;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 32) = v0 + 16;
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100302C6C, v12, v11);
}

uint64_t sub_100302C6C()
{
  uint64_t v1 = v0[14];
  os_log_type_t v2 = sub_10031D7A4((uint64_t)sub_100334290, v0[16]);
  v0[17] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_1003342C4, 0, 0);
  }
  else
  {
    uint64_t v4 = v2;
    uint64_t v5 = v3 & 1;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void *, uint64_t))v0[1];
    return v6(v4, v5);
  }
}

uint64_t sub_100302D60(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  type metadata accessor for DDMDeclarationStatusDatabaseConfig(0);
  v3[10] = swift_task_alloc();
  return _swift_task_switch(sub_100302E50, 0, 0);
}

uint64_t sub_100302E50()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = (void *)v0[6];
  v0[11] = *v2;
  uint64_t v3 = sub_1000172F8(&qword_10065CF60);
  sub_100333790((uint64_t)v2 + *(int *)(v3 + 36), v1, type metadata accessor for DDMDeclarationStatusDatabaseConfig);
  v0[12] = type metadata accessor for SQLiteConnection();
  v0[13] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100302F54, v5, v4);
}

uint64_t sub_100302F54()
{
  sub_100315B60(*(void *)(v0 + 80));
  *(void *)(v0 + 112) = 0;
  sub_1003337F8(*(void *)(v0 + 80), type metadata accessor for DDMDeclarationStatusDatabaseConfig);
  return _swift_task_switch(sub_100302FFC, 0, 0);
}

uint64_t sub_100302FFC()
{
  *(void *)(v0 + 120) = *(void *)(v0 + 112);
  uint64_t v1 = *(void **)(v0 + 48);
  *(void *)(v0 + 128) = *v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 136) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 32);
  *(void *)(v2 + 32) = v1;
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100303384, v4, v3);
}

uint64_t sub_1003030A8()
{
  uint64_t v18 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v14 = *(void *)(v0 + 64);
    uint64_t v15 = *(void *)(v0 + 56);
    uint64_t v16 = *(void *)(v0 + 72);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 16) = sub_1000143F4(0xD000000000000014, 0x80000001005BDC00, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v15);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 64);
    uint64_t v6 = *(void *)(v0 + 72);
    uint64_t v8 = *(void *)(v0 + 56);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  *(void *)(v0 + 120) = 0;
  uint64_t v9 = *(void **)(v0 + 48);
  *(void *)(v0 + 128) = *v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 136) = v10;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 + 32);
  *(void *)(v10 + 32) = v9;
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100303384, v12, v11);
}

uint64_t sub_100303384()
{
  uint64_t v1 = v0[15];
  uint64_t v3 = sub_10031DA10((uint64_t)sub_100333C54, v0[17]);
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    uint64_t v6 = v2;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void *, uint64_t))v0[1];
    return v7(v3, v6);
  }
}

uint64_t sub_100303490(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  type metadata accessor for DDMDeclarationStatusDatabaseConfig(0);
  v3[10] = swift_task_alloc();
  return _swift_task_switch(sub_100303580, 0, 0);
}

uint64_t sub_100303580()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = (void *)v0[6];
  v0[11] = *v2;
  uint64_t v3 = sub_1000172F8(&qword_10065CF60);
  sub_100333790((uint64_t)v2 + *(int *)(v3 + 36), v1, type metadata accessor for DDMDeclarationStatusDatabaseConfig);
  v0[12] = type metadata accessor for SQLiteConnection();
  v0[13] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100303684, v5, v4);
}

uint64_t sub_100303684()
{
  sub_100315B60(*(void *)(v0 + 80));
  *(void *)(v0 + 112) = 0;
  sub_1003337F8(*(void *)(v0 + 80), type metadata accessor for DDMDeclarationStatusDatabaseConfig);
  return _swift_task_switch(sub_10030372C, 0, 0);
}

uint64_t sub_10030372C()
{
  *(void *)(v0 + 120) = *(void *)(v0 + 112);
  uint64_t v1 = *(void **)(v0 + 48);
  *(void *)(v0 + 128) = *v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 136) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 32);
  *(void *)(v2 + 32) = v1;
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100303AB4, v4, v3);
}

uint64_t sub_1003037D8()
{
  uint64_t v18 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v14 = *(void *)(v0 + 64);
    uint64_t v15 = *(void *)(v0 + 56);
    uint64_t v16 = *(void *)(v0 + 72);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 16) = sub_1000143F4(0xD000000000000014, 0x80000001005BDC00, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v15);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 64);
    uint64_t v6 = *(void *)(v0 + 72);
    uint64_t v8 = *(void *)(v0 + 56);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  *(void *)(v0 + 120) = 0;
  uint64_t v9 = *(void **)(v0 + 48);
  *(void *)(v0 + 128) = *v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 136) = v10;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 + 32);
  *(void *)(v10 + 32) = v9;
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100303AB4, v12, v11);
}

uint64_t sub_100303AB4()
{
  uint64_t v1 = v0[15];
  os_log_type_t v2 = sub_10031DC8C((uint64_t)sub_1003333E8, v0[17]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
  if (!v1) {
    uint64_t v3 = (uint64_t)v2;
  }
  return v4(v3);
}

uint64_t sub_100303B70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[2] = a3;
  v3[11] = type metadata accessor for SQLiteConnection();
  v3[12] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100303C98, v7, v6);
}

uint64_t sub_100303C98()
{
  sub_10031735C();
  *(void *)(v0 + 104) = 0;
  return _swift_task_switch(sub_100303D24, 0, 0);
}

uint64_t sub_100303D24()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 112) = *(void *)(v0 + 104);
  *(void *)(v0 + 120) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 32) = v0 + 16;
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003040B0, v4, v3);
}

uint64_t sub_100303DCC()
{
  uint64_t v19 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v16 = *(void *)(v0 + 64);
    uint64_t v17 = *(void *)(v0 + 80);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0x6174736E49707041, 0xEA00000000006C6CLL, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 56);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 128) = v10;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 32) = v0 + 16;
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003040B0, v12, v11);
}

uint64_t sub_1003040B0()
{
  uint64_t v1 = v0[14];
  os_log_type_t v2 = sub_10031DF00((uint64_t)sub_1003333E8, v0[16]);
  v0[17] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_1003342C4, 0, 0);
  }
  else
  {
    uint64_t v3 = v2;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void *))v0[1];
    return v4(v3);
  }
}

uint64_t sub_10030419C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  type metadata accessor for LicenseStorageDatabaseConfig(0);
  v4[11] = swift_task_alloc();
  return _swift_task_switch(sub_10030428C, 0, 0);
}

uint64_t sub_10030428C()
{
  uint64_t v1 = v0[11];
  os_log_type_t v2 = (void *)v0[7];
  v0[12] = *v2;
  uint64_t v3 = sub_1000172F8(&qword_10065E410);
  sub_100333790((uint64_t)v2 + *(int *)(v3 + 36), v1, type metadata accessor for LicenseStorageDatabaseConfig);
  v0[13] = type metadata accessor for SQLiteConnection();
  v0[14] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100304390, v5, v4);
}

uint64_t sub_100304390()
{
  sub_100318B60(*(void *)(v0 + 88));
  *(void *)(v0 + 120) = 0;
  sub_1003337F8(*(void *)(v0 + 88), type metadata accessor for LicenseStorageDatabaseConfig);
  return _swift_task_switch(sub_100304438, 0, 0);
}

uint64_t sub_100304438()
{
  *(void *)(v0 + 128) = *(void *)(v0 + 120);
  uint64_t v1 = *(void **)(v0 + 56);
  *(void *)(v0 + 136) = *v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 144) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 32) = v1;
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003047C8, v4, v3);
}

uint64_t sub_1003044E4()
{
  uint64_t v18 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v14 = *(void *)(v0 + 72);
    uint64_t v15 = *(void *)(v0 + 64);
    uint64_t v16 = *(void *)(v0 + 80);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 16) = sub_1000143F4(0x5365736E6563694CLL, 0xEE00656761726F74, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v15);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  *(void *)(v0 + 128) = 0;
  uint64_t v9 = *(void **)(v0 + 56);
  *(void *)(v0 + 136) = *v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 144) = v10;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 32) = v9;
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003047C8, v12, v11);
}

uint64_t sub_1003047C8()
{
  sub_10031E174((uint64_t)sub_100333C74, *(void *)(v0 + 144), *(void **)(v0 + 32));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100304878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[2] = a3;
  v3[11] = type metadata accessor for SQLiteConnection();
  v3[12] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003049A0, v7, v6);
}

uint64_t sub_1003049A0()
{
  sub_1003197D0();
  *(void *)(v0 + 104) = 0;
  return _swift_task_switch(sub_100304A2C, 0, 0);
}

uint64_t sub_100304A2C()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 112) = *(void *)(v0 + 104);
  *(void *)(v0 + 120) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 32) = v0 + 16;
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100304DC0, v4, v3);
}

uint64_t sub_100304AD4()
{
  uint64_t v19 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v16 = *(void *)(v0 + 64);
    uint64_t v17 = *(void *)(v0 + 80);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0x7453657275636553, 0xED0000656761726FLL, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 56);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 128) = v10;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 32) = v0 + 16;
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100304DC0, v12, v11);
}

uint64_t sub_100304DC0()
{
  uint64_t v1 = v0[14];
  os_log_type_t v2 = sub_10031D528((uint64_t)sub_100333C54, v0[16]);
  v0[17] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_100302094, 0, 0);
  }
  else
  {
    uint64_t v4 = v2;
    uint64_t v5 = v3;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void *, uint64_t))v0[1];
    return v6(v4, v5);
  }
}

uint64_t sub_100304EB4(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  type metadata accessor for LicenseStorageDatabaseConfig(0);
  v3[10] = swift_task_alloc();
  return _swift_task_switch(sub_100304FA4, 0, 0);
}

uint64_t sub_100304FA4()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = (void *)v0[6];
  v0[11] = *v2;
  uint64_t v3 = sub_1000172F8(&qword_10065E410);
  sub_100333790((uint64_t)v2 + *(int *)(v3 + 36), v1, type metadata accessor for LicenseStorageDatabaseConfig);
  v0[12] = type metadata accessor for SQLiteConnection();
  v0[13] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003050A8, v5, v4);
}

uint64_t sub_1003050A8()
{
  sub_100318B60(*(void *)(v0 + 80));
  *(void *)(v0 + 112) = 0;
  sub_1003337F8(*(void *)(v0 + 80), type metadata accessor for LicenseStorageDatabaseConfig);
  return _swift_task_switch(sub_100305150, 0, 0);
}

uint64_t sub_100305150()
{
  *(void *)(v0 + 120) = *(void *)(v0 + 112);
  uint64_t v1 = *(void **)(v0 + 48);
  *(void *)(v0 + 128) = *v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 136) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 32);
  *(void *)(v2 + 32) = v1;
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003054E0, v4, v3);
}

uint64_t sub_1003051FC()
{
  uint64_t v18 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v14 = *(void *)(v0 + 64);
    uint64_t v15 = *(void *)(v0 + 56);
    uint64_t v16 = *(void *)(v0 + 72);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 16) = sub_1000143F4(0x5365736E6563694CLL, 0xEE00656761726F74, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v15);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 64);
    uint64_t v6 = *(void *)(v0 + 72);
    uint64_t v8 = *(void *)(v0 + 56);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  *(void *)(v0 + 120) = 0;
  uint64_t v9 = *(void **)(v0 + 48);
  *(void *)(v0 + 128) = *v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 136) = v10;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 + 32);
  *(void *)(v10 + 32) = v9;
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003054E0, v12, v11);
}

uint64_t sub_1003054E0()
{
  uint64_t v1 = v0[15];
  uint64_t v3 = sub_10031E3F0((uint64_t)sub_100333AFC, v0[17]);
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    uint64_t v6 = v2 & 1;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void *, uint64_t))v0[1];
    return v7(v3, v6);
  }
}

uint64_t sub_1003055EC(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  type metadata accessor for LicenseStorageDatabaseConfig(0);
  v3[10] = swift_task_alloc();
  return _swift_task_switch(sub_1003056DC, 0, 0);
}

uint64_t sub_1003056DC()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = (void *)v0[6];
  v0[11] = *v2;
  uint64_t v3 = sub_1000172F8(&qword_10065E410);
  sub_100333790((uint64_t)v2 + *(int *)(v3 + 36), v1, type metadata accessor for LicenseStorageDatabaseConfig);
  v0[12] = type metadata accessor for SQLiteConnection();
  v0[13] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003057E0, v5, v4);
}

uint64_t sub_1003057E0()
{
  sub_100318B60(*(void *)(v0 + 80));
  *(void *)(v0 + 112) = 0;
  sub_1003337F8(*(void *)(v0 + 80), type metadata accessor for LicenseStorageDatabaseConfig);
  return _swift_task_switch(sub_100305888, 0, 0);
}

uint64_t sub_100305888()
{
  *(void *)(v0 + 120) = *(void *)(v0 + 112);
  uint64_t v1 = *(void **)(v0 + 48);
  *(void *)(v0 + 128) = *v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 136) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 32);
  *(void *)(v2 + 32) = v1;
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100305C18, v4, v3);
}

uint64_t sub_100305934()
{
  uint64_t v18 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v14 = *(void *)(v0 + 64);
    uint64_t v15 = *(void *)(v0 + 56);
    uint64_t v16 = *(void *)(v0 + 72);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 16) = sub_1000143F4(0x5365736E6563694CLL, 0xEE00656761726F74, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v15);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 64);
    uint64_t v6 = *(void *)(v0 + 72);
    uint64_t v8 = *(void *)(v0 + 56);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  *(void *)(v0 + 120) = 0;
  uint64_t v9 = *(void **)(v0 + 48);
  *(void *)(v0 + 128) = *v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 136) = v10;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 + 32);
  *(void *)(v10 + 32) = v9;
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100305C18, v12, v11);
}

uint64_t sub_100305C18()
{
  uint64_t v1 = v0[15];
  uint64_t v3 = sub_10031D528((uint64_t)sub_100333ADC, v0[17]);
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    uint64_t v6 = v2;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void *, uint64_t))v0[1];
    return v7(v3, v6);
  }
}

uint64_t sub_100305D24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[2] = a3;
  v3[11] = type metadata accessor for SQLiteConnection();
  v3[12] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100305E4C, v7, v6);
}

uint64_t sub_100305E4C()
{
  sub_10031A430();
  *(void *)(v0 + 104) = 0;
  return _swift_task_switch(sub_100305ED8, 0, 0);
}

uint64_t sub_100305ED8()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 112) = *(void *)(v0 + 104);
  *(void *)(v0 + 120) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 32) = v0 + 16;
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100306264, v4, v3);
}

uint64_t sub_100305F80()
{
  uint64_t v19 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v16 = *(void *)(v0 + 64);
    uint64_t v17 = *(void *)(v0 + 80);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0xD000000000000015, 0x80000001005BDC60, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 56);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 128) = v10;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 32) = v0 + 16;
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100306264, v12, v11);
}

uint64_t sub_100306264()
{
  uint64_t v1 = v0[14];
  os_log_type_t v2 = sub_10031E65C((uint64_t)sub_100334278, v0[16]);
  v0[17] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_1003342C4, 0, 0);
  }
  else
  {
    uint64_t v4 = v2;
    uint64_t v5 = v3;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void *, uint64_t))v0[1];
    return v6(v4, v5);
  }
}

uint64_t sub_100306358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v6 = type metadata accessor for Logger();
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  v4[2] = a4;
  v4[12] = type metadata accessor for SQLiteConnection();
  v4[13] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100306480, v8, v7);
}

uint64_t sub_100306480()
{
  sub_10031735C();
  *(void *)(v0 + 112) = 0;
  return _swift_task_switch(sub_10030650C, 0, 0);
}

uint64_t sub_10030650C()
{
  uint64_t v1 = *(void *)(v0 + 64);
  *(void *)(v0 + 120) = *(void *)(v0 + 112);
  *(void *)(v0 + 128) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 136) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 48);
  *(void *)(v2 + 32) = v0 + 16;
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100306898, v4, v3);
}

uint64_t sub_1003065B4()
{
  uint64_t v19 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = *(void *)(v0 + 80);
    uint64_t v16 = *(void *)(v0 + 72);
    uint64_t v17 = *(void *)(v0 + 88);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0x6174736E49707041, 0xEA00000000006C6CLL, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v6 = *(void *)(v0 + 88);
    uint64_t v8 = *(void *)(v0 + 72);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 64);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 120) = 0;
  *(void *)(v0 + 128) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 136) = v10;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 + 48);
  *(void *)(v10 + 32) = v0 + 16;
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100306898, v12, v11);
}

uint64_t sub_100306898()
{
  uint64_t v1 = v0[15];
  sub_10031EB38((uint64_t)sub_100333B74, v0[17], v0[5]);
  v0[18] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_1003342C8, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
}

uint64_t sub_100306980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v6 = type metadata accessor for Logger();
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  v4[2] = a4;
  v4[12] = type metadata accessor for SQLiteConnection();
  v4[13] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100306AA8, v8, v7);
}

uint64_t sub_100306AA8()
{
  sub_10031735C();
  *(void *)(v0 + 112) = 0;
  return _swift_task_switch(sub_100306B34, 0, 0);
}

uint64_t sub_100306B34()
{
  uint64_t v1 = *(void *)(v0 + 64);
  *(void *)(v0 + 120) = *(void *)(v0 + 112);
  *(void *)(v0 + 128) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 136) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 48);
  *(void *)(v2 + 32) = v0 + 16;
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100306EC0, v4, v3);
}

uint64_t sub_100306BDC()
{
  uint64_t v19 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = *(void *)(v0 + 80);
    uint64_t v16 = *(void *)(v0 + 72);
    uint64_t v17 = *(void *)(v0 + 88);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0x6174736E49707041, 0xEA00000000006C6CLL, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v6 = *(void *)(v0 + 88);
    uint64_t v8 = *(void *)(v0 + 72);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 64);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 120) = 0;
  *(void *)(v0 + 128) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 136) = v10;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 + 48);
  *(void *)(v10 + 32) = v0 + 16;
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100306EC0, v12, v11);
}

uint64_t sub_100306EC0()
{
  uint64_t v1 = v0[15];
  sub_10031EE54((uint64_t)sub_100333B74, v0[17], v0[5]);
  v0[18] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_1003342C8, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
}

uint64_t sub_100306FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v6 = type metadata accessor for Logger();
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  v4[2] = a4;
  v4[12] = type metadata accessor for SQLiteConnection();
  v4[13] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003070D0, v8, v7);
}

uint64_t sub_1003070D0()
{
  sub_10031735C();
  *(void *)(v0 + 112) = 0;
  return _swift_task_switch(sub_10030715C, 0, 0);
}

uint64_t sub_10030715C()
{
  uint64_t v1 = *(void *)(v0 + 64);
  *(void *)(v0 + 120) = *(void *)(v0 + 112);
  *(void *)(v0 + 128) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 136) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 48);
  *(void *)(v2 + 32) = v0 + 16;
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003074E8, v4, v3);
}

uint64_t sub_100307204()
{
  uint64_t v19 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = *(void *)(v0 + 80);
    uint64_t v16 = *(void *)(v0 + 72);
    uint64_t v17 = *(void *)(v0 + 88);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0x6174736E49707041, 0xEA00000000006C6CLL, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v6 = *(void *)(v0 + 88);
    uint64_t v8 = *(void *)(v0 + 72);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 64);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 120) = 0;
  *(void *)(v0 + 128) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 136) = v10;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 + 48);
  *(void *)(v10 + 32) = v0 + 16;
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003074E8, v12, v11);
}

uint64_t sub_1003074E8()
{
  uint64_t v1 = v0[15];
  sub_10031B4CC((uint64_t)sub_1003338FC, v0[17]);
  v0[18] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_1003342C8, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
}

uint64_t sub_1003075D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v6 = type metadata accessor for Logger();
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  v4[2] = a4;
  v4[12] = type metadata accessor for SQLiteConnection();
  v4[13] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003076F8, v8, v7);
}

uint64_t sub_1003076F8()
{
  sub_10031735C();
  *(void *)(v0 + 112) = 0;
  return _swift_task_switch(sub_100307784, 0, 0);
}

uint64_t sub_100307784()
{
  uint64_t v1 = *(void *)(v0 + 64);
  *(void *)(v0 + 120) = *(void *)(v0 + 112);
  *(void *)(v0 + 128) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 136) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 48);
  *(void *)(v2 + 32) = v0 + 16;
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100307B10, v4, v3);
}

uint64_t sub_10030782C()
{
  uint64_t v19 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = *(void *)(v0 + 80);
    uint64_t v16 = *(void *)(v0 + 72);
    uint64_t v17 = *(void *)(v0 + 88);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0x6174736E49707041, 0xEA00000000006C6CLL, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v6 = *(void *)(v0 + 88);
    uint64_t v8 = *(void *)(v0 + 72);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 64);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 120) = 0;
  *(void *)(v0 + 128) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 136) = v10;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 + 48);
  *(void *)(v10 + 32) = v0 + 16;
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100307B10, v12, v11);
}

uint64_t sub_100307B10()
{
  uint64_t v1 = v0[15];
  sub_10031F170((uint64_t)sub_100333B74, v0[17], v0[5]);
  v0[18] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_1003342C8, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
}

uint64_t sub_100307BF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[2] = a3;
  v3[11] = type metadata accessor for SQLiteConnection();
  v3[12] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100307D20, v7, v6);
}

uint64_t sub_100307D20()
{
  sub_10031735C();
  *(void *)(v0 + 104) = 0;
  return _swift_task_switch(sub_100307DAC, 0, 0);
}

uint64_t sub_100307DAC()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 112) = *(void *)(v0 + 104);
  *(void *)(v0 + 120) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 32) = v0 + 16;
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100308138, v4, v3);
}

uint64_t sub_100307E54()
{
  uint64_t v19 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v16 = *(void *)(v0 + 64);
    uint64_t v17 = *(void *)(v0 + 80);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0x6174736E49707041, 0xEA00000000006C6CLL, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 56);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 128) = v10;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 32) = v0 + 16;
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100308138, v12, v11);
}

uint64_t sub_100308138()
{
  uint64_t v1 = v0[14];
  os_log_type_t v2 = sub_10031F48C((uint64_t)sub_100334260, v0[16]);
  v0[17] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_1003342C4, 0, 0);
  }
  else
  {
    uint64_t v3 = v2;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void *))v0[1];
    return v4(v3);
  }
}

uint64_t sub_100308224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[2] = a3;
  v3[11] = type metadata accessor for SQLiteConnection();
  v3[12] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030834C, v7, v6);
}

uint64_t sub_10030834C()
{
  sub_10031735C();
  *(void *)(v0 + 104) = 0;
  return _swift_task_switch(sub_1003083D8, 0, 0);
}

uint64_t sub_1003083D8()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 112) = *(void *)(v0 + 104);
  *(void *)(v0 + 120) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 32) = v0 + 16;
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100308764, v4, v3);
}

uint64_t sub_100308480()
{
  uint64_t v19 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v16 = *(void *)(v0 + 64);
    uint64_t v17 = *(void *)(v0 + 80);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0x6174736E49707041, 0xEA00000000006C6CLL, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 56);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 128) = v10;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 32) = v0 + 16;
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100308764, v12, v11);
}

uint64_t sub_100308764()
{
  uint64_t v1 = v0[14];
  os_log_type_t v2 = sub_10031FBE8((uint64_t)sub_100334278, v0[16]);
  v0[17] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_1003342C4, 0, 0);
  }
  else
  {
    uint64_t v4 = v2;
    uint64_t v5 = v3;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void *, uint64_t))v0[1];
    return v6(v4, v5);
  }
}

uint64_t sub_100308858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[2] = a3;
  v3[11] = type metadata accessor for SQLiteConnection();
  v3[12] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100308980, v7, v6);
}

uint64_t sub_100308980()
{
  sub_10031735C();
  *(void *)(v0 + 104) = 0;
  return _swift_task_switch(sub_100308A0C, 0, 0);
}

uint64_t sub_100308A0C()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 112) = *(void *)(v0 + 104);
  *(void *)(v0 + 120) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 32) = v0 + 16;
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100308D98, v4, v3);
}

uint64_t sub_100308AB4()
{
  uint64_t v19 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v16 = *(void *)(v0 + 64);
    uint64_t v17 = *(void *)(v0 + 80);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0x6174736E49707041, 0xEA00000000006C6CLL, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 56);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 128) = v10;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 32) = v0 + 16;
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100308D98, v12, v11);
}

uint64_t sub_100308D98()
{
  uint64_t v1 = v0[14];
  os_log_type_t v2 = sub_10031F974((uint64_t)sub_100334260, v0[16]);
  v0[17] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_1003342C4, 0, 0);
  }
  else
  {
    uint64_t v3 = v2;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void *))v0[1];
    return v4(v3);
  }
}

uint64_t sub_100308E84(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  type metadata accessor for LicenseStorageDatabaseConfig(0);
  v3[10] = swift_task_alloc();
  return _swift_task_switch(sub_100308F74, 0, 0);
}

uint64_t sub_100308F74()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = (void *)v0[6];
  v0[11] = *v2;
  uint64_t v3 = sub_1000172F8(&qword_10065E410);
  sub_100333790((uint64_t)v2 + *(int *)(v3 + 36), v1, type metadata accessor for LicenseStorageDatabaseConfig);
  v0[12] = type metadata accessor for SQLiteConnection();
  v0[13] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100309078, v5, v4);
}

uint64_t sub_100309078()
{
  sub_100318B60(*(void *)(v0 + 80));
  *(void *)(v0 + 112) = 0;
  sub_1003337F8(*(void *)(v0 + 80), type metadata accessor for LicenseStorageDatabaseConfig);
  return _swift_task_switch(sub_100309120, 0, 0);
}

uint64_t sub_100309120()
{
  *(void *)(v0 + 120) = *(void *)(v0 + 112);
  uint64_t v1 = *(void **)(v0 + 48);
  *(void *)(v0 + 128) = *v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 136) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 32);
  *(void *)(v2 + 32) = v1;
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003094B0, v4, v3);
}

uint64_t sub_1003091CC()
{
  uint64_t v18 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v14 = *(void *)(v0 + 64);
    uint64_t v15 = *(void *)(v0 + 56);
    uint64_t v16 = *(void *)(v0 + 72);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 16) = sub_1000143F4(0x5365736E6563694CLL, 0xEE00656761726F74, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v15);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 64);
    uint64_t v6 = *(void *)(v0 + 72);
    uint64_t v8 = *(void *)(v0 + 56);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  *(void *)(v0 + 120) = 0;
  uint64_t v9 = *(void **)(v0 + 48);
  *(void *)(v0 + 128) = *v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 136) = v10;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 + 32);
  *(void *)(v10 + 32) = v9;
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003094B0, v12, v11);
}

uint64_t sub_1003094B0()
{
  uint64_t v1 = v0[15];
  os_log_type_t v2 = sub_10031FE50((uint64_t)sub_100333F10, v0[17]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
  if (!v1) {
    uint64_t v3 = (uint64_t)v2;
  }
  return v4(v3);
}

uint64_t sub_10030956C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[2] = a3;
  v3[11] = type metadata accessor for SQLiteConnection();
  v3[12] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100309694, v7, v6);
}

uint64_t sub_100309694()
{
  sub_1003197D0();
  *(void *)(v0 + 104) = 0;
  return _swift_task_switch(sub_100309720, 0, 0);
}

uint64_t sub_100309720()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 112) = *(void *)(v0 + 104);
  *(void *)(v0 + 120) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 32) = v0 + 16;
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100309AB4, v4, v3);
}

uint64_t sub_1003097C8()
{
  uint64_t v19 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v16 = *(void *)(v0 + 64);
    uint64_t v17 = *(void *)(v0 + 80);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0x7453657275636553, 0xED0000656761726FLL, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 56);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 128) = v10;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 32) = v0 + 16;
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100309AB4, v12, v11);
}

uint64_t sub_100309AB4()
{
  uint64_t v1 = v0[14];
  os_log_type_t v2 = sub_1003200C4((uint64_t)sub_1003333E8, v0[16]);
  v0[17] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_100302094, 0, 0);
  }
  else
  {
    uint64_t v3 = v2;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void *))v0[1];
    return v4(v3);
  }
}

uint64_t sub_100309BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[2] = a3;
  v3[11] = type metadata accessor for SQLiteConnection();
  v3[12] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100309CC8, v7, v6);
}

uint64_t sub_100309CC8()
{
  sub_10031735C();
  *(void *)(v0 + 104) = 0;
  return _swift_task_switch(sub_100309D54, 0, 0);
}

uint64_t sub_100309D54()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 112) = *(void *)(v0 + 104);
  *(void *)(v0 + 120) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 32) = v0 + 16;
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030A0E0, v4, v3);
}

uint64_t sub_100309DFC()
{
  uint64_t v19 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v16 = *(void *)(v0 + 64);
    uint64_t v17 = *(void *)(v0 + 80);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0x6174736E49707041, 0xEA00000000006C6CLL, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 56);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 128) = v10;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 32) = v0 + 16;
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030A0E0, v12, v11);
}

uint64_t sub_10030A0E0()
{
  uint64_t v1 = v0[14];
  os_log_type_t v2 = sub_100320338((uint64_t)sub_10033348C, v0[16]);
  v0[17] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_100302094, 0, 0);
  }
  else
  {
    uint64_t v3 = v2;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void *))v0[1];
    return v4(v3);
  }
}

uint64_t sub_10030A1CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[2] = a3;
  v3[11] = type metadata accessor for SQLiteConnection();
  v3[12] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030A2F4, v7, v6);
}

uint64_t sub_10030A2F4()
{
  sub_1003143E4();
  *(void *)(v0 + 104) = 0;
  return _swift_task_switch(sub_10030A380, 0, 0);
}

uint64_t sub_10030A380()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 112) = *(void *)(v0 + 104);
  *(void *)(v0 + 120) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  long long v3 = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 16) = v0 + 16;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030A70C, v5, v4);
}

uint64_t sub_10030A428()
{
  uint64_t v20 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v16 = *(void *)(v0 + 72);
    uint64_t v17 = *(void *)(v0 + 64);
    uint64_t v18 = *(void *)(v0 + 80);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0xD000000000000016, 0x80000001005BDCA0, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v17);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 56);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 128) = v10;
  long long v11 = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 16) = v0 + 16;
  *(_OWORD *)(v10 + 24) = v11;
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030A70C, v13, v12);
}

uint64_t sub_10030A70C()
{
  uint64_t v1 = v0[14];
  char v2 = sub_10031B718((uint64_t)sub_1003338B0, v0[16]);
  v0[17] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_1003342C4, 0, 0);
  }
  else
  {
    uint64_t v3 = v2 & 1;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
    return v4(v3);
  }
}

uint64_t sub_10030A7FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[2] = a3;
  v3[11] = type metadata accessor for SQLiteConnection();
  v3[12] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030A924, v7, v6);
}

uint64_t sub_10030A924()
{
  sub_100314FE0();
  *(void *)(v0 + 104) = 0;
  return _swift_task_switch(sub_10030A9B0, 0, 0);
}

uint64_t sub_10030A9B0()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 112) = *(void *)(v0 + 104);
  *(void *)(v0 + 120) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  long long v3 = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 16) = v0 + 16;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030AD30, v5, v4);
}

uint64_t sub_10030AA58()
{
  uint64_t v20 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v16 = *(void *)(v0 + 72);
    uint64_t v17 = *(void *)(v0 + 64);
    uint64_t v18 = *(void *)(v0 + 80);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(5063748, 0xE300000000000000, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v17);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 56);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 128) = v10;
  long long v11 = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 16) = v0 + 16;
  *(_OWORD *)(v10 + 24) = v11;
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030AD30, v13, v12);
}

uint64_t sub_10030AD30()
{
  uint64_t v1 = v0[14];
  os_log_type_t v2 = sub_10031BBF4((uint64_t)sub_100333E74, v0[16]);
  v0[17] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_100302094, 0, 0);
  }
  else
  {
    uint64_t v6 = v2;
    uint64_t v7 = v3;
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))v0[1];
    return v10(v6, v7, v8, v9);
  }
}

uint64_t sub_10030AE40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[2] = a3;
  v3[11] = type metadata accessor for SQLiteConnection();
  v3[12] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030AF68, v7, v6);
}

uint64_t sub_10030AF68()
{
  sub_100314FE0();
  *(void *)(v0 + 104) = 0;
  return _swift_task_switch(sub_10030AFF4, 0, 0);
}

uint64_t sub_10030AFF4()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 112) = *(void *)(v0 + 104);
  *(void *)(v0 + 120) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  long long v3 = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 16) = v0 + 16;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030B374, v5, v4);
}

uint64_t sub_10030B09C()
{
  uint64_t v20 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v16 = *(void *)(v0 + 72);
    uint64_t v17 = *(void *)(v0 + 64);
    uint64_t v18 = *(void *)(v0 + 80);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(5063748, 0xE300000000000000, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v17);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 56);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 128) = v10;
  long long v11 = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 16) = v0 + 16;
  *(_OWORD *)(v10 + 24) = v11;
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030B374, v13, v12);
}

uint64_t sub_10030B374()
{
  uint64_t v1 = v0[14];
  os_log_type_t v2 = sub_10031C35C((uint64_t)sub_1003342A8, v0[16]);
  v0[17] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_1003342C4, 0, 0);
  }
  else
  {
    uint64_t v4 = v2;
    uint64_t v5 = v3;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void *, uint64_t))v0[1];
    return v6(v4, v5);
  }
}

uint64_t sub_10030B468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  type metadata accessor for DDMDeclarationStatusDatabaseConfig(0);
  v4[11] = swift_task_alloc();
  return _swift_task_switch(sub_10030B558, 0, 0);
}

uint64_t sub_10030B558()
{
  uint64_t v1 = v0[11];
  os_log_type_t v2 = (void *)v0[7];
  v0[12] = *v2;
  uint64_t v3 = sub_1000172F8(&qword_10065CF60);
  sub_100333790((uint64_t)v2 + *(int *)(v3 + 36), v1, type metadata accessor for DDMDeclarationStatusDatabaseConfig);
  v0[13] = type metadata accessor for SQLiteConnection();
  v0[14] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030B65C, v5, v4);
}

uint64_t sub_10030B65C()
{
  sub_100315B60(*(void *)(v0 + 88));
  *(void *)(v0 + 120) = 0;
  sub_1003337F8(*(void *)(v0 + 88), type metadata accessor for DDMDeclarationStatusDatabaseConfig);
  return _swift_task_switch(sub_10030B704, 0, 0);
}

uint64_t sub_10030B704()
{
  *(void *)(v0 + 128) = *(void *)(v0 + 120);
  uint64_t v1 = *(void **)(v0 + 56);
  *(void *)(v0 + 136) = *v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 144) = v2;
  long long v3 = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030BA8C, v5, v4);
}

uint64_t sub_10030B7B0()
{
  uint64_t v19 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v16 = *(void *)(v0 + 64);
    uint64_t v17 = *(void *)(v0 + 80);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 16) = sub_1000143F4(0xD000000000000014, 0x80000001005BDC00, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  *(void *)(v0 + 128) = 0;
  uint64_t v9 = *(void **)(v0 + 56);
  *(void *)(v0 + 136) = *v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 144) = v10;
  long long v11 = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 16) = v9;
  *(_OWORD *)(v10 + 24) = v11;
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030BA8C, v13, v12);
}

uint64_t sub_10030BA8C()
{
  sub_10031B4CC((uint64_t)sub_100333668, *(void *)(v0 + 144));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10030BB3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[2] = a3;
  v3[11] = type metadata accessor for SQLiteConnection();
  v3[12] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030BC64, v7, v6);
}

uint64_t sub_10030BC64()
{
  sub_10031735C();
  *(void *)(v0 + 104) = 0;
  return _swift_task_switch(sub_10030BCF0, 0, 0);
}

uint64_t sub_10030BCF0()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 112) = *(void *)(v0 + 104);
  *(void *)(v0 + 120) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  long long v3 = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 16) = v0 + 16;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030C07C, v5, v4);
}

uint64_t sub_10030BD98()
{
  uint64_t v20 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v16 = *(void *)(v0 + 72);
    uint64_t v17 = *(void *)(v0 + 64);
    uint64_t v18 = *(void *)(v0 + 80);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0x6174736E49707041, 0xEA00000000006C6CLL, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v17);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 56);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 128) = v10;
  long long v11 = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 16) = v0 + 16;
  *(_OWORD *)(v10 + 24) = v11;
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030C07C, v13, v12);
}

uint64_t sub_10030C07C()
{
  uint64_t v1 = v0[14];
  os_log_type_t v2 = sub_10031CAB0((uint64_t)sub_1003336CC, v0[16]);
  v0[17] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_1003342C4, 0, 0);
  }
  else
  {
    uint64_t v3 = v2;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void *))v0[1];
    return v4(v3);
  }
}

uint64_t sub_10030C168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v6 = type metadata accessor for Logger();
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  v4[2] = a4;
  v4[12] = type metadata accessor for SQLiteConnection();
  v4[13] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030C290, v8, v7);
}

uint64_t sub_10030C290()
{
  sub_100316754();
  *(void *)(v0 + 112) = 0;
  return _swift_task_switch(sub_10030C31C, 0, 0);
}

uint64_t sub_10030C31C()
{
  uint64_t v1 = *(void *)(v0 + 64);
  *(void *)(v0 + 120) = *(void *)(v0 + 112);
  *(void *)(v0 + 128) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 136) = v2;
  long long v3 = *(_OWORD *)(v0 + 48);
  *(void *)(v2 + 16) = v0 + 16;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030C6A8, v5, v4);
}

uint64_t sub_10030C3C4()
{
  uint64_t v20 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v16 = *(void *)(v0 + 80);
    uint64_t v17 = *(void *)(v0 + 72);
    uint64_t v18 = *(void *)(v0 + 88);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0x74616470554D4444, 0xE900000000000065, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v17);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v6 = *(void *)(v0 + 88);
    uint64_t v8 = *(void *)(v0 + 72);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 64);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 120) = 0;
  *(void *)(v0 + 128) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 136) = v10;
  long long v11 = *(_OWORD *)(v0 + 48);
  *(void *)(v10 + 16) = v0 + 16;
  *(_OWORD *)(v10 + 24) = v11;
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030C6A8, v13, v12);
}

uint64_t sub_10030C6A8()
{
  uint64_t v1 = v0[15];
  sub_10031B4CC((uint64_t)sub_10033319C, v0[17]);
  v0[18] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_1003342C8, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
}

uint64_t sub_10030C790(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  type metadata accessor for DDMDeclarationStatusDatabaseConfig(0);
  v3[10] = swift_task_alloc();
  return _swift_task_switch(sub_10030C880, 0, 0);
}

uint64_t sub_10030C880()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = (void *)v0[6];
  v0[11] = *v2;
  uint64_t v3 = sub_1000172F8(&qword_10065CF60);
  sub_100333790((uint64_t)v2 + *(int *)(v3 + 36), v1, type metadata accessor for DDMDeclarationStatusDatabaseConfig);
  v0[12] = type metadata accessor for SQLiteConnection();
  v0[13] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030C984, v5, v4);
}

uint64_t sub_10030C984()
{
  sub_100315B60(*(void *)(v0 + 80));
  *(void *)(v0 + 112) = 0;
  sub_1003337F8(*(void *)(v0 + 80), type metadata accessor for DDMDeclarationStatusDatabaseConfig);
  return _swift_task_switch(sub_10030CA2C, 0, 0);
}

uint64_t sub_10030CA2C()
{
  *(void *)(v0 + 120) = *(void *)(v0 + 112);
  uint64_t v1 = *(void **)(v0 + 48);
  *(void *)(v0 + 128) = *v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 136) = v2;
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030CDB4, v5, v4);
}

uint64_t sub_10030CAD8()
{
  uint64_t v19 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = *(void *)(v0 + 64);
    uint64_t v16 = *(void *)(v0 + 56);
    uint64_t v17 = *(void *)(v0 + 72);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 16) = sub_1000143F4(0xD000000000000014, 0x80000001005BDC00, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 64);
    uint64_t v6 = *(void *)(v0 + 72);
    uint64_t v8 = *(void *)(v0 + 56);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  *(void *)(v0 + 120) = 0;
  uint64_t v9 = *(void **)(v0 + 48);
  *(void *)(v0 + 128) = *v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 136) = v10;
  long long v11 = *(_OWORD *)(v0 + 32);
  *(void *)(v10 + 16) = v9;
  *(_OWORD *)(v10 + 24) = v11;
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030CDB4, v13, v12);
}

uint64_t sub_10030CDB4()
{
  uint64_t v1 = v0[15];
  uint64_t v3 = sub_10031D040((uint64_t)sub_100332F78, v0[17]);
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    uint64_t v6 = v2;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void *, uint64_t))v0[1];
    return v7(v3, v6);
  }
}

uint64_t sub_10030CEC0(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  type metadata accessor for DDMDeclarationStatusDatabaseConfig(0);
  v3[10] = swift_task_alloc();
  return _swift_task_switch(sub_10030CFB0, 0, 0);
}

uint64_t sub_10030CFB0()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = (void *)v0[6];
  v0[11] = *v2;
  uint64_t v3 = sub_1000172F8(&qword_10065CF60);
  sub_100333790((uint64_t)v2 + *(int *)(v3 + 36), v1, type metadata accessor for DDMDeclarationStatusDatabaseConfig);
  v0[12] = type metadata accessor for SQLiteConnection();
  v0[13] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030D0B4, v5, v4);
}

uint64_t sub_10030D0B4()
{
  sub_100315B60(*(void *)(v0 + 80));
  *(void *)(v0 + 112) = 0;
  sub_1003337F8(*(void *)(v0 + 80), type metadata accessor for DDMDeclarationStatusDatabaseConfig);
  return _swift_task_switch(sub_10030D15C, 0, 0);
}

uint64_t sub_10030D15C()
{
  *(void *)(v0 + 120) = *(void *)(v0 + 112);
  uint64_t v1 = *(void **)(v0 + 48);
  *(void *)(v0 + 128) = *v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 136) = v2;
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030D4E4, v5, v4);
}

uint64_t sub_10030D208()
{
  uint64_t v19 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = *(void *)(v0 + 64);
    uint64_t v16 = *(void *)(v0 + 56);
    uint64_t v17 = *(void *)(v0 + 72);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 16) = sub_1000143F4(0xD000000000000014, 0x80000001005BDC00, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 64);
    uint64_t v6 = *(void *)(v0 + 72);
    uint64_t v8 = *(void *)(v0 + 56);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  *(void *)(v0 + 120) = 0;
  uint64_t v9 = *(void **)(v0 + 48);
  *(void *)(v0 + 128) = *v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 136) = v10;
  long long v11 = *(_OWORD *)(v0 + 32);
  *(void *)(v10 + 16) = v9;
  *(_OWORD *)(v10 + 24) = v11;
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030D4E4, v13, v12);
}

uint64_t sub_10030D4E4()
{
  uint64_t v1 = v0[15];
  char v2 = sub_10031B718((uint64_t)sub_1003338B0, v0[17]);
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    uint64_t v5 = v2 & 1;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(uint64_t))v0[1];
    return v6(v5);
  }
}

uint64_t sub_10030D5E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v6 = type metadata accessor for Logger();
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  v4[2] = a4;
  v4[12] = type metadata accessor for SQLiteConnection();
  v4[13] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030D710, v8, v7);
}

uint64_t sub_10030D710()
{
  sub_10031735C();
  *(void *)(v0 + 112) = 0;
  return _swift_task_switch(sub_10030C31C, 0, 0);
}

uint64_t sub_10030D79C()
{
  uint64_t v20 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v16 = *(void *)(v0 + 80);
    uint64_t v17 = *(void *)(v0 + 72);
    uint64_t v18 = *(void *)(v0 + 88);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0x6174736E49707041, 0xEA00000000006C6CLL, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v17);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v6 = *(void *)(v0 + 88);
    uint64_t v8 = *(void *)(v0 + 72);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 64);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 120) = 0;
  *(void *)(v0 + 128) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 136) = v10;
  long long v11 = *(_OWORD *)(v0 + 48);
  *(void *)(v10 + 16) = v0 + 16;
  *(_OWORD *)(v10 + 24) = v11;
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030C6A8, v13, v12);
}

uint64_t sub_10030DA80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v6 = type metadata accessor for Logger();
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  v4[2] = a4;
  v4[12] = type metadata accessor for SQLiteConnection();
  v4[13] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030DBA8, v8, v7);
}

uint64_t sub_10030DBA8()
{
  sub_100317F64();
  *(void *)(v0 + 112) = 0;
  return _swift_task_switch(sub_10030C31C, 0, 0);
}

uint64_t sub_10030DC34()
{
  uint64_t v20 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v16 = *(void *)(v0 + 80);
    uint64_t v17 = *(void *)(v0 + 72);
    uint64_t v18 = *(void *)(v0 + 88);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0xD000000000000011, 0x80000001005BDC80, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v17);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v6 = *(void *)(v0 + 88);
    uint64_t v8 = *(void *)(v0 + 72);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 64);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 120) = 0;
  *(void *)(v0 + 128) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 136) = v10;
  long long v11 = *(_OWORD *)(v0 + 48);
  *(void *)(v10 + 16) = v0 + 16;
  *(_OWORD *)(v10 + 24) = v11;
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030C6A8, v13, v12);
}

uint64_t sub_10030DF18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v6 = type metadata accessor for Logger();
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  v4[2] = a4;
  v4[12] = type metadata accessor for SQLiteConnection();
  v4[13] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030E040, v8, v7);
}

uint64_t sub_10030E040()
{
  sub_1003197D0();
  *(void *)(v0 + 112) = 0;
  return _swift_task_switch(sub_10030C31C, 0, 0);
}

uint64_t sub_10030E0CC()
{
  uint64_t v20 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v16 = *(void *)(v0 + 80);
    uint64_t v17 = *(void *)(v0 + 72);
    uint64_t v18 = *(void *)(v0 + 88);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0x7453657275636553, 0xED0000656761726FLL, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v17);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v6 = *(void *)(v0 + 88);
    uint64_t v8 = *(void *)(v0 + 72);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 64);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 120) = 0;
  *(void *)(v0 + 128) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 136) = v10;
  long long v11 = *(_OWORD *)(v0 + 48);
  *(void *)(v10 + 16) = v0 + 16;
  *(_OWORD *)(v10 + 24) = v11;
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030C6A8, v13, v12);
}

uint64_t sub_10030E3B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v6 = type metadata accessor for Logger();
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  v4[2] = a4;
  v4[12] = type metadata accessor for SQLiteConnection();
  v4[13] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030E4E0, v8, v7);
}

uint64_t sub_10030E4E0()
{
  sub_1003143E4();
  *(void *)(v0 + 112) = 0;
  return _swift_task_switch(sub_10030C31C, 0, 0);
}

uint64_t sub_10030E56C()
{
  uint64_t v20 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v16 = *(void *)(v0 + 80);
    uint64_t v17 = *(void *)(v0 + 72);
    uint64_t v18 = *(void *)(v0 + 88);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0xD000000000000016, 0x80000001005BDCA0, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v17);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v6 = *(void *)(v0 + 88);
    uint64_t v8 = *(void *)(v0 + 72);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 64);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 120) = 0;
  *(void *)(v0 + 128) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 136) = v10;
  long long v11 = *(_OWORD *)(v0 + 48);
  *(void *)(v10 + 16) = v0 + 16;
  *(_OWORD *)(v10 + 24) = v11;
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030C6A8, v13, v12);
}

uint64_t sub_10030E850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  type metadata accessor for LicenseStorageDatabaseConfig(0);
  v4[11] = swift_task_alloc();
  return _swift_task_switch(sub_10030E940, 0, 0);
}

uint64_t sub_10030E940()
{
  uint64_t v1 = v0[11];
  os_log_type_t v2 = (void *)v0[7];
  v0[12] = *v2;
  uint64_t v3 = sub_1000172F8(&qword_10065E410);
  sub_100333790((uint64_t)v2 + *(int *)(v3 + 36), v1, type metadata accessor for LicenseStorageDatabaseConfig);
  v0[13] = type metadata accessor for SQLiteConnection();
  v0[14] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030EA44, v5, v4);
}

uint64_t sub_10030EA44()
{
  sub_100318B60(*(void *)(v0 + 88));
  *(void *)(v0 + 120) = 0;
  sub_1003337F8(*(void *)(v0 + 88), type metadata accessor for LicenseStorageDatabaseConfig);
  return _swift_task_switch(sub_10030EAEC, 0, 0);
}

uint64_t sub_10030EAEC()
{
  *(void *)(v0 + 128) = *(void *)(v0 + 120);
  uint64_t v1 = *(void **)(v0 + 56);
  *(void *)(v0 + 136) = *v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 144) = v2;
  long long v3 = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030EE7C, v5, v4);
}

uint64_t sub_10030EB98()
{
  uint64_t v19 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v16 = *(void *)(v0 + 64);
    uint64_t v17 = *(void *)(v0 + 80);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 16) = sub_1000143F4(0x5365736E6563694CLL, 0xEE00656761726F74, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  *(void *)(v0 + 128) = 0;
  uint64_t v9 = *(void **)(v0 + 56);
  *(void *)(v0 + 136) = *v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 144) = v10;
  long long v11 = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 16) = v9;
  *(_OWORD *)(v10 + 24) = v11;
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030EE7C, v13, v12);
}

uint64_t sub_10030EE7C()
{
  sub_10031B4CC((uint64_t)sub_1003330D8, *(void *)(v0 + 144));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10030EF2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v6 = type metadata accessor for Logger();
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  v4[2] = a4;
  v4[12] = type metadata accessor for SQLiteConnection();
  v4[13] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030F054, v8, v7);
}

uint64_t sub_10030F054()
{
  sub_10031A430();
  *(void *)(v0 + 112) = 0;
  return _swift_task_switch(sub_10030C31C, 0, 0);
}

uint64_t sub_10030F0E0()
{
  uint64_t v20 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v16 = *(void *)(v0 + 80);
    uint64_t v17 = *(void *)(v0 + 72);
    uint64_t v18 = *(void *)(v0 + 88);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0xD000000000000015, 0x80000001005BDC60, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v17);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v6 = *(void *)(v0 + 88);
    uint64_t v8 = *(void *)(v0 + 72);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 64);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 120) = 0;
  *(void *)(v0 + 128) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 136) = v10;
  long long v11 = *(_OWORD *)(v0 + 48);
  *(void *)(v10 + 16) = v0 + 16;
  *(_OWORD *)(v10 + 24) = v11;
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030C6A8, v13, v12);
}

uint64_t sub_10030F3C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[2] = a3;
  v3[11] = type metadata accessor for SQLiteConnection();
  v3[12] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030F4EC, v7, v6);
}

uint64_t sub_10030F4EC()
{
  sub_10031A430();
  *(void *)(v0 + 104) = 0;
  return _swift_task_switch(sub_10030F578, 0, 0);
}

uint64_t sub_10030F578()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 112) = *(void *)(v0 + 104);
  *(void *)(v0 + 120) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  long long v3 = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 16) = v0 + 16;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030F904, v5, v4);
}

uint64_t sub_10030F620()
{
  uint64_t v20 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v16 = *(void *)(v0 + 72);
    uint64_t v17 = *(void *)(v0 + 64);
    uint64_t v18 = *(void *)(v0 + 80);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0xD000000000000015, 0x80000001005BDC60, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v17);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 56);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 128) = v10;
  long long v11 = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 16) = v0 + 16;
  *(_OWORD *)(v10 + 24) = v11;
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030F904, v13, v12);
}

uint64_t sub_10030F904()
{
  uint64_t v1 = v0[14];
  os_log_type_t v2 = sub_10031E65C((uint64_t)sub_100333A4C, v0[16]);
  v0[17] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_1003342C4, 0, 0);
  }
  else
  {
    uint64_t v4 = v2;
    uint64_t v5 = v3;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void *, uint64_t))v0[1];
    return v6(v4, v5);
  }
}

uint64_t sub_10030F9F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[2] = a3;
  v3[11] = type metadata accessor for SQLiteConnection();
  v3[12] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030FB20, v7, v6);
}

uint64_t sub_10030FB20()
{
  sub_10031735C();
  *(void *)(v0 + 104) = 0;
  return _swift_task_switch(sub_10030FBAC, 0, 0);
}

uint64_t sub_10030FBAC()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 112) = *(void *)(v0 + 104);
  *(void *)(v0 + 120) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  long long v3 = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 16) = v0 + 16;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030FF38, v5, v4);
}

uint64_t sub_10030FC54()
{
  uint64_t v20 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v16 = *(void *)(v0 + 72);
    uint64_t v17 = *(void *)(v0 + 64);
    uint64_t v18 = *(void *)(v0 + 80);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0x6174736E49707041, 0xEA00000000006C6CLL, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v17);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 56);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 128) = v10;
  long long v11 = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 16) = v0 + 16;
  *(_OWORD *)(v10 + 24) = v11;
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10030FF38, v13, v12);
}

uint64_t sub_10030FF38()
{
  uint64_t v1 = v0[14];
  os_log_type_t v2 = sub_10031E8D8((uint64_t)sub_100334248, v0[16]);
  v0[17] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_1003342C4, 0, 0);
  }
  else
  {
    uint64_t v3 = v2;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void *))v0[1];
    return v4(v3);
  }
}

uint64_t sub_100310024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[2] = a3;
  v3[11] = type metadata accessor for SQLiteConnection();
  v3[12] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10031014C, v7, v6);
}

uint64_t sub_10031014C()
{
  sub_10031735C();
  *(void *)(v0 + 104) = 0;
  return _swift_task_switch(sub_1003101D8, 0, 0);
}

uint64_t sub_1003101D8()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 112) = *(void *)(v0 + 104);
  *(void *)(v0 + 120) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  long long v3 = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 16) = v0 + 16;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100310564, v5, v4);
}

uint64_t sub_100310280()
{
  uint64_t v20 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v16 = *(void *)(v0 + 72);
    uint64_t v17 = *(void *)(v0 + 64);
    uint64_t v18 = *(void *)(v0 + 80);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0x6174736E49707041, 0xEA00000000006C6CLL, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v17);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 56);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 128) = v10;
  long long v11 = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 16) = v0 + 16;
  *(_OWORD *)(v10 + 24) = v11;
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100310564, v13, v12);
}

uint64_t sub_100310564()
{
  uint64_t v1 = v0[14];
  char v2 = sub_10031B718((uint64_t)sub_100334248, v0[16]);
  v0[17] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_1003342C4, 0, 0);
  }
  else
  {
    uint64_t v3 = v2 & 1;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
    return v4(v3);
  }
}

uint64_t sub_100310654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[2] = a3;
  v3[11] = type metadata accessor for SQLiteConnection();
  v3[12] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10031077C, v7, v6);
}

uint64_t sub_10031077C()
{
  sub_10031735C();
  *(void *)(v0 + 104) = 0;
  return _swift_task_switch(sub_100310808, 0, 0);
}

uint64_t sub_100310808()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 112) = *(void *)(v0 + 104);
  *(void *)(v0 + 120) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  long long v3 = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 16) = v0 + 16;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100310B94, v5, v4);
}

uint64_t sub_1003108B0()
{
  uint64_t v20 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v16 = *(void *)(v0 + 72);
    uint64_t v17 = *(void *)(v0 + 64);
    uint64_t v18 = *(void *)(v0 + 80);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0x6174736E49707041, 0xEA00000000006C6CLL, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v17);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 56);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 128) = v10;
  long long v11 = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 16) = v0 + 16;
  *(_OWORD *)(v10 + 24) = v11;
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100310B94, v13, v12);
}

uint64_t sub_100310B94()
{
  uint64_t v1 = v0[14];
  os_log_type_t v2 = sub_10031F700((uint64_t)sub_1003336CC, v0[16]);
  v0[17] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_1003342C4, 0, 0);
  }
  else
  {
    uint64_t v3 = v2;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void *))v0[1];
    return v4(v3);
  }
}

uint64_t sub_100310C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[2] = a3;
  v3[11] = type metadata accessor for SQLiteConnection();
  v3[12] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100310DA8, v7, v6);
}

uint64_t sub_100310DA8()
{
  sub_10031735C();
  *(void *)(v0 + 104) = 0;
  return _swift_task_switch(sub_100310E34, 0, 0);
}

uint64_t sub_100310E34()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 112) = *(void *)(v0 + 104);
  *(void *)(v0 + 120) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  long long v3 = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 16) = v0 + 16;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003111C0, v5, v4);
}

uint64_t sub_100310EDC()
{
  uint64_t v20 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v16 = *(void *)(v0 + 72);
    uint64_t v17 = *(void *)(v0 + 64);
    uint64_t v18 = *(void *)(v0 + 80);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0x6174736E49707041, 0xEA00000000006C6CLL, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v17);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 56);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 128) = v10;
  long long v11 = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 16) = v0 + 16;
  *(_OWORD *)(v10 + 24) = v11;
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003111C0, v13, v12);
}