uint64_t sub_1DC87574C(uint64_t result, float32x4_t *a2, float32x4_t *a3, uint64_t a4, uint64_t *a5, float *a6, float32x4_t *a7, float *a8, int a9, float32x4_t *a10, float32x4_t *a11, float32x4_t *a12)
{
  long long v12;
  long long v14;
  long long v16;
  BOOL v20;
  uint64_t v21;
  float *v22;
  const float *v23;
  int8x16_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float *v127;
  float v128[16];
  float v129[16];
  float32x4x4_t v130;
  float32x4x4_t v131;
  float32x4x4_t v132;
  float32x4x4_t v133;

  v20 = a4 < 4;
  v21 = a4 - 4;
  if (!v20)
  {
    v22 = v128;
    vst4q_f32(v22, *(float32x4x4_t *)&v12);
    v22 += 16;
    vst4q_f32(v22, *(float32x4x4_t *)&v16);
    v23 = a6;
    v130 = vld4q_f32(v23);
    v23 += 16;
    v131 = vld4q_f32(v23);
    v23 += 16;
    v132 = vld4q_f32(v23);
    v23 += 16;
    v133 = vld4q_f32(v23);
    *(float *)&v14 = *a8;
    v24.i64[0] = 0;
    v24.i64[1] = *a5;
    v25 = vsubq_f32(*a2, (float32x4_t)vextq_s8(v24, *(int8x16_t *)a2, 8uLL));
    v26 = *(int8x16_t *)a2;
    v27 = vmlaq_f32(vmlaq_n_f32(vmulq_f32(v132.val[0], *a12), *a10, v25.f32[0]), v130.val[0], *a11);
    v28 = vmlaq_f32(vmlaq_n_f32(vmulq_f32(v132.val[1], a12[1]), a10[1], v25.f32[0]), v130.val[1], a11[1]);
    v29 = vmlaq_f32(vmlaq_n_f32(vmulq_f32(v132.val[2], a12[2]), a10[2], v25.f32[0]), v130.val[2], a11[2]);
    v30 = vmlaq_f32(vmlaq_n_f32(vmulq_f32(v132.val[3], a12[3]), a10[3], v25.f32[0]), v130.val[3], a11[3]);
    v31 = a7[8];
    v32 = a7[9];
    v33 = a7[10];
    v34 = a7[11];
    v35 = vmulq_n_f32(vmlsq_f32(*a7, v27, v27), *a8);
    v36 = vmulq_n_f32(vmlsq_f32(a7[1], v28, v28), *a8);
    v37 = vmulq_n_f32(vmlsq_f32(a7[2], v29, v29), *a8);
    v38 = vmulq_n_f32(vmlsq_f32(a7[3], v30, v30), *a8);
    if (v21)
    {
      do
      {
        v39 = vmlaq_f32(v35, v27, v27);
        v40 = vmlaq_f32(v36, v28, v28);
        v41 = vmlaq_f32(v37, v29, v29);
        v42 = vmlaq_f32(v38, v30, v30);
        v43 = vmlaq_n_f32(v39, vsubq_f32(v31, v39), *(float *)&v14);
        v44 = *a12;
        v45 = vmlaq_n_f32(v40, vsubq_f32(v32, v40), *(float *)&v14);
        v46 = a12[1];
        v47 = vmlaq_n_f32(v41, vsubq_f32(v33, v41), *(float *)&v14);
        v48 = a12[2];
        v49 = vmlaq_n_f32(v42, vsubq_f32(v34, v42), *(float *)&v14);
        v50 = a12[3];
        if (!result)
        {
          *a3 = v43;
          a3[1] = v45;
          a3[2] = v47;
          a3[3] = v49;
          a3 += 8;
        }
        v51 = vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v130.val[0], v44), *a10, *(float32x2_t *)v25.f32, 1), v27, *a11);
        v52 = vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v130.val[1], v46), a10[1], *(float32x2_t *)v25.f32, 1), v28, a11[1]);
        v53 = vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v130.val[2], v48), a10[2], *(float32x2_t *)v25.f32, 1), v29, a11[2]);
        v54 = vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v130.val[3], v50), a10[3], *(float32x2_t *)v25.f32, 1), v30, a11[3]);
        v55 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v39, v51, v51), *(float *)&v14), v51, v51);
        v56 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v40, v52, v52), *(float *)&v14), v52, v52);
        v57 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v41, v53, v53), *(float *)&v14), v53, v53);
        v58 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v42, v54, v54), *(float *)&v14), v54, v54);
        v59 = vmlaq_n_f32(v55, vsubq_f32(v43, v55), *(float *)&v14);
        v60 = vmlaq_n_f32(v56, vsubq_f32(v45, v56), *(float *)&v14);
        v61 = vmlaq_n_f32(v57, vsubq_f32(v47, v57), *(float *)&v14);
        v62 = vmlaq_n_f32(v58, vsubq_f32(v49, v58), *(float *)&v14);
        v63 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v27, *a12), *a10, v25, 2), v51, *a11);
        v64 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v28, a12[1]), a10[1], v25, 2), v52, a11[1]);
        v65 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v29, a12[2]), a10[2], v25, 2), v53, a11[2]);
        v66 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v30, a12[3]), a10[3], v25, 2), v54, a11[3]);
        v67 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v55, v63, v63), *(float *)&v14), v63, v63);
        v68 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v56, v64, v64), *(float *)&v14), v64, v64);
        v69 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v57, v65, v65), *(float *)&v14), v65, v65);
        v70 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v58, v66, v66), *(float *)&v14), v66, v66);
        v71 = vmlaq_n_f32(v67, vsubq_f32(v59, v67), *(float *)&v14);
        v72 = vmlaq_n_f32(v68, vsubq_f32(v60, v68), *(float *)&v14);
        v73 = vmlaq_n_f32(v69, vsubq_f32(v61, v69), *(float *)&v14);
        v74 = vmlaq_n_f32(v70, vsubq_f32(v62, v70), *(float *)&v14);
        v130.val[0] = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v51, *a12), *a10, v25, 3), v63, *a11);
        v130.val[1] = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v52, a12[1]), a10[1], v25, 3), v64, a11[1]);
        v130.val[2] = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v53, a12[2]), a10[2], v25, 3), v65, a11[2]);
        v130.val[3] = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v54, a12[3]), a10[3], v25, 3), v66, a11[3]);
        ++a2;
        v75 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v67, v130.val[0], v130.val[0]), *(float *)&v14), v130.val[0], v130.val[0]);
        v76 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v68, v130.val[1], v130.val[1]), *(float *)&v14), v130.val[1], v130.val[1]);
        v77 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v69, v130.val[2], v130.val[2]), *(float *)&v14), v130.val[2], v130.val[2]);
        v78 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v70, v130.val[3], v130.val[3]), *(float *)&v14), v130.val[3], v130.val[3]);
        LODWORD(result) = result + 4;
        v31 = vmlaq_n_f32(v75, vsubq_f32(v71, v75), *(float *)&v14);
        v32 = vmlaq_n_f32(v76, vsubq_f32(v72, v76), *(float *)&v14);
        v33 = vmlaq_n_f32(v77, vsubq_f32(v73, v77), *(float *)&v14);
        v34 = vmlaq_n_f32(v78, vsubq_f32(v74, v78), *(float *)&v14);
        if ((int)result >= a9) {
          LODWORD(result) = 0;
        }
        v25 = vsubq_f32(*a2, (float32x4_t)vextq_s8(v26, *(int8x16_t *)a2, 8uLL));
        v26 = *(int8x16_t *)a2;
        v27 = vmlaq_f32(vmlaq_n_f32(vmulq_f32(v63, *a12), *a10, v25.f32[0]), v130.val[0], *a11);
        v28 = vmlaq_f32(vmlaq_n_f32(vmulq_f32(v64, a12[1]), a10[1], v25.f32[0]), v130.val[1], a11[1]);
        v29 = vmlaq_f32(vmlaq_n_f32(vmulq_f32(v65, a12[2]), a10[2], v25.f32[0]), v130.val[2], a11[2]);
        v30 = vmlaq_f32(vmlaq_n_f32(vmulq_f32(v66, a12[3]), a10[3], v25.f32[0]), v130.val[3], a11[3]);
        v35 = vmulq_n_f32(vmlsq_f32(v75, v27, v27), *(float *)&v14);
        v36 = vmulq_n_f32(vmlsq_f32(v76, v28, v28), *(float *)&v14);
        v37 = vmulq_n_f32(vmlsq_f32(v77, v29, v29), *(float *)&v14);
        v38 = vmulq_n_f32(vmlsq_f32(v78, v30, v30), *(float *)&v14);
        v20 = v21 <= 4;
        v21 -= 4;
      }
      while (!v20);
    }
    v79 = vmlaq_f32(v35, v27, v27);
    v80 = vmlaq_f32(v36, v28, v28);
    v81 = vmlaq_f32(v37, v29, v29);
    v82 = vmlaq_f32(v38, v30, v30);
    v83 = vmlaq_n_f32(v79, vsubq_f32(v31, v79), *(float *)&v14);
    v84 = *a12;
    v85 = vmlaq_n_f32(v80, vsubq_f32(v32, v80), *(float *)&v14);
    v86 = a12[1];
    v87 = vmlaq_n_f32(v81, vsubq_f32(v33, v81), *(float *)&v14);
    v88 = a12[2];
    v89 = vmlaq_n_f32(v82, vsubq_f32(v34, v82), *(float *)&v14);
    v90 = a12[3];
    if (!result) {
      vst4q_f32(a3->f32, *(float32x4x4_t *)v83.f32);
    }
    v91 = vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v130.val[0], v84), *a10, *(float32x2_t *)v25.f32, 1), v27, *a11);
    v92 = vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v130.val[1], v86), a10[1], *(float32x2_t *)v25.f32, 1), v28, a11[1]);
    v93 = vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v130.val[2], v88), a10[2], *(float32x2_t *)v25.f32, 1), v29, a11[2]);
    v94 = vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v130.val[3], v90), a10[3], *(float32x2_t *)v25.f32, 1), v30, a11[3]);
    v95 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v79, v91, v91), *(float *)&v14), v91, v91);
    v96 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v80, v92, v92), *(float *)&v14), v92, v92);
    v97 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v81, v93, v93), *(float *)&v14), v93, v93);
    v98 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v82, v94, v94), *(float *)&v14), v94, v94);
    v99 = vmlaq_n_f32(v95, vsubq_f32(v83, v95), *(float *)&v14);
    v100 = vmlaq_n_f32(v96, vsubq_f32(v85, v96), *(float *)&v14);
    v101 = vmlaq_n_f32(v97, vsubq_f32(v87, v97), *(float *)&v14);
    v102 = vmlaq_n_f32(v98, vsubq_f32(v89, v98), *(float *)&v14);
    v103 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v27, *a12), *a10, v25, 2), v91, *a11);
    v104 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v28, a12[1]), a10[1], v25, 2), v92, a11[1]);
    v105 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v29, a12[2]), a10[2], v25, 2), v93, a11[2]);
    v106 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v30, a12[3]), a10[3], v25, 2), v94, a11[3]);
    v107 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v95, v103, v103), *(float *)&v14), v103, v103);
    v108 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v96, v104, v104), *(float *)&v14), v104, v104);
    v109 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v97, v105, v105), *(float *)&v14), v105, v105);
    v110 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v98, v106, v106), *(float *)&v14), v106, v106);
    v111 = vmlaq_n_f32(v107, vsubq_f32(v99, v107), *(float *)&v14);
    v112 = vmlaq_n_f32(v108, vsubq_f32(v100, v108), *(float *)&v14);
    v113 = vmlaq_n_f32(v109, vsubq_f32(v101, v109), *(float *)&v14);
    v114 = vmlaq_n_f32(v110, vsubq_f32(v102, v110), *(float *)&v14);
    v115 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v91, *a12), *a10, v25, 3), v103, *a11);
    v116 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v92, a12[1]), a10[1], v25, 3), v104, a11[1]);
    v117 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v93, a12[2]), a10[2], v25, 3), v105, a11[2]);
    v118 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v94, a12[3]), a10[3], v25, 3), v106, a11[3]);
    v119 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v107, v115, v115), *(float *)&v14), v115, v115);
    v120 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v108, v116, v116), *(float *)&v14), v116, v116);
    v121 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v109, v117, v117), *(float *)&v14), v117, v117);
    v122 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v110, v118, v118), *(float *)&v14), v118, v118);
    result = (result + 4);
    v123 = vmlaq_n_f32(v119, vsubq_f32(v111, v119), *(float *)&v14);
    v124 = vmlaq_n_f32(v120, vsubq_f32(v112, v120), *(float *)&v14);
    v125 = vmlaq_n_f32(v121, vsubq_f32(v113, v121), *(float *)&v14);
    v126 = vmlaq_n_f32(v122, vsubq_f32(v114, v122), *(float *)&v14);
    if ((int)result >= a9) {
      result = 0;
    }
    *a7 = v119;
    a7[1] = v120;
    a7[2] = v121;
    a7[3] = v122;
    a7[8] = v123;
    a7[9] = v124;
    a7[10] = v125;
    a7[11] = v126;
    v127 = a6;
    vst4q_f32(v127, *(float32x4x4_t *)v115.f32);
    v127 += 16;
    vst4q_f32(v127, v131);
    v127 += 16;
    vst4q_f32(v127, *(float32x4x4_t *)v103.f32);
    v127 += 16;
    vst4q_f32(v127, v133);
    *a5 = v26.i64[1];
    vld4q_f32(v128);
    vld4q_f32(v129);
  }
  return result;
}

uint64_t sub_1DC875E60(uint64_t result, float32x4_t *a2, float32x4_t *a3, uint64_t a4, uint64_t *a5, float *a6, float32x4_t *a7, float *a8, int a9, float32x4_t *a10, float32x4_t *a11, float32x4_t *a12)
{
  BOOL v20 = a4 < 4;
  uint64_t v21 = a4 - 4;
  if (!v20)
  {
    v22 = v313;
    vst4q_f32(v22, *(float32x4x4_t *)&v12);
    v22 += 16;
    vst4q_f32(v22, *(float32x4x4_t *)&v16);
    v23 = a6;
    float32x4x4_t v315 = vld4q_f32(v23);
    v23 += 16;
    float32x4x4_t v316 = vld4q_f32(v23);
    v23 += 16;
    float32x4x4_t v317 = vld4q_f32(v23);
    v23 += 16;
    float32x4x4_t v318 = vld4q_f32(v23);
    *(float *)&long long v14 = *a8;
    v24.i64[0] = 0;
    v24.i64[1] = *a5;
    float32x4_t v25 = vsubq_f32(*a2, (float32x4_t)vextq_s8(v24, *(int8x16_t *)a2, 8uLL));
    int8x16_t v26 = *(int8x16_t *)a2;
    float32x4_t v27 = vmlaq_f32(vmlaq_n_f32(vmulq_f32(v317.val[0], *a12), *a10, v25.f32[0]), v315.val[0], *a11);
    float32x4_t v28 = vmlaq_f32(vmlaq_n_f32(vmulq_f32(v317.val[1], a12[1]), a10[1], v25.f32[0]), v315.val[1], a11[1]);
    float32x4_t v29 = vmlaq_f32(vmlaq_n_f32(vmulq_f32(v317.val[2], a12[2]), a10[2], v25.f32[0]), v315.val[2], a11[2]);
    float32x4_t v30 = vmlaq_f32(vmlaq_n_f32(vmulq_f32(v317.val[3], a12[3]), a10[3], v25.f32[0]), v315.val[3], a11[3]);
    float32x4_t v31 = vmlaq_f32(vmlaq_n_f32(vmulq_f32(v318.val[0], a12[4]), a10[4], v25.f32[0]), v316.val[0], a11[4]);
    float32x4_t v32 = vmlaq_f32(vmlaq_n_f32(vmulq_f32(v318.val[1], a12[5]), a10[5], v25.f32[0]), v316.val[1], a11[5]);
    float32x4_t v33 = vmlaq_f32(vmlaq_n_f32(vmulq_f32(v318.val[2], a12[6]), a10[6], v25.f32[0]), v316.val[2], a11[6]);
    float32x4_t v34 = vmlaq_f32(vmlaq_n_f32(vmulq_f32(v318.val[3], a12[7]), a10[7], v25.f32[0]), v316.val[3], a11[7]);
    float32x4_t v35 = a7[4];
    float32x4_t v36 = a7[5];
    float32x4_t v37 = a7[6];
    float32x4_t v38 = a7[7];
    float32x4_t v39 = vmulq_n_f32(vmlsq_f32(*a7, v27, v27), *a8);
    float32x4_t v40 = vmulq_n_f32(vmlsq_f32(a7[1], v28, v28), *a8);
    float32x4_t v41 = vmulq_n_f32(vmlsq_f32(a7[2], v29, v29), *a8);
    float32x4_t v42 = vmulq_n_f32(vmlsq_f32(a7[3], v30, v30), *a8);
    if (v21)
    {
      do
      {
        float32x4_t v43 = vmlaq_f32(v39, v27, v27);
        float32x4_t v44 = a7[8];
        float32x4_t v45 = vmlaq_f32(v40, v28, v28);
        float32x4_t v46 = a7[9];
        float32x4_t v47 = vmlaq_f32(v41, v29, v29);
        float32x4_t v48 = a7[10];
        float32x4_t v49 = vmlaq_f32(v42, v30, v30);
        float32x4_t v50 = a7[11];
        float32x4_t v51 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v35, v31, v31), *(float *)&v14), v31, v31);
        *a7 = v43;
        float32x4_t v52 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v36, v32, v32), *(float *)&v14), v32, v32);
        a7[1] = v45;
        float32x4_t v53 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v37, v33, v33), *(float *)&v14), v33, v33);
        a7[2] = v47;
        float32x4_t v54 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v38, v34, v34), *(float *)&v14), v34, v34);
        a7[3] = v49;
        a7[4] = v51;
        a7[5] = v52;
        a7[6] = v53;
        a7[7] = v54;
        float32x4_t v55 = vmlaq_n_f32(v43, vsubq_f32(v44, v43), *(float *)&v14);
        float32x4_t v56 = vmlaq_n_f32(v45, vsubq_f32(v46, v45), *(float *)&v14);
        float32x4_t v57 = a7[13];
        float32x4_t v58 = vmlaq_n_f32(v47, vsubq_f32(v48, v47), *(float *)&v14);
        float32x4_t v59 = a7[14];
        float32x4_t v60 = vmlaq_n_f32(v49, vsubq_f32(v50, v49), *(float *)&v14);
        float32x4_t v61 = a7[15];
        float32x4_t v62 = vsubq_f32(a7[12], v51);
        a7[8] = v55;
        a7[9] = v56;
        a7[10] = v58;
        a7[11] = v60;
        float32x4_t v63 = vmlaq_n_f32(v51, v62, *(float *)&v14);
        float32x4_t v64 = *a12;
        float32x4_t v65 = vmlaq_n_f32(v52, vsubq_f32(v57, v52), *(float *)&v14);
        float32x4_t v66 = a12[1];
        float32x4_t v67 = vmlaq_n_f32(v53, vsubq_f32(v59, v53), *(float *)&v14);
        float32x4_t v68 = a12[2];
        float32x4_t v69 = vmlaq_n_f32(v54, vsubq_f32(v61, v54), *(float *)&v14);
        float32x4_t v70 = a12[3];
        if (!result)
        {
          *a3 = v55;
          a3[1] = v56;
          a3[2] = v58;
          a3[3] = v60;
          v71 = a3 + 4;
          float32x4_t *v71 = v63;
          v71[1] = v65;
          v71[2] = v67;
          v71[3] = v69;
          a3 = v71 + 4;
        }
        float32x4_t v72 = vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v315.val[0], v64), *a10, *(float32x2_t *)v25.f32, 1), v27, *a11);
        float32x4_t v73 = vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v315.val[1], v66), a10[1], *(float32x2_t *)v25.f32, 1), v28, a11[1]);
        float32x4_t v74 = vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v315.val[2], v68), a10[2], *(float32x2_t *)v25.f32, 1), v29, a11[2]);
        float32x4_t v75 = vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v315.val[3], v70), a10[3], *(float32x2_t *)v25.f32, 1), v30, a11[3]);
        float32x4_t v76 = vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v316.val[0], a12[4]), a10[4], *(float32x2_t *)v25.f32, 1), v31, a11[4]);
        float32x4_t v77 = vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v316.val[1], a12[5]), a10[5], *(float32x2_t *)v25.f32, 1), v32, a11[5]);
        float32x4_t v78 = a7[1];
        float32x4_t v79 = vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v316.val[2], a12[6]), a10[6], *(float32x2_t *)v25.f32, 1), v33, a11[6]);
        float32x4_t v80 = a7[2];
        float32x4_t v81 = vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v316.val[3], a12[7]), a10[7], *(float32x2_t *)v25.f32, 1), v34, a11[7]);
        float32x4_t v82 = a7[3];
        float32x4_t v83 = vmlsq_f32(*a7, v72, v72);
        a7[12] = v63;
        a7[13] = v65;
        a7[14] = v67;
        a7[15] = v69;
        float32x4_t v84 = vmulq_n_f32(vmlsq_f32(a7[5], v77, v77), *(float *)&v14);
        float32x4_t v85 = vmulq_n_f32(vmlsq_f32(a7[6], v79, v79), *(float *)&v14);
        float32x4_t v86 = vmulq_n_f32(vmlsq_f32(a7[7], v81, v81), *(float *)&v14);
        float32x4_t v87 = vmlaq_f32(vmulq_n_f32(v83, *(float *)&v14), v72, v72);
        float32x4_t v88 = a7[8];
        float32x4_t v89 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v78, v73, v73), *(float *)&v14), v73, v73);
        float32x4_t v90 = a7[9];
        float32x4_t v91 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v80, v74, v74), *(float *)&v14), v74, v74);
        float32x4_t v92 = a7[10];
        float32x4_t v93 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v82, v75, v75), *(float *)&v14), v75, v75);
        float32x4_t v94 = a7[11];
        float32x4_t v95 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(a7[4], v76, v76), *(float *)&v14), v76, v76);
        *a7 = v87;
        float32x4_t v96 = vmlaq_f32(v84, v77, v77);
        a7[1] = v89;
        float32x4_t v97 = vmlaq_f32(v85, v79, v79);
        a7[2] = v91;
        float32x4_t v98 = vmlaq_f32(v86, v81, v81);
        a7[3] = v93;
        a7[4] = v95;
        a7[5] = v96;
        a7[6] = v97;
        a7[7] = v98;
        float32x4_t v99 = vmlaq_n_f32(v87, vsubq_f32(v88, v87), *(float *)&v14);
        float32x4_t v100 = vmlaq_n_f32(v89, vsubq_f32(v90, v89), *(float *)&v14);
        float32x4_t v101 = a7[13];
        float32x4_t v102 = vmlaq_n_f32(v91, vsubq_f32(v92, v91), *(float *)&v14);
        float32x4_t v103 = a7[14];
        float32x4_t v104 = vmlaq_n_f32(v93, vsubq_f32(v94, v93), *(float *)&v14);
        float32x4_t v105 = a7[15];
        float32x4_t v106 = vsubq_f32(a7[12], v95);
        a7[8] = v99;
        a7[9] = v100;
        a7[10] = v102;
        a7[11] = v104;
        float32x4_t v107 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v27, *a12), *a10, v25, 2), v72, *a11);
        float32x4_t v108 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v28, a12[1]), a10[1], v25, 2), v73, a11[1]);
        float32x4_t v109 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v29, a12[2]), a10[2], v25, 2), v74, a11[2]);
        float32x4_t v110 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v30, a12[3]), a10[3], v25, 2), v75, a11[3]);
        float32x4_t v111 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v31, a12[4]), a10[4], v25, 2), v76, a11[4]);
        float32x4_t v112 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v32, a12[5]), a10[5], v25, 2), v77, a11[5]);
        float32x4_t v113 = a7[1];
        float32x4_t v114 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v33, a12[6]), a10[6], v25, 2), v79, a11[6]);
        float32x4_t v115 = a7[2];
        float32x4_t v116 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v34, a12[7]), a10[7], v25, 2), v81, a11[7]);
        float32x4_t v117 = a7[3];
        float32x4_t v118 = vmlsq_f32(*a7, v107, v107);
        a7[12] = vmlaq_n_f32(v95, v106, *(float *)&v14);
        a7[13] = vmlaq_n_f32(v96, vsubq_f32(v101, v96), *(float *)&v14);
        a7[14] = vmlaq_n_f32(v97, vsubq_f32(v103, v97), *(float *)&v14);
        a7[15] = vmlaq_n_f32(v98, vsubq_f32(v105, v98), *(float *)&v14);
        float32x4_t v119 = vmulq_n_f32(vmlsq_f32(a7[5], v112, v112), *(float *)&v14);
        float32x4_t v120 = vmulq_n_f32(vmlsq_f32(a7[6], v114, v114), *(float *)&v14);
        float32x4_t v121 = vmulq_n_f32(vmlsq_f32(a7[7], v116, v116), *(float *)&v14);
        float32x4_t v122 = vmlaq_f32(vmulq_n_f32(v118, *(float *)&v14), v107, v107);
        float32x4_t v123 = a7[8];
        float32x4_t v124 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v113, v108, v108), *(float *)&v14), v108, v108);
        float32x4_t v125 = a7[9];
        float32x4_t v126 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v115, v109, v109), *(float *)&v14), v109, v109);
        float32x4_t v127 = a7[10];
        float32x4_t v128 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v117, v110, v110), *(float *)&v14), v110, v110);
        float32x4_t v129 = a7[11];
        float32x4_t v130 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(a7[4], v111, v111), *(float *)&v14), v111, v111);
        *a7 = v122;
        float32x4_t v131 = vmlaq_f32(v119, v112, v112);
        a7[1] = v124;
        float32x4_t v132 = vmlaq_f32(v120, v114, v114);
        a7[2] = v126;
        float32x4_t v133 = vmlaq_f32(v121, v116, v116);
        a7[3] = v128;
        a7[4] = v130;
        a7[5] = v131;
        a7[6] = v132;
        a7[7] = v133;
        float32x4_t v134 = vmlaq_n_f32(v122, vsubq_f32(v123, v122), *(float *)&v14);
        float32x4_t v135 = vmlaq_n_f32(v124, vsubq_f32(v125, v124), *(float *)&v14);
        float32x4_t v136 = a7[13];
        float32x4_t v137 = vmlaq_n_f32(v126, vsubq_f32(v127, v126), *(float *)&v14);
        float32x4_t v138 = a7[14];
        float32x4_t v139 = vmlaq_n_f32(v128, vsubq_f32(v129, v128), *(float *)&v14);
        float32x4_t v140 = a7[15];
        float32x4_t v141 = vsubq_f32(a7[12], v130);
        a7[8] = v134;
        a7[9] = v135;
        a7[10] = v137;
        a7[11] = v139;
        v315.val[0] = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v72, *a12), *a10, v25, 3), v107, *a11);
        v315.val[1] = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v73, a12[1]), a10[1], v25, 3), v108, a11[1]);
        v315.val[2] = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v74, a12[2]), a10[2], v25, 3), v109, a11[2]);
        v315.val[3] = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v75, a12[3]), a10[3], v25, 3), v110, a11[3]);
        v316.val[0] = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v76, a12[4]), a10[4], v25, 3), v111, a11[4]);
        v316.val[1] = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v77, a12[5]), a10[5], v25, 3), v112, a11[5]);
        float32x4_t v142 = a7[1];
        v316.val[2] = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v79, a12[6]), a10[6], v25, 3), v114, a11[6]);
        float32x4_t v143 = a7[2];
        v316.val[3] = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v81, a12[7]), a10[7], v25, 3), v116, a11[7]);
        float32x4_t v144 = a7[3];
        float32x4_t v145 = vmlsq_f32(*a7, v315.val[0], v315.val[0]);
        a7[12] = vmlaq_n_f32(v130, v141, *(float *)&v14);
        a7[13] = vmlaq_n_f32(v131, vsubq_f32(v136, v131), *(float *)&v14);
        a7[14] = vmlaq_n_f32(v132, vsubq_f32(v138, v132), *(float *)&v14);
        a7[15] = vmlaq_n_f32(v133, vsubq_f32(v140, v133), *(float *)&v14);
        float32x4_t v146 = *++a2;
        float32x4_t v147 = vmulq_n_f32(vmlsq_f32(a7[5], v316.val[1], v316.val[1]), *(float *)&v14);
        float32x4_t v148 = vmulq_n_f32(vmlsq_f32(a7[6], v316.val[2], v316.val[2]), *(float *)&v14);
        float32x4_t v149 = vmulq_n_f32(vmlsq_f32(a7[7], v316.val[3], v316.val[3]), *(float *)&v14);
        float32x4_t v150 = vmlaq_f32(vmulq_n_f32(v145, *(float *)&v14), v315.val[0], v315.val[0]);
        float32x4_t v151 = a7[8];
        float32x4_t v152 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v142, v315.val[1], v315.val[1]), *(float *)&v14), v315.val[1], v315.val[1]);
        float32x4_t v153 = a7[9];
        float32x4_t v154 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v143, v315.val[2], v315.val[2]), *(float *)&v14), v315.val[2], v315.val[2]);
        float32x4_t v155 = a7[10];
        float32x4_t v156 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v144, v315.val[3], v315.val[3]), *(float *)&v14), v315.val[3], v315.val[3]);
        float32x4_t v157 = a7[11];
        float32x4_t v158 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(a7[4], v316.val[0], v316.val[0]), *(float *)&v14), v316.val[0], v316.val[0]);
        *a7 = v150;
        float32x4_t v159 = vmlaq_f32(v147, v316.val[1], v316.val[1]);
        a7[1] = v152;
        float32x4_t v160 = vmlaq_f32(v148, v316.val[2], v316.val[2]);
        a7[2] = v154;
        float32x4_t v161 = vmlaq_f32(v149, v316.val[3], v316.val[3]);
        a7[3] = v156;
        a7[4] = v158;
        a7[5] = v159;
        a7[6] = v160;
        a7[7] = v161;
        float32x4_t v162 = vmlaq_n_f32(v150, vsubq_f32(v151, v150), *(float *)&v14);
        float32x4_t v163 = vmlaq_n_f32(v152, vsubq_f32(v153, v152), *(float *)&v14);
        float32x4_t v164 = a7[13];
        float32x4_t v165 = vmlaq_n_f32(v154, vsubq_f32(v155, v154), *(float *)&v14);
        float32x4_t v166 = a7[14];
        float32x4_t v167 = vmlaq_n_f32(v156, vsubq_f32(v157, v156), *(float *)&v14);
        float32x4_t v168 = a7[15];
        float32x4_t v169 = vsubq_f32(a7[12], v158);
        a7[8] = v162;
        a7[9] = v163;
        a7[10] = v165;
        a7[11] = v167;
        LODWORD(result) = result + 4;
        float32x4_t v170 = vmlaq_n_f32(v158, v169, *(float *)&v14);
        float32x4_t v171 = vmlaq_n_f32(v159, vsubq_f32(v164, v159), *(float *)&v14);
        float32x4_t v172 = vmlaq_n_f32(v160, vsubq_f32(v166, v160), *(float *)&v14);
        float32x4_t v173 = vmlaq_n_f32(v161, vsubq_f32(v168, v161), *(float *)&v14);
        if ((int)result >= a9) {
          LODWORD(result) = 0;
        }
        float32x4_t v25 = vsubq_f32(v146, (float32x4_t)vextq_s8(v26, (int8x16_t)v146, 8uLL));
        int8x16_t v26 = (int8x16_t)v146;
        float32x4_t v27 = vmlaq_f32(vmlaq_n_f32(vmulq_f32(v107, *a12), *a10, v25.f32[0]), v315.val[0], *a11);
        float32x4_t v28 = vmlaq_f32(vmlaq_n_f32(vmulq_f32(v108, a12[1]), a10[1], v25.f32[0]), v315.val[1], a11[1]);
        float32x4_t v29 = vmlaq_f32(vmlaq_n_f32(vmulq_f32(v109, a12[2]), a10[2], v25.f32[0]), v315.val[2], a11[2]);
        float32x4_t v30 = vmlaq_f32(vmlaq_n_f32(vmulq_f32(v110, a12[3]), a10[3], v25.f32[0]), v315.val[3], a11[3]);
        float32x4_t v31 = vmlaq_f32(vmlaq_n_f32(vmulq_f32(v111, a12[4]), a10[4], v25.f32[0]), v316.val[0], a11[4]);
        float32x4_t v32 = vmlaq_f32(vmlaq_n_f32(vmulq_f32(v112, a12[5]), a10[5], v25.f32[0]), v316.val[1], a11[5]);
        float32x4_t v174 = a7[1];
        float32x4_t v33 = vmlaq_f32(vmlaq_n_f32(vmulq_f32(v114, a12[6]), a10[6], v25.f32[0]), v316.val[2], a11[6]);
        float32x4_t v175 = a7[2];
        float32x4_t v34 = vmlaq_f32(vmlaq_n_f32(vmulq_f32(v116, a12[7]), a10[7], v25.f32[0]), v316.val[3], a11[7]);
        float32x4_t v176 = a7[3];
        float32x4_t v177 = vmlsq_f32(*a7, v27, v27);
        a7[12] = v170;
        a7[13] = v171;
        a7[14] = v172;
        a7[15] = v173;
        float32x4_t v39 = vmulq_n_f32(v177, *(float *)&v14);
        float32x4_t v35 = a7[4];
        float32x4_t v40 = vmulq_n_f32(vmlsq_f32(v174, v28, v28), *(float *)&v14);
        float32x4_t v36 = a7[5];
        float32x4_t v41 = vmulq_n_f32(vmlsq_f32(v175, v29, v29), *(float *)&v14);
        float32x4_t v37 = a7[6];
        float32x4_t v42 = vmulq_n_f32(vmlsq_f32(v176, v30, v30), *(float *)&v14);
        float32x4_t v38 = a7[7];
        BOOL v20 = v21 <= 4;
        v21 -= 4;
      }
      while (!v20);
    }
    float32x4_t v178 = vmlaq_f32(v39, v27, v27);
    float32x4_t v179 = a7[8];
    float32x4_t v180 = vmlaq_f32(v40, v28, v28);
    float32x4_t v181 = a7[9];
    float32x4_t v182 = vmlaq_f32(v41, v29, v29);
    float32x4_t v183 = a7[10];
    float32x4_t v184 = vmlaq_f32(v42, v30, v30);
    float32x4_t v185 = a7[11];
    float32x4_t v186 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v35, v31, v31), *(float *)&v14), v31, v31);
    *a7 = v178;
    float32x4_t v187 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v36, v32, v32), *(float *)&v14), v32, v32);
    a7[1] = v180;
    float32x4_t v188 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v37, v33, v33), *(float *)&v14), v33, v33);
    a7[2] = v182;
    float32x4_t v189 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v38, v34, v34), *(float *)&v14), v34, v34);
    a7[3] = v184;
    a7[4] = v186;
    a7[5] = v187;
    a7[6] = v188;
    a7[7] = v189;
    float32x4_t v190 = vmlaq_n_f32(v178, vsubq_f32(v179, v178), *(float *)&v14);
    float32x4_t v191 = vmlaq_n_f32(v180, vsubq_f32(v181, v180), *(float *)&v14);
    float32x4_t v192 = a7[13];
    float32x4_t v193 = vmlaq_n_f32(v182, vsubq_f32(v183, v182), *(float *)&v14);
    float32x4_t v194 = a7[14];
    float32x4_t v195 = vmlaq_n_f32(v184, vsubq_f32(v185, v184), *(float *)&v14);
    float32x4_t v196 = a7[15];
    float32x4_t v197 = vsubq_f32(a7[12], v186);
    a7[8] = v190;
    a7[9] = v191;
    a7[10] = v193;
    a7[11] = v195;
    float32x4_t v198 = vmlaq_n_f32(v186, v197, *(float *)&v14);
    float32x4_t v199 = *a12;
    float32x4_t v200 = vmlaq_n_f32(v187, vsubq_f32(v192, v187), *(float *)&v14);
    float32x4_t v201 = a12[1];
    float32x4_t v202 = vmlaq_n_f32(v188, vsubq_f32(v194, v188), *(float *)&v14);
    float32x4_t v203 = a12[2];
    float32x4_t v204 = vmlaq_n_f32(v189, vsubq_f32(v196, v189), *(float *)&v14);
    float32x4_t v205 = a12[3];
    if (!result)
    {
      vst4q_f32(a3->f32, *(float32x4x4_t *)v190.f32);
      f32 = a3[4].f32;
      vst4q_f32(f32, *(float32x4x4_t *)v198.f32);
    }
    float32x4_t v207 = vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v315.val[0], v199), *a10, *(float32x2_t *)v25.f32, 1), v27, *a11);
    float32x4_t v208 = vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v315.val[1], v201), a10[1], *(float32x2_t *)v25.f32, 1), v28, a11[1]);
    float32x4_t v209 = vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v315.val[2], v203), a10[2], *(float32x2_t *)v25.f32, 1), v29, a11[2]);
    float32x4_t v210 = vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v315.val[3], v205), a10[3], *(float32x2_t *)v25.f32, 1), v30, a11[3]);
    float32x4_t v211 = vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v316.val[0], a12[4]), a10[4], *(float32x2_t *)v25.f32, 1), v31, a11[4]);
    float32x4_t v212 = vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v316.val[1], a12[5]), a10[5], *(float32x2_t *)v25.f32, 1), v32, a11[5]);
    float32x4_t v213 = a7[1];
    float32x4_t v214 = vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v316.val[2], a12[6]), a10[6], *(float32x2_t *)v25.f32, 1), v33, a11[6]);
    float32x4_t v215 = a7[2];
    float32x4_t v216 = vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v316.val[3], a12[7]), a10[7], *(float32x2_t *)v25.f32, 1), v34, a11[7]);
    float32x4_t v217 = a7[3];
    float32x4_t v218 = vmlsq_f32(*a7, v207, v207);
    a7[12] = v198;
    a7[13] = v200;
    a7[14] = v202;
    a7[15] = v204;
    float32x4_t v219 = vmulq_n_f32(vmlsq_f32(a7[5], v212, v212), *(float *)&v14);
    float32x4_t v220 = vmulq_n_f32(vmlsq_f32(a7[6], v214, v214), *(float *)&v14);
    float32x4_t v221 = vmulq_n_f32(vmlsq_f32(a7[7], v216, v216), *(float *)&v14);
    float32x4_t v222 = vmlaq_f32(vmulq_n_f32(v218, *(float *)&v14), v207, v207);
    float32x4_t v223 = a7[8];
    float32x4_t v224 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v213, v208, v208), *(float *)&v14), v208, v208);
    float32x4_t v225 = a7[9];
    float32x4_t v226 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v215, v209, v209), *(float *)&v14), v209, v209);
    float32x4_t v227 = a7[10];
    float32x4_t v228 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v217, v210, v210), *(float *)&v14), v210, v210);
    float32x4_t v229 = a7[11];
    float32x4_t v230 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(a7[4], v211, v211), *(float *)&v14), v211, v211);
    *a7 = v222;
    float32x4_t v231 = vmlaq_f32(v219, v212, v212);
    a7[1] = v224;
    float32x4_t v232 = vmlaq_f32(v220, v214, v214);
    a7[2] = v226;
    float32x4_t v233 = vmlaq_f32(v221, v216, v216);
    a7[3] = v228;
    a7[4] = v230;
    a7[5] = v231;
    a7[6] = v232;
    a7[7] = v233;
    float32x4_t v234 = vmlaq_n_f32(v222, vsubq_f32(v223, v222), *(float *)&v14);
    float32x4_t v235 = vmlaq_n_f32(v224, vsubq_f32(v225, v224), *(float *)&v14);
    float32x4_t v236 = a7[13];
    float32x4_t v237 = vmlaq_n_f32(v226, vsubq_f32(v227, v226), *(float *)&v14);
    float32x4_t v238 = a7[14];
    float32x4_t v239 = vmlaq_n_f32(v228, vsubq_f32(v229, v228), *(float *)&v14);
    float32x4_t v240 = a7[15];
    float32x4_t v241 = vsubq_f32(a7[12], v230);
    a7[8] = v234;
    a7[9] = v235;
    a7[10] = v237;
    a7[11] = v239;
    float32x4_t v242 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v27, *a12), *a10, v25, 2), v207, *a11);
    float32x4_t v243 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v28, a12[1]), a10[1], v25, 2), v208, a11[1]);
    float32x4_t v244 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v29, a12[2]), a10[2], v25, 2), v209, a11[2]);
    float32x4_t v245 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v30, a12[3]), a10[3], v25, 2), v210, a11[3]);
    float32x4_t v246 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v31, a12[4]), a10[4], v25, 2), v211, a11[4]);
    float32x4_t v247 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v32, a12[5]), a10[5], v25, 2), v212, a11[5]);
    float32x4_t v248 = a7[1];
    float32x4_t v249 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v33, a12[6]), a10[6], v25, 2), v214, a11[6]);
    float32x4_t v250 = a7[2];
    float32x4_t v251 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v34, a12[7]), a10[7], v25, 2), v216, a11[7]);
    float32x4_t v252 = a7[3];
    float32x4_t v253 = vmlsq_f32(*a7, v242, v242);
    a7[12] = vmlaq_n_f32(v230, v241, *(float *)&v14);
    a7[13] = vmlaq_n_f32(v231, vsubq_f32(v236, v231), *(float *)&v14);
    a7[14] = vmlaq_n_f32(v232, vsubq_f32(v238, v232), *(float *)&v14);
    a7[15] = vmlaq_n_f32(v233, vsubq_f32(v240, v233), *(float *)&v14);
    float32x4_t v254 = vmulq_n_f32(vmlsq_f32(a7[5], v247, v247), *(float *)&v14);
    float32x4_t v255 = vmulq_n_f32(vmlsq_f32(a7[6], v249, v249), *(float *)&v14);
    float32x4_t v256 = vmulq_n_f32(vmlsq_f32(a7[7], v251, v251), *(float *)&v14);
    float32x4_t v257 = vmlaq_f32(vmulq_n_f32(v253, *(float *)&v14), v242, v242);
    float32x4_t v258 = a7[8];
    float32x4_t v259 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v248, v243, v243), *(float *)&v14), v243, v243);
    float32x4_t v260 = a7[9];
    float32x4_t v261 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v250, v244, v244), *(float *)&v14), v244, v244);
    float32x4_t v262 = a7[10];
    float32x4_t v263 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v252, v245, v245), *(float *)&v14), v245, v245);
    float32x4_t v264 = a7[11];
    float32x4_t v265 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(a7[4], v246, v246), *(float *)&v14), v246, v246);
    *a7 = v257;
    float32x4_t v266 = vmlaq_f32(v254, v247, v247);
    a7[1] = v259;
    float32x4_t v267 = vmlaq_f32(v255, v249, v249);
    a7[2] = v261;
    float32x4_t v268 = vmlaq_f32(v256, v251, v251);
    a7[3] = v263;
    a7[4] = v265;
    a7[5] = v266;
    a7[6] = v267;
    a7[7] = v268;
    float32x4_t v269 = vmlaq_n_f32(v257, vsubq_f32(v258, v257), *(float *)&v14);
    float32x4_t v270 = vmlaq_n_f32(v259, vsubq_f32(v260, v259), *(float *)&v14);
    float32x4_t v271 = a7[13];
    float32x4_t v272 = vmlaq_n_f32(v261, vsubq_f32(v262, v261), *(float *)&v14);
    float32x4_t v273 = a7[14];
    float32x4_t v274 = vmlaq_n_f32(v263, vsubq_f32(v264, v263), *(float *)&v14);
    float32x4_t v275 = a7[15];
    float32x4_t v276 = vsubq_f32(a7[12], v265);
    a7[8] = v269;
    a7[9] = v270;
    a7[10] = v272;
    a7[11] = v274;
    float32x4_t v277 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v207, *a12), *a10, v25, 3), v242, *a11);
    float32x4_t v278 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v208, a12[1]), a10[1], v25, 3), v243, a11[1]);
    float32x4_t v279 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v209, a12[2]), a10[2], v25, 3), v244, a11[2]);
    float32x4_t v280 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v210, a12[3]), a10[3], v25, 3), v245, a11[3]);
    float32x4_t v281 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v211, a12[4]), a10[4], v25, 3), v246, a11[4]);
    float32x4_t v282 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v212, a12[5]), a10[5], v25, 3), v247, a11[5]);
    float32x4_t v283 = a7[1];
    float32x4_t v284 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v214, a12[6]), a10[6], v25, 3), v249, a11[6]);
    float32x4_t v285 = a7[2];
    float32x4_t v286 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(v216, a12[7]), a10[7], v25, 3), v251, a11[7]);
    float32x4_t v287 = a7[3];
    float32x4_t v288 = vmlsq_f32(*a7, v277, v277);
    a7[12] = vmlaq_n_f32(v265, v276, *(float *)&v14);
    a7[13] = vmlaq_n_f32(v266, vsubq_f32(v271, v266), *(float *)&v14);
    a7[14] = vmlaq_n_f32(v267, vsubq_f32(v273, v267), *(float *)&v14);
    a7[15] = vmlaq_n_f32(v268, vsubq_f32(v275, v268), *(float *)&v14);
    float32x4_t v289 = vmulq_n_f32(vmlsq_f32(a7[5], v282, v282), *(float *)&v14);
    float32x4_t v290 = vmulq_n_f32(vmlsq_f32(a7[6], v284, v284), *(float *)&v14);
    float32x4_t v291 = vmulq_n_f32(vmlsq_f32(a7[7], v286, v286), *(float *)&v14);
    float32x4_t v292 = vmlaq_f32(vmulq_n_f32(v288, *(float *)&v14), v277, v277);
    float32x4_t v293 = a7[8];
    float32x4_t v294 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v283, v278, v278), *(float *)&v14), v278, v278);
    float32x4_t v295 = a7[9];
    float32x4_t v296 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v285, v279, v279), *(float *)&v14), v279, v279);
    float32x4_t v297 = a7[10];
    float32x4_t v298 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(v287, v280, v280), *(float *)&v14), v280, v280);
    float32x4_t v299 = a7[11];
    float32x4_t v300 = vmlaq_f32(vmulq_n_f32(vmlsq_f32(a7[4], v281, v281), *(float *)&v14), v281, v281);
    *a7 = v292;
    float32x4_t v301 = vmlaq_f32(v289, v282, v282);
    a7[1] = v294;
    float32x4_t v302 = vmlaq_f32(v290, v284, v284);
    a7[2] = v296;
    float32x4_t v303 = vmlaq_f32(v291, v286, v286);
    a7[3] = v298;
    a7[4] = v300;
    a7[5] = v301;
    a7[6] = v302;
    a7[7] = v303;
    float32x4_t v304 = vmlaq_n_f32(v292, vsubq_f32(v293, v292), *(float *)&v14);
    float32x4_t v305 = vmlaq_n_f32(v294, vsubq_f32(v295, v294), *(float *)&v14);
    float32x4_t v306 = a7[13];
    float32x4_t v307 = vmlaq_n_f32(v296, vsubq_f32(v297, v296), *(float *)&v14);
    float32x4_t v308 = a7[14];
    float32x4_t v309 = vmlaq_n_f32(v298, vsubq_f32(v299, v298), *(float *)&v14);
    float32x4_t v310 = a7[15];
    float32x4_t v311 = vsubq_f32(a7[12], v300);
    a7[8] = v304;
    a7[9] = v305;
    a7[10] = v307;
    a7[11] = v309;
    result = (result + 4);
    a7[12] = vmlaq_n_f32(v300, v311, *(float *)&v14);
    a7[13] = vmlaq_n_f32(v301, vsubq_f32(v306, v301), *(float *)&v14);
    a7[14] = vmlaq_n_f32(v302, vsubq_f32(v308, v302), *(float *)&v14);
    a7[15] = vmlaq_n_f32(v303, vsubq_f32(v310, v303), *(float *)&v14);
    if ((int)result >= a9) {
      result = 0;
    }
    v312 = a6;
    vst4q_f32(v312, *(float32x4x4_t *)v277.f32);
    v312 += 16;
    vst4q_f32(v312, *(float32x4x4_t *)v281.f32);
    v312 += 16;
    vst4q_f32(v312, *(float32x4x4_t *)v242.f32);
    v312 += 16;
    vst4q_f32(v312, *(float32x4x4_t *)v246.f32);
    *a5 = v26.i64[1];
    vld4q_f32(v313);
    vld4q_f32(v314);
  }
  return result;
}

double SNLKFSResult.timeRange.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1 + OBJC_IVAR___SNLKFSResult_impl;
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR___SNLKFSResult_impl + 40);
  *(void *)a1 = *(void *)(v1 + OBJC_IVAR___SNLKFSResult_impl);
  *(void *)(a1 + 8) = *(void *)(v2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v2 + 16);
  double result = *(double *)(v2 + 32);
  *(double *)(a1 + 32) = result;
  *(void *)(a1 + 40) = v3;
  return result;
}

double SNLKFSResult.timeRange.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = v1 + OBJC_IVAR___SNLKFSResult_impl;
  *(void *)uint64_t v3 = *(void *)a1;
  *(void *)(v3 + 8) = *(void *)(a1 + 8);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(a1 + 16);
  double result = *(double *)(a1 + 32);
  *(double *)(v3 + 32) = result;
  *(void *)(v3 + 40) = v2;
  return result;
}

double sub_1DC876F58@<D0>(uint64_t a1@<X8>)
{
  return SNLKFSResult.timeRange.getter(a1);
}

double sub_1DC876F7C(uint64_t a1)
{
  return SNLKFSResult.timeRange.setter(a1);
}

double (*SNLKFSResult.timeRange.modify(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  SNLKFSResult.timeRange.getter((uint64_t)v3);
  return sub_1DC877000;
}

double sub_1DC877000(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = v1[5];
  uint64_t v3 = v1[6] + OBJC_IVAR___SNLKFSResult_impl;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[4];
  long long v6 = *((_OWORD *)v1 + 1);
  *(void *)uint64_t v3 = *v1;
  *(void *)(v3 + 8) = v4;
  *(_OWORD *)(v3 + 16) = v6;
  *(void *)(v3 + 32) = v5;
  *(void *)(v3 + 40) = v2;
  free(v1);
  return result;
}

float SNLKFSResult.decibelLevel.getter()
{
  return *(float *)(v0 + OBJC_IVAR___SNLKFSResult_impl + 48);
}

void SNLKFSResult.decibelLevel.setter(float a1)
{
  *(float *)(v1 + OBJC_IVAR___SNLKFSResult_impl + 48) = a1;
}

void sub_1DC8770AC(float *a1@<X8>)
{
  *a1 = SNLKFSResult.decibelLevel.getter();
}

void sub_1DC8770D8(float *a1)
{
}

float (*SNLKFSResult.decibelLevel.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v2 = OBJC_IVAR___SNLKFSResult_impl;
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v1 + v2 + 48);
  return sub_1DC877138;
}

float sub_1DC877138(uint64_t a1)
{
  float result = *(float *)(a1 + 16);
  *(float *)(*(void *)a1 + *(void *)(a1 + 8) + 48) = result;
  return result;
}

id sub_1DC87714C()
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = MEMORY[0x1E4F1FA20];
  uint64_t v3 = *(void *)(MEMORY[0x1E4F1FA20] + 40);
  uint64_t v4 = &v0[OBJC_IVAR___SNLKFSResult_impl];
  *(void *)uint64_t v4 = *MEMORY[0x1E4F1FA20];
  *((void *)v4 + 1) = *(void *)(v2 + 8);
  *((_OWORD *)v4 + 1) = *(_OWORD *)(v2 + 16);
  *((void *)v4 + 4) = *(void *)(v2 + 32);
  *((void *)v4 + 5) = v3;
  *((_DWORD *)v4 + 12) = 0;
  v6.receiver = v0;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, sel_init);
}

id sub_1DC8771E8(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = *(_DWORD *)(a1 + 48);
  objc_super v6 = &v3[OBJC_IVAR___SNLKFSResult_impl];
  *(void *)objc_super v6 = *(void *)a1;
  *((void *)v6 + 1) = *(void *)(a1 + 8);
  *((_OWORD *)v6 + 1) = *(_OWORD *)(a1 + 16);
  *((void *)v6 + 4) = *(void *)(a1 + 32);
  *((void *)v6 + 5) = v4;
  *((_DWORD *)v6 + 12) = v5;
  v8.receiver = v3;
  v8.super_class = v1;
  return objc_msgSendSuper2(&v8, sel_init);
}

id SNLKFSResult.copy(with:)@<X0>(void *a1@<X8>)
{
  uint64_t ObjectType = swift_getObjectType();
  sub_1DC883A38(OBJC_IVAR___SNLKFSResult_impl);
  id result = sub_1DC8771E8((uint64_t)v4);
  a1[3] = ObjectType;
  *a1 = result;
  return result;
}

uint64_t SNLKFSResult.hash.getter()
{
  return sub_1DCB1D120();
}

BOOL SNLKFSResult.isEqual(_:)(uint64_t a1)
{
  swift_getObjectType();
  sub_1DC87E920(a1, (uint64_t)&v21);
  if (!v22) {
    return 0;
  }
  sub_1DC87E9CC(&v21, v20);
  sub_1DC87E9DC((uint64_t)v20, (uint64_t)v16);
  if (!swift_dynamicCast()) {
    goto LABEL_6;
  }
  uint64_t v3 = (char *)v12[0];
  if (!v12[0]) {
    goto LABEL_6;
  }
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR___SNLKFSResult_impl + 40);
  float v5 = *(float *)(v1 + OBJC_IVAR___SNLKFSResult_impl + 48);
  uint64_t v6 = *(void *)(v12[0] + OBJC_IVAR___SNLKFSResult_impl);
  uint64_t v7 = *(void *)(v12[0] + OBJC_IVAR___SNLKFSResult_impl + 40);
  float v8 = *(float *)(v12[0] + OBJC_IVAR___SNLKFSResult_impl + 48);
  v16[0] = *(void *)(v1 + OBJC_IVAR___SNLKFSResult_impl);
  v16[1] = *(void *)(v1 + OBJC_IVAR___SNLKFSResult_impl + 8);
  long long v17 = *(_OWORD *)(v1 + OBJC_IVAR___SNLKFSResult_impl + 16);
  uint64_t v18 = *(void *)(v1 + OBJC_IVAR___SNLKFSResult_impl + 32);
  uint64_t v19 = v4;
  v12[0] = v6;
  v12[1] = *(void *)&v3[OBJC_IVAR___SNLKFSResult_impl + 8];
  long long v13 = *(_OWORD *)&v3[OBJC_IVAR___SNLKFSResult_impl + 16];
  uint64_t v14 = *(void *)&v3[OBJC_IVAR___SNLKFSResult_impl + 32];
  uint64_t v15 = v7;
  BOOL v9 = static TimeRange.== infix(_:_:)((uint64_t)v16, (uint64_t)v12);

  if (v9) {
    BOOL v10 = v5 == v8;
  }
  else {
LABEL_6:
  }
    BOOL v10 = 0;
  sub_1DC8818D0((uint64_t)v20);
  return v10;
}

id SNLKFSResult.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return SNLKFSResult.init(coder:)(a1);
}

id SNLKFSResult.init(coder:)(void *a1)
{
  id v3 = v1;
  sub_1DC87CD08(a1, (uint64_t)&v13);
  uint64_t v4 = v13;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  uint64_t v7 = v18;
  int v8 = v19;
  uint64_t v9 = v14;
  uint64_t v10 = v17;
  swift_getObjectType();

  uint64_t v13 = v4;
  uint64_t v14 = v9;
  uint64_t v15 = v5;
  uint64_t v16 = v6;
  uint64_t v17 = v10;
  uint64_t v18 = v7;
  int v19 = v8;
  id v11 = sub_1DC8771E8((uint64_t)&v13);

  swift_deallocPartialClassInstance();
  return v11;
}

Swift::Void __swiftcall SNLKFSResult.encode(with:)(NSCoder with)
{
  long long v2 = *(_OWORD *)(v1 + OBJC_IVAR___SNLKFSResult_impl + 16);
  v3[0] = *(_OWORD *)(v1 + OBJC_IVAR___SNLKFSResult_impl);
  v3[1] = v2;
  v3[2] = *(_OWORD *)(v1 + OBJC_IVAR___SNLKFSResult_impl + 32);
  int v4 = *(_DWORD *)(v1 + OBJC_IVAR___SNLKFSResult_impl + 48);
  sub_1DC87A79C((uint64_t)v3, 1819307369, 0xE400000000000000, with.super.isa);
}

uint64_t static SNLKFSResult.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t SNLKFSResult.description.getter()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v15 = 0;
  unint64_t v16 = 0xE000000000000000;
  sub_1DCB88A98();
  uint64_t v13 = 0;
  unint64_t v14 = 0xE000000000000000;
  v12.receiver = v0;
  v12.super_class = ObjectType;
  id v2 = objc_msgSendSuper2(&v12, sel_description);
  sub_1DCB87938();

  sub_1DCB87A18();
  swift_bridgeObjectRelease();
  sub_1DCB87A18();
  sub_1DCB87FC8();
  sub_1DCB87A18();
  SNLKFSResult.timeRange.getter((uint64_t)&v15);
  uint64_t v3 = v15;
  uint64_t v4 = v17;
  uint64_t v5 = v18;
  uint64_t v6 = v20;
  uint64_t v7 = self;
  v11[0] = v3;
  v11[1] = v16;
  v11[2] = v4;
  v11[3] = v5;
  v11[4] = v19;
  v11[5] = v6;
  id v8 = objc_msgSend(v7, sel_valueWithCMTimeRange_, v11);
  id v9 = objc_msgSend(v8, sel_description);
  sub_1DCB87938();

  sub_1DCB87A18();
  swift_bridgeObjectRelease();
  return v13;
}

id SNLKFSResult.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1DC877A2C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v5 = *v3++;
      uint64_t v4 = v5;
      if ((v5 & ~v2) == 0) {
        uint64_t v4 = 0;
      }
      v2 |= v4;
      --v1;
    }
    while (v1);
  }
  else
  {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1DC877A80()
{
  sub_1DCB86848();
  swift_allocObject();
  sub_1DCB86838();
  sub_1DC882FA4();
  sub_1DCB86828();
  uint64_t result = swift_release();
  if (!v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1DC877B3C()
{
  sub_1DCB86848();
  swift_allocObject();
  sub_1DCB86838();
  sub_1DC882F00();
  sub_1DCB86828();
  uint64_t result = swift_release();
  if (!v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1DC877BE0()
{
  return swift_release();
}

uint64_t sub_1DC877C64()
{
  sub_1DCB86848();
  swift_allocObject();
  sub_1DCB86838();
  sub_1DC8827C8();
  sub_1DCB86828();
  uint64_t result = swift_release();
  if (!v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1DC877D00()
{
  sub_1DCB86848();
  swift_allocObject();
  sub_1DCB86838();
  sub_1DC88268C();
  sub_1DCB86828();
  uint64_t result = swift_release();
  if (!v0) {
    return v2;
  }
  return result;
}

double sub_1DC877D9C()
{
  sub_1DCB86848();
  swift_allocObject();
  sub_1DCB86838();
  sub_1DC882048();
  sub_1DCB86828();
  swift_release();
  if (!v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1DC877E40()
{
  return swift_release();
}

uint64_t sub_1DC877EC4()
{
  return swift_release();
}

uint64_t sub_1DC877F48()
{
  sub_1DCB86848();
  swift_allocObject();
  sub_1DCB86838();
  sub_1DC881AD0();
  sub_1DCB86828();
  uint64_t result = swift_release();
  if (!v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1DC877FE8()
{
  return swift_release();
}

uint64_t sub_1DC87806C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = self;
  sub_1DC881A8C(a1, a1[3]);
  v18[0] = 0;
  id v6 = objc_msgSend(v5, sel_dataWithPropertyList_format_options_error_, sub_1DCB89008(), 100, 0, v18);
  swift_unknownObjectRelease();
  id v7 = v18[0];
  if (v6)
  {
    uint64_t v8 = sub_1DCB86AD8();
    unint64_t v10 = v9;

    sub_1DCB86848();
    swift_allocObject();
    sub_1DCB86838();
    sub_1DC88303C();
    sub_1DCB86828();
    swift_release();
    uint64_t result = sub_1DC881920(v8, v10);
    if (!v2)
    {
      uint64_t v12 = v21;
      int v13 = v22;
      id v14 = v18[1];
      uint64_t v15 = v20;
      long long v16 = v19;
      *(id *)a2 = v18[0];
      *(void *)(a2 + 8) = v14;
      *(_OWORD *)(a2 + 16) = v16;
      *(void *)(a2 + 32) = v15;
      *(void *)(a2 + 40) = v12;
      *(_DWORD *)(a2 + 48) = v13;
    }
  }
  else
  {
    uint64_t v17 = v7;
    sub_1DCB86898();

    return swift_willThrow();
  }
  return result;
}

id sub_1DC878214(void *a1)
{
  v12[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v3 = self;
  sub_1DC881A8C(a1, a1[3]);
  v12[0] = 0;
  id v4 = objc_msgSend(v3, sel_dataWithPropertyList_format_options_error_, sub_1DCB89008(), 100, 0, v12);
  swift_unknownObjectRelease();
  id v5 = v12[0];
  if (v4)
  {
    uint64_t v6 = sub_1DCB86AD8();
    unint64_t v8 = v7;

    uint64_t v9 = sub_1DC877A80();
    if (!v1) {
      id v4 = (id)v9;
    }
    sub_1DC881920(v6, v8);
  }
  else
  {
    unint64_t v10 = v5;
    sub_1DCB86898();

    swift_willThrow();
  }
  return v4;
}

id sub_1DC878380(void *a1)
{
  v12[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v3 = self;
  sub_1DC881A8C(a1, a1[3]);
  v12[0] = 0;
  id v4 = objc_msgSend(v3, sel_dataWithPropertyList_format_options_error_, sub_1DCB89008(), 100, 0, v12);
  swift_unknownObjectRelease();
  id v5 = v12[0];
  if (v4)
  {
    uint64_t v6 = sub_1DCB86AD8();
    unint64_t v8 = v7;

    uint64_t v9 = sub_1DC877B3C();
    if (!v1) {
      id v4 = (id)v9;
    }
    sub_1DC881920(v6, v8);
  }
  else
  {
    unint64_t v10 = v5;
    sub_1DCB86898();

    swift_willThrow();
  }
  return v4;
}

uint64_t sub_1DC8784D8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = self;
  sub_1DC881A8C(a1, a1[3]);
  *(void *)&v16[0] = 0;
  id v6 = objc_msgSend(v5, sel_dataWithPropertyList_format_options_error_, sub_1DCB89008(), 100, 0, v16);
  swift_unknownObjectRelease();
  id v7 = *(id *)&v16[0];
  if (v6)
  {
    uint64_t v8 = sub_1DCB86AD8();
    unint64_t v10 = v9;

    sub_1DCB86848();
    swift_allocObject();
    sub_1DCB86838();
    sub_1DC882E68();
    sub_1DCB86828();
    swift_release();
    uint64_t result = sub_1DC881920(v8, v10);
    if (!v2)
    {
      char v12 = v17;
      long long v13 = v16[1];
      long long v14 = v16[2];
      *(_OWORD *)a2 = v16[0];
      *(_OWORD *)(a2 + 16) = v13;
      *(_OWORD *)(a2 + 32) = v14;
      *(unsigned char *)(a2 + 48) = v12;
    }
  }
  else
  {
    uint64_t v15 = v7;
    sub_1DCB86898();

    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1DC878668@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = self;
  sub_1DC881A8C(a1, a1[3]);
  v17[0] = 0;
  id v6 = objc_msgSend(v5, sel_dataWithPropertyList_format_options_error_, sub_1DCB89008(), 100, 0, v17);
  swift_unknownObjectRelease();
  id v7 = v17[0];
  if (v6)
  {
    uint64_t v8 = sub_1DCB86AD8();
    unint64_t v10 = v9;

    sub_1DCB86848();
    swift_allocObject();
    sub_1DCB86838();
    sub_1DC882CF4();
    sub_1DCB86828();
    swift_release();
    uint64_t result = sub_1DC881920(v8, v10);
    if (!v2)
    {
      uint64_t v12 = v20;
      id v13 = v17[1];
      uint64_t v14 = v19;
      long long v15 = v18;
      *(id *)a2 = v17[0];
      *(void *)(a2 + 8) = v13;
      *(_OWORD *)(a2 + 16) = v15;
      *(void *)(a2 + 32) = v14;
      *(void *)(a2 + 40) = v12;
    }
  }
  else
  {
    long long v16 = v7;
    sub_1DCB86898();

    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1DC878808@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = self;
  sub_1DC881A8C(a1, a1[3]);
  *(void *)&long long v17 = 0;
  id v6 = objc_msgSend(v5, sel_dataWithPropertyList_format_options_error_, sub_1DCB89008(), 100, 0, &v17);
  swift_unknownObjectRelease();
  id v7 = (id)v17;
  if (v6)
  {
    uint64_t v8 = sub_1DCB86AD8();
    unint64_t v10 = v9;

    sub_1DCB86848();
    swift_allocObject();
    sub_1DCB86838();
    sub_1DC882C5C();
    sub_1DCB86828();
    swift_release();
    uint64_t result = sub_1DC881920(v8, v10);
    if (!v2)
    {
      char v12 = v18;
      uint64_t v13 = v19;
      uint64_t v14 = v20;
      char v15 = v21;
      *(_OWORD *)a2 = v17;
      *(unsigned char *)(a2 + 16) = v12;
      *(void *)(a2 + 24) = v13;
      *(void *)(a2 + 32) = v14;
      *(unsigned char *)(a2 + 40) = v15;
    }
  }
  else
  {
    long long v16 = v7;
    sub_1DCB86898();

    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1DC8789A0@<X0>(void *a1@<X0>, id *a2@<X8>)
{
  v13[1] = *(id *)MEMORY[0x1E4F143B8];
  id v5 = self;
  sub_1DC881A8C(a1, a1[3]);
  v13[0] = 0;
  id v6 = objc_msgSend(v5, sel_dataWithPropertyList_format_options_error_, sub_1DCB89008(), 100, 0, v13);
  swift_unknownObjectRelease();
  id v7 = v13[0];
  if (v6)
  {
    uint64_t v8 = sub_1DCB86AD8();
    unint64_t v10 = v9;

    sub_1DCB86848();
    swift_allocObject();
    sub_1DCB86838();
    sub_1DC882A50();
    sub_1DCB86828();
    swift_release();
    uint64_t result = sub_1DC881920(v8, v10);
    if (!v2) {
      *a2 = v13[0];
    }
  }
  else
  {
    char v12 = v7;
    sub_1DCB86898();

    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1DC878B20@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v5 = self;
  sub_1DC881A8C(a1, a1[3]);
  v20[0] = 0;
  id v6 = objc_msgSend(v5, sel_dataWithPropertyList_format_options_error_, sub_1DCB89008(), 100, 0, v20);
  swift_unknownObjectRelease();
  id v7 = v20[0];
  if (v6)
  {
    uint64_t v8 = sub_1DCB86AD8();
    unint64_t v10 = v9;

    sub_1DCB86848();
    swift_allocObject();
    sub_1DCB86838();
    sub_1DC8829B8();
    sub_1DCB86828();
    swift_release();
    uint64_t result = sub_1DC881920(v8, v10);
    if (!v2)
    {
      uint64_t v12 = v23;
      uint64_t v13 = v24;
      uint64_t v14 = v25;
      uint64_t v15 = v26;
      id v16 = v20[1];
      uint64_t v17 = v22;
      long long v18 = v21;
      *(id *)a2 = v20[0];
      *(void *)(a2 + 8) = v16;
      *(_OWORD *)(a2 + 16) = v18;
      *(void *)(a2 + 32) = v17;
      *(void *)(a2 + 40) = v12;
      *(void *)(a2 + 48) = v13;
      *(void *)(a2 + 56) = v14;
      *(void *)(a2 + 64) = v15;
    }
  }
  else
  {
    uint64_t v19 = v7;
    sub_1DCB86898();

    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1DC878CD0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = self;
  sub_1DC881A8C(a1, a1[3]);
  v19[0] = 0;
  id v6 = objc_msgSend(v5, sel_dataWithPropertyList_format_options_error_, sub_1DCB89008(), 100, 0, v19);
  swift_unknownObjectRelease();
  id v7 = v19[0];
  if (v6)
  {
    uint64_t v8 = sub_1DCB86AD8();
    unint64_t v10 = v9;

    sub_1DCB86848();
    swift_allocObject();
    sub_1DCB86838();
    sub_1DC8828BC();
    sub_1DCB86828();
    swift_release();
    uint64_t result = sub_1DC881920(v8, v10);
    if (!v2)
    {
      uint64_t v12 = v22;
      uint64_t v13 = v24;
      uint64_t v14 = v23;
      id v15 = v19[1];
      uint64_t v16 = v21;
      long long v17 = v20;
      *(id *)a2 = v19[0];
      *(void *)(a2 + 8) = v15;
      *(_OWORD *)(a2 + 16) = v17;
      *(void *)(a2 + 32) = v16;
      *(void *)(a2 + 40) = v12;
      *(void *)(a2 + 48) = v14;
      *(void *)(a2 + 56) = v13;
    }
  }
  else
  {
    long long v18 = v7;
    sub_1DCB86898();

    return swift_willThrow();
  }
  return result;
}

id sub_1DC878E80(void *a1)
{
  v10[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v2 = self;
  sub_1DC881A8C(a1, a1[3]);
  v10[0] = 0;
  id v3 = objc_msgSend(v2, sel_dataWithPropertyList_format_options_error_, sub_1DCB89008(), 100, 0, v10);
  swift_unknownObjectRelease();
  id v4 = v10[0];
  if (v3)
  {
    uint64_t v5 = sub_1DCB86AD8();
    unint64_t v7 = v6;

    id v3 = (id)sub_1DC877C64();
    sub_1DC881920(v5, v7);
  }
  else
  {
    uint64_t v8 = v4;
    sub_1DCB86898();

    swift_willThrow();
  }
  return v3;
}

uint64_t sub_1DC878FB0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = self;
  sub_1DC881A8C(a1, a1[3]);
  v19[0] = 0;
  id v6 = objc_msgSend(v5, sel_dataWithPropertyList_format_options_error_, sub_1DCB89008(), 100, 0, v19);
  swift_unknownObjectRelease();
  id v7 = v19[0];
  if (v6)
  {
    uint64_t v8 = sub_1DCB86AD8();
    unint64_t v10 = v9;

    sub_1DCB86848();
    swift_allocObject();
    sub_1DCB86838();
    sub_1DC882730();
    sub_1DCB86828();
    swift_release();
    uint64_t result = sub_1DC881920(v8, v10);
    if (!v2)
    {
      uint64_t v12 = v22;
      uint64_t v13 = v24;
      long long v14 = v23;
      id v15 = v19[1];
      uint64_t v16 = v21;
      long long v17 = v20;
      *(id *)a2 = v19[0];
      *(void *)(a2 + 8) = v15;
      *(_OWORD *)(a2 + 16) = v17;
      *(void *)(a2 + 32) = v16;
      *(void *)(a2 + 40) = v12;
      *(_OWORD *)(a2 + 48) = v14;
      *(void *)(a2 + 64) = v13;
    }
  }
  else
  {
    long long v18 = v7;
    sub_1DCB86898();

    return swift_willThrow();
  }
  return result;
}

id sub_1DC879160(void *a1)
{
  v10[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v2 = self;
  sub_1DC881A8C(a1, a1[3]);
  v10[0] = 0;
  id v3 = objc_msgSend(v2, sel_dataWithPropertyList_format_options_error_, sub_1DCB89008(), 100, 0, v10);
  swift_unknownObjectRelease();
  id v4 = v10[0];
  if (v3)
  {
    uint64_t v5 = sub_1DCB86AD8();
    unint64_t v7 = v6;

    id v3 = (id)sub_1DC877D00();
    sub_1DC881920(v5, v7);
  }
  else
  {
    uint64_t v8 = v4;
    sub_1DCB86898();

    swift_willThrow();
  }
  return v3;
}

uint64_t sub_1DC8792A0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = self;
  sub_1DC881A8C(a1, a1[3]);
  v19[0] = 0;
  id v6 = objc_msgSend(v5, sel_dataWithPropertyList_format_options_error_, sub_1DCB89008(), 100, 0, v19);
  swift_unknownObjectRelease();
  id v7 = v19[0];
  if (v6)
  {
    uint64_t v8 = sub_1DCB86AD8();
    unint64_t v10 = v9;

    sub_1DCB86848();
    swift_allocObject();
    sub_1DCB86838();
    sub_1DC8825F4();
    sub_1DCB86828();
    swift_release();
    uint64_t result = sub_1DC881920(v8, v10);
    if (!v2)
    {
      uint64_t v12 = v22;
      char v13 = v23;
      uint64_t v14 = v24;
      id v15 = v19[1];
      uint64_t v16 = v21;
      long long v17 = v20;
      *(id *)a2 = v19[0];
      *(void *)(a2 + 8) = v15;
      *(_OWORD *)(a2 + 16) = v17;
      *(void *)(a2 + 32) = v16;
      *(void *)(a2 + 40) = v12;
      *(unsigned char *)(a2 + 48) = v13;
      *(void *)(a2 + 56) = v14;
    }
  }
  else
  {
    long long v18 = v7;
    sub_1DCB86898();

    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1DC879450@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = self;
  sub_1DC881A8C(a1, a1[3]);
  v18[0] = 0;
  id v6 = objc_msgSend(v5, sel_dataWithPropertyList_format_options_error_, sub_1DCB89008(), 100, 0, v18);
  swift_unknownObjectRelease();
  id v7 = v18[0];
  if (v6)
  {
    uint64_t v8 = sub_1DCB86AD8();
    unint64_t v10 = v9;

    sub_1DCB86848();
    swift_allocObject();
    sub_1DCB86838();
    sub_1DC88255C();
    sub_1DCB86828();
    swift_release();
    uint64_t result = sub_1DC881920(v8, v10);
    if (!v2)
    {
      long long v12 = v21;
      uint64_t v13 = v22;
      id v14 = v18[1];
      uint64_t v15 = v20;
      long long v16 = v19;
      *(id *)a2 = v18[0];
      *(void *)(a2 + 8) = v14;
      *(_OWORD *)(a2 + 16) = v16;
      *(void *)(a2 + 32) = v15;
      *(_OWORD *)(a2 + 40) = v12;
      *(void *)(a2 + 56) = v13;
    }
  }
  else
  {
    long long v17 = v7;
    sub_1DCB86898();

    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1DC8795F8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = self;
  sub_1DC881A8C(a1, a1[3]);
  *(void *)&long long v23 = 0;
  id v6 = objc_msgSend(v5, sel_dataWithPropertyList_format_options_error_, sub_1DCB89008(), 100, 0, &v23);
  swift_unknownObjectRelease();
  id v7 = (id)v23;
  if (v6)
  {
    uint64_t v8 = sub_1DCB86AD8();
    unint64_t v10 = v9;

    sub_1DCB86848();
    swift_allocObject();
    sub_1DCB86838();
    sub_1DC882468();
    sub_1DCB86828();
    swift_release();
    uint64_t result = sub_1DC881920(v8, v10);
    if (!v2)
    {
      char v12 = v24;
      uint64_t v13 = v25;
      uint64_t v14 = v27;
      uint64_t v15 = v28;
      char v16 = v32;
      uint64_t v17 = v33;
      uint64_t v18 = v26;
      long long v19 = v29;
      long long v20 = v30;
      long long v21 = v31;
      *(_OWORD *)a2 = v23;
      *(unsigned char *)(a2 + 16) = v12;
      *(void *)(a2 + 24) = v13;
      *(void *)(a2 + 32) = v18;
      *(void *)(a2 + 40) = v14;
      *(void *)(a2 + 48) = v15;
      *(_OWORD *)(a2 + 56) = v19;
      *(_OWORD *)(a2 + 72) = v20;
      *(_OWORD *)(a2 + 88) = v21;
      *(unsigned char *)(a2 + 104) = v16;
      *(void *)(a2 + 112) = v17;
    }
  }
  else
  {
    uint64_t v22 = v7;
    sub_1DCB86898();

    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1DC8797C8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = self;
  sub_1DC881A8C(a1, a1[3]);
  *(void *)&long long v24 = 0;
  id v6 = objc_msgSend(v5, sel_dataWithPropertyList_format_options_error_, sub_1DCB89008(), 100, 0, &v24);
  swift_unknownObjectRelease();
  id v7 = (id)v24;
  if (v6)
  {
    uint64_t v8 = sub_1DCB86AD8();
    unint64_t v10 = v9;

    sub_1DCB86848();
    swift_allocObject();
    sub_1DCB86838();
    sub_1DC8822B0();
    sub_1DCB86828();
    swift_release();
    uint64_t result = sub_1DC881920(v8, v10);
    if (!v2)
    {
      uint64_t v12 = v25;
      uint64_t v13 = v26;
      char v14 = v28;
      char v15 = v29;
      char v16 = v30;
      char v17 = v31;
      char v18 = v32;
      char v19 = v33;
      uint64_t v20 = v34;
      char v21 = v35;
      long long v22 = v27;
      *(_OWORD *)a2 = v24;
      *(void *)(a2 + 16) = v12;
      *(void *)(a2 + 24) = v13;
      *(_OWORD *)(a2 + 32) = v22;
      *(unsigned char *)(a2 + 48) = v14;
      *(unsigned char *)(a2 + 49) = v15;
      *(unsigned char *)(a2 + 50) = v16;
      *(unsigned char *)(a2 + 51) = v17;
      *(unsigned char *)(a2 + 52) = v18;
      *(unsigned char *)(a2 + 53) = v19;
      *(void *)(a2 + 56) = v20;
      *(unsigned char *)(a2 + 64) = v21;
    }
  }
  else
  {
    long long v23 = v7;
    sub_1DCB86898();

    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1DC879998@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = self;
  sub_1DC881A8C(a1, a1[3]);
  *(void *)&long long v18 = 0;
  id v6 = objc_msgSend(v5, sel_dataWithPropertyList_format_options_error_, sub_1DCB89008(), 100, 0, &v18);
  swift_unknownObjectRelease();
  id v7 = (id)v18;
  if (v6)
  {
    uint64_t v8 = sub_1DCB86AD8();
    unint64_t v10 = v9;

    sub_1DCB86848();
    swift_allocObject();
    sub_1DCB86838();
    sub_1DC882184();
    sub_1DCB86828();
    swift_release();
    uint64_t result = sub_1DC881920(v8, v10);
    if (!v2)
    {
      char v12 = v19;
      int v13 = v20;
      uint64_t v14 = v21;
      uint64_t v15 = v23;
      uint64_t v16 = v22;
      *(_OWORD *)a2 = v18;
      *(unsigned char *)(a2 + 16) = v12;
      *(_DWORD *)(a2 + 20) = v13;
      *(void *)(a2 + 24) = v14;
      *(void *)(a2 + 32) = v16;
      *(void *)(a2 + 40) = v15;
    }
  }
  else
  {
    char v17 = v7;
    sub_1DCB86898();

    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1DC879B40@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = self;
  sub_1DC881A8C(a1, a1[3]);
  v18[0] = 0;
  id v6 = objc_msgSend(v5, sel_dataWithPropertyList_format_options_error_, sub_1DCB89008(), 100, 0, v18);
  swift_unknownObjectRelease();
  id v7 = v18[0];
  if (v6)
  {
    uint64_t v8 = sub_1DCB86AD8();
    unint64_t v10 = v9;

    sub_1DCB86848();
    swift_allocObject();
    sub_1DCB86838();
    sub_1DC8820EC();
    sub_1DCB86828();
    swift_release();
    uint64_t result = sub_1DC881920(v8, v10);
    if (!v2)
    {
      uint64_t v12 = v21;
      uint64_t v13 = v22;
      id v14 = v18[1];
      uint64_t v15 = v20;
      long long v16 = v19;
      *(id *)a2 = v18[0];
      *(void *)(a2 + 8) = v14;
      *(_OWORD *)(a2 + 16) = v16;
      *(void *)(a2 + 32) = v15;
      *(void *)(a2 + 40) = v12;
      *(void *)(a2 + 48) = v13;
    }
  }
  else
  {
    char v17 = v7;
    sub_1DCB86898();

    return swift_willThrow();
  }
  return result;
}

double sub_1DC879CE8(void *a1)
{
  v13[1] = *(id *)MEMORY[0x1E4F143B8];
  id v4 = self;
  sub_1DC881A8C(a1, a1[3]);
  v13[0] = 0;
  id v5 = objc_msgSend(v4, sel_dataWithPropertyList_format_options_error_, sub_1DCB89008(), 100, 0, v13);
  swift_unknownObjectRelease();
  id v6 = v13[0];
  if (v5)
  {
    uint64_t v7 = sub_1DCB86AD8();
    unint64_t v9 = v8;

    double v10 = sub_1DC877D9C();
    if (!v1) {
      double v2 = v10;
    }
    sub_1DC881920(v7, v9);
  }
  else
  {
    id v11 = v6;
    sub_1DCB86898();

    swift_willThrow();
  }
  return v2;
}

uint64_t sub_1DC879E50@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v5 = self;
  sub_1DC881A8C(a1, a1[3]);
  v18[0] = 0;
  id v6 = objc_msgSend(v5, sel_dataWithPropertyList_format_options_error_, sub_1DCB89008(), 100, 0, v18);
  swift_unknownObjectRelease();
  id v7 = v18[0];
  if (v6)
  {
    uint64_t v8 = sub_1DCB86AD8();
    unint64_t v10 = v9;

    sub_1DCB86848();
    swift_allocObject();
    sub_1DCB86838();
    sub_1DC881F78();
    sub_1DCB86828();
    swift_release();
    uint64_t result = sub_1DC881920(v8, v10);
    if (!v2)
    {
      uint64_t v12 = v22;
      id v13 = v18[1];
      uint64_t v14 = v20;
      long long v15 = v19;
      long long v16 = v21;
      *(id *)a2 = v18[0];
      *(void *)(a2 + 8) = v13;
      *(_OWORD *)(a2 + 16) = v15;
      *(void *)(a2 + 32) = v14;
      *(_OWORD *)(a2 + 40) = v16;
      *(void *)(a2 + 56) = v12;
    }
  }
  else
  {
    char v17 = v7;
    sub_1DCB86898();

    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1DC879FF8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v5 = self;
  sub_1DC881A8C(a1, a1[3]);
  v18[0] = 0;
  id v6 = objc_msgSend(v5, sel_dataWithPropertyList_format_options_error_, sub_1DCB89008(), 100, 0, v18);
  swift_unknownObjectRelease();
  id v7 = v18[0];
  if (v6)
  {
    uint64_t v8 = sub_1DCB86AD8();
    unint64_t v10 = v9;

    sub_1DCB86848();
    swift_allocObject();
    sub_1DCB86838();
    sub_1DC881E84();
    sub_1DCB86828();
    swift_release();
    uint64_t result = sub_1DC881920(v8, v10);
    if (!v2)
    {
      uint64_t v12 = v21;
      long long v13 = v22;
      id v14 = v18[1];
      uint64_t v15 = v20;
      long long v16 = v19;
      *(id *)a2 = v18[0];
      *(void *)(a2 + 8) = v14;
      *(_OWORD *)(a2 + 16) = v16;
      *(void *)(a2 + 32) = v15;
      *(void *)(a2 + 40) = v12;
      *(_OWORD *)(a2 + 48) = v13;
    }
  }
  else
  {
    char v17 = v7;
    sub_1DCB86898();

    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1DC87A1A0(void *a1, void (*a2)(uint64_t, unint64_t))
{
  v12[1] = *(id *)MEMORY[0x1E4F143B8];
  id v4 = self;
  sub_1DC881A8C(a1, a1[3]);
  v12[0] = 0;
  id v5 = objc_msgSend(v4, sel_dataWithPropertyList_format_options_error_, sub_1DCB89008(), 100, 0, v12);
  swift_unknownObjectRelease();
  id v6 = v12[0];
  if (v5)
  {
    uint64_t v7 = sub_1DCB86AD8();
    unint64_t v9 = v8;

    a2(v7, v9);
    return sub_1DC881920(v7, v9);
  }
  else
  {
    id v11 = v6;
    sub_1DCB86898();

    return swift_willThrow();
  }
}

uint64_t sub_1DC87A2D4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = self;
  sub_1DC881A8C(a1, a1[3]);
  v17[0] = 0;
  id v6 = objc_msgSend(v5, sel_dataWithPropertyList_format_options_error_, sub_1DCB89008(), 100, 0, v17);
  swift_unknownObjectRelease();
  id v7 = v17[0];
  if (v6)
  {
    uint64_t v8 = sub_1DCB86AD8();
    unint64_t v10 = v9;

    sub_1DCB86848();
    swift_allocObject();
    sub_1DCB86838();
    sub_1DC881D48();
    sub_1DCB86828();
    swift_release();
    uint64_t result = sub_1DC881920(v8, v10);
    if (!v2)
    {
      uint64_t v12 = v20;
      id v13 = v17[1];
      uint64_t v14 = v19;
      long long v15 = v18;
      *(id *)a2 = v17[0];
      *(void *)(a2 + 8) = v13;
      *(_OWORD *)(a2 + 16) = v15;
      *(void *)(a2 + 32) = v14;
      *(void *)(a2 + 40) = v12;
    }
  }
  else
  {
    long long v16 = v7;
    sub_1DCB86898();

    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1DC87A474@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v5 = self;
  sub_1DC881A8C(a1, a1[3]);
  v21[0] = 0;
  id v6 = objc_msgSend(v5, sel_dataWithPropertyList_format_options_error_, sub_1DCB89008(), 100, 0, v21);
  swift_unknownObjectRelease();
  id v7 = v21[0];
  if (v6)
  {
    uint64_t v8 = sub_1DCB86AD8();
    unint64_t v10 = v9;

    sub_1DCB86848();
    swift_allocObject();
    sub_1DCB86838();
    sub_1DC881C0C();
    sub_1DCB86828();
    swift_release();
    uint64_t result = sub_1DC881920(v8, v10);
    if (!v2)
    {
      uint64_t v12 = v24;
      uint64_t v13 = v25;
      uint64_t v14 = v26;
      id v15 = v21[1];
      uint64_t v16 = v23;
      uint64_t v17 = v27;
      long long v18 = v22;
      long long v19 = v28;
      *(id *)a2 = v21[0];
      *(void *)(a2 + 8) = v15;
      *(_OWORD *)(a2 + 16) = v18;
      *(void *)(a2 + 32) = v16;
      *(void *)(a2 + 40) = v12;
      *(void *)(a2 + 48) = v13;
      *(void *)(a2 + 56) = v14;
      *(void *)(a2 + 64) = v17;
      *(_OWORD *)(a2 + 72) = v19;
    }
  }
  else
  {
    uint64_t v20 = v7;
    sub_1DCB86898();

    return swift_willThrow();
  }
  return result;
}

id sub_1DC87A634(void *a1)
{
  v12[1] = *(id *)MEMORY[0x1E4F143B8];
  id v3 = self;
  sub_1DC881A8C(a1, a1[3]);
  v12[0] = 0;
  id v4 = objc_msgSend(v3, sel_dataWithPropertyList_format_options_error_, sub_1DCB89008(), 100, 0, v12);
  swift_unknownObjectRelease();
  id v5 = v12[0];
  if (v4)
  {
    uint64_t v6 = sub_1DCB86AD8();
    unint64_t v8 = v7;

    uint64_t v9 = sub_1DC877F48();
    if (!v1) {
      id v4 = (id)v9;
    }
    sub_1DC881920(v6, v8);
  }
  else
  {
    unint64_t v10 = v5;
    sub_1DCB86898();

    swift_willThrow();
  }
  return v4;
}

uint64_t sub_1DC87A79C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  v24[3] = &unk_1F37E2D68;
  v24[4] = sub_1DC882FF0();
  uint64_t v7 = swift_allocObject();
  v24[0] = v7;
  long long v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v7 + 32) = v8;
  *(_OWORD *)(v7 + 48) = *(_OWORD *)(a1 + 32);
  *(_DWORD *)(v7 + 64) = *(_DWORD *)(a1 + 48);
  sub_1DCB86878();
  swift_allocObject();
  sub_1DCB86868();
  sub_1DC881A8C(v24, (uint64_t)&unk_1F37E2D68);
  uint64_t v9 = sub_1DCB86858();
  unint64_t v11 = v10;
  swift_release();
  if (v4) {
    goto LABEL_2;
  }
  uint64_t v14 = self;
  id v15 = (void *)sub_1DCB86AB8();
  id v21 = 0;
  id v16 = objc_msgSend(v14, sel_propertyListWithData_options_format_error_, v15, 0, 0, &v21);

  id v17 = v21;
  if (!v16)
  {
    uint64_t v20 = v17;
    sub_1DCB86898();

    swift_willThrow();
    sub_1DC881920(v9, v11);
LABEL_2:
    uint64_t v12 = v24;
    return sub_1DC8818D0((uint64_t)v12);
  }
  sub_1DCB88808();
  swift_unknownObjectRelease();
  sub_1DCA60C84((uint64_t)v22, v23);
  sub_1DC881978((uint64_t)v22);
  sub_1DC881920(v9, v11);
  sub_1DC87E9CC(v23, v25);
  sub_1DC8818D0((uint64_t)v24);
  long long v18 = (void *)sub_1DC8D90CC((uint64_t)v25);
  long long v19 = (void *)sub_1DCB87908();
  objc_msgSend(a4, sel_encodeObject_forKey_, v18, v19);

  uint64_t v12 = v25;
  return sub_1DC8818D0((uint64_t)v12);
}

uint64_t sub_1DC87A9F0(int a1, __int16 a2, double a3, double a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  v22[3] = &type metadata for NullRequest;
  v22[4] = sub_1DC882F4C();
  uint64_t v9 = swift_allocObject();
  v22[0] = v9;
  *(double *)(v9 + 16) = a3;
  *(_DWORD *)(v9 + 24) = a1;
  *(double *)(v9 + 32) = a4;
  *(unsigned char *)(v9 + 40) = a2 & 1;
  *(unsigned char *)(v9 + 41) = HIBYTE(a2) & 1;
  sub_1DCB86878();
  sub_1DC8838D4();
  sub_1DCB86868();
  sub_1DC881A8C(v22, (uint64_t)&type metadata for NullRequest);
  sub_1DCB86858();
  unint64_t v11 = v10;
  swift_release();
  if (v4) {
    goto LABEL_2;
  }
  self;
  uint64_t v14 = (void *)sub_1DC883830();
  id v19 = 0;
  id v15 = objc_msgSend(&type metadata for NullRequest, sel_propertyListWithData_options_format_error_, v14, 0, 0, &v19);

  id v16 = v19;
  if (!v15)
  {
    long long v18 = v16;
    sub_1DCB86898();

    swift_willThrow();
    sub_1DC8837DC();
LABEL_2:
    uint64_t v12 = v22;
    return sub_1DC8818D0((uint64_t)v12);
  }
  sub_1DCB88808();
  swift_unknownObjectRelease();
  sub_1DCA60C84((uint64_t)v20, v21);
  sub_1DC881978((uint64_t)v20);
  sub_1DC8837DC();
  sub_1DC87E9CC(v21, v23);
  sub_1DC8818D0((uint64_t)v22);
  sub_1DC8D90CC((uint64_t)v23);
  id v17 = (void *)sub_1DC883814();
  sub_1DC88384C((uint64_t)v17, sel_encodeObject_forKey_);

  uint64_t v12 = v23;
  return sub_1DC8818D0((uint64_t)v12);
}

uint64_t sub_1DC87AC28(int a1, double a2, double a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  float32x4_t v43 = &type metadata for DetectSignalThresholdRequest;
  sub_1DC882EB4();
  sub_1DC8839CC();
  double v40 = a2;
  int v41 = a1;
  double v42 = a3;
  sub_1DCB86878();
  sub_1DC8838D4();
  uint64_t v7 = (void *)sub_1DCB86868();
  sub_1DC881A8C(&v40, (uint64_t)&type metadata for DetectSignalThresholdRequest);
  sub_1DCB86858();
  sub_1DC883B38();
  if (v3) {
    goto LABEL_2;
  }
  self;
  sub_1DC883B00();
  sub_1DC883940();
  id v17 = sub_1DC8836EC(v10, sel_propertyListWithData_options_format_error_, v11, v12, v13, v14, v15, v16, v31, v33);

  id v18 = v34;
  if (!v17)
  {
    char v30 = v18;
    sub_1DCB86898();

    swift_willThrow();
    sub_1DC883AE8();
LABEL_2:
    long long v8 = &v40;
    return sub_1DC8818D0((uint64_t)v8);
  }
  sub_1DC88394C();
  uint64_t v19 = swift_unknownObjectRelease();
  uint64_t v27 = sub_1DC883B88(v19, v20, v21, v22, v23, v24, v25, v26, v32, (uint64_t)v34, v35, v36, v37, v38, v39);
  sub_1DC883D8C((uint64_t)v27, v28);
  sub_1DC883AE8();
  sub_1DC87E9CC(&v39, v44);
  sub_1DC8818D0((uint64_t)&v40);
  sub_1DC8D90CC((uint64_t)v44);
  uint64_t v29 = (void *)sub_1DC883B1C();
  sub_1DC883B6C((uint64_t)v29, sel_encodeObject_forKey_);

  long long v8 = (double *)v44;
  return sub_1DC8818D0((uint64_t)v8);
}

#error "1DC87AEC8: call analysis failed (funcsize=95)"

uint64_t sub_1DC87AF68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1DC87BF38(a1, a2, a3, a4, &type metadata for NullResult, sub_1DC882CA8);
}

#error "1DC87B0B8: call analysis failed (funcsize=96)"

uint64_t sub_1DC87B158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1DC87C6C8(a1, a2, a3, &type metadata for EstimateSpeechDistanceRequest, sub_1DC882A9C);
}

uint64_t sub_1DC87B1C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1DC87B48C(a1, a2, a3, a4, &unk_1F37EBCA8, sub_1DC882A04);
}

#error "1DC87B27C: call analysis failed (funcsize=92)"

uint64_t sub_1DC87B3A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1DC87BA18(a1, a2, a3, a4, &unk_1F37E9E10, sub_1DC882814, &unk_1F37FB8C8, sub_1DC882890);
}

uint64_t sub_1DC87B424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1DC87B48C(a1, a2, a3, a4, &type metadata for ExceptionRequest, sub_1DC88277C);
}

#error "1DC87B558: call analysis failed (funcsize=94)"

#error "1DC87B658: call analysis failed (funcsize=90)"

#error "1DC87B880: call analysis failed (funcsize=109)"

uint64_t sub_1DC87B92C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1DC87C4E0(a1, a2, a3, a4, &unk_1F37EBE10, sub_1DC8825A8);
}

uint64_t sub_1DC87B994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1DC87BA18(a1, a2, a3, a4, &unk_1F37F0A88, sub_1DC8824B4, &unk_1F37FB878, sub_1DC882530);
}

#error "1DC87BB24: call analysis failed (funcsize=110)"

#error "1DC87BCB0: call analysis failed (funcsize=94)"

#error "1DC87BE30: call analysis failed (funcsize=94)"

uint64_t sub_1DC87BED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1DC87BF38(a1, a2, a3, a4, &type metadata for CreateFeaturePrintRequest, sub_1DC882138);
}

#error "1DC87C008: call analysis failed (funcsize=91)"

#error "1DC87C180: call analysis failed (funcsize=92)"

uint64_t sub_1DC87C220(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  v43[3] = &type metadata for SoundActionsCommand;
  v43[4] = sub_1DC881FC4();
  uint64_t v9 = swift_allocObject();
  v43[0] = v9;
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  *(void *)(v9 + 32) = a3;
  *(double *)(v9 + 40) = a4;
  sub_1DCB86878();
  uint64_t v10 = sub_1DC8838D4();
  swift_bridgeObjectRetain();
  sub_1DCB86868();
  sub_1DC883DA4(v43);
  sub_1DC883D58();
  if (v10) {
    goto LABEL_2;
  }
  self;
  sub_1DC883830();
  sub_1DC883940();
  id v20 = sub_1DC8836EC(v13, sel_propertyListWithData_options_format_error_, v14, v15, v16, v17, v18, v19, v34, v36);

  id v21 = v37;
  if (!v20)
  {
    char v33 = v21;
    sub_1DCB86898();

    swift_willThrow();
    sub_1DC8837DC();
LABEL_2:
    int v11 = v43;
    return sub_1DC8818D0((uint64_t)v11);
  }
  sub_1DC88394C();
  uint64_t v22 = swift_unknownObjectRelease();
  char v30 = sub_1DC883868(v22, v23, v24, v25, v26, v27, v28, v29, v35, (uint64_t)v37, v38, v39, v40, v41, v42);
  sub_1DC883A94((uint64_t)v30, v31);
  sub_1DC8837DC();
  sub_1DC87E9CC(&v42, v44);
  sub_1DC8818D0((uint64_t)v43);
  sub_1DC8D90CC((uint64_t)v44);
  uint64_t v32 = (void *)sub_1DC883814();
  sub_1DC88384C((uint64_t)v32, sel_encodeObject_forKey_);

  int v11 = v44;
  return sub_1DC8818D0((uint64_t)v11);
}

uint64_t sub_1DC87C3F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1DC87BA18(a1, a2, a3, a4, &type metadata for FeaturePrint, sub_1DC881ED0, &unk_1F37FB7B0, sub_1DC881F4C);
}

uint64_t sub_1DC87C478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1DC87C4E0(a1, a2, a3, a4, &type metadata for AudioOffsetResult, sub_1DC881E2C);
}

#error "1DC87C5C0: call analysis failed (funcsize=95)"

uint64_t sub_1DC87C660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1DC87C6C8(a1, a2, a3, &type metadata for EstimateAudioOffsetRequest, sub_1DC881D94);
}

#error "1DC87C78C: call analysis failed (funcsize=92)"

uint64_t sub_1DC87C838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1DC87BF38(a1, a2, a3, a4, &type metadata for SignalThresholdResult, sub_1DC881CF0);
}

uint64_t sub_1DC87C8A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1DC87C6C8(a1, a2, a3, &unk_1F37E2C08, sub_1DC881C58);
}

#error "1DC87C9E0: call analysis failed (funcsize=92)"

#error "1DC87CC08: call analysis failed (funcsize=134)"

uint64_t sub_1DC87CCA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1DC87C6C8(a1, a2, a3, &unk_1F37EF1D8, sub_1DC881B1C);
}

uint64_t sub_1DC87CD08@<X0>(void *a1@<X2>, uint64_t a2@<X8>)
{
  id v5 = (void *)sub_1DCB87908();
  id v6 = objc_msgSend(a1, sel_decodePropertyListForKey_, v5);

  if (v6)
  {
    sub_1DCB88808();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v13 = 0u;
    long long v14 = 0u;
  }
  sub_1DC8819D8((uint64_t)&v13, (uint64_t)v18);
  sub_1DC87E920((uint64_t)v18, (uint64_t)&v13);
  if (!*((void *)&v14 + 1))
  {
    sub_1DC881978((uint64_t)&v13);
    goto LABEL_9;
  }
  uint64_t v7 = sub_1DC87E988((uint64_t *)&unk_1EAA9C6E0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    sub_1DC881A40();
    swift_allocError();
    *int v11 = 2;
    swift_willThrow();
    return sub_1DC881978((uint64_t)v18);
  }
  v12[3] = v7;
  sub_1DC87806C(v12, (uint64_t)&v13);
  sub_1DC881978((uint64_t)v18);
  uint64_t result = sub_1DC8818D0((uint64_t)v12);
  if (!v2)
  {
    uint64_t v9 = v16;
    int v10 = v17;
    *(_OWORD *)a2 = v13;
    *(_OWORD *)(a2 + 16) = v14;
    *(void *)(a2 + 32) = v15;
    *(void *)(a2 + 40) = v9;
    *(_DWORD *)(a2 + 48) = v10;
  }
  return result;
}

uint64_t sub_1DC87CE90()
{
  uint64_t v0 = (void *)sub_1DC883C10();
  id v1 = sub_1DC883BBC((uint64_t)v0, sel_decodePropertyListForKey_);

  if (v1)
  {
    sub_1DC883BF8();
    uint64_t v2 = swift_unknownObjectRelease();
  }
  else
  {
    sub_1DC883BEC();
  }
  uint64_t v10 = sub_1DC883BA4(v2, v3, v4, v5, v6, v7, v8, v9, v22, v23, v24, v25, v26[0]);
  sub_1DC883BD4(v10, v11, v12, v13, v14, v15, v16, v17, v22, v23, v24, v25, v26[0]);
  if (!v25)
  {
    sub_1DC881978((uint64_t)&v22);
    goto LABEL_8;
  }
  sub_1DC87E988((uint64_t *)&unk_1EAA9C6E0);
  if ((sub_1DC883A70() & 1) == 0)
  {
LABEL_8:
    sub_1DC881A40();
    uint64_t v19 = sub_1DC883884();
    sub_1DC883754(v19, v20);
    sub_1DC881978((uint64_t)v26);
    return sub_1DC883D78();
  }
  sub_1DC88397C();
  sub_1DC878214(v18);
  sub_1DC881978((uint64_t)v26);
  sub_1DC8818D0((uint64_t)&v22);
  return sub_1DC883D78();
}

uint64_t sub_1DC87CFB4()
{
  uint64_t v0 = (void *)sub_1DC883C10();
  id v1 = sub_1DC883BBC((uint64_t)v0, sel_decodePropertyListForKey_);

  if (v1)
  {
    sub_1DC883BF8();
    uint64_t v2 = swift_unknownObjectRelease();
  }
  else
  {
    sub_1DC883BEC();
  }
  uint64_t v10 = sub_1DC883BA4(v2, v3, v4, v5, v6, v7, v8, v9, v22, v23, v24, v25, v26[0]);
  sub_1DC883BD4(v10, v11, v12, v13, v14, v15, v16, v17, v22, v23, v24, v25, v26[0]);
  if (!v25)
  {
    sub_1DC881978((uint64_t)&v22);
    goto LABEL_8;
  }
  sub_1DC87E988((uint64_t *)&unk_1EAA9C6E0);
  if ((sub_1DC883A70() & 1) == 0)
  {
LABEL_8:
    sub_1DC881A40();
    uint64_t v19 = sub_1DC883884();
    sub_1DC883754(v19, v20);
    sub_1DC881978((uint64_t)v26);
    return sub_1DC883D78();
  }
  sub_1DC88397C();
  sub_1DC878380(v18);
  sub_1DC881978((uint64_t)v26);
  sub_1DC8818D0((uint64_t)&v22);
  return sub_1DC883D78();
}

uint64_t sub_1DC87D0CC()
{
  uint64_t v2 = (void *)sub_1DC8837C0();
  id v3 = sub_1DC883964((uint64_t)v2, sel_decodePropertyListForKey_);

  if (v3)
  {
    sub_1DC8839F0();
    uint64_t v4 = swift_unknownObjectRelease();
  }
  else
  {
    double v8 = sub_1DC8839C0();
  }
  uint64_t v9 = sub_1DC883A08(v4, v5, v6, v7, v8);
  sub_1DC8839D8(v9, v10, v11, v12);
  if (!*((void *)&v22 + 1))
  {
    sub_1DC881978((uint64_t)&v21);
    goto LABEL_9;
  }
  sub_1DC87E988((uint64_t *)&unk_1EAA9C6E0);
  if ((sub_1DC883710() & 1) == 0)
  {
LABEL_9:
    sub_1DC881A40();
    uint64_t v18 = sub_1DC883884();
    sub_1DC883734(v18, v19);
    return sub_1DC881978((uint64_t)v25);
  }
  sub_1DC8836D0();
  sub_1DC8784D8(v13, v14);
  sub_1DC883A20();
  uint64_t result = sub_1DC8818D0((uint64_t)&v20);
  if (!v1)
  {
    char v16 = v24;
    long long v17 = v22;
    *(_OWORD *)uint64_t v0 = v21;
    *(_OWORD *)(v0 + 16) = v17;
    *(_OWORD *)(v0 + 32) = v23;
    *(unsigned char *)(v0 + 48) = v16;
  }
  return result;
}

void sub_1DC87D1C4(uint64_t a1, uint64_t a2, void *a3)
{
  sub_1DC87E318(a1, a2, a3, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_1DC878668);
}

uint64_t sub_1DC87D1F0()
{
  uint64_t v2 = (void *)sub_1DC8837C0();
  id v3 = sub_1DC883964((uint64_t)v2, sel_decodePropertyListForKey_);

  if (v3)
  {
    sub_1DC8839F0();
    uint64_t v4 = swift_unknownObjectRelease();
  }
  else
  {
    double v8 = sub_1DC8839C0();
  }
  uint64_t v9 = sub_1DC883A08(v4, v5, v6, v7, v8);
  sub_1DC8839D8(v9, v10, v11, v12);
  if (!v25)
  {
    sub_1DC881978((uint64_t)&v23);
    goto LABEL_9;
  }
  sub_1DC87E988((uint64_t *)&unk_1EAA9C6E0);
  if ((sub_1DC883710() & 1) == 0)
  {
LABEL_9:
    sub_1DC881A40();
    uint64_t v20 = sub_1DC883884();
    sub_1DC883734(v20, v21);
    return sub_1DC881978((uint64_t)v28);
  }
  sub_1DC8836D0();
  sub_1DC878808(v13, v14);
  sub_1DC883A20();
  uint64_t result = sub_1DC8818D0((uint64_t)&v22);
  if (!v1)
  {
    char v16 = v24;
    uint64_t v17 = v25;
    uint64_t v18 = v26;
    char v19 = v27;
    *(_OWORD *)uint64_t v0 = v23;
    *(unsigned char *)(v0 + 16) = v16;
    *(void *)(v0 + 24) = v17;
    *(void *)(v0 + 32) = v18;
    *(unsigned char *)(v0 + 40) = v19;
  }
  return result;
}

uint64_t sub_1DC87D2F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1DC87E6F4(a1, a2, a3, (void (*)(uint64_t, unint64_t))sub_1DC877BE0);
}

uint64_t sub_1DC87D31C()
{
  uint64_t v2 = (void *)sub_1DC8837C0();
  id v3 = sub_1DC883964((uint64_t)v2, sel_decodePropertyListForKey_);

  if (v3)
  {
    sub_1DCB88808();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v9 = 0u;
    long long v10 = 0u;
  }
  sub_1DC8819D8((uint64_t)&v9, (uint64_t)v11);
  sub_1DC87E920((uint64_t)v11, (uint64_t)&v9);
  if (!*((void *)&v10 + 1))
  {
    sub_1DC881978((uint64_t)&v9);
    goto LABEL_9;
  }
  uint64_t v4 = sub_1DC87E988((uint64_t *)&unk_1EAA9C6E0);
  if ((sub_1DC883CBC() & 1) == 0)
  {
LABEL_9:
    sub_1DC881A40();
    uint64_t v6 = sub_1DC883884();
    sub_1DC883734(v6, v7);
    return sub_1DC881978((uint64_t)v11);
  }
  *((void *)&v10 + 1) = v4;
  *(void *)&long long v9 = v8;
  sub_1DC8789A0(&v9, &v8);
  sub_1DC881978((uint64_t)v11);
  uint64_t result = sub_1DC8818D0((uint64_t)&v9);
  if (!v1) {
    *uint64_t v0 = v8;
  }
  return result;
}

void sub_1DC87D43C()
{
  uint64_t v2 = (void *)sub_1DC8837C0();
  id v3 = sub_1DC883964((uint64_t)v2, sel_decodePropertyListForKey_);

  if (v3)
  {
    sub_1DC8839F0();
    uint64_t v4 = swift_unknownObjectRelease();
  }
  else
  {
    double v8 = sub_1DC8839C0();
  }
  uint64_t v9 = sub_1DC883A08(v4, v5, v6, v7, v8);
  sub_1DC8839D8(v9, v10, v11, v12);
  if (!*((void *)&v35 + 1))
  {
    sub_1DC881978((uint64_t)&v33);
    goto LABEL_9;
  }
  sub_1DC87E988((uint64_t *)&unk_1EAA9C6E0);
  if ((sub_1DC883710() & 1) == 0)
  {
LABEL_9:
    sub_1DC881A40();
    uint64_t v27 = sub_1DC883884();
    sub_1DC883734(v27, v28);
    sub_1DC881978((uint64_t)v39);
    return;
  }
  sub_1DC8836D0();
  sub_1DC878B20(v13, v14);
  sub_1DC883A20();
  sub_1DC8818D0((uint64_t)&v29);
  if (!v1)
  {
    double v23 = sub_1DC883C28(v15, v16, v17, v18, v19, v20, v21, v22, *(double *)&v29, *(double *)&v30, *(double *)&v31, *(double *)&v32, *(double *)&v33, *(double *)&v34, *(double *)&v35, *((double *)&v35 + 1), *(double *)&v36, v37, v38);
    sub_1DC8838EC(v24, v23, v29, v30, v31, v32, v33, v34, v35, v36);
    *(void *)(v0 + 56) = v25;
    *(void *)(v0 + 64) = v26;
  }
}

void sub_1DC87D52C()
{
  uint64_t v2 = (void *)sub_1DC8837C0();
  id v3 = sub_1DC883964((uint64_t)v2, sel_decodePropertyListForKey_);

  if (v3)
  {
    sub_1DC8839F0();
    uint64_t v4 = swift_unknownObjectRelease();
  }
  else
  {
    double v8 = sub_1DC8839C0();
  }
  uint64_t v9 = sub_1DC883A08(v4, v5, v6, v7, v8);
  sub_1DC8839D8(v9, v10, v11, v12);
  if (!*((void *)&v20 + 1))
  {
    sub_1DC881978((uint64_t)v19);
    goto LABEL_9;
  }
  sub_1DC87E988((uint64_t *)&unk_1EAA9C6E0);
  if ((sub_1DC883710() & 1) == 0)
  {
LABEL_9:
    sub_1DC881A40();
    uint64_t v16 = sub_1DC883884();
    sub_1DC883734(v16, v17);
    sub_1DC881978((uint64_t)v23);
    return;
  }
  sub_1DC8836D0();
  sub_1DC878CD0(v13, v14);
  sub_1DC883A20();
  sub_1DC8818D0((uint64_t)v18);
  if (!v1)
  {
    sub_1DC883990(v19[0], v18[0], v18[1], v18[2], v18[3], v19[0], v19[1], v20, v21);
    *(void *)(v0 + 48) = v22;
    *(void *)(v0 + 56) = v15;
  }
}

id sub_1DC87D628()
{
  uint64_t v0 = (void *)sub_1DC883C10();
  id v1 = sub_1DC883BBC((uint64_t)v0, sel_decodePropertyListForKey_);

  if (v1)
  {
    sub_1DC883BF8();
    uint64_t v2 = swift_unknownObjectRelease();
  }
  else
  {
    sub_1DC883BEC();
  }
  uint64_t v10 = sub_1DC883BA4(v2, v3, v4, v5, v6, v7, v8, v9, v22, v23, v24, v25, v26[0]);
  sub_1DC883BD4(v10, v11, v12, v13, v14, v15, v16, v17, v22, v23, v24, v25, v26[0]);
  if (!v25)
  {
    sub_1DC881978((uint64_t)&v22);
    goto LABEL_8;
  }
  id v1 = (id)sub_1DC87E988((uint64_t *)&unk_1EAA9C6E0);
  if ((sub_1DC883A70() & 1) == 0)
  {
LABEL_8:
    sub_1DC881A40();
    uint64_t v19 = sub_1DC883884();
    sub_1DC883754(v19, v20);
    sub_1DC881978((uint64_t)v26);
    return v1;
  }
  sub_1DC88397C();
  id v1 = sub_1DC878E80(v18);
  sub_1DC881978((uint64_t)v26);
  sub_1DC8818D0((uint64_t)&v22);
  return v1;
}

void sub_1DC87D720()
{
  uint64_t v2 = (void *)sub_1DC8837C0();
  id v3 = sub_1DC883964((uint64_t)v2, sel_decodePropertyListForKey_);

  if (v3)
  {
    sub_1DC8839F0();
    uint64_t v4 = swift_unknownObjectRelease();
  }
  else
  {
    double v8 = sub_1DC8839C0();
  }
  uint64_t v9 = sub_1DC883A08(v4, v5, v6, v7, v8);
  sub_1DC8839D8(v9, v10, v11, v12);
  if (!*((void *)&v20 + 1))
  {
    sub_1DC881978((uint64_t)v19);
    goto LABEL_9;
  }
  sub_1DC87E988((uint64_t *)&unk_1EAA9C6E0);
  if ((sub_1DC883710() & 1) == 0)
  {
LABEL_9:
    sub_1DC881A40();
    uint64_t v16 = sub_1DC883884();
    sub_1DC883734(v16, v17);
    sub_1DC881978((uint64_t)v23);
    return;
  }
  sub_1DC8836D0();
  sub_1DC878FB0(v13, v14);
  sub_1DC883A20();
  sub_1DC8818D0((uint64_t)v18);
  if (!v1)
  {
    sub_1DC883AC4(v19[0], v18[0], v18[1], v18[2], v18[3], v19[0], v19[1], v20, v21);
    *(_OWORD *)(v0 + 48) = v22;
    *(void *)(v0 + 64) = v15;
  }
}

id sub_1DC87D81C()
{
  uint64_t v0 = (void *)sub_1DC883C10();
  id v1 = sub_1DC883BBC((uint64_t)v0, sel_decodePropertyListForKey_);

  if (v1)
  {
    sub_1DC883BF8();
    uint64_t v2 = swift_unknownObjectRelease();
  }
  else
  {
    sub_1DC883BEC();
  }
  uint64_t v10 = sub_1DC883BA4(v2, v3, v4, v5, v6, v7, v8, v9, v22, v23, v24, v25, v26[0]);
  sub_1DC883BD4(v10, v11, v12, v13, v14, v15, v16, v17, v22, v23, v24, v25, v26[0]);
  if (!v25)
  {
    sub_1DC881978((uint64_t)&v22);
    goto LABEL_8;
  }
  id v1 = (id)sub_1DC87E988((uint64_t *)&unk_1EAA9C6E0);
  if ((sub_1DC883A70() & 1) == 0)
  {
LABEL_8:
    sub_1DC881A40();
    uint64_t v19 = sub_1DC883884();
    sub_1DC883754(v19, v20);
    sub_1DC881978((uint64_t)v26);
    return v1;
  }
  sub_1DC88397C();
  id v1 = sub_1DC879160(v18);
  sub_1DC881978((uint64_t)v26);
  sub_1DC8818D0((uint64_t)&v22);
  return v1;
}

void sub_1DC87D91C()
{
  uint64_t v2 = (void *)sub_1DC8837C0();
  id v3 = sub_1DC883964((uint64_t)v2, sel_decodePropertyListForKey_);

  if (v3)
  {
    sub_1DC8839F0();
    uint64_t v4 = swift_unknownObjectRelease();
  }
  else
  {
    double v8 = sub_1DC8839C0();
  }
  uint64_t v9 = sub_1DC883A08(v4, v5, v6, v7, v8);
  sub_1DC8839D8(v9, v10, v11, v12);
  if (!*((void *)&v21 + 1))
  {
    sub_1DC881978((uint64_t)v20);
    goto LABEL_9;
  }
  sub_1DC87E988((uint64_t *)&unk_1EAA9C6E0);
  if ((sub_1DC883710() & 1) == 0)
  {
LABEL_9:
    sub_1DC881A40();
    uint64_t v17 = sub_1DC883884();
    sub_1DC883734(v17, v18);
    sub_1DC881978((uint64_t)v23);
    return;
  }
  sub_1DC8836D0();
  sub_1DC8792A0(v13, v14);
  sub_1DC883A20();
  sub_1DC8818D0((uint64_t)v19);
  if (!v1)
  {
    sub_1DC883AC4(v20[0], v19[0], v19[1], v19[2], v19[3], v20[0], v20[1], v21, v22);
    *(unsigned char *)(v0 + 48) = v15;
    *(void *)(v0 + 56) = v16;
  }
}

uint64_t sub_1DC87DA18()
{
  uint64_t v2 = (void *)sub_1DC8837C0();
  id v3 = sub_1DC883964((uint64_t)v2, sel_decodePropertyListForKey_);

  if (v3)
  {
    sub_1DC8839F0();
    uint64_t v4 = swift_unknownObjectRelease();
  }
  else
  {
    double v8 = sub_1DC8839C0();
  }
  uint64_t v9 = sub_1DC883A08(v4, v5, v6, v7, v8);
  sub_1DC8839D8(v9, v10, v11, v12);
  if (!*((void *)&v22 + 1))
  {
    sub_1DC881978((uint64_t)v21);
    goto LABEL_9;
  }
  sub_1DC87E988((uint64_t *)&unk_1EAA9C6E0);
  if ((sub_1DC883710() & 1) == 0)
  {
LABEL_9:
    sub_1DC881A40();
    uint64_t v18 = sub_1DC883884();
    sub_1DC883734(v18, v19);
    return sub_1DC881978((uint64_t)v26);
  }
  sub_1DC8836D0();
  sub_1DC879450(v13, v14);
  sub_1DC883A20();
  uint64_t result = sub_1DC8818D0((uint64_t)&v20);
  if (!v1)
  {
    long long v16 = v24;
    uint64_t v17 = v25;
    *(void *)uint64_t v0 = v21[0];
    *(void *)(v0 + 8) = v21[1];
    *(_OWORD *)(v0 + 16) = v22;
    *(void *)(v0 + 32) = v23;
    *(_OWORD *)(v0 + 40) = v16;
    *(void *)(v0 + 56) = v17;
  }
  return result;
}

uint64_t sub_1DC87DB28()
{
  uint64_t v2 = (void *)sub_1DC8837C0();
  id v3 = sub_1DC883964((uint64_t)v2, sel_decodePropertyListForKey_);

  if (v3)
  {
    sub_1DC8839F0();
    uint64_t v4 = swift_unknownObjectRelease();
  }
  else
  {
    double v8 = sub_1DC8839C0();
  }
  uint64_t v9 = sub_1DC883A08(v4, v5, v6, v7, v8);
  sub_1DC8839D8(v9, v10, v11, v12);
  if (!v27)
  {
    sub_1DC881978((uint64_t)&v25);
    goto LABEL_9;
  }
  sub_1DC87E988((uint64_t *)&unk_1EAA9C6E0);
  if ((sub_1DC883710() & 1) == 0)
  {
LABEL_9:
    sub_1DC881A40();
    uint64_t v22 = sub_1DC883884();
    sub_1DC883734(v22, v23);
    return sub_1DC881978((uint64_t)v36);
  }
  sub_1DC8836D0();
  sub_1DC8795F8(v13, v14);
  sub_1DC883A20();
  uint64_t result = sub_1DC8818D0((uint64_t)&v24);
  if (!v1)
  {
    char v16 = v26;
    uint64_t v17 = v27;
    uint64_t v18 = v29;
    uint64_t v19 = v30;
    char v20 = v34;
    uint64_t v21 = v35;
    *(_OWORD *)uint64_t v0 = v25;
    *(unsigned char *)(v0 + 16) = v16;
    *(void *)(v0 + 24) = v17;
    *(void *)(v0 + 32) = v28;
    *(void *)(v0 + 40) = v18;
    *(void *)(v0 + 48) = v19;
    *(_OWORD *)(v0 + 56) = v31;
    *(_OWORD *)(v0 + 72) = v32;
    *(_OWORD *)(v0 + 88) = v33;
    *(unsigned char *)(v0 + 104) = v20;
    *(void *)(v0 + 112) = v21;
  }
  return result;
}

uint64_t sub_1DC87DC60()
{
  uint64_t v2 = (void *)sub_1DC8837C0();
  id v3 = sub_1DC883964((uint64_t)v2, sel_decodePropertyListForKey_);

  if (v3)
  {
    sub_1DC8839F0();
    uint64_t v4 = swift_unknownObjectRelease();
  }
  else
  {
    double v8 = sub_1DC8839C0();
  }
  uint64_t v9 = sub_1DC883A08(v4, v5, v6, v7, v8);
  sub_1DC8839D8(v9, v10, v11, v12);
  if (!v31)
  {
    sub_1DC881978((uint64_t)&v29);
    goto LABEL_9;
  }
  sub_1DC87E988((uint64_t *)&unk_1EAA9C6E0);
  if ((sub_1DC883710() & 1) == 0)
  {
LABEL_9:
    sub_1DC881A40();
    uint64_t v26 = sub_1DC883884();
    sub_1DC883734(v26, v27);
    return sub_1DC881978((uint64_t)v41);
  }
  sub_1DC8836D0();
  sub_1DC8797C8(v13, v14);
  sub_1DC883A20();
  uint64_t result = sub_1DC8818D0((uint64_t)&v28);
  if (!v1)
  {
    uint64_t v16 = v30;
    uint64_t v17 = v31;
    char v18 = v33;
    char v19 = v34;
    char v20 = v35;
    char v21 = v36;
    char v22 = v37;
    char v23 = v38;
    uint64_t v24 = v39;
    char v25 = v40;
    *(_OWORD *)uint64_t v0 = v29;
    *(void *)(v0 + 16) = v16;
    *(void *)(v0 + 24) = v17;
    *(_OWORD *)(v0 + 32) = v32;
    *(unsigned char *)(v0 + 48) = v18;
    *(unsigned char *)(v0 + 49) = v19;
    *(unsigned char *)(v0 + 50) = v20;
    *(unsigned char *)(v0 + 51) = v21;
    *(unsigned char *)(v0 + 52) = v22;
    *(unsigned char *)(v0 + 53) = v23;
    *(void *)(v0 + 56) = v24;
    *(unsigned char *)(v0 + 64) = v25;
  }
  return result;
}

uint64_t sub_1DC87DD98()
{
  uint64_t v2 = (void *)sub_1DC8837C0();
  id v3 = sub_1DC883964((uint64_t)v2, sel_decodePropertyListForKey_);

  if (v3)
  {
    sub_1DC8839F0();
    uint64_t v4 = swift_unknownObjectRelease();
  }
  else
  {
    double v8 = sub_1DC8839C0();
  }
  uint64_t v9 = sub_1DC883A08(v4, v5, v6, v7, v8);
  sub_1DC8839D8(v9, v10, v11, v12);
  if (!v26)
  {
    sub_1DC881978((uint64_t)&v23);
    goto LABEL_9;
  }
  sub_1DC87E988((uint64_t *)&unk_1EAA9C6E0);
  if ((sub_1DC883710() & 1) == 0)
  {
LABEL_9:
    sub_1DC881A40();
    uint64_t v20 = sub_1DC883884();
    sub_1DC883734(v20, v21);
    return sub_1DC881978((uint64_t)v29);
  }
  sub_1DC8836D0();
  sub_1DC879998(v13, v14);
  sub_1DC883A20();
  uint64_t result = sub_1DC8818D0((uint64_t)&v22);
  if (!v1)
  {
    char v16 = v24;
    int v17 = v25;
    uint64_t v18 = v26;
    uint64_t v19 = v28;
    *(_OWORD *)uint64_t v0 = v23;
    *(unsigned char *)(v0 + 16) = v16;
    *(_DWORD *)(v0 + 20) = v17;
    *(void *)(v0 + 24) = v18;
    *(void *)(v0 + 32) = v27;
    *(void *)(v0 + 40) = v19;
  }
  return result;
}

void sub_1DC87DEA8()
{
  uint64_t v1 = (void *)sub_1DC8837C0();
  id v2 = sub_1DC883964((uint64_t)v1, sel_decodePropertyListForKey_);

  if (v2)
  {
    sub_1DC8839F0();
    uint64_t v3 = swift_unknownObjectRelease();
  }
  else
  {
    double v7 = sub_1DC8839C0();
  }
  uint64_t v8 = sub_1DC883A08(v3, v4, v5, v6, v7);
  sub_1DC8839D8(v8, v9, v10, v11);
  if (!*((void *)&v32 + 1))
  {
    sub_1DC881978((uint64_t)&v30);
    goto LABEL_9;
  }
  sub_1DC87E988((uint64_t *)&unk_1EAA9C6E0);
  if ((sub_1DC883710() & 1) == 0)
  {
LABEL_9:
    sub_1DC881A40();
    uint64_t v24 = sub_1DC883884();
    sub_1DC883734(v24, v25);
    sub_1DC881978((uint64_t)v36);
    return;
  }
  sub_1DC8836D0();
  sub_1DC879B40(v12, v13);
  sub_1DC883A20();
  sub_1DC8818D0((uint64_t)&v26);
  if (!v0)
  {
    double v22 = sub_1DC883C28(v14, v15, v16, v17, v18, v19, v20, v21, *(double *)&v26, *(double *)&v27, *(double *)&v28, *(double *)&v29, *(double *)&v30, *(double *)&v31, *(double *)&v32, *((double *)&v32 + 1), *(double *)&v33, v34, v35);
    sub_1DC8838EC(v23, v22, v26, v27, v28, v29, v30, v31, v32, v33);
  }
}

double sub_1DC87DF90()
{
  id v2 = (void *)sub_1DC883C10();
  id v3 = sub_1DC883BBC((uint64_t)v2, sel_decodePropertyListForKey_);

  if (v3)
  {
    sub_1DC883BF8();
    uint64_t v4 = swift_unknownObjectRelease();
  }
  else
  {
    sub_1DC883BEC();
  }
  uint64_t v12 = sub_1DC883BA4(v4, v5, v6, v7, v8, v9, v10, v11, v25, v26, v27, v28, v29[0]);
  sub_1DC883BD4(v12, v13, v14, v15, v16, v17, v18, v19, v25, v26, v27, v28, v29[0]);
  if (!v28)
  {
    sub_1DC881978((uint64_t)&v25);
    goto LABEL_10;
  }
  sub_1DC87E988((uint64_t *)&unk_1EAA9C6E0);
  if ((sub_1DC883CE0() & 1) == 0)
  {
LABEL_10:
    sub_1DC881A40();
    uint64_t v22 = sub_1DC883884();
    sub_1DC883754(v22, v23);
    sub_1DC881978((uint64_t)v29);
    return v1;
  }
  sub_1DC88397C();
  double v21 = sub_1DC879CE8(v20);
  if (!v0) {
    double v1 = v21;
  }
  sub_1DC881978((uint64_t)v29);
  sub_1DC8818D0((uint64_t)&v25);
  return v1;
}

uint64_t sub_1DC87E0BC()
{
  id v2 = (void *)sub_1DC8837C0();
  id v3 = sub_1DC883964((uint64_t)v2, sel_decodePropertyListForKey_);

  if (v3)
  {
    sub_1DC8839F0();
    uint64_t v4 = swift_unknownObjectRelease();
  }
  else
  {
    double v8 = sub_1DC8839C0();
  }
  uint64_t v9 = sub_1DC883A08(v4, v5, v6, v7, v8);
  sub_1DC8839D8(v9, v10, v11, v12);
  if (!*((void *)&v21 + 1))
  {
    sub_1DC881978((uint64_t)v20);
    goto LABEL_9;
  }
  sub_1DC87E988((uint64_t *)&unk_1EAA9C6E0);
  if ((sub_1DC883710() & 1) == 0)
  {
LABEL_9:
    sub_1DC881A40();
    uint64_t v17 = sub_1DC883884();
    sub_1DC883734(v17, v18);
    return sub_1DC881978((uint64_t)v25);
  }
  sub_1DC8836D0();
  sub_1DC879E50(v13, v14);
  sub_1DC883A20();
  uint64_t result = sub_1DC8818D0((uint64_t)&v19);
  if (!v1)
  {
    uint64_t v16 = v24;
    *(void *)uint64_t v0 = v20[0];
    *(void *)(v0 + 8) = v20[1];
    *(_OWORD *)(v0 + 16) = v21;
    *(void *)(v0 + 32) = v22;
    *(_OWORD *)(v0 + 40) = v23;
    *(void *)(v0 + 56) = v16;
  }
  return result;
}

void sub_1DC87E1CC()
{
  id v2 = (void *)sub_1DC8837C0();
  id v3 = sub_1DC883964((uint64_t)v2, sel_decodePropertyListForKey_);

  if (v3)
  {
    sub_1DC8839F0();
    uint64_t v4 = swift_unknownObjectRelease();
  }
  else
  {
    double v8 = sub_1DC8839C0();
  }
  uint64_t v9 = sub_1DC883A08(v4, v5, v6, v7, v8);
  sub_1DC8839D8(v9, v10, v11, v12);
  if (!*((void *)&v19 + 1))
  {
    sub_1DC881978((uint64_t)v18);
    goto LABEL_9;
  }
  sub_1DC87E988((uint64_t *)&unk_1EAA9C6E0);
  if ((sub_1DC883710() & 1) == 0)
  {
LABEL_9:
    sub_1DC881A40();
    uint64_t v15 = sub_1DC883884();
    sub_1DC883734(v15, v16);
    sub_1DC881978((uint64_t)v22);
    return;
  }
  sub_1DC8836D0();
  sub_1DC879FF8(v13, v14);
  sub_1DC883A20();
  sub_1DC8818D0((uint64_t)v17);
  if (!v1)
  {
    sub_1DC883990(v18[0], v17[0], v17[1], v17[2], v17[3], v18[0], v18[1], v19, v20);
    *(_OWORD *)(v0 + 48) = v21;
  }
}

uint64_t sub_1DC87E2C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1DC87E6F4(a1, a2, a3, (void (*)(uint64_t, unint64_t))sub_1DC877E40);
}

void sub_1DC87E2EC(uint64_t a1, uint64_t a2, void *a3)
{
  sub_1DC87E318(a1, a2, a3, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_1DC87A2D4);
}

void sub_1DC87E318(uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t v7 = (void *)sub_1DCB87908();
  id v8 = objc_msgSend(a3, sel_decodePropertyListForKey_, v7);

  if (v8)
  {
    sub_1DCB88808();
    swift_unknownObjectRelease();
  }
  else
  {
    sub_1DC8839C0();
  }
  sub_1DC8819D8((uint64_t)v14, (uint64_t)v17);
  sub_1DC87E920((uint64_t)v17, (uint64_t)v14);
  if (!*((void *)&v15 + 1))
  {
    sub_1DC881978((uint64_t)v14);
    goto LABEL_9;
  }
  uint64_t v9 = sub_1DC87E988((uint64_t *)&unk_1EAA9C6E0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    sub_1DC881A40();
    uint64_t v10 = sub_1DC883884();
    sub_1DC883734(v10, v11);
    sub_1DC881978((uint64_t)v17);
    return;
  }
  uint64_t v13 = v9;
  a4(v14, v12);
  sub_1DC881978((uint64_t)v17);
  sub_1DC8818D0((uint64_t)v12);
  if (!v4) {
    sub_1DC883990(v14[0], v12[0], v12[1], v12[2], v13, v14[0], v14[1], v15, v16);
  }
}

uint64_t sub_1DC87E470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1DC87E6F4(a1, a2, a3, (void (*)(uint64_t, unint64_t))sub_1DC877EC4);
}

void sub_1DC87E49C()
{
  id v2 = (void *)sub_1DC8837C0();
  id v3 = sub_1DC883964((uint64_t)v2, sel_decodePropertyListForKey_);

  if (v3)
  {
    sub_1DC8839F0();
    uint64_t v4 = swift_unknownObjectRelease();
  }
  else
  {
    double v8 = sub_1DC8839C0();
  }
  uint64_t v9 = sub_1DC883A08(v4, v5, v6, v7, v8);
  sub_1DC8839D8(v9, v10, v11, v12);
  if (!*((void *)&v34 + 1))
  {
    sub_1DC881978((uint64_t)&v32);
    goto LABEL_9;
  }
  sub_1DC87E988((uint64_t *)&unk_1EAA9C6E0);
  if ((sub_1DC883710() & 1) == 0)
  {
LABEL_9:
    sub_1DC881A40();
    uint64_t v26 = sub_1DC883884();
    sub_1DC883734(v26, v27);
    sub_1DC881978((uint64_t)v40);
    return;
  }
  sub_1DC8836D0();
  sub_1DC87A474(v13, v14);
  sub_1DC883A20();
  sub_1DC8818D0((uint64_t)&v28);
  if (!v1)
  {
    double v23 = sub_1DC883C28(v15, v16, v17, v18, v19, v20, v21, v22, *(double *)&v28, *(double *)&v29, *(double *)&v30, *(double *)&v31, *(double *)&v32, *(double *)&v33, *(double *)&v34, *((double *)&v34 + 1), *(double *)&v35, v36, v37);
    sub_1DC8838EC(v24, v23, v28, v29, v30, v31, v32, v33, v34, v35);
    *(void *)(v0 + 56) = v25;
    *(void *)(v0 + 64) = v38;
    *(_OWORD *)(v0 + 72) = v39;
  }
}

id sub_1DC87E59C()
{
  uint64_t v1 = (void *)sub_1DC883C10();
  id v2 = sub_1DC883BBC((uint64_t)v1, sel_decodePropertyListForKey_);

  if (v2)
  {
    sub_1DC883BF8();
    uint64_t v3 = swift_unknownObjectRelease();
  }
  else
  {
    sub_1DC883BEC();
  }
  uint64_t v11 = sub_1DC883BA4(v3, v4, v5, v6, v7, v8, v9, v10, v24, v25, v26, v27, v28[0]);
  sub_1DC883BD4(v11, v12, v13, v14, v15, v16, v17, v18, v24, v25, v26, v27, v28[0]);
  if (!v27)
  {
    sub_1DC881978((uint64_t)&v24);
    goto LABEL_10;
  }
  id v2 = (id)sub_1DC87E988((uint64_t *)&unk_1EAA9C6E0);
  if ((sub_1DC883CE0() & 1) == 0)
  {
LABEL_10:
    sub_1DC881A40();
    uint64_t v21 = sub_1DC883884();
    sub_1DC883754(v21, v22);
    sub_1DC881978((uint64_t)v28);
    return v2;
  }
  sub_1DC88397C();
  id v20 = sub_1DC87A634(v19);
  if (!v0) {
    id v2 = v20;
  }
  sub_1DC881978((uint64_t)v28);
  sub_1DC8818D0((uint64_t)&v24);
  return v2;
}

uint64_t sub_1DC87E6C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1DC87E6F4(a1, a2, a3, (void (*)(uint64_t, unint64_t))sub_1DC877FE8);
}

uint64_t sub_1DC87E6F4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, unint64_t))
{
  uint64_t v5 = (void *)sub_1DCB87908();
  id v6 = sub_1DC883964((uint64_t)v5, sel_decodePropertyListForKey_);

  if (v6)
  {
    sub_1DCB88808();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v12 = 0u;
    long long v13 = 0u;
  }
  sub_1DC8819D8((uint64_t)&v12, (uint64_t)v14);
  sub_1DC87E920((uint64_t)v14, (uint64_t)&v12);
  if (*((void *)&v13 + 1))
  {
    uint64_t v7 = sub_1DC87E988((uint64_t *)&unk_1EAA9C6E0);
    if (sub_1DC883CBC())
    {
      *((void *)&v13 + 1) = v7;
      *(void *)&long long v12 = v11;
      sub_1DC87A1A0(&v12, a4);
      sub_1DC881978((uint64_t)v14);
      return sub_1DC8818D0((uint64_t)&v12);
    }
  }
  else
  {
    sub_1DC881978((uint64_t)&v12);
  }
  sub_1DC881A40();
  uint64_t v9 = sub_1DC883884();
  sub_1DC883754(v9, v10);
  return sub_1DC881978((uint64_t)v14);
}

void sub_1DC87E818(uint64_t a1, uint64_t a2)
{
}

void sub_1DC87E830(uint64_t a1, uint64_t a2)
{
}

void sub_1DC87E848(uint64_t a1, uint64_t a2)
{
}

void sub_1DC87E860(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1DC87E878(uint64_t a1, uint64_t a2)
{
  return sub_1DCADC754(a1, a2);
}

uint64_t sub_1DC87E890(uint64_t a1, uint64_t a2)
{
  return sub_1DCADC7E4(a1, a2);
}

void sub_1DC87E8A8(uint64_t a1, uint64_t a2)
{
}

void sub_1DC87E8C0(uint64_t a1, uint64_t a2)
{
}

void sub_1DC87E8D8(uint64_t a1, uint64_t a2)
{
}

void sub_1DC87E8F0(uint64_t a1, uint64_t a2)
{
}

void sub_1DC87E908(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1DC87E920(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1DC87E988(&qword_1EAA9CAB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1DC87E988(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

_OWORD *sub_1DC87E9CC(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1DC87E9DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for SNLKFSResult()
{
  return self;
}

uint64_t method lookup function for SNLKFSResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SNLKFSResult);
}

_WORD *sub_1DC87EA74(_WORD *result, _WORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t sub_1DC87EA84(unsigned __int16 *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 0xFFFF) <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if ((a2 + 0xFFFF) < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        return 0;
      }
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
  }
  return 0;
}

uint64_t sub_1DC87EAF4(uint64_t result, int a2, int a3)
{
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if ((a3 + 0xFFFF) < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    unsigned int v6 = ((a2 - 1) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 1;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        return result;
      case 2:
        *(_WORD *)(result + 2) = v6;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)(result + 2) = v6;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *(unsigned char *)(result + 2) = 0;
      break;
    case 2:
      *(_WORD *)(result + 2) = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1DC87EBA8);
    case 4:
      *(_DWORD *)(result + 2) = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for snaop_sdf_results_formatter_node_t(uint64_t a1)
{
}

__n128 initializeWithCopy for LogMelParameters(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for LogMelParameters(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 52))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
      BOOL v4 = v3 >= 2;
      int v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LogMelParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 52) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 52) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for SNLogMelParameters(uint64_t a1)
{
}

__n128 sub_1DC87ECB4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void type metadata accessor for snaop_sdf_async_output_node_t(uint64_t a1)
{
}

void *initializeBufferWithCopyOfBuffer for MovieRemix.DSPParameterTuple(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t storeEnumTagSinglePayload for MovieRemix.DSPParameterTuple(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

void type metadata accessor for os_unfair_recursive_lock_s(uint64_t a1)
{
}

void type metadata accessor for SNFeaturePrintType(uint64_t a1)
{
}

void type metadata accessor for SNClassifierIdentifier(uint64_t a1)
{
}

__n128 sub_1DC87ED4C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for snaop_sdf_memcpy_node_t(uint64_t a1)
{
}

void *sub_1DC87ED6C(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MovieRemix.DSPParameterTuple(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

void type metadata accessor for snaop_sdf_ebank_node_t(uint64_t a1)
{
}

_DWORD *sub_1DC87EDAC(_DWORD *result, _DWORD *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t sub_1DC87EDB8(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1DC87EDD8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 4) = v3;
  return result;
}

void type metadata accessor for snaop_sdf_int16_to_float_node_t(uint64_t a1)
{
}

void *sub_1DC87EE14(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x48E0uLL);
}

uint64_t sub_1DC87EE1C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 18656)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1DC87EE40(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 18648) = 0;
    *(void *)(result + 18640) = 0;
    *(void *)(result + 18632) = 0;
    *(void *)(result + 18624) = 0;
    *(void *)(result + 18616) = 0;
    *(void *)(result + 18608) = 0;
    *(void *)(result + 18600) = 0;
    *(void *)(result + 18592) = 0;
    *(void *)(result + 18584) = 0;
    *(void *)(result + 18576) = 0;
    *(void *)(result + 18568) = 0;
    *(void *)(result + 18560) = 0;
    *(void *)(result + 18552) = 0;
    *(void *)(result + 18544) = 0;
    *(void *)(result + 18536) = 0;
    *(void *)(result + 18528) = 0;
    *(void *)(result + 18520) = 0;
    *(void *)(result + 18512) = 0;
    *(void *)(result + 18504) = 0;
    *(void *)(result + 18496) = 0;
    *(void *)(result + 18488) = 0;
    *(void *)(result + 18480) = 0;
    *(void *)(result + 18472) = 0;
    *(void *)(result + 18464) = 0;
    *(void *)(result + 18456) = 0;
    *(void *)(result + 18448) = 0;
    *(void *)(result + 18440) = 0;
    *(void *)(result + 18432) = 0;
    *(void *)(result + 18424) = 0;
    *(void *)(result + 18416) = 0;
    *(void *)(result + 18408) = 0;
    *(void *)(result + 18400) = 0;
    *(void *)(result + 18392) = 0;
    *(void *)(result + 18384) = 0;
    *(void *)(result + 18376) = 0;
    *(void *)(result + 18368) = 0;
    *(void *)(result + 18360) = 0;
    *(void *)(result + 18352) = 0;
    *(void *)(result + 18344) = 0;
    *(void *)(result + 18336) = 0;
    *(void *)(result + 18328) = 0;
    *(void *)(result + 18320) = 0;
    *(void *)(result + 18312) = 0;
    *(void *)(result + 18304) = 0;
    *(void *)(result + 18296) = 0;
    *(void *)(result + 18288) = 0;
    *(void *)(result + 18280) = 0;
    *(void *)(result + 18272) = 0;
    *(void *)(result + 18264) = 0;
    *(void *)(result + 18256) = 0;
    *(void *)(result + 18248) = 0;
    *(void *)(result + 18240) = 0;
    *(void *)(result + 18232) = 0;
    *(void *)(result + 18224) = 0;
    *(void *)(result + 18216) = 0;
    *(void *)(result + 18208) = 0;
    *(void *)(result + 18200) = 0;
    *(void *)(result + 18192) = 0;
    *(void *)(result + 18184) = 0;
    *(void *)(result + 18176) = 0;
    *(void *)(result + 18168) = 0;
    *(void *)(result + 18160) = 0;
    *(void *)(result + 18152) = 0;
    *(void *)(result + 18144) = 0;
    *(void *)(result + 18136) = 0;
    *(void *)(result + 18128) = 0;
    *(void *)(result + 18120) = 0;
    *(void *)(result + 18112) = 0;
    *(void *)(result + 18104) = 0;
    *(void *)(result + 18096) = 0;
    *(void *)(result + 18088) = 0;
    *(void *)(result + 18080) = 0;
    *(void *)(result + 18072) = 0;
    *(void *)(result + 18064) = 0;
    *(void *)(result + 18056) = 0;
    *(void *)(result + 18048) = 0;
    *(void *)(result + 18040) = 0;
    *(void *)(result + 18032) = 0;
    *(void *)(result + 18024) = 0;
    *(void *)(result + 18016) = 0;
    *(void *)(result + 18008) = 0;
    *(void *)(result + 18000) = 0;
    *(void *)(result + 17992) = 0;
    *(void *)(result + 17984) = 0;
    *(void *)(result + 17976) = 0;
    *(void *)(result + 17968) = 0;
    *(void *)(result + 17960) = 0;
    *(void *)(result + 17952) = 0;
    *(void *)(result + 17944) = 0;
    *(void *)(result + 17936) = 0;
    *(void *)(result + 17928) = 0;
    *(void *)(result + 17920) = 0;
    *(void *)(result + 17912) = 0;
    *(void *)(result + 17904) = 0;
    *(void *)(result + 17896) = 0;
    *(void *)(result + 17888) = 0;
    *(void *)(result + 17880) = 0;
    *(void *)(result + 17872) = 0;
    *(void *)(result + 17864) = 0;
    *(void *)(result + 17856) = 0;
    *(void *)(result + 17848) = 0;
    *(void *)(result + 17840) = 0;
    *(void *)(result + 17832) = 0;
    *(void *)(result + 17824) = 0;
    *(void *)(result + 17816) = 0;
    *(void *)(result + 17808) = 0;
    *(void *)(result + 17800) = 0;
    *(void *)(result + 17792) = 0;
    *(void *)(result + 17784) = 0;
    *(void *)(result + 17776) = 0;
    *(void *)(result + 17768) = 0;
    *(void *)(result + 17760) = 0;
    *(void *)(result + 17752) = 0;
    *(void *)(result + 17744) = 0;
    *(void *)(result + 17736) = 0;
    *(void *)(result + 17728) = 0;
    *(void *)(result + 17720) = 0;
    *(void *)(result + 17712) = 0;
    *(void *)(result + 17704) = 0;
    *(void *)(result + 17696) = 0;
    *(void *)(result + 17688) = 0;
    *(void *)(result + 17680) = 0;
    *(void *)(result + 17672) = 0;
    *(void *)(result + 17664) = 0;
    *(void *)(result + 17656) = 0;
    *(void *)(result + 17648) = 0;
    *(void *)(result + 17640) = 0;
    *(void *)(result + 17632) = 0;
    *(void *)(result + 17624) = 0;
    *(void *)(result + 17616) = 0;
    *(void *)(result + 17608) = 0;
    *(void *)(result + 17600) = 0;
    *(void *)(result + 17592) = 0;
    *(void *)(result + 17584) = 0;
    *(void *)(result + 17576) = 0;
    *(void *)(result + 17568) = 0;
    *(void *)(result + 17560) = 0;
    *(void *)(result + 17552) = 0;
    *(void *)(result + 17544) = 0;
    *(void *)(result + 17536) = 0;
    *(void *)(result + 17528) = 0;
    *(void *)(result + 17520) = 0;
    *(void *)(result + 17512) = 0;
    *(void *)(result + 17504) = 0;
    *(void *)(result + 17496) = 0;
    *(void *)(result + 17488) = 0;
    *(void *)(result + 17480) = 0;
    *(void *)(result + 17472) = 0;
    *(void *)(result + 17464) = 0;
    *(void *)(result + 17456) = 0;
    *(void *)(result + 17448) = 0;
    *(void *)(result + 17440) = 0;
    *(void *)(result + 17432) = 0;
    *(void *)(result + 17424) = 0;
    *(void *)(result + 17416) = 0;
    *(void *)(result + 17408) = 0;
    *(void *)(result + 17400) = 0;
    *(void *)(result + 17392) = 0;
    *(void *)(result + 17384) = 0;
    *(void *)(result + 17376) = 0;
    *(void *)(result + 17368) = 0;
    *(void *)(result + 17360) = 0;
    *(void *)(result + 17352) = 0;
    *(void *)(result + 17344) = 0;
    *(void *)(result + 17336) = 0;
    *(void *)(result + 17328) = 0;
    *(void *)(result + 17320) = 0;
    *(void *)(result + 17312) = 0;
    *(void *)(result + 17304) = 0;
    *(void *)(result + 17296) = 0;
    *(void *)(result + 17288) = 0;
    *(void *)(result + 17280) = 0;
    *(void *)(result + 17272) = 0;
    *(void *)(result + 17264) = 0;
    *(void *)(result + 17256) = 0;
    *(void *)(result + 17248) = 0;
    *(void *)(result + 17240) = 0;
    *(void *)(result + 17232) = 0;
    *(void *)(result + 17224) = 0;
    *(void *)(result + 17216) = 0;
    *(void *)(result + 17208) = 0;
    *(void *)(result + 17200) = 0;
    *(void *)(result + 17192) = 0;
    *(void *)(result + 17184) = 0;
    *(void *)(result + 17176) = 0;
    *(void *)(result + 17168) = 0;
    *(void *)(result + 17160) = 0;
    *(void *)(result + 17152) = 0;
    *(void *)(result + 17144) = 0;
    *(void *)(result + 17136) = 0;
    *(void *)(result + 17128) = 0;
    *(void *)(result + 17120) = 0;
    *(void *)(result + 17112) = 0;
    *(void *)(result + 17104) = 0;
    *(void *)(result + 17096) = 0;
    *(void *)(result + 17088) = 0;
    *(void *)(result + 17080) = 0;
    *(void *)(result + 17072) = 0;
    *(void *)(result + 17064) = 0;
    *(void *)(result + 17056) = 0;
    *(void *)(result + 17048) = 0;
    *(void *)(result + 17040) = 0;
    *(void *)(result + 17032) = 0;
    *(void *)(result + 17024) = 0;
    *(void *)(result + 17016) = 0;
    *(void *)(result + 17008) = 0;
    *(void *)(result + 17000) = 0;
    *(void *)(result + 16992) = 0;
    *(void *)(result + 16984) = 0;
    *(void *)(result + 16976) = 0;
    *(void *)(result + 16968) = 0;
    *(void *)(result + 16960) = 0;
    *(void *)(result + 16952) = 0;
    *(void *)(result + 16944) = 0;
    *(void *)(result + 16936) = 0;
    *(void *)(result + 16928) = 0;
    *(void *)(result + 16920) = 0;
    *(void *)(result + 16912) = 0;
    *(void *)(result + 16904) = 0;
    *(void *)(result + 16896) = 0;
    *(void *)(result + 16888) = 0;
    *(void *)(result + 16880) = 0;
    *(void *)(result + 16872) = 0;
    *(void *)(result + 16864) = 0;
    *(void *)(result + 16856) = 0;
    *(void *)(result + 16848) = 0;
    *(void *)(result + 16840) = 0;
    *(void *)(result + 16832) = 0;
    *(void *)(result + 16824) = 0;
    *(void *)(result + 16816) = 0;
    *(void *)(result + 16808) = 0;
    *(void *)(result + 16800) = 0;
    *(void *)(result + 16792) = 0;
    *(void *)(result + 16784) = 0;
    *(void *)(result + 16776) = 0;
    *(void *)(result + 16768) = 0;
    *(void *)(result + 16760) = 0;
    *(void *)(result + 16752) = 0;
    *(void *)(result + 16744) = 0;
    *(void *)(result + 16736) = 0;
    *(void *)(result + 16728) = 0;
    *(void *)(result + 16720) = 0;
    *(void *)(result + 16712) = 0;
    *(void *)(result + 16704) = 0;
    *(void *)(result + 16696) = 0;
    *(void *)(result + 16688) = 0;
    *(void *)(result + 16680) = 0;
    *(void *)(result + 16672) = 0;
    *(void *)(result + 16664) = 0;
    *(void *)(result + 16656) = 0;
    *(void *)(result + 16344) = 0;
    *(void *)(result + 16392) = 0;
    *(void *)(result + 0x4000) = 0;
    *(void *)(result + 16376) = 0;
    *(void *)(result + 16368) = 0;
    *(void *)(result + 16360) = 0;
    *(void *)(result + 16352) = 0;
    *(void *)(result + 16440) = 0;
    *(void *)(result + 16432) = 0;
    *(void *)(result + 16424) = 0;
    *(void *)(result + 16416) = 0;
    *(void *)(result + 16408) = 0;
    *(void *)(result + 16400) = 0;
    *(void *)(result + 16488) = 0;
    *(void *)(result + 16480) = 0;
    *(void *)(result + 16472) = 0;
    *(void *)(result + 16464) = 0;
    *(void *)(result + 16456) = 0;
    *(void *)(result + 16448) = 0;
    *(void *)(result + 16536) = 0;
    *(void *)(result + 16528) = 0;
    *(void *)(result + 16520) = 0;
    *(void *)(result + 16512) = 0;
    *(void *)(result + 16504) = 0;
    *(void *)(result + 16496) = 0;
    *(void *)(result + 16584) = 0;
    *(void *)(result + 16576) = 0;
    *(void *)(result + 16568) = 0;
    *(void *)(result + 16560) = 0;
    *(void *)(result + 16552) = 0;
    *(void *)(result + 16544) = 0;
    *(void *)(result + 16648) = 0;
    *(void *)(result + 16624) = 0;
    *(void *)(result + 16616) = 0;
    *(void *)(result + 16608) = 0;
    *(void *)(result + 16600) = 0;
    *(void *)(result + 16592) = 0;
    *(void *)(result + 16640) = 0;
    *(void *)(result + 16632) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 12536) = 0u;
    *(_OWORD *)(result + 12520) = 0u;
    *(_OWORD *)(result + 12504) = 0u;
    *(_OWORD *)(result + 12488) = 0u;
    *(_OWORD *)(result + 12472) = 0u;
    *(_OWORD *)(result + 12456) = 0u;
    *(_OWORD *)(result + 12440) = 0u;
    *(_OWORD *)(result + 12424) = 0u;
    *(_OWORD *)(result + 12408) = 0u;
    *(_OWORD *)(result + 12392) = 0u;
    *(_OWORD *)(result + 12376) = 0u;
    *(_OWORD *)(result + 12360) = 0u;
    *(_OWORD *)(result + 12344) = 0u;
    *(_OWORD *)(result + 12328) = 0u;
    *(_OWORD *)(result + 12312) = 0u;
    *(_OWORD *)(result + 12296) = 0u;
    *(_OWORD *)(result + 8440) = 0u;
    *(_OWORD *)(result + 8424) = 0u;
    *(_OWORD *)(result + 8408) = 0u;
    *(_OWORD *)(result + 8392) = 0u;
    *(_OWORD *)(result + 8376) = 0u;
    *(_OWORD *)(result + 8360) = 0u;
    *(_OWORD *)(result + 8344) = 0u;
    *(_OWORD *)(result + 8328) = 0u;
    *(_OWORD *)(result + 8312) = 0u;
    *(_OWORD *)(result + 8296) = 0u;
    *(_OWORD *)(result + 8280) = 0u;
    *(_OWORD *)(result + 8264) = 0u;
    *(_OWORD *)(result + 8248) = 0u;
    *(_OWORD *)(result + 8232) = 0u;
    *(_OWORD *)(result + 8216) = 0u;
    *(_OWORD *)(result + 8200) = 0u;
    *(_OWORD *)(result + 4344) = 0u;
    *(_OWORD *)(result + 4328) = 0u;
    *(_OWORD *)(result + 4312) = 0u;
    *(_OWORD *)(result + 4296) = 0u;
    *(_OWORD *)(result + 4280) = 0u;
    *(_OWORD *)(result + 4264) = 0u;
    *(_OWORD *)(result + 4248) = 0u;
    *(_OWORD *)(result + 4232) = 0u;
    *(_OWORD *)(result + 4216) = 0u;
    *(_OWORD *)(result + 4200) = 0u;
    *(_OWORD *)(result + 4184) = 0u;
    *(_OWORD *)(result + 4168) = 0u;
    *(_OWORD *)(result + 4152) = 0u;
    *(_OWORD *)(result + 4136) = 0u;
    *(_OWORD *)(result + 4120) = 0u;
    *(_OWORD *)(result + 4104) = 0u;
    *(_OWORD *)(result + 4088) = 0u;
    *(_OWORD *)(result + 4072) = 0u;
    *(_OWORD *)(result + 4056) = 0u;
    *(_OWORD *)(result + 4040) = 0u;
    *(_OWORD *)(result + 4024) = 0u;
    *(_OWORD *)(result + 4008) = 0u;
    *(_OWORD *)(result + 3992) = 0u;
    *(_OWORD *)(result + 3976) = 0u;
    *(_OWORD *)(result + 3960) = 0u;
    *(_OWORD *)(result + 3944) = 0u;
    *(_OWORD *)(result + 3928) = 0u;
    *(_OWORD *)(result + 3912) = 0u;
    *(_OWORD *)(result + 3896) = 0u;
    *(_OWORD *)(result + 3880) = 0u;
    *(_OWORD *)(result + 3864) = 0u;
    *(_OWORD *)(result + 3848) = 0u;
    *(_OWORD *)(result + 3832) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 12840) = 0u;
    *(_OWORD *)(result + 12792) = 0u;
    *(_OWORD *)(result + 12776) = 0u;
    *(_OWORD *)(result + 12760) = 0u;
    *(_OWORD *)(result + 12744) = 0u;
    *(_OWORD *)(result + 12728) = 0u;
    *(_OWORD *)(result + 12712) = 0u;
    *(_OWORD *)(result + 12696) = 0u;
    *(_OWORD *)(result + 12680) = 0u;
    *(_OWORD *)(result + 12664) = 0u;
    *(_OWORD *)(result + 12648) = 0u;
    *(_OWORD *)(result + 12632) = 0u;
    *(_OWORD *)(result + 12616) = 0u;
    *(_OWORD *)(result + 12600) = 0u;
    *(_OWORD *)(result + 12584) = 0u;
    *(_OWORD *)(result + 12568) = 0u;
    *(_OWORD *)(result + 12552) = 0u;
    *(_OWORD *)(result + 8744) = 0u;
    *(_OWORD *)(result + 8728) = 0u;
    *(_OWORD *)(result + 8712) = 0u;
    *(_OWORD *)(result + 8840) = 0u;
    *(_OWORD *)(result + 8824) = 0u;
    *(_OWORD *)(result + 8808) = 0u;
    *(_OWORD *)(result + 8792) = 0u;
    *(_OWORD *)(result + 8776) = 0u;
    *(_OWORD *)(result + 8760) = 0u;
    *(_OWORD *)(result + 8952) = 0u;
    *(_OWORD *)(result + 8936) = 0u;
    *(_OWORD *)(result + 8904) = 0u;
    *(_OWORD *)(result + 8888) = 0u;
    *(_OWORD *)(result + 8872) = 0u;
    *(_OWORD *)(result + 8856) = 0u;
    *(_OWORD *)(result + 8920) = 0u;
    *(_OWORD *)(result + 9000) = 0u;
    *(_OWORD *)(result + 8984) = 0u;
    *(_OWORD *)(result + 8968) = 0u;
    *(_OWORD *)(result + 9096) = 0u;
    *(_OWORD *)(result + 9080) = 0u;
    *(_OWORD *)(result + 9064) = 0u;
    *(_OWORD *)(result + 9048) = 0u;
    *(_OWORD *)(result + 9032) = 0u;
    *(_OWORD *)(result + 9016) = 0u;
    *(_OWORD *)(result + 9208) = 0u;
    *(_OWORD *)(result + 9192) = 0u;
    *(_OWORD *)(result + 9160) = 0u;
    *(_OWORD *)(result + 9144) = 0u;
    *(_OWORD *)(result + 9128) = 0u;
    *(_OWORD *)(result + 9112) = 0u;
    *(_OWORD *)(result + 9176) = 0u;
    *(_OWORD *)(result + 9256) = 0u;
    *(_OWORD *)(result + 9240) = 0u;
    *(_OWORD *)(result + 9224) = 0u;
    *(_OWORD *)(result + 9352) = 0u;
    *(_OWORD *)(result + 9336) = 0u;
    *(_OWORD *)(result + 9320) = 0u;
    *(_OWORD *)(result + 9304) = 0u;
    *(_OWORD *)(result + 9288) = 0u;
    *(_OWORD *)(result + 9272) = 0u;
    *(_OWORD *)(result + 9464) = 0u;
    *(_OWORD *)(result + 9448) = 0u;
    *(_OWORD *)(result + 9416) = 0u;
    *(_OWORD *)(result + 9400) = 0u;
    *(_OWORD *)(result + 9384) = 0u;
    *(_OWORD *)(result + 9368) = 0u;
    *(_OWORD *)(result + 9432) = 0u;
    *(_OWORD *)(result + 9512) = 0u;
    *(_OWORD *)(result + 9496) = 0u;
    *(_OWORD *)(result + 9480) = 0u;
    *(_OWORD *)(result + 9608) = 0u;
    *(_OWORD *)(result + 9592) = 0u;
    *(_OWORD *)(result + 9576) = 0u;
    *(_OWORD *)(result + 9560) = 0u;
    *(_OWORD *)(result + 9544) = 0u;
    *(_OWORD *)(result + 9528) = 0u;
    *(_OWORD *)(result + 9720) = 0u;
    *(_OWORD *)(result + 9704) = 0u;
    *(_OWORD *)(result + 9672) = 0u;
    *(_OWORD *)(result + 9656) = 0u;
    *(_OWORD *)(result + 9640) = 0u;
    *(_OWORD *)(result + 9624) = 0u;
    *(_OWORD *)(result + 9688) = 0u;
    *(_OWORD *)(result + 9768) = 0u;
    *(_OWORD *)(result + 9752) = 0u;
    *(_OWORD *)(result + 9736) = 0u;
    *(_OWORD *)(result + 9864) = 0u;
    *(_OWORD *)(result + 9848) = 0u;
    *(_OWORD *)(result + 9832) = 0u;
    *(_OWORD *)(result + 9816) = 0u;
    *(_OWORD *)(result + 9800) = 0u;
    *(_OWORD *)(result + 9784) = 0u;
    *(_OWORD *)(result + 9976) = 0u;
    *(_OWORD *)(result + 9960) = 0u;
    *(_OWORD *)(result + 9928) = 0u;
    *(_OWORD *)(result + 9912) = 0u;
    *(_OWORD *)(result + 9896) = 0u;
    *(_OWORD *)(result + 9880) = 0u;
    *(_OWORD *)(result + 9944) = 0u;
    *(_OWORD *)(result + 10024) = 0u;
    *(_OWORD *)(result + 10008) = 0u;
    *(_OWORD *)(result + 9992) = 0u;
    *(_OWORD *)(result + 10120) = 0u;
    *(_OWORD *)(result + 10104) = 0u;
    *(_OWORD *)(result + 10088) = 0u;
    *(_OWORD *)(result + 10072) = 0u;
    *(_OWORD *)(result + 10056) = 0u;
    *(_OWORD *)(result + 10040) = 0u;
    *(_OWORD *)(result + 10232) = 0u;
    *(_OWORD *)(result + 10216) = 0u;
    *(_OWORD *)(result + 10184) = 0u;
    *(_OWORD *)(result + 10168) = 0u;
    *(_OWORD *)(result + 10152) = 0u;
    *(_OWORD *)(result + 10136) = 0u;
    *(_OWORD *)(result + 10200) = 0u;
    *(_OWORD *)(result + 10280) = 0u;
    *(_OWORD *)(result + 10264) = 0u;
    *(_OWORD *)(result + 10248) = 0u;
    *(_OWORD *)(result + 10376) = 0u;
    *(_OWORD *)(result + 10360) = 0u;
    *(_OWORD *)(result + 10344) = 0u;
    *(_OWORD *)(result + 10328) = 0u;
    *(_OWORD *)(result + 10312) = 0u;
    *(_OWORD *)(result + 10296) = 0u;
    *(_OWORD *)(result + 10488) = 0u;
    *(_OWORD *)(result + 10472) = 0u;
    *(_OWORD *)(result + 10440) = 0u;
    *(_OWORD *)(result + 10424) = 0u;
    *(_OWORD *)(result + 10408) = 0u;
    *(_OWORD *)(result + 10392) = 0u;
    *(_OWORD *)(result + 10456) = 0u;
    *(_OWORD *)(result + 10536) = 0u;
    *(_OWORD *)(result + 10520) = 0u;
    *(_OWORD *)(result + 10504) = 0u;
    *(_OWORD *)(result + 10632) = 0u;
    *(_OWORD *)(result + 10616) = 0u;
    *(_OWORD *)(result + 10600) = 0u;
    *(_OWORD *)(result + 10584) = 0u;
    *(_OWORD *)(result + 10568) = 0u;
    *(_OWORD *)(result + 10552) = 0u;
    *(_OWORD *)(result + 10744) = 0u;
    *(_OWORD *)(result + 10728) = 0u;
    *(_OWORD *)(result + 10696) = 0u;
    *(_OWORD *)(result + 10680) = 0u;
    *(_OWORD *)(result + 10664) = 0u;
    *(_OWORD *)(result + 10648) = 0u;
    *(_OWORD *)(result + 10712) = 0u;
    *(_OWORD *)(result + 10792) = 0u;
    *(_OWORD *)(result + 10776) = 0u;
    *(_OWORD *)(result + 10760) = 0u;
    *(_OWORD *)(result + 10888) = 0u;
    *(_OWORD *)(result + 10872) = 0u;
    *(_OWORD *)(result + 10856) = 0u;
    *(_OWORD *)(result + 10840) = 0u;
    *(_OWORD *)(result + 10824) = 0u;
    *(_OWORD *)(result + 10808) = 0u;
    *(_OWORD *)(result + 11000) = 0u;
    *(_OWORD *)(result + 10984) = 0u;
    *(_OWORD *)(result + 10952) = 0u;
    *(_OWORD *)(result + 10936) = 0u;
    *(_OWORD *)(result + 10920) = 0u;
    *(_OWORD *)(result + 10904) = 0u;
    *(_OWORD *)(result + 10968) = 0u;
    *(_OWORD *)(result + 11048) = 0u;
    *(_OWORD *)(result + 11032) = 0u;
    *(_OWORD *)(result + 11016) = 0u;
    *(_OWORD *)(result + 11144) = 0u;
    *(_OWORD *)(result + 11128) = 0u;
    *(_OWORD *)(result + 11112) = 0u;
    *(_OWORD *)(result + 11096) = 0u;
    *(_OWORD *)(result + 11080) = 0u;
    *(_OWORD *)(result + 11064) = 0u;
    *(_OWORD *)(result + 11256) = 0u;
    *(_OWORD *)(result + 11240) = 0u;
    *(_OWORD *)(result + 11208) = 0u;
    *(_OWORD *)(result + 11192) = 0u;
    *(_OWORD *)(result + 11176) = 0u;
    *(_OWORD *)(result + 11160) = 0u;
    *(_OWORD *)(result + 11224) = 0u;
    *(_OWORD *)(result + 11304) = 0u;
    *(_OWORD *)(result + 11288) = 0u;
    *(_OWORD *)(result + 11272) = 0u;
    *(_OWORD *)(result + 11400) = 0u;
    *(_OWORD *)(result + 11384) = 0u;
    *(_OWORD *)(result + 11368) = 0u;
    *(_OWORD *)(result + 11352) = 0u;
    *(_OWORD *)(result + 11336) = 0u;
    *(_OWORD *)(result + 11320) = 0u;
    *(_OWORD *)(result + 11512) = 0u;
    *(_OWORD *)(result + 11496) = 0u;
    *(_OWORD *)(result + 11464) = 0u;
    *(_OWORD *)(result + 11448) = 0u;
    *(_OWORD *)(result + 11432) = 0u;
    *(_OWORD *)(result + 11416) = 0u;
    *(_OWORD *)(result + 11480) = 0u;
    *(_OWORD *)(result + 11560) = 0u;
    *(_OWORD *)(result + 11544) = 0u;
    *(_OWORD *)(result + 11528) = 0u;
    *(_OWORD *)(result + 11656) = 0u;
    *(_OWORD *)(result + 11640) = 0u;
    *(_OWORD *)(result + 11624) = 0u;
    *(_OWORD *)(result + 11608) = 0u;
    *(_OWORD *)(result + 11592) = 0u;
    *(_OWORD *)(result + 11576) = 0u;
    *(_OWORD *)(result + 11768) = 0u;
    *(_OWORD *)(result + 11752) = 0u;
    *(_OWORD *)(result + 11720) = 0u;
    *(_OWORD *)(result + 11704) = 0u;
    *(_OWORD *)(result + 11688) = 0u;
    *(_OWORD *)(result + 11672) = 0u;
    *(_OWORD *)(result + 11736) = 0u;
    *(_OWORD *)(result + 11816) = 0u;
    *(_OWORD *)(result + 11800) = 0u;
    *(_OWORD *)(result + 11784) = 0u;
    *(_OWORD *)(result + 11912) = 0u;
    *(_OWORD *)(result + 11896) = 0u;
    *(_OWORD *)(result + 11880) = 0u;
    *(_OWORD *)(result + 11864) = 0u;
    *(_OWORD *)(result + 11848) = 0u;
    *(_OWORD *)(result + 11832) = 0u;
    *(_OWORD *)(result + 12024) = 0u;
    *(_OWORD *)(result + 12008) = 0u;
    *(_OWORD *)(result + 11976) = 0u;
    *(_OWORD *)(result + 11960) = 0u;
    *(_OWORD *)(result + 11944) = 0u;
    *(_OWORD *)(result + 11928) = 0u;
    *(_OWORD *)(result + 11992) = 0u;
    *(_OWORD *)(result + 12072) = 0u;
    *(_OWORD *)(result + 12056) = 0u;
    *(_OWORD *)(result + 12040) = 0u;
    *(_OWORD *)(result + 12168) = 0u;
    *(_OWORD *)(result + 12152) = 0u;
    *(_OWORD *)(result + 12136) = 0u;
    *(_OWORD *)(result + 12120) = 0u;
    *(_OWORD *)(result + 12104) = 0u;
    *(_OWORD *)(result + 12088) = 0u;
    *(_OWORD *)(result + 12248) = 0u;
    *(_OWORD *)(result + 12232) = 0u;
    *(_OWORD *)(result + 12216) = 0u;
    *(_OWORD *)(result + 12200) = 0u;
    *(_OWORD *)(result + 12184) = 0u;
    *(_OWORD *)(result + 12280) = 0u;
    *(_OWORD *)(result + 12264) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 12904) = 0u;
    *(_OWORD *)(result + 12888) = 0u;
    *(_OWORD *)(result + 12872) = 0u;
    *(_OWORD *)(result + 12856) = 0u;
    *(_OWORD *)(result + 12824) = 0u;
    *(_OWORD *)(result + 12808) = 0u;
    *(_OWORD *)(result + 13048) = 0u;
    *(_OWORD *)(result + 13032) = 0u;
    *(_OWORD *)(result + 12968) = 0u;
    *(_OWORD *)(result + 12952) = 0u;
    *(_OWORD *)(result + 12936) = 0u;
    *(_OWORD *)(result + 12920) = 0u;
    *(_OWORD *)(result + 13016) = 0u;
    *(_OWORD *)(result + 13000) = 0u;
    *(_OWORD *)(result + 12984) = 0u;
    *(_OWORD *)(result + 13064) = 0u;
    *(_OWORD *)(result + 13160) = 0u;
    *(_OWORD *)(result + 13144) = 0u;
    *(_OWORD *)(result + 13128) = 0u;
    *(_OWORD *)(result + 13112) = 0u;
    *(_OWORD *)(result + 13096) = 0u;
    *(_OWORD *)(result + 13080) = 0u;
    *(_OWORD *)(result + 13304) = 0u;
    *(_OWORD *)(result + 13288) = 0u;
    *(_OWORD *)(result + 13224) = 0u;
    *(_OWORD *)(result + 13208) = 0u;
    *(_OWORD *)(result + 13192) = 0u;
    *(_OWORD *)(result + 13176) = 0u;
    *(_OWORD *)(result + 13272) = 0u;
    *(_OWORD *)(result + 13256) = 0u;
    *(_OWORD *)(result + 13240) = 0u;
    *(_OWORD *)(result + 13320) = 0u;
    *(_OWORD *)(result + 13416) = 0u;
    *(_OWORD *)(result + 13400) = 0u;
    *(_OWORD *)(result + 13384) = 0u;
    *(_OWORD *)(result + 13368) = 0u;
    *(_OWORD *)(result + 13352) = 0u;
    *(_OWORD *)(result + 13336) = 0u;
    *(_OWORD *)(result + 13560) = 0u;
    *(_OWORD *)(result + 13544) = 0u;
    *(_OWORD *)(result + 13480) = 0u;
    *(_OWORD *)(result + 13464) = 0u;
    *(_OWORD *)(result + 13448) = 0u;
    *(_OWORD *)(result + 13432) = 0u;
    *(_OWORD *)(result + 13528) = 0u;
    *(_OWORD *)(result + 13512) = 0u;
    *(_OWORD *)(result + 13496) = 0u;
    *(_OWORD *)(result + 13576) = 0u;
    *(_OWORD *)(result + 13672) = 0u;
    *(_OWORD *)(result + 13656) = 0u;
    *(_OWORD *)(result + 13640) = 0u;
    *(_OWORD *)(result + 13624) = 0u;
    *(_OWORD *)(result + 13608) = 0u;
    *(_OWORD *)(result + 13592) = 0u;
    *(_OWORD *)(result + 13816) = 0u;
    *(_OWORD *)(result + 13800) = 0u;
    *(_OWORD *)(result + 13736) = 0u;
    *(_OWORD *)(result + 13720) = 0u;
    *(_OWORD *)(result + 13704) = 0u;
    *(_OWORD *)(result + 13688) = 0u;
    *(_OWORD *)(result + 13784) = 0u;
    *(_OWORD *)(result + 13768) = 0u;
    *(_OWORD *)(result + 13752) = 0u;
    *(_OWORD *)(result + 13832) = 0u;
    *(_OWORD *)(result + 13928) = 0u;
    *(_OWORD *)(result + 13912) = 0u;
    *(_OWORD *)(result + 13896) = 0u;
    *(_OWORD *)(result + 13880) = 0u;
    *(_OWORD *)(result + 13864) = 0u;
    *(_OWORD *)(result + 13848) = 0u;
    *(_OWORD *)(result + 14072) = 0u;
    *(_OWORD *)(result + 14056) = 0u;
    *(_OWORD *)(result + 13992) = 0u;
    *(_OWORD *)(result + 13976) = 0u;
    *(_OWORD *)(result + 13960) = 0u;
    *(_OWORD *)(result + 13944) = 0u;
    *(_OWORD *)(result + 14040) = 0u;
    *(_OWORD *)(result + 14024) = 0u;
    *(_OWORD *)(result + 14008) = 0u;
    *(_OWORD *)(result + 14088) = 0u;
    *(_OWORD *)(result + 14184) = 0u;
    *(_OWORD *)(result + 14168) = 0u;
    *(_OWORD *)(result + 14152) = 0u;
    *(_OWORD *)(result + 14136) = 0u;
    *(_OWORD *)(result + 14120) = 0u;
    *(_OWORD *)(result + 14104) = 0u;
    *(_OWORD *)(result + 14328) = 0u;
    *(_OWORD *)(result + 14312) = 0u;
    *(_OWORD *)(result + 14248) = 0u;
    *(_OWORD *)(result + 14232) = 0u;
    *(_OWORD *)(result + 14216) = 0u;
    *(_OWORD *)(result + 14200) = 0u;
    *(_OWORD *)(result + 14296) = 0u;
    *(_OWORD *)(result + 14280) = 0u;
    *(_OWORD *)(result + 14264) = 0u;
    *(_OWORD *)(result + 14344) = 0u;
    *(_OWORD *)(result + 14440) = 0u;
    *(_OWORD *)(result + 14424) = 0u;
    *(_OWORD *)(result + 14408) = 0u;
    *(_OWORD *)(result + 14392) = 0u;
    *(_OWORD *)(result + 14376) = 0u;
    *(_OWORD *)(result + 14360) = 0u;
    *(_OWORD *)(result + 14584) = 0u;
    *(_OWORD *)(result + 14568) = 0u;
    *(_OWORD *)(result + 14504) = 0u;
    *(_OWORD *)(result + 14488) = 0u;
    *(_OWORD *)(result + 14472) = 0u;
    *(_OWORD *)(result + 14456) = 0u;
    *(_OWORD *)(result + 14552) = 0u;
    *(_OWORD *)(result + 14536) = 0u;
    *(_OWORD *)(result + 14520) = 0u;
    *(_OWORD *)(result + 14600) = 0u;
    *(_OWORD *)(result + 14696) = 0u;
    *(_OWORD *)(result + 14680) = 0u;
    *(_OWORD *)(result + 14664) = 0u;
    *(_OWORD *)(result + 14648) = 0u;
    *(_OWORD *)(result + 14632) = 0u;
    *(_OWORD *)(result + 14616) = 0u;
    *(_OWORD *)(result + 14840) = 0u;
    *(_OWORD *)(result + 14824) = 0u;
    *(_OWORD *)(result + 14760) = 0u;
    *(_OWORD *)(result + 14744) = 0u;
    *(_OWORD *)(result + 14728) = 0u;
    *(_OWORD *)(result + 14712) = 0u;
    *(_OWORD *)(result + 14808) = 0u;
    *(_OWORD *)(result + 14792) = 0u;
    *(_OWORD *)(result + 14776) = 0u;
    *(_OWORD *)(result + 14856) = 0u;
    *(_OWORD *)(result + 14952) = 0u;
    *(_OWORD *)(result + 14936) = 0u;
    *(_OWORD *)(result + 14920) = 0u;
    *(_OWORD *)(result + 14904) = 0u;
    *(_OWORD *)(result + 14888) = 0u;
    *(_OWORD *)(result + 14872) = 0u;
    *(_OWORD *)(result + 15096) = 0u;
    *(_OWORD *)(result + 15080) = 0u;
    *(_OWORD *)(result + 15016) = 0u;
    *(_OWORD *)(result + 15000) = 0u;
    *(_OWORD *)(result + 14984) = 0u;
    *(_OWORD *)(result + 14968) = 0u;
    *(_OWORD *)(result + 15064) = 0u;
    *(_OWORD *)(result + 15048) = 0u;
    *(_OWORD *)(result + 15032) = 0u;
    *(_OWORD *)(result + 15112) = 0u;
    *(_OWORD *)(result + 15208) = 0u;
    *(_OWORD *)(result + 15192) = 0u;
    *(_OWORD *)(result + 15176) = 0u;
    *(_OWORD *)(result + 15160) = 0u;
    *(_OWORD *)(result + 15144) = 0u;
    *(_OWORD *)(result + 15128) = 0u;
    *(_OWORD *)(result + 15352) = 0u;
    *(_OWORD *)(result + 15336) = 0u;
    *(_OWORD *)(result + 15272) = 0u;
    *(_OWORD *)(result + 15256) = 0u;
    *(_OWORD *)(result + 15240) = 0u;
    *(_OWORD *)(result + 15224) = 0u;
    *(_OWORD *)(result + 15320) = 0u;
    *(_OWORD *)(result + 15304) = 0u;
    *(_OWORD *)(result + 15288) = 0u;
    *(_OWORD *)(result + 15368) = 0u;
    *(_OWORD *)(result + 15464) = 0u;
    *(_OWORD *)(result + 15448) = 0u;
    *(_OWORD *)(result + 15432) = 0u;
    *(_OWORD *)(result + 15416) = 0u;
    *(_OWORD *)(result + 15400) = 0u;
    *(_OWORD *)(result + 15384) = 0u;
    *(_OWORD *)(result + 15608) = 0u;
    *(_OWORD *)(result + 15592) = 0u;
    *(_OWORD *)(result + 15528) = 0u;
    *(_OWORD *)(result + 15512) = 0u;
    *(_OWORD *)(result + 15496) = 0u;
    *(_OWORD *)(result + 15480) = 0u;
    *(_OWORD *)(result + 15576) = 0u;
    *(_OWORD *)(result + 15560) = 0u;
    *(_OWORD *)(result + 15544) = 0u;
    *(_OWORD *)(result + 15624) = 0u;
    *(_OWORD *)(result + 15720) = 0u;
    *(_OWORD *)(result + 15704) = 0u;
    *(_OWORD *)(result + 15688) = 0u;
    *(_OWORD *)(result + 15672) = 0u;
    *(_OWORD *)(result + 15656) = 0u;
    *(_OWORD *)(result + 15640) = 0u;
    *(_OWORD *)(result + 15864) = 0u;
    *(_OWORD *)(result + 15848) = 0u;
    *(_OWORD *)(result + 15784) = 0u;
    *(_OWORD *)(result + 15768) = 0u;
    *(_OWORD *)(result + 15752) = 0u;
    *(_OWORD *)(result + 15736) = 0u;
    *(_OWORD *)(result + 15832) = 0u;
    *(_OWORD *)(result + 15816) = 0u;
    *(_OWORD *)(result + 15800) = 0u;
    *(_OWORD *)(result + 15880) = 0u;
    *(_OWORD *)(result + 15976) = 0u;
    *(_OWORD *)(result + 15960) = 0u;
    *(_OWORD *)(result + 15944) = 0u;
    *(_OWORD *)(result + 15928) = 0u;
    *(_OWORD *)(result + 15912) = 0u;
    *(_OWORD *)(result + 15896) = 0u;
    *(_OWORD *)(result + 16120) = 0u;
    *(_OWORD *)(result + 16104) = 0u;
    *(_OWORD *)(result + 16040) = 0u;
    *(_OWORD *)(result + 16024) = 0u;
    *(_OWORD *)(result + 16008) = 0u;
    *(_OWORD *)(result + 15992) = 0u;
    *(_OWORD *)(result + 16088) = 0u;
    *(_OWORD *)(result + 16072) = 0u;
    *(_OWORD *)(result + 16056) = 0u;
    *(_OWORD *)(result + 16136) = 0u;
    *(_OWORD *)(result + 16232) = 0u;
    *(_OWORD *)(result + 16216) = 0u;
    *(_OWORD *)(result + 16200) = 0u;
    *(_OWORD *)(result + 16184) = 0u;
    *(_OWORD *)(result + 16168) = 0u;
    *(_OWORD *)(result + 16152) = 0u;
    *(_OWORD *)(result + 16328) = 0u;
    *(_OWORD *)(result + 16312) = 0u;
    *(_OWORD *)(result + 16296) = 0u;
    *(_OWORD *)(result + 16280) = 0u;
    *(_OWORD *)(result + 16264) = 0u;
    *(_OWORD *)(result + 16248) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 8696) = 0u;
    *(_OWORD *)(result + 8680) = 0u;
    *(_OWORD *)(result + 8664) = 0u;
    *(_OWORD *)(result + 8648) = 0u;
    *(_OWORD *)(result + 8632) = 0u;
    *(_OWORD *)(result + 8616) = 0u;
    *(_OWORD *)(result + 8600) = 0u;
    *(_OWORD *)(result + 8584) = 0u;
    *(_OWORD *)(result + 8568) = 0u;
    *(_OWORD *)(result + 8552) = 0u;
    *(_OWORD *)(result + 8536) = 0u;
    *(_OWORD *)(result + 8520) = 0u;
    *(_OWORD *)(result + 8504) = 0u;
    *(_OWORD *)(result + 8488) = 0u;
    *(_OWORD *)(result + 8472) = 0u;
    *(_OWORD *)(result + 8456) = 0u;
    *(_OWORD *)(result + 8184) = 0u;
    *(_OWORD *)(result + 8168) = 0u;
    *(_OWORD *)(result + 8152) = 0u;
    *(_OWORD *)(result + 8136) = 0u;
    *(_OWORD *)(result + 8120) = 0u;
    *(_OWORD *)(result + 8104) = 0u;
    *(_OWORD *)(result + 8088) = 0u;
    *(_OWORD *)(result + 8072) = 0u;
    *(_OWORD *)(result + 8056) = 0u;
    *(_OWORD *)(result + 8040) = 0u;
    *(_OWORD *)(result + 8024) = 0u;
    *(_OWORD *)(result + 8008) = 0u;
    *(_OWORD *)(result + 7992) = 0u;
    *(_OWORD *)(result + 7976) = 0u;
    *(_OWORD *)(result + 7960) = 0u;
    *(_OWORD *)(result + 7944) = 0u;
    *(_OWORD *)(result + 7928) = 0u;
    *(_OWORD *)(result + 7912) = 0u;
    *(_OWORD *)(result + 7896) = 0u;
    *(_OWORD *)(result + 7880) = 0u;
    *(_OWORD *)(result + 7864) = 0u;
    *(_OWORD *)(result + 7848) = 0u;
    *(_OWORD *)(result + 7832) = 0u;
    *(_OWORD *)(result + 7816) = 0u;
    *(_OWORD *)(result + 7800) = 0u;
    *(_OWORD *)(result + 7784) = 0u;
    *(_OWORD *)(result + 7768) = 0u;
    *(_OWORD *)(result + 7752) = 0u;
    *(_OWORD *)(result + 7736) = 0u;
    *(_OWORD *)(result + 7720) = 0u;
    *(_OWORD *)(result + 7704) = 0u;
    *(_OWORD *)(result + 7688) = 0u;
    *(_OWORD *)(result + 7672) = 0u;
    *(_OWORD *)(result + 7656) = 0u;
    *(_OWORD *)(result + 7640) = 0u;
    *(_OWORD *)(result + 7624) = 0u;
    *(_OWORD *)(result + 7608) = 0u;
    *(_OWORD *)(result + 7592) = 0u;
    *(_OWORD *)(result + 7576) = 0u;
    *(_OWORD *)(result + 7560) = 0u;
    *(_OWORD *)(result + 7544) = 0u;
    *(_OWORD *)(result + 7528) = 0u;
    *(_OWORD *)(result + 7512) = 0u;
    *(_OWORD *)(result + 7496) = 0u;
    *(_OWORD *)(result + 7480) = 0u;
    *(_OWORD *)(result + 7464) = 0u;
    *(_OWORD *)(result + 7448) = 0u;
    *(_OWORD *)(result + 7432) = 0u;
    *(_OWORD *)(result + 7416) = 0u;
    *(_OWORD *)(result + 7400) = 0u;
    *(_OWORD *)(result + 7384) = 0u;
    *(_OWORD *)(result + 7368) = 0u;
    *(_OWORD *)(result + 7352) = 0u;
    *(_OWORD *)(result + 7336) = 0u;
    *(_OWORD *)(result + 7320) = 0u;
    *(_OWORD *)(result + 7304) = 0u;
    *(_OWORD *)(result + 7288) = 0u;
    *(_OWORD *)(result + 7272) = 0u;
    *(_OWORD *)(result + 7256) = 0u;
    *(_OWORD *)(result + 7240) = 0u;
    *(_OWORD *)(result + 7224) = 0u;
    *(_OWORD *)(result + 7208) = 0u;
    *(_OWORD *)(result + 7192) = 0u;
    *(_OWORD *)(result + 7176) = 0u;
    *(_OWORD *)(result + 7160) = 0u;
    *(_OWORD *)(result + 7144) = 0u;
    *(_OWORD *)(result + 7128) = 0u;
    *(_OWORD *)(result + 7112) = 0u;
    *(_OWORD *)(result + 7096) = 0u;
    *(_OWORD *)(result + 7080) = 0u;
    *(_OWORD *)(result + 7064) = 0u;
    *(_OWORD *)(result + 7048) = 0u;
    *(_OWORD *)(result + 7032) = 0u;
    *(_OWORD *)(result + 7016) = 0u;
    *(_OWORD *)(result + 7000) = 0u;
    *(_OWORD *)(result + 6984) = 0u;
    *(_OWORD *)(result + 6968) = 0u;
    *(_OWORD *)(result + 6952) = 0u;
    *(_OWORD *)(result + 6936) = 0u;
    *(_OWORD *)(result + 6920) = 0u;
    *(_OWORD *)(result + 6904) = 0u;
    *(_OWORD *)(result + 6888) = 0u;
    *(_OWORD *)(result + 6872) = 0u;
    *(_OWORD *)(result + 6856) = 0u;
    *(_OWORD *)(result + 6840) = 0u;
    *(_OWORD *)(result + 6824) = 0u;
    *(_OWORD *)(result + 6808) = 0u;
    *(_OWORD *)(result + 6792) = 0u;
    *(_OWORD *)(result + 6776) = 0u;
    *(_OWORD *)(result + 6760) = 0u;
    *(_OWORD *)(result + 6744) = 0u;
    *(_OWORD *)(result + 6728) = 0u;
    *(_OWORD *)(result + 6712) = 0u;
    *(_OWORD *)(result + 6696) = 0u;
    *(_OWORD *)(result + 6680) = 0u;
    *(_OWORD *)(result + 6664) = 0u;
    *(_OWORD *)(result + 6648) = 0u;
    *(_OWORD *)(result + 6632) = 0u;
    *(_OWORD *)(result + 6616) = 0u;
    *(_OWORD *)(result + 6600) = 0u;
    *(_OWORD *)(result + 6584) = 0u;
    *(_OWORD *)(result + 6568) = 0u;
    *(_OWORD *)(result + 6552) = 0u;
    *(_OWORD *)(result + 6536) = 0u;
    *(_OWORD *)(result + 6520) = 0u;
    *(_OWORD *)(result + 6504) = 0u;
    *(_OWORD *)(result + 6488) = 0u;
    *(_OWORD *)(result + 6472) = 0u;
    *(_OWORD *)(result + 6456) = 0u;
    *(_OWORD *)(result + 6440) = 0u;
    *(_OWORD *)(result + 6424) = 0u;
    *(_OWORD *)(result + 6408) = 0u;
    *(_OWORD *)(result + 6392) = 0u;
    *(_OWORD *)(result + 6376) = 0u;
    *(_OWORD *)(result + 6360) = 0u;
    *(_OWORD *)(result + 6344) = 0u;
    *(_OWORD *)(result + 6328) = 0u;
    *(_OWORD *)(result + 6312) = 0u;
    *(_OWORD *)(result + 6296) = 0u;
    *(_OWORD *)(result + 6280) = 0u;
    *(_OWORD *)(result + 6264) = 0u;
    *(_OWORD *)(result + 6248) = 0u;
    *(_OWORD *)(result + 6232) = 0u;
    *(_OWORD *)(result + 6216) = 0u;
    *(_OWORD *)(result + 6200) = 0u;
    *(_OWORD *)(result + 6184) = 0u;
    *(_OWORD *)(result + 6168) = 0u;
    *(_OWORD *)(result + 6152) = 0u;
    *(_OWORD *)(result + 6136) = 0u;
    *(_OWORD *)(result + 6120) = 0u;
    *(_OWORD *)(result + 6104) = 0u;
    *(_OWORD *)(result + 6088) = 0u;
    *(_OWORD *)(result + 6072) = 0u;
    *(_OWORD *)(result + 6056) = 0u;
    *(_OWORD *)(result + 6040) = 0u;
    *(_OWORD *)(result + 6024) = 0u;
    *(_OWORD *)(result + 6008) = 0u;
    *(_OWORD *)(result + 5992) = 0u;
    *(_OWORD *)(result + 5976) = 0u;
    *(_OWORD *)(result + 5960) = 0u;
    *(_OWORD *)(result + 5944) = 0u;
    *(_OWORD *)(result + 5928) = 0u;
    *(_OWORD *)(result + 5912) = 0u;
    *(_OWORD *)(result + 5896) = 0u;
    *(_OWORD *)(result + 5880) = 0u;
    *(_OWORD *)(result + 5864) = 0u;
    *(_OWORD *)(result + 5848) = 0u;
    *(_OWORD *)(result + 5832) = 0u;
    *(_OWORD *)(result + 5816) = 0u;
    *(_OWORD *)(result + 5800) = 0u;
    *(_OWORD *)(result + 5784) = 0u;
    *(_OWORD *)(result + 5768) = 0u;
    *(_OWORD *)(result + 5752) = 0u;
    *(_OWORD *)(result + 5736) = 0u;
    *(_OWORD *)(result + 5720) = 0u;
    *(_OWORD *)(result + 5704) = 0u;
    *(_OWORD *)(result + 5688) = 0u;
    *(_OWORD *)(result + 5672) = 0u;
    *(_OWORD *)(result + 5656) = 0u;
    *(_OWORD *)(result + 5640) = 0u;
    *(_OWORD *)(result + 5624) = 0u;
    *(_OWORD *)(result + 5608) = 0u;
    *(_OWORD *)(result + 5592) = 0u;
    *(_OWORD *)(result + 5576) = 0u;
    *(_OWORD *)(result + 5560) = 0u;
    *(_OWORD *)(result + 5544) = 0u;
    *(_OWORD *)(result + 5528) = 0u;
    *(_OWORD *)(result + 5512) = 0u;
    *(_OWORD *)(result + 5496) = 0u;
    *(_OWORD *)(result + 5480) = 0u;
    *(_OWORD *)(result + 5464) = 0u;
    *(_OWORD *)(result + 5448) = 0u;
    *(_OWORD *)(result + 5432) = 0u;
    *(_OWORD *)(result + 5416) = 0u;
    *(_OWORD *)(result + 5400) = 0u;
    *(_OWORD *)(result + 5384) = 0u;
    *(_OWORD *)(result + 5368) = 0u;
    *(_OWORD *)(result + 5352) = 0u;
    *(_OWORD *)(result + 5336) = 0u;
    *(_OWORD *)(result + 5320) = 0u;
    *(_OWORD *)(result + 5304) = 0u;
    *(_OWORD *)(result + 5288) = 0u;
    *(_OWORD *)(result + 5272) = 0u;
    *(_OWORD *)(result + 5256) = 0u;
    *(_OWORD *)(result + 5240) = 0u;
    *(_OWORD *)(result + 5224) = 0u;
    *(_OWORD *)(result + 5208) = 0u;
    *(_OWORD *)(result + 5192) = 0u;
    *(_OWORD *)(result + 5176) = 0u;
    *(_OWORD *)(result + 5160) = 0u;
    *(_OWORD *)(result + 5144) = 0u;
    *(_OWORD *)(result + 5128) = 0u;
    *(_OWORD *)(result + 5112) = 0u;
    *(_OWORD *)(result + 5096) = 0u;
    *(_OWORD *)(result + 5080) = 0u;
    *(_OWORD *)(result + 5064) = 0u;
    *(_OWORD *)(result + 5048) = 0u;
    *(_OWORD *)(result + 5032) = 0u;
    *(_OWORD *)(result + 5016) = 0u;
    *(_OWORD *)(result + 5000) = 0u;
    *(_OWORD *)(result + 4984) = 0u;
    *(_OWORD *)(result + 4968) = 0u;
    *(_OWORD *)(result + 4952) = 0u;
    *(_OWORD *)(result + 4936) = 0u;
    *(_OWORD *)(result + 4920) = 0u;
    *(_OWORD *)(result + 4904) = 0u;
    *(_OWORD *)(result + 4888) = 0u;
    *(_OWORD *)(result + 4872) = 0u;
    *(_OWORD *)(result + 4856) = 0u;
    *(_OWORD *)(result + 4840) = 0u;
    *(_OWORD *)(result + 4824) = 0u;
    *(_OWORD *)(result + 4808) = 0u;
    *(_OWORD *)(result + 4792) = 0u;
    *(_OWORD *)(result + 4776) = 0u;
    *(_OWORD *)(result + 4760) = 0u;
    *(_OWORD *)(result + 4744) = 0u;
    *(_OWORD *)(result + 4728) = 0u;
    *(_OWORD *)(result + 4712) = 0u;
    *(_OWORD *)(result + 4696) = 0u;
    *(_OWORD *)(result + 4680) = 0u;
    *(_OWORD *)(result + 4664) = 0u;
    *(_OWORD *)(result + 4648) = 0u;
    *(_OWORD *)(result + 4632) = 0u;
    *(_OWORD *)(result + 4616) = 0u;
    *(_OWORD *)(result + 4600) = 0u;
    *(_OWORD *)(result + 4584) = 0u;
    *(_OWORD *)(result + 4568) = 0u;
    *(_OWORD *)(result + 4552) = 0u;
    *(_OWORD *)(result + 4536) = 0u;
    *(_OWORD *)(result + 4520) = 0u;
    *(_OWORD *)(result + 4504) = 0u;
    *(_OWORD *)(result + 4488) = 0u;
    *(_OWORD *)(result + 4472) = 0u;
    *(_OWORD *)(result + 4456) = 0u;
    *(_OWORD *)(result + 4440) = 0u;
    *(_OWORD *)(result + 4424) = 0u;
    *(_OWORD *)(result + 4408) = 0u;
    *(_OWORD *)(result + 4392) = 0u;
    *(_OWORD *)(result + 4376) = 0u;
    *(_OWORD *)(result + 4360) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 18656) = v3;
  return result;
}

void type metadata accessor for snaop_soundprint_graph_runner_t(uint64_t a1)
{
}

void type metadata accessor for snaop_async_sdf_node_view_t(uint64_t a1)
{
}

uint64_t sub_1DC8804C4(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1DC8804E4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 40) = v3;
  return result;
}

void type metadata accessor for snaop_sdf_async_input_node_t(uint64_t a1)
{
}

__n128 sub_1DC88052C(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1DC880538(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1DC880558(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for snaop_sdf_soundprint_node_t(uint64_t a1)
{
}

uint64_t sub_1DC880598(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)__n128 result = v2;
  return result;
}

void type metadata accessor for snaop_sampler_sdf_node_t(uint64_t a1)
{
}

__n128 sub_1DC8805C0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void type metadata accessor for snaop_unit_value_status_error_continuation_view_t(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for TimeRange(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 sub_1DC88061C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for TimeRange(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TimeRange(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

void type metadata accessor for CMTimeRange(uint64_t a1)
{
}

uint64_t storeEnumTagSinglePayload for MovieRemix.Request(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for snaop_sdf_node_view_t(uint64_t a1)
{
}

void type metadata accessor for SNDetectSpeechUtteranceRequestType(uint64_t a1)
{
}

uint64_t storeEnumTagSinglePayload for Time(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

void type metadata accessor for snaop_sdf_nth_sorted_node_t(uint64_t a1)
{
}

void type metadata accessor for IsolatedAudio_UseCaseID(uint64_t a1)
{
}

__n128 initializeBufferWithCopyOfBuffer for MovieRemix.Request(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CoreAudioTimestamp(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for CategoryOptions(uint64_t a1)
{
}

void type metadata accessor for Mode(uint64_t a1)
{
}

void type metadata accessor for Category(uint64_t a1)
{
}

void type metadata accessor for AVAudioSessionAudioHardwareControlFlags(uint64_t a1)
{
}

void type metadata accessor for eSNAOPHIDSenderIds(uint64_t a1)
{
}

void type metadata accessor for eSNAOPHIDReportIds(uint64_t a1)
{
}

__n128 sub_1DC8807EC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void type metadata accessor for CMTime(uint64_t a1)
{
}

void type metadata accessor for SNSoundIdentifier(uint64_t a1)
{
}

uint64_t sub_1DC880828(uint64_t a1, uint64_t a2)
{
  return a2 | a1;
}

uint64_t sub_1DC880830@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1DC896D50();
  *a1 = result;
  return result;
}

uint64_t sub_1DC880858@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1DC880828(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_1DC880888@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1DC9AE9B4(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_1DC8808B8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1DC8808E8(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_1DC8808E8(uint64_t a1, uint64_t a2)
{
  return a2 ^ a1;
}

uint64_t sub_1DC8808F0(uint64_t a1, void *a2)
{
  return sub_1DC9AF730(a1, *a2);
}

uint64_t sub_1DC8808F8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1DC88092C(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1DC88092C(uint64_t a1)
{
  uint64_t result = *v1 & a1;
  if (result) {
    *v1 &= ~a1;
  }
  return result;
}

uint64_t sub_1DC880950@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1DC880984(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1DC880984(uint64_t a1)
{
  uint64_t v2 = *v1;
  *v1 |= a1;
  return v2 & a1;
}

uint64_t sub_1DC88099C(void *a1)
{
  return sub_1DC9AF738(*a1);
}

uint64_t sub_1DC8809A4(void *a1)
{
  return sub_1DC9AF734(*a1);
}

uint64_t sub_1DC8809AC(uint64_t *a1)
{
  return sub_1DC8809B4(*a1);
}

uint64_t sub_1DC8809B4(uint64_t result)
{
  *v1 ^= result;
  return result;
}

uint64_t sub_1DC8809C4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1DC8809F4(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_1DC8809F4(uint64_t a1, uint64_t a2)
{
  return a2 & ~a1;
}

BOOL sub_1DC8809FC(uint64_t *a1)
{
  return sub_1DC880A08(*a1, *v1);
}

BOOL sub_1DC880A08(uint64_t a1, uint64_t a2)
{
  return (a2 & ~a1) == 0;
}

BOOL sub_1DC880A14(uint64_t *a1)
{
  return sub_1DC880A20(*a1, *v1);
}

BOOL sub_1DC880A20(uint64_t a1, uint64_t a2)
{
  return (a2 & a1) == 0;
}

BOOL sub_1DC880A2C(uint64_t *a1)
{
  return sub_1DC880A38(*a1, *v1);
}

BOOL sub_1DC880A38(uint64_t a1, uint64_t a2)
{
  return (a1 & ~a2) == 0;
}

BOOL sub_1DC880A44()
{
  return sub_1DC880A4C(*v0);
}

BOOL sub_1DC880A4C(uint64_t a1)
{
  return a1 == 0;
}

uint64_t sub_1DC880A58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4184B08](a1, a4, a2, a5, a3);
}

uint64_t sub_1DC880A70(uint64_t *a1)
{
  return sub_1DC880A78(*a1);
}

uint64_t sub_1DC880A78(uint64_t result)
{
  *v1 &= ~result;
  return result;
}

uint64_t sub_1DC880A88(uint64_t a1, id *a2)
{
  return sub_1DC880AA0(a1, a2);
}

uint64_t sub_1DC880AA0(uint64_t a1, id *a2)
{
  uint64_t result = sub_1DCB87918();
  *a2 = 0;
  return result;
}

uint64_t sub_1DC880B18(uint64_t a1, id *a2)
{
  return sub_1DC880B34(a1, a2) & 1;
}

uint64_t sub_1DC880B34(uint64_t a1, id *a2)
{
  char v3 = sub_1DCB87928();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1DC880BB4()
{
  sub_1DCB87938();
  uint64_t v0 = sub_1DCB87908();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1DC880BF0()
{
  sub_1DC8839B4();
  uint64_t result = sub_1DC8C9A58();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_1DC880C18()
{
  sub_1DC8839B4();
  uint64_t result = sub_1DC94AD60();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_1DC880C40()
{
  return sub_1DC880D94(*v0, MEMORY[0x1E4F27EB8]);
}

uint64_t sub_1DC880C70@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1DC880BB4();
  *a1 = result;
  return result;
}

void sub_1DC880C98(uint64_t a1@<X8>)
{
  sub_1DC880CCC();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3 & 1;
}

uint64_t sub_1DC880CD4()
{
  uint64_t v1 = sub_1DC8839B4();
  uint64_t result = nullsub_1(v1);
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_1DC880CFC()
{
  sub_1DC880CCC();
  return sub_1DC883CAC(v0, v1);
}

void *sub_1DC880D2C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_1DC880D3C(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1DC880D48()
{
  uint64_t v1 = sub_1DC8839B4();
  uint64_t result = sub_1DCA365CC(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

BOOL sub_1DC880D70(uint64_t *a1, uint64_t *a2)
{
  return sub_1DC8C2154(*a1, *a2);
}

uint64_t sub_1DC880D7C(void *a1, void *a2)
{
  return sub_1DC8C2160(*a1, *a2);
}

BOOL sub_1DC880D88(int *a1, int *a2)
{
  return sub_1DC8C2164(*a1, *a2);
}

uint64_t sub_1DC880D94(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = sub_1DCB87938();
  uint64_t v4 = a2(v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1DC880DD4()
{
  sub_1DCB87938();
  sub_1DCB879B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1DC880E28(uint64_t a1)
{
  return sub_1DC963764(a1, *v1);
}

_DWORD *sub_1DC880E30@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void sub_1DC880E40(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1DC880E4C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1DC877A2C(a1);
  *a2 = result;
  return result;
}

void *sub_1DC880E74@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1DC880E80(uint64_t a1)
{
  uint64_t v2 = sub_1DC881144(&qword_1EAA9D578, type metadata accessor for Category);
  uint64_t v3 = sub_1DC881144(&qword_1EAA9D580, type metadata accessor for Category);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1DC880F3C(uint64_t a1)
{
  uint64_t v2 = sub_1DC881144(&qword_1EAA9D568, type metadata accessor for Mode);
  uint64_t v3 = sub_1DC881144(&qword_1EAA9D570, type metadata accessor for Mode);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1DC880FF8(uint64_t a1)
{
  uint64_t v2 = sub_1DC881144(&qword_1EAA9D588, type metadata accessor for SNSoundIdentifier);
  uint64_t v3 = sub_1DC881144(&qword_1EAA9D590, type metadata accessor for SNSoundIdentifier);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1DC8810B4()
{
  return sub_1DC881144(&qword_1EAA9D478, type metadata accessor for SNSoundIdentifier);
}

uint64_t sub_1DC8810FC()
{
  return sub_1DC881144(&qword_1EAA9D480, type metadata accessor for SNSoundIdentifier);
}

uint64_t sub_1DC881144(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1DC88118C()
{
  return sub_1DC881144(&qword_1EAA9D488, type metadata accessor for SNSoundIdentifier);
}

uint64_t sub_1DC8811D4(uint64_t a1)
{
  uint64_t v2 = sub_1DC881144(&qword_1EAA9D898, type metadata accessor for SNDetectorIdentifier);
  uint64_t v3 = sub_1DC881144(&qword_1EAA9D8A0, type metadata accessor for SNDetectorIdentifier);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1DC881290(uint64_t a1)
{
  uint64_t v2 = sub_1DC881144(&qword_1EAA9D558, type metadata accessor for SNClassifierIdentifier);
  uint64_t v3 = sub_1DC881144(&qword_1EAA9D560, type metadata accessor for SNClassifierIdentifier);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1DC88134C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1DCB87908();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1DC881394(uint64_t a1)
{
  uint64_t v2 = sub_1DC881144((unint64_t *)&unk_1EAA9C780, type metadata accessor for MLModelMetadataKey);
  uint64_t v3 = sub_1DC881144(&qword_1EAA9D890, type metadata accessor for MLModelMetadataKey);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1DC881450()
{
  return sub_1DC880D94(*v0, MEMORY[0x1E4FBB198]);
}

uint64_t sub_1DC881480()
{
  return sub_1DC880DD4();
}

uint64_t sub_1DC88149C()
{
  return sub_1DC881144(&qword_1EAA9D490, type metadata accessor for Category);
}

uint64_t sub_1DC8814E4()
{
  return sub_1DC881144(&qword_1EAA9D498, type metadata accessor for Category);
}

uint64_t sub_1DC88152C()
{
  return sub_1DC881144(&qword_1EAA9D4A0, type metadata accessor for Category);
}

uint64_t sub_1DC881574()
{
  return sub_1DC881144(&qword_1EAA9D4A8, type metadata accessor for Mode);
}

uint64_t sub_1DC8815BC()
{
  return sub_1DC881144((unint64_t *)&unk_1EAA9D4B0, type metadata accessor for Mode);
}

uint64_t sub_1DC881604()
{
  return sub_1DC881144(&qword_1EAA9C618, type metadata accessor for Mode);
}

uint64_t sub_1DC88164C()
{
  return sub_1DC881144(&qword_1EAA9D4C0, type metadata accessor for CategoryOptions);
}

uint64_t sub_1DC881694()
{
  return sub_1DC881144(&qword_1EAA9D4C8, type metadata accessor for CategoryOptions);
}

uint64_t sub_1DC8816DC()
{
  return sub_1DC881144(&qword_1EAA9D4D0, type metadata accessor for CategoryOptions);
}

uint64_t sub_1DC881724()
{
  return sub_1DC881144(&qword_1EAA9D4D8, type metadata accessor for CategoryOptions);
}

uint64_t sub_1DC88176C()
{
  return sub_1DC881144(&qword_1EAA9D4E0, type metadata accessor for SNClassifierIdentifier);
}

uint64_t sub_1DC8817B4()
{
  return sub_1DC881144(&qword_1EAA9D4E8, type metadata accessor for SNClassifierIdentifier);
}

uint64_t sub_1DC8817FC()
{
  return sub_1DC881144(&qword_1EAA9D4F0, type metadata accessor for SNClassifierIdentifier);
}

unint64_t sub_1DC881844()
{
  unint64_t result = qword_1EAA9D598;
  if (!qword_1EAA9D598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D598);
  }
  return result;
}

uint64_t sub_1DC881890()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1DC8818D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1DC881920(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_1DC881978(uint64_t a1)
{
  uint64_t v2 = sub_1DC87E988(&qword_1EAA9CAB0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1DC8819D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1DC87E988(&qword_1EAA9CAB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1DC881A40()
{
  unint64_t result = qword_1EAA9D5A0;
  if (!qword_1EAA9D5A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D5A0);
  }
  return result;
}

void *sub_1DC881A8C(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_1DC881AD0()
{
  unint64_t result = qword_1EAA9D5B0;
  if (!qword_1EAA9D5B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D5B0);
  }
  return result;
}

unint64_t sub_1DC881B1C()
{
  unint64_t result = qword_1EAA9D620;
  if (!qword_1EAA9D620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D620);
  }
  return result;
}

unint64_t sub_1DC881B68()
{
  unint64_t result = qword_1EAAAB9F0;
  if (!qword_1EAAAB9F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAAAB9F0);
  }
  return result;
}

unint64_t sub_1DC881BB4()
{
  unint64_t result = qword_1EAA9D630;
  if (!qword_1EAA9D630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D630);
  }
  return result;
}

uint64_t sub_1DC881C00()
{
  return sub_1DC88389C();
}

unint64_t sub_1DC881C0C()
{
  unint64_t result = qword_1EAA9D638;
  if (!qword_1EAA9D638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D638);
  }
  return result;
}

unint64_t sub_1DC881C58()
{
  unint64_t result = qword_1EAA9D640;
  if (!qword_1EAA9D640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D640);
  }
  return result;
}

unint64_t sub_1DC881CA4()
{
  unint64_t result = qword_1EAAAB320;
  if (!qword_1EAAAB320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAAAB320);
  }
  return result;
}

unint64_t sub_1DC881CF0()
{
  unint64_t result = qword_1EAA9D650;
  if (!qword_1EAA9D650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D650);
  }
  return result;
}

uint64_t sub_1DC881D3C()
{
  return sub_1DC88389C();
}

unint64_t sub_1DC881D48()
{
  unint64_t result = qword_1EAA9D658;
  if (!qword_1EAA9D658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D658);
  }
  return result;
}

unint64_t sub_1DC881D94()
{
  unint64_t result = qword_1EAA9D660;
  if (!qword_1EAA9D660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D660);
  }
  return result;
}

unint64_t sub_1DC881DE0()
{
  unint64_t result = qword_1EAA9D668;
  if (!qword_1EAA9D668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D668);
  }
  return result;
}

unint64_t sub_1DC881E2C()
{
  unint64_t result = qword_1EAA9D670;
  if (!qword_1EAA9D670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D670);
  }
  return result;
}

uint64_t sub_1DC881E78()
{
  return sub_1DC88389C();
}

unint64_t sub_1DC881E84()
{
  unint64_t result = qword_1EAA9D678;
  if (!qword_1EAA9D678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D678);
  }
  return result;
}

unint64_t sub_1DC881ED0()
{
  unint64_t result = qword_1EAA9D680;
  if (!qword_1EAA9D680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D680);
  }
  return result;
}

uint64_t sub_1DC881F1C()
{
  sub_1DC883C54();

  return swift_deallocObject();
}

uint64_t sub_1DC881F4C(uint64_t a1)
{
  id v2 = *(id *)(a1 + 56);
  return a1;
}

unint64_t sub_1DC881F78()
{
  unint64_t result = qword_1EAA9D688;
  if (!qword_1EAA9D688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D688);
  }
  return result;
}

unint64_t sub_1DC881FC4()
{
  unint64_t result = qword_1EAA9D690;
  if (!qword_1EAA9D690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D690);
  }
  return result;
}

uint64_t sub_1DC882010()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

unint64_t sub_1DC882048()
{
  unint64_t result = qword_1EAA9D698;
  if (!qword_1EAA9D698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D698);
  }
  return result;
}

unint64_t sub_1DC882094()
{
  unint64_t result = qword_1EAA9D6A0;
  if (!qword_1EAA9D6A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D6A0);
  }
  return result;
}

uint64_t sub_1DC8820E0()
{
  return sub_1DC88389C();
}

unint64_t sub_1DC8820EC()
{
  unint64_t result = qword_1EAAA6E70;
  if (!qword_1EAAA6E70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAAA6E70);
  }
  return result;
}

unint64_t sub_1DC882138()
{
  unint64_t result = qword_1EAA9D6B0;
  if (!qword_1EAA9D6B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D6B0);
  }
  return result;
}

unint64_t sub_1DC882184()
{
  unint64_t result = qword_1EAA9D6B8;
  if (!qword_1EAA9D6B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D6B8);
  }
  return result;
}

unint64_t sub_1DC8821D0()
{
  unint64_t result = qword_1EAA9D6C0;
  if (!qword_1EAA9D6C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D6C0);
  }
  return result;
}

uint64_t sub_1DC88221C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1DC882264(uint64_t a1)
{
  return a1;
}

unint64_t sub_1DC8822B0()
{
  unint64_t result = qword_1EAA9EAA0;
  if (!qword_1EAA9EAA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EAA0);
  }
  return result;
}

unint64_t sub_1DC8822FC()
{
  unint64_t result = qword_1EAA9D6D0;
  if (!qword_1EAA9D6D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D6D0);
  }
  return result;
}

uint64_t sub_1DC882348()
{
  sub_1DC8823A0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  sub_1DC8823B0(*(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(unsigned char *)(v0 + 120));
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1DC8823A0(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  else {
    return swift_release();
  }
}

uint64_t sub_1DC8823B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if ((a7 & 1) == 0) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1DC8823BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t v7 = *(void *)(a1 + 96);
  char v8 = *(unsigned char *)(a1 + 104);
  sub_1DC88244C(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  sub_1DC88245C(v2, v3, v4, v5, v6, v7, v8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1DC88244C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRetain();
  }
  else {
    return swift_retain();
  }
}

uint64_t sub_1DC88245C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if ((a7 & 1) == 0) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_1DC882468()
{
  unint64_t result = qword_1EAAA4F80;
  if (!qword_1EAAA4F80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAAA4F80);
  }
  return result;
}

unint64_t sub_1DC8824B4()
{
  unint64_t result = qword_1EAA9D6E0;
  if (!qword_1EAA9D6E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D6E0);
  }
  return result;
}

uint64_t sub_1DC882500()
{
  sub_1DC883C54();

  return swift_deallocObject();
}

uint64_t sub_1DC882530(uint64_t a1)
{
  id v2 = *(id *)(a1 + 48);
  return a1;
}

unint64_t sub_1DC88255C()
{
  unint64_t result = qword_1EAA9D6E8;
  if (!qword_1EAA9D6E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D6E8);
  }
  return result;
}

unint64_t sub_1DC8825A8()
{
  unint64_t result = qword_1EAA9D6F0;
  if (!qword_1EAA9D6F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D6F0);
  }
  return result;
}

unint64_t sub_1DC8825F4()
{
  unint64_t result = qword_1EAA9D6F8;
  if (!qword_1EAA9D6F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D6F8);
  }
  return result;
}

unint64_t sub_1DC882640()
{
  unint64_t result = qword_1EAA9D700;
  if (!qword_1EAA9D700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D700);
  }
  return result;
}

unint64_t sub_1DC88268C()
{
  unint64_t result = qword_1EAAA2960;
  if (!qword_1EAAA2960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAAA2960);
  }
  return result;
}

unint64_t sub_1DC8826D8()
{
  unint64_t result = qword_1EAA9D710;
  if (!qword_1EAA9D710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D710);
  }
  return result;
}

uint64_t sub_1DC882724()
{
  return sub_1DC88389C();
}

unint64_t sub_1DC882730()
{
  unint64_t result = qword_1EAA9D718;
  if (!qword_1EAA9D718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D718);
  }
  return result;
}

unint64_t sub_1DC88277C()
{
  unint64_t result = qword_1EAA9D720;
  if (!qword_1EAA9D720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D720);
  }
  return result;
}

unint64_t sub_1DC8827C8()
{
  unint64_t result = qword_1EAA9D728;
  if (!qword_1EAA9D728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D728);
  }
  return result;
}

unint64_t sub_1DC882814()
{
  unint64_t result = qword_1EAA9D730;
  if (!qword_1EAA9D730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D730);
  }
  return result;
}

uint64_t sub_1DC882860()
{
  swift_bridgeObjectRelease();
  sub_1DC883C54();

  return swift_deallocObject();
}

uint64_t sub_1DC882890(uint64_t a1)
{
  return a1;
}

unint64_t sub_1DC8828BC()
{
  unint64_t result = qword_1EAAA2600;
  if (!qword_1EAAA2600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAAA2600);
  }
  return result;
}

unint64_t sub_1DC882908()
{
  unint64_t result = qword_1EAA9D740;
  if (!qword_1EAA9D740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D740);
  }
  return result;
}

uint64_t sub_1DC882954()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1DC88298C(uint64_t a1)
{
  return a1;
}

unint64_t sub_1DC8829B8()
{
  unint64_t result = qword_1EAA9D748;
  if (!qword_1EAA9D748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D748);
  }
  return result;
}

unint64_t sub_1DC882A04()
{
  unint64_t result = qword_1EAA9D750;
  if (!qword_1EAA9D750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D750);
  }
  return result;
}

unint64_t sub_1DC882A50()
{
  unint64_t result = qword_1EAA9EE90;
  if (!qword_1EAA9EE90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EE90);
  }
  return result;
}

unint64_t sub_1DC882A9C()
{
  unint64_t result = qword_1EAA9D760;
  if (!qword_1EAA9D760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D760);
  }
  return result;
}

unint64_t sub_1DC882AE8()
{
  unint64_t result = qword_1EAA9D768;
  if (!qword_1EAA9D768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D768);
  }
  return result;
}

unint64_t sub_1DC882B34()
{
  unint64_t result = qword_1EAA9D770;
  if (!qword_1EAA9D770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D770);
  }
  return result;
}

uint64_t sub_1DC882B80()
{
  sub_1DC882BC4(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1DC882BC4(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2) {
    return swift_release();
  }
  if (a3 != 1)
  {
    if (a3) {
      return result;
    }
    return swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1DC882BF0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1DC882C30(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2) {
    return swift_retain();
  }
  if (a3 != 1)
  {
    if (a3) {
      return result;
    }
    return swift_retain();
  }
  return swift_bridgeObjectRetain();
}

unint64_t sub_1DC882C5C()
{
  unint64_t result = qword_1EAA9D778;
  if (!qword_1EAA9D778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D778);
  }
  return result;
}

unint64_t sub_1DC882CA8()
{
  unint64_t result = qword_1EAA9D780;
  if (!qword_1EAA9D780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D780);
  }
  return result;
}

unint64_t sub_1DC882CF4()
{
  unint64_t result = qword_1EAA9D788;
  if (!qword_1EAA9D788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D788);
  }
  return result;
}

unint64_t sub_1DC882D40()
{
  unint64_t result = qword_1EAA9D790;
  if (!qword_1EAA9D790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D790);
  }
  return result;
}

uint64_t sub_1DC882D8C()
{
  sub_1DC8823B0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));

  return swift_deallocObject();
}

uint64_t sub_1DC882DD0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1DC882E2C(uint64_t a1)
{
  return a1;
}

unint64_t sub_1DC882E68()
{
  unint64_t result = qword_1EAAA4E20;
  if (!qword_1EAAA4E20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAAA4E20);
  }
  return result;
}

unint64_t sub_1DC882EB4()
{
  unint64_t result = qword_1EAA9D7A0;
  if (!qword_1EAA9D7A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D7A0);
  }
  return result;
}

unint64_t sub_1DC882F00()
{
  unint64_t result = qword_1EAA9D7A8;
  if (!qword_1EAA9D7A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D7A8);
  }
  return result;
}

unint64_t sub_1DC882F4C()
{
  unint64_t result = qword_1EAA9D7B0;
  if (!qword_1EAA9D7B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D7B0);
  }
  return result;
}

uint64_t sub_1DC882F98()
{
  return sub_1DC88389C();
}

unint64_t sub_1DC882FA4()
{
  unint64_t result = qword_1EAA9D7B8;
  if (!qword_1EAA9D7B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D7B8);
  }
  return result;
}

unint64_t sub_1DC882FF0()
{
  unint64_t result = qword_1EAA9D7C0;
  if (!qword_1EAA9D7C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D7C0);
  }
  return result;
}

unint64_t sub_1DC88303C()
{
  unint64_t result = qword_1EAA9D7C8;
  if (!qword_1EAA9D7C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9D7C8);
  }
  return result;
}

void type metadata accessor for TransportError(uint64_t a1)
{
}

uint64_t sub_1DC88309C(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_WORD *)(result + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

uint64_t sub_1DC8830B0(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 6)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1DC8830D0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 6) = v3;
  return result;
}

void type metadata accessor for _SNAOPErrorDetails(uint64_t a1)
{
}

uint64_t sub_1DC883110(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

uint64_t sub_1DC883124(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1DC883144(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 5) = v3;
  return result;
}

void type metadata accessor for _SNAOPClassfication(uint64_t a1)
{
}

void type metadata accessor for SNAOPReadData(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for SNSystemConfiguration(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SNSystemConfiguration(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 12) = v3;
  return result;
}

void type metadata accessor for _SNAOPDataReadOut(uint64_t a1)
{
}

void type metadata accessor for e5rt_tensor_desc_component_dtype_t(uint64_t a1)
{
}

void type metadata accessor for MLMultiArrayDataType(uint64_t a1)
{
}

void type metadata accessor for _NSRange(uint64_t a1)
{
}

void type metadata accessor for MLModelMetadataKey(uint64_t a1)
{
}

void type metadata accessor for CFArray(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for XPCPublisher(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCPublisher(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for AudioQueueChannelAssignment(uint64_t a1)
{
}

void type metadata accessor for CFError(uint64_t a1)
{
}

void type metadata accessor for snaop_status_t(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for MovieRemix.Request(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

void type metadata accessor for AudioBuffer(uint64_t a1)
{
}

void type metadata accessor for SNLogMelSpectrumNormalizationStrategy(uint64_t a1)
{
}

void type metadata accessor for SNLogMelType(uint64_t a1)
{
}

void type metadata accessor for SNDetectorIdentifier(uint64_t a1)
{
}

void type metadata accessor for MGProductType(uint64_t a1)
{
}

void type metadata accessor for HIDReportType(uint64_t a1)
{
}

void type metadata accessor for CMTimeFlags(uint64_t a1)
{
}

uint64_t sub_1DC8833D4()
{
  return sub_1DC881144(&qword_1EAA9D868, type metadata accessor for SNDetectorIdentifier);
}

uint64_t sub_1DC88341C()
{
  return sub_1DC881144(&qword_1EAA9D870, type metadata accessor for SNDetectorIdentifier);
}

uint64_t sub_1DC883464()
{
  return sub_1DC881144(&qword_1EAA9D878, type metadata accessor for SNDetectorIdentifier);
}

uint64_t sub_1DC8834AC()
{
  return sub_1DC881144(&qword_1EAA9D880, type metadata accessor for MLModelMetadataKey);
}

uint64_t sub_1DC8834F4()
{
  return sub_1DC881144(&qword_1EAA9D888, type metadata accessor for MLModelMetadataKey);
}

uint64_t sub_1DC88353C()
{
  return sub_1DC881144(&qword_1EAA9C790, type metadata accessor for MLModelMetadataKey);
}

__n128 initializeBufferWithCopyOfBuffer for Time(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Time(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

void type metadata accessor for AudioBufferList(uint64_t a1)
{
}

void type metadata accessor for _SNAOPClassifierData8bit(uint64_t a1)
{
}

__n128 sub_1DC8835E0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for snaop_ebank_t(uint64_t a1)
{
}

void type metadata accessor for eSNAOPHIDErrorType(uint64_t a1)
{
}

void type metadata accessor for e5rt_error_code_t(uint64_t a1)
{
}

void sub_1DC883630(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

id sub_1DC8836EC(int a1, const char *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return objc_msgSend(v10, a2, v11, 0, 0, &a10);
}

uint64_t sub_1DC883710()
{
  return swift_dynamicCast();
}

uint64_t sub_1DC883734(uint64_t a1, unsigned char *a2)
{
  *a2 = 2;
  return swift_willThrow();
}

uint64_t sub_1DC883754(uint64_t a1, unsigned char *a2)
{
  *a2 = 2;
  return swift_willThrow();
}

uint64_t sub_1DC883770(void *a1)
{
  sub_1DC881A8C(a1, v1);
  return sub_1DCB86858();
}

uint64_t sub_1DC8837C0()
{
  return sub_1DCB87908();
}

uint64_t sub_1DC8837DC()
{
  return sub_1DC881920(v1, v0);
}

uint64_t sub_1DC8837F4()
{
  return swift_release();
}

uint64_t sub_1DC883814()
{
  return sub_1DCB87908();
}

uint64_t sub_1DC883830()
{
  return sub_1DCB86AB8();
}

id sub_1DC88384C(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v4, v3);
}

_OWORD *sub_1DC883868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, long long a15)
{
  return sub_1DCA60C84((uint64_t)&a11, &a15);
}

uint64_t sub_1DC883884()
{
  return swift_allocError();
}

uint64_t sub_1DC88389C()
{
  return swift_deallocObject();
}

uint64_t sub_1DC8838D4()
{
  return swift_allocObject();
}

void sub_1DC8838EC(uint64_t a1@<X8>, double a2@<D0>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10)
{
  *(void *)uint64_t v11 = a1;
  *(void *)(v11 + 8) = a8;
  *(_OWORD *)(v11 + 16) = a9;
  *(void *)(v11 + 32) = a10;
  *(void *)(v11 + 40) = v10;
  *(double *)(v11 + 48) = a2;
}

uint64_t sub_1DC883914(uint64_t a1)
{
  sub_1DC8818D0(a1);
  return sub_1DC8D90CC(v1 - 104);
}

uint64_t sub_1DC88394C()
{
  return sub_1DCB88808();
}

id sub_1DC883964(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

double sub_1DC883990@<D0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, long long a8, double a9)
{
  *(void *)uint64_t v10 = a1;
  *(void *)(v10 + 8) = a7;
  *(_OWORD *)(v10 + 16) = a8;
  double result = a9;
  *(double *)(v10 + 32) = a9;
  *(void *)(v10 + 40) = v9;
  return result;
}

uint64_t sub_1DC8839B4()
{
  return *(void *)v0;
}

double sub_1DC8839C0()
{
  return 0.0;
}

uint64_t sub_1DC8839D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  return sub_1DC87E920(v4 - 64, (uint64_t)va);
}

uint64_t sub_1DC8839F0()
{
  return sub_1DCB88808();
}

uint64_t sub_1DC883A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  return sub_1DC8819D8((uint64_t)va, v4 - 64);
}

uint64_t sub_1DC883A20()
{
  return sub_1DC881978(v0 - 64);
}

float sub_1DC883A38@<S0>(uint64_t a1@<X8>)
{
  return *(float *)(v1 + a1 + 48);
}

uint64_t sub_1DC883A70()
{
  return swift_dynamicCast();
}

uint64_t sub_1DC883A94(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  return sub_1DC881978((uint64_t)va);
}

uint64_t sub_1DC883AAC(uint64_t a1)
{
  return sub_1DC8818D0(a1);
}

void sub_1DC883AC4(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, long long a8, uint64_t a9)
{
  *(void *)uint64_t v10 = a1;
  *(void *)(v10 + 8) = a7;
  *(_OWORD *)(v10 + 16) = a8;
  *(void *)(v10 + 32) = a9;
  *(void *)(v10 + 40) = v9;
}

uint64_t sub_1DC883AE8()
{
  return sub_1DC881920(v1, v0);
}

uint64_t sub_1DC883B00()
{
  return sub_1DCB86AB8();
}

uint64_t sub_1DC883B1C()
{
  return sub_1DCB87908();
}

uint64_t sub_1DC883B38()
{
  return swift_release();
}

uint64_t sub_1DC883B58(uint64_t a1)
{
  return a1 + 16;
}

id sub_1DC883B6C(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2, v4);
}

_OWORD *sub_1DC883B88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, long long a15)
{
  return sub_1DCA60C84((uint64_t)&a11, &a15);
}

uint64_t sub_1DC883BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  return sub_1DC8819D8((uint64_t)&a9, (uint64_t)&a13);
}

id sub_1DC883BBC(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_1DC883BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  return sub_1DC87E920((uint64_t)&a13, (uint64_t)&a9);
}

double sub_1DC883BEC()
{
  return 0.0;
}

uint64_t sub_1DC883BF8()
{
  return sub_1DCB88808();
}

uint64_t sub_1DC883C10()
{
  return sub_1DCB87908();
}

double sub_1DC883C28(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, double a18, double a19)
{
  return a19;
}

uint64_t sub_1DC883C54()
{
  return v0;
}

void *sub_1DC883C64(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v21 = (void *)(a1 + 16);
  return memcpy(v21, v19, 0x48uLL);
}

uint64_t sub_1DC883C88()
{
  return v0;
}

__n128 sub_1DC883C94(uint64_t a1)
{
  long long v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 32) = v2;
  __n128 result = *(__n128 *)(v1 + 32);
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t sub_1DC883CAC(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t sub_1DC883CBC()
{
  return swift_dynamicCast();
}

uint64_t sub_1DC883CE0()
{
  return swift_dynamicCast();
}

uint64_t sub_1DC883D20(void *a1)
{
  sub_1DC881A8C(a1, v1);
  return sub_1DCB86858();
}

uint64_t sub_1DC883D58()
{
  return swift_release();
}

uint64_t sub_1DC883D78()
{
  return v0;
}

uint64_t sub_1DC883D8C(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  return sub_1DC881978((uint64_t)va);
}

uint64_t sub_1DC883DA4(void *a1)
{
  sub_1DC881A8C(a1, v1);
  return sub_1DCB86858();
}

uint64_t sub_1DC883DDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1DC883E08(a1, a2, a3, a4, (void (*)(void *, uint64_t, uint64_t))sub_1DC884FFC);
}

uint64_t sub_1DC883E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *, uint64_t, uint64_t))
{
  uint64_t v7 = v5;
  type metadata accessor for XPCProxyEncoder();
  inited = (void *)swift_initStackObject();
  inited[2] = 0;
  inited[3] = 0;
  inited[4] = a3;
  inited[5] = a4;
  swift_retain();
  a5(inited, a1, a2);
  if (!v5)
  {
    uint64_t v13 = sub_1DC8844CC();
    uint64_t v7 = v13;
    if (v13)
    {
      swift_setDeallocating();
      sub_1DC884CE8();
      sub_1DC886828();
      swift_deallocClassInstance();
      return v7;
    }
    sub_1DC884E74();
    swift_allocError();
    *uint64_t v15 = 0;
    swift_willThrow();
  }
  swift_release();
  return v7;
}

uint64_t sub_1DC883F24()
{
  return sub_1DC8844CC();
}

uint64_t sub_1DC883F3C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

void *sub_1DC883F74(void *(*a1)(uint64_t *__return_ptr))
{
  uint64_t result = a1(&v3);
  if (!v1) {
    return (void *)v3;
  }
  return result;
}

uint64_t sub_1DC883FB8()
{
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  type metadata accessor for XPCProxyEncoder.UnkeyedContainer();
  uint64_t v3 = (void *)swift_allocObject();
  v3[2] = MEMORY[0x1E4FBC860];
  _OWORD v3[3] = v2;
  v3[4] = v1;
  uint64_t v4 = sub_1DC886810();
  *(void *)(v4 + 16) = sub_1DC884FA4;
  *(void *)(v4 + 24) = v3;
  uint64_t v5 = sub_1DC886810();
  *(void *)(v5 + 16) = sub_1DC884FC0;
  *(void *)(v5 + 24) = v4;
  sub_1DC8868AC();
  if (v0[2])
  {
    uint64_t v8 = v0[3];
    uint64_t v9 = v0[2];
    sub_1DC884E74();
    uint64_t v10 = swift_allocError();
    sub_1DC8868CC(v10, v11);
    swift_retain();
    swift_willThrow();
    v0[2] = v9;
    v0[3] = v8;
    swift_endAccess();
    swift_release();
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    uint64_t v6 = sub_1DC886810();
    *(void *)(v6 + 16) = sub_1DC884E40;
    *(void *)(v6 + 24) = v5;
    v0[2] = sub_1DC88675C;
    v0[3] = v6;
    swift_endAccess();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1DC884128()
{
  uint64_t result = sub_1DC884160();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1DC884160()
{
  void (*v6)(long long *__return_ptr, uint64_t);
  uint64_t v7;
  long long v8;
  long long v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  uint64_t v21;

  swift_beginAccess();
  uint64_t v2 = v0[2];
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  if (v3)
  {
    uint64_t v21 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    sub_1DC897A0C();
    uint64_t v4 = v21;
    uint64_t v5 = v2 + 40;
    while (1)
    {
      uint64_t v6 = *(void (**)(long long *__return_ptr, uint64_t))(v5 - 8);
      uint64_t v7 = swift_retain();
      v6(&v19, v7);
      if (v1) {
        break;
      }
      swift_release();
      uint64_t v8 = v19;
      uint64_t v9 = v20;
      uint64_t v21 = v4;
      uint64_t v10 = *(void *)(v4 + 16);
      if (v10 >= *(void *)(v4 + 24) >> 1)
      {
        uint64_t v17 = v20;
        uint64_t v18 = v19;
        sub_1DC897A0C();
        uint64_t v9 = v17;
        uint64_t v8 = v18;
        uint64_t v4 = v21;
      }
      *(void *)(v4 + 16) = v10 + 1;
      uint64_t v11 = v4 + 32 * v10;
      *(_OWORD *)(v11 + 32) = v8;
      *(_OWORD *)(v11 + 48) = v9;
      v5 += 16;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
LABEL_9:
    uint64_t v12 = sub_1DC886810();
    *(void *)(v12 + 16) = v4;
    *(void *)(v12 + 24) = 0;
    uint64_t v13 = sub_1DC886810();
    *(void *)(v13 + 16) = &unk_1EAA9D9B8;
    *(void *)(v13 + 24) = v12;
    uint64_t v15 = v0[3];
    uint64_t v14 = v0[4];
    swift_retain_n();
    sub_1DC883E08((uint64_t)&unk_1EAA9D9C8, v13, v15, v14, (void (*)(void *, uint64_t, uint64_t))sub_1DC885B78);
    sub_1DC8868EC();
    swift_release();
    swift_release_n();
  }
  return sub_1DC886860();
}

uint64_t sub_1DC884350()
{
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  type metadata accessor for XPCProxyEncoder.SingleValueContainer();
  uint64_t v3 = (void *)swift_allocObject();
  v3[2] = 0;
  _OWORD v3[3] = 0;
  v3[4] = v2;
  v3[5] = v1;
  uint64_t v4 = sub_1DC886810();
  *(void *)(v4 + 16) = sub_1DC884DEC;
  *(void *)(v4 + 24) = v3;
  sub_1DC8868AC();
  if (v0[2])
  {
    uint64_t v7 = v0[3];
    uint64_t v8 = v0[2];
    sub_1DC884E74();
    uint64_t v9 = swift_allocError();
    sub_1DC8868CC(v9, v10);
    swift_retain();
    swift_willThrow();
    v0[2] = v8;
    v0[3] = v7;
    swift_endAccess();
    swift_release();
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    uint64_t v5 = sub_1DC886810();
    *(void *)(v5 + 16) = sub_1DC884E40;
    *(void *)(v5 + 24) = v4;
    v0[2] = sub_1DC88675C;
    v0[3] = v5;
    swift_endAccess();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1DC884494()
{
  uint64_t result = sub_1DC8844CC();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1DC8844CC()
{
  swift_beginAccess();
  uint64_t v2 = *(void (**)(uint64_t))(v0 + 16);
  if (v2)
  {
    uint64_t v3 = swift_retain();
    v2(v3);
    if (!v1) {
      sub_1DC8868EC();
    }
    sub_1DC884EC0((uint64_t)v2);
  }
  return sub_1DC886860();
}

uint64_t sub_1DC884584()
{
  sub_1DC8849B4();

  return swift_deallocClassInstance();
}

uint64_t sub_1DC8845B8(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return MEMORY[0x1F4188298](sub_1DC8845D8, 0, 0);
}

uint64_t sub_1DC8845D8()
{
  sub_1DC88688C();
  uint64_t v1 = v0[6];
  uint64_t v2 = 1;
  uint64_t result = swift_beginAccess();
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v8 = *(void *)(v1 + 16);
  unint64_t v7 = *(void *)(v1 + 24);
  unint64_t v9 = *(void *)(v8 + 16);
  if (v7 != v9)
  {
    if (v7 >= v9)
    {
      __break(1u);
      return result;
    }
    unint64_t v10 = v7 + 1;
    uint64_t v11 = (void *)(v8 + 32 * v7);
    uint64_t v5 = v11[6];
    uint64_t v6 = v11[7];
    uint64_t v2 = v11[4];
    uint64_t v4 = v11[5];
    *(void *)(v1 + 24) = v10;
    sub_1DC884F60(v2);
  }
  uint64_t v12 = (uint64_t *)v0[5];
  *uint64_t v12 = v2;
  v12[1] = v4;
  id v12[2] = v5;
  uint64_t v12[3] = v6;
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_1DC8846B4(uint64_t a1, int *a2)
{
  *(void *)(v2 + 48) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 56) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1DC884794;
  return v5(v2 + 16);
}

uint64_t sub_1DC884794()
{
  sub_1DC8867A8();
  sub_1DC886774();
  sub_1DC88679C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1DC88678C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 64) = v0;
  swift_task_dealloc();
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC884870()
{
  uint64_t v1 = *(_OWORD **)(v0 + 48);
  long long v2 = *(_OWORD *)(v0 + 32);
  *uint64_t v1 = *(_OWORD *)(v0 + 16);
  v1[1] = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1DC884894()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1DC8848AC()
{
  type metadata accessor for XPCProxyEncoder();
  uint64_t v4 = (void *)swift_allocObject();
  sub_1DC8867B4(v4);
  uint64_t v5 = sub_1DC886838();
  v3(v5);
  if (!v1)
  {
    uint64_t v6 = sub_1DC886810();
    *(void *)(v6 + 16) = sub_1DC884DEC;
    *(void *)(v6 + 24) = v2;
    swift_beginAccess();
    swift_retain();
    sub_1DC9B4570();
    uint64_t v7 = *(void *)(*(void *)(v0 + 16) + 16);
    sub_1DC9B4674(v7);
    uint64_t v8 = *(void *)(v0 + 16);
    *(void *)(v8 + 16) = v7 + 1;
    uint64_t v9 = v8 + 16 * v7;
    *(void *)(v9 + 32) = sub_1DC884E40;
    *(void *)(v9 + 40) = v6;
    swift_endAccess();
  }
  return swift_release();
}

uint64_t sub_1DC8849B4()
{
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_1DC8849DC()
{
  type metadata accessor for XPCProxyEncoder();
  uint64_t v4 = (void *)swift_allocObject();
  sub_1DC8867B4(v4);
  uint64_t v5 = sub_1DC886838();
  v3(v5);
  if (v1) {
    return swift_release();
  }
  uint64_t v6 = sub_1DC886810();
  *(void *)(v6 + 16) = sub_1DC884DEC;
  *(void *)(v6 + 24) = v2;
  swift_beginAccess();
  uint64_t v7 = *(void *)(v0 + 16);
  if (v7)
  {
    uint64_t v8 = *(void *)(v0 + 24);
    sub_1DC884E74();
    swift_allocError();
    *uint64_t v9 = 1;
    swift_retain();
    swift_willThrow();
    *(void *)(v0 + 16) = v7;
    *(void *)(v0 + 24) = v8;
    swift_endAccess();
    swift_release();
    return swift_release();
  }
  uint64_t v11 = sub_1DC886810();
  *(void *)(v11 + 16) = sub_1DC884E40;
  *(void *)(v11 + 24) = v6;
  *(void *)(v0 + 16) = sub_1DC884E58;
  *(void *)(v0 + 24) = v11;
  return swift_endAccess();
}

uint64_t sub_1DC884B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  uint64_t v10 = sub_1DC886810();
  *(void *)(v10 + 16) = sub_1DC884F10;
  *(void *)(v10 + 24) = v9;
  swift_beginAccess();
  uint64_t v11 = *(void *)(v4 + 16);
  if (v11)
  {
    uint64_t v12 = *(void *)(v4 + 24);
    sub_1DC884E74();
    swift_allocError();
    *uint64_t v13 = 1;
    sub_1DC88690C();
    swift_willThrow();
    *(void *)(v4 + 16) = v11;
    *(void *)(v4 + 24) = v12;
    swift_endAccess();
    return swift_release();
  }
  else
  {
    uint64_t v15 = sub_1DC886810();
    *(void *)(v15 + 16) = sub_1DC884F1C;
    *(void *)(v15 + 24) = v10;
    *(void *)(v4 + 16) = sub_1DC88675C;
    *(void *)(v4 + 24) = v15;
    swift_endAccess();
    return sub_1DC88690C();
  }
}

uint64_t sub_1DC884C74(uint64_t a1)
{
  return a1;
}

uint64_t sub_1DC884CBC()
{
  sub_1DC884CE8();
  sub_1DC886828();

  return swift_deallocClassInstance();
}

uint64_t sub_1DC884CE8()
{
  sub_1DC884EC0(*(void *)(v0 + 16));
  swift_release();
  return v0;
}

uint64_t type metadata accessor for XPCProxyEncoder()
{
  return self;
}

uint64_t sub_1DC884D38()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for XPCProxyEncoder.KeyedContainer()
{
  return sub_1DC8866E4();
}

uint64_t type metadata accessor for XPCProxyEncoder.UnkeyedContainer()
{
  return self;
}

uint64_t type metadata accessor for XPCProxyEncoder.SingleValueContainer()
{
  return self;
}

uint64_t sub_1DC884DEC()
{
  return sub_1DC884494();
}

uint64_t sub_1DC884E08()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1DC884E40@<X0>(uint64_t *a1@<X8>)
{
  return sub_1DC8863F0(a1);
}

void *sub_1DC884E58()
{
  return sub_1DC883F74(*(void *(**)(uint64_t *__return_ptr))(v0 + 16));
}

unint64_t sub_1DC884E74()
{
  unint64_t result = qword_1EAA9EFE0;
  if (!qword_1EAA9EFE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EFE0);
  }
  return result;
}

uint64_t sub_1DC884EC0(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1DC884ED0()
{
  if (*(void *)(v0 + 16))
  {
    swift_release();
    swift_release();
  }
  sub_1DC886828();

  return swift_deallocObject();
}

uint64_t sub_1DC884F10()
{
  return sub_1DC884C74(*(void *)(v0 + 16));
}

uint64_t sub_1DC884F1C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return result;
}

uint64_t sub_1DC884F60(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1DC884FA4()
{
  return sub_1DC884128();
}

uint64_t sub_1DC884FC0()
{
  uint64_t result = (*(uint64_t (**)(void))(v0 + 16))();
  if (v1) {
    return v3;
  }
  return result;
}

uint64_t sub_1DC884FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1DC884350();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = *(void *)(v5 + 40);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = v6;
  v8[5] = v7;
  swift_retain_n();
  swift_retain();
  sub_1DC884B30((uint64_t)&unk_1EAA9DA20, (uint64_t)v8, v6, v7);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1DC8850C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 64) = a1;
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1EAA9DA28
                                                                                     + dword_1EAA9DA28);
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 72) = v12;
  *uint64_t v12 = v6;
  v12[1] = sub_1DC8851B4;
  return v14(v6 + 16, a3, a4, a2, a5, a6);
}

uint64_t sub_1DC8851B4()
{
  sub_1DC8867A8();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC88679C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88678C();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  if (!v0)
  {
    uint64_t v7 = *(_OWORD **)(v3 + 64);
    long long v8 = *(_OWORD *)(v3 + 16);
    long long v9 = *(_OWORD *)(v3 + 48);
    v7[1] = *(_OWORD *)(v3 + 32);
    v7[2] = v9;
    *uint64_t v7 = v8;
  }
  uint64_t v10 = *(uint64_t (**)(void))(v5 + 8);
  return v10();
}

uint64_t sub_1DC885290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[23] = a5;
  v6[24] = a6;
  v6[21] = a2;
  v6[22] = a3;
  v6[20] = a1;
  type metadata accessor for RemoteRequest();
  uint64_t v8 = swift_task_alloc();
  v6[25] = v8;
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1EAAA2910 + dword_1EAAA2910);
  long long v9 = (void *)swift_task_alloc();
  v6[26] = v9;
  *long long v9 = v6;
  v9[1] = sub_1DC885380;
  return v11(v8, a4);
}

uint64_t sub_1DC885380()
{
  sub_1DC886900();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC88679C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88678C();
  *uint64_t v6 = v5;
  v3[27] = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1DC886854();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    uint64_t v13 = (uint64_t (*)(void *, uint64_t))(v3[21] + *(int *)v3[21]);
    uint64_t v10 = (void *)swift_task_alloc();
    v3[28] = v10;
    *uint64_t v10 = v5;
    v10[1] = sub_1DC88550C;
    uint64_t v11 = v3[25];
    return v13(v3 + 14, v11);
  }
}

uint64_t sub_1DC88550C()
{
  sub_1DC8867A8();
  sub_1DC886774();
  sub_1DC88679C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1DC88678C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 232) = v0;
  swift_task_dealloc();
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC8855E8()
{
  sub_1DC8867A8();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1DC885648()
{
  sub_1DC88688C();
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 192);
  long long v4 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 32) = v4;
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 144);
  sub_1DC8EAD5C((uint64_t *)(v0 + 16), v2, v3, (uint64_t *)(v0 + 64));
  uint64_t v5 = *(void *)(v0 + 200);
  if (v1)
  {
    sub_1DC886630((uint64_t *)(v0 + 16));
    sub_1DC8865D4(v5);
  }
  else
  {
    uint64_t v7 = *(_OWORD **)(v0 + 160);
    sub_1DC886630((uint64_t *)(v0 + 16));
    sub_1DC8865D4(v5);
    long long v9 = *(_OWORD *)(v0 + 80);
    long long v8 = *(_OWORD *)(v0 + 96);
    *uint64_t v7 = *(_OWORD *)(v0 + 64);
    v7[1] = v9;
    v7[2] = v8;
  }
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1DC885738()
{
  sub_1DC8867A8();
  sub_1DC8865D4(*(void *)(v0 + 200));
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1DC8857A0(int *a1)
{
  long long v4 = (uint64_t (*)(uint64_t))((char *)a1 + *a1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 48) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1DC88587C;
  return v4(v1 + 16);
}

uint64_t sub_1DC88587C()
{
  sub_1DC8867A8();
  sub_1DC886774();
  sub_1DC88679C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1DC88678C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 56) = v0;
  swift_task_dealloc();
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC885958()
{
  return (*(uint64_t (**)(void, void, void, void))(v0 + 8))(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1DC885978()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1DC885990()
{
  sub_1DC886900();
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1DC885A68;
  return v4(v0 + 16);
}

uint64_t sub_1DC885A68()
{
  sub_1DC8867A8();
  sub_1DC886774();
  sub_1DC88679C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1DC88678C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 32) = v0;
  swift_task_dealloc();
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC885B44()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

uint64_t sub_1DC885B60()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1DC885B78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1DC884350();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a2;
  *(void *)(v5 + 24) = a3;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = &unk_1EAA9D9D8;
  *(void *)(v6 + 24) = v5;
  v8[3] = sub_1DC87E988(&qword_1EAA9D9F0);
  v8[4] = sub_1DC886334();
  v8[0] = &unk_1EAA9D9E8;
  v8[1] = v6;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1DC8849DC();
  swift_release();
  sub_1DC8818D0((uint64_t)v8);
  swift_release_n();
  return swift_release();
}

uint64_t sub_1DC885C90(int *a1)
{
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)a1 + *a1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 48) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1DC885D6C;
  return v4(v1 + 16);
}

uint64_t sub_1DC885D6C()
{
  sub_1DC8867A8();
  sub_1DC886774();
  sub_1DC88679C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1DC88678C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 56) = v0;
  swift_task_dealloc();
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC885E48()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1DC885E80()
{
  sub_1DC8867A8();
  uint64_t v2 = v1;
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_1DC886800(v3);
  *uint64_t v4 = v5;
  v4[1] = sub_1DC886718;
  return sub_1DC8845B8(v2, v0);
}

uint64_t sub_1DC885F10()
{
  sub_1DC886900();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1DC886800(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_1DC886718;
  uint64_t v3 = sub_1DC886898();
  return sub_1DC8846B4(v3, v4);
}

uint64_t sub_1DC885FA4(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1DC886714;
  return sub_1DC885C90(a2);
}

uint64_t sub_1DC886044()
{
  sub_1DC886900();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1DC886800(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_1DC886718;
  uint64_t v3 = sub_1DC886898();
  return v4(v3);
}

uint64_t sub_1DC8860E4(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_1DC886184;
  return sub_1DC8857A0(a3);
}

uint64_t sub_1DC886184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1DC886774();
  uint64_t v11 = v10;
  sub_1DC88679C();
  *uint64_t v12 = v11;
  uint64_t v13 = *v5;
  sub_1DC88678C();
  *uint64_t v14 = v13;
  swift_task_dealloc();
  if (!v4)
  {
    uint64_t v15 = *(void **)(v11 + 16);
    *uint64_t v15 = a1;
    v15[1] = a2;
    v15[2] = a3;
    v15[3] = a4;
  }
  uint64_t v16 = *(uint64_t (**)(void))(v13 + 8);
  return v16();
}

uint64_t sub_1DC886284()
{
  sub_1DC88688C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1DC886800(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_1DC886718;
  uint64_t v3 = sub_1DC886878();
  return v4(v3);
}

unint64_t sub_1DC886334()
{
  unint64_t result = qword_1EAA9D9F8;
  if (!qword_1EAA9D9F8)
  {
    sub_1DC8863A8(&qword_1EAA9D9F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1EAA9D9F8);
  }
  return result;
}

uint64_t sub_1DC8863A8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_1DC8863F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2)
  {
    *a1 = result;
    a1[1] = v5;
    a1[2] = v6;
    a1[3] = v7;
  }
  return result;
}

uint64_t sub_1DC886428()
{
  swift_release();
  swift_release();
  sub_1DC886828();

  return swift_deallocObject();
}

uint64_t sub_1DC886460()
{
  sub_1DC88688C();
  uint64_t v1 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_1DC886800(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_1DC886510;
  uint64_t v7 = sub_1DC886878();
  return sub_1DC8850C8(v7, v8, v9, v1, v3, v2);
}

uint64_t sub_1DC886510()
{
  sub_1DC8867A8();
  sub_1DC886774();
  uint64_t v1 = *v0;
  sub_1DC88678C();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_1DC8865D4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RemoteRequest();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_1DC886630(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  sub_1DC88668C(*a1, a1[1]);
  sub_1DC8866A0(v2);
  return a1;
}

uint64_t sub_1DC88668C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1DC881920(a1, a2);
  }
  return a1;
}

uint64_t sub_1DC8866A0(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1DC8866E4()
{
  return swift_getGenericMetadata();
}

void *sub_1DC88675C()
{
  return sub_1DC884E58();
}

uint64_t sub_1DC8867B4(void *a1)
{
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = v3;
  a1[5] = v2;
  sub_1DC881A8C(v1, v1[3]);
  return swift_retain();
}

uint64_t sub_1DC886800(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t sub_1DC886810()
{
  return swift_allocObject();
}

uint64_t sub_1DC886828()
{
  return v0;
}

uint64_t sub_1DC886838()
{
  return v0;
}

uint64_t sub_1DC886860()
{
  return v0;
}

uint64_t sub_1DC886878()
{
  return v0;
}

uint64_t sub_1DC886898()
{
  return v0;
}

uint64_t sub_1DC8868AC()
{
  return swift_beginAccess();
}

uint64_t sub_1DC8868CC(uint64_t a1, unsigned char *a2)
{
  *a2 = 1;
  return swift_retain();
}

uint64_t sub_1DC88690C()
{
  return sub_1DC884F60(v0);
}

uint64_t sub_1DC88692C(void (*a1)(void), void (*a2)(void, void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v206 = a4;
  float32x4_t v201 = a2;
  float32x4_t v205 = a1;
  uint64_t v9 = *(void *)(a4 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  sub_1DC88819C();
  MEMORY[0x1F4188790](v11);
  sub_1DC888120();
  sub_1DC888134();
  MEMORY[0x1F4188790](v12);
  sub_1DC888190();
  sub_1DC888164(v13);
  uint64_t v174 = *(void *)(a6 + 8);
  uint64_t v172 = sub_1DCB883A8();
  sub_1DC88810C();
  uint64_t v193 = v14;
  MEMORY[0x1F4188790](v15);
  sub_1DC888120();
  sub_1DC888134();
  MEMORY[0x1F4188790](v16);
  sub_1DC888190();
  sub_1DC888164(v17);
  uint64_t v192 = *(void *)(v9 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t v207 = a5;
  uint64_t v18 = swift_getAssociatedTypeWitness();
  uint64_t v162 = swift_getTupleTypeMetadata2();
  sub_1DC88819C();
  MEMORY[0x1F4188790](v19);
  sub_1DC888120();
  sub_1DC888134();
  MEMORY[0x1F4188790](v20);
  sub_1DC888190();
  sub_1DC888164(v21);
  sub_1DC88810C();
  uint64_t v166 = v22;
  MEMORY[0x1F4188790](v23);
  sub_1DC888120();
  sub_1DC888134();
  MEMORY[0x1F4188790](v24);
  sub_1DC888190();
  sub_1DC888164(v25);
  uint64_t v167 = v18;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v161 = sub_1DCB883A8();
  sub_1DC88810C();
  uint64_t v159 = v26;
  MEMORY[0x1F4188790](v27);
  sub_1DC888120();
  sub_1DC888134();
  MEMORY[0x1F4188790](v28);
  sub_1DC888190();
  sub_1DC888164(v29);
  uint64_t v203 = swift_checkMetadataState();
  sub_1DC88810C();
  uint64_t v181 = v30;
  MEMORY[0x1F4188790](v31);
  sub_1DC888120();
  sub_1DC888134();
  MEMORY[0x1F4188790](v32);
  sub_1DC888190();
  sub_1DC888164(v33);
  float32x4_t v202 = (void (*)(void, void, void))a6;
  uint64_t v34 = swift_getAssociatedTypeWitness();
  sub_1DC88810C();
  float32x4_t v200 = v35;
  MEMORY[0x1F4188790](v36);
  sub_1DC888164((uint64_t)v157 - v37);
  uint64_t v184 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 16);
  uint64_t v186 = v34;
  uint64_t v183 = swift_getAssociatedTypeWitness();
  sub_1DC88819C();
  MEMORY[0x1F4188790](v38);
  sub_1DC888164((uint64_t)v157 - v39);
  uint64_t v204 = AssociatedTypeWitness;
  uint64_t v40 = *(void *)(AssociatedTypeWitness - 8);
  float32x4_t v188 = (void (*)(uint64_t, char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v190 = v40;
  sub_1DC88810C();
  uint64_t v209 = v41;
  MEMORY[0x1F4188790](v42);
  sub_1DC888120();
  sub_1DC888134();
  MEMORY[0x1F4188790](v43);
  sub_1DC888134();
  MEMORY[0x1F4188790](v44);
  sub_1DC888134();
  MEMORY[0x1F4188790](v45);
  sub_1DC888190();
  sub_1DC888164(v46);
  uint64_t v47 = MEMORY[0x1E4FBB550];
  float32x4_t v191 = (void (*)(void))swift_getTupleTypeMetadata2();
  uint64_t v199 = sub_1DCB88718();
  sub_1DC88810C();
  uint64_t v198 = v48;
  MEMORY[0x1F4188790](v49);
  sub_1DC888120();
  sub_1DC888134();
  MEMORY[0x1F4188790](v50);
  sub_1DC888190();
  sub_1DC888164(v51);
  uint64_t v52 = v9;
  swift_getAssociatedTypeWitness();
  sub_1DC88819C();
  MEMORY[0x1F4188790](v53);
  sub_1DC88810C();
  uint64_t v55 = v54;
  MEMORY[0x1F4188790](v56);
  float32x4_t v58 = (char *)v157 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  float32x4_t v59 = *(void (**)(void, void, void))(v55 + 16);
  uint64_t v177 = v55 + 16;
  float32x4_t v176 = v59;
  v59(v58, v205, a3);
  uint64_t v220 = 0;
  uint64_t v60 = a3;
  uint64_t v216 = a3;
  uint64_t v217 = v206;
  float32x4_t v61 = v202;
  uint64_t v218 = v207;
  float32x4_t v219 = v202;
  uint64_t v62 = sub_1DC925A18((uint64_t)&v220, (uint64_t)sub_1DC887FC8, (uint64_t)v215, v60, v47, v192);
  uint64_t v187 = v62;
  uint64_t v192 = 0;
  uint64_t v63 = *(void *)(v55 + 8);
  float32x4_t v178 = v58;
  uint64_t v179 = v55 + 8;
  uint64_t v175 = v63;
  sub_1DC8881AC();
  v64();
  float32x4_t v65 = v61;
  uint64_t v66 = v60;
  uint64_t v224 = v62;
  sub_1DCB880F8();
  uint64_t v67 = v52;
  swift_getAssociatedConformanceWitness();
  uint64_t v68 = v204;
  sub_1DCB87DA8();
  sub_1DC887FE8(v68, v68);
  sub_1DC8881EC();
  uint64_t v69 = sub_1DCB87C78();
  float32x4_t v70 = v189;
  uint64_t v182 = v67;
  sub_1DCB88118();
  sub_1DCA8D980(v69);
  uint64_t v71 = sub_1DCB87CC8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v226 = v71;
  uint64_t v72 = sub_1DC87E988((uint64_t *)&unk_1EAA9C8C0);
  uint64_t v73 = sub_1DCB87D78();
  unint64_t v74 = sub_1DC88804C();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_1DCB890B8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v224 = v220;
  uint64_t v225 = v221;
  uint64_t v210 = v60;
  uint64_t v211 = v206;
  uint64_t v212 = v207;
  float32x4_t v213 = v65;
  float32x4_t v214 = v201;
  uint64_t v220 = v72;
  uint64_t v221 = v73;
  unint64_t v222 = v74;
  uint64_t v223 = WitnessTable;
  sub_1DCB88AC8();
  swift_getWitnessTable();
  uint64_t v76 = v197;
  uint64_t v77 = v199;
  sub_1DCB87B38();
  uint64_t v78 = (uint64_t)v191;
  swift_bridgeObjectRelease();
  uint64_t v79 = v198;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v79 + 16))(v70, v76, v77);
  if (_s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwet_0((uint64_t)v70, 1, v78) == 1)
  {
    float32x4_t v80 = *(void (**)(uint64_t *, uint64_t))(v79 + 8);
    v80(v70, v77);
    sub_1DCB88338();
    return ((uint64_t (*)(uint64_t, uint64_t))v80)(v76, v77);
  }
  uint64_t v194 = v66;
  uint64_t v192 = *v70;
  float32x4_t v82 = (uint64_t *)(v209 + 32);
  float32x4_t v83 = *(void (**)(uint64_t, char *, uint64_t))(v209 + 32);
  v83(v180, (char *)v70 + *(int *)(v78 + 48), v204);
  uint64_t v84 = v186;
  uint64_t v187 = swift_getAssociatedConformanceWitness();
  sub_1DCB89098();
  uint64_t v85 = v185;
  sub_1DCB88FF8();
  sub_1DCB887A8();
  float32x4_t v86 = (char *)(v200 + 1);
  float32x4_t v87 = (uint64_t (*)(uint64_t, uint64_t))v200[1];
  uint64_t result = v87(v85, v84);
  uint64_t v88 = v192 - (void)v201;
  if (__OFSUB__(v192, v201))
  {
    __break(1u);
    goto LABEL_11;
  }
  v157[4] = v87;
  float32x4_t v188 = v83;
  float32x4_t v189 = v82;
  float32x4_t v200 = v86;
  float32x4_t v89 = (void (*)(uint64_t))sub_1DCB88218();
  uint64_t v90 = v181;
  uint64_t v91 = v181 + 16;
  float32x4_t v92 = *(void (**)(uint64_t))(v181 + 16);
  uint64_t v93 = v196;
  uint64_t v94 = v203;
  v92(v196);
  uint64_t v95 = sub_1DC8881D4();
  v89(v95);
  uint64_t v96 = sub_1DCB880C8();
  float32x4_t v99 = *(uint64_t (**)(void, void))(v90 + 8);
  uint64_t v98 = v90 + 8;
  float32x4_t v97 = v99;
  uint64_t result = v99(v93, v94);
  if (__OFSUB__(v96, v88))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v157[0] = v97;
  v157[1] = v98;
  uint64_t v190 = v96 - v88;
  sub_1DC888170();
  v100();
  float32x4_t v101 = v92;
  v157[2] = v92;
  uint64_t v102 = v209;
  float32x4_t v103 = *(void (**)(void))(v209 + 16);
  uint64_t v104 = v195;
  uint64_t v105 = v91;
  uint64_t v106 = v204;
  uint64_t v192 = v209 + 16;
  float32x4_t v191 = v103;
  ((void (*)(uint64_t, uint64_t, uint64_t))v103)(v195, v208, v204);
  float32x4_t v107 = (void (*)(uint64_t))sub_1DCB88218();
  v157[3] = v105;
  v101(v93);
  uint64_t v108 = sub_1DC8881D4();
  v107(v108);
  float32x4_t v201 = *(void (**)(void, void))(v102 + 8);
  uint64_t v209 = v102 + 8;
  v201(v104, v106);
  sub_1DC888180();
  v109();
  uint64_t v110 = v165;
  sub_1DCB880B8();
  sub_1DCB880E8();
  uint64_t v111 = v166;
  uint64_t v112 = v166 + 8;
  float32x4_t v113 = *(void (**)(uint64_t, uint64_t))(v166 + 8);
  uint64_t v114 = v167;
  v113(v110, v167);
  sub_1DCB88118();
  uint64_t result = sub_1DCB87878();
  if ((result & 1) == 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v115 = v162;
  uint64_t v116 = *(int *)(v162 + 48);
  uint64_t AssociatedConformanceWitness = (uint64_t)v113;
  uint64_t v117 = v160;
  uint64_t v118 = v160 + v116;
  uint64_t v190 = v112;
  float32x4_t v119 = *(void (**)(void))(v111 + 32);
  sub_1DC888154();
  v119();
  sub_1DC888154();
  v119();
  uint64_t v120 = v163 + *(int *)(v115 + 48);
  float32x4_t v121 = *(void (**)(uint64_t, uint64_t, uint64_t))(v111 + 16);
  v121(v163, v117, v114);
  v121(v120, v118, v114);
  uint64_t v122 = v157[5];
  sub_1DC888154();
  v119();
  float32x4_t v123 = (void (*)(void))AssociatedConformanceWitness;
  sub_1DC888210();
  v123();
  sub_1DC888154();
  v119();
  sub_1DC888154();
  v119();
  uint64_t v124 = v161;
  sub_1DC888154();
  v119();
  uint64_t v125 = v204;
  sub_1DC888210();
  v123();
  uint64_t v126 = v159;
  uint64_t v127 = v158;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v159 + 32))(v158, v122, v124);
  sub_1DCB88208();
  (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v127, v124);
  sub_1DCB89098();
  sub_1DCB88FF8();
  sub_1DCB887A8();
  sub_1DC888180();
  v128();
  uint64_t v129 = v173;
  sub_1DC888170();
  v130();
  uint64_t v131 = sub_1DC88824C();
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v201)(v129, v125);
  if ((v131 & 1) == 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  sub_1DC8881B8();
  float32x4_t v132 = v191;
  ((void (*)(uint64_t, uint64_t, uint64_t))v191)(v129, v208, v125);
  uint64_t v207 = v131;
  sub_1DC888224();
  v132();
  uint64_t v133 = v171 + *(int *)(v114 + 48);
  ((void (*)(uint64_t, uint64_t, uint64_t))v132)(v171, v129, v125);
  ((void (*)(uint64_t, uint64_t, uint64_t))v132)(v133, v131, v125);
  uint64_t v134 = v168;
  sub_1DC888144();
  v132();
  float32x4_t v135 = (void (*)(void))v201;
  sub_1DC8881AC();
  v135();
  sub_1DC888144();
  v132();
  sub_1DC888144();
  v132();
  uint64_t v136 = v172;
  sub_1DC888144();
  v132();
  sub_1DC8881AC();
  v135();
  uint64_t v137 = v193;
  float32x4_t v138 = *(void (**)(void, void, void))(v193 + 32);
  uint64_t v139 = v203;
  uint64_t v140 = v169;
  uint64_t v207 = v193 + 32;
  float32x4_t v202 = v138;
  v138(v169, v134, v136);
  sub_1DC887FE8(v139, v139);
  sub_1DC8881EC();
  uint64_t v141 = sub_1DCB87C78();
  sub_1DC888170();
  v142();
  uint64_t v220 = sub_1DCA8D980(v141);
  sub_1DCB87D78();
  swift_getWitnessTable();
  float32x4_t v143 = v205;
  sub_1DCB88238();
  float32x4_t v144 = *(void **)(v137 + 8);
  uint64_t v193 = v137 + 8;
  float32x4_t v200 = v144;
  ((void (*)(uint64_t, uint64_t))v144)(v140, v136);
  sub_1DC888170();
  v145();
  sub_1DCB880B8();
  sub_1DC888180();
  v146();
  sub_1DC888238();
  sub_1DC888170();
  v147();
  uint64_t v148 = sub_1DC88824C();
  sub_1DC888180();
  uint64_t result = v149();
  if ((v148 & 1) == 0)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  sub_1DC888224();
  sub_1DC8881B8();
  uint64_t v190 = v148;
  sub_1DC888144();
  v143();
  uint64_t v150 = sub_1DC888238();
  float32x4_t v151 = v191;
  ((void (*)(uint64_t))v191)(v150);
  sub_1DC88826C();
  v151();
  sub_1DC88826C();
  v151();
  uint64_t v152 = v168;
  sub_1DC888144();
  v143();
  float32x4_t v153 = (void (*)(void))v201;
  sub_1DC8881AC();
  v153();
  sub_1DC888144();
  v143();
  sub_1DC888144();
  v143();
  uint64_t v154 = v172;
  sub_1DC888144();
  v143();
  sub_1DC8881AC();
  v153();
  v202(v169, v152, v154);
  sub_1DCB88228();
  sub_1DC888180();
  v155();
  float32x4_t v156 = (void (*)(void))v157[0];
  sub_1DC8881AC();
  v156();
  sub_1DC8881AC();
  v156();
  ((void (*)(uint64_t, uint64_t))v153)(v208, v125);
  ((void (*)(uint64_t, uint64_t))v153)(v180, v125);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v198 + 8))(v197, v199);
}

uint64_t sub_1DC887F4C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getAssociatedTypeWitness();
  uint64_t result = sub_1DCB880C8();
  if (__OFADD__(v3, result)) {
    __break(1u);
  }
  else {
    *a2 = v3 + result;
  }
  return result;
}

uint64_t sub_1DC887FC8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1DC887F4C(a1, a2);
}

uint64_t sub_1DC887FE8(uint64_t a1, uint64_t a2)
{
  if (sub_1DC8880DC(a2))
  {
    return sub_1DC87E988(&qword_1EAA9C720);
  }
  else
  {
    return sub_1DCB88FA8();
  }
}

unint64_t sub_1DC88804C()
{
  unint64_t result = qword_1EAA9DA30;
  if (!qword_1EAA9DA30)
  {
    sub_1DC8863A8((uint64_t *)&unk_1EAA9C8C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DA30);
  }
  return result;
}

BOOL sub_1DC8880A0(void *a1)
{
  return *a1 > *(void *)(v1 + 48);
}

uint64_t _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwet_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_1DC8880DC(uint64_t a1)
{
  if (swift_isClassType()) {
    return a1;
  }
  else {
    return 0;
  }
}

void sub_1DC888134()
{
  *(void *)(v1 - 256) = v0;
}

void sub_1DC888164(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
}

uint64_t sub_1DC8881D4()
{
  return v0 - 152;
}

uint64_t sub_1DC8881EC()
{
  return swift_allocObject();
}

uint64_t sub_1DC888238()
{
  return v0;
}

uint64_t sub_1DC88824C()
{
  return sub_1DCB87878();
}

uint64_t sub_1DC888280()
{
  return sub_1DCB891B8();
}

uint64_t sub_1DC8882A8()
{
  return sub_1DCB891F8();
}

uint64_t _s13SoundAnalysis17_SNClassificationC20supportsSecureCodingSbvgZ_0()
{
  return 1;
}

uint64_t sub_1DC8882FC()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC88834C(uint64_t a1, uint64_t a2)
{
  sub_1DCB87818();
  sub_1DC88D5B0(v2 + *(int *)(a2 + 52));
  return sub_1DCAA602C();
}

BOOL sub_1DC8883D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  if (sub_1DCB878C8())
  {
    uint64_t v31 = a3;
    uint64_t v32 = a4;
    unint64_t v33 = a5;
    v34[0] = a6;
    uint64_t v12 = *(int *)(type metadata accessor for SharedLogMelSpectrogram.Configuration() + 52);
    int v13 = *(_DWORD *)(a1 + v12 + 4);
    unsigned int v14 = *(_DWORD *)(a1 + v12 + 16);
    unsigned int v15 = *(_DWORD *)(a1 + v12 + 20);
    char v16 = *(unsigned char *)(a1 + v12 + 24);
    LODWORD(v31) = *(_DWORD *)(a1 + v12);
    HIDWORD(v31) = v13;
    uint64_t v32 = *(void *)(a1 + v12 + 8);
    unint64_t v33 = __PAIR64__(v15, v14);
    LOBYTE(v34[0]) = v16;
    *(_OWORD *)((char *)v34 + 4) = *(_OWORD *)(a1 + v12 + 28);
    *(void *)((char *)&v34[2] + 4) = *(void *)(a1 + v12 + 44);
    v24[0] = sub_1DC88D5B0(a2 + v12);
    v24[1] = v17;
    uint64_t v25 = *(void *)(v18 + 8);
    int v26 = v19;
    int v27 = v20;
    char v28 = v21;
    long long v29 = *(_OWORD *)(v18 + 28);
    uint64_t v30 = *(void *)(v18 + 44);
    return sub_1DCAA6114((uint64_t)&v31, (uint64_t)v24);
  }
  else
  {
    return 0;
  }
}

BOOL sub_1DC8884D0(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_1DC8884E0()
{
  return sub_1DCB891B8();
}

uint64_t sub_1DC888508(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000018 && a2 == 0x80000001DCB90540 || (sub_1DCB89018() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001DCB90560)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = sub_1DCB89018();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1DC8885F8()
{
  return 2;
}

uint64_t sub_1DC888600()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC888648()
{
  return 0;
}

unint64_t sub_1DC888654(char a1)
{
  if (a1) {
    return 0xD000000000000013;
  }
  else {
    return 0xD000000000000018;
  }
}

BOOL sub_1DC888690(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1DC8884D0(*a1, *a2);
}

uint64_t sub_1DC8886A8()
{
  return sub_1DC888600();
}

uint64_t sub_1DC8886BC()
{
  return sub_1DC8884E0();
}

uint64_t sub_1DC8886D0()
{
  return sub_1DCB891F8();
}

unint64_t sub_1DC88871C()
{
  return sub_1DC888654(*v0);
}

uint64_t sub_1DC888730@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1DC888508(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1DC888764()
{
  return sub_1DC888648();
}

uint64_t sub_1DC888790@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1DC8885F8();
  *a1 = result;
  return result;
}

uint64_t sub_1DC8887C4(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t sub_1DC888818(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t sub_1DC88886C(uint64_t a1)
{
  sub_1DCB891A8();
  sub_1DC88834C((uint64_t)v3, a1);
  return sub_1DCB891F8();
}

double sub_1DC8888B4@<D0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v6 = *a2;
  int v7 = a2[1];
  int v8 = a2[4];
  int v9 = a2[5];
  char v10 = *((unsigned char *)a2 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t v11 = a4 + *(int *)(type metadata accessor for SharedLogMelSpectrogram.Configuration() + 52);
  *(_DWORD *)uint64_t v11 = v6;
  *(_DWORD *)(v11 + 4) = v7;
  *(void *)(v11 + 8) = *((void *)a2 + 1);
  *(_DWORD *)(v11 + 16) = v8;
  *(_DWORD *)(v11 + 20) = v9;
  *(unsigned char *)(v11 + 24) = v10;
  *(_OWORD *)(v11 + 28) = *(_OWORD *)(a2 + 7);
  double result = *(double *)(a2 + 11);
  *(double *)(v11 + 44) = result;
  return result;
}

uint64_t sub_1DC8889AC(uint64_t a1, uint64_t a2)
{
  sub_1DCB891A8();
  sub_1DC88834C((uint64_t)v4, a2);
  return sub_1DCB891F8();
}

BOOL sub_1DC8889F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1DC8883D0(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 40));
}

uint64_t sub_1DC888A00()
{
  uint64_t v1 = sub_1DC87E988(&qword_1EAA9DAB8);
  sub_1DC88D538();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v4);
  int v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v0 + 16);
  int v8 = (void *)swift_allocObject();
  v8[2] = sub_1DC88CEC8;
  v8[3] = v0;
  v8[4] = v7;
  swift_retain();
  swift_retain();
  sub_1DC87E988((uint64_t *)&unk_1EAAA0C40);
  sub_1DC88CF34((unint64_t *)&unk_1EAAA3D30, (uint64_t *)&unk_1EAAA0C40);
  sub_1DCB87378();
  sub_1DC88CF34(qword_1EAA9DAC0, &qword_1EAA9DAB8);
  uint64_t v9 = sub_1DCB873A8();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v1);
  return v9;
}

uint64_t sub_1DC888B90()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SharedLogMelSpectrogram.Instance()
{
  return self;
}

ValueMetadata *type metadata accessor for SharedLogMelSpectrogram()
{
  return &type metadata for SharedLogMelSpectrogram;
}

uint64_t sub_1DC888BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 40);
}

uint64_t sub_1DC888C04()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1DC888C9C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7 & 0xFC | 3;
  int v9 = v7 & 0x100000;
  if (v8 > 7 || v9 != 0 || ((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 52 > 0x18)
  {
    uint64_t v12 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v12 + ((v8 + 16) & ~v8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v13 = ((unint64_t)v4 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v14 = ((unint64_t)a2 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    long long v16 = *(_OWORD *)(v14 + 16);
    long long v15 = *(_OWORD *)(v14 + 32);
    long long v17 = *(_OWORD *)v14;
    *(_DWORD *)(v13 + 48) = *(_DWORD *)(v14 + 48);
    *(_OWORD *)(v13 + 16) = v16;
    *(_OWORD *)(v13 + 32) = v15;
    *(_OWORD *)unint64_t v13 = v17;
  }
  return v4;
}

uint64_t sub_1DC888DA4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_1DC888DD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 3;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFFCLL;
  long long v10 = *(_OWORD *)(v8 + 16);
  long long v9 = *(_OWORD *)(v8 + 32);
  long long v11 = *(_OWORD *)v8;
  *(_DWORD *)(v7 + 48) = *(_DWORD *)(v8 + 48);
  *(_OWORD *)(v7 + 16) = v10;
  *(_OWORD *)(v7 + 32) = v9;
  *(_OWORD *)unint64_t v7 = v11;
  return a1;
}

uint64_t sub_1DC888E5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 3;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v7 = *(_DWORD *)v8;
  *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 + 4);
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v7 + 12) = *(_DWORD *)(v8 + 12);
  *(_DWORD *)(v7 + 16) = *(_DWORD *)(v8 + 16);
  *(_DWORD *)(v7 + 20) = *(_DWORD *)(v8 + 20);
  *(unsigned char *)(v7 + 24) = *(unsigned char *)(v8 + 24);
  *(_DWORD *)(v7 + 28) = *(_DWORD *)(v8 + 28);
  *(_DWORD *)(v7 + 32) = *(_DWORD *)(v8 + 32);
  *(_DWORD *)(v7 + 36) = *(_DWORD *)(v8 + 36);
  *(_DWORD *)(v7 + 40) = *(_DWORD *)(v8 + 40);
  *(_DWORD *)(v7 + 44) = *(_DWORD *)(v8 + 44);
  *(_DWORD *)(v7 + 48) = *(_DWORD *)(v8 + 48);
  return a1;
}

uint64_t sub_1DC888F38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 3;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFFCLL;
  long long v10 = *(_OWORD *)(v8 + 16);
  long long v9 = *(_OWORD *)(v8 + 32);
  long long v11 = *(_OWORD *)v8;
  *(_DWORD *)(v7 + 48) = *(_DWORD *)(v8 + 48);
  *(_OWORD *)(v7 + 16) = v10;
  *(_OWORD *)(v7 + 32) = v9;
  *(_OWORD *)unint64_t v7 = v11;
  return a1;
}

uint64_t sub_1DC888FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 3;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v7 = *(_DWORD *)v8;
  *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 + 4);
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v7 + 12) = *(_DWORD *)(v8 + 12);
  *(_DWORD *)(v7 + 16) = *(_DWORD *)(v8 + 16);
  *(_DWORD *)(v7 + 20) = *(_DWORD *)(v8 + 20);
  *(unsigned char *)(v7 + 24) = *(unsigned char *)(v8 + 24);
  *(_DWORD *)(v7 + 28) = *(_DWORD *)(v8 + 28);
  *(_DWORD *)(v7 + 32) = *(_DWORD *)(v8 + 32);
  *(_DWORD *)(v7 + 36) = *(_DWORD *)(v8 + 36);
  *(_DWORD *)(v7 + 40) = *(_DWORD *)(v8 + 40);
  *(_DWORD *)(v7 + 44) = *(_DWORD *)(v8 + 44);
  *(_DWORD *)(v7 + 48) = *(_DWORD *)(v8 + 48);
  return a1;
}

uint64_t sub_1DC8890A0(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(unsigned int *)(*(void *)(v4 - 8) + 84);
  uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(*(void *)(v4 - 8) + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 52;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFFC;
    if ((v8 & 0xFFFFFFFC) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_21;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_21;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1DC8891DCLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_21:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *a1;
        }
        int v16 = v7 + (v10 | v15);
        return (v16 + 1);
      default:
        break;
    }
  }
  if (v5 >= 0xFE) {
    return _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwet_0((uint64_t)a1, v5, v4);
  }
  unsigned int v18 = *(unsigned __int8 *)((((unint64_t)a1 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 24);
  if (v18 < 2) {
    return 0;
  }
  int v16 = (v18 + 2147483646) & 0x7FFFFFFF;
  return (v16 + 1);
}

double sub_1DC8891F0(char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 16);
  uint64_t v7 = *(unsigned int *)(*(void *)(v6 - 8) + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(*(void *)(v6 - 8) + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
  unint64_t v10 = ((v9 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 52;
  if (((v9 + 3) & 0xFFFFFFFC) == 0xFFFFFFCC) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 3) & 0xFFFFFFFC) == 0xFFFFFFCC) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 3) & 0xFFFFFFFC) != 0xFFFFFFCC)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 52);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return result;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return result;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return result;
      default:
        return result;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x1DC8893D4);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0xFE)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 3] & 0xFFFFFFFFFFFFFFFCLL;
          if (a2 > 0xFE)
          {
            *(void *)(v18 + 40) = 0;
            double result = 0.0;
            *(_OWORD *)(v18 + 24) = 0u;
            *(_OWORD *)(v18 + 8) = 0u;
            *(_DWORD *)(v18 + 48) = 0;
            *(void *)unint64_t v18 = (a2 - 255);
          }
          else
          {
            *(unsigned char *)(v18 + 24) = a2 + 1;
          }
        }
        else
        {
          _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwst_0((uint64_t)a1, a2, v7, v6);
        }
      }
      return result;
  }
}

uint64_t _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwst_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t type metadata accessor for SharedLogMelSpectrogram.Configuration()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1DC88943C()
{
  return swift_getWitnessTable();
}

void sub_1DC889458()
{
  sub_1DC88D6B0();
  uint64_t v23 = v1;
  uint64_t v20 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  long long v6 = *(_OWORD *)(v2 + 32);
  long long v21 = *(_OWORD *)(v2 + 16);
  long long v22 = v6;
  long long v24 = v21;
  *(_OWORD *)uint64_t v25 = v6;
  type metadata accessor for SharedLogMelSpectrogram.Configuration.CodingKeys();
  swift_getWitnessTable();
  uint64_t v7 = sub_1DCB88F78();
  sub_1DC88D538();
  uint64_t v9 = v8;
  sub_1DC88D668();
  MEMORY[0x1F4188790]();
  unsigned int v11 = (char *)&v19 - v10;
  sub_1DC881A8C(v5, v5[3]);
  uint64_t v12 = v20;
  sub_1DCB892B8();
  LOBYTE(v24) = 0;
  uint64_t v13 = v23;
  sub_1DCB88F18();
  if (!v13)
  {
    LODWORD(v24) = sub_1DC88D5B0(v12 + *(int *)(v3 + 52));
    DWORD1(v24) = v14;
    *((void *)&v24 + 1) = *(void *)(v15 + 8);
    *(_DWORD *)uint64_t v25 = v16;
    *(_DWORD *)&v25[4] = v17;
    v25[8] = v18;
    *(_OWORD *)&v25[12] = *(_OWORD *)(v15 + 28);
    uint64_t v26 = *(void *)(v15 + 44);
    sub_1DC8899E0();
    sub_1DCB88F18();
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v7);
  sub_1DC88D674();
}

void sub_1DC88961C()
{
  sub_1DC88D6B0();
  uint64_t v37 = (void *)v0;
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v31 = v11;
  sub_1DC88D538();
  uint64_t v32 = v12;
  MEMORY[0x1F4188790]();
  sub_1DC88D550();
  uint64_t v36 = v13;
  type metadata accessor for SharedLogMelSpectrogram.Configuration.CodingKeys();
  swift_getWitnessTable();
  sub_1DCB88E78();
  sub_1DC88D538();
  uint64_t v34 = v15;
  uint64_t v35 = v14;
  sub_1DC88D668();
  MEMORY[0x1F4188790]();
  uint64_t v38 = v8;
  uint64_t v39 = v6;
  uint64_t v33 = v6;
  uint64_t v40 = v4;
  *(void *)uint64_t v41 = v2;
  uint64_t v16 = type metadata accessor for SharedLogMelSpectrogram.Configuration();
  sub_1DC88D538();
  uint64_t v30 = v17;
  sub_1DC88D668();
  MEMORY[0x1F4188790]();
  uint64_t v19 = (char *)&v29 - v18;
  sub_1DC881A8C(v10, v10[3]);
  uint64_t v20 = (uint64_t)v37;
  sub_1DCB89298();
  if (v20)
  {
    sub_1DC8818D0((uint64_t)v10);
  }
  else
  {
    uint64_t v37 = v10;
    uint64_t v21 = v32;
    LOBYTE(v38) = 0;
    sub_1DCB88DF8();
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))(v19, v36, v8);
    sub_1DC889994();
    sub_1DCB88DF8();
    uint64_t v22 = sub_1DC88D574();
    v23(v22);
    int v24 = HIDWORD(v38);
    uint64_t v25 = v40;
    char v26 = v41[0];
    int v27 = &v19[*(int *)(v16 + 52)];
    *(_DWORD *)int v27 = v38;
    *((_DWORD *)v27 + 1) = v24;
    *((void *)v27 + 1) = v39;
    *((void *)v27 + 2) = v25;
    v27[24] = v26;
    *(_OWORD *)(v27 + 28) = *(_OWORD *)&v41[4];
    *(void *)(v27 + 44) = v42;
    uint64_t v28 = v30;
    (*(void (**)(uint64_t, char *, uint64_t))(v30 + 16))(v31, v19, v16);
    sub_1DC8818D0((uint64_t)v37);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v19, v16);
  }
  sub_1DC88D674();
}

void sub_1DC889940()
{
}

void sub_1DC889964()
{
}

uint64_t type metadata accessor for SharedLogMelSpectrogram.Configuration.CodingKeys()
{
  return swift_getGenericMetadata();
}

unint64_t sub_1DC889994()
{
  unint64_t result = qword_1EAA9DA38;
  if (!qword_1EAA9DA38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DA38);
  }
  return result;
}

unint64_t sub_1DC8899E0()
{
  unint64_t result = qword_1EAA9DA40;
  if (!qword_1EAA9DA40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DA40);
  }
  return result;
}

uint64_t sub_1DC889A2C(void *__src)
{
  memcpy(__dst, __src, sizeof(__dst));
  swift_retain();
  swift_retain();
  sub_1DC882264((uint64_t)__src);
  sub_1DCAC3424();
  uint64_t v3 = v2;
  sub_1DC88CABC((uint64_t)__src);
  swift_release();
  swift_release();
  return v3;
}

uint64_t sub_1DC889B00()
{
  uint64_t v1 = (_OWORD *)swift_allocObject();
  long long v2 = v0[1];
  v1[1] = *v0;
  v1[2] = v2;
  long long v3 = v0[3];
  v1[3] = v0[2];
  v1[4] = v3;
  swift_retain();
  sub_1DC88D0CC((uint64_t)v0);
  sub_1DCAC3838();
  uint64_t v5 = v4;
  swift_release();
  swift_release();
  return v5;
}

void sub_1DC889BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_1DC88D6B0();
  a19 = v21;
  a20 = v22;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  sub_1DC88D538();
  uint64_t v30 = v29;
  uint64_t v32 = *(void *)(v31 + 64);
  MEMORY[0x1F4188790](v33);
  uint64_t v34 = (char *)v47 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(v35 + 16))(v36, v35);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v34, v20, v26);
  unint64_t v38 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = v26;
  *(void *)(v39 + 24) = v24;
  (*(void (**)(unint64_t, char *, uint64_t))(v30 + 32))(v39 + v38, v34, v26);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v41 = sub_1DC88D624();
  uint64_t v42 = sub_1DC88D624();
  uint64_t v43 = sub_1DC88D624();
  v47[2] = AssociatedTypeWitness;
  v47[3] = v41;
  v47[4] = v42;
  v47[5] = v43;
  uint64_t v44 = type metadata accessor for SharedLogMelSpectrogram.Configuration();
  uint64_t v45 = type metadata accessor for SharedLogMelSpectrogram.Instance();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_1DCACBE9C(v28, v37, (uint64_t)sub_1DC88CE5C, v39, v44, v45, WitnessTable, (uint64_t)&a10);
  swift_release();
  swift_release();
  sub_1DC88D674();
}

uint64_t sub_1DC889DF4(uint64_t a1)
{
  return sub_1DC889E68(a1);
}

uint64_t sub_1DC889E18(uint64_t a1)
{
  return sub_1DC88A824(a1, sub_1DC88D17C);
}

uint64_t sub_1DC889E68(uint64_t a1)
{
  long long v3 = &v4;
  return sub_1DC889FD4(a1, (uint64_t (*)(void *))sub_1DC88CB08, v2);
}

uint64_t sub_1DC889EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v10[2] = a2;
  v10[3] = a3;
  v10[4] = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v6 = sub_1DC88D5E4();
  uint64_t v7 = sub_1DC88D5E4();
  uint64_t v8 = sub_1DC88D5E4();
  return sub_1DC88AFA0(a1, sub_1DC88CDA0, (uint64_t)v10, AssociatedTypeWitness, v6, v7, v8);
}

uint64_t sub_1DC889F8C(void *a1)
{
  return sub_1DC9A7F88(a1);
}

uint64_t sub_1DC889FB0(uint64_t a1, uint64_t a2)
{
  return sub_1DC9A805C(a1, a2);
}

uint64_t sub_1DC889FD4(uint64_t a1, uint64_t (*a2)(void *), unsigned char *a3)
{
  uint64_t v69 = a3;
  uint64_t v71 = a2;
  uint64_t v61 = sub_1DC87E988(&qword_1EAA9DA48);
  MEMORY[0x1F4188790]();
  float32x4_t v64 = &v50[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v63 = sub_1DC87E988(&qword_1EAA9DA50);
  uint64_t v62 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v68 = &v50[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v65 = sub_1DC87E988(&qword_1EAA9DA58);
  MEMORY[0x1F4188790]();
  uint64_t v66 = &v50[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1DC87E988(&qword_1EAA9DA60);
  MEMORY[0x1F4188790]();
  uint64_t v9 = &v50[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = sub_1DC87E988(&qword_1EAA9DA68);
  uint64_t v67 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v12 = &v50[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = sub_1DCB86BF8();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v16 = &v50[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1DC882264(a1);
  uint64_t v17 = sub_1DC88BA0C(a1);
  if (v3) {
    return sub_1DC88CABC(a1);
  }
  uint64_t v19 = v17;
  uint64_t v56 = v9;
  uint64_t v57 = v12;
  uint64_t v58 = v10;
  uint64_t v59 = v14;
  uint64_t v60 = v13;
  memcpy(__dst, (const void *)a1, 0x41uLL);
  __dst[9] = 1;
  __dst[10] = v19;
  uint64_t v20 = v71(__dst);
  sub_1DC88CABC(a1);
  uint64_t v69 = v16;
  sub_1DCB86BE8();
  uint64_t v71 = (uint64_t (*)(void *))v20;
  __dst[0] = sub_1DC9A7A54();
  sub_1DC87E988((uint64_t *)&unk_1EAA9F020);
  uint64_t v21 = sub_1DC87E988(&qword_1EAA9E860);
  sub_1DC88CF34((unint64_t *)&unk_1EAAA5180, (uint64_t *)&unk_1EAA9F020);
  uint64_t v22 = v68;
  sub_1DCB873D8();
  uint64_t result = swift_release();
  int v23 = *(_DWORD *)(a1 + 104);
  int v55 = *(_DWORD *)(a1 + 100);
  int v54 = v23;
  uint64_t v24 = (v23 + v55);
  if (__CFADD__(v23, v55))
  {
    __break(1u);
  }
  else
  {
    int v52 = *(unsigned char *)(a1 + 92) & 1;
    int v25 = *(_DWORD *)(a1 + 88);
    int v51 = *(_DWORD *)(a1 + 84);
    int v26 = *(_DWORD *)(a1 + 72);
    int v27 = *(_DWORD *)(a1 + 68);
    int v53 = *(_DWORD *)(a1 + 116);
    uint64_t v28 = *(unsigned int *)(a1 + 96);
    uint64_t v29 = v62;
    uint64_t v30 = *(void *)(a1 + 108);
    uint64_t v31 = *(void *)(a1 + 76);
    uint64_t v32 = (uint64_t)v64;
    uint64_t v33 = v63;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v62 + 16))(v64, v22, v63);
    uint64_t v34 = v61;
    *(void *)(v32 + *(int *)(v61 + 60)) = v24;
    *(void *)(v32 + *(int *)(v34 + 64)) = v28;
    *(void *)(v32 + *(int *)(v34 + 68)) = v21;
    uint64_t v35 = swift_allocObject();
    *(_DWORD *)(v35 + 16) = v27;
    *(_DWORD *)(v35 + 20) = v26;
    *(void *)(v35 + 24) = v31;
    *(_DWORD *)(v35 + 32) = v51;
    *(_DWORD *)(v35 + 36) = v25;
    *(unsigned char *)(v35 + 40) = v52;
    int v36 = v55;
    *(_DWORD *)(v35 + 44) = v28;
    *(_DWORD *)(v35 + 48) = v36;
    *(_DWORD *)(v35 + 52) = v54;
    *(void *)(v35 + 56) = v30;
    *(_DWORD *)(v35 + 64) = v53;
    uint64_t v37 = v66;
    sub_1DC88CB44(v32, (uint64_t)v66);
    uint64_t v38 = v65;
    uint64_t v39 = (uint64_t (**)@<X0>(uint64_t *@<X8>))&v37[*(int *)(v65 + 52)];
    *uint64_t v39 = sub_1DC88CB28;
    v39[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v35;
    uint64_t v40 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t *@<X1>, uint64_t *@<X8>))&v37[*(int *)(v38 + 56)];
    *uint64_t v40 = sub_1DC88C914;
    v40[1] = 0;
    sub_1DC88CC04(v32, &qword_1EAA9DA48);
    (*(void (**)(unsigned char *, uint64_t))(v29 + 8))(v22, v33);
    uint64_t v41 = swift_allocObject();
    *(void *)(v41 + 16) = sub_1DC88BCAC;
    *(void *)(v41 + 24) = 0;
    sub_1DC87E988(&qword_1EAA9DA70);
    sub_1DC88CF34(&qword_1EAA9DA78, &qword_1EAA9DA58);
    sub_1DC88CF34(&qword_1EAA9DA80, &qword_1EAA9DA70);
    uint64_t v42 = (uint64_t)v56;
    sub_1DCB874D8();
    swift_release();
    sub_1DC88CC04((uint64_t)v37, &qword_1EAA9DA58);
    __dst[0] = 0;
    __dst[1] = 0xE000000000000000;
    sub_1DCB88A98();
    swift_bridgeObjectRelease();
    __dst[0] = 0xD000000000000021;
    __dst[1] = 0x80000001DCB90490;
    sub_1DC88CBB4();
    uint64_t v43 = v69;
    uint64_t v44 = v60;
    sub_1DCB88F98();
    sub_1DCB87A18();
    swift_bridgeObjectRelease();
    sub_1DCB87A18();
    uint64_t v45 = v57;
    sub_1DCB0437C();
    swift_bridgeObjectRelease();
    sub_1DC88CC04(v42, &qword_1EAA9DA60);
    sub_1DC88CF34(&qword_1EAA9DA88, &qword_1EAA9DA68);
    uint64_t v46 = v58;
    uint64_t v47 = sub_1DCB87468();
    sub_1DC87E988(&qword_1EAA9DA90);
    swift_allocObject();
    uint64_t v48 = sub_1DC9C5478(v47);
    (*(void (**)(unsigned char *, uint64_t))(v67 + 8))(v45, v46);
    __dst[0] = v48;
    sub_1DC88CF34(&qword_1EAA9DA98, &qword_1EAA9DA90);
    uint64_t v49 = sub_1DCB873A8();
    swift_release();
    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v59 + 8))(v43, v44);
    type metadata accessor for SharedLogMelSpectrogram.Instance();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v49;
  }
  return result;
}

uint64_t sub_1DC88A824(uint64_t a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v5 = (int *)sub_1DC87E988(&qword_1EAA9DA48);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_1DC87E988(&qword_1EAA9DA50);
  uint64_t v52 = *(void *)(v62 - 8);
  MEMORY[0x1F4188790](v62);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_1DC87E988(&qword_1EAA9DA58);
  MEMORY[0x1F4188790](v53);
  uint64_t v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1DC87E988(&qword_1EAA9DA60);
  MEMORY[0x1F4188790](v12 - 8);
  int v54 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1DC87E988(&qword_1EAA9DA68);
  uint64_t v56 = *(void *)(v14 - 8);
  uint64_t v57 = v14;
  MEMORY[0x1F4188790](v14);
  int v55 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1DCB86BF8();
  uint64_t v58 = *(void *)(v16 - 8);
  uint64_t v59 = v16;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_1DC88BA84((float *)a1);
  if (!v2)
  {
    uint64_t v60 = 1;
    unint64_t v61 = result;
    uint64_t v20 = a2(&v60);
    uint64_t v49 = v18;
    sub_1DCB86BE8();
    uint64_t v50 = v20;
    uint64_t v60 = sub_1DC9A7A54();
    uint64_t v51 = sub_1DC87E988((uint64_t *)&unk_1EAA9F020);
    uint64_t v21 = sub_1DC87E988(&qword_1EAA9E860);
    sub_1DC88CF34((unint64_t *)&unk_1EAAA5180, (uint64_t *)&unk_1EAA9F020);
    uint64_t v51 = v21;
    sub_1DCB873D8();
    uint64_t result = swift_release();
    int v22 = *(_DWORD *)(a1 + 32);
    int v47 = *(_DWORD *)(a1 + 36);
    int v48 = v22;
    uint64_t v23 = (v47 + v22);
    if (__CFADD__(v47, v22))
    {
      __break(1u);
    }
    else
    {
      int v24 = *(unsigned char *)(a1 + 24) & 1;
      int v25 = *(_DWORD *)(a1 + 20);
      int v44 = *(_DWORD *)(a1 + 16);
      int v45 = v24;
      int v43 = *(_DWORD *)(a1 + 4);
      float v26 = *(float *)a1;
      int v46 = *(_DWORD *)(a1 + 48);
      uint64_t v27 = *(unsigned int *)(a1 + 28);
      uint64_t v28 = v52;
      (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v7, v9, v62);
      *(void *)&v7[v5[15]] = v23;
      *(void *)&v7[v5[16]] = v27;
      *(void *)&v7[v5[17]] = v51;
      uint64_t v29 = swift_allocObject();
      *(float *)(v29 + 16) = v26;
      *(_DWORD *)(v29 + 20) = v43;
      *(void *)(v29 + 24) = *(void *)(a1 + 8);
      *(_DWORD *)(v29 + 32) = v44;
      *(_DWORD *)(v29 + 36) = v25;
      *(unsigned char *)(v29 + 40) = v45;
      int v30 = v48;
      *(_DWORD *)(v29 + 44) = v27;
      *(_DWORD *)(v29 + 48) = v30;
      *(_DWORD *)(v29 + 52) = v47;
      *(void *)(v29 + 56) = *(void *)(a1 + 40);
      *(_DWORD *)(v29 + 64) = v46;
      sub_1DC88CB44((uint64_t)v7, (uint64_t)v11);
      uint64_t v31 = v53;
      uint64_t v32 = (uint64_t (**)@<X0>(uint64_t *@<X8>))&v11[*(int *)(v53 + 52)];
      *uint64_t v32 = sub_1DC88D51C;
      v32[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v29;
      uint64_t v33 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t *@<X1>, uint64_t *@<X8>))&v11[*(int *)(v31 + 56)];
      *uint64_t v33 = sub_1DC88C914;
      v33[1] = 0;
      sub_1DC88CC04((uint64_t)v7, &qword_1EAA9DA48);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v62);
      uint64_t v34 = swift_allocObject();
      *(void *)(v34 + 16) = sub_1DC88BCAC;
      *(void *)(v34 + 24) = 0;
      sub_1DC87E988(&qword_1EAA9DA70);
      sub_1DC88CF34(&qword_1EAA9DA78, &qword_1EAA9DA58);
      sub_1DC88CF34(&qword_1EAA9DA80, &qword_1EAA9DA70);
      uint64_t v35 = (uint64_t)v54;
      sub_1DCB874D8();
      swift_release();
      sub_1DC88CC04((uint64_t)v11, &qword_1EAA9DA58);
      uint64_t v60 = 0;
      unint64_t v61 = 0xE000000000000000;
      sub_1DCB88A98();
      swift_bridgeObjectRelease();
      uint64_t v60 = 0xD000000000000021;
      unint64_t v61 = 0x80000001DCB90490;
      sub_1DC88CBB4();
      int v36 = v49;
      uint64_t v37 = v59;
      sub_1DCB88F98();
      sub_1DCB87A18();
      swift_bridgeObjectRelease();
      sub_1DCB87A18();
      uint64_t v38 = v55;
      sub_1DCB0437C();
      swift_bridgeObjectRelease();
      sub_1DC88CC04(v35, &qword_1EAA9DA60);
      sub_1DC88CF34(&qword_1EAA9DA88, &qword_1EAA9DA68);
      uint64_t v39 = v57;
      uint64_t v40 = sub_1DCB87468();
      sub_1DC87E988(&qword_1EAA9DA90);
      swift_allocObject();
      uint64_t v41 = sub_1DC9C5478(v40);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v38, v39);
      uint64_t v60 = v41;
      sub_1DC88CF34(&qword_1EAA9DA98, &qword_1EAA9DA90);
      uint64_t v42 = sub_1DCB873A8();
      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v36, v37);
      type metadata accessor for SharedLogMelSpectrogram.Instance();
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v42;
    }
  }
  return result;
}

uint64_t sub_1DC88AFA0(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v87 = a3;
  uint64_t v88 = a2;
  uint64_t v72 = sub_1DC87E988(&qword_1EAA9DA48);
  sub_1DC88819C();
  MEMORY[0x1F4188790](v12);
  sub_1DC88D550();
  uint64_t v75 = v13;
  uint64_t v74 = sub_1DC87E988(&qword_1EAA9DA50);
  sub_1DC88D538();
  uint64_t v73 = v14;
  MEMORY[0x1F4188790](v15);
  sub_1DC88D550();
  uint64_t v84 = v16;
  uint64_t v76 = sub_1DC87E988(&qword_1EAA9DA58);
  sub_1DC88819C();
  MEMORY[0x1F4188790](v17);
  sub_1DC88D550();
  uint64_t v77 = v18;
  uint64_t v19 = sub_1DC87E988(&qword_1EAA9DA60);
  MEMORY[0x1F4188790](v19 - 8);
  sub_1DC88D550();
  uint64_t v78 = v20;
  sub_1DC87E988(&qword_1EAA9DA68);
  sub_1DC88D538();
  uint64_t v80 = v22;
  uint64_t v81 = v21;
  MEMORY[0x1F4188790](v21);
  sub_1DC88D550();
  uint64_t v79 = v23;
  sub_1DCB86BF8();
  sub_1DC88D538();
  uint64_t v82 = v25;
  uint64_t v83 = v24;
  MEMORY[0x1F4188790](v24);
  sub_1DC88D550();
  uint64_t v85 = v26;
  sub_1DC88D538();
  uint64_t v28 = v27;
  MEMORY[0x1F4188790](v29);
  uint64_t v31 = (char *)&v71 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = a4;
  unint64_t v93 = a5;
  uint64_t v94 = a6;
  uint64_t v95 = a7;
  type metadata accessor for SharedReformattedAudioSource.Configuration();
  sub_1DC88D538();
  uint64_t v86 = v32;
  sub_1DC88D668();
  MEMORY[0x1F4188790](v33);
  uint64_t v90 = (uint64_t)&v71 - v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v31, a1, a4);
  unint64_t v89 = a5;
  uint64_t v35 = v91;
  uint64_t v36 = sub_1DC88BAFC(a1);
  if (v35) {
    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v31, a4);
  }
  uint64_t v91 = a1;
  uint64_t v38 = v90;
  sub_1DC9A79A8(1, v36, v90);
  uint64_t v39 = v88(v38);
  uint64_t v88 = 0;
  uint64_t v40 = sub_1DC88D710();
  v41(v40);
  sub_1DCB86BE8();
  uint64_t v90 = v39;
  uint64_t v92 = sub_1DC9A7A54();
  sub_1DC87E988((uint64_t *)&unk_1EAA9F020);
  uint64_t v42 = sub_1DC87E988(&qword_1EAA9E860);
  sub_1DC88CF34((unint64_t *)&unk_1EAAA5180, (uint64_t *)&unk_1EAA9F020);
  uint64_t v87 = v42;
  sub_1DCB873D8();
  swift_release();
  uint64_t v92 = a4;
  unint64_t v93 = v89;
  uint64_t v94 = a6;
  uint64_t v95 = a7;
  uint64_t result = type metadata accessor for SharedLogMelSpectrogram.Configuration();
  uint64_t v43 = v91 + *(int *)(result + 52);
  int v44 = *(_DWORD *)(v43 + 36);
  LODWORD(v91) = *(_DWORD *)(v43 + 32);
  uint64_t v45 = (v44 + v91);
  if (__CFADD__(v44, v91))
  {
    __break(1u);
  }
  else
  {
    LODWORD(v86) = *(unsigned __int8 *)(v43 + 24);
    LODWORD(v89) = *(_DWORD *)(v43 + 48);
    uint64_t v46 = *(unsigned int *)(v43 + 28);
    int v47 = *(_DWORD *)(v43 + 20);
    int v48 = *(_DWORD *)(v43 + 16);
    int v49 = *(_DWORD *)(v43 + 4);
    int v50 = *(_DWORD *)v43;
    uint64_t v51 = v73;
    uint64_t v52 = *(void *)(v43 + 40);
    uint64_t v53 = *(void *)(v43 + 8);
    uint64_t v54 = v75;
    uint64_t v55 = v84;
    uint64_t v56 = v74;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16))(v75, v84, v74);
    uint64_t v57 = v72;
    *(void *)(v54 + *(int *)(v72 + 60)) = v45;
    *(void *)(v54 + *(int *)(v57 + 64)) = v46;
    *(void *)(v54 + *(int *)(v57 + 68)) = v87;
    uint64_t v58 = swift_allocObject();
    *(_DWORD *)(v58 + 16) = v50;
    *(_DWORD *)(v58 + 20) = v49;
    *(void *)(v58 + 24) = v53;
    *(_DWORD *)(v58 + 32) = v48;
    *(_DWORD *)(v58 + 36) = v47;
    *(unsigned char *)(v58 + 40) = v86;
    *(_WORD *)(v58 + 41) = v96;
    *(unsigned char *)(v58 + 43) = v97;
    int v59 = v91;
    *(_DWORD *)(v58 + 44) = v46;
    *(_DWORD *)(v58 + 48) = v59;
    *(_DWORD *)(v58 + 52) = v44;
    *(void *)(v58 + 56) = v52;
    *(_DWORD *)(v58 + 64) = v89;
    uint64_t v60 = v77;
    sub_1DC88CB44(v54, v77);
    uint64_t v61 = v76;
    uint64_t v62 = (uint64_t (**)@<X0>(uint64_t *@<X8>))(v60 + *(int *)(v76 + 52));
    *uint64_t v62 = sub_1DC88D51C;
    v62[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v58;
    uint64_t v63 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t *@<X1>, uint64_t *@<X8>))(v60 + *(int *)(v61 + 56));
    *uint64_t v63 = sub_1DC88C914;
    v63[1] = 0;
    sub_1DC88CC04(v54, &qword_1EAA9DA48);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v55, v56);
    uint64_t v64 = swift_allocObject();
    *(void *)(v64 + 16) = sub_1DC88BCAC;
    *(void *)(v64 + 24) = 0;
    sub_1DC87E988(&qword_1EAA9DA70);
    sub_1DC88CF34(&qword_1EAA9DA78, &qword_1EAA9DA58);
    sub_1DC88CF34(&qword_1EAA9DA80, &qword_1EAA9DA70);
    uint64_t v65 = v78;
    sub_1DCB874D8();
    swift_release();
    sub_1DC88CC04(v60, &qword_1EAA9DA58);
    uint64_t v92 = 0;
    unint64_t v93 = 0xE000000000000000;
    sub_1DCB88A98();
    swift_bridgeObjectRelease();
    uint64_t v92 = 0xD000000000000021;
    unint64_t v93 = 0x80000001DCB90490;
    sub_1DC88CBB4();
    sub_1DCB88F98();
    sub_1DCB87A18();
    swift_bridgeObjectRelease();
    sub_1DCB87A18();
    sub_1DCB0437C();
    swift_bridgeObjectRelease();
    sub_1DC88CC04(v65, &qword_1EAA9DA60);
    sub_1DC88CF34(&qword_1EAA9DA88, &qword_1EAA9DA68);
    uint64_t v66 = sub_1DCB87468();
    sub_1DC87E988(&qword_1EAA9DA90);
    swift_allocObject();
    uint64_t v67 = sub_1DC9C5478(v66);
    sub_1DC88D5C8();
    v68();
    uint64_t v92 = v67;
    sub_1DC88CF34(&qword_1EAA9DA98, &qword_1EAA9DA90);
    uint64_t v69 = sub_1DCB873A8();
    swift_release();
    swift_release();
    sub_1DC88D5C8();
    v70();
    type metadata accessor for SharedLogMelSpectrogram.Instance();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v69;
  }
  return result;
}

uint64_t sub_1DC88B820(void *a1)
{
  swift_retain();
  uint64_t v2 = sub_1DC889A2C(a1);
  swift_release();
  return v2;
}

uint64_t sub_1DC88B874(void *a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v2 = sub_1DC889A2C(a1);
  swift_release();
  swift_release();
  swift_release();
  return v2;
}

void sub_1DC88B8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_1DC88D6B0();
  a19 = v20;
  a20 = v21;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_1DC88D538();
  uint64_t v32 = v31;
  sub_1DC88D668();
  MEMORY[0x1F4188790](v33);
  uint64_t v35 = (char *)&a9 - v34;
  (*(void (**)(uint64_t, uint64_t))(v25 + 16))(v27, v25);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 40))(v29, AssociatedTypeWitness, v23);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v35, AssociatedTypeWitness);
  sub_1DC88D674();
}

uint64_t sub_1DC88BA0C(uint64_t a1)
{
  float v1 = *(float *)(a1 + 68);
  float v2 = truncf(v1);
  if (v1 > -9.2234e18 && v1 < 9.2234e18 && v1 == v2) {
    return (uint64_t)v1;
  }
  sub_1DC88CC90();
  swift_allocError();
  return swift_willThrow();
}

uint64_t sub_1DC88BA84(float *a1)
{
  float v1 = *a1;
  float v2 = truncf(*a1);
  if (*a1 > -9.2234e18 && v1 < 9.2234e18 && v1 == v2) {
    return (uint64_t)v1;
  }
  sub_1DC88CC90();
  swift_allocError();
  return swift_willThrow();
}

uint64_t sub_1DC88BAFC(uint64_t a1)
{
  float v1 = *(float *)(a1 + *(int *)(type metadata accessor for SharedLogMelSpectrogram.Configuration() + 52));
  float v2 = truncf(v1);
  if (v1 > -9.2234e18 && v1 < 9.2234e18 && v1 == v2) {
    return (uint64_t)v1;
  }
  sub_1DC88CC90();
  swift_allocError();
  return swift_willThrow();
}

uint64_t sub_1DC88BB98@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  if (((*(void *)(result + 16) | *(void *)(result + 8)) & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = sub_1DC88BBF8(0);
    *a2 = result;
    a2[1] = v3;
    a2[2] = v4;
    a2[3] = v5;
  }
  return result;
}

uint64_t sub_1DC88BBF8(uint64_t result)
{
  uint64_t v2 = v1[2];
  uint64_t v3 = v2 * result;
  if ((unsigned __int128)(v2 * (__int128)result) >> 64 != (v2 * result) >> 63)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v4 = v1[5];
  unint64_t v5 = v3 + v4;
  if (__OFADD__(v3, v4))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v6 = v1[6];
  BOOL v7 = __OFADD__(v3, v6);
  uint64_t v8 = v3 + v6;
  if (v7)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v8 < (uint64_t)v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v9 = *v1;
  unint64_t v10 = *(void *)(*v1 + 16);
  if (v10 >= v5 && (uint64_t)v10 >= v8)
  {
    sub_1DC88CD74((uint64_t)v1);
    return v9;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_1DC88BCAC(void *a1)
{
  uint64_t v2 = sub_1DC87E988(&qword_1EAAAA7F0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790]();
  unint64_t v5 = (char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7[1] = *a1;
  sub_1DC87E988((uint64_t *)&unk_1EAAAA800);
  sub_1DC88CF34(&qword_1EAA9DAA0, (uint64_t *)&unk_1EAAAA800);
  sub_1DCB87AE8();
  sub_1DC87E988(&qword_1EAA9DF60);
  sub_1DCB87178();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1DC88BDF8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  sub_1DC88D590(a1, a2, a3, a4, a5, a6, a7, a8, v10, v11);
  sub_1DC88D604();
  return sub_1DC88B874(v8);
}

uint64_t sub_1DC88BE28(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  sub_1DC88D590(a1, a2, a3, a4, a5, a6, a7, a8, v9, v10[0]);
  return sub_1DC889E68((uint64_t)v10);
}

uint64_t sub_1DC88BE60(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  sub_1DC88D590(a1, a2, a3, a4, a5, a6, a7, a8, v9, __src[0]);
  return sub_1DC889A2C(__src);
}

uint64_t sub_1DC88BE98(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  sub_1DC88D590(a1, a2, a3, a4, a5, a6, a7, a8, v10, v11);
  sub_1DC88D604();
  return sub_1DC88B820(v8);
}

uint64_t sub_1DC88BEC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_1DC88BFC0(a1, a2);
  uint64_t v4 = *(void *)(v3 + 16);
  swift_bridgeObjectRelease();
  if (v4)
  {
    swift_bridgeObjectRelease();
    sub_1DC88CCDC();
    swift_allocError();
    *unint64_t v5 = 0;
    swift_willThrow();
  }
  return v2;
}

uint64_t sub_1DC88BF44(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = sub_1DC88C150(a1, a2, a3);
  uint64_t v5 = *(void *)(v4 + 16);
  swift_bridgeObjectRelease();
  if (v5)
  {
    swift_bridgeObjectRelease();
    sub_1DC88CCDC();
    swift_allocError();
    *uint64_t v6 = 0;
    swift_willThrow();
  }
  return v3;
}

uint64_t sub_1DC88BFC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  uint64_t v6 = MEMORY[0x1E4FBC860];
  uint64_t v7 = MEMORY[0x1E4FBC860];
  uint64_t v8 = MEMORY[0x1E4FBC860];
  do
  {
    int v9 = *(_DWORD *)(a1 + 4 * v5 + 32);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1DCA72BE4();
      uint64_t v8 = v13;
    }
    unint64_t v10 = *(void *)(v8 + 16);
    int64_t v11 = v10 + 1;
    if (v10 >= *(void *)(v8 + 24) >> 1)
    {
      sub_1DCA72BE4();
      uint64_t v8 = v14;
    }
    *(void *)(v8 + 16) = v11;
    *(_DWORD *)(v8 + 4 * v10 + 32) = v9;
    if (v11 >= a2)
    {
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1DCA72BB0();
        uint64_t v7 = v15;
      }
      unint64_t v12 = *(void *)(v7 + 16);
      if (v12 >= *(void *)(v7 + 24) >> 1)
      {
        sub_1DCA72BB0();
        uint64_t v7 = v16;
      }
      *(void *)(v7 + 16) = v12 + 1;
      *(void *)(v7 + 8 * v12 + 32) = v8;
      swift_bridgeObjectRelease();
      uint64_t v8 = v6;
    }
    ++v5;
  }
  while (v2 != v5);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1DC88C150(int *a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || !a2) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v4 = a1;
  uint64_t v5 = 4 * a2;
  uint64_t v6 = MEMORY[0x1E4FBC860];
  uint64_t v7 = MEMORY[0x1E4FBC860];
  uint64_t v8 = MEMORY[0x1E4FBC860];
  do
  {
    int v9 = *v4;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1DCA72BE4();
      uint64_t v8 = v13;
    }
    unint64_t v10 = *(void *)(v8 + 16);
    uint64_t v11 = v10 + 1;
    if (v10 >= *(void *)(v8 + 24) >> 1)
    {
      sub_1DCA72BE4();
      uint64_t v8 = v14;
    }
    *(void *)(v8 + 16) = v11;
    *(_DWORD *)(v8 + 4 * v10 + 32) = v9;
    if (v11 >= a3)
    {
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1DCA72BB0();
        uint64_t v7 = v15;
      }
      unint64_t v12 = *(void *)(v7 + 16);
      if (v12 >= *(void *)(v7 + 24) >> 1)
      {
        sub_1DCA72BB0();
        uint64_t v7 = v16;
      }
      *(void *)(v7 + 16) = v12 + 1;
      *(void *)(v7 + 8 * v12 + 32) = v8;
      swift_bridgeObjectRelease();
      uint64_t v8 = v6;
    }
    ++v4;
    v5 -= 4;
  }
  while (v5);
  return v7;
}

#error "1DC88C32C: call analysis failed (funcsize=30)"

uint64_t sub_1DC88C344()
{
  sub_1DC88D6FC();
  uint64_t WitnessTable = swift_getWitnessTable();
  return sub_1DC88D644(WitnessTable);
}

#error "1DC88C3B8: call analysis failed (funcsize=16)"

uint64_t sub_1DC88C3CC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unsigned int v12 = sub_1DCA0E918(*(unsigned int **)(a5 + 16));
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = v12;
    uint64_t v13 = sub_1DCAA73A4((a4 >> 1) - a3, a5);
    if ((unsigned __int128)(v13 * (__int128)v5) >> 64 == (v13 * v5) >> 63)
    {
      uint64_t v20 = a1;
      uint64_t v14 = sub_1DCB127F0(v13 * v5, 0.0);
      a1 = a2 + 4 * a3;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_10:
  sub_1DC987124();
  uint64_t v14 = v18;
LABEL_4:
  uint64_t v15 = *(void *)(v14 + 16);
  v19[0] = v14 + 32;
  v19[1] = v15;
  sub_1DC88C684(v19, a1, (a4 >> 1) - a3, v20, a2, a3, a4, a5);
  if (v6)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = swift_bridgeObjectRetain();
    uint64_t v5 = sub_1DC88BEC8(v16, v5);
    swift_bridgeObjectRelease_n();
  }
  return v5;
}

uint64_t sub_1DC88C510(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int **)(a2 + 16);
  uint64_t v5 = sub_1DCA0E918(v4);
  unint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = sub_1DCAA73A4(v6, a2);
  if ((unsigned __int128)(v7 * (__int128)v5) >> 64 == (v7 * v5) >> 63)
  {
    uint64_t v8 = sub_1DCB127F0(v7 * v5, 0.0);
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  sub_1DC987124();
  uint64_t v8 = v12;
LABEL_3:
  if (HIDWORD(v6))
  {
    uint64_t result = sub_1DCB88C58();
    __break(1u);
  }
  else
  {
    if (sub_1DCB5E1BC(v8 + 32, a1 + 32, v6, (uint64_t)v4))
    {
      uint64_t v9 = swift_bridgeObjectRetain();
      uint64_t v5 = sub_1DC88BEC8(v9, v5);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      sub_1DC88CD28();
      swift_allocError();
      *unint64_t v10 = 1;
      swift_willThrow();
      swift_bridgeObjectRelease();
    }
    return v5;
  }
  return result;
}

uint64_t sub_1DC88C684(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a1;
  if (!v8 || !a2)
  {
    char v11 = 0;
    goto LABEL_9;
  }
  unint64_t v9 = (a7 >> 1) - a6;
  if (__OFSUB__(a7 >> 1, a6))
  {
    __break(1u);
LABEL_12:
    uint64_t result = sub_1DCB88C58();
    __break(1u);
    return result;
  }
  if ((v9 & 0x8000000000000000) != 0 || HIDWORD(v9)) {
    goto LABEL_12;
  }
  uint64_t result = sub_1DCB5E1BC(v8, a2, v9, *(void *)(a8 + 16));
  if (result) {
    return result;
  }
  char v11 = 1;
LABEL_9:
  sub_1DC88CD28();
  swift_allocError();
  *uint64_t v12 = v11;
  return swift_willThrow();
}

uint64_t sub_1DC88C7A0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  return sub_1DC88C3CC(a1, a2, a3, a4, *a5);
}

uint64_t sub_1DC88C7BC(uint64_t a1, uint64_t *a2)
{
  return sub_1DC88C510(a1, *a2);
}

uint64_t sub_1DC88C7D8()
{
  sub_1DC88D6FC();
  uint64_t WitnessTable = swift_getWitnessTable();
  return sub_1DC88D644(WitnessTable);
}

#error "1DC88C84C: call analysis failed (funcsize=16)"

#error "1DC88C8C8: call analysis failed (funcsize=30)"

void sub_1DC88C8E0(void *a1@<X8>)
{
  sub_1DCB05904();
  *a1 = v2;
}

uint64_t sub_1DC88C90C(void *a1)
{
  return sub_1DCB19D6C(*a1);
}

uint64_t sub_1DC88C914@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_1DC88C7A0(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t sub_1DC88C950(void *__src)
{
  memcpy(__dst, __src, sizeof(__dst));
  return sub_1DC889F8C(__dst);
}

uint64_t sub_1DC88C99C@<X0>(void *__src@<X0>, void *a2@<X8>)
{
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t result = sub_1DC889DF4((uint64_t)__dst);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1DC88C9FC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1DC88C99C(a1, a2);
}

uint64_t sub_1DC88CA24@<X0>(void *__src@<X3>, void *a2@<X8>)
{
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t result = sub_1DCAC45B4();
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1DC88CA9C@<X0>(void *a1@<X8>)
{
  return sub_1DC88CA24(*(void **)(v1 + 32), a1);
}

uint64_t sub_1DC88CABC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1DC88CB08(void *a1)
{
  return sub_1DC88C950(a1);
}

uint64_t sub_1DC88CB28@<X0>(uint64_t *a1@<X8>)
{
  return sub_1DCAB65B4(v1 + 16, a1);
}

uint64_t sub_1DC88CB44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1DC87E988(&qword_1EAA9DA48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1DC88CBAC(void *a1)
{
  return sub_1DC88C90C(a1);
}

unint64_t sub_1DC88CBB4()
{
  unint64_t result = qword_1EAAA41A0;
  if (!qword_1EAAA41A0)
  {
    sub_1DCB86BF8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1EAAA41A0);
  }
  return result;
}

uint64_t sub_1DC88CC04(uint64_t a1, uint64_t *a2)
{
  sub_1DC87E988(a2);
  sub_1DC88819C();
  sub_1DC88D5C8();
  v3();
  return a1;
}

uint64_t sub_1DC88CC58()
{
  swift_release();

  return swift_deallocObject();
}

unint64_t sub_1DC88CC90()
{
  unint64_t result = qword_1EAA9DAA8;
  if (!qword_1EAA9DAA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DAA8);
  }
  return result;
}

unint64_t sub_1DC88CCDC()
{
  unint64_t result = qword_1EAAA8620;
  if (!qword_1EAAA8620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAAA8620);
  }
  return result;
}

unint64_t sub_1DC88CD28()
{
  unint64_t result = qword_1EAA9DAB0;
  if (!qword_1EAA9DAB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DAB0);
  }
  return result;
}

uint64_t sub_1DC88CD74(uint64_t a1)
{
  return a1;
}

uint64_t sub_1DC88CDA0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 + 32) + 40))(a1, *(void *)(v1 + 16));
}

uint64_t sub_1DC88CDD8()
{
  sub_1DC88D5C8();
  v0();

  return swift_deallocObject();
}

uint64_t sub_1DC88CE5C@<X0>(uint64_t *a1@<X8>)
{
  sub_1DC88D6C8();
  uint64_t result = v3();
  if (!v1) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_1DC88CEC8@<X0>(void *a1@<X8>)
{
  *a1 = v1;
  return swift_retain();
}

uint64_t sub_1DC88CEE8()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void sub_1DC88CF28(void *a1@<X8>)
{
}

uint64_t sub_1DC88CF34(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1DC8863A8(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1DC88CF78@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t *a3@<X8>)
{
  long long v5 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v5;
  v9[2] = *(_OWORD *)(a1 + 32);
  int v10 = *(_DWORD *)(a1 + 48);
  long long v6 = a2[1];
  long long v11 = *a2;
  long long v12 = v6;
  long long v7 = a2[3];
  long long v13 = a2[2];
  long long v14 = v7;
  uint64_t result = sub_1DC889E18((uint64_t)v9);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t sub_1DC88CFDC()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1DC88D03C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1DC88CF78(a1, (long long *)(v2 + 16), a2);
}

uint64_t sub_1DC88D058@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1DCAC4854(*a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1DC88D0AC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1DC88D058(a1, a2);
}

uint64_t sub_1DC88D0CC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1DC88D13C(uint64_t *a1)
{
  return sub_1DC889FB0(*a1, a1[1]);
}

uint64_t sub_1DC88D17C(uint64_t *a1)
{
  return sub_1DC88D13C(a1);
}

uint64_t getEnumTagSinglePayload for SharedLogMelSpectrogramError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for SharedLogMelSpectrogramError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1DC88D28CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1DC88D2B4()
{
  return 0;
}

ValueMetadata *type metadata accessor for SharedLogMelSpectrogramError()
{
  return &type metadata for SharedLogMelSpectrogramError;
}

uint64_t sub_1DC88D2CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 32);
}

unsigned char *initializeBufferWithCopyOfBuffer for SNKShotDatasetType(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SNNullDetector.DomainError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_1DC88D368(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DC88D434);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_1DC88D45C(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1DC88D464(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

uint64_t sub_1DC88D470()
{
  return swift_getWitnessTable();
}

unint64_t sub_1DC88D490()
{
  unint64_t result = qword_1EAA9DB48;
  if (!qword_1EAA9DB48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DB48);
  }
  return result;
}

uint64_t sub_1DC88D4DC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1DC88D4F8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1DC88D51C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1DC88CB28(a1);
}

uint64_t sub_1DC88D564()
{
  return swift_deallocObject();
}

uint64_t sub_1DC88D574()
{
  return v0;
}

void *sub_1DC88D590(void *__src, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char __dst)
{
  return memcpy(&__dst, __src, 0x78uLL);
}

float sub_1DC88D5B0@<S0>(uint64_t a1@<X8>)
{
  return *(float *)a1;
}

uint64_t sub_1DC88D5E4()
{
  return swift_getAssociatedConformanceWitness();
}

__n128 sub_1DC88D604()
{
  __n128 result = *(__n128 *)v0;
  long long v3 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v1 - 64) = *(_OWORD *)v0;
  *(_OWORD *)(v1 - 48) = v3;
  *(void *)(v1 - 32) = *(void *)(v0 + 32);
  return result;
}

uint64_t sub_1DC88D624()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_1DC88D644(uint64_t a1)
{
  return sub_1DC889EAC(v3, v2, v1, a1);
}

void sub_1DC88D68C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_1DC88B8F4(v21, v20, v22, a4, a1, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
}

void sub_1DC88D6DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_1DC889BF4(v21, v20, a1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
}

uint64_t sub_1DC88D710()
{
  return *(void *)(v0 - 168);
}

uint64_t sub_1DC88D724()
{
  sub_1DC89DAF4();
  uint64_t v3 = (uint64_t)sub_1DC881A8C(v2, v2[3]);
  sub_1DCB89288();
  if (v1)
  {
    sub_1DC8818D0(v0);
  }
  else
  {
    sub_1DC89DD48(v5);
    sub_1DCB89048();
    sub_1DC89C89C(0, (unint64_t *)&unk_1EAA9DB50);
    v5[6] = MEMORY[0x1E4FBC860];
    sub_1DC87E988((uint64_t *)&unk_1EAA9C8C0);
    sub_1DC890A7C();
    sub_1DC890AD0();
    uint64_t v3 = sub_1DCB88428();
    sub_1DC8818D0((uint64_t)v5);
    sub_1DC8818D0(v0);
  }
  return v3;
}

uint64_t sub_1DC88D82C(void *a1)
{
  sub_1DC881A8C(a1, a1[3]);
  sub_1DCB892A8();
  sub_1DC89D39C((uint64_t)v2, v3);
  sub_1DCB89068();
  return sub_1DC8818D0((uint64_t)v2);
}

void sub_1DC88D8B0(uint64_t a1, void *a2)
{
  id v2 = a2;
  sub_1DCB886B8();
}

uint64_t sub_1DC88D904()
{
  return sub_1DCB886A8() & 1;
}

uint64_t sub_1DC88D958(void *a1)
{
  sub_1DC89D754();
  id v3 = a1;
  sub_1DC89DACC();

  return sub_1DCB891F8();
}

uint64_t sub_1DC88D998@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1DC88D724();
  if (!v1) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_1DC88D9C4(void *a1)
{
  return sub_1DC88D82C(a1);
}

uint64_t sub_1DC88D9DC()
{
  return sub_1DC88D958(*v0);
}

void sub_1DC88D9E4(uint64_t a1)
{
  sub_1DC88D8B0(a1, *v1);
}

uint64_t sub_1DC88D9EC()
{
  uint64_t v1 = *v0;
  sub_1DCB891A8();
  id v2 = v1;
  sub_1DCB886B8();

  return sub_1DCB891F8();
}

uint64_t sub_1DC88DA38()
{
  return sub_1DC88D904();
}

BOOL sub_1DC88DA44(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1DC8CD5C0(*a1, *a2);
}

uint64_t sub_1DC88DA50()
{
  return sub_1DCB87BE8();
}

uint64_t sub_1DC88DAB0()
{
  return sub_1DCB87BC8();
}

uint64_t sub_1DC88DB00()
{
  return sub_1DCA3B4DC(*v0);
}

uint64_t sub_1DC88DB08(uint64_t a1)
{
  return sub_1DC9645DC(a1, *v1);
}

uint64_t sub_1DC88DB10(uint64_t a1)
{
  return sub_1DC96104C(a1, *v1);
}

SoundAnalysis::SNKShotLabel_optional __swiftcall SNKShotLabel.init(rawValue:)(Swift::Int rawValue)
{
  if (rawValue == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!rawValue) {
    char v2 = 0;
  }
  *uint64_t v1 = v2;
  return (SoundAnalysis::SNKShotLabel_optional)rawValue;
}

uint64_t SNKShotLabel.rawValue.getter()
{
  return *v0;
}

BOOL sub_1DC88DB3C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1DC8884D0(*a1, *a2);
}

SoundAnalysis::SNKShotLabel_optional sub_1DC88DB48(Swift::Int *a1)
{
  return SNKShotLabel.init(rawValue:)(*a1);
}

uint64_t sub_1DC88DB50@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SNKShotLabel.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1DC88DB78()
{
  return sub_1DCB87BE8();
}

uint64_t sub_1DC88DBD8()
{
  return sub_1DCB87BC8();
}

uint64_t sub_1DC88DC28()
{
  return sub_1DC8884E0();
}

id sub_1DC88DC30(unsigned char *a1)
{
  id v3 = objc_allocWithZone(v1);
  v3[OBJC_IVAR___SNKShotLabel_impl] = *a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id sub_1DC88DCAC(char a1)
{
  v1[OBJC_IVAR___SNKShotLabel_impl] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for SNKShotLabelObjC();
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t sub_1DC88DD38()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SNKShotLabel_impl);
}

void SNKShotLabelObjC.init()()
{
}

id SNKShotLabelObjC.__deallocating_deinit(uint64_t a1)
{
  return sub_1DC88F32C(a1, type metadata accessor for SNKShotLabelObjC);
}

uint64_t type metadata accessor for SNKShotLabelObjC()
{
  return self;
}

void sub_1DC88DDC4()
{
}

uint64_t sub_1DC88DEA4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[5];
  v10[1] = a1[1];
  long long v11 = *((_OWORD *)a1 + 1);
  uint64_t v12 = a1[4];
  uint64_t v13 = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  v6[0] = *(void *)a2;
  v6[1] = *(void *)(a2 + 8);
  long long v7 = *(_OWORD *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v4;
  v10[0] = v2;
  if (static TimeRange.== infix(_:_:)((uint64_t)v10, (uint64_t)v6))
  {
    sub_1DC89D738();
    JUMPOUT(0x1E01A59A0);
  }
  return 0;
}

uint64_t sub_1DC88DF5C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x676E6152656D6974 && a2 == 0xE900000000000065;
  if (v2 || (sub_1DCB89018() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_1DCB89018();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1DC88E048(char a1)
{
  if (a1) {
    return 7107189;
  }
  else {
    return 0x676E6152656D6974;
  }
}

uint64_t sub_1DC88E07C(void *a1)
{
  sub_1DC87E988(&qword_1EAA9DE68);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v3);
  sub_1DC89D988();
  sub_1DC881A8C(a1, a1[3]);
  sub_1DC89C5B4();
  sub_1DC89D5E4();
  sub_1DC89C64C();
  sub_1DCB88F18();
  if (!v1)
  {
    type metadata accessor for KShotSegment(0);
    sub_1DCB86A18();
    sub_1DC89C07C((uint64_t)&unk_1EAA9DD48);
    sub_1DCB88F18();
  }
  uint64_t v4 = sub_1DC89D580();
  return v5(v4);
}

uint64_t sub_1DC88E214()
{
  return sub_1DCB891F8();
}

void sub_1DC88E330()
{
  sub_1DC88D6B0();
  sub_1DC89DAF4();
  uint64_t v19 = v3;
  sub_1DCB86A18();
  sub_1DC89D4E0();
  uint64_t v20 = v5;
  uint64_t v21 = v4;
  MEMORY[0x1F4188790](v4);
  char v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1DC87E988(&qword_1EAA9DE50);
  sub_1DC89D4E0();
  uint64_t v22 = v9;
  uint64_t v23 = v8;
  MEMORY[0x1F4188790](v8);
  sub_1DC89D9A0();
  uint64_t v10 = type metadata accessor for KShotSegment(0);
  sub_1DC88819C();
  MEMORY[0x1F4188790](v11);
  sub_1DC89D9B8();
  sub_1DC89DD48(v0);
  sub_1DC89C5B4();
  sub_1DC89DC68();
  sub_1DCB89298();
  if (!v1)
  {
    uint64_t v12 = v2;
    uint64_t v13 = v21;
    sub_1DC89C600();
    sub_1DCB88DF8();
    uint64_t v14 = v28;
    *(void *)uint64_t v12 = v24;
    *(void *)(v12 + 8) = v25;
    *(_OWORD *)(v12 + 16) = v26;
    *(void *)(v12 + 32) = v27;
    *(void *)(v12 + 40) = v14;
    LOBYTE(v24) = 1;
    sub_1DC89C07C((uint64_t)&unk_1EAA9DD28);
    sub_1DCB88DF8();
    uint64_t v15 = sub_1DC89D938();
    v16(v15);
    uint64_t v17 = v19;
    (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v12 + *(int *)(v10 + 20), v7, v13);
    sub_1DC88E9AC(v12, v17);
  }
  sub_1DC8818D0((uint64_t)v0);
  sub_1DC88D674();
}

uint64_t sub_1DC88E580()
{
  return sub_1DC890124();
}

uint64_t sub_1DC88E5A0()
{
  return sub_1DC88E048(*v0);
}

uint64_t sub_1DC88E5A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1DC88DF5C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1DC88E5D0()
{
  return sub_1DC888648();
}

uint64_t sub_1DC88E5F0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1DC8885F8();
  *a1 = result;
  return result;
}

uint64_t sub_1DC88E618(uint64_t a1)
{
  unint64_t v2 = sub_1DC89C5B4();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC88E654(uint64_t a1)
{
  unint64_t v2 = sub_1DC89C5B4();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1DC88E698()
{
  return sub_1DCB891F8();
}

void sub_1DC88E7BC()
{
}

uint64_t sub_1DC88E7D4(void *a1)
{
  return sub_1DC88E07C(a1);
}

id sub_1DC88E7F0(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  sub_1DC890A18(a1, (uint64_t)v3 + OBJC_IVAR___SNKShotSegment_impl);
  v6.receiver = v3;
  v6.super_class = v1;
  id v4 = objc_msgSendSuper2(&v6, sel_init);
  sub_1DC899BE8(a1);
  return v4;
}

id SNKShotSegment.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void SNKShotSegment.init()()
{
  sub_1DC89DBE0();
  uint64_t v1 = type metadata accessor for KShotSegment(0);
  MEMORY[0x1F4188790](v1 - 8);
  id v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *MEMORY[0x1E4F1F9F8];
  int v5 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  int v6 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
  uint64_t v7 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  id v8 = v0;
  sub_1DCB86928();
  *(void *)id v3 = v4;
  *((_DWORD *)v3 + 2) = v5;
  *((_DWORD *)v3 + 3) = v6;
  *((void *)v3 + 2) = v7;
  *((void *)v3 + 3) = v4;
  *((_DWORD *)v3 + 8) = v5;
  *((_DWORD *)v3 + 9) = v6;
  *((void *)v3 + 5) = v7;
  sub_1DC88E9AC((uint64_t)v3, (uint64_t)v8 + OBJC_IVAR___SNKShotSegment_impl);

  uint64_t v9 = (objc_class *)type metadata accessor for SNKShotSegment(0);
  v10.receiver = v8;
  v10.super_class = v9;
  objc_msgSendSuper2(&v10, sel_init);
  sub_1DC89DD10();
}

uint64_t type metadata accessor for KShotSegment(uint64_t a1)
{
  return sub_1DC88EA30(a1, (uint64_t *)&unk_1EAA9D130);
}

uint64_t sub_1DC88E9AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KShotSegment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for SNKShotSegment(uint64_t a1)
{
  return sub_1DC88EA30(a1, qword_1EAA9D118);
}

uint64_t sub_1DC88EA30(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

double sub_1DC88EAE4@<D0>(uint64_t a1@<X8>)
{
  sub_1DC89D9E8(OBJC_IVAR___SNKShotSegment_impl);
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 40);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = *(void *)(v1 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 16);
  double result = *(double *)(v1 + 32);
  *(double *)(a1 + 32) = result;
  *(void *)(a1 + 40) = v3;
  return result;
}

double sub_1DC88EBA4(double *a1)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v5 = *((void *)a1 + 3);
  uint64_t v6 = *((void *)a1 + 5);
  sub_1DC89D9E8(OBJC_IVAR___SNKShotSegment_impl);
  swift_beginAccess();
  *(void *)uint64_t v1 = v3;
  *(double *)(v1 + 8) = a1[1];
  *(void *)(v1 + 16) = v4;
  *(void *)(v1 + 24) = v5;
  double result = a1[4];
  *(double *)(v1 + 32) = result;
  *(void *)(v1 + 40) = v6;
  return result;
}

void (*sub_1DC88EC1C(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[12] = v1;
  sub_1DC88EAE4((uint64_t)v3);
  return sub_1DC88EC7C;
}

void sub_1DC88EC7C(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = (*a1)[2];
  uint64_t v4 = (*a1)[3];
  uint64_t v5 = (*a1)[5];
  uint64_t v6 = (void *)((*a1)[12] + OBJC_IVAR___SNKShotSegment_impl);
  uint64_t v7 = (*a1)[1];
  uint64_t v8 = (*a1)[4];
  swift_beginAccess();
  *uint64_t v6 = v2;
  v6[1] = v7;
  void v6[2] = v3;
  v6[3] = v4;
  v6[4] = v8;
  v6[5] = v5;

  free(v1);
}

uint64_t sub_1DC88EE08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for KShotSegment(0);
  uint64_t v4 = v3 - 8;
  MEMORY[0x1F4188790](v3);
  sub_1DC89D988();
  swift_beginAccess();
  uint64_t v5 = sub_1DC89DCDC();
  sub_1DC890A18(v5, v6);
  uint64_t v7 = v1 + *(int *)(v4 + 28);
  sub_1DCB86A18();
  sub_1DC88819C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 32))(a1, v7);
}

uint64_t sub_1DC88EF68(uint64_t a1)
{
  sub_1DC89D9E8(OBJC_IVAR___SNKShotSegment_impl);
  swift_beginAccess();
  sub_1DC89D738();
  uint64_t v4 = v1 + v3;
  uint64_t v5 = sub_1DCB86A18();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(v4, a1, v5);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
}

uint64_t sub_1DC88F030(uint64_t a1)
{
  uint64_t v2 = sub_1DCB86A18();
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return sub_1DC88EF68((uint64_t)v4);
}

void (*sub_1DC88F0FC(void *a1))()
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[6] = v1;
  uint64_t v4 = sub_1DCB86A18();
  v3[7] = v4;
  sub_1DC89D568(v4);
  v3[8] = v5;
  size_t v7 = *(void *)(v6 + 64);
  v3[9] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v3[10] = v8;
  sub_1DC88EE08((uint64_t)v8);
  return sub_1DC88F1A0;
}

void sub_1DC88F1A0()
{
  sub_1DC89DBE0();
  uint64_t v1 = *(void **)v0;
  uint64_t v4 = *(void **)(*(void *)v0 + 72);
  uint64_t v3 = *(void **)(*(void *)v0 + 80);
  if (v2)
  {
    uint64_t v5 = v1[7];
    uint64_t v6 = v1[8];
    uint64_t v7 = v1[6];
    (*(void (**)(void, void, uint64_t))(v6 + 16))(v1[9], v1[10], v5);
    uint64_t v8 = v7 + OBJC_IVAR___SNKShotSegment_impl;
    swift_beginAccess();
    sub_1DC89D738();
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 24))(v8 + v9, v4, v5);
    swift_endAccess();
    objc_super v10 = *(void (**)(void *, uint64_t))(v6 + 8);
    v10(v4, v5);
    uint64_t v11 = sub_1DC89DCDC();
    ((void (*)(uint64_t))v10)(v11);
  }
  else
  {
    uint64_t v12 = v1[7];
    uint64_t v13 = v1[8];
    uint64_t v14 = v1[6] + OBJC_IVAR___SNKShotSegment_impl;
    swift_beginAccess();
    sub_1DC89D738();
    (*(void (**)(uint64_t, void *, uint64_t))(v13 + 24))(v14 + v15, v3, v12);
    swift_endAccess();
    (*(void (**)(void *, uint64_t))(v13 + 8))(v3, v12);
  }
  free(v3);
  free(v4);
  sub_1DC89DD10();
  free(v16);
}

id SNKShotSegment.__deallocating_deinit()
{
  return sub_1DC88F32C(0, (uint64_t (*)(void))type metadata accessor for SNKShotSegment);
}

id sub_1DC88F32C(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t sub_1DC88F374()
{
  id v1 = *v0;
  sub_1DCB886B8();

  sub_1DCB891B8();
  return sub_1DCB891B8();
}

uint64_t sub_1DC88F3D0(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a1 + 9);
  int v4 = *(unsigned __int8 *)(a2 + 8);
  int v5 = *(unsigned __int8 *)(a2 + 9);
  sub_1DC89C89C(0, (unint64_t *)&qword_1EAA9C7B0);
  return sub_1DC89DC48() & ~(v2 ^ v4) & ~(v3 ^ v5) & 1;
}

uint64_t sub_1DC88F444(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1635017060 && a2 == 0xE400000000000000;
  if (v2 || (sub_1DCB89018() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x5474657361746164 && a2 == 0xEB00000000657079;
    if (v6 || (sub_1DCB89018() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x6C6562616CLL && a2 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = sub_1DCB89018();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_1DC88F594(char a1)
{
  if (!a1) {
    return 1635017060;
  }
  if (a1 == 1) {
    return 0x5474657361746164;
  }
  return 0x6C6562616CLL;
}

void sub_1DC88F5E8()
{
  sub_1DC88D6B0();
  sub_1DC89DCD0();
  sub_1DC87E988(&qword_1EAA9DDA8);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v1);
  sub_1DC89D8FC();
  sub_1DC89D674();
  sub_1DC89C2BC();
  sub_1DC89D5E4();
  sub_1DC89C270();
  sub_1DC89DA44();
  sub_1DC89D5CC();
  if (!v0)
  {
    sub_1DC89C3A0();
    sub_1DC89D5CC();
    sub_1DC89C3EC();
    sub_1DC89D5CC();
  }
  uint64_t v2 = sub_1DC89D580();
  v3(v2);
  sub_1DC89DCC4();
  sub_1DC88D674();
}

uint64_t sub_1DC88F720()
{
  uint64_t v1 = *v0;
  sub_1DC89D754();
  id v2 = v1;
  sub_1DC89DACC();

  sub_1DC89DC30();
  sub_1DCB891B8();
  return sub_1DCB891F8();
}

void sub_1DC88F780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  sub_1DC88D6B0();
  sub_1DC89DAF4();
  uint64_t v13 = v12;
  sub_1DC87E988(&qword_1EAA9DD88);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v14);
  sub_1DC881A8C(v10, v10[3]);
  sub_1DC89C2BC();
  sub_1DCB89298();
  if (v11)
  {
    sub_1DC8818D0((uint64_t)v10);
  }
  else
  {
    sub_1DC89C224();
    sub_1DC89DC1C();
    sub_1DCB88DF8();
    sub_1DC89C308();
    id v15 = a10;
    sub_1DCB88DF8();
    sub_1DC89C354();
    sub_1DCB88DF8();
    sub_1DC89D710();
    v16();
    *(void *)uint64_t v13 = v15;
    *(unsigned char *)(v13 + 8) = v18;
    *(unsigned char *)(v13 + 9) = v17;
    sub_1DC8818D0((uint64_t)v10);
  }
  sub_1DC88D674();
}

id sub_1DC88F980@<X0>(uint64_t a1@<X8>)
{
  id v2 = *(void **)(v1 + OBJC_IVAR___SNKShotFeaturizationStreamResult_impl);
  char v3 = *(unsigned char *)(v1 + OBJC_IVAR___SNKShotFeaturizationStreamResult_impl + 8);
  char v4 = *(unsigned char *)(v1 + OBJC_IVAR___SNKShotFeaturizationStreamResult_impl + 9);
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v4;
  return v2;
}

uint64_t sub_1DC88F9A8()
{
  return sub_1DC88F594(*v0);
}

uint64_t sub_1DC88F9B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1DC88F444(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1DC88F9D8(uint64_t a1)
{
  unint64_t v2 = sub_1DC89C2BC();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC88FA14(uint64_t a1)
{
  unint64_t v2 = sub_1DC89C2BC();

  return MEMORY[0x1F41862B0](a1, v2);
}

void sub_1DC88FA50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1DC88F780(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_1DC88FA68()
{
}

uint64_t sub_1DC88FA88()
{
  uint64_t v1 = *v0;
  sub_1DCB891A8();
  id v2 = v1;
  sub_1DCB886B8();

  sub_1DCB891B8();
  sub_1DCB891B8();
  return sub_1DCB891F8();
}

id SNKShotFeaturizationStreamResult.init()()
{
  uint64_t v1 = sub_1DC89C89C(0, (unint64_t *)&unk_1EAA9DB50);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  id v2 = v0;
  sub_1DC87E988((uint64_t *)&unk_1EAA9C8C0);
  sub_1DC890A7C();
  sub_1DC890AD0();
  uint64_t v3 = sub_1DC89D598();
  if (v1)
  {
    sub_1DC89D8BC();
    id result = (id)swift_unexpectedError();
    __break(1u);
  }
  else
  {
    char v4 = &v2[OBJC_IVAR___SNKShotFeaturizationStreamResult_impl];
    *(void *)char v4 = v3;
    *((_WORD *)v4 + 4) = 0;

    v6.receiver = v2;
    v6.super_class = (Class)type metadata accessor for SNKShotFeaturizationStreamResult();
    return objc_msgSendSuper2(&v6, sel_init);
  }
  return result;
}

uint64_t sub_1DC88FC20()
{
  sub_1DC88F980((uint64_t)&v1);
  return v1;
}

void sub_1DC88FCA4(uint64_t a1)
{
}

void sub_1DC88FCB0(id *a1)
{
}

void (*sub_1DC88FCDC(void *a1))(void **a1, char a2)
{
  a1[1] = v1;
  sub_1DC88F980((uint64_t)&v4);
  *a1 = v4;
  return sub_1DC88FD34;
}

void sub_1DC88FD34(void **a1, char a2)
{
}

uint64_t sub_1DC88FD80()
{
  sub_1DC88F980((uint64_t)&v2);
  uint64_t v0 = v3;

  return v0;
}

unint64_t sub_1DC88FDE4(unint64_t result)
{
  if (result > 1) {
    __break(1u);
  }
  else {
    *(unsigned char *)(v1 + OBJC_IVAR___SNKShotFeaturizationStreamResult_impl + 8) = result != 0;
  }
  return result;
}

id sub_1DC88FE50()
{
  type metadata accessor for SNKShotLabelObjC();
  sub_1DC88F980((uint64_t)&v3);
  char v0 = v4;

  char v2 = v0;
  return sub_1DC88DC30(&v2);
}

void sub_1DC88FEFC(id a1)
{
  *(unsigned char *)(v1 + OBJC_IVAR___SNKShotFeaturizationStreamResult_impl + 9) = *((unsigned char *)a1 + OBJC_IVAR___SNKShotLabel_impl);
}

id SNKShotFeaturizationStreamResult.__deallocating_deinit(uint64_t a1)
{
  return sub_1DC88F32C(a1, type metadata accessor for SNKShotFeaturizationStreamResult);
}

uint64_t sub_1DC88FF40()
{
  id v1 = *v0;
  sub_1DCB886B8();

  sub_1DCB891E8();
  sub_1DCB891D8();
  sub_1DCB891D8();
  return sub_1DCB891E8();
}

void sub_1DC88FFB4()
{
}

uint64_t sub_1DC890034(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x72616C706D657865 && a2 == 0xE800000000000000;
  if (v2 || (sub_1DCB89018() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001DCB906A0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_1DCB89018();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1DC890124()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC890164(char a1)
{
  if (a1) {
    return 0xD000000000000013;
  }
  else {
    return 0x72616C706D657865;
  }
}

void sub_1DC8901A0()
{
  sub_1DC89DCD0();
  sub_1DC87E988(&qword_1EAA9DD70);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v1);
  sub_1DC89D8E0();
  sub_1DC89D674();
  sub_1DC89C1D8();
  sub_1DC89D5E4();
  sub_1DC89C270();
  sub_1DC89D5CC();
  if (!v0)
  {
    sub_1DC89DD24();
    sub_1DC89C18C();
    sub_1DC89D5CC();
  }
  uint64_t v2 = sub_1DC89D580();
  v3(v2);
  sub_1DC89DCC4();
}

uint64_t sub_1DC8902CC()
{
  uint64_t v1 = *v0;
  sub_1DC89D754();
  id v2 = v1;
  sub_1DC89DACC();

  sub_1DCB891E8();
  sub_1DCB891D8();
  sub_1DCB891D8();
  sub_1DCB891E8();
  return sub_1DCB891F8();
}

void sub_1DC890354()
{
  sub_1DC88D6B0();
  id v2 = v1;
  char v4 = v3;
  sub_1DC87E988(&qword_1EAA9DD58);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v5);
  sub_1DC881A8C(v2, v2[3]);
  sub_1DC89C1D8();
  sub_1DCB89298();
  if (v0)
  {
    sub_1DC8818D0((uint64_t)v2);
  }
  else
  {
    sub_1DC89C224();
    sub_1DC89DB24();
    sub_1DCB88DF8();
    sub_1DC89C0C0();
    id v6 = v8;
    sub_1DC89DB24();
    sub_1DCB88DF8();
    sub_1DC89D710();
    v7();
    *char v4 = v6;
    v4[1] = v8;
    v4[2] = v9;
    v4[3] = v10;
    sub_1DC8818D0((uint64_t)v2);
  }
  sub_1DC89DCC4();
  sub_1DC88D674();
}

id sub_1DC8904FC@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1 + OBJC_IVAR___SNKShotFeaturizationStreamCompletion_impl;
  id v3 = *(void **)(v1 + OBJC_IVAR___SNKShotFeaturizationStreamCompletion_impl);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR___SNKShotFeaturizationStreamCompletion_impl + 8);
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR___SNKShotFeaturizationStreamCompletion_impl + 24);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = *(void *)(v2 + 16);
  a1[3] = v5;
  return v3;
}

uint64_t sub_1DC890524()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC890560()
{
  return sub_1DC890164(*v0);
}

uint64_t sub_1DC890568@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1DC890034(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1DC890590(uint64_t a1)
{
  unint64_t v2 = sub_1DC89C1D8();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC8905CC(uint64_t a1)
{
  unint64_t v2 = sub_1DC89C1D8();

  return MEMORY[0x1F41862B0](a1, v2);
}

void sub_1DC890608()
{
}

void sub_1DC890620()
{
}

uint64_t sub_1DC890640()
{
  uint64_t v1 = *v0;
  sub_1DCB891A8();
  id v2 = v1;
  sub_1DCB886B8();

  sub_1DCB891E8();
  sub_1DCB891D8();
  sub_1DCB891D8();
  sub_1DCB891E8();
  return sub_1DCB891F8();
}

id SNKShotFeaturizationStreamCompletion.init()()
{
  uint64_t v1 = sub_1DC89C89C(0, (unint64_t *)&unk_1EAA9DB50);
  uint64_t v10 = MEMORY[0x1E4FBC860];
  id v2 = v0;
  sub_1DC87E988((uint64_t *)&unk_1EAA9C8C0);
  sub_1DC890A7C();
  sub_1DC890AD0();
  uint64_t v3 = sub_1DC89D598();
  if (v1)
  {
    sub_1DC89D8BC();
    id result = (id)swift_unexpectedError();
    __break(1u);
  }
  else
  {
    uint64_t v4 = MEMORY[0x1E4F1F9F8];
    uint64_t v5 = *MEMORY[0x1E4F1F9F8];
    uint64_t v6 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    uint64_t v7 = (uint64_t *)&v2[OBJC_IVAR___SNKShotFeaturizationStreamCompletion_impl];
    *uint64_t v7 = v3;
    v7[1] = v5;
    void v7[2] = *(void *)(v4 + 8);
    v7[3] = v6;

    v9.receiver = v2;
    v9.super_class = (Class)type metadata accessor for SNKShotFeaturizationStreamCompletion();
    return objc_msgSendSuper2(&v9, sel_init);
  }
  return result;
}

uint64_t sub_1DC890810()
{
  sub_1DC8904FC(v1);
  return v1[0];
}

void sub_1DC890894(uint64_t a1)
{
}

void sub_1DC8908A0(id *a1)
{
}

void (*sub_1DC8908CC(void *a1))(void **a1, char a2)
{
  a1[1] = v1;
  sub_1DC8904FC(v4);
  *a1 = v4[0];
  return sub_1DC890924;
}

void sub_1DC890924(void **a1, char a2)
{
}

uint64_t sub_1DC890954()
{
  sub_1DC8904FC(&v1);

  return sub_1DC89D868();
}

uint64_t sub_1DC8909C4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)(v3 + OBJC_IVAR___SNKShotFeaturizationStreamCompletion_impl);
  v4[1] = result;
  v4[2] = a2;
  v4[3] = a3;
  return result;
}

uint64_t sub_1DC8909E4(uint64_t *a1)
{
  return sub_1DC8909C4(*a1, a1[1], a1[2]);
}

uint64_t sub_1DC890A18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KShotSegment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1DC890A7C()
{
  unint64_t result = qword_1EAA9DB60;
  if (!qword_1EAA9DB60)
  {
    sub_1DC8863A8((uint64_t *)&unk_1EAA9C8C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DB60);
  }
  return result;
}

unint64_t sub_1DC890AD0()
{
  unint64_t result = qword_1EAA9DB68;
  if (!qword_1EAA9DB68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DB68);
  }
  return result;
}

uint64_t type metadata accessor for SNKShotFeaturizationStreamResult()
{
  return self;
}

uint64_t type metadata accessor for SNKShotFeaturizationStreamCompletion()
{
  return self;
}

double (*sub_1DC890B64(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 24) = v1;
  sub_1DC8904FC(v3);

  sub_1DC89DAE4(*(double *)&v3[2]);
  return sub_1DC890BD0;
}

double sub_1DC890BD0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24) + OBJC_IVAR___SNKShotFeaturizationStreamCompletion_impl;
  *(void *)(v2 + 8) = *(void *)a1;
  double result = *(double *)(a1 + 8);
  *(double *)(v2 + 16) = result;
  *(void *)(v2 + 24) = v1;
  return result;
}

id SNKShotFeaturizationStreamCompletion.__deallocating_deinit(uint64_t a1)
{
  return sub_1DC88F32C(a1, type metadata accessor for SNKShotFeaturizationStreamCompletion);
}

void sub_1DC890C1C()
{
  sub_1DC89D76C();
  uint64_t v2 = v1;
  uint64_t v3 = *v0;
  uint64_t v4 = v0[2];
  uint64_t v5 = (void *)v0[4];
  swift_bridgeObjectRetain();
  sub_1DC8A8028(v2, v3);
  swift_bridgeObjectRelease();
  sub_1DC8A7FE8();
  swift_bridgeObjectRetain();
  sub_1DC8A8028(v2, v4);
  swift_bridgeObjectRelease();
  sub_1DC8A7FE8();
  id v6 = v5;
  sub_1DCB886B8();

  sub_1DCB891E8();
  sub_1DCB891D8();
  sub_1DCB891D8();
  sub_1DCB891E8();
  sub_1DC89D71C();
}

BOOL sub_1DC890CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v16 = *(void *)(a1 + 24);
  uint64_t v17 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 40);
  int v3 = *(_DWORD *)(a1 + 48);
  int v2 = *(_DWORD *)(a1 + 52);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v18 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 40);
  int v8 = *(_DWORD *)(a2 + 48);
  int v9 = *(_DWORD *)(a2 + 52);
  uint64_t v10 = *(void *)(a2 + 56);
  if ((sub_1DC8DC02C(*(void *)a1, *(void *)a2) & 1) == 0) {
    return 0;
  }
  if ((sub_1DC8DC134(v19, v18) & 1) == 0) {
    return 0;
  }
  if ((sub_1DC8DC02C(v17, v5) & 1) == 0) {
    return 0;
  }
  if ((sub_1DC8DC134(v16, v6) & 1) == 0) {
    return 0;
  }
  sub_1DC89C89C(0, (unint64_t *)&qword_1EAA9C7B0);
  if ((sub_1DCB886A8() & 1) == 0) {
    return 0;
  }
  return v15 == v7 && v3 == v8 && v2 == v9 && v4 == v10;
}

uint64_t sub_1DC890E34(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000016 && a2 == 0x80000001DCB906C0 || (sub_1DCB89018() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001DCB906E0 || (sub_1DCB89018() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001DCB90700 || (sub_1DCB89018() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001DCB90720 || (sub_1DCB89018() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    BOOL v5 = a1 == 0x72616C706D657865 && a2 == 0xE800000000000000;
    if (v5 || (sub_1DCB89018() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 4;
    }
    else if (a1 == 0xD000000000000013 && a2 == 0x80000001DCB906A0)
    {
      swift_bridgeObjectRelease();
      return 5;
    }
    else
    {
      char v6 = sub_1DCB89018();
      swift_bridgeObjectRelease();
      if (v6) {
        return 5;
      }
      else {
        return 6;
      }
    }
  }
}

uint64_t sub_1DC891084()
{
  return 6;
}

unint64_t sub_1DC89108C(char a1)
{
  unint64_t result = 0xD000000000000016;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0xD000000000000018;
      break;
    case 3:
      unint64_t result = 0xD000000000000014;
      break;
    case 4:
      unint64_t result = 0x72616C706D657865;
      break;
    case 5:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1DC891154()
{
  sub_1DC89DCD0();
  uint64_t v2 = sub_1DC87E988(&qword_1EAA9DDF0);
  sub_1DC89D4E0();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  sub_1DC89D8E0();
  sub_1DC89D674();
  sub_1DC89C438();
  sub_1DC89D5E4();
  sub_1DC87E988(&qword_1EAA9DDD0);
  sub_1DC89C484((uint64_t)&unk_1EAA9DDF8);
  sub_1DC89D5CC();
  if (v0)
  {
    uint64_t v6 = sub_1DC89D580();
    v7(v6);
  }
  else
  {
    sub_1DC89DD24();
    sub_1DC87E988(&qword_1EAA9DDE0);
    sub_1DC89C484((uint64_t)&unk_1EAA9DE00);
    sub_1DC89D5CC();
    sub_1DC89DBA8(2);
    sub_1DC89D5CC();
    sub_1DC89DBA8(3);
    sub_1DC89D5CC();
    sub_1DC89C270();
    sub_1DC89D5CC();
    sub_1DC89C18C();
    sub_1DC89D5CC();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v2);
  }
  sub_1DC89DCC4();
}

uint64_t sub_1DC891408()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[4];
  sub_1DC89D754();
  swift_bridgeObjectRetain();
  sub_1DC8A8028((uint64_t)v6, v1);
  swift_bridgeObjectRelease();
  sub_1DC8A7FE8();
  swift_bridgeObjectRetain();
  sub_1DC8A8028((uint64_t)v6, v2);
  swift_bridgeObjectRelease();
  sub_1DC8A7FE8();
  id v4 = v3;
  sub_1DC89DACC();

  sub_1DCB891E8();
  sub_1DCB891D8();
  sub_1DCB891D8();
  sub_1DCB891E8();
  return sub_1DCB891F8();
}

void sub_1DC8914F8()
{
  sub_1DC88D6B0();
  uint64_t v2 = v1;
  id v4 = v3;
  sub_1DC87E988(&qword_1EAA9DDC0);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v5);
  sub_1DC89D9B8();
  sub_1DC89DD48(v2);
  sub_1DC89C438();
  sub_1DCB89298();
  if (v0)
  {
    sub_1DC8818D0((uint64_t)v2);
  }
  else
  {
    sub_1DC87E988(&qword_1EAA9DDD0);
    sub_1DC89C484((uint64_t)&unk_1EAA9DDD8);
    sub_1DC89D6E0();
    sub_1DC87E988(&qword_1EAA9DDE0);
    sub_1DC89C484((uint64_t)&unk_1EAA9DDE8);
    swift_bridgeObjectRetain();
    sub_1DC89D9D0();
    sub_1DC89D920();
    swift_bridgeObjectRetain();
    sub_1DC89D6E0();
    swift_bridgeObjectRetain();
    sub_1DC89D9D0();
    sub_1DC89D920();
    unint64_t v6 = sub_1DC89C224();
    swift_bridgeObjectRetain();
    sub_1DC89DB38();
    sub_1DC89D920();
    if (v6)
    {
      uint64_t v7 = sub_1DC89D550();
      v8(v7);
      sub_1DC89DA10();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1DC8818D0((uint64_t)v2);
    }
    else
    {
      sub_1DC89C0C0();
      id v9 = v12;
      sub_1DC89DB38();
      sub_1DC89D920();
      uint64_t v10 = sub_1DC89D550();
      v11(v10);
      *id v4 = v12;
      v4[1] = v12;
      v4[2] = v12;
      v4[3] = v12;
      void v4[4] = v9;
      v4[5] = v12;
      v4[6] = v13;
      v4[7] = v14;
      sub_1DC8818D0((uint64_t)v2);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_1DC88D674();
}

id sub_1DC891950@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (void *)(v1 + OBJC_IVAR___SNKShotFeaturizationResult_impl);
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR___SNKShotFeaturizationResult_impl);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR___SNKShotFeaturizationResult_impl + 8);
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR___SNKShotFeaturizationResult_impl + 16);
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[5];
  id v10 = (id)v2[4];
  uint64_t v8 = v2[7];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v10;
  a1[5] = v7;
  a1[6] = v2[6];
  a1[7] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return v10;
}

unint64_t sub_1DC8919E4()
{
  return sub_1DC89108C(*v0);
}

uint64_t sub_1DC8919EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1DC890E34(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1DC891A14@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1DC891084();
  *a1 = result;
  return result;
}

uint64_t sub_1DC891A3C(uint64_t a1)
{
  unint64_t v2 = sub_1DC89C438();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC891A78(uint64_t a1)
{
  unint64_t v2 = sub_1DC89C438();

  return MEMORY[0x1F41862B0](a1, v2);
}

void sub_1DC891AB4()
{
}

void sub_1DC891ACC()
{
}

uint64_t sub_1DC891AEC()
{
  return sub_1DCB891F8();
}

id SNKShotFeaturizationResult.init()()
{
  uint64_t v1 = sub_1DC89C89C(0, (unint64_t *)&unk_1EAA9DB50);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  uint64_t v11 = MEMORY[0x1E4FBC860];
  uint64_t v3 = v0;
  sub_1DC87E988((uint64_t *)&unk_1EAA9C8C0);
  sub_1DC890A7C();
  sub_1DC890AD0();
  uint64_t v4 = sub_1DC89D598();
  if (v1)
  {
    sub_1DC89D8BC();
    id result = (id)swift_unexpectedError();
    __break(1u);
  }
  else
  {
    uint64_t v5 = MEMORY[0x1E4F1FA48];
    uint64_t v6 = *MEMORY[0x1E4F1FA48];
    uint64_t v7 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    uint64_t v8 = &v3[OBJC_IVAR___SNKShotFeaturizationResult_impl];
    *(void *)uint64_t v8 = v2;
    *((void *)v8 + 1) = v2;
    *((void *)v8 + 2) = v2;
    *((void *)v8 + 3) = v2;
    *((void *)v8 + 4) = v4;
    *((void *)v8 + 5) = v6;
    *((void *)v8 + 6) = *(void *)(v5 + 8);
    *((void *)v8 + 7) = v7;

    v10.receiver = v3;
    v10.super_class = (Class)type metadata accessor for SNKShotFeaturizationResult();
    return objc_msgSendSuper2(&v10, sel_init);
  }
  return result;
}

uint64_t type metadata accessor for SNKShotFeaturizationResult()
{
  return self;
}

char *sub_1DC891CB0()
{
  sub_1DC891950(v8);
  uint64_t v0 = v8[0];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    sub_1DC89D898();
    uint64_t v2 = 0;
    do
    {
      uint64_t v3 = v2 + 1;
      id v4 = *(id *)(v0 + 8 * v2 + 32);
      sub_1DC89DD70();
      sub_1DC89D654();
      sub_1DC89D82C();
      uint64_t v5 = &v7;
      sub_1DCB88B58();
      uint64_t v2 = v3;
    }
    while (v1 != v3);
    sub_1DC89DB4C();
  }
  else
  {
    swift_bridgeObjectRelease();
    return (char *)MEMORY[0x1E4FBC860];
  }
  return v5;
}

uint64_t sub_1DC891DA0()
{
  sub_1DC89D81C();
  if (v3)
  {
    uint64_t v2 = sub_1DC89D698();
    if (v2) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t v6 = MEMORY[0x1E4FBC860];
    goto LABEL_12;
  }
  sub_1DC89DB18();
  if (!v2) {
    goto LABEL_11;
  }
LABEL_3:
  uint64_t v7 = MEMORY[0x1E4FBC860];
  uint64_t result = sub_1DCB88B68();
  if (v2 < 0)
  {
    __break(1u);
    return result;
  }
  uint64_t v5 = 0;
  do
  {
    if ((v1 & 0xC000000000000001) != 0) {
      sub_1DC89DD30();
    }
    else {
      sub_1DC89DB00();
    }
    ++v5;
    sub_1DCB88B48();
    sub_1DC89DB88();
    sub_1DCB88B88();
    sub_1DCB88B58();
  }
  while (v2 != v5);
  uint64_t v6 = v7;
  swift_bridgeObjectRelease();
LABEL_12:
  *(void *)(v0 + OBJC_IVAR___SNKShotFeaturizationResult_impl) = v6;

  return swift_bridgeObjectRelease();
}

uint64_t sub_1DC891EA4()
{
  return sub_1DC891DA0();
}

uint64_t (*sub_1DC891ED0(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_1DC89D6D4(a1);
  *uint64_t v1 = sub_1DC891CB0();
  return sub_1DC891F14;
}

uint64_t sub_1DC891F14(uint64_t *a1, char a2)
{
  return sub_1DC89539C(a1, a2, (uint64_t (*)(uint64_t))sub_1DC891DA0);
}

id sub_1DC891F54(void *a1, uint64_t a2, void (*a3)(void), unint64_t *a4)
{
  id v6 = a1;
  a3();

  sub_1DC89C89C(0, a4);
  uint64_t v7 = (void *)sub_1DCB87C08();
  swift_bridgeObjectRelease();

  return v7;
}

char *sub_1DC891FD8()
{
  sub_1DC891950(v6);
  uint64_t v2 = (char *)v6[0];
  uint64_t v1 = v6[1];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    sub_1DC89D898();
    do
    {
      objc_msgSend(sub_1DC89DD88(), sel_initWithInteger_, v2);
      sub_1DC89DD70();
      sub_1DC89D654();
      sub_1DC89D82C();
      uint64_t v2 = &v5;
      sub_1DCB88B58();
    }
    while (v3 != v0);
    sub_1DC89DB4C();
  }
  else
  {
    swift_bridgeObjectRelease();
    return (char *)MEMORY[0x1E4FBC860];
  }
  return v2;
}

void sub_1DC8920D8(void *a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, void (*a6)(uint64_t))
{
  sub_1DC89C89C(0, a4);
  sub_1DCB87C38();
  id v8 = a1;
  uint64_t v9 = sub_1DC89DCB0();
  a6(v9);
}

void sub_1DC892154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1DC89D76C();
  sub_1DC89D81C();
  if (v15) {
    goto LABEL_15;
  }
  sub_1DC89DB18();
  if (v11)
  {
    while (1)
    {
      sub_1DC89DA90();
      if (v11 < 0) {
        break;
      }
      sub_1DC89DAB4();
      while (1)
      {
        if (v13) {
          sub_1DC89DD30();
        }
        else {
          id v16 = sub_1DC89DB00();
        }
        uint64_t v17 = v16;
        id v18 = [v16 (SEL)(v14 + 2840)];

        if ((unint64_t)v18 > 1) {
          break;
        }
        sub_1DC89DCE8();
        if (v19)
        {
          sub_1DC89DA6C();
          uint64_t v12 = a10;
        }
        sub_1DC89D878();
        if (v20)
        {
          swift_bridgeObjectRelease();
          uint64_t v10 = a9;
          goto LABEL_17;
        }
      }
      __break(1u);
LABEL_15:
      uint64_t v11 = sub_1DC89D698();
      if (!v11) {
        goto LABEL_16;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v12 = MEMORY[0x1E4FBC860];
LABEL_17:
    *(void *)(v10 + OBJC_IVAR___SNKShotFeaturizationResult_impl + 8) = v12;
    sub_1DC89D71C();
    swift_bridgeObjectRelease();
  }
}

void sub_1DC892248()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  sub_1DC892154(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t (*sub_1DC892274(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_1DC89D6D4(a1);
  *uint64_t v1 = sub_1DC891FD8();
  return sub_1DC8922B8;
}

uint64_t sub_1DC8922B8(uint64_t *a1, char a2)
{
  return sub_1DC89539C(a1, a2, (uint64_t (*)(uint64_t))sub_1DC892154);
}

char *sub_1DC8922F8()
{
  sub_1DC891950(v8);
  uint64_t v0 = v8[2];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    sub_1DC89D898();
    uint64_t v2 = 0;
    do
    {
      uint64_t v3 = v2 + 1;
      id v4 = *(id *)(v0 + 8 * v2 + 32);
      sub_1DC89DD70();
      sub_1DC89D654();
      sub_1DC89D82C();
      uint64_t v5 = &v7;
      sub_1DCB88B58();
      uint64_t v2 = v3;
    }
    while (v1 != v3);
    sub_1DC89DB4C();
  }
  else
  {
    swift_bridgeObjectRelease();
    return (char *)MEMORY[0x1E4FBC860];
  }
  return v5;
}

uint64_t sub_1DC8923E8()
{
  sub_1DC89D81C();
  if (v3)
  {
    uint64_t v2 = sub_1DC89D698();
    if (v2) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t v6 = MEMORY[0x1E4FBC860];
    goto LABEL_12;
  }
  sub_1DC89DB18();
  if (!v2) {
    goto LABEL_11;
  }
LABEL_3:
  uint64_t v7 = MEMORY[0x1E4FBC860];
  uint64_t result = sub_1DCB88B68();
  if (v2 < 0)
  {
    __break(1u);
    return result;
  }
  uint64_t v5 = 0;
  do
  {
    if ((v1 & 0xC000000000000001) != 0) {
      sub_1DC89DD30();
    }
    else {
      sub_1DC89DB00();
    }
    ++v5;
    sub_1DCB88B48();
    sub_1DC89DB88();
    sub_1DCB88B88();
    sub_1DCB88B58();
  }
  while (v2 != v5);
  uint64_t v6 = v7;
  swift_bridgeObjectRelease();
LABEL_12:
  *(void *)(v0 + OBJC_IVAR___SNKShotFeaturizationResult_impl + 16) = v6;

  return swift_bridgeObjectRelease();
}

uint64_t sub_1DC8924F0()
{
  return sub_1DC8923E8();
}

uint64_t (*sub_1DC89251C(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_1DC89D6D4(a1);
  *uint64_t v1 = sub_1DC8922F8();
  return sub_1DC892560;
}

uint64_t sub_1DC892560(uint64_t *a1, char a2)
{
  return sub_1DC89539C(a1, a2, (uint64_t (*)(uint64_t))sub_1DC8923E8);
}

char *sub_1DC8925A0()
{
  sub_1DC891950(v6);
  uint64_t v1 = (char *)v6[0];
  uint64_t v2 = v6[3];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    sub_1DC89D898();
    do
    {
      objc_msgSend(sub_1DC89DD88(), sel_initWithInteger_, v1);
      sub_1DC89DD70();
      sub_1DC89D654();
      sub_1DC89D82C();
      uint64_t v1 = &v5;
      sub_1DCB88B58();
    }
    while (v3 != v0);
    sub_1DC89DB4C();
  }
  else
  {
    swift_bridgeObjectRelease();
    return (char *)MEMORY[0x1E4FBC860];
  }
  return v1;
}

void sub_1DC8926A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1DC89D76C();
  sub_1DC89D81C();
  if (v15) {
    goto LABEL_15;
  }
  sub_1DC89DB18();
  if (v11)
  {
    while (1)
    {
      sub_1DC89DA90();
      if (v11 < 0) {
        break;
      }
      sub_1DC89DAB4();
      while (1)
      {
        if (v13) {
          sub_1DC89DD30();
        }
        else {
          id v16 = sub_1DC89DB00();
        }
        uint64_t v17 = v16;
        id v18 = [v16 (SEL)(v14 + 2840)];

        if ((unint64_t)v18 > 1) {
          break;
        }
        sub_1DC89DCE8();
        if (v19)
        {
          sub_1DC89DA6C();
          uint64_t v12 = a10;
        }
        sub_1DC89D878();
        if (v20)
        {
          swift_bridgeObjectRelease();
          uint64_t v10 = a9;
          goto LABEL_17;
        }
      }
      __break(1u);
LABEL_15:
      uint64_t v11 = sub_1DC89D698();
      if (!v11) {
        goto LABEL_16;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v12 = MEMORY[0x1E4FBC860];
LABEL_17:
    *(void *)(v10 + OBJC_IVAR___SNKShotFeaturizationResult_impl + 24) = v12;
    sub_1DC89D71C();
    swift_bridgeObjectRelease();
  }
}

void sub_1DC892794()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  sub_1DC8926A0(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t (*sub_1DC8927C0(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_1DC89D6D4(a1);
  *uint64_t v1 = sub_1DC8925A0();
  return sub_1DC892804;
}

uint64_t sub_1DC892804(uint64_t *a1, char a2)
{
  return sub_1DC89539C(a1, a2, (uint64_t (*)(uint64_t))sub_1DC8926A0);
}

uint64_t sub_1DC892860()
{
  sub_1DC891950(v2);
  uint64_t v0 = v2[4];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

void sub_1DC89291C(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR___SNKShotFeaturizationResult_impl + 32);
  *(void *)(v1 + OBJC_IVAR___SNKShotFeaturizationResult_impl + 32) = a1;
}

void sub_1DC892934(id *a1)
{
}

void (*sub_1DC892960(uint64_t a1))(void **a1, char a2)
{
  sub_1DC89D6D4(a1);
  *uint64_t v1 = sub_1DC892860();
  return sub_1DC8929A4;
}

void sub_1DC8929A4(void **a1, char a2)
{
}

uint64_t sub_1DC8929D4()
{
  sub_1DC891950(v2);
  uint64_t v0 = v2[5];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1DC892A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1DC893FD0(a1, a2, a3, &OBJC_IVAR___SNKShotFeaturizationResult_impl);
}

uint64_t sub_1DC892A90(uint64_t *a1)
{
  return sub_1DC892A84(*a1, a1[1], a1[2]);
}

double (*sub_1DC892AC4(void *a1))(uint64_t a1, uint64_t a2)
{
  a1[3] = v1;
  sub_1DC891950(v8);
  uint64_t v3 = (void *)v8[4];
  uint64_t v4 = v8[5];
  uint64_t v5 = v8[7];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v6 = v8[6];
  *a1 = v4;
  a1[1] = v6;
  a1[2] = v5;
  return sub_1DC892B6C;
}

double sub_1DC892B6C(uint64_t a1, uint64_t a2)
{
  return sub_1DC8940D4(a1, a2, &OBJC_IVAR___SNKShotFeaturizationResult_impl);
}

id SNKShotFeaturizationResult.__deallocating_deinit(uint64_t a1)
{
  return sub_1DC88F32C(a1, type metadata accessor for SNKShotFeaturizationResult);
}

void sub_1DC892BFC()
{
  sub_1DC89D76C();
  swift_bridgeObjectRetain();
  uint64_t v0 = sub_1DC89DCDC();
  sub_1DC8A7E38(v0, v1);
  swift_bridgeObjectRelease();
  sub_1DCB891D8();
  sub_1DCB891D8();
  sub_1DCB891E8();
  sub_1DCB891D8();
  sub_1DCB891D8();
  sub_1DCB891E8();
  sub_1DCB891E8();
  sub_1DCB891D8();
  sub_1DCB891D8();
  sub_1DCB891E8();
  sub_1DCB891D8();
  sub_1DC89D71C();
}

BOOL sub_1DC892CD8(uint64_t a1, uint64_t a2)
{
  float v3 = *(float *)(a1 + 8);
  float v2 = *(float *)(a1 + 12);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  long long v22 = *(_OWORD *)(a1 + 48);
  long long v23 = *(_OWORD *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 56);
  float v8 = *(float *)(a1 + 64);
  float v10 = *(float *)(a2 + 8);
  float v9 = *(float *)(a2 + 12);
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v12 = *(void *)(a2 + 32);
  uint64_t v13 = *(void *)(a2 + 40);
  long long v20 = *(_OWORD *)(a2 + 48);
  long long v21 = *(_OWORD *)(a2 + 24);
  uint64_t v14 = *(void *)(a2 + 56);
  float v15 = *(float *)(a2 + 64);
  char v16 = sub_1DC8DBE3C(*(void *)a1, *(void *)a2);
  BOOL result = 0;
  v18.i64[0] = v23;
  v18.i64[1] = v22;
  v19.i64[0] = v21;
  v19.i64[1] = v20;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(v18, v19)), 0xFuLL))) & 1) != 0
    && v4 == v11
    && v5 == v12
    && v6 == v13
    && v7 == v14
    && v3 == v10
    && (v16 & 1) != 0
    && v2 == v9)
  {
    return v8 == v15;
  }
  return result;
}

uint64_t sub_1DC892E04(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x734C5255656C6966 && a2 == 0xE800000000000000;
  if (v2 || (sub_1DCB89018() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001DCB90750 || (sub_1DCB89018() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001DCB90770 || (sub_1DCB89018() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001DCB90790 || (sub_1DCB89018() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001DCB907B0 || (sub_1DCB89018() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001DCB907D0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = sub_1DCB89018();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

unint64_t sub_1DC893054(char a1)
{
  unint64_t result = 0x734C5255656C6966;
  switch(a1)
  {
    case 1:
    case 2:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    case 5:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1DC893120()
{
  sub_1DC89DBBC();
  sub_1DC89DCD0();
  sub_1DC87E988(&qword_1EAA9DD38);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v1);
  sub_1DC89D8FC();
  sub_1DC89D674();
  sub_1DC89C030();
  sub_1DC89D5E4();
  sub_1DC87E988(&qword_1EAA9DD18);
  sub_1DC89C10C((uint64_t)&unk_1EAA9DD40);
  sub_1DC89D5CC();
  if (!v0)
  {
    sub_1DC89DA28();
    sub_1DC89DA28();
    sub_1DC89C18C();
    sub_1DC89D5CC();
    sub_1DC89D5CC();
    sub_1DC89DA28();
  }
  uint64_t v2 = sub_1DC89D580();
  v3(v2);
  sub_1DC89DB64();
}

uint64_t sub_1DC89332C()
{
  return sub_1DCB891F8();
}

void sub_1DC8933B0()
{
  sub_1DC89DBBC();
  sub_1DC89DAF4();
  uint64_t v3 = v2;
  sub_1DC87E988(&qword_1EAA9DD08);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v4);
  sub_1DC89D9A0();
  sub_1DC89DD48(v0);
  sub_1DC89C030();
  sub_1DC89DC68();
  sub_1DCB89298();
  if (v1)
  {
    sub_1DC8818D0((uint64_t)v0);
  }
  else
  {
    sub_1DC87E988(&qword_1EAA9DD18);
    sub_1DC89C10C((uint64_t)&unk_1EAA9DD20);
    sub_1DCB88DF8();
    uint64_t v5 = v14;
    swift_bridgeObjectRetain();
    sub_1DC89D7E8();
    int v7 = v6;
    LOBYTE(v14) = 2;
    sub_1DC89D7E8();
    int v9 = v8;
    sub_1DC89C0C0();
    sub_1DC89D7A0();
    sub_1DC89D7A0();
    sub_1DC89D7E8();
    int v11 = v10;
    uint64_t v12 = sub_1DC89D6BC();
    v13(v12);
    *(void *)uint64_t v3 = v5;
    *(_DWORD *)(v3 + 8) = v7;
    *(_DWORD *)(v3 + 12) = v9;
    *(void *)(v3 + 16) = v14;
    *(void *)(v3 + 24) = v15;
    *(void *)(v3 + 32) = v16;
    *(void *)(v3 + 40) = v14;
    *(void *)(v3 + 48) = v15;
    *(void *)(v3 + 56) = v16;
    *(_DWORD *)(v3 + 64) = v11;
    sub_1DC8818D0((uint64_t)v0);
    swift_bridgeObjectRelease();
  }
  sub_1DC89DB64();
}

uint64_t sub_1DC893630@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1 + OBJC_IVAR___SNKShotSegmentationRequest_impl;
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR___SNKShotSegmentationRequest_impl + 16);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR___SNKShotSegmentationRequest_impl + 56);
  int v5 = *(_DWORD *)(v1 + OBJC_IVAR___SNKShotSegmentationRequest_impl + 64);
  *(void *)a1 = *(void *)(v1 + OBJC_IVAR___SNKShotSegmentationRequest_impl);
  *(void *)(a1 + 8) = *(void *)(v2 + 8);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = *(void *)(v2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v2 + 32);
  *(void *)(a1 + 48) = *(void *)(v2 + 48);
  *(void *)(a1 + 56) = v4;
  *(_DWORD *)(a1 + 64) = v5;
  return swift_bridgeObjectRetain();
}

unint64_t sub_1DC893680()
{
  return sub_1DC893054(*v0);
}

uint64_t sub_1DC893688@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1DC892E04(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1DC8936B0(uint64_t a1)
{
  unint64_t v2 = sub_1DC89C030();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC8936EC(uint64_t a1)
{
  unint64_t v2 = sub_1DC89C030();

  return MEMORY[0x1F41862B0](a1, v2);
}

void sub_1DC893728()
{
}

void sub_1DC893740()
{
}

uint64_t sub_1DC893760()
{
  return sub_1DCB891F8();
}

id SNKShotSegmentationRequest.init()()
{
  uint64_t v1 = v0;
  CMTimeMake(&v11, 3, 2);
  CMTimeValue value = v11.value;
  CMTimeEpoch epoch = v11.epoch;
  uint64_t v4 = *(void *)&v11.timescale;
  CMTimeMake(&v11, 15, 100);
  CMTimeValue v5 = v11.value;
  CMTimeEpoch v6 = v11.epoch;
  uint64_t v7 = *(void *)&v11.timescale;
  int v8 = &v1[OBJC_IVAR___SNKShotSegmentationRequest_impl];
  *(void *)int v8 = MEMORY[0x1E4FBC860];
  *((void *)v8 + 1) = 0x42A0000041A00000;
  *((void *)v8 + 2) = value;
  *((void *)v8 + 3) = v4;
  *((void *)v8 + 4) = epoch;
  *((void *)v8 + 5) = v5;
  *((void *)v8 + 6) = v7;
  *((void *)v8 + 7) = v6;
  *((_DWORD *)v8 + 16) = 1061997773;

  v10.receiver = v1;
  v10.super_class = (Class)type metadata accessor for SNKShotSegmentationRequest();
  return objc_msgSendSuper2(&v10, sel_init);
}

uint64_t sub_1DC893938()
{
  sub_1DC893630((uint64_t)v1);
  return v1[0];
}

void sub_1DC89398C(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void), void (*a5)(uint64_t))
{
  a4(0);
  sub_1DCB87C38();
  id v7 = a1;
  uint64_t v8 = sub_1DC89DCB0();
  a5(v8);
}

uint64_t sub_1DC893A04(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR___SNKShotSegmentationRequest_impl) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1DC893A1C()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  return sub_1DC893A04(v0);
}

uint64_t (*sub_1DC893A48(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_1DC89D6D4(a1);
  sub_1DC893630((uint64_t)v3);
  *uint64_t v1 = v3[0];
  return sub_1DC893A9C;
}

uint64_t sub_1DC893A9C(uint64_t *a1, char a2)
{
  if ((a2 & 1) == 0) {
    return sub_1DC893A04(*a1);
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_1DC893A04(v2);

  return swift_bridgeObjectRelease();
}

float sub_1DC893B30()
{
  sub_1DC893630((uint64_t)&v2);
  float v0 = v3;
  swift_bridgeObjectRelease();
  return v0;
}

void sub_1DC893B90(float a1)
{
  *(float *)(v1 + OBJC_IVAR___SNKShotSegmentationRequest_impl + 8) = a1;
}

float (*sub_1DC893BA4(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  sub_1DC893630((uint64_t)&v5);
  int v3 = v6;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = v3;
  return sub_1DC893C0C;
}

float sub_1DC893C0C(uint64_t a1)
{
  float result = *(float *)(a1 + 8);
  *(float *)(*(void *)a1 + OBJC_IVAR___SNKShotSegmentationRequest_impl + 8) = result;
  return result;
}

float sub_1DC893C64()
{
  sub_1DC893630((uint64_t)&v2);
  float v0 = v3;
  swift_bridgeObjectRelease();
  return v0;
}

void sub_1DC893CC4(float a1)
{
  *(float *)(v1 + OBJC_IVAR___SNKShotSegmentationRequest_impl + 12) = a1;
}

float (*sub_1DC893CD8(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  sub_1DC893630((uint64_t)&v5);
  int v3 = v6;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = v3;
  return sub_1DC893D40;
}

float sub_1DC893D40(uint64_t a1)
{
  float result = *(float *)(a1 + 8);
  *(float *)(*(void *)a1 + OBJC_IVAR___SNKShotSegmentationRequest_impl + 12) = result;
  return result;
}

uint64_t sub_1DC893D74()
{
  sub_1DC893630((uint64_t)&v1);
  swift_bridgeObjectRelease();
  return sub_1DC89D868();
}

uint64_t sub_1DC893DE8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)(v3 + OBJC_IVAR___SNKShotSegmentationRequest_impl);
  v4[2] = result;
  v4[3] = a2;
  void v4[4] = a3;
  return result;
}

uint64_t sub_1DC893E08(uint64_t *a1)
{
  return sub_1DC893DE8(*a1, a1[1], a1[2]);
}

double (*sub_1DC893E3C(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 24) = v1;
  sub_1DC893630((uint64_t)v3);
  swift_bridgeObjectRelease();
  sub_1DC89DAE4(*(double *)&v3[3]);
  return sub_1DC893EAC;
}

double sub_1DC893EAC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24) + OBJC_IVAR___SNKShotSegmentationRequest_impl;
  *(void *)(v2 + 16) = *(void *)a1;
  double result = *(double *)(a1 + 8);
  *(double *)(v2 + 24) = result;
  *(void *)(v2 + 32) = v1;
  return result;
}

void sub_1DC893EEC(void *a1@<X0>, uint64_t (*a2)(void)@<X2>, uint64_t *a3@<X8>)
{
  id v5 = a1;
  uint64_t v6 = a2();
  uint64_t v8 = v7;
  uint64_t v10 = v9;

  *a3 = v6;
  a3[1] = v8;
  a3[2] = v10;
}

uint64_t sub_1DC893F50()
{
  sub_1DC893630((uint64_t)v1);
  swift_bridgeObjectRelease();
  return sub_1DC89D868();
}

uint64_t sub_1DC893FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1DC893FD0(a1, a2, a3, &OBJC_IVAR___SNKShotSegmentationRequest_impl);
}

uint64_t sub_1DC893FD0(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = (void *)(v4 + *a4);
  v5[5] = result;
  v5[6] = a2;
  void v5[7] = a3;
  return result;
}

uint64_t sub_1DC893FEC()
{
  sub_1DC89D5C0();
  uint64_t result = v1();
  *(void *)uint64_t v0 = result;
  *(_DWORD *)(v0 + 8) = v3;
  *(_DWORD *)(v0 + 12) = v4;
  *(void *)(v0 + 16) = v5;
  return result;
}

uint64_t sub_1DC894024(uint64_t *a1)
{
  return sub_1DC893FC4(*a1, a1[1], a1[2]);
}

double (*sub_1DC894058(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = v1;
  sub_1DC893630((uint64_t)v3);
  swift_bridgeObjectRelease();
  sub_1DC89DAE4(*(double *)&v3[6]);
  return sub_1DC8940C8;
}

double sub_1DC8940C8(uint64_t a1, uint64_t a2)
{
  return sub_1DC8940D4(a1, a2, &OBJC_IVAR___SNKShotSegmentationRequest_impl);
}

double sub_1DC8940D4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24) + *a3;
  *(void *)(v4 + 40) = *(void *)a1;
  double result = *(double *)(a1 + 8);
  *(double *)(v4 + 48) = result;
  *(void *)(v4 + 56) = v3;
  return result;
}

float sub_1DC894134()
{
  sub_1DC893630((uint64_t)v2);
  float v0 = v3;
  swift_bridgeObjectRelease();
  return v0;
}

void sub_1DC894194(float a1)
{
  *(float *)(v1 + OBJC_IVAR___SNKShotSegmentationRequest_impl + 64) = a1;
}

float (*sub_1DC8941A8(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  sub_1DC893630((uint64_t)v5);
  int v3 = v6;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = v3;
  return sub_1DC894210;
}

float sub_1DC894210(uint64_t a1)
{
  float result = *(float *)(a1 + 8);
  *(float *)(*(void *)a1 + OBJC_IVAR___SNKShotSegmentationRequest_impl + 64) = result;
  return result;
}

id SNKShotSegmentationRequest.__deallocating_deinit(uint64_t a1)
{
  return sub_1DC88F32C(a1, type metadata accessor for SNKShotSegmentationRequest);
}

uint64_t sub_1DC894254(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  sub_1DCB886B8();

  swift_bridgeObjectRetain();
  sub_1DC8A807C(a1, a3);
  swift_bridgeObjectRelease();
  return sub_1DCB891B8();
}

uint64_t sub_1DC8942C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (sub_1DCB886A8()) {
    return sub_1DC8DC19C() & (a3 == a6);
  }
  else {
    return 0;
  }
}

BOOL sub_1DC894354(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_1DC894364()
{
  return sub_1DCB891B8();
}

uint64_t sub_1DC89438C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x80000001DCB907F0 || (sub_1DCB89018() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v5 = a1 == 0x73746E656D676573 && a2 == 0xE800000000000000;
    if (v5 || (sub_1DCB89018() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x72616C706D657865 && a2 == 0xED00007865646E49)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v7 = sub_1DCB89018();
      swift_bridgeObjectRelease();
      if (v7) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_1DC8944FC()
{
  return 3;
}

uint64_t sub_1DC894504()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC894544(char a1)
{
  if (!a1) {
    return 0xD000000000000011;
  }
  if (a1 == 1) {
    return 0x73746E656D676573;
  }
  return 0x72616C706D657865;
}

void sub_1DC8945AC()
{
  sub_1DC88D6B0();
  int v3 = v2;
  uint64_t v4 = sub_1DC87E988(&qword_1EAA9DE30);
  sub_1DC89D4E0();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  sub_1DC89D970();
  sub_1DC881A8C(v3, v3[3]);
  sub_1DC89C4E8();
  sub_1DCB892B8();
  sub_1DC89C270();
  sub_1DC89DA44();
  sub_1DCB88F18();
  if (!v0)
  {
    sub_1DC89DD24();
    sub_1DC87E988(&qword_1EAA9DE18);
    sub_1DC89C534((uint64_t)&unk_1EAA9DE38);
    sub_1DC89DA44();
    sub_1DCB88F18();
    sub_1DCB88F08();
  }
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
  sub_1DC88D674();
}

uint64_t sub_1DC894758(void *a1, uint64_t a2)
{
  sub_1DC89D754();
  id v4 = a1;
  sub_1DC89DACC();

  swift_bridgeObjectRetain();
  sub_1DC8A807C((uint64_t)v6, a2);
  swift_bridgeObjectRelease();
  sub_1DC89DC30();
  return sub_1DCB891F8();
}

void sub_1DC8947C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  sub_1DC88D6B0();
  sub_1DC89DAF4();
  sub_1DC87E988(&qword_1EAA9DE08);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v12);
  sub_1DC881A8C(v10, v10[3]);
  sub_1DC89C4E8();
  sub_1DCB89298();
  if (v11)
  {
    sub_1DC8818D0((uint64_t)v10);
  }
  else
  {
    sub_1DC89C224();
    sub_1DC89DC1C();
    sub_1DCB88DF8();
    sub_1DC87E988(&qword_1EAA9DE18);
    sub_1DC89DD24();
    sub_1DC89C534((uint64_t)&unk_1EAA9DE20);
    id v13 = a10;
    sub_1DCB88DF8();
    swift_bridgeObjectRetain();
    sub_1DCB88DE8();
    sub_1DC89D710();
    v14();
    sub_1DC8818D0((uint64_t)v10);
    swift_bridgeObjectRelease();
  }
  sub_1DC88D674();
}

uint64_t sub_1DC894A28()
{
  id v1 = *(id *)(v0 + OBJC_IVAR___SNKShotSegmentationResult_impl);
  swift_bridgeObjectRetain();
  return sub_1DC89D868();
}

BOOL sub_1DC894A70(char *a1, char *a2)
{
  return sub_1DC894354(*a1, *a2);
}

uint64_t sub_1DC894A7C()
{
  return sub_1DC894504();
}

uint64_t sub_1DC894A98()
{
  return sub_1DC894364();
}

uint64_t sub_1DC894AA0()
{
  return sub_1DC894544(*v0);
}

uint64_t sub_1DC894AA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1DC89438C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1DC894AD0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1DC8944FC();
  *a1 = result;
  return result;
}

uint64_t sub_1DC894AF8(uint64_t a1)
{
  unint64_t v2 = sub_1DC89C4E8();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC894B34(uint64_t a1)
{
  unint64_t v2 = sub_1DC89C4E8();

  return MEMORY[0x1F41862B0](a1, v2);
}

void sub_1DC894B70(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  sub_1DC8947C8(a1, a2, a3, a4, a5, a6, a7, a8, v14, v15);
  if (!v9)
  {
    *a9 = v11;
    a9[1] = v12;
    a9[2] = v13;
  }
}

void sub_1DC894BA0()
{
}

uint64_t sub_1DC894BC0()
{
  return sub_1DC894758(*(void **)v0, *(void *)(v0 + 8));
}

uint64_t sub_1DC894BCC(uint64_t a1)
{
  return sub_1DC894254(a1, *(void **)v1, *(void *)(v1 + 8));
}

uint64_t sub_1DC894BD8()
{
  unint64_t v2 = *(void **)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  sub_1DCB891A8();
  id v3 = v2;
  sub_1DCB886B8();

  swift_bridgeObjectRetain();
  sub_1DC8A807C((uint64_t)v5, v1);
  swift_bridgeObjectRelease();
  sub_1DCB891B8();
  return sub_1DCB891F8();
}

uint64_t sub_1DC894C58(uint64_t *a1, uint64_t *a2)
{
  return sub_1DC8942C0(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

id SNKShotSegmentationResult.init()()
{
  uint64_t v1 = sub_1DC89C89C(0, (unint64_t *)&unk_1EAA9DB50);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  uint64_t v8 = MEMORY[0x1E4FBC860];
  id v3 = v0;
  sub_1DC87E988((uint64_t *)&unk_1EAA9C8C0);
  sub_1DC890A7C();
  sub_1DC890AD0();
  uint64_t v4 = sub_1DC89D598();
  if (v1)
  {
    sub_1DC89D8BC();
    id result = (id)swift_unexpectedError();
    __break(1u);
  }
  else
  {
    uint64_t v5 = (uint64_t *)&v3[OBJC_IVAR___SNKShotSegmentationResult_impl];
    *uint64_t v5 = v4;
    v5[1] = v2;
    v5[2] = 0;

    v7.receiver = v3;
    v7.super_class = (Class)type metadata accessor for SNKShotSegmentationResult();
    return objc_msgSendSuper2(&v7, sel_init);
  }
  return result;
}

uint64_t sub_1DC894DAC()
{
  uint64_t v0 = sub_1DC894A28();
  swift_bridgeObjectRelease();
  return v0;
}

void sub_1DC894E38(uint64_t a1)
{
}

void sub_1DC894E44(id *a1)
{
}

void (*sub_1DC894E70(uint64_t a1))(void **a1, char a2)
{
  sub_1DC89D6D4(a1);
  uint64_t v2 = sub_1DC894A28();
  swift_bridgeObjectRelease();
  *uint64_t v1 = v2;
  return sub_1DC894EC0;
}

void sub_1DC894EC0(void **a1, char a2)
{
}

void sub_1DC894ED8(void **a1, char a2, void (*a3)(void))
{
  uint64_t v4 = *a1;
  if (a2)
  {
    id v5 = v4;
    a3();
  }
  else
  {
    ((void (*)(void *))a3)(v4);
  }
}

void sub_1DC894FB0()
{
  sub_1DC89D9F8();
  uint64_t v0 = type metadata accessor for KShotSegment(0);
  uint64_t v1 = sub_1DC89D568(v0);
  uint64_t v3 = v2;
  uint64_t v4 = MEMORY[0x1F4188790](v1);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)v15 - v7;
  uint64_t v9 = (void *)sub_1DC894A28();
  uint64_t v11 = v10;

  uint64_t v12 = *(void *)(v11 + 16);
  if (v12)
  {
    v15[1] = MEMORY[0x1E4FBC860];
    sub_1DCB88B68();
    type metadata accessor for SNKShotSegment(0);
    uint64_t v13 = v11 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v14 = *(void *)(v3 + 72);
    do
    {
      sub_1DC890A18(v13, (uint64_t)v8);
      sub_1DC890A18((uint64_t)v8, (uint64_t)v6);
      sub_1DC88E7F0((uint64_t)v6);
      sub_1DC899BE8((uint64_t)v8);
      sub_1DCB88B48();
      sub_1DCB88B78();
      sub_1DCB88B88();
      sub_1DCB88B58();
      v13 += v14;
      --v12;
    }
    while (v12);
  }
  swift_bridgeObjectRelease();
  sub_1DC89DA54();
}

void sub_1DC895150()
{
  sub_1DC89D9F8();
  uint64_t v2 = v0;
  unint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for KShotSegment(0);
  uint64_t v6 = sub_1DC89D568(v5);
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v6);
  sub_1DC89D970();
  if (!(v4 >> 62))
  {
    uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v9) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v11 = MEMORY[0x1E4FBC860];
LABEL_14:
    *(void *)(v2 + OBJC_IVAR___SNKShotSegmentationResult_impl + 8) = v11;
    swift_bridgeObjectRelease();
    sub_1DC89DA54();
    return;
  }
  uint64_t v9 = sub_1DC89D698();
  if (!v9) {
    goto LABEL_13;
  }
LABEL_3:
  uint64_t v18 = MEMORY[0x1E4FBC860];
  sub_1DC897AAC(0, v9 & ~(v9 >> 63), 0);
  if ((v9 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v0;
    uint64_t v10 = 0;
    uint64_t v11 = v18;
    do
    {
      if ((v4 & 0xC000000000000001) != 0) {
        id v12 = (id)MEMORY[0x1E01A7AE0](v10, v4);
      }
      else {
        id v12 = *(id *)(v4 + 8 * v10 + 32);
      }
      uint64_t v13 = v12;
      uint64_t v14 = (uint64_t)v12 + OBJC_IVAR___SNKShotSegment_impl;
      swift_beginAccess();
      sub_1DC890A18(v14, v1);

      unint64_t v16 = *(void *)(v18 + 16);
      unint64_t v15 = *(void *)(v18 + 24);
      if (v16 >= v15 >> 1) {
        sub_1DC897AAC(v15 > 1, v16 + 1, 1);
      }
      ++v10;
      *(void *)(v18 + 16) = v16 + 1;
      sub_1DC88E9AC(v1, v18+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v16);
    }
    while (v9 != v10);
    swift_bridgeObjectRelease();
    uint64_t v2 = v17;
    goto LABEL_14;
  }
  __break(1u);
}

void sub_1DC895314()
{
}

uint64_t (*sub_1DC895340(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_1DC89D6D4(a1);
  sub_1DC894FB0();
  *uint64_t v1 = v2;
  return sub_1DC895384;
}

uint64_t sub_1DC895384(uint64_t *a1, char a2)
{
  return sub_1DC89539C(a1, a2, (uint64_t (*)(uint64_t))sub_1DC895150);
}

uint64_t sub_1DC89539C(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t))
{
  if ((a2 & 1) == 0) {
    return a3(*a1);
  }
  uint64_t v4 = swift_bridgeObjectRetain();
  a3(v4);

  return swift_bridgeObjectRelease();
}

id sub_1DC895450()
{
  uint64_t v0 = (void *)sub_1DC894A28();
  uint64_t v2 = v1;

  swift_bridgeObjectRelease();
  id v3 = objc_allocWithZone(NSNumber);

  return objc_msgSend(v3, sel_initWithInteger_, v2);
}

void sub_1DC895508(void *a1)
{
  id v2 = objc_msgSend(a1, sel_integerValue);
  *(void *)(v1 + OBJC_IVAR___SNKShotSegmentationResult_impl + 16) = v2;
}

void sub_1DC895558(id *a1)
{
}

void (*sub_1DC895584(uint64_t a1))(void **a1, char a2)
{
  sub_1DC89D6D4(a1);
  *uint64_t v1 = sub_1DC895450();
  return sub_1DC8955C8;
}

void sub_1DC8955C8(void **a1, char a2)
{
  id v2 = *a1;
  if (a2)
  {
    id v3 = v2;
    sub_1DC895508(v3);
  }
  else
  {
    sub_1DC895508(v2);
  }
}

id SNKShotSegmentationResult.__deallocating_deinit(uint64_t a1)
{
  return sub_1DC88F32C(a1, type metadata accessor for SNKShotSegmentationResult);
}

uint64_t static SNKShotFeaturizer.featurizeFiles(_:hallucinatorModelURL:queue:completionHandler:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, void *a4@<X8>)
{
  uint64_t v8 = self;
  sub_1DCB86A18();
  uint64_t v9 = (void *)sub_1DCB87C08();
  uint64_t v10 = (void *)sub_1DCB86948();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  v15[4] = sub_1DC899C7C;
  v15[5] = v11;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 1107296256;
  void v15[2] = sub_1DC8958C4;
  v15[3] = &unk_1F37FA8A0;
  id v12 = _Block_copy(v15);
  swift_retain();
  swift_release();
  id v13 = objc_msgSend(v8, sel_featurizeFiles_hallucinatorModelURL_queue_completionHandler_, v9, v10, a1, v12);
  _Block_release(v12);

  uint64_t result = swift_getObjectType();
  a4[3] = result;
  *a4 = v13;
  return result;
}

void sub_1DC8957F4(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  sub_1DC87E920(a1, (uint64_t)v7);
  if (!v8)
  {
    sub_1DC881978((uint64_t)v7);
    goto LABEL_6;
  }
  sub_1DC89C89C(0, (unint64_t *)&qword_1EAA9C7B0);
  if (!swift_dynamicCast())
  {
LABEL_6:
    uint64_t v5 = 0;
    goto LABEL_7;
  }
  type metadata accessor for SNKShotFeaturizationResult();
  uint64_t v5 = (void *)swift_dynamicCastClass();
  if (!v5) {

  }
LABEL_7:
  a3(v5, a2);
}

uint64_t sub_1DC8958C4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(long long *, void *))(a1 + 32);
  if (a2)
  {
    *((void *)&v9 + 1) = swift_getObjectType();
    *(void *)&long long v8 = a2;
  }
  else
  {
    long long v8 = 0u;
    long long v9 = 0u;
  }
  swift_retain();
  swift_unknownObjectRetain();
  id v6 = a3;
  v5(&v8, a3);
  swift_release();

  return sub_1DC881978((uint64_t)&v8);
}

uint64_t static SNKShotFeaturizer.featurizeFiles(_:hallucinatorModelURL:queue:resultHandler:completionHandler:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, void *a6@<X8>)
{
  int32x4_t v19 = self;
  sub_1DCB86A18();
  uint64_t v11 = (void *)sub_1DCB87C08();
  id v12 = (void *)sub_1DCB86948();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  uint64_t v25 = sub_1DC899C9C;
  uint64_t v26 = v13;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v22 = 1107296256;
  long long v23 = sub_1DC895D6C;
  uint64_t v24 = &unk_1F37FAC88;
  uint64_t v14 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a4;
  *(void *)(v15 + 24) = a5;
  uint64_t v25 = sub_1DC899CA4;
  uint64_t v26 = v15;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v22 = 1107296256;
  long long v23 = sub_1DC8958C4;
  uint64_t v24 = &unk_1F37FADA0;
  unint64_t v16 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  id v17 = objc_msgSend(v19, sel_featurizeFiles_hallucinatorModelURL_queue_resultHandler_completionHandler_, v11, v12, a1, v14, v16);
  _Block_release(v16);
  _Block_release(v14);

  uint64_t result = swift_getObjectType();
  a6[3] = result;
  *a6 = v17;
  return result;
}

void sub_1DC895CF8(uint64_t a1, void (*a2)())
{
  sub_1DC87E9DC(a1, (uint64_t)v4);
  type metadata accessor for SNKShotFeaturizationStreamResult();
  swift_dynamicCast();
  a2();
}

uint64_t sub_1DC895D6C(uint64_t a1, uint64_t a2)
{
  id v3 = *(void (**)(void *))(a1 + 32);
  v5[3] = swift_getObjectType();
  v5[0] = a2;
  swift_retain();
  swift_unknownObjectRetain();
  v3(v5);
  swift_release();
  return sub_1DC8818D0((uint64_t)v5);
}

void sub_1DC895DDC(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  sub_1DC87E920(a1, (uint64_t)v7);
  if (v8)
  {
    type metadata accessor for SNKShotFeaturizationStreamCompletion();
    if (swift_dynamicCast()) {
      uint64_t v5 = v6;
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    sub_1DC881978((uint64_t)v7);
    uint64_t v5 = 0;
  }
  a3(v5, a2);
}

void sub_1DC896064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = sub_1DCB86888();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

uint64_t static SNKShotFeaturizer.performSegmentationRequest(_:)(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  *(void *)&v6[0] = 0;
  id v1 = objc_msgSend(self, sel_performSegmentationRequest_error_, a1, v6);
  id v2 = *(id *)&v6[0];
  if (v1)
  {
    sub_1DCB88808();
    swift_unknownObjectRelease();
    sub_1DC87E9CC(&v7, v6);
    type metadata accessor for SNKShotSegmentationResult();
    swift_dynamicCast();
    return v5;
  }
  else
  {
    uint64_t v4 = v2;
    sub_1DCB86898();

    return swift_willThrow();
  }
}

uint64_t static SNKShotFeaturizer.featurize(urls:hallucinatorModelURL:resultHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[13] = a3;
  v4[14] = a4;
  v4[11] = a1;
  v4[12] = a2;
  return MEMORY[0x1F4188298](sub_1DC896294, 0, 0);
}

uint64_t sub_1DC896294()
{
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v4 = v0[11];
  uint64_t v3 = v0[12];
  v0[2] = v0;
  v0[7] = v0 + 10;
  v0[3] = sub_1DC896354;
  uint64_t v5 = swift_continuation_init();
  sub_1DC896494(v5, v2, v1, v4, v3);
  return MEMORY[0x1F41881E8](v0 + 2);
}

uint64_t sub_1DC896354()
{
  uint64_t v1 = *v0;
  if (*(void *)(*v0 + 48))
  {
    swift_willThrow();
    uint64_t v2 = *(uint64_t (**)(void))(v1 + 8);
    return v2();
  }
  else
  {
    uint64_t v4 = *(void *)(*v0 + 80);
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v1 + 8);
    return v5(v4);
  }
}

uint64_t sub_1DC896494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v22[1] = a5;
  uint64_t v24 = a1;
  uint64_t v7 = sub_1DCB87598();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0;
  id v12 = (void *)swift_allocObject();
  id v12[2] = v11;
  uint64_t v12[3] = a2;
  void v12[4] = a3;
  id v23 = self;
  sub_1DCB86A18();
  swift_retain();
  swift_retain();
  uint64_t v13 = sub_1DCB87C08();
  uint64_t v14 = (void *)sub_1DCB86948();
  sub_1DC89C89C(0, (unint64_t *)&qword_1EAA9D100);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E4FBCB48], v7);
  uint64_t v15 = (void *)sub_1DCB88518();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v29 = sub_1DC89C890;
  uint64_t v30 = v12;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v26 = 1107296256;
  uint64_t v27 = sub_1DC895D6C;
  uint64_t v28 = &unk_1F37FAD00;
  unint64_t v16 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v24;
  uint64_t v29 = sub_1DC89C8E8;
  uint64_t v30 = (void *)v17;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v26 = 1107296256;
  uint64_t v27 = sub_1DC8958C4;
  uint64_t v28 = &unk_1F37FAD28;
  uint64_t v18 = _Block_copy(&aBlock);
  swift_release();
  int32x4_t v19 = (void *)v13;
  id v20 = objc_msgSend(v23, sel_featurizeFiles_hallucinatorModelURL_queue_resultHandler_completionHandler_, v13, v14, v15, v16, v18);
  swift_release();
  _Block_release(v18);
  _Block_release(v16);

  swift_beginAccess();
  *(void *)(v11 + 16) = v20;
  swift_release();
  return swift_unknownObjectRelease();
}

void sub_1DC8967D0(uint64_t a1, uint64_t a2, void (*a3)())
{
  if (sub_1DCB87F08())
  {
    swift_beginAccess();
    uint64_t v6 = *(void **)(a2 + 16);
    if (v6) {
      objc_msgSend(v6, sel_cancel);
    }
  }
  else
  {
    sub_1DC87E9DC(a1, (uint64_t)v8);
    type metadata accessor for SNKShotFeaturizationStreamResult();
    swift_dynamicCast();
    a3();
  }
}

uint64_t sub_1DC896884(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result = sub_1DCB87F08();
  if ((result & 1) == 0)
  {
    sub_1DC87E920(a1, (uint64_t)&v10);
    if (v11)
    {
      sub_1DC87E9CC(&v10, v12);
      sub_1DC87E9DC((uint64_t)v12, (uint64_t)&v10);
      type metadata accessor for SNKShotFeaturizationStreamCompletion();
      swift_dynamicCast();
      **(void **)(*(void *)(a3 + 64) + 40) = v9;
      swift_continuation_throwingResume();
      return sub_1DC8818D0((uint64_t)v12);
    }
    else
    {
      uint64_t result = sub_1DC881978((uint64_t)&v10);
      if (a2)
      {
        sub_1DC87E988(&qword_1EAA9DF60);
        swift_allocError();
        *uint64_t v7 = a2;
        id v8 = a2;
        return swift_continuation_throwingResumeWithError();
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

id SNKShotFeaturizer.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SNKShotFeaturizer();
  return objc_msgSendSuper2(&v2, sel_init);
}

id SNKShotFeaturizer.__deallocating_deinit(uint64_t a1)
{
  return sub_1DC88F32C(a1, type metadata accessor for SNKShotFeaturizer);
}

void static SNKShotFeaturizer.writeToFile(_:segmentationResult:)()
{
  v13[3] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v0 = (void *)sub_1DC894A28();
  objc_super v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = self;
  v13[1] = v2;
  id v13[2] = v4;
  id v6 = v0;
  swift_bridgeObjectRetain();
  v13[0] = 0;
  id v7 = objc_msgSend(v5, sel_dataWithJSONObject_options_error_, sub_1DCB890A8(), 0, v13);
  swift_unknownObjectRelease();
  id v8 = v13[0];
  if (v7)
  {
    uint64_t v9 = sub_1DCB86AD8();
    unint64_t v11 = v10;

    sub_1DCB86B08();
    sub_1DC881920(v9, v11);
  }
  else
  {
    id v12 = v8;
    sub_1DCB86898();

    swift_willThrow();
  }
  swift_bridgeObjectRelease();
}

uint64_t static SNKShotFeaturizer.writeToFile(_:featurizationResult:)()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  sub_1DC891950(v11);
  uint64_t v0 = self;
  uint64_t v1 = v12;
  v10[1] = (id)v11[1];
  void v10[2] = (id)v11[2];
  v10[3] = (id)v11[3];
  v10[4] = v12;
  void v10[5] = v13;
  v10[6] = v14;
  v10[7] = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v2 = v1;
  v10[0] = 0;
  id v3 = objc_msgSend(v0, sel_dataWithJSONObject_options_error_, sub_1DCB890A8(), 0, v10);
  swift_unknownObjectRelease();
  id v4 = v10[0];
  if (v3)
  {
    uint64_t v5 = sub_1DCB86AD8();
    unint64_t v7 = v6;

    sub_1DCB86B08();
    sub_1DC881920(v5, v7);
  }
  else
  {
    id v8 = v4;
    sub_1DCB86898();

    swift_willThrow();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

char *sub_1DC896D54(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_1DC89D4C8();
    uint64_t result = (char *)sub_1DC89D4A4();
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_1DC89D488(a3, result);
  }
  return result;
}

char *sub_1DC896DB4(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_1DC89D4C8();
    uint64_t result = (char *)sub_1DC89D4A4();
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_1DC89D488(a3, result);
  }
  return result;
}

char *sub_1DC896E14(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_1DC89D4C8();
    uint64_t result = (char *)sub_1DC89D4A4();
    __break(1u);
  }
  else if (a3 != result || &result[4 * a2] <= a3)
  {
    return (char *)sub_1DC89D488(a3, result);
  }
  return result;
}

uint64_t sub_1DC896E6C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t v8 = sub_1DCB88D08();
    __break(1u);
    return MEMORY[0x1F4186420](v8, v9, v10, v7);
  }
  if (a3 < a1
    || (uint64_t result = type metadata accessor for KShotSegment(0),
        a1 + *(void *)(*(void *)(result - 8) + 72) * a2 <= a3))
  {
    uint64_t v11 = type metadata accessor for KShotSegment(0);
    return MEMORY[0x1F4186428](a3, a1, a2, v11);
  }
  else if (a3 != a1)
  {
    uint64_t v7 = result;
    uint64_t v8 = a3;
    unint64_t v9 = a1;
    uint64_t v10 = a2;
    return MEMORY[0x1F4186420](v8, v9, v10, v7);
  }
  return result;
}

char *sub_1DC896F9C(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_1DCB88D08();
    __break(1u);
  }
  else if (__dst != __src || &__src[64 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, a2 << 6);
  }
  return __src;
}

char *sub_1DC897030(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_1DCB88D08();
    __break(1u);
  }
  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }
  return __src;
}

void sub_1DC8970CC(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_1DC89D4C8();
    sub_1DC89D4A4();
    __break(1u);
  }
  else
  {
    sub_1DC89DC9C();
    if (v5) {
      BOOL v6 = v4 > (unint64_t)v2;
    }
    else {
      BOOL v6 = 0;
    }
    if (!v6) {
      sub_1DC89D488(v2, v3);
    }
  }
}

char *sub_1DC897128(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_1DC89D4C8();
    uint64_t result = (char *)sub_1DC89D4A4();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_1DC89D488(a3, result);
  }
  return result;
}

char *sub_1DC897180(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_1DC89D4C8();
    uint64_t result = (char *)sub_1DC89D4A4();
    __break(1u);
  }
  else if (a3 != result || &result[48 * a2] <= a3)
  {
    return (char *)sub_1DC89D488(a3, result);
  }
  return result;
}

char *sub_1DC8971E0(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_1DCB88D08();
    __break(1u);
  }
  else if (__dst != __src || &__src[52 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 52 * a2);
  }
  return __src;
}

char *sub_1DC897278(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_1DC89D4C8();
    uint64_t result = (char *)sub_1DC89D4A4();
    __break(1u);
  }
  else if (a3 != result || &result[28 * a2] <= a3)
  {
    return (char *)sub_1DC89D808(a3, result, 28 * a2);
  }
  return result;
}

char *sub_1DC8972E4(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_1DCB88D08();
    __break(1u);
  }
  else if (__dst != __src || &__src[40 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 40 * a2);
  }
  return __src;
}

char *sub_1DC897384(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_1DC89D4C8();
    uint64_t result = (char *)sub_1DC89D4A4();
    __break(1u);
  }
  else if (a3 != result || &result[72 * a2] <= a3)
  {
    return (char *)sub_1DC89D488(a3, result);
  }
  return result;
}

char *sub_1DC8973E0(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_1DC89D4C8();
    uint64_t result = (char *)sub_1DC89D4A4();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_1DC89D488(a3, result);
  }
  return result;
}

char *sub_1DC897438(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_1DCB88D08();
    __break(1u);
  }
  else if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }
  return __src;
}

char *sub_1DC8974CC(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_1DCB88D08();
    __break(1u);
  }
  else if (__dst != __src || &__src[32 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 32 * a2);
  }
  return __src;
}

unint64_t sub_1DC897560(unint64_t result, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_1DC89D4C8();
    uint64_t v8 = sub_1DC89D4A4();
    __break(1u);
    return MEMORY[0x1F4186420](v8, v5, v9, v7);
  }
  unint64_t v5 = result;
  if (a3 >= result && result + 24 * a2 > a3)
  {
    if (a3 == result) {
      return result;
    }
    uint64_t v7 = &type metadata for SNAudioProcessorCache.Entry;
    uint64_t v8 = a3;
    uint64_t v9 = a2;
    return MEMORY[0x1F4186420](v8, v5, v9, v7);
  }
  return MEMORY[0x1F4186428](a3, result, a2, &type metadata for SNAudioProcessorCache.Entry);
}

char *sub_1DC897600(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_1DCB88D08();
    __break(1u);
  }
  else if (__dst != __src || &__src[4 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 4 * a2);
  }
  return __src;
}

char *sub_1DC897694(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_1DCB88D08();
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

char *sub_1DC89772C(char *result, size_t a2, char *a3)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    sub_1DC89D4C8();
    uint64_t result = (char *)sub_1DC89D4A4();
    __break(1u);
  }
  else if (a3 != result || &result[a2] <= a3)
  {
    return (char *)sub_1DC89D808(a3, result, a2);
  }
  return result;
}

char *sub_1DC897788(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_1DCB88D08();
    __break(1u);
  }
  else if (__dst != __src || &__src[48 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 48 * a2);
  }
  return __src;
}

void sub_1DC897820(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_1DC89D4C8();
    uint64_t v7 = sub_1DC89D4A4();
    __break(1u);
_swift_arrayInitWithTakeBackToFront:
    MEMORY[0x1F4186420](v7, v8, v9, v10);
    return;
  }
  if (a3 < a1 || (sub_1DC87E988((uint64_t *)&unk_1EAAA6980), sub_1DC88819C(), a1 + *(void *)(v6 + 72) * a2 <= a3))
  {
    sub_1DC87E988((uint64_t *)&unk_1EAAA6980);
    uint64_t v11 = sub_1DC89DCFC();
    MEMORY[0x1F4186428](v11, v12, v13, v14);
  }
  else if (a3 != a1)
  {
    uint64_t v7 = sub_1DC89DCFC();
    goto _swift_arrayInitWithTakeBackToFront;
  }
}

char *sub_1DC897914(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_1DCB88D08();
    __break(1u);
  }
  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }
  return __src;
}

char *sub_1DC8979AC(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_1DC89D4C8();
    uint64_t result = (char *)sub_1DC89D4A4();
    __break(1u);
  }
  else if (a3 != result || &result[160 * a2] <= a3)
  {
    return (char *)sub_1DC89D488(a3, result);
  }
  return result;
}

void sub_1DC897A0C()
{
  sub_1DC89959C();
  *uint64_t v0 = v1;
}

void sub_1DC897A5C()
{
  sub_1DC8997C4();
  *uint64_t v0 = v1;
}

size_t sub_1DC897AAC(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_1DC898B8C(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_1DC897ACC(char *a1, int64_t a2, char a3)
{
  size_t result = sub_1DC898D28(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_1DC897AEC()
{
  sub_1DC898E40();
  *uint64_t v0 = v1;
}

void sub_1DC897B3C()
{
  sub_1DC898E40();
  *uint64_t v0 = v1;
}

void sub_1DC897B8C()
{
  sub_1DC89970C();
  *uint64_t v0 = v1;
}

void sub_1DC897BDC()
{
  sub_1DC899340();
  *uint64_t v0 = v1;
}

void sub_1DC897C2C()
{
  sub_1DC8998B4();
  *uint64_t v0 = v1;
}

char *sub_1DC897C7C(char *a1, int64_t a2, char a3)
{
  size_t result = sub_1DC898EE8(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

char *sub_1DC897C9C(char *a1, int64_t a2, char a3)
{
  size_t result = sub_1DC898FD4(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

char *sub_1DC897CBC(char *a1, int64_t a2, char a3)
{
  size_t result = sub_1DC8990C0(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_1DC897CDC()
{
  sub_1DC8991AC();
  *uint64_t v0 = v1;
}

void sub_1DC897D2C()
{
  sub_1DC899254();
  *uint64_t v0 = v1;
}

void sub_1DC897D7C()
{
  sub_1DC89995C();
  *uint64_t v0 = v1;
}

void sub_1DC897DCC()
{
  sub_1DC899254();
  *uint64_t v0 = v1;
}

void sub_1DC897E1C()
{
  sub_1DC899340();
  *uint64_t v0 = v1;
}

void sub_1DC897E6C()
{
  sub_1DC899254();
  *uint64_t v0 = v1;
}

void sub_1DC897EBC()
{
  sub_1DC8991AC();
  *uint64_t v0 = v1;
}

void sub_1DC897F0C()
{
  sub_1DC8991AC();
  *uint64_t v0 = v1;
}

void sub_1DC897F5C()
{
  sub_1DC898E40();
  *uint64_t v0 = v1;
}

void sub_1DC897FAC()
{
  sub_1DC8993F8();
  *uint64_t v0 = v1;
}

void sub_1DC897FFC()
{
  sub_1DC8994E4();
  *uint64_t v0 = v1;
}

void sub_1DC89804C()
{
  sub_1DC89959C();
  *uint64_t v0 = v1;
}

void sub_1DC89809C()
{
  sub_1DC89959C();
  *uint64_t v0 = v1;
}

void sub_1DC8980EC()
{
  sub_1DC89959C();
  *uint64_t v0 = v1;
}

void sub_1DC89813C()
{
  sub_1DC898E40();
  *uint64_t v0 = v1;
}

void sub_1DC89818C()
{
  sub_1DC899340();
  *uint64_t v0 = v1;
}

void sub_1DC8981DC()
{
  sub_1DC8991AC();
  *uint64_t v0 = v1;
}

void sub_1DC89822C()
{
  sub_1DC8993F8();
  *uint64_t v0 = v1;
}

void sub_1DC89827C()
{
  sub_1DC899654();
  *uint64_t v0 = v1;
}

void sub_1DC8982CC()
{
  sub_1DC899654();
  *uint64_t v0 = v1;
}

void sub_1DC89831C()
{
  sub_1DC8993F8();
  *uint64_t v0 = v1;
}

void sub_1DC89836C()
{
  sub_1DC89970C();
  *uint64_t v0 = v1;
}

void sub_1DC8983BC()
{
  sub_1DC89959C();
  *uint64_t v0 = v1;
}

void sub_1DC89840C()
{
  sub_1DC8997C4();
  *uint64_t v0 = v1;
}

void sub_1DC89845C()
{
  sub_1DC8991AC();
  *uint64_t v0 = v1;
}

void sub_1DC8984AC()
{
  sub_1DC8997C4();
  *uint64_t v0 = v1;
}

void sub_1DC8984FC()
{
  sub_1DC899340();
  *uint64_t v0 = v1;
}

void sub_1DC89854C()
{
  sub_1DC8998B4();
  *uint64_t v0 = v1;
}

void sub_1DC89859C()
{
  sub_1DC899340();
  *uint64_t v0 = v1;
}

void sub_1DC8985EC()
{
  sub_1DC8994E4();
  *uint64_t v0 = v1;
}

void sub_1DC89863C()
{
  sub_1DC8994E4();
  *uint64_t v0 = v1;
}

void sub_1DC89868C()
{
  sub_1DC898E40();
  *uint64_t v0 = v1;
}

void sub_1DC8986DC()
{
  sub_1DC8994E4();
  *uint64_t v0 = v1;
}

void sub_1DC89872C()
{
  sub_1DC8991AC();
  *uint64_t v0 = v1;
}

void sub_1DC89877C()
{
  sub_1DC898E40();
  *uint64_t v0 = v1;
}

void sub_1DC8987CC()
{
  sub_1DC89959C();
  *uint64_t v0 = v1;
}

void sub_1DC89881C()
{
  sub_1DC898E40();
  *uint64_t v0 = v1;
}

void sub_1DC89886C()
{
  sub_1DC89959C();
  *uint64_t v0 = v1;
}

void sub_1DC8988BC()
{
  sub_1DC898E40();
  *uint64_t v0 = v1;
}

void sub_1DC89890C()
{
  sub_1DC89959C();
  *uint64_t v0 = v1;
}

void sub_1DC89895C()
{
  sub_1DC8994E4();
  *uint64_t v0 = v1;
}

void sub_1DC8989AC()
{
  sub_1DC899340();
  *uint64_t v0 = v1;
}

void sub_1DC8989FC()
{
  sub_1DC8997C4();
  *uint64_t v0 = v1;
}

void sub_1DC898A4C()
{
  sub_1DC89995C();
  *uint64_t v0 = v1;
}

void sub_1DC898A9C()
{
  sub_1DC898E40();
  *uint64_t v0 = v1;
}

void sub_1DC898AEC()
{
  sub_1DC898E40();
  *uint64_t v0 = v1;
}

void sub_1DC898B3C()
{
  sub_1DC89970C();
  *uint64_t v0 = v1;
}

size_t sub_1DC898B8C(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  sub_1DC87E988(&qword_1EAA9DF68);
  uint64_t v10 = *(void *)(type metadata accessor for KShotSegment(0) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_24;
  }
  id v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(type metadata accessor for KShotSegment(0) - 8);
  unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v17 = (unint64_t)v13 + v16;
  unint64_t v18 = a4 + v16;
  if (v5)
  {
    sub_1DC896E6C(v18, v8, v17);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1DCB0D3B0(v18, v8, v17);
  }
  swift_release();
  return (size_t)v13;
}

char *sub_1DC898D28(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1DC87E988(&qword_1EAA9DEE8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 64);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_1DC896F9C(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1DCB0D48C((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

void sub_1DC898E0C()
{
}

void sub_1DC898E40()
{
  sub_1DC89DBE0();
  sub_1DC89D4FC();
  if (v5)
  {
    sub_1DC89D540();
    if (v6 != v7)
    {
      sub_1DC89D63C();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_1DC89D530();
    }
  }
  sub_1DC89D520();
  if (v4)
  {
    sub_1DC87E988(v8);
    uint64_t v9 = (void *)sub_1DC89D7CC();
    sub_1DC89D604(v9);
  }
  uint64_t v10 = sub_1DC89D510();
  if (v3)
  {
    v2(v10);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v10);
  }
  swift_release();
  sub_1DC89DD10();
}

char *sub_1DC898EE8(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1DC87E988((uint64_t *)&unk_1EAA9DC30);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 52);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_1DC8971E0(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1DCB0D738(v13, v8, v12);
  }
  swift_release();
  return v10;
}

char *sub_1DC898FD4(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1DC87E988((uint64_t *)&unk_1EAA9DC40);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 28);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_1DC897278(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1DCB0D7E8(v13, v8, v12);
  }
  swift_release();
  return v10;
}

char *sub_1DC8990C0(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1DC87E988(&qword_1EAAA0900);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_1DC897180(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1DCB0D898((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

void sub_1DC8991AC()
{
  sub_1DC89DBE0();
  sub_1DC89D4FC();
  if (v5)
  {
    sub_1DC89D540();
    if (v6 != v7)
    {
      sub_1DC89D63C();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_1DC89D530();
    }
  }
  sub_1DC89D520();
  if (v4)
  {
    sub_1DC87E988(v8);
    uint64_t v9 = (void *)sub_1DC89D7CC();
    sub_1DC89D604(v9);
  }
  uint64_t v10 = sub_1DC89D510();
  if (v3)
  {
    v2(v10);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v10);
  }
  swift_release();
  sub_1DC89DD10();
}

void sub_1DC899254()
{
  sub_1DC89D4FC();
  if (v5)
  {
    sub_1DC89D540();
    if (v6 != v7)
    {
      sub_1DC89D63C();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_1DC89D530();
    }
  }
  sub_1DC89D520();
  if (v4)
  {
    sub_1DC87E988(v8);
    uint64_t v9 = (const void *)sub_1DC89D788();
    size_t v10 = j__malloc_size(v9);
    sub_1DC89D62C(v10 - 32);
  }
  uint64_t v11 = sub_1DC89D510();
  if (v3)
  {
    v2(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v11);
  }
  swift_release();
}

void sub_1DC89930C()
{
}

void sub_1DC899340()
{
  sub_1DC89D4FC();
  if (v5)
  {
    sub_1DC89D540();
    if (v6 != v7)
    {
      sub_1DC89D63C();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_1DC89D530();
    }
  }
  sub_1DC89D520();
  if (v4)
  {
    sub_1DC87E988(v8);
    uint64_t v9 = (const void *)sub_1DC89D788();
    size_t v10 = j__malloc_size(v9);
    sub_1DC89D62C(v10 - 32);
  }
  uint64_t v11 = sub_1DC89D510();
  if (v3)
  {
    v2(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v11);
  }
  swift_release();
}

void sub_1DC8993F8()
{
  sub_1DC89D4FC();
  if (v5)
  {
    sub_1DC89D540();
    if (v6 != v7)
    {
      sub_1DC89D63C();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_1DC89D530();
    }
  }
  sub_1DC89D520();
  if (v4)
  {
    sub_1DC87E988(v8);
    uint64_t v9 = (const void *)sub_1DC89D788();
    size_t v10 = j__malloc_size(v9);
    sub_1DC89D62C(v10 - 32);
  }
  uint64_t v11 = sub_1DC89D510();
  if (v3)
  {
    v2(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v11);
  }
  swift_release();
}

void sub_1DC8994B0()
{
}

void sub_1DC8994E4()
{
  sub_1DC89D4FC();
  if (v5)
  {
    sub_1DC89D540();
    if (v6 != v7)
    {
      sub_1DC89D63C();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_1DC89D530();
    }
  }
  sub_1DC89D520();
  if (v4)
  {
    sub_1DC87E988(v8);
    uint64_t v9 = (const void *)sub_1DC89D788();
    size_t v10 = j__malloc_size(v9);
    sub_1DC89D62C(v10 - 32);
  }
  uint64_t v11 = sub_1DC89D510();
  if (v3)
  {
    v2(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v11);
  }
  swift_release();
}

void sub_1DC89959C()
{
  sub_1DC89D4FC();
  if (v5)
  {
    sub_1DC89D540();
    if (v6 != v7)
    {
      sub_1DC89D63C();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_1DC89D530();
    }
  }
  sub_1DC89D520();
  if (v4)
  {
    sub_1DC87E988(v8);
    uint64_t v9 = (const void *)sub_1DC89D788();
    size_t v10 = j__malloc_size(v9);
    sub_1DC89D62C(v10 - 32);
  }
  uint64_t v11 = sub_1DC89D510();
  if (v3)
  {
    v2(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v11);
  }
  swift_release();
}

void sub_1DC899654()
{
  sub_1DC89D4FC();
  if (v5)
  {
    sub_1DC89D540();
    if (v6 != v7)
    {
      sub_1DC89D63C();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_1DC89D530();
    }
  }
  sub_1DC89D520();
  if (v4)
  {
    sub_1DC87E988(v8);
    uint64_t v9 = (const void *)sub_1DC89D788();
    size_t v10 = j__malloc_size(v9);
    sub_1DC89D62C(v10 - 32);
  }
  uint64_t v11 = sub_1DC89D510();
  if (v3)
  {
    v2(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v11);
  }
  swift_release();
}

void sub_1DC89970C()
{
  sub_1DC89D4FC();
  if (v5)
  {
    sub_1DC89D540();
    if (v6 != v7)
    {
      sub_1DC89D63C();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_1DC89D530();
    }
  }
  sub_1DC89D520();
  if (v4)
  {
    sub_1DC87E988(v8);
    uint64_t v9 = (const void *)sub_1DC89D788();
    size_t v10 = j__malloc_size(v9);
    sub_1DC89D62C(v10 - 32);
  }
  uint64_t v11 = sub_1DC89D510();
  if (v3)
  {
    v2(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v11);
  }
  swift_release();
}

void sub_1DC8997C4()
{
  sub_1DC89D4FC();
  if (v6)
  {
    sub_1DC89D540();
    if (v7 != v8)
    {
      sub_1DC89D63C();
      if (v7)
      {
        __break(1u);
        return;
      }
      sub_1DC89D530();
    }
  }
  sub_1DC89D520();
  if (v5)
  {
    sub_1DC87E988(v9);
    size_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    void v10[2] = v4;
    v10[3] = 2 * v11 - 64;
  }
  uint64_t v12 = sub_1DC89D510();
  if (v3)
  {
    v2(v12);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v12);
  }
  swift_release();
}

void sub_1DC899880()
{
}

void sub_1DC8998B4()
{
  sub_1DC89DBE0();
  sub_1DC89D4FC();
  if (v5)
  {
    sub_1DC89D540();
    if (v6 != v7)
    {
      sub_1DC89D63C();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_1DC89D530();
    }
  }
  sub_1DC89D520();
  if (v4)
  {
    sub_1DC87E988(v8);
    uint64_t v9 = (void *)sub_1DC89D7CC();
    sub_1DC89D604(v9);
  }
  uint64_t v10 = sub_1DC89D510();
  if (v3)
  {
    v2(v10);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v10);
  }
  swift_release();
  sub_1DC89DD10();
}

void sub_1DC89995C()
{
  sub_1DC89DBE0();
  sub_1DC89D4FC();
  if (v5)
  {
    sub_1DC89D540();
    if (v6 != v7)
    {
      sub_1DC89D63C();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_1DC89D530();
    }
  }
  sub_1DC89D520();
  if (v4)
  {
    sub_1DC87E988(v8);
    uint64_t v9 = (void *)sub_1DC89D7CC();
    sub_1DC89D604(v9);
  }
  uint64_t v10 = sub_1DC89D510();
  if (v3)
  {
    v2(v10);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v10);
  }
  swift_release();
  sub_1DC89DD10();
}

void (*sub_1DC899A04())(void *)
{
  uint64_t v1 = sub_1DC89D848();
  uint64_t v2 = sub_1DC89D8CC((uint64_t)v1);
  *(void *)(v0 + 32) = sub_1DC899B34(v2, v3);
  return sub_1DC899A50;
}

void (*sub_1DC899A54())(void *)
{
  uint64_t v1 = sub_1DC89D848();
  uint64_t v2 = sub_1DC89D8CC((uint64_t)v1);
  *(void *)(v0 + 32) = sub_1DC89BFC4(v2, v3);
  return sub_1DC899A50;
}

void (*sub_1DC899AA0())(void *)
{
  uint64_t v1 = sub_1DC89D848();
  uint64_t v2 = (void *)sub_1DC89D8CC((uint64_t)v1);
  *(void *)(v0 + 32) = sub_1DC89C698(v2, v3, v4);
  return sub_1DC899A50;
}

void sub_1DC899AEC(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*sub_1DC899B34(uint64_t a1, uint64_t a2))(id *)
{
  uint64_t v6 = sub_1DC89D954(a1, a2);
  sub_1DC8A42E0(v6, v7, v8);
  if (v5) {
    id v9 = (id)MEMORY[0x1E01A7AE0](v4, v3);
  }
  else {
    id v9 = *(id *)(v3 + 8 * v4 + 32);
  }
  *uint64_t v2 = v9;
  return sub_1DC89D3F4;
}

uint64_t type metadata accessor for SNKShotSegmentationRequest()
{
  return self;
}

uint64_t type metadata accessor for SNKShotSegmentationResult()
{
  return self;
}

uint64_t sub_1DC899BE8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for KShotSegment(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1DC899C44()
{
  swift_release();

  return swift_deallocObject();
}

void sub_1DC899C7C(uint64_t a1, uint64_t a2)
{
  sub_1DC8957F4(a1, a2, *(void (**)(void *, uint64_t))(v2 + 16));
}

uint64_t sub_1DC899C84(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1DC899C94()
{
  return swift_release();
}

void sub_1DC899C9C(uint64_t a1)
{
  sub_1DC895CF8(a1, *(void (**)())(v1 + 16));
}

void sub_1DC899CA4(uint64_t a1, uint64_t a2)
{
  sub_1DC895DDC(a1, a2, *(void (**)(void *, uint64_t))(v2 + 16));
}

uint64_t type metadata accessor for SNKShotFeaturizer()
{
  return self;
}

unint64_t sub_1DC899CD4()
{
  unint64_t result = qword_1EAA9DBA0;
  if (!qword_1EAA9DBA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DBA0);
  }
  return result;
}

unint64_t sub_1DC899D24()
{
  unint64_t result = qword_1EAA9DBA8;
  if (!qword_1EAA9DBA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DBA8);
  }
  return result;
}

double sub_1DC899D70@<D0>(uint64_t a1@<X8>)
{
  return sub_1DC88EAE4(a1);
}

double sub_1DC899D94(double *a1)
{
  return sub_1DC88EBA4(a1);
}

uint64_t sub_1DC899DB8@<X0>(uint64_t a1@<X8>)
{
  return sub_1DC88EE08(a1);
}

uint64_t sub_1DC899DE0()
{
  sub_1DC89D5C0();
  uint64_t result = sub_1DC88FC20();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_1DC899E0C()
{
  sub_1DC89D5C0();
  uint64_t result = sub_1DC890810();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_1DC899E38()
{
  return sub_1DC893FEC();
}

char *sub_1DC899E68()
{
  sub_1DC89D5C0();
  uint64_t result = sub_1DC891CB0();
  *uint64_t v0 = result;
  return result;
}

char *sub_1DC899E94()
{
  sub_1DC89D5C0();
  uint64_t result = sub_1DC891FD8();
  *uint64_t v0 = result;
  return result;
}

char *sub_1DC899EC0()
{
  sub_1DC89D5C0();
  uint64_t result = sub_1DC8922F8();
  *uint64_t v0 = result;
  return result;
}

char *sub_1DC899EEC()
{
  sub_1DC89D5C0();
  uint64_t result = sub_1DC8925A0();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_1DC899F18()
{
  sub_1DC89D5C0();
  uint64_t result = sub_1DC892860();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_1DC899F44()
{
  return sub_1DC893FEC();
}

uint64_t sub_1DC899F74()
{
  sub_1DC89D5C0();
  uint64_t result = sub_1DC893938();
  *uint64_t v0 = result;
  return result;
}

void sub_1DC899FA0()
{
  sub_1DC89D5C0();
  *uint64_t v0 = sub_1DC893B30();
}

void sub_1DC899FC8(float *a1)
{
}

void sub_1DC899FF0()
{
  sub_1DC89D5C0();
  *uint64_t v0 = sub_1DC893C64();
}

void sub_1DC89A018(float *a1)
{
}

uint64_t sub_1DC89A040()
{
  return sub_1DC893FEC();
}

uint64_t sub_1DC89A070()
{
  return sub_1DC893FEC();
}

void sub_1DC89A0A0()
{
  sub_1DC89D5C0();
  *uint64_t v0 = sub_1DC894134();
}

void sub_1DC89A0C8(float *a1)
{
}

uint64_t sub_1DC89A0F0()
{
  sub_1DC89D5C0();
  uint64_t result = sub_1DC894DAC();
  *uint64_t v0 = result;
  return result;
}

void sub_1DC89A11C()
{
  sub_1DC89D5C0();
  sub_1DC894FB0();
  *uint64_t v0 = v1;
}

id sub_1DC89A148()
{
  sub_1DC89D5C0();
  id result = sub_1DC895450();
  *uint64_t v0 = result;
  return result;
}

void type metadata accessor for SNKShotDatasetType()
{
}

void type metadata accessor for SNKShotLabel()
{
}

uint64_t method lookup function for SNKShotLabelObjC(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SNKShotLabelObjC);
}

uint64_t sub_1DC89A1AC()
{
  return type metadata accessor for SNKShotSegment(0);
}

uint64_t sub_1DC89A1B4()
{
  uint64_t result = type metadata accessor for KShotSegment(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for SNKShotSegment(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SNKShotSegment);
}

uint64_t dispatch thunk of SNKShotSegment.timeRange.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of SNKShotSegment.timeRange.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(uint64_t (**)(void *))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x80);
  v5[0] = *(void *)a1;
  v5[1] = *(void *)(a1 + 8);
  long long v6 = *(_OWORD *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = v2;
  return v3(v5);
}

uint64_t dispatch thunk of SNKShotSegment.timeRange.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of SNKShotSegment.url.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of SNKShotSegment.url.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of SNKShotSegment.url.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t method lookup function for SNKShotFeaturizationStreamResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SNKShotFeaturizationStreamResult);
}

uint64_t dispatch thunk of SNKShotFeaturizationStreamResult.data.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SNKShotFeaturizationStreamResult.data.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of SNKShotFeaturizationStreamResult.data.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t method lookup function for SNKShotFeaturizationStreamCompletion(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SNKShotFeaturizationStreamCompletion);
}

uint64_t dispatch thunk of SNKShotFeaturizationStreamCompletion.exemplar.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SNKShotFeaturizationStreamCompletion.exemplar.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of SNKShotFeaturizationStreamCompletion.exemplar.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of SNKShotFeaturizationStreamCompletion.inferenceWindowSize.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of SNKShotFeaturizationStreamCompletion.inferenceWindowSize.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of SNKShotFeaturizationStreamCompletion.inferenceWindowSize.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t method lookup function for SNKShotFeaturizationResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SNKShotFeaturizationResult);
}

uint64_t dispatch thunk of SNKShotFeaturizationResult.trainingDataEmbeddings.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SNKShotFeaturizationResult.trainingDataEmbeddings.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of SNKShotFeaturizationResult.trainingDataEmbeddings.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of SNKShotFeaturizationResult.trainingDataLabels.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of SNKShotFeaturizationResult.trainingDataLabels.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of SNKShotFeaturizationResult.trainingDataLabels.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of SNKShotFeaturizationResult.validationDataEmbeddings.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of SNKShotFeaturizationResult.validationDataEmbeddings.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of SNKShotFeaturizationResult.validationDataEmbeddings.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of SNKShotFeaturizationResult.validationDataLabels.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of SNKShotFeaturizationResult.validationDataLabels.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of SNKShotFeaturizationResult.validationDataLabels.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of SNKShotFeaturizationResult.exemplar.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of SNKShotFeaturizationResult.exemplar.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of SNKShotFeaturizationResult.exemplar.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of SNKShotFeaturizationResult.inferenceWindowSize.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of SNKShotFeaturizationResult.inferenceWindowSize.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of SNKShotFeaturizationResult.inferenceWindowSize.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t method lookup function for SNKShotSegmentationRequest(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SNKShotSegmentationRequest);
}

uint64_t dispatch thunk of SNKShotSegmentationRequest.fileURLs.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SNKShotSegmentationRequest.fileURLs.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of SNKShotSegmentationRequest.fileURLs.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of SNKShotSegmentationRequest.backgroundEnergyPercentile.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of SNKShotSegmentationRequest.backgroundEnergyPercentile.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of SNKShotSegmentationRequest.backgroundEnergyPercentile.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of SNKShotSegmentationRequest.foregroundEnergyPercentile.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of SNKShotSegmentationRequest.foregroundEnergyPercentile.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of SNKShotSegmentationRequest.foregroundEnergyPercentile.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of SNKShotSegmentationRequest.hangoverDuration.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of SNKShotSegmentationRequest.hangoverDuration.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of SNKShotSegmentationRequest.hangoverDuration.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of SNKShotSegmentationRequest.minSegmentDuration.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of SNKShotSegmentationRequest.minSegmentDuration.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of SNKShotSegmentationRequest.minSegmentDuration.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of SNKShotSegmentationRequest.similarityThreshold.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of SNKShotSegmentationRequest.similarityThreshold.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of SNKShotSegmentationRequest.similarityThreshold.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t method lookup function for SNKShotSegmentationResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SNKShotSegmentationResult);
}

uint64_t dispatch thunk of SNKShotSegmentationResult.exemplarEmbedding.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SNKShotSegmentationResult.exemplarEmbedding.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of SNKShotSegmentationResult.exemplarEmbedding.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of SNKShotSegmentationResult.segments.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of SNKShotSegmentationResult.segments.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of SNKShotSegmentationResult.segments.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of SNKShotSegmentationResult.exemplarIndex.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of SNKShotSegmentationResult.exemplarIndex.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of SNKShotSegmentationResult.exemplarIndex.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t sub_1DC89AF4C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1DC89AF54(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1DC89AFB4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return a1;
}

void *sub_1DC89B054(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x44uLL);
}

uint64_t sub_1DC89B05C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return a1;
}

uint64_t sub_1DC89B0CC(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 68))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1DC89B10C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 64) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 68) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 68) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for KShotSegmentationRequest()
{
}

uint64_t sub_1DC89B16C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  id v4 = v3;
  return a1;
}

uint64_t sub_1DC89B1AC(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for MovieRemix.FinalResult(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1DC89B21C(uint64_t a1, void *a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *a2;

  *(void *)(a1 + 8) = a2[1];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  return a1;
}

uint64_t getEnumTagSinglePayload for SNFileSystem.InflightTask(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SNFileSystem.InflightTask(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for KShotFeaturizationStreamCompletion()
{
}

uint64_t sub_1DC89B2F8(uint64_t a1, uint64_t a2)
{
  long long v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  id v4 = v3;
  return a1;
}

void sub_1DC89B338(id *a1)
{
}

uint64_t sub_1DC89B340(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  return a1;
}

uint64_t sub_1DC89B394(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t sub_1DC89B3A8(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  return a1;
}

uint64_t sub_1DC89B3F0(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 10))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1DC89B430(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 10) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 10) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for KShotFeaturizationStreamResult()
{
}

void sub_1DC89B47C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 32);
}

uint64_t sub_1DC89B4D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v6 = v5;
  return a1;
}

uint64_t sub_1DC89B54C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a2 + 32);
  uint64_t v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v4;
  id v6 = v4;

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

__n128 initializeWithTake for DetectorHeadConfiguration(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_1DC89B624(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  long long v4 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for DetectorHeadConfiguration(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DetectorHeadConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for KShotFeaturizationResult()
{
}

uint64_t sub_1DC89B744(id *a1)
{
  return swift_bridgeObjectRelease();
}

void *sub_1DC89B780(void *a1, uint64_t a2)
{
  long long v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  a1[2] = *(void *)(a2 + 16);
  id v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1DC89B7C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t sub_1DC89B824(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for StaticAudioSourceInstance(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StaticAudioSourceInstance(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for KShotSegmentationResult()
{
}

void *sub_1DC89B8F8(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  long long v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *long long v3 = *a2;
    long long v3 = (void *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v5;
    a1[2] = *((_OWORD *)a2 + 2);
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = sub_1DCB86A18();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_1DC89B9CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = sub_1DCB86A18();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

_OWORD *sub_1DC89BA34(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_1DCB86A18();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  return a1;
}

uint64_t sub_1DC89BAB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_1DCB86A18();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_OWORD *sub_1DC89BB6C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_1DCB86A18();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t sub_1DC89BBF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_1DCB86A18();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_1DC89BC8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1DC89BCA0);
}

uint64_t sub_1DC89BCA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = sub_1DCB86A18();

  return _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwet_0(v4, a2, v5);
}

uint64_t sub_1DC89BCEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1DC89BD00);
}

uint64_t sub_1DC89BD00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = sub_1DCB86A18();

  return _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwst_0(v5, a2, a2, v6);
}

uint64_t sub_1DC89BD50()
{
  uint64_t result = sub_1DCB86A18();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1DC89BDE8()
{
  return sub_1DC89C07C((uint64_t)&unk_1EAA9DBB8);
}

unint64_t sub_1DC89BE34()
{
  unint64_t result = qword_1EAA9DBC0;
  if (!qword_1EAA9DBC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DBC0);
  }
  return result;
}

unint64_t sub_1DC89BE84()
{
  unint64_t result = qword_1EAA9DBC8;
  if (!qword_1EAA9DBC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DBC8);
  }
  return result;
}

unint64_t sub_1DC89BED4()
{
  unint64_t result = qword_1EAA9DBD0;
  if (!qword_1EAA9DBD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DBD0);
  }
  return result;
}

unint64_t sub_1DC89BF24()
{
  unint64_t result = qword_1EAA9DBD8;
  if (!qword_1EAA9DBD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DBD8);
  }
  return result;
}

unint64_t sub_1DC89BF74()
{
  unint64_t result = qword_1EAA9DBE0;
  if (!qword_1EAA9DBE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DBE0);
  }
  return result;
}

void (*sub_1DC89BFC4(uint64_t a1, uint64_t a2))(id *a1)
{
  uint64_t v6 = sub_1DC89D954(a1, a2);
  sub_1DC8A42E0(v6, v7, v8);
  if (v5) {
    id v9 = (id)MEMORY[0x1E01A7AE0](v4, v3);
  }
  else {
    id v9 = *(id *)(v3 + 8 * v4 + 32);
  }
  *uint64_t v2 = v9;
  return sub_1DC89B338;
}

unint64_t sub_1DC89C030()
{
  unint64_t result = qword_1EAA9DD10;
  if (!qword_1EAA9DD10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DD10);
  }
  return result;
}

unint64_t sub_1DC89C07C(uint64_t a1)
{
  unint64_t result = sub_1DC89DD64(a1);
  if (!result)
  {
    v3(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_1DC89C0C0()
{
  unint64_t result = qword_1EAA9DD30;
  if (!qword_1EAA9DD30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DD30);
  }
  return result;
}

unint64_t sub_1DC89C10C(uint64_t a1)
{
  unint64_t result = sub_1DC89DD64(a1);
  if (!result)
  {
    uint64_t v4 = v3;
    sub_1DC8863A8(&qword_1EAA9DD18);
    sub_1DC89C07C(v4);
    unint64_t result = sub_1DC89DC7C();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_1DC89C18C()
{
  unint64_t result = qword_1EAA9DD50;
  if (!qword_1EAA9DD50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DD50);
  }
  return result;
}

unint64_t sub_1DC89C1D8()
{
  unint64_t result = qword_1EAA9DD60;
  if (!qword_1EAA9DD60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DD60);
  }
  return result;
}

unint64_t sub_1DC89C224()
{
  unint64_t result = qword_1EAA9DD68;
  if (!qword_1EAA9DD68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DD68);
  }
  return result;
}

unint64_t sub_1DC89C270()
{
  unint64_t result = qword_1EAA9DD78;
  if (!qword_1EAA9DD78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DD78);
  }
  return result;
}

unint64_t sub_1DC89C2BC()
{
  unint64_t result = qword_1EAA9DD90;
  if (!qword_1EAA9DD90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DD90);
  }
  return result;
}

unint64_t sub_1DC89C308()
{
  unint64_t result = qword_1EAA9DD98;
  if (!qword_1EAA9DD98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DD98);
  }
  return result;
}

unint64_t sub_1DC89C354()
{
  unint64_t result = qword_1EAA9DDA0;
  if (!qword_1EAA9DDA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DDA0);
  }
  return result;
}

unint64_t sub_1DC89C3A0()
{
  unint64_t result = qword_1EAA9DDB0;
  if (!qword_1EAA9DDB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DDB0);
  }
  return result;
}

unint64_t sub_1DC89C3EC()
{
  unint64_t result = qword_1EAA9DDB8;
  if (!qword_1EAA9DDB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DDB8);
  }
  return result;
}

unint64_t sub_1DC89C438()
{
  unint64_t result = qword_1EAA9DDC8;
  if (!qword_1EAA9DDC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DDC8);
  }
  return result;
}

unint64_t sub_1DC89C484(uint64_t a1)
{
  unint64_t result = sub_1DC89DD64(a1);
  if (!result)
  {
    uint64_t v5 = v4;
    sub_1DC8863A8(v3);
    v5();
    sub_1DC89DCDC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_1DC89C4E8()
{
  unint64_t result = qword_1EAA9DE10;
  if (!qword_1EAA9DE10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DE10);
  }
  return result;
}

unint64_t sub_1DC89C534(uint64_t a1)
{
  unint64_t result = sub_1DC89DD64(a1);
  if (!result)
  {
    uint64_t v4 = v3;
    sub_1DC8863A8(&qword_1EAA9DE18);
    sub_1DC89C07C(v4);
    unint64_t result = sub_1DC89DC7C();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_1DC89C5B4()
{
  unint64_t result = qword_1EAA9DE58;
  if (!qword_1EAA9DE58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DE58);
  }
  return result;
}

unint64_t sub_1DC89C600()
{
  unint64_t result = qword_1EAA9DE60;
  if (!qword_1EAA9DE60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DE60);
  }
  return result;
}

unint64_t sub_1DC89C64C()
{
  unint64_t result = qword_1EAA9DE70;
  if (!qword_1EAA9DE70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DE70);
  }
  return result;
}

void (*sub_1DC89C698(void *a1, uint64_t a2, uint64_t a3))(id *)
{
  unint64_t v6 = a3 & 0xC000000000000001;
  sub_1DC8A42E0(a2, (a3 & 0xC000000000000001) == 0, a3);
  if (v6) {
    id v7 = (id)MEMORY[0x1E01A7AE0](a2, a3);
  }
  else {
    id v7 = *(id *)(a3 + 8 * a2 + 32);
  }
  *a1 = v7;
  return sub_1DC89D3F4;
}

uint64_t sub_1DC89C718()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t sub_1DC89C750()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

void sub_1DC89C764(uint64_t a1, uint64_t a2)
{
  sub_1DC896064(a1, a2, *(void *)(v2 + 16));
}

unint64_t sub_1DC89C780()
{
  unint64_t result = qword_1EAA9DEC8;
  if (!qword_1EAA9DEC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DEC8);
  }
  return result;
}

unint64_t sub_1DC89C7CC()
{
  unint64_t result = qword_1EAA9DED0;
  if (!qword_1EAA9DED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DED0);
  }
  return result;
}

uint64_t sub_1DC89C818()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1DC89C850()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void sub_1DC89C890(uint64_t a1)
{
  sub_1DC8967D0(a1, *(void *)(v1 + 16), *(void (**)())(v1 + 24));
}

uint64_t sub_1DC89C89C(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1DC89C8D8()
{
  return swift_deallocObject();
}

uint64_t sub_1DC89C8E8(uint64_t a1, void *a2)
{
  return sub_1DC896884(a1, a2, *(void *)(v2 + 16));
}

ValueMetadata *type metadata accessor for KShotSegment.CodingKeys()
{
  return &type metadata for KShotSegment.CodingKeys;
}

unsigned char *sub_1DC89C908(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for KShotSegmentationResult.CodingKeys()
{
  return &type metadata for KShotSegmentationResult.CodingKeys;
}

ValueMetadata *type metadata accessor for KShotFeaturizationResult.CodingKeys()
{
  return &type metadata for KShotFeaturizationResult.CodingKeys;
}

uint64_t _s13SoundAnalysis23KShotSegmentationResultV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return sub_1DC89DC14(-1);
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return sub_1DC89DC14((*a1 | (v4 << 8)) - 3);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return sub_1DC89DC14((*a1 | (v4 << 8)) - 3);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return sub_1DC89DC14((*a1 | (v4 << 8)) - 3);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return sub_1DC89DC14(v8);
}

unsigned char *_s13SoundAnalysis23KShotSegmentationResultV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        uint64_t result = (unsigned char *)sub_1DC89DC0C((uint64_t)result, v6);
        break;
      case 2:
        uint64_t result = (unsigned char *)sub_1DC89DBF4((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DC89CA78);
      case 4:
        uint64_t result = (unsigned char *)sub_1DC89DBFC((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          uint64_t result = sub_1DC89DC04(result, a2 + 2);
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KShotFeaturizationStreamResult.CodingKeys()
{
  return &type metadata for KShotFeaturizationStreamResult.CodingKeys;
}

uint64_t _s13SoundAnalysis18SNKShotDatasetTypeOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return sub_1DC89DC14(-1);
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return sub_1DC89DC14((*a1 | (v4 << 8)) - 2);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return sub_1DC89DC14((*a1 | (v4 << 8)) - 2);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return sub_1DC89DC14((*a1 | (v4 << 8)) - 2);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return sub_1DC89DC14(v8);
}

unsigned char *_s13SoundAnalysis18SNKShotDatasetTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        uint64_t result = (unsigned char *)sub_1DC89DC0C((uint64_t)result, v6);
        break;
      case 2:
        uint64_t result = (unsigned char *)sub_1DC89DBF4((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DC89CBF0);
      case 4:
        uint64_t result = (unsigned char *)sub_1DC89DBFC((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          uint64_t result = sub_1DC89DC04(result, a2 + 1);
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KShotFeaturizationStreamCompletion.CodingKeys()
{
  return &type metadata for KShotFeaturizationStreamCompletion.CodingKeys;
}

uint64_t _s13SoundAnalysis24KShotFeaturizationResultV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return sub_1DC89DC14(-1);
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return sub_1DC89DC14((*a1 | (v4 << 8)) - 6);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return sub_1DC89DC14((*a1 | (v4 << 8)) - 6);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return sub_1DC89DC14((*a1 | (v4 << 8)) - 6);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return sub_1DC89DC14(v8);
}

unsigned char *_s13SoundAnalysis24KShotFeaturizationResultV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        uint64_t result = (unsigned char *)sub_1DC89DC0C((uint64_t)result, v6);
        break;
      case 2:
        uint64_t result = (unsigned char *)sub_1DC89DBF4((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DC89CD68);
      case 4:
        uint64_t result = (unsigned char *)sub_1DC89DBFC((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          uint64_t result = sub_1DC89DC04(result, a2 + 5);
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KShotSegmentationRequest.CodingKeys()
{
  return &type metadata for KShotSegmentationRequest.CodingKeys;
}

void type metadata accessor for MultiArray()
{
}

unint64_t sub_1DC89CDB0()
{
  unint64_t result = qword_1EAA9DF78;
  if (!qword_1EAA9DF78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DF78);
  }
  return result;
}

unint64_t sub_1DC89CE00()
{
  unint64_t result = qword_1EAA9DF80;
  if (!qword_1EAA9DF80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DF80);
  }
  return result;
}

unint64_t sub_1DC89CE50()
{
  unint64_t result = qword_1EAA9DF88;
  if (!qword_1EAA9DF88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DF88);
  }
  return result;
}

unint64_t sub_1DC89CEA0()
{
  unint64_t result = qword_1EAA9DF90;
  if (!qword_1EAA9DF90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DF90);
  }
  return result;
}

unint64_t sub_1DC89CEF0()
{
  unint64_t result = qword_1EAA9DF98;
  if (!qword_1EAA9DF98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DF98);
  }
  return result;
}

unint64_t sub_1DC89CF40()
{
  unint64_t result = qword_1EAA9DFA0;
  if (!qword_1EAA9DFA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DFA0);
  }
  return result;
}

unint64_t sub_1DC89CF90()
{
  unint64_t result = qword_1EAA9DFA8;
  if (!qword_1EAA9DFA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DFA8);
  }
  return result;
}

unint64_t sub_1DC89CFE0()
{
  unint64_t result = qword_1EAA9DFB0;
  if (!qword_1EAA9DFB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DFB0);
  }
  return result;
}

unint64_t sub_1DC89D030()
{
  unint64_t result = qword_1EAA9DFB8;
  if (!qword_1EAA9DFB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DFB8);
  }
  return result;
}

unint64_t sub_1DC89D080()
{
  unint64_t result = qword_1EAA9DFC0;
  if (!qword_1EAA9DFC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DFC0);
  }
  return result;
}

unint64_t sub_1DC89D0D0()
{
  unint64_t result = qword_1EAA9DFC8;
  if (!qword_1EAA9DFC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DFC8);
  }
  return result;
}

unint64_t sub_1DC89D120()
{
  unint64_t result = qword_1EAA9DFD0;
  if (!qword_1EAA9DFD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DFD0);
  }
  return result;
}

unint64_t sub_1DC89D170()
{
  unint64_t result = qword_1EAA9DFD8;
  if (!qword_1EAA9DFD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DFD8);
  }
  return result;
}

unint64_t sub_1DC89D1C0()
{
  unint64_t result = qword_1EAA9DFE0;
  if (!qword_1EAA9DFE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DFE0);
  }
  return result;
}

unint64_t sub_1DC89D210()
{
  unint64_t result = qword_1EAA9DFE8;
  if (!qword_1EAA9DFE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DFE8);
  }
  return result;
}

unint64_t sub_1DC89D260()
{
  unint64_t result = qword_1EAA9DFF0;
  if (!qword_1EAA9DFF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DFF0);
  }
  return result;
}

unint64_t sub_1DC89D2B0()
{
  unint64_t result = qword_1EAA9DFF8;
  if (!qword_1EAA9DFF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9DFF8);
  }
  return result;
}

unint64_t sub_1DC89D300()
{
  unint64_t result = qword_1EAA9E000;
  if (!qword_1EAA9E000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E000);
  }
  return result;
}

unint64_t sub_1DC89D350()
{
  unint64_t result = qword_1EAA9E008;
  if (!qword_1EAA9E008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E008);
  }
  return result;
}

uint64_t sub_1DC89D39C(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

void *sub_1DC89D488@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t sub_1DC89D4A4()
{
  return sub_1DCB88D08();
}

uint64_t sub_1DC89D510()
{
  return v0 + 32;
}

uint64_t sub_1DC89D550()
{
  return v0;
}

uint64_t sub_1DC89D568(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_1DC89D580()
{
  return v0;
}

uint64_t sub_1DC89D598()
{
  return sub_1DCB88428();
}

uint64_t sub_1DC89D5CC()
{
  return sub_1DCB88F18();
}

uint64_t sub_1DC89D5E4()
{
  return sub_1DCB892B8();
}

size_t sub_1DC89D604(void *a1)
{
  size_t result = j__malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

void sub_1DC89D62C(uint64_t a1@<X8>)
{
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = 2 * (a1 / v1);
}

void sub_1DC89D648(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void **)(v2 + a2);
  *(void *)(v2 + a2) = a1;
}

uint64_t sub_1DC89D654()
{
  return sub_1DCB88B78();
}

void *sub_1DC89D674()
{
  return sub_1DC881A8C(v0, v0[3]);
}

uint64_t sub_1DC89D698()
{
  return sub_1DCB88CC8();
}

uint64_t sub_1DC89D6BC()
{
  return v0;
}

uint64_t sub_1DC89D6D4(uint64_t result)
{
  *(void *)(result + 8) = v1;
  return result;
}

uint64_t sub_1DC89D6E0()
{
  return sub_1DCB88DF8();
}

uint64_t sub_1DC89D738()
{
  return type metadata accessor for KShotSegment(0);
}

uint64_t sub_1DC89D754()
{
  return sub_1DCB891A8();
}

uint64_t sub_1DC89D788()
{
  return swift_allocObject();
}

uint64_t sub_1DC89D7A0()
{
  return sub_1DCB88DF8();
}

uint64_t sub_1DC89D7CC()
{
  return swift_allocObject();
}

uint64_t sub_1DC89D7E8()
{
  return sub_1DCB88DD8();
}

void *sub_1DC89D808@<X0>(void *a1@<X0>, const void *a2@<X1>, size_t a3@<X8>)
{
  return memmove(a1, a2, a3);
}

uint64_t sub_1DC89D82C()
{
  return sub_1DCB88B88();
}

void *sub_1DC89D848()
{
  return malloc(0x28uLL);
}

uint64_t sub_1DC89D868()
{
  return v0;
}

void sub_1DC89D878()
{
  *(void *)(v3 + 16) = v2;
  *(unsigned char *)(v3 + v0 + 32) = v1 != 0;
}

uint64_t sub_1DC89D898()
{
  return sub_1DCB88B68();
}

uint64_t sub_1DC89D8B4()
{
  return 0;
}

uint64_t sub_1DC89D8BC()
{
  return v0;
}

uint64_t sub_1DC89D8CC(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

void sub_1DC89D918(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_1DC89D920()
{
  return sub_1DCB88DF8();
}

uint64_t sub_1DC89D938()
{
  return v0;
}

uint64_t sub_1DC89D954(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1DC89D9D0()
{
  return v0;
}

uint64_t sub_1DC89D9E8@<X0>(uint64_t a1@<X8>)
{
  return v1 + a1;
}

uint64_t sub_1DC89DA10()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1DC89DA28()
{
  return sub_1DCB88EF8();
}

uint64_t sub_1DC89DA44()
{
  return v0 - 72;
}

void sub_1DC89DA6C()
{
  sub_1DC897A5C();
}

void sub_1DC89DA90()
{
  sub_1DC897A5C();
}

uint64_t sub_1DC89DACC()
{
  return sub_1DCB886B8();
}

void sub_1DC89DAE4(double a1)
{
  *(void *)uint64_t v1 = v2;
  *(double *)(v1 + 8) = a1;
  *(void *)(v1 + 16) = v3;
}

id sub_1DC89DB00()
{
  uint64_t v3 = *(void **)(v0 + 8 * v1 + 32);
  return v3;
}

uint64_t sub_1DC89DB4C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1DC89DB88()
{
  return sub_1DCB88B78();
}

uint64_t sub_1DC89DBA8@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 81) = a1;
  return v1 - 112;
}

uint64_t sub_1DC89DBF4@<X0>(uint64_t result@<X0>, __int16 a2@<W8>)
{
  *(_WORD *)(result + 1) = a2;
  return result;
}

uint64_t sub_1DC89DBFC@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  *(_DWORD *)(result + 1) = a2;
  return result;
}

unsigned char *sub_1DC89DC04@<X0>(unsigned char *result@<X0>, char a2@<W8>)
{
  *size_t result = a2;
  return result;
}

uint64_t sub_1DC89DC0C@<X0>(uint64_t result@<X0>, char a2@<W8>)
{
  *(unsigned char *)(result + 1) = a2;
  return result;
}

uint64_t sub_1DC89DC14@<X0>(int a1@<W8>)
{
  return (a1 + 1);
}

uint64_t sub_1DC89DC30()
{
  return sub_1DCB891B8();
}

uint64_t sub_1DC89DC48()
{
  return sub_1DCB886A8();
}

uint64_t sub_1DC89DC7C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1DC89DCB0()
{
  return v0;
}

uint64_t sub_1DC89DCDC()
{
  return v0;
}

uint64_t sub_1DC89DCFC()
{
  return v0;
}

void sub_1DC89DD24()
{
  *(unsigned char *)(v0 - 81) = 1;
}

void sub_1DC89DD30()
{
  JUMPOUT(0x1E01A7AE0);
}

void *sub_1DC89DD48(void *a1)
{
  return sub_1DC881A8C(a1, v1);
}

uint64_t sub_1DC89DD64(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_1DC89DD70()
{
  return sub_1DCB88B48();
}

id sub_1DC89DD88()
{
  uint64_t v2 = *(objc_class **)(v0 + 3792);
  return objc_allocWithZone(v2);
}

id sub_1DC89DDA8()
{
  uint64_t v1 = v0;
  sub_1DC89F6D8();
  *(_DWORD *)(v0 + 48) = 1936614497;
  *(void *)(v0 + 72) = 0;
  *(void *)(v0 + 16) = v2;
  *(void *)(v0 + 24) = v3;
  *(void *)(v0 + 32) = v4;
  *(void *)(v0 + 40) = v5;
  type metadata accessor for SafeLock();
  uint64_t v6 = swift_allocObject();
  swift_retain();
  swift_retain();
  BOOL v7 = (_DWORD *)swift_slowAlloc();
  *BOOL v7 = 0;
  *(void *)(v6 + 16) = v7;
  *(void *)(v0 + 56) = v6;
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F4E9E8]), sel_initWithIsolatedAudioUseCaseID_, 1936614497);
  if (!v8)
  {
    sub_1DC89F5B4();
    swift_allocError();
    *(_DWORD *)uint64_t v21 = 0;
    *(unsigned char *)(v21 + 4) = 2;
    swift_willThrow();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_deallocPartialClassInstance();
    return (id)v1;
  }
  id v9 = v8;
  if (qword_1EAA9C658 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_1DCB86FE8();
  sub_1DC89F57C(v10, (uint64_t)qword_1EAAFF810);
  size_t v11 = sub_1DCB86FC8();
  os_log_type_t v12 = sub_1DCB88488();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_1DC873000, v11, v12, "AVAudioSecureSession created for soundAnalysis", v13, 2u);
    MEMORY[0x1E01A99C0](v13, -1, -1);
  }

  *(void *)(v0 + 64) = v9;
  id v14 = v9;
  RegisterForIsolatedAudio();
  uint64_t v15 = sub_1DCB86FC8();
  os_log_type_t v16 = sub_1DCB88488();
  if (os_log_type_enabled(v15, v16))
  {
    unint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v17 = 0;
    _os_log_impl(&dword_1DC873000, v15, v16, "IsolatedCoreAudioClient RegisterForIsolatedAudio called", v17, 2u);
    MEMORY[0x1E01A99C0](v17, -1, -1);
  }

  id result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    int32x4_t v19 = result;
    int exclaveCapability = MobileGestalt_get_exclaveCapability();

    if (exclaveCapability) {
      SetAudioLapseHandler();
    }
    swift_release();
    swift_release();

    return (id)v1;
  }
  __break(1u);
  return result;
}

uint64_t sub_1DC89E098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v49 = a1;
  uint64_t v50 = a2;
  uint64_t v4 = sub_1DCB86F78();
  uint64_t v46 = *(void *)(v4 - 8);
  uint64_t v47 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v51 = (char *)v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1DCB86F38();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  int v48 = (char *)v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  os_log_type_t v12 = (char *)v45 - v11;
  MEMORY[0x1F4188790](v10);
  id v14 = (char *)v45 - v13;
  if (qword_1EAA9CB60 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_1DCB86F68();
  sub_1DC89F57C(v15, (uint64_t)qword_1EAAFF838);
  sub_1DCB86F28();
  os_log_type_t v16 = sub_1DCB86F48();
  os_signpost_type_t v17 = sub_1DCB88538();
  if (sub_1DCB886F8())
  {
    unint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v18 = 0;
    os_signpost_id_t v19 = sub_1DCB86F18();
    _os_signpost_emit_with_name_impl(&dword_1DC873000, v16, v17, v19, "ICAC AudioAvailabilityCallback", "", v18, 2u);
    MEMORY[0x1E01A99C0](v18, -1, -1);
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v12, v14, v6);
  sub_1DCB86FA8();
  swift_allocObject();
  sub_1DCB86F98();
  id v20 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
  uint64_t result = v20(v14, v6);
  if (a3)
  {
    swift_retain();
    uint64_t v22 = v49;
    uint64_t v23 = v50;
    int v24 = RequestIsolatedAudio();
    int v25 = sub_1DCB87088();
    uint64_t v26 = v51;
    if (v24 == v25)
    {
      uint64_t v27 = (void (*)(char *, uint64_t))v20;
      uint64_t v28 = v6;
      uint64_t v29 = *(void (**)(uint64_t, uint64_t))(a3 + 16);
      v45[1] = a3;
      swift_retain();
      v29(v22, v23);
      uint64_t v30 = v28;
      uint64_t v31 = v27;
      swift_release();
      uint64_t v32 = sub_1DCB86F48();
      uint64_t v33 = v48;
      sub_1DCB86F88();
      os_signpost_type_t v34 = sub_1DCB88528();
      if (sub_1DCB886F8())
      {
        swift_retain();
        sub_1DCB86FB8();
        swift_release();
        uint64_t v36 = v46;
        uint64_t v35 = v47;
        if ((*(unsigned int (**)(char *, uint64_t))(v46 + 88))(v26, v47) == *MEMORY[0x1E4FBD340])
        {
          uint64_t v37 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v36 + 8))(v26, v35);
          uint64_t v37 = "";
        }
        uint64_t v41 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v41 = 0;
        uint64_t v42 = v48;
        os_signpost_id_t v43 = sub_1DCB86F18();
        _os_signpost_emit_with_name_impl(&dword_1DC873000, v32, v34, v43, "ICAC AudioAvailabilityCallback", v37, v41, 2u);
        int v44 = v41;
        uint64_t v33 = v42;
        MEMORY[0x1E01A99C0](v44, -1, -1);
      }
      swift_release();

      v31(v33, v30);
    }
    else
    {
      uint64_t v38 = *(void (**)(void *))(a3 + 32);
      sub_1DC89F5B4();
      uint64_t v39 = (void *)swift_allocError();
      *(_DWORD *)uint64_t v40 = v24;
      *(unsigned char *)(v40 + 4) = 1;
      swift_retain();
      v38(v39);

      swift_release();
      swift_release();
    }
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1DC89E554(int a1, uint64_t a2)
{
  int v42 = a1;
  uint64_t v3 = sub_1DCB86F78();
  uint64_t v40 = *(void *)(v3 - 8);
  uint64_t v41 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v39 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1DCB86F38();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  os_signpost_id_t v43 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v38 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v38 - v12;
  if (qword_1EAA9CB60 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_1DCB86F68();
  sub_1DC89F57C(v14, (uint64_t)qword_1EAAFF838);
  sub_1DCB86F28();
  uint64_t v15 = sub_1DCB86F48();
  os_signpost_type_t v16 = sub_1DCB88538();
  if (sub_1DCB886F8())
  {
    uint64_t v17 = v5;
    unint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v18 = 0;
    os_signpost_id_t v19 = sub_1DCB86F18();
    _os_signpost_emit_with_name_impl(&dword_1DC873000, v15, v16, v19, "ICAC Lapse Callback", "", v18, 2u);
    id v20 = v18;
    uint64_t v5 = v17;
    MEMORY[0x1E01A99C0](v20, -1, -1);
  }

  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v11, v13, v5);
  sub_1DCB86FA8();
  swift_allocObject();
  sub_1DCB86F98();
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
  uint64_t v22 = v13;
  uint64_t v23 = v5;
  uint64_t result = v21(v22, v5);
  if (a2)
  {
    int v25 = *(void (**)(void *))(a2 + 32);
    sub_1DC89F5B4();
    swift_retain();
    uint64_t v26 = (void *)swift_allocError();
    *(_DWORD *)uint64_t v27 = v42;
    *(unsigned char *)(v27 + 4) = 0;
    swift_retain();
    v25(v26);

    swift_release();
    uint64_t v28 = sub_1DCB86F48();
    uint64_t v29 = v43;
    sub_1DCB86F88();
    os_signpost_type_t v30 = sub_1DCB88528();
    if (sub_1DCB886F8())
    {
      swift_retain();
      uint64_t v31 = v39;
      sub_1DCB86FB8();
      swift_release();
      uint64_t v33 = v40;
      uint64_t v32 = v41;
      if ((*(unsigned int (**)(char *, uint64_t))(v40 + 88))(v31, v41) == *MEMORY[0x1E4FBD340])
      {
        os_signpost_type_t v34 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v33 + 8))(v31, v32);
        os_signpost_type_t v34 = "";
      }
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      uint64_t v36 = v43;
      os_signpost_id_t v37 = sub_1DCB86F18();
      _os_signpost_emit_with_name_impl(&dword_1DC873000, v28, v30, v37, "ICAC Lapse Callback", v34, v35, 2u);
      uint64_t v29 = v36;
      MEMORY[0x1E01A99C0](v35, -1, -1);
    }
    swift_release();

    v21(v29, v23);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1DC89E9AC()
{
  v18[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void **)(v0 + 64);
  uint64_t v2 = *MEMORY[0x1E4F4E810];
  uint64_t v3 = *MEMORY[0x1E4F4E8E0];
  v18[0] = 0;
  unsigned int v4 = objc_msgSend(v1, sel_setCategory_mode_options_error_, v2, v3, 0, v18);
  id v5 = v18[0];
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v6 = qword_1EAA9C658;
  id v7 = v18[0];
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_1DCB86FE8();
  sub_1DC89F57C(v8, (uint64_t)qword_1EAAFF810);
  uint64_t v9 = sub_1DCB86FC8();
  os_log_type_t v10 = sub_1DCB88488();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_1DC873000, v9, v10, "AVAudioSecureSession mode set to soundRecognition", v11, 2u);
    MEMORY[0x1E01A99C0](v11, -1, -1);
  }

  v18[0] = 0;
  unsigned int v12 = objc_msgSend(v1, sel_setActive_error_, 1, v18);
  id v5 = v18[0];
  if (v12)
  {
    id v13 = v18[0];
    uint64_t v14 = sub_1DCB86FC8();
    os_log_type_t v15 = sub_1DCB88488();
    if (os_log_type_enabled(v14, v15))
    {
      os_signpost_type_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_signpost_type_t v16 = 0;
      _os_log_impl(&dword_1DC873000, v14, v15, "AVAudioSecureSession setActive TRUE", v16, 2u);
      MEMORY[0x1E01A99C0](v16, -1, -1);
    }
  }
  else
  {
LABEL_10:
    id v17 = v5;
    sub_1DCB86898();

    swift_willThrow();
  }
}

void sub_1DC89EBC4()
{
  uint64_t v1 = v0;
  v20[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(v0 + 64);
  v20[0] = 0;
  if (objc_msgSend(v2, sel_setActive_error_, 0, v20))
  {
    uint64_t v3 = qword_1EAA9C658;
    id v4 = v20[0];
    if (v3 != -1) {
      swift_once();
    }
    uint64_t v5 = sub_1DCB86FE8();
    sub_1DC89F57C(v5, (uint64_t)qword_1EAAFF810);
    uint64_t v6 = sub_1DCB86FC8();
    os_log_type_t v7 = sub_1DCB88488();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_1DC873000, v6, v7, "AVAudioSecureSession setActive FALSE", v8, 2u);
      MEMORY[0x1E01A99C0](v8, -1, -1);
    }

    uint64_t v9 = objc_msgSend(self, sel_defaultCenter);
    [v9 removeObserver:v1];
  }
  else
  {
    id v10 = v20[0];
    uint64_t v11 = (void *)sub_1DCB86898();

    swift_willThrow();
    if (qword_1EAA9C658 != -1) {
      swift_once();
    }
    uint64_t v12 = sub_1DCB86FE8();
    sub_1DC89F57C(v12, (uint64_t)qword_1EAAFF810);
    id v13 = v11;
    id v14 = v11;
    uint64_t v9 = sub_1DCB86FC8();
    os_log_type_t v15 = sub_1DCB88488();
    if (os_log_type_enabled(v9, v15))
    {
      os_signpost_type_t v16 = (uint8_t *)swift_slowAlloc();
      id v17 = (void *)swift_slowAlloc();
      *(_DWORD *)os_signpost_type_t v16 = 138412290;
      id v18 = v11;
      os_signpost_id_t v19 = (void *)_swift_stdlib_bridgeErrorToNSError();
      v20[0] = v19;
      sub_1DCB88778();
      *id v17 = v19;

      _os_log_impl(&dword_1DC873000, v9, v15, "Secure session deactivation failed with error:%@", v16, 0xCu);
      sub_1DC87E988((uint64_t *)&unk_1EAAA5940);
      swift_arrayDestroy();
      MEMORY[0x1E01A99C0](v17, -1, -1);
      MEMORY[0x1E01A99C0](v16, -1, -1);

      return;
    }
  }
}

uint64_t sub_1DC89EEE4()
{
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + 56) + 16);
  swift_retain();
  os_unfair_lock_lock(v1);
  sub_1DC89EF48(v0);
  os_unfair_lock_unlock(v1);
  return swift_release();
}

void sub_1DC89EF48(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3)
  {
    if (v3 < 1) {
      goto LABEL_7;
    }
    if (qword_1EAA9C658 != -1) {
      goto LABEL_20;
    }
    while (1)
    {
      uint64_t v4 = sub_1DCB86FE8();
      sub_1DC89F57C(v4, (uint64_t)qword_1EAAFF810);
      uint64_t v5 = sub_1DCB86FC8();
      os_log_type_t v6 = sub_1DCB88488();
      if (os_log_type_enabled(v5, v6))
      {
        os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v7 = 0;
        _os_log_impl(&dword_1DC873000, v5, v6, "IsolatedCoreAudioClient StartIsolatedAudio() called when audio already running", v7, 2u);
        MEMORY[0x1E01A99C0](v7, -1, -1);
      }

LABEL_7:
      uint64_t v8 = *(void *)(a1 + 72);
      BOOL v9 = __OFADD__(v8, 1);
      uint64_t v10 = v8 + 1;
      if (!v9) {
        break;
      }
      __break(1u);
LABEL_20:
      swift_once();
    }
    *(void *)(a1 + 72) = v10;
  }
  else
  {
    if (qword_1EAA9C658 != -1) {
      swift_once();
    }
    uint64_t v11 = sub_1DCB86FE8();
    sub_1DC89F57C(v11, (uint64_t)qword_1EAAFF810);
    uint64_t v12 = sub_1DCB86FC8();
    os_log_type_t v13 = sub_1DCB88488();
    if (os_log_type_enabled(v12, v13))
    {
      id v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v14 = 0;
      _os_log_impl(&dword_1DC873000, v12, v13, "Starting ICAC I/O...", v14, 2u);
      MEMORY[0x1E01A99C0](v14, -1, -1);
    }

    sub_1DC89E9AC();
    if (!v1)
    {
      int started = StartIsolatedAudio();
      os_signpost_type_t v16 = sub_1DCB86FC8();
      os_log_type_t v17 = sub_1DCB88488();
      if (os_log_type_enabled(v16, v17))
      {
        id v18 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)id v18 = 67109120;
        sub_1DCB88778();
        _os_log_impl(&dword_1DC873000, v16, v17, "IsolatedCoreAudioClient StartIsolatedAudio() called with status %d", v18, 8u);
        MEMORY[0x1E01A99C0](v18, -1, -1);
      }

      if (started == sub_1DCB87088()) {
        goto LABEL_7;
      }
      sub_1DC89F5B4();
      swift_allocError();
      *(_DWORD *)uint64_t v19 = 1;
      *(unsigned char *)(v19 + 4) = 2;
      swift_willThrow();
    }
  }
}

uint64_t sub_1DC89F214()
{
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + 56) + 16);
  swift_retain();
  os_unfair_lock_lock(v1);
  sub_1DC89F280(v0);
  os_unfair_lock_unlock(v1);

  return swift_release();
}

void sub_1DC89F280(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  BOOL v3 = __OFSUB__(v2, 1);
  uint64_t v4 = v2 - 1;
  if (v3)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v1 = a1;
  *(void *)(a1 + 72) = v4;
  if (v4) {
    goto LABEL_9;
  }
  if (qword_1EAA9C658 != -1) {
    goto LABEL_11;
  }
LABEL_4:
  uint64_t v5 = sub_1DCB86FE8();
  sub_1DC89F57C(v5, (uint64_t)qword_1EAAFF810);
  os_log_type_t v6 = sub_1DCB86FC8();
  os_log_type_t v7 = sub_1DCB88488();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_1DC873000, v6, v7, "Stopping ICAC I/O...", v8, 2u);
    MEMORY[0x1E01A99C0](v8, -1, -1);
  }

  StopIsolatedAudio();
  BOOL v9 = sub_1DCB86FC8();
  os_log_type_t v10 = sub_1DCB88488();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_1DC873000, v9, v10, "IsolatedCoreAudioClient StopIsolatedAudio() called", v11, 2u);
    MEMORY[0x1E01A99C0](v11, -1, -1);
  }

  sub_1DC89EBC4();
  uint64_t v4 = *(void *)(v1 + 72);
LABEL_9:
  *(void *)(v1 + 72) = v4 & ~(v4 >> 63);
}

uint64_t sub_1DC89F408()
{
  StopIsolatedAudio();
  swift_release();
  swift_release();
  swift_release();

  return v0;
}

uint64_t sub_1DC89F444()
{
  sub_1DC89F408();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ICACConnection()
{
  return self;
}

uint64_t sub_1DC89F49C(uint64_t a1)
{
  sub_1DC89F6D8();
  sub_1DC89EEE4();
  if (v2)
  {
    swift_release();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(void *)(v1 + 16) = a1;
  }
  return v1;
}

uint64_t sub_1DC89F50C()
{
  sub_1DC89F214();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ICACIOSession()
{
  return self;
}

uint64_t sub_1DC89F57C(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

unint64_t sub_1DC89F5B4()
{
  unint64_t result = qword_1EAA9E010;
  if (!qword_1EAA9E010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E010);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ICACConnection.DomainError(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ICACConnection.DomainError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 5))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ICACConnection.DomainError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 5) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 5) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1DC89F698(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 4) <= 1u) {
    return *(unsigned __int8 *)(a1 + 4);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_1DC89F6B0(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_DWORD *)unint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 4) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ICACConnection.DomainError()
{
  return &type metadata for ICACConnection.DomainError;
}

uint64_t sub_1DC89F6EC()
{
  return sub_1DCB891C8();
}

BOOL sub_1DC89F760(int a1, int a2, int a3, unsigned int a4, double a5, double a6, double a7, double a8)
{
  BOOL v9 = a5 != a7 || a1 != a3;
  if (a6 != a8) {
    BOOL v9 = 1;
  }
  return ((v9 | a2 ^ a4 | ((a2 ^ a4) >> 8)) & 1) == 0;
}

uint64_t sub_1DC89F78C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6152656C706D6173 && a2 == 0xEA00000000006574;
  if (v2 || (sub_1DCB89018() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x7A69536B636F6C62 && a2 == 0xE900000000000065;
    if (v6 || (sub_1DCB89018() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000016 && a2 == 0x80000001DCB90A50 || (sub_1DCB89018() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else if (a1 == 0xD000000000000010 && a2 == 0x80000001DCB90A70 || (sub_1DCB89018() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 3;
    }
    else if (a1 == 0xD000000000000014 && a2 == 0x80000001DCB90A90)
    {
      swift_bridgeObjectRelease();
      return 4;
    }
    else
    {
      char v7 = sub_1DCB89018();
      swift_bridgeObjectRelease();
      if (v7) {
        return 4;
      }
      else {
        return 5;
      }
    }
  }
}

uint64_t sub_1DC89F9A4()
{
  return 5;
}

uint64_t sub_1DC89F9AC()
{
  return sub_1DCB891F8();
}

unint64_t sub_1DC89F9F4(char a1)
{
  unint64_t result = 0x6152656C706D6173;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x7A69536B636F6C62;
      break;
    case 2:
      unint64_t result = 0xD000000000000016;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0xD000000000000014;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1DC89FAB8(void *a1)
{
  uint64_t v3 = sub_1DC87E988(&qword_1EAA9E060);
  sub_1DC88D538();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  sub_1DC8A22D0();
  uint64_t v9 = v8 - v7;
  sub_1DC881A8C(a1, a1[3]);
  sub_1DC8A1DF0();
  sub_1DCB892B8();
  sub_1DCB88EE8();
  if (!v1)
  {
    sub_1DCB88F58();
    sub_1DCB88EE8();
    sub_1DCB88ED8();
    sub_1DCB88ED8();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

uint64_t sub_1DC89FC7C()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC89FCE8(void *a1)
{
  sub_1DC87E988(&qword_1EAA9E050);
  sub_1DC88D538();
  MEMORY[0x1F4188790](v2);
  sub_1DC8A22D0();
  sub_1DC881A8C(a1, a1[3]);
  sub_1DC8A1DF0();
  sub_1DCB89298();
  sub_1DCB88DC8();
  uint64_t v3 = sub_1DCB88E38();
  sub_1DCB88DC8();
  sub_1DCB88DB8();
  sub_1DCB88DB8();
  uint64_t v5 = sub_1DC8A2334();
  v6(v5);
  sub_1DC8818D0((uint64_t)a1);
  return v3;
}

uint64_t sub_1DC89FED8()
{
  return sub_1DC89F9AC();
}

uint64_t sub_1DC89FEE0()
{
  return sub_1DCB891F8();
}

unint64_t sub_1DC89FF24()
{
  return sub_1DC89F9F4(*v0);
}

uint64_t sub_1DC89FF2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1DC89F78C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1DC89FF54@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1DC89F9A4();
  *a1 = result;
  return result;
}

uint64_t sub_1DC89FF7C(uint64_t a1)
{
  unint64_t v2 = sub_1DC8A1DF0();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC89FFB8(uint64_t a1)
{
  unint64_t v2 = sub_1DC8A1DF0();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1DC89FFF4()
{
  return sub_1DC89FC7C();
}

uint64_t sub_1DC8A001C()
{
  return sub_1DC89F6EC();
}

uint64_t sub_1DC8A0044()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC8A00C0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1DC89FCE8(a1);
  if (!v2)
  {
    *(void *)a2 = v6;
    *(_DWORD *)(a2 + 8) = result;
    *(void *)(a2 + 16) = v7;
    *(unsigned char *)(a2 + 24) = v5 & 1;
    *(unsigned char *)(a2 + 25) = HIBYTE(v5) & 1;
  }
  return result;
}

uint64_t sub_1DC8A0104(void *a1)
{
  return sub_1DC89FAB8(a1);
}

BOOL sub_1DC8A0140(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 25)) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  if (*(unsigned char *)(a2 + 25)) {
    int v3 = 256;
  }
  else {
    int v3 = 0;
  }
  return sub_1DC89F760(*(_DWORD *)(a1 + 8), v2 | *(unsigned __int8 *)(a1 + 24), *(_DWORD *)(a2 + 8), v3 | *(unsigned __int8 *)(a2 + 24), *(double *)a1, *(double *)(a1 + 16), *(double *)a2, *(double *)(a2 + 16));
}

double sub_1DC8A01B0()
{
  return *(double *)(v0 + OBJC_IVAR___SNNullRequest_impl);
}

void sub_1DC8A01E4(double a1)
{
  *(double *)(v1 + OBJC_IVAR___SNNullRequest_impl) = a1;
}

uint64_t sub_1DC8A0218()
{
  return *(unsigned int *)(v0 + OBJC_IVAR___SNNullRequest_impl + 8);
}

uint64_t sub_1DC8A0254(uint64_t result)
{
  *(_DWORD *)(v1 + OBJC_IVAR___SNNullRequest_impl + 8) = result;
  return result;
}

double sub_1DC8A028C()
{
  return *(double *)(v0 + OBJC_IVAR___SNNullRequest_impl + 16);
}

void sub_1DC8A02C4(double a1)
{
  *(double *)(v1 + OBJC_IVAR___SNNullRequest_impl + 16) = a1;
}

uint64_t sub_1DC8A0300()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SNNullRequest_impl + 24);
}

uint64_t sub_1DC8A033C(uint64_t result)
{
  *(unsigned char *)(v1 + OBJC_IVAR___SNNullRequest_impl + 24) = result;
  return result;
}

uint64_t sub_1DC8A0378()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SNNullRequest_impl + 25);
}

uint64_t sub_1DC8A03B4(uint64_t result)
{
  *(unsigned char *)(v1 + OBJC_IVAR___SNNullRequest_impl + 25) = result;
  return result;
}

uint64_t sub_1DC8A03C8()
{
  sub_1DC8A22E0();
  char v4 = *(unsigned char *)(v3 + 24);
  char v5 = *(unsigned char *)(v3 + 25);
  type metadata accessor for SNNullDetector();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 40) = v0;
  *(void *)(result + 24) = v1;
  *(void *)(result + 32) = v2;
  *(unsigned char *)(result + 44) = v4;
  *(unsigned char *)(result + 45) = v5;
  return result;
}

id sub_1DC8A043C()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = &v0[OBJC_IVAR___SNNullRequest_impl];
  *(void *)uint64_t v2 = 0;
  *((_DWORD *)v2 + 2) = 1;
  *((void *)v2 + 2) = 0;
  *((_WORD *)v2 + 12) = 1;
  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, sel_init);
}

id SNNullRequest.copy(with:)@<X0>(void *a1@<X8>)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  sub_1DC8A22E0();
  char v7 = *(unsigned char *)(v6 + 24);
  char v8 = *(unsigned char *)(v6 + 25);
  os_log_type_t v10 = (char *)objc_allocWithZone(v9);
  uint64_t v11 = &v10[OBJC_IVAR___SNNullRequest_impl];
  *(void *)uint64_t v11 = v2;
  *((_DWORD *)v11 + 2) = v1;
  *((void *)v11 + 2) = v3;
  v11[24] = v7;
  v11[25] = v8;
  v13.receiver = v10;
  v13.super_class = ObjectType;
  id result = objc_msgSendSuper2(&v13, sel_init);
  a1[3] = ObjectType;
  *a1 = result;
  return result;
}

uint64_t SNNullRequest.hash.getter()
{
  return sub_1DCB891F8();
}

BOOL SNNullRequest.isEqual(_:)(uint64_t a1)
{
  swift_getObjectType();
  sub_1DC87E920(a1, (uint64_t)&v20);
  if (v21)
  {
    sub_1DC87E9CC(&v20, v19);
    sub_1DC87E9DC((uint64_t)v19, (uint64_t)v18);
    if (swift_dynamicCast() && v17)
    {
      double v3 = *(double *)(v1 + OBJC_IVAR___SNNullRequest_impl);
      int v4 = *(_DWORD *)(v1 + OBJC_IVAR___SNNullRequest_impl + 8);
      double v5 = *(double *)(v1 + OBJC_IVAR___SNNullRequest_impl + 16);
      int v6 = *(unsigned __int8 *)(v1 + OBJC_IVAR___SNNullRequest_impl + 24);
      int v7 = *(unsigned __int8 *)(v1 + OBJC_IVAR___SNNullRequest_impl + 25);
      double v8 = *(double *)&v17[OBJC_IVAR___SNNullRequest_impl];
      int v9 = *(_DWORD *)&v17[OBJC_IVAR___SNNullRequest_impl + 8];
      double v10 = *(double *)&v17[OBJC_IVAR___SNNullRequest_impl + 16];
      int v11 = v17[OBJC_IVAR___SNNullRequest_impl + 24];
      int v12 = v17[OBJC_IVAR___SNNullRequest_impl + 25];

      if (v7) {
        int v13 = 256;
      }
      else {
        int v13 = 0;
      }
      if (v12) {
        int v14 = 256;
      }
      else {
        int v14 = 0;
      }
      BOOL v15 = sub_1DC89F760(v4, v13 | v6, v9, v14 | v11, v3, v5, v8, v10);
    }
    else
    {
      BOOL v15 = 0;
    }
    sub_1DC8818D0((uint64_t)v19);
  }
  else
  {
    return 0;
  }
  return v15;
}

id SNNullRequest.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return SNNullRequest.init(coder:)(a1);
}

id SNNullRequest.init(coder:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v5 = v2;
  int v6 = sub_1DC87CE90();
  uint64_t v8 = v7;
  int v9 = v6;
  uint64_t v11 = v10;
  __int16 v13 = v12;

  int v14 = (char *)objc_allocWithZone(ObjectType);
  BOOL v15 = &v14[OBJC_IVAR___SNNullRequest_impl];
  *(void *)BOOL v15 = v8;
  *((_DWORD *)v15 + 2) = v9;
  *((void *)v15 + 2) = v11;
  v15[24] = v13 & 1;
  v15[25] = HIBYTE(v13) & 1;
  v18.receiver = v14;
  v18.super_class = ObjectType;
  id v16 = objc_msgSendSuper2(&v18, sel_init);

  swift_getObjectType();
  sub_1DC8A22F4();
  return v16;
}

Swift::Void __swiftcall SNNullRequest.encode(with:)(NSCoder with)
{
  if (*(unsigned char *)(v1 + OBJC_IVAR___SNNullRequest_impl + 25)) {
    __int16 v2 = 256;
  }
  else {
    __int16 v2 = 0;
  }
  sub_1DC87A9F0(*(_DWORD *)(v1 + OBJC_IVAR___SNNullRequest_impl + 8), v2 | *(unsigned __int8 *)(v1 + OBJC_IVAR___SNNullRequest_impl + 24), *(double *)(v1 + OBJC_IVAR___SNNullRequest_impl), *(double *)(v1 + OBJC_IVAR___SNNullRequest_impl + 16));
}

uint64_t static SNNullRequest.supportsSecureCoding.getter()
{
  return 1;
}

id SNNullRequest.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

_UNKNOWN **sub_1DC8A0AF8()
{
  id result = (_UNKNOWN **)sub_1DC8A03C8();
  if (v0) {
    return &off_1F37E7EE8;
  }
  return result;
}

uint64_t sub_1DC8A0B24()
{
  return sub_1DC888600();
}

id sub_1DC8A0B2C(int a1, char a2, double a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = self;
  *(void *)&long long v31 = 0;
  id v8 = sub_1DCB6B73C(v7, (uint64_t)&v31);
  if (v8)
  {
    id v9 = (id)v31;
    sub_1DCB87908();
    uint64_t v10 = sub_1DC8A2288();
    id v14 = sub_1DCB68494(v10, v11, v12, v13);

    BOOL v15 = (void *)v31;
    if (v14)
    {
      id v16 = (id)v31;
      if (a2)
      {
        BOOL v15 = (void *)sub_1DCB87908();
        *(void *)&long long v31 = 0;
        id v17 = sub_1DCB68964(v7, v8, v15, 1, (uint64_t)&v31);
      }
      else
      {
        sub_1DCB87908();
        uint64_t v20 = sub_1DC8A2288();
        id v17 = sub_1DCB686FC(v20, v21, v22, v23);
      }
      id v24 = v17;

      if (v24)
      {
        id v25 = (id)v31;
        if ((~*(void *)&a3 & 0x7FF0000000000000) != 0)
        {
          if (a3 > -1.0)
          {
            if (a3 < 4294967300.0)
            {
              sub_1DCB6BA88(a3, a1, 1, (uint64_t)&v31);
              id v30 = 0;
              if (!sub_1DCB6B83C(v7, v8, v14, v24, 0, 0, &v31, (uint64_t)&v30))
              {
                id v28 = v30;
                sub_1DCB86898();

                swift_willThrow();
                goto LABEL_19;
              }
              if (a3 > -9.22337204e18)
              {
                if (a3 < 9.22337204e18)
                {
                  id v26 = v30;
                  sub_1DCB5EC24((uint64_t)v8);
                  sub_1DCB5F1F8((uint64_t)v8);

LABEL_19:
                  return v8;
                }
LABEL_25:
                __break(1u);
              }
LABEL_24:
              __break(1u);
              goto LABEL_25;
            }
LABEL_23:
            __break(1u);
            goto LABEL_24;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
        goto LABEL_23;
      }
      id v27 = (id)v31;
      sub_1DCB86898();

      swift_willThrow();
    }
    else
    {
      id v19 = (id)v31;
      sub_1DCB86898();

      swift_willThrow();
    }
  }
  else
  {
    id v18 = (id)v31;
    sub_1DCB86898();

    swift_willThrow();
  }
  return v8;
}

CMTimeValue sub_1DC8A0E20(void *a1, int64_t a2, void (*a3)(void))
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(v4 + 45) != 1)
  {
    uint64_t v7 = v4;
    uint64_t v11 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SNNullResult()), sel_init);
    uint64_t v12 = self;
    v30.start.CMTimeValue value = 0;
    uint64_t v13 = (char *)sub_1DCB6C41C(v12, a1, (uint64_t)&v30);
    CMTimeValue value = v30.start.value;
    if (v13)
    {
      id v14 = v13;
      id v15 = (id)v30.start.value;
      int64_t v16 = sub_1DCB89168();
      int32_t v17 = sub_1DCB5C99C((uint64_t)a1);
      if (v17 < 0)
      {
        __break(1u);
      }
      else
      {
        uint64_t v29 = v11;
        CMTimeMake(&v30.start, v16, v17);
        CMTimeValue value = v30.start.value;
        uint64_t v18 = *(void *)&v30.start.timescale;
        CMTimeEpoch epoch = v30.start.epoch;
        int32_t v20 = sub_1DCB5C99C((uint64_t)a1);
        if ((v20 & 0x80000000) == 0)
        {
          CMTimeMake(&v30.start, a2, v20);
          CMTime duration = v30.start;
          start.CMTimeValue value = value;
          *(void *)&start.timescale = v18;
          start.CMTimeEpoch epoch = epoch;
          CMTimeRangeMake(&v30, &start, &duration);
          CMTimeRange v38 = v30;
          a3();
          if (!v5)
          {
            uint64_t v21 = sub_1DCB883C8();
            ((void (*)(uint64_t))a3)(v21);
            sub_1DCB883D8();
            uint64_t v24 = v37;
            id v25 = &v29[OBJC_IVAR___SNNullResult_impl];
            *(void *)id v25 = v33;
            *((void *)v25 + 1) = v34;
            *((_OWORD *)v25 + 1) = v35;
            *((void *)v25 + 4) = v36;
            *((void *)v25 + 5) = v24;
            double v26 = *(double *)(v7 + 32) * (double)a2;
            double v27 = v26 / (double)sub_1DCB5C99C((uint64_t)a1) * 1000000.0;
            if ((~*(void *)&v27 & 0x7FF0000000000000) != 0)
            {
              if (v27 > -1.0)
              {
                if (v27 < 4294967300.0)
                {
                  usleep(v27);
                  sub_1DC87E988(&qword_1EAA9C720);
                  CMTimeValue v28 = swift_allocObject();
                  *(_OWORD *)(v28 + 16) = xmmword_1DCBB8670;
                  *(void *)(v28 + 32) = v29;
                  v30.start.CMTimeValue value = v28;
                  sub_1DCB87C68();
                  CMTimeValue value = v30.start.value;

                  return value;
                }
LABEL_20:
                __break(1u);
              }
LABEL_19:
              __break(1u);
              goto LABEL_20;
            }
LABEL_18:
            __break(1u);
            goto LABEL_19;
          }

LABEL_10:
          return value;
        }
      }
      __break(1u);
      goto LABEL_18;
    }
    id v14 = v11;
    id v22 = (id)v30.start.value;
    sub_1DCB86898();

    swift_willThrow();
    goto LABEL_10;
  }
  sub_1DC8A1BA8();
  sub_1DC883884();
  *int v6 = 0;
  swift_willThrow();
  return value;
}

id sub_1DC8A116C()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1) {
    return v1;
  }
  sub_1DC8A1BA8();
  sub_1DC883884();
  *id v3 = 1;
  return (id)swift_willThrow();
}

void sub_1DC8A11C8(double a1)
{
  double v3 = *v1;
  if (v1[3] <= 0.0) {
    double v4 = a1;
  }
  else {
    double v4 = v1[3];
  }
  uint64_t v5 = swift_allocObject();
  *(double *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v1;
  *(double *)(v5 + 32) = v3;
  swift_retain();
  uint64_t v6 = sub_1DC8A12D0();
  swift_release();
  if (!v2)
  {
    uint64_t v7 = (void *)*((void *)v1 + 2);
    *((void *)v1 + 2) = v6;
  }
}

id sub_1DC8A1298@<X0>(uint64_t a1@<X0>, void *a2@<X8>, double a3@<D0>)
{
  id result = sub_1DC8A0B2C(*(_DWORD *)(a1 + 40), *(unsigned char *)(a1 + 44), a3);
  if (!v3) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1DC8A12D0()
{
  sub_1DC8A22C0();
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  self;
  uint64_t v2 = (void *)swift_allocObject();
  v2[2] = v1;
  v2[3] = v0;
  aBlock[4] = sub_1DC8A1CE0;
  aBlock[5] = v2;
  aBlock[0] = (id)MEMORY[0x1E4F143A8];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1DC8A191C;
  aBlock[3] = &unk_1F37FA8C8;
  uint64_t v3 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v4 = swift_release();
  id v12 = sub_1DC8A2314(v4, v5, v6, v7, v8, v9, v10, v11, v18, (uint64_t)aBlock[0]);
  _Block_release(v3);
  id v13 = aBlock[0];
  if (v12)
  {
    sub_1DCB88808();
    swift_unknownObjectRelease();
    sub_1DC87E9DC((uint64_t)v21, (uint64_t)aBlock);
    sub_1DC8A1D00();
    if (swift_dynamicCast())
    {
      sub_1DC8818D0((uint64_t)v21);
      return v19;
    }
    else
    {
      sub_1DC8A1D40();
      uint64_t v16 = sub_1DC883884();
      sub_1DC8A22A4(v16, v17);
      return sub_1DC8818D0((uint64_t)v21);
    }
  }
  else
  {
    id v15 = v13;
    sub_1DCB86898();

    return swift_willThrow();
  }
}

uint64_t sub_1DC8A1490()
{
  sub_1DC8A22C0();
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = self;
  uint64_t v3 = (void *)swift_allocObject();
  v3[2] = v1;
  id v3[3] = v0;
  aBlock[4] = sub_1DC8A1DE8;
  aBlock[5] = v3;
  aBlock[0] = (id)MEMORY[0x1E4F143A8];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1DC8A191C;
  aBlock[3] = &unk_1F37FADC8;
  uint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  id v5 = sub_1DCB68388(v2, v4, (uint64_t)aBlock);
  _Block_release(v4);
  id v6 = aBlock[0];
  if (v5)
  {
    sub_1DCB88808();
    swift_unknownObjectRelease();
    sub_1DC87E9DC((uint64_t)v13, (uint64_t)aBlock);
    sub_1DC87E988(&qword_1EAA9E048);
    if (swift_dynamicCast())
    {
      sub_1DC8818D0((uint64_t)v13);
      return v11;
    }
    else
    {
      sub_1DC8A1D40();
      uint64_t v9 = sub_1DC883884();
      sub_1DC8A22A4(v9, v10);
      return sub_1DC8818D0((uint64_t)v13);
    }
  }
  else
  {
    uint64_t v8 = v6;
    sub_1DCB86898();

    return swift_willThrow();
  }
}

uint64_t sub_1DC8A1668()
{
  sub_1DC8A22C0();
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  self;
  uint64_t v2 = (void *)swift_allocObject();
  v2[2] = v1;
  v2[3] = v0;
  aBlock[4] = sub_1DC8A1E98;
  aBlock[5] = v2;
  aBlock[0] = (id)MEMORY[0x1E4F143A8];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1DC8A191C;
  aBlock[3] = &unk_1F37FAEE0;
  uint64_t v3 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v4 = swift_release();
  id v12 = sub_1DC8A2314(v4, v5, v6, v7, v8, v9, v10, v11, v18, (uint64_t)aBlock[0]);
  _Block_release(v3);
  id v13 = aBlock[0];
  if (v12)
  {
    sub_1DCB88808();
    swift_unknownObjectRelease();
    sub_1DC87E9DC((uint64_t)v20, (uint64_t)aBlock);
    if ((swift_dynamicCast() & 1) == 0)
    {
      sub_1DC8A1D40();
      uint64_t v16 = sub_1DC883884();
      sub_1DC8A22A4(v16, v17);
    }
    return sub_1DC8818D0((uint64_t)v20);
  }
  else
  {
    uint64_t v14 = v13;
    sub_1DCB86898();

    return swift_willThrow();
  }
}

void sub_1DC8A1820()
{
  uint64_t v1 = sub_1DC8A116C();
  if (!v0)
  {
    uint64_t v2 = v1;
    uint64_t v3 = sub_1DCB61370(v1);

    if (!v3) {
      __break(1u);
    }
  }
}

uint64_t sub_1DC8A187C()
{
  return swift_deallocClassInstance();
}

CMTimeValue sub_1DC8A18B4(void *a1, int64_t a2, void (*a3)(void))
{
  return sub_1DC8A0E20(a1, a2, a3);
}

unint64_t sub_1DC8A18CC()
{
  return 0xF000000000000007;
}

void sub_1DC8A18D4()
{
}

void sub_1DC8A18EC(double a1)
{
}

id sub_1DC8A1904()
{
  return sub_1DC8A116C();
}

id sub_1DC8A191C(uint64_t a1, uint64_t a2)
{
  void (*v3)(void *__return_ptr, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void v13[3];
  uint64_t v14;
  uint64_t vars8;

  uint64_t v3 = *(void (**)(void *__return_ptr, uint64_t))(a1 + 32);
  swift_retain();
  v3(v13, a2);
  swift_release();
  uint64_t v4 = v14;
  if (v14)
  {
    sub_1DC881A8C(v13, v14);
    sub_1DC88D538();
    uint64_t v6 = v5;
    MEMORY[0x1F4188790](v7);
    sub_1DC8A22D0();
    uint64_t v10 = v9 - v8;
    (*(void (**)(uint64_t))(v6 + 16))(v9 - v8);
    uint64_t v11 = (void *)sub_1DCB89008();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v4);
    sub_1DC8818D0((uint64_t)v13);
  }
  else
  {
    uint64_t v11 = 0;
  }

  return v11;
}

uint64_t type metadata accessor for SNNullRequest()
{
  return self;
}

uint64_t method lookup function for SNNullRequest(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SNNullRequest);
}

uint64_t type metadata accessor for SNNullDetector()
{
  return self;
}

__n128 initializeWithCopy for NullRequest(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for NullRequest(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 26))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
      BOOL v4 = v3 >= 2;
      int v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NullRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 26) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 26) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NullRequest()
{
  return &type metadata for NullRequest;
}

unint64_t sub_1DC8A1B5C()
{
  unint64_t result = qword_1EAA9E030;
  if (!qword_1EAA9E030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E030);
  }
  return result;
}

unint64_t sub_1DC8A1BA8()
{
  unint64_t result = qword_1EAA9E038;
  if (!qword_1EAA9E038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E038);
  }
  return result;
}

uint64_t sub_1DC8A1BF4()
{
  swift_release();

  return swift_deallocObject();
}

id sub_1DC8A1C2C@<X0>(void *a1@<X8>)
{
  return sub_1DC8A1298(*(void *)(v1 + 24), a1, *(double *)(v1 + 16));
}

uint64_t sub_1DC8A1C4C(uint64_t a1, void (*a2)(void))
{
  swift_retain();

  return sub_1DCA14944(a1, a2);
}

uint64_t sub_1DC8A1CA8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1DC8A1CE0(uint64_t a1)
{
  return sub_1DC8A1C4C(a1, *(void (**)(void))(v1 + 16));
}

uint64_t sub_1DC8A1CE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1DC8A1CF8()
{
  return swift_release();
}

unint64_t sub_1DC8A1D00()
{
  unint64_t result = qword_1EAA9D0E8;
  if (!qword_1EAA9D0E8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EAA9D0E8);
  }
  return result;
}

unint64_t sub_1DC8A1D40()
{
  unint64_t result = qword_1EAA9E040;
  if (!qword_1EAA9E040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E040);
  }
  return result;
}

uint64_t sub_1DC8A1D8C(uint64_t a1, void (*a2)(void))
{
  swift_retain();

  return sub_1DCA149F0(a1, a2);
}

uint64_t sub_1DC8A1DE8(uint64_t a1)
{
  return sub_1DC8A1D8C(a1, *(void (**)(void))(v1 + 16));
}

unint64_t sub_1DC8A1DF0()
{
  unint64_t result = qword_1EAA9E058;
  if (!qword_1EAA9E058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E058);
  }
  return result;
}

uint64_t sub_1DC8A1E3C()
{
  swift_retain();

  return sub_1DCA14A90();
}

uint64_t sub_1DC8A1E98()
{
  return sub_1DC8A1E3C();
}

uint64_t getEnumTagSinglePayload for NullRequest.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for NullRequest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DC8A1FF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NullRequest.CodingKeys()
{
  return &type metadata for NullRequest.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for SNNullDetector.DomainError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DC8A20F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SNNullDetector.DomainError()
{
  return &type metadata for SNNullDetector.DomainError;
}

unint64_t sub_1DC8A2134()
{
  unint64_t result = qword_1EAA9E068;
  if (!qword_1EAA9E068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E068);
  }
  return result;
}

unint64_t sub_1DC8A2184()
{
  unint64_t result = qword_1EAA9E070;
  if (!qword_1EAA9E070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E070);
  }
  return result;
}

unint64_t sub_1DC8A21D4()
{
  unint64_t result = qword_1EAA9E078;
  if (!qword_1EAA9E078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E078);
  }
  return result;
}

unint64_t sub_1DC8A2224()
{
  unint64_t result = qword_1EAA9E080;
  if (!qword_1EAA9E080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E080);
  }
  return result;
}

uint64_t sub_1DC8A2288()
{
  return v0;
}

uint64_t sub_1DC8A22A4(uint64_t a1, unsigned char *a2)
{
  *a2 = v2;
  return swift_willThrow();
}

uint64_t sub_1DC8A22F4()
{
  return swift_deallocPartialClassInstance();
}

id sub_1DC8A2314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  return sub_1DCB68388(v11, v10, (uint64_t)&a10);
}

uint64_t sub_1DC8A2334()
{
  return v0;
}

uint64_t sub_1DC8A2348()
{
  return sub_1DCB891E8();
}

BOOL sub_1DC8A23A0(int a1, int a2, double a3, double a4, double a5, double a6)
{
  BOOL v7 = a3 == a5 && a1 == a2;
  return a4 == a6 && v7;
}

uint64_t sub_1DC8A23B8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6152656C706D6173 && a2 == 0xEA00000000006574;
  if (v2 || (sub_1DCB89018() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x7A69536B636F6C62 && a2 == 0xE900000000000065;
    if (v6 || (sub_1DCB89018() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000012 && a2 == 0x80000001DCB90AF0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v7 = sub_1DCB89018();
      swift_bridgeObjectRelease();
      if (v7) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_1DC8A2520(char a1)
{
  if (!a1) {
    return 0x6152656C706D6173;
  }
  if (a1 == 1) {
    return 0x7A69536B636F6C62;
  }
  return 0xD000000000000012;
}

uint64_t sub_1DC8A2584(void *a1)
{
  uint64_t v3 = sub_1DC87E988(&qword_1EAA9E0D0);
  sub_1DC89D4E0();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1DC881A8C(a1, a1[3]);
  sub_1DC8A4360();
  sub_1DCB892B8();
  v10[15] = 0;
  sub_1DCB88EE8();
  if (!v1)
  {
    v10[14] = 1;
    sub_1DCB88F58();
    v10[13] = 2;
    sub_1DCB88EE8();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v3);
}

uint64_t sub_1DC8A26F4()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC8A2754(void *a1)
{
  sub_1DC87E988(&qword_1EAA9E0C0);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v2);
  sub_1DC881A8C(a1, a1[3]);
  sub_1DC8A4360();
  sub_1DCB89298();
  sub_1DCB88DC8();
  uint64_t v4 = sub_1DCB88E38();
  sub_1DCB88DC8();
  uint64_t v5 = sub_1DC8A47AC();
  v6(v5);
  sub_1DC8818D0((uint64_t)a1);
  return v4;
}

uint64_t sub_1DC8A28E8()
{
  return sub_1DC8A2520(*v0);
}

uint64_t sub_1DC8A28F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1DC8A23B8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1DC8A2918(uint64_t a1)
{
  unint64_t v2 = sub_1DC8A4360();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC8A2954(uint64_t a1)
{
  unint64_t v2 = sub_1DC8A4360();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1DC8A2990()
{
  return sub_1DC8A26F4();
}

uint64_t sub_1DC8A29A0()
{
  return sub_1DC8A2348();
}

uint64_t sub_1DC8A29B0()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC8A2A0C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1DC8A2754(a1);
  if (!v2)
  {
    *(void *)a2 = v5;
    *(_DWORD *)(a2 + 8) = result;
    *(void *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1DC8A2A40(void *a1)
{
  return sub_1DC8A2584(a1);
}

BOOL sub_1DC8A2A64(uint64_t a1, uint64_t a2)
{
  return sub_1DC8A23A0(*(_DWORD *)(a1 + 8), *(_DWORD *)(a2 + 8), *(double *)a1, *(double *)(a1 + 16), *(double *)a2, *(double *)(a2 + 16));
}

double sub_1DC8A2AAC()
{
  return *(double *)(v0 + OBJC_IVAR___SNDetectSignalThresholdRequest_impl);
}

void sub_1DC8A2AE0(double a1)
{
  *(double *)(v1 + OBJC_IVAR___SNDetectSignalThresholdRequest_impl) = a1;
}

uint64_t sub_1DC8A2B14()
{
  return *(unsigned int *)(v0 + OBJC_IVAR___SNDetectSignalThresholdRequest_impl + 8);
}

uint64_t sub_1DC8A2B50(uint64_t result)
{
  *(_DWORD *)(v1 + OBJC_IVAR___SNDetectSignalThresholdRequest_impl + 8) = result;
  return result;
}

double sub_1DC8A2B88()
{
  return *(double *)(v0 + OBJC_IVAR___SNDetectSignalThresholdRequest_impl + 16);
}

void sub_1DC8A2BC0(double a1)
{
  *(double *)(v1 + OBJC_IVAR___SNDetectSignalThresholdRequest_impl + 16) = a1;
}

uint64_t sub_1DC8A2BD4()
{
  sub_1DC8A22E0();
  type metadata accessor for SNDetectSignalThresholdRequestImpl();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = v1;
  *(_DWORD *)(result + 32) = v0;
  *(void *)(result + 40) = v2;
  return result;
}

id sub_1DC8A2C34()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = &v0[OBJC_IVAR___SNDetectSignalThresholdRequest_impl];
  *(void *)uint64_t v2 = 0;
  *((_DWORD *)v2 + 2) = 1;
  *((void *)v2 + 2) = 0;
  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, sel_init);
}

id SNDetectSignalThresholdRequest.copy(with:)@<X0>(void *a1@<X8>)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  sub_1DC8A22E0();
  uint64_t v7 = (char *)objc_allocWithZone(v6);
  uint64_t v8 = &v7[OBJC_IVAR___SNDetectSignalThresholdRequest_impl];
  *(void *)uint64_t v8 = v2;
  *((_DWORD *)v8 + 2) = v1;
  *((void *)v8 + 2) = v3;
  v10.receiver = v7;
  v10.super_class = ObjectType;
  id result = objc_msgSendSuper2(&v10, sel_init);
  a1[3] = ObjectType;
  *a1 = result;
  return result;
}

uint64_t SNDetectSignalThresholdRequest.hash.getter()
{
  return sub_1DCB891F8();
}

BOOL SNDetectSignalThresholdRequest.isEqual(_:)(uint64_t a1)
{
  swift_getObjectType();
  sub_1DC87E920(a1, (uint64_t)&v15);
  if (!v16) {
    return 0;
  }
  sub_1DC87E9CC(&v15, v14);
  sub_1DC87E9DC((uint64_t)v14, (uint64_t)v13);
  if (!swift_dynamicCast() || !v12) {
    goto LABEL_8;
  }
  double v3 = *(double *)(v1 + OBJC_IVAR___SNDetectSignalThresholdRequest_impl);
  int v4 = *(_DWORD *)(v1 + OBJC_IVAR___SNDetectSignalThresholdRequest_impl + 8);
  double v5 = *(double *)(v1 + OBJC_IVAR___SNDetectSignalThresholdRequest_impl + 16);
  double v6 = *(double *)&v12[OBJC_IVAR___SNDetectSignalThresholdRequest_impl];
  int v7 = *(_DWORD *)&v12[OBJC_IVAR___SNDetectSignalThresholdRequest_impl + 8];
  double v8 = *(double *)&v12[OBJC_IVAR___SNDetectSignalThresholdRequest_impl + 16];

  if (v3 == v6 && v4 == v7) {
    BOOL v10 = v5 == v8;
  }
  else {
LABEL_8:
  }
    BOOL v10 = 0;
  sub_1DC8818D0((uint64_t)v14);
  return v10;
}

id SNDetectSignalThresholdRequest.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return SNDetectSignalThresholdRequest.init(coder:)(a1);
}

id SNDetectSignalThresholdRequest.init(coder:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v5 = v2;
  int v6 = sub_1DC87CFB4();
  uint64_t v8 = v7;
  int v9 = v6;
  uint64_t v11 = v10;

  uint64_t v12 = (char *)objc_allocWithZone(ObjectType);
  id v13 = &v12[OBJC_IVAR___SNDetectSignalThresholdRequest_impl];
  *(void *)id v13 = v8;
  *((_DWORD *)v13 + 2) = v9;
  *((void *)v13 + 2) = v11;
  v16.receiver = v12;
  v16.super_class = ObjectType;
  id v14 = objc_msgSendSuper2(&v16, sel_init);

  swift_getObjectType();
  sub_1DC8A47C0();
  return v14;
}

Swift::Void __swiftcall SNDetectSignalThresholdRequest.encode(with:)(NSCoder with)
{
  sub_1DC87AC28(*(_DWORD *)(v1 + OBJC_IVAR___SNDetectSignalThresholdRequest_impl + 8), *(double *)(v1 + OBJC_IVAR___SNDetectSignalThresholdRequest_impl), *(double *)(v1 + OBJC_IVAR___SNDetectSignalThresholdRequest_impl + 16));
}

uint64_t static SNDetectSignalThresholdRequest.supportsSecureCoding.getter()
{
  return 1;
}

id SNDetectSignalThresholdRequest.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

_UNKNOWN **sub_1DC8A3248()
{
  id result = (_UNKNOWN **)sub_1DC8A2BD4();
  if (v0) {
    return &off_1F37F2CC0;
  }
  return result;
}

id sub_1DC8A3274(int a1, double a2, double a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = self;
  *(void *)&long long v26 = 0;
  id v7 = sub_1DCB6B73C(v6, (uint64_t)&v26);
  if (!v7)
  {
    id v19 = (id)v26;
    sub_1DCB86898();

    swift_willThrow();
    return v7;
  }
  id v8 = (id)v26;
  int v9 = (void *)sub_1DCB87908();
  *(void *)&long long v26 = 0;
  id v10 = sub_1DCB68494(v6, v7, v9, (uint64_t)&v26);

  if (!v10)
  {
    id v20 = (id)v26;
    sub_1DCB86898();

    swift_willThrow();
LABEL_18:

    return v7;
  }
  id v11 = (id)v26;
  uint64_t v12 = (void *)sub_1DC8A477C();
  *(void *)&long long v26 = 0;
  id v13 = sub_1DCB68F1C(v6, v7, v12, 1, (uint64_t)&v26);

  id v14 = (void *)v26;
  if (!v13)
  {
    id v21 = (id)v26;
    sub_1DCB86898();

    swift_willThrow();
    goto LABEL_18;
  }
  *(void *)&long long v26 = 0;
  id v16 = v14;
  float v15 = a3;
  if (!sub_1DCB69790(v15, v6, v13, (uint64_t)&v26))
  {
    id v22 = (id)v26;
    sub_1DCB86898();

LABEL_17:
    swift_willThrow();

    goto LABEL_18;
  }
  if ((~*(void *)&a2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (a2 <= -1.0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (a2 >= 4294967300.0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  id v17 = (id)v26;
  sub_1DCB6BA88(a2, a1, 1, (uint64_t)&v26);
  id v25 = 0;
  if (!sub_1DCB6B83C(v6, v7, v10, v13, 0, 0, &v26, (uint64_t)&v25))
  {
    id v23 = v25;
    sub_1DCB86898();

    goto LABEL_17;
  }
  if (a2 <= -9.22337204e18)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  if (a2 >= 9.22337204e18) {
    goto LABEL_24;
  }
  id v18 = v25;
  sub_1DCB5EC24((uint64_t)v7);
  sub_1DCB5F1F8((uint64_t)v7);

  return v7;
}

uint64_t sub_1DC8A3588(void *a1, uint64_t a2, unint64_t a3)
{
  v27[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v6 = self;
  v27[0] = 0;
  id v7 = sub_1DCB69990(v6, a1, (uint64_t)v27);
  id v8 = v27[0];
  if (!v7)
  {
    id v23 = v27[0];
LABEL_15:
    sub_1DCB86898();

    goto LABEL_16;
  }
  int v9 = v7;
  sub_1DC87E988((uint64_t *)&unk_1EAA9E0B0);
  uint64_t v10 = sub_1DCB87C38();
  id v11 = v8;

  v27[0] = 0;
  id v12 = sub_1DCB69C3C(v6, a1, (uint64_t)v27);
  id v13 = v27[0];
  if (!v12)
  {
    id v23 = v27[0];
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  id v14 = v12;
  uint64_t v15 = sub_1DCB87C38();
  id v16 = v13;

  if (*(void *)(v10 + 16) != 1
    || (uint64_t v17 = *(void *)(v10 + 32), *(void *)(v17 + 16) != 1)
    || *(void *)(v15 + 16) != 1
    || *(void *)(*(void *)(v15 + 32) + 16) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1DC8A4274();
    swift_allocError();
    *uint64_t v24 = 0;
LABEL_16:
    swift_willThrow();
    return a3;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (!*(void *)(v17 + 16))
  {
    __break(1u);
    goto LABEL_19;
  }
  unint64_t v18 = *(void *)(v17 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v15 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (!*(void *)(v19 + 16))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v20 = *(void *)(v19 + 32);
  swift_bridgeObjectRetain();
  uint64_t v21 = swift_bridgeObjectRelease();
  MEMORY[0x1F4188790](v21);
  sub_1DC8A3A70(v18, v20, (void (*)(void *, id))sub_1DC8A42C0);
  a3 = v22;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v3)
  {
    if (!(a3 >> 62))
    {
      swift_bridgeObjectRetain();
      sub_1DCB89078();
      swift_bridgeObjectRelease();
      return a3;
    }
LABEL_20:
    swift_bridgeObjectRetain();
    sub_1DC87E988(&qword_1EAA9E960);
    uint64_t v26 = sub_1DCB88C78();
    swift_bridgeObjectRelease_n();
    return v26;
  }
  return a3;
}

uint64_t sub_1DC8A3888(void *a1, void *a2, uint64_t a3, void (*a4)(CMTimeValue, uint64_t, CMTimeEpoch))
{
  id v8 = objc_msgSend(a1, sel_integerValue);
  int v9 = objc_msgSend(a2, sel_integerValue);
  uint64_t result = sub_1DCB5C99C(a3);
  if ((result & 0x80000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t result = (uint64_t)CMTimeMake(&v25, (int64_t)v8, result);
  int64_t v11 = v9 - v8;
  if (__OFSUB__(v9, v8))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  CMTimeValue value = v25.value;
  uint64_t timescale = v25.timescale;
  uint64_t flags = v25.flags;
  CMTimeEpoch epoch = v25.epoch;
  uint64_t result = sub_1DCB5C99C(a3);
  if ((result & 0x80000000) != 0)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  CMTimeMake(&v25, v11, result);
  CMTimeValue v16 = v25.value;
  uint64_t v17 = a4;
  CMTimeEpoch v18 = v25.epoch;
  uint64_t v19 = (objc_class *)type metadata accessor for SNSignalThresholdResult();
  uint64_t v20 = *(void *)&v25.timescale;
  uint64_t v24 = (char *)objc_msgSend(objc_allocWithZone(v19), sel_init);
  CMTimeValue v31 = value;
  int v32 = timescale;
  int v33 = flags;
  CMTimeEpoch v34 = epoch;
  CMTimeValue v35 = v16;
  uint64_t v36 = v20;
  CMTimeEpoch v37 = v18;
  v17(value, timescale | (flags << 32), epoch);
  if (v4)
  {

    return (uint64_t)v24;
  }
  else
  {
    uint64_t v21 = sub_1DCB883C8();
    ((void (*)(uint64_t))v17)(v21);
    sub_1DCB883D8();
    uint64_t v22 = v30;
    uint64_t result = (uint64_t)v24;
    id v23 = &v24[OBJC_IVAR___SNSignalThresholdResult_impl];
    *(void *)id v23 = v26;
    *((void *)v23 + 1) = v27;
    *((_OWORD *)v23 + 1) = v28;
    *((void *)v23 + 4) = v29;
    *((void *)v23 + 5) = v22;
  }
  return result;
}

void sub_1DC8A3A70(unint64_t a1, unint64_t a2, void (*a3)(void *, id))
{
  uint64_t v4 = v3;
  unint64_t v6 = a1;
  unint64_t v26 = a1 >> 62;
  if (a1 >> 62) {
    goto LABEL_68;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    unint64_t v31 = a2 >> 62;
    if (a2 >> 62)
    {
      swift_bridgeObjectRetain();
      id v8 = (void *)sub_1DCB88CC8();
      swift_bridgeObjectRelease();
    }
    else
    {
      id v8 = *(void **)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if ((uint64_t)v8 >= v7) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = (uint64_t)v8;
    }
    sub_1DCB88B68();
    if (v9 < 0)
    {
      __break(1u);
LABEL_71:

      __break(1u);
      return;
    }
    unint64_t v28 = v6;
    if (!v9) {
      break;
    }
    uint64_t v25 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v26)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v27 = sub_1DCB88CC8();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v27 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    unint64_t v12 = 0;
    unint64_t v32 = v6 & 0xC000000000000001;
    uint64_t v11 = a2 & 0xFFFFFFFFFFFFFF8;
    unint64_t v30 = a2 & 0xC000000000000001;
    while (v9 != v12)
    {
      if (v27 == v12) {
        goto LABEL_60;
      }
      if (v32)
      {
        id v13 = (id)MEMORY[0x1E01A7AE0](v12, v6);
      }
      else
      {
        if (v12 >= *(void *)(v25 + 16)) {
          goto LABEL_67;
        }
        id v13 = *(id *)(v6 + 8 * v12 + 32);
      }
      id v8 = v13;
      if (v31)
      {
        swift_bridgeObjectRetain();
        uint64_t v14 = sub_1DCB88CC8();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v14 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (v12 == v14) {
        goto LABEL_71;
      }
      if (v30)
      {
        id v15 = (id)MEMORY[0x1E01A7AE0](v12, a2);
      }
      else
      {
        if (v12 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_61;
        }
        id v15 = *(id *)(a2 + 8 * v12 + 32);
      }
      CMTimeValue v16 = v15;
      a3(v8, v15);
      if (v4)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_58;
      }
      ++v12;

      sub_1DCB88B48();
      sub_1DCB88B78();
      sub_1DCB88B88();
      sub_1DCB88B58();
      unint64_t v6 = v28;
      if (v9 == v12)
      {
        uint64_t v10 = v25;
        goto LABEL_33;
      }
    }
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_1DCB88CC8();
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8;
  unint64_t v32 = v6 & 0xC000000000000001;
  uint64_t v11 = a2 & 0xFFFFFFFFFFFFFF8;
  unint64_t v30 = a2 & 0xC000000000000001;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_33:
  for (uint64_t i = v9 + 4; ; ++i)
  {
    if (v26)
    {
      swift_bridgeObjectRetain();
      uint64_t v18 = sub_1DCB88CC8();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v18 = *(void *)(v10 + 16);
    }
    unint64_t v19 = i - 4;
    if (i - 4 == v18)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    if (v32)
    {
      id v20 = (id)MEMORY[0x1E01A7AE0](i - 4, v6);
    }
    else
    {
      if ((v19 & 0x8000000000000000) != 0) {
        goto LABEL_62;
      }
      if (v19 >= *(void *)(v10 + 16)) {
        goto LABEL_63;
      }
      id v20 = *(id *)(v6 + 8 * i);
    }
    uint64_t v21 = v20;
    if (__OFADD__(v19, 1)) {
      goto LABEL_64;
    }
    if (v31)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = sub_1DCB88CC8();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v22 = *(void *)(v11 + 16);
    }
    if (v19 == v22)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    if (v30)
    {
      id v23 = (id)MEMORY[0x1E01A7AE0](i - 4, a2);
    }
    else
    {
      if ((v19 & 0x8000000000000000) != 0) {
        goto LABEL_65;
      }
      if (v19 >= *(void *)(v11 + 16)) {
        goto LABEL_66;
      }
      id v23 = *(id *)(a2 + 8 * i);
    }
    uint64_t v24 = v23;
    a3(v21, v23);
    if (v4) {
      break;
    }

    sub_1DCB88B48();
    sub_1DCB88B78();
    sub_1DCB88B88();
    sub_1DCB88B58();
    unint64_t v6 = v28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_58:
  swift_release();
}

id sub_1DC8A3F4C()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1) {
    return v1;
  }
  sub_1DC8A4274();
  swift_allocError();
  *uint64_t v3 = 1;
  return (id)swift_willThrow();
}

void sub_1DC8A3FB0(double a1)
{
  double v3 = *v1;
  if (v1[3] <= 0.0) {
    double v4 = a1;
  }
  else {
    double v4 = v1[3];
  }
  uint64_t v5 = swift_allocObject();
  *(double *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v1;
  *(double *)(v5 + 32) = v3;
  swift_retain();
  uint64_t v6 = sub_1DC8A12D0();
  swift_release();
  if (!v2)
  {
    uint64_t v7 = (void *)*((void *)v1 + 2);
    *((void *)v1 + 2) = v6;
  }
}

id sub_1DC8A4080@<X0>(uint64_t a1@<X0>, void *a2@<X8>, double a3@<D0>)
{
  id result = sub_1DC8A3274(*(_DWORD *)(a1 + 32), a3, *(double *)(a1 + 40));
  if (!v3) {
    *a2 = result;
  }
  return result;
}

id sub_1DC8A40B8()
{
  id result = sub_1DC8A3F4C();
  if (!v0)
  {
    uint64_t v2 = result;
    uint64_t v3 = (void *)sub_1DC8A477C();
    id v4 = sub_1DCB60550(v2, v3);

    return v4;
  }
  return result;
}

uint64_t sub_1DC8A411C()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1DC8A4154(void *a1, uint64_t a2, unint64_t a3)
{
  return sub_1DC8A3588(a1, a2, a3);
}

id sub_1DC8A416C()
{
  return sub_1DC8A40B8();
}

void sub_1DC8A4184(double a1)
{
}

id sub_1DC8A419C()
{
  return sub_1DC8A3F4C();
}

uint64_t type metadata accessor for SNDetectSignalThresholdRequest()
{
  return self;
}

uint64_t method lookup function for SNDetectSignalThresholdRequest(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SNDetectSignalThresholdRequest);
}

uint64_t type metadata accessor for SNDetectSignalThresholdRequestImpl()
{
  return self;
}

ValueMetadata *type metadata accessor for DetectSignalThresholdRequest()
{
  return &type metadata for DetectSignalThresholdRequest;
}

unint64_t sub_1DC8A4228()
{
  unint64_t result = qword_1EAA9E0A0;
  if (!qword_1EAA9E0A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E0A0);
  }
  return result;
}

unint64_t sub_1DC8A4274()
{
  unint64_t result = qword_1EAA9E0A8;
  if (!qword_1EAA9E0A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E0A8);
  }
  return result;
}

uint64_t sub_1DC8A42C0(void *a1, void *a2)
{
  return sub_1DC8A3888(a1, a2, *(void *)(v2 + 16), *(void (**)(CMTimeValue, uint64_t, CMTimeEpoch))(v2 + 24));
}

unint64_t sub_1DC8A42E4(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1DC8A4308()
{
  swift_release();

  return swift_deallocObject();
}

id sub_1DC8A4340@<X0>(void *a1@<X8>)
{
  return sub_1DC8A4080(*(void *)(v1 + 24), a1, *(double *)(v1 + 16));
}

unint64_t sub_1DC8A4360()
{
  unint64_t result = qword_1EAA9E0C8;
  if (!qword_1EAA9E0C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E0C8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DetectSignalThresholdRequest.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for DetectSignalThresholdRequest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DC8A4500);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DetectSignalThresholdRequest.CodingKeys()
{
  return &type metadata for DetectSignalThresholdRequest.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for SNDetectSignalThresholdRequestImpl.DomainError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DC8A4604);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SNDetectSignalThresholdRequestImpl.DomainError()
{
  return &type metadata for SNDetectSignalThresholdRequestImpl.DomainError;
}

unint64_t sub_1DC8A4640()
{
  unint64_t result = qword_1EAA9E0D8;
  if (!qword_1EAA9E0D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E0D8);
  }
  return result;
}

unint64_t sub_1DC8A4690()
{
  unint64_t result = qword_1EAA9E0E0;
  if (!qword_1EAA9E0E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E0E0);
  }
  return result;
}

unint64_t sub_1DC8A46E0()
{
  unint64_t result = qword_1EAA9E0E8;
  if (!qword_1EAA9E0E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E0E8);
  }
  return result;
}

unint64_t sub_1DC8A4730()
{
  unint64_t result = qword_1EAA9E0F0;
  if (!qword_1EAA9E0F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E0F0);
  }
  return result;
}

uint64_t sub_1DC8A477C()
{
  return sub_1DCB87908();
}

uint64_t sub_1DC8A47AC()
{
  return v0;
}

uint64_t sub_1DC8A47C0()
{
  return swift_deallocPartialClassInstance();
}

void sub_1DC8A47E0()
{
  if (*(unsigned char *)(v0 + 48))
  {
    sub_1DCB891B8();
    sub_1DCB891E8();
    sub_1DCB891D8();
    sub_1DCB891D8();
    sub_1DCB891E8();
    sub_1DCB891E8();
    sub_1DCB891D8();
    sub_1DCB891D8();
    sub_1DCB891E8();
    sub_1DC89DA54();
  }
  else
  {
    sub_1DCB891B8();
    sub_1DC89DA54();
    sub_1DC8A81E0();
  }
}

BOOL sub_1DC8A48B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v40 = *(void *)(a1 + 16);
  uint64_t v41 = *(void *)(a1 + 24);
  uint64_t v39 = *(void *)(a1 + 32);
  uint64_t v42 = *(void *)(a1 + 40);
  char v4 = *(unsigned char *)(a1 + 48);
  uint64_t v5 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  if (v4)
  {
    if (*(unsigned char *)(a2 + 48))
    {
      uint64_t v37 = HIDWORD(*(void *)(a2 + 8));
      uint64_t v10 = sub_1DC8A90D0();
      uint64_t v12 = v11;
      sub_1DC8823B0(v10, v13, v40, v41, v39, v42, 1);
      sub_1DC8823B0(v5, v12, v7, v6, v9, v8, 1);
      v50[0] = v2;
      v50[1] = v3;
      v50[2] = v40;
      v50[3] = v41;
      v50[4] = v39;
      v50[5] = v42;
      uint64_t v43 = v5;
      int v44 = v12;
      int v45 = v37;
      uint64_t v46 = v7;
      uint64_t v47 = v6;
      uint64_t v48 = v9;
      uint64_t v49 = v8;
      return static TimeRange.== infix(_:_:)((uint64_t)v50, (uint64_t)&v43);
    }
LABEL_6:
    sub_1DC8A9030();
    sub_1DC88245C(v16, v17, v18, v19, v20, v21, v22);
    uint64_t v23 = sub_1DC8A90D0();
    sub_1DC8823B0(v23, v24, v40, v41, v39, v42, v4);
    sub_1DC8A9030();
    sub_1DC8823B0(v25, v26, v27, v28, v29, v30, v31);
    return 0;
  }
  uint64_t v15 = *(void *)(a2 + 8);
  if (*(unsigned char *)(a2 + 48))
  {
    swift_bridgeObjectRetain();
    goto LABEL_6;
  }
  char v38 = sub_1DC8DD054(v2, *(void *)a2);
  sub_1DC88245C(v5, v15, v7, v6, v9, v8, 0);
  uint64_t v33 = sub_1DC8A90D0();
  sub_1DC88245C(v33, v34, v40, v41, v39, v42, 0);
  uint64_t v35 = sub_1DC8A90D0();
  sub_1DC8823B0(v35, v36, v40, v41, v39, v42, 0);
  sub_1DC8823B0(v5, v15, v7, v6, v9, v8, 0);
  return v38 & 1;
}

uint64_t sub_1DC8A4AE0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746172656D756E65 && a2 == 0xEA00000000006465;
  if (v2 || (sub_1DCB89018() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65676E6172 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_1DCB89018();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1DC8A4BD4(char a1)
{
  if (a1) {
    return 0x65676E6172;
  }
  else {
    return 0x746172656D756E65;
  }
}

uint64_t sub_1DC8A4C0C(uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_1DCB89018();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_1DC8A4C7C()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC8A4CB8()
{
  return 12383;
}

uint64_t sub_1DC8A4CC4(void *a1)
{
  sub_1DC87E988(&qword_1EAA9E168);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v3);
  sub_1DC8A22D0();
  sub_1DC87E988(&qword_1EAA9E170);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v4);
  sub_1DC8A22D0();
  sub_1DC87E988((uint64_t *)&unk_1EAA9E178);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v5);
  sub_1DC89D970();
  char v6 = *(unsigned char *)(v1 + 48);
  sub_1DC881A8C(a1, a1[3]);
  sub_1DC8A8640();
  sub_1DCB892B8();
  if (v6)
  {
    sub_1DC8A868C();
    sub_1DCB88E88();
    sub_1DC89C64C();
  }
  else
  {
    sub_1DC8A86D8();
    sub_1DCB88E88();
    sub_1DC87E988(&qword_1EAA9E150);
    sub_1DC8A8724(&qword_1EAA9E188, (void (*)(void))sub_1DC89C18C);
  }
  sub_1DCB88F18();
  sub_1DC88D5C8();
  v7();
  sub_1DC8A9048();
  sub_1DC88D5C8();
  return v8();
}

uint64_t sub_1DC8A4FC0()
{
  char v1 = *(unsigned char *)(v0 + 48);
  sub_1DCB891A8();
  if (v1)
  {
    sub_1DCB891B8();
    sub_1DCB891E8();
    sub_1DCB891D8();
    sub_1DCB891D8();
    sub_1DCB891E8();
    sub_1DCB891E8();
    sub_1DCB891D8();
    sub_1DCB891D8();
    sub_1DCB891E8();
  }
  else
  {
    sub_1DC8A9098();
    sub_1DC8A81E0();
  }
  return sub_1DCB891F8();
}

uint64_t sub_1DC8A50B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1DC87E988(&qword_1EAA9E110);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v4);
  sub_1DC8A22D0();
  sub_1DC87E988(&qword_1EAA9E118);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v5);
  sub_1DC8A22D0();
  uint64_t v6 = sub_1DC87E988(&qword_1EAA9E120);
  sub_1DC89D4E0();
  uint64_t v30 = v7;
  MEMORY[0x1F4188790](v8);
  sub_1DC89D970();
  sub_1DC881A8C(a1, a1[3]);
  sub_1DC8A8640();
  sub_1DCB89298();
  if (v34) {
    goto LABEL_7;
  }
  uint64_t v35 = a1;
  uint64_t v9 = sub_1DCB88E58();
  uint64_t v10 = *(void *)(v9 + 16);
  if (!v10
    || (char v11 = *(unsigned char *)(v9 + 32),
        sub_1DC9CFE4C(1, v10, v9, v9 + 32, 0, (2 * v10) | 1),
        uint64_t v13 = v12,
        unint64_t v15 = v14,
        swift_bridgeObjectRelease(),
        v13 != v15 >> 1))
  {
    uint64_t v17 = sub_1DCB88B18();
    swift_allocError();
    uint64_t v19 = v18;
    sub_1DC87E988(&qword_1EAA9E130);
    *uint64_t v19 = &type metadata for TimeDurationConstraint;
    sub_1DCB88D68();
    sub_1DCB88B08();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v19, *MEMORY[0x1E4FBBA70], v17);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v2, v6);
    a1 = v35;
LABEL_7:
    uint64_t v20 = (uint64_t)a1;
    return sub_1DC8818D0(v20);
  }
  char v16 = v11;
  if (v11)
  {
    LOBYTE(v31) = 1;
    sub_1DC8A868C();
    sub_1DCB88D58();
    sub_1DC89C600();
    sub_1DCB88DF8();
    sub_1DC88D5C8();
    v22();
    swift_unknownObjectRelease();
    sub_1DC8A8FF0();
    v23();
    long long v24 = v31;
    long long v25 = v32;
    long long v26 = v33;
  }
  else
  {
    LOBYTE(v31) = 0;
    sub_1DC8A86D8();
    sub_1DCB88D58();
    sub_1DC87E988(&qword_1EAA9E150);
    sub_1DC8A8724((unint64_t *)&unk_1EAA9E158, (void (*)(void))sub_1DC89C0C0);
    sub_1DCB88DF8();
    sub_1DC88D5C8();
    v27();
    swift_unknownObjectRelease();
    sub_1DC8A8FF0();
    v28();
    *(void *)&long long v24 = v31;
    long long v25 = 0uLL;
    long long v26 = 0uLL;
    char v16 = v11;
  }
  *(_OWORD *)a2 = v24;
  *(_OWORD *)(a2 + 16) = v25;
  *(_OWORD *)(a2 + 32) = v26;
  *(unsigned char *)(a2 + 48) = v16;
  uint64_t v20 = (uint64_t)a1;
  return sub_1DC8818D0(v20);
}

uint64_t sub_1DC8A5608()
{
  return sub_1DC8A4BD4(*v0);
}

uint64_t sub_1DC8A5610@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1DC8A4AE0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1DC8A5638(uint64_t a1)
{
  unint64_t v2 = sub_1DC8A8640();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC8A5674(uint64_t a1)
{
  unint64_t v2 = sub_1DC8A8640();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1DC8A56B4()
{
  return sub_1DC8A4C7C();
}

uint64_t sub_1DC8A56D4(uint64_t a1)
{
  unint64_t v2 = sub_1DC8A86D8();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC8A5710(uint64_t a1)
{
  unint64_t v2 = sub_1DC8A86D8();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1DC8A574C()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC8A5784@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1DC8A4C0C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1DC8A57B0()
{
  return sub_1DC888648();
}

uint64_t sub_1DC8A57CC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = _s13SoundAnalysis17_SNClassificationC20supportsSecureCodingSbvgZ_0();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1DC8A57F8(uint64_t a1)
{
  unint64_t v2 = sub_1DC8A868C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC8A5834(uint64_t a1)
{
  unint64_t v2 = sub_1DC8A868C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1DC8A5878()
{
  char v1 = *(unsigned char *)(v0 + 48);
  sub_1DCB891A8();
  sub_1DCB891B8();
  if (v1)
  {
    sub_1DCB891E8();
    sub_1DCB891D8();
    sub_1DCB891D8();
    sub_1DCB891E8();
    sub_1DCB891E8();
    sub_1DCB891D8();
    sub_1DCB891D8();
    sub_1DCB891E8();
  }
  else
  {
    sub_1DC8A81E0();
  }
  return sub_1DCB891F8();
}

uint64_t sub_1DC8A5970@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1DC8A50B4(a1, a2);
}

uint64_t sub_1DC8A5988(void *a1)
{
  return sub_1DC8A4CC4(a1);
}

id sub_1DC8A59A4(unint64_t a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  if (!a1) {
    a1 = MEMORY[0x1E4FBC860];
  }
  id v3 = objc_allocWithZone(ObjectType);
  id v4 = sub_1DC8A5A50(a1);
  swift_getObjectType();
  sub_1DC8A9058();
  return v4;
}

id sub_1DC8A5A50(unint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  if (a1 >> 62)
  {
    uint64_t v29 = v1;
    uint64_t v4 = sub_1DCB88CC8();
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = v1;
  }
  uint64_t v6 = MEMORY[0x1E4FBC860];
  if (v4)
  {
    uint64_t v33 = MEMORY[0x1E4FBC860];
    sub_1DC897B3C();
    if (v4 < 0)
    {
      __break(1u);
      id result = (id)swift_release();
      __break(1u);
      return result;
    }
    uint64_t v7 = 0;
    uint64_t v8 = v33;
    do
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v9 = (id)MEMORY[0x1E01A7AE0](v7, a1);
      }
      else {
        id v9 = *(id *)(a1 + 8 * v7 + 32);
      }
      uint64_t v10 = v9;
      objc_msgSend(v9, sel_CMTimeValue);
      uint64_t v11 = v32[0];
      uint64_t v12 = v32[1];
      uint64_t v13 = v32[2];

      uint64_t v33 = v8;
      unint64_t v14 = *(void *)(v8 + 16);
      if (v14 >= *(void *)(v8 + 24) >> 1)
      {
        sub_1DC897B3C();
        uint64_t v8 = v33;
      }
      *(void *)(v8 + 16) = v14 + 1;
      unint64_t v15 = (void *)(v8 + 24 * v14);
      v15[4] = v11;
      ++v7;
      v15[5] = v12;
      void v15[6] = v13;
    }
    while (v4 != v7);
    swift_bridgeObjectRelease();
    uint64_t v6 = MEMORY[0x1E4FBC860];
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = MEMORY[0x1E4FBC860];
  }
  v32[0] = v8;
  swift_bridgeObjectRetain();
  sub_1DC8A6D5C(v32);
  swift_bridgeObjectRelease();
  uint64_t v16 = v32[0];
  uint64_t v17 = *(void *)(v32[0] + 16);
  if (v17)
  {
    v32[0] = v6;
    sub_1DC897AEC();
    uint64_t v18 = 0;
    uint64_t v19 = v32[0];
    unint64_t v20 = *(void *)(v32[0] + 16);
    uint64_t v21 = 24 * v20;
    do
    {
      uint64_t v22 = *(void *)(v16 + v18 + 32);
      uint64_t v23 = *(void *)(v16 + v18 + 40);
      uint64_t v24 = *(void *)(v16 + v18 + 48);
      v32[0] = v19;
      unint64_t v25 = v20 + 1;
      if (v20 >= *(void *)(v19 + 24) >> 1)
      {
        sub_1DC897AEC();
        uint64_t v19 = v32[0];
      }
      *(void *)(v19 + 16) = v25;
      long long v26 = (void *)(v19 + v21 + v18);
      v26[4] = v22;
      v26[5] = v23;
      v26[6] = v24;
      v18 += 24;
      unint64_t v20 = v25;
      --v17;
    }
    while (v17);
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v19 = MEMORY[0x1E4FBC860];
  }
  uint64_t v27 = &v2[OBJC_IVAR____SNTimeDurationConstraint_impl];
  *(void *)uint64_t v27 = v19;
  *(_OWORD *)(v27 + 8) = 0u;
  *(_OWORD *)(v27 + 24) = 0u;
  *(_OWORD *)(v27 + 33) = 0u;

  v31.receiver = v2;
  v31.super_class = ObjectType;
  return objc_msgSendSuper2(&v31, sel_init);
}

id sub_1DC8A5D18(_OWORD *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = &v1[OBJC_IVAR____SNTimeDurationConstraint_impl];
  long long v5 = a1[1];
  *(_OWORD *)uint64_t v4 = *a1;
  *((_OWORD *)v4 + 1) = v5;
  *((_OWORD *)v4 + 2) = a1[2];
  v4[48] = 1;
  v7.receiver = v1;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, sel_init);
}

id sub_1DC8A5DD8(uint64_t a1)
{
  id v3 = (char *)objc_allocWithZone(v1);
  char v4 = *(unsigned char *)(a1 + 48);
  long long v5 = &v3[OBJC_IVAR____SNTimeDurationConstraint_impl];
  long long v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)long long v5 = *(_OWORD *)a1;
  *((_OWORD *)v5 + 1) = v6;
  *((_OWORD *)v5 + 2) = *(_OWORD *)(a1 + 32);
  v5[48] = v4;
  v8.receiver = v3;
  v8.super_class = v1;
  return objc_msgSendSuper2(&v8, sel_init);
}

id _SNTimeDurationConstraint.copy(with:)@<X0>(void *a1@<X8>)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____SNTimeDurationConstraint_impl + 8);
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____SNTimeDurationConstraint_impl + 16);
  uint64_t v6 = *(void *)(v1 + OBJC_IVAR____SNTimeDurationConstraint_impl + 24);
  uint64_t v7 = *(void *)(v1 + OBJC_IVAR____SNTimeDurationConstraint_impl + 32);
  uint64_t v8 = *(void *)(v1 + OBJC_IVAR____SNTimeDurationConstraint_impl + 40);
  char v9 = *(unsigned char *)(v1 + OBJC_IVAR____SNTimeDurationConstraint_impl + 48);
  v11[0] = *(void *)(v1 + OBJC_IVAR____SNTimeDurationConstraint_impl);
  v11[1] = v4;
  v11[2] = v5;
  v11[3] = v6;
  void v11[4] = v7;
  v11[5] = v8;
  char v12 = v9;
  sub_1DC88245C(v11[0], v4, v5, v6, v7, v8, v9);
  id result = sub_1DC8A5DD8((uint64_t)v11);
  a1[3] = ObjectType;
  *a1 = result;
  return result;
}

uint64_t _SNTimeDurationConstraint.hash.getter()
{
  char v1 = *(unsigned char *)(v0 + OBJC_IVAR____SNTimeDurationConstraint_impl + 48);
  sub_1DCB891A8();
  if (v1)
  {
    sub_1DCB891B8();
    sub_1DCB891E8();
    sub_1DCB891D8();
    sub_1DCB891D8();
    sub_1DCB891E8();
    sub_1DCB891E8();
    sub_1DCB891D8();
    sub_1DCB891D8();
    sub_1DCB891E8();
  }
  else
  {
    sub_1DC8A9098();
    sub_1DC8A81E0();
    uint64_t v2 = sub_1DC8A8FD4();
    sub_1DC88245C(v2, v3, v4, v5, v6, v7, 0);
  }
  uint64_t v8 = sub_1DCB891F8();
  uint64_t v9 = sub_1DC8A8FD4();
  sub_1DC8823B0(v9, v10, v11, v12, v13, v14, v1);
  return v8;
}

BOOL _SNTimeDurationConstraint.isEqual(_:)(uint64_t a1)
{
  swift_getObjectType();
  sub_1DC87E920(a1, (uint64_t)&v14);
  if (v15)
  {
    sub_1DC87E9CC(&v14, v13);
    sub_1DC87E9DC((uint64_t)v13, (uint64_t)v11);
    if (swift_dynamicCast() && (uint64_t v3 = *(char **)&v9[0]) != 0)
    {
      char v4 = *(unsigned char *)(v1 + OBJC_IVAR____SNTimeDurationConstraint_impl + 48);
      long long v5 = *(_OWORD *)(v1 + OBJC_IVAR____SNTimeDurationConstraint_impl + 16);
      v11[0] = *(_OWORD *)(v1 + OBJC_IVAR____SNTimeDurationConstraint_impl);
      v11[1] = v5;
      v11[2] = *(_OWORD *)(v1 + OBJC_IVAR____SNTimeDurationConstraint_impl + 32);
      char v12 = v4;
      char v6 = *(unsigned char *)(*(void *)&v9[0] + OBJC_IVAR____SNTimeDurationConstraint_impl + 48);
      v9[0] = *(_OWORD *)(*(void *)&v9[0] + OBJC_IVAR____SNTimeDurationConstraint_impl);
      v9[1] = *(_OWORD *)&v3[OBJC_IVAR____SNTimeDurationConstraint_impl + 16];
      v9[2] = *(_OWORD *)&v3[OBJC_IVAR____SNTimeDurationConstraint_impl + 32];
      char v10 = v6;
      BOOL v7 = sub_1DC8A48B4((uint64_t)v11, (uint64_t)v9);
    }
    else
    {
      BOOL v7 = 0;
    }
    sub_1DC8818D0((uint64_t)v13);
  }
  else
  {
    return 0;
  }
  return v7;
}

id _SNTimeDurationConstraint.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return _SNTimeDurationConstraint.init(coder:)(a1);
}

id _SNTimeDurationConstraint.init(coder:)(void *a1)
{
  id v3 = v1;
  sub_1DC87D0CC();
  swift_getObjectType();

  id v4 = sub_1DC8A5DD8((uint64_t)&v6);
  swift_deallocPartialClassInstance();
  return v4;
}

Swift::Void __swiftcall _SNTimeDurationConstraint.encode(with:)(NSCoder with)
{
  sub_1DC882DD0(v1 + OBJC_IVAR____SNTimeDurationConstraint_impl, (uint64_t)v3);
  sub_1DC8A8248((uint64_t)v3, (void (*)(void, void, void, void, void, void, void))sub_1DC88245C);
  sub_1DC87ADE4(v3, 1819307369, 0xE400000000000000, with.super.isa);
  sub_1DC8A8248((uint64_t)v3, (void (*)(void, void, void, void, void, void, void))sub_1DC8823B0);
}

uint64_t static _SNTimeDurationConstraint.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t sub_1DC8A64AC()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____SNTimeDurationConstraint_impl + 48)) {
    return 2;
  }
  else {
    return 1;
  }
}

void sub_1DC8A6528(uint64_t a1@<X8>)
{
  uint64_t v2 = v1 + OBJC_IVAR____SNTimeDurationConstraint_impl;
  if (*(unsigned char *)(v1 + OBJC_IVAR____SNTimeDurationConstraint_impl + 48))
  {
    int v3 = *(_DWORD *)(v2 + 32);
    int v4 = *(_DWORD *)(v2 + 36);
    int v5 = *(_DWORD *)(v2 + 8);
    int v6 = *(_DWORD *)(v2 + 12);
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F1FA20];
    int v5 = *(_DWORD *)(MEMORY[0x1E4F1FA20] + 8);
    int v6 = *(_DWORD *)(MEMORY[0x1E4F1FA20] + 12);
    int v3 = *(_DWORD *)(MEMORY[0x1E4F1FA20] + 32);
    int v4 = *(_DWORD *)(MEMORY[0x1E4F1FA20] + 36);
  }
  uint64_t v7 = *(void *)(v2 + 40);
  uint64_t v9 = *(void *)(v2 + 16);
  uint64_t v8 = *(void *)(v2 + 24);
  *(void *)a1 = *(void *)v2;
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = v6;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v8;
  *(_DWORD *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  *(void *)(a1 + 40) = v7;
}

uint64_t sub_1DC8A65E0()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____SNTimeDurationConstraint_impl);
  if (*(unsigned char *)(v0 + OBJC_IVAR____SNTimeDurationConstraint_impl + 48)) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v4)
  {
    uint64_t v14 = v1[2];
    uint64_t v15 = v1[1];
    uint64_t v5 = v1[4];
    uint64_t v13 = v1[3];
    uint64_t v6 = v1[5];
    uint64_t v17 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    sub_1DCB88B68();
    uint64_t v7 = self;
    uint64_t v8 = (uint64_t *)(v3 + 48);
    do
    {
      uint64_t v9 = *v8;
      uint64_t v10 = *(v8 - 1);
      v16[0] = *(v8 - 2);
      v16[1] = v10;
      void v16[2] = v9;
      id v11 = objc_msgSend(v7, sel_valueWithCMTime_, v16);
      sub_1DCB88B48();
      sub_1DCB88B78();
      sub_1DCB88B88();
      sub_1DCB88B58();
      v8 += 3;
      --v4;
    }
    while (v4);
    uint64_t v2 = v17;
    sub_1DC8823B0(v3, v15, v14, v13, v5, v6, 0);
  }
  return v2;
}

id _SNTimeDurationConstraint.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void _SNTimeDurationConstraint.init()()
{
}

id _SNTimeDurationConstraint.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1DC8A6800()
{
  id v1 = objc_msgSend(v0, sel_impl);
  sub_1DCB88808();
  swift_unknownObjectRelease();
  type metadata accessor for _SNTimeDurationConstraint();
  swift_dynamicCast();
  return v3;
}

uint64_t sub_1DC8A6878(uint64_t a1)
{
  uint64_t v2 = sub_1DCB89248();
  sub_1DC89D4E0();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  sub_1DC8A22D0();
  uint64_t v8 = v7 - v6;
  type metadata accessor for SNLogMelParameters(0);
  *((void *)&v37 + 1) = v9;
  uint64_t v10 = swift_allocObject();
  *(void *)&long long v36 = v10;
  long long v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v10 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v10 + 32) = v11;
  *(_OWORD *)(v10 + 48) = *(_OWORD *)(a1 + 32);
  *(_DWORD *)(v10 + 64) = *(_DWORD *)(a1 + 48);
  sub_1DCB89208();
  uint64_t v12 = sub_1DCB89238();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v8, v2);
  swift_retain();
  sub_1DCB88BD8();
  swift_release();
  sub_1DCB88D18();
  uint64_t v39 = v12;
  if (*((void *)&v38 + 1))
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
    while (1)
    {
      long long v34 = v36;
      v35[0] = v37;
      v35[1] = v38;
      long long v28 = v36;
      sub_1DC87E9DC((uint64_t)v35, (uint64_t)&v29);
      if (!swift_dynamicCast()) {
        break;
      }
      long long v31 = v25;
      long long v32 = v26;
      uint64_t v33 = v27;
      sub_1DC8A8F50((uint64_t)&v34, &qword_1EAA9E1E8);
      if (*((void *)&v32 + 1))
      {
        long long v28 = v31;
        long long v29 = v32;
        uint64_t v30 = v33;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1DCA72AEC();
          uint64_t v13 = v18;
        }
        unint64_t v14 = *(void *)(v13 + 16);
        if (v14 >= *(void *)(v13 + 24) >> 1)
        {
          sub_1DCA72AEC();
          uint64_t v13 = v19;
        }
        *(void *)(v13 + 16) = v14 + 1;
        uint64_t v15 = v13 + 40 * v14;
        long long v16 = v28;
        long long v17 = v29;
        *(void *)(v15 + 64) = v30;
        *(_OWORD *)(v15 + 32) = v16;
        *(_OWORD *)(v15 + 48) = v17;
      }
      else
      {
        sub_1DC8A8F50((uint64_t)&v31, &qword_1EAA9E1D8);
      }
      sub_1DCB88D18();
      if (!*((void *)&v38 + 1)) {
        goto LABEL_14;
      }
    }
    uint64_t v27 = 0;
    long long v26 = 0u;
    long long v25 = 0u;
    sub_1DC8A8F50((uint64_t)&v25, &qword_1EAA9E1D8);
    uint64_t v20 = *((void *)&v34 + 1);
    long long v28 = v34;
    sub_1DC87E9DC((uint64_t)v35, (uint64_t)&v29);
    if (v20)
    {
      swift_bridgeObjectRetain();
      sub_1DC8818D0((uint64_t)&v29);
      *(void *)&long long v28 = 0;
      *((void *)&v28 + 1) = 0xE000000000000000;
      sub_1DCB88A98();
      swift_bridgeObjectRelease();
      *(void *)&long long v28 = 0xD000000000000029;
      *((void *)&v28 + 1) = 0x80000001DCB90C50;
      sub_1DCB87A18();
      swift_bridgeObjectRelease();
      unint64_t v22 = *((void *)&v28 + 1);
      unint64_t v21 = v28;
    }
    else
    {
      sub_1DC8818D0((uint64_t)&v29);
      unint64_t v22 = 0x80000001DCB90C20;
      unint64_t v21 = 0xD000000000000026;
    }
    sub_1DC8A8F04();
    swift_allocError();
    unint64_t *v23 = v21;
    v23[1] = v22;
    swift_willThrow();
    sub_1DC8A8F50((uint64_t)&v34, &qword_1EAA9E1E8);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
LABEL_14:
    swift_release();
    swift_release();
  }
  return v13;
}

uint64_t sub_1DC8A6CB8(uint64_t a1)
{
  uint64_t result = sub_1DC8A6878(a1);
  if (!v1)
  {
    uint64_t v3 = *(void *)(result + 16);
    if (v3)
    {
      uint64_t v4 = result + 32;
      swift_bridgeObjectRetain();
      do
      {
        sub_1DC8A8E44(v4, (uint64_t)v5);
        sub_1DCB88A28();
        sub_1DC8A8EA0((uint64_t)v5);
        v4 += 40;
        --v3;
      }
      while (v3);
      return swift_bridgeObjectRelease_n();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1DC8A6D5C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1DC8AEB64();
    uint64_t v2 = v3;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  uint64_t result = sub_1DC8A6DC8(v6);
  *a1 = v2;
  return result;
}

uint64_t sub_1DC8A6DC8(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_1DCB88F88();
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3) {
        return sub_1DC8A7454(0, v3, 1, a1);
      }
      return result;
    }
    goto LABEL_126;
  }
  uint64_t v5 = result;
  uint64_t result = sub_1DCA078FC(v3 / 2);
  uint64_t v91 = result;
  uint64_t v92 = v3;
  unint64_t v94 = v6;
  unint64_t v89 = a1;
  if (v3 <= 0)
  {
    uint64_t v95 = MEMORY[0x1E4FBC860];
    unint64_t v26 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_92:
    if (v26 < 2)
    {
LABEL_103:
      uint64_t result = swift_bridgeObjectRelease();
      if (v3 >= -1)
      {
        *(void *)(v91 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      goto LABEL_131;
    }
    uint64_t v82 = *v89;
    while (1)
    {
      unint64_t v83 = v26 - 2;
      if (v26 < 2) {
        break;
      }
      if (!v82) {
        goto LABEL_135;
      }
      uint64_t v84 = v95;
      uint64_t v85 = *(void *)(v95 + 32 + 16 * v83);
      uint64_t v86 = *(void *)(v95 + 32 + 16 * (v26 - 1) + 8);
      uint64_t result = sub_1DC8A753C(v82 + 24 * v85, v82 + 24 * *(void *)(v95 + 32 + 16 * (v26 - 1)), v82 + 24 * v86, v94);
      if (v1) {
        goto LABEL_88;
      }
      if (v86 < v85) {
        goto LABEL_121;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1DC9756D8(v95);
        uint64_t v84 = result;
      }
      if (v83 >= *(void *)(v84 + 16)) {
        goto LABEL_122;
      }
      uint64_t v87 = (void *)(v84 + 32 + 16 * v83);
      *uint64_t v87 = v85;
      v87[1] = v86;
      unint64_t v88 = *(void *)(v84 + 16);
      if (v26 > v88) {
        goto LABEL_123;
      }
      uint64_t result = (uint64_t)memmove((void *)(v84 + 32 + 16 * (v26 - 1)), (const void *)(v84 + 32 + 16 * v26), 16 * (v88 - v26));
      uint64_t v95 = v84;
      *(void *)(v84 + 16) = v88 - 1;
      unint64_t v26 = v88 - 1;
      uint64_t v3 = v92;
      if (v88 <= 2) {
        goto LABEL_103;
      }
    }
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
    return result;
  }
  uint64_t v90 = v5;
  uint64_t v7 = 0;
  uint64_t v8 = *a1;
  uint64_t v95 = MEMORY[0x1E4FBC860];
  while (1)
  {
    uint64_t v9 = v7++;
    if (v7 < v3)
    {
      uint64_t result = sub_1DCB885C8();
      int v10 = result;
      uint64_t v7 = v9 + 2;
      if (v9 + 2 < v3)
      {
        uint64_t v11 = v8 + 64 + 24 * v9;
        while (1)
        {
          uint64_t result = sub_1DCB885C8();
          if ((v10 ^ result)) {
            break;
          }
          v11 += 24;
          if (++v7 >= v3)
          {
            uint64_t v7 = v3;
            break;
          }
        }
      }
      if (v10)
      {
        if (v7 < v9) {
          goto LABEL_128;
        }
        if (v9 < v7)
        {
          uint64_t v12 = 24 * v7;
          uint64_t v13 = 24 * v9;
          uint64_t v14 = v7;
          uint64_t v15 = v9;
          do
          {
            if (v15 != --v14)
            {
              if (!v8) {
                goto LABEL_134;
              }
              uint64_t v16 = v8 + v13;
              uint64_t v17 = v8 + v12;
              uint64_t v18 = *(void *)(v8 + v13);
              uint64_t v19 = *(void *)(v8 + v13 + 16);
              uint64_t v20 = *(void *)(v8 + v13 + 8);
              uint64_t v21 = *(void *)(v8 + v12 - 8);
              *(_OWORD *)uint64_t v16 = *(_OWORD *)(v8 + v12 - 24);
              *(void *)(v16 + 16) = v21;
              *(void *)(v17 - 24) = v18;
              *(void *)(v17 - 16) = v20;
              *(void *)(v17 - 8) = v19;
            }
            ++v15;
            v12 -= 24;
            v13 += 24;
          }
          while (v15 < v14);
        }
      }
    }
    if (v7 >= v3) {
      goto LABEL_27;
    }
    if (__OFSUB__(v7, v9)) {
      goto LABEL_125;
    }
    if (v7 - v9 >= v90) {
      goto LABEL_27;
    }
    if (__OFADD__(v9, v90)) {
      goto LABEL_129;
    }
    if (v9 + v90 >= v3) {
      uint64_t v22 = v3;
    }
    else {
      uint64_t v22 = v9 + v90;
    }
    if (v22 < v9) {
      goto LABEL_130;
    }
    if (v7 == v22)
    {
LABEL_27:
      uint64_t v23 = v95;
    }
    else
    {
      uint64_t v74 = v8 + 16 + 24 * v7;
      uint64_t v23 = v95;
      uint64_t v93 = v22;
      do
      {
        uint64_t v75 = v9;
        uint64_t v76 = v9;
        uint64_t v77 = v74;
        do
        {
          uint64_t v78 = v77 - 40;
          uint64_t result = sub_1DCB885C8();
          if ((result & 1) == 0) {
            break;
          }
          if (!v8) {
            goto LABEL_132;
          }
          uint64_t v79 = *(void *)(v77 - 24);
          *(void *)(v77 - 24) = *(void *)v77;
          v77 -= 24;
          uint64_t result = *(void *)(v77 + 8);
          int v80 = *(_DWORD *)(v77 + 16);
          int v81 = *(_DWORD *)(v77 + 20);
          *(_OWORD *)(v78 + 24) = *(_OWORD *)v78;
          *(void *)(v78 + 40) = v79;
          *(void *)(v77 - 16) = result;
          *(_DWORD *)(v77 - 8) = v80;
          *(_DWORD *)(v77 - 4) = v81;
          ++v76;
        }
        while (v7 != v76);
        ++v7;
        v74 += 24;
        uint64_t v9 = v75;
      }
      while (v7 != v93);
      uint64_t v7 = v93;
    }
    if (v7 < v9) {
      goto LABEL_124;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1DC9755E0(0, *(void *)(v23 + 16) + 1, 1, (char *)v23);
      uint64_t v23 = result;
    }
    unint64_t v25 = *(void *)(v23 + 16);
    unint64_t v24 = *(void *)(v23 + 24);
    unint64_t v26 = v25 + 1;
    if (v25 >= v24 >> 1)
    {
      uint64_t result = (uint64_t)sub_1DC9755E0((char *)(v24 > 1), v25 + 1, 1, (char *)v23);
      uint64_t v23 = result;
    }
    *(void *)(v23 + 16) = v26;
    uint64_t v27 = v23 + 32;
    long long v28 = (uint64_t *)(v23 + 32 + 16 * v25);
    *long long v28 = v9;
    v28[1] = v7;
    uint64_t v95 = v23;
    if (v25) {
      break;
    }
    unint64_t v26 = 1;
LABEL_76:
    uint64_t v3 = v92;
    if (v7 >= v92) {
      goto LABEL_92;
    }
  }
  while (1)
  {
    unint64_t v29 = v26 - 1;
    if (v26 >= 4)
    {
      unint64_t v34 = v27 + 16 * v26;
      uint64_t v35 = *(void *)(v34 - 64);
      uint64_t v36 = *(void *)(v34 - 56);
      BOOL v40 = __OFSUB__(v36, v35);
      uint64_t v37 = v36 - v35;
      if (v40) {
        goto LABEL_109;
      }
      uint64_t v39 = *(void *)(v34 - 48);
      uint64_t v38 = *(void *)(v34 - 40);
      BOOL v40 = __OFSUB__(v38, v39);
      uint64_t v32 = v38 - v39;
      char v33 = v40;
      if (v40) {
        goto LABEL_110;
      }
      unint64_t v41 = v26 - 2;
      uint64_t v42 = (uint64_t *)(v27 + 16 * (v26 - 2));
      uint64_t v44 = *v42;
      uint64_t v43 = v42[1];
      BOOL v40 = __OFSUB__(v43, v44);
      uint64_t v45 = v43 - v44;
      if (v40) {
        goto LABEL_111;
      }
      BOOL v40 = __OFADD__(v32, v45);
      uint64_t v46 = v32 + v45;
      if (v40) {
        goto LABEL_113;
      }
      if (v46 >= v37)
      {
        uint64_t v64 = (uint64_t *)(v27 + 16 * v29);
        uint64_t v66 = *v64;
        uint64_t v65 = v64[1];
        BOOL v40 = __OFSUB__(v65, v66);
        uint64_t v67 = v65 - v66;
        if (v40) {
          goto LABEL_119;
        }
        BOOL v57 = v32 < v67;
        goto LABEL_65;
      }
    }
    else
    {
      if (v26 != 3)
      {
        uint64_t v58 = *(void *)(v23 + 32);
        uint64_t v59 = *(void *)(v23 + 40);
        BOOL v40 = __OFSUB__(v59, v58);
        uint64_t v51 = v59 - v58;
        char v52 = v40;
        goto LABEL_59;
      }
      uint64_t v31 = *(void *)(v23 + 32);
      uint64_t v30 = *(void *)(v23 + 40);
      BOOL v40 = __OFSUB__(v30, v31);
      uint64_t v32 = v30 - v31;
      char v33 = v40;
    }
    if (v33) {
      goto LABEL_112;
    }
    unint64_t v41 = v26 - 2;
    uint64_t v47 = (uint64_t *)(v27 + 16 * (v26 - 2));
    uint64_t v49 = *v47;
    uint64_t v48 = v47[1];
    BOOL v50 = __OFSUB__(v48, v49);
    uint64_t v51 = v48 - v49;
    char v52 = v50;
    if (v50) {
      goto LABEL_114;
    }
    uint64_t v53 = (uint64_t *)(v27 + 16 * v29);
    uint64_t v55 = *v53;
    uint64_t v54 = v53[1];
    BOOL v40 = __OFSUB__(v54, v55);
    uint64_t v56 = v54 - v55;
    if (v40) {
      goto LABEL_116;
    }
    if (__OFADD__(v51, v56)) {
      goto LABEL_118;
    }
    if (v51 + v56 >= v32)
    {
      BOOL v57 = v32 < v56;
LABEL_65:
      if (v57) {
        unint64_t v29 = v41;
      }
      goto LABEL_67;
    }
LABEL_59:
    if (v52) {
      goto LABEL_115;
    }
    uint64_t v60 = (uint64_t *)(v27 + 16 * v29);
    uint64_t v62 = *v60;
    uint64_t v61 = v60[1];
    BOOL v40 = __OFSUB__(v61, v62);
    uint64_t v63 = v61 - v62;
    if (v40) {
      goto LABEL_117;
    }
    if (v63 < v51) {
      goto LABEL_76;
    }
LABEL_67:
    unint64_t v68 = v29 - 1;
    if (v29 - 1 >= v26)
    {
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
      goto LABEL_120;
    }
    if (!v8) {
      goto LABEL_133;
    }
    uint64_t v69 = (uint64_t *)(v27 + 16 * v68);
    uint64_t v70 = *v69;
    uint64_t v71 = (void *)(v27 + 16 * v29);
    uint64_t v72 = v71[1];
    uint64_t result = sub_1DC8A753C(v8 + 24 * *v69, v8 + 24 * *v71, v8 + 24 * v72, v94);
    if (v1) {
      break;
    }
    if (v72 < v70) {
      goto LABEL_106;
    }
    if (v29 > *(void *)(v95 + 16)) {
      goto LABEL_107;
    }
    *uint64_t v69 = v70;
    *(void *)(v27 + 16 * v68 + 8) = v72;
    unint64_t v73 = *(void *)(v95 + 16);
    if (v29 >= v73) {
      goto LABEL_108;
    }
    uint64_t v23 = v95;
    unint64_t v26 = v73 - 1;
    uint64_t result = (uint64_t)memmove((void *)(v27 + 16 * v29), v71 + 2, 16 * (v73 - 1 - v29));
    *(void *)(v95 + 16) = v73 - 1;
    if (v73 <= 2) {
      goto LABEL_76;
    }
  }
LABEL_88:
  uint64_t result = swift_bridgeObjectRelease();
  if (v92 < -1) {
    goto LABEL_127;
  }
  *(void *)(v91 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1DC8A7454(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 24 * a3 + 16;
    while (2)
    {
      uint64_t v9 = v6;
      uint64_t v10 = v8;
      do
      {
        uint64_t v11 = v10 - 40;
        uint64_t result = sub_1DCB885C8();
        if ((result & 1) == 0) {
          break;
        }
        if (!v7)
        {
          __break(1u);
          return result;
        }
        uint64_t v12 = *(void *)(v10 - 24);
        *(void *)(v10 - 24) = *(void *)v10;
        v10 -= 24;
        uint64_t result = *(void *)(v10 + 8);
        int v13 = *(_DWORD *)(v10 + 16);
        int v14 = *(_DWORD *)(v10 + 20);
        *(_OWORD *)(v11 + 24) = *(_OWORD *)v11;
        *(void *)(v11 + 40) = v12;
        *(void *)(v10 - 16) = result;
        *(_DWORD *)(v10 - 8) = v13;
        *(_DWORD *)(v10 - 4) = v14;
        ++v9;
      }
      while (v4 != v9);
      ++v4;
      v8 += 24;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_1DC8A753C(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 24;
  uint64_t v10 = a3 - a2;
  uint64_t v11 = (uint64_t)(a3 - a2) / 24;
  if (v9 >= v11)
  {
    sub_1DC8970CC(a2, (uint64_t)(a3 - a2) / 24);
    unint64_t v12 = a4 + 24 * v11;
    if (v7 >= v6 || v10 < 24) {
      goto LABEL_39;
    }
    unint64_t v19 = a3 - 24;
    while (1)
    {
      unint64_t v20 = v19 + 24;
      unint64_t v21 = v6 - 24;
      if (sub_1DCB885C8())
      {
        BOOL v22 = v20 != v6 || v19 >= v6;
        v6 -= 24;
        if (!v22) {
          goto LABEL_35;
        }
      }
      else
      {
        BOOL v23 = v20 != v12 || v19 >= v12;
        unint64_t v21 = v12 - 24;
        v12 -= 24;
        if (!v23) {
          goto LABEL_35;
        }
      }
      long long v24 = *(_OWORD *)v21;
      *(void *)(v19 + 16) = *(void *)(v21 + 16);
      *(_OWORD *)unint64_t v19 = v24;
LABEL_35:
      v19 -= 24;
      if (v6 <= v7 || v12 <= a4) {
        goto LABEL_39;
      }
    }
  }
  sub_1DC8970CC(a1, (a2 - a1) / 24);
  unint64_t v12 = a4 + 24 * v9;
  if (v6 < a3 && v8 >= 24)
  {
    while ((sub_1DCB885C8() & 1) == 0)
    {
      unint64_t v14 = a4;
      BOOL v15 = v7 == a4;
      a4 += 24;
      if (!v15) {
        goto LABEL_11;
      }
LABEL_12:
      v7 += 24;
      if (a4 >= v12 || v6 >= a3) {
        goto LABEL_39;
      }
    }
    unint64_t v14 = v6;
    BOOL v15 = v7 == v6;
    v6 += 24;
    if (v15) {
      goto LABEL_12;
    }
LABEL_11:
    long long v16 = *(_OWORD *)v14;
    *(void *)(v7 + 16) = *(void *)(v14 + 16);
    *(_OWORD *)unint64_t v7 = v16;
    goto LABEL_12;
  }
LABEL_39:
  sub_1DC8970CC(a4, (uint64_t)(v12 - a4) / 24);
  return 1;
}

void sub_1DC8A76EC(uint64_t a1, uint64_t a2)
{
  sub_1DC8A90B0();
  uint64_t v43 = v3;
  if (v3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a2 + 32;
    uint64_t v40 = a2 + 32;
    while (2)
    {
      uint64_t v7 = v6 + 56 * v5;
      uint64_t v9 = *(void *)v7;
      uint64_t v8 = *(void *)(v7 + 8);
      uint64_t v10 = *(void *)(v7 + 24);
      unint64_t v11 = *(void *)(v7 + 32);
      switch(v10 >> 28)
      {
        case 1u:
          uint64_t v16 = *(void *)(v7 + 16);
          sub_1DCB891B8();
          swift_bridgeObjectRetain();
          sub_1DC9210E8(v2, v9);
          uint64_t v17 = v9;
          uint64_t v18 = v8;
          uint64_t v19 = v16;
          unsigned int v20 = v10;
          uint64_t v6 = v40;
          goto LABEL_9;
        case 2u:
          sub_1DC8A9078();
          uint64_t v21 = sub_1DC8A9018();
          sub_1DC8A8D94(v21, v22, v23, v24);
          swift_bridgeObjectRetain();
          sub_1DCB879B8();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          sub_1DC9210E8(v2, v11);
          swift_bridgeObjectRelease();
          sub_1DCB891C8();
          goto LABEL_8;
        case 3u:
        case 4u:
          sub_1DC8A9078();
          swift_bridgeObjectRetain();
          sub_1DCB879B8();
LABEL_8:
          uint64_t v17 = sub_1DC8A9018();
          uint64_t v6 = v40;
          goto LABEL_9;
        case 5u:
          sub_1DCB891B8();
          sub_1DCB891B8();
          goto LABEL_26;
        case 6u:
          uint64_t v37 = *(void *)(v7 + 16);
          uint64_t v42 = *(void *)(v7 + 24);
          sub_1DCB891B8();
          uint64_t v25 = *(void *)(v9 + 16);
          sub_1DCB891B8();
          if (!v25) {
            goto LABEL_27;
          }
          swift_bridgeObjectRetain();
          uint64_t v26 = v9 + 40;
          do
          {
            swift_bridgeObjectRetain();
            sub_1DCB879B8();
            swift_bridgeObjectRelease();
            v26 += 16;
            --v25;
          }
          while (v25);
          uint64_t v17 = v9;
          uint64_t v18 = v8;
          uint64_t v19 = v37;
          unsigned int v20 = v42;
          goto LABEL_9;
        case 7u:
          sub_1DCB891B8();
          uint64_t v27 = *(void *)(v9 + 16);
          sub_1DCB891B8();
          if (v27)
          {
            swift_bridgeObjectRetain();
            uint64_t v28 = v9 + 56;
            do
            {
              swift_bridgeObjectRetain();
              sub_1DCB879B8();
              sub_1DCB891E8();
              sub_1DCB891B8();
              swift_bridgeObjectRelease();
              v28 += 32;
              --v27;
            }
            while (v27);
          }
          else
          {
            swift_bridgeObjectRetain();
          }
          sub_1DCB891B8();
          uint64_t v31 = sub_1DC8A9000();
          sub_1DC8A8CE4(v31, v32, v33, v34);
          uint64_t v6 = v40;
          goto LABEL_27;
        case 8u:
LABEL_26:
          sub_1DCB891B8();
          goto LABEL_27;
        default:
          uint64_t v41 = *(void *)(v7 + 24);
          uint64_t v12 = *(void *)(v7 + 32);
          int v39 = *(_DWORD *)(v7 + 48);
          uint64_t v35 = HIDWORD(*(void *)(v7 + 16));
          unint64_t v36 = HIDWORD(v11);
          uint64_t v38 = HIDWORD(*(void *)(v7 + 40));
          uint64_t v13 = *(void *)(v7 + 40);
          uint64_t v14 = *(void *)(v7 + 16);
          sub_1DCB891B8();
          v45[0] = v9;
          v45[1] = v8;
          int v46 = v14;
          int v47 = v35;
          char v48 = v41 & 1;
          int v49 = HIDWORD(v41);
          int v50 = v12;
          int v51 = v36;
          int v52 = v13;
          int v53 = v38;
          int v54 = v39;
          uint64_t v15 = sub_1DC8A6878((uint64_t)v45);
          uint64_t v29 = *(void *)(v15 + 16);
          uint64_t v6 = v40;
          if (v29)
          {
            uint64_t v30 = v15 + 32;
            swift_bridgeObjectRetain();
            do
            {
              sub_1DC8A8E44(v30, (uint64_t)v44);
              sub_1DCB88A28();
              sub_1DC8A8EA0((uint64_t)v44);
              v30 += 40;
              --v29;
            }
            while (v29);
            swift_bridgeObjectRelease_n();
            uint64_t v17 = sub_1DC8A9000();
LABEL_9:
            sub_1DC8A8CE4(v17, v18, v19, v20);
          }
          else
          {
            swift_bridgeObjectRelease();
          }
LABEL_27:
          if (++v5 == v43) {
            return;
          }
          continue;
      }
    }
  }
}

uint64_t sub_1DC8A7C04()
{
  uint64_t result = sub_1DC8A8FB4();
  if (v0)
  {
    uint64_t v3 = v1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_1DCB879B8();
      uint64_t result = swift_bridgeObjectRelease();
      v3 += 16;
      --v0;
    }
    while (v0);
  }
  return result;
}

uint64_t sub_1DC8A7C6C()
{
  uint64_t result = sub_1DC8A8FB4();
  if (v0)
  {
    uint64_t v3 = v1 + 56;
    do
    {
      swift_bridgeObjectRetain();
      sub_1DCB879B8();
      sub_1DCB891E8();
      sub_1DCB891B8();
      uint64_t result = swift_bridgeObjectRelease();
      v3 += 32;
      --v0;
    }
    while (v0);
  }
  return result;
}

uint64_t sub_1DC8A7CF4()
{
  uint64_t result = sub_1DC8A8FB4();
  if (v0)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      v3 += 8;
      uint64_t result = sub_1DCB891E8();
      --v0;
    }
    while (v0);
  }
  return result;
}

uint64_t sub_1DC8A7D3C()
{
  uint64_t result = sub_1DC8A8FB4();
  if (v0)
  {
    uint64_t v3 = 0;
    uint64_t v4 = v1 + 32;
    do
    {
      uint64_t v5 = *(void *)(v4 + 8 * v3);
      uint64_t result = sub_1DCB891B8();
      uint64_t v6 = *(void *)(v5 + 16);
      if (v6)
      {
        uint64_t v7 = v5 + 32;
        do
        {
          v7 += 8;
          uint64_t result = sub_1DCB891B8();
          --v6;
        }
        while (v6);
      }
      ++v3;
    }
    while (v3 != v0);
  }
  return result;
}

uint64_t sub_1DC8A7DAC()
{
  uint64_t result = sub_1DC8A8FB4();
  if (v0)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      v3 += 8;
      uint64_t result = sub_1DCB891B8();
      --v0;
    }
    while (v0);
  }
  return result;
}

uint64_t sub_1DC8A7DEC()
{
  uint64_t result = sub_1DC8A8FB4();
  if (v0)
  {
    uint64_t v3 = v1 + 40;
    do
    {
      sub_1DCB891B8();
      uint64_t result = sub_1DCB891B8();
      v3 += 16;
      --v0;
    }
    while (v0);
  }
  return result;
}

void sub_1DC8A7E38(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_1DCB86A18();
  sub_1DC89D4E0();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  sub_1DC89D988();
  uint64_t v9 = sub_1DC87E988(qword_1EAA9CBC0);
  MEMORY[0x1F4188790](v9 - 8);
  sub_1DC89D970();
  uint64_t v10 = *(void *)(a2 + 16);
  sub_1DCB891B8();
  if (v10)
  {
    uint64_t v11 = v7 + 16;
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    uint64_t v12 = a2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v13 = (void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
    uint64_t v14 = (void (**)(uint64_t, uint64_t))(v7 + 8);
    uint64_t v15 = *(void *)(v11 + 56);
    while (1)
    {
      v16(v3, v12, v5);
      _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwst_0(v3, 0, 1, v5);
      if (_s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwet_0(v3, 1, v5) == 1) {
        break;
      }
      (*v13)(v2, v3, v5);
      sub_1DC8A85F0();
      sub_1DCB87818();
      (*v14)(v2, v5);
      v12 += v15;
      if (!--v10) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwst_0(v3, 1, 1, v5);
  }
  sub_1DC89DA54();
}

uint64_t sub_1DC8A7FE8()
{
  uint64_t result = sub_1DC8A8FB4();
  if (v0)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      ++v3;
      uint64_t result = sub_1DCB891B8();
      --v0;
    }
    while (v0);
  }
  return result;
}

void sub_1DC8A8028(uint64_t a1, uint64_t a2)
{
  sub_1DC8A90B0();
  if (v2)
  {
    uint64_t v4 = (void **)(a2 + 32);
    do
    {
      uint64_t v5 = *v4++;
      id v6 = v5;
      sub_1DCB886B8();

      --v2;
    }
    while (v2);
  }
}

void sub_1DC8A807C(uint64_t a1, uint64_t a2)
{
  type metadata accessor for KShotSegment(0);
  sub_1DC89D4E0();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  sub_1DC89D988();
  uint64_t v7 = *(void *)(a2 + 16);
  sub_1DCB891B8();
  if (v7)
  {
    uint64_t v8 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v9 = *(void *)(v5 + 72);
    do
    {
      sub_1DC890A18(v8, v2);
      sub_1DCB891E8();
      sub_1DCB891D8();
      sub_1DCB891D8();
      sub_1DCB891E8();
      sub_1DCB891E8();
      sub_1DCB891D8();
      sub_1DCB891D8();
      sub_1DCB891E8();
      sub_1DCB86A18();
      sub_1DC8A85F0();
      sub_1DCB87818();
      sub_1DC899BE8(v2);
      v8 += v9;
      --v7;
    }
    while (v7);
  }
  sub_1DC89DA54();
}

uint64_t sub_1DC8A81E0()
{
  uint64_t result = sub_1DC8A8FB4();
  if (v0)
  {
    uint64_t v3 = v1 + 48;
    do
    {
      v3 += 24;
      sub_1DCB891E8();
      sub_1DCB891D8();
      sub_1DCB891D8();
      uint64_t result = sub_1DCB891E8();
      --v0;
    }
    while (v0);
  }
  return result;
}

uint64_t sub_1DC8A8248(uint64_t a1, void (*a2)(void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t type metadata accessor for _SNTimeDurationConstraint()
{
  return self;
}

uint64_t method lookup function for _SNTimeDurationConstraint(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for _SNTimeDurationConstraint);
}

uint64_t destroy for TimeDurationConstraint(uint64_t a1)
{
  return sub_1DC8823B0(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 48));
}

uint64_t initializeWithCopy for TimeDurationConstraint(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 48);
  sub_1DC88245C(*(void *)a2, v4, v5, v6, v7, v8, v9);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for TimeDurationConstraint(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 48);
  sub_1DC88245C(*(void *)a2, v4, v5, v6, v7, v8, v9);
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  char v16 = *(unsigned char *)(a1 + 48);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = v9;
  sub_1DC8823B0(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

__n128 initializeWithTake for TimeDurationConstraint(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for TimeDurationConstraint(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  char v10 = *(unsigned char *)(a1 + 48);
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = v3;
  sub_1DC8823B0(v4, v6, v5, v7, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeDurationConstraint(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 49))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TimeDurationConstraint(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1DC8A84F4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

uint64_t sub_1DC8A84FC(uint64_t result, char a2)
{
  *(unsigned char *)(result + 48) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for TimeDurationConstraint()
{
  return &type metadata for TimeDurationConstraint;
}

unint64_t sub_1DC8A851C()
{
  unint64_t result = qword_1EAA9E108;
  if (!qword_1EAA9E108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E108);
  }
  return result;
}

uint64_t sub_1DC8A8568()
{
  uint64_t result = sub_1DC8A8FB4();
  if (v0)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      v3 += 4;
      uint64_t result = sub_1DCB891D8();
      --v0;
    }
    while (v0);
  }
  return result;
}

uint64_t sub_1DC8A85A8()
{
  uint64_t result = sub_1DC8A8FB4();
  if (v0)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      v3 += 4;
      uint64_t result = sub_1DCB891D8();
      --v0;
    }
    while (v0);
  }
  return result;
}

unint64_t sub_1DC8A85F0()
{
  unint64_t result = qword_1EAAABA60;
  if (!qword_1EAAABA60)
  {
    sub_1DCB86A18();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAAABA60);
  }
  return result;
}

unint64_t sub_1DC8A8640()
{
  unint64_t result = qword_1EAA9E128;
  if (!qword_1EAA9E128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E128);
  }
  return result;
}

unint64_t sub_1DC8A868C()
{
  unint64_t result = qword_1EAA9E138;
  if (!qword_1EAA9E138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E138);
  }
  return result;
}

unint64_t sub_1DC8A86D8()
{
  unint64_t result = qword_1EAA9E148;
  if (!qword_1EAA9E148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E148);
  }
  return result;
}

uint64_t sub_1DC8A8724(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1DC8863A8(&qword_1EAA9E150);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1DC8A8794()
{
  unint64_t result = qword_1EAA9CB90;
  if (!qword_1EAA9CB90)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EAA9CB90);
  }
  return result;
}

uint64_t sub_1DC8A87D4()
{
  uint64_t result = sub_1DC8A8FB4();
  if (v0)
  {
    uint64_t v3 = v1 + 36;
    do
    {
      sub_1DCB891D8();
      uint64_t result = sub_1DCB891D8();
      v3 += 8;
      --v0;
    }
    while (v0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for TimeDurationConstraint.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DC8A88F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TimeDurationConstraint.CodingKeys()
{
  return &type metadata for TimeDurationConstraint.CodingKeys;
}

ValueMetadata *type metadata accessor for TimeDurationConstraint.EnumeratedCodingKeys()
{
  return &type metadata for TimeDurationConstraint.EnumeratedCodingKeys;
}

unsigned char *_s13SoundAnalysis22TimeDurationConstraintO20EnumeratedCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1DC8A89DCLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for TimeDurationConstraint.RangeCodingKeys()
{
  return &type metadata for TimeDurationConstraint.RangeCodingKeys;
}

unint64_t sub_1DC8A8A18()
{
  unint64_t result = qword_1EAA9E190;
  if (!qword_1EAA9E190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E190);
  }
  return result;
}

unint64_t sub_1DC8A8A68()
{
  unint64_t result = qword_1EAA9E198;
  if (!qword_1EAA9E198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E198);
  }
  return result;
}

unint64_t sub_1DC8A8AB8()
{
  unint64_t result = qword_1EAA9E1A0;
  if (!qword_1EAA9E1A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E1A0);
  }
  return result;
}

unint64_t sub_1DC8A8B08()
{
  unint64_t result = qword_1EAA9E1A8;
  if (!qword_1EAA9E1A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E1A8);
  }
  return result;
}

unint64_t sub_1DC8A8B58()
{
  unint64_t result = qword_1EAA9E1B0;
  if (!qword_1EAA9E1B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E1B0);
  }
  return result;
}

unint64_t sub_1DC8A8BA8()
{
  unint64_t result = qword_1EAA9E1B8;
  if (!qword_1EAA9E1B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E1B8);
  }
  return result;
}

unint64_t sub_1DC8A8BF8()
{
  unint64_t result = qword_1EAA9E1C0;
  if (!qword_1EAA9E1C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E1C0);
  }
  return result;
}

unint64_t sub_1DC8A8C48()
{
  unint64_t result = qword_1EAA9E1C8;
  if (!qword_1EAA9E1C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E1C8);
  }
  return result;
}

unint64_t sub_1DC8A8C98()
{
  unint64_t result = qword_1EAA9E1D0;
  if (!qword_1EAA9E1D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E1D0);
  }
  return result;
}

uint64_t sub_1DC8A8CE4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  switch(a4 >> 28)
  {
    case 1u:
    case 6u:
    case 7u:
      goto LABEL_4;
    case 2u:
      swift_bridgeObjectRelease();
      goto LABEL_4;
    case 3u:
    case 4u:
LABEL_4:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1DC8A8D94(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  switch(a4 >> 28)
  {
    case 1u:
    case 6u:
    case 7u:
      goto LABEL_4;
    case 2u:
      swift_bridgeObjectRetain();
      goto LABEL_4;
    case 3u:
    case 4u:
LABEL_4:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1DC8A8E44(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1DC8A8EA0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1DC8A8EF4()
{
  return swift_deallocObject();
}

unint64_t sub_1DC8A8F04()
{
  unint64_t result = qword_1EAA9E1E0;
  if (!qword_1EAA9E1E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E1E0);
  }
  return result;
}

uint64_t sub_1DC8A8F50(uint64_t a1, uint64_t *a2)
{
  sub_1DC87E988(a2);
  sub_1DC88D5C8();
  v3();
  return a1;
}

uint64_t sub_1DC8A8FB4()
{
  return sub_1DCB891B8();
}

uint64_t sub_1DC8A8FD4()
{
  return v0;
}

uint64_t sub_1DC8A9000()
{
  return v0;
}

uint64_t sub_1DC8A9018()
{
  return v0;
}

uint64_t sub_1DC8A9048()
{
  return v0;
}

uint64_t sub_1DC8A9058()
{
  return swift_deallocPartialClassInstance();
}

uint64_t sub_1DC8A9078()
{
  return sub_1DCB891B8();
}

uint64_t sub_1DC8A9098()
{
  return sub_1DCB891B8();
}

uint64_t sub_1DC8A90B0()
{
  return sub_1DCB891B8();
}

uint64_t sub_1DC8A90D0()
{
  return v0;
}

double SNNullResult.timeRange.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = v1 + OBJC_IVAR___SNNullResult_impl;
  *(void *)uint64_t v3 = *(void *)a1;
  *(void *)(v3 + 8) = *(void *)(a1 + 8);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(a1 + 16);
  double result = *(double *)(a1 + 32);
  *(double *)(v3 + 32) = result;
  *(void *)(v3 + 40) = v2;
  return result;
}

uint64_t sub_1DC8A9114()
{
  return sub_1DCB891E8();
}

BOOL sub_1DC8A919C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[5];
  uint64_t v4 = *a2;
  uint64_t v9 = a2[5];
  v10[0] = v2;
  v10[1] = a1[1];
  long long v11 = *((_OWORD *)a1 + 1);
  uint64_t v12 = a1[4];
  uint64_t v13 = v3;
  v6[0] = v4;
  v6[1] = a2[1];
  long long v7 = *((_OWORD *)a2 + 1);
  uint64_t v8 = a2[4];
  return static TimeRange.== infix(_:_:)((uint64_t)v10, (uint64_t)v6);
}

uint64_t sub_1DC8A9214(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x676E6152656D6974 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_1DCB89018();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_1DC8A92A8()
{
  return 0x676E6152656D6974;
}

uint64_t sub_1DC8A92C4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1DC87E988((uint64_t *)&unk_1EAA9E218);
  sub_1DC89D4E0();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  uint64_t v11 = v2[2];
  uint64_t v12 = v2[5];
  uint64_t v14 = v2[3];
  uint64_t v15 = v12;
  sub_1DC881A8C(a1, a1[3]);
  sub_1DC8AA330();
  sub_1DCB892B8();
  uint64_t v16 = v10;
  uint64_t v17 = v2[1];
  uint64_t v18 = v11;
  uint64_t v19 = v14;
  uint64_t v20 = v2[4];
  uint64_t v21 = v15;
  sub_1DC89C64C();
  sub_1DCB88F18();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v4);
}

uint64_t sub_1DC8A9418()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC8A94D8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_1DC87E988(&qword_1EAA9E200);
  sub_1DC89D4E0();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1DC881A8C(a1, a1[3]);
  sub_1DC8AA330();
  sub_1DCB89298();
  if (!v2)
  {
    sub_1DC89C600();
    sub_1DCB88DF8();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v5);
    uint64_t v11 = v19;
    uint64_t v12 = v16[1];
    uint64_t v13 = v18;
    long long v14 = v17;
    *(void *)a2 = v16[0];
    *(void *)(a2 + 8) = v12;
    *(_OWORD *)(a2 + 16) = v14;
    *(void *)(a2 + 32) = v13;
    *(void *)(a2 + 40) = v11;
  }
  return sub_1DC8818D0((uint64_t)a1);
}

uint64_t sub_1DC8A9640@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1DC8A9214(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1DC8A966C(uint64_t a1)
{
  unint64_t v2 = sub_1DC8AA330();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC8A96A8(uint64_t a1)
{
  unint64_t v2 = sub_1DC8AA330();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1DC8A96EC()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC8A97B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1DC8A94D8(a1, a2);
}

uint64_t sub_1DC8A97CC(void *a1)
{
  return sub_1DC8A92C4(a1);
}

double SNNullResult.timeRange.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1 + OBJC_IVAR___SNNullResult_impl;
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR___SNNullResult_impl + 40);
  *(void *)a1 = *(void *)(v1 + OBJC_IVAR___SNNullResult_impl);
  *(void *)(a1 + 8) = *(void *)(v2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v2 + 16);
  double result = *(double *)(v2 + 32);
  *(double *)(a1 + 32) = result;
  *(void *)(a1 + 40) = v3;
  return result;
}

double (*SNNullResult.timeRange.modify(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  SNNullResult.timeRange.getter((uint64_t)v3);
  return sub_1DC8A9934;
}

double sub_1DC8A9934(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = v1[5];
  uint64_t v3 = v1[6] + OBJC_IVAR___SNNullResult_impl;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[4];
  long long v6 = *((_OWORD *)v1 + 1);
  *(void *)uint64_t v3 = *v1;
  *(void *)(v3 + 8) = v4;
  *(_OWORD *)(v3 + 16) = v6;
  *(void *)(v3 + 32) = v5;
  *(void *)(v3 + 40) = v2;
  free(v1);
  return result;
}

id sub_1DC8A9970()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = MEMORY[0x1E4F1FA20];
  uint64_t v3 = *(void *)(MEMORY[0x1E4F1FA20] + 40);
  uint64_t v4 = &v0[OBJC_IVAR___SNNullResult_impl];
  *(void *)uint64_t v4 = *MEMORY[0x1E4F1FA20];
  *((void *)v4 + 1) = *(void *)(v2 + 8);
  *((_OWORD *)v4 + 1) = *(_OWORD *)(v2 + 16);
  *((void *)v4 + 4) = *(void *)(v2 + 32);
  *((void *)v4 + 5) = v3;
  v6.receiver = v0;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, sel_init);
}

id sub_1DC8A9A08(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = &v3[OBJC_IVAR___SNNullResult_impl];
  *(void *)uint64_t v5 = *(void *)a1;
  *((void *)v5 + 1) = *(void *)(a1 + 8);
  *((_OWORD *)v5 + 1) = *(_OWORD *)(a1 + 16);
  *((void *)v5 + 4) = *(void *)(a1 + 32);
  *((void *)v5 + 5) = v4;
  v7.receiver = v3;
  v7.super_class = v1;
  return objc_msgSendSuper2(&v7, sel_init);
}

id SNNullResult.copy(with:)@<X0>(void *a1@<X8>)
{
  uint64_t ObjectType = swift_getObjectType();
  v6[0] = *(void *)(v1 + OBJC_IVAR___SNNullResult_impl);
  sub_1DC8AA540(v1 + OBJC_IVAR___SNNullResult_impl);
  v6[5] = v4;
  id result = sub_1DC8A9A08((uint64_t)v6);
  a1[3] = ObjectType;
  *a1 = result;
  return result;
}

uint64_t SNNullResult.hash.getter()
{
  return sub_1DCB891F8();
}

BOOL SNNullResult.isEqual(_:)(uint64_t a1)
{
  swift_getObjectType();
  sub_1DC87E920(a1, (uint64_t)&v16);
  if (v17)
  {
    sub_1DC87E9CC(&v16, v15);
    sub_1DC87E9DC((uint64_t)v15, (uint64_t)v11);
    if (swift_dynamicCast() && (uint64_t v3 = (void *)v10[0]) != 0)
    {
      uint64_t v4 = *(void *)(v1 + OBJC_IVAR___SNNullResult_impl + 40);
      uint64_t v5 = v10[0] + OBJC_IVAR___SNNullResult_impl;
      uint64_t v6 = *(void *)(v10[0] + OBJC_IVAR___SNNullResult_impl);
      v11[0] = *(void *)(v1 + OBJC_IVAR___SNNullResult_impl);
      v11[1] = *(void *)(v1 + OBJC_IVAR___SNNullResult_impl + 8);
      long long v12 = *(_OWORD *)(v1 + OBJC_IVAR___SNNullResult_impl + 16);
      uint64_t v13 = *(void *)(v1 + OBJC_IVAR___SNNullResult_impl + 32);
      uint64_t v14 = v4;
      v10[0] = v6;
      sub_1DC8AA540(v5);
      void v10[5] = v7;
      BOOL v8 = static TimeRange.== infix(_:_:)((uint64_t)v11, (uint64_t)v10);
    }
    else
    {
      BOOL v8 = 0;
    }
    sub_1DC8818D0((uint64_t)v15);
  }
  else
  {
    return 0;
  }
  return v8;
}

id SNNullResult.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return SNNullResult.init(coder:)(a1);
}

id SNNullResult.init(coder:)(void *a1)
{
  id v3 = v1;
  sub_1DC87D1C4(1819307369, 0xE400000000000000, a1);
  swift_getObjectType();

  id v4 = sub_1DC8A9A08((uint64_t)&v6);
  swift_deallocPartialClassInstance();
  return v4;
}

Swift::Void __swiftcall SNNullResult.encode(with:)(NSCoder with)
{
  long long v2 = *(_OWORD *)(v1 + OBJC_IVAR___SNNullResult_impl + 16);
  v3[0] = *(_OWORD *)(v1 + OBJC_IVAR___SNNullResult_impl);
  v3[1] = v2;
  v3[2] = *(_OWORD *)(v1 + OBJC_IVAR___SNNullResult_impl + 32);
  sub_1DC87AF68((uint64_t)v3, 1819307369, 0xE400000000000000, (uint64_t)with.super.isa);
}

uint64_t static SNNullResult.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t SNNullResult.description.getter()
{
  v14.receiver = v0;
  v14.super_class = (Class)swift_getObjectType();
  id v1 = objc_msgSendSuper2(&v14, sel_description);
  uint64_t v2 = sub_1DCB87938();
  uint64_t v4 = v3;

  uint64_t v15 = v2;
  uint64_t v16 = v4;
  sub_1DCB87A18();
  SNNullResult.timeRange.getter((uint64_t)v17);
  uint64_t v5 = v17[0];
  uint64_t v6 = v17[2];
  uint64_t v7 = v17[3];
  uint64_t v8 = v17[5];
  uint64_t v9 = self;
  v13[0] = v5;
  v13[1] = v17[1];
  _OWORD v13[2] = v6;
  v13[3] = v7;
  id v13[4] = v17[4];
  v13[5] = v8;
  id v10 = objc_msgSend(v9, sel_valueWithCMTimeRange_, v13);
  id v11 = objc_msgSend(v10, sel_description);
  sub_1DCB87938();

  sub_1DCB87A18();
  swift_bridgeObjectRelease();
  return v15;
}

id SNNullResult.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

double sub_1DC8AA238@<D0>(uint64_t a1@<X8>)
{
  return SNNullResult.timeRange.getter(a1);
}

double sub_1DC8AA25C(uint64_t a1)
{
  return SNNullResult.timeRange.setter(a1);
}

uint64_t type metadata accessor for SNNullResult()
{
  return self;
}

uint64_t method lookup function for SNNullResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SNNullResult);
}

__n128 initializeWithCopy for TimeRange(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for NullResult()
{
  return &type metadata for NullResult;
}

unint64_t sub_1DC8AA2E4()
{
  unint64_t result = qword_1EAA9E1F8;
  if (!qword_1EAA9E1F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E1F8);
  }
  return result;
}

unint64_t sub_1DC8AA330()
{
  unint64_t result = qword_1EAA9E208;
  if (!qword_1EAA9E208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E208);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NullResult.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1DC8AA418);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for NullResult.CodingKeys()
{
  return &type metadata for NullResult.CodingKeys;
}

unint64_t sub_1DC8AA454()
{
  unint64_t result = qword_1EAA9E228;
  if (!qword_1EAA9E228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E228);
  }
  return result;
}

unint64_t sub_1DC8AA4A4()
{
  unint64_t result = qword_1EAA9E230;
  if (!qword_1EAA9E230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E230);
  }
  return result;
}

unint64_t sub_1DC8AA4F4()
{
  unint64_t result = qword_1EAA9E238[0];
  if (!qword_1EAA9E238[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EAA9E238);
  }
  return result;
}

double sub_1DC8AA540@<D0>(uint64_t a1@<X8>)
{
  return *(double *)(a1 + 32);
}

void static Tools.printModelInfo(url:)(uint64_t a1)
{
  objc_super v2 = sub_1DCAA5940(a1);
  if (!v1)
  {
    unsigned int v4 = v2;
    uint64_t v5 = v3;
    if (v3 < 0)
    {
      uint64_t v7 = (void *)(v3 & 0x7FFFFFFFFFFFFFFFLL);
      sub_1DC87E988(qword_1EAA9C830);
      uint64_t v8 = swift_allocObject();
      long long v161 = xmmword_1DCBB93B0;
      uint64_t v9 = MEMORY[0x1E4FBB1A0];
      *(_OWORD *)(v8 + 16) = xmmword_1DCBB93B0;
      *(void *)(v8 + 56) = v9;
      *(void *)(v8 + 32) = 0x6C65646F4D203545;
      *(void *)(v8 + 40) = 0xE800000000000000;
      swift_retain();
      swift_retain();
      sub_1DC8AAE30();
      swift_bridgeObjectRelease();
      id v10 = (__n128 *)sub_1DC8AAE50();
      sub_1DC8AAEAC(v10, v11, v12, v13, v14, v15, v16, v17, v111, v115, v120, v125, v130, v135, v140, v145, v150, v155, v18);
      *(void *)(v19 + 32) = 10;
      *(void *)(v19 + 40) = 0xE100000000000000;
      sub_1DC8AAE30();
      swift_bridgeObjectRelease();
      uint64_t v20 = (__n128 *)sub_1DC8AAE50();
      sub_1DC8AAEAC(v20, v21, v22, v23, v24, v25, v26, v27, v112, v116, v121, v126, v131, v136, v141, v146, v151, v156, v28);
      strcpy((char *)(v29 + 32), "Input names:");
      *(unsigned char *)(v29 + 45) = 0;
      *(_WORD *)(v29 + 46) = -5120;
      sub_1DC8AAE30();
      swift_bridgeObjectRelease();
      uint64_t v30 = sub_1DC96A1E0();
      sub_1DC96A240(v30);
      uint64_t v138 = v5 & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v143 = v5;
      uint64_t v148 = v4;
      uint64_t v153 = 0;
      uint64_t v159 = v31;
      uint64_t v63 = *(void *)(v31 + 16);
      uint64_t v64 = v9;
      if (v63)
      {
        uint64_t v65 = v31 + 40;
        do
        {
          uint64_t v66 = sub_1DC8AAE50();
          sub_1DC8AAE6C(v66, v67, v68, v69, v70, v71, v72, v73, v113, v117, v122, v127, v132, v138, v143, (uint64_t)v148, v153, v159, v161);
          sub_1DCB87A18();
          swift_bridgeObjectRelease();
          sub_1DCB87A18();
          uint64_t v74 = v162;
          unint64_t v75 = v163;
          v7[7] = v64;
          v7[4] = v74;
          v7[5] = v75;
          sub_1DC8AAE30();
          swift_bridgeObjectRelease();
          v65 += 16;
          --v63;
        }
        while (v63);
      }
      swift_bridgeObjectRelease();
      uint64_t v76 = sub_1DC8AAE50();
      *(_OWORD *)(v76 + 16) = v161;
      *(void *)(v76 + 56) = v64;
      *(void *)(v76 + 32) = 10;
      *(void *)(v76 + 40) = 0xE100000000000000;
      sub_1DC8AAE30();
      swift_bridgeObjectRelease();
      uint64_t v77 = sub_1DC8AAE50();
      *(_OWORD *)(v77 + 16) = v161;
      *(void *)(v77 + 56) = v64;
      strcpy((char *)(v77 + 32), "Output names:");
      *(_WORD *)(v77 + 46) = -4864;
      sub_1DC8AAE30();
      swift_bridgeObjectRelease();
      uint64_t v78 = sub_1DC96A154();
      if (v153)
      {
        sub_1DC8AAD10(v148, v143);
        swift_release();
        swift_release();
        return;
      }
      sub_1DC96A1B4(v78);
      uint64_t v154 = 0;
      uint64_t v160 = v79;
      uint64_t v98 = *(void *)(v79 + 16);
      if (v98)
      {
        uint64_t v99 = v79 + 40;
        do
        {
          uint64_t v100 = sub_1DC8AAE50();
          sub_1DC8AAE6C(v100, v101, v102, v103, v104, v105, v106, v107, v113, v117, v122, v127, v132, v138, v143, (uint64_t)v148, v154, v160, v161);
          sub_1DCB87A18();
          swift_bridgeObjectRelease();
          sub_1DCB87A18();
          uint64_t v108 = v162;
          unint64_t v109 = v163;
          v7[7] = v64;
          v7[4] = v108;
          v7[5] = v109;
          sub_1DC8AAE30();
          swift_bridgeObjectRelease();
          v99 += 16;
          --v98;
        }
        while (v98);
      }
      swift_bridgeObjectRelease();
      uint64_t v110 = sub_1DC8AAE50();
      *(_OWORD *)(v110 + 16) = v161;
      *(void *)(v110 + 56) = v64;
      *(void *)(v110 + 32) = 10;
      *(void *)(v110 + 40) = 0xE100000000000000;
      sub_1DC8AAE30();
      sub_1DC8AAD10(v148, v143);
      swift_release();
      swift_release();
    }
    else
    {
      id v6 = objc_allocWithZone((Class)SNClassifySoundRequest);
      id v32 = sub_1DC8AAD5C(v4);
      sub_1DC87E988(qword_1EAA9C830);
      uint64_t v33 = swift_allocObject();
      *(_OWORD *)(v33 + 16) = xmmword_1DCBB93B0;
      uint64_t v34 = MEMORY[0x1E4FBB1A0];
      *(void *)(v33 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v33 + 32) = 0xD00000000000001CLL;
      *(void *)(v33 + 40) = 0x80000001DCB90CB0;
      sub_1DC8AAE30();
      swift_bridgeObjectRelease();
      SNClassifySoundRequest.windowDurationConstraint.getter((uint64_t)&v162);
      uint64_t v35 = v162;
      if (v168)
      {
        uint64_t v169 = v162;
        unint64_t v170 = v163;
        uint64_t v171 = v164;
        uint64_t v172 = v165;
        uint64_t v173 = v166;
        uint64_t v174 = v167;
        unint64_t v36 = (__n128 *)sub_1DC8AAE50();
        sub_1DC8AAE98(v36, v37, v38, v39, v40, v41, v42, v43, v111, v115, v120, v125, v130, (uint64_t)v32, v5, (uint64_t)v4, 0, v155, v44);
        *(void *)(v45 + 32) = 0xD00000000000001ELL;
        *(void *)(v45 + 40) = 0x80000001DCB90CD0;
        sub_1DC8AAE30();
        swift_bridgeObjectRelease();
        uint64_t v46 = sub_1DC8AAE50();
        *(_OWORD *)(v46 + 16) = xmmword_1DCBB93B0;
        sub_1DC933E74();
        sub_1DCB87A18();
        swift_bridgeObjectRelease();
        sub_1DCB87A18();
        *(void *)(v46 + 56) = v34;
        *(void *)(v46 + 32) = 538976288;
        *(void *)(v46 + 40) = 0xE400000000000000;
        sub_1DC8AAE30();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v119 = v163;
        uint64_t v124 = v164;
        uint64_t v129 = v165;
        uint64_t v134 = v166;
        uint64_t v158 = v167;
        int v47 = (__n128 *)sub_1DC8AAE50();
        sub_1DC8AAE98(v47, v48, v49, v50, v51, v52, v53, v54, v111, v119, v124, v129, v134, (uint64_t)v32, v5, (uint64_t)v4, 0, v158, v55);
        *(void *)(v56 + 32) = 0xD00000000000001FLL;
        *(void *)(v56 + 40) = 0x80000001DCB90CF0;
        sub_1DC8AAE30();
        swift_bridgeObjectRelease();
        uint64_t v57 = v35;
        uint64_t v58 = *(void *)(v35 + 16);
        if (v58)
        {
          uint64_t v114 = v57;
          uint64_t v59 = (_DWORD *)(v57 + 40);
          do
          {
            uint64_t v60 = *((void *)v59 - 1);
            int v61 = *v59;
            v59 += 6;
            uint64_t v62 = sub_1DC8AAE50();
            *(_OWORD *)(v62 + 16) = xmmword_1DCBB93B0;
            uint64_t v175 = v60;
            sub_1DCB88F98();
            sub_1DCB87A18();
            LODWORD(v175) = v61;
            sub_1DCB88F98();
            sub_1DCB87A18();
            swift_bridgeObjectRelease();
            sub_1DCB87A18();
            swift_bridgeObjectRelease();
            sub_1DCB87A18();
            *(void *)(v62 + 56) = MEMORY[0x1E4FBB1A0];
            *(void *)(v62 + 32) = 538976288;
            *(void *)(v62 + 40) = 0xE400000000000000;
            sub_1DC8AAE30();
            swift_bridgeObjectRelease();
            --v58;
          }
          while (v58);
          sub_1DC8823B0(v114, v118, v123, v128, v133, v157, 0);
          id v32 = (id)v137;
          uint64_t v34 = MEMORY[0x1E4FBB1A0];
        }
        else
        {
          sub_1DC8823B0(v57, v118, v123, v128, v133, v157, 0);
        }
      }
      int v80 = (__n128 *)sub_1DC8AAE50();
      sub_1DC8AAE98(v80, v81, v82, v83, v84, v85, v86, v87, v114, v118, v123, v128, v133, v137, v142, v147, v152, v157, v88);
      *(void *)(v89 + 32) = 0xA3A736C6562614CLL;
      *(void *)(v89 + 40) = 0xE800000000000000;
      sub_1DC8AAE30();
      swift_bridgeObjectRelease();
      id v90 = objc_msgSend(v32, sel_knownClassifications);
      uint64_t v91 = sub_1DCB87C38();

      uint64_t v92 = v34;
      uint64_t v93 = *(void *)(v91 + 16);
      if (v93)
      {
        uint64_t v94 = v91 + 40;
        do
        {
          uint64_t v95 = swift_allocObject();
          *(_OWORD *)(v95 + 16) = xmmword_1DCBB93B0;
          uint64_t v162 = 2236461;
          unint64_t v163 = 0xE300000000000000;
          swift_bridgeObjectRetain();
          sub_1DCB87A18();
          swift_bridgeObjectRelease();
          sub_1DCB87A18();
          uint64_t v96 = v162;
          unint64_t v97 = v163;
          *(void *)(v95 + 56) = v92;
          *(void *)(v95 + 32) = v96;
          *(void *)(v95 + 40) = v97;
          sub_1DC8AAE30();
          swift_bridgeObjectRelease();
          v94 += 16;
          --v93;
        }
        while (v93);
      }
      sub_1DC8AAD10(v149, v144);

      sub_1DC8AAD10(v149, v144);
    }
    swift_bridgeObjectRelease();
  }
}

void sub_1DC8AAD10(void *a1, uint64_t a2)
{
  if (a2 < 0)
  {
    swift_release();
    swift_release();
  }
  else
  {
  }
}

id sub_1DC8AAD5C(void *a1)
{
  v7[1] = *(id *)MEMORY[0x1E4F143B8];
  v7[0] = 0;
  id v3 = objc_msgSend(v1, sel_initWithMLModel_error_, a1, v7);
  if (v3)
  {
    id v4 = v7[0];
  }
  else
  {
    id v5 = v7[0];
    sub_1DCB86898();

    swift_willThrow();
  }

  return v3;
}

ValueMetadata *type metadata accessor for Tools()
{
  return &type metadata for Tools;
}

uint64_t sub_1DC8AAE30()
{
  return sub_1DCB89188();
}

uint64_t sub_1DC8AAE50()
{
  return swift_allocObject();
}

uint64_t sub_1DC8AAE6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, long long a19)
{
  *(_OWORD *)(a1 + 16) = a19;
  return swift_bridgeObjectRetain();
}

__n128 sub_1DC8AAE98(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __n128 a19)
{
  __n128 result = a19;
  a1[1] = a19;
  a1[3].n128_u64[1] = v19;
  return result;
}

__n128 sub_1DC8AAEAC(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __n128 a19)
{
  __n128 result = a19;
  a1[1] = a19;
  a1[3].n128_u64[1] = v19;
  return result;
}

uint64_t sub_1DC8AAEC0()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1DC8AAF10()
{
  uint64_t v0 = swift_allocObject();
  sub_1DC8AAF48();
  return v0;
}

void *sub_1DC8AAF48()
{
  v0[2] = sub_1DCB888A8();
  v0[3] = v1;
  v0[4] = v2;
  v0[5] = v3;
  type metadata accessor for SafeLock();
  uint64_t v4 = swift_allocObject();
  id v5 = (_DWORD *)swift_slowAlloc();
  *id v5 = 0;
  *(void *)(v4 + 16) = v5;
  v0[6] = v4;
  return v0;
}

uint64_t sub_1DC8AAFB8()
{
  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_1DC8AAFE0()
{
  sub_1DC8AAFB8();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Queue()
{
  return sub_1DC8866E4();
}

uint64_t sub_1DC8AB02C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5 >= v4) {
    int64_t v6 = *(void *)(a1 + 16);
  }
  else {
    int64_t v6 = *(void *)(a2 + 16);
  }
  uint64_t v53 = MEMORY[0x1E4FBC860];
  sub_1DC897C7C(0, v6, 0);
  uint64_t v7 = v53;
  unint64_t v33 = v5;
  unint64_t v34 = v4;
  uint64_t v32 = a2;
  int64_t v35 = v6;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v9 = (unsigned char *)(a2 + 56);
    id v10 = (unsigned char *)(a1 + 56);
    while (v4)
    {
      if (!v5) {
        goto LABEL_33;
      }
      if (*v10 & 1) != 0 || (*v9)
      {
LABEL_30:
        uint64_t v7 = v32;
        sub_1DC884E74();
        swift_allocError();
        *uint64_t v31 = 0;
        swift_willThrow();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v7;
      }
      int64_t v42 = v6;
      uint64_t result = sub_1DCB88618();
      long long v11 = 0uLL;
      long long v12 = 0uLL;
      long long v13 = 0uLL;
      if (result)
      {
        unsigned int v37 = result;
        sub_1DCB883D8();
        uint64_t result = v37;
        long long v11 = v50;
        long long v12 = v51;
        long long v13 = v52;
      }
      unint64_t v15 = *(void *)(v53 + 16);
      unint64_t v14 = *(void *)(v53 + 24);
      if (v15 >= v14 >> 1)
      {
        uint64_t v17 = result;
        long long v45 = v13;
        long long v38 = v12;
        long long v40 = v11;
        sub_1DC897C7C((char *)(v14 > 1), v15 + 1, 1);
        long long v12 = v38;
        long long v11 = v40;
        long long v13 = v45;
        uint64_t result = v17;
      }
      *(void *)(v53 + 16) = v15 + 1;
      uint64_t v16 = v53 + 52 * v15;
      *(_OWORD *)(v16 + 32) = v11;
      *(_OWORD *)(v16 + 48) = v12;
      --v5;
      *(_OWORD *)(v16 + 64) = v13;
      *(unsigned char *)(v16 + 80) = (result ^ 1) & 1;
      --v4;
      v9 += 28;
      v10 += 28;
      --v6;
      if (v42 == 1) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
LABEL_17:
  unint64_t v19 = v33;
  unint64_t v18 = v34;
  if (v34 > v33)
  {
    unint64_t v20 = v35;
    uint64_t v21 = 28 * v35;
    uint64_t v23 = v32;
    uint64_t v22 = a1;
    uint64_t v46 = 28 * v35;
    while (v20 < v18)
    {
      if (v19 == v20) {
        goto LABEL_29;
      }
      if (v20 >= v19) {
        goto LABEL_35;
      }
      if (*(unsigned char *)(v22 + v21 + 56) & 1) != 0 || (*(unsigned char *)(v23 + v21 + 56)) {
        goto LABEL_30;
      }
      unint64_t v36 = v20;
      uint64_t result = sub_1DCB88618();
      long long v24 = 0uLL;
      long long v25 = 0uLL;
      long long v26 = 0uLL;
      if (result)
      {
        unsigned int v43 = result;
        sub_1DCB883D8();
        uint64_t result = v43;
        long long v24 = v47;
        long long v25 = v48;
        long long v26 = v49;
      }
      unint64_t v28 = *(void *)(v53 + 16);
      unint64_t v27 = *(void *)(v53 + 24);
      unint64_t v19 = v33;
      if (v28 >= v27 >> 1)
      {
        uint64_t v30 = result;
        long long v41 = v25;
        long long v44 = v24;
        long long v39 = v26;
        sub_1DC897C7C((char *)(v27 > 1), v28 + 1, 1);
        long long v26 = v39;
        long long v25 = v41;
        long long v24 = v44;
        uint64_t result = v30;
      }
      unint64_t v20 = v36 + 1;
      *(void *)(v53 + 16) = v28 + 1;
      uint64_t v29 = v53 + 52 * v28;
      *(_OWORD *)(v29 + 32) = v24;
      *(_OWORD *)(v29 + 48) = v25;
      *(_OWORD *)(v29 + 64) = v26;
      *(unsigned char *)(v29 + 80) = (result ^ 1) & 1;
      v23 += 28;
      v22 += 28;
      unint64_t v18 = v34;
      uint64_t v21 = v46;
      if (v34 == v36 + 1) {
        goto LABEL_29;
      }
    }
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    return result;
  }
LABEL_29:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t *sub_1DC8AB3D8@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  if ((unsigned __int128)(*result * (__int128)(int)result[1]) >> 64 == (*result * (int)result[1]) >> 63)
  {
    if ((unsigned __int128)(result[3] * (__int128)(int)result[4]) >> 64 == (result[3] * (int)result[4]) >> 63)
    {
      uint64_t v3 = sub_1DCB885B8();
      int v5 = v4;
      uint64_t v7 = v6;
      unint64_t v8 = HIDWORD(v4);
      uint64_t result = (uint64_t *)sub_1DCB885B8();
      *(void *)a2 = v3;
      *(_DWORD *)(a2 + 8) = v5;
      *(_DWORD *)(a2 + 12) = v8;
      *(void *)(a2 + 16) = v7;
      *(void *)(a2 + 24) = result;
      *(_DWORD *)(a2 + 32) = v9;
      *(_DWORD *)(a2 + 36) = v10;
      *(void *)(a2 + 40) = v11;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

CMTimeRange *sub_1DC8AB560@<X0>(CMTimeRange *result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  CMTimeValue value = result->duration.value;
  uint64_t timescale = result->duration.timescale;
  if ((unsigned __int128)(value * (__int128)result->duration.timescale) >> 64 == (value * timescale) >> 63)
  {
    CMTimeValue v6 = result->start.value;
    CMTimeScale v7 = result->start.timescale;
    CMTimeFlags flags = result->start.flags;
    CMTimeEpoch epoch = result->start.epoch;
    CMTimeFlags v10 = result->duration.flags;
    CMTimeEpoch v11 = result->duration.epoch;
    if (value * timescale < 0)
    {
      if ((a2 & 1) == 0)
      {
LABEL_8:
        *(void *)a3 = v6;
        *(_DWORD *)(a3 + 8) = v7;
        *(_DWORD *)(a3 + 12) = flags;
        *(void *)(a3 + 16) = epoch;
        *(void *)(a3 + 24) = value;
        *(_DWORD *)(a3 + 32) = timescale;
        *(_DWORD *)(a3 + 36) = v10;
        *(void *)(a3 + 40) = v11;
        return result;
      }
    }
    else if (a2)
    {
      goto LABEL_8;
    }
    range.start.CMTimeValue value = result->start.value;
    range.start.uint64_t timescale = v7;
    range.start.CMTimeFlags flags = flags;
    range.start.CMTimeEpoch epoch = epoch;
    range.duration.CMTimeValue value = value;
    range.duration.uint64_t timescale = timescale;
    range.duration.CMTimeFlags flags = v10;
    range.duration.CMTimeEpoch epoch = v11;
    uint64_t result = (CMTimeRange *)CMTimeRangeGetEnd(&start, &range);
    if (value != 0x8000000000000000)
    {
      CMTimeValue v12 = start.value;
      uint64_t v13 = *(void *)&start.timescale;
      int64_t v14 = -value;
      CMTimeEpoch v15 = start.epoch;
      CMTimeMake(&range.start, v14, timescale);
      double v24 = sub_1DC8AF0EC(v16, v17, v18, v19, v20, v21, v22, v23, *(double *)&v27.value, *(double *)&v27.timescale, *(double *)&v27.epoch, *(double *)&start.value, *(double *)&start.timescale, *(double *)&start.epoch, *(double *)&range.start.value, *(double *)&range.start.timescale);
      v27.CMTimeEpoch epoch = v25;
      start.CMTimeValue value = v12;
      *(void *)&start.uint64_t timescale = v13;
      start.CMTimeEpoch epoch = v15;
      v27.CMTimeValue value = v26;
      *(double *)&v27.uint64_t timescale = v24;
      uint64_t result = CMTimeRangeMake(&range, &start, &v27);
      CMTimeValue v6 = range.start.value;
      CMTimeScale v7 = range.start.timescale;
      CMTimeFlags flags = range.start.flags;
      CMTimeEpoch epoch = range.start.epoch;
      CMTimeValue value = range.duration.value;
      LODWORD(timescale) = range.duration.timescale;
      CMTimeFlags v10 = range.duration.flags;
      CMTimeEpoch v11 = range.duration.epoch;
      goto LABEL_8;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

CMTimeValue sub_1DC8AB674(CMTimeValue result, int a2, uint64_t a3, char a4)
{
  if (result < 0 && (a4 & 1) != 0 || a2 < 0 && (a4 & 1) == 0)
  {
    if (result == 0x8000000000000000)
    {
      __break(1u);
    }
    else if (a2 != 0x80000000)
    {
      uint64_t v7 = v4;
      uint64_t v8 = v5;
      CMTimeMake(&v6, -result, -a2);
      return v6.value;
    }
    __break(1u);
  }
  return result;
}

double sub_1DC8AB6F0(CMTimeRange *a1, char a2, char a3)
{
  sub_1DC8AB560(a1, a2, (uint64_t)&v34);
  CMTimeValue v4 = sub_1DC8AB674(v34, v35, v36, a3);
  CMTimeScale v6 = v5;
  CMTimeEpoch v8 = v7;
  unint64_t v9 = HIDWORD(v5);
  CMTimeValue v10 = sub_1DC8AB674(v37, v38, v39, a3);
  duration.CMTimeEpoch epoch = v11;
  start.CMTimeValue value = v4;
  start.uint64_t timescale = v6;
  start.CMTimeFlags flags = v9;
  start.CMTimeEpoch epoch = v8;
  duration.CMTimeValue value = v10;
  duration.uint64_t timescale = v12;
  duration.CMTimeFlags flags = v13;
  int64_t v14 = CMTimeRangeMake(&v31, &start, &duration);
  return sub_1DC8AF070((uint64_t)v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v31.start.value, *(double *)&v31.start.timescale, *(long long *)&v31.start.epoch,
           *(uint64_t *)&v31.duration.timescale,
           v31.duration.epoch);
}

void sub_1DC8AB81C(CMTimeRange *a1, CMTimeRange *a2, uint64_t a3, void *a4)
{
  sub_1DC8AB560(a2, 1, (uint64_t)&v76);
  start.start.CMTimeValue value = sub_1DC8AB674(v76, v77, v78, 0);
  start.start.CMTimeScale timescale = v5;
  start.start.CMTimeFlags flags = v6;
  start.start.CMTimeEpoch epoch = v7;
  *(void *)CMTime duration = sub_1DC8AB674(v79, v80, v81, 0);
  *(void *)&duration[8] = v8;
  *(void *)&duration[16] = v9;
  CMTimeRangeMake(&v82, &start.start, (CMTime *)duration);
  CMTimeValue value = v82.start.value;
  CMTimeScale timescale = v82.start.timescale;
  CMTimeFlags flags = v82.start.flags;
  CMTimeEpoch epoch = v82.start.epoch;
  CMTimeValue v53 = v82.duration.value;
  CMTimeScale v51 = v82.duration.timescale;
  CMTimeFlags v49 = v82.duration.flags;
  CMTimeEpoch v48 = v82.duration.epoch;
  sub_1DC8AB560(a1, 1, (uint64_t)&v82);
  CMTimeValue v14 = sub_1DC8AB674(v82.start.value, v82.start.timescale, v82.start.epoch, 0);
  unsigned int v16 = v15;
  uint64_t v18 = v17;
  unint64_t v19 = HIDWORD(v15);
  CMTimeValue v20 = sub_1DC8AB674(v82.duration.value, v82.duration.timescale, v82.duration.epoch, 0);
  *(void *)CMTime duration = v14;
  *(void *)&duration[8] = __PAIR64__(v19, v16);
  *(void *)&duration[16] = v18;
  end.CMTimeValue value = v20;
  end.CMTimeScale timescale = v21;
  end.CMTimeFlags flags = v22;
  end.CMTimeEpoch epoch = v23;
  CMTimeRangeMake(&start, (CMTime *)duration, &end);
  CMTimeValue v24 = start.start.value;
  CMTimeScale v25 = start.start.timescale;
  CMTimeValue v47 = start.duration.value;
  CMTimeScale v26 = start.duration.timescale;
  CMTimeFlags v27 = start.duration.flags;
  CMTimeEpoch v28 = start.duration.epoch;
  CMTimeFlags v66 = start.start.flags;
  CMTimeEpoch v64 = start.start.epoch;
  *(void *)CMTime duration = value;
  *(void *)&duration[8] = __PAIR64__(flags, timescale);
  *(void *)&duration[16] = epoch;
  if (CMTimeCompare(&start.start, (CMTime *)duration) < 0)
  {
    *(void *)CMTime duration = v24;
    *(void *)&duration[8] = __PAIR64__(v66, v25);
    *(void *)&duration[16] = v64;
    end.CMTimeValue value = value;
    end.CMTimeScale timescale = timescale;
    end.CMTimeFlags flags = flags;
    end.CMTimeEpoch epoch = epoch;
  }
  else
  {
    *(void *)CMTime duration = v24;
    *(void *)&duration[8] = __PAIR64__(v66, v25);
    *(void *)&duration[16] = v64;
    end.CMTimeValue value = v24;
    end.CMTimeScale timescale = v25;
    end.CMTimeFlags flags = v66;
    end.CMTimeEpoch epoch = v64;
  }
  CMTimeRangeFromTimeToTime(&start, (CMTime *)duration, &end);
  CMTimeValue v60 = start.start.value;
  CMTimeFlags v58 = start.start.flags;
  CMTimeScale v59 = start.start.timescale;
  CMTimeValue v56 = start.duration.value;
  CMTimeEpoch v57 = start.start.epoch;
  CMTimeFlags v62 = start.duration.flags;
  CMTimeScale v63 = start.duration.timescale;
  CMTimeEpoch v55 = start.duration.epoch;
  start.start.CMTimeValue value = v24;
  start.start.CMTimeScale timescale = v25;
  start.start.CMTimeFlags flags = v66;
  start.start.CMTimeEpoch epoch = v64;
  start.duration.CMTimeValue value = v47;
  start.duration.CMTimeScale timescale = v26;
  start.duration.CMTimeFlags flags = v27;
  start.duration.CMTimeEpoch epoch = v28;
  CMTimeRangeGetEnd((CMTime *)duration, &start);
  CMTimeEpoch v46 = v28;
  unint64_t v45 = __PAIR64__(v27, v26);
  CMTimeValue v29 = *(void *)duration;
  CMTimeEpoch v30 = *(void *)&duration[16];
  uint64_t v31 = *(void *)&duration[8];
  start.start.CMTimeValue value = value;
  start.start.CMTimeScale timescale = timescale;
  start.start.CMTimeFlags flags = flags;
  start.start.CMTimeEpoch epoch = epoch;
  start.duration.CMTimeValue value = v53;
  start.duration.CMTimeScale timescale = v51;
  start.duration.CMTimeFlags flags = v49;
  start.duration.CMTimeEpoch epoch = v48;
  CMTimeRangeGetEnd((CMTime *)duration, &start);
  start.start.CMTimeValue value = v29;
  *(void *)&start.start.CMTimeScale timescale = v31;
  start.start.CMTimeEpoch epoch = v30;
  if (CMTimeCompare(&start.start, (CMTime *)duration) < 1)
  {
    start.start.CMTimeValue value = v24;
    start.start.CMTimeScale timescale = v25;
    start.start.CMTimeFlags flags = v66;
    start.start.CMTimeEpoch epoch = v64;
    start.duration.CMTimeValue value = v47;
    *(void *)&start.duration.CMTimeScale timescale = v45;
    start.duration.CMTimeEpoch epoch = v46;
  }
  else
  {
    start.start.CMTimeValue value = value;
    start.start.CMTimeScale timescale = timescale;
    start.start.CMTimeFlags flags = flags;
    start.start.CMTimeEpoch epoch = epoch;
    start.duration.CMTimeValue value = v53;
    start.duration.CMTimeScale timescale = v51;
    start.duration.CMTimeFlags flags = v49;
    start.duration.CMTimeEpoch epoch = v48;
  }
  CMTimeRangeGetEnd((CMTime *)duration, &start);
  uint64_t v32 = *(void *)duration;
  uint64_t v33 = *(void *)&duration[16];
  uint64_t v34 = *(void *)&duration[8];
  start.start.CMTimeValue value = v24;
  start.start.CMTimeScale timescale = v25;
  start.start.CMTimeFlags flags = v66;
  start.start.CMTimeEpoch epoch = v64;
  start.duration.CMTimeValue value = v47;
  *(void *)&start.duration.CMTimeScale timescale = v45;
  start.duration.CMTimeEpoch epoch = v46;
  CMTimeRangeGetEnd((CMTime *)duration, &start);
  CMTimeValue v35 = *(void *)duration;
  CMTimeEpoch v36 = *(void *)&duration[16];
  uint64_t v37 = *(void *)&duration[8];
  *(void *)CMTime duration = v32;
  *(void *)&duration[8] = v34;
  *(void *)&duration[16] = v33;
  end.CMTimeValue value = v35;
  *(void *)&end.CMTimeScale timescale = v37;
  end.CMTimeEpoch epoch = v36;
  CMTimeRangeFromTimeToTime(&start, (CMTime *)duration, &end);
  CMTimeValue v38 = start.start.value;
  CMTimeScale v67 = start.start.timescale;
  CMTimeFlags v65 = start.start.flags;
  CMTimeValue v52 = start.duration.value;
  CMTimeEpoch v54 = start.start.epoch;
  uint64_t v39 = *(void *)&start.duration.timescale;
  CMTimeEpoch v50 = start.duration.epoch;
  start.start.CMTimeValue value = v60;
  *(void *)&start.start.CMTimeScale timescale = __PAIR64__(v58, v59);
  start.start.CMTimeEpoch epoch = v57;
  start.duration.CMTimeValue value = v56;
  *(void *)&start.duration.CMTimeScale timescale = __PAIR64__(v62, v63);
  start.duration.CMTimeEpoch epoch = v55;
  CMTimeRangeGetEnd((CMTime *)duration, &start);
  end.CMTimeValue value = v38;
  end.CMTimeScale timescale = v67;
  end.CMTimeFlags flags = v65;
  end.CMTimeEpoch epoch = v54;
  CMTimeRangeFromTimeToTime(&start, (CMTime *)duration, &end);
  CMTimeValue v40 = start.start.value;
  uint64_t v41 = *(void *)&start.start.timescale;
  uint64_t v42 = *(void *)&start.duration.timescale;
  long long v43 = *(_OWORD *)&start.start.epoch;
  long long v44 = (void (*)(void *, CMTimeRange *, unsigned char *, CMTime *))a4[2];
  CMTimeEpoch v74 = start.duration.epoch;
  start.start.CMTimeValue value = v60;
  start.start.CMTimeScale timescale = v59;
  start.start.CMTimeFlags flags = v58;
  start.start.CMTimeEpoch epoch = v57;
  start.duration.CMTimeValue value = v56;
  start.duration.CMTimeScale timescale = v63;
  start.duration.CMTimeFlags flags = v62;
  start.duration.CMTimeEpoch epoch = v55;
  *(void *)CMTime duration = v40;
  *(void *)&duration[8] = v41;
  *(_OWORD *)&duration[16] = v43;
  uint64_t v73 = v42;
  end.CMTimeValue value = v38;
  end.CMTimeScale timescale = v67;
  end.CMTimeFlags flags = v65;
  end.CMTimeEpoch epoch = v54;
  CMTimeValue v69 = v52;
  uint64_t v70 = v39;
  CMTimeEpoch v71 = v50;
  v44(a4, &start, duration, &end);
  _Block_release(a4);
}

uint64_t sub_1DC8ABD80(CMTimeRange *a1, CMTimeRange *a2, uint64_t a3, uint64_t a4)
{
  sub_1DC8AB560(a2, 1, (uint64_t)&v87);
  CMTimeValue v5 = sub_1DC8AB674(v87, v88, v89, 0);
  CMTimeScale v7 = v6;
  CMTimeEpoch v9 = v8;
  unint64_t v10 = HIDWORD(v6);
  CMTimeValue v11 = sub_1DC8AB674(v90, v91, v92, 0);
  start.CMTimeValue value = v5;
  start.CMTimeScale timescale = v7;
  start.CMTimeFlags flags = v10;
  start.CMTimeEpoch epoch = v9;
  duration.CMTimeValue value = v11;
  duration.CMTimeScale timescale = v12;
  duration.CMTimeFlags flags = v13;
  duration.CMTimeEpoch epoch = v14;
  CMTimeRangeMake(&range, &start, &duration);
  CMTimeValue value = range.start.value;
  CMTimeScale timescale = range.start.timescale;
  CMTimeFlags flags = range.start.flags;
  CMTimeEpoch epoch = range.start.epoch;
  CMTimeValue v57 = range.duration.value;
  CMTimeScale v55 = range.duration.timescale;
  CMTimeFlags v53 = range.duration.flags;
  CMTimeEpoch v51 = range.duration.epoch;
  sub_1DC8AB560(a1, 1, (uint64_t)&start);
  CMTimeValue v19 = sub_1DC8AB674(start.value, start.timescale, start.epoch, 0);
  LODWORD(v5) = v20;
  CMTimeEpoch v22 = v21;
  unint64_t v23 = HIDWORD(v20);
  CMTimeValue v24 = sub_1DC8AB674(v94, v95, v96, 0);
  end.CMTimeEpoch epoch = v25;
  duration.CMTimeValue value = v19;
  duration.CMTimeScale timescale = v5;
  duration.CMTimeFlags flags = v23;
  duration.CMTimeEpoch epoch = v22;
  end.CMTimeValue value = v24;
  end.CMTimeScale timescale = v26;
  end.CMTimeFlags flags = v27;
  CMTimeRangeMake(&range, &duration, &end);
  CMTimeValue v28 = range.start.value;
  CMTimeScale v29 = range.start.timescale;
  CMTimeValue v50 = range.duration.value;
  CMTimeScale v31 = range.duration.timescale;
  CMTimeFlags v30 = range.duration.flags;
  CMTimeEpoch v32 = range.duration.epoch;
  CMTimeFlags v70 = range.start.flags;
  CMTimeEpoch v68 = range.start.epoch;
  duration.CMTimeValue value = value;
  duration.CMTimeScale timescale = timescale;
  duration.CMTimeFlags flags = flags;
  duration.CMTimeEpoch epoch = epoch;
  if (CMTimeCompare(&range.start, &duration) < 0)
  {
    end.CMTimeEpoch epoch = epoch;
    duration.CMTimeValue value = v28;
    duration.CMTimeScale timescale = v29;
    duration.CMTimeFlags flags = v70;
    duration.CMTimeEpoch epoch = v68;
    end.CMTimeValue value = value;
    end.CMTimeScale timescale = timescale;
    end.CMTimeFlags flags = flags;
  }
  else
  {
    duration.CMTimeScale timescale = v29;
    duration.CMTimeFlags flags = v70;
    duration.CMTimeEpoch epoch = v68;
    end.CMTimeValue value = v28;
    end.CMTimeScale timescale = v29;
    end.CMTimeFlags flags = v70;
    end.CMTimeEpoch epoch = v68;
    duration.CMTimeValue value = v28;
  }
  CMTimeRangeFromTimeToTime(&range, &duration, &end);
  CMTimeValue v64 = range.start.value;
  CMTimeFlags v62 = range.start.flags;
  CMTimeScale v63 = range.start.timescale;
  CMTimeValue v60 = range.duration.value;
  CMTimeEpoch v61 = range.start.epoch;
  CMTimeScale v59 = range.duration.timescale;
  CMTimeFlags v67 = range.duration.flags;
  CMTimeEpoch v66 = range.duration.epoch;
  range.start.CMTimeValue value = v28;
  range.start.CMTimeScale timescale = v29;
  range.start.CMTimeFlags flags = v70;
  range.start.CMTimeEpoch epoch = v68;
  range.duration.CMTimeValue value = v50;
  range.duration.CMTimeScale timescale = v31;
  range.duration.CMTimeFlags flags = v30;
  range.duration.CMTimeEpoch epoch = v32;
  CMTimeRangeGetEnd(&duration, &range);
  CMTimeEpoch v49 = v32;
  CMTimeFlags v48 = v30;
  CMTimeValue v33 = duration.value;
  CMTimeEpoch v34 = duration.epoch;
  uint64_t v35 = *(void *)&duration.timescale;
  range.start.CMTimeValue value = value;
  range.start.CMTimeScale timescale = timescale;
  range.start.CMTimeFlags flags = flags;
  range.start.CMTimeEpoch epoch = epoch;
  range.duration.CMTimeValue value = v57;
  range.duration.CMTimeScale timescale = v55;
  range.duration.CMTimeFlags flags = v53;
  range.duration.CMTimeEpoch epoch = v51;
  CMTimeRangeGetEnd(&duration, &range);
  range.start.CMTimeValue value = v33;
  *(void *)&range.start.CMTimeScale timescale = v35;
  range.start.CMTimeEpoch epoch = v34;
  if (CMTimeCompare(&range.start, &duration) < 1)
  {
    range.start.CMTimeValue value = v28;
    range.start.CMTimeScale timescale = v29;
    range.start.CMTimeFlags flags = v70;
    range.start.CMTimeEpoch epoch = v68;
    range.duration.CMTimeValue value = v50;
    range.duration.CMTimeScale timescale = v31;
    range.duration.CMTimeFlags flags = v48;
    range.duration.CMTimeEpoch epoch = v49;
  }
  else
  {
    range.start.CMTimeValue value = value;
    range.start.CMTimeScale timescale = timescale;
    range.start.CMTimeFlags flags = flags;
    range.start.CMTimeEpoch epoch = epoch;
    range.duration.CMTimeValue value = v57;
    range.duration.CMTimeScale timescale = v55;
    range.duration.CMTimeFlags flags = v53;
    range.duration.CMTimeEpoch epoch = v51;
  }
  CMTimeRangeGetEnd(&duration, &range);
  CMTimeValue v36 = duration.value;
  CMTimeEpoch v37 = duration.epoch;
  uint64_t v38 = *(void *)&duration.timescale;
  range.start.CMTimeValue value = v28;
  range.start.CMTimeScale timescale = v29;
  range.start.CMTimeFlags flags = v70;
  range.start.CMTimeEpoch epoch = v68;
  range.duration.CMTimeValue value = v50;
  *(void *)&range.duration.CMTimeScale timescale = __PAIR64__(v48, v31);
  range.duration.CMTimeEpoch epoch = v49;
  CMTimeRangeGetEnd(&duration, &range);
  CMTimeValue v39 = duration.value;
  uint64_t v40 = *(void *)&duration.timescale;
  end.CMTimeEpoch epoch = duration.epoch;
  duration.CMTimeValue value = v36;
  *(void *)&duration.CMTimeScale timescale = v38;
  duration.CMTimeEpoch epoch = v37;
  end.CMTimeValue value = v39;
  *(void *)&end.CMTimeScale timescale = v40;
  CMTimeRangeFromTimeToTime(&range, &duration, &end);
  CMTimeScale v69 = range.start.timescale;
  CMTimeFlags v58 = range.start.flags;
  CMTimeValue v54 = range.duration.value;
  CMTimeEpoch v56 = range.start.epoch;
  uint64_t v41 = *(void *)&range.duration.timescale;
  CMTimeEpoch v52 = range.duration.epoch;
  CMTimeValue v71 = range.start.value;
  range.start.CMTimeValue value = v64;
  *(void *)&range.start.CMTimeScale timescale = __PAIR64__(v62, v63);
  range.start.CMTimeEpoch epoch = v61;
  range.duration.CMTimeValue value = v60;
  *(void *)&range.duration.CMTimeScale timescale = __PAIR64__(v67, v59);
  range.duration.CMTimeEpoch epoch = v66;
  CMTimeRangeGetEnd(&duration, &range);
  end.CMTimeValue value = v71;
  end.CMTimeScale timescale = v69;
  end.CMTimeFlags flags = v58;
  end.CMTimeEpoch epoch = v56;
  CMTimeRangeFromTimeToTime(&range, &duration, &end);
  CMTimeValue v42 = range.start.value;
  CMTimeEpoch v43 = range.duration.epoch;
  uint64_t v44 = *(void *)&range.start.timescale;
  uint64_t v45 = *(void *)&range.duration.timescale;
  long long v46 = *(_OWORD *)&range.start.epoch;
  range.start.CMTimeValue value = v64;
  range.start.CMTimeScale timescale = v63;
  range.start.CMTimeFlags flags = v62;
  range.start.CMTimeEpoch epoch = v61;
  range.duration.CMTimeValue value = v60;
  range.duration.CMTimeScale timescale = v59;
  range.duration.CMTimeFlags flags = v67;
  range.duration.CMTimeEpoch epoch = v66;
  CMTimeValue v73 = v42;
  uint64_t v74 = v44;
  long long v75 = v46;
  uint64_t v76 = v45;
  CMTimeEpoch v77 = v43;
  CMTimeValue v78 = v71;
  CMTimeScale v79 = v69;
  CMTimeFlags v80 = v58;
  CMTimeEpoch v81 = v56;
  CMTimeValue v82 = v54;
  uint64_t v83 = v41;
  CMTimeEpoch v84 = v52;
  sub_1DC8AEB5C((uint64_t)&range);
  return sub_1DC8AEAD8((uint64_t)&range, a4);
}

double sub_1DC8AC26C(CMTimeRange *a1, CMTimeRange *a2, uint64_t a3, uint64_t a4)
{
  sub_1DC8AB560(a2, 1, (uint64_t)&v64);
  start.start.CMTimeValue value = sub_1DC8AB674(v64, v65, v66, 0);
  start.start.CMTimeScale timescale = v5;
  start.start.CMTimeFlags flags = v6;
  start.start.CMTimeEpoch epoch = v7;
  duration.CMTimeValue value = sub_1DC8AB674(v67, v68, v69, 0);
  duration.CMTimeScale timescale = v8;
  duration.CMTimeFlags flags = v9;
  duration.CMTimeEpoch epoch = v10;
  CMTimeRangeMake(&v70, &start.start, &duration);
  CMTimeValue value = v70.start.value;
  CMTimeScale timescale = v70.start.timescale;
  CMTimeFlags flags = v70.start.flags;
  CMTimeEpoch epoch = v70.start.epoch;
  CMTimeValue v57 = v70.duration.value;
  CMTimeFlags v55 = v70.duration.flags;
  CMTimeScale v56 = v70.duration.timescale;
  CMTimeEpoch v54 = v70.duration.epoch;
  sub_1DC8AB560(a1, 1, (uint64_t)&v70);
  CMTimeValue v15 = sub_1DC8AB674(v70.start.value, v70.start.timescale, v70.start.epoch, 0);
  CMTimeScale v17 = v16;
  CMTimeEpoch v19 = v18;
  unint64_t v20 = HIDWORD(v16);
  CMTimeValue v21 = sub_1DC8AB674(v70.duration.value, v70.duration.timescale, v70.duration.epoch, 0);
  end.CMTimeEpoch epoch = v22;
  duration.CMTimeValue value = v15;
  duration.CMTimeScale timescale = v17;
  duration.CMTimeFlags flags = v20;
  duration.CMTimeEpoch epoch = v19;
  end.CMTimeValue value = v21;
  end.CMTimeScale timescale = v23;
  end.CMTimeFlags flags = v24;
  CMTimeRangeMake(&start, &duration, &end);
  CMTimeValue v25 = start.start.value;
  CMTimeScale v26 = start.start.timescale;
  CMTimeValue v47 = start.duration.value;
  CMTimeScale v28 = start.duration.timescale;
  CMTimeFlags v27 = start.duration.flags;
  CMTimeEpoch v29 = start.duration.epoch;
  CMTimeFlags v60 = start.start.flags;
  CMTimeEpoch v59 = start.start.epoch;
  duration.CMTimeValue value = value;
  duration.CMTimeScale timescale = timescale;
  duration.CMTimeFlags flags = flags;
  duration.CMTimeEpoch epoch = epoch;
  if (CMTimeCompare(&start.start, &duration) < 0)
  {
    end.CMTimeEpoch epoch = epoch;
    duration.CMTimeValue value = v25;
    duration.CMTimeScale timescale = v26;
    duration.CMTimeFlags flags = v60;
    duration.CMTimeEpoch epoch = v59;
    end.CMTimeValue value = value;
    end.CMTimeScale timescale = timescale;
    end.CMTimeFlags flags = flags;
  }
  else
  {
    duration.CMTimeScale timescale = v26;
    duration.CMTimeFlags flags = v60;
    duration.CMTimeEpoch epoch = v59;
    end.CMTimeValue value = v25;
    end.CMTimeScale timescale = v26;
    end.CMTimeFlags flags = v60;
    end.CMTimeEpoch epoch = v59;
    duration.CMTimeValue value = v25;
  }
  CMTimeRangeFromTimeToTime(&start, &duration, &end);
  uint64_t v30 = *(void *)&start.start.timescale;
  CMTimeEpoch v52 = start.start.epoch;
  CMTimeValue v53 = start.start.value;
  uint64_t v31 = *(void *)&start.duration.timescale;
  CMTimeEpoch v50 = start.duration.epoch;
  CMTimeValue v51 = start.duration.value;
  CMTimeValue v49 = v25;
  start.start.CMTimeValue value = v25;
  CMTimeScale v48 = v26;
  start.start.CMTimeScale timescale = v26;
  start.start.CMTimeFlags flags = v60;
  start.start.CMTimeEpoch epoch = v59;
  start.duration.CMTimeValue value = v47;
  start.duration.CMTimeScale timescale = v28;
  start.duration.CMTimeFlags flags = v27;
  start.duration.CMTimeEpoch epoch = v29;
  CMTimeRangeGetEnd(&duration, &start);
  CMTimeValue v32 = duration.value;
  CMTimeEpoch v33 = duration.epoch;
  uint64_t v34 = *(void *)&duration.timescale;
  start.start.CMTimeValue value = value;
  start.start.CMTimeScale timescale = timescale;
  start.start.CMTimeFlags flags = flags;
  start.start.CMTimeEpoch epoch = epoch;
  start.duration.CMTimeValue value = v57;
  start.duration.CMTimeScale timescale = v56;
  start.duration.CMTimeFlags flags = v55;
  start.duration.CMTimeEpoch epoch = v54;
  CMTimeRangeGetEnd(&duration, &start);
  start.start.CMTimeValue value = v32;
  *(void *)&start.start.CMTimeScale timescale = v34;
  start.start.CMTimeEpoch epoch = v33;
  if (CMTimeCompare(&start.start, &duration) < 1)
  {
    start.start.CMTimeValue value = v49;
    start.start.CMTimeScale timescale = v48;
    start.start.CMTimeFlags flags = v60;
    start.start.CMTimeEpoch epoch = v59;
    start.duration.CMTimeValue value = v47;
    *(void *)&start.duration.CMTimeScale timescale = __PAIR64__(v27, v28);
    start.duration.CMTimeEpoch epoch = v29;
  }
  else
  {
    start.start.CMTimeValue value = value;
    start.start.CMTimeScale timescale = timescale;
    start.start.CMTimeFlags flags = flags;
    start.start.CMTimeEpoch epoch = epoch;
    start.duration.CMTimeValue value = v57;
    start.duration.CMTimeScale timescale = v56;
    start.duration.CMTimeFlags flags = v55;
    start.duration.CMTimeEpoch epoch = v54;
  }
  CMTimeRangeGetEnd(&duration, &start);
  CMTimeValue v35 = duration.value;
  CMTimeEpoch v36 = duration.epoch;
  uint64_t v37 = *(void *)&duration.timescale;
  start.start.CMTimeValue value = v49;
  *(void *)&start.start.CMTimeScale timescale = __PAIR64__(v60, v48);
  start.start.CMTimeEpoch epoch = v59;
  start.duration.CMTimeValue value = v47;
  *(void *)&start.duration.CMTimeScale timescale = __PAIR64__(v27, v28);
  start.duration.CMTimeEpoch epoch = v29;
  CMTimeRangeGetEnd(&duration, &start);
  CMTimeValue v38 = duration.value;
  uint64_t v39 = *(void *)&duration.timescale;
  end.CMTimeEpoch epoch = duration.epoch;
  duration.CMTimeValue value = v35;
  *(void *)&duration.CMTimeScale timescale = v37;
  duration.CMTimeEpoch epoch = v36;
  end.CMTimeValue value = v38;
  *(void *)&end.CMTimeScale timescale = v39;
  CMTimeRangeFromTimeToTime(&start, &duration, &end);
  CMTimeValue v40 = start.start.value;
  uint64_t v41 = *(void *)&start.start.timescale;
  CMTimeEpoch v42 = start.start.epoch;
  start.start.CMTimeValue value = v53;
  *(void *)&start.start.CMTimeScale timescale = v30;
  start.start.CMTimeEpoch epoch = v52;
  start.duration.CMTimeValue value = v51;
  *(void *)&start.duration.CMTimeScale timescale = v31;
  start.duration.CMTimeEpoch epoch = v50;
  CMTimeRangeGetEnd(&duration, &start);
  end.CMTimeEpoch epoch = v42;
  end.CMTimeValue value = v40;
  *(void *)&end.CMTimeScale timescale = v41;
  CMTimeRangeFromTimeToTime(&start, &duration, &end);
  CMTimeEpoch v43 = start.duration.epoch;
  double result = *(double *)&start.start.timescale;
  uint64_t v45 = *(void *)&start.duration.timescale;
  long long v46 = *(_OWORD *)&start.start.epoch;
  *(void *)a4 = start.start.value;
  *(double *)(a4 + 8) = result;
  *(_OWORD *)(a4 + 16) = v46;
  *(void *)(a4 + 32) = v45;
  *(void *)(a4 + 40) = v43;
  return result;
}

uint64_t sub_1DC8AC760@<X0>(CMTimeRange *a1@<X0>, CMTimeRange *a2@<X1>, uint64_t a3@<X8>)
{
  sub_1DC8AEAA8(v21);
  sub_1DC8AEAD8((uint64_t)v21, (uint64_t)v20);
  sub_1DC8ABD80(a1, a2, v3, (uint64_t)v20);
  sub_1DC8AEAD8((uint64_t)v20, (uint64_t)v22);
  sub_1DC8AEAD8((uint64_t)v22, (uint64_t)v23);
  uint64_t result = sub_1DC8AEB40((uint64_t)v23);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = v34;
    uint64_t v9 = v23[1];
    uint64_t v10 = v25;
    uint64_t v11 = v27;
    uint64_t v12 = v29;
    uint64_t v13 = v31;
    uint64_t v14 = v33;
    long long v15 = v24;
    long long v16 = v26;
    long long v17 = v28;
    long long v18 = v30;
    long long v19 = v32;
    *(void *)a3 = v23[0];
    *(void *)(a3 + 8) = v9;
    *(_OWORD *)(a3 + 16) = v15;
    *(void *)(a3 + 32) = v10;
    *(_OWORD *)(a3 + 40) = v16;
    *(void *)(a3 + 56) = v11;
    *(_OWORD *)(a3 + 64) = v17;
    *(void *)(a3 + 80) = v12;
    *(_OWORD *)(a3 + 88) = v18;
    *(void *)(a3 + 104) = v13;
    *(_OWORD *)(a3 + 112) = v19;
    *(void *)(a3 + 128) = v14;
    *(void *)(a3 + 136) = v8;
  }
  return result;
}

double sub_1DC8AC858(CMTimeRange *a1, CMTimeRange *a2)
{
  unsigned int v3 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  unsigned int v4 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
  uint64_t v5 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  uint64_t v23 = *MEMORY[0x1E4F1F9F8];
  double v24 = COERCE_DOUBLE(__PAIR64__(v4, v3));
  *(void *)&long long v25 = v5;
  *((void *)&v25 + 1) = v23;
  uint64_t v26 = __PAIR64__(v4, v3);
  uint64_t v27 = v5;
  double v6 = sub_1DC8AC26C(a1, a2, v2, (uint64_t)&v23);
  return sub_1DC8AF070(v7, v8, v9, v10, v11, v12, v13, v14, v6, v15, v16, v17, v18, v19, v20, v21, v23, v24, v25,
           v26,
           v27);
}

void sub_1DC8AC970(CMTimeValue a1@<X0>, uint64_t a2@<X1>, CMTimeEpoch a3@<X2>, CMTimeValue *a4@<X3>, uint64_t a5@<X8>)
{
  CMTimeEpoch v7 = a4[2];
  v34.start.CMTimeValue value = *a4;
  *(void *)&v34.start.CMTimeScale timescale = a4[1];
  v34.start.CMTimeEpoch epoch = v7;
  rhs.CMTimeValue value = a1;
  *(void *)&rhs.CMTimeScale timescale = a2;
  rhs.CMTimeEpoch epoch = a3;
  CMTimeAdd(&duration, &v34.start, &rhs);
  double v16 = sub_1DC8AF0EC(v8, v9, v10, v11, v12, v13, v14, v15, *(double *)&v34.start.value, *(double *)&v34.start.timescale, *(double *)&v34.start.epoch, *(double *)&v34.duration.value, *(double *)&v34.duration.timescale, *(double *)&v34.duration.epoch, *(double *)&duration.value, *(double *)&duration.timescale);
  CMTimeValue v17 = a4[3];
  CMTimeEpoch v18 = a4[5];
  rhs.CMTimeValue value = v19;
  *(double *)&rhs.CMTimeScale timescale = v16;
  rhs.CMTimeEpoch epoch = v20;
  duration.CMTimeValue value = v17;
  *(void *)&duration.CMTimeScale timescale = a4[4];
  duration.CMTimeEpoch epoch = v18;
  CMTimeRangeMake(&v34, &rhs, &duration);
  double v29 = sub_1DC8AF0FC(v21, v22, v23, v24, v25, v26, v27, v28, *(double *)&v34.start.value, *(double *)&v34.start.timescale);
  *(void *)a5 = v30;
  *(double *)(a5 + 8) = v29;
  *(_OWORD *)(a5 + 16) = v31;
  *(void *)(a5 + 32) = v32;
  *(void *)(a5 + 40) = v33;
}

uint64_t sub_1DC8ACAB0(uint64_t a1, uint64_t a2, CMTimeEpoch a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a4 + 16);
  uint64_t v9 = MEMORY[0x1E4FBC860];
  if (v8)
  {
    sub_1DC8AF120();
    uint64_t v24 = v9;
    sub_1DC897B3C();
    double v10 = (CMTimeEpoch *)(v6 + 48);
    do
    {
      CMTimeValue v11 = *(v10 - 2);
      CMTimeEpoch v12 = *v10;
      *(void *)&lhs.CMTimeScale timescale = *(v10 - 1);
      lhs.CMTimeEpoch epoch = v12;
      rhs.CMTimeValue value = v5;
      rhs.CMTimeScale timescale = v4;
      rhs.CMTimeFlags flags = v7;
      rhs.CMTimeEpoch epoch = a3;
      lhs.CMTimeValue value = v11;
      CMTimeAdd(&v21, &lhs, &rhs);
      CMTimeValue value = v21.value;
      uint64_t v14 = *(void *)&v21.timescale;
      CMTimeEpoch epoch = v21.epoch;
      uint64_t v24 = v9;
      unint64_t v17 = *(void *)(v9 + 16);
      unint64_t v16 = *(void *)(v9 + 24);
      if (v17 >= v16 >> 1)
      {
        sub_1DC8AF114(v16);
        sub_1DC897B3C();
        uint64_t v9 = v24;
      }
      *(void *)(v9 + 16) = v17 + 1;
      CMTimeEpoch v18 = (void *)(v9 + 24 * v17);
      uint64_t v18[4] = value;
      v10 += 3;
      v18[5] = v14;
      v18[6] = epoch;
      --v8;
    }
    while (v8);
  }
  return v9;
}

uint64_t sub_1DC8ACBD0(uint64_t a1, uint64_t a2, CMTimeEpoch a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a4 + 16);
  uint64_t v9 = MEMORY[0x1E4FBC860];
  if (v8)
  {
    sub_1DC8AF120();
    uint64_t v31 = v9;
    sub_1DC897C2C();
    double v10 = (CMTimeEpoch *)(v6 + 72);
    do
    {
      CMTimeEpoch v11 = *(v10 - 3);
      CMTimeValue v12 = *(v10 - 2);
      CMTimeEpoch v13 = *v10;
      lhs.start.CMTimeValue value = *(v10 - 5);
      *(void *)&lhs.start.CMTimeScale timescale = *(v10 - 4);
      lhs.start.CMTimeEpoch epoch = v11;
      rhs.CMTimeValue value = v5;
      rhs.CMTimeScale timescale = v4;
      rhs.CMTimeFlags flags = v7;
      rhs.CMTimeEpoch epoch = a3;
      uint64_t v14 = *(v10 - 1);
      CMTimeAdd(&duration, &lhs.start, &rhs);
      CMTimeEpoch epoch = duration.epoch;
      duration.CMTimeEpoch epoch = v13;
      rhs.CMTimeValue value = duration.value;
      *(void *)&rhs.CMTimeScale timescale = *(void *)&duration.timescale;
      rhs.CMTimeEpoch epoch = epoch;
      duration.CMTimeValue value = v12;
      *(void *)&duration.CMTimeScale timescale = v14;
      CMTimeRangeMake(&lhs, &rhs, &duration);
      CMTimeValue value = lhs.start.value;
      uint64_t v17 = *(void *)&lhs.start.timescale;
      long long v18 = *(_OWORD *)&lhs.start.epoch;
      uint64_t v19 = *(void *)&lhs.duration.timescale;
      CMTimeEpoch v20 = lhs.duration.epoch;
      uint64_t v31 = v9;
      unint64_t v22 = *(void *)(v9 + 16);
      unint64_t v21 = *(void *)(v9 + 24);
      if (v22 >= v21 >> 1)
      {
        sub_1DC8AF114(v21);
        long long v26 = v24;
        sub_1DC897C2C();
        long long v18 = v26;
        uint64_t v9 = v31;
      }
      *(void *)(v9 + 16) = v22 + 1;
      uint64_t v23 = v9 + 48 * v22;
      *(void *)(v23 + 32) = value;
      v10 += 6;
      *(void *)(v23 + 40) = v17;
      *(_OWORD *)(v23 + 48) = v18;
      *(void *)(v23 + 64) = v19;
      *(void *)(v23 + 72) = v20;
      --v8;
    }
    while (v8);
  }
  return v9;
}

id sub_1DC8ACD44(void *a1)
{
  id v2 = objc_msgSend(a1, sel_sampleTime);
  id result = objc_msgSend(a1, sel_sampleRate);
  if ((~*(void *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v4 <= -2147483650.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v4 < 2147483650.0)
  {
    CMTimeMake(&v5, (int64_t)v2, (int)v4);
    return (id)v5.value;
  }
LABEL_7:
  __break(1u);
  return result;
}

CMTimeEpoch sub_1DC8ACDE0(CMTimeValue a1, uint64_t a2, CMTimeEpoch value, uint64_t a4, uint64_t a5)
{
  id v10 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithLongLong_, a4);
  id v11 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInt_, a5);
  sub_1DCA895DC();
  if (v5)
  {
  }
  else
  {
    sub_1DCA895DC();
    sub_1DC8AE910(v11);
    int32_t v14 = v13;
    sub_1DC8AE910(v10);
    time.CMTimeValue value = a1;
    *(void *)&time.CMTimeScale timescale = a2;
    time.CMTimeEpoch epoch = value;
    CMTimeMultiplyByRatio(&v16, &time, v14, v15);
    CMTimeValue value = v16.value;
  }
  return value;
}

void *sub_1DC8ACEFC@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X1>, uint64_t a2@<X8>)
{
  id result = a1(&v11);
  int v4 = v12;
  int v5 = v13;
  uint64_t v6 = v14;
  uint64_t v7 = v15;
  int v8 = v16;
  int v9 = v17;
  uint64_t v10 = v18;
  *(void *)a2 = v11;
  *(_DWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 12) = v5;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v7;
  *(_DWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 36) = v9;
  *(void *)(a2 + 40) = v10;
  return result;
}

CMTimeEpoch sub_1DC8ACFB8(CMTimeValue a1, uint64_t a2, CMTimeEpoch a3, uint64_t a4, uint64_t a5, CMTimeEpoch a6, CMTimeValue a7, int a8, CMTimeEpoch a9, CMTimeRoundingMethod method)
{
  v30.CMTimeEpoch epoch = a9;
  time.CMTimeValue value = a1;
  *(void *)&time.CMTimeScale timescale = a2;
  time.CMTimeEpoch epoch = a3;
  CMTimeValue v32 = a7;
  v30.CMTimeValue value = a7;
  sub_1DC8AF134();
  CMTimeSubtract(v15, v13, v14);
  type metadata accessor for SNTimeUtils();
  CMTimeEpoch result = sub_1DC8ACDE0(v27, v28, v29, a4, a5);
  if (!v10)
  {
    time.CMTimeValue value = result;
    *(void *)&time.CMTimeScale timescale = v17;
    time.CMTimeEpoch epoch = v18;
    CMTimeConvertScale(&v30, &time, 1, method);
    uint64_t v19 = (void *)sub_1DCB89178();
    sub_1DC8AE910(v19);
    int32_t v21 = v20;

    time.CMTimeValue value = a4;
    *(void *)&time.CMTimeScale timescale = a5;
    time.CMTimeEpoch epoch = a6;
    CMTimeMultiply(&v30, &time, v21);
    CMTimeEpoch epoch = v30.epoch;
    v30.CMTimeEpoch epoch = a9;
    time.CMTimeValue value = v30.value;
    *(void *)&time.CMTimeScale timescale = *(void *)&v30.timescale;
    time.CMTimeEpoch epoch = epoch;
    v30.CMTimeValue value = v32;
    sub_1DC8AF134();
    CMTimeAdd(v25, v23, v24);
    return v27;
  }
  return result;
}

double sub_1DC8AD104@<D0>(CMTimeValue a1@<X0>, uint64_t a2@<X1>, CMTimeEpoch a3@<X2>, CMTimeValue a4@<X3>, uint64_t a5@<X4>, CMTimeEpoch a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, CMTimeEpoch a10, CMTimeRoundingMethod method)
{
  type metadata accessor for SNTimeUtils();
  CMTimeEpoch v18 = a3;
  CMTimeEpoch v31 = a3;
  CMTimeValue v19 = a1;
  CMTimeEpoch v20 = sub_1DC8ACFB8(a4, a5, a6, a7, a8, a10, a1, a2, v31, method);
  if (!v37)
  {
    CMTimeValue v24 = v20;
    CMTimeScale v25 = v21;
    CMTimeEpoch v26 = v22;
    time1.start.CMTimeValue value = v19;
    unint64_t v27 = HIDWORD(v21);
    *(void *)&time1.start.CMTimeScale timescale = a2;
    time1.start.CMTimeEpoch epoch = v18;
    time2.CMTimeValue value = v20;
    *(void *)&time2.CMTimeScale timescale = v21;
    time2.CMTimeEpoch epoch = v22;
    if (CMTimeCompare(&time1.start, &time2) < 1)
    {
      end.CMTimeEpoch epoch = v26;
      time2.CMTimeValue value = v19;
      *(void *)&time2.CMTimeScale timescale = a2;
      time2.CMTimeEpoch epoch = v18;
      end.CMTimeValue value = v24;
      end.CMTimeScale timescale = v25;
      end.CMTimeFlags flags = v27;
      CMTimeRangeFromTimeToTime(&time1, &time2, &end);
      CMTimeEpoch epoch = time1.duration.epoch;
      double result = *(double *)&time1.start.timescale;
      uint64_t v29 = *(void *)&time1.duration.timescale;
      long long v30 = *(_OWORD *)&time1.start.epoch;
      *(void *)a9 = time1.start.value;
      *(double *)(a9 + 8) = result;
      *(_OWORD *)(a9 + 16) = v30;
      *(void *)(a9 + 32) = v29;
      *(void *)(a9 + 40) = epoch;
    }
    else
    {
      type metadata accessor for SNError();
      sub_1DCA14B2C(0xD000000000000017, 0x80000001DCB90E90, 1, 0, 0xD00000000000001ELL, 0x80000001DCB90E70);
      swift_willThrow();
    }
  }
  return result;
}

void sub_1DC8AD2A8(CMTimeValue a1, uint64_t a2, CMTimeEpoch a3, CMTimeValue a4, uint64_t a5, CMTimeEpoch a6, uint64_t a7, uint64_t a8, CMTimeEpoch a9, CMTimeRoundingMethod a10, void (*a11)(void *))
{
  sub_1DC8AD104(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)v23, a9, a10);
  if (!v11)
  {
    CMTimeValue v12 = v23[0];
    uint64_t v13 = v23[1];
    CMTimeEpoch v15 = v23[2];
    CMTimeValue v14 = v24;
    CMTimeScale v16 = v25;
    CMTimeFlags v17 = v26;
    CMTimeEpoch v18 = v27;
    CMTimeValue v19 = *MEMORY[0x1E4F1FA48];
    CMTimeEpoch v20 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    time1.start.CMTimeValue value = v24;
    time1.start.CMTimeScale timescale = v25;
    time1.start.CMTimeFlags flags = v26;
    time1.start.CMTimeEpoch epoch = v27;
    time2.CMTimeValue value = v19;
    *(void *)&time2.CMTimeScale timescale = *(void *)(MEMORY[0x1E4F1FA48] + 8);
    time2.CMTimeEpoch epoch = v20;
    if (CMTimeCompare(&time1.start, &time2) >= 1) {
      a11(v23);
    }
    time1.start.CMTimeValue value = v12;
    *(void *)&time1.start.CMTimeScale timescale = v13;
    time1.start.CMTimeEpoch epoch = v15;
    time1.duration.CMTimeValue value = v14;
    time1.duration.CMTimeScale timescale = v16;
    time1.duration.CMTimeFlags flags = v17;
    time1.duration.CMTimeEpoch epoch = v18;
    CMTimeRangeGetEnd(&time2, &time1);
  }
}

uint64_t sub_1DC8AD3A0(uint64_t a1, CMTimeValue a2, unint64_t a3, CMTimeEpoch a4)
{
  CMTimeScale v5 = a3;
  CMTimeValue v8 = *(void *)a1;
  CMTimeEpoch v9 = *(void *)(a1 + 40);
  time.CMTimeEpoch epoch = a4;
  range.start.CMTimeValue value = v8;
  unint64_t v10 = HIDWORD(a3);
  *(void *)&range.start.CMTimeScale timescale = *(void *)(a1 + 8);
  *(_OWORD *)&range.start.CMTimeEpoch epoch = *(_OWORD *)(a1 + 16);
  *(void *)&range.duration.CMTimeScale timescale = *(void *)(a1 + 32);
  range.duration.CMTimeEpoch epoch = v9;
  time.CMTimeValue value = a2;
  *(void *)&time.CMTimeScale timescale = a3;
  uint64_t result = CMTimeRangeContainsTime(&range, &time);
  if (!result)
  {
    type metadata accessor for SNError();
    range.start.CMTimeValue value = 0;
    *(void *)&range.start.CMTimeScale timescale = 0xE000000000000000;
    sub_1DCB88A98();
    time.CMTimeValue value = range.start.value;
    *(void *)&time.CMTimeScale timescale = *(void *)&range.start.timescale;
    sub_1DCB87A18();
    range.start.CMTimeValue value = a2;
    range.start.CMTimeScale timescale = v5;
    range.start.CMTimeFlags flags = v10;
    range.start.CMTimeEpoch epoch = a4;
    type metadata accessor for CMTime(0);
    sub_1DC8AF15C();
    sub_1DCB87A18();
    long long v12 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)a1;
    *(_OWORD *)&range.start.CMTimeEpoch epoch = v12;
    *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(a1 + 32);
    type metadata accessor for CMTimeRange(0);
    sub_1DC8AF15C();
    sub_1DCB87A18();
    sub_1DC8AF09C(time.value, (uint64_t)"com.apple.SoundAnalysis");
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1DC8AD51C(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 8) != a2 || *(_DWORD *)(result + 32) != a2)
  {
    type metadata accessor for SNError();
    sub_1DCB88A98();
    sub_1DCB87A18();
    sub_1DCB88F98();
    sub_1DCB87A18();
    swift_bridgeObjectRelease();
    sub_1DC8AF09C(0, (uint64_t)"com.apple.SoundAnalysis");
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  return result;
}

void sub_1DC8AD60C(CMTimeValue a1, uint64_t a2, CMTimeEpoch a3, unint64_t a4)
{
  CMTimeScale v5 = sub_1DCB0F2BC(0, a4);
  unint64_t v6 = v5[2];
  if (v6)
  {
    uint64_t v20 = MEMORY[0x1E4FBC860];
    sub_1DC897B3C();
    uint64_t v7 = 0;
    uint64_t v8 = v20;
    while (1)
    {
      unint64_t v9 = v5[v7 + 4];
      if (v9 >> 31) {
        break;
      }
      time.CMTimeValue value = a1;
      *(void *)&time.CMTimeScale timescale = a2;
      time.CMTimeEpoch epoch = a3;
      CMTimeMultiply(&v18, &time, v9);
      CMTimeValue value = v18.value;
      uint64_t v11 = *(void *)&v18.timescale;
      CMTimeEpoch epoch = v18.epoch;
      uint64_t v20 = v8;
      unint64_t v14 = *(void *)(v8 + 16);
      unint64_t v13 = *(void *)(v8 + 24);
      if (v14 >= v13 >> 1)
      {
        sub_1DC8AF114(v13);
        sub_1DC897B3C();
        uint64_t v8 = v20;
      }
      *(void *)(v8 + 16) = v14 + 1;
      CMTimeEpoch v15 = (void *)(v8 + 24 * v14);
      v15[4] = value;
      ++v7;
      v15[5] = v11;
      void v15[6] = epoch;
      if (v6 == v7)
      {
        swift_release();
        return;
      }
    }
    __break(1u);
  }
  else
  {
    swift_release();
  }
}

uint64_t sub_1DC8AD75C(uint64_t a1, uint64_t a2, CMTimeEpoch a3, CMTimeValue *a4)
{
  CMTimeValue v9 = *a4;
  uint64_t v8 = a4[1];
  uint64_t v10 = v8;
  CMTimeEpoch v11 = a4[2];
  CMTimeValue v12 = a4[3];
  CMTimeValue v13 = a4[4];
  CMTimeEpoch v14 = a4[5];
  type metadata accessor for SNTimeUtils();
  sub_1DC8ACDE0(v9, v8, v11, a1, a2);
  if (v4) {
    return a3;
  }
  sub_1DC8AF0CC();
  CMTimeConvertScale(v17, v15, v16, kCMTimeRoundingMethod_RoundTowardPositiveInfinity);
  CMTimeValue value = v30.value;
  range.start.CMTimeValue value = v9;
  *(void *)&range.start.CMTimeScale timescale = v10;
  range.start.CMTimeEpoch epoch = v11;
  range.duration.CMTimeValue value = v12;
  *(void *)&range.duration.CMTimeScale timescale = v13;
  range.duration.CMTimeEpoch epoch = v14;
  CMTimeRangeGetEnd(&v30, &range);
  sub_1DC8ACDE0(v30.value, *(uint64_t *)&v30.timescale, v30.epoch, a1, a2);
  sub_1DC8AF0CC();
  CMTimeConvertScale(v22, v20, v21, kCMTimeRoundingMethod_RoundTowardNegativeInfinity);
  CMTimeValue v23 = v30.value - value;
  if (v30.value < value) {
    return MEMORY[0x1E4FBC860];
  }
  if (__OFSUB__(v30.value, value))
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v24 = v23 + 1;
  if (__OFADD__(v23, 1))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (value < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (value > 0x7FFFFFFF)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  range.start.CMTimeValue value = a1;
  *(void *)&range.start.CMTimeScale timescale = a2;
  range.start.CMTimeEpoch epoch = a3;
  CMTimeMultiply(&v30, &range.start, value);
  if ((v24 & 0x8000000000000000) == 0)
  {
    CMTimeValue v25 = v30.value;
    uint64_t v26 = *(void *)&v30.timescale;
    CMTimeEpoch epoch = v30.epoch;
    sub_1DC8AD60C(a1, a2, a3, v24);
    a3 = sub_1DC8ACAB0(v25, v26, epoch, v28);
    swift_bridgeObjectRelease();
    return a3;
  }
LABEL_16:
  sub_1DC8AF148();
  uint64_t result = sub_1DCB88C58();
  __break(1u);
  return result;
}

uint64_t sub_1DC8AD948(CMTimeValue *a1, uint64_t a2, uint64_t a3, CMTimeEpoch a4)
{
  uint64_t v7 = sub_1DC8AD75C(a2, a3, a4, a1);
  if (!v4)
  {
    uint64_t v8 = v7;
    sub_1DC87E988(&qword_1EAA9E2D8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1DCBB9440;
    sub_1DC87E988(&qword_1EAAA6960);
    uint64_t v10 = swift_allocObject();
    long long v11 = *(_OWORD *)a1;
    *(_OWORD *)(v10 + 16) = xmmword_1DCBB93B0;
    *(_OWORD *)(v10 + 32) = v11;
    *(void *)(v10 + 48) = a1[2];
    *(void *)(inited + 32) = v10;
    *(void *)(inited + 40) = v8;
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1DCBB93B0;
    *(void *)(v12 + 32) = sub_1DCB883C8();
    *(_DWORD *)(v12 + 40) = v13;
    *(_DWORD *)(v12 + 44) = v14;
    *(void *)(v12 + 48) = v15;
    *(void *)(inited + 48) = v12;
    swift_bridgeObjectRetain();
    uint64_t v16 = MEMORY[0x1E4FBC860];
    for (uint64_t i = 32; i != 56; i += 8)
    {
      uint64_t v18 = *(void *)(inited + i);
      uint64_t v19 = *(void *)(v18 + 16);
      uint64_t v20 = *(void *)(v16 + 16);
      if (__OFADD__(v20, v19))
      {
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        sub_1DC8AF148();
        uint64_t result = sub_1DCB88D08();
        __break(1u);
        return result;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!swift_isUniquelyReferenced_nonNull_native() || v20 + v19 > *(void *)(v16 + 24) >> 1)
      {
        sub_1DCA72F38();
        uint64_t v16 = v21;
      }
      if (*(void *)(v18 + 16))
      {
        uint64_t v22 = *(void *)(v16 + 16);
        if ((*(void *)(v16 + 24) >> 1) - v22 < v19) {
          goto LABEL_38;
        }
        CMTimeValue v23 = (void *)(v16 + 24 * v22 + 32);
        if (v18 + 32 < (unint64_t)v23 + 24 * v19 && (unint64_t)v23 < v18 + 32 + 24 * v19) {
          goto LABEL_40;
        }
        memcpy(v23, (const void *)(v18 + 32), 24 * v19);
        if (v19)
        {
          uint64_t v25 = *(void *)(v16 + 16);
          BOOL v26 = __OFADD__(v25, v19);
          uint64_t v27 = v25 + v19;
          if (v26) {
            goto LABEL_39;
          }
          *(void *)(v16 + 16) = v27;
        }
      }
      else if (v19)
      {
        goto LABEL_37;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    sub_1DC937700();
    uint64_t v28 = swift_bridgeObjectRetain();
    uint64_t v29 = sub_1DC8AEE20(v28, 1);
    swift_bridgeObjectRelease();
    uint64_t v30 = sub_1DCAE805C(v29);
    swift_release();
    swift_bridgeObjectRetain();
    uint64_t v31 = sub_1DC8AE698(1, v16);
    uint64_t v32 = sub_1DCAE805C(v31);
    uint64_t v33 = swift_bridgeObjectRelease();
    unint64_t v37 = *(void *)(v32 + 16);
    unint64_t v38 = *(void *)(v30 + 16);
    if (v37 <= v38) {
      uint64_t v39 = *(void *)(v30 + 16);
    }
    else {
      uint64_t v39 = *(void *)(v32 + 16);
    }
    sub_1DC8AF17C(v33, v34, v35, v36, v37 - v39);
    sub_1DCB17EC8();
    sub_1DC8AF17C(v40, v41, v42, v43, v38 - v39);
    sub_1DCB17EC8();
    uint64_t v55 = sub_1DC8AB02C(v32, v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v45 = *(void *)(v55 + 16);
    if (v45)
    {
      long long v46 = (unsigned char *)(swift_bridgeObjectRetain() + 80);
      uint64_t v5 = MEMORY[0x1E4FBC860];
      do
      {
        if ((*v46 & 1) == 0)
        {
          uint64_t v48 = *((void *)v46 - 6);
          uint64_t v47 = *((void *)v46 - 5);
          long long v56 = *((_OWORD *)v46 - 2);
          uint64_t v50 = *((void *)v46 - 2);
          uint64_t v49 = *((void *)v46 - 1);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1DCA72E60();
            uint64_t v5 = v53;
          }
          unint64_t v51 = *(void *)(v5 + 16);
          if (v51 >= *(void *)(v5 + 24) >> 1)
          {
            sub_1DCA72E60();
            uint64_t v5 = v54;
          }
          *(void *)(v5 + 16) = v51 + 1;
          uint64_t v52 = v5 + 48 * v51;
          *(void *)(v52 + 32) = v48;
          *(void *)(v52 + 40) = v47;
          *(_OWORD *)(v52 + 48) = v56;
          *(void *)(v52 + 64) = v50;
          *(void *)(v52 + 72) = v49;
        }
        v46 += 52;
        --v45;
      }
      while (v45);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v5 = MEMORY[0x1E4FBC860];
    }
    swift_bridgeObjectRelease();
  }
  return v5;
}

int64_t sub_1DC8ADD78(CMTimeValue *a1, uint64_t a2, uint64_t a3, CMTimeEpoch a4, uint64_t a5, uint64_t timescale, CMTimeEpoch a7)
{
  int64_t result = -a5;
  if (__OFSUB__(0, a5))
  {
    __break(1u);
  }
  else
  {
    CMTimeMake(&v46.start, result, timescale);
    CMTimeValue value = v46.start.value;
    CMTimeEpoch epoch = v46.start.epoch;
    uint64_t v18 = *(void *)&v46.start.timescale;
    CMTimeEpoch v19 = a1[2];
    v46.start.CMTimeValue value = *a1;
    *(void *)&v46.start.CMTimeScale timescale = a1[1];
    v46.start.CMTimeEpoch epoch = v19;
    rhs.CMTimeValue value = value;
    *(void *)&rhs.CMTimeScale timescale = v18;
    rhs.CMTimeEpoch epoch = epoch;
    CMTimeAdd(&duration, &v46.start, &rhs);
    double v28 = sub_1DC8AF0EC(v20, v21, v22, v23, v24, v25, v26, v27, *(double *)&v46.start.value, *(double *)&v46.start.timescale, *(double *)&v46.start.epoch, *(double *)&v46.duration.value, *(double *)&v46.duration.timescale, *(double *)&v46.duration.epoch, *(double *)&duration.value, *(double *)&duration.timescale);
    CMTimeValue v29 = a1[3];
    duration.CMTimeEpoch epoch = a1[5];
    rhs.CMTimeValue value = v30;
    *(double *)&rhs.CMTimeScale timescale = v28;
    rhs.CMTimeEpoch epoch = v31;
    duration.CMTimeValue value = v29;
    *(void *)&duration.CMTimeScale timescale = a1[4];
    CMTimeRangeMake(&v46, &rhs, &duration);
    double v40 = sub_1DC8AF0FC(v32, v33, v34, v35, v36, v37, v38, v39, *(double *)&v46.start.value, *(double *)&v46.start.timescale);
    v49[0] = v41;
    *(double *)&v49[1] = v40;
    long long v50 = v42;
    uint64_t v51 = v43;
    uint64_t v52 = v44;
    uint64_t v45 = sub_1DC8AD948(v49, a2, a3, a4);
    if (!v7)
    {
      a7 = sub_1DC8ACBD0(a5, timescale, a7, v45);
      swift_bridgeObjectRelease();
    }
    return a7;
  }
  return result;
}

CMTimeEpoch sub_1DC8ADEC8(CMTimeValue a1, uint64_t a2, CMTimeEpoch a3, uint64_t a4)
{
  lhs.CMTimeEpoch epoch = a3;
  CMTimeValue v6 = *(void *)a4;
  CMTimeScale v7 = *(_DWORD *)(a4 + 8);
  CMTimeFlags v8 = *(_DWORD *)(a4 + 12);
  CMTimeEpoch v9 = *(void *)(a4 + 16);
  rhs.CMTimeEpoch epoch = v9;
  lhs.CMTimeValue value = a1;
  *(void *)&lhs.CMTimeScale timescale = a2;
  CMTimeValue v20 = v6;
  rhs.CMTimeValue value = v6;
  rhs.CMTimeScale timescale = v7;
  rhs.CMTimeFlags flags = v8;
  CMTimeSubtract(&v17, &lhs, &rhs);
  CMTimeValue value = v17.value;
  CMTimeScale timescale = v17.timescale;
  CMTimeFlags flags = v17.flags;
  CMTimeEpoch epoch = v17.epoch;
  CMTimeEpoch result = sub_1DC8ACFB8(v17.value, v17.timescale | ((unint64_t)v17.flags << 32), v17.epoch, *(void *)(a4 + 24), *(void *)(a4 + 32), *(void *)(a4 + 40), *MEMORY[0x1E4F1FA48], *(void *)(MEMORY[0x1E4F1FA48] + 8), *(void *)(MEMORY[0x1E4F1FA48] + 16), kCMTimeRoundingMethod_RoundTowardNegativeInfinity);
  if (!v4)
  {
    rhs.CMTimeEpoch epoch = v16;
    lhs.CMTimeValue value = value;
    lhs.CMTimeScale timescale = timescale;
    lhs.CMTimeFlags flags = flags;
    lhs.CMTimeEpoch epoch = epoch;
    rhs.CMTimeValue value = result;
    *(void *)&rhs.CMTimeScale timescale = v15;
    CMTimeSubtract(&v17, &lhs, &rhs);
    CMTime rhs = v17;
    lhs.CMTimeValue value = v20;
    lhs.CMTimeScale timescale = v7;
    lhs.CMTimeFlags flags = v8;
    lhs.CMTimeEpoch epoch = v9;
    CMTimeAdd(&v17, &lhs, &rhs);
    return v17.value;
  }
  return result;
}

uint64_t sub_1DC8AE000(CMTimeValue *a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t)a2;
  int64_t v5 = sub_1DC8ADD78(a1, a2[3], a2[4], a2[5], *a2, a2[1], a2[2]);
  if (!v3)
  {
    int64_t v7 = v5;
    uint64_t v8 = *(void *)(v5 + 16);
    if (v8)
    {
      uint64_t v25 = MEMORY[0x1E4FBC860];
      sub_1DC897C2C();
      uint64_t v2 = v25;
      uint64_t v24 = v4;
      CMTimeEpoch v9 = (uint64_t *)(v7 + 72);
      do
      {
        uint64_t v10 = *(v9 - 2);
        uint64_t v11 = *(v9 - 1);
        uint64_t v12 = *v9;
        CMTimeEpoch v13 = sub_1DC8ADEC8(*(v9 - 5), *(v9 - 4), *(v9 - 3), v4);
        uint64_t v15 = v14;
        uint64_t v17 = v16;
        unint64_t v19 = *(void *)(v25 + 16);
        unint64_t v18 = *(void *)(v25 + 24);
        unint64_t v20 = v19 + 1;
        if (v19 >= v18 >> 1)
        {
          sub_1DC8AF114(v18);
          unint64_t v23 = v22;
          sub_1DC897C2C();
          unint64_t v20 = v23;
        }
        *(void *)(v25 + 16) = v20;
        double v21 = (void *)(v25 + 48 * v19);
        v21[4] = v13;
        v21[5] = v15;
        v21[6] = v17;
        v21[7] = v10;
        v21[8] = v11;
        v21[9] = v12;
        v9 += 6;
        --v8;
        uint64_t v4 = v24;
      }
      while (v8);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x1E4FBC860];
    }
  }
  return v2;
}

char *sub_1DC8AE190(unsigned int a1, id a2)
{
  CMTimeEpoch result = (char *)objc_msgSend(a2, sel_sampleTime);
  BOOL v5 = __OFADD__(result, a1);
  CMTimeValue v6 = &result[a1];
  if (v5)
  {
    __break(1u);
  }
  else
  {
    objc_msgSend(a2, sel_sampleRate);
    double v8 = v7;
    id v9 = objc_allocWithZone(MEMORY[0x1E4F153F8]);
    return (char *)objc_msgSend(v9, sel_initWithSampleTime_atRate_, v6, v8);
  }
  return result;
}

char *sub_1DC8AE218()
{
  v3[1] = *(mach_timebase_info *)MEMORY[0x1E4F143B8];
  v3[0] = 0;
  uint64_t v1 = (char *)mach_timebase_info(v3);
  CMTimeEpoch result = sub_1DCB2F82C(v1);
  if (!v0) {
    return (char *)v3[0];
  }
  return result;
}

char *sub_1DC8AE28C(unint64_t a1)
{
  CMTimeEpoch result = sub_1DC8AE218();
  if (v1) {
    return (char *)v4;
  }
  unint64_t v5 = 1000 * HIDWORD(result);
  if (is_mul_ok(v5, a1))
  {
    if (result) {
      return (char *)(v5 * a1 / result);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

char *static SNTimeUtils.timestampToDate(machContinuousTime:)(uint64_t a1)
{
  if (!mach_get_times() && (BOOL v3 = a1 == 0, v4 = -a1, v4 != 0 && v3))
  {
    type metadata accessor for SNTimeUtils();
    CMTimeEpoch result = sub_1DC8AE458(v4);
    if (!v1) {
      return (char *)sub_1DCB86B58();
    }
  }
  else
  {
    sub_1DC8AE3E8();
    swift_allocError();
    return (char *)swift_willThrow();
  }
  return result;
}

unint64_t sub_1DC8AE3E8()
{
  unint64_t result = qword_1EAA9E2C0;
  if (!qword_1EAA9E2C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E2C0);
  }
  return result;
}

uint64_t type metadata accessor for SNTimeUtils()
{
  return self;
}

char *sub_1DC8AE458(uint64_t a1)
{
  unint64_t result = sub_1DC8AE218();
  if (!v1)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (((unsigned __int128)result * a1) >> 64 == (result * a1) >> 63)
    {
      if ((unint64_t)result >> 32) {
        return result;
      }
LABEL_8:
      __break(1u);
      return result;
    }
    __break(1u);
    goto LABEL_8;
  }
  return result;
}

id SNTimeUtils.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

id SNTimeUtils.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SNTimeUtils();
  return objc_msgSendSuper2(&v2, sel_init);
}

id SNTimeUtils.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SNTimeUtils();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unsigned char *storeEnumTagSinglePayload for SNTimeUtils.DomainError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1DC8AE610);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SNTimeUtils.DomainError()
{
  return &type metadata for SNTimeUtils.DomainError;
}

unint64_t sub_1DC8AE64C()
{
  unint64_t result = qword_1EAA9E2C8;
  if (!qword_1EAA9E2C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E2C8);
  }
  return result;
}

uint64_t sub_1DC8AE698(uint64_t result, uint64_t a2)
{
  if (result < 0) {
    goto LABEL_31;
  }
  if (!result) {
    return a2;
  }
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2)
  {
    uint64_t v8 = MEMORY[0x1E4FBC860];
LABEL_27:
    swift_bridgeObjectRelease();
    swift_release();
    return v8;
  }
  unint64_t v3 = 0;
  unint64_t v4 = 0;
  uint64_t v5 = (uint64_t *)(a2 + 48);
  uint64_t v6 = v2 - 1;
  uint64_t v7 = MEMORY[0x1E4FBC860];
  uint64_t v8 = MEMORY[0x1E4FBC860];
  uint64_t v23 = a2;
  uint64_t v24 = v2 - 1;
  uint64_t v26 = result;
  do
  {
    uint64_t v9 = *(v5 - 1);
    uint64_t v10 = *v5;
    unint64_t v11 = *(void *)(v7 + 16);
    uint64_t v27 = *(v5 - 2);
    if ((uint64_t)v11 < result)
    {
      uint64_t v12 = a2;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1DC897B3C();
        uint64_t v6 = v24;
      }
      unint64_t v13 = *(void *)(v7 + 16);
      a2 = v12;
      if (v13 >= *(void *)(v7 + 24) >> 1)
      {
        sub_1DC897B3C();
        a2 = v12;
        uint64_t v6 = v24;
      }
      *(void *)(v7 + 16) = v13 + 1;
      uint64_t v14 = (void *)(v7 + 24 * v13);
      unint64_t result = v26;
      v14[4] = v27;
      v14[5] = v9;
      v14[6] = v10;
LABEL_20:
      if (v6 == v3) {
        goto LABEL_27;
      }
      goto LABEL_24;
    }
    if (v4 >= v11) {
      goto LABEL_29;
    }
    uint64_t v25 = *v5;
    uint64_t v15 = (void *)(v7 + 24 * v4);
    uint64_t v16 = v15[4];
    uint64_t v17 = v15[5];
    uint64_t v18 = v15[6];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1DC897B3C();
      uint64_t v6 = v24;
    }
    unint64_t v19 = *(void *)(v8 + 16);
    if (v19 >= *(void *)(v8 + 24) >> 1)
    {
      sub_1DC897B3C();
      uint64_t v6 = v24;
    }
    *(void *)(v8 + 16) = v19 + 1;
    unint64_t v20 = (void *)(v8 + 24 * v19);
    v20[4] = v16;
    v20[5] = v17;
    v20[6] = v18;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1DC8AEB64();
      uint64_t v7 = v21;
    }
    a2 = v23;
    unint64_t result = v26;
    if (v4 >= *(void *)(v7 + 16)) {
      goto LABEL_30;
    }
    unint64_t v22 = (void *)(v7 + 24 * v4);
    v22[4] = v27;
    void v22[5] = v9;
    v22[6] = v25;
    if ((uint64_t)++v4 < v26) {
      goto LABEL_20;
    }
    if (v6 == v3) {
      goto LABEL_27;
    }
    unint64_t v4 = 0;
LABEL_24:
    ++v3;
    v5 += 3;
  }
  while (v3 < *(void *)(a2 + 16));
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

void sub_1DC8AE910(void *a1)
{
  id v2 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithLongLong_, 0x7FFFFFFFLL);
  id v3 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithLongLong_, 0xFFFFFFFF80000000);
  id v4 = objc_msgSend(a1, sel_compare_, v2);
  uint64_t v5 = v2;
  if (v4 != (id)1)
  {
    if (objc_msgSend(a1, sel_compare_, v3) == (id)-1) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = a1;
    }
  }
  uint64_t v6 = (uint64_t)objc_msgSend(v5, sel_longLongValue);

  if (v6 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v6 > 0x7FFFFFFF) {
LABEL_9:
  }
    __break(1u);
}

id sub_1DC8AE9F0(void *a1)
{
  id v2 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithLongLong_, 0x7FFFFFFFFFFFFFFFLL);
  id v3 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithLongLong_, 0x8000000000000000);
  id v4 = objc_msgSend(a1, sel_compare_, v2);
  uint64_t v5 = v2;
  if (v4 != (id)1)
  {
    if (objc_msgSend(a1, sel_compare_, v3) == (id)-1) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = a1;
    }
  }
  id v6 = objc_msgSend(v5, sel_longLongValue);

  return v6;
}

void sub_1DC8AEAA8(unsigned char *a1)
{
  a1[144] = 1;
}

uint64_t sub_1DC8AEAD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1DC87E988(&qword_1EAA9E2D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1DC8AEB40(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 144)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1DC8AEB5C(uint64_t result)
{
  *(unsigned char *)(result + 144) = 0;
  return result;
}

void sub_1DC8AEB64()
{
}

void sub_1DC8AEB78()
{
}

void sub_1DC8AEB8C()
{
}

void sub_1DC8AEBA0()
{
}

uint64_t sub_1DC8AEBB4(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = swift_retain();
  uint64_t v6 = a1(v5);
  swift_release();
  v32[0] = v6;
  v32[1] = a3;
  uint64_t v7 = swift_retain();
  uint64_t v8 = (void *)MEMORY[0x1E01A8D20](v7);
  uint64_t v9 = *(void **)(v6 + 16);
  uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v11 = 0;
  if (v9)
  {
    uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
    while (1)
    {
      id v30 = v9;
      sub_1DCAB9318(&v30, (uint64_t)v32, &v31);
      uint64_t v13 = v31;
      uint64_t result = swift_release();
      if (!v13) {
        break;
      }
      if (!v11)
      {
        unint64_t v15 = v10[3];
        if ((uint64_t)((v15 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_28;
        }
        int64_t v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
        if (v16 <= 1) {
          uint64_t v17 = 1;
        }
        else {
          uint64_t v17 = v16;
        }
        sub_1DC87E988(&qword_1EAA9C720);
        uint64_t v18 = (void *)swift_allocObject();
        uint64_t v19 = (uint64_t)(j__malloc_size(v18) - 32) / 8;
        id v18[2] = v17;
        v18[3] = (2 * v19) | 1;
        unint64_t v20 = (unint64_t)(v18 + 4);
        unint64_t v21 = v10[3];
        unint64_t v22 = v21 >> 1;
        if (v10[2])
        {
          if (v18 != v10 || v20 >= (unint64_t)&v10[v22 + 4]) {
            memmove(v18 + 4, v10 + 4, 8 * v22);
          }
          void v10[2] = 0;
        }
        uint64_t v12 = (void *)(v20 + 8 * v22);
        uint64_t v11 = (v19 & 0x7FFFFFFFFFFFFFFFLL) - (v21 >> 1);
        uint64_t result = swift_release();
        uint64_t v10 = v18;
      }
      BOOL v24 = __OFSUB__(v11--, 1);
      if (v24)
      {
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      *v12++ = v13;
      uint64_t v25 = swift_retain();
      uint64_t v8 = (void *)MEMORY[0x1E01A8D20](v25);
      uint64_t v9 = *(void **)(v6 + 16);
      if (!v9) {
        goto LABEL_21;
      }
    }
  }
  else
  {
LABEL_21:
    sub_1DC87E988(&qword_1EAA9E2E8);
    sub_1DC8AF01C();
    uint64_t v26 = (void *)swift_allocError();
    swift_willThrow();
    swift_release();
  }
  sub_1DCABB9A4();
  uint64_t result = swift_release();
  unint64_t v27 = v10[3];
  if (v27 < 2) {
    return (uint64_t)v10;
  }
  unint64_t v28 = v27 >> 1;
  BOOL v24 = __OFSUB__(v28, v11);
  unint64_t v29 = v28 - v11;
  if (!v24)
  {
    void v10[2] = v29;
    return (uint64_t)v10;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1DC8AEE20(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 16);
  if (a2 < 1)
  {
    unint64_t v3 = 0;
  }
  else
  {
    if (!v2)
    {
      uint64_t v6 = 0;
      uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
LABEL_32:
      unint64_t v23 = v5[3];
      if (v23 < 2) {
        return (uint64_t)v5;
      }
      unint64_t v24 = v23 >> 1;
      BOOL v22 = __OFSUB__(v24, v6);
      unint64_t v25 = v24 - v6;
      if (!v22)
      {
        void v5[2] = v25;
        return (uint64_t)v5;
      }
      goto LABEL_38;
    }
    unint64_t v3 = a2;
    if ((unint64_t)a2 >= 2)
    {
      uint64_t v4 = 1;
      uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
      while (v2 != v4)
      {
        if (a2 == ++v4) {
          goto LABEL_11;
        }
      }
      goto LABEL_12;
    }
    unint64_t v3 = 1;
  }
LABEL_11:
  uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v7 = v2 - v3;
  if (v2 == v3)
  {
LABEL_12:
    uint64_t v6 = 0;
    goto LABEL_32;
  }
  if (v2 > v3)
  {
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v6 = 0;
    uint64_t v8 = (uint64_t *)(result + 24 * v3 + 48);
    uint64_t v9 = v5 + 4;
    while (1)
    {
      uint64_t v10 = *(v8 - 2);
      uint64_t v11 = *(v8 - 1);
      uint64_t v12 = *v8;
      if (!v6)
      {
        unint64_t v13 = v5[3];
        if ((uint64_t)((v13 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_37;
        }
        int64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
        if (v14 <= 1) {
          uint64_t v15 = 1;
        }
        else {
          uint64_t v15 = v14;
        }
        sub_1DC87E988(&qword_1EAAA6960);
        int64_t v16 = (void *)swift_allocObject();
        uint64_t v17 = (uint64_t)(j__malloc_size(v16) - 32) / 24;
        void v16[2] = v15;
        void v16[3] = 2 * v17;
        unint64_t v18 = (unint64_t)(v16 + 4);
        unint64_t v19 = v5[3];
        unint64_t v20 = v19 >> 1;
        if (v5[2])
        {
          if (v16 != v5 || v18 >= (unint64_t)&v5[3 * v20 + 4]) {
            memmove(v16 + 4, v5 + 4, 24 * v20);
          }
          void v5[2] = 0;
        }
        uint64_t v9 = (void *)(v18 + 24 * v20);
        uint64_t v6 = (v17 & 0x7FFFFFFFFFFFFFFFLL) - (v19 >> 1);
        uint64_t result = swift_release();
        uint64_t v5 = v16;
      }
      BOOL v22 = __OFSUB__(v6--, 1);
      if (v22) {
        break;
      }
      v8 += 3;
      *uint64_t v9 = v10;
      v9[1] = v11;
      v9[2] = v12;
      v9 += 3;
      if (!--v7)
      {
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_32;
      }
    }
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_1DC8AF01C()
{
  unint64_t result = qword_1EAA9E2F0;
  if (!qword_1EAA9E2F0)
  {
    sub_1DC8863A8(&qword_1EAA9E2E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E2F0);
  }
  return result;
}

double sub_1DC8AF070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, double a18, long long a19, uint64_t a20,uint64_t a21)
{
  double result = a18;
  *(void *)uint64_t v13 = a17;
  *(double *)(v13 + 8) = a18;
  *(_OWORD *)(v13 + 16) = a19;
  *(void *)(v13 + 32) = a20;
  *(void *)(v13 + 40) = a21;
  return result;
}

id sub_1DC8AF09C@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  return sub_1DCA14B2C(0xD000000000000017, (a2 - 32) | 0x8000000000000000, 1, 0, a1, v2);
}

double sub_1DC8AF0EC(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16)
{
  return a16;
}

double sub_1DC8AF0FC(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  return a10;
}

BOOL sub_1DC8AF114@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_1DC8AF15C()
{
  return sub_1DCB88C08();
}

uint64_t sub_1DC8AF17C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1DCB1288C(0, 0, 0, 1, a5);
}

uint64_t sub_1DC8AF19C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1DCB0F384();
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_1DC96E340(a1, v6);
  swift_release();
  uint64_t result = swift_release();
  if (!v2) {
    *a2 = v7;
  }
  return result;
}

uint64_t sub_1DC8AF230@<X0>(uint64_t *a1@<X0>, long long *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  sub_1DC87E988(&qword_1EAA9DC60);
  uint64_t inited = swift_initStackObject();
  long long v10 = *a2;
  long long v8 = v10;
  *(_OWORD *)(inited + 16) = xmmword_1DCBB93B0;
  *(_OWORD *)(inited + 32) = v8;
  *(void *)(inited + 48) = v5;
  *(void *)(inited + 56) = v6;
  sub_1DC8AF4A8((uint64_t)&v10);
  sub_1DC8AF450(v5, v6);
  uint64_t result = sub_1DCB877D8();
  *a3 = result;
  return result;
}

uint64_t sub_1DC8AF2D8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *a1;
  if (*(void *)(*a1 + 16))
  {
    uint64_t v5 = *(void *)(a2 + 16);
    uint64_t v6 = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    unint64_t v7 = sub_1DC9637DC(v5, v6);
    if (v8)
    {
      uint64_t v9 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v7);
      uint64_t v10 = *v9;
      unint64_t v11 = v9[1];
      sub_1DC8AF450(*v9, v11);
      uint64_t result = swift_bridgeObjectRelease();
      *a3 = v10;
      a3[1] = v11;
      return result;
    }
    swift_bridgeObjectRelease();
  }
  sub_1DC884E74();
  swift_allocError();
  *uint64_t v13 = 0;
  return swift_willThrow();
}

uint64_t sub_1DC8AF394(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  sub_1DC881A8C(a1, v1);
  return (*(uint64_t (**)(uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>), void, void, uint64_t, uint64_t))(v2 + 8))(sub_1DC8AF420, 0, MEMORY[0x1E4F277C0], v1, v2);
}

uint64_t sub_1DC8AF420@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_1DC9E0FCC(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_1DC8AF450(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_1DC8AF4A8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1DC8AF4D4()
{
  return sub_1DC8882A8();
}

uint64_t sub_1DC8AF4F0@<X0>(uint64_t a1@<X8>)
{
  return sub_1DC8B9F3C(*(void *)(v1 + 32) + 112, a1, &qword_1EAA9E340);
}

uint64_t sub_1DC8AF51C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 360) = a1;
  *(void *)(v2 + 368) = a2;
  return sub_1DC8BA8F8((uint64_t)sub_1DC8AF534);
}

uint64_t sub_1DC8AF534()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  if (qword_1EAA9CFA8 != -1) {
    swift_once();
  }
  sub_1DC8BAA8C();
  if (v1)
  {
    if (qword_1EAA9D1C8 != -1) {
      swift_once();
    }
    uint64_t v3 = (void *)qword_1EAAFF880;
    uint64_t v2 = qword_1EAAFF888;
    char v4 = qword_1EAAFF890;
    uint64_t v5 = qword_1EAAFF898;
    v0[47] = qword_1EAAFF888;
    v0[48] = v5;
    v0[49] = qword_1EAAFF8A0;
    if (byte_1EAAFF8A8)
    {
      v0[43] = v3;
      id v6 = v3;
      sub_1DC87E988(&qword_1EAA9DF60);
      swift_willThrowTypedImpl();
      sub_1DC8BA978();
      sub_1DC8BA86C();
      return v8(v7, v8, v9, v10, v11, v12, v13, v14);
    }
    else
    {
      sub_1DC8BA964(v2, v4);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_task_alloc();
      sub_1DC8BAD7C();
      v0[54] = v18;
      *unint64_t v18 = v19;
      v18[1] = sub_1DC8AF888;
      sub_1DC8BA86C();
      return sub_1DC93AB80();
    }
  }
  else
  {
    if (qword_1EAA9D1F0 != -1) {
      swift_once();
    }
    v0[50] = qword_1EAAFF8F8;
    swift_retain();
    int64_t v16 = (void *)swift_task_alloc();
    v0[51] = v16;
    *int64_t v16 = v0;
    v16[1] = sub_1DC8AF790;
    sub_1DC8BA86C();
    return sub_1DC9CA3EC();
  }
}

uint64_t sub_1DC8AF790()
{
  sub_1DC886900();
  uint64_t v3 = v2;
  sub_1DC886774();
  uint64_t v5 = v4;
  sub_1DC8BA85C();
  *id v6 = v5;
  *id v6 = *v1;
  v5[52] = v7;
  v5[53] = v8;
  swift_task_dealloc();
  if (v0) {
    v5[69] = v0;
  }
  else {
    v5[56] = v3;
  }
  sub_1DC886854();
  return MEMORY[0x1F4188298](v9, v10, v11);
}

uint64_t sub_1DC8AF888()
{
  sub_1DC8867A8();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC8BA85C();
  *char v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88679C();
  *id v6 = v5;
  *(void *)(v3 + 440) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_release();
    swift_release();
  }
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC8AF980()
{
  sub_1DC886900();
  sub_1DC8BAC50();
  sub_1DC87E988(&qword_1EAA9E380);
  if (sub_1DC8BAAF0())
  {
    sub_1DC8818D0(v0 + 144);
    uint64_t v1 = *(void *)(v0 + 320);
    uint64_t v2 = *(void *)(v0 + 360);
    *(_OWORD *)uint64_t v2 = *(_OWORD *)(v0 + 304);
    *(void *)(v2 + 16) = v1;
    sub_1DC8BAB84();
  }
  else
  {
    sub_1DC8B99C4();
    sub_1DC883884();
    sub_1DC8BAC20();
    sub_1DC8BA9DC();
  }
  return v3();
}

uint64_t sub_1DC8AFA44()
{
  sub_1DC8867A8();
  swift_release();
  swift_release();
  swift_release();
  sub_1DC8BA978();
  return v0();
}

uint64_t sub_1DC8AFAB4()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  id v1 = objc_msgSend(*(id *)(v0 + 416), sel_remoteObjectProxy);
  sub_1DC8BAC08();
  swift_unknownObjectRelease();
  sub_1DC87E988(&qword_1EAA9E360);
  sub_1DC8BA930();
  *(void *)(v0 + 456) = *(void *)(v0 + 352);
  uint64_t v2 = (void *)sub_1DC8BABF0();
  *(void *)(v0 + 464) = v2;
  sub_1DC8BABE4(v2);
  sub_1DC8BA8B4();
  swift_unknownObjectRetain();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 472) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1DC8AFBE0;
  sub_1DC8BABD8();
  sub_1DC8BA86C();
  return v8(v4, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1DC8AFBE0()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_1DC886774();
  uint64_t v7 = v6;
  sub_1DC8BA85C();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  sub_1DC88679C();
  *uint64_t v10 = v9;
  v7[60] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v7[61] = v3;
    v7[62] = v5;
  }
  sub_1DC886854();
  sub_1DC8BA86C();
  return MEMORY[0x1F4188298](v11, v12, v13);
}

uint64_t sub_1DC8AFCD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1DC8BAB24();
  sub_1DC8BABB4();
  uint64_t v12 = v10[61];
  uint64_t v11 = v10[62];
  uint64_t v13 = (void *)v10[52];
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v14 = sub_1DC886810();
  v10[63] = v14;
  *(void *)(v14 + 16) = v11;
  *(void *)(v14 + 24) = v12;

  swift_release();
  swift_release();
  sub_1DC8BA91C((uint64_t)&unk_1EAA9E470);
  uint64_t v27 = v15;
  swift_task_alloc();
  sub_1DC8BAD7C();
  v10[64] = v16;
  *int64_t v16 = v17;
  v16[1] = sub_1DC8AFDCC;
  sub_1DC8BA984();
  sub_1DC8BAB0C();
  return v20(v18, v19, v20, v21, v22, v23, v24, v25, v27, a10);
}

uint64_t sub_1DC8AFDCC()
{
  sub_1DC8867A8();
  sub_1DC886774();
  sub_1DC88679C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1DC88679C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 520) = v0;
  swift_task_dealloc();
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC8AFEAC()
{
  sub_1DC886900();
  id v1 = (void *)v0[52];
  swift_release();
  sub_1DC8BAC38();
  swift_unknownObjectRelease();

  v0[69] = v0[60];
  sub_1DC886854();
  return MEMORY[0x1F4188298](v2, v3, v4);
}

uint64_t sub_1DC8AFF30()
{
  sub_1DC8BAB24();
  sub_1DC8BABB4();
  sub_1DC8B9CD4((uint64_t)(v0 + 2), (uint64_t)(v0 + 41), (uint64_t *)&unk_1EAAA2640);
  type metadata accessor for XPCDataDecoder();
  uint64_t v1 = sub_1DC886810();
  sub_1DC8B9CD4((uint64_t)(v0 + 41), v1 + 16, (uint64_t *)&unk_1EAAA2640);
  sub_1DC8B9CD4((uint64_t)(v0 + 4), (uint64_t)(v0 + 27), &qword_1EAA9E478);
  type metadata accessor for XPCProxyDecoder();
  uint64_t v2 = swift_allocObject();
  sub_1DC8B9CD4((uint64_t)(v0 + 27), v2 + 16, &qword_1EAA9E478);
  type metadata accessor for XPCDecoder();
  uint64_t inited = swift_initStackObject();
  v0[66] = inited;
  *(void *)(inited + 16) = v1;
  *(void *)(inited + 24) = v2;
  sub_1DC8B9C10((uint64_t)(v0 + 41));
  sub_1DC8B9C54(v0 + 27);
  swift_retain();
  swift_task_alloc();
  sub_1DC8BAD7C();
  v0[67] = (uint64_t)v4;
  *uint64_t v4 = v5;
  v4[1] = sub_1DC8B0088;
  sub_1DC8BAB0C();
  return sub_1DC9C10F8();
}

uint64_t sub_1DC8B0088()
{
  sub_1DC8867A8();
  sub_1DC886774();
  sub_1DC88679C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1DC88679C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 544) = v0;
  swift_task_dealloc();
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC8B0168()
{
  sub_1DC8867A8();
  swift_release();
  sub_1DC8BA978();
  return v0();
}

uint64_t sub_1DC8B01C4()
{
  sub_1DC88688C();
  uint64_t v1 = *(void *)(v0 + 296);
  long long v6 = *(_OWORD *)(v0 + 280);
  uint64_t v2 = swift_setDeallocating();
  sub_1DC978D0C(v2);
  swift_deallocClassInstance();
  sub_1DC886630((uint64_t *)(v0 + 16));
  swift_release();
  uint64_t v3 = *(void *)(v0 + 360);
  *(_OWORD *)uint64_t v3 = v6;
  *(void *)(v3 + 16) = v1;
  sub_1DC8BAB84();
  return v4();
}

uint64_t sub_1DC8B0278()
{
  sub_1DC886900();
  uint64_t v1 = swift_setDeallocating();
  sub_1DC978D0C(v1);
  swift_deallocClassInstance();
  swift_release();
  sub_1DC886630((uint64_t *)(v0 + 16));
  sub_1DC8BA978();
  return v2();
}

uint64_t sub_1DC8B0308()
{
  sub_1DC8867A8();
  swift_release();
  sub_1DC8BA978();
  return v0();
}

uint64_t sub_1DC8B0364()
{
  sub_1DC8867A8();
  v0[29] = v1;
  v0[30] = v2;
  uint64_t v3 = type metadata accessor for AccessibilitySoundActions.Session();
  v0[31] = v3;
  sub_1DC8BADF0(v3);
  v0[32] = sub_1DC8BAE7C();
  uint64_t v4 = sub_1DC87E988(&qword_1EAA9E448);
  sub_1DC8BADF0(v4);
  v0[33] = sub_1DC8BAE7C();
  sub_1DC886854();
  return MEMORY[0x1F4188298](v5, v6, v7);
}

uint64_t sub_1DC8B0408()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  if (qword_1EAA9CFA8 != -1) {
    swift_once();
  }
  sub_1DC8BAA8C();
  if (v2)
  {
    if (qword_1EAA9D1C8 != -1) {
      swift_once();
    }
    uint64_t v3 = sub_1DC8BAD60();
    if (v5)
    {
      v1[27] = v0;
      id v6 = v0;
      sub_1DC87E988(&qword_1EAA9DF60);
      swift_willThrowTypedImpl();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_1DC8BA978();
      sub_1DC8BA86C();
      return v8(v7, v8, v9, v10, v11, v12, v13, v14);
    }
    else
    {
      sub_1DC8BA964(v3, v4);
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v18 = (void *)swift_task_alloc();
      v1[41] = v18;
      *uint64_t v18 = v1;
      v18[1] = sub_1DC8B0750;
      sub_1DC8BAA68();
      sub_1DC8BA86C();
      return sub_1DC93AB80();
    }
  }
  else
  {
    if (qword_1EAA9D1F0 != -1) {
      swift_once();
    }
    v1[37] = qword_1EAAFF8F8;
    swift_retain();
    int64_t v16 = (void *)swift_task_alloc();
    v1[38] = v16;
    *int64_t v16 = v1;
    v16[1] = sub_1DC8B0658;
    sub_1DC8BA86C();
    return sub_1DC9CA3EC();
  }
}

uint64_t sub_1DC8B0658()
{
  sub_1DC886900();
  uint64_t v3 = v2;
  sub_1DC886774();
  char v5 = v4;
  sub_1DC8BA85C();
  *id v6 = v5;
  *id v6 = *v1;
  v5[39] = v7;
  unsigned char v5[40] = v8;
  swift_task_dealloc();
  if (v0) {
    v5[55] = v0;
  }
  else {
    v5[43] = v3;
  }
  sub_1DC886854();
  return MEMORY[0x1F4188298](v9, v10, v11);
}

uint64_t sub_1DC8B0750()
{
  sub_1DC8867A8();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC8BA85C();
  *char v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88679C();
  *id v6 = v5;
  *(void *)(v3 + 336) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_release();
    swift_release();
  }
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC8B0848()
{
  sub_1DC88688C();
  uint64_t v1 = v0[33];
  sub_1DC8BAC50();
  sub_1DC87E988(&qword_1EAA9E380);
  uint64_t v2 = sub_1DC8BADBC();
  uint64_t v5 = v0[33];
  uint64_t v6 = v0[31];
  if (v2)
  {
    sub_1DC8BAE24(v2, v3, v4, v6);
    sub_1DC8B9BB8(v5, v1, (void (*)(void))type metadata accessor for AccessibilitySoundActions.Session);
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1DC8BAB84();
  }
  else
  {
    _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwst_0(v0[33], 1, 1, v6);
    sub_1DC88CC04(v5, &qword_1EAA9E448);
    sub_1DC8B99C4();
    sub_1DC883884();
    sub_1DC8BAC20();
    sub_1DC8818D0((uint64_t)(v0 + 18));
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
  }
  return v7();
}

uint64_t sub_1DC8B096C()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  id v1 = objc_msgSend((id)sub_1DC8BADFC(), sel_remoteObjectProxy);
  sub_1DC8BAC08();
  swift_unknownObjectRelease();
  sub_1DC87E988(&qword_1EAA9E360);
  sub_1DC8BA930();
  v0[44] = v0[28];
  uint64_t v2 = (void *)sub_1DC8BABF0();
  v0[45] = v2;
  sub_1DC8BABE4(v2);
  sub_1DC8BA8B4();
  swift_unknownObjectRetain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[46] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1DC8B0A8C;
  sub_1DC8BABD8();
  sub_1DC8BA86C();
  return v8(v4, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1DC8B0A8C()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_1DC886774();
  uint64_t v7 = v6;
  sub_1DC8BA85C();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  sub_1DC88679C();
  *uint64_t v10 = v9;
  v7[47] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v7[48] = v3;
    v7[49] = v5;
  }
  sub_1DC886854();
  sub_1DC8BA86C();
  return MEMORY[0x1F4188298](v11, v12, v13);
}

uint64_t sub_1DC8B0B80()
{
  sub_1DC8BABB4();
  sub_1DC8BAD38();
  swift_release();
  swift_unknownObjectRelease();
  id v1 = (int8x16_t *)sub_1DC886810();
  sub_1DC8BAD98(v1, v2, v3, v4, v5, v6, v7, v8, v9);
  swift_release();
  swift_release();
  sub_1DC8BA91C((uint64_t)&unk_1EAA9E458);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 408) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1DC8B0C60;
  uint64_t v11 = sub_1DC8BA904();
  return v12(v11);
}

uint64_t sub_1DC8B0C60()
{
  sub_1DC886900();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC8BA85C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88679C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 416) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1DC886854();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    uint64_t v10 = (void *)sub_1DC8BAA00();
    *(void *)(v3 + 424) = v10;
    *uint64_t v10 = v5;
    v10[1] = sub_1DC8B0E24;
    uint64_t v11 = sub_1DC8BAE10();
    return v12(v11);
  }
}

uint64_t sub_1DC8B0DA0()
{
  sub_1DC886900();
  id v1 = (void *)v0[39];
  swift_release();
  sub_1DC8BAC38();
  swift_unknownObjectRelease();

  v0[55] = v0[47];
  sub_1DC886854();
  return MEMORY[0x1F4188298](v2, v3, v4);
}

uint64_t sub_1DC8B0E24()
{
  sub_1DC8867A8();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC8BA85C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88679C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 432) = v0;
  swift_task_dealloc();
  if (!v0) {
    sub_1DC886630((uint64_t *)(v3 + 16));
  }
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC8B0F08()
{
  sub_1DC8867A8();
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v0 + 232);
  swift_release();
  sub_1DC8B9BB8(v1, v2, (void (*)(void))type metadata accessor for AccessibilitySoundActions.Session);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1DC8BAB84();
  return v3();
}

uint64_t sub_1DC8B0F98(uint64_t a1)
{
  *(void *)(v1 + 240) = a1;
  return sub_1DC8BA8F8((uint64_t)sub_1DC8B0FB0);
}

uint64_t sub_1DC8B0FB0()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  if (qword_1EAA9CFA8 != -1) {
    swift_once();
  }
  sub_1DC8BAA8C();
  if (v1)
  {
    if (qword_1EAA9D1C8 != -1) {
      swift_once();
    }
    uint64_t v2 = sub_1DC8BA998();
    if (v4)
    {
      sub_1DC8BAB3C();
      sub_1DC87E988(&qword_1EAA9DF60);
      swift_willThrowTypedImpl();
      sub_1DC8BA978();
      sub_1DC8BA86C();
      return v6(v5, v6, v7, v8, v9, v10, v11, v12);
    }
    else
    {
      sub_1DC8BA964(v2, v3);
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v18 = swift_task_alloc();
      uint64_t v19 = (void *)sub_1DC8BAB94(v18);
      *uint64_t v19 = v20;
      v19[1] = sub_1DC8B12C8;
      sub_1DC8BAA68();
      sub_1DC8BA86C();
      return sub_1DC93AB80();
    }
  }
  else
  {
    if (qword_1EAA9D1F0 != -1) {
      swift_once();
    }
    *(void *)(v0 + 272) = qword_1EAAFF8F8;
    swift_retain();
    uint64_t v14 = swift_task_alloc();
    uint64_t v15 = (void *)sub_1DC8BAD2C(v14);
    *uint64_t v15 = v16;
    v15[1] = sub_1DC8B11D8;
    sub_1DC8BA86C();
    return sub_1DC9CA3EC();
  }
}

uint64_t sub_1DC8B11D8()
{
  sub_1DC886900();
  uint64_t v3 = v2;
  sub_1DC886774();
  uint64_t v5 = v4;
  sub_1DC8BA85C();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  sub_1DC8BACEC(v7, v8, v9);
  if (v0) {
    *(void *)(v5 + 424) = v0;
  }
  else {
    *(void *)(v5 + 320) = v3;
  }
  sub_1DC886854();
  return MEMORY[0x1F4188298](v10, v11, v12);
}

uint64_t sub_1DC8B12C8()
{
  sub_1DC8867A8();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC8BA85C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88679C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 312) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    sub_1DC8BACD4();
    swift_release();
    swift_release();
  }
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC8B13B8()
{
  sub_1DC886900();
  sub_1DC8BAA44();
  sub_1DC87E988(&qword_1EAA9E380);
  if (sub_1DC8BAAF0())
  {
    uint64_t v0 = sub_1DC8BA9B4();
    return v1(v0);
  }
  else
  {
    sub_1DC8B99C4();
    sub_1DC883884();
    sub_1DC8BAC20();
    sub_1DC8BA9DC();
    return v3();
  }
}

uint64_t sub_1DC8B147C()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  id v0 = objc_msgSend((id)sub_1DC8BAAC8(), sel_remoteObjectProxy);
  sub_1DC8BAC08();
  swift_unknownObjectRelease();
  sub_1DC87E988(&qword_1EAA9E360);
  sub_1DC8BA930();
  sub_1DC8BACC8();
  char v1 = (void *)sub_1DC8BABF0();
  sub_1DC8BAADC(v1);
  sub_1DC8BA8B4();
  swift_unknownObjectRetain();
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_1DC8BAD14(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_1DC8B1588;
  sub_1DC8BACBC();
  sub_1DC8BABD8();
  sub_1DC8BA86C();
  return v9(v5, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1DC8B1588()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_1DC886774();
  uint64_t v7 = v6;
  sub_1DC8BA85C();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  sub_1DC88679C();
  *uint64_t v10 = v9;
  v7[44] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v7[45] = v3;
    v7[46] = v5;
  }
  sub_1DC886854();
  sub_1DC8BA86C();
  return MEMORY[0x1F4188298](v11, v12, v13);
}

uint64_t sub_1DC8B167C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1DC8BAB24();
  sub_1DC8BABB4();
  sub_1DC8BAA20();
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v10 = sub_1DC886810();
  sub_1DC8BAB58(v10);
  swift_release();
  swift_release();
  sub_1DC8BA91C((uint64_t)&unk_1EAA9E418);
  uint64_t v24 = v11;
  uint64_t v12 = swift_task_alloc();
  uint64_t v13 = (void *)sub_1DC8BABA4(v12);
  *uint64_t v13 = v14;
  v13[1] = sub_1DC8B174C;
  sub_1DC8BA904();
  sub_1DC8BAB0C();
  return v17(v15, v16, v17, v18, v19, v20, v21, v22, v24, a10);
}

uint64_t sub_1DC8B174C()
{
  sub_1DC886900();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC8BA85C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88679C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 392) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1DC886854();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    uint64_t v10 = sub_1DC8BAA00();
    uint64_t v11 = (void *)sub_1DC8BAD20(v10);
    *uint64_t v11 = v12;
    v11[1] = sub_1DC8B18FC;
    uint64_t v13 = sub_1DC8BAB74();
    return v14(v13);
  }
}

uint64_t sub_1DC8B1884()
{
  sub_1DC886900();
  sub_1DC8BACA4();
  sub_1DC8BAC38();
  swift_unknownObjectRelease();

  sub_1DC8BAC98();
  sub_1DC886854();
  return MEMORY[0x1F4188298](v1, v2, v3);
}

uint64_t sub_1DC8B18FC()
{
  sub_1DC886900();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC8BA85C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88679C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 408) = v0;
  swift_task_dealloc();
  if (!v0) {
    sub_1DC8BAC80();
  }
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC8B19EC(uint64_t a1)
{
  *(void *)(v1 + 240) = a1;
  return sub_1DC8BA8F8((uint64_t)sub_1DC8B1A04);
}

uint64_t sub_1DC8B1A04()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  if (qword_1EAA9CFA8 != -1) {
    swift_once();
  }
  sub_1DC8BAA8C();
  if (v1)
  {
    if (qword_1EAA9D1C8 != -1) {
      swift_once();
    }
    uint64_t v2 = sub_1DC8BA998();
    if (v4)
    {
      sub_1DC8BAB3C();
      sub_1DC87E988(&qword_1EAA9DF60);
      swift_willThrowTypedImpl();
      sub_1DC8BA978();
      sub_1DC8BA86C();
      return v6(v5, v6, v7, v8, v9, v10, v11, v12);
    }
    else
    {
      sub_1DC8BA964(v2, v3);
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v18 = swift_task_alloc();
      uint64_t v19 = (void *)sub_1DC8BAB94(v18);
      *uint64_t v19 = v20;
      v19[1] = sub_1DC8B1D1C;
      sub_1DC8BAA68();
      sub_1DC8BA86C();
      return sub_1DC93AB80();
    }
  }
  else
  {
    if (qword_1EAA9D1F0 != -1) {
      swift_once();
    }
    *(void *)(v0 + 272) = qword_1EAAFF8F8;
    swift_retain();
    uint64_t v14 = swift_task_alloc();
    uint64_t v15 = (void *)sub_1DC8BAD2C(v14);
    *uint64_t v15 = v16;
    v15[1] = sub_1DC8B1C2C;
    sub_1DC8BA86C();
    return sub_1DC9CA3EC();
  }
}

uint64_t sub_1DC8B1C2C()
{
  sub_1DC886900();
  uint64_t v3 = v2;
  sub_1DC886774();
  uint64_t v5 = v4;
  sub_1DC8BA85C();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  sub_1DC8BACEC(v7, v8, v9);
  if (v0) {
    *(void *)(v5 + 424) = v0;
  }
  else {
    *(void *)(v5 + 320) = v3;
  }
  sub_1DC886854();
  return MEMORY[0x1F4188298](v10, v11, v12);
}

uint64_t sub_1DC8B1D1C()
{
  sub_1DC8867A8();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC8BA85C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88679C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 312) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    sub_1DC8BACD4();
    swift_release();
    swift_release();
  }
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC8B1E0C()
{
  sub_1DC886900();
  sub_1DC8BAA44();
  sub_1DC87E988(&qword_1EAA9E380);
  if (sub_1DC8BAAF0())
  {
    uint64_t v0 = sub_1DC8BA9B4();
    return v1(v0);
  }
  else
  {
    sub_1DC8B99C4();
    sub_1DC883884();
    sub_1DC8BAC20();
    sub_1DC8BA9DC();
    return v3();
  }
}

uint64_t sub_1DC8B1ED0()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  id v0 = objc_msgSend((id)sub_1DC8BAAC8(), sel_remoteObjectProxy);
  sub_1DC8BAC08();
  swift_unknownObjectRelease();
  sub_1DC87E988(&qword_1EAA9E360);
  sub_1DC8BA930();
  sub_1DC8BACC8();
  char v1 = (void *)sub_1DC8BABF0();
  sub_1DC8BAADC(v1);
  sub_1DC8BA8B4();
  swift_unknownObjectRetain();
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_1DC8BAD14(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_1DC8B1FDC;
  sub_1DC8BACBC();
  sub_1DC8BABD8();
  sub_1DC8BA86C();
  return v9(v5, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1DC8B1FDC()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_1DC886774();
  uint64_t v7 = v6;
  sub_1DC8BA85C();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  sub_1DC88679C();
  *uint64_t v10 = v9;
  v7[44] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v7[45] = v3;
    v7[46] = v5;
  }
  sub_1DC886854();
  sub_1DC8BA86C();
  return MEMORY[0x1F4188298](v11, v12, v13);
}

uint64_t sub_1DC8B20D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1DC8BAB24();
  sub_1DC8BABB4();
  sub_1DC8BAA20();
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v10 = sub_1DC886810();
  sub_1DC8BAB58(v10);
  swift_release();
  swift_release();
  sub_1DC8BA91C((uint64_t)&unk_1EAA9E400);
  uint64_t v24 = v11;
  uint64_t v12 = swift_task_alloc();
  uint64_t v13 = (void *)sub_1DC8BABA4(v12);
  *uint64_t v13 = v14;
  v13[1] = sub_1DC8B21A0;
  sub_1DC8BA904();
  sub_1DC8BAB0C();
  return v17(v15, v16, v17, v18, v19, v20, v21, v22, v24, a10);
}

uint64_t sub_1DC8B21A0()
{
  sub_1DC886900();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC8BA85C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88679C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 392) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1DC886854();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    uint64_t v10 = sub_1DC8BAA00();
    uint64_t v11 = (void *)sub_1DC8BAD20(v10);
    *uint64_t v11 = v12;
    v11[1] = sub_1DC8B18FC;
    uint64_t v13 = sub_1DC8BAB74();
    return v14(v13);
  }
}

uint64_t sub_1DC8B22D8(uint64_t a1)
{
  *(void *)(v1 + 240) = a1;
  return sub_1DC8BA8F8((uint64_t)sub_1DC8B22F0);
}

uint64_t sub_1DC8B22F0()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  if (qword_1EAA9CFA8 != -1) {
    swift_once();
  }
  sub_1DC8BAA8C();
  if (v1)
  {
    if (qword_1EAA9D1C8 != -1) {
      swift_once();
    }
    uint64_t v2 = sub_1DC8BA998();
    if (v4)
    {
      sub_1DC8BAB3C();
      sub_1DC87E988(&qword_1EAA9DF60);
      swift_willThrowTypedImpl();
      sub_1DC8BA978();
      sub_1DC8BA86C();
      return v6(v5, v6, v7, v8, v9, v10, v11, v12);
    }
    else
    {
      sub_1DC8BA964(v2, v3);
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v18 = swift_task_alloc();
      uint64_t v19 = (void *)sub_1DC8BAB94(v18);
      *uint64_t v19 = v20;
      v19[1] = sub_1DC8B2608;
      sub_1DC8BAA68();
      sub_1DC8BA86C();
      return sub_1DC93AB80();
    }
  }
  else
  {
    if (qword_1EAA9D1F0 != -1) {
      swift_once();
    }
    *(void *)(v0 + 272) = qword_1EAAFF8F8;
    swift_retain();
    uint64_t v14 = swift_task_alloc();
    uint64_t v15 = (void *)sub_1DC8BAD2C(v14);
    *uint64_t v15 = v16;
    v15[1] = sub_1DC8B2518;
    sub_1DC8BA86C();
    return sub_1DC9CA3EC();
  }
}

uint64_t sub_1DC8B2518()
{
  sub_1DC886900();
  uint64_t v3 = v2;
  sub_1DC886774();
  uint64_t v5 = v4;
  sub_1DC8BA85C();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  sub_1DC8BACEC(v7, v8, v9);
  if (v0) {
    *(void *)(v5 + 424) = v0;
  }
  else {
    *(void *)(v5 + 320) = v3;
  }
  sub_1DC886854();
  return MEMORY[0x1F4188298](v10, v11, v12);
}

uint64_t sub_1DC8B2608()
{
  sub_1DC8867A8();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC8BA85C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88679C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 312) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    sub_1DC8BACD4();
    swift_release();
    swift_release();
  }
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC8B26F8()
{
  sub_1DC886900();
  sub_1DC8BAA44();
  sub_1DC87E988(&qword_1EAA9E380);
  if (sub_1DC8BAAF0())
  {
    uint64_t v0 = sub_1DC8BA9B4();
    return v1(v0);
  }
  else
  {
    sub_1DC8B99C4();
    sub_1DC883884();
    sub_1DC8BAC20();
    sub_1DC8BA9DC();
    return v3();
  }
}

uint64_t sub_1DC8B27BC()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  id v0 = objc_msgSend((id)sub_1DC8BAAC8(), sel_remoteObjectProxy);
  sub_1DC8BAC08();
  swift_unknownObjectRelease();
  sub_1DC87E988(&qword_1EAA9E360);
  sub_1DC8BA930();
  sub_1DC8BACC8();
  char v1 = (void *)sub_1DC8BABF0();
  sub_1DC8BAADC(v1);
  sub_1DC8BA8B4();
  swift_unknownObjectRetain();
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_1DC8BAD14(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_1DC8B28C8;
  sub_1DC8BACBC();
  sub_1DC8BABD8();
  sub_1DC8BA86C();
  return v9(v5, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1DC8B28C8()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_1DC886774();
  uint64_t v7 = v6;
  sub_1DC8BA85C();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  sub_1DC88679C();
  *uint64_t v10 = v9;
  v7[44] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v7[45] = v3;
    v7[46] = v5;
  }
  sub_1DC886854();
  sub_1DC8BA86C();
  return MEMORY[0x1F4188298](v11, v12, v13);
}

uint64_t sub_1DC8B29BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1DC8BAB24();
  sub_1DC8BABB4();
  sub_1DC8BAA20();
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v10 = sub_1DC886810();
  sub_1DC8BAB58(v10);
  swift_release();
  swift_release();
  sub_1DC8BA91C((uint64_t)&unk_1EAA9E3E8);
  uint64_t v24 = v11;
  uint64_t v12 = swift_task_alloc();
  uint64_t v13 = (void *)sub_1DC8BABA4(v12);
  *uint64_t v13 = v14;
  v13[1] = sub_1DC8B2A8C;
  sub_1DC8BA904();
  sub_1DC8BAB0C();
  return v17(v15, v16, v17, v18, v19, v20, v21, v22, v24, a10);
}

uint64_t sub_1DC8B2A8C()
{
  sub_1DC886900();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC8BA85C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88679C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 392) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1DC886854();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    uint64_t v10 = sub_1DC8BAA00();
    uint64_t v11 = (void *)sub_1DC8BAD20(v10);
    *uint64_t v11 = v12;
    v11[1] = sub_1DC8B18FC;
    uint64_t v13 = sub_1DC8BAB74();
    return v14(v13);
  }
}

uint64_t sub_1DC8B2BC4(uint64_t a1)
{
  *(void *)(v1 + 240) = a1;
  return sub_1DC8BA8F8((uint64_t)sub_1DC8B2BDC);
}

uint64_t sub_1DC8B2BDC()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  if (qword_1EAA9CFA8 != -1) {
    swift_once();
  }
  sub_1DC8BAA8C();
  if (v1)
  {
    if (qword_1EAA9D1C8 != -1) {
      swift_once();
    }
    uint64_t v2 = sub_1DC8BA998();
    if (v4)
    {
      sub_1DC8BAB3C();
      sub_1DC87E988(&qword_1EAA9DF60);
      swift_willThrowTypedImpl();
      sub_1DC8BA978();
      sub_1DC8BA86C();
      return v6(v5, v6, v7, v8, v9, v10, v11, v12);
    }
    else
    {
      sub_1DC8BA964(v2, v3);
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v18 = swift_task_alloc();
      uint64_t v19 = (void *)sub_1DC8BAB94(v18);
      *uint64_t v19 = v20;
      v19[1] = sub_1DC8B2EF4;
      sub_1DC8BAA68();
      sub_1DC8BA86C();
      return sub_1DC93AB80();
    }
  }
  else
  {
    if (qword_1EAA9D1F0 != -1) {
      swift_once();
    }
    *(void *)(v0 + 272) = qword_1EAAFF8F8;
    swift_retain();
    uint64_t v14 = swift_task_alloc();
    uint64_t v15 = (void *)sub_1DC8BAD2C(v14);
    *uint64_t v15 = v16;
    v15[1] = sub_1DC8B2E04;
    sub_1DC8BA86C();
    return sub_1DC9CA3EC();
  }
}

uint64_t sub_1DC8B2E04()
{
  sub_1DC886900();
  uint64_t v3 = v2;
  sub_1DC886774();
  uint64_t v5 = v4;
  sub_1DC8BA85C();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  sub_1DC8BACEC(v7, v8, v9);
  if (v0) {
    *(void *)(v5 + 424) = v0;
  }
  else {
    *(void *)(v5 + 320) = v3;
  }
  sub_1DC886854();
  return MEMORY[0x1F4188298](v10, v11, v12);
}

uint64_t sub_1DC8B2EF4()
{
  sub_1DC8867A8();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC8BA85C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88679C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 312) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    sub_1DC8BACD4();
    swift_release();
    swift_release();
  }
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC8B2FE4()
{
  sub_1DC886900();
  sub_1DC8BAA44();
  sub_1DC87E988(&qword_1EAA9E380);
  if (sub_1DC8BAAF0())
  {
    uint64_t v0 = sub_1DC8BA9B4();
    return v1(v0);
  }
  else
  {
    sub_1DC8B99C4();
    sub_1DC883884();
    sub_1DC8BAC20();
    sub_1DC8BA9DC();
    return v3();
  }
}

uint64_t sub_1DC8B30A8()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  id v0 = objc_msgSend((id)sub_1DC8BAAC8(), sel_remoteObjectProxy);
  sub_1DC8BAC08();
  swift_unknownObjectRelease();
  sub_1DC87E988(&qword_1EAA9E360);
  sub_1DC8BA930();
  sub_1DC8BACC8();
  char v1 = (void *)sub_1DC8BABF0();
  sub_1DC8BAADC(v1);
  sub_1DC8BA8B4();
  swift_unknownObjectRetain();
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_1DC8BAD14(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_1DC8B31B4;
  sub_1DC8BACBC();
  sub_1DC8BABD8();
  sub_1DC8BA86C();
  return v9(v5, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1DC8B31B4()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_1DC886774();
  uint64_t v7 = v6;
  sub_1DC8BA85C();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  sub_1DC88679C();
  *uint64_t v10 = v9;
  v7[44] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v7[45] = v3;
    v7[46] = v5;
  }
  sub_1DC886854();
  sub_1DC8BA86C();
  return MEMORY[0x1F4188298](v11, v12, v13);
}

uint64_t sub_1DC8B32A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1DC8BAB24();
  sub_1DC8BABB4();
  sub_1DC8BAA20();
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v10 = sub_1DC886810();
  sub_1DC8BAB58(v10);
  swift_release();
  swift_release();
  sub_1DC8BA91C((uint64_t)&unk_1EAA9E3D0);
  uint64_t v24 = v11;
  uint64_t v12 = swift_task_alloc();
  uint64_t v13 = (void *)sub_1DC8BABA4(v12);
  *uint64_t v13 = v14;
  v13[1] = sub_1DC8B3378;
  sub_1DC8BA904();
  sub_1DC8BAB0C();
  return v17(v15, v16, v17, v18, v19, v20, v21, v22, v24, a10);
}

uint64_t sub_1DC8B3378()
{
  sub_1DC886900();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC8BA85C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88679C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 392) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1DC886854();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    uint64_t v10 = sub_1DC8BAA00();
    uint64_t v11 = (void *)sub_1DC8BAD20(v10);
    *uint64_t v11 = v12;
    v11[1] = sub_1DC8B18FC;
    uint64_t v13 = sub_1DC8BAB74();
    return v14(v13);
  }
}

uint64_t sub_1DC8B34B0(uint64_t a1)
{
  *(void *)(v1 + 240) = a1;
  return sub_1DC8BA8F8((uint64_t)sub_1DC8B34C8);
}

uint64_t sub_1DC8B34C8()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  if (qword_1EAA9CFA8 != -1) {
    swift_once();
  }
  sub_1DC8BAA8C();
  if (v1)
  {
    if (qword_1EAA9D1C8 != -1) {
      swift_once();
    }
    uint64_t v2 = sub_1DC8BA998();
    if (v4)
    {
      sub_1DC8BAB3C();
      sub_1DC87E988(&qword_1EAA9DF60);
      swift_willThrowTypedImpl();
      sub_1DC8BA978();
      sub_1DC8BA86C();
      return v6(v5, v6, v7, v8, v9, v10, v11, v12);
    }
    else
    {
      sub_1DC8BA964(v2, v3);
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v18 = swift_task_alloc();
      uint64_t v19 = (void *)sub_1DC8BAB94(v18);
      *uint64_t v19 = v20;
      v19[1] = sub_1DC8B37E0;
      sub_1DC8BAA68();
      sub_1DC8BA86C();
      return sub_1DC93AB80();
    }
  }
  else
  {
    if (qword_1EAA9D1F0 != -1) {
      swift_once();
    }
    *(void *)(v0 + 272) = qword_1EAAFF8F8;
    swift_retain();
    uint64_t v14 = swift_task_alloc();
    uint64_t v15 = (void *)sub_1DC8BAD2C(v14);
    *uint64_t v15 = v16;
    v15[1] = sub_1DC8B36F0;
    sub_1DC8BA86C();
    return sub_1DC9CA3EC();
  }
}

uint64_t sub_1DC8B36F0()
{
  sub_1DC886900();
  uint64_t v3 = v2;
  sub_1DC886774();
  uint64_t v5 = v4;
  sub_1DC8BA85C();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  sub_1DC8BACEC(v7, v8, v9);
  if (v0) {
    *(void *)(v5 + 424) = v0;
  }
  else {
    *(void *)(v5 + 320) = v3;
  }
  sub_1DC886854();
  return MEMORY[0x1F4188298](v10, v11, v12);
}

uint64_t sub_1DC8B37E0()
{
  sub_1DC8867A8();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC8BA85C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88679C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 312) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    sub_1DC8BACD4();
    swift_release();
    swift_release();
  }
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC8B38D0()
{
  sub_1DC886900();
  sub_1DC8BAA44();
  sub_1DC87E988(&qword_1EAA9E380);
  if (sub_1DC8BAAF0())
  {
    uint64_t v0 = sub_1DC8BA9B4();
    return v1(v0);
  }
  else
  {
    sub_1DC8B99C4();
    sub_1DC883884();
    sub_1DC8BAC20();
    sub_1DC8BA9DC();
    return v3();
  }
}

uint64_t sub_1DC8B3994()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  id v0 = objc_msgSend((id)sub_1DC8BAAC8(), sel_remoteObjectProxy);
  sub_1DC8BAC08();
  swift_unknownObjectRelease();
  sub_1DC87E988(&qword_1EAA9E360);
  sub_1DC8BA930();
  sub_1DC8BACC8();
  char v1 = (void *)sub_1DC8BABF0();
  sub_1DC8BAADC(v1);
  sub_1DC8BA8B4();
  swift_unknownObjectRetain();
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_1DC8BAD14(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_1DC8B3AA0;
  sub_1DC8BACBC();
  sub_1DC8BABD8();
  sub_1DC8BA86C();
  return v9(v5, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1DC8B3AA0()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_1DC886774();
  uint64_t v7 = v6;
  sub_1DC8BA85C();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  sub_1DC88679C();
  *uint64_t v10 = v9;
  v7[44] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v7[45] = v3;
    v7[46] = v5;
  }
  sub_1DC886854();
  sub_1DC8BA86C();
  return MEMORY[0x1F4188298](v11, v12, v13);
}

uint64_t sub_1DC8B3B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1DC8BAB24();
  sub_1DC8BABB4();
  sub_1DC8BAA20();
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v10 = sub_1DC886810();
  sub_1DC8BAB58(v10);
  swift_release();
  swift_release();
  sub_1DC8BA91C((uint64_t)&unk_1EAA9E3B8);
  uint64_t v24 = v11;
  uint64_t v12 = swift_task_alloc();
  uint64_t v13 = (void *)sub_1DC8BABA4(v12);
  *uint64_t v13 = v14;
  v13[1] = sub_1DC8B3C64;
  sub_1DC8BA904();
  sub_1DC8BAB0C();
  return v17(v15, v16, v17, v18, v19, v20, v21, v22, v24, a10);
}

uint64_t sub_1DC8B3C64()
{
  sub_1DC886900();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC8BA85C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88679C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 392) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1DC886854();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    uint64_t v10 = sub_1DC8BAA00();
    uint64_t v11 = (void *)sub_1DC8BAD20(v10);
    *uint64_t v11 = v12;
    v11[1] = sub_1DC8B18FC;
    uint64_t v13 = sub_1DC8BAB74();
    return v14(v13);
  }
}

uint64_t sub_1DC8B3D9C(uint64_t a1)
{
  *(void *)(v1 + 240) = a1;
  return sub_1DC8BA8F8((uint64_t)sub_1DC8B3DB4);
}

uint64_t sub_1DC8B3DB4()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  if (qword_1EAA9CFA8 != -1) {
    swift_once();
  }
  sub_1DC8BAA8C();
  if (v1)
  {
    if (qword_1EAA9D1C8 != -1) {
      swift_once();
    }
    uint64_t v2 = sub_1DC8BA998();
    if (v4)
    {
      sub_1DC8BAB3C();
      sub_1DC87E988(&qword_1EAA9DF60);
      swift_willThrowTypedImpl();
      sub_1DC8BA978();
      sub_1DC8BA86C();
      return v6(v5, v6, v7, v8, v9, v10, v11, v12);
    }
    else
    {
      sub_1DC8BA964(v2, v3);
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v18 = swift_task_alloc();
      uint64_t v19 = (void *)sub_1DC8BAB94(v18);
      *uint64_t v19 = v20;
      v19[1] = sub_1DC8B40CC;
      sub_1DC8BAA68();
      sub_1DC8BA86C();
      return sub_1DC93AB80();
    }
  }
  else
  {
    if (qword_1EAA9D1F0 != -1) {
      swift_once();
    }
    *(void *)(v0 + 272) = qword_1EAAFF8F8;
    swift_retain();
    uint64_t v14 = swift_task_alloc();
    uint64_t v15 = (void *)sub_1DC8BAD2C(v14);
    *uint64_t v15 = v16;
    v15[1] = sub_1DC8B3FDC;
    sub_1DC8BA86C();
    return sub_1DC9CA3EC();
  }
}

uint64_t sub_1DC8B3FDC()
{
  sub_1DC886900();
  uint64_t v3 = v2;
  sub_1DC886774();
  uint64_t v5 = v4;
  sub_1DC8BA85C();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  sub_1DC8BACEC(v7, v8, v9);
  if (v0) {
    *(void *)(v5 + 424) = v0;
  }
  else {
    *(void *)(v5 + 320) = v3;
  }
  sub_1DC886854();
  return MEMORY[0x1F4188298](v10, v11, v12);
}

uint64_t sub_1DC8B40CC()
{
  sub_1DC8867A8();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC8BA85C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88679C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 312) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    sub_1DC8BACD4();
    swift_release();
    swift_release();
  }
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC8B41BC()
{
  sub_1DC886900();
  sub_1DC8BAA44();
  sub_1DC87E988(&qword_1EAA9E380);
  if (sub_1DC8BAAF0())
  {
    uint64_t v0 = sub_1DC8BA9B4();
    return v1(v0);
  }
  else
  {
    sub_1DC8B99C4();
    sub_1DC883884();
    sub_1DC8BAC20();
    sub_1DC8BA9DC();
    return v3();
  }
}

uint64_t sub_1DC8B4280()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  id v0 = objc_msgSend((id)sub_1DC8BAAC8(), sel_remoteObjectProxy);
  sub_1DC8BAC08();
  swift_unknownObjectRelease();
  sub_1DC87E988(&qword_1EAA9E360);
  sub_1DC8BA930();
  sub_1DC8BACC8();
  char v1 = (void *)sub_1DC8BABF0();
  sub_1DC8BAADC(v1);
  sub_1DC8BA8B4();
  swift_unknownObjectRetain();
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_1DC8BAD14(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_1DC8B438C;
  sub_1DC8BACBC();
  sub_1DC8BABD8();
  sub_1DC8BA86C();
  return v9(v5, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1DC8B438C()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_1DC886774();
  uint64_t v7 = v6;
  sub_1DC8BA85C();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  sub_1DC88679C();
  *uint64_t v10 = v9;
  v7[44] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v7[45] = v3;
    v7[46] = v5;
  }
  sub_1DC886854();
  sub_1DC8BA86C();
  return MEMORY[0x1F4188298](v11, v12, v13);
}

uint64_t sub_1DC8B4480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1DC8BAB24();
  sub_1DC8BABB4();
  sub_1DC8BAA20();
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v10 = sub_1DC886810();
  sub_1DC8BAB58(v10);
  swift_release();
  swift_release();
  sub_1DC8BA91C((uint64_t)&unk_1EAA9E3A0);
  uint64_t v24 = v11;
  uint64_t v12 = swift_task_alloc();
  uint64_t v13 = (void *)sub_1DC8BABA4(v12);
  *uint64_t v13 = v14;
  v13[1] = sub_1DC8B4550;
  sub_1DC8BA904();
  sub_1DC8BAB0C();
  return v17(v15, v16, v17, v18, v19, v20, v21, v22, v24, a10);
}

uint64_t sub_1DC8B4550()
{
  sub_1DC886900();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC8BA85C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88679C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 392) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1DC886854();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    uint64_t v10 = sub_1DC8BAA00();
    uint64_t v11 = (void *)sub_1DC8BAD20(v10);
    *uint64_t v11 = v12;
    v11[1] = sub_1DC8B18FC;
    uint64_t v13 = sub_1DC8BAB74();
    return v14(v13);
  }
}

uint64_t sub_1DC8B4688(uint64_t a1)
{
  *(void *)(v1 + 240) = a1;
  return sub_1DC8BA8F8((uint64_t)sub_1DC8B46A0);
}

uint64_t sub_1DC8B46A0()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  if (qword_1EAA9CFA8 != -1) {
    swift_once();
  }
  sub_1DC8BAA8C();
  if (v1)
  {
    if (qword_1EAA9D1C8 != -1) {
      swift_once();
    }
    uint64_t v2 = sub_1DC8BA998();
    if (v4)
    {
      sub_1DC8BAB3C();
      sub_1DC87E988(&qword_1EAA9DF60);
      swift_willThrowTypedImpl();
      sub_1DC8BA978();
      sub_1DC8BA86C();
      return v6(v5, v6, v7, v8, v9, v10, v11, v12);
    }
    else
    {
      sub_1DC8BA964(v2, v3);
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v18 = swift_task_alloc();
      uint64_t v19 = (void *)sub_1DC8BAB94(v18);
      *uint64_t v19 = v20;
      v19[1] = sub_1DC8B49B8;
      sub_1DC8BAA68();
      sub_1DC8BA86C();
      return sub_1DC93AB80();
    }
  }
  else
  {
    if (qword_1EAA9D1F0 != -1) {
      swift_once();
    }
    *(void *)(v0 + 272) = qword_1EAAFF8F8;
    swift_retain();
    uint64_t v14 = swift_task_alloc();
    uint64_t v15 = (void *)sub_1DC8BAD2C(v14);
    *uint64_t v15 = v16;
    v15[1] = sub_1DC8B48C8;
    sub_1DC8BA86C();
    return sub_1DC9CA3EC();
  }
}

uint64_t sub_1DC8B48C8()
{
  sub_1DC886900();
  uint64_t v3 = v2;
  sub_1DC886774();
  uint64_t v5 = v4;
  sub_1DC8BA85C();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  sub_1DC8BACEC(v7, v8, v9);
  if (v0) {
    *(void *)(v5 + 424) = v0;
  }
  else {
    *(void *)(v5 + 320) = v3;
  }
  sub_1DC886854();
  return MEMORY[0x1F4188298](v10, v11, v12);
}

uint64_t sub_1DC8B49B8()
{
  sub_1DC8867A8();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC8BA85C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88679C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 312) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    sub_1DC8BACD4();
    swift_release();
    swift_release();
  }
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC8B4AA8()
{
  sub_1DC886900();
  sub_1DC8BAA44();
  sub_1DC87E988(&qword_1EAA9E380);
  if (sub_1DC8BAAF0())
  {
    uint64_t v0 = sub_1DC8BA9B4();
    return v1(v0);
  }
  else
  {
    sub_1DC8B99C4();
    sub_1DC883884();
    sub_1DC8BAC20();
    sub_1DC8BA9DC();
    return v3();
  }
}

uint64_t sub_1DC8B4B6C()
{
  sub_1DC8867A8();
  swift_release();
  swift_release();
  swift_release();
  sub_1DC8BA978();
  return v0();
}

uint64_t sub_1DC8B4BDC()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  id v0 = objc_msgSend((id)sub_1DC8BAAC8(), sel_remoteObjectProxy);
  sub_1DC8BAC08();
  swift_unknownObjectRelease();
  sub_1DC87E988(&qword_1EAA9E360);
  sub_1DC8BA930();
  sub_1DC8BACC8();
  char v1 = (void *)sub_1DC8BABF0();
  sub_1DC8BAADC(v1);
  sub_1DC8BA8B4();
  swift_unknownObjectRetain();
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_1DC8BAD14(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_1DC8B4CE8;
  sub_1DC8BACBC();
  sub_1DC8BABD8();
  sub_1DC8BA86C();
  return v9(v5, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1DC8B4CE8()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_1DC886774();
  uint64_t v7 = v6;
  sub_1DC8BA85C();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  sub_1DC88679C();
  *uint64_t v10 = v9;
  v7[44] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v7[45] = v3;
    v7[46] = v5;
  }
  sub_1DC886854();
  sub_1DC8BA86C();
  return MEMORY[0x1F4188298](v11, v12, v13);
}

uint64_t sub_1DC8B4DDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1DC8BAB24();
  sub_1DC8BABB4();
  sub_1DC8BAA20();
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v10 = sub_1DC886810();
  sub_1DC8BAB58(v10);
  swift_release();
  swift_release();
  sub_1DC8BA91C((uint64_t)&unk_1EAA9E378);
  uint64_t v24 = v11;
  uint64_t v12 = swift_task_alloc();
  uint64_t v13 = (void *)sub_1DC8BABA4(v12);
  *uint64_t v13 = v14;
  v13[1] = sub_1DC8B4EAC;
  sub_1DC8BA904();
  sub_1DC8BAB0C();
  return v17(v15, v16, v17, v18, v19, v20, v21, v22, v24, a10);
}

uint64_t sub_1DC8B4EAC()
{
  sub_1DC886900();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC8BA85C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88679C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 392) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1DC886854();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    uint64_t v10 = sub_1DC8BAA00();
    uint64_t v11 = (void *)sub_1DC8BAD20(v10);
    *uint64_t v11 = v12;
    v11[1] = sub_1DC8B505C;
    uint64_t v13 = sub_1DC8BAB74();
    return v14(v13);
  }
}

uint64_t sub_1DC8B4FE4()
{
  sub_1DC886900();
  sub_1DC8BACA4();
  sub_1DC8BAC38();
  swift_unknownObjectRelease();

  sub_1DC8BAC98();
  sub_1DC886854();
  return MEMORY[0x1F4188298](v1, v2, v3);
}

uint64_t sub_1DC8B505C()
{
  sub_1DC886900();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC8BA85C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88679C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 408) = v0;
  swift_task_dealloc();
  if (!v0) {
    sub_1DC8BAC80();
  }
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC8B514C()
{
  sub_1DC8867A8();
  swift_release();
  sub_1DC8BA978();
  return v0();
}

uint64_t sub_1DC8B51A8()
{
  sub_1DC8867A8();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 416);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1DC8B520C()
{
  sub_1DC8867A8();
  swift_release();
  sub_1DC886630((uint64_t *)(v0 + 16));
  sub_1DC8BA978();
  return v1();
}

uint64_t sub_1DC8B5274()
{
  sub_1DC8867A8();
  swift_release();
  sub_1DC8BA978();
  return v0();
}

uint64_t sub_1DC8B52D0()
{
  sub_1DC8867A8();
  v0[29] = v1;
  v0[30] = v2;
  uint64_t v3 = type metadata accessor for AccessibilitySoundRecognition.Session(0);
  v0[31] = v3;
  sub_1DC8BADF0(v3);
  v0[32] = sub_1DC8BAE7C();
  uint64_t v4 = sub_1DC87E988(&qword_1EAA9E428);
  sub_1DC8BADF0(v4);
  v0[33] = sub_1DC8BAE7C();
  sub_1DC886854();
  return MEMORY[0x1F4188298](v5, v6, v7);
}

uint64_t sub_1DC8B5374()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  if (qword_1EAA9CFA8 != -1) {
    swift_once();
  }
  sub_1DC8BAA8C();
  if (v2)
  {
    if (qword_1EAA9D1C8 != -1) {
      swift_once();
    }
    uint64_t v3 = sub_1DC8BAD60();
    if (v5)
    {
      v1[27] = v0;
      id v6 = v0;
      sub_1DC87E988(&qword_1EAA9DF60);
      swift_willThrowTypedImpl();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_1DC8BA978();
      sub_1DC8BA86C();
      return v8(v7, v8, v9, v10, v11, v12, v13, v14);
    }
    else
    {
      sub_1DC8BA964(v3, v4);
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v18 = (void *)swift_task_alloc();
      v1[41] = v18;
      *uint64_t v18 = v1;
      v18[1] = sub_1DC8B56BC;
      sub_1DC8BAA68();
      sub_1DC8BA86C();
      return sub_1DC93AB80();
    }
  }
  else
  {
    if (qword_1EAA9D1F0 != -1) {
      swift_once();
    }
    v1[37] = qword_1EAAFF8F8;
    swift_retain();
    uint64_t v16 = (void *)swift_task_alloc();
    v1[38] = v16;
    *uint64_t v16 = v1;
    v16[1] = sub_1DC8B55C4;
    sub_1DC8BA86C();
    return sub_1DC9CA3EC();
  }
}

uint64_t sub_1DC8B55C4()
{
  sub_1DC886900();
  uint64_t v3 = v2;
  sub_1DC886774();
  char v5 = v4;
  sub_1DC8BA85C();
  *id v6 = v5;
  *id v6 = *v1;
  v5[39] = v7;
  unsigned char v5[40] = v8;
  swift_task_dealloc();
  if (v0) {
    v5[55] = v0;
  }
  else {
    v5[43] = v3;
  }
  sub_1DC886854();
  return MEMORY[0x1F4188298](v9, v10, v11);
}

uint64_t sub_1DC8B56BC()
{
  sub_1DC8867A8();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC8BA85C();
  *char v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88679C();
  *id v6 = v5;
  *(void *)(v3 + 336) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_release();
    swift_release();
  }
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC8B57B4()
{
  sub_1DC88688C();
  uint64_t v1 = v0[33];
  sub_1DC8BAC50();
  sub_1DC87E988(&qword_1EAA9E380);
  uint64_t v2 = sub_1DC8BADBC();
  uint64_t v5 = v0[33];
  uint64_t v6 = v0[31];
  if (v2)
  {
    sub_1DC8BAE24(v2, v3, v4, v6);
    sub_1DC8B9BB8(v5, v1, (void (*)(void))type metadata accessor for AccessibilitySoundRecognition.Session);
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1DC8BAB84();
  }
  else
  {
    _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwst_0(v0[33], 1, 1, v6);
    sub_1DC88CC04(v5, &qword_1EAA9E428);
    sub_1DC8B99C4();
    sub_1DC883884();
    sub_1DC8BAC20();
    sub_1DC8818D0((uint64_t)(v0 + 18));
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
  }
  return v7();
}

uint64_t sub_1DC8B58D8()
{
  sub_1DC8867A8();
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1DC8BA978();
  return v0();
}

uint64_t sub_1DC8B5958()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  id v1 = objc_msgSend((id)sub_1DC8BADFC(), sel_remoteObjectProxy);
  sub_1DC8BAC08();
  swift_unknownObjectRelease();
  sub_1DC87E988(&qword_1EAA9E360);
  sub_1DC8BA930();
  v0[44] = v0[28];
  uint64_t v2 = (void *)sub_1DC8BABF0();
  v0[45] = v2;
  sub_1DC8BABE4(v2);
  sub_1DC8BA8B4();
  swift_unknownObjectRetain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[46] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1DC8B5A78;
  sub_1DC8BABD8();
  sub_1DC8BA86C();
  return v8(v4, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1DC8B5A78()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_1DC886774();
  uint64_t v7 = v6;
  sub_1DC8BA85C();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  sub_1DC88679C();
  *uint64_t v10 = v9;
  v7[47] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v7[48] = v3;
    v7[49] = v5;
  }
  sub_1DC886854();
  sub_1DC8BA86C();
  return MEMORY[0x1F4188298](v11, v12, v13);
}

uint64_t sub_1DC8B5B6C()
{
  sub_1DC8BABB4();
  sub_1DC8BAD38();
  swift_release();
  swift_unknownObjectRelease();
  id v1 = (int8x16_t *)sub_1DC886810();
  sub_1DC8BAD98(v1, v2, v3, v4, v5, v6, v7, v8, v9);
  swift_release();
  swift_release();
  sub_1DC8BA91C((uint64_t)&unk_1EAA9E438);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 408) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1DC8B5C4C;
  uint64_t v11 = sub_1DC8BA904();
  return v12(v11);
}

uint64_t sub_1DC8B5C4C()
{
  sub_1DC886900();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC8BA85C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88679C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 416) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1DC886854();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    uint64_t v10 = (void *)sub_1DC8BAA00();
    *(void *)(v3 + 424) = v10;
    *uint64_t v10 = v5;
    v10[1] = sub_1DC8B5E10;
    uint64_t v11 = sub_1DC8BAE10();
    return v12(v11);
  }
}

uint64_t sub_1DC8B5D8C()
{
  sub_1DC886900();
  id v1 = (void *)v0[39];
  swift_release();
  sub_1DC8BAC38();
  swift_unknownObjectRelease();

  v0[55] = v0[47];
  sub_1DC886854();
  return MEMORY[0x1F4188298](v2, v3, v4);
}

uint64_t sub_1DC8B5E10()
{
  sub_1DC8867A8();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC8BA85C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88679C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 432) = v0;
  swift_task_dealloc();
  if (!v0) {
    sub_1DC886630((uint64_t *)(v3 + 16));
  }
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC8B5EF4()
{
  sub_1DC8867A8();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1DC8BA978();
  return v0();
}

uint64_t sub_1DC8B5F60()
{
  sub_1DC8867A8();
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v0 + 232);
  swift_release();
  sub_1DC8B9BB8(v1, v2, (void (*)(void))type metadata accessor for AccessibilitySoundRecognition.Session);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1DC8BAB84();
  return v3();
}

uint64_t sub_1DC8B5FF0()
{
  sub_1DC8867A8();
  swift_release();
  sub_1DC886630((uint64_t *)(v0 + 16));
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1DC8BA978();
  return v1();
}

uint64_t sub_1DC8B6068()
{
  sub_1DC8867A8();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1DC8BA978();
  return v0();
}

uint64_t sub_1DC8B60D4(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 248) = a1;
  *(void *)(v2 + 256) = a2;
  return sub_1DC8BA8F8((uint64_t)sub_1DC8B60EC);
}

uint64_t sub_1DC8B60EC()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  if (qword_1EAA9CFA8 != -1) {
    swift_once();
  }
  sub_1DC8BAA8C();
  if (v1)
  {
    if (qword_1EAA9D1C8 != -1) {
      swift_once();
    }
    uint64_t v2 = qword_1EAAFF888;
    char v3 = qword_1EAAFF890;
    uint64_t v4 = qword_1EAAFF898;
    v0[33] = qword_1EAAFF888;
    v0[34] = v4;
    v0[35] = qword_1EAAFF8A0;
    if (byte_1EAAFF8A8)
    {
      sub_1DC8BAB3C();
      sub_1DC87E988(&qword_1EAA9DF60);
      swift_willThrowTypedImpl();
      sub_1DC8BA978();
      sub_1DC8BA86C();
      return v6(v5, v6, v7, v8, v9, v10, v11, v12);
    }
    else
    {
      sub_1DC8BA964(v2, v3);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_task_alloc();
      sub_1DC8BAD7C();
      v0[40] = v16;
      *uint64_t v16 = v17;
      v16[1] = sub_1DC8B6434;
      sub_1DC8BA86C();
      return sub_1DC93AB80();
    }
  }
  else
  {
    if (qword_1EAA9D1F0 != -1) {
      swift_once();
    }
    v0[36] = qword_1EAAFF8F8;
    swift_retain();
    uint64_t v14 = (void *)swift_task_alloc();
    v0[37] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_1DC8B633C;
    sub_1DC8BA86C();
    return sub_1DC9CA3EC();
  }
}

uint64_t sub_1DC8B633C()
{
  sub_1DC886900();
  uint64_t v3 = v2;
  sub_1DC886774();
  uint64_t v5 = v4;
  sub_1DC8BA85C();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  v5[38] = v7;
  v5[39] = v8;
  swift_task_dealloc();
  if (v0) {
    v5[54] = v0;
  }
  else {
    v5[42] = v3;
  }
  sub_1DC886854();
  return MEMORY[0x1F4188298](v9, v10, v11);
}

uint64_t sub_1DC8B6434()
{
  sub_1DC8867A8();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC8BA85C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88679C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 328) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_release();
    swift_release();
  }
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC8B652C()
{
  sub_1DC88688C();
  sub_1DC8BAC50();
  sub_1DC87E988(&qword_1EAA9E380);
  if (sub_1DC8BAAF0())
  {
    sub_1DC8818D0(v0 + 144);
    **(void **)(v0 + 248) = *(void *)(v0 + 240);
  }
  else
  {
    sub_1DC8B99C4();
    sub_1DC883884();
    sub_1DC8BAC20();
    sub_1DC8818D0(v0 + 144);
  }
  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1DC8B6600()
{
  sub_1DC8867A8();
  swift_release();
  swift_release();
  swift_release();
  sub_1DC8BA978();
  return v0();
}

uint64_t sub_1DC8B6670()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  id v1 = objc_msgSend(*(id *)(v0 + 304), sel_remoteObjectProxy);
  sub_1DC8BAC08();
  swift_unknownObjectRelease();
  sub_1DC87E988(&qword_1EAA9E360);
  sub_1DC8BA930();
  *(void *)(v0 + 344) = *(void *)(v0 + 232);
  uint64_t v2 = (void *)sub_1DC8BABF0();
  *(void *)(v0 + 352) = v2;
  sub_1DC8BABE4(v2);
  sub_1DC8BA8B4();
  swift_unknownObjectRetain();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 360) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1DC8B679C;
  sub_1DC8BABD8();
  sub_1DC8BA86C();
  return v8(v4, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1DC8B679C()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_1DC886774();
  uint64_t v7 = v6;
  sub_1DC8BA85C();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  sub_1DC88679C();
  *uint64_t v10 = v9;
  v7[46] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v7[47] = v3;
    v7[48] = v5;
  }
  sub_1DC886854();
  sub_1DC8BA86C();
  return MEMORY[0x1F4188298](v11, v12, v13);
}

uint64_t sub_1DC8B6890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1DC8BAB24();
  sub_1DC8BABB4();
  uint64_t v12 = v10[47];
  uint64_t v11 = v10[48];
  uint64_t v13 = (void *)v10[38];
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v14 = sub_1DC886810();
  v10[49] = v14;
  *(void *)(v14 + 16) = v11;
  *(void *)(v14 + 24) = v12;

  swift_release();
  swift_release();
  sub_1DC8BA91C((uint64_t)&unk_1EAA9E610);
  uint64_t v27 = v15;
  swift_task_alloc();
  sub_1DC8BAD7C();
  v10[50] = v16;
  *uint64_t v16 = v17;
  v16[1] = sub_1DC8B6988;
  sub_1DC8BA984();
  sub_1DC8BAB0C();
  return v20(v18, v19, v20, v21, v22, v23, v24, v25, v27, a10);
}

uint64_t sub_1DC8B6988()
{
  sub_1DC886900();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC8BA85C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88679C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 408) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1DC886854();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1EAAA2918 + dword_1EAAA2918);
    swift_task_alloc();
    sub_1DC8BAD7C();
    *(void *)(v3 + 416) = v10;
    *uint64_t v10 = v11;
    v10[1] = sub_1DC8B6B6C;
    return v13(v3 + 216, v3 + 16);
  }
}

uint64_t sub_1DC8B6AE8()
{
  sub_1DC886900();
  id v1 = (void *)v0[38];
  swift_release();
  sub_1DC8BAC38();
  swift_unknownObjectRelease();

  v0[54] = v0[46];
  sub_1DC886854();
  return MEMORY[0x1F4188298](v2, v3, v4);
}

uint64_t sub_1DC8B6B6C()
{
  sub_1DC8867A8();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC8BA85C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88679C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 424) = v0;
  swift_task_dealloc();
  if (!v0) {
    sub_1DC886630((uint64_t *)(v3 + 16));
  }
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC8B6C50()
{
  sub_1DC8867A8();
  swift_release();
  sub_1DC8BA978();
  return v0();
}

uint64_t sub_1DC8B6CAC()
{
  sub_1DC8867A8();
  swift_release();
  **(void **)(v0 + 248) = *(void *)(v0 + 216);
  sub_1DC8BAB84();
  return v1();
}

uint64_t sub_1DC8B6D10()
{
  sub_1DC8867A8();
  swift_release();
  sub_1DC886630((uint64_t *)(v0 + 16));
  sub_1DC8BA978();
  return v1();
}

uint64_t sub_1DC8B6D78()
{
  sub_1DC8867A8();
  swift_release();
  sub_1DC8BA978();
  return v0();
}

void *sub_1DC8B6DD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v210 = a2;
  uint64_t v203 = a1;
  uint64_t v192 = *v2;
  sub_1DC87E988(&qword_1EAA9E480);
  sub_1DC89D4E0();
  uint64_t v200 = v5;
  MEMORY[0x1F4188790](v6);
  uint64_t v201 = sub_1DC87E988(&qword_1EAA9E488);
  sub_1DC89D4E0();
  float32x4_t v202 = v7;
  MEMORY[0x1F4188790](v8);
  uint64_t v179 = sub_1DC87E988((uint64_t *)&unk_1EAAA3CA0);
  sub_1DC89D4E0();
  uint64_t v178 = v9;
  MEMORY[0x1F4188790](v10);
  sub_1DC88D550();
  sub_1DC888164(v11);
  uint64_t v12 = sub_1DC87E988(&qword_1EAA9E490);
  uint64_t v13 = sub_1DC8BADF0(v12);
  MEMORY[0x1F4188790](v13);
  sub_1DC88D550();
  sub_1DC888164(v14);
  uint64_t v190 = sub_1DC87E988(&qword_1EAA9E498);
  sub_1DC89D4E0();
  uint64_t v188 = v15;
  MEMORY[0x1F4188790](v16);
  sub_1DC88D550();
  uint64_t v182 = v17;
  uint64_t v199 = sub_1DCB870B8();
  sub_1DC89D4E0();
  uint64_t v198 = v18;
  MEMORY[0x1F4188790](v19);
  sub_1DC88D550();
  sub_1DC888164(v20);
  uint64_t v187 = sub_1DC87E988(&qword_1EAA9E4A0);
  sub_1DC89D4E0();
  uint64_t v185 = v21;
  MEMORY[0x1F4188790](v22);
  sub_1DC88D550();
  sub_1DC888164(v23);
  uint64_t v189 = sub_1DC87E988(&qword_1EAA9E4A8);
  sub_1DC89D4E0();
  uint64_t v186 = v24;
  MEMORY[0x1F4188790](v25);
  sub_1DC88D550();
  sub_1DC888164(v26);
  uint64_t v183 = sub_1DC87E988(&qword_1EAA9E4B0);
  sub_1DC88819C();
  MEMORY[0x1F4188790](v27);
  sub_1DC88D550();
  sub_1DC888164(v28);
  uint64_t v180 = sub_1DC87E988(&qword_1EAA9E4B8);
  sub_1DC88819C();
  MEMORY[0x1F4188790](v29);
  sub_1DC88D550();
  sub_1DC888164(v30);
  uint64_t v168 = sub_1DC87E988(&qword_1EAA9E4C0);
  sub_1DC88819C();
  MEMORY[0x1F4188790](v31);
  sub_1DC88D550();
  sub_1DC888164(v32);
  uint64_t v172 = sub_1DC87E988(&qword_1EAA9E4C8);
  sub_1DC89D4E0();
  uint64_t v171 = v33;
  MEMORY[0x1F4188790](v34);
  sub_1DC88D550();
  sub_1DC888164(v35);
  uint64_t v174 = sub_1DC87E988(&qword_1EAAAABA0);
  sub_1DC89D4E0();
  uint64_t v173 = v36;
  MEMORY[0x1F4188790](v37);
  sub_1DC88D550();
  sub_1DC888164(v38);
  uint64_t v39 = sub_1DC87E988(&qword_1EAA9E4D0);
  sub_1DC89D4E0();
  uint64_t v176 = v40;
  MEMORY[0x1F4188790](v41);
  sub_1DC88D550();
  uint64_t v175 = v42;
  uint64_t v196 = sub_1DCB86BF8();
  sub_1DC89D4E0();
  uint64_t v193 = v43;
  MEMORY[0x1F4188790](v44);
  sub_1DC888164((uint64_t)&v160 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v46);
  sub_1DC888164((uint64_t)&v160 - v47);
  uint64_t v166 = v48;
  MEMORY[0x1F4188790](v49);
  sub_1DC888164((uint64_t)&v160 - v50);
  sub_1DC87E988(&qword_1EAA9E4D8);
  uint64_t v51 = sub_1DC8BABC0();
  uint64_t v52 = self;
  *(void *)(v51 + 16) = sub_1DC8BAAAC(v52);
  sub_1DC87E988(&qword_1EAA9E4E0);
  sub_1DC886810();
  uint64_t v53 = sub_1DC8BAA7C();
  v4[3] = sub_1DC9AE954(v53);
  sub_1DC87E988(&qword_1EAA9E4E8);
  sub_1DC8BABC0();
  uint64_t v54 = (void *)sub_1DC8BAC68();
  *(void *)(v51 + 16) = sub_1DC8BAAAC(v54);
  sub_1DC87E988(&qword_1EAA9E4F0);
  sub_1DC886810();
  uint64_t v55 = sub_1DC8BAA7C();
  void v4[4] = sub_1DC9AE954(v55);
  sub_1DC87E988(&qword_1EAA9E4F8);
  sub_1DC8BABC0();
  long long v56 = (void *)sub_1DC8BAC68();
  *(void *)(v51 + 16) = sub_1DC8BAAAC(v56);
  sub_1DC87E988(&qword_1EAA9E500);
  sub_1DC886810();
  uint64_t v57 = sub_1DC8BAA7C();
  v4[5] = sub_1DC9AE954(v57);
  sub_1DC87E988(&qword_1EAA9E508);
  sub_1DC8BABC0();
  CMTimeFlags v58 = (void *)sub_1DC8BAC68();
  *(void *)(v51 + 16) = sub_1DC8BAAAC(v58);
  sub_1DC87E988(&qword_1EAA9E510);
  sub_1DC886810();
  uint64_t v59 = sub_1DC8BAA7C();
  v4[6] = sub_1DC9AE954(v59);
  sub_1DC87E988(&qword_1EAA9E518);
  sub_1DC8BABC0();
  CMTimeFlags v60 = (void *)sub_1DC8BAC68();
  *(void *)(v51 + 16) = sub_1DC8BAAAC(v60);
  sub_1DC87E988(&qword_1EAA9E520);
  sub_1DC886810();
  uint64_t v61 = sub_1DC8BAA7C();
  v4[7] = sub_1DC9AE954(v61);
  sub_1DC87E988(&qword_1EAA9E528);
  sub_1DC8BABC0();
  CMTimeFlags v62 = (void *)sub_1DC8BAC68();
  *(void *)(v51 + 16) = sub_1DC8BAAAC(v62);
  sub_1DC87E988(&qword_1EAA9E530);
  sub_1DC886810();
  uint64_t v63 = sub_1DC8BAA7C();
  v4[8] = sub_1DC9AE954(v63);
  sub_1DC87E988(&qword_1EAA9E538);
  sub_1DC8BABC0();
  CMTimeValue v64 = (void *)sub_1DC8BAC68();
  *(void *)(v51 + 16) = sub_1DC8BAAAC(v64);
  sub_1DC87E988(&qword_1EAA9E540);
  sub_1DC886810();
  uint64_t v65 = sub_1DC8BAA7C();
  v4[9] = sub_1DC9AE954(v65);
  sub_1DC87E988(&qword_1EAA9E548);
  sub_1DC8BABC0();
  uint64_t v66 = (void *)sub_1DC8BAC68();
  *(void *)(v51 + 16) = sub_1DC8BAAAC(v66);
  sub_1DC87E988(&qword_1EAA9E550);
  sub_1DC886810();
  uint64_t v67 = sub_1DC8BAA7C();
  v4[10] = sub_1DC9AE954(v67);
  sub_1DC87E988(&qword_1EAA9E558);
  sub_1DC8BABC0();
  uint64_t v68 = (void *)sub_1DC8BAC68();
  *(void *)(v51 + 16) = sub_1DC8BAAAC(v68);
  sub_1DC87E988(&qword_1EAA9E560);
  sub_1DC886810();
  uint64_t v69 = sub_1DC8BAA7C();
  v4[11] = sub_1DC9AE954(v69);
  sub_1DC87E988(&qword_1EAA9E568);
  sub_1DC8BABC0();
  CMTimeRange v70 = (void *)sub_1DC8BAC68();
  *(void *)(v51 + 16) = sub_1DC8BAAAC(v70);
  sub_1DC87E988(&qword_1EAA9E570);
  sub_1DC886810();
  uint64_t v71 = sub_1DC8BAA7C();
  v4[12] = sub_1DC9AE954(v71);
  sub_1DC87E988(&qword_1EAA9E578);
  sub_1DC8BABC0();
  uint64_t v72 = (void *)sub_1DC8BAC68();
  *(void *)(v51 + 16) = sub_1DC8BAAAC(v72);
  sub_1DC87E988(&qword_1EAA9E580);
  sub_1DC886810();
  uint64_t v73 = sub_1DC8BAA7C();
  v4[13] = sub_1DC9AE954(v73);
  uint64_t result = (id)MobileGestalt_get_current_device();
  if (!result) {
    goto LABEL_33;
  }
  long long v75 = result;
  int exclaveCapability = MobileGestalt_get_exclaveCapability();

  if (exclaveCapability)
  {
    uint64_t v77 = MGGetProductType();
    BOOL v78 = sub_1DC983400(v77);
  }
  else
  {
    BOOL v78 = 0;
  }
  uint64_t v165 = v39;
  if (qword_1EAA9CAC0 != -1) {
    swift_once();
  }
  id v79 = objc_msgSend((id)qword_1EAA9CAB8, sel_dictionaryRepresentation);
  sub_1DCB877B8();

  id v80 = sub_1DCAA49F8();
  if (v3)
  {

    swift_bridgeObjectRelease();
    if (!v78)
    {
LABEL_18:
      sub_1DC8B9C88();
      uint64_t v86 = swift_allocError();
      swift_willThrow();
      uint64_t v208 = v86;
      char v209 = 1;
      sub_1DC87E988(&qword_1EAA9DF60);
      unint64_t v206 = MEMORY[0x1E4FBC860];
      sub_1DC87E988(&qword_1EAA9E590);
      sub_1DC88CF34(&qword_1EAAA5250, &qword_1EAA9E590);
      sub_1DCB87AE8();
      sub_1DCB87178();
      sub_1DC8BAD88();
      sub_1DC88D5C8();
      v87();
      sub_1DC88CF34(&qword_1EAA9E598, &qword_1EAA9E488);
      uint64_t v88 = sub_1DCB873A8();
      sub_1DC88D5C8();
      v89();
LABEL_19:
      sub_1DC8B9F3C((uint64_t)&v208, (uint64_t)(v4 + 14), &qword_1EAA9E340);
      v4[20] = v88;
      type metadata accessor for SNAOPUtils.Analytics();
      swift_allocObject();
      swift_retain();
      uint64_t v90 = v210;
      swift_retain();
      v4[2] = sub_1DC9E20E4(v203, v90);
      swift_release();
      swift_release();
      sub_1DC88CC04((uint64_t)&v208, &qword_1EAA9E340);
      return v4;
    }
  }
  else
  {
    id v82 = v80;
    char v83 = v81;
    swift_bridgeObjectRelease();
    BOOL v84 = v82 != 0;
    if (v83) {
      BOOL v84 = v78;
    }
    if (!v84) {
      goto LABEL_18;
    }
  }
  if (qword_1EAA9CFA8 != -1) {
    swift_once();
  }
  sub_1DC8BAA8C();
  if (!v85) {
    goto LABEL_18;
  }
  uint64_t v91 = sub_1DCA60888();
  v204[3] = type metadata accessor for SoundAnalysisService.Service();
  v204[4] = &off_1F37E2A40;
  v204[0] = v91;
  char v205 = 0;
  sub_1DC8B9CD4((uint64_t)v204, (uint64_t)&v206, &qword_1EAA9E340);
  sub_1DC8B9CD4((uint64_t)&v206, (uint64_t)&v208, &qword_1EAA9E340);
  type metadata accessor for AsyncDispatchQueue();
  swift_allocObject();
  uint64_t v92 = sub_1DCA1386C();
  sub_1DC87E988(&qword_1EAA9E5A0);
  swift_allocObject();
  uint64_t v93 = sub_1DCB872B8();
  uint64_t v94 = sub_1DC886810();
  *(void *)(v94 + 16) = v92;
  *(void *)(v94 + 24) = v93;
  uint64_t v95 = sub_1DC886810();
  *(void *)(v95 + 16) = v92;
  *(void *)(v95 + 24) = v93;
  type metadata accessor for ICACConnection();
  swift_allocObject();
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  swift_retain();
  uint64_t v96 = (uint64_t (*)@<X0>(uint64_t *@<X8>))sub_1DC89DDA8();
  uint64_t v163 = v95;
  uint64_t v164 = v94;
  uint64_t v200 = v92;
  uint64_t v201 = 0;
  sub_1DCB86BE8();
  sub_1DCB86BE8();
  sub_1DCA59BA0();
  uint64_t v98 = v97;
  swift_bridgeObjectRelease();
  double v99 = (double)v98;
  uint64_t v100 = sub_1DCA59BA0();
  swift_bridgeObjectRelease();
  double v101 = v99 / (double)v100;
  uint64_t v192 = v93;
  unint64_t v206 = v93;
  int v102 = *MEMORY[0x1E4F1A8F8];
  float32x4_t v202 = v96;
  uint64_t v103 = v198;
  uint64_t v104 = *(void *)(v198 + 104);
  uint64_t v105 = v194;
  int v161 = v102;
  uint64_t v162 = v198 + 104;
  uint64_t v160 = v104;
  sub_1DC8BAE70();
  v106();
  uint64_t v107 = v188;
  uint64_t v108 = v182;
  uint64_t v109 = v190;
  sub_1DC8BAE70();
  v110();
  sub_1DC88CF34(&qword_1EAA9E5A8, &qword_1EAA9E5A0);
  sub_1DCB87478();
  (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v108, v109);
  uint64_t v111 = *(void (**)(uint64_t, uint64_t))(v103 + 8);
  uint64_t v198 = v103 + 8;
  v111(v105, v199);
  uint64_t v112 = v202;
  sub_1DC88CF34(&qword_1EAA9E5B0, &qword_1EAA9E4A0);
  uint64_t v113 = v184;
  sub_1DCB874A8();
  sub_1DC8BAD88();
  sub_1DC88D5C8();
  v114();
  uint64_t v115 = v186;
  uint64_t v116 = (uint64_t)v191;
  uint64_t v117 = v189;
  (*(void (**)(void (*)(uint64_t, uint64_t), uint64_t, uint64_t))(v186 + 16))(v191, v113, v189);
  uint64_t v118 = (uint64_t (**)@<X0>(uint64_t *@<X8>))(v116 + *(int *)(v183 + 44));
  *uint64_t v118 = sub_1DC8B9D64;
  v118[1] = v112;
  uint64_t v119 = *(void (**)(uint64_t, uint64_t))(v115 + 8);
  swift_retain();
  v119(v113, v117);
  unint64_t v206 = 0;
  unint64_t v207 = 0xE000000000000000;
  sub_1DCB88A98();
  sub_1DCB87A18();
  uint64_t v120 = sub_1DC8B9D80(&qword_1EAAA41A0, 255, MEMORY[0x1E4F27990]);
  sub_1DCB88F98();
  sub_1DCB87A18();
  swift_bridgeObjectRelease();
  uint64_t result = (void *)sub_1DCB87A18();
  double v121 = v101 * 5.0;
  if ((~COERCE__INT64(v101 * 5.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v121 <= -9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v121 >= 9.22337204e18)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  unint64_t v122 = v206;
  unint64_t v123 = v207;
  uint64_t v124 = (uint64_t)v121;
  uint64_t v125 = swift_allocObject();
  *(unsigned char *)(v125 + 16) = 0;
  *(void *)(v125 + 24) = v122;
  *(void *)(v125 + 32) = v123;
  *(void *)(v125 + 40) = v124;
  uint64_t v126 = (void *)swift_allocObject();
  v126[2] = 0;
  v126[3] = sub_1DC8B9E2C;
  v126[4] = v125;
  uint64_t v127 = (void *)swift_allocObject();
  v127[2] = sub_1DC8B9E98;
  v127[3] = v126;
  v127[4] = v124;
  uint64_t v128 = v181;
  sub_1DC8B9F3C(v116, v181, &qword_1EAA9E4B0);
  uint64_t v129 = v180;
  uint64_t v130 = (void *)(v128 + *(int *)(v180 + 52));
  *uint64_t v130 = sub_1DC9F8560;
  v130[1] = 0;
  uint64_t v131 = (void *)(v128 + *(int *)(v129 + 56));
  *uint64_t v131 = sub_1DC8B9F00;
  v131[1] = v127;
  uint64_t result = (void *)sub_1DC88CC04(v116, &qword_1EAA9E4B0);
  if ((~*(void *)&v101 & 0x7FF0000000000000) == 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v101 > -9.22337204e18)
  {
    uint64_t v190 = v120;
    float32x4_t v191 = v111;
    if (v101 < 9.22337204e18)
    {
      uint64_t v132 = swift_allocObject();
      *(_OWORD *)(v132 + 16) = xmmword_1DCBB9530;
      *(void *)(v132 + 32) = (uint64_t)v101;
      uint64_t v133 = v169;
      sub_1DC8B9F3C(v128, v169, &qword_1EAA9E4B8);
      uint64_t v134 = v168;
      uint64_t v135 = (uint64_t (**)@<X0>(uint64_t@<X8>))(v133 + *(int *)(v168 + 52));
      *uint64_t v135 = sub_1DC8B947C;
      v135[1] = 0;
      uint64_t v136 = (void *)(v133 + *(int *)(v134 + 56));
      *uint64_t v136 = sub_1DC8B9F1C;
      v136[1] = v132;
      sub_1DC88CC04(v128, &qword_1EAA9E4B8);
      uint64_t v137 = v170;
      sub_1DCB11E14();
      sub_1DCB120F0();
      uint64_t v139 = v138;
      sub_1DC88CC04(v137, &qword_1EAA9E490);
      sub_1DC88CC04(v133, &qword_1EAA9E4C0);
      v204[0] = v139;
      uint64_t v140 = v193;
      uint64_t v141 = v167;
      uint64_t v142 = v196;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v193 + 16))(v167, v195, v196);
      sub_1DC8B9F3C((uint64_t)&v208, (uint64_t)&v206, &qword_1EAA9E340);
      uint64_t v143 = v140;
      unint64_t v144 = (*(unsigned __int8 *)(v140 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80);
      unint64_t v145 = (v166 + v144 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v146 = swift_allocObject();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v143 + 32))(v146 + v144, v141, v142);
      sub_1DC8B9CD4((uint64_t)&v206, v146 + v145, &qword_1EAA9E340);
      sub_1DC87E988(&qword_1EAA9E5B8);
      sub_1DC88CF34(&qword_1EAA9E5C0, &qword_1EAA9E5B8);
      sub_1DCB874A8();
      swift_release();
      swift_release();
      uint64_t v147 = v194;
      uint64_t v148 = v199;
      sub_1DC8BAE70();
      v149();
      uint64_t v150 = v177;
      *uint64_t v177 = sub_1DC8B8AC8;
      v150[1] = 0;
      uint64_t v151 = v178;
      uint64_t v152 = v179;
      sub_1DC8BAE70();
      v153();
      sub_1DC88CF34(&qword_1EAA9E5C8, &qword_1EAA9E4C8);
      sub_1DCB87478();
      (*(void (**)(uint64_t (**)@<X0>(uint64_t *@<X8>), uint64_t))(v151 + 8))(v150, v152);
      v191(v147, v148);
      sub_1DC88D5C8();
      v154();
      unint64_t v206 = 0;
      unint64_t v207 = 0xE000000000000000;
      sub_1DCB88A98();
      swift_bridgeObjectRelease();
      unint64_t v206 = 0xD00000000000001ALL;
      unint64_t v207 = 0x80000001DCB911C0;
      uint64_t v155 = v197;
      uint64_t v156 = v196;
      sub_1DCB88F98();
      sub_1DCB87A18();
      swift_bridgeObjectRelease();
      sub_1DCB87A18();
      sub_1DCB04D7C();
      swift_bridgeObjectRelease();
      sub_1DC88D5C8();
      v157();
      sub_1DC88CF34(&qword_1EAA9E5D0, &qword_1EAA9E4D0);
      uint64_t v88 = sub_1DCB873A8();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      sub_1DC8BAD88();
      sub_1DC88D5C8();
      v158();
      uint64_t v159 = *(void (**)(uint64_t, uint64_t))(v193 + 8);
      v159(v155, v156);
      v159(v195, v156);
      goto LABEL_19;
    }
    goto LABEL_32;
  }
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_1DC8B8510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)swift_allocObject();
  id v7[2] = a4;
  v7[3] = a1;
  v7[4] = a2;
  swift_retain();
  sub_1DCA13770((uint64_t)&unk_1EAA9E5F8, (uint64_t)v7);

  return swift_release();
}

uint64_t sub_1DC8B85A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 32) = a1;
  *(void *)(v3 + 40) = a3;
  return MEMORY[0x1F4188298](sub_1DC8B85C4, 0, 0);
}

uint64_t sub_1DC8B85C4()
{
  sub_1DC8867A8();
  *(void *)(v0 + 16) = *(void *)(v0 + 40);
  *(unsigned char *)(v0 + 24) = 0;
  sub_1DCB87298();
  sub_1DC8BA978();
  return v1();
}

uint64_t sub_1DC8B8628(void *a1, uint64_t a2, uint64_t a3)
{
  if (qword_1EAA9C658 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_1DCB86FE8();
  sub_1DC89F57C(v5, (uint64_t)qword_1EAAFF810);
  id v6 = a1;
  id v7 = a1;
  uint64_t v8 = sub_1DCB86FC8();
  os_log_type_t v9 = sub_1DCB88488();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 138412290;
    id v12 = a1;
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    sub_1DCB88778();
    *uint64_t v11 = v16;

    _os_log_impl(&dword_1DC873000, v8, v9, "Received ICAC Lapse Callback with error: %@", v10, 0xCu);
    sub_1DC87E988((uint64_t *)&unk_1EAAA5940);
    swift_arrayDestroy();
    MEMORY[0x1E01A99C0](v11, -1, -1);
    MEMORY[0x1E01A99C0](v10, -1, -1);
  }
  else
  {
  }
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a3;
  *(void *)(v13 + 24) = a1;
  id v14 = a1;
  swift_retain();
  sub_1DCA13770((uint64_t)&unk_1EAA9E5E8, v13);
  return swift_release();
}

uint64_t sub_1DC8B8838(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return MEMORY[0x1F4188298](sub_1DC8B8858, 0, 0);
}

uint64_t sub_1DC8B8858()
{
  sub_1DC886900();
  id v1 = *(void **)(v0 + 40);
  id v2 = v1;
  swift_willThrow();
  *(void *)(v0 + 16) = v1;
  *(unsigned char *)(v0 + 24) = 1;
  sub_1DCB87298();

  sub_1DC8BA978();
  return v3();
}

uint64_t sub_1DC8B88E0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  id v2 = *(void **)result;
  if (*(unsigned char *)(result + 8))
  {
    id v3 = v2;
    sub_1DC87E988(&qword_1EAA9DF60);
    return swift_willThrowTypedImpl();
  }
  else
  {
    *a2 = v2;
  }
  return result;
}

uint64_t sub_1DC8B8940@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for ICACIOSession();
  swift_allocObject();
  uint64_t v3 = swift_retain();
  uint64_t result = sub_1DC89F49C(v3);
  if (!v1) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_1DC8B89A4()
{
  uint64_t v0 = sub_1DCB86BA8();
  sub_1DC8B9674(v0, v1, (void (*)(uint64_t))sub_1DC8BA130);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1DC8B8A28(uint64_t a1)
{
  sub_1DC8B9F3C(a1, (uint64_t)v2, &qword_1EAA9E340);
  if (v3)
  {
    sub_1DC87E988(&qword_1EAA9DF60);
    return swift_willThrowTypedImpl();
  }
  else
  {
    sub_1DC8BA1CC(v2, (uint64_t)v4);
    sub_1DC881A8C(v4, v4[3]);
    sub_1DCB3DE20();
    return sub_1DC8818D0((uint64_t)v4);
  }
}

uint64_t sub_1DC8B8AC8@<X0>(uint64_t *a1@<X8>)
{
  sub_1DC8BA0E4();
  uint64_t result = swift_allocError();
  *a1 = result;
  return result;
}

uint64_t sub_1DC8B8B08()
{
  swift_retain();
  sub_1DC87E988((uint64_t *)&unk_1EAAA5210);
  sub_1DC88CF34(&qword_1EAAA5220, (uint64_t *)&unk_1EAAA5210);
  sub_1DCB87468();
  sub_1DC87E988(&qword_1EAA9E348);
  sub_1DC886810();
  uint64_t v0 = sub_1DC8BAA7C();
  sub_1DC9C5478(v0);
  swift_release();
  sub_1DC88CF34(&qword_1EAA9E350, &qword_1EAA9E348);
  uint64_t v1 = sub_1DCB873A8();
  swift_release();
  type metadata accessor for SharedSecureMicrophone.Instance();
  uint64_t result = sub_1DC8BABC0();
  *(void *)(result + 16) = v1;
  return result;
}

void *sub_1DC8B8C20()
{
  if (qword_1EAA9D298 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1EAAFFBA0;
  uint64_t v1 = *(void *)algn_1EAAFFBA8;
  type metadata accessor for AnalysisServerEnvironmentSharedImpl();
  uint64_t v2 = swift_allocObject();
  swift_retain();
  uint64_t result = sub_1DC8B6DD4(v0, v1);
  qword_1EAAFF858 = v2;
  byte_1EAAFF860 = 0;
  return result;
}

uint64_t sub_1DC8B8CD4()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1DC88CC04(v0 + 112, &qword_1EAA9E340);
  swift_release();
  return v0;
}

uint64_t sub_1DC8B8D64()
{
  sub_1DC8B8CD4();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AnalysisServerEnvironmentSharedImpl()
{
  return self;
}

void type metadata accessor for AnalysisClientEnvironment()
{
}

uint64_t sub_1DC8B8DC8()
{
  return swift_retain();
}

uint64_t sub_1DC8B8DD0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1DC8B8DC8();
  *a1 = result;
  return result;
}

uint64_t sub_1DC8B8DF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  char v4 = *((unsigned char *)v1 + 16);
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  swift_retain();
  swift_retain();

  return swift_retain();
}

uint64_t sub_1DC8B8E4C()
{
  return (*v0)();
}

uint64_t sub_1DC8B8E74()
{
  return sub_1DC8B8E4C();
}

uint64_t sub_1DC8B8E8C@<X0>(uint64_t a1@<X8>)
{
  return sub_1DC8B9F3C(*v1 + 112, a1, &qword_1EAA9E340);
}

uint64_t sub_1DC8B8EB8@<X0>(uint64_t a1@<X8>)
{
  return sub_1DC8AF4F0(a1);
}

void *sub_1DC8B8EF4(long long *a1)
{
  uint64_t v1 = *((void *)a1 + 2);
  uint64_t v2 = *((void *)a1 + 3);
  char v3 = *((unsigned char *)a1 + 48);
  char v4 = *((unsigned char *)a1 + 49);
  char v5 = *((unsigned char *)a1 + 50);
  char v6 = *((unsigned char *)a1 + 51);
  char v7 = *((unsigned char *)a1 + 52);
  char v8 = *((unsigned char *)a1 + 53);
  uint64_t v9 = *((void *)a1 + 7);
  char v10 = *((unsigned char *)a1 + 64);
  long long v12 = *a1;
  uint64_t v13 = v1;
  uint64_t v14 = v2;
  long long v15 = a1[2];
  char v16 = v3;
  char v17 = v4;
  char v18 = v5;
  char v19 = v6;
  char v20 = v7;
  char v21 = v8;
  uint64_t v22 = v9;
  char v23 = v10;
  return sub_1DCB051E0((uint64_t)&v12);
}

uint64_t sub_1DC8B8F70()
{
  return swift_retain();
}

uint64_t sub_1DC8B8F7C()
{
  return swift_retain();
}

uint64_t sub_1DC8B8F88()
{
  return swift_retain();
}

uint64_t sub_1DC8B8F94()
{
  return swift_retain();
}

unint64_t sub_1DC8B8FA4()
{
  unint64_t result = qword_1EAA9E2F8;
  if (!qword_1EAA9E2F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E2F8);
  }
  return result;
}

unint64_t sub_1DC8B8FF4()
{
  unint64_t result = qword_1EAA9E300;
  if (!qword_1EAA9E300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E300);
  }
  return result;
}

unint64_t sub_1DC8B9044()
{
  unint64_t result = qword_1EAA9E308;
  if (!qword_1EAA9E308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E308);
  }
  return result;
}

uint64_t sub_1DC8B9090(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1DC8B9D80(&qword_1EAA9E310, a2, (void (*)(uint64_t))type metadata accessor for AnalysisServerEnvironmentSharedImpl);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1DC8B90E8(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1DC8B9D80(&qword_1EAA9E318, a2, (void (*)(uint64_t))type metadata accessor for AnalysisServerEnvironmentSharedImpl);
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **sub_1DC8B9140()
{
  return &off_1F37EF080;
}

uint64_t sub_1DC8B914C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1DC8B9D80(&qword_1EAA9E320, a2, (void (*)(uint64_t))type metadata accessor for AnalysisServerEnvironmentSharedImpl);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1DC8B91A4(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1DC8B9D80(&qword_1EAA9E328, a2, (void (*)(uint64_t))type metadata accessor for AnalysisServerEnvironmentSharedImpl);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1DC8B91FC(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1DC8B9D80(&qword_1EAA9E330, a2, (void (*)(uint64_t))type metadata accessor for AnalysisServerEnvironmentSharedImpl);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1DC8B9254(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1DC8B9D80(&qword_1EAA9E338, a2, (void (*)(uint64_t))type metadata accessor for AnalysisServerEnvironmentSharedImpl);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1DC8B92AC(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)(v3 + 64) = a1;
  char v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)a3 + *a3);
  char v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 72) = v5;
  *char v5 = v3;
  v5[1] = sub_1DC8B9398;
  return v7(v3 + 16, a2);
}

uint64_t sub_1DC8B9398()
{
  sub_1DC886900();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC8BA85C();
  *char v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88679C();
  *char v6 = v5;
  swift_task_dealloc();
  if (!v0)
  {
    char v7 = *(_OWORD **)(v3 + 64);
    long long v8 = *(_OWORD *)(v3 + 32);
    long long v9 = *(_OWORD *)(v3 + 48);
    *char v7 = *(_OWORD *)(v3 + 16);
    v7[1] = v8;
    id v7[2] = v9;
  }
  char v10 = *(uint64_t (**)(void))(v5 + 8);
  return v10();
}

uint64_t sub_1DC8B947C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_1DC9F88DC();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_1DC8B94B8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t))
{
  if (a5)
  {
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = a5;
    *(void *)(v14 + 24) = a6;
    long long v15 = sub_1DC8BA1B0;
  }
  else
  {
    long long v15 = sub_1DCA0D958;
  }
  if (a7)
  {
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = a7;
    *(void *)(v16 + 24) = a8;
    char v17 = (void (*)(uint64_t, uint64_t *, uint64_t *))sub_1DC8BA1A8;
  }
  else
  {
    char v17 = (void (*)(uint64_t, uint64_t *, uint64_t *))sub_1DCA0D9D4;
  }
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  char v27 = a4;
  sub_1DC8BA198(a5);
  sub_1DC8BA198(a7);
  ((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t *))v15)(&v28, a1, &v25);
  uint64_t v18 = swift_release();
  if (!v21)
  {
    uint64_t v19 = v28;
    a9(v18);
    uint64_t v25 = a2;
    uint64_t v26 = a3;
    char v27 = a4;
    uint64_t v28 = v19;
    v17(a1, &v25, &v28);
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1DC8B9674(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v6 = sub_1DCB86F68();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  long long v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EAA9CB60 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_1DC89F57C(v6, (uint64_t)qword_1EAAFF838);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  swift_bridgeObjectRetain();
  sub_1DC8B94B8((uint64_t)v9, (uint64_t)"AudioBufferProcessed", 20, 2, (uint64_t)sub_1DC8BA17C, v11, 0, 0, a3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release();
}

uint64_t sub_1DC8B983C()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  sub_1DC8BA950();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1DC886800(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_1DC8BA814;
  sub_1DC8BA8DC();
  sub_1DC8BA86C();
  return sub_1DC8FBFA8();
}

uint64_t sub_1DC8B98CC()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  sub_1DC8BAA9C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1DC886800(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_1DC8BA814;
  sub_1DC8BA880();
  sub_1DC8BA86C();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1DC8B9960(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_1DC8B99C4()
{
  unint64_t result = qword_1EAA9E388;
  if (!qword_1EAA9E388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E388);
  }
  return result;
}

uint64_t sub_1DC8B9A18()
{
  swift_release();
  sub_1DC8BADE0();

  return swift_deallocObject();
}

uint64_t sub_1DC8B9A48()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  sub_1DC8BAA9C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1DC886800(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_1DC8B9ADC;
  sub_1DC8BA880();
  sub_1DC8BA86C();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1DC8B9ADC()
{
  sub_1DC8867A8();
  sub_1DC886774();
  uint64_t v1 = *v0;
  sub_1DC88679C();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_1DC8BA978();
  return v3();
}

uint64_t sub_1DC8B9BB8(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_1DC88819C();
  uint64_t v4 = sub_1DC8BAE5C();
  v5(v4);
  return a2;
}

uint64_t sub_1DC8B9C10(uint64_t a1)
{
  return a1;
}

uint64_t sub_1DC8B9C40(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1DC8AF450(a1, a2);
  }
  return a1;
}

uint64_t *sub_1DC8B9C54(uint64_t *a1)
{
  return a1;
}

unint64_t sub_1DC8B9C88()
{
  unint64_t result = qword_1EAA9E588;
  if (!qword_1EAA9E588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E588);
  }
  return result;
}

uint64_t sub_1DC8B9CD4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1DC87E988(a3);
  sub_1DC88819C();
  uint64_t v4 = sub_1DC8BAE5C();
  v5(v4);
  return a2;
}

uint64_t sub_1DC8B9D24()
{
  return sub_1DC8BA1FC(MEMORY[0x1E4FBC8D0]);
}

uint64_t sub_1DC8B9D3C(uint64_t a1, uint64_t a2)
{
  return sub_1DC8B8510(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1DC8B9D44()
{
  return sub_1DC8BA1FC(MEMORY[0x1E4FBC8D0]);
}

uint64_t sub_1DC8B9D5C(void *a1)
{
  return sub_1DC8B8628(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1DC8B9D64@<X0>(uint64_t *a1@<X8>)
{
  return sub_1DC8B8940(a1);
}

uint64_t sub_1DC8B9D80(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1DC8B9DC8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t result = sub_1DC9C4D4C(*a1, a2, a3, a4, a5);
  *a6 = result;
  return result;
}

uint64_t sub_1DC8B9DF4()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1DC8B9E2C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1DC8B9DC8(a1, a2, *(unsigned char *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), a3);
}

uint64_t sub_1DC8B9E3C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t *__return_ptr, uint64_t *)@<X4>, uint64_t *a6@<X8>)
{
  uint64_t result = sub_1DC9C4C78(*a1, a2, a3, a4, a5);
  *a6 = result;
  return result;
}

uint64_t sub_1DC8B9E68()
{
  swift_release();
  sub_1DC8BAD04();

  return swift_deallocObject();
}

uint64_t sub_1DC8B9E98@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1DC8B9E3C(a1, a2, a3, *(void *)(v4 + 16), *(void (**)(uint64_t *__return_ptr, uint64_t *))(v4 + 24), a4);
}

void *sub_1DC8B9EA4@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *(*a3)(uint64_t *__return_ptr, uint64_t *, void, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t result = sub_1DC9C4AD4(*a1, a2, a3, a4, a5);
  *a6 = result;
  return result;
}

uint64_t sub_1DC8B9ED0()
{
  swift_release();
  sub_1DC8BAD04();

  return swift_deallocObject();
}

void *sub_1DC8B9F00@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  return sub_1DC8B9EA4(a1, a2, *(void *(**)(uint64_t *__return_ptr, uint64_t *, void, uint64_t))(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), a3);
}

uint64_t sub_1DC8B9F0C()
{
  return swift_deallocObject();
}

void sub_1DC8B9F1C(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_1DC9F8570(a1, a2, *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), a3);
}

uint64_t sub_1DC8B9F3C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1DC87E988(a3);
  sub_1DC88819C();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_1DC8B9F98()
{
  sub_1DCB86BF8();
  sub_1DC88819C();
  unint64_t v2 = (*(void *)(v1 + 64)
      + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1DC88D5C8();
  v3();
  uint64_t v4 = (id *)(v0 + v2);
  if (*(unsigned char *)(v0 + v2 + 40)) {

  }
  else {
    sub_1DC8818D0((uint64_t)v4);
  }

  return swift_deallocObject();
}

uint64_t sub_1DC8BA03C()
{
  return sub_1DC8B89A4();
}

unint64_t sub_1DC8BA0E4()
{
  unint64_t result = qword_1EAA9E5D8;
  if (!qword_1EAA9E5D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1EAA9E5D8);
  }
  return result;
}

uint64_t sub_1DC8BA130()
{
  return sub_1DC8B8A28(*(void *)(v0 + 16));
}

uint64_t sub_1DC8BA14C()
{
  swift_bridgeObjectRelease();
  sub_1DC8BADE0();

  return swift_deallocObject();
}

uint64_t sub_1DC8BA17C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1DCA0DDB8(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24));
}

uint64_t sub_1DC8BA198(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1DC8BA1A8(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_1DCA0D994(a1, a2, a3, *(uint64_t (**)(uint64_t, void, void, void, void))(v3 + 16));
}

uint64_t sub_1DC8BA1B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1DCA0D70C(a1, a2, *(uint64_t (**)(uint64_t, void, void, void))(v3 + 16), a3);
}

uint64_t sub_1DC8BA1CC(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1DC8BA1E4()
{
  return sub_1DC8BA1FC(MEMORY[0x1E4FBC8B8]);
}

uint64_t sub_1DC8BA1FC(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 24));
  sub_1DC8BADE0();

  return swift_deallocObject();
}

uint64_t sub_1DC8BA244()
{
  sub_1DC8867A8();
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1DC8BA814;
  return sub_1DC8B8838(v2, v3);
}

uint64_t sub_1DC8BA2D8()
{
  swift_release();
  sub_1DC8BAD04();

  return swift_deallocObject();
}

uint64_t sub_1DC8BA308()
{
  sub_1DC886900();
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1DC8B9ADC;
  return sub_1DC8B85A4(v2, v3, v4);
}

uint64_t sub_1DC8BA3B0()
{
  swift_unknownObjectRelease();
  swift_release();
  sub_1DC8BAD04();

  return swift_deallocObject();
}

void type metadata accessor for AnalysisServerEnvironmentError()
{
}

void type metadata accessor for AnalysisServerEnvironmentSharedImpl.DomainError()
{
}

unsigned char *sub_1DC8BA404(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1DC8BA4A0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for AnalysisClientEnvironment.DomainError()
{
}

__n128 sub_1DC8BA4E0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void type metadata accessor for AnalysisServerEnvironmentImpl()
{
}

uint64_t sub_1DC8BA50C()
{
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_1DC8BA550(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1DC8BA5A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1DC8BA628(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t sub_1DC8BA680(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1DC8BA6C0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for AnalysisServerEnvironment()
{
}

unint64_t sub_1DC8BA718()
{
  unint64_t result = qword_1EAA9E618;
  if (!qword_1EAA9E618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E618);
  }
  return result;
}

unint64_t sub_1DC8BA768()
{
  unint64_t result = qword_1EAA9E620;
  if (!qword_1EAA9E620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E620);
  }
  return result;
}

unint64_t sub_1DC8BA7B8()
{
  unint64_t result = qword_1EAA9E628;
  if (!qword_1EAA9E628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E628);
  }
  return result;
}

uint64_t sub_1DC8BA880()
{
  return v0;
}

uint64_t sub_1DC8BA8B4()
{
  return swift_retain_n();
}

uint64_t sub_1DC8BA8DC()
{
  return v0;
}

uint64_t sub_1DC8BA8F8(uint64_t a1)
{
  return MEMORY[0x1F4188298](a1, 0, 0);
}

uint64_t sub_1DC8BA904()
{
  return v0;
}

uint64_t sub_1DC8BA91C@<X0>(uint64_t a1@<X8>)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t sub_1DC8BA930()
{
  return swift_dynamicCast();
}

uint64_t sub_1DC8BA964@<X0>(uint64_t result@<X0>, char a2@<W8>)
{
  *(void *)(v5 + 64) = v3;
  *(void *)(v5 + 72) = result;
  *(unsigned char *)(v5 + 80) = a2 & 1;
  *(void *)(v5 + 88) = v4;
  *(void *)(v5 + 96) = v2;
  return result;
}

uint64_t sub_1DC8BA978()
{
  return v0 + 8;
}

uint64_t sub_1DC8BA984()
{
  return v0;
}

uint64_t sub_1DC8BA998()
{
  uint64_t result = v0[1];
  uint64_t v3 = v0[3];
  v1[31] = result;
  v1[32] = v3;
  v1[33] = v0[4];
  return result;
}

uint64_t sub_1DC8BA9B4()
{
  sub_1DC8818D0(v0);
  return *(void *)(v1 + 232);
}

uint64_t sub_1DC8BA9DC()
{
  sub_1DC8818D0(v0);
  return v1 + 8;
}

uint64_t sub_1DC8BAA00()
{
  return swift_task_alloc();
}

uint64_t sub_1DC8BAA20()
{
  return swift_release();
}

uint64_t sub_1DC8BAA44()
{
  return sub_1DC8B9960(v0 + 104, v0 + 144);
}

uint64_t sub_1DC8BAA68()
{
  return v0;
}

uint64_t sub_1DC8BAA7C()
{
  return v0;
}

id sub_1DC8BAAAC(void *a1)
{
  return objc_msgSend(a1, (SEL)(v1 + 1432), 0x10000, 5);
}

uint64_t sub_1DC8BAAC8()
{
  return *(void *)(v0 + 288);
}

void *sub_1DC8BAADC(void *result)
{
  *(void *)(v3 + 336) = result;
  result[2] = v1;
  result[3] = v4;
  result[4] = v2;
  return result;
}

uint64_t sub_1DC8BAAF0()
{
  return swift_dynamicCast();
}

id sub_1DC8BAB3C()
{
  *(void *)(v1 + 224) = v0;
  return v0;
}

void sub_1DC8BAB58(uint64_t a1)
{
  *(void *)(v1 + 376) = a1;
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = v3;
}

uint64_t sub_1DC8BAB74()
{
  return v0;
}

uint64_t sub_1DC8BAB84()
{
  return v0 + 8;
}

uint64_t sub_1DC8BAB94(uint64_t result)
{
  *(void *)(v1 + 304) = result;
  return result;
}

uint64_t sub_1DC8BABA4(uint64_t result)
{
  *(void *)(v1 + 384) = result;
  return result;
}

uint64_t sub_1DC8BABC0()
{
  return swift_allocObject();
}

void *sub_1DC8BABE4(void *result)
{
  result[2] = v1;
  result[3] = v3;
  result[4] = v2;
  return result;
}

uint64_t sub_1DC8BABF0()
{
  return swift_allocObject();
}

uint64_t sub_1DC8BAC08()
{
  return sub_1DCB88808();
}

uint64_t sub_1DC8BAC20()
{
  return swift_willThrow();
}

uint64_t sub_1DC8BAC38()
{
  return swift_release_n();
}

uint64_t sub_1DC8BAC50()
{
  return sub_1DC8B9960(v1, v0);
}

uint64_t sub_1DC8BAC68()
{
  return self;
}

uint64_t *sub_1DC8BAC80()
{
  *(void *)(v1 + 416) = v0;
  return sub_1DC886630((uint64_t *)(v1 + 16));
}

void sub_1DC8BAC98()
{
  *(void *)(v0 + 424) = *(void *)(v0 + 352);
}

uint64_t sub_1DC8BACA4()
{
  return swift_release();
}

void sub_1DC8BACC8()
{
  *(void *)(v0 + 328) = *(void *)(v0 + 216);
}

uint64_t sub_1DC8BACD4()
{
  return swift_release();
}

uint64_t sub_1DC8BACEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 288) = a1;
  *(void *)(v3 + 296) = a3;
  return swift_task_dealloc();
}

uint64_t sub_1DC8BAD04()
{
  return v0;
}

uint64_t sub_1DC8BAD14(uint64_t result)
{
  *(void *)(v1 + 344) = result;
  return result;
}

uint64_t sub_1DC8BAD20(uint64_t result)
{
  *(void *)(v1 + 400) = result;
  return result;
}

uint64_t sub_1DC8BAD2C(uint64_t result)
{
  *(void *)(v1 + 280) = result;
  return result;
}

uint64_t sub_1DC8BAD38()
{
  return swift_release();
}

uint64_t sub_1DC8BAD60()
{
  uint64_t result = v0[1];
  uint64_t v3 = v0[3];
  v1[34] = result;
  v1[35] = v3;
  v1[36] = v0[4];
  return result;
}

uint64_t sub_1DC8BAD88()
{
  return v0;
}

void sub_1DC8BAD98(int8x16_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  *(void *)(v9 + 400) = a1;
  a1[1] = vextq_s8(a9, a9, 8uLL);
}

uint64_t sub_1DC8BADBC()
{
  return swift_dynamicCast();
}

uint64_t sub_1DC8BADE0()
{
  return v0;
}

uint64_t sub_1DC8BADF0(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_1DC8BADFC()
{
  return *(void *)(v0 + 312);
}

uint64_t sub_1DC8BAE10()
{
  return *(void *)(v0 + 256);
}

uint64_t sub_1DC8BAE24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwst_0(v4, 0, 1, a4);
  return sub_1DC8818D0(v5);
}

uint64_t sub_1DC8BAE5C()
{
  return v0;
}

uint64_t sub_1DC8BAE7C()
{
  return swift_task_alloc();
}

uint64_t sub_1DC8BAE94()
{
  swift_beginAccess();
  nullsub_1(v0 + 16);
  swift_endAccess();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for UnsafeNthSortedNode()
{
  return self;
}

uint64_t sub_1DC8BAF14(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = sub_1DCB88CC8())
  {
    uint64_t v5 = 4;
    while (1)
    {
      uint64_t v6 = (a1 & 0xC000000000000001) != 0 ? MEMORY[0x1E01A7AE0](v5 - 4, a1) : swift_unknownObjectRetain();
      uint64_t v7 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      if (v6 == a2)
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        return a2;
      }
      swift_unknownObjectRelease();
      ++v5;
      if (v7 == v4) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

id sub_1DC8BB014(uint64_t a1, uint64_t a2)
{
  return sub_1DC8BB038(a1, a2);
}

id sub_1DC8BB038(uint64_t a1, uint64_t a2)
{
  v5[1] = *(id *)MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (objc_msgSend(v2, sel_addRequest_withObserver_error_, a1, a2, v5)) {
    return v5[0];
  }
  id v4 = v5[0];
  sub_1DCB86898();

  return (id)swift_willThrow();
}

id sub_1DC8BB0E8(uint64_t a1)
{
  return sub_1DC8BB10C(a1);
}

id sub_1DC8BB10C(uint64_t a1)
{
  return objc_msgSend(v1, sel_removeRequest_, a1);
}

id sub_1DC8BB120()
{
  return sub_1DC8BB144();
}

id sub_1DC8BB144()
{
  return objc_msgSend(v0, sel_removeAllRequests);
}

uint64_t sub_1DC8BB154(uint64_t result, double a2, double a3)
{
  if ((unint64_t)result >> 62)
  {
    if (result < 0) {
      uint64_t v5 = result;
    }
    else {
      uint64_t v5 = result & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    sub_1DCB88CC8();
    sub_1DC8C213C();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v5 < 1) {
    return 0;
  }
  double v6 = a2 * a3;
  if ((~COERCE__INT64(a2 * a3) & 0x7FF0000000000000) != 0)
  {
    if (v6 > -9.22337204e18)
    {
      if (v6 < 9.22337204e18) {
        return (uint64_t)v6;
      }
      goto LABEL_15;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_1DC8BB210(uint64_t a1)
{
  uint64_t v3 = v2;
  id v4 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  sub_1DC87E920(a1, (uint64_t)v21);
  if (!v22)
  {
    sub_1DC88CC04((uint64_t)v21, &qword_1EAA9CAB0);
LABEL_7:
    sub_1DC8C19A4();
    swift_allocError();
    swift_willThrow();
    goto LABEL_8;
  }
  sub_1DC89C89C(0, (unint64_t *)&unk_1EAA9CAA0);
  id v7 = v4;
  sub_1DC8C1F74((uint64_t)v7, v8, v9, v10, v11, v12, v13, v14, v18, v19);
  if ((swift_dynamicCast() & 1) == 0)
  {

    goto LABEL_7;
  }

  id v15 = objc_allocWithZone(ObjectType);
  uint64_t v16 = sub_1DC8BB428(v20);
  if (v2)
  {
LABEL_8:
    sub_1DC88CC04(a1, &qword_1EAA9CAB0);
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return v3;
  }
  uint64_t v3 = v16;
  sub_1DC88CC04(a1, &qword_1EAA9CAB0);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v3;
}

uint64_t sub_1DC8BB428(void *a1)
{
  id v4 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v69 = sub_1DCB884C8();
  sub_1DC88819C();
  MEMORY[0x1F4188790](v6);
  sub_1DC8C1FC4();
  uint64_t v7 = sub_1DCB875B8();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (id (*)(uint64_t, uint64_t))sub_1DCB884D8();
  sub_1DC88D538();
  uint64_t v68 = v11;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v4[OBJC_IVAR____SNAudioStreamAnalyzer_receivedBufferCount] = 0;
  uint64_t v15 = OBJC_IVAR____SNAudioStreamAnalyzer_firstPassRecordingPredicate;
  *(void *)&v4[OBJC_IVAR____SNAudioStreamAnalyzer_firstPassRecordingPredicate] = 0;
  uint64_t v16 = v4;
  char v17 = v4;
  id v70 = a1;
  sub_1DCABEC20(a1);
  if (v2)
  {

    uint64_t v34 = *(void **)&v16[v15];
    swift_deallocPartialClassInstance();
    return (uint64_t)a1;
  }
  uint64_t v65 = v10;
  uint64_t v66 = v9;
  if (qword_1EAA9CB50 != -1) {
    swift_once();
  }
  uint64_t v18 = v14;
  char v19 = v17;
  id v20 = v70;
  uint64_t v67 = v3;
  if (byte_1EAAFF828 != 1) {
    goto LABEL_12;
  }
  if (qword_1EAA9CFA8 != -1) {
    swift_once();
  }
  if (byte_1EAAFFB70 == 1)
  {
    if (qword_1EAA9CAC0 != -1) {
      swift_once();
    }
    id v21 = objc_msgSend((id)qword_1EAA9CAB8, sel_dictionaryRepresentation);
    sub_1DCB877B8();

    uint64_t v22 = (void *)sub_1DCAA50D0();
    swift_bridgeObjectRelease();
    char v23 = *(void **)&v16[v15];
    if (v22)
    {
      *(void *)&v16[v15] = v22;
      id v64 = v22;

      double v24 = sub_1DCAA391C();
      CMTimeMakeWithSeconds(&v72, v24, 10000);
      CMTimeValue value = v72.value;
      uint64_t v26 = *(void *)&v72.timescale;
      CMTimeEpoch epoch = v72.epoch;

      uint64_t v28 = &v17[OBJC_IVAR____SNAudioStreamAnalyzer_firstPassRecordingHistoryDuration];
      *(void *)&v17[OBJC_IVAR____SNAudioStreamAnalyzer_firstPassRecordingHistoryDuration] = value;
      id v20 = v70;
    }
    else
    {
      *(void *)&v16[v15] = 0;

      uint64_t v26 = *(void *)(MEMORY[0x1E4F1FA48] + 8);
      CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      uint64_t v28 = &v17[OBJC_IVAR____SNAudioStreamAnalyzer_firstPassRecordingHistoryDuration];
      *(void *)&v17[OBJC_IVAR____SNAudioStreamAnalyzer_firstPassRecordingHistoryDuration] = *MEMORY[0x1E4F1FA48];
    }
    *((void *)v28 + 1) = v26;
    *((void *)v28 + 2) = epoch;
    double v31 = sub_1DCAA3A10();
    CMTimeMakeWithSeconds(&v72, v31, 10000);
    CMTimeScale timescale = v72.timescale;
  }
  else
  {
LABEL_12:
    uint64_t v29 = *(void **)&v16[v15];
    *(void *)&v16[v15] = 0;

    sub_1DC8C20B4(*(_DWORD *)(MEMORY[0x1E4F1FA48] + 8));
  }
  sub_1DC8C20B4(timescale);
  type metadata accessor for SNForwardPassAudioStreamAnalyzer();
  swift_allocObject();
  id v32 = v20;
  uint64_t v33 = sub_1DC8F3DEC(v32);
  id v70 = v18;
  *(void *)&v17[OBJC_IVAR____SNAudioStreamAnalyzer_firstPassAnalyzer] = v33;
  sub_1DC89C89C(0, (unint64_t *)&qword_1EAA9CB90);
  sub_1DC8C109C();
  uint64_t v36 = MEMORY[0x1E4FBC860];
  *(void *)&v17[OBJC_IVAR____SNAudioStreamAnalyzer_firstPassUltronReportOps] = sub_1DCB877D8();
  sub_1DC87E988((uint64_t *)&unk_1EAA9D0C0);
  *(void *)&v17[OBJC_IVAR____SNAudioStreamAnalyzer_firstPassResultsHistory] = sub_1DCB877D8();
  *(void *)&v17[OBJC_IVAR____SNAudioStreamAnalyzer_requests] = v36;
  *(void *)&v17[OBJC_IVAR____SNAudioStreamAnalyzer_currentFormat] = v32;
  objc_allocWithZone((Class)SNAudioRingBuffer);
  id v37 = v32;
  *(void *)&v17[OBJC_IVAR____SNAudioStreamAnalyzer_ringBuffer] = sub_1DC8BF174(v37, 1);
  id v38 = objc_allocWithZone((Class)SNAudioBufferList);
  id v64 = v37;
  id v39 = objc_msgSend(v38, sel_initWithFormat_, v37);
  *(void *)&v17[OBJC_IVAR____SNAudioStreamAnalyzer_ringBufferWriteBufferList] = v39;
  sub_1DC89C89C(0, (unint64_t *)&qword_1EAA9D100);
  (*(void (**)(id, void, id (*)(uint64_t, uint64_t)))(v68 + 104))(v70, *MEMORY[0x1E4FBCC68], v65);
  sub_1DCB875A8();
  v72.CMTimeValue value = MEMORY[0x1E4FBC860];
  sub_1DC8C18C8((unint64_t *)&qword_1EAA9D0F0, MEMORY[0x1E4FBCC10]);
  sub_1DC87E988((uint64_t *)&unk_1EAA9D0D0);
  sub_1DC8C19F0((unint64_t *)&qword_1EAA9D0E0, (uint64_t *)&unk_1EAA9D0D0);
  sub_1DCB88928();
  uint64_t v40 = (void *)sub_1DCB88508();
  *(void *)&v17[OBJC_IVAR____SNAudioStreamAnalyzer_analyzerQueue] = v40;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = sub_1DC89D8B4;
  id v70 = (id)(result + 16);
  *(void *)(result + 24) = 0;
  CMTimeValue v41 = qword_1EAAFF830 + 1;
  if (!__OFADD__(qword_1EAAFF830, 1))
  {
    uint64_t v42 = result;
    ++qword_1EAAFF830;
    v72.CMTimeValue value = v41;
    id v43 = v40;
    swift_retain();
    uint64_t v44 = sub_1DCB88F98();
    uint64_t v46 = v45;
    uint64_t v47 = (uint64_t *)&v19[OBJC_IVAR____SNAudioStreamAnalyzer_id];
    *uint64_t v47 = v44;
    v47[1] = v45;
    swift_bridgeObjectRetain();
    uint64_t v48 = ObjectType;
    sub_1DC8BBD24(v44, v46, (uint64_t)sub_1DC8C1A70, v42, (uint64_t)v43, v49, v50, v51, v63, (uint64_t)v64, v65, v66, v67, v68, v69, (uint64_t)v70, (uint64_t)ObjectType, v72.value, *(uint64_t *)&v72.timescale,
      v72.epoch,
      (uint64_t)v73.receiver,
      (uint64_t)v73.super_class,
      v74,
      v75);
    sub_1DC8BBEB8(v44, v46, (uint64_t)sub_1DC8C1A70, v42, (uint64_t)v43, v53, v54, v55, v63, (uint64_t)v64, v65, v66, v67, v68, v52, (uint64_t)v70, (uint64_t)ObjectType, v72.value, *(uint64_t *)&v72.timescale,
      v72.epoch,
      (uint64_t)v73.receiver,
      (uint64_t)v73.super_class,
      v74,
      v75);
    uint64_t v57 = v56;
    swift_bridgeObjectRelease();
    CMTimeFlags v58 = (uint64_t (*)())swift_allocObject();
    uint64_t v59 = v69;
    *((void *)v58 + 2) = sub_1DC8C1CBC;
    *((void *)v58 + 3) = v59;
    *((void *)v58 + 4) = sub_1DC8C1B64;
    *((void *)v58 + 5) = v57;
    CMTimeFlags v60 = (uint64_t (**)())&v19[OBJC_IVAR____SNAudioStreamAnalyzer_unregisterLogCollectHook];
    *CMTimeFlags v60 = sub_1DC8C1AB8;
    v60[1] = v58;
    type metadata accessor for AudioStreamAnalyzer();
    a1 = (void *)swift_allocObject();
    id v61 = v64;
    swift_retain();
    swift_retain();
    *(void *)&v19[OBJC_IVAR____SNAudioStreamAnalyzer_combineAnalyzer] = sub_1DCA8A540(v61);

    v73.receiver = v19;
    v73.super_class = v48;
    objc_msgSendSuper2(&v73, sel_init);
    sub_1DC8C213C();
    swift_release();
    swift_release();
    swift_release();

    uint64_t v62 = sub_1DC8BABC0();
    swift_unknownObjectWeakInit();
    swift_beginAccess();
    *(void *)(v42 + 16) = sub_1DC8C1AFC;
    *(void *)(v42 + 24) = v62;
    swift_release();
    swift_release();
    return (uint64_t)a1;
  }
  __break(1u);
  return result;
}

uint64_t sub_1DC8BBCBC(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(a1 + 16);
  uint64_t v3 = swift_retain();
  uint64_t v4 = v2(v3);
  swift_release();
  return v4;
}

void sub_1DC8BBD24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, id (*a11)(uint64_t a1, uint64_t a2), void *a12, uint64_t (*a13)(), uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_1DC8C1E5C();
  a23 = v25;
  a24 = v26;
  sub_1DC8C1D78();
  sub_1DCB88A98();
  swift_bridgeObjectRelease();
  sub_1DC8C1DE0();
  sub_1DCB87A18();
  char v27 = (void *)swift_allocObject();
  sub_1DC8C211C(v27);
  id v28 = v24;
  uint64_t v29 = (void *)sub_1DCB87908();
  uint64_t v30 = sub_1DC886810();
  *(void *)(v30 + 16) = sub_1DC8C1B74;
  *(void *)(v30 + 24) = &a9;
  a13 = sub_1DC8C1D10;
  a14 = v30;
  a9 = MEMORY[0x1E4F143A8];
  a10 = 1107296256;
  a11 = sub_1DC8A191C;
  a12 = &unk_1F37FB368;
  double v31 = _Block_copy(&a9);
  swift_retain();
  swift_release();
  id v32 = sub_1DCB6CFC8((uint64_t)v28, v29, v31);

  _Block_release(v31);
  *(void *)(sub_1DC8BABC0() + 16) = v32;
  swift_release();
  swift_bridgeObjectRelease();
  sub_1DC8C1EA0();
}

void sub_1DC8BBEB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, id (*a11)(uint64_t a1, uint64_t a2), void *a12, uint64_t (*a13)(), uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_1DC8C1E5C();
  a23 = v25;
  a24 = v26;
  sub_1DC8C1D78();
  sub_1DCB88A98();
  swift_bridgeObjectRelease();
  sub_1DC8C1DE0();
  sub_1DCB87A18();
  char v27 = (void *)swift_allocObject();
  sub_1DC8C211C(v27);
  id v28 = v24;
  uint64_t v29 = (void *)sub_1DCB87908();
  uint64_t v30 = sub_1DC886810();
  *(void *)(v30 + 16) = sub_1DC8C1B3C;
  *(void *)(v30 + 24) = &a9;
  a13 = sub_1DC8C1B5C;
  a14 = v30;
  a9 = MEMORY[0x1E4F143A8];
  a10 = 1107296256;
  a11 = sub_1DC8A191C;
  a12 = &unk_1F37FB2F0;
  double v31 = _Block_copy(&a9);
  swift_retain();
  swift_release();
  id v32 = sub_1DCB6CFC8((uint64_t)v28, v29, v31);

  _Block_release(v31);
  *(void *)(sub_1DC8BABC0() + 16) = v32;
  swift_release();
  swift_bridgeObjectRelease();
  sub_1DC8C1EA0();
}

uint64_t sub_1DC8BC04C(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  return MEMORY[0x1E01A9AE0](v1);
}

void sub_1DC8BC090(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  if (!v1) {
    goto LABEL_15;
  }
  uint64_t v2 = (char *)v1;
  if ((sub_1DC8BC4AC() & 1) == 0)
  {

LABEL_15:
    sub_1DCB877D8();
    return;
  }
  sub_1DC87E988(&qword_1EAA9E7E8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DCBB93B0;
  sub_1DCB88A38();
  uint64_t v4 = &v2[OBJC_IVAR____SNAudioStreamAnalyzer_requests];
  swift_beginAccess();
  unint64_t v5 = *(void *)v4;
  if (!(v5 >> 62))
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6) {
      goto LABEL_5;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    uint64_t v8 = MEMORY[0x1E4FBC860];
LABEL_18:
    *(void *)(inited + 96) = sub_1DC87E988(&qword_1EAA9E7F0);
    *(void *)(inited + 72) = v8;
    sub_1DCB877D8();

    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1DCB88CC8();
  if (!v6) {
    goto LABEL_17;
  }
LABEL_5:
  uint64_t v18 = inited;
  char v19 = v2;
  uint64_t v21 = MEMORY[0x1E4FBC860];
  sub_1DC897B8C();
  if ((v6 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v21;
    unint64_t v20 = v5 & 0xC000000000000001;
    unint64_t v9 = v5;
    uint64_t v10 = v6;
    do
    {
      if (v20)
      {
        uint64_t v11 = (void *)MEMORY[0x1E01A7AE0](v7, v5);
      }
      else
      {
        uint64_t v11 = *(void **)(v5 + 8 * v7 + 32);
        swift_unknownObjectRetain();
      }
      id v12 = objc_msgSend(v11, sel_description);
      uint64_t v13 = sub_1DCB87938();
      uint64_t v15 = v14;
      swift_unknownObjectRelease();

      unint64_t v16 = *(void *)(v21 + 16);
      if (v16 >= *(void *)(v21 + 24) >> 1) {
        sub_1DC897B8C();
      }
      ++v7;
      *(void *)(v21 + 16) = v16 + 1;
      uint64_t v17 = v21 + 16 * v16;
      *(void *)(v17 + 32) = v13;
      *(void *)(v17 + 40) = v15;
      unint64_t v5 = v9;
    }
    while (v10 != v7);
    swift_bridgeObjectRelease();
    uint64_t v2 = v19;
    uint64_t inited = v18;
    goto LABEL_18;
  }
  __break(1u);
}

uint64_t sub_1DC8BC34C(uint64_t (*a1)(void))
{
  uint64_t v2 = a1();
  if (!v2) {
    return sub_1DCB877D8();
  }
  uint64_t v3 = (void *)v2;
  if ((sub_1DC8BC4AC() & 1) == 0)
  {

    return sub_1DCB877D8();
  }
  swift_beginAccess();
  uint64_t v4 = swift_bridgeObjectRetain();
  sub_1DC8F2050(v4, v8);
  if (v1)
  {

    swift_bridgeObjectRelease();
    memset(v8, 0, sizeof(v8));
    sub_1DC88CC04((uint64_t)v8, &qword_1EAA9CAB0);
LABEL_9:
    uint64_t v6 = sub_1DCB877D8();
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  sub_1DC87E988(&qword_1EAA9E7F8);
  if (!swift_dynamicCast()) {
    goto LABEL_9;
  }
  uint64_t v6 = v7;
LABEL_10:

  return v6;
}

uint64_t sub_1DC8BC4AC()
{
  if (qword_1EAA9CB50 != -1) {
    swift_once();
  }
  if (byte_1EAAFF828 != 1) {
    return 0;
  }
  if (qword_1EAA9CFA8 != -1) {
    swift_once();
  }
  return byte_1EAAFFB70;
}

#error "1DC8BC5AC: call analysis failed (funcsize=73)"

uint64_t sub_1DC8BC780(uint64_t a1, uint64_t a2)
{
  sub_1DC87E920(a1, (uint64_t)v5);
  if (!v6) {
    goto LABEL_7;
  }
  sub_1DC87E988((uint64_t *)&unk_1EAA9CBA0);
  if ((sub_1DC8C2094() & 1) == 0) {
    goto LABEL_8;
  }
  sub_1DC87E920(a2, (uint64_t)v5);
  if (!v6)
  {
    swift_unknownObjectRelease();
LABEL_7:
    sub_1DC88CC04((uint64_t)v5, &qword_1EAA9CAB0);
    goto LABEL_8;
  }
  sub_1DC87E988(&qword_1EAA9D110);
  if (sub_1DC8C2094())
  {
    sub_1DC8BC890(v4);
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  swift_unknownObjectRelease();
LABEL_8:
  sub_1DC8C19A4();
  swift_allocError();
  return swift_willThrow();
}

uint64_t sub_1DC8BC890(uint64_t a1)
{
  uint64_t v2 = sub_1DC8BABC0();
  swift_unknownObjectWeakInit();
  uint64_t v3 = sub_1DC8BABC0();
  swift_unknownObjectWeakInit();
  uint64_t v4 = (void *)swift_allocObject();
  v4[2] = v3;
  v4[3] = a1;
  void v4[4] = v2;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = a1;
  swift_unknownObjectRetain_n();
  swift_retain_n();
  swift_retain();
  sub_1DC8BCED8();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void *sub_1DC8BCACC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a2 + 16;
  uint64_t v7 = a4 + 16;
  swift_beginAccess();
  uint64_t v8 = MEMORY[0x1E01A9AE0](v6);
  if (v8)
  {
    unint64_t v9 = (void *)v8;
    sub_1DC8BCBF8();
  }
  swift_beginAccess();
  uint64_t result = (void *)MEMORY[0x1E01A9AE0](v7);
  if (result)
  {
    uint64_t v11 = result;
    if (a1)
    {
      if (objc_msgSend(result, sel_respondsToSelector_, sel_request_didFailWithError_))
      {
        id v12 = a1;
        swift_unknownObjectRetain();
        uint64_t v13 = (void *)sub_1DCB86888();
        objc_msgSend(v11, sel_request_didFailWithError_, a3, v13);
        swift_unknownObjectRelease();
      }
    }
    else if (objc_msgSend(result, sel_respondsToSelector_, sel_requestDidComplete_))
    {
      objc_msgSend(v11, sel_requestDidComplete_, a3);
    }
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

void sub_1DC8BCBF8()
{
  sub_1DC89D9F8();
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  sub_1DCB87588();
  sub_1DC88D538();
  MEMORY[0x1F4188790](v6);
  uint64_t v16 = sub_1DC8C1F1C();
  sub_1DC88D538();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9);
  sub_1DC89D970();
  uint64_t v10 = *(void **)(v3 + OBJC_IVAR____SNAudioStreamAnalyzer_analyzerQueue);
  uint64_t v11 = sub_1DC8BABC0();
  swift_unknownObjectWeakInit();
  uint64_t v12 = sub_1DC886810();
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = v5;
  uint64_t v17[4] = sub_1DC8C1854;
  v17[5] = v12;
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 1107296256;
  id v17[2] = sub_1DC9C881C;
  v17[3] = &unk_1F37FB048;
  uint64_t v13 = _Block_copy(v17);
  id v14 = v10;
  swift_retain();
  swift_unknownObjectRetain();
  sub_1DCB875A8();
  sub_1DC8C18C8((unint64_t *)&unk_1EAA9E710, MEMORY[0x1E4FBCB00]);
  sub_1DC87E988((uint64_t *)&unk_1EAA9F660);
  sub_1DC8C19F0((unint64_t *)&qword_1EAA9E720, (uint64_t *)&unk_1EAA9F660);
  sub_1DCB88928();
  MEMORY[0x1E01A74F0](0, v2, v1, v13);
  _Block_release(v13);

  sub_1DC88D5C8();
  v15();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v2, v16);
  swift_release();
  swift_release();
  sub_1DC89DA54();
}

void *sub_1DC8BCE60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 16;
  swift_beginAccess();
  uint64_t result = (void *)MEMORY[0x1E01A9AE0](v5);
  if (result)
  {
    objc_msgSend(result, sel_request_didProduceResult_, a3, a1);
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

void sub_1DC8BCED8()
{
  id v1 = *(id *)(v0 + OBJC_IVAR____SNAudioStreamAnalyzer_analyzerQueue);
  sub_1DCB884E8();
}

id sub_1DC8BCF58(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_beginAccess();
  swift_unknownObjectRetain();
  unint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_1DC8BAF14(v10, a1);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (v11) {
    sub_1DC8BD290(a1);
  }
  uint64_t v24 = a1;
  swift_unknownObjectRetain();
  sub_1DC87E988((uint64_t *)&unk_1EAA9CBA0);
  sub_1DC87E988(qword_1EAA9CD60);
  if (swift_dynamicCast())
  {
    uint64_t v20 = a5;
    uint64_t v12 = v23;
    sub_1DC881A8C(&v21, *((uint64_t *)&v22 + 1));
    uint64_t v13 = sub_1DC8C213C();
    uint64_t v15 = v14(v13, v12);
    uint64_t v17 = v16;
    sub_1DC8818D0((uint64_t)&v21);
    uint64_t ObjectType = swift_getObjectType();
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 24))(ObjectType, v17))
    {
      sub_1DCA8AFF8(v15, v17, a2, a3, a4, v20);
      return (id)swift_unknownObjectRelease();
    }
    swift_unknownObjectRelease();
    a5 = v20;
  }
  else
  {
    uint64_t v23 = 0;
    long long v21 = 0u;
    long long v22 = 0u;
    sub_1DC88CC04((uint64_t)&v21, (uint64_t *)&unk_1EAA9E728);
  }
  return sub_1DC8BD41C(a1, (uint64_t)a2, a3, a4, a5);
}

void sub_1DC8BD290(uint64_t a1)
{
  uint64_t v4 = (uint64_t *)(v1 + OBJC_IVAR____SNAudioStreamAnalyzer_requests);
  swift_beginAccess();
  swift_unknownObjectRetain();
  int64_t v5 = sub_1DC8C09A8(v4, a1);
  sub_1DC8C1F44();
  if (v6)
  {
    sub_1DC8C1D38();
    sub_1DCB88CC8();
    sub_1DC8C1F84();
  }
  else
  {
    sub_1DC8C2050();
  }
  if (v2 < v5)
  {
    __break(1u);
  }
  else
  {
    sub_1DC8C0EAC();
    swift_endAccess();
    uint64_t v20 = a1;
    swift_unknownObjectRetain();
    sub_1DC87E988((uint64_t *)&unk_1EAA9CBA0);
    sub_1DC87E988(qword_1EAA9CD60);
    if (swift_dynamicCast())
    {
      sub_1DC8BA1CC(&v17, (uint64_t)v21);
      uint64_t v7 = v22;
      uint64_t v8 = v23;
      sub_1DC881A8C(v21, v22);
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
      sub_1DCA8B244(v9);
      swift_unknownObjectRelease();
      sub_1DC8818D0((uint64_t)v21);
    }
    else
    {
      uint64_t v19 = 0;
      long long v17 = 0u;
      long long v18 = 0u;
      sub_1DC88CC04((uint64_t)&v17, (uint64_t *)&unk_1EAA9E728);
    }
    sub_1DC8BDDD4(a1, v10, v11, v12, v13, v14, v15, v16, v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19, v20, v21[0], v21[1], v21[2], v22, v23,
      v24,
      v25,
      v26,
      v27,
      v28);
  }
}

id sub_1DC8BD41C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_1DC8BABC0();
  swift_unknownObjectWeakInit();
  uint64_t v11 = (void *)swift_allocObject();
  void v11[2] = v10;
  _OWORD v11[3] = a1;
  void v11[4] = a2;
  v11[5] = a3;
  uint64_t v12 = sub_1DC8BABC0();
  swift_unknownObjectWeakInit();
  uint64_t v13 = (void *)swift_allocObject();
  _OWORD v13[2] = v12;
  v13[3] = a1;
  id v13[4] = a4;
  v13[5] = a5;
  swift_unknownObjectRetain_n();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1DC8F2B64(a1, (uint64_t)sub_1DC8C122C, (unint64_t)v11, (uint64_t)sub_1DC8C1284, (uint64_t)v13);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  id result = (id)swift_release();
  if (!v18)
  {
    uint64_t v15 = (void *)(v5 + OBJC_IVAR____SNAudioStreamAnalyzer_requests);
    swift_beginAccess();
    uint64_t v16 = swift_unknownObjectRetain();
    MEMORY[0x1E01A6BF0](v16);
    sub_1DC9B46BC(*(void *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x10));
    sub_1DCB87D28();
    sub_1DCB87C68();
    swift_endAccess();
    return sub_1DC8BD614();
  }
  return result;
}

id sub_1DC8BD614()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____SNAudioStreamAnalyzer_requests);
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t v3 = OBJC_IVAR____SNAudioStreamAnalyzer_currentFormat;
  uint64_t v4 = *(void **)(v0 + OBJC_IVAR____SNAudioStreamAnalyzer_currentFormat);
  swift_bridgeObjectRetain();
  objc_msgSend(v4, sel_sampleRate);
  double v6 = v5;
  CMTimeEpoch v7 = *(void *)(v0 + OBJC_IVAR____SNAudioStreamAnalyzer_firstPassRecordingHistoryDuration + 16);
  time.CMTimeValue value = *(void *)(v0 + OBJC_IVAR____SNAudioStreamAnalyzer_firstPassRecordingHistoryDuration);
  *(void *)&time.CMTimeScale timescale = *(void *)(v0 + OBJC_IVAR____SNAudioStreamAnalyzer_firstPassRecordingHistoryDuration + 8);
  time.CMTimeEpoch epoch = v7;
  double Seconds = CMTimeGetSeconds(&time);
  unint64_t v9 = sub_1DC8BB154(v2, v6, Seconds);
  swift_bridgeObjectRelease();
  if ((v9 & 0x8000000000000000) != 0 || HIDWORD(v9))
  {
    sub_1DC8AF148();
    id result = (id)sub_1DCB88C58();
    __break(1u);
  }
  else
  {
    uint64_t v10 = *(void **)(v0 + OBJC_IVAR____SNAudioStreamAnalyzer_ringBuffer);
    uint64_t v11 = *(void *)(v0 + v3);
    time.CMTimeValue value = 0;
    if (objc_msgSend(v10, sel_resizeWithFormat_newCapacityFrames_error_, v11, v9, &time))
    {
      return (id)time.value;
    }
    else
    {
      id v13 = (id)time.value;
      sub_1DCB86898();

      return (id)swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_1DC8BD7E8(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SNDetectionResult();
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    double v5 = *(void **)(v2 + OBJC_IVAR____SNAudioStreamAnalyzer_firstPassRecordingPredicate);
    if (v5)
    {
      double v6 = (void *)result;
      swift_unknownObjectRetain();
      id v32 = v5;
      char v31 = objc_msgSend(v32, sel_evaluateWithObject_, v6);
      uint64_t v7 = a2;
      uint64_t v8 = *(void **)(v2 + OBJC_IVAR____SNAudioStreamAnalyzer_currentFormat);
      uint64_t v28 = OBJC_IVAR____SNAudioStreamAnalyzer_firstPassUltronReportOps;
      uint64_t v9 = *(void *)(v2 + OBJC_IVAR____SNAudioStreamAnalyzer_firstPassUltronReportOps);
      uint64_t v10 = (uint64_t *)(v2 + OBJC_IVAR____SNAudioStreamAnalyzer_firstPassResultsHistory);
      swift_beginAccess();
      uint64_t v11 = *v10;
      uint64_t v12 = *(void **)(v2 + OBJC_IVAR____SNAudioStreamAnalyzer_ringBuffer);
      id v13 = (CMTimeValue *)(v2 + OBJC_IVAR____SNAudioStreamAnalyzer_firstPassRecordingHistoryDuration);
      uint64_t v29 = v10;
      CMTimeValue v30 = *(void *)(v2 + OBJC_IVAR____SNAudioStreamAnalyzer_firstPassRecordingHistoryDuration);
      uint64_t v14 = *(void *)(v2 + OBJC_IVAR____SNAudioStreamAnalyzer_firstPassRecordingHistoryDuration + 8);
      CMTimeEpoch v15 = *(void *)(v2 + OBJC_IVAR____SNAudioStreamAnalyzer_firstPassRecordingHistoryDuration + 16);
      id v16 = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v17 = v12;
      uint64_t v18 = sub_1DCAE8E60(v7, (uint64_t)v16, v9, v31, (uint64_t)v6, v11, v17, v30, v14, v15);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      *(void *)(v2 + v28) = v18;
      swift_bridgeObjectRelease();
      uint64_t v19 = *v29;
      CMTimeValue v20 = *v13;
      uint64_t v21 = v13[1];
      CMTimeEpoch v22 = v13[2];
      uint64_t v23 = v2 + OBJC_IVAR____SNAudioStreamAnalyzer_sysdiagnoseHistoryDuration;
      CMTimeValue v24 = *(void *)(v2 + OBJC_IVAR____SNAudioStreamAnalyzer_sysdiagnoseHistoryDuration);
      uint64_t v25 = *(void *)(v23 + 8);
      CMTimeEpoch v26 = *(void *)(v23 + 16);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v27 = sub_1DC8C14C4(v6, v7, v19, v20, v21, v22, v24, v25, v26);
      swift_bridgeObjectRelease();

      swift_unknownObjectRelease_n();
      *uint64_t v29 = v27;
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void sub_1DC8BDA18(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6 = a2 + 16;
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x1E01A9AE0](v6);
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    sub_1DC8BCBF8();
    a4(a1);
  }
}

void sub_1DC8BDAA4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v7 = a2 + 16;
  swift_beginAccess();
  uint64_t v8 = MEMORY[0x1E01A9AE0](v7);
  if (v8)
  {
    uint64_t v9 = (void *)v8;
    sub_1DC8BD7E8(a1, a3);
    a4(a1);
  }
}

#error "1DC8BDB88: call analysis failed (funcsize=31)"

void sub_1DC8BDBB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(uint64_t a1), void *a12, uint64_t (*a13)(), uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_1DC8C1E5C();
  a23 = v25;
  a24 = v26;
  uint64_t v28 = v27;
  uint64_t v29 = *(void **)&v24[OBJC_IVAR____SNAudioStreamAnalyzer_analyzerQueue];
  uint64_t v30 = sub_1DC886810();
  *(void *)(v30 + 16) = v24;
  *(void *)(v30 + 24) = v28;
  uint64_t v31 = sub_1DC886810();
  *(void *)(v31 + 16) = sub_1DC8C1114;
  *(void *)(v31 + 24) = v30;
  a13 = sub_1DC8C1140;
  a14 = v31;
  a9 = MEMORY[0x1E4F143A8];
  a10 = 1107296256;
  a11 = sub_1DC8BDDAC;
  a12 = &unk_1F37FAC38;
  id v32 = _Block_copy(&a9);
  uint64_t v33 = v29;
  uint64_t v34 = v24;
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v33, v32);

  _Block_release(v32);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  else {
    sub_1DC8C1EA0();
  }
}

uint64_t sub_1DC8BDD84(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1DC8BDDAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void sub_1DC8BDDD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t ObjectType, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_1DC8C1E5C();
  a23 = v25;
  a24 = v26;
  uint64_t v27 = v24;
  uint64_t v29 = v28;
  swift_retain();
  sub_1DC8F3054(v29);
  swift_release();
  uint64_t v30 = OBJC_IVAR____SNAudioStreamAnalyzer_firstPassUltronReportOps;
  uint64_t v31 = *(uint64_t **)(v24 + OBJC_IVAR____SNAudioStreamAnalyzer_firstPassUltronReportOps);
  swift_bridgeObjectRetain();
  uint64_t v32 = sub_1DCAE9200(v29, (uint64_t)v31);
  swift_bridgeObjectRelease();
  *(void *)(v27 + v30) = v32;
  swift_bridgeObjectRelease();
  sub_1DC89C89C(0, (unint64_t *)&qword_1EAA9CB90);
  sub_1DC8C213C();
  uint64_t ObjectType = swift_getObjectType();
  a11 = v29;
  swift_unknownObjectRetain();
  id v33 = sub_1DC8BE068(&a11);
  sub_1DC8C1F50();
  swift_unknownObjectRetain();
  int64_t v34 = sub_1DC8C09A8(v31, v29);
  if ((unint64_t)*v31 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v35 = sub_1DCB88CC8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v35 = *(void *)((*v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v35 < v34)
  {
    __break(1u);
  }
  else
  {
    sub_1DC8C0EAC();
    swift_endAccess();
    sub_1DC8C1F50();
    id v36 = v33;
    sub_1DC8BF35C();
    swift_endAccess();

    swift_bridgeObjectRelease();
    sub_1DC8BD614();

    sub_1DC8C1EA0();
  }
}

void sub_1DC8BE00C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1E01A9AE0](v3);
  if (v4)
  {
    double v5 = (void *)v4;
    sub_1DC8BD290(a2);
  }
}

id sub_1DC8BE068(void *a1)
{
  uint64_t v2 = a1[3];
  if (v2)
  {
    sub_1DC881A8C(a1, a1[3]);
    sub_1DC88D538();
    uint64_t v5 = v4;
    MEMORY[0x1F4188790](v6);
    sub_1DC89D970();
    (*(void (**)(uint64_t))(v5 + 16))(v1);
    uint64_t v7 = sub_1DCB89008();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v2);
    sub_1DC8818D0((uint64_t)a1);
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_valueWithNonretainedObject_, v7);
  swift_unknownObjectRelease();
  return v8;
}

void sub_1DC8BE17C()
{
  sub_1DC89D9F8();
  uint64_t v3 = sub_1DCB87588();
  sub_1DC88D538();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  uint64_t v15 = sub_1DC8C1F1C();
  sub_1DC88D538();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9);
  sub_1DC89D970();
  uint64_t v10 = *(void **)&v0[OBJC_IVAR____SNAudioStreamAnalyzer_analyzerQueue];
  uint64_t v11 = sub_1DC8BABC0();
  *(void *)(v11 + 16) = v0;
  v16[4] = sub_1DC8BEFE8;
  v16[5] = v11;
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 1107296256;
  void v16[2] = sub_1DC9C881C;
  void v16[3] = &unk_1F37FA8F0;
  uint64_t v12 = _Block_copy(v16);
  id v13 = v10;
  uint64_t v14 = v0;
  sub_1DCB875A8();
  sub_1DC8C18C8((unint64_t *)&unk_1EAA9E710, MEMORY[0x1E4FBCB00]);
  sub_1DC87E988((uint64_t *)&unk_1EAA9F660);
  sub_1DC8C19F0((unint64_t *)&qword_1EAA9E720, (uint64_t *)&unk_1EAA9F660);
  sub_1DCB88928();
  MEMORY[0x1E01A74F0](0, v2, v1, v12);
  _Block_release(v12);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v3);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v2, v15);
  swift_release();
  sub_1DC89DA54();
}

uint64_t sub_1DC8BE3A8(uint64_t a1)
{
  uint64_t v1 = (unint64_t *)(a1 + OBJC_IVAR____SNAudioStreamAnalyzer_requests);
  swift_beginAccess();
  unint64_t v2 = *v1;
  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v3) {
      goto LABEL_3;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    return sub_1DCA8B328();
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_1DCB88CC8();
  uint64_t v3 = result;
  if (!result) {
    goto LABEL_9;
  }
LABEL_3:
  if (v3 >= 1)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0)
      {
        uint64_t v6 = MEMORY[0x1E01A7AE0](i, v2);
      }
      else
      {
        uint64_t v6 = *(void *)(v2 + 8 * i + 32);
        swift_unknownObjectRetain();
      }
      sub_1DC8BD290(v6);
      swift_unknownObjectRelease();
    }
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

void sub_1DC8BE500(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    sub_1DC8BE560();
  }
}

#error "1DC8BE5D4: call analysis failed (funcsize=36)"

void sub_1DC8BE668(void *a1)
{
  uint64_t v3 = MEMORY[0x1E01A8D20]();
  uint64_t v4 = *(void *)&v1[OBJC_IVAR____SNAudioStreamAnalyzer_receivedBufferCount];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5)
  {
    __break(1u);
  }
  else
  {
    uint64_t v7 = (void *)v3;
    *(void *)&v1[OBJC_IVAR____SNAudioStreamAnalyzer_receivedBufferCount] = v6;
    sub_1DC87E988((uint64_t *)&unk_1EAA9CBB0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = MEMORY[0x1E4FBB550];
    *(_OWORD *)(v8 + 16) = xmmword_1DCBB93B0;
    uint64_t v10 = MEMORY[0x1E4FBB5C8];
    *(void *)(v8 + 56) = v9;
    *(void *)(v8 + 64) = v10;
    *(void *)(v8 + 32) = v1;
    sub_1DCB87958();
    uint64_t v11 = v1;
    id v12 = a1;
    sub_1DCA0DC14();
    swift_bridgeObjectRelease();
  }
}

void sub_1DC8BE764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(uint64_t a1), void *a12, uint64_t (*a13)(), uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_1DC8C1E5C();
  a23 = v25;
  a24 = v26;
  uint64_t v28 = v27;
  uint64_t v29 = *(void **)&v24[OBJC_IVAR____SNAudioStreamAnalyzer_analyzerQueue];
  uint64_t v30 = sub_1DC886810();
  *(void *)(v30 + 16) = v24;
  *(void *)(v30 + 24) = v28;
  uint64_t v31 = sub_1DC886810();
  *(void *)(v31 + 16) = sub_1DC8C18BC;
  *(void *)(v31 + 24) = v30;
  a13 = sub_1DC8C1CB8;
  a14 = v31;
  a9 = MEMORY[0x1E4F143A8];
  a10 = 1107296256;
  a11 = sub_1DC8BDDAC;
  a12 = &unk_1F37FB110;
  uint64_t v32 = _Block_copy(&a9);
  id v33 = v29;
  int64_t v34 = v24;
  id v35 = v28;
  swift_retain();
  swift_release();
  dispatch_sync(v33, v32);

  _Block_release(v32);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  else {
    sub_1DC8C1EA0();
  }
}

#error "1DC8BE954: call analysis failed (funcsize=173)"

uint64_t sub_1DC8BEB6C()
{
  id v1 = *(void **)&v0[OBJC_IVAR____SNAudioStreamAnalyzer_analyzerQueue];
  uint64_t v2 = sub_1DC8BABC0();
  *(void *)(v2 + 16) = v0;
  uint64_t v3 = sub_1DC886810();
  *(void *)(v3 + 16) = sub_1DC8C192C;
  *(void *)(v3 + 24) = v2;
  v9[4] = sub_1DC8C1CB8;
  v9[5] = v3;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1107296256;
  v9[2] = sub_1DC8BDDAC;
  _OWORD v9[3] = &unk_1F37FB188;
  uint64_t v4 = _Block_copy(v9);
  BOOL v5 = v1;
  uint64_t v6 = v0;
  swift_retain();
  swift_release();
  dispatch_sync(v5, v4);

  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1DC8BECBC()
{
  return sub_1DCA8B468();
}

uint64_t sub_1DC8BEDBC()
{
  id v1 = *(id *)(v0 + OBJC_IVAR____SNAudioStreamAnalyzer_analyzerQueue);
  sub_1DCB884E8();

  return v3;
}

uint64_t sub_1DC8BEE34@<X0>(uint64_t *a1@<X8>)
{
  swift_retain();
  uint64_t v2 = sub_1DC8F3AAC();
  uint64_t v4 = v3;
  uint64_t result = swift_release();
  *a1 = v2;
  a1[1] = v4;
  return result;
}

uint64_t sub_1DC8BEE98()
{
  swift_retain();
  sub_1DC8F3B04();

  return swift_release();
}

void sub_1DC8BEEE8()
{
}

uint64_t type metadata accessor for _SNAudioStreamAnalyzer()
{
  return self;
}

uint64_t sub_1DC8BEF4C(uint64_t a1)
{
  return sub_1DC8BC890(a1);
}

#error "1DC8BEF84: call analysis failed (funcsize=9)"

void sub_1DC8BEF94()
{
}

uint64_t sub_1DC8BEFB8()
{
  sub_1DC8C1FB4();

  return swift_deallocObject();
}

uint64_t sub_1DC8BEFE8()
{
  return sub_1DC8BE3A8(*(void *)(v0 + 16));
}

uint64_t sub_1DC8BEFF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1DC8BF000()
{
  return swift_release();
}

uint64_t sub_1DC8BF008()
{
  id v1 = objc_msgSend(v0, sel_impl);
  sub_1DCB88808();
  swift_unknownObjectRelease();
  uint64_t v2 = type metadata accessor for _SNAudioStreamAnalyzer();
  sub_1DC8C1F74(v2, v3, v4, v2, v5, v6, v7, v8, v10, v11);
  swift_dynamicCast();
  return v12;
}

uint64_t sub_1DC8BF078(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62)
  {
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_1DCB88CC8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v5 = 0;
  if (v4)
  {
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v6 = MEMORY[0x1E01A7AE0](v5, a1);
      }
      else
      {
        uint64_t v6 = *(void *)(a1 + 8 * v5 + 32);
        swift_unknownObjectRetain();
      }
      swift_unknownObjectRelease();
      if (v6 == a2) {
        break;
      }
      uint64_t v7 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
        goto LABEL_13;
      }
      ++v5;
      if (v7 == v4)
      {
        uint64_t v5 = 0;
        break;
      }
    }
  }
  swift_unknownObjectRelease();
  return v5;
}

id sub_1DC8BF174(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v9[1] = *(id *)MEMORY[0x1E4F143B8];
  v9[0] = 0;
  id v5 = objc_msgSend(v3, sel_initWithFormat_capacityFrames_error_, a1, a2, v9);
  if (v5)
  {
    id v6 = v9[0];
  }
  else
  {
    id v7 = v9[0];
    sub_1DCB86898();

    swift_willThrow();
  }

  return v5;
}

void sub_1DC8BF240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1DC8C1F9C();
  char v11 = v10;
  swift_bridgeObjectRetain();
  unint64_t v12 = sub_1DC963998();
  char v14 = v13;
  swift_bridgeObjectRelease();
  if (v14)
  {
    swift_isUniquelyReferenced_nonNull_native();
    sub_1DC8C2108();
    sub_1DC87E988((uint64_t *)&unk_1EAA9E740);
    sub_1DCB88C28();

    sub_1DC89C89C(0, (unint64_t *)&qword_1EAA9CB90);
    sub_1DC8C109C();
    sub_1DCB88C48();
    *char v11 = a10;
    swift_bridgeObjectRelease();
  }
  sub_1DC8C1E44();
}

uint64_t sub_1DC8BF35C()
{
  id v1 = v0;
  swift_bridgeObjectRetain();
  unint64_t v2 = sub_1DC963998();
  char v4 = v3;
  swift_bridgeObjectRelease();
  if ((v4 & 1) == 0) {
    return 0;
  }
  swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  *id v1 = 0x8000000000000000;
  sub_1DC87E988(&qword_1EAA9E738);
  sub_1DCB88C28();

  uint64_t v5 = *(void *)(*(void *)(v7 + 56) + 8 * v2);
  sub_1DC89C89C(0, (unint64_t *)&qword_1EAA9CB90);
  sub_1DC87E988((uint64_t *)&unk_1EAA9D0C0);
  sub_1DC8C109C();
  sub_1DCB88C48();
  *id v1 = v7;
  swift_bridgeObjectRelease();
  return v5;
}

unint64_t sub_1DC8BF47C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1DC9639D8(a1);
  if (v5)
  {
    unint64_t v6 = result;
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v2;
    *unint64_t v2 = 0x8000000000000000;
    sub_1DC87E988(&qword_1EAA9E7D0);
    sub_1DC8C1FFC();
    uint64_t v7 = *(void *)(v14 + 56) + 48 * v6;
    uint64_t v9 = *(void *)v7;
    uint64_t v8 = *(void *)(v7 + 8);
    uint64_t v10 = *(void *)(v7 + 16);
    uint64_t v11 = *(void *)(v7 + 24);
    uint64_t v12 = *(void *)(v7 + 32);
    int v13 = *(_DWORD *)(v7 + 40);
    sub_1DC87E988(&qword_1EAA9E7D8);
    sub_1DCB88C48();
    *unint64_t v2 = v14;
    unint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    int v13 = 0;
    uint64_t v9 = 1;
  }
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = v10;
  *(void *)(a2 + 24) = v11;
  *(void *)(a2 + 32) = v12;
  *(_DWORD *)(a2 + 40) = v13;
  return result;
}

void sub_1DC8BF58C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t sub_1DC8BF5A0(uint64_t a1, uint64_t a2)
{
  char v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1DC9637DC(a1, a2);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  swift_isUniquelyReferenced_nonNull_native();
  sub_1DC8C2108();
  sub_1DC87E988(&qword_1EAA9E800);
  sub_1DC8C1FFC();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(*(void *)(v10 + 56) + 8 * v6);
  sub_1DCB88C48();
  *char v3 = v10;
  swift_bridgeObjectRelease();
  return v8;
}

void sub_1DC8BF694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_1DC8BF6A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_1DC8BF6BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1DC8C1F9C();
  sub_1DC8C1EF4();
  sub_1DC963A1C();
  char v13 = v12;
  swift_bridgeObjectRelease();
  if (v13)
  {
    swift_isUniquelyReferenced_nonNull_native();
    sub_1DC8C1E74();
    sub_1DC8C201C();
    sub_1DCB86BF8();
    sub_1DC88819C();
    sub_1DC88D5C8();
    v14();
    sub_1DC87E988(v11);
    sub_1DC8C18C8((unint64_t *)&qword_1EAA9E778, MEMORY[0x1E4F27990]);
    sub_1DCB88C48();
    *uint64_t v10 = a10;
    swift_bridgeObjectRelease();
  }
  sub_1DC8C1E44();
}

void sub_1DC8BF7DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_1DC8BF7F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_1DC8BF804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1DC8C1F9C();
  sub_1DC8C1EF4();
  sub_1DC963A1C();
  char v13 = v12;
  swift_bridgeObjectRelease();
  if (v13)
  {
    swift_isUniquelyReferenced_nonNull_native();
    sub_1DC8C1E74();
    sub_1DC8C201C();
    sub_1DCB86BF8();
    sub_1DC88819C();
    sub_1DC88D5C8();
    v14();
    sub_1DC87E988(v11);
    sub_1DC8C18C8((unint64_t *)&qword_1EAA9E778, MEMORY[0x1E4F27990]);
    sub_1DCB88C48();
    *uint64_t v10 = a10;
    swift_bridgeObjectRelease();
  }
  sub_1DC8C1E44();
}

unint64_t sub_1DC8BF918()
{
  swift_bridgeObjectRetain();
  unint64_t v1 = sub_1DC963A1C();
  char v3 = v2;
  swift_bridgeObjectRelease();
  if (v3)
  {
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v7 = *v0;
    *uint64_t v0 = 0x8000000000000000;
    sub_1DC87E988(&qword_1EAA9E798);
    sub_1DCB88C28();
    sub_1DCB86BF8();
    sub_1DC88819C();
    sub_1DC88D5C8();
    v4();
    uint64_t v5 = *(unsigned int *)(*(void *)(v7 + 56) + 4 * v1);
    sub_1DC8C18C8((unint64_t *)&qword_1EAA9E778, MEMORY[0x1E4F27990]);
    sub_1DCB88C48();
    *uint64_t v0 = v7;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = 0;
  }
  return v5 | ((unint64_t)((v3 & 1) == 0) << 32);
}

unint64_t sub_1DC8BFA78(uint64_t a1, uint64_t a2, char a3)
{
  char v6 = a3 & 1;
  sub_1DC963954(a3 & 1);
  sub_1DC8C1D14();
  if (v9)
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v10 = v7;
  char v11 = v8;
  sub_1DC87E988((uint64_t *)&unk_1EAA9C688);
  if ((sub_1DC8C1DC0() & 1) == 0) {
    goto LABEL_5;
  }
  unint64_t v12 = sub_1DC963954(v6);
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_11:
    unint64_t result = sub_1DCB890E8();
    __break(1u);
    return result;
  }
  unint64_t v10 = v12;
LABEL_5:
  uint64_t v14 = *v3;
  if (v11)
  {
    uint64_t v15 = (uint64_t *)(v14[7] + 16 * v10);
    unint64_t result = swift_release();
    *uint64_t v15 = a1;
    v15[1] = a2;
  }
  else
  {
    return sub_1DC8C05A8(v10, v6, a1, a2, v14);
  }
  return result;
}

id sub_1DC8BFB78(uint64_t a1, void *a2)
{
  char v3 = (void **)v2;
  uint64_t v5 = (void *)*v2;
  unint64_t v6 = sub_1DC963998();
  if (__OFADD__(v5[2], (v7 & 1) == 0))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v8 = v6;
  char v9 = v7;
  sub_1DC87E988(&qword_1EAA9E738);
  if ((sub_1DCB88C28() & 1) == 0) {
    goto LABEL_5;
  }
  unint64_t v10 = sub_1DC963998();
  if ((v9 & 1) != (v11 & 1))
  {
LABEL_11:
    sub_1DC89C89C(0, (unint64_t *)&qword_1EAA9CB90);
    id result = (id)sub_1DCB890E8();
    __break(1u);
    return result;
  }
  unint64_t v8 = v10;
LABEL_5:
  unint64_t v12 = *v3;
  if (v9)
  {
    uint64_t v13 = v12[7];
    id result = (id)swift_bridgeObjectRelease();
    *(void *)(v13 + 8 * v8) = a1;
  }
  else
  {
    sub_1DC8C05F4(v8, (uint64_t)a2, a1, v12);
    return a2;
  }
  return result;
}

void sub_1DC8BFCA0()
{
  sub_1DC8C1F9C();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v20 = v7;
  sub_1DC963998();
  sub_1DC8C1D14();
  if (v10)
  {
    __break(1u);
LABEL_12:
    sub_1DC89C89C(0, (unint64_t *)&qword_1EAA9CB90);
    sub_1DCB890E8();
    __break(1u);
    return;
  }
  unint64_t v11 = v8;
  char v12 = v9;
  sub_1DC87E988((uint64_t *)&unk_1EAA9E740);
  if (sub_1DC8C1DC0())
  {
    sub_1DC963998();
    sub_1DC8C1EE4();
    if (!v14) {
      goto LABEL_12;
    }
    unint64_t v11 = v13;
  }
  uint64_t v15 = *v0;
  if (v12)
  {
    id v16 = (uint64_t *)(v15[7] + 24 * v11);
    swift_release();
    swift_release();
    swift_release();
    *id v16 = v6;
    v16[1] = v4;
    void v16[2] = v2;
    sub_1DC8C1E44();
  }
  else
  {
    sub_1DC8C0638(v11, v20, v6, v4, v2, v15);
    sub_1DC8C1E44();
    id v19 = v17;
  }
}

void sub_1DC8BFDC8()
{
  sub_1DC89D9F8();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  sub_1DC9637DC(v3, v1);
  sub_1DC8C1D14();
  if (v11)
  {
    __break(1u);
LABEL_12:
    sub_1DCB890E8();
    __break(1u);
    return;
  }
  unint64_t v12 = v9;
  char v13 = v10;
  sub_1DC87E988(&qword_1EAA9C698);
  if (sub_1DC8C1DA0())
  {
    sub_1DC9637DC(v4, v2);
    sub_1DC8C1EE4();
    if (!v15) {
      goto LABEL_12;
    }
    unint64_t v12 = v14;
  }
  uint64_t v16 = *v0;
  if (v13)
  {
    id v17 = (uint64_t *)(*(void *)(v16 + 56) + 16 * v12);
    swift_bridgeObjectRelease();
    *id v17 = v8;
    v17[1] = v6;
    sub_1DC89DA54();
  }
  else
  {
    sub_1DC8C0688(v12, v4, v2, v8, v6, v16);
    sub_1DC89DA54();
    swift_bridgeObjectRetain();
  }
}

void sub_1DC8BFECC()
{
}

uint64_t sub_1DC8BFED8(uint64_t a1, uint64_t a2, double a3)
{
  sub_1DC9637DC(a1, a2);
  sub_1DC8C1D14();
  if (v9)
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v10 = v7;
  char v11 = v8;
  sub_1DC87E988(&qword_1EAA9E800);
  uint64_t result = sub_1DCB88C28();
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t result = sub_1DC9637DC(a1, a2);
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_11:
    uint64_t result = sub_1DCB890E8();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
LABEL_5:
  unint64_t v14 = *v3;
  if (v11)
  {
    *(double *)(v14[7] + 8 * v10) = a3;
  }
  else
  {
    sub_1DC8C06CC(v10, a1, a2, v14, a3);
    return swift_bridgeObjectRetain();
  }
  return result;
}

void sub_1DC8BFFF0()
{
}

void sub_1DC8BFFFC()
{
  sub_1DC89D9F8();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v21 = v6;
  uint64_t v22 = v7;
  uint64_t v8 = sub_1DCB86BF8();
  sub_1DC88D538();
  uint64_t v10 = v9;
  MEMORY[0x1F4188790](v11);
  sub_1DC8C1FC4();
  sub_1DC963A1C();
  sub_1DC8C1D14();
  if (v14)
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v15 = v12;
  char v16 = v13;
  sub_1DC87E988(v3);
  if (sub_1DC8C1DA0())
  {
    unint64_t v17 = sub_1DC963A1C();
    if ((v16 & 1) == (v18 & 1))
    {
      unint64_t v15 = v17;
      goto LABEL_5;
    }
LABEL_10:
    sub_1DCB890E8();
    __break(1u);
    return;
  }
LABEL_5:
  uint64_t v19 = *v0;
  if (v16)
  {
    uint64_t v20 = (uint64_t *)(*(void *)(v19 + 56) + 16 * v15);
    swift_release();
    *uint64_t v20 = v21;
    v20[1] = v22;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v1, v5, v8);
    sub_1DC8C0714(v15, v1, v21, v22, v19);
  }
  sub_1DC89DA54();
}

void sub_1DC8C013C()
{
}

void sub_1DC8C0148()
{
}

void sub_1DC8C0154()
{
}

void sub_1DC8C0160()
{
  sub_1DC89D9F8();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v20 = v6;
  uint64_t v7 = sub_1DCB86BF8();
  sub_1DC88D538();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v10);
  sub_1DC8C1EB8();
  sub_1DC8C1D14();
  if (v13)
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v14 = v11;
  char v15 = v12;
  sub_1DC87E988(v3);
  if (sub_1DC8C1FDC())
  {
    unint64_t v16 = sub_1DC963A1C();
    if ((v15 & 1) == (v17 & 1))
    {
      unint64_t v14 = v16;
      goto LABEL_5;
    }
LABEL_10:
    sub_1DCB890E8();
    __break(1u);
    return;
  }
LABEL_5:
  uint64_t v18 = *v0;
  if (v15)
  {
    uint64_t v19 = *(void *)(v18 + 56);
    swift_release();
    *(void *)(v19 + 8 * v14) = v20;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v1, v5, v7);
    sub_1DC8C07BC(v14, v1, v20, v18);
  }
  sub_1DC89DA54();
}

void sub_1DC8C028C()
{
  sub_1DC89D9F8();
  uint64_t v3 = v2;
  int v5 = v4;
  uint64_t v6 = sub_1DCB86BF8();
  sub_1DC88D538();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9);
  sub_1DC8C1EB8();
  sub_1DC8C1D14();
  if (v12)
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v13 = v10;
  char v14 = v11;
  sub_1DC87E988(&qword_1EAA9E798);
  if (sub_1DC8C1FDC())
  {
    unint64_t v15 = sub_1DC963A1C();
    if ((v14 & 1) == (v16 & 1))
    {
      unint64_t v13 = v15;
      goto LABEL_5;
    }
LABEL_10:
    sub_1DCB890E8();
    __break(1u);
    return;
  }
LABEL_5:
  char v17 = *v0;
  if (v14)
  {
    *(_DWORD *)(v17[7] + 4 * v13) = v5;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v1, v3, v6);
    sub_1DC8C085C(v13, v1, v5, v17);
  }
  sub_1DC89DA54();
}

uint64_t sub_1DC8C03A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1DC9637DC(a2, a3);
  sub_1DC8C1D14();
  if (v9)
  {
    __break(1u);
LABEL_12:
    uint64_t result = sub_1DCB890E8();
    __break(1u);
    return result;
  }
  unint64_t v10 = v7;
  char v11 = v8;
  sub_1DC87E988(&qword_1EAA9E760);
  if (sub_1DC8C1DC0())
  {
    sub_1DC9637DC(a2, a3);
    sub_1DC8C1EE4();
    if (!v13) {
      goto LABEL_12;
    }
    unint64_t v10 = v12;
  }
  char v14 = *v3;
  if (v11)
  {
    uint64_t v15 = v14[7];
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v15 + 8 * v10) = a1;
  }
  else
  {
    sub_1DC8C0914(v10, a2, a3, a1, v14);
    return swift_bridgeObjectRetain();
  }
  return result;
}

void sub_1DC8C04AC()
{
  sub_1DC89D9F8();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  sub_1DC9637DC(v3, v1);
  sub_1DC8C1D14();
  if (v11)
  {
    __break(1u);
LABEL_12:
    sub_1DCB890E8();
    __break(1u);
    return;
  }
  unint64_t v12 = v9;
  char v13 = v10;
  sub_1DC87E988(&qword_1EAA9E790);
  if (sub_1DC8C1DA0())
  {
    sub_1DC9637DC(v4, v2);
    sub_1DC8C1EE4();
    if (!v15) {
      goto LABEL_12;
    }
    unint64_t v12 = v14;
  }
  char v16 = *v0;
  if (v13)
  {
    char v17 = (uint64_t *)(v16[7] + 16 * v12);
    *char v17 = v8;
    v17[1] = v6;
    sub_1DC89DA54();
  }
  else
  {
    sub_1DC8C095C(v12, v4, v2, v8, v6, v16);
    sub_1DC89DA54();
    swift_bridgeObjectRetain();
  }
}

unint64_t sub_1DC8C05A8(unint64_t result, char a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a5[6] + result) = a2 & 1;
  uint64_t v5 = (void *)(a5[7] + 16 * result);
  *uint64_t v5 = a3;
  v5[1] = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

unint64_t sub_1DC8C05F4(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(void *)(a4[6] + 8 * result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

unint64_t sub_1DC8C0638(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  *(void *)(a6[6] + 8 * result) = a2;
  uint64_t v6 = (void *)(a6[7] + 24 * result);
  *uint64_t v6 = a3;
  v6[1] = a4;
  void v6[2] = a5;
  uint64_t v7 = a6[2];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2] = v9;
  }
  return result;
}

uint64_t sub_1DC8C0688(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = sub_1DC8C1E0C(a1, a6 + 8 * (a1 >> 6));
  BOOL v8 = (void *)(v7[6] + 16 * result);
  *BOOL v8 = v9;
  v8[1] = v10;
  char v11 = (void *)(v7[7] + 16 * result);
  *char v11 = v12;
  v11[1] = v13;
  uint64_t v14 = v7[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    id v7[2] = v16;
  }
  return result;
}

unint64_t sub_1DC8C06CC(unint64_t result, uint64_t a2, uint64_t a3, void *a4, double a5)
{
  a4[(result >> 6) + 8] |= 1 << result;
  BOOL v5 = (void *)(a4[6] + 16 * result);
  *BOOL v5 = a2;
  v5[1] = a3;
  *(double *)(a4[7] + 8 * result) = a5;
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

uint64_t sub_1DC8C0714(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1DC8C1E0C(a1, a5 + 8 * (a1 >> 6));
  uint64_t v11 = *(void *)(v10 + 48);
  sub_1DCB86BF8();
  sub_1DC88819C();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t))(v12 + 32))(v11 + *(void *)(v12 + 72) * a1, a2);
  uint64_t v14 = (void *)(*(void *)(a5 + 56) + 16 * a1);
  *uint64_t v14 = a3;
  v14[1] = a4;
  uint64_t v15 = *(void *)(a5 + 16);
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    *(void *)(a5 + 16) = v17;
  }
  return result;
}

uint64_t sub_1DC8C07BC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1DC8C1E0C(a1, a4 + 8 * (a1 >> 6));
  uint64_t v9 = *(void *)(v8 + 48);
  sub_1DCB86BF8();
  sub_1DC88819C();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t))(v10 + 32))(v9 + *(void *)(v10 + 72) * a1, a2);
  *(void *)(*(void *)(a4 + 56) + 8 * a1) = a3;
  uint64_t v12 = *(void *)(a4 + 16);
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    *(void *)(a4 + 16) = v14;
  }
  return result;
}

uint64_t sub_1DC8C085C(unint64_t a1, uint64_t a2, int a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = sub_1DCB86BF8();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(_DWORD *)(a4[7] + 4 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

unint64_t sub_1DC8C0914(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  BOOL v5 = (void *)(a5[6] + 16 * result);
  *BOOL v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

unint64_t sub_1DC8C095C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  *uint64_t v6 = a2;
  v6[1] = a3;
  BOOL v7 = (void *)(a6[7] + 16 * result);
  *BOOL v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

unint64_t sub_1DC8C09A8(uint64_t *a1, uint64_t a2)
{
  swift_unknownObjectRetain();
  unint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = sub_1DC8BF078(v6, a2);
  if (v2)
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v3 = v7;
    char v9 = v8;
    swift_bridgeObjectRelease();
    if (v9)
    {
      unint64_t v22 = *a1;
      if (v22 >> 62)
      {
        swift_bridgeObjectRetain();
        unint64_t v3 = sub_1DCB88CC8();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        return v3;
      }
      unint64_t v3 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    else
    {
      uint64_t v10 = v3 + 1;
      if (__OFADD__(v3, 1)) {
        goto LABEL_58;
      }
      if ((unint64_t)*a1 >> 62)
      {
LABEL_59:
        sub_1DC8C20E8();
        uint64_t v11 = sub_1DCB88CC8();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v11 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (v10 != v11)
      {
        unint64_t v12 = v3 + 5;
        do
        {
          unint64_t v13 = v12 - 4;
          uint64_t v14 = *a1;
          if ((*a1 & 0xC000000000000001) != 0)
          {
            uint64_t v15 = MEMORY[0x1E01A7AE0](v12 - 4);
          }
          else
          {
            if ((v13 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_49:
              __break(1u);
LABEL_50:
              __break(1u);
LABEL_51:
              __break(1u);
LABEL_52:
              __break(1u);
LABEL_53:
              __break(1u);
LABEL_54:
              __break(1u);
LABEL_55:
              __break(1u);
LABEL_56:
              __break(1u);
LABEL_57:
              __break(1u);
LABEL_58:
              __break(1u);
              goto LABEL_59;
            }
            if (v13 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_49;
            }
            uint64_t v15 = *(void *)(v14 + 8 * v12);
            swift_unknownObjectRetain();
          }
          swift_unknownObjectRelease();
          if (v15 != a2)
          {
            if (v13 != v3)
            {
              uint64_t v10 = *a1;
              if ((*a1 & 0xC000000000000001) != 0)
              {
                uint64_t v16 = MEMORY[0x1E01A7AE0](v3, *a1);
                uint64_t v10 = *a1;
              }
              else
              {
                if ((v3 & 0x8000000000000000) != 0) {
                  goto LABEL_52;
                }
                if (v3 >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                  goto LABEL_53;
                }
                uint64_t v16 = *(void *)(v10 + 8 * v3 + 32);
                swift_unknownObjectRetain();
              }
              if ((v10 & 0xC000000000000001) != 0)
              {
                uint64_t v17 = MEMORY[0x1E01A7AE0](v12 - 4, v10);
                uint64_t v10 = *a1;
              }
              else
              {
                if ((v13 & 0x8000000000000000) != 0) {
                  goto LABEL_54;
                }
                if (v13 >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                  goto LABEL_55;
                }
                uint64_t v17 = *(void *)(v10 + 8 * v12);
                swift_unknownObjectRetain();
              }
              int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
              *a1 = v10;
              if (!isUniquelyReferenced_nonNull_bridgeObject || v10 < 0 || (v10 & 0x4000000000000000) != 0)
              {
                uint64_t v10 = sub_1DC987164(v10);
                *a1 = v10;
              }
              *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 8 * v3 + 0x20) = v17;
              swift_unknownObjectRelease();
              sub_1DCB87C68();
              uint64_t v10 = *a1;
              int v19 = swift_isUniquelyReferenced_nonNull_bridgeObject();
              *a1 = v10;
              if (!v19 || v10 < 0 || (v10 & 0x4000000000000000) != 0)
              {
                uint64_t v10 = sub_1DC987164(v10);
                *a1 = v10;
              }
              if ((v13 & 0x8000000000000000) != 0) {
                goto LABEL_56;
              }
              if (v13 >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_57;
              }
              *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 8 * v12) = v16;
              swift_unknownObjectRelease();
              sub_1DCB87C68();
            }
            if (__OFADD__(v3++, 1)) {
              goto LABEL_51;
            }
          }
          uint64_t v10 = v12 - 3;
          if (__OFADD__(v13, 1)) {
            goto LABEL_50;
          }
          if ((unint64_t)*a1 >> 62)
          {
            sub_1DC8C20E8();
            uint64_t v21 = sub_1DCB88CC8();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v21 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          ++v12;
        }
        while (v10 != v21);
      }
    }
    swift_unknownObjectRelease();
  }
  return v3;
}

uint64_t sub_1DC8C0CC0()
{
  sub_1DC89D9F8();
  if (v6 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_1DC8C203C();
    if (!v7)
    {
      sub_1DC8C2148();
      goto LABEL_4;
    }
  }
  sub_1DC8C1D58();
  sub_1DCB88CC8();
  sub_1DC8C207C();
LABEL_4:
  if (v3 < v0)
  {
    __break(1u);
    goto LABEL_30;
  }
  if (__OFSUB__(v0, v2))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v5 = v2 - v0;
  if (__OFSUB__(0, v0 - v2))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  sub_1DC8C1F44();
  if (!v8)
  {
    sub_1DC8C2050();
    goto LABEL_9;
  }
LABEL_32:
  sub_1DC8C1D38();
  sub_1DCB88CC8();
  sub_1DC8C1F84();
LABEL_9:
  if (__OFADD__(v4, v5))
  {
    __break(1u);
    goto LABEL_34;
  }
  unint64_t v9 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v4 + v5 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_15:
      swift_bridgeObjectRetain();
      sub_1DC8C205C();
      *uint64_t v1 = v12;
      swift_bridgeObjectRelease();
      uint64_t v11 = *v1 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_16;
    }
LABEL_34:
    sub_1DC8C1E24();
    sub_1DCB88CC8();
    swift_bridgeObjectRelease();
    unint64_t v9 = *v1;
    goto LABEL_15;
  }
LABEL_16:
  uint64_t v13 = v11 + 32;
  uint64_t v14 = v11 + 32 + 8 * v2;
  type metadata accessor for SNAnalyzerInfo();
  swift_arrayDestroy();
  if (!v5) {
    goto LABEL_24;
  }
  if (*v1 >> 62)
  {
    sub_1DC8C1D58();
    sub_1DCB88CC8();
    sub_1DC8C207C();
  }
  else
  {
    sub_1DC8C2148();
  }
  if (__OFSUB__(v9, v0))
  {
    __break(1u);
    goto LABEL_37;
  }
  uint64_t result = sub_1DC896E10(v13 + 8 * v0, v9 - v0, v14);
  if (*v1 >> 62)
  {
LABEL_37:
    sub_1DC8C20C8();
    uint64_t v16 = sub_1DCB88CC8();
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  uint64_t v16 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_22:
  if (__OFADD__(v16, v5))
  {
    __break(1u);
    return result;
  }
  *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16 + v5;
LABEL_24:
  sub_1DC89DA54();
  return sub_1DCB87C68();
}

uint64_t sub_1DC8C0EAC()
{
  sub_1DC89D9F8();
  if (v6 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_1DC8C203C();
    if (!v7)
    {
      sub_1DC8C2148();
      goto LABEL_4;
    }
  }
  sub_1DC8C1D58();
  sub_1DCB88CC8();
  sub_1DC8C207C();
LABEL_4:
  if (v3 < v0)
  {
    __break(1u);
    goto LABEL_30;
  }
  if (__OFSUB__(v0, v2))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v5 = v2 - v0;
  if (__OFSUB__(0, v0 - v2))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  sub_1DC8C1F44();
  if (!v8)
  {
    sub_1DC8C2050();
    goto LABEL_9;
  }
LABEL_32:
  sub_1DC8C1D38();
  sub_1DCB88CC8();
  sub_1DC8C1F84();
LABEL_9:
  if (__OFADD__(v4, v5))
  {
    __break(1u);
    goto LABEL_34;
  }
  unint64_t v9 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v4 + v5 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_15:
      swift_bridgeObjectRetain();
      sub_1DC8C205C();
      *uint64_t v1 = v12;
      swift_bridgeObjectRelease();
      uint64_t v11 = *v1 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_16;
    }
LABEL_34:
    sub_1DC8C1E24();
    sub_1DCB88CC8();
    swift_bridgeObjectRelease();
    unint64_t v9 = *v1;
    goto LABEL_15;
  }
LABEL_16:
  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(v11 + 32 + 8 * v2);
  sub_1DC87E988((uint64_t *)&unk_1EAA9CBA0);
  swift_arrayDestroy();
  if (!v5) {
    goto LABEL_24;
  }
  if (*v1 >> 62)
  {
    sub_1DC8C1D58();
    sub_1DCB88CC8();
    sub_1DC8C207C();
  }
  else
  {
    sub_1DC8C2148();
  }
  if (__OFSUB__(v9, v0))
  {
    __break(1u);
    goto LABEL_37;
  }
  uint64_t result = (uint64_t)sub_1DC8973E0((char *)(v13 + 8 * v0), v9 - v0, v14);
  if (*v1 >> 62)
  {
LABEL_37:
    sub_1DC8C20C8();
    uint64_t v16 = sub_1DCB88CC8();
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  uint64_t v16 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_22:
  if (__OFADD__(v16, v5))
  {
    __break(1u);
    return result;
  }
  *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16 + v5;
LABEL_24:
  sub_1DC89DA54();
  return sub_1DCB87C68();
}

unint64_t sub_1DC8C109C()
{
  unint64_t result = qword_1EAA9CB98;
  if (!qword_1EAA9CB98)
  {
    sub_1DC89C89C(255, (unint64_t *)&qword_1EAA9CB90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9CB98);
  }
  return result;
}

uint64_t sub_1DC8C10FC()
{
  return sub_1DC8C1874(MEMORY[0x1E4FBC8F8]);
}

void sub_1DC8C1114()
{
  sub_1DC8BD290(*(void *)(v0 + 24));
}

uint64_t sub_1DC8C1140()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1DC8C1168()
{
  swift_unknownObjectWeakDestroy();
  sub_1DC8C1FB4();

  return swift_deallocObject();
}

uint64_t sub_1DC8C1198()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

void *sub_1DC8C11E0(void *a1)
{
  return sub_1DC8BCACC(a1, v1[2], v1[3], v1[4]);
}

void *sub_1DC8C11F0(uint64_t a1)
{
  return sub_1DC8BCE60(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

id sub_1DC8C11F8()
{
  return sub_1DC8BCF58(*(void *)(v0 + 24), *(void (**)(void *))(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

void sub_1DC8C122C(uint64_t a1)
{
  sub_1DC8BDA18(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void (**)(uint64_t))(v1 + 32));
}

uint64_t sub_1DC8C123C()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

void sub_1DC8C1284(uint64_t a1)
{
  sub_1DC8BDAA4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void (**)(uint64_t))(v1 + 32));
}

uint64_t sub_1DC8C1290()
{
  sub_1DC89D9F8();
  if (v7 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v0 = v9;
    uint64_t v2 = v8;
    uint64_t v3 = v7;
    sub_1DC8C1F44();
    if (!v10)
    {
      sub_1DC8C2050();
      goto LABEL_4;
    }
  }
  sub_1DC8C1D38();
  sub_1DCB88CC8();
  sub_1DC8C1F84();
LABEL_4:
  if (v5 < v2)
  {
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v11 = v2 - v3;
  if (__OFSUB__(v2, v3))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v6 = 1 - v11;
  if (__OFSUB__(1, v11))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  sub_1DC8C1F44();
  if (!v12)
  {
    uint64_t v13 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_9;
  }
LABEL_36:
  sub_1DC8C1E24();
  uint64_t v13 = sub_1DCB88CC8();
  swift_bridgeObjectRelease();
LABEL_9:
  uint64_t v14 = v13 + v6;
  if (__OFADD__(v13, v6))
  {
    __break(1u);
LABEL_38:
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_1DCB88CC8();
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v4;
  uint64_t v13 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v16 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v14 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_20;
    }
    uint64_t v13 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_38;
  }
  uint64_t v17 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_17:
  if (v17 <= v14) {
    uint64_t v17 = v14;
  }
  swift_bridgeObjectRetain();
  unint64_t v4 = MEMORY[0x1E01A7AF0](v13, v17, 1, v4);
  swift_bridgeObjectRelease();
  *uint64_t v1 = v4;
  uint64_t v16 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_20:
  uint64_t v18 = (void *)(v16 + 32 + 8 * v3);
  sub_1DC89C89C(0, (unint64_t *)&qword_1EAA9C7A0);
  swift_arrayDestroy();
  if (!v6) {
    goto LABEL_28;
  }
  if (v4 >> 62)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      unint64_t v19 = v4;
    }
    else {
      unint64_t v19 = v16;
    }
    swift_bridgeObjectRetain();
    sub_1DCB88CC8();
    sub_1DC8C1F84();
  }
  else
  {
    unint64_t v19 = *(void *)(v16 + 16);
  }
  if (__OFSUB__(v19, v2))
  {
    __break(1u);
    goto LABEL_44;
  }
  uint64_t result = sub_1DC896E10(v16 + 32 + 8 * v2, v19 - v2, v18 + 1);
  if (v4 >> 62)
  {
LABEL_44:
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_1DCB88CC8();
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v16 + 16);
LABEL_26:
  if (__OFADD__(v21, v6))
  {
    __break(1u);
    return result;
  }
  *(void *)(v16 + 16) = v21 + v6;
LABEL_28:
  *uint64_t v18 = v0;
  sub_1DC89DA54();
  return sub_1DCB87C68();
}

uint64_t sub_1DC8C14C4(void *a1, uint64_t a2, uint64_t a3, CMTimeValue a4, uint64_t a5, CMTimeEpoch a6, CMTimeValue a7, uint64_t a8, CMTimeEpoch a9)
{
  time2.CMTimeEpoch epoch = a6;
  time1.CMTimeValue value = a7;
  *(void *)&time1.CMTimeScale timescale = a8;
  time1.CMTimeEpoch epoch = a9;
  time2.CMTimeValue value = a4;
  *(void *)&time2.CMTimeScale timescale = a5;
  CMTimeCompare(&time1, &time2);
  objc_msgSend(a1, sel_timeRange, a3);
  sub_1DCB883C8();
  sub_1DCB885E8();
  return sub_1DC8C15DC(a1, a2, v13);
}

uint64_t sub_1DC8C15DC(void *a1, uint64_t a2, uint64_t a3)
{
  sub_1DC89C89C(0, (unint64_t *)&qword_1EAA9CB90);
  uint64_t v12[3] = swift_getObjectType();
  v12[0] = a2;
  swift_unknownObjectRetain();
  id v6 = sub_1DC8BE068(v12);
  unint64_t v7 = sub_1DC961378((uint64_t)v6, a3);

  if (!v7) {
    unint64_t v7 = MEMORY[0x1E4FBC860];
  }
  uint64_t v8 = sub_1DC8C1700(a1, v7);
  swift_bridgeObjectRelease();
  id v9 = v6;
  swift_bridgeObjectRetain();
  swift_isUniquelyReferenced_nonNull_native();
  v12[0] = a3;
  sub_1DC8BFB78(v8, v9);
  uint64_t v10 = v12[0];

  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1DC8C1700(void *a1, unint64_t a2)
{
  sub_1DC87E988(&qword_1EAA9C720);
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DCBB8670;
  objc_msgSend(a1, sel_copy);
  sub_1DCB88808();
  swift_unknownObjectRelease();
  sub_1DC87E988((uint64_t *)&unk_1EAA9E750);
  swift_dynamicCast();
  sub_1DCB87C68();
  swift_bridgeObjectRetain();
  sub_1DCB18BA0(inited);
  uint64_t v5 = sub_1DC8F246C(a2);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1DC8C181C()
{
  swift_release();
  swift_unknownObjectRelease();
  sub_1DC8BADE0();

  return swift_deallocObject();
}

void sub_1DC8C1854()
{
  sub_1DC8BE00C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1DC8C185C()
{
  return sub_1DC8C1874(MEMORY[0x1E4FBC8B8]);
}

uint64_t sub_1DC8C1874(void (*a1)(void))
{
  a1(*(void *)(v1 + 24));
  sub_1DC8BADE0();

  return swift_deallocObject();
}

uint64_t sub_1DC8C18BC()
{
  return sub_1DC8BEE98();
}

uint64_t sub_1DC8C18C8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1DC8C1910@<X0>(uint64_t *a1@<X8>)
{
  return sub_1DC8BEE34(a1);
}

uint64_t sub_1DC8C192C()
{
  return sub_1DC8BECBC();
}

void sub_1DC8C1938()
{
  sub_1DC8BE668(*(void **)(v0 + 24));
}

uint64_t sub_1DC8C1964()
{
  _Block_release(*(const void **)(v0 + 16));
  sub_1DC8C1FB4();

  return swift_deallocObject();
}

void sub_1DC8C1994(uint64_t a1)
{
  sub_1DCB29460(a1, *(void *)(v1 + 16));
}

uint64_t sub_1DC8C199C(uint64_t a1)
{
  return sub_1DC8F04C0(a1, *(void *)(v1 + 16));
}

unint64_t sub_1DC8C19A4()
{
  unint64_t result = qword_1EAA9E7E0;
  if (!qword_1EAA9E7E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E7E0);
  }
  return result;
}

uint64_t sub_1DC8C19F0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1DC8863A8(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1DC8C1A40()
{
  swift_release();
  sub_1DC8BADE0();

  return swift_deallocObject();
}

uint64_t sub_1DC8C1A70()
{
  return sub_1DC8BBCBC(v0);
}

uint64_t sub_1DC8C1A78()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1DC8C1AB8()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 32);
  uint64_t v2 = (*(uint64_t (**)(void))(v0 + 16))();
  return v1(v2);
}

uint64_t sub_1DC8C1AFC()
{
  return sub_1DC8BC04C(v0);
}

uint64_t sub_1DC8C1B04()
{
  swift_release();

  return swift_deallocObject();
}

void sub_1DC8C1B3C()
{
  sub_1DC8BC090(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1DC8C1B5C()
{
  return sub_1DCA0E12C();
}

uint64_t sub_1DC8C1B64()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_1DC8C1B74()
{
  return sub_1DC8BC34C(*(uint64_t (**)(void))(v0 + 16));
}

unsigned char *storeEnumTagSinglePayload for _SNAudioStreamAnalyzer.DomainError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1DC8C1C30);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for _SNAudioStreamAnalyzer.DomainError()
{
  return &type metadata for _SNAudioStreamAnalyzer.DomainError;
}

unint64_t sub_1DC8C1C6C()
{
  unint64_t result = qword_1EAA9E808;
  if (!qword_1EAA9E808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E808);
  }
  return result;
}

uint64_t sub_1DC8C1D28()
{
  return swift_deallocObject();
}

uint64_t sub_1DC8C1D38()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1DC8C1D58()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1DC8C1DA0()
{
  return sub_1DCB88C28();
}

uint64_t sub_1DC8C1DC0()
{
  return sub_1DCB88C28();
}

uint64_t sub_1DC8C1DE0()
{
  return sub_1DCB87A18();
}

uint64_t sub_1DC8C1E0C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 64) |= 1 << result;
  return result;
}

uint64_t sub_1DC8C1E24()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1DC8C1E74()
{
  *uint64_t v0 = 0x8000000000000000;
  return sub_1DC87E988(v1);
}

unint64_t sub_1DC8C1EB8()
{
  return sub_1DC963A1C();
}

uint64_t sub_1DC8C1EF4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1DC8C1F1C()
{
  return sub_1DCB875B8();
}

uint64_t sub_1DC8C1F50()
{
  return swift_beginAccess();
}

char *sub_1DC8C1F74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return &a10;
}

uint64_t sub_1DC8C1F84()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1DC8C1FB4()
{
  return v0;
}

uint64_t sub_1DC8C1FDC()
{
  return sub_1DCB88C28();
}

uint64_t sub_1DC8C1FFC()
{
  return sub_1DCB88C28();
}

uint64_t sub_1DC8C201C()
{
  return sub_1DCB88C28();
}

void sub_1DC8C205C()
{
  JUMPOUT(0x1E01A7AF0);
}

uint64_t sub_1DC8C207C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1DC8C2094()
{
  return swift_dynamicCast();
}

void sub_1DC8C20B4(int a1@<W8>)
{
  uint64_t v6 = v5 + v3;
  *(void *)uint64_t v6 = v4;
  *(_DWORD *)(v6 + 8) = a1;
  *(_DWORD *)(v6 + 12) = v1;
  *(void *)(v6 + 16) = v2;
}

uint64_t sub_1DC8C20C8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1DC8C20E8()
{
  return swift_bridgeObjectRetain();
}

void sub_1DC8C2108()
{
  *uint64_t v0 = 0x8000000000000000;
}

uint64_t sub_1DC8C211C(void *a1)
{
  a1[2] = v3;
  a1[3] = v1;
  a1[4] = v2;
  return swift_retain();
}

uint64_t sub_1DC8C213C()
{
  return v0;
}

BOOL sub_1DC8C2154(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL sub_1DC8C2164(int a1, int a2)
{
  return a1 == a2;
}

uint64_t sub_1DC8C2170()
{
  uint64_t v0 = sub_1DCB87938();
  uint64_t v2 = v1;
  if (v0 == sub_1DCB87938() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_1DC8CD8D4();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1DC8C21EC()
{
  sub_1DC8CD68C();
  BOOL v4 = (v3 & 1) == 0;
  if (v3) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v1;
  }
  if (v4) {
    unint64_t v6 = 0x80000001DCB8FF40;
  }
  else {
    unint64_t v6 = 0x80000001DCB8FF60;
  }
  if (v0) {
    uint64_t v7 = v2;
  }
  else {
    uint64_t v7 = v1;
  }
  if (v0) {
    unint64_t v8 = 0x80000001DCB8FF60;
  }
  else {
    unint64_t v8 = 0x80000001DCB8FF40;
  }
  if (v5 == v7 && v6 == v8) {
    char v10 = 1;
  }
  else {
    char v10 = sub_1DC8CD8D4();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t sub_1DC8C2280(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 7105633;
  int v3 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v4 = 7696483;
    }
    else {
      uint64_t v4 = 0x4E41646E41757063;
    }
    if (v3 == 1) {
      unint64_t v5 = 0xE300000000000000;
    }
    else {
      unint64_t v5 = 0xE900000000000045;
    }
  }
  else
  {
    unint64_t v5 = 0xE300000000000000;
    uint64_t v4 = 7105633;
  }
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v2 = 7696483;
    }
    else {
      uint64_t v2 = 0x4E41646E41757063;
    }
    if (a2 == 1) {
      unint64_t v6 = 0xE300000000000000;
    }
    else {
      unint64_t v6 = 0xE900000000000045;
    }
  }
  else
  {
    unint64_t v6 = 0xE300000000000000;
  }
  if (v4 == v2 && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = sub_1DC8CD8D4();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1DC8C2368()
{
  sub_1DC8CD68C();
  sub_1DCB879B8();
  swift_bridgeObjectRelease();
  swift_retain();
  sub_1DC9700D8();
  sub_1DCB879B8();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1DC8C2414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((sub_1DC8C21EC() & 1) == 0) {
    return 0;
  }
  type metadata accessor for SNMLModelHashableUncodableWrapper();
  return sub_1DC971658(a2, a4) & 1;
}

uint64_t sub_1DC8C2470(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000014 && a2 == 0x80000001DCB91870 || (sub_1DCB89018() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001DCB91890)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = sub_1DCB89018();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t sub_1DC8C2560(char a1)
{
  if (a1) {
    return 0xD000000000000011;
  }
  else {
    return 0xD000000000000014;
  }
}

void sub_1DC8C259C()
{
  sub_1DC88D6B0();
  uint64_t v2 = v1;
  sub_1DC87E988(&qword_1EAA9EB40);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v3);
  sub_1DC89D988();
  sub_1DC881A8C(v2, v2[3]);
  sub_1DC8CD2E0();
  sub_1DC89D5E4();
  sub_1DC8CD378();
  sub_1DCB88F18();
  if (!v0)
  {
    type metadata accessor for SNMLModelHashableUncodableWrapper();
    sub_1DC8CC954(&qword_1EAAA4F60);
    sub_1DCB88F18();
  }
  sub_1DC8CD9A8();
  sub_1DC8CD890();
  v4();
  sub_1DC88D674();
}

uint64_t sub_1DC8C26F4()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC8C27A4(void *a1)
{
  sub_1DC87E988(&qword_1EAA9EB28);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v2);
  sub_1DC881A8C(a1, a1[3]);
  sub_1DC8CD2E0();
  sub_1DCB89298();
  sub_1DC8CD32C();
  sub_1DCB88DF8();
  type metadata accessor for SNMLModelHashableUncodableWrapper();
  sub_1DC8CC954(&qword_1EAA9EA18);
  sub_1DCB88DF8();
  sub_1DC8CD890();
  v3();
  sub_1DC8818D0((uint64_t)a1);
  return v5;
}

uint64_t sub_1DC8C296C()
{
  uint64_t v2 = *(void *)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  if (*(unsigned char *)(v0 + 16))
  {
    if (*(unsigned char *)(v0 + 16) == 1)
    {
      sub_1DCB891B8();
      return sub_1DCB879B8();
    }
    sub_1DCB891B8();
    swift_retain();
    sub_1DC9700D8();
    sub_1DC8CD8F0();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1DC8CD7D4();
  }
  else
  {
    sub_1DCB891B8();
    sub_1DC8CD68C();
    sub_1DC8CD8C4();
    swift_retain();
    sub_1DCB879B8();
    swift_bridgeObjectRelease();
    swift_retain();
    sub_1DC9700D8();
    sub_1DC8CD8F0();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1DC8CD718(v2, v1);
  }

  return sub_1DC882BC4(v4, v5, v6);
}

uint64_t sub_1DC8C2AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v6 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    if (v4 == 1)
    {
      if (v7 == 1)
      {
        if (v3 == v6 && v2 == v5) {
          char v9 = 1;
        }
        else {
          char v9 = sub_1DCB89018();
        }
        sub_1DC882C30(v6, v5, 1);
        sub_1DC882C30(v3, v2, 1);
        sub_1DC882BC4(v3, v2, 1);
        uint64_t v25 = v6;
        uint64_t v26 = v5;
        char v27 = 1;
        goto LABEL_20;
      }
    }
    else if (v7 == 2)
    {
      type metadata accessor for SNMLModelHashableUncodableWrapper();
      uint64_t v16 = sub_1DC8CD7D4();
      sub_1DC882C30(v16, v17, v18);
      uint64_t v19 = sub_1DC8CD840();
      sub_1DC882C30(v19, v20, v21);
      char v9 = sub_1DC971658(v3, v6);
      uint64_t v22 = sub_1DC8CD840();
      sub_1DC882BC4(v22, v23, v24);
      uint64_t v25 = sub_1DC8CD7D4();
LABEL_20:
      sub_1DC882BC4(v25, v26, v27);
      return v9 & 1;
    }
    goto LABEL_15;
  }
  if (*(unsigned char *)(a2 + 16))
  {
LABEL_15:
    sub_1DC882C30(*(void *)a2, *(void *)(a2 + 8), v7);
    sub_1DC882C30(v3, v2, v4);
    sub_1DC882BC4(v3, v2, v4);
    uint64_t v28 = v6;
    uint64_t v29 = v5;
    char v30 = v7;
LABEL_16:
    sub_1DC882BC4(v28, v29, v30);
    goto LABEL_17;
  }
  sub_1DC882C30(*(void *)a2, *(void *)(a2 + 8), 0);
  sub_1DC882C30(v3, v2, 0);
  if ((sub_1DC8C21EC() & 1) == 0)
  {
    uint64_t v28 = sub_1DC8CD718(v3, v2);
    goto LABEL_16;
  }
  type metadata accessor for SNMLModelHashableUncodableWrapper();
  uint64_t v10 = sub_1DC8CD9A8();
  char v12 = sub_1DC971658(v10, v11);
  uint64_t v13 = sub_1DC8CD718(v3, v2);
  sub_1DC882BC4(v13, v14, v15);
  if ((v12 & 1) == 0)
  {
LABEL_17:
    char v9 = 0;
    return v9 & 1;
  }
  char v9 = 1;
  return v9 & 1;
}

uint64_t sub_1DC8C2C70(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001DCB917F0 || (sub_1DCB89018() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001DCB917D0 || (sub_1DCB89018() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001DCB91810)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v5 = sub_1DCB89018();
    swift_bridgeObjectRelease();
    if (v5) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

unint64_t sub_1DC8C2DB4(char a1)
{
  unint64_t result = 0xD000000000000010;
  if (a1)
  {
    if (a1 == 1) {
      return 0xD000000000000012;
    }
    else {
      return 0xD000000000000015;
    }
  }
  return result;
}

void sub_1DC8C2E14()
{
  sub_1DC88D6B0();
  uint64_t v2 = v1;
  sub_1DC87E988(&qword_1EAA9EA48);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v3);
  sub_1DC88D550();
  sub_1DC87E988(&qword_1EAA9EA50);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v4);
  sub_1DC8CD750();
  sub_1DC87E988(&qword_1EAA9EA58);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v5);
  sub_1DC89D9A0();
  sub_1DC87E988((uint64_t *)&unk_1EAA9EA60);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v6);
  sub_1DC89D970();
  uint64_t v17 = *(void *)v0;
  uint64_t v18 = *(void *)(v0 + 8);
  int v7 = *(unsigned __int8 *)(v0 + 16);
  sub_1DC881A8C(v2, v2[3]);
  sub_1DC8CC7D8();
  sub_1DCB892B8();
  if (!v7)
  {
    sub_1DC8CC8BC();
    swift_retain();
    sub_1DCB88E88();
    sub_1DC8CC9F8();
    sub_1DCB88F18();
    sub_1DC88D5C8();
    v10();
    sub_1DC8CD8B4();
    sub_1DC88D5C8();
    v11();
    uint64_t v12 = v17;
    uint64_t v13 = v18;
    char v14 = 0;
LABEL_6:
    sub_1DC882BC4(v12, v13, v14);
    goto LABEL_7;
  }
  if (v7 != 1)
  {
    sub_1DC8CC824();
    swift_retain();
    sub_1DCB88E88();
    type metadata accessor for SNMLModelHashableUncodableWrapper();
    sub_1DC8CC954(&qword_1EAAA4F60);
    sub_1DCB88F18();
    sub_1DC88D5C8();
    v15();
    sub_1DC8CD8B4();
    sub_1DC88D5C8();
    v16();
    uint64_t v12 = v17;
    uint64_t v13 = v18;
    char v14 = 2;
    goto LABEL_6;
  }
  sub_1DC8CC870();
  sub_1DCB88E88();
  sub_1DC87E988(&qword_1EAA9EA28);
  sub_1DC8CC998(&qword_1EAA9EA70, &qword_1EAA9EA28);
  sub_1DCB88F18();
  sub_1DC88D5C8();
  v8();
  sub_1DC8CD8B4();
  sub_1DC88D5C8();
  v9();
LABEL_7:
  sub_1DC88D674();
}

uint64_t sub_1DC8C3208()
{
  uint64_t v2 = *(void *)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 16);
  sub_1DC89D754();
  if (!v3)
  {
    sub_1DCB891B8();
    sub_1DC8CD68C();
    sub_1DC8CD8C4();
    swift_retain();
    sub_1DCB879B8();
    swift_bridgeObjectRelease();
    swift_retain();
    sub_1DC9700D8();
    sub_1DC8CD6D8();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1DC8CD718(v2, v1);
LABEL_6:
    sub_1DC882BC4(v4, v5, v6);
    return sub_1DCB891F8();
  }
  if (v3 != 1)
  {
    sub_1DCB891B8();
    swift_retain();
    sub_1DC9700D8();
    sub_1DC8CD6D8();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1DC8CD7D4();
    goto LABEL_6;
  }
  sub_1DCB891B8();
  sub_1DCB879B8();
  return sub_1DCB891F8();
}

void sub_1DC8C3324()
{
  sub_1DC88D6B0();
  int v3 = v2;
  uint64_t v56 = v4;
  sub_1DC87E988(&qword_1EAA9E9E0);
  sub_1DC89D4E0();
  uint64_t v53 = v6;
  uint64_t v54 = v5;
  MEMORY[0x1F4188790](v5);
  sub_1DC88D550();
  uint64_t v57 = v7;
  uint64_t v55 = sub_1DC87E988(&qword_1EAA9E9E8);
  sub_1DC89D4E0();
  uint64_t v52 = v8;
  MEMORY[0x1F4188790](v9);
  sub_1DC89D970();
  sub_1DC87E988(&qword_1EAA9E9F0);
  sub_1DC89D4E0();
  uint64_t v51 = v10;
  MEMORY[0x1F4188790](v11);
  sub_1DC8CD750();
  uint64_t v12 = sub_1DC87E988(&qword_1EAA9E9F8);
  sub_1DC89D4E0();
  uint64_t v14 = v13;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = v3[3];
  CMTimeFlags v58 = v3;
  sub_1DC881A8C(v3, v18);
  sub_1DC8CC7D8();
  sub_1DCB89298();
  if (v1) {
    goto LABEL_2;
  }
  uint64_t v49 = v0;
  uint64_t v61 = v14;
  uint64_t v20 = sub_1DCB88E58();
  uint64_t v21 = *(void *)(v20 + 16);
  if (!v21)
  {
    uint64_t v29 = v17;
    uint64_t v22 = v12;
LABEL_10:
    uint64_t v19 = (uint64_t)v58;
    uint64_t v30 = sub_1DCB88B18();
    swift_allocError();
    uint64_t v32 = v31;
    sub_1DC87E988(&qword_1EAA9E130);
    *uint64_t v32 = &unk_1F37E80C8;
    sub_1DCB88D68();
    sub_1DCB88B08();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v30 - 8) + 104))(v32, *MEMORY[0x1E4FBBA70], v30);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v61 + 8))(v29, v22);
    goto LABEL_11;
  }
  uint64_t v48 = 0;
  uint64_t v50 = v17;
  uint64_t v22 = v12;
  int v23 = *(unsigned __int8 *)(v20 + 32);
  uint64_t v24 = sub_1DC9CFE4C(1, v21, v20, v20 + 32, 0, (2 * v21) | 1);
  uint64_t v26 = v25;
  unint64_t v28 = v27;
  swift_bridgeObjectRelease();
  if (v26 != v28 >> 1)
  {
    uint64_t v29 = v50;
    goto LABEL_10;
  }
  if (v23)
  {
    if (v23 == 1)
    {
      LOBYTE(v59) = 1;
      sub_1DC8CC870();
      sub_1DC8CD7E4();
      sub_1DC87E988(&qword_1EAA9EA28);
      sub_1DC8CC998(&qword_1EAA9EA30, &qword_1EAA9EA28);
      sub_1DCB88DF8();
      sub_1DC88D5C8();
      v35();
      swift_unknownObjectRelease();
      uint64_t v36 = sub_1DC8CD69C();
      v37(v36);
      uint64_t v38 = v59;
      uint64_t v39 = v60;
      uint64_t v19 = (uint64_t)v58;
    }
    else
    {
      uint64_t v55 = v24;
      LOBYTE(v59) = 2;
      sub_1DC8CC824();
      sub_1DC8CD7E4();
      uint64_t v19 = (uint64_t)v58;
      type metadata accessor for SNMLModelHashableUncodableWrapper();
      sub_1DC8CC954(&qword_1EAA9EA18);
      sub_1DCB88DF8();
      sub_1DC88D5C8();
      v43();
      swift_unknownObjectRelease();
      uint64_t v44 = sub_1DC8CD69C();
      v45(v44);
      uint64_t v39 = 0;
      uint64_t v38 = v59;
    }
    goto LABEL_16;
  }
  LOBYTE(v59) = 0;
  sub_1DC8CC8BC();
  uint64_t v33 = v48;
  sub_1DCB88D58();
  if (!v33)
  {
    sub_1DC8CC908();
    sub_1DCB88DF8();
    uint64_t v19 = (uint64_t)v58;
    sub_1DC88D5C8();
    v40();
    swift_unknownObjectRelease();
    uint64_t v41 = sub_1DC8CD850();
    v42(v41);
    uint64_t v38 = v59;
    uint64_t v39 = v60;
LABEL_16:
    uint64_t v46 = v56;
    *uint64_t v56 = v38;
    v46[1] = v39;
    *((unsigned char *)v46 + 16) = v23;
    goto LABEL_11;
  }
  swift_unknownObjectRelease();
  sub_1DC88D5C8();
  v34();
LABEL_2:
  uint64_t v19 = (uint64_t)v58;
LABEL_11:
  sub_1DC8818D0(v19);
  sub_1DC88D674();
}

unint64_t sub_1DC8C39A4()
{
  return sub_1DC8C2560(*v0);
}

uint64_t sub_1DC8C39AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1DC8C2470(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1DC8C39D4(uint64_t a1)
{
  unint64_t v2 = sub_1DC8CD2E0();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC8C3A10(uint64_t a1)
{
  unint64_t v2 = sub_1DC8CD2E0();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1DC8C3A4C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1DC8C27A4(a1);
  if (!v2)
  {
    *(unsigned char *)a2 = result & 1;
    *(void *)(a2 + 8) = v5;
  }
  return result;
}

void sub_1DC8C3A80()
{
}

uint64_t sub_1DC8C3AA0()
{
  return sub_1DC8C26F4();
}

uint64_t sub_1DC8C3AAC()
{
  return sub_1DC8C2368();
}

uint64_t sub_1DC8C3AB8()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC8C3B74(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1DC8C2414(*a1, *((void *)a1 + 1), *a2, *((void *)a2 + 1));
}

unint64_t sub_1DC8C3B90()
{
  return sub_1DC8C2DB4(*v0);
}

uint64_t sub_1DC8C3B98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1DC8C2C70(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1DC8C3BC0(uint64_t a1)
{
  unint64_t v2 = sub_1DC8CC7D8();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC8C3BFC(uint64_t a1)
{
  unint64_t v2 = sub_1DC8CC7D8();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1DC8C3C38()
{
  return sub_1DC8C7244();
}

uint64_t sub_1DC8C3C50(uint64_t a1)
{
  unint64_t v2 = sub_1DC8CC8BC();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC8C3C8C(uint64_t a1)
{
  unint64_t v2 = sub_1DC8CC8BC();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1DC8C3CC8(uint64_t a1)
{
  unint64_t v2 = sub_1DC8CC870();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC8C3D04(uint64_t a1)
{
  unint64_t v2 = sub_1DC8CC870();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1DC8C3D40(uint64_t a1)
{
  unint64_t v2 = sub_1DC8CC824();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC8C3D7C(uint64_t a1)
{
  unint64_t v2 = sub_1DC8CC824();

  return MEMORY[0x1F41862B0](a1, v2);
}

void sub_1DC8C3DB8()
{
}

void sub_1DC8C3DD0()
{
}

uint64_t sub_1DC8C3DF0()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC8C3E44()
{
  uint64_t v1 = *(void *)(v0 + 88);
  sub_1DCB891E8();
  sub_1DCB891D8();
  sub_1DCB891D8();
  sub_1DCB891E8();
  sub_1DCB891E8();
  sub_1DCB891D8();
  sub_1DCB891D8();
  sub_1DCB891E8();
  sub_1DCB891E8();
  swift_bridgeObjectRetain();
  sub_1DCB879B8();
  swift_bridgeObjectRelease();
  sub_1DCB891C8();
  if (!v1) {
    return sub_1DCB891C8();
  }
  sub_1DCB891C8();
  swift_bridgeObjectRetain();
  sub_1DCB879B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1DC8C3F8C(double *a1, double *a2)
{
  double v2 = *a1;
  uint64_t v3 = *((void *)a1 + 5);
  double v4 = a1[6];
  uint64_t v5 = *((void *)a1 + 7);
  uint64_t v6 = *((void *)a1 + 8);
  int v7 = *((unsigned __int8 *)a1 + 72);
  uint64_t v8 = *((void *)a1 + 10);
  uint64_t v9 = *((void *)a1 + 11);
  double v10 = *a2;
  double v11 = a2[6];
  uint64_t v12 = *((void *)a2 + 7);
  uint64_t v13 = *((void *)a2 + 8);
  int v14 = *((unsigned __int8 *)a2 + 72);
  uint64_t v16 = *((void *)a2 + 10);
  uint64_t v15 = *((void *)a2 + 11);
  uint64_t v25 = *((void *)a2 + 5);
  *(double *)uint64_t v26 = v2;
  *(double *)&v26[1] = a1[1];
  long long v27 = *((_OWORD *)a1 + 1);
  uint64_t v28 = *((void *)a1 + 4);
  uint64_t v29 = v3;
  *(double *)uint64_t v22 = v10;
  *(double *)&v22[1] = a2[1];
  long long v23 = *((_OWORD *)a2 + 1);
  uint64_t v24 = *((void *)a2 + 4);
  BOOL v17 = static TimeRange.== infix(_:_:)((uint64_t)v26, (uint64_t)v22);
  uint64_t result = 0;
  if (v17 && v4 == v11)
  {
    if (v5 == v12 && v6 == v13)
    {
      if (v7 != v14) {
        return 0;
      }
    }
    else
    {
      char v20 = sub_1DCB89018();
      uint64_t result = 0;
      if (v20 & 1) == 0 || ((v7 ^ v14)) {
        return result;
      }
    }
    if (v9)
    {
      if (v15)
      {
        if (v8 == v16 && v9 == v15) {
          return 1;
        }
        sub_1DC8CD7C8();
        if (sub_1DCB89018()) {
          return 1;
        }
      }
    }
    else if (!v15)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1DC8C40E4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x676E6152656D6974 && a2 == 0xE900000000000065;
  if (v2 || (sub_1DCB89018() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6E656469666E6F63 && a2 == 0xEA00000000006563;
    if (v6 || (sub_1DCB89018() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
      if (v7 || (sub_1DCB89018() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x6465746365746564 && a2 == 0xE800000000000000;
        if (v8 || (sub_1DCB89018() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else if (a1 == 0xD000000000000012 && a2 == 0x80000001DCB917D0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          char v9 = sub_1DCB89018();
          swift_bridgeObjectRelease();
          if (v9) {
            return 4;
          }
          else {
            return 5;
          }
        }
      }
    }
  }
}

unint64_t sub_1DC8C4310(char a1)
{
  unint64_t result = 0x676E6152656D6974;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E656469666E6F63;
      break;
    case 2:
      unint64_t result = 0x696669746E656469;
      break;
    case 3:
      unint64_t result = 0x6465746365746564;
      break;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1DC8C43D4(void *a1)
{
  uint64_t v3 = sub_1DC87E988((uint64_t *)&unk_1EAA9E8E0);
  sub_1DC89D4E0();
  uint64_t v7 = v4;
  MEMORY[0x1F4188790](v5);
  sub_1DC89D988();
  sub_1DC881A8C(a1, a1[3]);
  sub_1DC8CBA70();
  sub_1DC89D5E4();
  sub_1DC89C64C();
  sub_1DCB88F18();
  if (v8)
  {
    sub_1DC88D5C8();
    v6();
  }
  else
  {
    sub_1DCB88EE8();
    sub_1DCB88EC8();
    sub_1DCB88ED8();
    sub_1DCB88E98();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v3);
  }
  sub_1DC89DCC4();
}

uint64_t sub_1DC8C45F8()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC8C463C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1DC87E988(&qword_1EAA9E8C8);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v5);
  sub_1DC881A8C(a1, a1[3]);
  sub_1DC8CBA70();
  sub_1DCB89298();
  if (v2)
  {
    sub_1DC8818D0((uint64_t)a1);
  }
  else
  {
    sub_1DC89C600();
    sub_1DCB88DF8();
    sub_1DC8CD73C();
    sub_1DCB88DC8();
    uint64_t v7 = v6;
    sub_1DC8CD73C();
    uint64_t v9 = sub_1DCB88DA8();
    uint64_t v11 = v10;
    swift_bridgeObjectRetain();
    sub_1DC8CD73C();
    char v18 = sub_1DCB88DB8();
    sub_1DC8CD73C();
    uint64_t v12 = sub_1DCB88D78();
    uint64_t v14 = v13;
    uint64_t v17 = v12;
    uint64_t v15 = sub_1DC8CD7B4();
    v16(v15);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)a2 = v19;
    *(void *)(a2 + 8) = v20;
    *(void *)(a2 + 16) = v21;
    *(void *)(a2 + 24) = v22;
    *(void *)(a2 + 32) = v23;
    *(void *)(a2 + 40) = v24;
    *(void *)(a2 + 48) = v7;
    *(void *)(a2 + 56) = v9;
    *(void *)(a2 + 64) = v11;
    *(unsigned char *)(a2 + 72) = v18 & 1;
    *(void *)(a2 + 80) = v17;
    *(void *)(a2 + 88) = v14;
    sub_1DC8818D0((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

unint64_t sub_1DC8C48FC()
{
  return sub_1DC8C4310(*v0);
}

uint64_t sub_1DC8C4904@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1DC8C40E4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1DC8C492C(uint64_t a1)
{
  unint64_t v2 = sub_1DC8CBA70();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC8C4968(uint64_t a1)
{
  unint64_t v2 = sub_1DC8CBA70();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1DC8C49AC()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC8C49EC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1DC8C463C(a1, a2);
}

void sub_1DC8C4A04(void *a1)
{
}

uint64_t sub_1DC8C4A20()
{
  uint64_t v2 = *(void *)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  if (*(unsigned char *)(v0 + 16))
  {
    if (*(unsigned char *)(v0 + 16) == 1)
    {
      sub_1DCB891B8();
      sub_1DCB879B8();
      goto LABEL_7;
    }
    sub_1DCB891B8();
    swift_retain();
    sub_1DC9700D8();
    sub_1DC8CD6B4();
    swift_bridgeObjectRelease();
    uint64_t v3 = sub_1DC8CD95C();
    char v5 = 2;
  }
  else
  {
    sub_1DCB891B8();
    sub_1DC8CD68C();
    swift_retain();
    sub_1DC8CD7C8();
    sub_1DCB879B8();
    swift_bridgeObjectRelease();
    swift_retain();
    sub_1DC9700D8();
    sub_1DC8CD6B4();
    swift_bridgeObjectRelease();
    sub_1DC882BC4(v2, v1, 0);
    uint64_t v3 = v2;
    uint64_t v4 = v1;
    char v5 = 0;
  }
  sub_1DC882BC4(v3, v4, v5);
LABEL_7:
  swift_bridgeObjectRetain();
  sub_1DCB879B8();
  swift_bridgeObjectRelease();
  sub_1DCB879B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1DC8C4BE0(long long *a1, long long *a2)
{
  char v2 = *((unsigned char *)a1 + 16);
  uint64_t v3 = *((void *)a1 + 3);
  uint64_t v4 = *((void *)a1 + 4);
  unsigned __int8 v5 = *((unsigned char *)a1 + 40);
  char v6 = *((unsigned char *)a2 + 16);
  uint64_t v7 = *((void *)a2 + 3);
  uint64_t v8 = *((void *)a2 + 4);
  char v9 = *((unsigned char *)a2 + 40);
  long long v14 = *a1;
  char v15 = v2;
  long long v12 = *a2;
  char v13 = v6;
  if ((sub_1DC8C2AA8((uint64_t)&v14, (uint64_t)&v12) & 1) == 0) {
    return 0;
  }
  if (v3 != v7 || v4 != v8)
  {
    sub_1DC8CDA08();
    if ((sub_1DCB89018() & 1) == 0) {
      return 0;
    }
  }

  return sub_1DC8C2280(v5, v9);
}

uint64_t sub_1DC8C4CAC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x726F746365746564 && a2 == 0xEF746E6169726156;
  if (v2 || (sub_1DCB89018() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x656449646E756F73 && a2 == 0xEF7265696669746ELL;
    if (v6 || (sub_1DCB89018() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000012 && a2 == 0x80000001DCB91570)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v7 = sub_1DCB89018();
      swift_bridgeObjectRelease();
      if (v7) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_1DC8C4E44(char a1)
{
  if (!a1) {
    return 0x726F746365746564;
  }
  if (a1 == 1) {
    return 0x656449646E756F73;
  }
  return 0xD000000000000012;
}

void sub_1DC8C4EB8()
{
  sub_1DC88D6B0();
  uint64_t v3 = v2;
  uint64_t v4 = sub_1DC87E988(&qword_1EAA9E920);
  sub_1DC89D4E0();
  uint64_t v8 = v5;
  MEMORY[0x1F4188790](v6);
  sub_1DC8CD750();
  sub_1DC8CDA14();
  sub_1DC881A8C(v3, v3[3]);
  sub_1DC8CBABC();
  sub_1DCB892B8();
  sub_1DC8CBBA0();
  sub_1DCB88F18();
  if (v1)
  {
    sub_1DC88D5C8();
    v7();
  }
  else
  {
    sub_1DC8CD9B4();
    sub_1DC87E988((uint64_t *)&unk_1EAAAB880);
    sub_1DC8CC998(&qword_1EAA9E930, (uint64_t *)&unk_1EAAAB880);
    sub_1DCB88F18();
    sub_1DC8CBBEC();
    sub_1DCB88F18();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0, v4);
  }
  sub_1DC89DCC4();
  sub_1DC88D674();
}

uint64_t sub_1DC8C50AC()
{
  uint64_t v2 = *(void *)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 16);
  sub_1DC89D754();
  if (!v3)
  {
    sub_1DCB891B8();
    sub_1DC8CD68C();
    swift_retain();
    sub_1DCB879B8();
    swift_bridgeObjectRelease();
    swift_retain();
    sub_1DC9700D8();
    sub_1DC8CD6D8();
    swift_bridgeObjectRelease();
    sub_1DC882BC4(v2, v1, 0);
    uint64_t v4 = v2;
    uint64_t v5 = v1;
    char v6 = 0;
LABEL_6:
    sub_1DC882BC4(v4, v5, v6);
    goto LABEL_7;
  }
  if (v3 != 1)
  {
    sub_1DCB891B8();
    swift_retain();
    sub_1DC9700D8();
    sub_1DC8CD6D8();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1DC8CD840();
    goto LABEL_6;
  }
  sub_1DCB891B8();
  sub_1DCB879B8();
LABEL_7:
  swift_bridgeObjectRetain();
  sub_1DCB879B8();
  swift_bridgeObjectRelease();
  sub_1DCB879B8();
  swift_bridgeObjectRelease();
  return sub_1DCB891F8();
}

void sub_1DC8C526C()
{
  sub_1DC88D6B0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_1DC87E988(&qword_1EAA9E8F0);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v5);
  sub_1DC881A8C(v2, v2[3]);
  sub_1DC8CBABC();
  sub_1DCB89298();
  if (v0)
  {
    sub_1DC8818D0((uint64_t)v2);
  }
  else
  {
    sub_1DC8CBB08();
    sub_1DC89DB24();
    sub_1DCB88DF8();
    sub_1DC87E988((uint64_t *)&unk_1EAAAB880);
    sub_1DC8CD9B4();
    sub_1DC882C30(v8, v9, v10);
    sub_1DC8CC998(&qword_1EAA9E910, (uint64_t *)&unk_1EAAAB880);
    sub_1DCB88DF8();
    sub_1DC8CBB54();
    swift_bridgeObjectRetain();
    sub_1DC89DB24();
    sub_1DCB88DF8();
    uint64_t v6 = sub_1DC8CD878();
    v7(v6);
    sub_1DC882C30(v8, v9, v10);
    sub_1DC882BC4(v8, v9, v10);
    *(void *)uint64_t v4 = v8;
    *(void *)(v4 + 8) = v9;
    *(unsigned char *)(v4 + 16) = v10;
    *(void *)(v4 + 24) = v8;
    *(void *)(v4 + 32) = v9;
    *(unsigned char *)(v4 + 40) = v8;
    sub_1DC8818D0((uint64_t)v2);
    sub_1DC882BC4(v8, v9, v10);
    swift_bridgeObjectRelease();
  }
  sub_1DC89DCC4();
  sub_1DC88D674();
}

uint64_t sub_1DC8C551C()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 16);
  if (!*(unsigned char *)(v0 + 16))
  {
    sub_1DCB891B8();
    sub_1DC8CD68C();
    sub_1DC8CD8C4();
    sub_1DC882C30(v1, v2, 0);
    swift_bridgeObjectRetain();
    sub_1DC882C30(v1, v2, 0);
    sub_1DC8CD7C8();
    sub_1DCB879B8();
    swift_bridgeObjectRelease();
    swift_retain();
    sub_1DC9700D8();
    sub_1DC8CD6B4();
    swift_bridgeObjectRelease();
    sub_1DC882BC4(v1, v2, 0);
    uint64_t v6 = v1;
    uint64_t v7 = v2;
    char v8 = 0;
LABEL_6:
    sub_1DC882BC4(v6, v7, v8);
    goto LABEL_7;
  }
  if (v3 != 1)
  {
    sub_1DCB891B8();
    sub_1DC882C30(v1, v2, 2);
    swift_bridgeObjectRetain();
    sub_1DC882C30(v1, v2, 2);
    sub_1DC9700D8();
    sub_1DC8CD6B4();
    swift_bridgeObjectRelease();
    uint64_t v6 = v1;
    uint64_t v7 = v2;
    char v8 = 2;
    goto LABEL_6;
  }
  sub_1DCB891B8();
  uint64_t v4 = sub_1DC8CDA08();
  sub_1DC882C30(v4, v5, 1);
  swift_bridgeObjectRetain();
  sub_1DCB879B8();
LABEL_7:
  swift_bridgeObjectRetain();
  sub_1DCB879B8();
  swift_bridgeObjectRelease();
  sub_1DCB879B8();
  swift_bridgeObjectRelease();
  uint64_t v9 = sub_1DC8CDA08();
  sub_1DC882BC4(v9, v10, v3);
  swift_bridgeObjectRelease();
  return AudioConfiguration.hash(into:)();
}

uint64_t sub_1DC8C5814(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = *(unsigned char *)(a1 + 40);
  uint64_t v38 = *(void *)(a1 + 56);
  uint64_t v39 = *(void *)(a1 + 48);
  uint64_t v36 = *(void *)(a1 + 72);
  uint64_t v37 = *(void *)(a1 + 64);
  uint64_t v34 = *(void *)(a1 + 88);
  uint64_t v35 = *(void *)(a1 + 80);
  char v32 = *(unsigned char *)(a1 + 97);
  char v33 = *(unsigned char *)(a1 + 96);
  char v30 = *(unsigned char *)(a1 + 99);
  char v31 = *(unsigned char *)(a1 + 98);
  char v28 = *(unsigned char *)(a1 + 101);
  char v29 = *(unsigned char *)(a1 + 100);
  uint64_t v27 = *(void *)(a1 + 104);
  char v26 = *(unsigned char *)(a1 + 112);
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  uint64_t v24 = *(void *)(a2 + 56);
  uint64_t v25 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 80);
  uint64_t v22 = *(void *)(a2 + 72);
  uint64_t v23 = *(void *)(a2 + 64);
  long long v10 = *(_OWORD *)a1;
  LOBYTE(v54) = *(unsigned char *)(a1 + 16);
  uint64_t v11 = *(void *)(a2 + 88);
  uint64_t v55 = v2;
  uint64_t v56 = v3;
  char v12 = *(unsigned char *)(a2 + 96);
  char v13 = *(unsigned char *)(a2 + 97);
  LOBYTE(v57) = v4;
  char v14 = *(unsigned char *)(a2 + 98);
  LOBYTE(v41) = v5;
  char v15 = *(unsigned char *)(a2 + 99);
  uint64_t v42 = v6;
  uint64_t v43 = v7;
  char v16 = *(unsigned char *)(a2 + 100);
  char v17 = *(unsigned char *)(a2 + 101);
  LOBYTE(v44) = v8;
  uint64_t v18 = *(void *)(a2 + 104);
  long long v53 = v10;
  char v19 = *(unsigned char *)(a2 + 112);
  long long v40 = *(_OWORD *)a2;
  if (sub_1DC8C4BE0(&v53, &v40))
  {
    *(void *)&long long v53 = v39;
    *((void *)&v53 + 1) = v38;
    uint64_t v54 = v37;
    uint64_t v55 = v36;
    uint64_t v56 = v35;
    uint64_t v57 = v34;
    char v58 = v33;
    char v59 = v32;
    char v60 = v31;
    char v61 = v30;
    char v62 = v29;
    char v63 = v28;
    uint64_t v64 = v27;
    char v65 = v26;
    *(void *)&long long v40 = v25;
    *((void *)&v40 + 1) = v24;
    uint64_t v41 = v23;
    uint64_t v42 = v22;
    uint64_t v43 = v9;
    uint64_t v44 = v11;
    char v45 = v12;
    char v46 = v13;
    char v47 = v14;
    char v48 = v15;
    char v49 = v16;
    char v50 = v17;
    uint64_t v51 = v18;
    char v52 = v19;
    char v20 = static AudioConfiguration.== infix(_:_:)((uint64_t)&v53, (uint64_t)&v40);
  }
  else
  {
    char v20 = 0;
  }
  return v20 & 1;
}

uint64_t sub_1DC8C59F4(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000001ALL && a2 == 0x80000001DCB91830 || (sub_1DCB89018() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001DCB91850)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = sub_1DCB89018();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t sub_1DC8C5AE0(char a1)
{
  if (a1) {
    return 0xD000000000000012;
  }
  else {
    return 0xD00000000000001ALL;
  }
}

void sub_1DC8C5B1C()
{
  sub_1DC88D6B0();
  uint64_t v2 = v1;
  sub_1DC87E988(&qword_1EAA9EA80);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v3);
  sub_1DC89D988();
  sub_1DC8CDA14();
  sub_1DC881A8C(v2, v2[3]);
  sub_1DC8CCA44();
  sub_1DC89D5E4();
  sub_1DC882B34();
  sub_1DC8CD948();
  sub_1DCB88F18();
  if (!v0)
  {
    sub_1DC8CD9B4();
    sub_1DC8821D0();
    sub_1DC8CD948();
    sub_1DCB88F18();
  }
  sub_1DC8CD9A8();
  sub_1DC88D5C8();
  v4();
  sub_1DC89DCC4();
  sub_1DC88D674();
}

uint64_t sub_1DC8C5D30()
{
  return sub_1DCB891F8();
}

void sub_1DC8C5DE4()
{
  sub_1DC88D6B0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_1DC87E988((uint64_t *)&unk_1EAA9EA90);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v5);
  sub_1DC881A8C(v2, v2[3]);
  sub_1DC8CCA44();
  sub_1DCB89298();
  if (v0)
  {
    sub_1DC8818D0((uint64_t)v2);
  }
  else
  {
    sub_1DC882C5C();
    sub_1DC8CD9D4();
    sub_1DCB88DF8();
    sub_1DC8CD9B4();
    uint64_t v6 = sub_1DC8CD9FC();
    char v26 = v7;
    sub_1DC882C30(v6, v8, v7);
    sub_1DC8822B0();
    swift_bridgeObjectRetain();
    sub_1DC8CD9D4();
    sub_1DCB88DF8();
    sub_1DC8CD890();
    v9();
    uint64_t v10 = sub_1DC8CD9FC();
    sub_1DC882C30(v10, v11, v26);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1DC882BC4(v12, v13, v26);
    swift_bridgeObjectRelease();
    *(void *)uint64_t v4 = v12;
    *(void *)(v4 + 8) = v13;
    *(unsigned char *)(v4 + 16) = v26;
    *(void *)(v4 + 24) = v15;
    *(void *)(v4 + 32) = v16;
    *(unsigned char *)(v4 + 40) = v17;
    *(void *)(v4 + 48) = v12;
    *(void *)(v4 + 56) = v13;
    *(void *)(v4 + 64) = v14;
    *(void *)(v4 + 72) = v15;
    *(void *)(v4 + 80) = v16;
    *(void *)(v4 + 88) = v17;
    *(unsigned char *)(v4 + 96) = v18;
    *(unsigned char *)(v4 + 97) = v19;
    *(unsigned char *)(v4 + 98) = v20;
    *(unsigned char *)(v4 + 99) = v21;
    *(unsigned char *)(v4 + 100) = v22;
    *(unsigned char *)(v4 + 101) = v23;
    *(void *)(v4 + 104) = v24;
    *(unsigned char *)(v4 + 112) = v25;
    sub_1DC8818D0((uint64_t)v2);
    sub_1DC882BC4(v12, v13, v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_1DC88D674();
}

uint64_t sub_1DC8C610C()
{
  return sub_1DC8C4E44(*v0);
}

uint64_t sub_1DC8C6114@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1DC8C4CAC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1DC8C613C(uint64_t a1)
{
  unint64_t v2 = sub_1DC8CBABC();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC8C6178(uint64_t a1)
{
  unint64_t v2 = sub_1DC8CBABC();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1DC8C61BC()
{
  return sub_1DCB891F8();
}

void sub_1DC8C62A8()
{
}

void sub_1DC8C62C0()
{
}

unint64_t sub_1DC8C62DC()
{
  return sub_1DC8C5AE0(*v0);
}

uint64_t sub_1DC8C62E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1DC8C59F4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1DC8C630C(uint64_t a1)
{
  unint64_t v2 = sub_1DC8CCA44();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC8C6348(uint64_t a1)
{
  unint64_t v2 = sub_1DC8CCA44();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1DC8C638C()
{
  return sub_1DCB891F8();
}

void sub_1DC8C6444()
{
}

void sub_1DC8C645C()
{
}

uint64_t sub_1DC8C6478()
{
  sub_1DC8867A8();
  *(void *)(v0 + 16) = v1;
  unint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v2;
  *unint64_t v2 = v0;
  v2[1] = sub_1DC8C6508;
  return sub_1DC977FC0();
}

uint64_t sub_1DC8C6508(uint64_t a1)
{
  sub_1DC886774();
  uint64_t v5 = v4;
  sub_1DC88679C();
  *uint64_t v6 = v5;
  uint64_t v7 = *v2;
  sub_1DC88679C();
  *uint64_t v8 = v7;
  void v5[4] = a1;
  v5[5] = v1;
  swift_task_dealloc();
  if (v1)
  {
    return MEMORY[0x1F4188298](sub_1DC8C67E4, 0, 0);
  }
  else
  {
    uint64_t v11 = (uint64_t (*)(void))((char *)&dword_1EAAA27F8 + dword_1EAAA27F8);
    uint64_t v9 = (void *)swift_task_alloc();
    v5[6] = v9;
    *uint64_t v9 = v7;
    v9[1] = sub_1DC8C6678;
    return v11();
  }
}

uint64_t sub_1DC8C6678(uint64_t a1)
{
  sub_1DC886774();
  uint64_t v5 = v4;
  sub_1DC88679C();
  *uint64_t v6 = v5;
  uint64_t v7 = *v2;
  sub_1DC88679C();
  *uint64_t v8 = v7;
  *(void *)(v5 + 56) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v9 = sub_1DC8C6844;
  }
  else
  {
    *(void *)(v5 + 64) = a1;
    uint64_t v9 = sub_1DC8C6774;
  }
  return MEMORY[0x1F4188298](v9, 0, 0);
}

uint64_t sub_1DC8C6774()
{
  sub_1DC8867A8();
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 64);
  return v1(v2);
}

uint64_t sub_1DC8C67E4()
{
  sub_1DC8867A8();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1DC8C6844()
{
  sub_1DC8867A8();
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1DC8C68AC(uint64_t a1, uint64_t a2)
{
  sub_1DCAD2DD0();
  v4[3] = sub_1DC87E988(&qword_1EAAA4260);
  void v4[4] = sub_1DC8CC764();
  v4[0] = a2;
  swift_retain();
  sub_1DCAD2E10(v4);
  swift_release();
  return sub_1DC8818D0((uint64_t)v4);
}

uint64_t sub_1DC8C6934()
{
  sub_1DC8867A8();
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1DC8C69C8;
  sub_1DC8CD968();
  return sub_1DC8C6478();
}

uint64_t sub_1DC8C69C8()
{
  sub_1DC8867A8();
  uint64_t v3 = v2;
  sub_1DC886774();
  uint64_t v4 = *v1;
  sub_1DC88679C();
  *uint64_t v5 = v4;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v4 + 8);
  if (!v0) {
    uint64_t v6 = v3;
  }
  return v7(v6);
}

uint64_t sub_1DC8C6A9C(uint64_t a1)
{
  return sub_1DC8C68AC(a1, *v1);
}

uint64_t sub_1DC8C6AB8()
{
  sub_1DC8867A8();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1DC8C6B48;
  sub_1DC8CD968();
  return sub_1DC8C6934();
}

uint64_t sub_1DC8C6B48(uint64_t a1)
{
  sub_1DC886774();
  uint64_t v5 = v4;
  sub_1DC88679C();
  *uint64_t v6 = v5;
  uint64_t v7 = *v2;
  sub_1DC88679C();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (!v1) {
    **(void **)(v5 + 16) = a1;
  }
  uint64_t v9 = *(uint64_t (**)(void))(v7 + 8);
  return v9();
}

void sub_1DC8C6C30()
{
  sub_1DC88D6B0();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  sub_1DC87E988(&qword_1EAA9E870);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v4);
  sub_1DC87E988(&qword_1EAA9E878);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v5);
  sub_1DC89D9A0();
  sub_1DC87E988((uint64_t *)&unk_1EAA9E880);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v6);
  memcpy(v15, v3, 0x71uLL);
  uint64_t v7 = swift_allocObject();
  memcpy((void *)(v7 + 16), v3, 0x71uLL);
  sub_1DC8B9960(v1, (uint64_t)v14);
  uint64_t v8 = swift_allocObject();
  sub_1DC8BA1CC(v14, v8 + 16);
  memcpy((void *)(v8 + 56), v15, 0x71uLL);
  uint64_t v9 = (void *)swift_allocObject();
  id v9[2] = sub_1DC8CB8A0;
  _OWORD v9[3] = v7;
  v9[4] = sub_1DC8CB920;
  v9[5] = v8;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_1DC8CB980;
  *(void *)(v10 + 24) = v9;
  sub_1DC8CB9CC((uint64_t)v15);
  sub_1DC8CB9CC((uint64_t)v15);
  swift_retain();
  swift_retain();
  sub_1DC87E988((uint64_t *)&unk_1EAA9ED90);
  sub_1DC88CF34((unint64_t *)&unk_1EAA9E890, (uint64_t *)&unk_1EAA9ED90);
  sub_1DCB87378();
  type metadata accessor for SNDetectionResult();
  sub_1DC88CF34(&qword_1EAA9EDA0, &qword_1EAA9E870);
  sub_1DCB874A8();
  sub_1DC8CD890();
  v11();
  swift_release();
  swift_release();
  sub_1DC88CF34(&qword_1EAA9E8A0, &qword_1EAA9E878);
  sub_1DCB873D8();
  sub_1DC88D5C8();
  v12();
  sub_1DC88CF34(&qword_1EAA9E8A8, (uint64_t *)&unk_1EAA9E880);
  sub_1DCB873A8();
  sub_1DC88D5C8();
  v13();
  sub_1DC88D674();
}

id sub_1DC8C7040(long long *a1)
{
  type metadata accessor for SNDetectSoundRequest();
  long long v2 = a1[1];
  long long v7 = *a1;
  v8[0] = v2;
  *(_OWORD *)((char *)v8 + 9) = *(long long *)((char *)a1 + 25);
  long long v3 = a1[1];
  long long v5 = *a1;
  v6[0] = v3;
  *(_OWORD *)((char *)v6 + 9) = *(long long *)((char *)a1 + 25);
  sub_1DC882BF0((uint64_t)&v7);
  return sub_1DC8C70B4((uint64_t)&v5);
}

id sub_1DC8C70B4(uint64_t a1)
{
  long long v3 = (char *)objc_allocWithZone(v1);
  char v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  char v7 = *(unsigned char *)(a1 + 40);
  uint64_t v8 = &v3[OBJC_IVAR___SNDetectSoundRequest_impl];
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a1;
  v8[16] = v4;
  *((void *)v8 + 3) = v5;
  *((void *)v8 + 4) = v6;
  v8[40] = v7;
  v10.receiver = v3;
  v10.super_class = v1;
  return objc_msgSendSuper2(&v10, sel_init);
}

uint64_t sub_1DC8C7124@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_1DC881A8C(a1, v6);
  memcpy(__dst, (const void *)(a2 + 48), 0x41uLL);
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v7 + 8))(__dst, v6, v7);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t sub_1DC8C71B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1 + OBJC_IVAR___SNDetectionResult_impl;
  uint64_t v3 = *(void *)(v2 + 40);
  uint64_t v4 = *(void *)(v2 + 48);
  uint64_t v5 = *(void *)(v2 + 56);
  uint64_t v6 = *(void *)(v2 + 64);
  char v7 = *(unsigned char *)(v2 + 72);
  uint64_t v9 = *(void *)(v2 + 80);
  uint64_t v8 = *(void *)(v2 + 88);
  *(void *)a2 = *(void *)v2;
  *(void *)(a2 + 8) = *(void *)(v2 + 8);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(v2 + 16);
  *(void *)(a2 + 32) = *(void *)(v2 + 32);
  *(void *)(a2 + 40) = v3;
  *(void *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v5;
  *(void *)(a2 + 64) = v6;
  *(unsigned char *)(a2 + 72) = v7;
  *(void *)(a2 + 80) = v9;
  *(void *)(a2 + 88) = v8;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_1DC8C7244()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC8C72AC()
{
  sub_1DC87E988((uint64_t *)&unk_1EAA9E940);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1DCBB9F90;
  *(void *)(v0 + 32) = @"Applause";
  *(void *)(v0 + 40) = @"Babble";
  *(void *)(v0 + 48) = @"Cheering";
  *(void *)(v0 + 56) = @"Laughter";
  *(void *)(v0 + 64) = @"Music";
  *(void *)(v0 + 72) = @"Speech";
  *(void *)(v0 + 80) = @"Smoke Alarm";
  uint64_t v1 = @"Applause";
  uint64_t v2 = @"Babble";
  uint64_t v3 = @"Cheering";
  uint64_t v4 = @"Laughter";
  uint64_t v5 = @"Music";
  uint64_t v6 = @"Speech";
  char v7 = @"Smoke Alarm";
  return v0;
}

id sub_1DC8C73B8(uint64_t a1, uint64_t a2, void (*a3)(void), void (*a4)(void))
{
  a3();
  a4(0);
  uint64_t v5 = (void *)sub_1DCB87C08();
  swift_bridgeObjectRelease();

  return v5;
}

uint64_t sub_1DC8C741C()
{
  uint64_t v0 = @"SNVGGishApplauseModel";
  sub_1DCA7372C();
  uint64_t v2 = v1;
  unint64_t v3 = *(void *)(v1 + 16);
  if (v3 >= *(void *)(v1 + 24) >> 1)
  {
    sub_1DCA7372C();
    uint64_t v2 = v15;
  }
  *(void *)(v2 + 16) = v3 + 1;
  *(void *)(v2 + 8 * v3 + 32) = v0;

  id v4 = sub_1DC8CD790(@"SNVGGishBabbleModel");
  sub_1DC8CD7A8();
  if (v5)
  {
    sub_1DC8CD5C4();
    uint64_t v2 = v16;
  }
  sub_1DC8CD670();
  id v6 = sub_1DC8CD790(@"SNVGGishCheeringModel");
  sub_1DC8CD7A8();
  if (v5)
  {
    sub_1DC8CD5C4();
    uint64_t v2 = v17;
  }
  sub_1DC8CD670();
  id v7 = sub_1DC8CD790(@"SNVGGishLaughterModel");
  sub_1DC8CD7A8();
  if (v5)
  {
    sub_1DC8CD5C4();
    uint64_t v2 = v18;
  }
  sub_1DC8CD670();
  id v8 = sub_1DC8CD790(@"SNVGGishMusicModel");
  sub_1DC8CD7A8();
  if (v5)
  {
    sub_1DC8CD5C4();
    uint64_t v2 = v19;
  }
  sub_1DC8CD670();
  id v9 = sub_1DC8CD790(@"SNVGGishSpeechModel");
  sub_1DC8CD7A8();
  if (v5)
  {
    sub_1DC8CD5C4();
    uint64_t v2 = v20;
  }
  sub_1DC8CD670();
  id v10 = sub_1DC8CD790(@"SNSoundPrintALaughterModel");
  sub_1DC8CD7A8();
  if (v5)
  {
    sub_1DC8CD5C4();
    uint64_t v2 = v21;
  }
  sub_1DC8CD670();
  id v11 = sub_1DC8CD790(@"SNSoundPrintAShoutingModel");
  sub_1DC8CD7A8();
  if (v5)
  {
    sub_1DC8CD5C4();
    uint64_t v2 = v22;
  }
  sub_1DC8CD670();
  id v12 = sub_1DC8CD790(@"SNSoundPrintASpeechModel");
  sub_1DC8CD7A8();
  if (v5)
  {
    sub_1DC8CD5C4();
    uint64_t v2 = v23;
  }
  sub_1DC8CD670();
  id v13 = sub_1DC8CD790(@"SNSoundPrintASmokeAlarmModel");
  sub_1DC8CD7A8();
  if (v5)
  {
    sub_1DC8CD5C4();
    uint64_t v2 = v24;
  }
  sub_1DC8CD670();
  return v2;
}

uint64_t sub_1DC8C7690()
{
  swift_bridgeObjectRetain();
  sub_1DC8CD7C8();
  uint64_t v0 = sub_1DCB87908();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1DC8C7738(void *a1)
{
  uint64_t v3 = sub_1DCB87938();
  uint64_t v5 = v4;

  uint64_t v6 = v1 + OBJC_IVAR___SNDetectSoundRequest_impl;
  *(void *)(v6 + 24) = v3;
  *(void *)(v6 + 32) = v5;

  return swift_bridgeObjectRelease();
}

id sub_1DC8C77D8()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR___SNDetectSoundRequest_impl + 40))
  {
    if (*(unsigned char *)(v0 + OBJC_IVAR___SNDetectSoundRequest_impl + 40) == 1)
    {
      id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1E990]), sel_init);
      objc_msgSend(v1, sel_setComputeUnits_, 0);
    }
    else
    {
      id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1E990]), sel_init);
      objc_msgSend(v1, sel_setComputeUnits_, 3);
    }
    return v1;
  }
  else
  {
    id v2 = objc_allocWithZone(MEMORY[0x1E4F1E990]);
    return objc_msgSend(v2, sel_init);
  }
}

void sub_1DC8C78F8(void *a1)
{
  char v3 = sub_1DC9ABAE0(a1);

  *(unsigned char *)(v1 + OBJC_IVAR___SNDetectSoundRequest_impl + 40) = v3;
}

double sub_1DC8C793C@<D0>(_OWORD *a1@<X8>)
{
  sub_1DC8CD768(OBJC_IVAR___SNDetectSoundRequest_impl);
  double result = sub_1DC8C7990((uint64_t)&v6, v7);
  if (!v1)
  {
    long long v4 = v7[1];
    *a1 = v7[0];
    a1[1] = v4;
    double result = *(double *)&v8;
    long long v5 = v9;
    a1[2] = v8;
    a1[3] = v5;
  }
  return result;
}

double sub_1DC8C7990@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 40);
  v12[0] = v4;
  v12[1] = v5;
  char v13 = v6;
  sub_1DC882C30(v4, v5, v6);
  swift_bridgeObjectRetain();
  long long v8 = (void *)sub_1DCB87908();
  swift_bridgeObjectRelease();
  sub_1DC9A00E8((uint64_t)v12, v7, (uint64_t)v14);
  sub_1DC882BC4(v4, v5, v6);

  if (!v2)
  {
    long long v10 = v14[1];
    *a2 = v14[0];
    a2[1] = v10;
    double result = *(double *)&v15;
    long long v11 = v16;
    a2[2] = v15;
    a2[3] = v11;
  }
  return result;
}

uint64_t sub_1DC8C7A64()
{
  sub_1DC8C793C(v3);
  if (!v1)
  {
    type metadata accessor for SNSoundDetector();
    uint64_t v0 = swift_allocObject();
    sub_1DC8C9B34(v3);
  }
  return v0;
}

void sub_1DC8C7AD4()
{
}

id SNDetectSoundRequest.copy(with:)@<X0>(void *a1@<X8>)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = v1 + OBJC_IVAR___SNDetectSoundRequest_impl;
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR___SNDetectSoundRequest_impl);
  uint64_t v6 = *(void *)(v1 + OBJC_IVAR___SNDetectSoundRequest_impl + 8);
  uint64_t v7 = *(void *)(v1 + OBJC_IVAR___SNDetectSoundRequest_impl + 24);
  uint64_t v8 = *(void *)(v1 + OBJC_IVAR___SNDetectSoundRequest_impl + 32);
  char v9 = *(unsigned char *)(v4 + 40);
  char v10 = *(unsigned char *)(v4 + 16);
  v12[0] = v5;
  v12[1] = v6;
  char v13 = v10;
  uint64_t v14 = v7;
  uint64_t v15 = v8;
  char v16 = v9;
  sub_1DC882C30(v5, v6, v10);
  swift_bridgeObjectRetain();
  id result = sub_1DC8C70B4((uint64_t)v12);
  a1[3] = ObjectType;
  *a1 = result;
  return result;
}

uint64_t SNDetectSoundRequest.hash.getter()
{
  return sub_1DC8C50AC();
}

uint64_t SNDetectSoundRequest.isEqual(_:)(uint64_t a1)
{
  swift_getObjectType();
  sub_1DC87E920(a1, (uint64_t)&v25);
  if (v26)
  {
    sub_1DC87E9CC(&v25, v24);
    sub_1DC87E9DC((uint64_t)v24, (uint64_t)v22);
    if (swift_dynamicCast())
    {
      char v3 = (void *)v20[0];
      if (v20[0])
      {
        uint64_t v4 = v1 + OBJC_IVAR___SNDetectSoundRequest_impl;
        uint64_t v6 = *(void *)(v1 + OBJC_IVAR___SNDetectSoundRequest_impl);
        uint64_t v5 = *(void *)(v1 + OBJC_IVAR___SNDetectSoundRequest_impl + 8);
        char v7 = *(unsigned char *)(v1 + OBJC_IVAR___SNDetectSoundRequest_impl + 16);
        uint64_t v8 = *(void *)(v4 + 32);
        unsigned __int8 v17 = *(unsigned char *)(v4 + 40);
        uint64_t v10 = *(void *)(v20[0] + OBJC_IVAR___SNDetectSoundRequest_impl);
        uint64_t v9 = *(void *)(v20[0] + OBJC_IVAR___SNDetectSoundRequest_impl + 8);
        char v11 = *(unsigned char *)(v20[0] + OBJC_IVAR___SNDetectSoundRequest_impl + 16);
        uint64_t v12 = *(void *)(v20[0] + OBJC_IVAR___SNDetectSoundRequest_impl + 32);
        uint64_t v18 = *(void *)(v20[0] + OBJC_IVAR___SNDetectSoundRequest_impl + 24);
        uint64_t v19 = *(void *)(v4 + 24);
        char v13 = *(unsigned char *)(v20[0] + OBJC_IVAR___SNDetectSoundRequest_impl + 40);
        v22[0] = v6;
        v22[1] = v5;
        char v23 = v7;
        v20[0] = v10;
        v20[1] = v9;
        char v21 = v11;
        sub_1DC882C30(v6, v5, v7);
        swift_bridgeObjectRetain();
        sub_1DC882C30(v10, v9, v11);
        swift_bridgeObjectRetain();
        if (sub_1DC8C2AA8((uint64_t)v22, (uint64_t)v20))
        {
          BOOL v14 = v19 == v18 && v8 == v12;
          if (v14 || (sub_1DCB89018() & 1) != 0)
          {
            char v15 = sub_1DC8C2280(v17, v13);
            sub_1DC882BC4(v10, v9, v11);
            swift_bridgeObjectRelease();
            sub_1DC882BC4(v6, v5, v7);

            swift_bridgeObjectRelease();
LABEL_14:
            sub_1DC8818D0((uint64_t)v24);
            return v15 & 1;
          }
        }
        sub_1DC882BC4(v10, v9, v11);
        swift_bridgeObjectRelease();
        sub_1DC882BC4(v6, v5, v7);

        swift_bridgeObjectRelease();
      }
    }
    char v15 = 0;
    goto LABEL_14;
  }
  char v15 = 0;
  return v15 & 1;
}

id SNDetectSoundRequest.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return SNDetectSoundRequest.init(coder:)(a1);
}

id SNDetectSoundRequest.init(coder:)(void *a1)
{
  id v3 = v1;
  sub_1DC87D1F0();
  uint64_t v4 = v9;
  uint64_t v5 = v10;
  char v6 = v11;
  swift_getObjectType();

  sub_1DC882C30(v9, v10, v11);
  swift_bridgeObjectRetain();
  id v7 = sub_1DC8C70B4((uint64_t)&v9);

  sub_1DC882BC4(v4, v5, v6);
  swift_bridgeObjectRelease();
  sub_1DC8CD828();
  return v7;
}

Swift::Void __swiftcall SNDetectSoundRequest.encode(with:)(NSCoder with)
{
  long long v3 = *(_OWORD *)(v1 + OBJC_IVAR___SNDetectSoundRequest_impl + 16);
  long long v4 = *(_OWORD *)(v1 + OBJC_IVAR___SNDetectSoundRequest_impl);
  v5[0] = v3;
  *(_OWORD *)((char *)v5 + 9) = *(_OWORD *)(v1 + OBJC_IVAR___SNDetectSoundRequest_impl + 25);
  sub_1DC882BF0((uint64_t)&v4);
  sub_1DC87AFD0(&v4, 1819307369, 0xE400000000000000, with.super.isa);
  sub_1DC8CAF28((uint64_t)&v4);
}

uint64_t static SNDetectSoundRequest.supportsSecureCoding.getter()
{
  return 1;
}

id sub_1DC8C8194(void *a1)
{
  id v3 = objc_msgSend(v1, sel_initWithSoundIdentifier_, a1);

  return v3;
}

id sub_1DC8C8200(void *a1)
{
  id v3 = v1;
  long long v4 = sub_1DC9ABC24();
  uint64_t v5 = sub_1DCB87938();
  uint64_t v7 = v6;
  swift_getObjectType();

  *(void *)&long long v10 = v5;
  *((void *)&v10 + 1) = v7;
  char v11 = 1;
  swift_bridgeObjectRetain();
  id v8 = sub_1DC8C8450(&v10, a1);
  swift_bridgeObjectRelease();

  sub_1DC8CD828();
  return v8;
}

id sub_1DC8C8450(long long *a1, void *a2)
{
  char v4 = *((unsigned char *)a1 + 16);
  long long v7 = *a1;
  char v8 = v4;
  id v5 = objc_allocWithZone(v2);
  return sub_1DC8C85CC((uint64_t)&v7, a2, 0);
}

id sub_1DC8C84CC(void *a1)
{
  id v5 = v1;
  uint64_t v6 = sub_1DC9ABEEC(a1);
  if (v2)
  {

    swift_getObjectType();
  }
  else
  {
    char v8 = v7;

    uint64_t v9 = sub_1DCB87938();
    uint64_t v11 = v10;
    swift_getObjectType();

    *(void *)&long long v13 = v9;
    *((void *)&v13 + 1) = v11;
    char v14 = 1;
    swift_bridgeObjectRetain();
    id v3 = sub_1DC8C8450(&v13, v8);
    swift_bridgeObjectRelease();
  }
  sub_1DC8CD7C8();
  swift_deallocPartialClassInstance();
  return v3;
}

id sub_1DC8C85CC(uint64_t a1, void *a2, char a3)
{
  sub_1DC8CD968();
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v8 = *v4;
  uint64_t v9 = v4[1];
  char v10 = *((unsigned char *)v4 + 16);
  uint64_t v11 = sub_1DCB87938();
  uint64_t v12 = &v3[OBJC_IVAR___SNDetectSoundRequest_impl];
  *(void *)uint64_t v12 = v8;
  *((void *)v12 + 1) = v9;
  v12[16] = v10;
  *((void *)v12 + 3) = v11;
  *((void *)v12 + 4) = v13;
  v12[40] = a3;
  v16.receiver = v3;
  v16.super_class = ObjectType;
  id v14 = objc_msgSendSuper2(&v16, sel_init);

  return v14;
}

id sub_1DC8C8668(uint64_t a1, void *a2)
{
  type metadata accessor for SNMLModelAdapter();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  type metadata accessor for AnySNMLModel();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = &off_1F37FEC00;
  type metadata accessor for SNMLModelHashableUncodableWrapper();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  swift_getObjectType();
  *(void *)&long long v9 = 0;
  *((void *)&v9 + 1) = v6;
  char v10 = 0;
  id v7 = sub_1DC8C8450(&v9, a2);
  sub_1DC8CD828();
  return v7;
}

uint64_t sub_1DC8C8778(void *a1)
{
  id v3 = v1;
  type metadata accessor for SNMLModelAdapter();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  uint64_t v6 = type metadata accessor for SNModelMetadataUtils();
  id v7 = v3;
  id v8 = a1;
  uint64_t v9 = sub_1DC8CD95C();
  sub_1DCB30700(v9, v10);
  if (v2)
  {
    swift_release();

    swift_getObjectType();
    swift_deallocPartialClassInstance();
  }
  else
  {
    swift_bridgeObjectRelease();
    if (BYTE9(v21) == 2)
    {
      type metadata accessor for AnySNMLModel();
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = v5;
      *(void *)(v12 + 24) = &off_1F37FEC00;
      type metadata accessor for SNMLModelHashableUncodableWrapper();
      uint64_t v13 = swift_allocObject();
      uint64_t v14 = 0;
      *(void *)(v13 + 16) = v12;
      char v15 = 2;
    }
    else
    {
      char v16 = sub_1DC9A11A8(v5, (uint64_t)&off_1F37FEC00);
      uint64_t v14 = v17;
      swift_release();
      char v15 = 0;
      uint64_t v13 = v16 & 1;
    }
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v8;
    id v19 = v8;
    sub_1DCB30700(v18, (uint64_t)&off_1F37FEC00);
    swift_release();
    if (v23)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = (void *)sub_1DCB87908();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      uint64_t v20 = (void *)sub_1DCB87908();
    }
    swift_getObjectType();

    *(void *)&long long v21 = v13;
    *((void *)&v21 + 1) = v14;
    char v22 = v15;
    sub_1DC882C30(v13, v14, v15);
    uint64_t v6 = (uint64_t)sub_1DC8C8450(&v21, v20);

    sub_1DC882BC4(v13, v14, v15);
    swift_deallocPartialClassInstance();
  }
  return v6;
}

uint64_t sub_1DC8C8A2C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(void *))
{
  return a5(a3);
}

uint64_t SNDetectSoundRequest.description.getter()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v6 = 0;
  unint64_t v7 = 0xE000000000000000;
  sub_1DCB88A98();
  v5.receiver = v0;
  v5.super_class = ObjectType;
  id v2 = objc_msgSendSuper2(&v5, sel_description);
  sub_1DCB87938();

  sub_1DC8CDA08();
  sub_1DCB87A18();
  swift_bridgeObjectRelease();
  sub_1DCB87A18();
  uint64_t v4 = (void *)sub_1DC8C7690();
  type metadata accessor for SNSoundIdentifier(0);
  sub_1DCB88C08();

  return v6;
}

void sub_1DC8C8C1C(uint64_t *a1@<X8>)
{
  id v3 = (void *)MEMORY[0x1E01A8D20]();
  sub_1DC8C793C(v5);
  if (v1)
  {
  }
  else
  {
    type metadata accessor for SNSoundDetector();
    uint64_t v4 = swift_allocObject();
    sub_1DC8C9B34(v5);
    a1[3] = swift_getObjectType();
    *a1 = v4;
  }
}

void sub_1DC8C8D80()
{
  void (*v9)(void *__return_ptr, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  long long *v34;
  void v35[6];
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44[8];
  uint64_t v45;
  uint64_t v46;
  void v47[3];
  char v48[48];
  uint64_t v49;
  uint64_t v50;
  unsigned char v51[16];
  long long v52;
  _OWORD v53[2];
  void v54[6];
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;

  sub_1DC88D6B0();
  char v63 = v1;
  uint64_t v34 = v2;
  swift_getObjectType();
  sub_1DC87E988(&qword_1EAAA4220);
  sub_1DC89D4E0();
  char v32 = v4;
  char v33 = v3;
  MEMORY[0x1F4188790](v3);
  sub_1DC88D550();
  char v31 = v5;
  long long v6 = *(_OWORD *)(v0 + OBJC_IVAR___SNDetectSoundRequest_impl + 16);
  char v52 = *(_OWORD *)(v0 + OBJC_IVAR___SNDetectSoundRequest_impl);
  v53[0] = v6;
  *(_OWORD *)((char *)v53 + 9) = *(_OWORD *)(v0 + OBJC_IVAR___SNDetectSoundRequest_impl + 25);
  sub_1DC882BF0((uint64_t)&v52);
  uint64_t v7 = MGGetProductType();
  sub_1DC983D28(v7, v44);
  sub_1DC8CBCF0((uint64_t)v44, (uint64_t)v48, (uint64_t *)&unk_1EAA9E950);
  if (v49)
  {
    char v8 = v48[0];
    sub_1DC8CBC38(v44);
    sub_1DC9836F8(v8, (uint64_t)&v45);
    uint64_t v9 = (void (*)(void *__return_ptr, uint64_t))v47[1];
    sub_1DC8CBCF0((uint64_t)&v46, (uint64_t)v51, (uint64_t *)&unk_1EAAA4140);
    swift_retain();
    sub_1DC8CBCC4((uint64_t)v51);
    sub_1DC8CBCF0((uint64_t)v47, (uint64_t)&v50, &qword_1EAA9E980);
    sub_1DC8CBD50((uint64_t)&v50);
    uint64_t v10 = swift_release();
    v9(v35, v10);
    swift_release();
    uint64_t v11 = v35[0];
    uint64_t v12 = v35[1];
    uint64_t v13 = v35[2];
    uint64_t v14 = v35[3];
    char v15 = v35[4];
    char v16 = v35[5];
    uint64_t v17 = v36;
    uint64_t v18 = v37;
    id v19 = v38;
    uint64_t v20 = v39;
    long long v21 = v40;
    char v22 = v41;
    uint64_t v23 = v42;
    uint64_t v24 = v43;
  }
  else
  {
    if (qword_1EAA9D260 != -1) {
      swift_once();
    }
    uint64_t v12 = *(void *)algn_1EAAFFAA8;
    uint64_t v14 = qword_1EAAFFAB8;
    char v29 = qword_1EAAFFAB0;
    char v30 = qword_1EAAFFAA0;
    char v16 = qword_1EAAFFAC8;
    char v28 = qword_1EAAFFAC0;
    uint64_t v26 = byte_1EAAFFAD1;
    uint64_t v27 = byte_1EAAFFAD0;
    id v19 = byte_1EAAFFAD2;
    uint64_t v20 = byte_1EAAFFAD3;
    long long v21 = byte_1EAAFFAD4;
    char v22 = byte_1EAAFFAD5;
    uint64_t v23 = qword_1EAAFFAD8;
    uint64_t v24 = byte_1EAAFFAE0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v18 = v26;
    uint64_t v17 = v27;
    char v15 = v28;
    uint64_t v13 = v29;
    uint64_t v11 = v30;
  }
  v54[0] = v11;
  v54[1] = v12;
  v54[2] = v13;
  v54[3] = v14;
  v54[4] = v15;
  v54[5] = v16;
  uint64_t v55 = v17;
  uint64_t v56 = v18;
  uint64_t v57 = v19;
  char v58 = v20;
  char v59 = v21;
  char v60 = v22;
  char v61 = v23;
  char v62 = v24;
  long long v25 = sub_1DC93D458(&v52, (uint64_t)v54, v34);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1DC8CAF28((uint64_t)&v52);
  if (!v63)
  {
    v35[0] = v25;
    sub_1DC87E988(&qword_1EAAA4260);
    sub_1DC87E988(&qword_1EAA9E960);
    sub_1DC88CF34(&qword_1EAA9E968, &qword_1EAAA4260);
    sub_1DCB873D8();
    swift_release();
    sub_1DC88CF34((unint64_t *)&unk_1EAA9E970, &qword_1EAAA4220);
    sub_1DCB873A8();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
  }
  sub_1DC88D674();
}

id sub_1DC8C9100@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  char v10 = *((unsigned char *)a1 + 72);
  uint64_t v12 = a1[10];
  uint64_t v11 = a1[11];
  type metadata accessor for SNDetectionResult();
  v15[0] = v3;
  v15[1] = a1[1];
  _OWORD v15[2] = v4;
  v15[3] = v5;
  v15[4] = a1[4];
  v15[5] = v6;
  void v15[6] = v7;
  v15[7] = v9;
  v15[8] = v8;
  char v16 = v10;
  uint64_t v17 = v12;
  uint64_t v18 = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id result = sub_1DCACD0EC((uint64_t)v15);
  *a2 = result;
  return result;
}

uint64_t sub_1DC8C91CC(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SNUtils();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 16);
  uint64_t v5 = (void *)v4(ObjectType, a2);
  sub_1DCB23C1C(v5, 0);
  uint64_t v7 = v6;

  if (v7[2] == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = (void *)v4(ObjectType, a2);
    sub_1DCB23C1C(v8, 1);
    uint64_t v7 = v9;

    uint64_t v10 = v7[2];
    if (v10 == 1) {
      return swift_bridgeObjectRelease();
    }
    if (v10 == 2)
    {
      uint64_t v11 = sub_1DC8CD80C();
      if (sub_1DC9834CC(v11, v12, v7))
      {
        uint64_t v13 = sub_1DC8CD89C();
        if (sub_1DC9834CC(v13, v14, v7)) {
          return swift_bridgeObjectRelease();
        }
      }
    }
    type metadata accessor for SNError();
    sub_1DC8CD974();
    sub_1DCB88A98();
    sub_1DCB87A18();
    sub_1DC8CD80C();
    sub_1DCB87A18();
    sub_1DCB87A18();
    sub_1DC8CD89C();
    sub_1DCB87A18();
  }
  else
  {
    type metadata accessor for SNError();
    sub_1DC8CD974();
    sub_1DCB88A98();
  }
  sub_1DCB87A18();
  MEMORY[0x1E01A6C50](v7, MEMORY[0x1E4FBB1A0]);
  sub_1DCB87A18();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v16 = sub_1DC8CD9C0();
  sub_1DCA14B2C(v16, v17, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  return swift_willThrow();
}

uint64_t sub_1DC8C9418(uint64_t *a1)
{
  uint64_t v1 = *a1;
  sub_1DC87E988(&qword_1EAA9C6C0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1DCBB93B0;
  *(void *)(v2 + 32) = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  sub_1DC87E988((uint64_t *)&unk_1EAAA0CB0);
  sub_1DC88CF34(&qword_1EAA9E850, (uint64_t *)&unk_1EAAA0CB0);
  return sub_1DCB87018();
}

uint64_t sub_1DC8C94E8@<X0>(uint64_t *a1@<X8>)
{
  sub_1DC8CB7F8();
  uint64_t result = swift_allocError();
  *a1 = result;
  return result;
}

uint64_t sub_1DC8C9528@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1DC8C9540(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  unint64_t v2 = *(void *)(a1 + 24);
  sub_1DC87E988(&qword_1EAA9C6C0);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_1DCBB9440;
  *(int64x2_t *)(result + 32) = vdupq_n_s64(1uLL);
  if (__OFSUB__(v2 >> 1, v1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(result + 48) = (v2 >> 1) - v1;
    swift_unknownObjectRetain();
    sub_1DC87E988(&qword_1EAA9E860);
    sub_1DC88CF34(&qword_1EAA9E868, &qword_1EAA9E860);
    return sub_1DCB87018();
  }
  return result;
}

void sub_1DC8C9630()
{
  sub_1DC8CD868();
  if (v4)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v3 <= -2147483650.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v3 < 2147483650.0)
  {
    time.CMTimeValue value = v0;
    *(void *)&time.CMTimeScale timescale = v1;
    time.CMTimeEpoch epoch = v2;
    CMTimeConvertScale(&v5, &time, (int)v3, kCMTimeRoundingMethod_RoundTowardZero);
    return;
  }
LABEL_7:
  __break(1u);
}

void sub_1DC8C96C0(void **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, unint64_t, uint64_t), uint64_t a9, uint64_t a10)
{
  uint64_t v11 = *a1;
  uint64_t v12 = *a2;
  uint64_t v13 = a2[2];
  unint64_t v39 = *((unsigned int *)a2 + 2) | ((unint64_t)*((unsigned int *)a2 + 3) << 32);
  *a2 = sub_1DCB885D8();
  *((_DWORD *)a2 + 2) = v14;
  *((_DWORD *)a2 + 3) = v15;
  a2[2] = v16;
  sub_1DC8CD9A8();
  uint64_t v17 = (void *)sub_1DCB87908();
  id v18 = objc_msgSend(v11, sel_featureValueForName_, v17);

  if (!v18)
  {
    sub_1DC8CD9E8();
    sub_1DC8CD988();
LABEL_16:
    sub_1DCB88C68();
    __break(1u);
    return;
  }
  id v19 = v18;
  id v41 = objc_msgSend(v19, sel_multiArrayValue);
  if (!v41)
  {
LABEL_15:
    sub_1DC8CD988();
    sub_1DC8CD994();
    goto LABEL_16;
  }
  char v48 = v19;
  if (a4)
  {
    uint64_t v20 = (void *)sub_1DCB87908();
    id v21 = objc_msgSend(v11, sel_featureValueForName_, v20);

    if (v21)
    {
      id v22 = v21;
      id v23 = objc_msgSend(v22, sel_multiArrayValue);
      if (v23)
      {
        uint64_t v24 = v23;

        goto LABEL_8;
      }
      goto LABEL_15;
    }
  }
  uint64_t v24 = 0;
LABEL_8:
  a8(v12, v39, v13);
  if (v40)
  {
  }
  else
  {
    uint64_t v25 = sub_1DCB883C8();
    ((void (*)(uint64_t))a8)(v25);
    sub_1DCB883D8();
    id v26 = objc_msgSend(v41, sel_objectAtIndexedSubscript_, 0);
    objc_msgSend(v26, sel_doubleValue);
    double v28 = v27;

    double v29 = v28;
    if (v24)
    {
      id v30 = v24;
      id v31 = objc_msgSend(v30, sel_objectAtIndexedSubscript_, 0);
      objc_msgSend(v31, sel_doubleValue);
      double v29 = v32;
    }
    uint64_t v34 = *(void *)(a10 + 24);
    uint64_t v33 = *(void *)(a10 + 32);
    uint64_t v35 = sub_1DCB87938();
    uint64_t v37 = v36;
    swift_bridgeObjectRetain();

    *(void *)a3 = v42;
    *(void *)(a3 + 8) = v43;
    *(void *)(a3 + 16) = v44;
    *(void *)(a3 + 24) = v45;
    *(void *)(a3 + 32) = v46;
    *(void *)(a3 + 40) = v47;
    *(double *)(a3 + 48) = v28;
    *(void *)(a3 + 56) = v34;
    *(void *)(a3 + 64) = v33;
    *(unsigned char *)(a3 + 72) = v29 > 0.5;
    *(void *)(a3 + 80) = v35;
    *(void *)(a3 + 88) = v37;
  }
}

double sub_1DC8C9A5C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1 = MEMORY[0x1E4F1FA48];
  uint64_t v2 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  *(void *)a1 = *MEMORY[0x1E4F1FA48];
  double result = *(double *)(v1 + 8);
  *(double *)(a1 + 8) = result;
  *(void *)(a1 + 16) = v2;
  return result;
}

id SNDetectSoundRequest.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_1DC8C9B04()
{
}

uint64_t sub_1DC8C9B1C()
{
  return sub_1DC8C7A64();
}

uint64_t sub_1DC8C9B34(_OWORD *a1)
{
  uint64_t v3 = v1;
  sub_1DC89F6D8();
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 136) = 0;
  *(void *)(v1 + 144) = 0;
  uint64_t v6 = v5[1];
  sub_1DC8C91CC(*v5, v6);
  if (v2)
  {
    sub_1DC8CB730((uint64_t)a1);

LABEL_3:
    swift_bridgeObjectRelease();
    sub_1DC8CD7C8();
    swift_deallocPartialClassInstance();
    return v3;
  }
  long long v7 = a1[1];
  *(_OWORD *)(v1 + 16) = *a1;
  *(_OWORD *)(v1 + 32) = v7;
  long long v8 = a1[3];
  *(_OWORD *)(v1 + 48) = a1[2];
  *(_OWORD *)(v1 + 64) = v8;
  long long v34 = *(_OWORD *)((char *)a1 + 24);
  long long v33 = v34;
  sub_1DC8CB6DC((uint64_t)a1);
  sub_1DC8AF4A8((uint64_t)&v34);
  sub_1DCB87A18();
  *(_OWORD *)(v1 + 80) = v33;
  uint64_t v9 = type metadata accessor for SNUtils();
  uint64_t ObjectType = swift_getObjectType();
  id v31 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 16);
  uint64_t v32 = ObjectType;
  uint64_t v11 = (void *)v31(ObjectType, v6);
  uint64_t v35 = v9;
  sub_1DCB23C1C(v11, 0);
  uint64_t v13 = v12;

  if (v13[2])
  {
    uint64_t v15 = v13[4];
    uint64_t v14 = v13[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 104) = v15;
    *(void *)(v3 + 112) = v14;
    uint64_t v16 = (void *)v31(v32, v6);
    sub_1DCB23C1C(v16, 1);
    id v18 = v17;

    uint64_t v19 = v18[2];
    if (v19 == 1)
    {
      uint64_t v21 = v18[4];
      uint64_t v20 = v18[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_1DC8CB730((uint64_t)a1);
      *(void *)(v3 + 120) = v21;
      *(void *)(v3 + 128) = v20;
      *(void *)(v3 + 136) = 0;
      *(void *)(v3 + 144) = 0;
    }
    else
    {
      swift_bridgeObjectRelease();
      if (v19 != 2)
      {
        type metadata accessor for SNError();
        unint64_t v23 = sub_1DC8CD9C0();
        sub_1DCA14B2C(v23, v24, v25, v26, v27, v28);
        swift_willThrow();
        sub_1DC8CB730((uint64_t)a1);
        double v29 = *(void **)(v3 + 32);
        uint64_t v30 = *(void *)(v3 + 72);
        swift_bridgeObjectRelease();

        swift_unknownObjectRelease();
        sub_1DC8CB784(v30);
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        goto LABEL_3;
      }
      *(void *)(v3 + 120) = 0x6E656469666E6F43;
      *(void *)(v3 + 128) = 0xEA00000000006563;
      sub_1DC8CB730((uint64_t)a1);
      *(_OWORD *)(v3 + 136) = xmmword_1DCBB9FA0;
    }
    swift_bridgeObjectRelease();
    return v3;
  }
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

id sub_1DC8C9E04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = self;
  v94[0] = 0;
  id v10 = sub_1DCB6B73C(v9, (uint64_t)v94);
  if (!v10)
  {
    id v28 = v94[0];
    sub_1DCB86898();

    swift_willThrow();
    return v10;
  }
  uint64_t v92 = a4;
  id v11 = v94[0];
  uint64_t v12 = (void *)sub_1DCB87908();
  sub_1DCB60B18((uint64_t)v10, v12);

  sub_1DCB87908();
  uint64_t v13 = sub_1DC8CD6FC();
  id v17 = sub_1DCB68494(v13, v14, v15, v16);

  id v18 = v94[0];
  if (!v17)
  {
    id v29 = v94[0];
    sub_1DCB86898();

    swift_willThrow();
    return v10;
  }
  id v19 = v94[0];
  sub_1DCB87908();
  uint64_t v20 = sub_1DC8CD6FC();
  id v24 = sub_1DCB6A948(v20, v21, v22, v23);

  if (!v24)
  {
    id v30 = v94[0];
    sub_1DCB86898();

    swift_willThrow();
    goto LABEL_9;
  }
  uint64_t v91 = v17;
  uint64_t v25 = *(void **)a1;
  uint64_t v26 = *(void *)(a1 + 8);
  id v27 = v94[0];
  sub_1DCB2FB74(v24, (uint64_t)v25, v26);
  if (!v5)
  {
    uint64_t v90 = a1;
    id v31 = (void *)sub_1DCB87908();
    v94[0] = 0;
    id v32 = sub_1DCB68964(v9, v10, v31, 1, (uint64_t)v94);

    id v33 = v94[0];
    uint64_t v89 = v32;
    if (v32)
    {
      uint64_t v88 = v24;
      uint64_t ObjectType = swift_getObjectType();
      CMTimeValue v87 = *(uint64_t (**)(uint64_t, uint64_t))(v26 + 16);
      id v35 = v33;
      uint64_t v36 = (void *)v87(ObjectType, v26);
      id v37 = objc_msgSend(v36, sel_inputDescriptionsByName);

      sub_1DC89C89C(0, (unint64_t *)&qword_1EAA9C680);
      uint64_t v38 = sub_1DCB877B8();

      swift_bridgeObjectRetain();
      unint64_t v39 = sub_1DC9612B8(v92, a5, v38);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v39)
      {
        id v40 = objc_msgSend(v39, sel_multiArrayConstraint);

        if (v40)
        {
          id v41 = (void *)type metadata accessor for SNUtils();
          id v42 = objc_msgSend(v40, sel_shape);

          sub_1DC89C89C(0, (unint64_t *)&qword_1EAA9C7A0);
          unint64_t v43 = sub_1DCB87C38();

          uint64_t v44 = sub_1DCB212CC(v43);
          swift_bridgeObjectRelease();
          id v45 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInt_, v44);
          sub_1DCB22DE0(v45);
          int v47 = v46;

          sub_1DC8CBCF0(v90 + 56, (uint64_t)v95, &qword_1EAA9C768);
          sub_1DC8CBCF0((uint64_t)v95, (uint64_t)&v96, &qword_1EAA9C768);
          if ((~v96 & 0xF000000000000007) != 0)
          {
            sub_1DC8CB79C((uint64_t)&v96, (uint64_t)v97);
            id v52 = v91;
LABEL_26:
            double v66 = *(double *)(v90 + 40);
            if ((~*(void *)&v66 & 0x7FF0000000000000) != 0)
            {
              if (v66 > -1.0)
              {
                if (v66 < 4294967300.0)
                {
                  sub_1DC8CD934();
                  sub_1DCB6BB74(v67, v68, v47, 1, v69);
                  uint64_t v70 = sub_1DC8CD5E8();
                  if (sub_1DCB6B83C(v70, v71, v52, v88, 0, 0, v72, v73))
                  {
                    id v74 = v93;
                    sub_1DC8CD934();
                    sub_1DCB6BB74(v75, v76, 1, 1, v77);
                    uint64_t v78 = sub_1DC8CD5E8();
                    if (sub_1DCB6B83C(v78, v79, v88, v89, 0, 0, v80, v81))
                    {
                      if (v66 > -9.22337204e18)
                      {
                        if (v66 < 9.22337204e18)
                        {
                          id v82 = v93;
                          sub_1DCB5EC24((uint64_t)v10);
                          sub_1DCB5F1F8((uint64_t)v10);

LABEL_38:
                          return v10;
                        }
LABEL_47:
                        __break(1u);
                      }
LABEL_46:
                      __break(1u);
                      goto LABEL_47;
                    }
                    id v85 = v93;
                    sub_1DCB86898();

                    swift_willThrow();
                  }
                  else
                  {
                    id v83 = v93;
                    sub_1DCB86898();

                    swift_willThrow();
                  }

                  goto LABEL_38;
                }
                goto LABEL_42;
              }
            }
            else
            {
              __break(1u);
            }
            __break(1u);
LABEL_42:
            __break(1u);
            goto LABEL_43;
          }
          sub_1DCB87908();
          uint64_t v48 = sub_1DC8CD6FC();
          id v52 = sub_1DCB6A308(v48, v49, v50, v51);

          id v53 = v94[0];
          id v17 = v91;
          if (v52)
          {
            sub_1DC8CD868();
            if (v55)
            {
LABEL_43:
              __break(1u);
              goto LABEL_44;
            }
            if (v54 <= -1.0)
            {
LABEL_44:
              __break(1u);
              goto LABEL_45;
            }
            if (v54 >= 4294967300.0)
            {
LABEL_45:
              __break(1u);
              goto LABEL_46;
            }
            unsigned int v56 = v54;
            id v57 = v53;
            sub_1DCB6BA88(v56, 1, 1, (uint64_t)v94);
            uint64_t v58 = sub_1DC8CD5E8();
            if (sub_1DCB6B83C(v58, v59, v91, v52, 0, 0, v60, v61))
            {
              id v62 = v93;
              goto LABEL_26;
            }
            id v86 = v93;
            sub_1DCB86898();

            swift_willThrow();
LABEL_10:

            return v10;
          }
          id v84 = v94[0];
          sub_1DCB86898();

          swift_willThrow();
LABEL_9:

          goto LABEL_10;
        }
      }
      sub_1DC884E74();
      swift_allocError();
      *char v63 = 0;
      swift_willThrow();
    }
    else
    {
      id v64 = v94[0];
      sub_1DC8CD968();
      sub_1DCB86898();

      swift_willThrow();
    }

    return v10;
  }

  return v10;
}

id sub_1DC8CA558()
{
  uint64_t v1 = *(void **)(v0 + 96);
  if (v1) {
    return v1;
  }
  sub_1DC8CB624();
  swift_allocError();
  *uint64_t v3 = 0;
  return (id)swift_willThrow();
}

void sub_1DC8CA5B8(uint64_t a1, uint64_t a2, unsigned int a3, void *a4)
{
  unsigned int v8 = sub_1DCB5BBF4((uint64_t)a4, 0);
  sub_1DCB2FC90(a4, 0, (uint64_t)v25);
  if (!v4)
  {
    sub_1DC8CD868();
    if (v10)
    {
      __break(1u);
    }
    else if (v9 > -9.22337204e18)
    {
      if (v9 < 9.22337204e18)
      {
        uint64_t v11 = a3 >> 1;
        if (!__OFADD__((uint64_t)v9, v11))
        {
          if (!__OFSUB__((uint64_t)v9 + v11, v8 >> 1))
          {
            id v12 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedInt_, sub_1DCB5C99C((uint64_t)a4));
            sub_1DC8AE910(v12);

            uint64_t v13 = sub_1DCB88628();
            LODWORD(v12) = v14;
            uint64_t v34 = v15;
            unint64_t v24 = HIDWORD(v14);
            id v16 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedInt_, sub_1DCB5C99C((uint64_t)a4));
            sub_1DC8AE910(v16);

            uint64_t v17 = sub_1DCB88628();
            int v19 = v18;
            uint64_t v21 = v20;
            unint64_t v22 = HIDWORD(v18);
            uint64_t ObjectType = swift_getObjectType();
            uint64_t v26 = v13;
            int v27 = (int)v12;
            int v28 = v24;
            uint64_t v29 = v34;
            uint64_t v30 = v17;
            int v31 = v19;
            int v32 = v22;
            uint64_t v33 = v21;
            (*(void (**)(uint64_t *, uint64_t, uint64_t))(a2 + 8))(&v26, ObjectType, a2);
            return;
          }
LABEL_13:
          __break(1u);
          return;
        }
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
LABEL_11:
      __break(1u);
      goto LABEL_12;
    }
    __break(1u);
    goto LABEL_11;
  }
}

uint64_t sub_1DC8CA78C(void *a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v5 = v3;
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = self;
  id v40 = 0;
  id v9 = sub_1DCB6B5C0(v8, a1, (uint64_t)&v40);
  id v10 = v40;
  if (!v9)
  {
    id v23 = v40;
    sub_1DCB86898();

    swift_willThrow();
    return (uint64_t)v10;
  }
  uint64_t v11 = v9;
  uint64_t v38 = a3;
  swift_bridgeObjectRetain();
  id v12 = v10;
  uint64_t v13 = (void *)sub_1DCB87908();
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v11, sel_featureValueForName_, v13);

  if (v14)
  {
    id v15 = v14;
    id v39 = objc_msgSend(v15, sel_multiArrayValue);
    if (v39)
    {
      if (!*(void *)(v5 + 144)
        || (swift_bridgeObjectRetain(),
            id v16 = (void *)sub_1DCB87908(),
            swift_bridgeObjectRelease(),
            id v17 = objc_msgSend(v11, sel_featureValueForName_, v16),
            v16,
            !v17))
      {
        uint64_t v20 = 0;
LABEL_9:
        type metadata accessor for SNDetectionResult();
        swift_bridgeObjectRetain();
        id v21 = sub_1DCACD184();
        id v10 = (id)*(unsigned int *)(v5 + 64);
        unint64_t v22 = (char *)v21;
        sub_1DC8CA5B8((uint64_t)v22, (uint64_t)&off_1F37E96D0, v10, a1);
        if (v4)
        {
          swift_unknownObjectRelease();
        }
        else
        {

          id v24 = objc_msgSend(v39, sel_objectAtIndexedSubscript_, 0);
          objc_msgSend(v24, sel_doubleValue);
          double v26 = v25;

          id v37 = &v22[OBJC_IVAR___SNDetectionResult_impl];
          *(double *)&v22[OBJC_IVAR___SNDetectionResult_impl + 48] = v26;
          if (v20)
          {
            id v27 = v20;
            id v28 = objc_msgSend(v27, sel_objectAtIndexedSubscript_, 0);
            objc_msgSend(v28, sel_doubleValue);
            double v26 = v29;
          }
          v37[72] = v26 > 0.5;
          uint64_t v30 = sub_1DCB87938();
          SNDetectionResult.detectorIdentifier.setter(v30, v31);
          double v32 = SNDetectionResult.timeRange.getter((uint64_t)v41);
          ((void (*)(void, void, void, double))v38)(v41[0], v41[1], v41[2], v32);
          uint64_t v33 = sub_1DCB883C8();
          v38(v33);
          sub_1DCB883D8();
          uint64_t v35 = v44;
          *(void *)id v37 = v41[6];
          *((void *)v37 + 1) = v41[7];
          *((_OWORD *)v37 + 1) = v42;
          *((void *)v37 + 4) = v43;
          *((void *)v37 + 5) = v35;
          sub_1DC87E988(&qword_1EAA9C720);
          uint64_t v36 = swift_allocObject();
          *(_OWORD *)(v36 + 16) = xmmword_1DCBB8670;
          *(void *)(v36 + 32) = v22;
          id v40 = (id)v36;
          sub_1DCB87C68();
          id v10 = v40;
          swift_unknownObjectRelease();
        }
        return (uint64_t)v10;
      }
      id v18 = v17;
      id v19 = objc_msgSend(v18, sel_multiArrayValue);
      if (v19)
      {
        uint64_t v20 = v19;

        goto LABEL_9;
      }
    }
    sub_1DC8CD988();
    sub_1DC8CD994();
  }
  else
  {
    sub_1DC8CD9E8();
    sub_1DC8CD988();
  }
  uint64_t result = sub_1DCB88C68();
  __break(1u);
  return result;
}

void sub_1DC8CAC20()
{
  sub_1DC89F6D8();
  uint64_t v3 = v2;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v0;
  *(void *)(v4 + 24) = v3;
  swift_retain();
  uint64_t v5 = sub_1DC8A12D0();
  swift_release();
  if (!v1)
  {
    uint64_t v6 = *(void **)(v0 + 96);
    *(void *)(v0 + 96) = v5;
  }
}

uint64_t sub_1DC8CACB8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v4 = *(_OWORD *)(a1 + 32);
  v12[0] = *(_OWORD *)(a1 + 16);
  v12[1] = v4;
  long long v5 = *(_OWORD *)(a1 + 64);
  void v12[2] = *(_OWORD *)(a1 + 48);
  uint64_t v12[3] = v5;
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = *(void *)(a1 + 88);
  uint64_t v8 = *(void *)(a1 + 104);
  uint64_t v9 = *(void *)(a1 + 112);
  sub_1DC8CB6DC((uint64_t)v12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v10 = sub_1DC8C9E04((uint64_t)v12, v6, v7, v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = sub_1DC8CB730((uint64_t)v12);
  if (!v2) {
    *a2 = v10;
  }
  return result;
}

id sub_1DC8CAD6C()
{
  id result = sub_1DC8CA558();
  if (!v0)
  {
    uint64_t v2 = result;
    swift_bridgeObjectRetain();
    uint64_t v3 = (void *)sub_1DCB87908();
    swift_bridgeObjectRelease();
    id v4 = sub_1DCB60550(v2, v3);

    return v4;
  }
  return result;
}

unint64_t sub_1DC8CADEC()
{
  unint64_t v1 = *(void *)(v0 + 72);
  sub_1DC8CB670(v1);
  return v1;
}

uint64_t sub_1DC8CAE18()
{
  unint64_t v1 = *(void **)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 72);
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  sub_1DC8CB784(v2);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1DC8CAE90()
{
  sub_1DC8CAE18();

  return swift_deallocClassInstance();
}

uint64_t sub_1DC8CAEC4(void *a1, uint64_t a2, void (*a3)(void))
{
  return sub_1DC8CA78C(a1, a2, a3);
}

id sub_1DC8CAEE0()
{
  return sub_1DC8CAD6C();
}

void sub_1DC8CAEF8()
{
}

id sub_1DC8CAF10()
{
  return sub_1DC8CA558();
}

uint64_t sub_1DC8CAF28(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for SNDetectSoundRequest()
{
  return self;
}

uint64_t method lookup function for SNDetectSoundRequest(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SNDetectSoundRequest);
}

uint64_t type metadata accessor for SNSoundDetector()
{
  return self;
}

uint64_t sub_1DC8CAFC8()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1DC8CB004(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1DC8CB05C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_1DC8CB11C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x60uLL);
}

uint64_t sub_1DC8CB124(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1DC8CB1A4(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 96))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 64);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1DC8CB1E4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)id result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for SoundDetection.Result()
{
}

void type metadata accessor for SoundDetection()
{
}

uint64_t sub_1DC8CB254(uint64_t a1)
{
  sub_1DC882BC4(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));

  return swift_bridgeObjectRelease();
}

uint64_t sub_1DC8CB298(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_1DC882C30(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1DC8CB304(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_1DC882C30(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  char v9 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v6;
  sub_1DC882BC4(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

__n128 sub_1DC8CB390(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_1DC8CB3A4(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v7 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v4;
  sub_1DC882BC4(v5, v6, v7);
  uint64_t v8 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v8;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t sub_1DC8CB404(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 41))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 32);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1DC8CB444(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for SoundDetection.AudioSourceAgnosticRequest()
{
}

unint64_t sub_1DC8CB4A0()
{
  unint64_t result = qword_1EAA9E820;
  if (!qword_1EAA9E820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E820);
  }
  return result;
}

unint64_t sub_1DC8CB4EC(uint64_t a1)
{
  unint64_t result = sub_1DC8CB514();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1DC8CB514()
{
  unint64_t result = qword_1EAA9E828;
  if (!qword_1EAA9E828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E828);
  }
  return result;
}

unint64_t sub_1DC8CB560(uint64_t a1)
{
  unint64_t result = sub_1DC8CB588();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1DC8CB588()
{
  unint64_t result = qword_1EAA9E830;
  if (!qword_1EAA9E830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E830);
  }
  return result;
}

unint64_t sub_1DC8CB5D8()
{
  unint64_t result = qword_1EAA9E838;
  if (!qword_1EAA9E838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E838);
  }
  return result;
}

unint64_t sub_1DC8CB624()
{
  unint64_t result = qword_1EAA9E840;
  if (!qword_1EAA9E840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E840);
  }
  return result;
}

unint64_t sub_1DC8CB670(unint64_t result)
{
  if ((~result & 0xF000000000000007) != 0) {
    return (unint64_t)(id)(result & 0x7FFFFFFFFFFFFFFFLL);
  }
  return result;
}

uint64_t sub_1DC8CB688()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1DC8CB6C0@<X0>(void *a1@<X8>)
{
  return sub_1DC8CACB8(*(void *)(v1 + 16), a1);
}

uint64_t sub_1DC8CB6DC(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  unint64_t v3 = *(void *)(a1 + 56);
  swift_unknownObjectRetain();
  id v4 = v2;
  swift_bridgeObjectRetain();
  sub_1DC8CB670(v3);
  return a1;
}

uint64_t sub_1DC8CB730(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 56);
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  sub_1DC8CB784(v3);
  return a1;
}

void sub_1DC8CB784(uint64_t a1)
{
  if ((~a1 & 0xF000000000000007) != 0) {
}
  }

uint64_t sub_1DC8CB79C(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_1DC8CB7F8()
{
  unint64_t result = qword_1EAA9E858;
  if (!qword_1EAA9E858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E858);
  }
  return result;
}

uint64_t sub_1DC8CB844()
{
  sub_1DC882BC4(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

id sub_1DC8CB8A0()
{
  return sub_1DC8C7040((long long *)(v0 + 16));
}

uint64_t sub_1DC8CB8BC()
{
  sub_1DC8818D0(v0 + 16);
  sub_1DC882BC4(*(void *)(v0 + 56), *(void *)(v0 + 64), *(unsigned char *)(v0 + 72));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1DC8CB920@<X0>(uint64_t *a1@<X8>)
{
  return sub_1DC8C7124((void *)(v1 + 16), v1 + 56, a1);
}

uint64_t sub_1DC8CB940()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1DC8CB980(uint64_t a1)
{
  return sub_1DCA157F0(a1, *(uint64_t (**)(id, uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void (**)(uint64_t *__return_ptr))(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1DC8CB98C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1DC8CB9C4()
{
  return sub_1DCA162F0();
}

uint64_t sub_1DC8CB9CC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1DC8CBA40@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1DCA188F0(*a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

unint64_t sub_1DC8CBA70()
{
  unint64_t result = qword_1EAA9E8D0;
  if (!qword_1EAA9E8D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E8D0);
  }
  return result;
}

unint64_t sub_1DC8CBABC()
{
  unint64_t result = qword_1EAA9E8F8;
  if (!qword_1EAA9E8F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E8F8);
  }
  return result;
}

unint64_t sub_1DC8CBB08()
{
  unint64_t result = qword_1EAA9E900;
  if (!qword_1EAA9E900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E900);
  }
  return result;
}

unint64_t sub_1DC8CBB54()
{
  unint64_t result = qword_1EAA9E918;
  if (!qword_1EAA9E918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E918);
  }
  return result;
}

unint64_t sub_1DC8CBBA0()
{
  unint64_t result = qword_1EAA9E928;
  if (!qword_1EAA9E928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E928);
  }
  return result;
}

unint64_t sub_1DC8CBBEC()
{
  unint64_t result = qword_1EAA9E938;
  if (!qword_1EAA9E938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E938);
  }
  return result;
}

uint64_t *sub_1DC8CBC38(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1DC8CBC74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a7)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1DC8CBCC4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1DC8CBCF0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1DC87E988(a3);
  uint64_t v4 = sub_1DC8CD7C8();
  v5(v4);
  return a2;
}

uint64_t sub_1DC8CBD50(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for SoundDetection.AudioSourceAgnosticRequest.CodingKeys()
{
  return &type metadata for SoundDetection.AudioSourceAgnosticRequest.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for SoundDetection.Result.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DC8CBE60);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SoundDetection.Result.CodingKeys()
{
  return &type metadata for SoundDetection.Result.CodingKeys;
}

void type metadata accessor for SNDetectSoundRequest.DomainError()
{
}

void type metadata accessor for SoundDetection.Session()
{
}

void type metadata accessor for SNSoundDetector.DomainError()
{
}

uint64_t sub_1DC8CBECC(uint64_t a1)
{
  return sub_1DC882BC4(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_1DC8CBEDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1DC882C30(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t sub_1DC8CBF28(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1DC882C30(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_1DC882BC4(v6, v7, v8);
  return a1;
}

__n128 _s11FileAddressOwtk(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t sub_1DC8CBF94(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_1DC882BC4(v4, v5, v6);
  return a1;
}

uint64_t sub_1DC8CBFDC(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1DC8CC01C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1DC8CC060(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1DC8CC068(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

void type metadata accessor for DetectorVariant()
{
}

uint64_t sub_1DC8CC07C(uint64_t a1)
{
  sub_1DC882BC4(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1DC8CC0D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_1DC882C30(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v10;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_WORD *)(a1 + 100) = *(_WORD *)(a2 + 100);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1DC8CC194(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_1DC882C30(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  char v9 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v6;
  sub_1DC882BC4(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  *(unsigned char *)(a1 + 99) = *(unsigned char *)(a2 + 99);
  *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
  *(unsigned char *)(a1 + 101) = *(unsigned char *)(a2 + 101);
  uint64_t v10 = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 104) = v10;
  return a1;
}

void *sub_1DC8CC2C0(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x71uLL);
}

uint64_t sub_1DC8CC2C8(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v7 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v4;
  sub_1DC882BC4(v5, v6, v7);
  uint64_t v8 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v8;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v11;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  *(unsigned char *)(a1 + 99) = *(unsigned char *)(a2 + 99);
  *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
  *(unsigned char *)(a1 + 101) = *(unsigned char *)(a2 + 101);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  return a1;
}

uint64_t sub_1DC8CC398(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 113))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 32);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1DC8CC3D8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 112) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 113) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 113) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for SoundDetection.Request()
{
}

unint64_t sub_1DC8CC448()
{
  unint64_t result = qword_1EAA9E988;
  if (!qword_1EAA9E988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E988);
  }
  return result;
}

unint64_t sub_1DC8CC498()
{
  unint64_t result = qword_1EAA9E990;
  if (!qword_1EAA9E990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E990);
  }
  return result;
}

unint64_t sub_1DC8CC4E8()
{
  unint64_t result = qword_1EAA9E998;
  if (!qword_1EAA9E998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E998);
  }
  return result;
}

unint64_t sub_1DC8CC538()
{
  unint64_t result = qword_1EAA9E9A0;
  if (!qword_1EAA9E9A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E9A0);
  }
  return result;
}

unint64_t sub_1DC8CC588()
{
  unint64_t result = qword_1EAA9E9A8;
  if (!qword_1EAA9E9A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E9A8);
  }
  return result;
}

unint64_t sub_1DC8CC5D8()
{
  unint64_t result = qword_1EAA9E9B0;
  if (!qword_1EAA9E9B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E9B0);
  }
  return result;
}

unint64_t sub_1DC8CC628()
{
  unint64_t result = qword_1EAA9E9B8;
  if (!qword_1EAA9E9B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E9B8);
  }
  return result;
}

unint64_t sub_1DC8CC678()
{
  unint64_t result = qword_1EAA9E9C0;
  if (!qword_1EAA9E9C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E9C0);
  }
  return result;
}

unint64_t sub_1DC8CC6C8()
{
  unint64_t result = qword_1EAA9E9C8;
  if (!qword_1EAA9E9C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E9C8);
  }
  return result;
}

unint64_t sub_1DC8CC718()
{
  unint64_t result = qword_1EAA9E9D0;
  if (!qword_1EAA9E9D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E9D0);
  }
  return result;
}

unint64_t sub_1DC8CC764()
{
  unint64_t result = qword_1EAA9E9D8;
  if (!qword_1EAA9E9D8)
  {
    sub_1DC8863A8(&qword_1EAAA4260);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9E9D8);
  }
  return result;
}

unint64_t sub_1DC8CC7D8()
{
  unint64_t result = qword_1EAA9EA00;
  if (!qword_1EAA9EA00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EA00);
  }
  return result;
}

unint64_t sub_1DC8CC824()
{
  unint64_t result = qword_1EAA9EA10;
  if (!qword_1EAA9EA10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EA10);
  }
  return result;
}

unint64_t sub_1DC8CC870()
{
  unint64_t result = qword_1EAA9EA20;
  if (!qword_1EAA9EA20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EA20);
  }
  return result;
}

unint64_t sub_1DC8CC8BC()
{
  unint64_t result = qword_1EAA9EA38;
  if (!qword_1EAA9EA38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EA38);
  }
  return result;
}

unint64_t sub_1DC8CC908()
{
  unint64_t result = qword_1EAA9EA40;
  if (!qword_1EAA9EA40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EA40);
  }
  return result;
}

uint64_t sub_1DC8CC954(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for SNMLModelHashableUncodableWrapper();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1DC8CC998(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1DC8863A8(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1DC8CC9F8()
{
  unint64_t result = qword_1EAA9EA78;
  if (!qword_1EAA9EA78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EA78);
  }
  return result;
}

unint64_t sub_1DC8CCA44()
{
  unint64_t result = qword_1EAA9EA88;
  if (!qword_1EAA9EA88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EA88);
  }
  return result;
}

ValueMetadata *type metadata accessor for SoundDetection.Request.CodingKeys()
{
  return &type metadata for SoundDetection.Request.CodingKeys;
}

unsigned char *_s13SoundAnalysis14SoundDetectionV26AudioSourceAgnosticRequestV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DC8CCB6CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DetectorVariant.CodingKeys()
{
  return &type metadata for DetectorVariant.CodingKeys;
}

ValueMetadata *type metadata accessor for DetectorVariant.ComposedDetectorCodingKeys()
{
  return &type metadata for DetectorVariant.ComposedDetectorCodingKeys;
}

ValueMetadata *type metadata accessor for DetectorVariant.DetectorIdentifierCodingKeys()
{
  return &type metadata for DetectorVariant.DetectorIdentifierCodingKeys;
}

unsigned char *_s13SoundAnalysis15DetectorVariantO26ComposedDetectorCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1DC8CCC60);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DetectorVariant.EndToEndDetectorModelCodingKeys()
{
  return &type metadata for DetectorVariant.EndToEndDetectorModelCodingKeys;
}

uint64_t sub_1DC8CCC98(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t destroy for XPCPublisher()
{
  return swift_release();
}

uint64_t sub_1DC8CCCD8(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1DC8CCD1C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FileDeletionResult.DomainError(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FileDeletionResult.DomainError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for ComposedDetector()
{
}

unint64_t sub_1DC8CCDE4()
{
  unint64_t result = qword_1EAA9EAA8;
  if (!qword_1EAA9EAA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EAA8);
  }
  return result;
}

unint64_t sub_1DC8CCE34()
{
  unint64_t result = qword_1EAA9EAB0;
  if (!qword_1EAA9EAB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EAB0);
  }
  return result;
}

unint64_t sub_1DC8CCE84()
{
  unint64_t result = qword_1EAA9EAB8;
  if (!qword_1EAA9EAB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EAB8);
  }
  return result;
}

unint64_t sub_1DC8CCED4()
{
  unint64_t result = qword_1EAA9EAC0;
  if (!qword_1EAA9EAC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EAC0);
  }
  return result;
}

unint64_t sub_1DC8CCF24()
{
  unint64_t result = qword_1EAA9EAC8;
  if (!qword_1EAA9EAC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EAC8);
  }
  return result;
}

unint64_t sub_1DC8CCF74()
{
  unint64_t result = qword_1EAA9EAD0;
  if (!qword_1EAA9EAD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EAD0);
  }
  return result;
}

unint64_t sub_1DC8CCFC4()
{
  unint64_t result = qword_1EAA9EAD8;
  if (!qword_1EAA9EAD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EAD8);
  }
  return result;
}

unint64_t sub_1DC8CD014()
{
  unint64_t result = qword_1EAA9EAE0;
  if (!qword_1EAA9EAE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EAE0);
  }
  return result;
}

unint64_t sub_1DC8CD064()
{
  unint64_t result = qword_1EAA9EAE8;
  if (!qword_1EAA9EAE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EAE8);
  }
  return result;
}

unint64_t sub_1DC8CD0B4()
{
  unint64_t result = qword_1EAA9EAF0;
  if (!qword_1EAA9EAF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EAF0);
  }
  return result;
}

unint64_t sub_1DC8CD104()
{
  unint64_t result = qword_1EAA9EAF8;
  if (!qword_1EAA9EAF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EAF8);
  }
  return result;
}

unint64_t sub_1DC8CD154()
{
  unint64_t result = qword_1EAA9EB00;
  if (!qword_1EAA9EB00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EB00);
  }
  return result;
}

unint64_t sub_1DC8CD1A4()
{
  unint64_t result = qword_1EAA9EB08;
  if (!qword_1EAA9EB08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EB08);
  }
  return result;
}

unint64_t sub_1DC8CD1F4()
{
  unint64_t result = qword_1EAA9EB10;
  if (!qword_1EAA9EB10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EB10);
  }
  return result;
}

unint64_t sub_1DC8CD244()
{
  unint64_t result = qword_1EAA9EB18;
  if (!qword_1EAA9EB18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EB18);
  }
  return result;
}

unint64_t sub_1DC8CD294()
{
  unint64_t result = qword_1EAA9EB20;
  if (!qword_1EAA9EB20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EB20);
  }
  return result;
}

unint64_t sub_1DC8CD2E0()
{
  unint64_t result = qword_1EAA9EB30;
  if (!qword_1EAA9EB30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EB30);
  }
  return result;
}

unint64_t sub_1DC8CD32C()
{
  unint64_t result = qword_1EAA9EB38;
  if (!qword_1EAA9EB38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EB38);
  }
  return result;
}

unint64_t sub_1DC8CD378()
{
  unint64_t result = qword_1EAA9EB48;
  if (!qword_1EAA9EB48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EB48);
  }
  return result;
}

unsigned char *_s13SoundAnalysis14SoundDetectionV7RequestV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DC8CD490);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ComposedDetector.CodingKeys()
{
  return &type metadata for ComposedDetector.CodingKeys;
}

unint64_t sub_1DC8CD4CC()
{
  unint64_t result = qword_1EAA9EB50;
  if (!qword_1EAA9EB50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EB50);
  }
  return result;
}

unint64_t sub_1DC8CD51C()
{
  unint64_t result = qword_1EAA9EB58;
  if (!qword_1EAA9EB58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EB58);
  }
  return result;
}

unint64_t sub_1DC8CD56C()
{
  unint64_t result = qword_1EAA9EB60;
  if (!qword_1EAA9EB60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EB60);
  }
  return result;
}

void sub_1DC8CD5C4()
{
  sub_1DCA7372C();
}

uint64_t sub_1DC8CD5E8()
{
  return v0;
}

__n128 sub_1DC8CD620()
{
  return v0[5];
}

void sub_1DC8CD670()
{
  *(void *)(v0 + 16) = v1;
  *(void *)(v0 + 8 * v3 + 32) = v2;
}

uint64_t sub_1DC8CD69C()
{
  return v0;
}

uint64_t sub_1DC8CD6B4()
{
  return sub_1DCB879B8();
}

uint64_t sub_1DC8CD6D8()
{
  return sub_1DCB879B8();
}

uint64_t sub_1DC8CD6FC()
{
  return v0;
}

uint64_t sub_1DC8CD718(uint64_t a1, uint64_t a2)
{
  sub_1DC882BC4(a1, a2, 0);
  return v2;
}

uint64_t sub_1DC8CD73C()
{
  return v0 - 144;
}

__n128 sub_1DC8CD768@<Q0>(uint64_t a1@<X8>)
{
  return *(__n128 *)(v1 + a1);
}

id sub_1DC8CD790@<X0>(void *a1@<X8>)
{
  return a1;
}

uint64_t sub_1DC8CD7B4()
{
  return v0;
}

uint64_t sub_1DC8CD7C8()
{
  return v0;
}

uint64_t sub_1DC8CD7D4()
{
  return v0;
}

uint64_t sub_1DC8CD7E4()
{
  return sub_1DCB88D58();
}

uint64_t sub_1DC8CD80C()
{
  return 0x6E656469666E6F43;
}

uint64_t sub_1DC8CD828()
{
  return swift_deallocPartialClassInstance();
}

uint64_t sub_1DC8CD840()
{
  return v0;
}

uint64_t sub_1DC8CD850()
{
  return v0;
}

uint64_t sub_1DC8CD878()
{
  return v0;
}

uint64_t sub_1DC8CD89C()
{
  return 0x6465746365746544;
}

uint64_t sub_1DC8CD8B4()
{
  return v0;
}

uint64_t sub_1DC8CD8D4()
{
  return sub_1DCB89018();
}

uint64_t sub_1DC8CD8F0()
{
  return sub_1DCB879B8();
}

uint64_t sub_1DC8CD914()
{
  int v4 = *(_DWORD *)(v2 - 72);
  return sub_1DC882BC4(v1, v0, v4);
}

uint64_t sub_1DC8CD934()
{
  return v0;
}

uint64_t sub_1DC8CD948()
{
  return v0 - 160;
}

uint64_t sub_1DC8CD95C()
{
  return v0;
}

uint64_t sub_1DC8CD968()
{
  return v0;
}

uint64_t sub_1DC8CD9A8()
{
  return v0;
}

void sub_1DC8CD9B4()
{
  *(unsigned char *)(v0 - 65) = 1;
}

unint64_t sub_1DC8CD9C0()
{
  return 0xD000000000000017;
}

uint64_t sub_1DC8CD9FC()
{
  return v0;
}

uint64_t sub_1DC8CDA08()
{
  return v0;
}

uint64_t sub_1DC8CDA28(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  sub_1DC920F30(a1, a2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1DC8CDA78(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x80000001DCB918F0)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = sub_1DCB89018();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

unint64_t sub_1DC8CDB00()
{
  return 0xD000000000000012;
}

uint64_t sub_1DC8CDB1C(void *a1)
{
  uint64_t v2 = sub_1DC87E988(&qword_1EAA9EB98);
  sub_1DC89D4E0();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  sub_1DC8A22D0();
  uint64_t v8 = v7 - v6;
  sub_1DC881A8C(a1, a1[3]);
  sub_1DC8CE1AC();
  sub_1DCB892B8();
  sub_1DC87E988(&qword_1EAA9EB88);
  sub_1DC8CE1F8(&qword_1EAA9EBA0);
  sub_1DCB88F18();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v8, v2);
}

uint64_t sub_1DC8CDC68(uint64_t a1)
{
  sub_1DCB891A8();
  swift_bridgeObjectRetain();
  sub_1DC920F30((uint64_t)v3, a1);
  swift_bridgeObjectRelease();
  return sub_1DCB891F8();
}

void *sub_1DC8CDCC0(void *a1)
{
  uint64_t v3 = sub_1DC87E988(&qword_1EAA9EB78);
  sub_1DC89D4E0();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  sub_1DC8A22D0();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = sub_1DC881A8C(a1, a1[3]);
  sub_1DC8CE1AC();
  sub_1DCB89298();
  if (v1)
  {
    sub_1DC8818D0((uint64_t)a1);
  }
  else
  {
    sub_1DC87E988(&qword_1EAA9EB88);
    sub_1DC8CE1F8(&qword_1EAA9EB90);
    sub_1DCB88DF8();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
    uint64_t v10 = v12;
    sub_1DC8818D0((uint64_t)a1);
  }
  return v10;
}

uint64_t sub_1DC8CDE38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1DC8CDA78(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1DC8CDE64(uint64_t a1)
{
  unint64_t v2 = sub_1DC8CE1AC();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC8CDEA0(uint64_t a1)
{
  unint64_t v2 = sub_1DC8CE1AC();

  return MEMORY[0x1F41862B0](a1, v2);
}

void *sub_1DC8CDEDC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1DC8CDCC0(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1DC8CDF08(void *a1)
{
  return sub_1DC8CDB1C(a1);
}

uint64_t sub_1DC8CDF24()
{
  return sub_1DC8CDC68(*v0);
}

uint64_t sub_1DC8CDF2C(uint64_t a1)
{
  return sub_1DC8CDA28(a1, *v1);
}

uint64_t sub_1DC8CDF34()
{
  uint64_t v1 = *v0;
  sub_1DCB891A8();
  swift_bridgeObjectRetain();
  sub_1DC920F30((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_1DCB891F8();
}

uint64_t sub_1DC8CDF88(void *a1, void *a2)
{
  return sub_1DC8CDA74(*a1, *a2);
}

uint64_t sub_1DC8CDF94()
{
  uint64_t v1 = sub_1DC87E988(&qword_1EAA9EBA8);
  sub_1DC89D4E0();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v4);
  sub_1DC8A22D0();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = *(void *)(v0 + 16);
  uint64_t v9 = (void *)swift_allocObject();
  id v9[2] = sub_1DC88CEC8;
  _OWORD v9[3] = v0;
  v9[4] = v8;
  swift_retain();
  swift_retain();
  sub_1DC87E988(&qword_1EAA9EBB0);
  sub_1DC88CF34(&qword_1EAA9EBB8, &qword_1EAA9EBB0);
  sub_1DCB87378();
  sub_1DC88CF34(&qword_1EAA9EBC0, &qword_1EAA9EBA8);
  uint64_t v10 = sub_1DCB873A8();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v1);
  return v10;
}

uint64_t type metadata accessor for SharedHIDReportStream.Instance()
{
  return self;
}

ValueMetadata *type metadata accessor for SharedHIDReportStream()
{
  return &type metadata for SharedHIDReportStream;
}

ValueMetadata *type metadata accessor for SharedHIDReportStream.Configuration()
{
  return &type metadata for SharedHIDReportStream.Configuration;
}

unint64_t sub_1DC8CE160()
{
  unint64_t result = qword_1EAA9EB70;
  if (!qword_1EAA9EB70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EB70);
  }
  return result;
}

unint64_t sub_1DC8CE1AC()
{
  unint64_t result = qword_1EAA9EB80;
  if (!qword_1EAA9EB80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EB80);
  }
  return result;
}

uint64_t sub_1DC8CE1F8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1DC8863A8(&qword_1EAA9EB88);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1DC8CE260(void *a1@<X8>)
{
  sub_1DCB06EC0();
  *a1 = v2;
}

uint64_t sub_1DC8CE28C()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void sub_1DC8CE2CC(void *a1@<X8>)
{
}

unsigned char *storeEnumTagSinglePayload for SharedHIDReportStream.Configuration.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1DC8CE374);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SharedHIDReportStream.Configuration.CodingKeys()
{
  return &type metadata for SharedHIDReportStream.Configuration.CodingKeys;
}

unint64_t sub_1DC8CE3B0()
{
  unint64_t result = qword_1EAA9EBC8;
  if (!qword_1EAA9EBC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EBC8);
  }
  return result;
}

unint64_t sub_1DC8CE400()
{
  unint64_t result = qword_1EAA9EBD0;
  if (!qword_1EAA9EBD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EBD0);
  }
  return result;
}

unint64_t sub_1DC8CE450()
{
  unint64_t result = qword_1EAA9EBD8;
  if (!qword_1EAA9EBD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EBD8);
  }
  return result;
}

uint64_t sub_1DC8CE49C()
{
  return 1;
}

uint64_t sub_1DC8CE4BC()
{
  return 0;
}

uint64_t sub_1DC8CE4C8(void *a1)
{
  uint64_t v2 = sub_1DC87E988(&qword_1EAA9ECB0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1DC881A8C(a1, a1[3]);
  sub_1DC8CF594();
  sub_1DCB892B8();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1DC8CE5D8()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC8CE610(uint64_t a1)
{
  return sub_1DC8818D0(a1);
}

uint64_t sub_1DC8CE63C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1DC8CE49C();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1DC8CE668(uint64_t a1)
{
  unint64_t v2 = sub_1DC8CF594();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC8CE6A4(uint64_t a1)
{
  unint64_t v2 = sub_1DC8CF594();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1DC8CE6E4()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC8CE718(uint64_t a1)
{
  return sub_1DC8CE610(a1);
}

uint64_t sub_1DC8CE730(void *a1)
{
  return sub_1DC8CE4C8(a1);
}

uint64_t sub_1DC8CE748()
{
  type metadata accessor for SNDistanceEstimator();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  return result;
}

id sub_1DC8CE788()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_init);
}

id SNEstimateSpeechDistanceRequest.copy(with:)@<X0>(void *a1@<X8>)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v4.receiver = objc_allocWithZone(ObjectType);
  v4.super_class = ObjectType;
  id result = objc_msgSendSuper2(&v4, sel_init);
  a1[3] = ObjectType;
  *a1 = result;
  return result;
}

uint64_t SNEstimateSpeechDistanceRequest.hash.getter()
{
  return sub_1DCB891F8();
}

uint64_t SNEstimateSpeechDistanceRequest.isEqual(_:)(uint64_t a1)
{
  swift_getObjectType();
  sub_1DC87E920(a1, (uint64_t)&v7);
  if (!v8) {
    return 0;
  }
  sub_1DC87E9CC(&v7, v6);
  sub_1DC87E9DC((uint64_t)v6, (uint64_t)v5);
  if (swift_dynamicCast() && v4)
  {

    uint64_t v2 = 1;
  }
  else
  {
    uint64_t v2 = 0;
  }
  sub_1DC8818D0((uint64_t)v6);
  return v2;
}

id SNEstimateSpeechDistanceRequest.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return SNEstimateSpeechDistanceRequest.init(coder:)(a1);
}

id SNEstimateSpeechDistanceRequest.init(coder:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v5 = v2;
  uint64_t v6 = sub_1DC8CF80C();
  sub_1DC87D2F0(v6, v7, (uint64_t)a1);

  v10.receiver = objc_allocWithZone(ObjectType);
  v10.super_class = ObjectType;
  id v8 = objc_msgSendSuper2(&v10, sel_init);

  swift_getObjectType();
  sub_1DC8CF7EC();
  return v8;
}

Swift::Void __swiftcall SNEstimateSpeechDistanceRequest.encode(with:)(NSCoder with)
{
  uint64_t v2 = sub_1DC8CF80C();
  sub_1DC87B158(v2, v3, v1);
}

uint64_t static SNEstimateSpeechDistanceRequest.supportsSecureCoding.getter()
{
  return 1;
}

id SNEstimateSpeechDistanceRequest.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

_UNKNOWN **sub_1DC8CEC54()
{
  id result = (_UNKNOWN **)sub_1DC8CE748();
  if (v0) {
    return &off_1F37EA6C8;
  }
  return result;
}

uint64_t sub_1DC8CEC80()
{
  sub_1DC87E988((uint64_t *)&unk_1EAA9C700);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DCBB9440;
  *(void *)(inited + 32) = sub_1DC8CF7B4();
  *(void *)(inited + 40) = sub_1DC8CF7B4();
  *(void *)(inited + 48) = sub_1DC8CF7B4();
  uint64_t v1 = sub_1DCAE854C(inited);
  swift_setDeallocating();
  sub_1DC937718();
  id v2 = objc_allocWithZone((Class)type metadata accessor for SNDSPConfiguration());
  swift_bridgeObjectRetain();
  id v3 = sub_1DC9B3224(v1);
  uint64_t v4 = type metadata accessor for SNDSPGraphLoader();
  uint64_t v5 = sub_1DC9B1474((uint64_t)v3);
  if (v5)
  {
    uint64_t v4 = v5;
    sub_1DCB5EC24(v5);
    sub_1DCB5F1F8(v4);
  }
  else
  {
    sub_1DC884E74();
    swift_allocError();
    *uint64_t v6 = 0;
    swift_willThrow();
  }

  return v4;
}

CMTimeValue sub_1DC8CEDDC(void *a1, int64_t a2, void (*a3)(void))
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SNSpeechDistanceResult()), sel_init);
  uint64_t v8 = self;
  v27.start.CMTimeValue value = 0;
  id v9 = sub_1DCB6C41C(v8, a1, (uint64_t)&v27);
  CMTimeValue value = v27.start.value;
  if (!v9)
  {
    id v19 = (id)v27.start.value;
    sub_1DCB86898();

    swift_willThrow();
    uint64_t v11 = v7;
    goto LABEL_8;
  }
  uint64_t v11 = v9;
  id v12 = (id)v27.start.value;
  int64_t v13 = sub_1DCB89168();
  int32_t v14 = sub_1DCB5C99C((uint64_t)a1);
  if (v14 < 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  CMTimeMake(&v27.start, v13, v14);
  CMTimeValue value = v27.start.value;
  uint64_t v15 = *(void *)&v27.start.timescale;
  CMTimeEpoch epoch = v27.start.epoch;
  int32_t v17 = sub_1DCB5C99C((uint64_t)a1);
  if (v17 < 0) {
    goto LABEL_11;
  }
  CMTimeMake(&v27.start, a2, v17);
  CMTime duration = v27.start;
  start.CMTimeValue value = value;
  *(void *)&start.CMTimeScale timescale = v15;
  start.CMTimeEpoch epoch = epoch;
  CMTimeRangeMake(&v27, &start, &duration);
  CMTimeRange v35 = v27;
  a3();
  if (v3)
  {

LABEL_8:
    return value;
  }
  uint64_t v18 = sub_1DCB883C8();
  ((void (*)(uint64_t))a3)(v18);
  sub_1DCB883D8();
  uint64_t v21 = v34;
  unint64_t v22 = &v7[OBJC_IVAR___SNSpeechDistanceResult_impl];
  *(void *)unint64_t v22 = v30;
  *((void *)v22 + 1) = v31;
  *((_OWORD *)v22 + 1) = v32;
  *((void *)v22 + 4) = v33;
  *((void *)v22 + 5) = v21;
  sub_1DC8CF7D0((uint64_t)a1, 4);
  *((double *)v22 + 6) = v23;
  sub_1DC8CF7D0((uint64_t)a1, 5);
  *((double *)v22 + 7) = v24;
  sub_1DC8CF7D0((uint64_t)a1, 6);
  *((double *)v22 + 8) = v25;
  sub_1DC87E988(&qword_1EAA9C720);
  CMTimeValue v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_1DCBB8670;
  *(void *)(v26 + 32) = v7;
  v27.start.CMTimeValue value = v26;
  sub_1DCB87C68();
  CMTimeValue value = v27.start.value;

  return value;
}

id sub_1DC8CF0EC()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1) {
    return v1;
  }
  sub_1DC8CF4E8();
  swift_allocError();
  return (id)swift_willThrow();
}

void sub_1DC8CF148(int a1, double a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = *v2;
  uint64_t v8 = sub_1DC87E988(qword_1EAA9CBC0);
  MEMORY[0x1F4188790](v8 - 8);
  objc_super v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SNFileUtils();
  sub_1DCB3B520((uint64_t)v10);
  uint64_t v11 = sub_1DCB86A18();
  if (_s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwet_0((uint64_t)v10, 1, v11) == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v12 = sub_1DCB869D8();
    uint64_t v14 = v13;
    (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
    uint64_t v15 = swift_allocObject();
    *(double *)(v15 + 16) = a2;
    *(_DWORD *)(v15 + 24) = a1;
    *(void *)(v15 + 32) = v12;
    *(void *)(v15 + 40) = v14;
    *(void *)(v15 + 48) = v7;
    uint64_t v16 = sub_1DC8A12D0();
    swift_release();
    if (!v3)
    {
      int32_t v17 = (void *)v4[2];
      v4[2] = v16;
    }
  }
}

uint64_t sub_1DC8CF2F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1DC8CEC80();
  if (!v1) {
    *a1 = result;
  }
  return result;
}

id sub_1DC8CF320()
{
  id result = sub_1DC8CF0EC();
  if (!v0)
  {
    id v2 = result;
    uint64_t v3 = (void *)sub_1DCB87908();
    id v4 = sub_1DCB60550(v2, v3);

    return v4;
  }
  return result;
}

uint64_t sub_1DC8CF390()
{
  return swift_deallocClassInstance();
}

CMTimeValue sub_1DC8CF3C8(void *a1, int64_t a2, void (*a3)(void))
{
  return sub_1DC8CEDDC(a1, a2, a3);
}

id sub_1DC8CF3E0()
{
  return sub_1DC8CF320();
}

void sub_1DC8CF3F8(int a1, double a2)
{
}

id sub_1DC8CF410()
{
  return sub_1DC8CF0EC();
}

uint64_t type metadata accessor for SNEstimateSpeechDistanceRequest()
{
  return self;
}

uint64_t method lookup function for SNEstimateSpeechDistanceRequest(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SNEstimateSpeechDistanceRequest);
}

uint64_t type metadata accessor for SNDistanceEstimator()
{
  return self;
}

ValueMetadata *type metadata accessor for EstimateSpeechDistanceRequest()
{
  return &type metadata for EstimateSpeechDistanceRequest;
}

unint64_t sub_1DC8CF49C()
{
  unint64_t result = qword_1EAA9ECA0;
  if (!qword_1EAA9ECA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9ECA0);
  }
  return result;
}

unint64_t sub_1DC8CF4E8()
{
  unint64_t result = qword_1EAA9ECA8;
  if (!qword_1EAA9ECA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9ECA8);
  }
  return result;
}

uint64_t sub_1DC8CF534()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1DC8CF56C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1DC8CF2F4(a1);
}

unint64_t sub_1DC8CF594()
{
  unint64_t result = qword_1EAA9ECB8;
  if (!qword_1EAA9ECB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9ECB8);
  }
  return result;
}

ValueMetadata *type metadata accessor for EstimateSpeechDistanceRequest.CodingKeys()
{
  return &type metadata for EstimateSpeechDistanceRequest.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for SNDistanceEstimator.DomainError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1DC8CF68CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SNDistanceEstimator.DomainError()
{
  return &type metadata for SNDistanceEstimator.DomainError;
}

unint64_t sub_1DC8CF6C8()
{
  unint64_t result = qword_1EAA9ECC0;
  if (!qword_1EAA9ECC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9ECC0);
  }
  return result;
}

unint64_t sub_1DC8CF718()
{
  unint64_t result = qword_1EAA9ECC8;
  if (!qword_1EAA9ECC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9ECC8);
  }
  return result;
}

unint64_t sub_1DC8CF768()
{
  unint64_t result = qword_1EAA9ECD0;
  if (!qword_1EAA9ECD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9ECD0);
  }
  return result;
}

uint64_t sub_1DC8CF7B4()
{
  return sub_1DCB877D8();
}

uint64_t sub_1DC8CF7D0(uint64_t a1, uint64_t a2)
{
  return sub_1DCB2FD9C(a1, a2, 0, 0);
}

uint64_t sub_1DC8CF7EC()
{
  return swift_deallocPartialClassInstance();
}

uint64_t sub_1DC8CF80C()
{
  return 1819307369;
}

void sub_1DC8CF820(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = a1;
    uint64_t v30 = MEMORY[0x1E4FBC860];
    sub_1DC8981DC();
    uint64_t v6 = sub_1DC9A4ACC(v5);
    if ((v6 & 0x8000000000000000) == 0)
    {
      unint64_t v8 = v6;
      if (v6 < 1 << *(unsigned char *)(v5 + 32))
      {
        uint64_t v9 = v5 + 64;
        uint64_t v25 = v5 + 64;
        uint64_t v26 = v5;
        while ((*(void *)(v9 + 8 * (v8 >> 6)) & (1 << v8)) != 0)
        {
          if (v7 != *(_DWORD *)(v5 + 36)) {
            goto LABEL_20;
          }
          int v29 = v7;
          uint64_t v28 = v4;
          objc_super v10 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v8);
          uint64_t v11 = *v10;
          uint64_t v12 = v10[1];
          uint64_t v13 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v8);
          uint64_t v14 = *v13;
          uint64_t v15 = v13[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v16 = a2(v11, v12, v14, v15);
          if (v3)
          {
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return;
          }
          uint64_t v19 = v16;
          uint64_t v20 = v17;
          uint64_t v21 = v18;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v22 = *(void *)(v30 + 16);
          if (v22 >= *(void *)(v30 + 24) >> 1) {
            sub_1DC8981DC();
          }
          *(void *)(v30 + 16) = v22 + 1;
          float v23 = (void *)(v30 + 24 * v22);
          v23[4] = v19;
          v23[5] = v20;
          v23[6] = v21;
          uint64_t v5 = v26;
          if ((uint64_t)v8 >= -(-1 << *(unsigned char *)(v26 + 32))) {
            goto LABEL_21;
          }
          uint64_t v9 = v25;
          if ((*(void *)(v25 + 8 * (v8 >> 6)) & (1 << v8)) == 0) {
            goto LABEL_22;
          }
          if (v29 != *(_DWORD *)(v26 + 36)) {
            goto LABEL_23;
          }
          uint64_t v24 = sub_1DCB88948();
          uint64_t v4 = v28 - 1;
          if (v28 == 1) {
            return;
          }
          unint64_t v8 = v24;
          uint64_t v3 = 0;
          if ((v24 & 0x8000000000000000) == 0)
          {
            int v7 = *(_DWORD *)(v26 + 36);
            if (v24 < 1 << *(unsigned char *)(v26 + 32)) {
              continue;
            }
          }
          goto LABEL_24;
        }
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
      }
    }
LABEL_24:
    __break(1u);
  }
}

uint64_t sub_1DC8CFA6C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_1DCB3077C(a2);
  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v35 = sub_1DCB3077C(v5);
  uint64_t v29 = *(void *)(a2 + 16);
  if (!v29)
  {
    uint64_t v25 = MEMORY[0x1E4FBC868];
LABEL_31:
    uint64_t v26 = *(void *)(v4 + 16);
    swift_bridgeObjectRelease();
    if (v26)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v27 = *(void *)(v35 + 16);
      swift_bridgeObjectRelease();
      if (!v27) {
        return v25;
      }
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v28 = a2 + 32;
  swift_bridgeObjectRetain();
  uint64_t v6 = 0;
  uint64_t v30 = MEMORY[0x1E4FBC868];
  while (2)
  {
    int v7 = (uint64_t *)(v28 + 16 * v6);
    uint64_t v9 = *v7;
    uint64_t v8 = v7[1];
    uint64_t v31 = v6 + 1;
    uint64_t v10 = v35 + 56;
    uint64_t v11 = 1 << *(unsigned char *)(v35 + 32);
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v13 = v12 & *(void *)(v35 + 56);
    int64_t v14 = (unint64_t)(v11 + 63) >> 6;
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    int64_t v16 = 0;
    while (v13)
    {
      unint64_t v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v18 = v17 | (v16 << 6);
LABEL_23:
      unint64_t v22 = (uint64_t *)(*(void *)(v35 + 48) + 16 * v18);
      uint64_t v24 = *v22;
      uint64_t v23 = v22[1];
      swift_bridgeObjectRetain();
      if (a3(v9, v8, v24, v23))
      {
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v32 = v24;
        uint64_t v33 = v23;
      }
      else
      {
        uint64_t result = swift_bridgeObjectRelease();
      }
    }
    int64_t v19 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v14)
    {
LABEL_26:
      swift_release();
      if (v33)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_isUniquelyReferenced_nonNull_native();
        sub_1DC8BFDC8();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1DC8D01E0(v9, v8);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1DC8D01E0(v32, v33);
        swift_bridgeObjectRelease();
      }
      uint64_t v6 = v31;
      swift_bridgeObjectRelease();
      if (v31 == v29)
      {
        swift_bridgeObjectRelease();
        uint64_t v25 = v30;
        goto LABEL_31;
      }
      continue;
    }
    break;
  }
  unint64_t v20 = *(void *)(v10 + 8 * v19);
  ++v16;
  if (v20) {
    goto LABEL_22;
  }
  int64_t v16 = v19 + 1;
  if (v19 + 1 >= v14) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v10 + 8 * v16);
  if (v20) {
    goto LABEL_22;
  }
  int64_t v16 = v19 + 2;
  if (v19 + 2 >= v14) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v10 + 8 * v16);
  if (v20)
  {
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v16 << 6);
    goto LABEL_23;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v14) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v10 + 8 * v21);
  if (v20)
  {
    int64_t v16 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v16 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v16 >= v14) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v10 + 8 * v16);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1DC8CFD8C(void *a1, void *a2)
{
  return sub_1DC8CFDA4(a1, a2, (SEL *)&selRef_inputDescriptionsByName);
}

uint64_t sub_1DC8CFD98(void *a1, void *a2)
{
  return sub_1DC8CFDA4(a1, a2, (SEL *)&selRef_outputDescriptionsByName);
}

uint64_t sub_1DC8CFDA4(void *a1, void *a2, SEL *a3)
{
  id v5 = [a1 *a3];
  sub_1DC8CFEF4();
  sub_1DCB877B8();

  id v6 = [a2 *a3];
  sub_1DCB877B8();

  swift_bridgeObjectRetain();
  sub_1DCB0F7E4();
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1DCB0F7E4();
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  if (*(void *)(v10 + 16) == 1) {
    uint64_t v11 = _s13SoundAnalysis17_SNClassificationC20supportsSecureCodingSbvgZ_0;
  }
  else {
    uint64_t v11 = sub_1DC8CFD88;
  }
  uint64_t v12 = sub_1DC8CFA6C(v8, v10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v12;
}

unint64_t sub_1DC8CFEF4()
{
  unint64_t result = qword_1EAA9C680;
  if (!qword_1EAA9C680)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EAA9C680);
  }
  return result;
}

void sub_1DC8CFF34(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1DC8CFF60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = (void *)sub_1DCB87908();
  id v8 = objc_msgSend(a5, sel_featureValueForName_, v7);

  if (v8)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    type metadata accessor for SNError();
    sub_1DCA14B2C(0xD000000000000017, 0x80000001DCB90E90, 2, 0, 0xD000000000000038, 0x80000001DCB91950);
    swift_willThrow();
  }
  return a3;
}

void sub_1DC8D0040(uint64_t a1, uint64_t a2)
{
}

void sub_1DC8D006C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  sub_1DC8CF820(a2, a3);
  if (!v3)
  {
    sub_1DCAA7EF4(v4);
    sub_1DC9615EC();
    swift_bridgeObjectRelease();
    id v5 = objc_allocWithZone(MEMORY[0x1E4F1E930]);
    sub_1DC99F66C();
  }
}

uint64_t sub_1DC8D00F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = (void *)sub_1DCB87908();
  id v8 = objc_msgSend(a5, sel_featureValueForName_, v7);

  if (v8)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    type metadata accessor for SNError();
    sub_1DCA14B2C(0xD000000000000017, 0x80000001DCB90E90, 2, 0, 0xD000000000000038, 0x80000001DCB91950);
    swift_willThrow();
  }
  return a1;
}

uint64_t sub_1DC8D01E0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  sub_1DCB891A8();
  swift_bridgeObjectRetain();
  sub_1DCB879B8();
  uint64_t v6 = sub_1DCB891F8();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  uint64_t v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (sub_1DCB89018() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      int64_t v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (sub_1DCB89018() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1DCB345F8();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  sub_1DC8D0370(v8);
  *uint64_t v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

unint64_t sub_1DC8D0370(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = sub_1DCB88938();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        sub_1DCB891A8();
        swift_bridgeObjectRetain();
        sub_1DCB879B8();
        uint64_t v10 = sub_1DCB891F8();
        swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 >= v9 && v2 >= (uint64_t)v11)
          {
LABEL_15:
            uint64_t v14 = *(void *)(v3 + 48);
            uint64_t v15 = (_OWORD *)(v14 + 16 * v2);
            int64_t v16 = (_OWORD *)(v14 + 16 * v6);
            BOOL v17 = v2 != v6 || v15 >= v16 + 1;
            int64_t v2 = v6;
            if (v17)
            {
              *uint64_t v15 = *v16;
              int64_t v2 = v6;
            }
          }
        }
        else if (v11 >= v9 || v2 >= (uint64_t)v11)
        {
          goto LABEL_15;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    unint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v18 = *(void *)(v3 + 16);
  BOOL v19 = __OFSUB__(v18, 1);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_1DC8D052C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1DC8D00F8(a1, a2, a3, a4, *(void **)(v4 + 16));
}

uint64_t sub_1DC8D0548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1DC8CFF60(a1, a2, a3, a4, *(void **)(v4 + 16));
}

uint64_t sub_1DC8D0564(void *a1)
{
  uint64_t v2 = sub_1DC87E988(&qword_1EAA9ECE8);
  sub_1DC89D4E0();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1DC881A8C(a1, a1[3]);
  sub_1DC8D08FC();
  sub_1DCB892B8();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v2);
}

uint64_t sub_1DC8D064C(uint64_t a1)
{
  unint64_t v2 = sub_1DC8D08FC();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC8D0688(uint64_t a1)
{
  unint64_t v2 = sub_1DC8D08FC();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1DC8D06C4(void *a1)
{
  return sub_1DC8D0564(a1);
}

uint64_t sub_1DC8D06DC()
{
  uint64_t v1 = sub_1DC87E988(&qword_1EAA9ECF8);
  sub_1DC89D4E0();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v8 = (void *)swift_allocObject();
  _OWORD v8[2] = sub_1DC88CEC8;
  v8[3] = v0;
  v8[4] = v7;
  swift_retain();
  swift_retain();
  sub_1DC87E988(&qword_1EAA9ED00);
  sub_1DC88CF34(&qword_1EAA9ED08, &qword_1EAA9ED00);
  sub_1DCB87378();
  sub_1DC88CF34(&qword_1EAA9ED10, &qword_1EAA9ECF8);
  uint64_t v9 = sub_1DCB873A8();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v1);
  return v9;
}

uint64_t type metadata accessor for SharedAOPReportStream.Instance()
{
  return self;
}

ValueMetadata *type metadata accessor for SharedAOPReportStream()
{
  return &type metadata for SharedAOPReportStream;
}

ValueMetadata *type metadata accessor for SharedAOPReportStream.Configuration()
{
  return &type metadata for SharedAOPReportStream.Configuration;
}

unint64_t sub_1DC8D08B0()
{
  unint64_t result = qword_1EAA9ECE0;
  if (!qword_1EAA9ECE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9ECE0);
  }
  return result;
}

unint64_t sub_1DC8D08FC()
{
  unint64_t result = qword_1EAA9ECF0;
  if (!qword_1EAA9ECF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9ECF0);
  }
  return result;
}

void sub_1DC8D0948(void *a1@<X8>)
{
  sub_1DCB0703C();
  *a1 = v2;
}

uint64_t sub_1DC8D0974()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void sub_1DC8D09B4(void *a1@<X8>)
{
}

ValueMetadata *type metadata accessor for SharedAOPReportStream.Configuration.CodingKeys()
{
  return &type metadata for SharedAOPReportStream.Configuration.CodingKeys;
}

unint64_t sub_1DC8D09D4()
{
  unint64_t result = qword_1EAA9ED18;
  if (!qword_1EAA9ED18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9ED18);
  }
  return result;
}

unint64_t sub_1DC8D0A24()
{
  unint64_t result = qword_1EAA9ED20;
  if (!qword_1EAA9ED20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9ED20);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for OptionalUtils.DomainError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DC8D0B3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OptionalUtils.DomainError()
{
  return &type metadata for OptionalUtils.DomainError;
}

unint64_t sub_1DC8D0B78()
{
  unint64_t result = qword_1EAA9ED28;
  if (!qword_1EAA9ED28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9ED28);
  }
  return result;
}

uint64_t sub_1DC8D0BC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_1DCB88718();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v12 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v12 - v8, a1, v6);
  if (_s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwet_0((uint64_t)v9, 1, a2) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(a2 - 8) + 32))(a3, v9, a2);
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_1DC884E74();
  swift_allocError();
  *uint64_t v10 = 0;
  return swift_willThrow();
}

uint64_t sub_1DC8D0D38()
{
  return sub_1DCB891B8();
}

BOOL sub_1DC8D0D64(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1DC8D0D78(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x5474736575716572 && a2 == 0xEB00000000657079)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_1DCB89018();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_1DC8D0E18()
{
  return 0x5474736575716572;
}

void sub_1DC8D0E38()
{
  sub_1DC88D6B0();
  uint64_t v1 = v0;
  uint64_t v2 = sub_1DC87E988(&qword_1EAA9EE18);
  sub_1DC89D4E0();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  sub_1DC8A22D0();
  uint64_t v8 = v7 - v6;
  sub_1DC881A8C(v1, v1[3]);
  sub_1DC8D4788();
  sub_1DCB892B8();
  sub_1DC87E988(&qword_1EAA9EE08);
  sub_1DC8D47D4(&qword_1EAA9EE20);
  sub_1DCB88F18();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v8, v2);
  sub_1DC88D674();
}

uint64_t sub_1DC8D0F70()
{
  return sub_1DCB891F8();
}

void sub_1DC8D0FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1DC88D6B0();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v15 = sub_1DC87E988(&qword_1EAA9EDF8);
  sub_1DC89D4E0();
  uint64_t v17 = v16;
  MEMORY[0x1F4188790](v18);
  sub_1DC8A22D0();
  uint64_t v21 = v20 - v19;
  sub_1DC8D52C0();
  sub_1DC8D4788();
  sub_1DCB89298();
  if (!v10)
  {
    sub_1DC87E988(&qword_1EAA9EE08);
    sub_1DC8D47D4(&qword_1EAA9EE10);
    sub_1DCB88DF8();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v21, v15);
    *uint64_t v14 = a10;
  }
  sub_1DC8818D0(v12);
  sub_1DC88D674();
}

uint64_t sub_1DC8D10F8()
{
  sub_1DC8D5284();
  uint64_t v0 = sub_1DCB891B8();
  sub_1DC8D5244(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10, v11);
  return AudioConfiguration.hash(into:)();
}

uint64_t sub_1DC8D1160(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2)
  {
    char v2 = *(unsigned char *)(a2 + 72);
    uint64_t v3 = *(void *)(a2 + 64);
    char v4 = *(unsigned char *)(a2 + 61);
    char v5 = *(unsigned char *)(a2 + 60);
    char v6 = *(unsigned char *)(a2 + 59);
    char v7 = *(unsigned char *)(a2 + 58);
    char v8 = *(unsigned char *)(a2 + 57);
    char v9 = *(unsigned char *)(a2 + 56);
    uint64_t v11 = *(void *)(a2 + 24);
    uint64_t v10 = *(void *)(a2 + 32);
    long long v12 = *(_OWORD *)(a2 + 8);
    char v13 = *(unsigned char *)(a1 + 72);
    uint64_t v14 = *(void *)(a1 + 64);
    char v15 = *(unsigned char *)(a1 + 61);
    char v16 = *(unsigned char *)(a1 + 60);
    char v17 = *(unsigned char *)(a1 + 59);
    char v18 = *(unsigned char *)(a1 + 58);
    char v19 = *(unsigned char *)(a1 + 57);
    char v20 = *(unsigned char *)(a1 + 56);
    uint64_t v22 = *(void *)(a1 + 24);
    uint64_t v21 = *(void *)(a1 + 32);
    long long v37 = *(_OWORD *)(a1 + 8);
    uint64_t v38 = v22;
    uint64_t v39 = v21;
    long long v40 = *(_OWORD *)(a1 + 40);
    char v41 = v20;
    char v42 = v19;
    char v43 = v18;
    char v44 = v17;
    char v45 = v16;
    char v46 = v15;
    uint64_t v47 = v14;
    char v48 = v13;
    long long v25 = v12;
    uint64_t v26 = v11;
    uint64_t v27 = v10;
    long long v28 = *(_OWORD *)(a2 + 40);
    char v29 = v9;
    char v30 = v8;
    char v31 = v7;
    char v32 = v6;
    char v33 = v5;
    char v34 = v4;
    uint64_t v35 = v3;
    char v36 = v2;
    char v23 = static AudioConfiguration.== infix(_:_:)((uint64_t)&v37, (uint64_t)&v25);
  }
  else
  {
    char v23 = 0;
  }
  return v23 & 1;
}

void sub_1DC8D1264()
{
  sub_1DC88D6B0();
  char v2 = v1;
  sub_1DC87E988(&qword_1EAA9EE78);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v3);
  sub_1DC89D988();
  sub_1DC881A8C(v2, v2[3]);
  sub_1DC8D5004();
  sub_1DCB892B8();
  sub_1DC882A04();
  sub_1DC8D530C();
  if (!v0)
  {
    sub_1DC8821D0();
    sub_1DC8D530C();
  }
  uint64_t v4 = sub_1DC8D5378();
  v5(v4);
  sub_1DC89DCC4();
  sub_1DC88D674();
}

uint64_t sub_1DC8D142C()
{
  sub_1DC8D5284();
  sub_1DCB891A8();
  uint64_t v0 = sub_1DCB891B8();
  sub_1DC8D5244(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10, v11);
  AudioConfiguration.hash(into:)();
  return sub_1DCB891F8();
}

void sub_1DC8D14A8()
{
  sub_1DC88D6B0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_1DC87E988(&qword_1EAA9EE88);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v5);
  sub_1DC8D52C0();
  sub_1DC8D5004();
  sub_1DCB89298();
  if (!v0)
  {
    sub_1DC882A50();
    sub_1DC8D52E4();
    sub_1DC8822B0();
    sub_1DC8D52E4();
    uint64_t v6 = sub_1DC8CD878();
    v7(v6);
    *(void *)uint64_t v4 = v8;
    *(_OWORD *)(v4 + 8) = v8;
    *(void *)(v4 + 24) = v9;
    *(void *)(v4 + 32) = v10;
    *(_OWORD *)(v4 + 40) = v11;
    *(unsigned char *)(v4 + 56) = v12;
    *(unsigned char *)(v4 + 57) = v13;
    *(unsigned char *)(v4 + 58) = v14;
    *(unsigned char *)(v4 + 59) = v15;
    *(unsigned char *)(v4 + 60) = v16;
    *(unsigned char *)(v4 + 61) = v17;
    *(void *)(v4 + 64) = v18;
    *(unsigned char *)(v4 + 72) = v19;
  }
  sub_1DC8818D0(v2);
  sub_1DC89DCC4();
  sub_1DC88D674();
}

uint64_t sub_1DC8D1630()
{
  return sub_1DCB891E8();
}

BOOL sub_1DC8D16E0(double *a1, double *a2)
{
  double v2 = *a1;
  uint64_t v3 = *((void *)a1 + 5);
  int v4 = *((unsigned __int8 *)a1 + 48);
  double v5 = a1[7];
  double v6 = *a2;
  int v7 = *((unsigned __int8 *)a2 + 48);
  double v8 = a2[7];
  uint64_t v14 = *((void *)a2 + 5);
  *(double *)char v15 = v2;
  *(double *)&v15[1] = a1[1];
  long long v16 = *((_OWORD *)a1 + 1);
  uint64_t v17 = *((void *)a1 + 4);
  uint64_t v18 = v3;
  *(double *)long long v11 = v6;
  *(double *)&v11[1] = a2[1];
  long long v12 = *((_OWORD *)a2 + 1);
  uint64_t v13 = *((void *)a2 + 4);
  BOOL v9 = static TimeRange.== infix(_:_:)((uint64_t)v15, (uint64_t)v11);
  BOOL result = 0;
  if (v9 && ((v4 ^ v7) & 1) == 0) {
    return v5 == v8;
  }
  return result;
}

uint64_t sub_1DC8D1790(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x676E6152656D6974 && a2 == 0xE900000000000065;
  if (v2 || (sub_1DCB89018() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6465746365746564 && a2 == 0xE800000000000000;
    if (v6 || (sub_1DCB89018() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x6E656469666E6F63 && a2 == 0xEA00000000006563)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = sub_1DCB89018();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_1DC8D18F8(char a1)
{
  if (!a1) {
    return 0x676E6152656D6974;
  }
  if (a1 == 1) {
    return 0x6465746365746564;
  }
  return 0x6E656469666E6F63;
}

void sub_1DC8D1958(void *a1)
{
  uint64_t v3 = sub_1DC87E988((uint64_t *)&unk_1EAA9EDE8);
  sub_1DC89D4E0();
  uint64_t v8 = v4;
  MEMORY[0x1F4188790](v5);
  sub_1DC89D988();
  sub_1DC881A8C(a1, a1[3]);
  sub_1DC8D473C();
  sub_1DCB892B8();
  sub_1DC89C64C();
  sub_1DCB88F18();
  if (v7)
  {
    sub_1DC88D5C8();
    v6();
  }
  else
  {
    sub_1DCB88ED8();
    sub_1DCB88EE8();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v3);
  }
  sub_1DC89DCC4();
}

uint64_t sub_1DC8D1B20()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC8D1C0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1DC87E988(&qword_1EAA9EDD0);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v5);
  sub_1DC8D52C0();
  sub_1DC8D473C();
  sub_1DCB89298();
  if (!v2)
  {
    sub_1DC89C600();
    sub_1DCB88DF8();
    sub_1DC8D5330(1);
    char v11 = sub_1DCB88DB8();
    sub_1DC8D5330(2);
    sub_1DCB88DC8();
    uint64_t v8 = v7;
    uint64_t v9 = sub_1DC8D5364();
    v10(v9);
    *(void *)a2 = v12;
    *(void *)(a2 + 8) = v13;
    *(void *)(a2 + 16) = v14;
    *(void *)(a2 + 24) = v15;
    *(void *)(a2 + 32) = v16;
    *(void *)(a2 + 40) = v17;
    *(unsigned char *)(a2 + 48) = v11 & 1;
    *(void *)(a2 + 56) = v8;
  }
  return sub_1DC8818D0(a1);
}

uint64_t sub_1DC8D1DD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1DC8D0D78(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1DC8D1E04(uint64_t a1)
{
  unint64_t v2 = sub_1DC8D4788();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC8D1E40(uint64_t a1)
{
  unint64_t v2 = sub_1DC8D4788();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1DC8D1E84()
{
  return sub_1DCB891F8();
}

void sub_1DC8D1EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1DC8D0FB0(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_1DC8D1EE0()
{
}

uint64_t sub_1DC8D1EFC(uint64_t a1)
{
  unint64_t v2 = sub_1DC8D5004();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC8D1F38(uint64_t a1)
{
  unint64_t v2 = sub_1DC8D5004();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1DC8D1F7C()
{
  return sub_1DCB891F8();
}

void sub_1DC8D2060()
{
}

void sub_1DC8D2078()
{
}

uint64_t sub_1DC8D2094()
{
  return sub_1DC8D18F8(*v0);
}

uint64_t sub_1DC8D209C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1DC8D1790(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1DC8D20C4(uint64_t a1)
{
  unint64_t v2 = sub_1DC8D473C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC8D2100(uint64_t a1)
{
  unint64_t v2 = sub_1DC8D473C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1DC8D2144()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC8D2234@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1DC8D1C0C(a1, a2);
}

void sub_1DC8D224C(void *a1)
{
}

uint64_t sub_1DC8D2268()
{
  sub_1DC8867A8();
  *(void *)(v0 + 16) = v1;
  unint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v2;
  *unint64_t v2 = v0;
  v2[1] = sub_1DC8D22F8;
  return sub_1DC977FC0();
}

uint64_t sub_1DC8D22F8(uint64_t a1)
{
  sub_1DC886774();
  uint64_t v5 = v4;
  sub_1DC8BA85C();
  *BOOL v6 = v5;
  uint64_t v7 = *v2;
  sub_1DC88678C();
  *uint64_t v8 = v7;
  _OWORD v5[4] = a1;
  v5[5] = v1;
  swift_task_dealloc();
  if (v1)
  {
    return MEMORY[0x1F4188298](sub_1DC8C67E4, 0, 0);
  }
  else
  {
    char v11 = (uint64_t (*)(void))((char *)&dword_1EAAA2718 + dword_1EAAA2718);
    uint64_t v9 = (void *)swift_task_alloc();
    v5[6] = v9;
    *uint64_t v9 = v7;
    v9[1] = sub_1DC8D2460;
    return v11();
  }
}

uint64_t sub_1DC8D2460(uint64_t a1)
{
  sub_1DC886774();
  uint64_t v5 = v4;
  sub_1DC8BA85C();
  *BOOL v6 = v5;
  uint64_t v7 = *v2;
  sub_1DC88678C();
  *uint64_t v8 = v7;
  *(void *)(v5 + 56) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v9 = sub_1DC8C6844;
  }
  else
  {
    *(void *)(v5 + 64) = a1;
    uint64_t v9 = sub_1DC8C6774;
  }
  return MEMORY[0x1F4188298](v9, 0, 0);
}

uint64_t sub_1DC8D2554(uint64_t a1, uint64_t a2)
{
  sub_1DCAD2DD0();
  v4[3] = sub_1DC87E988(&qword_1EAAA42B0);
  void v4[4] = sub_1DC8D4F90();
  v4[0] = a2;
  swift_retain();
  sub_1DCAD2E10(v4);
  swift_release();
  return sub_1DC8818D0((uint64_t)v4);
}

uint64_t sub_1DC8D25DC()
{
  sub_1DC8867A8();
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1DC8D2674;
  return sub_1DC8D2268();
}

uint64_t sub_1DC8D2674()
{
  sub_1DC8867A8();
  uint64_t v3 = v2;
  sub_1DC886774();
  uint64_t v4 = *v1;
  sub_1DC88678C();
  *uint64_t v5 = v4;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v4 + 8);
  if (!v0) {
    uint64_t v6 = v3;
  }
  return v7(v6);
}

uint64_t sub_1DC8D2744(uint64_t a1)
{
  return sub_1DC8D2554(a1, *v1);
}

uint64_t sub_1DC8D2760()
{
  sub_1DC8867A8();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1DC8D27F4;
  return sub_1DC8D25DC();
}

uint64_t sub_1DC8D27F4(uint64_t a1)
{
  sub_1DC886774();
  uint64_t v5 = v4;
  sub_1DC8BA85C();
  *uint64_t v6 = v5;
  uint64_t v7 = *v2;
  sub_1DC88678C();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (!v1) {
    **(void **)(v5 + 16) = a1;
  }
  uint64_t v9 = *(uint64_t (**)(void))(v7 + 8);
  return v9();
}

id sub_1DC8D28D0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[5];
  char v8 = *((unsigned char *)a1 + 48);
  uint64_t v9 = a1[7];
  type metadata accessor for SNSpeechUtteranceResult();
  v11[0] = v4;
  v11[1] = a1[1];
  void v11[2] = v5;
  _OWORD v11[3] = v6;
  void v11[4] = a1[4];
  v11[5] = v7;
  char v12 = v8;
  uint64_t v13 = v9;
  id result = sub_1DC9B054C((uint64_t)v11);
  *a2 = result;
  return result;
}

void sub_1DC8D296C()
{
  sub_1DC88D6B0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_1DC87E988(&qword_1EAA9ED60);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v5);
  sub_1DC89D988();
  memcpy(v15, v4, 0x49uLL);
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  char v8 = sub_1DC881A8C(v2, v6);
  memcpy(v14, &v15[8], sizeof(v14));
  uint64_t v9 = type metadata accessor for SNSpeechUtteranceResult();
  _OWORD v13[2] = v15;
  sub_1DC8D451C((uint64_t)v15);
  uint64_t v10 = sub_1DC9EB114((uint64_t)v8, (long long *)v14, v9, sub_1DC8D4500, (uint64_t)v13, v6, v9, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v0)
  {
    *(void *)uint64_t v14 = v10;
    sub_1DC87E988(&qword_1EAA9ED68);
    sub_1DC88CF34(&qword_1EAA9ED70, &qword_1EAA9ED68);
    sub_1DCB873D8();
    swift_release();
    sub_1DC88CF34(&qword_1EAA9ED78, &qword_1EAA9ED60);
    sub_1DCB873A8();
    uint64_t v11 = sub_1DC8D5378();
    v12(v11);
  }
  sub_1DC89DCC4();
  sub_1DC88D674();
}

void sub_1DC8D2B6C()
{
  sub_1DC88D6B0();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v18 = sub_1DC87E988(&qword_1EAA9E870);
  sub_1DC89D4E0();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  sub_1DC8A22D0();
  uint64_t v9 = v8 - v7;
  sub_1DC87E988(&qword_1EAA9ED80);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v10);
  sub_1DC8A22D0();
  sub_1DC87E988(&qword_1EAA9ED88);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v11);
  sub_1DC8C1FC4();
  memcpy(v20, v3, 0x49uLL);
  uint64_t v12 = swift_allocObject();
  memcpy((void *)(v12 + 16), v3, 0x49uLL);
  sub_1DC8B9960(v1, (uint64_t)v19);
  uint64_t v13 = swift_allocObject();
  sub_1DC8BA1CC(v19, v13 + 16);
  memcpy((void *)(v13 + 56), v20, 0x49uLL);
  uint64_t v14 = (void *)swift_allocObject();
  _OWORD v14[2] = sub_1DC8D4608;
  v14[3] = v12;
  v14[4] = sub_1DC8D4674;
  v14[5] = v13;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1DC8CB980;
  *(void *)(v15 + 24) = v14;
  sub_1DC8D451C((uint64_t)v20);
  sub_1DC8D451C((uint64_t)v20);
  swift_retain();
  swift_retain();
  sub_1DC87E988((uint64_t *)&unk_1EAA9ED90);
  sub_1DC88CF34((unint64_t *)&unk_1EAA9E890, (uint64_t *)&unk_1EAA9ED90);
  sub_1DCB87378();
  type metadata accessor for SNSpeechUtteranceResult();
  sub_1DC88CF34(&qword_1EAA9EDA0, &qword_1EAA9E870);
  sub_1DCB874A8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v18);
  swift_release();
  swift_release();
  sub_1DC88CF34(&qword_1EAA9EDA8, &qword_1EAA9ED80);
  sub_1DCB873D8();
  sub_1DC88D5C8();
  v16();
  sub_1DC88CF34(&qword_1EAA9EDB0, &qword_1EAA9ED88);
  sub_1DCB873A8();
  sub_1DC88D5C8();
  v17();
  sub_1DC88D674();
}

uint64_t sub_1DC8D2F50(uint64_t *a1)
{
  type metadata accessor for SNDetectSpeechUtteranceRequest();
  uint64_t v5 = *a1;
  id v2 = sub_1DC8D2FC8(&v5);
  uint64_t v3 = sub_1DC8D301C();

  return v3;
}

id sub_1DC8D2FC8(void *a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR___SNDetectSpeechUtteranceRequest_impl] = *a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

uint64_t sub_1DC8D301C()
{
  if (qword_1EAA9C6D0 != -1) {
    swift_once();
  }
  if (byte_1EAA9C6C8 == 1)
  {
    uint64_t v1 = *(void *)(v0 + OBJC_IVAR___SNDetectSpeechUtteranceRequest_impl);
    type metadata accessor for SNSpeechUtteranceDetector();
    uint64_t v2 = swift_allocObject();
    sub_1DC8D3B34(v1);
  }
  else
  {
    uint64_t v2 = type metadata accessor for SNError();
    sub_1DCA14B2C(0xD000000000000017, 0x80000001DCB90E90, 1, 0, 0xD00000000000001ALL, 0x80000001DCB91A50);
    swift_willThrow();
  }
  return v2;
}

id sub_1DC8D3128(uint64_t *a1)
{
  type metadata accessor for SNDetectSpeechUtteranceRequest();
  uint64_t v3 = *a1;
  return sub_1DC8D2FC8(&v3);
}

uint64_t sub_1DC8D3174@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_1DC881A8C(a1, v6);
  memcpy(__dst, (const void *)(a2 + 8), 0x41uLL);
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v7 + 8))(__dst, v6, v7);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

double sub_1DC8D3204@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1 + OBJC_IVAR___SNSpeechUtteranceResult_impl;
  uint64_t v3 = *(void *)(v2 + 40);
  char v4 = *(unsigned char *)(v2 + 48);
  double result = *(double *)(v2 + 56);
  *(void *)a2 = *(void *)v2;
  *(void *)(a2 + 8) = *(void *)(v2 + 8);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(v2 + 16);
  *(void *)(a2 + 32) = *(void *)(v2 + 32);
  *(void *)(a2 + 40) = v3;
  *(unsigned char *)(a2 + 48) = v4;
  *(double *)(a2 + 56) = result;
  return result;
}

double sub_1DC8D3290()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___SNDetectSpeechUtteranceRequest_impl);
  type metadata accessor for SNSpeechUtteranceDetector();
  swift_initStackObject();
  sub_1DC8D3B34(v1);
  sub_1DC8D3330();
  double v3 = v2;
  swift_release();
  return v3;
}

void sub_1DC8D3330()
{
  if (*(void *)(v0 + 16))
  {
    id v2 = sub_1DC8D3A50();
    if (!v1)
    {
      double v3 = v2;
      sub_1DC8D5348((uint64_t)v2, 8);

      id v4 = sub_1DC8D3A50();
      sub_1DCB5AE4C((uint64_t)v4, 0);

      objc_super v5 = sub_1DC8D3A50();
      sub_1DCB5B2D8(v5, 0);
    }
  }
}

id sub_1DC8D33FC()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v0[OBJC_IVAR___SNDetectSpeechUtteranceRequest_impl] = 0;
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, sel_init);
}

id sub_1DC8D3464(uint64_t a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v1[OBJC_IVAR___SNDetectSpeechUtteranceRequest_impl] = a1;
  v5.receiver = v1;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

id SNDetectSpeechUtteranceRequest.copy(with:)@<X0>(void *a1@<X8>)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR___SNDetectSpeechUtteranceRequest_impl);
  id result = sub_1DC8D2FC8(&v5);
  a1[3] = ObjectType;
  *a1 = result;
  return result;
}

uint64_t SNDetectSpeechUtteranceRequest.hash.getter()
{
  return sub_1DCB891F8();
}

BOOL SNDetectSpeechUtteranceRequest.isEqual(_:)(uint64_t a1)
{
  swift_getObjectType();
  sub_1DC87E920(a1, (uint64_t)&v10);
  if (!v11) {
    return 0;
  }
  sub_1DC87E9CC(&v10, v9);
  sub_1DC87E9DC((uint64_t)v9, (uint64_t)v8);
  if (swift_dynamicCast() && v7)
  {
    uint64_t v3 = *(void *)(v1 + OBJC_IVAR___SNDetectSpeechUtteranceRequest_impl);
    uint64_t v4 = *(void *)&v7[OBJC_IVAR___SNDetectSpeechUtteranceRequest_impl];

    BOOL v5 = v3 == v4;
  }
  else
  {
    BOOL v5 = 0;
  }
  sub_1DC8818D0((uint64_t)v9);
  return v5;
}

id SNDetectSpeechUtteranceRequest.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return SNDetectSpeechUtteranceRequest.init(coder:)(a1);
}

id SNDetectSpeechUtteranceRequest.init(coder:)(void *a1)
{
  id v3 = v1;
  sub_1DC87D31C();
  swift_getObjectType();

  id v4 = sub_1DC8D2FC8(&v6);
  swift_deallocPartialClassInstance();
  return v4;
}

Swift::Void __swiftcall SNDetectSpeechUtteranceRequest.encode(with:)(NSCoder with)
{
  sub_1DC87B1C0(*(void *)(v1 + OBJC_IVAR___SNDetectSpeechUtteranceRequest_impl), 1819307369, 0xE400000000000000, (uint64_t)with.super.isa);
}

uint64_t static SNDetectSpeechUtteranceRequest.supportsSecureCoding.getter()
{
  return 1;
}

id SNDetectSpeechUtteranceRequest.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1DC8D39CC()
{
  return sub_1DC8D301C();
}

float sub_1DC8D39E4()
{
  if (!*(void *)(v0 + 16)) {
    return 0.0;
  }
  id v3 = sub_1DC8D3A50();
  if (!v1)
  {
    id v4 = v3;
    sub_1DC8D5348((uint64_t)v3, 6);
    float v2 = v5;
  }
  return v2;
}

id sub_1DC8D3A50()
{
  id result = sub_1DC8D41C4();
  if (!v0)
  {
    float v2 = result;
    id v3 = (void *)sub_1DCB87908();
    id v4 = sub_1DCB60550(v2, v3);

    return v4;
  }
  return result;
}

uint64_t sub_1DC8D3AC4()
{
  uint64_t v2 = *(void *)(v0 + 16);
  if (v2)
  {
    id v3 = sub_1DC8D3A50();
    if (!v1)
    {
      id v4 = v3;
      sub_1DC8D5348((uint64_t)v3, 5);
      float v6 = v5;

      LOBYTE(v2) = v6 != 0.0;
    }
  }
  return v2 & 1;
}

uint64_t sub_1DC8D3B34(uint64_t a1)
{
  id v4 = v1;
  uint64_t v6 = *v1;
  uint64_t v7 = sub_1DC87E988(qword_1EAA9CBC0);
  MEMORY[0x1F4188790](v7 - 8);
  sub_1DC8C1FC4();
  v1[2] = 0;
  v1[3] = a1;
  type metadata accessor for SNFileUtils();
  sub_1DCB3B520(v3);
  uint64_t v8 = sub_1DCB86A18();
  uint64_t result = _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwet_0(v3, 1, v8);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = sub_1DCB869D8();
    uint64_t v12 = v11;
    sub_1DC88D5C8();
    v13();
    uint64_t v14 = (void *)swift_allocObject();
    _OWORD v14[2] = v10;
    v14[3] = v12;
    v14[4] = a1;
    v14[5] = v6;
    uint64_t v15 = sub_1DC8A12D0();
    swift_release();
    if (v2)
    {
      swift_release();
    }
    else
    {
      uint64_t v16 = (void *)v4[2];
      v4[2] = v15;
    }
    return (uint64_t)v4;
  }
  return result;
}

uint64_t sub_1DC8D3CCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = sub_1DC8D3CFC(a1, a2, a3);
  if (!v4) {
    *a4 = result;
  }
  return result;
}

uint64_t sub_1DC8D3CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = sub_1DC8D3DF4(a3);
  uint64_t v4 = sub_1DCAE854C(v3);
  swift_bridgeObjectRelease();
  objc_allocWithZone((Class)type metadata accessor for SNDSPConfiguration());
  swift_bridgeObjectRetain();
  id v5 = sub_1DC9B3224(v4);
  uint64_t v6 = type metadata accessor for SNDSPGraphLoader();
  uint64_t v7 = sub_1DC9B1474((uint64_t)v5);
  if (v7)
  {
    uint64_t v6 = v7;
    sub_1DCB5EC24(v7);
    sub_1DCB5F1F8(v6);
  }
  else
  {
    sub_1DC884E74();
    swift_allocError();
    *uint64_t v8 = 0;
    swift_willThrow();
  }

  return v6;
}

uint64_t sub_1DC8D3DF4(uint64_t a1)
{
  sub_1DC87E988((uint64_t *)&unk_1EAA9C700);
  if (a1)
  {
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_1DCBB93B0;
    uint64_t v3 = (uint64_t *)(v2 + 32);
  }
  else
  {
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_1DCBB9440;
    *(void *)(v2 + 32) = sub_1DCB877D8();
    *(void *)(v2 + 40) = sub_1DCB877D8();
    uint64_t v3 = (uint64_t *)(v2 + 48);
  }
  *uint64_t v3 = sub_1DCB877D8();
  return v2;
}

CMTimeValue sub_1DC8D3EE8(void *a1, int64_t a2, void (*a3)(void), CMTimeValue a4)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = self;
  v31.start.CMTimeValue value = 0;
  id v11 = sub_1DCB6C41C(v10, a1, (uint64_t)&v31);
  if (!v11)
  {
    id v28 = (id)v31.start.value;
    sub_1DCB86898();

    swift_willThrow();
    return v4;
  }
  uint64_t v12 = v11;
  id v13 = (id)v31.start.value;
  int64_t v14 = sub_1DCB89168();
  int32_t v15 = sub_1DCB5C99C((uint64_t)a1);
  if (v15 < 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
  }
  CMTimeMake(&v31.start, v14, v15);
  CMTimeValue value = v31.start.value;
  uint64_t v17 = *(void *)&v31.start.timescale;
  CMTimeEpoch epoch = v31.start.epoch;
  int32_t v19 = sub_1DCB5C99C((uint64_t)a1);
  if (v19 < 0) {
    goto LABEL_12;
  }
  CMTimeMake(&v31.start, a2, v19);
  CMTimeValue v20 = v31.start.value;
  CMTimeEpoch v21 = v31.start.epoch;
  uint64_t v22 = (objc_class *)type metadata accessor for SNSpeechUtteranceResult();
  uint64_t v23 = *(void *)&v31.start.timescale;
  uint64_t v24 = (char *)objc_msgSend(objc_allocWithZone(v22), sel_init);
  duration.CMTimeEpoch epoch = v21;
  start.CMTimeValue value = value;
  *(void *)&start.CMTimeScale timescale = v17;
  start.CMTimeEpoch epoch = epoch;
  duration.CMTimeValue value = v20;
  *(void *)&duration.CMTimeScale timescale = v23;
  CMTimeRangeMake(&v31, &start, &duration);
  CMTimeRange v39 = v31;
  CMTimeValue v4 = a4;
  a3();
  if (v5)
  {
  }
  else
  {
    uint64_t v25 = sub_1DCB883C8();
    ((void (*)(uint64_t))a3)(v25);
    sub_1DCB883D8();
    uint64_t v26 = v38;
    uint64_t v27 = &v24[OBJC_IVAR___SNSpeechUtteranceResult_impl];
    *(void *)uint64_t v27 = v34;
    *((void *)v27 + 1) = v35;
    *((_OWORD *)v27 + 1) = v36;
    *((void *)v27 + 4) = v37;
    *((void *)v27 + 5) = v26;
    *((double *)v27 + 7) = sub_1DC8D39E4();
    v27[48] = sub_1DC8D3AC4() & 1;
    sub_1DC87E988(&qword_1EAA9C720);
    CMTimeValue v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_1DCBB8670;
    *(void *)(v30 + 32) = v24;
    v31.start.CMTimeValue value = v30;
    sub_1DCB87C68();
    CMTimeValue v4 = v31.start.value;
  }
  return v4;
}

id sub_1DC8D41C4()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1) {
    return v1;
  }
  sub_1DC8D44B4();
  swift_allocError();
  return (id)swift_willThrow();
}

uint64_t sub_1DC8D4220()
{
  return swift_deallocClassInstance();
}

CMTimeValue sub_1DC8D4258(void *a1, int64_t a2, void (*a3)(void), CMTimeValue a4)
{
  return sub_1DC8D3EE8(a1, a2, a3, a4);
}

id sub_1DC8D4270()
{
  return sub_1DC8D3A50();
}

id sub_1DC8D4288()
{
  return sub_1DC8D41C4();
}

uint64_t type metadata accessor for SNDetectSpeechUtteranceRequest()
{
  return self;
}

uint64_t method lookup function for SNDetectSpeechUtteranceRequest(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SNDetectSpeechUtteranceRequest);
}

uint64_t type metadata accessor for SNSpeechUtteranceDetector()
{
  return self;
}

uint64_t sub_1DC8D4300(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 64))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
      BOOL v4 = v3 >= 2;
      int v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1DC8D434C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for DetectSpeechUtterance.Result()
{
}

void type metadata accessor for DetectSpeechUtterance()
{
}

void type metadata accessor for DetectSpeechUtterance.AudioSourceAgnosticRequest()
{
}

unint64_t sub_1DC8D43C8()
{
  unint64_t result = qword_1EAA9ED40;
  if (!qword_1EAA9ED40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9ED40);
  }
  return result;
}

unint64_t sub_1DC8D4414(uint64_t a1)
{
  unint64_t result = sub_1DC8825F4();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1DC8D443C(uint64_t a1)
{
  unint64_t result = sub_1DC8825A8();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1DC8D4468()
{
  unint64_t result = qword_1EAA9ED48;
  if (!qword_1EAA9ED48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9ED48);
  }
  return result;
}

unint64_t sub_1DC8D44B4()
{
  unint64_t result = qword_1EAA9ED50;
  if (!qword_1EAA9ED50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9ED50);
  }
  return result;
}

uint64_t sub_1DC8D4500()
{
  return sub_1DC8D2F50(*(uint64_t **)(v0 + 16));
}

uint64_t sub_1DC8D451C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1DC8D4568()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1DC8D45A0@<X0>(uint64_t *a1@<X8>)
{
  return sub_1DC8D3CCC(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_1DC8D45C0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

id sub_1DC8D4608()
{
  return sub_1DC8D3128((uint64_t *)(v0 + 16));
}

uint64_t sub_1DC8D4624()
{
  sub_1DC8818D0(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1DC8D4674@<X0>(uint64_t *a1@<X8>)
{
  return sub_1DC8D3174((void *)(v1 + 16), v1 + 56, a1);
}

uint64_t sub_1DC8D4694()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1DC8D46D4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1DC8D470C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1DCA18840(*a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

unint64_t sub_1DC8D473C()
{
  unint64_t result = qword_1EAA9EDD8;
  if (!qword_1EAA9EDD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EDD8);
  }
  return result;
}

unint64_t sub_1DC8D4788()
{
  unint64_t result = qword_1EAA9EE00;
  if (!qword_1EAA9EE00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EE00);
  }
  return result;
}

uint64_t sub_1DC8D47D4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1DC8863A8(&qword_1EAA9EE08);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for DetectSpeechUtterance.AudioSourceAgnosticRequest.CodingKeys()
{
  return &type metadata for DetectSpeechUtterance.AudioSourceAgnosticRequest.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for DetectSpeechUtterance.Result.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DC8D4918);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DetectSpeechUtterance.Result.CodingKeys()
{
  return &type metadata for DetectSpeechUtterance.Result.CodingKeys;
}

void type metadata accessor for DetectSpeechUtterance.Session()
{
}

unsigned char *_s13SoundAnalysis21DetectSpeechUtteranceV26AudioSourceAgnosticRequestV10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1DC8D49F8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for SNSpeechUtteranceDetector.DomainError()
{
}

uint64_t sub_1DC8D4A2C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1DC8D4A70(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 60);
  uint64_t v5 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1DC8D4AF0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  *(unsigned char *)(a1 + 59) = *(unsigned char *)(a2 + 59);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(unsigned char *)(a1 + 61) = *(unsigned char *)(a2 + 61);
  uint64_t v4 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v4;
  return a1;
}

void *sub_1DC8D4BC8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x49uLL);
}

uint64_t sub_1DC8D4BD0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  *(unsigned char *)(a1 + 59) = *(unsigned char *)(a2 + 59);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(unsigned char *)(a1 + 61) = *(unsigned char *)(a2 + 61);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t sub_1DC8D4C70(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 73))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1DC8D4CB0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 73) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for DetectSpeechUtterance.Request()
{
}

unint64_t sub_1DC8D4D14()
{
  unint64_t result = qword_1EAA9EE28;
  if (!qword_1EAA9EE28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EE28);
  }
  return result;
}

unint64_t sub_1DC8D4D64()
{
  unint64_t result = qword_1EAA9EE30;
  if (!qword_1EAA9EE30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EE30);
  }
  return result;
}

unint64_t sub_1DC8D4DB4()
{
  unint64_t result = qword_1EAA9EE38;
  if (!qword_1EAA9EE38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EE38);
  }
  return result;
}

unint64_t sub_1DC8D4E04()
{
  unint64_t result = qword_1EAA9EE40;
  if (!qword_1EAA9EE40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EE40);
  }
  return result;
}

unint64_t sub_1DC8D4E54()
{
  unint64_t result = qword_1EAA9EE48;
  if (!qword_1EAA9EE48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EE48);
  }
  return result;
}

unint64_t sub_1DC8D4EA4()
{
  unint64_t result = qword_1EAA9EE50;
  if (!qword_1EAA9EE50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EE50);
  }
  return result;
}

unint64_t sub_1DC8D4EF4()
{
  unint64_t result = qword_1EAA9EE58;
  if (!qword_1EAA9EE58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EE58);
  }
  return result;
}

unint64_t sub_1DC8D4F44()
{
  unint64_t result = qword_1EAA9EE60;
  if (!qword_1EAA9EE60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EE60);
  }
  return result;
}

unint64_t sub_1DC8D4F90()
{
  unint64_t result = qword_1EAA9EE70;
  if (!qword_1EAA9EE70)
  {
    sub_1DC8863A8(&qword_1EAAA42B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EE70);
  }
  return result;
}

unint64_t sub_1DC8D5004()
{
  unint64_t result = qword_1EAA9EE80;
  if (!qword_1EAA9EE80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EE80);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DetectSpeechUtterance.Request.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DC8D511CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DetectSpeechUtterance.Request.CodingKeys()
{
  return &type metadata for DetectSpeechUtterance.Request.CodingKeys;
}

unint64_t sub_1DC8D5158()
{
  unint64_t result = qword_1EAA9EEA0;
  if (!qword_1EAA9EEA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EEA0);
  }
  return result;
}

unint64_t sub_1DC8D51A8()
{
  unint64_t result = qword_1EAA9EEA8;
  if (!qword_1EAA9EEA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EEA8);
  }
  return result;
}

unint64_t sub_1DC8D51F8()
{
  unint64_t result = qword_1EAA9EEB0;
  if (!qword_1EAA9EEB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EEB0);
  }
  return result;
}

__n128 sub_1DC8D5244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long a11)
{
  return (__n128)a11;
}

__n128 sub_1DC8D5284()
{
  return *(__n128 *)(v0 + 24);
}

void *sub_1DC8D52C0()
{
  return sub_1DC881A8C(v0, v0[3]);
}

uint64_t sub_1DC8D52E4()
{
  return sub_1DCB88DF8();
}

uint64_t sub_1DC8D530C()
{
  return sub_1DCB88F18();
}

uint64_t sub_1DC8D5330@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 144) = a1;
  return v1 - 144;
}

uint64_t sub_1DC8D5348(uint64_t a1, uint64_t a2)
{
  return sub_1DCB2FD9C(a1, a2, 0, 0);
}

uint64_t sub_1DC8D5364()
{
  return v0;
}

uint64_t sub_1DC8D5378()
{
  return v0;
}

void *sub_1DC8D538C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = a5;
  void v16[3] = a6;
  v16[4] = a7;
  v16[5] = a8;
  void v16[6] = a3;
  v16[7] = a4;
  v16[8] = a1;
  v16[9] = a2;
  swift_retain_n();
  swift_retain();
  return &unk_1EAA9EED0;
}

uint64_t sub_1DC8D5450(uint64_t a1)
{
  *(void *)(v1 + 64) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 72) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1DC8D554C;
  return sub_1DC8D5610();
}

uint64_t sub_1DC8D554C()
{
  sub_1DC8867A8();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC88679C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88678C();
  *unsigned int v6 = v5;
  swift_task_dealloc();
  if (!v0) {
    sub_1DC8D791C();
  }
  sub_1DC8BA978();
  return v7();
}

uint64_t sub_1DC8D5610()
{
  sub_1DC886900();
  uint64_t v2 = v1;
  v0[14] = v3;
  v0[15] = v13;
  v0[12] = v4;
  v0[13] = v1;
  v0[10] = v5;
  v0[11] = v6;
  v0[8] = v7;
  v0[9] = v8;
  v0[16] = *(void *)(v3 - 8);
  v0[17] = swift_task_alloc();
  v0[18] = *(void *)(v2 - 8);
  v0[19] = swift_task_alloc();
  swift_task_alloc();
  sub_1DC8BAD7C();
  v0[20] = v9;
  *uint64_t v9 = v10;
  v9[1] = sub_1DC8D577C;
  return sub_1DC977B70();
}

uint64_t sub_1DC8D577C()
{
  sub_1DC886900();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC88679C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88678C();
  *uint64_t v6 = v5;
  v3[21] = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1DC886854();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    int32_t v15 = (uint64_t (*)(uint64_t, uint64_t))(v3[9] + *(int *)v3[9]);
    swift_task_alloc();
    sub_1DC8BAD7C();
    v3[22] = v10;
    *uint64_t v10 = v11;
    v10[1] = sub_1DC8D58FC;
    uint64_t v12 = v3[19];
    uint64_t v13 = v3[17];
    return v15(v13, v12);
  }
}

uint64_t sub_1DC8D58FC()
{
  sub_1DC8867A8();
  sub_1DC886774();
  sub_1DC88679C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1DC88678C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 184) = v0;
  swift_task_dealloc();
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC8D59D8()
{
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v5 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 112);
  uint64_t v7 = *(void *)(v0 + 104);
  sub_1DCAD30C4(*(void *)(v0 + 88), *(void *)(v0 + 96), v6, *(void *)(v0 + 120), (uint64_t *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v7);
  if (!v1)
  {
    uint64_t v9 = *(_OWORD **)(v0 + 64);
    long long v10 = *(_OWORD *)(v0 + 16);
    long long v11 = *(_OWORD *)(v0 + 48);
    v9[1] = *(_OWORD *)(v0 + 32);
    _OWORD v9[2] = v11;
    *uint64_t v9 = v10;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_1DC8D5AF8()
{
  sub_1DC8867A8();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1DC8BA978();
  return v0();
}

uint64_t sub_1DC8D5B60()
{
  sub_1DC8867A8();
  (*(void (**)(void, void))(v0[18] + 8))(v0[19], v0[13]);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1DC8BA978();
  return v1();
}

void *sub_1DC8D5BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1DC8D538C(a1, a2, *v4, v4[1], *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8), *(void *)(a4 - 16));
  if (v5) {
    return (void *)v6;
  }
  else {
    return &unk_1EAA9EED0;
  }
}

uint64_t sub_1DC8D5C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  void v8[5] = a4;
  _OWORD v8[2] = a1;
  v8[3] = a2;
  sub_1DC886854();
  return MEMORY[0x1F4188298](v9, v10, v11);
}

uint64_t sub_1DC8D5C5C()
{
  sub_1DC88688C();
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = swift_allocObject();
  long long v4 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v3 + 32) = v4;
  *(void *)(v3 + 48) = v2;
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(v0 + 24);
  *(void *)(v3 + 72) = v1;
  sub_1DC8BA978();
  uint64_t v7 = v5;
  swift_retain();
  swift_retain();
  return v7(&unk_1EAA9EEF0, v3);
}

uint64_t sub_1DC8D5D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[10] = v10;
  v8[11] = v11;
  void v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  void v8[5] = a4;
  _OWORD v8[2] = a1;
  v8[3] = a2;
  return MEMORY[0x1F4188298](sub_1DC8D5D58, 0, 0);
}

uint64_t sub_1DC8D5D58()
{
  sub_1DC886900();
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = swift_allocObject();
  *(void *)(v0 + 96) = v3;
  *(void *)(v3 + 16) = v2;
  *(_OWORD *)(v3 + 24) = *(_OWORD *)(v0 + 40);
  *(void *)(v3 + 40) = v1;
  swift_retain();
  swift_retain();
  swift_task_alloc();
  sub_1DC8BAD7C();
  *(void *)(v0 + 104) = v5;
  *uint64_t v5 = v6;
  v5[1] = sub_1DC8D5E68;
  uint64_t v7 = *(void *)(v0 + 56);
  uint64_t v8 = *(void *)(v0 + 64);
  uint64_t v9 = *(void *)(v0 + 48);
  uint64_t v10 = *(void *)(v0 + 16);
  uint64_t v11 = *(void *)(v0 + 24);
  return sub_1DC8D60A0(v10, (uint64_t)&unk_1EAA9EF00, v3, v11, v4, v9, v7, v8);
}

uint64_t sub_1DC8D5E68()
{
  sub_1DC8867A8();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC88679C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88678C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1DC886854();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    swift_release();
    sub_1DC8BA978();
    return v10();
  }
}

uint64_t sub_1DC8D5F68()
{
  sub_1DC8867A8();
  swift_release();
  sub_1DC8BA978();
  return v0();
}

uint64_t sub_1DC8D5FC4()
{
  sub_1DC886900();
  *(void *)(v0 + 64) = v1;
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v2 + *v2);
  swift_task_alloc();
  sub_1DC8BAD7C();
  *(void *)(v0 + 72) = v3;
  *uint64_t v3 = v4;
  v3[1] = sub_1DC8D554C;
  uint64_t v5 = sub_1DC8D7938();
  return v7(v5);
}

uint64_t sub_1DC8D60A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 184) = v14;
  *(_OWORD *)(v8 + 168) = v13;
  *(void *)(v8 + 152) = a7;
  *(void *)(v8 + 160) = a8;
  *(void *)(v8 + 136) = a4;
  *(void *)(v8 + 144) = a6;
  *(void *)(v8 + 120) = a2;
  *(void *)(v8 + 128) = a3;
  *(void *)(v8 + 112) = a1;
  sub_1DC886854();
  return MEMORY[0x1F4188298](v9, v10, v11);
}

uint64_t sub_1DC8D60E4()
{
  sub_1DC88688C();
  sub_1DCAD30C4(v0[18], v0[19], v0[20], v0[22], v0 + 8);
  uint64_t v4 = (uint64_t (*)(uint64_t *, uint64_t *))(v0[15] + *(int *)v0[15]);
  swift_task_alloc();
  sub_1DC8BAD7C();
  v0[24] = (uint64_t)v1;
  *uint64_t v1 = v2;
  v1[1] = sub_1DC8D6224;
  return v4(v0 + 2, v0 + 8);
}

uint64_t sub_1DC8D6224()
{
  sub_1DC8867A8();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC88679C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88678C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 200) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1DC886854();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    swift_task_alloc();
    sub_1DC8BAD7C();
    *(void *)(v3 + 208) = v10;
    *uint64_t v10 = v11;
    v10[1] = sub_1DC8D636C;
    return sub_1DC977B70();
  }
}

uint64_t sub_1DC8D636C()
{
  sub_1DC8867A8();
  sub_1DC886774();
  sub_1DC88679C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1DC88678C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 216) = v0;
  swift_task_dealloc();
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC8D6448()
{
  sub_1DC8867A8();
  sub_1DC886630(v0 + 2);
  sub_1DC886630(v0 + 8);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1DC8D64B4()
{
  sub_1DC8867A8();
  sub_1DC886630((uint64_t *)(v0 + 64));
  sub_1DC8BA978();
  return v1();
}

uint64_t sub_1DC8D6510()
{
  sub_1DC8867A8();
  sub_1DC886630((uint64_t *)(v0 + 16));
  sub_1DC886630((uint64_t *)(v0 + 64));
  sub_1DC8BA978();
  return v1();
}

uint64_t sub_1DC8D6578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 16) = a1;
  uint64_t v14 = *(void *)(a7 - 16);
  uint64_t v13 = *(void *)(a7 - 8);
  int32_t v15 = (void *)swift_task_alloc();
  *(void *)(v7 + 24) = v15;
  uint64_t v16 = *(void *)(a6 + 16);
  uint64_t v17 = *(void *)(a6 + 24);
  *int32_t v15 = v7;
  v15[1] = sub_1DC8D6654;
  return sub_1DC8D5C2C(a2, a3, a4, a5, v16, v17, v13, v14);
}

uint64_t sub_1DC8D6654()
{
  sub_1DC88688C();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_1DC886774();
  uint64_t v7 = v6;
  sub_1DC88679C();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  sub_1DC88678C();
  *uint64_t v10 = v9;
  swift_task_dealloc();
  if (!v0)
  {
    uint64_t v11 = *(void **)(v7 + 16);
    *uint64_t v11 = v5;
    v11[1] = v3;
  }
  uint64_t v12 = *(uint64_t (**)(void))(v9 + 8);
  return v12();
}

uint64_t sub_1DC8D673C(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1DC8D678C(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1DC8D67DC(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1DC8D682C(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1DC8D6880()
{
  sub_1DC8D78FC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1DC886800(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_1DC8D6930;
  uint64_t v3 = sub_1DC8D78D0();
  return sub_1DC8D5450(v3);
}

uint64_t sub_1DC8D6930()
{
  sub_1DC8867A8();
  sub_1DC886774();
  uint64_t v1 = *v0;
  sub_1DC88678C();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_1DC8BA978();
  return v3();
}

uint64_t sub_1DC8D69F4()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1DC8D6A34()
{
  sub_1DC8D78FC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1DC886800(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_1DC8D78C0;
  uint64_t v3 = sub_1DC8D78D0();
  return sub_1DC8D5D20(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1DC8D6AE4()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1DC8D6B24()
{
  sub_1DC88688C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1DC886800(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_1DC8D78C0;
  sub_1DC8D7938();
  return sub_1DC8D5FC4();
}

void *sub_1DC8D6BD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_allocObject();
  _OWORD v6[2] = a3;
  v6[3] = a1;
  v6[4] = a2;
  swift_retain();
  return &unk_1EAA9EF28;
}

uint64_t sub_1DC8D6C4C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_1DC8D6930;
  return v7(a1);
}

uint64_t sub_1DC8D6D28(void (*a1)(void *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = sub_1DC8D6BD8(a3, a4, a5);
  uint64_t v8 = v7;
  v10[3] = type metadata accessor for XPCFunction();
  v10[4] = swift_getWitnessTable();
  v10[0] = v6;
  v10[1] = v8;
  swift_retain();
  a1(v10);
  swift_release();
  return sub_1DC8818D0((uint64_t)v10);
}

void *sub_1DC8D6E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_allocObject();
  _OWORD v6[2] = a3;
  v6[3] = a1;
  v6[4] = a2;
  swift_retain();
  return &unk_1EAA9EF18;
}

uint64_t sub_1DC8D6E84(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1DC8D6F60;
  return v6(a1);
}

uint64_t sub_1DC8D6F60()
{
  sub_1DC8867A8();
  sub_1DC886774();
  sub_1DC88679C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1DC88678C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 24) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1DC886854();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    sub_1DC8BA978();
    return v10();
  }
}

uint64_t sub_1DC8D7058()
{
  sub_1DC8BA978();
  return v0();
}

uint64_t sub_1DC8D7074()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1DC8D70AC()
{
  sub_1DC886900();
  uint64_t v2 = v1;
  uint64_t v3 = *(int **)(v0 + 24);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_1DC886800(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_1DC8D78C0;
  return sub_1DC8D6E84(v2, v3);
}

uint64_t type metadata accessor for XPCFunction()
{
  return sub_1DC8866E4();
}

uint64_t sub_1DC8D716C()
{
  sub_1DC88688C();
  uint64_t v1 = *(int **)(v0 + 24);
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_1DC886800(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_1DC8D78C0;
  uint64_t v5 = sub_1DC8D7938();
  return sub_1DC8D6C4C(v5, v6, v1);
}

uint64_t sub_1DC8D721C()
{
  sub_1DC8867A8();
  *(void *)(v0 + 16) = v1;
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1DC8D72E8;
  return v5();
}

uint64_t sub_1DC8D72E8()
{
  sub_1DC88688C();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_1DC886774();
  uint64_t v7 = v6;
  sub_1DC88679C();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  sub_1DC88678C();
  *uint64_t v10 = v9;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v11 = *(uint64_t (**)(void))(v9 + 8);
    return v11();
  }
  else
  {
    *(void *)(v7 + 32) = v3;
    *(void *)(v7 + 40) = v5;
    sub_1DC886854();
    return MEMORY[0x1F4188298](v13, v14, v15);
  }
}

uint64_t sub_1DC8D740C()
{
  sub_1DC8867A8();
  sub_1DC8D6E10(v0[5], v0[4], v0[2]);
  uint64_t v2 = v1;
  swift_release();
  uint64_t v3 = (uint64_t (*)(void *, uint64_t))v0[1];
  return v3(&unk_1EAA9EF18, v2);
}

uint64_t sub_1DC8D7498()
{
  sub_1DC8867A8();
  uint64_t v4 = (uint64_t (*)(void))((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1DC8D7560;
  return v4();
}

uint64_t sub_1DC8D7560()
{
  sub_1DC8867A8();
  sub_1DC886774();
  uint64_t v2 = *v1;
  sub_1DC88678C();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  if (v0)
  {
    sub_1DC8BA978();
    return v4();
  }
  else
  {
    sub_1DC886854();
    return MEMORY[0x1F4188298](v6, v7, v8);
  }
}

uint64_t sub_1DC8D7658()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1DC8D7670()
{
  sub_1DC8867A8();
  uint64_t v4 = (uint64_t (*)(void))((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1DC8D7738;
  return v4();
}

uint64_t sub_1DC8D7738()
{
  sub_1DC8867A8();
  sub_1DC886774();
  sub_1DC88679C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1DC88678C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 24) = v0;
  swift_task_dealloc();
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC8D7814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 24);
}

void *initializeBufferWithCopyOfBuffer for XPCPublisher(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

void *assignWithCopy for XPCPublisher(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for XPCPublisher(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t sub_1DC8D78D0()
{
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  return v0;
}

__n128 sub_1DC8D791C()
{
  uint64_t v1 = *(void *)(v0 + 64);
  __n128 result = *(__n128 *)(v0 + 16);
  long long v3 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v1 + 32) = v3;
  *(__n128 *)uint64_t v1 = result;
  return result;
}

uint64_t sub_1DC8D7938()
{
  return v0;
}

id sub_1DC8D7948(int a1)
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F15350]), sel_initWithLayoutTag_, a1 | 0x930000u);
  if (!result) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1DC8D7990()
{
  if (objc_msgSend(v0, sel_isInterleaved)) {
    return 1;
  }

  return (uint64_t)objc_msgSend(v0, sel_channelCount);
}

uint64_t sub_1DC8D79E0()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(v0, sel_format);
  unsigned int v3 = sub_1DC8D7990();

  uint64_t v4 = sub_1DCB0F884(0, v3);
  uint64_t v5 = sub_1DC8D7A74((uint64_t)v4, 0, objc_msgSend(v1, sel_frameLength));
  swift_release();
  return v5;
}

uint64_t sub_1DC8D7A74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_1DCB875F8();
  uint64_t v38 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v35 - v11;
  id v13 = objc_msgSend(v3, sel_format);
  BOOL v14 = __OFSUB__(a3, a2);
  unint64_t v15 = a3 - a2;
  if (v14)
  {
    __break(1u);
    goto LABEL_15;
  }
  if ((v15 & 0x8000000000000000) != 0 || HIDWORD(v15)) {
    goto LABEL_20;
  }
  uint64_t v16 = v13;
  id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F153B0]), sel_initWithPCMFormat_frameCapacity_, v13, v15);

  if (v17)
  {
    objc_msgSend(v17, sel_setFrameLength_, v15);
    objc_msgSend(v3, sel_mutableAudioBufferList);
    sub_1DCB87608();
    objc_msgSend(v17, sel_mutableAudioBufferList);
    sub_1DCB87608();
    id v18 = objc_msgSend(v3, sel_format);
    uint64_t v19 = *((unsigned int *)objc_msgSend(v18, sel_streamDescription) + 6);

    id v20 = objc_msgSend(v3, sel_format);
    LODWORD(v18) = sub_1DC8D7990();

    int64_t v21 = v19 * (unint64_t)v18;
    if ((v19 * (unsigned __int128)v18) >> 64 == v21 >> 63)
    {
      size_t v22 = v21 * v15;
      if ((unsigned __int128)(v21 * (__int128)(uint64_t)v15) >> 64 == (uint64_t)(v21 * v15) >> 63)
      {
        uint64_t v23 = *(void *)(a1 + 16);
        if (!v23)
        {
LABEL_13:
          char v33 = *(void (**)(char *, uint64_t))(v38 + 8);
          v33(v10, v7);
          v33(v12, v7);
          return (uint64_t)v17;
        }
        id v36 = v17;
        uint64_t v37 = v7;
        swift_bridgeObjectRetain();
        uint64_t v24 = 0;
        while (1)
        {
          sub_1DCB87618();
          uint64_t v26 = v25;
          uint64_t v27 = sub_1DC8D7DC4();
          v28(v27);
          if (!v26) {
            goto LABEL_17;
          }
          sub_1DCB87618();
          CMTimeValue v30 = v29;
          uint64_t v31 = sub_1DC8D7DC4();
          v32(v31);
          if (!v30) {
            goto LABEL_18;
          }
          ++v24;
          memmove(v30, v26, v22);
          if (v23 == v24)
          {
            swift_bridgeObjectRelease();
            id v17 = v36;
            uint64_t v7 = v37;
            goto LABEL_13;
          }
        }
      }
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
LABEL_19:
  __break(1u);
LABEL_20:
  sub_1DC8AF148();
  uint64_t result = sub_1DCB88C58();
  __break(1u);
  return result;
}

uint64_t sub_1DC8D7DC4()
{
  return v0 - 112;
}

void type metadata accessor for DirectionOfArrival()
{
}

uint64_t destroy for DetectorHeadModelMetadata()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1DC8D7DEC(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1DC8D7E34(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1DC8D7EC0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FeaturePrint(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 56);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FeaturePrint(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 56) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for DirectionOfArrival.Result()
{
}

uint64_t sub_1DC8D7FC0()
{
  sub_1DCB891E8();
  sub_1DCB891D8();
  sub_1DCB891D8();
  sub_1DCB891E8();
  sub_1DCB891E8();
  sub_1DCB891D8();
  sub_1DCB891D8();
  sub_1DCB891E8();
  sub_1DCB891D8();
  sub_1DCB891D8();

  return sub_1DC8A7CF4();
}

uint64_t sub_1DC8D8098(float *a1, float *a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *((void *)a1 + 5);
  float v4 = a1[12];
  float v5 = a1[13];
  uint64_t v6 = *((void *)a1 + 7);
  uint64_t v7 = *(void *)a2;
  float v8 = a2[12];
  float v9 = a2[13];
  uint64_t v10 = *((void *)a2 + 7);
  uint64_t v16 = *((void *)a2 + 5);
  v17[0] = v2;
  v17[1] = *((void *)a1 + 1);
  long long v18 = *((_OWORD *)a1 + 1);
  uint64_t v19 = *((void *)a1 + 4);
  uint64_t v20 = v3;
  v13[0] = v7;
  v13[1] = *((void *)a2 + 1);
  long long v14 = *((_OWORD *)a2 + 1);
  uint64_t v15 = *((void *)a2 + 4);
  if (!static TimeRange.== infix(_:_:)((uint64_t)v17, (uint64_t)v13)) {
    return 0;
  }
  if (v4 != v8 || v5 != v9) {
    return 0;
  }

  return sub_1DC8DCCEC(v6, v10);
}

uint64_t sub_1DC8D8178(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x676E6152656D6974 && a2 == 0xE900000000000065;
  if (v2 || (sub_1DCB89018() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6874756D697A61 && a2 == 0xE700000000000000;
    if (v6 || (sub_1DCB89018() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x6F69746176656C65 && a2 == 0xE90000000000006ELL;
      if (v7 || (sub_1DCB89018() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x536C616974617073 && a2 == 0xEF6D757274636570)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v9 = sub_1DCB89018();
        swift_bridgeObjectRelease();
        if (v9) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t sub_1DC8D835C()
{
  return 4;
}

uint64_t sub_1DC8D8364(char a1)
{
  uint64_t result = 0x676E6152656D6974;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6874756D697A61;
      break;
    case 2:
      uint64_t result = 0x6F69746176656C65;
      break;
    case 3:
      uint64_t result = 0x536C616974617073;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1DC8D8408(void *a1)
{
  uint64_t v2 = sub_1DC87E988((uint64_t *)&unk_1EAA9F068);
  sub_1DC89D4E0();
  uint64_t v10 = v3;
  MEMORY[0x1F4188790](v4);
  sub_1DC8A22D0();
  uint64_t v7 = v6 - v5;
  sub_1DC881A8C(a1, a1[3]);
  sub_1DC8DA608();
  sub_1DCB892B8();
  sub_1DC89C64C();
  sub_1DCB88F18();
  if (v11)
  {
    sub_1DC88D5C8();
    return v8();
  }
  else
  {
    sub_1DCB88EF8();
    sub_1DCB88EF8();
    sub_1DC87E988(&qword_1EAAA10A0);
    sub_1DC8DA654(&qword_1EAA9F078);
    sub_1DCB88F18();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v7, v2);
  }
}

uint64_t sub_1DC8D863C()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC8D8740@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1DC87E988(&qword_1EAA9F050);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v5);
  sub_1DC8A22D0();
  sub_1DC881A8C(a1, a1[3]);
  sub_1DC8DA608();
  sub_1DCB89298();
  if (!v2)
  {
    sub_1DC89C600();
    sub_1DCB88DF8();
    sub_1DC8DABB8(1);
    int v7 = v6;
    sub_1DC8DABB8(2);
    int v10 = v9;
    sub_1DC87E988(&qword_1EAAA10A0);
    sub_1DC8DA654(&qword_1EAA9F060);
    sub_1DCB88DF8();
    uint64_t v11 = sub_1DC8D5364();
    v12(v11);
    *(void *)a2 = v13;
    *(void *)(a2 + 8) = v14;
    *(void *)(a2 + 16) = v15;
    *(void *)(a2 + 24) = v16;
    *(void *)(a2 + 32) = v17;
    *(void *)(a2 + 40) = v18;
    *(_DWORD *)(a2 + 48) = v7;
    *(_DWORD *)(a2 + 52) = v10;
    *(void *)(a2 + 56) = v13;
  }
  return sub_1DC8818D0((uint64_t)a1);
}

uint64_t sub_1DC8D896C()
{
  return sub_1DC8D8364(*v0);
}

uint64_t sub_1DC8D8974@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1DC8D8178(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1DC8D899C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1DC8D835C();
  *a1 = result;
  return result;
}

uint64_t sub_1DC8D89C4(uint64_t a1)
{
  unint64_t v2 = sub_1DC8DA608();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC8D8A00(uint64_t a1)
{
  unint64_t v2 = sub_1DC8DA608();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1DC8D8A44()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC8D8B44@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1DC8D8740(a1, a2);
}

uint64_t sub_1DC8D8B5C(void *a1)
{
  return sub_1DC8D8408(a1);
}

unint64_t sub_1DC8D8B7C()
{
  unint64_t result = qword_1EAA9EFD0;
  if (!qword_1EAA9EFD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9EFD0);
  }
  return result;
}

void sub_1DC8D8BC8(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v23[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v7 = self;
  v23[0] = 0;
  id v8 = sub_1DCB6C41C(v7, a1, (uint64_t)v23);
  if (!v8)
  {
    id v18 = v23[0];
    sub_1DCB86898();

    swift_willThrow();
    return;
  }
  int v9 = v8;
  id v10 = v23[0];
  uint64_t v11 = sub_1DCB89168();
  int v12 = sub_1DCB5C99C((uint64_t)a1);
  if (v12 < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  int v13 = v12;
  int v14 = sub_1DCB5C99C((uint64_t)a1);
  if (v14 < 0) {
    goto LABEL_9;
  }
  int v15 = v14;
  sub_1DCB2FD9C((uint64_t)a1, 12, 0, 0);
  if (v3)
  {
  }
  else
  {
    int v17 = v16;
    sub_1DCB2FD9C((uint64_t)a1, 13, 0, 0);
    int v20 = v19;
    sub_1DC8D8D64(a1);
    uint64_t v22 = v21;

    *(void *)a3 = v11;
    *(_DWORD *)(a3 + 8) = v13;
    *(_DWORD *)(a3 + 12) = 1;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = a2;
    *(_DWORD *)(a3 + 32) = v15;
    *(_DWORD *)(a3 + 36) = 1;
    *(void *)(a3 + 40) = 0;
    *(_DWORD *)(a3 + 48) = v17;
    *(_DWORD *)(a3 + 52) = v20;
    *(void *)(a3 + 56) = v22;
  }
}

void sub_1DC8D8D64(void *a1)
{
  unint64_t v2 = (__CFString **)sub_1DC8DA11C(a1, 104640, 0, 0);
  if (!v1)
  {
    uint64_t v3 = v2;
    unint64_t v4 = sub_1DC8D90F4(v2);
    unint64_t v5 = v4;
    if (v4 >> 62) {
      goto LABEL_21;
    }
    uint64_t v6 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6)
    {
      while (1)
      {
        uint64_t v21 = v3;
        uint64_t v24 = MEMORY[0x1E4FBC860];
        sub_1DC89822C();
        if (v6 < 0) {
          break;
        }
        uint64_t v7 = 0;
        unint64_t v22 = v5;
        unint64_t v23 = v5 & 0xC000000000000001;
        uint64_t v3 = SNDetectorIdentifierVGGishDoorKnock;
        while (v6 != v7)
        {
          if (v23) {
            id v8 = (id)MEMORY[0x1E01A7AE0](v7, v5);
          }
          else {
            id v8 = *(id *)(v5 + 8 * v7 + 32);
          }
          id v9 = v8;
          objc_msgSend(v9, sel_doubleValue);
          id v11 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v10);
          id v12 = objc_msgSend(v9, sel_longLongValue);
          if (v12 != objc_msgSend(v11, sel_longLongValue)
            || (objc_msgSend(v9, sel_doubleValue), double v14 = v13, objc_msgSend(v11, sel_doubleValue), v14 != v15))
          {

LABEL_18:
            type metadata accessor for SNError();
            sub_1DCB88A98();
            swift_bridgeObjectRelease();
            id v20 = objc_msgSend(v9, sel_description);
            sub_1DCB87938();

            sub_1DCB87A18();
            swift_bridgeObjectRelease();
            sub_1DCA14B2C(0xD000000000000017, 0x80000001DCB90E90, 1, 0, 0xD000000000000015, 0x80000001DCB91A90);
            swift_bridgeObjectRelease();
            swift_willThrow();
            swift_bridgeObjectRelease();
            swift_release();

            return;
          }
          unsigned __int8 v16 = objc_msgSend(v9, sel_isEqual_, v11);

          unint64_t v5 = v22;
          if ((v16 & 1) == 0) {
            goto LABEL_18;
          }
          objc_msgSend(v9, sel_doubleValue);
          uint64_t v18 = v17;

          unint64_t v19 = *(void *)(v24 + 16);
          if (v19 >= *(void *)(v24 + 24) >> 1) {
            sub_1DC89822C();
          }
          ++v7;
          *(void *)(v24 + 16) = v19 + 1;
          *(void *)(v24 + 8 * v19 + 32) = v18;
          if (v6 == v7)
          {
            swift_bridgeObjectRelease();

            return;
          }
        }
        __break(1u);
LABEL_21:
        swift_bridgeObjectRetain();
        uint64_t v6 = sub_1DCB88CC8();
        swift_bridgeObjectRelease();
        if (!v6) {
          goto LABEL_22;
        }
      }
      __break(1u);
    }
    else
    {
LABEL_22:
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_1DC8D90CC(uint64_t a1)
{
  return sub_1DC8D92C8(a1, (unint64_t *)&qword_1EAA9C6F0);
}

uint64_t sub_1DC8D90F4(void *a1)
{
  id v1 = a1;
  sub_1DC87E988(&qword_1EAA9EFD8);
  sub_1DC87E988(&qword_1EAA9C8D0);
  if (swift_dynamicCast()) {
    return v3;
  }
  sub_1DC8DA330();
  swift_allocError();
  return swift_willThrow();
}

uint64_t sub_1DC8D9190(uint64_t a1)
{
  sub_1DC8B9F3C(a1, (uint64_t)v3, &qword_1EAA9CAB0);
  sub_1DC87E988(&qword_1EAA9CAB0);
  sub_1DC87E988((uint64_t *)&unk_1EAA9CBA0);
  if (swift_dynamicCast()) {
    return v2;
  }
  sub_1DC8DA330();
  sub_1DC883884();
  return sub_1DC8BAC20();
}

uint64_t sub_1DC8D9224(uint64_t a1)
{
  sub_1DC87E9DC(a1, (uint64_t)v3);
  if (swift_dynamicCast()) {
    return v2;
  }
  sub_1DC8DA330();
  sub_1DC883884();
  return sub_1DC8BAC20();
}

uint64_t sub_1DC8D92A0(uint64_t a1)
{
  return sub_1DC8D92C8(a1, (unint64_t *)&qword_1EAA9C7A0);
}

uint64_t sub_1DC8D92C8(uint64_t a1, unint64_t *a2)
{
  sub_1DC87E9DC(a1, (uint64_t)v4);
  sub_1DC89C89C(0, a2);
  if (swift_dynamicCast()) {
    return v4[5];
  }
  sub_1DC8DA330();
  sub_1DC883884();
  return sub_1DC8BAC20();
}

uint64_t sub_1DC8D9360()
{
  swift_bridgeObjectRetain();
  sub_1DC87E988((uint64_t *)&unk_1EAA9F080);
  sub_1DC87E988(&qword_1EAAA0190);
  if (swift_dynamicCast()) {
    return v1;
  }
  sub_1DC8DA330();
  sub_1DC883884();
  return sub_1DC8BAC20();
}

void *sub_1DC8D93EC(void (*a1)(void, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v58 = sub_1DC87E988((uint64_t *)&unk_1EAAA3CA0);
  sub_1DC89D4E0();
  uint64_t v53 = v6;
  MEMORY[0x1F4188790](v7);
  sub_1DC88D550();
  uint64_t v51 = v8;
  sub_1DCB870B8();
  sub_1DC89D4E0();
  uint64_t v56 = v10;
  uint64_t v57 = v9;
  MEMORY[0x1F4188790](v9);
  sub_1DC88D550();
  uint64_t v50 = v11;
  sub_1DC87E988(&qword_1EAA9EFF0);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v12);
  sub_1DC88D550();
  uint64_t v55 = sub_1DC87E988(&qword_1EAA9EFF8);
  sub_1DC89D4E0();
  uint64_t v54 = v13;
  MEMORY[0x1F4188790](v14);
  sub_1DC88D550();
  uint64_t v52 = v15;
  uint64_t v16 = sub_1DC87E988((uint64_t *)&unk_1EAA9F000);
  sub_1DC88819C();
  MEMORY[0x1F4188790](v17);
  sub_1DC8A22D0();
  uint64_t v20 = v19 - v18;
  uint64_t v21 = sub_1DC87E988(&qword_1EAAA4090);
  sub_1DC88819C();
  MEMORY[0x1F4188790](v22);
  sub_1DC8A22D0();
  uint64_t v25 = v24 - v23;
  sub_1DC87E988(&qword_1EAA9F010);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v26);
  sub_1DC8A22D0();
  uint64_t v29 = v28 - v27;
  uint64_t v30 = sub_1DC886810();
  *(void *)(v30 + 16) = a3;
  *(void *)(v30 + 24) = a4;
  uint64_t v31 = type metadata accessor for SNDirectionOfArrivalEstimator();
  swift_bridgeObjectRetain();
  char v32 = (void *)v31;
  uint64_t v33 = sub_1DC994F24();
  if (!v61)
  {
    char v32 = (void *)v33;
    uint64_t v49 = v29;
    if (sub_1DCB60C88(v33) == 1)
    {
      uint64_t v34 = sub_1DCB61370(v32);
      if (v34)
      {
        uint64_t v35 = v34;
        if (sub_1DCB59ECC((uint64_t)v34) == 1)
        {
          char v48 = v32;
          unsigned int v36 = sub_1DCB5C510((uint64_t)v35, 0);
          a1(v36, 16000);
          sub_1DC9A7A54();
          (*(void (**)(uint64_t, void, uint64_t))(v56 + 104))(v50, *MEMORY[0x1E4F1A8F8], v57);
          *uint64_t v51 = sub_1DC8D9B48;
          v51[1] = 0;
          (*(void (**)(uint64_t (**)@<X0>(uint64_t *@<X8>), void, uint64_t))(v53 + 104))(v51, *MEMORY[0x1E4F1A920], v58);
          sub_1DC87E988((uint64_t *)&unk_1EAA9F020);
          sub_1DC88CF34((unint64_t *)&unk_1EAAA5180, (uint64_t *)&unk_1EAA9F020);
          sub_1DCB87478();
          (*(void (**)(uint64_t (**)@<X0>(uint64_t *@<X8>), uint64_t))(v53 + 8))(v51, v58);
          sub_1DC88D5C8();
          v39();
          swift_release();
          sub_1DC87E988(&qword_1EAA9F030);
          sub_1DC88CF34(&qword_1EAA9F038, &qword_1EAA9EFF0);
          sub_1DCB873D8();
          sub_1DC88D5C8();
          v40();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v20, v52, v55);
          *(void *)(v20 + *(int *)(v16 + 44)) = 512;
          (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v52, v55);
          uint64_t v41 = swift_allocObject();
          *(void *)(v41 + 16) = 0;
          char v60 = v35;
          uint64_t v42 = sub_1DC886810();
          *(void *)(v42 + 16) = sub_1DC8DA41C;
          *(void *)(v42 + 24) = 0;
          uint64_t v43 = sub_1DC886810();
          *(void *)(v43 + 16) = sub_1DC8DA4A4;
          *(void *)(v43 + 24) = v41;
          sub_1DC8B9F3C(v20, v25, (uint64_t *)&unk_1EAA9F000);
          char v44 = (uint64_t (**)@<X0>(uint64_t *@<X8>))(v25 + *(int *)(v21 + 52));
          *char v44 = sub_1DC8DA4F0;
          v44[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v43;
          char v45 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))(v25 + *(int *)(v21 + 56));
          *char v45 = sub_1DC8DA4E8;
          v45[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v42;
          sub_1DC88CC04(v20, (uint64_t *)&unk_1EAA9F000);
          uint64_t v46 = sub_1DC886810();
          *(void *)(v46 + 16) = sub_1DC8DA3B4;
          *(void *)(v46 + 24) = v30;
          swift_retain();
          sub_1DC8D9D1C((uint64_t)sub_1DC8DA554, v46, (uint64_t)sub_1DC8D9BFC, 0, (uint64_t)sub_1DC8DA570, 0, v49);
          swift_release();
          sub_1DC88CC04(v25, &qword_1EAAA4090);
          sub_1DC88CF34(&qword_1EAA9F040, &qword_1EAA9F010);
          char v32 = (void *)sub_1DCB873A8();

          swift_release();
          sub_1DC88D5C8();
          v47();
          swift_bridgeObjectRelease();
          swift_release();
          return v32;
        }
      }
    }
    sub_1DC8DA3D0();
    sub_1DC883884();
    *uint64_t v37 = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();

    return v32;
  }
  swift_bridgeObjectRelease();
  swift_release();
  return v32;
}

uint64_t sub_1DC8D9B48@<X0>(uint64_t *a1@<X8>)
{
  sub_1DC8DA3D0();
  uint64_t result = swift_allocError();
  *a1 = result;
  *uint64_t v3 = 1;
  return result;
}

void *sub_1DC8D9B90@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  if ((v2 | v3) < 0)
  {
    __break(1u);
  }
  else
  {
    *a2 = *result;
    a2[1] = v3;
    a2[2] = v2;
    a2[3] = 0;
    a2[4] = v3;
    a2[5] = 0;
    a2[6] = v2;
    return (void *)swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1DC8D9BB8(uint64_t (*a1)(void))
{
  uint64_t v2 = a1();
  uint64_t v3 = v2;
  if (!v1) {
    sub_1DCB5F5A0(v2);
  }
  return v3;
}

id sub_1DC8D9BFC(void *a1)
{
  uint64_t v2 = (void *)sub_1DCB87908();
  id v3 = sub_1DCB60550(a1, v2);

  return v3;
}

void sub_1DC8D9C5C(uint64_t a1, void *a2, uint64_t a3)
{
  sub_1DC8D8BC8(a2, a3, (uint64_t)v13);
  if (!v3)
  {
    uint64_t v4 = v13[0];
    uint64_t v5 = v13[2];
    uint64_t v6 = v13[3];
    uint64_t v7 = v13[5];
    uint64_t v8 = v13[7];
    uint64_t v9 = v13[6];
    uint64_t v10 = v13[1];
    uint64_t v11 = v13[4];
    sub_1DC87E988(&qword_1EAA9F048);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1DCBB93B0;
    *(void *)(v12 + 32) = v4;
    *(void *)(v12 + 40) = v10;
    *(void *)(v12 + 48) = v5;
    *(void *)(v12 + 56) = v6;
    *(void *)(v12 + 64) = v11;
    *(void *)(v12 + 72) = v7;
    *(void *)(v12 + 80) = v9;
    *(void *)(v12 + 88) = v8;
  }
}

uint64_t sub_1DC8D9D1C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  *(void *)(v14 + 24) = a2;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a3;
  *(void *)(v15 + 24) = a4;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a5;
  *(void *)(v16 + 24) = a6;
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = sub_1DC8DA588;
  v17[3] = v14;
  uint64_t v17[4] = sub_1DC8DA5A4;
  v17[5] = v15;
  void v17[6] = sub_1DC8DA5C0;
  v17[7] = v16;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1DC9F4CB0(a7);
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_1DC8D9EA0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  *(void *)(v14 + 24) = a2;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a3;
  *(void *)(v15 + 24) = a4;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a5;
  *(void *)(v16 + 24) = a6;
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = sub_1DC8DABA0;
  v17[3] = v14;
  uint64_t v17[4] = sub_1DC8DAB88;
  v17[5] = v15;
  void v17[6] = sub_1DC8DA5C0;
  v17[7] = v16;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1DC9F4F0C(a7);
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_1DC8DA024@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, _OWORD *)@<X2>, uint64_t a3@<X8>)
{
  long long v5 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v5;
  void v10[2] = *(_OWORD *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 48);
  a2(&v9, v10);
  uint64_t v6 = v9;
  long long v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v7;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a1 + 32);
  *(void *)(a3 + 48) = *(void *)(a1 + 48);
  *(void *)(a3 + 56) = v6;

  return sub_1DC88CD74(a1);
}

uint64_t sub_1DC8DA0B4(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v2);
  return v2;
}

uint64_t sub_1DC8DA0EC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 40);
  uint64_t v3 = *(void *)(result + 48);
  BOOL v4 = __OFSUB__(v3, v2);
  uint64_t v5 = v3 - v2;
  if (v5 < 0 != v4)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v4)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = *a2 + v5;
  if (!__OFADD__(*a2, v5))
  {
    *a2 = result;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1DC8DA11C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_1DCB30018(a1, a2, a3, a4, 8);
  if (!v5)
  {
    uint64_t v4 = v6;
    switch(v7 >> 62)
    {
      case 1uLL:
        if (v6 >> 32 < (int)v6)
        {
          __break(1u);
          JUMPOUT(0x1DC8DA238);
        }
        swift_retain();
        uint64_t v9 = sub_1DC8DA2A4((int)v4, v4 >> 32);
        sub_1DC8DABDC();
        goto LABEL_8;
      case 2uLL:
        uint64_t v10 = *(void *)(v6 + 16);
        uint64_t v11 = *(void *)(v6 + 24);
        swift_retain();
        swift_retain();
        uint64_t v9 = sub_1DC8DA2A4(v10, v11);
        swift_release();
        swift_release();
LABEL_8:
        sub_1DC8DABDC();
        uint64_t v4 = v9;
        break;
      case 3uLL:
        sub_1DC8DABDC();
        uint64_t v4 = 0;
        break;
      default:
        sub_1DC8DABDC();
        break;
    }
  }
  return v4;
}

uint64_t sub_1DC8DA248(uint64_t a1)
{
  if (a1) {
    return *(void *)a1;
  }
  sub_1DC884E74();
  swift_allocError();
  *uint64_t v2 = 0;
  return swift_willThrow();
}

uint64_t sub_1DC8DA2A4(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1DCB867D8();
  uint64_t v5 = result;
  if (result)
  {
    uint64_t result = sub_1DCB86808();
    if (__OFSUB__(a1, result)) {
      goto LABEL_7;
    }
    v5 += a1 - result;
  }
  if (!__OFSUB__(a2, a1))
  {
    sub_1DCB867F8();
    return sub_1DC8DA248(v5);
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

unint64_t sub_1DC8DA330()
{
  unint64_t result = qword_1EAA9F6D0;
  if (!qword_1EAA9F6D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9F6D0);
  }
  return result;
}

uint64_t sub_1DC8DA37C()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1DC8DA3B4()
{
  return sub_1DC994EE0();
}

unint64_t sub_1DC8DA3D0()
{
  unint64_t result = qword_1EAA9F018;
  if (!qword_1EAA9F018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9F018);
  }
  return result;
}

uint64_t sub_1DC8DA41C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  long long v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  _OWORD v6[2] = *(_OWORD *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t result = sub_1DC8DA0EC((uint64_t)v6, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1DC8DA468@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = nullsub_1(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1DC8DA494()
{
  return swift_deallocObject();
}

uint64_t sub_1DC8DA4A4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1DC8DA468((void *)(v1 + 16), a1);
}

uint64_t sub_1DC8DA4AC@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, _OWORD *)@<X2>, uint64_t a3@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v3;
  _OWORD v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  return sub_1DC8DA024((uint64_t)v5, a2, a3);
}

uint64_t sub_1DC8DA4E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1DC8DA4AC(a1, *(void (**)(uint64_t *__return_ptr, _OWORD *))(v2 + 16), a2);
}

uint64_t sub_1DC8DA4F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1DC8DA0B4(*(void (**)(uint64_t *__return_ptr))(v1 + 16));
  *a1 = result;
  return result;
}

uint64_t sub_1DC8DA51C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1DC8DA554()
{
  return sub_1DC8D9BB8(*(uint64_t (**)(void))(v0 + 16));
}

void sub_1DC8DA570(uint64_t a1, void *a2, uint64_t a3)
{
}

uint64_t sub_1DC8DA588(uint64_t a1)
{
  return sub_1DCAD3D20(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1DC8DA5A4(uint64_t a1, uint64_t a2)
{
  return sub_1DCAD3D48(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_1DC8DA5C0()
{
  return sub_1DC8DA6B8();
}

uint64_t sub_1DC8DA5DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1DC8DA758(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, void, void, void, void, void))sub_1DC9F60C4);
}

unint64_t sub_1DC8DA608()
{
  unint64_t result = qword_1EAA9F058;
  if (!qword_1EAA9F058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9F058);
  }
  return result;
}

uint64_t sub_1DC8DA654(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1DC8863A8(&qword_1EAAA10A0);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1DC8DA6B8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1DC8DA6E4()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1DC8DA72C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1DC8DA758(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, void, void, void, void, void))sub_1DC9F613C);
}

uint64_t sub_1DC8DA758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, void, void, void, void, void, void))
{
  return a4(a1, a2, a3, v4[2], v4[3], v4[4], v4[5], v4[6], v4[7]);
}

uint64_t getEnumTagSinglePayload for DirectionOfArrival.Result.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for DirectionOfArrival.Result.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DC8DA8E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DirectionOfArrival.Result.CodingKeys()
{
  return &type metadata for DirectionOfArrival.Result.CodingKeys;
}

unsigned char *sub_1DC8DA91C(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DC8DA9E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for DirectionOfArrival.DomainError()
{
}

void type metadata accessor for DirectionOfArrival.Session()
{
}

unint64_t sub_1DC8DAA2C()
{
  unint64_t result = qword_1EAA9F090;
  if (!qword_1EAA9F090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9F090);
  }
  return result;
}

unint64_t sub_1DC8DAA7C()
{
  unint64_t result = qword_1EAA9F098;
  if (!qword_1EAA9F098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9F098);
  }
  return result;
}

unint64_t sub_1DC8DAACC()
{
  unint64_t result = qword_1EAA9F0A0;
  if (!qword_1EAA9F0A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9F0A0);
  }
  return result;
}

unint64_t sub_1DC8DAB1C()
{
  unint64_t result = qword_1EAA9F0A8;
  if (!qword_1EAA9F0A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9F0A8);
  }
  return result;
}

uint64_t sub_1DC8DAB88(uint64_t a1, uint64_t a2)
{
  return sub_1DC8DA5A4(a1, a2);
}

uint64_t sub_1DC8DABA0(uint64_t a1)
{
  return sub_1DC8DA588(a1);
}

uint64_t sub_1DC8DABB8@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 160) = a1;
  return sub_1DCB88DD8();
}

uint64_t sub_1DC8DABDC()
{
  return sub_1DC881920(v0, v1);
}

void sub_1DC8DABF4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5 >= v4) {
    unint64_t v6 = *(void *)(a1 + 16);
  }
  else {
    unint64_t v6 = *(void *)(a2 + 16);
  }
  uint64_t v27 = MEMORY[0x1E4FBC860];
  sub_1DC89831C();
  unint64_t v7 = v6;
  uint64_t v25 = a2;
  uint64_t v26 = a1;
  if (v6)
  {
    uint64_t v8 = (int *)(a1 + 32);
    uint64_t v9 = (int *)(a2 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v10 = v4;
    unint64_t v11 = v5;
    unint64_t v12 = v5;
    while (v4)
    {
      if (!v11) {
        goto LABEL_22;
      }
      int v13 = *v8;
      int v14 = *v9;
      unint64_t v15 = *(void *)(v27 + 16);
      if (v15 >= *(void *)(v27 + 24) >> 1)
      {
        unint64_t v22 = v10;
        unint64_t v23 = v12;
        sub_1DC89831C();
        unint64_t v12 = v23;
        unint64_t v10 = v22;
      }
      *(void *)(v27 + 16) = v15 + 1;
      uint64_t v16 = v27 + 8 * v15;
      --v11;
      *(_DWORD *)(v16 + 32) = v13;
      *(_DWORD *)(v16 + 36) = v14;
      --v4;
      ++v9;
      ++v8;
      if (!--v6) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v10 = v4;
    unint64_t v12 = v5;
LABEL_13:
    if (v10 <= v12)
    {
LABEL_20:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    while (v7 < v10)
    {
      if (v12 == v7) {
        goto LABEL_20;
      }
      if (v7 >= v12) {
        goto LABEL_24;
      }
      int v17 = *(_DWORD *)(v26 + 32 + 4 * v7);
      int v18 = *(_DWORD *)(v25 + 32 + 4 * v7);
      unint64_t v19 = *(void *)(v27 + 16);
      if (v19 >= *(void *)(v27 + 24) >> 1)
      {
        unint64_t v21 = v10;
        unint64_t v24 = v12;
        sub_1DC89831C();
        unint64_t v12 = v24;
        unint64_t v10 = v21;
      }
      ++v7;
      *(void *)(v27 + 16) = v19 + 1;
      uint64_t v20 = v27 + 8 * v19;
      *(_DWORD *)(v20 + 32) = v17;
      *(_DWORD *)(v20 + 36) = v18;
      if (v10 == v7) {
        goto LABEL_20;
      }
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
}

uint64_t sub_1DC8DAE14()
{
  _OWORD v6[3] = &unk_1F37E2540;
  v6[4] = &off_1F37E24A0;
  uint64_t v2 = sub_1DC8E7B80();
  v6[0] = v2;
  long long v3 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)v0;
  *(_OWORD *)(v2 + 32) = v3;
  *(void *)(v2 + 48) = *(void *)(v0 + 32);
  swift_retain();
  swift_retain();
  swift_retain();
  char v4 = sub_1DCA96424(v6, 0xD000000000000022, 0x80000001DCB91CE0);
  if (!v1) {
    LOBYTE(v0) = v4 & 1;
  }
  sub_1DC8818D0((uint64_t)v6);
  return v0 & 1;
}

uint64_t sub_1DC8DAEEC()
{
  return sub_1DC8DAE14() & 1;
}

SoundAnalysis::MovieRemix::Request __swiftcall MovieRemix.Request.init(inputChannelCount:inputSampleRate:)(Swift::Int inputChannelCount, Swift::Int inputSampleRate)
{
  *uint64_t v2 = inputChannelCount;
  v2[1] = inputSampleRate;
  result.inputSampleRate = inputSampleRate;
  result.inputChannelCount = inputChannelCount;
  return result;
}

uint64_t MovieRemix.Request.hash(into:)()
{
  return sub_1DCB891B8();
}

BOOL static MovieRemix.Request.== infix(_:_:)(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 0x10uLL) == 0;
}

uint64_t sub_1DC8DAF70(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x80000001DCB91CC0 || (sub_1DCB89018() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D61537475706E69 && a2 == 0xEF65746152656C70)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_1DCB89018();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1DC8DB080(char a1)
{
  if (a1) {
    return 0x6D61537475706E69;
  }
  else {
    return 0xD000000000000011;
  }
}

uint64_t sub_1DC8DB0C8()
{
  return sub_1DC8DB080(*v0);
}

uint64_t sub_1DC8DB0D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1DC8DAF70(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1DC8DB0F8(uint64_t a1)
{
  unint64_t v2 = sub_1DC8DB2A0();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC8DB134(uint64_t a1)
{
  unint64_t v2 = sub_1DC8DB2A0();

  return MEMORY[0x1F41862B0](a1, v2);
}

void MovieRemix.Request.encode(to:)()
{
  sub_1DC88D6B0();
  unint64_t v2 = v1;
  sub_1DC87E988(&qword_1EAA9F0B0);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v3);
  sub_1DC881A8C(v2, v2[3]);
  sub_1DC8DB2A0();
  sub_1DCB892B8();
  sub_1DCB88F08();
  if (!v0) {
    sub_1DCB88F08();
  }
  uint64_t v4 = sub_1DC8CD9A8();
  v5(v4);
  sub_1DC88D674();
}

unint64_t sub_1DC8DB2A0()
{
  unint64_t result = qword_1EAA9F0B8;
  if (!qword_1EAA9F0B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9F0B8);
  }
  return result;
}

uint64_t MovieRemix.Request.hashValue.getter()
{
  return sub_1DCB891F8();
}

void MovieRemix.Request.init(from:)()
{
  sub_1DC88D6B0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_1DC87E988(&qword_1EAA9F0C0);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v5);
  sub_1DC8D52C0();
  sub_1DC8DB2A0();
  sub_1DC8E7A44();
  if (!v0)
  {
    uint64_t v6 = sub_1DCB88DE8();
    uint64_t v7 = sub_1DCB88DE8();
    uint64_t v8 = sub_1DC8E76BC();
    v9(v8);
    *uint64_t v4 = v6;
    v4[1] = v7;
  }
  sub_1DC8818D0(v2);
  sub_1DC88D674();
}

uint64_t sub_1DC8DB468()
{
  return sub_1DCB891F8();
}

void sub_1DC8DB4C0()
{
}

void sub_1DC8DB4D8()
{
}

uint64_t MovieRemix.Session.finalResultPublisher.getter()
{
  return swift_retain();
}

Swift::Void __swiftcall MovieRemix.Session.yield(buffer:)(AVAudioPCMBuffer buffer)
{
  (*(void (**)(Class, void *))(v1 + 16))(buffer.super.super.isa, buffer.super._impl);
}

Swift::Void __swiftcall MovieRemix.Session.finish()()
{
  (*(void (**)(void))(v0 + 32))(0);
}

uint64_t MovieRemix.Session.finish(throwing:)()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t MovieRemix.DSPParameterTuple.key.getter()
{
  return *v0;
}

uint64_t MovieRemix.DSPParameterTuple.key.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*MovieRemix.DSPParameterTuple.key.modify())(void)
{
  return nullsub_1;
}

float MovieRemix.DSPParameterTuple.value.getter()
{
  return *(float *)(v0 + 4);
}

void MovieRemix.DSPParameterTuple.value.setter(float a1)
{
  *(float *)(v1 + 4) = a1;
}

uint64_t (*MovieRemix.DSPParameterTuple.value.modify())(void)
{
  return nullsub_1;
}

uint64_t MovieRemix.DSPParameterTuple.hash(into:)()
{
  return sub_1DCB891D8();
}

uint64_t static MovieRemix.DSPParameterTuple.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2) {
    return *(float *)(a1 + 4) == *(float *)(a2 + 4);
  }
  else {
    return sub_1DC88D2B4();
  }
}

uint64_t sub_1DC8DB640(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7955819 && a2 == 0xE300000000000000;
  if (v2 || (sub_1DCB89018() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_1DCB89018();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1DC8DB718(char a1)
{
  if (a1) {
    return 0x65756C6176;
  }
  else {
    return 7955819;
  }
}

uint64_t sub_1DC8DB744()
{
  return sub_1DC8DB718(*v0);
}

uint64_t sub_1DC8DB74C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1DC8DB640(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1DC8DB774(uint64_t a1)
{
  unint64_t v2 = sub_1DC8DB8F8();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC8DB7B0(uint64_t a1)
{
  unint64_t v2 = sub_1DC8DB8F8();

  return MEMORY[0x1F41862B0](a1, v2);
}

void MovieRemix.DSPParameterTuple.encode(to:)()
{
  sub_1DC8E79D0();
  unint64_t v2 = v1;
  sub_1DC87E988(&qword_1EAA9F0C8);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v3);
  sub_1DC8E799C();
  sub_1DC881A8C(v2, v2[3]);
  sub_1DC8DB8F8();
  sub_1DC8E7C68();
  sub_1DCB88F58();
  if (!v0) {
    sub_1DCB88EF8();
  }
  uint64_t v4 = sub_1DC8CD9A8();
  v5(v4);
  sub_1DC8E7A74();
}

unint64_t sub_1DC8DB8F8()
{
  unint64_t result = qword_1EAA9F0D0;
  if (!qword_1EAA9F0D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9F0D0);
  }
  return result;
}

uint64_t MovieRemix.DSPParameterTuple.hashValue.getter()
{
  return sub_1DCB891F8();
}

void MovieRemix.DSPParameterTuple.init(from:)()
{
  sub_1DC8E79D0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_1DC87E988(&qword_1EAA9F0D8);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v5);
  sub_1DC8D52C0();
  sub_1DC8DB8F8();
  sub_1DC8E7A44();
  if (!v0)
  {
    int v6 = sub_1DCB88E38();
    sub_1DCB88DD8();
    int v8 = v7;
    uint64_t v9 = sub_1DC8E76BC();
    v10(v9);
    *uint64_t v4 = v6;
    v4[1] = v8;
  }
  sub_1DC8818D0(v2);
  sub_1DC8E7A74();
}

uint64_t sub_1DC8DBACC()
{
  return sub_1DCB891F8();
}

void sub_1DC8DBB28()
{
}

void sub_1DC8DBB40()
{
}

uint64_t MovieRemix.FinalResult.algorithmVersion.getter()
{
  return *v0;
}

uint64_t MovieRemix.FinalResult.algorithmVersion.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*MovieRemix.FinalResult.algorithmVersion.modify())(void)
{
  return nullsub_1;
}

float MovieRemix.FinalResult.dialogueGain.getter()
{
  return *(float *)(v0 + 4);
}

void MovieRemix.FinalResult.dialogueGain.setter(float a1)
{
  *(float *)(v1 + 4) = a1;
}

uint64_t (*MovieRemix.FinalResult.dialogueGain.modify())(void)
{
  return nullsub_1;
}

float MovieRemix.FinalResult.ambienceGain.getter()
{
  return *(float *)(v0 + 8);
}

void MovieRemix.FinalResult.ambienceGain.setter(float a1)
{
  *(float *)(v1 + 8) = a1;
}

uint64_t (*MovieRemix.FinalResult.ambienceGain.modify())(void)
{
  return nullsub_1;
}

float MovieRemix.FinalResult.dialogueLoudness.getter()
{
  return *(float *)(v0 + 12);
}

void MovieRemix.FinalResult.dialogueLoudness.setter(float a1)
{
  *(float *)(v1 + 12) = a1;
}

uint64_t (*MovieRemix.FinalResult.dialogueLoudness.modify())(void)
{
  return nullsub_1;
}

float MovieRemix.FinalResult.ambienceLoudness.getter()
{
  return *(float *)(v0 + 16);
}

void MovieRemix.FinalResult.ambienceLoudness.setter(float a1)
{
  *(float *)(v1 + 16) = a1;
}

uint64_t (*MovieRemix.FinalResult.ambienceLoudness.modify())(void)
{
  return nullsub_1;
}

float MovieRemix.FinalResult.recordingLoudness.getter()
{
  return *(float *)(v0 + 20);
}

void MovieRemix.FinalResult.recordingLoudness.setter(float a1)
{
  *(float *)(v1 + 20) = a1;
}

uint64_t (*MovieRemix.FinalResult.recordingLoudness.modify())(void)
{
  return nullsub_1;
}

uint64_t MovieRemix.FinalResult.dspParameters.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MovieRemix.FinalResult.dspParameters.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*MovieRemix.FinalResult.dspParameters.modify())(void)
{
  return nullsub_1;
}

uint64_t MovieRemix.FinalResult.hash(into:)()
{
  sub_1DCB891D8();
  sub_1DCB891D8();
  sub_1DCB891D8();
  sub_1DCB891D8();
  sub_1DCB891D8();
  sub_1DCB891D8();

  return sub_1DC8A87D4();
}

uint64_t static MovieRemix.FinalResult.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && ((~vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vceqq_f32(*(float32x4_t *)(a1 + 4), *(float32x4_t *)(a2 + 4)), 0x1FuLL)), (int8x16_t)xmmword_1DCBBC360)) & 0xF) == 0? (BOOL v2 = *(float *)(a1 + 20) == *(float *)(a2 + 20)): (BOOL v2 = 0), v2))
  {
    return sub_1DC8DCFE0(*(void *)(a1 + 24), *(void *)(a2 + 24));
  }
  else
  {
    return sub_1DC88D2B4();
  }
}

uint64_t sub_1DC8DBDD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return sub_1DC88D2B4();
  }
  if (!v2 || a1 == a2) {
    return _s13SoundAnalysis17_SNClassificationC20supportsSecureCodingSbvgZ_0();
  }
  if (*(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32)) {
    return sub_1DC88D2B4();
  }
  uint64_t v3 = (unsigned __int8 *)(a1 + 33);
  uint64_t v4 = (unsigned __int8 *)(a2 + 33);
  uint64_t v5 = v2 - 1;
  do
  {
    uint64_t result = v5 == 0;
    if (!v5) {
      break;
    }
    int v8 = *v3++;
    int v7 = v8;
    int v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t sub_1DC8DBE3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1DCB86A18();
  sub_1DC89D4E0();
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  MEMORY[0x1F4188790](v6);
  unint64_t v10 = (char *)&v28 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v23 = 1;
    }
    else
    {
      uint64_t v12 = *(unsigned __int8 *)(v7 + 80);
      int v14 = *(void (**)(void))(v7 + 16);
      uint64_t v13 = v7 + 16;
      uint64_t v31 = v8;
      char v32 = v14;
      uint64_t v15 = (v12 + 32) & ~v12;
      uint64_t v16 = *(void *)(v13 + 56);
      uint64_t v33 = v13;
      uint64_t v29 = v16;
      uint64_t v30 = (void (**)(uint64_t, uint64_t))(v13 - 8);
      uint64_t v17 = v11 - 1;
      uint64_t v18 = v8;
      do
      {
        uint64_t v19 = a1;
        uint64_t v20 = v10;
        unint64_t v21 = v32;
        sub_1DC8E7C9C();
        v21();
        uint64_t v22 = a2;
        sub_1DC8E7C9C();
        v21();
        unint64_t v10 = v20;
        sub_1DC8E72F4((uint64_t)&unk_1EAA9F1B8);
        char v23 = sub_1DCB878C8();
        unint64_t v24 = *v30;
        (*v30)(v18, v4);
        v24((uint64_t)v20, v4);
        BOOL v26 = v17-- != 0;
        if ((v23 & 1) == 0) {
          break;
        }
        v15 += v29;
        a2 = v22;
        a1 = v19;
      }
      while (v26);
    }
  }
  else
  {
    char v23 = 0;
  }
  return v23 & 1;
}

uint64_t sub_1DC8DC02C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v4) {
    return 1;
  }
  sub_1DC8E7AFC();
  if (v5 == v6) {
    return 1;
  }
  sub_1DC89C89C(0, (unint64_t *)&qword_1EAA9C7B0);
  uint64_t v7 = *(void **)(v2 + 32);
  id v8 = *(id *)(v3 + 32);
  id v9 = v7;
  char v10 = sub_1DCB886A8();

  if ((v10 & 1) == 0) {
    return 0;
  }
  uint64_t v11 = (void **)(v3 + 40);
  uint64_t v12 = (void **)(v2 + 40);
  uint64_t v13 = v4 - 1;
  do
  {
    BOOL v14 = v13 == 0;
    if (!v13) {
      break;
    }
    uint64_t v16 = *v11++;
    uint64_t v15 = v16;
    uint64_t v17 = *v12++;
    id v18 = v15;
    id v19 = v17;
    char v20 = sub_1DCB886A8();

    --v13;
  }
  while ((v20 & 1) != 0);
  return v14;
}

uint64_t sub_1DC8DC134(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      char v8 = 1;
    }
    else
    {
      uint64_t v3 = (unsigned char *)(a1 + 32);
      uint64_t v4 = (unsigned char *)(a2 + 32);
      uint64_t v5 = v2 - 1;
      do
      {
        uint64_t v6 = v5;
        char v7 = *v3 ^ *v4;
        if (v7) {
          break;
        }
        --v5;
        ++v3;
        ++v4;
      }
      while (v6);
      char v8 = v7 ^ 1;
    }
  }
  else
  {
    char v8 = 0;
  }
  return v8 & 1;
}

uint64_t sub_1DC8DC19C()
{
  sub_1DC8E7968();
  uint64_t v2 = type metadata accessor for KShotSegment(0);
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  uint64_t v5 = (uint64_t *)((char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v3);
  char v8 = (uint64_t *)((char *)&v19 - v7);
  uint64_t v9 = *(void *)(v1 + 16);
  if (v9 != *(void *)(v0 + 16))
  {
LABEL_18:
    char v15 = 0;
    return v15 & 1;
  }
  if (v9 && v1 != v0)
  {
    unint64_t v10 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v11 = *(void *)(v6 + 72);
    uint64_t v12 = v9 - 1;
    while (1)
    {
      sub_1DC890A18(v1 + v10, (uint64_t)v8);
      sub_1DC890A18(v0 + v10, (uint64_t)v5);
      v13.i64[0] = v5[1];
      v14.i64[1] = v8[4];
      v13.i64[1] = v5[4];
      v14.i64[0] = v8[1];
      if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(v14, v13)), 0xFuLL))) & 1) == 0
        || *v8 != *v5
        || v8[2] != v5[2]
        || v8[3] != v5[3]
        || v8[5] != v5[5])
      {
        break;
      }
      char v15 = MEMORY[0x1E01A59A0]((char *)v8 + *(int *)(v2 + 20), (char *)v5 + *(int *)(v2 + 20));
      sub_1DC899BE8((uint64_t)v5);
      sub_1DC899BE8((uint64_t)v8);
      BOOL v17 = v12-- != 0;
      if (v15)
      {
        v10 += v11;
        if (v17) {
          continue;
        }
      }
      return v15 & 1;
    }
    sub_1DC899BE8((uint64_t)v5);
    sub_1DC899BE8((uint64_t)v8);
    goto LABEL_18;
  }
  char v15 = 1;
  return v15 & 1;
}

uint64_t sub_1DC8DC394(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = 0;
    uint64_t v128 = a2 + 32;
    uint64_t v129 = a1 + 32;
    uint64_t v127 = *(void *)(a1 + 16);
    while (2)
    {
      uint64_t v4 = 56 * v3;
      uint64_t v5 = (uint64_t *)(v129 + 56 * v3);
      uint64_t v6 = *v5;
      uint64_t v7 = v5[1];
      ++v3;
      uint64_t v9 = v5[2];
      uint64_t v8 = v5[3];
      uint64_t v10 = v5[4];
      uint64_t v11 = v5[5];
      int v12 = *((_DWORD *)v5 + 12);
      uint64_t v13 = *(void *)(v128 + v4);
      uint64_t v14 = *(void *)(v128 + v4 + 8);
      uint64_t v15 = *(void *)(v128 + v4 + 16);
      uint64_t v16 = *(void *)(v128 + v4 + 24);
      uint64_t v17 = *(void *)(v128 + v4 + 32);
      uint64_t v18 = *(void *)(v128 + v4 + 40);
      int v19 = *(_DWORD *)(v128 + v4 + 48);
      switch(v8 >> 28)
      {
        case 1u:
          if ((*(void *)(v128 + v4 + 24) & 0xF0000000) != 0x10000000) {
            return 0;
          }
          uint64_t v120 = *(void *)(v128 + v4 + 16);
          uint64_t v122 = *(void *)(v128 + v4 + 8);
          uint64_t v22 = *(void *)(v128 + v4);
          uint64_t v125 = v3;
          sub_1DC8A8D94(v13, v14, v120, v16);
          sub_1DC8E78C8();
          uint64_t v23 = sub_1DC8CD9A8();
          sub_1DC91BCA8(v23, v24);
          char v117 = v25;
          sub_1DC8A8CE4(v22, v122, v120, v16);
          sub_1DC8E789C();
          uint64_t v3 = v125;
          uint64_t v2 = v127;
          if ((v117 & 1) == 0) {
            return 0;
          }
          goto LABEL_211;
        case 2u:
          if ((*(void *)(v128 + v4 + 24) & 0xF0000000) != 0x20000000) {
            return 0;
          }
          uint64_t v123 = *(void *)(v128 + v4 + 8);
          uint64_t v126 = v3;
          BOOL v26 = v6 == v13 && v7 == v14;
          uint64_t v119 = *(void *)(v128 + v4);
          if (!v26)
          {
            uint64_t v121 = *(void *)(v128 + v4 + 16);
            char v27 = sub_1DCB89018();
            uint64_t v13 = v119;
            uint64_t v15 = v121;
            uint64_t v14 = v123;
            if ((v27 & 1) == 0) {
              return 0;
            }
          }
          sub_1DC8A8D94(v13, v14, v15, v16);
          sub_1DC8E78C8();
          sub_1DC91BCA8(v9, v15);
          char v118 = v28;
          sub_1DC8A8CE4(v119, v123, v15, v16);
          sub_1DC8E789C();
          uint64_t result = 0;
          if ((v118 & 1) == 0) {
            return result;
          }
          uint64_t v3 = v126;
          uint64_t v2 = v127;
          if (((((v8 & 1) == 0) ^ v16) & 1) == 0) {
            return result;
          }
          goto LABEL_211;
        case 3u:
          uint64_t v30 = *(void *)(v128 + v4 + 24) & 0xF0000000;
          uint64_t v31 = 805306368;
          goto LABEL_23;
        case 4u:
          uint64_t v30 = *(void *)(v128 + v4 + 24) & 0xF0000000;
          uint64_t v31 = 0x40000000;
LABEL_23:
          if (v30 != v31) {
            return 0;
          }
          if (v6 != v13 || v7 != v14)
          {
            uint64_t v33 = v3;
            char v34 = sub_1DCB89018();
            uint64_t v3 = v33;
            uint64_t v2 = v127;
            if ((v34 & 1) == 0) {
              return 0;
            }
          }
          goto LABEL_211;
        case 5u:
          if ((*(void *)(v128 + v4 + 24) & 0xF0000000) != 0x50000000 || v6 != v13 || v7 != v14) {
            return 0;
          }
          goto LABEL_211;
        case 6u:
          if ((*(void *)(v128 + v4 + 24) & 0xF0000000) != 0x60000000) {
            return 0;
          }
          unint64_t v37 = *(void *)(v6 + 16);
          if (v37 != *(void *)(v13 + 16)) {
            return 0;
          }
          if (v37) {
            BOOL v38 = v6 == v13;
          }
          else {
            BOOL v38 = 1;
          }
          if (v38) {
            goto LABEL_211;
          }
          if (*(void *)(v6 + 32) != *(void *)(v13 + 32) || *(void *)(v6 + 40) != *(void *)(v13 + 40))
          {
            uint64_t v40 = v3;
            uint64_t v41 = *(void *)(v128 + v4);
            char v42 = sub_1DCB89018();
            uint64_t v13 = v41;
            uint64_t v3 = v40;
            uint64_t v2 = v127;
            if ((v42 & 1) == 0) {
              return 0;
            }
          }
          if (v37 == 1) {
            goto LABEL_211;
          }
          uint64_t v43 = (void *)(v13 + 56);
          char v44 = (void *)(v6 + 56);
          unint64_t v45 = 1;
          while (2)
          {
            if (v45 >= v37)
            {
              __break(1u);
              goto LABEL_216;
            }
            BOOL v46 = *(v44 - 1) == *(v43 - 1) && *v44 == *v43;
            if (v46 || (uint64_t v47 = v3, v48 = sub_1DCB89018(), v3 = v47, v2 = v127, (v48 & 1) != 0))
            {
              ++v45;
              v43 += 2;
              v44 += 2;
              if (v37 == v45) {
                goto LABEL_211;
              }
              continue;
            }
            return 0;
          }
        case 7u:
          if ((*(void *)(v128 + v4 + 24) & 0xF0000000) != 0x70000000) {
            return 0;
          }
          unint64_t v49 = *(void *)(v6 + 16);
          if (v49 != *(void *)(v13 + 16)) {
            return 0;
          }
          if (v49) {
            BOOL v50 = v6 == v13;
          }
          else {
            BOOL v50 = 1;
          }
          if (v50) {
            goto LABEL_154;
          }
          double v51 = *(double *)(v6 + 48);
          uint64_t v52 = *(void *)(v6 + 56);
          double v53 = *(double *)(v13 + 48);
          uint64_t v54 = *(void *)(v13 + 56);
          if (*(void *)(v6 + 32) == *(void *)(v13 + 32) && *(void *)(v6 + 40) == *(void *)(v13 + 40))
          {
            if (v51 != v53 || v52 != v54) {
              return 0;
            }
          }
          else
          {
            uint64_t v16 = *(void *)(v128 + v4 + 8);
            uint64_t v56 = v3;
            sub_1DCB89018();
            uint64_t result = sub_1DC8E7A68();
            if ((v57 & 1) == 0) {
              return result;
            }
            BOOL v58 = v51 == v53 && v52 == v54;
            uint64_t v2 = v127;
            uint64_t v3 = v56;
            uint64_t v14 = v16;
            if (!v58) {
              return result;
            }
          }
          if (v49 != 1)
          {
            uint64_t v86 = 0;
            unint64_t v87 = 1;
            while (v87 < v49)
            {
              double v88 = *(double *)(v6 + v86 + 80);
              uint64_t v89 = *(void *)(v6 + v86 + 88);
              sub_1DC8E7BC0();
              if (v26 && v90 == v91)
              {
                if (v88 != v53 || v89 != v16) {
                  return 0;
                }
              }
              else
              {
                uint64_t v93 = v14;
                uint64_t v94 = v3;
                sub_1DCB89018();
                uint64_t result = sub_1DC8E7A68();
                if ((v95 & 1) == 0) {
                  return result;
                }
                BOOL v96 = v88 == v53 && v89 == v16;
                uint64_t v2 = v127;
                uint64_t v3 = v94;
                uint64_t v14 = v93;
                if (!v96) {
                  return result;
                }
              }
              ++v87;
              v86 += 32;
              if (v49 == v87) {
                goto LABEL_154;
              }
            }
LABEL_216:
            __break(1u);
            JUMPOUT(0x1DC8DCAC4);
          }
LABEL_154:
          if (v7 != v14) {
            return 0;
          }
LABEL_211:
          if (v3 == v2) {
            return 1;
          }
          continue;
        case 8u:
          if (v12) {
            BOOL v59 = 0;
          }
          else {
            BOOL v59 = v8 == 0x80000000;
          }
          if (v59 && (v9 | v7 | v6 | v10 | v11) == 0)
          {
            sub_1DC8E7884();
            if (!v26) {
              return 0;
            }
            BOOL v76 = !v73 && v16 == v74;
            if (!v76 || (v15 | v75 | v72 | v71 | v18) != 0) {
              return 0;
            }
          }
          else
          {
            uint64_t v61 = v9 | v7 | v10 | v11;
            if (v12) {
              BOOL v62 = 0;
            }
            else {
              BOOL v62 = v8 == 0x80000000;
            }
            if (v62 && v6 == 1 && v61 == 0)
            {
              sub_1DC8E7884();
              if (!v26) {
                return 0;
              }
              uint64_t result = 0;
              if (v67) {
                return result;
              }
              if (v16 != v68 || v66 != 1) {
                return result;
              }
            }
            else
            {
              if (v12) {
                BOOL v78 = 0;
              }
              else {
                BOOL v78 = v8 == 0x80000000;
              }
              if (v78 && v6 == 2 && v61 == 0)
              {
                sub_1DC8E7884();
                if (!v26) {
                  return 0;
                }
                uint64_t result = 0;
                if (v82) {
                  return result;
                }
                if (v16 != v83 || v81 != 2) {
                  return result;
                }
              }
              else if (v12 || (v8 == 0x80000000 ? (BOOL v98 = v6 == 3) : (BOOL v98 = 0), !v98 || v61))
              {
                if (v12 || (v8 == 0x80000000 ? (BOOL v103 = v6 == 4) : (BOOL v103 = 0), !v103 || v61))
                {
                  if (v12 || (v8 == 0x80000000 ? (BOOL v108 = v6 == 5) : (BOOL v108 = 0), !v108 || v61))
                  {
                    sub_1DC8E7884();
                    if (!v26) {
                      return 0;
                    }
                    uint64_t result = 0;
                    if (v114) {
                      return result;
                    }
                    if (v16 != v115 || v113 != 6) {
                      return result;
                    }
                  }
                  else
                  {
                    sub_1DC8E7884();
                    if (!v26) {
                      return 0;
                    }
                    uint64_t result = 0;
                    if (v110) {
                      return result;
                    }
                    if (v16 != v111 || v109 != 5) {
                      return result;
                    }
                  }
                }
                else
                {
                  sub_1DC8E7884();
                  if (!v26) {
                    return 0;
                  }
                  uint64_t result = 0;
                  if (v105) {
                    return result;
                  }
                  if (v16 != v106 || v104 != 4) {
                    return result;
                  }
                }
              }
              else
              {
                sub_1DC8E7884();
                if (!v26) {
                  return 0;
                }
                uint64_t result = 0;
                if (v100) {
                  return result;
                }
                if (v16 != v101 || v99 != 3) {
                  return result;
                }
              }
            }
            if (v15 | v69 || v18 | v65) {
              return result;
            }
          }
          goto LABEL_211;
        default:
          if ((v16 & 0xF0000000) != 0) {
            return 0;
          }
          uint64_t v124 = v3;
          v136[0] = *v5;
          v136[1] = v7;
          v136[2] = v9;
          char v137 = v8 & 1;
          int v138 = HIDWORD(v8);
          uint64_t v139 = v10;
          uint64_t v140 = v11;
          int v141 = v12;
          v130[0] = v13;
          v130[1] = v14;
          v130[2] = v15;
          char v131 = v16 & 1;
          int v132 = HIDWORD(v16);
          uint64_t v133 = v17;
          uint64_t v134 = v18;
          int v135 = v19;
          sub_1DC8A6878((uint64_t)v136);
          sub_1DC8A6878((uint64_t)v130);
          uint64_t v20 = sub_1DC8C213C();
          char v21 = sub_1DC8E597C(v20, v10);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v21 & 1) == 0) {
            return 0;
          }
          uint64_t v3 = v124;
          uint64_t v2 = v127;
          goto LABEL_211;
      }
    }
  }
  return 1;
}

uint64_t sub_1DC8DCAE8(void *a1, void *a2)
{
  unint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t result = a1[4];
  if (result != a2[4] || a1[5] != a2[5])
  {
    sub_1DCB89018();
    uint64_t result = sub_1DC8E7A68();
    if ((v7 & 1) == 0) {
      return result;
    }
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v8 = a2 + 7;
  uint64_t v9 = a1 + 7;
  unint64_t v10 = 1;
  while (v10 < v2)
  {
    uint64_t result = *(v9 - 1);
    if (result != *(v8 - 1) || *v9 != *v8)
    {
      uint64_t result = sub_1DCB89018();
      if ((result & 1) == 0) {
        return 0;
      }
    }
    ++v10;
    v8 += 2;
    v9 += 2;
    if (v2 == v10) {
      return 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1DC8DCBB4(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v5) {
    return 1;
  }
  sub_1DC8E7968();
  if (v6 == v7) {
    return 1;
  }
  uint64_t result = *(void *)(v3 + 32);
  double v9 = *(double *)(v3 + 48);
  uint64_t v10 = *(void *)(v3 + 56);
  double v11 = *(double *)(v2 + 48);
  uint64_t v12 = *(void *)(v2 + 56);
  BOOL v13 = result == *(void *)(v2 + 32) && *(void *)(v3 + 40) == *(void *)(v2 + 40);
  if (v13)
  {
    if (v9 == v11 && v10 == v12) {
      goto LABEL_19;
    }
    return 0;
  }
  sub_1DCB89018();
  uint64_t result = sub_1DC8E7A68();
  if ((v14 & 1) == 0) {
    return result;
  }
  if (v9 != v11 || v10 != v12) {
    return result;
  }
LABEL_19:
  if (v5 == 1) {
    return 1;
  }
  uint64_t v17 = 0;
  unint64_t v18 = 1;
  while (v18 < v5)
  {
    double v19 = *(double *)(v3 + v17 + 80);
    uint64_t v20 = *(void *)(v3 + v17 + 88);
    sub_1DC8E7BC0();
    if (v13 && v21 == v22)
    {
      if (v19 != v11 || v20 != v4) {
        return 0;
      }
    }
    else
    {
      sub_1DCB89018();
      uint64_t result = sub_1DC8E7A68();
      if ((v24 & 1) == 0) {
        return result;
      }
      if (v19 != v11 || v20 != v4) {
        return result;
      }
    }
    ++v18;
    v17 += 32;
    uint64_t result = 1;
    if (v5 == v18) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1DC8DCCEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return sub_1DC88D2B4();
  }
  if (!v2 || a1 == a2) {
    return _s13SoundAnalysis17_SNClassificationC20supportsSecureCodingSbvgZ_0();
  }
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32)) {
    return sub_1DC88D2B4();
  }
  uint64_t v3 = (double *)(a1 + 40);
  uint64_t v4 = (double *)(a2 + 40);
  uint64_t v5 = v2 - 1;
  do
  {
    uint64_t result = v5 == 0;
    if (!v5) {
      break;
    }
    double v7 = *v3++;
    double v8 = v7;
    double v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

int32x2_t sub_1DC8DCD50(int64x2_t *a1, int64x2_t *a2)
{
  uint64_t v2 = a1[1].i64[0];
  if (v2 != a2[1].i64[0])
  {
LABEL_8:
    sub_1DC88D2B4();
    return result;
  }
  if (v2 && a1 != a2)
  {
    if (a1[2].i64[0] != a2[2].i64[0] || a1[2].i64[1] != a2[2].i64[1]) {
      goto LABEL_8;
    }
    uint64_t v5 = a1 + 3;
    uint64_t v6 = a2 + 3;
    uint64_t v7 = v2 - 1;
    do
    {
      if (!v7) {
        break;
      }
      int64x2_t v8 = *v5++;
      int64x2_t v9 = v8;
      int64x2_t v10 = *v6++;
      int32x2_t result = vmovn_s64(vceqq_s64(v9, v10));
      --v7;
    }
    while ((result.i32[0] & result.i32[1] & 1) != 0);
  }
  return result;
}

uint64_t sub_1DC8DCDCC(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = a1 + 32;
  uint64_t v4 = a2 + 32;
  if ((sub_1DC8DCEB4(*(void **)(a1 + 32), *(void **)(a2 + 32)) & 1) == 0) {
    return 0;
  }
  if (v2 == 1) {
    return 1;
  }
  unint64_t v6 = 1;
  uint64_t result = 1;
  while (v6 < v2)
  {
    uint64_t v7 = *(void **)(v3 + 8 * v6);
    int64x2_t v8 = *(void **)(v4 + 8 * v6);
    uint64_t v9 = v7[2];
    if (v9 != v8[2]) {
      return 0;
    }
    if (v9) {
      BOOL v10 = v7 == v8;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      if (v7[4] != v8[4]) {
        return 0;
      }
      double v11 = v7 + 5;
      uint64_t v12 = v8 + 5;
      for (uint64_t i = v9 - 1; i; --i)
      {
        uint64_t v15 = *v11++;
        uint64_t v14 = v15;
        uint64_t v16 = *v12++;
        if (v14 != v16) {
          return 0;
        }
      }
    }
    if (++v6 == v2) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1DC8DCEB4(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return sub_1DC88D2B4();
  }
  if (!v2 || a1 == a2) {
    return _s13SoundAnalysis17_SNClassificationC20supportsSecureCodingSbvgZ_0();
  }
  if (a1[4] != a2[4]) {
    return sub_1DC88D2B4();
  }
  uint64_t v3 = a1 + 5;
  uint64_t v4 = a2 + 5;
  uint64_t v5 = v2 - 1;
  do
  {
    uint64_t result = v5 == 0;
    if (!v5) {
      break;
    }
    uint64_t v8 = *v3++;
    uint64_t v7 = v8;
    uint64_t v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t sub_1DC8DCF18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return sub_1DC88D2B4();
  }
  if (!v2 || a1 == a2) {
    return _s13SoundAnalysis17_SNClassificationC20supportsSecureCodingSbvgZ_0();
  }
  if (*(float *)(a1 + 32) != *(float *)(a2 + 32)) {
    return sub_1DC88D2B4();
  }
  uint64_t v3 = (float *)(a1 + 36);
  uint64_t v4 = (float *)(a2 + 36);
  uint64_t v5 = v2 - 1;
  do
  {
    uint64_t result = v5 == 0;
    if (!v5) {
      break;
    }
    float v7 = *v3++;
    float v8 = v7;
    float v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

uint64_t sub_1DC8DCF7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return sub_1DC88D2B4();
  }
  if (!v2 || a1 == a2) {
    return _s13SoundAnalysis17_SNClassificationC20supportsSecureCodingSbvgZ_0();
  }
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
    return sub_1DC88D2B4();
  }
  uint64_t v3 = (int *)(a1 + 36);
  uint64_t v4 = (int *)(a2 + 36);
  uint64_t v5 = v2 - 1;
  do
  {
    uint64_t result = v5 == 0;
    if (!v5) {
      break;
    }
    int v8 = *v3++;
    int v7 = v8;
    int v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

BOOL sub_1DC8DCFE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = v2 - 1;
  uint64_t v4 = (float *)(a2 + 36);
  uint64_t v5 = (float *)(a1 + 36);
  do
  {
    BOOL result = *v5 == *v4 && *((_DWORD *)v5 - 1) == *((_DWORD *)v4 - 1);
    BOOL v9 = v3-- != 0;
    if (!result) {
      break;
    }
    v4 += 2;
    v5 += 2;
  }
  while (v9);
  return result;
}

uint64_t sub_1DC8DD054(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return sub_1DC88D2B4();
  }
  if (!v2 || a1 == a2) {
    return _s13SoundAnalysis17_SNClassificationC20supportsSecureCodingSbvgZ_0();
  }
  uint64_t v3 = v2 - 1;
  uint64_t v4 = (void *)(a2 + 48);
  uint64_t v5 = (void *)(a1 + 48);
  do
  {
    uint64_t result = *(v5 - 2) == *(v4 - 2)
          && *((_DWORD *)v5 - 2) == *((_DWORD *)v4 - 2)
          && *((_DWORD *)v5 - 1) == *((_DWORD *)v4 - 1)
          && *v5 == *v4;
    BOOL v11 = v3-- != 0;
    if (result != 1) {
      break;
    }
    v4 += 3;
    v5 += 3;
  }
  while (v11);
  return result;
}

uint64_t sub_1DC8DD0D0()
{
  sub_1DC8E7AFC();
  uint64_t v3 = (void *)(v2 >> 62);
  if (v2 >> 62)
  {
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_1DCB88CC8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)v0 >> 62)
  {
    if (v0 < 0) {
      uint64_t v5 = v0;
    }
    else {
      uint64_t v5 = v0 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    sub_1DCB88CC8();
    sub_1DC8C213C();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v4 != v5) {
    goto LABEL_24;
  }
  if (v4)
  {
    uint64_t v6 = v1 & 0xFFFFFFFFFFFFFF8;
    if (v1 < 0) {
      uint64_t v6 = v1;
    }
    if (!v3) {
      uint64_t v6 = (v1 & 0xFFFFFFFFFFFFFF8) + 32;
    }
    uint64_t v7 = v0 & 0xFFFFFFFFFFFFFF8;
    uint64_t v8 = (v0 & 0xFFFFFFFFFFFFFF8) + 32;
    if (v0 < 0) {
      uint64_t v7 = v0;
    }
    if ((unint64_t)v0 >> 62) {
      uint64_t v8 = v7;
    }
    if (v6 != v8)
    {
      if (v4 < 0) {
        goto LABEL_45;
      }
      unint64_t v20 = v1 & 0xC000000000000001;
      if ((v1 & 0xC000000000000001) != 0) {
LABEL_46:
      }
        id v9 = (id)MEMORY[0x1E01A7AE0](0, v1);
      else {
        id v9 = *(id *)(v1 + 32);
      }
      uint64_t v3 = v9;
      sub_1DC8A42E0(0, (v0 & 0xC000000000000001) == 0, v0);
      if ((v0 & 0xC000000000000001) != 0) {
        id v10 = (id)MEMORY[0x1E01A7AE0](0, v0);
      }
      else {
        id v10 = *(id *)(v0 + 32);
      }
      BOOL v11 = v10;
      sub_1DC89C89C(0, (unint64_t *)&qword_1EAA9C7A0);
      char v12 = sub_1DCB886A8();

      if (v12)
      {
        if (v4 != 1)
        {
          uint64_t v15 = 5;
          while (1)
          {
            if (v15 - 4 >= v4)
            {
              __break(1u);
              goto LABEL_39;
            }
            if (v20) {
              id v16 = (id)MEMORY[0x1E01A7AE0](v15 - 4, v1);
            }
            else {
              id v16 = *(id *)(v1 + 8 * v15);
            }
            uint64_t v3 = v16;
            if ((v0 & 0xC000000000000001) != 0)
            {
              id v17 = (id)MEMORY[0x1E01A7AE0](v15 - 4, v0);
            }
            else
            {
              if ((unint64_t)(v15 - 4) >= *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
LABEL_45:
                __break(1u);
                goto LABEL_46;
              }
              id v17 = *(id *)(v0 + 8 * v15);
            }
            unint64_t v18 = v17;
            char v13 = sub_1DCB886A8();

            if (v13)
            {
              uint64_t v19 = 2 - v4 + v15++;
              if (v19 != 5) {
                continue;
              }
            }
            return v13 & 1;
          }
        }
        goto LABEL_23;
      }
LABEL_24:
      char v13 = 0;
      return v13 & 1;
    }
  }
LABEL_23:
  char v13 = 1;
  return v13 & 1;
}

uint64_t sub_1DC8DD324(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001DCB91BB0 || (sub_1DCB89018() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v5 = a1 == 0x6575676F6C616964 && a2 == 0xEC0000006E696147;
    if (v5 || (sub_1DCB89018() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v6 = a1 == 0x65636E6569626D61 && a2 == 0xEC0000006E696147;
      if (v6 || (sub_1DCB89018() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0xD000000000000010 && a2 == 0x80000001DCB91BF0 || (sub_1DCB89018() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else if (a1 == 0xD000000000000010 && a2 == 0x80000001DCB91C10 || (sub_1DCB89018() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 4;
      }
      else if (a1 == 0xD000000000000011 && a2 == 0x80000001DCB91C30 || (sub_1DCB89018() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 5;
      }
      else if (a1 == 0x6D61726150707364 && a2 == 0xED00007372657465)
      {
        swift_bridgeObjectRelease();
        return 6;
      }
      else
      {
        char v8 = sub_1DCB89018();
        swift_bridgeObjectRelease();
        if (v8) {
          return 6;
        }
        else {
          return 7;
        }
      }
    }
  }
}

uint64_t sub_1DC8DD620()
{
  return 7;
}

unint64_t sub_1DC8DD628(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6575676F6C616964;
      break;
    case 2:
      unint64_t result = 0x65636E6569626D61;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
      unint64_t result = 0x6D61726150707364;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1DC8DD70C()
{
  return sub_1DC8DD628(*v0);
}

uint64_t sub_1DC8DD714@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1DC8DD324(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1DC8DD73C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1DC8DD620();
  *a1 = result;
  return result;
}

uint64_t sub_1DC8DD764(uint64_t a1)
{
  unint64_t v2 = sub_1DC8E5C80();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC8DD7A0(uint64_t a1)
{
  unint64_t v2 = sub_1DC8E5C80();

  return MEMORY[0x1F41862B0](a1, v2);
}

void MovieRemix.FinalResult.encode(to:)()
{
  sub_1DC8E7B20();
  uint64_t v3 = v2;
  uint64_t v4 = sub_1DC87E988(&qword_1EAA9F0E0);
  sub_1DC89D4E0();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  sub_1DC8E799C();
  sub_1DC881A8C(v3, v3[3]);
  sub_1DC8E5C80();
  sub_1DC8E7C68();
  sub_1DCB88F58();
  if (!v0)
  {
    sub_1DC8E77F4();
    sub_1DC8E77F4();
    sub_1DC8E77F4();
    sub_1DC8E77F4();
    sub_1DC8E77F4();
    sub_1DC87E988(&qword_1EAA9F0F0);
    sub_1DC8E5D18((uint64_t)&unk_1EAA9F0F8);
    sub_1DCB88F18();
  }
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
  sub_1DC89DB64();
}

uint64_t MovieRemix.FinalResult.hashValue.getter()
{
  return sub_1DCB891F8();
}

void MovieRemix.FinalResult.init(from:)()
{
  sub_1DC8E7B20();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_1DC87E988(&qword_1EAA9F108);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v5);
  sub_1DC8D52C0();
  sub_1DC8E5C80();
  sub_1DCB89298();
  if (!v0)
  {
    int v6 = sub_1DCB88E38();
    sub_1DC8E77C4();
    int v8 = v7;
    sub_1DC8E77C4();
    int v10 = v9;
    sub_1DC8E77C4();
    int v12 = v11;
    sub_1DC8E77C4();
    int v14 = v13;
    sub_1DC8E77C4();
    int v16 = v15;
    sub_1DC87E988(&qword_1EAA9F0F0);
    sub_1DC8E5D18((uint64_t)&unk_1EAA9F110);
    sub_1DCB88DF8();
    uint64_t v17 = sub_1DC8D5364();
    v18(v17);
    *(_DWORD *)uint64_t v4 = v6;
    *(_DWORD *)(v4 + 4) = v8;
    *(_DWORD *)(v4 + 8) = v10;
    *(_DWORD *)(v4 + 12) = v12;
    *(_DWORD *)(v4 + 16) = v14;
    *(_DWORD *)(v4 + 20) = v16;
    *(void *)(v4 + 24) = v19;
  }
  sub_1DC8818D0(v2);
  sub_1DC89DB64();
}

uint64_t sub_1DC8DDC88()
{
  return sub_1DCB891F8();
}

void sub_1DC8DDCE8()
{
}

void sub_1DC8DDD00()
{
}

void sub_1DC8DDD1C()
{
  sub_1DC88D6B0();
  uint64_t v2 = v1;
  v40[5] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = sub_1DCB86A18();
  sub_1DC89D4E0();
  uint64_t v5 = v4;
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  int v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  int v11 = (char *)&v36 - v10;
  if (v2
    || (type metadata accessor for SoundAnalysisBundleMarker(),
        uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(),
        id v13 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata),
        sub_1DC8E5C10(v13),
        v14))
  {
    uint64_t v37 = v0;
    sub_1DC87E988((uint64_t *)&unk_1EAA9C700);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1DCBB93B0;
    swift_bridgeObjectRetain();
    *(void *)(inited + 32) = sub_1DCB877D8();
    uint64_t v16 = sub_1DCAE854C(inited);
    swift_setDeallocating();
    sub_1DC937718();
    id v17 = objc_allocWithZone((Class)type metadata accessor for SNDSPConfiguration());
    id v18 = sub_1DC9B3224(v16);
    type metadata accessor for SNDSPGraphLoader();
    uint64_t v19 = sub_1DC9B1474((uint64_t)v18);
    if (v19)
    {
      unint64_t v20 = (void *)v19;
      sub_1DCB5EC24(v19);
      uint64_t v21 = (void *)sub_1DCB87908();
      id v22 = sub_1DCB60550(v20, v21);

      sub_1DC8E7B68();
      sub_1DCB86928();
      sub_1DC89C89C(0, (unint64_t *)&qword_1EAA9C6F0);
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v9, v11, v3);
      id v23 = sub_1DC8DE0BC((uint64_t)v9);
      if (v23)
      {
        char v24 = v23;
        id v39 = v23;
        id v25 = v22;
        uint64_t v26 = v37;
        sub_1DC8DE158((uint64_t)&v39, (uint64_t)v40, (uint64_t)v25, &v38);
        if (v26)
        {

          uint64_t v27 = sub_1DC8E77AC();
          v28(v27);
        }
        else
        {

          sub_1DCB5F1F8((uint64_t)v20);
          sub_1DCB5F5A0((uint64_t)v20);

          uint64_t v34 = sub_1DC8E77AC();
          v35(v34);
        }
      }
      else
      {
        sub_1DC8E6E08();
        sub_1DC883884();
        sub_1DC8E7710(v30, 8);

        uint64_t v31 = sub_1DC8E77AC();
        v32(v31);
      }
    }
    else
    {
      sub_1DC8E6E08();
      sub_1DC883884();
      sub_1DC8E7710(v29, 7);
    }
  }
  else
  {
    sub_1DC8E6E08();
    sub_1DC883884();
    sub_1DC8E7710(v33, 6);
  }
  sub_1DC88D674();
}

id sub_1DC8DE0BC(uint64_t a1)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v3 = (void *)sub_1DCB86948();
  id v4 = objc_msgSend(v2, sel_initWithContentsOfURL_, v3);

  uint64_t v5 = sub_1DCB86A18();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return v4;
}

uint64_t sub_1DC8DE158(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (!a1)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (a2 - a1 >= 0x100000000)
  {
LABEL_7:
    uint64_t result = sub_1DCB88C58();
    __break(1u);
    return result;
  }
  uint64_t result = sub_1DCB5A348(a3, a1, a2 - a1, 3697, 0, 0);
  if (!result)
  {
    type metadata accessor for SNError();
    id v6 = sub_1DCA14B2C(0xD000000000000017, 0x80000001DCB90E90, 1, 0, 0xD000000000000025, 0x80000001DCB91E10);
    uint64_t result = swift_willThrow();
    *a4 = v6;
  }
  return result;
}

void sub_1DC8DE274(void *a1)
{
  id v2 = (void *)sub_1DC8E7640();
  id v3 = sub_1DCB60550(a1, v2);

  if (!sub_1DCB5AAB4((uint64_t)v3))
  {
    sub_1DC8A1D40();
    sub_1DC883884();
    sub_1DC8E7710(v4, 5);
  }
}

void sub_1DC8DE318(void *a1)
{
  id v2 = (void *)sub_1DC8E7640();
  id v3 = sub_1DCB60550(a1, v2);

  if (!sub_1DCB5AAB4((uint64_t)v3))
  {
    sub_1DC8A1D40();
    sub_1DC883884();
    *id v4 = 5;
    swift_willThrow();
  }
}

void sub_1DC8DE3C4()
{
  sub_1DC8E7B20();
  id v2 = (void *)sub_1DC8E7640();
  id v3 = sub_1DC8E784C(v2);

  uint64_t v4 = sub_1DC8E7868(v3, 23777);
  if (v0)
  {
  }
  else
  {
    uint64_t v5 = (void *)v4;

    if (v5)
    {
      sub_1DC89C89C(0, (unint64_t *)&qword_1EAA9C7A0);
      id v6 = v5;
      sub_1DCB87C28();

      sub_1DC8E6E08();
      sub_1DC883884();
      sub_1DC8E7710(v8, 9);
    }
    else
    {
      sub_1DC8E6E08();
      sub_1DC883884();
      sub_1DC8E7710(v7, 9);
    }
  }
  sub_1DC8E7890();
}

uint64_t sub_1DC8DE5F4()
{
  id v2 = (void *)sub_1DC8E7640();
  id v3 = sub_1DC8E784C(v2);

  uint64_t v4 = sub_1DC8E7868(v3, 23778);
  if (v0)
  {
  }
  else
  {
    id v6 = (void *)v4;

    if (v6)
    {
      sub_1DC89C89C(0, (unint64_t *)&qword_1EAA9C7A0);
      id v7 = v6;
      sub_1DCB87C28();

      sub_1DC8E6E08();
      sub_1DC883884();
      sub_1DC8E7710(v9, 10);
    }
    else
    {
      sub_1DC8E6E08();
      sub_1DC883884();
      sub_1DC8E7710(v8, 10);
    }
  }
  return sub_1DC8E7890();
}

void sub_1DC8DE86C()
{
  sub_1DC8E7B20();
  id v2 = (void *)sub_1DC8E7640();
  id v3 = sub_1DC8E784C(v2);

  uint64_t v4 = sub_1DC8E7868(v3, 23779);
  if (!v0)
  {
    uint64_t v5 = (void *)v4;

    if (v5)
    {
      sub_1DC89C89C(0, (unint64_t *)&qword_1EAA9C7A0);
      id v6 = v5;
      sub_1DCB87C28();
    }
    if (qword_1EAA9C658 != -1) {
      swift_once();
    }
    uint64_t v7 = sub_1DCB86FE8();
    sub_1DC89F57C(v7, (uint64_t)qword_1EAAFF810);
    uint64_t v8 = (void *)sub_1DCB86FC8();
    os_log_type_t v9 = sub_1DCB88468();
    if (sub_1DC8E7740(v9))
    {
      uint64_t v10 = (_WORD *)sub_1DC8E78F4();
      sub_1DC8E7944(v10);
      sub_1DC8E76D4(&dword_1DC873000, v11, v12, "Movie Remix: Getting Statistics from AUAmbienceLeveler failed.");
      sub_1DC8E7728();
    }

    sub_1DC8E6E08();
    sub_1DC883884();
    sub_1DC8E7710(v13, 9);
    id v3 = v5;
  }

  sub_1DC8E7890();
}

uint64_t sub_1DC8DEAF8()
{
  id v2 = (void *)sub_1DC8E7640();
  id v3 = sub_1DC8E784C(v2);

  uint64_t v4 = sub_1DC8E7868(v3, 23780);
  if (!v0)
  {
    uint64_t v5 = (void *)v4;

    if (v5)
    {
      sub_1DC89C89C(0, (unint64_t *)&qword_1EAA9C7A0);
      id v6 = v5;
      sub_1DCB87C28();
    }
    if (qword_1EAA9C658 != -1) {
      swift_once();
    }
    uint64_t v7 = sub_1DCB86FE8();
    sub_1DC89F57C(v7, (uint64_t)qword_1EAAFF810);
    uint64_t v8 = (void *)sub_1DCB86FC8();
    os_log_type_t v9 = sub_1DCB88468();
    if (sub_1DC8E7740(v9))
    {
      uint64_t v10 = (_WORD *)sub_1DC8E78F4();
      sub_1DC8E7944(v10);
      sub_1DC8E76D4(&dword_1DC873000, v11, v12, "Movie Remix: Getting Statistics 4ccs from AUAmbienceLeveler failed.");
      sub_1DC8E7728();
    }

    sub_1DC8E6E08();
    sub_1DC883884();
    sub_1DC8E7710(v13, 10);
    id v3 = v5;
  }

  return sub_1DC8E7890();
}

unint64_t sub_1DC8DEDCC()
{
  unint64_t result = sub_1DC8DEEB4();
  uint64_t v2 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_14:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return v2;
  }
  else
  {
    while (!__OFSUB__(3, result))
    {
      if ((0xF000000000000003 - result) >> 61 != 7) {
        goto LABEL_16;
      }
      unint64_t v3 = 8 * (3 - result);
      unint64_t v4 = v3 - 33;
      int v5 = v1 << (v3 & 0x18);
      if (v3 >= 0x20) {
        int v5 = 0;
      }
      int v6 = v1 >> ((-8 * (3 - result)) & 0x18);
      if (v3 <= 0xFFFFFFFFFFFFFFE0) {
        int v6 = 0;
      }
      if (((3 - result) & 0x1000000000000000) != 0) {
        int v7 = v6;
      }
      else {
        int v7 = v5;
      }
      if (v4 < 0xFFFFFFFFFFFFFFBFLL) {
        int v7 = 0;
      }
      uint64_t v2 = v7 | v2;
      unint64_t result = sub_1DC8DEEB4();
      if ((v1 & 0x100) != 0) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  return result;
}

unint64_t sub_1DC8DEEB4()
{
  unint64_t v2 = v0[1];
  unint64_t v1 = v0[2];
  unint64_t v3 = *v0;
  if ((v2 & 0x2000000000000000) != 0) {
    unint64_t v4 = HIBYTE(v2) & 0xF;
  }
  else {
    unint64_t v4 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (v1 >> 14 == 4 * v4) {
    return 0;
  }
  uint64_t v6 = (v3 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0) {
    LOBYTE(v6) = 1;
  }
  if ((v0[2] & 0xC) == 4 << v6) {
    unint64_t v1 = sub_1DC9F8E98(v1, *v0, v0[1]);
  }
  if (v1 >> 16 >= v4)
  {
    __break(1u);
    goto LABEL_22;
  }
  if ((v2 & 0x1000000000000000) != 0)
  {
LABEL_22:
    sub_1DCB87A68();
    goto LABEL_14;
  }
  if ((v2 & 0x2000000000000000) == 0 && (v3 & 0x1000000000000000) == 0) {
    goto LABEL_29;
  }
  while (1)
  {
LABEL_14:
    uint64_t v7 = *v0;
    unint64_t v8 = v0[1];
    unint64_t result = v0[2];
    uint64_t v9 = ((unint64_t)*v0 >> 59) & 1;
    if ((v8 & 0x1000000000000000) == 0) {
      LOBYTE(v9) = 1;
    }
    if ((v0[2] & 0xC) == 4 << v9)
    {
      unint64_t result = sub_1DC9F8E98(result, *v0, v0[1]);
      if ((v8 & 0x1000000000000000) == 0)
      {
LABEL_18:
        uint64_t v10 = (result & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_19;
      }
    }
    else if ((v8 & 0x1000000000000000) == 0)
    {
      goto LABEL_18;
    }
    unint64_t v11 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000) == 0) {
      unint64_t v11 = v7 & 0xFFFFFFFFFFFFLL;
    }
    if (v11 <= result >> 16) {
      break;
    }
    uint64_t v10 = sub_1DCB87A48();
LABEL_19:
    v0[2] = v10;
    unint64_t result = v0[3];
    if (!__OFADD__(result, 1))
    {
      v0[3] = result + 1;
      return result;
    }
    __break(1u);
LABEL_29:
    sub_1DCB88B28();
  }
  __break(1u);
  return result;
}

float sub_1DC8DF048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = sub_1DC8DEDCC();
  unint64_t v7 = sub_1DC8DF150(v6, a3);
  if ((v8 & 1) == 0)
  {
    if ((v7 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v7 < *(void *)(a4 + 16))
    {
      return *(float *)(a4 + 4 * v7 + 32);
    }
    __break(1u);
    goto LABEL_11;
  }
  if (qword_1EAA9C658 != -1) {
LABEL_11:
  }
    swift_once();
  uint64_t v10 = sub_1DCB86FE8();
  sub_1DC89F57C(v10, (uint64_t)qword_1EAAFF810);
  unint64_t v11 = sub_1DCB86FC8();
  os_log_type_t v12 = sub_1DCB88468();
  if (os_log_type_enabled(v11, v12))
  {
    id v13 = (_WORD *)swift_slowAlloc();
    *id v13 = 0;
    sub_1DC8E7C14(&dword_1DC873000, v14, v15, "ERROR couldn't find value for key. Returning -1");
    MEMORY[0x1E01A99C0](v13, -1, -1);
  }

  return -1.0;
}

uint64_t sub_1DC8DF150(int a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(_DWORD *)(a2 + 32) == a1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v5 = v2 - 1;
  while (v5 != result)
  {
    int v6 = *(_DWORD *)(a2 + 36 + 4 * result++);
    if (v6 == a1) {
      return result;
    }
  }
  return 0;
}

uint64_t sub_1DC8DF1B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  if (!v5) {
    return 0;
  }
  sub_1DC8E7968();
  BOOL v8 = *(void *)(v7 + 32) == v4 && *(void *)(v7 + 40) == v3;
  if (v8 || (sub_1DCB89018() & 1) != 0) {
    return 0;
  }
  uint64_t v10 = 0;
  unint64_t v11 = (void *)(a3 + 56);
  uint64_t v12 = 1;
  while (1)
  {
    if (v5 == v12) {
      return 0;
    }
    ++v10;
    if (*(v11 - 1) == v4 && *v11 == v3) {
      break;
    }
    char v14 = sub_1DCB89018();
    uint64_t result = v12++;
    v11 += 2;
    if (v14) {
      return result;
    }
  }
  return v10;
}

uint64_t sub_1DC8DF298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = sub_1DC8DEDCC();
  uint64_t result = sub_1DC8DF150(v4, a3);
  if (v6)
  {
    if (qword_1EAA9C658 != -1) {
      swift_once();
    }
    uint64_t v7 = sub_1DCB86FE8();
    sub_1DC89F57C(v7, (uint64_t)qword_1EAAFF810);
    BOOL v8 = sub_1DCB86FC8();
    os_log_type_t v9 = sub_1DCB88468();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (_WORD *)swift_slowAlloc();
      *uint64_t v10 = 0;
      sub_1DC8E7C14(&dword_1DC873000, v11, v12, "ERROR couldn't find index for key. Returning 0");
      MEMORY[0x1E01A99C0](v10, -1, -1);
    }

    return 0;
  }
  return result;
}

float sub_1DC8DF378(float a1, float a2)
{
  float result = 0.0;
  if (a1 > -80.0)
  {
    if (a1 >= a2) {
      float v4 = a2 - a1;
    }
    else {
      float v4 = (float)((float)(0.0 / (float)(a2 + 80.0)) * a1) + (float)((float)(0.0 / (float)(a2 + 80.0)) * 80.0);
    }
    if (v4 <= 0.0) {
      return v4;
    }
  }
  return result;
}

void sub_1DC8DF3C8()
{
  sub_1DC8E7AFC();
  uint64_t v7 = *v6;
  swift_bridgeObjectRetain();
  sub_1DC8E7670(1718642785);
  sub_1DC8E7698();
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    if ((v2 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  sub_1DC987124();
  uint64_t v7 = v9;
  if (v2 < 0) {
    goto LABEL_33;
  }
LABEL_3:
  sub_1DC8E76B0();
  if (v8)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v3 = 1714512484;
  sub_1DC8E775C(v7 + 4 * v2);
  sub_1DC8E7670(1714512484);
  sub_1DC8E7698();
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    if ((v2 & 0x8000000000000000) == 0) {
      goto LABEL_6;
    }
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
LABEL_35:
  sub_1DC987124();
  uint64_t v7 = v10;
  if (v2 < 0) {
    goto LABEL_36;
  }
LABEL_6:
  sub_1DC8E76B0();
  if (v8)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v4 = 1194418788;
  sub_1DC8E775C(v7 + 4 * v2);
  sub_1DC8E7670(1194418788);
  sub_1DC8E7698();
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    if ((v2 & 0x8000000000000000) == 0) {
      goto LABEL_9;
    }
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
LABEL_38:
  sub_1DC987124();
  uint64_t v7 = v11;
  if (v2 < 0) {
    goto LABEL_39;
  }
LABEL_9:
  sub_1DC8E76B0();
  if (v8)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v5 = 1362190948;
  sub_1DC8E775C(v7 + 4 * v2);
  sub_1DC8E7670(1362190948);
  sub_1DC8E7698();
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    if ((v2 & 0x8000000000000000) == 0) {
      goto LABEL_12;
    }
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
LABEL_41:
  sub_1DC987124();
  uint64_t v7 = v12;
  if (v2 < 0) {
    goto LABEL_42;
  }
LABEL_12:
  sub_1DC8E76B0();
  if (v8)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  sub_1DC8E775C(v7 + 4 * v2);
  sub_1DC8E7670(v3 + 0x10000);
  sub_1DC8E7698();
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    if ((v2 & 0x8000000000000000) == 0) {
      goto LABEL_15;
    }
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
LABEL_44:
  sub_1DC987124();
  uint64_t v7 = v13;
  if (v2 < 0) {
    goto LABEL_45;
  }
LABEL_15:
  sub_1DC8E76B0();
  if (v8)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  sub_1DC8E775C(v7 + 4 * v2);
  sub_1DC8E7670(v4 + 0x10000);
  sub_1DC8E7698();
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    if ((v2 & 0x8000000000000000) == 0) {
      goto LABEL_18;
    }
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
LABEL_47:
  sub_1DC987124();
  uint64_t v7 = v14;
  if (v2 < 0) {
    goto LABEL_48;
  }
LABEL_18:
  sub_1DC8E76B0();
  if (v8)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  sub_1DC8E775C(v7 + 4 * v2);
  sub_1DC8E7670(v5 + 0x10000);
  sub_1DC8E7698();
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    if ((v2 & 0x8000000000000000) == 0) {
      goto LABEL_21;
    }
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
LABEL_50:
  sub_1DC987124();
  uint64_t v7 = v15;
  if (v2 < 0) {
    goto LABEL_51;
  }
LABEL_21:
  sub_1DC8E76B0();
  if (v8)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  sub_1DC8E775C(v7 + 4 * v2);
  sub_1DC8E7670(v3 + 0x20000);
  sub_1DC8E7698();
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    if ((v2 & 0x8000000000000000) == 0) {
      goto LABEL_24;
    }
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
LABEL_53:
  sub_1DC987124();
  uint64_t v7 = v16;
  if (v2 < 0) {
    goto LABEL_54;
  }
LABEL_24:
  sub_1DC8E76B0();
  if (v8)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  sub_1DC8E775C(v7 + 4 * v2);
  sub_1DC8E7670(v4 + 0x20000);
  sub_1DC8E7698();
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    if ((v2 & 0x8000000000000000) == 0) {
      goto LABEL_27;
    }
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
LABEL_56:
  sub_1DC987124();
  uint64_t v7 = v17;
  if (v2 < 0) {
    goto LABEL_57;
  }
LABEL_27:
  sub_1DC8E76B0();
  if (v8)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  sub_1DC8E775C(v7 + 4 * v2);
  unint64_t v1 = sub_1DC8E7670(v5 + 0x20000);
  swift_bridgeObjectRelease();
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    if ((v1 & 0x8000000000000000) == 0) {
      goto LABEL_30;
    }
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
LABEL_59:
  sub_1DC987124();
  uint64_t v7 = v18;
  if ((v1 & 0x8000000000000000) != 0) {
    goto LABEL_60;
  }
LABEL_30:
  if (v1 < *(void *)(v7 + 16))
  {
    *(_DWORD *)(v7 + 4 * v1 + 32) = 1058642330;
    *uint64_t v0 = v7;
    return;
  }
LABEL_61:
  __break(1u);
}

void sub_1DC8DF728()
{
  sub_1DC8E7AFC();
  uint64_t v5 = *v4;
  swift_bridgeObjectRetain();
  sub_1DC8E7670(1718642788);
  sub_1DC8E7698();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1DC987124();
    uint64_t v5 = v7;
  }
  sub_1DC8E76B0();
  if (v6)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = 1194418785;
    sub_1DC8E775C(v5 + 0x199C1A184);
    sub_1DC8E7670(1194418788);
    sub_1DC8E7698();
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_5;
    }
  }
  sub_1DC987124();
  uint64_t v5 = v8;
LABEL_5:
  sub_1DC8E76B0();
  if (v6)
  {
    __break(1u);
  }
  else
  {
    sub_1DC8E76F4();
    sub_1DC8E7670(1194484324);
    sub_1DC8E7698();
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_7;
    }
  }
  sub_1DC987124();
  uint64_t v5 = v9;
LABEL_7:
  sub_1DC8E76B0();
  if (v6)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = 1194549857;
    sub_1DC8E76F4();
    sub_1DC8E7670(1194549860);
    sub_1DC8E7698();
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_9;
    }
  }
  sub_1DC987124();
  uint64_t v5 = v10;
LABEL_9:
  sub_1DC8E76B0();
  if (v6)
  {
    __break(1u);
  }
  else
  {
    sub_1DC8E76F4();
    sub_1DC8E7670(1718642785);
    sub_1DC8E7698();
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_11;
    }
  }
  sub_1DC987124();
  uint64_t v5 = v11;
LABEL_11:
  sub_1DC8E76B0();
  if (v6)
  {
    __break(1u);
  }
  else
  {
    sub_1DC8E775C(v5 + 0x199C1A184);
    sub_1DC8E7670(1194418785);
    sub_1DC8E7698();
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_13;
    }
  }
  sub_1DC987124();
  uint64_t v5 = v12;
LABEL_13:
  sub_1DC8E76B0();
  if (v6)
  {
    __break(1u);
  }
  else
  {
    sub_1DC8E76F4();
    sub_1DC8E7670(v2 + 0x10000);
    sub_1DC8E7698();
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_15;
    }
  }
  sub_1DC987124();
  uint64_t v5 = v13;
LABEL_15:
  sub_1DC8E76B0();
  if (v6)
  {
    __break(1u);
  }
  else
  {
    sub_1DC8E76F4();
    sub_1DC8E7670(1194549857);
    sub_1DC8E7698();
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_17;
    }
  }
  sub_1DC987124();
  uint64_t v5 = v14;
LABEL_17:
  sub_1DC8E76B0();
  if (v6)
  {
    __break(1u);
  }
  else
  {
    sub_1DC8E76F4();
    sub_1DC8E7670(v3 + 0x10000);
    sub_1DC8E7698();
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_19;
    }
  }
  sub_1DC987124();
  uint64_t v5 = v15;
LABEL_19:
  sub_1DC8E76B0();
  if (v6)
  {
    __break(1u);
  }
  else
  {
    sub_1DC8E76F4();
    unint64_t v1 = sub_1DC8E7670(1363506785);
    swift_bridgeObjectRelease();
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      if ((v1 & 0x8000000000000000) == 0) {
        goto LABEL_22;
      }
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
  }
  sub_1DC987124();
  uint64_t v5 = v16;
  if ((v1 & 0x8000000000000000) != 0) {
    goto LABEL_42;
  }
LABEL_22:
  if (v1 < *(void *)(v5 + 16))
  {
    *(_DWORD *)(v5 + 4 * v1 + 32) = 0;
    *uint64_t v0 = v5;
    return;
  }
LABEL_43:
  __break(1u);
}

void sub_1DC8DFA34(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v7 = (void *)sub_1DC8E7CF0();
  id v8 = sub_1DCB60550(a1, v7);

  sub_1DC8E782C((uint64_t)v8);
  if (v3)
  {

    return;
  }
  float v10 = v9;

  uint64_t v11 = (void *)sub_1DC8E7CF0();
  id v12 = sub_1DCB60550(a1, v11);

  sub_1DC8E782C((uint64_t)v12);
  float v14 = v13;

  sub_1DC8E7B68();
  uint64_t v15 = (void *)sub_1DCB87908();
  id v16 = sub_1DCB60550(a1, v15);

  sub_1DC8E782C((uint64_t)v16);
  int v18 = v17;

  sub_1DC8E7B74();
  sub_1DC8DE86C();
  uint64_t v20 = v19;
  sub_1DC8E7B74();
  uint64_t v21 = sub_1DC8DEAF8();
  uint64_t v22 = v21;
  if (*(void *)(v20 + 16) != *(void *)(v21 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_1EAA9C658 != -1) {
      swift_once();
    }
    uint64_t v27 = sub_1DCB86FE8();
    sub_1DC89F57C(v27, (uint64_t)qword_1EAAFF810);
    char v28 = (void *)sub_1DCB86FC8();
    os_log_type_t v29 = sub_1DCB88468();
    if (!sub_1DC8E7740(v29)) {
      goto LABEL_14;
    }
    uint64_t v30 = (_WORD *)sub_1DC8E78F4();
    sub_1DC8E7944(v30);
    uint64_t v33 = "Movie Remix: Statistics count mismatch";
    goto LABEL_13;
  }
  float v23 = sub_1DC8DF048(1702256967, 0xE400000000000000, v21, v20);
  float v24 = sub_1DC8DF048(1702256979, 0xE400000000000000, v22, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  float v25 = (float)((float)((float)((float)(v10 - v14) + (float)(v23 + v24)) / 3.0) * 0.26) + -8.23;
  float v26 = -6.0;
  if (v25 > -6.0)
  {
    if (v24 >= 0.0) {
      goto LABEL_44;
    }
    float v25 = -6.0;
    if (v24 <= -9.0) {
      goto LABEL_36;
    }
    goto LABEL_26;
  }
  float v26 = -9.0;
  if (v25 <= -9.0)
  {
    if (v24 >= 0.0) {
      goto LABEL_44;
    }
    float v25 = -9.0;
    if (v24 <= -9.0) {
      goto LABEL_36;
    }
    goto LABEL_26;
  }
  if (v24 >= 0.0)
  {
    if (v25 > 0.0)
    {
      float v26 = 0.0;
      goto LABEL_44;
    }
    float v35 = -2.0;
    goto LABEL_30;
  }
  if (v24 > 0.0)
  {
    if (v25 > 0.0)
    {
      float v26 = 0.0;
      goto LABEL_44;
    }
    BOOL v36 = v25 < -12.0;
    goto LABEL_39;
  }
  if (v24 <= -9.0)
  {
    float v25 = v25 + 9.0;
    if (v25 > 0.0)
    {
LABEL_36:
      float v26 = 0.0;
      goto LABEL_44;
    }
    if (v25 <= -9.0) {
      goto LABEL_44;
    }
    float v35 = -4.0;
LABEL_30:
    BOOL v36 = (float)(v25 + v35) < -12.0;
    goto LABEL_39;
  }
LABEL_26:
  float v25 = v25 - v24;
  float v35 = -4.0;
  if (v24 <= -4.0)
  {
    float v26 = 0.0;
    if (v25 > 0.0) {
      goto LABEL_44;
    }
    float v26 = -9.0;
    if (v25 <= -9.0) {
      goto LABEL_44;
    }
    goto LABEL_30;
  }
  if (v25 > 0.0)
  {
    float v26 = 0.0;
    goto LABEL_44;
  }
  float v26 = -9.0;
  if (v25 > -9.0)
  {
    BOOL v36 = (float)(v24 + v25) < -12.0;
LABEL_39:
    float v26 = v25;
    if (v36) {
      float v26 = v25;
    }
  }
LABEL_44:
  uint64_t v37 = (void *)sub_1DC8E7B74();
  sub_1DC8DE274(v37);
  sub_1DC8DE318(a1);
  sub_1DC8E7B74();
  sub_1DC8DE3C4();
  uint64_t v39 = v38;
  uint64_t v74 = v38;
  swift_bridgeObjectRetain();
  sub_1DC8E7B74();
  uint64_t v40 = sub_1DC8DE5F4();
  if (*(void *)(v39 + 16) != *(void *)(v40 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    if (qword_1EAA9C658 != -1) {
      swift_once();
    }
    uint64_t v49 = sub_1DCB86FE8();
    sub_1DC89F57C(v49, (uint64_t)qword_1EAAFF810);
    char v28 = (void *)sub_1DCB86FC8();
    os_log_type_t v50 = sub_1DCB88468();
    if (!sub_1DC8E7740(v50)) {
      goto LABEL_14;
    }
    double v51 = (_WORD *)sub_1DC8E78F4();
    sub_1DC8E7944(v51);
    uint64_t v33 = "Movie Remix: filter parameters count mismatch.";
LABEL_13:
    sub_1DC8E76D4(&dword_1DC873000, v31, v32, v33);
    sub_1DC8E7728();
LABEL_14:

    sub_1DC8E6E08();
    sub_1DC883884();
    sub_1DC8E7710(v34, 11);
    return;
  }
  uint64_t v41 = v40;
  float v42 = sub_1DC8DF048(1363506785, 0xE400000000000000, v40, v39);
  swift_bridgeObjectRelease();
  float v43 = v26 - v42;
  BOOL v44 = v10 > -45.0;
  if (a3 >= 0.93) {
    BOOL v44 = 0;
  }
  float v45 = -3.0;
  if (v43 <= -3.0)
  {
    if (v43 > -9.0) {
      float v45 = v43;
    }
    else {
      float v45 = -9.0;
    }
    if (!v44) {
      goto LABEL_49;
    }
  }
  else if (!v44)
  {
LABEL_49:
    sub_1DC8DF728();
    if (v10 > v14) {
      float v46 = v10;
    }
    else {
      float v46 = v14;
    }
    float v47 = sub_1DC8DF378(v46, -21.0);
    float v48 = v47;
    goto LABEL_62;
  }
  float v48 = sub_1DC8DF378(v10, -21.0);
  float v47 = v45 + v48;
  sub_1DC8DF3C8();
LABEL_62:
  float v52 = v47 - (float)(-21.0 - v14);
  if ((float)(v14 + v47) <= -21.0)
  {
    float v53 = 0.0;
  }
  else
  {
    float v47 = -21.0 - v14;
    float v53 = v52;
  }
  swift_bridgeObjectRetain();
  sub_1DC8DABF4(v41, v74);
  uint64_t v55 = v54;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1DC8E7950();
    uint64_t v55 = v68;
  }
  float v56 = v48 - v53;
  unint64_t v57 = *(void *)(v55 + 16);
  unint64_t v58 = *(void *)(v55 + 24) >> 1;
  unint64_t v59 = v57 + 1;
  if (v58 <= v57)
  {
    sub_1DC8E7950();
    uint64_t v55 = v69;
    unint64_t v58 = *(void *)(v69 + 24) >> 1;
  }
  *(void *)(v55 + 16) = v59;
  uint64_t v60 = v55 + 8 * v57;
  *(_DWORD *)(v60 + 32) = 1145861740;
  *(float *)(v60 + 36) = v56;
  unint64_t v61 = v57 + 2;
  if ((uint64_t)v58 < (uint64_t)(v57 + 2))
  {
    sub_1DC8E7950();
    uint64_t v55 = v70;
  }
  *(void *)(v55 + 16) = v61;
  uint64_t v62 = v55 + 8 * v59;
  *(_DWORD *)(v62 + 32) = 1095530092;
  *(float *)(v62 + 36) = v47;
  unint64_t v63 = v57 + 3;
  if ((int64_t)(v57 + 3) > *(void *)(v55 + 24) >> 1)
  {
    sub_1DC8E7950();
    uint64_t v55 = v71;
  }
  *(void *)(v55 + 16) = v63;
  uint64_t v64 = v55 + 8 * v61;
  *(_DWORD *)(v64 + 32) = 1145857139;
  *(float *)(v64 + 36) = v10;
  unint64_t v65 = v57 + 4;
  if ((int64_t)(v57 + 4) > *(void *)(v55 + 24) >> 1)
  {
    sub_1DC8E7950();
    uint64_t v55 = v72;
  }
  *(void *)(v55 + 16) = v65;
  uint64_t v66 = v55 + 8 * v63;
  *(_DWORD *)(v66 + 32) = 1095525491;
  *(float *)(v66 + 36) = v14;
  if ((int64_t)(v57 + 5) > *(void *)(v55 + 24) >> 1)
  {
    sub_1DC8E7950();
    uint64_t v55 = v73;
  }
  *(void *)(v55 + 16) = v57 + 5;
  uint64_t v67 = v55 + 8 * v65;
  *(_DWORD *)(v67 + 32) = 1380738163;
  *(_DWORD *)(v67 + 36) = v18;
  *(_DWORD *)a2 = 17104896;
  *(float *)(a2 + 4) = v56;
  *(float *)(a2 + 8) = v47;
  *(float *)(a2 + 12) = v10;
  *(float *)(a2 + 16) = v14;
  *(_DWORD *)(a2 + 20) = v18;
  *(void *)(a2 + 24) = v55;
}

BOOL sub_1DC8E0240(double *a1)
{
  return *a1 != 0.5;
}

uint64_t sub_1DC8E0254@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1DC8E6B70();
  if (v27)
  {
    sub_1DC8BA1CC(&v25, (uint64_t)v29);
    sub_1DC8BA1CC((long long *)v29, (uint64_t)v32);
  }
  else
  {
    sub_1DC88CC04((uint64_t)&v25, &qword_1EAA9F128);
    if (qword_1EAA9D1C8 != -1) {
      swift_once();
    }
    uint64_t v5 = (void *)qword_1EAAFF880;
    uint64_t v6 = qword_1EAAFF888;
    char v8 = qword_1EAAFF890;
    uint64_t v7 = qword_1EAAFF898;
    uint64_t v9 = qword_1EAAFF8A0;
    char v10 = byte_1EAAFF8A8;
    uint64_t v30 = &unk_1F37E2540;
    uint64_t v31 = &off_1F37E2458;
    uint64_t v11 = sub_1DC8E7B80();
    *(void *)os_log_type_t v29 = v11;
    if (v10)
    {
      *(void *)&long long v25 = v5;
      id v12 = v5;
      sub_1DC87E988(&qword_1EAA9DF60);
      swift_willThrowTypedImpl();
      return sub_1DC8E6BC8((uint64_t)v29);
    }
    *(void *)(v11 + 16) = v5;
    *(void *)(v11 + 24) = v6;
    *(unsigned char *)(v11 + 32) = v8 & 1;
    *(void *)(v11 + 40) = v7;
    *(void *)(v11 + 48) = v9;
    sub_1DC8BA1CC((long long *)v29, (uint64_t)v32);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  uint64_t v14 = v33;
  uint64_t v15 = v34;
  id v16 = sub_1DC881A8C(v32, v33);
  sub_1DC8E042C(a1, (uint64_t)v16, v14, v15, v17, v18, v19, v20, v24, v25, *((uint64_t *)&v25 + 1), v26, v27, v28, *(uint64_t *)v29, *(uint64_t *)&v29[8], *(uint64_t *)&v29[16], (uint64_t)v30, (uint64_t)v31,
    v32[0]);
  uint64_t result = sub_1DC8818D0((uint64_t)v32);
  if (!v2)
  {
    int v21 = *(_DWORD *)&v29[20];
    uint64_t v22 = v30;
    long long v23 = *(_OWORD *)&v29[4];
    *(_DWORD *)a2 = *(_DWORD *)v29;
    *(_OWORD *)(a2 + 4) = v23;
    *(_DWORD *)(a2 + 20) = v21;
    *(void *)(a2 + 24) = v22;
  }
  return result;
}

void sub_1DC8E042C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_1DC88D6B0();
  a19 = v21;
  a20 = v22;
  *(void *)&long long v61 = v23;
  *(void *)&long long v60 = v24;
  *(void *)&long long v59 = v25;
  uint64_t v27 = v26;
  unint64_t v58 = v28;
  uint64_t v29 = sub_1DCB86A18();
  sub_1DC89D4E0();
  uint64_t v31 = v30;
  uint64_t v33 = *(void *)(v32 + 64);
  uint64_t v35 = MEMORY[0x1F4188790](v34);
  MEMORY[0x1F4188790](v35);
  uint64_t v37 = (char *)v54 - v36;
  uint64_t v38 = *(void (**)(void))(v31 + 16);
  sub_1DC8E7C9C();
  v38();
  id v39 = objc_allocWithZone(MEMORY[0x1E4F15390]);
  id v40 = sub_1DCABBB24((uint64_t)v37);
  if (v20) {
    goto LABEL_6;
  }
  v54[1] = v38;
  uint64_t v55 = (char *)v54 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = v27;
  id v57 = v40;
  id v41 = objc_msgSend(v40, sel_processingFormat);
  unsigned int v42 = objc_msgSend(v41, sel_channelCount);
  objc_msgSend(v41, sel_sampleRate);
  if ((~*(void *)&v43 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v43 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v43 < 9.22337204e18)
  {
    *(void *)uint64_t v62 = v42;
    *(void *)&v62[8] = (uint64_t)v43;
    sub_1DC8E07A8();
    long long v60 = v66;
    long long v61 = v65;
    long long v59 = v67;
    BOOL v44 = v55;
    sub_1DC8E7C9C();
    v45();
    unint64_t v46 = (*(unsigned __int8 *)(v31 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
    unint64_t v47 = (v33 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v48 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v31 + 32))(v48 + v46, v44, v29);
    *(void *)(v48 + v47) = v41;
    a10 = *((void *)&v65 + 1);
    v68[0] = v61;
    v68[1] = v60;
    v68[2] = v59;
    id v49 = v41;
    swift_retain();
    sub_1DC8E6D44((uint64_t)&a10);
    swift_retain();
    swift_retain();
    sub_1DC8E2F6C((uint64_t (*)(uint64_t))sub_1DC8E6CB4, 1024, v68, v62);
    swift_release();

    sub_1DC8E6D70((uint64_t)&a10);
    swift_release();

    swift_release();
    swift_release();
    sub_1DC8E6D70((uint64_t)&a10);
    swift_release();
    swift_release();
    swift_release();
    int v50 = v63;
    uint64_t v51 = v64;
    long long v52 = *(_OWORD *)&v62[4];
    float v53 = v58;
    *unint64_t v58 = *(_DWORD *)v62;
    *(_OWORD *)(v53 + 1) = v52;
    v53[5] = v50;
    *((void *)v53 + 3) = v51;
LABEL_6:
    sub_1DC88D674();
    return;
  }
LABEL_9:
  __break(1u);
}

void sub_1DC8E07A8()
{
  sub_1DC8E79D0();
  uint64_t v293 = v0;
  uint64_t v294 = v1;
  uint64_t v292 = v2;
  float32x4_t v291 = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = sub_1DC87E988(&qword_1EAA9F1E0);
  sub_1DC89D4E0();
  uint64_t v10 = v9;
  MEMORY[0x1F4188790](v11);
  sub_1DC88D550();
  sub_1DC888164(v12);
  uint64_t v252 = sub_1DC87E988(&qword_1EAA9F1E8);
  sub_1DC89D4E0();
  uint64_t v251 = v13;
  MEMORY[0x1F4188790](v14);
  sub_1DC88D550();
  sub_1DC888164(v15);
  uint64_t v254 = sub_1DC87E988(&qword_1EAA9F1F0);
  sub_1DC89D4E0();
  uint64_t v253 = v16;
  MEMORY[0x1F4188790](v17);
  sub_1DC88D550();
  sub_1DC888164(v18);
  uint64_t v256 = sub_1DC87E988(&qword_1EAA9F1F8);
  sub_1DC89D4E0();
  uint64_t v255 = v19;
  MEMORY[0x1F4188790](v20);
  sub_1DC88D550();
  sub_1DC888164(v21);
  uint64_t v245 = sub_1DC87E988(&qword_1EAA9F200);
  sub_1DC89D4E0();
  uint64_t v244 = v22;
  MEMORY[0x1F4188790](v23);
  sub_1DC88D550();
  sub_1DC888164(v24);
  uint64_t v248 = sub_1DC87E988(&qword_1EAA9F208);
  sub_1DC89D4E0();
  uint64_t v246 = v25;
  MEMORY[0x1F4188790](v26);
  sub_1DC88D550();
  sub_1DC888164(v27);
  uint64_t v249 = sub_1DC87E988(&qword_1EAA9F210);
  sub_1DC89D4E0();
  uint64_t v247 = v28;
  MEMORY[0x1F4188790](v29);
  sub_1DC88D550();
  sub_1DC888164(v30);
  uint64_t v243 = sub_1DC87E988(&qword_1EAA9F218);
  sub_1DC89D4E0();
  uint64_t v242 = v31;
  MEMORY[0x1F4188790](v32);
  sub_1DC88D550();
  sub_1DC888164(v33);
  uint64_t v239 = sub_1DC87E988(&qword_1EAA9F220);
  sub_1DC89D4E0();
  uint64_t v238 = v34;
  MEMORY[0x1F4188790](v35);
  sub_1DC88D550();
  sub_1DC888164(v36);
  uint64_t v241 = sub_1DC87E988(&qword_1EAA9F228);
  sub_1DC89D4E0();
  uint64_t v240 = v37;
  MEMORY[0x1F4188790](v38);
  sub_1DC88D550();
  sub_1DC888164(v39);
  uint64_t v264 = sub_1DC87E988((uint64_t *)&unk_1EAAA3CA0);
  sub_1DC89D4E0();
  uint64_t v263 = v40;
  MEMORY[0x1F4188790](v41);
  sub_1DC88D550();
  float32x4_t v262 = v42;
  uint64_t v279 = sub_1DCB870B8();
  sub_1DC89D4E0();
  uint64_t v261 = v43;
  MEMORY[0x1F4188790](v44);
  sub_1DC88D550();
  sub_1DC888164(v45);
  uint64_t v267 = sub_1DC87E988(&qword_1EAA9EFF0);
  sub_1DC89D4E0();
  uint64_t v266 = v46;
  MEMORY[0x1F4188790](v47);
  sub_1DC88D550();
  sub_1DC888164(v48);
  uint64_t v270 = sub_1DC87E988((uint64_t *)&unk_1EAAA3FF0);
  sub_1DC89D4E0();
  uint64_t v269 = v49;
  MEMORY[0x1F4188790](v50);
  sub_1DC88D550();
  sub_1DC888164(v51);
  uint64_t v265 = sub_1DC87E988(&qword_1EAA9F230);
  sub_1DC88819C();
  MEMORY[0x1F4188790](v52);
  sub_1DC88D550();
  sub_1DC888164(v53);
  uint64_t v274 = sub_1DC87E988(&qword_1EAA9F238);
  sub_1DC89D4E0();
  uint64_t v272 = v54;
  MEMORY[0x1F4188790](v55);
  sub_1DC88D550();
  sub_1DC888164(v56);
  uint64_t v276 = sub_1DC87E988(&qword_1EAA9F240);
  sub_1DC89D4E0();
  uint64_t v273 = v57;
  MEMORY[0x1F4188790](v58);
  sub_1DC88D550();
  sub_1DC888164(v59);
  uint64_t v277 = sub_1DC87E988(&qword_1EAA9F248);
  sub_1DC89D4E0();
  unint64_t v275 = v60;
  MEMORY[0x1F4188790](v61);
  sub_1DC88D550();
  sub_1DC888164(v62);
  uint64_t v285 = sub_1DC87E988(&qword_1EAA9F250);
  sub_1DC89D4E0();
  uint64_t v284 = v63;
  MEMORY[0x1F4188790](v64);
  sub_1DC88D550();
  uint64_t v283 = v65;
  uint64_t v66 = sub_1DCB86BF8();
  sub_1DC89D4E0();
  uint64_t v68 = v67;
  uint64_t v70 = MEMORY[0x1F4188790](v69);
  float32x4_t v250 = &v232[-((v71 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v72 = MEMORY[0x1F4188790](v70);
  float32x4_t v282 = &v232[-v73];
  uint64_t v74 = MEMORY[0x1F4188790](v72);
  BOOL v76 = &v232[-v75];
  float32x4_t v281 = v77;
  MEMORY[0x1F4188790](v74);
  id v79 = &v232[-v78];
  uint64_t v288 = *v5;
  uint64_t v290 = v5[1];
  sub_1DCB86BE8();
  if (qword_1EAA9C658 != -1) {
    swift_once();
  }
  uint64_t v80 = sub_1DCB86FE8();
  uint64_t v81 = sub_1DC89F57C(v80, (uint64_t)qword_1EAAFF810);
  int v82 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v68 + 16);
  float32x4_t v295 = v79;
  uint64_t v286 = v68 + 16;
  float32x4_t v287 = v82;
  sub_1DC8E7D10();
  v83();
  uint64_t v278 = v81;
  id v84 = sub_1DCB86FC8();
  os_log_type_t v85 = sub_1DCB88488();
  BOOL v86 = os_log_type_enabled(v84, v85);
  float32x4_t v259 = v7;
  uint64_t v258 = v8;
  uint64_t v257 = v10;
  if (v86)
  {
    uint64_t v87 = swift_slowAlloc();
    uint64_t v296 = swift_slowAlloc();
    *(_DWORD *)uint64_t v87 = 136446466;
    uint64_t v289 = v68;
    sub_1DC8E72F4((uint64_t)&qword_1EAAA41A0);
    uint64_t v88 = sub_1DCB88F98();
    uint64_t v90 = sub_1DC9F8920(v88, v89, &v296);
    sub_1DC8E79B8(v90);
    sub_1DCB88778();
    swift_bridgeObjectRelease();
    uint64_t v91 = *(void (**)(unsigned char *, uint64_t))(v289 + 8);
    v91(v76, v66);
    *(_WORD *)(v87 + 12) = 2080;
    *(void *)&long long v297 = v288;
    *((void *)&v297 + 1) = v290;
    uint64_t v92 = sub_1DCB87988();
    uint64_t v94 = sub_1DC9F8920(v92, v93, &v296);
    sub_1DC8E79B8(v94);
    sub_1DCB88778();
    uint64_t v68 = v289;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1DC873000, v84, v85, "Trying to run movie remix %{public}s; request: %s", (uint8_t *)v87, 0x16u);
    swift_arrayDestroy();
    sub_1DC8E7728();
    char v95 = v91;
    sub_1DC8E7728();
  }
  else
  {
    char v95 = *(void (**)(unsigned char *, uint64_t))(v68 + 8);
    v95(v76, v66);
  }

  uint64_t v96 = v293;
  char v97 = (*(uint64_t (**)(uint64_t))(v294 + 8))(v292);
  BOOL v98 = v295;
  if (v96) {
    goto LABEL_21;
  }
  if ((v97 & 1) == 0)
  {
    sub_1DC8E6E08();
    sub_1DC883884();
    *uint64_t v146 = 0;
LABEL_20:
    swift_willThrow();
LABEL_21:
    v95(v98, v66);
    goto LABEL_22;
  }
  if (qword_1EAA9C6D0 != -1) {
    swift_once();
  }
  if (byte_1EAA9C6C8 != 1)
  {
    type metadata accessor for SNError();
    sub_1DC8E7B68();
    sub_1DCA14B2C(v147, v148, 1, 0, v149, 0x80000001DCB91A50);
    goto LABEL_20;
  }
  sub_1DC8DDD1C();
  int v100 = v99;
  uint64_t v101 = sub_1DCB61370(v99);
  if (!v101
    || (int v102 = v101,
        sub_1DCB5C080(v101, 0),
        double v104 = v103,
        v102,
        (int v105 = sub_1DCB61370(v100)) == 0))
  {
    sub_1DC8E6E08();
    sub_1DC883884();
    sub_1DC8E7710(v150, 1);

    goto LABEL_21;
  }
  uint64_t v106 = v105;
  float32x4_t v234 = v100;
  unsigned int v233 = sub_1DCB5C510((uint64_t)v105, 0);

  sub_1DC87E988(&qword_1EAA9F258);
  swift_allocObject();
  uint64_t v294 = sub_1DCB872B8();
  uint64_t v236 = 60 * v290;
  if ((unsigned __int128)(v290 * (__int128)60) >> 64 != (60 * v290) >> 63)
  {
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v292 = 2 * v290;
  uint64_t v107 = v282;
  sub_1DC8E7C00();
  v108();
  uint64_t v109 = *(unsigned __int8 *)(v68 + 80);
  float32x4_t v291 = ((char *)v281 + ((v109 + 16) & ~v109));
  uint64_t v235 = (v109 + 16) & ~v109;
  uint64_t v110 = swift_allocObject();
  uint64_t v289 = v68;
  uint64_t v111 = *(void (**)(void))(v68 + 32);
  sub_1DC8E7C88();
  v111();
  uint64_t v112 = sub_1DC886810();
  float32x4_t v281 = v112;
  v112[2].isa = (Class)sub_1DC8E6E70;
  v112[3].isa = (Class)v110;
  uint64_t v293 = sub_1DC8BABC0();
  *(void *)(v293 + 16) = 1;
  sub_1DC8E7C00();
  v113();
  uint64_t v114 = swift_allocObject();
  uint64_t v115 = v235;
  sub_1DC8E7C88();
  v111();
  uint64_t v116 = v66;
  uint64_t v117 = sub_1DC886810();
  *(void *)(v117 + 16) = sub_1DC8E6F60;
  *(void *)(v117 + 24) = v114;
  char v118 = (void *)sub_1DC8E7B80();
  v118[2] = sub_1DC8E6ED0;
  v118[3] = 0;
  v118[4] = v292;
  v118[5] = sub_1DC8E6F94;
  v118[6] = v117;
  uint64_t v292 = sub_1DC8BABC0();
  *(void *)(v292 + 16) = 0;
  v287(v107, v295, v116);
  uint64_t v119 = swift_allocObject();
  uint64_t v237 = v116;
  ((void (*)(uint64_t, unsigned char *, uint64_t))v111)(v119 + v115, v107, v116);
  uint64_t v120 = sub_1DC886810();
  *(void *)(v120 + 16) = sub_1DC8E7088;
  *(void *)(v120 + 24) = v119;
  uint64_t v121 = (void *)sub_1DC8E7B80();
  v121[2] = sub_1DC8E75D0;
  v121[3] = 0;
  v121[4] = v236;
  v121[5] = sub_1DC8E7610;
  v121[6] = v120;
  uint64_t v122 = sub_1DC8BABC0();
  *(void *)(v122 + 16) = 0;
  *(void *)&long long v297 = v294;
  *((void *)&v297 + 1) = sub_1DC8E6F54;
  *(void *)&long long v298 = v293;
  *((void *)&v298 + 1) = sub_1DC8E6F48;
  float32x4_t v299 = v281;
  float32x4_t v300 = sub_1DC8E6FE4;
  uint64_t v301 = v292;
  float32x4_t v302 = sub_1DC8E6FB4;
  float32x4_t v303 = v118;
  float32x4_t v304 = sub_1DC8E75B8;
  uint64_t v305 = v122;
  float32x4_t v306 = sub_1DC8E719C;
  float32x4_t v307 = v121;
  swift_retain();
  sub_1DC87E988(&qword_1EAA9F260);
  sub_1DC87E988(&qword_1EAA9F268);
  sub_1DC8E7358((uint64_t)&unk_1EAA9F270);
  sub_1DCB874A8();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1DC8E7BE8();
  swift_release();
  sub_1DC8E7358((uint64_t)&unk_1EAA9F278);
  uint64_t v123 = sub_1DCB873A8();
  sub_1DC88D5C8();
  v124();
  *(void *)&long long v297 = v123;
  *((void *)&v297 + 1) = sub_1DC9EAB14;
  *(void *)&long long v298 = 0;
  *((void *)&v298 + 1) = sub_1DCACBC94;
  float32x4_t v299 = 0;
  swift_retain();
  sub_1DC87E988(&qword_1EAA9F280);
  sub_1DC8E7358((uint64_t)&unk_1EAA9F288);
  sub_1DCB87468();
  sub_1DC87E988(&qword_1EAA9F290);
  sub_1DC886810();
  uint64_t v125 = sub_1DC8C213C();
  uint64_t v126 = sub_1DC9C5478(v125);
  swift_release();
  *(void *)&long long v297 = v126;
  sub_1DC8E7358((uint64_t)&unk_1EAA9F298);
  float32x4_t v291 = sub_1DCB873A8();
  swift_release();
  sub_1DC87E988((uint64_t *)&unk_1EAA9CE80);
  uint64_t v127 = sub_1DC8BABC0();
  uint64_t v128 = self;
  *(void *)(v127 + 16) = sub_1DC8E7810(v128);
  sub_1DC87E988(&qword_1EAA9D070);
  sub_1DC886810();
  uint64_t v129 = sub_1DC8C213C();
  uint64_t v293 = sub_1DC9AE954(v129);
  sub_1DC87E988(&qword_1EAA9CE78);
  sub_1DC8BABC0();
  uint64_t v130 = (void *)sub_1DC8E7CD8();
  *(void *)(v127 + 16) = sub_1DC8E7810(v130);
  sub_1DC87E988((uint64_t *)&unk_1EAA9D060);
  sub_1DC886810();
  uint64_t v131 = sub_1DC8C213C();
  uint64_t v132 = sub_1DC9AE954(v131);
  sub_1DC87E988(qword_1EAA9CAC8);
  sub_1DC8BABC0();
  uint64_t v133 = (void *)sub_1DC8E7CD8();
  *(void *)(v127 + 16) = sub_1DC8E7810(v133);
  sub_1DC87E988((uint64_t *)&unk_1EAA9D030);
  sub_1DC886810();
  uint64_t v134 = sub_1DC8C213C();
  uint64_t v135 = sub_1DC9AE954(v134);
  sub_1DC87E988(&qword_1EAA9CE68);
  sub_1DC8BABC0();
  uint64_t v136 = (void *)sub_1DC8E7CD8();
  *(void *)(v127 + 16) = sub_1DC8E7810(v136);
  sub_1DC87E988((uint64_t *)&unk_1EAA9D040);
  sub_1DC886810();
  uint64_t v137 = sub_1DC8C213C();
  uint64_t v66 = sub_1DC9AE954(v137);
  sub_1DC87E988(&qword_1EAA9CE70);
  sub_1DC8BABC0();
  int v138 = (void *)sub_1DC8E7CD8();
  uint64_t v139 = v132;
  id v84 = v291;
  uint64_t v140 = v293;
  *(void *)(v127 + 16) = objc_msgSend(v138, sel_mapTableWithKeyOptions_valueOptions_, 0x10000, 5);
  sub_1DC87E988((uint64_t *)&unk_1EAA9D050);
  sub_1DC886810();
  uint64_t v141 = sub_1DC8C213C();
  uint64_t v142 = sub_1DC9AE954(v141);
  float32x4x4_t v315 = v84;
  uint64_t v316 = v288;
  uint64_t v317 = v290;
  uint64_t v318 = v140;
  uint64_t v319 = v139;
  uint64_t v320 = v135;
  uint64_t v321 = v66;
  uint64_t v322 = v142;
  *(void *)&long long v308 = v84;
  *((void *)&v308 + 1) = v288;
  uint64_t v309 = v290;
  uint64_t v310 = v140;
  uint64_t v311 = v139;
  uint64_t v312 = v135;
  uint64_t v313 = v66;
  uint64_t v314 = v142;
  uint64_t v292 = v142;
  if ((~*(void *)&v104 & 0x7FF0000000000000) == 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v290 = v123;
  if (v104 <= -9.22337204e18)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v104 < 9.22337204e18)
  {
    uint64_t v143 = v66;
    uint64_t v144 = v233;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v145 = v292;
    swift_retain();
    uint64_t v151 = sub_1DC9A805C(v144, (uint64_t)v104);
    swift_release();
    uint64_t v284 = v143;
    swift_release();
    uint64_t v285 = v135;
    swift_release();
    uint64_t v288 = v139;
    swift_release();
    swift_release();
    swift_release();
    float32x4_t v282 = (unsigned char *)v151;
    uint64_t v152 = sub_1DC9A7A54();
    sub_1DC8E79B8(v152);
    uint64_t v153 = v261;
    uint64_t v154 = v260;
    (*(void (**)(uint64_t, void, uint64_t))(v261 + 104))(v260, *MEMORY[0x1E4F1A8F8], v279);
    uint64_t v155 = v262;
    *float32x4_t v262 = sub_1DC8E3A3C;
    v155[1] = 0;
    sub_1DC8E79C4();
    uint64_t v157 = v264;
    (*(void (**)(uint64_t (**)@<X0>(uint64_t *@<X8>)))(v156 + 104))(v155);
    sub_1DC87E988((uint64_t *)&unk_1EAA9F020);
    sub_1DC8E7358((uint64_t)&unk_1EAAA5180);
    sub_1DCB87478();
    (*(void (**)(uint64_t (**)@<X0>(uint64_t *@<X8>), uint64_t))(v145 + 8))(v155, v157);
    (*(void (**)(uint64_t, uint64_t))(v153 + 8))(v154, v279);
    swift_release();
    uint64_t v158 = sub_1DC886810();
    *(void *)(v158 + 16) = sub_1DC8D9B90;
    *(void *)(v158 + 24) = 0;
    sub_1DC87E988((uint64_t *)&unk_1EAAA4000);
    sub_1DC8E7358((uint64_t)&qword_1EAA9F038);
    uint64_t v159 = v268;
    uint64_t v160 = v267;
    sub_1DCB873D8();
    swift_release();
    sub_1DC88D5C8();
    v161();
    uint64_t v162 = v234;
    uint64_t v163 = sub_1DCB5EFCC((uint64_t)v234);
    uint64_t v164 = sub_1DC8BABC0();
    *(void *)(v164 + 16) = v163;
    sub_1DC8E7C34();
    uint64_t v165 = v271;
    uint64_t v166 = v270;
    sub_1DC8E7D10();
    v167();
    uint64_t v168 = v265;
    uint64_t v169 = v165 + *(int *)(v265 + 84);
    *(void *)uint64_t v169 = 0;
    *(void *)(v169 + 8) = 0;
    *(unsigned char *)(v169 + 16) = 2;
    uint64_t v170 = (uint64_t (**)@<X0>(uint64_t *@<X8>))(v165 + *(int *)(v168 + 88));
    *uint64_t v170 = sub_1DC8E7204;
    v170[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v164;
    (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v159, v166);
    uint64_t v171 = sub_1DC8BABC0();
    *(void *)(v171 + 16) = v162;
    id v172 = v162;
    sub_1DC8E79C4();
    sub_1DC8D9EA0(v173, v171, v174, 0, v175, 0, v176);
    swift_release();
    sub_1DC88CC04(v165, &qword_1EAA9F230);
    sub_1DC87E988(&qword_1EAA9C720);
    uint64_t v177 = swift_allocObject();
    *(_OWORD *)(v177 + 16) = xmmword_1DCBB8670;
    *(void *)(v177 + 32) = v172;
    sub_1DC8E79B8(v177);
    sub_1DCB87C68();
    id v84 = v172;
    sub_1DC87E988(&qword_1EAA9F2A0);
    sub_1DC8E7358((uint64_t)&unk_1EAA9F2A8);
    sub_1DC8E7358((uint64_t)&unk_1EAA9F2B0);
    sub_1DCB874F8();
    swift_bridgeObjectRelease();
    sub_1DC88D5C8();
    v178();
    sub_1DC8E7358((uint64_t)&unk_1EAA9F2B8);
    sub_1DC8E7C34();
    sub_1DCB87418();
    sub_1DC88D5C8();
    v179();
    sub_1DC8E7358((uint64_t)&unk_1EAA9F2C0);
    uint64_t v66 = sub_1DC8E79EC();
    sub_1DC88D5C8();
    v180();
    if (qword_1EAA9CAC0 == -1) {
      goto LABEL_25;
    }
    goto LABEL_42;
  }
LABEL_41:
  __break(1u);
LABEL_42:
  swift_once();
LABEL_25:
  id v181 = objc_msgSend((id)qword_1EAA9CAB8, sel_dictionaryRepresentation);
  sub_1DCB877B8();

  sub_1DC8E7B68();
  id v182 = sub_1DCAA49F8();
  uint64_t v283 = v66;
  id v190 = v182;
  char v191 = v183;
  swift_bridgeObjectRelease();
  if ((v191 & 1) != 0 || !v190)
  {
    uint64_t v184 = (void *)sub_1DCB86FC8();
    os_log_type_t v185 = sub_1DCB88488();
    if (sub_1DC8E7740(v185))
    {
      uint64_t v186 = (_WORD *)sub_1DC8E78F4();
      sub_1DC8E7944(v186);
      sub_1DC8E76D4(&dword_1DC873000, v187, v188, "Movie Remix: Music Detection is enabled.");
      sub_1DC8E7728();
    }

    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    uint64_t v189 = sub_1DC95E2EC(&v308);
    float32x4_t v281 = v84;
    sub_1DC8E79B8((uint64_t)v189);
    uint64_t v199 = sub_1DC886810();
    *(void *)(v199 + 16) = 0x636973756DLL;
    *(void *)(v199 + 24) = 0xE500000000000000;
    sub_1DC87E988(&qword_1EAA9F2C8);
    uint64_t v280 = MEMORY[0x1E4F1AAE8];
    sub_1DC8E7358((uint64_t)&qword_1EAA9F2D0);
    sub_1DCB874A8();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_1DC8E7BE8();
    swift_release();
    swift_release();
    swift_release();
    sub_1DC8E7358((uint64_t)&unk_1EAA9F2D8);
    sub_1DC8E79C4();
    sub_1DCB87488();
    sub_1DC8E7358((uint64_t)&unk_1EAA9F2E0);
    sub_1DCB874E8();
    sub_1DC88D5C8();
    v200();
    sub_1DC8E7358((uint64_t)&unk_1EAA9F2E8);
    sub_1DC8E79C4();
    sub_1DCB87528();
    sub_1DC88D5C8();
    v201();
    sub_1DC8E7358((uint64_t)&unk_1EAA9F2F0);
    uint64_t v202 = sub_1DCB873A8();
    uint64_t v66 = v283;
    sub_1DC88D5C8();
    v203();
    sub_1DC88D5C8();
    v204();
    *(void *)&long long v297 = v202;
    sub_1DC87E988(&qword_1EAA9F2F8);
    sub_1DC8E7358((uint64_t)&unk_1EAA9F300);
    uint64_t v205 = sub_1DCB873A8();
    swift_release();
  }
  else
  {
    float32x4_t v281 = v84;
    uint64_t v192 = (void *)sub_1DCB86FC8();
    os_log_type_t v193 = sub_1DCB88488();
    if (sub_1DC8E7740(v193))
    {
      uint64_t v194 = (_WORD *)sub_1DC8E78F4();
      sub_1DC8E7944(v194);
      sub_1DC8E76D4(&dword_1DC873000, v195, v196, "Movie Remix: Music Detection is disabled.");
      sub_1DC8E7728();
    }

    *(void *)&long long v297 = 0;
    sub_1DCB87328();
    sub_1DC87E988(&qword_1EAA9DF60);
    sub_1DC8E7C34();
    sub_1DCB87308();
    sub_1DC88D5C8();
    v197();
    sub_1DC8E7358((uint64_t)&unk_1EAA9F348);
    uint64_t v205 = sub_1DC8E79EC();
    sub_1DC88D5C8();
    v198();
  }
  long long v298 = 0u;
  long long v297 = 0u;
  uint64_t v276 = sub_1DC87E988(&qword_1EAA9F308);
  swift_allocObject();
  uint64_t v206 = sub_1DCB872F8();
  *(void *)&long long v297 = v66;
  uint64_t v280 = v205;
  uint64_t v296 = v205;
  sub_1DC87E988(&qword_1EAA9F2F8);
  sub_1DC8E7358((uint64_t)&unk_1EAA9F300);
  sub_1DC8CD9A8();
  uint64_t v296 = sub_1DCB873A8();
  sub_1DC87E988(&qword_1EAA9F310);
  sub_1DC8E7358((uint64_t)&unk_1EAA9F318);
  sub_1DCB873E8();
  swift_release();
  sub_1DC87E988(&qword_1EAA9F320);
  sub_1DC8E7358((uint64_t)&unk_1EAA9F328);
  sub_1DCB874A8();
  sub_1DC88D5C8();
  v207();
  *(void *)&long long v297 = 0;
  *((void *)&v297 + 1) = 0xE000000000000000;
  sub_1DCB88A98();
  swift_bridgeObjectRelease();
  *(void *)&long long v297 = 0xD000000000000012;
  *((void *)&v297 + 1) = 0x80000001DCB91D30;
  unint64_t v208 = sub_1DC8E72F4((uint64_t)&qword_1EAAA41A0);
  char v209 = v295;
  unint64_t v275 = v208;
  sub_1DCB88F98();
  sub_1DCB87A18();
  swift_bridgeObjectRelease();
  sub_1DCB87A18();
  sub_1DC8E79C4();
  sub_1DCA2606C();
  swift_bridgeObjectRelease();
  sub_1DC88D5C8();
  v210();
  sub_1DC8E7358((uint64_t)&unk_1EAA9F330);
  swift_retain_n();
  uint64_t v211 = sub_1DCB87428();
  swift_release_n();
  sub_1DC88D5C8();
  v212();
  uint64_t v279 = v206;
  *(void *)&long long v297 = v206;
  sub_1DC8E7358((uint64_t)&unk_1EAA9F338);
  uint64_t v277 = v211;
  swift_retain();
  sub_1DC8E7C34();
  sub_1DCB873B8();
  sub_1DC8E7358((uint64_t)&unk_1EAA9F340);
  uint64_t v276 = sub_1DC8E79EC();
  sub_1DC88D5C8();
  v213();
  float32x4_t v214 = v250;
  sub_1DC8E7D10();
  v215();
  uint64_t v216 = v294;
  swift_retain_n();
  uint64_t v217 = sub_1DCB86FC8();
  os_log_type_t v218 = sub_1DCB88488();
  if (os_log_type_enabled(v217, v218))
  {
    float32x4_t v219 = (uint8_t *)swift_slowAlloc();
    uint64_t v220 = swift_slowAlloc();
    sub_1DC8E79B8(v220);
    *(_DWORD *)float32x4_t v219 = 136446210;
    uint64_t v221 = v214;
    float32x4_t v287 = (void (*)(unsigned char *, unsigned char *, uint64_t))(v219 + 4);
    uint64_t v222 = v237;
    uint64_t v223 = sub_1DCB88F98();
    uint64_t v296 = sub_1DC9F8920(v223, v224, (uint64_t *)&v297);
    sub_1DCB88778();
    swift_bridgeObjectRelease();
    uint64_t v225 = *(void (**)(unsigned char *, uint64_t))(v289 + 8);
    v225(v221, v222);
    _os_log_impl(&dword_1DC873000, v217, v218, "Successfully run movie remix %{public}s", v219, 0xCu);
    swift_arrayDestroy();
    uint64_t v216 = v294;
    sub_1DC8E7728();
    sub_1DC8E7728();
    swift_release();

    swift_release();
    uint64_t v226 = v277;
    swift_release();
    swift_release();

    sub_1DC8E7CA8();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_1DC8E7BE8();
    swift_release();
    swift_release();
    swift_release();
    v225(v295, v222);
  }
  else
  {

    sub_1DC8E7CA8();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_1DC8E7BE8();
    swift_release();
    swift_release();
    swift_release();
    float32x4_t v227 = *(void (**)(unsigned char *, uint64_t))(v289 + 8);
    float32x4_t v228 = v214;
    uint64_t v229 = v237;
    v227(v228, v237);

    swift_release();
    swift_release();
    uint64_t v226 = v277;
    swift_release();
    swift_release();
    v227(v209, v229);
  }
  float32x4_t v230 = v259;
  uint64_t v231 = v276;
  *float32x4_t v259 = v226;
  v230[1] = v231;
  v230[2] = (uint64_t)sub_1DC8E7348;
  v230[3] = v216;
  v230[4] = (uint64_t)sub_1DC8E7350;
  v230[5] = v216;
LABEL_22:
  sub_1DC8E7A74();
}

uint64_t sub_1DC8E2F6C@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, void *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = swift_retain();
  uint64_t v9 = a1(v8);
  if (v4)
  {

    sub_1DC87E988(&qword_1EAA9E2E0);
    swift_allocObject();
    uint64_t v10 = sub_1DCABB998();
  }
  else
  {
    uint64_t v10 = v9;
  }
  swift_release();
  uint64_t v12 = a3[1];
  uint64_t v11 = (void (*)(void *))a3[2];
  uint64_t v13 = (void (*)(void))a3[4];
  v29[0] = v10;
  v29[1] = a2;
  while (1)
  {
    uint64_t v14 = swift_retain();
    uint64_t v15 = (void *)MEMORY[0x1E01A8D20](v14);
    if (!*(void *)(v10 + 16)) {
      break;
    }
    id v30 = *(id *)(v10 + 16);
    sub_1DCAB9318(&v30, (uint64_t)v29, &v31);
    uint64_t v16 = v31;
    swift_release();
    if (!v16) {
      goto LABEL_9;
    }
    v11(v16);
  }
  sub_1DC87E988(&qword_1EAA9E2E8);
  sub_1DC8E7358((uint64_t)&qword_1EAA9E2F0);
  uint64_t v17 = (void *)swift_allocError();
  swift_willThrow();
  swift_release();

LABEL_9:
  uint64_t v32 = v12;
  sub_1DCABB9A4();
  swift_release();
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  uint64_t v19 = (void **)(v18 + 16);
  *(unsigned char *)(v18 + 48) = -1;
  v29[0] = v12;
  swift_retain_n();
  sub_1DC8E6D44((uint64_t)&v32);
  sub_1DC87E988(&qword_1EAA9F1C8);
  sub_1DC8E7358((uint64_t)&unk_1EAA9F1D0);
  sub_1DCB87428();
  swift_release_n();
  swift_release();
  v13(0);
  sub_1DCB87268();
  swift_beginAccess();
  int v20 = *(unsigned __int8 *)(v18 + 48);
  if (v20 == 255)
  {
    sub_1DC8E6E08();
    swift_allocError();
    *uint64_t v21 = 3;
    swift_willThrow();
    swift_release();
    return swift_release();
  }
  else
  {
    uint64_t v23 = *v19;
    if (v20)
    {
      uint64_t v31 = *v19;
      id v27 = v23;
      sub_1DC87E988(&qword_1EAA9DF60);
      swift_willThrowTypedImpl();
      swift_release();
      return swift_release();
    }
    else
    {
      uint64_t v24 = *(void *)(v18 + 24);
      uint64_t v25 = *(void *)(v18 + 32);
      uint64_t v26 = *(void *)(v18 + 40);
      swift_bridgeObjectRetain();
      swift_release();
      uint64_t result = swift_release();
      *a4 = v23;
      a4[1] = v24;
      a4[2] = v25;
      a4[3] = v26;
    }
  }
  return result;
}

void sub_1DC8E3308(void **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    swift_beginAccess();
    uint64_t v4 = *(void **)(a2 + 16);
    uint64_t v5 = *(void *)(a2 + 24);
    uint64_t v6 = *(void *)(a2 + 32);
    uint64_t v7 = *(void *)(a2 + 40);
    *(void *)(a2 + 16) = v2;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    unsigned __int8 v8 = *(unsigned char *)(a2 + 48);
    *(unsigned char *)(a2 + 48) = 1;
    id v9 = v2;
    sub_1DC8E6E54(v4, v5, v6, v7, v8);
  }
}

void sub_1DC8E33A0(long long *a1, uint64_t a2)
{
  long long v9 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v3 = *((void *)a1 + 3);
  swift_beginAccess();
  uint64_t v5 = *(void **)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  *(_OWORD *)(a2 + 16) = v9;
  *(void *)(a2 + 32) = v4;
  *(void *)(a2 + 40) = v3;
  LOBYTE(v4) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a2 + 48) = 0;
  swift_bridgeObjectRetain();
  sub_1DC8E6E54(v5, v6, v7, v8, v4);
}

id sub_1DC8E343C@<X0>(void **a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = sub_1DCB86BF8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  long long v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  if (qword_1EAA9C658 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_1DCB86FE8();
  sub_1DC89F57C(v11, (uint64_t)qword_1EAAFF810);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  id v22 = v10;
  uint64_t v12 = sub_1DCB86FC8();
  os_log_type_t v13 = sub_1DCB88488();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t v24 = v15;
    *(_DWORD *)uint64_t v14 = 136446466;
    sub_1DC8E72F4((uint64_t)&qword_1EAAA41A0);
    uint64_t v16 = sub_1DCB88F98();
    uint64_t v23 = sub_1DC9F8920(v16, v17, &v24);
    sub_1DCB88778();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(_WORD *)(v14 + 12) = 1026;
    unsigned int v18 = objc_msgSend(v22, sel_frameLength);

    LODWORD(v23) = v18;
    sub_1DCB88778();

    _os_log_impl(&dword_1DC873000, v12, v13, "[PUB] movie remix %{public}s: received first buffer with frame count %{public}u", (uint8_t *)v14, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1E01A99C0](v15, -1, -1);
    MEMORY[0x1E01A99C0](v14, -1, -1);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  id v19 = v22;
  *a3 = v22;

  return v19;
}

void sub_1DC8E3754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_1DC88D6B0();
  a19 = v20;
  a20 = v21;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  sub_1DCB86BF8();
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v26);
  if (qword_1EAA9C658 != -1) {
    swift_once();
  }
  uint64_t v27 = sub_1DCB86FE8();
  sub_1DC89F57C(v27, (uint64_t)qword_1EAAFF810);
  sub_1DC8E7D10();
  v28();
  uint64_t v29 = sub_1DCB86FC8();
  os_log_type_t v30 = v25();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v38 = v23;
    uint64_t v31 = swift_slowAlloc();
    a10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 136446466;
    sub_1DC8E72F4((uint64_t)&qword_1EAAA41A0);
    uint64_t v32 = sub_1DCB88F98();
    sub_1DC9F8920(v32, v33, &a10);
    sub_1DCB88778();
    swift_bridgeObjectRelease();
    uint64_t v34 = sub_1DC8E7B98();
    v35(v34);
    *(_WORD *)(v31 + 12) = 2050;
    sub_1DCB88778();
    _os_log_impl(&dword_1DC873000, v29, v30, v38, (uint8_t *)v31, 0x16u);
    swift_arrayDestroy();
    sub_1DC8E7728();
    sub_1DC8E7728();
  }
  else
  {
    uint64_t v36 = sub_1DC8E7B98();
    v37(v36);
  }

  sub_1DC88D674();
}

void sub_1DC8E39C8(void **a1@<X0>, unint64_t *a2@<X8>)
{
  sub_1DCB0C160(*a1);
  if (!v2)
  {
    unint64_t v8 = v4;
    uint64_t v9 = v5;
    uint64_t v10 = v6;
    if (v7)
    {
      if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63)
      {
        __break(1u);
        return;
      }
      unint64_t v8 = sub_1DCB0D1B0(v5 * v6, v4, v5, v6);
    }
    *a2 = v8;
    a2[1] = v9;
    a2[2] = v10;
  }
}

uint64_t sub_1DC8E3A3C@<X0>(uint64_t *a1@<X8>)
{
  sub_1DC8E6E08();
  uint64_t result = swift_allocError();
  *a1 = result;
  *uint64_t v3 = 5;
  return result;
}

id sub_1DC8E3A84(void *a1)
{
  uint64_t v2 = (void *)sub_1DCB87908();
  id v3 = sub_1DCB60550(a1, v2);

  return v3;
}

uint64_t sub_1DC8E3AF4(void *a1)
{
  sub_1DC87E988(&qword_1EAA9C720);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1DCBB8670;
  *(void *)(v2 + 32) = a1;
  uint64_t v5 = v2;
  sub_1DCB87C68();
  id v3 = a1;
  return v5;
}

void sub_1DC8E3B64(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4 = *(double *)(a1 + 8);
  uint64_t v5 = qword_1EAA9C658;
  id v6 = *(id *)a1;
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_1DCB86FE8();
  sub_1DC89F57C(v7, (uint64_t)qword_1EAAFF810);
  unint64_t v8 = sub_1DCB86FC8();
  os_log_type_t v9 = sub_1DCB88488();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 134349056;
    *(double *)&long long v13 = v4;
    sub_1DCB88778();
    _os_log_impl(&dword_1DC873000, v8, v9, "Movie remix, generating final result. Music detected? %{public}f", v10, 0xCu);
    MEMORY[0x1E01A99C0](v10, -1, -1);
  }

  sub_1DC8DFA34(v6, (uint64_t)&v13, v4);
  if (!v2)
  {
    uint64_t v11 = v14;
    uint64_t v12 = v15;
    *(_OWORD *)a2 = v13;
    *(void *)(a2 + 16) = v11;
    *(void *)(a2 + 24) = v12;
  }
}

uint64_t sub_1DC8E3CD0()
{
  return sub_1DCB872D8();
}

uint64_t sub_1DC8E3D08()
{
  return sub_1DCB872E8();
}

uint64_t sub_1DC8E3D40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(void *)(a2 + 16) = v3;
  *(void *)(a2 + 24) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1DC8E3D58()
{
  return sub_1DCB87298();
}

void sub_1DC8E3D8C(void *a1)
{
  if (a1)
  {
    id v2 = a1;
    sub_1DCB87288();
  }
  else
  {
    sub_1DCB87288();
  }
}

uint64_t sub_1DC8E3DE4@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  sub_1DC8E6B70();
  if (v17)
  {
    sub_1DC8BA1CC(&v16, (uint64_t)&v18);
    sub_1DC8BA1CC(&v18, (uint64_t)v21);
  }
  else
  {
    sub_1DC88CC04((uint64_t)&v16, &qword_1EAA9F128);
    if (qword_1EAA9D1C8 != -1) {
      swift_once();
    }
    id v6 = (void *)qword_1EAAFF880;
    uint64_t v7 = qword_1EAAFF888;
    uint64_t v8 = qword_1EAAFF898;
    uint64_t v25 = qword_1EAAFF890;
    uint64_t v9 = qword_1EAAFF8A0;
    char v10 = byte_1EAAFF8A8;
    id v19 = &unk_1F37E2540;
    uint64_t v20 = &off_1F37E2458;
    uint64_t v11 = sub_1DC8E7B80();
    *(void *)&long long v18 = v11;
    if (v10)
    {
      *(void *)&long long v16 = v6;
      id v12 = v6;
      sub_1DC87E988(&qword_1EAA9DF60);
      swift_willThrowTypedImpl();
      return sub_1DC8E6BC8((uint64_t)&v18);
    }
    *(void *)(v11 + 16) = v6;
    *(void *)(v11 + 24) = v7;
    *(unsigned char *)(v11 + 32) = v25 & 1;
    *(void *)(v11 + 40) = v8;
    *(void *)(v11 + 48) = v9;
    sub_1DC8BA1CC(&v18, (uint64_t)v21);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  sub_1DC881A8C(v21, v21[3]);
  *(void *)&long long v18 = v4;
  *((void *)&v18 + 1) = v5;
  sub_1DC8E07A8();
  uint64_t result = sub_1DC8818D0((uint64_t)v21);
  if (!v2)
  {
    long long v14 = v23;
    long long v15 = v24;
    *a2 = v22;
    a2[1] = v14;
    a2[2] = v15;
  }
  return result;
}

uint64_t run(_:)(uint64_t a1, _OWORD *a2)
{
  *(void *)(v2 + 104) = a1;
  *(_OWORD *)(v2 + 112) = *a2;
  return MEMORY[0x1F4188298](sub_1DC8E3FE4, 0, 0);
}

uint64_t sub_1DC8E3FE4()
{
  uint64_t v8 = v0;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)uint64_t v7 = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 80) = 0u;
  *(void *)(v0 + 96) = 0;
  sub_1DC8E3DE4(v7, (_OWORD *)(v0 + 16));
  uint64_t v1 = *(_OWORD **)(v0 + 104);
  long long v5 = *(_OWORD *)(v0 + 32);
  long long v6 = *(_OWORD *)(v0 + 16);
  long long v4 = *(_OWORD *)(v0 + 48);
  sub_1DC88CC04(v0 + 64, &qword_1EAA9F128);
  *uint64_t v1 = v6;
  v1[1] = v5;
  v1[2] = v4;
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1DC8E40FC()
{
  return *(unsigned int *)(v0 + OBJC_IVAR___SNMovieRemixDSPParameter_key);
}

uint64_t sub_1DC8E4134(uint64_t result)
{
  *(_DWORD *)(v1 + OBJC_IVAR___SNMovieRemixDSPParameter_key) = result;
  return result;
}

float sub_1DC8E4168()
{
  return *(float *)(v0 + OBJC_IVAR___SNMovieRemixDSPParameter_value);
}

void sub_1DC8E419C(float a1)
{
  *(float *)(v1 + OBJC_IVAR___SNMovieRemixDSPParameter_value) = a1;
}

id sub_1DC8E41AC(int a1, float a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(_DWORD *)&v2[OBJC_IVAR___SNMovieRemixDSPParameter_key] = a1;
  *(float *)&v2[OBJC_IVAR___SNMovieRemixDSPParameter_value] = a2;
  v7.receiver = v2;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, sel_init);
}

void SNMovieRemixDSPParameter.init()()
{
}

uint64_t SNMovieRemixFinalResult.algorithmVersion.getter()
{
  return *(unsigned int *)(v0 + OBJC_IVAR___SNMovieRemixFinalResult_impl);
}

uint64_t SNMovieRemixFinalResult.algorithmVersion.setter(uint64_t result)
{
  *(_DWORD *)(v1 + OBJC_IVAR___SNMovieRemixFinalResult_impl) = result;
  return result;
}

uint64_t (*SNMovieRemixFinalResult.algorithmVersion.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v2 = OBJC_IVAR___SNMovieRemixFinalResult_impl;
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v1 + v2);
  return sub_1DC8E42F0;
}

uint64_t sub_1DC8E42F0(uint64_t result)
{
  *(_DWORD *)(*(void *)result + *(void *)(result + 8)) = *(_DWORD *)(result + 16);
  return result;
}

float SNMovieRemixFinalResult.dialogueGain.getter()
{
  return *(float *)(v0 + OBJC_IVAR___SNMovieRemixFinalResult_impl + 4);
}

void SNMovieRemixFinalResult.dialogueGain.setter(float a1)
{
  *(float *)(v1 + OBJC_IVAR___SNMovieRemixFinalResult_impl + 4) = a1;
}

float (*SNMovieRemixFinalResult.dialogueGain.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v2 = OBJC_IVAR___SNMovieRemixFinalResult_impl;
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v1 + v2 + 4);
  return sub_1DC8E43A8;
}

float sub_1DC8E43A8(uint64_t a1)
{
  float result = *(float *)(a1 + 16);
  *(float *)(*(void *)a1 + *(void *)(a1 + 8) + 4) = result;
  return result;
}

float SNMovieRemixFinalResult.ambienceGain.getter()
{
  return *(float *)(v0 + OBJC_IVAR___SNMovieRemixFinalResult_impl + 8);
}

void SNMovieRemixFinalResult.ambienceGain.setter(float a1)
{
  *(float *)(v1 + OBJC_IVAR___SNMovieRemixFinalResult_impl + 8) = a1;
}

float (*SNMovieRemixFinalResult.ambienceGain.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v2 = OBJC_IVAR___SNMovieRemixFinalResult_impl;
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v1 + v2 + 8);
  return sub_1DC8E4464;
}

float sub_1DC8E4464(uint64_t a1)
{
  float result = *(float *)(a1 + 16);
  *(float *)(*(void *)a1 + *(void *)(a1 + 8) + 8) = result;
  return result;
}

float SNMovieRemixFinalResult.dialogueLoudness.getter()
{
  return *(float *)(v0 + OBJC_IVAR___SNMovieRemixFinalResult_impl + 12);
}

void SNMovieRemixFinalResult.dialogueLoudness.setter(float a1)
{
  *(float *)(v1 + OBJC_IVAR___SNMovieRemixFinalResult_impl + 12) = a1;
}

float (*SNMovieRemixFinalResult.dialogueLoudness.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v2 = OBJC_IVAR___SNMovieRemixFinalResult_impl;
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v1 + v2 + 12);
  return sub_1DC8E4520;
}

float sub_1DC8E4520(uint64_t a1)
{
  float result = *(float *)(a1 + 16);
  *(float *)(*(void *)a1 + *(void *)(a1 + 8) + 12) = result;
  return result;
}

float SNMovieRemixFinalResult.ambienceLoudness.getter()
{
  return *(float *)(v0 + OBJC_IVAR___SNMovieRemixFinalResult_impl + 16);
}

void SNMovieRemixFinalResult.ambienceLoudness.setter(float a1)
{
  *(float *)(v1 + OBJC_IVAR___SNMovieRemixFinalResult_impl + 16) = a1;
}

float (*SNMovieRemixFinalResult.ambienceLoudness.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v2 = OBJC_IVAR___SNMovieRemixFinalResult_impl;
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v1 + v2 + 16);
  return sub_1DC8E45DC;
}

float sub_1DC8E45DC(uint64_t a1)
{
  float result = *(float *)(a1 + 16);
  *(float *)(*(void *)a1 + *(void *)(a1 + 8) + 16) = result;
  return result;
}

float SNMovieRemixFinalResult.recordingLoudness.getter()
{
  return *(float *)(v0 + OBJC_IVAR___SNMovieRemixFinalResult_impl + 20);
}

void SNMovieRemixFinalResult.recordingLoudness.setter(float a1)
{
  *(float *)(v1 + OBJC_IVAR___SNMovieRemixFinalResult_impl + 20) = a1;
}

float (*SNMovieRemixFinalResult.recordingLoudness.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v2 = OBJC_IVAR___SNMovieRemixFinalResult_impl;
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v1 + v2 + 20);
  return sub_1DC8E4698;
}

float sub_1DC8E4698(uint64_t a1)
{
  float result = *(float *)(a1 + 16);
  *(float *)(*(void *)a1 + *(void *)(a1 + 8) + 20) = result;
  return result;
}

uint64_t SNMovieRemixFinalResult.dspParameters.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___SNMovieRemixFinalResult_impl + 24);
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v10 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    sub_1DCB88B68();
    long long v4 = (objc_class *)type metadata accessor for SNMovieRemixDSPParameter();
    long long v5 = (float *)(v1 + 36);
    do
    {
      int v6 = *((_DWORD *)v5 - 1);
      float v7 = *v5;
      v5 += 2;
      id v8 = objc_allocWithZone(v4);
      sub_1DC8E41AC(v6, v7);
      sub_1DCB88B48();
      sub_1DCB88B78();
      sub_1DCB88B88();
      sub_1DCB88B58();
      --v2;
    }
    while (v2);
    uint64_t v3 = v10;
    swift_bridgeObjectRelease();
  }
  return v3;
}

id sub_1DC8E4808(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  int v4 = *(_DWORD *)(a1 + 20);
  uint64_t v5 = *(void *)(a1 + 24);
  int v6 = &v3[OBJC_IVAR___SNMovieRemixFinalResult_impl];
  *(_DWORD *)int v6 = *(_DWORD *)a1;
  *(_OWORD *)(v6 + 4) = *(_OWORD *)(a1 + 4);
  *((_DWORD *)v6 + 5) = v4;
  *((void *)v6 + 3) = v5;
  v8.receiver = v3;
  v8.super_class = v1;
  return objc_msgSendSuper2(&v8, sel_init);
}

void SNMovieRemixFinalResult.init()()
{
}

id sub_1DC8E48C8()
{
  sub_1DC8E7AFC();
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  int v4 = &v1[OBJC_IVAR___SNMovieRemixRequest_impl];
  *(void *)int v4 = v0;
  *((void *)v4 + 1) = v2;
  v6.receiver = v1;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, sel_init);
}

void SNMovieRemixRequest.init()()
{
}

id sub_1DC8E498C(_OWORD *a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  int v4 = &v3[OBJC_IVAR___SNMovieRemixSession_impl];
  long long v5 = a1[1];
  *(_OWORD *)int v4 = *a1;
  *((_OWORD *)v4 + 1) = v5;
  *((_OWORD *)v4 + 2) = a1[2];
  v7.receiver = v3;
  v7.super_class = v1;
  return objc_msgSendSuper2(&v7, sel_init);
}

id sub_1DC8E49EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = *(void *)(v4 + OBJC_IVAR___SNMovieRemixSession_impl + 8);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a3;
  *(void *)(v9 + 24) = a4;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1DC87E988(&qword_1EAA9F1C8);
  sub_1DC8E7358((uint64_t)&unk_1EAA9F1D0);
  sub_1DCB87428();
  sub_1DC8C213C();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v11 = (objc_class *)type metadata accessor for AnyCancellableWrapper();
  id v12 = (char *)objc_allocWithZone(v11);
  *(void *)&v12[OBJC_IVAR____TtC13SoundAnalysis21AnyCancellableWrapper_wrapped] = &v15;
  v14.receiver = v12;
  v14.super_class = v11;
  return objc_msgSendSuper2(&v14, sel_init);
}

void sub_1DC8E4B58(void **a1, void (*a2)(void *))
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    id v4 = v3;
    a2(v3);
  }
  else
  {
    a2(0);
  }
}

void sub_1DC8E4BD0(int *a1, void (*a2)(void))
{
  int v4 = *a1;
  int v5 = a1[5];
  uint64_t v6 = *((void *)a1 + 3);
  type metadata accessor for SNMovieRemixFinalResult();
  int v8 = v4;
  long long v9 = *(_OWORD *)(a1 + 1);
  int v10 = v5;
  uint64_t v11 = v6;
  swift_bridgeObjectRetain();
  id v7 = sub_1DC8E4808((uint64_t)&v8);
  a2();
}

uint64_t sub_1DC8E4D5C(uint64_t a1)
{
  uint64_t v3 = *(void (**)(uint64_t))(v1 + OBJC_IVAR___SNMovieRemixSession_impl + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v3(a1);
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_1DC8E4E64(void *a1)
{
  uint64_t v2 = *(void (**)(void *))(v1 + OBJC_IVAR___SNMovieRemixSession_impl + 32);
  if (a1)
  {
    id v4 = a1;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v2(a1);
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v2(0);
  }
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

void SNMovieRemixSession.init()()
{
}

id sub_1DC8E503C(uint64_t a1)
{
  v3[0] = *(_OWORD *)(a1 + OBJC_IVAR___SNMovieRemixRequest_impl);
  id result = (id)sub_1DC8E3DE4((uint64_t *)v3, v4);
  if (!v1)
  {
    type metadata accessor for SNMovieRemixSession();
    v3[0] = v4[0];
    v3[1] = v4[1];
    mach_timebase_info v3[2] = v4[2];
    return sub_1DC8E498C(v3);
  }
  return result;
}

uint64_t sub_1DC8E50AC(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  memset(v5, 0, sizeof(v5));
  sub_1DC8E5110(a1, (int)v5, v3);
  _Block_release(v3);
  return sub_1DC88CC04((uint64_t)v5, &qword_1EAA9CAB0);
}

void sub_1DC8E5110(uint64_t a1, int a2, void *aBlock)
{
  id v4 = (void (**)(void *, id, void))_Block_copy(aBlock);
  sub_1DC8E6B70();
  if (v7)
  {
    sub_1DC87E9CC(&v6, &v8);
    sub_1DC87E988(&qword_1EAA9F1C0);
    swift_dynamicCast();
  }
  else
  {
    sub_1DC88CC04((uint64_t)&v6, &qword_1EAA9CAB0);
    memset(v9, 0, sizeof(v9));
    uint64_t v10 = 0;
  }
  id v5 = sub_1DC8E503C(a1);
  sub_1DC88CC04((uint64_t)v9, &qword_1EAA9F128);
  v4[2](v4, v5, 0);
  _Block_release(v4);
}

id sub_1DC8E5360(uint64_t a1)
{
  uint64_t v4 = 0;
  memset(v3, 0, sizeof(v3));
  id v1 = sub_1DC8E503C(a1);
  sub_1DC88CC04((uint64_t)v3, &qword_1EAA9F128);
  return v1;
}

uint64_t sub_1DC8E5450(uint64_t a1)
{
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  sub_1DC8E0254(a1, (uint64_t)&v14);
  if (!v1)
  {
    uint64_t v2 = type metadata accessor for SNMovieRemixFinalResult();
    sub_1DC8E7774(v2, v3, v4, v5, v6, v7, v8, v9, v11, v12, SHIDWORD(v12), v13, v14, v15, v16, v17);
  }
  sub_1DC88CC04((uint64_t)v18, &qword_1EAA9F128);
  return sub_1DC8E7890();
}

uint64_t sub_1DC8E561C()
{
  sub_1DC8E6B70();
  if (v15)
  {
    sub_1DC87E9CC(&v12, &v16);
    sub_1DC87E988(&qword_1EAA9F1C0);
    swift_dynamicCast();
  }
  else
  {
    sub_1DC88CC04((uint64_t)&v12, &qword_1EAA9CAB0);
    memset(v20, 0, sizeof(v20));
    uint64_t v21 = 0;
  }
  uint64_t v1 = sub_1DC8E7890();
  sub_1DC8E0254(v1, v2);
  if (!v0)
  {
    uint64_t v3 = type metadata accessor for SNMovieRemixFinalResult();
    sub_1DC8E7774(v3, v4, v5, v6, v7, v8, v9, v10, v12, v13, v14, v15, v16, v17, v18, v19);
  }
  sub_1DC88CC04((uint64_t)v20, &qword_1EAA9F128);
  return sub_1DC8E7890();
}

id SNMovieRemix.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

id SNMovieRemix.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_init);
}

id _s13SoundAnalysis24SNMovieRemixDSPParameterCfD_0()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1DC8E597C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v4)
  {
    unint64_t v5 = 0;
    uint64_t v6 = 32;
    while (1)
    {
      uint64_t result = sub_1DC8A8E44(a1 + v6, (uint64_t)v10);
      unint64_t v8 = *(void *)(a2 + 16);
      if (v5 == v8)
      {
        sub_1DC8A8EA0((uint64_t)v10);
        goto LABEL_9;
      }
      if (v5 >= v8) {
        break;
      }
      __src[0] = v10[0];
      __src[1] = v10[1];
      *(void *)&__src[2] = *(void *)&v10[2];
      sub_1DC8A8E44(a2 + v6, (uint64_t)&__src[2] + 8);
      memcpy(v10, __src, sizeof(v10));
      char v9 = MEMORY[0x1E01A7A10](v10, (char *)&v10[2] + 8);
      sub_1DC88CC04((uint64_t)v10, qword_1EAA9F358);
      if ((v9 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 0;
      }
      ++v5;
      v6 += 40;
      if (v4 == v5) {
        goto LABEL_9;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_9:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 1;
  }
  return result;
}

void *sub_1DC8E5AC0(void *a1, uint64_t *a2, void *(*a3)(void **__return_ptr, void **))
{
  uint64_t v7 = a1;
  uint64_t v4 = *a2;
  if (*a2 < 1)
  {
    uint64_t v6 = a1;
    uint64_t result = a1;
  }
  else
  {
    uint64_t result = a3(&v6, &v7);
  }
  if (__OFSUB__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *a2 = v4 - 1;
    return v6;
  }
  return result;
}

void *sub_1DC8E5B34(void *a1, void *a2, uint64_t (*a3)(void **), uint64_t a4, uint64_t a5, void (*a6)(void))
{
  uint64_t v15 = a1;
  uint64_t v11 = a3(&v15);
  if (v6) {
    return a1;
  }
  BOOL v12 = __OFADD__(*a2, v11);
  uint64_t result = (void *)(*a2 + v11);
  if (!v12)
  {
    *a2 = result;
    if ((uint64_t)result >= a5)
    {
      a6();
      *a2 = 0;
    }
    id v14 = a1;
    return a1;
  }
  __break(1u);
  return result;
}

uint64_t sub_1DC8E5BDC(void *a1)
{
  return objc_msgSend(a1, sel_frameLength);
}

uint64_t sub_1DC8E5C10(void *a1)
{
  id v2 = objc_msgSend(a1, sel_resourcePath);

  if (!v2) {
    return 0;
  }
  uint64_t v3 = sub_1DCB87938();

  return v3;
}

unint64_t sub_1DC8E5C80()
{
  unint64_t result = qword_1EAA9F0E8;
  if (!qword_1EAA9F0E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9F0E8);
  }
  return result;
}

unint64_t sub_1DC8E5CCC()
{
  unint64_t result = qword_1EAA9F100;
  if (!qword_1EAA9F100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9F100);
  }
  return result;
}

unint64_t sub_1DC8E5D18(uint64_t a1)
{
  unint64_t result = sub_1DC89DD64(a1);
  if (!result)
  {
    uint64_t v4 = v3;
    sub_1DC8863A8(&qword_1EAA9F0F0);
    v4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_1DC8E5D84()
{
  unint64_t result = qword_1EAA9F118;
  if (!qword_1EAA9F118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9F118);
  }
  return result;
}

uint64_t type metadata accessor for SNMovieRemixDSPParameter()
{
  return self;
}

unint64_t sub_1DC8E5DF8()
{
  unint64_t result = qword_1EAA9F138;
  if (!qword_1EAA9F138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9F138);
  }
  return result;
}

unint64_t sub_1DC8E5E48()
{
  unint64_t result = qword_1EAA9F140;
  if (!qword_1EAA9F140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9F140);
  }
  return result;
}

unint64_t sub_1DC8E5E98()
{
  unint64_t result = qword_1EAA9F148;
  if (!qword_1EAA9F148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9F148);
  }
  return result;
}

uint64_t sub_1DC8E5EE4()
{
  sub_1DC89D5C0();
  uint64_t result = SNMovieRemixFinalResult.algorithmVersion.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_1DC8E5F0C(unsigned int *a1)
{
  return SNMovieRemixFinalResult.algorithmVersion.setter(*a1);
}

void sub_1DC8E5F34()
{
  sub_1DC89D5C0();
  *uint64_t v0 = SNMovieRemixFinalResult.dialogueGain.getter();
}

void sub_1DC8E5F5C(uint64_t a1)
{
  float v1 = sub_1DC8E7B5C(a1);
  SNMovieRemixFinalResult.dialogueGain.setter(v1);
}

void sub_1DC8E5F80()
{
  sub_1DC89D5C0();
  *uint64_t v0 = SNMovieRemixFinalResult.ambienceGain.getter();
}

void sub_1DC8E5FA8(uint64_t a1)
{
  float v1 = sub_1DC8E7B5C(a1);
  SNMovieRemixFinalResult.ambienceGain.setter(v1);
}

void sub_1DC8E5FCC()
{
  sub_1DC89D5C0();
  *uint64_t v0 = SNMovieRemixFinalResult.dialogueLoudness.getter();
}

void sub_1DC8E5FF4(uint64_t a1)
{
  float v1 = sub_1DC8E7B5C(a1);
  SNMovieRemixFinalResult.dialogueLoudness.setter(v1);
}

void sub_1DC8E6018()
{
  sub_1DC89D5C0();
  *uint64_t v0 = SNMovieRemixFinalResult.ambienceLoudness.getter();
}

void sub_1DC8E6040(uint64_t a1)
{
  float v1 = sub_1DC8E7B5C(a1);
  SNMovieRemixFinalResult.ambienceLoudness.setter(v1);
}

void sub_1DC8E6064()
{
  sub_1DC89D5C0();
  *uint64_t v0 = SNMovieRemixFinalResult.recordingLoudness.getter();
}

void sub_1DC8E608C(uint64_t a1)
{
  float v1 = sub_1DC8E7B5C(a1);
  SNMovieRemixFinalResult.recordingLoudness.setter(v1);
}

void type metadata accessor for MovieRemix()
{
}

void type metadata accessor for MovieRemix.Request()
{
}

void type metadata accessor for MovieRemix.Session()
{
}

void type metadata accessor for MovieRemix.DSPParameterTuple()
{
}

uint64_t destroy for MovieRemix.FinalResult()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MovieRemix.FinalResult(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MovieRemix.FinalResult(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MovieRemix.FinalResult(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MovieRemix.FinalResult(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MovieRemix.FinalResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for MovieRemix.FinalResult()
{
}

uint64_t method lookup function for SNMovieRemixDSPParameter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SNMovieRemixDSPParameter);
}

uint64_t type metadata accessor for SNMovieRemixFinalResult()
{
  return self;
}

uint64_t method lookup function for SNMovieRemixFinalResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SNMovieRemixFinalResult);
}

uint64_t type metadata accessor for SNMovieRemixRequest()
{
  return self;
}

uint64_t method lookup function for SNMovieRemixRequest(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SNMovieRemixRequest);
}

uint64_t type metadata accessor for SNMovieRemixSession()
{
  return self;
}

uint64_t method lookup function for SNMovieRemixSession(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SNMovieRemixSession);
}

uint64_t type metadata accessor for SNMovieRemix()
{
  return self;
}

uint64_t _s13SoundAnalysis10MovieRemixV7SessionVwxx_0(uint64_t a1)
{
  sub_1DC89DD64(a1);
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t _s13SoundAnalysis10MovieRemixV7SessionVwcp_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *_s13SoundAnalysis10MovieRemixV7SessionVwca_0()
{
  sub_1DC8E7968();
  *float v1 = *v2;
  swift_retain();
  swift_release();
  v1[1] = v0[1];
  swift_retain();
  swift_release();
  uint64_t v3 = v0[3];
  v1[2] = v0[2];
  v1[3] = v3;
  swift_retain();
  swift_release();
  uint64_t v4 = v0[5];
  void v1[4] = v0[4];
  void v1[5] = v4;
  swift_retain();
  swift_release();
  return v1;
}

_OWORD *_s13SoundAnalysis10MovieRemixV7SessionVwta_0()
{
  sub_1DC8E7968();
  swift_release();
  *float v1 = *v0;
  swift_release();
  v1[1] = v0[1];
  swift_release();
  v1[2] = v0[2];
  swift_release();
  return v1;
}

uint64_t getEnumTagSinglePayload for XPCSubscription(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCSubscription(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for MovieRemix.Session.Impl()
{
}

uint64_t getEnumTagSinglePayload for MovieRemix.FinalResult.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 6) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v5 = v6 - 7;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for MovieRemix.FinalResult.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DC8E6708);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MovieRemix.FinalResult.CodingKeys()
{
  return &type metadata for MovieRemix.FinalResult.CodingKeys;
}

ValueMetadata *type metadata accessor for MovieRemix.DSPParameterTuple.CodingKeys()
{
  return &type metadata for MovieRemix.DSPParameterTuple.CodingKeys;
}

unsigned char *_s13SoundAnalysis10MovieRemixV17DSPParameterTupleV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DC8E6820);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MovieRemix.Request.CodingKeys()
{
  return &type metadata for MovieRemix.Request.CodingKeys;
}

unint64_t sub_1DC8E685C()
{
  unint64_t result = qword_1EAA9F170;
  if (!qword_1EAA9F170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9F170);
  }
  return result;
}

unint64_t sub_1DC8E68AC()
{
  unint64_t result = qword_1EAA9F178;
  if (!qword_1EAA9F178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9F178);
  }
  return result;
}

unint64_t sub_1DC8E68FC()
{
  unint64_t result = qword_1EAA9F180;
  if (!qword_1EAA9F180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9F180);
  }
  return result;
}

unint64_t sub_1DC8E694C()
{
  unint64_t result = qword_1EAA9F188;
  if (!qword_1EAA9F188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9F188);
  }
  return result;
}

unint64_t sub_1DC8E699C()
{
  unint64_t result = qword_1EAA9F190;
  if (!qword_1EAA9F190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9F190);
  }
  return result;
}

unint64_t sub_1DC8E69EC()
{
  unint64_t result = qword_1EAA9F198;
  if (!qword_1EAA9F198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9F198);
  }
  return result;
}

unint64_t sub_1DC8E6A3C()
{
  unint64_t result = qword_1EAA9F1A0;
  if (!qword_1EAA9F1A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9F1A0);
  }
  return result;
}

unint64_t sub_1DC8E6A8C()
{
  unint64_t result = qword_1EAA9F1A8;
  if (!qword_1EAA9F1A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9F1A8);
  }
  return result;
}

unint64_t sub_1DC8E6ADC()
{
  unint64_t result = qword_1EAA9F1B0;
  if (!qword_1EAA9F1B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9F1B0);
  }
  return result;
}

uint64_t sub_1DC8E6B28()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1DC8E6B70()
{
  sub_1DC8E7968();
  sub_1DC87E988(v2);
  sub_1DC88819C();
  (*(void (**)(uint64_t, uint64_t))(v3 + 16))(v0, v1);
  return v0;
}

uint64_t sub_1DC8E6BC8(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    JUMPOUT(0x1E01A99C0);
  }
  return result;
}

uint64_t sub_1DC8E6C1C()
{
  sub_1DCB86A18();
  sub_1DC88819C();
  unint64_t v2 = (*(void *)(v1 + 64)
      + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1DC88D5C8();
  v3();

  return swift_deallocObject();
}

uint64_t sub_1DC8E6CB4()
{
  return sub_1DCAB9624();
}

uint64_t sub_1DC8E6D44(uint64_t a1)
{
  return a1;
}

uint64_t sub_1DC8E6D70(uint64_t a1)
{
  return a1;
}

uint64_t sub_1DC8E6D9C()
{
  int v1 = *(unsigned __int8 *)(v0 + 48);
  if (v1 != 255) {
    sub_1DC8E6DE8(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), v1 & 1);
  }

  return swift_deallocObject();
}

void sub_1DC8E6DE8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5) {

  }
  else {
    swift_bridgeObjectRelease();
  }
}

void sub_1DC8E6DF8(void **a1)
{
  sub_1DC8E3308(a1, v1);
}

void sub_1DC8E6E00(long long *a1)
{
  sub_1DC8E33A0(a1, v1);
}

unint64_t sub_1DC8E6E08()
{
  unint64_t result = qword_1EAA9F1D8;
  if (!qword_1EAA9F1D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9F1D8);
  }
  return result;
}

void sub_1DC8E6E54(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 255) {
    sub_1DC8E6DE8(a1, a2, a3, a4, a5 & 1);
  }
}

id sub_1DC8E6E70@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_1DCB86BF8();
  sub_1DC8E77E0(v5);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return sub_1DC8E343C(a1, v7, a2);
}

uint64_t sub_1DC8E6ED0(void **a1)
{
  return sub_1DC8E5BDC(*a1);
}

void *sub_1DC8E6EEC@<X0>(void **a1@<X0>, void *a2@<X1>, uint64_t (*a3)(void **)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(void)@<X5>, void *a7@<X8>)
{
  unint64_t result = sub_1DC8E5B34(*a1, a2, a3, a4, a5, a6);
  if (!v7) {
    *a7 = result;
  }
  return result;
}

void *sub_1DC8E6F1C@<X0>(void **a1@<X0>, uint64_t *a2@<X1>, void *(*a3)(void **__return_ptr, void **)@<X2>, void *a4@<X8>)
{
  unint64_t result = sub_1DC8E5AC0(*a1, a2, a3);
  *a4 = result;
  return result;
}

void *sub_1DC8E6F48@<X0>(void **a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  return sub_1DC8E6F1C(a1, a2, *(void *(**)(void **__return_ptr, void **))(v3 + 16), a3);
}

uint64_t sub_1DC8E6F54@<X0>(void *a1@<X8>)
{
  return sub_1DC9F8568(*(void *)(v1 + 16), a1);
}

uint64_t sub_1DC8E6F60(uint64_t a1)
{
  return sub_1DC8E70BC(a1, MEMORY[0x1E4FBD378], "[PUB] movie remix %{public}s: fast heartbeat received %{public}ld audio frames");
}

uint64_t sub_1DC8E6F94(uint64_t a1)
{
  return sub_1DC9F88F8(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1DC8E6FB4(uint64_t a1, uint64_t a2)
{
  return sub_1DC8E71C8(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_1DC8E6EEC);
}

uint64_t sub_1DC8E6FE4@<X0>(void *a1@<X8>)
{
  return sub_1DC9F8568(*(void *)(v1 + 16), a1);
}

uint64_t sub_1DC8E7004()
{
  sub_1DCB86BF8();
  sub_1DC88819C();
  sub_1DC88D5C8();
  v0();

  return swift_deallocObject();
}

uint64_t sub_1DC8E7088(uint64_t a1)
{
  return sub_1DC8E70BC(a1, MEMORY[0x1E4FBD390], "[PUB] movie remix %{public}s: slow heartbeat received %{public}ld audio frames");
}

#error "1DC8E710C: call analysis failed (funcsize=25)"

uint64_t sub_1DC8E7120()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1DC8E715C()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1DC8E719C(uint64_t a1, uint64_t a2)
{
  return sub_1DC8E71C8(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_1DC8E7628);
}

uint64_t sub_1DC8E71C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void))
{
  return a3(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6]);
}

uint64_t sub_1DC8E71F8(void *a1)
{
  return sub_1DC9F69A4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1DC8E7204@<X0>(uint64_t *a1@<X8>)
{
  return sub_1DC9F697C(a1);
}

uint64_t sub_1DC8E720C()
{
  return swift_deallocObject();
}

id sub_1DC8E7244()
{
  return *(id *)(v0 + 16);
}

id sub_1DC8E7270(void *a1)
{
  return sub_1DC8E3A84(a1);
}

uint64_t sub_1DC8E7288()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1DC8E72C0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1DC95E5D0(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

void sub_1DC8E72DC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

unint64_t sub_1DC8E72F4(uint64_t a1)
{
  unint64_t result = sub_1DC89DD64(a1);
  if (!result)
  {
    v3(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

uint64_t sub_1DC8E7338()
{
  return sub_1DC8E3CD0();
}

uint64_t sub_1DC8E7340()
{
  return sub_1DC8E3D08();
}

uint64_t sub_1DC8E7348()
{
  return sub_1DC8E3D58();
}

void sub_1DC8E7350(void *a1)
{
}

unint64_t sub_1DC8E7358(uint64_t a1)
{
  unint64_t result = sub_1DC89DD64(a1);
  if (!result)
  {
    sub_1DC8863A8(v3);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

uint64_t sub_1DC8E7398()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

void sub_1DC8E73D0(void **a1)
{
  sub_1DC8E4B58(a1, *(void (**)(void *))(v1 + 16));
}

void sub_1DC8E73D8(int *a1)
{
  sub_1DC8E4BD0(a1, *(void (**)(void))(v1 + 16));
}

uint64_t getEnumTagSinglePayload for CollectionUtils.DomainError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF5)
  {
    if (a2 + 11 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 11) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 12;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v5 = v6 - 12;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_1DC8E7468(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *unint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DC8E7534);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

void type metadata accessor for MovieRemix.DomainError()
{
}

unint64_t sub_1DC8E756C()
{
  unint64_t result = qword_1EAA9F350;
  if (!qword_1EAA9F350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9F350);
  }
  return result;
}

uint64_t sub_1DC8E75B8@<X0>(void *a1@<X8>)
{
  return sub_1DC8E6FE4(a1);
}

uint64_t sub_1DC8E75D0(void **a1)
{
  return sub_1DC8E6ED0(a1);
}

uint64_t sub_1DC8E7610(uint64_t a1)
{
  return sub_1DC8E6F94(a1);
}

void *sub_1DC8E7628@<X0>(void **a1@<X0>, void *a2@<X1>, uint64_t (*a3)(void **)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(void)@<X5>, void *a7@<X8>)
{
  return sub_1DC8E6EEC(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1DC8E7640()
{
  return sub_1DCB87908();
}

uint64_t sub_1DC8E7670(uint64_t a1)
{
  return sub_1DC8DF298(a1, 0xE400000000000000, v1);
}

uint64_t sub_1DC8E7688()
{
  return swift_deallocObject();
}

uint64_t sub_1DC8E7698()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1DC8E76BC()
{
  return v0;
}

void sub_1DC8E76D4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_1DC8E76F4()
{
  *(_DWORD *)(v0 + 4 * v1 + 32) = 0;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1DC8E7710@<X0>(unsigned char *a1@<X1>, char a2@<W8>)
{
  *a1 = a2;
  return swift_willThrow();
}

void sub_1DC8E7728()
{
  JUMPOUT(0x1E01A99C0);
}

BOOL sub_1DC8E7740(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1DC8E775C@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 32) = v1;
  return swift_bridgeObjectRetain();
}

id sub_1DC8E7774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, int a10, int a11, uint64_t a12, long long a13, int a14, int a15, uint64_t a16)
{
  LODWORD(a9) = a13;
  *(long long *)((char *)&a9 + 4) = *(long long *)((char *)&a13 + 4);
  a11 = a15;
  a12 = a16;
  return sub_1DC8E4808((uint64_t)&a9);
}

uint64_t sub_1DC8E77AC()
{
  return v0;
}

uint64_t sub_1DC8E77C4()
{
  return sub_1DCB88DD8();
}

uint64_t sub_1DC8E77E0(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_1DC8E77F4()
{
  return sub_1DCB88EF8();
}

id sub_1DC8E7810(void *a1)
{
  return objc_msgSend(a1, (SEL)(v1 + 1432), 0x10000, 5);
}

uint64_t sub_1DC8E782C(uint64_t a1)
{
  return sub_1DCB2FD9C(a1, 100, 0, 0);
}

id sub_1DC8E784C(void *a1)
{
  return sub_1DCB60550(v1, a1);
}

uint64_t sub_1DC8E7868(void *a1, uint64_t a2)
{
  return sub_1DC8DA11C(a1, a2, 0, 0);
}

uint64_t sub_1DC8E7890()
{
  return v0;
}

uint64_t sub_1DC8E789C()
{
  return sub_1DC8A8CE4(v1, v2, v3, v0);
}

uint64_t sub_1DC8E78C8()
{
  return sub_1DC8A8D94(v1, v2, v3, v0);
}

uint64_t sub_1DC8E78F4()
{
  return swift_slowAlloc();
}

void sub_1DC8E7928()
{
  *(void *)(v0 + 16) = v1;
  *(_DWORD *)(v0 + 4 * v2 + 32) = v3;
}

_WORD *sub_1DC8E7944(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

void sub_1DC8E7950()
{
  sub_1DCA73760();
}

void sub_1DC8E7974()
{
  sub_1DC89827C();
}

uint64_t sub_1DC8E79B8(uint64_t result)
{
  *(void *)(v1 - 320) = result;
  return result;
}

uint64_t sub_1DC8E79EC()
{
  return sub_1DCB873A8();
}

void sub_1DC8E7A08()
{
  *(void *)(v1 + 16) = v3;
  *(_DWORD *)(v1 + 4 * v0 + 32) = v2;
}

void sub_1DC8E7A20()
{
  sub_1DC8982CC();
}

uint64_t sub_1DC8E7A44()
{
  return sub_1DCB89298();
}

uint64_t sub_1DC8E7A68()
{
  return 0;
}

void sub_1DC8E7A90()
{
  sub_1DC89827C();
}

void sub_1DC8E7AB4()
{
  sub_1DC89827C();
}

void sub_1DC8E7AD8()
{
  sub_1DC8982CC();
}

void sub_1DC8E7B08()
{
  *(void *)(v1 + 16) = v2;
  *(_DWORD *)(v1 + 4 * v0 + 32) = v3;
}

void sub_1DC8E7B38()
{
  sub_1DC89827C();
}

float sub_1DC8E7B5C(uint64_t a1)
{
  return *(float *)a1;
}

uint64_t sub_1DC8E7B74()
{
  return v0;
}

uint64_t sub_1DC8E7B80()
{
  return swift_allocObject();
}

uint64_t sub_1DC8E7B98()
{
  return v0;
}

uint64_t sub_1DC8E7BE8()
{
  return swift_release();
}

void sub_1DC8E7C14(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_1DC8E7C68()
{
  return sub_1DCB892B8();
}

uint64_t sub_1DC8E7CA8()
{
  return swift_release();
}

uint64_t sub_1DC8E7CC0()
{
  return _swift_stdlib_reportUnimplementedInitializer();
}

uint64_t sub_1DC8E7CD8()
{
  return self;
}

uint64_t sub_1DC8E7CF0()
{
  return sub_1DCB87908();
}

uint64_t sub_1DC8E7D1C(uint64_t a1)
{
  return sub_1DC8E7D7C(a1, (uint64_t)&type metadata for XPCSubscription, (uint64_t)&off_1F37E8738);
}

uint64_t sub_1DC8E7D4C(uint64_t a1)
{
  return sub_1DC8E7D7C(a1, (uint64_t)&type metadata for XPCSubscriber, (uint64_t)&off_1F37E6FB0);
}

uint64_t sub_1DC8E7D7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1DCAD2DD0();
  _OWORD v9[3] = a2;
  v9[4] = a3;
  unsigned int v6 = (_OWORD *)swift_allocObject();
  v9[0] = v6;
  long long v7 = v3[1];
  v6[1] = *v3;
  _OWORD v6[2] = v7;
  _OWORD v6[3] = v3[2];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1DC8849DC();
  swift_release();
  swift_release();
  return sub_1DC8818D0((uint64_t)v9);
}

uint64_t sub_1DC8E7E5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1DCAD2DD0();
  _OWORD v6[3] = &type metadata for XPCPublisher;
  v6[4] = &off_1F37E5D10;
  v6[0] = a2;
  v6[1] = a3;
  swift_retain();
  swift_retain();
  sub_1DC8849DC();
  swift_release();
  swift_release();
  return sub_1DC8818D0((uint64_t)v6);
}

uint64_t sub_1DC8E7F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1DCAD2DD0();
  _OWORD v11[3] = &type metadata for OptionalProxy;
  void v11[4] = &off_1F37E61E0;
  char v9 = (void *)swift_allocObject();
  v11[0] = v9;
  _OWORD v9[2] = a2;
  _OWORD v9[3] = a3;
  v9[4] = a4;
  void v9[5] = a5;
  sub_1DC884F60(a2);
  swift_retain();
  sub_1DC8849DC();
  swift_release();
  swift_release();
  return sub_1DC8818D0((uint64_t)v11);
}

uint64_t sub_1DC8E7FDC(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return MEMORY[0x1F4188298](sub_1DC8E7FFC, 0, 0);
}

uint64_t sub_1DC8E7FFC()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 16);
  sub_1DC8F00B0();
  sub_1DC8F00B0();
  if (v1)
  {
    uint64_t v2 = (void *)sub_1DC8F02EC();
    sub_1DC8F010C(v2);
    sub_1DC8F0284();
    sub_1DC8F02E0();
    sub_1DC8BA86C();
    return v6(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  else
  {
    sub_1DC884E74();
    uint64_t v12 = sub_1DC883884();
    sub_1DC8F01DC(v12, v13);
    sub_1DC8F0168(0);
    sub_1DC8F0208();
    sub_1DC8BA86C();
    return v15(v14, v15, v16, v17, v18, v19, v20, v21);
  }
}

uint64_t sub_1DC8E80E4(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return MEMORY[0x1F4188298](sub_1DC8E8104, 0, 0);
}

uint64_t sub_1DC8E8104()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 16);
  sub_1DC8F00B0();
  sub_1DC8F00B0();
  if (v1)
  {
    uint64_t v2 = (void *)sub_1DC8F02EC();
    sub_1DC8F010C(v2);
    sub_1DC8F0284();
    sub_1DC8F02E0();
    sub_1DC8BA86C();
    return v6(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  else
  {
    sub_1DC884E74();
    uint64_t v12 = sub_1DC883884();
    sub_1DC8F01DC(v12, v13);
    sub_1DC8F0168(0);
    sub_1DC8F0208();
    sub_1DC8BA86C();
    return v15(v14, v15, v16, v17, v18, v19, v20, v21);
  }
}

uint64_t sub_1DC8E81EC(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return MEMORY[0x1F4188298](sub_1DC8E820C, 0, 0);
}

uint64_t sub_1DC8E820C()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 16);
  sub_1DC8F00B0();
  sub_1DC8F00B0();
  if (v1)
  {
    uint64_t v2 = (void *)sub_1DC8F02EC();
    sub_1DC8F010C(v2);
    sub_1DC8F0284();
    sub_1DC8F02E0();
    sub_1DC8BA86C();
    return v6(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  else
  {
    sub_1DC884E74();
    uint64_t v12 = sub_1DC883884();
    sub_1DC8F01DC(v12, v13);
    sub_1DC8F0168(0);
    sub_1DC8F0208();
    sub_1DC8BA86C();
    return v15(v14, v15, v16, v17, v18, v19, v20, v21);
  }
}

uint64_t sub_1DC8E82F4(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return MEMORY[0x1F4188298](sub_1DC8E8314, 0, 0);
}

uint64_t sub_1DC8E8314()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 16);
  sub_1DC8F00B0();
  sub_1DC8F00B0();
  if (v1)
  {
    uint64_t v2 = (void *)sub_1DC8F02EC();
    sub_1DC8F010C(v2);
    sub_1DC8F0284();
    sub_1DC8F02E0();
    sub_1DC8BA86C();
    return v6(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  else
  {
    sub_1DC884E74();
    uint64_t v12 = sub_1DC883884();
    sub_1DC8F01DC(v12, v13);
    sub_1DC8F0168(0);
    sub_1DC8F0208();
    sub_1DC8BA86C();
    return v15(v14, v15, v16, v17, v18, v19, v20, v21);
  }
}

uint64_t sub_1DC8E83FC(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return MEMORY[0x1F4188298](sub_1DC8E841C, 0, 0);
}

uint64_t sub_1DC8E841C()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 16);
  sub_1DC8F00B0();
  sub_1DC8F00B0();
  if (v1)
  {
    uint64_t v2 = (void *)sub_1DC8F02EC();
    sub_1DC8F010C(v2);
    sub_1DC8F0284();
    sub_1DC8F02E0();
    sub_1DC8BA86C();
    return v6(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  else
  {
    sub_1DC884E74();
    uint64_t v12 = sub_1DC883884();
    sub_1DC8F01DC(v12, v13);
    sub_1DC8F0168(0);
    sub_1DC8F0208();
    sub_1DC8BA86C();
    return v15(v14, v15, v16, v17, v18, v19, v20, v21);
  }
}

uint64_t sub_1DC8E8504(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return sub_1DC8BA8F8((uint64_t)sub_1DC8E851C);
}

uint64_t sub_1DC8E851C()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 16);
  sub_1DC8F00B0();
  sub_1DC8F00B0();
  if (v1)
  {
    uint64_t v2 = (void *)sub_1DC8F02EC();
    sub_1DC8F010C(v2);
    sub_1DC8F0284();
    sub_1DC8F02E0();
    sub_1DC8BA86C();
    return v6(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  else
  {
    sub_1DC884E74();
    uint64_t v12 = sub_1DC883884();
    sub_1DC8F01DC(v12, v13);
    sub_1DC8F0168(0);
    sub_1DC8F0208();
    sub_1DC8BA86C();
    return v15(v14, v15, v16, v17, v18, v19, v20, v21);
  }
}

uint64_t sub_1DC8E8604(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return MEMORY[0x1F4188298](sub_1DC8E8624, 0, 0);
}

uint64_t sub_1DC8E8624()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 16);
  sub_1DC8F00B0();
  sub_1DC8F00B0();
  if (v1)
  {
    uint64_t v2 = (void *)sub_1DC8F02EC();
    sub_1DC8F010C(v2);
    sub_1DC8F0284();
    sub_1DC8F02E0();
    sub_1DC8BA86C();
    return v6(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  else
  {
    sub_1DC884E74();
    uint64_t v12 = sub_1DC883884();
    sub_1DC8F01DC(v12, v13);
    sub_1DC8F0168(0);
    sub_1DC8F0208();
    sub_1DC8BA86C();
    return v15(v14, v15, v16, v17, v18, v19, v20, v21);
  }
}

uint64_t sub_1DC8E870C(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return sub_1DC8BA8F8((uint64_t)sub_1DC8E8724);
}

uint64_t sub_1DC8E8724()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 16);
  sub_1DC8F00B0();
  sub_1DC8F00B0();
  if (v1)
  {
    uint64_t v2 = (void *)sub_1DC8F02EC();
    sub_1DC8F010C(v2);
    sub_1DC8F0284();
    sub_1DC8F02E0();
    sub_1DC8BA86C();
    return v6(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  else
  {
    sub_1DC884E74();
    uint64_t v12 = sub_1DC883884();
    sub_1DC8F01DC(v12, v13);
    sub_1DC8F0168(0);
    sub_1DC8F0208();
    sub_1DC8BA86C();
    return v15(v14, v15, v16, v17, v18, v19, v20, v21);
  }
}

uint64_t sub_1DC8E880C(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return sub_1DC8BA8F8((uint64_t)sub_1DC8E8824);
}

uint64_t sub_1DC8E8824()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 16);
  sub_1DC8F00B0();
  sub_1DC8F00B0();
  if (v1)
  {
    uint64_t v2 = (void *)sub_1DC8F02EC();
    sub_1DC8F010C(v2);
    sub_1DC8F0284();
    sub_1DC8F02E0();
    sub_1DC8BA86C();
    return v6(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  else
  {
    sub_1DC884E74();
    uint64_t v12 = sub_1DC883884();
    sub_1DC8F01DC(v12, v13);
    sub_1DC8F0168(0);
    sub_1DC8F0208();
    sub_1DC8BA86C();
    return v15(v14, v15, v16, v17, v18, v19, v20, v21);
  }
}

uint64_t sub_1DC8E890C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[16] = a3;
  v4[17] = a4;
  v4[14] = a1;
  v4[15] = a2;
  return MEMORY[0x1F4188298](sub_1DC8E8930, 0, 0);
}

void sub_1DC8E8930()
{
  sub_1DC88688C();
  sub_1DC8F044C();
  swift_retain();
  sub_1DC8F0378();
  if (v0)
  {
    swift_release();
    swift_release();
    sub_1DC8F01F8();
    sub_1DC8F03BC();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_1DC8F031C(v3);
  *uint64_t v4 = v5;
  v4[1] = sub_1DC8E8A58;
  sub_1DC8F0304();
  sub_1DC8F03BC();
  __asm { BRAA            X2, X16 }
}

uint64_t sub_1DC8E8A58()
{
  sub_1DC886900();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC88679C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88678C();
  *unsigned int v6 = v5;
  *(void *)(v3 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1DC886854();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    uint64_t v10 = (void *)sub_1DC8BAA00();
    *(void *)(v3 + 160) = v10;
    *uint64_t v10 = v5;
    v10[1] = sub_1DC8E8B94;
    uint64_t v11 = sub_1DC8BAB74();
    return v12(v11);
  }
}

uint64_t sub_1DC8E8B94()
{
  sub_1DC8867A8();
  sub_1DC886774();
  sub_1DC88679C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1DC88678C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 168) = v0;
  swift_task_dealloc();
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC8E8C70()
{
  sub_1DC8867A8();
  sub_1DC886630((uint64_t *)(v0 + 64));
  sub_1DC8F0398();
  swift_release();
  sub_1DC8BA978();
  return v1();
}

uint64_t sub_1DC8E8CD8()
{
  sub_1DC886900();
  sub_1DC8F0338();
  sub_1DC886630(v0);
  swift_release();
  swift_release();
  sub_1DC8BAB84();
  return v1();
}

uint64_t sub_1DC8E8D4C()
{
  sub_1DC8867A8();
  sub_1DC8F047C();
  sub_1DC886630(v0);
  sub_1DC8F0398();
  swift_release();
  sub_1DC8BA978();
  return v1();
}

uint64_t sub_1DC8E8DB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[17] = a4;
  v5[18] = a5;
  v5[15] = a2;
  v5[16] = a3;
  v5[14] = a1;
  return MEMORY[0x1F4188298](sub_1DC8E8DE0, 0, 0);
}

uint64_t sub_1DC8E8DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1DC8F0468();
  sub_1DC8BABB4();
  sub_1DC8F0264();
  swift_retain();
  uint64_t v11 = sub_1DC8F024C();
  sub_1DC8EA9F8(v11, v12, v13, v14);
  if (v10)
  {
    sub_1DC8F03D0();
    swift_release();
    sub_1DC8F01F8();
    sub_1DC8F02CC();
    return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10);
  }
  else
  {
    sub_1DC8F0430();
    uint64_t v36 = (char *)v24 + *v24;
    uint64_t v25 = swift_task_alloc();
    uint64_t v26 = (void *)sub_1DC8F0328(v25);
    *uint64_t v26 = v27;
    v26[1] = sub_1DC8E8EF8;
    sub_1DC8F01C4();
    sub_1DC8F02CC();
    return v30(v28, v29, v30, v31, v32, v33, v34, v35, a9, v36);
  }
}

uint64_t sub_1DC8E8EF8()
{
  sub_1DC886900();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC88679C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88678C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 160) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1DC886854();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    uint64_t v10 = sub_1DC8BAA00();
    uint64_t v11 = (void *)sub_1DC8F0424(v10);
    *uint64_t v11 = v12;
    v11[1] = sub_1DC8E9030;
    uint64_t v13 = sub_1DC8BAB74();
    return v14(v13);
  }
}

uint64_t sub_1DC8E9030()
{
  sub_1DC8867A8();
  sub_1DC886774();
  sub_1DC88679C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1DC88678C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 176) = v0;
  swift_task_dealloc();
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC8E910C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[17] = a4;
  v5[18] = a5;
  v5[15] = a2;
  v5[16] = a3;
  v5[14] = a1;
  return MEMORY[0x1F4188298](sub_1DC8E9134, 0, 0);
}

uint64_t sub_1DC8E9134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1DC8F0468();
  sub_1DC8BABB4();
  sub_1DC8F0264();
  swift_retain();
  uint64_t v11 = (void *)sub_1DC8F024C();
  sub_1DC8EABCC(v11, v12, v13, v14);
  if (v10)
  {
    sub_1DC8F03D0();
    swift_release();
    sub_1DC8F01F8();
    sub_1DC8F02CC();
    return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10);
  }
  else
  {
    sub_1DC8F0430();
    uint64_t v36 = (char *)v24 + *v24;
    uint64_t v25 = swift_task_alloc();
    uint64_t v26 = (void *)sub_1DC8F0328(v25);
    *uint64_t v26 = v27;
    v26[1] = sub_1DC8E8EF8;
    sub_1DC8F01C4();
    sub_1DC8F02CC();
    return v30(v28, v29, v30, v31, v32, v33, v34, v35, a9, v36);
  }
}

uint64_t sub_1DC8E924C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[17] = a4;
  v5[18] = a5;
  v5[15] = a2;
  v5[16] = a3;
  v5[14] = a1;
  return MEMORY[0x1F4188298](sub_1DC8E9274, 0, 0);
}

uint64_t sub_1DC8E9274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1DC8F0468();
  sub_1DC8BABB4();
  sub_1DC8F0264();
  uint64_t v11 = swift_retain();
  sub_1DC8F03E8(v11, v12, v13, (uint64_t)&type metadata for XPCSubscription, (uint64_t)&off_1F37E8738);
  if (v10)
  {
    sub_1DC8F03D0();
    swift_release();
    sub_1DC8F01F8();
    sub_1DC8F02CC();
    return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10);
  }
  else
  {
    sub_1DC8F0430();
    uint64_t v35 = (char *)v23 + *v23;
    uint64_t v24 = swift_task_alloc();
    uint64_t v25 = (void *)sub_1DC8F0328(v24);
    *uint64_t v25 = v26;
    v25[1] = sub_1DC8E8EF8;
    sub_1DC8F01C4();
    sub_1DC8F02CC();
    return v29(v27, v28, v29, v30, v31, v32, v33, v34, a9, v35);
  }
}

uint64_t sub_1DC8E93A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[17] = a4;
  v5[18] = a5;
  v5[15] = a2;
  v5[16] = a3;
  v5[14] = a1;
  return MEMORY[0x1F4188298](sub_1DC8E93C8, 0, 0);
}

uint64_t sub_1DC8E93C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1DC8F0468();
  sub_1DC8BABB4();
  sub_1DC8F0264();
  swift_retain();
  uint64_t v11 = (uint64_t *)sub_1DC8F024C();
  sub_1DC8EAD5C(v11, v12, v13, v14);
  if (v10)
  {
    sub_1DC8F03D0();
    swift_release();
    sub_1DC8F01F8();
    sub_1DC8F02CC();
    return v16(v15, v16, v17, v18, v19, v20, v21, v22, a9, a10);
  }
  else
  {
    sub_1DC8F0430();
    uint64_t v36 = (char *)v24 + *v24;
    uint64_t v25 = swift_task_alloc();
    uint64_t v26 = (void *)sub_1DC8F0328(v25);
    *uint64_t v26 = v27;
    v26[1] = sub_1DC8E94E0;
    sub_1DC8F01C4();
    sub_1DC8F02CC();
    return v30(v28, v29, v30, v31, v32, v33, v34, v35, a9, v36);
  }
}

uint64_t sub_1DC8E94E0()
{
  sub_1DC886900();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC88679C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88678C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 160) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1DC886854();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    uint64_t v10 = sub_1DC8BAA00();
    uint64_t v11 = (void *)sub_1DC8F0424(v10);
    *uint64_t v11 = v12;
    v11[1] = sub_1DC8E9618;
    uint64_t v13 = sub_1DC8BAB74();
    return v14(v13);
  }
}

uint64_t sub_1DC8E9618()
{
  sub_1DC8867A8();
  sub_1DC886774();
  sub_1DC88679C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1DC88678C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 176) = v0;
  swift_task_dealloc();
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC8E96F4()
{
  sub_1DC8867A8();
  sub_1DC886630((uint64_t *)(v0 + 64));
  swift_release();
  swift_release();
  sub_1DC8BA978();
  return v1();
}

uint64_t sub_1DC8E9764()
{
  sub_1DC886900();
  sub_1DC886630((uint64_t *)(v0 + 16));
  sub_1DC886630((uint64_t *)(v0 + 64));
  swift_release();
  swift_release();
  sub_1DC8BAB84();
  return v1();
}

uint64_t sub_1DC8E97E8()
{
  sub_1DC8867A8();
  sub_1DC8F047C();
  sub_1DC886630(v0);
  swift_release();
  swift_release();
  sub_1DC8BA978();
  return v1();
}

uint64_t sub_1DC8E985C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[16] = a3;
  v4[17] = a4;
  v4[14] = a1;
  v4[15] = a2;
  return MEMORY[0x1F4188298](sub_1DC8E9880, 0, 0);
}

void sub_1DC8E9880()
{
  sub_1DC88688C();
  sub_1DC8F044C();
  swift_retain();
  sub_1DC8F0378();
  if (v0)
  {
    swift_release();
    swift_release();
    sub_1DC8F01F8();
    sub_1DC8F03BC();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_1DC8F031C(v3);
  *uint64_t v4 = v5;
  v4[1] = sub_1DC8E99A8;
  sub_1DC8F0304();
  sub_1DC8F03BC();
  __asm { BRAA            X2, X16 }
}

uint64_t sub_1DC8E99A8()
{
  sub_1DC886900();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC88679C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88678C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1DC886854();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    uint64_t v10 = (void *)sub_1DC8BAA00();
    *(void *)(v3 + 160) = v10;
    *uint64_t v10 = v5;
    v10[1] = sub_1DC8E9AE4;
    uint64_t v11 = sub_1DC8BAB74();
    return v12(v11);
  }
}

uint64_t sub_1DC8E9AE4()
{
  sub_1DC8BAB24();
  sub_1DC8BABB4();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  sub_1DC886774();
  uint64_t v11 = v10;
  sub_1DC88679C();
  *uint64_t v12 = v11;
  uint64_t v13 = *v1;
  sub_1DC88678C();
  *uint64_t v14 = v13;
  v11[21] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v11[22] = v3;
    v11[23] = v5;
    v11[24] = v7;
    v11[25] = v9;
  }
  sub_1DC886854();
  sub_1DC8BAB0C();
  return MEMORY[0x1F4188298](v15, v16, v17);
}

uint64_t sub_1DC8E9BE4()
{
  sub_1DC886900();
  sub_1DC8F0338();
  sub_1DC886630(v0);
  swift_release();
  swift_release();
  uint64_t v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v1[1];
  uint64_t v4 = v1[24];
  uint64_t v3 = v1[25];
  uint64_t v6 = v1[22];
  uint64_t v5 = v1[23];
  return v2(v3, v4, v5, v6);
}

uint64_t sub_1DC8E9C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[17] = a4;
  v5[18] = a5;
  v5[15] = a2;
  v5[16] = a3;
  v5[14] = a1;
  return MEMORY[0x1F4188298](sub_1DC8E9C90, 0, 0);
}

uint64_t sub_1DC8E9C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1DC8F0468();
  sub_1DC8BABB4();
  sub_1DC8F0264();
  uint64_t v11 = swift_retain();
  sub_1DC8F03E8(v11, v12, v13, (uint64_t)&type metadata for XPCSubscriber, (uint64_t)&off_1F37E6FB0);
  if (v10)
  {
    sub_1DC8F03D0();
    swift_release();
    sub_1DC8F01F8();
    sub_1DC8F02CC();
    return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10);
  }
  else
  {
    sub_1DC8F0430();
    uint64_t v35 = (char *)v23 + *v23;
    uint64_t v24 = swift_task_alloc();
    uint64_t v25 = (void *)sub_1DC8F0328(v24);
    *uint64_t v25 = v26;
    v25[1] = sub_1DC8E8EF8;
    sub_1DC8F01C4();
    sub_1DC8F02CC();
    return v29(v27, v28, v29, v30, v31, v32, v33, v34, a9, v35);
  }
}

uint64_t sub_1DC8E9DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[38] = a5;
  v6[39] = a6;
  v6[36] = a3;
  v6[37] = a4;
  v6[34] = a1;
  v6[35] = a2;
  return MEMORY[0x1F4188298](sub_1DC8E9DE4, 0, 0);
}

uint64_t sub_1DC8E9DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1DC8F0468();
  sub_1DC8BABB4();
  uint64_t v11 = v10[38];
  swift_retain();
  swift_retain();
  uint64_t v12 = sub_1DC8F024C();
  sub_1DC8EB178(v12, v13, v14, v15);
  if (v11)
  {
    swift_release();
    swift_release();
    sub_1DC8F01F8();
    sub_1DC8F02CC();
    return v17(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10);
  }
  else
  {
    uint64_t v34 = v10[36] + *(int *)v10[36];
    uint64_t v25 = (void *)swift_task_alloc();
    v10[40] = v25;
    *uint64_t v25 = v10;
    v25[1] = sub_1DC8E9F30;
    sub_1DC8F02CC();
    return v28(v26, v27, v28, v29, v30, v31, v32, v33, a9, v34);
  }
}

uint64_t sub_1DC8E9F30()
{
  sub_1DC8867A8();
  sub_1DC886774();
  sub_1DC88679C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1DC88678C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 328) = v0;
  swift_task_dealloc();
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC8EA00C()
{
  sub_1DC88688C();
  sub_1DC8EF64C((uint64_t)(v0 + 14), (uint64_t)(v0 + 32), (uint64_t *)&unk_1EAAA2640);
  type metadata accessor for XPCDataDecoder();
  uint64_t inited = swift_initStackObject();
  v0[42] = inited;
  sub_1DC8EF64C((uint64_t)(v0 + 32), inited + 16, (uint64_t *)&unk_1EAAA2640);
  sub_1DC8EF64C((uint64_t)(v0 + 16), (uint64_t)(v0 + 28), &qword_1EAA9E478);
  type metadata accessor for XPCProxyDecoder();
  uint64_t v2 = swift_initStackObject();
  v0[43] = v2;
  sub_1DC8EF64C((uint64_t)(v0 + 28), v2 + 16, &qword_1EAA9E478);
  type metadata accessor for XPCDecoder();
  uint64_t v3 = swift_initStackObject();
  v0[44] = v3;
  *(void *)(v3 + 16) = inited;
  *(void *)(v3 + 24) = v2;
  sub_1DC8B9C10((uint64_t)(v0 + 32));
  sub_1DC8B9C54(v0 + 28);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[45] = (uint64_t)v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1DC8EA168;
  return sub_1DC977FC0();
}

uint64_t sub_1DC8EA168()
{
  sub_1DC886900();
  uint64_t v3 = v2;
  sub_1DC886774();
  uint64_t v5 = v4;
  sub_1DC88679C();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_1DC88678C();
  *uint64_t v8 = v7;
  *(void *)(v5 + 368) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 376) = v3;
  }
  sub_1DC886854();
  return MEMORY[0x1F4188298](v9, v10, v11);
}

uint64_t sub_1DC8EA258()
{
  uint64_t v1 = v0[47];
  uint64_t v2 = (uint64_t *)v0[34];
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void **)(v1 + 24);
  uint64_t v5 = *(void *)(v3 + 16);
  unint64_t v13 = *(void *)(v3 + 24);
  sub_1DC8B9C40(v5, v13);
  uint64_t v6 = v4[2];
  uint64_t v7 = v4[3];
  uint64_t v9 = v4[4];
  uint64_t v8 = v4[5];
  swift_retain();
  sub_1DC884F60(v6);
  swift_release();
  swift_release();
  uint64_t v10 = swift_setDeallocating();
  sub_1DC978D0C(v10);
  swift_deallocClassInstance();
  sub_1DC886630(v0 + 14);
  sub_1DC886630(v0 + 2);
  swift_release();
  swift_release();
  *uint64_t v2 = v5;
  v2[1] = v13;
  long long v2[2] = v6;
  v2[3] = v7;
  v2[4] = v9;
  v2[5] = v8;
  sub_1DC8BAB84();
  return v11();
}

uint64_t sub_1DC8EA384()
{
  sub_1DC886900();
  uint64_t v1 = swift_setDeallocating();
  sub_1DC978D0C(v1);
  swift_deallocClassInstance();
  sub_1DC886630((uint64_t *)(v0 + 112));
  sub_1DC886630((uint64_t *)(v0 + 16));
  swift_release();
  swift_release();
  sub_1DC8BA978();
  return v2();
}

uint64_t sub_1DC8EA428()
{
  sub_1DC8867A8();
  sub_1DC886630((uint64_t *)(v0 + 16));
  swift_release();
  swift_release();
  sub_1DC8BA978();
  return v1();
}

uint64_t sub_1DC8EA498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[16] = a3;
  v4[17] = a4;
  v4[14] = a1;
  v4[15] = a2;
  return MEMORY[0x1F4188298](sub_1DC8EA4BC, 0, 0);
}

void sub_1DC8EA4BC()
{
  sub_1DC88688C();
  sub_1DC8F044C();
  swift_retain();
  sub_1DC8F0378();
  if (v0)
  {
    swift_release();
    swift_release();
    sub_1DC8F01F8();
    sub_1DC8F03BC();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_1DC8F031C(v3);
  *uint64_t v4 = v5;
  v4[1] = sub_1DC8EA5E4;
  sub_1DC8F0304();
  sub_1DC8F03BC();
  __asm { BRAA            X2, X16 }
}

uint64_t sub_1DC8EA5E4()
{
  sub_1DC886900();
  sub_1DC886774();
  uint64_t v3 = v2;
  sub_1DC88679C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_1DC88678C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1DC886854();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    uint64_t v10 = (void *)sub_1DC8BAA00();
    *(void *)(v3 + 160) = v10;
    *uint64_t v10 = v5;
    v10[1] = sub_1DC8EA720;
    uint64_t v11 = sub_1DC8BAB74();
    return v12(v11);
  }
}

uint64_t sub_1DC8EA720()
{
  sub_1DC886900();
  uint64_t v3 = v2;
  sub_1DC886774();
  uint64_t v5 = v4;
  sub_1DC88679C();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_1DC88678C();
  *uint64_t v8 = v7;
  *(void *)(v5 + 168) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 176) = v3;
  }
  sub_1DC886854();
  return MEMORY[0x1F4188298](v9, v10, v11);
}

uint64_t sub_1DC8EA810()
{
  sub_1DC886900();
  sub_1DC8F0338();
  sub_1DC886630(v0);
  swift_release();
  swift_release();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 176);
  return v2(v3);
}

uint64_t sub_1DC8EA890@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  type metadata accessor for XPCDataEncoder();
  uint64_t inited = swift_initStackObject();
  type metadata accessor for XPCProxyEncoder();
  *(void *)(inited + 16) = 0;
  *(void *)(inited + 24) = 0;
  uint64_t v8 = (void *)swift_initStackObject();
  _OWORD v8[2] = 0;
  v8[3] = 0;
  v8[4] = a1;
  void v8[5] = a2;
  type metadata accessor for XPCEncoder();
  uint64_t v9 = swift_initStackObject();
  *(void *)(v9 + 16) = inited;
  *(void *)(v9 + 24) = v8;
  swift_retain();
  swift_retain();
  uint64_t v10 = sub_1DC883F24();
  if (v3)
  {
    swift_release();
    return swift_release();
  }
  else
  {
    uint64_t v14 = v10;
    uint64_t v15 = v11;
    uint64_t v16 = v12;
    uint64_t v17 = v13;
    swift_release();
    swift_retain();
    uint64_t v18 = sub_1DC9AFA20();
    uint64_t v22 = v19;
    swift_release();
    uint64_t v21 = swift_setDeallocating();
    sub_1DC978D0C(v21);
    uint64_t result = swift_deallocClassInstance();
    *a3 = v18;
    a3[1] = v22;
    a3[2] = v14;
    a3[3] = v15;
    a3[4] = v16;
    a3[5] = v17;
  }
  return result;
}

uint64_t sub_1DC8EA9F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  type metadata accessor for XPCDataEncoder();
  uint64_t v9 = swift_allocObject();
  type metadata accessor for XPCProxyEncoder();
  *(void *)(v9 + 16) = 0;
  *(void *)(v9 + 24) = 0;
  uint64_t v10 = (void *)swift_allocObject();
  void v10[2] = 0;
  _OWORD v10[3] = 0;
  v10[4] = a2;
  _OWORD v10[5] = a3;
  type metadata accessor for XPCEncoder();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v9;
  *(void *)(inited + 24) = v10;
  swift_retain();
  sub_1DCAD2DD0();
  v24[3] = MEMORY[0x1E4FBB808];
  v24[4] = &off_1F37F6020;
  v24[0] = a1;
  swift_retain();
  sub_1DC9B0020(v24);
  swift_release();
  swift_release();
  sub_1DC8818D0((uint64_t)v24);
  if (v4) {
    return swift_release();
  }
  swift_retain();
  uint64_t v12 = sub_1DC883F24();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  swift_release();
  swift_retain();
  uint64_t v19 = sub_1DC9AFA20();
  uint64_t v25 = v20;
  swift_release();
  uint64_t v21 = swift_setDeallocating();
  sub_1DC978D0C(v21);
  uint64_t result = swift_deallocClassInstance();
  uint64_t v23 = v25;
  *a4 = v19;
  a4[1] = v23;
  a4[2] = v12;
  a4[3] = v14;
  a4[4] = v16;
  a4[5] = v18;
  return result;
}

uint64_t sub_1DC8EABCC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  type metadata accessor for XPCDataEncoder();
  uint64_t v9 = swift_allocObject();
  type metadata accessor for XPCProxyEncoder();
  *(void *)(v9 + 16) = 0;
  *(void *)(v9 + 24) = 0;
  uint64_t v10 = (void *)swift_allocObject();
  void v10[2] = 0;
  _OWORD v10[3] = 0;
  v10[4] = a2;
  _OWORD v10[5] = a3;
  type metadata accessor for XPCEncoder();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v9;
  *(void *)(inited + 24) = v10;
  swift_retain();
  sub_1DC8EEA68(inited, a1);
  if (v4) {
    return swift_release();
  }
  swift_retain();
  uint64_t v12 = sub_1DC883F24();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  swift_release();
  swift_retain();
  uint64_t v19 = sub_1DC9AFA20();
  uint64_t v23 = v20;
  swift_release();
  uint64_t v21 = swift_setDeallocating();
  sub_1DC978D0C(v21);
  uint64_t result = swift_deallocClassInstance();
  *a4 = v19;
  a4[1] = v23;
  a4[2] = v12;
  a4[3] = v14;
  a4[4] = v16;
  a4[5] = v18;
  return result;
}

uint64_t sub_1DC8EAD5C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = v4;
  type metadata accessor for XPCDataEncoder();
  uint64_t v10 = sub_1DC886810();
  type metadata accessor for XPCProxyEncoder();
  *(void *)(v10 + 16) = 0;
  *(void *)(v10 + 24) = 0;
  uint64_t v11 = (void *)swift_allocObject();
  void v11[2] = 0;
  _OWORD v11[3] = 0;
  void v11[4] = a2;
  void v11[5] = a3;
  type metadata accessor for XPCEncoder();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v10;
  *(void *)(inited + 24) = v11;
  swift_retain();
  sub_1DCAD2DD0();
  uint64_t v13 = *a1;
  unint64_t v14 = a1[1];
  swift_retain();
  sub_1DC9AF8E8(v13, v14);
  if (v5)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    uint64_t v31 = a4;
    swift_release();
    uint64_t v15 = a1[2];
    uint64_t v16 = a1[3];
    uint64_t v17 = a1[4];
    uint64_t v18 = a1[5];
    swift_retain();
    sub_1DC884B30(v15, v16, v17, v18);
    swift_release();
    swift_release();
    swift_retain();
    uint64_t v19 = sub_1DC883F24();
    uint64_t v21 = v20;
    uint64_t v23 = v22;
    uint64_t v25 = v24;
    swift_release();
    swift_retain();
    uint64_t v26 = sub_1DC9AFA20();
    uint64_t v28 = v27;
    swift_release();
    uint64_t v29 = swift_setDeallocating();
    sub_1DC978D0C(v29);
    uint64_t result = swift_deallocClassInstance();
    *uint64_t v31 = v26;
    v31[1] = v28;
    v31[2] = v19;
    v31[3] = v21;
    v31[4] = v23;
    v31[5] = v25;
  }
  return result;
}

uint64_t sub_1DC8EAF68@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v31 = a6;
  type metadata accessor for XPCDataEncoder();
  uint64_t v12 = sub_1DC886810();
  type metadata accessor for XPCProxyEncoder();
  *(void *)(v12 + 16) = 0;
  *(void *)(v12 + 24) = 0;
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = 0;
  v13[3] = 0;
  void v13[4] = a2;
  v13[5] = a3;
  type metadata accessor for XPCEncoder();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v12;
  *(void *)(inited + 24) = v13;
  swift_retain();
  sub_1DCAD2DD0();
  v30[3] = a4;
  v30[4] = a5;
  uint64_t v15 = (_OWORD *)swift_allocObject();
  v30[0] = v15;
  long long v16 = a1[1];
  v15[1] = *a1;
  void v15[2] = v16;
  v15[3] = a1[2];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1DC8849DC();
  swift_release();
  swift_release();
  sub_1DC8818D0((uint64_t)v30);
  if (v6) {
    return swift_release();
  }
  uint64_t v17 = v31;
  swift_retain();
  uint64_t v18 = sub_1DC883F24();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  swift_release();
  swift_retain();
  uint64_t v25 = sub_1DC9AFA20();
  uint64_t v29 = v26;
  swift_release();
  uint64_t v27 = swift_setDeallocating();
  sub_1DC978D0C(v27);
  uint64_t result = swift_deallocClassInstance();
  *uint64_t v17 = v25;
  v17[1] = v29;
  void v17[2] = v18;
  v17[3] = v20;
  uint64_t v17[4] = v22;
  v17[5] = v24;
  return result;
}

uint64_t sub_1DC8EB178@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  type metadata accessor for XPCDataEncoder();
  uint64_t v9 = swift_allocObject();
  type metadata accessor for XPCProxyEncoder();
  *(void *)(v9 + 16) = 0;
  *(void *)(v9 + 24) = 0;
  uint64_t v10 = (void *)swift_allocObject();
  void v10[2] = 0;
  _OWORD v10[3] = 0;
  v10[4] = a2;
  _OWORD v10[5] = a3;
  type metadata accessor for XPCEncoder();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v9;
  *(void *)(inited + 24) = v10;
  swift_retain();
  sub_1DCAD2DD0();
  v25[3] = type metadata accessor for RemoteRequest();
  v25[4] = (uint64_t)&off_1F37E6A90;
  uint64_t v12 = sub_1DC8EF6AC(v25);
  sub_1DC8EF710(a1, (uint64_t)v12);
  swift_retain();
  sub_1DC9B0020(v25);
  swift_release();
  swift_release();
  sub_1DC8818D0((uint64_t)v25);
  if (v4) {
    return swift_release();
  }
  swift_retain();
  uint64_t v13 = sub_1DC883F24();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  swift_release();
  swift_retain();
  uint64_t v20 = sub_1DC9AFA20();
  uint64_t v26 = v21;
  swift_release();
  uint64_t v22 = swift_setDeallocating();
  sub_1DC978D0C(v22);
  uint64_t result = swift_deallocClassInstance();
  uint64_t v24 = v26;
  *a4 = v20;
  a4[1] = v24;
  a4[2] = v13;
  a4[3] = v15;
  a4[4] = v17;
  a4[5] = v19;
  return result;
}

uint64_t sub_1DC8EB35C()
{
  sub_1DC886900();
  sub_1DC8F04AC(v0);
  uint64_t v15 = (uint64_t)v1 + *v1;
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_1DC8F04A0(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_1DC8EB41C;
  uint64_t v12 = (uint64_t (*)(void))sub_1DC8F0368((uint64_t)v3, v5, v6, v7, v8, v9, v10, v11, v14, v15);
  return v12();
}

uint64_t sub_1DC8EB41C()
{
  sub_1DC8867A8();
  sub_1DC886774();
  sub_1DC88679C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1DC88678C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 32) = v0;
  swift_task_dealloc();
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC8EB4F8()
{
  sub_1DC886900();
  sub_1DC8F04AC(v0);
  uint64_t v15 = (uint64_t)v1 + *v1;
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_1DC8F04A0(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_1DC8EB5B8;
  uint64_t v12 = (uint64_t (*)(void))sub_1DC8F0368((uint64_t)v3, v5, v6, v7, v8, v9, v10, v11, v14, v15);
  return v12();
}

uint64_t sub_1DC8EB5B8()
{
  sub_1DC8867A8();
  sub_1DC886774();
  sub_1DC88679C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1DC88678C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 32) = v0;
  swift_task_dealloc();
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC8EB694()
{
  sub_1DC8BA978();
  return v0();
}

uint64_t sub_1DC8EB6B0()
{
  sub_1DC886900();
  long long v2 = v1[1];
  *(_OWORD *)(v0 + 16) = *v1;
  *(_OWORD *)(v0 + 32) = v2;
  *(_OWORD *)(v0 + 48) = v1[2];
  uint64_t v15 = (uint64_t)v3 + *v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1DC8EB78C;
  uint64_t v12 = (uint64_t (*)(void))sub_1DC8F0368((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v14, v15);
  return v12();
}

uint64_t sub_1DC8EB78C()
{
  sub_1DC8867A8();
  sub_1DC886774();
  sub_1DC88679C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1DC88678C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 72) = v0;
  swift_task_dealloc();
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC8EB868()
{
  sub_1DC886900();
  long long v2 = v1[1];
  *(_OWORD *)(v0 + 16) = *v1;
  *(_OWORD *)(v0 + 32) = v2;
  *(_OWORD *)(v0 + 48) = v1[2];
  uint64_t v15 = (uint64_t)v3 + *v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1DC8EB944;
  uint64_t v12 = (uint64_t (*)(void))sub_1DC8F0368((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v14, v15);
  return v12();
}

uint64_t sub_1DC8EB944()
{
  sub_1DC8867A8();
  sub_1DC886774();
  sub_1DC88679C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1DC88678C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 72) = v0;
  swift_task_dealloc();
  sub_1DC886854();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_1DC8EBA20()
{
  sub_1DC8BA978();
  return v0();
}

uint64_t sub_1DC8EBA3C(_OWORD *a1, int *a2)
{
  long long v3 = a1[1];
  *(_OWORD *)(v2 + 16) = *a1;
  *(_OWORD *)(v2 + 32) = v3;
  *(_OWORD *)(v2 + 48) = a1[2];
  uint64_t v6 = (uint64_t (*)(void))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 64) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1DC8EB78C;
  return v6();
}

uint64_t sub_1DC8EBB24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1DC883FB8();
  uint64_t v5 = sub_1DC886810();
  *(void *)(v5 + 16) = a2;
  *(void *)(v5 + 24) = a3;
  uint64_t v6 = sub_1DC886810();
  *(void *)(v6 + 16) = &unk_1EAA9F5E0;
  *(void *)(v6 + 24) = v5;
  v8[3] = sub_1DC87E988(&qword_1EAA9F5F8);
  v8[4] = sub_1DC8EFBFC();
  v8[0] = &unk_1EAA9F5F0;
  v8[1] = v6;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1DC8848AC();
  swift_release();
  sub_1DC8818D0((uint64_t)v8);
  swift_release_n();
  return swift_release();
}

uint64_t sub_1DC8EBC2C(_OWORD *a1, int *a2)
{
  long long v3 = a1[1];
  *(_OWORD *)(v2 + 16) = *a1;
  *(_OWORD *)(v2 + 32) = v3;
  *(_OWORD *)(v2 + 48) = a1[2];
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 64) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1DC8F0078;
  return v6(v2 + 16);
}

uint64_t sub_1DC8EBD14()
{
  sub_1DC8867A8();
  swift_retain();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1DC8F01B8(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_1DC8EBDA8;
  return sub_1DC8EBE84();
}

uint64_t sub_1DC8EBDA8()
{
  sub_1DC886900();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_1DC886774();
  uint64_t v6 = *v1;
  sub_1DC88678C();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  sub_1DC8F0284();
  if (!v0)
  {
    uint64_t v8 = v5;
    uint64_t v9 = v3;
  }
  return v10(v8, v9);
}

uint64_t sub_1DC8EBE84()
{
  sub_1DC8867A8();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_1DC8F04A0(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_1DC8EBF10;
  return sub_1DC964B20();
}

uint64_t sub_1DC8EBF10()
{
  sub_1DC8867A8();
  sub_1DC886774();
  sub_1DC88679C();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 32) = v4;
  *(void *)(v2 + 40) = v0;
  swift_task_dealloc();
  sub_1DC886854();
  return MEMORY[0x1F4188298](v5, v6, v7);
}

uint64_t sub_1DC8EBFF4()
{
  sub_1DC8867A8();
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1EAA9F460 + dword_1EAA9F460);
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1DC8EC0A0;
  return v3();
}

uint64_t sub_1DC8EC0A0()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_1DC886774();
  uint64_t v7 = v6;
  sub_1DC88679C();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  sub_1DC88678C();
  *uint64_t v10 = v9;
  v7[7] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v7[8] = v3;
    v7[9] = v5;
  }
  sub_1DC886854();
  sub_1DC8BA86C();
  return MEMORY[0x1F4188298](v11, v12, v13);
}

uint64_t sub_1DC8EC194()
{
  sub_1DC886900();
  uint64_t v1 = (int8x16_t *)swift_allocObject();
  v1[1] = vextq_s8(v0[4], v0[4], 8uLL);
  swift_release_n();
  swift_release();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = &unk_1EAA9F470;
  *(void *)(v2 + 24) = v1;
  sub_1DC8F0284();
  return v3(&unk_1EAA9F480);
}

uint64_t sub_1DC8EC270()
{
  sub_1DC8867A8();
  swift_release_n();
  swift_release();
  sub_1DC8BA978();
  return v0();
}

uint64_t sub_1DC8EC2D8()
{
  sub_1DC8867A8();
  swift_release();
  sub_1DC8BA978();
  return v0();
}

uint64_t sub_1DC8EC334()
{
  sub_1DC8867A8();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_1DC8F04A0(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_1DC8EC3C4;
  return sub_1DC8EBD14();
}

uint64_t sub_1DC8EC3C4()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_1DC886774();
  uint64_t v7 = v6;
  sub_1DC88679C();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  sub_1DC88678C();
  *uint64_t v10 = v9;
  swift_task_dealloc();
  if (!v0)
  {
    uint64_t v11 = *(void **)(v7 + 16);
    *uint64_t v11 = v5;
    v11[1] = v3;
  }
  sub_1DC8BA86C();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19);
}

uint64_t sub_1DC8EC4A4(uint64_t a1)
{
  return sub_1DC8EBB24(a1, *v1, v1[1]);
}

uint64_t sub_1DC8EC4C0()
{
  sub_1DC8F043C();
  uint64_t v0 = swift_allocObject();
  sub_1DC8EC510();
  return v0;
}

uint64_t sub_1DC8EC510()
{
  sub_1DC8F043C();
  swift_defaultActor_initialize();
  sub_1DC8F0494();
  (*(void (**)(void))(v3 + 32))();
  uint64_t v4 = (void *)(v1 + *(void *)(*(void *)v1 + 112));
  *uint64_t v4 = v2;
  v4[1] = v0;
  return v1;
}

uint64_t sub_1DC8EC5C0(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  v2[5] = *v1;
  return MEMORY[0x1F4188298](sub_1DC8EC608, v1, 0);
}

uint64_t sub_1DC8EC608()
{
  uint64_t v1 = (_OWORD *)v0[3];
  uint64_t v2 = (uint64_t *)(v0[4] + *(void *)(*(void *)v0[4] + 112));
  uint64_t v3 = v2[1];
  uint64_t v6 = *v2;
  type metadata accessor for CombineSubscriberFromXPCAdapter();
  swift_allocObject();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v0[2] = sub_1DCAA192C(v1, v6, v3);
  sub_1DC8EFC70(&qword_1EAA9F608, 255, (void (*)(uint64_t))type metadata accessor for CombineSubscriberFromXPCAdapter);
  sub_1DCB87388();
  swift_release();
  sub_1DC8BAB84();
  return v4();
}

uint64_t sub_1DC8EC780()
{
  sub_1DC8F0494();
  (*(void (**)(void))(v1 + 8))();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1DC8EC814()
{
  sub_1DC8EC780();

  return MEMORY[0x1F4188210](v0);
}

uint64_t sub_1DC8EC840()
{
  return v0;
}

uint64_t sub_1DC8EC84C()
{
  return sub_1DC8EC840();
}

void *sub_1DC8EC868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a1;
  _OWORD v4[3] = a2;
  void v4[4] = a3;
  void v4[5] = a4;
  type metadata accessor for AsyncDispatchQueue();
  swift_allocObject();
  void v4[6] = sub_1DCA1386C();
  return v4;
}

uint64_t sub_1DC8EC8B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_1DC88D538();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  sub_1DC8A22D0();
  uint64_t v11 = v10 - v9;
  type metadata accessor for CombineSubscriberToXPCAdapterImpl();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v11, a1, a2);
  uint64_t v12 = v3[4];
  uint64_t v13 = v3[5];
  swift_retain();
  uint64_t v14 = sub_1DCAA0368(v11, v12, v13);
  uint64_t v16 = v3[2];
  uint64_t v15 = v3[3];
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = v16;
  v17[3] = v15;
  uint64_t v17[4] = &unk_1EAA9F400;
  v17[5] = v14;
  void v17[6] = &unk_1EAA9F410;
  v17[7] = v14;
  v17[8] = &unk_1EAA9F420;
  v17[9] = v14;
  swift_retain_n();
  swift_retain();
  sub_1DCA13770((uint64_t)&unk_1EAA9F430, (uint64_t)v17);
  swift_release_n();
  return swift_release();
}

uint64_t sub_1DC8ECA20(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1DC8D78C0;
  return sub_1DCAA1290(a1);
}

uint64_t sub_1DC8ECAB8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1DC8D78C0;
  return sub_1DCAA1384();
}

uint64_t sub_1DC8ECB50(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1DC8D78C0;
  return sub_1DCAA1794(a1);
}

uint64_t sub_1DC8ECBE8(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)a1 + *a1);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_1DC8ECCC4;
  return v7(a3);
}

uint64_t sub_1DC8ECCC4()
{
  sub_1DC8867A8();
  sub_1DC886774();
  sub_1DC88679C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_1DC88678C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 24) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1DC886854();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    sub_1DC8BA978();
    return v10();
  }
}

uint64_t sub_1DC8ECDBC()
{
  sub_1DC8867A8();

  sub_1DC8BA978();
  return v1();
}

uint64_t sub_1DC8ECE14()
{
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1DC8ECE44()
{
  sub_1DC8ECE14();

  return swift_deallocClassInstance();
}

uint64_t sub_1DC8ECE78(uint64_t a1, uint64_t a2)
{
  return sub_1DC8EC8B4(a1, a2);
}

void *sub_1DC8ECE9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_1DCB87148();
  sub_1DC88D538();
  uint64_t v12 = v11;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v18 - v14;
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = a3;
  void v16[3] = a4;
  v16[4] = a5;
  v16[5] = a1;
  void v16[6] = a2;
  swift_retain();
  sub_1DCB874A8();
  swift_release();
  swift_getWitnessTable();
  sub_1DC8ED0C0();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v10);
  return &unk_1EAA9F648;
}

double sub_1DC8ED018@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X5>, _OWORD *a4@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_1DCAD30C4(a1, a2, AssociatedTypeWitness, a3, (uint64_t *)v12);
  if (!v4)
  {
    long long v11 = v12[1];
    *a4 = v12[0];
    a4[1] = v11;
    double result = *(double *)&v13;
    a4[2] = v13;
  }
  return result;
}

void *sub_1DC8ED0C0()
{
  sub_1DC8F043C();
  sub_1DC88D538();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v4);
  sub_1DC8A22D0();
  uint64_t v7 = v6 - v5;
  type metadata accessor for CombinePublisherToXPCAdapterImpl();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v7, v1, v0);
  swift_retain();
  sub_1DC8EC4C0();
  return &unk_1EAA9F648;
}

uint64_t sub_1DC8ED1A0(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1DC8D78C0;
  return sub_1DC8EC5C0(a1);
}

uint64_t sub_1DC8ED238@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v27 = a6;
  uint64_t v28 = a7;
  uint64_t v24 = a3;
  uint64_t v25 = a1;
  sub_1DC87E988((uint64_t *)&unk_1EAAA2660);
  sub_1DC8F0494();
  MEMORY[0x1F4188790](v10);
  sub_1DC8A22D0();
  unint64_t v26 = sub_1DC8EE968();
  uint64_t v11 = sub_1DCB88FC8();
  sub_1DC88D538();
  uint64_t v13 = v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v24 - v15;
  uint64_t v17 = type metadata accessor for CombinePublisherFromXPCAdapter();
  uint64_t v18 = swift_allocObject();
  swift_retain();
  swift_retain();
  sub_1DC8EC868(v24, a4, v25, a2);
  uint64_t v29 = v18;
  uint64_t v20 = sub_1DC8EFC70(&qword_1EAA9F440, v19, (void (*)(uint64_t))type metadata accessor for CombinePublisherFromXPCAdapter);
  MEMORY[0x1E01A64B0](v17, v20);
  swift_release();
  uint64_t v21 = swift_allocObject();
  uint64_t v22 = v27;
  *(void *)(v21 + 16) = a5;
  *(void *)(v21 + 24) = v22;
  sub_1DCB87F38();
  swift_release();
  swift_getWitnessTable();
  sub_1DC997180();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v11);
}

uint64_t sub_1DC8ED464(uint64_t a1, _OWORD *a2)
{
  long long v3 = a2[1];
  *(_OWORD *)(v2 + 16) = *a2;
  *(_OWORD *)(v2 + 32) = v3;
  *(_OWORD *)(v2 + 48) = a2[2];
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 64) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1DC8ED530;
  return sub_1DC977B70();
}

uint64_t sub_1DC8ED530()
{
  sub_1DC8867A8();
  sub_1DC886774();
  uint64_t v1 = *v0;
  sub_1DC88678C();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_1DC8BA978();
  return v3();
}

uint64_t sub_1DC8ED5F0()
{
  sub_1DC886900();
  v0[7] = v1;
  v0[8] = v2;
  v0[6] = v3;
  sub_1DC8863A8((uint64_t *)&unk_1EAAA2660);
  sub_1DC8EE968();
  sub_1DCB88FC8();
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for AsyncSequencePublisher();
  v0[9] = v4;
  v0[10] = *(void *)(v4 - 8);
  v0[11] = swift_task_alloc();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[12] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1DC8ED73C;
  return sub_1DC977FC0();
}

uint64_t sub_1DC8ED73C()
{
  sub_1DC88688C();
  uint64_t v3 = v2;
  sub_1DC886774();
  uint64_t v5 = v4;
  sub_1DC88679C();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_1DC88678C();
  *uint64_t v8 = v7;
  v5[13] = v3;
  v5[14] = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1DC886854();
    sub_1DC8F03BC();
    return MEMORY[0x1F4188298](v9, v10, v11);
  }
  else
  {
    uint64_t v13 = (void *)sub_1DC8BAA00();
    v5[15] = v13;
    *uint64_t v13 = v7;
    v13[1] = sub_1DC8ED88C;
    return v15();
  }
}

uint64_t sub_1DC8ED88C()
{
  sub_1DC8867A8();
  sub_1DC886774();
  sub_1DC88679C();
  *uint64_t v3 = v2;
  long long v2[2] = v1;
  v2[3] = v4;
  v2[4] = v5;
  v2[5] = v0;
  uint64_t v6 = *v1;
  sub_1DC88678C();
  *uint64_t v7 = v6;
  *(void *)(v8 + 128) = v0;
  swift_task_dealloc();
  sub_1DC886854();
  return MEMORY[0x1F4188298](v9, v10, v11);
}

void sub_1DC8ED970()
{
  uint64_t v1 = *(void **)(v0[13] + 24);
  if (v1[2])
  {
    uint64_t v2 = v0[3];
    uint64_t v3 = v0[4];
    uint64_t v4 = v0[10];
    uint64_t v5 = v0[11];
    uint64_t v7 = v0[8];
    uint64_t v6 = v0[9];
    uint64_t v8 = v0[7];
    uint64_t v9 = v1[4];
    uint64_t v10 = v1[5];
    swift_retain();
    sub_1DC8ED238(v9, v10, v2, v3, v8, v7, v5);
    swift_release();
    swift_release();
    swift_getWitnessTable();
    uint64_t v11 = sub_1DCB873A8();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
    swift_task_dealloc();
    uint64_t v12 = (void (*)(uint64_t))v0[1];
    v12(v11);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1DC8EDAB4()
{
  sub_1DC8867A8();
  swift_release();
  swift_task_dealloc();
  sub_1DC8BA978();
  return v0();
}

uint64_t sub_1DC8EDB1C()
{
  sub_1DC8867A8();
  swift_release();
  swift_release();
  swift_task_dealloc();
  sub_1DC8BA978();
  return v0();
}

uint64_t sub_1DC8EDB8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v14[0] = a2;
  uint64_t v6 = *(void *)(sub_1DCAD2DD0() + 24);
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(v6 + 40);
  swift_retain();
  sub_1DC8863A8(&qword_1EAA9DF60);
  uint64_t v9 = sub_1DCB87238();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_1DC8ECE9C(v7, v8, v9, WitnessTable, a5);
  uint64_t v12 = v11;
  swift_release();
  v14[3] = &type metadata for XPCPublisher;
  v14[4] = &off_1F37E5CE8;
  v14[0] = &unk_1EAA9F648;
  v14[1] = v12;
  sub_1DCAD2E10(v14);
  swift_release();
  return sub_1DC8818D0((uint64_t)v14);
}

uint64_t sub_1DC8EDCB4()
{
  sub_1DC886900();
  swift_retain();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1DC8F01B8(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_1DC8D2674;
  return sub_1DC8ED5F0();
}

uint64_t sub_1DC8EDD60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1DC8EDB8C(a1, *v4, *(void *)(a2 + 16), a4, *(void *)(a3 - 16));
}

uint64_t sub_1DC8EDD88(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1DC8F0054;
  return sub_1DC8EDCB4();
}

uint64_t sub_1DC8EDE38()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for CombinePublisherToXPCAdapterImpl()
{
  return sub_1DC8866E4();
}

uint64_t type metadata accessor for CombinePublisherFromXPCAdapter()
{
  return self;
}

ValueMetadata *type metadata accessor for XPCPublisher()
{
  return &type metadata for XPCPublisher;
}

uint64_t sub_1DC8EDF30()
{
  return MEMORY[0x1E4FBC0F0];
}

uint64_t sub_1DC8EDF3C()
{
  sub_1DC8867A8();
  uint64_t v0 = swift_task_alloc();
  unint64_t v1 = (void *)sub_1DC8F01B8(v0);
  *unint64_t v1 = v2;
  v1[1] = sub_1DC8D78C0;
  uint64_t v3 = sub_1DC8F0358();
  return sub_1DC8ECA20(v3);
}

uint64_t sub_1DC8EDFC4()
{
  sub_1DC8867A8();
  uint64_t v0 = swift_task_alloc();
  unint64_t v1 = (void *)sub_1DC8F01B8(v0);
  *unint64_t v1 = v2;
  v1[1] = sub_1DC8D78C0;
  sub_1DC8F0358();
  return sub_1DC8ECAB8();
}

uint64_t sub_1DC8EE04C()
{
  sub_1DC8867A8();
  uint64_t v0 = swift_task_alloc();
  unint64_t v1 = (void *)sub_1DC8F01B8(v0);
  *unint64_t v1 = v2;
  v1[1] = sub_1DC8D78C0;
  uint64_t v3 = sub_1DC8F0358();
  return sub_1DC8ECB50(v3);
}

uint64_t sub_1DC8EE0D4()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1DC8EE124()
{
  sub_1DC886900();
  unint64_t v1 = *(int **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_1DC8F01B8(v3);
  *uint64_t v4 = v5;
  v4[1] = sub_1DC8D6930;
  return sub_1DC8ECBE8(v1, v2, v0 + 32);
}

uint64_t sub_1DC8EE1C4()
{
  *(void *)(v1 + 96) = v0;
  return sub_1DC8BA8F8((uint64_t)sub_1DC8EE1DC);
}

void sub_1DC8EE1DC()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  sub_1DC8F03B0();
  if (v0 < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  sub_1DC8F02AC();
  if (v2)
  {
LABEL_7:
    __break(1u);
    return;
  }
  sub_1DC8F00D0(v1);
  uint64_t inited = (void *)swift_initStackObject();
  sub_1DC8F0138(inited);
  sub_1DC8F0184();
  uint64_t v4 = sub_1DC8F022C();
  uint64_t v5 = (void *)sub_1DC8F031C(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_1DC8EE294;
  sub_1DC8F02BC();
  sub_1DC8BA86C();
  v8(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_1DC8EE294()
{
  sub_1DC8867A8();
  sub_1DC886774();
  sub_1DC88679C();
  *uint64_t v3 = v2;
  sub_1DC8F0218(v4, v5);
  uint64_t v6 = *v1;
  sub_1DC88678C();
  *uint64_t v7 = v6;
  *(void *)(v8 + 152) = v0;
  swift_task_dealloc();
  sub_1DC886854();
  return MEMORY[0x1F4188298](v9, v10, v11);
}

uint64_t sub_1DC8EE36C()
{
  *(void *)(v1 + 96) = v0;
  return sub_1DC8BA8F8((uint64_t)sub_1DC8EE384);
}

void sub_1DC8EE384()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  sub_1DC8F03B0();
  if (v0 < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  sub_1DC8F02AC();
  if (v2)
  {
LABEL_7:
    __break(1u);
    return;
  }
  sub_1DC8F00D0(v1);
  uint64_t inited = (void *)swift_initStackObject();
  sub_1DC8F0138(inited);
  sub_1DC8F0184();
  uint64_t v4 = sub_1DC8F022C();
  uint64_t v5 = (void *)sub_1DC8F031C(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_1DC8EE294;
  sub_1DC8F02BC();
  sub_1DC8BA86C();
  v8(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_1DC8EE43C()
{
  *(void *)(v1 + 96) = v0;
  return sub_1DC8BA8F8((uint64_t)sub_1DC8EE454);
}

void sub_1DC8EE454()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  sub_1DC8F03B0();
  if (v0 < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  sub_1DC8F02AC();
  if (v2)
  {
LABEL_7:
    __break(1u);
    return;
  }
  sub_1DC8F00D0(v1);
  uint64_t inited = (void *)swift_initStackObject();
  sub_1DC8F0138(inited);
  sub_1DC8F0184();
  uint64_t v4 = sub_1DC8F022C();
  uint64_t v5 = (void *)sub_1DC8F031C(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_1DC8EE294;
  sub_1DC8F02BC();
  sub_1DC8BA86C();
  v8(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_1DC8EE50C()
{
  *(void *)(v1 + 96) = v0;
  return sub_1DC8BA8F8((uint64_t)sub_1DC8EE524);
}

void sub_1DC8EE524()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  sub_1DC8F03B0();
  if (v0 < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  sub_1DC8F02AC();
  if (v2)
  {
LABEL_7:
    __break(1u);
    return;
  }
  sub_1DC8F00D0(v1);
  uint64_t inited = (void *)swift_initStackObject();
  sub_1DC8F0138(inited);
  sub_1DC8F0184();
  uint64_t v4 = sub_1DC8F022C();
  uint64_t v5 = (void *)sub_1DC8F031C(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_1DC8EE294;
  sub_1DC8F02BC();
  sub_1DC8BA86C();
  v8(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_1DC8EE5DC()
{
  *(void *)(v1 + 96) = v0;
  return sub_1DC8BA8F8((uint64_t)sub_1DC8EE5F4);
}

void sub_1DC8EE5F4()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  sub_1DC8F03B0();
  if (v0 < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  sub_1DC8F02AC();
  if (v2)
  {
LABEL_7:
    __break(1u);
    return;
  }
  sub_1DC8F00D0(v1);
  uint64_t inited = (void *)swift_initStackObject();
  sub_1DC8F0138(inited);
  sub_1DC8F0184();
  uint64_t v4 = sub_1DC8F022C();
  uint64_t v5 = (void *)sub_1DC8F031C(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_1DC8EE6AC;
  sub_1DC8F02BC();
  sub_1DC8BA86C();
  v8(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_1DC8EE6AC()
{
  sub_1DC8867A8();
  sub_1DC886774();
  sub_1DC88679C();
  *uint64_t v3 = v2;
  sub_1DC8F0218(v4, v5);
  uint64_t v6 = *v1;
  sub_1DC88678C();
  *uint64_t v7 = v6;
  *(void *)(v8 + 152) = v0;
  swift_task_dealloc();
  sub_1DC886854();
  return MEMORY[0x1F4188298](v9, v10, v11);
}

uint64_t sub_1DC8EE784()
{
  sub_1DC8867A8();
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[12];
  sub_1DC8866A0(v0[13]);
  swift_setDeallocating();
  uint64_t result = sub_1DC8866A0(*(void *)(v1 + 16));
  uint64_t v4 = *(void *)(v2 + 24);
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v0[12] + 24) = v6;
    sub_1DC8F0284();
    return v7();
  }
  return result;
}

uint64_t sub_1DC8EE818()
{
  sub_1DC8867A8();
  uint64_t v1 = *(void *)(v0 + 136);
  sub_1DC8866A0(*(void *)(v0 + 104));
  swift_setDeallocating();
  sub_1DC8866A0(*(void *)(v1 + 16));
  sub_1DC8BA978();
  return v2();
}

uint64_t sub_1DC8EE890()
{
  *(void *)(v1 + 96) = v0;
  return MEMORY[0x1F4188298](sub_1DC8EE8B0, 0, 0);
}

void sub_1DC8EE8B0()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  sub_1DC8F03B0();
  if (v0 < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  sub_1DC8F02AC();
  if (v2)
  {
LABEL_7:
    __break(1u);
    return;
  }
  sub_1DC8F00D0(v1);
  uint64_t inited = (void *)swift_initStackObject();
  sub_1DC8F0138(inited);
  sub_1DC8F0184();
  uint64_t v4 = sub_1DC8F022C();
  BOOL v5 = (void *)sub_1DC8F031C(v4);
  *BOOL v5 = v6;
  v5[1] = sub_1DC8EE294;
  sub_1DC8F02BC();
  sub_1DC8BA86C();
  v8(v7, v8, v9, v10, v11, v12, v13, v14);
}

unint64_t sub_1DC8EE968()
{
  unint64_t result = qword_1EAA9F438;
  if (!qword_1EAA9F438)
  {
    sub_1DC8863A8((uint64_t *)&unk_1EAAA2660);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9F438);
  }
  return result;
}

uint64_t sub_1DC8EE9BC()
{
  return swift_deallocObject();
}

uint64_t sub_1DC8EE9CC()
{
  sub_1DC886900();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1DC8F01B8(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_1DC8D78C0;
  uint64_t v3 = sub_1DC8F040C();
  return sub_1DC8ED464(v3, v4);
}

uint64_t sub_1DC8EEA68(uint64_t a1, void *a2)
{
  sub_1DCAD3260();
  if (a2)
  {
    uint64_t v8 = (ValueMetadata *)MEMORY[0x1E4FBB390];
    uint64_t v9 = &off_1F37F4948;
    LOBYTE(v7[0]) = 1;
    id v4 = a2;
    sub_1DCAD3334(v7);
    if (!v2)
    {
      sub_1DC8818D0((uint64_t)v7);
      uint64_t v8 = &type metadata for XPCError;
      uint64_t v9 = &off_1F37F4020;
      v7[0] = a2;
      id v5 = a2;
      sub_1DCAD3334(v7);
    }
  }
  else
  {
    uint64_t v8 = (ValueMetadata *)MEMORY[0x1E4FBB390];
    uint64_t v9 = &off_1F37F4948;
    LOBYTE(v7[0]) = 0;
    sub_1DCAD3334(v7);
  }
  swift_release();
  return sub_1DC8818D0((uint64_t)v7);
}

uint64_t sub_1DC8EEB54(uint64_t a1, _OWORD *a2)
{
  long long v3 = a2[1];
  *(_OWORD *)(v2 + 16) = *a2;
  *(_OWORD *)(v2 + 32) = v3;
  *(_OWORD *)(v2 + 48) = a2[2];
  id v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 64) = v4;
  *id v4 = v2;
  v4[1] = sub_1DC8F0078;
  return sub_1DCA9FF00();
}

uint64_t sub_1DC8EEC10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v11;
  *uint64_t v11 = v6;
  v11[1] = sub_1DC8D6930;
  return sub_1DC8E890C(a3, a4, a5, a6);
}

uint64_t sub_1DC8EECC4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *a2;
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  *uint64_t v12 = v6;
  v12[1] = sub_1DC8D78C0;
  return sub_1DC8E8DB8(v11, a3, a4, a5, a6);
}

uint64_t sub_1DC8EED88(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *a2;
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  *uint64_t v12 = v6;
  v12[1] = sub_1DC8D78C0;
  return sub_1DC8E910C(v11, a3, a4, a5, a6);
}

uint64_t sub_1DC8EEE4C(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v11 = a2[1];
  *(_OWORD *)(v6 + 16) = *a2;
  *(_OWORD *)(v6 + 32) = v11;
  *(_OWORD *)(v6 + 48) = a2[2];
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 64) = v12;
  *uint64_t v12 = v6;
  v12[1] = sub_1DC8F0078;
  return sub_1DC8E924C(v6 + 16, a3, a4, a5, a6);
}

uint64_t sub_1DC8EEF20(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v11 = a2[1];
  *(_OWORD *)(v6 + 16) = *a2;
  *(_OWORD *)(v6 + 32) = v11;
  *(_OWORD *)(v6 + 48) = a2[2];
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 64) = v12;
  *uint64_t v12 = v6;
  v12[1] = sub_1DC8ED530;
  return sub_1DC8E93A0(v6 + 16, a3, a4, a5, a6);
}

uint64_t sub_1DC8EEFF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 16) = a1;
  long long v11 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v11;
  *long long v11 = v6;
  v11[1] = sub_1DC8EF0AC;
  return sub_1DC8E985C(a3, a4, a5, a6);
}

uint64_t sub_1DC8EF0AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1DC8BAB24();
  sub_1DC8BABB4();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  sub_1DC886774();
  uint64_t v21 = v20;
  sub_1DC88679C();
  void *v22 = v21;
  uint64_t v23 = *v11;
  sub_1DC88678C();
  *uint64_t v24 = v23;
  swift_task_dealloc();
  if (!v10)
  {
    uint64_t v25 = *(void **)(v21 + 16);
    *uint64_t v25 = v19;
    v25[1] = v17;
    _OWORD v25[2] = v15;
    v25[3] = v13;
  }
  sub_1DC8BAB0C();
  return v27(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10);
}

uint64_t sub_1DC8EF198(_OWORD *a1, int *a2)
{
  long long v4 = a1[1];
  *(_OWORD *)(v2 + 16) = *a1;
  *(_OWORD *)(v2 + 32) = v4;
  *(_OWORD *)(v2 + 48) = a1[2];
  id v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 64) = v5;
  *id v5 = v2;
  v5[1] = sub_1DC8F0078;
  return sub_1DC8EBA3C((_OWORD *)(v2 + 16), a2);
}

uint64_t sub_1DC8EF254()
{
  sub_1DC886900();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1DC8F01B8(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_1DC8D78C0;
  uint64_t v3 = sub_1DC8F0290();
  return v4(v3);
}

uint64_t sub_1DC8EF2EC()
{
  sub_1DC886900();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1DC8F01B8(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_1DC8D78C0;
  uint64_t v3 = sub_1DC8F0290();
  return v4(v3);
}

uint64_t sub_1DC8EF384(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v11 = a2[1];
  *(_OWORD *)(v6 + 16) = *a2;
  *(_OWORD *)(v6 + 32) = v11;
  *(_OWORD *)(v6 + 48) = a2[2];
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 64) = v12;
  *uint64_t v12 = v6;
  v12[1] = sub_1DC8F0078;
  return sub_1DC8E9C68(v6 + 16, a3, a4, a5, a6);
}

uint64_t sub_1DC8EF45C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1DC8BAB24();
  sub_1DC8BABB4();
  sub_1DC8F01A4();
  uint64_t v10 = swift_task_alloc();
  long long v11 = (void *)sub_1DC8F01B8(v10);
  *long long v11 = v12;
  v11[1] = sub_1DC8D78C0;
  sub_1DC8F0088();
  sub_1DC8BAB0C();
  return v19(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

uint64_t sub_1DC8EF4FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1DC8BAB24();
  sub_1DC8BABB4();
  sub_1DC8F01A4();
  uint64_t v10 = swift_task_alloc();
  long long v11 = (void *)sub_1DC8F01B8(v10);
  *long long v11 = v12;
  v11[1] = sub_1DC8D78C0;
  sub_1DC8F0088();
  sub_1DC8BAB0C();
  return v19(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

uint64_t sub_1DC8EF598()
{
  sub_1DC88688C();
  sub_1DC8F01A4();
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = (void *)sub_1DC8F01B8(v6);
  *uint64_t v7 = v8;
  v7[1] = sub_1DC8D78C0;
  return sub_1DC8E9DBC(v2, v0, v3, v4, v5, v1);
}

uint64_t sub_1DC8EF64C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1DC87E988(a3);
  sub_1DC8F0494();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t *sub_1DC8EF6AC(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_1DC8EF710(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RemoteRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1DC8EF778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1DC8BAB24();
  sub_1DC8BABB4();
  sub_1DC8F01A4();
  uint64_t v10 = swift_task_alloc();
  long long v11 = (void *)sub_1DC8F01B8(v10);
  *long long v11 = v12;
  v11[1] = sub_1DC8D78C0;
  sub_1DC8F0088();
  sub_1DC8BAB0C();
  return v19(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

uint64_t sub_1DC8EF814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1DC8BAB24();
  sub_1DC8BABB4();
  sub_1DC8F01A4();
  uint64_t v10 = swift_task_alloc();
  long long v11 = (void *)sub_1DC8F01B8(v10);
  *long long v11 = v12;
  v11[1] = sub_1DC8D78C0;
  sub_1DC8F0088();
  sub_1DC8BAB0C();
  return v19(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

uint64_t sub_1DC8EF8B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1DC8BAB24();
  sub_1DC8BABB4();
  sub_1DC8F01A4();
  uint64_t v10 = swift_task_alloc();
  long long v11 = (void *)sub_1DC8F01B8(v10);
  *long long v11 = v12;
  v11[1] = sub_1DC8D6930;
  sub_1DC8F0088();
  sub_1DC8BAB0C();
  return v19(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

uint64_t sub_1DC8EF950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1DC8BAB24();
  sub_1DC8BABB4();
  sub_1DC8F01A4();
  uint64_t v10 = swift_task_alloc();
  long long v11 = (void *)sub_1DC8F01B8(v10);
  *long long v11 = v12;
  v11[1] = sub_1DC8D78C0;
  sub_1DC8F0088();
  sub_1DC8BAB0C();
  return v19(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

uint64_t sub_1DC8EF9EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1DC8BAB24();
  sub_1DC8BABB4();
  sub_1DC8F01A4();
  uint64_t v10 = swift_task_alloc();
  long long v11 = (void *)sub_1DC8F01B8(v10);
  *long long v11 = v12;
  v11[1] = sub_1DC8D78C0;
  sub_1DC8F0088();
  sub_1DC8BAB0C();
  return v19(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

uint64_t sub_1DC8EFA84()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1DC8EFABC()
{
  sub_1DC886900();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1DC8F01B8(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_1DC8D78C0;
  uint64_t v3 = sub_1DC8F0290();
  return v4(v3);
}

uint64_t sub_1DC8EFB54()
{
  sub_1DC8BA8A0();
  sub_1DC88688C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1DC8F01B8(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_1DC8D78C0;
  sub_1DC8F040C();
  sub_1DC8BA86C();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

unint64_t sub_1DC8EFBFC()
{
  unint64_t result = qword_1EAA9F600;
  if (!qword_1EAA9F600)
  {
    sub_1DC8863A8(&qword_1EAA9F5F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9F600);
  }
  return result;
}

uint64_t sub_1DC8EFC70(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1DC8EFCB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 16) = a1;
  long long v11 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v11;
  *long long v11 = v6;
  v11[1] = sub_1DC8EFD70;
  return sub_1DC8EA498(a3, a4, a5, a6);
}

uint64_t sub_1DC8EFD70()
{
  sub_1DC886900();
  uint64_t v3 = v2;
  sub_1DC886774();
  uint64_t v5 = v4;
  sub_1DC88679C();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_1DC88678C();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (!v0) {
    **(void **)(v5 + 16) = v3;
  }
  uint64_t v9 = *(uint64_t (**)(void))(v7 + 8);
  return v9();
}

uint64_t sub_1DC8EFE50()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1DC8EFE90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1DC8BAB24();
  sub_1DC8BABB4();
  sub_1DC8F01A4();
  uint64_t v10 = swift_task_alloc();
  uint64_t v11 = (void *)sub_1DC8F01B8(v10);
  *uint64_t v11 = v12;
  v11[1] = sub_1DC8D78C0;
  sub_1DC8F0088();
  sub_1DC8BAB0C();
  return v19(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

uint64_t sub_1DC8EFF28()
{
  swift_release();

  return swift_deallocObject();
}

double sub_1DC8EFF60@<D0>(_OWORD *a1@<X8>)
{
  return sub_1DC8ED018(v1[5], v1[6], v1[4], a1);
}

uint64_t sub_1DC8EFF84()
{
  sub_1DC8867A8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1DC8F01B8(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_1DC8D78C0;
  uint64_t v3 = sub_1DC8F0358();
  return sub_1DC8ED1A0(v3);
}

uint64_t sub_1DC8F000C()
{
  if (*(void *)(v0 + 16))
  {
    swift_release();
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_1DC8F0088()
{
  return v0;
}

uint64_t sub_1DC8F00B0()
{
  return sub_1DC884F60(v0);
}

uint64_t sub_1DC8F00D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = (void *)(v1 + 32 * a1);
  v2[13] = v4[4];
  v2[14] = v4[5];
  v2[15] = v4[6];
  unsigned char v2[16] = v4[7];
  return type metadata accessor for XPCProxyDecoder();
}

uint64_t sub_1DC8F010C(void *a1)
{
  a1[2] = v3;
  a1[3] = v2;
  a1[4] = v1;
  a1[5] = v4;
  return sub_1DC8866A0(v3);
}

uint64_t sub_1DC8F0138(void *a1)
{
  *(void *)(v3 + 136) = a1;
  a1[2] = v1;
  a1[3] = v2;
  a1[4] = v4;
  a1[5] = v5;
  return sub_1DC884F60(v1);
}

uint64_t sub_1DC8F0168(uint64_t result)
{
  return sub_1DC8866A0(result);
}

uint64_t sub_1DC8F0184()
{
  return sub_1DC884F60(v0);
}

uint64_t sub_1DC8F01B8(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t sub_1DC8F01C4()
{
  return v0;
}

uint64_t sub_1DC8F01DC(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
  return swift_willThrow();
}

uint64_t sub_1DC8F01F8()
{
  return v0 + 8;
}

uint64_t sub_1DC8F0208()
{
  return v0 + 8;
}

uint64_t sub_1DC8F0218(uint64_t result, uint64_t a2)
{
  void v2[8] = v4;
  v2[9] = result;
  v2[10] = a2;
  v2[11] = v3;
  return result;
}

uint64_t sub_1DC8F022C()
{
  return swift_task_alloc();
}

uint64_t sub_1DC8F024C()
{
  return v0;
}

uint64_t sub_1DC8F0264()
{
  return swift_retain();
}

uint64_t sub_1DC8F0290()
{
  return v0;
}

uint64_t sub_1DC8F02BC()
{
  return v0;
}

uint64_t sub_1DC8F02EC()
{
  return swift_allocObject();
}

uint64_t sub_1DC8F0304()
{
  return v0;
}

uint64_t sub_1DC8F031C(uint64_t result)
{
  *(void *)(v1 + 144) = result;
  return result;
}

uint64_t sub_1DC8F0328(uint64_t result)
{
  *(void *)(v1 + 152) = result;
  return result;
}

uint64_t *sub_1DC8F0338()
{
  return sub_1DC886630((uint64_t *)(v0 + 16));
}

uint64_t sub_1DC8F0358()
{
  return v0;
}

uint64_t sub_1DC8F0368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return a10;
}

uint64_t sub_1DC8F0378()
{
  return sub_1DC8EA890(v1, v0, v2);
}

uint64_t sub_1DC8F0398()
{
  return swift_release();
}

uint64_t sub_1DC8F03D0()
{
  return swift_release();
}

uint64_t sub_1DC8F03E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1DC8EAF68(v7, v6, v5, a4, a5, v8);
}

uint64_t sub_1DC8F040C()
{
  return v0;
}

uint64_t sub_1DC8F0424(uint64_t result)
{
  *(void *)(v1 + 168) = result;
  return result;
}

uint64_t sub_1DC8F044C()
{
  return swift_retain();
}

uint64_t *sub_1DC8F047C()
{
  return sub_1DC886630((uint64_t *)(v0 + 16));
}

uint64_t sub_1DC8F04A0(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t sub_1DC8F04AC(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t sub_1DC8F04C0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

uint64_t sub_1DC8F04D8(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR___SNFileSystem_inflightTasks) = a1;
  return swift_bridgeObjectRelease();
}

void sub_1DC8F04F0()
{
  sub_1DC89D9F8();
  uint64_t v2 = sub_1DCB884C8();
  MEMORY[0x1F4188790](v2);
  sub_1DC8A22D0();
  uint64_t v3 = sub_1DCB875B8();
  MEMORY[0x1F4188790](v3 - 8);
  sub_1DC8A22D0();
  uint64_t v4 = sub_1DCB884D8();
  sub_1DC89D4E0();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  sub_1DC89D970();
  uint64_t v8 = MEMORY[0x1E4FBC860];
  *(void *)&v0[OBJC_IVAR___SNFileSystem_inflightTasks] = MEMORY[0x1E4FBC860];
  sub_1DC89C89C(0, (unint64_t *)&qword_1EAA9D100);
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v1, *MEMORY[0x1E4FBCC68], v4);
  uint64_t v9 = v0;
  sub_1DCB875A8();
  uint64_t v11 = v8;
  sub_1DC8F1F68((unint64_t *)&qword_1EAA9D0F0, MEMORY[0x1E4FBCC10]);
  sub_1DC87E988((uint64_t *)&unk_1EAA9D0D0);
  sub_1DC8C19F0((unint64_t *)&qword_1EAA9D0E0, (uint64_t *)&unk_1EAA9D0D0);
  sub_1DCB88928();
  *(void *)&v9[OBJC_IVAR___SNFileSystem_queue] = sub_1DCB88508();

  v10.receiver = v9;
  v10.super_class = (Class)type metadata accessor for SNFileSystem();
  objc_msgSendSuper2(&v10, sel_init);
  sub_1DC89DA54();
}

void *sub_1DC8F0744(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 8))(a3, a4, a5, a6, a7, ObjectType, a2);
  uint64_t v17 = v16;
  uint64_t v18 = (void *)swift_allocObject();
  _OWORD v18[2] = v15;
  v18[3] = v17;
  uint64_t v18[4] = a4;
  v18[5] = a5;
  swift_retain();
  id v19 = a1;
  return a1;
}

void sub_1DC8F0830()
{
  sub_1DC89D9F8();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v47 = v10;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v15 = sub_1DCB87588();
  sub_1DC89D4E0();
  uint64_t v46 = v16;
  MEMORY[0x1F4188790](v17);
  sub_1DC8A22D0();
  uint64_t v20 = v19 - v18;
  sub_1DCB875B8();
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v21);
  sub_1DC8A22D0();
  uint64_t v26 = v25 - v24;
  uint64_t v27 = *(void *)(v1 + 16);
  if (v27)
  {
    uint64_t v28 = 32;
    while (*(void **)(v1 + v28) != v14)
    {
      v28 += 32;
      if (!--v27) {
        goto LABEL_5;
      }
    }
    uint64_t v40 = v22;
    uint64_t v41 = v23;
    uint64_t v42 = swift_allocObject();
    *(void *)(v42 + 16) = v9;
    *(void *)(v42 + 24) = v7;
    v48[4] = sub_1DC8F1E9C;
    v48[5] = v42;
    v48[0] = MEMORY[0x1E4F143A8];
    v48[1] = 1107296256;
    v48[2] = sub_1DC9C881C;
    v48[3] = &unk_1F37FAFD0;
    uint64_t v43 = _Block_copy(v48);
    swift_retain();
    sub_1DCB875A8();
    sub_1DC8F1F68((unint64_t *)&unk_1EAA9E710, MEMORY[0x1E4FBCB00]);
    sub_1DC87E988((uint64_t *)&unk_1EAA9F660);
    sub_1DC8C19F0((unint64_t *)&qword_1EAA9E720, (uint64_t *)&unk_1EAA9F660);
    sub_1DCB88928();
    MEMORY[0x1E01A74F0](0, v26, v20, v43);
    _Block_release(v43);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v20, v15);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v26, v40);
    swift_release();
    swift_bridgeObjectRetain();
  }
  else
  {
LABEL_5:
    uint64_t v29 = sub_1DC8F0744(v14, v12, v47, v9, v7, v5, v3);
    uint64_t v31 = v30;
    uint64_t v33 = v32;
    swift_bridgeObjectRetain();
    id v34 = v29;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1DCA737BC(0, *(void *)(v1 + 16) + 1, 1, v1, v35, v36);
      uint64_t v1 = v44;
    }
    unint64_t v38 = *(void *)(v1 + 16);
    unint64_t v37 = *(void *)(v1 + 24);
    if (v38 >= v37 >> 1)
    {
      sub_1DCA737BC(v37 > 1, v38 + 1, 1, v1, v35, v36);
      uint64_t v1 = v45;
    }
    *(void *)(v1 + 16) = v38 + 1;
    uint64_t v39 = (void *)(v1 + 32 * v38);
    v39[4] = v34;
    v39[5] = v31;
    v39[6] = sub_1DC8F1EE4;
    v39[7] = v33;
    swift_release();
  }
  sub_1DC89DA54();
}

void sub_1DC8F0B88(void (*a1)(void))
{
  type metadata accessor for SNError();
  id v2 = sub_1DCA14B2C(0xD000000000000017, 0x80000001DCB90E90, 2, 0, 0xD000000000000018, 0x80000001DCB91F20);
  a1();
}

void sub_1DC8F0C2C(uint64_t a1, void *a2)
{
  unint64_t v4 = 0;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = a1 + 24;
  uint64_t v7 = MEMORY[0x1E4FBC860];
LABEL_2:
  uint64_t v8 = v6 + 32 * v4;
  while (1)
  {
    if (v5 == v4)
    {

      swift_bridgeObjectRelease();
      return;
    }
    if (v4 >= *(void *)(a1 + 16)) {
      break;
    }
    uint64_t v9 = (void *)(v8 + 32);
    ++v4;
    uint64_t v10 = *(void **)(v8 + 8);
    v8 += 32;
    if (v10 != a2)
    {
      uint64_t v16 = v6;
      long long v15 = *((_OWORD *)v9 - 1);
      uint64_t v11 = *v9;
      id v14 = v10;
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1DC8983BC();
      }
      unint64_t v12 = *(void *)(v7 + 16);
      if (v12 >= *(void *)(v7 + 24) >> 1) {
        sub_1DC8983BC();
      }
      *(void *)(v7 + 16) = v12 + 1;
      uint64_t v13 = v7 + 32 * v12;
      *(void *)(v13 + 32) = v14;
      *(_OWORD *)(v13 + 40) = v15;
      *(void *)(v13 + 56) = v11;
      uint64_t v6 = v16;
      goto LABEL_2;
    }
  }
  __break(1u);
}

void sub_1DC8F0D78()
{
  sub_1DC89D9F8();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v13 = sub_1DCB87588();
  sub_1DC89D4E0();
  uint64_t v23 = v14;
  MEMORY[0x1F4188790](v15);
  uint64_t v22 = sub_1DC8C1F1C();
  sub_1DC89D4E0();
  uint64_t v17 = v16;
  MEMORY[0x1F4188790](v18);
  sub_1DC89D970();
  uint64_t v19 = (void *)swift_allocObject();
  long long v19[2] = v12;
  v19[3] = v0;
  uint64_t v19[4] = v10;
  v19[5] = v8;
  v19[6] = v6;
  v19[7] = v4;
  v24[4] = sub_1DC8F1D28;
  void v24[5] = v19;
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 1107296256;
  _OWORD v24[2] = sub_1DC9C881C;
  v24[3] = &unk_1F37FB340;
  uint64_t v20 = _Block_copy(v24);
  swift_unknownObjectRetain();
  id v21 = v0;
  swift_retain();
  swift_retain();
  sub_1DCB875A8();
  sub_1DC8F1F68((unint64_t *)&unk_1EAA9E710, MEMORY[0x1E4FBCB00]);
  sub_1DC87E988((uint64_t *)&unk_1EAA9F660);
  sub_1DC8C19F0((unint64_t *)&qword_1EAA9E720, (uint64_t *)&unk_1EAA9F660);
  sub_1DCB88928();
  MEMORY[0x1E01A74F0](0, v2, v1, v20);
  _Block_release(v20);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v1, v13);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v2, v22);
  swift_release();
  sub_1DC89DA54();
}

uint64_t sub_1DC8F0FD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v30 = a5;
  uint64_t v31 = a3;
  uint64_t v8 = sub_1DCB87588();
  uint64_t v33 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_1DCB875B8();
  uint64_t v11 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v32);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = &unk_1F381BB28;
  uint64_t v14 = swift_dynamicCastObjCProtocolConditional();
  if (v14
    && (uint64_t v15 = v14,
        swift_getObjectType(),
        sub_1DC89C89C(0, (unint64_t *)&qword_1EAA9C7B0),
        (uint64_t v16 = sub_1DC8F1C68(v15)) != 0))
  {
    uint64_t v18 = v16;
    uint64_t v19 = v17;
    uint64_t v20 = swift_allocObject();
    swift_unknownObjectWeakInit();
    id v21 = (void *)swift_allocObject();
    void v21[2] = v20;
    uint64_t v21[3] = v18;
    void v21[4] = v19;
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = v30;
    *(void *)(v22 + 24) = a6;
    type metadata accessor for SNFileSystem();
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1DC8F0830();
    uint64_t v24 = v23;
    swift_bridgeObjectRelease();
    sub_1DC8F04D8(v24);
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    type metadata accessor for SNError();
    uint64_t aBlock = 0;
    unint64_t v36 = 0xE000000000000000;
    sub_1DCB88A98();
    swift_bridgeObjectRelease();
    uint64_t aBlock = 0xD000000000000018;
    unint64_t v36 = 0x80000001DCB91F00;
    swift_getObjectType();
    sub_1DCB892F8();
    sub_1DCB87A18();
    swift_bridgeObjectRelease();
    id v25 = sub_1DCA14B2C(0xD000000000000017, 0x80000001DCB90E90, 2, 0, aBlock, v36);
    swift_bridgeObjectRelease();
    uint64_t v26 = (void *)swift_allocObject();
    void v26[2] = v31;
    v26[3] = a4;
    v26[4] = v25;
    uint64_t v39 = sub_1DC8F1D78;
    uint64_t v40 = v26;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    unint64_t v36 = 1107296256;
    unint64_t v37 = sub_1DC9C881C;
    unint64_t v38 = &unk_1F37FAD50;
    uint64_t v27 = _Block_copy(&aBlock);
    swift_retain();
    id v28 = v25;
    sub_1DCB875A8();
    uint64_t v34 = MEMORY[0x1E4FBC860];
    sub_1DC8F1F68((unint64_t *)&unk_1EAA9E710, MEMORY[0x1E4FBCB00]);
    sub_1DC87E988((uint64_t *)&unk_1EAA9F660);
    sub_1DC8C19F0((unint64_t *)&qword_1EAA9E720, (uint64_t *)&unk_1EAA9F660);
    sub_1DCB88928();
    MEMORY[0x1E01A74F0](0, v13, v10, v27);
    _Block_release(v27);

    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v8);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v32);
  }
  return swift_release();
}

void sub_1DC8F14CC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2 + 16;
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x1E01A9AE0](v4);
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    id v7 = a3;
    uint64_t v8 = swift_bridgeObjectRetain();
    sub_1DC8F0C2C(v8, v7);
    sub_1DC8F04D8(v9);
  }
}

uint64_t sub_1DC8F155C(uint64_t a1, void (*a2)())
{
  sub_1DC87E9DC(a1, (uint64_t)v4);
  sub_1DC87E988(&qword_1EAA9E960);
  swift_dynamicCast();
  a2();
  return swift_unknownObjectRelease();
}

void sub_1DC8F16D4()
{
  sub_1DC89D9F8();
  uint64_t v4 = v3;
  uint64_t v5 = sub_1DCB87588();
  sub_1DC89D4E0();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  uint64_t v9 = sub_1DC8C1F1C();
  sub_1DC89D4E0();
  uint64_t v11 = v10;
  MEMORY[0x1F4188790](v12);
  sub_1DC89D970();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v4;
  *(void *)(v13 + 24) = v0;
  v16[4] = sub_1DC8F1C48;
  v16[5] = v13;
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 1107296256;
  void v16[2] = sub_1DC9C881C;
  void v16[3] = &unk_1F37FA918;
  uint64_t v14 = _Block_copy(v16);
  swift_unknownObjectRetain();
  id v15 = v0;
  sub_1DCB875A8();
  sub_1DC8F1F68((unint64_t *)&unk_1EAA9E710, MEMORY[0x1E4FBCB00]);
  sub_1DC87E988((uint64_t *)&unk_1EAA9F660);
  sub_1DC8C19F0((unint64_t *)&qword_1EAA9E720, (uint64_t *)&unk_1EAA9F660);
  sub_1DCB88928();
  MEMORY[0x1E01A74F0](0, v2, v1, v14);
  _Block_release(v14);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v5);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v2, v9);
  swift_release();
  sub_1DC89DA54();
}

uint64_t sub_1DC8F1904()
{
  uint64_t result = swift_dynamicCastObjCProtocolConditional();
  if (result)
  {
    uint64_t v1 = result;
    swift_getObjectType();
    sub_1DC89C89C(0, (unint64_t *)&qword_1EAA9C7B0);
    uint64_t result = sub_1DC8F1C68(v1);
    if (result)
    {
      uint64_t v2 = (void *)result;
      swift_unknownObjectRetain();
      uint64_t v3 = swift_bridgeObjectRetain();
      sub_1DC8F0C2C(v3, v2);
      return sub_1DC8F04D8(v4);
    }
  }
  return result;
}

id SNFileSystem.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SNFileSystem();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SNFileSystem()
{
  return self;
}

uint64_t method lookup function for SNFileSystem(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SNFileSystem);
}

uint64_t destroy for SNFileSystem.InflightTask(id *a1)
{
  return swift_release();
}

uint64_t initializeWithCopy for SNFileSystem.InflightTask(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(_OWORD *)a1 = *a2;
  uint64_t v4 = *((void *)a2 + 3);
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(void *)(a1 + 24) = v4;
  id v5 = (id)v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SNFileSystem.InflightTask(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v7 = v4;

  *(void *)(a1 + 8) = v5;
  uint64_t v8 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v8;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SNFileSystem.InflightTask(uint64_t a1, _OWORD *a2)
{
  long long v4 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v4;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SNFileSystem.InflightTask()
{
  return &type metadata for SNFileSystem.InflightTask;
}

uint64_t sub_1DC8F1C2C()
{
  return sub_1DC8F1DFC(MEMORY[0x1E4FBC8F8]);
}

uint64_t sub_1DC8F1C48()
{
  return sub_1DC8F1904();
}

uint64_t sub_1DC8F1C50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1DC8F1C60()
{
  return swift_release();
}

uint64_t sub_1DC8F1C68(uint64_t a1)
{
  uint64_t result = swift_dynamicCastMetatype();
  if (result)
  {
    if (swift_conformsToProtocol2()) {
      return a1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1DC8F1CD8()
{
  swift_unknownObjectRelease();

  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1DC8F1D28()
{
  return sub_1DC8F0FD4(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7]);
}

uint64_t sub_1DC8F1D38()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1DC8F1D78()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

uint64_t sub_1DC8F1DA8()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1DC8F1DE0()
{
  return sub_1DC8F1DFC(MEMORY[0x1E4FBC8D0]);
}

uint64_t sub_1DC8F1DFC(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));

  return swift_deallocObject();
}

void sub_1DC8F1E50(uint64_t a1)
{
  sub_1DC8F14CC(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1DC8F1E5C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1DC8F1E94(uint64_t a1)
{
  return sub_1DC8F155C(a1, *(void (**)())(v1 + 16));
}

void sub_1DC8F1E9C()
{
  sub_1DC8F0B88(*(void (**)(void))(v0 + 16));
}

uint64_t sub_1DC8F1EA4()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1DC8F1EE4(uint64_t a1)
{
  long long v3 = *(uint64_t (**)(uint64_t))(v1 + 32);
  (*(void (**)(void))(v1 + 16))();
  return v3(a1);
}

uint64_t sub_1DC8F1F30()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t sub_1DC8F1F68(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1DC8F1FD0()
{
  swift_beginAccess();
  nullsub_1(v0 + 16);
  swift_endAccess();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for UnsafeSDFNodeView()
{
  return self;
}

void sub_1DC8F2050(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  long long v4 = a2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = MEMORY[0x1E4FBC860];
  if (v5)
  {
    uint64_t v23 = MEMORY[0x1E4FBC860];
    sub_1DC89809C();
    uint64_t v6 = v23;
    uint64_t v8 = sub_1DC9A4ACC(a1);
    uint64_t v10 = v9;
    char v12 = v11 & 1;
    while ((v8 & 0x8000000000000000) == 0 && v8 < 1 << *(unsigned char *)(a1 + 32))
    {
      if (((*(void *)(a1 + 64 + (((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_15;
      }
      if (*(_DWORD *)(a1 + 36) != v10) {
        goto LABEL_16;
      }
      uint64_t v13 = *(void **)(*(void *)(a1 + 56) + 8 * v8);
      v21[0] = *(id *)(*(void *)(a1 + 48) + 8 * v8);
      v21[1] = v13;
      id v14 = v21[0];
      swift_bridgeObjectRetain();
      sub_1DC8F2238((uint64_t)v21, &v20, v22);
      if (v3)
      {
        swift_release();
        swift_bridgeObjectRelease();

        return;
      }
      uint64_t v3 = 0;
      swift_bridgeObjectRelease();

      uint64_t v23 = v6;
      unint64_t v15 = *(void *)(v6 + 16);
      if (v15 >= *(void *)(v6 + 24) >> 1)
      {
        sub_1DC89809C();
        uint64_t v6 = v23;
      }
      *(void *)(v6 + 16) = v15 + 1;
      sub_1DC87E9CC(v22, (_OWORD *)(v6 + 32 * v15 + 32));
      uint64_t v16 = sub_1DC97F958(v8, v10, v12 & 1, a1);
      uint64_t v8 = v16;
      uint64_t v10 = v17;
      char v12 = v18 & 1;
      if (!--v5)
      {
        sub_1DC8F2B2C(v16, v17, v18 & 1);
        long long v4 = a2;
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
  else
  {
LABEL_13:
    _OWORD v4[3] = sub_1DC87E988(&qword_1EAAA10B0);
    *long long v4 = v6;
  }
}

uint64_t sub_1DC8F2238@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (objc_msgSend(*(id *)a1, sel_nonretainedObjectValue))
  {
    sub_1DCB88808();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v45, 0, sizeof(v45));
  }
  sub_1DC8D9190((uint64_t)v45);
  uint64_t v7 = v3;
  uint64_t result = sub_1DC881978((uint64_t)v45);
  if (!v3)
  {
    type metadata accessor for SNDetectSoundRequest();
    if (swift_dynamicCastClass())
    {
      swift_unknownObjectRetain();
      sub_1DCAE87B0(v6, v9, v10, v11, v12, v13, v14, v15, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40,
        v41,
        v42,
        v43,
        v44,
        *(uint64_t *)&v45[0],
        *((uint64_t *)&v45[0] + 1));
      uint64_t v17 = v16;
      sub_1DCA95CF4(v16);
      uint64_t v25 = sub_1DCA95E28(v17, v18, v19, v20, v21, v22, v23, v24);
      swift_bridgeObjectRelease();
      sub_1DC87E988(&qword_1EAAA0900);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1DCBBCDA0;
      *(void *)(inited + 32) = 0x656449646E756F73;
      *(void *)(inited + 40) = 0xEF7265696669746ELL;
      uint64_t v27 = sub_1DC8C7690();
      type metadata accessor for SNSoundIdentifier(0);
      *(void *)(inited + 48) = v27;
      *(void *)(inited + 72) = v28;
      *(void *)(inited + 80) = 0x73746C75736572;
      *(void *)(inited + 88) = 0xE700000000000000;
      *(void *)(inited + 120) = sub_1DC87E988(&qword_1EAAA10B0);
      *(void *)(inited + 96) = v25;
      uint64_t v29 = sub_1DCB877D8();
      a3[3] = sub_1DC87E988((uint64_t *)&unk_1EAA9C6E0);
      uint64_t result = swift_unknownObjectRelease_n();
      *a3 = v29;
      return result;
    }
    sub_1DC8DA330();
    uint64_t v7 = swift_allocError();
    swift_willThrow();
    uint64_t result = swift_unknownObjectRelease();
  }
  *a2 = v7;
  return result;
}

uint64_t sub_1DC8F246C(unint64_t a1)
{
  uint64_t v8 = MEMORY[0x1E4FBC860];
  if (!(a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_1DCB88CC8();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_14;
  }
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v7 = v2;
    do
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v5 = (id)MEMORY[0x1E01A7AE0](v4, a1);
      }
      else {
        id v5 = *(id *)(a1 + 8 * v4 + 32);
      }
      uint64_t v6 = v5;
      objc_msgSend(v5, sel_timeRange, v7);
      if (sub_1DCB885F8())
      {
        sub_1DCB88B48();
        sub_1DCB88B78();
        sub_1DCB88B88();
        sub_1DCB88B58();
        uint64_t v2 = v7;
      }
      else
      {
      }
      ++v4;
    }
    while (v2 != v4);
    swift_bridgeObjectRelease();
    return v8;
  }
  return result;
}

double sub_1DC8F2608(void *a1)
{
  v8[1] = *(id *)MEMORY[0x1E4F143B8];
  v8[0] = 0;
  id v2 = objc_msgSend(a1, sel_formatWithError_, v8);
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = v8[0];
    objc_msgSend(v3, sel_sampleRate);
    double v1 = v5;
  }
  else
  {
    id v6 = v8[0];
    sub_1DCB86898();

    swift_willThrow();
  }
  return v1;
}

void sub_1DC8F26DC(void *a1)
{
  v3[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 0;
  v3[0] = 0;
  if (!objc_msgSend(a1, sel_getTimeBoundsWithStartTime_endTime_, v3, &v2)) {
    goto LABEL_5;
  }
  if (__OFSUB__(v2, v3[0]))
  {
    __break(1u);
LABEL_5:
    type metadata accessor for SNError();
    id v1 = sub_1DC8F2B38(0xD000000000000025, (uint64_t)"BOOL success status indicates failure");
    swift_willThrow();
    sub_1DC8F2B38(0xD000000000000020, (uint64_t)"error getting ring buffer bounds");
    swift_willThrow();
  }
}

void sub_1DC8F27C8(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1DC8F26DC(a1);
  if (!v2)
  {
    double v5 = sub_1DC8F2608(a1);
    if (floor(v5) == v5)
    {
      if ((~*(void *)&v5 & 0x7FF0000000000000) != 0)
      {
        if (v5 > -2147483650.0)
        {
          if (v5 < 2147483650.0)
          {
            uint64_t v6 = sub_1DCB88628();
            int v8 = v7;
            uint64_t v10 = v9;
            unint64_t v11 = HIDWORD(v7);
            uint64_t v12 = sub_1DCB88628();
            *(void *)a2 = v6;
            *(_DWORD *)(a2 + 8) = v8;
            *(_DWORD *)(a2 + 12) = v11;
            *(void *)(a2 + 16) = v10;
            *(void *)(a2 + 24) = v12;
            *(_DWORD *)(a2 + 32) = v13;
            *(_DWORD *)(a2 + 36) = v14;
            *(void *)(a2 + 40) = v15;
            return;
          }
          goto LABEL_11;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
LABEL_11:
      __break(1u);
      return;
    }
    type metadata accessor for SNError();
    sub_1DCB88A98();
    sub_1DCB87A18();
    sub_1DCB87FB8();
    sub_1DCA14B2C(0xD000000000000017, 0x80000001DCB90E90, 1, 0, 0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
}

void sub_1DC8F2980(CMTimeValue a1, unint64_t a2, CMTimeEpoch a3, void *a4)
{
  sub_1DC8F27C8(a4, (uint64_t)&v18);
  if (!v4)
  {
    CMTimeValue v8 = v18;
    uint64_t v9 = *(void *)newTimescale;
    CMTimeEpoch v10 = v20;
    CMTimeValue v11 = v21;
    uint64_t v12 = v22;
    CMTimeEpoch v13 = v23;
    type metadata accessor for SNTimeUtils();
    sub_1DC8AD3A0((uint64_t)&v18, a1, a2, a3);
    range.start.CMTimeValue value = v8;
    *(void *)&range.start.CMTimeScale timescale = v9;
    range.start.CMTimeEpoch epoch = v10;
    range.duration.CMTimeValue value = v11;
    *(void *)&range.duration.CMTimeScale timescale = v12;
    range.duration.CMTimeEpoch epoch = v13;
    CMTimeRangeGetEnd(&rhs, &range);
    CMTimeEpoch epoch = rhs.epoch;
    rhs.CMTimeEpoch epoch = a3;
    range.start.CMTimeValue value = rhs.value;
    *(void *)&range.start.CMTimeScale timescale = *(void *)&rhs.timescale;
    range.start.CMTimeEpoch epoch = epoch;
    rhs.CMTimeValue value = a1;
    *(void *)&rhs.CMTimeScale timescale = a2;
    CMTimeSubtract(&v15, &range.start, &rhs);
    range.CMTime start = v15;
    CMTimeConvertScale(&rhs, &range.start, newTimescale[0], kCMTimeRoundingMethod_RoundTowardPositiveInfinity);
    if (rhs.value < 0 || HIDWORD(rhs.value))
    {
      sub_1DC8AF148();
      sub_1DCB88C58();
      __break(1u);
    }
  }
}

uint64_t sub_1DC8F2B2C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

id sub_1DC8F2B38@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  return sub_1DCA14B2C(0xD000000000000017, v2, 1, 0, a1, (a2 - 32) | 0x8000000000000000);
}

void sub_1DC8F2B64(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = v5;
  swift_getObjectType();
  uint64_t v13 = sub_1DC8F5A20(a1);
  if (v13)
  {
    uint64_t v15 = v13;
    uint64_t v16 = v14;
    uint64_t v43 = a2;
    uint64_t v44 = a4;
    swift_beginAccess();
    swift_unknownObjectRetain_n();
    unint64_t v17 = swift_bridgeObjectRetain();
    unint64_t v18 = sub_1DC8F3C08(v17, v15);
    unint64_t v19 = v18;
    if (v18 >> 62) {
      goto LABEL_18;
    }
    uint64_t v20 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v45 = v16;
      if (!v20) {
        break;
      }
      unint64_t v41 = a3;
      uint64_t v42 = a5;
      a3 = v19 & 0xC000000000000001;
      uint64_t v21 = 4;
      while (1)
      {
        uint64_t v16 = v21 - 4;
        if (a3)
        {
          a5 = MEMORY[0x1E01A7AE0](v21 - 4, v19);
        }
        else
        {
          a5 = *(void *)(v19 + 8 * v21);
          swift_unknownObjectRetain();
        }
        uint64_t v22 = v21 - 3;
        if (__OFADD__(v16, 1)) {
          break;
        }
        sub_1DC8F3054(a5);
        swift_unknownObjectRelease();
        ++v21;
        if (v22 == v20)
        {
          swift_release();
          a5 = v42;
          a3 = v41;
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_18:
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v20 = sub_1DCB88CC8();
    }
    swift_release();
LABEL_14:
    swift_bridgeObjectRelease_n();
    uint64_t v28 = sub_1DC8BABC0();
    swift_weakInit();
    uint64_t v29 = (void *)swift_allocObject();
    v29[2] = v28;
    void v29[3] = v15;
    v29[4] = v45;
    v29[5] = v43;
    v29[6] = a3;
    uint64_t v30 = sub_1DC8BABC0();
    swift_weakInit();
    long long v31 = (void *)swift_allocObject();
    v31[2] = v30;
    v31[3] = v15;
    v31[4] = v45;
    v31[5] = v44;
    v31[6] = a5;
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_retain();
    sub_1DC8F4208(v15, v45, (uint64_t)sub_1DC8F6394, (uint64_t)v29, (uint64_t)sub_1DC8F63F8, (uint64_t)v31);
    swift_release();
    swift_release();
    if (v6)
    {
      type metadata accessor for SNError();
      sub_1DC8E7B68();
      unint64_t v32 = sub_1DC8F65D8();
      sub_1DCA14B2C(v32, v33, v34, v35, 0xD000000000000017, v36);
      swift_willThrow();
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v37 = *(void **)(v7 + 40);
      uint64_t v38 = swift_retain();
      sub_1DC8F4E10(v38, v37);
      sub_1DC8F6678();
      uint64_t v39 = swift_unknownObjectRetain();
      MEMORY[0x1E01A6BF0](v39);
      sub_1DC9B46BC(*(void *)((*(void *)(v7 + 48) & 0xFFFFFFFFFFFFFF8) + 0x10));
      sub_1DCB87D28();
      sub_1DCB87C68();
      swift_endAccess();
      swift_unknownObjectRelease();
      sub_1DC8F6678();
      uint64_t v40 = swift_retain();
      MEMORY[0x1E01A6BF0](v40);
      sub_1DC9B46BC(*(void *)((*(void *)(v7 + 56) & 0xFFFFFFFFFFFFFF8) + 0x10));
      sub_1DCB87D28();
      sub_1DCB87C68();
      swift_endAccess();
      swift_release_n();
      *(unsigned char *)(v7 + 64) = 1;
    }
  }
  else
  {
    type metadata accessor for SNError();
    sub_1DCB88A98();
    swift_bridgeObjectRelease();
    swift_getObjectType();
    sub_1DCB892F8();
    sub_1DCB87A18();
    swift_bridgeObjectRelease();
    unint64_t v23 = sub_1DC8F65D8();
    sub_1DCA14B2C(v23, v24, v25, v26, v27, 0x80000001DCB92190);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
}

unint64_t sub_1DC8F3054(uint64_t a1)
{
  swift_getObjectType();
  unint64_t result = sub_1DC8F5A20(a1);
  if (result)
  {
    uint64_t v4 = result;
    swift_beginAccess();
    swift_unknownObjectRetain();
    unint64_t result = sub_1DC8F6018((uint64_t *)(v1 + 48), v4);
    int64_t v5 = result;
    unint64_t v6 = *(void *)(v1 + 48);
    if (v6 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = sub_1DCB88CC8();
      unint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v7 < v5)
    {
      __break(1u);
    }
    else
    {
      sub_1DC8C0EAC();
      swift_endAccess();
      unint64_t result = sub_1DC8F434C(v4);
      *(unsigned char *)(v1 + 64) = 1;
    }
  }
  return result;
}

void sub_1DC8F3160(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v61[3] = *(id *)MEMORY[0x1E4F143B8];
  self;
  uint64_t v6 = swift_dynamicCastObjCClass();
  if (!v6)
  {
    sub_1DC8DA330();
    uint64_t v29 = (void *)swift_allocError();
    swift_willThrow();
    goto LABEL_32;
  }
  uint64_t v7 = (void *)v6;
  id v60 = a1;
  if (objc_msgSend(v7, sel_frameLength))
  {
    id v8 = sub_1DC8F66A8();
    uint64_t v9 = *(void **)(v3 + 40);
    id v10 = objc_msgSend(v8, sel_isEqual_, v9);

    if (v10)
    {
      unint64_t v11 = (unint64_t)sub_1DC8F66A8();
      objc_msgSend((id)v11, sel_sampleRate);
      double v13 = v12;

      if ((~*(void *)&v13 & 0x7FF0000000000000) == 0) {
        goto LABEL_37;
      }
      if (v13 <= -2147483650.0) {
        goto LABEL_38;
      }
      if (v13 >= 2147483650.0) {
        goto LABEL_39;
      }
      id v10 = (id)sub_1DCB88628();
      uint64_t v15 = v14;
      unint64_t v11 = v16;
      id v17 = sub_1DC8F66A8();
      objc_msgSend(v17, sel_sampleRate);
      double v19 = v18;

      if ((~*(void *)&v19 & 0x7FF0000000000000) == 0) {
        goto LABEL_40;
      }
      if (v19 <= -2147483650.0) {
        goto LABEL_41;
      }
      unint64_t v59 = v11;
      if (v19 >= 2147483650.0) {
        goto LABEL_42;
      }
      uint64_t v20 = sub_1DCB88628();
      int v22 = v21;
      uint64_t v24 = v23;
      unint64_t v25 = HIDWORD(v21);
      *(void *)(v3 + 68) = sub_1DCB885D8();
      *(_DWORD *)(v3 + 76) = v26;
      *(_DWORD *)(v3 + 80) = v27;
      *(void *)(v3 + 84) = v28;
      *(void *)(v3 + 92) = v10;
      *(void *)(v3 + 100) = v15;
      *(void *)(v3 + 108) = v59;
      *(void *)(v3 + 116) = v20;
      *(_DWORD *)(v3 + 124) = v22;
      *(_DWORD *)(v3 + 128) = v25;
      *(void *)(v3 + 132) = v24;
      if (*(unsigned char *)(v3 + 64) == 1)
      {
        sub_1DC8F56D4();
        *(unsigned char *)(v3 + 64) = 0;
      }
      id v10 = *(id *)(v3 + 32);
      v61[0] = 0;
      id v36 = objc_msgSend(v10, sel_maxFramesPerSliceWithError_, v61, v59);
      id v37 = v61[0];
      if (v36)
      {
        uint64_t v38 = v36;
        type metadata accessor for SNUtils();
        id v39 = v37;
        id v40 = objc_msgSend(v38, sel_unsignedIntValue);

        sub_1DCB2156C(v7, (uint64_t)v40);
        unint64_t v11 = v41;
        if (v41 >> 62) {
          goto LABEL_43;
        }
        for (uint64_t i = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = sub_1DCB88CC8())
        {
          uint64_t v43 = 4;
          while (1)
          {
            id v44 = (v11 & 0xC000000000000001) != 0
                ? (id)MEMORY[0x1E01A7AE0](v43 - 4, v11)
                : *(id *)(v11 + 8 * v43);
            uint64_t v45 = v44;
            uint64_t v46 = v43 - 3;
            if (__OFADD__(v43 - 4, 1)) {
              break;
            }
            v61[0] = 0;
            if (!objc_msgSend(v10, sel_processBuffer_framePosition_error_, v44, a2, v61))
            {
              id v51 = v61[0];
              swift_bridgeObjectRelease();
              uint64_t v52 = (void *)sub_1DCB86898();

              swift_willThrow();
              type metadata accessor for SNError();
              sub_1DC8F65EC();
              sub_1DC8E7B68();
              unint64_t v53 = sub_1DC8F65D8();
              uint64_t v29 = sub_1DCA14B2C(v53, v54, v55, v56, v57, v58);
              swift_willThrow();

              goto LABEL_31;
            }
            id v47 = v61[0];
            unsigned int v48 = objc_msgSend(v45, sel_frameLength);

            BOOL v49 = __OFADD__(a2, v48);
            a2 += v48;
            if (v49) {
              goto LABEL_36;
            }
            ++v43;
            if (v46 == i) {
              goto LABEL_28;
            }
          }
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          ;
        }
LABEL_28:

        swift_bridgeObjectRelease();
        goto LABEL_33;
      }
      id v50 = v61[0];
      uint64_t v29 = (void *)sub_1DCB86898();
    }
    else
    {
      type metadata accessor for SNError();
      v61[0] = 0;
      v61[1] = (id)0xE000000000000000;
      sub_1DCB88A98();
      sub_1DCB87A18();
      id v32 = v9;
      id v33 = objc_msgSend(v32, sel_description);
      sub_1DCB87938();

      sub_1DCB87A18();
      swift_bridgeObjectRelease();
      sub_1DCB87A18();
      id v34 = sub_1DC8F66A8();
      id v35 = objc_msgSend(v34, sel_description);
      sub_1DCB87938();

      sub_1DCB87A18();
      swift_bridgeObjectRelease();
      sub_1DCB87A18();
      uint64_t v29 = sub_1DCA14B2C(0xD000000000000017, 0x80000001DCB90E90, 3, 0, 0, 0xE000000000000000);
      swift_bridgeObjectRelease();
    }
    swift_willThrow();
LABEL_31:

LABEL_32:
    sub_1DC8F3B04();

LABEL_33:
    sub_1DC8F65FC();
    return;
  }
  sub_1DC8F65FC();
}

void sub_1DC8F3764()
{
  uint64_t v1 = v0;
  if (qword_1EAA9C658 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1DCB86FE8();
  sub_1DC89F57C(v2, (uint64_t)qword_1EAAFF810);
  swift_retain();
  uint64_t v3 = sub_1DCB86FC8();
  os_log_type_t v4 = sub_1DCB88488();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412802;
    uint64_t v7 = *(void **)(v1 + 68);
    uint64_t v8 = *(void *)(v1 + 84);
    uint64_t v9 = *(void *)(v1 + 76);
    id v10 = self;
    id v19 = v7;
    uint64_t v20 = v9;
    *(void *)&long long v21 = v8;
    id v11 = objc_msgSend(v10, sel_valueWithCMTime_, &v19);
    id v19 = v11;
    sub_1DCB88778();
    *uint64_t v6 = v11;
    *(_WORD *)(v5 + 12) = 2112;
    uint64_t v12 = *(void *)(v1 + 132);
    id v19 = *(id *)(v1 + 92);
    uint64_t v20 = *(void *)(v1 + 100);
    long long v21 = *(_OWORD *)(v1 + 108);
    uint64_t v22 = *(void *)(v1 + 124);
    uint64_t v23 = v12;
    id v13 = objc_msgSend(v10, sel_valueWithCMTimeRange_, &v19);
    id v19 = v13;
    sub_1DCB88778();
    v6[1] = v13;
    *(_WORD *)(v5 + 22) = 2112;
    uint64_t v14 = *(void *)(v1 + 156);
    id v19 = *(id *)(v1 + 140);
    uint64_t v20 = *(void *)(v1 + 148);
    *(void *)&long long v21 = v14;
    id v15 = objc_msgSend(v10, sel_valueWithCMTime_, &v19);
    id v19 = v15;
    sub_1DCB88778();
    _OWORD v6[2] = v15;
    swift_release();
    _os_log_impl(&dword_1DC873000, v3, v4, "analysis completed for analyzer; total received frames %@; most recent analyzed time range %@; latest produced result time %@",
      (uint8_t *)v5,
      0x20u);
    sub_1DC87E988((uint64_t *)&unk_1EAAA5940);
    swift_arrayDestroy();
    MEMORY[0x1E01A99C0](v6, -1, -1);
    MEMORY[0x1E01A99C0](v5, -1, -1);
  }
  else
  {

    swift_release();
  }
  swift_beginAccess();
  unint64_t v16 = *(void *)(v1 + 56);
  if (!(v16 >> 62))
  {
    uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v17) {
      goto LABEL_8;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    sub_1DC8F65FC();
    return;
  }
  sub_1DC8F6694();
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_1DCB88CC8();
  if (!v17) {
    goto LABEL_14;
  }
LABEL_8:
  if (v17 >= 1)
  {
    uint64_t v18 = 0;
    do
    {
      if ((v16 & 0xC000000000000001) != 0) {
        MEMORY[0x1E01A7AE0](v18, v16);
      }
      else {
        swift_retain();
      }
      ++v18;
      swift_retain();
      sub_1DCA3B808();
      swift_release();
      swift_release();
    }
    while (v17 != v18);
    goto LABEL_14;
  }
  __break(1u);
}

uint64_t sub_1DC8F3AAC()
{
  id v1 = objc_msgSend(*(id *)(v0 + 32), sel_description);
  uint64_t v2 = sub_1DCB87938();

  return v2;
}

uint64_t sub_1DC8F3B04()
{
  sub_1DC8F665C();
  unint64_t v1 = *(void *)(v0 + 56);
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_1DCB88CC8();
  uint64_t v2 = result;
  if (!result) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      if ((v1 & 0xC000000000000001) != 0) {
        MEMORY[0x1E01A7AE0](v4, v1);
      }
      else {
        swift_retain();
      }
      ++v4;
      swift_retain();
      sub_1DCA3B844();
      swift_release();
      swift_release();
    }
    while (v2 != v4);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1DC8F3C08(unint64_t a1, uint64_t a2)
{
  uint64_t v10 = MEMORY[0x1E4FBC860];
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      unint64_t v5 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v6 = MEMORY[0x1E01A7AE0](v5, a1);
LABEL_7:
        unint64_t v7 = v5 + 1;
        if (__OFADD__(v5, 1)) {
          goto LABEL_15;
        }
        if (v6 == a2)
        {
          sub_1DCB88B48();
          sub_1DCB88B78();
          sub_1DCB88B88();
          sub_1DCB88B58();
        }
        else
        {
          swift_unknownObjectRelease();
        }
        ++v5;
        if (v7 == v4)
        {
          uint64_t v8 = v10;
          goto LABEL_18;
        }
      }
      if (v5 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      uint64_t v4 = sub_1DCB88CC8();
      if (!v4) {
        goto LABEL_17;
      }
    }
    uint64_t v6 = swift_unknownObjectRetain();
    goto LABEL_7;
  }
LABEL_17:
  uint64_t v8 = MEMORY[0x1E4FBC860];
LABEL_18:
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1DC8F3D5C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();

  return v0;
}

uint64_t sub_1DC8F3D94()
{
  sub_1DC8F3D5C();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SNAnalyzerInfo()
{
  return self;
}

uint64_t sub_1DC8F3DEC(void *a1)
{
  uint64_t v3 = v1;
  sub_1DCABEC20(a1);
  if (v2)
  {

    swift_deallocPartialClassInstance();
  }
  else
  {
    self;
    sub_1DCB6BC0C();
    type metadata accessor for SNAudioProcessorCache();
    uint64_t v5 = sub_1DC8BABC0();
    uint64_t v6 = MEMORY[0x1E4FBC860];
    *(void *)(v5 + 16) = MEMORY[0x1E4FBC860];
    *(void *)(v3 + 48) = v6;
    *(void *)(v3 + 56) = v6;
    *(unsigned char *)(v3 + 64) = 1;
    *(void *)(v3 + 40) = a1;
    *(void *)(v3 + 16) = v5;
    *(void *)(v3 + 24) = v6;
    objc_allocWithZone((Class)SNProcessingTree);
    id v7 = a1;
    *(void *)(v3 + 32) = sub_1DC8F5B60();
    uint64_t v9 = MEMORY[0x1E4F1FA48];
    uint64_t v10 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    *(void *)(v3 + 68) = *MEMORY[0x1E4F1FA48];
    *(void *)(v3 + 76) = *(void *)(v9 + 8);
    *(void *)(v3 + 84) = v10;
    uint64_t v11 = MEMORY[0x1E4F1FA30];
    uint64_t v12 = *(void *)(MEMORY[0x1E4F1FA30] + 40);
    *(void *)(v3 + 92) = *MEMORY[0x1E4F1FA30];
    *(void *)(v3 + 100) = *(void *)(v11 + 8);
    *(_OWORD *)(v3 + 108) = *(_OWORD *)(v11 + 16);
    *(void *)(v3 + 124) = *(void *)(v11 + 32);
    *(void *)(v3 + 132) = v12;
    uint64_t v13 = MEMORY[0x1E4F1F9F8];
    uint64_t v14 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    *(void *)(v3 + 140) = *MEMORY[0x1E4F1F9F8];
    *(void *)(v3 + 148) = *(void *)(v13 + 8);
    *(void *)(v3 + 156) = v14;
    sub_1DC8F3FA8(v7);
  }
  return v3;
}

void sub_1DC8F3FA8(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)objc_msgSend(a1, sel_streamDescription);
  uint64_t v3 = *(void *)v2;
  uint64_t v4 = *(void **)(v1 + 32);
  id v16 = 0;
  long long v5 = *(_OWORD *)(v2 + 8);
  long long v6 = *(_OWORD *)(v2 + 24);
  uint64_t v17 = v3;
  long long v18 = v5;
  long long v19 = v6;
  int v20 = 1;
  if (objc_msgSend(v4, sel_setFormat_error_, &v17, &v16))
  {
    id v7 = v16;
  }
  else
  {
    id v8 = v16;
    uint64_t v9 = (void *)sub_1DCB86898();

    swift_willThrow();
    type metadata accessor for SNError();
    uint64_t v10 = (void *)sub_1DCB86888();
    sub_1DC8E7B68();
    unint64_t v11 = sub_1DC8F6644();
    sub_1DCA14B2C(v11, v12, v13, v10, v14, v15);

    swift_willThrow();
  }
}

uint64_t sub_1DC8F40DC(uint64_t a1)
{
  sub_1DC8F665C();
  unint64_t v3 = *(void *)(v1 + 56);
  if (v3 >> 62) {
    goto LABEL_14;
  }
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  swift_unknownObjectRetain();
  for (; v4; uint64_t v4 = sub_1DCB88CC8())
  {
    uint64_t v5 = 4;
    while (1)
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        uint64_t v6 = MEMORY[0x1E01A7AE0](v5 - 4, v3);
      }
      else
      {
        uint64_t v6 = *(void *)(v3 + 8 * v5);
        swift_retain();
      }
      uint64_t v7 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      if (*(void *)(v6 + 16) == a1)
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
      swift_release();
      ++v5;
      if (v7 == v4) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_14:
    sub_1DC8F6694();
    swift_bridgeObjectRetain_n();
    swift_unknownObjectRetain();
  }
LABEL_10:
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = 0;
LABEL_12:
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1DC8F4208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = v6;
  swift_getObjectType();
  uint64_t result = (*(uint64_t (**)(void))(a2 + 8))();
  if (!v7)
  {
    uint64_t v15 = result;
    uint64_t v16 = v14;
    int v20 = *(void **)(v8 + 32);
    type metadata accessor for SNAnalyzerHost();
    swift_allocObject();
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    uint64_t v17 = sub_1DCA3B8F4(v15, v16, a3, a4, a5, a6, (uint64_t)v20);
    type metadata accessor for SNAnalyzerInfo();
    uint64_t v18 = swift_unknownObjectRetain();
    uint64_t v19 = sub_1DC8F6428(v18, v17, 0, 0, 0, 0);
    swift_unknownObjectRelease();
    return v19;
  }
  return result;
}

uint64_t sub_1DC8F434C(uint64_t a1)
{
  uint64_t result = sub_1DC8F40DC(a1);
  if (result)
  {
    uint64_t v3 = result;
    swift_beginAccess();
    swift_retain();
    uint64_t result = sub_1DC8F5CE4((uint64_t *)(v1 + 56), v3);
    uint64_t v4 = result;
    unint64_t v5 = *(void *)(v1 + 56);
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = sub_1DCB88CC8();
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v6 < v4)
    {
      __break(1u);
    }
    else
    {
      sub_1DC8C0CC0();
      swift_endAccess();
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1DC8F442C(uint64_t a1)
{
  uint64_t v2 = sub_1DC8BABC0();
  swift_unknownObjectWeakInit();
  unint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = a1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = a1;
  swift_retain_n();
  uint64_t v5 = swift_unknownObjectRetain_n();
  sub_1DC8F2B64(v5, (uint64_t)sub_1DC8F6530, v3, (uint64_t)sub_1DC8C11F0, v4);
  swift_release();
  swift_release();
  return swift_release();
}

void *sub_1DC8F4528(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 16;
  swift_beginAccess();
  uint64_t result = (void *)MEMORY[0x1E01A9AE0](v5);
  if (result)
  {
    uint64_t v7 = result;
    if (a1)
    {
      if (objc_msgSend(result, sel_respondsToSelector_, sel_request_didFailWithError_))
      {
        id v8 = a1;
        swift_unknownObjectRetain();
        uint64_t v9 = (void *)sub_1DCB86888();
        objc_msgSend(v7, sel_request_didFailWithError_, a3, v9);
        swift_unknownObjectRelease();
      }
    }
    else if (objc_msgSend(result, sel_respondsToSelector_, sel_requestDidComplete_))
    {
      objc_msgSend(v7, sel_requestDidComplete_, a3);
    }
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1DC8F4620(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(void))
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v9 = Strong;
    v47[1] = (uint64_t)&unk_1F381A940;
    uint64_t v10 = swift_dynamicCastObjCProtocolConditional();
    if (v10)
    {
      unint64_t v11 = (void *)v10;
      swift_unknownObjectRetain();
      if (sub_1DCB88638())
      {
        objc_msgSend(v11, sel_timeRange);
        uint64_t v12 = sub_1DCB883C8();
        LODWORD(v14) = v13;
        uint64_t v41 = v15;
        *(void *)type = HIDWORD(v13);
        uint64_t v16 = *(void *)(v9 + 140);
        uint64_t v45 = a1;
        uint64_t v46 = a3;
        int v18 = *(_DWORD *)(v9 + 148);
        int v17 = *(_DWORD *)(v9 + 152);
        uint64_t v19 = *(void *)(v9 + 156);
        int v20 = a5;
        char v21 = sub_1DCB885F8();
        swift_unknownObjectRelease();
        BOOL v22 = (v21 & 1) == 0;
        a5 = v20;
        if (v22)
        {
          LODWORD(v23) = *(_DWORD *)type;
        }
        else
        {
          uint64_t v12 = v16;
          LODWORD(v14) = v18;
          LODWORD(v23) = v17;
        }
        a1 = v45;
        a3 = v46;
        if (v22) {
          uint64_t v24 = v41;
        }
        else {
          uint64_t v24 = v19;
        }
      }
      else
      {
        objc_msgSend(v11, sel_timeRange);
        uint64_t v12 = sub_1DCB883C8();
        unint64_t v14 = v25;
        uint64_t v24 = v26;
        swift_unknownObjectRelease();
        unint64_t v23 = HIDWORD(v14);
      }
      *(void *)(v9 + 140) = v12;
      *(_DWORD *)(v9 + 148) = v14;
      *(_DWORD *)(v9 + 152) = v23;
      *(void *)(v9 + 156) = v24;
    }
    if (qword_1EAA9CFA8 != -1) {
      swift_once();
    }
    if (byte_1EAAFFB70 == 1)
    {
      if (qword_1EAA9C658 != -1) {
        swift_once();
      }
      uint64_t v27 = sub_1DCB86FE8();
      sub_1DC89F57C(v27, (uint64_t)qword_1EAAFF810);
      swift_unknownObjectRetain_n();
      swift_unknownObjectRetain_n();
      uint64_t v28 = sub_1DCB86FC8();
      os_log_type_t v29 = sub_1DCB88458();
      if (os_log_type_enabled(v28, v29))
      {
        os_log_type_t typea = v29;
        uint64_t v30 = swift_slowAlloc();
        uint64_t v42 = swift_slowAlloc();
        v47[0] = v42;
        *(_DWORD *)uint64_t v30 = 136315394;
        id v31 = objc_msgSend(a1, sel_description);
        uint64_t v32 = sub_1DCB87938();
        id v33 = a1;
        unint64_t v35 = v34;

        sub_1DC9F8920(v32, v35, v47);
        sub_1DCB88778();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v30 + 12) = 2080;
        id v36 = objc_msgSend(a3, sel_description);
        uint64_t v37 = sub_1DCB87938();
        unint64_t v39 = v38;

        a1 = v33;
        sub_1DC9F8920(v37, v39, v47);
        sub_1DCB88778();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1DC873000, v28, typea, "for handler: result (%s) produced by request %s", (uint8_t *)v30, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1E01A99C0](v42, -1, -1);
        MEMORY[0x1E01A99C0](v30, -1, -1);
        swift_release();
      }
      else
      {

        swift_release();
        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
      }
    }
    else
    {
      swift_release();
    }
  }
  return a5(a1);
}

uint64_t sub_1DC8F4A9C(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(void *))
{
  v27[4] = *MEMORY[0x1E4F143B8];
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  swift_release();
  if (Strong)
  {
    if (qword_1EAA9CFA8 != -1) {
      swift_once();
    }
    if (byte_1EAAFFB70 == 1)
    {
      if (qword_1EAA9C658 != -1) {
        swift_once();
      }
      uint64_t v9 = sub_1DCB86FE8();
      sub_1DC89F57C(v9, (uint64_t)qword_1EAAFF810);
      id v10 = a1;
      swift_unknownObjectRetain();
      id v11 = a1;
      swift_unknownObjectRetain();
      uint64_t v12 = sub_1DCB86FC8();
      os_log_type_t v13 = sub_1DCB88458();
      if (os_log_type_enabled(v12, v13))
      {
        os_log_type_t v24 = v13;
        uint64_t v14 = swift_slowAlloc();
        uint64_t v15 = (void *)swift_slowAlloc();
        uint64_t v26 = swift_slowAlloc();
        v27[0] = v26;
        *(_DWORD *)uint64_t v14 = 138412546;
        log = v12;
        if (a1)
        {
          id v16 = a1;
          uint64_t v17 = _swift_stdlib_bridgeErrorToNSError();
          sub_1DCB88778();
        }
        else
        {
          sub_1DCB88778();
          uint64_t v17 = 0;
        }
        *uint64_t v15 = v17;

        *(_WORD *)(v14 + 12) = 2080;
        id v18 = objc_msgSend(a3, sel_description);
        uint64_t v19 = v15;
        uint64_t v20 = sub_1DCB87938();
        unint64_t v22 = v21;

        sub_1DC9F8920(v20, v22, v27);
        sub_1DCB88778();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1DC873000, log, v24, "for handler: termination (%@) received from request %s", (uint8_t *)v14, 0x16u);
        sub_1DC87E988((uint64_t *)&unk_1EAAA5940);
        swift_arrayDestroy();
        MEMORY[0x1E01A99C0](v19, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x1E01A99C0](v26, -1, -1);
        MEMORY[0x1E01A99C0](v14, -1, -1);
      }
      else
      {

        swift_unknownObjectRelease_n();
      }
    }
  }
  return a5(a1);
}

void sub_1DC8F4E10(uint64_t a1, id a2)
{
  objc_msgSend(a2, sel_sampleRate);
  double v6 = v5;
  id v7 = objc_msgSend(a2, sel_channelCount);
  swift_retain();
  sub_1DCA3B4F8((uint64_t)v7, v6);
  if (v2)
  {
    swift_release();
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    swift_unknownObjectRelease();
    *(unsigned char *)(a1 + 48) = 0;
    id v16 = *(void **)(a1 + 56);
    *(void *)(a1 + 56) = v2;
    id v17 = v2;

    if (qword_1EAA9C658 != -1) {
      swift_once();
    }
    uint64_t v18 = sub_1DCB86FE8();
    sub_1DC89F57C(v18, (uint64_t)qword_1EAAFF810);
    id v19 = v2;
    id v20 = v2;
    unint64_t v21 = sub_1DCB86FC8();
    os_log_type_t v22 = sub_1DCB88468();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      os_log_type_t v24 = (void *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v31 = v25;
      *(_DWORD *)uint64_t v23 = 136315394;
      uint64_t v26 = sub_1DCB87988();
      sub_1DC9F8920(v26, v27, &v31);
      sub_1DCB88778();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2112;
      id v28 = v2;
      uint64_t v30 = _swift_stdlib_bridgeErrorToNSError();
      sub_1DCB88778();
      *os_log_type_t v24 = v30;

      _os_log_impl(&dword_1DC873000, v21, v22, "request failed to adapt to system configuration %s with error %@", (uint8_t *)v23, 0x16u);
      sub_1DC87E988((uint64_t *)&unk_1EAAA5940);
      swift_arrayDestroy();
      MEMORY[0x1E01A99C0](v24, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1E01A99C0](v25, -1, -1);
      MEMORY[0x1E01A99C0](v23, -1, -1);
    }
    else
    {
    }
    swift_willThrow();
  }
  else
  {
    swift_release();
    uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 24);
    uint64_t ObjectType = swift_getObjectType();
    unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 24))(ObjectType, v8);
    if ((~v10 & 0xF000000000000007) != 0)
    {
      uint64_t v11 = v10;
      uint64_t v12 = sub_1DCB20494(v10);
      uint64_t v14 = v13;
      uint64_t v15 = swift_getObjectType();
      (*(void (**)(id, uint64_t, uint64_t, double))(v14 + 8))(v7, v15, v14, v6);
      sub_1DC8CB784(v11);
      *(void *)(a1 + 32) = v12;
      *(void *)(a1 + 40) = v14;
      swift_unknownObjectRelease();
      *(unsigned char *)(a1 + 48) = 1;
      os_log_type_t v29 = *(void **)(a1 + 56);
      *(void *)(a1 + 56) = 0;
    }
  }
}

uint64_t sub_1DC8F51B4()
{
  sub_1DC8F665C();
  unint64_t v1 = *(void *)(v0 + 48);
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_1DCB88CC8();
  uint64_t v2 = result;
  if (!result) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0)
      {
        uint64_t v5 = MEMORY[0x1E01A7AE0](i, v1);
      }
      else
      {
        uint64_t v5 = *(void *)(v1 + 8 * i + 32);
        swift_unknownObjectRetain();
      }
      sub_1DC8F3054(v5);
      swift_unknownObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void sub_1DC8F5298()
{
  uint64_t v2 = v1;
  v36[14] = *(id *)MEMORY[0x1E4F143B8];
  swift_beginAccess();
  *(void *)(v0 + 24) = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v34 = v0;
  unint64_t v3 = *(void *)(v0 + 56);
  if (v3 >> 62) {
    goto LABEL_19;
  }
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = sub_1DCB88CC8())
  {
    uint64_t v5 = 4;
    while (1)
    {
      uint64_t v6 = v5 - 4;
      if ((v3 & 0xC000000000000001) != 0)
      {
        id v7 = (void *)MEMORY[0x1E01A7AE0](v5 - 4, v3);
      }
      else
      {
        id v7 = *(void **)(v3 + 8 * v5);
        swift_retain();
      }
      if (__OFADD__(v6, 1)) {
        break;
      }
      uint64_t v35 = v5;
      sub_1DC87E988(&qword_1EAA9C720);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1DCBB8670;
      uint64_t v9 = *(void *)(v7[3] + 24);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v11 = v2;
      uint64_t v12 = *(void *)(v9 + 8);
      uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 16);
      swift_retain();
      uint64_t v14 = v13(ObjectType, v12);
      uint64_t v2 = v11;
      if (v11)
      {
        swift_bridgeObjectRelease();
        swift_release();
        *(void *)(inited + 16) = 0;
        swift_setDeallocating();
        sub_1DC937730();
        swift_release();
        goto LABEL_17;
      }
      uint64_t v15 = (void *)v14;
      swift_release();
      if (v7[4])
      {
        uint64_t v16 = v7[5];
        uint64_t v17 = swift_getObjectType();
        uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 16);
        swift_unknownObjectRetain_n();
        uint64_t v19 = v18(v17, v16);
        uint64_t v2 = 0;
        id v20 = (void *)v19;
        swift_unknownObjectRelease_n();
      }
      else
      {
        id v20 = 0;
      }
      id v21 = objc_allocWithZone((Class)SNProcessingContext);
      *(void *)(inited + 32) = sub_1DC8F5C10(v15, v20);
      v36[0] = (id)inited;
      sub_1DCB87C68();
      sub_1DC8F6678();
      unint64_t v22 = swift_bridgeObjectRetain();
      sub_1DCB18D80(v22);
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v5 = v35 + 1;
      if (v6 + 1 == v4) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
LABEL_13:
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void **)(v34 + 32);
  sub_1DC8F6598();
  swift_bridgeObjectRetain();
  os_log_type_t v24 = (void *)sub_1DCB87C08();
  swift_bridgeObjectRelease();
  v36[0] = 0;
  unsigned int v25 = objc_msgSend(v23, sel_setProcessingContexts_error_, v24, v36);

  if (v25)
  {
    id v26 = v36[0];
  }
  else
  {
    id v27 = v36[0];
    uint64_t v2 = (void *)sub_1DCB86898();

    swift_willThrow();
LABEL_17:
    type metadata accessor for SNError();
    id v28 = (void *)sub_1DCB86888();
    sub_1DC8E7B68();
    unint64_t v29 = sub_1DC8F6644();
    sub_1DCA14B2C(v29, v30, v31, v28, v32, v33);

    swift_willThrow();
  }
}

void sub_1DC8F56D4()
{
  sub_1DC8F5298();
  if (v0)
  {
    type metadata accessor for SNError();
    sub_1DC8F65EC();
    sub_1DC8E7B68();
    sub_1DC8F661C(v1, v2, (uint64_t)"Error configuring analysis tree");
    swift_willThrow();
  }
  else
  {
    swift_retain();
    sub_1DC8A1668();
    swift_release();
  }
}

uint64_t sub_1DC8F57A8(uint64_t a1)
{
  swift_beginAccess();
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >> 62) {
    goto LABEL_13;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = sub_1DCB88CC8())
  {
    for (uint64_t i = 4; ; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0)
      {
        uint64_t v5 = MEMORY[0x1E01A7AE0](i - 4, v2);
      }
      else
      {
        uint64_t v5 = *(void *)(v2 + 8 * i);
        swift_retain();
      }
      uint64_t v6 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      uint64_t v7 = *(void *)(*(void *)(v5 + 24) + 24);
      uint64_t ObjectType = swift_getObjectType();
      unint64_t v10 = *(void (**)(uint64_t, uint64_t))(v7 + 32);
      uint64_t v11 = ObjectType;
      swift_retain();
      v10(v11, v7);
      if (v12)
      {
        swift_bridgeObjectRelease();
        swift_release();
        return swift_release();
      }
      swift_release();
      swift_release();
      if (v6 == v3) {
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1DC8F5914()
{
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1DC8F595C()
{
  sub_1DC8F5914();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SNForwardPassAudioStreamAnalyzer()
{
  return self;
}

uint64_t sub_1DC8F59B4(uint64_t a1)
{
  return sub_1DC8F442C(a1);
}

unint64_t sub_1DC8F59D8(uint64_t a1)
{
  return sub_1DC8F3054(a1);
}

uint64_t sub_1DC8F59FC()
{
  return sub_1DC8F51B4();
}

uint64_t sub_1DC8F5A20(uint64_t a1)
{
  if (swift_conformsToProtocol2()) {
    return a1;
  }
  else {
    return 0;
  }
}

uint64_t sub_1DC8F5A64(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    uint64_t v5 = 0;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v6 = MEMORY[0x1E01A7AE0](v5, a1);
        swift_unknownObjectRelease();
        if (v6 == a2) {
          goto LABEL_11;
        }
      }
      else if (*(void *)(a1 + 8 * v5 + 32) == a2)
      {
        goto LABEL_11;
      }
      if (__OFADD__(v5, 1)) {
        break;
      }
      if (++v5 == v4) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_1DCB88CC8();
    swift_bridgeObjectRelease();
  }
LABEL_10:
  uint64_t v5 = 0;
LABEL_11:
  swift_release();
  return v5;
}

id sub_1DC8F5B60()
{
  v5[1] = *(id *)MEMORY[0x1E4F143B8];
  v5[0] = 0;
  id v1 = objc_msgSend(v0, sel_initWithError_, v5);
  if (v1)
  {
    id v2 = v5[0];
  }
  else
  {
    id v3 = v5[0];
    sub_1DCB86898();

    swift_willThrow();
  }
  return v1;
}

id sub_1DC8F5C10(void *a1, void *a2)
{
  id v3 = v2;
  v10[1] = *(id *)MEMORY[0x1E4F143B8];
  v10[0] = 0;
  id v6 = objc_msgSend(v3, sel_initWithGraph_sharedProcessingGraph_error_, a1, a2, v10);
  if (v6)
  {
    id v7 = v10[0];
  }
  else
  {
    id v8 = v10[0];
    sub_1DCB86898();

    swift_willThrow();
  }

  return v6;
}

unint64_t sub_1DC8F5CE4(uint64_t *a1, uint64_t a2)
{
  swift_retain();
  unint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = sub_1DC8F5A64(v6, a2);
  if (!v2)
  {
    unint64_t v3 = v7;
    char v9 = v8;
    swift_bridgeObjectRelease();
    if (v9)
    {
      unint64_t v22 = *a1;
      if (v22 >> 62)
      {
        swift_bridgeObjectRetain();
        unint64_t v3 = sub_1DCB88CC8();
        swift_release();
        swift_bridgeObjectRelease();
        return v3;
      }
      unint64_t v3 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    else
    {
      uint64_t v10 = v3 + 1;
      if (__OFADD__(v3, 1)) {
        goto LABEL_58;
      }
      if ((unint64_t)*a1 >> 62)
      {
LABEL_59:
        swift_bridgeObjectRetain();
        uint64_t v11 = sub_1DCB88CC8();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v11 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (v10 != v11)
      {
        unint64_t v12 = v3 + 5;
        while (1)
        {
          unint64_t v13 = v12 - 4;
          uint64_t v14 = *a1;
          if ((*a1 & 0xC000000000000001) != 0) {
            break;
          }
          if ((v13 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
            goto LABEL_59;
          }
          if (v13 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_49;
          }
          if (*(void *)(v14 + 8 * v12) != a2) {
            goto LABEL_13;
          }
LABEL_34:
          uint64_t v10 = v12 - 3;
          if (__OFADD__(v13, 1)) {
            goto LABEL_50;
          }
          if ((unint64_t)*a1 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v20 = sub_1DCB88CC8();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v20 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          ++v12;
          if (v10 == v20) {
            goto LABEL_46;
          }
        }
        uint64_t v21 = MEMORY[0x1E01A7AE0](v12 - 4);
        swift_unknownObjectRelease();
        if (v21 == a2) {
          goto LABEL_34;
        }
LABEL_13:
        if (v13 != v3)
        {
          uint64_t v10 = *a1;
          if ((*a1 & 0xC000000000000001) != 0)
          {
            uint64_t v15 = MEMORY[0x1E01A7AE0](v3, *a1);
            uint64_t v10 = *a1;
          }
          else
          {
            if ((v3 & 0x8000000000000000) != 0) {
              goto LABEL_52;
            }
            if (v3 >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_53;
            }
            uint64_t v15 = *(void *)(v10 + 8 * v3 + 32);
            swift_retain();
          }
          if ((v10 & 0xC000000000000001) != 0)
          {
            uint64_t v16 = MEMORY[0x1E01A7AE0](v12 - 4, v10);
            uint64_t v10 = *a1;
          }
          else
          {
            if ((v13 & 0x8000000000000000) != 0) {
              goto LABEL_54;
            }
            if (v13 >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_55;
            }
            uint64_t v16 = *(void *)(v10 + 8 * v12);
            swift_retain();
          }
          int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
          *a1 = v10;
          if (!isUniquelyReferenced_nonNull_bridgeObject || v10 < 0 || (v10 & 0x4000000000000000) != 0)
          {
            uint64_t v10 = sub_1DC987164(v10);
            *a1 = v10;
          }
          *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 8 * v3 + 0x20) = v16;
          swift_release();
          sub_1DCB87C68();
          uint64_t v10 = *a1;
          int v18 = swift_isUniquelyReferenced_nonNull_bridgeObject();
          *a1 = v10;
          if (!v18 || v10 < 0 || (v10 & 0x4000000000000000) != 0)
          {
            uint64_t v10 = sub_1DC987164(v10);
            *a1 = v10;
          }
          if ((v13 & 0x8000000000000000) != 0) {
            goto LABEL_56;
          }
          if (v13 >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_57;
          }
          *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 8 * v12) = v15;
          swift_release();
          sub_1DCB87C68();
        }
        if (__OFADD__(v3++, 1)) {
          goto LABEL_51;
        }
        goto LABEL_34;
      }
    }
LABEL_46:
    swift_release();
    return v3;
  }
  swift_release();
  swift_bridgeObjectRelease();
  return v3;
}

unint64_t sub_1DC8F6018(uint64_t *a1, uint64_t a2)
{
  swift_unknownObjectRetain();
  unint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = sub_1DC8BF078(v6, a2);
  if (v2)
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v3 = v7;
    char v9 = v8;
    swift_bridgeObjectRelease();
    if (v9)
    {
      unint64_t v22 = *a1;
      if (v22 >> 62)
      {
        swift_bridgeObjectRetain();
        unint64_t v3 = sub_1DCB88CC8();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        return v3;
      }
      unint64_t v3 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    else
    {
      uint64_t v10 = v3 + 1;
      if (__OFADD__(v3, 1)) {
        goto LABEL_58;
      }
      if ((unint64_t)*a1 >> 62)
      {
LABEL_59:
        swift_bridgeObjectRetain();
        uint64_t v11 = sub_1DCB88CC8();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v11 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (v10 != v11)
      {
        unint64_t v12 = v3 + 5;
        do
        {
          unint64_t v13 = v12 - 4;
          uint64_t v14 = *a1;
          if ((*a1 & 0xC000000000000001) != 0)
          {
            uint64_t v15 = MEMORY[0x1E01A7AE0](v12 - 4);
          }
          else
          {
            if ((v13 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_49:
              __break(1u);
LABEL_50:
              __break(1u);
LABEL_51:
              __break(1u);
LABEL_52:
              __break(1u);
LABEL_53:
              __break(1u);
LABEL_54:
              __break(1u);
LABEL_55:
              __break(1u);
LABEL_56:
              __break(1u);
LABEL_57:
              __break(1u);
LABEL_58:
              __break(1u);
              goto LABEL_59;
            }
            if (v13 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_49;
            }
            uint64_t v15 = *(void *)(v14 + 8 * v12);
            swift_unknownObjectRetain();
          }
          swift_unknownObjectRelease();
          if (v15 != a2)
          {
            if (v13 != v3)
            {
              uint64_t v10 = *a1;
              if ((*a1 & 0xC000000000000001) != 0)
              {
                uint64_t v16 = MEMORY[0x1E01A7AE0](v3, *a1);
                uint64_t v10 = *a1;
              }
              else
              {
                if ((v3 & 0x8000000000000000) != 0) {
                  goto LABEL_52;
                }
                if (v3 >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                  goto LABEL_53;
                }
                uint64_t v16 = *(void *)(v10 + 8 * v3 + 32);
                swift_unknownObjectRetain();
              }
              if ((v10 & 0xC000000000000001) != 0)
              {
                uint64_t v17 = MEMORY[0x1E01A7AE0](v12 - 4, v10);
                uint64_t v10 = *a1;
              }
              else
              {
                if ((v13 & 0x8000000000000000) != 0) {
                  goto LABEL_54;
                }
                if (v13 >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                  goto LABEL_55;
                }
                uint64_t v17 = *(void *)(v10 + 8 * v12);
                swift_unknownObjectRetain();
              }
              int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
              *a1 = v10;
              if (!isUniquelyReferenced_nonNull_bridgeObject || v10 < 0 || (v10 & 0x4000000000000000) != 0)
              {
                uint64_t v10 = sub_1DC987164(v10);
                *a1 = v10;
              }
              *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 8 * v3 + 0x20) = v17;
              swift_unknownObjectRelease();
              sub_1DCB87C68();
              uint64_t v10 = *a1;
              int v19 = swift_isUniquelyReferenced_nonNull_bridgeObject();
              *a1 = v10;
              if (!v19 || v10 < 0 || (v10 & 0x4000000000000000) != 0)
              {
                uint64_t v10 = sub_1DC987164(v10);
                *a1 = v10;
              }
              if ((v13 & 0x8000000000000000) != 0) {
                goto LABEL_56;
              }
              if (v13 >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_57;
              }
              *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 8 * v12) = v16;
              swift_unknownObjectRelease();
              sub_1DCB87C68();
            }
            if (__OFADD__(v3++, 1)) {
              goto LABEL_51;
            }
          }
          uint64_t v10 = v12 - 3;
          if (__OFADD__(v13, 1)) {
            goto LABEL_50;
          }
          if ((unint64_t)*a1 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v21 = sub_1DCB88CC8();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v21 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          ++v12;
        }
        while (v10 != v21);
      }
    }
    swift_unknownObjectRelease();
  }
  return v3;
}

uint64_t sub_1DC8F6358()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1DC8F6394(uint64_t a1)
{
  return sub_1DC8F6410(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1DC8F4A9C);
}

uint64_t sub_1DC8F63B0()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1DC8F63F8(uint64_t a1)
{
  return sub_1DC8F6410(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1DC8F4620);
}

uint64_t sub_1DC8F6410(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t sub_1DC8F6428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v12 = swift_allocObject();

  return sub_1DC8F64B8(a1, a2, a3, a4, a5, a6, v12);
}

uint64_t sub_1DC8F64B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  *(void *)(a7 + 16) = a1;
  *(void *)(a7 + 24) = a2;
  *(void *)(a7 + 32) = a3;
  *(void *)(a7 + 40) = a4;
  *(unsigned char *)(a7 + 48) = a5;
  *(void *)(a7 + 56) = a6;

  return a7;
}

uint64_t sub_1DC8F64F4()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void *sub_1DC8F6530(void *a1)
{
  return sub_1DC8F4528(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1DC8F653C()
{
  swift_release();
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1DC8F657C()
{
  return sub_1DC8F57A8(v0);
}

unint64_t sub_1DC8F6598()
{
  unint64_t result = qword_1EAA9CB80;
  if (!qword_1EAA9CB80)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EAA9CB80);
  }
  return result;
}

unint64_t sub_1DC8F65D8()
{
  return 0xD000000000000017;
}

id sub_1DC8F661C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  return sub_1DCA14B2C(0xD000000000000017, a1, 2, 0, a2, (a3 - 32) | 0x8000000000000000);
}

unint64_t sub_1DC8F6644()
{
  return 0xD000000000000017;
}

uint64_t sub_1DC8F665C()
{
  return swift_beginAccess();
}

uint64_t sub_1DC8F6678()
{
  return swift_beginAccess();
}

uint64_t sub_1DC8F6694()
{
  return v0;
}

id sub_1DC8F66A8()
{
  return [v0 (SEL)(v1 + 3224)];
}

uint64_t sub_1DC8F66C0()
{
  sub_1DCB891B8();

  return sub_1DCB879B8();
}

uint64_t sub_1DC8F6714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  else {
    return sub_1DCB89018();
  }
}

uint64_t sub_1DC8F6730()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC8F6794()
{
  return sub_1DC8F6730();
}

uint64_t sub_1DC8F679C()
{
  return sub_1DC8F66C0();
}

uint64_t sub_1DC8F67A4()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC8F6800(uint64_t *a1, uint64_t *a2)
{
  return sub_1DC8F6714(*a1, a1[1], *a2, a2[1]);
}

uint64_t sub_1DC8F6860()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___SNFileDeletionResult_impl);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1DC8F68F4()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___SNFileDeletionResult_impl + 24);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR___SNFileDeletionResult_impl + 16);
    sub_1DC8F6C58();
    uint64_t v3 = swift_allocError();
    *uint64_t v4 = v2;
    v4[1] = v1;
  }
  else
  {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRetain();
  return v3;
}

id SNFileDeletionResult.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void SNFileDeletionResult.init()()
{
}

id SNFileDeletionResult.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SNFileDeletionResult();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SNFileDeletionResult()
{
  return self;
}

uint64_t method lookup function for SNFileDeletionResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SNFileDeletionResult);
}

uint64_t destroy for FileDeletionResult()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for FileDeletionResult(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for FileDeletionResult(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for FileDeletionResult(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FileDeletionResult(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FileDeletionResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FileDeletionResult()
{
  return &type metadata for FileDeletionResult;
}

unint64_t sub_1DC8F6C58()
{
  unint64_t result = qword_1EAA9F6F0;
  if (!qword_1EAA9F6F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9F6F0);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for FileDeletionResult.DomainError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for FileDeletionResult.DomainError()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for FileDeletionResult.DomainError(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for FileDeletionResult.DomainError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for FileDeletionResult.DomainError()
{
  return &type metadata for FileDeletionResult.DomainError;
}

unint64_t sub_1DC8F6D68()
{
  unint64_t result = qword_1EAA9F6F8;
  if (!qword_1EAA9F6F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAA9F6F8);
  }
  return result;
}

uint64_t sub_1DC8F6DB8()
{
  sub_1DC87E988(qword_1EAA9F700);
  swift_allocObject();
  uint64_t result = sub_1DC9AE954(MEMORY[0x1E4FBC868]);
  qword_1EAAFF870 = result;
  return result;
}

uint64_t sub_1DC8F6E04()
{
  sub_1DC8F6E40(*(void *)(v0 + 16));

  swift_release();
  return v0;
}

uint64_t sub_1DC8F6E40(uint64_t a1)
{
  if (qword_1EAA9C658 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1DCB86FE8();
  sub_1DC89F57C(v2, (uint64_t)qword_1EAAFF810);
  uint64_t v3 = sub_1DCB86FC8();
  os_log_type_t v4 = sub_1DCB88488();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134217984;
    v7[0] = a1;
    sub_1DCB88778();
    _os_log_impl(&dword_1DC873000, v3, v4, "Unregister from System Power Updates, id: %ld", v5, 0xCu);
    MEMORY[0x1E01A99C0](v5, -1, -1);
  }

  if (qword_1EAA9D1B8 != -1) {
    swift_once();
  }
  sub_1DCACBF28(a1, qword_1EAAFF870, (uint64_t)v7);
  return sub_1DC8F7210((uint64_t)v7);
}

uint64_t sub_1DC8F6FA4()
{
  sub_1DC8F6E04();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PowerStateUtils.SystemPowerCallbackRegistration()
{
  return self;
}

ValueMetadata *type metadata accessor for PowerStateUtils()
{
  return &type metadata for PowerStateUtils;
}

void destroy for PowerStateUtils.UnsafeSystemPowerCallbackRegistration(uint64_t a1)
{
  swift_release();
  uint64_t v2 = *(void **)(a1 + 32);
}

uint64_t initializeWithCopy for PowerStateUtils.UnsafeSystemPowerCallbackRegistration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  os_log_type_t v4 = *(void **)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  swift_retain();
  id v5 = v4;
  return a1;
}

uint64_t assignWithCopy for PowerStateUtils.UnsafeSystemPowerCallbackRegistration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  id v5 = *(void **)(a2 + 32);
  unint64_t v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;
  id v7 = v5;

  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

__n128 initializeWithTake for PowerStateUtils.UnsafeSystemPowerCallbackRegistration(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PowerStateUtils.UnsafeSystemPowerCallbackRegistration(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v4 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for PowerStateUtils.UnsafeSystemPowerCallbackRegistration(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 44))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PowerStateUtils.UnsafeSystemPowerCallbackRegistration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 44) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 44) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PowerStateUtils.UnsafeSystemPowerCallbackRegistration()
{
  return &type metadata for PowerStateUtils.UnsafeSystemPowerCallbackRegistration;
}

uint64_t sub_1DC8F7210(uint64_t a1)
{
  return a1;
}

void sub_1DC8F7248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a1 != 1) {
    sub_1DC8F7258(a1, a2, a3, a4, a5);
  }
}

void sub_1DC8F7258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a1)
  {
    swift_release();
  }
}

uint64_t type metadata accessor for AOPUnsafeUnitValueStatusErrorContinuationView()
{
  return self;
}

uint64_t sub_1DC8F72C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 8);
}

uint64_t sub_1DC8F72C8()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_1DC8F7344(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v7 > 0x18)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v8 + 16) & ~v8));
    swift_retain();
  }
  else if (_s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwet_0((uint64_t)a2, 1, v5))
  {
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwst_0((uint64_t)a1, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_1DC8F7460(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwet_0(a1, 1, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v5(a1, v3);
  }
  return result;
}

void *sub_1DC8F74DC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  int v6 = _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwet_0((uint64_t)a2, 1, v5);
  uint64_t v7 = *(void *)(v5 - 8);
  if (v6)
  {
    if (*(_DWORD *)(v7 + 84)) {
      size_t v8 = *(void *)(v7 + 64);
    }
    else {
      size_t v8 = *(void *)(v7 + 64) + 1;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v5);
    _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwst_0((uint64_t)a1, 0, 1, v5);
  }
  return a1;
}

void *sub_1DC8F75A0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  int v6 = _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwet_0((uint64_t)a1, 1, v5);
  int v7 = _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwet_0((uint64_t)a2, 1, v5);
  uint64_t v8 = *(void *)(v5 - 8);
  if (v6)
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v5);
      _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwst_0((uint64_t)a1, 0, 1, v5);
      return a1;
    }
    int v9 = *(_DWORD *)(v8 + 84);
    size_t v10 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 24))(a1, a2, v5);
      return a1;
    }
    uint64_t v11 = v8 + 8;
    (*(void (**)(void *, uint64_t))(v8 + 8))(a1, v5);
    int v9 = *(_DWORD *)(v11 + 76);
    size_t v10 = *(void *)(v11 + 56);
  }
  if (v9) {
    size_t v12 = v10;
  }
  else {
    size_t v12 = v10 + 1;
  }
  memcpy(a1, a2, v12);
  return a1;
}

void *sub_1DC8F76C8(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  int v6 = _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwet_0((uint64_t)a2, 1, v5);
  uint64_t v7 = *(void *)(v5 - 8);
  if (v6)
  {
    if (*(_DWORD *)(v7 + 84)) {
      size_t v8 = *(void *)(v7 + 64);
    }
    else {
      size_t v8 = *(void *)(v7 + 64) + 1;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v5);
    _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwst_0((uint64_t)a1, 0, 1, v5);
  }
  return a1;
}

void *sub_1DC8F778C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  int v6 = _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwet_0((uint64_t)a1, 1, v5);
  int v7 = _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwet_0((uint64_t)a2, 1, v5);
  uint64_t v8 = *(void *)(v5 - 8);
  if (v6)
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v5);
      _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwst_0((uint64_t)a1, 0, 1, v5);
      return a1;
    }
    int v9 = *(_DWORD *)(v8 + 84);
    size_t v10 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(a1, a2, v5);
      return a1;
    }
    uint64_t v11 = v8 + 8;
    (*(void (**)(void *, uint64_t))(v8 + 8))(a1, v5);
    int v9 = *(_DWORD *)(v11 + 76);
    size_t v10 = *(void *)(v11 + 56);
  }
  if (v9) {
    size_t v12 = v10;
  }
  else {
    size_t v12 = v10 + 1;
  }
  memcpy(a1, a2, v12);
  return a1;
}

uint64_t sub_1DC8F78B4(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(unsigned int *)(*(void *)(v4 - 8) + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(v4 - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  unsigned int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    if (v7 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_23;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v7);
        if (!*((unsigned char *)a1 + v7)) {
          goto LABEL_23;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v7 > 3) {
          int v12 = 0;
        }
        if (v7)
        {
          if (v7 > 3) {
            LODWORD(v7) = 4;
          }
          switch((int)v7)
          {
            case 2:
              LODWORD(v7) = *a1;
              break;
            case 3:
              LODWORD(v7) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              LODWORD(v7) = *(_DWORD *)a1;
              break;
            default:
              LODWORD(v7) = *(unsigned __int8 *)a1;
              break;
          }
        }
        return v6 + (v7 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v7);
      if (*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_15;
      }
    }
  }
LABEL_23:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v14 = _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwet_0((uint64_t)a1, v5, v4);
  if (v14 >= 2) {
    return v14 - 1;
  }
  else {
    return 0;
  }
}

void sub_1DC8F7A38(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v9) {
    unsigned int v10 = v9 - 1;
  }
  else {
    unsigned int v10 = 0;
  }
  if (v9) {
    size_t v11 = *(void *)(v8 + 64);
  }
  else {
    size_t v11 = *(void *)(v8 + 64) + 1;
  }
  char v12 = 8 * v11;
  BOOL v13 = a3 >= v10;
  unsigned int v14 = a3 - v10;
  if (v14 != 0 && v13)
  {
    if (v11 <= 3)
    {
      unsigned int v15 = ((v14 + ~(-1 << v12)) >> v12) + 1;
      if (HIWORD(v15))
      {
        int v6 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v6 = 2;
      }
      else
      {
        int v6 = v15 > 1;
      }
    }
    else
    {
      int v6 = 1;
    }
  }
  if (v10 < a2)
  {
    unsigned int v16 = ~v10 + a2;
    if (v11 < 4)
    {
      int v17 = (v16 >> v12) + 1;
      if (v11)
      {
        int v18 = v16 & ~(-1 << v12);
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v16;
      int v17 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v11] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v11] = v17;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v11] = v17;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_28;
    case 2:
      *(_WORD *)&a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_28;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x1DC8F7C58);
    case 4:
      *(_DWORD *)&a1[v11] = 0;
      goto LABEL_27;
    default:
LABEL_27:
      if (a2)
      {
LABEL_28:
        if (v9 >= 2)
        {
          uint64_t v19 = a2 + 1;
          _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwst_0((uint64_t)a1, v19, v9, v7);
        }
      }
      return;
  }
}

uint64_t sub_1DC8F7C80(uint64_t a1, uint64_t a2)
{
  return _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwet_0(a1, 1, *(void *)(a2 + 16));
}

uint64_t sub_1DC8F7C8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwst_0(a1, a2, 1, *(void *)(a3 + 16));
}

uint64_t type metadata accessor for ReservableSlot()
{
  return sub_1DC8866E4();
}

uint64_t sub_1DC8F7CB0()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  sub_1DCB87778();
  sub_1DCB87D78();
  sub_1DCB87B48();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1DC8F7D98()
{
  return sub_1DCB882D8();
}

uint64_t sub_1DC8F7E90()
{
  return sub_1DC8F7D98();
}

uint64_t sub_1DC8F7EB0(uint64_t a1, int64_t a2, int64_t a3)
{
  if ((unsigned __int128)(a2 * (__int128)a3) >> 64 == (a2 * a3) >> 63)
  {
    uint64_t v5 = a1;
    if (*(void *)(a1 + 16) != a2 * a3)
    {
      sub_1DC88CCDC();
      swift_allocError();
      *uint64_t v7 = 10;
      swift_willThrow();
      return v6;
    }
    vDSP_Length v4 = a3;
    vDSP_Length v3 = a2;
    swift_bridgeObjectRetain();
    uint64_t v6 = v5;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      if ((v4 & 0x8000000000000000) != 0) {
        goto LABEL_11;
      }
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  sub_1DC987124();
  uint64_t v6 = v9;
  if ((v4 & 0x8000000000000000) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v3 & 0x8000000000000000) == 0)
  {
    vDSP_mtrans((const float *)(v5 + 32), 1, (float *)(v6 + 32), 1, v4, v3);
    return v6;
  }
LABEL_11:
  uint64_t result = sub_1DCB88C58();
  __break(1u);
  return result;
}

unsigned char *storeEnumTagSinglePayload for CollectionUtils.DomainError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1DC8F80ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CollectionUtils.DomainError()
{
  return &type metadata for CollectionUtils.DomainError;
}

unint64_t sub_1DC8F80E8()
{
  unint64_t result = qword_1EAA9F788[0];
  if (!qword_1EAA9F788[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EAA9F788);
  }
  return result;
}

uint64_t RawRepresentableWrapper.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_1DC89D4E0();
  uint64_t v8 = v7;
  sub_1DC88D668();
  MEMORY[0x1F4188790](v9);
  size_t v11 = (char *)&v16 - v10;
  sub_1DCB88718();
  sub_1DC88D668();
  MEMORY[0x1F4188790](v12);
  unsigned int v14 = (char *)&v16 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v3, AssociatedTypeWitness);
  sub_1DCB87BA8();
  uint64_t result = _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwet_0((uint64_t)v14, 1, v5);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v5 - 8) + 32))(a2, v14, v5);
  }
  __break(1u);
  return result;
}

uint64_t RawRepresentableWrapper.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_1DC89D4E0();
  uint64_t v8 = v7;
  sub_1DC88D668();
  MEMORY[0x1F4188790](v9);
  size_t v11 = (char *)&v13 - v10;
  sub_1DCB87B98();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a3, v11, AssociatedTypeWitness);
}

uint64_t RawRepresentableWrapper.rawValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v4(a1, v1, AssociatedTypeWitness);
}

uint64_t sub_1DC8F8418(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x65756C6156776172 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_1DCB89018();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_1DC8F84A0()
{
  return 0x65756C6156776172;
}

uint64_t sub_1DC8F84B8()
{
  return _s13SoundAnalysis17_SNClassificationC20supportsSecureCodingSbvgZ_0();
}

uint64_t sub_1DC8F84C0()
{
  return sub_1DC8882A8();
}

uint64_t sub_1DC8F84CC()
{
  return sub_1DC888280();
}

uint64_t sub_1DC8F84D8()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC8F851C()
{
  return sub_1DC8F84A0();
}

uint64_t sub_1DC8F8528@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1DC8F8418(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1DC8F855C()
{
  return sub_1DC888648();
}

uint64_t sub_1DC8F8580@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = _s13SoundAnalysis17_SNClassificationC20supportsSecureCodingSbvgZ_0();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1DC8F85B4(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t sub_1DC8F8608(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t static RawRepresentableWrapper<>.== infix(_:_:)()
{
  return sub_1DCB878C8() & 1;
}

uint64_t sub_1DC8F86C8()
{
  return static RawRepresentableWrapper<>.== infix(_:_:)();
}

uint64_t RawRepresentableWrapper<>.hash(into:)()
{
  swift_getAssociatedTypeWitness();

  return sub_1DCB87818();
}

uint64_t RawRepresentableWrapper<>.hashValue.getter()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC8F8798()
{
  return RawRepresentableWrapper<>.hashValue.getter();
}

uint64_t sub_1DC8F87A0()
{
  return RawRepresentableWrapper<>.hash(into:)();
}

uint64_t sub_1DC8F87A8()
{
  return sub_1DCB891F8();
}

uint64_t RawRepresentableWrapper<>.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  _OWORD v11[3] = a3;
  v11[1] = *(void *)(a2 + 16);
  type metadata accessor for RawRepresentableWrapper.CodingKeys();
  swift_getWitnessTable();
  uint64_t v4 = sub_1DCB88F78();
  sub_1DC89D4E0();
  uint64_t v6 = v5;
  sub_1DC88D668();
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v11 - v8;
  sub_1DC881A8C(a1, a1[3]);
  sub_1DCB892B8();
  swift_getAssociatedTypeWitness();
  sub_1DCB88F18();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v4);
}

uint64_t type metadata accessor for RawRepresentableWrapper.CodingKeys()
{
  return sub_1DC8866E4();
}

uint64_t sub_1DC8F8978(void *a1, uint64_t a2, uint64_t a3)
{
  return RawRepresentableWrapper<>.encode(to:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t RawRepresentableWrapper<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v22 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_1DC89D4E0();
  uint64_t v25 = v4;
  sub_1DC88D668();
  MEMORY[0x1F4188790](v5);
  id v28 = (char *)&v21 - v6;
  type metadata accessor for RawRepresentableWrapper.CodingKeys();
  swift_getWitnessTable();
  sub_1DCB88E78();
  sub_1DC89D4E0();
  uint64_t v23 = v8;
  uint64_t v24 = v7;
  sub_1DC88D668();
  MEMORY[0x1F4188790](v9);
  uint64_t v10 = type metadata accessor for RawRepresentableWrapper();
  sub_1DC89D4E0();
  uint64_t v21 = v11;
  sub_1DC88D668();
  MEMORY[0x1F4188790](v12);
  unsigned int v14 = (char *)&v21 - v13;
  sub_1DC881A8C(a1, a1[3]);
  uint64_t v15 = v29;
  sub_1DCB89298();
  if (!v15)
  {
    uint64_t v29 = v10;
    uint64_t v16 = v25;
    uint64_t v17 = AssociatedTypeWitness;
    sub_1DCB88DF8();
    uint64_t v18 = sub_1DC8F9554();
    v19(v18);
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v14, v28, v17);
    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v22, v14, v29);
  }
  return sub_1DC8818D0((uint64_t)a1);
}

uint64_t type metadata accessor for RawRepresentableWrapper()
{
  return sub_1DC8866E4();
}

uint64_t sub_1DC8F8C00()
{
  return swift_getWitnessTable();
}

uint64_t sub_1DC8F8C48@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return RawRepresentableWrapper<>.init(from:)(a1, *(void *)(a2 - 8), a3);
}

uint64_t sub_1DC8F8C6C()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1DC8F8D0C(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7
    && *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1DC8F8DE8(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  char v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

uint64_t sub_1DC8F8E64(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1DC8F8EDC(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1DC8F8F54(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1DC8F8FCC(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1DC8F9044(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(unsigned int *)(*(void *)(AssociatedTypeWitness - 8) + 84);
  uint64_t v6 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v7 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v9 = ((a2 - v5 + ~(-1 << v7)) >> v7) + 1;
    if (HIWORD(v9))
    {
      int v8 = *(_DWORD *)((char *)a1 + v6);
      if (!v8) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 < 2)
    {
LABEL_19:
      if (v5)
      {
        return _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwet_0((uint64_t)a1, v5, AssociatedTypeWitness);
      }
      return 0;
    }
  }
  int v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v10 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v10 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v10) + 1;
}

void sub_1DC8F91E4(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(unsigned int *)(*(void *)(AssociatedTypeWitness - 8) + 84);
  size_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  char v9 = 8 * v8;
  if (a3 <= v7)
  {
    int v10 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v13 = ((a3 - v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v13))
    {
      int v10 = 4;
    }
    else if (v13 >= 0x100)
    {
      int v10 = 2;
    }
    else
    {
      int v10 = v13 > 1;
    }
  }
  else
  {
    int v10 = 1;
  }
  if (v7 < a2)
  {
    unsigned int v11 = ~v7 + a2;
    if (v8 < 4)
    {
      int v12 = (v11 >> v9) + 1;
      if (v8)
      {
        int v14 = v11 & ~(-1 << v9);
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v14;
          a1[2] = BYTE2(v14);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v14;
        }
        else
        {
          *a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v11;
      int v12 = 1;
    }
    switch(v10)
    {
      case 1:
        a1[v8] = v12;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v12;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v12;
        return;
      default:
        return;
    }
  }
  switch(v10)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1DC8F940CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        _s13SoundAnalysis11SNAOPReportV14SuccessPayloadOwst_0((uint64_t)a1, a2, v7, AssociatedTypeWitness);
      }
      return;
  }
}

uint64_t sub_1DC8F9434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 16);
}

unsigned char *sub_1DC8F943C(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1DC8F94D8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1DC8F9500()
{
  return swift_getWitnessTable();
}

uint64_t sub_1DC8F951C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1DC8F9538()
{
  return swift_getWitnessTable();
}

uint64_t sub_1DC8F9554()
{
  return v0;
}

uint64_t sub_1DC8F956C()
{
  sub_1DCB891E8();
  sub_1DCB891D8();
  sub_1DCB891D8();
  sub_1DCB891E8();
  sub_1DCB891E8();
  sub_1DCB891D8();
  sub_1DCB891D8();
  sub_1DCB891E8();
  sub_1DCB891E8();
  swift_bridgeObjectRetain();
  sub_1DCB879B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1DC8F9648(double *a1, double *a2)
{
  double v2 = *a1;
  uint64_t v3 = *((void *)a1 + 5);
  double v4 = a1[6];
  uint64_t v5 = *((void *)a1 + 7);
  uint64_t v6 = *((void *)a1 + 8);
  double v7 = *a2;
  double v8 = a2[6];
  uint64_t v9 = *((void *)a2 + 7);
  uint64_t v10 = *((void *)a2 + 8);
  uint64_t v17 = *((void *)a2 + 5);
  *(double *)uint64_t v18 = v2;
  *(double *)&v18[1] = a1[1];
  long long v19 = *((_OWORD *)a1 + 1);
  uint64_t v20 = *((void *)a1 + 4);
  uint64_t v21 = v3;
  *(double *)int v14 = v7;
  *(double *)&v14[1] = a2[1];
  long long v15 = *((_OWORD *)a2 + 1);
  uint64_t v16 = *((void *)a2 + 4);
  BOOL v11 = static TimeRange.== infix(_:_:)((uint64_t)v18, (uint64_t)v14);
  uint64_t result = 0;
  if (v11 && v4 == v8)
  {
    if (v5 == v9 && v6 == v10)
    {
      return 1;
    }
    else
    {
      sub_1DC8FB374();
      return sub_1DCB89018();
    }
  }
  return result;
}

uint64_t sub_1DC8F9734(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x676E6152656D6974 && a2 == 0xE900000000000065;
  if (v2 || (sub_1DCB89018() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6E656469666E6F63 && a2 == 0xEA00000000006563;
    if (v6 || (sub_1DCB89018() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 1701667182 && a2 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = sub_1DCB89018();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_1DC8F988C(char a1)
{
  if (!a1) {
    return 0x676E6152656D6974;
  }
  if (a1 == 1) {
    return 0x6E656469666E6F63;
  }
  return 1701667182;
}

uint64_t sub_1DC8F98E4(void *a1)
{
  BOOL v2 = v1;
  uint64_t v4 = sub_1DC87E988((uint64_t *)&unk_1EAA9F8B8);
  sub_1DC89D4E0();
  uint64_t v19 = v5;
  MEMORY[0x1F4188790](v6);
  char v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  uint64_t v11 = v2[2];
  uint64_t v10 = v2[3];
  uint64_t v12 = v2[5];
  v16[1] = v2[7];
  uint64_t v17 = v12;
  v16[0] = v2[8];
  sub_1DC881A8C(a1, a1[3]);
  sub_1DC8FB10C();
  sub_1DCB892B8();
  uint64_t v21 = v9;
  uint64_t v22 = v2[1];
  uint64_t v23 = v11;
  uint64_t v24 = v10;
  uint64_t v25 = v2[4];
  uint64_t v26 = v17;
  char v20 = 0;
  sub_1DC89C64C();
  uint64_t v13 = v18;
  sub_1DCB88F18();
  if (v13) {
    return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v8, v4);
  }
  uint64_t v15 = v19;
  LOBYTE(v21) = 1;
  sub_1DCB88EE8();
  LOBYTE(v21) = 2;
  sub_1DCB88EC8();
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v8, v4);
}

uint64_t sub_1DC8F9AD0()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC8F9BD4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  sub_1DC87E988(&qword_1EAA9F8A0);
  sub_1DC89D4E0();
  MEMORY[0x1F4188790](v5);
  sub_1DC881A8C(a1, a1[3]);
  sub_1DC8FB10C();
  sub_1DCB89298();
  if (!v2)
  {
    sub_1DC89C600();
    sub_1DCB88DF8();
    sub_1DC8FB38C(1);
    sub_1DCB88DC8();
    uint64_t v7 = v6;
    sub_1DC8FB38C(2);
    uint64_t v9 = sub_1DCB88DA8();
    uint64_t v11 = v10;
    uint64_t v12 = sub_1DC8FB3D4();
    v13(v12);
    *a2 = v14;
    a2[1] = v15;
    a2[2] = v16;
    a2[3] = v17;
    a2[4] = v18;
    a2[5] = v19;
    a2[6] = v7;
    a2[7] = v9;
    a2[8] = v11;
  }
  return sub_1DC8818D0((uint64_t)a1);
}

uint64_t sub_1DC8F9DA8()
{
  return sub_1DC8F988C(*v0);
}

uint64_t sub_1DC8F9DB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1DC8F9734(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1DC8F9DD8(uint64_t a1)
{
  unint64_t v2 = sub_1DC8FB10C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1DC8F9E14(uint64_t a1)
{
  unint64_t v2 = sub_1DC8FB10C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1DC8F9E58()
{
  return sub_1DCB891F8();
}

uint64_t sub_1DC8F9F58@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1DC8F9BD4(a1, a2);
}

uint64_t sub_1DC8F9F70(void *a1)
{
  return sub_1DC8F98E4(a1);
}

double SNSoundActionsResult.timeRange.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1 + OBJC_IVAR___SNSoundActionsResult_impl;
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR___SNSoundActionsResult_impl + 40);
  *(void *)a1 = *(void *)(v1 + OBJC_IVAR___SNSoundActionsResult_impl);
  *(void *)(a1 + 8) = *(void *)(v2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v2 + 16);
  double result = *(double *)(v2 + 32);
  *(double *)(a1 + 32) = result;
  *(void *)(a1 + 40) = v3;
  return result;
}

double SNSoundActionsResult.timeRange.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = v1 + OBJC_IVAR___SNSoundActionsResult_impl;
  *(void *)uint64_t v3 = *(void *)a1;
  *(void *)(v3 + 8) = *(void *)(a1 + 8);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(a1 + 16);
  double result = *(double *)(a1 + 32);
  *(double *)(v3 + 32) = result;
  *(void *)(v3 + 40) = v2;
  return result;
}

double (*SNSoundActionsResult.timeRange.modify(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  SNSoundActionsResult.timeRange.getter((uint64_t)v3);
  return sub_1DC8FA110;
}

double sub_1DC8FA110(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = v1[5];
  uint64_t v3 = v1[6] + OBJC_IVAR___SNSoundActionsResult_impl;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[4];
  long long v6 = *((_OWORD *)v1 + 1);
  *(void *)uint64_t v3 = *v1;
  *(void *)(v3 + 8) = v4;
  *(_OWORD *)(v3 + 16) = v6;
  *(void *)(v3 + 32) = v5;
  *(void *)(v3 + 40) = v2;
  free(v1);
  return result;
}

double SNSoundActionsResult.confidence.getter()
{
  return *(double *)(v0 + OBJC_IVAR___SNSoundActionsResult_impl + 48);
}

void SNSoundActionsResult.confidence.setter(double a1)
{
  *(double *)(v1 + OBJC_IVAR___SNSoundActionsResult_impl + 48) = a1;
}