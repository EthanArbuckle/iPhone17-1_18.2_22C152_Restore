uint64_t glpLLVMCGVariableDeclarationGroup(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  uint64_t Declaration;

  result = glpVariableDeclarationGroupNodeGetDeclarationCount(a2);
  if (result)
  {
    v5 = 0;
    do
    {
      Declaration = glpVariableDeclarationGroupNodeGetDeclaration(a2, v5);
      glpLLVMCGNode(a1, Declaration, 1);
      ++v5;
      result = glpVariableDeclarationGroupNodeGetDeclarationCount(a2);
    }
    while (v5 < result);
  }
  return result;
}

uint64_t glpLLVMCGFunctionDefinition(uint64_t a1, uint64_t a2)
{
  v131[1] = *MEMORY[0x263EF8340];
  uint64_t Prototype = glpFunctionDefinitionNodeGetPrototype(a2);
  uint64_t Extra = glpFunctionPrototypeNodeGetExtra(Prototype);
  if ((*(unsigned char *)(Extra + 9) & 0x20) != 0) {
    return 0;
  }
  uint64_t v6 = Extra;
  uint64_t v7 = glpLLVMCGNode(a1, Prototype, 0);
  *(void *)(v6 + 144) = v7;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 160) = v7;
  *(void *)(a1 + 336) = **(void **)(v6 + 152);
  uint64_t v8 = *(unsigned int *)(a1 + 260);
  int v9 = v8 + 1;
  int v10 = *(_DWORD *)(a1 + 256);
  if ((int)v8 + 1 <= v10)
  {
    v13 = *(char **)(a1 + 264);
    int v14 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v10 <= 1) {
      int v10 = 1;
    }
    int v11 = 2 * v10;
    if (v11 <= v9) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = v11;
    }
    v13 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v12, "Vector Storage (uint8_t, growth)");
    memcpy(v13, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v12;
    *(void *)(a1 + 264) = v13;
    int v14 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v13[v8 + 1], &v13[v8], (v14 - v8));
  *(unsigned char *)(*(void *)(a1 + 264) + v8) = 18;
  int v15 = *(_DWORD *)(a1 + 260);
  unsigned int v16 = v15 + 1;
  *(_DWORD *)(a1 + 260) = v15 + 1;
  ++*(_DWORD *)(a1 + 296);
  int v17 = (*(unsigned __int8 *)(a1 + 832) >> 5) & 1;
  unsigned int v18 = v15 + 2;
  int v19 = *(_DWORD *)(a1 + 256);
  if (v18 <= v19)
  {
    v22 = *(char **)(a1 + 264);
    unsigned int v23 = v16;
  }
  else
  {
    if (v19 <= 1) {
      int v19 = 1;
    }
    int v20 = 2 * v19;
    if (v20 <= (int)v18) {
      uint64_t v21 = v18;
    }
    else {
      uint64_t v21 = v20;
    }
    v22 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v21, "Vector Storage (uint8_t, growth)");
    memcpy(v22, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v21;
    *(void *)(a1 + 264) = v22;
    unsigned int v23 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v22[v16 + 1], &v22[v16], v23 - v16);
  *(unsigned char *)(*(void *)(a1 + 264) + v16) = v17;
  ++*(_DWORD *)(a1 + 260);
  *(void *)(a1 + 16) = 1;
  uint64_t Body = glpFunctionDefinitionNodeGetBody(a2);
  uint64_t v123 = glpLLVMAppendBasicBlock(a1, *(void *)(a1 + 160), "allocaBlock");
  *(void *)(a1 + 176) = v123;
  uint64_t v122 = glpLLVMAppendBasicBlock(a1, *(void *)(a1 + 160), "globalBlock");
  *(void *)(a1 + 184) = v122;
  uint64_t v121 = glpLLVMAppendBasicBlock(a1, *(void *)(a1 + 160), "block");
  glpLLVMPositionBuilderAtEnd(a1, v121);
  if (*(void *)(a1 + 24))
  {
    Name = (const char *)glpFunctionPrototypeNodeGetName(Prototype);
    v26 = strndup(Name, v25);
    uint64_t v27 = *(unsigned int *)(a1 + 260);
    int v28 = v27 + 1;
    int v29 = *(_DWORD *)(a1 + 256);
    if ((int)v27 + 1 <= v29)
    {
      v32 = *(char **)(a1 + 264);
      int v33 = *(_DWORD *)(a1 + 260);
    }
    else
    {
      if (v29 <= 1) {
        int v29 = 1;
      }
      int v30 = 2 * v29;
      if (v30 <= v28) {
        uint64_t v31 = v28;
      }
      else {
        uint64_t v31 = v30;
      }
      v32 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v31, "Vector Storage (uint8_t, growth)");
      memcpy(v32, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
      (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
      *(_DWORD *)(a1 + 256) = v31;
      *(void *)(a1 + 264) = v32;
      int v33 = *(_DWORD *)(a1 + 260);
    }
    memmove(&v32[v27 + 1], &v32[v27], (v33 - v27));
    *(unsigned char *)(*(void *)(a1 + 264) + v27) = 103;
    ++*(_DWORD *)(a1 + 260);
    ++*(_DWORD *)(a1 + 296);
    glpSerializeLLVMValue(a1, v7);
    size_t v34 = strlen(v26) + 1;
    uint64_t v35 = *(unsigned int *)(a1 + 260);
    int v36 = v34 + v35;
    int v37 = *(_DWORD *)(a1 + 256);
    if ((int)v34 + (int)v35 <= v37)
    {
      v40 = *(char **)(a1 + 264);
      int v41 = *(_DWORD *)(a1 + 260);
    }
    else
    {
      if (v37 <= 1) {
        int v37 = 1;
      }
      int v38 = 2 * v37;
      if (v38 <= v36) {
        uint64_t v39 = v36;
      }
      else {
        uint64_t v39 = v38;
      }
      v40 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v39, "Vector Storage (uint8_t, growth)");
      memcpy(v40, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
      (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
      *(_DWORD *)(a1 + 256) = v39;
      *(void *)(a1 + 264) = v40;
      int v41 = *(_DWORD *)(a1 + 260);
    }
    memmove(&v40[v35 + 1], &v40[v35], (v41 - v35));
    memcpy((void *)(*(void *)(a1 + 264) + v35), v26, v34);
    *(_DWORD *)(a1 + 260) += v34;
    glpLLVMAddLineInformation(a1, a2);
    free(v26);
  }
  v42 = (const char *)glpFunctionPrototypeNodeGetName(Prototype);
  *(_WORD *)(a1 + 324) = glpStringsEqual(v42, v43, "main", 0x83863A00000004);
  *(void *)(a1 + 344) = glpMakePointerHash(&GLP_MALLOC_ALLOCATOR);
  *(void *)(a1 + 352) = glpMakePointerHash(&GLP_MALLOC_ALLOCATOR);
  if (*(_WORD *)(a1 + 324))
  {
    uint64_t v44 = *(unsigned int *)(a1 + 676);
    if ((int)v44 >= 1)
    {
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      uint64_t v47 = 8 * v44;
      uint64_t v124 = 0;
      uint64_t v125 = 8 * v44;
      while (1)
      {
        unint64_t v48 = *(void *)(*(void *)(a1 + 680) + v45);
        int v49 = *(_DWORD *)(a1 + 320);
        if ((v49 - 1) >= 3)
        {
          if (v49 == 4)
          {
            v69 = glpLayoutObjectFind(*(uint64_t **)(v48 + 8), 34);
            uint64_t v70 = glpPrecisionIndexFromSAFlags(*(void *)(v48 + 48));
            uint64_t v71 = glpTypeToLLVMType((void *)a1, *(unsigned int **)v48, v70, (void *)v48);
            uint64_t v72 = 0;
            switch(*((_DWORD *)v69 + 4))
            {
              case 1:
                v94 = glpLayoutObjectFind(*(uint64_t **)(v48 + 8), 20);
                uint64_t v72 = glpLLVMGetParam(a1, *(void *)(a1 + 160), v46);
                if (!v94 || (*(_WORD *)(a1 + 832) & 1) == 0) {
                  goto LABEL_57;
                }
                uint64_t v95 = glpLLVMConstRealCache(a1, *(void *)(a1 + 72), 0.0);
                *(void *)__dst = glpLLVMConstRealCache(a1, *(void *)(a1 + 72), 0.5);
                uint64_t v128 = *(void *)__dst;
                uint64_t v129 = v95;
                uint64_t v130 = v95;
                uint64_t v96 = glpLLVMConstVectorCache(a1, __dst, 4);
                uint64_t v73 = glpLLVMBinaryOperation(a1, 56, v72, v96, "center");
                goto LABEL_56;
              case 2:
              case 3:
              case 0xB:
              case 0xC:
              case 0xE:
              case 0x10:
              case 0x16:
              case 0x17:
              case 0x1B:
                goto LABEL_55;
              case 0x18:
                v131[0] = glpLLVMGetParam(a1, *(void *)(a1 + 160), *(unsigned int *)(a1 + 800));
                uint64_t v97 = glpLLVMVectorType(a1, *(void *)(a1 + 496), 2);
                *(void *)__dst = 0x300000001;
                uint64_t v72 = glpLLVMCallFunction(a1, "air.get_sample_position.v2f32", v97, v131, 1, (unsigned int *)__dst, 2);
                break;
              case 0x1C:
                if ((*(unsigned char *)(*(void *)(v48 + 144) + 32) & 1) == 0)
                {
                  uint64_t v98 = *(unsigned int *)(a1 + 644);
                  int v99 = *(_DWORD *)(a1 + 640);
                  if ((int)v98 + 1 <= v99)
                  {
                    v104 = *(char **)(a1 + 648);
                    int v105 = *(_DWORD *)(a1 + 644);
                  }
                  else
                  {
                    if (v99 <= 1) {
                      int v99 = 1;
                    }
                    int v100 = 2 * v99;
                    uint64_t v101 = v7;
                    if (v100 <= (int)v98 + 1) {
                      unsigned int v102 = v98 + 1;
                    }
                    else {
                      unsigned int v102 = v100;
                    }
                    v103 = *(void **)(a1 + 152);
                    v104 = (char *)((uint64_t (*)(void, uint64_t, const char *))v103[1])(*v103, 8 * v102, "Vector Storage (GLPVariableObject *, growth)");
                    memcpy(v104, *(const void **)(a1 + 648), 8 * *(unsigned int *)(a1 + 644));
                    ((void (*)(void, void))v103[3])(*v103, *(void *)(a1 + 648));
                    *(_DWORD *)(a1 + 640) = v102;
                    uint64_t v7 = v101;
                    uint64_t v47 = v125;
                    *(void *)(a1 + 648) = v104;
                    int v105 = *(_DWORD *)(a1 + 644);
                  }
                  memmove(&v104[8 * v98 + 8], &v104[8 * v98], 8 * (v105 - v98));
                  *(void *)(*(void *)(a1 + 648) + 8 * v98) = v48;
                  ++*(_DWORD *)(a1 + 644);
                  *(_DWORD *)(*(void *)(v48 + 144) + 32) |= 1u;
                }
LABEL_55:
                uint64_t v73 = glpLLVMGetParam(a1, *(void *)(a1 + 160), v46);
LABEL_56:
                uint64_t v72 = v73;
LABEL_57:
                uint64_t v46 = (v46 + 1);
                break;
              default:
                break;
            }
            uint64_t v74 = glpLLVMGetVariablePointer(a1, v48);
            uint64_t v75 = glpLLVMPointerType(a1, v71, 0);
            uint64_t v56 = glpLLVMCastOperation(a1, 86, v74, v75, "ptr");
            uint64_t v57 = a1;
            uint64_t v58 = v72;
            goto LABEL_59;
          }
          if (!v49)
          {
            v59 = glpLayoutObjectFind(*(uint64_t **)(v48 + 8), 34);
            uint64_t v60 = glpPrecisionIndexFromSAFlags(*(void *)(v48 + 48));
            if ((*(unsigned char *)(*(void *)(v48 + 144) + 32) & 1) == 0)
            {
              uint64_t v61 = *(unsigned int *)(a1 + 644);
              int v62 = *(_DWORD *)(a1 + 640);
              if ((int)v61 + 1 <= v62)
              {
                v67 = *(char **)(a1 + 648);
                int v68 = *(_DWORD *)(a1 + 644);
              }
              else
              {
                if (v62 <= 1) {
                  int v62 = 1;
                }
                int v63 = 2 * v62;
                v119 = v59;
                uint64_t v64 = v7;
                if (v63 <= (int)v61 + 1) {
                  unsigned int v65 = v61 + 1;
                }
                else {
                  unsigned int v65 = v63;
                }
                v66 = *(void **)(a1 + 152);
                v67 = (char *)((uint64_t (*)(void, uint64_t, const char *))v66[1])(*v66, 8 * v65, "Vector Storage (GLPVariableObject *, growth)");
                memcpy(v67, *(const void **)(a1 + 648), 8 * *(unsigned int *)(a1 + 644));
                ((void (*)(void, void))v66[3])(*v66, *(void *)(a1 + 648));
                *(_DWORD *)(a1 + 640) = v65;
                uint64_t v7 = v64;
                v59 = v119;
                *(void *)(a1 + 648) = v67;
                int v68 = *(_DWORD *)(a1 + 644);
              }
              memmove(&v67[8 * v61 + 8], &v67[8 * v61], 8 * (v68 - v61));
              *(void *)(*(void *)(a1 + 648) + 8 * v61) = v48;
              ++*(_DWORD *)(a1 + 644);
              *(_DWORD *)(*(void *)(v48 + 144) + 32) |= 1u;
              uint64_t v47 = v125;
            }
            uint64_t v126 = 0;
            uint64_t v76 = glpTypeToLLVMType((void *)a1, *(unsigned int **)v48, v60, (void *)v48);
            int v77 = *((_DWORD *)v59 + 4);
            switch(v77)
            {
              case 17:
                if ((*(_WORD *)(a1 + 832) & 1) == 0)
                {
                  uint64_t v83 = v124;
                  if (!v124) {
                    strncpy(__dst, "air.get_vertex_id.i32", 0x200uLL);
                  }
                  uint64_t v84 = 0;
                  uint64_t v85 = *(void *)(a1 + 40);
                  if (!v124)
                  {
LABEL_79:
                    v131[0] = 0x400000001;
                    uint64_t v87 = glpLLVMCallFunction(a1, __dst, v85, &v126, v84, (unsigned int *)v131, 2);
                    uint64_t v83 = v87;
                    int v86 = *((_DWORD *)v59 + 4);
                    uint64_t v88 = v124;
                    if (v86 == 17) {
                      uint64_t v88 = v87;
                    }
                    uint64_t v124 = v88;
                    goto LABEL_82;
                  }
LABEL_78:
                  int v86 = *((_DWORD *)v59 + 4);
LABEL_82:
                  if ((v86 - 17) <= 1 && v60 != 0 && v60 != 3) {
                    uint64_t v83 = glpLLVMCastOperation(a1, 74, v83, v76, "vid");
                  }
                  uint64_t v91 = glpLLVMGetVariablePointer(a1, v48);
                  uint64_t v92 = glpLLVMPointerType(a1, v76, 0);
                  uint64_t v93 = glpLLVMCastOperation(a1, 86, v91, v92, "ptr");
                  glpLLVMBuildStore(a1, v83, v93);
                  uint64_t v47 = v125;
                  break;
                }
LABEL_76:
                uint64_t v82 = glpLLVMGetParam(a1, *(void *)(a1 + 160), v46);
LABEL_77:
                uint64_t v83 = v82;
                uint64_t v46 = (v46 + 1);
                uint64_t v84 = 1;
                uint64_t v85 = v76;
                if (!v82) {
                  goto LABEL_79;
                }
                goto LABEL_78;
              case 18:
                if ((*(_WORD *)(a1 + 832) & 1) == 0)
                {
                  strncpy(__dst, "air.get_instance_id.i32", 0x200uLL);
                  uint64_t v84 = 0;
                  uint64_t v85 = *(void *)(a1 + 40);
                  goto LABEL_79;
                }
                goto LABEL_76;
              case 28:
                if (*(_WORD *)(a1 + 832)) {
                  goto LABEL_76;
                }
                uint64_t v78 = v124;
                if (!v124)
                {
                  uint64_t v79 = *(void *)(a1 + 40);
                  *(void *)__dst = 0x400000001;
                  uint64_t v78 = glpLLVMCallFunction(a1, "air.get_vertex_id.i32", v79, &v126, 0, (unsigned int *)__dst, 2);
                }
                uint64_t v80 = glpLLVMGetParam(a1, *(void *)(a1 + 160), v46);
                uint64_t v124 = v78;
                *(void *)__dst = v78;
                uint64_t v81 = glpLLVMBuildGEP(a1, v80, (uint64_t *)__dst, 1, "attributePtr");
                uint64_t v82 = glpLLVMBuildLoad(a1, v81, "in");
                goto LABEL_77;
            }
          }
        }
        else
        {
          glpLayoutObjectFind(*(uint64_t **)(v48 + 8), 34);
          uint64_t v50 = glpLLVMGetParam(a1, *(void *)(a1 + 160), v46);
          uint64_t v46 = (v46 + 1);
          if ((*(unsigned char *)(*(void *)(v48 + 144) + 32) & 4) == 0)
          {
            uint64_t v52 = glpLLVMGetVariablePointer(a1, v48);
            uint64_t v53 = glpPrecisionIndexFromSAFlags(*(void *)(v48 + 48));
            uint64_t v54 = glpTypeToLLVMType((void *)a1, *(unsigned int **)v48, v53, (void *)v48);
            uint64_t v55 = glpLLVMPointerType(a1, v54, 0);
            uint64_t v56 = glpLLVMCastOperation(a1, 86, v52, v55, "ptr");
            uint64_t v57 = a1;
            uint64_t v58 = v50;
LABEL_59:
            glpLLVMBuildStore(v57, v58, v56);
            goto LABEL_91;
          }
          glpPointerHashPut(*(void *)(a1 + 344), v48, v50, v51);
        }
LABEL_91:
        v45 += 8;
        if (v47 == v45) {
          goto LABEL_108;
        }
      }
    }
    LODWORD(v46) = 0;
LABEL_108:
    *(void *)(a1 + 168) = v7;
    *(void *)(a1 + 208) = 0;
    if ((*(_DWORD *)(a1 + 320) | 2) == 3)
    {
      uint64_t v106 = *(unsigned int *)(a1 + 692);
      if ((int)v106 >= 1)
      {
        for (uint64_t i = 0; i != v106; ++i)
        {
          unint64_t v108 = *(void *)(*(void *)(a1 + 696) + 8 * i);
          uint64_t v109 = glpLLVMGetParam(a1, *(void *)(a1 + 160), (v46 + i));
          glpPointerHashPut(*(void *)(a1 + 344), v108, v109, v110);
        }
      }
    }
  }
  glpLLVMCGNode(a1, Body, 0);
  glpDestroyPointerHash(*(void *)(a1 + 344));
  *(void *)(a1 + 344) = 0;
  glpDestroyPointerHash(*(void *)(a1 + 352));
  *(void *)(a1 + 352) = 0;
  if (*(void *)(a1 + 24)) {
    glpLLVMClearCurrentLine(a1);
  }
  *(_DWORD *)(a1 + 332) = 0;
  *(void *)(a1 + 440) = 0;
  *(_WORD *)(a1 + 324) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  glpLLVMPositionBuilderAtEnd(a1, v123);
  glpLLVMEmitBranch(a1, v122);
  glpLLVMPositionBuilderAtEnd(a1, v122);
  glpLLVMEmitBranch(a1, v121);
  uint64_t v111 = *(unsigned int *)(a1 + 260);
  int v112 = v111 + 1;
  int v113 = *(_DWORD *)(a1 + 256);
  if ((int)v111 + 1 <= v113)
  {
    v116 = *(char **)(a1 + 264);
    int v117 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v113 <= 1) {
      int v113 = 1;
    }
    int v114 = 2 * v113;
    if (v114 <= v112) {
      uint64_t v115 = v112;
    }
    else {
      uint64_t v115 = v114;
    }
    v116 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v115, "Vector Storage (uint8_t, growth)");
    memcpy(v116, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v115;
    *(void *)(a1 + 264) = v116;
    int v117 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v116[v111 + 1], &v116[v111], (v117 - v111));
  *(unsigned char *)(*(void *)(a1 + 264) + v111) = 19;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 160) = 0;
  return v7;
}

uint64_t glpLLVMCGInterfaceBlock(uint64_t a1, uint64_t a2)
{
  uint64_t Extra = glpInterfaceBlockNodeGetExtra(a2);
  uint64_t result = glpInterfaceBlockObjectGetVariableObjectCount(Extra);
  if (result)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 8 * result;
    do
    {
      uint64_t result = glpLLVMCGDeclareVariable(a1, *(void *)(*(void *)(Extra + 72) + v5));
      v5 += 8;
    }
    while (v6 != v5);
  }
  return result;
}

uint64_t glpLLVMCGBlock(void *a1, uint64_t a2)
{
  *(void *)&v46[28] = *MEMORY[0x263EF8340];
  uint64_t result = glpBlockNodeGetStatementCount(a2);
  if (result)
  {
    unsigned int v5 = result;
    for (unsigned int i = 0; i < v5; i += v12)
    {
      uint64_t Statement = glpBlockNodeGetStatement(a2, i);
      int v41 = 0;
      v42 = 0;
      if (!glpIsSimpleComponentAssigment(Statement, &v42, &v41, &v45, v43)) {
        goto LABEL_20;
      }
      uint64_t PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)*v42);
      if (glpPrimitiveTypeGetCategory(PrimitiveType) != 2) {
        goto LABEL_20;
      }
      int v9 = (int *)v46;
      int v10 = v44;
      uint64_t v11 = 1;
      do
      {
        uint64_t v12 = v11;
        if (v11 == 8) {
          break;
        }
        if (i + v11 >= v5) {
          break;
        }
        uint64_t v13 = glpBlockNodeGetStatement(a2, i + v11);
        int IsSimpleComponentAssigment = glpIsSimpleComponentAssigment(v13, &v42, &v41, v9, v10);
        uint64_t v11 = v12 + 1;
        ++v10;
        ++v9;
      }
      while (IsSimpleComponentAssigment);
      int Length = glpPrimitiveVectorGetLength(PrimitiveType);
      unsigned int v16 = v41;
      uint64_t v17 = glpPrimitiveTypeGetPrimitiveType(*v41);
      int v18 = glpPrimitiveVectorGetLength(v17);
      if (Length == v12)
      {
        uint64_t v19 = 0;
        int v20 = v18;
        while (v19 == *(_DWORD *)&v46[4 * v19 - 4])
        {
          if (v12 == ++v19) {
            goto LABEL_15;
          }
        }
        if (v12 != v19) {
          goto LABEL_20;
        }
LABEL_15:
        uint64_t v21 = glpLLVMGetVariablePointer((uint64_t)a1, (unint64_t)v16);
        uint64_t SourceVariable = glpLoadSourceVariable(a1, v21, (uint64_t)v16);
        if (v20 == v12)
        {
          uint64_t v23 = 0;
          while (v23 == v43[v23])
          {
            if (v12 == ++v23)
            {
              uint64_t v24 = glpLLVMGetVariablePointer((uint64_t)a1, (unint64_t)v42);
              goto LABEL_25;
            }
          }
          uint64_t v24 = glpLLVMGetVariablePointer((uint64_t)a1, (unint64_t)v42);
          if (v12 != v23) {
            goto LABEL_26;
          }
LABEL_25:
          uint64_t v25 = (uint64_t)a1;
          uint64_t v26 = SourceVariable;
        }
        else
        {
          uint64_t v24 = glpLLVMGetVariablePointer((uint64_t)a1, (unint64_t)v42);
LABEL_26:
          uint64_t v40 = v24;
          uint64_t v27 = glpLLVMTypeOf((uint64_t)a1, v24);
          uint64_t v28 = glpLLVMGetElementType((uint64_t)a1, v27);
          uint64_t inserted = glpLLVMConstFromTypeCache((uint64_t)a1, 37, v28);
          uint64_t v30 = 0;
          do
          {
            unint64_t v31 = v43[v30];
            if (v31 > 7)
            {
              uint64_t v33 = glpLLVMConstIntCache((uint64_t)a1, a1[5], (int)v31, 1);
            }
            else
            {
              v32 = &a1[v31];
              uint64_t v33 = v32[65];
              if (!v33)
              {
                size_t v34 = v32 + 65;
                uint64_t v33 = glpLLVMConstIntCache((uint64_t)a1, a1[5], v31, 0);
                *size_t v34 = v33;
              }
            }
            uint64_t Element = glpLLVMBuildExtractElement((uint64_t)a1, SourceVariable, v33, "");
            unint64_t v36 = *(unsigned int *)&v46[4 * v30 - 4];
            if (v36 > 7)
            {
              uint64_t v38 = glpLLVMConstIntCache((uint64_t)a1, a1[5], (int)v36, 1);
            }
            else
            {
              int v37 = &a1[v36];
              uint64_t v38 = v37[65];
              if (!v38)
              {
                uint64_t v39 = v37 + 65;
                uint64_t v38 = glpLLVMConstIntCache((uint64_t)a1, a1[5], v36, 0);
                *uint64_t v39 = v38;
              }
            }
            uint64_t inserted = glpLLVMBuildInsertElement((uint64_t)a1, inserted, Element, v38, "");
            ++v30;
          }
          while (v12 != v30);
          uint64_t v25 = (uint64_t)a1;
          uint64_t v26 = inserted;
          uint64_t v24 = v40;
        }
        uint64_t result = (uint64_t)glpLLVMBuildStore(v25, v26, v24);
      }
      else
      {
LABEL_20:
        uint64_t result = glpLLVMCGNode(a1, Statement, 0);
        LODWORD(v12) = 1;
      }
    }
  }
  return result;
}

void *glpLLVMCGIfStatement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 432);
  uint64_t Cond = glpIfStatementNodeGetCond(a2);
  uint64_t v6 = glpLLVMCGNode(a1, Cond, 1);
  uint64_t v7 = glpLLVMCGInsertBasicBlock(a1, "if.then");
  Elseuint64_t Statement = glpIfStatementNodeGetElseStatement(a2);
  if (ElseStatement) {
    uint64_t v9 = glpLLVMCGInsertBasicBlock(a1, "if.else");
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = glpLLVMCGInsertBasicBlock(a1, "if.end");
  glpLLVMClearCurrentLine(a1);
  if (ElseStatement) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = *(unsigned int *)(a1 + 260);
  int v13 = v12 + 1;
  int v14 = *(_DWORD *)(a1 + 256);
  uint64_t v23 = v11;
  if ((int)v12 + 1 <= v14)
  {
    uint64_t v17 = *(char **)(a1 + 264);
    int v18 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v14 <= 1) {
      int v14 = 1;
    }
    int v15 = 2 * v14;
    uint64_t v22 = v4;
    if (v15 <= v13) {
      uint64_t v16 = v13;
    }
    else {
      uint64_t v16 = v15;
    }
    uint64_t v17 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v16, "Vector Storage (uint8_t, growth)");
    memcpy(v17, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v16;
    uint64_t v4 = v22;
    *(void *)(a1 + 264) = v17;
    int v18 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v17[v12 + 1], &v17[v12], (v18 - v12));
  *(unsigned char *)(*(void *)(a1 + 264) + v12) = 98;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMValue(a1, v6);
  glpSerializeLLVMBlock(a1, v7);
  glpSerializeLLVMBlock(a1, v23);
  glpLLVMPositionBuilderAtEnd(a1, v7);
  if (v9) {
    uint64_t v19 = v9;
  }
  else {
    uint64_t v19 = v10;
  }
  *(void *)(a1 + 432) = v19;
  Ifuint64_t Statement = glpIfStatementNodeGetIfStatement(a2);
  glpLLVMCGNode(a1, IfStatement, 0);
  glpLLVMEmitBranch(a1, v10);
  if (ElseStatement)
  {
    glpLLVMPositionBuilderAtEnd(a1, v9);
    *(void *)(a1 + 432) = v10;
    glpLLVMCGNode(a1, ElseStatement, 0);
    glpLLVMEmitBranch(a1, v10);
  }
  uint64_t result = glpLLVMPositionBuilderAtEnd(a1, v10);
  *(void *)(a1 + 432) = v4;
  return result;
}

void *glpLLVMCGLoopStatement(uint64_t a1, uint64_t a2)
{
  glpLLVMAddLineInformation(a1, a2);
  uint64_t v4 = *(void *)(a1 + 432);
  uint64_t Body0 = glpLoopStatementNodeGetBody0(a2);
  uint64_t Body1 = glpLoopStatementNodeGetBody1(a2);
  uint64_t v7 = Body1;
  if (!Body0)
  {
    if (Body1)
    {
      uint64_t v10 = glpLLVMCGInsertBasicBlock(a1, "while.body1");
      goto LABEL_7;
    }
    int v11 = 1;
LABEL_12:
    uint64_t v9 = glpLLVMCGInsertBasicBlock(a1, "while.header");
    glpLLVMEmitBranch(a1, v9);
    glpLLVMPositionBuilderAtEnd(a1, v9);
    goto LABEL_13;
  }
  uint64_t v8 = glpLLVMCGInsertBasicBlock(a1, "while.body0");
  uint64_t v9 = v8;
  if (v7)
  {
    uint64_t v10 = glpLLVMCGInsertBasicBlock(a1, "while.body1");
    if (v9)
    {
      int v11 = 0;
      goto LABEL_14;
    }
LABEL_7:
    int v11 = 0;
    uint64_t v9 = v10;
    if (v10) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  int v11 = 1;
  if (!v8) {
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v10 = 0;
LABEL_14:
  uint64_t v12 = glpLLVMCGInsertBasicBlock(a1, "while.end");
  uint64_t v13 = v12;
  long long v17 = *(_OWORD *)(a1 + 416);
  if (v10) {
    uint64_t v14 = v10;
  }
  else {
    uint64_t v14 = v9;
  }
  *(void *)(a1 + 416) = v14;
  *(void *)(a1 + 424) = v12;
  if (Body0)
  {
    glpLLVMEmitBranch(a1, v9);
    glpLLVMPositionBuilderAtEnd(a1, v9);
    if (v11) {
      uint64_t v15 = v13;
    }
    else {
      uint64_t v15 = v10;
    }
    *(void *)(a1 + 432) = v15;
    glpLLVMCGNode(a1, Body0, 0);
  }
  if ((v11 & 1) == 0)
  {
    glpLLVMEmitBranch(a1, v10);
    glpLLVMPositionBuilderAtEnd(a1, v10);
    *(void *)(a1 + 432) = v13;
    glpLLVMCGNode(a1, v7, 0);
  }
  glpLLVMEmitBranch(a1, v9);
  *(_OWORD *)(a1 + 416) = v17;
  uint64_t result = glpLLVMPositionBuilderAtEnd(a1, v13);
  *(void *)(a1 + 432) = v4;
  return result;
}

void *glpLLVMCGSwitchStatement(void *a1, uint64_t a2)
{
  glpLLVMAddLineInformation((uint64_t)a1, a2);
  uint64_t v4 = a1[54];
  uint64_t Expr = glpSwitchStatementNodeGetExpr(a2);
  uint64_t v6 = glpLLVMCGNode(a1, Expr, 1);
  uint64_t v7 = glpLLVMCGInsertBasicBlock((uint64_t)a1, "afterSwitch");
  uint64_t v8 = a1[53];
  a1[53] = v7;
  a1[54] = v7;
  uint64_t v9 = glpLLVMCGInsertBasicBlock((uint64_t)a1, "default");
  uint64_t Body = glpSwitchStatementNodeGetBody(a2);
  int ChildCount = glpASTNodeGetChildCount(Body);
  if (ChildCount < 1)
  {
    uint64_t v14 = 0;
  }
  else
  {
    int v12 = ChildCount;
    unsigned int v13 = 0;
    LODWORD(v14) = 0;
    do
    {
      uint64_t Child = glpASTNodeGetChild(Body, v13);
      if (glpIsCaseStatementNode(Child)) {
        uint64_t v14 = (v14 + 1);
      }
      else {
        uint64_t v14 = v14;
      }
      ++v13;
    }
    while (v12 != v13);
  }
  uint64_t v16 = a1[51];
  a1[51] = glpLLVMBuildSwitch((uint64_t)a1, v6, v9, v14);
  glpLLVMCGNode(a1, Body, 0);
  glpLLVMEmitBranch((uint64_t)a1, v7);
  glpLLVMPositionBuilderAtEnd((uint64_t)a1, v9);
  glpLLVMEmitBranch((uint64_t)a1, v7);
  uint64_t result = glpLLVMPositionBuilderAtEnd((uint64_t)a1, v7);
  a1[51] = v16;
  a1[53] = v8;
  a1[54] = v4;
  return result;
}

void *glpLLVMCGCaseStatement(uint64_t a1, uint64_t a2)
{
  glpLLVMAddLineInformation(a1, a2);
  uint64_t ConstValue = glpCaseStatementNodeGetConstValue(a2);
  uint64_t v5 = glpLLVMCGNode(a1, ConstValue, 1);
  uint64_t v6 = glpLLVMCGInsertBasicBlock(a1, "case");
  glpLLVMEmitBranch(a1, v6);
  glpLLVMPositionBuilderAtEnd(a1, v6);
  uint64_t v7 = *(void *)(a1 + 408);

  return glpLLVMAddCase(a1, v7, v5, v6);
}

void *glpLLVMCGDefaultStatement(uint64_t a1, uint64_t a2)
{
  glpLLVMAddLineInformation(a1, a2);
  uint64_t v3 = *(void *)(a1 + 408);
  uint64_t v4 = *(unsigned int *)(a1 + 260);
  int v5 = v4 + 1;
  int v6 = *(_DWORD *)(a1 + 256);
  if ((int)v4 + 1 <= v6)
  {
    uint64_t v9 = *(char **)(a1 + 264);
    int v10 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v6 <= 1) {
      int v6 = 1;
    }
    int v7 = 2 * v6;
    if (v7 <= v5) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v7;
    }
    uint64_t v9 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v8, "Vector Storage (uint8_t, growth)");
    memcpy(v9, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v8;
    *(void *)(a1 + 264) = v9;
    int v10 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v9[v4 + 1], &v9[v4], (v10 - v4));
  *(unsigned char *)(*(void *)(a1 + 264) + v4) = 96;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMValue(a1, v3);
  uint64_t v11 = *(int *)(a1 + 312);
  *(_DWORD *)(a1 + 312) = v11 + 1;
  glpLLVMEmitBranch(a1, v11);

  return glpLLVMPositionBuilderAtEnd(a1, v11);
}

void *glpLLVMCGBreakStatement(uint64_t a1, uint64_t a2)
{
  glpLLVMAddLineInformation(a1, a2);
  glpLLVMClearCurrentLine(a1);
  uint64_t v3 = *(void *)(a1 + 424);

  return glpLLVMBuildBr(a1, v3);
}

void *glpLLVMCGContinueStatement(uint64_t a1, uint64_t a2)
{
  glpLLVMAddLineInformation(a1, a2);
  glpLLVMClearCurrentLine(a1);
  uint64_t v3 = *(void *)(a1 + 416);

  return glpLLVMBuildBr(a1, v3);
}

uint64_t glpLLVMCGDiscardStatement(uint64_t a1, uint64_t a2)
{
  glpLLVMAddLineInformation(a1, a2);
  uint64_t v3 = *(void *)(a1 + 88);
  *(void *)(a1 + 744) |= 2uLL;
  unsigned int v5 = 2;
  return glpLLVMCallFunction(a1, "air.discard_fragment", v3, 0, 0, &v5, (*(_WORD *)(a1 + 832) & 0x10) == 0);
}

uint64_t glpLLVMCGReturnStatement(uint64_t a1, uint64_t a2)
{
  glpLLVMAddLineInformation(a1, a2);
  if (!*(void *)(a1 + 408)) {
    *(_DWORD *)(a1 + 332) = 1;
  }
  if (*(_WORD *)(a1 + 324) && (uint64_t v3 = *(void *)(a1 + 208)) != 0)
  {
    *(void *)(a1 + 208) = 0;
    uint64_t v4 = *(unsigned int *)(a1 + 260);
    int v5 = v4 + 1;
    int v6 = *(_DWORD *)(a1 + 256);
    if ((int)v4 + 1 <= v6)
    {
      uint64_t v9 = *(char **)(a1 + 264);
      int v10 = *(_DWORD *)(a1 + 260);
    }
    else
    {
      if (v6 <= 1) {
        int v6 = 1;
      }
      int v7 = 2 * v6;
      if (v7 <= v5) {
        uint64_t v8 = v5;
      }
      else {
        uint64_t v8 = v7;
      }
      uint64_t v9 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v8, "Vector Storage (uint8_t, growth)");
      memcpy(v9, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
      (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
      *(_DWORD *)(a1 + 256) = v8;
      *(void *)(a1 + 264) = v9;
      int v10 = *(_DWORD *)(a1 + 260);
    }
    memmove(&v9[v4 + 1], &v9[v4], (v10 - v4));
    *(unsigned char *)(*(void *)(a1 + 264) + v4) = 25;
    ++*(_DWORD *)(a1 + 260);
    ++*(_DWORD *)(a1 + 296);
    glpSerializeLLVMValue(a1, v3);
  }
  else
  {
    uint64_t v11 = *(unsigned int *)(a1 + 260);
    int v12 = v11 + 1;
    int v13 = *(_DWORD *)(a1 + 256);
    if ((int)v11 + 1 <= v13)
    {
      uint64_t v16 = *(char **)(a1 + 264);
      int v17 = *(_DWORD *)(a1 + 260);
    }
    else
    {
      if (v13 <= 1) {
        int v13 = 1;
      }
      int v14 = 2 * v13;
      if (v14 <= v12) {
        uint64_t v15 = v12;
      }
      else {
        uint64_t v15 = v14;
      }
      uint64_t v16 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v15, "Vector Storage (uint8_t, growth)");
      memcpy(v16, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
      (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
      *(_DWORD *)(a1 + 256) = v15;
      *(void *)(a1 + 264) = v16;
      int v17 = *(_DWORD *)(a1 + 260);
    }
    memmove(&v16[v11 + 1], &v16[v11], (v17 - v11));
    *(unsigned char *)(*(void *)(a1 + 264) + v11) = 24;
    ++*(_DWORD *)(a1 + 260);
    ++*(_DWORD *)(a1 + 296);
  }
  uint64_t result = *(int *)(a1 + 308);
  *(_DWORD *)(a1 + 308) = result + 1;
  return result;
}

uint64_t glpLLVMCGRawCallNode(uint64_t a1, uint64_t a2)
{
  v16[1] = *MEMORY[0x263EF8340];
  glpLLVMAddLineInformation(a1, a2);
  uint64_t v4 = glpRawCallNodeGetExtra(a2);
  uint64_t v5 = *(void *)(v4 + 144);
  int v6 = *(_DWORD **)(v4 + 152);
  uint64_t v7 = *(void *)v6;
  int v8 = *(_DWORD *)(*(void *)v6 + 36);
  MEMORY[0x270FA5388](v4);
  int v10 = (void *)((char *)v16 - ((v9 + 15) & 0xFFFFFFFF0));
  if (v9 >= 0x200) {
    size_t v11 = 512;
  }
  else {
    size_t v11 = v9;
  }
  bzero((char *)v16 - ((v9 + 15) & 0xFFFFFFFF0), v11);
  uint64_t v12 = *(unsigned int *)(v7 + 32);
  if (v12)
  {
    int v13 = (unint64_t *)(*(void *)(v7 + 40) + 8);
    do
    {
      uint64_t v14 = *(v13 - 1);
      if (v14) {
        *(unint64_t *)((char *)v10 + (((v14 << 32) - 0x100000000) >> 29)) = *v13;
      }
      v13 += 3;
      --v12;
    }
    while (v12);
  }
  return glpLLVMSharedRawCall(a1, v6[2], v5, v10, v8);
}

void *glpLLVMCGSubroutineRawCall(uint64_t a1, uint64_t a2)
{
  v56[1] = *MEMORY[0x263EF8340];
  glpLLVMAddLineInformation(a1, a2);
  uint64_t v4 = glpSubroutineRawCallNodeGetExtra(a2);
  uint64_t v5 = glpSubroutineRawCallNodeGetIndexExpr(a2);
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v7 = glpLLVMPointerType(a1, *(void *)(a1 + 40), 2);
  uint64_t v8 = glpLLVMCastOperation(a1, 86, *(void *)(a1 + 440), v7, "ptrBase");
  unint64_t v9 = *(int *)(v4 + 40) + 4 * (int)glpLinkedProgramGetDefaultUniformLocationCount(*(void *)(a1 + 136));
  if (v9 > 7)
  {
    uint64_t v11 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), v9, 1);
  }
  else
  {
    uint64_t v10 = a1 + 8 * v9;
    uint64_t v11 = *(void *)(v10 + 520);
    if (!v11)
    {
      uint64_t v12 = (uint64_t *)(v10 + 520);
      uint64_t v11 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), v9, 0);
      *uint64_t v12 = v11;
    }
  }
  v56[0] = v11;
  if (v5)
  {
    glpArrayTypeGetElementType(v6);
    uint64_t v13 = glpLLVMCGNode(a1, v5, 1);
    v56[0] = glpLLVMBinaryOperation(a1, 53, v11, v13, "idx");
  }
  uint64_t v14 = glpLLVMBuildGEP(a1, v8, v56, 1, "ptr");
  uint64_t v15 = glpLLVMBuildLoad(a1, v14, "subroutineUniformValue");
  uint64_t SubroutineUniformHash = glpLinkedProgramGetSubroutineUniformHash(*(void *)(a1 + 136), *(_DWORD *)(a1 + 320));
  uint64_t v17 = *(unsigned int *)(SubroutineUniformHash + 32);
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *(uint64_t **)(SubroutineUniformHash + 40);
    do
    {
      uint64_t v20 = *v19;
      if (*v19)
      {
        int v21 = *(_DWORD *)(v20 + 4);
        uint64_t v22 = v20 + 64;
        if (v21 == *(_DWORD *)(v4 + 40)) {
          uint64_t v18 = v22;
        }
      }
      v19 += 4;
      --v17;
    }
    while (v17);
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v23 = glpLLVMCGInsertBasicBlock(a1, "afterSwitch");
  uint64_t v24 = *(unsigned int *)(v18 + 4);
  uint64_t v55 = v23;
  uint64_t v54 = glpLLVMBuildSwitch(a1, v15, v23, v24);
  if (*(_DWORD *)(v18 + 4))
  {
    unint64_t v25 = 0;
    uint64_t v53 = v18;
    do
    {
      unint64_t v26 = *(unsigned int *)(*(void *)(v18 + 8) + 4 * v25);
      uint64_t v27 = glpLLVMCGInsertBasicBlock(a1, "case");
      glpLLVMPositionBuilderAtEnd(a1, v27);
      glpTopLevelNodeGetDefCount(*(void *)(*(void *)(a1 + 128) + 8 * *(unsigned int *)(a1 + 320) + 184));
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      do
      {
        uint64_t Def = glpTopLevelNodeGetDef(*(void *)(*(void *)(a1 + 128) + 8 * *(unsigned int *)(a1 + 320) + 184), v28);
        if (Def)
        {
          uint64_t v31 = Def;
          if (glpASTNodeGetKind(Def) == 51)
          {
            uint64_t Prototype = glpFunctionDefinitionNodeGetPrototype(v31);
            uint64_t Extra = glpFunctionPrototypeNodeGetExtra(Prototype);
            if ((*(unsigned char *)(Extra + 10) & 0x10) != 0 && *(_DWORD *)(Extra + 160) == v26) {
              uint64_t v29 = Extra;
            }
          }
        }
        ++v28;
        uint64_t DefCount = glpTopLevelNodeGetDefCount(*(void *)(*(void *)(a1 + 128) + 8 * *(unsigned int *)(a1 + 320) + 184));
      }
      while (v28 < DefCount);
      uint64_t v35 = *(_DWORD **)(v29 + 152);
      uint64_t v36 = *(void *)v35;
      int v37 = *(_DWORD *)(*(void *)v35 + 36);
      MEMORY[0x270FA5388](DefCount);
      uint64_t v39 = (unint64_t *)((char *)&v52 - ((v38 + 15) & 0xFFFFFFFF0));
      if (v38 >= 0x200) {
        size_t v40 = 512;
      }
      else {
        size_t v40 = v38;
      }
      bzero((char *)&v52 - ((v38 + 15) & 0xFFFFFFFF0), v40);
      uint64_t v41 = *(unsigned int *)(v36 + 32);
      if (v41)
      {
        v42 = (unint64_t *)(*(void *)(v36 + 40) + 8);
        do
        {
          uint64_t v43 = *(v42 - 1);
          if (v43) {
            *(unint64_t *)((char *)v39 + (((v43 << 32) - 0x100000000) >> 29)) = *v42;
          }
          v42 += 3;
          --v41;
        }
        while (v41);
      }
      uint64_t v44 = *(unsigned int *)(a1 + 628);
      if (v44)
      {
        uint64_t v45 = 0;
        uint64_t v46 = *(void *)(a1 + 632);
        do
        {
          if (*(_DWORD *)(*(void *)v46 + 16) == v26) {
            uint64_t v45 = *(void *)(*(void *)v46 + 8);
          }
          v46 += 8;
          --v44;
        }
        while (v44);
      }
      else
      {
        uint64_t v45 = 0;
      }
      glpLLVMSharedRawCall(a1, v35[2], v45, v39, v37);
      glpLLVMEmitBranch(a1, v55);
      if (v26 > 7)
      {
        uint64_t v48 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), (int)v26, 1);
        uint64_t v18 = v53;
      }
      else
      {
        unint64_t v47 = a1 + 8 * v26;
        uint64_t v48 = *(void *)(v47 + 520);
        uint64_t v18 = v53;
        if (!v48)
        {
          int v49 = (uint64_t *)(v47 + 520);
          uint64_t v48 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), v26, 0);
          *int v49 = v48;
        }
      }
      glpLLVMAddCase(a1, v54, v48, v27);
      ++v25;
    }
    while (v25 < *(unsigned int *)(v18 + 4));
  }
  uint64_t v50 = v55;

  return glpLLVMPositionBuilderAtEnd(a1, v50);
}

uint64_t glpLLVMCGLValue(uint64_t *a1, uint64_t a2, int a3)
{
  v78[2] = *MEMORY[0x263EF8340];
  glpLLVMAddLineInformation((uint64_t)a1, a2);
  Variableuint64_t Extra = glpLValueNodeGetVariableExtra(a2);
  uint64_t v7 = *(void *)(*(void *)(VariableExtra + 144) + 16);
  if (v7) {
    return *(void *)(v7 + 16);
  }
  unint64_t v10 = VariableExtra;
  uint64_t v11 = *(uint64_t **)(VariableExtra + 8);
  if (v11)
  {
    uint64_t v12 = glpLayoutObjectFind(v11, 46);
    if (v12)
    {
      if (*((_DWORD *)v12 + 4) == 9)
      {
        uint64_t v13 = a1[5];
        v78[0] = 0x300000001;
        return glpLLVMCallFunction((uint64_t)a1, "air.get_num_samples.i32", v13, 0, 0, (unsigned int *)v78, 2);
      }
    }
  }
  uint64_t v14 = glpLLVMGetVariablePointer((uint64_t)a1, v10);
  SaType = (_DWORD *)glpASTNodeGetSaType(a2);
  char SaFlags = glpASTNodeGetSaFlags(a2);
  uint64_t v17 = glpPrecisionIndexFromSAFlags(SaFlags);
  if (!v17)
  {
    uint64_t v18 = glpLValueNodeGetVariableExtra(a2);
    uint64_t v17 = glpPrecisionIndexFromSAFlags(*(void *)(v18 + 48));
  }
  uint64_t Offset = glpDerefNodeGetOffset(a2);
  uint64_t v74 = a1[5];
  unsigned int IsAtomic = glpTypeIsAtomic(SaType);
  if (IsAtomic) {
    unsigned int IsAtomic = glpPrimitiveTypeGetPrimitiveType((uint64_t)SaType);
  }
  if (Offset)
  {
    PreSwizzleunsigned int PrimitiveType = IsAtomic;
    uint64_t BankIndex = glpOffsetNodeGetBankIndex(Offset);
    if (BankIndex) {
      int v22 = *(_DWORD *)glpConstantNodeGetValue(BankIndex);
    }
    else {
      int v22 = 0;
    }
    unsigned int CompStride = glpOffsetNodeGetCompStride(Offset);
    Offsetuint64_t Expr = glpOffsetNodeGetOffsetExpr(Offset);
    if (glpOffsetNodeGetPreSwizzlePrimitiveType(Offset)) {
      PreSwizzleunsigned int PrimitiveType = glpOffsetNodeGetPreSwizzlePrimitiveType(Offset);
    }
    if (!a3)
    {
      if (OffsetExpr)
      {
        glpLLVMCGNode(a1, OffsetExpr, 0);
        return 0;
      }
      return OffsetExpr;
    }
  }
  else
  {
    Offsetuint64_t Expr = 0;
    if (!a3) {
      return OffsetExpr;
    }
    PreSwizzleunsigned int PrimitiveType = IsAtomic;
    int v22 = 0;
    unsigned int CompStride = -1;
  }
  if (glpTypeIsAtomic(SaType))
  {
    v78[0] = 0;
    v78[1] = 0;
    uint64_t v77 = 0;
    if ((*(unsigned char *)(v10 + 52) & 1) == 0)
    {
      if (OffsetExpr)
      {
        uint64_t v23 = PreSwizzlePrimitiveType;
        if ((PreSwizzlePrimitiveType & 0xFFFFFFFE) != 0x40
          || *(_DWORD *)(*(void *)(v10 + 144) + 24) == PreSwizzlePrimitiveType)
        {
          unint64_t v25 = a1;
          unint64_t v26 = v10;
          uint64_t v27 = v14;
          uint64_t v28 = OffsetExpr;
          uint64_t v24 = 0;
        }
        else
        {
          uint64_t v24 = &v77;
          unint64_t v25 = a1;
          unint64_t v26 = v10;
          uint64_t v27 = v14;
          uint64_t v28 = OffsetExpr;
        }
        uint64_t v14 = glpBuildArrayElementPtr(v25, v26, v27, v28, v24, 0);
      }
      else
      {
        uint64_t v23 = PreSwizzlePrimitiveType;
      }
      uint64_t v36 = glpLLVMLoadVector((uint64_t)a1, v10, v14, v23, v17, *(unsigned int *)(*(void *)(v10 + 144) + 24), *(_DWORD *)(*(void *)(v10 + 144) + 28));
      goto LABEL_84;
    }
    uint64_t v29 = glpASTNodeGetSaType(a2);
    unsigned int PrimitiveType = glpPrimitiveTypeGetPrimitiveType(v29);
    if (glpPrimitiveTypeGetCategory(PrimitiveType) == 4)
    {
      uint64_t inserted = glpLLVMConstIntCache((uint64_t)a1, a1[5], *(int *)(v10 + 156), 0);
      if (!OffsetExpr) {
        return inserted;
      }
      uint64_t v32 = glpLLVMCGNode(a1, OffsetExpr, 1);
      uint64_t v33 = glpLLVMCastOperation((uint64_t)a1, 75, v32, a1[5], "off");
      return glpLLVMBinaryOperation((uint64_t)a1, 53, v33, inserted, "idx");
    }
    if ((*(unsigned char *)(v10 + 52) & 8) == 0)
    {
      LODWORD(v76) = 0;
      if (OffsetExpr)
      {
        uint64_t v23 = PreSwizzlePrimitiveType;
        if (!glpGetConstantOffset(OffsetExpr, &v76))
        {
          uint64_t v46 = glpLLVMCGNode(a1, OffsetExpr, 1);
          if (v46)
          {
            uint64_t v47 = v46;
            uint64_t v48 = glpLLVMTypeOf((uint64_t)a1, v46);
            uint64_t v49 = glpLLVMConstIntCache((uint64_t)a1, v48, *(int *)(v10 + 156), 0);
            uint64_t v50 = glpLLVMBinaryOperation((uint64_t)a1, 53, v47, v49, "idx");
          }
          else
          {
            uint64_t v50 = glpLLVMConstIntCache((uint64_t)a1, v74, *(int *)(v10 + 156), 0);
          }
          v78[0] = v50;
          uint64_t v43 = glpLLVMBuildGEP((uint64_t)a1, a1[55], v78, 1, "ptr");
          goto LABEL_65;
        }
        int v35 = v76;
      }
      else
      {
        int v35 = 0;
        uint64_t v23 = PreSwizzlePrimitiveType;
      }
      uint64_t v43 = glpBuildUniformElementPtr(a1, v10, a1[55], 0, 0, *(_DWORD *)(v10 + 156) + v35);
LABEL_65:
      uint64_t v45 = v43;
      int v57 = 4;
LABEL_72:
      int v72 = v57;
      if (glpPrimitiveTypeGetCategory(v23) == 2)
      {
        uint64_t Length = glpPrimitiveVectorGetLength(v23);
        if (Length >= 2 && CompStride != -1)
        {
          uint64_t v59 = Length;
          uint64_t ScalarType = glpPrimitiveTypeGetScalarType(v23);
          unsigned int v71 = ScalarType;
          uint64_t v61 = glpLLVMReadUniform(a1, v45, v72, ScalarType, v17);
          uint64_t v62 = glpLLVMTypeOf((uint64_t)a1, v61);
          uint64_t v63 = glpLLVMVectorType((uint64_t)a1, v62, v59);
          uint64_t inserted = glpLLVMConstFromTypeCache((uint64_t)a1, 37, v63);
          unint64_t v64 = 0;
          uint64_t v76 = glpLLVMConstIntCache((uint64_t)a1, v74, CompStride >> 2, 0);
          do
          {
            if (v64 && (uint64_t v61 = glpLLVMReadUniform(a1, v45, v72, v71, v17), v64 > 7))
            {
              uint64_t v66 = glpLLVMConstIntCache((uint64_t)a1, a1[5], (int)v64, 1);
            }
            else
            {
              unsigned int v65 = &a1[v64];
              uint64_t v66 = v65[65];
              if (!v66)
              {
                uint64_t v66 = glpLLVMConstIntCache((uint64_t)a1, a1[5], v64, 0);
                v65[65] = v66;
              }
            }
            uint64_t inserted = glpLLVMBuildInsertElement((uint64_t)a1, inserted, v61, v66, "");
            uint64_t v45 = glpLLVMBuildGEP((uint64_t)a1, v45, &v76, 1, "ptr");
            ++v64;
          }
          while (v59 != v64);
          uint64_t v23 = PreSwizzlePrimitiveType;
          goto LABEL_85;
        }
      }
      uint64_t v36 = glpLLVMReadUniform(a1, v45, v72, v23, v17);
LABEL_84:
      uint64_t inserted = v36;
LABEL_85:
      if (!Offset) {
        return inserted;
      }
      unsigned int Swizzle = glpOffsetNodeGetSwizzle(Offset);
      uint64_t inserted = glpCGSwizzle((uint64_t)a1, 0, 0, inserted, v23, Swizzle);
      VectorElementuint64_t Expr = glpOffsetNodeGetVectorElementExpr(Offset);
      if (!VectorElementExpr) {
        return inserted;
      }
      uint64_t v69 = glpLLVMCGNode(a1, VectorElementExpr, 1);
      uint64_t v70 = glpLLVMCastOperation((uint64_t)a1, 87, v69, v74, "mtc");
      return glpLLVMBuildExtractElement((uint64_t)a1, inserted, v70, "offv");
    }
    uint64_t v37 = *(void *)(v10 + 88);
    uint64_t v38 = *(void *)(a1[89] + 8 * (v22 + *(_DWORD *)(v37 + 24) - 1));
    if (*(_DWORD *)(v37 + 8) == 1) {
      uint64_t v39 = glpLLVMPointerType((uint64_t)a1, a1[9], 2);
    }
    else {
      uint64_t v39 = 0;
    }
    LODWORD(v76) = 0;
    if (!OffsetExpr)
    {
      int v42 = 0;
      uint64_t v41 = *(void *)(v10 + 88);
      goto LABEL_52;
    }
    Constantuint64_t Offset = glpGetConstantOffset(OffsetExpr, &v76);
    uint64_t v41 = *(void *)(v10 + 88);
    if (ConstantOffset)
    {
      int v42 = v76;
LABEL_52:
      if (*(_DWORD *)(v41 + 8) == 1) {
        int v44 = v42 >> 2;
      }
      else {
        int v44 = v42;
      }
      uint64_t v45 = glpBuildUniformElementPtr(a1, v10, *(void *)(v38 + 8), v39, v22, v44);
      uint64_t v23 = PreSwizzlePrimitiveType;
      goto LABEL_69;
    }
    uint64_t v51 = *(void *)(v38 + 8);
    if (*(_DWORD *)(v41 + 8) == 1) {
      uint64_t v51 = glpLLVMCastOperation((uint64_t)a1, 86, v51, v39, "ptr");
    }
    uint64_t v23 = PreSwizzlePrimitiveType;
    uint64_t v52 = glpLLVMCGNode(a1, OffsetExpr, 1);
    if (v52)
    {
      uint64_t v53 = v52;
      uint64_t v54 = glpLLVMTypeOf((uint64_t)a1, v52);
      if (*(_DWORD *)(*(void *)(v10 + 88) + 8) != 1)
      {
LABEL_68:
        v78[0] = v53;
        uint64_t v45 = glpLLVMBuildGEP((uint64_t)a1, v51, v78, 1, "ptr");
LABEL_69:
        if (*(_DWORD *)(*(void *)(v10 + 88) + 8) == 1) {
          int v57 = 1;
        }
        else {
          int v57 = 4;
        }
        goto LABEL_72;
      }
      uint64_t v55 = glpLLVMConstIntCache((uint64_t)a1, v54, 2uLL, 1);
      uint64_t v56 = glpLLVMBinaryOperation((uint64_t)a1, 67, v53, v55, "offset");
    }
    else
    {
      uint64_t v56 = glpLLVMConstIntCache((uint64_t)a1, v74, 0, *(_DWORD *)(*(void *)(v10 + 88) + 8) == 1);
    }
    uint64_t v53 = v56;
    goto LABEL_68;
  }

  return glpLLVMBuildLoad((uint64_t)a1, v14, "var");
}

uint64_t glpLLVMCGRValue(uint64_t a1, uint64_t a2)
{
  v24[2] = *MEMORY[0x263EF8340];
  SaType = (_DWORD *)glpASTNodeGetSaType(a2);
  if (!glpTypeIsAtomic(SaType)) {
    return 0;
  }
  glpLLVMAddLineInformation(a1, a2);
  uint64_t Base = glpRValueNodeGetBase(a2);
  uint64_t v6 = glpLLVMCGNode(a1, Base, 1);
  uint64_t Offset = glpDerefNodeGetOffset(a2);
  if (!Offset) {
    return v6;
  }
  uint64_t v8 = Offset;
  Offsetuint64_t Expr = glpOffsetNodeGetOffsetExpr(Offset);
  if (OffsetExpr) {
    uint64_t v10 = glpLLVMCGNode(a1, OffsetExpr, 1);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = glpASTNodeGetSaType(a2);
  uint64_t PrimitiveType = glpPrimitiveTypeGetPrimitiveType(v11);
  if (glpOffsetNodeGetPreSwizzlePrimitiveType(v8)) {
    uint64_t PrimitiveType = glpOffsetNodeGetPreSwizzlePrimitiveType(v8);
  }
  if (v10)
  {
    if ((*(_WORD *)(a1 + 832) & 8) != 0
      && glpASTNodeGetKind(Base) == 3
      && (glpASTNodeGetSaFlags(Base) & 0x60) != 0)
    {
      uint64_t v13 = glpPointerHashGet(*(void *)(a1 + 344), v6);
      if (!v13)
      {
        uint64_t v14 = glpLLVMTypeOf(a1, v6);
        uint64_t v13 = glpLLVMAddGlobalInAddressSpace(a1, v14);
        glpLLVMSetGlobalConstant(a1, v13);
        glpLLVMSetInitializer(a1, v13, v6);
        glpPointerHashPut(*(void *)(a1 + 344), v6, v13, v15);
      }
    }
    else
    {
      uint64_t v16 = glpLLVMTypeOf(a1, v6);
      uint64_t v13 = glpBuildAlloca(a1, v16);
      glpLLVMBuildStore(a1, v6, v13);
    }
    uint64_t v17 = *(void *)(a1 + 520);
    if (!v17)
    {
      uint64_t v17 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), 0, 0);
      *(void *)(a1 + 520) = v17;
    }
    v24[0] = v17;
    v24[1] = v10;
    uint64_t v18 = glpLLVMBuildGEP(a1, v13, v24, 2, "ptr");
    uint64_t v6 = glpLLVMBuildLoad(a1, v18, "var");
  }
  unsigned int Swizzle = glpOffsetNodeGetSwizzle(v8);
  uint64_t v6 = glpCGSwizzle(a1, 0, 0, v6, PrimitiveType, Swizzle);
  VectorElementuint64_t Expr = glpOffsetNodeGetVectorElementExpr(v8);
  if (!VectorElementExpr) {
    return v6;
  }
  uint64_t v21 = glpLLVMCGNode(a1, VectorElementExpr, 1);
  uint64_t v22 = glpLLVMCastOperation(a1, 87, v21, *(void *)(a1 + 40), "mtc");

  return glpLLVMBuildExtractElement(a1, v6, v22, "offv");
}

unint64_t glpLLVMWriteOutput(uint64_t a1, uint64_t a2)
{
  unint64_t result = glpWriteOutputNodeGetExtra(a2);
  unint64_t v4 = result;
  int v5 = *(_DWORD *)(a1 + 320);
  if (v5 == 4)
  {
    if (!*(void *)(a1 + 208)) {
      *(void *)(a1 + 208) = glpLLVMConstFromTypeCache(a1, 37, *(void *)(a1 + 200));
    }
    uint64_t v6 = *(unsigned int *)(a1 + 692);
    if ((int)v6 < 1)
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = 0;
      while (*(void *)(*(void *)(a1 + 696) + 8 * v7) != v4)
      {
        if (v6 == ++v7)
        {
          uint64_t v7 = *(unsigned int *)(a1 + 692);
          break;
        }
      }
    }
    uint64_t v8 = glpLayoutObjectFind(*(uint64_t **)(v4 + 8), 68);
    uint64_t v9 = glpLLVMGetVariablePointer(a1, v4);
    uint64_t v10 = glpPrecisionIndexFromSAFlags(*(void *)(v4 + 48));
    uint64_t v11 = glpTypeToLLVMType((void *)a1, *(unsigned int **)v4, v10, (void *)v4);
    uint64_t v12 = glpLLVMPointerType(a1, v11, 0);
    uint64_t v13 = glpLLVMCastOperation(a1, 86, v9, v12, "ptr");
    uint64_t v14 = glpLLVMBuildLoad(a1, v13, "out");
    double v15 = glpLayoutObjectFind(*(uint64_t **)(v4 + 8), 77);
    if (v15 && *((_DWORD *)v15 + 4) == 2) {
      *(_DWORD *)(a1 + 760) |= 0x1000u;
    }
    if (*((_DWORD *)v8 + 4) == 4)
    {
      uint64_t PrimitiveType = glpPrimitiveTypeGetPrimitiveType(*(void *)v4);
      if (glpPrimitiveTypeGetCategory(PrimitiveType) != 2)
      {
        int v18 = 1;
LABEL_25:
        uint64_t v20 = glpLLVMVectorType(a1, v11, 4);
        uint64_t inserted = glpLLVMConstFromTypeCache(a1, 37, v20);
        if (v18 >= 1)
        {
          for (unint64_t i = 0; i != v18; ++i)
          {
            if (i > 7)
            {
              uint64_t v23 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), i, 1);
            }
            else
            {
              unint64_t v22 = a1 + 8 * i;
              uint64_t v23 = *(void *)(v22 + 520);
              if (!v23)
              {
                uint64_t v23 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), i, 0);
                *(void *)(v22 + 520) = v23;
              }
            }
            uint64_t Element = v14;
            if (v18 != 1) {
              uint64_t Element = glpLLVMBuildExtractElement(a1, v14, v23, "comp");
            }
            uint64_t inserted = glpLLVMBuildInsertElement(a1, inserted, Element, v23, "color");
          }
        }
        goto LABEL_34;
      }
      int Length = glpPrimitiveVectorGetLength(PrimitiveType);
      if (Length <= 3)
      {
        int v18 = Length;
        if (Length > 1) {
          uint64_t v11 = glpLLVMGetElementType(a1, v11);
        }
        goto LABEL_25;
      }
    }
    uint64_t inserted = v14;
LABEL_34:
    unint64_t result = glpLLVMBuildInsertValue(a1, *(void *)(a1 + 208), inserted, v7, "returnValue");
    *(void *)(a1 + 208) = result;
    return result;
  }
  if (v5 == 2 || !v5)
  {
    return glpLLVMCGWriteVertexOuptut(a1, result);
  }
  return result;
}

void glpLLVMAddLineInformation(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    __n128 v48 = 0uLL;
    uint64_t v49 = 0;
    __n128 Location = glpASTNodeGetLocation(a2, &v48);
    uint64_t v4 = v49;
    if (v49 != -1)
    {
      uint64_t v5 = *(unsigned int *)(a1 + 260);
      int v6 = v5 + 1;
      int v7 = *(_DWORD *)(a1 + 256);
      if ((int)v5 + 1 <= v7)
      {
        uint64_t v10 = *(char **)(a1 + 264);
        int v11 = *(_DWORD *)(a1 + 260);
      }
      else
      {
        if (v7 <= 1) {
          int v7 = 1;
        }
        int v8 = 2 * v7;
        if (v8 <= v6) {
          uint64_t v9 = v6;
        }
        else {
          uint64_t v9 = v8;
        }
        uint64_t v10 = (char *)(*(uint64_t (**)(void, uint64_t, const char *, __n128))(a1 + 232))(*(void *)(a1 + 224), v9, "Vector Storage (uint8_t, growth)", Location);
        memcpy(v10, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
        (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
        *(_DWORD *)(a1 + 256) = v9;
        *(void *)(a1 + 264) = v10;
        int v11 = *(_DWORD *)(a1 + 260);
      }
      memmove(&v10[v5 + 1], &v10[v5], (v11 - v5));
      *(unsigned char *)(*(void *)(a1 + 264) + v5) = 104;
      ++*(_DWORD *)(a1 + 260);
      ++*(_DWORD *)(a1 + 296);
      unsigned int v12 = (char)glp_serialized_integer32_control(v4);
      uint64_t v13 = *(unsigned int *)(a1 + 260);
      int v14 = v13 + 1;
      int v15 = *(_DWORD *)(a1 + 256);
      if ((int)v13 + 1 <= v15)
      {
        int v18 = *(char **)(a1 + 264);
        int v19 = *(_DWORD *)(a1 + 260);
      }
      else
      {
        if (v15 <= 1) {
          int v15 = 1;
        }
        int v16 = 2 * v15;
        if (v16 <= v14) {
          uint64_t v17 = v14;
        }
        else {
          uint64_t v17 = v16;
        }
        int v18 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v17, "Vector Storage (uint8_t, growth)");
        memcpy(v18, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
        (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
        *(_DWORD *)(a1 + 256) = v17;
        *(void *)(a1 + 264) = v18;
        int v19 = *(_DWORD *)(a1 + 260);
      }
      memmove(&v18[v13 + 1], &v18[v13], (v19 - v13));
      *(unsigned char *)(*(void *)(a1 + 264) + v13) = v12;
      int v20 = *(_DWORD *)(a1 + 260);
      unsigned int v21 = v20 + 1;
      *(_DWORD *)(a1 + 260) = v20 + 1;
      if ((v12 & 0x80000000) != 0)
      {
        switch((v12 >> 1) & 7)
        {
          case 0u:
            unsigned int v22 = v20 + 2;
            int v23 = *(_DWORD *)(a1 + 256);
            if (v22 <= v23)
            {
              unint64_t v26 = *(char **)(a1 + 264);
              unsigned int v27 = v21;
            }
            else
            {
              if (v23 <= 1) {
                int v23 = 1;
              }
              int v24 = 2 * v23;
              if (v24 <= (int)v22) {
                uint64_t v25 = v22;
              }
              else {
                uint64_t v25 = v24;
              }
              unint64_t v26 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v25, "Vector Storage (uint8_t, growth)");
              memcpy(v26, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
              (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
              *(_DWORD *)(a1 + 256) = v25;
              *(void *)(a1 + 264) = v26;
              unsigned int v27 = *(_DWORD *)(a1 + 260);
            }
            memmove(&v26[v21 + 1], &v26[v21], v27 - v21);
            *(unsigned char *)(*(void *)(a1 + 264) + v21) = v4;
            int v47 = 1;
            goto LABEL_57;
          case 1u:
            unsigned int v40 = v20 + 3;
            int v41 = *(_DWORD *)(a1 + 256);
            if (v40 <= v41)
            {
              int v44 = *(char **)(a1 + 264);
              unsigned int v45 = v21;
            }
            else
            {
              if (v41 <= 1) {
                int v41 = 1;
              }
              int v42 = 2 * v41;
              if (v42 <= (int)v40) {
                uint64_t v43 = v40;
              }
              else {
                uint64_t v43 = v42;
              }
              int v44 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v43, "Vector Storage (uint8_t, growth)");
              memcpy(v44, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
              (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
              *(_DWORD *)(a1 + 256) = v43;
              *(void *)(a1 + 264) = v44;
              unsigned int v45 = *(_DWORD *)(a1 + 260);
            }
            memmove(&v44[v21 + 1], &v44[v21], v45 - v21);
            *(_WORD *)(*(void *)(a1 + 264) + v21) = v4;
            int v47 = 2;
            goto LABEL_57;
          case 2u:
            unsigned int v28 = v20 + 4;
            int v29 = *(_DWORD *)(a1 + 256);
            if (v28 <= v29)
            {
              uint64_t v32 = *(char **)(a1 + 264);
              unsigned int v33 = v21;
            }
            else
            {
              if (v29 <= 1) {
                int v29 = 1;
              }
              int v30 = 2 * v29;
              if (v30 <= (int)v28) {
                uint64_t v31 = v28;
              }
              else {
                uint64_t v31 = v30;
              }
              uint64_t v32 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v31, "Vector Storage (uint8_t, growth)");
              memcpy(v32, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
              (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
              *(_DWORD *)(a1 + 256) = v31;
              *(void *)(a1 + 264) = v32;
              unsigned int v33 = *(_DWORD *)(a1 + 260);
            }
            memmove(&v32[v21 + 1], &v32[v21], v33 - v21);
            uint64_t v46 = *(void *)(a1 + 264) + v21;
            *(unsigned char *)(v46 + 2) = BYTE2(v4);
            *(_WORD *)uint64_t v46 = v4;
            int v47 = 3;
            goto LABEL_57;
          case 3u:
            unsigned int v34 = v20 + 5;
            int v35 = *(_DWORD *)(a1 + 256);
            if (v34 <= v35)
            {
              uint64_t v38 = *(char **)(a1 + 264);
              unsigned int v39 = v21;
            }
            else
            {
              if (v35 <= 1) {
                int v35 = 1;
              }
              int v36 = 2 * v35;
              if (v36 <= (int)v34) {
                uint64_t v37 = v34;
              }
              else {
                uint64_t v37 = v36;
              }
              uint64_t v38 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v37, "Vector Storage (uint8_t, growth)");
              memcpy(v38, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
              (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
              *(_DWORD *)(a1 + 256) = v37;
              *(void *)(a1 + 264) = v38;
              unsigned int v39 = *(_DWORD *)(a1 + 260);
            }
            memmove(&v38[v21 + 1], &v38[v21], v39 - v21);
            *(_DWORD *)(*(void *)(a1 + 264) + v21) = v4;
            int v47 = 4;
LABEL_57:
            *(_DWORD *)(a1 + 260) += v47;
            break;
          default:
            return;
        }
      }
    }
  }
}

uint64_t glpPrimitiveTypeToLLVMType(void *a1, uint64_t a2, uint64_t a3)
{
  switch(glpPrimitiveTypeGetCategory(a2))
  {
    case 0u:
      return a1[11];
    case 1u:
      if ((int)a2 > 8)
      {
        if (a2 == 9) {
          return a1[8];
        }
        if (a2 != 36)
        {
          if (a2 == 62) {
            return a1[12];
          }
          goto LABEL_18;
        }
LABEL_15:
        if (a3 == 2) {
          return a1[58];
        }
        if (a3 == 1) {
          return a1[57];
        }
        return a1[59];
      }
      if (a2 == 1)
      {
        if (a3 == 2) {
          return a1[61];
        }
        if (a3 == 1) {
          return a1[60];
        }
        return a1[62];
      }
      if (a2 == 5) {
        goto LABEL_15;
      }
LABEL_18:
      uint64_t Length = glpPrimitiveVectorGetLength(a2);
      uint64_t ElementType = glpPrimitiveVectorGetElementType(a2);
      uint64_t v14 = glpPrimitiveTypeToLLVMType(a1, ElementType, a3);
      return glpLLVMVectorType((uint64_t)a1, v14, Length);
    case 2u:
      goto LABEL_18;
    case 3u:
      uint64_t ColumnType = glpPrimitiveMatrixGetColumnType(a2);
      uint64_t PrimitiveType = glpGetPrimitiveType(a2);
      unsigned int v9 = glpABIGetTypeSize(0, (uint64_t)PrimitiveType, 0);
      uint64_t Size = glpTypeSizeGetSize(v9);
      uint64_t v11 = glpPrimitiveTypeToLLVMType(a1, ColumnType, a3);
      return glpLLVMArrayType((uint64_t)a1, v11, Size);
    case 4u:
      return a1[5];
    default:
      glpPrimitiveTypeToLLVMType_cold_1(a2);
  }
}

uint64_t glpLLVMTypeOf(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 260);
  int v5 = v4 + 1;
  int v6 = *(_DWORD *)(a1 + 256);
  if ((int)v4 + 1 <= v6)
  {
    unsigned int v9 = *(char **)(a1 + 264);
    int v10 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v6 <= 1) {
      int v6 = 1;
    }
    int v7 = 2 * v6;
    if (v7 <= v5) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v7;
    }
    unsigned int v9 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v8, "Vector Storage (uint8_t, growth)");
    memcpy(v9, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v8;
    *(void *)(a1 + 264) = v9;
    int v10 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v9[v4 + 1], &v9[v4], (v10 - v4));
  *(unsigned char *)(*(void *)(a1 + 264) + v4) = 40;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMValue(a1, a2);
  uint64_t result = *(int *)(a1 + 304);
  *(_DWORD *)(a1 + 304) = result + 1;
  return result;
}

uint64_t glpLLVMBuildFCmp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 260);
  int v11 = v10 + 1;
  int v12 = *(_DWORD *)(a1 + 256);
  if ((int)v10 + 1 <= v12)
  {
    int v15 = *(char **)(a1 + 264);
    int v16 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v12 <= 1) {
      int v12 = 1;
    }
    int v13 = 2 * v12;
    if (v13 <= v11) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = v13;
    }
    int v15 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v14, "Vector Storage (uint8_t, growth)");
    memcpy(v15, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v14;
    *(void *)(a1 + 264) = v15;
    int v16 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v15[v10 + 1], &v15[v10], (v16 - v10));
  *(unsigned char *)(*(void *)(a1 + 264) + v10) = 90;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  unsigned int v17 = (char)glp_serialized_integer32_control(a2);
  uint64_t v18 = *(unsigned int *)(a1 + 260);
  int v19 = v18 + 1;
  int v20 = *(_DWORD *)(a1 + 256);
  if ((int)v18 + 1 <= v20)
  {
    int v23 = *(char **)(a1 + 264);
    int v24 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v20 <= 1) {
      int v20 = 1;
    }
    int v21 = 2 * v20;
    if (v21 <= v19) {
      uint64_t v22 = v19;
    }
    else {
      uint64_t v22 = v21;
    }
    int v23 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v22, "Vector Storage (uint8_t, growth)");
    memcpy(v23, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v22;
    *(void *)(a1 + 264) = v23;
    int v24 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v23[v18 + 1], &v23[v18], (v24 - v18));
  *(unsigned char *)(*(void *)(a1 + 264) + v18) = v17;
  int v25 = *(_DWORD *)(a1 + 260);
  unsigned int v26 = v25 + 1;
  *(_DWORD *)(a1 + 260) = v25 + 1;
  if ((v17 & 0x80000000) != 0)
  {
    switch((v17 >> 1) & 7)
    {
      case 0u:
        unsigned int v27 = v25 + 2;
        int v28 = *(_DWORD *)(a1 + 256);
        if (v27 <= v28)
        {
          uint64_t v31 = *(char **)(a1 + 264);
          unsigned int v32 = v26;
        }
        else
        {
          if (v28 <= 1) {
            int v28 = 1;
          }
          int v29 = 2 * v28;
          if (v29 <= (int)v27) {
            uint64_t v30 = v27;
          }
          else {
            uint64_t v30 = v29;
          }
          uint64_t v31 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v30, "Vector Storage (uint8_t, growth)");
          memcpy(v31, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v30;
          *(void *)(a1 + 264) = v31;
          unsigned int v32 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v31[v26 + 1], &v31[v26], v32 - v26);
        *(unsigned char *)(*(void *)(a1 + 264) + v26) = a2;
        int v51 = 1;
        goto LABEL_55;
      case 1u:
        unsigned int v45 = v25 + 3;
        int v46 = *(_DWORD *)(a1 + 256);
        if (v45 <= v46)
        {
          uint64_t v49 = *(char **)(a1 + 264);
          unsigned int v50 = v26;
        }
        else
        {
          if (v46 <= 1) {
            int v46 = 1;
          }
          int v47 = 2 * v46;
          if (v47 <= (int)v45) {
            uint64_t v48 = v45;
          }
          else {
            uint64_t v48 = v47;
          }
          uint64_t v49 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v48, "Vector Storage (uint8_t, growth)");
          memcpy(v49, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v48;
          *(void *)(a1 + 264) = v49;
          unsigned int v50 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v49[v26 + 1], &v49[v26], v50 - v26);
        *(_WORD *)(*(void *)(a1 + 264) + v26) = a2;
        int v51 = 2;
        goto LABEL_55;
      case 2u:
        unsigned int v33 = v25 + 4;
        int v34 = *(_DWORD *)(a1 + 256);
        if (v33 <= v34)
        {
          uint64_t v37 = *(char **)(a1 + 264);
          unsigned int v38 = v26;
        }
        else
        {
          if (v34 <= 1) {
            int v34 = 1;
          }
          int v35 = 2 * v34;
          if (v35 <= (int)v33) {
            uint64_t v36 = v33;
          }
          else {
            uint64_t v36 = v35;
          }
          uint64_t v37 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v36, "Vector Storage (uint8_t, growth)");
          memcpy(v37, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v36;
          *(void *)(a1 + 264) = v37;
          unsigned int v38 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v37[v26 + 1], &v37[v26], v38 - v26);
        uint64_t v52 = *(void *)(a1 + 264) + v26;
        *(unsigned char *)(v52 + 2) = BYTE2(a2);
        *(_WORD *)uint64_t v52 = a2;
        int v51 = 3;
        goto LABEL_55;
      case 3u:
        unsigned int v39 = v25 + 5;
        int v40 = *(_DWORD *)(a1 + 256);
        if (v39 <= v40)
        {
          uint64_t v43 = *(char **)(a1 + 264);
          unsigned int v44 = v26;
        }
        else
        {
          if (v40 <= 1) {
            int v40 = 1;
          }
          int v41 = 2 * v40;
          if (v41 <= (int)v39) {
            uint64_t v42 = v39;
          }
          else {
            uint64_t v42 = v41;
          }
          uint64_t v43 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v42, "Vector Storage (uint8_t, growth)");
          memcpy(v43, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v42;
          *(void *)(a1 + 264) = v43;
          unsigned int v44 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v43[v26 + 1], &v43[v26], v44 - v26);
        *(_DWORD *)(*(void *)(a1 + 264) + v26) = a2;
        int v51 = 4;
LABEL_55:
        *(_DWORD *)(a1 + 260) += v51;
        break;
      default:
        break;
    }
  }
  glpSerializeLLVMValue(a1, a3);
  glpSerializeLLVMValue(a1, a4);
  if (*(_DWORD *)(a1 + 300))
  {
    size_t v53 = strlen(a5) + 1;
    uint64_t v54 = *(unsigned int *)(a1 + 260);
    int v55 = v53 + v54;
    int v56 = *(_DWORD *)(a1 + 256);
    if ((int)v53 + (int)v54 <= v56)
    {
      uint64_t v59 = *(char **)(a1 + 264);
      int v60 = *(_DWORD *)(a1 + 260);
    }
    else
    {
      if (v56 <= 1) {
        int v56 = 1;
      }
      int v57 = 2 * v56;
      if (v57 <= v55) {
        uint64_t v58 = v55;
      }
      else {
        uint64_t v58 = v57;
      }
      uint64_t v59 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v58, "Vector Storage (uint8_t, growth)");
      memcpy(v59, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
      (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
      *(_DWORD *)(a1 + 256) = v58;
      *(void *)(a1 + 264) = v59;
      int v60 = *(_DWORD *)(a1 + 260);
    }
    memmove(&v59[v54 + 1], &v59[v54], (v60 - v54));
    memcpy((void *)(*(void *)(a1 + 264) + v54), a5, v53);
    *(_DWORD *)(a1 + 260) += v53;
  }
  uint64_t result = *(int *)(a1 + 308);
  *(_DWORD *)(a1 + 308) = result + 1;
  return result;
}

uint64_t glpLLVMConstFromTypeCache(uint64_t a1, int a2, uint64_t a3)
{
  char v4 = a2;
  if ((*(_WORD *)(a1 + 832) & 4) != 0)
  {
    *(_DWORD *)uint64_t v14 = a2;
    *(void *)&v14[4] = a3;
    LODWORD(v7) = 12;
    for (uint64_t i = 11; i != -1; --i)
      uint64_t v7 = (32 * v7 + (v7 >> 2) + (char)v14[i]) ^ v7;
    uint64_t v9 = (v7 << 32) | 0xC;
    uint64_t v10 = glpDataHashGet(*(void *)(a1 + 392), v14, v9);
    if (!v10)
    {
      uint64_t v10 = glpLLVMConstFromType(a1, v4, a3);
      int v11 = (_DWORD *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 368))(*(void *)(a1 + 360), 12, "");
      uint64_t v12 = *(void *)v14;
      v11[2] = *(_DWORD *)&v14[8];
      *(void *)int v11 = v12;
      glpDataHashPut(*(void *)(a1 + 392), v11, v9, v10, v13);
    }
    return v10;
  }
  else
  {
    return glpLLVMConstFromType(a1, a2, a3);
  }
}

uint64_t glpLLVMBuildICmp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 260);
  int v11 = v10 + 1;
  int v12 = *(_DWORD *)(a1 + 256);
  if ((int)v10 + 1 <= v12)
  {
    int v15 = *(char **)(a1 + 264);
    int v16 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v12 <= 1) {
      int v12 = 1;
    }
    int v13 = 2 * v12;
    if (v13 <= v11) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = v13;
    }
    int v15 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v14, "Vector Storage (uint8_t, growth)");
    memcpy(v15, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v14;
    *(void *)(a1 + 264) = v15;
    int v16 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v15[v10 + 1], &v15[v10], (v16 - v10));
  *(unsigned char *)(*(void *)(a1 + 264) + v10) = 89;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  unsigned int v17 = (char)glp_serialized_integer32_control(a2);
  uint64_t v18 = *(unsigned int *)(a1 + 260);
  int v19 = v18 + 1;
  int v20 = *(_DWORD *)(a1 + 256);
  if ((int)v18 + 1 <= v20)
  {
    int v23 = *(char **)(a1 + 264);
    int v24 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v20 <= 1) {
      int v20 = 1;
    }
    int v21 = 2 * v20;
    if (v21 <= v19) {
      uint64_t v22 = v19;
    }
    else {
      uint64_t v22 = v21;
    }
    int v23 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v22, "Vector Storage (uint8_t, growth)");
    memcpy(v23, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v22;
    *(void *)(a1 + 264) = v23;
    int v24 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v23[v18 + 1], &v23[v18], (v24 - v18));
  *(unsigned char *)(*(void *)(a1 + 264) + v18) = v17;
  int v25 = *(_DWORD *)(a1 + 260);
  unsigned int v26 = v25 + 1;
  *(_DWORD *)(a1 + 260) = v25 + 1;
  if ((v17 & 0x80000000) != 0)
  {
    switch((v17 >> 1) & 7)
    {
      case 0u:
        unsigned int v27 = v25 + 2;
        int v28 = *(_DWORD *)(a1 + 256);
        if (v27 <= v28)
        {
          uint64_t v31 = *(char **)(a1 + 264);
          unsigned int v32 = v26;
        }
        else
        {
          if (v28 <= 1) {
            int v28 = 1;
          }
          int v29 = 2 * v28;
          if (v29 <= (int)v27) {
            uint64_t v30 = v27;
          }
          else {
            uint64_t v30 = v29;
          }
          uint64_t v31 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v30, "Vector Storage (uint8_t, growth)");
          memcpy(v31, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v30;
          *(void *)(a1 + 264) = v31;
          unsigned int v32 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v31[v26 + 1], &v31[v26], v32 - v26);
        *(unsigned char *)(*(void *)(a1 + 264) + v26) = a2;
        int v51 = 1;
        goto LABEL_55;
      case 1u:
        unsigned int v45 = v25 + 3;
        int v46 = *(_DWORD *)(a1 + 256);
        if (v45 <= v46)
        {
          uint64_t v49 = *(char **)(a1 + 264);
          unsigned int v50 = v26;
        }
        else
        {
          if (v46 <= 1) {
            int v46 = 1;
          }
          int v47 = 2 * v46;
          if (v47 <= (int)v45) {
            uint64_t v48 = v45;
          }
          else {
            uint64_t v48 = v47;
          }
          uint64_t v49 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v48, "Vector Storage (uint8_t, growth)");
          memcpy(v49, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v48;
          *(void *)(a1 + 264) = v49;
          unsigned int v50 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v49[v26 + 1], &v49[v26], v50 - v26);
        *(_WORD *)(*(void *)(a1 + 264) + v26) = a2;
        int v51 = 2;
        goto LABEL_55;
      case 2u:
        unsigned int v33 = v25 + 4;
        int v34 = *(_DWORD *)(a1 + 256);
        if (v33 <= v34)
        {
          uint64_t v37 = *(char **)(a1 + 264);
          unsigned int v38 = v26;
        }
        else
        {
          if (v34 <= 1) {
            int v34 = 1;
          }
          int v35 = 2 * v34;
          if (v35 <= (int)v33) {
            uint64_t v36 = v33;
          }
          else {
            uint64_t v36 = v35;
          }
          uint64_t v37 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v36, "Vector Storage (uint8_t, growth)");
          memcpy(v37, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v36;
          *(void *)(a1 + 264) = v37;
          unsigned int v38 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v37[v26 + 1], &v37[v26], v38 - v26);
        uint64_t v52 = *(void *)(a1 + 264) + v26;
        *(unsigned char *)(v52 + 2) = BYTE2(a2);
        *(_WORD *)uint64_t v52 = a2;
        int v51 = 3;
        goto LABEL_55;
      case 3u:
        unsigned int v39 = v25 + 5;
        int v40 = *(_DWORD *)(a1 + 256);
        if (v39 <= v40)
        {
          uint64_t v43 = *(char **)(a1 + 264);
          unsigned int v44 = v26;
        }
        else
        {
          if (v40 <= 1) {
            int v40 = 1;
          }
          int v41 = 2 * v40;
          if (v41 <= (int)v39) {
            uint64_t v42 = v39;
          }
          else {
            uint64_t v42 = v41;
          }
          uint64_t v43 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v42, "Vector Storage (uint8_t, growth)");
          memcpy(v43, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v42;
          *(void *)(a1 + 264) = v43;
          unsigned int v44 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v43[v26 + 1], &v43[v26], v44 - v26);
        *(_DWORD *)(*(void *)(a1 + 264) + v26) = a2;
        int v51 = 4;
LABEL_55:
        *(_DWORD *)(a1 + 260) += v51;
        break;
      default:
        break;
    }
  }
  glpSerializeLLVMValue(a1, a3);
  glpSerializeLLVMValue(a1, a4);
  if (*(_DWORD *)(a1 + 300))
  {
    size_t v53 = strlen(a5) + 1;
    uint64_t v54 = *(unsigned int *)(a1 + 260);
    int v55 = v53 + v54;
    int v56 = *(_DWORD *)(a1 + 256);
    if ((int)v53 + (int)v54 <= v56)
    {
      uint64_t v59 = *(char **)(a1 + 264);
      int v60 = *(_DWORD *)(a1 + 260);
    }
    else
    {
      if (v56 <= 1) {
        int v56 = 1;
      }
      int v57 = 2 * v56;
      if (v57 <= v55) {
        uint64_t v58 = v55;
      }
      else {
        uint64_t v58 = v57;
      }
      uint64_t v59 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v58, "Vector Storage (uint8_t, growth)");
      memcpy(v59, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
      (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
      *(_DWORD *)(a1 + 256) = v58;
      *(void *)(a1 + 264) = v59;
      int v60 = *(_DWORD *)(a1 + 260);
    }
    memmove(&v59[v54 + 1], &v59[v54], (v60 - v54));
    memcpy((void *)(*(void *)(a1 + 264) + v54), a5, v53);
    *(_DWORD *)(a1 + 260) += v53;
  }
  uint64_t result = *(int *)(a1 + 308);
  *(_DWORD *)(a1 + 308) = result + 1;
  return result;
}

uint64_t glpLLVMCastOperation(uint64_t a1, char a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 260);
  int v11 = v10 + 1;
  int v12 = *(_DWORD *)(a1 + 256);
  if ((int)v10 + 1 <= v12)
  {
    int v15 = *(char **)(a1 + 264);
    int v16 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v12 <= 1) {
      int v12 = 1;
    }
    int v13 = 2 * v12;
    if (v13 <= v11) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = v13;
    }
    int v15 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v14, "Vector Storage (uint8_t, growth)");
    memcpy(v15, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v14;
    *(void *)(a1 + 264) = v15;
    int v16 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v15[v10 + 1], &v15[v10], (v16 - v10));
  *(unsigned char *)(*(void *)(a1 + 264) + v10) = a2;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMValue(a1, a3);
  glpSerializeLLVMType(a1, a4);
  if (*(_DWORD *)(a1 + 300))
  {
    size_t v17 = strlen(a5) + 1;
    uint64_t v18 = *(unsigned int *)(a1 + 260);
    int v19 = v17 + v18;
    int v20 = *(_DWORD *)(a1 + 256);
    if ((int)v17 + (int)v18 <= v20)
    {
      int v23 = *(char **)(a1 + 264);
      int v24 = *(_DWORD *)(a1 + 260);
    }
    else
    {
      if (v20 <= 1) {
        int v20 = 1;
      }
      int v21 = 2 * v20;
      if (v21 <= v19) {
        uint64_t v22 = v19;
      }
      else {
        uint64_t v22 = v21;
      }
      int v23 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v22, "Vector Storage (uint8_t, growth)");
      memcpy(v23, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
      (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
      *(_DWORD *)(a1 + 256) = v22;
      *(void *)(a1 + 264) = v23;
      int v24 = *(_DWORD *)(a1 + 260);
    }
    memmove(&v23[v18 + 1], &v23[v18], (v24 - v18));
    memcpy((void *)(*(void *)(a1 + 264) + v18), a5, v17);
    *(_DWORD *)(a1 + 260) += v17;
  }
  uint64_t result = *(int *)(a1 + 308);
  *(_DWORD *)(a1 + 308) = result + 1;
  return result;
}

uint64_t glpLLVMBuildConversion(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  v18[1] = *MEMORY[0x263EF8340];
  int v15 = 0;
  uint64_t v16 = a2;
  int v11 = glpLLVMGetTypeString(&v15, a4, a5);
  uint64_t v14 = 0;
  int v12 = glpLLVMGetTypeString(&v14, a6, a7);
  snprintf_l(v17, 0x200uLL, 0, "%s%s.%s%s.%s", "air.convert", v14, v12, v15, v11);
  v18[0] = 0x300000001;
  return glpLLVMCallFunction(a1, v17, a3, &v16, 1, (unsigned int *)v18, 2);
}

uint64_t glpLLVMVectorType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 260);
  int v7 = v6 + 1;
  int v8 = *(_DWORD *)(a1 + 256);
  if ((int)v6 + 1 <= v8)
  {
    int v11 = *(char **)(a1 + 264);
    int v12 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v8 <= 1) {
      int v8 = 1;
    }
    int v9 = 2 * v8;
    if (v9 <= v7) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = v9;
    }
    int v11 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v10, "Vector Storage (uint8_t, growth)");
    memcpy(v11, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v10;
    *(void *)(a1 + 264) = v11;
    int v12 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v11[v6 + 1], &v11[v6], (v12 - v6));
  *(unsigned char *)(*(void *)(a1 + 264) + v6) = 9;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMType(a1, a2);
  unsigned int v13 = (char)glp_serialized_integer32_control(a3);
  uint64_t v14 = *(unsigned int *)(a1 + 260);
  int v15 = v14 + 1;
  int v16 = *(_DWORD *)(a1 + 256);
  if ((int)v14 + 1 <= v16)
  {
    int v19 = *(char **)(a1 + 264);
    int v20 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v16 <= 1) {
      int v16 = 1;
    }
    int v17 = 2 * v16;
    if (v17 <= v15) {
      uint64_t v18 = v15;
    }
    else {
      uint64_t v18 = v17;
    }
    int v19 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v18, "Vector Storage (uint8_t, growth)");
    memcpy(v19, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v18;
    *(void *)(a1 + 264) = v19;
    int v20 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v19[v14 + 1], &v19[v14], (v20 - v14));
  *(unsigned char *)(*(void *)(a1 + 264) + v14) = v13;
  int v21 = *(_DWORD *)(a1 + 260);
  unsigned int v22 = v21 + 1;
  *(_DWORD *)(a1 + 260) = v21 + 1;
  if ((v13 & 0x80000000) != 0)
  {
    switch((v13 >> 1) & 7)
    {
      case 0u:
        unsigned int v23 = v21 + 2;
        int v24 = *(_DWORD *)(a1 + 256);
        if (v23 <= v24)
        {
          unsigned int v27 = *(char **)(a1 + 264);
          unsigned int v28 = v22;
        }
        else
        {
          if (v24 <= 1) {
            int v24 = 1;
          }
          int v25 = 2 * v24;
          if (v25 <= (int)v23) {
            uint64_t v26 = v23;
          }
          else {
            uint64_t v26 = v25;
          }
          unsigned int v27 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v26, "Vector Storage (uint8_t, growth)");
          memcpy(v27, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v26;
          *(void *)(a1 + 264) = v27;
          unsigned int v28 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v27[v22 + 1], &v27[v22], v28 - v22);
        *(unsigned char *)(*(void *)(a1 + 264) + v22) = a3;
        int v47 = 1;
        goto LABEL_55;
      case 1u:
        unsigned int v41 = v21 + 3;
        int v42 = *(_DWORD *)(a1 + 256);
        if (v41 <= v42)
        {
          unsigned int v45 = *(char **)(a1 + 264);
          unsigned int v46 = v22;
        }
        else
        {
          if (v42 <= 1) {
            int v42 = 1;
          }
          int v43 = 2 * v42;
          if (v43 <= (int)v41) {
            uint64_t v44 = v41;
          }
          else {
            uint64_t v44 = v43;
          }
          unsigned int v45 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v44, "Vector Storage (uint8_t, growth)");
          memcpy(v45, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v44;
          *(void *)(a1 + 264) = v45;
          unsigned int v46 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v45[v22 + 1], &v45[v22], v46 - v22);
        *(_WORD *)(*(void *)(a1 + 264) + v22) = a3;
        int v47 = 2;
        goto LABEL_55;
      case 2u:
        unsigned int v29 = v21 + 4;
        int v30 = *(_DWORD *)(a1 + 256);
        if (v29 <= v30)
        {
          unsigned int v33 = *(char **)(a1 + 264);
          unsigned int v34 = v22;
        }
        else
        {
          if (v30 <= 1) {
            int v30 = 1;
          }
          int v31 = 2 * v30;
          if (v31 <= (int)v29) {
            uint64_t v32 = v29;
          }
          else {
            uint64_t v32 = v31;
          }
          unsigned int v33 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v32, "Vector Storage (uint8_t, growth)");
          memcpy(v33, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v32;
          *(void *)(a1 + 264) = v33;
          unsigned int v34 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v33[v22 + 1], &v33[v22], v34 - v22);
        uint64_t v48 = *(void *)(a1 + 264) + v22;
        *(unsigned char *)(v48 + 2) = BYTE2(a3);
        *(_WORD *)uint64_t v48 = a3;
        int v47 = 3;
        goto LABEL_55;
      case 3u:
        unsigned int v35 = v21 + 5;
        int v36 = *(_DWORD *)(a1 + 256);
        if (v35 <= v36)
        {
          unsigned int v39 = *(char **)(a1 + 264);
          unsigned int v40 = v22;
        }
        else
        {
          if (v36 <= 1) {
            int v36 = 1;
          }
          int v37 = 2 * v36;
          if (v37 <= (int)v35) {
            uint64_t v38 = v35;
          }
          else {
            uint64_t v38 = v37;
          }
          unsigned int v39 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v38, "Vector Storage (uint8_t, growth)");
          memcpy(v39, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v38;
          *(void *)(a1 + 264) = v39;
          unsigned int v40 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v39[v22 + 1], &v39[v22], v40 - v22);
        *(_DWORD *)(*(void *)(a1 + 264) + v22) = a3;
        int v47 = 4;
LABEL_55:
        *(_DWORD *)(a1 + 260) += v47;
        break;
      default:
        break;
    }
  }
  uint64_t result = *(int *)(a1 + 304);
  *(_DWORD *)(a1 + 304) = result + 1;
  return result;
}

uint64_t glpTypeGetVec4s_0(uint64_t a1)
{
  uint64_t v1 = glpABIGetTypeSize(0, a1, 0);

  return glpTypeSizeGetSize(v1);
}

uint64_t glpLLVMArrayType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 260);
  int v7 = v6 + 1;
  int v8 = *(_DWORD *)(a1 + 256);
  if ((int)v6 + 1 <= v8)
  {
    int v11 = *(char **)(a1 + 264);
    int v12 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v8 <= 1) {
      int v8 = 1;
    }
    int v9 = 2 * v8;
    if (v9 <= v7) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = v9;
    }
    int v11 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v10, "Vector Storage (uint8_t, growth)");
    memcpy(v11, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v10;
    *(void *)(a1 + 264) = v11;
    int v12 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v11[v6 + 1], &v11[v6], (v12 - v6));
  *(unsigned char *)(*(void *)(a1 + 264) + v6) = 38;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMType(a1, a2);
  unsigned int v13 = (char)glp_serialized_integer32_control(a3);
  uint64_t v14 = *(unsigned int *)(a1 + 260);
  int v15 = v14 + 1;
  int v16 = *(_DWORD *)(a1 + 256);
  if ((int)v14 + 1 <= v16)
  {
    int v19 = *(char **)(a1 + 264);
    int v20 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v16 <= 1) {
      int v16 = 1;
    }
    int v17 = 2 * v16;
    if (v17 <= v15) {
      uint64_t v18 = v15;
    }
    else {
      uint64_t v18 = v17;
    }
    int v19 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v18, "Vector Storage (uint8_t, growth)");
    memcpy(v19, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v18;
    *(void *)(a1 + 264) = v19;
    int v20 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v19[v14 + 1], &v19[v14], (v20 - v14));
  *(unsigned char *)(*(void *)(a1 + 264) + v14) = v13;
  int v21 = *(_DWORD *)(a1 + 260);
  unsigned int v22 = v21 + 1;
  *(_DWORD *)(a1 + 260) = v21 + 1;
  if ((v13 & 0x80000000) != 0)
  {
    switch((v13 >> 1) & 7)
    {
      case 0u:
        unsigned int v23 = v21 + 2;
        int v24 = *(_DWORD *)(a1 + 256);
        if (v23 <= v24)
        {
          unsigned int v27 = *(char **)(a1 + 264);
          unsigned int v28 = v22;
        }
        else
        {
          if (v24 <= 1) {
            int v24 = 1;
          }
          int v25 = 2 * v24;
          if (v25 <= (int)v23) {
            uint64_t v26 = v23;
          }
          else {
            uint64_t v26 = v25;
          }
          unsigned int v27 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v26, "Vector Storage (uint8_t, growth)");
          memcpy(v27, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v26;
          *(void *)(a1 + 264) = v27;
          unsigned int v28 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v27[v22 + 1], &v27[v22], v28 - v22);
        *(unsigned char *)(*(void *)(a1 + 264) + v22) = a3;
        int v47 = 1;
        goto LABEL_55;
      case 1u:
        unsigned int v41 = v21 + 3;
        int v42 = *(_DWORD *)(a1 + 256);
        if (v41 <= v42)
        {
          unsigned int v45 = *(char **)(a1 + 264);
          unsigned int v46 = v22;
        }
        else
        {
          if (v42 <= 1) {
            int v42 = 1;
          }
          int v43 = 2 * v42;
          if (v43 <= (int)v41) {
            uint64_t v44 = v41;
          }
          else {
            uint64_t v44 = v43;
          }
          unsigned int v45 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v44, "Vector Storage (uint8_t, growth)");
          memcpy(v45, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v44;
          *(void *)(a1 + 264) = v45;
          unsigned int v46 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v45[v22 + 1], &v45[v22], v46 - v22);
        *(_WORD *)(*(void *)(a1 + 264) + v22) = a3;
        int v47 = 2;
        goto LABEL_55;
      case 2u:
        unsigned int v29 = v21 + 4;
        int v30 = *(_DWORD *)(a1 + 256);
        if (v29 <= v30)
        {
          unsigned int v33 = *(char **)(a1 + 264);
          unsigned int v34 = v22;
        }
        else
        {
          if (v30 <= 1) {
            int v30 = 1;
          }
          int v31 = 2 * v30;
          if (v31 <= (int)v29) {
            uint64_t v32 = v29;
          }
          else {
            uint64_t v32 = v31;
          }
          unsigned int v33 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v32, "Vector Storage (uint8_t, growth)");
          memcpy(v33, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v32;
          *(void *)(a1 + 264) = v33;
          unsigned int v34 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v33[v22 + 1], &v33[v22], v34 - v22);
        uint64_t v48 = *(void *)(a1 + 264) + v22;
        *(unsigned char *)(v48 + 2) = BYTE2(a3);
        *(_WORD *)uint64_t v48 = a3;
        int v47 = 3;
        goto LABEL_55;
      case 3u:
        unsigned int v35 = v21 + 5;
        int v36 = *(_DWORD *)(a1 + 256);
        if (v35 <= v36)
        {
          unsigned int v39 = *(char **)(a1 + 264);
          unsigned int v40 = v22;
        }
        else
        {
          if (v36 <= 1) {
            int v36 = 1;
          }
          int v37 = 2 * v36;
          if (v37 <= (int)v35) {
            uint64_t v38 = v35;
          }
          else {
            uint64_t v38 = v37;
          }
          unsigned int v39 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v38, "Vector Storage (uint8_t, growth)");
          memcpy(v39, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v38;
          *(void *)(a1 + 264) = v39;
          unsigned int v40 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v39[v22 + 1], &v39[v22], v40 - v22);
        *(_DWORD *)(*(void *)(a1 + 264) + v22) = a3;
        int v47 = 4;
LABEL_55:
        *(_DWORD *)(a1 + 260) += v47;
        break;
      default:
        break;
    }
  }
  uint64_t result = *(int *)(a1 + 304);
  *(_DWORD *)(a1 + 304) = result + 1;
  return result;
}

void *glpSerializeLLVMValue(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  unsigned int v4 = (char)glp_serialized_integer32_control(a2);
  uint64_t v5 = *(unsigned int *)(a1 + 260);
  int v6 = v5 + 1;
  int v7 = *(_DWORD *)(a1 + 256);
  if ((int)v5 + 1 <= v7)
  {
    uint64_t v10 = *(char **)(a1 + 264);
    int v11 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v7 <= 1) {
      int v7 = 1;
    }
    int v8 = 2 * v7;
    if (v8 <= v6) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = v8;
    }
    uint64_t v10 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v9, "Vector Storage (uint8_t, growth)");
    memcpy(v10, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v9;
    *(void *)(a1 + 264) = v10;
    int v11 = *(_DWORD *)(a1 + 260);
  }
  uint64_t result = memmove(&v10[v5 + 1], &v10[v5], (v11 - v5));
  *(unsigned char *)(*(void *)(a1 + 264) + v5) = v4;
  int v13 = *(_DWORD *)(a1 + 260);
  unsigned int v14 = v13 + 1;
  *(_DWORD *)(a1 + 260) = v13 + 1;
  if ((v4 & 0x80000000) != 0)
  {
    switch((v4 >> 1) & 7)
    {
      case 0u:
        unsigned int v15 = v13 + 2;
        int v16 = *(_DWORD *)(a1 + 256);
        if (v15 <= v16)
        {
          int v19 = *(char **)(a1 + 264);
          unsigned int v20 = v14;
        }
        else
        {
          if (v16 <= 1) {
            int v16 = 1;
          }
          int v17 = 2 * v16;
          if (v17 <= (int)v15) {
            uint64_t v18 = v15;
          }
          else {
            uint64_t v18 = v17;
          }
          int v19 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v18, "Vector Storage (uint8_t, growth)");
          memcpy(v19, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v18;
          *(void *)(a1 + 264) = v19;
          unsigned int v20 = *(_DWORD *)(a1 + 260);
        }
        uint64_t result = memmove(&v19[v14 + 1], &v19[v14], v20 - v14);
        *(unsigned char *)(*(void *)(a1 + 264) + v14) = v2;
        int v39 = 1;
        goto LABEL_47;
      case 1u:
        unsigned int v33 = v13 + 3;
        int v34 = *(_DWORD *)(a1 + 256);
        if (v33 <= v34)
        {
          int v37 = *(char **)(a1 + 264);
          unsigned int v38 = v14;
        }
        else
        {
          if (v34 <= 1) {
            int v34 = 1;
          }
          int v35 = 2 * v34;
          if (v35 <= (int)v33) {
            uint64_t v36 = v33;
          }
          else {
            uint64_t v36 = v35;
          }
          int v37 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v36, "Vector Storage (uint8_t, growth)");
          memcpy(v37, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v36;
          *(void *)(a1 + 264) = v37;
          unsigned int v38 = *(_DWORD *)(a1 + 260);
        }
        uint64_t result = memmove(&v37[v14 + 1], &v37[v14], v38 - v14);
        *(_WORD *)(*(void *)(a1 + 264) + v14) = v2;
        int v39 = 2;
        goto LABEL_47;
      case 2u:
        unsigned int v21 = v13 + 4;
        int v22 = *(_DWORD *)(a1 + 256);
        if (v21 <= v22)
        {
          int v25 = *(char **)(a1 + 264);
          unsigned int v26 = v14;
        }
        else
        {
          if (v22 <= 1) {
            int v22 = 1;
          }
          int v23 = 2 * v22;
          if (v23 <= (int)v21) {
            uint64_t v24 = v21;
          }
          else {
            uint64_t v24 = v23;
          }
          int v25 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v24, "Vector Storage (uint8_t, growth)");
          memcpy(v25, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v24;
          *(void *)(a1 + 264) = v25;
          unsigned int v26 = *(_DWORD *)(a1 + 260);
        }
        uint64_t result = memmove(&v25[v14 + 1], &v25[v14], v26 - v14);
        uint64_t v40 = *(void *)(a1 + 264) + v14;
        *(unsigned char *)(v40 + 2) = BYTE2(v2);
        *(_WORD *)uint64_t v40 = v2;
        int v39 = 3;
        goto LABEL_47;
      case 3u:
        unsigned int v27 = v13 + 5;
        int v28 = *(_DWORD *)(a1 + 256);
        if (v27 <= v28)
        {
          int v31 = *(char **)(a1 + 264);
          unsigned int v32 = v14;
        }
        else
        {
          if (v28 <= 1) {
            int v28 = 1;
          }
          int v29 = 2 * v28;
          if (v29 <= (int)v27) {
            uint64_t v30 = v27;
          }
          else {
            uint64_t v30 = v29;
          }
          int v31 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v30, "Vector Storage (uint8_t, growth)");
          memcpy(v31, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v30;
          *(void *)(a1 + 264) = v31;
          unsigned int v32 = *(_DWORD *)(a1 + 260);
        }
        uint64_t result = memmove(&v31[v14 + 1], &v31[v14], v32 - v14);
        *(_DWORD *)(*(void *)(a1 + 264) + v14) = v2;
        int v39 = 4;
LABEL_47:
        *(_DWORD *)(a1 + 260) += v39;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t glpLLVMConstFromType(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 260);
  int v7 = v6 + 1;
  int v8 = *(_DWORD *)(a1 + 256);
  if ((int)v6 + 1 <= v8)
  {
    int v11 = *(char **)(a1 + 264);
    int v12 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v8 <= 1) {
      int v8 = 1;
    }
    int v9 = 2 * v8;
    if (v9 <= v7) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = v9;
    }
    int v11 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v10, "Vector Storage (uint8_t, growth)");
    memcpy(v11, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v10;
    *(void *)(a1 + 264) = v11;
    int v12 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v11[v6 + 1], &v11[v6], (v12 - v6));
  *(unsigned char *)(*(void *)(a1 + 264) + v6) = a2;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMType(a1, a3);
  uint64_t result = *(int *)(a1 + 308);
  *(_DWORD *)(a1 + 308) = result + 1;
  return result;
}

const char *glpLLVMGetTypeString(const char **a1, int a2, int a3)
{
  *a1 = "";
  uint64_t result = "i1";
  switch(a2)
  {
    case 1:
      *a1 = ".f";
      unsigned int v5 = a3 - 1;
      uint64_t v6 = "f32";
      int v7 = "f16";
      goto LABEL_24;
    case 2:
      *a1 = ".f";
      unsigned int v5 = a3 - 1;
      uint64_t v6 = "v2f32";
      int v7 = "v2f16";
      goto LABEL_24;
    case 3:
      *a1 = ".f";
      unsigned int v5 = a3 - 1;
      uint64_t v6 = "v3f32";
      int v7 = "v3f16";
      goto LABEL_24;
    case 4:
      *a1 = ".f";
      unsigned int v5 = a3 - 1;
      uint64_t v6 = "v4f32";
      int v7 = "v4f16";
      goto LABEL_24;
    case 5:
      int v8 = ".s";
      goto LABEL_17;
    case 6:
      int v9 = ".s";
      goto LABEL_19;
    case 7:
      uint64_t v10 = ".s";
      goto LABEL_21;
    case 8:
      int v11 = ".s";
      goto LABEL_23;
    case 9:
      return result;
    case 10:
      return "v2i1";
    case 11:
      return "v3i1";
    case 12:
      return "v4i1";
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
      return "";
    case 36:
      int v8 = ".u";
LABEL_17:
      *a1 = v8;
      unsigned int v5 = a3 - 1;
      uint64_t v6 = "i32";
      int v7 = "i16";
      goto LABEL_24;
    case 37:
      int v9 = ".u";
LABEL_19:
      *a1 = v9;
      unsigned int v5 = a3 - 1;
      uint64_t v6 = "v2i32";
      int v7 = "v2i16";
      goto LABEL_24;
    case 38:
      uint64_t v10 = ".u";
LABEL_21:
      *a1 = v10;
      unsigned int v5 = a3 - 1;
      uint64_t v6 = "v3i32";
      int v7 = "v3i16";
      goto LABEL_24;
    case 39:
      int v11 = ".u";
LABEL_23:
      *a1 = v11;
      unsigned int v5 = a3 - 1;
      uint64_t v6 = "v4i32";
      int v7 = "v4i16";
LABEL_24:
      if (v5 >= 2) {
        uint64_t result = v6;
      }
      else {
        uint64_t result = v7;
      }
      break;
    default:
      switch(a2)
      {
        case '>':
          *a1 = ".f";
          uint64_t result = "f64";
          break;
        case '?':
          *a1 = ".f";
          uint64_t result = "v2f64";
          break;
        case '@':
          *a1 = ".f";
          uint64_t result = "v3f64";
          break;
        case 'A':
          *a1 = ".f";
          uint64_t result = "v4f64";
          break;
        default:
          return "";
      }
      break;
  }
  return result;
}

uint64_t glpLLVMCallFunction(uint64_t a1, const char *a2, uint64_t a3, uint64_t *a4, uint64_t a5, unsigned int *a6, uint64_t a7)
{
  uint64_t v14 = *(unsigned int *)(a1 + 260);
  int v15 = v14 + 1;
  int v16 = *(_DWORD *)(a1 + 256);
  if ((int)v14 + 1 <= v16)
  {
    int v19 = *(char **)(a1 + 264);
    int v20 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v16 <= 1) {
      int v16 = 1;
    }
    int v17 = 2 * v16;
    if (v17 <= v15) {
      uint64_t v18 = v15;
    }
    else {
      uint64_t v18 = v17;
    }
    int v19 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v18, "Vector Storage (uint8_t, growth)");
    memcpy(v19, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v18;
    *(void *)(a1 + 264) = v19;
    int v20 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v19[v14 + 1], &v19[v14], (v20 - v14));
  *(unsigned char *)(*(void *)(a1 + 264) + v14) = 108;
  unsigned int v21 = *(_DWORD *)(a1 + 260) + 1;
  *(_DWORD *)(a1 + 260) = v21;
  ++*(_DWORD *)(a1 + 296);
  size_t v22 = strlen(a2) + 1;
  int v23 = v22 + v21;
  int v24 = *(_DWORD *)(a1 + 256);
  if (v22 + v21 <= v24)
  {
    int v31 = *(char **)(a1 + 264);
    unsigned int v32 = v21;
  }
  else
  {
    if (v24 <= 1) {
      int v24 = 1;
    }
    int v25 = 2 * v24;
    int v112 = a2;
    uint64_t v26 = a3;
    unsigned int v27 = a4;
    uint64_t v28 = a5;
    uint64_t v29 = a7;
    if (v25 <= v23) {
      uint64_t v30 = v23;
    }
    else {
      uint64_t v30 = v25;
    }
    int v31 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v30, "Vector Storage (uint8_t, growth)");
    memcpy(v31, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v30;
    a7 = v29;
    a5 = v28;
    a4 = v27;
    a3 = v26;
    a2 = v112;
    *(void *)(a1 + 264) = v31;
    unsigned int v32 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v31[v21 + 1], &v31[v21], v32 - v21);
  memcpy((void *)(*(void *)(a1 + 264) + v21), a2, v22);
  *(_DWORD *)(a1 + 260) += v22;
  glpSerializeLLVMType(a1, a3);
  glpSerializeArrayOfLLVMValues(a1, a4, a5);
  unsigned int v33 = (char)glp_serialized_integer32_control(a7);
  uint64_t v34 = *(unsigned int *)(a1 + 260);
  int v35 = v34 + 1;
  int v36 = *(_DWORD *)(a1 + 256);
  if ((int)v34 + 1 <= v36)
  {
    int v39 = *(char **)(a1 + 264);
    int v40 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v36 <= 1) {
      int v36 = 1;
    }
    int v37 = 2 * v36;
    if (v37 <= v35) {
      uint64_t v38 = v35;
    }
    else {
      uint64_t v38 = v37;
    }
    int v39 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v38, "Vector Storage (uint8_t, growth)");
    memcpy(v39, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v38;
    *(void *)(a1 + 264) = v39;
    int v40 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v39[v34 + 1], &v39[v34], (v40 - v34));
  *(unsigned char *)(*(void *)(a1 + 264) + v34) = v33;
  int v41 = *(_DWORD *)(a1 + 260);
  unsigned int v42 = v41 + 1;
  *(_DWORD *)(a1 + 260) = v41 + 1;
  if ((v33 & 0x80000000) != 0)
  {
    switch((v33 >> 1) & 7)
    {
      case 0u:
        unsigned int v43 = v41 + 2;
        int v44 = *(_DWORD *)(a1 + 256);
        if (v43 <= v44)
        {
          int v47 = *(char **)(a1 + 264);
          unsigned int v48 = v42;
        }
        else
        {
          if (v44 <= 1) {
            int v44 = 1;
          }
          int v45 = 2 * v44;
          if (v45 <= (int)v43) {
            uint64_t v46 = v43;
          }
          else {
            uint64_t v46 = v45;
          }
          int v47 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v46, "Vector Storage (uint8_t, growth)");
          memcpy(v47, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v46;
          *(void *)(a1 + 264) = v47;
          unsigned int v48 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v47[v42 + 1], &v47[v42], v48 - v42);
        *(unsigned char *)(*(void *)(a1 + 264) + v42) = a7;
        unsigned int v42 = *(_DWORD *)(a1 + 260) + 1;
        goto LABEL_63;
      case 1u:
        unsigned int v61 = v41 + 3;
        int v62 = *(_DWORD *)(a1 + 256);
        if (v61 <= v62)
        {
          unsigned int v65 = *(char **)(a1 + 264);
          unsigned int v66 = v42;
        }
        else
        {
          if (v62 <= 1) {
            int v62 = 1;
          }
          int v63 = 2 * v62;
          if (v63 <= (int)v61) {
            uint64_t v64 = v61;
          }
          else {
            uint64_t v64 = v63;
          }
          unsigned int v65 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v64, "Vector Storage (uint8_t, growth)");
          memcpy(v65, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v64;
          *(void *)(a1 + 264) = v65;
          unsigned int v66 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v65[v42 + 1], &v65[v42], v66 - v42);
        *(_WORD *)(*(void *)(a1 + 264) + v42) = a7;
        unsigned int v42 = *(_DWORD *)(a1 + 260) + 2;
        goto LABEL_63;
      case 2u:
        unsigned int v49 = v41 + 4;
        int v50 = *(_DWORD *)(a1 + 256);
        if (v49 <= v50)
        {
          size_t v53 = *(char **)(a1 + 264);
          unsigned int v54 = v42;
        }
        else
        {
          if (v50 <= 1) {
            int v50 = 1;
          }
          int v51 = 2 * v50;
          if (v51 <= (int)v49) {
            uint64_t v52 = v49;
          }
          else {
            uint64_t v52 = v51;
          }
          size_t v53 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v52, "Vector Storage (uint8_t, growth)");
          memcpy(v53, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v52;
          *(void *)(a1 + 264) = v53;
          unsigned int v54 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v53[v42 + 1], &v53[v42], v54 - v42);
        uint64_t v67 = *(void *)(a1 + 264) + v42;
        *(unsigned char *)(v67 + 2) = BYTE2(a7);
        *(_WORD *)uint64_t v67 = a7;
        unsigned int v42 = *(_DWORD *)(a1 + 260) + 3;
        goto LABEL_63;
      case 3u:
        unsigned int v55 = v41 + 5;
        int v56 = *(_DWORD *)(a1 + 256);
        if (v55 <= v56)
        {
          uint64_t v59 = *(char **)(a1 + 264);
          unsigned int v60 = v42;
        }
        else
        {
          if (v56 <= 1) {
            int v56 = 1;
          }
          int v57 = 2 * v56;
          if (v57 <= (int)v55) {
            uint64_t v58 = v55;
          }
          else {
            uint64_t v58 = v57;
          }
          uint64_t v59 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v58, "Vector Storage (uint8_t, growth)");
          memcpy(v59, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v58;
          *(void *)(a1 + 264) = v59;
          unsigned int v60 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v59[v42 + 1], &v59[v42], v60 - v42);
        *(_DWORD *)(*(void *)(a1 + 264) + v42) = a7;
        unsigned int v42 = *(_DWORD *)(a1 + 260) + 4;
LABEL_63:
        *(_DWORD *)(a1 + 260) = v42;
        break;
      default:
        break;
    }
  }
  if (a7)
  {
    uint64_t v68 = a7;
    do
    {
      unsigned int v70 = *a6++;
      unsigned int v69 = v70;
      char v71 = glp_serialized_integer32_control(v70);
      uint64_t v72 = *(unsigned int *)(a1 + 260);
      int v73 = v72 + 1;
      int v74 = *(_DWORD *)(a1 + 256);
      if ((int)v72 + 1 <= v74)
      {
        uint64_t v77 = *(char **)(a1 + 264);
        int v78 = *(_DWORD *)(a1 + 260);
      }
      else
      {
        if (v74 <= 1) {
          int v74 = 1;
        }
        int v75 = 2 * v74;
        if (v75 <= v73) {
          uint64_t v76 = v73;
        }
        else {
          uint64_t v76 = v75;
        }
        uint64_t v77 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v76, "Vector Storage (uint8_t, growth)");
        memcpy(v77, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
        (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
        *(_DWORD *)(a1 + 256) = v76;
        *(void *)(a1 + 264) = v77;
        int v78 = *(_DWORD *)(a1 + 260);
      }
      memmove(&v77[v72 + 1], &v77[v72], (v78 - v72));
      *(unsigned char *)(*(void *)(a1 + 264) + v72) = v71;
      int v79 = *(_DWORD *)(a1 + 260);
      unsigned int v42 = v79 + 1;
      *(_DWORD *)(a1 + 260) = v79 + 1;
      if (v71 < 0)
      {
        switch((v71 >> 1) & 7)
        {
          case 0u:
            unsigned int v80 = v79 + 2;
            int v81 = *(_DWORD *)(a1 + 256);
            if (v80 <= v81)
            {
              uint64_t v84 = *(char **)(a1 + 264);
              unsigned int v85 = v42;
            }
            else
            {
              if (v81 <= 1) {
                int v81 = 1;
              }
              int v82 = 2 * v81;
              if (v82 <= (int)v80) {
                uint64_t v83 = v80;
              }
              else {
                uint64_t v83 = v82;
              }
              uint64_t v84 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v83, "Vector Storage (uint8_t, growth)");
              memcpy(v84, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
              (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
              *(_DWORD *)(a1 + 256) = v83;
              *(void *)(a1 + 264) = v84;
              unsigned int v85 = *(_DWORD *)(a1 + 260);
            }
            memmove(&v84[v42 + 1], &v84[v42], v85 - v42);
            *(unsigned char *)(*(void *)(a1 + 264) + v42) = v69;
            unsigned int v42 = *(_DWORD *)(a1 + 260) + 1;
            goto LABEL_112;
          case 1u:
            unsigned int v98 = v79 + 3;
            int v99 = *(_DWORD *)(a1 + 256);
            if (v98 <= v99)
            {
              unsigned int v102 = *(char **)(a1 + 264);
              unsigned int v103 = v42;
            }
            else
            {
              if (v99 <= 1) {
                int v99 = 1;
              }
              int v100 = 2 * v99;
              if (v100 <= (int)v98) {
                uint64_t v101 = v98;
              }
              else {
                uint64_t v101 = v100;
              }
              unsigned int v102 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v101, "Vector Storage (uint8_t, growth)");
              memcpy(v102, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
              (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
              *(_DWORD *)(a1 + 256) = v101;
              *(void *)(a1 + 264) = v102;
              unsigned int v103 = *(_DWORD *)(a1 + 260);
            }
            memmove(&v102[v42 + 1], &v102[v42], v103 - v42);
            *(_WORD *)(*(void *)(a1 + 264) + v42) = v69;
            unsigned int v42 = *(_DWORD *)(a1 + 260) + 2;
            goto LABEL_112;
          case 2u:
            unsigned int v86 = v79 + 4;
            int v87 = *(_DWORD *)(a1 + 256);
            if (v86 <= v87)
            {
              v90 = *(char **)(a1 + 264);
              unsigned int v91 = v42;
            }
            else
            {
              if (v87 <= 1) {
                int v87 = 1;
              }
              int v88 = 2 * v87;
              if (v88 <= (int)v86) {
                uint64_t v89 = v86;
              }
              else {
                uint64_t v89 = v88;
              }
              v90 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v89, "Vector Storage (uint8_t, growth)");
              memcpy(v90, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
              (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
              *(_DWORD *)(a1 + 256) = v89;
              *(void *)(a1 + 264) = v90;
              unsigned int v91 = *(_DWORD *)(a1 + 260);
            }
            memmove(&v90[v42 + 1], &v90[v42], v91 - v42);
            uint64_t v104 = *(void *)(a1 + 264) + v42;
            *(unsigned char *)(v104 + 2) = BYTE2(v69);
            *(_WORD *)uint64_t v104 = v69;
            unsigned int v42 = *(_DWORD *)(a1 + 260) + 3;
            goto LABEL_112;
          case 3u:
            unsigned int v92 = v79 + 5;
            int v93 = *(_DWORD *)(a1 + 256);
            if (v92 <= v93)
            {
              uint64_t v96 = *(char **)(a1 + 264);
              unsigned int v97 = v42;
            }
            else
            {
              if (v93 <= 1) {
                int v93 = 1;
              }
              int v94 = 2 * v93;
              if (v94 <= (int)v92) {
                uint64_t v95 = v92;
              }
              else {
                uint64_t v95 = v94;
              }
              uint64_t v96 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v95, "Vector Storage (uint8_t, growth)");
              memcpy(v96, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
              (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
              *(_DWORD *)(a1 + 256) = v95;
              *(void *)(a1 + 264) = v96;
              unsigned int v97 = *(_DWORD *)(a1 + 260);
            }
            memmove(&v96[v42 + 1], &v96[v42], v97 - v42);
            *(_DWORD *)(*(void *)(a1 + 264) + v42) = v69;
            unsigned int v42 = *(_DWORD *)(a1 + 260) + 4;
LABEL_112:
            *(_DWORD *)(a1 + 260) = v42;
            break;
          default:
            break;
        }
      }
      --v68;
    }
    while (v68);
  }
  if (*(_DWORD *)(a1 + 300))
  {
    int v105 = v42 + 1;
    int v106 = *(_DWORD *)(a1 + 256);
    if (v42 + 1 <= v106)
    {
      uint64_t v109 = *(char **)(a1 + 264);
      unsigned int v110 = v42;
    }
    else
    {
      if (v106 <= 1) {
        int v106 = 1;
      }
      int v107 = 2 * v106;
      if (v107 <= v105) {
        uint64_t v108 = v105;
      }
      else {
        uint64_t v108 = v107;
      }
      uint64_t v109 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v108, "Vector Storage (uint8_t, growth)");
      memcpy(v109, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
      (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
      *(_DWORD *)(a1 + 256) = v108;
      *(void *)(a1 + 264) = v109;
      unsigned int v110 = *(_DWORD *)(a1 + 260);
    }
    memmove(&v109[v42 + 1], &v109[v42], v110 - v42);
    *(unsigned char *)(*(void *)(a1 + 264) + v42) = 0;
    ++*(_DWORD *)(a1 + 260);
  }
  uint64_t result = *(int *)(a1 + 308);
  *(_DWORD *)(a1 + 308) = result + 1;
  return result;
}

void *glpSerializeArrayOfLLVMValues(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  LODWORD(v3) = a3;
  unsigned int v6 = (char)glp_serialized_integer32_control(a3);
  uint64_t v7 = *(unsigned int *)(a1 + 260);
  int v8 = v7 + 1;
  int v9 = *(_DWORD *)(a1 + 256);
  if ((int)v7 + 1 <= v9)
  {
    int v12 = *(char **)(a1 + 264);
    int v13 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v9 <= 1) {
      int v9 = 1;
    }
    int v10 = 2 * v9;
    if (v10 <= v8) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = v10;
    }
    int v12 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v11, "Vector Storage (uint8_t, growth)");
    memcpy(v12, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v11;
    *(void *)(a1 + 264) = v12;
    int v13 = *(_DWORD *)(a1 + 260);
  }
  uint64_t result = memmove(&v12[v7 + 1], &v12[v7], (v13 - v7));
  *(unsigned char *)(*(void *)(a1 + 264) + v7) = v6;
  int v15 = *(_DWORD *)(a1 + 260);
  unsigned int v16 = v15 + 1;
  *(_DWORD *)(a1 + 260) = v15 + 1;
  if ((v6 & 0x80000000) != 0)
  {
    switch((v6 >> 1) & 7)
    {
      case 0u:
        unsigned int v17 = v15 + 2;
        int v18 = *(_DWORD *)(a1 + 256);
        if (v17 <= v18)
        {
          unsigned int v21 = *(char **)(a1 + 264);
          unsigned int v22 = v16;
        }
        else
        {
          if (v18 <= 1) {
            int v18 = 1;
          }
          int v19 = 2 * v18;
          if (v19 <= (int)v17) {
            uint64_t v20 = v17;
          }
          else {
            uint64_t v20 = v19;
          }
          unsigned int v21 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v20, "Vector Storage (uint8_t, growth)");
          memcpy(v21, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v20;
          *(void *)(a1 + 264) = v21;
          unsigned int v22 = *(_DWORD *)(a1 + 260);
        }
        uint64_t result = memmove(&v21[v16 + 1], &v21[v16], v22 - v16);
        *(unsigned char *)(*(void *)(a1 + 264) + v16) = v3;
        int v41 = 1;
        goto LABEL_47;
      case 1u:
        unsigned int v35 = v15 + 3;
        int v36 = *(_DWORD *)(a1 + 256);
        if (v35 <= v36)
        {
          int v39 = *(char **)(a1 + 264);
          unsigned int v40 = v16;
        }
        else
        {
          if (v36 <= 1) {
            int v36 = 1;
          }
          int v37 = 2 * v36;
          if (v37 <= (int)v35) {
            uint64_t v38 = v35;
          }
          else {
            uint64_t v38 = v37;
          }
          int v39 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v38, "Vector Storage (uint8_t, growth)");
          memcpy(v39, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v38;
          *(void *)(a1 + 264) = v39;
          unsigned int v40 = *(_DWORD *)(a1 + 260);
        }
        uint64_t result = memmove(&v39[v16 + 1], &v39[v16], v40 - v16);
        *(_WORD *)(*(void *)(a1 + 264) + v16) = v3;
        int v41 = 2;
        goto LABEL_47;
      case 2u:
        unsigned int v23 = v15 + 4;
        int v24 = *(_DWORD *)(a1 + 256);
        if (v23 <= v24)
        {
          unsigned int v27 = *(char **)(a1 + 264);
          unsigned int v28 = v16;
        }
        else
        {
          if (v24 <= 1) {
            int v24 = 1;
          }
          int v25 = 2 * v24;
          if (v25 <= (int)v23) {
            uint64_t v26 = v23;
          }
          else {
            uint64_t v26 = v25;
          }
          unsigned int v27 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v26, "Vector Storage (uint8_t, growth)");
          memcpy(v27, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v26;
          *(void *)(a1 + 264) = v27;
          unsigned int v28 = *(_DWORD *)(a1 + 260);
        }
        uint64_t result = memmove(&v27[v16 + 1], &v27[v16], v28 - v16);
        uint64_t v42 = *(void *)(a1 + 264) + v16;
        *(unsigned char *)(v42 + 2) = BYTE2(v3);
        *(_WORD *)uint64_t v42 = v3;
        int v41 = 3;
        goto LABEL_47;
      case 3u:
        unsigned int v29 = v15 + 5;
        int v30 = *(_DWORD *)(a1 + 256);
        if (v29 <= v30)
        {
          unsigned int v33 = *(char **)(a1 + 264);
          unsigned int v34 = v16;
        }
        else
        {
          if (v30 <= 1) {
            int v30 = 1;
          }
          int v31 = 2 * v30;
          if (v31 <= (int)v29) {
            uint64_t v32 = v29;
          }
          else {
            uint64_t v32 = v31;
          }
          unsigned int v33 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v32, "Vector Storage (uint8_t, growth)");
          memcpy(v33, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v32;
          *(void *)(a1 + 264) = v33;
          unsigned int v34 = *(_DWORD *)(a1 + 260);
        }
        uint64_t result = memmove(&v33[v16 + 1], &v33[v16], v34 - v16);
        *(_DWORD *)(*(void *)(a1 + 264) + v16) = v3;
        int v41 = 4;
LABEL_47:
        *(_DWORD *)(a1 + 260) += v41;
        break;
      default:
        break;
    }
  }
  if (v3)
  {
    uint64_t v3 = v3;
    do
    {
      uint64_t v43 = *a2++;
      uint64_t result = glpSerializeLLVMValue(a1, v43);
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t glpLLVMAggregateConstant(void *a1, unsigned int *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  unsigned int v19 = a3;
  unsigned int v20 = 1;
  uint64_t v7 = glpLLVMGetMinCommonType((uint64_t)a2, (int *)&v20, &v19);
  unsigned int v8 = glpABIGetTypeSize(0, (uint64_t)a2, 0);
  uint64_t Size = glpTypeSizeGetSize(v8);
  uint64_t v10 = v20;
  uint64_t VectorType = glpGetVectorType(v7, v20);
  MEMORY[0x270FA5388](VectorType);
  uint64_t v14 = (char *)&v19 - v13;
  if (v12 >= 0x200) {
    size_t v15 = 512;
  }
  else {
    size_t v15 = v12;
  }
  bzero((char *)&v19 - v13, v15);
  uint64_t v16 = v19;
  glpLLVMCreateConstantVectors(a1, (uint64_t)v14, 0, a4, a2, VectorType, v19);
  uint64_t v17 = glpPrimitiveTypeToLLVMType(a1, v7, v16);
  if (v10 >= 2) {
    uint64_t v17 = glpLLVMVectorType((uint64_t)a1, v17, v10);
  }
  return glpLLVMConstArrayCache((uint64_t)a1, v17, v14, Size);
}

uint64_t glpLLVMPrimitiveConstant(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v14 = glpPrimitiveTypeToLLVMType(a1, a6, a7);
  uint64_t result = glpPrimitiveTypeGetCategory(a5);
  if ((result - 1) >= 2)
  {
    if (result == 3)
    {
      uint64_t ColumnType = glpPrimitiveMatrixGetColumnType(a5);
      uint64_t PrimitiveType = glpGetPrimitiveType(a5);
      unsigned int v19 = glpABIGetTypeSize(0, (uint64_t)PrimitiveType, 0);
      uint64_t result = glpTypeSizeGetSize(v19);
      if (result)
      {
        int v20 = result;
        do
        {
          uint64_t result = glpLLVMPrimitiveConstant(a1, a2, a3, a4, ColumnType, a6, a7);
          a4 = (a4 + 1);
          a2 += 16;
          --v20;
        }
        while (v20);
      }
    }
  }
  else
  {
    if (glpPrimitiveTypeGetCategory(a6) == 2) {
      uint64_t Length = glpPrimitiveVectorGetLength(a6);
    }
    else {
      uint64_t Length = 1;
    }
    if (glpPrimitiveTypeGetCategory(a5) == 2) {
      unsigned int v21 = glpPrimitiveVectorGetLength(a5);
    }
    else {
      unsigned int v21 = 1;
    }
    if (Length == 1)
    {
      uint64_t result = glpGetPConst((uint64_t)a1, v14, a6, a2, 0);
      *(void *)(a3 + 8 * a4) = result;
    }
    else
    {
      int ElementType = glpPrimitiveVectorGetElementType(a6);
      uint64_t v23 = glpLLVMGetElementType((uint64_t)a1, v14);
      v32[1] = v32;
      uint64_t v33 = Length;
      MEMORY[0x270FA5388](v23);
      uint64_t v26 = (char *)v32 - v25;
      if (v24 >= 0x200) {
        size_t v27 = 512;
      }
      else {
        size_t v27 = v24;
      }
      bzero((char *)v32 - v25, v27);
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(void *)&v26[8 * i] = glpGetPConst((uint64_t)a1, v23, ElementType, a2, i);
      }
      uint64_t v29 = v33;
      int v30 = v33 - v21;
      if (v33 > v21)
      {
        int v31 = (uint64_t *)&v26[8 * v21];
        do
        {
          *v31++ = glpLLVMConstFromTypeCache((uint64_t)a1, 37, v23);
          --v30;
        }
        while (v30);
      }
      uint64_t result = glpLLVMConstVectorCache((uint64_t)a1, v26, v29);
      *(void *)(a3 + 8 * a4) = result;
    }
  }
  return result;
}

uint64_t glpLLVMConstArrayCache(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if ((*(_WORD *)(a1 + 832) & 4) != 0)
  {
    uint64_t v9 = 8 * a4;
    unsigned int v10 = 8 * a4 + 16;
    uint64_t v11 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 368))(*(void *)(a1 + 360), v9 + 16, "");
    *(_DWORD *)uint64_t v11 = 34;
    *(void *)(v11 + 4) = a2;
    *((_DWORD *)v11 + 3) = a4;
    memcpy(v11 + 16, a3, 8 * a4);
    if (v10 >> 5 >= v10)
    {
      uint64_t v13 = v9 + 16;
    }
    else
    {
      unsigned int v12 = v9 + 16;
      LODWORD(v13) = v9 + 16;
      do
      {
        uint64_t v13 = (32 * v13 + (v13 >> 2) + v11[v12 - 1]) ^ v13;
        v12 += ~(v10 >> 5);
      }
      while (v12 > v10 >> 5);
    }
    uint64_t v14 = v10 & 0xFFFFFFF8 | (unint64_t)(v13 << 32);
    uint64_t v15 = glpDataHashGet(*(void *)(a1 + 392), v11, v14);
    if (v15)
    {
      uint64_t v16 = v15;
      (*(void (**)(void, char *))(a1 + 384))(*(void *)(a1 + 360), v11);
    }
    else
    {
      uint64_t v16 = glpLLVMConstArray(a1, a2, (uint64_t *)a3, a4);
      glpDataHashPut(*(void *)(a1 + 392), v11, v14, v16, v17);
    }
    return v16;
  }
  else
  {
    return glpLLVMConstArray(a1, a2, (uint64_t *)a3, a4);
  }
}

uint64_t glpLLVMGetMinCommonType(uint64_t a1, int *a2, _DWORD *a3)
{
LABEL_1:
  unsigned int v5 = (unsigned int *)a1;
  while (2)
  {
    switch(glpTypeGetKind(v5))
    {
      case 0u:
        uint64_t PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)v5);
        switch(glpPrimitiveTypeGetCategory(PrimitiveType))
        {
          case 1u:
            if (PrimitiveType == 62)
            {
              int v13 = 2;
              goto LABEL_31;
            }
            *a2 = 1;
            return PrimitiveType;
          case 2u:
            int ElementType = glpPrimitiveVectorGetElementType(PrimitiveType);
            int Length = glpPrimitiveVectorGetLength(PrimitiveType);
            if (ElementType == 62) {
              goto LABEL_29;
            }
            *a2 = Length;
            int v16 = PrimitiveType;
            goto LABEL_37;
          case 3u:
            uint64_t ColumnType = glpPrimitiveMatrixGetColumnType(PrimitiveType);
            int ScalarType = glpPrimitiveTypeGetScalarType(PrimitiveType);
            int Length = glpPrimitiveVectorGetLength(ColumnType);
            if (ScalarType != 62)
            {
              *a2 = Length;
              int v16 = ColumnType;
LABEL_37:
              return glpPrimitiveVectorGetElementType(v16);
            }
LABEL_29:
            int v13 = 2 * Length;
            if ((2 * Length) >= 4) {
              int v13 = 4;
            }
LABEL_31:
            *a2 = v13;
LABEL_33:
            uint64_t PrimitiveType = 5;
            break;
          case 4u:
            *a2 = 1;
            *a3 = 3;
            goto LABEL_33;
          default:
            goto LABEL_25;
        }
        return PrimitiveType;
      case 1u:
        int ElementCount = glpAggregateTypeGetElementCount((uint64_t)v5);
        if (!ElementCount) {
          goto LABEL_25;
        }
        int v7 = ElementCount;
        unsigned int v8 = 0;
        LODWORD(PrimitiveType) = 0;
        do
        {
          uint64_t v10 = glpAggregateTypeGetElementType((uint64_t)v5, v8);
          char ElementFlags = glpAggregateTypeGetElementFlags((uint64_t)v5, v8);
          uint64_t v20 = 0;
          LODWORD(v20) = glpPrecisionIndexFromSAFlags(ElementFlags);
          uint64_t v12 = glpLLVMGetMinCommonType(v10, (char *)&v20 + 4, &v20);
          if (v8)
          {
            if (PrimitiveType == v12) {
              uint64_t PrimitiveType = PrimitiveType;
            }
            else {
              uint64_t PrimitiveType = 5;
            }
            if (!v20 || v20 == 3 || v20 == 2 && *a3 == 1) {
              *a3 = v20;
            }
            if (HIDWORD(v20) > *a2) {
              *a2 = HIDWORD(v20);
            }
          }
          else
          {
            *a2 = HIDWORD(v20);
            *a3 = v20;
            uint64_t PrimitiveType = v12;
          }
          ++v8;
        }
        while (v7 != v8);
        break;
      case 2u:
        do
          unsigned int v5 = (unsigned int *)glpArrayTypeGetElementType((uint64_t)v5);
        while (glpTypeGetKind(v5) == 2);
        continue;
      case 3u:
        a1 = glpBankTypeGetElementType((uint64_t)v5);
        goto LABEL_1;
      default:
LABEL_25:
        uint64_t PrimitiveType = 0;
        break;
    }
    return PrimitiveType;
  }
}

  unsigned int v4 = 0;
  do
  {
    while (1)
    {
      unsigned int v5 = v4;
      unsigned int v6 = *(void *)(a1 + 24);
      **(unsigned char **)(v6 + 72) = *(unsigned char *)(v6 + 48);
      int v7 = *(unsigned char **)(v6 + 72);
      if (!*v7)
      {
        if ((unint64_t)v7 >= *(void *)(*(void *)(*(void *)(v6 + 40) + 8 * *(void *)(v6 + 24)) + 8)
                                   + *(void *)(v6 + 56))
        {
          uint64_t v11 = *(void *)(v6 + 136);
          *(void *)(v6 + 72) = v7 + 1;
          next_buffer = yy_get_next_buffer((void *)v6);
          if (next_buffer)
          {
            if (next_buffer == 1) {
              goto LABEL_1;
            }
            if (next_buffer == 2)
            {
              yyrestart(*(void *)(v6 + 8), v6);
              goto LABEL_1;
            }
          }
          else
          {
            *(void *)(v6 + 72) = &v7[*(void *)(v6 + 136) - v11];
          }
        }
        else
        {
          *int v7 = 0;
        }
      }
      unsigned int v8 = *(unsigned char **)(v6 + 72);
      uint64_t v9 = *v8;
      *unsigned int v8 = 0;
      uint64_t v10 = (unsigned char *)(*(void *)(v6 + 72) + 1);
      *(void *)(v6 + 72) = v10;
      *(unsigned char *)(v6 + 48) = *v10;
      if (v9 == 47) {
        break;
      }
      unsigned int v4 = 1;
      if (v9 != 42)
      {
        if (v9 == 10) {
          ++*a2;
        }
        goto LABEL_1;
      }
    }
    unsigned int v4 = 0;
  }
  while ((v5 & 1) == 0);
  return 1;
}

uint64_t glpLLVMCreateConstantVectors(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = (uint64_t)a5;
  int Kind = glpTypeGetKind(a5);
  if (Kind == 2)
  {
    int ElementCount = glpArrayTypeGetElementCount(v9);
    uint64_t ElementType = glpArrayTypeGetElementType(v9);
    unsigned int v19 = glpABIGetTypeSize(0, ElementType, 0);
    uint64_t result = glpTypeSizeGetSize(v19);
    if (ElementCount)
    {
      int v20 = result;
      uint64_t v21 = 16 * result;
      do
      {
        uint64_t result = glpLLVMCreateConstantVectors(a1, a2, a3, a4, ElementType, a6, a7);
        a3 = (a3 + v20);
        a4 += v21;
        --ElementCount;
      }
      while (ElementCount);
    }
  }
  else if (Kind == 1)
  {
    uint64_t result = glpAggregateTypeGetElementCount(v9);
    if (result)
    {
      unsigned int v22 = 0;
      unsigned int v30 = result;
      do
      {
        uint64_t v23 = a6;
        uint64_t v24 = a7;
        uint64_t v25 = glpAggregateTypeGetElementType(v9, v22);
        unsigned int v26 = glpABIGetTypeSize(0, v25, 0);
        uint64_t v27 = v9;
        unsigned int Size = glpTypeSizeGetSize(v26);
        uint64_t v29 = v25;
        a7 = v24;
        a6 = v23;
        glpLLVMCreateConstantVectors(a1, a2, a3, a4, v29, v23, a7);
        uint64_t result = v30;
        a4 += 16 * Size;
        a3 = Size + a3;
        uint64_t v9 = v27;
        ++v22;
      }
      while (v30 != v22);
    }
  }
  else
  {
    if (Kind) {
      abort();
    }
    uint64_t PrimitiveType = glpPrimitiveTypeGetPrimitiveType(v9);
    return glpLLVMPrimitiveConstant(a1, a4, a2, a3, PrimitiveType, a6, a7);
  }
  return result;
}

uint64_t glpGetComponentCount(uint64_t a1)
{
  if (glpPrimitiveTypeGetCategory(a1) != 2) {
    return 1;
  }

  return glpPrimitiveVectorGetLength(a1);
}

uint64_t glpGetPConst(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  if (a3 <= 8)
  {
    if (a3 == 1)
    {
      double v5 = *(float *)(a4 + 4 * a5);
      return glpLLVMConstRealCache(a1, a2, v5);
    }
    if (a3 != 5) {
      return 0;
    }
    unint64_t v6 = *(int *)(a4 + 4 * a5);
    char v7 = 1;
    return glpLLVMConstIntCache(a1, a2, v6, v7);
  }
  switch(a3)
  {
    case 9:
      unint64_t v6 = *(int *)(a4 + 4 * a5);
LABEL_13:
      char v7 = 0;
      return glpLLVMConstIntCache(a1, a2, v6, v7);
    case 36:
      unint64_t v6 = *(unsigned int *)(a4 + 4 * a5);
      goto LABEL_13;
    case 62:
      double v5 = *(double *)(a4 + 8 * a5);
      return glpLLVMConstRealCache(a1, a2, v5);
  }
  return 0;
}

uint64_t glpLLVMGetElementType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 260);
  int v5 = v4 + 1;
  int v6 = *(_DWORD *)(a1 + 256);
  if ((int)v4 + 1 <= v6)
  {
    uint64_t v9 = *(char **)(a1 + 264);
    int v10 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v6 <= 1) {
      int v6 = 1;
    }
    int v7 = 2 * v6;
    if (v7 <= v5) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v7;
    }
    uint64_t v9 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v8, "Vector Storage (uint8_t, growth)");
    memcpy(v9, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v8;
    *(void *)(a1 + 264) = v9;
    int v10 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v9[v4 + 1], &v9[v4], (v10 - v4));
  *(unsigned char *)(*(void *)(a1 + 264) + v4) = 41;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMType(a1, a2);
  uint64_t result = *(int *)(a1 + 304);
  *(_DWORD *)(a1 + 304) = result + 1;
  return result;
}

uint64_t glpLLVMConstVectorCache(uint64_t a1, void *a2, uint64_t a3)
{
  if ((*(_WORD *)(a1 + 832) & 4) != 0)
  {
    uint64_t v7 = 8 * a3;
    unsigned int v8 = 8 * a3 + 8;
    uint64_t v9 = (_DWORD *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 368))(*(void *)(a1 + 360), v7 + 8, "");
    *uint64_t v9 = 33;
    v9[1] = a3;
    memcpy(v9 + 2, a2, 8 * a3);
    if (v8 >> 5 >= v8)
    {
      uint64_t v11 = v7 + 8;
    }
    else
    {
      unsigned int v10 = v7 + 8;
      LODWORD(v11) = v7 + 8;
      do
      {
        uint64_t v11 = (32 * v11 + (v11 >> 2) + *((char *)v9 + v10 - 1)) ^ v11;
        v10 += ~(v8 >> 5);
      }
      while (v10 > v8 >> 5);
    }
    uint64_t v12 = v8 & 0xFFFFFFF8 | (unint64_t)(v11 << 32);
    uint64_t v13 = glpDataHashGet(*(void *)(a1 + 392), v9, v12);
    if (v13)
    {
      uint64_t v14 = v13;
      (*(void (**)(void, _DWORD *))(a1 + 384))(*(void *)(a1 + 360), v9);
    }
    else
    {
      uint64_t v14 = glpLLVMConstVector(a1, (uint64_t *)a2, a3);
      glpDataHashPut(*(void *)(a1 + 392), v9, v12, v14, v15);
    }
    return v14;
  }
  else
  {
    return glpLLVMConstVector(a1, (uint64_t *)a2, a3);
  }
}

uint64_t glpLLVMConstIntCache(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  if ((*(_WORD *)(a1 + 832) & 4) != 0)
  {
    *(_DWORD *)double v15 = 30;
    *(void *)&v15[4] = a2;
    *(void *)&v15[12] = a3;
    v15[20] = a4;
    LODWORD(v9) = 21;
    for (uint64_t i = 20; i != -1; --i)
      uint64_t v9 = (32 * v9 + (v9 >> 2) + (char)v15[i]) ^ v9;
    uint64_t v11 = (v9 << 32) | 0x15;
    uint64_t v12 = glpDataHashGet(*(void *)(a1 + 392), v15, v11);
    if (!v12)
    {
      uint64_t v12 = glpLLVMConstInt(a1, a2, a3, a4);
      uint64_t v13 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 368))(*(void *)(a1 + 360), 21, "");
      long long v14 = *(_OWORD *)v15;
      *(void *)(v13 + 13) = *(void *)&v15[13];
      *(_OWORD *)uint64_t v13 = v14;
      glpDataHashPut(*(void *)(a1 + 392), v13, v11, v12, *(double *)&v14);
    }
    return v12;
  }
  else
  {
    return glpLLVMConstInt(a1, a2, a3, a4);
  }
}

uint64_t glpLLVMConstRealCache(uint64_t a1, uint64_t a2, double a3)
{
  if ((*(_WORD *)(a1 + 832) & 4) != 0)
  {
    *(_DWORD *)uint64_t v13 = 32;
    *(void *)&v13[4] = a2;
    *(double *)&v13[12] = a3;
    LODWORD(v7) = 20;
    for (uint64_t i = 19; i != -1; --i)
      uint64_t v7 = (32 * v7 + (v7 >> 2) + (char)v13[i]) ^ v7;
    uint64_t v9 = (v7 << 32) | 0x14;
    uint64_t v10 = glpDataHashGet(*(void *)(a1 + 392), v13, v9);
    if (!v10)
    {
      uint64_t v10 = glpLLVMConstReal(a1, a2, a3);
      uint64_t v11 = (_DWORD *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 368))(*(void *)(a1 + 360), 20, "");
      long long v12 = *(_OWORD *)v13;
      v11[4] = *(_DWORD *)&v13[16];
      *(_OWORD *)uint64_t v11 = v12;
      glpDataHashPut(*(void *)(a1 + 392), v11, v9, v10, *(double *)&v12);
    }
    return v10;
  }
  else
  {
    return glpLLVMConstReal(a1, a2, a3);
  }
}

uint64_t glpLLVMConstInt(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v8 = *(unsigned int *)(a1 + 260);
  int v9 = v8 + 1;
  int v10 = *(_DWORD *)(a1 + 256);
  if ((int)v8 + 1 <= v10)
  {
    uint64_t v13 = *(char **)(a1 + 264);
    int v14 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v10 <= 1) {
      int v10 = 1;
    }
    int v11 = 2 * v10;
    if (v11 <= v9) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = v11;
    }
    uint64_t v13 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v12, "Vector Storage (uint8_t, growth)");
    memcpy(v13, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v12;
    *(void *)(a1 + 264) = v13;
    int v14 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v13[v8 + 1], &v13[v8], (v14 - v8));
  *(unsigned char *)(*(void *)(a1 + 264) + v8) = 30;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMType(a1, a2);
  uint64_t v15 = *(unsigned int *)(a1 + 260);
  int v16 = v15 + 1;
  int v17 = *(_DWORD *)(a1 + 256);
  if ((int)v15 + 1 <= v17)
  {
    int v20 = *(char **)(a1 + 264);
    int v21 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v17 <= 1) {
      int v17 = 1;
    }
    int v18 = 2 * v17;
    if (v18 <= v16) {
      uint64_t v19 = v16;
    }
    else {
      uint64_t v19 = v18;
    }
    int v20 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v19, "Vector Storage (uint8_t, growth)");
    memcpy(v20, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v19;
    *(void *)(a1 + 264) = v20;
    int v21 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v20[v15 + 1], &v20[v15], (v21 - v15));
  *(unsigned char *)(*(void *)(a1 + 264) + v15) = a4;
  ++*(_DWORD *)(a1 + 260);
  unsigned int v22 = (char)glp_serialized_integer64_control(a3);
  uint64_t v23 = *(unsigned int *)(a1 + 260);
  int v24 = v23 + 1;
  int v25 = *(_DWORD *)(a1 + 256);
  if ((int)v23 + 1 <= v25)
  {
    unsigned int v28 = *(char **)(a1 + 264);
    int v29 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v25 <= 1) {
      int v25 = 1;
    }
    int v26 = 2 * v25;
    if (v26 <= v24) {
      uint64_t v27 = v24;
    }
    else {
      uint64_t v27 = v26;
    }
    unsigned int v28 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v27, "Vector Storage (uint8_t, growth)");
    memcpy(v28, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v27;
    *(void *)(a1 + 264) = v28;
    int v29 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v28[v23 + 1], &v28[v23], (v29 - v23));
  *(unsigned char *)(*(void *)(a1 + 264) + v23) = v22;
  int v30 = *(_DWORD *)(a1 + 260);
  unsigned int v31 = v30 + 1;
  *(_DWORD *)(a1 + 260) = v30 + 1;
  if ((v22 & 0x80000000) != 0)
  {
    switch((v22 >> 1) & 7)
    {
      case 1u:
        unsigned int v38 = v30 + 3;
        int v39 = *(_DWORD *)(a1 + 256);
        if (v38 <= v39)
        {
          uint64_t v42 = *(char **)(a1 + 264);
          unsigned int v43 = v31;
        }
        else
        {
          if (v39 <= 1) {
            int v39 = 1;
          }
          int v40 = 2 * v39;
          if (v40 <= (int)v38) {
            uint64_t v41 = v38;
          }
          else {
            uint64_t v41 = v40;
          }
          uint64_t v42 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v41, "Vector Storage (uint8_t, growth)");
          memcpy(v42, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v41;
          *(void *)(a1 + 264) = v42;
          unsigned int v43 = *(_DWORD *)(a1 + 260);
        }
        goto LABEL_120;
      case 2u:
        unsigned int v44 = v30 + 4;
        int v45 = *(_DWORD *)(a1 + 256);
        if (v44 <= v45)
        {
          unsigned int v48 = *(char **)(a1 + 264);
          unsigned int v49 = v31;
        }
        else
        {
          if (v45 <= 1) {
            int v45 = 1;
          }
          int v46 = 2 * v45;
          if (v46 <= (int)v44) {
            uint64_t v47 = v44;
          }
          else {
            uint64_t v47 = v46;
          }
          unsigned int v48 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v47, "Vector Storage (uint8_t, growth)");
          memcpy(v48, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v47;
          *(void *)(a1 + 264) = v48;
          unsigned int v49 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v48[v31 + 1], &v48[v31], v49 - v31);
        uint64_t v80 = *(void *)(a1 + 264) + v31;
        *(unsigned char *)(v80 + 2) = BYTE2(a3);
        *(_WORD *)uint64_t v80 = a3;
        goto LABEL_123;
      case 3u:
        unsigned int v50 = v30 + 5;
        int v51 = *(_DWORD *)(a1 + 256);
        if (v50 <= v51)
        {
          unsigned int v54 = *(char **)(a1 + 264);
          unsigned int v55 = v31;
        }
        else
        {
          if (v51 <= 1) {
            int v51 = 1;
          }
          int v52 = 2 * v51;
          if (v52 <= (int)v50) {
            uint64_t v53 = v50;
          }
          else {
            uint64_t v53 = v52;
          }
          unsigned int v54 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v53, "Vector Storage (uint8_t, growth)");
          memcpy(v54, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v53;
          *(void *)(a1 + 264) = v54;
          unsigned int v55 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v54[v31 + 1], &v54[v31], v55 - v31);
        *(_DWORD *)(*(void *)(a1 + 264) + v31) = a3;
        int v81 = 4;
        break;
      case 4u:
        unsigned int v56 = v30 + 5;
        int v57 = *(_DWORD *)(a1 + 256);
        if (v56 <= v57)
        {
          unsigned int v60 = *(char **)(a1 + 264);
          unsigned int v61 = v31;
        }
        else
        {
          if (v57 <= 1) {
            int v57 = 1;
          }
          int v58 = 2 * v57;
          if (v58 <= (int)v56) {
            uint64_t v59 = v56;
          }
          else {
            uint64_t v59 = v58;
          }
          unsigned int v60 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v59, "Vector Storage (uint8_t, growth)");
          memcpy(v60, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v59;
          *(void *)(a1 + 264) = v60;
          unsigned int v61 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v60[v31 + 1], &v60[v31], v61 - v31);
        *(_DWORD *)(*(void *)(a1 + 264) + v31) = a3;
        int v82 = *(_DWORD *)(a1 + 260);
        unsigned int v31 = v82 + 4;
        *(_DWORD *)(a1 + 260) = v82 + 4;
        unsigned int v83 = v82 + 5;
        int v84 = *(_DWORD *)(a1 + 256);
        if (v83 <= v84)
        {
          int v36 = *(char **)(a1 + 264);
          unsigned int v37 = v31;
        }
        else
        {
          if (v84 <= 1) {
            int v84 = 1;
          }
          int v85 = 2 * v84;
          if (v85 <= (int)v83) {
            uint64_t v86 = v83;
          }
          else {
            uint64_t v86 = v85;
          }
          int v36 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v86, "Vector Storage (uint8_t, growth)");
          memcpy(v36, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v86;
          *(void *)(a1 + 264) = v36;
          unsigned int v37 = *(_DWORD *)(a1 + 260);
        }
        a3 >>= 32;
        goto LABEL_117;
      case 5u:
        unsigned int v62 = v30 + 5;
        int v63 = *(_DWORD *)(a1 + 256);
        if (v62 <= v63)
        {
          unsigned int v66 = *(char **)(a1 + 264);
          unsigned int v67 = v31;
        }
        else
        {
          if (v63 <= 1) {
            int v63 = 1;
          }
          int v64 = 2 * v63;
          if (v64 <= (int)v62) {
            uint64_t v65 = v62;
          }
          else {
            uint64_t v65 = v64;
          }
          unsigned int v66 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v65, "Vector Storage (uint8_t, growth)");
          memcpy(v66, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v65;
          *(void *)(a1 + 264) = v66;
          unsigned int v67 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v66[v31 + 1], &v66[v31], v67 - v31);
        *(_DWORD *)(*(void *)(a1 + 264) + v31) = a3;
        int v87 = *(_DWORD *)(a1 + 260);
        unsigned int v31 = v87 + 4;
        *(_DWORD *)(a1 + 260) = v87 + 4;
        unsigned int v88 = v87 + 6;
        int v89 = *(_DWORD *)(a1 + 256);
        if (v88 <= v89)
        {
          uint64_t v42 = *(char **)(a1 + 264);
          unsigned int v43 = v31;
        }
        else
        {
          if (v89 <= 1) {
            int v89 = 1;
          }
          int v90 = 2 * v89;
          if (v90 <= (int)v88) {
            uint64_t v91 = v88;
          }
          else {
            uint64_t v91 = v90;
          }
          uint64_t v42 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v91, "Vector Storage (uint8_t, growth)");
          memcpy(v42, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v91;
          *(void *)(a1 + 264) = v42;
          unsigned int v43 = *(_DWORD *)(a1 + 260);
        }
        a3 >>= 32;
LABEL_120:
        memmove(&v42[v31 + 1], &v42[v31], v43 - v31);
        *(_WORD *)(*(void *)(a1 + 264) + v31) = a3;
        int v81 = 2;
        break;
      case 6u:
        unsigned int v74 = v30 + 5;
        int v75 = *(_DWORD *)(a1 + 256);
        if (v74 <= v75)
        {
          int v78 = *(char **)(a1 + 264);
          unsigned int v79 = v31;
        }
        else
        {
          if (v75 <= 1) {
            int v75 = 1;
          }
          int v76 = 2 * v75;
          if (v76 <= (int)v74) {
            uint64_t v77 = v74;
          }
          else {
            uint64_t v77 = v76;
          }
          int v78 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v77, "Vector Storage (uint8_t, growth)");
          memcpy(v78, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v77;
          *(void *)(a1 + 264) = v78;
          unsigned int v79 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v78[v31 + 1], &v78[v31], v79 - v31);
        *(_DWORD *)(*(void *)(a1 + 264) + v31) = a3;
        int v92 = *(_DWORD *)(a1 + 260);
        unsigned int v93 = v92 + 4;
        *(_DWORD *)(a1 + 260) = v92 + 4;
        unsigned int v94 = v92 + 7;
        int v95 = *(_DWORD *)(a1 + 256);
        if (v94 <= v95)
        {
          unsigned int v98 = *(char **)(a1 + 264);
          unsigned int v99 = v93;
        }
        else
        {
          if (v95 <= 1) {
            int v95 = 1;
          }
          int v96 = 2 * v95;
          if (v96 <= (int)v94) {
            uint64_t v97 = v94;
          }
          else {
            uint64_t v97 = v96;
          }
          unsigned int v98 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v97, "Vector Storage (uint8_t, growth)");
          memcpy(v98, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v97;
          *(void *)(a1 + 264) = v98;
          unsigned int v99 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v98[v93 + 1], &v98[v93], v99 - v93);
        uint64_t v100 = *(void *)(a1 + 264) + v93;
        *(unsigned char *)(v100 + 2) = BYTE6(a3);
        *(_WORD *)uint64_t v100 = WORD2(a3);
LABEL_123:
        int v81 = 3;
        break;
      case 7u:
        unsigned int v68 = v30 + 9;
        int v69 = *(_DWORD *)(a1 + 256);
        if (v68 <= v69)
        {
          uint64_t v72 = *(char **)(a1 + 264);
          unsigned int v73 = v31;
        }
        else
        {
          if (v69 <= 1) {
            int v69 = 1;
          }
          int v70 = 2 * v69;
          if (v70 <= (int)v68) {
            uint64_t v71 = v68;
          }
          else {
            uint64_t v71 = v70;
          }
          uint64_t v72 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v71, "Vector Storage (uint8_t, growth)");
          memcpy(v72, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v71;
          *(void *)(a1 + 264) = v72;
          unsigned int v73 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v72[v31 + 1], &v72[v31], v73 - v31);
        *(void *)(*(void *)(a1 + 264) + v31) = a3;
        int v81 = 8;
        break;
      default:
        unsigned int v32 = v30 + 2;
        int v33 = *(_DWORD *)(a1 + 256);
        if (v32 <= v33)
        {
          int v36 = *(char **)(a1 + 264);
          unsigned int v37 = v31;
        }
        else
        {
          if (v33 <= 1) {
            int v33 = 1;
          }
          int v34 = 2 * v33;
          if (v34 <= (int)v32) {
            uint64_t v35 = v32;
          }
          else {
            uint64_t v35 = v34;
          }
          int v36 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v35, "Vector Storage (uint8_t, growth)");
          memcpy(v36, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v35;
          *(void *)(a1 + 264) = v36;
          unsigned int v37 = *(_DWORD *)(a1 + 260);
        }
LABEL_117:
        memmove(&v36[v31 + 1], &v36[v31], v37 - v31);
        *(unsigned char *)(*(void *)(a1 + 264) + v31) = a3;
        int v81 = 1;
        break;
    }
    *(_DWORD *)(a1 + 260) += v81;
  }
  uint64_t result = *(int *)(a1 + 308);
  *(_DWORD *)(a1 + 308) = result + 1;
  return result;
}

uint64_t glpLLVMConstReal(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 260);
  int v7 = v6 + 1;
  int v8 = *(_DWORD *)(a1 + 256);
  if ((int)v6 + 1 <= v8)
  {
    int v11 = *(char **)(a1 + 264);
    int v12 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v8 <= 1) {
      int v8 = 1;
    }
    int v9 = 2 * v8;
    if (v9 <= v7) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = v9;
    }
    int v11 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v10, "Vector Storage (uint8_t, growth)");
    memcpy(v11, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v10;
    *(void *)(a1 + 264) = v11;
    int v12 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v11[v6 + 1], &v11[v6], (v12 - v6));
  *(unsigned char *)(*(void *)(a1 + 264) + v6) = 32;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMType(a1, a2);
  uint64_t v13 = *(unsigned int *)(a1 + 260);
  int v14 = v13 + 8;
  int v15 = *(_DWORD *)(a1 + 256);
  if ((int)v13 + 8 <= v15)
  {
    int v18 = *(char **)(a1 + 264);
    int v19 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v15 <= 1) {
      int v15 = 1;
    }
    int v16 = 2 * v15;
    if (v16 <= v14) {
      uint64_t v17 = v14;
    }
    else {
      uint64_t v17 = v16;
    }
    int v18 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v17, "Vector Storage (uint8_t, growth)");
    memcpy(v18, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v17;
    *(void *)(a1 + 264) = v18;
    int v19 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v18[v13 + 1], &v18[v13], (v19 - v13));
  *(double *)(*(void *)(a1 + 264) + v13) = a3;
  *(_DWORD *)(a1 + 260) += 8;
  uint64_t result = *(int *)(a1 + 308);
  *(_DWORD *)(a1 + 308) = result + 1;
  return result;
}

uint64_t glpLLVMConstVector(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 260);
  int v7 = v6 + 1;
  int v8 = *(_DWORD *)(a1 + 256);
  if ((int)v6 + 1 <= v8)
  {
    int v11 = *(char **)(a1 + 264);
    int v12 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v8 <= 1) {
      int v8 = 1;
    }
    int v9 = 2 * v8;
    if (v9 <= v7) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = v9;
    }
    int v11 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v10, "Vector Storage (uint8_t, growth)");
    memcpy(v11, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v10;
    *(void *)(a1 + 264) = v11;
    int v12 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v11[v6 + 1], &v11[v6], (v12 - v6));
  *(unsigned char *)(*(void *)(a1 + 264) + v6) = 33;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeArrayOfLLVMValues(a1, a2, a3);
  uint64_t result = *(int *)(a1 + 308);
  *(_DWORD *)(a1 + 308) = result + 1;
  return result;
}

uint64_t glpLLVMConstArray(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = *(unsigned int *)(a1 + 260);
  int v9 = v8 + 1;
  int v10 = *(_DWORD *)(a1 + 256);
  if ((int)v8 + 1 <= v10)
  {
    uint64_t v13 = *(char **)(a1 + 264);
    int v14 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v10 <= 1) {
      int v10 = 1;
    }
    int v11 = 2 * v10;
    if (v11 <= v9) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = v11;
    }
    uint64_t v13 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v12, "Vector Storage (uint8_t, growth)");
    memcpy(v13, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v12;
    *(void *)(a1 + 264) = v13;
    int v14 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v13[v8 + 1], &v13[v8], (v14 - v8));
  *(unsigned char *)(*(void *)(a1 + 264) + v8) = 34;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMType(a1, a2);
  glpSerializeArrayOfLLVMValues(a1, a3, a4);
  uint64_t result = *(int *)(a1 + 308);
  *(_DWORD *)(a1 + 308) = result + 1;
  return result;
}

uint64_t glpBuildAlloca(uint64_t a1, uint64_t a2)
{
  uint64_t inserted = glpLLVMGetInsertBlock(a1);
  glpLLVMPositionBuilderAtEnd(a1, *(void *)(a1 + 176));
  uint64_t v5 = *(unsigned int *)(a1 + 260);
  int v6 = v5 + 1;
  int v7 = *(_DWORD *)(a1 + 256);
  if ((int)v5 + 1 <= v7)
  {
    int v10 = *(char **)(a1 + 264);
    int v11 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v7 <= 1) {
      int v7 = 1;
    }
    int v8 = 2 * v7;
    if (v8 <= v6) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = v8;
    }
    int v10 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v9, "Vector Storage (uint8_t, growth)");
    memcpy(v10, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v9;
    *(void *)(a1 + 264) = v10;
    int v11 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v10[v5 + 1], &v10[v5], (v11 - v5));
  *(unsigned char *)(*(void *)(a1 + 264) + v5) = 44;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMType(a1, a2);
  if (*(_DWORD *)(a1 + 300))
  {
    uint64_t v12 = *(unsigned int *)(a1 + 260);
    int v13 = v12 + 1;
    int v14 = *(_DWORD *)(a1 + 256);
    if ((int)v12 + 1 <= v14)
    {
      uint64_t v17 = *(char **)(a1 + 264);
      int v18 = *(_DWORD *)(a1 + 260);
    }
    else
    {
      if (v14 <= 1) {
        int v14 = 1;
      }
      int v15 = 2 * v14;
      if (v15 <= v13) {
        uint64_t v16 = v13;
      }
      else {
        uint64_t v16 = v15;
      }
      uint64_t v17 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v16, "Vector Storage (uint8_t, growth)");
      memcpy(v17, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
      (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
      *(_DWORD *)(a1 + 256) = v16;
      *(void *)(a1 + 264) = v17;
      int v18 = *(_DWORD *)(a1 + 260);
    }
    memmove(&v17[v12 + 1], &v17[v12], (v18 - v12));
    *(unsigned char *)(*(void *)(a1 + 264) + v12) = 0;
    ++*(_DWORD *)(a1 + 260);
  }
  uint64_t v19 = *(int *)(a1 + 308);
  *(_DWORD *)(a1 + 308) = v19 + 1;
  glpLLVMPositionBuilderAtEnd(a1, inserted);
  return v19;
}

void *glpLLVMBuildStore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 260);
  int v7 = v6 + 1;
  int v8 = *(_DWORD *)(a1 + 256);
  if ((int)v6 + 1 <= v8)
  {
    int v11 = *(char **)(a1 + 264);
    int v12 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v8 <= 1) {
      int v8 = 1;
    }
    int v9 = 2 * v8;
    if (v9 <= v7) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = v9;
    }
    int v11 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v10, "Vector Storage (uint8_t, growth)");
    memcpy(v11, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v10;
    *(void *)(a1 + 264) = v11;
    int v12 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v11[v6 + 1], &v11[v6], (v12 - v6));
  *(unsigned char *)(*(void *)(a1 + 264) + v6) = 46;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMValue(a1, a2);

  return glpSerializeLLVMValue(a1, a3);
}

uint64_t glpLLVMCGSamplerNode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v69[2] = *MEMORY[0x263EF8340];
  Variableuint64_t Extra = glpLValueNodeGetVariableExtra(a2);
  uint64_t Offset = glpDerefNodeGetOffset(a2);
  if (Offset) {
    Offsetuint64_t Expr = glpOffsetNodeGetOffsetExpr(Offset);
  }
  else {
    Offsetuint64_t Expr = 0;
  }
  if (*(unsigned char *)(VariableExtra + 52))
  {
    uint64_t v17 = *(void *)(*(void *)(VariableExtra + 144) + 8);
    uint64_t v18 = *(unsigned int *)(v17 + 4);
    if (OffsetExpr)
    {
      if (!glpIsConstantNode(OffsetExpr)) {
        return 0;
      }
      int v19 = *(_DWORD *)(VariableExtra + 156);
      int v20 = *(_DWORD *)glpConstantNodeGetValue(OffsetExpr) + v19;
    }
    else
    {
      int v20 = *(_DWORD *)(VariableExtra + 156);
    }
    if ((int)v18 >= 1)
    {
      for (uint64_t i = (_DWORD *)(*(void *)(v17 + 8) + 8); v20 != *i; i += 4)
      {
        if (!--v18) {
          return 0;
        }
      }
      uint64_t v35 = (void *)(*(void *)(a1 + 600) + 48 * *(i - 1));
      goto LABEL_50;
    }
    return 0;
  }
  uint64_t v9 = glpLLVMGetVariablePointer(a1, VariableExtra);
  uint64_t v10 = glpLLVMPointerType(a1, *(void *)(a1 + 40), 0);
  if (OffsetExpr)
  {
    Value = (unsigned int *)glpConstantNodeGetValue(OffsetExpr);
    uint64_t v12 = *(void *)(a1 + 520);
    if (!v12)
    {
      uint64_t v12 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), 0, 0);
      *(void *)(a1 + 520) = v12;
    }
    v69[0] = v12;
    unint64_t v13 = *Value;
    if (v13 > 7)
    {
      uint64_t v15 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), (int)v13, 1);
    }
    else
    {
      unint64_t v14 = a1 + 8 * v13;
      uint64_t v15 = *(void *)(v14 + 520);
      if (!v15)
      {
        uint64_t v16 = (uint64_t *)(v14 + 520);
        uint64_t v15 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), v13, 0);
        *uint64_t v16 = v15;
      }
    }
    v69[1] = v15;
    uint64_t v9 = glpLLVMBuildGEP(a1, v9, v69, 2, "struct_gep");
  }
  uint64_t v23 = glpLLVMCastOperation(a1, 86, v9, v10, "ptr");
  uint64_t v24 = glpLLVMBuildLoad(a1, v23, "");
  uint64_t v25 = *(unsigned int *)(a1 + 596);
  uint64_t SaType = glpASTNodeGetSaType(a2);
  int PrimitiveType = glpPrimitiveTypeGetPrimitiveType(SaType);
  int v28 = PrimitiveType;
  if ((int)v25 < 1)
  {
    uint64_t v31 = 0;
  }
  else
  {
    uint64_t v29 = 0;
    unsigned int v30 = 0;
    LODWORD(v31) = 0;
    unsigned int v32 = (int *)(*(void *)(a1 + 600) + 36);
    do
    {
      int v33 = *v32;
      v32 += 12;
      BOOL v34 = v33 == PrimitiveType;
      if (v33 == PrimitiveType) {
        uint64_t v31 = (v31 + 1);
      }
      else {
        uint64_t v31 = v31;
      }
      if (v34) {
        unsigned int v30 = v29;
      }
      ++v29;
    }
    while (v25 != v29);
    if (v31 == 1)
    {
      uint64_t v35 = (void *)(*(void *)(a1 + 600) + 48 * v30);
LABEL_50:
      *a3 = v35[1];
      return *v35;
    }
  }
  int v64 = a3;
  v69[0] = 0;
  uint64_t v62 = glpLLVMGetTextureTypeFromSampler(a1, v69, PrimitiveType);
  uint64_t v36 = glpLLVMCGInsertBasicBlock(a1, "afterSwitch");
  uint64_t v61 = *(void *)(a1 + 432);
  *(void *)(a1 + 432) = v36;
  uint64_t inserted = glpLLVMGetInsertBlock(a1);
  uint64_t v67 = v36;
  uint64_t v66 = glpLLVMBuildSwitch(a1, v24, v36, (v31 - 1));
  int v63 = &v60;
  unint64_t v37 = 8 * v31;
  MEMORY[0x270FA5388](v66);
  uint64_t v38 = (v37 + 15) & 0xFFFFFFFF0;
  if (v37 >= 0x200) {
    size_t v39 = 512;
  }
  else {
    size_t v39 = 8 * v31;
  }
  unsigned int v68 = (uint64_t *)((char *)&v60 - v38);
  bzero((char *)&v60 - v38, v39);
  MEMORY[0x270FA5388](v40);
  uint64_t v41 = (uint64_t *)((char *)&v60 - v38);
  bzero((char *)&v60 - v38, v39);
  MEMORY[0x270FA5388](v42);
  unsigned int v43 = (uint64_t *)((char *)&v60 - v38);
  bzero((char *)&v60 - v38, v39);
  if ((int)v25 >= 1)
  {
    uint64_t v44 = 0;
    int v45 = 0;
    uint64_t v46 = 48 * v25;
    do
    {
      uint64_t v47 = *(void *)(a1 + 600);
      if (*(_DWORD *)(v47 + v44 + 36) == v28)
      {
        if (v45)
        {
          uint64_t v48 = glpLLVMCGInsertBasicBlock(a1, "case");
          glpLLVMPositionBuilderAtEnd(a1, v48);
          uint64_t v49 = v67;
          v68[v45] = v48;
          uint64_t v50 = v47 + v44;
          uint64_t v51 = *(void *)(v50 + 8);
          v41[v45] = *(void *)v50;
          v43[v45] = v51;
          glpLLVMEmitBranch(a1, v49);
          unint64_t v52 = *(unsigned int *)(v50 + 32);
          if (v52 > 7)
          {
            uint64_t v54 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), (int)v52, 1);
          }
          else
          {
            unint64_t v53 = a1 + 8 * v52;
            uint64_t v54 = *(void *)(v53 + 520);
            if (!v54)
            {
              unsigned int v55 = (uint64_t *)(v53 + 520);
              uint64_t v54 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), v52, 0);
              *unsigned int v55 = v54;
            }
          }
          glpLLVMAddCase(a1, v66, v54, v48);
        }
        else
        {
          *unsigned int v68 = inserted;
          uint64_t v56 = *(void *)(v47 + v44 + 8);
          *uint64_t v41 = *(void *)(v47 + v44);
          *unsigned int v43 = v56;
        }
        ++v45;
      }
      v44 += 48;
    }
    while (v46 != v44);
  }
  *(void *)(a1 + 432) = v61;
  glpLLVMPositionBuilderAtEnd(a1, v67);
  uint64_t v22 = glpLLVMBuildPhi(a1, v62, "texture");
  int v57 = v68;
  glpLLVMAddIncoming(a1, v22, v41, v68, v31);
  uint64_t v58 = glpLLVMBuildPhi(a1, v69[0], "sampler");
  glpLLVMAddIncoming(a1, v58, v43, v57, v31);
  *int v64 = v58;
  return v22;
}

uint64_t glpMatchInputSize(uint64_t result, uint64_t a2, unsigned int *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a3;
  if (v3 != a3[1])
  {
    uint64_t v6 = result;
    if (glpPrimitiveTypeGetCategory(*a3) == 2) {
      unsigned int Length = glpPrimitiveVectorGetLength(v3);
    }
    else {
      unsigned int Length = 1;
    }
    v9[0] = Length;
    uint64_t v8 = a3[1];
    if (glpPrimitiveTypeGetCategory(v8) == 2) {
      uint64_t result = glpPrimitiveVectorGetLength(v8);
    }
    else {
      uint64_t result = 1;
    }
    v9[1] = result;
    if (Length != result)
    {
      uint64_t result = glpLLVMSplatScalar(v6, *(void *)(a2 + 8 * (Length > 1)), v9[Length < 2]);
      *(void *)(a2 + 8 * (Length > 1)) = result;
    }
  }
  return result;
}

uint64_t glpLLVMBinaryOperation(uint64_t a1, char a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 260);
  int v11 = v10 + 1;
  int v12 = *(_DWORD *)(a1 + 256);
  if ((int)v10 + 1 <= v12)
  {
    uint64_t v15 = *(char **)(a1 + 264);
    int v16 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v12 <= 1) {
      int v12 = 1;
    }
    int v13 = 2 * v12;
    if (v13 <= v11) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = v13;
    }
    uint64_t v15 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v14, "Vector Storage (uint8_t, growth)");
    memcpy(v15, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v14;
    *(void *)(a1 + 264) = v15;
    int v16 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v15[v10 + 1], &v15[v10], (v16 - v10));
  *(unsigned char *)(*(void *)(a1 + 264) + v10) = a2;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMValue(a1, a3);
  glpSerializeLLVMValue(a1, a4);
  if (*(_DWORD *)(a1 + 300))
  {
    size_t v17 = strlen(a5) + 1;
    uint64_t v18 = *(unsigned int *)(a1 + 260);
    int v19 = v17 + v18;
    int v20 = *(_DWORD *)(a1 + 256);
    if ((int)v17 + (int)v18 <= v20)
    {
      uint64_t v23 = *(char **)(a1 + 264);
      int v24 = *(_DWORD *)(a1 + 260);
    }
    else
    {
      if (v20 <= 1) {
        int v20 = 1;
      }
      int v21 = 2 * v20;
      if (v21 <= v19) {
        uint64_t v22 = v19;
      }
      else {
        uint64_t v22 = v21;
      }
      uint64_t v23 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v22, "Vector Storage (uint8_t, growth)");
      memcpy(v23, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
      (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
      *(_DWORD *)(a1 + 256) = v22;
      *(void *)(a1 + 264) = v23;
      int v24 = *(_DWORD *)(a1 + 260);
    }
    memmove(&v23[v18 + 1], &v23[v18], (v24 - v18));
    memcpy((void *)(*(void *)(a1 + 264) + v18), a5, v17);
    *(_DWORD *)(a1 + 260) += v17;
  }
  uint64_t result = *(int *)(a1 + 308);
  *(_DWORD *)(a1 + 308) = result + 1;
  return result;
}

uint64_t glpLLVMBuildBuiltinNoPrefix(uint64_t a1, const char *a2, uint64_t a3, uint64_t *a4, uint64_t a5, int a6, int a7)
{
  v16[1] = *MEMORY[0x263EF8340];
  int v12 = glpLLVMGetTypeString(&v14, a6, a7);
  snprintf_l(v15, 0x200uLL, 0, "%s.%s", a2, v12);
  v16[0] = 0x300000001;
  return glpLLVMCallFunction(a1, v15, a5, a4, a3, (unsigned int *)v16, 2);
}

uint64_t glpBuildConstantIntVector(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  v19[1] = *MEMORY[0x263EF8340];
  if (glpPrimitiveTypeGetCategory(a2) == 2) {
    uint64_t Length = glpPrimitiveVectorGetLength(a2);
  }
  else {
    uint64_t Length = 1;
  }
  uint64_t ScalarType = glpPrimitiveTypeGetScalarType(a2);
  uint64_t v10 = glpPrimitiveTypeToLLVMType(a1, ScalarType, a3);
  uint64_t v11 = glpLLVMConstIntCache((uint64_t)a1, v10, a4, 1);
  uint64_t v12 = v11;
  if ((int)Length >= 2)
  {
    unint64_t v13 = 8 * Length;
    MEMORY[0x270FA5388](v11);
    uint64_t v15 = (char *)v19 - v14;
    if (v13 >= 0x200) {
      size_t v16 = 512;
    }
    else {
      size_t v16 = 8 * Length;
    }
    bzero(v15, v16);
    uint64_t v17 = 0;
    do
    {
      *(void *)&v15[v17] = v12;
      v17 += 8;
    }
    while (v13 != v17);
    return glpLLVMConstVectorCache((uint64_t)a1, v15, Length);
  }
  return v12;
}

uint64_t glpLLVMBuildSelect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 260);
  int v11 = v10 + 1;
  int v12 = *(_DWORD *)(a1 + 256);
  if ((int)v10 + 1 <= v12)
  {
    uint64_t v15 = *(char **)(a1 + 264);
    int v16 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v12 <= 1) {
      int v12 = 1;
    }
    int v13 = 2 * v12;
    if (v13 <= v11) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = v13;
    }
    uint64_t v15 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v14, "Vector Storage (uint8_t, growth)");
    memcpy(v15, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v14;
    *(void *)(a1 + 264) = v15;
    int v16 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v15[v10 + 1], &v15[v10], (v16 - v10));
  *(unsigned char *)(*(void *)(a1 + 264) + v10) = 91;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMValue(a1, a2);
  glpSerializeLLVMValue(a1, a3);
  glpSerializeLLVMValue(a1, a4);
  if (*(_DWORD *)(a1 + 300))
  {
    size_t v17 = strlen(a5) + 1;
    uint64_t v18 = *(unsigned int *)(a1 + 260);
    int v19 = v17 + v18;
    int v20 = *(_DWORD *)(a1 + 256);
    if ((int)v17 + (int)v18 <= v20)
    {
      uint64_t v23 = *(char **)(a1 + 264);
      int v24 = *(_DWORD *)(a1 + 260);
    }
    else
    {
      if (v20 <= 1) {
        int v20 = 1;
      }
      int v21 = 2 * v20;
      if (v21 <= v19) {
        uint64_t v22 = v19;
      }
      else {
        uint64_t v22 = v21;
      }
      uint64_t v23 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v22, "Vector Storage (uint8_t, growth)");
      memcpy(v23, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
      (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
      *(_DWORD *)(a1 + 256) = v22;
      *(void *)(a1 + 264) = v23;
      int v24 = *(_DWORD *)(a1 + 260);
    }
    memmove(&v23[v18 + 1], &v23[v18], (v24 - v18));
    memcpy((void *)(*(void *)(a1 + 264) + v18), a5, v17);
    *(_DWORD *)(a1 + 260) += v17;
  }
  uint64_t result = *(int *)(a1 + 308);
  *(_DWORD *)(a1 + 308) = result + 1;
  return result;
}

uint64_t glpLLVMCastToHalf(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v13[1] = *MEMORY[0x263EF8340];
  uint64_t v11 = a2;
  if (a4 == 3 || !a4)
  {
    uint64_t v6 = glpLLVMGetTypeString(&v10, a3, a4);
    int v7 = "v2f16";
    if (glpPrimitiveTypeGetCategory(a3) == 2 && glpPrimitiveVectorGetLength(a3) == 4) {
      int v7 = "v4f16";
    }
    snprintf_l(v12, 0x200uLL, 0, "air.convert.f.%s.f.%s", v7, v6);
    uint64_t v8 = *(void *)(a1 + 80);
    v13[0] = 0x300000001;
    return glpLLVMCallFunction(a1, v12, v8, &v11, 1, (unsigned int *)v13, 2);
  }
  return a2;
}

uint64_t glpMatchInputSize3(uint64_t result, uint64_t a2, unsigned int *a3)
{
  uint64_t v3 = *a3;
  if (v3 != a3[1])
  {
    uint64_t v6 = result;
    if (glpPrimitiveTypeGetCategory(*a3) == 2) {
      uint64_t Length = glpPrimitiveVectorGetLength(v3);
    }
    else {
      uint64_t Length = 1;
    }
    uint64_t v8 = a3[1];
    if (glpPrimitiveTypeGetCategory(v8) == 2) {
      uint64_t result = glpPrimitiveVectorGetLength(v8);
    }
    else {
      uint64_t result = 1;
    }
    if (Length != result)
    {
      *(void *)(a2 + 8) = glpLLVMSplatScalar(v6, *(void *)(a2 + 8), Length);
      uint64_t result = glpLLVMSplatScalar(v6, *(void *)(a2 + 16), Length);
      *(void *)(a2 + 16) = result;
    }
  }
  return result;
}

uint64_t glpLLVMBuildBuiltinWithPrefix(uint64_t a1, const char *a2, uint64_t a3, uint64_t *a4, uint64_t a5, int a6, int a7)
{
  v16[1] = *MEMORY[0x263EF8340];
  uint64_t v14 = 0;
  int v12 = glpLLVMGetTypeString(&v14, a6, a7);
  snprintf_l(v15, 0x200uLL, 0, "%s%s.%s", a2, v14, v12);
  v16[0] = 0x300000001;
  return glpLLVMCallFunction(a1, v15, a5, a4, a3, (unsigned int *)v16, 2);
}

uint64_t glpLLVMUnaryOperation(uint64_t a1, char a2, uint64_t a3, const char *a4)
{
  uint64_t v8 = *(unsigned int *)(a1 + 260);
  int v9 = v8 + 1;
  int v10 = *(_DWORD *)(a1 + 256);
  if ((int)v8 + 1 <= v10)
  {
    int v13 = *(char **)(a1 + 264);
    int v14 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v10 <= 1) {
      int v10 = 1;
    }
    int v11 = 2 * v10;
    if (v11 <= v9) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = v11;
    }
    int v13 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v12, "Vector Storage (uint8_t, growth)");
    memcpy(v13, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v12;
    *(void *)(a1 + 264) = v13;
    int v14 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v13[v8 + 1], &v13[v8], (v14 - v8));
  *(unsigned char *)(*(void *)(a1 + 264) + v8) = a2;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMValue(a1, a3);
  if (*(_DWORD *)(a1 + 300))
  {
    size_t v15 = strlen(a4) + 1;
    uint64_t v16 = *(unsigned int *)(a1 + 260);
    int v17 = v15 + v16;
    int v18 = *(_DWORD *)(a1 + 256);
    if ((int)v15 + (int)v16 <= v18)
    {
      int v21 = *(char **)(a1 + 264);
      int v22 = *(_DWORD *)(a1 + 260);
    }
    else
    {
      if (v18 <= 1) {
        int v18 = 1;
      }
      int v19 = 2 * v18;
      if (v19 <= v17) {
        uint64_t v20 = v17;
      }
      else {
        uint64_t v20 = v19;
      }
      int v21 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v20, "Vector Storage (uint8_t, growth)");
      memcpy(v21, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
      (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
      *(_DWORD *)(a1 + 256) = v20;
      *(void *)(a1 + 264) = v21;
      int v22 = *(_DWORD *)(a1 + 260);
    }
    memmove(&v21[v16 + 1], &v21[v16], (v22 - v16));
    memcpy((void *)(*(void *)(a1 + 264) + v16), a4, v15);
    *(_DWORD *)(a1 + 260) += v15;
  }
  uint64_t result = *(int *)(a1 + 308);
  *(_DWORD *)(a1 + 308) = result + 1;
  return result;
}

uint64_t glpLLVMBuildLength(uint64_t a1, uint64_t *a2, int *a3, int a4, uint64_t a5)
{
  v33[1] = *MEMORY[0x263EF8340];
  if (glpPrimitiveTypeGetCategory(*a3) == 1)
  {
    int v10 = glpLLVMGetTypeString(&v31, *a3, a4);
    snprintf_l(v32, 0x200uLL, 0, "%s.%s", "air.fabs", v10);
    v33[0] = 0x300000001;
    uint64_t v11 = a1;
    uint64_t v12 = a5;
    int v13 = a2;
  }
  else
  {
    uint64_t v14 = *a2;
    uint64_t v15 = *a3;
    uint64_t v29 = a5;
    if (glpPrimitiveTypeGetCategory(*a3) == 1)
    {
      uint64_t v16 = glpLLVMBinaryOperation(a1, 58, v14, v14, "squared_length");
    }
    else
    {
      int Length = glpPrimitiveVectorGetLength(v15);
      if (Length < 1)
      {
        uint64_t v16 = 0;
      }
      else
      {
        unint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t v20 = Length;
        do
        {
          if (v18 > 7)
          {
            uint64_t v22 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), v18, 1);
          }
          else
          {
            unint64_t v21 = a1 + 8 * v18;
            uint64_t v22 = *(void *)(v21 + 520);
            if (!v22)
            {
              uint64_t v22 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), v18, 0);
              *(void *)(v21 + 520) = v22;
            }
          }
          uint64_t Element = glpLLVMBuildExtractElement(a1, v14, v22, "comp");
          uint64_t v16 = glpLLVMBinaryOperation(a1, 58, Element, Element, "comp_squared");
          if (v19) {
            uint64_t v16 = glpLLVMBinaryOperation(a1, 54, v19, v16, "squared_length");
          }
          ++v18;
          uint64_t v19 = v16;
        }
        while (v20 != v18);
      }
    }
    uint64_t v30 = v16;
    int ScalarType = glpPrimitiveTypeGetScalarType(*a3);
    if (a4) {
      BOOL v25 = a4 == 3;
    }
    else {
      BOOL v25 = 1;
    }
    if (v25) {
      int v26 = "air.fast_sqrt";
    }
    else {
      int v26 = "air.sqrt";
    }
    uint64_t v27 = glpLLVMGetTypeString(&v31, ScalarType, a4);
    snprintf_l(v32, 0x200uLL, 0, "%s.%s", v26, v27);
    v33[0] = 0x300000001;
    int v13 = &v30;
    uint64_t v11 = a1;
    uint64_t v12 = v29;
  }
  return glpLLVMCallFunction(v11, v32, v12, v13, 1, (unsigned int *)v33, 2);
}

uint64_t glpLLVMBuildNormalize(uint64_t a1, uint64_t *a2, int *a3, int a4, uint64_t a5)
{
  if (glpPrimitiveTypeGetCategory(*a3) == 1)
  {
    uint64_t v10 = glpLLVMTypeOf(a1, *a2);
    uint64_t v11 = *a2;
    uint64_t v12 = glpLLVMConstFromTypeCache(a1, 35, v10);
    uint64_t v13 = glpLLVMBuildFCmp(a1, 3, v11, v12, "cmp");
    uint64_t v14 = glpLLVMConstRealCache(a1, a5, 1.0);
    uint64_t v15 = glpLLVMConstRealCache(a1, a5, -1.0);
    return glpLLVMBuildSelect(a1, v13, v14, v15, "normalize");
  }
  else
  {
    uint64_t Length = glpPrimitiveVectorGetLength(*a3);
    uint64_t v18 = glpLLVMGetElementType(a1, a5);
    uint64_t v19 = glpLLVMBuildLength(a1, a2, a3, a4, v18);
    uint64_t v20 = glpLLVMSplatElement(a1, v19, Length);
    uint64_t v21 = *a2;
    return glpLLVMBinaryOperation(a1, 61, v21, v20, "normalize");
  }
}

uint64_t glpLLVMBuildConvert(uint64_t a1, uint64_t *a2, unsigned int *a3, double a4)
{
  if (glpPrimitiveTypeGetCategory(*a3) == 1)
  {
    uint64_t v8 = glpLLVMTypeOf(a1, *a2);
    uint64_t v9 = glpLLVMConstRealCache(a1, v8, a4);
    uint64_t v10 = "";
  }
  else
  {
    uint64_t Length = glpPrimitiveVectorGetLength(*a3);
    uint64_t v12 = glpLLVMTypeOf(a1, *a2);
    uint64_t v13 = glpLLVMGetElementType(a1, v12);
    uint64_t v14 = glpLLVMConstRealCache(a1, v13, a4);
    uint64_t v9 = glpLLVMSplatElement(a1, v14, Length);
    uint64_t v10 = "res";
  }
  uint64_t v15 = *a2;

  return glpLLVMBinaryOperation(a1, 58, v15, v9, v10);
}

uint64_t glpLLVMBuildCross(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = 0;
  v21[3] = *MEMORY[0x263EF8340];
  memset(v21, 0, 24);
  memset(v20, 0, sizeof(v20));
  do
  {
    unint64_t v5 = a1 + 8 * v4;
    uint64_t v6 = *(void *)(v5 + 520);
    if (!v6)
    {
      uint64_t v6 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), v4, 0);
      *(void *)(v5 + 520) = v6;
    }
    v21[v4] = glpLLVMBuildExtractElement(a1, *a2, v6, "x");
    v20[v4++] = glpLLVMBuildExtractElement(a1, a2[1], v6, "y");
  }
  while (v4 != 3);
  uint64_t v7 = glpLLVMTypeOf(a1, *a2);
  uint64_t v8 = glpLLVMConstFromTypeCache(a1, 37, v7);
  unint64_t v9 = 0;
  uint64_t v18 = *(void *)(a1 + 40);
  uint64_t v10 = 0xFFFFFFFF00000000;
  do
  {
    unint64_t v19 = v9 + 1;
    if (v9 == 2) {
      unint64_t v11 = 0;
    }
    else {
      unint64_t v11 = v9 + 1;
    }
    if (v9) {
      uint64_t v12 = v10 >> 32;
    }
    else {
      uint64_t v12 = 2;
    }
    uint64_t v13 = glpLLVMBinaryOperation(a1, 58, v21[v11], v20[v12], "");
    uint64_t v14 = glpLLVMBinaryOperation(a1, 58, v20[v11], v21[v12], "");
    uint64_t v15 = glpLLVMBinaryOperation(a1, 56, v13, v14, "");
    uint64_t v16 = glpLLVMConstIntCache(a1, v18, v9, 1);
    uint64_t result = glpLLVMBuildInsertElement(a1, v8, v15, v16, "");
    uint64_t v8 = result;
    v10 += 0x100000000;
    ++v9;
  }
  while (v19 != 3);
  return result;
}

uint64_t glpLLVMBuildReflect(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  v22[1] = *MEMORY[0x263EF8340];
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  uint64_t v10 = *(unsigned int *)(a3 + 4);
  if (glpPrimitiveTypeGetCategory(*(_DWORD *)(a3 + 4)) == 2)
  {
    uint64_t Length = glpPrimitiveVectorGetLength(v10);
    uint64_t v12 = glpLLVMTypeOf(a1, v9);
    if ((int)Length < 2)
    {
      int v13 = 0;
    }
    else
    {
      uint64_t v12 = glpLLVMGetElementType(a1, v12);
      int v13 = 1;
    }
  }
  else
  {
    uint64_t v12 = glpLLVMTypeOf(a1, v9);
    int v13 = 0;
    uint64_t Length = 1;
  }
  uint64_t v14 = glpLLVMGetTypeString(&v20, *(_DWORD *)a3, a4);
  snprintf_l(v21, 0x200uLL, 0, "%s.%s", "air.dot", v14);
  v22[0] = 0x300000001;
  uint64_t v15 = glpLLVMCallFunction(a1, v21, v12, a2, 2, (unsigned int *)v22, 2);
  uint64_t v16 = glpLLVMConstRealCache(a1, v12, 2.0);
  uint64_t v17 = glpLLVMBinaryOperation(a1, 58, v16, v15, "");
  if (v13) {
    uint64_t v17 = glpLLVMSplatElement(a1, v17, Length);
  }
  uint64_t v18 = glpLLVMBinaryOperation(a1, 58, v17, v9, "");
  return glpLLVMBinaryOperation(a1, 56, v8, v18, "reflect");
}

uint64_t glpLLVMBuildExtractElement(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v8 = *(unsigned int *)(a1 + 260);
  int v9 = v8 + 1;
  int v10 = *(_DWORD *)(a1 + 256);
  if ((int)v8 + 1 <= v10)
  {
    int v13 = *(char **)(a1 + 264);
    int v14 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v10 <= 1) {
      int v10 = 1;
    }
    int v11 = 2 * v10;
    if (v11 <= v9) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = v11;
    }
    int v13 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v12, "Vector Storage (uint8_t, growth)");
    memcpy(v13, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v12;
    *(void *)(a1 + 264) = v13;
    int v14 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v13[v8 + 1], &v13[v8], (v14 - v8));
  *(unsigned char *)(*(void *)(a1 + 264) + v8) = 47;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMValue(a1, a2);
  glpSerializeLLVMValue(a1, a3);
  if (*(_DWORD *)(a1 + 300))
  {
    size_t v15 = strlen(a4) + 1;
    uint64_t v16 = *(unsigned int *)(a1 + 260);
    int v17 = v15 + v16;
    int v18 = *(_DWORD *)(a1 + 256);
    if ((int)v15 + (int)v16 <= v18)
    {
      uint64_t v21 = *(char **)(a1 + 264);
      int v22 = *(_DWORD *)(a1 + 260);
    }
    else
    {
      if (v18 <= 1) {
        int v18 = 1;
      }
      int v19 = 2 * v18;
      if (v19 <= v17) {
        uint64_t v20 = v17;
      }
      else {
        uint64_t v20 = v19;
      }
      uint64_t v21 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v20, "Vector Storage (uint8_t, growth)");
      memcpy(v21, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
      (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
      *(_DWORD *)(a1 + 256) = v20;
      *(void *)(a1 + 264) = v21;
      int v22 = *(_DWORD *)(a1 + 260);
    }
    memmove(&v21[v16 + 1], &v21[v16], (v22 - v16));
    memcpy((void *)(*(void *)(a1 + 264) + v16), a4, v15);
    *(_DWORD *)(a1 + 260) += v15;
  }
  uint64_t result = *(int *)(a1 + 308);
  *(_DWORD *)(a1 + 308) = result + 1;
  return result;
}

uint64_t glpLLVMBuildInsertElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 260);
  int v11 = v10 + 1;
  int v12 = *(_DWORD *)(a1 + 256);
  if ((int)v10 + 1 <= v12)
  {
    size_t v15 = *(char **)(a1 + 264);
    int v16 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v12 <= 1) {
      int v12 = 1;
    }
    int v13 = 2 * v12;
    if (v13 <= v11) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = v13;
    }
    size_t v15 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v14, "Vector Storage (uint8_t, growth)");
    memcpy(v15, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v14;
    *(void *)(a1 + 264) = v15;
    int v16 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v15[v10 + 1], &v15[v10], (v16 - v10));
  *(unsigned char *)(*(void *)(a1 + 264) + v10) = 48;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMValue(a1, a2);
  glpSerializeLLVMValue(a1, a3);
  glpSerializeLLVMValue(a1, a4);
  if (*(_DWORD *)(a1 + 300))
  {
    size_t v17 = strlen(a5) + 1;
    uint64_t v18 = *(unsigned int *)(a1 + 260);
    int v19 = v17 + v18;
    int v20 = *(_DWORD *)(a1 + 256);
    if ((int)v17 + (int)v18 <= v20)
    {
      uint64_t v23 = *(char **)(a1 + 264);
      int v24 = *(_DWORD *)(a1 + 260);
    }
    else
    {
      if (v20 <= 1) {
        int v20 = 1;
      }
      int v21 = 2 * v20;
      if (v21 <= v19) {
        uint64_t v22 = v19;
      }
      else {
        uint64_t v22 = v21;
      }
      uint64_t v23 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v22, "Vector Storage (uint8_t, growth)");
      memcpy(v23, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
      (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
      *(_DWORD *)(a1 + 256) = v22;
      *(void *)(a1 + 264) = v23;
      int v24 = *(_DWORD *)(a1 + 260);
    }
    memmove(&v23[v18 + 1], &v23[v18], (v24 - v18));
    memcpy((void *)(*(void *)(a1 + 264) + v18), a5, v17);
    *(_DWORD *)(a1 + 260) += v17;
  }
  uint64_t result = *(int *)(a1 + 308);
  *(_DWORD *)(a1 + 308) = result + 1;
  return result;
}

uint64_t glpLLVMBuildShuffleVector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 260);
  int v11 = v10 + 1;
  int v12 = *(_DWORD *)(a1 + 256);
  if ((int)v10 + 1 <= v12)
  {
    size_t v15 = *(char **)(a1 + 264);
    int v16 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v12 <= 1) {
      int v12 = 1;
    }
    int v13 = 2 * v12;
    if (v13 <= v11) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = v13;
    }
    size_t v15 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v14, "Vector Storage (uint8_t, growth)");
    memcpy(v15, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v14;
    *(void *)(a1 + 264) = v15;
    int v16 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v15[v10 + 1], &v15[v10], (v16 - v10));
  *(unsigned char *)(*(void *)(a1 + 264) + v10) = 49;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMValue(a1, a2);
  glpSerializeLLVMValue(a1, a3);
  glpSerializeLLVMValue(a1, a4);
  if (*(_DWORD *)(a1 + 300))
  {
    size_t v17 = strlen(a5) + 1;
    uint64_t v18 = *(unsigned int *)(a1 + 260);
    int v19 = v17 + v18;
    int v20 = *(_DWORD *)(a1 + 256);
    if ((int)v17 + (int)v18 <= v20)
    {
      uint64_t v23 = *(char **)(a1 + 264);
      int v24 = *(_DWORD *)(a1 + 260);
    }
    else
    {
      if (v20 <= 1) {
        int v20 = 1;
      }
      int v21 = 2 * v20;
      if (v21 <= v19) {
        uint64_t v22 = v19;
      }
      else {
        uint64_t v22 = v21;
      }
      uint64_t v23 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v22, "Vector Storage (uint8_t, growth)");
      memcpy(v23, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
      (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
      *(_DWORD *)(a1 + 256) = v22;
      *(void *)(a1 + 264) = v23;
      int v24 = *(_DWORD *)(a1 + 260);
    }
    memmove(&v23[v18 + 1], &v23[v18], (v24 - v18));
    memcpy((void *)(*(void *)(a1 + 264) + v18), a5, v17);
    *(_DWORD *)(a1 + 260) += v17;
  }
  uint64_t result = *(int *)(a1 + 308);
  *(_DWORD *)(a1 + 308) = result + 1;
  return result;
}

uint64_t glpLLVMBuildFaceForward(uint64_t a1, uint64_t *a2, unsigned int *a3, int a4)
{
  v22[1] = *MEMORY[0x263EF8340];
  uint64_t v8 = *a2;
  uint64_t v9 = *a3;
  if (glpPrimitiveTypeGetCategory(*a3) == 2)
  {
    uint64_t Length = glpPrimitiveVectorGetLength(v9);
    uint64_t v11 = glpLLVMTypeOf(a1, v8);
    if ((int)Length < 2)
    {
      int v12 = 0;
    }
    else
    {
      uint64_t v11 = glpLLVMGetElementType(a1, v11);
      int v12 = 1;
    }
  }
  else
  {
    uint64_t v11 = glpLLVMTypeOf(a1, v8);
    int v12 = 0;
    uint64_t Length = 1;
  }
  int v13 = glpLLVMGetTypeString(&v20, *a3, a4);
  snprintf_l(v21, 0x200uLL, 0, "%s.%s", "air.dot", v13);
  v22[0] = 0x300000001;
  uint64_t v14 = glpLLVMCallFunction(a1, v21, v11, a2 + 1, 2, (unsigned int *)v22, 2);
  uint64_t v15 = glpLLVMConstFromTypeCache(a1, 35, v11);
  uint64_t v16 = glpLLVMBuildFCmp(a1, 4, v14, v15, "cmp");
  uint64_t v17 = glpLLVMConstRealCache(a1, v11, -1.0);
  if (v12) {
    uint64_t v17 = glpLLVMSplatElement(a1, v17, Length);
  }
  uint64_t v18 = glpLLVMBinaryOperation(a1, 58, v8, v17, "");
  return glpLLVMBuildSelect(a1, v16, v8, v18, "faceforward");
}

uint64_t glpLLVMBuildMix(uint64_t a1, uint64_t *a2, unsigned int *a3, uint64_t a4, int a5)
{
  v20[1] = *MEMORY[0x263EF8340];
  uint64_t v10 = *a2;
  uint64_t v9 = a2[1];
  uint64_t v11 = a2[2];
  uint64_t v12 = a3[2];
  if (glpPrimitiveTypeGetCategory(a3[2]) == 2) {
    uint64_t Length = glpPrimitiveVectorGetLength(v12);
  }
  else {
    uint64_t Length = 1;
  }
  int Category = glpPrimitiveTypeGetCategory(*a3);
  if (glpPrimitiveTypeGetScalarType(*a3) == 9)
  {
    if (Category == 1) {
      uint64_t v10 = glpLLVMSplatElement(a1, v10, Length);
    }
    return glpLLVMBuildSelect(a1, v10, v9, v11, "mix");
  }
  else
  {
    if ((int)Length >= 2 && Category == 1) {
      uint64_t v10 = glpLLVMSplatElement(a1, v10, Length);
    }
    v18[0] = v11;
    v18[1] = v9;
    void v18[2] = v10;
    uint64_t v16 = glpLLVMGetTypeString(&v17, a3[2], a5);
    snprintf_l(v19, 0x200uLL, 0, "%s.%s", "air.mix", v16);
    v20[0] = 0x300000001;
    return glpLLVMCallFunction(a1, v19, a4, v18, 3, (unsigned int *)v20, 2);
  }
}

uint64_t glpLLVMBuildSmoothStep(uint64_t a1, uint64_t *a2, unsigned int *a3, int a4, uint64_t a5)
{
  v27[1] = *MEMORY[0x263EF8340];
  uint64_t v9 = glpLLVMTypeOf(a1, a2[2]);
  if (glpPrimitiveTypeGetCategory(a3[2]) == 2)
  {
    uint64_t Length = glpPrimitiveVectorGetLength(a3[2]);
    uint64_t v9 = glpLLVMGetElementType(a1, v9);
    if (glpPrimitiveTypeGetCategory(*a3) != 2)
    {
      *a2 = glpLLVMSplatElement(a1, *a2, Length);
      a2[1] = glpLLVMSplatElement(a1, a2[1], Length);
    }
  }
  else
  {
    uint64_t Length = 1;
  }
  uint64_t v11 = glpLLVMBinaryOperation(a1, 56, a2[2], *a2, "");
  uint64_t v12 = glpLLVMBinaryOperation(a1, 56, a2[1], *a2, "");
  uint64_t v13 = glpLLVMConstRealCache(a1, v9, 0.0);
  uint64_t v14 = glpLLVMConstRealCache(a1, v9, 1.0);
  if ((int)Length >= 2)
  {
    uint64_t v13 = glpLLVMSplatConstantVector(a1, v13, Length);
    uint64_t v14 = glpLLVMSplatConstantVector(a1, v14, Length);
  }
  v25[0] = glpLLVMBinaryOperation(a1, 61, v11, v12, "");
  v25[1] = v13;
  v25[2] = v14;
  uint64_t v15 = glpLLVMGetTypeString(&v24, a3[2], a4);
  snprintf_l(v26, 0x200uLL, 0, "%s.%s", "air.clamp", v15);
  v27[0] = 0x300000001;
  uint64_t v16 = glpLLVMCallFunction(a1, v26, a5, v25, 3, (unsigned int *)v27, 2);
  uint64_t v17 = glpLLVMBinaryOperation(a1, 58, v16, v16, "");
  uint64_t v18 = glpLLVMConstRealCache(a1, v9, 2.0);
  uint64_t v19 = glpLLVMConstRealCache(a1, v9, 3.0);
  if ((int)Length >= 2)
  {
    uint64_t v18 = glpLLVMSplatConstantVector(a1, v18, Length);
    uint64_t v19 = glpLLVMSplatConstantVector(a1, v19, Length);
  }
  uint64_t v20 = glpLLVMBinaryOperation(a1, 58, v18, v16, "");
  uint64_t v21 = glpLLVMBinaryOperation(a1, 56, v19, v20, "");
  return glpLLVMBinaryOperation(a1, 58, v17, v21, "smoothStep");
}

uint64_t glpBuildTextureOperation(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int *a4, int *a5, int a6)
{
  v241 = a5;
  v242 = a4;
  v257[1] = *MEMORY[0x263EF8340];
  int Opcode = glpPPStreamOpNodeGetOpcode(a2);
  Returnint PrimitiveType = glpPPStreamOpNodeGetReturnPrimitiveType(a2);
  char SaFlags = glpASTNodeGetSaFlags(a2);
  unsigned int v231 = glpPrecisionIndexFromSAFlags(SaFlags);
  uint64_t v253 = 0;
  long long v252 = 0u;
  long long v250 = 0u;
  long long v251 = 0u;
  long long v248 = 0u;
  long long v249 = 0u;
  uint64_t v13 = a3[a6 - 2];
  if (Opcode == 130)
  {
    int v14 = 1;
  }
  else
  {
    *(void *)&long long v248 = a3[a6 - 1];
    int v14 = 2;
  }
  unsigned int v237 = v14;
  uint64_t v247 = v13;
  uint64_t v226 = *a3;
  int ChildCount = glpASTNodeGetChildCount(a2);
  uint64_t Child = glpASTNodeGetChild(a2, ChildCount - 1);
  uint64_t SaType = glpASTNodeGetSaType(Child);
  int PrimitiveType = glpPrimitiveTypeGetPrimitiveType(SaType);
  uint64_t PPTextarget = glpPrimitiveSamplerGetPPTextarget(PrimitiveType);
  if (PPTextarget > 0x10 || (BOOL v20 = 1, ((1 << PPTextarget) & 0x10101) == 0)) {
    BOOL v20 = PPTextarget == 17;
  }
  BOOL v21 = (PPTextarget - 5) < 8 && ((0xCFu >> (PPTextarget - 5)) & 1) != 0 || PPTextarget == 17;
  uint64_t v240 = PPTextarget;
  int v233 = a6;
  unsigned int v245 = v21;
  BOOL v25 = (Opcode == 99 || (Opcode & 0xFFFFFFFB) == 67 || Opcode == 69) && !v20;
  BOOL v235 = v25;
  uint64_t v26 = *v242;
  if (glpPrimitiveTypeGetCategory(*v242) == 2) {
    int Length = glpPrimitiveVectorGetLength(v26);
  }
  else {
    int Length = 1;
  }
  uint64_t v28 = (Length - 1);
  if (v235)
  {
    if (v28 > 7)
    {
      uint64_t v30 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), (int)v28, 1);
    }
    else
    {
      uint64_t v29 = a1 + 8 * v28;
      uint64_t v30 = *(void *)(v29 + 520);
      if (!v30)
      {
        uint64_t v31 = (uint64_t *)(v29 + 520);
        uint64_t v30 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), (Length - 1), 0);
        *uint64_t v31 = v30;
      }
    }
    uint64_t Element = glpLLVMBuildExtractElement(a1, v226, v30, "divisor");
    uint64_t v28 = (Length - 2);
  }
  else
  {
    uint64_t Element = 0;
  }
  uint64_t v223 = v28;
  int v32 = v233;
  unsigned int v33 = v240;
  if (v21)
  {
    uint64_t v34 = *(void *)(a1 + 528);
    if (!v34)
    {
      uint64_t v34 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), 1uLL, 0);
      *(void *)(a1 + 528) = v34;
    }
    unsigned int v35 = v237;
    *(&v247 + v237) = v34;
    unsigned int v237 = v35 + 1;
  }
  BOOL v228 = v33 > 0x11;
  Textureunsigned int Size = glpGetTextureSize(v33, (int *)&v245);
  if (v33 > 0x10 || (BOOL v36 = 1, ((1 << v33) & 0x10101) == 0)) {
    BOOL v36 = v33 == 17;
  }
  int v225 = !v36;
  int v221 = *(unsigned __int16 *)(a1 + 832);
  Hasuint64_t Offset = glpPPStreamOpNodeGetHasOffset(a2);
  BOOL v234 = 0;
  HIDWORD(v230) = 1;
  int v227 = HasOffset;
  if (Opcode > 97)
  {
    if (Opcode > 164)
    {
      if (Opcode == 165)
      {
        if (v227) {
          int v38 = v32 - 3;
        }
        else {
          int v38 = 0;
        }
        BOOL v234 = v245 == 0;
        uint64_t v230 = v245 | 0x100000000;
        int v224 = 1;
        goto LABEL_53;
      }
      int v224 = v234;
      int v39 = 1;
      int v38 = v234;
      LODWORD(v230) = v234;
      if (Opcode != 166) {
        goto LABEL_61;
      }
      int v225 = 0;
      int v38 = 0;
      uint64_t v230 = v245;
      BOOL v234 = v245 == 0;
    }
    else
    {
      if ((Opcode - 98) >= 2)
      {
        int v224 = v234;
        int v39 = 1;
        int v38 = v234;
        LODWORD(v230) = v234;
        if (Opcode != 130) {
          goto LABEL_61;
        }
        BOOL v234 = 0;
        int v225 = 0;
      }
      else
      {
        BOOL v234 = 0;
        int v39 = 0;
      }
      if (HasOffset) {
        int v38 = v32 - 3;
      }
      else {
        int v38 = 0;
      }
      uint64_t v230 = 0x100000000;
    }
    int v224 = 1;
  }
  else
  {
    if ((Opcode - 66) < 2)
    {
      BOOL v234 = 0;
      int v224 = 0;
      LODWORD(v230) = 0;
      int v38 = HasOffset != 0;
      goto LABEL_52;
    }
    if ((Opcode - 68) < 2 || (Opcode - 70) < 2)
    {
      BOOL v234 = 0;
      int v224 = 0;
      LODWORD(v230) = 0;
      int v38 = 2 * (HasOffset != 0);
LABEL_52:
      HIDWORD(v230) = 1;
LABEL_53:
      int v39 = 1;
      goto LABEL_61;
    }
    int v224 = v234;
    int v39 = 1;
    int v38 = v234;
    LODWORD(v230) = v234;
  }
LABEL_61:
  int v222 = v39;
  int v232 = v38;
  uint64_t v40 = *a3;
  v243 = a3;
  int v239 = Opcode;
  if (v235)
  {
    uint64_t v41 = *v242;
    int v42 = *v241;
    v257[0] = v40;
    unsigned int v43 = glpLLVMGetTypeString(&v246, v41, 3);
    uint64_t v44 = glpPrimitiveTypeToLLVMType((void *)a1, v41, 3);
    snprintf_l((char *)&v255, 0x200uLL, 0, "%s.%s", "air.projective_coordinates", v43);
    if (v42 && v42 != 3)
    {
      uint64_t v45 = *(void *)(a1 + 72);
      if (glpPrimitiveTypeGetCategory(v41) == 2) {
        uint64_t v46 = glpPrimitiveVectorGetLength(v41);
      }
      else {
        uint64_t v46 = 1;
      }
      uint64_t v44 = glpLLVMVectorType(a1, v45, v46);
      v257[0] = glpLLVMCastOperation(a1, 82, v40, v44, "coords");
    }
    v254[0] = 0x300000001;
    uint64_t v40 = glpLLVMCallFunction(a1, (const char *)&v255, v44, v257, 1, (unsigned int *)v254, 2);
    a3 = v243;
    int Opcode = v239;
  }
  uint64_t v47 = *v242;
  uint64_t Category = glpPrimitiveTypeGetCategory(*v242);
  unsigned int v49 = TextureSize;
  unsigned int v229 = ReturnPrimitiveType;
  if (TextureSize == 1)
  {
    if (Category == 2 && glpPrimitiveVectorGetLength(v47) >= 2)
    {
      uint64_t v50 = *(void *)(a1 + 520);
      if (!v50)
      {
        uint64_t v50 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), 0, 0);
        *(void *)(a1 + 520) = v50;
      }
      uint64_t v40 = glpLLVMBuildExtractElement(a1, v40, v50, "texCoord");
    }
  }
  else
  {
    if (Category == 2)
    {
      uint64_t Category = glpPrimitiveVectorGetLength(v47);
      unsigned int v49 = TextureSize;
    }
    uint64_t v51 = v49;
    MEMORY[0x270FA5388](Category);
    unint64_t v53 = (char *)&Element - v52;
    bzero((char *)&Element - v52, v54);
    unint64_t v55 = 0;
    do
    {
      unint64_t v56 = a1 + 8 * v55;
      uint64_t v57 = *(void *)(v56 + 520);
      if (!v57)
      {
        uint64_t v57 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), v55, 0);
        *(void *)(v56 + 520) = v57;
      }
      *(void *)&v53[8 * v55++] = v57;
    }
    while (v51 != v55);
    uint64_t v58 = glpLLVMConstVectorCache(a1, v53, TextureSize);
    uint64_t v59 = glpLLVMTypeOf(a1, v40);
    uint64_t v60 = glpLLVMConstFromTypeCache(a1, 37, v59);
    uint64_t v40 = glpLLVMBuildShuffleVector(a1, v40, v60, v58, "texCoord");
    Returnint PrimitiveType = v229;
    a3 = v243;
    int Opcode = v239;
  }
  int ScalarType = glpPrimitiveTypeGetScalarType(*v242);
  if (!*v241) {
    goto LABEL_99;
  }
  int v62 = v227;
  if (*v241 != 3)
  {
    if (ScalarType == 5)
    {
      uint64_t v63 = *(void *)(a1 + 40);
      if (TextureSize >= 2) {
        uint64_t v63 = glpLLVMVectorType(a1, *(void *)(a1 + 40), TextureSize);
      }
      uint64_t v64 = a1;
      char v65 = 76;
LABEL_98:
      uint64_t v40 = glpLLVMCastOperation(v64, v65, v40, v63, "texCoord");
LABEL_99:
      int v62 = v227;
      goto LABEL_100;
    }
    if (ScalarType == 1)
    {
      if (v235)
      {
        BOOL v219 = v227 != 0;
LABEL_105:
        unsigned int v68 = v237;
        goto LABEL_110;
      }
      uint64_t v63 = *(void *)(a1 + 72);
      if (TextureSize >= 2) {
        uint64_t v63 = glpLLVMVectorType(a1, *(void *)(a1 + 72), TextureSize);
      }
      uint64_t v64 = a1;
      char v65 = 82;
      goto LABEL_98;
    }
  }
LABEL_100:
  BOOL v219 = v62 != 0;
  if (Opcode != 130 || !v62) {
    goto LABEL_105;
  }
  uint64_t v66 = a3[v232];
  int v67 = v241[v232];
  if (v67 && v67 != 3)
  {
    uint64_t v69 = *(void *)(a1 + 40);
    unsigned int v68 = v237;
    if (TextureSize >= 2) {
      uint64_t v69 = glpLLVMVectorType(a1, *(void *)(a1 + 40), TextureSize);
    }
    uint64_t v66 = glpLLVMCastOperation(a1, 76, v66, v69, "texCoord");
  }
  else
  {
    unsigned int v68 = v237;
  }
  uint64_t v40 = glpLLVMBinaryOperation(a1, 53, v40, v66, "texCoord");
  BOOL v219 = 1;
LABEL_110:
  unsigned int v70 = 0x61FFu >> v33;
  *(&v247 + v68) = v40;
  unsigned int v236 = v245;
  if (!v245)
  {
    switch(Opcode)
    {
      case 130:
        unsigned int v74 = glpTextureNameFromSamplerType(PrimitiveType);
        unsigned int v73 = "air.read_";
        goto LABEL_126;
      case 165:
        unsigned int v73 = "air.gather_";
        break;
      case 166:
        unsigned int v73 = "air.gather_offsets_";
        break;
      default:
        unsigned int v73 = "air.sample_";
        int v72 = v239;
        goto LABEL_116;
    }
    unsigned int v74 = glpTextureNameFromSamplerType(PrimitiveType);
    unint64_t v217 = 0;
    uint64_t v218 = 0;
    int v75 = "";
    goto LABEL_131;
  }
  uint64_t v71 = "air.sample_compare_";
  if (Opcode == 166) {
    uint64_t v71 = "air.gather_compare_offsets_";
  }
  int v72 = Opcode;
  if (Opcode == 165) {
    unsigned int v73 = "air.gather_compare_";
  }
  else {
    unsigned int v73 = v71;
  }
LABEL_116:
  unsigned int v74 = glpTextureNameFromSamplerType(PrimitiveType);
  int v75 = "";
  char v76 = v72 - 70;
  if ((v72 - 70) > 0x3C)
  {
    unint64_t v217 = 0;
    uint64_t v218 = 0;
    goto LABEL_131;
  }
  if (((1 << v76) & 0x1000000000000003) != 0)
  {
LABEL_126:
    int v75 = "";
    uint64_t v218 = 1;
    unint64_t v217 = 1;
    goto LABEL_131;
  }
  uint64_t v218 = 0;
  unint64_t v217 = 0;
  if (((1 << v76) & 0x30000000) != 0) {
    int v75 = "_grad";
  }
LABEL_131:
  unsigned int v77 = v68 + 1;
  char v78 = v228 | v70;
  v246 = 0;
  if (v236) {
    int v79 = 1;
  }
  else {
    int v79 = ReturnPrimitiveType;
  }
  if (glpPrimitiveTypeGetScalarType(ReturnPrimitiveType) == 1) {
    int v80 = v231;
  }
  else {
    int v80 = 3;
  }
  unsigned int v220 = v80;
  int v81 = glpLLVMGetTypeString(&v246, v79, v80);
  if (glpPrimitiveTypeGetScalarType(ReturnPrimitiveType) == 1)
  {
    int v82 = "";
    v246 = "";
  }
  else
  {
    int v82 = v246;
  }
  snprintf_l((char *)v254, 0x200uLL, 0, "%s%s%s%s.%s", v73, v74, v75, v82, v81);
  unsigned int v83 = v243;
  int v84 = v240;
  int v85 = v232;
  if ((v78 & 1) == 0)
  {
    uint64_t v86 = a1 + 8 * TextureSize;
    uint64_t v87 = *(void *)(v86 + 520);
    if (!v87)
    {
      unsigned int v88 = (uint64_t *)(v86 + 520);
      uint64_t v87 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), TextureSize, 0);
      *unsigned int v88 = v87;
    }
    uint64_t v89 = glpLLVMBuildExtractElement(a1, v226, v87, "");
    int v90 = v242;
    int v91 = glpPrimitiveTypeGetScalarType(*v242);
    unsigned int v92 = v237;
    if (v91 == 1)
    {
      uint64_t v93 = glpLLVMTypeOf(a1, v89);
      uint64_t v94 = glpLLVMConstRealCache(a1, v93, 0.5);
      uint64_t v244 = glpLLVMBinaryOperation(a1, 54, v89, v94, "");
      snprintf_l((char *)&v255, 0x200uLL, 0, "%s.%s", "air.floor", "f32");
      v257[0] = 0x300000001;
      uint64_t v95 = glpLLVMCallFunction(a1, (const char *)&v255, v93, &v244, 1, (unsigned int *)v257, 2);
      uint64_t v96 = glpLLVMBuildConversion(a1, v95, *(void *)(a1 + 40), 1, 0, 36, 0);
    }
    else
    {
      if (glpPrimitiveTypeGetScalarType(*v90) != 5)
      {
LABEL_148:
        *(&v247 + (v77 - 12 * ((357913942 * (unint64_t)v77) >> 32))) = v89;
        unsigned int v77 = v92 + 2;
        goto LABEL_149;
      }
      uint64_t v97 = glpLLVMTypeOf(a1, v89);
      uint64_t v98 = glpLLVMConstFromTypeCache(a1, 35, v97);
      uint64_t v99 = glpLLVMBuildICmp(a1, 7, v89, v98, "");
      int v85 = v232;
      uint64_t v96 = glpLLVMBuildSelect(a1, v99, v89, v98, "");
    }
    uint64_t v89 = v96;
    goto LABEL_148;
  }
LABEL_149:
  if (v236)
  {
    if (v84 == 17 || v230)
    {
      uint64_t v103 = v83[1];
      int v104 = v241[1];
      if (v104 && v104 != 3)
      {
        uint64_t v105 = v242[1];
        uint64_t v106 = *(void *)(a1 + 72);
        if (glpPrimitiveTypeGetCategory(v242[1]) == 2)
        {
          uint64_t v107 = glpPrimitiveVectorGetLength(v105);
          uint64_t v106 = glpLLVMVectorType(a1, v106, v107);
        }
        uint64_t v103 = glpLLVMCastOperation(a1, 88, v103, v106, "f32");
        unsigned int v83 = v243;
        int v85 = v232;
      }
    }
    else
    {
      if (v223 > 7)
      {
        uint64_t v101 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), (int)v223, 1);
      }
      else
      {
        uint64_t v100 = a1 + 8 * v223;
        uint64_t v101 = *(void *)(v100 + 520);
        if (!v101)
        {
          unsigned int v102 = (uint64_t *)(v100 + 520);
          uint64_t v101 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), v223, 0);
          *unsigned int v102 = v101;
        }
      }
      uint64_t v103 = glpLLVMBuildExtractElement(a1, v226, v101, "refZ");
      if (v235) {
        uint64_t v103 = glpLLVMBinaryOperation(a1, 61, v103, Element, "refZ");
      }
    }
    *(&v247 + (v77 - 12 * ((357913942 * (unint64_t)v77) >> 32))) = v103;
    ++v77;
  }
  if ((v222 & 1) == 0)
  {
    uint64_t v108 = v83[1];
    int v109 = v241[1];
    if (v109 && v109 != 3)
    {
      uint64_t v110 = v242[1];
      uint64_t v111 = *(void *)(a1 + 72);
      if (glpPrimitiveTypeGetCategory(v242[1]) == 2)
      {
        uint64_t v112 = glpPrimitiveVectorGetLength(v110);
        uint64_t v111 = glpLLVMVectorType(a1, v111, v112);
      }
      unsigned int v83 = v243;
      uint64_t v108 = glpLLVMCastOperation(a1, 88, v108, v111, "f32");
      int v85 = v232;
    }
    *(&v247 + (v77 - 12 * ((357913942 * (unint64_t)v77) >> 32))) = v108;
    uint64_t v113 = v83[2];
    int v114 = v241[2];
    if (v114 && v114 != 3)
    {
      uint64_t v115 = v242[2];
      uint64_t v116 = *(void *)(a1 + 72);
      if (glpPrimitiveTypeGetCategory(v242[2]) == 2)
      {
        uint64_t v117 = glpPrimitiveVectorGetLength(v115);
        uint64_t v116 = glpLLVMVectorType(a1, v116, v117);
      }
      uint64_t v113 = glpLLVMCastOperation(a1, 88, v113, v116, "f32");
      unsigned int v83 = v243;
      int v85 = v232;
    }
    *(&v247 + (v77 + 1 - 12 * ((357913942 * (unint64_t)(v77 + 1)) >> 32))) = v113;
    *(&v247 + (v77 + 2 - 12 * ((357913942 * (unint64_t)(v77 + 2)) >> 32))) = glpLLVMConstFromTypeCache(a1, 35, *(void *)(a1 + 72));
    v77 += 3;
    Returnint PrimitiveType = v229;
  }
  if (v225)
  {
    *(&v247 + (v77 - 12 * ((357913942 * (unint64_t)v77) >> 32))) = glpLLVMConstIntCache(a1, *(void *)(a1 + 64), v85 > 0, 0);
    if (v85 < 1)
    {
      uint64_t v119 = *(void *)(a1 + 40);
      if (TextureSize >= 2) {
        uint64_t v119 = glpLLVMVectorType(a1, *(void *)(a1 + 40), TextureSize);
      }
      uint64_t v118 = glpLLVMConstFromTypeCache(a1, 35, v119);
    }
    else
    {
      uint64_t v118 = v83[v85];
    }
    *(&v247 + (v77 + 1 - 12 * ((357913942 * (unint64_t)(v77 + 1)) >> 32))) = v118;
    v77 += 2;
  }
  if ((v230 & 0x100000000) == 0)
  {
    if (v236) {
      uint64_t v120 = 2;
    }
    else {
      uint64_t v120 = 1;
    }
    uint64_t v121 = glpLLVMVectorType(a1, *(void *)(a1 + 40), 2);
    uint64_t v122 = glpLLVMArrayType(a1, v121, 4);
    uint64_t v123 = glpLLVMConstFromTypeCache(a1, 37, v122);
    unint64_t v124 = 0;
    uint64_t v125 = 0;
    uint64_t v126 = (uint64_t *)(a1 + 528);
    do
    {
      uint64_t v127 = *(v126 - 1);
      if (!v127)
      {
        uint64_t v127 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), v124, 0);
        *(v126 - 1) = v127;
      }
      uint64_t v255 = v127;
      uint64_t v128 = *v126;
      if (!*v126)
      {
        uint64_t v128 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), v124 + 1, 0);
        *uint64_t v126 = v128;
      }
      uint64_t v256 = v128;
      uint64_t v129 = glpLLVMConstVectorCache(a1, &v255, 2);
      uint64_t v130 = glpLLVMBuildShuffleVector(a1, v243[v120], v243[(v120 + 1)], v129, "");
      uint64_t inserted = glpLLVMBuildInsertValue(a1, v123, v130, v125, "");
      uint64_t v123 = inserted;
      ++v125;
      v124 += 2;
      v126 += 2;
    }
    while (v125 != 4);
    *(&v247 + (v77 - 12 * ((357913942 * (unint64_t)v77) >> 32))) = inserted;
    ++v77;
    Returnint PrimitiveType = v229;
    unsigned int v83 = v243;
  }
  int v132 = v233;
  if ((v224 & 1) == 0)
  {
    unsigned int v133 = v228 | (0x1EFDBu >> v240);
    BOOL v134 = (v239 & 0xFFFFFFFE) == 68;
    *(&v247 + (v77 - 12 * ((357913942 * (unint64_t)v77) >> 32))) = glpLLVMConstIntCache(a1, *(void *)(a1 + 64), v217, 0);
    if ((v218 | v134 & v133) == 1)
    {
      uint64_t v135 = v83[1];
      int v136 = v241[1];
      if (!v136 || v136 == 3) {
        goto LABEL_203;
      }
      uint64_t v137 = v242[1];
      uint64_t v138 = *(void *)(a1 + 72);
      if (glpPrimitiveTypeGetCategory(v242[1]) == 2)
      {
        uint64_t v139 = glpPrimitiveVectorGetLength(v137);
        uint64_t v138 = glpLLVMVectorType(a1, v138, v139);
      }
      int v132 = v233;
      uint64_t v140 = glpLLVMCastOperation(a1, 88, v135, v138, "f32");
    }
    else
    {
      uint64_t v140 = glpLLVMConstFromTypeCache(a1, 35, *(void *)(a1 + 72));
    }
    uint64_t v135 = v140;
LABEL_203:
    *(&v247 + (v77 + 1 - 12 * ((357913942 * (unint64_t)(v77 + 1)) >> 32))) = v135;
    *(&v247 + (v77 + 2 - 12 * ((357913942 * (unint64_t)(v77 + 2)) >> 32))) = glpLLVMConstFromTypeCache(a1, 35, *(void *)(a1 + 72));
    v77 += 3;
  }
  if (!v234)
  {
    int v144 = v240;
    goto LABEL_223;
  }
  if (v239 == 165)
  {
    BOOL v141 = v132 == 5 && v219;
    if (v227) {
      BOOL v142 = 0;
    }
    else {
      BOOL v142 = v132 == 4;
    }
    uint64_t v143 = 1;
    if (!v142)
    {
      int v144 = v240;
      if (v141) {
        goto LABEL_221;
      }
LABEL_218:
      uint64_t v145 = *(void *)(a1 + 520);
      if (!v145)
      {
        uint64_t v145 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), 0, 0);
        *(void *)(a1 + 520) = v145;
      }
      goto LABEL_222;
    }
    int v144 = v240;
  }
  else
  {
    int v144 = v240;
    if (v132 != 6) {
      goto LABEL_218;
    }
    uint64_t v143 = 3;
  }
LABEL_221:
  uint64_t v145 = v83[v143];
LABEL_222:
  *(&v247 + (v77 - 12 * ((357913942 * (unint64_t)v77) >> 32))) = v145;
  ++v77;
LABEL_223:
  if (v239 == 130)
  {
    if (v144 == 13 || v144 == 2)
    {
      uint64_t v146 = *(void *)(a1 + 520);
      uint64_t v148 = v220;
      char v147 = v221;
      if (!v146)
      {
        uint64_t v146 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), 0, 0);
        *(void *)(a1 + 520) = v146;
      }
    }
    else
    {
      uint64_t v146 = v83[1];
      int v149 = v241[1];
      if (v149)
      {
        uint64_t v148 = v220;
        char v147 = v221;
        if (v149 != 3) {
          uint64_t v146 = glpLLVMCastOperation(a1, 76, v146, *(void *)(a1 + 40), "lod");
        }
      }
      else
      {
        uint64_t v148 = v220;
        char v147 = v221;
      }
    }
    *(&v247 + (v77 - 12 * ((357913942 * (unint64_t)v77) >> 32))) = v146;
    ++v77;
  }
  else
  {
    uint64_t v148 = v220;
    char v147 = v221;
  }
  uint64_t v150 = *(void *)(a1 + 520);
  if (!v150)
  {
    uint64_t v150 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), 0, 0);
    *(void *)(a1 + 520) = v150;
  }
  *(&v247 + (v77 - 12 * ((357913942 * (unint64_t)v77) >> 32))) = v150;
  uint64_t v151 = v77 + 1;
  unsigned int v152 = v245;
  int v153 = v230;
  if (v230) {
    BOOL v154 = 1;
  }
  else {
    BOOL v154 = v245 == 0;
  }
  if (v154) {
    uint64_t v155 = ReturnPrimitiveType;
  }
  else {
    uint64_t v155 = 1;
  }
  uint64_t v156 = glpPrimitiveTypeToLLVMType((void *)a1, v155, v148);
  if ((v147 & 1) == 0)
  {
    uint64_t v255 = 0x400000001;
    uint64_t v157 = glpLLVMCallFunction(a1, (const char *)v254, v156, &v247, v151, (unsigned int *)&v255, 2);
    uint64_t v158 = v231;
    if (!v152) {
      goto LABEL_317;
    }
    goto LABEL_312;
  }
  uint64_t v159 = *(void *)(a1 + 56);
  uint64_t v255 = v156;
  uint64_t v256 = v159;
  uint64_t v160 = glpLLVMStructTypeInContext(a1, &v255, 2);
  uint64_t v255 = 0x400000001;
  uint64_t v161 = glpLLVMCallFunction(a1, (const char *)v254, v160, &v247, v151, (unsigned int *)&v255, 2);
  uint64_t v162 = *(unsigned int *)(a1 + 260);
  int v163 = v162 + 1;
  int v164 = *(_DWORD *)(a1 + 256);
  uint64_t v158 = v231;
  if ((int)v162 + 1 <= v164)
  {
    v167 = *(char **)(a1 + 264);
    int v168 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v164 <= 1) {
      int v164 = 1;
    }
    int v165 = 2 * v164;
    if (v165 <= v163) {
      uint64_t v166 = v163;
    }
    else {
      uint64_t v166 = v165;
    }
    v167 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v166, "Vector Storage (uint8_t, growth)");
    memcpy(v167, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v166;
    *(void *)(a1 + 264) = v167;
    int v168 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v167[v162 + 1], &v167[v162], (v168 - v162));
  *(unsigned char *)(*(void *)(a1 + 264) + v162) = 52;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMValue(a1, v161);
  unsigned int v169 = (char)glp_serialized_integer32_control(0);
  uint64_t v170 = *(unsigned int *)(a1 + 260);
  int v171 = v170 + 1;
  int v172 = *(_DWORD *)(a1 + 256);
  if ((int)v170 + 1 <= v172)
  {
    v175 = *(char **)(a1 + 264);
    int v176 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v172 <= 1) {
      int v172 = 1;
    }
    int v173 = 2 * v172;
    if (v173 <= v171) {
      uint64_t v174 = v171;
    }
    else {
      uint64_t v174 = v173;
    }
    v175 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v174, "Vector Storage (uint8_t, growth)");
    memcpy(v175, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v174;
    *(void *)(a1 + 264) = v175;
    int v176 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v175[v170 + 1], &v175[v170], (v176 - v170));
  *(unsigned char *)(*(void *)(a1 + 264) + v170) = v169;
  int v177 = *(_DWORD *)(a1 + 260);
  unsigned int v178 = v177 + 1;
  *(_DWORD *)(a1 + 260) = v177 + 1;
  if ((v169 & 0x80000000) != 0)
  {
    switch((v169 >> 1) & 7)
    {
      case 0u:
        unsigned int v179 = v177 + 2;
        int v180 = *(_DWORD *)(a1 + 256);
        if (v179 <= v180)
        {
          v183 = *(char **)(a1 + 264);
          unsigned int v184 = v178;
        }
        else
        {
          if (v180 <= 1) {
            int v180 = 1;
          }
          int v181 = 2 * v180;
          if (v181 <= (int)v179) {
            uint64_t v182 = v179;
          }
          else {
            uint64_t v182 = v181;
          }
          v183 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v182, "Vector Storage (uint8_t, growth)");
          memcpy(v183, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v182;
          *(void *)(a1 + 264) = v183;
          unsigned int v184 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v183[v178 + 1], &v183[v178], v184 - v178);
        *(unsigned char *)(*(void *)(a1 + 264) + v178) = 0;
        int v203 = 1;
        goto LABEL_300;
      case 1u:
        unsigned int v185 = v177 + 3;
        int v186 = *(_DWORD *)(a1 + 256);
        if (v185 <= v186)
        {
          v189 = *(char **)(a1 + 264);
          unsigned int v190 = v178;
        }
        else
        {
          if (v186 <= 1) {
            int v186 = 1;
          }
          int v187 = 2 * v186;
          if (v187 <= (int)v185) {
            uint64_t v188 = v185;
          }
          else {
            uint64_t v188 = v187;
          }
          v189 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v188, "Vector Storage (uint8_t, growth)");
          memcpy(v189, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v188;
          *(void *)(a1 + 264) = v189;
          unsigned int v190 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v189[v178 + 1], &v189[v178], v190 - v178);
        *(_WORD *)(*(void *)(a1 + 264) + v178) = 0;
        int v203 = 2;
        goto LABEL_300;
      case 2u:
        unsigned int v191 = v177 + 4;
        int v192 = *(_DWORD *)(a1 + 256);
        if (v191 <= v192)
        {
          v195 = *(char **)(a1 + 264);
          unsigned int v196 = v178;
        }
        else
        {
          if (v192 <= 1) {
            int v192 = 1;
          }
          int v193 = 2 * v192;
          if (v193 <= (int)v191) {
            uint64_t v194 = v191;
          }
          else {
            uint64_t v194 = v193;
          }
          v195 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v194, "Vector Storage (uint8_t, growth)");
          memcpy(v195, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v194;
          *(void *)(a1 + 264) = v195;
          unsigned int v196 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v195[v178 + 1], &v195[v178], v196 - v178);
        uint64_t v204 = *(void *)(a1 + 264) + v178;
        *(unsigned char *)(v204 + 2) = 0;
        *(_WORD *)uint64_t v204 = 0;
        int v203 = 3;
        goto LABEL_300;
      case 3u:
        unsigned int v197 = v177 + 5;
        int v198 = *(_DWORD *)(a1 + 256);
        if (v197 <= v198)
        {
          v201 = *(char **)(a1 + 264);
          unsigned int v202 = v178;
        }
        else
        {
          if (v198 <= 1) {
            int v198 = 1;
          }
          int v199 = 2 * v198;
          if (v199 <= (int)v197) {
            uint64_t v200 = v197;
          }
          else {
            uint64_t v200 = v199;
          }
          v201 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v200, "Vector Storage (uint8_t, growth)");
          memcpy(v201, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v200;
          *(void *)(a1 + 264) = v201;
          unsigned int v202 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v201[v178 + 1], &v201[v178], v202 - v178);
        *(_DWORD *)(*(void *)(a1 + 264) + v178) = 0;
        int v203 = 4;
LABEL_300:
        unsigned int v178 = *(_DWORD *)(a1 + 260) + v203;
        *(_DWORD *)(a1 + 260) = v178;
        break;
      default:
        break;
    }
  }
  if (*(_DWORD *)(a1 + 300))
  {
    int v205 = v178 + 7;
    int v206 = *(_DWORD *)(a1 + 256);
    if (v178 + 7 <= v206)
    {
      v209 = *(char **)(a1 + 264);
      unsigned int v210 = v178;
    }
    else
    {
      if (v206 <= 1) {
        int v206 = 1;
      }
      int v207 = 2 * v206;
      if (v207 <= v205) {
        uint64_t v208 = v205;
      }
      else {
        uint64_t v208 = v207;
      }
      v209 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v208, "Vector Storage (uint8_t, growth)");
      memcpy(v209, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
      (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
      *(_DWORD *)(a1 + 256) = v208;
      *(void *)(a1 + 264) = v209;
      unsigned int v210 = *(_DWORD *)(a1 + 260);
    }
    memmove(&v209[v178 + 1], &v209[v178], v210 - v178);
    strcpy((char *)(*(void *)(a1 + 264) + v178), "texVal");
    *(_DWORD *)(a1 + 260) += 7;
  }
  uint64_t v157 = *(int *)(a1 + 308);
  *(_DWORD *)(a1 + 308) = v157 + 1;
  if (v245)
  {
LABEL_312:
    if (!v153 && ReturnPrimitiveType != 1)
    {
      uint64_t v211 = glpPrimitiveTypeToLLVMType((void *)a1, ReturnPrimitiveType, v148);
      uint64_t v212 = glpLLVMConstFromTypeCache(a1, 37, v211);
      uint64_t v213 = *(void *)(a1 + 520);
      if (!v213)
      {
        uint64_t v213 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), 0, 0);
        *(void *)(a1 + 520) = v213;
      }
      uint64_t v157 = glpLLVMBuildInsertElement(a1, v212, v157, v213, "shadow");
    }
  }
LABEL_317:
  if (!glpLLVMTypesEqual((_DWORD *)a1, ReturnPrimitiveType, v148, ReturnPrimitiveType, v158))
  {
    uint64_t v214 = glpPrimitiveTypeToLLVMType((void *)a1, ReturnPrimitiveType, v158);
    return glpLLVMBuildConversion(a1, v157, v214, ReturnPrimitiveType, v148, ReturnPrimitiveType, v158);
  }
  return v157;
}

uint64_t glpBuildTextureSizeOperation(void *a1, uint64_t a2, uint64_t *a3, int a4)
{
  v47[1] = *MEMORY[0x263EF8340];
  Returnint PrimitiveType = glpPPStreamOpNodeGetReturnPrimitiveType(a2);
  char SaFlags = glpASTNodeGetSaFlags(a2);
  uint64_t v10 = glpPrecisionIndexFromSAFlags(SaFlags);
  int ChildCount = glpASTNodeGetChildCount(a2);
  uint64_t Child = glpASTNodeGetChild(a2, ChildCount - 1);
  uint64_t SaType = glpASTNodeGetSaType(Child);
  int PrimitiveType = glpPrimitiveTypeGetPrimitiveType(SaType);
  unsigned int PPTextarget = glpPrimitiveSamplerGetPPTextarget(PrimitiveType);
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  if (a4 == 1)
  {
    uint64_t v45 = *a3;
    uint64_t v16 = a1[65];
    if (!v16)
    {
      uint64_t v16 = glpLLVMConstIntCache((uint64_t)a1, a1[5], 0, 0);
      a1[65] = v16;
    }
  }
  else
  {
    uint64_t v16 = *a3;
    uint64_t v45 = a3[1];
  }
  uint64_t v46 = v16;
  if (PPTextarget - 13 < 3) {
    uint64_t v17 = 1;
  }
  else {
    uint64_t v17 = 2;
  }
  uint64_t v18 = glpPrimitiveTypeToLLVMType(a1, ReturnPrimitiveType, v10);
  Textureunsigned int Size = glpGetTextureSize(PPTextarget, &v43);
  if (((1 << PPTextarget) & 0x30101) != 0) {
    unsigned int v20 = TextureSize - 1;
  }
  else {
    unsigned int v20 = TextureSize;
  }
  if (PPTextarget <= 0x11) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = TextureSize;
  }
  uint64_t v22 = glpTextureNameFromSamplerType(PrimitiveType);
  snprintf_l(v44, 0x200uLL, 0, "%s%s", "air.get_width_", v22);
  int v42 = PrimitiveType;
  if (PPTextarget <= 0x11 && ((1 << PPTextarget) & 0x39E00) != 0)
  {
    BOOL v23 = v21 > 1;
    int v24 = 1;
  }
  else
  {
    if (v21 <= 1)
    {
      v47[0] = 0x400000001;
      return glpLLVMCallFunction((uint64_t)a1, v44, v18, &v45, v17, (unsigned int *)v47, 2);
    }
    int v24 = 0;
    BOOL v23 = 1;
  }
  uint64_t v25 = glpLLVMGetElementType((uint64_t)a1, v18);
  v47[0] = 0x400000001;
  uint64_t v41 = v25;
  uint64_t v26 = v17;
  uint64_t v27 = glpLLVMCallFunction((uint64_t)a1, v44, v25, &v45, v17, (unsigned int *)v47, 2);
  uint64_t v40 = (uint64_t)&v40;
  uint64_t v28 = (v21 + v24);
  MEMORY[0x270FA5388](v27);
  uint64_t v30 = (uint64_t *)((char *)&v40 - v29);
  bzero((char *)&v40 - v29, v31);
  *uint64_t v30 = v27;
  uint64_t inserted = glpLLVMConstFromTypeCache((uint64_t)a1, 37, v18);
  if (v23)
  {
    unsigned int v33 = glpTextureNameFromSamplerType(v42);
    snprintf_l(v44, 0x200uLL, 0, "%s%s", "air.get_height_", v33);
    v47[0] = 0x400000001;
    v30[1] = glpLLVMCallFunction((uint64_t)a1, v44, v41, &v45, v26, (unsigned int *)v47, 2);
  }
  if (v24)
  {
    uint64_t v34 = glpTextureNameFromSamplerType(v42);
    snprintf_l(v44, 0x200uLL, 0, "%s%s", "air.get_array_size_", v34);
    v47[0] = 0x400000001;
  }
  else
  {
    if (v21 < 3) {
      goto LABEL_24;
    }
    unsigned int v35 = glpTextureNameFromSamplerType(v42);
    snprintf_l(v44, 0x200uLL, 0, "%s%s", "air.get_depth_", v35);
    v47[0] = 0x400000001;
    uint64_t v21 = 2;
  }
  v30[v21] = glpLLVMCallFunction((uint64_t)a1, v44, v41, &v45, v26, (unsigned int *)v47, 2);
LABEL_24:
  if (v28)
  {
    for (unint64_t i = 0; i != v28; ++i)
    {
      unint64_t v37 = &a1[i];
      uint64_t v38 = v37[65];
      if (!v38)
      {
        uint64_t v38 = glpLLVMConstIntCache((uint64_t)a1, a1[5], i, 0);
        v37[65] = v38;
      }
      uint64_t inserted = glpLLVMBuildInsertElement((uint64_t)a1, inserted, v30[i], v38, "imgDim");
    }
  }
  return inserted;
}

uint64_t glpLLVMBuildRefract(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5)
{
  v43[1] = *MEMORY[0x263EF8340];
  uint64_t v9 = a2[1];
  uint64_t v38 = *a2;
  uint64_t v10 = a2[2];
  uint64_t v11 = *(unsigned int *)(a3 + 4);
  uint64_t v37 = v9;
  if (glpPrimitiveTypeGetCategory(*(_DWORD *)(a3 + 4)) == 2)
  {
    int Length = glpPrimitiveVectorGetLength(v11);
    uint64_t v13 = glpLLVMTypeOf(a1, v9);
    unsigned int v36 = Length;
    if (Length >= 2) {
      uint64_t v13 = glpLLVMGetElementType(a1, v13);
    }
  }
  else
  {
    uint64_t v13 = glpLLVMTypeOf(a1, v9);
    unsigned int v36 = 1;
  }
  int v14 = glpLLVMGetTypeString(&v41, *(_DWORD *)a3, a4);
  snprintf_l(v42, 0x200uLL, 0, "%s.%s", "air.dot", v14);
  v43[0] = 0x300000001;
  uint64_t v15 = glpLLVMCallFunction(a1, v42, v13, a2, 2, (unsigned int *)v43, 2);
  uint64_t v16 = glpLLVMBinaryOperation(a1, 58, v15, v15, "");
  uint64_t v17 = glpLLVMConstRealCache(a1, v13, 1.0);
  uint64_t v18 = glpLLVMBinaryOperation(a1, 58, v10, v10, "");
  uint64_t v19 = glpLLVMBinaryOperation(a1, 56, v17, v16, "");
  uint64_t v20 = glpLLVMBinaryOperation(a1, 58, v18, v19, "");
  uint64_t v40 = glpLLVMBinaryOperation(a1, 56, v17, v20, "");
  uint64_t v21 = glpLLVMConstFromTypeCache(a1, 35, v13);
  uint64_t v22 = glpLLVMBuildFCmp(a1, 4, v40, v21, "cmp");
  if (a4) {
    BOOL v23 = a4 == 3;
  }
  else {
    BOOL v23 = 1;
  }
  if (v23) {
    int v24 = "air.fast_sqrt";
  }
  else {
    int v24 = "air.sqrt";
  }
  uint64_t v25 = glpLLVMGetTypeString(&v41, *(_DWORD *)(a3 + 8), a4);
  snprintf_l(v42, 0x200uLL, 0, "%s.%s", v24, v25);
  v43[0] = 0x300000001;
  uint64_t v26 = glpLLVMCallFunction(a1, v42, v13, &v40, 1, (unsigned int *)v43, 2);
  uint64_t v27 = glpLLVMBinaryOperation(a1, 58, v10, v15, "");
  uint64_t v28 = glpLLVMBinaryOperation(a1, 54, v27, v26, "");
  uint64_t v29 = glpLLVMSplatElement(a1, v28, v36);
  uint64_t v30 = glpLLVMSplatElement(a1, v10, v36);
  uint64_t v31 = glpLLVMBinaryOperation(a1, 58, v30, v38, "");
  uint64_t v32 = glpLLVMBinaryOperation(a1, 58, v29, v37, "");
  uint64_t v33 = glpLLVMBinaryOperation(a1, 56, v31, v32, "");
  uint64_t v34 = glpLLVMConstFromTypeCache(a1, 35, a5);
  return glpLLVMBuildSelect(a1, v22, v34, v33, "refract");
}

uint64_t glpLLVMBuildDistance(uint64_t a1, uint64_t *a2, int *a3, int a4, uint64_t a5)
{
  uint64_t v10 = glpLLVMBinaryOperation(a1, 56, *a2, a2[1], "");
  return glpLLVMBuildLength(a1, &v10, a3, a4, a5);
}

uint64_t glpLLVMf32Extend(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!a4 || a4 == 3) {
    return a2;
  }
  uint64_t v8 = *(void *)(a1 + 72);
  if (glpPrimitiveTypeGetCategory(a3) == 2)
  {
    uint64_t Length = glpPrimitiveVectorGetLength(a3);
    uint64_t v8 = glpLLVMVectorType(a1, v8, Length);
  }

  return glpLLVMCastOperation(a1, 88, a2, v8, "f32");
}

uint64_t glpLLVMGetInfinityProxy(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 260);
  int v5 = v4 + 1;
  int v6 = *(_DWORD *)(a1 + 256);
  if ((int)v4 + 1 <= v6)
  {
    uint64_t v9 = *(char **)(a1 + 264);
    int v10 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v6 <= 1) {
      int v6 = 1;
    }
    int v7 = 2 * v6;
    if (v7 <= v5) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v7;
    }
    uint64_t v9 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v8, "Vector Storage (uint8_t, growth)");
    memcpy(v9, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v8;
    *(void *)(a1 + 264) = v9;
    int v10 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v9[v4 + 1], &v9[v4], (v10 - v4));
  *(unsigned char *)(*(void *)(a1 + 264) + v4) = 109;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMType(a1, a2);
  uint64_t result = *(int *)(a1 + 308);
  *(_DWORD *)(a1 + 308) = result + 1;
  return result;
}

uint64_t glpLLVMBuildLoad(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 260);
  int v7 = v6 + 1;
  int v8 = *(_DWORD *)(a1 + 256);
  if ((int)v6 + 1 <= v8)
  {
    uint64_t v11 = *(char **)(a1 + 264);
    int v12 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v8 <= 1) {
      int v8 = 1;
    }
    int v9 = 2 * v8;
    if (v9 <= v7) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = v9;
    }
    uint64_t v11 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v10, "Vector Storage (uint8_t, growth)");
    memcpy(v11, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v10;
    *(void *)(a1 + 264) = v11;
    int v12 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v11[v6 + 1], &v11[v6], (v12 - v6));
  *(unsigned char *)(*(void *)(a1 + 264) + v6) = 45;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMValue(a1, a2);
  if (*(_DWORD *)(a1 + 300))
  {
    size_t v13 = strlen(a3) + 1;
    uint64_t v14 = *(unsigned int *)(a1 + 260);
    int v15 = v13 + v14;
    int v16 = *(_DWORD *)(a1 + 256);
    if ((int)v13 + (int)v14 <= v16)
    {
      uint64_t v19 = *(char **)(a1 + 264);
      int v20 = *(_DWORD *)(a1 + 260);
    }
    else
    {
      if (v16 <= 1) {
        int v16 = 1;
      }
      int v17 = 2 * v16;
      if (v17 <= v15) {
        uint64_t v18 = v15;
      }
      else {
        uint64_t v18 = v17;
      }
      uint64_t v19 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v18, "Vector Storage (uint8_t, growth)");
      memcpy(v19, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
      (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
      *(_DWORD *)(a1 + 256) = v18;
      *(void *)(a1 + 264) = v19;
      int v20 = *(_DWORD *)(a1 + 260);
    }
    memmove(&v19[v14 + 1], &v19[v14], (v20 - v14));
    memcpy((void *)(*(void *)(a1 + 264) + v14), a3, v13);
    *(_DWORD *)(a1 + 260) += v13;
  }
  uint64_t result = *(int *)(a1 + 308);
  *(_DWORD *)(a1 + 308) = result + 1;
  return result;
}

uint64_t glpLLVMBuildGEP(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, const char *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 260);
  int v11 = v10 + 1;
  int v12 = *(_DWORD *)(a1 + 256);
  if ((int)v10 + 1 <= v12)
  {
    int v15 = *(char **)(a1 + 264);
    int v16 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v12 <= 1) {
      int v12 = 1;
    }
    int v13 = 2 * v12;
    if (v13 <= v11) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = v13;
    }
    int v15 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v14, "Vector Storage (uint8_t, growth)");
    memcpy(v15, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v14;
    *(void *)(a1 + 264) = v15;
    int v16 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v15[v10 + 1], &v15[v10], (v16 - v10));
  *(unsigned char *)(*(void *)(a1 + 264) + v10) = 50;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMValue(a1, a2);
  glpSerializeArrayOfLLVMValues(a1, a3, a4);
  if (*(_DWORD *)(a1 + 300))
  {
    size_t v17 = strlen(a5) + 1;
    uint64_t v18 = *(unsigned int *)(a1 + 260);
    int v19 = v17 + v18;
    int v20 = *(_DWORD *)(a1 + 256);
    if ((int)v17 + (int)v18 <= v20)
    {
      BOOL v23 = *(char **)(a1 + 264);
      int v24 = *(_DWORD *)(a1 + 260);
    }
    else
    {
      if (v20 <= 1) {
        int v20 = 1;
      }
      int v21 = 2 * v20;
      if (v21 <= v19) {
        uint64_t v22 = v19;
      }
      else {
        uint64_t v22 = v21;
      }
      BOOL v23 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v22, "Vector Storage (uint8_t, growth)");
      memcpy(v23, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
      (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
      *(_DWORD *)(a1 + 256) = v22;
      *(void *)(a1 + 264) = v23;
      int v24 = *(_DWORD *)(a1 + 260);
    }
    memmove(&v23[v18 + 1], &v23[v18], (v24 - v18));
    memcpy((void *)(*(void *)(a1 + 264) + v18), a5, v17);
    *(_DWORD *)(a1 + 260) += v17;
  }
  uint64_t result = *(int *)(a1 + 308);
  *(_DWORD *)(a1 + 308) = result + 1;
  return result;
}

uint64_t glpLLVMGetParam(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 260);
  int v7 = v6 + 1;
  int v8 = *(_DWORD *)(a1 + 256);
  if ((int)v6 + 1 <= v8)
  {
    int v11 = *(char **)(a1 + 264);
    int v12 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v8 <= 1) {
      int v8 = 1;
    }
    int v9 = 2 * v8;
    if (v9 <= v7) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = v9;
    }
    int v11 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v10, "Vector Storage (uint8_t, growth)");
    memcpy(v11, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v10;
    *(void *)(a1 + 264) = v11;
    int v12 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v11[v6 + 1], &v11[v6], (v12 - v6));
  *(unsigned char *)(*(void *)(a1 + 264) + v6) = 17;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMValue(a1, a2);
  unsigned int v13 = (char)glp_serialized_integer32_control(a3);
  uint64_t v14 = *(unsigned int *)(a1 + 260);
  int v15 = v14 + 1;
  int v16 = *(_DWORD *)(a1 + 256);
  if ((int)v14 + 1 <= v16)
  {
    int v19 = *(char **)(a1 + 264);
    int v20 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v16 <= 1) {
      int v16 = 1;
    }
    int v17 = 2 * v16;
    if (v17 <= v15) {
      uint64_t v18 = v15;
    }
    else {
      uint64_t v18 = v17;
    }
    int v19 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v18, "Vector Storage (uint8_t, growth)");
    memcpy(v19, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v18;
    *(void *)(a1 + 264) = v19;
    int v20 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v19[v14 + 1], &v19[v14], (v20 - v14));
  *(unsigned char *)(*(void *)(a1 + 264) + v14) = v13;
  int v21 = *(_DWORD *)(a1 + 260);
  unsigned int v22 = v21 + 1;
  *(_DWORD *)(a1 + 260) = v21 + 1;
  if ((v13 & 0x80000000) != 0)
  {
    switch((v13 >> 1) & 7)
    {
      case 0u:
        unsigned int v23 = v21 + 2;
        int v24 = *(_DWORD *)(a1 + 256);
        if (v23 <= v24)
        {
          uint64_t v27 = *(char **)(a1 + 264);
          unsigned int v28 = v22;
        }
        else
        {
          if (v24 <= 1) {
            int v24 = 1;
          }
          int v25 = 2 * v24;
          if (v25 <= (int)v23) {
            uint64_t v26 = v23;
          }
          else {
            uint64_t v26 = v25;
          }
          uint64_t v27 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v26, "Vector Storage (uint8_t, growth)");
          memcpy(v27, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v26;
          *(void *)(a1 + 264) = v27;
          unsigned int v28 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v27[v22 + 1], &v27[v22], v28 - v22);
        *(unsigned char *)(*(void *)(a1 + 264) + v22) = a3;
        int v47 = 1;
        goto LABEL_55;
      case 1u:
        unsigned int v41 = v21 + 3;
        int v42 = *(_DWORD *)(a1 + 256);
        if (v41 <= v42)
        {
          uint64_t v45 = *(char **)(a1 + 264);
          unsigned int v46 = v22;
        }
        else
        {
          if (v42 <= 1) {
            int v42 = 1;
          }
          int v43 = 2 * v42;
          if (v43 <= (int)v41) {
            uint64_t v44 = v41;
          }
          else {
            uint64_t v44 = v43;
          }
          uint64_t v45 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v44, "Vector Storage (uint8_t, growth)");
          memcpy(v45, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v44;
          *(void *)(a1 + 264) = v45;
          unsigned int v46 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v45[v22 + 1], &v45[v22], v46 - v22);
        *(_WORD *)(*(void *)(a1 + 264) + v22) = a3;
        int v47 = 2;
        goto LABEL_55;
      case 2u:
        unsigned int v29 = v21 + 4;
        int v30 = *(_DWORD *)(a1 + 256);
        if (v29 <= v30)
        {
          uint64_t v33 = *(char **)(a1 + 264);
          unsigned int v34 = v22;
        }
        else
        {
          if (v30 <= 1) {
            int v30 = 1;
          }
          int v31 = 2 * v30;
          if (v31 <= (int)v29) {
            uint64_t v32 = v29;
          }
          else {
            uint64_t v32 = v31;
          }
          uint64_t v33 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v32, "Vector Storage (uint8_t, growth)");
          memcpy(v33, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v32;
          *(void *)(a1 + 264) = v33;
          unsigned int v34 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v33[v22 + 1], &v33[v22], v34 - v22);
        uint64_t v48 = *(void *)(a1 + 264) + v22;
        *(unsigned char *)(v48 + 2) = BYTE2(a3);
        *(_WORD *)uint64_t v48 = a3;
        int v47 = 3;
        goto LABEL_55;
      case 3u:
        unsigned int v35 = v21 + 5;
        int v36 = *(_DWORD *)(a1 + 256);
        if (v35 <= v36)
        {
          int v39 = *(char **)(a1 + 264);
          unsigned int v40 = v22;
        }
        else
        {
          if (v36 <= 1) {
            int v36 = 1;
          }
          int v37 = 2 * v36;
          if (v37 <= (int)v35) {
            uint64_t v38 = v35;
          }
          else {
            uint64_t v38 = v37;
          }
          int v39 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v38, "Vector Storage (uint8_t, growth)");
          memcpy(v39, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v38;
          *(void *)(a1 + 264) = v39;
          unsigned int v40 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v39[v22 + 1], &v39[v22], v40 - v22);
        *(_DWORD *)(*(void *)(a1 + 264) + v22) = a3;
        int v47 = 4;
LABEL_55:
        *(_DWORD *)(a1 + 260) += v47;
        break;
      default:
        break;
    }
  }
  uint64_t result = *(int *)(a1 + 308);
  *(_DWORD *)(a1 + 308) = result + 1;
  return result;
}

uint64_t glpLLVMSplatConstantVector(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v13[1] = *MEMORY[0x263EF8340];
  if (a3 != 1)
  {
    MEMORY[0x270FA5388](a1);
    int v8 = (char *)v13 - v7;
    if (v6 >= 0x200) {
      size_t v9 = 512;
    }
    else {
      size_t v9 = v6;
    }
    bzero((char *)v13 - v7, v9);
    if ((int)a3 >= 1)
    {
      uint64_t v10 = a3;
      int v11 = v8;
      do
      {
        *v11++ = a2;
        --v10;
      }
      while (v10);
    }
    return glpLLVMConstVectorCache(a1, v8, a3);
  }
  return a2;
}

uint64_t glpBuildGetLODOperation(void *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v6 = a2;
  v38[1] = *MEMORY[0x263EF8340];
  Returnint PrimitiveType = glpPPStreamOpNodeGetReturnPrimitiveType(a2);
  char SaFlags = glpASTNodeGetSaFlags(v6);
  uint64_t v10 = glpPrecisionIndexFromSAFlags(SaFlags);
  int v11 = 1;
  uint64_t Child = glpASTNodeGetChild(v6, 1u);
  uint64_t SaType = glpASTNodeGetSaType(Child);
  LODWORD(v6) = glpPrimitiveTypeGetPrimitiveType(SaType);
  uint64_t v14 = glpTextureNameFromSamplerType(v6);
  snprintf_l(v37, 0x40uLL, 0, "air.compute_lod_%s", v14);
  int PPTextarget = glpPrimitiveSamplerGetPPTextarget(v6);
  Textureunsigned int Size = glpGetTextureSize(PPTextarget, &v33);
  uint64_t v17 = *(void *)a3;
  uint64_t v18 = *a4;
  uint64_t Category = glpPrimitiveTypeGetCategory(v18);
  if (Category == 2)
  {
    uint64_t Category = glpPrimitiveVectorGetLength(v18);
    int v11 = Category;
  }
  if (TextureSize != v11)
  {
    MEMORY[0x270FA5388](Category);
    int v21 = &v32[-v20];
    bzero(&v32[-v20], v22);
    unint64_t v23 = 0;
    do
    {
      int v24 = &a1[v23];
      uint64_t v25 = v24[65];
      if (!v25)
      {
        uint64_t v25 = glpLLVMConstIntCache((uint64_t)a1, a1[5], v23, 0);
        v24[65] = v25;
      }
      *(void *)&v21[8 * v23++] = v25;
    }
    while (TextureSize != v23);
    uint64_t v26 = glpLLVMConstVectorCache((uint64_t)a1, v21, TextureSize);
    uint64_t v27 = *(void *)a3;
    uint64_t v28 = glpLLVMTypeOf((uint64_t)a1, *(void *)a3);
    uint64_t v29 = glpLLVMConstFromTypeCache((uint64_t)a1, 37, v28);
    uint64_t v17 = glpLLVMBuildShuffleVector((uint64_t)a1, v27, v29, v26, "texCoord");
  }
  long long v34 = *(_OWORD *)(a3 + 8);
  uint64_t v35 = v17;
  uint64_t v36 = glpLLVMConstIntCache((uint64_t)a1, a1[8], 0, 0);
  uint64_t v30 = glpPrimitiveTypeToLLVMType(a1, ReturnPrimitiveType, v10);
  v38[0] = 0x400000001;
  return glpLLVMCallFunction((uint64_t)a1, v37, v30, (uint64_t *)&v34, 4, (unsigned int *)v38, 2);
}

uint64_t glpLLVMGetVariablePointer(uint64_t a1, unint64_t a2)
{
  void v13[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a2 + 144);
  uint64_t v3 = *(void *)v2;
  if (*(void *)v2 && (*(unsigned char *)(a2 + 51) & 0x86) != 0)
  {
    uint64_t v3 = glpPointerHashGet(*(void *)(a1 + 344), a2);
    if (!v3)
    {
      if (*(_WORD *)(a1 + 324))
      {
        uint64_t v6 = glpLLVMGetElementType(a1, *(void *)v2);
        uint64_t v7 = glpBuildAlloca(a1, v6);
      }
      else
      {
        int v9 = glpPointerHashGet(*(void *)(a1 + 336), a2);
        uint64_t v7 = glpLLVMGetParam(a1, *(void *)(a1 + 160), (v9 - 1));
      }
      uint64_t v3 = v7;
      glpPointerHashPut(*(void *)(a1 + 344), a2, v7, v8);
    }
    if ((*(unsigned char *)(v2 + 32) & 4) != 0)
    {
      uint64_t v10 = glpLLVMBuildLoad(a1, *(void *)(a1 + 584), "vrl");
      uint64_t v11 = *(void *)(a1 + 520);
      if (!v11)
      {
        uint64_t v11 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), 0, 0);
        *(void *)(a1 + 520) = v11;
      }
      v13[0] = v11;
      v13[1] = v10;
      return glpLLVMBuildGEP(a1, v3, v13, 2, "ptr");
    }
  }
  return v3;
}

uint64_t glpBuildInterpolateAt(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6)
{
  v25[1] = *MEMORY[0x263EF8340];
  uint64_t v11 = *(void *)(a3 + 144);
  unsigned int v12 = *(_DWORD *)(v11 + 24);
  unsigned int v13 = *(_DWORD *)(v11 + 28);
  uint64_t v14 = glpPrimitiveTypeToLLVMType(a1, v12, v13);
  uint64_t v22 = glpLLVMBuildLoad((uint64_t)a1, a2, "srcPointerInterpolant");
  uint64_t v15 = a4 & 0x46000800000;
  if ((a4 & 0x46000800000uLL) > 0x3FFFFFFFFFLL)
  {
    if ((a4 & 0x46000800000uLL) > 0x3FFFFFFFFFFLL)
    {
      if (v15 == 0x40000000000)
      {
        int v16 = "air.interpolate_sample_perspective";
      }
      else
      {
        if (v15 != 0x42000000000) {
          goto LABEL_24;
        }
        int v16 = "air.interpolate_sample_no_perspective";
      }
    }
    else if (v15 == 0x4000000000)
    {
      int v16 = "air.interpolate_centroid_perspective";
    }
    else
    {
      if (v15 != 0x6000000000) {
        goto LABEL_24;
      }
      int v16 = "air.interpolate_centroid_no_perspective";
    }
  }
  else if ((a4 & 0x46000800000uLL) > 0x1FFFFFFFFFLL)
  {
    if (v15 == 0x2000000000)
    {
      int v16 = "air.interpolate_center_no_perspective";
    }
    else
    {
      if (v15 != 0x2000800000) {
        goto LABEL_24;
      }
      int v16 = "air.interpolate_offset_no_perspective";
    }
  }
  else
  {
    if (v15)
    {
      if (v15 == 0x800000)
      {
        int v16 = "air.interpolate_offset_perspective";
        goto LABEL_20;
      }
LABEL_24:
      abort();
    }
    int v16 = "air.interpolate_center_perspective";
  }
LABEL_20:
  uint64_t v23 = 0;
  snprintf_l(v21, 0x200uLL, 0, "%s%s", v16, a5);
  if (a6)
  {
    uint64_t v23 = a6;
    uint64_t v17 = 2;
  }
  else
  {
    uint64_t v17 = 1;
  }
  uint64_t v18 = glpLLVMGetTypeString(&v20, v12, v13);
  snprintf_l(v24, 0x200uLL, 0, "%s.%s", v21, v18);
  v25[0] = 0x300000001;
  return glpLLVMCallFunction((uint64_t)a1, v24, v14, &v22, v17, (unsigned int *)v25, 2);
}

uint64_t glpCGSwizzle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t inserted, uint64_t a5, unsigned int a6)
{
  uint64_t v88 = *MEMORY[0x263EF8340];
  if (!a6) {
    return inserted;
  }
  uint64_t Category = glpPrimitiveTypeGetCategory(a5);
  int v13 = Category;
  uint64_t v14 = a6 & 7;
  if (!a2)
  {
    MEMORY[0x270FA5388](Category);
    uint64_t v38 = (uint64_t *)((char *)&v83 - v37);
    bzero((char *)&v83 - v37, v39);
    if ((a6 & 7) == 0) {
      goto LABEL_36;
    }
    uint64_t v87 = &v83;
    uint64_t v40 = inserted;
    uint64_t v41 = 0;
    char v42 = 3;
    do
    {
      unint64_t v43 = (a6 >> v42) & 3;
      uint64_t v44 = a1 + 8 * v43;
      uint64_t v45 = *(void *)(v44 + 520);
      if (!v45)
      {
        unsigned int v46 = (uint64_t *)(v44 + 520);
        uint64_t v45 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), v43, 0);
        *unsigned int v46 = v45;
      }
      v38[v41] = v45;
      v42 += 2;
      ++v41;
    }
    while (v14 != v41);
    uint64_t inserted = v40;
    if (v14 == 1)
    {
      if (v13 != 2) {
        return inserted;
      }
      return glpLLVMBuildExtractElement(a1, v40, *v38, "swz");
    }
    else
    {
LABEL_36:
      if (v13 != 2)
      {
        uint64_t v53 = glpLLVMTypeOf(a1, inserted);
        uint64_t v54 = glpLLVMVectorType(a1, v53, a6 & 7);
        uint64_t v55 = glpLLVMConstFromTypeCache(a1, 37, v54);
        uint64_t inserted = glpLLVMBuildInsertElement(a1, v55, inserted, *v38, "");
      }
      uint64_t v56 = glpLLVMConstVectorCache(a1, v38, a6 & 7);
      return glpLLVMBuildShuffleVector(a1, inserted, inserted, v56, "swz");
    }
  }
  int v15 = glpPrimitiveTypeGetCategory(a3);
  if (v13 == 2)
  {
    uint64_t Length = glpPrimitiveVectorGetLength(a3);
    uint64_t v86 = &v83;
    uint64_t v17 = Length;
    MEMORY[0x270FA5388](Length);
    if (v18 >= 0x200) {
      size_t v20 = 512;
    }
    else {
      size_t v20 = v18;
    }
    uint64_t v87 = (uint64_t *)((char *)&v83 - v19);
    bzero((char *)&v83 - v19, v20);
    MEMORY[0x270FA5388](v21);
    uint64_t v23 = (unsigned int *)((char *)&v83 - v22);
    if (Length == glpPrimitiveVectorGetLength(a5))
    {
      if (Length)
      {
        uint64_t v24 = 0;
        do
        {
          v23[v24] = v24;
          ++v24;
        }
        while (Length != v24);
      }
      if ((a6 & 7) != 0)
      {
        int v25 = 0;
        unsigned int v26 = Length;
        do
        {
          v23[(a6 >> (v25 + 3)) & 3] = v26;
          v25 += 2;
          ++v26;
        }
        while (2 * v14 != v25);
      }
      if (Length)
      {
        uint64_t v27 = v87;
        do
        {
          unsigned int v29 = *v23++;
          unint64_t v28 = v29;
          if (v29 > 7)
          {
            uint64_t v31 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), (int)v28, 1);
          }
          else
          {
            unint64_t v30 = a1 + 8 * v28;
            uint64_t v31 = *(void *)(v30 + 520);
            if (!v31)
            {
              uint64_t v32 = (uint64_t *)(v30 + 520);
              uint64_t v31 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), v28, 0);
              uint64_t *v32 = v31;
            }
          }
          *v27++ = v31;
          --v17;
        }
        while (v17);
      }
      uint64_t v33 = glpLLVMConstVectorCache(a1, v87, Length);
      long long v34 = "swz";
      uint64_t v35 = a1;
      uint64_t v36 = a2;
    }
    else
    {
      uint64_t v85 = inserted;
      if (Length)
      {
        uint64_t v57 = Length;
        uint64_t v58 = v23;
        do
        {
          *v58++ = v14;
          --v57;
        }
        while (v57);
      }
      uint64_t v84 = a2;
      if ((a6 & 7) != 0)
      {
        unsigned int v59 = 0;
        int v60 = 3;
        do
        {
          v23[(a6 >> v60) & 3] = v59++;
          v60 += 2;
        }
        while (v14 != v59);
      }
      if (Length)
      {
        uint64_t v61 = Length;
        int v62 = v87;
        uint64_t v63 = v23;
        do
        {
          unsigned int v65 = *v63++;
          unint64_t v64 = v65;
          if (v65 > 7)
          {
            uint64_t v67 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), (int)v64, 1);
          }
          else
          {
            unint64_t v66 = a1 + 8 * v64;
            uint64_t v67 = *(void *)(v66 + 520);
            if (!v67)
            {
              unsigned int v68 = (uint64_t *)(v66 + 520);
              uint64_t v67 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), v64, 0);
              *unsigned int v68 = v67;
            }
          }
          *v62++ = v67;
          --v61;
        }
        while (v61);
      }
      uint64_t v69 = v87;
      uint64_t v70 = glpLLVMConstVectorCache(a1, v87, Length);
      uint64_t v71 = v85;
      uint64_t v72 = glpLLVMTypeOf(a1, v85);
      uint64_t v73 = glpLLVMConstFromTypeCache(a1, 37, v72);
      uint64_t inserted = glpLLVMBuildShuffleVector(a1, v71, v73, v70, "shuffle0");
      if (Length)
      {
        uint64_t v74 = 0;
        do
        {
          v23[v74] = v74;
          ++v74;
        }
        while (Length != v74);
      }
      uint64_t v75 = v84;
      if ((a6 & 7) != 0)
      {
        int v76 = 0;
        do
        {
          v23[(a6 >> (v76 + 3)) & 3] = ((a6 >> (v76 + 3)) & 3) + Length;
          v76 += 2;
        }
        while (2 * v14 != v76);
      }
      if (Length)
      {
        unsigned int v77 = v69;
        do
        {
          unsigned int v79 = *v23++;
          unint64_t v78 = v79;
          if (v79 > 7)
          {
            uint64_t v81 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), (int)v78, 1);
          }
          else
          {
            unint64_t v80 = a1 + 8 * v78;
            uint64_t v81 = *(void *)(v80 + 520);
            if (!v81)
            {
              int v82 = (uint64_t *)(v80 + 520);
              uint64_t v81 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), v78, 0);
              *int v82 = v81;
            }
          }
          *v77++ = v81;
          --v17;
        }
        while (v17);
      }
      uint64_t v33 = glpLLVMConstVectorCache(a1, v69, Length);
      long long v34 = "merge";
      uint64_t v35 = a1;
      uint64_t v36 = v75;
    }
    return glpLLVMBuildShuffleVector(v35, v36, inserted, v33, v34);
  }
  if (v15 != 2) {
    return inserted;
  }
  unint64_t v48 = (a6 >> 3) & 3;
  uint64_t v49 = a1 + 8 * v48;
  uint64_t v50 = *(void *)(v49 + 520);
  if (!v50)
  {
    uint64_t v51 = (uint64_t *)(v49 + 520);
    uint64_t v50 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), v48, 0);
    *uint64_t v51 = v50;
  }

  return glpLLVMBuildInsertElement(a1, a2, inserted, v50, "swz");
}

uint64_t glpLLVMGetInsertBlock(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 260);
  int v3 = v2 + 1;
  int v4 = *(_DWORD *)(a1 + 256);
  if ((int)v2 + 1 <= v4)
  {
    uint64_t v7 = *(char **)(a1 + 264);
    int v8 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v4 <= 1) {
      int v4 = 1;
    }
    int v5 = 2 * v4;
    if (v5 <= v3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = v5;
    }
    uint64_t v7 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v6, "Vector Storage (uint8_t, growth)");
    memcpy(v7, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v6;
    *(void *)(a1 + 264) = v7;
    int v8 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v7[v2 + 1], &v7[v2], (v8 - v2));
  *(unsigned char *)(*(void *)(a1 + 264) + v2) = 21;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  uint64_t result = *(int *)(a1 + 312);
  *(_DWORD *)(a1 + 312) = result + 1;
  return result;
}

void *glpLLVMPositionBuilderAtEnd(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 260);
  int v5 = v4 + 1;
  int v6 = *(_DWORD *)(a1 + 256);
  if ((int)v4 + 1 <= v6)
  {
    int v9 = *(char **)(a1 + 264);
    int v10 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v6 <= 1) {
      int v6 = 1;
    }
    int v7 = 2 * v6;
    if (v7 <= v5) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v7;
    }
    int v9 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v8, "Vector Storage (uint8_t, growth)");
    memcpy(v9, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v8;
    *(void *)(a1 + 264) = v9;
    int v10 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v9[v4 + 1], &v9[v4], (v10 - v4));
  *(unsigned char *)(*(void *)(a1 + 264) + v4) = 23;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);

  return glpSerializeLLVMBlock(a1, a2);
}

void *glpSerializeLLVMBlock(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  unsigned int v4 = (char)glp_serialized_integer32_control(a2);
  uint64_t v5 = *(unsigned int *)(a1 + 260);
  int v6 = v5 + 1;
  int v7 = *(_DWORD *)(a1 + 256);
  if ((int)v5 + 1 <= v7)
  {
    int v10 = *(char **)(a1 + 264);
    int v11 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v7 <= 1) {
      int v7 = 1;
    }
    int v8 = 2 * v7;
    if (v8 <= v6) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = v8;
    }
    int v10 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v9, "Vector Storage (uint8_t, growth)");
    memcpy(v10, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v9;
    *(void *)(a1 + 264) = v10;
    int v11 = *(_DWORD *)(a1 + 260);
  }
  uint64_t result = memmove(&v10[v5 + 1], &v10[v5], (v11 - v5));
  *(unsigned char *)(*(void *)(a1 + 264) + v5) = v4;
  int v13 = *(_DWORD *)(a1 + 260);
  unsigned int v14 = v13 + 1;
  *(_DWORD *)(a1 + 260) = v13 + 1;
  if ((v4 & 0x80000000) != 0)
  {
    switch((v4 >> 1) & 7)
    {
      case 0u:
        unsigned int v15 = v13 + 2;
        int v16 = *(_DWORD *)(a1 + 256);
        if (v15 <= v16)
        {
          uint64_t v19 = *(char **)(a1 + 264);
          unsigned int v20 = v14;
        }
        else
        {
          if (v16 <= 1) {
            int v16 = 1;
          }
          int v17 = 2 * v16;
          if (v17 <= (int)v15) {
            uint64_t v18 = v15;
          }
          else {
            uint64_t v18 = v17;
          }
          uint64_t v19 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v18, "Vector Storage (uint8_t, growth)");
          memcpy(v19, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v18;
          *(void *)(a1 + 264) = v19;
          unsigned int v20 = *(_DWORD *)(a1 + 260);
        }
        uint64_t result = memmove(&v19[v14 + 1], &v19[v14], v20 - v14);
        *(unsigned char *)(*(void *)(a1 + 264) + v14) = v2;
        int v39 = 1;
        goto LABEL_47;
      case 1u:
        unsigned int v33 = v13 + 3;
        int v34 = *(_DWORD *)(a1 + 256);
        if (v33 <= v34)
        {
          uint64_t v37 = *(char **)(a1 + 264);
          unsigned int v38 = v14;
        }
        else
        {
          if (v34 <= 1) {
            int v34 = 1;
          }
          int v35 = 2 * v34;
          if (v35 <= (int)v33) {
            uint64_t v36 = v33;
          }
          else {
            uint64_t v36 = v35;
          }
          uint64_t v37 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v36, "Vector Storage (uint8_t, growth)");
          memcpy(v37, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v36;
          *(void *)(a1 + 264) = v37;
          unsigned int v38 = *(_DWORD *)(a1 + 260);
        }
        uint64_t result = memmove(&v37[v14 + 1], &v37[v14], v38 - v14);
        *(_WORD *)(*(void *)(a1 + 264) + v14) = v2;
        int v39 = 2;
        goto LABEL_47;
      case 2u:
        unsigned int v21 = v13 + 4;
        int v22 = *(_DWORD *)(a1 + 256);
        if (v21 <= v22)
        {
          int v25 = *(char **)(a1 + 264);
          unsigned int v26 = v14;
        }
        else
        {
          if (v22 <= 1) {
            int v22 = 1;
          }
          int v23 = 2 * v22;
          if (v23 <= (int)v21) {
            uint64_t v24 = v21;
          }
          else {
            uint64_t v24 = v23;
          }
          int v25 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v24, "Vector Storage (uint8_t, growth)");
          memcpy(v25, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v24;
          *(void *)(a1 + 264) = v25;
          unsigned int v26 = *(_DWORD *)(a1 + 260);
        }
        uint64_t result = memmove(&v25[v14 + 1], &v25[v14], v26 - v14);
        uint64_t v40 = *(void *)(a1 + 264) + v14;
        *(unsigned char *)(v40 + 2) = BYTE2(v2);
        *(_WORD *)uint64_t v40 = v2;
        int v39 = 3;
        goto LABEL_47;
      case 3u:
        unsigned int v27 = v13 + 5;
        int v28 = *(_DWORD *)(a1 + 256);
        if (v27 <= v28)
        {
          uint64_t v31 = *(char **)(a1 + 264);
          unsigned int v32 = v14;
        }
        else
        {
          if (v28 <= 1) {
            int v28 = 1;
          }
          int v29 = 2 * v28;
          if (v29 <= (int)v27) {
            uint64_t v30 = v27;
          }
          else {
            uint64_t v30 = v29;
          }
          uint64_t v31 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v30, "Vector Storage (uint8_t, growth)");
          memcpy(v31, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v30;
          *(void *)(a1 + 264) = v31;
          unsigned int v32 = *(_DWORD *)(a1 + 260);
        }
        uint64_t result = memmove(&v31[v14 + 1], &v31[v14], v32 - v14);
        *(_DWORD *)(*(void *)(a1 + 264) + v14) = v2;
        int v39 = 4;
LABEL_47:
        *(_DWORD *)(a1 + 260) += v39;
        break;
      default:
        return result;
    }
  }
  return result;
}

BOOL glpGetConstantOffset(uint64_t a1, _DWORD *a2)
{
  BOOL result = glpIsConstantNode(a1);
  if (result)
  {
    *a2 = *(_DWORD *)glpConstantNodeGetValue(a1);
    return 1;
  }
  return result;
}

uint64_t glpBuildUniformElementPtr(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  v15[1] = *MEMORY[0x263EF8340];
  uint64_t Gep = glpFindGep((uint64_t)a1, a2, a5, a6);
  if (!Gep)
  {
    v15[0] = glpLLVMConstIntCache((uint64_t)a1, a1[5], a6, 1);
    uint64_t inserted = glpLLVMGetInsertBlock((uint64_t)a1);
    glpLLVMPositionBuilderAtEnd((uint64_t)a1, a1[23]);
    if (a4) {
      a3 = glpLLVMCastOperation((uint64_t)a1, 86, a3, a4, "ptr");
    }
    uint64_t Gep = glpLLVMBuildGEP((uint64_t)a1, a3, v15, 1, "ptr");
    glpLLVMPositionBuilderAtEnd((uint64_t)a1, inserted);
    glpAddGep(a1, a2, a5, a6, Gep);
  }
  return Gep;
}

uint64_t glpMakeSwizzle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v9 = 0;
  unsigned int v12 = &a9;
  LODWORD(result) = 4;
  do
  {
    int v11 = v12;
    v12 += 8;
    uint64_t result = (*(_DWORD *)v11 << (v9 + 3)) | result & ~(24 << v9);
    v9 += 2;
  }
  while (v9 != 8);
  return result;
}

uint64_t glpFindGep(uint64_t a1, unint64_t a2, int a3, int a4)
{
  uint64_t result = glpPointerHashGet(*(void *)(a1 + 352), a2);
  if (result)
  {
    uint64_t v7 = *(unsigned int *)(result + 4);
    if (v7)
    {
      for (uint64_t i = *(void *)(result + 8) + 8; *(_DWORD *)(i - 4) != a4 || *(_DWORD *)(i - 8) != a3; i += 16)
      {
        if (!--v7) {
          return 0;
        }
      }
      return *(void *)i;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *glpAddGep(uint64_t *a1, unint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t v10 = glpPointerHashGet(a1[44], a2);
  if (!v10)
  {
    uint64_t v10 = glpLinkerPoolAlloc(a1[16]);
    uint64_t v11 = a1[19];
    *(void *)uint64_t v10 = 4;
    *(void *)(v10 + 8) = (*(uint64_t (**)(void, uint64_t, const char *))(v11 + 8))(*(void *)v11, 64, "Vector Storage (GLPGepEntry)");
    glpPointerHashPut(a1[44], a2, v10, v12);
  }
  int v13 = *(_DWORD *)v10;
  uint64_t v14 = *(unsigned int *)(v10 + 4);
  if ((v14 + 1) <= *(_DWORD *)v10)
  {
    uint64_t v18 = *(char **)(v10 + 8);
    int v19 = *(_DWORD *)(v10 + 4);
  }
  else
  {
    if (v13 <= 1) {
      int v13 = 1;
    }
    int v15 = 2 * v13;
    if (v15 <= (int)v14 + 1) {
      unsigned int v16 = v14 + 1;
    }
    else {
      unsigned int v16 = v15;
    }
    int v17 = (void *)a1[19];
    uint64_t v18 = (char *)((uint64_t (*)(void, uint64_t, const char *))v17[1])(*v17, 16 * v16, "Vector Storage (GLPGepEntry, growth)");
    memcpy(v18, *(const void **)(v10 + 8), 16 * *(unsigned int *)(v10 + 4));
    ((void (*)(void, void))v17[3])(*v17, *(void *)(v10 + 8));
    *(_DWORD *)uint64_t v10 = v16;
    *(void *)(v10 + 8) = v18;
    int v19 = *(_DWORD *)(v10 + 4);
  }
  uint64_t result = memmove(&v18[16 * v14 + 16], &v18[16 * v14], 16 * (v19 - v14));
  uint64_t v21 = *(void *)(v10 + 8) + 16 * v14;
  *(_DWORD *)uint64_t v21 = a3;
  *(_DWORD *)(v21 + 4) = a4;
  *(void *)(v21 + 8) = a5;
  ++*(_DWORD *)(v10 + 4);
  return result;
}

uint64_t glpLLVMCGInsertBasicBlock(uint64_t a1, const char *a2)
{
  uint64_t v3 = glpLLVMAppendBasicBlock(a1, *(void *)(a1 + 160), a2);
  uint64_t v4 = *(void *)(a1 + 432);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 260);
    int v6 = v5 + 1;
    int v7 = *(_DWORD *)(a1 + 256);
    if ((int)v5 + 1 <= v7)
    {
      uint64_t v10 = *(char **)(a1 + 264);
      int v11 = *(_DWORD *)(a1 + 260);
    }
    else
    {
      if (v7 <= 1) {
        int v7 = 1;
      }
      int v8 = 2 * v7;
      if (v8 <= v6) {
        uint64_t v9 = v6;
      }
      else {
        uint64_t v9 = v8;
      }
      uint64_t v10 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v9, "Vector Storage (uint8_t, growth)");
      memcpy(v10, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
      (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
      *(_DWORD *)(a1 + 256) = v9;
      *(void *)(a1 + 264) = v10;
      int v11 = *(_DWORD *)(a1 + 260);
    }
    memmove(&v10[v5 + 1], &v10[v5], (v11 - v5));
    *(unsigned char *)(*(void *)(a1 + 264) + v5) = 22;
    ++*(_DWORD *)(a1 + 260);
    ++*(_DWORD *)(a1 + 296);
    glpSerializeLLVMBlock(a1, v3);
    glpSerializeLLVMBlock(a1, v4);
  }
  return v3;
}

uint64_t glpLLVMBuildSwitch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(unsigned int *)(a1 + 260);
  int v9 = v8 + 1;
  int v10 = *(_DWORD *)(a1 + 256);
  if ((int)v8 + 1 <= v10)
  {
    int v13 = *(char **)(a1 + 264);
    int v14 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v10 <= 1) {
      int v10 = 1;
    }
    int v11 = 2 * v10;
    if (v11 <= v9) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = v11;
    }
    int v13 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v12, "Vector Storage (uint8_t, growth)");
    memcpy(v13, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v12;
    *(void *)(a1 + 264) = v13;
    int v14 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v13[v8 + 1], &v13[v8], (v14 - v8));
  *(unsigned char *)(*(void *)(a1 + 264) + v8) = 92;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMValue(a1, a2);
  glpSerializeLLVMBlock(a1, a3);
  unsigned int v15 = (char)glp_serialized_integer32_control(a4);
  uint64_t v16 = *(unsigned int *)(a1 + 260);
  int v17 = v16 + 1;
  int v18 = *(_DWORD *)(a1 + 256);
  if ((int)v16 + 1 <= v18)
  {
    uint64_t v21 = *(char **)(a1 + 264);
    int v22 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v18 <= 1) {
      int v18 = 1;
    }
    int v19 = 2 * v18;
    if (v19 <= v17) {
      uint64_t v20 = v17;
    }
    else {
      uint64_t v20 = v19;
    }
    uint64_t v21 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v20, "Vector Storage (uint8_t, growth)");
    memcpy(v21, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v20;
    *(void *)(a1 + 264) = v21;
    int v22 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v21[v16 + 1], &v21[v16], (v22 - v16));
  *(unsigned char *)(*(void *)(a1 + 264) + v16) = v15;
  int v23 = *(_DWORD *)(a1 + 260);
  unsigned int v24 = v23 + 1;
  *(_DWORD *)(a1 + 260) = v23 + 1;
  if ((v15 & 0x80000000) != 0)
  {
    switch((v15 >> 1) & 7)
    {
      case 0u:
        unsigned int v25 = v23 + 2;
        int v26 = *(_DWORD *)(a1 + 256);
        if (v25 <= v26)
        {
          int v29 = *(char **)(a1 + 264);
          unsigned int v30 = v24;
        }
        else
        {
          if (v26 <= 1) {
            int v26 = 1;
          }
          int v27 = 2 * v26;
          if (v27 <= (int)v25) {
            uint64_t v28 = v25;
          }
          else {
            uint64_t v28 = v27;
          }
          int v29 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v28, "Vector Storage (uint8_t, growth)");
          memcpy(v29, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v28;
          *(void *)(a1 + 264) = v29;
          unsigned int v30 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v29[v24 + 1], &v29[v24], v30 - v24);
        *(unsigned char *)(*(void *)(a1 + 264) + v24) = a4;
        int v49 = 1;
        goto LABEL_55;
      case 1u:
        unsigned int v43 = v23 + 3;
        int v44 = *(_DWORD *)(a1 + 256);
        if (v43 <= v44)
        {
          int v47 = *(char **)(a1 + 264);
          unsigned int v48 = v24;
        }
        else
        {
          if (v44 <= 1) {
            int v44 = 1;
          }
          int v45 = 2 * v44;
          if (v45 <= (int)v43) {
            uint64_t v46 = v43;
          }
          else {
            uint64_t v46 = v45;
          }
          int v47 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v46, "Vector Storage (uint8_t, growth)");
          memcpy(v47, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v46;
          *(void *)(a1 + 264) = v47;
          unsigned int v48 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v47[v24 + 1], &v47[v24], v48 - v24);
        *(_WORD *)(*(void *)(a1 + 264) + v24) = a4;
        int v49 = 2;
        goto LABEL_55;
      case 2u:
        unsigned int v31 = v23 + 4;
        int v32 = *(_DWORD *)(a1 + 256);
        if (v31 <= v32)
        {
          int v35 = *(char **)(a1 + 264);
          unsigned int v36 = v24;
        }
        else
        {
          if (v32 <= 1) {
            int v32 = 1;
          }
          int v33 = 2 * v32;
          if (v33 <= (int)v31) {
            uint64_t v34 = v31;
          }
          else {
            uint64_t v34 = v33;
          }
          int v35 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v34, "Vector Storage (uint8_t, growth)");
          memcpy(v35, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v34;
          *(void *)(a1 + 264) = v35;
          unsigned int v36 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v35[v24 + 1], &v35[v24], v36 - v24);
        uint64_t v50 = *(void *)(a1 + 264) + v24;
        *(unsigned char *)(v50 + 2) = BYTE2(a4);
        *(_WORD *)uint64_t v50 = a4;
        int v49 = 3;
        goto LABEL_55;
      case 3u:
        unsigned int v37 = v23 + 5;
        int v38 = *(_DWORD *)(a1 + 256);
        if (v37 <= v38)
        {
          uint64_t v41 = *(char **)(a1 + 264);
          unsigned int v42 = v24;
        }
        else
        {
          if (v38 <= 1) {
            int v38 = 1;
          }
          int v39 = 2 * v38;
          if (v39 <= (int)v37) {
            uint64_t v40 = v37;
          }
          else {
            uint64_t v40 = v39;
          }
          uint64_t v41 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v40, "Vector Storage (uint8_t, growth)");
          memcpy(v41, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v40;
          *(void *)(a1 + 264) = v41;
          unsigned int v42 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v41[v24 + 1], &v41[v24], v42 - v24);
        *(_DWORD *)(*(void *)(a1 + 264) + v24) = a4;
        int v49 = 4;
LABEL_55:
        *(_DWORD *)(a1 + 260) += v49;
        break;
      default:
        break;
    }
  }
  uint64_t result = *(int *)(a1 + 308);
  *(_DWORD *)(a1 + 308) = result + 1;
  return result;
}

void *glpLLVMEmitBranch(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 260);
  int v5 = v4 + 1;
  int v6 = *(_DWORD *)(a1 + 256);
  if ((int)v4 + 1 <= v6)
  {
    int v9 = *(char **)(a1 + 264);
    int v10 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v6 <= 1) {
      int v6 = 1;
    }
    int v7 = 2 * v6;
    if (v7 <= v5) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v7;
    }
    int v9 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v8, "Vector Storage (uint8_t, growth)");
    memcpy(v9, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v8;
    *(void *)(a1 + 264) = v9;
    int v10 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v9[v4 + 1], &v9[v4], (v10 - v4));
  *(unsigned char *)(*(void *)(a1 + 264) + v4) = 26;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  uint64_t result = glpSerializeLLVMBlock(a1, a2);
  *(_DWORD *)(a1 + 332) = 0;
  return result;
}

void *glpLLVMAddCase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(unsigned int *)(a1 + 260);
  int v9 = v8 + 1;
  int v10 = *(_DWORD *)(a1 + 256);
  if ((int)v8 + 1 <= v10)
  {
    int v13 = *(char **)(a1 + 264);
    int v14 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v10 <= 1) {
      int v10 = 1;
    }
    int v11 = 2 * v10;
    if (v11 <= v9) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = v11;
    }
    int v13 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v12, "Vector Storage (uint8_t, growth)");
    memcpy(v13, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v12;
    *(void *)(a1 + 264) = v13;
    int v14 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v13[v8 + 1], &v13[v8], (v14 - v8));
  *(unsigned char *)(*(void *)(a1 + 264) + v8) = 93;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMValue(a1, a2);
  glpSerializeLLVMValue(a1, a3);

  return glpSerializeLLVMBlock(a1, a4);
}

uint64_t glpLLVMBuildPhi(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 260);
  int v7 = v6 + 1;
  int v8 = *(_DWORD *)(a1 + 256);
  if ((int)v6 + 1 <= v8)
  {
    int v11 = *(char **)(a1 + 264);
    int v12 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v8 <= 1) {
      int v8 = 1;
    }
    int v9 = 2 * v8;
    if (v9 <= v7) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = v9;
    }
    int v11 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v10, "Vector Storage (uint8_t, growth)");
    memcpy(v11, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v10;
    *(void *)(a1 + 264) = v11;
    int v12 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v11[v6 + 1], &v11[v6], (v12 - v6));
  *(unsigned char *)(*(void *)(a1 + 264) + v6) = 94;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMType(a1, a2);
  if (*(_DWORD *)(a1 + 300))
  {
    size_t v13 = strlen(a3) + 1;
    uint64_t v14 = *(unsigned int *)(a1 + 260);
    int v15 = v13 + v14;
    int v16 = *(_DWORD *)(a1 + 256);
    if ((int)v13 + (int)v14 <= v16)
    {
      int v19 = *(char **)(a1 + 264);
      int v20 = *(_DWORD *)(a1 + 260);
    }
    else
    {
      if (v16 <= 1) {
        int v16 = 1;
      }
      int v17 = 2 * v16;
      if (v17 <= v15) {
        uint64_t v18 = v15;
      }
      else {
        uint64_t v18 = v17;
      }
      int v19 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v18, "Vector Storage (uint8_t, growth)");
      memcpy(v19, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
      (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
      *(_DWORD *)(a1 + 256) = v18;
      *(void *)(a1 + 264) = v19;
      int v20 = *(_DWORD *)(a1 + 260);
    }
    memmove(&v19[v14 + 1], &v19[v14], (v20 - v14));
    memcpy((void *)(*(void *)(a1 + 264) + v14), a3, v13);
    *(_DWORD *)(a1 + 260) += v13;
  }
  uint64_t result = *(int *)(a1 + 308);
  *(_DWORD *)(a1 + 308) = result + 1;
  return result;
}

void *glpLLVMAddIncoming(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 260);
  int v11 = v10 + 1;
  int v12 = *(_DWORD *)(a1 + 256);
  if ((int)v10 + 1 <= v12)
  {
    int v15 = *(char **)(a1 + 264);
    int v16 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v12 <= 1) {
      int v12 = 1;
    }
    int v13 = 2 * v12;
    if (v13 <= v11) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = v13;
    }
    int v15 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v14, "Vector Storage (uint8_t, growth)");
    memcpy(v15, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v14;
    *(void *)(a1 + 264) = v15;
    int v16 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v15[v10 + 1], &v15[v10], (v16 - v10));
  *(unsigned char *)(*(void *)(a1 + 264) + v10) = 95;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMValue(a1, a2);
  unsigned int v17 = (char)glp_serialized_integer32_control(a5);
  uint64_t v18 = *(unsigned int *)(a1 + 260);
  int v19 = v18 + 1;
  int v20 = *(_DWORD *)(a1 + 256);
  if ((int)v18 + 1 <= v20)
  {
    int v23 = *(char **)(a1 + 264);
    int v24 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v20 <= 1) {
      int v20 = 1;
    }
    int v21 = 2 * v20;
    if (v21 <= v19) {
      uint64_t v22 = v19;
    }
    else {
      uint64_t v22 = v21;
    }
    int v23 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v22, "Vector Storage (uint8_t, growth)");
    memcpy(v23, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v22;
    *(void *)(a1 + 264) = v23;
    int v24 = *(_DWORD *)(a1 + 260);
  }
  uint64_t result = memmove(&v23[v18 + 1], &v23[v18], (v24 - v18));
  *(unsigned char *)(*(void *)(a1 + 264) + v18) = v17;
  int v26 = *(_DWORD *)(a1 + 260);
  unsigned int v27 = v26 + 1;
  *(_DWORD *)(a1 + 260) = v26 + 1;
  if ((v17 & 0x80000000) != 0)
  {
    switch((v17 >> 1) & 7)
    {
      case 0u:
        unsigned int v28 = v26 + 2;
        int v29 = *(_DWORD *)(a1 + 256);
        if (v28 <= v29)
        {
          int v32 = *(char **)(a1 + 264);
          unsigned int v33 = v27;
        }
        else
        {
          if (v29 <= 1) {
            int v29 = 1;
          }
          int v30 = 2 * v29;
          if (v30 <= (int)v28) {
            uint64_t v31 = v28;
          }
          else {
            uint64_t v31 = v30;
          }
          int v32 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v31, "Vector Storage (uint8_t, growth)");
          memcpy(v32, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v31;
          *(void *)(a1 + 264) = v32;
          unsigned int v33 = *(_DWORD *)(a1 + 260);
        }
        uint64_t result = memmove(&v32[v27 + 1], &v32[v27], v33 - v27);
        *(unsigned char *)(*(void *)(a1 + 264) + v27) = a5;
        int v52 = 1;
        goto LABEL_55;
      case 1u:
        unsigned int v46 = v26 + 3;
        int v47 = *(_DWORD *)(a1 + 256);
        if (v46 <= v47)
        {
          uint64_t v50 = *(char **)(a1 + 264);
          unsigned int v51 = v27;
        }
        else
        {
          if (v47 <= 1) {
            int v47 = 1;
          }
          int v48 = 2 * v47;
          if (v48 <= (int)v46) {
            uint64_t v49 = v46;
          }
          else {
            uint64_t v49 = v48;
          }
          uint64_t v50 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v49, "Vector Storage (uint8_t, growth)");
          memcpy(v50, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v49;
          *(void *)(a1 + 264) = v50;
          unsigned int v51 = *(_DWORD *)(a1 + 260);
        }
        uint64_t result = memmove(&v50[v27 + 1], &v50[v27], v51 - v27);
        *(_WORD *)(*(void *)(a1 + 264) + v27) = a5;
        int v52 = 2;
        goto LABEL_55;
      case 2u:
        unsigned int v34 = v26 + 4;
        int v35 = *(_DWORD *)(a1 + 256);
        if (v34 <= v35)
        {
          int v38 = *(char **)(a1 + 264);
          unsigned int v39 = v27;
        }
        else
        {
          if (v35 <= 1) {
            int v35 = 1;
          }
          int v36 = 2 * v35;
          if (v36 <= (int)v34) {
            uint64_t v37 = v34;
          }
          else {
            uint64_t v37 = v36;
          }
          int v38 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v37, "Vector Storage (uint8_t, growth)");
          memcpy(v38, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v37;
          *(void *)(a1 + 264) = v38;
          unsigned int v39 = *(_DWORD *)(a1 + 260);
        }
        uint64_t result = memmove(&v38[v27 + 1], &v38[v27], v39 - v27);
        uint64_t v53 = *(void *)(a1 + 264) + v27;
        *(unsigned char *)(v53 + 2) = BYTE2(a5);
        *(_WORD *)uint64_t v53 = a5;
        int v52 = 3;
        goto LABEL_55;
      case 3u:
        unsigned int v40 = v26 + 5;
        int v41 = *(_DWORD *)(a1 + 256);
        if (v40 <= v41)
        {
          int v44 = *(char **)(a1 + 264);
          unsigned int v45 = v27;
        }
        else
        {
          if (v41 <= 1) {
            int v41 = 1;
          }
          int v42 = 2 * v41;
          if (v42 <= (int)v40) {
            uint64_t v43 = v40;
          }
          else {
            uint64_t v43 = v42;
          }
          int v44 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v43, "Vector Storage (uint8_t, growth)");
          memcpy(v44, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v43;
          *(void *)(a1 + 264) = v44;
          unsigned int v45 = *(_DWORD *)(a1 + 260);
        }
        uint64_t result = memmove(&v44[v27 + 1], &v44[v27], v45 - v27);
        *(_DWORD *)(*(void *)(a1 + 264) + v27) = a5;
        int v52 = 4;
LABEL_55:
        *(_DWORD *)(a1 + 260) += v52;
        break;
      default:
        break;
    }
  }
  if (a5)
  {
    a5 = a5;
    do
    {
      uint64_t v54 = *a3++;
      glpSerializeLLVMValue(a1, v54);
      uint64_t v55 = *a4++;
      uint64_t result = glpSerializeLLVMBlock(a1, v55);
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t glpLLVMAppendBasicBlock(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 260);
  int v7 = v6 + 1;
  int v8 = *(_DWORD *)(a1 + 256);
  if ((int)v6 + 1 <= v8)
  {
    int v11 = *(char **)(a1 + 264);
    int v12 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v8 <= 1) {
      int v8 = 1;
    }
    int v9 = 2 * v8;
    if (v9 <= v7) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = v9;
    }
    int v11 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v10, "Vector Storage (uint8_t, growth)");
    memcpy(v11, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v10;
    *(void *)(a1 + 264) = v11;
    int v12 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v11[v6 + 1], &v11[v6], (v12 - v6));
  *(unsigned char *)(*(void *)(a1 + 264) + v6) = 20;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMValue(a1, a2);
  size_t v13 = strlen(a3) + 1;
  uint64_t v14 = *(unsigned int *)(a1 + 260);
  int v15 = v13 + v14;
  int v16 = *(_DWORD *)(a1 + 256);
  if ((int)v13 + (int)v14 <= v16)
  {
    int v19 = *(char **)(a1 + 264);
    int v20 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v16 <= 1) {
      int v16 = 1;
    }
    int v17 = 2 * v16;
    if (v17 <= v15) {
      uint64_t v18 = v15;
    }
    else {
      uint64_t v18 = v17;
    }
    int v19 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v18, "Vector Storage (uint8_t, growth)");
    memcpy(v19, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v18;
    *(void *)(a1 + 264) = v19;
    int v20 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v19[v14 + 1], &v19[v14], (v20 - v14));
  memcpy((void *)(*(void *)(a1 + 264) + v14), a3, v13);
  *(_DWORD *)(a1 + 260) += v13;
  uint64_t result = *(int *)(a1 + 312);
  *(_DWORD *)(a1 + 312) = result + 1;
  return result;
}

uint64_t glpLLVMSplatScalar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v19[1] = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 520);
  if (!v6)
  {
    uint64_t v6 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), 0, 0);
    *(void *)(a1 + 520) = v6;
  }
  uint64_t v7 = glpLLVMTypeOf(a1, a2);
  uint64_t v8 = glpLLVMVectorType(a1, v7, a3);
  uint64_t v9 = glpLLVMConstFromTypeCache(a1, 37, v8);
  uint64_t inserted = glpLLVMBuildInsertElement(a1, v9, a2, v6, "");
  MEMORY[0x270FA5388](inserted);
  size_t v13 = (void *)((char *)v19 - v12);
  if (v11 >= 0x200) {
    size_t v14 = 512;
  }
  else {
    size_t v14 = v11;
  }
  bzero((char *)v19 - v12, v14);
  if (a3)
  {
    uint64_t v15 = a3;
    int v16 = v13;
    do
    {
      *v16++ = v6;
      --v15;
    }
    while (v15);
  }
  uint64_t v17 = glpLLVMConstVectorCache(a1, v13, a3);

  return glpLLVMBuildShuffleVector(a1, inserted, inserted, v17, "");
}

uint64_t glpLLVMSplatElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v19[1] = *MEMORY[0x263EF8340];
  if (a3 == 1) {
    return a2;
  }
  uint64_t v7 = glpLLVMTypeOf(a1, a2);
  uint64_t v8 = glpLLVMVectorType(a1, v7, a3);
  uint64_t v9 = glpLLVMConstFromTypeCache(a1, 37, v8);
  uint64_t v10 = *(void *)(a1 + 520);
  if (!v10)
  {
    uint64_t v10 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), 0, 0);
    *(void *)(a1 + 520) = v10;
  }
  uint64_t inserted = glpLLVMBuildInsertElement(a1, v9, a2, v10, "");
  MEMORY[0x270FA5388](inserted);
  size_t v14 = (void *)((char *)v19 - v13);
  if (v12 >= 0x200) {
    size_t v15 = 512;
  }
  else {
    size_t v15 = v12;
  }
  bzero((char *)v19 - v13, v15);
  if ((int)a3 >= 1)
  {
    uint64_t v16 = a3;
    uint64_t v17 = v14;
    do
    {
      *v17++ = v10;
      --v16;
    }
    while (v16);
  }
  uint64_t v18 = glpLLVMConstVectorCache(a1, v14, a3);
  return glpLLVMBuildShuffleVector(a1, inserted, inserted, v18, "");
}

uint64_t glpGetTextureSize(int a1, int *a2)
{
  int v3 = 0;
  uint64_t result = 2;
  switch(a1)
  {
    case 0:
    case 1:
    case 16:
      goto LABEL_6;
    case 4:
    case 9:
    case 13:
      goto LABEL_4;
    case 5:
    case 6:
    case 12:
      int v3 = 1;
      break;
    case 7:
    case 11:
      int v3 = 1;
LABEL_4:
      uint64_t result = 1;
      break;
    case 8:
    case 17:
      int v3 = 1;
LABEL_6:
      uint64_t result = 3;
      break;
    default:
      break;
  }
  *a2 = v3;
  return result;
}

char *glpTextureNameFromSamplerType(int a1)
{
  unsigned int PPTextarget = glpPrimitiveSamplerGetPPTextarget(a1);
  if (PPTextarget >= 0x12) {
    abort();
  }
  return off_264D99570[PPTextarget];
}

uint64_t glpLLVMBuildInsertValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 260);
  int v11 = v10 + 1;
  int v12 = *(_DWORD *)(a1 + 256);
  if ((int)v10 + 1 <= v12)
  {
    size_t v15 = *(char **)(a1 + 264);
    int v16 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v12 <= 1) {
      int v12 = 1;
    }
    int v13 = 2 * v12;
    if (v13 <= v11) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = v13;
    }
    size_t v15 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v14, "Vector Storage (uint8_t, growth)");
    memcpy(v15, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v14;
    *(void *)(a1 + 264) = v15;
    int v16 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v15[v10 + 1], &v15[v10], (v16 - v10));
  *(unsigned char *)(*(void *)(a1 + 264) + v10) = 51;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMValue(a1, a2);
  glpSerializeLLVMValue(a1, a3);
  unsigned int v17 = (char)glp_serialized_integer32_control(a4);
  uint64_t v18 = *(unsigned int *)(a1 + 260);
  int v19 = v18 + 1;
  int v20 = *(_DWORD *)(a1 + 256);
  if ((int)v18 + 1 <= v20)
  {
    int v23 = *(char **)(a1 + 264);
    int v24 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v20 <= 1) {
      int v20 = 1;
    }
    int v21 = 2 * v20;
    if (v21 <= v19) {
      uint64_t v22 = v19;
    }
    else {
      uint64_t v22 = v21;
    }
    int v23 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v22, "Vector Storage (uint8_t, growth)");
    memcpy(v23, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v22;
    *(void *)(a1 + 264) = v23;
    int v24 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v23[v18 + 1], &v23[v18], (v24 - v18));
  *(unsigned char *)(*(void *)(a1 + 264) + v18) = v17;
  int v25 = *(_DWORD *)(a1 + 260);
  unsigned int v26 = v25 + 1;
  *(_DWORD *)(a1 + 260) = v25 + 1;
  if ((v17 & 0x80000000) != 0)
  {
    switch((v17 >> 1) & 7)
    {
      case 0u:
        unsigned int v27 = v25 + 2;
        int v28 = *(_DWORD *)(a1 + 256);
        if (v27 <= v28)
        {
          uint64_t v31 = *(char **)(a1 + 264);
          unsigned int v32 = v26;
        }
        else
        {
          if (v28 <= 1) {
            int v28 = 1;
          }
          int v29 = 2 * v28;
          if (v29 <= (int)v27) {
            uint64_t v30 = v27;
          }
          else {
            uint64_t v30 = v29;
          }
          uint64_t v31 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v30, "Vector Storage (uint8_t, growth)");
          memcpy(v31, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v30;
          *(void *)(a1 + 264) = v31;
          unsigned int v32 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v31[v26 + 1], &v31[v26], v32 - v26);
        *(unsigned char *)(*(void *)(a1 + 264) + v26) = a4;
        unsigned int v26 = *(_DWORD *)(a1 + 260) + 1;
        goto LABEL_55;
      case 1u:
        unsigned int v45 = v25 + 3;
        int v46 = *(_DWORD *)(a1 + 256);
        if (v45 <= v46)
        {
          uint64_t v49 = *(char **)(a1 + 264);
          unsigned int v50 = v26;
        }
        else
        {
          if (v46 <= 1) {
            int v46 = 1;
          }
          int v47 = 2 * v46;
          if (v47 <= (int)v45) {
            uint64_t v48 = v45;
          }
          else {
            uint64_t v48 = v47;
          }
          uint64_t v49 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v48, "Vector Storage (uint8_t, growth)");
          memcpy(v49, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v48;
          *(void *)(a1 + 264) = v49;
          unsigned int v50 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v49[v26 + 1], &v49[v26], v50 - v26);
        *(_WORD *)(*(void *)(a1 + 264) + v26) = a4;
        unsigned int v26 = *(_DWORD *)(a1 + 260) + 2;
        goto LABEL_55;
      case 2u:
        unsigned int v33 = v25 + 4;
        int v34 = *(_DWORD *)(a1 + 256);
        if (v33 <= v34)
        {
          uint64_t v37 = *(char **)(a1 + 264);
          unsigned int v38 = v26;
        }
        else
        {
          if (v34 <= 1) {
            int v34 = 1;
          }
          int v35 = 2 * v34;
          if (v35 <= (int)v33) {
            uint64_t v36 = v33;
          }
          else {
            uint64_t v36 = v35;
          }
          uint64_t v37 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v36, "Vector Storage (uint8_t, growth)");
          memcpy(v37, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v36;
          *(void *)(a1 + 264) = v37;
          unsigned int v38 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v37[v26 + 1], &v37[v26], v38 - v26);
        uint64_t v51 = *(void *)(a1 + 264) + v26;
        *(unsigned char *)(v51 + 2) = BYTE2(a4);
        *(_WORD *)uint64_t v51 = a4;
        unsigned int v26 = *(_DWORD *)(a1 + 260) + 3;
        goto LABEL_55;
      case 3u:
        unsigned int v39 = v25 + 5;
        int v40 = *(_DWORD *)(a1 + 256);
        if (v39 <= v40)
        {
          uint64_t v43 = *(char **)(a1 + 264);
          unsigned int v44 = v26;
        }
        else
        {
          if (v40 <= 1) {
            int v40 = 1;
          }
          int v41 = 2 * v40;
          if (v41 <= (int)v39) {
            uint64_t v42 = v39;
          }
          else {
            uint64_t v42 = v41;
          }
          uint64_t v43 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v42, "Vector Storage (uint8_t, growth)");
          memcpy(v43, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v42;
          *(void *)(a1 + 264) = v43;
          unsigned int v44 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v43[v26 + 1], &v43[v26], v44 - v26);
        *(_DWORD *)(*(void *)(a1 + 264) + v26) = a4;
        unsigned int v26 = *(_DWORD *)(a1 + 260) + 4;
LABEL_55:
        *(_DWORD *)(a1 + 260) = v26;
        break;
      default:
        break;
    }
  }
  if (*(_DWORD *)(a1 + 300))
  {
    size_t v52 = strlen(a5) + 1;
    int v53 = v52 + v26;
    int v54 = *(_DWORD *)(a1 + 256);
    if (v52 + v26 <= v54)
    {
      uint64_t v57 = *(char **)(a1 + 264);
      unsigned int v58 = v26;
    }
    else
    {
      if (v54 <= 1) {
        int v54 = 1;
      }
      int v55 = 2 * v54;
      if (v55 <= v53) {
        uint64_t v56 = v53;
      }
      else {
        uint64_t v56 = v55;
      }
      uint64_t v57 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v56, "Vector Storage (uint8_t, growth)");
      memcpy(v57, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
      (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
      *(_DWORD *)(a1 + 256) = v56;
      *(void *)(a1 + 264) = v57;
      unsigned int v58 = *(_DWORD *)(a1 + 260);
    }
    memmove(&v57[v26 + 1], &v57[v26], v58 - v26);
    memcpy((void *)(*(void *)(a1 + 264) + v26), a5, v52);
    *(_DWORD *)(a1 + 260) += v52;
  }
  uint64_t result = *(int *)(a1 + 308);
  *(_DWORD *)(a1 + 308) = result + 1;
  return result;
}

uint64_t glpLLVMStructTypeInContext(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 260);
  int v7 = v6 + 1;
  int v8 = *(_DWORD *)(a1 + 256);
  if ((int)v6 + 1 <= v8)
  {
    int v11 = *(char **)(a1 + 264);
    int v12 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v8 <= 1) {
      int v8 = 1;
    }
    int v9 = 2 * v8;
    if (v9 <= v7) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = v9;
    }
    int v11 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v10, "Vector Storage (uint8_t, growth)");
    memcpy(v11, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v10;
    *(void *)(a1 + 264) = v11;
    int v12 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v11[v6 + 1], &v11[v6], (v12 - v6));
  *(unsigned char *)(*(void *)(a1 + 264) + v6) = 39;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeArrayOfLLVMTypes(a1, a2, a3);
  unsigned int v13 = (char)glp_serialized_integer32_control(0);
  uint64_t v14 = *(unsigned int *)(a1 + 260);
  int v15 = v14 + 1;
  int v16 = *(_DWORD *)(a1 + 256);
  if ((int)v14 + 1 <= v16)
  {
    int v19 = *(char **)(a1 + 264);
    int v20 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v16 <= 1) {
      int v16 = 1;
    }
    int v17 = 2 * v16;
    if (v17 <= v15) {
      uint64_t v18 = v15;
    }
    else {
      uint64_t v18 = v17;
    }
    int v19 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v18, "Vector Storage (uint8_t, growth)");
    memcpy(v19, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v18;
    *(void *)(a1 + 264) = v19;
    int v20 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v19[v14 + 1], &v19[v14], (v20 - v14));
  *(unsigned char *)(*(void *)(a1 + 264) + v14) = v13;
  int v21 = *(_DWORD *)(a1 + 260);
  unsigned int v22 = v21 + 1;
  *(_DWORD *)(a1 + 260) = v21 + 1;
  if ((v13 & 0x80000000) != 0)
  {
    switch((v13 >> 1) & 7)
    {
      case 0u:
        unsigned int v23 = v21 + 2;
        int v24 = *(_DWORD *)(a1 + 256);
        if (v23 <= v24)
        {
          unsigned int v27 = *(char **)(a1 + 264);
          unsigned int v28 = v22;
        }
        else
        {
          if (v24 <= 1) {
            int v24 = 1;
          }
          int v25 = 2 * v24;
          if (v25 <= (int)v23) {
            uint64_t v26 = v23;
          }
          else {
            uint64_t v26 = v25;
          }
          unsigned int v27 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v26, "Vector Storage (uint8_t, growth)");
          memcpy(v27, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v26;
          *(void *)(a1 + 264) = v27;
          unsigned int v28 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v27[v22 + 1], &v27[v22], v28 - v22);
        *(unsigned char *)(*(void *)(a1 + 264) + v22) = 0;
        int v47 = 1;
        goto LABEL_55;
      case 1u:
        unsigned int v41 = v21 + 3;
        int v42 = *(_DWORD *)(a1 + 256);
        if (v41 <= v42)
        {
          unsigned int v45 = *(char **)(a1 + 264);
          unsigned int v46 = v22;
        }
        else
        {
          if (v42 <= 1) {
            int v42 = 1;
          }
          int v43 = 2 * v42;
          if (v43 <= (int)v41) {
            uint64_t v44 = v41;
          }
          else {
            uint64_t v44 = v43;
          }
          unsigned int v45 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v44, "Vector Storage (uint8_t, growth)");
          memcpy(v45, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v44;
          *(void *)(a1 + 264) = v45;
          unsigned int v46 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v45[v22 + 1], &v45[v22], v46 - v22);
        *(_WORD *)(*(void *)(a1 + 264) + v22) = 0;
        int v47 = 2;
        goto LABEL_55;
      case 2u:
        unsigned int v29 = v21 + 4;
        int v30 = *(_DWORD *)(a1 + 256);
        if (v29 <= v30)
        {
          unsigned int v33 = *(char **)(a1 + 264);
          unsigned int v34 = v22;
        }
        else
        {
          if (v30 <= 1) {
            int v30 = 1;
          }
          int v31 = 2 * v30;
          if (v31 <= (int)v29) {
            uint64_t v32 = v29;
          }
          else {
            uint64_t v32 = v31;
          }
          unsigned int v33 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v32, "Vector Storage (uint8_t, growth)");
          memcpy(v33, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v32;
          *(void *)(a1 + 264) = v33;
          unsigned int v34 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v33[v22 + 1], &v33[v22], v34 - v22);
        uint64_t v48 = *(void *)(a1 + 264) + v22;
        *(unsigned char *)(v48 + 2) = 0;
        *(_WORD *)uint64_t v48 = 0;
        int v47 = 3;
        goto LABEL_55;
      case 3u:
        unsigned int v35 = v21 + 5;
        int v36 = *(_DWORD *)(a1 + 256);
        if (v35 <= v36)
        {
          unsigned int v39 = *(char **)(a1 + 264);
          unsigned int v40 = v22;
        }
        else
        {
          if (v36 <= 1) {
            int v36 = 1;
          }
          int v37 = 2 * v36;
          if (v37 <= (int)v35) {
            uint64_t v38 = v35;
          }
          else {
            uint64_t v38 = v37;
          }
          unsigned int v39 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v38, "Vector Storage (uint8_t, growth)");
          memcpy(v39, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v38;
          *(void *)(a1 + 264) = v39;
          unsigned int v40 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v39[v22 + 1], &v39[v22], v40 - v22);
        *(_DWORD *)(*(void *)(a1 + 264) + v22) = 0;
        int v47 = 4;
LABEL_55:
        *(_DWORD *)(a1 + 260) += v47;
        break;
      default:
        break;
    }
  }
  uint64_t result = *(int *)(a1 + 304);
  *(_DWORD *)(a1 + 304) = result + 1;
  return result;
}

uint64_t glpLLVMTypesEqual(_DWORD *a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  BOOL v10 = glpPrimitiveTypeGetScalarType(a2) == 5 || glpPrimitiveTypeGetScalarType(a2) == 36;
  BOOL v11 = glpPrimitiveTypeGetScalarType(a4) == 5 || glpPrimitiveTypeGetScalarType(a4) == 36;
  if (glpPrimitiveTypeGetCategory(a2) == 2) {
    int Length = glpPrimitiveVectorGetLength(a2);
  }
  else {
    int Length = 1;
  }
  if (glpPrimitiveTypeGetCategory(a4) == 2) {
    int v13 = glpPrimitiveVectorGetLength(a4);
  }
  else {
    int v13 = 1;
  }
  if (a2 == a4 || (uint64_t result = 0, v10 && v11) && Length == v13)
  {
    if (a3 != a5)
    {
      int ScalarType = glpPrimitiveTypeGetScalarType(a2);
      int v16 = ScalarType;
      if (ScalarType > 8)
      {
        uint64_t result = 1;
        if (v16 == 9) {
          return result;
        }
        if (v16 != 36)
        {
          if (v16 == 62) {
            return result;
          }
          return 0;
        }
LABEL_24:
        switch(a3)
        {
          case 0:
          case 3:
            int v17 = a1 + 31;
            goto LABEL_30;
          case 1:
            int v17 = a1 + 29;
            goto LABEL_30;
          case 2:
            int v17 = a1 + 30;
LABEL_30:
            if (*v17 <= 0x10u) {
              goto LABEL_31;
            }
            int v19 = 32;
            break;
          default:
LABEL_31:
            int v19 = 16;
            break;
        }
        switch(a5)
        {
          case 0:
          case 3:
            int v20 = a1 + 31;
            goto LABEL_46;
          case 1:
            int v20 = a1 + 29;
            goto LABEL_46;
          case 2:
            int v20 = a1 + 30;
            goto LABEL_46;
          default:
            goto LABEL_47;
        }
      }
      if (ScalarType != 1)
      {
        if (ScalarType == 5) {
          goto LABEL_24;
        }
        return 0;
      }
      switch(a3)
      {
        case 0:
        case 3:
          uint64_t v18 = a1 + 28;
          goto LABEL_39;
        case 1:
          uint64_t v18 = a1 + 26;
          goto LABEL_39;
        case 2:
          uint64_t v18 = a1 + 27;
LABEL_39:
          if (*v18 <= 0x10u) {
            goto LABEL_40;
          }
          int v19 = 32;
          break;
        default:
LABEL_40:
          int v19 = 16;
          break;
      }
      switch(a5)
      {
        case 0:
        case 3:
          int v20 = a1 + 28;
          goto LABEL_46;
        case 1:
          int v20 = a1 + 26;
          goto LABEL_46;
        case 2:
          int v20 = a1 + 27;
LABEL_46:
          if (*v20 <= 0x10u) {
            goto LABEL_47;
          }
          int v21 = 32;
          break;
        default:
LABEL_47:
          int v21 = 16;
          break;
      }
      if (v19 != v21) {
        return 0;
      }
    }
    return 1;
  }
  return result;
}

void *glpSerializeArrayOfLLVMTypes(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  LODWORD(v3) = a3;
  unsigned int v6 = (char)glp_serialized_integer32_control(a3);
  uint64_t v7 = *(unsigned int *)(a1 + 260);
  int v8 = v7 + 1;
  int v9 = *(_DWORD *)(a1 + 256);
  if ((int)v7 + 1 <= v9)
  {
    int v12 = *(char **)(a1 + 264);
    int v13 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v9 <= 1) {
      int v9 = 1;
    }
    int v10 = 2 * v9;
    if (v10 <= v8) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = v10;
    }
    int v12 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v11, "Vector Storage (uint8_t, growth)");
    memcpy(v12, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v11;
    *(void *)(a1 + 264) = v12;
    int v13 = *(_DWORD *)(a1 + 260);
  }
  uint64_t result = memmove(&v12[v7 + 1], &v12[v7], (v13 - v7));
  *(unsigned char *)(*(void *)(a1 + 264) + v7) = v6;
  int v15 = *(_DWORD *)(a1 + 260);
  unsigned int v16 = v15 + 1;
  *(_DWORD *)(a1 + 260) = v15 + 1;
  if ((v6 & 0x80000000) != 0)
  {
    switch((v6 >> 1) & 7)
    {
      case 0u:
        unsigned int v17 = v15 + 2;
        int v18 = *(_DWORD *)(a1 + 256);
        if (v17 <= v18)
        {
          int v21 = *(char **)(a1 + 264);
          unsigned int v22 = v16;
        }
        else
        {
          if (v18 <= 1) {
            int v18 = 1;
          }
          int v19 = 2 * v18;
          if (v19 <= (int)v17) {
            uint64_t v20 = v17;
          }
          else {
            uint64_t v20 = v19;
          }
          int v21 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v20, "Vector Storage (uint8_t, growth)");
          memcpy(v21, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v20;
          *(void *)(a1 + 264) = v21;
          unsigned int v22 = *(_DWORD *)(a1 + 260);
        }
        uint64_t result = memmove(&v21[v16 + 1], &v21[v16], v22 - v16);
        *(unsigned char *)(*(void *)(a1 + 264) + v16) = v3;
        int v41 = 1;
        goto LABEL_47;
      case 1u:
        unsigned int v35 = v15 + 3;
        int v36 = *(_DWORD *)(a1 + 256);
        if (v35 <= v36)
        {
          unsigned int v39 = *(char **)(a1 + 264);
          unsigned int v40 = v16;
        }
        else
        {
          if (v36 <= 1) {
            int v36 = 1;
          }
          int v37 = 2 * v36;
          if (v37 <= (int)v35) {
            uint64_t v38 = v35;
          }
          else {
            uint64_t v38 = v37;
          }
          unsigned int v39 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v38, "Vector Storage (uint8_t, growth)");
          memcpy(v39, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v38;
          *(void *)(a1 + 264) = v39;
          unsigned int v40 = *(_DWORD *)(a1 + 260);
        }
        uint64_t result = memmove(&v39[v16 + 1], &v39[v16], v40 - v16);
        *(_WORD *)(*(void *)(a1 + 264) + v16) = v3;
        int v41 = 2;
        goto LABEL_47;
      case 2u:
        unsigned int v23 = v15 + 4;
        int v24 = *(_DWORD *)(a1 + 256);
        if (v23 <= v24)
        {
          unsigned int v27 = *(char **)(a1 + 264);
          unsigned int v28 = v16;
        }
        else
        {
          if (v24 <= 1) {
            int v24 = 1;
          }
          int v25 = 2 * v24;
          if (v25 <= (int)v23) {
            uint64_t v26 = v23;
          }
          else {
            uint64_t v26 = v25;
          }
          unsigned int v27 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v26, "Vector Storage (uint8_t, growth)");
          memcpy(v27, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v26;
          *(void *)(a1 + 264) = v27;
          unsigned int v28 = *(_DWORD *)(a1 + 260);
        }
        uint64_t result = memmove(&v27[v16 + 1], &v27[v16], v28 - v16);
        uint64_t v42 = *(void *)(a1 + 264) + v16;
        *(unsigned char *)(v42 + 2) = BYTE2(v3);
        *(_WORD *)uint64_t v42 = v3;
        int v41 = 3;
        goto LABEL_47;
      case 3u:
        unsigned int v29 = v15 + 5;
        int v30 = *(_DWORD *)(a1 + 256);
        if (v29 <= v30)
        {
          unsigned int v33 = *(char **)(a1 + 264);
          unsigned int v34 = v16;
        }
        else
        {
          if (v30 <= 1) {
            int v30 = 1;
          }
          int v31 = 2 * v30;
          if (v31 <= (int)v29) {
            uint64_t v32 = v29;
          }
          else {
            uint64_t v32 = v31;
          }
          unsigned int v33 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v32, "Vector Storage (uint8_t, growth)");
          memcpy(v33, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v32;
          *(void *)(a1 + 264) = v33;
          unsigned int v34 = *(_DWORD *)(a1 + 260);
        }
        uint64_t result = memmove(&v33[v16 + 1], &v33[v16], v34 - v16);
        *(_DWORD *)(*(void *)(a1 + 264) + v16) = v3;
        int v41 = 4;
LABEL_47:
        *(_DWORD *)(a1 + 260) += v41;
        break;
      default:
        break;
    }
  }
  if (v3)
  {
    uint64_t v3 = v3;
    do
    {
      uint64_t v43 = *a2++;
      uint64_t result = glpSerializeLLVMType(a1, v43);
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t glpBuildArrayElementPtr(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (glpIsConstantNode(a4) && (Value = (int *)glpConstantNodeGetValue(a4), !a6))
  {
    int v18 = *Value;
    uint64_t v15 = glpBuildArrayElementPtrCst(a1, a2, a3, *Value);
    if (a5)
    {
      uint64_t v17 = glpBuildArrayElementPtrCst(a1, a2, a3, v18 + 1);
LABEL_11:
      *a5 = v17;
    }
  }
  else
  {
    uint64_t v13 = a1[65];
    if (!v13)
    {
      uint64_t v13 = glpLLVMConstIntCache((uint64_t)a1, a1[5], 0, 0);
      a1[65] = v13;
    }
    uint64_t v20 = v13;
    uint64_t v14 = glpLLVMCGNode(a1, a4, 1);
    uint64_t v21 = v14;
    uint64_t v15 = glpLLVMBuildGEP((uint64_t)a1, a3, &v20, 2, "ptr");
    if (a5)
    {
      uint64_t v16 = a1[66];
      if (!v16)
      {
        uint64_t v16 = glpLLVMConstIntCache((uint64_t)a1, a1[5], 1uLL, 0);
        a1[66] = v16;
      }
      uint64_t v21 = glpLLVMBinaryOperation((uint64_t)a1, 53, v14, v16, "idx");
      uint64_t v17 = glpLLVMBuildGEP((uint64_t)a1, a3, &v20, 2, "nptr");
      goto LABEL_11;
    }
  }
  return v15;
}

uint64_t glpLLVMLoadVector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t SourceVariable = glpLoadSourceVariable((void *)a1, a3, a2);
  uint64_t v13 = glpPrimitiveTypeToLLVMType((void *)a1, a4, a5);
  if (a6)
  {
    uint64_t v14 = v13;
    if (!glpLLVMTypesEqual((_DWORD *)a1, a6, a7, a4, a5))
    {
      uint64_t v15 = *(unsigned int *)(a1 + 260);
      int v16 = v15 + 1;
      int v17 = *(_DWORD *)(a1 + 256);
      if ((int)v15 + 1 <= v17)
      {
        uint64_t v20 = *(char **)(a1 + 264);
        int v21 = *(_DWORD *)(a1 + 260);
      }
      else
      {
        if (v17 <= 1) {
          int v17 = 1;
        }
        int v18 = 2 * v17;
        if (v18 <= v16) {
          uint64_t v19 = v16;
        }
        else {
          uint64_t v19 = v18;
        }
        uint64_t v20 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v19, "Vector Storage (uint8_t, growth)");
        memcpy(v20, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
        (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
        *(_DWORD *)(a1 + 256) = v19;
        *(void *)(a1 + 264) = v20;
        int v21 = *(_DWORD *)(a1 + 260);
      }
      memmove(&v20[v15 + 1], &v20[v15], (v21 - v15));
      *(unsigned char *)(*(void *)(a1 + 264) + v15) = 107;
      ++*(_DWORD *)(a1 + 260);
      ++*(_DWORD *)(a1 + 296);
      glpSerializeLLVMValue(a1, SourceVariable);
      glpSerializeLLVMType(a1, v14);
      uint64_t SourceVariable = *(int *)(a1 + 308);
      *(_DWORD *)(a1 + 308) = SourceVariable + 1;
    }
  }
  return SourceVariable;
}

uint64_t glpBuildArrayElementPtrCst(uint64_t *a1, unint64_t a2, uint64_t a3, int a4)
{
  v12[2] = *MEMORY[0x263EF8340];
  uint64_t Gep = glpFindGep((uint64_t)a1, a2, 0, a4);
  if (!Gep)
  {
    uint64_t v9 = a1[65];
    if (!v9)
    {
      uint64_t v9 = glpLLVMConstIntCache((uint64_t)a1, a1[5], 0, 0);
      a1[65] = v9;
    }
    v12[0] = v9;
    v12[1] = glpLLVMConstIntCache((uint64_t)a1, a1[5], a4, 1);
    uint64_t inserted = glpLLVMGetInsertBlock((uint64_t)a1);
    glpLLVMPositionBuilderAtEnd((uint64_t)a1, a1[23]);
    uint64_t Gep = glpLLVMBuildGEP((uint64_t)a1, a3, v12, 2, "ptr");
    glpLLVMPositionBuilderAtEnd((uint64_t)a1, inserted);
    glpAddGep(a1, a2, 0, a4, Gep);
  }
  return Gep;
}

uint64_t glpLoadSourceVariable(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a3 + 51))
  {
    uint64_t v7 = glpLayoutObjectFind(*(uint64_t **)(a3 + 8), 35);
    *(_OWORD *)__str = 0u;
    long long v9 = 0u;
    snprintf(__str, 0x1FuLL, "user(slot%u)", *((_DWORD *)v7 + 4));
    return glpBuildInterpolateAt(a1, a2, a3, *(void *)(a3 + 48), __str, 0);
  }
  else
  {
    return glpLLVMBuildLoad((uint64_t)a1, a2, "srcPointer");
  }
}

uint64_t glpIsComponentAssigment(uint64_t result, unsigned int ***a2, _DWORD *a3, _DWORD *a4, int *a5, int a6)
{
  if (result)
  {
    uint64_t v11 = result;
    if (glpASTNodeGetKind(result) == 39)
    {
      uint64_t Lhs = glpBinaryOperatorNodeGetLhs(v11);
      Variableuint64_t Extra = (unsigned int **)glpLValueNodeGetVariableExtra(Lhs);
      uint64_t result = glpDerefNodeGetOffset(Lhs);
      if (!result) {
        return result;
      }
      Offsetuint64_t Expr = glpOffsetNodeGetOffsetExpr(result);
      if (OffsetExpr)
      {
        uint64_t v15 = OffsetExpr;
        uint64_t result = glpIsConstantNode(OffsetExpr);
        if (!result) {
          return result;
        }
        int v16 = *(_DWORD *)glpConstantNodeGetValue(v15);
      }
      else
      {
        int v16 = 0;
      }
      if (*a2)
      {
        if (*a2 == VariableExtra && !*a3 && *a4 == v16)
        {
LABEL_20:
          uint64_t result = glpGetVectorSwizzle(Lhs, a5);
          if (result)
          {
            *a2 = VariableExtra;
            *a3 = 0;
            uint64_t result = 1;
            *a4 = v16;
          }
          return result;
        }
      }
      else
      {
        int v17 = *VariableExtra;
        if (!glpTypeGetKind(*VariableExtra))
        {
          uint64_t PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)v17);
          int Category = glpPrimitiveTypeGetCategory(PrimitiveType);
          if (Category == 2 || Category == 3 && !a6 && glpPrimitiveTypeGetScalarType(PrimitiveType) != 62) {
            goto LABEL_20;
          }
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t glpProcessComponentWiseVectorAssignment(uint64_t *a1, unsigned int **a2, int a3, uint64_t *a4, unsigned int *a5, int a6, uint64_t a7)
{
  LODWORD(v120) = a3;
  uint64_t v121 = a2;
  uint64_t v123 = a1;
  uint64_t v125 = *MEMORY[0x263EF8340];
  uint64_t v9 = (a7 - 1);
  uint64_t v122 = a7;
  if ((int)a7 >= 1)
  {
    LODWORD(v119) = a6;
    unint64_t v10 = 0;
    unint64_t v124 = 0;
    uint64_t v11 = 1;
    unint64_t v12 = a7;
    while (1)
    {
      uint64_t Rhs = glpBinaryOperatorNodeGetRhs(a4[v10]);
      int Kind = glpASTNodeGetKind(Rhs);
      if (Kind == 3)
      {
        VectorElementuint64_t Expr = v11;
      }
      else
      {
        if (Kind != 81
          || (Variableuint64_t Extra = glpLValueNodeGetVariableExtra(Rhs),
              glpTypeGetKind(*(unsigned int **)VariableExtra))
          || (*(unsigned char *)(VariableExtra + 52) & 1) != 0
          || (unsigned int PrimitiveType = glpPrimitiveTypeGetPrimitiveType(*(void *)VariableExtra),
              glpPrimitiveTypeGetCategory(PrimitiveType) != 2)
          || (uint64_t Offset = glpDerefNodeGetOffset(Rhs),
              VectorElementuint64_t Expr = glpOffsetNodeGetVectorElementExpr(Offset),
              Offsetuint64_t Expr = glpOffsetNodeGetOffsetExpr(Offset),
              glpOffsetNodeGetBankIndex(Offset))
          || OffsetExpr
          || VectorElementExpr)
        {
          do
          {
            uint64_t v23 = *a4++;
            uint64_t v22 = v23;
            if (v119) {
              BOOL v24 = v9 == 0;
            }
            else {
              BOOL v24 = 0;
            }
            uint64_t v25 = v24;
            uint64_t v26 = glpLLVMCGNode(v123, v22, v25);
            --v9;
            --v12;
          }
          while (v12);
          return v26;
        }
        if (v124) {
          BOOL v20 = v124 == (uint64_t *)VariableExtra;
        }
        else {
          BOOL v20 = 1;
        }
        int v21 = v20;
        if ((v11 & 1) != 0 && v21)
        {
          glpOffsetNodeGetSwizzle(Offset);
          VectorElementuint64_t Expr = 1;
          unint64_t v124 = (uint64_t *)VariableExtra;
        }
      }
      ++v10;
      uint64_t v11 = VectorElementExpr;
      if (v10 >= v12) {
        goto LABEL_32;
      }
    }
  }
  unint64_t v124 = 0;
  LODWORD(VectorElementExpr) = 1;
LABEL_32:
  unsigned int v28 = v123;
  uint64_t v29 = glpLLVMGetVariablePointer((uint64_t)v123, (unint64_t)v121);
  int v30 = *v121;
  uint64_t v31 = glpTypeGetKind(*v121);
  if (v31)
  {
    int Length = 0;
  }
  else
  {
    uint64_t v33 = glpPrimitiveTypeGetPrimitiveType((uint64_t)v30);
    int Category = glpPrimitiveTypeGetCategory(v33);
    if (Category == 3)
    {
      uint64_t ColumnType = glpPrimitiveMatrixGetColumnType(v33);
      int Length = glpPrimitiveVectorGetLength(ColumnType);
      uint64_t v31 = glpBuildArrayElementPtrCst(v123, (unint64_t)v121, v29, v120);
      uint64_t v29 = v31;
    }
    else
    {
      if (Category != 2) {
        abort();
      }
      uint64_t v31 = glpPrimitiveVectorGetLength(v33);
      int Length = v31;
    }
  }
  LODWORD(v36) = v122;
  if (Length != v122) {
    goto LABEL_59;
  }
  if ((int)v122 < 1)
  {
    int v37 = 0;
  }
  else
  {
    int v37 = 0;
    unint64_t v38 = v122 + 1;
    do
    {
      uint64_t v39 = (v38 - 2);
      int v40 = 1 << a5[v39];
      if ((v40 & v37) != 0) {
        a4[v39] = 0;
      }
      v37 |= v40;
      --v38;
    }
    while (v38 > 1);
  }
  int v41 = ~(-1 << v36);
  if (VectorElementExpr && v37 == v41)
  {
    uint64_t v119 = &v116;
    uint64_t v120 = v29;
    uint64_t v42 = v36;
    size_t v43 = 8 * v36;
    MEMORY[0x270FA5388](v31);
    unsigned int v45 = (uint64_t *)((char *)&v116 - v44);
    if (v43 >= 0x200) {
      size_t v46 = 512;
    }
    else {
      size_t v46 = 8 * v36;
    }
    bzero(v45, v46);
    if ((int)v36 < 1)
    {
      int v48 = 0;
    }
    else
    {
      int v48 = 0;
      uint64_t v36 = v36;
      do
      {
        uint64_t v47 = *a4;
        if (*a4)
        {
          uint64_t v49 = glpBinaryOperatorNodeGetRhs(v47);
          v45[*a5] = v49;
          uint64_t v47 = glpASTNodeGetKind(v49);
          if (v47 == 3) {
            ++v48;
          }
        }
        ++a5;
        ++a4;
        --v36;
      }
      while (v36);
    }
    int v60 = v122;
    if (v48 == v122)
    {
      MEMORY[0x270FA5388](v47);
      int v62 = (char *)&v116 - ((v61 + 15) & 0xFFFFFFFF0);
      bzero(v62, v46);
      uint64_t v63 = v123;
      if (v60)
      {
        unint64_t v64 = v62;
        do
        {
          uint64_t v65 = *v45++;
          *v64++ = glpLLVMCGNode(v63, v65, 0);
          --v42;
        }
        while (v42);
      }
      uint64_t inserted = glpLLVMConstVectorCache((uint64_t)v63, v62, v122);
      uint64_t v67 = v120;
    }
    else
    {
      unsigned int v68 = v123;
      uint64_t v69 = v124;
      uint64_t v70 = glpLLVMGetVariablePointer((uint64_t)v123, (unint64_t)v124);
      uint64_t SourceVariable = glpLoadSourceVariable(v68, v70, (uint64_t)v69);
      uint64_t v71 = glpLLVMTypeOf((uint64_t)v68, SourceVariable);
      uint64_t v118 = &v116;
      MEMORY[0x270FA5388](v71);
      uint64_t v73 = (unsigned int **)((char *)&v116 - ((v72 + 15) & 0xFFFFFFFF0));
      bzero(v73, v46);
      bzero(v73, v43);
      uint64_t v74 = glpPrimitiveTypeGetPrimitiveType(*v69);
      uint64_t v75 = glpPrimitiveVectorGetLength(v74);
      uint64_t v76 = glpLLVMConstFromTypeCache((uint64_t)v68, 37, v71);
      int v77 = 0;
      unint64_t v124 = (uint64_t *)v75;
      uint64_t v121 = v73;
      if (v48)
      {
        int v78 = v122;
        if ((int)v75 >= v48)
        {
          uint64_t v116 = (uint64_t)&v116;
          MEMORY[0x270FA5388](v76);
          uint64_t v81 = (uint64_t *)((char *)&v116 - v80);
          if (v79 >= 0x200) {
            size_t v82 = 512;
          }
          else {
            size_t v82 = v79;
          }
          bzero((char *)&v116 - v80, v82);
          if (v78)
          {
            int v83 = 0;
            uint64_t v84 = v42;
            uint64_t v85 = v45;
            uint64_t v86 = v121;
            uint64_t v87 = v123;
            do
            {
              uint64_t v88 = *v85;
              if (glpASTNodeGetKind(*v85) == 3)
              {
                v81[v83] = glpLLVMCGNode(v87, v88, 0);
                unint64_t v89 = (v83 + v124);
                if (v89 > 7)
                {
                  uint64_t v91 = glpLLVMConstIntCache((uint64_t)v87, v87[5], (int)v89, 1);
                }
                else
                {
                  int v90 = &v87[v89];
                  uint64_t v91 = v90[65];
                  if (!v91)
                  {
                    unsigned int v92 = v90 + 65;
                    uint64_t v91 = glpLLVMConstIntCache((uint64_t)v123, v123[5], v89, 0);
                    *unsigned int v92 = v91;
                  }
                }
                *uint64_t v86 = (unsigned int *)v91;
                ++v83;
              }
              ++v86;
              ++v85;
              --v84;
            }
            while (v84);
          }
          uint64_t v93 = v123;
          uint64_t v75 = (uint64_t)v124;
          int v94 = v124 - v48;
          if ((int)v124 > v48)
          {
            uint64_t v95 = v48;
            do
            {
              uint64_t v96 = glpLLVMTypeOf((uint64_t)v93, *v81);
              v81[v95++] = glpLLVMConstFromTypeCache((uint64_t)v93, 37, v96);
              --v94;
            }
            while (v94);
          }
          uint64_t v76 = glpLLVMConstVectorCache((uint64_t)v93, v81, v75);
          int v77 = 1;
          uint64_t v73 = v121;
          int v78 = v122;
        }
      }
      else
      {
        int v78 = v122;
      }
      uint64_t v116 = v76;
      if (v78)
      {
        uint64_t v97 = 0;
        unint64_t v98 = (2 * v75 - 1);
        uint64_t v99 = &v123[v98 + 65];
        do
        {
          uint64_t v100 = v45[v97];
          if (glpASTNodeGetKind(v100) == 81)
          {
            uint64_t v101 = glpDerefNodeGetOffset(v100);
            unint64_t v102 = (glpOffsetNodeGetSwizzle(v101) >> 3) & 3;
            uint64_t v103 = &v123[v102];
            uint64_t v104 = v103[65];
            if (!v104)
            {
              uint64_t v105 = v103 + 65;
              uint64_t v104 = glpLLVMConstIntCache((uint64_t)v123, v123[5], v102, 0);
              *uint64_t v105 = v104;
              uint64_t v73 = v121;
            }
            v73[v97] = (unsigned int *)v104;
            if (v97 != v102) {
              int v77 = 1;
            }
          }
          else if (!v73[v97])
          {
            if (v98 > 7)
            {
              uint64_t v106 = glpLLVMConstIntCache((uint64_t)v123, v123[5], (int)v98, 1);
            }
            else
            {
              uint64_t v106 = *v99;
              if (!*v99)
              {
                uint64_t v106 = glpLLVMConstIntCache((uint64_t)v123, v123[5], v98, 0);
                *uint64_t v99 = v106;
              }
            }
            v73[v97] = (unsigned int *)v106;
            int v77 = 1;
          }
          ++v97;
        }
        while (v42 != v97);
      }
      int v107 = v122;
      int v108 = (int)v124;
      if (v77 || v124 != v122)
      {
        uint64_t v63 = v123;
        uint64_t v109 = glpLLVMConstVectorCache((uint64_t)v123, v121, v122);
        uint64_t inserted = glpLLVMBuildShuffleVector((uint64_t)v63, SourceVariable, v116, v109, "swz");
        uint64_t v67 = v120;
      }
      else
      {
        uint64_t v63 = v123;
        uint64_t v67 = v120;
        uint64_t inserted = SourceVariable;
      }
      if (v48 && v108 < v48 && v107)
      {
        unint64_t v110 = 0;
        do
        {
          uint64_t v111 = v45[v110];
          if (glpASTNodeGetKind(v111) == 3)
          {
            uint64_t v112 = glpLLVMCGNode(v63, v111, 0);
            if (v110 > 7)
            {
              uint64_t v114 = glpLLVMConstIntCache((uint64_t)v63, v63[5], v110, 1);
            }
            else
            {
              uint64_t v113 = &v63[v110];
              uint64_t v114 = v113[65];
              if (!v114)
              {
                uint64_t v114 = glpLLVMConstIntCache((uint64_t)v63, v63[5], v110, 0);
                v113[65] = v114;
              }
            }
            uint64_t inserted = glpLLVMBuildInsertElement((uint64_t)v63, inserted, v112, v114, "");
          }
          ++v110;
        }
        while (v42 != v110);
      }
    }
    glpLLVMBuildStore((uint64_t)v63, inserted, v67);
    return 0;
  }
  if (v37 == v41)
  {
    uint64_t v58 = glpLLVMTypeOf((uint64_t)v28, v29);
    uint64_t v59 = glpLLVMGetElementType((uint64_t)v28, v58);
    uint64_t v50 = glpLLVMConstFromTypeCache((uint64_t)v28, 37, v59);
  }
  else
  {
LABEL_59:
    uint64_t v50 = glpLLVMBuildLoad((uint64_t)v28, v29, "destVector");
  }
  uint64_t v27 = v50;
  if ((int)v36 >= 1)
  {
    uint64_t v36 = v36;
    do
    {
      uint64_t v51 = glpBinaryOperatorNodeGetRhs(*a4);
      uint64_t v52 = glpLLVMCGNode(v28, v51, 1);
      unsigned int v54 = *a5++;
      unint64_t v53 = v54;
      if (v54 > 7)
      {
        uint64_t v56 = glpLLVMConstIntCache((uint64_t)v28, v28[5], (int)v53, 1);
      }
      else
      {
        int v55 = &v28[v53];
        uint64_t v56 = v55[65];
        if (!v56)
        {
          uint64_t v57 = v55 + 65;
          uint64_t v56 = glpLLVMConstIntCache((uint64_t)v28, v28[5], v53, 0);
          *uint64_t v57 = v56;
        }
      }
      uint64_t v27 = glpLLVMBuildInsertElement((uint64_t)v28, v27, v52, v56, "res");
      ++a4;
      --v36;
    }
    while (v36);
  }
  glpLLVMBuildStore((uint64_t)v28, v27, v29);
  return v27;
}

uint64_t glpGetVectorSwizzle(uint64_t a1, int *a2)
{
  uint64_t result = glpDerefNodeGetOffset(a1);
  if (result)
  {
    uint64_t v4 = result;
    if (glpOffsetNodeGetVectorElementExpr(result)) {
      return 0;
    }
    unsigned int Swizzle = glpOffsetNodeGetSwizzle(v4);
    if ((Swizzle & 7) != 1)
    {
      return 0;
    }
    else
    {
      *a2 = (Swizzle >> 3) & 3;
      return 1;
    }
  }
  return result;
}

uint64_t glpLLVMCGGlobalVariable(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 52) & 0x980) != 0) {
    *(_WORD *)(a1 + 326) = 1;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 8);
  if (!v4)
  {
    int v15 = 0;
    int v16 = 0;
    goto LABEL_41;
  }
  int v5 = glpLayoutObjectFind(v4, 33);
  if (v5)
  {
    int v6 = *((_DWORD *)v5 + 4);
    switch(v6)
    {
      case 5:
        uint64_t v7 = (_DWORD *)(a1 + 692);
        uint64_t v8 = *(unsigned int *)(a1 + 692);
        int v17 = *(_DWORD *)(a1 + 688);
        if ((int)v8 + 1 <= v17)
        {
          int v21 = *(char **)(a1 + 696);
          int v22 = *(_DWORD *)(a1 + 692);
        }
        else
        {
          if (v17 <= 1) {
            int v17 = 1;
          }
          int v18 = 2 * v17;
          if (v18 <= (int)v8 + 1) {
            unsigned int v19 = v8 + 1;
          }
          else {
            unsigned int v19 = v18;
          }
          BOOL v20 = *(void **)(a1 + 152);
          int v21 = (char *)((uint64_t (*)(void, uint64_t, const char *))v20[1])(*v20, 8 * v19, "Vector Storage (GLPVariableObject *, growth)");
          memcpy(v21, *(const void **)(a1 + 696), 8 * *(unsigned int *)(a1 + 692));
          ((void (*)(void, void))v20[3])(*v20, *(void *)(a1 + 696));
          *(_DWORD *)(a1 + 688) = v19;
          *(void *)(a1 + 696) = v21;
          int v22 = *(_DWORD *)(a1 + 692);
        }
        uint64_t v23 = (void *)(a1 + 696);
        memmove(&v21[8 * v8 + 8], &v21[8 * v8], 8 * (v22 - v8));
        int v16 = 0;
        int v15 = 1;
        goto LABEL_38;
      case 3:
        if ((~*(unsigned __int16 *)(a1 + 832) & 3) != 0)
        {
          uint64_t v7 = (_DWORD *)(a1 + 692);
          uint64_t v8 = *(unsigned int *)(a1 + 692);
          int v24 = *(_DWORD *)(a1 + 688);
          if ((int)v8 + 1 <= v24)
          {
            unsigned int v28 = *(char **)(a1 + 696);
            int v29 = *(_DWORD *)(a1 + 692);
          }
          else
          {
            if (v24 <= 1) {
              int v24 = 1;
            }
            int v25 = 2 * v24;
            if (v25 <= (int)v8 + 1) {
              unsigned int v26 = v8 + 1;
            }
            else {
              unsigned int v26 = v25;
            }
            uint64_t v27 = *(void **)(a1 + 152);
            unsigned int v28 = (char *)((uint64_t (*)(void, uint64_t, const char *))v27[1])(*v27, 8 * v26, "Vector Storage (GLPVariableObject *, growth)");
            memcpy(v28, *(const void **)(a1 + 696), 8 * *(unsigned int *)(a1 + 692));
            ((void (*)(void, void))v27[3])(*v27, *(void *)(a1 + 696));
            *(_DWORD *)(a1 + 688) = v26;
            *(void *)(a1 + 696) = v28;
            int v29 = *(_DWORD *)(a1 + 692);
          }
          uint64_t v23 = (void *)(a1 + 696);
          memmove(&v28[8 * v8 + 8], &v28[8 * v8], 8 * (v29 - v8));
          int v15 = 0;
          int v16 = 0;
          goto LABEL_38;
        }
        break;
      case 0:
        uint64_t v7 = (_DWORD *)(a1 + 676);
        uint64_t v8 = *(unsigned int *)(a1 + 676);
        int v9 = *(_DWORD *)(a1 + 672);
        if ((int)v8 + 1 <= v9)
        {
          uint64_t v13 = *(char **)(a1 + 680);
          int v14 = *(_DWORD *)(a1 + 676);
        }
        else
        {
          if (v9 <= 1) {
            int v9 = 1;
          }
          int v10 = 2 * v9;
          if (v10 <= (int)v8 + 1) {
            unsigned int v11 = v8 + 1;
          }
          else {
            unsigned int v11 = v10;
          }
          unint64_t v12 = *(void **)(a1 + 152);
          uint64_t v13 = (char *)((uint64_t (*)(void, uint64_t, const char *))v12[1])(*v12, 8 * v11, "Vector Storage (GLPVariableObject *, growth)");
          memcpy(v13, *(const void **)(a1 + 680), 8 * *(unsigned int *)(a1 + 676));
          ((void (*)(void, void))v12[3])(*v12, *(void *)(a1 + 680));
          *(_DWORD *)(a1 + 672) = v11;
          *(void *)(a1 + 680) = v13;
          int v14 = *(_DWORD *)(a1 + 676);
        }
        uint64_t v23 = (void *)(a1 + 680);
        memmove(&v13[8 * v8 + 8], &v13[8 * v8], 8 * (v14 - v8));
        int v15 = 0;
        int v16 = 1;
LABEL_38:
        *(void *)(*v23 + 8 * v8) = a2;
        ++*v7;
        goto LABEL_39;
    }
  }
  int v15 = 0;
  int v16 = 0;
LABEL_39:
  uint64_t result = (uint64_t)glpLayoutObjectFind(*(uint64_t **)(a2 + 8), 46);
  if (!result || (*(_DWORD *)(result + 16) - 9) >= 2)
  {
LABEL_41:
    uint64_t v31 = glpPrecisionIndexFromSAFlags(*(void *)(a2 + 48));
    uint64_t v32 = glpTypeToLLVMType((void *)a1, *(unsigned int **)a2, v31, (void *)a2);
    uint64_t v33 = *(uint64_t **)(a2 + 8);
    if (v33) {
      uint64_t v33 = glpLayoutObjectFind(v33, 83);
    }
    int v34 = *(_DWORD *)(a1 + 320);
    switch(v34)
    {
      case 3:
        uint64_t v36 = 0;
        if (v16 && !v33)
        {
          uint64_t v36 = 0;
          uint64_t v37 = *(unsigned int *)(a1 + 792);
          goto LABEL_61;
        }
        break;
      case 2:
        if (!v16) {
          goto LABEL_62;
        }
        uint64_t v36 = 0;
        unsigned int v38 = *(_DWORD *)(*(void *)(a1 + 128) + 320);
        if (v38) {
          uint64_t v37 = v38;
        }
        else {
          uint64_t v37 = 32;
        }
        if ((*(unsigned char *)(a2 + 53) & 2) == 0 && !v33)
        {
LABEL_61:
          uint64_t v32 = glpLLVMArrayType(a1, v32, v37);
          int v35 = 4;
LABEL_64:
          uint64_t result = glpLLVMPointerType(a1, v32, v36);
          uint64_t v39 = *(void *)(a2 + 144);
          *(void *)uint64_t v39 = result;
          *(_DWORD *)(v39 + 32) = *(_DWORD *)(v39 + 32) & 0xFFFFFFFB | v35;
          return result;
        }
        break;
      case 1:
        int v35 = 0;
        if (v15) {
          uint64_t v36 = 3;
        }
        else {
          uint64_t v36 = 0;
        }
        if (!v16 || v33) {
          goto LABEL_64;
        }
        uint64_t v37 = 32;
        goto LABEL_61;
      default:
LABEL_62:
        uint64_t v36 = 0;
        int v35 = 0;
        goto LABEL_64;
    }
    int v35 = 0;
    goto LABEL_64;
  }
  return result;
}

uint64_t glpTypeToLLVMType(void *a1, unsigned int *a2, uint64_t a3, void *a4)
{
  v30[1] = *MEMORY[0x263EF8340];
  if (a4) {
    *(void *)(a4[18] + 24) = 0;
  }
  switch(glpTypeGetKind(a2))
  {
    case 0u:
      uint64_t PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)a2);
      if (glpPrimitiveTypeGetCategory(PrimitiveType) == 3
        && glpPrimitiveTypeGetScalarType(PrimitiveType) == 62)
      {
        goto LABEL_24;
      }
      uint64_t v9 = glpPrimitiveTypeToLLVMType(a1, PrimitiveType, a3);
      goto LABEL_25;
    case 1u:
      uint64_t ElementCount = glpAggregateTypeGetElementCount((uint64_t)a2);
      uint64_t v11 = ElementCount;
      if (ElementCount)
      {
        unsigned int v12 = 0;
        int v13 = 1;
        do
        {
          uint64_t ElementType = (_DWORD *)glpAggregateTypeGetElementType((uint64_t)a2, v12);
          uint64_t ElementCount = glpTypeIsAtomic(ElementType);
          if (ElementCount)
          {
            uint64_t ElementCount = glpPrimitiveTypeGetPrimitiveType((uint64_t)ElementType);
            if ((ElementCount & 0xFFFFFFFE) == 0x40) {
              int v13 = 0;
            }
          }
          else
          {
            int v13 = 0;
          }
          ++v12;
        }
        while (v11 != v12);
        if (!v13) {
          goto LABEL_24;
        }
      }
      MEMORY[0x270FA5388](ElementCount);
      int v17 = (void *)((char *)v30 - v16);
      if (v15 >= 0x200) {
        size_t v18 = 512;
      }
      else {
        size_t v18 = v15;
      }
      bzero((char *)v30 - v16, v18);
      if (v11)
      {
        uint64_t v19 = 0;
        do
        {
          uint64_t v20 = glpAggregateTypeGetElementType((uint64_t)a2, v19);
          char ElementFlags = glpAggregateTypeGetElementFlags((uint64_t)a2, v19);
          uint64_t v22 = glpPrecisionIndexFromSAFlags(ElementFlags);
          v17[v19++] = glpTypeToLLVMType(a1, v20, v22, a4);
        }
        while (v11 != v19);
      }
      uint64_t v23 = glpLLVMStructTypeInContext((uint64_t)a1, v17, v11);
      if (!a4) {
        goto LABEL_23;
      }
      goto LABEL_26;
    case 2u:
LABEL_24:
      uint64_t v9 = glpLLVMGetAggregateType(a1, a2, a3, (uint64_t)a4);
LABEL_25:
      uint64_t v23 = v9;
      if (!a4)
      {
LABEL_23:
        uint64_t v24 = 0;
        goto LABEL_32;
      }
LABEL_26:
      int v25 = (uint64_t *)a4[1];
      if (!v25 || (unsigned int v26 = glpLayoutObjectFind(v25, 34)) == 0)
      {
        uint64_t v24 = a4[6];
LABEL_32:
        unint64_t v28 = v24 & 0xFFFFFFFFFEFFFFFFLL;
        a4[6] = v28;
        if ((v28 & 0x1000000) == 0) {
          return v23;
        }
        goto LABEL_33;
      }
      uint64_t v24 = a4[6];
      if (*((_DWORD *)v26 + 4) != 28) {
        goto LABEL_32;
      }
      if ((v24 & 0x1000000) == 0) {
        return v23;
      }
LABEL_33:
      *(_DWORD *)(a4[18] + 24) = glpPrimitiveTypeGetPrimitiveType((uint64_t)a2);
      uint64_t v29 = glpLLVMGetNamedType((uint64_t)a1, "struct._interpolant_t");
      return glpLLVMPointerType((uint64_t)a1, v29, 1);
    default:
      abort();
  }
}

uint64_t glpLLVMGetAggregateType(void *a1, unsigned int *a2, unsigned int a3, uint64_t a4)
{
  unsigned int v19 = a3;
  unsigned int v20 = 1;
  uint64_t v7 = glpLLVMGetMinCommonType((uint64_t)a2, (int *)&v20, &v19);
  if (glpTypeGetKind(a2) == 3)
  {
    int ElementCount = glpBankTypeGetElementCount((uint64_t)a2);
    uint64_t ElementType = glpBankTypeGetElementType((uint64_t)a2);
    unsigned int v10 = glpABIGetTypeSize(0, ElementType, 0);
    uint64_t Size = glpTypeSizeGetSize(v10) * ElementCount;
  }
  else
  {
    unsigned int v12 = glpABIGetTypeSize(0, (uint64_t)a2, 0);
    uint64_t Size = glpTypeSizeGetSize(v12);
  }
  uint64_t v13 = v20;
  int VectorType = glpGetVectorType(v7, v20);
  uint64_t v15 = *(void *)(a4 + 144);
  uint64_t v16 = v19;
  *(_DWORD *)(v15 + 24) = VectorType;
  *(_DWORD *)(v15 + 28) = v16;
  uint64_t v17 = glpPrimitiveTypeToLLVMType(a1, v7, v16);
  if (v13 >= 2) {
    uint64_t v17 = glpLLVMVectorType((uint64_t)a1, v17, v13);
  }

  return glpLLVMArrayType((uint64_t)a1, v17, Size);
}

uint64_t glpLLVMBuildFunctionType(uint64_t a1, uint64_t a2, int a3, int a4, int a5, char a6)
{
  uint64_t v88 = *MEMORY[0x263EF8340];
  if ((a6 & 2) != 0)
  {
    int v9 = *(_DWORD *)(a1 + 708);
    if ((a6 & 4) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    int v9 = 0;
    if ((a6 & 4) != 0)
    {
LABEL_3:
      int v10 = *(_DWORD *)(a1 + 724);
      goto LABEL_6;
    }
  }
  int v10 = 0;
LABEL_6:
  uint64_t v11 = *(void *)(a1 + 88);
  int v12 = a5 + a4;
  __int16 v13 = *(_WORD *)(a1 + 832);
  BOOL v15 = (v13 & 2) == 0 || v10 < 1;
  BOOL v16 = (v13 & 1) == 0;
  int v17 = (v13 & 1) == 0 || v15;
  int v85 = v17;
  int v18 = !v16 && !v15;
  if ((a6 & 8) != 0) {
    int v19 = *(_DWORD *)(a1 + 596);
  }
  else {
    int v19 = 0;
  }
  int v84 = a6 & 1;
  int v86 = v19;
  int v81 = v84 + v12 + v9 + v10 + v18;
  uint64_t v20 = (v81 + 2 * v19);
  MEMORY[0x270FA5388](a1);
  uint64_t v23 = (uint64_t *)((char *)&v77 - v22);
  if (v21 >= 0x200) {
    size_t v24 = 512;
  }
  else {
    size_t v24 = v21;
  }
  bzero((char *)&v77 - v22, v24);
  uint64_t v87 = v23;
  if (a3)
  {
    int v82 = v12;
    uint64_t v83 = v20;
    uint64_t v79 = v11;
    uint64_t v26 = *(unsigned int *)(a1 + 676);
    if ((int)v26 >= 1)
    {
      uint64_t v27 = 0;
      int v28 = 0;
      uint64_t v29 = 8 * v26;
      while (1)
      {
        uint64_t v30 = *(void *)(*(void *)(a1 + 680) + v27);
        uint64_t v31 = glpLayoutObjectFind(*(uint64_t **)(v30 + 8), 34);
        uint64_t v25 = glpPrecisionIndexFromSAFlags(*(void *)(v30 + 48));
        int v32 = *(_DWORD *)(a1 + 320);
        if ((v32 - 1) >= 3)
        {
          if (v32 == 4)
          {
            if (*((_DWORD *)v31 + 4) == 24) {
              goto LABEL_33;
            }
LABEL_41:
            uint64_t v25 = glpTypeToLLVMType((void *)a1, *(unsigned int **)v30, v25, (void *)v30);
            v23[v28] = v25;
            goto LABEL_32;
          }
          if (v32) {
            goto LABEL_33;
          }
          int v35 = *((_DWORD *)v31 + 4);
          if ((v35 - 17) < 2)
          {
            if ((*(_WORD *)(a1 + 832) & 1) == 0) {
              goto LABEL_33;
            }
            goto LABEL_41;
          }
          if (v35 != 28) {
            goto LABEL_33;
          }
          uint64_t v25 = glpTypeToLLVMType((void *)a1, *(unsigned int **)v30, v25, (void *)v30);
          uint64_t v34 = v25;
          if ((*(_WORD *)(a1 + 832) & 1) == 0)
          {
            uint64_t v25 = glpLLVMPointerType(a1, v25, 1);
            goto LABEL_30;
          }
        }
        else
        {
          uint64_t v33 = *(void *)(v30 + 144);
          uint64_t v34 = *(void *)v33;
          if ((*(unsigned char *)(v33 + 32) & 4) == 0)
          {
            uint64_t v25 = glpLLVMGetElementType(a1, v34);
LABEL_30:
            uint64_t v34 = v25;
          }
        }
        v23[v28] = v34;
LABEL_32:
        ++v28;
LABEL_33:
        v27 += 8;
        if (v29 == v27) {
          goto LABEL_55;
        }
      }
    }
    int v28 = 0;
LABEL_55:
    if (*(_DWORD *)(a1 + 804)) {
      v23[v28++] = *(void *)(a1 + 40);
    }
    if (*(_DWORD *)(a1 + 812)) {
      v23[v28++] = *(void *)(a1 + 40);
    }
    if (*(_DWORD *)(a1 + 820)) {
      v23[v28++] = *(void *)(a1 + 40);
    }
    uint64_t v80 = &v77;
    uint64_t v45 = *(unsigned int *)(a1 + 692);
    size_t v46 = 8 * v45;
    MEMORY[0x270FA5388](v25);
    uint64_t v47 = (char *)&v77 - ((8 * v45 + 15) & 0xFFFFFFFF0);
    if ((unint64_t)(8 * v45) >= 0x200) {
      size_t v48 = 512;
    }
    else {
      size_t v48 = 8 * v45;
    }
    bzero((char *)&v77 - ((v46 + 15) & 0xFFFFFFFF0), v48);
    uint64_t v78 = v45;
    if ((int)v45 >= 1)
    {
      uint64_t v49 = 0;
      do
      {
        uint64_t v50 = *(void *)(*(void *)(a1 + 696) + v49);
        uint64_t v51 = glpPrecisionIndexFromSAFlags(*(void *)(v50 + 48));
        switch(*(_DWORD *)(a1 + 320))
        {
          case 0:
          case 2:
            if ((*(_WORD *)(a1 + 832) & 1) == 0) {
              goto LABEL_81;
            }
            uint64_t v52 = glpLayoutObjectFind(*(uint64_t **)(v50 + 8), 69);
            unint64_t v53 = glpLayoutObjectFind(*(uint64_t **)(v50 + 8), 70);
            if (v53)
            {
              BOOL v54 = *((_DWORD *)v53 + 4) == 0;
              if (!v52) {
                goto LABEL_81;
              }
            }
            else
            {
              BOOL v54 = 1;
              if (!v52) {
                goto LABEL_81;
              }
            }
            if (*((_DWORD *)v52 + 4) != 5) {
              BOOL v54 = 0;
            }
            if (!v54) {
              goto LABEL_81;
            }
            uint64_t v55 = glpPrimitiveTypeToLLVMType((void *)a1, 4, v51);
            goto LABEL_82;
          case 1:
          case 3:
            uint64_t v55 = **(void **)(v50 + 144);
            goto LABEL_82;
          case 4:
            if (*((_DWORD *)glpLayoutObjectFind(*(uint64_t **)(v50 + 8), 68) + 4) != 4
              || (uint64_t PrimitiveType = glpPrimitiveTypeGetPrimitiveType(*(void *)v50),
                  glpPrimitiveTypeGetCategory(PrimitiveType) == 2)
              && (int)glpPrimitiveVectorGetLength(PrimitiveType) > 3)
            {
LABEL_81:
              uint64_t v55 = glpTypeToLLVMType((void *)a1, *(unsigned int **)v50, v51, (void *)v50);
            }
            else
            {
              uint64_t ScalarType = glpPrimitiveTypeGetScalarType(PrimitiveType);
              uint64_t v58 = glpPrimitiveTypeToLLVMType((void *)a1, ScalarType, v51);
              uint64_t v55 = glpLLVMVectorType(a1, v58, 4);
            }
LABEL_82:
            *(void *)&v47[v49] = v55;
            break;
          default:
            break;
        }
        v49 += 8;
      }
      while (v46 != v49);
    }
    if ((*(_DWORD *)(a1 + 320) | 2) == 3)
    {
      uint64_t v23 = v87;
      memcpy(&v87[v28], (char *)&v77 - ((v46 + 15) & 0xFFFFFFFF0), v46);
      uint64_t v59 = 0;
      uint64_t v11 = v79;
      uint64_t v20 = v83;
    }
    else
    {
      uint64_t v20 = v83;
      uint64_t v23 = v87;
      if (v78)
      {
        uint64_t v59 = glpLLVMStructTypeInContext(a1, (uint64_t *)((char *)&v77 - ((v46 + 15) & 0xFFFFFFFF0)), v78);
        uint64_t v11 = v59;
      }
      else
      {
        uint64_t v59 = 0;
        uint64_t v11 = v79;
      }
    }
    int v12 = v82;
    *(void *)(a1 + 200) = v59;
  }
  else
  {
    unint64_t v36 = *(unsigned int *)(a2 + 32);
    if (v36)
    {
      int v82 = v12;
      uint64_t v83 = v20;
      uint64_t v37 = v11;
      uint64_t v38 = 0;
      for (unint64_t i = 0; i < v36; ++i)
      {
        uint64_t v40 = *(void *)(a2 + 40);
        uint64_t v41 = *(void *)(v40 + v38);
        if (v41)
        {
          uint64_t v42 = *(void *)(v40 + v38 + 8);
          size_t v43 = *(uint64_t **)(v42 + 144);
          if (!v43)
          {
            glpLLVMAllocVariableExtra(*(void *)(a1 + 152), v42);
            glpLLVMCGGlobalVariable(a1, v42);
            size_t v43 = *(uint64_t **)(v42 + 144);
            unint64_t v36 = *(unsigned int *)(a2 + 32);
          }
          uint64_t v44 = ((v41 << 32) - 0x100000000) >> 29;
          uint64_t v23 = v87;
          *(uint64_t *)((char *)v87 + v44) = *v43;
        }
        else
        {
          uint64_t v23 = v87;
        }
        v38 += 24;
      }
      uint64_t v11 = v37;
      uint64_t v20 = v83;
      int v12 = v82;
    }
  }
  uint64_t v60 = glpLLVMVectorType(a1, *(void *)(a1 + 72), 4);
  if (v84) {
    v23[v12++] = glpLLVMPointerType(a1, v60, 2);
  }
  if (v9 >= 1)
  {
    int v61 = v12;
    int v62 = &v23[v12];
    int v63 = v9 + v61;
    do
    {
      *v62++ = glpLLVMPointerType(a1, v60, 2);
      --v9;
    }
    while (v9);
    int v12 = v63;
  }
  if (v10 >= 1)
  {
    unint64_t v64 = &v23[v12];
    v12 += v10;
    do
    {
      *v64++ = glpLLVMPointerType(a1, v60, 1);
      --v10;
    }
    while (v10);
  }
  if ((v85 & 1) == 0) {
    v23[v12] = glpLLVMPointerType(a1, *(void *)(a1 + 40), 1);
  }
  if (v86 >= 1)
  {
    uint64_t v65 = v86;
    unint64_t v66 = &v23[v86 + v81];
    uint64_t v67 = &v23[v81];
    unsigned int v68 = (uint64_t *)(*(void *)(a1 + 600) + 24);
    do
    {
      *v67++ = *v68;
      *v66++ = *(v68 - 1);
      v68 += 6;
      --v65;
    }
    while (v65);
  }
  uint64_t v69 = *(unsigned int *)(a1 + 260);
  int v70 = v69 + 1;
  int v71 = *(_DWORD *)(a1 + 256);
  if ((int)v69 + 1 <= v71)
  {
    uint64_t v74 = *(char **)(a1 + 264);
    int v75 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v71 <= 1) {
      int v71 = 1;
    }
    int v72 = 2 * v71;
    if (v72 <= v70) {
      uint64_t v73 = v70;
    }
    else {
      uint64_t v73 = v72;
    }
    uint64_t v74 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v73, "Vector Storage (uint8_t, growth)");
    memcpy(v74, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v73;
    *(void *)(a1 + 264) = v74;
    int v75 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v74[v69 + 1], &v74[v69], (v75 - v69));
  *(unsigned char *)(*(void *)(a1 + 264) + v69) = 11;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMType(a1, v11);
  glpSerializeArrayOfLLVMTypes(a1, v23, v20);
  uint64_t result = *(int *)(a1 + 304);
  *(_DWORD *)(a1 + 304) = result + 1;
  return result;
}

uint64_t glpMetalGetArgTypeNameFromASTType(char *a1, unsigned int *a2, int a3, int a4)
{
  uint64_t result = glpTypeGetKind(a2);
  if (!result)
  {
    uint64_t PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)a2);
    uint64_t result = glpPrimitiveTypeGetCategory(PrimitiveType);
    switch((int)result)
    {
      case 0:
        uint64_t result = snprintf_l(a1, 0x200uLL, 0, "void");
        break;
      case 1:
        glpScalarTypeGetMetalArgType(PrimitiveType, a3, a4);
        uint64_t result = snprintf_l(a1, 0x200uLL, 0, "%s");
        break;
      case 2:
        glpPrimitiveVectorGetLength(PrimitiveType);
        int ElementType = glpPrimitiveVectorGetElementType(PrimitiveType);
        glpScalarTypeGetMetalArgType(ElementType, a3, 0);
        uint64_t result = snprintf_l(a1, 0x200uLL, 0, "%s%u");
        break;
      case 3:
        int ColumnType = glpPrimitiveMatrixGetColumnType(PrimitiveType);
        glpPrimitiveMatrixGetColumns(PrimitiveType);
        glpPrimitiveMatrixGetRows(PrimitiveType);
        glpScalarTypeGetMetalArgType(ColumnType, a3, 0);
        uint64_t result = snprintf_l(a1, 0x200uLL, 0, "%s%ux%u");
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t glpLLVMVertexGeometryMetadata(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  int v6 = glpLayoutObjectFind(*(uint64_t **)(a2 + 8), 68);
  memset(v39, 0, sizeof(v39));
  if ((*(_DWORD *)(a1 + 320) | 2) == 3)
  {
    if (a3 > 7)
    {
      uint64_t v8 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), (int)a3, 1);
    }
    else
    {
      uint64_t v7 = a1 + 8 * a3;
      uint64_t v8 = *(void *)(v7 + 520);
      if (!v8)
      {
        unint64_t v9 = a3;
        int v10 = (uint64_t *)(v7 + 520);
        uint64_t v8 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), v9, 0);
        *int v10 = v8;
      }
    }
    *(void *)&v39[0] = v8;
    *((void *)&v39[0] + 1) = glpLLVMStringMetadata(a1, "air.geometry_output");
    uint64_t v11 = 2;
  }
  else
  {
    uint64_t v11 = 0;
  }
  switch(*((_DWORD *)v6 + 4))
  {
    case 1:
      int v12 = "air.position";
      goto LABEL_25;
    case 3:
      int v12 = "air.point_size";
      goto LABEL_25;
    case 4:
      int v13 = *((_DWORD *)glpLayoutObjectFind(*(uint64_t **)(a2 + 8), 71) + 4);
      int v14 = "air.back_color";
      BOOL v15 = "air.front_color";
      goto LABEL_13;
    case 5:
      int v13 = *((_DWORD *)glpLayoutObjectFind(*(uint64_t **)(a2 + 8), 74) + 4);
      int v14 = "air.back_secondary_color";
      BOOL v15 = "air.front_secondary_color";
LABEL_13:
      if (v13) {
        int v12 = v14;
      }
      else {
        int v12 = v15;
      }
      goto LABEL_25;
    case 9:
      *(void *)(a1 + 744) |= 4uLL;
      int v12 = "air.clip_vertex";
      goto LABEL_25;
    case 0xA:
      BOOL v16 = glpLayoutObjectFind(*(uint64_t **)(a2 + 8), 75);
      *((void *)v39 + v11) = glpLLVMStringMetadata(a1, "air.clip_distance");
      unint64_t v17 = *((unsigned int *)v16 + 4);
      if (v17 > 7)
      {
        uint64_t v19 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), (int)v17, 1);
      }
      else
      {
        unint64_t v18 = a1 + 8 * v17;
        uint64_t v19 = *(void *)(v18 + 520);
        if (!v19)
        {
          uint64_t v20 = (uint64_t *)(v18 + 520);
          uint64_t v19 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), v17, 0);
          *uint64_t v20 = v19;
        }
      }
      *((void *)v39 + (v11 | 1)) = v19;
      goto LABEL_66;
    case 0xB:
      int v12 = "air.primitive_id";
      goto LABEL_25;
    case 0xC:
      int v12 = "air.render_target_array_index";
      goto LABEL_25;
    case 0xD:
      int v12 = "air.edge_tessellation_factor";
      goto LABEL_25;
    case 0xE:
      int v12 = "air.inside_tessellation_factor";
      goto LABEL_25;
    case 0x10:
      int v12 = "air.viewport_array_index";
LABEL_25:
      *((void *)v39 + v11) = glpLLVMStringMetadata(a1, v12);
      uint64_t v11 = v11 | 1;
      break;
    case 0x11:
      uint64_t v22 = glpLayoutObjectFind(*(uint64_t **)(a2 + 8), 69);
      uint64_t v23 = *(void *)(a2 + 48);
      size_t v24 = "air.no_perspective";
      if ((v23 & 0x2000000000) == 0) {
        size_t v24 = "air.perspective";
      }
      if ((v23 & 0x1000000000) != 0) {
        uint64_t v25 = "air.flat";
      }
      else {
        uint64_t v25 = v24;
      }
      uint64_t v26 = "air.center";
      if ((v23 & 0x1000000000) == 0)
      {
        if ((v23 & 0x4000000000) != 0)
        {
          uint64_t v26 = "air.centroid";
        }
        else if ((v23 & 0x40000000000) != 0)
        {
          uint64_t v26 = "air.sample";
        }
      }
      if ((*(_DWORD *)(a1 + 320) | 2) == 2)
      {
        *((void *)v39 + v11) = glpLLVMStringMetadata(a1, "air.vertex_output");
        LODWORD(v11) = v11 | 1;
      }
      if (*(_WORD *)(a1 + 832))
      {
        *(_OWORD *)__str = 0u;
        long long v38 = 0u;
        unsigned int v31 = *((_DWORD *)v22 + 4);
        int v32 = glpLayoutObjectFind(*(uint64_t **)(a2 + 8), 70);
        if (v32) {
          BOOL v33 = *((_DWORD *)v32 + 4) == 0;
        }
        else {
          BOOL v33 = 1;
        }
        if (v33 && v31 >= 8 && v31 <= 0xF)
        {
          snprintf(__str, 0x1FuLL, "user(tex_coord%u)");
        }
        else if ((*(unsigned char *)(a2 + 53) & 2) != 0)
        {
          snprintf(__str, 0x1FuLL, "user(patch%u)");
        }
        else
        {
          snprintf(__str, 0x1FuLL, "user(slot%u)");
        }
        uint64_t v34 = (v11 + 1);
        *((void *)v39 + v11) = glpLLVMStringMetadata(a1, __str);
        if (*(_DWORD *)(a1 + 320) == 1)
        {
          int ElementType = *(unsigned int **)a2;
          if (glpTypeGetKind(ElementType) == 3) {
            int ElementType = (unsigned int *)glpBankTypeGetElementType((uint64_t)ElementType);
          }
          *((void *)v39 + v34) = glpLLVMStringMetadata(a1, "air.vec4_size");
          unsigned int Vec4s_0 = glpTypeGetVec4s_0((uint64_t)ElementType);
          *((void *)v39 + (v11 + 2)) = glpGetConstantInt32(a1, Vec4s_0);
          uint64_t v34 = (v11 + 3);
        }
        uint64_t v11 = v34;
      }
      else
      {
        *((void *)v39 + v11) = glpLLVMStringMetadata(a1, "air.location");
        unint64_t v27 = *((unsigned int *)v22 + 4);
        if (v27 > 7)
        {
          uint64_t v29 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), (int)v27, 1);
        }
        else
        {
          unint64_t v28 = a1 + 8 * v27;
          uint64_t v29 = *(void *)(v28 + 520);
          if (!v29)
          {
            uint64_t v30 = (uint64_t *)(v28 + 520);
            uint64_t v29 = glpLLVMConstIntCache(a1, *(void *)(a1 + 40), v27, 0);
            *uint64_t v30 = v29;
          }
        }
        *((void *)v39 + (v11 + 1)) = v29;
        uint64_t v11 = (v11 + 2);
      }
      if ((*(_DWORD *)(a1 + 320) | 2) != 2 || (*(_WORD *)(a1 + 832) & 1) == 0)
      {
        *((void *)v39 + v11) = glpLLVMStringMetadata(a1, v25);
        *((void *)v39 + (v11 + 1)) = glpLLVMStringMetadata(a1, v26);
LABEL_66:
        uint64_t v11 = (v11 + 2);
      }
      break;
    default:
      return glpLLVMMDNodeInContext(a1, (uint64_t *)v39, v11);
  }
  return glpLLVMMDNodeInContext(a1, (uint64_t *)v39, v11);
}

const char *glpScalarTypeGetMetalArgType(int a1, int a2, int a3)
{
  if (a3) {
    BOOL v3 = a1 == 5;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3) {
    int v4 = 36;
  }
  else {
    int v4 = a1;
  }
  if (v4 <= 8)
  {
    if (v4 == 1)
    {
      unsigned int v6 = a2 - 1;
      uint64_t v7 = "float";
      uint64_t v8 = "half";
    }
    else
    {
      if (v4 != 5) {
        goto LABEL_21;
      }
      unsigned int v6 = a2 - 1;
      uint64_t v7 = "int";
      uint64_t v8 = "short";
    }
  }
  else
  {
    if (v4 == 9) {
      return "BOOL";
    }
    if (v4 != 36)
    {
      if (v4 == 62) {
        return "double";
      }
LABEL_21:
      abort();
    }
    unsigned int v6 = a2 - 1;
    uint64_t v7 = "uint";
    uint64_t v8 = "ushort";
  }
  if (v6 >= 2) {
    return v7;
  }
  else {
    return v8;
  }
}

uint64_t glpLLVMCGDeclareVariable(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 52) & 0x980) != 0) {
    *(_WORD *)(a1 + 326) = 1;
  }
  int v4 = *(uint64_t **)(a2 + 144);
  if (!v4 || (uint64_t result = *v4) == 0)
  {
    glpLLVMAllocVariableExtra(*(void *)(a1 + 152), a2);
    unsigned int v6 = *(uint64_t **)(a2 + 8);
    if ((!v6 || !glpLayoutObjectFind(v6, 28)) && *(_DWORD *)(a2 + 128))
    {
      uint64_t v7 = *(void *)(a2 + 48);
      if ((v7 & 0x80000000) == 0)
      {
        uint64_t v8 = glpPrecisionIndexFromSAFlags(v7);
        uint64_t v9 = glpTypeToLLVMType((void *)a1, *(unsigned int **)a2, v8, (void *)a2);
        uint64_t result = glpBuildAlloca(a1, v9);
        **(void **)(a2 + 144) = result;
        return result;
      }
      if ((v7 & 0x100000000) != 0)
      {
        uint64_t result = 0;
        **(void **)(a2 + 144) = 0;
        return result;
      }
      glpLLVMCGGlobalVariable(a1, a2);
    }
    return 0;
  }
  return result;
}

void *glpLLVMClearCurrentLine(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 260);
  int v3 = v2 + 1;
  int v4 = *(_DWORD *)(a1 + 256);
  if ((int)v2 + 1 <= v4)
  {
    uint64_t v7 = *(char **)(a1 + 264);
    int v8 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v4 <= 1) {
      int v4 = 1;
    }
    int v5 = 2 * v4;
    if (v5 <= v3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = v5;
    }
    uint64_t v7 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v6, "Vector Storage (uint8_t, growth)");
    memcpy(v7, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v6;
    *(void *)(a1 + 264) = v7;
    int v8 = *(_DWORD *)(a1 + 260);
  }
  uint64_t result = memmove(&v7[v2 + 1], &v7[v2], (v8 - v2));
  *(unsigned char *)(*(void *)(a1 + 264) + v2) = 105;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  return result;
}

uint64_t glpIsSimpleComponentAssigment(uint64_t a1, unsigned int ***a2, uint64_t **a3, int *a4, int *a5)
{
  uint64_t v9 = *a2;
  uint64_t v15 = 0;
  BOOL v16 = v9;
  uint64_t result = glpIsComponentAssigment(a1, &v16, (_DWORD *)&v15 + 1, &v15, a4, 1);
  if (result)
  {
    uint64_t Rhs = glpBinaryOperatorNodeGetRhs(a1);
    if (glpASTNodeGetKind(Rhs) == 81)
    {
      Variableuint64_t Extra = (unsigned int **)glpLValueNodeGetVariableExtra(Rhs);
      int v13 = (uint64_t *)VariableExtra;
      if (*a3)
      {
        if (*a3 == (uint64_t *)VariableExtra)
        {
LABEL_8:
          uint64_t result = glpGetVectorSwizzle(Rhs, a5);
          if (result)
          {
            *a2 = v16;
            *a3 = v13;
            return 1;
          }
          return result;
        }
      }
      else if (!glpTypeGetKind(*VariableExtra))
      {
        unsigned int PrimitiveType = glpPrimitiveTypeGetPrimitiveType(*v13);
        if (glpPrimitiveTypeGetCategory(PrimitiveType) == 2) {
          goto LABEL_8;
        }
      }
    }
    return 0;
  }
  return result;
}

void *glpLLVMBuildBr(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 260);
  int v5 = v4 + 1;
  int v6 = *(_DWORD *)(a1 + 256);
  if ((int)v4 + 1 <= v6)
  {
    uint64_t v9 = *(char **)(a1 + 264);
    int v10 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v6 <= 1) {
      int v6 = 1;
    }
    int v7 = 2 * v6;
    if (v7 <= v5) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v7;
    }
    uint64_t v9 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v8, "Vector Storage (uint8_t, growth)");
    memcpy(v9, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v8;
    *(void *)(a1 + 264) = v9;
    int v10 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v9[v4 + 1], &v9[v4], (v10 - v4));
  *(unsigned char *)(*(void *)(a1 + 264) + v4) = 97;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);

  return glpSerializeLLVMBlock(a1, a2);
}

uint64_t glpLLVMSharedRawCall(uint64_t a1, char a2, uint64_t a3, unint64_t *a4, int a5)
{
  int v5 = a5;
  uint64_t v49 = *MEMORY[0x263EF8340];
  if ((a2 & 2) != 0)
  {
    int v9 = *(_DWORD *)(a1 + 708);
    if ((a2 & 4) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    int v9 = 0;
    if ((a2 & 4) != 0)
    {
LABEL_3:
      int v10 = *(_DWORD *)(a1 + 724);
      goto LABEL_6;
    }
  }
  int v10 = 0;
LABEL_6:
  int v11 = a2 & 1;
  __int16 v12 = *(_WORD *)(a1 + 832);
  BOOL v14 = (v12 & 2) == 0 || v10 < 1;
  int v15 = (v12 & 1) == 0 || v14;
  int v48 = v15;
  if ((a2 & 8) != 0) {
    uint64_t v16 = *(unsigned int *)(a1 + 596);
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = (v11 + a5 + v9 + v10 + 2 * v16);
  MEMORY[0x270FA5388](a1);
  uint64_t v20 = (uint64_t *)((char *)&v46 - v19);
  if (v18 >= 0x200) {
    size_t v21 = 512;
  }
  else {
    size_t v21 = v18;
  }
  bzero((char *)&v46 - v19, v21);
  if (v5 < 1)
  {
    int v5 = 0;
    if (v11) {
LABEL_25:
    }
      v20[v5++] = *(void *)(a1 + 440);
  }
  else
  {
    uint64_t v46 = v16;
    uint64_t v47 = v17;
    uint64_t v16 = a3;
    uint64_t v22 = v5;
    uint64_t v23 = v20;
    do
    {
      unint64_t v24 = *a4++;
      *v23++ = glpLLVMGetVariablePointer(a1, v24);
      --v22;
    }
    while (v22);
    a3 = v16;
    LODWORD(v16) = v46;
    uint64_t v17 = v47;
    if (v11) {
      goto LABEL_25;
    }
  }
  if (v9 >= 1)
  {
    uint64_t v25 = *(uint64_t **)(a1 + 712);
    uint64_t v26 = &v20[v5];
    v5 += v9;
    uint64_t v27 = v9;
    do
    {
      uint64_t v28 = *v25++;
      *v26++ = *(void *)(v28 + 8);
      --v27;
    }
    while (v27);
  }
  if (v10 >= 1)
  {
    uint64_t v29 = *(uint64_t **)(a1 + 728);
    uint64_t v30 = &v20[v5];
    v5 += v10;
    uint64_t v31 = v10;
    do
    {
      uint64_t v32 = *v29++;
      *v30++ = *(void *)(v32 + 16);
      --v31;
    }
    while (v31);
  }
  if ((v48 & 1) == 0) {
    v20[v5++] = *(void *)(a1 + 448);
  }
  if ((int)v16 >= 1)
  {
    uint64_t v33 = 0;
    uint64_t v34 = &v20[v5];
    int v35 = (uint64_t *)(*(void *)(a1 + 600) + 8);
    do
    {
      v34[v33] = *(v35 - 1);
      uint64_t v36 = *v35;
      v35 += 6;
      v34[v16 + v33++] = v36;
    }
    while (v16 != v33);
  }
  uint64_t v37 = *(void *)(a1 + 160);
  uint64_t v38 = *(unsigned int *)(a1 + 260);
  int v39 = v38 + 1;
  int v40 = *(_DWORD *)(a1 + 256);
  if ((int)v38 + 1 <= v40)
  {
    size_t v43 = *(char **)(a1 + 264);
    int v44 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v40 <= 1) {
      int v40 = 1;
    }
    int v41 = 2 * v40;
    if (v41 <= v39) {
      uint64_t v42 = v39;
    }
    else {
      uint64_t v42 = v41;
    }
    size_t v43 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v42, "Vector Storage (uint8_t, growth)");
    memcpy(v43, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v42;
    *(void *)(a1 + 264) = v43;
    int v44 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v43[v38 + 1], &v43[v38], (v44 - v38));
  *(unsigned char *)(*(void *)(a1 + 264) + v38) = 43;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMValue(a1, v37);
  glpSerializeLLVMValue(a1, a3);
  glpSerializeArrayOfLLVMValues(a1, v20, v17);
  uint64_t result = *(int *)(a1 + 308);
  *(_DWORD *)(a1 + 308) = result + 1;
  return result;
}

uint64_t glpLLVMReadUniform(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  int ScalarType = glpPrimitiveTypeGetScalarType(a4);
  if (ScalarType == 9)
  {
    uint64_t v11 = a1[5];
    if (glpPrimitiveTypeGetCategory(a4) != 2) {
      goto LABEL_13;
    }
    uint64_t Length = glpPrimitiveVectorGetLength(a4);
    uint64_t v13 = glpLLVMVectorType((uint64_t)a1, v11, Length);
LABEL_12:
    uint64_t v11 = v13;
LABEL_13:
    uint64_t v17 = glpLLVMPointerType((uint64_t)a1, v11, 2);
    uint64_t v18 = glpLLVMCastOperation((uint64_t)a1, 86, a2, v17, "ptr");
    uint64_t v19 = glpLLVMBuildLoad((uint64_t)a1, v18, "uniform");
    uint64_t v20 = glpPrimitiveTypeToLLVMType(a1, a4, a5);
    if (ScalarType == 9)
    {
      uint64_t v21 = glpLLVMConstFromTypeCache((uint64_t)a1, 35, v11);
      return glpLLVMBuildICmp((uint64_t)a1, 1, v19, v21, "uniform");
    }
    else
    {
      if (ScalarType == 1) {
        char v22 = 88;
      }
      else {
        char v22 = 87;
      }
      return glpLLVMCastOperation((uint64_t)a1, v22, v19, v20, "uniform");
    }
  }
  if (a5 != 3 && a5)
  {
    uint64_t v13 = glpPrimitiveTypeToLLVMType(a1, a4, 3);
    goto LABEL_12;
  }
  if (a3 != a4)
  {
    uint64_t v14 = glpPrimitiveTypeToLLVMType(a1, a4, a5);
    uint64_t v15 = glpLLVMPointerType((uint64_t)a1, v14, 2);
    a2 = glpLLVMCastOperation((uint64_t)a1, 86, a2, v15, "ptr");
  }

  return glpLLVMBuildLoad((uint64_t)a1, a2, "uniform");
}

uint64_t glpLLVMAddGlobalInAddressSpace(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 260);
  int v5 = v4 + 1;
  int v6 = *(_DWORD *)(a1 + 256);
  if ((int)v4 + 1 <= v6)
  {
    int v9 = *(char **)(a1 + 264);
    int v10 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v6 <= 1) {
      int v6 = 1;
    }
    int v7 = 2 * v6;
    if (v7 <= v5) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v7;
    }
    int v9 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v8, "Vector Storage (uint8_t, growth)");
    memcpy(v9, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v8;
    *(void *)(a1 + 264) = v9;
    int v10 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v9[v4 + 1], &v9[v4], (v10 - v4));
  *(unsigned char *)(*(void *)(a1 + 264) + v4) = 110;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMType(a1, a2);
  if (*(_DWORD *)(a1 + 300))
  {
    uint64_t v11 = *(unsigned int *)(a1 + 260);
    int v12 = v11 + 1;
    int v13 = *(_DWORD *)(a1 + 256);
    if ((int)v11 + 1 <= v13)
    {
      uint64_t v16 = *(char **)(a1 + 264);
      int v17 = *(_DWORD *)(a1 + 260);
    }
    else
    {
      if (v13 <= 1) {
        int v13 = 1;
      }
      int v14 = 2 * v13;
      if (v14 <= v12) {
        uint64_t v15 = v12;
      }
      else {
        uint64_t v15 = v14;
      }
      uint64_t v16 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v15, "Vector Storage (uint8_t, growth)");
      memcpy(v16, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
      (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
      *(_DWORD *)(a1 + 256) = v15;
      *(void *)(a1 + 264) = v16;
      int v17 = *(_DWORD *)(a1 + 260);
    }
    memmove(&v16[v11 + 1], &v16[v11], (v17 - v11));
    *(unsigned char *)(*(void *)(a1 + 264) + v11) = 0;
    ++*(_DWORD *)(a1 + 260);
  }
  unsigned int v18 = (char)glp_serialized_integer32_control(2);
  uint64_t v19 = *(unsigned int *)(a1 + 260);
  int v20 = v19 + 1;
  int v21 = *(_DWORD *)(a1 + 256);
  if ((int)v19 + 1 <= v21)
  {
    unint64_t v24 = *(char **)(a1 + 264);
    int v25 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v21 <= 1) {
      int v21 = 1;
    }
    int v22 = 2 * v21;
    if (v22 <= v20) {
      uint64_t v23 = v20;
    }
    else {
      uint64_t v23 = v22;
    }
    unint64_t v24 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v23, "Vector Storage (uint8_t, growth)");
    memcpy(v24, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v23;
    *(void *)(a1 + 264) = v24;
    int v25 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v24[v19 + 1], &v24[v19], (v25 - v19));
  *(unsigned char *)(*(void *)(a1 + 264) + v19) = v18;
  int v26 = *(_DWORD *)(a1 + 260);
  unsigned int v27 = v26 + 1;
  *(_DWORD *)(a1 + 260) = v26 + 1;
  if ((v18 & 0x80000000) != 0)
  {
    switch((v18 >> 1) & 7)
    {
      case 0u:
        unsigned int v28 = v26 + 2;
        int v29 = *(_DWORD *)(a1 + 256);
        if (v28 <= v29)
        {
          uint64_t v32 = *(char **)(a1 + 264);
          unsigned int v33 = v27;
        }
        else
        {
          if (v29 <= 1) {
            int v29 = 1;
          }
          int v30 = 2 * v29;
          if (v30 <= (int)v28) {
            uint64_t v31 = v28;
          }
          else {
            uint64_t v31 = v30;
          }
          uint64_t v32 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v31, "Vector Storage (uint8_t, growth)");
          memcpy(v32, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v31;
          *(void *)(a1 + 264) = v32;
          unsigned int v33 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v32[v27 + 1], &v32[v27], v33 - v27);
        *(unsigned char *)(*(void *)(a1 + 264) + v27) = 2;
        int v52 = 1;
        goto LABEL_65;
      case 1u:
        unsigned int v46 = v26 + 3;
        int v47 = *(_DWORD *)(a1 + 256);
        if (v46 <= v47)
        {
          uint64_t v50 = *(char **)(a1 + 264);
          unsigned int v51 = v27;
        }
        else
        {
          if (v47 <= 1) {
            int v47 = 1;
          }
          int v48 = 2 * v47;
          if (v48 <= (int)v46) {
            uint64_t v49 = v46;
          }
          else {
            uint64_t v49 = v48;
          }
          uint64_t v50 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v49, "Vector Storage (uint8_t, growth)");
          memcpy(v50, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v49;
          *(void *)(a1 + 264) = v50;
          unsigned int v51 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v50[v27 + 1], &v50[v27], v51 - v27);
        int v52 = 2;
        *(_WORD *)(*(void *)(a1 + 264) + v27) = 2;
        goto LABEL_65;
      case 2u:
        unsigned int v34 = v26 + 4;
        int v35 = *(_DWORD *)(a1 + 256);
        if (v34 <= v35)
        {
          uint64_t v38 = *(char **)(a1 + 264);
          unsigned int v39 = v27;
        }
        else
        {
          if (v35 <= 1) {
            int v35 = 1;
          }
          int v36 = 2 * v35;
          if (v36 <= (int)v34) {
            uint64_t v37 = v34;
          }
          else {
            uint64_t v37 = v36;
          }
          uint64_t v38 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v37, "Vector Storage (uint8_t, growth)");
          memcpy(v38, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v37;
          *(void *)(a1 + 264) = v38;
          unsigned int v39 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v38[v27 + 1], &v38[v27], v39 - v27);
        uint64_t v53 = *(void *)(a1 + 264) + v27;
        *(unsigned char *)(v53 + 2) = 0;
        *(_WORD *)uint64_t v53 = 2;
        int v52 = 3;
        goto LABEL_65;
      case 3u:
        unsigned int v40 = v26 + 5;
        int v41 = *(_DWORD *)(a1 + 256);
        if (v40 <= v41)
        {
          int v44 = *(char **)(a1 + 264);
          unsigned int v45 = v27;
        }
        else
        {
          if (v41 <= 1) {
            int v41 = 1;
          }
          int v42 = 2 * v41;
          if (v42 <= (int)v40) {
            uint64_t v43 = v40;
          }
          else {
            uint64_t v43 = v42;
          }
          int v44 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v43, "Vector Storage (uint8_t, growth)");
          memcpy(v44, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v43;
          *(void *)(a1 + 264) = v44;
          unsigned int v45 = *(_DWORD *)(a1 + 260);
        }
        memmove(&v44[v27 + 1], &v44[v27], v45 - v27);
        *(_DWORD *)(*(void *)(a1 + 264) + v27) = 2;
        int v52 = 4;
LABEL_65:
        *(_DWORD *)(a1 + 260) += v52;
        break;
      default:
        break;
    }
  }
  uint64_t result = *(int *)(a1 + 308);
  *(_DWORD *)(a1 + 308) = result + 1;
  return result;
}

void *glpLLVMSetGlobalConstant(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 260);
  int v5 = v4 + 1;
  int v6 = *(_DWORD *)(a1 + 256);
  if ((int)v4 + 1 <= v6)
  {
    int v9 = *(char **)(a1 + 264);
    int v10 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v6 <= 1) {
      int v6 = 1;
    }
    int v7 = 2 * v6;
    if (v7 <= v5) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v7;
    }
    int v9 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v8, "Vector Storage (uint8_t, growth)");
    memcpy(v9, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v8;
    *(void *)(a1 + 264) = v9;
    int v10 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v9[v4 + 1], &v9[v4], (v10 - v4));
  *(unsigned char *)(*(void *)(a1 + 264) + v4) = 15;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMValue(a1, a2);
  unsigned int v11 = (char)glp_serialized_integer32_control(1);
  uint64_t v12 = *(unsigned int *)(a1 + 260);
  int v13 = v12 + 1;
  int v14 = *(_DWORD *)(a1 + 256);
  if ((int)v12 + 1 <= v14)
  {
    int v17 = *(char **)(a1 + 264);
    int v18 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v14 <= 1) {
      int v14 = 1;
    }
    int v15 = 2 * v14;
    if (v15 <= v13) {
      uint64_t v16 = v13;
    }
    else {
      uint64_t v16 = v15;
    }
    int v17 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v16, "Vector Storage (uint8_t, growth)");
    memcpy(v17, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v16;
    *(void *)(a1 + 264) = v17;
    int v18 = *(_DWORD *)(a1 + 260);
  }
  uint64_t result = memmove(&v17[v12 + 1], &v17[v12], (v18 - v12));
  *(unsigned char *)(*(void *)(a1 + 264) + v12) = v11;
  int v20 = *(_DWORD *)(a1 + 260);
  unsigned int v21 = v20 + 1;
  *(_DWORD *)(a1 + 260) = v20 + 1;
  if ((v11 & 0x80000000) != 0)
  {
    switch((v11 >> 1) & 7)
    {
      case 0u:
        unsigned int v22 = v20 + 2;
        int v23 = *(_DWORD *)(a1 + 256);
        if (v22 <= v23)
        {
          int v26 = *(char **)(a1 + 264);
          unsigned int v27 = v21;
        }
        else
        {
          if (v23 <= 1) {
            int v23 = 1;
          }
          int v24 = 2 * v23;
          if (v24 <= (int)v22) {
            uint64_t v25 = v22;
          }
          else {
            uint64_t v25 = v24;
          }
          int v26 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v25, "Vector Storage (uint8_t, growth)");
          memcpy(v26, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v25;
          *(void *)(a1 + 264) = v26;
          unsigned int v27 = *(_DWORD *)(a1 + 260);
        }
        uint64_t result = memmove(&v26[v21 + 1], &v26[v21], v27 - v21);
        int v46 = 1;
        *(unsigned char *)(*(void *)(a1 + 264) + v21) = 1;
        goto LABEL_55;
      case 1u:
        unsigned int v40 = v20 + 3;
        int v41 = *(_DWORD *)(a1 + 256);
        if (v40 <= v41)
        {
          int v44 = *(char **)(a1 + 264);
          unsigned int v45 = v21;
        }
        else
        {
          if (v41 <= 1) {
            int v41 = 1;
          }
          int v42 = 2 * v41;
          if (v42 <= (int)v40) {
            uint64_t v43 = v40;
          }
          else {
            uint64_t v43 = v42;
          }
          int v44 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v43, "Vector Storage (uint8_t, growth)");
          memcpy(v44, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v43;
          *(void *)(a1 + 264) = v44;
          unsigned int v45 = *(_DWORD *)(a1 + 260);
        }
        uint64_t result = memmove(&v44[v21 + 1], &v44[v21], v45 - v21);
        *(_WORD *)(*(void *)(a1 + 264) + v21) = 1;
        int v46 = 2;
        goto LABEL_55;
      case 2u:
        unsigned int v28 = v20 + 4;
        int v29 = *(_DWORD *)(a1 + 256);
        if (v28 <= v29)
        {
          uint64_t v32 = *(char **)(a1 + 264);
          unsigned int v33 = v21;
        }
        else
        {
          if (v29 <= 1) {
            int v29 = 1;
          }
          int v30 = 2 * v29;
          if (v30 <= (int)v28) {
            uint64_t v31 = v28;
          }
          else {
            uint64_t v31 = v30;
          }
          uint64_t v32 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v31, "Vector Storage (uint8_t, growth)");
          memcpy(v32, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v31;
          *(void *)(a1 + 264) = v32;
          unsigned int v33 = *(_DWORD *)(a1 + 260);
        }
        uint64_t result = memmove(&v32[v21 + 1], &v32[v21], v33 - v21);
        uint64_t v47 = *(void *)(a1 + 264) + v21;
        *(unsigned char *)(v47 + 2) = 0;
        *(_WORD *)uint64_t v47 = 1;
        int v46 = 3;
        goto LABEL_55;
      case 3u:
        unsigned int v34 = v20 + 5;
        int v35 = *(_DWORD *)(a1 + 256);
        if (v34 <= v35)
        {
          uint64_t v38 = *(char **)(a1 + 264);
          unsigned int v39 = v21;
        }
        else
        {
          if (v35 <= 1) {
            int v35 = 1;
          }
          int v36 = 2 * v35;
          if (v36 <= (int)v34) {
            uint64_t v37 = v34;
          }
          else {
            uint64_t v37 = v36;
          }
          uint64_t v38 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v37, "Vector Storage (uint8_t, growth)");
          memcpy(v38, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
          (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
          *(_DWORD *)(a1 + 256) = v37;
          *(void *)(a1 + 264) = v38;
          unsigned int v39 = *(_DWORD *)(a1 + 260);
        }
        uint64_t result = memmove(&v38[v21 + 1], &v38[v21], v39 - v21);
        *(_DWORD *)(*(void *)(a1 + 264) + v21) = 1;
        int v46 = 4;
LABEL_55:
        *(_DWORD *)(a1 + 260) += v46;
        break;
      default:
        return result;
    }
  }
  return result;
}

void *glpLLVMSetInitializer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 260);
  int v7 = v6 + 1;
  int v8 = *(_DWORD *)(a1 + 256);
  if ((int)v6 + 1 <= v8)
  {
    unsigned int v11 = *(char **)(a1 + 264);
    int v12 = *(_DWORD *)(a1 + 260);
  }
  else
  {
    if (v8 <= 1) {
      int v8 = 1;
    }
    int v9 = 2 * v8;
    if (v9 <= v7) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = v9;
    }
    unsigned int v11 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 232))(*(void *)(a1 + 224), v10, "Vector Storage (uint8_t, growth)");
    memcpy(v11, *(const void **)(a1 + 264), *(unsigned int *)(a1 + 260));
    (*(void (**)(void, void))(a1 + 248))(*(void *)(a1 + 224), *(void *)(a1 + 264));
    *(_DWORD *)(a1 + 256) = v10;
    *(void *)(a1 + 264) = v11;
    int v12 = *(_DWORD *)(a1 + 260);
  }
  memmove(&v11[v6 + 1], &v11[v6], (v12 - v6));
  *(unsigned char *)(*(void *)(a1 + 264) + v6) = 16;
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 296);
  glpSerializeLLVMValue(a1, a2);

  return glpSerializeLLVMValue(a1, a3);
}

uint64_t glpLLVMCGWriteVertexOuptut(uint64_t result, unint64_t a2)
{
  if ((~*(unsigned __int16 *)(result + 832) & 3) != 0)
  {
    uint64_t v3 = result;
    if (!*(void *)(result + 208)) {
      *(void *)(result + 208) = glpLLVMConstFromTypeCache(result, 37, *(void *)(result + 200));
    }
    uint64_t v4 = *(unsigned int *)(v3 + 692);
    if ((int)v4 < 1)
    {
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = 0;
      while (*(void *)(*(void *)(v3 + 696) + 8 * v5) != a2)
      {
        if (v4 == ++v5)
        {
          uint64_t v5 = *(unsigned int *)(v3 + 692);
          break;
        }
      }
    }
    uint64_t v6 = glpLLVMGetVariablePointer(v3, a2);
    uint64_t v7 = glpPrecisionIndexFromSAFlags(*(void *)(a2 + 48));
    uint64_t v8 = glpTypeToLLVMType((void *)v3, *(unsigned int **)a2, v7, (void *)a2);
    uint64_t v9 = glpLLVMPointerType(v3, v8, 0);
    uint64_t v10 = glpLLVMCastOperation(v3, 86, v6, v9, "ptr");
    uint64_t inserted = glpLLVMBuildLoad(v3, v10, "out");
    if ((*(_WORD *)(v3 + 832) & 1) == 0) {
      goto LABEL_20;
    }
    int v12 = glpLayoutObjectFind(*(uint64_t **)(a2 + 8), 69);
    int v13 = glpLayoutObjectFind(*(uint64_t **)(a2 + 8), 70);
    if (v13)
    {
      BOOL v14 = *((_DWORD *)v13 + 4) == 0;
      if (!v12) {
        goto LABEL_20;
      }
    }
    else
    {
      BOOL v14 = 1;
      if (!v12)
      {
LABEL_20:
        uint64_t result = glpLLVMBuildInsertValue(v3, *(void *)(v3 + 208), inserted, v5, "returnValue");
        *(void *)(v3 + 208) = result;
        return result;
      }
    }
    if (*((_DWORD *)v12 + 4) == 5 && v14)
    {
      uint64_t v15 = glpLLVMVectorType(v3, v8, 4);
      uint64_t v16 = glpLLVMConstFromTypeCache(v3, 37, v15);
      uint64_t v17 = *(void *)(v3 + 520);
      if (!v17)
      {
        uint64_t v17 = glpLLVMConstIntCache(v3, *(void *)(v3 + 40), 0, 0);
        *(void *)(v3 + 520) = v17;
      }
      uint64_t inserted = glpLLVMBuildInsertElement(v3, v16, inserted, v17, "fogCoord");
    }
    goto LABEL_20;
  }
  return result;
}

void _glpSetCrashLogMessage(uint64_t a1)
{
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_FAULT)) {
    _glpSetCrashLogMessage_cold_1(a1);
  }
}

void glpSetCrashLogMessagef(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void *glpMakeCompiler(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  int v13 = a1;
  int Default = glpGLSLVersionGetDefault(a1, a2);
  uint64_t v15 = malloc_type_malloc(0x88uLL, 0x7081ABB9uLL);
  if (!v15) {
    abort();
  }
  uint64_t v16 = v15;
  glpInitPoolAllocator(0x4000, 0x8000, v15);
  v21.n128_u64[0] = (unint64_t)"-1";
  v21.n128_u64[1] = 0xEDA00000002;
  uint64_t v22 = 0xFFFFFFFFLL;
  glpMakeTopLevelNode((uint64_t)v16, &v21);
  v16[9] = v17;
  *((_DWORD *)v16 + 20) = 0;
  v16[11] = glpMakePointerHash(v16);
  v16[13] = glpMakeTypedValueHash(v16);
  v16[4] = glpMakeNameTable((uint64_t)v16, a3, Default);
  *((_DWORD *)v16 + 10) = v13;
  *((_DWORD *)v16 + 11) = a2;
  *((_DWORD *)v16 + 12) = 0;
  v16[7] = a4;
  v16[8] = a5;
  *((_DWORD *)v16 + 21) = a6;
  *((unsigned char *)v16 + 96) = 0;
  int v18 = getenv("GL_SHADER_STYLE_GUIDE");
  if (v18) {
    BOOL v19 = strcmp(v18, "0") != 0;
  }
  else {
    BOOL v19 = 0;
  }
  *((unsigned char *)v16 + 97) = v19;
  *((unsigned char *)v16 + 98) = 0;
  *((_DWORD *)v16 + 25) = a7;
  v16[14] = glpMakeStringHash(v16);
  v16[15] = 32;
  v16[16] = ((uint64_t (*)(void, uint64_t, const char *))v16[1])(*v16, 256, "Vector Storage (GLPASTNode *)");
  return v16;
}

void glpDestroyCompiler(void *a1)
{
  glpDestroyPointerHash(a1[11]);
  glpDestroyTypedValueHash(a1[13]);
  glpDestroyNameTable(a1[4]);
  glpDestroyStringHash(a1[14]);
  ((void (*)(void, void))a1[3])(*a1, a1[16]);
  glpDestroyPoolAllocator((uint64_t)a1);

  free(a1);
}

uint64_t glpCompilerGetOptions(uint64_t a1)
{
  return *(unsigned int *)(a1 + 100);
}

uint64_t glpCompilerGetGLProfile(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t glpCompilerGetIOSVersion(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t glpCompilerGetInfoLog(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t glpCompilerRemapObject(void *a1, int a2, void *a3, uint64_t a4, int a5)
{
  if (!a3) {
    return 0;
  }
  uint64_t v10 = glpPointerHashGet(a1[11], (unint64_t)a3);
  if (!v10)
  {
    switch(a2)
    {
      case 0:
      case 12:
        uint64_t v16 = a3[6];
        if ((v16 & 0x40000000) != 0) {
          unint64_t v17 = (unint64_t)(*((unsigned char *)a1 + 96) != 0) << 40;
        }
        else {
          unint64_t v17 = 0;
        }
        uint64_t v34 = v17 | v16;
        if (a4)
        {
          uint64_t v98 = glpCompilerRemapObject(a1, 10, *a3, a4, 1);
          int v35 = (uint64_t *)glpCompilerRemapObject(a1, 11, a3[1], a4, 1);
          uint64_t v99 = glpCopyString((uint64_t)a1, (const void *)a3[2], a3[3]);
          uint64_t v37 = v36;
          uint64_t v43 = glpCopyString((uint64_t)a1, (const void *)a3[4], a3[5]);
          uint64_t v45 = v44;
          int v46 = (const void *)a3[8];
          if (v46) {
            uint64_t v47 = glpCopyValue((uint64_t)a1, (unsigned int *)*a3, v46, v38, v39, v40, v41, v42);
          }
          else {
            uint64_t v47 = 0;
          }
          uint64_t v60 = (const void *)a3[9];
          if (v60)
          {
            int v61 = v47;
            if (v60 != (const void *)a3[8]) {
              int v61 = glpCopyValue((uint64_t)a1, (unsigned int *)*a3, v60, v38, v39, v40, v41, v42);
            }
          }
          else
          {
            int v61 = 0;
          }
          uint64_t v97 = (uint64_t)v47;
          uint64_t v48 = v37;
          double VariableObject = glpMakeVariableObject((uint64_t)a1, v98, (uint64_t)v35, v34, (uint64_t)v99, v37, (uint64_t)v43, v45, *((unsigned char *)a3 + 56), v97, (uint64_t)v61);
          uint64_t v10 = v62;
          *(void *)(v62 + 96) = a3[12];
        }
        else
        {
          uint64_t v48 = a3[3];
          uint64_t v99 = (void *)a3[2];
          int v35 = (uint64_t *)a3[1];
          uint64_t v10 = (uint64_t)a3;
          a3[6] = v34;
        }
        if (!v35) {
          goto LABEL_56;
        }
        int v63 = glpLayoutObjectFind(v35, 90);
        if (!v63) {
          goto LABEL_56;
        }
        unint64_t v64 = v63;
        int Kind = glpTypeGetKind(*(unsigned int **)v10);
        if (Kind)
        {
          if (Kind != 2) {
LABEL_74:
          }
            abort();
          uint64_t v66 = v48;
          int FrameworkConstantByIndex = glpGetFrameworkConstantByIndex(*((_DWORD *)v64 + 4), *((unsigned __int8 *)a1 + 44));
          uint64_t ElementType = glpArrayTypeGetElementType(*(void *)v10);
          Maxint ElementCount = glpArrayTypeGetMaxElementCount(*(void *)v10);
          *(void *)uint64_t v10 = glpMakeArrayType((uint64_t)a1, ElementType, FrameworkConstantByIndex, MaxElementCount);
          uint64_t v48 = v66;
        }
        else
        {
          uint64_t v70 = v48;
          unsigned int PrimitiveType = glpGetPrimitiveType(5u);
          int v72 = (unsigned int *)glpGetPrimitiveType(5u);
          uint64_t v73 = glpGetFrameworkConstantByIndex(*((_DWORD *)v64 + 4), *((unsigned __int8 *)a1 + 44));
          MutableValue = glpMakeMutableValue((uint64_t)a1, v72, 1, v74, v75, v76, v77, v78, v73);
          uint64_t v80 = (unsigned int *)PrimitiveType;
          uint64_t v48 = v70;
          *(void *)(v10 + 64) = glpRemapValue(a1[13], v80, MutableValue);
        }
LABEL_56:
        if (a4) {
          *(void *)(v10 + 80) = glpCompilerRemapObject(a1, 2, a3[10], a4, 0);
        }
        if (!a5 || (*(void *)(v10 + 48) & 0x80000000) == 0) {
          goto LABEL_63;
        }
        v100.n128_u64[0] = (unint64_t)"-1";
        v100.n128_u64[1] = 0xEDA00000002;
        uint64_t v101 = 0xFFFFFFFFLL;
        glpMakeVariableDeclarationNode((uint64_t)a1, &v100, (uint64_t)v99, v48, 0);
        uint64_t InterfaceBlockNode = v81;
        glpVariableDeclarationNodeSetExtra(v81, v10);
        glpASTNodeSetSaFlags(InterfaceBlockNode, *(void *)(v10 + 48));
        uint64_t v59 = *(void **)v10;
LABEL_61:
        glpASTNodeSetSaType(InterfaceBlockNode, (uint64_t)v59);
        uint64_t v82 = a1[9];
        unsigned int v83 = *((_DWORD *)a1 + 20);
        *((_DWORD *)a1 + 20) = v83 + 1;
        int v84 = a1;
        uint64_t v85 = InterfaceBlockNode;
        goto LABEL_62;
      case 1:
      case 2:
      case 3:
        uint64_t v10 = (uint64_t)a3;
        if (a4)
        {
          uint64_t v10 = ((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 88, "Interface Block Object (remapped)");
          glpPointerHashPut(a1[11], (unint64_t)a3, v10, v12);
          *(void *)uint64_t v10 = glpCopyString((uint64_t)a1, (const void *)*a3, a3[1]);
          *(void *)(v10 + 8) = v13;
          if (*((unsigned char *)a3 + 32))
          {
            BOOL v14 = (const char *)glpCopyString((uint64_t)a1, (const void *)a3[2], a3[3]);
          }
          else
          {
            unint64_t v15 = 0xDFA3F2CD0000004BLL;
            BOOL v14 = "<<BUG: printing instance name of interface block without an instance name>>";
          }
          *(void *)(v10 + 16) = v14;
          *(void *)(v10 + 24) = v15;
          *(unsigned char *)(v10 + 32) = *((unsigned char *)a3 + 32);
          *(void *)(v10 + 40) = a3[5];
          *(void *)(v10 + 64) = glpCompilerRemapObject(a1, 10, a3[8], a4, 1);
          unsigned int VariableObjectCount = glpInterfaceBlockObjectGetVariableObjectCount((uint64_t)a3);
          *(void *)(v10 + 72) = ((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 8 * VariableObjectCount, "Variable Object Array of Interface Block (remapped)");
          if (VariableObjectCount)
          {
            uint64_t v50 = 0;
            uint64_t v51 = 8 * VariableObjectCount;
            do
            {
              *(void *)(*(void *)(v10 + 72) + v50) = glpCompilerRemapObject(a1, 0, *(void *)(a3[9] + v50), a4, 0);
              v50 += 8;
            }
            while (v51 != v50);
          }
          unint64_t v52 = a3[10];
          if (v52)
          {
            uint64_t v53 = a1[11];
            v100.n128_u64[0] = MEMORY[0x263EF8330];
            v100.n128_u64[1] = 0x40000000;
            uint64_t v101 = (uint64_t)__glpCompilerRemapBufferObject_block_invoke;
            unint64_t v102 = &__block_descriptor_tmp_20;
            uint64_t v103 = a1;
            unint64_t v104 = v52;
            uint64_t v54 = glpPointerHashCache_b(v53, v52, (uint64_t)&v100);
          }
          else
          {
            uint64_t v54 = 0;
          }
          *(void *)(v10 + 80) = v54;
          uint64_t v55 = a3[7];
          if (v55) {
            *(void *)(v10 + 56) = glpCompilerRemapObject(a1, 11, v55, a4, 0);
          }
        }
        if (!a5) {
          goto LABEL_63;
        }
        char v56 = *(unsigned char *)(v10 + 32);
        char v57 = glpTypeGetKind(*(unsigned int **)(v10 + 64)) == 3;
        v100.n128_u64[0] = (unint64_t)"-1";
        v100.n128_u64[1] = 0xEDA00000002;
        uint64_t v101 = 0xFFFFFFFFLL;
        uint64_t InterfaceBlockNode = glpMakeInterfaceBlockNode((uint64_t)a1, &v100, *(void *)v10, *(void *)(v10 + 8), *(void *)(v10 + 16), *(void *)(v10 + 24), v56, v57, v10);
        glpASTNodeSetSaFlags(InterfaceBlockNode, 0);
        uint64_t v59 = glpGetPrimitiveType(0);
        goto LABEL_61;
      case 4:
        if (!a4) {
          goto LABEL_27;
        }
        uint64_t v19 = 0;
        int v20 = 0;
        __n128 v21 = a3;
        do
        {
          uint64_t v22 = (void *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 16, "Overload Group");
          void *v22 = glpCompilerRemapObject(a1, 10, *v21, a4, 1);
          v22[1] = 0;
          uint64_t v10 = (uint64_t)v22;
          if (v20)
          {
            v20[1] = v22;
            uint64_t v10 = v19;
          }
          __n128 v21 = (void *)v21[1];
          uint64_t v19 = v10;
          int v20 = v22;
        }
        while (v21);
        goto LABEL_63;
      case 5:
        uint64_t v23 = a3[8];
        if (a4)
        {
          uint64_t v24 = glpCompilerRemapObject(a1, 10, *a3, a4, 1);
          uint64_t v25 = glpCopyString((uint64_t)a1, (const void *)a3[3], a3[4]);
          uint64_t v27 = v26;
          unsigned int v28 = glpCopyString((uint64_t)a1, (const void *)a3[5], a3[6]);
          glpMakeFunctionObject((uint64_t)a1, v24, a3[1], (uint64_t)v25, v27, (uint64_t)v28, v29);
          uint64_t v10 = v30;
          uint64_t v31 = a3[11];
          *(void *)(v30 + 88) = v31;
          *(void *)(v30 + 80) = ((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 8 * v31, "Parameter Info (remapped)");
          if (*((_DWORD *)a3 + 22))
          {
            unint64_t v32 = 0;
            do
            {
              *(void *)(*(void *)(v10 + 80) + 8 * v32) = glpCompilerRemapObject(a1, 12, *(void *)(a3[10] + 8 * v32), a4, 1);
              ++v32;
            }
            while (v32 < *((unsigned int *)a3 + 22));
          }
          *(void *)(v10 + 72) = glpCompilerRemapObject(a1, 12, a3[9], a4, 1);
          if (!v23) {
            goto LABEL_67;
          }
          glpPointerHashPut(a1[11], (unint64_t)a3, v10, v33);
          *(void *)(v10 + 64) = -1;
          uint64_t v23 = glpDeepCopyASTNode(a1, a3[8], (uint64_t (*)(uint64_t, uint64_t *, _DWORD *))compilerRemapFixup, (uint64_t)a1);
          *(void *)(v10 + 64) = v23;
        }
        else
        {
          uint64_t v10 = (uint64_t)a3;
        }
        if (v23) {
          goto LABEL_72;
        }
LABEL_67:
        uint64_t v87 = glpCopyString((uint64_t)a1, (const void *)a3[3], a3[4]);
        v100.n128_u64[0] = (unint64_t)"-1";
        v100.n128_u64[1] = 0xEDA00000002;
        uint64_t v101 = 0xFFFFFFFFLL;
        glpMakeFunctionPrototypeNode((uint64_t)a1, &v100, (uint64_t)v87, v88);
        uint64_t v23 = v89;
        glpFunctionPrototypeNodeSetExtra(v89, v10);
        uint64_t v90 = *(void *)(v10 + 72);
        if (v90)
        {
          v100.n128_u64[0] = (unint64_t)"-1";
          v100.n128_u64[1] = 0xEDA00000002;
          uint64_t v101 = 0xFFFFFFFFLL;
          glpMakeParameterDeclarationNode((uint64_t)a1, &v100, *(void *)(v90 + 16), *(void *)(v90 + 24));
          uint64_t v92 = v91;
          glpParameterDeclarationNodeSetExtra(v91, *(void *)(v10 + 72));
          glpASTNodeSetSaType(v92, **(void **)(v10 + 72));
          glpASTNodeSetSaFlags(v92, *(void *)(*(void *)(v10 + 72) + 48));
          glpFunctionPrototypeNodeSetReturnOutParam(v23, v92);
        }
        if (*((_DWORD *)a3 + 22))
        {
          unint64_t v93 = 0;
          do
          {
            uint64_t v94 = *(void *)(*(void *)(v10 + 80) + 8 * v93);
            v100.n128_u64[0] = (unint64_t)"-1";
            v100.n128_u64[1] = 0xEDA00000002;
            uint64_t v101 = 0xFFFFFFFFLL;
            glpMakeParameterDeclarationNode((uint64_t)a1, &v100, *(void *)(v94 + 16), *(void *)(v94 + 24));
            uint64_t v96 = v95;
            glpParameterDeclarationNodeSetExtra(v95, *(void *)(*(void *)(v10 + 80) + 8 * v93));
            glpASTNodeSetSaType(v96, **(void **)(*(void *)(v10 + 80) + 8 * v93));
            glpASTNodeSetSaFlags(v96, *(void *)(*(void *)(*(void *)(v10 + 80) + 8 * v93) + 48));
            glpFunctionPrototypeNodeAddParameter(a1, v23, v96);
            ++v93;
          }
          while (v93 < *((unsigned int *)a3 + 22));
        }
LABEL_72:
        if (a5)
        {
          uint64_t v82 = a1[9];
          unsigned int v83 = *((_DWORD *)a1 + 20);
          *((_DWORD *)a1 + 20) = v83 + 1;
          int v84 = a1;
          uint64_t v85 = v23;
LABEL_62:
          glpTopLevelNodeInsertDef(v84, v82, v85, v83);
        }
        goto LABEL_63;
      case 6:
      case 10:
        if (!a4) {
          goto LABEL_27;
        }
        uint64_t v18 = glpDeepCopyType(a1, (uint64_t)a3);
        goto LABEL_26;
      case 11:
        if (a4)
        {
          uint64_t v18 = (uint64_t)glpCopyLayoutObject(a1, (void **)a3);
LABEL_26:
          uint64_t v10 = v18;
LABEL_63:
          glpPointerHashPut(a1[11], (unint64_t)a3, v10, VariableObject);
        }
        else
        {
LABEL_27:
          uint64_t v10 = (uint64_t)a3;
        }
        break;
      default:
        goto LABEL_74;
    }
  }
  return v10;
}

uint64_t glpCompilerPoolAlloc(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*(void *)a1);
}

uint64_t compilerRemapFixup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  int Kind = glpASTNodeGetKind(a3);
  if (Kind <= 45)
  {
    if (Kind <= 43)
    {
      if (Kind == 7)
      {
        glpFunctionCallNodeGetExtra(v3);
      }
      else if (Kind == 1)
      {
        abort();
      }
    }
    else if (Kind == 44)
    {
      uint64_t Extra = glpParameterDeclarationNodeGetExtra(v3);
      uint64_t v13 = glpCompilerRemapObject(a1, 12, Extra, 1, 1);
      glpParameterDeclarationNodeSetExtra(v3, v13);
    }
    else
    {
      uint64_t v8 = glpFunctionPrototypeNodeGetExtra(v3);
      uint64_t v9 = glpCompilerRemapObject(a1, 5, v8, 1, 1);
      glpFunctionPrototypeNodeSetExtra(v3, v9);
    }
  }
  else
  {
    switch(Kind)
    {
      case 'K':
        uint64_t v6 = glpReturnStatementNodeGetExtra(v3);
        uint64_t v7 = glpCompilerRemapObject(a1, 5, v6, 1, 1);
        glpReturnStatementNodeSetExtra(v3, v7);
        break;
      case 'L':
      case 'M':
      case 'O':
        return v3;
      case 'N':
        uint64_t v14 = glpRawCallNodeGetExtra(v3);
        uint64_t v15 = glpCompilerRemapObject(a1, 5, v14, 1, 1);
        glpRawCallNodeSetExtra(v3, v15);
        break;
      case 'P':
        unint64_t v16 = glpOffsetNodeGetExtra(v3);
        uint64_t v17 = *(void *)(a1 + 88);
        v24[0] = MEMORY[0x263EF8330];
        v24[1] = 0x40000000;
        v24[2] = __compilerRemapFixup_block_invoke;
        uint64_t v24[3] = &__block_descriptor_tmp_19;
        v24[4] = a1;
        uint64_t v18 = glpPointerHashCache_b(v17, v16, (uint64_t)v24);
        glpOffsetNodeSetExtra(v3, v18);
        break;
      case 'Q':
        Variableuint64_t Extra = glpLValueNodeGetVariableExtra(v3);
        uint64_t v20 = glpCompilerRemapObject(a1, 0, VariableExtra, 1, 1);
        glpLValueNodeSetVariableExtra(v3, v20);
        break;
      default:
        if (Kind == 46)
        {
          uint64_t v21 = glpVariableDeclarationNodeGetExtra(v3);
          uint64_t v22 = glpCompilerRemapObject(a1, 12, v21, 1, 1);
          glpVariableDeclarationNodeSetExtra(v3, v22);
        }
        else if (Kind == 63)
        {
          uint64_t v10 = *(void *)(a1 + 72);
          unsigned int v11 = *(_DWORD *)(a1 + 80);
          *(_DWORD *)(a1 + 80) = v11 + 1;
          glpTopLevelNodeInsertDef((void *)a1, v10, v3, v11);
          uint64_t v3 = 0;
        }
        break;
    }
  }
  return v3;
}

void *glpCompilerInsertDef(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 72);
  unsigned int v4 = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = v4 + 1;
  return glpTopLevelNodeInsertDef((void *)a1, v3, a2, v4);
}

uint64_t glpCompilerAllOutputsAreInvariant(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 96);
}

uint64_t glpGetFrameworkConstantByIndex(int a1, int a2)
{
  BOOL v2 = a2 == 4;
  switch(a1)
  {
    case 0:
      uint64_t result = glpBuiltInConstantValues[8 * v2];
      break;
    case 1:
      uint64_t result = glpBuiltInConstantValues[8 * v2 + 3];
      break;
    case 2:
      uint64_t result = glpBuiltInConstantValues[8 * v2 + 4];
      break;
    case 3:
      uint64_t result = glpBuiltInConstantValues[8 * v2 + 5];
      break;
    case 4:
      uint64_t result = glpBuiltInConstantValues[8 * v2 + 7];
      break;
    case 5:
      uint64_t result = glpBuiltInConstantValues[8 * v2 + 1];
      break;
    case 6:
      uint64_t result = glpBuiltInConstantValues[8 * v2 + 2];
      break;
    case 7:
      uint64_t result = glpBuiltInConstantValues[8 * v2 + 6];
      break;
    case 8:
      uint64_t result = glpBuiltInConstantValues[8 * v2 + 2] - 1;
      break;
    default:
      abort();
  }
  return result;
}

uint64_t glpCompilerRemapValue(uint64_t a1, unsigned int *a2, char *a3)
{
  return glpRemapValue(*(void *)(a1 + 104), a2, a3);
}

char *glpCompilerNewTempName(uint64_t a1)
{
  size_t v2 = (snprintf_l(0, 0, 0, "$%u", *(_DWORD *)(a1 + 48)) + 1);
  uint64_t v3 = (char *)(*(uint64_t (**)(void, size_t, const char *))(a1 + 8))(*(void *)a1, v2, "Compiler temp name");
  snprintf_l(v3, v2, 0, "$%u", *(_DWORD *)(a1 + 48));
  ++*(_DWORD *)(a1 + 48);
  unsigned int v4 = strlen(v3);
  if (v4 >> 5 < v4)
  {
    unsigned int v5 = v4;
    unsigned int v6 = v4;
    do
    {
      v6 ^= 32 * v6 + (v6 >> 2) + v3[v5 - 1];
      v5 += ~(v4 >> 5);
    }
    while (v5 > v4 >> 5);
  }
  return v3;
}

uint64_t glpCompilerGetNameTable(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t glpCompilerGetLanguage(uint64_t a1)
{
  return glpNameTableGetLanguage(*(void *)(a1 + 32));
}

uint64_t glpCompilerGetTopLevelNode(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t glpCompilerApplyImplictRulesForGlobalTypeQualifier(uint64_t a1, uint64_t a2)
{
  uint64_t SaFlags = glpASTNodeGetSaFlags(a2);
  if (glpNameTableGetLanguage(*(void *)(a1 + 32)) == 3 && (SaFlags & 0x40000000) != 0) {
    return 1;
  }
  if (glpNameTableGetLanguage(*(void *)(a1 + 32)) == 3 && (SaFlags & 0x20000000) != 0)
  {
    unsigned int v18 = -1;
    Layout = (uint64_t *)glpGlobalTypeQualifierNodeGetLayout(a2);
    glpLayoutObjectGetGeomInOut(Layout, &v18, 0, 0, 0, 0);
    if (v18 != -1)
    {
      glpNameTableGet(*(void *)(a1 + 32), "gl_in", 0x1057ED5B00000005, 0, (uint64_t)&__block_literal_global_0);
      uint64_t v12 = v18;
      uint64_t v13 = a1;
      uint64_t v14 = 0x20000000;
      goto LABEL_27;
    }
    return 1;
  }
  if (glpNameTableGetLanguage(*(void *)(a1 + 32)) == 1 && (SaFlags & 0x40000000) != 0)
  {
    uint64_t v15 = (uint64_t *)glpGlobalTypeQualifierNodeGetLayout(a2);
    unint64_t v16 = glpLayoutObjectFind(v15, 18);
    if (v16)
    {
      uint64_t v17 = *((unsigned int *)v16 + 4);
      if (v17 != -1)
      {
        glpNameTableGet(*(void *)(a1 + 32), "gl_out", 0x92973DC800000006, 0, (uint64_t)&__block_literal_global_16);
        uint64_t v13 = a1;
        uint64_t v14 = 0x40000000;
        uint64_t v12 = v17;
LABEL_27:
        uint64_t result = glpApplySizeToBanks(v13, v14, v12);
        if (!result) {
          return result;
        }
      }
    }
    return 1;
  }
  int Language = glpNameTableGetLanguage(*(void *)(a1 + 32));
  BOOL v9 = (SaFlags & 0x20000000) != 0 && Language == 2;
  uint64_t result = 1;
  if (!v9 && (SaFlags & 0x100000000) == 0) {
    abort();
  }
  return result;
}

void __glpCompilerApplyImplictRulesForGlobalTypeQualifier_block_invoke(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  if (a2 == 1) {
    *a5 = 1;
  }
}

void __glpCompilerApplyImplictRulesForGlobalTypeQualifier_block_invoke_2(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  if (a2 == 1) {
    *a5 = 1;
  }
}

uint64_t glpCompilerGetImpliedBankSize(uint64_t a1, int a2)
{
  uint64_t v2 = 32;
  switch(a2)
  {
    case 1:
      uint64_t v2 = 0xFFFFFFFFLL;
      unsigned int v9 = -1;
      uint64_t GlobalTypeQualifier = glpTopLevelNodeGetGlobalTypeQualifier(*(void *)(a1 + 72), 0x20000000);
      if (GlobalTypeQualifier)
      {
        Layout = (uint64_t *)glpGlobalTypeQualifierNodeGetLayout(GlobalTypeQualifier);
        glpLayoutObjectGetGeomInOut(Layout, &v9, 0, 0, 0, 0);
        return v9;
      }
      return v2;
    case 2:
    case 4:
      return v2;
    case 3:
      uint64_t v5 = glpTopLevelNodeGetGlobalTypeQualifier(*(void *)(a1 + 72), 0x40000000);
      if (!v5) {
        goto LABEL_7;
      }
      unsigned int v6 = (uint64_t *)glpGlobalTypeQualifierNodeGetLayout(v5);
      uint64_t v7 = glpLayoutObjectFind(v6, 18);
      if (!v7) {
        goto LABEL_7;
      }
      uint64_t v2 = *((unsigned int *)v7 + 4);
      break;
    case 5:
LABEL_7:
      uint64_t v2 = 0xFFFFFFFFLL;
      break;
    default:
      abort();
  }
  return v2;
}

uint64_t glpCompilerGetValueHash(uint64_t a1)
{
  return *(void *)(a1 + 104);
}

uint64_t glpCompilerGetIntConstant(uint64_t a1, uint64_t a2)
{
  unsigned int PrimitiveType = (unsigned int *)glpGetPrimitiveType(5u);
  MutableValue = glpMakeMutableValue(a1, PrimitiveType, 1, v5, v6, v7, v8, v9, a2);
  uint64_t v11 = *(void *)(a1 + 104);

  return glpRemapValue(v11, PrimitiveType, MutableValue);
}

uint64_t glpCompilerForceAllOutputsToBeInvariant(uint64_t result)
{
  *(unsigned char *)(result + 96) = 1;
  return result;
}

uint64_t glpCompilerUsingStyleGuide(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 97);
}

uint64_t glpCompilerGetSubroutineType(void *a1, const char *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = glpStringHashGet(a1[14], a2, a3);
  if (v8) {
    return v8;
  }
  uint64_t v9 = a1[14];
  unint64_t v10 = *(unsigned int *)(v9 + 32);
  if (!v10) {
    goto LABEL_8;
  }
  uint64_t v11 = 0;
  unint64_t v12 = 0;
  while (1)
  {
    uint64_t v13 = *(void *)(v9 + 40);
    uint64_t v14 = *(void *)(v13 + v11);
    if (v14) {
      break;
    }
LABEL_7:
    ++v12;
    v11 += 32;
    if (v12 >= v10) {
      goto LABEL_8;
    }
  }
  uint64_t v15 = (unsigned int *)*a4;
  FunctionObject = (uint64_t *)glpSubroutineTypeGetFunctionObject(*(void *)(v13 + v11));
  if (!glpTypesEqual(v15, *FunctionObject))
  {
    unint64_t v10 = *(unsigned int *)(v9 + 32);
    goto LABEL_7;
  }
  uint64_t v23 = glpSubroutineTypeGetFunctionObject(v14);
  double SubroutineType = glpMakeSubroutineType((uint64_t)a1, (uint64_t)a2, a3, v23);
  uint64_t v8 = v25;
  glpStringHashPut(a1[14], a2, a3, v25, SubroutineType);
  if (!v8)
  {
LABEL_8:
    uint64_t v17 = glpCompilerNewTempName((uint64_t)a1);
    a4[3] = (uint64_t)v17;
    a4[4] = v18;
    a4[5] = glpAggregateTypeMangleName(*a4, (uint64_t)v17, v18, a1);
    a4[6] = v19;
    double v20 = glpMakeSubroutineType((uint64_t)a1, (uint64_t)a2, a3, (uint64_t)a4);
    uint64_t v8 = v21;
    glpStringHashPut(a1[14], a2, a3, v21, v20);
  }
  return v8;
}

uint64_t glpCompilerGetImplicitConversionPolicy(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unsigned int GLSLVersion = glpNameTableGetGLSLVersion(v1);
  if (GLSLVersion > 9) {
    abort();
  }
  if (((1 << GLSLVersion) & 0xBC) != 0)
  {
    if (glpNameTableIsExtensionEnabled(v1, 0x12u)) {
      unsigned int v3 = 2;
    }
    else {
      unsigned int v3 = 1;
    }
    if (glpNameTableIsExtensionEnabled(v1, 0x13u)) {
      return 3;
    }
    else {
      return v3;
    }
  }
  else if (((1 << GLSLVersion) & 0x43) != 0)
  {
    return 0;
  }
  else
  {
    return 3;
  }
}

BOOL glpCompilerDoesTrackPrecision(uint64_t a1)
{
  int GLSLVersion = glpNameTableGetGLSLVersion(*(void *)(a1 + 32));
  return !GLSLVersion || GLSLVersion == 6;
}

BOOL glpCompilerDoesTypeRequirePrecision(uint64_t a1, unsigned int *ElementType)
{
  int GLSLVersion = glpNameTableGetGLSLVersion(*(void *)(a1 + 32));
  if (GLSLVersion != 6 && GLSLVersion != 0) {
    return 0;
  }
  while (1)
  {
    int Kind = glpTypeGetKind(ElementType);
    if (Kind != 2) {
      break;
    }
    uint64_t ElementType = (unsigned int *)glpArrayTypeGetElementType((uint64_t)ElementType);
  }
  if (Kind) {
    return 0;
  }
  uint64_t PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)ElementType);
  if (glpPrimitiveTypeGetCategory(PrimitiveType) == 4) {
    return 1;
  }
  if (!PrimitiveType) {
    return 0;
  }
  int ScalarType = glpPrimitiveTypeGetScalarType(PrimitiveType);
  return ScalarType != 62 && ScalarType != 9;
}

uint64_t glpCompilerSetRequiresOutputPoints(uint64_t result, char a2)
{
  *(unsigned char *)(result + 98) = a2;
  return result;
}

uint64_t glpCompilerRequiresOutputPoints(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 98);
}

void *glpCompilerPushSAContext(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 120);
  uint64_t v5 = *(unsigned int *)(a1 + 124);
  if ((int)v5 + 1 <= v4)
  {
    uint64_t v8 = *(char **)(a1 + 128);
    int v9 = *(_DWORD *)(a1 + 124);
  }
  else
  {
    if (v4 <= 1) {
      int v4 = 1;
    }
    int v6 = 2 * v4;
    if (v6 <= (int)v5 + 1) {
      unsigned int v7 = v5 + 1;
    }
    else {
      unsigned int v7 = v6;
    }
    uint64_t v8 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 8 * v7, "Vector Storage (GLPASTNode *, growth)");
    memcpy(v8, *(const void **)(a1 + 128), 8 * *(unsigned int *)(a1 + 124));
    (*(void (**)(void, void))(a1 + 24))(*(void *)a1, *(void *)(a1 + 128));
    *(_DWORD *)(a1 + 120) = v7;
    *(void *)(a1 + 128) = v8;
    int v9 = *(_DWORD *)(a1 + 124);
  }
  uint64_t result = memmove(&v8[8 * v5 + 8], &v8[8 * v5], 8 * (v9 - v5));
  *(void *)(*(void *)(a1 + 128) + 8 * v5) = a2;
  ++*(_DWORD *)(a1 + 124);
  return result;
}

uint64_t glpCompilerPopSAContext(uint64_t result)
{
  return result;
}

uint64_t glpCompilerGetImmediateSAContext(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 128) + 8 * (*(_DWORD *)(a1 + 124) - 2));
}

double __compilerRemapFixup_block_invoke(uint64_t a1)
{
  return glpMakeOffsetObject(*(void *)(a1 + 32));
}

double __glpCompilerRemapBufferObject_block_invoke(uint64_t a1)
{
  return glpMakeBufferObject(*(void *)(a1 + 32), **(void **)(a1 + 40), *(_DWORD *)(*(void *)(a1 + 40) + 8), *(_DWORD *)(*(void *)(a1 + 40) + 12));
}

uint64_t glpScalarTypeFromGLPType(uint64_t a1)
{
  uint64_t PrimitiveType = glpPrimitiveTypeGetPrimitiveType(a1);
  int ScalarType = glpPrimitiveTypeGetScalarType(PrimitiveType);
  if (ScalarType <= 8)
  {
    if (ScalarType == 1)
    {
      return 2;
    }
    else
    {
      if (ScalarType != 5) {
        goto LABEL_13;
      }
      return 1;
    }
  }
  else
  {
    switch(ScalarType)
    {
      case 9:
        return 0;
      case 36:
        return 4;
      case 62:
        return 3;
      default:
LABEL_13:
        abort();
    }
  }
}

char *glpTypeFromScalarTypeAndComponentCount(unsigned int a1, int a2)
{
  if (a1 >= 5) {
    abort();
  }
  unsigned int VectorType = glpGetVectorType(dword_2393D2258[a1], a2);

  return glpGetPrimitiveType(VectorType);
}

void glpPackConstants(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v42 = a3;
  uint64_t v45 = a1;
  uint64_t v54 = *MEMORY[0x263EF8340];
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = &v39 - v4;
  if (*(_DWORD *)(v6 + 32))
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    unsigned int v9 = 0;
    do
    {
      uint64_t v10 = *(void *)(a2 + 40);
      unint64_t v11 = *(void *)(v10 + v7);
      if (v11)
      {
        long long v50 = *(_OWORD *)(v10 + v7 + 8);
        unint64_t v12 = (unsigned int *)v50;
        unsigned int v13 = glpABIGetTypeSize(0, v50, 0);
        if (glpTypeSizeGetSize(v13) == 1 && !glpTypeGetKind(v12))
        {
          v5[v9++] = v50;
        }
        else
        {
          uint64_t v14 = ((uint64_t (*)(void, uint64_t, const char *))v45[1])(*v45, 176, "Constant Pack Record (direct)");
          *(_DWORD *)uint64_t v14 = 0;
          *(unsigned char *)(v14 + 8) = 0;
          glpPointerHashPut(v42, v11, v14, v15);
        }
      }
      ++v8;
      v7 += 32;
    }
    while (v8 < *(unsigned int *)(a2 + 32));
  }
  else
  {
    unsigned int v9 = 0;
  }
  uint64_t v40 = v9;
  qsort_b(v5, v9, 0x10uLL, &__block_literal_global_1);
  uint64_t v53 = 0;
  memset(v52, 0, sizeof(v52));
  if (v9)
  {
    uint64_t v16 = 0;
    long long v39 = xmmword_2393D21E0;
    uint64_t v44 = v5;
    do
    {
      uint64_t v47 = v16;
      unsigned int v17 = glpScalarTypeFromGLPType(*(void *)&v5[v16]);
      unsigned int v18 = countComponents(*(void *)&v5[v16]);
      int v19 = v18;
      unsigned int v41 = v17;
      uint64_t v43 = (uint64_t *)v52 + v17;
      double v20 = (uint64_t *)*v43;
      long long v51 = v39;
      int v46 = v20;
      if (v20)
      {
        uint64_t v21 = (uint64_t)v46;
        *(void *)&long long v50 = (char *)&v44[v47] + 8;
        uint64_t v48 = v18;
        int v49 = v18;
        while (1)
        {
          uint64_t v22 = *(void *)v50;
          unsigned int v23 = bytesPerComponent(*(_DWORD *)(v21 + 8));
          if (!v19)
          {
            uint64_t v21 = (uint64_t)v46;
            uint64_t v34 = v47;
            uint64_t v5 = v44;
            goto LABEL_36;
          }
          uint64_t v24 = *(unsigned int *)(v21 + 12);
          if (v24) {
            break;
          }
LABEL_24:
          uint64_t v21 = *(void *)v21;
          int v19 = v49;
          if (!v21) {
            goto LABEL_25;
          }
        }
        unsigned int v25 = v23;
        uint64_t v26 = 0;
        size_t v27 = v23;
        do
        {
          unsigned int v28 = 0;
          uint64_t v29 = 0;
          while (memcmp((const void *)(v21 + 16 + v28), (const void *)(v22 + v25 * v26), v27))
          {
            ++v29;
            v28 += v25;
            if (v24 == v29) {
              goto LABEL_24;
            }
          }
          *((_DWORD *)&v52[-1] + v26++) = v29;
        }
        while (v26 != v48);
        uint64_t v5 = v44;
        uint64_t v34 = v47;
        int v19 = v49;
      }
      else
      {
LABEL_25:
        uint64_t v30 = v43;
        uint64_t v5 = v44;
        uint64_t v34 = v47;
        uint64_t v31 = (uint64_t *)&v44[v47] + 1;
        uint64_t v21 = (uint64_t)v43;
        while (1)
        {
          uint64_t v21 = *(void *)v21;
          if (!v21) {
            break;
          }
          if (packInto(*v31, v19, v21, (uint64_t)&v51)) {
            goto LABEL_36;
          }
        }
        uint64_t v21 = ((uint64_t (*)(void, uint64_t, const char *))v45[1])(*v45, 200, "Packed Constant");
        *(void *)uint64_t v21 = 0;
        *(void *)(v21 + 8) = v41;
        *(unsigned char *)(v21 + 32) = 0;
        packInto(*v31, v19, v21, (uint64_t)&v51);
        unint64_t v32 = v46;
        while (v32)
        {
          double v33 = v32;
          unint64_t v32 = (uint64_t *)*v32;
          if (!v32) {
            goto LABEL_35;
          }
        }
        double v33 = v30;
LABEL_35:
        *double v33 = v21;
      }
LABEL_36:
      unint64_t v35 = *((void *)&v5[v34] + 1);
      long long v36 = v51;
      uint64_t v37 = ((uint64_t (*)(void, uint64_t, const char *))v45[1])(*v45, 176, "Constant Pack Record (packed)");
      *(_DWORD *)uint64_t v37 = 1;
      *(void *)(v37 + 8) = v21;
      *(_DWORD *)(v37 + 16) = v19;
      *(_OWORD *)(v37 + 20) = v36;
      glpPointerHashPut(v42, v35, v37, v38);
      uint64_t v16 = v34 + 1;
    }
    while (v16 != v40);
  }
}

uint64_t __glpPackConstants_block_invoke(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v4 = uniqueComponentCount(a3);
  return v4 - uniqueComponentCount(a2);
}

uint64_t uniqueComponentCount(uint64_t *a1)
{
  unsigned int v2 = glpScalarTypeFromGLPType(*a1);
  unsigned int v3 = bytesPerComponent(v2);
  unsigned int v4 = countComponents(*a1);
  if (!v4) {
    return 0;
  }
  unint64_t v5 = 0;
  LODWORD(v6) = 0;
  uint64_t v7 = v4;
  do
  {
    if (v5)
    {
      unint64_t v8 = (char *)a1[1];
      if (!memcmp(&v8[v3 * v5], v8, v3))
      {
        BOOL v13 = 0;
      }
      else
      {
        unsigned int v9 = v3;
        uint64_t v10 = 1;
        do
        {
          unint64_t v11 = v10;
          if (v5 == v10) {
            break;
          }
          int v12 = memcmp(&v8[v3 * v5], &v8[v9], v3);
          uint64_t v10 = v11 + 1;
          v9 += v3;
        }
        while (v12);
        BOOL v13 = v11 >= v5;
      }
    }
    else
    {
      BOOL v13 = 1;
    }
    uint64_t v6 = (v6 + v13);
    ++v5;
  }
  while (v5 != v7);
  return v6;
}

uint64_t countComponents(uint64_t a1)
{
  uint64_t PrimitiveType = glpPrimitiveTypeGetPrimitiveType(a1);
  uint64_t result = glpPrimitiveTypeGetCategory(PrimitiveType);
  if (result != 1)
  {
    return glpPrimitiveVectorGetLength(PrimitiveType);
  }
  return result;
}

uint64_t packInto(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7 = bytesPerComponent(*(_DWORD *)(a3 + 8));
  if (!a2) {
    return 1;
  }
  unsigned int v8 = v7;
  uint64_t v9 = 0;
  int v17 = *(_DWORD *)(a3 + 12);
  uint64_t v10 = a3 + 16;
  size_t v11 = v7;
  while (1)
  {
    uint64_t v12 = *(unsigned int *)(a3 + 12);
    if (v12)
    {
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      while (memcmp((const void *)(v10 + v13), (const void *)(a1 + v8 * v9), v11))
      {
        ++v14;
        v13 += v8;
        if (v12 == v14) {
          goto LABEL_7;
        }
      }
      goto LABEL_10;
    }
LABEL_7:
    uint64_t v15 = *(int *)(a3 + 8);
    if (v15 >= 5) {
      abort();
    }
    if (v12 >= glpPrimitiveTypeGetMaxComponentsPerVec4(dword_2393D2258[v15])) {
      break;
    }
    memcpy((void *)(v10 + *(_DWORD *)(a3 + 12) * v8), (const void *)(a1 + v8 * v9), v11);
    LODWORD(v14) = *(_DWORD *)(a3 + 12);
    *(_DWORD *)(a3 + 12) = v14 + 1;
LABEL_10:
    *(_DWORD *)(a4 + 4 * v9++) = v14;
    if (v9 == a2) {
      return 1;
    }
  }
  uint64_t result = 0;
  *(_DWORD *)(a3 + 12) = v17;
  return result;
}

uint64_t bytesPerComponent(unsigned int a1)
{
  if (a1 >= 5) {
    abort();
  }
  uint64_t v1 = dword_2393D2258[a1];

  return glpPrimitiveTypeGetBytesPerComponent(v1);
}

uint64_t *glpAppendFlagDescription(uint64_t *result, uint64_t a2)
{
  unsigned int v3 = result;
  if ((a2 & 1) == 0)
  {
    if ((a2 & 2) == 0)
    {
      if ((a2 & 4) == 0)
      {
        if ((a2 & 8) == 0)
        {
          if ((a2 & 0x10) == 0)
          {
            if ((a2 & 0x20) == 0)
            {
              if ((a2 & 0x40) == 0)
              {
                if ((a2 & 0x80) == 0)
                {
                  if ((a2 & 0x100) == 0)
                  {
                    if ((a2 & 0x200) == 0)
                    {
                      if ((a2 & 0x400) == 0)
                      {
                        if ((a2 & 0x800) == 0)
                        {
                          if ((a2 & 0x1000) == 0)
                          {
                            if ((a2 & 0x2000) == 0)
                            {
                              if ((a2 & 0x4000) == 0)
                              {
                                if ((a2 & 0x8000) == 0)
                                {
                                  if ((a2 & 0x10000) == 0)
                                  {
                                    if ((a2 & 0x20000) == 0)
                                    {
                                      if ((a2 & 0x40000) == 0)
                                      {
                                        if ((a2 & 0x80000) == 0)
                                        {
                                          if ((a2 & 0x100000) == 0)
                                          {
                                            if ((a2 & 0x200000) == 0)
                                            {
                                              if ((a2 & 0x400000) == 0)
                                              {
                                                if ((a2 & 0x800000) == 0)
                                                {
                                                  if ((a2 & 0x1000000) == 0)
                                                  {
                                                    if ((a2 & 0x2000000) == 0)
                                                    {
                                                      if ((a2 & 0x4000000) == 0)
                                                      {
                                                        if ((a2 & 0x8000000) == 0)
                                                        {
                                                          if ((a2 & 0x10000000) == 0)
                                                          {
                                                            if ((a2 & 0x20000000) == 0)
                                                            {
                                                              if ((a2 & 0x40000000) == 0)
                                                              {
                                                                if ((a2 & 0x80000000) == 0)
                                                                {
                                                                  if ((a2 & 0x100000000) == 0)
                                                                  {
                                                                    if ((a2 & 0x200000000) == 0)
                                                                    {
                                                                      if ((a2 & 0x400000000) == 0)
                                                                      {
                                                                        if ((a2 & 0x800000000) == 0)
                                                                        {
                                                                          if ((a2 & 0x1000000000) == 0)
                                                                          {
                                                                            if ((a2 & 0x2000000000) == 0)
                                                                            {
                                                                              if ((a2 & 0x4000000000) == 0)
                                                                              {
                                                                                if ((a2 & 0x8000000000) == 0)
                                                                                {
                                                                                  if ((a2 & 0x10000000000) == 0)
                                                                                  {
                                                                                    if ((a2 & 0x20000000000) == 0)
                                                                                    {
                                                                                      if ((a2 & 0x40000000000) == 0)
                                                                                      {
                                                                                        if ((a2 & 0x80000000000) == 0) {
                                                                                          return result;
                                                                                        }
                                                                                        goto LABEL_175;
                                                                                      }
                                                                                      goto LABEL_173;
                                                                                    }
LABEL_171:
                                                                                    uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "PATCH");
                                                                                    if ((a2 & 0x40000000000) != 0) {
                                                                                      goto LABEL_172;
                                                                                    }
                                                                                    goto LABEL_88;
                                                                                  }
LABEL_169:
                                                                                  uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "INVARIANT_420");
                                                                                  if ((a2 & 0x20000000000) != 0) {
                                                                                    goto LABEL_170;
                                                                                  }
                                                                                  goto LABEL_87;
                                                                                }
LABEL_167:
                                                                                uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "INVARIANT");
                                                                                if ((a2 & 0x10000000000) != 0) {
                                                                                  goto LABEL_168;
                                                                                }
                                                                                goto LABEL_86;
                                                                              }
LABEL_165:
                                                                              uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "CENTROID");
                                                                              if ((a2 & 0x8000000000) != 0) {
                                                                                goto LABEL_166;
                                                                              }
                                                                              goto LABEL_85;
                                                                            }
LABEL_163:
                                                                            uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "NOPERSPECTIVE");
                                                                            if ((a2 & 0x4000000000) != 0) {
                                                                              goto LABEL_164;
                                                                            }
                                                                            goto LABEL_84;
                                                                          }
LABEL_161:
                                                                          uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "FLAT");
                                                                          if ((a2 & 0x2000000000) != 0) {
                                                                            goto LABEL_162;
                                                                          }
                                                                          goto LABEL_83;
                                                                        }
LABEL_159:
                                                                        uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "BUFFER_BACKED");
                                                                        if ((a2 & 0x1000000000) != 0) {
                                                                          goto LABEL_160;
                                                                        }
                                                                        goto LABEL_82;
                                                                      }
LABEL_157:
                                                                      uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "BINDABLE");
                                                                      if ((a2 & 0x800000000) != 0) {
                                                                        goto LABEL_158;
                                                                      }
                                                                      goto LABEL_81;
                                                                    }
LABEL_155:
                                                                    uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "SUBROUTINE_UNIFORM");
                                                                    if ((a2 & 0x400000000) != 0) {
                                                                      goto LABEL_156;
                                                                    }
                                                                    goto LABEL_80;
                                                                  }
LABEL_153:
                                                                  uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "UNIFORM");
                                                                  if ((a2 & 0x200000000) != 0) {
                                                                    goto LABEL_154;
                                                                  }
                                                                  goto LABEL_79;
                                                                }
LABEL_151:
                                                                uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "GLOBAL");
                                                                if ((a2 & 0x100000000) != 0) {
                                                                  goto LABEL_152;
                                                                }
                                                                goto LABEL_78;
                                                              }
LABEL_149:
                                                              uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "STAGE_OUT");
                                                              if ((a2 & 0x80000000) != 0) {
                                                                goto LABEL_150;
                                                              }
                                                              goto LABEL_77;
                                                            }
LABEL_147:
                                                            uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "STAGE_IN");
                                                            if ((a2 & 0x40000000) != 0) {
                                                              goto LABEL_148;
                                                            }
                                                            goto LABEL_76;
                                                          }
LABEL_145:
                                                          uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "MAY_BE_REDECLARED_INVARIANT");
                                                          if ((a2 & 0x20000000) != 0) {
                                                            goto LABEL_146;
                                                          }
                                                          goto LABEL_75;
                                                        }
LABEL_143:
                                                        uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "ARRAY_SIZED_BY_EXTRINSIC");
                                                        if ((a2 & 0x10000000) != 0) {
                                                          goto LABEL_144;
                                                        }
                                                        goto LABEL_74;
                                                      }
LABEL_141:
                                                      uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "ARG_OUT");
                                                      if ((a2 & 0x8000000) != 0) {
                                                        goto LABEL_142;
                                                      }
                                                      goto LABEL_73;
                                                    }
LABEL_139:
                                                    uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "ARG_IN");
                                                    if ((a2 & 0x4000000) != 0) {
                                                      goto LABEL_140;
                                                    }
                                                    goto LABEL_72;
                                                  }
LABEL_137:
                                                  uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "STAGE_IN_REF");
                                                  if ((a2 & 0x2000000) != 0) {
                                                    goto LABEL_138;
                                                  }
                                                  goto LABEL_71;
                                                }
LABEL_135:
                                                uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "CONST_EXPR");
                                                if ((a2 & 0x1000000) != 0) {
                                                  goto LABEL_136;
                                                }
                                                goto LABEL_70;
                                              }
LABEL_133:
                                              uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "PARAMETER");
                                              if ((a2 & 0x800000) != 0) {
                                                goto LABEL_134;
                                              }
                                              goto LABEL_69;
                                            }
LABEL_131:
                                            uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "SUBROUTINE_STATIC");
                                            if ((a2 & 0x400000) != 0) {
                                              goto LABEL_132;
                                            }
                                            goto LABEL_68;
                                          }
LABEL_129:
                                          uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "SUBROUTINE_IMPLEMENTATION");
                                          if ((a2 & 0x200000) != 0) {
                                            goto LABEL_130;
                                          }
                                          goto LABEL_67;
                                        }
LABEL_127:
                                        uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "SUBROUTINE_TYPEDEF");
                                        if ((a2 & 0x100000) != 0) {
                                          goto LABEL_128;
                                        }
                                        goto LABEL_66;
                                      }
LABEL_125:
                                      uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "REQUIRE_OUTPUT_POINTS");
                                      if ((a2 & 0x80000) != 0) {
                                        goto LABEL_126;
                                      }
                                      goto LABEL_65;
                                    }
LABEL_123:
                                    uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "LINKER_GENERATED_FUNCTION");
                                    if ((a2 & 0x40000) != 0) {
                                      goto LABEL_124;
                                    }
                                    goto LABEL_64;
                                  }
LABEL_121:
                                  uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "SA_HANDLING");
                                  if ((a2 & 0x20000) != 0) {
                                    goto LABEL_122;
                                  }
                                  goto LABEL_63;
                                }
LABEL_119:
                                uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "FAIL_FUNCTION");
                                if ((a2 & 0x10000) != 0) {
                                  goto LABEL_120;
                                }
                                goto LABEL_62;
                              }
LABEL_117:
                              uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "PPSTREAMOP");
                              if ((a2 & 0x8000) != 0) {
                                goto LABEL_118;
                              }
                              goto LABEL_61;
                            }
LABEL_115:
                            uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "INLINE");
                            if ((a2 & 0x4000) != 0) {
                              goto LABEL_116;
                            }
                            goto LABEL_60;
                          }
LABEL_113:
                          uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "PURE");
                          if ((a2 & 0x2000) != 0) {
                            goto LABEL_114;
                          }
                          goto LABEL_59;
                        }
LABEL_111:
                        uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "PURE_110");
                        if ((a2 & 0x1000) != 0) {
                          goto LABEL_112;
                        }
                        goto LABEL_58;
                      }
LABEL_109:
                      uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "ROW_MAJOR");
                      if ((a2 & 0x800) != 0) {
                        goto LABEL_110;
                      }
                      goto LABEL_57;
                    }
LABEL_107:
                    uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "FOLDABLE");
                    if ((a2 & 0x400) != 0) {
                      goto LABEL_108;
                    }
                    goto LABEL_56;
                  }
LABEL_105:
                  uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "READONLY");
                  if ((a2 & 0x200) != 0) {
                    goto LABEL_106;
                  }
                  goto LABEL_55;
                }
LABEL_103:
                uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "NOT_FOLDABLE");
                if ((a2 & 0x100) != 0) {
                  goto LABEL_104;
                }
                goto LABEL_54;
              }
LABEL_101:
              uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "CONST_120");
              if ((a2 & 0x80) != 0) {
                goto LABEL_102;
              }
              goto LABEL_53;
            }
LABEL_99:
            uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "CONST_110");
            if ((a2 & 0x40) != 0) {
              goto LABEL_100;
            }
            goto LABEL_52;
          }
LABEL_97:
          uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "HIGHP");
          if ((a2 & 0x20) != 0) {
            goto LABEL_98;
          }
          goto LABEL_51;
        }
LABEL_95:
        uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "MEDIUMP");
        if ((a2 & 0x10) != 0) {
          goto LABEL_96;
        }
        goto LABEL_50;
      }
LABEL_93:
      uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "LOWP");
      if ((a2 & 8) != 0) {
        goto LABEL_94;
      }
      goto LABEL_49;
    }
LABEL_91:
    uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "_ANYP");
    if ((a2 & 4) != 0) {
      goto LABEL_92;
    }
    goto LABEL_48;
  }
  uint64_t result = (uint64_t *)glpStringBufferAppendCString(result, "_ARGP");
  if ((a2 & 2) != 0)
  {
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_91;
  }
  if ((a2 & 4) != 0)
  {
LABEL_92:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_93;
  }
LABEL_48:
  if ((a2 & 8) != 0)
  {
LABEL_94:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_95;
  }
LABEL_49:
  if ((a2 & 0x10) != 0)
  {
LABEL_96:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_97;
  }
LABEL_50:
  if ((a2 & 0x20) != 0)
  {
LABEL_98:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_99;
  }
LABEL_51:
  if ((a2 & 0x40) != 0)
  {
LABEL_100:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_101;
  }
LABEL_52:
  if ((a2 & 0x80) != 0)
  {
LABEL_102:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_103;
  }
LABEL_53:
  if ((a2 & 0x100) != 0)
  {
LABEL_104:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_105;
  }
LABEL_54:
  if ((a2 & 0x200) != 0)
  {
LABEL_106:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_107;
  }
LABEL_55:
  if ((a2 & 0x400) != 0)
  {
LABEL_108:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_109;
  }
LABEL_56:
  if ((a2 & 0x800) != 0)
  {
LABEL_110:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_111;
  }
LABEL_57:
  if ((a2 & 0x1000) != 0)
  {
LABEL_112:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_113;
  }
LABEL_58:
  if ((a2 & 0x2000) != 0)
  {
LABEL_114:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_115;
  }
LABEL_59:
  if ((a2 & 0x4000) != 0)
  {
LABEL_116:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_117;
  }
LABEL_60:
  if ((a2 & 0x8000) != 0)
  {
LABEL_118:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_119;
  }
LABEL_61:
  if ((a2 & 0x10000) != 0)
  {
LABEL_120:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_121;
  }
LABEL_62:
  if ((a2 & 0x20000) != 0)
  {
LABEL_122:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_123;
  }
LABEL_63:
  if ((a2 & 0x40000) != 0)
  {
LABEL_124:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_125;
  }
LABEL_64:
  if ((a2 & 0x80000) != 0)
  {
LABEL_126:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_127;
  }
LABEL_65:
  if ((a2 & 0x100000) != 0)
  {
LABEL_128:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_129;
  }
LABEL_66:
  if ((a2 & 0x200000) != 0)
  {
LABEL_130:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_131;
  }
LABEL_67:
  if ((a2 & 0x400000) != 0)
  {
LABEL_132:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_133;
  }
LABEL_68:
  if ((a2 & 0x800000) != 0)
  {
LABEL_134:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_135;
  }
LABEL_69:
  if ((a2 & 0x1000000) != 0)
  {
LABEL_136:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_137;
  }
LABEL_70:
  if ((a2 & 0x2000000) != 0)
  {
LABEL_138:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_139;
  }
LABEL_71:
  if ((a2 & 0x4000000) != 0)
  {
LABEL_140:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_141;
  }
LABEL_72:
  if ((a2 & 0x8000000) != 0)
  {
LABEL_142:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_143;
  }
LABEL_73:
  if ((a2 & 0x10000000) != 0)
  {
LABEL_144:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_145;
  }
LABEL_74:
  if ((a2 & 0x20000000) != 0)
  {
LABEL_146:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_147;
  }
LABEL_75:
  if ((a2 & 0x40000000) != 0)
  {
LABEL_148:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_149;
  }
LABEL_76:
  if ((a2 & 0x80000000) != 0)
  {
LABEL_150:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_151;
  }
LABEL_77:
  if ((a2 & 0x100000000) != 0)
  {
LABEL_152:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_153;
  }
LABEL_78:
  if ((a2 & 0x200000000) != 0)
  {
LABEL_154:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_155;
  }
LABEL_79:
  if ((a2 & 0x400000000) != 0)
  {
LABEL_156:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_157;
  }
LABEL_80:
  if ((a2 & 0x800000000) != 0)
  {
LABEL_158:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_159;
  }
LABEL_81:
  if ((a2 & 0x1000000000) != 0)
  {
LABEL_160:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_161;
  }
LABEL_82:
  if ((a2 & 0x2000000000) != 0)
  {
LABEL_162:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_163;
  }
LABEL_83:
  if ((a2 & 0x4000000000) != 0)
  {
LABEL_164:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_165;
  }
LABEL_84:
  if ((a2 & 0x8000000000) != 0)
  {
LABEL_166:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_167;
  }
LABEL_85:
  if ((a2 & 0x10000000000) != 0)
  {
LABEL_168:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_169;
  }
LABEL_86:
  if ((a2 & 0x20000000000) != 0)
  {
LABEL_170:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
    goto LABEL_171;
  }
LABEL_87:
  if ((a2 & 0x40000000000) != 0)
  {
LABEL_172:
    glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
LABEL_173:
    uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "SAMPLE");
    if ((a2 & 0x80000000000) == 0) {
      return result;
    }
    goto LABEL_174;
  }
LABEL_88:
  if ((a2 & 0x80000000000) == 0) {
    return result;
  }
LABEL_174:
  glpStringBufferAppendFormat(v3, ",", v4, v5, v6, v7, v8, v9, v10);
LABEL_175:

  return (uint64_t *)glpStringBufferAppendCString(v3, "PRECISE");
}

uint64_t glpPrecisionIndexFromSAFlags(char a1)
{
  uint64_t result = 0;
  uint64_t v3 = a1 & 0x1F;
  if (v3 <= 7)
  {
    if (!v3) {
      return result;
    }
    if (v3 == 4) {
      return 1;
    }
LABEL_11:
    abort();
  }
  if (v3 == 8) {
    return 2;
  }
  if (v3 == 16) {
    return 3;
  }
  if (v3 != 31) {
    goto LABEL_11;
  }
  return result;
}

double glpMakeFunctionObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 168, "Function Object");
  double result = 0.0;
  *(_OWORD *)uint64_t v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(void *)(v13 + 160) = 0;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_OWORD *)(v13 + 144) = 0u;
  *(void *)uint64_t v13 = a2;
  *(void *)(v13 + 8) = a3;
  *(void *)(v13 + 24) = a4;
  *(void *)(v13 + 32) = a5;
  *(void *)(v13 + 40) = a6;
  *(void *)(v13 + 48) = a7;
  *(_DWORD *)(v13 + 160) = -1;
  *(void *)(v13 + 144) = 0;
  return result;
}

double glpMakeVariableObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  uint64_t v18 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 160, "Variable Object");
  double result = 0.0;
  *(_OWORD *)uint64_t v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)(v18 + 64) = 0u;
  *(_OWORD *)(v18 + 80) = 0u;
  *(_OWORD *)(v18 + 96) = 0u;
  *(_OWORD *)(v18 + 112) = 0u;
  *(_OWORD *)(v18 + 128) = 0u;
  *(_OWORD *)(v18 + 144) = 0u;
  *(void *)uint64_t v18 = a2;
  *(void *)(v18 + 8) = a3;
  *(void *)(v18 + 40) = a8;
  *(void *)(v18 + 48) = a4;
  *(void *)(v18 + 16) = a5;
  *(void *)(v18 + 24) = a6;
  *(void *)(v18 + 32) = a7;
  *(unsigned char *)(v18 + 56) = a9;
  *(void *)(v18 + 64) = a10;
  *(void *)(v18 + 72) = a11;
  return result;
}

uint64_t glpVariableObjectGetABI(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (v1) {
    return *(unsigned int *)(v1 + 8);
  }
  else {
    return 0;
  }
}

void *glpAppendVariableObjectDescription(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    glpStringBufferAppendFormat(a1, "*((GLPVariableObject *)%p): ", a3, a4, a5, a6, a7, a8, a2);
    uint64_t v16 = *(void *)(a2 + 48);
    if (v16)
    {
      glpAppendFlagDescription(a1, v16);
      glpStringBufferAppendCString(a1, " ");
    }
    glpDumpTypeToStringBuffer(a1, *(void *)a2, v10, v11, v12, v13, v14, v15, v24);
    return (void *)glpStringBufferAppendFormat(a1, " %.*s", v17, v18, v19, v20, v21, v22, *(_DWORD *)(a2 + 24));
  }
  else
  {
    return glpStringBufferAppendCString(a1, "(GLPVariableObject *)0");
  }
}

uint64_t glpVariableObjectValidateImplicitArraySize(uint64_t a1, int a2, unsigned int a3, uint64_t **a4, long long *a5)
{
  uint64_t v9 = *(unsigned int **)a1;
  if (a2)
  {
    int v10 = a2;
    do
    {
      int Kind = glpTypeGetKind(v9);
      if (Kind == 3)
      {
        uint64_t ElementType = glpBankTypeGetElementType((uint64_t)v9);
      }
      else
      {
        if (Kind != 2) {
          abort();
        }
        uint64_t ElementType = glpArrayTypeGetElementType((uint64_t)v9);
      }
      uint64_t v9 = (unsigned int *)ElementType;
      --v10;
    }
    while (v10);
  }
  if (glpArrayTypeGetMaxElementCount((uint64_t)v9) >= a3) {
    return 1;
  }
  int v17 = *(_DWORD *)(a1 + 40);
  long long v19 = *a5;
  uint64_t v20 = *((void *)a5 + 2);
  glpLogMessage(a4, 0, (uint64_t)&v19, "special unsized array '%.*s' may have at most %u elements (%u requested)", v13, v14, v15, v16, v17);
  return 0;
}

uint64_t glpVariableObjectExtendImplicitArraySize(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t **a4, uint64_t a5)
{
  long long v11 = *(_OWORD *)a5;
  uint64_t v12 = *(void *)(a5 + 16);
  uint64_t result = glpVariableObjectValidateImplicitArraySize(a1, a2, a3, a4, &v11);
  if (result)
  {
    uint64_t v9 = a1 + 4 * a2;
    unsigned int v10 = *(_DWORD *)(v9 + 96);
    if (v10 <= a3) {
      unsigned int v10 = a3;
    }
    *(_DWORD *)(v9 + 96) = v10;
    return 1;
  }
  return result;
}

uint64_t glpGetIBVariableObjectCount(uint64_t a1, unsigned int *a2)
{
  uint64_t ElementType = (uint64_t)a2;
  uint64_t v10 = *MEMORY[0x263EF8340];
  int Kind = glpTypeGetKind(a2);
  BOOL v6 = a1 == 0x20000000 || a1 == 0x40000000;
  long long v9 = xmmword_2393D21E0;
  int v7 = *(_DWORD *)((unint64_t)&v9 | (8 * (Kind == 3)) | (4 * v6));
  if (v7 != 1)
  {
    if (v7 != 3) {
      return 1;
    }
    uint64_t ElementType = glpBankTypeGetElementType(ElementType);
  }

  return glpAggregateTypeGetElementCount(ElementType);
}

uint64_t glpMakeUnnamedInterfaceBlockObject(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned int *a6)
{
  uint64_t result = glpMakeNamedInterfaceBlockObject(a1, a2, a3, (uint64_t)"<<BUG: printing instance name of interface block without an instance name>>", 0xDFA3F2CD0000004BLL, a4, a5, a6);
  *(unsigned char *)(result + 32) = 0;
  return result;
}

uint64_t glpMakeNamedInterfaceBlockObject(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned int *a8)
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  uint64_t v16 = ((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 88, "Interface Block Object");
  *(_OWORD *)uint64_t v16 = 0u;
  *(_OWORD *)(v16 + 16) = 0u;
  *(_OWORD *)(v16 + 48) = 0u;
  *(_OWORD *)(v16 + 64) = 0u;
  *(_OWORD *)(v16 + 32) = 0u;
  *(void *)(v16 + 80) = 0;
  uint64_t v89 = a6;
  uint64_t v17 = a6 & 0x160000000;
  *(void *)uint64_t v16 = a2;
  *(void *)(v16 + 8) = a3;
  *(void *)(v16 + 16) = a4;
  *(void *)(v16 + 24) = a5;
  *(unsigned char *)(v16 + 32) = 1;
  *(void *)(v16 + 40) = v17;
  uint64_t v90 = v16;
  *(void *)(v16 + 64) = a8;
  if (v17 == 0x100000000)
  {
    uint64_t ElementType = (uint64_t)a8;
    if (glpTypeGetKind(a8) == 3) {
      uint64_t ElementType = glpBankTypeGetElementType((uint64_t)a8);
    }
    if (glpTypeGetKind(a8) == 3) {
      int ElementCount = glpBankTypeGetElementCount((uint64_t)a8);
    }
    else {
      int ElementCount = 1;
    }
    uint64_t v20 = ((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 32, "Buffer Object");
    *(_OWORD *)uint64_t v20 = 0u;
    *(_OWORD *)(v20 + 16) = 0u;
    *(void *)uint64_t v20 = ElementType;
    *(_DWORD *)(v20 + 8) = a7;
    *(_DWORD *)(v20 + 12) = ElementCount;
    *(void *)(v90 + 80) = v20;
  }
  int Kind = glpTypeGetKind(a8);
  BOOL v23 = v17 == 0x20000000 || v17 == 0x40000000;
  long long v91 = xmmword_2393D21E0;
  switch(*(_DWORD *)((unint64_t)&v91 | (8 * (Kind == 3)) | (4 * v23)))
  {
    case 0:
    case 2:
      StringBuffer = glpMakeStringBuffer(a1);
      uint64_t v31 = (uint64_t)StringBuffer;
      if (v17 == 0x20000000) {
        char v32 = 105;
      }
      else {
        char v32 = 111;
      }
      if (v17 == 0x20000000) {
        double v33 = "in";
      }
      else {
        double v33 = "out";
      }
      if (v17 == 0x100000000)
      {
        char v32 = 117;
        uint64_t v34 = "uniform";
      }
      else
      {
        LOBYTE(v34) = (_BYTE)v33;
      }
      glpStringBufferAppendFormat(StringBuffer, "$ib$%c$%.*s", v25, v26, v27, v28, v29, v30, v32);
      unint64_t v35 = glpMakeStringBuffer(a1);
      glpStringBufferAppendFormat(v35, "<%s %.*s>", v36, v37, v38, v39, v40, v41, (char)v34);
      *(void *)(v90 + 72) = ((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 8, "Variable Object Array of Interface Block");
      uint64_t String = glpStringBufferGetString(v31);
      uint64_t v44 = v43;
      uint64_t v45 = glpStringBufferGetString((uint64_t)v35);
      uint64_t v47 = v46;
      uint64_t v48 = ((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 160, "Variable Object");
      *(_OWORD *)uint64_t v48 = 0u;
      *(_OWORD *)(v48 + 16) = 0u;
      *(_OWORD *)(v48 + 32) = 0u;
      *(_OWORD *)(v48 + 48) = 0u;
      *(_OWORD *)(v48 + 128) = 0u;
      *(_OWORD *)(v48 + 144) = 0u;
      *(_OWORD *)(v48 + 96) = 0u;
      *(_OWORD *)(v48 + 112) = 0u;
      *(_OWORD *)(v48 + 64) = 0u;
      *(_OWORD *)(v48 + 80) = 0u;
      *(void *)uint64_t v48 = a8;
      *(void *)(v48 + 8) = 0;
      *(void *)(v48 + 40) = v47;
      *(void *)(v48 + 48) = v89 | 0x80000000;
      *(void *)(v48 + 16) = String;
      *(void *)(v48 + 24) = v44;
      *(void *)(v48 + 32) = v45;
      *(unsigned char *)(v48 + 56) = 0;
      *(void *)(v48 + 64) = 0;
      *(void *)(v48 + 72) = 0;
      **(void **)(v90 + 72) = v48;
      uint64_t v49 = *(void *)(v90 + 72);
      *(void *)(*(void *)v49 + 80) = v90;
      *(void *)(*(void *)v49 + 88) = *(void *)(v90 + 80);
      break;
    case 1:
    case 3:
      uint64_t v50 = (uint64_t)a8;
      if (glpTypeGetKind(a8) == 3) {
        uint64_t v50 = glpBankTypeGetElementType((uint64_t)a8);
      }
      unsigned int v51 = glpAggregateTypeGetElementCount(v50);
      *(void *)(v90 + 72) = ((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 8 * v51, "Variable Object Array of Interface Block");
      if (v51)
      {
        uint64_t v52 = 0;
        if (v17 == 0x20000000) {
          char v53 = 105;
        }
        else {
          char v53 = 111;
        }
        uint64_t v54 = "out";
        if (v17 == 0x20000000) {
          uint64_t v54 = "in";
        }
        if (v17 == 0x100000000) {
          char v53 = 117;
        }
        char v86 = v53;
        uint64_t v87 = v51;
        uint64_t v55 = "uniform";
        if (v17 != 0x100000000) {
          LOBYTE(v55) = (_BYTE)v54;
        }
        char v85 = (char)v55;
        uint64_t v88 = a8;
        uint64_t v84 = v50;
        do
        {
          glpStructTypeGetFieldName(v50, v52);
          uint64_t BankType = glpAggregateTypeGetElementType(v50, v52);
          char v57 = glpMakeStringBuffer(a1);
          glpStringBufferAppendFormat(v57, "$ib$%c$%.*s$%.*s", v58, v59, v60, v61, v62, v63, v86);
          unint64_t v64 = glpMakeStringBuffer(a1);
          glpStringBufferAppendFormat(v64, "<%s %.*s.%.*s>", v65, v66, v67, v68, v69, v70, v85);
          if (glpTypeGetKind(a8) == 3)
          {
            int Bank = glpBankTypeGetBank((uint64_t)a8);
            int v72 = glpBankTypeGetElementCount((uint64_t)a8);
            uint64_t BankType = glpMakeBankType((uint64_t)a1, Bank, BankType, v72);
          }
          uint64_t v50 = v84;
          uint64_t ElementLayout = glpAggregateTypeGetElementLayout(v84, v52);
          uint64_t v74 = glpAggregateTypeGetElementFlags(v84, v52) | v89 | 0x80000000;
          uint64_t v75 = glpStringBufferGetString((uint64_t)v57);
          uint64_t v77 = v76;
          uint64_t v78 = glpStringBufferGetString((uint64_t)v64);
          uint64_t v80 = v79;
          uint64_t v81 = ((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 160, "Variable Object");
          *(_OWORD *)uint64_t v81 = 0u;
          *(_OWORD *)(v81 + 16) = 0u;
          *(_OWORD *)(v81 + 32) = 0u;
          *(_OWORD *)(v81 + 48) = 0u;
          *(_OWORD *)(v81 + 128) = 0u;
          *(_OWORD *)(v81 + 144) = 0u;
          *(_OWORD *)(v81 + 96) = 0u;
          *(_OWORD *)(v81 + 112) = 0u;
          *(_OWORD *)(v81 + 64) = 0u;
          *(_OWORD *)(v81 + 80) = 0u;
          *(void *)uint64_t v81 = BankType;
          *(void *)(v81 + 8) = ElementLayout;
          *(void *)(v81 + 40) = v80;
          *(void *)(v81 + 48) = v74;
          *(void *)(v81 + 16) = v75;
          *(void *)(v81 + 24) = v77;
          *(void *)(v81 + 32) = v78;
          *(unsigned char *)(v81 + 56) = 0;
          *(void *)(v81 + 64) = 0;
          *(void *)(v81 + 72) = 0;
          *(void *)(*(void *)(v90 + 72) + 8 * v52) = v81;
          uint64_t v82 = *(void *)(v90 + 72);
          *(void *)(*(void *)(v82 + 8 * v52) + 80) = v90;
          *(void *)(*(void *)(v82 + 8 * v52++) + 88) = *(void *)(v90 + 80);
          a8 = v88;
        }
        while (v87 != v52);
      }
      break;
    default:
      return v90;
  }
  return v90;
}

double glpMakeBufferObject(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 32, "Buffer Object");
  double result = 0.0;
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(void *)uint64_t v7 = a2;
  *(_DWORD *)(v7 + 8) = a3;
  *(_DWORD *)(v7 + 12) = a4;
  return result;
}

uint64_t glpGetStructTypeFromIBType(unsigned int *a1)
{
  if (glpTypeGetKind(a1) != 3) {
    return (uint64_t)a1;
  }

  return glpBankTypeGetElementType((uint64_t)a1);
}

uint64_t glpInterfaceBlockObjectGetRepresentation(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 40);
  int Kind = glpTypeGetKind(*(unsigned int **)(a1 + 64));
  BOOL v4 = v1 == 0x20000000 || v1 == 0x40000000;
  long long v6 = xmmword_2393D21E0;
  return *(unsigned int *)((unint64_t)&v6 | (8 * (Kind == 3)) | (4 * v4));
}

uint64_t glpInterfaceBlockObjectGetVariableObjectCount(uint64_t a1)
{
  return glpGetIBVariableObjectCount(*(void *)(a1 + 40), *(unsigned int **)(a1 + 64));
}

uint64_t glpBufferObjectGetMinimumBufferSize(uint64_t a1)
{
  return glpABIGetMinimumBufferBytesForType(*(_DWORD *)(a1 + 8), *(void *)a1, 0);
}

double glpMakeOffsetObject(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 32, "Offset Object");
  double result = 0.0;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_DWORD *)(v1 + 24) = -1;
  return result;
}

uint64_t glpPopulatePrecisionWidths(uint64_t result, void *a2)
{
  if (result > 9) {
    abort();
  }
  if (((1 << result) & 0x3BE) != 0)
  {
    a2[1] = -1;
    a2[2] = -1;
    *a2 = -1;
  }
  else
  {
    if (result)
    {
      *(_OWORD *)a2 = xmmword_2393D2270;
      uint64_t v2 = 0x2000000010;
    }
    else
    {
      *(_OWORD *)a2 = xmmword_2393D2280;
      uint64_t v2 = 0x110000000BLL;
    }
    a2[2] = v2;
  }
  return result;
}

uint64_t glpGLSLVersionFromInt(int a1)
{
  if (a1 > 149)
  {
    if (a1 <= 329)
    {
      if (a1 == 150) {
        return 5;
      }
      if (a1 == 300) {
        return 6;
      }
    }
    else
    {
      switch(a1)
      {
        case 330:
          return 7;
        case 400:
          return 8;
        case 410:
          return 9;
      }
    }
  }
  else if (a1 <= 119)
  {
    if (a1 == 100) {
      return 0;
    }
    if (a1 == 110) {
      return 1;
    }
  }
  else
  {
    switch(a1)
    {
      case 120:
        return 2;
      case 130:
        return 3;
      case 140:
        return 4;
    }
  }
  return 10;
}

uint64_t glpGLSLVersionToInt(unsigned int a1)
{
  if (a1 >= 0xA) {
    abort();
  }
  return dword_2393D22A0[a1];
}

uint64_t glpGLSLVersionGetDefault(uint64_t a1, int a2)
{
  if ((a2 - 1) > 3) {
    unsigned int v2 = 10;
  }
  else {
    unsigned int v2 = dword_2393D2320[a2 - 1];
  }
  if (!a2) {
    unsigned int v2 = 1;
  }
  if (a2 == 1) {
    return 4;
  }
  else {
    return v2;
  }
}

BOOL glpGLSLVersionAllowed(uint64_t a1, int a2)
{
  int GLProfile = glpCompilerGetGLProfile(a1);
  BOOL result = 0;
  switch(a2)
  {
    case 0:
      return GLProfile == 1 || (GLProfile - 3) < 2;
    case 1:
    case 2:
      return GLProfile == 0;
    case 3:
      return result;
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
      return GLProfile == 1;
    case 6:
      return GLProfile == 4;
    default:
      abort();
  }
}

uint64_t glpGLSLVersionRequired(uint64_t a1, unsigned int a2)
{
  if (a2 >= 0xA) {
    abort();
  }
  return dword_2393D22C8[a2];
}

uint64_t glpBankForInputsInLanguage(unsigned int a1)
{
  if (a1 >= 5) {
    abort();
  }
  return dword_2393D22F0[a1];
}

uint64_t glpBankForOutputsInLanguage(unsigned int a1)
{
  if (a1 >= 5) {
    abort();
  }
  return dword_2393D2304[a1];
}

uint64_t glpExtensionFromString(char *__s2)
{
  uint64_t result = strcmp("GL_OES_standard_derivatives", __s2);
  if (result)
  {
    if (!strcmp("GL_EXT_separate_shader_objects", __s2))
    {
      return 1;
    }
    else if (!strcmp("GL_EXT_shader_framebuffer_fetch", __s2))
    {
      return 2;
    }
    else if (!strcmp("GL_EXT_shader_texture_lod", __s2))
    {
      return 3;
    }
    else if (!strcmp("GL_EXT_shadow_samplers", __s2))
    {
      return 4;
    }
    else if (!strcmp("GL_EXT_draw_instanced", __s2))
    {
      return 5;
    }
    else if (!strcmp("GL_APPLE_ES2_extension_testing_compatibility_extension_that_shouldnt_exist", __s2))
    {
      return 6;
    }
    else if (!strcmp("GL_APPLE_clip_distance", __s2))
    {
      return 7;
    }
    else if (!strcmp("GL_ARB_draw_buffers", __s2))
    {
      return 8;
    }
    else if (!strcmp("GL_ARB_draw_instanced", __s2))
    {
      return 9;
    }
    else if (!strcmp("GL_ARB_shader_texture_lod", __s2))
    {
      return 10;
    }
    else if (!strcmp("GL_ARB_texture_rectangle", __s2))
    {
      return 11;
    }
    else if (!strcmp("GL_EXT_bindable_uniform", __s2))
    {
      return 12;
    }
    else if (!strcmp("GL_EXT_geometry_shader4", __s2))
    {
      return 13;
    }
    else if (!strcmp("GL_EXT_gpu_shader4", __s2))
    {
      return 14;
    }
    else if (!strcmp("GL_EXT_texture_array", __s2))
    {
      return 15;
    }
    else if (!strcmp("GL_APPLE_vertex_point_size", __s2))
    {
      return 16;
    }
    else if (!strcmp("GL_ARB_explicit_attrib_location", __s2))
    {
      return 17;
    }
    else if (!strcmp("GL_ARB_gpu_shader_fp64", __s2))
    {
      return 18;
    }
    else if (!strcmp("GL_ARB_gpu_shader5", __s2))
    {
      return 19;
    }
    else if (!strcmp("GL_ARB_sample_shading", __s2))
    {
      return 20;
    }
    else if (!strcmp("GL_ARB_separate_shader_objects", __s2))
    {
      return 21;
    }
    else if (!strcmp("GL_ARB_shader_bit_encoding", __s2))
    {
      return 22;
    }
    else if (!strcmp("GL_ARB_shader_precision", __s2))
    {
      return 23;
    }
    else if (!strcmp("GL_ARB_shader_subroutine", __s2))
    {
      return 24;
    }
    else if (!strcmp("GL_ARB_shading_language_include", __s2))
    {
      return 25;
    }
    else if (!strcmp("GL_ARB_tessellation_shader", __s2))
    {
      return 26;
    }
    else if (!strcmp("GL_ARB_texture_cube_map_array", __s2))
    {
      return 27;
    }
    else if (!strcmp("GL_ARB_texture_gather", __s2))
    {
      return 28;
    }
    else if (!strcmp("GL_ARB_texture_multisample", __s2))
    {
      return 29;
    }
    else if (!strcmp("GL_ARB_texture_query_lod", __s2))
    {
      return 30;
    }
    else if (!strcmp("GL_ARB_vertex_attrib_64bit", __s2))
    {
      return 31;
    }
    else if (!strcmp("GL_ARB_viewport_array", __s2))
    {
      return 32;
    }
    else if (!strcmp("GL_APPLE_shader_draw_parameters_draw_id", __s2))
    {
      return 33;
    }
    else if (!strcmp("GL_APPLE_bad_sl_glsl_usage", __s2))
    {
      return 34;
    }
    else if (!strcmp("GL_APPLE_special_ops", __s2))
    {
      return 35;
    }
    else if (!strcmp("GL_APPLE_sa_assertions", __s2))
    {
      return 36;
    }
    else if (!strcmp("GL_APPLE_fail_mixed_int_uint", __s2))
    {
      return 37;
    }
    else
    {
      return 38;
    }
  }
  return result;
}

char *glpExtensionToString(unsigned int a1)
{
  if (a1 >= 0x26) {
    abort();
  }
  return off_264D996A0[a1];
}

uint64_t glpExtensionAllowed(uint64_t a1, int a2)
{
  int GLProfile = glpCompilerGetGLProfile(a1);
  uint64_t NameTable = glpCompilerGetNameTable(a1);
  unsigned int GLSLVersion = glpNameTableGetGLSLVersion(NameTable);
  uint64_t result = 1;
  switch(a2)
  {
    case 0:
    case 3:
    case 4:
    case 5:
      BOOL v10 = GLProfile == 4 && GLSLVersion == 0;
      return GLProfile == 3 || v10;
    case 1:
    case 2:
    case 7:
      return (GLProfile - 3) < 2;
    case 6:
      BOOL v8 = GLProfile == 1 && GLSLVersion == 0;
      goto LABEL_4;
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 34:
      BOOL v8 = GLProfile == 0;
      goto LABEL_4;
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
      BOOL v8 = GLProfile == 1;
LABEL_4:
      uint64_t result = v8;
      break;
    case 26:
      uint64_t result = GLProfile == 1 && GLSLVersion > 4;
      break;
    case 35:
    case 36:
    case 37:
      return result;
    default:
      abort();
  }
  return result;
}

uint64_t glpExtensionAllowedAndDefault(uint64_t a1, int a2)
{
  int GLProfile = glpCompilerGetGLProfile(a1);
  uint64_t NameTable = glpCompilerGetNameTable(a1);
  unsigned int GLSLVersion = glpNameTableGetGLSLVersion(NameTable);
  uint64_t v7 = glpCompilerGetNameTable(a1);
  int Language = glpNameTableGetLanguage(v7);
  uint64_t result = 0;
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 12:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 35:
    case 36:
      return result;
    case 8:
    case 11:
      BOOL v10 = GLProfile == 0;
      goto LABEL_6;
    case 13:
      if (GLProfile) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = Language == 3;
      }
LABEL_6:
      uint64_t result = v10;
      break;
    case 26:
      BOOL v11 = (Language - 1) < 2;
      if (GLSLVersion < 5) {
        BOOL v11 = 0;
      }
      uint64_t result = GLProfile == 1 && v11;
      break;
    case 34:
      if (GLProfile) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = glpCompilerGetIOSVersion(a1) >> 31;
      }
      break;
    case 37:
      uint64_t result = GLSLVersion < 8;
      break;
    default:
      abort();
  }
  return result;
}

char *glpLanguageToString(unsigned int a1)
{
  if (a1 >= 5) {
    abort();
  }
  return off_264D997D0[a1];
}

uint64_t glpFixInterpolateAt(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t PointerHash = glpMakePointerHash(a1);
  unint64_t v10 = *(unsigned int *)(a3 + 32);
  if (v10)
  {
    uint64_t v11 = 0;
    for (unint64_t i = 0; i < v10; ++i)
    {
      uint64_t v13 = *(unint64_t **)(*(void *)(a3 + 40) + v11);
      if (v13)
      {
        glpPointerHashPut(PointerHash, *v13, (uint64_t)v13, v9);
        unint64_t v10 = *(unsigned int *)(a3 + 32);
      }
      v11 += 32;
    }
  }

  return _fixInterpolateAt((uint64_t)a1, PointerHash, a4, a2);
}

uint64_t _fixInterpolateAt(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v7 = result;
    if (glpASTNodeGetChildCount(a4))
    {
      unsigned int v8 = 0;
      do
      {
        uint64_t Child = glpASTNodeGetChild(a4, v8);
        _fixInterpolateAt(v7, a2, a3, Child);
        ++v8;
      }
      while (v8 < glpASTNodeGetChildCount(a4));
    }
    uint64_t result = glpASTNodeGetKind(a4);
    if (result == 84)
    {
      return _fixInterpolateAtInPPStreamOp(v7, a2, a3, a4);
    }
  }
  return result;
}

uint64_t _fixInterpolateAtInPPStreamOp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = glpPPStreamOpNodeGetOpcode(a4);
  if ((result - 167) <= 2)
  {
    uint64_t v9 = glpCallNodeGetArg(a4, 0);
    Variableuint64_t Extra = glpLValueNodeGetVariableExtra(v9);
    uint64_t v11 = glpPointerHashGet(a2, VariableExtra);
    glpASTNodeGetSaType(v9);
    uint64_t Offset = glpDerefNodeGetOffset(v9);
    if (Offset)
    {
      uint64_t v13 = Offset;
      Offsetuint64_t Expr = glpOffsetNodeGetOffsetExpr(Offset);
      uint64_t v15 = OffsetExpr;
      if (OffsetExpr)
      {
        uint64_t SaType = glpASTNodeGetSaType(OffsetExpr);
        Value = (unsigned int *)glpConstantNodeGetValue(v15);
        LODWORD(v15) = glpValueGetAsSize(SaType, Value);
      }
      unsigned int Swizzle = glpOffsetNodeGetSwizzle(v13);
      uint64_t v19 = a1;
      uint64_t v20 = (uint64_t *)VariableExtra;
      int v21 = v15;
    }
    else
    {
      uint64_t v19 = a1;
      uint64_t v20 = (uint64_t *)VariableExtra;
      int v21 = 0;
      unsigned int Swizzle = 0;
    }
    uint64_t v22 = v11 + 8 * _slotInLocationForOffsetIntoUserIn(v19, v20, v21, Swizzle);
    uint64_t v23 = glpIntHashGet(a3, *(_DWORD *)(v22 + 16));
    int Swizzle_0 = glpMakeSwizzle_0(v23, v24, v25, v26, v27, v28, v29, v30, *(_DWORD *)(v22 + 20));
    glpASTNodeGetLocation(v9, &v44);
    uint64_t OffsetNode = glpMakeOffsetNode(a1, (long long *)&v44);
    glpOffsetNodeSetSwizzle(OffsetNode, Swizzle_0);
    uint64_t v33 = glpASTNodeGetSaType(v23);
    int PrimitiveType = glpPrimitiveTypeGetPrimitiveType(v33);
    glpOffsetNodeSetPreSwizzlePrimitiveType(OffsetNode, PrimitiveType);
    glpMakeOffsetObject(a1);
    glpOffsetNodeSetExtra(OffsetNode, v35);
    glpASTNodeGetLocation(v9, &v43);
    uint64_t VariableName = glpLValueNodeGetVariableName(v9);
    uint64_t v38 = v37;
    uint64_t Extra = glpVariableDeclarationNodeGetExtra(v23);
    uint64_t LValueNode = glpMakeLValueNode(a1, &v43, VariableName, v38, Extra);
    glpDerefNodeSetOffset(LValueNode, OffsetNode);
    uint64_t v41 = glpGetPrimitiveType(1u);
    glpASTNodeSetSaType(LValueNode, (uint64_t)v41);
    glpASTNodeSetSaFlags(LValueNode, 0);
    uint64_t v42 = glpLValueNodeGetVariableExtra(LValueNode);
    *(void *)(v42 + 48) |= 0x1000000uLL;
    return glpCallNodeSetArg(a4, 0, LValueNode);
  }
  return result;
}

uint64_t _slotInLocationForOffsetIntoUserIn(uint64_t a1, uint64_t *a2, int a3, unsigned int a4)
{
  unsigned int v8 = glpABIGetTypeSize(0, *a2, 0);
  unsigned int Size = glpTypeSizeGetSize(v8);
  unint64_t v10 = (_DWORD *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 4 * Size, "Array of vec4 types for fixing interpolateAt");
  glpTypeGetAppleVec4Types((unsigned int *)*a2, v10, 1, 0, 0, 0, 0, 0, 0);
  if (a3)
  {
    uint64_t v11 = 0;
    int v12 = 0;
    do
    {
      if (BitSetGetEquals(a2[15], v11)) {
        v12 += glpPrimitiveTypeGetScalarCount(v10[v11]);
      }
      ++v11;
    }
    while (a3 != v11);
  }
  else
  {
    int v12 = 0;
  }
  if ((a4 & 7) == 1) {
    int v13 = (a4 >> 3) & 3;
  }
  else {
    int v13 = 0;
  }
  return (v12 + v13);
}

uint64_t glpMakeSwizzle_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  return (8 * a9) | 1u;
}

uint64_t glpGetBIArchiveData(int a1, uint8_t **a2, _DWORD *a3)
{
  memset(&v10, 0, sizeof(v10));
  if (dladdr(&glpGetBIArchiveData__anchor, &v10))
  {
    unint64_t size = 0;
    long long v6 = getsectiondata((const mach_header_64 *)v10.dli_fbase, "__GLSLBUILTINS", ARCHIVE_SECTIONS[a1], &size);
    if (v6)
    {
      *a2 = v6;
      *a3 = size;
      return 1;
    }
    unsigned int v8 = "getsectiondata() == NULL";
  }
  else
  {
    unsigned int v8 = "dladdr() != 0";
  }
  _glpSetCrashLogMessage((uint64_t)v8);
  return 0;
}

uint64_t glpParseRecover(uint64_t result)
{
  *(_DWORD *)(result + 8) = 1;
  return result;
}

uint64_t glpInitializeExtensionBehavior(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = a1 + 616;
  do
  {
    *(_DWORD *)(v3 + 4 * v2) = 3;
    uint64_t result = glpExtensionAllowedAndDefault(*(void *)(a1 + 784), v2);
    if (result)
    {
      *(_DWORD *)(v3 + 4 * v2) = 1;
      uint64_t NameTable = glpCompilerGetNameTable(*(void *)(a1 + 784));
      uint64_t result = glpNameTableSetGLSLExtensionBehavior(NameTable, v2, 1);
    }
    ++v2;
  }
  while (v2 != 38);
  return result;
}

uint64_t glpAddExtensionDefines(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = a1 + 40;
  do
  {
    BOOL v4 = glpAddExtensionDefines_builtinDefines[v2];
    size_t v5 = strlen(v4);
    long long v6 = (char *)malloc_type_malloc(v5 + 14, 0x7081ABB9uLL);
    if (!v6) {
LABEL_10:
    }
      abort();
    uint64_t v7 = (uint64_t)v6;
    sprintf_l(v6, 0, "#define %s 1\n", v4);
    ScanFromSimpleString(v3, v7, 1);
    ++v2;
  }
  while (v2 != 2);
  for (unsigned int i = 0; i != 38; ++i)
  {
    uint64_t result = glpExtensionAllowed(*(void *)(a1 + 784), i);
    if (result)
    {
      Dl_info v10 = glpExtensionToString(i);
      size_t v11 = strlen(v10);
      int v12 = (char *)malloc_type_malloc(v11 + 14, 0x7081ABB9uLL);
      if (!v12) {
        goto LABEL_10;
      }
      uint64_t v13 = (uint64_t)v12;
      sprintf_l(v12, 0, "#define %s 1\n", v10);
      uint64_t result = ScanFromSimpleString(v3, v13, 1);
    }
  }
  return result;
}

uint64_t glpInitParseContext(uint64_t *a1, uint64_t a2)
{
  bzero(a1, 0x320uLL);
  *(_DWORD *)a1 = glpCompilerGetLanguage(a2);
  *((_DWORD *)a1 + 152) = 1;
  a1[98] = a2;
  Allocator = (void *)glpCompilerGetAllocator(a2);
  uint64_t StringHash = glpMakeStringHash(Allocator);
  a1[4] = StringHash;
  glpStringHashPut(StringHash, "gl_DepthRangeParameters", 0x775A9C5100000017, 1, v6);
  glpStringHashPut(a1[4], "gl_FogParameters", 0x46B6471700000010, 1, v7);
  glpStringHashPut(a1[4], "gl_LightSourceParameters", 0xBE176FAB00000018, 1, v8);
  glpStringHashPut(a1[4], "gl_LightModelParameters", 0xCD6CB4500000017, 1, v9);
  glpStringHashPut(a1[4], "gl_LightModelProducts", 0xC75531D000000015, 1, v10);
  glpStringHashPut(a1[4], "gl_LightProducts", 0x7CA8967F00000010, 1, v11);
  glpStringHashPut(a1[4], "gl_MaterialParameters", 0xAE967D6C00000015, 1, v12);
  glpStringHashPut(a1[4], "gl_PointParameters", 0x3E31F0AB00000012, 1, v13);
  a1[9] = (uint64_t)a1;
  glpLexerNew((uint64_t)a1);

  return glpInitPreprocessor((uint64_t)(a1 + 5), 0, 0);
}

uint64_t glpFinalizeParseContext(uint64_t a1)
{
  glpFinalizePreprocessor(a1 + 40);

  return glpLexerFree(a1);
}

void *glpMakeLayoutObject(uint64_t a1)
{
  uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 16, "Layout Object");
  *uint64_t result = 0;
  result[1] = 0;
  return result;
}

uint64_t *glpLayoutObjectFind(uint64_t *result, int a2)
{
  do
    uint64_t result = (uint64_t *)*result;
  while (result && *((_DWORD *)result + 2) != a2);
  return result;
}

void *glpCopyLayoutObject(void *a1, void **a2)
{
  if (!a2) {
    return 0;
  }
  BOOL v4 = (void *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 16, "Layout Object");
  *BOOL v4 = 0;
  v4[1] = 0;
  size_t v5 = *a2;
  if (*a2)
  {
    do
    {
      double v6 = (void *)*v5;
      double v7 = (void *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 24, "Layout Pair (copy)");
      *double v7 = 0;
      v7[1] = v5[1];
      v7[2] = v5[2];
      *double v7 = 0;
      double v8 = (void *)v4[1];
      if (!v8) {
        double v8 = v4;
      }
      *double v8 = v7;
      v4[1] = v7;
      size_t v5 = v6;
    }
    while (v6);
  }
  return v4;
}

uint64_t glpDestroyLayoutObject(uint64_t result, void **a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    BOOL v4 = *a2;
    if (v4)
    {
      do
      {
        size_t v5 = (void *)*v4;
        (*(void (**)(void))(v3 + 24))(*(void *)v3);
        BOOL v4 = v5;
      }
      while (v5);
    }
    double v6 = *(uint64_t (**)(uint64_t, void **))(v3 + 24);
    uint64_t v7 = *(void *)v3;
    return v6(v7, a2);
  }
  return result;
}

uint64_t glpLayoutObjectAppend(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, void *a6, int a7)
{
  uint64_t v13 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 24, "Layout Pair (no value)");
  *(_DWORD *)(v13 + 8) = a7;
  *(_DWORD *)(v13 + 12) = 0;
  long long v15 = *(_OWORD *)a3;
  uint64_t v16 = *(void *)(a3 + 16);
  return addPair(a2, &v15, a4, a5, a6, v13);
}

uint64_t addPair(uint64_t a1, long long *a2, unsigned int a3, uint64_t a4, void *a5, uint64_t a6)
{
  long long v94 = *a2;
  uint64_t v98 = *((void *)a2 + 2);
  int v12 = *(_DWORD *)(a6 + 8);
  int v13 = glpLayoutQualifierValueBehavior(v12);
  uint64_t v93 = a6;
  int v14 = *(_DWORD *)(a6 + 12);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_9;
    }
    if (a1)
    {
      char v15 = glpLayoutQualifierToString(v12);
      InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
      long long v102 = v94;
      uint64_t v103 = v98;
      glpLogMessage(InfoLog, 0, (uint64_t)&v102, "Identifier '%s' in layout must not have a value", v17, v18, v19, v20, v15);
    }
    return 0;
  }
  if (v13 == 1)
  {
    if (v14 == 1) {
      goto LABEL_9;
    }
    if (a1)
    {
      char v59 = glpLayoutQualifierToString(v12);
      uint64_t v60 = (uint64_t **)glpCompilerGetInfoLog(a1);
      long long v102 = v94;
      uint64_t v103 = v98;
      glpLogMessage(v60, 0, (uint64_t)&v102, "Identifier '%s' in layout must have a value", v61, v62, v63, v64, v59);
    }
    return 0;
  }
  if ((v13 - 2) < 2) {
LABEL_4:
  }
    abort();
LABEL_9:
  unsigned int v92 = a3;
  uint64_t v91 = a4;
  uint64_t v21 = a1;
  long long v95 = *a2;
  uint64_t v99 = *((void *)a2 + 2);
  int v22 = *(_DWORD *)(v93 + 8);
  int v23 = glpLayoutQualifierValueBehavior(v22);
  int v24 = glpLayoutQualifierMutexGroup(v22);
  int v25 = glpLayoutMutexGroupBehavior(v24);
  uint64_t v26 = (void *)*a5;
  if (*a5)
  {
    int v27 = v25;
    while (1)
    {
      uint64_t v28 = v26;
      uint64_t v26 = (void *)*v26;
      int v29 = *((_DWORD *)v28 + 2);
      int v30 = glpLayoutQualifierMutexGroup(v29);
      if (v27) {
        BOOL v31 = v24 == v30;
      }
      else {
        BOOL v31 = 0;
      }
      int v32 = v31;
      if (v22 != v29 && v32 == 0) {
        goto LABEL_39;
      }
      if (v23 == 1)
      {
        if (*(_DWORD *)(v93 + 16) != *((_DWORD *)v28 + 4))
        {
          if (v21)
          {
            uint64_t v65 = (uint64_t **)glpCompilerGetInfoLog(v21);
            char v66 = glpLayoutQualifierToString(v22);
            long long v102 = v95;
            uint64_t v103 = v99;
            glpLogMessage(v65, 0, (uint64_t)&v102, "New value for layout '%s' ('%d') does not match previous declaration ('%d')", v67, v68, v69, v70, v66);
          }
          return 0;
        }
      }
      else if ((v23 - 2) < 2)
      {
        goto LABEL_4;
      }
      if (v27 != 2)
      {
        if (v27 == 1)
        {
          uint64_t v34 = 0;
          uint64_t v35 = a5;
          while (1)
          {
            uint64_t v36 = v34;
            uint64_t v34 = (void *)*v35;
            if (!*v35) {
              break;
            }
            uint64_t v35 = (void *)*v35;
            if (*((_DWORD *)v34 + 2) == v29) {
              goto LABEL_35;
            }
          }
        }
        goto LABEL_39;
      }
      if (v22 != v29)
      {
        if (v21)
        {
          int v71 = (uint64_t **)glpCompilerGetInfoLog(v21);
          char v72 = glpLayoutMutexGroupToString(v24);
          glpLayoutQualifierToString(v22);
          glpLayoutQualifierToString(v29);
          long long v102 = v95;
          uint64_t v103 = v99;
          glpLogMessage(v71, 0, (uint64_t)&v102, "New %s layout '%s' does not match previous declaration ('%s')", v73, v74, v75, v76, v72);
        }
        return 0;
      }
      uint64_t v34 = 0;
      uint64_t v37 = a5;
      do
      {
        uint64_t v36 = v34;
        uint64_t v34 = (void *)*v37;
        if (!*v37) {
          goto LABEL_39;
        }
        uint64_t v37 = (void *)*v37;
      }
      while (*((_DWORD *)v34 + 2) != v22);
LABEL_35:
      uint64_t v38 = *v34;
      if (v36)
      {
        *uint64_t v36 = v38;
        if (v34 == (void *)a5[1]) {
          goto LABEL_42;
        }
LABEL_39:
        if (!v26) {
          break;
        }
      }
      else
      {
        *a5 = v38;
        if (v34 != (void *)a5[1]) {
          goto LABEL_39;
        }
        uint64_t v36 = 0;
LABEL_42:
        a5[1] = v36;
        if (!v26) {
          break;
        }
      }
    }
  }
  long long v96 = *a2;
  uint64_t v100 = *((void *)a2 + 2);
  int v39 = *(_DWORD *)(v93 + 8);
  if (v39 == 9)
  {
    uint64_t v40 = v21;
    unsigned int v41 = v92;
    if (*(_DWORD *)(v93 + 16))
    {
      if (v40)
      {
        uint64_t v48 = (uint64_t **)glpCompilerGetInfoLog(v40);
        int v49 = *(_DWORD *)(v93 + 16);
        long long v102 = v96;
        uint64_t v103 = v100;
        glpLogMessage(v48, 0, (uint64_t)&v102, "layout(stream=%d) value must be greater than or equal to zero and may not exceed (%u)", v50, v51, v52, v53, v49);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v40 = v21;
    unsigned int v41 = v92;
    if (v39 == 18 && (*(_DWORD *)(v93 + 16) - 33) <= 0xFFFFFFDF)
    {
      if (v40)
      {
        uint64_t v42 = (uint64_t **)glpCompilerGetInfoLog(v40);
        int v43 = *(_DWORD *)(v93 + 16);
        long long v102 = v96;
        uint64_t v103 = v100;
        glpLogMessage(v42, 0, (uint64_t)&v102, "layout(vertices=%d) value must be greater than zero and may not exceed gl_MaxPatchVertices (%u)", v44, v45, v46, v47, v43);
      }
      return 0;
    }
  }
  long long v97 = *a2;
  uint64_t v101 = *((void *)a2 + 2);
  if (!v40 || !v41) {
    goto LABEL_160;
  }
  uint64_t NameTable = glpCompilerGetNameTable(v40);
  int Language = glpNameTableGetLanguage(NameTable);
  unsigned int GLSLVersion = glpNameTableGetGLSLVersion(NameTable);
  int v57 = *(_DWORD *)(v93 + 8);
  unsigned int v58 = GLSLVersion;
  switch(v57)
  {
    case 0:
      BOOL v77 = v41 == 2 && Language == 3;
      int v78 = !v77;
      if (!v77 || (v91 & 0x20000000) != 0)
      {
        if (((v78 ^ 1) & (v91 >> 29) & 1) == 0) {
          goto LABEL_166;
        }
      }
      else if ((v91 & 0x40000000) == 0)
      {
        goto LABEL_166;
      }
      goto LABEL_160;
    case 1:
    case 2:
    case 4:
      if ((v91 & 0x20000000) == 0) {
        goto LABEL_166;
      }
      goto LABEL_77;
    case 3:
      if (v41 == 2 && (v91 & 0x20000000) != 0 && Language == 3) {
        goto LABEL_160;
      }
      if (v41 != 2 || (v91 & 0x20000000) == 0) {
        goto LABEL_166;
      }
      goto LABEL_72;
    case 5:
      if ((v91 & 0x20000000) == 0 || v41 != 2) {
        goto LABEL_166;
      }
      goto LABEL_118;
    case 6:
    case 7:
    case 8:
      if ((v91 & 0x40000000) == 0) {
        goto LABEL_166;
      }
LABEL_77:
      if (v41 != 2 || Language != 3) {
        goto LABEL_166;
      }
      goto LABEL_160;
    case 9:
      if ((v91 & 0x40000000) == 0 || (v41 & 0xFFFFFFF7) != 1) {
        goto LABEL_166;
      }
LABEL_118:
      if (Language != 3) {
        goto LABEL_166;
      }
      if (GLSLVersion > 7) {
        goto LABEL_160;
      }
      uint64_t v79 = NameTable;
      unsigned int v80 = 19;
      goto LABEL_138;
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      if ((v91 & 0x20000000) == 0 || v41 != 2) {
        goto LABEL_166;
      }
LABEL_72:
      if (Language != 2) {
        goto LABEL_166;
      }
      goto LABEL_160;
    case 18:
      if ((v91 & 0x40000000) != 0 && v41 == 2 && Language == 1) {
        goto LABEL_160;
      }
      goto LABEL_166;
    case 19:
    case 20:
      if ((v91 & 0x20000000) == 0 || v41 != 1) {
        goto LABEL_166;
      }
      goto LABEL_142;
    case 21:
    case 22:
    case 23:
      if (v41 != 7 && v41 != 2) {
        goto LABEL_166;
      }
      goto LABEL_89;
    case 24:
    case 25:
      if (v41 != 7 && v41 != 2 && v41 != 9) {
        goto LABEL_166;
      }
LABEL_89:
      if ((v91 & 0x100000000) == 0) {
        goto LABEL_166;
      }
      goto LABEL_160;
    case 26:
      if (GLSLVersion > 5
        || glpNameTableIsExtensionEnabled(NameTable, 0x11u)
        || glpNameTableIsExtensionEnabled(NameTable, 0x15u)
        || glpNameTableIsExtensionEnabled(NameTable, 1u)
        || glpNameTableIsExtensionEnabled(NameTable, 0x23u))
      {
        if ((v91 & 0x20000000) == 0 || Language) {
          unsigned int v81 = (Language == 4) & (v91 >> 30);
        }
        else {
          unsigned int v81 = 1;
        }
        if (v58 > 8) {
          goto LABEL_156;
        }
      }
      else
      {
        unsigned int v81 = 0;
      }
      if (!glpNameTableIsExtensionEnabled(NameTable, 0x15u) && !glpNameTableIsExtensionEnabled(NameTable, 1u)) {
        goto LABEL_158;
      }
LABEL_156:
      if (v81)
      {
        unsigned int v81 = 1;
      }
      else
      {
        if ((v91 & 0x60000000) == 0 || (v91 & 0x20000000) != 0 && !Language) {
          goto LABEL_166;
        }
        unsigned int v81 = (v91 & 0x40000000) == 0 || Language != 4;
      }
LABEL_158:
      if (v41 != 1 || !v81)
      {
LABEL_166:
        uint64_t v84 = (uint64_t **)glpCompilerGetInfoLog(v40);
        long long v102 = v97;
        uint64_t v103 = v101;
        char v90 = glpLayoutQualifierToString(v57);
        glpLogMessage(v84, 0, (uint64_t)&v102, "Invalid use of layout '%s'", v85, v86, v87, v88, v90);
        return 0;
      }
LABEL_160:
      *(void *)uint64_t v93 = 0;
      uint64_t v82 = (void *)a5[1];
      if (!v82) {
        uint64_t v82 = a5;
      }
      *uint64_t v82 = v93;
      a5[1] = v93;
      return 1;
    case 27:
      if ((v91 & 0x40000000) == 0 || (v41 & 0xFFFFFFF7) != 1 || Language != 4) {
        goto LABEL_166;
      }
      if (GLSLVersion > 6) {
        goto LABEL_160;
      }
      uint64_t v79 = NameTable;
      unsigned int v80 = 17;
LABEL_138:
      if (!glpNameTableIsExtensionEnabled(v79, v80)) {
        goto LABEL_166;
      }
      goto LABEL_160;
    case 28:
    case 29:
    case 30:
    case 33:
    case 34:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 79:
    case 80:
    case 81:
    case 83:
      if ((v41 & 0xFFFFFFF7) == 1) {
        goto LABEL_160;
      }
      goto LABEL_166;
    case 31:
    case 78:
      if ((v41 & 0xFFFFFFF7) == 1 && (v91 & 0x60000000) != 0) {
        goto LABEL_160;
      }
      goto LABEL_166;
    case 32:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
      if (v41 == 4) {
        goto LABEL_160;
      }
      goto LABEL_166;
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
      if ((v41 & 0xFFFFFFF7) == 1 && (v91 & 0x20000000) != 0) {
        goto LABEL_160;
      }
      goto LABEL_166;
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
      if ((v41 & 0xFFFFFFF7) == 1 && (v91 & 0x40000000) != 0) {
        goto LABEL_160;
      }
      goto LABEL_166;
    case 77:
      if ((v41 & 0xFFFFFFF7) != 1 || (v91 & 0x40000000) == 0) {
        goto LABEL_166;
      }
LABEL_142:
      if (Language != 4) {
        goto LABEL_166;
      }
      goto LABEL_160;
    case 82:
      if (v41 == 1 || v41 == 7) {
        goto LABEL_160;
      }
      goto LABEL_166;
    case 84:
      if (v41 <= 9 && ((1 << v41) & 0x282) != 0) {
        goto LABEL_160;
      }
      goto LABEL_166;
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
      goto LABEL_160;
    case 98:
    case 99:
      if (v41 == 5) {
        goto LABEL_160;
      }
      goto LABEL_166;
    default:
      goto LABEL_166;
  }
}

uint64_t glpLayoutObjectAppendInteger(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, void *a6, int a7, int a8)
{
  char v15 = (_DWORD *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 24, "Layout Pair (int value)");
  uint64_t v15[2] = a7;
  v15[3] = 1;
  v15[4] = a8;
  long long v17 = *(_OWORD *)a3;
  uint64_t v18 = *(void *)(a3 + 16);
  return addPair(a2, &v17, a4, a5, a6, (uint64_t)v15);
}

BOOL glpLayoutObjectAppendMany(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void **a5)
{
  if (!a5) {
    return 1;
  }
  double v9 = *a5;
  do
  {
    double v10 = v9;
    if (!v9) {
      break;
    }
    double v9 = (void *)*v9;
    double v11 = (void *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 24, "Layout Pair (copy)");
    *double v11 = 0;
    v11[1] = v10[1];
    v11[2] = v10[2];
    long long v13 = *(_OWORD *)a3;
    uint64_t v14 = *(void *)(a3 + 16);
  }
  while (addPair(a2, &v13, 0, 0, a4, (uint64_t)v11));
  return v10 == 0;
}

void glpLayoutObjectRemove(uint64_t a1, void *a2, int a3)
{
  uint64_t v3 = 0;
  BOOL v4 = a2;
  while (1)
  {
    size_t v5 = v3;
    uint64_t v3 = (void *)*v4;
    if (!*v4) {
      break;
    }
    BOOL v4 = (void *)*v4;
    if (*((_DWORD *)v3 + 2) == a3)
    {
      uint64_t v6 = *v3;
      if (v5)
      {
        *size_t v5 = v6;
        if (v3 != (void *)a2[1]) {
          return;
        }
      }
      else
      {
        *a2 = v6;
        if (v3 != (void *)a2[1]) {
          return;
        }
        size_t v5 = 0;
      }
      a2[1] = v5;
      return;
    }
  }
}

uint64_t *glpLayoutObjectGetGeomInOut(uint64_t *result, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v6 = result;
  while (1)
  {
    uint64_t v6 = (uint64_t *)*v6;
    if (!v6) {
      break;
    }
    if (!*((_DWORD *)v6 + 2))
    {
      if (a4) {
        *a4 = 0;
      }
      if (a5) {
        *a5 = 0;
      }
      if (a2) {
        *a2 = 1;
      }
      break;
    }
  }
  uint64_t v7 = result;
  while (1)
  {
    uint64_t v7 = (uint64_t *)*v7;
    if (!v7) {
      break;
    }
    if (*((_DWORD *)v7 + 2) == 1)
    {
      if (a4) {
        *a4 = 1;
      }
      if (a2) {
        *a2 = 2;
      }
      break;
    }
  }
  double v8 = result;
  while (1)
  {
    double v8 = (uint64_t *)*v8;
    if (!v8) {
      break;
    }
    if (*((_DWORD *)v8 + 2) == 2)
    {
      if (a4) {
        *a4 = 10;
      }
      if (a2) {
        *a2 = 4;
      }
      break;
    }
  }
  double v9 = result;
  while (1)
  {
    double v9 = (uint64_t *)*v9;
    if (!v9) {
      break;
    }
    if (*((_DWORD *)v9 + 2) == 3)
    {
      if (a4) {
        *a4 = 4;
      }
      if (a2) {
        *a2 = 3;
      }
      break;
    }
  }
  double v10 = result;
  while (1)
  {
    double v10 = (uint64_t *)*v10;
    if (!v10) {
      break;
    }
    if (*((_DWORD *)v10 + 2) == 4)
    {
      if (a4) {
        *a4 = 12;
      }
      if (a2) {
        *a2 = 6;
      }
      break;
    }
  }
  double v11 = result;
  do
  {
    double v11 = (uint64_t *)*v11;
    if (!v11)
    {
      BOOL v12 = a5 != 0;
      goto LABEL_45;
    }
  }
  while (*((_DWORD *)v11 + 2) != 6);
  if (a5)
  {
    *a5 = 3;
    BOOL v12 = 1;
  }
  else
  {
    BOOL v12 = 0;
  }
LABEL_45:
  long long v13 = result;
  while (1)
  {
    long long v13 = (uint64_t *)*v13;
    if (!v13) {
      break;
    }
    if (*((_DWORD *)v13 + 2) == 7)
    {
      if (v12) {
        *a5 = 5;
      }
      break;
    }
  }
  uint64_t v14 = result;
  while (1)
  {
    uint64_t v14 = (uint64_t *)*v14;
    if (!v14) {
      break;
    }
    if (*((_DWORD *)v14 + 2) == 8)
    {
      if (a3)
      {
        char v15 = result;
        do
          char v15 = (uint64_t *)*v15;
        while (v15 && *((_DWORD *)v15 + 2) != 8);
        *a3 = *((_DWORD *)v15 + 4);
      }
      break;
    }
  }
  uint64_t v16 = result;
  while (1)
  {
    uint64_t v16 = (uint64_t *)*v16;
    if (!v16) {
      break;
    }
    if (*((_DWORD *)v16 + 2) == 5)
    {
      if (a6)
      {
        do
          uint64_t result = (uint64_t *)*result;
        while (result && *((_DWORD *)result + 2) != 5);
        *a6 = *((_DWORD *)result + 4);
      }
      return result;
    }
  }
  return result;
}

BOOL glpLayoutQualifierFromString(char *__s2, uint64_t a2, int *a3)
{
  if (glpStringsEqual("points", 0x7B7EE50D00000006, __s2, a2))
  {
    int v6 = 0;
  }
  else if (glpStringsEqual("lines", 0x12E7E8E100000005, __s2, a2))
  {
    int v6 = 1;
  }
  else if (glpStringsEqual("lines_adjacency", 0xFE3C3DF0000000FLL, __s2, a2))
  {
    int v6 = 2;
  }
  else if (glpStringsEqual("triangles", 0x4499ED2F00000009, __s2, a2))
  {
    int v6 = 3;
  }
  else if (glpStringsEqual("triangles_adjacency", 0x4DA743600000013, __s2, a2))
  {
    int v6 = 4;
  }
  else if (glpStringsEqual("invocations", 0x5D18CBDA0000000BLL, __s2, a2))
  {
    int v6 = 5;
  }
  else if (glpStringsEqual("line_strip", 0xA97F411C0000000ALL, __s2, a2))
  {
    int v6 = 6;
  }
  else if (glpStringsEqual("triangle_strip", 0x363FB6020000000ELL, __s2, a2))
  {
    int v6 = 7;
  }
  else if (glpStringsEqual("max_vertices", 0x326FEE410000000CLL, __s2, a2))
  {
    int v6 = 8;
  }
  else if (glpStringsEqual("stream", 0x799D8DE900000006, __s2, a2))
  {
    int v6 = 9;
  }
  else if (glpStringsEqual("quads", 0x12E7139A00000005, __s2, a2))
  {
    int v6 = 10;
  }
  else if (glpStringsEqual("isolines", 0x18196CE900000008, __s2, a2))
  {
    int v6 = 11;
  }
  else if (glpStringsEqual("equal_spacing", 0x1517300C0000000DLL, __s2, a2))
  {
    int v6 = 12;
  }
  else if (glpStringsEqual("fractional_even_spacing", 0xFD76F59A00000017, __s2, a2))
  {
    int v6 = 13;
  }
  else if (glpStringsEqual("fractional_odd_spacing", 0x3A06069000000016, __s2, a2))
  {
    int v6 = 14;
  }
  else if (glpStringsEqual("cw", 0x178500000002, __s2, a2))
  {
    int v6 = 15;
  }
  else if (glpStringsEqual("ccw", 0x39B1A00000003, __s2, a2))
  {
    int v6 = 16;
  }
  else if (glpStringsEqual("point_mode", 0xCFB513380000000ALL, __s2, a2))
  {
    int v6 = 17;
  }
  else if (glpStringsEqual("vertices", 0x421BABD800000008, __s2, a2))
  {
    int v6 = 18;
  }
  else if (glpStringsEqual("origin_upper_left", 0x77C0A8C800000011, __s2, a2))
  {
    int v6 = 19;
  }
  else if (glpStringsEqual("pixel_center_integer", 0x1E02A93600000014, __s2, a2))
  {
    int v6 = 20;
  }
  else if (glpStringsEqual("shared", 0x76D5503200000006, __s2, a2))
  {
    int v6 = 21;
  }
  else if (glpStringsEqual("packed", 0x76DB285300000006, __s2, a2))
  {
    int v6 = 22;
  }
  else if (glpStringsEqual("std140", 0xFA5994CE00000006, __s2, a2))
  {
    int v6 = 23;
  }
  else if (glpStringsEqual("row_major", 0x5970B78800000009, __s2, a2))
  {
    int v6 = 24;
  }
  else if (glpStringsEqual("column_major", 0xE6CB1880000000CLL, __s2, a2))
  {
    int v6 = 25;
  }
  else if (glpStringsEqual("location", 0x7C6728BC00000008, __s2, a2))
  {
    int v6 = 26;
  }
  else if (glpStringsEqual("index", 0x1392090200000005, __s2, a2))
  {
    int v6 = 27;
  }
  else if (glpStringsEqual("$getter", 0x9A13093A00000007, __s2, a2))
  {
    int v6 = 28;
  }
  else if (glpStringsEqual("$setter", 0x9A1308B500000007, __s2, a2))
  {
    int v6 = 29;
  }
  else if (glpStringsEqual("$can_be_declared_invariant", 0xB61EFF3F0000001ALL, __s2, a2))
  {
    int v6 = 30;
  }
  else if (glpStringsEqual("$packed_copy_in_out", 0x9F188E8400000013, __s2, a2))
  {
    int v6 = 31;
  }
  else if (glpStringsEqual("$ppstreamop", 0xF8DF7DAF0000000BLL, __s2, a2))
  {
    int v6 = 32;
  }
  else if (glpStringsEqual("$pp_regtype", 0x25A314FE0000000BLL, __s2, a2))
  {
    int v6 = 33;
  }
  else if (glpStringsEqual("$pp_bindattrib_info_type", 0x170805C300000018, __s2, a2))
  {
    int v6 = 34;
  }
  else if (glpStringsEqual("$pp_bindattrib_generic_code", 0x78942BE50000001BLL, __s2, a2))
  {
    int v6 = 35;
  }
  else if (glpStringsEqual("$pp_bindattrib_generic_fill_w_0", 0x6D916CAB0000001FLL, __s2, a2))
  {
    int v6 = 36;
  }
  else if (glpStringsEqual("$pp_bindattrib_generic_on_vec4", 0xC50F77F30000001ELL, __s2, a2))
  {
    int v6 = 37;
  }
  else if (glpStringsEqual("$pp_bindattrib_generic_not_builtin", 0xAD81F67300000022, __s2, a2))
  {
    int v6 = 38;
  }
  else if (glpStringsEqual("$pp_bindattrib_position_origin_upper_left", 0x14C4DE9900000029, __s2, a2))
  {
    int v6 = 39;
  }
  else if (glpStringsEqual("$pp_bindattrib_position_pixel_center_integer", 0x6DCDB1C50000002CLL, __s2, a2))
  {
    int v6 = 40;
  }
  else if (glpStringsEqual("$pp_bindattrib_color_face", 0xC788CA3E00000019, __s2, a2))
  {
    int v6 = 41;
  }
  else if (glpStringsEqual("$pp_bindattrib_seccolor_face", 0x18EEFDE0000001CLL, __s2, a2))
  {
    int v6 = 42;
  }
  else if (glpStringsEqual("$pp_bindattrib_clipdistance_index", 0xD5DD809500000021, __s2, a2))
  {
    int v6 = 43;
  }
  else if (glpStringsEqual("$pp_bindattrib_samplemask_index", 0xEA9FD02E0000001FLL, __s2, a2))
  {
    int v6 = 44;
  }
  else if (glpStringsEqual("$pp_bindattrib_fragdata_buffer", 0xDD9F66730000001ELL, __s2, a2))
  {
    int v6 = 45;
  }
  else if (glpStringsEqual("$pp_bindparam_info_type", 0xE49DB01A00000017, __s2, a2))
  {
    int v6 = 46;
  }
  else if (glpStringsEqual("$pp_bindparam_generic_offset", 0x69D760E40000001CLL, __s2, a2))
  {
    int v6 = 47;
  }
  else if (glpStringsEqual("$pp_bindparam_generic_stride", 0x48B4EDFE0000001CLL, __s2, a2))
  {
    int v6 = 48;
  }
  else if (glpStringsEqual("$pp_bindparam_generic_type", 0x981C60B80000001ALL, __s2, a2))
  {
    int v6 = 49;
  }
  else if (glpStringsEqual("$pp_bindparam_light_index", 0x234A4D7300000019, __s2, a2))
  {
    int v6 = 50;
  }
  else if (glpStringsEqual("$pp_bindparam_light_binding", 0x9D1E58650000001BLL, __s2, a2))
  {
    int v6 = 51;
  }
  else if (glpStringsEqual("$pp_bindparam_lightprod_index", 0xC30C20DF0000001DLL, __s2, a2))
  {
    int v6 = 52;
  }
  else if (glpStringsEqual("$pp_bindparam_lightprod_face", 0xDAEB02810000001CLL, __s2, a2))
  {
    int v6 = 53;
  }
  else if (glpStringsEqual("$pp_bindparam_lightprod_binding", 0xB16F87D40000001FLL, __s2, a2))
  {
    int v6 = 54;
  }
  else if (glpStringsEqual("$pp_bindparam_material_face", 0xE5A951780000001BLL, __s2, a2))
  {
    int v6 = 55;
  }
  else if (glpStringsEqual("$pp_bindparam_material_binding", 0x4B6D3CC90000001ELL, __s2, a2))
  {
    int v6 = 56;
  }
  else if (glpStringsEqual("$pp_bindparam_texgen_texunit", 0x422A65E50000001CLL, __s2, a2))
  {
    int v6 = 57;
  }
  else if (glpStringsEqual("$pp_bindparam_texgen_texcoord", 0x1305E8E80000001DLL, __s2, a2))
  {
    int v6 = 58;
  }
  else if (glpStringsEqual("$pp_bindparam_texenv_texunit", 0x32AFA5880000001CLL, __s2, a2))
  {
    int v6 = 59;
  }
  else if (glpStringsEqual("$pp_bindparam_clipplane_index", 0x441FEC630000001DLL, __s2, a2))
  {
    int v6 = 60;
  }
  else if (glpStringsEqual("$pp_bindparam_matrix_matindex", 0x9970110A0000001DLL, __s2, a2))
  {
    int v6 = 61;
  }
  else if (glpStringsEqual("$pp_bindparam_matrix_transform", 0x191EDAA50000001ELL, __s2, a2))
  {
    int v6 = 62;
  }
  else if (glpStringsEqual("$pp_bindparam_matrix_rowindex", 0x4A6C18900000001DLL, __s2, a2))
  {
    int v6 = 63;
  }
  else if (glpStringsEqual("$pp_bindparam_matrix_binding", 0x57FC42400000001CLL, __s2, a2))
  {
    int v6 = 64;
  }
  else if (glpStringsEqual("$pp_bindparam_tfbuffer_index", 0x229FAFE40000001CLL, __s2, a2))
  {
    int v6 = 65;
  }
  else if (glpStringsEqual("$pp_bindparam_tfbuffer_stream", 0xA88EDAF70000001DLL, __s2, a2))
  {
    int v6 = 66;
  }
  else if (glpStringsEqual("$pp_bindparam_tfbuffer_stride", 0xA9BAEE60000001DLL, __s2, a2))
  {
    int v6 = 67;
  }
  else if (glpStringsEqual("$pp_bindoutput_info_type", 0xBEA893400000018, __s2, a2))
  {
    int v6 = 68;
  }
  else if (glpStringsEqual("$pp_bindoutput_generic_code", 0x91B38E370000001BLL, __s2, a2))
  {
    int v6 = 69;
  }
  else if (glpStringsEqual("$pp_bindoutput_generic_not_builtin", 0x5085B18500000022, __s2, a2))
  {
    int v6 = 70;
  }
  else if (glpStringsEqual("$pp_bindoutput_color_face", 0xD4E5200B00000019, __s2, a2))
  {
    int v6 = 71;
  }
  else if (glpStringsEqual("$pp_bindoutput_color_buffer", 0x8E57AB560000001BLL, __s2, a2))
  {
    int v6 = 72;
  }
  else if (glpStringsEqual("$pp_bindoutput_color_index", 0xD19BC26F0000001ALL, __s2, a2))
  {
    int v6 = 73;
  }
  else if (glpStringsEqual("$pp_bindoutput_seccolor_face", 0x89E2DB1B0000001CLL, __s2, a2))
  {
    int v6 = 74;
  }
  else if (glpStringsEqual("$pp_bindoutput_clipdistance_index", 0xDC303F4100000021, __s2, a2))
  {
    int v6 = 75;
  }
  else if (glpStringsEqual("$pp_bindoutput_samplemask_index", 0xB345128E0000001FLL, __s2, a2))
  {
    int v6 = 76;
  }
  else if (glpStringsEqual("$pp_draw_buffers", 0xF49461A300000010, __s2, a2))
  {
    int v6 = 77;
  }
  else if (glpStringsEqual("$block_slot", 0x2B007B0000000BLL, __s2, a2))
  {
    int v6 = 78;
  }
  else if (glpStringsEqual("$does_not_count_as_used_component", 0xC077861000000021, __s2, a2))
  {
    int v6 = 79;
  }
  else if (glpStringsEqual("$builtin_should_link_type_check", 0x982C93B50000001FLL, __s2, a2))
  {
    int v6 = 80;
  }
  else if (glpStringsEqual("$redeclarable", 0x55A31D420000000DLL, __s2, a2))
  {
    int v6 = 81;
  }
  else if (glpStringsEqual("$sso_redeclaration_required", 0xC04A20BA0000001BLL, __s2, a2))
  {
    int v6 = 82;
  }
  else if (glpStringsEqual("$nonarray_inout", 0xF79B6A9E0000000FLL, __s2, a2))
  {
    int v6 = 83;
  }
  else if (glpStringsEqual("$sized_by_extrinsic", 0xD81B12C500000013, __s2, a2))
  {
    int v6 = 84;
  }
  else if (glpStringsEqual("$full_type", 0x6B590F0000000ALL, __s2, a2))
  {
    int v6 = 85;
  }
  else if (glpStringsEqual("$array", 0x8539F78100000006, __s2, a2))
  {
    int v6 = 86;
  }
  else if (glpStringsEqual("$element_count", 0x650004DD0000000ELL, __s2, a2))
  {
    int v6 = 87;
  }
  else if (glpStringsEqual("$max_elements", 0xC73162D10000000DLL, __s2, a2))
  {
    int v6 = 88;
  }
  else if (glpStringsEqual("$struct", 0x3DC8107B00000007, __s2, a2))
  {
    int v6 = 89;
  }
  else if (glpStringsEqual("$indirect_const", 0xCE9154AA0000000FLL, __s2, a2))
  {
    int v6 = 90;
  }
  else if (glpStringsEqual("$inline", 0x9D91D10100000007, __s2, a2))
  {
    int v6 = 91;
  }
  else if (glpStringsEqual("$pure", 0x10ED079000000005, __s2, a2))
  {
    int v6 = 92;
  }
  else if (glpStringsEqual("$pure110", 0x8B40482E00000008, __s2, a2))
  {
    int v6 = 93;
  }
  else if (glpStringsEqual("$fail", 0x113B635200000005, __s2, a2))
  {
    int v6 = 94;
  }
  else if (glpStringsEqual("$sa_handling", 0x20FBBBCD0000000CLL, __s2, a2))
  {
    int v6 = 95;
  }
  else if (glpStringsEqual("$linker_generated", 0x1FE07ADD00000011, __s2, a2))
  {
    int v6 = 96;
  }
  else if (glpStringsEqual("$require_output_points", 0x4B326A8300000016, __s2, a2))
  {
    int v6 = 97;
  }
  else if (glpStringsEqual("$constexpr", 0xFA8DD1240000000ALL, __s2, a2))
  {
    int v6 = 98;
  }
  else
  {
    BOOL result = glpStringsEqual("$stage_in_ref", 0xFB428FA60000000DLL, __s2, a2);
    if (!result) {
      return result;
    }
    int v6 = 99;
  }
  *a3 = v6;
  return 1;
}

const char *glpLayoutQualifierToString(int a1)
{
  if ((a1 - 1) > 0x62) {
    return "points";
  }
  else {
    return off_264D99820[a1 - 1];
  }
}

uint64_t glpLayoutQualifierValueBehavior(int a1)
{
  if ((a1 - 5) > 0x55) {
    return 0;
  }
  else {
    return dword_2393D2330[a1 - 5];
  }
}

uint64_t glpLayoutQualifierMutexGroup(int a1)
{
  if ((a1 - 5) > 0x5E) {
    return 3;
  }
  else {
    return dword_2393D2488[a1 - 5];
  }
}

const char *glpLayoutMutexGroupToString(int a1)
{
  BOOL result = "buffer storage";
  switch(a1)
  {
    case 0:
      abort();
    case 2:
      BOOL result = "matrix storage";
      break;
    case 3:
      BOOL result = "primitive type";
      break;
    case 4:
      BOOL result = "winding";
      break;
    case 5:
      BOOL result = "spacing";
      break;
    case 6:
      BOOL result = "inliner mode";
      break;
    default:
      return result;
  }
  return result;
}

uint64_t glpLayoutMutexGroupBehavior(int a1)
{
  if ((a1 - 1) > 5) {
    return 0;
  }
  else {
    return dword_2393D2604[a1 - 1];
  }
}

_DWORD *glpCompileShader(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  memset(v18, 0, sizeof(v18));
  glpInitParseContext((uint64_t *)v18, (uint64_t)a1);
  *(void *)&long long v42 = a3;
  *((void *)&v42 + 1) = a4;
  *(void *)&long long v43 = a5;
  size_t v10 = strlen(a2);
  double v11 = malloc_type_malloc(v10 + 1, 0x7081ABB9uLL);
  if (!v11) {
    abort();
  }
  long long v17 = v11;
  strcpy((char *)v11, a2);
  int v16 = strlen(a2);
  if (glpPaParseStrings((uint64_t)v18, (uint64_t *)&v17, &v16, 1, 0)
    || (uint64_t v49 = glpSANode(a1, v49), v49 == -1))
  {
    glpFinalizeParseContext((uint64_t)v18);
    free(v17);
    return 0;
  }
  else
  {
    int Language = glpCompilerGetLanguage((uint64_t)a1);
    CompiledShader = glpMakeCompiledShader(Language, SDWORD2(v19), 0, 0);
    uint64_t ValueHash = glpCompilerGetValueHash((uint64_t)a1);
    glpSerializeAST(ValueHash, v49, (void *)CompiledShader + 2, CompiledShader + 2);
    CompiledShader[3] = glpCompilerRequiresOutputPoints((uint64_t)a1) != 0;
    free(v17);
    glpFinalizeParseContext((uint64_t)v18);
  }
  return CompiledShader;
}

void *__abort_malloc_0(size_t a1)
{
  BOOL result = malloc_type_malloc(a1, 0x7081ABB9uLL);
  if (!result) {
    abort();
  }
  return result;
}

_DWORD *glpMakeCompiledShader(int a1, int a2, uint64_t a3, int a4)
{
  BOOL result = malloc_type_malloc(0x18uLL, 0x7081ABB9uLL);
  if (!result) {
    abort();
  }
  *BOOL result = a1;
  result[1] = a2;
  *((void *)result + 2) = a3;
  result[2] = a4;
  result[3] = 0;
  return result;
}

uint64_t glpGetCompiledShaderLanguage(unsigned int *a1)
{
  return *a1;
}

uint64_t glpGetCompiledShaderVersion(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t glpGetCompiledShaderAST(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 8);
  return *(void *)(a1 + 16);
}

uint64_t glpCompiledShaderSerializedSize(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8) + 16;
}

void *glpCompiledShaderSerialize(uint64_t a1, void *a2)
{
  *a2 = *(void *)a1;
  size_t v2 = *(unsigned int *)(a1 + 8);
  a2[1] = v2;
  return memcpy(a2 + 2, *(const void **)(a1 + 16), v2);
}

_DWORD *glpCompiledShaderDeserialize(int *a1)
{
  int v2 = *a1;
  int v3 = a1[1];
  size_t v4 = a1[2];
  size_t v5 = malloc_type_malloc(v4, 0x7081ABB9uLL);
  if (!v5) {
    abort();
  }
  uint64_t v6 = (uint64_t)v5;
  memcpy(v5, a1 + 4, v4);

  return glpMakeCompiledShader(v2, v3, v6, v4);
}

void *glpMakeLinker(int a1, int a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long *a11, uint64_t a12, uint64_t a13)
{
  uint64_t v18 = malloc_type_malloc(0x170uLL, 0x7081ABB9uLL);
  if (!v18) {
    abort();
  }
  long long v19 = v18;
  glpInitPoolAllocator(0x8000, 0x8000, v18);
  *((_DWORD *)v19 + 14) = a1;
  *((_DWORD *)v19 + 15) = a2;
  *((_DWORD *)v19 + 10) = a3;
  *((_DWORD *)v19 + 11) = a4;
  *((_DWORD *)v19 + 12) = a5;
  v19[8] = a6;
  v19[9] = a7;
  v19[10] = a8;
  v19[11] = a9;
  long long v20 = *a11;
  long long v21 = a11[2];
  *(_OWORD *)(v19 + 39) = a11[1];
  *(_OWORD *)(v19 + 41) = v21;
  *(_OWORD *)(v19 + 37) = v20;
  v19[12] = a10;
  v19[43] = 0;
  v19[44] = a13;
  v19[28] = 5;
  v19[29] = ((uint64_t (*)(void, uint64_t, const char *))v19[1])(*v19, 40, "Vector Storage (GLPTFBuffer *)");
  v19[30] = 5;
  uint64_t v22 = 0;
  v19[31] = ((uint64_t (*)(void, uint64_t, const char *))v19[1])(*v19, 40, "Vector Storage (GLPTFStore *)");
  uint64_t v23 = 276;
  do
  {
    long long v24 = (_DWORD *)((char *)v19 + v23);
    *(v24 - 5) = 0;
    *long long v24 = 0;
    v19[v22 + 13] = 5;
    v19[v22 + 14] = ((uint64_t (*)(void, uint64_t, const char *))v19[1])(*v19, 40, "Vector Storage (GLPCompiledShader *)");
    v23 += 4;
    v22 += 2;
  }
  while (v22 != 10);
  long long v25 = getenv("GL_SHADER_STYLE_GUIDE");
  if (v25) {
    BOOL v26 = strcmp(v25, "0") != 0;
  }
  else {
    BOOL v26 = 0;
  }
  *((unsigned char *)v19 + 360) = v26;
  v19[4] = a12;
  return v19;
}

void glpDestroyLinker(void *a1)
{
  ((void (*)(void, void))a1[3])(*a1, a1[29]);
  ((void (*)(void, void))a1[3])(*a1, a1[31]);
  for (uint64_t i = 14; i != 24; i += 2)
    ((void (*)(void, void))a1[3])(*a1, a1[i]);
  glpDestroyPoolAllocator((uint64_t)a1);
  uint64_t v3 = a1[43];
  if (v3)
  {
    unint64_t v4 = *(unsigned int *)(v3 + 32);
    if (v4)
    {
      uint64_t v5 = 0;
      for (unint64_t j = 0; j < v4; ++j)
      {
        uint64_t v7 = *(void ***)(*(void *)(v3 + 40) + v5);
        if (v7)
        {
          free(*v7);
          free(v7);
          unint64_t v4 = *(unsigned int *)(v3 + 32);
        }
        v5 += 16;
      }
      uint64_t v3 = a1[43];
    }
    glpDestroyIntHash(v3);
  }

  free(a1);
}

uint64_t glpLinkerGetInfoLog(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t glpLinkerGetGenerateDebugMetadata(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

void *glpLinkerAddShader(void *a1, unsigned int *a2)
{
  unint64_t v4 = &a1[2 * *a2];
  int v5 = *((_DWORD *)v4 + 26);
  uint64_t v6 = *((unsigned int *)v4 + 27);
  if ((int)v6 + 1 <= v5)
  {
    size_t v10 = (char *)v4[14];
    int v13 = *((_DWORD *)v4 + 27);
  }
  else
  {
    if (v5 <= 1) {
      int v7 = 1;
    }
    else {
      int v7 = *((_DWORD *)v4 + 26);
    }
    int v8 = 2 * v7;
    if (v8 <= (int)v6 + 1) {
      unsigned int v9 = v6 + 1;
    }
    else {
      unsigned int v9 = v8;
    }
    size_t v10 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 8 * v9, "Vector Storage (GLPCompiledShader *, growth)");
    uint64_t v11 = (uint64_t)&a1[2 * *a2 + 13];
    memcpy(v10, *(const void **)(v11 + 8), 8 * *(unsigned int *)(v11 + 4));
    ((void (*)(void, void))a1[3])(*a1, a1[2 * *a2 + 14]);
    uint64_t v12 = (uint64_t)&a1[2 * *a2 + 13];
    *(_DWORD *)uint64_t v12 = v9;
    *(void *)(v12 + 8) = v10;
    int v13 = *(_DWORD *)(v12 + 4);
  }
  BOOL result = memmove(&v10[8 * v6 + 8], &v10[8 * v6], 8 * (v13 - v6));
  *(void *)(a1[2 * *a2 + 14] + 8 * v6) = a2;
  uint64_t v15 = (uint64_t)&a1[2 * *a2 + 13];
  ++*(_DWORD *)(v15 + 4);
  return result;
}

uint64_t glpLinkerGetMergedAST(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 8 * a2 + 184);
}

uint64_t serialize_bindings(void *a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a2 + 36);
  unsigned int v5 = (char)glp_serialized_integer32_control(v4);
  int v6 = *((_DWORD *)a1 + 8);
  uint64_t v7 = *((unsigned int *)a1 + 9);
  int v8 = v7 + 1;
  if ((int)v7 + 1 <= v6)
  {
    uint64_t v11 = (char *)a1[5];
    int v12 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v6 <= 1) {
      int v6 = 1;
    }
    int v9 = 2 * v6;
    if (v9 <= v8) {
      uint64_t v10 = v8;
    }
    else {
      uint64_t v10 = v9;
    }
    uint64_t v11 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v10, "Vector Storage (uint8_t, growth)");
    memcpy(v11, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v10;
    a1[5] = v11;
    int v12 = *((_DWORD *)a1 + 9);
  }
  uint64_t result = (uint64_t)memmove(&v11[v7 + 1], &v11[v7], (v12 - v7));
  *(unsigned char *)(a1[5] + v7) = v5;
  int v14 = *((_DWORD *)a1 + 9);
  unsigned int v15 = v14 + 1;
  *((_DWORD *)a1 + 9) = v14 + 1;
  if ((v5 & 0x80000000) != 0)
  {
    switch((v5 >> 1) & 7)
    {
      case 0u:
        unsigned int v16 = v14 + 2;
        int v17 = *((_DWORD *)a1 + 8);
        if (v16 <= v17)
        {
          long long v20 = (char *)a1[5];
          unsigned int v21 = v15;
        }
        else
        {
          if (v17 <= 1) {
            int v17 = 1;
          }
          int v18 = 2 * v17;
          if (v18 <= (int)v16) {
            uint64_t v19 = v16;
          }
          else {
            uint64_t v19 = v18;
          }
          long long v20 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v19, "Vector Storage (uint8_t, growth)");
          memcpy(v20, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v19;
          a1[5] = v20;
          unsigned int v21 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = (uint64_t)memmove(&v20[v15 + 1], &v20[v15], v21 - v15);
        *(unsigned char *)(a1[5] + v15) = v4;
        int v40 = 1;
        goto LABEL_47;
      case 1u:
        unsigned int v34 = v14 + 3;
        int v35 = *((_DWORD *)a1 + 8);
        if (v34 <= v35)
        {
          long long v38 = (char *)a1[5];
          unsigned int v39 = v15;
        }
        else
        {
          if (v35 <= 1) {
            int v35 = 1;
          }
          int v36 = 2 * v35;
          if (v36 <= (int)v34) {
            uint64_t v37 = v34;
          }
          else {
            uint64_t v37 = v36;
          }
          long long v38 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v37, "Vector Storage (uint8_t, growth)");
          memcpy(v38, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v37;
          a1[5] = v38;
          unsigned int v39 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = (uint64_t)memmove(&v38[v15 + 1], &v38[v15], v39 - v15);
        *(_WORD *)(a1[5] + v15) = v4;
        int v40 = 2;
        goto LABEL_47;
      case 2u:
        unsigned int v22 = v14 + 4;
        int v23 = *((_DWORD *)a1 + 8);
        if (v22 <= v23)
        {
          BOOL v26 = (char *)a1[5];
          unsigned int v27 = v15;
        }
        else
        {
          if (v23 <= 1) {
            int v23 = 1;
          }
          int v24 = 2 * v23;
          if (v24 <= (int)v22) {
            uint64_t v25 = v22;
          }
          else {
            uint64_t v25 = v24;
          }
          BOOL v26 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v25, "Vector Storage (uint8_t, growth)");
          memcpy(v26, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v25;
          a1[5] = v26;
          unsigned int v27 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = (uint64_t)memmove(&v26[v15 + 1], &v26[v15], v27 - v15);
        uint64_t v41 = a1[5] + v15;
        *(unsigned char *)(v41 + 2) = BYTE2(v4);
        *(_WORD *)uint64_t v41 = v4;
        int v40 = 3;
        goto LABEL_47;
      case 3u:
        unsigned int v28 = v14 + 5;
        int v29 = *((_DWORD *)a1 + 8);
        if (v28 <= v29)
        {
          long long v32 = (char *)a1[5];
          unsigned int v33 = v15;
        }
        else
        {
          if (v29 <= 1) {
            int v29 = 1;
          }
          int v30 = 2 * v29;
          if (v30 <= (int)v28) {
            uint64_t v31 = v28;
          }
          else {
            uint64_t v31 = v30;
          }
          long long v32 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v31, "Vector Storage (uint8_t, growth)");
          memcpy(v32, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v31;
          a1[5] = v32;
          unsigned int v33 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = (uint64_t)memmove(&v32[v15 + 1], &v32[v15], v33 - v15);
        *(_DWORD *)(a1[5] + v15) = v4;
        int v40 = 4;
LABEL_47:
        *((_DWORD *)a1 + 9) += v40;
        break;
      default:
        break;
    }
  }
  unint64_t v42 = *(unsigned int *)(a2 + 32);
  if (v42)
  {
    uint64_t v43 = 0;
    for (unint64_t i = 0; i < v42; ++i)
    {
      uint64_t v45 = *(void *)(a2 + 40);
      long long v46 = *(unsigned int **)(v45 + v43);
      if (v46)
      {
        serialize_GLPString(a1, *(const char **)(v45 + v43 + 8), *(void *)(v45 + v43 + 16));
        int v47 = *v46;
        char v48 = glp_serialized_integer32_control(*v46);
        int v49 = *((_DWORD *)a1 + 8);
        uint64_t v50 = *((unsigned int *)a1 + 9);
        int v51 = v50 + 1;
        if ((int)v50 + 1 <= v49)
        {
          uint64_t v54 = (char *)a1[5];
          int v55 = *((_DWORD *)a1 + 9);
        }
        else
        {
          if (v49 <= 1) {
            int v49 = 1;
          }
          int v52 = 2 * v49;
          if (v52 <= v51) {
            uint64_t v53 = v51;
          }
          else {
            uint64_t v53 = v52;
          }
          uint64_t v54 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v53, "Vector Storage (uint8_t, growth)");
          memcpy(v54, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v53;
          a1[5] = v54;
          int v55 = *((_DWORD *)a1 + 9);
        }
        memmove(&v54[v50 + 1], &v54[v50], (v55 - v50));
        *(unsigned char *)(a1[5] + v50) = v48;
        int v56 = *((_DWORD *)a1 + 9);
        unsigned int v57 = v56 + 1;
        *((_DWORD *)a1 + 9) = v56 + 1;
        if (v48 < 0)
        {
          switch((v48 >> 1) & 7)
          {
            case 0u:
              unsigned int v58 = v56 + 2;
              int v59 = *((_DWORD *)a1 + 8);
              if (v58 <= v59)
              {
                uint64_t v62 = (char *)a1[5];
                unsigned int v63 = v57;
              }
              else
              {
                if (v59 <= 1) {
                  int v59 = 1;
                }
                int v60 = 2 * v59;
                if (v60 <= (int)v58) {
                  uint64_t v61 = v58;
                }
                else {
                  uint64_t v61 = v60;
                }
                uint64_t v62 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v61, "Vector Storage (uint8_t, growth)");
                memcpy(v62, (const void *)a1[5], *((unsigned int *)a1 + 9));
                ((void (*)(void, void))a1[3])(*a1, a1[5]);
                *((_DWORD *)a1 + 8) = v61;
                a1[5] = v62;
                unsigned int v63 = *((_DWORD *)a1 + 9);
              }
              memmove(&v62[v57 + 1], &v62[v57], v63 - v57);
              *(unsigned char *)(a1[5] + v57) = v47;
              int v83 = 1;
              goto LABEL_97;
            case 1u:
              unsigned int v76 = v56 + 3;
              int v77 = *((_DWORD *)a1 + 8);
              if (v76 <= v77)
              {
                unsigned int v80 = (char *)a1[5];
                unsigned int v81 = v57;
              }
              else
              {
                if (v77 <= 1) {
                  int v77 = 1;
                }
                int v78 = 2 * v77;
                if (v78 <= (int)v76) {
                  uint64_t v79 = v76;
                }
                else {
                  uint64_t v79 = v78;
                }
                unsigned int v80 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v79, "Vector Storage (uint8_t, growth)");
                memcpy(v80, (const void *)a1[5], *((unsigned int *)a1 + 9));
                ((void (*)(void, void))a1[3])(*a1, a1[5]);
                *((_DWORD *)a1 + 8) = v79;
                a1[5] = v80;
                unsigned int v81 = *((_DWORD *)a1 + 9);
              }
              memmove(&v80[v57 + 1], &v80[v57], v81 - v57);
              *(_WORD *)(a1[5] + v57) = v47;
              int v83 = 2;
              goto LABEL_97;
            case 2u:
              unsigned int v64 = v56 + 4;
              int v65 = *((_DWORD *)a1 + 8);
              if (v64 <= v65)
              {
                uint64_t v68 = (char *)a1[5];
                unsigned int v69 = v57;
              }
              else
              {
                if (v65 <= 1) {
                  int v65 = 1;
                }
                int v66 = 2 * v65;
                if (v66 <= (int)v64) {
                  uint64_t v67 = v64;
                }
                else {
                  uint64_t v67 = v66;
                }
                uint64_t v68 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v67, "Vector Storage (uint8_t, growth)");
                memcpy(v68, (const void *)a1[5], *((unsigned int *)a1 + 9));
                ((void (*)(void, void))a1[3])(*a1, a1[5]);
                *((_DWORD *)a1 + 8) = v67;
                a1[5] = v68;
                unsigned int v69 = *((_DWORD *)a1 + 9);
              }
              memmove(&v68[v57 + 1], &v68[v57], v69 - v57);
              uint64_t v82 = a1[5] + v57;
              *(unsigned char *)(v82 + 2) = BYTE2(v47);
              *(_WORD *)uint64_t v82 = v47;
              int v83 = 3;
              goto LABEL_97;
            case 3u:
              unsigned int v70 = v56 + 5;
              int v71 = *((_DWORD *)a1 + 8);
              if (v70 <= v71)
              {
                uint64_t v74 = (char *)a1[5];
                unsigned int v75 = v57;
              }
              else
              {
                if (v71 <= 1) {
                  int v71 = 1;
                }
                int v72 = 2 * v71;
                if (v72 <= (int)v70) {
                  uint64_t v73 = v70;
                }
                else {
                  uint64_t v73 = v72;
                }
                uint64_t v74 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v73, "Vector Storage (uint8_t, growth)");
                memcpy(v74, (const void *)a1[5], *((unsigned int *)a1 + 9));
                ((void (*)(void, void))a1[3])(*a1, a1[5]);
                *((_DWORD *)a1 + 8) = v73;
                a1[5] = v74;
                unsigned int v75 = *((_DWORD *)a1 + 9);
              }
              memmove(&v74[v57 + 1], &v74[v57], v75 - v57);
              *(_DWORD *)(a1[5] + v57) = v47;
              int v83 = 4;
LABEL_97:
              *((_DWORD *)a1 + 9) += v83;
              break;
            default:
              break;
          }
        }
        unsigned int v84 = v46[1];
        char v85 = glp_serialized_integer32_control(v84);
        int v86 = *((_DWORD *)a1 + 8);
        uint64_t v87 = *((unsigned int *)a1 + 9);
        int v88 = v87 + 1;
        if ((int)v87 + 1 <= v86)
        {
          uint64_t v91 = (char *)a1[5];
          int v92 = *((_DWORD *)a1 + 9);
        }
        else
        {
          if (v86 <= 1) {
            int v86 = 1;
          }
          int v89 = 2 * v86;
          if (v89 <= v88) {
            uint64_t v90 = v88;
          }
          else {
            uint64_t v90 = v89;
          }
          uint64_t v91 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v90, "Vector Storage (uint8_t, growth)");
          memcpy(v91, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v90;
          a1[5] = v91;
          int v92 = *((_DWORD *)a1 + 9);
        }
        memmove(&v91[v87 + 1], &v91[v87], (v92 - v87));
        *(unsigned char *)(a1[5] + v87) = v85;
        int v93 = *((_DWORD *)a1 + 9);
        unsigned int v94 = v93 + 1;
        *((_DWORD *)a1 + 9) = v93 + 1;
        if (v85 < 0)
        {
          switch((v85 >> 1) & 7)
          {
            case 0u:
              unsigned int v95 = v93 + 2;
              int v96 = *((_DWORD *)a1 + 8);
              if (v95 <= v96)
              {
                uint64_t v99 = (char *)a1[5];
                unsigned int v100 = v94;
              }
              else
              {
                if (v96 <= 1) {
                  int v96 = 1;
                }
                int v97 = 2 * v96;
                if (v97 <= (int)v95) {
                  uint64_t v98 = v95;
                }
                else {
                  uint64_t v98 = v97;
                }
                uint64_t v99 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v98, "Vector Storage (uint8_t, growth)");
                memcpy(v99, (const void *)a1[5], *((unsigned int *)a1 + 9));
                ((void (*)(void, void))a1[3])(*a1, a1[5]);
                *((_DWORD *)a1 + 8) = v98;
                a1[5] = v99;
                unsigned int v100 = *((_DWORD *)a1 + 9);
              }
              memmove(&v99[v94 + 1], &v99[v94], v100 - v94);
              *(unsigned char *)(a1[5] + v94) = v84;
              int v120 = 1;
              goto LABEL_144;
            case 1u:
              unsigned int v113 = v93 + 3;
              int v114 = *((_DWORD *)a1 + 8);
              if (v113 <= v114)
              {
                uint64_t v117 = (char *)a1[5];
                unsigned int v118 = v94;
              }
              else
              {
                if (v114 <= 1) {
                  int v114 = 1;
                }
                int v115 = 2 * v114;
                if (v115 <= (int)v113) {
                  uint64_t v116 = v113;
                }
                else {
                  uint64_t v116 = v115;
                }
                uint64_t v117 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v116, "Vector Storage (uint8_t, growth)");
                memcpy(v117, (const void *)a1[5], *((unsigned int *)a1 + 9));
                ((void (*)(void, void))a1[3])(*a1, a1[5]);
                *((_DWORD *)a1 + 8) = v116;
                a1[5] = v117;
                unsigned int v118 = *((_DWORD *)a1 + 9);
              }
              memmove(&v117[v94 + 1], &v117[v94], v118 - v94);
              *(_WORD *)(a1[5] + v94) = v84;
              int v120 = 2;
              goto LABEL_144;
            case 2u:
              unsigned int v101 = v93 + 4;
              int v102 = *((_DWORD *)a1 + 8);
              if (v101 <= v102)
              {
                uint64_t v105 = (char *)a1[5];
                unsigned int v106 = v94;
              }
              else
              {
                if (v102 <= 1) {
                  int v102 = 1;
                }
                int v103 = 2 * v102;
                if (v103 <= (int)v101) {
                  uint64_t v104 = v101;
                }
                else {
                  uint64_t v104 = v103;
                }
                uint64_t v105 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v104, "Vector Storage (uint8_t, growth)");
                memcpy(v105, (const void *)a1[5], *((unsigned int *)a1 + 9));
                ((void (*)(void, void))a1[3])(*a1, a1[5]);
                *((_DWORD *)a1 + 8) = v104;
                a1[5] = v105;
                unsigned int v106 = *((_DWORD *)a1 + 9);
              }
              memmove(&v105[v94 + 1], &v105[v94], v106 - v94);
              uint64_t v119 = a1[5] + v94;
              *(unsigned char *)(v119 + 2) = BYTE2(v84);
              *(_WORD *)uint64_t v119 = v84;
              int v120 = 3;
              goto LABEL_144;
            case 3u:
              unsigned int v107 = v93 + 5;
              int v108 = *((_DWORD *)a1 + 8);
              if (v107 <= v108)
              {
                uint64_t v111 = (char *)a1[5];
                unsigned int v112 = v94;
              }
              else
              {
                if (v108 <= 1) {
                  int v108 = 1;
                }
                int v109 = 2 * v108;
                if (v109 <= (int)v107) {
                  uint64_t v110 = v107;
                }
                else {
                  uint64_t v110 = v109;
                }
                uint64_t v111 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v110, "Vector Storage (uint8_t, growth)");
                memcpy(v111, (const void *)a1[5], *((unsigned int *)a1 + 9));
                ((void (*)(void, void))a1[3])(*a1, a1[5]);
                *((_DWORD *)a1 + 8) = v110;
                a1[5] = v111;
                unsigned int v112 = *((_DWORD *)a1 + 9);
              }
              memmove(&v111[v94 + 1], &v111[v94], v112 - v94);
              *(_DWORD *)(a1[5] + v94) = v84;
              int v120 = 4;
LABEL_144:
              *((_DWORD *)a1 + 9) += v120;
              break;
            default:
              break;
          }
        }
        uint64_t result = serialize_GLPType(a1, *((void *)v46 + 1));
        unint64_t v42 = *(unsigned int *)(a2 + 32);
      }
      v43 += 32;
    }
  }
  return result;
}

uint64_t deserialize_bindings(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 260);
  unint64_t v4 = *(unsigned int *)(result + 256);
  if (v3 >= v4) {
    goto LABEL_93;
  }
  uint64_t v6 = *(void *)(result + 248);
  int v7 = *(char *)(v6 + v3);
  unint64_t v8 = *(unsigned __int8 *)(v6 + v3);
  uint64_t v9 = v3 + 1;
  *(_DWORD *)(result + 260) = v3 + 1;
  if ((v7 & 0x80000000) == 0)
  {
    if (!v8) {
      return result;
    }
    goto LABEL_29;
  }
  uint64_t v10 = (v8 >> 1) & 7;
  switch(v10)
  {
    case 1:
      if (v3 + 3 > v4) {
        goto LABEL_93;
      }
      LODWORD(v6) = *(unsigned __int16 *)(v6 + v9);
      unsigned int v11 = v3 + 3;
      break;
    case 2:
      unsigned int v11 = v3 + 4;
      if (v11 > v4) {
        goto LABEL_93;
      }
      LODWORD(v6) = *(unsigned __int16 *)(v6 + v9) | (*(unsigned __int8 *)(v6 + v9 + 2) << 16);
      break;
    case 3:
      if (v3 + 5 > v4) {
        goto LABEL_93;
      }
      LODWORD(v6) = *(_DWORD *)(v6 + v9);
      unsigned int v11 = v3 + 5;
      break;
    case 4:
      if (v3 + 5 > v4) {
        goto LABEL_93;
      }
      LODWORD(v6) = *(_DWORD *)(v6 + v9);
      *(_DWORD *)(result + 260) = v3 + 5;
      if ((int)v3 + 5 >= v4) {
        goto LABEL_93;
      }
      unsigned int v11 = v3 + 6;
      break;
    case 5:
      if (v3 + 5 > v4) {
        goto LABEL_93;
      }
      LODWORD(v6) = *(_DWORD *)(v6 + v9);
      uint64_t v12 = (v3 + 5);
      *(_DWORD *)(result + 260) = v12;
      if (v12 + 2 > v4) {
        goto LABEL_93;
      }
      unsigned int v11 = v3 + 7;
      break;
    case 6:
      if (v3 + 5 > v4) {
        goto LABEL_93;
      }
      LODWORD(v6) = *(_DWORD *)(v6 + v9);
      *(_DWORD *)(result + 260) = v3 + 5;
      unsigned int v11 = v3 + 8;
      if (v11 > v4) {
        goto LABEL_93;
      }
      break;
    case 7:
      if (v3 + 9 > v4) {
        goto LABEL_93;
      }
      uint64_t v6 = *(void *)(v6 + v9);
      unsigned int v11 = v3 + 9;
      break;
    default:
      if (v9 >= v4) {
        goto LABEL_93;
      }
      LODWORD(v6) = *(unsigned __int8 *)(v6 + v9);
      unsigned int v11 = v3 + 2;
      break;
  }
  *(_DWORD *)(result + 260) = v11;
  if (v7) {
    uint64_t v13 = -256 << (8 * v10);
  }
  else {
    LODWORD(v13) = 0;
  }
  LODWORD(v8) = v6 | v13;
  if (v6 | v13)
  {
LABEL_29:
    int v14 = 0;
    while (1)
    {
      unsigned int v15 = (const void *)deserialize_GLPString(v2);
      uint64_t v17 = v16;
      int v18 = malloc_type_malloc(0x10uLL, 0x7081ABB9uLL);
      if (!v18) {
LABEL_94:
      }
        abort();
      uint64_t v19 = (uint64_t)v18;
      *int v18 = 0;
      v18[1] = 0;
      uint64_t v20 = *(unsigned int *)(v2 + 260);
      unint64_t v21 = *(unsigned int *)(v2 + 256);
      if (v20 >= v21) {
        break;
      }
      uint64_t v22 = *(void *)(v2 + 248);
      int v23 = *(char *)(v22 + v20);
      unint64_t v24 = *(unsigned __int8 *)(v22 + v20);
      uint64_t v25 = v20 + 1;
      *(_DWORD *)(v2 + 260) = v20 + 1;
      if (v23 < 0)
      {
        uint64_t v26 = (v24 >> 1) & 7;
        switch(v26)
        {
          case 1:
            if (v20 + 3 > v21) {
              goto LABEL_93;
            }
            LODWORD(v27) = *(unsigned __int16 *)(v22 + v25);
            LODWORD(v25) = v20 + 3;
            goto LABEL_53;
          case 2:
            unsigned int v28 = v20 + 4;
            if (v28 > v21) {
              goto LABEL_93;
            }
            LODWORD(v27) = *(unsigned __int16 *)(v22 + v25) | (*(unsigned __int8 *)(v22 + v25 + 2) << 16);
            *(_DWORD *)(v2 + 260) = v28;
            LODWORD(v25) = v28;
            goto LABEL_54;
          case 3:
            if (v20 + 5 > v21) {
              goto LABEL_93;
            }
            LODWORD(v27) = *(_DWORD *)(v22 + v25);
            LODWORD(v25) = v20 + 5;
            goto LABEL_53;
          case 4:
            if (v20 + 5 > v21) {
              goto LABEL_93;
            }
            LODWORD(v27) = *(_DWORD *)(v22 + v25);
            *(_DWORD *)(v2 + 260) = v20 + 5;
            if ((int)v20 + 5 >= v21) {
              goto LABEL_93;
            }
            LODWORD(v25) = v20 + 6;
            goto LABEL_53;
          case 5:
            if (v20 + 5 > v21) {
              goto LABEL_93;
            }
            LODWORD(v27) = *(_DWORD *)(v22 + v25);
            uint64_t v29 = (v20 + 5);
            *(_DWORD *)(v2 + 260) = v29;
            if (v29 + 2 > v21) {
              goto LABEL_93;
            }
            LODWORD(v25) = v20 + 7;
            goto LABEL_53;
          case 6:
            if (v20 + 5 > v21) {
              goto LABEL_93;
            }
            LODWORD(v27) = *(_DWORD *)(v22 + v25);
            *(_DWORD *)(v2 + 260) = v20 + 5;
            LODWORD(v25) = v20 + 8;
            if ((int)v20 + 8 > v21) {
              goto LABEL_93;
            }
            goto LABEL_53;
          case 7:
            if (v20 + 9 > v21) {
              goto LABEL_93;
            }
            uint64_t v27 = *(void *)(v22 + v25);
            LODWORD(v25) = v20 + 9;
            goto LABEL_53;
          default:
            if (v25 >= v21) {
              goto LABEL_93;
            }
            LODWORD(v27) = *(unsigned __int8 *)(v22 + v25);
            LODWORD(v25) = v20 + 2;
LABEL_53:
            *(_DWORD *)(v2 + 260) = v25;
LABEL_54:
            if (v23) {
              uint64_t v30 = -256 << (8 * v26);
            }
            else {
              LODWORD(v30) = 0;
            }
            LODWORD(v24) = v27 | v30;
            break;
        }
      }
      *(_DWORD *)int v18 = v24;
      if (v25 >= v21) {
        break;
      }
      int v31 = *(char *)(v22 + v25);
      unint64_t v32 = *(unsigned __int8 *)(v22 + v25);
      uint64_t v33 = v25 + 1;
      *(_DWORD *)(v2 + 260) = v33;
      if (v31 < 0)
      {
        uint64_t v34 = (v32 >> 1) & 7;
        switch(v34)
        {
          case 1:
            if ((unint64_t)v25 + 3 > v21) {
              goto LABEL_93;
            }
            LODWORD(v22) = *(unsigned __int16 *)(v22 + v33);
            int v35 = v25 + 3;
            goto LABEL_80;
          case 2:
            unsigned int v36 = v25 + 4;
            if (v36 > v21) {
              goto LABEL_93;
            }
            LODWORD(v22) = *(unsigned __int16 *)(v22 + v33) | (*(unsigned __int8 *)(v22 + v33 + 2) << 16);
LABEL_77:
            *(_DWORD *)(v2 + 260) = v36;
            goto LABEL_81;
          case 3:
            if ((unint64_t)v25 + 5 > v21) {
              goto LABEL_93;
            }
            LODWORD(v22) = *(_DWORD *)(v22 + v33);
            int v35 = v25 + 5;
            goto LABEL_80;
          case 4:
            if ((unint64_t)v25 + 5 > v21) {
              goto LABEL_93;
            }
            LODWORD(v22) = *(_DWORD *)(v22 + v33);
            *(_DWORD *)(v2 + 260) = v25 + 5;
            if ((int)v25 + 5 >= v21) {
              goto LABEL_93;
            }
            int v35 = v25 + 6;
            goto LABEL_80;
          case 5:
            if ((unint64_t)v25 + 5 > v21) {
              goto LABEL_93;
            }
            LODWORD(v22) = *(_DWORD *)(v22 + v33);
            uint64_t v37 = (v25 + 5);
            *(_DWORD *)(v2 + 260) = v37;
            if (v37 + 2 > v21) {
              goto LABEL_93;
            }
            int v35 = v25 + 7;
            goto LABEL_80;
          case 6:
            if ((unint64_t)v25 + 5 <= v21)
            {
              LODWORD(v22) = *(_DWORD *)(v22 + v33);
              *(_DWORD *)(v2 + 260) = v25 + 5;
              unsigned int v36 = v25 + 8;
              if (v36 <= v21) {
                goto LABEL_77;
              }
            }
            goto LABEL_93;
          case 7:
            if ((unint64_t)v25 + 9 > v21) {
              goto LABEL_93;
            }
            uint64_t v22 = *(void *)(v22 + v33);
            int v35 = v25 + 9;
            goto LABEL_80;
          default:
            if (v33 >= v21) {
              goto LABEL_93;
            }
            LODWORD(v22) = *(unsigned __int8 *)(v22 + v33);
            int v35 = v25 + 2;
LABEL_80:
            *(_DWORD *)(v2 + 260) = v35;
LABEL_81:
            if (v31) {
              uint64_t v38 = -256 << (8 * v34);
            }
            else {
              LODWORD(v38) = 0;
            }
            LODWORD(v32) = v22 | v38;
            break;
        }
      }
      *((_DWORD *)v18 + 1) = v32;
      uint64_t v46 = 0;
      deserialize_GLPType((void *)v2, &v46);
      *(void *)(v19 + 8) = glpDeepCopyType(&GLP_MALLOC_ALLOCATOR, v46);
      uint64_t v39 = v17;
      int v40 = (char *)malloc_type_malloc(v17, 0x7081ABB9uLL);
      if (!v40) {
        goto LABEL_94;
      }
      uint64_t v41 = v40;
      memcpy(v40, v15, v17);
      unsigned int v43 = v17 >> 5;
      if (v17 >> 5 >= v17)
      {
        uint64_t v45 = v17;
      }
      else
      {
        unsigned int v44 = ~(v17 >> 5);
        LODWORD(v45) = v17;
        do
        {
          uint64_t v45 = (32 * v45 + (v45 >> 2) + v41[(v17 - 1)]) ^ v45;
          LODWORD(v17) = v17 + v44;
        }
        while (v17 > v43);
      }
      uint64_t result = glpStringHashPut(a2, v41, v39 | (v45 << 32), v19, v42);
      if (++v14 == v8) {
        return result;
      }
    }
LABEL_93:
    glpDeserialError(v2, 1u);
  }
  return result;
}

uint64_t glpMakeString(uint64_t result, unsigned int a2)
{
  if (a2 >> 5 < a2)
  {
    unsigned int v2 = a2;
    unsigned int v3 = a2;
    do
    {
      v3 ^= 32 * v3 + (v3 >> 2) + *(char *)(result + v2 - 1);
      v2 += ~(a2 >> 5);
    }
    while (v2 > a2 >> 5);
  }
  return result;
}

void *glpSerializeLinkedProgram(void *a1, uint64_t a2)
{
  serialize_bindings(a1, *(void *)(a2 + 184));
  serialize_bindings(a1, *(void *)(a2 + 192));
  glpSerializeUniformBindings(a1, *(void *)(a2 + 80));
  unsigned int v4 = *(_DWORD *)(a2 + 224);
  unsigned int v5 = (char)glp_serialized_integer32_control(v4);
  int v6 = *((_DWORD *)a1 + 8);
  uint64_t v7 = *((unsigned int *)a1 + 9);
  int v8 = v7 + 1;
  if ((int)v7 + 1 <= v6)
  {
    unsigned int v11 = (char *)a1[5];
    int v12 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v6 <= 1) {
      int v6 = 1;
    }
    int v9 = 2 * v6;
    if (v9 <= v8) {
      uint64_t v10 = v8;
    }
    else {
      uint64_t v10 = v9;
    }
    unsigned int v11 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v10, "Vector Storage (uint8_t, growth)");
    memcpy(v11, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v10;
    a1[5] = v11;
    int v12 = *((_DWORD *)a1 + 9);
  }
  memmove(&v11[v7 + 1], &v11[v7], (v12 - v7));
  *(unsigned char *)(a1[5] + v7) = v5;
  int v13 = *((_DWORD *)a1 + 9);
  unsigned int v14 = v13 + 1;
  *((_DWORD *)a1 + 9) = v13 + 1;
  if ((v5 & 0x80000000) != 0)
  {
    switch((v5 >> 1) & 7)
    {
      case 0u:
        unsigned int v15 = v13 + 2;
        int v16 = *((_DWORD *)a1 + 8);
        if (v15 <= v16)
        {
          uint64_t v19 = (char *)a1[5];
          unsigned int v20 = v14;
        }
        else
        {
          if (v16 <= 1) {
            int v16 = 1;
          }
          int v17 = 2 * v16;
          if (v17 <= (int)v15) {
            uint64_t v18 = v15;
          }
          else {
            uint64_t v18 = v17;
          }
          uint64_t v19 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v18, "Vector Storage (uint8_t, growth)");
          memcpy(v19, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v18;
          a1[5] = v19;
          unsigned int v20 = *((_DWORD *)a1 + 9);
        }
        memmove(&v19[v14 + 1], &v19[v14], v20 - v14);
        *(unsigned char *)(a1[5] + v14) = v4;
        int v39 = 1;
        goto LABEL_47;
      case 1u:
        unsigned int v21 = v13 + 3;
        int v22 = *((_DWORD *)a1 + 8);
        if (v21 <= v22)
        {
          uint64_t v25 = (char *)a1[5];
          unsigned int v26 = v14;
        }
        else
        {
          if (v22 <= 1) {
            int v22 = 1;
          }
          int v23 = 2 * v22;
          if (v23 <= (int)v21) {
            uint64_t v24 = v21;
          }
          else {
            uint64_t v24 = v23;
          }
          uint64_t v25 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v24, "Vector Storage (uint8_t, growth)");
          memcpy(v25, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v24;
          a1[5] = v25;
          unsigned int v26 = *((_DWORD *)a1 + 9);
        }
        memmove(&v25[v14 + 1], &v25[v14], v26 - v14);
        *(_WORD *)(a1[5] + v14) = v4;
        int v39 = 2;
        goto LABEL_47;
      case 2u:
        unsigned int v27 = v13 + 4;
        int v28 = *((_DWORD *)a1 + 8);
        if (v27 <= v28)
        {
          int v31 = (char *)a1[5];
          unsigned int v32 = v14;
        }
        else
        {
          if (v28 <= 1) {
            int v28 = 1;
          }
          int v29 = 2 * v28;
          if (v29 <= (int)v27) {
            uint64_t v30 = v27;
          }
          else {
            uint64_t v30 = v29;
          }
          int v31 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v30, "Vector Storage (uint8_t, growth)");
          memcpy(v31, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v30;
          a1[5] = v31;
          unsigned int v32 = *((_DWORD *)a1 + 9);
        }
        memmove(&v31[v14 + 1], &v31[v14], v32 - v14);
        uint64_t v40 = a1[5] + v14;
        *(unsigned char *)(v40 + 2) = BYTE2(v4);
        *(_WORD *)uint64_t v40 = v4;
        int v39 = 3;
        goto LABEL_47;
      case 3u:
        unsigned int v33 = v13 + 5;
        int v34 = *((_DWORD *)a1 + 8);
        if (v33 <= v34)
        {
          uint64_t v37 = (char *)a1[5];
          unsigned int v38 = v14;
        }
        else
        {
          if (v34 <= 1) {
            int v34 = 1;
          }
          int v35 = 2 * v34;
          if (v35 <= (int)v33) {
            uint64_t v36 = v33;
          }
          else {
            uint64_t v36 = v35;
          }
          uint64_t v37 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v36, "Vector Storage (uint8_t, growth)");
          memcpy(v37, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v36;
          a1[5] = v37;
          unsigned int v38 = *((_DWORD *)a1 + 9);
        }
        memmove(&v37[v14 + 1], &v37[v14], v38 - v14);
        *(_DWORD *)(a1[5] + v14) = v4;
        int v39 = 4;
LABEL_47:
        *((_DWORD *)a1 + 9) += v39;
        break;
      default:
        break;
    }
  }
  uint64_t v41 = *(unsigned int *)(a2 + 204);
  unsigned int v42 = (char)glp_serialized_integer32_control(v41);
  int v43 = *((_DWORD *)a1 + 8);
  uint64_t v44 = *((unsigned int *)a1 + 9);
  int v45 = v44 + 1;
  if ((int)v44 + 1 <= v43)
  {
    char v48 = (char *)a1[5];
    int v49 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v43 <= 1) {
      int v43 = 1;
    }
    int v46 = 2 * v43;
    if (v46 <= v45) {
      uint64_t v47 = v45;
    }
    else {
      uint64_t v47 = v46;
    }
    char v48 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v47, "Vector Storage (uint8_t, growth)");
    memcpy(v48, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v47;
    a1[5] = v48;
    int v49 = *((_DWORD *)a1 + 9);
  }
  memmove(&v48[v44 + 1], &v48[v44], (v49 - v44));
  *(unsigned char *)(a1[5] + v44) = v42;
  int v50 = *((_DWORD *)a1 + 9);
  unsigned int v51 = v50 + 1;
  *((_DWORD *)a1 + 9) = v50 + 1;
  if ((v42 & 0x80000000) != 0)
  {
    switch((v42 >> 1) & 7)
    {
      case 0u:
        unsigned int v52 = v50 + 2;
        int v53 = *((_DWORD *)a1 + 8);
        if (v52 <= v53)
        {
          int v56 = (char *)a1[5];
          unsigned int v57 = v51;
        }
        else
        {
          if (v53 <= 1) {
            int v53 = 1;
          }
          int v54 = 2 * v53;
          if (v54 <= (int)v52) {
            uint64_t v55 = v52;
          }
          else {
            uint64_t v55 = v54;
          }
          int v56 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v55, "Vector Storage (uint8_t, growth)");
          memcpy(v56, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v55;
          a1[5] = v56;
          unsigned int v57 = *((_DWORD *)a1 + 9);
        }
        memmove(&v56[v51 + 1], &v56[v51], v57 - v51);
        *(unsigned char *)(a1[5] + v51) = v41;
        int v76 = 1;
        goto LABEL_94;
      case 1u:
        unsigned int v58 = v50 + 3;
        int v59 = *((_DWORD *)a1 + 8);
        if (v58 <= v59)
        {
          uint64_t v62 = (char *)a1[5];
          unsigned int v63 = v51;
        }
        else
        {
          if (v59 <= 1) {
            int v59 = 1;
          }
          int v60 = 2 * v59;
          if (v60 <= (int)v58) {
            uint64_t v61 = v58;
          }
          else {
            uint64_t v61 = v60;
          }
          uint64_t v62 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v61, "Vector Storage (uint8_t, growth)");
          memcpy(v62, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v61;
          a1[5] = v62;
          unsigned int v63 = *((_DWORD *)a1 + 9);
        }
        memmove(&v62[v51 + 1], &v62[v51], v63 - v51);
        *(_WORD *)(a1[5] + v51) = v41;
        int v76 = 2;
        goto LABEL_94;
      case 2u:
        unsigned int v64 = v50 + 4;
        int v65 = *((_DWORD *)a1 + 8);
        if (v64 <= v65)
        {
          uint64_t v68 = (char *)a1[5];
          unsigned int v69 = v51;
        }
        else
        {
          if (v65 <= 1) {
            int v65 = 1;
          }
          int v66 = 2 * v65;
          if (v66 <= (int)v64) {
            uint64_t v67 = v64;
          }
          else {
            uint64_t v67 = v66;
          }
          uint64_t v68 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v67, "Vector Storage (uint8_t, growth)");
          memcpy(v68, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v67;
          a1[5] = v68;
          unsigned int v69 = *((_DWORD *)a1 + 9);
        }
        memmove(&v68[v51 + 1], &v68[v51], v69 - v51);
        uint64_t v77 = a1[5] + v51;
        *(unsigned char *)(v77 + 2) = BYTE2(v41);
        *(_WORD *)uint64_t v77 = v41;
        int v76 = 3;
        goto LABEL_94;
      case 3u:
        unsigned int v70 = v50 + 5;
        int v71 = *((_DWORD *)a1 + 8);
        if (v70 <= v71)
        {
          uint64_t v74 = (char *)a1[5];
          unsigned int v75 = v51;
        }
        else
        {
          if (v71 <= 1) {
            int v71 = 1;
          }
          int v72 = 2 * v71;
          if (v72 <= (int)v70) {
            uint64_t v73 = v70;
          }
          else {
            uint64_t v73 = v72;
          }
          uint64_t v74 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v73, "Vector Storage (uint8_t, growth)");
          memcpy(v74, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v73;
          a1[5] = v74;
          unsigned int v75 = *((_DWORD *)a1 + 9);
        }
        memmove(&v74[v51 + 1], &v74[v51], v75 - v51);
        *(_DWORD *)(a1[5] + v51) = v41;
        int v76 = 4;
LABEL_94:
        *((_DWORD *)a1 + 9) += v76;
        break;
      default:
        break;
    }
  }
  if ((int)v41 >= 1)
  {
    uint64_t v78 = 0;
    do
    {
      unsigned int v79 = *(_DWORD *)(*(void *)(a2 + 208) + v78);
      LOBYTE(v80) = glp_serialized_integer32_control(v79);
      int v81 = *((_DWORD *)a1 + 8);
      uint64_t v82 = *((unsigned int *)a1 + 9);
      int v83 = v82 + 1;
      if ((int)v82 + 1 <= v81)
      {
        int v86 = (char *)a1[5];
        int v87 = *((_DWORD *)a1 + 9);
      }
      else
      {
        if (v81 <= 1) {
          int v81 = 1;
        }
        int v84 = 2 * v81;
        if (v84 <= v83) {
          uint64_t v85 = v83;
        }
        else {
          uint64_t v85 = v84;
        }
        int v86 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v85, "Vector Storage (uint8_t, growth)");
        memcpy(v86, (const void *)a1[5], *((unsigned int *)a1 + 9));
        ((void (*)(void, void))a1[3])(*a1, a1[5]);
        *((_DWORD *)a1 + 8) = v85;
        a1[5] = v86;
        int v87 = *((_DWORD *)a1 + 9);
      }
      unsigned int v80 = (char)v80;
      memmove(&v86[v82 + 1], &v86[v82], (v87 - v82));
      *(unsigned char *)(a1[5] + v82) = v80;
      int v88 = *((_DWORD *)a1 + 9);
      unsigned int v89 = v88 + 1;
      *((_DWORD *)a1 + 9) = v88 + 1;
      if ((char)v80 < 0)
      {
        switch((v80 >> 1) & 7)
        {
          case 0u:
            unsigned int v90 = v88 + 2;
            int v91 = *((_DWORD *)a1 + 8);
            if (v90 <= v91)
            {
              unsigned int v94 = (char *)a1[5];
              unsigned int v95 = v89;
            }
            else
            {
              if (v91 <= 1) {
                int v91 = 1;
              }
              int v92 = 2 * v91;
              if (v92 <= (int)v90) {
                uint64_t v93 = v90;
              }
              else {
                uint64_t v93 = v92;
              }
              unsigned int v94 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v93, "Vector Storage (uint8_t, growth)");
              memcpy(v94, (const void *)a1[5], *((unsigned int *)a1 + 9));
              ((void (*)(void, void))a1[3])(*a1, a1[5]);
              *((_DWORD *)a1 + 8) = v93;
              a1[5] = v94;
              unsigned int v95 = *((_DWORD *)a1 + 9);
            }
            memmove(&v94[v89 + 1], &v94[v89], v95 - v89);
            *(unsigned char *)(a1[5] + v89) = v79;
            int v114 = 1;
            goto LABEL_143;
          case 1u:
            unsigned int v96 = v88 + 3;
            int v97 = *((_DWORD *)a1 + 8);
            if (v96 <= v97)
            {
              unsigned int v100 = (char *)a1[5];
              unsigned int v101 = v89;
            }
            else
            {
              if (v97 <= 1) {
                int v97 = 1;
              }
              int v98 = 2 * v97;
              if (v98 <= (int)v96) {
                uint64_t v99 = v96;
              }
              else {
                uint64_t v99 = v98;
              }
              unsigned int v100 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v99, "Vector Storage (uint8_t, growth)");
              memcpy(v100, (const void *)a1[5], *((unsigned int *)a1 + 9));
              ((void (*)(void, void))a1[3])(*a1, a1[5]);
              *((_DWORD *)a1 + 8) = v99;
              a1[5] = v100;
              unsigned int v101 = *((_DWORD *)a1 + 9);
            }
            memmove(&v100[v89 + 1], &v100[v89], v101 - v89);
            *(_WORD *)(a1[5] + v89) = v79;
            int v114 = 2;
            goto LABEL_143;
          case 2u:
            unsigned int v102 = v88 + 4;
            int v103 = *((_DWORD *)a1 + 8);
            if (v102 <= v103)
            {
              unsigned int v106 = (char *)a1[5];
              unsigned int v107 = v89;
            }
            else
            {
              if (v103 <= 1) {
                int v103 = 1;
              }
              int v104 = 2 * v103;
              if (v104 <= (int)v102) {
                uint64_t v105 = v102;
              }
              else {
                uint64_t v105 = v104;
              }
              unsigned int v106 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v105, "Vector Storage (uint8_t, growth)");
              memcpy(v106, (const void *)a1[5], *((unsigned int *)a1 + 9));
              ((void (*)(void, void))a1[3])(*a1, a1[5]);
              *((_DWORD *)a1 + 8) = v105;
              a1[5] = v106;
              unsigned int v107 = *((_DWORD *)a1 + 9);
            }
            memmove(&v106[v89 + 1], &v106[v89], v107 - v89);
            uint64_t v115 = a1[5] + v89;
            *(unsigned char *)(v115 + 2) = BYTE2(v79);
            *(_WORD *)uint64_t v115 = v79;
            int v114 = 3;
            goto LABEL_143;
          case 3u:
            unsigned int v108 = v88 + 5;
            int v109 = *((_DWORD *)a1 + 8);
            if (v108 <= v109)
            {
              unsigned int v112 = (char *)a1[5];
              unsigned int v113 = v89;
            }
            else
            {
              if (v109 <= 1) {
                int v109 = 1;
              }
              int v110 = 2 * v109;
              if (v110 <= (int)v108) {
                uint64_t v111 = v108;
              }
              else {
                uint64_t v111 = v110;
              }
              unsigned int v112 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v111, "Vector Storage (uint8_t, growth)");
              memcpy(v112, (const void *)a1[5], *((unsigned int *)a1 + 9));
              ((void (*)(void, void))a1[3])(*a1, a1[5]);
              *((_DWORD *)a1 + 8) = v111;
              a1[5] = v112;
              unsigned int v113 = *((_DWORD *)a1 + 9);
            }
            memmove(&v112[v89 + 1], &v112[v89], v113 - v89);
            *(_DWORD *)(a1[5] + v89) = v79;
            int v114 = 4;
LABEL_143:
            *((_DWORD *)a1 + 9) += v114;
            break;
          default:
            break;
        }
      }
      v78 += 4;
    }
    while (4 * v41 != v78);
  }
  uint64_t v116 = *(unsigned int **)(a2 + 216);
  uint64_t v117 = *v116;
  unsigned int v118 = (char)glp_serialized_integer32_control(v117);
  int v119 = *((_DWORD *)a1 + 8);
  uint64_t v120 = *((unsigned int *)a1 + 9);
  int v121 = v120 + 1;
  if ((int)v120 + 1 <= v119)
  {
    unint64_t v124 = (char *)a1[5];
    int v125 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v119 <= 1) {
      int v119 = 1;
    }
    int v122 = 2 * v119;
    if (v122 <= v121) {
      uint64_t v123 = v121;
    }
    else {
      uint64_t v123 = v122;
    }
    unint64_t v124 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v123, "Vector Storage (uint8_t, growth)");
    memcpy(v124, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v123;
    a1[5] = v124;
    int v125 = *((_DWORD *)a1 + 9);
  }
  memmove(&v124[v120 + 1], &v124[v120], (v125 - v120));
  *(unsigned char *)(a1[5] + v120) = v118;
  int v126 = *((_DWORD *)a1 + 9);
  unsigned int v127 = v126 + 1;
  *((_DWORD *)a1 + 9) = v126 + 1;
  if ((v118 & 0x80000000) != 0)
  {
    switch((v118 >> 1) & 7)
    {
      case 0u:
        unsigned int v128 = v126 + 2;
        int v129 = *((_DWORD *)a1 + 8);
        if (v128 <= v129)
        {
          int v132 = (char *)a1[5];
          unsigned int v133 = v127;
        }
        else
        {
          if (v129 <= 1) {
            int v129 = 1;
          }
          int v130 = 2 * v129;
          if (v130 <= (int)v128) {
            uint64_t v131 = v128;
          }
          else {
            uint64_t v131 = v130;
          }
          int v132 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v131, "Vector Storage (uint8_t, growth)");
          memcpy(v132, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v131;
          a1[5] = v132;
          unsigned int v133 = *((_DWORD *)a1 + 9);
        }
        memmove(&v132[v127 + 1], &v132[v127], v133 - v127);
        *(unsigned char *)(a1[5] + v127) = v117;
        int v152 = 1;
        goto LABEL_191;
      case 1u:
        unsigned int v134 = v126 + 3;
        int v135 = *((_DWORD *)a1 + 8);
        if (v134 <= v135)
        {
          uint64_t v138 = (char *)a1[5];
          unsigned int v139 = v127;
        }
        else
        {
          if (v135 <= 1) {
            int v135 = 1;
          }
          int v136 = 2 * v135;
          if (v136 <= (int)v134) {
            uint64_t v137 = v134;
          }
          else {
            uint64_t v137 = v136;
          }
          uint64_t v138 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v137, "Vector Storage (uint8_t, growth)");
          memcpy(v138, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v137;
          a1[5] = v138;
          unsigned int v139 = *((_DWORD *)a1 + 9);
        }
        memmove(&v138[v127 + 1], &v138[v127], v139 - v127);
        *(_WORD *)(a1[5] + v127) = v117;
        int v152 = 2;
        goto LABEL_191;
      case 2u:
        unsigned int v140 = v126 + 4;
        int v141 = *((_DWORD *)a1 + 8);
        if (v140 <= v141)
        {
          int v144 = (char *)a1[5];
          unsigned int v145 = v127;
        }
        else
        {
          if (v141 <= 1) {
            int v141 = 1;
          }
          int v142 = 2 * v141;
          if (v142 <= (int)v140) {
            uint64_t v143 = v140;
          }
          else {
            uint64_t v143 = v142;
          }
          int v144 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v143, "Vector Storage (uint8_t, growth)");
          memcpy(v144, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v143;
          a1[5] = v144;
          unsigned int v145 = *((_DWORD *)a1 + 9);
        }
        memmove(&v144[v127 + 1], &v144[v127], v145 - v127);
        uint64_t v153 = a1[5] + v127;
        *(unsigned char *)(v153 + 2) = BYTE2(v117);
        *(_WORD *)uint64_t v153 = v117;
        int v152 = 3;
        goto LABEL_191;
      case 3u:
        unsigned int v146 = v126 + 5;
        int v147 = *((_DWORD *)a1 + 8);
        if (v146 <= v147)
        {
          uint64_t v150 = (char *)a1[5];
          unsigned int v151 = v127;
        }
        else
        {
          if (v147 <= 1) {
            int v147 = 1;
          }
          int v148 = 2 * v147;
          if (v148 <= (int)v146) {
            uint64_t v149 = v146;
          }
          else {
            uint64_t v149 = v148;
          }
          uint64_t v150 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v149, "Vector Storage (uint8_t, growth)");
          memcpy(v150, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v149;
          a1[5] = v150;
          unsigned int v151 = *((_DWORD *)a1 + 9);
        }
        memmove(&v150[v127 + 1], &v150[v127], v151 - v127);
        *(_DWORD *)(a1[5] + v127) = v117;
        int v152 = 4;
LABEL_191:
        *((_DWORD *)a1 + 9) += v152;
        break;
      default:
        break;
    }
  }
  if ((int)v117 >= 1)
  {
    BOOL v154 = v116 + 4;
    do
    {
      unsigned int v155 = *((_DWORD *)v154 - 2);
      char v156 = glp_serialized_integer32_control(v155);
      int v157 = *((_DWORD *)a1 + 8);
      uint64_t v158 = *((unsigned int *)a1 + 9);
      int v159 = v158 + 1;
      if ((int)v158 + 1 <= v157)
      {
        uint64_t v162 = (char *)a1[5];
        int v163 = *((_DWORD *)a1 + 9);
      }
      else
      {
        if (v157 <= 1) {
          int v157 = 1;
        }
        int v160 = 2 * v157;
        if (v160 <= v159) {
          uint64_t v161 = v159;
        }
        else {
          uint64_t v161 = v160;
        }
        uint64_t v162 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v161, "Vector Storage (uint8_t, growth)");
        memcpy(v162, (const void *)a1[5], *((unsigned int *)a1 + 9));
        ((void (*)(void, void))a1[3])(*a1, a1[5]);
        *((_DWORD *)a1 + 8) = v161;
        a1[5] = v162;
        int v163 = *((_DWORD *)a1 + 9);
      }
      memmove(&v162[v158 + 1], &v162[v158], (v163 - v158));
      *(unsigned char *)(a1[5] + v158) = v156;
      int v164 = *((_DWORD *)a1 + 9);
      unsigned int v165 = v164 + 1;
      *((_DWORD *)a1 + 9) = v164 + 1;
      if (v156 < 0)
      {
        switch((v156 >> 1) & 7)
        {
          case 0u:
            unsigned int v166 = v164 + 2;
            int v167 = *((_DWORD *)a1 + 8);
            if (v166 <= v167)
            {
              uint64_t v170 = (char *)a1[5];
              unsigned int v171 = v165;
            }
            else
            {
              if (v167 <= 1) {
                int v167 = 1;
              }
              int v168 = 2 * v167;
              if (v168 <= (int)v166) {
                uint64_t v169 = v166;
              }
              else {
                uint64_t v169 = v168;
              }
              uint64_t v170 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v169, "Vector Storage (uint8_t, growth)");
              memcpy(v170, (const void *)a1[5], *((unsigned int *)a1 + 9));
              ((void (*)(void, void))a1[3])(*a1, a1[5]);
              *((_DWORD *)a1 + 8) = v169;
              a1[5] = v170;
              unsigned int v171 = *((_DWORD *)a1 + 9);
            }
            memmove(&v170[v165 + 1], &v170[v165], v171 - v165);
            *(unsigned char *)(a1[5] + v165) = v155;
            unsigned int v165 = *((_DWORD *)a1 + 9) + 1;
            goto LABEL_240;
          case 1u:
            unsigned int v172 = v164 + 3;
            int v173 = *((_DWORD *)a1 + 8);
            if (v172 <= v173)
            {
              int v176 = (char *)a1[5];
              unsigned int v177 = v165;
            }
            else
            {
              if (v173 <= 1) {
                int v173 = 1;
              }
              int v174 = 2 * v173;
              if (v174 <= (int)v172) {
                uint64_t v175 = v172;
              }
              else {
                uint64_t v175 = v174;
              }
              int v176 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v175, "Vector Storage (uint8_t, growth)");
              memcpy(v176, (const void *)a1[5], *((unsigned int *)a1 + 9));
              ((void (*)(void, void))a1[3])(*a1, a1[5]);
              *((_DWORD *)a1 + 8) = v175;
              a1[5] = v176;
              unsigned int v177 = *((_DWORD *)a1 + 9);
            }
            memmove(&v176[v165 + 1], &v176[v165], v177 - v165);
            *(_WORD *)(a1[5] + v165) = v155;
            unsigned int v165 = *((_DWORD *)a1 + 9) + 2;
            goto LABEL_240;
          case 2u:
            unsigned int v178 = v164 + 4;
            int v179 = *((_DWORD *)a1 + 8);
            if (v178 <= v179)
            {
              uint64_t v182 = (char *)a1[5];
              unsigned int v183 = v165;
            }
            else
            {
              if (v179 <= 1) {
                int v179 = 1;
              }
              int v180 = 2 * v179;
              if (v180 <= (int)v178) {
                uint64_t v181 = v178;
              }
              else {
                uint64_t v181 = v180;
              }
              uint64_t v182 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v181, "Vector Storage (uint8_t, growth)");
              memcpy(v182, (const void *)a1[5], *((unsigned int *)a1 + 9));
              ((void (*)(void, void))a1[3])(*a1, a1[5]);
              *((_DWORD *)a1 + 8) = v181;
              a1[5] = v182;
              unsigned int v183 = *((_DWORD *)a1 + 9);
            }
            memmove(&v182[v165 + 1], &v182[v165], v183 - v165);
            uint64_t v190 = a1[5] + v165;
            *(unsigned char *)(v190 + 2) = BYTE2(v155);
            *(_WORD *)uint64_t v190 = v155;
            unsigned int v165 = *((_DWORD *)a1 + 9) + 3;
            goto LABEL_240;
          case 3u:
            unsigned int v184 = v164 + 5;
            int v185 = *((_DWORD *)a1 + 8);
            if (v184 <= v185)
            {
              uint64_t v188 = (char *)a1[5];
              unsigned int v189 = v165;
            }
            else
            {
              if (v185 <= 1) {
                int v185 = 1;
              }
              int v186 = 2 * v185;
              if (v186 <= (int)v184) {
                uint64_t v187 = v184;
              }
              else {
                uint64_t v187 = v186;
              }
              uint64_t v188 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v187, "Vector Storage (uint8_t, growth)");
              memcpy(v188, (const void *)a1[5], *((unsigned int *)a1 + 9));
              ((void (*)(void, void))a1[3])(*a1, a1[5]);
              *((_DWORD *)a1 + 8) = v187;
              a1[5] = v188;
              unsigned int v189 = *((_DWORD *)a1 + 9);
            }
            memmove(&v188[v165 + 1], &v188[v165], v189 - v165);
            *(_DWORD *)(a1[5] + v165) = v155;
            unsigned int v165 = *((_DWORD *)a1 + 9) + 4;
LABEL_240:
            *((_DWORD *)a1 + 9) = v165;
            break;
          default:
            break;
        }
      }
      uint64_t v191 = *v154;
      int v192 = v165 + 8;
      int v193 = *((_DWORD *)a1 + 8);
      if (v165 + 8 <= v193)
      {
        unsigned int v196 = (char *)a1[5];
        unsigned int v197 = v165;
      }
      else
      {
        if (v193 <= 1) {
          int v193 = 1;
        }
        int v194 = 2 * v193;
        if (v194 <= v192) {
          uint64_t v195 = v192;
        }
        else {
          uint64_t v195 = v194;
        }
        unsigned int v196 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v195, "Vector Storage (uint8_t, growth)");
        memcpy(v196, (const void *)a1[5], *((unsigned int *)a1 + 9));
        ((void (*)(void, void))a1[3])(*a1, a1[5]);
        *((_DWORD *)a1 + 8) = v195;
        a1[5] = v196;
        unsigned int v197 = *((_DWORD *)a1 + 9);
      }
      v154 += 2;
      memmove(&v196[v165 + 1], &v196[v165], v197 - v165);
      *(void *)(a1[5] + v165) = v191;
      *((_DWORD *)a1 + 9) += 8;
      --v117;
    }
    while (v117);
  }
  uint64_t v198 = *(void *)(a2 + 88);
  if (v198)
  {
    glpSerializeUniformBindings(a1, v198);
  }
  else
  {
    unsigned int v199 = (char)glp_serialized_integer32_control(0);
    int v200 = *((_DWORD *)a1 + 8);
    uint64_t v201 = *((unsigned int *)a1 + 9);
    int v202 = v201 + 1;
    if ((int)v201 + 1 <= v200)
    {
      int v205 = (char *)a1[5];
      int v206 = *((_DWORD *)a1 + 9);
    }
    else
    {
      if (v200 <= 1) {
        int v200 = 1;
      }
      int v203 = 2 * v200;
      if (v203 <= v202) {
        uint64_t v204 = v202;
      }
      else {
        uint64_t v204 = v203;
      }
      int v205 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v204, "Vector Storage (uint8_t, growth)");
      memcpy(v205, (const void *)a1[5], *((unsigned int *)a1 + 9));
      ((void (*)(void, void))a1[3])(*a1, a1[5]);
      *((_DWORD *)a1 + 8) = v204;
      a1[5] = v205;
      int v206 = *((_DWORD *)a1 + 9);
    }
    memmove(&v205[v201 + 1], &v205[v201], (v206 - v201));
    *(unsigned char *)(a1[5] + v201) = v199;
    int v207 = *((_DWORD *)a1 + 9);
    unsigned int v208 = v207 + 1;
    *((_DWORD *)a1 + 9) = v207 + 1;
    if ((v199 & 0x80000000) != 0)
    {
      switch((v199 >> 1) & 7)
      {
        case 0u:
          unsigned int v209 = v207 + 2;
          int v210 = *((_DWORD *)a1 + 8);
          if (v209 <= v210)
          {
            uint64_t v213 = (char *)a1[5];
            unsigned int v214 = v208;
          }
          else
          {
            if (v210 <= 1) {
              int v210 = 1;
            }
            int v211 = 2 * v210;
            if (v211 <= (int)v209) {
              uint64_t v212 = v209;
            }
            else {
              uint64_t v212 = v211;
            }
            uint64_t v213 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v212, "Vector Storage (uint8_t, growth)");
            memcpy(v213, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v212;
            a1[5] = v213;
            unsigned int v214 = *((_DWORD *)a1 + 9);
          }
          memmove(&v213[v208 + 1], &v213[v208], v214 - v208);
          *(unsigned char *)(a1[5] + v208) = 0;
          int v233 = *((_DWORD *)a1 + 9) + 1;
          goto LABEL_298;
        case 1u:
          unsigned int v215 = v207 + 3;
          int v216 = *((_DWORD *)a1 + 8);
          if (v215 <= v216)
          {
            BOOL v219 = (char *)a1[5];
            unsigned int v220 = v208;
          }
          else
          {
            if (v216 <= 1) {
              int v216 = 1;
            }
            int v217 = 2 * v216;
            if (v217 <= (int)v215) {
              uint64_t v218 = v215;
            }
            else {
              uint64_t v218 = v217;
            }
            BOOL v219 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v218, "Vector Storage (uint8_t, growth)");
            memcpy(v219, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v218;
            a1[5] = v219;
            unsigned int v220 = *((_DWORD *)a1 + 9);
          }
          memmove(&v219[v208 + 1], &v219[v208], v220 - v208);
          *(_WORD *)(a1[5] + v208) = 0;
          int v233 = *((_DWORD *)a1 + 9) + 2;
          goto LABEL_298;
        case 2u:
          unsigned int v221 = v207 + 4;
          int v222 = *((_DWORD *)a1 + 8);
          if (v221 <= v222)
          {
            int v225 = (char *)a1[5];
            unsigned int v226 = v208;
          }
          else
          {
            if (v222 <= 1) {
              int v222 = 1;
            }
            int v223 = 2 * v222;
            if (v223 <= (int)v221) {
              uint64_t v224 = v221;
            }
            else {
              uint64_t v224 = v223;
            }
            int v225 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v224, "Vector Storage (uint8_t, growth)");
            memcpy(v225, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v224;
            a1[5] = v225;
            unsigned int v226 = *((_DWORD *)a1 + 9);
          }
          memmove(&v225[v208 + 1], &v225[v208], v226 - v208);
          uint64_t v234 = a1[5] + v208;
          *(unsigned char *)(v234 + 2) = 0;
          *(_WORD *)uint64_t v234 = 0;
          int v233 = *((_DWORD *)a1 + 9) + 3;
          goto LABEL_298;
        case 3u:
          unsigned int v227 = v207 + 5;
          int v228 = *((_DWORD *)a1 + 8);
          if (v227 <= v228)
          {
            unsigned int v231 = (char *)a1[5];
            unsigned int v232 = v208;
          }
          else
          {
            if (v228 <= 1) {
              int v228 = 1;
            }
            int v229 = 2 * v228;
            if (v229 <= (int)v227) {
              uint64_t v230 = v227;
            }
            else {
              uint64_t v230 = v229;
            }
            unsigned int v231 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v230, "Vector Storage (uint8_t, growth)");
            memcpy(v231, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v230;
            a1[5] = v231;
            unsigned int v232 = *((_DWORD *)a1 + 9);
          }
          memmove(&v231[v208 + 1], &v231[v208], v232 - v208);
          *(_DWORD *)(a1[5] + v208) = 0;
          int v233 = *((_DWORD *)a1 + 9) + 4;
LABEL_298:
          *((_DWORD *)a1 + 9) = v233;
          break;
        default:
          break;
      }
    }
  }
  uint64_t v235 = *(void *)(a2 + 96);
  if (v235)
  {
    glpSerializeUniformBindings(a1, v235);
  }
  else
  {
    unsigned int v236 = (char)glp_serialized_integer32_control(0);
    int v237 = *((_DWORD *)a1 + 8);
    uint64_t v238 = *((unsigned int *)a1 + 9);
    int v239 = v238 + 1;
    if ((int)v238 + 1 <= v237)
    {
      v242 = (char *)a1[5];
      int v243 = *((_DWORD *)a1 + 9);
    }
    else
    {
      if (v237 <= 1) {
        int v237 = 1;
      }
      int v240 = 2 * v237;
      if (v240 <= v239) {
        uint64_t v241 = v239;
      }
      else {
        uint64_t v241 = v240;
      }
      v242 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v241, "Vector Storage (uint8_t, growth)");
      memcpy(v242, (const void *)a1[5], *((unsigned int *)a1 + 9));
      ((void (*)(void, void))a1[3])(*a1, a1[5]);
      *((_DWORD *)a1 + 8) = v241;
      a1[5] = v242;
      int v243 = *((_DWORD *)a1 + 9);
    }
    memmove(&v242[v238 + 1], &v242[v238], (v243 - v238));
    *(unsigned char *)(a1[5] + v238) = v236;
    int v244 = *((_DWORD *)a1 + 9);
    unsigned int v245 = v244 + 1;
    *((_DWORD *)a1 + 9) = v244 + 1;
    if ((v236 & 0x80000000) != 0)
    {
      switch((v236 >> 1) & 7)
      {
        case 0u:
          unsigned int v246 = v244 + 2;
          int v247 = *((_DWORD *)a1 + 8);
          if (v246 <= v247)
          {
            long long v250 = (char *)a1[5];
            unsigned int v251 = v245;
          }
          else
          {
            if (v247 <= 1) {
              int v247 = 1;
            }
            int v248 = 2 * v247;
            if (v248 <= (int)v246) {
              uint64_t v249 = v246;
            }
            else {
              uint64_t v249 = v248;
            }
            long long v250 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v249, "Vector Storage (uint8_t, growth)");
            memcpy(v250, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v249;
            a1[5] = v250;
            unsigned int v251 = *((_DWORD *)a1 + 9);
          }
          memmove(&v250[v245 + 1], &v250[v245], v251 - v245);
          *(unsigned char *)(a1[5] + v245) = 0;
          int v270 = *((_DWORD *)a1 + 9) + 1;
          goto LABEL_347;
        case 1u:
          unsigned int v252 = v244 + 3;
          int v253 = *((_DWORD *)a1 + 8);
          if (v252 <= v253)
          {
            uint64_t v256 = (char *)a1[5];
            unsigned int v257 = v245;
          }
          else
          {
            if (v253 <= 1) {
              int v253 = 1;
            }
            int v254 = 2 * v253;
            if (v254 <= (int)v252) {
              uint64_t v255 = v252;
            }
            else {
              uint64_t v255 = v254;
            }
            uint64_t v256 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v255, "Vector Storage (uint8_t, growth)");
            memcpy(v256, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v255;
            a1[5] = v256;
            unsigned int v257 = *((_DWORD *)a1 + 9);
          }
          memmove(&v256[v245 + 1], &v256[v245], v257 - v245);
          *(_WORD *)(a1[5] + v245) = 0;
          int v270 = *((_DWORD *)a1 + 9) + 2;
          goto LABEL_347;
        case 2u:
          unsigned int v258 = v244 + 4;
          int v259 = *((_DWORD *)a1 + 8);
          if (v258 <= v259)
          {
            v262 = (char *)a1[5];
            unsigned int v263 = v245;
          }
          else
          {
            if (v259 <= 1) {
              int v259 = 1;
            }
            int v260 = 2 * v259;
            if (v260 <= (int)v258) {
              uint64_t v261 = v258;
            }
            else {
              uint64_t v261 = v260;
            }
            v262 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v261, "Vector Storage (uint8_t, growth)");
            memcpy(v262, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v261;
            a1[5] = v262;
            unsigned int v263 = *((_DWORD *)a1 + 9);
          }
          memmove(&v262[v245 + 1], &v262[v245], v263 - v245);
          uint64_t v271 = a1[5] + v245;
          *(unsigned char *)(v271 + 2) = 0;
          *(_WORD *)uint64_t v271 = 0;
          int v270 = *((_DWORD *)a1 + 9) + 3;
          goto LABEL_347;
        case 3u:
          unsigned int v264 = v244 + 5;
          int v265 = *((_DWORD *)a1 + 8);
          if (v264 <= v265)
          {
            v268 = (char *)a1[5];
            unsigned int v269 = v245;
          }
          else
          {
            if (v265 <= 1) {
              int v265 = 1;
            }
            int v266 = 2 * v265;
            if (v266 <= (int)v264) {
              uint64_t v267 = v264;
            }
            else {
              uint64_t v267 = v266;
            }
            v268 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v267, "Vector Storage (uint8_t, growth)");
            memcpy(v268, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v267;
            a1[5] = v268;
            unsigned int v269 = *((_DWORD *)a1 + 9);
          }
          memmove(&v268[v245 + 1], &v268[v245], v269 - v245);
          *(_DWORD *)(a1[5] + v245) = 0;
          int v270 = *((_DWORD *)a1 + 9) + 4;
LABEL_347:
          *((_DWORD *)a1 + 9) = v270;
          break;
        default:
          break;
      }
    }
  }
  uint64_t v272 = *(void *)(a2 + 320);
  if (v272)
  {
    unsigned int v273 = *(_DWORD *)(v272 + 36);
    unsigned int v274 = (char)glp_serialized_integer32_control(v273);
    int v275 = *((_DWORD *)a1 + 8);
    uint64_t v276 = *((unsigned int *)a1 + 9);
    int v277 = v276 + 1;
    if ((int)v276 + 1 <= v275)
    {
      v280 = (char *)a1[5];
      int v281 = *((_DWORD *)a1 + 9);
    }
    else
    {
      if (v275 <= 1) {
        int v275 = 1;
      }
      int v278 = 2 * v275;
      if (v278 <= v277) {
        uint64_t v279 = v277;
      }
      else {
        uint64_t v279 = v278;
      }
      v280 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v279, "Vector Storage (uint8_t, growth)");
      memcpy(v280, (const void *)a1[5], *((unsigned int *)a1 + 9));
      ((void (*)(void, void))a1[3])(*a1, a1[5]);
      *((_DWORD *)a1 + 8) = v279;
      a1[5] = v280;
      int v281 = *((_DWORD *)a1 + 9);
    }
    uint64_t result = memmove(&v280[v276 + 1], &v280[v276], (v281 - v276));
    *(unsigned char *)(a1[5] + v276) = v274;
    int v291 = *((_DWORD *)a1 + 9);
    unsigned int v292 = v291 + 1;
    *((_DWORD *)a1 + 9) = v291 + 1;
    if ((v274 & 0x80000000) != 0)
    {
      switch((v274 >> 1) & 7)
      {
        case 0u:
          unsigned int v293 = v291 + 2;
          int v294 = *((_DWORD *)a1 + 8);
          if (v293 <= v294)
          {
            v297 = (char *)a1[5];
            unsigned int v298 = v292;
          }
          else
          {
            if (v294 <= 1) {
              int v294 = 1;
            }
            int v295 = 2 * v294;
            if (v295 <= (int)v293) {
              uint64_t v296 = v293;
            }
            else {
              uint64_t v296 = v295;
            }
            v297 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v296, "Vector Storage (uint8_t, growth)");
            memcpy(v297, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v296;
            a1[5] = v297;
            unsigned int v298 = *((_DWORD *)a1 + 9);
          }
          uint64_t result = memmove(&v297[v292 + 1], &v297[v292], v298 - v292);
          *(unsigned char *)(a1[5] + v292) = v273;
          int v343 = 1;
          goto LABEL_433;
        case 1u:
          unsigned int v307 = v291 + 3;
          int v308 = *((_DWORD *)a1 + 8);
          if (v307 <= v308)
          {
            v311 = (char *)a1[5];
            unsigned int v312 = v292;
          }
          else
          {
            if (v308 <= 1) {
              int v308 = 1;
            }
            int v309 = 2 * v308;
            if (v309 <= (int)v307) {
              uint64_t v310 = v307;
            }
            else {
              uint64_t v310 = v309;
            }
            v311 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v310, "Vector Storage (uint8_t, growth)");
            memcpy(v311, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v310;
            a1[5] = v311;
            unsigned int v312 = *((_DWORD *)a1 + 9);
          }
          uint64_t result = memmove(&v311[v292 + 1], &v311[v292], v312 - v292);
          *(_WORD *)(a1[5] + v292) = v273;
          int v343 = 2;
          goto LABEL_433;
        case 2u:
          unsigned int v313 = v291 + 4;
          int v314 = *((_DWORD *)a1 + 8);
          if (v313 <= v314)
          {
            v317 = (char *)a1[5];
            unsigned int v318 = v292;
          }
          else
          {
            if (v314 <= 1) {
              int v314 = 1;
            }
            int v315 = 2 * v314;
            if (v315 <= (int)v313) {
              uint64_t v316 = v313;
            }
            else {
              uint64_t v316 = v315;
            }
            v317 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v316, "Vector Storage (uint8_t, growth)");
            memcpy(v317, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v316;
            a1[5] = v317;
            unsigned int v318 = *((_DWORD *)a1 + 9);
          }
          uint64_t result = memmove(&v317[v292 + 1], &v317[v292], v318 - v292);
          uint64_t v344 = a1[5] + v292;
          *(unsigned char *)(v344 + 2) = BYTE2(v273);
          *(_WORD *)uint64_t v344 = v273;
          int v343 = 3;
          goto LABEL_433;
        case 3u:
          unsigned int v319 = v291 + 5;
          int v320 = *((_DWORD *)a1 + 8);
          if (v319 <= v320)
          {
            v323 = (char *)a1[5];
            unsigned int v324 = v292;
          }
          else
          {
            if (v320 <= 1) {
              int v320 = 1;
            }
            int v321 = 2 * v320;
            if (v321 <= (int)v319) {
              uint64_t v322 = v319;
            }
            else {
              uint64_t v322 = v321;
            }
            v323 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v322, "Vector Storage (uint8_t, growth)");
            memcpy(v323, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v322;
            a1[5] = v323;
            unsigned int v324 = *((_DWORD *)a1 + 9);
          }
          uint64_t result = memmove(&v323[v292 + 1], &v323[v292], v324 - v292);
          *(_DWORD *)(a1[5] + v292) = v273;
          int v343 = 4;
LABEL_433:
          *((_DWORD *)a1 + 9) += v343;
          break;
        default:
          break;
      }
    }
    unint64_t v345 = *(unsigned int *)(v272 + 32);
    if (v345)
    {
      uint64_t v346 = 0;
      for (unint64_t i = 0; i < v345; ++i)
      {
        uint64_t v348 = *(void *)(v272 + 40);
        uint64_t v349 = *(void *)(v348 + v346);
        if (v349)
        {
          unsigned int v350 = *(_DWORD *)(v348 + v346 + 8);
          LOBYTE(v351) = glp_serialized_integer32_control(v350);
          int v352 = *((_DWORD *)a1 + 8);
          uint64_t v353 = *((unsigned int *)a1 + 9);
          int v354 = v353 + 1;
          if ((int)v353 + 1 <= v352)
          {
            v357 = (char *)a1[5];
            int v358 = *((_DWORD *)a1 + 9);
          }
          else
          {
            if (v352 <= 1) {
              int v352 = 1;
            }
            int v355 = 2 * v352;
            if (v355 <= v354) {
              uint64_t v356 = v354;
            }
            else {
              uint64_t v356 = v355;
            }
            v357 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v356, "Vector Storage (uint8_t, growth)");
            memcpy(v357, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v356;
            a1[5] = v357;
            int v358 = *((_DWORD *)a1 + 9);
          }
          unsigned int v351 = (char)v351;
          memmove(&v357[v353 + 1], &v357[v353], (v358 - v353));
          *(unsigned char *)(a1[5] + v353) = v351;
          int v359 = *((_DWORD *)a1 + 9);
          unsigned int v360 = v359 + 1;
          *((_DWORD *)a1 + 9) = v359 + 1;
          if ((char)v351 < 0)
          {
            switch((v351 >> 1) & 7)
            {
              case 0u:
                unsigned int v361 = v359 + 2;
                int v362 = *((_DWORD *)a1 + 8);
                if (v361 <= v362)
                {
                  v365 = (char *)a1[5];
                  unsigned int v366 = v360;
                }
                else
                {
                  if (v362 <= 1) {
                    int v362 = 1;
                  }
                  int v363 = 2 * v362;
                  if (v363 <= (int)v361) {
                    uint64_t v364 = v361;
                  }
                  else {
                    uint64_t v364 = v363;
                  }
                  v365 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v364, "Vector Storage (uint8_t, growth)");
                  memcpy(v365, (const void *)a1[5], *((unsigned int *)a1 + 9));
                  ((void (*)(void, void))a1[3])(*a1, a1[5]);
                  *((_DWORD *)a1 + 8) = v364;
                  a1[5] = v365;
                  unsigned int v366 = *((_DWORD *)a1 + 9);
                }
                memmove(&v365[v360 + 1], &v365[v360], v366 - v360);
                *(unsigned char *)(a1[5] + v360) = v350;
                int v385 = 1;
                goto LABEL_483;
              case 1u:
                unsigned int v367 = v359 + 3;
                int v368 = *((_DWORD *)a1 + 8);
                if (v367 <= v368)
                {
                  v371 = (char *)a1[5];
                  unsigned int v372 = v360;
                }
                else
                {
                  if (v368 <= 1) {
                    int v368 = 1;
                  }
                  int v369 = 2 * v368;
                  if (v369 <= (int)v367) {
                    uint64_t v370 = v367;
                  }
                  else {
                    uint64_t v370 = v369;
                  }
                  v371 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v370, "Vector Storage (uint8_t, growth)");
                  memcpy(v371, (const void *)a1[5], *((unsigned int *)a1 + 9));
                  ((void (*)(void, void))a1[3])(*a1, a1[5]);
                  *((_DWORD *)a1 + 8) = v370;
                  a1[5] = v371;
                  unsigned int v372 = *((_DWORD *)a1 + 9);
                }
                memmove(&v371[v360 + 1], &v371[v360], v372 - v360);
                *(_WORD *)(a1[5] + v360) = v350;
                int v385 = 2;
                goto LABEL_483;
              case 2u:
                unsigned int v373 = v359 + 4;
                int v374 = *((_DWORD *)a1 + 8);
                if (v373 <= v374)
                {
                  v377 = (char *)a1[5];
                  unsigned int v378 = v360;
                }
                else
                {
                  if (v374 <= 1) {
                    int v374 = 1;
                  }
                  int v375 = 2 * v374;
                  if (v375 <= (int)v373) {
                    uint64_t v376 = v373;
                  }
                  else {
                    uint64_t v376 = v375;
                  }
                  v377 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v376, "Vector Storage (uint8_t, growth)");
                  memcpy(v377, (const void *)a1[5], *((unsigned int *)a1 + 9));
                  ((void (*)(void, void))a1[3])(*a1, a1[5]);
                  *((_DWORD *)a1 + 8) = v376;
                  a1[5] = v377;
                  unsigned int v378 = *((_DWORD *)a1 + 9);
                }
                memmove(&v377[v360 + 1], &v377[v360], v378 - v360);
                uint64_t v386 = a1[5] + v360;
                *(unsigned char *)(v386 + 2) = BYTE2(v350);
                *(_WORD *)uint64_t v386 = v350;
                int v385 = 3;
                goto LABEL_483;
              case 3u:
                unsigned int v379 = v359 + 5;
                int v380 = *((_DWORD *)a1 + 8);
                if (v379 <= v380)
                {
                  v383 = (char *)a1[5];
                  unsigned int v384 = v360;
                }
                else
                {
                  if (v380 <= 1) {
                    int v380 = 1;
                  }
                  int v381 = 2 * v380;
                  if (v381 <= (int)v379) {
                    uint64_t v382 = v379;
                  }
                  else {
                    uint64_t v382 = v381;
                  }
                  v383 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v382, "Vector Storage (uint8_t, growth)");
                  memcpy(v383, (const void *)a1[5], *((unsigned int *)a1 + 9));
                  ((void (*)(void, void))a1[3])(*a1, a1[5]);
                  *((_DWORD *)a1 + 8) = v382;
                  a1[5] = v383;
                  unsigned int v384 = *((_DWORD *)a1 + 9);
                }
                memmove(&v383[v360 + 1], &v383[v360], v384 - v360);
                *(_DWORD *)(a1[5] + v360) = v350;
                int v385 = 4;
LABEL_483:
                *((_DWORD *)a1 + 9) += v385;
                break;
              default:
                break;
            }
          }
          serialize_GLPString(a1, *(const char **)v349, *(void *)(v349 + 8));
          int v387 = *(_DWORD *)(v349 + 16);
          int v388 = *((_DWORD *)a1 + 8);
          uint64_t v389 = *((unsigned int *)a1 + 9);
          int v390 = v389 + 4;
          if ((int)v389 + 4 <= v388)
          {
            v393 = (char *)a1[5];
            int v394 = *((_DWORD *)a1 + 9);
          }
          else
          {
            if (v388 <= 1) {
              int v388 = 1;
            }
            int v391 = 2 * v388;
            if (v391 <= v390) {
              uint64_t v392 = v390;
            }
            else {
              uint64_t v392 = v391;
            }
            v393 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v392, "Vector Storage (uint8_t, growth)");
            memcpy(v393, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v392;
            a1[5] = v393;
            int v394 = *((_DWORD *)a1 + 9);
          }
          memmove(&v393[v389 + 1], &v393[v389], (v394 - v389));
          *(_DWORD *)(a1[5] + v389) = v387;
          int v396 = *((_DWORD *)a1 + 8);
          int v395 = *((_DWORD *)a1 + 9);
          unsigned int v397 = v395 + 4;
          *((_DWORD *)a1 + 9) = v395 + 4;
          int v398 = *(_DWORD *)(v349 + 20);
          unsigned int v399 = v395 + 8;
          if (v399 <= v396)
          {
            v402 = (char *)a1[5];
            unsigned int v403 = v397;
          }
          else
          {
            if (v396 <= 1) {
              int v396 = 1;
            }
            int v400 = 2 * v396;
            if (v400 <= (int)v399) {
              uint64_t v401 = v399;
            }
            else {
              uint64_t v401 = v400;
            }
            v402 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v401, "Vector Storage (uint8_t, growth)");
            memcpy(v402, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v401;
            a1[5] = v402;
            unsigned int v403 = *((_DWORD *)a1 + 9);
          }
          uint64_t result = memmove(&v402[v397 + 1], &v402[v397], v403 - v397);
          *(_DWORD *)(a1[5] + v397) = v398;
          *((_DWORD *)a1 + 9) += 4;
          unint64_t v345 = *(unsigned int *)(v272 + 32);
        }
        v346 += 16;
      }
    }
  }
  else
  {
    unsigned int v282 = (char)glp_serialized_integer32_control(0);
    int v283 = *((_DWORD *)a1 + 8);
    uint64_t v284 = *((unsigned int *)a1 + 9);
    int v285 = v284 + 1;
    if ((int)v284 + 1 <= v283)
    {
      v288 = (char *)a1[5];
      int v289 = *((_DWORD *)a1 + 9);
    }
    else
    {
      if (v283 <= 1) {
        int v283 = 1;
      }
      int v286 = 2 * v283;
      if (v286 <= v285) {
        uint64_t v287 = v285;
      }
      else {
        uint64_t v287 = v286;
      }
      v288 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v287, "Vector Storage (uint8_t, growth)");
      memcpy(v288, (const void *)a1[5], *((unsigned int *)a1 + 9));
      ((void (*)(void, void))a1[3])(*a1, a1[5]);
      *((_DWORD *)a1 + 8) = v287;
      a1[5] = v288;
      int v289 = *((_DWORD *)a1 + 9);
    }
    uint64_t result = memmove(&v288[v284 + 1], &v288[v284], (v289 - v284));
    *(unsigned char *)(a1[5] + v284) = v282;
    int v299 = *((_DWORD *)a1 + 9);
    unsigned int v300 = v299 + 1;
    *((_DWORD *)a1 + 9) = v299 + 1;
    if ((v282 & 0x80000000) != 0)
    {
      switch((v282 >> 1) & 7)
      {
        case 0u:
          unsigned int v301 = v299 + 2;
          int v302 = *((_DWORD *)a1 + 8);
          if (v301 <= v302)
          {
            v305 = (char *)a1[5];
            unsigned int v306 = v300;
          }
          else
          {
            if (v302 <= 1) {
              int v302 = 1;
            }
            int v303 = 2 * v302;
            if (v303 <= (int)v301) {
              uint64_t v304 = v301;
            }
            else {
              uint64_t v304 = v303;
            }
            v305 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v304, "Vector Storage (uint8_t, growth)");
            memcpy(v305, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v304;
            a1[5] = v305;
            unsigned int v306 = *((_DWORD *)a1 + 9);
          }
          uint64_t result = memmove(&v305[v300 + 1], &v305[v300], v306 - v300);
          *(unsigned char *)(a1[5] + v300) = 0;
          int v404 = 1;
          goto LABEL_511;
        case 1u:
          unsigned int v325 = v299 + 3;
          int v326 = *((_DWORD *)a1 + 8);
          if (v325 <= v326)
          {
            v329 = (char *)a1[5];
            unsigned int v330 = v300;
          }
          else
          {
            if (v326 <= 1) {
              int v326 = 1;
            }
            int v327 = 2 * v326;
            if (v327 <= (int)v325) {
              uint64_t v328 = v325;
            }
            else {
              uint64_t v328 = v327;
            }
            v329 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v328, "Vector Storage (uint8_t, growth)");
            memcpy(v329, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v328;
            a1[5] = v329;
            unsigned int v330 = *((_DWORD *)a1 + 9);
          }
          uint64_t result = memmove(&v329[v300 + 1], &v329[v300], v330 - v300);
          *(_WORD *)(a1[5] + v300) = 0;
          int v404 = 2;
          goto LABEL_511;
        case 2u:
          unsigned int v331 = v299 + 4;
          int v332 = *((_DWORD *)a1 + 8);
          if (v331 <= v332)
          {
            v335 = (char *)a1[5];
            unsigned int v336 = v300;
          }
          else
          {
            if (v332 <= 1) {
              int v332 = 1;
            }
            int v333 = 2 * v332;
            if (v333 <= (int)v331) {
              uint64_t v334 = v331;
            }
            else {
              uint64_t v334 = v333;
            }
            v335 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v334, "Vector Storage (uint8_t, growth)");
            memcpy(v335, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v334;
            a1[5] = v335;
            unsigned int v336 = *((_DWORD *)a1 + 9);
          }
          uint64_t result = memmove(&v335[v300 + 1], &v335[v300], v336 - v300);
          uint64_t v405 = a1[5] + v300;
          *(unsigned char *)(v405 + 2) = 0;
          *(_WORD *)uint64_t v405 = 0;
          int v404 = 3;
          goto LABEL_511;
        case 3u:
          unsigned int v337 = v299 + 5;
          int v338 = *((_DWORD *)a1 + 8);
          if (v337 <= v338)
          {
            v341 = (char *)a1[5];
            unsigned int v342 = v300;
          }
          else
          {
            if (v338 <= 1) {
              int v338 = 1;
            }
            int v339 = 2 * v338;
            if (v339 <= (int)v337) {
              uint64_t v340 = v337;
            }
            else {
              uint64_t v340 = v339;
            }
            v341 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v340, "Vector Storage (uint8_t, growth)");
            memcpy(v341, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v340;
            a1[5] = v341;
            unsigned int v342 = *((_DWORD *)a1 + 9);
          }
          uint64_t result = memmove(&v341[v300 + 1], &v341[v300], v342 - v300);
          *(_DWORD *)(a1[5] + v300) = 0;
          int v404 = 4;
LABEL_511:
          *((_DWORD *)a1 + 9) += v404;
          break;
        default:
          return result;
      }
    }
  }
  return result;
}

void *glpSerializeUniformBindings(void *a1, uint64_t a2)
{
  unsigned int v3 = *(_DWORD *)(a2 + 32);
  unsigned int v4 = (char)glp_serialized_integer32_control(v3);
  int v5 = *((_DWORD *)a1 + 8);
  uint64_t v6 = *((unsigned int *)a1 + 9);
  int v7 = v6 + 1;
  if ((int)v6 + 1 <= v5)
  {
    uint64_t v10 = (char *)a1[5];
    int v11 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v5 <= 1) {
      int v5 = 1;
    }
    int v8 = 2 * v5;
    if (v8 <= v7) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = v8;
    }
    uint64_t v10 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v9, "Vector Storage (uint8_t, growth)");
    memcpy(v10, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v9;
    a1[5] = v10;
    int v11 = *((_DWORD *)a1 + 9);
  }
  memmove(&v10[v6 + 1], &v10[v6], (v11 - v6));
  *(unsigned char *)(a1[5] + v6) = v4;
  int v12 = *((_DWORD *)a1 + 9);
  unsigned int v13 = v12 + 1;
  *((_DWORD *)a1 + 9) = v12 + 1;
  if ((v4 & 0x80000000) != 0)
  {
    switch((v4 >> 1) & 7)
    {
      case 0u:
        unsigned int v14 = v12 + 2;
        int v15 = *((_DWORD *)a1 + 8);
        if (v14 <= v15)
        {
          uint64_t v18 = (char *)a1[5];
          unsigned int v19 = v13;
        }
        else
        {
          if (v15 <= 1) {
            int v15 = 1;
          }
          int v16 = 2 * v15;
          if (v16 <= (int)v14) {
            uint64_t v17 = v14;
          }
          else {
            uint64_t v17 = v16;
          }
          uint64_t v18 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v17, "Vector Storage (uint8_t, growth)");
          memcpy(v18, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v17;
          a1[5] = v18;
          unsigned int v19 = *((_DWORD *)a1 + 9);
        }
        memmove(&v18[v13 + 1], &v18[v13], v19 - v13);
        *(unsigned char *)(a1[5] + v13) = v3;
        int v38 = 1;
        goto LABEL_47;
      case 1u:
        unsigned int v32 = v12 + 3;
        int v33 = *((_DWORD *)a1 + 8);
        if (v32 <= v33)
        {
          uint64_t v36 = (char *)a1[5];
          unsigned int v37 = v13;
        }
        else
        {
          if (v33 <= 1) {
            int v33 = 1;
          }
          int v34 = 2 * v33;
          if (v34 <= (int)v32) {
            uint64_t v35 = v32;
          }
          else {
            uint64_t v35 = v34;
          }
          uint64_t v36 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v35, "Vector Storage (uint8_t, growth)");
          memcpy(v36, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v35;
          a1[5] = v36;
          unsigned int v37 = *((_DWORD *)a1 + 9);
        }
        memmove(&v36[v13 + 1], &v36[v13], v37 - v13);
        *(_WORD *)(a1[5] + v13) = v3;
        int v38 = 2;
        goto LABEL_47;
      case 2u:
        unsigned int v20 = v12 + 4;
        int v21 = *((_DWORD *)a1 + 8);
        if (v20 <= v21)
        {
          uint64_t v24 = (char *)a1[5];
          unsigned int v25 = v13;
        }
        else
        {
          if (v21 <= 1) {
            int v21 = 1;
          }
          int v22 = 2 * v21;
          if (v22 <= (int)v20) {
            uint64_t v23 = v20;
          }
          else {
            uint64_t v23 = v22;
          }
          uint64_t v24 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v23, "Vector Storage (uint8_t, growth)");
          memcpy(v24, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v23;
          a1[5] = v24;
          unsigned int v25 = *((_DWORD *)a1 + 9);
        }
        memmove(&v24[v13 + 1], &v24[v13], v25 - v13);
        uint64_t v39 = a1[5] + v13;
        *(unsigned char *)(v39 + 2) = BYTE2(v3);
        *(_WORD *)uint64_t v39 = v3;
        int v38 = 3;
        goto LABEL_47;
      case 3u:
        unsigned int v26 = v12 + 5;
        int v27 = *((_DWORD *)a1 + 8);
        if (v26 <= v27)
        {
          uint64_t v30 = (char *)a1[5];
          unsigned int v31 = v13;
        }
        else
        {
          if (v27 <= 1) {
            int v27 = 1;
          }
          int v28 = 2 * v27;
          if (v28 <= (int)v26) {
            uint64_t v29 = v26;
          }
          else {
            uint64_t v29 = v28;
          }
          uint64_t v30 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v29, "Vector Storage (uint8_t, growth)");
          memcpy(v30, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v29;
          a1[5] = v30;
          unsigned int v31 = *((_DWORD *)a1 + 9);
        }
        memmove(&v30[v13 + 1], &v30[v13], v31 - v13);
        *(_DWORD *)(a1[5] + v13) = v3;
        int v38 = 4;
LABEL_47:
        *((_DWORD *)a1 + 9) += v38;
        break;
      default:
        break;
    }
  }
  unsigned int v40 = *(_DWORD *)(a2 + 36);
  unsigned int v41 = (char)glp_serialized_integer32_control(v40);
  int v42 = *((_DWORD *)a1 + 8);
  uint64_t v43 = *((unsigned int *)a1 + 9);
  int v44 = v43 + 1;
  if ((int)v43 + 1 <= v42)
  {
    uint64_t v47 = (char *)a1[5];
    int v48 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v42 <= 1) {
      int v42 = 1;
    }
    int v45 = 2 * v42;
    if (v45 <= v44) {
      uint64_t v46 = v44;
    }
    else {
      uint64_t v46 = v45;
    }
    uint64_t v47 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v46, "Vector Storage (uint8_t, growth)");
    memcpy(v47, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v46;
    a1[5] = v47;
    int v48 = *((_DWORD *)a1 + 9);
  }
  uint64_t result = memmove(&v47[v43 + 1], &v47[v43], (v48 - v43));
  *(unsigned char *)(a1[5] + v43) = v41;
  int v50 = *((_DWORD *)a1 + 9);
  unsigned int v51 = v50 + 1;
  *((_DWORD *)a1 + 9) = v50 + 1;
  if ((v41 & 0x80000000) != 0)
  {
    switch((v41 >> 1) & 7)
    {
      case 0u:
        unsigned int v52 = v50 + 2;
        int v53 = *((_DWORD *)a1 + 8);
        if (v52 <= v53)
        {
          int v56 = (char *)a1[5];
          unsigned int v57 = v51;
        }
        else
        {
          if (v53 <= 1) {
            int v53 = 1;
          }
          int v54 = 2 * v53;
          if (v54 <= (int)v52) {
            uint64_t v55 = v52;
          }
          else {
            uint64_t v55 = v54;
          }
          int v56 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v55, "Vector Storage (uint8_t, growth)");
          memcpy(v56, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v55;
          a1[5] = v56;
          unsigned int v57 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v56[v51 + 1], &v56[v51], v57 - v51);
        *(unsigned char *)(a1[5] + v51) = v40;
        int v76 = 1;
        goto LABEL_94;
      case 1u:
        unsigned int v70 = v50 + 3;
        int v71 = *((_DWORD *)a1 + 8);
        if (v70 <= v71)
        {
          uint64_t v74 = (char *)a1[5];
          unsigned int v75 = v51;
        }
        else
        {
          if (v71 <= 1) {
            int v71 = 1;
          }
          int v72 = 2 * v71;
          if (v72 <= (int)v70) {
            uint64_t v73 = v70;
          }
          else {
            uint64_t v73 = v72;
          }
          uint64_t v74 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v73, "Vector Storage (uint8_t, growth)");
          memcpy(v74, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v73;
          a1[5] = v74;
          unsigned int v75 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v74[v51 + 1], &v74[v51], v75 - v51);
        *(_WORD *)(a1[5] + v51) = v40;
        int v76 = 2;
        goto LABEL_94;
      case 2u:
        unsigned int v58 = v50 + 4;
        int v59 = *((_DWORD *)a1 + 8);
        if (v58 <= v59)
        {
          uint64_t v62 = (char *)a1[5];
          unsigned int v63 = v51;
        }
        else
        {
          if (v59 <= 1) {
            int v59 = 1;
          }
          int v60 = 2 * v59;
          if (v60 <= (int)v58) {
            uint64_t v61 = v58;
          }
          else {
            uint64_t v61 = v60;
          }
          uint64_t v62 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v61, "Vector Storage (uint8_t, growth)");
          memcpy(v62, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v61;
          a1[5] = v62;
          unsigned int v63 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v62[v51 + 1], &v62[v51], v63 - v51);
        uint64_t v77 = a1[5] + v51;
        *(unsigned char *)(v77 + 2) = BYTE2(v40);
        *(_WORD *)uint64_t v77 = v40;
        int v76 = 3;
        goto LABEL_94;
      case 3u:
        unsigned int v64 = v50 + 5;
        int v65 = *((_DWORD *)a1 + 8);
        if (v64 <= v65)
        {
          uint64_t v68 = (char *)a1[5];
          unsigned int v69 = v51;
        }
        else
        {
          if (v65 <= 1) {
            int v65 = 1;
          }
          int v66 = 2 * v65;
          if (v66 <= (int)v64) {
            uint64_t v67 = v64;
          }
          else {
            uint64_t v67 = v66;
          }
          uint64_t v68 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v67, "Vector Storage (uint8_t, growth)");
          memcpy(v68, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v67;
          a1[5] = v68;
          unsigned int v69 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v68[v51 + 1], &v68[v51], v69 - v51);
        *(_DWORD *)(a1[5] + v51) = v40;
        int v76 = 4;
LABEL_94:
        *((_DWORD *)a1 + 9) += v76;
        break;
      default:
        break;
    }
  }
  unint64_t v78 = *(unsigned int *)(a2 + 32);
  if (v78)
  {
    unint64_t v79 = 0;
    uint64_t v80 = 0;
    uint64_t v81 = *(void *)(a2 + 40);
    uint64_t v284 = v81;
    do
    {
      uint64_t v82 = *(int **)(v81 + 32 * v79);
      if (v82)
      {
        char v83 = glp_serialized_integer32_control(v80);
        int v84 = *((_DWORD *)a1 + 8);
        uint64_t v85 = *((unsigned int *)a1 + 9);
        int v86 = v85 + 1;
        if ((int)v85 + 1 <= v84)
        {
          unsigned int v89 = (char *)a1[5];
          int v90 = *((_DWORD *)a1 + 9);
        }
        else
        {
          if (v84 <= 1) {
            int v84 = 1;
          }
          int v87 = 2 * v84;
          if (v87 <= v86) {
            uint64_t v88 = v86;
          }
          else {
            uint64_t v88 = v87;
          }
          unsigned int v89 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v88, "Vector Storage (uint8_t, growth)");
          memcpy(v89, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v88;
          a1[5] = v89;
          int v90 = *((_DWORD *)a1 + 9);
        }
        memmove(&v89[v85 + 1], &v89[v85], (v90 - v85));
        *(unsigned char *)(a1[5] + v85) = v83;
        int v91 = *((_DWORD *)a1 + 9);
        unsigned int v92 = v91 + 1;
        *((_DWORD *)a1 + 9) = v91 + 1;
        if (v83 < 0)
        {
          switch((v83 >> 1) & 7)
          {
            case 0u:
              unsigned int v93 = v91 + 2;
              int v94 = *((_DWORD *)a1 + 8);
              if (v93 <= v94)
              {
                int v97 = (char *)a1[5];
                unsigned int v98 = v92;
              }
              else
              {
                if (v94 <= 1) {
                  int v94 = 1;
                }
                int v95 = 2 * v94;
                if (v95 <= (int)v93) {
                  uint64_t v96 = v93;
                }
                else {
                  uint64_t v96 = v95;
                }
                int v97 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v96, "Vector Storage (uint8_t, growth)");
                memcpy(v97, (const void *)a1[5], *((unsigned int *)a1 + 9));
                ((void (*)(void, void))a1[3])(*a1, a1[5]);
                *((_DWORD *)a1 + 8) = v96;
                a1[5] = v97;
                unsigned int v98 = *((_DWORD *)a1 + 9);
              }
              memmove(&v97[v92 + 1], &v97[v92], v98 - v92);
              *(unsigned char *)(a1[5] + v92) = v80;
              int v118 = 1;
              goto LABEL_145;
            case 1u:
              unsigned int v111 = v91 + 3;
              int v112 = *((_DWORD *)a1 + 8);
              if (v111 <= v112)
              {
                uint64_t v115 = (char *)a1[5];
                unsigned int v116 = v92;
              }
              else
              {
                if (v112 <= 1) {
                  int v112 = 1;
                }
                int v113 = 2 * v112;
                if (v113 <= (int)v111) {
                  uint64_t v114 = v111;
                }
                else {
                  uint64_t v114 = v113;
                }
                uint64_t v115 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v114, "Vector Storage (uint8_t, growth)");
                memcpy(v115, (const void *)a1[5], *((unsigned int *)a1 + 9));
                ((void (*)(void, void))a1[3])(*a1, a1[5]);
                *((_DWORD *)a1 + 8) = v114;
                a1[5] = v115;
                unsigned int v116 = *((_DWORD *)a1 + 9);
              }
              memmove(&v115[v92 + 1], &v115[v92], v116 - v92);
              *(_WORD *)(a1[5] + v92) = v80;
              int v118 = 2;
              goto LABEL_145;
            case 2u:
              unsigned int v99 = v91 + 4;
              int v100 = *((_DWORD *)a1 + 8);
              if (v99 <= v100)
              {
                int v103 = (char *)a1[5];
                unsigned int v104 = v92;
              }
              else
              {
                if (v100 <= 1) {
                  int v100 = 1;
                }
                int v101 = 2 * v100;
                if (v101 <= (int)v99) {
                  uint64_t v102 = v99;
                }
                else {
                  uint64_t v102 = v101;
                }
                int v103 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v102, "Vector Storage (uint8_t, growth)");
                memcpy(v103, (const void *)a1[5], *((unsigned int *)a1 + 9));
                ((void (*)(void, void))a1[3])(*a1, a1[5]);
                *((_DWORD *)a1 + 8) = v102;
                a1[5] = v103;
                unsigned int v104 = *((_DWORD *)a1 + 9);
              }
              memmove(&v103[v92 + 1], &v103[v92], v104 - v92);
              uint64_t v117 = a1[5] + v92;
              *(unsigned char *)(v117 + 2) = BYTE2(v80);
              *(_WORD *)uint64_t v117 = v80;
              int v118 = 3;
              goto LABEL_145;
            case 3u:
              unsigned int v105 = v91 + 5;
              int v106 = *((_DWORD *)a1 + 8);
              if (v105 <= v106)
              {
                int v109 = (char *)a1[5];
                unsigned int v110 = v92;
              }
              else
              {
                if (v106 <= 1) {
                  int v106 = 1;
                }
                int v107 = 2 * v106;
                if (v107 <= (int)v105) {
                  uint64_t v108 = v105;
                }
                else {
                  uint64_t v108 = v107;
                }
                int v109 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v108, "Vector Storage (uint8_t, growth)");
                memcpy(v109, (const void *)a1[5], *((unsigned int *)a1 + 9));
                ((void (*)(void, void))a1[3])(*a1, a1[5]);
                *((_DWORD *)a1 + 8) = v108;
                a1[5] = v109;
                unsigned int v110 = *((_DWORD *)a1 + 9);
              }
              memmove(&v109[v92 + 1], &v109[v92], v110 - v92);
              *(_DWORD *)(a1[5] + v92) = v80;
              int v118 = 4;
LABEL_145:
              *((_DWORD *)a1 + 9) += v118;
              break;
            default:
              break;
          }
        }
        serialize_GLPString(a1, *(const char **)(v81 + 32 * v79 + 8), *(void *)(v81 + 32 * v79 + 16));
        int v119 = *v82;
        int v120 = *((_DWORD *)a1 + 8);
        uint64_t v121 = *((unsigned int *)a1 + 9);
        int v122 = v121 + 4;
        if ((int)v121 + 4 <= v120)
        {
          int v125 = (char *)a1[5];
          int v126 = *((_DWORD *)a1 + 9);
        }
        else
        {
          if (v120 <= 1) {
            int v120 = 1;
          }
          int v123 = 2 * v120;
          if (v123 <= v122) {
            uint64_t v124 = v122;
          }
          else {
            uint64_t v124 = v123;
          }
          int v125 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v124, "Vector Storage (uint8_t, growth)");
          memcpy(v125, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v124;
          a1[5] = v125;
          int v126 = *((_DWORD *)a1 + 9);
        }
        memmove(&v125[v121 + 1], &v125[v121], (v126 - v121));
        *(_DWORD *)(a1[5] + v121) = v119;
        int v128 = *((_DWORD *)a1 + 8);
        int v127 = *((_DWORD *)a1 + 9);
        unsigned int v129 = v127 + 4;
        *((_DWORD *)a1 + 9) = v127 + 4;
        int v130 = v82[1];
        unsigned int v131 = v127 + 8;
        if (v131 <= v128)
        {
          unsigned int v134 = (char *)a1[5];
          unsigned int v135 = v129;
        }
        else
        {
          if (v128 <= 1) {
            int v128 = 1;
          }
          int v132 = 2 * v128;
          if (v132 <= (int)v131) {
            uint64_t v133 = v131;
          }
          else {
            uint64_t v133 = v132;
          }
          unsigned int v134 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v133, "Vector Storage (uint8_t, growth)");
          memcpy(v134, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v133;
          a1[5] = v134;
          unsigned int v135 = *((_DWORD *)a1 + 9);
        }
        memmove(&v134[v129 + 1], &v134[v129], v135 - v129);
        *(_DWORD *)(a1[5] + v129) = v130;
        int v137 = *((_DWORD *)a1 + 8);
        int v136 = *((_DWORD *)a1 + 9);
        unsigned int v138 = v136 + 4;
        *((_DWORD *)a1 + 9) = v136 + 4;
        int v139 = v82[2];
        unsigned int v140 = v136 + 8;
        if (v140 <= v137)
        {
          uint64_t v143 = (char *)a1[5];
          unsigned int v144 = v138;
        }
        else
        {
          if (v137 <= 1) {
            int v137 = 1;
          }
          int v141 = 2 * v137;
          if (v141 <= (int)v140) {
            uint64_t v142 = v140;
          }
          else {
            uint64_t v142 = v141;
          }
          uint64_t v143 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v142, "Vector Storage (uint8_t, growth)");
          memcpy(v143, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v142;
          a1[5] = v143;
          unsigned int v144 = *((_DWORD *)a1 + 9);
        }
        memmove(&v143[v138 + 1], &v143[v138], v144 - v138);
        *(_DWORD *)(a1[5] + v138) = v139;
        int v146 = *((_DWORD *)a1 + 8);
        int v145 = *((_DWORD *)a1 + 9);
        unsigned int v147 = v145 + 4;
        *((_DWORD *)a1 + 9) = v145 + 4;
        int v148 = v82[3];
        unsigned int v149 = v145 + 8;
        if (v149 <= v146)
        {
          int v152 = (char *)a1[5];
          unsigned int v153 = v147;
        }
        else
        {
          if (v146 <= 1) {
            int v146 = 1;
          }
          int v150 = 2 * v146;
          if (v150 <= (int)v149) {
            uint64_t v151 = v149;
          }
          else {
            uint64_t v151 = v150;
          }
          int v152 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v151, "Vector Storage (uint8_t, growth)");
          memcpy(v152, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v151;
          a1[5] = v152;
          unsigned int v153 = *((_DWORD *)a1 + 9);
        }
        memmove(&v152[v147 + 1], &v152[v147], v153 - v147);
        *(_DWORD *)(a1[5] + v147) = v148;
        int v155 = *((_DWORD *)a1 + 8);
        int v154 = *((_DWORD *)a1 + 9);
        unsigned int v156 = v154 + 4;
        *((_DWORD *)a1 + 9) = v154 + 4;
        int v157 = *((unsigned __int8 *)v82 + 80);
        unsigned int v158 = v154 + 8;
        if (v158 <= v155)
        {
          uint64_t v161 = (char *)a1[5];
          unsigned int v162 = v156;
        }
        else
        {
          if (v155 <= 1) {
            int v155 = 1;
          }
          int v159 = 2 * v155;
          if (v159 <= (int)v158) {
            uint64_t v160 = v158;
          }
          else {
            uint64_t v160 = v159;
          }
          uint64_t v161 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v160, "Vector Storage (uint8_t, growth)");
          memcpy(v161, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v160;
          a1[5] = v161;
          unsigned int v162 = *((_DWORD *)a1 + 9);
        }
        memmove(&v161[v156 + 1], &v161[v156], v162 - v156);
        *(_DWORD *)(a1[5] + v156) = v157;
        *((_DWORD *)a1 + 9) += 4;
        serialize_GLPType(a1, *((void *)v82 + 3));
        real_serialize_GLPValue(a1, *((void *)v82 + 2), *((unsigned int **)v82 + 3));
        uint64_t v163 = *((void *)v82 + 4);
        if (v163)
        {
          unsigned int v164 = *(_DWORD *)(v163 + 32);
          char v165 = glp_serialized_integer32_control(v164);
          int v166 = *((_DWORD *)a1 + 8);
          uint64_t v167 = *((unsigned int *)a1 + 9);
          int v168 = v167 + 1;
          if ((int)v167 + 1 <= v166)
          {
            unsigned int v171 = (char *)a1[5];
            int v172 = *((_DWORD *)a1 + 9);
          }
          else
          {
            if (v166 <= 1) {
              int v166 = 1;
            }
            int v169 = 2 * v166;
            if (v169 <= v168) {
              uint64_t v170 = v168;
            }
            else {
              uint64_t v170 = v169;
            }
            unsigned int v171 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v170, "Vector Storage (uint8_t, growth)");
            memcpy(v171, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v170;
            a1[5] = v171;
            int v172 = *((_DWORD *)a1 + 9);
          }
          memmove(&v171[v167 + 1], &v171[v167], (v172 - v167));
          *(unsigned char *)(a1[5] + v167) = v165;
          int v181 = *((_DWORD *)a1 + 9);
          unsigned int v182 = v181 + 1;
          *((_DWORD *)a1 + 9) = v181 + 1;
          if (v165 < 0)
          {
            switch((v165 >> 1) & 7)
            {
              case 0u:
                unsigned int v183 = v181 + 2;
                int v184 = *((_DWORD *)a1 + 8);
                if (v183 <= v184)
                {
                  uint64_t v187 = (char *)a1[5];
                  unsigned int v188 = v182;
                }
                else
                {
                  if (v184 <= 1) {
                    int v184 = 1;
                  }
                  int v185 = 2 * v184;
                  if (v185 <= (int)v183) {
                    uint64_t v186 = v183;
                  }
                  else {
                    uint64_t v186 = v185;
                  }
                  uint64_t v187 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v186, "Vector Storage (uint8_t, growth)");
                  memcpy(v187, (const void *)a1[5], *((unsigned int *)a1 + 9));
                  ((void (*)(void, void))a1[3])(*a1, a1[5]);
                  *((_DWORD *)a1 + 8) = v186;
                  a1[5] = v187;
                  unsigned int v188 = *((_DWORD *)a1 + 9);
                }
                memmove(&v187[v182 + 1], &v187[v182], v188 - v182);
                *(unsigned char *)(a1[5] + v182) = v164;
                int v230 = 1;
                goto LABEL_271;
              case 1u:
                unsigned int v209 = v181 + 3;
                int v210 = *((_DWORD *)a1 + 8);
                if (v209 <= v210)
                {
                  uint64_t v213 = (char *)a1[5];
                  unsigned int v214 = v182;
                }
                else
                {
                  if (v210 <= 1) {
                    int v210 = 1;
                  }
                  int v211 = 2 * v210;
                  if (v211 <= (int)v209) {
                    uint64_t v212 = v209;
                  }
                  else {
                    uint64_t v212 = v211;
                  }
                  uint64_t v213 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v212, "Vector Storage (uint8_t, growth)");
                  memcpy(v213, (const void *)a1[5], *((unsigned int *)a1 + 9));
                  ((void (*)(void, void))a1[3])(*a1, a1[5]);
                  *((_DWORD *)a1 + 8) = v212;
                  a1[5] = v213;
                  unsigned int v214 = *((_DWORD *)a1 + 9);
                }
                memmove(&v213[v182 + 1], &v213[v182], v214 - v182);
                *(_WORD *)(a1[5] + v182) = v164;
                int v230 = 2;
                goto LABEL_271;
              case 2u:
                unsigned int v197 = v181 + 4;
                int v198 = *((_DWORD *)a1 + 8);
                if (v197 <= v198)
                {
                  uint64_t v201 = (char *)a1[5];
                  unsigned int v202 = v182;
                }
                else
                {
                  if (v198 <= 1) {
                    int v198 = 1;
                  }
                  int v199 = 2 * v198;
                  if (v199 <= (int)v197) {
                    uint64_t v200 = v197;
                  }
                  else {
                    uint64_t v200 = v199;
                  }
                  uint64_t v201 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v200, "Vector Storage (uint8_t, growth)");
                  memcpy(v201, (const void *)a1[5], *((unsigned int *)a1 + 9));
                  ((void (*)(void, void))a1[3])(*a1, a1[5]);
                  *((_DWORD *)a1 + 8) = v200;
                  a1[5] = v201;
                  unsigned int v202 = *((_DWORD *)a1 + 9);
                }
                memmove(&v201[v182 + 1], &v201[v182], v202 - v182);
                uint64_t v231 = a1[5] + v182;
                *(unsigned char *)(v231 + 2) = BYTE2(v164);
                *(_WORD *)uint64_t v231 = v164;
                int v230 = 3;
                goto LABEL_271;
              case 3u:
                unsigned int v203 = v181 + 5;
                int v204 = *((_DWORD *)a1 + 8);
                if (v203 <= v204)
                {
                  int v207 = (char *)a1[5];
                  unsigned int v208 = v182;
                }
                else
                {
                  if (v204 <= 1) {
                    int v204 = 1;
                  }
                  int v205 = 2 * v204;
                  if (v205 <= (int)v203) {
                    uint64_t v206 = v203;
                  }
                  else {
                    uint64_t v206 = v205;
                  }
                  int v207 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v206, "Vector Storage (uint8_t, growth)");
                  memcpy(v207, (const void *)a1[5], *((unsigned int *)a1 + 9));
                  ((void (*)(void, void))a1[3])(*a1, a1[5]);
                  *((_DWORD *)a1 + 8) = v206;
                  a1[5] = v207;
                  unsigned int v208 = *((_DWORD *)a1 + 9);
                }
                memmove(&v207[v182 + 1], &v207[v182], v208 - v182);
                *(_DWORD *)(a1[5] + v182) = v164;
                int v230 = 4;
LABEL_271:
                *((_DWORD *)a1 + 9) += v230;
                break;
              default:
                break;
            }
          }
          unsigned int v232 = *(_DWORD *)(v163 + 36);
          char v233 = glp_serialized_integer32_control(v232);
          int v234 = *((_DWORD *)a1 + 8);
          uint64_t v235 = *((unsigned int *)a1 + 9);
          int v236 = v235 + 1;
          if ((int)v235 + 1 <= v234)
          {
            int v239 = (char *)a1[5];
            int v240 = *((_DWORD *)a1 + 9);
          }
          else
          {
            if (v234 <= 1) {
              int v234 = 1;
            }
            int v237 = 2 * v234;
            if (v237 <= v236) {
              uint64_t v238 = v236;
            }
            else {
              uint64_t v238 = v237;
            }
            int v239 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v238, "Vector Storage (uint8_t, growth)");
            memcpy(v239, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v238;
            a1[5] = v239;
            int v240 = *((_DWORD *)a1 + 9);
          }
          memmove(&v239[v235 + 1], &v239[v235], (v240 - v235));
          *(unsigned char *)(a1[5] + v235) = v233;
          int v241 = *((_DWORD *)a1 + 9);
          unsigned int v242 = v241 + 1;
          *((_DWORD *)a1 + 9) = v241 + 1;
          if (v233 < 0)
          {
            switch((v233 >> 1) & 7)
            {
              case 0u:
                unsigned int v243 = v241 + 2;
                int v244 = *((_DWORD *)a1 + 8);
                if (v243 <= v244)
                {
                  int v247 = (char *)a1[5];
                  unsigned int v248 = v242;
                }
                else
                {
                  if (v244 <= 1) {
                    int v244 = 1;
                  }
                  int v245 = 2 * v244;
                  if (v245 <= (int)v243) {
                    uint64_t v246 = v243;
                  }
                  else {
                    uint64_t v246 = v245;
                  }
                  int v247 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v246, "Vector Storage (uint8_t, growth)");
                  memcpy(v247, (const void *)a1[5], *((unsigned int *)a1 + 9));
                  ((void (*)(void, void))a1[3])(*a1, a1[5]);
                  *((_DWORD *)a1 + 8) = v246;
                  a1[5] = v247;
                  unsigned int v248 = *((_DWORD *)a1 + 9);
                }
                memmove(&v247[v242 + 1], &v247[v242], v248 - v242);
                *(unsigned char *)(a1[5] + v242) = v232;
                int v267 = 1;
                goto LABEL_318;
              case 1u:
                unsigned int v261 = v241 + 3;
                int v262 = *((_DWORD *)a1 + 8);
                if (v261 <= v262)
                {
                  int v265 = (char *)a1[5];
                  unsigned int v266 = v242;
                }
                else
                {
                  if (v262 <= 1) {
                    int v262 = 1;
                  }
                  int v263 = 2 * v262;
                  if (v263 <= (int)v261) {
                    uint64_t v264 = v261;
                  }
                  else {
                    uint64_t v264 = v263;
                  }
                  int v265 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v264, "Vector Storage (uint8_t, growth)");
                  memcpy(v265, (const void *)a1[5], *((unsigned int *)a1 + 9));
                  ((void (*)(void, void))a1[3])(*a1, a1[5]);
                  *((_DWORD *)a1 + 8) = v264;
                  a1[5] = v265;
                  unsigned int v266 = *((_DWORD *)a1 + 9);
                }
                memmove(&v265[v242 + 1], &v265[v242], v266 - v242);
                *(_WORD *)(a1[5] + v242) = v232;
                int v267 = 2;
                goto LABEL_318;
              case 2u:
                unsigned int v249 = v241 + 4;
                int v250 = *((_DWORD *)a1 + 8);
                if (v249 <= v250)
                {
                  int v253 = (char *)a1[5];
                  unsigned int v254 = v242;
                }
                else
                {
                  if (v250 <= 1) {
                    int v250 = 1;
                  }
                  int v251 = 2 * v250;
                  if (v251 <= (int)v249) {
                    uint64_t v252 = v249;
                  }
                  else {
                    uint64_t v252 = v251;
                  }
                  int v253 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v252, "Vector Storage (uint8_t, growth)");
                  memcpy(v253, (const void *)a1[5], *((unsigned int *)a1 + 9));
                  ((void (*)(void, void))a1[3])(*a1, a1[5]);
                  *((_DWORD *)a1 + 8) = v252;
                  a1[5] = v253;
                  unsigned int v254 = *((_DWORD *)a1 + 9);
                }
                memmove(&v253[v242 + 1], &v253[v242], v254 - v242);
                uint64_t v268 = a1[5] + v242;
                *(unsigned char *)(v268 + 2) = BYTE2(v232);
                *(_WORD *)uint64_t v268 = v232;
                int v267 = 3;
                goto LABEL_318;
              case 3u:
                unsigned int v255 = v241 + 5;
                int v256 = *((_DWORD *)a1 + 8);
                if (v255 <= v256)
                {
                  int v259 = (char *)a1[5];
                  unsigned int v260 = v242;
                }
                else
                {
                  if (v256 <= 1) {
                    int v256 = 1;
                  }
                  int v257 = 2 * v256;
                  if (v257 <= (int)v255) {
                    uint64_t v258 = v255;
                  }
                  else {
                    uint64_t v258 = v257;
                  }
                  int v259 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v258, "Vector Storage (uint8_t, growth)");
                  memcpy(v259, (const void *)a1[5], *((unsigned int *)a1 + 9));
                  ((void (*)(void, void))a1[3])(*a1, a1[5]);
                  *((_DWORD *)a1 + 8) = v258;
                  a1[5] = v259;
                  unsigned int v260 = *((_DWORD *)a1 + 9);
                }
                memmove(&v259[v242 + 1], &v259[v242], v260 - v242);
                *(_DWORD *)(a1[5] + v242) = v232;
                int v267 = 4;
LABEL_318:
                unsigned int v242 = *((_DWORD *)a1 + 9) + v267;
                *((_DWORD *)a1 + 9) = v242;
                break;
              default:
                break;
            }
          }
          size_t v195 = *(unsigned int *)(v163 + 36);
          int v269 = v195 + v242;
          int v270 = *((_DWORD *)a1 + 8);
          if (v195 + v242 <= v270)
          {
            unsigned int v273 = (char *)a1[5];
            unsigned int v274 = v242;
          }
          else
          {
            if (v270 <= 1) {
              int v270 = 1;
            }
            int v271 = 2 * v270;
            if (v271 <= v269) {
              uint64_t v272 = v269;
            }
            else {
              uint64_t v272 = v271;
            }
            unsigned int v273 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v272, "Vector Storage (uint8_t, growth)");
            memcpy(v273, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v272;
            a1[5] = v273;
            unsigned int v274 = *((_DWORD *)a1 + 9);
          }
          memmove(&v273[v242 + 1], &v273[v242], v274 - v242);
          memcpy((void *)(a1[5] + v242), *(const void **)(v163 + 40), v195);
LABEL_328:
          unsigned int v190 = *((_DWORD *)a1 + 9) + v195;
          *((_DWORD *)a1 + 9) = v190;
        }
        else
        {
          LOBYTE(v173) = glp_serialized_integer32_control(0);
          int v174 = *((_DWORD *)a1 + 8);
          uint64_t v175 = *((unsigned int *)a1 + 9);
          int v176 = v175 + 1;
          if ((int)v175 + 1 <= v174)
          {
            int v179 = (char *)a1[5];
            int v180 = *((_DWORD *)a1 + 9);
          }
          else
          {
            if (v174 <= 1) {
              int v174 = 1;
            }
            int v177 = 2 * v174;
            if (v177 <= v176) {
              uint64_t v178 = v176;
            }
            else {
              uint64_t v178 = v177;
            }
            int v179 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v178, "Vector Storage (uint8_t, growth)");
            memcpy(v179, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v178;
            a1[5] = v179;
            int v180 = *((_DWORD *)a1 + 9);
          }
          unsigned int v173 = (char)v173;
          memmove(&v179[v175 + 1], &v179[v175], (v180 - v175));
          *(unsigned char *)(a1[5] + v175) = v173;
          int v189 = *((_DWORD *)a1 + 9);
          unsigned int v190 = v189 + 1;
          *((_DWORD *)a1 + 9) = v189 + 1;
          if ((char)v173 < 0)
          {
            switch((v173 >> 1) & 7)
            {
              case 0u:
                unsigned int v191 = v189 + 2;
                int v192 = *((_DWORD *)a1 + 8);
                if (v191 <= v192)
                {
                  size_t v195 = a1[5];
                  unsigned int v196 = v190;
                }
                else
                {
                  if (v192 <= 1) {
                    int v192 = 1;
                  }
                  int v193 = 2 * v192;
                  if (v193 <= (int)v191) {
                    uint64_t v194 = v191;
                  }
                  else {
                    uint64_t v194 = v193;
                  }
                  size_t v195 = ((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v194, "Vector Storage (uint8_t, growth)");
                  memcpy((void *)v195, (const void *)a1[5], *((unsigned int *)a1 + 9));
                  ((void (*)(void, void))a1[3])(*a1, a1[5]);
                  *((_DWORD *)a1 + 8) = v194;
                  a1[5] = v195;
                  unsigned int v196 = *((_DWORD *)a1 + 9);
                }
                memmove((void *)(v195 + v190 + 1), (const void *)(v195 + v190), v196 - v190);
                *(unsigned char *)(a1[5] + v190) = 0;
                LODWORD(v195) = 1;
                goto LABEL_328;
              case 1u:
                unsigned int v215 = v189 + 3;
                int v216 = *((_DWORD *)a1 + 8);
                if (v215 <= v216)
                {
                  size_t v195 = a1[5];
                  unsigned int v219 = v190;
                }
                else
                {
                  if (v216 <= 1) {
                    int v216 = 1;
                  }
                  int v217 = 2 * v216;
                  if (v217 <= (int)v215) {
                    uint64_t v218 = v215;
                  }
                  else {
                    uint64_t v218 = v217;
                  }
                  size_t v195 = ((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v218, "Vector Storage (uint8_t, growth)");
                  memcpy((void *)v195, (const void *)a1[5], *((unsigned int *)a1 + 9));
                  ((void (*)(void, void))a1[3])(*a1, a1[5]);
                  *((_DWORD *)a1 + 8) = v218;
                  a1[5] = v195;
                  unsigned int v219 = *((_DWORD *)a1 + 9);
                }
                memmove((void *)(v195 + v190 + 1), (const void *)(v195 + v190), v219 - v190);
                *(_WORD *)(a1[5] + v190) = 0;
                LODWORD(v195) = 2;
                goto LABEL_328;
              case 2u:
                unsigned int v220 = v189 + 4;
                int v221 = *((_DWORD *)a1 + 8);
                if (v220 <= v221)
                {
                  size_t v195 = a1[5];
                  unsigned int v224 = v190;
                }
                else
                {
                  if (v221 <= 1) {
                    int v221 = 1;
                  }
                  int v222 = 2 * v221;
                  if (v222 <= (int)v220) {
                    uint64_t v223 = v220;
                  }
                  else {
                    uint64_t v223 = v222;
                  }
                  size_t v195 = ((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v223, "Vector Storage (uint8_t, growth)");
                  memcpy((void *)v195, (const void *)a1[5], *((unsigned int *)a1 + 9));
                  ((void (*)(void, void))a1[3])(*a1, a1[5]);
                  *((_DWORD *)a1 + 8) = v223;
                  a1[5] = v195;
                  unsigned int v224 = *((_DWORD *)a1 + 9);
                }
                memmove((void *)(v195 + v190 + 1), (const void *)(v195 + v190), v224 - v190);
                uint64_t v283 = a1[5] + v190;
                *(unsigned char *)(v283 + 2) = 0;
                *(_WORD *)uint64_t v283 = 0;
                LODWORD(v195) = 3;
                goto LABEL_328;
              case 3u:
                unsigned int v225 = v189 + 5;
                int v226 = *((_DWORD *)a1 + 8);
                if (v225 <= v226)
                {
                  size_t v195 = a1[5];
                  unsigned int v229 = v190;
                }
                else
                {
                  if (v226 <= 1) {
                    int v226 = 1;
                  }
                  int v227 = 2 * v226;
                  if (v227 <= (int)v225) {
                    uint64_t v228 = v225;
                  }
                  else {
                    uint64_t v228 = v227;
                  }
                  size_t v195 = ((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v228, "Vector Storage (uint8_t, growth)");
                  memcpy((void *)v195, (const void *)a1[5], *((unsigned int *)a1 + 9));
                  ((void (*)(void, void))a1[3])(*a1, a1[5]);
                  *((_DWORD *)a1 + 8) = v228;
                  a1[5] = v195;
                  unsigned int v229 = *((_DWORD *)a1 + 9);
                }
                memmove((void *)(v195 + v190 + 1), (const void *)(v195 + v190), v229 - v190);
                *(_DWORD *)(a1[5] + v190) = 0;
                LODWORD(v195) = 4;
                goto LABEL_328;
              default:
                break;
            }
          }
        }
        uint64_t v275 = 0;
        do
        {
          int v276 = v82[v275 + 10];
          int v277 = v190 + 4;
          int v278 = *((_DWORD *)a1 + 8);
          if (v190 + 4 <= v278)
          {
            int v281 = (char *)a1[5];
            unsigned int v282 = v190;
          }
          else
          {
            if (v278 <= 1) {
              int v278 = 1;
            }
            int v279 = 2 * v278;
            if (v279 <= v277) {
              uint64_t v280 = v277;
            }
            else {
              uint64_t v280 = v279;
            }
            int v281 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v280, "Vector Storage (uint8_t, growth)");
            memcpy(v281, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v280;
            a1[5] = v281;
            unsigned int v282 = *((_DWORD *)a1 + 9);
          }
          ++v275;
          uint64_t result = memmove(&v281[v190 + 1], &v281[v190], v282 - v190);
          *(_DWORD *)(a1[5] + v190) = v276;
          unsigned int v190 = *((_DWORD *)a1 + 9) + 4;
          *((_DWORD *)a1 + 9) = v190;
        }
        while (v275 != 5);
        uint64_t v80 = 0;
        uint64_t v81 = v284;
        unint64_t v78 = *(unsigned int *)(a2 + 32);
      }
      else
      {
        uint64_t v80 = (v80 + 1);
      }
      ++v79;
    }
    while (v79 < v78);
  }
  return result;
}

void *glpLinkProgramFromLinkerOutput(uint64_t a1, int a2, _OWORD *a3)
{
  uint64_t v127 = *MEMORY[0x263EF8340];
  uint64_t v6 = malloc_type_calloc(1uLL, 0x148uLL, 0xA92C9FCEuLL);
  if (!v6) {
LABEL_242:
  }
    abort();
  int v7 = v6;
  v6[40] = 0;
  *((_OWORD *)v6 + 18) = 0u;
  *((_OWORD *)v6 + 19) = 0u;
  *((_OWORD *)v6 + 16) = 0u;
  *((_OWORD *)v6 + 17) = 0u;
  *((_OWORD *)v6 + 14) = 0u;
  *((_OWORD *)v6 + 15) = 0u;
  *((_OWORD *)v6 + 12) = 0u;
  *((_OWORD *)v6 + 13) = 0u;
  *((_OWORD *)v6 + 10) = 0u;
  *((_OWORD *)v6 + 11) = 0u;
  *((_OWORD *)v6 + 8) = 0u;
  *((_OWORD *)v6 + 9) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 7) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  int v8 = (unsigned int *)(a3 + 6);
  uint64_t v9 = 5;
  *(_OWORD *)uint64_t v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  do
  {
    if (*(v8 - 2))
    {
      if (v8[1])
      {
        uint64_t v10 = (uint64_t)a3 + *v8;
        uint64_t v11 = PPStreamCreate();
        PPStreamAttachStream(v11, v10);
        v7[v9 - 5] = v11;
      }
      if (v8[3])
      {
        glpCreateShaderByteCode();
        uint64_t v13 = v12;
        unsigned int v14 = malloc_type_malloc(v8[3], 0x7081ABB9uLL);
        if (!v14) {
          goto LABEL_242;
        }
        *(void *)uint64_t v13 = v14;
        memcpy(v14, (char *)a3 + v8[2], v8[3]);
        size_t v15 = v8[7];
        if (v15)
        {
          int v16 = malloc_type_malloc(v15, 0x7081ABB9uLL);
          if (!v16) {
            goto LABEL_242;
          }
          *(void *)(v13 + 8) = v16;
          memcpy(v16, (char *)a3 + v8[6], v8[7]);
        }
        size_t v17 = v8[5];
        if (v17)
        {
          uint64_t v18 = malloc_type_malloc(v17, 0x7081ABB9uLL);
          if (!v18) {
            goto LABEL_242;
          }
          *(void *)(v13 + 40) = v18;
          memcpy(v18, (char *)a3 + v8[4], v8[5]);
        }
        size_t v19 = v8[9];
        if (v19)
        {
          unsigned int v20 = malloc_type_malloc(v19, 0x7081ABB9uLL);
          if (!v20) {
            goto LABEL_242;
          }
          *(void *)(v13 + 16) = v20;
          memcpy(v20, (char *)a3 + v8[8], v8[9]);
        }
        size_t v21 = v8[11];
        if (v21)
        {
          int v22 = malloc_type_malloc(v21, 0x7081ABB9uLL);
          if (!v22) {
            goto LABEL_242;
          }
          *(void *)(v13 + 24) = v22;
          memcpy(v22, (char *)a3 + v8[10], v8[11]);
        }
        size_t v23 = v8[13];
        if (v23)
        {
          uint64_t v24 = malloc_type_malloc(v23, 0x7081ABB9uLL);
          if (!v24) {
            goto LABEL_242;
          }
          *(void *)(v13 + 32) = v24;
          memcpy(v24, (char *)a3 + v8[12], v8[13]);
        }
        *(_DWORD *)(v13 + 48) = v8[14];
        *(void *)(v13 + 72) = *((void *)v8 + 10);
        *(void *)(v13 + 80) = *((void *)v8 + 11);
        *(_DWORD *)(v13 + 52) = v8[15];
        *(_OWORD *)(v13 + 56) = *((_OWORD *)v8 + 4);
        v7[v9] = v13;
      }
    }
    ++v9;
    v8 += 26;
  }
  while (v9 != 10);
  memset(v123, 0, sizeof(v123));
  glpInitPoolAllocator(4096, 4096, v123);
  uint64_t v126 = 0;
  long long v125 = 0u;
  memset(v124, 0, sizeof(v124));
  glpInitDeserialContext((uint64_t)v124, (uint64_t)v123, (uint64_t)v123, a1, a2);
  uint64_t StringHash = glpMakeStringHash(&GLP_MALLOC_ALLOCATOR);
  v7[23] = StringHash;
  deserialize_bindings((uint64_t)v124, StringHash);
  uint64_t v26 = glpMakeStringHash(&GLP_MALLOC_ALLOCATOR);
  v7[24] = v26;
  deserialize_bindings((uint64_t)v124, v26);
  v7[10] = glpDeserializeUniformBindings((uint64_t)v124);
  uint64_t v27 = HIDWORD(v126);
  unint64_t v28 = v126;
  if (HIDWORD(v126) >= v126) {
    goto LABEL_241;
  }
  uint64_t v29 = *((void *)&v125 + 1);
  int v30 = *(char *)(*((void *)&v125 + 1) + HIDWORD(v126));
  unint64_t v31 = *(unsigned __int8 *)(*((void *)&v125 + 1) + HIDWORD(v126));
  uint64_t v32 = HIDWORD(v126) + 1;
  ++HIDWORD(v126);
  if (v30 < 0)
  {
    uint64_t v33 = (v31 >> 1) & 7;
    switch(v33)
    {
      case 1:
        if (v27 + 3 > (unint64_t)v126) {
          goto LABEL_241;
        }
        LODWORD(v34) = *(unsigned __int16 *)(*((void *)&v125 + 1) + v32);
        LODWORD(v32) = v27 + 3;
        goto LABEL_47;
      case 2:
        unsigned int v35 = v27 + 4;
        if (v35 > v126) {
          goto LABEL_241;
        }
        LODWORD(v34) = *(unsigned __int16 *)(*((void *)&v125 + 1) + v32) | (*(unsigned __int8 *)(*((void *)&v125 + 1)
                                                                                                 + v32
                                                                                                 + 2) << 16);
        HIDWORD(v126) = v35;
        LODWORD(v32) = v35;
        goto LABEL_48;
      case 3:
        if (v27 + 5 > (unint64_t)v126) {
          goto LABEL_241;
        }
        LODWORD(v34) = *(_DWORD *)(*((void *)&v125 + 1) + v32);
        LODWORD(v32) = v27 + 5;
        goto LABEL_47;
      case 4:
        if (v27 + 5 > (unint64_t)v126) {
          goto LABEL_241;
        }
        LODWORD(v34) = *(_DWORD *)(*((void *)&v125 + 1) + v32);
        HIDWORD(v126) = v27 + 5;
        if ((int)v27 + 5 >= v126) {
          goto LABEL_241;
        }
        LODWORD(v32) = v27 + 6;
        goto LABEL_47;
      case 5:
        if (v27 + 5 > (unint64_t)v126) {
          goto LABEL_241;
        }
        LODWORD(v34) = *(_DWORD *)(*((void *)&v125 + 1) + v32);
        HIDWORD(v126) = v27 + 5;
        if ((unint64_t)(v27 + 5) + 2 > v126) {
          goto LABEL_241;
        }
        LODWORD(v32) = v27 + 7;
        goto LABEL_47;
      case 6:
        if (v27 + 5 > (unint64_t)v126) {
          goto LABEL_241;
        }
        LODWORD(v34) = *(_DWORD *)(*((void *)&v125 + 1) + v32);
        HIDWORD(v126) = v27 + 5;
        LODWORD(v32) = v27 + 8;
        if ((int)v27 + 8 > v126) {
          goto LABEL_241;
        }
        goto LABEL_47;
      case 7:
        if (v27 + 9 > (unint64_t)v126) {
          goto LABEL_241;
        }
        uint64_t v34 = *(void *)(*((void *)&v125 + 1) + v32);
        LODWORD(v32) = v27 + 9;
        goto LABEL_47;
      default:
        if (v32 >= v126) {
          goto LABEL_241;
        }
        LODWORD(v34) = *(unsigned __int8 *)(*((void *)&v125 + 1) + v32);
        LODWORD(v32) = v27 + 2;
LABEL_47:
        HIDWORD(v126) = v32;
LABEL_48:
        if (v30) {
          uint64_t v36 = -256 << (8 * v33);
        }
        else {
          LODWORD(v36) = 0;
        }
        LODWORD(v31) = v34 | v36;
        break;
    }
  }
  *((_DWORD *)v7 + 56) = v31;
  if (v32 >= v28) {
LABEL_241:
  }
    glpDeserialError((uint64_t)v124, 1u);
  int v37 = *(char *)(v29 + v32);
  unint64_t v38 = *(unsigned __int8 *)(v29 + v32);
  uint64_t v39 = v32 + 1;
  HIDWORD(v126) = v32 + 1;
  if (v37 < 0)
  {
    uint64_t v40 = (v38 >> 1) & 7;
    switch(v40)
    {
      case 1:
        if ((unint64_t)v32 + 3 > v28) {
          goto LABEL_241;
        }
        LODWORD(v29) = *(unsigned __int16 *)(v29 + v39);
        int v41 = v32 + 3;
        goto LABEL_74;
      case 2:
        unsigned int v42 = v32 + 4;
        if (v42 > v28) {
          goto LABEL_241;
        }
        LODWORD(v29) = *(unsigned __int16 *)(v29 + v39) | (*(unsigned __int8 *)(v29 + v39 + 2) << 16);
LABEL_71:
        HIDWORD(v126) = v42;
        goto LABEL_75;
      case 3:
        if ((unint64_t)v32 + 5 > v28) {
          goto LABEL_241;
        }
        LODWORD(v29) = *(_DWORD *)(v29 + v39);
        int v41 = v32 + 5;
        goto LABEL_74;
      case 4:
        if ((unint64_t)v32 + 5 > v28) {
          goto LABEL_241;
        }
        LODWORD(v29) = *(_DWORD *)(v29 + v39);
        HIDWORD(v126) = v32 + 5;
        if ((int)v32 + 5 >= v28) {
          goto LABEL_241;
        }
        int v41 = v32 + 6;
        goto LABEL_74;
      case 5:
        if ((unint64_t)v32 + 5 > v28) {
          goto LABEL_241;
        }
        LODWORD(v29) = *(_DWORD *)(v29 + v39);
        HIDWORD(v126) = v32 + 5;
        if ((unint64_t)(v32 + 5) + 2 > v28) {
          goto LABEL_241;
        }
        int v41 = v32 + 7;
        goto LABEL_74;
      case 6:
        if ((unint64_t)v32 + 5 <= v28)
        {
          LODWORD(v29) = *(_DWORD *)(v29 + v39);
          HIDWORD(v126) = v32 + 5;
          unsigned int v42 = v32 + 8;
          if (v42 <= v28) {
            goto LABEL_71;
          }
        }
        goto LABEL_241;
      case 7:
        if ((unint64_t)v32 + 9 > v28) {
          goto LABEL_241;
        }
        uint64_t v29 = *(void *)(v29 + v39);
        int v41 = v32 + 9;
        goto LABEL_74;
      default:
        if (v39 >= v28) {
          goto LABEL_241;
        }
        LODWORD(v29) = *(unsigned __int8 *)(v29 + v39);
        int v41 = v32 + 2;
LABEL_74:
        HIDWORD(v126) = v41;
LABEL_75:
        if (v37) {
          uint64_t v43 = -256 << (8 * v40);
        }
        else {
          LODWORD(v43) = 0;
        }
        LODWORD(v38) = v29 | v43;
        break;
    }
  }
  v7[25] = 4;
  for (v7[26] = (*((uint64_t (**)(void, uint64_t, const char *))&GLP_MALLOC_ALLOCATOR + 1))(GLP_MALLOC_ALLOCATOR, 16, "Vector Storage (int)"); v38; LODWORD(v38) = v38 - 1)
  {
    uint64_t v44 = HIDWORD(v126);
    if (HIDWORD(v126) >= v126) {
      goto LABEL_241;
    }
    int v45 = *(char *)(*((void *)&v125 + 1) + HIDWORD(v126));
    unint64_t v46 = *(unsigned __int8 *)(*((void *)&v125 + 1) + HIDWORD(v126));
    uint64_t v47 = HIDWORD(v126) + 1;
    ++HIDWORD(v126);
    if (v45 < 0)
    {
      uint64_t v48 = (v46 >> 1) & 7;
      switch(v48)
      {
        case 1:
          if (v44 + 3 > (unint64_t)v126) {
            goto LABEL_241;
          }
          LODWORD(v49) = *(unsigned __int16 *)(*((void *)&v125 + 1) + v47);
          unsigned int v50 = v44 + 3;
          break;
        case 2:
          unsigned int v50 = v44 + 4;
          if (v50 > v126) {
            goto LABEL_241;
          }
          LODWORD(v49) = *(unsigned __int16 *)(*((void *)&v125 + 1) + v47) | (*(unsigned __int8 *)(*((void *)&v125 + 1) + v47 + 2) << 16);
          break;
        case 3:
          if (v44 + 5 > (unint64_t)v126) {
            goto LABEL_241;
          }
          LODWORD(v49) = *(_DWORD *)(*((void *)&v125 + 1) + v47);
          unsigned int v50 = v44 + 5;
          break;
        case 4:
          if (v44 + 5 > (unint64_t)v126) {
            goto LABEL_241;
          }
          LODWORD(v49) = *(_DWORD *)(*((void *)&v125 + 1) + v47);
          HIDWORD(v126) = v44 + 5;
          if ((int)v44 + 5 >= v126) {
            goto LABEL_241;
          }
          unsigned int v50 = v44 + 6;
          break;
        case 5:
          if (v44 + 5 > (unint64_t)v126) {
            goto LABEL_241;
          }
          LODWORD(v49) = *(_DWORD *)(*((void *)&v125 + 1) + v47);
          HIDWORD(v126) = v44 + 5;
          if ((unint64_t)(v44 + 5) + 2 > v126) {
            goto LABEL_241;
          }
          unsigned int v50 = v44 + 7;
          break;
        case 6:
          if (v44 + 5 > (unint64_t)v126) {
            goto LABEL_241;
          }
          LODWORD(v49) = *(_DWORD *)(*((void *)&v125 + 1) + v47);
          HIDWORD(v126) = v44 + 5;
          unsigned int v50 = v44 + 8;
          if (v50 > v126) {
            goto LABEL_241;
          }
          break;
        case 7:
          if (v44 + 9 > (unint64_t)v126) {
            goto LABEL_241;
          }
          uint64_t v49 = *(void *)(*((void *)&v125 + 1) + v47);
          unsigned int v50 = v44 + 9;
          break;
        default:
          if (v47 >= v126) {
            goto LABEL_241;
          }
          LODWORD(v49) = *(unsigned __int8 *)(*((void *)&v125 + 1) + v47);
          unsigned int v50 = v44 + 2;
          break;
      }
      HIDWORD(v126) = v50;
      if (v45) {
        uint64_t v51 = -256 << (8 * v48);
      }
      else {
        LODWORD(v51) = 0;
      }
      LODWORD(v46) = v49 | v51;
    }
    int v52 = *((_DWORD *)v7 + 50);
    uint64_t v53 = *((unsigned int *)v7 + 51);
    if ((int)v53 + 1 <= v52)
    {
      int v56 = (char *)v7[26];
      int v57 = *((_DWORD *)v7 + 51);
    }
    else
    {
      if (v52 <= 1) {
        int v52 = 1;
      }
      int v54 = 2 * v52;
      if (v54 <= (int)v53 + 1) {
        unsigned int v55 = v53 + 1;
      }
      else {
        unsigned int v55 = v54;
      }
      int v56 = (char *)(*((uint64_t (**)(void, uint64_t, const char *))&GLP_MALLOC_ALLOCATOR + 1))(GLP_MALLOC_ALLOCATOR, 4 * v55, "Vector Storage (int, growth)");
      memcpy(v56, (const void *)v7[26], 4 * *((unsigned int *)v7 + 51));
      off_26B86F7A0(GLP_MALLOC_ALLOCATOR, (void *)v7[26]);
      *((_DWORD *)v7 + 50) = v55;
      v7[26] = v56;
      int v57 = *((_DWORD *)v7 + 51);
    }
    memmove(&v56[4 * v53 + 4], &v56[4 * v53], 4 * (v57 - v53));
    *(_DWORD *)(v7[26] + 4 * v53) = v46;
    ++*((_DWORD *)v7 + 51);
  }
  uint64_t v58 = HIDWORD(v126);
  if (HIDWORD(v126) >= v126) {
    goto LABEL_241;
  }
  int v59 = *(char *)(*((void *)&v125 + 1) + HIDWORD(v126));
  unint64_t v60 = *(unsigned __int8 *)(*((void *)&v125 + 1) + HIDWORD(v126));
  uint64_t v61 = HIDWORD(v126) + 1;
  ++HIDWORD(v126);
  if (v59 < 0)
  {
    uint64_t v62 = (v60 >> 1) & 7;
    switch(v62)
    {
      case 1:
        if (v58 + 3 > (unint64_t)v126) {
          goto LABEL_241;
        }
        LODWORD(v63) = *(unsigned __int16 *)(*((void *)&v125 + 1) + v61);
        unsigned int v64 = v58 + 3;
        break;
      case 2:
        unsigned int v64 = v58 + 4;
        if (v64 > v126) {
          goto LABEL_241;
        }
        LODWORD(v63) = *(unsigned __int16 *)(*((void *)&v125 + 1) + v61) | (*(unsigned __int8 *)(*((void *)&v125 + 1)
                                                                                                 + v61
                                                                                                 + 2) << 16);
        break;
      case 3:
        if (v58 + 5 > (unint64_t)v126) {
          goto LABEL_241;
        }
        LODWORD(v63) = *(_DWORD *)(*((void *)&v125 + 1) + v61);
        unsigned int v64 = v58 + 5;
        break;
      case 4:
        if (v58 + 5 > (unint64_t)v126) {
          goto LABEL_241;
        }
        LODWORD(v63) = *(_DWORD *)(*((void *)&v125 + 1) + v61);
        HIDWORD(v126) = v58 + 5;
        if ((int)v58 + 5 >= v126) {
          goto LABEL_241;
        }
        unsigned int v64 = v58 + 6;
        break;
      case 5:
        if (v58 + 5 > (unint64_t)v126) {
          goto LABEL_241;
        }
        LODWORD(v63) = *(_DWORD *)(*((void *)&v125 + 1) + v61);
        HIDWORD(v126) = v58 + 5;
        if ((unint64_t)(v58 + 5) + 2 > v126) {
          goto LABEL_241;
        }
        unsigned int v64 = v58 + 7;
        break;
      case 6:
        if (v58 + 5 > (unint64_t)v126) {
          goto LABEL_241;
        }
        LODWORD(v63) = *(_DWORD *)(*((void *)&v125 + 1) + v61);
        HIDWORD(v126) = v58 + 5;
        unsigned int v64 = v58 + 8;
        if (v64 > v126) {
          goto LABEL_241;
        }
        break;
      case 7:
        if (v58 + 9 > (unint64_t)v126) {
          goto LABEL_241;
        }
        uint64_t v63 = *(void *)(*((void *)&v125 + 1) + v61);
        unsigned int v64 = v58 + 9;
        break;
      default:
        if (v61 >= v126) {
          goto LABEL_241;
        }
        LODWORD(v63) = *(unsigned __int8 *)(*((void *)&v125 + 1) + v61);
        unsigned int v64 = v58 + 2;
        break;
    }
    HIDWORD(v126) = v64;
    if (v59) {
      uint64_t v65 = -256 << (8 * v62);
    }
    else {
      LODWORD(v65) = 0;
    }
    LODWORD(v60) = v63 | v65;
  }
  size_t v66 = (int)((16 * v60) | 8);
  uint64_t v67 = (_DWORD *)(*((uint64_t (**)(void, size_t, const char *))&GLP_MALLOC_ALLOCATOR + 1))(GLP_MALLOC_ALLOCATOR, v66, "context state");
  bzero(v67, v66);
  _DWORD *v67 = v60;
  if (v60)
  {
    uint64_t v68 = v60;
    unsigned int v69 = v67 + 4;
    do
    {
      uint64_t v70 = HIDWORD(v126);
      unint64_t v71 = v126;
      if (HIDWORD(v126) >= v126) {
        goto LABEL_241;
      }
      uint64_t v72 = *((void *)&v125 + 1);
      int v73 = *(char *)(*((void *)&v125 + 1) + HIDWORD(v126));
      unint64_t v74 = *(unsigned __int8 *)(*((void *)&v125 + 1) + HIDWORD(v126));
      uint64_t v75 = HIDWORD(v126) + 1;
      ++HIDWORD(v126);
      if (v73 < 0)
      {
        uint64_t v76 = (v74 >> 1) & 7;
        switch(v76)
        {
          case 1:
            if (v70 + 3 > (unint64_t)v126) {
              goto LABEL_241;
            }
            LODWORD(v77) = *(unsigned __int16 *)(*((void *)&v125 + 1) + v75);
            LODWORD(v75) = v70 + 3;
            goto LABEL_165;
          case 2:
            unsigned int v78 = v70 + 4;
            if (v78 > v126) {
              goto LABEL_241;
            }
            LODWORD(v77) = *(unsigned __int16 *)(*((void *)&v125 + 1) + v75) | (*(unsigned __int8 *)(*((void *)&v125 + 1) + v75 + 2) << 16);
            HIDWORD(v126) = v78;
            LODWORD(v75) = v78;
            goto LABEL_166;
          case 3:
            if (v70 + 5 > (unint64_t)v126) {
              goto LABEL_241;
            }
            LODWORD(v77) = *(_DWORD *)(*((void *)&v125 + 1) + v75);
            LODWORD(v75) = v70 + 5;
            goto LABEL_165;
          case 4:
            if (v70 + 5 > (unint64_t)v126) {
              goto LABEL_241;
            }
            LODWORD(v77) = *(_DWORD *)(*((void *)&v125 + 1) + v75);
            HIDWORD(v126) = v70 + 5;
            if ((int)v70 + 5 >= v126) {
              goto LABEL_241;
            }
            LODWORD(v75) = v70 + 6;
            goto LABEL_165;
          case 5:
            if (v70 + 5 > (unint64_t)v126) {
              goto LABEL_241;
            }
            LODWORD(v77) = *(_DWORD *)(*((void *)&v125 + 1) + v75);
            HIDWORD(v126) = v70 + 5;
            if ((unint64_t)(v70 + 5) + 2 > v126) {
              goto LABEL_241;
            }
            LODWORD(v75) = v70 + 7;
            goto LABEL_165;
          case 6:
            if (v70 + 5 > (unint64_t)v126) {
              goto LABEL_241;
            }
            LODWORD(v77) = *(_DWORD *)(*((void *)&v125 + 1) + v75);
            HIDWORD(v126) = v70 + 5;
            LODWORD(v75) = v70 + 8;
            if ((int)v70 + 8 > v126) {
              goto LABEL_241;
            }
            goto LABEL_165;
          case 7:
            if (v70 + 9 > (unint64_t)v126) {
              goto LABEL_241;
            }
            uint64_t v77 = *(void *)(*((void *)&v125 + 1) + v75);
            LODWORD(v75) = v70 + 9;
            goto LABEL_165;
          default:
            if (v75 >= v126) {
              goto LABEL_241;
            }
            LODWORD(v77) = *(unsigned __int8 *)(*((void *)&v125 + 1) + v75);
            LODWORD(v75) = v70 + 2;
LABEL_165:
            HIDWORD(v126) = v75;
LABEL_166:
            if (v73) {
              uint64_t v79 = -256 << (8 * v76);
            }
            else {
              LODWORD(v79) = 0;
            }
            LODWORD(v74) = v77 | v79;
            break;
        }
      }
      *((_DWORD *)v69 - 2) = v74;
      if ((unint64_t)v75 + 8 > v71) {
        goto LABEL_241;
      }
      uint64_t v80 = *(void *)(v72 + v75);
      HIDWORD(v126) = v75 + 8;
      void *v69 = v80;
      uint64_t v81 = v69 + 2;
      PPStreamTokenConvertParamBindingsToGeneric((unint64_t)v69, 1);
      unsigned int v69 = v81;
    }
    while (--v68);
  }
  v7[27] = v67;
  v7[11] = glpDeserializeUniformBindings((uint64_t)v124);
  v7[12] = glpDeserializeUniformBindings((uint64_t)v124);
  uint64_t v82 = HIDWORD(v126);
  if (HIDWORD(v126) >= v126) {
    goto LABEL_241;
  }
  int v83 = *(char *)(*((void *)&v125 + 1) + HIDWORD(v126));
  unint64_t v84 = *(unsigned __int8 *)(*((void *)&v125 + 1) + HIDWORD(v126));
  uint64_t v85 = HIDWORD(v126) + 1;
  ++HIDWORD(v126);
  if (v83 < 0)
  {
    uint64_t v113 = (v84 >> 1) & 7;
    switch(v113)
    {
      case 1:
        if (v82 + 3 > (unint64_t)v126) {
          goto LABEL_241;
        }
        LODWORD(v114) = *(unsigned __int16 *)(*((void *)&v125 + 1) + v85);
        unsigned int v115 = v82 + 3;
        break;
      case 2:
        unsigned int v115 = v82 + 4;
        if (v115 > v126) {
          goto LABEL_241;
        }
        LODWORD(v114) = *(unsigned __int16 *)(*((void *)&v125 + 1) + v85) | (*(unsigned __int8 *)(*((void *)&v125 + 1)
                                                                                                  + v85
                                                                                                  + 2) << 16);
        break;
      case 3:
        if (v82 + 5 > (unint64_t)v126) {
          goto LABEL_241;
        }
        LODWORD(v114) = *(_DWORD *)(*((void *)&v125 + 1) + v85);
        unsigned int v115 = v82 + 5;
        break;
      case 4:
        if (v82 + 5 > (unint64_t)v126) {
          goto LABEL_241;
        }
        LODWORD(v114) = *(_DWORD *)(*((void *)&v125 + 1) + v85);
        HIDWORD(v126) = v82 + 5;
        if ((int)v82 + 5 >= v126) {
          goto LABEL_241;
        }
        unsigned int v115 = v82 + 6;
        break;
      case 5:
        if (v82 + 5 > (unint64_t)v126) {
          goto LABEL_241;
        }
        LODWORD(v114) = *(_DWORD *)(*((void *)&v125 + 1) + v85);
        HIDWORD(v126) = v82 + 5;
        if ((unint64_t)(v82 + 5) + 2 > v126) {
          goto LABEL_241;
        }
        unsigned int v115 = v82 + 7;
        break;
      case 6:
        if (v82 + 5 > (unint64_t)v126) {
          goto LABEL_241;
        }
        LODWORD(v114) = *(_DWORD *)(*((void *)&v125 + 1) + v85);
        HIDWORD(v126) = v82 + 5;
        unsigned int v115 = v82 + 8;
        if (v115 > v126) {
          goto LABEL_241;
        }
        break;
      case 7:
        if (v82 + 9 > (unint64_t)v126) {
          goto LABEL_241;
        }
        uint64_t v114 = *(void *)(*((void *)&v125 + 1) + v85);
        unsigned int v115 = v82 + 9;
        break;
      default:
        if (v85 >= v126) {
          goto LABEL_241;
        }
        LODWORD(v114) = *(unsigned __int8 *)(*((void *)&v125 + 1) + v85);
        unsigned int v115 = v82 + 2;
        break;
    }
    HIDWORD(v126) = v115;
    if (v83) {
      uint64_t v116 = -256 << (8 * v113);
    }
    else {
      LODWORD(v116) = 0;
    }
    LODWORD(v84) = v114 | v116;
    if (v114 | v116)
    {
LABEL_175:
      int v86 = 0;
      v7[40] = glpMakeIntHash(&GLP_MALLOC_ALLOCATOR);
      while (1)
      {
        uint64_t v87 = HIDWORD(v126);
        if (HIDWORD(v126) >= v126) {
          goto LABEL_241;
        }
        int v88 = *(char *)(*((void *)&v125 + 1) + HIDWORD(v126));
        unint64_t v89 = *(unsigned __int8 *)(*((void *)&v125 + 1) + HIDWORD(v126));
        uint64_t v90 = HIDWORD(v126) + 1;
        ++HIDWORD(v126);
        if (v88 < 0)
        {
          uint64_t v91 = (v89 >> 1) & 7;
          switch(v91)
          {
            case 1:
              if (v87 + 3 > (unint64_t)v126) {
                goto LABEL_241;
              }
              LODWORD(v92) = *(unsigned __int16 *)(*((void *)&v125 + 1) + v90);
              unsigned int v93 = v87 + 3;
              break;
            case 2:
              unsigned int v93 = v87 + 4;
              if (v93 > v126) {
                goto LABEL_241;
              }
              LODWORD(v92) = *(unsigned __int16 *)(*((void *)&v125 + 1) + v90) | (*(unsigned __int8 *)(*((void *)&v125 + 1) + v90 + 2) << 16);
              break;
            case 3:
              if (v87 + 5 > (unint64_t)v126) {
                goto LABEL_241;
              }
              LODWORD(v92) = *(_DWORD *)(*((void *)&v125 + 1) + v90);
              unsigned int v93 = v87 + 5;
              break;
            case 4:
              if (v87 + 5 > (unint64_t)v126) {
                goto LABEL_241;
              }
              LODWORD(v92) = *(_DWORD *)(*((void *)&v125 + 1) + v90);
              HIDWORD(v126) = v87 + 5;
              if ((int)v87 + 5 >= v126) {
                goto LABEL_241;
              }
              unsigned int v93 = v87 + 6;
              break;
            case 5:
              if (v87 + 5 > (unint64_t)v126) {
                goto LABEL_241;
              }
              LODWORD(v92) = *(_DWORD *)(*((void *)&v125 + 1) + v90);
              HIDWORD(v126) = v87 + 5;
              if ((unint64_t)(v87 + 5) + 2 > v126) {
                goto LABEL_241;
              }
              unsigned int v93 = v87 + 7;
              break;
            case 6:
              if (v87 + 5 > (unint64_t)v126) {
                goto LABEL_241;
              }
              LODWORD(v92) = *(_DWORD *)(*((void *)&v125 + 1) + v90);
              HIDWORD(v126) = v87 + 5;
              unsigned int v93 = v87 + 8;
              if (v93 > v126) {
                goto LABEL_241;
              }
              break;
            case 7:
              if (v87 + 9 > (unint64_t)v126) {
                goto LABEL_241;
              }
              uint64_t v92 = *(void *)(*((void *)&v125 + 1) + v90);
              unsigned int v93 = v87 + 9;
              break;
            default:
              if (v90 >= v126) {
                goto LABEL_241;
              }
              LODWORD(v92) = *(unsigned __int8 *)(*((void *)&v125 + 1) + v90);
              unsigned int v93 = v87 + 2;
              break;
          }
          HIDWORD(v126) = v93;
          if (v88) {
            uint64_t v94 = -256 << (8 * v91);
          }
          else {
            LODWORD(v94) = 0;
          }
          LODWORD(v89) = v92 | v94;
        }
        int v95 = malloc_type_malloc(0x18uLL, 0x7081ABB9uLL);
        if (!v95) {
          goto LABEL_242;
        }
        uint64_t v96 = (uint64_t)v95;
        *int v95 = 0;
        v95[1] = 0;
        v95[2] = 0;
        int v97 = (const void *)deserialize_GLPString((uint64_t)v124);
        uint64_t v99 = v98;
        size_t v100 = v98;
        int v101 = (char *)malloc_type_malloc(v98, 0x7081ABB9uLL);
        if (!v101) {
          goto LABEL_242;
        }
        uint64_t v102 = v101;
        memcpy(v101, v97, v100);
        unsigned int v104 = v99 >> 5;
        if (v99 >> 5 >= v99)
        {
          uint64_t v106 = v99;
        }
        else
        {
          unsigned int v105 = ~(v99 >> 5);
          LODWORD(v106) = v99;
          do
          {
            uint64_t v106 = (32 * v106 + (v106 >> 2) + v102[(v99 - 1)]) ^ v106;
            LODWORD(v99) = v99 + v105;
          }
          while (v99 > v104);
        }
        *(void *)uint64_t v96 = v102;
        *(void *)(v96 + 8) = v100 | (v106 << 32);
        int v107 = HIDWORD(v126);
        unint64_t v108 = v126;
        if ((unint64_t)HIDWORD(v126) + 4 > v126) {
          goto LABEL_241;
        }
        uint64_t v109 = *((void *)&v125 + 1);
        int v110 = *(_DWORD *)(*((void *)&v125 + 1) + HIDWORD(v126));
        HIDWORD(v126) += 4;
        uint64_t v111 = HIDWORD(v126);
        *(_DWORD *)(v96 + 16) = v110;
        if (v111 + 4 > v108) {
          goto LABEL_241;
        }
        int v112 = *(_DWORD *)(v109 + v111);
        HIDWORD(v126) = v107 + 8;
        *(_DWORD *)(v96 + 20) = v112;
        glpIntHashPut(v7[40], v89, v96, v103);
        if (++v86 == v84) {
          goto LABEL_238;
        }
      }
    }
  }
  else if (v84)
  {
    goto LABEL_175;
  }
  v7[40] = 0;
LABEL_238:
  uint64_t v117 = 18;
  uint64_t v118 = 252;
  do
  {
    v7[v117 - 5] = glpMakeStringHash(&GLP_MALLOC_ALLOCATOR);
    v7[v117] = glpMakeStringHash(&GLP_MALLOC_ALLOCATOR);
    int v119 = (_DWORD *)((char *)v7 + v118);
    *(v119 - 5) = 0;
    _DWORD *v119 = 0;
    ++v117;
    v118 += 4;
  }
  while (v117 != 23);
  long long v120 = *a3;
  long long v121 = a3[2];
  *((_OWORD *)v7 + 18) = a3[1];
  *((_OWORD *)v7 + 19) = v121;
  *((_OWORD *)v7 + 17) = v120;
  glpDestroyDeserialContext(v124);
  glpDestroyPoolAllocator((uint64_t)v123);
  return v7;
}

void *__abort_calloc()
{
  uint64_t result = malloc_type_calloc(1uLL, 0x148uLL, 0xA92C9FCEuLL);
  if (!result) {
    abort();
  }
  return result;
}

_DWORD *glpDeserializeUniformBindings(uint64_t a1)
{
  unsigned int v2 = malloc_type_malloc(0x38uLL, 0x7081ABB9uLL);
  if (!v2) {
    goto LABEL_162;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 260);
  unint64_t v4 = *(unsigned int *)(a1 + 256);
  if (v3 >= v4) {
    goto LABEL_161;
  }
  int v5 = v2;
  uint64_t v6 = *(void *)(a1 + 248);
  int v7 = *(char *)(v6 + v3);
  unint64_t v8 = *(unsigned __int8 *)(v6 + v3);
  uint64_t v9 = v3 + 1;
  *(_DWORD *)(a1 + 260) = v3 + 1;
  if (v7 < 0)
  {
    uint64_t v10 = (v8 >> 1) & 7;
    unint64_t v8 = -256 << (8 * v10);
    switch(v10)
    {
      case 1:
        if (v3 + 3 > v4) {
          goto LABEL_161;
        }
        LODWORD(v11) = *(unsigned __int16 *)(v6 + v9);
        LODWORD(v9) = v3 + 3;
        goto LABEL_24;
      case 2:
        unsigned int v12 = v3 + 4;
        if (v12 > v4) {
          goto LABEL_161;
        }
        LODWORD(v11) = *(unsigned __int16 *)(v6 + v9) | (*(unsigned __int8 *)(v6 + v9 + 2) << 16);
        *(_DWORD *)(a1 + 260) = v12;
        LODWORD(v9) = v12;
        goto LABEL_25;
      case 3:
        if (v3 + 5 > v4) {
          goto LABEL_161;
        }
        LODWORD(v11) = *(_DWORD *)(v6 + v9);
        LODWORD(v9) = v3 + 5;
        goto LABEL_24;
      case 4:
        if (v3 + 5 > v4) {
          goto LABEL_161;
        }
        LODWORD(v11) = *(_DWORD *)(v6 + v9);
        *(_DWORD *)(a1 + 260) = v3 + 5;
        if ((int)v3 + 5 >= v4) {
          goto LABEL_161;
        }
        LODWORD(v9) = v3 + 6;
        goto LABEL_24;
      case 5:
        if (v3 + 5 > v4) {
          goto LABEL_161;
        }
        LODWORD(v11) = *(_DWORD *)(v6 + v9);
        uint64_t v13 = (v3 + 5);
        *(_DWORD *)(a1 + 260) = v13;
        if (v13 + 2 > v4) {
          goto LABEL_161;
        }
        LODWORD(v9) = v3 + 7;
        goto LABEL_24;
      case 6:
        if (v3 + 5 > v4) {
          goto LABEL_161;
        }
        LODWORD(v11) = *(_DWORD *)(v6 + v9);
        *(_DWORD *)(a1 + 260) = v3 + 5;
        LODWORD(v9) = v3 + 8;
        if ((int)v3 + 8 > v4) {
          goto LABEL_161;
        }
        goto LABEL_24;
      case 7:
        if (v3 + 9 > v4) {
          goto LABEL_161;
        }
        uint64_t v11 = *(void *)(v6 + v9);
        LODWORD(v9) = v3 + 9;
        goto LABEL_24;
      default:
        if (v9 >= v4) {
          goto LABEL_161;
        }
        LODWORD(v11) = *(unsigned __int8 *)(v6 + v9);
        LODWORD(v9) = v3 + 2;
LABEL_24:
        *(_DWORD *)(a1 + 260) = v9;
LABEL_25:
        if ((v7 & 1) == 0) {
          LODWORD(v8) = 0;
        }
        LODWORD(v8) = v11 | v8;
        break;
    }
  }
  v2[8] = v8;
  if (v9 >= v4) {
    goto LABEL_161;
  }
  int v14 = *(char *)(v6 + v9);
  unint64_t v15 = *(unsigned __int8 *)(v6 + v9);
  uint64_t v16 = v9 + 1;
  *(_DWORD *)(a1 + 260) = v16;
  if (v14 < 0)
  {
    uint64_t v17 = (v15 >> 1) & 7;
    switch(v17)
    {
      case 1:
        if ((unint64_t)v9 + 3 > v4) {
          goto LABEL_161;
        }
        LODWORD(v6) = *(unsigned __int16 *)(v6 + v16);
        int v18 = v9 + 3;
        goto LABEL_50;
      case 2:
        unsigned int v19 = v9 + 4;
        if (v19 > v4) {
          goto LABEL_161;
        }
        LODWORD(v6) = *(unsigned __int16 *)(v6 + v16) | (*(unsigned __int8 *)(v6 + v16 + 2) << 16);
LABEL_47:
        *(_DWORD *)(a1 + 260) = v19;
        goto LABEL_51;
      case 3:
        if ((unint64_t)v9 + 5 > v4) {
          goto LABEL_161;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v16);
        int v18 = v9 + 5;
        goto LABEL_50;
      case 4:
        if ((unint64_t)v9 + 5 > v4) {
          goto LABEL_161;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v16);
        *(_DWORD *)(a1 + 260) = v9 + 5;
        if ((int)v9 + 5 >= v4) {
          goto LABEL_161;
        }
        int v18 = v9 + 6;
        goto LABEL_50;
      case 5:
        if ((unint64_t)v9 + 5 > v4) {
          goto LABEL_161;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v16);
        uint64_t v20 = (v9 + 5);
        *(_DWORD *)(a1 + 260) = v20;
        if (v20 + 2 > v4) {
          goto LABEL_161;
        }
        int v18 = v9 + 7;
        goto LABEL_50;
      case 6:
        if ((unint64_t)v9 + 5 <= v4)
        {
          LODWORD(v6) = *(_DWORD *)(v6 + v16);
          *(_DWORD *)(a1 + 260) = v9 + 5;
          unsigned int v19 = v9 + 8;
          if (v19 <= v4) {
            goto LABEL_47;
          }
        }
        goto LABEL_161;
      case 7:
        if ((unint64_t)v9 + 9 > v4) {
          goto LABEL_161;
        }
        uint64_t v6 = *(void *)(v6 + v16);
        int v18 = v9 + 9;
        goto LABEL_50;
      default:
        if (v16 >= v4) {
          goto LABEL_161;
        }
        LODWORD(v6) = *(unsigned __int8 *)(v6 + v16);
        int v18 = v9 + 2;
LABEL_50:
        *(_DWORD *)(a1 + 260) = v18;
LABEL_51:
        if (v14) {
          uint64_t v21 = -256 << (8 * v17);
        }
        else {
          LODWORD(v21) = 0;
        }
        LODWORD(v15) = v6 | v21;
        break;
    }
  }
  v2[9] = v15;
  size_t v22 = (32 * v8);
  size_t v23 = malloc_type_malloc(v22, 0x7081ABB9uLL);
  if (!v23) {
LABEL_162:
  }
    abort();
  *((void *)v5 + 5) = v23;
  bzero(v23, v22);
  long long v24 = *(_OWORD *)&off_26B86F798;
  *(_OWORD *)int v5 = GLP_MALLOC_ALLOCATOR;
  *((_OWORD *)v5 + 1) = v24;
  *((unsigned char *)v5 + 48) = 1;
  if (v5[9])
  {
    int v25 = 0;
    int v26 = 0;
    uint64_t v99 = *((void *)v5 + 5);
    uint64_t v27 = &GLP_MALLOC_ALLOCATOR;
    while (1)
    {
      uint64_t v28 = *(unsigned int *)(a1 + 260);
      unint64_t v29 = *(unsigned int *)(a1 + 256);
      if (v28 >= v29) {
        break;
      }
      uint64_t v30 = *(void *)(a1 + 248);
      int v31 = *(char *)(v30 + v28);
      unint64_t v32 = *(unsigned __int8 *)(v30 + v28);
      uint64_t v33 = v28 + 1;
      *(_DWORD *)(a1 + 260) = v28 + 1;
      if (v31 < 0)
      {
        uint64_t v34 = (v32 >> 1) & 7;
        switch(v34)
        {
          case 1:
            if (v28 + 3 > v29) {
              goto LABEL_161;
            }
            LODWORD(v30) = *(unsigned __int16 *)(v30 + v33);
            unsigned int v35 = v28 + 3;
            break;
          case 2:
            unsigned int v35 = v28 + 4;
            if (v35 > v29) {
              goto LABEL_161;
            }
            LODWORD(v30) = *(unsigned __int16 *)(v30 + v33) | (*(unsigned __int8 *)(v30 + v33 + 2) << 16);
            break;
          case 3:
            if (v28 + 5 > v29) {
              goto LABEL_161;
            }
            LODWORD(v30) = *(_DWORD *)(v30 + v33);
            unsigned int v35 = v28 + 5;
            break;
          case 4:
            if (v28 + 5 > v29) {
              goto LABEL_161;
            }
            LODWORD(v30) = *(_DWORD *)(v30 + v33);
            *(_DWORD *)(a1 + 260) = v28 + 5;
            if ((int)v28 + 5 >= v29) {
              goto LABEL_161;
            }
            unsigned int v35 = v28 + 6;
            break;
          case 5:
            if (v28 + 5 > v29) {
              goto LABEL_161;
            }
            LODWORD(v30) = *(_DWORD *)(v30 + v33);
            uint64_t v36 = (v28 + 5);
            *(_DWORD *)(a1 + 260) = v36;
            if (v36 + 2 > v29) {
              goto LABEL_161;
            }
            unsigned int v35 = v28 + 7;
            break;
          case 6:
            if (v28 + 5 > v29) {
              goto LABEL_161;
            }
            LODWORD(v30) = *(_DWORD *)(v30 + v33);
            *(_DWORD *)(a1 + 260) = v28 + 5;
            unsigned int v35 = v28 + 8;
            if (v35 > v29) {
              goto LABEL_161;
            }
            break;
          case 7:
            if (v28 + 9 > v29) {
              goto LABEL_161;
            }
            uint64_t v30 = *(void *)(v30 + v33);
            unsigned int v35 = v28 + 9;
            break;
          default:
            if (v33 >= v29) {
              goto LABEL_161;
            }
            LODWORD(v30) = *(unsigned __int8 *)(v30 + v33);
            unsigned int v35 = v28 + 2;
            break;
        }
        *(_DWORD *)(a1 + 260) = v35;
        if (v31) {
          uint64_t v37 = -256 << (8 * v34);
        }
        else {
          LODWORD(v37) = 0;
        }
        LODWORD(v32) = v30 | v37;
      }
      unint64_t v38 = (const void *)deserialize_GLPString(a1);
      uint64_t v40 = v39;
      int v41 = malloc_type_malloc(0x58uLL, 0x7081ABB9uLL);
      if (!v41) {
        goto LABEL_162;
      }
      unsigned int v42 = v41;
      v41[10] = 0;
      *((_OWORD *)v41 + 3) = 0u;
      *((_OWORD *)v41 + 4) = 0u;
      *((_OWORD *)v41 + 1) = 0u;
      *((_OWORD *)v41 + 2) = 0u;
      *(_OWORD *)int v41 = 0u;
      uint64_t v43 = *(unsigned int *)(a1 + 260);
      unint64_t v44 = *(unsigned int *)(a1 + 256);
      if (v43 + 4 > v44) {
        break;
      }
      uint64_t v45 = *(void *)(a1 + 248);
      int v46 = *(_DWORD *)(v45 + v43);
      uint64_t v47 = (v43 + 4);
      *(_DWORD *)(a1 + 260) = v47;
      *(_DWORD *)int v41 = v46;
      if (v47 + 4 > v44) {
        break;
      }
      int v48 = *(_DWORD *)(v45 + v47);
      uint64_t v49 = (v43 + 8);
      *(_DWORD *)(a1 + 260) = v49;
      *((_DWORD *)v41 + 1) = v48;
      if (v49 + 4 > v44) {
        break;
      }
      int v50 = *(_DWORD *)(v45 + v49);
      uint64_t v51 = (v43 + 12);
      *(_DWORD *)(a1 + 260) = v51;
      *((_DWORD *)v41 + 2) = v50;
      if (v51 + 4 > v44) {
        break;
      }
      int v52 = *(_DWORD *)(v45 + v51);
      uint64_t v53 = (v43 + 16);
      *(_DWORD *)(a1 + 260) = v53;
      *((_DWORD *)v41 + 3) = v52;
      if (v53 + 4 > v44) {
        break;
      }
      int v54 = *(_DWORD *)(v45 + v53);
      *(_DWORD *)(a1 + 260) = v43 + 20;
      *((unsigned char *)v41 + 80) = v54;
      uint64_t v102 = 0;
      deserialize_GLPType((void *)a1, &v102);
      uint64_t v55 = glpDeepCopyType(v27, v102);
      v42[3] = v55;
      int v101 = 0;
      deserialize_GLPValue((void *)a1, v55, &v101);
      uint64_t v61 = v101 ? glpCopyValue((uint64_t)v27, (unsigned int *)v42[3], v101, v56, v57, v58, v59, v60) : 0;
      v42[2] = v61;
      uint64_t v62 = *(unsigned int *)(a1 + 260);
      unint64_t v63 = *(unsigned int *)(a1 + 256);
      if (v62 >= v63) {
        break;
      }
      uint64_t v64 = *(void *)(a1 + 248);
      int v65 = *(char *)(v64 + v62);
      unint64_t v66 = *(unsigned __int8 *)(v64 + v62);
      uint64_t v67 = v62 + 1;
      *(_DWORD *)(a1 + 260) = v62 + 1;
      if (v65 < 0)
      {
        uint64_t v77 = (v66 >> 1) & 7;
        switch(v77)
        {
          case 1:
            if (v62 + 3 > v63) {
              goto LABEL_161;
            }
            LODWORD(v78) = *(unsigned __int16 *)(v64 + v67);
            LODWORD(v67) = v62 + 3;
            goto LABEL_121;
          case 2:
            unsigned int v79 = v62 + 4;
            if (v79 > v63) {
              goto LABEL_161;
            }
            LODWORD(v78) = *(unsigned __int16 *)(v64 + v67) | (*(unsigned __int8 *)(v64 + v67 + 2) << 16);
            *(_DWORD *)(a1 + 260) = v79;
            LODWORD(v67) = v79;
            goto LABEL_122;
          case 3:
            if (v62 + 5 > v63) {
              goto LABEL_161;
            }
            LODWORD(v78) = *(_DWORD *)(v64 + v67);
            LODWORD(v67) = v62 + 5;
            goto LABEL_121;
          case 4:
            if (v62 + 5 > v63) {
              goto LABEL_161;
            }
            LODWORD(v78) = *(_DWORD *)(v64 + v67);
            *(_DWORD *)(a1 + 260) = v62 + 5;
            if ((int)v62 + 5 >= v63) {
              goto LABEL_161;
            }
            LODWORD(v67) = v62 + 6;
            goto LABEL_121;
          case 5:
            if (v62 + 5 > v63) {
              goto LABEL_161;
            }
            LODWORD(v78) = *(_DWORD *)(v64 + v67);
            uint64_t v80 = (v62 + 5);
            *(_DWORD *)(a1 + 260) = v80;
            if (v80 + 2 > v63) {
              goto LABEL_161;
            }
            LODWORD(v67) = v62 + 7;
            goto LABEL_121;
          case 6:
            if (v62 + 5 > v63) {
              goto LABEL_161;
            }
            LODWORD(v78) = *(_DWORD *)(v64 + v67);
            *(_DWORD *)(a1 + 260) = v62 + 5;
            LODWORD(v67) = v62 + 8;
            if ((int)v62 + 8 > v63) {
              goto LABEL_161;
            }
            goto LABEL_121;
          case 7:
            if (v62 + 9 > v63) {
              goto LABEL_161;
            }
            uint64_t v78 = *(void *)(v64 + v67);
            LODWORD(v67) = v62 + 9;
            goto LABEL_121;
          default:
            if (v67 >= v63) {
              goto LABEL_161;
            }
            LODWORD(v78) = *(unsigned __int8 *)(v64 + v67);
            LODWORD(v67) = v62 + 2;
LABEL_121:
            *(_DWORD *)(a1 + 260) = v67;
LABEL_122:
            if (v65) {
              uint64_t v81 = -256 << (8 * v77);
            }
            else {
              LODWORD(v81) = 0;
            }
            LODWORD(v66) = v78 | v81;
            if (!(v78 | v81)) {
              goto LABEL_126;
            }
            goto LABEL_96;
        }
      }
      if (v66)
      {
LABEL_96:
        int v100 = v26;
        if (v67 >= v63) {
          break;
        }
        uint64_t v68 = v38;
        int v69 = v25;
        int v70 = v32;
        unint64_t v32 = (unint64_t)v5;
        unint64_t v71 = v27;
        int v72 = *(char *)(v64 + v67);
        unint64_t v73 = *(unsigned __int8 *)(v64 + v67);
        uint64_t v74 = v67 + 1;
        *(_DWORD *)(a1 + 260) = v74;
        if (v72 < 0)
        {
          uint64_t v75 = (v73 >> 1) & 7;
          switch(v75)
          {
            case 1:
              if ((unint64_t)v67 + 3 > v63) {
                goto LABEL_161;
              }
              LODWORD(v64) = *(unsigned __int16 *)(v64 + v74);
              int v76 = v67 + 3;
              goto LABEL_144;
            case 2:
              unsigned int v83 = v67 + 4;
              if (v83 > v63) {
                goto LABEL_161;
              }
              LODWORD(v64) = *(unsigned __int16 *)(v64 + v74) | (*(unsigned __int8 *)(v64 + v74 + 2) << 16);
LABEL_141:
              *(_DWORD *)(a1 + 260) = v83;
              goto LABEL_145;
            case 3:
              if ((unint64_t)v67 + 5 > v63) {
                goto LABEL_161;
              }
              LODWORD(v64) = *(_DWORD *)(v64 + v74);
              int v76 = v67 + 5;
              goto LABEL_144;
            case 4:
              if ((unint64_t)v67 + 5 > v63) {
                goto LABEL_161;
              }
              LODWORD(v64) = *(_DWORD *)(v64 + v74);
              *(_DWORD *)(a1 + 260) = v67 + 5;
              if ((int)v67 + 5 >= v63) {
                goto LABEL_161;
              }
              int v76 = v67 + 6;
              goto LABEL_144;
            case 5:
              if ((unint64_t)v67 + 5 > v63) {
                goto LABEL_161;
              }
              LODWORD(v64) = *(_DWORD *)(v64 + v74);
              uint64_t v84 = (v67 + 5);
              *(_DWORD *)(a1 + 260) = v84;
              if (v84 + 2 > v63) {
                goto LABEL_161;
              }
              int v76 = v67 + 7;
              goto LABEL_144;
            case 6:
              if ((unint64_t)v67 + 5 <= v63)
              {
                LODWORD(v64) = *(_DWORD *)(v64 + v74);
                *(_DWORD *)(a1 + 260) = v67 + 5;
                unsigned int v83 = v67 + 8;
                if (v83 <= v63) {
                  goto LABEL_141;
                }
              }
              goto LABEL_161;
            case 7:
              if ((unint64_t)v67 + 9 > v63) {
                goto LABEL_161;
              }
              uint64_t v64 = *(void *)(v64 + v74);
              int v76 = v67 + 9;
              goto LABEL_144;
            default:
              if (v74 >= v63) {
                goto LABEL_161;
              }
              LODWORD(v64) = *(unsigned __int8 *)(v64 + v74);
              int v76 = v67 + 2;
LABEL_144:
              *(_DWORD *)(a1 + 260) = v76;
LABEL_145:
              if (v72) {
                uint64_t v85 = -256 << (8 * v75);
              }
              else {
                LODWORD(v85) = 0;
              }
              LODWORD(v73) = v64 | v85;
              break;
          }
        }
        uint64_t v82 = BitSetNew(v66);
        memcpy(*(void **)(v82 + 40), (const void *)(*(void *)(a1 + 248) + *(unsigned int *)(a1 + 260)), v73);
        *(_DWORD *)(a1 + 260) += v73;
        uint64_t v27 = v71;
        int v5 = (_DWORD *)v32;
        LODWORD(v32) = v70;
        int v25 = v69;
        unint64_t v38 = v68;
        int v26 = v100;
      }
      else
      {
LABEL_126:
        uint64_t v82 = 0;
      }
      uint64_t v86 = (v25 + v32);
      v42[4] = v82;
      for (uint64_t i = 40; i != 60; i += 4)
      {
        uint64_t v88 = *(unsigned int *)(a1 + 260);
        if (v88 + 4 > (unint64_t)*(unsigned int *)(a1 + 256)) {
          goto LABEL_161;
        }
        int v89 = *(_DWORD *)(*(void *)(a1 + 248) + v88);
        *(_DWORD *)(a1 + 260) = v88 + 4;
        *(_DWORD *)((char *)v42 + i) = v89;
      }
      uint64_t v90 = v40;
      uint64_t v91 = (char *)malloc_type_malloc(v40, 0x7081ABB9uLL);
      if (!v91) {
        goto LABEL_162;
      }
      uint64_t v92 = v91;
      memcpy(v91, v38, v40);
      unsigned int v93 = (void *)(v99 + 32 * v86);
      *unsigned int v93 = v42;
      uint64_t v94 = v93 + 1;
      unsigned int v95 = v40 >> 5;
      if (v40 >> 5 >= v40)
      {
        uint64_t v97 = v40;
      }
      else
      {
        unsigned int v96 = ~(v40 >> 5);
        LODWORD(v97) = v40;
        do
        {
          uint64_t v97 = (32 * v97 + (v97 >> 2) + v92[(v40 - 1)]) ^ v97;
          LODWORD(v40) = v40 + v96;
        }
        while (v40 > v95);
      }
      void *v94 = v92;
      v94[1] = v90 | (v97 << 32);
      int v25 = v86 + 1;
      if (++v26 >= v5[9]) {
        return v5;
      }
    }
LABEL_161:
    glpDeserialError(a1, 1u);
  }
  return v5;
}

void *glpLinkProgram(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 0;
  int v9 = 0;
  uint64_t v10 = 0;
  int v11 = 0;
  int v12 = 0;
  int v13 = 0;
  v544[7] = *MEMORY[0x263EF8340];
  memset(v500, 0, sizeof(v500));
  int v479 = 1;
  do
  {
    int v14 = &a1[v8 + 23];
    unint64_t v15 = &a1[2 * v8];
    unsigned int v18 = *((_DWORD *)v15 + 27);
    uint64_t v16 = (_DWORD *)v15 + 27;
    uint64_t v17 = v18;
    if (v18)
    {
      int v483 = v13;
      int __s2 = v9;
      unsigned int v19 = &v522[14 * v8];
      memset(v544, 0, 56);
      int8x16_t v542 = 0u;
      long long v543 = 0u;
      long long v540 = 0u;
      long long v541 = 0u;
      long long v538 = 0u;
      long long v539 = 0u;
      long long v536 = 0u;
      long long v537 = 0u;
      long long v534 = 0u;
      long long v535 = 0u;
      long long v532 = 0u;
      long long v533 = 0u;
      long long v530 = 0u;
      long long v531 = 0u;
      long long v529 = 0u;
      glpASTMergeInitContext((uint64_t)&v529, (uint64_t)a1, v8);
      uint64_t v20 = 0;
      uint64_t v21 = 8 * v17;
      do
      {
        uint64_t v22 = glpDeserializeAST((uint64_t)a1, *(void *)(*(void *)(a1[2 * v8 + 14] + v20) + 16), *(_DWORD *)(*(void *)(a1[2 * v8 + 14] + v20) + 8));
        if (!v22)
        {
          *int v14 = 0;
          unint64_t v29 = (uint64_t **)a1[8];
          char v30 = glpLanguageToString(v8);
          *(void *)&long long v519 = "-1";
          *((void *)&v519 + 1) = 0xEDA00000002;
          *(void *)&long long v520 = 0xFFFFFFFFLL;
          glpLogMessage(v29, 0, (uint64_t)&v519, "Compiled %s shader was corrupt.", v31, v32, v33, v34, v30);
          goto LABEL_13;
        }
        if (!glpASTMergePhase1AddTopLevelNode((uint64_t *)&v529, v22)) {
          goto LABEL_13;
        }
        v20 += 8;
      }
      while (v21 != v20);
      uint64_t v23 = glpASTMergePhase2((uint64_t)&v529);
      if (v23 != -1)
      {
        *int v14 = v23;
        int8x16_t v24 = vextq_s8(v542, v542, 8uLL);
        *(_OWORD *)unsigned int v19 = v541;
        *((int8x16_t *)v19 + 1) = v24;
        *((_OWORD *)v19 + 2) = v543;
        uint64_t v25 = v539;
        v19[6] = v544[0];
        v19[7] = v25;
        uint64_t v26 = *((void *)&v531 + 1);
        v19[8] = v538;
        v19[9] = v26;
        long long v27 = *(_OWORD *)&v544[3];
        *((_OWORD *)v19 + 5) = *(_OWORD *)&v544[1];
        *((_OWORD *)v19 + 6) = v27;
        goto LABEL_14;
      }
LABEL_13:
      int v479 = 0;
LABEL_14:
      int v9 = __s2;
      uint64_t v28 = *v16;
      if (v483)
      {
LABEL_10:
        if (v28) {
          goto LABEL_17;
        }
LABEL_24:
        int v13 = 1;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v28 = 0;
      *int v14 = 0;
      if (v13) {
        goto LABEL_10;
      }
    }
    if (v28)
    {
      glpPopulatePrecisionWidths(*(unsigned int *)(*(void *)a1[2 * v8 + 14] + 4), v500);
      uint64_t v28 = *v16;
      if (*v16)
      {
LABEL_17:
        uint64_t v35 = a1[2 * v8 + 14];
        while (2)
        {
          uint64_t v36 = v10;
          uint64_t v10 = 1;
          switch(*(_DWORD *)(*(void *)v35 + 4))
          {
            case 0:
              goto LABEL_23;
            case 1:
            case 2:
              int v11 = 1;
              goto LABEL_22;
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              int v12 = 1;
              goto LABEL_22;
            case 6:
              int v9 = 1;
LABEL_22:
              uint64_t v10 = v36;
LABEL_23:
              v35 += 8;
              if (!--v28) {
                goto LABEL_24;
              }
              continue;
            default:
              goto LABEL_475;
          }
        }
      }
      goto LABEL_24;
    }
    int v13 = 0;
LABEL_25:
    ++v8;
  }
  while (v8 != 5);
  if (!v479) {
    return 0;
  }
  if (v9 && v10)
  {
    uint64_t v37 = (uint64_t **)a1[8];
    *(void *)&long long v529 = "-1";
    *((void *)&v529 + 1) = 0xEDA00000002;
    *(void *)&long long v530 = 0xFFFFFFFFLL;
    unint64_t v38 = "Error: Version 100 and Version 300 shaders may not be linked together.";
    goto LABEL_150;
  }
  if (!(v9 | v10))
  {
    uint64_t v39 = (uint64_t)a1;
    if (!v11 || !v12) {
      goto LABEL_38;
    }
    uint64_t v37 = (uint64_t **)a1[8];
    *(void *)&long long v529 = "-1";
    *((void *)&v529 + 1) = 0xEDA00000002;
    *(void *)&long long v530 = 0xFFFFFFFFLL;
    unint64_t v38 = "Error: Linking legacy shaders with core profile shaders is not supported.";
    goto LABEL_150;
  }
  uint64_t v39 = (uint64_t)a1;
  if (v11 | v12)
  {
    uint64_t v37 = (uint64_t **)a1[8];
    *(void *)&long long v529 = "-1";
    *((void *)&v529 + 1) = 0xEDA00000002;
    *(void *)&long long v530 = 0xFFFFFFFFLL;
    unint64_t v38 = "Error: Linking ES shaders with non-ES shaders is not supported.";
    goto LABEL_150;
  }
LABEL_38:
  uint64_t v40 = *(void *)(v39 + 192);
  if (v40)
  {
    uint64_t GlobalTypeQualifier = glpTopLevelNodeGetGlobalTypeQualifier(v40, 0x40000000);
    if (GlobalTypeQualifier)
    {
      Layout = (uint64_t *)glpGlobalTypeQualifierNodeGetLayout(GlobalTypeQualifier);
      if (glpLayoutObjectFind(Layout, 18)) {
        *(_DWORD *)(v39 + 320) = *((_DWORD *)glpLayoutObjectFind(Layout, 18) + 4);
      }
    }
  }
  uint64_t v43 = *(void *)(v39 + 200);
  if (v43)
  {
    uint64_t v44 = glpTopLevelNodeGetGlobalTypeQualifier(v43, 0x20000000);
    if (!v44) {
      goto LABEL_149;
    }
    uint64_t v45 = (uint64_t *)glpGlobalTypeQualifierNodeGetLayout(v44);
    if (glpLayoutObjectFind(v45, 3))
    {
      *(_DWORD *)(v39 + 324) = 4;
      int v46 = 1;
    }
    else
    {
      int v46 = 0;
    }
    if (glpLayoutObjectFind(v45, 10))
    {
      *(_DWORD *)(v39 + 324) = 7;
      int v46 = 1;
    }
    if (glpLayoutObjectFind(v45, 11))
    {
      *(_DWORD *)(v39 + 324) = 36474;
      int v46 = 1;
    }
    if (glpLayoutObjectFind(v45, 12)) {
      *(_DWORD *)(v39 + 328) = 514;
    }
    if (glpLayoutObjectFind(v45, 13)) {
      *(_DWORD *)(v39 + 328) = 36476;
    }
    if (glpLayoutObjectFind(v45, 14)) {
      *(_DWORD *)(v39 + 328) = 36475;
    }
    if (glpLayoutObjectFind(v45, 15)) {
      *(_DWORD *)(v39 + 332) = 2304;
    }
    if (glpLayoutObjectFind(v45, 16)) {
      *(_DWORD *)(v39 + 332) = 2305;
    }
    if (glpLayoutObjectFind(v45, 17)) {
      *(_DWORD *)(v39 + 336) = 1;
    }
    if (!v46)
    {
LABEL_149:
      uint64_t v37 = *(uint64_t ***)(v39 + 64);
      *(void *)&long long v529 = "-1";
      *((void *)&v529 + 1) = 0xEDA00000002;
      *(void *)&long long v530 = 0xFFFFFFFFLL;
      unint64_t v38 = "Tessellation evaluation shader must specify triangles, quads or isolines.";
LABEL_150:
      glpLogMessage(v37, 0, (uint64_t)&v529, v38, a5, a6, a7, a8, v446);
      return 0;
    }
  }
  uint64_t v47 = *(void *)(v39 + 208);
  if (v47)
  {
    uint64_t v48 = glpTopLevelNodeGetGlobalTypeQualifier(v47, 0x20000000);
    uint64_t v49 = glpTopLevelNodeGetGlobalTypeQualifier(*(void *)(v39 + 208), 0x40000000);
    if (v48)
    {
      int v50 = (uint64_t *)glpGlobalTypeQualifierNodeGetLayout(v48);
      glpLayoutObjectGetGeomInOut(v50, 0, 0, (_DWORD *)(v39 + 308), 0, (_DWORD *)(v39 + 316));
    }
    if (v49)
    {
      uint64_t v51 = (uint64_t *)glpGlobalTypeQualifierNodeGetLayout(v49);
      glpLayoutObjectGetGeomInOut(v51, 0, (_DWORD *)(v39 + 304), 0, (_DWORD *)(v39 + 312), 0);
      unint64_t v52 = *(unsigned int *)(v39 + 156);
      if (v52)
      {
        uint64_t v53 = *(void *)(v39 + 160);
        if (*(unsigned char *)(*(void *)v53 + 12)) {
          goto LABEL_478;
        }
        unint64_t v54 = 0;
        uint64_t v55 = v53 + 8;
        do
        {
          if (v52 - 1 == v54) {
            goto LABEL_76;
          }
          uint64_t v56 = *(void *)(v55 + 8 * v54++);
        }
        while ((*(unsigned char *)(v56 + 12) & 1) == 0);
        if (v54 < v52)
        {
LABEL_478:
          if (*(_DWORD *)(v39 + 312))
          {
            uint64_t v37 = *(uint64_t ***)(v39 + 64);
            *(void *)&long long v529 = "-1";
            *((void *)&v529 + 1) = 0xEDA00000002;
            *(void *)&long long v530 = 0xFFFFFFFFLL;
            unint64_t v38 = "Use of EmitStreamVertex or EndStreamPrimitive requires layout(points) out.";
            goto LABEL_150;
          }
        }
      }
    }
  }
LABEL_76:
  if (!glpIsLegalStageCombination(v39, *(void *)(v39 + 184) != 0, *(void *)(v39 + 192) != 0, *(void *)(v39 + 200) != 0, *(void *)(v39 + 208) != 0, *(void *)(v39 + 216) != 0))return 0; {
  if (*(void *)(v39 + 184) && *(void *)(v39 + 216) && !*(_DWORD *)(**(void **)(v39 + 112) + 4))
  }
  {
    uint64_t v265 = *(void *)v525;
    uint64_t v266 = v528;
    uint64_t v267 = glpStringHashGet(*(uint64_t *)v525, "gl_Position", 0x64C66BD10000000BLL);
    uint64_t v268 = glpStringHashGet(v266, "gl_FragCoord", 0xFCBC8470000000CLL);
    if (!v268 || (*(unsigned char *)(v268 + 52) & 0x80) == 0 || v267 && (*(unsigned char *)(v267 + 52) & 0x80) != 0)
    {
      uint64_t v269 = glpStringHashGet(v265, "gl_PointSize", 0x3BD84BA50000000CLL);
      uint64_t v270 = glpStringHashGet(v266, "gl_PointCoord", 0x15E256410000000DLL);
      if (!v270 || (*(unsigned char *)(v270 + 52) & 0x80) == 0 || v269 && (*(unsigned char *)(v269 + 52) & 0x80) != 0) {
        goto LABEL_80;
      }
      uint64_t v37 = *(uint64_t ***)(v39 + 64);
      *(void *)&long long v529 = "-1";
      *((void *)&v529 + 1) = 0xEDA00000002;
      *(void *)&long long v530 = 0xFFFFFFFFLL;
      unint64_t v38 = "gl_PointCoord can be declared invariant if and only if gl_PointSize is declared invariant.";
    }
    else
    {
      uint64_t v37 = *(uint64_t ***)(v39 + 64);
      *(void *)&long long v529 = "-1";
      *((void *)&v529 + 1) = 0xEDA00000002;
      *(void *)&long long v530 = 0xFFFFFFFFLL;
      unint64_t v38 = "gl_FragCoord can be declared invariant if and only if gl_Position is declared invariant.";
    }
    goto LABEL_150;
  }
LABEL_80:
  for (uint64_t i = 0; i != 5; ++i)
  {
    if (*(void *)(v39 + 8 * i + 184)) {
      break;
    }
  }
  unsigned int v58 = 4;
  do
  {
    if (*(void *)(v39 + 8 * v58 + 184)) {
      break;
    }
    --v58;
  }
  while (v58);
  uint64_t StringHash = glpMakeStringHash((void *)v39);
  uint64_t v448 = glpMakeStringHash((void *)v39);
  *(void *)&long long v531 = 0;
  long long v529 = 0u;
  long long v530 = 0u;
  uint64_t v521 = 0;
  long long v519 = 0u;
  long long v520 = 0u;
  memset(v518, 0, 40);
  uint64_t v517 = 0;
  memset(v516, 0, sizeof(v516));
  memset(v515, 0, 40);
  uint64_t v514 = 0;
  memset(v513, 0, sizeof(v513));
  v511[0] = 0;
  v511[1] = 0;
  int v512 = 0;
  if (!i && !glpMakeVertexInputBindings(v39, v522[0], (uint64_t *)&v529, v518, v515)) {
    return 0;
  }
  uint64_t v453 = StringHash;
  if (i <= v58)
  {
    unint64_t v64 = i;
    v462 = &v518[v58];
    v457 = &v515[v58];
    v464 = &v516[v58];
    int v65 = &v526[7 * i + 2];
    uint64_t v66 = i;
    uint64_t v67 = (char *)&v529 + 8;
    uint64_t v68 = &v518[1];
    int v69 = &v515[1];
    uint64_t v70 = v39 + 192;
    v459 = &v513[v58];
    do
    {
      if (*(void *)(v39 + 8 * v64 + 184))
      {
        uint64_t v484 = v70;
        __s2a = v69;
        unint64_t v71 = &v522[14 * v64];
        if (!glpMergeUniforms(*(uint64_t ***)(v39 + 64), v453, v71[3])
          || !glpMergeInterfaceBlocks(*(uint64_t ***)(v39 + 64), v64, v448, v71[6], 0))
        {
          return 0;
        }
        v472 = &v522[14 * v64];
        uint64_t v70 = v484;
        int v69 = __s2a;
        uint64_t v72 = v484;
        unint64_t v73 = __s2a;
        v475 = v68;
        v477 = v67;
        uint64_t v74 = v68;
        uint64_t v75 = v67;
        v480 = v65;
        int v76 = (uint64_t *)v65;
        unint64_t v77 = v64;
        do
        {
          int v78 = v77;
          unsigned int v79 = v76;
          uint64_t v80 = v75;
          uint64_t v81 = v74;
          uint64_t v82 = v73;
          if (v77 > 3) {
            break;
          }
          uint64_t v83 = *(void *)(v72 + v66 * 8);
          v76 += 14;
          v75 += 8;
          ++v74;
          ++v73;
          v72 += 8;
          ++v77;
        }
        while (!v83);
        BOOL v84 = 0;
        unsigned int v85 = v78 + 1;
        if (v64 != 4 && v85 >= 4) {
          BOOL v84 = *(_DWORD *)(a1[12] + 4) != 0;
        }
        *((_DWORD *)v511 + v64) = v84;
        if (v64 == v58)
        {
          uint64_t v39 = (uint64_t)a1;
          uint64_t v67 = v477;
          int v65 = v480;
          uint64_t v68 = v475;
          if (!v58) {
            goto LABEL_479;
          }
          if (!*v462 && !*v457)
          {
            BOOL v468 = v84;
            int InterstageBindings = glpMakeInterstageBindings((uint64_t)a1, v58, v58, 0, 0, 0, *v472, 0, (uint64_t *)&v529 + v58, 0, v462, 0, v457);
            BOOL v84 = v468;
            int v69 = __s2a;
            if (!InterstageBindings) {
              return 0;
            }
          }
          if (v64 != 4)
          {
LABEL_479:
            if (!*v464 && !*v459)
            {
              int v87 = glpMakeInterstageBindings((uint64_t)a1, v58, v58, v84, v472[1], v472[2], 0, (uint64_t *)&v519 + v58, 0, v464, 0, v459, 0);
              int v69 = __s2a;
              if (!v87) {
                return 0;
              }
            }
          }
        }
        else
        {
          unsigned int v466 = v85;
          int v469 = v84;
          uint64_t v88 = glpMakeStringHash(a1);
          if (!glpMergeInterfaceBlocks((uint64_t **)a1[8], v64, v88, v472[4], 0)) {
            return 0;
          }
          if (!glpMergeInterfaceBlocks((uint64_t **)a1[8], v64, v88, v472[5], v64 == 3)) {
            return 0;
          }
          int v89 = glpMakeInterstageBindings((uint64_t)a1, v64, v466, v469, v472[1], v472[2], *v79, (uint64_t *)&v519 + v64, (uint64_t *)&v80[v66 * 8], &v516[v64], &v81[v66], &v513[v64], &v82[v66]);
          uint64_t v39 = (uint64_t)a1;
          uint64_t v67 = v477;
          int v65 = v480;
          uint64_t v68 = v475;
          uint64_t v70 = v484;
          int v69 = __s2a;
          if (!v89) {
            return 0;
          }
        }
      }
      ++v64;
      v65 += 7;
      v67 += 8;
      ++v68;
      ++v69;
      v70 += 8;
    }
    while (v64 != v58 + 1);
  }
  if (v58 == 4 && !glpMakeFragmentOutputBindings(v39, v527, &v521, &v517, &v514)) {
    return 0;
  }
  if (!(void)v529)
  {
    uint64_t v90 = *(void *)(v39 + 80);
    unint64_t v91 = *(unsigned int *)(v90 + 32);
    if (v91)
    {
      uint64_t v92 = 0;
      for (unint64_t j = 0; j < v91; ++j)
      {
        uint64_t v94 = *(void *)(v90 + 40);
        if (*(void *)(v94 + v92))
        {
          unsigned int v95 = *(uint64_t ***)(v39 + 64);
          int v96 = *(_DWORD *)(v94 + v92 + 16);
          *(void *)v501 = "-1";
          *(void *)&v501[8] = 0xEDA00000002;
          *(void *)&v501[16] = 0xFFFFFFFFLL;
          glpLogMessage(v95, 1u, (uint64_t)v501, "Do not have an attached vertex shader to match BindAttributeLocation request for '%.*s'.", v60, v61, v62, v63, v96);
          unint64_t v91 = *(unsigned int *)(v90 + 32);
        }
        v92 += 32;
      }
    }
  }
  uint64_t v97 = 0;
  uint64_t v98 = v39 + 184;
  uint64_t v99 = (uint64_t *)v526;
  do
  {
    if (*(void *)(v98 + 8 * v97))
    {
      int v100 = *((_DWORD *)v511 + v97);
      if (v100) {
        uint64_t v101 = v39 + 224;
      }
      else {
        uint64_t v101 = 0;
      }
      if (v100) {
        uint64_t v102 = v39 + 240;
      }
      else {
        uint64_t v102 = 0;
      }
      glpGenerateCopyInOut(a1, v97, v515[v97], v518[v97], v513[v97], v516[v97], v101, v102, *(void *)(v98 + 8 * v97), *v99);
    }
    ++v97;
    v99 += 14;
  }
  while (v97 != 5);
  double v103 = a1;
  if (!v521)
  {
    uint64_t v104 = a1[11];
    unint64_t v105 = *(unsigned int *)(v104 + 32);
    if (v105)
    {
      uint64_t v106 = 0;
      for (unint64_t k = 0; k < v105; ++k)
      {
        uint64_t v108 = *(void *)(v104 + 40);
        if (*(void *)(v108 + v106))
        {
          uint64_t v109 = (uint64_t **)a1[8];
          int v110 = *(_DWORD *)(v108 + v106 + 16);
          *(void *)v501 = "-1";
          *(void *)&v501[8] = 0xEDA00000002;
          *(void *)&v501[16] = 0xFFFFFFFFLL;
          glpLogMessage(v109, 1u, (uint64_t)v501, "Do not have an attached fragment shader to match FragDataBinding request for '%.*s'.", v60, v61, v62, v63, v110);
          unint64_t v105 = *(unsigned int *)(v104 + 32);
        }
        v106 += 32;
      }
    }
  }
  if ((void)v519) {
    BOOL v111 = 0;
  }
  else {
    BOOL v111 = (void)v520 == 0;
  }
  if (v111 && *((void *)&v520 + 1) == 0)
  {
    uint64_t v113 = a1[12];
    if (*(_DWORD *)(v113 + 4))
    {
      uint64_t v114 = 0;
      unint64_t v115 = 0;
      do
      {
        uint64_t v116 = (uint64_t **)a1[8];
        int v117 = *(_DWORD *)(*(void *)(v113 + 8) + v114 + 8);
        *(void *)v501 = "-1";
        *(void *)&v501[8] = 0xEDA00000002;
        *(void *)&v501[16] = 0xFFFFFFFFLL;
        glpLogMessage(v116, 0, (uint64_t)v501, "Do not have an attached vertex or evaluation or geometry shader to match transform feedback binding for '%.*s.'. ", v60, v61, v62, v63, v117);
        ++v115;
        uint64_t v113 = a1[12];
        v114 += 16;
      }
      while (v115 < *(unsigned int *)(v113 + 4));
      return 0;
    }
  }
  v478 = __abort_calloc();
  v509[0] = 0;
  v509[1] = 0;
  int v510 = 0;
  v507[0] = 0;
  v507[1] = 0;
  int v508 = 0;
  v478[10] = glpMakeStringHash(&GLP_MALLOC_ALLOCATOR);
  v478[25] = 4;
  v478[26] = (*((uint64_t (**)(void, uint64_t, const char *))&GLP_MALLOC_ALLOCATOR + 1))(GLP_MALLOC_ALLOCATOR, 16, "Vector Storage (int)");
  unsigned int v454 = 0;
  __src = (void *)(*((uint64_t (**)(void, uint64_t, const char *))&GLP_MALLOC_ALLOCATOR + 1))(GLP_MALLOC_ALLOCATOR, 32, "Vector Storage (GLPVariableObject *)");
  int v481 = 0;
  int v460 = 0;
  int v451 = 0;
  int v452 = 0;
  uint64_t v120 = v453;
  unint64_t v121 = *(unsigned int *)(v453 + 32);
  unint64_t v122 = v121;
  uint64_t v123 = 4;
  while (2)
  {
    if (v122)
    {
      unint64_t v124 = 0;
      while (1)
      {
        uint64_t v125 = *(void *)(v120 + 40);
        uint64_t v126 = *(void *)(v125 + 32 * v124);
        if (v126) {
          break;
        }
LABEL_289:
        ++v124;
        unint64_t v122 = v121;
        if (v124 >= v121) {
          goto LABEL_292;
        }
      }
      uint64_t v463 = v123;
      uint64_t v127 = 0;
      __int32 v128 = 0;
      uint64_t v129 = v125 + 32 * v124;
      uint64_t v130 = *(void *)(v129 + 16);
      __s2b = *(const char **)(v129 + 8);
      unint64_t v456 = v124;
      ArrayType = *(unsigned int **)v126;
      uint64_t v474 = *(void *)(v126 + 120);
      unsigned int v131 = *(_DWORD *)(v126 + 128);
      memset(v501, 0, 20);
      int v132 = (uint64_t *)v523;
      do
      {
        if (v103[v127 + 23])
        {
          uint64_t v133 = glpStringHashGet(*v132, __s2b, v130);
          int v134 = 1 << v127;
          if (!v133) {
            int v134 = 0;
          }
          v128 |= v134;
        }
        ++v127;
        v132 += 14;
      }
      while (v127 != 5);
      unsigned int v135 = v478;
      if (v128 != 1 << v452)
      {
        if (v452 != 5) {
          goto LABEL_287;
        }
        v119.i32[0] = v128;
        int8x8_t v119 = vcnt_s8(v119);
        v119.i16[0] = vaddlv_u8((uint8x8_t)v119);
        if (v119.i32[0] < 2u) {
          goto LABEL_287;
        }
      }
      if (!*(void *)(v126 + 88))
      {
        uint64_t v136 = 0;
        int v137 = (uint64_t *)v523;
        do
        {
          if (v103[v136 + 23])
          {
            uint64_t v138 = glpStringHashGet(*v137, __s2b, v130);
            if (v138)
            {
              uint64_t v139 = v138;
              uint64_t v474 = BitSetOr(v474, *(void *)(v138 + 120));
              unsigned int v140 = *(_DWORD *)(v139 + 128);
              if (v131 <= v140) {
                unsigned int v131 = *(_DWORD *)(v139 + 128);
              }
              *(_DWORD *)&v501[4 * v136] = v140;
              if (glpTypeGetKind(*(unsigned int **)v139) == 2 && *(void *)(v139 + 120))
              {
                uint64_t ElementType = glpArrayTypeGetElementType(*(void *)v139);
                unsigned int v142 = glpABIGetTypeSize(0, ElementType, 0);
                unsigned int Size = glpTypeSizeGetSize(v142);
                unsigned int v144 = *(_DWORD *)(v139 + 128);
                int v145 = v144 % Size ? v144 / Size + 1 : v144 / Size;
                if (glpArrayTypeGetElementCount(*(void *)v139) != v145)
                {
                  uint64_t v146 = glpArrayTypeGetElementType(*(void *)v139);
                  *(void *)uint64_t v139 = glpMakeArrayType((uint64_t)v103, v146, v145, -1);
                }
              }
            }
            unsigned int v135 = v478;
          }
          ++v136;
          v137 += 14;
        }
        while (v136 != 5);
        if (glpTypeGetKind(ArrayType) == 2 && v474)
        {
          uint64_t v147 = glpArrayTypeGetElementType((uint64_t)ArrayType);
          unsigned int v148 = glpABIGetTypeSize(0, v147, 0);
          unsigned int v149 = glpTypeSizeGetSize(v148);
          int v150 = v131 % v149 ? v131 / v149 + 1 : v131 / v149;
          if (glpArrayTypeGetElementCount((uint64_t)ArrayType) != v150)
          {
            uint64_t v151 = glpArrayTypeGetElementType((uint64_t)ArrayType);
            ArrayType = (unsigned int *)glpMakeArrayType((uint64_t)v103, v151, v150, -1);
          }
        }
      }
      int v152 = __s2b;
      size_t v153 = v130;
      if (v130 && *__s2b == 36)
      {
        if (v130 < 9
          || (v154 = strncmp("$ib$", __s2b, 4uLL), size_t v153 = v130, v154)
          || (v155 = strncmp("$gl_", __s2b + 5, 4uLL), size_t v153 = v130, v155))
        {
          if ((v103[5] & 2) != 0 && (*(unsigned char *)(v126 + 52) & 0xC) == 0)
          {
            uint64_t v217 = 0;
            uint64_t v218 = (uint64_t *)v523;
            do
            {
              if (a1[v217 + 23]) {
                glpStringHashGet(*v218, __s2b, v130);
              }
              ++v217;
              v218 += 14;
            }
            while (v217 != 5);
            int v219 = v454 + 1;
            if (v454 + 1 <= v463)
            {
              uint64_t v224 = v454;
              uint64_t v223 = __src;
            }
            else
            {
              if ((int)v463 <= 1) {
                int v220 = 1;
              }
              else {
                int v220 = v463;
              }
              int v221 = 2 * v220;
              if (v221 <= v219) {
                uint64_t v222 = v219;
              }
              else {
                uint64_t v222 = v221;
              }
              uint64_t v223 = (void *)(*((uint64_t (**)(void, uint64_t, const char *))&GLP_MALLOC_ALLOCATOR + 1))(GLP_MALLOC_ALLOCATOR, 8 * v222, "Vector Storage (GLPVariableObject *, growth)");
              uint64_t v224 = v454;
              memcpy(v223, __src, 8 * v454);
              off_26B86F7A0(GLP_MALLOC_ALLOCATOR, __src);
              uint64_t v463 = v222;
            }
            *((void *)v223 + v224) = v126;
            ++v454;
            __src = v223;
          }
          else if (v130 >= 9)
          {
            goto LABEL_195;
          }
LABEL_287:
          uint64_t v120 = v453;
          uint64_t v123 = v463;
          unint64_t v124 = v456;
LABEL_288:
          unint64_t v121 = *(unsigned int *)(v120 + 32);
          goto LABEL_289;
        }
LABEL_195:
        size_t v156 = v153;
        if (strncmp("$ib$", __s2b, 4uLL)) {
          goto LABEL_287;
        }
        int v157 = strncmp("$gl_", __s2b + 5, 4uLL);
        size_t v153 = v156;
        if (v157) {
          goto LABEL_287;
        }
      }
      if ((*(unsigned char *)(v126 + 52) & 4) != 0) {
        goto LABEL_287;
      }
      size_t v158 = v153;
      int v159 = (char *)malloc_type_malloc(v153, 0x7081ABB9uLL);
      if (!v159
        || (v449 = v159,
            size_t v450 = v158,
            memcpy(v159, __s2b, v158),
            (uint64_t v160 = malloc_type_malloc(0x58uLL, 0x7081ABB9uLL)) == 0))
      {
LABEL_475:
        abort();
      }
      v160[10] = 0;
      *((_OWORD *)v160 + 3) = 0u;
      *((_OWORD *)v160 + 4) = 0u;
      *((_OWORD *)v160 + 1) = 0u;
      *((_OWORD *)v160 + 2) = 0u;
      uint64_t v471 = (uint64_t)v160;
      *(_OWORD *)uint64_t v160 = 0u;
      if (v130 < 3)
      {
LABEL_204:
        BOOL v161 = 0;
      }
      else if (!strncmp("gl_", __s2b, 3uLL))
      {
        BOOL v161 = 1;
      }
      else
      {
        if (v130 < 9 || strncmp("$ib$", __s2b, 4uLL)) {
          goto LABEL_204;
        }
        BOOL v161 = strncmp("$gl_", __s2b + 5, 4uLL) == 0;
      }
      int v162 = v460;
      uint64_t v163 = 0;
      unsigned int v485 = 0;
      BOOL v473 = v161;
      if (v161) {
        int v162 = -1;
      }
      int v467 = v162;
      uint64_t v470 = v130;
      do
      {
        if (v103[v163 + 23])
        {
          uint64_t v164 = v163;
          uint64_t v165 = glpStringHashGet(v522[14 * v163 + 3], v152, v130);
          if (v165)
          {
            int v166 = (uint64_t *)v165;
            *(_DWORD *)v471 |= 1 << v164;
            *(_DWORD *)(v165 + 156) = v467;
            uint64_t v476 = v164;
            if (v473)
            {
              int v167 = 0;
            }
            else
            {
              unsigned int v168 = glpABIGetTypeSize(0, *(void *)v165, 0);
              int v167 = glpTypeSizeGetSize(v168);
            }
            *((_DWORD *)v509 + v164) += v167;
            int SamplerCount = glpTypeGetSamplerCount(*v166);
            *((_DWORD *)v507 + v164) += SamplerCount;
            if (v473 && (v103[5] & 2) != 0)
            {
              uint64_t v175 = (uint64_t *)v166[1];
              if (!v175 || (int v176 = SamplerCount, v177 = glpLayoutObjectFind(v175, 28), SamplerCount = v176, !v177))
              {
                int v178 = v454 + 1;
                if (v454 + 1 <= v463)
                {
                  uint64_t v184 = v454;
                  unsigned int v183 = __src;
                }
                else
                {
                  if ((int)v463 <= 1) {
                    int v179 = 1;
                  }
                  else {
                    int v179 = v463;
                  }
                  int v180 = 2 * v179;
                  if (v180 <= v178) {
                    uint64_t v181 = v178;
                  }
                  else {
                    uint64_t v181 = v180;
                  }
                  uint64_t v463 = v181;
                  int v182 = SamplerCount;
                  unsigned int v183 = (void *)(*((uint64_t (**)(void, uint64_t, const char *))&GLP_MALLOC_ALLOCATOR + 1))(GLP_MALLOC_ALLOCATOR, 8 * v181, "Vector Storage (GLPVariableObject *, growth)");
                  uint64_t v184 = v454;
                  memcpy(v183, __src, 8 * v454);
                  int v152 = __s2b;
                  off_26B86F7A0(GLP_MALLOC_ALLOCATOR, __src);
                  int SamplerCount = v182;
                }
                *((void *)v183 + v184) = v166;
                ++v454;
                __src = v183;
              }
            }
            int v185 = (const void *)v166[9];
            if (v185 && !*(void *)(v471 + 16))
            {
              int v186 = SamplerCount;
              uint64_t v187 = glpCopyValue((uint64_t)&GLP_MALLOC_ALLOCATOR, (unsigned int *)*v166, v185, v169, v170, v171, v172, v173);
              int SamplerCount = v186;
              *(void *)(v471 + 16) = v187;
            }
            if ((v103[5] & 2) != 0 && SamplerCount >= 1)
            {
              int v465 = SamplerCount;
              glpLLVMAllocVariableExtra((uint64_t)v103, (uint64_t)v166);
              unsigned int v188 = glpABIGetTypeSize(0, *v166, 0);
              unsigned int v189 = glpTypeSizeGetSize(v188);
              uint64_t v190 = v189;
              unsigned int v191 = (unsigned int *)((uint64_t (*)(void, uint64_t, const char *))v103[1])(*v103, 4 * v189, "Primitive Types");
              int v192 = (unsigned char *)((uint64_t (*)(void, void, const char *))v103[1])(*v103, v189, "Flags");
              glpTypeGetAppleVec4Types((unsigned int *)*v166, v191, 1, 0, 0, v192, 0, 0, 0);
              uint64_t v193 = ((uint64_t (*)(void, uint64_t, const char *))v103[1])(*v103, 16, "Sampler Uniform");
              *(void *)(v166[18] + 8) = v193;
              *(void *)uint64_t v193 = v485;
              *(void *)(v193 + 8) = ((uint64_t (*)(void, uint64_t, const char *))v103[1])(*v103, 16 * v485, "Vector Storage (GLPLLVMSampler)");
              if (v189)
              {
                int v194 = 0;
                int v195 = v460;
                do
                {
                  if (glpPrimitiveTypeGetCategory(*v191) == 4)
                  {
                    if (!v485)
                    {
                      int v196 = *((_DWORD *)v135 + 50);
                      uint64_t v197 = *((unsigned int *)v135 + 51);
                      if ((int)v197 + 1 <= v196)
                      {
                        uint64_t v200 = (char *)v135[26];
                        int v201 = *((_DWORD *)v135 + 51);
                      }
                      else
                      {
                        if (v196 <= 1) {
                          int v196 = 1;
                        }
                        int v198 = 2 * v196;
                        if (v198 <= (int)v197 + 1) {
                          unsigned int v199 = v197 + 1;
                        }
                        else {
                          unsigned int v199 = v198;
                        }
                        uint64_t v200 = (char *)(*((uint64_t (**)(void, uint64_t, const char *))&GLP_MALLOC_ALLOCATOR
                                        + 1))(GLP_MALLOC_ALLOCATOR, 4 * v199, "Vector Storage (int, growth)");
                        memcpy(v200, (const void *)v135[26], 4 * *((unsigned int *)v135 + 51));
                        off_26B86F7A0(GLP_MALLOC_ALLOCATOR, (void *)v135[26]);
                        *((_DWORD *)v135 + 50) = v199;
                        v135[26] = v200;
                        int v201 = *((_DWORD *)v135 + 51);
                      }
                      memmove(&v200[4 * v197 + 4], &v200[4 * v197], 4 * (v201 - v197));
                      *(_DWORD *)(v135[26] + 4 * v197) = v195;
                      ++*((_DWORD *)v135 + 51);
                    }
                    unsigned int v202 = *v191;
                    int v203 = *(_DWORD *)v193;
                    uint64_t v204 = *(unsigned int *)(v193 + 4);
                    if ((v204 + 1) <= *(_DWORD *)v193)
                    {
                      int v207 = *(char **)(v193 + 8);
                      int v208 = *(_DWORD *)(v193 + 4);
                    }
                    else
                    {
                      if (v203 <= 1) {
                        int v203 = 1;
                      }
                      int v205 = 2 * v203;
                      if (v205 <= (int)v204 + 1) {
                        unsigned int v206 = v204 + 1;
                      }
                      else {
                        unsigned int v206 = v205;
                      }
                      int v207 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 16 * v206, "Vector Storage (GLPLLVMSampler, growth)");
                      memcpy(v207, *(const void **)(v193 + 8), 16 * *(unsigned int *)(v193 + 4));
                      unsigned int v135 = v478;
                      ((void (*)(void, void))a1[3])(*a1, *(void *)(v193 + 8));
                      *(_DWORD *)uint64_t v193 = v206;
                      *(void *)(v193 + 8) = v207;
                      int v208 = *(_DWORD *)(v193 + 4);
                    }
                    memmove(&v207[16 * v204 + 16], &v207[16 * v204], 16 * (v208 - v204));
                    unsigned int v209 = (_DWORD *)(*(void *)(v193 + 8) + 16 * v204);
                    _DWORD *v209 = v194 + v481;
                    v209[1] = -1;
                    v209[2] = v195;
                    v209[3] = v202;
                    ++*(_DWORD *)(v193 + 4);
                    ++v194;
                  }
                  ++v195;
                  ++v191;
                  --v190;
                }
                while (v190);
                unsigned int v485 = v465;
                double v103 = a1;
              }
              else
              {
                unsigned int v485 = v465;
                double v103 = a1;
              }
              uint64_t v130 = v470;
              int v152 = __s2b;
            }
            else
            {
              uint64_t v130 = v470;
            }
            uint64_t v163 = v476;
          }
          else
          {
            uint64_t v130 = v470;
            uint64_t v163 = v164;
          }
        }
        ++v163;
      }
      while (v163 != 5);
      *(_DWORD *)(v471 + 4) = v467;
      *(void *)(v471 + 8) = 0xFFFFFFFFLL;
      *(void *)(v471 + 24) = glpDeepCopyType(&GLP_MALLOC_ALLOCATOR, (uint64_t)ArrayType);
      uint64_t v210 = v474;
      if (v474) {
        uint64_t v210 = BitSetCloneWithAllocator(v474, GLP_MALLOC_ALLOCATOR, *((uint64_t (**)(uint64_t, uint64_t, const char *))&GLP_MALLOC_ALLOCATOR + 1), (uint64_t)off_26B86F798, (uint64_t)off_26B86F7A0);
      }
      *(void *)(v471 + 32) = v210;
      *(unsigned char *)(v471 + 80) = 0;
      double v211 = *(double *)v501;
      *(_OWORD *)(v471 + 40) = *(_OWORD *)v501;
      *(_DWORD *)(v471 + 56) = *(_DWORD *)&v501[16];
      uint64_t v212 = v135[10];
      unsigned int v213 = v130 >> 5;
      if (v130 >> 5 >= v130)
      {
        uint64_t v215 = v130;
        uint64_t v120 = v453;
        uint64_t v123 = v463;
        unint64_t v124 = v456;
      }
      else
      {
        unsigned int v214 = ~(v130 >> 5);
        LODWORD(v215) = v130;
        uint64_t v120 = v453;
        uint64_t v123 = v463;
        unint64_t v124 = v456;
        do
        {
          uint64_t v215 = (32 * v215 + (v215 >> 2) + v449[(v130 - 1)]) ^ v215;
          LODWORD(v130) = v130 + v214;
        }
        while (v130 > v213);
      }
      glpStringHashPut(v212, v449, v450 | (v215 << 32), v471, v211);
      if (!v473)
      {
        unsigned int v216 = glpABIGetTypeSize(0, (uint64_t)ArrayType, 0);
        v460 += glpTypeSizeGetSize(v216);
      }
      v481 += v485;
      v451 += glpTypeGetSamplerCount((uint64_t)ArrayType);
      goto LABEL_288;
    }
LABEL_292:
    if (++v452 != 6) {
      continue;
    }
    break;
  }
  uint64_t v498 = 4;
  unsigned int v225 = (void *)(*((uint64_t (**)(void, uint64_t, const char *))&GLP_MALLOC_ALLOCATOR + 1))(GLP_MALLOC_ALLOCATOR, 64, "Vector Storage (GLPContextStateUniformEntry)");
  v499 = v225;
  if (v454)
  {
    int v226 = v225;
    LODWORD(v227) = 0;
    uint64_t v228 = 0;
    int v229 = v460;
    do
    {
      uint64_t __s2c = v228;
      uint64_t v230 = *((void *)__src + v228);
      int v461 = v229;
      *(_DWORD *)(v230 + 156) = v229;
      unsigned int v231 = glpABIGetTypeSize(0, *(void *)v230, 0);
      int v232 = glpTypeSizeGetSize(v231);
      if (v232)
      {
        int v233 = v232;
        int v234 = 0;
        unsigned int v235 = 0;
        int v236 = v461;
        do
        {
          *(_OWORD *)v501 = v236 + v235;
          int v237 = glpLayoutObjectFind(*(uint64_t **)(v230 + 8), 46);
          if (!v237 || *((_DWORD *)v237 + 4) != 9)
          {
            uint64_t v238 = glpLayoutObjectFind(*(uint64_t **)(v230 + 8), 46);
            if (v238) {
              *(void *)&v501[8] = *(void *)&v501[8] & 0xFFFFFFFFFFFFE0FFLL | ((v238[2] & 0x1F) << 8);
            }
            int v239 = glpLayoutObjectFind(*(uint64_t **)(v230 + 8), 48);
            if (v239) {
              *(void *)&v501[8] = *(void *)&v501[8] & 0xFFFFFFF8FFFFFFFFLL | ((unint64_t)(v239[2] & 7) << 32);
            }
            int v240 = glpLayoutObjectFind(*(uint64_t **)(v230 + 8), 49);
            if (v240) {
              *(void *)&v501[8] = *(void *)&v501[8] & 0xFFFFFF07FFFFFFFFLL | ((unint64_t)(v240[2] & 0x1F) << 35);
            }
            int v241 = glpLayoutObjectFind(*(uint64_t **)(v230 + 8), 51);
            if (v241) {
              *(void *)&v501[8] = *(void *)&v501[8] & 0xFFFFF0FFFFFFFFFFLL | ((unint64_t)(v241[2] & 0xF) << 40);
            }
            unsigned int v242 = glpLayoutObjectFind(*(uint64_t **)(v230 + 8), 53);
            if (v242) {
              *(void *)&v501[8] = *(void *)&v501[8] & 0xFFFFFEFFFFFFFFFFLL | ((unint64_t)(v242[2] & 1) << 40);
            }
            unsigned int v243 = glpLayoutObjectFind(*(uint64_t **)(v230 + 8), 54);
            if (v243) {
              *(void *)&v501[8] = *(void *)&v501[8] & 0xFFFFF9FFFFFFFFFFLL | ((unint64_t)(v243[2] & 3) << 41);
            }
            int v244 = glpLayoutObjectFind(*(uint64_t **)(v230 + 8), 55);
            if (v244) {
              *(void *)&v501[8] = *(void *)&v501[8] & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v244[2] & 1) << 32);
            }
            int v245 = glpLayoutObjectFind(*(uint64_t **)(v230 + 8), 56);
            if (v245) {
              *(void *)&v501[8] = *(void *)&v501[8] & 0xFFFFFFF1FFFFFFFFLL | ((unint64_t)(v245[2] & 7) << 33);
            }
            uint64_t v246 = glpLayoutObjectFind(*(uint64_t **)(v230 + 8), 58);
            if (v246) {
              *(void *)&v501[8] = *(void *)&v501[8] & 0xFFFFFC7FFFFFFFFFLL | ((unint64_t)(v246[2] & 7) << 39);
            }
            int v247 = glpLayoutObjectFind(*(uint64_t **)(v230 + 8), 62);
            if (v247) {
              *(void *)&v501[8] = *(void *)&v501[8] & 0xFFFFFCFFFFFFFFFFLL | ((unint64_t)(v247[2] & 3) << 40);
            }
            unsigned int v248 = glpLayoutObjectFind(*(uint64_t **)(v230 + 8), 64);
            if (v248) {
              *(void *)&v501[8] = *(void *)&v501[8] & 0xFFFF8FFFFFFFFFFFLL | ((unint64_t)(v248[2] & 7) << 44);
            }
            unsigned int v249 = glpLayoutObjectFind(*(uint64_t **)(v230 + 8), 65);
            if (v249) {
              *(void *)&v501[8] = *(void *)&v501[8] & 0xFFFFFFF0FFFFFFFFLL | ((unint64_t)(v249[2] & 0xF) << 32);
            }
            int v250 = glpLayoutObjectFind(*(uint64_t **)(v230 + 8), 66);
            if (v250) {
              *(void *)&v501[8] = *(void *)&v501[8] & 0xFFFFFF0FFFFFFFFFLL | ((unint64_t)(v250[2] & 0xF) << 36);
            }
            int v251 = glpLayoutObjectFind(*(uint64_t **)(v230 + 8), 67);
            if (v251) {
              *(void *)&v501[8] = *(void *)&v501[8] & 0xFFFFFFFFFFLL | ((unint64_t)*((unsigned int *)v251 + 4) << 40);
            }
            uint64_t v252 = glpLayoutObjectFind(*(uint64_t **)(v230 + 8), 47);
            if (v252) {
              *(void *)&v501[8] = *(void *)&v501[8] & 0xFFFFFFFF0000FFFFLL | (v234
            }
                                                                                              + (*((_DWORD *)v252 + 4) << 16));
            int v253 = glpLayoutObjectFind(*(uint64_t **)(v230 + 8), 50);
            if (v253) {
              v501[12] = v235 + *((unsigned char *)v253 + 16);
            }
            unsigned int v254 = glpLayoutObjectFind(*(uint64_t **)(v230 + 8), 52);
            if (v254) {
              v501[12] = v235 + *((unsigned char *)v254 + 16);
            }
            unsigned int v255 = glpLayoutObjectFind(*(uint64_t **)(v230 + 8), 57);
            if (v255) {
              *(void *)&v501[8] = *(void *)&v501[8] & 0xFFFFFF80FFFFFFFFLL | ((unint64_t)(((_BYTE)v235 + *((_DWORD *)v255 + 4)) & 0x7F) << 32);
            }
            int v256 = glpLayoutObjectFind(*(uint64_t **)(v230 + 8), 59);
            if (v256) {
              *(void *)&v501[8] = *(void *)&v501[8] & 0xFFFFFF80FFFFFFFFLL | ((unint64_t)(((_BYTE)v235 + *((_DWORD *)v256 + 4)) & 0x7F) << 32);
            }
            int v257 = glpLayoutObjectFind(*(uint64_t **)(v230 + 8), 60);
            if (v257) {
              v501[12] = v235 + *((unsigned char *)v257 + 16);
            }
            uint64_t v258 = glpLayoutObjectFind(*(uint64_t **)(v230 + 8), 61);
            if (v258) {
              v501[12] = *((unsigned char *)v258 + 16) + (v235 >> 2);
            }
            int v259 = glpLayoutObjectFind(*(uint64_t **)(v230 + 8), 63);
            if (v259) {
              *(void *)&v501[8] = *(void *)&v501[8] & 0xFFFFF3FFFFFFFFFFLL | ((unint64_t)(((_BYTE)v235 + *((_DWORD *)v259 + 4)) & 3) << 42);
            }
            PPStreamTokenConvertParamBindingsToGeneric((unint64_t)&v501[8], 1);
            long long v505 = *(_OWORD *)v501;
            int v260 = v498;
            if ((int)v227 + 1 <= v498)
            {
              uint64_t v227 = v227;
            }
            else
            {
              if ((int)v498 <= 1) {
                int v260 = 1;
              }
              int v261 = 2 * v260;
              if (v261 <= (int)v227 + 1) {
                unsigned int v262 = v227 + 1;
              }
              else {
                unsigned int v262 = v261;
              }
              int v263 = (void *)(*((uint64_t (**)(void, uint64_t, const char *))&GLP_MALLOC_ALLOCATOR + 1))(GLP_MALLOC_ALLOCATOR, 16 * v262, "Vector Storage (GLPContextStateUniformEntry, growth)");
              uint64_t v227 = v227;
              memcpy(v263, v226, 16 * v227);
              off_26B86F7A0(GLP_MALLOC_ALLOCATOR, v226);
              LODWORD(v498) = v262;
              v499 = v263;
            }
            int v226 = v499;
            *((_OWORD *)v499 + v227) = v505;
            LODWORD(v227) = ++HIDWORD(v498);
          }
          ++v235;
          v234 += 0x40000;
          int v236 = v461;
        }
        while (v233 != v235);
      }
      unsigned int v264 = glpABIGetTypeSize(0, *(void *)v230, 0);
      int v229 = glpTypeSizeGetSize(v264) + v461;
      uint64_t v228 = __s2c + 1;
    }
    while (__s2c + 1 != v454);
  }
  else
  {
    int v229 = v460;
  }
  int v271 = v229;
  off_26B86F7A0(GLP_MALLOC_ALLOCATOR, __src);
  v478[27] = glpCopyContextState((uint64_t)&v498);
  off_26B86F7A0(GLP_MALLOC_ALLOCATOR, v499);
  uint64_t v276 = 0;
  *((_DWORD *)v478 + 56) = v271;
  int v277 = a1;
  while (2)
  {
    if (*((int *)v507 + v276) >= 17)
    {
      int v279 = (uint64_t **)a1[8];
      glpLanguageToString(v276);
      glpLanguageToString(v276);
      *(void *)v501 = "-1";
      *(void *)&v501[8] = 0xEDA00000002;
      *(void *)&v501[16] = 0xFFFFFFFFLL;
      glpLogMessage(v279, 0, (uint64_t)v501, "Implementation limit of %d active %s shader samplers (e.g., maximum number of supported image units) exceeded, %s shader uses %d samplers", v280, v281, v282, v283, 16);
      goto LABEL_374;
    }
    if (*((int *)v509 + v276) >= 1025)
    {
      uint64_t v284 = (uint64_t **)a1[8];
      glpLanguageToString(v276);
      *(void *)v501 = "-1";
      *(void *)&v501[8] = 0xEDA00000002;
      *(void *)&v501[16] = 0xFFFFFFFFLL;
      glpLogMessage(v284, 0, (uint64_t)v501, "Implementation limit of %d (e.g., number of built-in plus user defined active uniforms components) exceeded, %s shader uses %d total uniforms.", v285, v286, v287, v288, 0);
LABEL_374:
      uint64_t v289 = (uint64_t)v478;
LABEL_375:
      glpDestroyLinkedProgram(v289);
      return 0;
    }
    if (++v276 != 5) {
      continue;
    }
    break;
  }
  if (v451 >= 33)
  {
    int v278 = (uint64_t **)a1[8];
    *(void *)v501 = "-1";
    *(void *)&v501[8] = 0xEDA00000002;
    *(void *)&v501[16] = 0xFFFFFFFFLL;
    glpLogMessage(v278, 0, (uint64_t)v501, "Implementation limit of %d active samplers (e.g., maximum number of supported image units) exceeded, linked shaders use %d samplers", v272, v273, v274, v275, 32);
    goto LABEL_374;
  }
  long long v505 = 0uLL;
  int v506 = 0;
  v478[11] = glpMakeStringHash(&GLP_MALLOC_ALLOCATOR);
  unint64_t v290 = *(unsigned int *)(v453 + 32);
  if (v290)
  {
    unint64_t v291 = 0;
    *(_OWORD *)__s2d = 0u;
    do
    {
      uint64_t v292 = *(void *)(v453 + 40);
      uint64_t v293 = *(void *)(v292 + 32 * v291);
      if (v293 && (*(unsigned char *)(v293 + 52) & 4) != 0)
      {
        uint64_t v294 = v292 + 32 * v291;
        int v295 = *(const void **)(v294 + 8);
        uint64_t v296 = *(void *)(v294 + 16);
        v486 = __abort_malloc_0(v296);
        memcpy(v486, v295, v296);
        v297 = (char *)__abort_malloc_0(0x58uLL);
        *(_OWORD *)v297 = 0u;
        *((_OWORD *)v297 + 1) = 0u;
        *((_OWORD *)v297 + 2) = 0u;
        *((_OWORD *)v297 + 3) = 0u;
        *((_OWORD *)v297 + 4) = 0u;
        *((void *)v297 + 10) = 0;
        *(char **)(v297 + 4) = __s2d[0];
        *((_DWORD *)v297 + 3) = 0;
        uint64_t v298 = 0;
        *((void *)v297 + 3) = glpDeepCopyType(&GLP_MALLOC_ALLOCATOR, *(void *)v293);
        *((void *)v297 + 4) = 0;
        v297[80] = 0;
        *(_DWORD *)v297 = 0;
        int v299 = (uint64_t *)v523;
        do
        {
          if (a1[v298 + 23])
          {
            uint64_t v300 = glpStringHashGet(*v299, (const char *)v295, v296);
            if (v300)
            {
              *(_DWORD *)v297 |= 1 << v298;
              *(_DWORD *)(*(void *)(v300 + 88) + 28) = *((_DWORD *)v297 + 2);
              *(_DWORD *)&v297[4 * v298 + 40] = 0;
              ++*((_DWORD *)&v505 + v298);
            }
          }
          ++v298;
          v299 += 14;
        }
        while (v298 != 5);
        uint64_t v301 = v478[11];
        uint64_t String = (const char *)glpMakeString((uint64_t)v486, v296);
        glpStringHashPut(v301, String, v303, (uint64_t)v297, v304);
        unsigned int Vec4s_1 = glpTypeGetVec4s_1(*(void *)v293);
        if (16 * glpTypeGetVec4s_1(*(void *)v293) > 0x4000)
        {
          v437 = (uint64_t **)a1[8];
          glpTypeGetVec4s_1(*(void *)v293);
          *(void *)v501 = "-1";
          *(void *)&v501[8] = 0xEDA00000002;
          *(void *)&v501[16] = 0xFFFFFFFFLL;
          glpLogMessage(v437, 0, (uint64_t)v501, "Bindable uniform %.*s too large (%d exceeds max %d)", v438, v439, v440, v441, v296);
          goto LABEL_474;
        }
        int v277 = a1;
        if (glpTypeGetSamplerCount(*(void *)v293))
        {
          v442 = (uint64_t **)a1[8];
          *(void *)v501 = "-1";
          *(void *)&v501[8] = 0xEDA00000002;
          *(void *)&v501[16] = 0xFFFFFFFFLL;
          glpLogMessage(v442, 0, (uint64_t)v501, "Bindable uniform %.*s not allowed to have samplers", v306, v307, v308, v309, v296);
          goto LABEL_474;
        }
        *((char **)&v310 + 1) = __s2d[1];
        *(int32x2_t *)&long long v310 = vadd_s32((int32x2_t)(Vec4s_1 | 0x100000000), (int32x2_t)__s2d[0]);
        *(_OWORD *)__s2d = v310;
        unint64_t v290 = *(unsigned int *)(v453 + 32);
      }
      ++v291;
    }
    while (v291 < v290);
  }
  for (uint64_t m = 0; m != 5; ++m)
  {
    if (*((_DWORD *)&v505 + m) > dword_2393D2628[m])
    {
      v433 = (uint64_t **)v277[8];
      unsigned __int8 v434 = glpLanguageToString(m);
      *(void *)v501 = "-1";
      *(void *)&v501[8] = 0xEDA00000002;
      *(void *)&v501[16] = 0xFFFFFFFFLL;
      char v447 = v434;
      v435 = "Too many bindable uniforms in %s shader (%d exceeds max %d)";
LABEL_469:
      v443 = v433;
LABEL_473:
      glpLogMessage(v443, 0, (uint64_t)v501, v435, v359, v360, v361, v362, v447);
LABEL_474:
      uint64_t v289 = (uint64_t)v478;
      goto LABEL_375;
    }
  }
  v503[0] = 0;
  v503[1] = 0;
  int v504 = 0;
  v478[12] = glpMakeStringHash(&GLP_MALLOC_ALLOCATOR);
  unint64_t v312 = *(unsigned int *)(v448 + 32);
  if (v312)
  {
    unint64_t v313 = 0;
    int v314 = 0;
    do
    {
      uint64_t v315 = *(void *)(v448 + 40);
      uint64_t v316 = *(void *)(v315 + 32 * v313);
      if (v316)
      {
        uint64_t v317 = v315 + 32 * v313;
        unsigned int v318 = *(const void **)(v317 + 8);
        uint64_t v319 = *(void *)(v317 + 16);
        __s2e = __abort_malloc_0(v319);
        memcpy(__s2e, v318, v319);
        int v320 = __abort_malloc_0(0x58uLL);
        *int v320 = 0u;
        v320[1] = 0u;
        v320[2] = 0u;
        v320[3] = 0u;
        v320[4] = 0u;
        *((void *)v320 + 10) = 0;
        *((_DWORD *)v320 + 1) = -1;
        *((_DWORD *)v320 + 2) = v314;
        int v487 = v314;
        uint64_t v321 = 0;
        *((void *)v320 + 3) = glpDeepCopyType(&GLP_MALLOC_ALLOCATOR, *(void *)(v316 + 64));
        *((void *)v320 + 4) = 0;
        *((unsigned char *)v320 + 80) = *(unsigned char *)(v316 + 32) == 0;
        *(_DWORD *)int v320 = 0;
        uint64_t v322 = &v524;
        do
        {
          if (a1[v321 + 23])
          {
            uint64_t v323 = glpStringHashGet(*v322, (const char *)v318, v319);
            if (v323)
            {
              *(_DWORD *)v320 |= 1 << v321;
              uint64_t v324 = *(void *)(v323 + 80);
              *((_DWORD *)v320 + 3) = *(_DWORD *)(v324 + 8);
              *(_DWORD *)(v324 + 28) = *((_DWORD *)v320 + 2);
              *((_DWORD *)v320 + v321 + 10) = 0;
              *((_DWORD *)v503 + v321) += *(_DWORD *)(*(void *)(v316 + 80) + 12);
            }
          }
          ++v321;
          v322 += 14;
        }
        while (v321 != 5);
        uint64_t v325 = v478[12];
        int v326 = (const char *)glpMakeString((uint64_t)__s2e, v319);
        glpStringHashPut(v325, v326, v327, (uint64_t)v320, v328);
        uint64_t v329 = *(void *)(v316 + 80);
        int v330 = *(_DWORD *)(v329 + 12);
        if (glpBufferObjectGetMinimumBufferSize(v329) > 0x4000)
        {
          v433 = (uint64_t **)a1[8];
          glpBufferObjectGetMinimumBufferSize(*(void *)(v316 + 80));
          *(void *)v501 = "-1";
          *(void *)&v501[8] = 0xEDA00000002;
          *(void *)&v501[16] = 0xFFFFFFFFLL;
          char v447 = v319;
          v435 = "Uniform interface block %.*s too large (%d exceeds max %d)";
          goto LABEL_469;
        }
        if (glpTypeGetSamplerCount(*(void *)(v316 + 64)))
        {
          v444 = (uint64_t **)a1[8];
          *(void *)v501 = "-1";
          *(void *)&v501[8] = 0xEDA00000002;
          *(void *)&v501[16] = 0xFFFFFFFFLL;
          glpLogMessage(v444, 0, (uint64_t)v501, "Uniform interface block %.*s not allowed to have samplers", v331, v332, v333, v334, v319);
          goto LABEL_474;
        }
        int v314 = v330 + v487;
        unint64_t v312 = *(unsigned int *)(v448 + 32);
      }
      ++v313;
    }
    while (v313 < v312);
  }
  uint64_t v335 = 0;
  uint64_t v336 = (uint64_t)a1;
  do
  {
    if (*((_DWORD *)v503 + v335) > dword_2393D263C[v335])
    {
      v433 = (uint64_t **)a1[8];
      unsigned __int8 v436 = glpLanguageToString(v335);
      *(void *)v501 = "-1";
      *(void *)&v501[8] = 0xEDA00000002;
      *(void *)&v501[16] = 0xFFFFFFFFLL;
      char v447 = v436;
      v435 = "Too many uniform interface blocks in %s shader (%d exceeds max %d)";
      goto LABEL_469;
    }
    ++v335;
  }
  while (v335 != 5);
  for (uint64_t n = 0; n != 5; ++n)
  {
    __s2f = (char *)&v478[n];
    *((void *)__s2f + 13) = glpMakeStringHash(&GLP_MALLOC_ALLOCATOR);
    uint64_t v338 = v336 + 8 * n;
    uint64_t v341 = *(void *)(v338 + 184);
    uint64_t v340 = (uint64_t *)(v338 + 184);
    uint64_t v339 = v341;
    if (v341 && glpTopLevelNodeGetDefCount(v339))
    {
      unsigned int v342 = 0;
      int v343 = 0;
      do
      {
        uint64_t Def = glpTopLevelNodeGetDef(*v340, v342);
        if (Def)
        {
          uint64_t v345 = Def;
          if (glpASTNodeGetKind(Def) == 51)
          {
            uint64_t Prototype = glpFunctionDefinitionNodeGetPrototype(v345);
            uint64_t Extra = glpFunctionPrototypeNodeGetExtra(Prototype);
            if ((*(unsigned char *)(Extra + 10) & 0x10) != 0)
            {
              uint64_t v348 = Extra;
              *(_DWORD *)(Extra + 160) = v343;
              uint64_t v349 = __abort_malloc_0(0x10uLL);
              *uint64_t v349 = 0;
              v349[1] = 0;
              *(_DWORD *)uint64_t v349 = -1;
              *((_DWORD *)v349 + 1) = *(_DWORD *)(v348 + 160);
              v349[1] = 0;
              unsigned int v350 = __abort_malloc_0(*(unsigned int *)(v348 + 32));
              memcpy(v350, *(const void **)(v348 + 24), *(unsigned int *)(v348 + 32));
              uint64_t v351 = *((void *)__s2f + 13);
              int v352 = (const char *)glpMakeString((uint64_t)v350, *(_DWORD *)(v348 + 32));
              glpStringHashPut(v351, v352, v353, (uint64_t)v349, v354);
              ++v343;
            }
          }
        }
        ++v342;
      }
      while (v342 < glpTopLevelNodeGetDefCount(*v340));
      if (v343 > 4096)
      {
        v445 = *(uint64_t ***)(v336 + 64);
        *(void *)v501 = "-1";
        *(void *)&v501[8] = 0xEDA00000002;
        *(void *)&v501[16] = 0xFFFFFFFFLL;
        glpLogMessage(v445, 0, (uint64_t)v501, "Too many subroutines (%d exceeds max %d)", v355, v356, v357, v358, v343);
        goto LABEL_474;
      }
    }
    *((void *)__s2f + 18) = glpMakeStringHash(&GLP_MALLOC_ALLOCATOR);
    __s2g = (uint64_t *)(__s2f + 144);
    if (*v340)
    {
      int v363 = &v522[14 * n];
      uint64_t v364 = v363[7];
      unint64_t v365 = *(unsigned int *)(v364 + 32);
      if (v365)
      {
        unint64_t v366 = 0;
        int v367 = 0;
        uint64_t v482 = n;
        int v488 = 1 << n;
        do
        {
          uint64_t v368 = *(void *)(v364 + 40);
          uint64_t v369 = *(void *)(v368 + 32 * v366);
          if (v369)
          {
            uint64_t v370 = v368 + 32 * v366;
            v371 = *(const void **)(v370 + 8);
            size_t v372 = *(unsigned int *)(v370 + 16);
            unsigned int v373 = *(unsigned int **)(v369 + 16);
            if (glpTypeGetKind(v373) == 2) {
              unsigned int v373 = (unsigned int *)glpArrayTypeGetElementType((uint64_t)v373);
            }
            int v374 = __abort_malloc_0(v372);
            memcpy(v374, v371, v372);
            int v375 = __abort_malloc_0(0x58uLL);
            *int v375 = 0u;
            v375[1] = 0u;
            v375[2] = 0u;
            v375[3] = 0u;
            v375[4] = 0u;
            *((void *)v375 + 10) = 0;
            *((_DWORD *)v375 + 1) = v367;
            *((void *)v375 + 1) = 0xFFFFFFFFLL;
            *((void *)v375 + 3) = glpDeepCopyType(&GLP_MALLOC_ALLOCATOR, *(void *)(v369 + 16));
            *((void *)v375 + 4) = 0;
            *((unsigned char *)v375 + 80) = 0;
            *(_DWORD *)int v375 = v488;
            uint64_t v376 = glpPointerHashGet(v363[8], (unint64_t)v373);
            uint64_t v377 = *(unsigned int *)(v376 + 4);
            *((void *)v375 + 8) = v377;
            *((void *)v375 + 9) = (*((uint64_t (**)(void, uint64_t, const char *))&GLP_MALLOC_ALLOCATOR + 1))(GLP_MALLOC_ALLOCATOR, 4 * v377, "Vector Storage (int)");
            if (*(_DWORD *)(v376 + 4))
            {
              unint64_t v378 = 0;
              do
              {
                uint64_t v379 = glpFunctionDefinitionNodeGetPrototype(*(void *)(*(void *)(v376 + 8) + 8 * v378));
                *(_DWORD *)(*((void *)v375 + 9) + 4 * (*((_DWORD *)v375 + 17))++) = *(_DWORD *)(glpFunctionPrototypeNodeGetExtra(v379) + 160);
                ++v378;
              }
              while (v378 < *(unsigned int *)(v376 + 4));
            }
            *(_DWORD *)(v369 + 40) = *((_DWORD *)v375 + 1);
            uint64_t v380 = *__s2g;
            int v381 = (const char *)glpMakeString((uint64_t)v374, v372);
            glpStringHashPut(v380, v381, v382, (uint64_t)v375, v383);
            v367 += glpTypeGetVec4s_1(*(void *)(v369 + 16));
            unint64_t v365 = *(unsigned int *)(v364 + 32);
          }
          ++v366;
        }
        while (v366 < v365);
        uint64_t v336 = (uint64_t)a1;
        uint64_t n = v482;
        if (v367 > 4096)
        {
          v443 = (uint64_t **)a1[8];
          *(void *)v501 = "-1";
          *(void *)&v501[8] = 0xEDA00000002;
          *(void *)&v501[16] = 0xFFFFFFFFLL;
          char v447 = v367;
          v435 = "Too many subroutine uniforms (%d exceeds max %d)";
          goto LABEL_473;
        }
      }
    }
  }
  v478[23] = glpMakeStringHash(&GLP_MALLOC_ALLOCATOR);
  uint64_t v384 = v529;
  if ((void)v529)
  {
    unint64_t v385 = *(unsigned int *)(v529 + 32);
    if (v385)
    {
      uint64_t v386 = 0;
      for (iuint64_t i = 0; ii < v385; ++ii)
      {
        uint64_t v388 = *(void *)(v384 + 40);
        uint64_t v389 = *(void *)(v388 + v386);
        if (v389)
        {
          int v390 = *(const void **)(v388 + v386 + 8);
          size_t v391 = *(unsigned int *)(v388 + v386 + 16);
          uint64_t v392 = __abort_malloc_0(0x10uLL);
          *uint64_t v392 = 0;
          v392[1] = 0;
          *(_DWORD *)uint64_t v392 = *(_DWORD *)v389;
          v392[1] = glpDeepCopyType(&GLP_MALLOC_ALLOCATOR, *(void *)(v389 + 8));
          v393 = __abort_malloc_0(v391);
          memcpy(v393, v390, v391);
          uint64_t v394 = v478[23];
          int v395 = (const char *)glpMakeString((uint64_t)v393, v391);
          glpStringHashPut(v394, v395, v396, (uint64_t)v392, v397);
          unint64_t v385 = *(unsigned int *)(v384 + 32);
        }
        v386 += 32;
      }
    }
  }
  v478[24] = glpMakeStringHash(&GLP_MALLOC_ALLOCATOR);
  uint64_t v398 = v521;
  if (v521)
  {
    unint64_t v399 = *(unsigned int *)(v521 + 32);
    if (v399)
    {
      uint64_t v400 = 0;
      for (junint64_t j = 0; jj < v399; ++jj)
      {
        uint64_t v402 = *(void *)(v398 + 40);
        unsigned int v403 = *(void **)(v402 + v400);
        if (v403)
        {
          int v404 = *(const void **)(v402 + v400 + 8);
          size_t v405 = *(unsigned int *)(v402 + v400 + 16);
          v406 = __abort_malloc_0(0x10uLL);
          void *v406 = 0;
          v406[1] = 0;
          void *v406 = *v403;
          v406[1] = glpDeepCopyType(&GLP_MALLOC_ALLOCATOR, v403[1]);
          v407 = __abort_malloc_0(v405);
          memcpy(v407, v404, v405);
          uint64_t v408 = v478[24];
          v409 = (const char *)glpMakeString((uint64_t)v407, v405);
          glpStringHashPut(v408, v409, v410, (uint64_t)v406, v411);
          unint64_t v399 = *(unsigned int *)(v398 + 32);
        }
        v400 += 32;
      }
    }
  }
  uint64_t v412 = 0;
  long long v413 = *(_OWORD *)(v336 + 296);
  long long v414 = *(_OWORD *)(v336 + 328);
  *((_OWORD *)v478 + 18) = *(_OWORD *)(v336 + 312);
  *((_OWORD *)v478 + 19) = v414;
  *((_OWORD *)v478 + 17) = v413;
  v478[40] = *(void *)(v336 + 344);
  *(void *)(v336 + 344) = 0;
  do
  {
    v478[v412] = 0;
    v415 = (char *)&v478[v412];
    *((void *)v415 + 5) = 0;
    v416 = (uint64_t *)(v415 + 40);
    uint64_t v417 = v336 + 8 * v412;
    uint64_t v420 = *(void *)(v417 + 184);
    v419 = (uint64_t *)(v417 + 184);
    uint64_t v418 = v420;
    if (v420)
    {
      *(void *)v501 = v336;
      *(_OWORD *)&v501[8] = *(_OWORD *)(v336 + 64);
      uint64_t v502 = v418;
      uint64_t *v419 = glpPPTNode((uint64_t *)v501, v418);
      uint64_t v421 = v336 + 4 * v412;
      v422 = (char *)v478 + 4 * v412;
      *((_DWORD *)v422 + 58) = *(_DWORD *)(v421 + 256);
      *((_DWORD *)v422 + 63) = *(_DWORD *)(v421 + 276);
      int v423 = *(_DWORD *)(v336 + 40);
      if ((v423 & 2) != 0)
      {
        glpCreateShaderByteCode();
        uint64_t *v416 = v424;
        if ((*(unsigned char *)(v336 + 40) & 8) != 0)
        {
          if (*((_DWORD *)v511 + v412)) {
            int v425 = 2;
          }
          else {
            int v425 = 1;
          }
        }
        else
        {
          int v425 = 1;
        }
        int v426 = 0;
        int v427 = *((_DWORD *)v511 + v412);
        uint64_t v336 = (uint64_t)a1;
        do
        {
          if (v426) {
            BOOL v428 = 1;
          }
          else {
            BOOL v428 = v427 == 0;
          }
          char v429 = !v428;
          LLVMCodeGenContext = glpMakeLLVMCodeGenContext((uint64_t)a1, (uint64_t)v478, *v416, v412, (uint64_t)v500, v426, v429);
          glpLLVMCGTopLevel((uint64_t)LLVMCodeGenContext, *v419);
          glpDestroyLLVMCodeGenContext(LLVMCodeGenContext);
          ++v426;
        }
        while (v425 != v426);
        int v423 = *((_DWORD *)a1 + 10);
      }
      if (v423)
      {
        uint64_t v431 = PPStreamCreate();
        v478[v412] = v431;
        CodeGenContext = (void *)glpMakeCodeGenContext(v336, v431, v412);
        if (glpCGTopLevel(CodeGenContext, *v419, (uint64_t)&v526[7 * v412]) == -1) {
          goto LABEL_474;
        }
        glpDestroyCodeGenContext(CodeGenContext);
      }
    }
    ++v412;
  }
  while (v412 != 5);
  return v478;
}

uint64_t glpTypeGetVec4s_1(uint64_t a1)
{
  uint64_t v1 = glpABIGetTypeSize(0, a1, 0);

  return glpTypeSizeGetSize(v1);
}

uint64_t glpLinkerPoolAlloc(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*(void *)a1);
}

_DWORD *glpCopyContextState(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 4);
  uint64_t v3 = malloc_type_malloc((16 * v2) | 8, 0x7081ABB9uLL);
  if (!v3) {
    abort();
  }
  unint64_t v4 = v3;
  bzero(v3, (16 * v2) | 8);
  *unint64_t v4 = v2;
  if ((int)v2 >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      *(_OWORD *)&v4[v5 + 2] = *(_OWORD *)(*(void *)(a1 + 8) + v5 * 4);
      v5 += 4;
    }
    while (4 * v2 != v5);
  }
  return v4;
}

void glpDestroyLinkedProgram(uint64_t a1)
{
  for (uint64_t i = 0; i != 40; i += 8)
  {
    uint64_t v3 = *(_DWORD ***)(a1 + i);
    if (v3)
    {
      PPStreamFree(v3);
      *(void *)(a1 + i) = 0;
    }
  }
  for (uint64_t j = 40; j != 80; j += 8)
  {
    uint64_t v5 = *(void *)(a1 + j);
    if (v5)
    {
      if (*(void *)v5)
      {
        free(*(void **)v5);
        *(void *)uint64_t v5 = 0;
      }
      uint64_t v6 = *(void **)(v5 + 8);
      if (v6)
      {
        free(v6);
        *(void *)(v5 + 8) = 0;
      }
      int v7 = *(void **)(v5 + 32);
      if (v7)
      {
        free(v7);
        *(void *)(v5 + 32) = 0;
      }
      uint64_t v8 = *(void **)(v5 + 40);
      if (v8)
      {
        free(v8);
        *(void *)(v5 + 40) = 0;
      }
      int v9 = *(void **)(v5 + 16);
      if (v9)
      {
        free(v9);
        *(void *)(v5 + 16) = 0;
      }
      uint64_t v10 = *(void **)(v5 + 24);
      if (v10) {
        free(v10);
      }
      free((void *)v5);
      *(void *)(a1 + j) = 0;
    }
  }
  uint64_t v11 = *(void *)(a1 + 80);
  if (v11)
  {
    unint64_t v12 = *(unsigned int *)(v11 + 32);
    if (v12)
    {
      uint64_t v13 = 0;
      for (unint64_t k = 0; k < v12; ++k)
      {
        uint64_t v15 = *(void *)(v11 + 40);
        uint64_t v16 = *(void *)(v15 + v13);
        if (v16)
        {
          free(*(void **)(v15 + v13 + 8));
          glpDestroyType(&GLP_MALLOC_ALLOCATOR, *(void *)(v16 + 24));
          uint64_t v17 = *(uint64_t **)(v16 + 32);
          if (v17) {
            BitSetFree(v17);
          }
          free(*(void **)(v16 + 16));
          free((void *)v16);
          unint64_t v12 = *(unsigned int *)(v11 + 32);
        }
        v13 += 32;
      }
      uint64_t v11 = *(void *)(a1 + 80);
    }
    glpDestroyStringHash(v11);
  }
  off_26B86F7A0(GLP_MALLOC_ALLOCATOR, *(void **)(a1 + 208));
  unsigned int v18 = *(void **)(a1 + 216);
  if (v18)
  {
    free(v18);
    *(void *)(a1 + 216) = 0;
  }
  uint64_t v19 = *(void *)(a1 + 88);
  if (v19)
  {
    unint64_t v20 = *(unsigned int *)(v19 + 32);
    if (v20)
    {
      uint64_t v21 = 0;
      for (unint64_t m = 0; m < v20; ++m)
      {
        uint64_t v23 = *(void *)(v19 + 40);
        int8x16_t v24 = *(uint64_t **)(v23 + v21);
        if (v24)
        {
          free(*(void **)(v23 + v21 + 8));
          glpDestroyType(&GLP_MALLOC_ALLOCATOR, v24[3]);
          free(v24);
          unint64_t v20 = *(unsigned int *)(v19 + 32);
        }
        v21 += 32;
      }
      uint64_t v19 = *(void *)(a1 + 88);
    }
    glpDestroyStringHash(v19);
  }
  uint64_t v25 = *(void *)(a1 + 96);
  if (v25)
  {
    unint64_t v26 = *(unsigned int *)(v25 + 32);
    if (v26)
    {
      uint64_t v27 = 0;
      for (unint64_t n = 0; n < v26; ++n)
      {
        uint64_t v29 = *(void *)(v25 + 40);
        char v30 = *(uint64_t **)(v29 + v27);
        if (v30)
        {
          free(*(void **)(v29 + v27 + 8));
          glpDestroyType(&GLP_MALLOC_ALLOCATOR, v30[3]);
          free(v30);
          unint64_t v26 = *(unsigned int *)(v25 + 32);
        }
        v27 += 32;
      }
      uint64_t v25 = *(void *)(a1 + 96);
    }
    glpDestroyStringHash(v25);
  }
  for (iuint64_t i = 0; ii != 5; ++ii)
  {
    uint64_t v32 = a1 + 8 * ii;
    uint64_t v33 = *(void *)(v32 + 104);
    if (v33)
    {
      unint64_t v34 = *(unsigned int *)(v33 + 32);
      if (v34)
      {
        uint64_t v35 = 0;
        for (juint64_t j = 0; jj < v34; ++jj)
        {
          uint64_t v37 = *(void *)(v33 + 40);
          unint64_t v38 = *(void **)(v37 + v35);
          if (v38)
          {
            free(*(void **)(v37 + v35 + 8));
            free(v38);
            unint64_t v34 = *(unsigned int *)(v33 + 32);
          }
          v35 += 32;
        }
        uint64_t v33 = *(void *)(v32 + 104);
      }
      glpDestroyStringHash(v33);
    }
    uint64_t v41 = *(void *)(v32 + 144);
    uint64_t v40 = (uint64_t *)(v32 + 144);
    uint64_t v39 = v41;
    if (v41)
    {
      unint64_t v42 = *(unsigned int *)(v39 + 32);
      if (v42)
      {
        uint64_t v43 = 0;
        for (kunint64_t k = 0; kk < v42; ++kk)
        {
          uint64_t v45 = *(void *)(v39 + 40);
          uint64_t v46 = *(void *)(v45 + v43);
          if (v46)
          {
            free(*(void **)(v45 + v43 + 8));
            glpDestroyType(&GLP_MALLOC_ALLOCATOR, *(void *)(v46 + 24));
            off_26B86F7A0(GLP_MALLOC_ALLOCATOR, *(void **)(v46 + 72));
            free((void *)v46);
            unint64_t v42 = *(unsigned int *)(v39 + 32);
          }
          v43 += 32;
        }
        uint64_t v39 = *v40;
      }
      glpDestroyStringHash(v39);
    }
  }
  uint64_t v47 = *(void *)(a1 + 184);
  if (v47)
  {
    unint64_t v48 = *(unsigned int *)(v47 + 32);
    if (v48)
    {
      uint64_t v49 = 0;
      for (munint64_t m = 0; mm < v48; ++mm)
      {
        uint64_t v51 = *(void *)(v47 + 40);
        unint64_t v52 = *(uint64_t **)(v51 + v49);
        if (v52)
        {
          free(*(void **)(v51 + v49 + 8));
          glpDestroyType(&GLP_MALLOC_ALLOCATOR, v52[1]);
          free(v52);
          unint64_t v48 = *(unsigned int *)(v47 + 32);
        }
        v49 += 32;
      }
      uint64_t v47 = *(void *)(a1 + 184);
    }
    glpDestroyStringHash(v47);
  }
  uint64_t v53 = *(void *)(a1 + 192);
  if (v53)
  {
    unint64_t v54 = *(unsigned int *)(v53 + 32);
    if (v54)
    {
      uint64_t v55 = 0;
      for (nunint64_t n = 0; nn < v54; ++nn)
      {
        uint64_t v57 = *(void *)(v53 + 40);
        unsigned int v58 = *(uint64_t **)(v57 + v55);
        if (v58)
        {
          free(*(void **)(v57 + v55 + 8));
          glpDestroyType(&GLP_MALLOC_ALLOCATOR, v58[1]);
          free(v58);
          unint64_t v54 = *(unsigned int *)(v53 + 32);
        }
        v55 += 32;
      }
      uint64_t v53 = *(void *)(a1 + 192);
    }
    glpDestroyStringHash(v53);
  }
  uint64_t v59 = *(void *)(a1 + 320);
  if (v59)
  {
    unint64_t v60 = *(unsigned int *)(v59 + 32);
    if (v60)
    {
      uint64_t v61 = 0;
      for (unint64_t i1 = 0; i1 < v60; ++i1)
      {
        uint64_t v63 = *(void ***)(*(void *)(v59 + 40) + v61);
        if (v63)
        {
          free(*v63);
          free(v63);
          unint64_t v60 = *(unsigned int *)(v59 + 32);
        }
        v61 += 16;
      }
      uint64_t v59 = *(void *)(a1 + 320);
    }
    glpDestroyIntHash(v59);
  }

  free((void *)a1);
}

uint64_t glpLinkerGetCodeGenType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t glpLinkedProgramGetPPStreamManager(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 8 * a2);
}

uint64_t glpLinkedProgramGetShaderBytesCode(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 8 * a2 + 40);
}

uint64_t glpLinkedProgramGetUniformHash(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t glpLinkedProgramGetBindableUniformHash(uint64_t a1)
{
  return *(void *)(a1 + 88);
}

uint64_t glpLinkedProgramGetUniformInterfaceBlockHash(uint64_t a1)
{
  return *(void *)(a1 + 96);
}

uint64_t glpLinkedProgramGetSubroutineHash(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 8 * a2 + 104);
}

uint64_t glpLinkedProgramGetSubroutineUniformHash(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 8 * a2 + 144);
}

uint64_t glpLinkedProgramGetSubroutineUniformLocationCount(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 8 * a2 + 144);
  unint64_t v3 = *(unsigned int *)(v2 + 32);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  do
  {
    uint64_t v7 = *(void *)(*(void *)(v2 + 40) + v4);
    if (v7)
    {
      unsigned int v8 = glpABIGetTypeSize(0, *(void *)(v7 + 24), 0);
      uint64_t v6 = glpTypeSizeGetSize(v8) + v6;
      unint64_t v3 = *(unsigned int *)(v2 + 32);
    }
    ++v5;
    v4 += 32;
  }
  while (v5 < v3);
  return v6;
}

uint64_t glpLinkedProgramGetAttribHash(uint64_t a1)
{
  return *(void *)(a1 + 184);
}

uint64_t glpLinkedProgramGetOutputHash(uint64_t a1)
{
  return *(void *)(a1 + 192);
}

uint64_t glpLinkedProgramGetSamplerLocations(uint64_t a1)
{
  return a1 + 200;
}

uint64_t glpLinkedProgramGetContextStateUniforms(uint64_t a1)
{
  return *(void *)(a1 + 216);
}

uint64_t glpLinkedProgramGetTransformFeedbackHash(uint64_t a1)
{
  return *(void *)(a1 + 320);
}

uint64_t glpLinkedProgramGetDefaultUniformLocationCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 224);
}

uint64_t glpLinkedProgramGetActiveOutComponents(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)(a1 + 4 * a2 + 252);
}

__n128 glpLinkedProgramGetOverrides(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a1 + 272);
  long long v3 = *(_OWORD *)(a1 + 304);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 288);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

void glpDestroyCompiledShader(void **a1)
{
  free(a1[2]);

  free(a1);
}

void glpCleanUpLinkedProgram(uint64_t a1)
{
  for (uint64_t i = 0; i != 40; i += 8)
  {
    long long v3 = *(_DWORD ***)(a1 + i);
    if (v3)
    {
      PPStreamFree(v3);
      *(void *)(a1 + i) = 0;
    }
  }
}

double glpCreateShaderByteCode()
{
  v0 = malloc_type_malloc(0x58uLL, 0x7081ABB9uLL);
  if (!v0) {
    abort();
  }
  v0[10] = 0;
  double result = 0.0;
  *((_OWORD *)v0 + 3) = 0u;
  *((_OWORD *)v0 + 4) = 0u;
  *((_OWORD *)v0 + 1) = 0u;
  *((_OWORD *)v0 + 2) = 0u;
  *(_OWORD *)v0 = 0u;
  return result;
}

void *glpGenerateCopyInOut(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v264 = a8;
  uint64_t v263 = a7;
  uint64_t v270 = a6;
  uint64_t v260 = a5;
  int v265 = a2;
  uint64_t v11 = a1;
  uint64_t v284 = a10;
  uint64_t v302 = *MEMORY[0x263EF8340];
  uint64_t SlotVars = generateSlotVars(a1, a3, "$in%u");
  int PrimitiveType = (unsigned int *)glpGetPrimitiveType(5u);
  *(void *)&v294[0] = 0;
  uint64_t v267 = a9;
  CopyFunctiounint64_t n = makeCopyFunction(v11, a9, "$copy_in", 0x2CF8B77300000008, (uint64_t *)v294);
  int v13 = *(_DWORD *)(a4 + 32);
  uint64_t v285 = v11;
  if (v13)
  {
    unint64_t v14 = 0;
    uint64_t v262 = a4;
    do
    {
      uint64_t v15 = *(void *)(a4 + 40);
      uint64_t v16 = *(void *)(v15 + 32 * v14);
      if (v16)
      {
        uint64_t v17 = v15 + 32 * v14;
        uint64_t v19 = *(void *)(v17 + 8);
        uint64_t v18 = *(void *)(v17 + 16);
        uint64_t v278 = v19;
        int v277 = (uint64_t *)v18;
        uint64_t ElementType = **(unsigned int ***)v16;
        if (glpTypeGetKind(ElementType))
        {
          LODWORD(v276) = 0;
        }
        else
        {
          unsigned int v21 = glpPrimitiveTypeGetPrimitiveType((uint64_t)ElementType);
          LODWORD(v276) = glpPrimitiveTypeGetCategory(v21) != 3;
        }
        if (glpTypeGetKind(ElementType) == 3)
        {
          LODWORD(v269) = glpBankTypeGetElementCount((uint64_t)ElementType);
          uint64_t ElementType = (unsigned int *)glpBankTypeGetElementType((uint64_t)ElementType);
        }
        else
        {
          LODWORD(v269) = 0;
        }
        unsigned int v22 = glpABIGetTypeSize(0, (uint64_t)ElementType, 0);
        unint64_t Size = glpTypeSizeGetSize(v22);
        int8x16_t v24 = (_DWORD *)((uint64_t (*)(void, unint64_t, const char *))v11[1])(*v11, 4 * Size, "Array of vec4 types for Copy In (why not stack alloc'd?)");
        uint64_t v25 = (unsigned char *)((uint64_t (*)(void, unint64_t, const char *))v11[1])(*v11, Size, "Array of flags for Copy In (why not stack alloc'd?)");
        uint64_t v283 = v24;
        glpTypeGetAppleVec4Types(ElementType, v24, 1, 0, 0, v25, 0, 0, 0);
        if (*(_DWORD *)(v16 + 8))
        {
          uint64_t v266 = v14;
          uint64_t v31 = 0;
          int v32 = v269;
          if (v269 <= 1) {
            int v32 = 1;
          }
          LODWORD(v268) = v32;
          unint64_t v272 = Size;
          do
          {
            if (v269)
            {
              MutableValue = glpMakeMutableValue((uint64_t)v11, PrimitiveType, 1, v26, v27, v28, v29, v30, v31);
              uint64_t v34 = glpTypedValueHashCache(v284, PrimitiveType, MutableValue, (uint64_t)MutableValue);
              v295.n128_u64[0] = (unint64_t)"-1";
              v295.n128_u64[1] = 0xEDA00000002;
              uint64_t v296 = 0xFFFFFFFFLL;
              glpMakeConstantNode((uint64_t)v11, &v295, (uint64_t)PrimitiveType, v34);
              uint64_t v36 = v35;
              glpASTNodeSetSaType(v35, (uint64_t)PrimitiveType);
              v295.n128_u64[0] = (unint64_t)"-1";
              v295.n128_u64[1] = 0xEDA00000002;
              uint64_t v296 = 0xFFFFFFFFLL;
              uint64_t VRLFunctionFragment = glpMakeVRLFunctionFragment(v11, &v295, v36);
              glpBlockNodeAddStatement(v11, *(uint64_t *)&v294[0], VRLFunctionFragment);
              unint64_t v38 = glpGetPrimitiveType(0);
              glpASTNodeSetSaType(VRLFunctionFragment, (uint64_t)v38);
            }
            unint64_t v271 = v31;
            if (Size)
            {
              uint64_t v39 = 0;
              LODWORD(v281) = 0;
              LODWORD(v273) = v271 * Size;
              do
              {
                if (BitSetGetEquals(*(void *)(*(void *)v16 + 120), v39))
                {
                  int ScalarCount = glpPrimitiveTypeGetScalarCount(*(unsigned int *)&v283[4 * v39]);
                  int v41 = (v25[v39] >> 1) & 2;
                  LODWORD(v282) = ScalarCount;
                  int v42 = ScalarCount + v41;
                  uint64_t v43 = v39 + 1;
                  if (v39 + 1 < Size && (v25[v43] & 4) != 0) {
                    v42 += glpPrimitiveTypeGetScalarCount(*(unsigned int *)&v283[4 * v43]);
                  }
                  int ScalarType = glpPrimitiveTypeGetScalarType(*(unsigned int *)&v283[4 * v39]);
                  LODWORD(v280) = glpGetVectorType(ScalarType, v42);
                  if (v282)
                  {
                    uint64_t v274 = v39 + 1;
                    int v45 = 0;
                    LODWORD(v279) = v273 + v39;
                    do
                    {
                      uint64_t v46 = (v281 + v45);
                      uint64_t v47 = glpIntHashGet(SlotVars, *(_DWORD *)(v16 + 8 * v46 + 16));
                      uint64_t Extra = (uint64_t *)glpVariableDeclarationNodeGetExtra(v47);
                      uint64_t v292 = 0;
                      *(void *)&v293[0] = 0;
                      v286.n128_u64[0] = 0;
                      uint64_t v291 = 0;
                      uint64_t v290 = 0;
                      unint64_t v54 = glpMakeMutableValue((uint64_t)v11, PrimitiveType, 1, v49, v50, v51, v52, v53, v279 - ((v25[v39] >> 2) & 1));
                      uint64_t v55 = glpTypedValueHashCache(v284, PrimitiveType, v54, (uint64_t)v54);
                      uint64_t v56 = *(unsigned int ***)v16;
                      v295.n128_u64[0] = (unint64_t)"-1";
                      v295.n128_u64[1] = 0xEDA00000002;
                      uint64_t v296 = 0xFFFFFFFFLL;
                      uint64_t CopyInAssignFragment = glpMakeCopyInAssignFragment((uint64_t)v11, &v295, (uint64_t *)v293, v278, (uint64_t)v277, (uint64_t)v56, (uint64_t *)&v286, &v290, v55, &v292, Extra[2], Extra[3], (uint64_t)Extra, &v291);
                      unsigned int v58 = glpPrimitiveTypeGetScalarType(*(unsigned int *)&v283[4 * v39]);
                      uint64_t v59 = glpGetPrimitiveType(v58);
                      glpASTNodeSetSaType(*(uint64_t *)&v293[0], (uint64_t)v59);
                      glpASTNodeSetSaFlags(*(uint64_t *)&v293[0], Extra[6] & 0x1F);
                      glpOffsetNodeSetPreSwizzlePrimitiveType(v286.n128_i64[0], (int)v280);
                      glpASTNodeSetSaType(v292, (uint64_t)v59);
                      glpASTNodeSetSaFlags(v292, Extra[6] & 0x1F);
                      uint64_t v60 = v291;
                      int v61 = glpPrimitiveTypeGetPrimitiveType(*Extra);
                      glpOffsetNodeSetPreSwizzlePrimitiveType(v60, v61);
                      glpASTNodeSetSaType(v290, (uint64_t)PrimitiveType);
                      uint64_t v62 = (uint64_t)v59;
                      uint64_t v11 = v285;
                      glpASTNodeSetSaType(CopyInAssignFragment, v62);
                      glpASTNodeSetSaFlags(CopyInAssignFragment, Extra[6] & 0x1F);
                      uint64_t v63 = v286.n128_u64[0];
                      glpMakeOffsetObject((uint64_t)v285);
                      uint64_t v65 = glpOffsetNodeSetExtra(v63, v64);
                      if (v276) {
                        uint64_t v65 = glpOffsetNodeSetOffsetExpr(v286.n128_i64[0], 0);
                      }
                      uint64_t v73 = v286.n128_u64[0];
                      int Swizzle_1 = glpMakeSwizzle_1(v65, v66, v67, v68, v69, v70, v71, v72, v45 + ((v25[v39] >> 1) & 2u));
                      glpOffsetNodeSetSwizzle(v73, Swizzle_1);
                      uint64_t v75 = v291;
                      glpMakeOffsetObject((uint64_t)v285);
                      uint64_t v77 = glpOffsetNodeSetExtra(v75, v76);
                      uint64_t v78 = v291;
                      int v86 = glpMakeSwizzle_1(v77, v79, v80, v81, v82, v83, v84, v85, *(_DWORD *)(v16 + 8 * v46 + 20));
                      glpOffsetNodeSetSwizzle(v78, v86);
                      glpBlockNodeAddStatement(v285, *(uint64_t *)&v294[0], CopyInAssignFragment);
                      ++v45;
                    }
                    while (v282 != v45);
                    LODWORD(v281) = v281 + v45;
                    unint64_t Size = v272;
                    uint64_t v43 = v274;
                  }
                }
                else
                {
                  uint64_t v43 = v39 + 1;
                }
                uint64_t v39 = v43;
              }
              while (v43 != Size);
            }
            uint64_t v31 = (v271 + 1);
          }
          while (v31 != v268);
          ((void (*)(void, unsigned char *))v11[3])(*v11, v283);
          a4 = v262;
          unint64_t v14 = v266;
        }
      }
      ++v14;
    }
    while (v14 < *(unsigned int *)(a4 + 32));
  }
  unint64_t v87 = *(unsigned int *)(SlotVars + 32);
  int v88 = v265;
  uint64_t v89 = v267;
  if (v87)
  {
    uint64_t v90 = 0;
    for (unint64_t i = 0; i < v87; ++i)
    {
      uint64_t v92 = *(void *)(*(void *)(SlotVars + 40) + v90);
      if (v92)
      {
        glpTopLevelNodeInsertDef(v11, v267, v92, 0);
        unint64_t v87 = *(unsigned int *)(SlotVars + 32);
      }
      v90 += 16;
    }
  }
  glpFixInterpolateAt(v11, v267, a4, SlotVars);
  if (v265 == 1) {
    uint64_t v93 = 0;
  }
  else {
    uint64_t v93 = generateSlotVars(v11, v260, "$out%u");
  }
  uint64_t v94 = 0;
  memset(v294, 0, sizeof(v294));
  memset(v293, 0, sizeof(v293));
  uint64_t v273 = v93;
  do
  {
    uint64_t v282 = (unsigned int *)glpGetPrimitiveType(5u);
    v295.n128_u64[0] = (unint64_t)"$copy_out_0";
    v295.n128_u64[1] = 0x825A57630000000BLL;
    uint64_t v296 = (uint64_t)"$copy_out_1";
    unint64_t v297 = 0xB37B1E010000000BLL;
    uint64_t v298 = "$copy_out_2";
    unint64_t v299 = 0xF3BAF9AE0000000BLL;
    uint64_t v300 = "$copy_out_3";
    unint64_t v301 = 0xDFDE69E90000000BLL;
    *((void *)v293 + v94) = 0;
    uint64_t v268 = v94;
    unsigned int v95 = &v295 + v94;
    int v96 = (const char *)v95->n128_u64[0];
    uint64_t v97 = v95->n128_i64[1];
    uint64_t v276 = (uint64_t *)v293 + v94;
    uint64_t v266 = makeCopyFunction(v11, v89, v96, v97, v276);
    if (v88 != 1 && !v268)
    {
      uint64_t v98 = v270;
      if (*(_DWORD *)(v270 + 32))
      {
        unint64_t v99 = 0;
        do
        {
          uint64_t v100 = *(void *)(v98 + 40);
          uint64_t v101 = *(unsigned int ****)(v100 + 32 * v99);
          if (v101)
          {
            uint64_t v102 = v100 + 32 * v99;
            uint64_t v104 = *(void *)(v102 + 8);
            uint64_t v103 = *(void *)(v102 + 16);
            uint64_t SlotVars = v104;
            uint64_t v274 = v103;
            unint64_t v105 = **v101;
            unsigned int v106 = glpABIGetTypeSize(0, (uint64_t)v105, 0);
            unsigned int v107 = glpTypeSizeGetSize(v106);
            LODWORD(v277) = 0;
            if (!glpTypeGetKind(v105))
            {
              unsigned int v108 = glpPrimitiveTypeGetPrimitiveType((uint64_t)v105);
              LODWORD(v277) = glpPrimitiveTypeGetCategory(v108) != 3;
            }
            unint64_t v109 = v107;
            int v110 = (_DWORD *)((uint64_t (*)(void, uint64_t, const char *))v11[1])(*v11, 4 * v107, "Array of vec4 types for Copy Out (why not stack alloc'd?)");
            BOOL v111 = (unsigned char *)((uint64_t (*)(void, void, const char *))v11[1])(*v11, v107, "Array of flags for Copy Out (why not stack alloc'd?)");
            uint64_t v281 = v110;
            uint64_t v283 = v111;
            glpTypeGetAppleVec4Types(v105, v110, 1, 0, 0, v111, 0, 0, 0);
            if (*((_DWORD *)v101 + 2))
            {
              unint64_t v269 = v99;
              int v112 = v283;
              if (v107)
              {
                unint64_t v113 = 0;
                LODWORD(v279) = 0;
                unint64_t v271 = v107;
                do
                {
                  if (BitSetGetEquals((uint64_t)(*v101)[15], v113))
                  {
                    int v114 = glpPrimitiveTypeGetScalarCount(v281[v113]);
                    int v115 = (v112[v113] >> 1) & 2;
                    LODWORD(v280) = v114;
                    int v116 = v114 + v115;
                    unint64_t v117 = v113 + 1;
                    if (v113 + 1 < v109 && (v112[v117] & 4) != 0) {
                      v116 += glpPrimitiveTypeGetScalarCount(v281[v117]);
                    }
                    int v118 = glpPrimitiveTypeGetScalarType(v281[v113]);
                    LODWORD(v278) = glpGetVectorType(v118, v116);
                    if (v280)
                    {
                      unint64_t v272 = v113 + 1;
                      int v119 = 0;
                      do
                      {
                        uint64_t v120 = (v279 + v119);
                        uint64_t v121 = glpIntHashGet(v93, v101[v120 + 2]);
                        unint64_t v122 = (uint64_t *)glpVariableDeclarationNodeGetExtra(v121);
                        uint64_t v291 = 0;
                        uint64_t v292 = 0;
                        uint64_t v290 = 0;
                        uint64_t v289 = 0;
                        uint64_t v288 = 0;
                        __int32 v128 = glpMakeMutableValue((uint64_t)v11, v282, 1, v123, v124, v125, v126, v127, v113 - ((v112[v113] >> 2) & 1));
                        uint64_t v129 = glpTypedValueHashCache(v284, v282, v128, (uint64_t)v128);
                        uint64_t v130 = *v101;
                        v286.n128_u64[0] = (unint64_t)"-1";
                        v286.n128_u64[1] = 0xEDA00000002;
                        uint64_t v287 = 0xFFFFFFFFLL;
                        uint64_t CopyOutAssignFragment = glpMakeCopyOutAssignFragment((uint64_t)v11, &v286, &v292, v122[2], v122[3], (uint64_t)v122, &v291, &v290, SlotVars, v274, (uint64_t)v130, &v289, &v288, v129);
                        unsigned int v132 = glpPrimitiveTypeGetScalarType(v281[v113]);
                        uint64_t v133 = glpGetPrimitiveType(v132);
                        glpASTNodeSetSaType(v292, (uint64_t)v133);
                        glpASTNodeSetSaFlags(v292, v122[6] & 0x1F);
                        uint64_t v134 = v291;
                        int v135 = glpPrimitiveTypeGetPrimitiveType(*v122);
                        glpOffsetNodeSetPreSwizzlePrimitiveType(v134, v135);
                        glpASTNodeSetSaType(v290, (uint64_t)v133);
                        uint64_t v136 = v290;
                        if (glpTypeGetKind(**v101) == 1) {
                          uint64_t v137 = (unint64_t)v112[v113] >> 3;
                        }
                        else {
                          uint64_t v137 = (unint64_t)(*v101)[6] & 0x1F;
                        }
                        glpASTNodeSetSaFlags(v136, v137);
                        glpOffsetNodeSetPreSwizzlePrimitiveType(v289, v278);
                        glpASTNodeSetSaType(CopyOutAssignFragment, (uint64_t)v133);
                        glpASTNodeSetSaFlags(CopyOutAssignFragment, v122[6] & 0x1F);
                        glpASTNodeSetSaType(v288, (uint64_t)v282);
                        uint64_t v138 = v291;
                        glpMakeOffsetObject((uint64_t)v285);
                        uint64_t v140 = glpOffsetNodeSetExtra(v138, v139);
                        uint64_t v141 = v291;
                        int v149 = glpMakeSwizzle_1(v140, v142, v143, v144, v145, v146, v147, v148, HIDWORD(v101[v120 + 2]));
                        glpOffsetNodeSetSwizzle(v141, v149);
                        uint64_t v150 = v289;
                        glpMakeOffsetObject((uint64_t)v285);
                        uint64_t v152 = glpOffsetNodeSetExtra(v150, v151);
                        if (v277) {
                          uint64_t v152 = glpOffsetNodeSetOffsetExpr(v289, 0);
                        }
                        uint64_t v160 = v289;
                        int v161 = glpMakeSwizzle_1(v152, v153, v154, v155, v156, v157, v158, v159, v119 + ((v283[v113] >> 1) & 2u));
                        glpOffsetNodeSetSwizzle(v160, v161);
                        uint64_t v162 = v122[6] & 0x1F;
                        if (((unint64_t)(*v101)[6] & 0x1F) != v162)
                        {
                          v286.n128_u64[0] = (unint64_t)"-1";
                          v286.n128_u64[1] = 0xEDA00000002;
                          uint64_t v287 = 0xFFFFFFFFLL;
                          uint64_t TypeConversionNode = glpMakeTypeConversionNode((uint64_t)v285, &v286, (uint64_t)v133, v162);
                          glpUnaryOperatorNodeSetExpr(TypeConversionNode, v290);
                          glpASTNodeSetSaType(TypeConversionNode, (uint64_t)v133);
                          uint64_t SaFlags = glpASTNodeGetSaFlags(v290);
                          glpASTNodeSetSaFlags(TypeConversionNode, SaFlags & 0xFFFFFFFFFFFFFFE0 | v162);
                          glpBinaryOperatorNodeSetRhs(CopyOutAssignFragment, TypeConversionNode);
                        }
                        uint64_t v11 = v285;
                        glpBlockNodeAddStatement(v285, *v276, CopyOutAssignFragment);
                        ++v119;
                        uint64_t v93 = v273;
                        int v112 = v283;
                      }
                      while (v280 != v119);
                      LODWORD(v279) = v279 + v119;
                      unint64_t v109 = v271;
                      unint64_t v117 = v272;
                    }
                  }
                  else
                  {
                    unint64_t v117 = v113 + 1;
                  }
                  unint64_t v113 = v117;
                }
                while (v117 != v109);
              }
              ((void (*)(void, _DWORD *))v11[3])(*v11, v281);
              unint64_t v99 = v269;
            }
          }
          ++v99;
          uint64_t v98 = v270;
        }
        while (v99 < *(unsigned int *)(v270 + 32));
      }
      unint64_t v165 = *(unsigned int *)(v93 + 32);
      int v88 = v265;
      if (v165)
      {
        uint64_t v166 = 0;
        for (unint64_t j = 0; j < v165; ++j)
        {
          uint64_t v168 = *(void *)(*(void *)(v93 + 40) + v166);
          if (v168)
          {
            v286.n128_u64[0] = (unint64_t)"-1";
            v286.n128_u64[1] = 0xEDA00000002;
            uint64_t v287 = 0xFFFFFFFFLL;
            glpMakeWriteOutputNode((uint64_t)v11, &v286);
            uint64_t v170 = v169;
            uint64_t v171 = glpVariableDeclarationNodeGetExtra(v168);
            glpWriteOutputNodeSetExtra(v170, v171);
            glpBlockNodeAddStatement(v11, *v276, v170);
            glpTopLevelNodeInsertDef(v11, v267, v168, 0);
            unint64_t v165 = *(unsigned int *)(v93 + 32);
          }
          v166 += 16;
        }
      }
    }
    uint64_t v172 = v268;
    *((void *)v294 + v268) = v266;
    uint64_t v94 = v172 + 1;
    uint64_t v89 = v267;
  }
  while (v94 != 4);
  uint64_t v173 = v263;
  if (v263 && v264)
  {
    int v174 = (unsigned int *)glpGetPrimitiveType(5u);
    int v277 = &v260;
    MEMORY[0x270FA5388](v174);
    int v176 = (char *)&v260 - ((v175 + 15) & 0xFFFFFFFF0);
    if (v175 >= 0x200) {
      size_t v177 = 512;
    }
    else {
      size_t v177 = v175;
    }
    bzero((char *)&v260 - ((v175 + 15) & 0xFFFFFFFF0), v177);
    if (*(_DWORD *)(v173 + 4))
    {
      unint64_t v178 = 0;
      do
      {
        uint64_t v179 = *(void *)(v173 + 8);
        int v180 = v176;
        uint64_t v181 = v89;
        int v182 = *(uint64_t **)(v179 + 8 * v178);
        StringBuffer = glpMakeStringBuffer(v11);
        glpStringBufferAppendFormat(StringBuffer, "TFBuffer%u", v184, v185, v186, v187, v188, v189, v178);
        uint64_t String = glpStringBufferGetString((uint64_t)StringBuffer);
        uint64_t v192 = v191;
        uint64_t v193 = glpMakeStringBuffer(v285);
        glpStringBufferAppendCString(v193, "<TFBuffer ");
        glpStringBufferAppendString(v193, String, v192);
        glpStringBufferAppendCString(v193, ">");
        uint64_t v194 = glpStringBufferGetString((uint64_t)v193);
        uint64_t v196 = v195;
        v295.n128_u64[0] = (unint64_t)"-1";
        v295.n128_u64[1] = 0xEDA00000002;
        uint64_t v296 = 0xFFFFFFFFLL;
        uint64_t CopyVarDeclFragment = glpMakeCopyVarDeclFragment((uint64_t)v285, &v295, String, v192);
        uint64_t v198 = *v182;
        uint64_t v89 = v181;
        int v176 = v180;
        uint64_t v173 = v263;
        glpMakeVariableObject((uint64_t)v285, (uint64_t)v174, v198, 0x80000000, String, v192, v194, v196, 0, 0, 0);
        uint64_t v200 = v199;
        unsigned int v201 = glpABIGetTypeSize(0, (uint64_t)v174, 0);
        *(_DWORD *)(v200 + 128) = glpTypeSizeGetSize(v201);
        glpASTNodeSetSaType(CopyVarDeclFragment, (uint64_t)v174);
        glpASTNodeSetSaFlags(CopyVarDeclFragment, 0x80000000);
        glpVariableDeclarationNodeSetExtra(CopyVarDeclFragment, v200);
        *(void *)&v176[8 * v178] = v200;
        uint64_t v11 = v285;
        glpTopLevelNodeInsertDef(v285, v89, CopyVarDeclFragment, 0);
        ++v178;
      }
      while (v178 < *(unsigned int *)(v173 + 4));
    }
    uint64_t v202 = v264;
    if (*(_DWORD *)(v264 + 4))
    {
      uint64_t v203 = 0;
      int v279 = v176;
      do
      {
        uint64_t v204 = *(void *)(v202 + 8);
        uint64_t v278 = v203;
        uint64_t v205 = *(void *)(v204 + 8 * v203);
        unsigned int v206 = glpABIGetTypeSize(0, **(void **)v205, 0);
        int v207 = (unsigned int *)glpTypeSizeGetSize(v206);
        int Kind = glpTypeGetKind(**(unsigned int ***)v205);
        LODWORD(v283) = 0;
        if (!Kind)
        {
          unsigned int v209 = glpPrimitiveTypeGetPrimitiveType(**(void **)v205);
          LODWORD(v283) = glpPrimitiveTypeGetCategory(v209) != 3;
        }
        uint64_t v210 = (_DWORD *)((uint64_t (*)(void, uint64_t, const char *))v11[1])(*v11, 4 * v207, "Primitive Types");
        double v211 = (unsigned char *)((uint64_t (*)(void, void, const char *))v11[1])(*v11, v207, "Flags");
        glpTypeGetAppleVec4Types(**(unsigned int ***)v205, v210, 1, 0, 0, v211, 0, 0, 0);
        if (*(_DWORD *)(v205 + 12))
        {
          unsigned int v212 = *(_DWORD *)(v205 + 8);
          uint64_t v213 = *(unsigned int *)(v205 + 20);
          uint64_t v282 = v207;
          uint64_t v280 = v211;
          uint64_t v281 = v210;
          do
          {
            int v214 = glpPrimitiveTypeGetScalarCount(v210[v212]);
            int v215 = (v211[v212] >> 2) & 1;
            int v216 = v214 + 2 * v215;
            uint64_t v217 = v212 + 1;
            if (v217 < v207 && (v211[v217] & 4) != 0)
            {
              ++v215;
              v216 += glpPrimitiveTypeGetScalarCount(v210[v217]);
            }
            int v218 = glpPrimitiveTypeGetScalarType(v210[v212]);
            uint64_t VectorType = glpGetVectorType(v218, v216);
            v286.n128_u64[0] = 0;
            int v220 = v285;
            int v226 = glpMakeMutableValue((uint64_t)v285, v174, 1, v221, v222, v223, v224, v225, v213);
            uint64_t v227 = v284;
            uint64_t v228 = glpTypedValueHashCache(v284, v174, v226, (uint64_t)v226);
            uint64_t v291 = 0;
            uint64_t v292 = 0;
            uint64_t v290 = 0;
            uint64_t v289 = 0;
            int v234 = glpMakeMutableValue((uint64_t)v220, v174, 1, v229, v230, v231, v232, v233, v212);
            uint64_t v235 = glpTypedValueHashCache(v227, v174, v234, (uint64_t)v234);
            uint64_t v236 = *(void *)&v279[8 * *(unsigned int *)(v205 + 16)];
            int v237 = *(uint64_t **)v205;
            v295.n128_u64[0] = (unint64_t)"-1";
            v295.n128_u64[1] = 0xEDA00000002;
            uint64_t v296 = 0xFFFFFFFFLL;
            uint64_t StoreFragment = glpMakeStoreFragment(v220, &v295, VectorType, (uint64_t *)&v286, v228, &v292, *(void *)(v236 + 16), *(void *)(v236 + 24), v236, &v291, v237[2], v237[3], (uint64_t)v237, &v290, &v289, v235);
            glpASTNodeSetSaType(v286.n128_i64[0], (uint64_t)v174);
            glpASTNodeSetSaType(v292, (uint64_t)v174);
            uint64_t v239 = v291;
            int v240 = glpGetPrimitiveType(VectorType);
            glpASTNodeSetSaType(v239, (uint64_t)v240);
            glpASTNodeSetSaFlags(v291, *(void *)(*(void *)v205 + 48));
            uint64_t v241 = v290;
            glpMakeOffsetObject((uint64_t)v220);
            glpOffsetNodeSetExtra(v241, v242);
            if (v283) {
              glpOffsetNodeSetOffsetExpr(v290, 0);
            }
            glpASTNodeSetSaType(v289, (uint64_t)v174);
            unsigned int v243 = glpGetPrimitiveType(0);
            glpASTNodeSetSaType(StoreFragment, (uint64_t)v243);
            glpBlockNodeAddStatement(v285, *((void *)v293 + *(unsigned int *)(v205 + 24)), StoreFragment);
            int v244 = glpPrimitiveTypeGetScalarCount(VectorType);
            uint64_t v213 = v213 + glpPrimitiveTypeGetBytesPerComponent(VectorType) * v244;
            unsigned int v212 = v217 + v215;
            LODWORD(v207) = v282;
            uint64_t v210 = v281;
            double v211 = v280;
          }
          while ((v217 + v215 - *(_DWORD *)(v205 + 8)) < *(_DWORD *)(v205 + 12));
        }
        uint64_t v203 = v278 + 1;
        uint64_t v202 = v264;
        uint64_t v11 = v285;
      }
      while (v278 + 1 < (unint64_t)*(unsigned int *)(v264 + 4));
    }
    int v88 = v265;
    uint64_t v89 = v267;
  }
  int DefCount = glpTopLevelNodeGetDefCount(v89);
  uint64_t Def = glpTopLevelNodeGetDef(v89, DefCount - 1);
  glpFunctionDefinitionNodeGetPrototype(Def);
  uint64_t Body = glpFunctionDefinitionNodeGetBody(Def);
  unsigned int StatementCount = glpBlockNodeGetStatementCount(Body);
  while (StatementCount)
  {
    if (glpBlockNodeGetStatement(Body, --StatementCount))
    {
      uint64_t Statement = glpBlockNodeGetStatement(Body, StatementCount);
      if (Statement)
      {
        uint64_t Expr = Statement;
        while (glpIsCommaExprNode(Expr))
        {
          int ExprCount = glpCommaExprNodeGetExprCount(Expr);
          uint64_t Expr = glpCommaExprNodeGetExpr(Expr, ExprCount - 1);
          if (!Expr) {
            goto LABEL_109;
          }
        }
        if (glpIsReturnStatementNode(Expr)) {
          glpBlockNodeSetStatement(Body, StatementCount, 0);
        }
      }
      break;
    }
  }
LABEL_109:
  v295.n128_u64[0] = (unint64_t)"-1";
  v295.n128_u64[1] = 0xEDA00000002;
  uint64_t v296 = 0xFFFFFFFFLL;
  glpMakeRawCallNode((uint64_t)v11, &v295, *(void *)(CopyFunction + 24), *(void *)(CopyFunction + 32), CopyFunction);
  uint64_t v253 = v252;
  unsigned int v254 = glpGetPrimitiveType(0);
  glpASTNodeSetSaType(v253, (uint64_t)v254);
  double result = glpBlockNodeInsertStatement(v11, Body, v253, 0);
  if (v88 != 3)
  {
    uint64_t v256 = *(void *)&v294[0];
    copyOutBeforeReturnsIn(v11, *(uint64_t *)&v294[0], Def);
    v295.n128_u64[0] = (unint64_t)"-1";
    v295.n128_u64[1] = 0xEDA00000002;
    uint64_t v296 = 0xFFFFFFFFLL;
    glpMakeRawCallNode((uint64_t)v11, &v295, *(void *)(v256 + 24), *(void *)(v256 + 32), v256);
    uint64_t v258 = v257;
    int v259 = glpGetPrimitiveType(0);
    glpASTNodeSetSaType(v258, (uint64_t)v259);
    return glpBlockNodeAddStatement(v11, Body, v258);
  }
  return result;
}

uint64_t generateSlotVars(void *a1, uint64_t a2, char *a3)
{
  uint64_t IntHash = glpMakeIntHash(a1);
  unint64_t v4 = *(unsigned int *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    uint64_t v33 = a2;
    do
    {
      uint64_t v7 = *(void *)(a2 + 40);
      uint64_t v8 = *(void *)(v7 + v5);
      if ((unint64_t)(v8 + 1) >= 2)
      {
        unsigned int v9 = *(_DWORD *)(v7 + v5 + 8);
        unsigned int v38 = v9;
        StringBuffer = glpMakeStringBuffer(a1);
        glpStringBufferAppendFormat(StringBuffer, a3, v11, v12, v13, v14, v15, v16, v9);
        uint64_t String = glpStringBufferGetString((uint64_t)StringBuffer);
        uint64_t v19 = v18;
        unint64_t v20 = glpMakeStringBuffer(a1);
        glpStringBufferAppendCString(v20, "<Compiler Temporary ");
        glpStringBufferAppendString(v20, String, v19);
        glpStringBufferAppendCString(v20, ">");
        uint64_t v37 = glpStringBufferGetString((uint64_t)v20);
        uint64_t v22 = v21;
        v39.n128_u64[0] = (unint64_t)"-1";
        v39.n128_u64[1] = 0xEDA00000002;
        uint64_t v40 = 0xFFFFFFFFLL;
        uint64_t CopyVarDeclFragment = glpMakeCopyVarDeclFragment((uint64_t)a1, &v39, String, v19);
        uint64_t v24 = *(void *)(v8 + 24);
        int PrimitiveType = glpGetPrimitiveType(*(_DWORD *)(v8 + 4));
        uint64_t v26 = *(void *)(v8 + 8) | 0x80000000;
        glpMakeVariableObject((uint64_t)a1, (uint64_t)PrimitiveType, v24, v26, String, v19, v37, v22, 0, 0, 0);
        uint64_t v28 = v27;
        unsigned int v29 = glpABIGetTypeSize(0, (uint64_t)PrimitiveType, 0);
        *(_DWORD *)(v28 + 128) = glpTypeSizeGetSize(v29);
        glpASTNodeSetSaType(CopyVarDeclFragment, (uint64_t)PrimitiveType);
        glpASTNodeSetSaFlags(CopyVarDeclFragment, v26);
        uint64_t v30 = v28;
        a2 = v33;
        glpVariableDeclarationNodeSetExtra(CopyVarDeclFragment, v30);
        glpIntHashPut(IntHash, v38, CopyVarDeclFragment, v31);
        unint64_t v4 = *(unsigned int *)(v33 + 32);
      }
      ++v6;
      v5 += 16;
    }
    while (v6 < v4);
  }
  return IntHash;
}

uint64_t makeCopyFunction(void *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t *a5)
{
  int PrimitiveType = glpGetPrimitiveType(0);
  uint64_t FunctionType = glpMakeFunctionType(a1, (uint64_t)PrimitiveType, 0, 0, 0, 0);
  if (!glpTopLevelNodeGetDefCount(a2)) {
    goto LABEL_9;
  }
  uint64_t v12 = 0;
  uint64_t Extra = 0;
  unsigned int v14 = 0;
  do
  {
    uint64_t Def = glpTopLevelNodeGetDef(a2, v14);
    if (Def)
    {
      uint64_t v16 = Def;
      if (glpIsFunctionPrototypeNode(Def))
      {
        Name = (char *)glpFunctionPrototypeNodeGetName(v16);
        if (glpStringsEqual(a3, a4, Name, v18))
        {
          uint64_t Extra = glpFunctionPrototypeNodeGetExtra(v16);
          glpTopLevelNodeSetDef(a2, v14, 0);
          uint64_t v12 = v16;
        }
      }
    }
    ++v14;
  }
  while (v14 < glpTopLevelNodeGetDefCount(a2));
  if (!v12)
  {
LABEL_9:
    uint64_t v19 = glpAggregateTypeMangleName(FunctionType, (uint64_t)a3, a4, a1);
    glpMakeFunctionObject((uint64_t)a1, FunctionType, 139264, (uint64_t)a3, a4, v19, v20);
    uint64_t Extra = v21;
    v25.n128_u64[0] = (unint64_t)"-1";
    v25.n128_u64[1] = 0xEDA00000002;
    uint64_t v26 = 0xFFFFFFFFLL;
    glpMakeFunctionPrototypeNode((uint64_t)a1, &v25, (uint64_t)a3, a4);
    uint64_t v12 = v22;
    glpASTNodeSetSaType(v22, FunctionType);
    glpFunctionPrototypeNodeSetExtra(v12, Extra);
    glpFunctionPrototypeNodeSetReturnOutParam(v12, 0);
  }
  v25.n128_u64[0] = (unint64_t)"-1";
  v25.n128_u64[1] = 0xEDA00000002;
  uint64_t v26 = 0xFFFFFFFFLL;
  uint64_t CopyFunctionDefinitionFragment = glpMakeCopyFunctionDefinitionFragment((uint64_t)a1, &v25, v12, a5);
  glpTopLevelNodeInsertDef(a1, a2, CopyFunctionDefinitionFragment, 0);
  return Extra;
}

uint64_t glpMakeSwizzle_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  return (8 * a9) | 1u;
}

uint64_t copyOutBeforeReturnsIn(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t MainReturnFragment = a3;
  if (a3)
  {
    if (glpIsReturnStatementNode(a3))
    {
      uint64_t v14 = 0;
      v12.n128_u64[0] = (unint64_t)"-1";
      v12.n128_u64[1] = 0xEDA00000002;
      uint64_t v13 = 0xFFFFFFFFLL;
      uint64_t MainReturnFragment = glpMakeMainReturnFragment(a1, &v12, &v14, *(void *)(a2 + 24), *(void *)(a2 + 32), a2);
      uint64_t v6 = v14;
      int PrimitiveType = glpGetPrimitiveType(0);
      glpASTNodeSetSaType(v6, (uint64_t)PrimitiveType);
    }
    else if (glpASTNodeGetChildCount(MainReturnFragment))
    {
      unsigned int v8 = 0;
      do
      {
        uint64_t Child = glpASTNodeGetChild(MainReturnFragment, v8);
        uint64_t v10 = copyOutBeforeReturnsIn(a1, a2, Child);
        glpASTNodeSetChild(MainReturnFragment, v8++, v10);
      }
      while (v8 < glpASTNodeGetChildCount(MainReturnFragment));
    }
  }
  return MainReturnFragment;
}

uint64_t glpIsLegalStageCombination(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  int v6 = *(_DWORD *)(a1 + 296);
  if (!a2 && a5 && !v6)
  {
    InfoLog = (uint64_t **)glpLinkerGetInfoLog(a1);
    uint64_t v17 = "-1";
    uint64_t v18 = 0xEDA00000002;
    uint64_t v19 = 0xFFFFFFFFLL;
    __n128 v12 = "Can't have a geometry shader without a vertex shader";
LABEL_27:
    glpLogMessage(InfoLog, 0, (uint64_t)&v17, v12, v8, v9, v10, v11, v16);
    return 0;
  }
  if (!a2 && a4 && !v6)
  {
    InfoLog = (uint64_t **)glpLinkerGetInfoLog(a1);
    uint64_t v17 = "-1";
    uint64_t v18 = 0xEDA00000002;
    uint64_t v19 = 0xFFFFFFFFLL;
    __n128 v12 = "Can't have a tessellation evaluation shader without a vertex shader";
    goto LABEL_27;
  }
  if (a3) {
    BOOL v13 = v6 == 0;
  }
  else {
    BOOL v13 = 0;
  }
  char v14 = !v13;
  if (!a2 && (v14 & 1) == 0)
  {
    InfoLog = (uint64_t **)glpLinkerGetInfoLog(a1);
    uint64_t v17 = "-1";
    uint64_t v18 = 0xEDA00000002;
    uint64_t v19 = 0xFFFFFFFFLL;
    __n128 v12 = "Can't have a tessellation control shader without a vertex shader";
    goto LABEL_27;
  }
  if (a4) {
    char v14 = 1;
  }
  if ((v14 & 1) == 0)
  {
    InfoLog = (uint64_t **)glpLinkerGetInfoLog(a1);
    uint64_t v17 = "-1";
    uint64_t v18 = 0xEDA00000002;
    uint64_t v19 = 0xFFFFFFFFLL;
    __n128 v12 = "Can't have a tessellation control shader without a tessellation evaluation shader";
    goto LABEL_27;
  }
  if ((!a2 || !a6) && !v6 && (*(_DWORD *)(a1 + 60) - 3) <= 1)
  {
    InfoLog = (uint64_t **)glpLinkerGetInfoLog(a1);
    uint64_t v17 = "-1";
    uint64_t v18 = 0xEDA00000002;
    uint64_t v19 = 0xFFFFFFFFLL;
    __n128 v12 = "OpenGL ES requires exactly one vertex and one fragment shader to validly link.";
    goto LABEL_27;
  }
  if (!(a6 | a2) && (*(_DWORD *)(a1 + 60) - 3) <= 1)
  {
    InfoLog = (uint64_t **)glpLinkerGetInfoLog(a1);
    uint64_t v17 = "-1";
    uint64_t v18 = 0xEDA00000002;
    uint64_t v19 = 0xFFFFFFFFLL;
    __n128 v12 = "Must have at least one shader stage in a program";
    goto LABEL_27;
  }
  return 1;
}

uint64_t glpMergeUniforms(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 32))
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v8 = 1;
    while (1)
    {
      uint64_t v9 = *(void *)(a3 + 40);
      uint64_t v10 = *(void *)(v9 + v6);
      if (v10)
      {
        uint64_t v11 = v9 + v6;
        __n128 v12 = *(const char **)(v11 + 8);
        uint64_t v13 = *(void *)(v11 + 16);
        char v14 = (uint64_t *)glpStringHashGet(a2, v12, v13);
        if (v14)
        {
          char v16 = v14;
          if (!glpTypesEqual(*(unsigned int **)v10, *v14))
          {
            int v25 = *(_DWORD *)(v10 + 40);
            uint64_t v27 = "-1";
            uint64_t v28 = 0xEDA00000002;
            uint64_t v29 = 0xFFFFFFFFLL;
            glpLogMessage(a1, 0, (uint64_t)&v27, "Uniform type mismatch '%.*s'", v17, v18, v19, v20, v25);
            goto LABEL_14;
          }
          uint64_t v21 = *(char **)(v10 + 72);
          if (v21)
          {
            uint64_t v22 = (char *)v16[9];
            if (v22)
            {
              if (glpCompareValues(v21, *(unsigned int **)v10, v22))
              {
                int v23 = *(_DWORD *)(v10 + 40);
                uint64_t v27 = "-1";
                uint64_t v28 = 0xEDA00000002;
                uint64_t v29 = 0xFFFFFFFFLL;
                glpLogMessage(a1, 0, (uint64_t)&v27, "Uniform initializer mismatch '%.*s'", v17, v18, v19, v20, v23);
LABEL_14:
                uint64_t v8 = 0;
                goto LABEL_15;
              }
            }
          }
          if (((*((_DWORD *)v16 + 12) ^ *(_DWORD *)(v10 + 48)) & 0x1FLL) != 0)
          {
            int v24 = *(_DWORD *)(v10 + 40);
            uint64_t v27 = "-1";
            uint64_t v28 = 0xEDA00000002;
            uint64_t v29 = 0xFFFFFFFFLL;
            glpLogMessage(a1, 0, (uint64_t)&v27, "Uniform precision mismatch '%.*s'", v17, v18, v19, v20, v24);
            goto LABEL_14;
          }
        }
        glpStringHashPut(a2, v12, v13, v10, v15);
      }
LABEL_15:
      ++v7;
      v6 += 32;
      if (v7 >= *(unsigned int *)(a3 + 32)) {
        return v8;
      }
    }
  }
  return 1;
}

uint64_t glpMergeInterfaceBlocks(uint64_t **a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5)
{
  if (!*(_DWORD *)(a4 + 32)) {
    return 1;
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  uint64_t v10 = 1;
  do
  {
    uint64_t v11 = *(void *)(a4 + 40);
    uint64_t v12 = *(void *)(v11 + v8);
    if (v12)
    {
      uint64_t v13 = v11 + v8;
      double v15 = *(const char **)(v13 + 8);
      uint64_t v14 = *(void *)(v13 + 16);
      uint64_t v16 = glpStringHashGet(a3, v15, v14);
      if (!v16
        || ((*(void *)(**(void **)(v16 + 72) + 48) ^ *(void *)(**(void **)(v12 + 72) + 48)) & 0x160000000) != 0)
      {
        goto LABEL_9;
      }
      uint64_t ElementType = *(void *)(v16 + 64);
      if (a5) {
        uint64_t ElementType = glpArrayTypeGetElementType(*(void *)(v16 + 64));
      }
      if (glpTypesEqual(*(unsigned int **)(v12 + 64), ElementType))
      {
LABEL_9:
        glpStringHashPut(a3, v15, v14, v12, v17);
      }
      else
      {
        glpLanguageToString(a2);
        v26[0] = "-1";
        v26[1] = 0xEDA00000002;
        v26[2] = 0xFFFFFFFFLL;
        glpLogMessage(a1, 0, (uint64_t)v26, "Multiple declarations of interface block '%.*s' in %s shader do not match", v19, v20, v21, v22, v14);
        uint64_t v10 = 0;
      }
    }
    ++v9;
    v8 += 32;
  }
  while (v9 < *(unsigned int *)(a4 + 32));
  return v10;
}

uint64_t glpMakeVertexInputBindings(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v9 = a1;
  Allocator = (void *)glpLinkerGetAllocator(a1);
  unsigned int v201 = a3;
  *a3 = glpMakeStringHash(Allocator);
  uint64_t v11 = (void *)glpLinkerGetAllocator(v9);
  *a4 = glpMakeStringHash(v11);
  uint64_t v12 = (void *)glpLinkerGetAllocator(v9);
  *a5 = glpMakeIntHash(v12);
  LODWORD(v13) = *(_DWORD *)(a2 + 32);
  uint64_t v227 = a5;
  uint64_t v228 = v9;
  uint64_t v202 = a4;
  uint64_t v194 = a2;
  if (v13)
  {
    unint64_t v14 = 0;
    unsigned int v229 = 0;
    unsigned int v207 = 1;
    while (1)
    {
      uint64_t v15 = *(void *)(a2 + 40);
      uint64_t v16 = *(uint64_t **)(v15 + 32 * v14);
      if (v16)
      {
        uint64_t v17 = v15 + 32 * v14;
        uint64_t v18 = *(const char **)(v17 + 8);
        uint64_t v19 = *(void *)(v17 + 16);
        uint64_t v20 = (uint64_t *)v16[1];
        if (v20)
        {
          uint64_t v21 = glpLayoutObjectFind(v20, 26);
          if (!v19) {
            goto LABEL_12;
          }
        }
        else
        {
          uint64_t v21 = 0;
          if (!v19) {
            goto LABEL_12;
          }
        }
        if (*v18 != 36 || v19 >= 9 && !strncmp("$ib$", v18, 4uLL) && !strncmp("$gl_", v18 + 5, 4uLL))
        {
LABEL_12:
          if (v21)
          {
            uint64_t v22 = (uint64_t *)v16[1];
            uint64_t v212 = v19;
            int __s2 = (char *)v18;
            int v208 = v21;
            if (v22) {
              uint64_t v197 = glpLayoutObjectFind(v22, 79);
            }
            else {
              uint64_t v197 = 0;
            }
            *(void *)uint64_t v203 = v14;
            unsigned int v23 = glpABIGetTypeSize(0, *v16, 0);
            int Size = glpTypeSizeGetSize(v23);
            int v25 = (_DWORD *)glpLinkerPoolAlloc(v9);
            uint64_t v223 = (unsigned char *)glpLinkerPoolAlloc(v9);
            glpTypeGetAppleVec4Types((unsigned int *)*v16, v25, 1, 0, 0, v223, 0, 0, 0);
            uint64_t v26 = (void *)glpLinkerPoolAlloc(v9);
            void *v26 = v16;
            v26[1] = 0;
            glpStringHashPut(*v202, __s2, v19, (uint64_t)v26, v27);
            if (Size)
            {
              uint64_t v28 = 0;
              int v29 = *((_DWORD *)v208 + 4) - 1;
              do
              {
                int v30 = (v223[v28] >> 2) & 1;
                if (!v30) {
                  ++v29;
                }
                if (glpIntHashGet(*a5, v29 | (v30 << 16)))
                {
                  InfoLog = (uint64_t **)glpLinkerGetInfoLog(v9);
                  uint64_t v230 = "-1";
                  uint64_t v231 = 0xEDA00000002;
                  uint64_t v232 = 0xFFFFFFFFLL;
                  glpLogMessage(InfoLog, 0, (uint64_t)&v230, "Active attribute aliasing. Slot %d unavailable for '%.*s' from layout location request.", v32, v33, v34, v35, v29);
                  unsigned int v207 = 0;
                }
                else
                {
                  uint64_t v36 = glpLinkerPoolAlloc(v9);
                  *(_OWORD *)uint64_t v36 = 0u;
                  *(_OWORD *)(v36 + 16) = 0u;
                  glpIntHashPut(*a5, v29 | (v30 << 16), v36, 0.0);
                  if (v229 <= v29) {
                    unsigned int v37 = v29;
                  }
                  else {
                    unsigned int v37 = v229;
                  }
                  unsigned int v229 = v37;
                  if (BitSetGetEquals(v16[15], v28)
                    && glpPrimitiveTypeGetScalarCount(v25[v28]))
                  {
                    unsigned int v38 = 0;
                    do
                    {
                      uint64_t v39 = *((unsigned int *)v26 + 2);
                      uint64_t v40 = &v26[v39];
                      *((_DWORD *)v40 + 4) = v29 | (v30 << 16);
                      *((_DWORD *)v40 + 5) = v38;
                      *((_DWORD *)v26 + 2) = v39 + 1;
                      *(_DWORD *)v36 |= 1 << v38++;
                    }
                    while (v38 < glpPrimitiveTypeGetScalarCount(v25[v28]));
                  }
                  *(void *)(v36 + 8) = v16[6] & 0x7F00000001FLL | ((unint64_t)v223[v28] >> 3);
                  *(_DWORD *)(v36 + 4) = v25[v28];
                  int v41 = (uint64_t *)v16[1];
                  if (v41 && glpLayoutObjectFind(v41, 33))
                  {
                    uint64_t v9 = v228;
                    *(void *)(v36 + 24) = offsetLayout(v228, (void **)v16[1], v30);
                    a5 = v227;
                  }
                  else
                  {
                    uint64_t v9 = v228;
                    uint64_t v42 = glpLinkerGetAllocator(v228);
                    *(void *)(v36 + 24) = glpMakeLayoutObject(v42);
                    uint64_t v43 = glpLinkerGetAllocator(v228);
                    uint64_t v44 = *(void **)(v36 + 24);
                    uint64_t v230 = "-1";
                    uint64_t v231 = 0xEDA00000002;
                    uint64_t v232 = 0xFFFFFFFFLL;
                    glpLayoutObjectAppendInteger(v43, 0, (uint64_t)&v230, 0, 0, v44, 33, 0);
                    uint64_t v45 = glpLinkerGetAllocator(v228);
                    uint64_t v46 = *(void **)(v36 + 24);
                    uint64_t v230 = "-1";
                    uint64_t v231 = 0xEDA00000002;
                    uint64_t v232 = 0xFFFFFFFFLL;
                    glpLayoutObjectAppendInteger(v45, 0, (uint64_t)&v230, 0, 0, v46, 34, 28);
                    uint64_t v47 = glpLinkerGetAllocator(v228);
                    unint64_t v48 = *(void **)(v36 + 24);
                    if (v29 >= 15) {
                      int v49 = 15;
                    }
                    else {
                      int v49 = v29;
                    }
                    uint64_t v230 = "-1";
                    uint64_t v231 = 0xEDA00000002;
                    uint64_t v232 = 0xFFFFFFFFLL;
                    glpLayoutObjectAppendInteger(v47, 0, (uint64_t)&v230, 0, 0, v48, 35, v49 + 16);
                    uint64_t v50 = glpLinkerGetAllocator(v228);
                    uint64_t v51 = *(void **)(v36 + 24);
                    uint64_t v230 = "-1";
                    uint64_t v231 = 0xEDA00000002;
                    a5 = v227;
                    uint64_t v232 = 0xFFFFFFFFLL;
                    glpLayoutObjectAppendInteger(v50, 0, (uint64_t)&v230, 0, 0, v51, 37, v30);
                  }
                }
                ++v28;
              }
              while (v28 != Size);
            }
            if (!v197) {
              *(_DWORD *)(v9 + 256) += *((_DWORD *)v26 + 2);
            }
            uint64_t v52 = (void *)glpLinkerPoolAlloc(v9);
            *uint64_t v52 = 0;
            v52[1] = 0;
            *(_DWORD *)uint64_t v52 = *((_DWORD *)v208 + 4);
            v52[1] = *v16;
            glpStringHashPut(*v201, __s2, v212, (uint64_t)v52, v53);
            a2 = v194;
            unint64_t v14 = *(void *)v203;
          }
        }
      }
      ++v14;
      unint64_t v13 = *(unsigned int *)(a2 + 32);
      if (v14 >= v13) {
        goto LABEL_43;
      }
    }
  }
  unsigned int v229 = 0;
  unsigned int v207 = 1;
LABEL_43:
  uint64_t v54 = *(void *)(v9 + 80);
  if (!*(_DWORD *)(v54 + 32)) {
    goto LABEL_78;
  }
  unint64_t v55 = 0;
  uint64_t v195 = *(void *)(v9 + 80);
  do
  {
    uint64_t v56 = *(void *)(v54 + 40);
    uint64_t v57 = *(_DWORD **)(v56 + 32 * v55);
    if (!v57) {
      goto LABEL_76;
    }
    uint64_t v58 = v56 + 32 * v55;
    uint64_t v60 = *(const char **)(v58 + 8);
    uint64_t v59 = *(void *)(v58 + 16);
    uint64_t v61 = glpStringHashGet(a2, v60, v59);
    if (!v61)
    {
      uint64_t v65 = (uint64_t **)glpLinkerGetInfoLog(v9);
      uint64_t v230 = "-1";
      uint64_t v231 = 0xEDA00000002;
      uint64_t v232 = 0xFFFFFFFFLL;
      glpLogMessage(v65, 1u, (uint64_t)&v230, "Could not find vertex shader attribute '%.*s' to match BindAttributeLocation request.", v66, v67, v68, v69, v59);
LABEL_52:
      a2 = v194;
      goto LABEL_76;
    }
    uint64_t v62 = (uint64_t *)v61;
    uint64_t v63 = *(uint64_t **)(v61 + 8);
    if (!v63)
    {
      unsigned int v209 = v57;
      uint64_t v213 = v60;
      __s2a = (char *)v59;
      *(void *)uint64_t v204 = v55;
LABEL_54:
      uint64_t v198 = 0;
      goto LABEL_55;
    }
    if (glpLayoutObjectFind(v63, 26)) {
      goto LABEL_52;
    }
    uint64_t v64 = (uint64_t *)v62[1];
    *(void *)uint64_t v204 = v55;
    uint64_t v213 = v60;
    __s2a = (char *)v59;
    unsigned int v209 = v57;
    if (!v64) {
      goto LABEL_54;
    }
    uint64_t v198 = glpLayoutObjectFind(v64, 79);
LABEL_55:
    unsigned int v70 = glpABIGetTypeSize(0, *v62, 0);
    unsigned int v71 = glpTypeSizeGetSize(v70);
    uint64_t v72 = v71;
    uint64_t v73 = (_DWORD *)glpLinkerPoolAlloc(v9);
    uint64_t v224 = (unsigned char *)glpLinkerPoolAlloc(v9);
    glpTypeGetAppleVec4Types((unsigned int *)*v62, v73, 1, 0, 0, v224, 0, 0, 0);
    uint64_t v74 = (void *)glpLinkerPoolAlloc(v9);
    *uint64_t v74 = v62;
    v74[1] = 0;
    glpStringHashPut(*v202, v213, (uint64_t)__s2a, (uint64_t)v74, v75);
    if (v71)
    {
      uint64_t v76 = 0;
      int v77 = *v209 - 1;
      uint64_t v220 = v71;
      do
      {
        int v78 = (v224[v76] >> 2) & 1;
        if (!v78) {
          ++v77;
        }
        if (glpIntHashGet(*a5, v77 | (v78 << 16)))
        {
          uint64_t v79 = (uint64_t **)glpLinkerGetInfoLog(v228);
          uint64_t v230 = "-1";
          uint64_t v231 = 0xEDA00000002;
          uint64_t v232 = 0xFFFFFFFFLL;
          glpLogMessage(v79, 0, (uint64_t)&v230, "Active attribute aliasing. Slot %d unavailable for '%.*s' from BindAttributeLocation request.", v80, v81, v82, v83, v77);
          unsigned int v207 = 0;
        }
        else
        {
          uint64_t v84 = glpLinkerPoolAlloc(v228);
          *(_OWORD *)uint64_t v84 = 0u;
          *(_OWORD *)(v84 + 16) = 0u;
          glpIntHashPut(*a5, v77 | (v78 << 16), v84, 0.0);
          if (v229 <= v77) {
            unsigned int v85 = v77;
          }
          else {
            unsigned int v85 = v229;
          }
          unsigned int v229 = v85;
          if (BitSetGetEquals(v62[15], v76)
            && glpPrimitiveTypeGetScalarCount(v73[v76]))
          {
            unsigned int v86 = 0;
            do
            {
              uint64_t v87 = *((unsigned int *)v74 + 2);
              int v88 = &v74[v87];
              *((_DWORD *)v88 + 4) = v77 | (v78 << 16);
              *((_DWORD *)v88 + 5) = v86;
              *((_DWORD *)v74 + 2) = v87 + 1;
              *(_DWORD *)v84 |= 1 << v86++;
            }
            while (v86 < glpPrimitiveTypeGetScalarCount(v73[v76]));
          }
          *(void *)(v84 + 8) = v62[6] & 0x7F00000001FLL | ((unint64_t)v224[v76] >> 3);
          *(_DWORD *)(v84 + 4) = v73[v76];
          uint64_t v89 = glpLinkerGetAllocator(v228);
          *(void *)(v84 + 24) = glpMakeLayoutObject(v89);
          uint64_t v90 = glpLinkerGetAllocator(v228);
          unint64_t v91 = *(void **)(v84 + 24);
          uint64_t v230 = "-1";
          uint64_t v231 = 0xEDA00000002;
          uint64_t v232 = 0xFFFFFFFFLL;
          glpLayoutObjectAppendInteger(v90, 0, (uint64_t)&v230, 0, 0, v91, 33, 0);
          uint64_t v92 = glpLinkerGetAllocator(v228);
          uint64_t v93 = *(void **)(v84 + 24);
          uint64_t v230 = "-1";
          uint64_t v231 = 0xEDA00000002;
          uint64_t v232 = 0xFFFFFFFFLL;
          glpLayoutObjectAppendInteger(v92, 0, (uint64_t)&v230, 0, 0, v93, 34, 28);
          uint64_t v94 = glpLinkerGetAllocator(v228);
          unsigned int v95 = *(void **)(v84 + 24);
          if (v77 >= 15) {
            int v96 = 15;
          }
          else {
            int v96 = v77;
          }
          uint64_t v230 = "-1";
          uint64_t v231 = 0xEDA00000002;
          uint64_t v232 = 0xFFFFFFFFLL;
          glpLayoutObjectAppendInteger(v94, 0, (uint64_t)&v230, 0, 0, v95, 35, v96 + 16);
          uint64_t v97 = glpLinkerGetAllocator(v228);
          uint64_t v98 = *(void **)(v84 + 24);
          uint64_t v230 = "-1";
          uint64_t v231 = 0xEDA00000002;
          uint64_t v232 = 0xFFFFFFFFLL;
          glpLayoutObjectAppendInteger(v97, 0, (uint64_t)&v230, 0, 0, v98, 37, v78);
          a5 = v227;
          uint64_t v72 = v220;
        }
        ++v76;
      }
      while (v76 != v72);
    }
    uint64_t v9 = v228;
    if (!v198) {
      *(_DWORD *)(v228 + 256) += *((_DWORD *)v74 + 2);
    }
    unint64_t v99 = (void *)glpLinkerPoolAlloc(v228);
    *unint64_t v99 = 0;
    v99[1] = 0;
    *(_DWORD *)unint64_t v99 = *v209;
    v99[1] = *v62;
    glpStringHashPut(*v201, v213, (uint64_t)__s2a, (uint64_t)v99, v100);
    a2 = v194;
    uint64_t v54 = v195;
    unint64_t v55 = *(void *)v204;
LABEL_76:
    ++v55;
  }
  while (v55 < *(unsigned int *)(v54 + 32));
  LODWORD(v13) = *(_DWORD *)(a2 + 32);
LABEL_78:
  int v101 = 8;
  int v102 = v13;
  while (2)
  {
    if (!v102) {
      goto LABEL_129;
    }
    unint64_t v103 = 0;
    while (2)
    {
      uint64_t v104 = *(void *)(a2 + 40);
      unint64_t v105 = *(uint64_t **)(v104 + 32 * v103);
      if (!v105) {
        goto LABEL_127;
      }
      uint64_t v106 = v104 + 32 * v103;
      unsigned int v107 = *(const char **)(v106 + 8);
      uint64_t v225 = *(void *)(v106 + 16);
      uint64_t v108 = glpStringHashGet(*(void *)(v9 + 80), v107, v225);
      unint64_t v109 = (uint64_t *)v105[1];
      if (!v109)
      {
        int v110 = 0;
        if (!v108) {
          goto LABEL_86;
        }
        goto LABEL_127;
      }
      int v110 = glpLayoutObjectFind(v109, 26);
      if (v108) {
        goto LABEL_127;
      }
LABEL_86:
      if ((v225 < 3
         || strncmp("gl_", v107, 3uLL)
         && (v225 < 9 || strncmp("$ib$", v107, 4uLL) || strncmp("$gl_", v107 + 5, 4uLL)))
        && (!v225
         || *v107 != 36
         || v225 >= 9 && !strncmp("$ib$", v107, 4uLL) && !strncmp("$gl_", v107 + 5, 4uLL))
        && !v110)
      {
        unsigned int v111 = glpABIGetTypeSize(0, *v105, 0);
        if (glpTypeSizeGetSize(v111) == v101)
        {
          int v112 = (uint64_t *)v105[1];
          uint64_t v205 = v107;
          if (v112) {
            uint64_t v196 = glpLayoutObjectFind(v112, 79);
          }
          else {
            uint64_t v196 = 0;
          }
          unsigned int v113 = glpABIGetTypeSize(0, *v105, 0);
          unsigned int v114 = glpTypeSizeGetSize(v113);
          uint64_t v115 = v114;
          int v116 = (_DWORD *)glpLinkerPoolAlloc(v9);
          unint64_t v117 = (char *)glpLinkerPoolAlloc(v9);
          glpTypeGetAppleVec4Types((unsigned int *)*v105, v116, 1, 0, 0, v117, 0, 0, 0);
          int v118 = (void *)glpLinkerPoolAlloc(v9);
          *int v118 = v105;
          v118[1] = 0;
          glpStringHashPut(*v202, v205, v225, (uint64_t)v118, v119);
          if (v114)
          {
            unsigned int v120 = 0;
            uint64_t v121 = v114;
            unint64_t v122 = v117;
            do
            {
              char v123 = *v122++;
              if ((v123 & 4) == 0) {
                ++v120;
              }
              --v121;
            }
            while (v121);
            uint64_t v124 = v227;
            AttribForint Size = allocateAttribForSize(*v227, v120);
            int v199 = AttribForSize;
            if (v115)
            {
              uint64_t v214 = v115;
              __s2b = (char *)v105;
              int v193 = v101;
              uint64_t v126 = 0;
              int v127 = AttribForSize - 1;
              __int32 v128 = v117;
              uint64_t v9 = v228;
              uint64_t v210 = v117;
              do
              {
                int v129 = (v128[v126] >> 2) & 1;
                if (!v129) {
                  ++v127;
                }
                int v221 = (v128[v126] >> 2) & 1;
                unsigned int v130 = v127 | (v129 << 16);
                uint64_t v131 = glpLinkerPoolAlloc(v9);
                *(_OWORD *)uint64_t v131 = 0u;
                *(_OWORD *)(v131 + 16) = 0u;
                glpIntHashPut(*v124, v130, v131, 0.0);
                if (v229 <= v127) {
                  unsigned int v132 = v127;
                }
                else {
                  unsigned int v132 = v229;
                }
                unsigned int v229 = v132;
                if (BitSetGetEquals(*((void *)__s2b + 15), v126)
                  && glpPrimitiveTypeGetScalarCount(v116[v126]))
                {
                  unsigned int v133 = 0;
                  do
                  {
                    uint64_t v134 = *((unsigned int *)v118 + 2);
                    int v135 = &v118[v134];
                    *((_DWORD *)v135 + 4) = v130;
                    *((_DWORD *)v135 + 5) = v133;
                    *((_DWORD *)v118 + 2) = v134 + 1;
                    *(_DWORD *)v131 |= 1 << v133++;
                  }
                  while (v133 < glpPrimitiveTypeGetScalarCount(v116[v126]));
                }
                __int32 v128 = v210;
                *(void *)(v131 + 8) = *((void *)__s2b + 6) & 0x7F00000001FLL | ((unint64_t)v210[v126] >> 3);
                *(_DWORD *)(v131 + 4) = v116[v126];
                uint64_t v9 = v228;
                uint64_t v136 = glpLinkerGetAllocator(v228);
                *(void *)(v131 + 24) = glpMakeLayoutObject(v136);
                uint64_t v137 = glpLinkerGetAllocator(v228);
                uint64_t v138 = *(void **)(v131 + 24);
                uint64_t v230 = "-1";
                uint64_t v231 = 0xEDA00000002;
                uint64_t v232 = 0xFFFFFFFFLL;
                glpLayoutObjectAppendInteger(v137, 0, (uint64_t)&v230, 0, 0, v138, 33, 0);
                uint64_t v139 = glpLinkerGetAllocator(v228);
                uint64_t v140 = *(void **)(v131 + 24);
                uint64_t v230 = "-1";
                uint64_t v231 = 0xEDA00000002;
                uint64_t v232 = 0xFFFFFFFFLL;
                glpLayoutObjectAppendInteger(v139, 0, (uint64_t)&v230, 0, 0, v140, 34, 28);
                uint64_t v141 = glpLinkerGetAllocator(v228);
                uint64_t v142 = *(void **)(v131 + 24);
                if (v127 >= 15) {
                  int v143 = 15;
                }
                else {
                  int v143 = v127;
                }
                uint64_t v230 = "-1";
                uint64_t v231 = 0xEDA00000002;
                uint64_t v232 = 0xFFFFFFFFLL;
                glpLayoutObjectAppendInteger(v141, 0, (uint64_t)&v230, 0, 0, v142, 35, v143 + 16);
                uint64_t v144 = glpLinkerGetAllocator(v228);
                uint64_t v145 = *(void **)(v131 + 24);
                uint64_t v230 = "-1";
                uint64_t v231 = 0xEDA00000002;
                uint64_t v232 = 0xFFFFFFFFLL;
                glpLayoutObjectAppendInteger(v144, 0, (uint64_t)&v230, 0, 0, v145, 37, v221);
                ++v126;
                uint64_t v124 = v227;
              }
              while (v126 != v214);
              a2 = v194;
              int v101 = v193;
              uint64_t v146 = v225;
              unint64_t v105 = (uint64_t *)__s2b;
              if (!v196) {
LABEL_125:
              }
                *(_DWORD *)(v9 + 256) += *((_DWORD *)v118 + 2);
LABEL_126:
              uint64_t v147 = (void *)glpLinkerPoolAlloc(v9);
              *uint64_t v147 = 0;
              v147[1] = 0;
              *(_DWORD *)uint64_t v147 = v199;
              v147[1] = *v105;
              glpStringHashPut(*v201, v205, v146, (uint64_t)v147, v148);
              goto LABEL_127;
            }
          }
          else
          {
            int v199 = allocateAttribForSize(*v227, 0);
          }
          uint64_t v9 = v228;
          uint64_t v146 = v225;
          if (!v196) {
            goto LABEL_125;
          }
          goto LABEL_126;
        }
      }
LABEL_127:
      ++v103;
      unint64_t v13 = *(unsigned int *)(a2 + 32);
      if (v103 < v13) {
        continue;
      }
      break;
    }
    int v102 = *(_DWORD *)(a2 + 32);
LABEL_129:
    if (--v101) {
      continue;
    }
    break;
  }
  int v149 = 8;
  do
  {
    if (v13)
    {
      unint64_t v150 = 0;
      do
      {
        uint64_t v151 = *(void *)(a2 + 40);
        uint64_t v152 = *(uint64_t **)(v151 + 32 * v150);
        if (v152)
        {
          uint64_t v153 = v151 + 32 * v150;
          uint64_t v154 = *(const char **)(v153 + 8);
          uint64_t v155 = *(void *)(v153 + 16);
          uint64_t v156 = (uint64_t *)v152[1];
          if (v156)
          {
            uint64_t v157 = *(const char **)(v153 + 8);
            uint64_t v158 = glpLayoutObjectFind(v156, 26);
            uint64_t v154 = v157;
            uint64_t v159 = v158;
          }
          else
          {
            uint64_t v159 = 0;
          }
          if (v155 >= 3)
          {
            uint64_t __s2c = (char *)v154;
            if ((!strncmp("gl_", v154, 3uLL)
               || v155 >= 9 && !strncmp("$ib$", __s2c, 4uLL) && !strncmp("$gl_", __s2c + 5, 4uLL))
              && !v159)
            {
              unsigned int v160 = glpABIGetTypeSize(0, *v152, 0);
              if (glpTypeSizeGetSize(v160) == v149)
              {
                int v161 = (uint64_t *)v152[1];
                if (v161) {
                  int v215 = glpLayoutObjectFind(v161, 79);
                }
                else {
                  int v215 = 0;
                }
                unsigned int v162 = glpABIGetTypeSize(0, *v152, 0);
                unsigned int v163 = glpTypeSizeGetSize(v162);
                uint64_t v164 = v9;
                unint64_t v165 = (_DWORD *)glpLinkerPoolAlloc(v9);
                uint64_t v166 = (char *)glpLinkerPoolAlloc(v164);
                glpTypeGetAppleVec4Types((unsigned int *)*v152, v165, 1, 0, 0, v166, 0, 0, 0);
                int v167 = (void *)glpLinkerPoolAlloc(v164);
                void *v167 = v152;
                v167[1] = 0;
                glpStringHashPut(*v202, __s2c, v155, (uint64_t)v167, v168);
                if (v163)
                {
                  unsigned int v169 = 0;
                  uint64_t v170 = v163;
                  uint64_t v171 = v166;
                  do
                  {
                    char v172 = *v171++;
                    if ((v172 & 4) == 0) {
                      ++v169;
                    }
                    --v170;
                  }
                  while (v170);
                  int v211 = allocateAttribForSize(*v227, v169);
                  uint64_t v200 = v155;
                  int v206 = v149;
                  uint64_t v173 = 0;
                  unsigned int v174 = v211 - 1;
                  uint64_t v222 = v166;
                  *(void *)int v226 = v163;
                  do
                  {
                    int v175 = (v166[v173] >> 2) & 1;
                    if (!v175) {
                      ++v174;
                    }
                    unsigned int v176 = v174 | (v175 << 16);
                    uint64_t v177 = glpLinkerPoolAlloc(v228);
                    *(_OWORD *)uint64_t v177 = 0u;
                    *(_OWORD *)(v177 + 16) = 0u;
                    glpIntHashPut(*v227, v176, v177, 0.0);
                    if (v229 <= v174) {
                      unsigned int v178 = v174;
                    }
                    else {
                      unsigned int v178 = v229;
                    }
                    unsigned int v229 = v178;
                    if (BitSetGetEquals(v152[15], v173)
                      && glpPrimitiveTypeGetScalarCount(v165[v173]))
                    {
                      unsigned int v179 = 0;
                      do
                      {
                        uint64_t v180 = *((unsigned int *)v167 + 2);
                        uint64_t v181 = &v167[v180];
                        *((_DWORD *)v181 + 4) = v176;
                        *((_DWORD *)v181 + 5) = v179;
                        *((_DWORD *)v167 + 2) = v180 + 1;
                        *(_DWORD *)v177 |= 1 << v179++;
                      }
                      while (v179 < glpPrimitiveTypeGetScalarCount(v165[v173]));
                    }
                    uint64_t v166 = v222;
                    *(void *)(v177 + 8) = v152[6] & 0x7F00000001FLL | ((unint64_t)v222[v173] >> 3);
                    *(_DWORD *)(v177 + 4) = v165[v173];
                    *(void *)(v177 + 24) = offsetLayout(v228, (void **)v152[1], v173);
                    int v182 = (uint64_t *)v152[1];
                    if (v182) {
                      glpLayoutObjectFind(v182, 33);
                    }
                    ++v173;
                  }
                  while (v173 != *(void *)v226);
                  a2 = v194;
                  int v149 = v206;
                  uint64_t v155 = v200;
                }
                else
                {
                  int v211 = allocateAttribForSize(*v227, 0);
                }
                uint64_t v9 = v228;
                if (!v215) {
                  *(_DWORD *)(v228 + 256) += *((_DWORD *)v167 + 2);
                }
                unsigned int v183 = (void *)glpLinkerPoolAlloc(v228);
                void *v183 = 0;
                v183[1] = 0;
                *(_DWORD *)unsigned int v183 = v211;
                v183[1] = *v152;
                glpStringHashPut(*v201, __s2c, v155, (uint64_t)v183, v184);
              }
            }
          }
        }
        ++v150;
        unint64_t v13 = *(unsigned int *)(a2 + 32);
      }
      while (v150 < v13);
    }
    --v149;
  }
  while (v149);
  uint64_t v185 = *(unsigned int *)(*v202 + 32);
  uint64_t result = v207;
  if (v185)
  {
    uint64_t v187 = *(void *)(*v202 + 40);
    do
    {
      if (*(void *)v187) {
        *(void *)(**(void **)v187 + 8) = 0;
      }
      v187 += 32;
      --v185;
    }
    while (v185);
  }
  if (v229 >= 0x10)
  {
    uint64_t v188 = (uint64_t **)glpLinkerGetInfoLog(v9);
    uint64_t v230 = "-1";
    uint64_t v231 = 0xEDA00000002;
    uint64_t v232 = 0xFFFFFFFFLL;
    glpLogMessage(v188, 0, (uint64_t)&v230, "Implementation limit of %d MAX_VERTEX_ATTRIBS (e.g., number of generic plus conventional active vec4 attributes) exceeded, shader uses up to vec4 attribute %d.", v189, v190, v191, v192, 16);
    return 0;
  }
  return result;
}

uint64_t *offsetLayout(uint64_t a1, void **a2, unsigned int a3)
{
  Allocator = (void *)glpLinkerGetAllocator(a1);
  uint64_t v6 = glpCopyLayoutObject(Allocator, a2);
  unint64_t v7 = glpLayoutObjectFind(v6, 35);
  if (v7) {
    *((_DWORD *)v7 + 4) += a3;
  }
  uint64_t v8 = glpLayoutObjectFind(v6, 43);
  if (v8) {
    *((_DWORD *)v8 + 4) += a3;
  }
  uint64_t v9 = glpLayoutObjectFind(v6, 45);
  if (v9) {
    *((_DWORD *)v9 + 4) += a3;
  }
  uint64_t v10 = glpLayoutObjectFind(v6, 47);
  if (v10) {
    *((_DWORD *)v10 + 4) += 4 * a3;
  }
  uint64_t v11 = glpLayoutObjectFind(v6, 50);
  if (v11) {
    *((_DWORD *)v11 + 4) += a3;
  }
  uint64_t v12 = glpLayoutObjectFind(v6, 52);
  if (v12) {
    *((_DWORD *)v12 + 4) += a3;
  }
  unint64_t v13 = glpLayoutObjectFind(v6, 57);
  if (v13) {
    *((_DWORD *)v13 + 4) += a3;
  }
  unint64_t v14 = glpLayoutObjectFind(v6, 59);
  if (v14) {
    *((_DWORD *)v14 + 4) += a3;
  }
  uint64_t v15 = glpLayoutObjectFind(v6, 60);
  if (v15) {
    *((_DWORD *)v15 + 4) += a3;
  }
  uint64_t v16 = glpLayoutObjectFind(v6, 61);
  if (v16) {
    *((_DWORD *)v16 + 4) += a3 >> 2;
  }
  uint64_t v17 = glpLayoutObjectFind(v6, 63);
  if (v17) {
    *((_DWORD *)v17 + 4) += a3 & 3;
  }
  uint64_t v18 = glpLayoutObjectFind(v6, 69);
  if (v18) {
    *((_DWORD *)v18 + 4) += a3;
  }
  uint64_t v19 = glpLayoutObjectFind(v6, 72);
  if (v19) {
    *((_DWORD *)v19 + 4) += a3;
  }
  uint64_t v20 = glpLayoutObjectFind(v6, 75);
  if (v20) {
    *((_DWORD *)v20 + 4) += a3;
  }
  return v6;
}

uint64_t allocateAttribForSize(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v4 = 0;
  unsigned int v5 = a2;
  do
  {
    unsigned int v6 = v4;
    while (!glpIntHashGet(a1, v6))
    {
      if (++v6 >= v5) {
        return v4;
      }
    }
    uint64_t v4 = (v4 + 1);
    unsigned int v5 = v4 + a2;
  }
  while (v4 < v4 + a2);
  return v4;
}

uint64_t glpMakeFragmentOutputBindings(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v9 = a1;
  Allocator = (void *)glpLinkerGetAllocator(a1);
  uint64_t v239 = a3;
  *a3 = glpMakeStringHash(Allocator);
  uint64_t v11 = (void *)glpLinkerGetAllocator(v9);
  int v240 = a4;
  *a4 = glpMakeStringHash(v11);
  uint64_t v12 = (void *)glpLinkerGetAllocator(v9);
  uint64_t v270 = a5;
  *a5 = glpMakeIntHash(v12);
  unint64_t v13 = *(unsigned int *)(a2 + 32);
  unsigned int v268 = 1;
  uint64_t v264 = v9;
  *(void *)unsigned int v249 = a2;
  if (!v13)
  {
    uint64_t v16 = 0;
    LODWORD(v95) = 0;
    unsigned int v96 = 0;
    unsigned int v251 = 0;
    uint64_t v15 = 0;
    goto LABEL_92;
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  unsigned int v17 = 0x80000000;
  while (1)
  {
    uint64_t v18 = *(void *)(a2 + 40);
    uint64_t v269 = *(void *)(v18 + 32 * v14);
    if (!v269) {
      goto LABEL_40;
    }
    uint64_t v19 = v18 + 32 * v14;
    uint64_t v20 = *(void *)(v19 + 16);
    if (v20 < 3) {
      goto LABEL_40;
    }
    uint64_t v245 = v14;
    uint64_t v21 = *(const char **)(v19 + 8);
    if ((!strncmp("gl_", v21, 3uLL)
       || v20 >= 9 && !strncmp("$ib$", v21, 4uLL) && !strncmp("$gl_", v21 + 5, 4uLL))
      && (*v21 != 36 || v20 >= 9 && !strncmp("$ib$", v21, 4uLL) && !strncmp("$gl_", v21 + 5, 4uLL)))
    {
      break;
    }
LABEL_39:
    uint64_t v14 = v245;
LABEL_40:
    if (++v14 >= v13)
    {
      unsigned int v268 = 1;
      if (!v13) {
        goto LABEL_91;
      }
      goto LABEL_42;
    }
  }
  uint64_t v22 = *(uint64_t **)(v269 + 8);
  if (v22)
  {
    unsigned int v23 = glpLayoutObjectFind(v22, 79);
    uint64_t v22 = *(uint64_t **)(v269 + 8);
  }
  else
  {
    unsigned int v23 = 0;
  }
  int v24 = glpLayoutObjectFind(v22, 72);
  int v25 = glpLayoutObjectFind(*(uint64_t **)(v269 + 8), 77);
  uint64_t v26 = v25;
  if (!v16 || !v25)
  {
    uint64_t v232 = v23;
    if (v25) {
      uint64_t v16 = v269;
    }
    uint64_t v265 = v16;
    unsigned int v27 = glpABIGetTypeSize(0, *(void *)v269, 0);
    uint64_t Size = glpTypeSizeGetSize(v27);
    int v29 = (_DWORD *)glpLinkerPoolAlloc(v264);
    int __s2 = (char *)glpLinkerPoolAlloc(v264);
    glpTypeGetAppleVec4Types(*(unsigned int **)v269, v29, 1, 0, 0, __s2, 0, 0, 0);
    *(void *)uint64_t v260 = Size;
    int v30 = (void *)v269;
    double v31 = (void *)glpLinkerPoolAlloc(v264);
    uint64_t v32 = v21;
    uint64_t v33 = v31;
    *double v31 = v269;
    v31[1] = 0;
    uint64_t v235 = v32;
    uint64_t v241 = v20;
    glpStringHashPut(*v240, v32, v20, (uint64_t)v31, v34);
    unsigned int v256 = v17;
    uint64_t v35 = v26;
    if (v24) {
      unsigned int v256 = *((_DWORD *)v24 + 4);
    }
    if (Size)
    {
      uint64_t v36 = 0;
      BOOL v250 = v35 == 0;
      do
      {
        if (BitSetGetEquals(v30[15], v36))
        {
          unsigned int v37 = v17;
          uint64_t v38 = glpLinkerPoolAlloc(v264);
          *(_OWORD *)uint64_t v38 = 0u;
          *(_OWORD *)(v38 + 16) = 0u;
          glpIntHashPut(*v270, v256 + v36, v38, 0.0);
          if (v15 <= v256 + v36) {
            unsigned int v39 = v256 + v36;
          }
          else {
            unsigned int v39 = v15;
          }
          uint64_t v40 = v35;
          if (v35) {
            uint64_t v15 = v39;
          }
          else {
            uint64_t v15 = v15;
          }
          uint64_t v41 = v15;
          if (glpPrimitiveTypeGetScalarCount(v29[v36]))
          {
            unsigned int v42 = 0;
            do
            {
              uint64_t v43 = *((unsigned int *)v33 + 2);
              uint64_t v44 = &v33[v43];
              *((_DWORD *)v44 + 4) = v256 + v36;
              *((_DWORD *)v44 + 5) = v42;
              *((_DWORD *)v33 + 2) = v43 + 1;
              *(_DWORD *)v38 |= 1 << v42++;
            }
            while (v42 < glpPrimitiveTypeGetScalarCount(v29[v36]));
          }
          int v30 = (void *)v269;
          *(void *)(v38 + 8) = *(void *)(v269 + 48) & 0x7F00000001FLL | ((unint64_t)__s2[v36] >> 3);
          *(_DWORD *)(v38 + 4) = v29[v36];
          *(void *)(v38 + 24) = offsetLayout(v264, *(void ***)(v269 + 8), v36);
          unsigned int v17 = v37 + v250;
          uint64_t v15 = v41;
          uint64_t v35 = v40;
        }
        ++v36;
      }
      while (v36 != *(void *)v260);
    }
    uint64_t v9 = v264;
    if (!v232) {
      *(_DWORD *)(v264 + 292) += *((_DWORD *)v33 + 2);
    }
    uint64_t v45 = (void *)glpLinkerPoolAlloc(v264);
    *uint64_t v45 = 0;
    v45[1] = 0;
    *(_DWORD *)uint64_t v45 = v256;
    v45[1] = *v30;
    glpStringHashPut(*v239, v235, v241, (uint64_t)v45, v46);
    a2 = *(void *)v249;
    unint64_t v13 = *(unsigned int *)(*(void *)v249 + 32);
    uint64_t v16 = v265;
    goto LABEL_39;
  }
  uint64_t v9 = v264;
  InfoLog = (uint64_t **)glpLinkerGetInfoLog(v264);
  int v98 = *(_DWORD *)(v269 + 40);
  unint64_t v271 = "-1";
  uint64_t v272 = 0xEDA00000002;
  uint64_t v273 = 0xFFFFFFFFLL;
  glpLogMessage(InfoLog, 0, (uint64_t)&v271, "Cannot mix builtin fragment outputs '%.*s' and '%.*s'.", v99, v100, v101, v102, v98);
  unsigned int v268 = 0;
  if (*(_DWORD *)(a2 + 32))
  {
LABEL_42:
    unint64_t v47 = 0;
    unsigned int v251 = 0;
    unsigned int v246 = 0;
    uint64_t v266 = v16;
    while (1)
    {
      uint64_t v48 = *(void *)(a2 + 40);
      uint64_t v49 = *(void *)(v48 + 32 * v47);
      if (v49)
      {
        uint64_t v50 = v48 + 32 * v47;
        uint64_t v51 = *(const char **)(v50 + 8);
        uint64_t v52 = *(void *)(v50 + 16);
        double v53 = *(uint64_t **)(v49 + 8);
        int v261 = v53 ? glpLayoutObjectFind(v53, 26) : 0;
        if ((v52 < 3
           || strncmp("gl_", v51, 3uLL)
           && (v52 < 9 || strncmp("$ib$", v51, 4uLL) || strncmp("$gl_", v51 + 5, 4uLL)))
          && (!v52
           || *v51 != 36
           || v52 >= 9 && !strncmp("$ib$", v51, 4uLL) && !strncmp("$gl_", v51 + 5, 4uLL))
          && v261)
        {
          uint64_t v54 = *(uint64_t **)(v49 + 8);
          if (v54) {
            uint64_t v227 = glpLayoutObjectFind(v54, 79);
          }
          else {
            uint64_t v227 = 0;
          }
          unsigned int v55 = glpABIGetTypeSize(0, *(void *)v49, 0);
          uint64_t v56 = (char *)glpTypeSizeGetSize(v55);
          uint64_t v57 = (_DWORD *)glpLinkerPoolAlloc(v9);
          __s2a = v56;
          uint64_t v236 = glpLinkerPoolAlloc(v9);
          glpTypeGetAppleVec4Types(*(unsigned int **)v49, v57, 1, 0, 0, (unsigned char *)v236, 0, 0, 0);
          uint64_t v58 = *(uint64_t **)(v49 + 8);
          uint64_t v257 = v15;
          if (v58 && (uint64_t v59 = glpLayoutObjectFind(v58, 27)) != 0) {
            unsigned int v242 = *((_DWORD *)v59 + 4);
          }
          else {
            unsigned int v242 = 0;
          }
          uint64_t v60 = (void *)glpLinkerPoolAlloc(v9);
          *uint64_t v60 = v49;
          v60[1] = 0;
          glpStringHashPut(*v240, v51, v52, (uint64_t)v60, v61);
          uint64_t v229 = v52;
          if (v56)
          {
            for (unint64_t i = 0; i != __s2a; ++i)
            {
              unsigned int v63 = (*((_DWORD *)v261 + 4) + i) | (v242 << 16);
              uint64_t v64 = glpIntHashGet(*v270, v63);
              if (v16)
              {
                uint64_t v65 = (uint64_t **)glpLinkerGetInfoLog(v9);
                int v66 = *(_DWORD *)(v49 + 40);
                unint64_t v271 = "-1";
                uint64_t v272 = 0xEDA00000002;
                uint64_t v273 = 0xFFFFFFFFLL;
                glpLogMessage(v65, 0, (uint64_t)&v271, "Cannot mix builtin and user defined fragment outputs '%.*s' and '%.*s'.", v67, v68, v69, v70, v66);
              }
              else
              {
                if (!v64)
                {
                  if (BitSetGetEquals(*(void *)(v49 + 120), i))
                  {
                    uint64_t v77 = glpLinkerPoolAlloc(v9);
                    *(_OWORD *)uint64_t v77 = 0u;
                    *(_OWORD *)(v77 + 16) = 0u;
                    glpIntHashPut(*v270, v63, v77, 0.0);
                    unsigned int v78 = *((_DWORD *)v261 + 4) + i;
                    if (v257 <= v78) {
                      uint64_t v79 = v78;
                    }
                    else {
                      uint64_t v79 = v257;
                    }
                    uint64_t v257 = v79;
                    unsigned int v80 = v251;
                    if (v251 <= v242) {
                      unsigned int v80 = v242;
                    }
                    unsigned int v251 = v80;
                    if (glpPrimitiveTypeGetScalarCount(v57[(void)i]))
                    {
                      unsigned int v81 = 0;
                      do
                      {
                        uint64_t v82 = *((unsigned int *)v60 + 2);
                        uint64_t v83 = &v60[v82];
                        *((_DWORD *)v83 + 4) = v63;
                        *((_DWORD *)v83 + 5) = v81;
                        *((_DWORD *)v60 + 2) = v82 + 1;
                        *(_DWORD *)v77 |= 1 << v81++;
                      }
                      while (v81 < glpPrimitiveTypeGetScalarCount(v57[(void)i]));
                    }
                    *(void *)(v77 + 8) = *(void *)(v49 + 48) & 0x7F00000001FLL | ((unint64_t)i[v236] >> 3);
                    *(_DWORD *)(v77 + 4) = v57[(void)i];
                    *(void *)(v77 + 24) = addPPDrawBuffersToLayout(v264, *(void ***)(v77 + 24));
                    uint64_t v84 = glpLinkerGetAllocator(v264);
                    unsigned int v85 = *(void **)(v77 + 24);
                    unint64_t v271 = "-1";
                    uint64_t v272 = 0xEDA00000002;
                    uint64_t v273 = 0xFFFFFFFFLL;
                    glpLayoutObjectAppendInteger(v84, 0, (uint64_t)&v271, 0, 0, v85, 33, 3);
                    uint64_t v86 = glpLinkerGetAllocator(v264);
                    uint64_t v87 = *(void **)(v77 + 24);
                    unint64_t v271 = "-1";
                    uint64_t v272 = 0xEDA00000002;
                    uint64_t v273 = 0xFFFFFFFFLL;
                    glpLayoutObjectAppendInteger(v86, 0, (uint64_t)&v271, 0, 0, v87, 68, 4);
                    uint64_t v88 = glpLinkerGetAllocator(v264);
                    uint64_t v89 = *(void **)(v77 + 24);
                    int v90 = *((_DWORD *)v261 + 4) + i;
                    unint64_t v271 = "-1";
                    uint64_t v272 = 0xEDA00000002;
                    uint64_t v273 = 0xFFFFFFFFLL;
                    glpLayoutObjectAppendInteger(v88, 0, (uint64_t)&v271, 0, 0, v89, 72, v90);
                    uint64_t v91 = glpLinkerGetAllocator(v264);
                    uint64_t v92 = *(void **)(v77 + 24);
                    uint64_t v9 = v264;
                    unint64_t v271 = "-1";
                    uint64_t v272 = 0xEDA00000002;
                    uint64_t v273 = 0xFFFFFFFFLL;
                    glpLayoutObjectAppendInteger(v91, 0, (uint64_t)&v271, 0, 0, v92, 73, v242);
                    uint64_t v16 = v266;
                  }
                  continue;
                }
                unsigned int v71 = (uint64_t **)glpLinkerGetInfoLog(v9);
                int v72 = *((_DWORD *)v261 + 4) + i;
                unint64_t v271 = "-1";
                uint64_t v272 = 0xEDA00000002;
                uint64_t v273 = 0xFFFFFFFFLL;
                glpLogMessage(v71, 0, (uint64_t)&v271, "Active output aliasing. Slot %d unavailable for '%.*s' from layout location request.", v73, v74, v75, v76, v72);
              }
              unsigned int v268 = 0;
            }
          }
          if (!v227) {
            *(_DWORD *)(v9 + 292) += *((_DWORD *)v60 + 2);
          }
          uint64_t v93 = glpLinkerPoolAlloc(v9);
          *(void *)uint64_t v93 = 0;
          *(void *)(v93 + 8) = 0;
          *(_DWORD *)uint64_t v93 = *((_DWORD *)v261 + 4);
          *(_DWORD *)(v93 + 4) = v242;
          *(void *)(v93 + 8) = *(void *)v49;
          glpStringHashPut(*v239, v51, v229, v93, v94);
          ++v246;
          uint64_t v15 = v257;
        }
      }
      a2 = *(void *)v249;
      ++v47;
      unint64_t v95 = *(unsigned int *)(*(void *)v249 + 32);
      if (v47 >= v95)
      {
        unsigned int v96 = v246;
        goto LABEL_92;
      }
    }
  }
LABEL_91:
  LODWORD(v95) = 0;
  unsigned int v96 = 0;
  unsigned int v251 = 0;
LABEL_92:
  uint64_t v267 = v16;
  uint64_t v103 = *(void *)(v9 + 88);
  if (!*(_DWORD *)(v103 + 32)) {
    goto LABEL_128;
  }
  uint64_t v104 = 0;
  uint64_t v230 = *(void *)(v9 + 88);
  while (2)
  {
    uint64_t v105 = *(void *)(v103 + 40);
    uint64_t v106 = *(double **)(v105 + 32 * v104);
    if (v106)
    {
      uint64_t v107 = v105 + 32 * v104;
      uint64_t v108 = *(const char **)(v107 + 8);
      uint64_t v109 = *(void *)(v107 + 16);
      uint64_t v110 = glpStringHashGet(a2, v108, v109);
      if (v110)
      {
        uint64_t v111 = v110;
        int v112 = *(uint64_t **)(v110 + 8);
        if (!v112)
        {
          uint64_t v258 = v15;
          uint64_t v262 = v108;
          *(void *)unsigned int v243 = v104;
          unsigned int v247 = v96;
          goto LABEL_102;
        }
        if (!glpLayoutObjectFind(v112, 26))
        {
          unsigned int v113 = *(uint64_t **)(v111 + 8);
          uint64_t v258 = v15;
          uint64_t v262 = v108;
          unsigned int v247 = v96;
          *(void *)unsigned int v243 = v104;
          if (v113)
          {
            uint64_t v233 = glpLayoutObjectFind(v113, 79);
            goto LABEL_103;
          }
LABEL_102:
          uint64_t v233 = 0;
LABEL_103:
          unsigned int v119 = glpABIGetTypeSize(0, *(void *)v111, 0);
          unsigned int v120 = glpTypeSizeGetSize(v119);
          uint64_t v121 = v120;
          unint64_t v122 = (_DWORD *)glpLinkerPoolAlloc(v264);
          __s2b = (char *)glpLinkerPoolAlloc(v264);
          glpTypeGetAppleVec4Types(*(unsigned int **)v111, v122, 1, 0, 0, __s2b, 0, 0, 0);
          char v123 = (void *)glpLinkerPoolAlloc(v264);
          *char v123 = v111;
          v123[1] = 0;
          glpStringHashPut(*v240, v262, v109, (uint64_t)v123, v124);
          uint64_t v237 = v109;
          if (v120)
          {
            uint64_t v125 = 0;
            uint64_t v9 = v264;
            while (1)
            {
              unsigned int v126 = (*(_DWORD *)v106 + v125) | (*((_DWORD *)v106 + 1) << 16);
              uint64_t v127 = glpIntHashGet(*v270, v126);
              if (v267)
              {
                __int32 v128 = (uint64_t **)glpLinkerGetInfoLog(v9);
                int v129 = *(_DWORD *)(v111 + 40);
                unint64_t v271 = "-1";
                uint64_t v272 = 0xEDA00000002;
                uint64_t v273 = 0xFFFFFFFFLL;
                glpLogMessage(v128, 0, (uint64_t)&v271, "Cannot mix builtin and user defined fragment outputs '%.*s' and '%.*s'.", v130, v131, v132, v133, v129);
              }
              else
              {
                if (!v127)
                {
                  if (BitSetGetEquals(*(void *)(v111 + 120), v125))
                  {
                    uint64_t v140 = glpLinkerPoolAlloc(v9);
                    *(_OWORD *)uint64_t v140 = 0u;
                    *(_OWORD *)(v140 + 16) = 0u;
                    glpIntHashPut(*v270, v126, v140, 0.0);
                    unsigned int v141 = *(_DWORD *)v106 + v125;
                    if (v258 <= v141) {
                      uint64_t v142 = v141;
                    }
                    else {
                      uint64_t v142 = v258;
                    }
                    uint64_t v258 = v142;
                    unsigned int v143 = v251;
                    if (v251 <= *((_DWORD *)v106 + 1)) {
                      unsigned int v143 = *((_DWORD *)v106 + 1);
                    }
                    unsigned int v251 = v143;
                    if (glpPrimitiveTypeGetScalarCount(v122[v125]))
                    {
                      unsigned int v144 = 0;
                      do
                      {
                        uint64_t v145 = *((unsigned int *)v123 + 2);
                        uint64_t v146 = &v123[v145];
                        *((_DWORD *)v146 + 4) = v126;
                        *((_DWORD *)v146 + 5) = v144;
                        *((_DWORD *)v123 + 2) = v145 + 1;
                        *(_DWORD *)v140 |= 1 << v144++;
                      }
                      while (v144 < glpPrimitiveTypeGetScalarCount(v122[v125]));
                    }
                    *(void *)(v140 + 8) = *(void *)(v111 + 48) & 0x7F00000001FLL | ((unint64_t)__s2b[v125] >> 3);
                    *(_DWORD *)(v140 + 4) = v122[v125];
                    *(void *)(v140 + 24) = addPPDrawBuffersToLayout(v264, *(void ***)(v140 + 24));
                    uint64_t v147 = glpLinkerGetAllocator(v264);
                    double v148 = *(void **)(v140 + 24);
                    unint64_t v271 = "-1";
                    uint64_t v272 = 0xEDA00000002;
                    uint64_t v273 = 0xFFFFFFFFLL;
                    glpLayoutObjectAppendInteger(v147, 0, (uint64_t)&v271, 0, 0, v148, 33, 3);
                    uint64_t v149 = glpLinkerGetAllocator(v264);
                    unint64_t v150 = *(void **)(v140 + 24);
                    unint64_t v271 = "-1";
                    uint64_t v272 = 0xEDA00000002;
                    uint64_t v273 = 0xFFFFFFFFLL;
                    glpLayoutObjectAppendInteger(v149, 0, (uint64_t)&v271, 0, 0, v150, 68, 4);
                    uint64_t v151 = glpLinkerGetAllocator(v264);
                    uint64_t v152 = *(void **)(v140 + 24);
                    int v153 = *(_DWORD *)v106 + v125;
                    unint64_t v271 = "-1";
                    uint64_t v272 = 0xEDA00000002;
                    uint64_t v273 = 0xFFFFFFFFLL;
                    glpLayoutObjectAppendInteger(v151, 0, (uint64_t)&v271, 0, 0, v152, 72, v153);
                    uint64_t v154 = glpLinkerGetAllocator(v264);
                    uint64_t v155 = *(void **)(v140 + 24);
                    uint64_t v9 = v264;
                    int v156 = *((_DWORD *)v106 + 1);
                    unint64_t v271 = "-1";
                    uint64_t v272 = 0xEDA00000002;
                    uint64_t v273 = 0xFFFFFFFFLL;
                    glpLayoutObjectAppendInteger(v154, 0, (uint64_t)&v271, 0, 0, v155, 73, v156);
                  }
                  goto LABEL_110;
                }
                uint64_t v134 = (uint64_t **)glpLinkerGetInfoLog(v9);
                int v135 = *(_DWORD *)v106 + v125;
                unint64_t v271 = "-1";
                uint64_t v272 = 0xEDA00000002;
                uint64_t v273 = 0xFFFFFFFFLL;
                glpLogMessage(v134, 0, (uint64_t)&v271, "Active output aliasing. Slot %d unavailable for '%.*s' from FragDataBinding request.", v136, v137, v138, v139, v135);
              }
              unsigned int v268 = 0;
LABEL_110:
              if (++v125 == v121) {
                goto LABEL_123;
              }
            }
          }
          uint64_t v9 = v264;
LABEL_123:
          if (!v233) {
            *(_DWORD *)(v9 + 292) += *((_DWORD *)v123 + 2);
          }
          uint64_t v157 = (void *)glpLinkerPoolAlloc(v9);
          *uint64_t v157 = 0;
          v157[1] = 0;
          double v158 = *v106;
          *uint64_t v157 = *(void *)v106;
          v157[1] = *(void *)v111;
          glpStringHashPut(*v239, v262, v237, (uint64_t)v157, v158);
          unsigned int v96 = v247 + 1;
          uint64_t v15 = v258;
          a2 = *(void *)v249;
          uint64_t v103 = v230;
          uint64_t v104 = *(void *)v243;
        }
      }
      else
      {
        unsigned int v114 = (uint64_t **)glpLinkerGetInfoLog(v9);
        unint64_t v271 = "-1";
        uint64_t v272 = 0xEDA00000002;
        uint64_t v273 = 0xFFFFFFFFLL;
        glpLogMessage(v114, 1u, (uint64_t)&v271, "Could not find fragment shader output '%.*s' to match FragDataBinding request.", v115, v116, v117, v118, v109);
      }
    }
    if (++v104 < (unint64_t)*(unsigned int *)(v103 + 32)) {
      continue;
    }
    break;
  }
  LODWORD(v95) = *(_DWORD *)(a2 + 32);
LABEL_128:
  if (!v95)
  {
    uint64_t result = v268;
    unsigned int v205 = v251;
    goto LABEL_185;
  }
  uint64_t v159 = 0;
  int v160 = 0;
  while (2)
  {
    uint64_t v161 = *(void *)(a2 + 40);
    uint64_t v162 = *(void *)(v161 + 32 * v159);
    if (!v162) {
      goto LABEL_147;
    }
    uint64_t v163 = v161 + 32 * v159;
    uint64_t __s2c = *(char **)(v163 + 8);
    uint64_t v263 = *(void *)(v163 + 16);
    uint64_t v164 = glpStringHashGet(*(void *)(v9 + 88), __s2c, v263);
    unint64_t v165 = *(uint64_t **)(v162 + 8);
    if (!v165)
    {
      uint64_t v166 = 0;
LABEL_145:
      if (!v164) {
        goto LABEL_134;
      }
      goto LABEL_146;
    }
    uint64_t v166 = glpLayoutObjectFind(v165, 26);
    int v167 = *(uint64_t **)(v162 + 8);
    if (!v167) {
      goto LABEL_145;
    }
    if ((unint64_t)glpLayoutObjectFind(v167, 29) | v164)
    {
LABEL_146:
      uint64_t v9 = v264;
      goto LABEL_147;
    }
LABEL_134:
    int v168 = v263;
    uint64_t v9 = v264;
    if (v263 < 3
      || strncmp("gl_", __s2c, 3uLL)
      && ((int v168 = v263, v263 < 9)
       || (v169 = strncmp("$ib$", __s2c, 4uLL), int v168 = v263, v169)
       || (v170 = strncmp("$gl_", __s2c + 5, 4uLL), int v168 = v263, v170)))
    {
      if (!v168) {
        goto LABEL_150;
      }
      if (*__s2c == 36)
      {
        if (v263 >= 9 && !strncmp("$ib$", __s2c, 4uLL))
        {
          LOBYTE(v168) = strncmp("$gl_", __s2c + 5, 4uLL) != 0;
          goto LABEL_150;
        }
      }
      else
      {
        LOBYTE(v168) = 0;
LABEL_150:
        if ((v168 & 1) == 0 && !v166)
        {
          uint64_t v171 = *(uint64_t **)(v162 + 8);
          uint64_t v259 = v15;
          unsigned int v248 = v96;
          int v231 = v160;
          if (v171) {
            uint64_t v228 = glpLayoutObjectFind(v171, 79);
          }
          else {
            uint64_t v228 = 0;
          }
          unsigned int v172 = glpABIGetTypeSize(0, *(void *)v162, 0);
          unsigned int v173 = glpTypeSizeGetSize(v172);
          uint64_t v174 = v173;
          int v175 = (_DWORD *)glpLinkerPoolAlloc(v264);
          uint64_t v238 = (unsigned char *)glpLinkerPoolAlloc(v264);
          glpTypeGetAppleVec4Types(*(unsigned int **)v162, v175, 1, 0, 0, v238, 0, 0, 0);
          unsigned int v176 = (void *)glpLinkerPoolAlloc(v264);
          *unsigned int v176 = v162;
          v176[1] = 0;
          glpStringHashPut(*v240, __s2c, v263, (uint64_t)v176, v177);
          if (v173)
          {
            unsigned int v178 = 0;
            uint64_t v179 = *v270;
            unsigned int v180 = v173;
            unsigned int v226 = v173;
            do
            {
              unsigned int v181 = v178;
              while (!glpIntHashGet(v179, v178))
              {
                if (++v178 >= v180)
                {
                  unsigned int v178 = v181;
                  goto LABEL_162;
                }
              }
              unsigned int v178 = v181 + 1;
              unsigned int v180 = v181 + 1 + v226;
            }
            while (v178 < v178 + v226);
LABEL_162:
            unsigned int v244 = v178;
            uint64_t v182 = 0;
            uint64_t v9 = v264;
            uint64_t v234 = v174;
            do
            {
              if (v267)
              {
                unsigned int v183 = (uint64_t **)glpLinkerGetInfoLog(v9);
                int v184 = *(_DWORD *)(v162 + 40);
                unint64_t v271 = "-1";
                uint64_t v272 = 0xEDA00000002;
                uint64_t v273 = 0xFFFFFFFFLL;
                glpLogMessage(v183, 0, (uint64_t)&v271, "Cannot mix builtin and user defined fragment outputs '%.*s' and '%.*s'.", v185, v186, v187, v188, v184);
                unsigned int v268 = 0;
              }
              else if (BitSetGetEquals(*(void *)(v162 + 120), v182))
              {
                uint64_t v189 = glpLinkerPoolAlloc(v9);
                *(_OWORD *)uint64_t v189 = 0u;
                *(_OWORD *)(v189 + 16) = 0u;
                unsigned int v190 = v244 + v182;
                glpIntHashPut(*v270, v244 + v182, v189, 0.0);
                if (v259 <= v244 + v182) {
                  uint64_t v191 = v190;
                }
                else {
                  uint64_t v191 = v259;
                }
                uint64_t v259 = v191;
                if (glpPrimitiveTypeGetScalarCount(v175[v182]))
                {
                  unsigned int v192 = 0;
                  do
                  {
                    uint64_t v193 = *((unsigned int *)v176 + 2);
                    uint64_t v194 = &v176[v193];
                    *((_DWORD *)v194 + 4) = v190;
                    *((_DWORD *)v194 + 5) = v192;
                    *((_DWORD *)v176 + 2) = v193 + 1;
                    *(_DWORD *)v189 |= 1 << v192++;
                  }
                  while (v192 < glpPrimitiveTypeGetScalarCount(v175[v182]));
                }
                *(void *)(v189 + 8) = *(void *)(v162 + 48) & 0x7F00000001FLL | ((unint64_t)v238[v182] >> 3);
                *(_DWORD *)(v189 + 4) = v175[v182];
                *(void *)(v189 + 24) = addPPDrawBuffersToLayout(v264, *(void ***)(v189 + 24));
                uint64_t v195 = glpLinkerGetAllocator(v264);
                uint64_t v196 = *(void **)(v189 + 24);
                unint64_t v271 = "-1";
                uint64_t v272 = 0xEDA00000002;
                uint64_t v273 = 0xFFFFFFFFLL;
                glpLayoutObjectAppendInteger(v195, 0, (uint64_t)&v271, 0, 0, v196, 33, 3);
                uint64_t v197 = glpLinkerGetAllocator(v264);
                uint64_t v198 = *(void **)(v189 + 24);
                unint64_t v271 = "-1";
                uint64_t v272 = 0xEDA00000002;
                uint64_t v273 = 0xFFFFFFFFLL;
                glpLayoutObjectAppendInteger(v197, 0, (uint64_t)&v271, 0, 0, v198, 68, 4);
                uint64_t v199 = glpLinkerGetAllocator(v264);
                uint64_t v200 = *(void **)(v189 + 24);
                unint64_t v271 = "-1";
                uint64_t v272 = 0xEDA00000002;
                uint64_t v273 = 0xFFFFFFFFLL;
                glpLayoutObjectAppendInteger(v199, 0, (uint64_t)&v271, 0, 0, v200, 72, v190);
                uint64_t v201 = glpLinkerGetAllocator(v264);
                uint64_t v202 = *(void **)(v189 + 24);
                uint64_t v9 = v264;
                unint64_t v271 = "-1";
                uint64_t v272 = 0xEDA00000002;
                uint64_t v273 = 0xFFFFFFFFLL;
                glpLayoutObjectAppendInteger(v201, 0, (uint64_t)&v271, 0, 0, v202, 73, 0);
                uint64_t v174 = v234;
              }
              ++v182;
            }
            while (v182 != v174);
            a2 = *(void *)v249;
          }
          else
          {
            unsigned int v244 = 0;
          }
          uint64_t v15 = v259;
          if (!v228) {
            *(_DWORD *)(v9 + 292) += *((_DWORD *)v176 + 2);
          }
          uint64_t v203 = (void *)glpLinkerPoolAlloc(v9);
          *uint64_t v203 = 0;
          v203[1] = 0;
          *(_DWORD *)uint64_t v203 = v244;
          v203[1] = *(void *)v162;
          glpStringHashPut(*v239, __s2c, v263, (uint64_t)v203, v204);
          unsigned int v96 = v248 + 1;
          int v160 = v231 + 1;
        }
      }
    }
LABEL_147:
    if (++v159 < (unint64_t)*(unsigned int *)(a2 + 32)) {
      continue;
    }
    break;
  }
  unsigned int v205 = v251;
  if (v96 < 2)
  {
    uint64_t result = v268;
  }
  else
  {
    uint64_t result = v268;
    if (v160 && *(_DWORD *)(**(void **)(v9 + 176) + 4) == 6)
    {
      unsigned int v207 = (uint64_t **)glpLinkerGetInfoLog(v9);
      unint64_t v271 = "-1";
      uint64_t v272 = 0xEDA00000002;
      uint64_t v273 = 0xFFFFFFFFLL;
      glpLogMessage(v207, 0, (uint64_t)&v271, "GLSL 300 requires that all fragment shader outputs have a location if there is more than one output.", v208, v209, v210, v211, v225);
      uint64_t result = 0;
    }
  }
LABEL_185:
  uint64_t v212 = *(unsigned int *)(*v240 + 32);
  if (v212)
  {
    uint64_t v213 = *(void *)(*v240 + 40);
    do
    {
      if (*(void *)v213) {
        *(void *)(**(void **)v213 + 8) = 0;
      }
      v213 += 32;
      --v212;
    }
    while (v212);
  }
  if (v205 && v15)
  {
    uint64_t v214 = (uint64_t **)glpLinkerGetInfoLog(v9);
    unint64_t v271 = "-1";
    uint64_t v272 = 0xEDA00000002;
    uint64_t v273 = 0xFFFFFFFFLL;
    glpLogMessage(v214, 0, (uint64_t)&v271, "Exceeded max dual source draw buffers of %d, shader uses up to %d.", v215, v216, v217, v218, 1);
    return 0;
  }
  if (v15 >= glpBuiltInConstantValues[8 * (*(unsigned char *)(v9 + 60) == 4) + 7])
  {
    int v219 = (uint64_t **)glpLinkerGetInfoLog(v9);
    unsigned int v220 = glpBuiltInConstantValues[8 * (*(unsigned char *)(v9 + 60) == 4) + 7];
    unint64_t v271 = "-1";
    uint64_t v272 = 0xEDA00000002;
    uint64_t v273 = 0xFFFFFFFFLL;
    glpLogMessage(v219, 0, (uint64_t)&v271, "Exceeded max draw buffers of %d, shader uses up to %d.", v221, v222, v223, v224, v220);
    return 0;
  }
  return result;
}

void *addPPDrawBuffersToLayout(uint64_t a1, void **a2)
{
  Allocator = (void *)glpLinkerGetAllocator(a1);
  LayoutObject = glpCopyLayoutObject(Allocator, a2);
  if (!LayoutObject)
  {
    uint64_t v6 = glpLinkerGetAllocator(a1);
    LayoutObject = glpMakeLayoutObject(v6);
  }
  uint64_t v7 = glpLinkerGetAllocator(a1);
  v9[0] = "-1";
  v9[1] = 0xEDA00000002;
  _DWORD v9[2] = 0xFFFFFFFFLL;
  glpLayoutObjectAppendInteger(v7, 0, (uint64_t)v9, 0, 0, LayoutObject, 77, 2);
  return LayoutObject;
}

uint64_t glpMakeInterstageBindings(uint64_t StringHash, unsigned int a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12, uint64_t *a13)
{
  v522 = a8;
  uint64_t v13 = a7;
  unsigned int v534 = a3;
  unsigned int v528 = a2;
  uint64_t v17 = StringHash;
  v553[1] = *(unsigned int **)MEMORY[0x263EF8340];
  if (a7)
  {
    Allocator = (void *)glpLinkerGetAllocator(StringHash);
    uint64_t StringHash = glpMakeStringHash(Allocator);
    *a9 = StringHash;
  }
  v526 = a11;
  if (a5)
  {
    uint64_t v19 = (void *)glpLinkerGetAllocator(v17);
    uint64_t StringHash = glpMakeStringHash(v19);
    uint64_t *v522 = StringHash;
  }
  uint64_t v521 = a10;
  if (v13)
  {
    uint64_t v20 = (void *)glpLinkerGetAllocator(v17);
    uint64_t StringHash = glpMakeStringHash(v20);
    uint64_t *v526 = StringHash;
  }
  long long v535 = a13;
  if (a5)
  {
    uint64_t v21 = (void *)glpLinkerGetAllocator(v17);
    uint64_t StringHash = glpMakeStringHash(v21);
    *uint64_t v521 = StringHash;
  }
  long long v530 = a12;
  if (v13)
  {
    uint64_t v22 = (void *)glpLinkerGetAllocator(v17);
    uint64_t StringHash = glpMakeIntHash(v22);
    *long long v535 = StringHash;
  }
  if (a5)
  {
    unsigned int v23 = (void *)glpLinkerGetAllocator(v17);
    uint64_t StringHash = glpMakeIntHash(v23);
    *long long v530 = StringHash;
  }
  uint64_t v24 = 1;
  uint64_t v531 = v13;
  uint64_t v529 = a5;
  uint64_t v536 = v17;
  uint64_t v524 = a9;
  if (a4 && a6)
  {
    int v25 = *(_DWORD *)(v17 + 60);
    uint64_t v26 = (void *)glpLinkerGetAllocator(v17);
    unsigned int v27 = (const char *)glpMakeStringHash(v26);
    *(void *)(v17 + 344) = glpMakeIntHash(&GLP_MALLOC_ALLOCATOR);
    uint64_t v28 = *(void *)(v17 + 96);
    LODWORD(v29) = *(_DWORD *)(v28 + 4);
    if (v29)
    {
      uint64_t v517 = a6;
      unint64_t v30 = 0;
      LODWORD(v520) = 0;
      LODWORD(v519) = 0;
      uint64_t v523 = 0;
      LODWORD(v533) = 0;
      LODWORD(v518) = -1;
      uint64_t v525 = (uint64_t)v27;
      LODWORD(v527) = v25;
      while (1)
      {
        LODWORD(v532) = v24;
        BOOL v31 = v30 == v29 - 1 || *(_DWORD *)(v17 + 300) == 35981;
        uint64_t v32 = *(void *)(v28 + 8) + 16 * v30;
        double v34 = *(char **)v32;
        uint64_t v33 = *(void *)(v32 + 8);
        if (glpStringsEqual("gl_NextBuffer", 0xD22C7DA40000000DLL, *(char **)v32, v33) && v25 == 1)
        {
          int ElementCount = 0;
          BOOL v31 = 1;
        }
        else if (glpStringsEqual("gl_SkipComponents1", 0x17BA0E7C00000012, v34, v33) && v25 == 1)
        {
          LODWORD(v533) = v533 + 4;
          int ElementCount = 1;
        }
        else if (glpStringsEqual("gl_SkipComponents2", 0xB5F2691B00000012, v34, v33) && v25 == 1)
        {
          LODWORD(v533) = v533 + 8;
          int ElementCount = 2;
        }
        else if (glpStringsEqual("gl_SkipComponents3", 0x74D9376D00000012, v34, v33) && v25 == 1)
        {
          LODWORD(v533) = v533 + 12;
          int ElementCount = 3;
        }
        else
        {
          if (!glpStringsEqual("gl_SkipComponents4", 0x635B431500000012, v34, v33) || v25 != 1)
          {
            uint64_t v538 = 0;
            long long v537 = 0;
            v552 = 0;
            v553[0] = 0;
            if (!glpTypeParseDeref(v517, (uint64_t (*)(uint64_t, uint64_t, uint64_t))topLevelLookUpObjectTypeFromStringHash, (uint64_t)v34, v33, &v537, (uint64_t *)v553, &v552))
            {
              InfoLog = (uint64_t **)glpLinkerGetInfoLog(v17);
              *(void *)&long long v542 = "-1";
              *((void *)&v542 + 1) = 0xEDA00000002;
              *(void *)&long long v543 = 0xFFFFFFFFLL;
              glpLogMessage(InfoLog, 0, (uint64_t)&v542, "Could not find transform feedback binding for '%.*s.'", v96, v97, v98, v99, v33);
              goto LABEL_56;
            }
            unsigned int v85 = (uint64_t *)glpStringHashGet(v517, v537, v538);
            uint64_t v86 = (uint64_t *)v85[1];
            if (v86)
            {
              uint64_t v87 = glpLayoutObjectFind(v86, 9);
              if (v87)
              {
                if (*((_DWORD *)v87 + 4))
                {
                  uint64_t v88 = (uint64_t **)glpLinkerGetInfoLog(v536);
                  *(void *)&long long v542 = "-1";
                  *((void *)&v542 + 1) = 0xEDA00000002;
                  *(void *)&long long v543 = 0xFFFFFFFFLL;
                  uint64_t v17 = v536;
                  glpLogMessage(v88, 0, (uint64_t)&v542, "Exceeded max vertex streams of %d, with %d.", v89, v90, v91, v92, 1);
                  goto LABEL_56;
                }
              }
            }
            v518 = v85;
            int Kind = glpTypeGetKind(v553[0]);
            uint64_t ElementType = v553[0];
            if (Kind == 2)
            {
              int ElementCount = glpArrayTypeGetElementCount((uint64_t)v553[0]);
              uint64_t ElementType = (unsigned int *)glpArrayTypeGetElementType((uint64_t)v553[0]);
              v553[0] = ElementType;
            }
            else
            {
              int ElementCount = 1;
            }
            uint64_t v17 = v536;
            if (glpTypeGetKind(ElementType))
            {
              uint64_t v100 = (uint64_t **)glpLinkerGetInfoLog(v536);
              *(void *)&long long v542 = "-1";
              *((void *)&v542 + 1) = 0xEDA00000002;
              *(void *)&long long v543 = 0xFFFFFFFFLL;
              glpLogMessage(v100, 0, (uint64_t)&v542, "Type of '%.*s' not valid for transform feedback.", v101, v102, v103, v104, v33);
              LODWORD(v518) = 0;
              goto LABEL_56;
            }
            uint64_t v105 = (uint64_t)v27;
            int PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)v553[0]);
            if (glpStringHashGet(v105, v34, v33))
            {
              uint64_t v107 = (uint64_t **)glpLinkerGetInfoLog(v536);
              *(void *)&long long v542 = "-1";
              *((void *)&v542 + 1) = 0xEDA00000002;
              *(void *)&long long v543 = 0xFFFFFFFFLL;
              glpLogMessage(v107, 0, (uint64_t)&v542, "Duplicate transform feedback bindings specified for '%.*s.'", v108, v109, v110, v111, v33);
              LODWORD(v518) = 0;
              unsigned int v27 = (const char *)v105;
              int v25 = (int)v527;
              goto LABEL_56;
            }
            glpStringHashPut(v105, v34, v33, 1, v106);
            uint64_t v112 = v536;
            uint64_t v113 = glpLinkerPoolAlloc(v536);
            *(void *)uint64_t v113 = v518;
            *(void *)(v113 + 8) = v552;
            LODWORD(v116) = v533;
            *(_DWORD *)(v113 + 16) = v523;
            *(_DWORD *)(v113 + 20) = v116;
            *(_DWORD *)(v113 + 24) = 0;
            int v114 = *(_DWORD *)(v112 + 240);
            uint64_t v115 = *(unsigned int *)(v112 + 244);
            LODWORD(v116) = v115 + 1;
            if ((int)v115 + 1 <= v114)
            {
              unsigned int v119 = *(char **)(v112 + 248);
              int v120 = *(_DWORD *)(v112 + 244);
            }
            else
            {
              if (v114 <= 1) {
                int v114 = 1;
              }
              int v117 = 2 * v114;
              if (v117 <= (int)v116) {
                uint64_t v116 = v116;
              }
              else {
                uint64_t v116 = v117;
              }
              uint64_t v516 = v116;
              uint64_t v118 = (void *)glpLinkerGetAllocator(v112);
              v515 = (char *)((uint64_t (*)(void, uint64_t, const char *))v118[1])(*v118, 8 * v516, "Vector Storage (GLPTFStore *, growth)");
              memcpy(v515, *(const void **)(v112 + 248), 8 * *(unsigned int *)(v112 + 244));
              ((void (*)(void, void))v118[3])(*v118, *(void *)(v112 + 248));
              unsigned int v119 = v515;
              *(_DWORD *)(v112 + 240) = v516;
              *(void *)(v112 + 248) = v119;
              int v120 = *(_DWORD *)(v112 + 244);
            }
            memmove(&v119[8 * v115 + 8], &v119[8 * v115], 8 * (v120 - v115));
            *(void *)(*(void *)(v112 + 248) + 8 * v115) = v113;
            ++*(_DWORD *)(v112 + 244);
            uint64_t v121 = v518;
            *((unsigned char *)v518 + 112) = 1;
            unsigned int v122 = glpABIGetTypeSize(0, *v121, 0);
            glpTypeSizeGetSize(v122);
            char v123 = (uint64_t *)glpLinkerPoolAlloc(v112);
            double v124 = (unsigned char *)glpLinkerPoolAlloc(v112);
            glpTypeGetAppleVec4Types((unsigned int *)*v121, v123, 1, 0, 0, v124, 0, 0, 0);
            if (HIDWORD(v552))
            {
              unsigned int v125 = v552;
              v518 = v123;
              int v126 = (int)v533;
              do
              {
                int ScalarCount = glpPrimitiveTypeGetScalarCount(*((unsigned int *)v518 + v125));
                v126 += glpPrimitiveTypeGetBytesPerComponent(*((unsigned int *)v518 + v125++)) * ScalarCount;
              }
              while (v125 - v552 < HIDWORD(v552));
            }
            else
            {
              int v126 = (int)v533;
            }
            LODWORD(v533) = v126;
            LODWORD(v518) = 0;
            goto LABEL_45;
          }
          LODWORD(v533) = v533 + 16;
          int ElementCount = 4;
        }
        if (*(_DWORD *)(v17 + 300) != 35980)
        {
          uint64_t v50 = (uint64_t **)glpLinkerGetInfoLog(v17);
          *(void *)&long long v542 = "-1";
          *((void *)&v542 + 1) = 0xEDA00000002;
          *(void *)&long long v543 = 0xFFFFFFFFLL;
          glpLogMessage(v50, 0, (uint64_t)&v542, "Usage of '%.*s' disallowed if transformFeedbackBufferMode != GL_INTERLEAVED_ATTRIBS.", v51, v52, v53, v54, v33);
          goto LABEL_56;
        }
        int PrimitiveType = 0;
LABEL_45:
        uint64_t v41 = malloc_type_malloc(0x18uLL, 0x7081ABB9uLL);
        if (!v41
          || (uint64_t v42 = (uint64_t)v41,
              *uint64_t v41 = 0,
              v41[1] = 0,
              uint64_t v43 = v33,
              v41[2] = 0,
              (uint64_t v44 = (char *)malloc_type_malloc(v33, 0x7081ABB9uLL)) == 0))
        {
          abort();
        }
        uint64_t v45 = v44;
        memcpy(v44, v34, v33);
        unsigned int v47 = v33 >> 5;
        if (v33 >> 5 >= v33)
        {
          uint64_t v49 = v33;
        }
        else
        {
          unsigned int v48 = ~(v33 >> 5);
          LODWORD(v49) = v33;
          do
          {
            uint64_t v49 = (32 * v49 + (v49 >> 2) + v45[(v33 - 1)]) ^ v49;
            LODWORD(v33) = v33 + v48;
          }
          while (v33 > v47);
        }
        *(void *)uint64_t v42 = v45;
        *(void *)(v42 + 8) = v43 | (v49 << 32);
        *(_DWORD *)(v42 + 16) = ElementCount;
        *(_DWORD *)(v42 + 20) = PrimitiveType;
        glpIntHashPut(*(void *)(v536 + 344), v30, v42, v46);
        if (!v31)
        {
          uint64_t v13 = v531;
          uint64_t v17 = v536;
          uint64_t v24 = v532;
          unsigned int v27 = (const char *)v525;
LABEL_71:
          int v25 = (int)v527;
          goto LABEL_72;
        }
        int v55 = v523;
        uint64_t v13 = v531;
        unsigned int v27 = (const char *)v525;
        int v25 = (int)v527;
        if (v523 < 4)
        {
          uint64_t v61 = v536;
          uint64_t v62 = (void *)glpLinkerPoolAlloc(v536);
          uint64_t v63 = glpLinkerGetAllocator(v536);
          *uint64_t v62 = glpMakeLayoutObject(v63);
          if (v533)
          {
            uint64_t v64 = glpLinkerGetAllocator(v61);
            uint64_t v65 = (void *)*v62;
            *(void *)&long long v542 = "-1";
            *((void *)&v542 + 1) = 0xEDA00000002;
            *(void *)&long long v543 = 0xFFFFFFFFLL;
            glpLayoutObjectAppendInteger(v64, 0, (uint64_t)&v542, 0, 0, v65, 33, 2);
            uint64_t v66 = glpLinkerGetAllocator(v61);
            uint64_t v67 = (void *)*v62;
            *(void *)&long long v542 = "-1";
            *((void *)&v542 + 1) = 0xEDA00000002;
            *(void *)&long long v543 = 0xFFFFFFFFLL;
            glpLayoutObjectAppendInteger(v66, 0, (uint64_t)&v542, 0, 0, v67, 46, 10);
            uint64_t v68 = glpLinkerGetAllocator(v61);
            uint64_t v69 = (void *)*v62;
            *(void *)&long long v542 = "-1";
            *((void *)&v542 + 1) = 0xEDA00000002;
            *(void *)&long long v543 = 0xFFFFFFFFLL;
            glpLayoutObjectAppendInteger(v68, 0, (uint64_t)&v542, 0, 0, v69, 65, v55);
            uint64_t v70 = glpLinkerGetAllocator(v61);
            unsigned int v71 = (void *)*v62;
            *(void *)&long long v542 = "-1";
            *((void *)&v542 + 1) = 0xEDA00000002;
            *(void *)&long long v543 = 0xFFFFFFFFLL;
            glpLayoutObjectAppendInteger(v70, 0, (uint64_t)&v542, 0, 0, v71, 66, (int)v518);
            uint64_t v72 = glpLinkerGetAllocator(v61);
            uint64_t v73 = (void *)*v62;
            *(void *)&long long v542 = "-1";
            *((void *)&v542 + 1) = 0xEDA00000002;
            *(void *)&long long v543 = 0xFFFFFFFFLL;
            glpLayoutObjectAppendInteger(v72, 0, (uint64_t)&v542, 0, 0, v73, 67, (int)v533);
          }
          int v74 = *(_DWORD *)(v61 + 224);
          uint64_t v75 = *(unsigned int *)(v61 + 228);
          uint64_t v24 = v532;
          if ((int)v75 + 1 <= v74)
          {
            uint64_t v79 = v61;
            unsigned int v80 = *(char **)(v61 + 232);
            int v81 = v75;
          }
          else
          {
            if (v74 <= 1) {
              int v74 = 1;
            }
            int v76 = 2 * v74;
            if (v76 <= (int)v75 + 1) {
              unsigned int v77 = v75 + 1;
            }
            else {
              unsigned int v77 = v76;
            }
            unsigned int v78 = (void *)glpLinkerGetAllocator(v61);
            uint64_t v79 = v61;
            unsigned int v80 = (char *)((uint64_t (*)(void, uint64_t, const char *))v78[1])(*v78, 8 * v77, "Vector Storage (GLPTFBuffer *, growth)");
            memcpy(v80, *(const void **)(v79 + 232), 8 * *(unsigned int *)(v79 + 228));
            ((void (*)(void, void))v78[3])(*v78, *(void *)(v79 + 232));
            *(_DWORD *)(v79 + 224) = v77;
            unsigned int v27 = (const char *)v525;
            *(void *)(v79 + 232) = v80;
            int v81 = *(_DWORD *)(v79 + 228);
          }
          memmove(&v80[8 * v75 + 8], &v80[8 * v75], 8 * (v81 - v75));
          *(void *)(*(void *)(v79 + 232) + 8 * v75) = v62;
          int v82 = *(_DWORD *)(v79 + 228) + 1;
          int v83 = v520;
          int v84 = (int)v533;
          if (v520 <= v533) {
            int v83 = (int)v533;
          }
          LODWORD(v520) = v83;
          *(_DWORD *)(v79 + 228) = v82;
          LODWORD(v519) = v84 + v519;
          uint64_t v523 = (v523 + 1);
          LODWORD(v518) = -1;
          LODWORD(v533) = 0;
          uint64_t v17 = v79;
          goto LABEL_71;
        }
        uint64_t v17 = v536;
        uint64_t v56 = (uint64_t **)glpLinkerGetInfoLog(v536);
        *(void *)&long long v542 = "-1";
        *((void *)&v542 + 1) = 0xEDA00000002;
        *(void *)&long long v543 = 0xFFFFFFFFLL;
        glpLogMessage(v56, 0, (uint64_t)&v542, "Exceeded max transform feedback buffers of %d, with %d.", v57, v58, v59, v60, 4);
LABEL_56:
        uint64_t v24 = 0;
LABEL_72:
        ++v30;
        uint64_t v28 = *(void *)(v17 + 96);
        unint64_t v29 = *(unsigned int *)(v28 + 4);
        if (v30 >= v29) {
          goto LABEL_102;
        }
      }
    }
    LODWORD(v519) = 0;
    LODWORD(v520) = 0;
LABEL_102:
    uint64_t StringHash = glpDestroyStringHash((uint64_t)v27);
    int v128 = *(_DWORD *)(v17 + 300);
    if (v128 == 35980)
    {
      a5 = v529;
      if (v519 >= 0x104)
      {
        uint64_t v134 = (uint64_t **)glpLinkerGetInfoLog(v17);
        *(void *)&long long v542 = "-1";
        *((void *)&v542 + 1) = 0xEDA00000002;
        *(void *)&long long v543 = 0xFFFFFFFFLL;
        glpLogMessage(v134, 0, (uint64_t)&v542, "Exceeded max transform feedback interleaved components of %d, with %d.", v135, v136, v137, v138, 64);
        return 0;
      }
    }
    else
    {
      a5 = v529;
      if (v128 == 35981 && v520 >= 0x14)
      {
        int v129 = (uint64_t **)glpLinkerGetInfoLog(v17);
        *(void *)&long long v542 = "-1";
        *((void *)&v542 + 1) = 0xEDA00000002;
        *(void *)&long long v543 = 0xFFFFFFFFLL;
        glpLogMessage(v129, 0, (uint64_t)&v542, "Exceeded max transform feedback separate components of %d, with %d.", v130, v131, v132, v133, 4);
        return 0;
      }
    }
    if (!v24) {
      return v24;
    }
  }
  if (!a5 || (unint64_t v139 = *(unsigned int *)(a5 + 32), !v139))
  {
    unsigned int v141 = 0x80000000;
    if (!v13) {
      goto LABEL_317;
    }
    goto LABEL_196;
  }
  unint64_t v140 = 0;
  uint64_t v517 = v17 + 4 * v528 + 276;
  unsigned int v141 = 0x80000000;
  uint64_t v142 = "Copy Binding";
  do
  {
    uint64_t v143 = *(void *)(a5 + 40);
    unsigned int v144 = *(uint64_t **)(v143 + 32 * v140);
    if (!v144) {
      goto LABEL_192;
    }
    uint64_t v145 = v143 + 32 * v140;
    uint64_t v146 = *(const char **)(v145 + 8);
    uint64_t v147 = *(const char **)(v145 + 16);
    double v148 = (unsigned int *)v144[15];
    v552 = 0;
    v553[0] = v148;
    uint64_t StringHash = v144[1];
    v552 = (unsigned int *)*v144;
    if (!StringHash
      || (uint64_t StringHash = (uint64_t)glpLayoutObjectFind((uint64_t *)StringHash, 28)) == 0
      && (uint64_t StringHash = (uint64_t)glpLayoutObjectFind((uint64_t *)v144[1], 29)) == 0)
    {
      long long v550 = 0u;
      long long v551 = 0u;
      long long v548 = 0u;
      long long v549 = 0u;
      long long v546 = 0u;
      long long v547 = 0u;
      long long v545 = 0u;
      long long v544 = 0u;
      long long v543 = 0u;
      long long v542 = 0u;
      long long v149 = *(_OWORD *)v144;
      long long v543 = *((_OWORD *)v144 + 1);
      long long v542 = v149;
      long long v150 = *((_OWORD *)v144 + 2);
      long long v151 = *((_OWORD *)v144 + 3);
      long long v152 = *((_OWORD *)v144 + 5);
      long long v546 = *((_OWORD *)v144 + 4);
      long long v547 = v152;
      long long v545 = v151;
      long long v544 = v150;
      long long v153 = *((_OWORD *)v144 + 6);
      long long v154 = *((_OWORD *)v144 + 7);
      long long v155 = *((_OWORD *)v144 + 9);
      long long v550 = *((_OWORD *)v144 + 8);
      long long v551 = v155;
      long long v548 = v153;
      long long v549 = v154;
      if (v147 >= 3)
      {
        uint64_t v525 = (uint64_t)v147;
        uint64_t StringHash = strncmp("gl_", v146, 3uLL);
        if (!StringHash
          || v525 >= 9
          && (uint64_t StringHash = strncmp("$ib$", v146, 4uLL), !StringHash)
          && (uint64_t StringHash = strncmp("$gl_", v146 + 5, 4uLL), !StringHash))
        {
          if (!v525
            || *v146 != 36
            || v525 >= 9
            && (uint64_t StringHash = strncmp("$ib$", v146, 4uLL), !StringHash)
            && (uint64_t StringHash = strncmp("$gl_", v146 + 5, 4uLL), !StringHash))
          {
            int v156 = (uint64_t *)v144[1];
            uint64_t v520 = (uint64_t)v146;
            if (v156)
            {
              uint64_t v157 = glpLayoutObjectFind(v156, 79);
              double v158 = (uint64_t *)v144[1];
              BOOL v159 = v157 == 0;
              if (v158) {
                int v160 = glpLayoutObjectFind(v158, 80);
              }
              else {
                int v160 = 0;
              }
            }
            else
            {
              int v160 = 0;
              BOOL v159 = 1;
            }
            long long v533 = v144;
            if (!v13
              || *(_DWORD *)(v536 + 296)
              || (uint64_t v161 = inputForOutput(v13, v520, v525)) == 0
              || !v160
              || !*((_DWORD *)v144 + 32)
              || (uint64_t v162 = v161, !*(_DWORD *)(v161 + 128)))
            {
              if (glpTypeGetKind((unsigned int *)v542) == 3) {
                *(void *)&long long v542 = glpBankTypeGetElementType(v542);
              }
              goto LABEL_150;
            }
            uint64_t v541 = *(void *)(v161 + 120);
            long long v540 = *(unsigned int **)v161;
            uint64_t v17 = v536;
            int InputOutputBitsType = getInputOutputBitsType(v536, v534, v161, &v541, &v540, v528, (uint64_t *)v553, &v552);
            uint64_t StringHash = (uint64_t)v552;
            *((unsigned int **)&v549 + 1) = v553[0];
            *(void *)&long long v542 = v552;
            if (v24) {
              BOOL v164 = InputOutputBitsType == 0;
            }
            else {
              BOOL v164 = 1;
            }
            uint64_t v24 = !v164;
            if (InputOutputBitsType)
            {
              if (!glpTypesEqual(v552, (uint64_t)v540)
                || ((*(void *)(v162 + 48) ^ v144[6]) & 0x6F000000000) != 0)
              {
                long long v532 = (uint64_t **)glpLinkerGetInfoLog(v536);
                unint64_t v165 = v142;
                unsigned __int8 v166 = glpLanguageToString(v534);
                glpLanguageToString(v528);
                long long v537 = "-1";
                uint64_t v538 = 0xEDA00000002;
                uint64_t v539 = 0xFFFFFFFFLL;
                unsigned int v144 = v533;
                char v510 = v166;
                uint64_t v142 = v165;
                glpLogMessage(v532, 0, (uint64_t)&v537, "Input of %s shader '%.*s' differs in type/qualifiers to that written by %s shader", v167, v168, v169, v170, v510);
                uint64_t v24 = 0;
              }
LABEL_150:
              unsigned int v171 = glpABIGetTypeSize(0, v542, 0);
              unsigned int Size = glpTypeSizeGetSize(v171);
              uint64_t StringHash = glpLinkerPoolAlloc(v536);
              *(void *)uint64_t StringHash = 0;
              *(void *)(StringHash + 8) = 0;
              *(void *)uint64_t StringHash = &v542;
              if (v24)
              {
                uint64_t v173 = StringHash;
                LODWORD(v518) = v159;
                uint64_t v174 = v144[6];
                int v175 = glpLayoutObjectFind((uint64_t *)v144[1], 78);
                if (v175) {
                  glpIntHashPut(*v530, *((_DWORD *)v175 + 4), -1, v176);
                }
                double v177 = glpLayoutObjectFind((uint64_t *)v144[1], 69);
                LODWORD(v532) = v24;
                long long v519 = (void *)v140;
                if (v177)
                {
                  uint64_t v178 = v536;
                  uint64_t v179 = (void *)glpLinkerGetAllocator(v536);
                  unsigned int v180 = glpCopyLayoutObject(v179, (void **)v144[1]);
                  unsigned int v181 = glpLayoutObjectFind(v180, 69);
                  unsigned int v182 = *((_DWORD *)v181 + 4);
                  *((_DWORD *)v181 + 4) = 0;
                  int SlotsWithGLPType = allocateSlotsWithGLPType(v178, *v530, 0, (uint64_t **)v173, v174 & 0x7F00000001FLL, v174 & 0x7F00000001FLL, v180, 0, v182, 0x20u);
                  if (v528 == 1 && SlotsWithGLPType) {
                    v144[1] = *(void *)(glpIntHashGet(*v530, v182) + 24);
                  }
                }
                else
                {
                  uint64_t v185 = (_DWORD *)glpLinkerPoolAlloc(v536);
                  uint64_t v523 = Size;
                  uint64_t v527 = (unsigned char *)glpLinkerPoolAlloc(v536);
                  glpTypeGetAppleVec4Types((unsigned int *)v542, v185, 1, 0, 0, v527, 0, 0, 0);
                  if (glpLayoutObjectFind((uint64_t *)v144[1], 31))
                  {
                    if (Size)
                    {
                      uint64_t v186 = 0;
                      unsigned int v187 = 0;
                      unsigned int v188 = 0;
                      unsigned int v189 = 0;
                      uint64_t v190 = 0;
                      do
                      {
                        if (glpPrimitiveTypeGetScalarCount(v185[v186]))
                        {
                          unsigned int v191 = 0;
                          do
                          {
                            BOOL v192 = v189 > 3;
                            if (v189 <= 3) {
                              uint64_t v193 = v190;
                            }
                            else {
                              uint64_t v193 = 0;
                            }
                            if (v189 > 3) {
                              unsigned int v189 = 0;
                            }
                            if (v192) {
                              ++v188;
                            }
                            if (BitSetGetEquals(*((uint64_t *)&v549 + 1), v186))
                            {
                              if (!v193)
                              {
                                uint64_t v194 = v536;
                                uint64_t v190 = glpLinkerPoolAlloc(v536);
                                *(_OWORD *)uint64_t v190 = 0u;
                                *(_OWORD *)(v190 + 16) = 0u;
                                glpIntHashPut(*v530, v141, v190, 0.0);
                                uint64_t v195 = v533;
                                *(void *)(v190 + 8) = v533[6] & 0x7F00000001FLL | ((unint64_t)v527[v186] >> 3);
                                *(_DWORD *)(v190 + 4) = glpPrimitiveTypeGetScalarType(v185[v186]);
                                *(void *)(v190 + 24) = offsetLayout(v194, (void **)v195[1], v188);
                                unsigned int v187 = v141++;
                              }
                              uint64_t v196 = *(unsigned int *)(v173 + 8);
                              uint64_t v197 = v173 + 8 * v196;
                              *(_DWORD *)(v197 + 16) = v187;
                              *(_DWORD *)(v197 + 20) = v189;
                              *(_DWORD *)(v173 + 8) = v196 + 1;
                              *(_DWORD *)v190 |= 1 << v189;
                              int ScalarType = glpPrimitiveTypeGetScalarType(v185[v186]);
                              int v199 = componentCountForSet(*(_DWORD *)v190);
                              *(_DWORD *)(v190 + 4) = glpGetVectorType(ScalarType, v199);
                              uint64_t v193 = v190;
                            }
                            else
                            {
                              uint64_t v190 = v193;
                            }
                            ++v191;
                            ++v189;
                          }
                          while (v191 < glpPrimitiveTypeGetScalarCount(v185[v186]));
                        }
                        else
                        {
                          uint64_t v193 = v190;
                        }
                        ++v186;
                        uint64_t v190 = v193;
                        a5 = v529;
                        unsigned int v144 = v533;
                      }
                      while (v186 != v523);
                    }
                  }
                  else if (Size)
                  {
                    uint64_t v200 = 0;
                    do
                    {
                      if (BitSetGetEquals(*((uint64_t *)&v549 + 1), v200))
                      {
                        uint64_t v201 = glpLinkerPoolAlloc(v536);
                        *(_OWORD *)uint64_t v201 = 0u;
                        *(_OWORD *)(v201 + 16) = 0u;
                        glpIntHashPut(*v530, v141, v201, 0.0);
                        if (glpPrimitiveTypeGetScalarCount(v185[v200]))
                        {
                          unsigned int v202 = 0;
                          do
                          {
                            uint64_t v203 = *(unsigned int *)(v173 + 8);
                            uint64_t v204 = v173 + 8 * v203;
                            *(_DWORD *)(v204 + 16) = v141;
                            *(_DWORD *)(v204 + 20) = v202;
                            *(_DWORD *)(v173 + 8) = v203 + 1;
                            *(_DWORD *)v201 |= 1 << v202++;
                          }
                          while (v202 < glpPrimitiveTypeGetScalarCount(v185[v200]));
                        }
                        *(void *)(v201 + 8) = v144[6] & 0x7F00000001FLL | ((unint64_t)v527[v200] >> 3);
                        *(_DWORD *)(v201 + 4) = v185[v200];
                        *(void *)(v201 + 24) = offsetLayout(v536, (void **)v144[1], v200);
                        ++v141;
                      }
                      ++v200;
                    }
                    while (v200 != v523);
                  }
                }
                *(void *)uint64_t v173 = v144;
                glpStringHashPut(*v521, (const char *)v520, v525, v173, v184);
                if (v518) {
                  *(_DWORD *)v517 += *(_DWORD *)(v173 + 8);
                }
                uint64_t v17 = v536;
                unsigned int v205 = (void *)glpLinkerPoolAlloc(v536);
                *unsigned int v205 = 0;
                v205[1] = 0;
                *(_DWORD *)unsigned int v205 = -1;
                v205[1] = *v144;
                uint64_t StringHash = glpStringHashPut(*v522, (const char *)v520, v525, (uint64_t)v205, v206);
                uint64_t v13 = v531;
                uint64_t v24 = v532;
                unint64_t v140 = (unint64_t)v519;
                uint64_t v142 = "Copy Binding";
              }
              else
              {
                uint64_t v17 = v536;
              }
            }
          }
        }
      }
    }
    unint64_t v139 = *(unsigned int *)(a5 + 32);
LABEL_192:
    ++v140;
  }
  while (v140 < v139);
  if (!v13) {
    goto LABEL_317;
  }
LABEL_196:
  if (*(_DWORD *)(v13 + 32))
  {
    unint64_t v207 = 0;
    uint64_t v517 = v17 + 4 * v534 + 256;
    while (2)
    {
      uint64_t v208 = *(void *)(v13 + 40);
      uint64_t v209 = *(uint64_t **)(v208 + 32 * v207);
      if (v209)
      {
        uint64_t v210 = v208 + 32 * v207;
        uint64_t v211 = *(const char **)(v210 + 8);
        uint64_t v212 = *(void *)(v210 + 16);
        uint64_t StringHash = v209[1];
        if (!StringHash
          || (uint64_t StringHash = (uint64_t)glpLayoutObjectFind((uint64_t *)StringHash, 28)) == 0
          && (uint64_t StringHash = (uint64_t)glpLayoutObjectFind((uint64_t *)v209[1], 29)) == 0)
        {
          long long v533 = v209;
          if (v212 >= 3)
          {
            uint64_t StringHash = strncmp("gl_", v211, 3uLL);
            if (!StringHash
              || v212 >= 9
              && (uint64_t StringHash = strncmp("$ib$", v211, 4uLL), !StringHash)
              && (uint64_t StringHash = strncmp("$gl_", v211 + 5, 4uLL), !StringHash))
            {
              if (*v211 != 36
                || v212 >= 9
                && (uint64_t StringHash = strncmp("$ib$", v211, 4uLL), !StringHash)
                && (uint64_t StringHash = strncmp("$gl_", v211 + 5, 4uLL), !StringHash))
              {
                uint64_t v236 = (uint64_t *)v209[1];
                if (v236) {
                  v518 = glpLayoutObjectFind(v236, 79);
                }
                else {
                  v518 = 0;
                }
                uint64_t v260 = (const char *)v209[15];
                long long v537 = v260;
                int v261 = (unsigned int *)*v209;
                v553[0] = (unsigned int *)*v209;
                if (v24)
                {
                  uint64_t v24 = getInputOutputBitsType(v17, v534, (uint64_t)v209, &v537, v553, 5, 0, 0) != 0;
                  uint64_t v260 = v537;
                  int v261 = v553[0];
                }
                long long v550 = 0u;
                long long v551 = 0u;
                long long v548 = 0u;
                long long v549 = 0u;
                long long v546 = 0u;
                long long v547 = 0u;
                long long v545 = 0u;
                long long v544 = 0u;
                long long v543 = 0u;
                long long v542 = 0u;
                long long v262 = *((_OWORD *)v209 + 8);
                long long v263 = *((_OWORD *)v209 + 9);
                long long v264 = *((_OWORD *)v209 + 6);
                long long v549 = *((_OWORD *)v209 + 7);
                long long v265 = *((_OWORD *)v209 + 1);
                long long v542 = *(_OWORD *)v209;
                long long v543 = v265;
                long long v266 = *((_OWORD *)v209 + 2);
                long long v267 = *((_OWORD *)v209 + 3);
                long long v268 = *((_OWORD *)v209 + 5);
                long long v546 = *((_OWORD *)v209 + 4);
                long long v547 = v268;
                long long v545 = v267;
                long long v544 = v266;
                long long v550 = v262;
                long long v551 = v263;
                long long v548 = v264;
                *((void *)&v549 + 1) = v260;
                *(void *)&long long v542 = v261;
                int v269 = glpTypeGetKind(v261);
                uint64_t v270 = v542;
                uint64_t v525 = (uint64_t)v211;
                if (v269 == 3) {
                  uint64_t v270 = glpBankTypeGetElementType(v542);
                }
                unsigned int v271 = glpABIGetTypeSize(0, v270, 0);
                unsigned int v272 = glpTypeSizeGetSize(v271);
                uint64_t StringHash = glpLinkerPoolAlloc(v536);
                *(void *)uint64_t StringHash = 0;
                *(void *)(StringHash + 8) = 0;
                *(void *)uint64_t StringHash = &v542;
                if (v24)
                {
                  uint64_t v273 = StringHash;
                  uint64_t v523 = v212;
                  uint64_t v274 = v209[6];
                  uint64_t v275 = glpLayoutObjectFind((uint64_t *)v209[1], 78);
                  if (v275) {
                    glpIntHashPut(*v535, *((_DWORD *)v275 + 4), -1, v276);
                  }
                  long long v519 = (void *)v207;
                  if (glpLayoutObjectFind((uint64_t *)v209[1], 35))
                  {
                    uint64_t v277 = v274 & 0x7F00000001FLL;
                    uint64_t v278 = v536;
                    int v279 = (void *)glpLinkerGetAllocator(v536);
                    uint64_t v280 = glpCopyLayoutObject(v279, (void **)v209[1]);
                    uint64_t v281 = glpLayoutObjectFind(v280, 35);
                    int v282 = *((_DWORD *)v281 + 4);
                    *((_DWORD *)v281 + 4) = 0;
                    allocateSlotsWithGLPType(v278, 0, *v535, (uint64_t **)v273, v277, v277, 0, (void **)v280, v282, 0x20u);
                  }
                  else
                  {
                    uint64_t v290 = (_DWORD *)glpLinkerPoolAlloc(v536);
                    uint64_t v520 = v272;
                    uint64_t v527 = (unsigned char *)glpLinkerPoolAlloc(v536);
                    uint64_t v291 = (unsigned int *)v542;
                    if (glpTypeGetKind((unsigned int *)v542) == 3) {
                      uint64_t v291 = (unsigned int *)glpBankTypeGetElementType((uint64_t)v291);
                    }
                    glpTypeGetAppleVec4Types(v291, v290, 1, 0, 0, v527, 0, 0, 0);
                    if (glpLayoutObjectFind((uint64_t *)v533[1], 31))
                    {
                      if (v272)
                      {
                        uint64_t v292 = 0;
                        unsigned int v293 = 0;
                        unsigned int v294 = 0;
                        unsigned int v295 = 0;
                        uint64_t v296 = 0;
                        LODWORD(v532) = v24;
                        do
                        {
                          if (glpPrimitiveTypeGetScalarCount(v290[(void)v292]))
                          {
                            unsigned int v297 = 0;
                            do
                            {
                              BOOL v298 = v295 > 3;
                              if (v295 <= 3) {
                                uint64_t v299 = v296;
                              }
                              else {
                                uint64_t v299 = 0;
                              }
                              if (v295 > 3) {
                                unsigned int v295 = 0;
                              }
                              if (v298) {
                                ++v294;
                              }
                              if (BitSetGetEquals(*((uint64_t *)&v549 + 1), v292))
                              {
                                if (!v299)
                                {
                                  uint64_t v300 = v536;
                                  uint64_t v296 = glpLinkerPoolAlloc(v536);
                                  *(_OWORD *)uint64_t v296 = 0u;
                                  *(_OWORD *)(v296 + 16) = 0u;
                                  glpIntHashPut(*v535, v141, v296, 0.0);
                                  unint64_t v301 = v533;
                                  *(void *)(v296 + 8) = v533[6] & 0x7F00000001FLL | ((unint64_t)*((unsigned __int8 *)v292 + (void)v527) >> 3);
                                  *(_DWORD *)(v296 + 4) = glpPrimitiveTypeGetScalarType(v290[(void)v292]);
                                  *(void *)(v296 + 24) = offsetLayout(v300, (void **)v301[1], v294);
                                  unsigned int v293 = v141++;
                                }
                                uint64_t v302 = *(unsigned int *)(v273 + 8);
                                uint64_t v303 = v273 + 8 * v302;
                                *(_DWORD *)(v303 + 16) = v293;
                                *(_DWORD *)(v303 + 20) = v295;
                                *(_DWORD *)(v273 + 8) = v302 + 1;
                                *(_DWORD *)v296 |= 1 << v295;
                                int v304 = glpPrimitiveTypeGetScalarType(v290[(void)v292]);
                                int v305 = componentCountForSet(*(_DWORD *)v296);
                                *(_DWORD *)(v296 + 4) = glpGetVectorType(v304, v305);
                                uint64_t v299 = v296;
                              }
                              else
                              {
                                uint64_t v296 = v299;
                              }
                              ++v297;
                              ++v295;
                            }
                            while (v297 < glpPrimitiveTypeGetScalarCount(v290[(void)v292]));
                          }
                          else
                          {
                            uint64_t v299 = v296;
                          }
                          uint64_t v292 = (uint64_t **)((char *)v292 + 1);
                          uint64_t v296 = v299;
                          a5 = v529;
                          uint64_t v24 = v532;
                        }
                        while (v292 != (uint64_t **)v520);
                      }
                    }
                    else if (v272)
                    {
                      uint64_t v308 = 0;
                      do
                      {
                        if (BitSetGetEquals(*((uint64_t *)&v549 + 1), v308))
                        {
                          uint64_t v309 = glpLinkerPoolAlloc(v536);
                          *(_OWORD *)uint64_t v309 = 0u;
                          *(_OWORD *)(v309 + 16) = 0u;
                          glpIntHashPut(*v535, v141, v309, 0.0);
                          if (glpPrimitiveTypeGetScalarCount(v290[(void)v308]))
                          {
                            unsigned int v310 = 0;
                            do
                            {
                              uint64_t v311 = *(unsigned int *)(v273 + 8);
                              uint64_t v312 = v273 + 8 * v311;
                              *(_DWORD *)(v312 + 16) = v141;
                              *(_DWORD *)(v312 + 20) = v310;
                              *(_DWORD *)(v273 + 8) = v311 + 1;
                              *(_DWORD *)v309 |= 1 << v310++;
                            }
                            while (v310 < glpPrimitiveTypeGetScalarCount(v290[(void)v308]));
                          }
                          unint64_t v313 = v533;
                          *(void *)(v309 + 8) = v533[6] & 0x7F00000001FLL | ((unint64_t)*((unsigned __int8 *)v308
                                                                                                 + (void)v527) >> 3);
                          *(_DWORD *)(v309 + 4) = v290[(void)v308];
                          *(void *)(v309 + 24) = offsetLayout(v536, (void **)v313[1], v308);
                          ++v141;
                        }
                        uint64_t v308 = (uint64_t **)((char *)v308 + 1);
                      }
                      while (v308 != (uint64_t **)v520);
                    }
                  }
                  uint64_t v17 = v536;
                  uint64_t v283 = propagateCopyBindings(v536, (uint64_t)v533, v273);
                  uint64_t v284 = (const char *)v525;
                  uint64_t v285 = v523;
                  glpStringHashPut(*v526, (const char *)v525, v523, (uint64_t)v283, v286);
                  uint64_t v13 = v531;
                  unint64_t v207 = (unint64_t)v519;
                  if (!v518)
                  {
                    if (glpTypeGetKind((unsigned int *)v542) == 3) {
                      int v287 = glpBankTypeGetElementCount(v542);
                    }
                    else {
                      int v287 = 1;
                    }
                    *(_DWORD *)v517 += *((_DWORD *)v283 + 2) * v287;
                  }
                  uint64_t v306 = (void *)glpLinkerPoolAlloc(v17);
                  *uint64_t v306 = 0;
                  v306[1] = 0;
                  *(_DWORD *)uint64_t v306 = -1;
                  v306[1] = *v533;
                  uint64_t StringHash = glpStringHashPut(*v524, v284, v285, (uint64_t)v306, v307);
                }
                else
                {
                  uint64_t v17 = v536;
                }
                goto LABEL_264;
              }
            }
          }
          if (v534 == 4 && (v209[6] & 0x40000000) != 0)
          {
            uint64_t v213 = (uint64_t *)v209[1];
            if (v213) {
              uint64_t v520 = (uint64_t)glpLayoutObjectFind(v213, 79);
            }
            else {
              uint64_t v520 = 0;
            }
            uint64_t v214 = v209[15];
            uint64_t v215 = (unsigned int *)*v209;
            LODWORD(v527) = v24 != 0;
            long long v550 = 0u;
            long long v551 = 0u;
            long long v548 = 0u;
            long long v549 = 0u;
            long long v546 = 0u;
            long long v547 = 0u;
            long long v545 = 0u;
            long long v544 = 0u;
            long long v543 = 0u;
            long long v542 = 0u;
            long long v216 = *((_OWORD *)v209 + 8);
            long long v217 = *((_OWORD *)v209 + 9);
            long long v218 = *((_OWORD *)v209 + 6);
            long long v549 = *((_OWORD *)v209 + 7);
            long long v219 = *((_OWORD *)v209 + 1);
            long long v542 = *(_OWORD *)v209;
            long long v543 = v219;
            long long v220 = *((_OWORD *)v209 + 2);
            long long v221 = *((_OWORD *)v209 + 3);
            long long v222 = *((_OWORD *)v209 + 5);
            long long v546 = *((_OWORD *)v209 + 4);
            long long v547 = v222;
            long long v545 = v221;
            long long v544 = v220;
            long long v550 = v216;
            long long v551 = v217;
            long long v548 = v218;
            *((void *)&v549 + 1) = v214;
            *(void *)&long long v542 = v215;
            int v223 = glpTypeGetKind(v215);
            uint64_t v224 = v542;
            uint64_t v523 = v212;
            if (v223 == 3) {
              uint64_t v224 = glpBankTypeGetElementType(v542);
            }
            unsigned int v225 = glpABIGetTypeSize(0, v224, 0);
            unsigned int v226 = glpTypeSizeGetSize(v225);
            uint64_t StringHash = glpLinkerPoolAlloc(v536);
            *(void *)uint64_t StringHash = &v542;
            *(void *)(StringHash + 8) = 0;
            if (v24)
            {
              uint64_t v227 = StringHash;
              uint64_t v525 = (uint64_t)v211;
              long long v519 = (void *)v207;
              uint64_t v228 = (uint64_t *)v209[1];
              if (v228)
              {
                uint64_t v229 = glpLayoutObjectFind(v228, 78);
                if (v229) {
                  glpIntHashPut(*v535, *((_DWORD *)v229 + 4), -1, v230);
                }
              }
              uint64_t v231 = v226;
              uint64_t v232 = (_DWORD *)glpLinkerPoolAlloc(v536);
              long long v532 = (uint64_t **)glpLinkerPoolAlloc(v536);
              uint64_t v233 = (unsigned int *)v542;
              if (glpTypeGetKind((unsigned int *)v542) == 3) {
                uint64_t v233 = (unsigned int *)glpBankTypeGetElementType((uint64_t)v233);
              }
              glpTypeGetAppleVec4Types(v233, v232, 1, 0, 0, v532, 0, 0, 0);
              uint64_t v234 = (uint64_t *)v533[1];
              if (v234) {
                uint64_t v235 = glpLayoutObjectFind(v234, 26);
              }
              else {
                uint64_t v235 = 0;
              }
              uint64_t v237 = (int *)glpStringHashGet(*(void *)(v536 + 80), (const char *)v533[2], v533[3]);
              if (v235)
              {
                uint64_t v237 = (int *)(v235 + 2);
                goto LABEL_233;
              }
              if (v237)
              {
LABEL_233:
                int v238 = *v237;
                if (v226)
                {
LABEL_234:
                  uint64_t v239 = 0;
                  do
                  {
                    if (BitSetGetEquals(*((uint64_t *)&v549 + 1), v239))
                    {
                      uint64_t v240 = glpLinkerPoolAlloc(v536);
                      *(_OWORD *)uint64_t v240 = 0u;
                      *(_OWORD *)(v240 + 16) = 0u;
                      glpIntHashPut(*v535, v141, v240, 0.0);
                      if (glpPrimitiveTypeGetScalarCount(v232[v239]))
                      {
                        unsigned int v241 = 0;
                        do
                        {
                          uint64_t v242 = *(unsigned int *)(v227 + 8);
                          uint64_t v243 = v227 + 8 * v242;
                          *(_DWORD *)(v243 + 16) = v141;
                          *(_DWORD *)(v243 + 20) = v241;
                          *(_DWORD *)(v227 + 8) = v242 + 1;
                          *(_DWORD *)v240 |= 1 << v241++;
                        }
                        while (v241 < glpPrimitiveTypeGetScalarCount(v232[v239]));
                      }
                      *(void *)(v240 + 8) = v533[6] & 0x7F00000001FLL | ((unint64_t)*((unsigned __int8 *)v532
                                                                                             + v239) >> 3);
                      *(_DWORD *)(v240 + 4) = v232[v239];
                      uint64_t v244 = v536;
                      uint64_t v245 = (void *)glpLinkerGetAllocator(v536);
                      unsigned int v246 = glpCopyLayoutObject(v245, *(void ***)(v240 + 24));
                      *(void *)(v240 + 24) = v246;
                      if (!v246)
                      {
                        uint64_t v247 = glpLinkerGetAllocator(v244);
                        *(void *)(v240 + 24) = glpMakeLayoutObject(v247);
                      }
                      uint64_t v248 = glpLinkerGetAllocator(v244);
                      unsigned int v249 = *(void **)(v240 + 24);
                      long long v537 = "-1";
                      uint64_t v538 = 0xEDA00000002;
                      uint64_t v539 = 0xFFFFFFFFLL;
                      glpLayoutObjectAppendInteger(v248, 0, (uint64_t)&v537, 0, 0, v249, 33, 0);
                      uint64_t v250 = glpLinkerGetAllocator(v244);
                      unsigned int v251 = *(void **)(v240 + 24);
                      long long v537 = "-1";
                      uint64_t v538 = 0xEDA00000002;
                      uint64_t v539 = 0xFFFFFFFFLL;
                      glpLayoutObjectAppendInteger(v250, 0, (uint64_t)&v537, 0, 0, v251, 34, 27);
                      uint64_t v252 = glpLinkerGetAllocator(v244);
                      uint64_t v253 = *(void **)(v240 + 24);
                      long long v537 = "-1";
                      uint64_t v538 = 0xEDA00000002;
                      uint64_t v539 = 0xFFFFFFFFLL;
                      glpLayoutObjectAppendInteger(v252, 0, (uint64_t)&v537, 0, 0, v253, 45, v238 + v239);
                      ++v141;
                    }
                    ++v239;
                  }
                  while (v239 != v231);
                }
              }
              else
              {
                int v238 = 0;
                if (v226) {
                  goto LABEL_234;
                }
              }
              uint64_t v17 = v536;
              unsigned int v254 = v533;
              unsigned int v255 = propagateCopyBindings(v536, (uint64_t)v533, v227);
              unsigned int v256 = (const char *)v525;
              uint64_t v257 = v523;
              glpStringHashPut(*v526, (const char *)v525, v523, (uint64_t)v255, v258);
              uint64_t v13 = v531;
              a5 = v529;
              unint64_t v207 = (unint64_t)v519;
              if (!v520)
              {
                if (glpTypeGetKind((unsigned int *)v542) == 3) {
                  int v259 = glpBankTypeGetElementCount(v542);
                }
                else {
                  int v259 = 1;
                }
                *(_DWORD *)(v536 + 272) += *((_DWORD *)v255 + 2) * v259;
                unsigned int v256 = (const char *)v525;
                unsigned int v254 = v533;
              }
              uint64_t v288 = (void *)glpLinkerPoolAlloc(v17);
              void *v288 = 0;
              v288[1] = 0;
              *(_DWORD *)uint64_t v288 = -1;
              v288[1] = *v254;
              uint64_t StringHash = glpStringHashPut(*v524, v256, v257, (uint64_t)v288, v289);
            }
            else
            {
              uint64_t v17 = v536;
            }
            uint64_t v24 = v527;
          }
        }
      }
LABEL_264:
      if (++v207 >= *(unsigned int *)(v13 + 32)) {
        break;
      }
      continue;
    }
  }
  if (!a5) {
    goto LABEL_419;
  }
  uint64_t v314 = *v530;
  if (*(_DWORD *)(*v530 + 32))
  {
    uint64_t v315 = 0;
    unint64_t v316 = 0;
    do
    {
      uint64_t v317 = *(void *)(v314 + 40);
      if (*(void *)(v317 + v315))
      {
        unsigned int v318 = *(_DWORD *)(v317 + v315 + 8);
        uint64_t StringHash = glpIntHashGet(*v535, v318);
        if (!StringHash) {
          uint64_t StringHash = glpIntHashPut(*v535, v318, -1, v319);
        }
      }
      ++v316;
      v315 += 16;
    }
    while (v316 < *(unsigned int *)(v314 + 32));
  }
  uint64_t v320 = *v535;
  if (*(_DWORD *)(*v535 + 32))
  {
    uint64_t v321 = 0;
    unint64_t v322 = 0;
    do
    {
      uint64_t v323 = *(void *)(v320 + 40);
      if (*(void *)(v323 + v321))
      {
        unsigned int v324 = *(_DWORD *)(v323 + v321 + 8);
        uint64_t StringHash = glpIntHashGet(*v530, v324);
        if (!StringHash) {
          uint64_t StringHash = glpIntHashPut(*v530, v324, -1, v325);
        }
      }
      ++v322;
      v321 += 16;
    }
    while (v322 < *(unsigned int *)(v320 + 32));
  }
LABEL_317:
  if (a5)
  {
    v513[1] = v513;
    MEMORY[0x270FA5388](StringHash);
    if (v326 >= 0x200) {
      size_t v327 = 512;
    }
    else {
      size_t v327 = v326;
    }
    long long v533 = (void *)((char *)v513 - ((v326 + 15) & 0xFFFFFFFF0));
    bzero(v533, v327);
    uint64_t v328 = a5;
    uint64_t v329 = *(unsigned int *)(a5 + 32);
    if (v329)
    {
      unsigned int v330 = 0;
      uint64_t v331 = (uint64_t *)(*(void *)(v328 + 40) + 16);
      do
      {
        uint64_t v332 = *(v331 - 2);
        if (v332)
        {
          uint64_t v333 = *(v331 - 1);
          uint64_t v334 = *v331;
          if (*v331 < 3
            || (uint64_t StringHash = strncmp("gl_", (const char *)*(v331 - 1), 3uLL), StringHash)
            && (v334 < 9
             || (uint64_t StringHash = strncmp("$ib$", (const char *)v333, 4uLL), StringHash)
             || (uint64_t StringHash = strncmp("$gl_", (const char *)(v333 + 5), 4uLL), StringHash)))
          {
            if (!v334
              || *(unsigned char *)v333 != 36
              || v334 >= 9
              && (uint64_t StringHash = strncmp("$ib$", (const char *)v333, 4uLL), !StringHash)
              && (uint64_t StringHash = strncmp("$gl_", (const char *)(v333 + 5), 4uLL), !StringHash)
              || (v334 & 0xFFFFFFFC) != 0
              && *(unsigned char *)(v333 + 1) == 105
              && *(unsigned char *)(v333 + 2) == 98
              && *(unsigned char *)(v333 + 3) == 36)
            {
              v533[v330++] = v332;
            }
          }
        }
        v331 += 4;
        --v329;
      }
      while (v329);
    }
    else
    {
      unsigned int v330 = 0;
    }
    uint64_t v335 = v536;
    if (*(_DWORD *)(v536 + 296)) {
      qsort(v533, v330, 8uLL, (int (__cdecl *)(const void *, const void *))compareVariableObjectsLocationFirstNameSecond);
    }
    uint64_t v13 = v531;
    if (v330)
    {
      uint64_t v336 = 0;
      if (v528 == 1) {
        int v337 = 5;
      }
      else {
        int v337 = 3;
      }
      LODWORD(v515) = v337;
      v513[0] = v335 + 4 * v528 + 276;
      uint64_t v338 = v330;
      uint64_t v525 = v330;
      do
      {
        uint64_t v339 = v533[v336];
        uint64_t v340 = *(unsigned int **)(v339 + 120);
        v552 = 0;
        v553[0] = v340;
        v552 = *(unsigned int **)v339;
        long long v550 = 0u;
        long long v551 = 0u;
        long long v548 = 0u;
        long long v549 = 0u;
        long long v546 = 0u;
        long long v547 = 0u;
        long long v545 = 0u;
        long long v544 = 0u;
        long long v543 = 0u;
        long long v542 = 0u;
        long long v341 = *(_OWORD *)v339;
        long long v543 = *(_OWORD *)(v339 + 16);
        long long v342 = *(_OWORD *)(v339 + 32);
        long long v343 = *(_OWORD *)(v339 + 48);
        long long v344 = *(_OWORD *)(v339 + 80);
        long long v546 = *(_OWORD *)(v339 + 64);
        long long v547 = v344;
        long long v545 = v343;
        long long v544 = v342;
        long long v345 = *(_OWORD *)(v339 + 96);
        long long v346 = *(_OWORD *)(v339 + 112);
        long long v347 = *(_OWORD *)(v339 + 144);
        long long v550 = *(_OWORD *)(v339 + 128);
        long long v551 = v347;
        long long v548 = v345;
        long long v549 = v346;
        long long v542 = v341;
        uint64_t v348 = *(const char **)(v339 + 16);
        uint64_t v349 = *(void *)(v339 + 24);
        unsigned int v350 = *(uint64_t **)(v339 + 8);
        if (v350)
        {
          uint64_t v351 = glpLayoutObjectFind(v350, 79);
          if (!v13) {
            goto LABEL_367;
          }
        }
        else
        {
          uint64_t v351 = 0;
          if (!v13) {
            goto LABEL_367;
          }
        }
        if (!*(_DWORD *)(v335 + 296))
        {
          uint64_t v352 = inputForOutput(v13, (uint64_t)v348, v349);
          if (v352)
          {
            uint64_t v353 = v352;
            uint64_t v541 = *(void *)(v352 + 120);
            long long v540 = *(unsigned int **)v352;
            int v354 = getInputOutputBitsType(v335, v534, v352, &v541, &v540, v528, (uint64_t *)v553, &v552);
            uint64_t StringHash = (uint64_t)v552;
            *((unsigned int **)&v549 + 1) = v553[0];
            *(void *)&long long v542 = v552;
            if (v24) {
              BOOL v355 = v354 == 0;
            }
            else {
              BOOL v355 = 1;
            }
            uint64_t v24 = !v355;
            if (!v354) {
              goto LABEL_405;
            }
            int v356 = glpTypesEqual(v552, (uint64_t)v540);
            uint64_t v527 = v351;
            if (!v356 || ((*(void *)(v353 + 48) ^ *(void *)(v339 + 48)) & 0x6F000000000) != 0)
            {
              uint64_t v357 = glpLinkerGetInfoLog(v335);
              unsigned __int8 v358 = glpLanguageToString(v534);
              glpLanguageToString(v528);
              long long v537 = "-1";
              uint64_t v538 = 0xEDA00000002;
              uint64_t v539 = 0xFFFFFFFFLL;
              uint64_t v13 = v531;
              char v511 = v358;
              uint64_t v335 = v536;
              uint64_t v359 = (uint64_t **)v357;
              uint64_t v338 = v525;
              glpLogMessage(v359, 0, (uint64_t)&v537, "Input of %s shader '%.*s' differs in type/qualifiers to that written by %s shader", v360, v361, v362, v363, v511);
              goto LABEL_365;
            }
            if (v24)
            {
              unsigned int SizeInBits = BitSetGetSizeInBits(*((uint64_t *)&v549 + 1));
              if (SizeInBits < BitSetGetSizeInBits(v541))
              {
                uint64_t v416 = glpLinkerGetAllocator(v335);
                unsigned int v417 = BitSetGetSizeInBits(v541);
                uint64_t v418 = BitSetNewWithAllocator(v417, *(void *)v416, *(uint64_t (**)(uint64_t, uint64_t, const char *))(v416 + 8), *(void *)(v416 + 16), *(void *)(v416 + 24));
                if (BitSetGetSizeInBits(*((uint64_t *)&v549 + 1)))
                {
                  unsigned int v419 = 0;
                  do
                  {
                    if (BitSetGetEquals(*((uint64_t *)&v549 + 1), v419)) {
                      BitSetSetEquals(v418, v419);
                    }
                    ++v419;
                  }
                  while (v419 < BitSetGetSizeInBits(*((uint64_t *)&v549 + 1)));
                }
                *((void *)&v549 + 1) = v418;
                *(void *)(v339 + 120) = v418;
                uint64_t v335 = v536;
              }
              BitSetAndEquals(*((uint64_t *)&v549 + 1), v541);
              int v420 = BitSetEqualsTest(*((uint64_t *)&v549 + 1), v541);
              uint64_t v338 = v525;
              if (!v420)
              {
                uint64_t v421 = glpLinkerGetInfoLog(v335);
                unsigned __int8 v422 = glpLanguageToString(v534);
                glpLanguageToString(v528);
                long long v537 = "-1";
                uint64_t v538 = 0xEDA00000002;
                uint64_t v539 = 0xFFFFFFFFLL;
                uint64_t v13 = v531;
                char v512 = v422;
                uint64_t v335 = v536;
                int v423 = (uint64_t **)v421;
                uint64_t v338 = v525;
                glpLogMessage(v423, 0, (uint64_t)&v537, "Input of %s shader '%.*s' not properly written by %s shader", v424, v425, v426, v427, v512);
                goto LABEL_365;
              }
            }
            else
            {
LABEL_365:
              uint64_t v24 = 0;
            }
            int v364 = 1;
            goto LABEL_369;
          }
        }
LABEL_367:
        uint64_t v527 = v351;
        int v364 = 0;
        uint64_t v353 = 0;
        if (glpTypeGetKind((unsigned int *)v542) == 3) {
          *(void *)&long long v542 = glpBankTypeGetElementType(v542);
        }
LABEL_369:
        uint64_t StringHash = *(void *)(v339 + 8);
        if (StringHash && (uint64_t StringHash = (uint64_t)glpLayoutObjectFind((uint64_t *)StringHash, 9)) != 0) {
          int v365 = *(_DWORD *)(StringHash + 16);
        }
        else {
          int v365 = 0;
        }
        if (*(_DWORD *)(v335 + 296)) {
          char v366 = 1;
        }
        else {
          char v366 = v364;
        }
        if (v366)
        {
          if (v365 || !v24) {
            goto LABEL_405;
          }
          unsigned int v367 = glpABIGetTypeSize(0, v542, 0);
          glpTypeSizeGetSize(v367);
          uint64_t v368 = glpLinkerPoolAlloc(v335);
          *(void *)uint64_t v368 = 0;
          *(void *)(v368 + 8) = 0;
          uint64_t v520 = v368;
          *(void *)uint64_t v368 = &v542;
          uint64_t v517 = *(void *)(v339 + 48);
          uint64_t v369 = (uint64_t *)(v517 & 0x7F00000001FLL);
          long long v519 = (void *)(v517 & 0x7F00000001FLL);
          if (v364) {
            uint64_t v369 = (uint64_t *)(*(void *)(v353 + 48) & 0x7F00000001FLL);
          }
          v518 = v369;
          uint64_t v370 = *(uint64_t **)(v339 + 8);
          LODWORD(v532) = v24;
          if (v370 && (v371 = glpLayoutObjectFind(v370, 26)) != 0)
          {
            LODWORD(v516) = 0;
            uint64_t v514 = v371;
            int v372 = remapSlotToCode[*((int *)v371 + 4)];
            unsigned int v373 = (char *)&v548 + 8;
          }
          else
          {
            uint64_t v514 = 0;
            LODWORD(v523) = -1;
            int v372 = 1;
            unsigned int v373 = (char *)&v545;
          }
          *((_DWORD *)v373 - 64) = v372;
          uint64_t v380 = glpLinkerGetAllocator(v335);
          LayoutObject = glpMakeLayoutObject(v380);
          uint64_t v382 = glpLinkerGetAllocator(v335);
          long long v537 = "-1";
          uint64_t v538 = 0xEDA00000002;
          uint64_t v539 = 0xFFFFFFFFLL;
          glpLayoutObjectAppendInteger(v382, 0, (uint64_t)&v537, 0, 0, LayoutObject, 33, (int)v515);
          uint64_t v383 = glpLinkerGetAllocator(v335);
          long long v537 = "-1";
          uint64_t v538 = 0xEDA00000002;
          uint64_t v539 = 0xFFFFFFFFLL;
          glpLayoutObjectAppendInteger(v383, 0, (uint64_t)&v537, 0, 0, LayoutObject, 68, 17);
          uint64_t v384 = glpLinkerGetAllocator(v335);
          long long v537 = "-1";
          uint64_t v538 = 0xEDA00000002;
          uint64_t v539 = 0xFFFFFFFFLL;
          glpLayoutObjectAppendInteger(v384, 0, (uint64_t)&v537, 0, 0, LayoutObject, 69, 0);
          uint64_t v385 = glpLinkerGetAllocator(v335);
          long long v537 = "-1";
          uint64_t v538 = 0xEDA00000002;
          uint64_t v539 = 0xFFFFFFFFLL;
          glpLayoutObjectAppendInteger(v385, 0, (uint64_t)&v537, 0, 0, LayoutObject, 70, 1);
          uint64_t v386 = glpLinkerGetAllocator(v335);
          int v387 = glpMakeLayoutObject(v386);
          uint64_t v388 = glpLinkerGetAllocator(v335);
          long long v537 = "-1";
          uint64_t v538 = 0xEDA00000002;
          uint64_t v539 = 0xFFFFFFFFLL;
          glpLayoutObjectAppendInteger(v388, 0, (uint64_t)&v537, 0, 0, v387, 33, 0);
          uint64_t v389 = glpLinkerGetAllocator(v335);
          long long v537 = "-1";
          uint64_t v538 = 0xEDA00000002;
          uint64_t v539 = 0xFFFFFFFFLL;
          glpLayoutObjectAppendInteger(v389, 0, (uint64_t)&v537, 0, 0, v387, 34, 28);
          uint64_t v390 = glpLinkerGetAllocator(v335);
          long long v537 = "-1";
          uint64_t v538 = 0xEDA00000002;
          uint64_t v539 = 0xFFFFFFFFLL;
          glpLayoutObjectAppendInteger(v390, 0, (uint64_t)&v537, 0, 0, v387, 35, 0);
          uint64_t v391 = glpLinkerGetAllocator(v335);
          long long v537 = "-1";
          uint64_t v538 = 0xEDA00000002;
          uint64_t v539 = 0xFFFFFFFFLL;
          glpLayoutObjectAppendInteger(v391, 0, (uint64_t)&v537, 0, 0, v387, 38, 1);
          uint64_t v392 = 0;
          char v393 = v364 ^ 1;
          if (!v535) {
            char v393 = 1;
          }
          if ((v393 & 1) == 0) {
            uint64_t v392 = *v535;
          }
          uint64_t v394 = (uint64_t **)v520;
          int v395 = allocateSlotsWithGLPType(v536, *v530, v392, (uint64_t **)v520, (uint64_t)v518, (unint64_t)v519, LayoutObject, (void **)v387, v523, glpBuiltInConstantValues[8 * (*(unsigned char *)(v536 + 60) == 4) + 2]);
          int v397 = v395;
          uint64_t v24 = v532;
          uint64_t v398 = v527;
          if (v528 == 1)
          {
            if (v395)
            {
              uint64_t v399 = glpIntHashGet(*v530, v523);
              if (v399) {
                *(void *)(v339 + 8) = *(void *)(v399 + 24);
              }
            }
          }
          uint64_t v13 = v531;
          if (!v398) {
            *(_DWORD *)v513[0] += *((_DWORD *)v394 + 2);
          }
          uint64_t v400 = v536;
          if (!v397)
          {
            uint64_t v401 = (uint64_t **)glpLinkerGetInfoLog(v536);
            unsigned int v402 = 4 * glpBuiltInConstantValues[8 * (*(unsigned char *)(v400 + 60) == 4) + 2];
            long long v537 = "-1";
            uint64_t v538 = 0xEDA00000002;
            uint64_t v539 = 0xFFFFFFFFLL;
            glpLogMessage(v401, 0, (uint64_t)&v537, "Implementation limit of %d %s components exceeded. Unable to allocate '%.*s'.", v403, v404, v405, v406, v402);
            uint64_t v24 = 0;
            if ((v516 & 1) == 0)
            {
              v407 = (uint64_t **)glpLinkerGetInfoLog(v400);
              int v408 = *((_DWORD *)v514 + 4);
              long long v537 = "-1";
              uint64_t v538 = 0xEDA00000002;
              uint64_t v539 = 0xFFFFFFFFLL;
              glpLogMessage(v407, 0, (uint64_t)&v537, "Or active varying aliasing. One or more slots starting at %d unavailable for '%.*s' from layout location request.", v409, v410, v411, v412, v408);
              uint64_t v24 = 0;
            }
          }
          *uint64_t v394 = (uint64_t *)v339;
          glpStringHashPut(*v521, v348, v349, (uint64_t)v394, v396);
          long long v413 = (void *)glpLinkerPoolAlloc(v400);
          *long long v413 = 0;
          v413[1] = 0;
          *(_DWORD *)long long v413 = -1;
          v413[1] = *(void *)v339;
          uint64_t StringHash = glpStringHashPut(*v522, v348, v349, (uint64_t)v413, v414);
          uint64_t v335 = v400;
        }
        else
        {
          if (*(unsigned char *)(v339 + 112) || v365) {
            goto LABEL_405;
          }
          int v374 = (uint64_t **)glpLinkerGetInfoLog(v335);
          char v379 = glpLanguageToString(v528);
          if (v13) {
            glpLanguageToString(v534);
          }
          long long v537 = "-1";
          uint64_t v538 = 0xEDA00000002;
          uint64_t v539 = 0xFFFFFFFFLL;
          uint64_t StringHash = (uint64_t)glpLogMessage(v374, 1u, (uint64_t)&v537, "Output of %s shader '%.*s' not read by %s %s", v375, v376, v377, v378, v379);
          uint64_t v335 = v536;
        }
        uint64_t v338 = v525;
LABEL_405:
        ++v336;
      }
      while (v336 != v338);
    }
    a5 = v529;
  }
  if (v13)
  {
LABEL_419:
    long long v519 = v513;
    MEMORY[0x270FA5388](StringHash);
    char v429 = (char *)v513 - ((v428 + 15) & 0xFFFFFFFF0);
    if (v428 >= 0x200) {
      size_t v430 = 512;
    }
    else {
      size_t v430 = v428;
    }
    bzero((char *)v513 - ((v428 + 15) & 0xFFFFFFFF0), v430);
    uint64_t v431 = v13;
    uint64_t v432 = *(unsigned int *)(v13 + 32);
    if (v432)
    {
      LODWORD(v433) = 0;
      unsigned __int8 v434 = (uint64_t *)(*(void *)(v431 + 40) + 16);
      while (1)
      {
        uint64_t v435 = *(v434 - 2);
        if (v435)
        {
          uint64_t v436 = v24;
          uint64_t v437 = *(v434 - 1);
          uint64_t v438 = *v434;
          if (*v434 < 3
            || strncmp("gl_", (const char *)*(v434 - 1), 3uLL)
            && (v438 < 9
             || strncmp("$ib$", (const char *)v437, 4uLL)
             || strncmp("$gl_", (const char *)(v437 + 5), 4uLL)))
          {
            if (!v438
              || *(unsigned char *)v437 != 36
              || v438 >= 9
              && !strncmp("$ib$", (const char *)v437, 4uLL)
              && !strncmp("$gl_", (const char *)(v437 + 5), 4uLL))
            {
              goto LABEL_440;
            }
            if ((v438 & 0xFFFFFFFC) != 0)
            {
              uint64_t v24 = v436;
              if (*(unsigned char *)(v437 + 1) != 105 || *(unsigned char *)(v437 + 2) != 98) {
                goto LABEL_443;
              }
              if (*(unsigned char *)(v437 + 3) == 36)
              {
LABEL_440:
                if (v534 != 4 || (*(unsigned char *)(v435 + 51) & 0x40) == 0)
                {
                  *(void *)&v429[8 * v433] = v435;
                  LODWORD(v433) = v433 + 1;
                }
              }
            }
          }
          uint64_t v24 = v436;
        }
LABEL_443:
        v434 += 4;
        if (!--v432) {
          goto LABEL_446;
        }
      }
    }
    LODWORD(v433) = 0;
LABEL_446:
    uint64_t v439 = v536;
    if (*(_DWORD *)(v536 + 296)) {
      qsort(v429, v433, 8uLL, (int (__cdecl *)(const void *, const void *))compareVariableObjectsLocationFirstNameSecond);
    }
    uint64_t v13 = v531;
    uint64_t v440 = v524;
    if (v433)
    {
      uint64_t v433 = v433;
      uint64_t v520 = v439 + 4 * v534 + 256;
      while (1)
      {
        uint64_t v441 = *(void *)v429;
        v443 = *(const char **)(*(void *)v429 + 16);
        uint64_t v442 = *(void *)(*(void *)v429 + 24);
        v444 = *(uint64_t **)(*(void *)v429 + 8);
        if (v444) {
          long long v533 = glpLayoutObjectFind(v444, 79);
        }
        else {
          long long v533 = 0;
        }
        if (!*(_DWORD *)(v439 + 296))
        {
          if (v529)
          {
            uint64_t v448 = outputForInput(*v522, (uint64_t)v443, v442);
            if (v448)
            {
              if (v24)
              {
                glpStringHashPut(*v440, v443, v442, v448, v449);
                uint64_t v450 = outputForInput(*v521, (uint64_t)v443, v442);
                int v451 = propagateCopyBindings(v439, v441, v450);
                glpStringHashPut(*v526, v443, v442, (uint64_t)v451, v452);
                if (!v533) {
                  *(_DWORD *)v520 += *((_DWORD *)v451 + 2);
                }
              }
              goto LABEL_480;
            }
          }
          v486 = (uint64_t **)glpLinkerGetInfoLog(v439);
          char v491 = glpLanguageToString(v534);
          if (v529) {
            glpLanguageToString(v528);
          }
          *(void *)&long long v542 = "-1";
          *((void *)&v542 + 1) = 0xEDA00000002;
          *(void *)&long long v543 = 0xFFFFFFFFLL;
          glpLogMessage(v486, 0, (uint64_t)&v542, "Input of %s shader '%.*s' not written by %s %s", v487, v488, v489, v490, v491);
          uint64_t v24 = 0;
          goto LABEL_479;
        }
        v445 = *(unsigned int **)(v441 + 120);
        v553[0] = v445;
        char v446 = *(unsigned int **)v441;
        v552 = *(unsigned int **)v441;
        if (v24)
        {
          BOOL v447 = getInputOutputBitsType(v439, v534, v441, v553, &v552, 5, 0, 0) != 0;
          char v446 = v552;
          v445 = v553[0];
        }
        else
        {
          BOOL v447 = 0;
        }
        long long v550 = 0u;
        long long v551 = 0u;
        long long v548 = 0u;
        long long v549 = 0u;
        long long v546 = 0u;
        long long v547 = 0u;
        long long v545 = 0u;
        long long v544 = 0u;
        long long v543 = 0u;
        long long v542 = 0u;
        long long v453 = *(_OWORD *)(v441 + 128);
        long long v454 = *(_OWORD *)(v441 + 144);
        long long v455 = *(_OWORD *)(v441 + 96);
        long long v549 = *(_OWORD *)(v441 + 112);
        long long v456 = *(_OWORD *)(v441 + 16);
        long long v542 = *(_OWORD *)v441;
        long long v543 = v456;
        long long v457 = *(_OWORD *)(v441 + 32);
        long long v458 = *(_OWORD *)(v441 + 48);
        long long v459 = *(_OWORD *)(v441 + 80);
        long long v546 = *(_OWORD *)(v441 + 64);
        long long v547 = v459;
        long long v545 = v458;
        long long v544 = v457;
        long long v550 = v453;
        long long v551 = v454;
        long long v548 = v455;
        *((void *)&v549 + 1) = v445;
        *(void *)&long long v542 = v446;
        int v460 = glpTypeGetKind(v446);
        uint64_t v461 = v542;
        if (v460 == 3) {
          uint64_t v461 = glpBankTypeGetElementType(v542);
        }
        long long v532 = (uint64_t **)v443;
        unsigned int v462 = glpABIGetTypeSize(0, v461, 0);
        glpTypeSizeGetSize(v462);
        uint64_t v463 = glpLinkerPoolAlloc(v439);
        *(void *)uint64_t v463 = 0;
        *(void *)(v463 + 8) = 0;
        *(void *)uint64_t v463 = &v542;
        uint64_t v464 = *(void *)(v441 + 48);
        int v465 = *(uint64_t **)(v441 + 8);
        if (!v465) {
          break;
        }
        unsigned int v466 = glpLayoutObjectFind(v465, 26);
        int v467 = v466;
        if (!v466) {
          goto LABEL_469;
        }
        int v468 = 0;
        int v469 = remapSlotToCode[*((int *)v466 + 4)];
        if (v447) {
          goto LABEL_470;
        }
LABEL_467:
        uint64_t v24 = 0;
        uint64_t v13 = v531;
LABEL_479:
        uint64_t v439 = v536;
LABEL_480:
        v429 += 8;
        if (!--v433) {
          goto LABEL_481;
        }
      }
      int v467 = 0;
LABEL_469:
      int v469 = -1;
      int v468 = 1;
      if (v447)
      {
LABEL_470:
        LODWORD(v525) = v468;
        long long v530 = (uint64_t *)v442;
        LODWORD(v527) = v469;
        uint64_t v523 = v464;
        uint64_t v470 = v464 & 0x7F00000001FLL;
        uint64_t v471 = v536;
        uint64_t v472 = glpLinkerGetAllocator(v536);
        BOOL v473 = glpMakeLayoutObject(v472);
        uint64_t v474 = glpLinkerGetAllocator(v471);
        long long v537 = "-1";
        uint64_t v538 = 0xEDA00000002;
        uint64_t v539 = 0xFFFFFFFFLL;
        glpLayoutObjectAppendInteger(v474, 0, (uint64_t)&v537, 0, 0, v473, 33, 0);
        uint64_t v475 = glpLinkerGetAllocator(v471);
        long long v537 = "-1";
        uint64_t v538 = 0xEDA00000002;
        uint64_t v539 = 0xFFFFFFFFLL;
        glpLayoutObjectAppendInteger(v475, 0, (uint64_t)&v537, 0, 0, v473, 34, 28);
        uint64_t v476 = glpLinkerGetAllocator(v471);
        long long v537 = "-1";
        uint64_t v538 = 0xEDA00000002;
        uint64_t v539 = 0xFFFFFFFFLL;
        glpLayoutObjectAppendInteger(v476, 0, (uint64_t)&v537, 0, 0, v473, 35, 0);
        uint64_t v477 = glpLinkerGetAllocator(v471);
        long long v537 = "-1";
        uint64_t v538 = 0xEDA00000002;
        uint64_t v539 = 0xFFFFFFFFLL;
        glpLayoutObjectAppendInteger(v477, 0, (uint64_t)&v537, 0, 0, v473, 38, 1);
        int v478 = allocateSlotsWithGLPType(v471, 0, *v535, (uint64_t **)v463, v470, v470, 0, (void **)v473, (int)v527, glpBuiltInConstantValues[8 * (*(unsigned char *)(v471 + 60) == 4) + 2]);
        if (!v533) {
          *(_DWORD *)v520 += *(_DWORD *)(v463 + 8);
        }
        uint64_t v13 = v531;
        uint64_t v440 = v524;
        uint64_t v479 = (uint64_t)v530;
        if (v478)
        {
          uint64_t v480 = v463;
          uint64_t v439 = v536;
          int v481 = propagateCopyBindings(v536, v441, v480);
          uint64_t v482 = (const char *)v532;
          glpStringHashPut(*v526, (const char *)v532, v479, (uint64_t)v481, v483);
          uint64_t v484 = (void *)glpLinkerPoolAlloc(v439);
          *uint64_t v484 = 0;
          v484[1] = 0;
          *(_DWORD *)uint64_t v484 = -1;
          v484[1] = *(void *)v441;
          glpStringHashPut(*v440, v482, v479, (uint64_t)v484, v485);
          uint64_t v24 = 1;
        }
        else
        {
          uint64_t v439 = v536;
          v492 = (uint64_t **)glpLinkerGetInfoLog(v536);
          unsigned int v493 = 4 * glpBuiltInConstantValues[8 * (*(unsigned char *)(v439 + 60) == 4) + 2];
          long long v537 = "-1";
          uint64_t v538 = 0xEDA00000002;
          uint64_t v539 = 0xFFFFFFFFLL;
          glpLogMessage(v492, 0, (uint64_t)&v537, "Implementation limit of %d %s components exceeded. Unable to allocate '%.*s'.", v494, v495, v496, v497, v493);
          uint64_t v24 = 0;
          if ((v525 & 1) == 0)
          {
            uint64_t v498 = (uint64_t **)glpLinkerGetInfoLog(v439);
            int v499 = *((_DWORD *)v467 + 4);
            long long v537 = "-1";
            uint64_t v538 = 0xEDA00000002;
            uint64_t v539 = 0xFFFFFFFFLL;
            glpLogMessage(v498, 0, (uint64_t)&v537, "Or active varying aliasing. One or more slots starting at %d unavailable for '%.*s' from layout location request.", v500, v501, v502, v503, v499);
            uint64_t v24 = 0;
          }
        }
        goto LABEL_480;
      }
      goto LABEL_467;
    }
LABEL_481:
    a5 = v529;
  }
  if (v528 != 1)
  {
    if (a5)
    {
      uint64_t v504 = *(unsigned int *)(*v521 + 32);
      if (v504)
      {
        uint64_t v505 = *(void *)(*v521 + 40);
        do
        {
          if (*(void *)v505) {
            *(void *)(**(void **)v505 + 8) = 0;
          }
          v505 += 32;
          --v504;
        }
        while (v504);
      }
    }
  }
  if (v13)
  {
    uint64_t v506 = *(unsigned int *)(*v526 + 32);
    if (v506)
    {
      v507 = *(uint64_t ***)(*v526 + 40);
      do
      {
        if (*v507)
        {
          uint64_t v508 = **v507;
          if (v534 != 4 || (*(void *)(v508 + 48) & 0x40000000) == 0) {
            *(void *)(v508 + 8) = 0;
          }
        }
        v507 += 4;
        --v506;
      }
      while (v506);
    }
  }
  return v24;
}

uint64_t inputForOutput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  v12[1] = *MEMORY[0x263EF8340];
  if ((a3 & 0xFFFFFFFC) != 0
    && *(unsigned char *)a2 == 36
    && *(unsigned char *)(a2 + 1) == 105
    && *(unsigned char *)(a2 + 2) == 98
    && *(unsigned char *)(a2 + 3) == 36)
  {
    uint64_t v5 = a3;
    MEMORY[0x270FA5388](a1);
    uint64_t v6 = (char *)v12 - ((v5 + 15) & 0x1FFFFFFF0);
    memcpy(v6, v7, v3);
    v6[4] = 105;
    unsigned int v8 = v3 >> 5;
    if (v3 >> 5 >= v3)
    {
      uint64_t v10 = v3;
    }
    else
    {
      unsigned int v9 = ~(v3 >> 5);
      LODWORD(v10) = v3;
      do
      {
        uint64_t v10 = (32 * v10 + (v10 >> 2) + v6[(v3 - 1)]) ^ v10;
        LODWORD(v3) = v3 + v9;
      }
      while (v3 > v8);
    }
    return glpStringHashGet(a1, (const char *)v12 - ((v5 + 15) & 0x1FFFFFFF0), v5 | (v10 << 32));
  }
  else
  {
    return glpStringHashGet(a1, (const char *)a2, a3);
  }
}

uint64_t getInputOutputBitsType(uint64_t a1, unsigned int a2, uint64_t a3, void *a4, unsigned int **a5, int a6, uint64_t *a7, unsigned int **a8)
{
  if (a7) {
    uint64_t v15 = *a7;
  }
  else {
    uint64_t v15 = 0;
  }
  if (a2 - 1 > 2) {
    return 1;
  }
  uint64_t v40 = v15;
  uint64_t v16 = *a5;
  if (glpTypeGetKind(*a5) != 3)
  {
    unsigned int v17 = *(_DWORD *)(a3 + 24);
    if (v17 >= 3)
    {
      uint64_t v18 = *(const char **)(a3 + 16);
      if (!strncmp("gl_", v18, 3uLL) || v17 >= 9 && !strncmp("$ib$", v18, 4uLL) && !strncmp("$gl_", v18 + 5, 4uLL)) {
        return 1;
      }
    }
  }
  if ((*(unsigned char *)(a3 + 53) & 2) != 0) {
    return 1;
  }
  if (a2 != 3)
  {
    int v20 = 32;
    goto LABEL_18;
  }
  int v19 = *(_DWORD *)(a1 + 308);
  if (v19 > 3)
  {
    if (v19 == 4)
    {
      int v20 = 3;
      goto LABEL_18;
    }
    if (v19 == 10)
    {
      int v20 = 4;
      goto LABEL_18;
    }
LABEL_40:
    int v20 = 6;
    goto LABEL_18;
  }
  if (!v19)
  {
    int v20 = 1;
    goto LABEL_18;
  }
  if (v19 != 1) {
    goto LABEL_40;
  }
  int v20 = 2;
LABEL_18:
  if (glpTypeGetKind(v16) != 3)
  {
    InfoLog = (uint64_t **)glpLinkerGetInfoLog(a1);
    char v28 = glpLanguageToString(a2);
    uint64_t v42 = "-1";
    uint64_t v43 = 0xEDA00000002;
    uint64_t v44 = 0xFFFFFFFFLL;
    glpLogMessage(InfoLog, 0, (uint64_t)&v42, "Input of %s shader '%.*s' not an array", v29, v30, v31, v32, v28);
    return 0;
  }
  if (glpBankTypeGetElementCount((uint64_t)v16) != v20
    && glpBankTypeGetElementCount((uint64_t)v16) != -1)
  {
    uint64_t v21 = (uint64_t **)glpLinkerGetInfoLog(a1);
    if (a2 == 3)
    {
      char v22 = glpLanguageToString(3u);
      uint64_t v42 = "-1";
      uint64_t v43 = 0xEDA00000002;
      uint64_t v44 = 0xFFFFFFFFLL;
      glpBankTypeGetElementCount((uint64_t)v16);
      glpLogMessage(v21, 0, (uint64_t)&v42, "Input of %s shader '%.*s' must be an array, with size matching input type (input type expects %u, got %u)", v23, v24, v25, v26, v22);
    }
    else
    {
      char v35 = glpLanguageToString(a2);
      uint64_t v42 = "-1";
      uint64_t v43 = 0xEDA00000002;
      uint64_t v44 = 0xFFFFFFFFLL;
      glpBankTypeGetElementCount((uint64_t)v16);
      glpLogMessage(v21, 0, (uint64_t)&v42, "Input of %s shader '%.*s' must be an array, with size matching gl_MaxPatchVertices (expected %u, got %u)", v36, v37, v38, v39, v35);
    }
    return 0;
  }
  *a5 = (unsigned int *)glpBankTypeGetElementType((uint64_t)v16);
  if (a8)
  {
    int Kind = glpTypeGetKind(*a8);
    if (a6 == 1 && Kind == 3) {
      *a8 = (unsigned int *)glpBankTypeGetElementType((uint64_t)*a8);
    }
  }
  if (a4) {
    *a4 = *(void *)(a3 + 120);
  }
  if (a7) {
    *a7 = v40;
  }
  return 1;
}

uint64_t allocateSlotsWithGLPType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t a5, unint64_t a6, uint64_t *a7, void **a8, int a9, unsigned int a10)
{
  unsigned int v16 = glpABIGetTypeSize(0, **a4, 0);
  unsigned int Size = glpTypeSizeGetSize(v16);
  uint64_t v18 = (_DWORD *)glpLinkerPoolAlloc(a1);
  uint64_t v94 = a1;
  uint64_t v91 = Size;
  unint64_t v95 = (unsigned int *)a4;
  uint64_t v87 = (unsigned char *)glpLinkerPoolAlloc(a1);
  uint64_t v88 = v18;
  glpTypeGetAppleVec4Types((unsigned int *)**a4, v18, 1, 0, 0, v87, 0, 0, 0);
  uint64_t v89 = a5;
  if ((a5 & 0x1Fu) >= (a6 & 0x1F)) {
    unint64_t v19 = a6;
  }
  else {
    unint64_t v19 = a6 & 0xFFFFFFFFFFFFFFE0 | a5 & 0x1F;
  }
  if (!Size) {
    return 1;
  }
  uint64_t v20 = 0;
  uint64_t v21 = a10;
  unint64_t v86 = v19;
  int v101 = (v19 >> 11) & 0x40000000;
  BOOL v23 = 1;
  do
  {
    int Equals = BitSetGetEquals(*(void *)(*(void *)v95 + 120), v20);
    if ((Equals || *(_DWORD *)(v94 + 296)) && v23)
    {
      unint64_t v24 = v87[v20];
      unint64_t v98 = v86 | (v24 >> 3);
      unint64_t v99 = v89 | (v24 >> 3);
      unsigned int v100 = v88[v20];
      int v97 = a9;
      uint64_t v92 = v20;
      if (!v21) {
        goto LABEL_45;
      }
      uint64_t v25 = &remapSlotToCode;
      while (1)
      {
        unsigned int v27 = *v25++;
        unsigned int v26 = v27;
        unsigned int v28 = v27 | v101;
        if (a2)
        {
          uint64_t v29 = glpIntHashGet(a2, v28);
          if (a3) {
            goto LABEL_13;
          }
        }
        else
        {
          uint64_t v29 = 0;
          if (a3)
          {
LABEL_13:
            uint64_t v30 = glpIntHashGet(a3, v28);
            goto LABEL_16;
          }
        }
        uint64_t v30 = 0;
LABEL_16:
        if (v29) {
          uint64_t v31 = (int *)v29;
        }
        else {
          uint64_t v31 = (int *)v30;
        }
        if (v31 != (int *)-1)
        {
          if (v31)
          {
            int v32 = *v31;
            BOOL v33 = a9 == -1 || v28 == a9;
            char v34 = v33;
            if (!v32 && (v34 & 1) != 0)
            {
LABEL_34:
              uint64_t v21 = a10;
              if (!(v29 | v30))
              {
                if (a2)
                {
                  uint64_t v29 = glpLinkerPoolAlloc(v94);
                  *(_OWORD *)uint64_t v29 = 0u;
                  *(_OWORD *)(v29 + 16) = 0u;
                  glpIntHashPut(a2, v28, v29, 0.0);
                  if (!a3)
                  {
                    if (v29)
                    {
                      uint64_t v30 = 0;
                      goto LABEL_43;
                    }
LABEL_45:
                    LODWORD(v30) = 0;
LABEL_46:
                    int v35 = a9;
                    uint64_t v38 = a7;
                    if (!a7)
                    {
LABEL_69:
                      BOOL v51 = 0;
                      goto LABEL_70;
                    }
                    goto LABEL_67;
                  }
                }
                else
                {
                  if (!a3) {
                    goto LABEL_45;
                  }
                  uint64_t v29 = 0;
                }
                uint64_t v30 = glpLinkerPoolAlloc(v94);
                *(_OWORD *)uint64_t v30 = 0u;
                *(_OWORD *)(v30 + 16) = 0u;
                glpIntHashPut(a3, v28, v30, 0.0);
              }
              if (v29)
              {
LABEL_43:
                *(void *)(v29 + 8) = v98;
                int ScalarType = glpPrimitiveTypeGetScalarType(v100);
                *(_DWORD *)(v29 + 4) = glpGetVectorType(ScalarType, 4);
                *(void *)(v29 + 24) = offsetLayout(v94, (void **)a7, v26);
                if (!v30)
                {
                  int v37 = 0;
                  goto LABEL_51;
                }
              }
              else
              {
                if (!v30) {
                  goto LABEL_46;
                }
                uint64_t v29 = 0;
              }
              *(void *)(v30 + 8) = v99;
              int v39 = glpPrimitiveTypeGetScalarType(v100);
              *(_DWORD *)(v30 + 4) = glpGetVectorType(v39, 4);
              *(void *)(v30 + 24) = offsetLayout(v94, a8, v26);
              int v37 = 1;
              if (v29)
              {
LABEL_51:
                int v40 = 1;
                uint64_t v41 = (int *)v29;
              }
              else
              {
                int v40 = 0;
                uint64_t v41 = (int *)v30;
              }
              int v42 = *v41;
              if (glpPrimitiveTypeGetScalarCount(v100))
              {
                unsigned int v43 = 0;
                do
                {
                  if (Equals)
                  {
                    uint64_t v44 = v95[2];
                    uint64_t v45 = &v95[2 * v44];
                    v45[4] = v28;
                    v45[5] = v43;
                    v95[2] = v44 + 1;
                  }
                  v42 |= 1 << v43;
                  if (v40)
                  {
                    *(_DWORD *)uint64_t v29 = v42;
                    int v46 = glpPrimitiveTypeGetScalarType(*(unsigned int *)(v29 + 4));
                    int v47 = componentCountForSet(*(_DWORD *)v29);
                    *(_DWORD *)(v29 + 4) = glpGetVectorType(v46, v47);
                  }
                  if (v37)
                  {
                    *(_DWORD *)uint64_t v30 = v42;
                    int v48 = glpPrimitiveTypeGetScalarType(*(unsigned int *)(v30 + 4));
                    int v49 = componentCountForSet(*(_DWORD *)v30);
                    *(_DWORD *)(v30 + 4) = glpGetVectorType(v48, v49);
                  }
                  ++v43;
                }
                while (v43 < glpPrimitiveTypeGetScalarCount(v100));
              }
              a9 = v97;
              if (v97 == -1) {
                int v35 = -1;
              }
              else {
                int v35 = v97 + 1;
              }
              LODWORD(v30) = 1;
LABEL_66:
              uint64_t v38 = a7;
              uint64_t v21 = a10;
              if (!a7) {
                goto LABEL_69;
              }
LABEL_67:
              uint64_t v50 = glpLayoutObjectFind(v38, 33);
              if (!v50) {
                goto LABEL_69;
              }
              BOOL v51 = *((_DWORD *)v50 + 4) == 5;
LABEL_70:
              if (*(_DWORD *)(v94 + 296)) {
                char v52 = 1;
              }
              else {
                char v52 = v30;
              }
              if ((v52 & 1) != 0 || v51 || v35 != -1 || glpPrimitiveTypeGetScalarType(v100) == 62) {
                goto LABEL_133;
              }
              if (!glpPrimitiveTypeGetScalarCount(v100))
              {
                LODWORD(v30) = 1;
                goto LABEL_133;
              }
              unsigned int v53 = 0;
LABEL_79:
              if (!v21) {
                goto LABEL_118;
              }
              uint64_t v54 = &remapSlotToCode;
LABEL_81:
              unsigned int v56 = *v54++;
              unsigned int v55 = v56;
              unsigned int v57 = v56 | v101;
              if (a2)
              {
                uint64_t v58 = glpIntHashGet(a2, v57);
                if (a3) {
                  goto LABEL_83;
                }
LABEL_85:
                uint64_t v59 = 0;
              }
              else
              {
                uint64_t v58 = 0;
                if (!a3) {
                  goto LABEL_85;
                }
LABEL_83:
                uint64_t v59 = glpIntHashGet(a3, v57);
              }
              if (v58) {
                uint64_t v60 = v58;
              }
              else {
                uint64_t v60 = v59;
              }
              if (v60 != -1)
              {
                if (!v60) {
                  goto LABEL_103;
                }
                if (*(_DWORD *)v60 != 15)
                {
                  if (!*(_DWORD *)v60) {
                    goto LABEL_103;
                  }
                  unint64_t v61 = v98;
                  if (!v58) {
                    unint64_t v61 = v99;
                  }
                  if (*(void *)(v60 + 8) == v61)
                  {
                    int v62 = glpPrimitiveTypeGetScalarType(*(unsigned int *)(v60 + 4));
                    BOOL v33 = v62 == glpPrimitiveTypeGetScalarType(v100);
                    a9 = v97;
                    if (v33)
                    {
                      if (!v58 || !v59)
                      {
LABEL_103:
                        uint64_t v21 = a10;
                        if (v58 | v59) {
                          goto LABEL_107;
                        }
                        if (!a2)
                        {
                          uint64_t v58 = 0;
                          if (!a3) {
                            goto LABEL_130;
                          }
LABEL_106:
                          uint64_t v59 = glpLinkerPoolAlloc(v94);
                          *(_OWORD *)uint64_t v59 = 0u;
                          *(_OWORD *)(v59 + 16) = 0u;
                          glpIntHashPut(a3, v57, v59, 0.0);
LABEL_107:
                          if (!v58) {
                            goto LABEL_109;
                          }
LABEL_108:
                          *(void *)(v58 + 8) = v98;
                          *(_DWORD *)(v58 + 4) = glpPrimitiveTypeGetScalarType(v100);
                          *(void *)(v58 + 24) = offsetLayout(v94, (void **)a7, v55);
                          uint64_t v21 = a10;
                          goto LABEL_109;
                        }
                        uint64_t v58 = glpLinkerPoolAlloc(v94);
                        *(_OWORD *)uint64_t v58 = 0u;
                        *(_OWORD *)(v58 + 16) = 0u;
                        glpIntHashPut(a2, v57, v58, 0.0);
                        if (a3) {
                          goto LABEL_106;
                        }
LABEL_130:
                        uint64_t v59 = 0;
                        if (v58) {
                          goto LABEL_108;
                        }
LABEL_109:
                        if (!v59)
                        {
                          if (v58)
                          {
LABEL_113:
                            int v63 = 1;
                            uint64_t v64 = (int *)v58;
                            goto LABEL_114;
                          }
LABEL_118:
                          LODWORD(v30) = 0;
                          goto LABEL_126;
                        }
                        *(void *)(v59 + 8) = v99;
                        *(_DWORD *)(v59 + 4) = glpPrimitiveTypeGetScalarType(v100);
                        *(void *)(v59 + 24) = offsetLayout(v94, a8, v55);
                        if (v58) {
                          goto LABEL_113;
                        }
                        int v63 = 0;
                        uint64_t v64 = (int *)v59;
LABEL_114:
                        unsigned int v65 = 0;
                        int v66 = *v64;
                        while (((1 << v65) & v66) != 0)
                        {
                          if (++v65 == 4) {
                            goto LABEL_125;
                          }
                        }
                        if (Equals)
                        {
                          uint64_t v67 = v95[2];
                          uint64_t v68 = &v95[2 * v67];
                          v68[4] = v57;
                          v68[5] = v65;
                          v95[2] = v67 + 1;
                        }
                        int v69 = (1 << v65) | v66;
                        if (v63)
                        {
                          *(_DWORD *)uint64_t v58 = v69;
                          int v70 = glpPrimitiveTypeGetScalarType(*(unsigned int *)(v58 + 4));
                          int v71 = componentCountForSet(*(_DWORD *)v58);
                          *(_DWORD *)(v58 + 4) = glpGetVectorType(v70, v71);
                        }
                        if (v59)
                        {
                          *(_DWORD *)uint64_t v59 = v69;
                          int v72 = glpPrimitiveTypeGetScalarType(*(unsigned int *)(v59 + 4));
                          int v73 = componentCountForSet(*(_DWORD *)v59);
                          *(_DWORD *)(v59 + 4) = glpGetVectorType(v72, v73);
                        }
LABEL_125:
                        LODWORD(v30) = 1;
LABEL_126:
                        unsigned int ScalarCount = glpPrimitiveTypeGetScalarCount(v100);
                        if (!v30 || (++v53, v53 >= ScalarCount))
                        {
LABEL_133:
                          BOOL v23 = v30 != 0;
                          uint64_t v20 = v92;
                          break;
                        }
                        goto LABEL_79;
                      }
                      if (*(void *)(v59 + 8) == v99) {
                        goto LABEL_108;
                      }
                    }
                  }
                }
              }
              if (!--v21)
              {
                LODWORD(v30) = 0;
                uint64_t v21 = a10;
                goto LABEL_126;
              }
              goto LABEL_81;
            }
          }
          else if (a9 == -1 || v28 == a9)
          {
            goto LABEL_34;
          }
        }
        if (!--v21)
        {
          LODWORD(v30) = 0;
          int v35 = a9;
          goto LABEL_66;
        }
      }
    }
    if (a9 == -1) {
      a9 = -1;
    }
    else {
      ++a9;
    }
    ++v20;
  }
  while (v20 != v91);
  if (!v23)
  {
    if (v95[2])
    {
      unint64_t v75 = 0;
      int v76 = v95 + 5;
      do
      {
        if (a2)
        {
          unsigned int v77 = (_DWORD *)glpIntHashGet(a2, *(v76 - 1));
          if (a3) {
            goto LABEL_143;
          }
        }
        else
        {
          unsigned int v77 = 0;
          if (a3)
          {
LABEL_143:
            unsigned int v78 = (_DWORD *)glpIntHashGet(a3, *(v76 - 1));
            if (v77) {
              goto LABEL_147;
            }
            goto LABEL_150;
          }
        }
        unsigned int v78 = 0;
        if (v77)
        {
LABEL_147:
          int v79 = 1;
          uint64_t v80 = v77[1];
          *v77 &= ~(1 << *v76);
          int v81 = glpPrimitiveTypeGetScalarType(v80);
          if (*v77) {
            int v79 = componentCountForSet(*v77);
          }
          v77[1] = glpGetVectorType(v81, v79);
        }
LABEL_150:
        if (v78)
        {
          int v82 = 1;
          uint64_t v83 = v78[1];
          *v78 &= ~(1 << *v76);
          int v84 = glpPrimitiveTypeGetScalarType(v83);
          if (*v78) {
            int v82 = componentCountForSet(*v78);
          }
          v78[1] = glpGetVectorType(v84, v82);
        }
        ++v75;
        v76 += 2;
      }
      while (v75 < v95[2]);
    }
    v95[2] = 0;
  }
  return v23;
}

uint64_t componentCountForSet(char a1)
{
  if ((a1 & 8) != 0) {
    return 4;
  }
  if ((a1 & 4) != 0) {
    return 3;
  }
  if ((a1 & 2) != 0) {
    return 2;
  }
  if ((a1 & 1) == 0) {
    abort();
  }
  return 1;
}

void *propagateCopyBindings(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ElementType = *(unsigned int **)a2;
  if (glpTypeGetKind(*(unsigned int **)a2) == 3) {
    uint64_t ElementType = (unsigned int *)glpBankTypeGetElementType((uint64_t)ElementType);
  }
  unsigned int v7 = glpABIGetTypeSize(0, (uint64_t)ElementType, 0);
  unsigned int Size = glpTypeSizeGetSize(v7);
  uint64_t v9 = Size;
  uint64_t v10 = (_DWORD *)glpLinkerPoolAlloc(a1);
  uint64_t v11 = (unsigned char *)glpLinkerPoolAlloc(a1);
  glpTypeGetAppleVec4Types(ElementType, v10, 1, 0, 0, v11, 0, 0, 0);
  uint64_t v12 = (void *)glpLinkerPoolAlloc(a1);
  *uint64_t v12 = a2;
  v12[1] = 0;
  *((_DWORD *)v12 + 2) = 0;
  if (Size)
  {
    uint64_t v13 = 0;
    int v14 = 0;
    do
    {
      int Equals = BitSetGetEquals(*(void *)(a2 + 120), v13);
      int v16 = BitSetGetEquals(*(void *)(*(void *)a3 + 120), v13);
      if (Equals)
      {
        if (glpPrimitiveTypeGetScalarCount(v10[v13]))
        {
          unsigned int v17 = 0;
          do
          {
            uint64_t v18 = *((unsigned int *)v12 + 2);
            v12[v18 + 2] = *(void *)(a3 + 8 * (v14 + v17++) + 16);
            *((_DWORD *)v12 + 2) = v18 + 1;
          }
          while (v17 < glpPrimitiveTypeGetScalarCount(v10[v13]));
          v14 += v17;
        }
      }
      else if (v16)
      {
        v14 += glpPrimitiveTypeGetScalarCount(v10[v13]);
      }
      ++v13;
    }
    while (v13 != v9);
  }
  return v12;
}

uint64_t compareVariableObjectsLocationFirstNameSecond(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)*a2;
  uint64_t v4 = *(uint64_t **)(*a1 + 8);
  if (v4) {
    BOOL v5 = glpLayoutObjectFind(v4, 26) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  uint64_t v6 = (uint64_t *)v3[1];
  if (v6)
  {
    if (glpLayoutObjectFind(v6, 26)) {
      int v7 = 0;
    }
    else {
      int v7 = -1;
    }
  }
  else
  {
    int v7 = -1;
  }
  uint64_t result = (v7 + v5);
  if (!(v7 + v5))
  {
    uint64_t v9 = *(const char **)(v2 + 16);
    uint64_t v10 = *(void *)(v2 + 24);
    uint64_t v11 = (char *)v3[2];
    uint64_t v12 = v3[3];
    return glpStringsCompare(v9, v10, v11, v12);
  }
  return result;
}

uint64_t outputForInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  v12[1] = *MEMORY[0x263EF8340];
  if ((a3 & 0xFFFFFFFC) != 0
    && *(unsigned char *)a2 == 36
    && *(unsigned char *)(a2 + 1) == 105
    && *(unsigned char *)(a2 + 2) == 98
    && *(unsigned char *)(a2 + 3) == 36)
  {
    uint64_t v5 = a3;
    MEMORY[0x270FA5388](a1);
    uint64_t v6 = (char *)v12 - ((v5 + 15) & 0x1FFFFFFF0);
    memcpy(v6, v7, v3);
    v6[4] = 111;
    unsigned int v8 = v3 >> 5;
    if (v3 >> 5 >= v3)
    {
      uint64_t v10 = v3;
    }
    else
    {
      unsigned int v9 = ~(v3 >> 5);
      LODWORD(v10) = v3;
      do
      {
        uint64_t v10 = (32 * v10 + (v10 >> 2) + v6[(v3 - 1)]) ^ v10;
        LODWORD(v3) = v3 + v9;
      }
      while (v3 > v8);
    }
    return glpStringHashGet(a1, (const char *)v12 - ((v5 + 15) & 0x1FFFFFFF0), v5 | (v10 << 32));
  }
  else
  {
    return glpStringHashGet(a1, (const char *)a2, a3);
  }
}

uint64_t topLevelLookUpObjectTypeFromStringHash(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = glpStringHashGet(a1, a2, a3);
  if (v3) {
    return *(void *)v3;
  }
  else {
    return -1;
  }
}

uint64_t glpMakeLog(void *a1)
{
  uint64_t v2 = ((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 48, "Log");
  *(void *)uint64_t v2 = a1;
  *(unsigned char *)(v2 + 8) = 0;
  *(void *)(v2 + 16) = glpMakeStringBuffer(a1);
  *(_DWORD *)(v2 + 24) = 0;
  return v2;
}

uint64_t glpDestroyLog(uint64_t ***a1)
{
  glpDestroyStringBuffer(a1[2]);
  uint64_t v2 = (*a1)[3];
  uint64_t v3 = **a1;

  return ((uint64_t (*)(uint64_t *, uint64_t ***))v2)(v3, a1);
}

uint64_t **glpLogMessage(uint64_t **result, unsigned int a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  unsigned int v9 = result;
  if (*((_DWORD *)result + 6))
  {
    ++*((_DWORD *)result + a2 + 7);
    return result;
  }
  if (!a2) {
    *((unsigned char *)result + 8) = 1;
  }
  uint64_t v11 = result[2];
  if (*(_DWORD *)(a3 + 16) == -1)
  {
    if (a2 < 4)
    {
      glpStringBufferAppendFormat(v11, "%s: ", a3, (uint64_t)a4, a5, a6, a7, a8, (char)off_264D99B38[a2]);
      goto LABEL_10;
    }
LABEL_11:
    abort();
  }
  if (a2 >= 4) {
    goto LABEL_11;
  }
  glpStringBufferAppendFormat(v11, "%s: %.*s:%u: ", a3, (uint64_t)a4, a5, a6, a7, a8, (char)off_264D99B38[a2]);
LABEL_10:
  glpStringBufferAppendFormatv(v9[2], a4, &a9);
  return (uint64_t **)glpStringBufferAppendCString(v9[2], "\n");
}

uint64_t glpLogSuppress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 28) = 0;
  uint64_t v4 = a1 + 28;
  *(void *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 24) = 1;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
  *(_DWORD *)(v4 - 4) = 0;
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 16);

  return v5(a3, v4);
}

uint64_t glpLogGetStringBuffer(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t glpLogSetContainsErrors(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2;
  return result;
}

uint64_t glpLogContainsErrors(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t glpLogGetString(uint64_t a1)
{
  return glpStringBufferGetCString(*(uint64_t **)(a1 + 16));
}

uint64_t glpLogGetSerializedSize(uint64_t a1)
{
  glpStringBufferGetString(*(void *)(a1 + 16));
  return (v1 + 1) + 4;
}

void *glpLogSerialize(uint64_t a1, _DWORD *a2)
{
  uint64_t String = (const void *)glpStringBufferGetString(*(void *)(a1 + 16));
  unsigned int v6 = v5;
  *a2++ = *(unsigned __int8 *)(a1 + 8);
  uint64_t result = memcpy(a2, String, v5);
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

void *glpLogDeserialize(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 8) = *(_DWORD *)a2;
  return glpStringBufferAppendCString(*(uint64_t **)(a1 + 16), (char *)(a2 + 4));
}

uint64_t glpMakeNameTable(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = glpCompilerPoolAlloc(a1);
  *(void *)(v6 + 264) = a1;
  uint64_t Allocator = glpCompilerGetAllocator(a1);
  glpInitDeserialContext(v6, Allocator, Allocator, 0, 0);
  unsigned int v8 = (void *)glpCompilerGetAllocator(a1);
  uint64_t StringHash = glpMakeStringHash(v8);
  uint64_t v10 = ((uint64_t (*)(void, uint64_t, const char *))v8[1])(*v8, 40, "Name List Node");
  *(void *)(v10 + 16) = 0;
  *(void *)uint64_t v10 = StringHash;
  *(void *)(v10 + 8) = glpMakeIntHash(v8);
  *(unsigned char *)(v10 + 36) = 0;
  *(void *)(v10 + 24) = 0;
  *(void *)(v6 + 272) = v10;
  *(void *)(v6 + 280) = v10;
  uint64_t v11 = (void *)glpCompilerGetAllocator(*(void *)(v6 + 264));
  uint64_t v12 = (void *)glpCompilerGetAllocator(*(void *)(v6 + 264));
  uint64_t v13 = glpMakeStringHash(v12);
  uint64_t v14 = ((uint64_t (*)(void, uint64_t, const char *))v11[1])(*v11, 40, "Name List Node");
  *(void *)(v14 + 16) = 0;
  *(void *)uint64_t v14 = v13;
  *(void *)(v14 + 8) = glpMakeIntHash(v11);
  *(unsigned char *)(v14 + 36) = 0;
  *(void *)(v14 + 24) = 0;
  *(void *)(*(void *)(v6 + 280) + 16) = v14;
  uint64_t v15 = glpCompilerGetAllocator(*(void *)(v6 + 264));
  *(void *)(v6 + 456) = 10;
  *(void *)(v6 + 464) = (*(uint64_t (**)(void, uint64_t, const char *))(v15 + 8))(*(void *)v15, 80, "Vector Storage (GLPHashTable *)");
  *(unsigned char *)(v6 + 288) = 0;
  *(_DWORD *)(v6 + 292) = a2;
  glpNameTableSetGLSLVersion(v6, a3);
  *(void *)(v6 + 472) = 0;
  return v6;
}

uint64_t glpNameTableSetGLSLVersion(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 296) = a2;
  memset_pattern16((void *)(a1 + 300), &unk_2393D26E0, 0x98uLL);
  *(unsigned char *)(a1 + 288) = 0;
  glpDestroyIntHash(*(void *)(*(void *)(a1 + 272) + 8));
  uint64_t Allocator = (void *)glpCompilerGetAllocator(*(void *)(a1 + 264));
  uint64_t result = glpMakeIntHash(Allocator);
  *(void *)(*(void *)(a1 + 272) + 8) = result;
  int v6 = *(_DWORD *)(a1 + 292);
  if (v6 == 4)
  {
    uint64_t v10 = *(void *)(a1 + 264);
    uint64_t v8 = 8;
  }
  else
  {
    if (v6) {
      return result;
    }
    int v7 = (void *)glpCompilerPoolAlloc(*(void *)(a1 + 264));
    uint64_t v8 = 16;
    *int v7 = 16;
    glpIntHashPut(*(void *)(*(void *)(a1 + 272) + 8), 1u, (uint64_t)v7, v9);
    uint64_t v10 = *(void *)(a1 + 264);
  }
  uint64_t v11 = (void *)glpCompilerPoolAlloc(v10);
  *uint64_t v11 = v8;
  glpIntHashPut(*(void *)(*(void *)(a1 + 272) + 8), 5u, (uint64_t)v11, v12);
  uint64_t v13 = (void *)glpCompilerPoolAlloc(*(void *)(a1 + 264));
  void *v13 = 4;
  glpIntHashPut(*(void *)(*(void *)(a1 + 272) + 8), 0x11u, (uint64_t)v13, v14);
  uint64_t v15 = (void *)glpCompilerPoolAlloc(*(void *)(a1 + 264));
  *uint64_t v15 = 4;
  uint64_t result = glpIntHashPut(*(void *)(*(void *)(a1 + 272) + 8), 0x13u, (uint64_t)v15, v16);
  if (!a2)
  {
    unsigned int v17 = (void *)glpCompilerPoolAlloc(*(void *)(a1 + 264));
    *unsigned int v17 = 4;
    uint64_t v19 = *(void *)(*(void *)(a1 + 272) + 8);
    return glpIntHashPut(v19, 0x15u, (uint64_t)v17, v18);
  }
  return result;
}

uint64_t glpDestroyNameTable(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 272);
  if (v2)
  {
    do
    {
      uint64_t v3 = (uint64_t *)v2[2];
      glpDestroyStringHash(*v2);
      uint64_t Allocator = glpCompilerGetAllocator(*(void *)(a1 + 264));
      (*(void (**)(void, uint64_t *))(Allocator + 24))(*(void *)Allocator, v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unsigned int v5 = (uint64_t *)glpCompilerGetAllocator(*(void *)(a1 + 264));
  int v6 = (uint64_t (*)(uint64_t, uint64_t))v5[3];
  uint64_t v7 = *v5;

  return v6(v7, a1);
}

uint64_t glpNameTableGetLanguage(uint64_t a1)
{
  return *(unsigned int *)(a1 + 292);
}

uint64_t glpNameTablePutPrecision(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v6 = (void *)glpCompilerPoolAlloc(*(void *)(a1 + 264));
  *int v6 = a3;
  uint64_t v8 = *(void *)(*(void *)(a1 + 272) + 8);

  return glpIntHashPut(v8, a2, (uint64_t)v6, v7);
}

uint64_t glpNameTableGetGLSLVersion(uint64_t a1)
{
  return *(unsigned int *)(a1 + 296);
}

uint64_t glpNameTableSetGLSLExtensionBehavior(uint64_t result, unsigned int a2, int a3)
{
  *(_DWORD *)(result + 4 * a2 + 300) = a3;
  *(unsigned char *)(result + 288) = 0;
  if (a2 == 19 && a3 != 3) {
    *(_DWORD *)(result + 448) = 3;
  }
  return result;
}

BOOL glpNameTableIsExtensionEnabled(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(a1 + 4 * a2 + 300) != 3;
}

BOOL glpNameTableGet(uint64_t a1, char *a2, uint64_t a3, char a4, uint64_t a5)
{
  v78[0] = MEMORY[0x263EF8330];
  v78[1] = 0x40000000;
  int v79 = __glpNameTableGet_block_invoke;
  uint64_t v80 = &unk_264D99B60;
  uint64_t v81 = a5;
  uint64_t v6 = *(void *)(a1 + 272);
  if (v6)
  {
    int v7 = 0;
    uint64_t v8 = *(void *)(*(void *)(a1 + 280) + 16);
    int v9 = a4 & 2;
    do
    {
      int v10 = *(unsigned __int8 *)(v6 + 36);
      uint64_t v11 = *(void *)(a1 + 280);
      uint64_t v12 = glpStringHashGet(*(void *)v6, a2, a3);
      if (v12)
      {
        unsigned int v13 = v10 != 0;
        if (v6 == v11) {
          unsigned int v13 = 2;
        }
        if (v6 == v8) {
          uint64_t v14 = 3;
        }
        else {
          uint64_t v14 = v13;
        }
        int v15 = ((uint64_t (*)(void *, uint64_t, uint64_t))v79)(v78, v14, v12);
        if (v15 | v9) {
          return v15 != 0;
        }
      }
      else if (v9)
      {
        return 0;
      }
      if (v12) {
        BOOL v16 = v6 == v8;
      }
      else {
        BOOL v16 = 0;
      }
      if (v16) {
        int v7 = 1;
      }
      uint64_t v6 = *(void *)(v6 + 16);
    }
    while (v6);
    if (v7) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 288)) {
    goto LABEL_73;
  }
  unsigned int v17 = *(_DWORD *)(a1 + 296);
  switch(v17)
  {
    case 0u:
      goto LABEL_23;
    case 6u:
      unsigned int v17 = 1;
LABEL_23:
      uint64_t v75 = v17;
      if (builtInsArchives[v17]) {
        goto LABEL_30;
      }
      pthread_mutex_lock(&mutex);
      if (builtInsArchives[v75]) {
        goto LABEL_29;
      }
      double v18 = (void *)((char *)&poolAllocators + 32 * v75);
      glpInitPoolAllocator(0x20000, 0x20000, v18);
      int v83 = 0;
      int v82 = 0;
      if (!glpGetBIArchiveData(v75, &v82, &v83)) {
        aborting_due_to_builtin_read_failure_suggesting_corrupt_os_installation();
      }
      uint64_t v19 = glpOpenArchive(v18, v83, (uint64_t)v82);
      builtInsArchives[v75] = v19;
      if (!v19) {
        aborting_due_to_invalid_builtin_contents_suggesting_corrupt_os_installation();
      }
      uint64_t v20 = malloc_type_calloc(*((unsigned int *)&GLP_BI_INDEX_COUNT + v75), 8uLL, 0xA92C9FCEuLL);
      if (!v20) {
        goto LABEL_80;
      }
      nameTableSets[v75] = v20;
      glpLockPoolAllocator((uint64_t)v18);
LABEL_29:
      pthread_mutex_unlock(&mutex);
LABEL_30:
      uint64_t v21 = *(void *)(a1 + 280);
      char v22 = *(uint64_t **)(v21 + 16);
      if (v22)
      {
        do
        {
          BOOL v23 = (uint64_t *)v22[2];
          glpDestroyStringHash(*v22);
          uint64_t Allocator = glpCompilerGetAllocator(*(void *)(a1 + 264));
          (*(void (**)(void, uint64_t *))(Allocator + 24))(*(void *)Allocator, v22);
          char v22 = v23;
        }
        while (v23);
        uint64_t v21 = *(void *)(a1 + 280);
      }
      *(void *)(v21 + 16) = 0;
      uint64_t v25 = (void *)glpCompilerGetAllocator(*(void *)(a1 + 264));
      unsigned int v26 = (void *)glpCompilerGetAllocator(*(void *)(a1 + 264));
      uint64_t StringHash = glpMakeStringHash(v26);
      uint64_t v28 = ((uint64_t (*)(void, uint64_t, const char *))v25[1])(*v25, 40, "Name List Node");
      *(void *)(v28 + 16) = 0;
      *(void *)uint64_t v28 = StringHash;
      *(void *)(v28 + 8) = glpMakeIntHash(v25);
      *(unsigned char *)(v28 + 36) = 0;
      *(void *)(v28 + 24) = 0;
      *(void *)(*(void *)(a1 + 280) + 16) = v28;
      uint64_t v29 = glpCompilerGetAllocator(*(void *)(a1 + 264));
      (*(void (**)(void, void))(v29 + 24))(*(void *)v29, *(void *)(a1 + 464));
      uint64_t v30 = glpCompilerGetAllocator(*(void *)(a1 + 264));
      *(void *)(a1 + 456) = 10;
      *(void *)(a1 + 464) = (*(uint64_t (**)(void, uint64_t, const char *))(v30 + 8))(*(void *)v30, 80, "Vector Storage (GLPHashTable *)");
      uint64_t v31 = *((unsigned int *)&GLP_BI_INDEX_COUNT + v75);
      if (!v31) {
        goto LABEL_72;
      }
      uint64_t v32 = 0;
      BOOL v33 = GLP_BI_INDEX[v75];
      int v73 = v33;
      int v74 = (char *)&poolAllocators + 32 * v75;
      char v34 = v33 + 27;
      int v35 = v33 + 3;
      uint64_t v36 = v33 + 8;
      break;
    default:
      goto LABEL_80;
  }
  do
  {
    uint64_t v37 = HIDWORD(v33[30 * v32 + 2]);
    if (!v37) {
      goto LABEL_71;
    }
    uint64_t v38 = v34;
    while (1)
    {
      int v39 = *(_DWORD *)v38;
      uint64_t v38 = (char **)((char *)v38 + 4);
      if (v39 == *(_DWORD *)(a1 + 292)) {
        break;
      }
      if (!--v37) {
        goto LABEL_71;
      }
    }
    uint64_t v40 = HIDWORD(v33[30 * v32 + 1]);
    if (v40)
    {
      uint64_t v41 = v35;
      while (1)
      {
        int v42 = *(_DWORD *)v41;
        uint64_t v41 = (char **)((char *)v41 + 4);
        if (v42 == *(_DWORD *)(a1 + 296)) {
          break;
        }
        if (!--v40) {
          goto LABEL_44;
        }
      }
    }
    else
    {
LABEL_44:
      uint64_t v43 = LODWORD(v33[30 * v32 + 2]);
      uint64_t v44 = v36;
      if (!v43) {
        goto LABEL_71;
      }
      while (1)
      {
        unsigned int v45 = *(_DWORD *)v44;
        uint64_t v44 = (char **)((char *)v44 + 4);
        if (*(_DWORD *)(a1 + 4 * v45 + 300) != 3) {
          break;
        }
        if (!--v43) {
          goto LABEL_71;
        }
      }
    }
    pthread_mutex_lock(&mutex);
    if (!*(void *)(nameTableSets[v75] + 8 * v32))
    {
      int v46 = (const char **)&v33[30 * v32];
      glpUnlockPoolAllocator((uint64_t)v74);
      int v47 = *v46;
      uint64_t v48 = nameTableSets[v75];
      uint64_t v49 = builtInsArchives[v75];
      unsigned int v50 = strlen(*v46);
      if (v50 >> 5 >= v50)
      {
        unsigned int v52 = v50;
      }
      else
      {
        unsigned int v51 = v50;
        unsigned int v52 = v50;
        do
        {
          v52 ^= 32 * v52 + (v52 >> 2) + v47[v51 - 1];
          v51 += ~(v50 >> 5);
        }
        while (v51 > v50 >> 5);
      }
      int v83 = 0;
      int v82 = 0;
      if (!glpArchiveFileGetEntryNamed(v49, v47, v50 | ((unint64_t)v52 << 32), &v83, &v82)
        || !glpDeserializeNames((uint64_t)v74, (unsigned int *)v82, v83, (uint64_t *)(v48 + 8 * v32)))
      {
LABEL_80:
        abort();
      }
      unsigned int v53 = *v46;
      unsigned int v54 = strlen(*v46);
      if (v54 >> 5 >= v54)
      {
        unsigned int v56 = v54;
      }
      else
      {
        unsigned int v55 = v54;
        unsigned int v56 = v54;
        do
        {
          v56 ^= 32 * v56 + (v56 >> 2) + v53[v55 - 1];
          v55 += ~(v54 >> 5);
        }
        while (v55 > v54 >> 5);
      }
      glpArchiveFileFinishEntryNamed(builtInsArchives[v75], v53, v54 | ((unint64_t)v56 << 32));
      glpLockPoolAllocator((uint64_t)v74);
      BOOL v33 = v73;
    }
    pthread_mutex_unlock(&mutex);
    uint64_t v57 = *(void *)(nameTableSets[v75] + 8 * v32);
    uint64_t v58 = *(unsigned int *)(a1 + 460);
    int v59 = *(_DWORD *)(a1 + 456);
    if ((int)v58 + 1 <= v59)
    {
      uint64_t v64 = *(char **)(a1 + 464);
      int v67 = *(_DWORD *)(a1 + 460);
    }
    else
    {
      if (v59 <= 1) {
        int v59 = 1;
      }
      int v60 = 2 * v59;
      uint64_t v72 = *(void *)(nameTableSets[v75] + 8 * v32);
      uint64_t v61 = v31;
      if (v60 <= (int)v58 + 1) {
        unsigned int v62 = v58 + 1;
      }
      else {
        unsigned int v62 = v60;
      }
      uint64_t v63 = glpCompilerGetAllocator(*(void *)(a1 + 264));
      uint64_t v64 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(v63 + 8))(*(void *)v63, 8 * v62, "Vector Storage (GLPHashTable *, growth)");
      memcpy(v64, *(const void **)(a1 + 464), 8 * *(unsigned int *)(a1 + 460));
      unsigned int v65 = *(void (**)(uint64_t, void))(v63 + 24);
      uint64_t v66 = *(void *)v63;
      BOOL v33 = v73;
      v65(v66, *(void *)(a1 + 464));
      *(_DWORD *)(a1 + 456) = v62;
      uint64_t v31 = v61;
      uint64_t v57 = v72;
      *(void *)(a1 + 464) = v64;
      int v67 = *(_DWORD *)(a1 + 460);
    }
    memmove(&v64[8 * v58 + 8], &v64[8 * v58], 8 * (v67 - v58));
    *(void *)(*(void *)(a1 + 464) + 8 * v58) = v57;
    ++*(_DWORD *)(a1 + 460);
LABEL_71:
    ++v32;
    v34 += 30;
    v35 += 30;
    v36 += 30;
  }
  while (v32 != v31);
LABEL_72:
  *(unsigned char *)(a1 + 288) = 1;
LABEL_73:
  uint64_t v68 = *(unsigned int *)(a1 + 460);
  if (!v68) {
    return 0;
  }
  uint64_t v69 = 0;
  while (1)
  {
    uint64_t v70 = getAndRemapBuiltinFromScope(a1, *(void *)(*(void *)(a1 + 464) + 8 * v69), a2, a3, v69, v68, 6);
    if (v70)
    {
      if (((unsigned int (*)(void *, uint64_t, uint64_t))v79)(v78, 3, v70)) {
        break;
      }
    }
    if (v68 == ++v69) {
      return 0;
    }
  }
  return 1;
}

BOOL __glpNameTableGet_block_invoke(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  int v11 = 0;
  uint64_t v5 = *a3;
  if (v5 == 9)
  {
    uint64_t v6 = *((void *)a3 + 1);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(unsigned int **)(v6 + 8);
    uint64_t v5 = *v8;
    uint64_t v9 = *((void *)v8 + 1);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v9 = *((void *)a3 + 1);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *))(v7 + 16))(v7, v5, v9, a2, &v11);
  return v11 != 0;
}

uint64_t getAndRemapBuiltinFromScope(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, int a5, unsigned int a6, char a7)
{
  uint64_t v23 = **(void **)(*(void *)(a1 + 280) + 16);
  int v11 = (int *)glpStringHashGet(a2, a3, a4);
  if (!v11) {
    return 0;
  }
  glpReInitDeserialContext(a1, (uint64_t)(v11 + 1), *v11);
  uint64_t v24 = 0;
  deserialize_GLPNameTableEntry(a1, &v24);
  uint64_t v13 = v24;
  if (*(_DWORD *)v24 == 13)
  {
    uint64_t v14 = *(void *)(v24 + 8);
    uint64_t v15 = *(unsigned int *)(v14 + 4);
    if (v15)
    {
      uint64_t v16 = 0;
      uint64_t v13 = 0;
      uint64_t v17 = 24 * v15;
      do
      {
        uint64_t v18 = *(void *)(v14 + 8);
        if ((a7 & 2) != 0) {
          remap(a1, (int)a3, a4, a5, a6, *(void *)(v18 + v16), **(_DWORD **)(v18 + v16), *(void **)(*(void *)(v18 + v16) + 8));
        }
        if (glpStringsEqual(*(const char **)(v18 + v16 + 8), *(void *)(v18 + v16 + 16), a3, a4)) {
          uint64_t v13 = *(void *)(v18 + v16);
        }
        if ((a7 & 4) != 0) {
          glpStringHashPut(v23, *(const char **)(v18 + v16 + 8), *(void *)(v18 + v16 + 16), *(void *)(v18 + v16), v19);
        }
        v16 += 24;
      }
      while (v17 != v16);
      return v13;
    }
    return 0;
  }
  if ((a7 & 2) != 0)
  {
    remap(a1, (int)a3, a4, a5, a6, v24, *(_DWORD *)v24, *(void **)(v24 + 8));
    uint64_t v13 = v24;
  }
  if ((a7 & 4) != 0)
  {
    glpStringHashPut(v23, a3, a4, v13, v12);
    return v24;
  }
  return v13;
}

uint64_t glpNameTablePut(uint64_t a1, const char *a2, uint64_t a3, int a4, uint64_t a5)
{
  int v10 = *(uint64_t **)(a1 + 272);
  uint64_t v11 = glpStringHashGet(*v10, a2, a3);
  if (v11 && *(_DWORD *)(a1 + 296) == 1)
  {
    uint64_t v12 = v11;
    uint64_t v13 = (void *)glpCompilerPoolAlloc(*(void *)(a1 + 264));
    uint64_t v14 = glpCompilerPoolAlloc(*(void *)(a1 + 264));
    *(_DWORD *)uint64_t v14 = *(_DWORD *)v12;
    *(void *)(v14 + 8) = *(void *)(v12 + 8);
    void *v13 = v14;
    uint64_t result = glpCompilerPoolAlloc(*(void *)(a1 + 264));
    *(_DWORD *)uint64_t result = a4;
    *(void *)(result + 8) = a5;
    v13[1] = result;
    *(_DWORD *)uint64_t v12 = 9;
    *(void *)(v12 + 8) = v13;
  }
  else
  {
    uint64_t v16 = glpCompilerPoolAlloc(*(void *)(a1 + 264));
    *(_DWORD *)uint64_t v16 = a4;
    *(void *)(v16 + 8) = a5;
    uint64_t v18 = *v10;
    return glpStringHashPut(v18, a2, a3, v16, v17);
  }
  return result;
}

uint64_t glpNameTablePush(uint64_t a1, uint64_t a2)
{
  uint64_t Allocator = (void *)glpCompilerGetAllocator(*(void *)(a1 + 264));

  return nameTablePush(Allocator, (uint64_t *)(a1 + 272), a2, 0);
}

uint64_t nameTablePush(void *a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t StringHash = glpMakeStringHash(a1);
  uint64_t v9 = ((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 40, "Name List Node");
  *(void *)(v9 + 16) = 0;
  *(void *)uint64_t v9 = StringHash;
  uint64_t result = glpMakeIntHash(a1);
  *(void *)(v9 + 8) = result;
  *(unsigned char *)(v9 + 36) = a4;
  *(void *)(v9 + 24) = a3;
  *(void *)(v9 + 16) = *a2;
  *a2 = v9;
  return result;
}

uint64_t glpNameTablePushForFunction(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t Allocator = (void *)glpCompilerGetAllocator(a1[33]);
  uint64_t result = nameTablePush(Allocator, a1 + 34, a2, 1);
  a1[59] = a3;
  return result;
}

uint64_t glpNameTableSetStatementIndex(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(result + 272) + 32) = a2;
  return result;
}

uint64_t glpNameTablePop(void *a1)
{
  uint64_t v2 = a1[34];
  if (*(unsigned char *)(v2 + 36)) {
    a1[59] = 0;
  }
  glpDestroyStringHash(*(void *)v2);
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t Allocator = glpCompilerGetAllocator(a1[33]);
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(Allocator + 24))(*(void *)Allocator, v2);
  a1[34] = v3;
  return result;
}

uint64_t glpNameTableSetTopLevelBlock(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 272) + 24) = a2;
  return result;
}

uint64_t glpNameTableGetCurrentFunction(uint64_t a1)
{
  return *(void *)(a1 + 472);
}

uint64_t glpNameTableGetPrecision(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void **)(a1 + 272);
  if (!v2) {
    return 0;
  }
  while (1)
  {
    uint64_t v4 = (void *)v2[2];
    if (*v2)
    {
      uint64_t v5 = glpIntHashGet(v2[1], a2);
      if (v5) {
        break;
      }
    }
    uint64_t v2 = v4;
    if (!v4) {
      return 0;
    }
  }
  return *(void *)v5;
}

void aborting_due_to_invalid_builtin_contents_suggesting_corrupt_os_installation()
{
}

void aborting_due_to_builtin_read_failure_suggesting_corrupt_os_installation()
{
}

uint64_t remap(uint64_t a1, int a2, int a3, int a4, unsigned int a5, uint64_t a6, int a7, void *a8)
{
  *(_DWORD *)a6 = a7;
  int v10 = *(void **)(a1 + 264);
  if (a7 == 4)
  {
    uint64_t result = glpCompilerRemapObject(v10, 4, a8, 0, 1);
    uint64_t v16 = (void *)result;
    uint64_t v17 = (a4 + 1);
    if (v17 >= a5)
    {
      double v19 = (void *)result;
    }
    else
    {
      do
      {
        uint64_t result = getAndRemapBuiltinFromScope(a1, *(void *)(*(void *)(a1 + 464) + 8 * v17), a2, a3);
        if (result && (uint64_t v18 = *(void *)(result + 8)) != 0)
        {
          do
          {
            double v19 = (void *)glpCompilerPoolAlloc(*(void *)(a1 + 264));
            uint64_t result = glpCompilerRemapObject(*(void **)(a1 + 264), 10, *(void **)v18, 0, 1);
            *double v19 = result;
            v19[1] = v16;
            uint64_t v18 = *(void *)(v18 + 8);
            uint64_t v16 = v19;
          }
          while (v18);
        }
        else
        {
          double v19 = v16;
        }
        ++v17;
        uint64_t v16 = v19;
      }
      while (v17 != a5);
    }
  }
  else
  {
    uint64_t result = glpCompilerRemapObject(v10, a7, a8, 0, 1);
    double v19 = (void *)result;
  }
  *(void *)(a6 + 8) = v19;
  return result;
}

unsigned int *FinishType(unsigned int *result)
{
  unsigned int v1 = result[5];
  if (v1 >= 4)
  {
    if (v1 == 4)
    {
      unsigned int v3 = *result;
      unsigned int v2 = result[1];
      result[2] = *result;
      result[3] = v2;
      result[4] = 8;
      if (v3 >= 3)
      {
        result[2] = 2;
        result[3] = 2 * v2;
      }
    }
  }
  else
  {
    *((void *)result + 1) = *(void *)result;
    result[4] = 4;
  }
  return result;
}

double InitReg(unsigned __int16 *a1, int a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 40) = a2;
  double result = 0.0;
  *(_OWORD *)(a3 + 44) = xmmword_2393D26F0;
  *(_DWORD *)(a3 + 60) = 3;
  *(void *)(a3 + 64) = *a1;
  *(void *)(a3 + 72) = 0;
  return result;
}

double AddArray(unsigned __int16 *a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)a2 == 2)
  {
    unint64_t v6 = (*(_DWORD *)(a2 + 4) << 16) | ((unint64_t)*(unsigned int *)(a3 + 4) << 48);
    PPStreamAddParamBindingArray((uint64_t)a1, &v6);
  }
  else if (*(_DWORD *)a2 == 1)
  {
    unint64_t v6 = (*(_DWORD *)(a2 + 4) << 16) | ((unint64_t)*(unsigned int *)(a3 + 4) << 48);
    PPStreamAddTempUsageArray((uint64_t)a1, &v6);
  }
  *(_OWORD *)(a2 + 40) = xmmword_2393D2700;
  *(void *)&double result = 0x300000002;
  *(void *)(a2 + 56) = 0x300000002;
  *(void *)(a2 + 64) = *a1;
  *(void *)(a2 + 72) = 0;
  return result;
}

char *AddBinding(char *result, uint64_t a2, uint64_t a3, int a4, long long *a5, uint64_t a6)
{
  if (*((_DWORD *)a5 + 3))
  {
    uint64_t v11 = (uint64_t **)result;
    unint64_t v12 = 0;
    int v13 = 0;
    char v34 = (_OWORD *)(a2 + 8);
    uint64_t v14 = (_OWORD *)(a3 + 8);
    do
    {
      unsigned int v15 = *((_DWORD *)a5 + 2);
      char v16 = v15 - 1;
      BOOL v17 = *(_DWORD *)a5 <= v15 || (v12 & 1) == 0;
      char v18 = *(_DWORD *)a5 + ~(_BYTE)v15;
      if (v17) {
        char v18 = v16;
      }
      switch(a4)
      {
        case 0:
          unint64_t v23 = *(void *)(a6 + 8 * v12) & 0xFFFFFFFFFFFFFF3FLL | ((v18 & 3) << 6);
          *(void *)(a6 + 8 * v12) = v23;
          unint64_t v24 = v23 & 0xFFFFFFFFFFFFFFC7 | (8 * (*((_DWORD *)a5 + 5) & 7));
          *(void *)(a6 + 8 * v12) = v24;
          unint64_t v25 = v24 & 0xFFFFFFFFFFFFFFF8 | *((_DWORD *)a5 + 6) & 7;
          *(void *)(a6 + 8 * v12) = v25;
          long long v35 = v25;
          int NextIndex = PPStreamChunkListGetNextIndex(v11[6]);
          DWORD2(v35) = NextIndex;
          double result = PPStreamAddAttribBinding((uint64_t)v11, &v35);
          break;
        case 1:
          long long v35 = ((v18 & 3) << 6) | (8 * (*((unsigned char *)a5 + 20) & 7)) | *((_DWORD *)a5 + 6) & 7 | ((*((_DWORD *)a5 + 7) & 1u) << 8);
          int NextIndex = PPStreamChunkListGetNextIndex(v11[4]);
          DWORD2(v35) = NextIndex;
          double result = PPStreamAddTempUsage((uint64_t)v11, &v35);
          break;
        case 2:
          unint64_t v26 = *(void *)(a6 + 8 * v12) & 0xFFFFFFFFFFFFFF3FLL | ((v18 & 3) << 6);
          *(void *)(a6 + 8 * v12) = v26;
          unint64_t v27 = v26 & 0xFFFFFFFFFFFFFFC7 | (8 * (*((_DWORD *)a5 + 5) & 7));
          *(void *)(a6 + 8 * v12) = v27;
          unint64_t v28 = v27 & 0xFFFFFFFFFFFFFFF8 | *((_DWORD *)a5 + 6) & 7;
          *(void *)(a6 + 8 * v12) = v28;
          long long v35 = v28;
          int NextIndex = PPStreamChunkListGetNextIndex(v11[7]);
          DWORD2(v35) = NextIndex;
          double result = PPStreamAddParamBinding((uint64_t)v11, &v35);
          if ((v35 & 0x1F00) == 0x400) {
            int v13 = 2;
          }
          break;
        case 3:
        case 5:
          unint64_t v19 = *(void *)(a6 + 8 * v12) & 0xFFFFFFFFFFFFFF3FLL | ((v18 & 3) << 6);
          *(void *)(a6 + 8 * v12) = v19;
          unint64_t v20 = v19 & 0xFFFFFFFFFFFFFFC7 | (8 * (*((_DWORD *)a5 + 5) & 7));
          *(void *)(a6 + 8 * v12) = v20;
          unint64_t v21 = v20 & 0xFFFFFFFFFFFFFFF8 | *((_DWORD *)a5 + 6) & 7;
          *(void *)(a6 + 8 * v12) = v21;
          long long v35 = v21;
          int NextIndex = PPStreamChunkListGetNextIndex(v11[8]);
          DWORD2(v35) = NextIndex;
          double result = PPStreamAddOutputBinding((uint64_t)v11, &v35);
          break;
        case 4:
          LODWORD(v35) = 0;
          int NextIndex = PPStreamChunkListGetNextIndex(v11[5]);
          LODWORD(v35) = NextIndex;
          double result = PPStreamAddAddressUsage((uint64_t)v11, &v35);
          break;
        default:
          int NextIndex = 0;
          break;
      }
      long long v29 = a5[1];
      long long v35 = *a5;
      long long v36 = v29;
      int v30 = *(unsigned __int16 *)v11;
      if (!v12)
      {
        *(_DWORD *)a2 = a4;
        *(_DWORD *)(a2 + 4) = NextIndex;
        long long v31 = v36;
        *char v34 = v35;
        v34[1] = v31;
        *(_DWORD *)(a2 + 40) = v13;
        *(_OWORD *)(a2 + 44) = xmmword_2393D26F0;
        *(_DWORD *)(a2 + 60) = 3;
        *(_DWORD *)(a2 + 64) = v30;
        *(void *)(a2 + 72) = 0;
        *(_DWORD *)(a2 + 68) = 0;
      }
      unsigned int v32 = *((_DWORD *)a5 + 3);
      if (v12 == v32 - 1)
      {
        *(_DWORD *)a3 = a4;
        *(_DWORD *)(a3 + 4) = NextIndex;
        long long v33 = v36;
        *uint64_t v14 = v35;
        v14[1] = v33;
        *(_DWORD *)(a3 + 40) = v13;
        *(_OWORD *)(a3 + 44) = xmmword_2393D26F0;
        *(_DWORD *)(a3 + 60) = 3;
        *(_DWORD *)(a3 + 64) = v30;
        *(void *)(a3 + 72) = 0;
        *(_DWORD *)(a3 + 68) = 0;
        unsigned int v32 = *((_DWORD *)a5 + 3);
      }
      ++v12;
    }
    while (v12 < v32);
  }
  return result;
}

char *AddTemp(char *a1, uint64_t a2, uint64_t a3, long long *a4)
{
  return AddBinding(a1, a2, a3, 1, a4, 0);
}

char *AddConstant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v16[2] = *MEMORY[0x263EF8340];
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v16[-1] - ((v10 + 15) & 0xFFFFFFFF0);
  bzero(v11, v10);
  if (*(_DWORD *)(a4 + 12))
  {
    unint64_t v12 = 0;
    do
    {
      unint64_t v13 = *(void *)&v11[8 * v12] & 0xFFFFFFFFFFFFE0FFLL | 0x600;
      *(void *)&v11[8 * v12] = v13;
      *(void *)&v11[8 * v12] = v13 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)(unsigned __int16)PPStreamChunkListGetNextIndex(*(uint64_t **)(a1 + 128)) << 32);
      v16[0] = 0;
      v16[1] = 0;
      __memcpy_chk();
      PPStreamAddConstant(a1, v16);
      ++v12;
      a5 += 16;
    }
    while (v12 < *(unsigned int *)(a4 + 12));
  }
  return AddBinding((char *)a1, a2, a3, 2, (long long *)a4, (uint64_t)v11);
}

char *AddOpv(uint64_t a1, unsigned __int8 a2, _DWORD *a3, _DWORD *a4, uint64_t *a5, unint64_t *a6)
{
  uint64_t v109 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(*(void *)(a1 + 104) + 8);
  if (v8) {
    uint64_t v9 = v8 + 24;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v8) {
    int v10 = *(_DWORD *)(v8 + 24) & 7;
  }
  else {
    int v10 = 0;
  }
  long long v98 = 0u;
  long long v99 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v95 = 0u;
  if (a4)
  {
    if (a4[17]) {
      ++a4[19];
    }
    if (!a5)
    {
      uint64_t v13 = 1912602624;
      uint64_t v11 = 1912864768;
      uint64_t v14 = 1912668160;
      switch(a4[2])
      {
        case 1:
          goto LABEL_17;
        case 2:
          goto LABEL_16;
        case 3:
          goto LABEL_15;
        case 4:
          uint64_t v14 = 1912700928;
LABEL_15:
          uint64_t v13 = v14;
LABEL_16:
          uint64_t v11 = v13 | 0x60000;
          goto LABEL_17;
        default:
          goto LABEL_18;
      }
    }
    uint64_t v11 = *a5;
LABEL_17:
    uint64_t v13 = v11;
LABEL_18:
    if (a4[10] == 1) {
      uint64_t v15 = v13 | 0x100000000;
    }
    else {
      uint64_t v15 = v13;
    }
    v16.i64[0] = 0x100000001;
    v16.i64[1] = 0x100000001;
    int v12 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v15), (uint32x4_t)xmmword_2393D1D50), v16))- 1;
    *((void *)&v95 + 1) = v15 & 0xFFFFFF878FFFLL | ((a4[2] << 21) + 6291456) & 0x600000 | ((a4[3] << 19) + 1572864) & 0x180000 | ((*a4 & 7) << 12) | ((unint64_t)a4[1] << 48);
  }
  else
  {
    int v12 = -1;
  }
  unint64_t v17 = *a6;
  unint64_t v18 = a6[1];
  BOOL v19 = *a6 != 0;
  int v20 = *a6 | v18;
  if (*(_OWORD *)a6 == 0)
  {
    int v34 = 0;
  }
  else
  {
    uint64_t v21 = 0;
    int v20 = 0;
    int v22 = 0;
    do
    {
      unint64_t v23 = (unint64_t *)&v95 + v21 + 2;
      if (v19)
      {
        if (*(_DWORD *)(v17 + 68)) {
          ++*(_DWORD *)(v17 + 72);
        }
        if (v18)
        {
          unint64_t v24 = *(void *)v18;
        }
        else
        {
          *unint64_t v23 = 0;
          unint64_t v26 = (unint64_t)(*(_DWORD *)(v17 + 48) & 3) << 9;
          *unint64_t v23 = v26;
          unint64_t v27 = v26 & 0xFFFFE7FF | ((*(_DWORD *)(v17 + 52) & 3u) << 11);
          *unint64_t v23 = v27;
          unint64_t v28 = v27 & 0xFFFF9FFF | ((*(_DWORD *)(v17 + 56) & 3u) << 13);
          *unint64_t v23 = v28;
          unint64_t v24 = v28 & 0xFFFE7FFF | ((*(_DWORD *)(v17 + 60) & 3u) << 15);
        }
        *unint64_t v23 = v24;
        unint64_t v29 = v24 & 0xFFFFFFFFFFE7FFFFLL | ((*(_DWORD *)(v17 + 8) << 19) + 1572864) & 0x180000;
        *unint64_t v23 = v29;
        unint64_t v30 = v29 & 0xFFFFFFFFFFF9FFFFLL | ((*(_DWORD *)(v17 + 12) << 17) + 393216) & 0x60000;
        *unint64_t v23 = v30;
        unint64_t v31 = v30 & 0xFFFFFFFFFFFFFE3FLL | ((unint64_t)(*(_DWORD *)v17 & 7) << 6);
        *unint64_t v23 = v31;
        unint64_t v32 = v31 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)*(_DWORD *)(v17 + 4) << 48);
        *unint64_t v23 = v32;
        unint64_t v25 = v32 & 0xFFFFFFFFFFFFFFEFLL | (16 * (*(_DWORD *)(v17 + 44) & 1));
      }
      else
      {
        unint64_t v25 = *(void *)v18;
        int v20 = 1;
      }
      *unint64_t v23 = v25;
      uint64_t v21 = (v22 + 1);
      long long v33 = &a6[2 * v21];
      unint64_t v17 = *v33;
      unint64_t v18 = v33[1];
      BOOL v19 = *v33 != 0;
      int v22 = v21;
    }
    while (v17 | v18);
    int v34 = v21 & 7;
  }
  long long v35 = a4 + 2;
  if (a3)
  {
    long long v35 = a3;
    int v36 = -1;
  }
  else
  {
    int v36 = v12;
  }
  if (a4) {
    uint64_t v37 = v35;
  }
  else {
    uint64_t v37 = a3;
  }
  if (a4) {
    int v38 = v36;
  }
  else {
    int v38 = -1;
  }
  if (v37 && v38 == -1) {
    int v38 = *v37 - 1;
  }
  if (v20) {
    unint64_t v39 = ((unint64_t)(a4 != 0) << 32) | 0x28000;
  }
  else {
    unint64_t v39 = (unint64_t)(a4 != 0) << 32;
  }
  unint64_t v40 = v39 | v34 & 0xFFFFC03F | (a2 << 6) | (8 * v10);
  *(void *)&long long v95 = v40;
  if (v37)
  {
    unint64_t v40 = ((unint64_t)(v38 & 3) << 36) | ((unint64_t)((v37[1] - 1) & 3) << 34) | ((unint64_t)(v37[5] & 7) << 38) | v40 & 0xFFFFFFFFFFC7FFFFLL | ((v37[6] & 7) << 19);
    *(void *)&long long v95 = v40;
  }
  uint64_t v41 = 0;
  while (1)
  {
    if ((v40 & 0x3FC0) != 0 || !v9)
    {
      if ((v40 & 0x3FC0) != 0x1B40) {
        goto LABEL_157;
      }
      if (!v9) {
        goto LABEL_157;
      }
      unint64_t v42 = *(void *)v9;
      if ((*(void *)v9 & 0x3FC0) != 0x1B40) {
        goto LABEL_157;
      }
    }
    else
    {
      unint64_t v42 = *(void *)v9;
      uint64_t v43 = *(void *)v9 & 0x3FC0;
      if (v43) {
        BOOL v44 = v43 == 6976;
      }
      else {
        BOOL v44 = 1;
      }
      if (!v44) {
        goto LABEL_157;
      }
      int v45 = (v42 >> 6);
      if (v45 == 109 || v45 == 0)
      {
        BOOL v47 = *(_DWORD *)(*a6 + 68) != 0;
        goto LABEL_70;
      }
    }
    BOOL v47 = 0;
LABEL_70:
    unint64_t v48 = *(void *)(v9 + 8);
    unsigned int v49 = DWORD2(v95);
    if (((*((void *)&v95 + 1) ^ v48) & 0x7000) != 0)
    {
      BOOL v50 = 0;
    }
    else
    {
      BOOL v50 = 0;
      if (HIWORD(*((void *)&v95 + 1)) == HIWORD(v48) && ((*((void *)&v95 + 1) ^ v48) & 0xF00000000) == 0) {
        BOOL v50 = (int)(*((void *)&v95 + 1) >> 12) >> 24 == (int)(v48 >> 12) >> 24;
      }
    }
    v53 = ((int v51 = (DWORD2(v95) >> 18) & 1, (v52 = (v48 >> 18) & 1) == 0) || v51 == v52)
       && (((v48 >> 17) & 1) == 0 || ((DWORD2(v95) >> 17) & 1) == ((v48 >> 17) & 1))
       && ((v48 & 0x10000) == 0 || (HIWORD(DWORD2(v95)) & 1) == (WORD1(v48) & 1))
       && (((DWORD2(v95) >> 15) & 1) == ((v48 >> 15) & 1) || ((v48 >> 15) & 1) == 0);
    unint64_t v54 = *(void *)(v9 + 16);
    unsigned int v55 = v96;
    if ((((unint64_t)v96 ^ v54) & 0x1C0) != 0)
    {
      BOOL v56 = 0;
    }
    else
    {
      BOOL v56 = 0;
      if (WORD3(v96) == HIWORD(v54) && ((v96 ^ v54) & 0xF) == 0) {
        BOOL v56 = (int)v96 >> 24 == (int)v54 >> 24;
      }
    }
    BOOL v57 = ((v96 ^ v54) & 0x30) == 0;
    BOOL v58 = (((v96 >> 6) ^ (v48 >> 12)) & 7) == 0
       && WORD3(v96) == HIWORD(v48)
       && ((v96 ^ HIDWORD(v48)) & 1) == 0
       && (((v48 >> 33) ^ (v96 >> 1)) & 1) == 0
       && (((v48 >> 34) ^ (v96 >> 2)) & 3) == 0
       && (int)v96 >> 24 == (int)(v48 >> 12) >> 24;
    unint64_t v59 = v42 ^ v40;
    BOOL v60 = ((v42 ^ v40) & 0x9CE00380000) == 0 && v40 >> 46 == v42 >> 46;
    BOOL v61 = v60;
    if ((v40 & 0xC00000000) != 0)
    {
      BOOL v57 = 0;
      BOOL v62 = v53 && (v59 & 0x3000000000) == 0;
      unsigned int v63 = 0;
    }
    else
    {
      BOOL v62 = v53 && ((v40 >> 36) & 3) >= ((v42 >> 36) & 3);
      char v64 = !v47;
      if ((v59 & 0x3000000000) != 0) {
        char v64 = 1;
      }
      if ((v64 & 1) != 0 || *(_DWORD *)(*a6 + 72) != 1)
      {
        unsigned int v63 = 0;
      }
      else
      {
        unint64_t v65 = 0;
        v66.i64[0] = 0x300000003;
        v66.i64[1] = 0x300000003;
        int8x16_t v108 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v96), (uint32x4_t)xmmword_2393D1D30), v66);
        do
        {
          switch(v108.i32[v65])
          {
            case 0:
              unsigned int v63 = (v48 >> 18) & 1;
              break;
            case 1:
              unsigned int v63 = (v48 >> 17) & 1;
              break;
            case 2:
              unsigned int v63 = WORD1(v48) & 1;
              break;
            case 3:
              unsigned int v63 = (v48 >> 15) & 1;
              break;
            default:
              unsigned int v63 = 1;
              break;
          }
          if (v65 >= ((v40 >> 36) & 3)) {
            break;
          }
          ++v65;
        }
        while (v63);
      }
    }
    if (v63) {
      int v67 = v61;
    }
    else {
      int v67 = 0;
    }
    int v68 = v61 && v50 && v62;
    if (v58) {
      int v68 = v67;
    }
    if (v68 != 1) {
      break;
    }
    if (v41)
    {
      PPStreamChunkListRemoveChunk(*(void *)(a1 + 104), v41);
      unint64_t v42 = *(void *)v9;
      unint64_t v40 = v95;
    }
    unint64_t v69 = v40 & 0xFFFFFFFFFFFFFFC7 | (8 * ((v42 >> 3) & 7));
    *(void *)&long long v95 = v69;
    LODWORD(v99) = *(_DWORD *)(v9 + 64);
    if ((v58 & v67 & 1) == 0)
    {
      long long v92 = v98;
      long long v91 = v99;
      *(_OWORD *)(v9 + 32) = v97;
      *(_OWORD *)(v9 + 48) = v92;
      *(_OWORD *)(v9 + 64) = v91;
      long long v93 = v96;
      *(_OWORD *)uint64_t v9 = v95;
      *(_OWORD *)(v9 + 16) = v93;
      return (char *)v8;
    }
    unint64_t v40 = v69 & 0xFFFFFFFFFFFFC03FLL | ((unint64_t)(*(void *)v9 >> 6) << 6);
    uint64_t v70 = *(void *)(v9 + 16);
    *(void *)&long long v95 = v40;
    *(void *)&long long v96 = v70;
    long long v72 = v98;
    long long v71 = v99;
    *(_OWORD *)(v9 + 32) = v97;
    *(_OWORD *)(v9 + 48) = v72;
    *(_OWORD *)(v9 + 64) = v71;
    long long v73 = v96;
    *(_OWORD *)uint64_t v9 = v95;
    *(_OWORD *)(v9 + 16) = v73;
    uint64_t v41 = (uint64_t *)v8;
    uint64_t v8 = *(void *)v8;
    if (v8) {
      uint64_t v9 = v8 + 24;
    }
    else {
      uint64_t v9 = 0;
    }
  }
  if (!v61 || !v50 || !v56 || !v57 || v58)
  {
LABEL_157:
    if (!v41) {
      return PPStreamAddOperation(a1, (uint64_t)&v95, 0);
    }
    return (char *)v41;
  }
  if (v41)
  {
    PPStreamChunkListRemoveChunk(*(void *)(a1 + 104), v41);
    unsigned int v49 = DWORD2(v95);
    unsigned int v55 = v96;
    LODWORD(v48) = *(_DWORD *)(v9 + 8);
    unint64_t v54 = *(void *)(v9 + 16);
    int v51 = (DWORD2(v95) >> 18) & 1;
    unsigned int v52 = (v48 >> 18) & 1;
  }
  uint64_t v74 = 0;
  int v105 = v51;
  int8x16_t v75 = (int8x16_t)vdupq_n_s32(v49);
  memset(&v108, 0, 64);
  int8x8_t v106 = vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v75.i8, (uint32x2_t)0xFFFFFFF0FFFFFFEFLL), (int8x8_t)0x100000001);
  int8x16_t v76 = (int8x16_t)vshlq_u32((uint32x4_t)v75, (uint32x4_t)xmmword_2393D1D40);
  v75.i64[0] = 0x300000003;
  v75.i64[1] = 0x300000003;
  int v107 = (v49 >> 15) & 1;
  int8x16_t v103 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v55), (uint32x4_t)xmmword_2393D1D30), v75);
  int8x16_t v104 = vandq_s8(v76, v75);
  uint32x4_t v77 = (uint32x4_t)vdupq_n_s32(v48);
  LODWORD(v102) = v52;
  *(int8x8_t *)((char *)&v102 + 4) = vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v77.i8, (uint32x2_t)0xFFFFFFF0FFFFFFEFLL), (int8x8_t)0x100000001);
  HIDWORD(v102) = (v48 >> 15) & 1;
  int8x16_t v100 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v54), (uint32x4_t)xmmword_2393D1D30), v75);
  int8x16_t v101 = vandq_s8((int8x16_t)vshlq_u32(v77, (uint32x4_t)xmmword_2393D1D40), v75);
  while (2)
  {
    if (*(int *)((char *)&v105 + v74 * 4))
    {
      unsigned int v78 = &v103;
      int v79 = &v104;
      goto LABEL_146;
    }
    if (*(_DWORD *)((char *)&v102 + v74 * 4))
    {
      unsigned int v78 = &v100;
      int v79 = &v101;
LABEL_146:
      v108.i32[4 * v78->u32[v79->u32[v74]] + v74] = 1;
    }
    if (++v74 != 4) {
      continue;
    }
    break;
  }
  uint64_t v80 = 0;
  char v81 = 0;
  __int32 v82 = 0;
  long long v102 = 0uLL;
  int8x16_t v100 = (int8x16_t)xmmword_2393D21E0;
  int8x16_t v101 = (int8x16_t)xmmword_2393D21E0;
  int64x2_t v83 = (int64x2_t)vandq_s8(*(int8x16_t *)(v9 + 8), (int8x16_t)xmmword_2393D2710);
  *(int64x2_t *)(v9 + 8) = v83;
  unint64_t v84 = *(void *)v9 & 0xFFFFFFCFFFFFFFFFLL;
  *(void *)uint64_t v9 = v84;
  unsigned int v85 = &v108;
  do
  {
    uint64_t v86 = 0;
    int v87 = 0;
    do
    {
      if (v85->i32[v86])
      {
        ++v81;
        int8x8_t v88 = vand_s8((int8x8_t)vshl_u32(vmax_u32((uint32x2_t)__PAIR64__(v82, v86), (uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vmovn_s64(v83), (uint32x2_t)0xFFFFFFEDFFFFFFEBLL), (int8x8_t)0x300000003)), (uint32x2_t)0x1300000015), (int8x8_t)0x18000000600000);
        v89.i64[0] = v88.u32[0];
        v89.i64[1] = v88.u32[1];
        int v87 = 1;
        *((_DWORD *)&v102 + v86) = 1;
        int64x2_t v83 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)v83, (int8x16_t)xmmword_2393D2710), v89);
        *(int64x2_t *)(v9 + 8) = v83;
        v101.i32[v86] = v82;
        v100.i32[v82] = v80;
      }
      ++v86;
    }
    while (v86 != 4);
    if (v87) {
      ++v82;
    }
    ++v80;
    ++v85;
  }
  while (v80 != 4);
  unint64_t v90 = v83.i64[1] & 0xFFFFFFFFFFFE01FFLL | ((v100.i8[0] & 3) << 9) & 0x7FF | ((v100.i8[4] & 3) << 11) & 0x1FFF | ((v100.i8[8] & 3) << 13) & 0x7FFF | ((unint64_t)(v100.i8[12] & 3) << 15);
  *(void *)(v9 + 8) = v83.i64[0] & 0xFFFFFFFF80787FFFLL | ((unint64_t)(v102 & 1) << 18) & 0xFFFFFFFFF87FFFFFLL | ((unint64_t)(BYTE4(v102) & 1) << 17) & 0xFFFFFFFFF87FFFFFLL | ((unint64_t)(BYTE8(v102) & 1) << 16) & 0xFFFFFFFFF87FFFFFLL | ((BYTE12(v102) & 1u) << 15) | ((v101.i8[0] & 3) << 23) & 0xF9FFFFFF | ((unint64_t)(v101.i8[4] & 3) << 25) | ((unint64_t)(v101.i8[8] & 3) << 27) | ((unint64_t)(v101.i8[12] & 3) << 29);
  *(void *)(v9 + 16) = v90;
  *(void *)uint64_t v9 = v84 | ((unint64_t)((v81 - 1) & 3) << 36);
  return (char *)v8;
}

char *AddOp(uint64_t a1, unsigned __int8 a2, _DWORD *a3, _DWORD *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int v9 = 0;
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v15 = &a9;
  do
  {
    int v10 = v15;
    unint64_t v11 = *v15;
    v15 += 2;
    unint64_t v12 = v10[1];
    uint64_t v13 = &v16[2 * v9];
    unint64_t *v13 = v11;
    v13[1] = v12;
    ++v9;
  }
  while (v11 | v12);
  return AddOpv(a1, a2, a3, a4, a5, v16);
}

char *SrcSwizzle(uint64_t a1, uint64_t a2, long long *a3, unsigned int a4, uint64_t a5, uint32x4_t *a6, uint64_t a7, uint64_t a8)
{
  int8x16_t v8 = vandq_s8((int8x16_t)vshlq_u32(*a6, (uint32x4_t)xmmword_2393D2720), (int8x16_t)xmmword_2393D2730);
  *(int8x8_t *)v8.i8 = vorr_s8(*(int8x8_t *)v8.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL));
  uint64_t v26 = (v8.i32[0] | v8.i32[1]);
  long long v9 = a3[3];
  long long v23 = a3[2];
  long long v24 = v9;
  long long v25 = a3[4];
  long long v10 = a3[1];
  long long v21 = *a3;
  long long v22 = v10;
  if (a5)
  {
    DWORD2(v21) = a4;
    if (HIDWORD(v22) >= 4)
    {
      if (HIDWORD(v22) == 4)
      {
        *(void *)&long long v22 = __PAIR64__(HIDWORD(v21), a4);
        DWORD2(v22) = 8;
        if (a4 >= 3)
        {
          LODWORD(v22) = 2;
          DWORD1(v22) = 2 * HIDWORD(v21);
        }
      }
    }
    else
    {
      *(void *)&long long v22 = __PAIR64__(HIDWORD(v21), a4);
      DWORD2(v22) = 4;
    }
    return AddOp(a1, 0x39u, 0, (_DWORD *)a2, 0, (uint64_t)a6, a7, a8, (uint64_t)&v21);
  }
  else
  {
    unsigned int v12 = *(_DWORD *)(a2 + 8);
    DWORD2(v21) = v12;
    if (HIDWORD(v22) >= 4)
    {
      if (HIDWORD(v22) == 4)
      {
        *(void *)&long long v22 = __PAIR64__(HIDWORD(v21), v12);
        DWORD2(v22) = 8;
        if (v12 >= 3)
        {
          LODWORD(v22) = 2;
          DWORD1(v22) = 2 * HIDWORD(v21);
        }
      }
    }
    else
    {
      *(void *)&long long v22 = __PAIR64__(HIDWORD(v21), v12);
      DWORD2(v22) = 4;
    }
    long long v13 = v25;
    long long v14 = v23;
    *(_OWORD *)(a2 + 48) = v24;
    *(_OWORD *)(a2 + 64) = v13;
    long long v15 = v22;
    *(_OWORD *)a2 = v21;
    *(_OWORD *)(a2 + 16) = v15;
    *(_OWORD *)(a2 + 32) = v14;
    unint64_t v16 = *(void *)(a2 + 48);
    unint64_t v17 = *(void *)(a2 + 56);
    switch(a6->i64[0])
    {
      case 0u:
        unint64_t v18 = *(void *)(a2 + 48);
        break;
      case 1u:
        unint64_t v18 = HIDWORD(v16);
        break;
      case 2u:
        unint64_t v18 = *(void *)(a2 + 56);
        break;
      case 3u:
        unint64_t v18 = HIDWORD(v17);
        break;
      default:
        LODWORD(v18) = 0;
        break;
    }
    switch(HIDWORD(a6->i64[0]))
    {
      case 0u:
        unint64_t v19 = *(void *)(a2 + 48);
        break;
      case 1u:
        unint64_t v19 = HIDWORD(v16);
        break;
      case 2u:
        unint64_t v19 = *(void *)(a2 + 56);
        break;
      case 3u:
        unint64_t v19 = HIDWORD(v17);
        break;
      default:
        LODWORD(v19) = 0;
        break;
    }
    switch(a6->i32[2])
    {
      case 0:
        unint64_t v20 = *(void *)(a2 + 48);
        break;
      case 1:
        unint64_t v20 = HIDWORD(v16);
        break;
      case 2:
        unint64_t v20 = *(void *)(a2 + 56);
        break;
      case 3:
        unint64_t v20 = HIDWORD(v17);
        break;
      default:
        LODWORD(v20) = 0;
        break;
    }
    switch(a6->i32[3])
    {
      case 0:
        break;
      case 1:
        v16 >>= 32;
        break;
      case 2:
        unint64_t v16 = *(void *)(a2 + 56);
        break;
      case 3:
        unint64_t v16 = HIDWORD(v17);
        break;
      default:
        LODWORD(v16) = 0;
        break;
    }
    *(void *)(a2 + 48) = v18 | ((unint64_t)v19 << 32);
    *(void *)(a2 + 56) = v20 | ((unint64_t)v16 << 32);
    return *(char **)(*(void *)(a1 + 104) + 8);
  }
}

char *DstSwizzleMask(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint32x4_t *a5, uint32x4_t *a6, uint64_t a7, uint64_t a8)
{
  int8x16_t v8 = vorrq_s8(vandq_s8((int8x16_t)vshlq_u32(*a5, (uint32x4_t)xmmword_2393D2740), (int8x16_t)xmmword_2393D2770), vandq_s8((int8x16_t)vshlq_u32(*a6, (uint32x4_t)xmmword_2393D2750), (int8x16_t)xmmword_2393D2760));
  *(int8x8_t *)v8.i8 = vorr_s8(*(int8x8_t *)v8.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL));
  uint64_t v10 = (v8.i32[0] | v8.i32[1]);
  if (a4) {
    return AddOp(a1, 0x6Eu, 0, a2, &v10, (uint64_t)a6, a7, a8, a3);
  }
  else {
    return AddOp(a1, 0, 0, a2, &v10, (uint64_t)a6, a7, a8, a3);
  }
}

char *SetAddressRegister(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v15 = 0u;
  memset(v14, 0, sizeof(v14));
  *(void *)&long long v10 = 0x100000001;
  *((void *)&v10 + 1) = 0x100000001;
  long long v17 = v10;
  long long v18 = xmmword_2393D2780;
  uint64_t v11 = **((void **)a1 + 5);
  if (v11)
  {
    *(_OWORD *)((char *)v14 + 8) = v17;
    int v12 = *(_DWORD *)(v11 + 24);
    LODWORD(v14[0]) = 4;
    DWORD1(v14[0]) = v12;
    *(_OWORD *)((char *)&v14[1] + 8) = v18;
    *(_OWORD *)((char *)&v14[2] + 8) = xmmword_2393D1C70;
    *((void *)&v14[3] + 1) = 0x300000002;
    long long v15 = *a1;
  }
  else
  {
    AddBinding((char *)a1, (uint64_t)v14, (uint64_t)v16, 4, &v17, 0);
  }
  return AddOp((uint64_t)a1, 0x48u, 0, v14, 0, a6, a7, a8, a2);
}

char *Load(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(*(_DWORD *)(a3 + 40))
  {
    case 1:
      SetAddressRegister(a1, a4, a3, a4, a5, a6, a7, a8);
      long long v11 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)long long v17 = *(_OWORD *)a3;
      *(_OWORD *)&v17[16] = v11;
      long long v12 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)&v17[32] = *(_OWORD *)(a3 + 32);
      long long v18 = v12;
      long long v19 = *(_OWORD *)(a3 + 64);
      *(_OWORD *)&v17[24] = *(_OWORD *)(a2 + 24);
      *(_OWORD *)&v17[8] = *(_OWORD *)(a2 + 8);
      double result = AddOp((uint64_t)a1, 0, 0, (_DWORD *)a2, 0, v13, v14, v15, (uint64_t)v17);
      break;
    case 2:
      double result = AddOp((uint64_t)a1, 0x7Au, 0, (_DWORD *)a2, 0, a6, a7, a8, a4);
      break;
    case 3:
      goto LABEL_6;
    case 4:
      *(void *)long long v17 = 116737;
LABEL_6:
      double result = AddOp((uint64_t)a1, 0x98u, 0, (_DWORD *)a2, 0, a6, a7, a8, a4);
      break;
    default:
      double result = 0;
      break;
  }
  return result;
}

char *glpPrimitiveTypeToString(unsigned int a1)
{
  if (a1 >= 0x4F) {
    abort();
  }
  return off_264D99B80[a1];
}

uint64_t glpGetVectorType(int a1, int a2)
{
  if ((a2 - 5) <= 0xFFFFFFFB) {
    goto LABEL_14;
  }
  if (a1 <= 8)
  {
    if (a1 == 1)
    {
      unsigned int v2 = (char *)&GLP_VECTOR_TYPES + 4 * (a2 - 1);
      return *(unsigned int *)v2;
    }
    if (a1 == 5)
    {
      unsigned int v2 = (char *)&GLP_VECTOR_TYPES + 4 * (a2 - 1) + 32;
      return *(unsigned int *)v2;
    }
LABEL_14:
    abort();
  }
  if (a1 == 9)
  {
    unsigned int v2 = (char *)&GLP_VECTOR_TYPES + 4 * (a2 - 1) + 48;
    return *(unsigned int *)v2;
  }
  if (a1 == 36)
  {
    unsigned int v2 = (char *)&GLP_VECTOR_TYPES + 4 * (a2 - 1) + 64;
    return *(unsigned int *)v2;
  }
  if (a1 != 62) {
    goto LABEL_14;
  }
  unsigned int v2 = (char *)&GLP_VECTOR_TYPES + 4 * (a2 - 1) + 16;
  return *(unsigned int *)v2;
}

uint64_t glpPrimitiveTypeGetGLType(unsigned int a1)
{
  if (a1 >= 0x4F) {
    abort();
  }
  return dword_2393D2848[a1];
}

uint64_t glpPrimitiveTypeGetCategory(unsigned int a1)
{
  if (a1 >= 0x4F) {
    abort();
  }
  return dword_2393D2984[a1];
}

uint64_t glpPrimitiveVectorGetLength(uint64_t a1)
{
  int v1 = a1;
  uint64_t result = 2;
  switch(v1)
  {
    case 2:
    case 6:
    case 10:
    case 37:
    case 63:
      return result;
    case 3:
    case 4:
      uint64_t result = a1;
      break;
    case 7:
    case 11:
    case 38:
    case 64:
      uint64_t result = 3;
      break;
    case 8:
    case 12:
    case 39:
    case 65:
      uint64_t result = 4;
      break;
    default:
      abort();
  }
  return result;
}

uint64_t glpPrimitiveVectorGetElementType(int a1)
{
  uint64_t result = 1;
  switch(a1)
  {
    case 2:
    case 3:
    case 4:
      return result;
    case 6:
    case 7:
    case 8:
      uint64_t result = 5;
      break;
    case 10:
    case 11:
    case 12:
      uint64_t result = 9;
      break;
    case 37:
    case 38:
    case 39:
      uint64_t result = 36;
      break;
    case 63:
    case 64:
    case 65:
      uint64_t result = 62;
      break;
    default:
      abort();
  }
  return result;
}

uint64_t glpPrimitiveMatrixGetColumns(int a1)
{
  uint64_t result = 2;
  switch(a1)
  {
    case 13:
    case 22:
    case 23:
    case 66:
    case 69:
    case 70:
      return result;
    case 14:
    case 24:
    case 25:
    case 67:
    case 71:
    case 72:
      uint64_t result = 3;
      break;
    case 15:
    case 26:
    case 27:
    case 68:
    case 73:
    case 74:
      uint64_t result = 4;
      break;
    default:
      abort();
  }
  return result;
}

uint64_t glpPrimitiveMatrixGetRows(int a1)
{
  uint64_t result = 2;
  switch(a1)
  {
    case 13:
    case 24:
    case 26:
    case 66:
    case 71:
    case 73:
      return result;
    case 14:
    case 22:
    case 27:
    case 67:
    case 69:
    case 74:
      uint64_t result = 3;
      break;
    case 15:
    case 23:
    case 25:
    case 68:
    case 70:
    case 72:
      uint64_t result = 4;
      break;
    default:
      abort();
  }
  return result;
}

uint64_t glpPrimitiveMatrixGetColumnType(int a1)
{
  uint64_t result = 2;
  switch(a1)
  {
    case 13:
    case 24:
    case 26:
      return result;
    case 14:
    case 22:
    case 27:
      uint64_t result = 3;
      break;
    case 15:
    case 23:
    case 25:
      uint64_t result = 4;
      break;
    case 66:
    case 71:
    case 73:
      uint64_t result = 63;
      break;
    case 67:
    case 69:
    case 74:
      uint64_t result = 64;
      break;
    case 68:
    case 70:
    case 72:
      uint64_t result = 65;
      break;
    default:
      abort();
  }
  return result;
}

uint64_t glpPrimitiveMatrixGetRowType(int a1)
{
  uint64_t result = 2;
  switch(a1)
  {
    case 13:
    case 22:
    case 23:
      return result;
    case 14:
    case 24:
    case 25:
      uint64_t result = 3;
      break;
    case 15:
    case 26:
    case 27:
      uint64_t result = 4;
      break;
    case 66:
    case 69:
    case 70:
      uint64_t result = 63;
      break;
    case 67:
    case 71:
    case 72:
      uint64_t result = 64;
      break;
    case 68:
    case 73:
    case 74:
      uint64_t result = 65;
      break;
    default:
      abort();
  }
  return result;
}

uint64_t glpPrimitiveMatrixGetElementType(int a1)
{
  uint64_t result = 1;
  switch(a1)
  {
    case 13:
    case 14:
    case 15:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      return result;
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
      uint64_t result = 62;
      break;
    default:
      abort();
  }
  return result;
}

uint64_t glpPrimitiveSamplerGetPPTextarget(int a1)
{
  uint64_t result = 4;
  switch(a1)
  {
    case 16:
    case 40:
    case 48:
      return result;
    case 17:
    case 41:
    case 49:
      uint64_t result = 3;
      break;
    case 18:
    case 42:
    case 50:
      uint64_t result = 1;
      break;
    case 19:
    case 43:
    case 51:
      uint64_t result = 0;
      break;
    case 20:
      uint64_t result = 7;
      break;
    case 21:
      uint64_t result = 6;
      break;
    case 28:
    case 44:
    case 52:
      uint64_t result = 2;
      break;
    case 29:
      uint64_t result = 5;
      break;
    case 30:
    case 45:
    case 53:
      uint64_t result = 9;
      break;
    case 31:
    case 46:
    case 54:
      uint64_t result = 10;
      break;
    case 32:
    case 47:
    case 55:
      uint64_t result = 13;
      break;
    case 33:
      uint64_t result = 11;
      break;
    case 34:
      uint64_t result = 12;
      break;
    case 35:
      uint64_t result = 8;
      break;
    case 56:
    case 58:
    case 60:
      uint64_t result = 14;
      break;
    case 57:
    case 59:
    case 61:
      uint64_t result = 15;
      break;
    case 75:
    case 77:
    case 78:
      uint64_t result = 16;
      break;
    case 76:
      uint64_t result = 17;
      break;
    default:
      abort();
  }
  return result;
}

uint64_t glpPrimitiveSamplerGetPPDatatype(int a1)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 56:
    case 57:
    case 75:
    case 76:
      return result;
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 58:
    case 59:
    case 77:
      uint64_t result = 2;
      break;
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 60:
    case 61:
    case 78:
      uint64_t result = 3;
      break;
    default:
      abort();
  }
  return result;
}

uint64_t glpPrimitiveTypeGetScalarType(uint64_t a1)
{
  switch(glpPrimitiveTypeGetCategory(a1))
  {
    case 1u:
      uint64_t result = a1;
      break;
    case 2u:
      uint64_t result = glpPrimitiveVectorGetElementType(a1);
      break;
    case 3u:
      uint64_t result = glpPrimitiveMatrixGetElementType(a1);
      break;
    default:
      abort();
  }
  return result;
}

uint64_t glpPrimitiveTypeReplaceScalarType(uint64_t a1, uint64_t a2)
{
  switch(glpPrimitiveTypeGetCategory(a1))
  {
    case 1u:
      return a2;
    case 2u:
      int Length = glpPrimitiveVectorGetLength(a1);
      return glpGetVectorType(a2, Length);
    case 3u:
      int Columns = glpPrimitiveMatrixGetColumns(a1);
      int Rows = glpPrimitiveMatrixGetRows(a1);
      if (a2 == 62)
      {
        int8x16_t v8 = (char *)&GLP_MATRIX_TYPES + 12 * (Columns - 2) + 4 * (Rows - 2) + 36;
      }
      else
      {
        if (a2 != 1) {
LABEL_11:
        }
          abort();
        int8x16_t v8 = (char *)&GLP_MATRIX_TYPES + 12 * (Columns - 2) + 4 * (Rows - 2);
      }
      return *(unsigned int *)v8;
    default:
      goto LABEL_11;
  }
}

uint64_t glpPrimitiveTypeGetScalarCount(uint64_t a1)
{
  uint64_t result = glpPrimitiveTypeGetCategory(a1);
  switch((int)result)
  {
    case 1:
      return result;
    case 2:
      uint64_t result = glpPrimitiveVectorGetLength(a1);
      break;
    case 3:
      int Columns = glpPrimitiveMatrixGetColumns(a1);
      uint64_t result = glpPrimitiveMatrixGetRows(a1) * Columns;
      break;
    default:
      abort();
  }
  return result;
}

uint64_t glpPrimitiveTypeGetBytesPerComponent(uint64_t a1)
{
  unsigned int ScalarType = glpPrimitiveTypeGetScalarType(a1);
  if (ScalarType > 0x3E) {
    goto LABEL_7;
  }
  if (((1 << ScalarType) & 0x1000000222) == 0)
  {
    if (ScalarType == 62) {
      return 8;
    }
LABEL_7:
    abort();
  }
  return 4;
}

uint64_t glpPrimitiveTypeGetMaxComponentsPerVec4(uint64_t a1)
{
  unsigned int ScalarType = glpPrimitiveTypeGetScalarType(a1);
  if (ScalarType > 0x3E) {
    goto LABEL_7;
  }
  if (((1 << ScalarType) & 0x1000000222) == 0)
  {
    if (ScalarType == 62)
    {
      unsigned int v2 = 8;
      return 0x10 / v2;
    }
LABEL_7:
    abort();
  }
  unsigned int v2 = 4;
  return 0x10 / v2;
}

uint64_t glpPrimitiveTypeGetNumVec4s(uint64_t a1)
{
  uint64_t ColumnType = a1;
  int Category = glpPrimitiveTypeGetCategory(a1);
  if ((Category - 1) >= 2)
  {
    if (Category != 3) {
      abort();
    }
    int Columns = glpPrimitiveMatrixGetColumns(ColumnType);
    uint64_t ColumnType = glpPrimitiveMatrixGetColumnType(ColumnType);
  }
  else
  {
    int Columns = 1;
  }
  char ScalarCount = glpPrimitiveTypeGetScalarCount(ColumnType);
  unsigned __int8 MaxComponentsPerVec4 = glpPrimitiveTypeGetMaxComponentsPerVec4(ColumnType);
  return Columns * ((ScalarCount + MaxComponentsPerVec4 - 1) / MaxComponentsPerVec4);
}

uint64_t glpPrimitiveTypeGetByteStride(uint64_t a1)
{
  return 16 * glpPrimitiveTypeGetNumVec4s(a1);
}

char *glpQualifierName(unsigned int a1)
{
  if (a1 >= 0x19) {
    abort();
  }
  return off_264D99DF8[a1];
}

uint64_t glpMakeExpectedSignatureFromCall(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v21[1] = *MEMORY[0x263EF8340];
  uint64_t v6 = glpCallNodeGetArgCount(a2);
  int v7 = v6;
  uint64_t v8 = v6;
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  long long v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)v21 - v13;
  if (v12 >= 0x200) {
    size_t v15 = 512;
  }
  else {
    size_t v15 = v12;
  }
  bzero((char *)v21 - v13, v15);
  if (v7)
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = glpCallNodeGetArg(a2, v16);
      *(void *)(a3 + 8 * v16) = glpASTNodeGetSaType(v17);
      *(void *)&v11[8 * v16] = 0;
      *(void *)&v14[8 * v16++] = 0;
    }
    while (v8 != v16);
  }
  uint64_t Allocator = (void *)glpCompilerGetAllocator(a1);
  int PrimitiveType = glpGetPrimitiveType(0);
  return glpMakeFunctionType(Allocator, (uint64_t)PrimitiveType, v8, a3, (uint64_t)v11, (uint64_t)v14);
}

uint64_t glpLookUpAndAnalyzeCall(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t NameTable = glpCompilerGetNameTable(a1);
  uint64_t v50 = 0;
  int v51 = &v50;
  uint64_t v52 = 0x2000000000;
  int v53 = 0;
  uint64_t v46 = 0;
  BOOL v47 = &v46;
  uint64_t v48 = 0x2000000000;
  uint64_t v49 = 0;
  v45[0] = MEMORY[0x263EF8330];
  v45[1] = 0x40000000;
  v45[2] = __glpLookUpAndAnalyzeCall_block_invoke;
  v45[3] = &unk_264D99EC8;
  v45[4] = &v50;
  v45[5] = &v46;
  v45[6] = NameTable;
  v45[7] = a1;
  glpNameTableGet(NameTable, a3, a4, 0, (uint64_t)v45);
  if (v47[3])
  {
    if (*((_DWORD *)v51 + 6) == 4)
    {
      uint64_t Allocator = (void *)glpCompilerGetAllocator(a1);
      uint64_t v16 = (char *)glpAggregateTypeMangleName(a5, (uint64_t)a3, a4, Allocator);
      v44[0] = MEMORY[0x263EF8330];
      v44[1] = 0x40000000;
      v44[2] = __glpLookUpAndAnalyzeCall_block_invoke_2;
      v44[3] = &unk_264D99EF0;
      v44[4] = &v46;
      if (glpNameTableGet(NameTable, v16, v17, 0, (uint64_t)v44)) {
        *((_DWORD *)v51 + 6) = 5;
      }
    }
  }
  long long v18 = v47;
  uint64_t v19 = v47[3];
  if (!v19 || (unint64_t v20 = v51, *((_DWORD *)v51 + 6) == 5) && (*(unsigned char *)(v19 + 9) & 0x80) != 0)
  {
    if (!glpOperatorAsFunctionError(a1, a3, a4, a6, a2))
    {
      InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
      glpASTNodeGetLocation(a2, &v43);
      glpLogMessage(InfoLog, 0, (uint64_t)&v43, "Call to undeclared function '%.*s'", v27, v28, v29, v30, a4);
    }
LABEL_12:
    uint64_t v31 = 0;
  }
  else
  {
    *(void *)a7 = 0;
    switch(*((_DWORD *)v20 + 6))
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 8:
        long long v21 = (uint64_t **)glpCompilerGetInfoLog(a1);
        glpASTNodeGetLocation(a2, &v41);
        glpLogMessage(v21, 0, (uint64_t)&v41, "Call to non-function '%.*s'", v22, v23, v24, v25, a4);
        goto LABEL_12;
      case 4:
        if (!glpAnalyzeCallToOverload(a1, (uint64_t *)v18[3], a2)) {
          goto LABEL_12;
        }
        goto LABEL_19;
      case 5:
        FunctionObject = (uint64_t *)v18[3];
        goto LABEL_18;
      case 6:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
        abort();
      case 7:
        uint64_t v34 = v18[3];
        *(void *)a7 = v34;
        FunctionObject = (uint64_t *)glpSubroutineTypeGetFunctionObject(*(void *)(v34 + 16));
        if (!glpAnalyzeCallToFunction(a1, FunctionObject, a2))
        {
          glpSubroutineTypeGetName(*(void *)(*(void *)a7 + 16));
          int v36 = (uint64_t **)glpCompilerGetInfoLog(a1);
          glpASTNodeGetLocation(a2, &v42);
          glpLogMessage(v36, 0, (uint64_t)&v42, "Arguments of call to subroutine uniform '%.*s' cannot be converted to match its type ('%.*s')", v37, v38, v39, v40, *(_DWORD *)(*(void *)a7 + 8));
          goto LABEL_12;
        }
LABEL_18:
        uint64_t ReturnType = glpFunctionTypeGetReturnType(*FunctionObject);
        glpASTNodeSetSaType(a2, ReturnType);
        glpFunctionCallNodeSetExtra(a2, (uint64_t)FunctionObject);
LABEL_19:
        uint64_t v31 = 1;
        break;
      default:
        goto LABEL_19;
    }
  }
  _Block_object_dispose(&v46, 8);
  _Block_object_dispose(&v50, 8);
  return v31;
}

void *__glpLookUpAndAnalyzeCall_block_invoke(void *result, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v6 = result;
  if (a2 == 7 || a2 == 4)
  {
    *(_DWORD *)(*(void *)(result[4] + 8) + 24) = a2;
    *(void *)(*(void *)(result[5] + 8) + 24) = a3;
LABEL_4:
    *a5 = 1;
    return result;
  }
  uint64_t result = (void *)glpNameTableGetGLSLVersion(result[6]);
  if (result != 1)
  {
    uint64_t result = (void *)glpCompilerGetIOSVersion(v6[7]);
    if ((int)result >= 9) {
      goto LABEL_4;
    }
  }
  return result;
}

uint64_t __glpLookUpAndAnalyzeCall_block_invoke_2(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a3;
  *a5 = 1;
  return result;
}

unint64_t glpCalculateCallPrecision(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v5 = (a3[1] >> 6) & 0x20 | ((unint64_t)((a3[1] & 0x1800) != 0) << 6);
  unsigned int v6 = glpCallNodeGetArgCount(a2);
  unint64_t v7 = v5;
  if (v6)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    unint64_t v7 = v5;
    uint64_t v10 = v6;
    do
    {
      uint64_t v11 = glpCallNodeGetArg(a2, v8);
      uint64_t v12 = *(void *)(a3[10] + 8 * v8);
      uint64_t SaFlags = glpASTNodeGetSaFlags(v11);
      char v14 = glpASTNodeGetSaFlags(v11);
      unint64_t v15 = v14 & 0x1F;
      if (v14 & 0x1F) != 0 && v15 != 31 && v15 > v9 && (*(unsigned char *)(v12 + 48)) {
        unint64_t v9 = v14 & 0x1F;
      }
      v7 &= SaFlags;
      ++v8;
    }
    while (v10 != v8);
    if (v9)
    {
LABEL_12:
      if (!v5) {
        return v9;
      }
      goto LABEL_13;
    }
  }
  uint64_t v16 = a3[9];
  if (v16)
  {
    unint64_t v9 = *(void *)(v16 + 48) & 0x1FLL;
    goto LABEL_12;
  }
  unint64_t v9 = 0;
  if (!v5) {
    return v9;
  }
LABEL_13:
  if (v9) {
    unint64_t v17 = 0;
  }
  else {
    unint64_t v17 = v9;
  }
  uint64_t v18 = glpASTNodeGetSaFlags(a2);
  glpASTNodeSetSaFlags(a2, v17 | v7 | v18);
  return v9;
}

uint64_t glpHandleArgumentConversions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(unsigned int ***)(a3 + 72);
  if (v8)
  {
    DoesTypeRequirePrecisiounint64_t n = glpCompilerDoesTypeRequirePrecision(a1, *v8);
    uint64_t v10 = (a4 & 1) != 0 ? 0 : a4;
    if (!DoesTypeRequirePrecision) {
      a4 = v10;
    }
  }
  if (!*(_DWORD *)(a3 + 88)) {
    return 1;
  }
  uint64_t v11 = 0;
  if (a4) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = a4;
  }
  while (1)
  {
    uint64_t Expr = glpCallNodeGetArg(a2, v11);
    if (glpIsTypeConversionNode(Expr)) {
      uint64_t Expr = glpUnaryOperatorNodeGetExpr(Expr);
    }
    uint64_t v14 = *(void *)(*(void *)(*(void *)(a3 + 80) + 8 * v11) + 48);
    if ((v14 & 0x800000) != 0)
    {
      if ((glpASTNodeGetSaFlags(Expr) & 0x60) == 0)
      {
        InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
        glpASTNodeGetLocation(a2, v70);
        glpLogMessage(InfoLog, 0, (uint64_t)v70, "Argument %d to function '%.*s' must be a constant expression", v36, v37, v38, v39, v11 + 1);
        return 0;
      }
      uint64_t v14 = *(void *)(*(void *)(*(void *)(a3 + 80) + 8 * v11) + 48);
    }
    if ((v14 & 0x1000000) != 0)
    {
      if (!glpIsLValueNode(Expr) || (*(unsigned char *)(glpLValueNodeGetVariableExtra(Expr) + 51) & 0x20) == 0)
      {
        uint64_t v30 = (uint64_t **)glpCompilerGetInfoLog(a1);
        glpASTNodeGetLocation(a2, &v69);
        glpLogMessage(v30, 0, (uint64_t)&v69, "Argument %d to function '%.*s' must be a reference to a stage in variable", v31, v32, v33, v34, v11 + 1);
        return 0;
      }
      uint64_t Offset = glpDerefNodeGetOffset(Expr);
      if (Offset)
      {
        uint64_t v16 = Offset;
        Offsetuint64_t Expr = glpOffsetNodeGetOffsetExpr(Offset);
        VectorElementuint64_t Expr = glpOffsetNodeGetVectorElementExpr(v16);
        if (OffsetExpr)
        {
          if (!glpIsConstantNode(OffsetExpr)) {
            break;
          }
        }
        if (VectorElementExpr && !glpIsConstantNode(VectorElementExpr)) {
          break;
        }
      }
    }
    if ((*(unsigned char *)(*(void *)(*(void *)(a3 + 80) + 8 * v11) + 51) & 4) != 0)
    {
      uint64_t v19 = glpCommaResult(Expr);
      if (glpASTNodeGetKind(v19) != 81)
      {
        uint64_t v40 = (uint64_t **)glpCompilerGetInfoLog(a1);
        glpASTNodeGetLocation(a2, &v66);
        glpLogMessage(v40, 0, (uint64_t)&v66, "'out' or 'inout' argument %d to function '%.*s' must be an lvalue", v41, v42, v43, v44, v11 + 1);
        return 0;
      }
      if ((glpASTNodeGetSaFlags(v19) & 0x360) != 0)
      {
        int v45 = (uint64_t **)glpCompilerGetInfoLog(a1);
        glpASTNodeGetLocation(a2, &v67);
        glpLogMessage(v45, 0, (uint64_t)&v67, "'out' or 'inout' argument %d to function '%.*s' must be writable", v46, v47, v48, v49, v11 + 1);
        return 0;
      }
    }
    uint64_t SaType = (unsigned int *)glpASTNodeGetSaType(Expr);
    if (glpCompilerDoesTypeRequirePrecision(a1, SaType))
    {
      uint64_t v21 = *(void *)(*(void *)(*(void *)(a3 + 80) + 8 * v11) + 48);
      if ((v21 & 2) != 0)
      {
        uint64_t DefaultPrecisionForType = glpASTNodeGetSaFlags(Expr) & 0x1F;
      }
      else
      {
        if (v21) {
          uint64_t DefaultPrecisionForType = v12;
        }
        else {
          uint64_t DefaultPrecisionForType = *(void *)(*(void *)(*(void *)(a3 + 80) + 8 * v11) + 48) & 0x1FLL;
        }
        if ((v21 & 1) != 0 && !a4)
        {
          uint64_t DefaultPrecisionForType = v12;
          if ((glpASTNodeGetSaFlags(Expr) & 1) == 0)
          {
            uint64_t v23 = (unsigned int *)glpASTNodeGetSaType(Expr);
            uint64_t DefaultPrecisionForType = glpGetDefaultPrecisionForType(a1, v23);
            if (!DefaultPrecisionForType)
            {
              uint64_t v55 = glpASTNodeGetSaType(Expr);
              uint64_t Allocator = (void *)glpCompilerGetAllocator(a1);
              glpTypeHumanReadableDescription(v55, (uint64_t)"<<BUG: unexpected function type>>", 0x92C8B9C800000021, Allocator);
              char v58 = v57;
              unint64_t v59 = (uint64_t **)glpCompilerGetInfoLog(a1);
              glpASTNodeGetLocation(a2, &v65);
              glpLogMessage(v59, 0, (uint64_t)&v65, "Expression of type '%.*s' - precision can not be inferred and no default precision available", v60, v61, v62, v63, v58);
              return 0;
            }
          }
        }
      }
      char SaFlags = glpASTNodeGetSaFlags(Expr);
      uint64_t v25 = (unsigned int *)glpASTNodeGetSaType(Expr);
      if (!glpTypeGetKind(v25) && DefaultPrecisionForType && DefaultPrecisionForType != (SaFlags & 0x1F))
      {
        if ((SaFlags & 0x1F) != 0x1FLL && (SaFlags & 0x1F) != 0)
        {
          uint64_t v26 = glpCompilerGetAllocator(a1);
          glpASTNodeGetLocation(a2, &v64);
          uint64_t TypeConversionNode = glpMakeTypeConversionNode(v26, &v64, **(void **)(*(void *)(a3 + 80) + 8 * v11), DefaultPrecisionForType);
          glpUnaryOperatorNodeSetExpr(TypeConversionNode, Expr);
          uint64_t v28 = glpSANode(a1, TypeConversionNode);
          glpCallNodeSetArg(a2, v11, v28);
        }
        else
        {
          glpPushdownPrecision(a1, Expr, DefaultPrecisionForType);
        }
      }
    }
    if (++v11 >= (unint64_t)*(unsigned int *)(a3 + 88)) {
      return 1;
    }
  }
  uint64_t v50 = (uint64_t **)glpCompilerGetInfoLog(a1);
  glpASTNodeGetLocation(a2, &v68);
  glpLogMessage(v50, 0, (uint64_t)&v68, "Argument %d to function '%.*s' must be a direct reference to a stage in variable", v51, v52, v53, v54, v11 + 1);
  return 0;
}

uint64_t glpLowerCallToBodilessPPStreamOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t SaType = (unsigned int *)glpASTNodeGetSaType(a2);
  if (glpTypeGetKind(SaType))
  {
    InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
    glpASTNodeGetLocation(a2, &v70);
    glpLogMessage(InfoLog, 0, (uint64_t)&v70, "return of ppstreamop is not a primitive type", v8, v9, v10, v11, v64);
    return glpSAFailed();
  }
  else
  {
    uint64_t v13 = glpASTNodeGetSaType(a2);
    uint64_t PrimitiveType = glpPrimitiveTypeGetPrimitiveType(v13);
    uint64_t Allocator = glpCompilerGetAllocator(a1);
    glpASTNodeGetLocation(a2, &v69);
    uint64_t v16 = glpMakeUndeterminedCallNode(Allocator, &v69);
    uint64_t v17 = glpCompilerGetAllocator(a1);
    glpASTNodeGetLocation(a2, &v68);
    glpMakeVariableIdentifierNode(v17, &v68, (uint64_t)"$ppstreamop", 0xF8DF7DAF0000000BLL);
    glpUndeterminedCallNodeSetCallee(v16, v18);
    uint64_t v19 = (void *)glpCompilerGetAllocator(a1);
    uint64_t v20 = glpCompilerGetAllocator(a1);
    glpASTNodeGetLocation(a2, &v67);
    uint64_t v21 = glpGetPrimitiveType(5u);
    uint64_t v22 = glpCompilerGetAllocator(a1);
    uint64_t v23 = (unsigned int *)glpGetPrimitiveType(5u);
    MutableValue = glpMakeMutableValue(v22, v23, 1, v24, v25, v26, v27, v28, 2);
    glpMakeConstantNode(v20, &v67, (uint64_t)v21, (uint64_t)MutableValue);
    glpCallNodeAddArg(v19, v16, v30);
    uint64_t v31 = (void *)glpCompilerGetAllocator(a1);
    uint64_t v32 = glpCompilerGetAllocator(a1);
    glpASTNodeGetLocation(a2, &v66);
    uint64_t v33 = glpGetPrimitiveType(5u);
    uint64_t v34 = glpCompilerGetAllocator(a1);
    long long v35 = (unsigned int *)glpGetPrimitiveType(5u);
    uint64_t v41 = glpMakeMutableValue(v34, v35, 1, v36, v37, v38, v39, v40, PrimitiveType);
    glpMakeConstantNode(v32, &v66, (uint64_t)v33, (uint64_t)v41);
    glpCallNodeAddArg(v31, v16, v42);
    uint64_t v43 = (void *)glpCompilerGetAllocator(a1);
    uint64_t v44 = glpCompilerGetAllocator(a1);
    glpASTNodeGetLocation(a2, &v65);
    int v45 = glpGetPrimitiveType(5u);
    uint64_t v46 = glpCompilerGetAllocator(a1);
    uint64_t v47 = (unsigned int *)glpGetPrimitiveType(5u);
    uint64_t v53 = glpMakeMutableValue(v46, v47, 1, v48, v49, v50, v51, v52, *(unsigned int *)(a3 + 92));
    glpMakeConstantNode(v44, &v65, (uint64_t)v45, (uint64_t)v53);
    glpCallNodeAddArg(v43, v16, v54);
    int v55 = glpCallNodeGetArgCount(a2);
    if (v55)
    {
      int v56 = v55;
      for (unsigned int i = 0; i != v56; ++i)
      {
        char v58 = (void *)glpCompilerGetAllocator(a1);
        uint64_t v59 = glpCallNodeGetArg(a2, i);
        glpCallNodeAddArg(v58, v16, v59);
      }
    }
    uint64_t SaFlags = glpASTNodeGetSaFlags(a2);
    uint64_t v61 = glpSANode(a1, v16);
    uint64_t v12 = v61;
    if ((unint64_t)(v61 + 1) >= 2)
    {
      char v62 = glpASTNodeGetSaFlags(v61);
      glpASTNodeSetSaFlags(v12, SaFlags & 0xFFFFFFFFFFFFFFE0 | v62 & 0x1F);
    }
  }
  return v12;
}

uint64_t glpHandleSpecialOperatorFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (glpStringsEqual("$OP_pos", 0xA31C9B1600000007, *(char **)(a3 + 24), *(void *)(a3 + 32)))
  {
    return glpCallNodeGetArg(a2, 0);
  }
  else
  {
    if (!glpStringsEqual("$OP_neg", 0x34DF279C00000007, *(char **)(a3 + 24), *(void *)(a3 + 32))) {
      abort();
    }
    uint64_t Allocator = glpCompilerGetAllocator(a1);
    glpASTNodeGetLocation(a2, &v12);
    uint64_t NegateNode = glpMakeNegateNode(Allocator, &v12);
    uint64_t v9 = glpCallNodeGetArg(a2, 0);
    glpUnaryOperatorNodeSetExpr(NegateNode, v9);
    uint64_t SaType = glpASTNodeGetSaType(v9);
    glpASTNodeSetSaType(NegateNode, SaType);
    uint64_t SaFlags = glpASTNodeGetSaFlags(v9);
    glpASTNodeSetSaFlags(NegateNode, SaFlags);
    return NegateNode;
  }
}

uint64_t glpSALowerCallArgsToAssignment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v86 = a4;
  uint64_t v93 = *MEMORY[0x263EF8340];
  unsigned int v7 = glpCallNodeGetArgCount(a2);
  uint64_t v84 = a3;
  uint64_t v8 = *(uint64_t ***)(a3 + 80);
  __n128 v91 = 0uLL;
  uint64_t v92 = 0;
  glpASTNodeGetLocation(a2, &v91);
  uint64_t Allocator = glpCompilerGetAllocator(a1);
  __n128 v89 = v91;
  uint64_t v90 = v92;
  glpMakeCommaExprNode(Allocator, &v89, 0);
  uint64_t v87 = v10;
  unsigned int v85 = &v83;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (uint64_t *)((char *)&v83 - v12);
  if (v11 >= 0x200) {
    size_t v14 = 512;
  }
  else {
    size_t v14 = v11;
  }
  bzero((char *)&v83 - v12, v14);
  if (v7)
  {
    uint64_t v15 = 0;
    uint64_t v16 = v7;
    uint64_t v17 = v13;
    do
    {
      *uint64_t v17 = 0;
      uint64_t v18 = glpCallNodeGetArg(a2, v15);
      if ((*((unsigned char *)v8[v15] + 51) & 2) != 0)
      {
        uint64_t v19 = v18;
        if (glpIsConstantNode(v18)
          || glpIsLValueNode(v19)
          && ((uint64_t Offset = glpDerefNodeGetOffset(v19)) == 0
           || ((uint64_t v21 = Offset,
                Offsetuint64_t Expr = glpOffsetNodeGetOffsetExpr(Offset),
                VectorElementuint64_t Expr = glpOffsetNodeGetVectorElementExpr(v21),
                !OffsetExpr)
            || glpIsConstantNode(OffsetExpr))
           && (!VectorElementExpr || glpIsConstantNode(VectorElementExpr))))
        {
          *uint64_t v17 = v19;
        }
        else
        {
          v89.n128_u64[0] = 0;
          uint64_t SaType = glpASTNodeGetSaType(v19);
          char SaFlags = glpASTNodeGetSaFlags(v19);
          glpMakeTemporary(a1, SaType, SaFlags & 0x1F, v19, (uint64_t *)&v89, v17);
          uint64_t v26 = (void *)glpCompilerGetAllocator(a1);
          glpCommaExprNodeAddExpr(v26, v87, v89.n128_i64[0]);
        }
      }
      ++v15;
      ++v17;
    }
    while (v16 != v15);
    uint64_t v27 = v16;
    uint64_t v28 = v8;
    do
    {
      if ((*((unsigned char *)*v28 + 51) & 2) != 0)
      {
        uint64_t v29 = glpCompilerGetAllocator(a1);
        uint64_t v30 = *v28;
        uint64_t v90 = v92;
        __n128 v89 = v91;
        uint64_t LValueNode = glpMakeLValueNode(v29, &v89, v30[2], v30[3], (uint64_t)v30);
        glpASTNodeSetSaType(LValueNode, **v28);
        glpASTNodeSetSaFlags(LValueNode, (*v28)[6] & 0x1F);
        uint64_t v32 = (void *)glpCompilerGetAllocator(a1);
        uint64_t v33 = *v13;
        __n128 v89 = v91;
        uint64_t v90 = v92;
        uint64_t AssignFragment = glpMakeAssignFragment(a1, &v89, LValueNode, v33);
        glpCommaExprNodeAddExpr(v32, v87, AssignFragment);
      }
      ++v28;
      ++v13;
      --v27;
    }
    while (v27);
    char v35 = glpASTNodeGetSaFlags(a2);
    uint64_t v36 = v86;
    glpASTNodeSetSaFlags(v86, v35 & 0x1F);
    uint64_t v37 = (void *)glpCompilerGetAllocator(a1);
    glpCommaExprNodeAddExpr(v37, v87, v36);
    for (uint64_t i = 0; i != v16; ++i)
    {
      uint64_t v39 = glpCallNodeGetArg(a2, i);
      if ((*((unsigned char *)v8[i] + 51) & 4) != 0)
      {
        uint64_t Expr = v39;
        uint64_t v41 = glpCompilerGetAllocator(a1);
        uint64_t v42 = (uint64_t)v8[i];
        uint64_t v90 = v92;
        __n128 v89 = v91;
        uint64_t v43 = glpMakeLValueNode(v41, &v89, *(void *)(v42 + 16), *(void *)(v42 + 24), v42);
        glpASTNodeSetSaType(v43, *v8[i]);
        glpASTNodeSetSaFlags(v43, v8[i][6] & 0x1F);
        if (glpIsTypeConversionNode(Expr))
        {
          uint64_t Expr = glpUnaryOperatorNodeGetExpr(Expr);
          uint64_t v44 = glpCompilerGetAllocator(a1);
          uint64_t v45 = glpASTNodeGetSaType(Expr);
          char v46 = glpASTNodeGetSaFlags(Expr);
          __n128 v89 = v91;
          uint64_t v90 = v92;
          uint64_t TypeConversionNode = glpMakeTypeConversionNode(v44, &v89, v45, v46 & 0x1F);
          glpUnaryOperatorNodeSetExpr(TypeConversionNode, v43);
          uint64_t v43 = glpSANode(a1, TypeConversionNode);
        }
        __n128 v89 = v91;
        uint64_t v90 = v92;
        uint64_t v48 = glpMakeAssignFragment(a1, &v89, Expr, v43);
        uint64_t v49 = (void *)glpCompilerGetAllocator(a1);
        glpCommaExprNodeAddExpr(v49, v87, v48);
      }
    }
  }
  else
  {
    char v50 = glpASTNodeGetSaFlags(a2);
    uint64_t v51 = v86;
    glpASTNodeSetSaFlags(v86, v50 & 0x1F);
    uint64_t v52 = (void *)glpCompilerGetAllocator(a1);
    glpCommaExprNodeAddExpr(v52, v87, v51);
  }
  uint64_t v53 = v84;
  if (!*(void *)(v84 + 72)) {
    goto LABEL_36;
  }
  uint64_t v54 = glpCompilerGetAllocator(a1);
  uint64_t v55 = *(void *)(v53 + 72);
  uint64_t v90 = v92;
  __n128 v89 = v91;
  uint64_t v56 = glpMakeLValueNode(v54, &v89, *(void *)(v55 + 16), *(void *)(v55 + 24), v55);
  glpASTNodeSetSaType(v56, **(void **)(v53 + 72));
  glpASTNodeSetSaFlags(v56, *(void *)(*(void *)(v53 + 72) + 48) & 0x80000037FLL);
  uint64_t v57 = (uint64_t)glpCompilerNewTempName(a1);
  uint64_t v59 = v58;
  uint64_t v88 = 0;
  uint64_t v60 = glpCompilerGetAllocator(a1);
  __n128 v89 = v91;
  uint64_t v90 = v92;
  uint64_t TypedVariableFragment = glpMakeTypedVariableFragment(v60, &v89, v57, v59, &v88, v56);
  uint64_t v62 = v88;
  char v63 = glpASTNodeGetSaFlags(v56);
  glpASTNodeSetSaFlags(v62, v63 & 0x1F);
  glpASTNodeSetSaType(v88, **(void **)(v53 + 72));
  uint64_t v64 = glpSANode(a1, TypedVariableFragment);
  uint64_t v65 = v64;
  if ((unint64_t)(v64 + 1) > 1)
  {
    uint64_t v66 = glpASTNodeGetSaFlags(v64);
    glpASTNodeSetSaFlags(v65, v66 & 0xFFFFFFFF7FFFFFFFLL);
    uint64_t Extra = glpVariableDeclarationNodeGetExtra(v65);
    *(void *)(Extra + 48) &= ~0x80000000uLL;
    __n128 v68 = (void *)glpCompilerGetAllocator(a1);
    uint64_t v69 = v87;
    glpCommaExprNodeAddExpr(v68, v87, v65);
    uint64_t v70 = glpCompilerGetAllocator(a1);
    __n128 v89 = v91;
    uint64_t v90 = v92;
    glpMakeVariableIdentifierNode(v70, &v89, v57, v59);
    uint64_t v72 = glpSANode(a1, v71);
    long long v73 = (void *)glpCompilerGetAllocator(a1);
    glpCommaExprNodeAddExpr(v73, v69, v72);
    uint64_t PrimitiveType = glpGetPrimitiveType(0);
    glpASTNodeSetSaType(a2, (uint64_t)PrimitiveType);
    if (glpCompilerDoesTrackPrecision(a1) && (glpASTNodeGetSaFlags(v86) & 0x1F) == 0)
    {
      uint64_t v75 = v86;
      uint64_t v76 = glpASTNodeGetSaFlags(v86);
      char v77 = glpASTNodeGetSaFlags(v65);
      glpASTNodeSetSaFlags(v75, v77 & 0x1F | (unint64_t)v76);
    }
  }
  else
  {
    uint64_t v57 = glpSAFailed();
  }
  if ((unint64_t)(v65 + 1) >= 2)
  {
LABEL_36:
    uint64_t v78 = glpASTNodeGetSaFlags(a2);
    uint64_t v79 = glpASTNodeGetSaType(a2);
    glpASTNodeSetSaType(v86, v79);
    uint64_t v80 = glpSANode(a1, v87);
    uint64_t v57 = v80;
    if ((unint64_t)(v80 + 1) >= 2)
    {
      char v81 = glpASTNodeGetSaFlags(v80);
      glpASTNodeSetSaFlags(v57, v81 & 0x1F | (unint64_t)v78);
    }
  }
  return v57;
}

uint64_t glpInlineFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v99 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(a3 + 10) & 4) != 0) {
    glpCompilerSetRequiresOutputPoints(a1, 1);
  }
  if (a4) {
    a4 = 0;
  }
  __n128 v97 = 0uLL;
  uint64_t v98 = 0;
  glpASTNodeGetLocation(a2, &v97);
  v92[0] = a4;
  v92[1] = 0;
  v85[0] = a4;
  v92[2] = a1;
  uint64_t Allocator = (void *)glpCompilerGetAllocator(a1);
  uint64_t PointerHash = glpMakePointerHash(Allocator);
  uint64_t v93 = PointerHash;
  uint64_t v10 = (void *)glpCompilerGetAllocator(a1);
  uint64_t v11 = glpMakePointerHash(v10);
  __n128 v95 = v97;
  uint64_t v94 = v11;
  uint64_t v96 = v98;
  uint64_t v12 = glpCompilerGetAllocator(a1);
  __n128 v90 = v97;
  uint64_t v91 = v98;
  glpMakeCommaExprNode(v12, &v90, 0);
  uint64_t v86 = v13;
  v85[1] = (uint64_t)v85;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v85 - ((v14 + 15) & 0xFFFFFFFF0);
  if (v14 >= 0x200) {
    size_t v16 = 512;
  }
  else {
    size_t v16 = v14;
  }
  bzero((char *)v85 - ((v14 + 15) & 0xFFFFFFFF0), v16);
  if (*(_DWORD *)(a3 + 88))
  {
    unint64_t v17 = 0;
    uint64_t v18 = v15;
    while (1)
    {
      *uint64_t v18 = 0;
      uint64_t v19 = glpCallNodeGetArg(a2, v17);
      if (!glpIsLValueNode(v19)) {
        break;
      }
      uint64_t Offset = glpDerefNodeGetOffset(v19);
      if (Offset)
      {
        uint64_t v22 = Offset;
        Offsetuint64_t Expr = glpOffsetNodeGetOffsetExpr(Offset);
        VectorElementuint64_t Expr = glpOffsetNodeGetVectorElementExpr(v22);
        if (OffsetExpr)
        {
          if (!glpIsConstantNode(OffsetExpr)) {
            break;
          }
        }
        if (VectorElementExpr && !glpIsConstantNode(VectorElementExpr)) {
          break;
        }
      }
      unint64_t v25 = *(void *)(*(void *)(a3 + 80) + 8 * v17);
      uint64_t v26 = PointerHash;
      uint64_t v27 = v19;
LABEL_28:
      glpPointerHashPut(v26, v25, v27, v21);
      ++v17;
      ++v18;
      if (v17 >= *(unsigned int *)(a3 + 88)) {
        goto LABEL_29;
      }
    }
    if (glpIsConstantNode(v19))
    {
      if ((glpASTNodeGetSaFlags(v19) & 2) != 0)
      {
        uint64_t SaType = (unsigned int *)glpASTNodeGetSaType(v19);
        uint64_t DefaultPrecisionForType = glpGetDefaultPrecisionForType(a1, SaType);
      }
      else
      {
        uint64_t DefaultPrecisionForType = glpASTNodeGetSaFlags(v19) & 0x1F;
      }
      glpASTNodeSetSaFlags(v19, DefaultPrecisionForType | 0x60);
      glpASTNodeGetSaFlags(v19);
      uint64_t Value = glpConstantNodeGetValue(v19);
      v90.n128_u64[0] = 0;
      uint64_t v29 = *(uint64_t **)(*(void *)(a3 + 80) + 8 * v17);
      uint64_t v30 = *v29;
      if (Value)
      {
        uint64_t v33 = 96;
LABEL_25:
        char SaFlags = glpASTNodeGetSaFlags(v19);
        Temporary = (uint64_t *)glpMakeTemporary(a1, v30, SaFlags & 0x1F | (unint64_t)v33, v19 & ((uint64_t)(*(void *)(*(void *)(*(void *)(a3 + 80) + 8 * v17) + 48) << 38) >> 63), (uint64_t *)&v90, v18);
        if (v90.n128_u64[0])
        {
          uint64_t v36 = (void *)glpCompilerGetAllocator(a1);
          glpCommaExprNodeAddExpr(v36, v86, v90.n128_i64[0]);
        }
        uint64_t v37 = glpCompilerGetAllocator(a1);
        glpASTNodeGetLocation(a2, &v89);
        uint64_t LValueNode = glpMakeLValueNode(v37, &v89, Temporary[2], Temporary[3], (uint64_t)Temporary);
        glpASTNodeSetSaType(LValueNode, **(void **)(*(void *)(a3 + 80) + 8 * v17));
        glpASTNodeSetSaFlags(LValueNode, Temporary[6]);
        uint64_t PointerHash = v93;
        unint64_t v25 = *(void *)(*(void *)(a3 + 80) + 8 * v17);
        uint64_t v26 = v93;
        uint64_t v27 = LValueNode;
        goto LABEL_28;
      }
    }
    else
    {
      v90.n128_u64[0] = 0;
      uint64_t v29 = *(uint64_t **)(*(void *)(a3 + 80) + 8 * v17);
      uint64_t v30 = *v29;
    }
    uint64_t v33 = ((unint64_t)v29[6] >> 17) & 0x100;
    goto LABEL_25;
  }
LABEL_29:
  if (*(void *)(a3 + 72))
  {
    uint64_t v39 = glpCompilerNewTempName(a1);
    uint64_t v41 = v40;
    v90.n128_u64[0] = 0;
    uint64_t v42 = glpCompilerGetAllocator(a1);
    glpASTNodeGetLocation(a2, &v88);
    uint64_t TypedVariableFragment = glpMakeTypedVariableFragment(v42, &v88, (uint64_t)v39, v41, (uint64_t *)&v90, 0);
    if (*(void *)(*(void *)(a3 + 72) + 48)) {
      uint64_t v44 = v85[0];
    }
    else {
      uint64_t v44 = *(void *)(*(void *)(a3 + 72) + 48) & 0x1FLL;
    }
    glpASTNodeSetSaFlags(v90.n128_i64[0], v44);
    glpASTNodeSetSaType(v90.n128_i64[0], **(void **)(a3 + 72));
    uint64_t v45 = glpSANode(a1, TypedVariableFragment);
    char v46 = (void *)glpCompilerGetAllocator(a1);
    uint64_t v47 = v86;
    glpCommaExprNodeAddExpr(v46, v86, v45);
    uint64_t v48 = glpASTNodeGetSaFlags(v45);
    glpASTNodeSetSaFlags(v45, v48 & 0xFFFFFFFF7FFFFF7FLL);
    uint64_t Extra = glpVariableDeclarationNodeGetExtra(v45);
    *(void *)(Extra + 48) &= 0xFFFFFFFF7FFFFF7FLL;
    char v50 = (uint64_t *)glpVariableDeclarationNodeGetExtra(v45);
    uint64_t v51 = glpCompilerGetAllocator(a1);
    glpASTNodeGetLocation(a2, &v87);
    uint64_t v52 = glpMakeLValueNode(v51, &v87, v50[2], v50[3], (uint64_t)v50);
    glpASTNodeSetSaType(v52, *v50);
    glpASTNodeSetSaFlags(v52, v50[6]);
    glpPointerHashPut(PointerHash, *(void *)(a3 + 72), v52, v53);
    uint64_t v54 = glpCompilerGetAllocator(a1);
    uint64_t v55 = (uint64_t *)(*(uint64_t (**)(void, uint64_t, const char *))(v54 + 8))(*(void *)v54, 16, "String: $return_value_inline");
    uint64_t v56 = (void *)glpCompilerGetAllocator(a1);
    StringBuffer = glpMakeStringBuffer(v56);
    glpStringBufferAppendCString(StringBuffer, "$return_value_inline$");
    glpStringBufferAppendString(StringBuffer, *(void *)(a3 + 40), *(void *)(a3 + 48));
    *uint64_t v55 = glpStringBufferGetString((uint64_t)StringBuffer);
    v55[1] = v58;
    glpPointerHashPut(v94, *(void *)(a3 + 72), (uint64_t)v55, v59);
    if ((*(unsigned char *)(a3 + 9) & 0x18) != 0)
    {
      uint64_t v60 = glpCompilerGetAllocator(a1);
      v50[13] = (uint64_t)glpMakeMutableValue(v60, **(unsigned int ***)(a3 + 72), 0, v61, v62, v63, v64, v65, v85[0]);
    }
  }
  else
  {
    char v50 = 0;
    uint64_t v47 = v86;
  }
  uint64_t v66 = (void *)glpCompilerGetAllocator(a1);
  __n128 v67 = (uint64_t *)glpCompilerGetAllocator(a1);
  uint64_t Body = glpFunctionDefinitionNodeGetBody(*(void *)(a3 + 64));
  uint64_t v69 = glpDeepCopyASTNode(v67, Body, (uint64_t (*)(uint64_t, uint64_t *, _DWORD *))saInliningNodeReplacement, (uint64_t)v92);
  glpCommaExprNodeAddExpr(v66, v47, v69);
  unint64_t v70 = *(unsigned int *)(a3 + 88);
  if (v70)
  {
    for (unint64_t i = 0; i < v70; ++i)
    {
      if ((*(unsigned char *)(*(void *)(*(void *)(a3 + 80) + 8 * i) + 51) & 4) != 0 && *(void *)&v15[8 * i])
      {
        uint64_t Expr = glpCallNodeGetArg(a2, i);
        if (!glpIsLValueNode(Expr)) {
          uint64_t Expr = glpUnaryOperatorNodeGetExpr(Expr);
        }
        long long v73 = (void *)glpCompilerGetAllocator(a1);
        uint64_t v74 = *(void *)&v15[8 * i];
        __n128 v90 = v97;
        uint64_t v91 = v98;
        uint64_t AssignFragment = glpMakeAssignFragment(a1, &v90, Expr, v74);
        uint64_t v47 = v86;
        glpCommaExprNodeAddExpr(v73, v86, AssignFragment);
        unint64_t v70 = *(unsigned int *)(a3 + 88);
      }
    }
  }
  if (v50)
  {
    uint64_t v76 = v50[13];
    if (v76)
    {
      v50[8] = v76;
      v50[13] = 0;
      glpCommaExprNodeClearExprs(v47);
    }
    uint64_t v77 = glpCompilerGetAllocator(a1);
    uint64_t v91 = v98;
    __n128 v90 = v97;
    uint64_t v78 = glpMakeLValueNode(v77, &v90, v50[2], v50[3], (uint64_t)v50);
    glpASTNodeSetSaType(v78, *v50);
    glpASTNodeSetSaFlags(v78, v50[6] & 0x80000037FLL);
    uint64_t v79 = (void *)glpCompilerGetAllocator(a1);
    glpCommaExprNodeAddExpr(v79, v47, v78);
  }
  uint64_t v80 = glpASTNodeGetSaFlags(a2);
  uint64_t v81 = glpSANode(a1, v47);
  uint64_t v82 = v81;
  if ((unint64_t)(v81 + 1) >= 2)
  {
    char v83 = glpASTNodeGetSaFlags(v81);
    glpASTNodeSetSaFlags(v82, v83 & 0x1F | (unint64_t)v80);
  }
  return v82;
}

uint64_t saInliningNodeReplacement(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  int Kind = glpASTNodeGetKind(a3);
  if (Kind <= 74)
  {
    if (Kind)
    {
      if (Kind != 3)
      {
        if (Kind == 46)
        {
          unint64_t Extra = glpVariableDeclarationNodeGetExtra(v3);
          uint64_t v9 = *(void *)(a1 + 24);
          v65[0] = MEMORY[0x263EF8330];
          v65[1] = 0x40000000;
          v65[2] = __saInliningNodeReplacement_block_invoke;
          v65[3] = &__block_descriptor_tmp_6;
          v65[4] = a2;
          v65[5] = Extra;
          v65[6] = v3;
          uint64_t v10 = glpPointerHashCache_b(v9, Extra, (uint64_t)v65);
          Variableunint64_t Extra = glpLValueNodeGetVariableExtra(v10);
          glpVariableDeclarationNodeSetExtra(v3, VariableExtra);
          uint64_t v12 = *(void *)(VariableExtra + 48);
          if (v12)
          {
            *(void *)(VariableExtra + 48) = *(void *)a1 | v12 & 0xFFFFFFFFFFFFFFE0;
            uint64_t SaFlags = glpASTNodeGetSaFlags(v3);
            glpASTNodeSetSaFlags(v3, SaFlags & 0xFFFFFFFFFFFFFFE0 | *(void *)a1);
          }
          unint64_t v14 = (uint64_t *)glpPointerHashGet(*(void *)(a1 + 32), Extra);
          if (v14) {
            glpVariableDeclarationNodeSetName(v3, *v14, v14[1]);
          }
          uint64_t Initializer = glpVariableDeclarationNodeGetInitializer(v3);
          if (Initializer)
          {
            uint64_t v16 = Initializer;
            if (glpIsAssignNode(Initializer) && (*(unsigned char *)(VariableExtra + 49) & 2) != 0)
            {
              uint64_t Lhs = glpBinaryOperatorNodeGetLhs(v16);
              uint64_t Rhs = glpBinaryOperatorNodeGetRhs(v16);
              if (glpIsLValueNode(Lhs) && glpIsConstantNode(Rhs) && glpLValueNodeGetVariableExtra(Lhs) == VariableExtra)
              {
                uint64_t Offset = glpDerefNodeGetOffset(Lhs);
                if (!Offset
                  || (uint64_t v20 = Offset, !glpOffsetNodeGetOffsetExpr(Offset))
                  && !glpOffsetNodeGetSwizzle(v20)
                  && !glpOffsetNodeGetVectorElementExpr(v20))
                {
                  uint64_t v21 = glpLValueNodeGetVariableExtra(Lhs);
                  *(void *)(v21 + 64) = glpConstantNodeGetValue(Rhs);
                  glpVariableDeclarationNodeSetInitializer(v3, 0);
                }
              }
            }
          }
          goto LABEL_33;
        }
LABEL_31:
        if (glpASTNodeGetSaFlags(v3)) {
          goto LABEL_32;
        }
LABEL_33:
        if (!v3) {
          return 0;
        }
        uint64_t v32 = glpASTNodeGetSaFlags(v3);
        glpASTNodeSetSaFlags(v3, v32 & 0xFFFFFFFFFFFFFF1FLL);
        uint64_t ValueHash = glpCompilerGetValueHash(*(void *)(a1 + 16));
        uint64_t v34 = glpConstantFold((uint64_t)a2, ValueHash, v3);
        uint64_t v7 = v34;
        if (v34)
        {
          __n128 v61 = *(__n128 *)(a1 + 40);
          uint64_t v62 = *(void *)(a1 + 56);
          glpASTNodeSetLocation(v34, &v61);
        }
        return v7;
      }
      if ((glpASTNodeGetSaFlags(v3) & 0x1F) != 1) {
        goto LABEL_33;
      }
    }
    else
    {
      if ((glpTypeConversionNodeGetToPrecision(v3) & 1) == 0 && (glpASTNodeGetSaFlags(v3) & 1) == 0) {
        goto LABEL_33;
      }
      glpTypeConversionNodeSetToPrecision(v3, *(void *)a1);
    }
LABEL_32:
    uint64_t v31 = glpASTNodeGetSaFlags(v3);
    glpASTNodeSetSaFlags(v3, v31 & 0xFFFFFFFFFFFFFFE0 | *(void *)a1);
    goto LABEL_33;
  }
  switch(Kind)
  {
    case 'K':
      uint64_t v7 = 0;
      *(unsigned char *)(a1 + 8) = 1;
      break;
    case 'P':
      uint64_t v22 = (_OWORD *)glpOffsetNodeGetExtra(v3);
      uint64_t v23 = (_OWORD *)((uint64_t (*)(void, uint64_t, const char *))a2[1])(*a2, 32, "Offest Object (SA inlining)");
      long long v24 = v22[1];
      *uint64_t v23 = *v22;
      v23[1] = v24;
      glpOffsetNodeSetExtra(v3, (uint64_t)v23);
      goto LABEL_33;
    case 'Q':
      unint64_t v25 = glpLValueNodeGetVariableExtra(v3);
      uint64_t v26 = glpPointerHashGet(*(void *)(a1 + 24), v25);
      if (v26)
      {
        uint64_t LValueNode = v26;
        uint64_t v28 = glpLValueNodeGetVariableExtra(v26);
        glpLValueNodeSetVariableExtra(v3, v28);
        uint64_t v29 = glpASTNodeGetSaFlags(v3);
        char v30 = glpASTNodeGetSaFlags(LValueNode);
        glpASTNodeSetSaFlags(v3, v29 & 0xFFFFFFFFFFFFFFE0 | v30 & 0x1F);
      }
      else if ((*(_WORD *)(v25 + 50) & 0x8040) != 0)
      {
        uint64_t LValueNode = 0;
      }
      else
      {
        uint64_t v36 = ((uint64_t (*)(void, uint64_t, const char *))a2[1])(*a2, 160, "Variable Object (SA inlining)");
        long long v37 = *(_OWORD *)(v25 + 16);
        *(_OWORD *)uint64_t v36 = *(_OWORD *)v25;
        *(_OWORD *)(v36 + 16) = v37;
        long long v38 = *(_OWORD *)(v25 + 80);
        long long v40 = *(_OWORD *)(v25 + 32);
        long long v39 = *(_OWORD *)(v25 + 48);
        *(_OWORD *)(v36 + 64) = *(_OWORD *)(v25 + 64);
        *(_OWORD *)(v36 + 80) = v38;
        *(_OWORD *)(v36 + 32) = v40;
        *(_OWORD *)(v36 + 48) = v39;
        long long v41 = *(_OWORD *)(v25 + 144);
        long long v43 = *(_OWORD *)(v25 + 96);
        long long v42 = *(_OWORD *)(v25 + 112);
        *(_OWORD *)(v36 + 128) = *(_OWORD *)(v25 + 128);
        *(_OWORD *)(v36 + 144) = v41;
        *(_OWORD *)(v36 + 96) = v43;
        *(_OWORD *)(v36 + 112) = v42;
        glpASTNodeGetLocation(v3, &v64);
        uint64_t LValueNode = glpMakeLValueNode((uint64_t)a2, &v64, *(void *)(v36 + 16), *(void *)(v36 + 24), v36);
        glpASTNodeSetSaType(LValueNode, *(void *)v36);
        glpASTNodeSetSaFlags(LValueNode, *(void *)(v36 + 48));
        glpPointerHashPut(*(void *)(a1 + 24), v25, LValueNode, v44);
        glpLValueNodeSetVariableExtra(v3, v36);
      }
      if (glpASTNodeGetSaFlags(v3))
      {
        uint64_t v45 = glpASTNodeGetSaFlags(v3);
        glpASTNodeSetSaFlags(v3, v45 & 0xFFFFFFFFFFFFFFE0 | *(void *)a1);
      }
      char v46 = (uint64_t *)glpPointerHashGet(*(void *)(a1 + 32), v25);
      if (v46) {
        glpLValueNodeSetVariableName(v3, *v46, v46[1]);
      }
      if (LValueNode && glpIsDerefNode(LValueNode) && glpDerefNodeGetOffset(LValueNode))
      {
        uint64_t v47 = glpDerefNodeGetOffset(LValueNode);
        uint64_t v48 = glpDerefNodeGetOffset(v3);
        if (!v48)
        {
          glpAddOffsetIfNeeded((uint64_t)a2, v3);
          uint64_t v48 = glpDerefNodeGetOffset(v3);
        }
        glpOffsetNodeGetOffsetExpr(v48);
        glpOffsetNodeGetSwizzle(v48);
        glpOffsetNodeGetVectorElementExpr(v48);
        if (glpOffsetNodeGetOffsetExpr(v47))
        {
          glpOffsetNodeGetOffsetExpr(v47);
          if (v48 && glpOffsetNodeGetOffsetExpr(v48))
          {
            uint64_t v49 = *(void *)(a1 + 16);
            glpASTNodeGetLocation(v3, &v63);
            Offsetuint64_t Expr = glpOffsetNodeGetOffsetExpr(v47);
            uint64_t v51 = glpOffsetNodeGetOffsetExpr(v48);
            uint64_t AddFragment = glpMakeAddFragment(v49, &v63, OffsetExpr, v51);
          }
          else
          {
            uint64_t AddFragment = glpOffsetNodeGetOffsetExpr(v47);
          }
          glpOffsetNodeSetOffsetExpr(v48, AddFragment);
        }
        if (glpOffsetNodeGetBankIndex(v47))
        {
          uint64_t BankIndex = glpOffsetNodeGetBankIndex(v47);
          glpOffsetNodeSetBankIndex(v48, BankIndex);
        }
        unsigned int Swizzle = glpOffsetNodeGetSwizzle(v47);
        unsigned int v55 = glpOffsetNodeGetSwizzle(v48);
        if (Swizzle)
        {
          if (v55)
          {
            int v56 = v55 & 7;
            if ((v55 & 7) != 0)
            {
              int v57 = 0;
              int v58 = 2 * v56;
              do
              {
                int v56 = (((Swizzle >> (2 * ((v55 >> (v57 + 3)) & 3) + 3)) & 3) << (v57 + 3)) | v56 & ~(24 << v57);
                v57 += 2;
              }
              while (v58 != v57);
            }
          }
          else
          {
            int v56 = Swizzle;
          }
        }
        else
        {
          int v56 = v55;
        }
        glpOffsetNodeSetSwizzle(v48, v56);
        if (glpOffsetNodeGetVectorElementExpr(v47))
        {
          VectorElementuint64_t Expr = glpOffsetNodeGetVectorElementExpr(v47);
          glpOffsetNodeSetVectorElementExpr(v48, VectorElementExpr);
        }
        if (glpOffsetNodeGetPreSwizzlePrimitiveType(v47))
        {
          PreSwizzleuint64_t PrimitiveType = glpOffsetNodeGetPreSwizzlePrimitiveType(v47);
          glpOffsetNodeSetPreSwizzlePrimitiveType(v48, PreSwizzlePrimitiveType);
        }
      }
      goto LABEL_33;
    case 'T':
      uint64_t v3 = glpSAInlinePPStreamOpFixup(*(void *)(a1 + 16), v3);
      goto LABEL_33;
    default:
      goto LABEL_31;
  }
  return v7;
}

uint64_t __saInliningNodeReplacement_block_invoke(void *a1)
{
  uint64_t v2 = (*(uint64_t (**)(void, uint64_t, const char *))(a1[4] + 8))(*(void *)a1[4], 160, "VariableObject (SA inlining)");
  uint64_t v3 = (_OWORD *)a1[5];
  long long v4 = v3[1];
  *(_OWORD *)uint64_t v2 = *v3;
  *(_OWORD *)(v2 + 16) = v4;
  long long v5 = v3[2];
  long long v6 = v3[3];
  long long v7 = v3[5];
  *(_OWORD *)(v2 + 64) = v3[4];
  *(_OWORD *)(v2 + 80) = v7;
  *(_OWORD *)(v2 + 32) = v5;
  *(_OWORD *)(v2 + 48) = v6;
  long long v8 = v3[6];
  long long v9 = v3[7];
  long long v10 = v3[9];
  *(_OWORD *)(v2 + 128) = v3[8];
  *(_OWORD *)(v2 + 144) = v10;
  *(_OWORD *)(v2 + 96) = v8;
  *(_OWORD *)(v2 + 112) = v9;
  uint64_t v11 = a1[4];
  glpASTNodeGetLocation(a1[6], &v14);
  uint64_t LValueNode = glpMakeLValueNode(v11, &v14, *(void *)(v2 + 16), *(void *)(v2 + 24), v2);
  glpASTNodeSetSaType(LValueNode, *(void *)v2);
  glpASTNodeSetSaFlags(LValueNode, *(void *)(v2 + 48));
  return LValueNode;
}

char *glpQualifierKindToString(unsigned int a1)
{
  if (a1 >= 7) {
    abort();
  }
  return off_264D99F30[a1];
}

uint64_t glpQualifierKindOfNode(uint64_t a1)
{
  int Kind = glpASTNodeGetKind(a1);
  if (Kind == 61) {
    return 5;
  }
  if (Kind == 60) {
    return 0;
  }
  if (Kind != 59 || (unsigned int Qualifier = glpKeywordQualifierNodeGetQualifier(a1), Qualifier >= 0x19)) {
    abort();
  }
  return dword_2393D2AC8[Qualifier];
}

uint64_t glpParseQualifiers(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t *a5, void **a6, uint64_t *a7)
{
  unsigned int v11 = a2;
  uint64_t v12 = a1;
  if (!a3)
  {
    *a6 = 0;
    *a7 = 0;
LABEL_5:
    uint64_t v15 = a4;
    int v14 = 0;
    goto LABEL_6;
  }
  uint64_t v13 = a3;
  if (glpIsKeywordQualifierNode(a3))
  {
    *a6 = 0;
    *a7 = 0;
    int v14 = 1 << glpKeywordQualifierNodeGetQualifier(v13);
    a1 = v12;
    a2 = v11;
    a3 = v13;
    uint64_t v15 = a4;
LABEL_6:
    return qualifierMaskToSAFlags(a1, a2, a3, v15, v14, a5);
  }
  if (glpIsLayoutQualifierNode(v13))
  {
    *a7 = 0;
    uint64_t result = qualifierMaskToSAFlags(v12, v11, v13, a4, 0, a5);
    if (!result) {
      return result;
    }
    BOOL v17 = parseLayout(v12, v11, v13, a4, a6) == 0;
    return !v17;
  }
  if (glpIsSubroutineTypeListNode(v13))
  {
    *a6 = 0;
    *a7 = glpSANode(v12, v13);
    uint64_t result = qualifierMaskToSAFlags(v12, v11, v13, a4 | 0x180000, 0, a5);
    if (!result) {
      return result;
    }
    BOOL v17 = *a7 == -1;
    return !v17;
  }
  if (!glpIsQualifierListNode(v13)) {
LABEL_65:
  }
    abort();
  *a6 = 0;
  *a7 = 0;
  int QualifierCount = glpQualifierListNodeGetQualifierCount(v13);
  if (!QualifierCount)
  {
    a1 = v12;
    a2 = v11;
    a3 = v13;
    goto LABEL_5;
  }
  uint64_t v51 = a5;
  BOOL v18 = 0;
  unsigned int v19 = 0;
  uint64_t v53 = 0;
  do
  {
    uint64_t Qualifier = glpQualifierListNodeGetQualifier(v13, v19);
    uint64_t v21 = Qualifier;
    if (v18)
    {
      if (!glpIsKeywordQualifierNode(Qualifier)
        || (unsigned int v22 = glpKeywordQualifierNodeGetQualifier(v21), v22 > 0x12)
        || ((1 << v22) & 0x46000) == 0)
      {
        InfoLog = (uint64_t **)glpCompilerGetInfoLog(v12);
        glpASTNodeGetLocation(v13, v57);
        uint64_t v36 = "'centroid', 'sample' and 'patch' must be directly followed by 'in', 'out' or 'varying'";
        long long v37 = v57;
        goto LABEL_63;
      }
    }
    unsigned int v23 = glpQualifierKindOfNode(v21);
    if (glpIsKeywordQualifierNode(v21) && glpKeywordQualifierNodeGetQualifier(v21) == 4)
    {
      uint64_t NameTable = glpCompilerGetNameTable(v12);
      if (glpNameTableIsExtensionEnabled(NameTable, 0xEu)) {
        unsigned int v23 = 4;
      }
    }
    if (v23 < HIDWORD(v53))
    {
      uint64_t v25 = glpCompilerGetNameTable(v12);
      if (glpNameTableGetGLSLVersion(v25) <= 9)
      {
        if (glpIsKeywordQualifierNode(v21))
        {
          unsigned int v38 = glpKeywordQualifierNodeGetQualifier(v21);
          glpQualifierName(v38);
        }
        InfoLog = (uint64_t **)glpCompilerGetInfoLog(v12);
        glpASTNodeGetLocation(v21, &v56);
        unsigned __int8 v48 = glpQualifierKindToString(v23);
        glpQualifierKindToString(HIDWORD(v53));
        char v49 = v48;
        uint64_t v36 = "%s qualifier %s%s%smust precede %s qualifiers";
        long long v37 = &v56;
LABEL_63:
        glpLogMessage(InfoLog, 0, (uint64_t)v37, v36, v32, v33, v34, v35, v49);
        return 0;
      }
    }
    if (glpIsKeywordQualifierNode(v21))
    {
      HIDWORD(v53) = v23;
      unsigned int v26 = glpKeywordQualifierNodeGetQualifier(v21);
      int v27 = 1 << v26;
      if (((1 << v26) & v53) != 0)
      {
        uint64_t v28 = glpCompilerGetNameTable(v12);
        if (glpNameTableGetGLSLVersion(v28) < 0xA)
        {
          long long v39 = (uint64_t **)glpCompilerGetInfoLog(v12);
          glpASTNodeGetLocation(v21, &v55);
          char v50 = glpQualifierName(v26);
          glpLogMessage(v39, 0, (uint64_t)&v55, "Duplicate qualifier '%s'", v40, v41, v42, v43, v50);
          return 0;
        }
      }
      if (v26 - 6 > 2)
      {
        BOOL v18 = 0;
      }
      else
      {
        uint64_t v29 = glpCompilerGetNameTable(v12);
        BOOL v18 = !glpNameTableIsExtensionEnabled(v29, 0xEu);
      }
      LODWORD(v53) = v27 | v53;
    }
    else if (glpIsLayoutQualifierNode(v21))
    {
      BOOL v18 = 0;
    }
    else
    {
      if (!glpIsSubroutineTypeListNode(v21) || *a7) {
        goto LABEL_65;
      }
      uint64_t v30 = glpSANode(v12, v21);
      *a7 = v30;
      if (v30 == -1) {
        return 0;
      }
      BOOL v18 = 0;
      a4 |= 0x180000uLL;
    }
    ++v19;
  }
  while (QualifierCount != v19);
  if (v18)
  {
    InfoLog = (uint64_t **)glpCompilerGetInfoLog(v12);
    glpASTNodeGetLocation(v13, &v54);
    uint64_t v36 = "'centroid', 'sample' and 'patch' must be directly followed by 'in', 'out' or 'varying'";
    long long v37 = &v54;
    goto LABEL_63;
  }
  int v44 = qualifierMaskToSAFlags(v12, v11, v13, a4, v53, v51);
  uint64_t result = v44 != 0;
  if (v44)
  {
    for (unsigned int i = 0; i != QualifierCount; ++i)
    {
      uint64_t v46 = glpQualifierListNodeGetQualifier(v13, i);
      if (glpIsLayoutQualifierNode(v46))
      {
        if (!*a6)
        {
          uint64_t Allocator = glpCompilerGetAllocator(v12);
          *a6 = glpMakeLayoutObject(Allocator);
        }
        uint64_t result = parseLayout(v12, v11, v46, *v51, a6);
        if (!result) {
          break;
        }
      }
      uint64_t result = 1;
    }
  }
  return result;
}

uint64_t qualifierMaskToSAFlags(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6)
{
  *a6 = a4;
  int v9 = a5 & 0x1F80000;
  if (a2 > 0xC) {
    goto LABEL_17;
  }
  if (((1 << a2) & 0x772) != 0)
  {
    if ((a5 & 0x1F80000u) < 0x200000)
    {
      if (!v9 || v9 == 0x80000) {
        goto LABEL_21;
      }
      if (v9 == 0x100000)
      {
        uint64_t v12 = 2;
        goto LABEL_20;
      }
    }
    else if ((a5 & 0x1F80000u) >= 0x800000)
    {
      if (v9 == 0x800000)
      {
        uint64_t v12 = 8;
        goto LABEL_20;
      }
      if (v9 == 0x1000000)
      {
        uint64_t v12 = 16;
        goto LABEL_20;
      }
    }
    else
    {
      if (v9 == 0x200000)
      {
        uint64_t v12 = 1;
        goto LABEL_20;
      }
      if (v9 == 0x400000)
      {
        uint64_t v12 = 4;
LABEL_20:
        *a6 = v12 | a4;
        goto LABEL_21;
      }
    }
LABEL_17:
    uint64_t Allocator = (void *)glpCompilerGetAllocator(a1);
    StringBuffer = glpMakeStringBuffer(Allocator);
    qualifierMaskToStringBuffer(StringBuffer, v9);
    InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
    glpASTNodeGetLocation(a3, &v92);
    Cuint64_t String = glpStringBufferGetCString(StringBuffer);
    qualifierContextToString(a2);
    uint64_t v20 = "Invalid precision qualifiers '%s' in %s context";
LABEL_163:
    uint64_t v47 = &v92;
    goto LABEL_164;
  }
  if (v9)
  {
    uint64_t v13 = (void *)glpCompilerGetAllocator(a1);
    int v14 = glpMakeStringBuffer(v13);
    qualifierMaskToStringBuffer(v14, v9);
    InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
    glpASTNodeGetLocation(a3, &v93);
    Cuint64_t String = glpStringBufferGetCString(v14);
    qualifierContextToString(a2);
    uint64_t v20 = "Precision qualifiers '%s' not allowed in %s context";
    goto LABEL_89;
  }
LABEL_21:
  unsigned int v23 = a5 & 0x7E000;
  uint64_t NameTable = glpCompilerGetNameTable(a1);
  unsigned int GLSLVersion = glpNameTableGetGLSLVersion(NameTable);
  int Language = glpNameTableGetLanguage(NameTable);
  BOOL v27 = glpNameTableIsExtensionEnabled(NameTable, 0xEu) || glpNameTableIsExtensionEnabled(NameTable, 0x23u);
  BOOL IsExtensionEnabled = glpNameTableIsExtensionEnabled(NameTable, 2u);
  unint64_t v29 = (unint64_t)(glpCompilerAllOutputsAreInvariant(a1) != 0) << 40;
  unint64_t v30 = (unint64_t)(a2 != 2) << 31;
  uint64_t v31 = *a6;
  if (a2 != 7 || Language)
  {
    BOOL v34 = (v31 & 0x140000000) != 0;
    if (a2 != 7 || Language != 4)
    {
      BOOL v32 = (v31 & 0x120000000) != 0;
      BOOL v33 = (*a6 & 0x60000000) == 0;
      switch(a2)
      {
        case 0u:
        case 3u:
        case 4u:
        case 6u:
        case 8u:
        case 0xBu:
        case 0xCu:
          if (!v23) {
            goto LABEL_86;
          }
          long long v37 = (void *)glpCompilerGetAllocator(a1);
          unsigned int v38 = glpMakeStringBuffer(v37);
          qualifierMaskToStringBuffer(v38, a5 & 0x7E000);
          InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
          glpASTNodeGetLocation(a3, &v92);
          Cuint64_t String = glpStringBufferGetCString(v38);
          qualifierContextToString(a2);
          uint64_t v20 = "Storage qualifiers '%s' not allowed in %s context";
          goto LABEL_163;
        case 1u:
        case 9u:
        case 0xAu:
          if ((a5 & 0x7E000u) >= 0x10000)
          {
            if ((a5 & 0x7E000u) >= 0x40000)
            {
              if (v23 != 0x40000)
              {
LABEL_33:
                if (v23 != 270336)
                {
                  if (v23 != 278528) {
                    goto LABEL_141;
                  }
                  int v35 = Language == 4 && v27;
                  if (Language == 3) {
                    int v35 = 1;
                  }
                  if (GLSLVersion > 2 || !v35) {
                    goto LABEL_141;
                  }
                  goto LABEL_84;
                }
                if (GLSLVersion > 2 || Language != 3)
                {
LABEL_141:
                  int v58 = (void *)glpCompilerGetAllocator(a1);
                  double v59 = glpMakeStringBuffer(v58);
                  qualifierMaskToStringBuffer(v59, a5 & 0x7E000);
                  uint64_t v60 = (uint64_t **)glpCompilerGetInfoLog(a1);
                  glpASTNodeGetLocation(a3, &v91);
                  char v61 = glpStringBufferGetCString(v59);
                  qualifierContextToString(a2);
                  glpLogMessage(v60, 0, (uint64_t)&v91, "Invalid storage qualifiers '%s' in %s context", v62, v63, v64, v65, v61);
                  return 0;
                }
                goto LABEL_68;
              }
              goto LABEL_59;
            }
LABEL_64:
            if (v23 == 0x10000)
            {
              if (v33)
              {
                uint64_t v41 = 0x180000100;
                if (a2 == 2) {
                  uint64_t v41 = 0x100000000;
                }
                unint64_t v40 = v41 | ((unint64_t)(a2 == 7) << 35) | v31;
                goto LABEL_85;
              }
              goto LABEL_141;
            }
            if (v23 != 0x20000 || GLSLVersion > 2 || Language) {
              goto LABEL_141;
            }
LABEL_68:
            uint64_t v39 = 2684354816;
            if (a2 == 2) {
              uint64_t v39 = 0x20000000;
            }
            unint64_t v40 = v31 | v39;
            goto LABEL_85;
          }
          BOOL v36 = v23 == 0x4000;
          if ((a5 & 0x7E000u) >= 0x4000) {
            goto LABEL_78;
          }
          if (v23) {
            goto LABEL_45;
          }
          unint64_t v40 = v31 | v30;
          break;
        case 2u:
        case 7u:
          goto LABEL_30;
        case 5u:
          unsigned int v57 = v23 >> 13;
          if (v23 >> 13 < 2)
          {
            unint64_t v40 = v31 | 0x2000000;
            goto LABEL_85;
          }
          if (v57 == 2)
          {
            unint64_t v40 = v31 | 0x4000000;
            goto LABEL_85;
          }
          if (v57 != 4) {
            goto LABEL_141;
          }
          unint64_t v40 = v31 | 0x6000000;
          goto LABEL_85;
        default:
          goto LABEL_141;
      }
      goto LABEL_85;
    }
    BOOL v33 = (*a6 & 0x60000000) == 0;
    BOOL v32 = 1;
  }
  else
  {
    BOOL v32 = (v31 & 0x120000000) != 0;
    BOOL v33 = (*a6 & 0x60000000) == 0;
    BOOL v34 = 1;
  }
LABEL_30:
  if ((a5 & 0x7E000u) >= 0x10000)
  {
    if ((a5 & 0x7E000u) >= 0x40000)
    {
      if (v23 != 0x40000) {
        goto LABEL_33;
      }
LABEL_59:
      if (GLSLVersion > 2) {
        goto LABEL_141;
      }
      if (Language != 3 && Language)
      {
        if (Language != 4) {
          goto LABEL_141;
        }
        goto LABEL_68;
      }
LABEL_84:
      unint64_t v40 = v31 | v30 | v29 | 0x40000000;
      goto LABEL_85;
    }
    goto LABEL_64;
  }
  BOOL v36 = v23 == 0x4000;
  if ((a5 & 0x7E000u) < 0x4000)
  {
    if (v23)
    {
LABEL_45:
      if (v23 != 0x2000 || GLSLVersion < 3 || v34) {
        goto LABEL_141;
      }
      goto LABEL_68;
    }
    InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
    glpASTNodeGetLocation(a3, &v93);
    Cuint64_t String = qualifierContextToString(a2);
    uint64_t v20 = "Storage qualifier required in %s context";
LABEL_89:
    uint64_t v47 = &v93;
LABEL_164:
    glpLogMessage(InfoLog, 0, (uint64_t)v47, v20, v16, v17, v18, v19, CString);
    return 0;
  }
LABEL_78:
  if (v36)
  {
    if (GLSLVersion < 3 || v32) {
      goto LABEL_141;
    }
    goto LABEL_84;
  }
  if (v23 != 0x8000 || !IsExtensionEnabled) {
    goto LABEL_141;
  }
  unint64_t v40 = v31 | v30 | v29 | 0x60000000;
LABEL_85:
  *a6 = v40;
LABEL_86:
  int v42 = a5 & 0x1FE0;
  uint64_t v43 = glpCompilerGetNameTable(a1);
  int v44 = glpNameTableGetLanguage(v43);
  switch(a2)
  {
    case 0u:
    case 2u:
    case 3u:
    case 7u:
    case 8u:
    case 0xBu:
    case 0xCu:
      if ((a5 & 0x1FE0) == 0) {
        goto LABEL_170;
      }
      uint64_t v45 = (void *)glpCompilerGetAllocator(a1);
      uint64_t v46 = glpMakeStringBuffer(v45);
      qualifierMaskToStringBuffer(v46, a5 & 0x1FE0);
      InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
      glpASTNodeGetLocation(a3, &v93);
      Cuint64_t String = glpStringBufferGetCString(v46);
      qualifierContextToString(a2);
      uint64_t v20 = "Auxiliary storage qualifiers '%s' not allowed in %s context";
      goto LABEL_89;
    case 1u:
      if ((glpCompilerGetOptions(a1) & 1) == 0) {
        goto LABEL_91;
      }
      uint64_t v66 = *a6;
      if (a3)
      {
        if (glpIsVariableDeclarationNode(a3)
          && glpVariableDeclarationNodeGetInitializer(a3)
          && (v66 & 0x160000000) == 0)
        {
          uint64_t v66 = *a6;
LABEL_168:
          uint64_t v55 = v66 | 0x60;
          goto LABEL_169;
        }
      }
      else if ((v66 & 0x160000000) == 0)
      {
        goto LABEL_168;
      }
LABEL_91:
      unint64_t v48 = *a6;
      uint64_t v49 = ((unint64_t)*a6 >> 29) & 1;
      if (v44) {
        BOOL v50 = 0;
      }
      else {
        BOOL v50 = (*a6 & 0x20000000) != 0;
      }
      char v51 = (v48 & 0x60000000) == 0 || v50;
      uint64_t v52 = (v48 >> 30) & 1;
      BOOL v53 = v44 == 4 && (*a6 & 0x40000000) != 0;
      char v54 = v51 | v53;
      if ((a5 & 0x1FE0u) > 0xFF)
      {
        if ((a5 & 0x1FE0u) > 0x3FF)
        {
          if (v42 == 1024)
          {
            if ((v48 & 0x100000000) == 0) {
              goto LABEL_162;
            }
            uint64_t v55 = v48 | 0x200000000;
            goto LABEL_169;
          }
          if (v42 == 2048 && (v48 & 0x160000000) == 0)
          {
LABEL_158:
            uint64_t v55 = v48 | 0x100;
            goto LABEL_169;
          }
        }
        else
        {
          if (v42 == 256)
          {
            if (v54) {
              goto LABEL_162;
            }
            uint64_t v55 = v48 | 0x40000000000;
            goto LABEL_169;
          }
          if (v42 == 512 && (v48 & 0x100000000) != 0)
          {
            uint64_t v55 = v48 | 0xC00000000;
            goto LABEL_169;
          }
        }
      }
      else if ((a5 & 0x1FE0u) > 0x3F)
      {
        if (v42 == 64)
        {
          if (v54) {
            goto LABEL_162;
          }
          uint64_t v55 = v48 | 0x4000000000;
          goto LABEL_169;
        }
        if (v42 == 128 && a2 == 1)
        {
          if (v44 != 1) {
            LOBYTE(v52) = 0;
          }
          if (v44 != 2) {
            LODWORD(v49) = 0;
          }
          if ((v52 & 1) != 0 || v49)
          {
            uint64_t v55 = v48 | 0x20000000000;
            goto LABEL_169;
          }
        }
      }
      else
      {
        if ((a5 & 0x1FE0) == 0) {
          goto LABEL_170;
        }
        if (v42 == 32 && (v48 & 0x160000000) == 0)
        {
LABEL_122:
          uint64_t v55 = v48 | 0x60;
          goto LABEL_169;
        }
      }
LABEL_162:
      __n128 v67 = (void *)glpCompilerGetAllocator(a1);
      __n128 v68 = glpMakeStringBuffer(v67);
      qualifierMaskToStringBuffer(v68, a5 & 0x1FE0);
      InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
      glpASTNodeGetLocation(a3, &v92);
      Cuint64_t String = glpStringBufferGetCString(v68);
      qualifierContextToString(a2);
      uint64_t v20 = "Invalid auxiliary storage qualifiers '%s' in %s context";
      goto LABEL_163;
    case 4u:
      if ((a5 & 0x1FE0) == 0) {
        goto LABEL_170;
      }
      if (v42 != 1024) {
        goto LABEL_162;
      }
      uint64_t v55 = *a6 | 0x180000;
      goto LABEL_169;
    case 5u:
      unint64_t v48 = *a6;
      uint64_t v56 = *a6 & 0x6000000;
      if ((a5 & 0x1FE0u) <= 0x7FF)
      {
        if ((a5 & 0x1FE0) == 0) {
          goto LABEL_170;
        }
        if (v42 != 32) {
          goto LABEL_162;
        }
        goto LABEL_149;
      }
      if (v42 != 4096)
      {
        if (v42 != 2048) {
          goto LABEL_162;
        }
LABEL_149:
        if (v56 != 0x2000000) {
          goto LABEL_162;
        }
        goto LABEL_158;
      }
      if (v56 != 0x2000000) {
        goto LABEL_162;
      }
      uint64_t v55 = v48 | 0x200;
LABEL_169:
      *a6 = v55;
LABEL_170:
      uint64_t result = parseInterpolationQualifiers(a1, a2, a3, a5, a6);
      if (result)
      {
        uint64_t result = parseInterpolationQualifiers(a1, a2, a3, a5, a6);
        if (result)
        {
          uint64_t v70 = glpCompilerGetNameTable(a1);
          unsigned int v71 = glpNameTableGetGLSLVersion(v70);
          int v72 = glpNameTableGetLanguage(v70);
          if (a2 <= 0xC)
          {
            if (((1 << a2) & 0x1FD) != 0)
            {
              if ((a5 & 2) != 0)
              {
                long long v73 = (void *)glpCompilerGetAllocator(a1);
                uint64_t v74 = glpMakeStringBuffer(v73);
                uint64_t v75 = v74;
                int v76 = a5 & 2;
LABEL_203:
                qualifierMaskToStringBuffer(v74, v76);
                InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
                glpASTNodeGetLocation(a3, &v93);
                Cuint64_t String = glpStringBufferGetCString(v75);
                qualifierContextToString(a2);
                uint64_t v20 = "Qualifiers '%s' not allowed in %s context";
                goto LABEL_89;
              }
LABEL_197:
              int v88 = a5 & 1;
              if (((1 << a2) & 0x1E72) != 0)
              {
                if (v88) {
                  *a6 |= 0x80000000000uLL;
                }
              }
              else if (v88)
              {
                __n128 v89 = (void *)glpCompilerGetAllocator(a1);
                uint64_t v74 = glpMakeStringBuffer(v89);
                uint64_t v75 = v74;
                int v76 = v88;
                goto LABEL_203;
              }
              return 1;
            }
            unint64_t v77 = *a6;
            BOOL v78 = v71 > 9 || v71 == 6;
            uint64_t v79 = 0x8000000000;
            if (v78) {
              uint64_t v79 = 0x10000000000;
            }
            if ((v77 & 0x10000000) != 0)
            {
              if ((a5 & 2) == 0) {
                goto LABEL_197;
              }
            }
            else
            {
              if ((a5 & 2) == 0) {
                goto LABEL_197;
              }
              BOOL v80 = (*a6 & 0x20000000) == 0;
              unsigned int v81 = (v72 == 0) & ((v77 & 0x20000000) >> 29);
              if ((v77 & 0x60000000) == 0) {
                LOBYTE(v81) = 1;
              }
              uint64_t v82 = (v77 >> 30) & 1;
              if (v72 != 4) {
                LODWORD(v82) = 0;
              }
              char v83 = v81 | v82;
              if (v71 != 6) {
                BOOL v80 = 1;
              }
              char v84 = v80 & ~v83;
              if (v71 == 2) {
                int v85 = 0;
              }
              else {
                int v85 = v82;
              }
              if ((v84 & 1) == 0 && !v85) {
                goto LABEL_194;
              }
            }
            *a6 = v77 | v79;
            goto LABEL_197;
          }
LABEL_194:
          uint64_t v86 = (void *)glpCompilerGetAllocator(a1);
          __n128 v87 = glpMakeStringBuffer(v86);
          qualifierMaskToStringBuffer(v87, a5 & 2);
          InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
          glpASTNodeGetLocation(a3, &v92);
          Cuint64_t String = glpStringBufferGetCString(v87);
          qualifierContextToString(a2);
          uint64_t v20 = "Invalid qualifiers '%s' in %s context";
          goto LABEL_163;
        }
      }
      return result;
    case 6u:
      if ((a5 & 0x1FE0) == 0) {
        goto LABEL_170;
      }
      if (v42 == 2048)
      {
        unint64_t v48 = *a6;
        goto LABEL_158;
      }
      if (v42 != 32) {
        goto LABEL_162;
      }
      unint64_t v48 = *a6;
      goto LABEL_122;
    case 9u:
    case 0xAu:
      goto LABEL_91;
    default:
      goto LABEL_162;
  }
}

uint64_t parseLayout(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, void **a5)
{
  __n128 v36 = 0uLL;
  uint64_t v37 = 0;
  glpASTNodeGetLocation(a3, &v36);
  int LayoutPairCount = glpLayoutQualifierNodeGetLayoutPairCount(a3);
  if (!LayoutPairCount) {
    return 1;
  }
  int v10 = LayoutPairCount;
  unsigned int v11 = 0;
  while (1)
  {
    uint64_t LayoutPair = glpLayoutQualifierNodeGetLayoutPair(a3, v11);
    Identifier = (const void *)glpLayoutPairNodeGetIdentifier(LayoutPair);
    unsigned int v15 = v14;
    int v35 = 0;
    uint64_t Allocator = glpCompilerGetAllocator(a1);
    uint64_t v17 = glpLowerCaseCopyOfString(Allocator, Identifier, v15);
    if (!glpLayoutQualifierFromString(v17, v18, &v35)) {
      break;
    }
    Valueint Kind = glpLayoutPairNodeGetValueKind(LayoutPair);
    if (ValueKind)
    {
      if (ValueKind != 1) {
        abort();
      }
      uint64_t v20 = glpCompilerGetAllocator(a1);
      uint64_t v21 = *a5;
      int v22 = v35;
      int Value = glpLayoutPairNodeGetValue(LayoutPair);
      __n128 v33 = v36;
      uint64_t v34 = v37;
      if (!glpLayoutObjectAppendInteger(v20, a1, (uint64_t)&v33, a2, a4, v21, v22, Value)) {
        return 0;
      }
    }
    else
    {
      uint64_t v24 = glpCompilerGetAllocator(a1);
      uint64_t v25 = *a5;
      __n128 v33 = v36;
      uint64_t v34 = v37;
      if (!glpLayoutObjectAppend(v24, a1, (uint64_t)&v33, a2, a4, v25, v35)) {
        return 0;
      }
    }
    if (v10 == ++v11) {
      return 1;
    }
  }
  InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
  __n128 v33 = v36;
  uint64_t v34 = v37;
  glpLogMessage(InfoLog, 0, (uint64_t)&v33, "Unknown identifier '%.*s' in layout", v28, v29, v30, v31, v15);
  return 0;
}

uint64_t parseInterpolationQualifiers(uint64_t a1, unsigned int a2, uint64_t a3, char a4, uint64_t *a5)
{
  unsigned int v9 = a4 & 0x1C;
  uint64_t NameTable = glpCompilerGetNameTable(a1);
  int Language = glpNameTableGetLanguage(NameTable);
  if (a2 > 0xC)
  {
LABEL_27:
    uint64_t Allocator = (void *)glpCompilerGetAllocator(a1);
    StringBuffer = glpMakeStringBuffer(Allocator);
    qualifierMaskToStringBuffer(StringBuffer, v9);
    InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
    glpASTNodeGetLocation(a3, &v34);
    Cuint64_t String = glpStringBufferGetCString(StringBuffer);
    qualifierContextToString(a2);
    glpLogMessage(InfoLog, 0, (uint64_t)&v34, "Invalid interpolation qualifiers '%s' in %s context", v30, v31, v32, v33, CString);
    return 0;
  }
  if (((1 << a2) & 0x19FD) != 0)
  {
    if (!v9) {
      return 1;
    }
    uint64_t v12 = (void *)glpCompilerGetAllocator(a1);
    uint64_t v13 = glpMakeStringBuffer(v12);
    qualifierMaskToStringBuffer(v13, v9);
    unsigned int v14 = (uint64_t **)glpCompilerGetInfoLog(a1);
    glpASTNodeGetLocation(a3, &v35);
    char v15 = glpStringBufferGetCString(v13);
    qualifierContextToString(a2);
    glpLogMessage(v14, 0, (uint64_t)&v35, "Interpolation qualifiers '%s' not allowed in %s context", v16, v17, v18, v19, v15);
    return 0;
  }
  uint64_t v21 = *a5;
  BOOL v23 = (*a5 & 0x20000000) == 0 || Language != 0;
  if ((v21 & 0x40000000) != 0 && Language == 4) {
    BOOL v23 = 0;
  }
  if ((v21 & 0x60000000) == 0) {
    BOOL v23 = 0;
  }
  uint64_t result = 1;
  switch(v9 >> 2)
  {
    case 0u:
      return result;
    case 1u:
      if (!v23) {
        goto LABEL_27;
      }
      return result;
    case 2u:
      if (!v23) {
        goto LABEL_27;
      }
      uint64_t v25 = v21 | 0x1000000000;
      goto LABEL_26;
    case 4u:
      if (!v23) {
        goto LABEL_27;
      }
      uint64_t v25 = v21 | 0x2000000000;
LABEL_26:
      *a5 = v25;
      break;
    default:
      goto LABEL_27;
  }
  return result;
}

uint64_t *qualifierMaskToStringBuffer(uint64_t *result, int a2)
{
  uint64_t v3 = result;
  if ((a2 & 1) == 0)
  {
    if ((a2 & 2) == 0)
    {
      if ((a2 & 4) == 0)
      {
        if ((a2 & 8) == 0)
        {
          if ((a2 & 0x10) == 0)
          {
            if ((a2 & 0x20) == 0)
            {
              if ((a2 & 0x40) == 0)
              {
                if ((a2 & 0x80) == 0)
                {
                  if ((a2 & 0x100) == 0)
                  {
                    if ((a2 & 0x200) == 0)
                    {
                      if ((a2 & 0x400) == 0)
                      {
                        if ((a2 & 0x800) == 0)
                        {
                          if ((a2 & 0x1000) == 0)
                          {
                            if ((a2 & 0x2000) == 0)
                            {
                              if ((a2 & 0x4000) == 0)
                              {
                                if ((a2 & 0x8000) == 0)
                                {
                                  if ((a2 & 0x10000) == 0)
                                  {
                                    if ((a2 & 0x20000) == 0)
                                    {
                                      if ((a2 & 0x40000) == 0)
                                      {
                                        if ((a2 & 0x80000) == 0)
                                        {
                                          if ((a2 & 0x100000) == 0)
                                          {
                                            if ((a2 & 0x200000) == 0)
                                            {
                                              if ((a2 & 0x400000) == 0)
                                              {
                                                if ((a2 & 0x800000) == 0)
                                                {
                                                  if ((a2 & 0x1000000) == 0) {
                                                    return result;
                                                  }
                                                  goto LABEL_99;
                                                }
                                                goto LABEL_97;
                                              }
LABEL_95:
                                              uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "lowp");
                                              if ((a2 & 0x800000) != 0) {
                                                goto LABEL_96;
                                              }
                                              goto LABEL_50;
                                            }
LABEL_93:
                                            uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "$argp");
                                            if ((a2 & 0x400000) != 0) {
                                              goto LABEL_94;
                                            }
                                            goto LABEL_49;
                                          }
LABEL_91:
                                          uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "$anyp");
                                          if ((a2 & 0x200000) != 0) {
                                            goto LABEL_92;
                                          }
                                          goto LABEL_48;
                                        }
LABEL_89:
                                        uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "$nop");
                                        if ((a2 & 0x100000) != 0) {
                                          goto LABEL_90;
                                        }
                                        goto LABEL_47;
                                      }
LABEL_87:
                                      uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "varying");
                                      if ((a2 & 0x80000) != 0) {
                                        goto LABEL_88;
                                      }
                                      goto LABEL_46;
                                    }
LABEL_85:
                                    uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "attribute");
                                    if ((a2 & 0x40000) != 0) {
                                      goto LABEL_86;
                                    }
                                    goto LABEL_45;
                                  }
LABEL_83:
                                  uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "uniform");
                                  if ((a2 & 0x20000) != 0) {
                                    goto LABEL_84;
                                  }
                                  goto LABEL_44;
                                }
LABEL_81:
                                uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "inout");
                                if ((a2 & 0x10000) != 0) {
                                  goto LABEL_82;
                                }
                                goto LABEL_43;
                              }
LABEL_79:
                              uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "out");
                              if ((a2 & 0x8000) != 0) {
                                goto LABEL_80;
                              }
                              goto LABEL_42;
                            }
LABEL_77:
                            uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "in");
                            if ((a2 & 0x4000) != 0) {
                              goto LABEL_78;
                            }
                            goto LABEL_41;
                          }
LABEL_75:
                          uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "$foldable");
                          if ((a2 & 0x2000) != 0) {
                            goto LABEL_76;
                          }
                          goto LABEL_40;
                        }
LABEL_73:
                        uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "$readonly");
                        if ((a2 & 0x1000) != 0) {
                          goto LABEL_74;
                        }
                        goto LABEL_39;
                      }
LABEL_71:
                      uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "subroutine");
                      if ((a2 & 0x800) != 0) {
                        goto LABEL_72;
                      }
                      goto LABEL_38;
                    }
LABEL_69:
                    uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "bindable");
                    if ((a2 & 0x400) != 0) {
                      goto LABEL_70;
                    }
                    goto LABEL_37;
                  }
LABEL_67:
                  uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "sample");
                  if ((a2 & 0x200) != 0) {
                    goto LABEL_68;
                  }
                  goto LABEL_36;
                }
LABEL_65:
                uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "patch");
                if ((a2 & 0x100) != 0) {
                  goto LABEL_66;
                }
                goto LABEL_35;
              }
LABEL_63:
              uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "centroid");
              if ((a2 & 0x80) != 0) {
                goto LABEL_64;
              }
              goto LABEL_34;
            }
LABEL_61:
            uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "const");
            if ((a2 & 0x40) != 0) {
              goto LABEL_62;
            }
            goto LABEL_33;
          }
LABEL_59:
          uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "noperspective");
          if ((a2 & 0x20) != 0) {
            goto LABEL_60;
          }
          goto LABEL_32;
        }
LABEL_57:
        uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "flat");
        if ((a2 & 0x10) != 0) {
          goto LABEL_58;
        }
        goto LABEL_31;
      }
LABEL_55:
      uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "smooth");
      if ((a2 & 8) != 0) {
        goto LABEL_56;
      }
      goto LABEL_30;
    }
LABEL_53:
    uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "invariant");
    if ((a2 & 4) != 0) {
      goto LABEL_54;
    }
    goto LABEL_29;
  }
  uint64_t result = (uint64_t *)glpStringBufferAppendCString(result, "precise");
  if ((a2 & 2) != 0)
  {
    glpStringBufferAppendCString(v3, " ");
    goto LABEL_53;
  }
  if ((a2 & 4) != 0)
  {
LABEL_54:
    glpStringBufferAppendCString(v3, " ");
    goto LABEL_55;
  }
LABEL_29:
  if ((a2 & 8) != 0)
  {
LABEL_56:
    glpStringBufferAppendCString(v3, " ");
    goto LABEL_57;
  }
LABEL_30:
  if ((a2 & 0x10) != 0)
  {
LABEL_58:
    glpStringBufferAppendCString(v3, " ");
    goto LABEL_59;
  }
LABEL_31:
  if ((a2 & 0x20) != 0)
  {
LABEL_60:
    glpStringBufferAppendCString(v3, " ");
    goto LABEL_61;
  }
LABEL_32:
  if ((a2 & 0x40) != 0)
  {
LABEL_62:
    glpStringBufferAppendCString(v3, " ");
    goto LABEL_63;
  }
LABEL_33:
  if ((a2 & 0x80) != 0)
  {
LABEL_64:
    glpStringBufferAppendCString(v3, " ");
    goto LABEL_65;
  }
LABEL_34:
  if ((a2 & 0x100) != 0)
  {
LABEL_66:
    glpStringBufferAppendCString(v3, " ");
    goto LABEL_67;
  }
LABEL_35:
  if ((a2 & 0x200) != 0)
  {
LABEL_68:
    glpStringBufferAppendCString(v3, " ");
    goto LABEL_69;
  }
LABEL_36:
  if ((a2 & 0x400) != 0)
  {
LABEL_70:
    glpStringBufferAppendCString(v3, " ");
    goto LABEL_71;
  }
LABEL_37:
  if ((a2 & 0x800) != 0)
  {
LABEL_72:
    glpStringBufferAppendCString(v3, " ");
    goto LABEL_73;
  }
LABEL_38:
  if ((a2 & 0x1000) != 0)
  {
LABEL_74:
    glpStringBufferAppendCString(v3, " ");
    goto LABEL_75;
  }
LABEL_39:
  if ((a2 & 0x2000) != 0)
  {
LABEL_76:
    glpStringBufferAppendCString(v3, " ");
    goto LABEL_77;
  }
LABEL_40:
  if ((a2 & 0x4000) != 0)
  {
LABEL_78:
    glpStringBufferAppendCString(v3, " ");
    goto LABEL_79;
  }
LABEL_41:
  if ((a2 & 0x8000) != 0)
  {
LABEL_80:
    glpStringBufferAppendCString(v3, " ");
    goto LABEL_81;
  }
LABEL_42:
  if ((a2 & 0x10000) != 0)
  {
LABEL_82:
    glpStringBufferAppendCString(v3, " ");
    goto LABEL_83;
  }
LABEL_43:
  if ((a2 & 0x20000) != 0)
  {
LABEL_84:
    glpStringBufferAppendCString(v3, " ");
    goto LABEL_85;
  }
LABEL_44:
  if ((a2 & 0x40000) != 0)
  {
LABEL_86:
    glpStringBufferAppendCString(v3, " ");
    goto LABEL_87;
  }
LABEL_45:
  if ((a2 & 0x80000) != 0)
  {
LABEL_88:
    glpStringBufferAppendCString(v3, " ");
    goto LABEL_89;
  }
LABEL_46:
  if ((a2 & 0x100000) != 0)
  {
LABEL_90:
    glpStringBufferAppendCString(v3, " ");
    goto LABEL_91;
  }
LABEL_47:
  if ((a2 & 0x200000) != 0)
  {
LABEL_92:
    glpStringBufferAppendCString(v3, " ");
    goto LABEL_93;
  }
LABEL_48:
  if ((a2 & 0x400000) != 0)
  {
LABEL_94:
    glpStringBufferAppendCString(v3, " ");
    goto LABEL_95;
  }
LABEL_49:
  if ((a2 & 0x800000) != 0)
  {
LABEL_96:
    glpStringBufferAppendCString(v3, " ");
LABEL_97:
    uint64_t result = (uint64_t *)glpStringBufferAppendCString(v3, "mediump");
    if ((a2 & 0x1000000) == 0) {
      return result;
    }
    goto LABEL_98;
  }
LABEL_50:
  if ((a2 & 0x1000000) == 0) {
    return result;
  }
LABEL_98:
  glpStringBufferAppendCString(v3, " ");
LABEL_99:

  return (uint64_t *)glpStringBufferAppendCString(v3, "highp");
}

char *qualifierContextToString(int a1)
{
  if ((a1 - 1) >= 0xC) {
    abort();
  }
  return off_264D99F68[a1 - 1];
}

uint64_t glpSAFailed()
{
  return -1;
}

uint64_t glpMakeLValueForVariableObject(uint64_t a1, __n128 *a2, uint64_t *a3)
{
  uint64_t Allocator = glpCompilerGetAllocator(a1);
  __n128 v10 = *a2;
  unint64_t v11 = a2[1].n128_u64[0];
  uint64_t LValueNode = glpMakeLValueNode(Allocator, &v10, a3[2], a3[3], (uint64_t)a3);
  glpASTNodeSetSaType(LValueNode, *a3);
  glpASTNodeSetSaFlags(LValueNode, a3[6] & 0x80000037FLL);
  if (a3[11])
  {
    uint64_t v8 = glpCompilerGetAllocator(a1);
    glpAddOffsetIfNeeded(v8, LValueNode);
    __n128 v10 = *a2;
    unint64_t v11 = a2[1].n128_u64[0];
    glpEnsureOffsetsExist(a1, &v10, LValueNode);
  }
  return LValueNode;
}

uint64_t glpAddOffsetIfNeeded(uint64_t a1, uint64_t a2)
{
  uint64_t result = glpDerefNodeGetOffset(a2);
  if (!result)
  {
    glpASTNodeGetLocation(a2, &v7);
    uint64_t OffsetNode = glpMakeOffsetNode(a1, (long long *)&v7);
    glpMakeOffsetObject(a1);
    glpOffsetNodeSetExtra(OffsetNode, v6);
    return glpDerefNodeSetOffset(a2, OffsetNode);
  }
  return result;
}

uint64_t glpEnsureOffsetsExist(uint64_t a1, __n128 *a2, uint64_t a3)
{
  uint64_t SaType = (unsigned int *)glpASTNodeGetSaType(a3);
  uint64_t result = glpTypeGetKind(SaType);
  if (result != 3)
  {
    uint64_t Offset = glpDerefNodeGetOffset(a3);
    uint64_t result = glpOffsetNodeGetOffsetExpr(Offset);
    if (!result)
    {
      uint64_t PrimitiveType = glpGetPrimitiveType(5u);
      uint64_t IntConstant = glpCompilerGetIntConstant(a1, 0);
      __n128 v12 = *a2;
      unint64_t v13 = a2[1].n128_u64[0];
      uint64_t ConstantValueFragment = glpMakeConstantValueFragment(a1, &v12, (uint64_t)PrimitiveType, IntConstant);
      return glpOffsetNodeSetOffsetExpr(Offset, ConstantValueFragment);
    }
  }
  return result;
}

uint64_t glpCheckIBDeref(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if ((unint64_t)(a2 + 1) >= 2)
  {
    uint64_t ImmediateSAContext = glpCompilerGetImmediateSAContext(a1);
    if (glpIsIBPartialDerefNode(v2))
    {
      uint64_t Ib = glpIBPartialDerefNodeGetIb(v2);
      int Kind = glpTypeGetKind(*(unsigned int **)(Ib + 64));
      if (Kind == 1) {
        goto LABEL_20;
      }
      if (Kind != 3) {
        return v2;
      }
      if (glpIBPartialDerefNodeGetBankIndex(v2))
      {
LABEL_20:
        if (glpIsFieldAccessNode(ImmediateSAContext)) {
          return v2;
        }
        InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
        glpASTNodeGetLocation(v2, &v29);
        glpLogMessage(InfoLog, 0, (uint64_t)&v29, "You must access a specific variable of the interface block '%.*s'", v9, v10, v11, v12, *(_DWORD *)(Ib + 24));
      }
      else
      {
        if (glpIsArrayAccessNode(ImmediateSAContext)) {
          return v2;
        }
        uint64_t v20 = (uint64_t **)glpCompilerGetInfoLog(a1);
        glpASTNodeGetLocation(v2, &v28);
        glpLogMessage(v20, 0, (uint64_t)&v28, "You must access an element of the interface block '%.*s'", v21, v22, v23, v24, *(_DWORD *)(Ib + 24));
      }
      return -1;
    }
    if (glpIsLValueNode(v2)
      && *(void *)(glpLValueNodeGetVariableExtra(v2) + 88)
      && *(_DWORD *)(*(void *)(glpLValueNodeGetVariableExtra(v2) + 88) + 8)
      && !glpIsFieldAccessNode(ImmediateSAContext)
      && !glpIsArrayAccessNode(ImmediateSAContext))
    {
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t SaType = glpASTNodeGetSaType(v2);
      uint64_t SaFlags = glpASTNodeGetSaFlags(v2);
      glpMakeTemporary(a1, SaType, SaFlags & 0x80000037FLL, v2, &v27, &v26);
      uint64_t Allocator = glpCompilerGetAllocator(a1);
      glpASTNodeGetLocation(v2, &v25);
      glpMakeCommaExprNode(Allocator, &v25, 0);
      uint64_t v17 = v16;
      uint64_t v18 = (void *)glpCompilerGetAllocator(a1);
      glpCommaExprNodeAddExpr(v18, v17, v27);
      uint64_t v19 = (void *)glpCompilerGetAllocator(a1);
      glpCommaExprNodeAddExpr(v19, v17, v26);
      return glpSANode(a1, v17);
    }
  }
  return v2;
}

uint64_t glpSAFieldAccessInternal(uint64_t a1, uint64_t a2)
{
  uint64_t Structure = glpFieldAccessNodeGetStructure(a2);
  uint64_t SaType = (unsigned int *)glpASTNodeGetSaType(Structure);
  Field = (const char *)glpFieldAccessNodeGetField(a2);
  uint64_t v8 = v7;
  v114[0] = Field;
  v114[1] = v7;
  if (!glpIsIBPartialDerefNode(Structure))
  {
LABEL_10:
    int Kind = glpTypeGetKind(SaType);
    if (Kind == 1)
    {
      unsigned int FieldIndex = glpStructTypeGetFieldIndex((uint64_t)SaType, Field, v8);
      if (FieldIndex != -1)
      {
        unsigned int v41 = FieldIndex;
        uint64_t v102 = 0;
        uint64_t v42 = glpEnsureDeref(a1, Structure, &v102);
        glpASTNodeGetLocation(v42, &v100);
        glpEnsureOffsetsExist(a1, &v100, v42);
        uint64_t SaFlags = glpASTNodeGetSaFlags(v42);
        uint64_t Offset = glpDerefNodeGetOffset(v42);
        Offsetuint64_t Expr = glpOffsetNodeGetOffsetExpr(Offset);
        if (glpIsLValueNode(v42)
          && *(void *)(glpLValueNodeGetVariableExtra(v42) + 8)
          && (uint64_t v46 = glpLValueNodeGetVariableExtra(v42), glpLayoutObjectFind(*(uint64_t **)(v46 + 8), 28)))
        {
          Variableunint64_t Extra = (unsigned int **)glpLValueNodeGetVariableExtra(v42);
          if (glpTypeGetKind(*VariableExtra) == 2)
          {
            glpASTNodeGetLocation(a2, &v99);
            glpASTNodeGetLocation(a2, &v98);
            uint64_t PrimitiveType = glpGetPrimitiveType(5u);
            uint64_t v49 = glpABIGetStructTypeRangeOfField(0, (uint64_t)SaType, SaFlags, v41);
            uint64_t IntConstant = glpCompilerGetIntConstant(a1, v49);
            uint64_t ConstantValueFragment = glpMakeConstantValueFragment(a1, &v98, (uint64_t)PrimitiveType, IntConstant);
            uint64_t v52 = glpABIGetArrayStrideForElementType(0, (uint64_t)SaType, SaFlags);
            uint64_t v53 = glpCompilerGetIntConstant(a1, v52);
            uint64_t ArrayIndexOffsetFragment = glpMakeArrayIndexOffsetFragment(a1, &v99, ConstantValueFragment, OffsetExpr, v53);
          }
          else
          {
            glpASTNodeGetLocation(a2, &v97);
            uint64_t v86 = glpABIGetStructTypeRangeOfField(0, (uint64_t)SaType, SaFlags, v41);
            uint64_t v87 = glpCompilerGetIntConstant(a1, v86);
            uint64_t ArrayIndexOffsetFragment = glpMakeFieldOffsetFragment(a1, &v97, OffsetExpr, v87);
          }
          uint64_t v88 = ArrayIndexOffsetFragment;
          uint64_t v89 = glpDerefNodeGetOffset(v42);
          glpOffsetNodeSetOffsetExpr(v89, v88);
          uint64_t Allocator = glpCompilerGetAllocator(a1);
          uint64_t v91 = v102;
          uint64_t ElementType = glpAggregateTypeGetElementType((uint64_t)SaType, v41);
          uint64_t v77 = glpHandleGetterSetter(a1, v42, ElementType, OffsetExpr, 0, (uint64_t)"getter", 0x7663339F00000006, (uint64_t)v114);
          uint64_t v75 = (void *)Allocator;
          uint64_t v76 = v91;
        }
        else
        {
          if (glpIsLValueNode(v42) && *(void *)(glpLValueNodeGetVariableExtra(v42) + 88)) {
            unsigned int v67 = *(_DWORD *)(*(void *)(glpLValueNodeGetVariableExtra(v42) + 88) + 8);
          }
          else {
            unsigned int v67 = 0;
          }
          glpASTNodeGetLocation(a2, &v96);
          uint64_t v68 = glpABIGetStructTypeRangeOfField(v67, (uint64_t)SaType, SaFlags, v41);
          uint64_t v69 = glpCompilerGetIntConstant(a1, v68);
          uint64_t FieldOffsetFragment = glpMakeFieldOffsetFragment(a1, &v96, OffsetExpr, v69);
          uint64_t v71 = glpDerefNodeGetOffset(v42);
          glpOffsetNodeSetOffsetExpr(v71, FieldOffsetFragment);
          uint64_t v72 = glpAggregateTypeGetElementType((uint64_t)SaType, v41);
          glpASTNodeSetSaType(v42, v72);
          uint64_t v73 = glpASTNodeGetSaFlags(v42);
          __int16 ElementFlags = glpAggregateTypeGetElementFlags((uint64_t)SaType, v41);
          glpASTNodeSetSaFlags(v42, ElementFlags & 0x41F | (unint64_t)v73);
          uint64_t v75 = (void *)glpCompilerGetAllocator(a1);
          uint64_t v76 = v102;
          uint64_t v77 = v42;
        }
        return glpMangleSideEffectsWithNewResult(v75, v76, v77);
      }
      InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
      glpASTNodeGetLocation(a2, &v101);
      char v93 = v8;
      uint64_t v60 = "Structure has no field named %.*s";
      char v61 = &v101;
    }
    else
    {
      if (!Kind)
      {
        uint64_t v29 = glpPrimitiveTypeGetPrimitiveType((uint64_t)SaType);
        if (glpPrimitiveTypeGetCategory(v29) != 2)
        {
          uint64_t v62 = (uint64_t **)glpCompilerGetInfoLog(a1);
          glpASTNodeGetLocation(a2, &v105);
          char v94 = glpPrimitiveTypeToString(v29);
          glpLogMessage(v62, 0, (uint64_t)&v105, "Swizzle of non-vector primitive %s", v63, v64, v65, v66, v94);
          return -1;
        }
        unsigned int v104 = 0;
        glpASTNodeGetLocation(a2, &v103);
        unsigned int Length = glpPrimitiveVectorGetLength(v29);
        if (!glpValidateSwizzle(a1, (uint64_t)Field, v8, (long long *)&v103, Length, &v104))
        {
          glpASTNodeSetSaType(a2, 0);
          return -1;
        }
        uint64_t v102 = 0;
        uint64_t v31 = glpEnsureDeref(a1, Structure, &v102);
        uint64_t v32 = glpDerefNodeGetOffset(v31);
        if (!glpOffsetNodeGetSwizzle(v32))
        {
          uint64_t v33 = glpDerefNodeGetOffset(v31);
          glpOffsetNodeSetPreSwizzlePrimitiveType(v33, v29);
        }
        uint64_t v34 = glpDerefNodeGetOffset(v31);
        uint64_t v35 = glpDerefNodeGetOffset(v31);
        unsigned int Swizzle = glpOffsetNodeGetSwizzle(v35);
        if (Swizzle)
        {
          if (v104)
          {
            int v37 = v104 & 7;
            if ((v104 & 7) != 0)
            {
              int v38 = 0;
              int v39 = 2 * v37;
              do
              {
                int v37 = (((Swizzle >> (2 * ((v104 >> (v38 + 3)) & 3) + 3)) & 3) << (v38 + 3)) | v37 & ~(24 << v38);
                v38 += 2;
              }
              while (v39 != v38);
            }
          }
          else
          {
            int v37 = Swizzle;
          }
        }
        else
        {
          int v37 = v104;
        }
        glpOffsetNodeSetSwizzle(v34, v37);
        int v83 = glpPrimitiveVectorGetElementType(v29);
        unsigned int VectorType = glpGetVectorType(v83, v8);
        int v85 = glpGetPrimitiveType(VectorType);
        glpASTNodeSetSaType(v31, (uint64_t)v85);
        uint64_t v75 = (void *)glpCompilerGetAllocator(a1);
        uint64_t v76 = v102;
        uint64_t v77 = v31;
        return glpMangleSideEffectsWithNewResult(v75, v76, v77);
      }
      InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
      glpASTNodeGetLocation(a2, &v95);
      uint64_t v60 = "Field access or swizzle of non-struct non-vector";
      char v61 = &v95;
    }
    glpLogMessage(InfoLog, 0, (uint64_t)v61, v60, v56, v57, v58, v59, v93);
    return -1;
  }
  uint64_t Ib = glpIBPartialDerefNodeGetIb(Structure);
  if (glpTypeGetKind(SaType) != 1)
  {
    uint64_t v12 = (uint64_t **)glpCompilerGetInfoLog(a1);
    glpASTNodeGetLocation(a2, &v113);
    glpLogMessage(v12, 0, (uint64_t)&v113, "You must access an element of the interface block '%.*s'", v13, v14, v15, v16, *(_DWORD *)(Ib + 24));
    return -1;
  }
  unsigned int v10 = glpStructTypeGetFieldIndex((uint64_t)SaType, Field, v8);
  if (v10 == -1)
  {
    uint64_t v17 = (uint64_t **)glpCompilerGetInfoLog(a1);
    glpASTNodeGetLocation(a2, &v112);
    glpLogMessage(v17, 0, (uint64_t)&v112, "Interface block '%.*s' has no variable named '%.*s'", v18, v19, v20, v21, *(_DWORD *)(Ib + 24));
    return -1;
  }
  unsigned int v11 = v10;
  switch(glpInterfaceBlockObjectGetRepresentation(Ib))
  {
    case 0u:
      glpASTNodeGetLocation(Structure, &v111);
      uint64_t Structure = glpMakeLValueForVariableObject(a1, &v111, **(uint64_t ***)(Ib + 72));
      goto LABEL_10;
    case 1u:
      glpASTNodeGetLocation(Structure, &v110);
      uint64_t result = glpMakeLValueForVariableObject(a1, &v110, *(uint64_t **)(*(void *)(Ib + 72) + 8 * v11));
      break;
    case 2u:
      glpASTNodeGetLocation(Structure, &v109);
      LValueFordouble VariableObject = glpMakeLValueForVariableObject(a1, &v109, **(uint64_t ***)(Ib + 72));
      uint64_t v24 = glpCompilerGetAllocator(a1);
      glpASTNodeGetLocation(Structure, &v108);
      glpMakeArrayAccessNode(v24, &v108);
      uint64_t v26 = v25;
      glpArrayAccessNodeSetArray(v25, LValueForVariableObject);
      uint64_t BankIndex = glpIBPartialDerefNodeGetBankIndex(Structure);
      glpArrayAccessNodeSetElement(v26, BankIndex);
      uint64_t result = glpSANode(a1, v26);
      uint64_t Structure = result;
      if (result != -1) {
        goto LABEL_10;
      }
      break;
    case 3u:
      glpASTNodeGetLocation(Structure, &v107);
      uint64_t v78 = glpMakeLValueForVariableObject(a1, &v107, *(uint64_t **)(*(void *)(Ib + 72) + 8 * v11));
      uint64_t v79 = glpCompilerGetAllocator(a1);
      glpASTNodeGetLocation(Structure, &v106);
      glpMakeArrayAccessNode(v79, &v106);
      uint64_t v81 = v80;
      glpArrayAccessNodeSetArray(v80, v78);
      uint64_t v82 = glpIBPartialDerefNodeGetBankIndex(Structure);
      glpArrayAccessNodeSetElement(v81, v82);
      uint64_t result = glpSANode(a1, v81);
      break;
    default:
      goto LABEL_10;
  }
  return result;
}

uint64_t glpValidateSwizzle(uint64_t a1, uint64_t a2, unsigned int a3, long long *a4, unsigned int a5, _DWORD *a6)
{
  char v7 = a3;
  if (a3 < 5)
  {
    *a6 = a3;
    if (!a3) {
      return 1;
    }
    int v14 = 0;
    uint64_t v15 = 0;
    int v16 = 0;
    uint64_t v17 = a3;
    int v18 = a3;
    while (1)
    {
      int v19 = *(char *)(a2 + v15);
      signed int v20 = v19 - 97;
      if ((v19 - 97) >= 0x1A || (unsigned int v21 = 0x3CF8043u >> v20, ((0x3CF8043u >> v20) & 1) == 0))
      {
        InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
        long long v39 = *a4;
        uint64_t v40 = *((void *)a4 + 2);
        glpLogMessage(InfoLog, 0, (uint64_t)&v39, "Invalid character '%c' in swizzle", v25, v26, v27, v28, v19);
        return 0;
      }
      unsigned int v22 = dword_2393D2B98[v20];
      if (v15)
      {
        if (v20 >= 0x1A || (v21 & 1) == 0) {
          goto LABEL_22;
        }
        if (v16 != dword_2393D2C00[v20])
        {
          uint64_t v34 = (uint64_t **)glpCompilerGetInfoLog(a1);
          long long v39 = *a4;
          uint64_t v40 = *((void *)a4 + 2);
          glpLogMessage(v34, 0, (uint64_t)&v39, "Inconsistent component characters in swizzle '%.*s'", v35, v36, v37, v38, v7);
          return 0;
        }
      }
      else
      {
        if (v20 >= 0x1A || (v21 & 1) == 0) {
LABEL_22:
        }
          abort();
        int v16 = dword_2393D2C00[v20];
      }
      if (v22 >= a5) {
        break;
      }
      int v18 = v18 & ~(24 << v14) | (v22 << (v14 + 3));
      *a6 = v18;
      ++v15;
      v14 += 2;
      if (v17 == v15) {
        return 1;
      }
    }
    uint64_t v29 = (uint64_t **)glpCompilerGetInfoLog(a1);
    long long v39 = *a4;
    uint64_t v40 = *((void *)a4 + 2);
    glpLogMessage(v29, 0, (uint64_t)&v39, "Swizzle component '%c' indexes beyond end of input vector (length %u)", v30, v31, v32, v33, v19);
  }
  else
  {
    uint64_t v9 = (uint64_t **)glpCompilerGetInfoLog(a1);
    long long v39 = *a4;
    uint64_t v40 = *((void *)a4 + 2);
    glpLogMessage(v9, 0, (uint64_t)&v39, "Swizzle '%.*s' has more than 4 result components", v10, v11, v12, v13, v7);
  }
  return 0;
}

uint64_t glpEnsureDeref(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v13 = 0;
  if (glpIsDerefNode(a2))
  {
    uint64_t v13 = a2;
  }
  else
  {
    glpHandleSideEffectsForExpr(a1, a2, &v13, a3);
    if (glpIsConstantNode(v13))
    {
      uint64_t Allocator = glpCompilerGetAllocator(a1);
      glpASTNodeGetLocation(v13, &v12);
      uint64_t RValueNode = glpMakeRValueNode(Allocator, &v12);
      glpRValueNodeSetBase(RValueNode, v13);
      uint64_t SaType = glpASTNodeGetSaType(v13);
      glpASTNodeSetSaType(RValueNode, SaType);
      uint64_t SaFlags = glpASTNodeGetSaFlags(v13);
      glpASTNodeSetSaFlags(RValueNode, SaFlags);
      uint64_t v13 = RValueNode;
    }
  }
  uint64_t v10 = glpCompilerGetAllocator(a1);
  glpAddOffsetIfNeeded(v10, v13);
  return v13;
}

uint64_t glpHandleGetterSetter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  glpLValueNodeGetVariableName(a2);
  char v14 = v13;
  uint64_t Allocator = (void *)glpCompilerGetAllocator(a1);
  StringBuffer = glpMakeStringBuffer(Allocator);
  glpStringBufferAppendFormat(StringBuffer, "$%.*s_%.*s", v17, v18, v19, v20, v21, v22, v14);
  if (a8) {
    glpStringBufferAppendFormat(StringBuffer, "_%.*s", v23, v24, v25, v26, v27, v28, *(_DWORD *)(a8 + 8));
  }
  uint64_t v29 = glpCompilerGetAllocator(a1);
  glpASTNodeGetLocation(a2, &v46);
  uint64_t String = glpStringBufferGetString((uint64_t)StringBuffer);
  uint64_t v32 = glpMakeFunctionCallNode(v29, &v46, String, v31);
  uint64_t v33 = (void *)glpCompilerGetAllocator(a1);
  glpCallNodeAddArg(v33, v32, a4);
  if (a5)
  {
    uint64_t v34 = (void *)glpCompilerGetAllocator(a1);
    glpCallNodeAddArg(v34, v32, a5);
  }
  uint64_t v35 = glpCompilerGetAllocator(a1);
  glpASTNodeGetLocation(a2, &v45);
  glpMakeCommaExprNode(v35, &v45, 0);
  uint64_t v37 = v36;
  glpASTNodeSetSaType(a2, a3);
  uint64_t v38 = (void *)glpCompilerGetAllocator(a1);
  glpCommaExprNodeAddExpr(v38, v37, a2);
  uint64_t v39 = glpSANode(a1, v32);
  glpASTNodeSetSaType(v39, a3);
  char SaFlags = glpASTNodeGetSaFlags(v39);
  glpASTNodeSetSaFlags(v39, SaFlags & 0x1F | 0x100);
  unsigned int v41 = (void *)glpCompilerGetAllocator(a1);
  glpCommaExprNodeAddExpr(v41, v37, v39);
  glpASTNodeSetSaType(v37, a3);
  char v42 = glpASTNodeGetSaFlags(v39);
  glpASTNodeSetSaFlags(v37, v42 & 0x1F | 0x100);
  return v37;
}

uint64_t glpPrecisionQualifierFromSaFlags(char a1)
{
  uint64_t v1 = a1 & 0x1F;
  if (v1 == 8) {
    int v2 = 23;
  }
  else {
    int v2 = 19;
  }
  if (v1 == 16) {
    unsigned int v3 = 24;
  }
  else {
    unsigned int v3 = v2;
  }
  if (v1 == 4) {
    return 22;
  }
  else {
    return v3;
  }
}

uint64_t glpGetMostBasicPrimitiveType(unsigned int *a1)
{
  int Kind = glpTypeGetKind(a1);
  if (Kind)
  {
    if (Kind == 2)
    {
      uint64_t ElementType = (unsigned int *)glpArrayTypeGetElementType((uint64_t)a1);
      glpTypeGetKind(ElementType);
    }
    return 0;
  }
  uint64_t PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)a1);
  uint64_t v4 = PrimitiveType;
  if (!PrimitiveType || (glpPrimitiveTypeGetCategory(PrimitiveType) & 0xFFFFFFFE) != 2) {
    return v4;
  }

  return glpPrimitiveTypeGetScalarType(v4);
}

uint64_t glpGetDefaultPrecisionForType(uint64_t a1, unsigned int *a2)
{
  MostBasicuint64_t PrimitiveType = glpGetMostBasicPrimitiveType(a2);
  if (MostBasicPrimitiveType == 36) {
    unsigned int v4 = 5;
  }
  else {
    unsigned int v4 = MostBasicPrimitiveType;
  }
  if (!v4) {
    return 0;
  }
  uint64_t NameTable = glpCompilerGetNameTable(a1);

  return glpNameTableGetPrecision(NameTable, v4);
}

uint64_t glpSAValidateConstPrecisionConversion(uint64_t a1, uint64_t a2, char a3)
{
  Type = (unsigned int *)glpConstantNodeGetType(a2);
  uint64_t Value = glpConstantNodeGetValue(a2);
  uint64_t result = glpTypeGetKind(Type);
  if (!result)
  {
    uint64_t PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)Type);
    uint64_t result = glpPrimitiveTypeGetCategory(PrimitiveType);
    unsigned int Rows = result;
    if (result == 1)
    {
      unsigned int Columns = 1;
    }
    else
    {
      if (result == 3)
      {
        unsigned int Rows = glpPrimitiveMatrixGetRows(PrimitiveType);
        unsigned int Columns = glpPrimitiveMatrixGetColumns(PrimitiveType);
      }
      else
      {
        if (result != 2) {
          return result;
        }
        unsigned int Rows = glpPrimitiveVectorGetLength(PrimitiveType);
        unsigned int Columns = 1;
      }
      LODWORD(PrimitiveType) = glpPrimitiveTypeGetScalarType(PrimitiveType);
    }
    uint64_t NameTable = glpCompilerGetNameTable(a1);
    uint64_t GLSLVersion = glpNameTableGetGLSLVersion(NameTable);
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    uint64_t result = glpPopulatePrecisionWidths(GLSLVersion, &v57);
    unsigned int v51 = Rows;
    if (PrimitiveType == 36)
    {
      if ((a3 & 0x1F) == 4 && Columns)
      {
        uint64_t v25 = 0;
        unsigned int v26 = ~(-1 << SBYTE4(v58));
        uint64_t v27 = Columns;
        uint64_t v53 = Rows;
        do
        {
          if (Rows)
          {
            uint64_t v28 = v53;
            uint64_t v29 = (unsigned int *)Value;
            do
            {
              unsigned int v30 = *v29++;
              if (v30 > v26)
              {
                InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
                glpASTNodeGetLocation(a2, &v54);
                uint64_t result = (uint64_t)glpLogMessage(InfoLog, 1u, (uint64_t)&v54, "Overflow in implicit constant conversion, minimum range for lowp unsigned int is [0,%d]", v32, v33, v34, v35, v26);
              }
              --v28;
            }
            while (v28);
          }
          ++v25;
          Value += 16;
          unsigned int Rows = v51;
        }
        while (v25 != v27);
      }
    }
    else
    {
      uint64_t v52 = (int *)Value;
      if (PrimitiveType == 5)
      {
        if ((a3 & 0x1F) == 4 && Columns)
        {
          uint64_t v36 = 0;
          int v37 = 1 << (BYTE4(v58) - 1);
          uint64_t v49 = Rows;
          uint64_t v50 = Columns;
          do
          {
            if (Rows)
            {
              uint64_t v38 = v49;
              uint64_t v39 = v52;
              do
              {
                int v41 = *v39++;
                int v40 = v41;
                if (v41 >= v37 || v40 < -v37)
                {
                  uint64_t v43 = (uint64_t **)glpCompilerGetInfoLog(a1);
                  glpASTNodeGetLocation(a2, &v55);
                  uint64_t result = (uint64_t)glpLogMessage(v43, 1u, (uint64_t)&v55, "Overflow in implicit constant conversion, minimum range for lowp int is [%d,%d]", v44, v45, v46, v47, -(char)v37);
                }
                --v38;
              }
              while (v38);
            }
            ++v36;
            v52 += 4;
            unsigned int Rows = v51;
          }
          while (v36 != v50);
        }
      }
      else if (PrimitiveType == 1 && (a3 & 0x1F) == 4 && Columns)
      {
        uint64_t v14 = 0;
        uint64_t v15 = Columns;
        uint64_t v16 = Rows;
        do
        {
          if (Rows)
          {
            uint64_t v17 = v16;
            uint64_t v18 = (float *)v52;
            do
            {
              if (*v18 >= 2.0 || *v18 <= -2.0)
              {
                uint64_t v20 = (uint64_t **)glpCompilerGetInfoLog(a1);
                glpASTNodeGetLocation(a2, &v56);
                uint64_t result = (uint64_t)glpLogMessage(v20, 1u, (uint64_t)&v56, "Overflow in implicit constant conversion, minimum range for lowp float is (-2,2)", v21, v22, v23, v24, v48);
              }
              ++v18;
              --v17;
            }
            while (v17);
          }
          ++v14;
          v52 += 4;
          unsigned int Rows = v51;
        }
        while (v14 != v15);
      }
    }
  }
  return result;
}

uint64_t glpCheckArrayIndex(uint64_t a1, long long *a2, uint64_t a3, int a4, int a5, unsigned int a6, unsigned int *a7)
{
  uint64_t v11 = a3;
  uint64_t SaType = (unsigned int *)glpASTNodeGetSaType(a3);
  if (glpTypeGetKind(SaType)
    || glpPrimitiveTypeGetPrimitiveType((uint64_t)SaType) != 5
    && glpPrimitiveTypeGetPrimitiveType((uint64_t)SaType) != 36)
  {
    uint64_t Allocator = (void *)glpCompilerGetAllocator(a1);
    glpTypeHumanReadableDescription((uint64_t)SaType, (uint64_t)"<<BUG: unexpected function type>>", 0x92C8B9C800000021, Allocator);
    char v17 = v16;
    InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
    long long v54 = *a2;
    uint64_t v55 = *((void *)a2 + 2);
    char v53 = v17;
    uint64_t v23 = "Index expression has type '%.*s' but should have integral type";
LABEL_3:
    glpLogMessage(InfoLog, 0, (uint64_t)&v54, v23, v19, v20, v21, v22, v53);
    return -1;
  }
  if (glpCompilerDoesTypeRequirePrecision(a1, SaType) && (glpASTNodeGetSaFlags(v11) & 0x1F) == 0)
  {
    uint64_t DefaultPrecisionForType = glpGetDefaultPrecisionForType(a1, SaType);
    if (!DefaultPrecisionForType)
    {
      uint64_t v45 = (void *)glpCompilerGetAllocator(a1);
      glpTypeHumanReadableDescription((uint64_t)SaType, (uint64_t)"<<BUG: unexpected function type>>", 0x92C8B9C800000021, v45);
      char v47 = v46;
      char v48 = (uint64_t **)glpCompilerGetInfoLog(a1);
      long long v54 = *a2;
      uint64_t v55 = *((void *)a2 + 2);
      glpLogMessage(v48, 0, (uint64_t)&v54, "Array index of type '%.*s' - precision can not be inferred and no default precision available", v49, v50, v51, v52, v47);
      return -1;
    }
    glpPushdownPrecision(a1, v11, DefaultPrecisionForType);
  }
  if (glpPrimitiveTypeGetPrimitiveType((uint64_t)SaType) == 36)
  {
    uint64_t PrimitiveType = glpGetPrimitiveType(5u);
    char SaFlags = glpASTNodeGetSaFlags(v11);
    uint64_t v28 = glpConvert(a1, v11, (uint64_t)PrimitiveType, SaFlags & 0x1F);
    uint64_t v29 = glpSANode(a1, v28);
    if ((unint64_t)(v29 + 1) < 2) {
      return -1;
    }
    uint64_t v11 = v29;
  }
  BOOL IsConstantNode = glpIsConstantNode(v11);
  if (IsConstantNode)
  {
    uint64_t Value = (unsigned int *)glpConstantNodeGetValue(v11);
    Type = (unsigned int *)glpConstantNodeGetType(v11);
    if (!glpValueIsUsableAsSize(Type, Value))
    {
      InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
      long long v54 = *a2;
      uint64_t v55 = *((void *)a2 + 2);
      uint64_t v23 = "Index expression is negative";
      goto LABEL_3;
    }
    *a7 = glpValueGetAsSize((uint64_t)Type, Value);
  }
  uint64_t NameTable = glpCompilerGetNameTable(a1);
  int GLSLVersion = glpNameTableGetGLSLVersion(NameTable);
  char v35 = glpASTNodeGetSaFlags(v11);
  if (GLSLVersion == 1)
  {
    if ((v35 & 0x20) != 0) {
      goto LABEL_20;
    }
LABEL_25:
    if (!a4)
    {
      if (a5 || a6 != -1) {
        return v11;
      }
      InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
      long long v54 = *a2;
      uint64_t v55 = *((void *)a2 + 2);
      uint64_t v23 = "Indirect index into implicitly-sized array";
      goto LABEL_3;
    }
    goto LABEL_26;
  }
  if ((v35 & 0x40) == 0) {
    goto LABEL_25;
  }
LABEL_20:
  uint64_t v36 = glpCompilerGetAllocator(a1);
  uint64_t ValueHash = glpCompilerGetValueHash(a1);
  uint64_t v38 = glpConstantFold(v36, ValueHash, v11);
  if (!IsConstantNode)
  {
LABEL_26:
    InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
    long long v54 = *a2;
    uint64_t v55 = *((void *)a2 + 2);
    uint64_t v23 = "Index expression must be constant";
    goto LABEL_3;
  }
  uint64_t v11 = v38;
  if (a6 != -1 && *a7 >= a6)
  {
    uint64_t v39 = (uint64_t **)glpCompilerGetInfoLog(a1);
    unsigned int v40 = *a7;
    long long v54 = *a2;
    uint64_t v55 = *((void *)a2 + 2);
    glpLogMessage(v39, 0, (uint64_t)&v54, "Index %u beyond bounds (size %u)", v41, v42, v43, v44, v40);
    return -1;
  }
  return v11;
}

uint64_t glpConvert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Allocator = glpCompilerGetAllocator(a1);
  glpASTNodeGetLocation(a2, &v11);
  uint64_t TypeConversionNode = glpMakeTypeConversionNode(Allocator, &v11, a3, a4);
  glpUnaryOperatorNodeSetExpr(TypeConversionNode, a2);
  return glpSANode(a1, TypeConversionNode);
}

uint64_t glpIndirectVectorElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = 0;
  uint64_t Array = glpArrayAccessNodeGetArray(a2);
  uint64_t v7 = glpEnsureDeref(a1, Array, &v20);
  uint64_t Element = glpArrayAccessNodeGetElement(a2);
  unsigned int v19 = 0;
  glpASTNodeGetLocation(a2, &v18);
  unsigned int Length = glpPrimitiveVectorGetLength(a3);
  uint64_t result = glpCheckArrayIndex(a1, (long long *)&v18, Element, 0, 0, Length, &v19);
  if (result != -1)
  {
    uint64_t v11 = result;
    uint64_t Offset = glpDerefNodeGetOffset(v7);
    glpOffsetNodeSetVectorElementExpr(Offset, v11);
    uint64_t v13 = glpDerefNodeGetOffset(v7);
    if (!glpOffsetNodeGetPreSwizzlePrimitiveType(v13))
    {
      uint64_t v14 = glpDerefNodeGetOffset(v7);
      glpOffsetNodeSetPreSwizzlePrimitiveType(v14, a3);
    }
    unsigned int ElementType = glpPrimitiveVectorGetElementType(a3);
    uint64_t PrimitiveType = glpGetPrimitiveType(ElementType);
    glpASTNodeSetSaType(v7, (uint64_t)PrimitiveType);
    uint64_t Allocator = (void *)glpCompilerGetAllocator(a1);
    return glpMangleSideEffectsWithNewResult(Allocator, v20, v7);
  }
  return result;
}

uint64_t glpIndirectMatrixColumn(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int ColumnType = glpPrimitiveMatrixGetColumnType(a3);
  uint64_t PrimitiveType = (unsigned int *)glpGetPrimitiveType(ColumnType);

  return glpIndirectArrayElement(a1, a2, PrimitiveType);
}

uint64_t glpIndirectArrayElement(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  glpASTNodeGetLocation(a2, &v56);
  uint64_t Array = glpArrayAccessNodeGetArray(a2);
  uint64_t Element = glpArrayAccessNodeGetElement(a2);
  uint64_t v62 = 0;
  uint64_t v8 = glpEnsureDeref(a1, Array, &v62);
  glpASTNodeGetLocation(v8, &v61);
  glpEnsureOffsetsExist(a1, &v61, v8);
  uint64_t SaType = (unsigned int *)glpASTNodeGetSaType(v8);
  int Kind = glpTypeGetKind(SaType);
  if (Kind)
  {
    if (Kind == 3)
    {
      unsigned int ElementCount = glpBankTypeGetElementCount((uint64_t)SaType);
    }
    else
    {
      if (Kind != 2) {
        abort();
      }
      unsigned int ElementCount = glpArrayTypeGetElementCount((uint64_t)SaType);
    }
  }
  else
  {
    int PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)SaType);
    unsigned int ElementCount = glpPrimitiveMatrixGetColumns(PrimitiveType);
  }
  unsigned int v13 = ElementCount;
  int v15 = glpTypeGetKind(SaType) == 3
     && glpIsLValueNode(v8)
     && (uint64_t v14 = *(uint64_t **)(glpLValueNodeGetVariableExtra(v8) + 8)) != 0
     && glpLayoutObjectFind(v14, 84) != 0;
  unsigned int v60 = 0;
  __n128 v58 = v56;
  uint64_t v59 = v57;
  uint64_t result = glpCheckArrayIndex(a1, (long long *)&v58, Element, 0, v15, v13, &v60);
  if (result != -1)
  {
    uint64_t v17 = result;
    uint64_t NameTable = glpCompilerGetNameTable(a1);
    if (glpNameTableGetGLSLVersion(NameTable) == 6
      && (glpASTNodeGetSaFlags(v17) & 0x60) == 0
      && glpTypeGetSamplerCount((uint64_t)a3))
    {
      InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
      __n128 v58 = v56;
      uint64_t v59 = v57;
      glpLogMessage(InfoLog, 0, (uint64_t)&v58, "Dynamic indexing of sampler types is not allowed", v39, v40, v41, v42, v55);
      return -1;
    }
    if (glpIsLValueNode(v8)
      && glpIsConstantNode(v17)
      && glpTypeGetKind(SaType) == 2
      && !glpTypeIsSized((int *)SaType))
    {
      Variableunint64_t Extra = glpLValueNodeGetVariableExtra(v8);
      unsigned int IndexLevel = glpLValueNodeGetIndexLevel(v8);
      unsigned int v21 = v60 + 1;
      uint64_t v22 = (uint64_t **)glpCompilerGetInfoLog(a1);
      __n128 v58 = v56;
      uint64_t v59 = v57;
      if (!glpVariableObjectExtendImplicitArraySize(VariableExtra, IndexLevel, v21, v22, (uint64_t)&v58)) {
        return -1;
      }
    }
    if (glpIsLValueNode(v8)
      && *(void *)(glpLValueNodeGetVariableExtra(v8) + 8)
      && ((uint64_t v23 = glpLValueNodeGetVariableExtra(v8), glpLayoutObjectFind(*(uint64_t **)(v23 + 8), 28))
       || (uint64_t v24 = glpLValueNodeGetVariableExtra(v8), glpLayoutObjectFind(*(uint64_t **)(v24 + 8), 29))))
    {
      uint64_t ImmediateSAContext = glpCompilerGetImmediateSAContext(a1);
      if (!glpIsAssignNode(ImmediateSAContext)
        || (uint64_t Lhs = glpBinaryOperatorNodeGetLhs(ImmediateSAContext), !glpIsArrayAccessNode(Lhs))
        || (uint64_t v27 = glpBinaryOperatorNodeGetLhs(ImmediateSAContext), v28 = v17, glpArrayAccessNodeGetArray(v27) != v8))
      {
        uint64_t v28 = v17;
        if (glpTypeGetKind(SaType) == 2)
        {
          uint64_t v28 = v17;
          if (!glpTypeGetKind(a3))
          {
            uint64_t Allocator = glpCompilerGetAllocator(a1);
            uint64_t v30 = v62;
            uint64_t v31 = glpHandleGetterSetter(a1, v8, (uint64_t)a3, v17, 0, (uint64_t)"getter", 0x7663339F00000006, 0);
            uint64_t v32 = (void *)Allocator;
            uint64_t v33 = v30;
            return glpMangleSideEffectsWithNewResult(v32, v33, v31);
          }
        }
      }
    }
    else
    {
      if (glpTypeGetKind(SaType) == 3)
      {
        uint64_t Offset = glpDerefNodeGetOffset(v8);
        glpOffsetNodeSetBankIndex(Offset, v17);
        Offsetuint64_t Expr = glpOffsetNodeGetOffsetExpr(Offset);
      }
      else
      {
        if (glpIsLValueNode(v8))
        {
          uint64_t v36 = glpLValueNodeGetVariableExtra(v8);
          unsigned int ABI = glpVariableObjectGetABI(v36);
        }
        else
        {
          unsigned int ABI = 0;
        }
        uint64_t SaFlags = glpASTNodeGetSaFlags(v8);
        uint64_t v44 = glpABIGetArrayStrideForElementType(ABI, (uint64_t)a3, SaFlags);
        if ((SaFlags & 0x400) != 0 && !glpTypeGetKind(SaType))
        {
          uint64_t v45 = glpPrimitiveTypeGetPrimitiveType((uint64_t)SaType);
          uint64_t v46 = glpDerefNodeGetOffset(v8);
          int v47 = glpABIGetMatrixStride(ABI, v45, SaFlags);
          glpOffsetNodeSetCompStride(v46, v47);
          uint64_t v44 = 4;
        }
        glpASTNodeGetLocation(v8, &v58);
        uint64_t v48 = glpDerefNodeGetOffset(v8);
        uint64_t v49 = glpOffsetNodeGetOffsetExpr(v48);
        uint64_t IntConstant = glpCompilerGetIntConstant(a1, v44);
        Offsetuint64_t Expr = glpMakeArrayIndexOffsetFragment(a1, &v58, v49, v17, IntConstant);
      }
      uint64_t v28 = OffsetExpr;
    }
    uint64_t v51 = glpDerefNodeGetOffset(v8);
    glpOffsetNodeSetOffsetExpr(v51, v28);
    if (glpIsLValueNode(v8))
    {
      int v52 = glpLValueNodeGetIndexLevel(v8);
      glpLValueNodeSetIndexLevel(v8, v52 + 1);
    }
    glpASTNodeSetSaType(v8, (uint64_t)a3);
    uint64_t v53 = glpASTNodeGetSaFlags(v8);
    uint64_t v54 = glpASTNodeGetSaFlags(v17);
    glpASTNodeSetSaFlags(v8, (v54 | 0x51F) & v53);
    uint64_t v32 = (void *)glpCompilerGetAllocator(a1);
    uint64_t v33 = v62;
    uint64_t v31 = v8;
    return glpMangleSideEffectsWithNewResult(v32, v33, v31);
  }
  return result;
}

uint64_t glpAnalyzeCallToOverload(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v128 = *MEMORY[0x263EF8340];
  uint64_t Allocator = glpCompilerGetAllocator(a1);
  double v124 = (uint64_t *)(*(uint64_t (**)(void, uint64_t, const char *))(Allocator + 8))(*(void *)Allocator, 16, "Vector Storage (GLPType *)");
  uint64_t v122 = a1;
  unsigned int ImplicitConversionPolicy = glpCompilerGetImplicitConversionPolicy(a1);
  if (a2)
  {
    uint64_t v8 = 0;
    uint64_t v9 = &PROMOTIONS + 2 * ImplicitConversionPolicy;
    char v123 = (uint64_t *)*v9;
    unsigned int v10 = *((_DWORD *)v9 + 2);
    int v11 = 2;
    do
    {
      __n128 v12 = (uint64_t *)a2[1];
      if (_canCall(*a2, a3, (uint64_t)v123, v10))
      {
        uint64_t v13 = *a2;
        if ((int)v8 + 1 <= v11)
        {
          uint64_t v18 = v8;
          uint64_t v17 = v124;
        }
        else
        {
          if (v11 <= 1) {
            int v14 = 1;
          }
          else {
            int v14 = v11;
          }
          int v15 = 2 * v14;
          if (v15 <= (int)v8 + 1) {
            int v11 = v8 + 1;
          }
          else {
            int v11 = v15;
          }
          char v16 = (void *)glpCompilerGetAllocator(v122);
          uint64_t v17 = (uint64_t *)((uint64_t (*)(void, uint64_t, const char *))v16[1])(*v16, 8 * v11, "Vector Storage (GLPType *, growth)");
          uint64_t v18 = v8;
          memcpy(v17, v124, 8 * v8);
          ((void (*)(void, uint64_t *))v16[3])(*v16, v124);
        }
        double v124 = v17;
        v17[v18] = v13;
        uint64_t v8 = (v8 + 1);
      }
      a2 = v12;
    }
    while (v12);
    uint64_t v19 = glpCallNodeGetArgCount(a3);
    unsigned int v20 = v19;
    if (v8)
    {
      uint64_t v117 = v8;
      uint64_t v118 = v19;
      uint64_t v21 = 0;
      unint64_t v121 = v8;
      uint64_t v22 = v124;
      while (1)
      {
        uint64_t v23 = 0;
        uint64_t v24 = v22[v21];
        BOOL v25 = 1;
        uint64_t v119 = v21;
        while (1)
        {
          if (v21 != v23)
          {
            BOOL v120 = v25;
            uint64_t v26 = v22[v23];
            uint64_t v19 = glpCallNodeGetArgCount(a3);
            if (v19)
            {
              unsigned int v27 = 0;
              LODWORD(v123) = 0;
              int v28 = 0;
              while (1)
              {
                uint64_t v29 = glpCallNodeGetArg(a3, v27);
                uint64_t SaType = (unsigned int *)glpASTNodeGetSaType(v29);
                if (!glpTypeGetKind(SaType))
                {
                  uint64_t PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)SaType);
                  int ScalarType = glpPrimitiveTypeGetScalarType(PrimitiveType);
                  uint64_t ElementType = glpAggregateTypeGetElementType(v24, v27);
                  uint64_t v34 = glpPrimitiveTypeGetPrimitiveType(ElementType);
                  int v35 = glpPrimitiveTypeGetScalarType(v34);
                  uint64_t v36 = glpAggregateTypeGetElementType(v26, v27);
                  uint64_t v37 = glpPrimitiveTypeGetPrimitiveType(v36);
                  int v38 = glpPrimitiveTypeGetScalarType(v37);
                  int ElementFlags = glpAggregateTypeGetElementFlags(v24, v27);
                  if ((ElementFlags & 0x4000000) != 0) {
                    int v40 = ScalarType;
                  }
                  else {
                    int v40 = v35;
                  }
                  if ((ElementFlags & 0x4000000) == 0) {
                    int v35 = ScalarType;
                  }
                  int v41 = glpAggregateTypeGetElementFlags(v26, v27);
                  if ((v41 & 0x4000000) != 0) {
                    int v42 = ScalarType;
                  }
                  else {
                    int v42 = v38;
                  }
                  if ((v41 & 0x4000000) != 0) {
                    int v43 = v38;
                  }
                  else {
                    int v43 = ScalarType;
                  }
                  LOBYTE(v44) = v43 == v42;
                  if (v35 == v40 || v43 == v42)
                  {
                    if (v35 != v40) {
                      goto LABEL_58;
                    }
                  }
                  else
                  {
                    BOOL v46 = v35 == 1 && v40 == 62;
                    BOOL v44 = v43 == 1 && v42 == 62;
                    if (!v46 && !v44)
                    {
                      BOOL v48 = (v35 == 36 || v35 == 5) && v40 == 1;
                      if (v43 != 36 && v43 != 5)
                      {
                        BOOL v49 = 0;
                        goto LABEL_68;
                      }
                      if (v42 != 62) {
                        BOOL v48 = 0;
                      }
                      if (!v48)
                      {
                        BOOL v49 = v42 == 1;
LABEL_68:
                        if (v35 == 5 || v35 == 36)
                        {
                          if (v40 != 62) {
                            BOOL v49 = 0;
                          }
                          if (v49) {
                            int v28 = 1;
                          }
                        }
                        goto LABEL_22;
                      }
LABEL_65:
                      LODWORD(v123) = 1;
                      goto LABEL_22;
                    }
                    if (!v46)
                    {
LABEL_58:
                      int v28 = 1;
                      goto LABEL_22;
                    }
                  }
                  if (!v44) {
                    goto LABEL_65;
                  }
                }
LABEL_22:
                ++v27;
                uint64_t v19 = glpCallNodeGetArgCount(a3);
                if (v27 >= v19) {
                  goto LABEL_75;
                }
              }
            }
            int v28 = 0;
            LODWORD(v123) = 0;
LABEL_75:
            BOOL v50 = v123 || v28 == 0;
            uint64_t v22 = v124;
            uint64_t v21 = v119;
            if (!v50 || v28 || !v123) {
              break;
            }
          }
          BOOL v25 = ++v23 < v121;
          if (v23 == v121) {
            goto LABEL_87;
          }
        }
        if (!v120)
        {
LABEL_87:
          if (!v24) {
            goto LABEL_104;
          }
          _makeConversions(v122, v24, a3);
          uint64_t ReturnType = glpFunctionTypeGetReturnType(v24);
          glpASTNodeSetSaType(a3, ReturnType);
          uint64_t v52 = glpFunctionCallNodeGetName(a3);
          uint64_t v54 = v53;
          char v55 = (void *)glpCompilerGetAllocator(v122);
          __n128 v56 = (char *)glpAggregateTypeMangleName(v24, v52, v54, v55);
          uint64_t v58 = v57;
          uint64_t NameTable = glpCompilerGetNameTable(v122);
          v125[0] = MEMORY[0x263EF8330];
          v125[1] = 0x40000000;
          v125[2] = __glpAnalyzeCallToOverload_block_invoke;
          v125[3] = &__block_descriptor_tmp_7;
          v125[4] = a3;
          glpNameTableGet(NameTable, v56, v58, 0, (uint64_t)v125);
          return 1;
        }
        uint64_t v21 = v119 + 1;
        if (v119 + 1 == v121)
        {
LABEL_104:
          int v84 = v118;
          unint64_t v85 = v118;
          MEMORY[0x270FA5388](v19);
          uint64_t v88 = (uint64_t *)((char *)&v116 - v87);
          if (v86 >= 0x200) {
            size_t v89 = 512;
          }
          else {
            size_t v89 = v86;
          }
          bzero((char *)&v116 - v87, v89);
          if (v84)
          {
            for (uint64_t i = 0; i != v84; v88[i++] = glpASTNodeGetSaType(v91))
              uint64_t v91 = glpCallNodeGetArg(a3, i);
          }
          __n128 v92 = (const char *)glpFunctionCallNodeGetName(a3);
          uint64_t v94 = v93;
          uint64_t v95 = v122;
          if (!glpOperatorAsFunctionError(v122, v92, v93, v88, a3))
          {
            char v123 = &v116;
            __n128 v96 = (void *)glpCompilerGetAllocator(v95);
            StringBuffer = glpMakeStringBuffer(v96);
            if (v118)
            {
              uint64_t v98 = 0;
              do
              {
                uint64_t v99 = v88[v98];
                __n128 v100 = (void *)glpCompilerGetAllocator(v122);
                uint64_t v101 = glpTypeHumanReadableDescription(v99, (uint64_t)"<<BUG: unexpected function type>>", 0x92C8B9C800000021, v100);
                glpStringBufferAppendString(StringBuffer, v101, v102);
                if (++v98 < v85) {
                  glpStringBufferAppendCString(StringBuffer, ", ");
                }
              }
              while (v85 != v98);
            }
            __n128 v103 = (void *)glpCompilerGetAllocator(v122);
            unsigned int v104 = glpMakeStringBuffer(v103);
            uint64_t v105 = 0;
            if (v117 <= 1) {
              uint64_t v106 = 1;
            }
            else {
              uint64_t v106 = v117;
            }
            do
            {
              glpStringBufferAppendCString(v104, "    ");
              uint64_t v107 = v124[v105];
              __n128 v108 = (void *)glpCompilerGetAllocator(v122);
              uint64_t v109 = glpTypeHumanReadableDescription(v107, (uint64_t)v92, v94, v108);
              glpStringBufferAppendString(v104, v109, v110);
              if (++v105 < v121) {
                glpStringBufferAppendCString(v104, "\n");
              }
            }
            while (v106 != v105);
            InfoLog = (uint64_t **)glpCompilerGetInfoLog(v122);
            glpASTNodeGetLocation(a3, &v126);
            glpStringBufferGetCString(StringBuffer);
            glpStringBufferGetCString(v104);
            glpLogMessage(InfoLog, 0, (uint64_t)&v126, "Ambiguous call to function %.*s(%s).   Candidates are:\n%s", v112, v113, v114, v115, v94);
          }
          return 0;
        }
      }
    }
  }
  else
  {
    uint64_t v19 = glpCallNodeGetArgCount(a3);
    unsigned int v20 = v19;
  }
  unint64_t v61 = v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v64 = (uint64_t *)((char *)&v116 - v63);
  if (v62 >= 0x200) {
    size_t v65 = 512;
  }
  else {
    size_t v65 = v62;
  }
  bzero((char *)&v116 - v63, v65);
  if (v20)
  {
    for (uint64_t j = 0; j != v20; v64[j++] = glpASTNodeGetSaType(v67))
      uint64_t v67 = glpCallNodeGetArg(a3, j);
  }
  uint64_t v68 = (const char *)glpFunctionCallNodeGetName(a3);
  char v70 = v69;
  uint64_t v71 = v122;
  if (!glpOperatorAsFunctionError(v122, v68, v69, v64, a3))
  {
    double v124 = &v116;
    uint64_t v72 = (void *)glpCompilerGetAllocator(v71);
    uint64_t v73 = glpMakeStringBuffer(v72);
    if (v61)
    {
      uint64_t v74 = 0;
      do
      {
        uint64_t v75 = v64[v74];
        uint64_t v76 = (void *)glpCompilerGetAllocator(v122);
        uint64_t v77 = glpTypeHumanReadableDescription(v75, (uint64_t)"<<BUG: unexpected function type>>", 0x92C8B9C800000021, v76);
        glpStringBufferAppendString(v73, v77, v78);
        if (++v74 < v61) {
          glpStringBufferAppendCString(v73, ", ");
        }
      }
      while (v61 != v74);
    }
    uint64_t v79 = (uint64_t **)glpCompilerGetInfoLog(v122);
    glpASTNodeGetLocation(a3, &v127);
    glpStringBufferGetCString(v73);
    glpLogMessage(v79, 0, (uint64_t)&v127, "No matching function for call to %.*s(%s)", v80, v81, v82, v83, v70);
  }
  return 0;
}

uint64_t _canCall(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v8 = glpCallNodeGetArgCount(a2);
  if (v8 != glpAggregateTypeGetElementCount(a1)) {
    return 0;
  }
  if (v8)
  {
    unsigned int v9 = 0;
    unsigned int v10 = (_DWORD *)(a3 + 4);
    do
    {
      uint64_t v11 = glpCallNodeGetArg(a2, v9);
      uint64_t SaType = (unsigned int *)glpASTNodeGetSaType(v11);
      uint64_t ElementType = (unsigned int *)glpAggregateTypeGetElementType(a1, v9);
      int ElementFlags = glpAggregateTypeGetElementFlags(a1, v9);
      if (!glpTypesEqual(SaType, (uint64_t)ElementType))
      {
        if ((~ElementFlags & 0x6000000) == 0
          || glpTypeGetKind(SaType)
          || glpTypeGetKind(ElementType))
        {
          return 0;
        }
        uint64_t PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)SaType);
        uint64_t v16 = glpPrimitiveTypeGetPrimitiveType((uint64_t)ElementType);
        uint64_t result = _primitiveStructuresMatch(PrimitiveType, v16);
        if (!result) {
          return result;
        }
        int ScalarType = glpPrimitiveTypeGetScalarType(PrimitiveType);
        int v19 = glpPrimitiveTypeGetScalarType(v16);
        if ((ElementFlags & 0x4000000) != 0)
        {
          if (!a4) {
            return 0;
          }
          uint64_t v22 = a4;
          for (uint64_t i = v10; *(i - 1) != v19 || *i != ScalarType; i += 2)
          {
            if (!--v22) {
              return 0;
            }
          }
        }
        else
        {
          if (!a4) {
            return 0;
          }
          uint64_t v20 = a4;
          for (uint64_t j = v10; *(j - 1) != ScalarType || *j != v19; j += 2)
          {
            if (!--v20) {
              return 0;
            }
          }
        }
      }
      ++v9;
    }
    while (v9 != v8);
  }
  return 1;
}

uint64_t glpOperatorAsFunctionError(uint64_t a1, const char *a2, int a3, uint64_t *a4, uint64_t a5)
{
  if (a3 >= 4) {
    int v8 = 4;
  }
  else {
    int v8 = a3;
  }
  if (strncmp("$OP_", a2, v8)) {
    return 0;
  }
  int v10 = glpCallNodeGetArgCount(a5);
  uint64_t v11 = *a4;
  if (v10 == 2)
  {
    uint64_t v12 = a4[1];
    uint64_t Allocator = (void *)glpCompilerGetAllocator(a1);
    glpTypeHumanReadableDescription(v11, (uint64_t)"<<BUG: unexpected function type>>", 0x92C8B9C800000021, Allocator);
    int v14 = (void *)glpCompilerGetAllocator(a1);
    glpTypeHumanReadableDescription(v12, (uint64_t)"<<BUG: unexpected function type>>", 0x92C8B9C800000021, v14);
    char v31 = 0;
    *(_DWORD *)int __s2 = 0;
    __strncpy_chk();
    InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
    glpASTNodeGetLocation(a5, &v29);
    char v26 = glpBinaryOperatorStringToSymbol(__s2);
    glpLogMessage(InfoLog, 0, (uint64_t)&v29, "'%s' does not operate on '%.*s' and '%.*s'", v16, v17, v18, v19, v26);
  }
  else
  {
    uint64_t v20 = (void *)glpCompilerGetAllocator(a1);
    glpTypeHumanReadableDescription(v11, (uint64_t)"<<BUG: unexpected function type>>", 0x92C8B9C800000021, v20);
    char v31 = 0;
    *(_DWORD *)int __s2 = 0;
    __strncpy_chk();
    uint64_t v21 = (uint64_t **)glpCompilerGetInfoLog(a1);
    glpASTNodeGetLocation(a5, &v28);
    char v27 = glpUnaryOperatorStringToSymbol(__s2);
    glpLogMessage(v21, 0, (uint64_t)&v28, "'%s' does not operate on '%.*s'", v22, v23, v24, v25, v27);
  }
  return 1;
}

uint64_t _makeConversions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = glpCallNodeGetArgCount(a3);
  if (result)
  {
    int v6 = result;
    for (unsigned int i = 0; i != v6; ++i)
    {
      uint64_t v8 = glpCallNodeGetArg(a3, i);
      uint64_t SaType = (unsigned int *)glpASTNodeGetSaType(v8);
      uint64_t v10 = glpASTNodeGetSaFlags(v8) & 0x1F;
      uint64_t ElementType = glpAggregateTypeGetElementType(a2, i);
      int ElementFlags = glpAggregateTypeGetElementFlags(a2, i);
      uint64_t v13 = ElementFlags & 0x1F;
      uint64_t result = glpTypesEqual(SaType, ElementType);
      if (!result || v10 != v13)
      {
        if ((ElementFlags & 0x2000000) != 0) {
          uint64_t v8 = glpConvert(a1, v8, ElementType, v13);
        }
        if ((ElementFlags & 0x4000000) != 0) {
          uint64_t v8 = glpConvert(a1, v8, (uint64_t)SaType, v10);
        }
        uint64_t result = glpCallNodeSetArg(a3, i, v8);
      }
    }
  }
  return result;
}

uint64_t __glpAnalyzeCallToOverload_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t result = glpFunctionCallNodeSetExtra(*(void *)(a1 + 32), a3);
  *a5 = 1;
  return result;
}

uint64_t glpAnalyzeCallToFunction(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned int ImplicitConversionPolicy = glpCompilerGetImplicitConversionPolicy(a1);
  if (_canCall(*a2, a3, (uint64_t)*(&PROMOTIONS + 2 * ImplicitConversionPolicy), *((_DWORD *)&PROMOTIONS + 4 * ImplicitConversionPolicy + 2)))
  {
    _makeConversions(a1, *a2, a3);
    uint64_t ReturnType = glpFunctionTypeGetReturnType(*a2);
    glpASTNodeSetSaType(a3, ReturnType);
    glpFunctionCallNodeSetExtra(a3, (uint64_t)a2);
    return 1;
  }
  else
  {
    glpFunctionCallNodeGetName(a3);
    char v10 = v9;
    InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
    glpASTNodeGetLocation(a3, &v16);
    glpLogMessage(InfoLog, 0, (uint64_t)&v16, "Cannot call '%.*s'", v12, v13, v14, v15, v10);
    return 0;
  }
}

uint64_t glpAnalyzeCallToSubroutineArray(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned int ImplicitConversionPolicy = glpCompilerGetImplicitConversionPolicy(a1);
  if (_canCall(*a2, a3, (uint64_t)*(&PROMOTIONS + 2 * ImplicitConversionPolicy), *((_DWORD *)&PROMOTIONS + 4 * ImplicitConversionPolicy + 2)))
  {
    _makeConversions(a1, *a2, a3);
    uint64_t ReturnType = glpFunctionTypeGetReturnType(*a2);
    glpASTNodeSetSaType(a3, ReturnType);
    return 1;
  }
  else
  {
    glpSubroutineArrayCallNodeGetName(a3);
    char v10 = v9;
    InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
    glpASTNodeGetLocation(a3, &v16);
    glpLogMessage(InfoLog, 0, (uint64_t)&v16, "Cannot call subroutine array '%.*s'", v12, v13, v14, v15, v10);
    return 0;
  }
}

uint64_t glpCanConvert(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result = _primitiveStructuresMatch(a1, a2);
  if (result)
  {
    int ScalarType = glpPrimitiveTypeGetScalarType(a1);
    int v8 = glpPrimitiveTypeGetScalarType(a2);
    if (a3)
    {
      uint64_t v9 = *((unsigned int *)&PROMOTIONS + 4 * a3 + 2);
      for (unsigned int i = (_DWORD *)((char *)*(&PROMOTIONS + 2 * a3) + 4); *(i - 1) != ScalarType || *i != v8; i += 2)
      {
        if (!--v9) {
          return 0;
        }
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t _primitiveStructuresMatch(uint64_t a1, uint64_t a2)
{
  int Category = glpPrimitiveTypeGetCategory(a1);
  if (Category != glpPrimitiveTypeGetCategory(a2)) {
    return 0;
  }
  uint64_t result = 1;
  switch(Category)
  {
    case 0:
      return 0;
    case 1:
      return result;
    case 2:
      int Length = glpPrimitiveVectorGetLength(a1);
      int Rows = glpPrimitiveVectorGetLength(a2);
      goto LABEL_6;
    case 3:
      int Columns = glpPrimitiveMatrixGetColumns(a1);
      if (Columns != glpPrimitiveMatrixGetColumns(a2)) {
        return 0;
      }
      int Length = glpPrimitiveMatrixGetRows(a1);
      int Rows = glpPrimitiveMatrixGetRows(a2);
LABEL_6:
      BOOL v9 = Length == Rows;
LABEL_9:
      uint64_t result = v9;
      break;
    case 4:
      BOOL v9 = a1 == a2;
      goto LABEL_9;
    default:
      abort();
  }
  return result;
}

uint64_t glpEvaluateArraySize(uint64_t a1, long long *a2, uint64_t a3, int *a4)
{
  uint64_t NameTable = glpCompilerGetNameTable(a1);
  unsigned int GLSLVersion = glpNameTableGetGLSLVersion(NameTable);
  int Language = glpNameTableGetLanguage(NameTable);
  if (!a3)
  {
    unsigned int v27 = 1;
LABEL_20:
    if (Language == 3 && GLSLVersion < 3 && a3 == 0) {
      uint64_t result = 3;
    }
    else {
      uint64_t result = v27;
    }
    Asunsigned int Size = -1;
    goto LABEL_30;
  }
  char SaFlags = glpASTNodeGetSaFlags(a3);
  if ((GLSLVersion != 1 || (SaFlags & 0x20) == 0) && (GLSLVersion == 1 || (SaFlags & 0x40) == 0))
  {
    if (!glpIsLValueNode(a3)
      || (Variableunint64_t Extra = glpLValueNodeGetVariableExtra(a3),
          !glpStringsEqual("gl_VerticesIn", 0x6B1263A0000000DLL, *(char **)(VariableExtra + 16), *(void *)(VariableExtra + 24))))
    {
      InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
      long long v31 = *a2;
      uint64_t v32 = *((void *)a2 + 2);
      char v26 = "Array size must be a constant";
      goto LABEL_36;
    }
    unsigned int v27 = 3;
    goto LABEL_20;
  }
  uint64_t Allocator = glpCompilerGetAllocator(a1);
  uint64_t ValueHash = glpCompilerGetValueHash(a1);
  uint64_t v14 = glpConstantFold(Allocator, ValueHash, a3);
  uint64_t result = glpIsConstantNode(v14);
  if (!result) {
    return result;
  }
  uint64_t Value = (unsigned int *)glpConstantNodeGetValue(v14);
  Type = (unsigned int *)glpConstantNodeGetType(v14);
  if (!glpValueIsUsableAsSize(Type, Value))
  {
    InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
    long long v31 = *a2;
    uint64_t v32 = *((void *)a2 + 2);
    char v26 = "Array size must be an integer constant expression";
    goto LABEL_36;
  }
  Asunsigned int Size = glpValueGetAsSize((uint64_t)Type, Value);
  if (Language == 3 && GLSLVersion < 3 && v14 == 0) {
    uint64_t result = 3;
  }
  else {
    uint64_t result = 2;
  }
  if (AsSize)
  {
LABEL_30:
    *a4 = AsSize;
    return result;
  }
  InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
  long long v31 = *a2;
  uint64_t v32 = *((void *)a2 + 2);
  char v26 = "Array size must be greater than zero";
LABEL_36:
  glpLogMessage(InfoLog, 0, (uint64_t)&v31, v26, v22, v23, v24, v25, v31);
  return 0;
}

uint64_t glpEvaluateTypeNode(uint64_t a1, long long *a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, unsigned int **a7, uint64_t a8, uint64_t **a9, uint64_t *a10)
{
  *a7 = (unsigned int *)glpASTNodeGetSaType(a5);
  if (glpIsQualifiedTypeNode(a5)) {
    uint64_t Qualifiers = glpQualifiedTypeNodeGetQualifiers(a5);
  }
  else {
    uint64_t Qualifiers = 0;
  }
  uint64_t result = glpParseQualifiers(a1, a3, Qualifiers, a6, (uint64_t *)a8, a9, a10);
  if (!result) {
    return result;
  }
  if (glpTypeGetKind(*a7) == 5 && (*(unsigned char *)(a8 + 4) & 1) == 0)
  {
    InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
    long long v167 = *a2;
    uint64_t v168 = *((void *)a2 + 2);
    uint64_t v24 = "Only subroutine uniforms may have subroutine types";
LABEL_152:
    glpLogMessage(InfoLog, 0, (uint64_t)&v167, v24, v20, v21, v22, v23, v144);
    return 0;
  }
  uint64_t ElementType = *a7;
  for (unsigned int i = a2;
        glpTypeGetKind(ElementType) == 2;
  if ((*(unsigned char *)a8 & 0x1F) != 0)
  {
    if (glpTypeGetKind(ElementType))
    {
      char v26 = *a7;
      uint64_t Allocator = (void *)glpCompilerGetAllocator(a1);
      glpTypeHumanReadableDescription((uint64_t)v26, (uint64_t)"<<BUG: unexpected function type>>", 0x92C8B9C800000021, Allocator);
      uint64_t v28 = glpCompilerGetInfoLog(a1);
      uint64_t v29 = *(void *)a8 & 0x1FLL;
      if (v29 == 8) {
        int v30 = 23;
      }
      else {
        int v30 = 19;
      }
      if (v29 == 16) {
        int v31 = 24;
      }
      else {
        int v31 = v30;
      }
      if (v29 == 4) {
        unsigned int v32 = 22;
      }
      else {
        unsigned int v32 = v31;
      }
      unsigned __int8 v33 = glpQualifierName(v32);
      long long v167 = *a2;
      uint64_t v168 = *((void *)a2 + 2);
      char v144 = v33;
      uint64_t v24 = "'%s' : precision qualifier not allowed for type %.*s";
      goto LABEL_22;
    }
    uint64_t PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)ElementType);
    if ((glpPrimitiveTypeGetCategory(PrimitiveType) & 0xFFFFFFFB) != 0) {
      LODWORD(PrimitiveType) = glpPrimitiveTypeGetScalarType(PrimitiveType);
    }
    if (PrimitiveType == 9 || !PrimitiveType)
    {
      int v35 = *a7;
      uint64_t v36 = (void *)glpCompilerGetAllocator(a1);
      glpTypeHumanReadableDescription((uint64_t)v35, (uint64_t)"<<BUG: unexpected function type>>", 0x92C8B9C800000021, v36);
      long long v153 = (uint64_t **)glpCompilerGetInfoLog(a1);
      uint64_t v37 = *(void *)a8 & 0x1FLL;
      switch(v37)
      {
        case 4:
          unsigned int v38 = 22;
          break;
        case 16:
          unsigned int v38 = 24;
          break;
        case 8:
          unsigned int v38 = 23;
          break;
        default:
          unsigned int v38 = 19;
          break;
      }
      char v39 = glpQualifierName(v38);
      long long v167 = *i;
      uint64_t v168 = *((void *)i + 2);
      glpLogMessage(v153, 0, (uint64_t)&v167, "'%s' : precision qualifier not allowed for type %.*s", v40, v41, v42, v43, v39);
      return 0;
    }
  }
  if (!glpCompilerDoesTrackPrecision(a1)) {
    *(void *)a8 &= 0xFFFFFFFFFFFFFFE0;
  }
  DoesTrackPrecisiounint64_t n = glpCompilerDoesTrackPrecision(a1);
  uint64_t v45 = i;
  if (a4)
  {
    if (DoesTrackPrecision && (*(unsigned char *)a8 & 0x1F) == 0 && !glpTypeGetKind(ElementType))
    {
      MostBasicuint64_t PrimitiveType = glpGetMostBasicPrimitiveType(ElementType);
      int Category = glpPrimitiveTypeGetCategory(MostBasicPrimitiveType);
      if (Category)
      {
        if (Category != 4) {
          LODWORD(MostBasicPrimitiveType) = glpPrimitiveTypeGetScalarType(MostBasicPrimitiveType);
        }
        uint64_t DefaultPrecisionForType = glpGetDefaultPrecisionForType(a1, ElementType);
        if (!DefaultPrecisionForType && MostBasicPrimitiveType != 9)
        {
          unint64_t v86 = *a7;
          uint64_t v87 = (void *)glpCompilerGetAllocator(a1);
          glpTypeHumanReadableDescription((uint64_t)v86, (uint64_t)"<<BUG: unexpected function type>>", 0x92C8B9C800000021, v87);
          char v89 = v88;
          __n128 v90 = (uint64_t **)glpCompilerGetInfoLog(a1);
          long long v167 = *i;
          uint64_t v168 = *((void *)i + 2);
          glpLogMessage(v90, 0, (uint64_t)&v167, "'%.*s' : declaration must include a precision qualifier for type", v91, v92, v93, v94, v89);
          return 0;
        }
        if (MostBasicPrimitiveType != 9) {
          *(void *)a8 |= DefaultPrecisionForType;
        }
      }
    }
  }
  if ((glpASTNodeGetSaFlags(a5) & 0x8000000) != 0)
  {
    if (!*a9)
    {
      uint64_t v46 = glpCompilerGetAllocator(a1);
      *a9 = glpMakeLayoutObject(v46);
    }
    uint64_t v47 = glpCompilerGetAllocator(a1);
    BOOL v48 = *a9;
    *(void *)&long long v167 = "-1";
    *((void *)&v167 + 1) = 0xEDA00000002;
    uint64_t v168 = 0xFFFFFFFFLL;
    glpLayoutObjectAppend(v47, 0, (uint64_t)&v167, 0, 0, v48, 84);
  }
  if ((*(unsigned char *)(a8 + 3) & 0x60) == 0)
  {
    int Kind = glpTypeGetKind(*a7);
    char v55 = *a7;
    if (Kind == 2) {
      char v55 = (unsigned int *)glpArrayTypeGetElementType((uint64_t)v55);
    }
    if (glpTypeGetKind(v55) == 2)
    {
      InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
      long long v167 = *i;
      uint64_t v168 = *((void *)i + 2);
      uint64_t v24 = "Multi-dimensional array types not supported";
      goto LABEL_152;
    }
    if ((~*(void *)a8 & 0x300000000) == 0 && glpTypeGetKind(*a7) != 5)
    {
      if (glpTypeGetKind(*a7) != 2
        || (uint64_t v72 = (unsigned int *)glpArrayTypeGetElementType((uint64_t)*a7), glpTypeGetKind(v72) != 5))
      {
        uint64_t v73 = *a7;
        uint64_t v74 = (void *)glpCompilerGetAllocator(a1);
        glpTypeHumanReadableDescription((uint64_t)v73, (uint64_t)"<<BUG: unexpected function type>>", 0x92C8B9C800000021, v74);
        char v76 = v75;
        uint64_t v77 = (uint64_t **)glpCompilerGetInfoLog(a1);
        long long v167 = *i;
        uint64_t v168 = *((void *)i + 2);
        glpLogMessage(v77, 0, (uint64_t)&v167, "subroutine uniform may not have non-subroutine type '%.*s'", v78, v79, v80, v81, v76);
        return 0;
      }
    }
    goto LABEL_116;
  }
  uint64_t NameTable = glpCompilerGetNameTable(a1);
  unsigned int GLSLVersion = glpNameTableGetGLSLVersion(NameTable);
  unsigned int Language = glpNameTableGetLanguage(NameTable);
  BOOL IsExtensionEnabled = glpNameTableIsExtensionEnabled(NameTable, 0x23u);
  BOOL v53 = GLSLVersion > 2 || glpNameTableIsExtensionEnabled(NameTable, 0xEu);
  char v146 = v53;
  uint64_t v150 = *(void *)a8;
  uint64_t v56 = (*(void *)a8 >> 29) & 1;
  if (Language) {
    int v57 = 0;
  }
  else {
    int v57 = (*(void *)a8 >> 29) & 1;
  }
  int v152 = v57;
  if (Language != 4) {
    LODWORD(v56) = 0;
  }
  int v148 = v56;
  BOOL v149 = Language == 4;
  int v58 = glpTypeGetKind(*a7);
  uint64_t v59 = *a7;
  int v147 = v58;
  if (v58 == 2) {
    uint64_t v59 = (unsigned int *)glpArrayTypeGetElementType((uint64_t)v59);
  }
  int v151 = glpTypeGetKind(v59);
  if (v151 == 2) {
    uint64_t v59 = (unsigned int *)glpArrayTypeGetElementType((uint64_t)v59);
  }
  unsigned int v154 = GLSLVersion;
  unsigned int v145 = Language;
  BOOL v60 = IsExtensionEnabled;
  if (glpTypeGetKind(v59)) {
    uint64_t v61 = 0;
  }
  else {
    uint64_t v61 = glpPrimitiveTypeGetPrimitiveType((uint64_t)v59);
  }
  int v62 = glpPrimitiveTypeGetCategory(v61);
  int v63 = glpPrimitiveTypeGetCategory(v61);
  int v64 = v63;
  if (!v62)
  {
    int v65 = 0;
    BOOL v66 = 0;
    goto LABEL_69;
  }
  int v63 = glpPrimitiveTypeGetCategory(v61);
  if (v64 == 4)
  {
    int v65 = 0;
    int v62 = 0;
    BOOL v66 = 0;
LABEL_69:
    BOOL v67 = v60;
    int v68 = v152;
    unsigned int v69 = v154;
    goto LABEL_91;
  }
  int v70 = v63;
  uint64_t ScalarType = glpPrimitiveTypeGetScalarType(v61);
  int v62 = ScalarType;
  BOOL v67 = v60;
  if (ScalarType != 9 || v60)
  {
    char v82 = v146;
    if (v60) {
      char v82 = 1;
    }
    unsigned int v69 = v154;
    if ((v82 & 1) != 0 || ScalarType == 1)
    {
      BOOL v95 = v67;
      int v96 = glpPrimitiveTypeGetScalarType(ScalarType);
      BOOL v67 = v95;
      BOOL v66 = v96 == 62;
      int v65 = 1;
    }
    else
    {
      int v65 = 0;
      BOOL v66 = 0;
    }
  }
  else
  {
    int v65 = 0;
    BOOL v66 = 0;
    int v62 = 9;
    unsigned int v69 = v154;
  }
  int v68 = v152;
  int v63 = v70;
LABEL_91:
  uint64_t v97 = *(void *)a8;
  if ((*(void *)a8 & 0x1000000000) != 0)
  {
    int v99 = 1;
    if (!v68) {
      goto LABEL_100;
    }
LABEL_110:
    if (v151 == 2) {
      int v65 = 0;
    }
    BOOL v101 = v69 > 4;
    uint64_t v45 = i;
    if (v101)
    {
LABEL_115:
      if (v65) {
        goto LABEL_116;
      }
LABEL_177:
      uint64_t v133 = *a7;
      uint64_t v134 = (void *)glpCompilerGetAllocator(a1);
      glpTypeHumanReadableDescription((uint64_t)v133, (uint64_t)"<<BUG: unexpected function type>>", 0x92C8B9C800000021, v134);
      char v136 = v135;
      uint64_t v137 = (uint64_t **)glpCompilerGetInfoLog(a1);
      uint64_t v138 = glpCompilerGetNameTable(a1);
      unsigned int v139 = glpNameTableGetLanguage(v138);
      glpLanguageToString(v139);
      long long v167 = *v45;
      uint64_t v168 = *((void *)v45 + 2);
      glpLogMessage(v137, 0, (uint64_t)&v167, "%.*s can't be an %s in the %s shader", v140, v141, v142, v143, v136);
      return 0;
    }
LABEL_113:
    if (v147 == 2) {
      int v65 = 0;
    }
    goto LABEL_115;
  }
  int v98 = v148 ^ 1;
  if (v69 <= 4) {
    int v98 = 0;
  }
  if (v62 == 1) {
    int v98 = 1;
  }
  if (v67) {
    int v99 = 1;
  }
  else {
    int v99 = v98;
  }
  if (v68) {
    goto LABEL_110;
  }
LABEL_100:
  if ((*(_DWORD *)&v149 & (v150 >> 30)) != 0)
  {
    if (v63 == 3) {
      int v100 = 0;
    }
    else {
      int v100 = v65;
    }
    if (v151 == 2) {
      int v100 = 0;
    }
    int v65 = v100 & !v66;
    BOOL v101 = v69 > 2;
    uint64_t v45 = i;
    if (v101 || v67) {
      goto LABEL_115;
    }
    goto LABEL_113;
  }
  uint64_t v45 = i;
  if (a3 - 9 < 2 || (v97 & 0x20000000000) != 0) {
    goto LABEL_136;
  }
  if (*a9)
  {
    BOOL v102 = v67;
    __n128 v103 = glpLayoutObjectFind(*a9, 83);
    BOOL v67 = v102;
    if (v103) {
      goto LABEL_136;
    }
    uint64_t v97 = *(void *)a8;
  }
  if ((v97 & 0x20000000) == 0)
  {
LABEL_132:
    if ((v97 & 0x40000000) != 0)
    {
      BOOL v106 = v67;
      int v107 = glpBankForOutputsInLanguage(v145);
      BOOL v67 = v106;
      if (v107) {
        goto LABEL_134;
      }
    }
LABEL_136:
    if (v151 == 2) {
      int v110 = 0;
    }
    else {
      int v110 = v65;
    }
    int v65 = v110 & v99;
    if (v154 < 5) {
      goto LABEL_176;
    }
    if ((v65 & 1) == 0)
    {
      BOOL v111 = v67;
      int v112 = glpTypeGetKind(*a7);
      BOOL v67 = v111;
      if (v112 != 1)
      {
        if (v147 != 2) {
          goto LABEL_177;
        }
        if (v151 == 2) {
          goto LABEL_177;
        }
        int v113 = glpTypeGetKind(v59);
        BOOL v67 = v111;
        if (v113 != 1) {
          goto LABEL_177;
        }
      }
    }
    *(void *)&long long v167 = 0;
    *((void *)&v167 + 1) = &v167;
    uint64_t v168 = 0x2000000000;
    int v169 = 1;
    uint64_t v163 = 0;
    BOOL v164 = &v163;
    uint64_t v165 = 0x2000000000;
    uint64_t v166 = 0;
    uint64_t v114 = *a7;
    v157[0] = MEMORY[0x263EF8330];
    v157[1] = 0x40000000;
    v157[2] = __glpEvaluateTypeNode_block_invoke_2;
    v157[3] = &unk_264D9A058;
    BOOL v158 = v67;
    v157[4] = &v167;
    v157[5] = &v163;
    glpEachPrimitiveComponentOfType((uint64_t)v114, (uint64_t)v157);
    if (*(_DWORD *)(*((void *)&v167 + 1) + 24))
    {
      _Block_object_dispose(&v163, 8);
      _Block_object_dispose(&v167, 8);
      goto LABEL_116;
    }
    goto LABEL_171;
  }
  BOOL v104 = v67;
  int v105 = glpBankForInputsInLanguage(v145);
  BOOL v67 = v104;
  if (!v105)
  {
    uint64_t v97 = *(void *)a8;
    goto LABEL_132;
  }
LABEL_134:
  BOOL v108 = v67;
  if ((*(unsigned char *)(a8 + 3) & 0x20) != 0) {
    int v109 = glpBankForInputsInLanguage(v145);
  }
  else {
    int v109 = glpBankForOutputsInLanguage(v145);
  }
  int v115 = v109;
  if (v147 != 2)
  {
    uint64_t v116 = (uint64_t **)glpCompilerGetInfoLog(a1);
    if ((*(void *)a8 & 0x20000000) != 0) {
      uint64_t v117 = "inputs";
    }
    else {
      uint64_t v117 = "outputs";
    }
    glpLanguageToString(v145);
    long long v167 = *i;
    uint64_t v168 = *((void *)i + 2);
    glpLogMessage(v116, 0, (uint64_t)&v167, "%s in the %s shader must be arrays", v118, v119, v120, v121, (char)v117);
    return 0;
  }
  if (glpTypeGetKind(v59) != 1) {
    goto LABEL_166;
  }
  *(void *)&long long v167 = 0;
  *((void *)&v167 + 1) = &v167;
  uint64_t v168 = 0x2000000000;
  int v169 = 1;
  uint64_t v163 = 0;
  BOOL v164 = &v163;
  uint64_t v165 = 0x2000000000;
  uint64_t v166 = 0;
  uint64_t v122 = *a7;
  v161[0] = MEMORY[0x263EF8330];
  v161[1] = 0x40000000;
  v161[2] = __glpEvaluateTypeNode_block_invoke;
  v161[3] = &unk_264D9A030;
  BOOL v162 = v108;
  v161[4] = &v167;
  v161[5] = &v163;
  glpEachPrimitiveComponentOfType((uint64_t)v122, (uint64_t)v161);
  if (!*(_DWORD *)(*((void *)&v167 + 1) + 24))
  {
LABEL_171:
    __n128 v126 = (uint64_t **)glpCompilerGetInfoLog(a1);
    if ((*(void *)a8 & 0x20000000) != 0) {
      uint64_t v131 = "Input";
    }
    else {
      uint64_t v131 = "Output";
    }
    long long v159 = *i;
    uint64_t v160 = *((void *)i + 2);
    glpLogMessage(v126, 0, (uint64_t)&v159, "%s variables may not contain %s", v127, v128, v129, v130, (char)v131);
    _Block_object_dispose(&v163, 8);
    _Block_object_dispose(&v167, 8);
    return 0;
  }
  _Block_object_dispose(&v163, 8);
  _Block_object_dispose(&v167, 8);
  int v65 = 1;
LABEL_166:
  uint64_t v123 = glpArrayTypeGetElementType((uint64_t)*a7);
  int ElementCount = glpArrayTypeGetElementCount((uint64_t)*a7);
  ImpliedBankunsigned int Size = glpCompilerGetImpliedBankSize(a1, v115);
  if (ElementCount == -1) {
    int ElementCount = ImpliedBankSize;
  }
  if (ImpliedBankSize != -1 && ElementCount != ImpliedBankSize)
  {
    uint64_t v28 = glpCompilerGetInfoLog(a1);
    glpLanguageToString(v145);
    long long v167 = *i;
    uint64_t v168 = *((void *)i + 2);
    char v144 = ElementCount;
    uint64_t v24 = "Declared size (%u) of %s array in the %s shader is incompatible with earlier declarations (expected %u)";
LABEL_22:
    InfoLog = (uint64_t **)v28;
    goto LABEL_152;
  }
  uint64_t v132 = glpCompilerGetAllocator(a1);
  *a7 = (unsigned int *)glpMakeBankType(v132, v115, v123, ElementCount);
LABEL_176:
  if (!v65) {
    goto LABEL_177;
  }
LABEL_116:
  if (!glpTypeGetKind(*a7) && !glpPrimitiveTypeGetPrimitiveType((uint64_t)*a7))
  {
    if ((*(void *)a8 & 0xFFFFFFFFFFE7FFFFLL) != 0)
    {
      InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
      long long v167 = *v45;
      uint64_t v168 = *((void *)v45 + 2);
      uint64_t v24 = "void may not be qualified";
      goto LABEL_152;
    }
    if (a3 != 4)
    {
      InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
      long long v167 = *v45;
      uint64_t v168 = *((void *)v45 + 2);
      uint64_t v24 = "void not allowed except as return type";
      goto LABEL_152;
    }
  }
  uint64_t result = 1;
  if (a3 != 8 && a4 && (*(void *)a8 & 0x900000000) != 0x100000000 && (*(void *)a8 & 0x6000000) != 0x2000000)
  {
    if (!glpTypeGetSamplerCount((uint64_t)*a7)) {
      return 1;
    }
    InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
    long long v167 = *i;
    uint64_t v168 = *((void *)i + 2);
    uint64_t v24 = "Samplers not allowed except in non-buffer uniforms and in-parameters";
    goto LABEL_152;
  }
  return result;
}

uint64_t __glpEvaluateTypeNode_block_invoke(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result = glpPrimitiveTypeGetCategory(a2);
  if ((result - 1) >= 3)
  {
    if (result == 4)
    {
      uint64_t v7 = "samplers";
      goto LABEL_9;
    }
    if (!result) {
      abort();
    }
  }
  else if (!*(_DWORD *)(a1 + 48))
  {
    uint64_t result = glpPrimitiveTypeGetScalarType(a2);
    if (result == 9)
    {
      uint64_t v7 = "BOOLs";
LABEL_9:
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v7;
      *a3 = 1;
    }
  }
  return result;
}

uint64_t __glpEvaluateTypeNode_block_invoke_2(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result = glpPrimitiveTypeGetCategory(a2);
  if ((result - 1) >= 3)
  {
    if (result == 4)
    {
      uint64_t v7 = "samplers";
      goto LABEL_9;
    }
    if (!result) {
      abort();
    }
  }
  else if (!*(_DWORD *)(a1 + 48))
  {
    uint64_t result = glpPrimitiveTypeGetScalarType(a2);
    if (result == 9)
    {
      uint64_t v7 = "BOOLs";
LABEL_9:
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v7;
      *a3 = 1;
    }
  }
  return result;
}

uint64_t glpCheckName(uint64_t a1, uint64_t a2, const char *a3, unsigned int a4)
{
  uint64_t NameTable = glpCompilerGetNameTable(a1);
  if (!glpNameTableIsExtensionEnabled(NameTable, 0x23u) && a4 >= 3 && !strncmp("gl_", a3, 3uLL))
  {
    InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
    glpASTNodeGetLocation(a2, &v15);
    glpLogMessage(InfoLog, 0, (uint64_t)&v15, "Identifier name '%.*s' cannot start with 'gl_'", v10, v11, v12, v13, a4);
    return -1;
  }
  return a2;
}

BOOL glpHandleVariableRedeclaration(uint64_t a1, long long *a2, uint64_t a3, char a4, unsigned int *a5, uint64_t a6, uint64_t *a7, unsigned int *a8, unsigned int *a9, uint64_t a10, void **a11, unsigned int **a12, unint64_t *a13, void **a14)
{
  if (a7)
  {
    BOOL v19 = glpLayoutObjectFind(a7, 81) != 0;
    if (glpLayoutObjectFind(a7, 82))
    {
      uint64_t NameTable = glpCompilerGetNameTable(a1);
      if (glpNameTableGetGLSLVersion(NameTable) > 8
        || glpNameTableIsExtensionEnabled(NameTable, 0x15u)
        || glpNameTableIsExtensionEnabled(NameTable, 1u))
      {
        BOOL v19 = 1;
      }
    }
  }
  else
  {
    BOOL v19 = 0;
  }
  BOOL v140 = v19;
  uint64_t Allocator = (void *)glpCompilerGetAllocator(a1);
  glpTypeHumanReadableDescription((uint64_t)a5, (uint64_t)"<<BUG: unexpected function type>>", 0x92C8B9C800000021, Allocator);
  uint64_t v22 = (void *)glpCompilerGetAllocator(a1);
  glpTypeHumanReadableDescription((uint64_t)a9, (uint64_t)"<<BUG: unexpected function type>>", 0x92C8B9C800000021, v22);
  char v24 = v23;
  int Kind = glpTypeGetKind(a5);
  if (Kind != glpTypeGetKind(a9)) {
    goto LABEL_31;
  }
  char v26 = a5;
  if (Kind == 3)
  {
    int ElementCount = glpBankTypeGetElementCount((uint64_t)a5);
    int v34 = glpBankTypeGetElementCount((uint64_t)a9);
    if (ElementCount != -1 && v34 != -1 && ElementCount != v34) {
      goto LABEL_31;
    }
    uint64_t ElementType = (unsigned int *)glpBankTypeGetElementType((uint64_t)a5);
    uint64_t v36 = (unsigned int *)glpBankTypeGetElementType((uint64_t)a9);
    uint64_t v136 = (uint64_t)ElementType;
    int v37 = glpTypeGetKind(ElementType);
    if (v37 != glpTypeGetKind(v36)) {
      goto LABEL_31;
    }
    if (v37 == 2)
    {
      int v38 = glpArrayTypeGetElementCount(v136);
      int v39 = glpArrayTypeGetElementCount((uint64_t)v36);
      if (v38 != -1 && v39 != -1 && v38 != v39) {
        goto LABEL_31;
      }
      uint64_t v40 = glpArrayTypeGetElementType(v136);
      uint64_t v32 = glpArrayTypeGetElementType((uint64_t)v36);
      char v26 = (unsigned int *)v40;
    }
    else
    {
      char v26 = (unsigned int *)v136;
      uint64_t v32 = (uint64_t)v36;
    }
  }
  else if (Kind == 2)
  {
    int v27 = glpArrayTypeGetElementCount((uint64_t)a5);
    int v28 = glpArrayTypeGetElementCount((uint64_t)a9);
    if (v27 != -1 && v28 != -1 && v27 != v28) {
      goto LABEL_31;
    }
    uint64_t v29 = (unsigned int *)glpArrayTypeGetElementType((uint64_t)a5);
    int v30 = (unsigned int *)glpArrayTypeGetElementType((uint64_t)a9);
    int v31 = glpTypeGetKind(v29);
    if (v31 != glpTypeGetKind(v30)) {
      goto LABEL_31;
    }
    char v26 = v29;
    uint64_t v32 = (uint64_t)v30;
  }
  else
  {
    uint64_t v32 = (uint64_t)a9;
  }
  if (!glpTypesEqual(v26, v32))
  {
LABEL_31:
    InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
    long long v142 = *a2;
    uint64_t v143 = *((void *)a2 + 2);
    glpLogMessage(InfoLog, 0, (uint64_t)&v142, "Type (%.*s) of redeclaration of '%.*s' is incompatible with type (%.*s) of previous declaration", v43, v44, v45, v46, v24);
    return 0;
  }
  if (glpTypeGetKind(a5) != 2 && glpTypeGetKind(a5) != 3)
  {
    if (!v140)
    {
      int v70 = (uint64_t **)glpCompilerGetInfoLog(a1);
      long long v142 = *a2;
      uint64_t v143 = *((void *)a2 + 2);
      glpLogMessage(v70, 0, (uint64_t)&v142, "Regular non-array variable '%.*s' may not be redeclared", v71, v72, v73, v74, a4);
      return 0;
    }
    if (!glpTypesEqual(a5, (uint64_t)a9))
    {
      BOOL v60 = (uint64_t **)glpCompilerGetInfoLog(a1);
      long long v142 = *a2;
      uint64_t v143 = *((void *)a2 + 2);
      glpLogMessage(v60, 0, (uint64_t)&v142, "Type (%.*s) of redeclaration of '%.*s' differs from type (%.*s) of previous declaration", v61, v62, v63, v64, v24);
      return 0;
    }
    goto LABEL_95;
  }
  if (glpTypeGetKind(a5) == 2)
  {
    BOOL v41 = 0;
  }
  else
  {
    BOOL v48 = (unsigned int *)glpBankTypeGetElementType((uint64_t)a5);
    BOOL v41 = glpTypeGetKind(v48) == 2;
  }
  int v49 = _elementCount(a5);
  unsigned int v50 = _elementCount(a9);
  if (v50 == -1 && v49 != -1) {
    goto LABEL_39;
  }
  if (v41)
  {
    unsigned int v137 = v50;
    uint64_t v51 = (unsigned int *)_elementType(a5);
    uint64_t v52 = (unsigned int *)_elementType(a9);
    int v53 = _elementCount(v51);
    unsigned int v54 = _elementCount(v52);
    if (v54 == -1 && v53 != -1)
    {
LABEL_39:
      char v55 = (uint64_t **)glpCompilerGetInfoLog(a1);
      long long v142 = *a2;
      uint64_t v143 = *((void *)a2 + 2);
      glpLogMessage(v55, 0, (uint64_t)&v142, "Type (%.*s) of redeclaration of '%.*s' is less specific than type (%.*s) of previous declaration", v56, v57, v58, v59, v24);
      return 0;
    }
    if (v49 != -1 || v137 == -1)
    {
      if (v53 != -1 || v54 == -1)
      {
        if ((v137 & v49 & v53 & v54) != 0xFFFFFFFF)
        {
          BOOL v111 = (uint64_t **)glpCompilerGetInfoLog(a1);
          long long v142 = *a2;
          uint64_t v143 = *((void *)a2 + 2);
          glpLogMessage(v111, 0, (uint64_t)&v142, "Size in type (%.*s) of redeclaration of sized array '%.*s' adds nothing to size in type (%.*s) of previous declaration", v112, v113, v114, v115, v24);
          return 0;
        }
        goto LABEL_87;
      }
      if (v49 == -1 || v49 == v137)
      {
LABEL_69:
        if (*a8 > v137)
        {
          BOOL v95 = (uint64_t **)glpCompilerGetInfoLog(a1);
          long long v142 = *a2;
          uint64_t v143 = *((void *)a2 + 2);
          glpLogMessage(v95, 0, (uint64_t)&v142, "Outer size in type (%.*s) of redeclaration of implicitly-sized array '%.*s' is less than the implicit size (%u)", v96, v97, v98, v99, v24);
          return 0;
        }
        if (a8[1] > v54)
        {
          uint64_t v116 = (uint64_t **)glpCompilerGetInfoLog(a1);
          long long v142 = *a2;
          uint64_t v143 = *((void *)a2 + 2);
          glpLogMessage(v116, 0, (uint64_t)&v142, "Inner size in type (%.*s) of redeclaration of implicitly-sized array '%.*s' is less than the implicit size (%u)", v117, v118, v119, v120, v24);
          return 0;
        }
LABEL_87:
        char v141 = a4;
        uint64_t v121 = glpBankTypeGetElementType((uint64_t)a5);
        uint64_t v122 = glpBankTypeGetElementType((uint64_t)a9);
        uint64_t v123 = glpCompilerGetAllocator(a1);
        uint64_t v124 = glpArrayTypeGetElementType(v121);
        int v125 = glpArrayTypeGetElementCount(v121);
        int v126 = glpArrayTypeGetElementCount(v122);
        if (v125 == -1) {
          int v127 = v126;
        }
        else {
          int v127 = v125;
        }
        Maxint ElementCount = glpArrayTypeGetMaxElementCount(v121);
        uint64_t ArrayType = glpMakeArrayType(v123, v124, v127, MaxElementCount);
        if (glpArrayTypeGetMaxElementCount(ArrayType) != -1)
        {
          unsigned int v129 = glpArrayTypeGetElementCount(ArrayType);
          if (v129 > glpArrayTypeGetMaxElementCount(ArrayType))
          {
LABEL_80:
            BOOL v101 = (uint64_t **)glpCompilerGetInfoLog(a1);
            long long v142 = *a2;
            uint64_t v143 = *((void *)a2 + 2);
            glpLogMessage(v101, 0, (uint64_t)&v142, "Redeclaration of special array '%.*s' exceeds maximum allowed size", v102, v103, v104, v105, v141);
            return 0;
          }
        }
        goto LABEL_63;
      }
    }
    else if (v53 == -1 || v53 == v54)
    {
      goto LABEL_69;
    }
    char v75 = (uint64_t **)glpCompilerGetInfoLog(a1);
    long long v142 = *a2;
    uint64_t v143 = *((void *)a2 + 2);
    glpLogMessage(v75, 0, (uint64_t)&v142, "Size in type (%.*s) of redeclaration of sized array '%.*s' doesn't match size in type (%.*s) of previous declaration", v76, v77, v78, v79, v24);
    return 0;
  }
  if (v49 == -1)
  {
    if (v50 != -1 && *a8 > v50)
    {
      uint64_t v80 = (uint64_t **)glpCompilerGetInfoLog(a1);
      long long v142 = *a2;
      uint64_t v143 = *((void *)a2 + 2);
      glpLogMessage(v80, 0, (uint64_t)&v142, "Size in type (%.*s) of redeclaration of implicitly-sized array '%.*s' is less than the implicit size (%u)", v81, v82, v83, v84, v24);
      return 0;
    }
  }
  else
  {
    if (!v140)
    {
      __n128 v90 = (uint64_t **)glpCompilerGetInfoLog(a1);
      long long v142 = *a2;
      uint64_t v143 = *((void *)a2 + 2);
      glpLogMessage(v90, 0, (uint64_t)&v142, "Redeclaration of sized array '%.*s' not allowed", v91, v92, v93, v94, a4);
      return 0;
    }
    if (v49 != v50)
    {
      int v65 = (uint64_t **)glpCompilerGetInfoLog(a1);
      long long v142 = *a2;
      uint64_t v143 = *((void *)a2 + 2);
      glpLogMessage(v65, 0, (uint64_t)&v142, "Redeclaration of redeclarable sized array '%.*s' would alter size", v66, v67, v68, v69, a4);
      return 0;
    }
  }
  char v141 = a4;
  uint64_t ArrayType = _elementType(a5);
LABEL_63:
  unsigned int v86 = _elementCount(a5);
  unsigned int v87 = _elementCount(a9);
  if (v86 == -1) {
    unsigned int v88 = v87;
  }
  else {
    unsigned int v88 = v86;
  }
  if (glpTypeGetKind(a5) == 3) {
    unsigned int v89 = -1;
  }
  else {
    unsigned int v89 = glpArrayTypeGetMaxElementCount((uint64_t)a5);
  }
  if (glpTypeGetKind(a9) == 3) {
    int v100 = -1;
  }
  else {
    int v100 = glpArrayTypeGetMaxElementCount((uint64_t)a9);
  }
  if (v89 == -1) {
    unsigned int v89 = v100;
  }
  if (v89 != -1 && v88 != -1 && v88 > v89) {
    goto LABEL_80;
  }
  int v106 = glpTypeGetKind(a5);
  uint64_t v107 = glpCompilerGetAllocator(a1);
  uint64_t v108 = v107;
  if (v106 == 3)
  {
    int Bank = glpBankTypeGetBank((uint64_t)a5);
    uint64_t BankType = glpMakeBankType(v108, Bank, ArrayType, v88);
  }
  else
  {
    uint64_t BankType = glpMakeArrayType(v107, ArrayType, v88, v89);
  }
  a5 = (unsigned int *)BankType;
LABEL_95:
  *a12 = a5;
  if (a7)
  {
    uint64_t v130 = (void *)glpCompilerGetAllocator(a1);
    uint64_t v131 = glpCopyLayoutObject(v130, (void **)a7);
    *a14 = v131;
    if (a11)
    {
      uint64_t v132 = glpCompilerGetAllocator(a1);
      uint64_t v133 = *a14;
      long long v142 = *a2;
      uint64_t v143 = *((void *)a2 + 2);
      BOOL result = glpLayoutObjectAppendMany(v132, a1, (uint64_t)&v142, v133, a11);
      if (!result) {
        return result;
      }
      goto LABEL_101;
    }
  }
  else
  {
    if (!a11)
    {
LABEL_101:
      uint64_t v131 = *a14;
      goto LABEL_102;
    }
    uint64_t v134 = (void *)glpCompilerGetAllocator(a1);
    uint64_t v131 = glpCopyLayoutObject(v134, a11);
    *a14 = v131;
  }
LABEL_102:
  if (v131)
  {
    uint64_t v135 = glpCompilerGetAllocator(a1);
    glpLayoutObjectRemove(v135, *a14, 82);
  }
  *a13 = a6 & 0xFFFFFFFFFFFFFFE0 | a10;
  return 1;
}

uint64_t _elementCount(unsigned int *a1)
{
  int Kind = glpTypeGetKind(a1);
  if (Kind == 3)
  {
    return glpBankTypeGetElementCount((uint64_t)a1);
  }
  else
  {
    if (Kind != 2) {
      abort();
    }
    return glpArrayTypeGetElementCount((uint64_t)a1);
  }
}

uint64_t _elementType(unsigned int *a1)
{
  int Kind = glpTypeGetKind(a1);
  if (Kind == 3)
  {
    return glpBankTypeGetElementType((uint64_t)a1);
  }
  else
  {
    if (Kind != 2) {
      abort();
    }
    return glpArrayTypeGetElementType((uint64_t)a1);
  }
}

uint64_t glpFlattenCommaTree(uint64_t a1, uint64_t a2)
{
  uint64_t Allocator = (void *)glpCompilerGetAllocator(a1);
  glpASTNodeGetLocation(a2, &v7);
  glpMakeCommaExprNode((uint64_t)Allocator, &v7, 0);
  uint64_t v5 = v4;
  flattenCommaTreeInto(a2, v4, Allocator);
  return v5;
}

void *flattenCommaTreeInto(uint64_t a1, uint64_t a2, void *a3)
{
  if (glpASTNodeGetKind(a1) == 43)
  {
    BOOL result = (void *)glpCommaExprNodeGetExprCount(a1);
    if (result)
    {
      int v7 = (int)result;
      for (unsigned int i = 0; i != v7; ++i)
      {
        uint64_t Expr = glpCommaExprNodeGetExpr(a1, i);
        BOOL result = (void *)flattenCommaTreeInto(Expr, a2, a3);
      }
    }
  }
  else
  {
    return glpCommaExprNodeAddExpr(a3, a2, a1);
  }
  return result;
}

uint64_t glpCommaResult(uint64_t Expr)
{
  while (1)
  {
    uint64_t v1 = Expr;
    if (glpASTNodeGetKind(Expr) != 43) {
      break;
    }
    int ExprCount = glpCommaExprNodeGetExprCount(v1);
    uint64_t Expr = glpCommaExprNodeGetExpr(v1, ExprCount - 1);
  }
  return v1;
}

uint64_t glpSASpecialAssert(uint64_t a1, uint64_t a2)
{
  if (glpCallNodeGetArgCount(a2) <= 1)
  {
    InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
    glpASTNodeGetLocation(a2, &v87);
    BOOL v9 = "$assert requires at least 2 arguments";
    uint64_t v10 = &v87;
LABEL_13:
    glpLogMessage(InfoLog, 0, (uint64_t)v10, v9, v5, v6, v7, v8, v70);
    return -1;
  }
  uint64_t v11 = glpCallNodeGetArg(a2, 0);
  if (glpASTNodeGetKind(v11) != 1)
  {
    InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
    glpASTNodeGetLocation(a2, &v86);
    BOOL v9 = "first argument to $assert must be an identifier";
    uint64_t v10 = &v86;
    goto LABEL_13;
  }
  Name = (const char *)glpVariableIdentifierNodeGetName(v11);
  uint64_t v13 = (char *)Name;
  uint64_t v15 = v14;
  uint64_t v16 = (v14 - 8);
  if (v14 >= 8)
  {
    if (!strncmp(Name, "type_is_", 8uLL))
    {
      uint64_t v25 = v13 + 8;
      if (v16 >> 5 >= v16)
      {
        uint64_t v27 = v16;
      }
      else
      {
        int v26 = v15 - 9;
        LODWORD(v27) = v16;
        do
        {
          uint64_t v27 = (32 * v27 + (v27 >> 2) + v25[v26]) ^ v27;
          v26 += ~(v16 >> 5);
        }
        while (v26 + 1 > v16 >> 5);
      }
      unsigned int v30 = glpPrimitiveTypeFromString(v25, v16 | (v27 << 32));
      uint64_t PrimitiveType = (unsigned int *)glpGetPrimitiveType(v30);
      uint64_t v32 = glpCallNodeGetArg(a2, 1u);
      uint64_t v33 = glpSANode(a1, v32);
      if (v33 == -1)
      {
        int v38 = (uint64_t **)glpCompilerGetInfoLog(a1);
        glpASTNodeGetLocation(a2, &v85);
        glpLogMessage(v38, 0, (uint64_t)&v85, "$assert type_is: expected %.*s but got SA failure", v39, v40, v41, v42, v16);
        return -1;
      }
      uint64_t SaType = glpASTNodeGetSaType(v33);
      if (!glpTypesEqual(PrimitiveType, SaType))
      {
        uint64_t Allocator = (void *)glpCompilerGetAllocator(a1);
        glpTypeHumanReadableDescription(SaType, (uint64_t)"<<BUG: unexpected function type>>", 0x92C8B9C800000021, Allocator);
        uint64_t v45 = (uint64_t **)glpCompilerGetInfoLog(a1);
        glpASTNodeGetLocation(a2, &v83);
        glpLogMessage(v45, 0, (uint64_t)&v83, "$assert type_is: expected %.*s but got %.*s", v46, v47, v48, v49, v16);
        return -1;
      }
      glpASTNodeGetLocation(a2, &v84);
      int v35 = glpGetPrimitiveType(5u);
      uint64_t IntConstant = glpCompilerGetIntConstant(a1, 1);
      int v37 = &v84;
      return glpMakeConstantValueFragment(a1, v37, (uint64_t)v35, IntConstant);
    }
    if (v15 < 0xD || strncmp(v13, "precision_is_", 0xDuLL)) {
      goto LABEL_8;
    }
    if (v15 < 0x11)
    {
      if (v15 != 16) {
        goto LABEL_49;
      }
      goto LABEL_35;
    }
    uint64_t v43 = 4;
    if (!strncmp(v13 + 13, "lowp", 4uLL))
    {
LABEL_37:
      uint64_t v50 = glpCallNodeGetArg(a2, 1u);
      uint64_t v51 = glpSANode(a1, v50);
      if (v51 == -1)
      {
        int v53 = (void *)glpCompilerGetAllocator(a1);
        StringBuffer = glpMakeStringBuffer(v53);
        _formatPrecisionToStringBuffer(StringBuffer, v43);
        char v55 = (uint64_t **)glpCompilerGetInfoLog(a1);
        glpASTNodeGetLocation(a2, &v82);
        Cuint64_t String = glpStringBufferGetCString(StringBuffer);
        glpLogMessage(v55, 0, (uint64_t)&v82, "$assert precision_is: expected %s but got SA failure", v56, v57, v58, v59, CString);
        return -1;
      }
      uint64_t v52 = glpASTNodeGetSaFlags(v51) & 0x1F;
      if (v52 != v43)
      {
        BOOL v60 = (void *)glpCompilerGetAllocator(a1);
        uint64_t v61 = glpMakeStringBuffer(v60);
        _formatPrecisionToStringBuffer(v61, v43);
        uint64_t v62 = (void *)glpCompilerGetAllocator(a1);
        uint64_t v63 = glpMakeStringBuffer(v62);
        _formatPrecisionToStringBuffer(v63, v52);
        uint64_t v64 = (uint64_t **)glpCompilerGetInfoLog(a1);
        glpASTNodeGetLocation(a2, &v80);
        char v65 = glpStringBufferGetCString(v61);
        glpStringBufferGetCString(v63);
        glpLogMessage(v64, 0, (uint64_t)&v80, "$assert precision_is: expected %s but got %s", v66, v67, v68, v69, v65);
        return -1;
      }
      glpASTNodeGetLocation(a2, &v81);
      int v35 = glpGetPrimitiveType(5u);
      uint64_t IntConstant = glpCompilerGetIntConstant(a1, 1);
      int v37 = &v81;
      return glpMakeConstantValueFragment(a1, v37, (uint64_t)v35, IntConstant);
    }
    if (v15 < 0x14)
    {
      if (v15 < 0x12) {
        goto LABEL_35;
      }
    }
    else if (!strncmp(v13 + 13, "mediump", 7uLL))
    {
      uint64_t v43 = 8;
      goto LABEL_37;
    }
    if (!strncmp(v13 + 13, "highp", 5uLL))
    {
      uint64_t v43 = 16;
      goto LABEL_37;
    }
    if (!strncmp(v13 + 13, "_argp", 5uLL))
    {
      uint64_t v43 = 1;
      goto LABEL_37;
    }
    if (!strncmp(v13 + 13, "_anyp", 5uLL))
    {
      uint64_t v43 = 2;
      goto LABEL_37;
    }
LABEL_35:
    if (!strncmp(v13 + 13, "nop", 3uLL))
    {
      uint64_t v43 = 0;
      goto LABEL_37;
    }
LABEL_49:
    abort();
  }
LABEL_8:
  if (!glpStringsEqual("sa_failed", 0xBA70AE8500000009, v13, v15))
  {
    InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
    glpASTNodeGetLocation(a2, &v72);
    char v70 = v15;
    BOOL v9 = "$assert unknown assertion kind: %.*s";
    uint64_t v10 = &v72;
    goto LABEL_13;
  }
  uint64_t v76 = 0;
  uint64_t v77 = &v76;
  uint64_t v78 = 0x2000000000;
  uint64_t v79 = 0;
  uint64_t v17 = glpCompilerGetInfoLog(a1);
  v75[0] = MEMORY[0x263EF8330];
  v75[1] = 0x40000000;
  v75[2] = __glpSASpecialAssert_block_invoke;
  v75[3] = &unk_264D9A080;
  v75[4] = &v76;
  v75[5] = a1;
  v75[6] = a2;
  glpLogSuppress(v17, (uint64_t)v75, (uint64_t)&__block_literal_global_2);
  if (v77[3] == -1)
  {
    glpASTNodeGetLocation(a2, &v74);
    int v28 = glpGetPrimitiveType(5u);
    uint64_t v29 = glpCompilerGetIntConstant(a1, 1);
    uint64_t ConstantValueFragment = glpMakeConstantValueFragment(a1, &v74, (uint64_t)v28, v29);
  }
  else
  {
    uint64_t v18 = (uint64_t **)glpCompilerGetInfoLog(a1);
    glpASTNodeGetLocation(a2, &v73);
    glpLogMessage(v18, 0, (uint64_t)&v73, "$assert sa_failed: expected this code to fail SA, but it passed", v19, v20, v21, v22, v70);
    uint64_t ConstantValueFragment = -1;
  }
  _Block_object_dispose(&v76, 8);
  return ConstantValueFragment;
}

uint64_t *_formatPrecisionToStringBuffer(uint64_t *result, uint64_t a2)
{
  unsigned int v3 = result;
  uint64_t v5 = "nop";
  switch(a2)
  {
    case 0:
      goto LABEL_28;
    case 1:
      uint64_t v5 = "$argp";
      goto LABEL_28;
    case 2:
      uint64_t v5 = "$anyp";
      goto LABEL_28;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_6;
    case 4:
      uint64_t v5 = "lowp";
      goto LABEL_28;
    case 8:
      uint64_t v5 = "mediump";
      goto LABEL_28;
    default:
      if (a2 == 16) {
        goto LABEL_27;
      }
      if (a2 == 31)
      {
        uint64_t v5 = "allp";
        goto LABEL_28;
      }
LABEL_6:
      if ((a2 & 2) != 0)
      {
        BOOL result = (uint64_t *)glpStringBufferAppendCString(result, "$anyp");
        if ((a2 & 1) == 0)
        {
          if ((a2 & 4) != 0)
          {
LABEL_22:
            glpStringBufferAppendCString(v3, "|");
LABEL_23:
            BOOL result = (uint64_t *)glpStringBufferAppendCString(v3, "lowp");
            if ((a2 & 8) != 0) {
              goto LABEL_24;
            }
            goto LABEL_18;
          }
LABEL_17:
          if ((a2 & 8) != 0)
          {
LABEL_24:
            glpStringBufferAppendCString(v3, "|");
LABEL_25:
            BOOL result = (uint64_t *)glpStringBufferAppendCString(v3, "mediump");
            if ((a2 & 0x10) == 0) {
              return result;
            }
            goto LABEL_26;
          }
LABEL_18:
          if ((a2 & 0x10) == 0) {
            return result;
          }
LABEL_26:
          glpStringBufferAppendCString(v3, "|");
          goto LABEL_27;
        }
        glpStringBufferAppendCString(v3, "|");
LABEL_21:
        BOOL result = (uint64_t *)glpStringBufferAppendCString(v3, "$argp");
        if ((a2 & 4) != 0) {
          goto LABEL_22;
        }
        goto LABEL_17;
      }
      if (a2) {
        goto LABEL_21;
      }
      if ((a2 & 4) != 0) {
        goto LABEL_23;
      }
      if ((a2 & 8) != 0) {
        goto LABEL_25;
      }
      if ((a2 & 0x10) == 0) {
        return result;
      }
LABEL_27:
      uint64_t v5 = "highp";
LABEL_28:
      return (uint64_t *)glpStringBufferAppendCString(v3, v5);
  }
}

uint64_t __glpSASpecialAssert_block_invoke(void *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = glpCallNodeGetArg(a1[6], 1u);
  uint64_t result = glpSANode(v2, v3);
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  return result;
}

uint64_t glpApplySizeToBanks(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t TopLevelNode = glpCompilerGetTopLevelNode(a1);
  if (glpTopLevelNodeGetDefCount(TopLevelNode))
  {
    unsigned int v7 = 0;
    uint64_t v45 = a2;
    do
    {
      uint64_t Def = glpTopLevelNodeGetDef(TopLevelNode, v7);
      if ((unint64_t)(Def + 1) >= 2)
      {
        uint64_t v9 = Def;
        int Kind = glpASTNodeGetKind(Def);
        if ((Kind - 46) >= 2)
        {
          if (Kind == 57)
          {
            uint64_t Extra = glpInterfaceBlockNodeGetExtra(v9);
            if (Extra)
            {
              uint64_t v25 = Extra;
              if (*(void *)(Extra + 40) == a2)
              {
                uint64_t v26 = *(void *)(Extra + 64);
                int Bank = glpBankTypeGetBank(v26);
                uint64_t v43 = v26;
                uint64_t v44 = a3;
                if (glpBankTypeGetElementCount(v26) == -1)
                {
                  unsigned int VariableObjectCount = glpInterfaceBlockObjectGetVariableObjectCount(v25);
                  if (VariableObjectCount)
                  {
                    uint64_t v29 = 0;
                    uint64_t v30 = 8 * VariableObjectCount;
                    do
                    {
                      int v31 = *(uint64_t **)(*(void *)(v25 + 72) + v29);
                      uint64_t Allocator = glpCompilerGetAllocator(v5);
                      uint64_t ElementType = glpBankTypeGetElementType(*v31);
                      *int v31 = glpMakeBankType(Allocator, Bank, ElementType, v44);
                      v29 += 8;
                    }
                    while (v30 != v29);
                  }
                }
                else if (glpBankTypeGetElementCount(v26) != a3)
                {
                  InfoLog = (uint64_t **)glpCompilerGetInfoLog(v5);
                  glpASTNodeGetLocation(v9, &v46);
                  int v37 = *(_DWORD *)(v25 + 8);
                  glpBankTypeGetElementCount(v43);
                  glpLogMessage(InfoLog, 0, (uint64_t)&v46, "Size of interface block array '%.*s' should have been %u but was %u", v38, v39, v40, v41, v37);
                  return 0;
                }
                uint64_t v34 = glpCompilerGetAllocator(v5);
                uint64_t v35 = glpBankTypeGetElementType(v43);
                a3 = v44;
                *(void *)(v25 + 64) = glpMakeBankType(v34, Bank, v35, v44);
              }
            }
          }
        }
        else
        {
          for (unsigned int i = 0; ; ++i)
          {
            unsigned int v12 = glpASTNodeGetKind(v9) == 47 ? glpVariableDeclarationGroupNodeGetDeclarationCount(v9) : 1;
            if (i >= v12) {
              break;
            }
            Declaratiounint64_t n = v9;
            if (glpASTNodeGetKind(v9) == 47) {
              Declaratiounint64_t n = glpVariableDeclarationGroupNodeGetDeclaration(v9, i);
            }
            uint64_t SaType = (unsigned int *)glpASTNodeGetSaType(Declaration);
            if ((glpASTNodeGetSaFlags(Declaration) & a2) != 0
              && SaType
              && glpTypeGetKind(SaType) == 3
              && glpBankTypeGetElementCount((uint64_t)SaType) == -1)
            {
              uint64_t v15 = glpCompilerGetAllocator(v5);
              uint64_t v16 = TopLevelNode;
              uint64_t v17 = v5;
              uint64_t v18 = a3;
              uint64_t v19 = v15;
              int v20 = glpBankTypeGetBank((uint64_t)SaType);
              uint64_t v21 = glpBankTypeGetElementType((uint64_t)SaType);
              uint64_t v22 = v19;
              a3 = v18;
              uint64_t v5 = v17;
              uint64_t TopLevelNode = v16;
              a2 = v45;
              uint64_t BankType = glpMakeBankType(v22, v20, v21, a3);
              glpASTNodeSetSaType(Declaration, BankType);
              *(void *)glpVariableDeclarationNodeGetExtra(Declaration) = BankType;
            }
          }
        }
      }
      ++v7;
    }
    while (v7 < glpTopLevelNodeGetDefCount(TopLevelNode));
  }
  return 1;
}

uint64_t glpSAPreIncrementOrDecrement(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v21 = 0;
  uint64_t v20 = 0;
  uint64_t Expr = glpUnaryOperatorNodeGetExpr(a2);
  glpHandleSideEffectsForExpr(a1, Expr, &v21, &v20);
  if (a3) {
    unsigned int v7 = glpMakeIncrementFragment;
  }
  else {
    unsigned int v7 = glpMakeDecrementFragment;
  }
  glpASTNodeGetLocation(a2, &v19);
  uint64_t v8 = v21;
  uint64_t v9 = glpDuplicateDerefOrConstant(a1, v21);
  uint64_t v10 = v7(a1, &v19, v8, v9);
  if (v20 && glpIsCommaExprNode(v20))
  {
    int ExprCount = glpCommaExprNodeGetExprCount(v20);
    glpCommaExprNodeSetExpr(v20, ExprCount - 1, v10);
    glpASTNodeSetSaType(v20, 0);
    uint64_t v12 = v20;
  }
  else
  {
    uint64_t Allocator = glpCompilerGetAllocator(a1);
    glpASTNodeGetLocation(a2, &v18);
    glpMakeCommaExprNode(Allocator, &v18, 0);
    uint64_t v12 = v14;
    if (v20)
    {
      uint64_t v15 = (void *)glpCompilerGetAllocator(a1);
      glpCommaExprNodeAddExpr(v15, v12, v20);
    }
    uint64_t v16 = (void *)glpCompilerGetAllocator(a1);
    glpCommaExprNodeAddExpr(v16, v12, v10);
  }
  return glpSANode(a1, v12);
}

uint64_t glpSAPostIncrementOrDecrement(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v32 = 0;
  uint64_t v31 = 0;
  uint64_t Expr = glpUnaryOperatorNodeGetExpr(a2);
  glpHandleSideEffectsForExpr(a1, Expr, &v32, &v31);
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t SaType = glpASTNodeGetSaType(v32);
  uint64_t v8 = glpASTNodeGetSaFlags(v32) & 0x1F;
  uint64_t v9 = glpDuplicateDerefOrConstant(a1, v32);
  glpMakeTemporary(a1, SaType, v8, v9, &v30, &v29);
  if (a3) {
    uint64_t v10 = glpMakeIncrementFragment;
  }
  else {
    uint64_t v10 = glpMakeDecrementFragment;
  }
  glpASTNodeGetLocation(a2, &v28);
  uint64_t v11 = v32;
  uint64_t v12 = glpDuplicateDerefOrConstant(a1, v32);
  uint64_t v13 = v10(a1, &v28, v11, v12);
  uint64_t Allocator = glpCompilerGetAllocator(a1);
  glpASTNodeGetLocation(a2, &v27);
  glpMakeCommaExprNode(Allocator, &v27, 0);
  uint64_t v16 = v15;
  if (v31)
  {
    if (glpIsCommaExprNode(v31))
    {
      int ExprCount = glpCommaExprNodeGetExprCount(v31);
      if (ExprCount)
      {
        int v18 = ExprCount;
        for (unsigned int i = 0; i != v18; ++i)
        {
          uint64_t v20 = (void *)glpCompilerGetAllocator(a1);
          uint64_t v21 = glpCommaExprNodeGetExpr(v31, i);
          glpCommaExprNodeAddExpr(v20, v16, v21);
        }
      }
    }
    else
    {
      uint64_t v22 = (void *)glpCompilerGetAllocator(a1);
      glpCommaExprNodeAddExpr(v22, v16, v31);
    }
  }
  if (v30)
  {
    char v23 = (void *)glpCompilerGetAllocator(a1);
    glpCommaExprNodeAddExpr(v23, v16, v30);
  }
  char v24 = (void *)glpCompilerGetAllocator(a1);
  glpCommaExprNodeAddExpr(v24, v16, v13);
  uint64_t v25 = (void *)glpCompilerGetAllocator(a1);
  glpCommaExprNodeAddExpr(v25, v16, v29);
  return glpSANode(a1, v16);
}

uint64_t glpSABuiltinPPStreamOp(uint64_t a1, uint64_t a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  unsigned int v4 = glpCallNodeGetArgCount(a2);
  if (v4 <= 2)
  {
    InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
    glpASTNodeGetLocation(a2, &v66);
    uint64_t v10 = "too few arguments to $ppstreamop.";
    uint64_t v11 = &v66;
LABEL_16:
    glpLogMessage(InfoLog, 0, (uint64_t)v11, v10, v6, v7, v8, v9, v55);
    return glpSAFailed();
  }
  unsigned int v12 = v4;
  uint64_t v13 = glpCallNodeGetArg(a2, 0);
  uint64_t SaType = (unsigned int *)glpASTNodeGetSaType(v13);
  if (!glpIsConstantNode(v13)
    || (uint64_t Value = (_DWORD *)glpConstantNodeGetValue(v13), !glpValueIsUsableAsSize(SaType, Value)))
  {
    InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
    glpASTNodeGetLocation(a2, &v65);
    uint64_t v10 = "argsToIgnore for $ppstreamop must be an integer constant.";
    uint64_t v11 = &v65;
    goto LABEL_16;
  }
  uint64_t v16 = (unsigned int *)glpConstantNodeGetValue(v13);
  Asunsigned int Size = glpValueGetAsSize((uint64_t)SaType, v16);
  if (AsSize >= v12 || (AsSize - 2) >= 3)
  {
    InfoLog = (uint64_t **)glpCompilerGetInfoLog(a1);
    glpASTNodeGetLocation(a2, &v64);
    uint64_t v10 = "argsToIgnore for $ppstreamop not valid, must be 2, 3 or 4 and less than call args.";
    uint64_t v11 = &v64;
    goto LABEL_16;
  }
  uint64_t v18 = AsSize;
  MEMORY[0x270FA5388](AsSize);
  uint64_t v20 = (unsigned int *)((char *)&v55 - ((v19 + 15) & 0x7FFFFFFF0));
  uint64_t v21 = 0;
  do
  {
    uint64_t v22 = glpCallNodeGetArg(a2, (int)v21 + 1);
    char v23 = (unsigned int *)glpASTNodeGetSaType(v22);
    if (!glpIsConstantNode(v22) || (char v24 = (_DWORD *)glpConstantNodeGetValue(v22), !glpValueIsUsableAsSize(v23, v24)))
    {
      uint64_t v36 = (uint64_t **)glpCompilerGetInfoLog(a1);
      glpASTNodeGetLocation(a2, &v63);
      glpLogMessage(v36, 0, (uint64_t)&v63, "Argument %u to $ppstreamop must be an integer constant.", v37, v38, v39, v40, v21 + 2);
      return glpSAFailed();
    }
    uint64_t v25 = (unsigned int *)glpConstantNodeGetValue(v22);
    v20[v21++] = glpValueGetAsSize((uint64_t)v23, v25);
  }
  while (v18 != v21);
  unsigned int v26 = *v20;
  if (*v20 >= 0x4F)
  {
    __n128 v27 = (uint64_t **)glpCompilerGetInfoLog(a1);
    glpASTNodeGetLocation(a2, &v62);
    uint64_t v32 = "returnPrimitiveType of $ppstreamop must represent a primitive type.";
    uint64_t v33 = &v62;
    goto LABEL_13;
  }
  unsigned int v41 = v21 + 1;
  if (v18 < 2)
  {
    uint64_t v55 = 0;
    int v43 = 0;
    unsigned int v44 = v26;
    goto LABEL_29;
  }
  unsigned int v42 = v20[1];
  if (v42 >= 0xAF)
  {
    __n128 v27 = (uint64_t **)glpCompilerGetInfoLog(a1);
    glpASTNodeGetLocation(a2, &v61);
    uint64_t v32 = "opcode of $ppstreamop must represent an opcode.";
    uint64_t v33 = &v61;
    goto LABEL_13;
  }
  if (v18 < 3)
  {
    uint64_t v55 = 0;
    unsigned int v44 = v26;
    goto LABEL_28;
  }
  unsigned int v44 = v20[2];
  if (v44 >= 0x4F)
  {
    __n128 v27 = (uint64_t **)glpCompilerGetInfoLog(a1);
    glpASTNodeGetLocation(a2, &v60);
    uint64_t v32 = "opPrimitiveType of $ppstreamop must represent a primitive type.";
    uint64_t v33 = &v60;
    goto LABEL_13;
  }
  if (v18 >= 4)
  {
    if (v20[3] < 2)
    {
      if (v41 >= v12)
      {
        __n128 v27 = (uint64_t **)glpCompilerGetInfoLog(a1);
        glpASTNodeGetLocation(a2, &v58);
        uint64_t v32 = "texture op last arg is missing, it must be a sampler";
        uint64_t v33 = &v58;
      }
      else
      {
        HIDWORD(v55) = v20[3];
        unsigned int v51 = v42;
        uint64_t v52 = glpCallNodeGetArg(a2, v12 - 1);
        int v53 = (unsigned int *)glpASTNodeGetSaType(v52);
        if (!glpTypeGetKind(v53))
        {
          unsigned int PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)v53);
          if (glpPrimitiveTypeGetCategory(PrimitiveType) == 4)
          {
            LODWORD(v55) = 1;
            int v43 = v51;
            goto LABEL_29;
          }
        }
        __n128 v27 = (uint64_t **)glpCompilerGetInfoLog(a1);
        glpASTNodeGetLocation(a2, &v57);
        uint64_t v32 = "texture op last arg is not a sampler, it must be a sampler";
        uint64_t v33 = &v57;
      }
    }
    else
    {
      __n128 v27 = (uint64_t **)glpCompilerGetInfoLog(a1);
      glpASTNodeGetLocation(a2, &v59);
      uint64_t v32 = "has_offset of $ppstreamop must be 0 or 1.";
      uint64_t v33 = &v59;
    }
LABEL_13:
    glpLogMessage(v27, 0, (uint64_t)v33, v32, v28, v29, v30, v31, v55);
    return glpSAFailed();
  }
  uint64_t v55 = 0;
LABEL_28:
  int v43 = v42;
LABEL_29:
  uint64_t Allocator = glpCompilerGetAllocator(a1);
  glpASTNodeGetLocation(a2, &v56);
  uint64_t PPStreamOpNode = glpMakePPStreamOpNode(Allocator, &v56, v26, v43, v44, v55, SHIDWORD(v55));
  if (v41 < v12)
  {
    do
    {
      __n128 v46 = (void *)glpCompilerGetAllocator(a1);
      uint64_t v47 = glpCallNodeGetArg(a2, v41);
      glpCallNodeAddArg(v46, PPStreamOpNode, v47);
      ++v41;
    }
    while (v12 != v41);
  }
  uint64_t v48 = glpGetPrimitiveType(v26);
  glpASTNodeSetSaType(PPStreamOpNode, (uint64_t)v48);
  if (glpCompilerDoesTrackPrecision(a1))
  {
    uint64_t PrecisionFlagsFromArgs = getPrecisionFlagsFromArgs(PPStreamOpNode);
    uint64_t v50 = PPStreamOpNode;
  }
  else
  {
    uint64_t v50 = PPStreamOpNode;
    uint64_t PrecisionFlagsFromArgs = 0;
  }
  glpASTNodeSetSaFlags(v50, PrecisionFlagsFromArgs);
  return PPStreamOpNode;
}

uint64_t getPrecisionFlagsFromArgs(uint64_t a1)
{
  uint64_t SaType = (unsigned int *)glpASTNodeGetSaType(a1);
  if (!glpTypeGetKind(SaType))
  {
    unsigned int PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)SaType);
    if (glpPrimitiveTypeGetCategory(PrimitiveType))
    {
      unsigned int v17 = glpPrimitiveTypeGetPrimitiveType((uint64_t)SaType);
      if (glpPrimitiveTypeGetCategory(v17) != 4)
      {
        uint64_t v18 = glpPrimitiveTypeGetPrimitiveType((uint64_t)SaType);
        if (glpPrimitiveTypeGetScalarType(v18) == 9) {
          return 0;
        }
      }
    }
  }
  int v3 = glpCallNodeGetArgCount(a1);
  int HasSrctex = glpPPStreamOpNodeGetHasSrctex(a1);
  if (!v3)
  {
    unint64_t v7 = 0;
    goto LABEL_20;
  }
  int v5 = HasSrctex;
  unsigned int v6 = 0;
  unint64_t v7 = 0;
  while (1)
  {
    uint64_t v8 = glpCallNodeGetArg(a1, v6);
    unint64_t v9 = glpASTNodeGetSaFlags(v8) & 0x1F;
    if (v9 != 2) {
      break;
    }
LABEL_13:
    if (v3 == ++v6) {
      goto LABEL_20;
    }
  }
  if (!v5
    || (uint64_t v10 = glpCallNodeGetArg(a1, v6),
        uint64_t v11 = (unsigned int *)glpASTNodeGetSaType(v10),
        glpTypeGetKind(v11))
    || (uint64_t v12 = glpCallNodeGetArg(a1, v6),
        uint64_t v13 = glpASTNodeGetSaType(v12),
        unsigned int v14 = glpPrimitiveTypeGetPrimitiveType(v13),
        glpPrimitiveTypeGetCategory(v14) != 4))
  {
    if (v9 > v7 && v9 != 31) {
      unint64_t v7 = v9;
    }
    goto LABEL_13;
  }
  unint64_t v7 = v9;
LABEL_20:
  int Opcode = glpPPStreamOpNodeGetOpcode(a1);
  uint64_t result = 16;
  if ((Opcode - 92) >= 2 && Opcode != 131)
  {
    if (Opcode == 100) {
      return 8;
    }
    else {
      return v7;
    }
  }
  return result;
}

uint64_t glpSAInlinePPStreamOpFixup(uint64_t a1, uint64_t a2)
{
  if (glpCompilerDoesTrackPrecision(a1))
  {
    unint64_t v3 = glpASTNodeGetSaFlags(a2) & 0xFFFFFFFFFFFFFFE0;
    uint64_t PrecisionFlagsFromArgs = getPrecisionFlagsFromArgs(a2);
    glpASTNodeSetSaFlags(a2, v3 | PrecisionFlagsFromArgs);
  }
  return a2;
}

uint64_t pushdownPrecisionInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 1;
  }
  uint64_t v6 = a2;
  while (1)
  {
    int Kind = glpASTNodeGetKind(v6);
    if (Kind > 64)
    {
      if (Kind > 77)
      {
        switch(Kind)
        {
          case 'N':
            return 1;
          case 'Q':
            uint64_t SaType = (unsigned int *)glpASTNodeGetSaType(v6);
            if (!glpCompilerDoesTypeRequirePrecision(a1, SaType) || (glpASTNodeGetSaFlags(v6) & 0x1F) != 0) {
              return 1;
            }
            glpLValueNodeGetVariableExtra(v6);
            break;
          case 'R':
            uint64_t Base = glpRValueNodeGetBase(v6);
            goto LABEL_26;
          case 'T':
            if (a4
              || (uint64_t v25 = (unsigned int *)glpASTNodeGetSaType(v6), glpCompilerDoesTypeRequirePrecision(a1, v25)))
            {
              switch(glpPPStreamOpNodeGetOpcode(v6))
              {
                case 2u:
                case 3u:
                case 4u:
                case 5u:
                case 6u:
                case 7u:
                case 0xCu:
                case 0x10u:
                case 0x12u:
                case 0x13u:
                case 0x15u:
                case 0x16u:
                case 0x17u:
                case 0x19u:
                case 0x1Au:
                case 0x1Bu:
                case 0x1Cu:
                case 0x1Du:
                case 0x1Eu:
                case 0x1Fu:
                case 0x20u:
                case 0x21u:
                case 0x22u:
                case 0x27u:
                case 0x2Cu:
                case 0x2Du:
                case 0x2Eu:
                case 0x2Fu:
                case 0x31u:
                case 0x32u:
                case 0x33u:
                case 0x34u:
                case 0x35u:
                case 0x36u:
                case 0x38u:
                case 0x3Au:
                case 0x3Bu:
                case 0x3Cu:
                case 0x3Du:
                case 0x3Fu:
                case 0x40u:
                case 0x50u:
                case 0x51u:
                case 0x69u:
                case 0x70u:
                case 0x71u:
                case 0x7Bu:
                case 0x7Cu:
                case 0x7Du:
                case 0x7Eu:
                case 0x7Fu:
                case 0x80u:
                case 0x81u:
                case 0x84u:
                case 0x85u:
                case 0x86u:
                case 0x89u:
                case 0x8Au:
                case 0x8Bu:
                case 0x90u:
                case 0x91u:
                case 0x92u:
                case 0x93u:
                case 0x94u:
                case 0x95u:
                  if (glpCallNodeGetArgCount(v6))
                  {
                    unsigned int v26 = 0;
                    do
                    {
                      uint64_t v27 = glpCallNodeGetArg(v6, v26);
                      pushdownPrecisionInternal(a1, v27, a3, a4);
                      ++v26;
                    }
                    while (v26 < glpCallNodeGetArgCount(v6));
                  }
                  goto LABEL_54;
                default:
                  if (!a4) {
                    goto LABEL_58;
                  }
                  goto LABEL_54;
              }
            }
            return 1;
          default:
            goto LABEL_58;
        }
        goto LABEL_56;
      }
      switch(Kind)
      {
        case 'A':
          uint64_t Base = glpExpressionStatementNodeGetExpr(v6);
          break;
        case 'C':
          Ifuint64_t Statement = glpIfStatementNodeGetIfStatement(v6);
          pushdownPrecisionInternal(a1, IfStatement, a3, a4);
          uint64_t Base = glpIfStatementNodeGetElseStatement(v6);
          break;
        case 'B':
          if (glpBlockNodeGetStatementCount(v6))
          {
            unsigned int v21 = 0;
            do
            {
              uint64_t Statement = glpBlockNodeGetStatement(v6, v21);
              pushdownPrecisionInternal(a1, Statement, a3, a4);
              ++v21;
            }
            while (v21 < glpBlockNodeGetStatementCount(v6));
          }
          return 1;
        default:
          goto LABEL_58;
      }
      goto LABEL_26;
    }
    if (Kind > 38) {
      break;
    }
    if (Kind)
    {
      if (Kind != 16)
      {
        if (Kind == 3)
        {
          char v23 = (unsigned int *)glpASTNodeGetSaType(v6);
          if (glpCompilerDoesTypeRequirePrecision(a1, v23) && (glpASTNodeGetSaFlags(v6) & 0x1F) == 0)
          {
            glpSAValidateConstPrecisionConversion(a1, v6, a3);
            goto LABEL_56;
          }
          return 1;
        }
        goto LABEL_58;
      }
      uint64_t v11 = (unsigned int *)glpASTNodeGetSaType(v6);
      if (glpCompilerDoesTypeRequirePrecision(a1, v11) && (glpASTNodeGetSaFlags(v6) & 0x1F) == 0)
      {
        uint64_t SaFlags = glpASTNodeGetSaFlags(v6);
        glpASTNodeSetSaFlags(v6, SaFlags & 0xFFFFFFFFFFFFFFE0 | a3);
      }
    }
    else
    {
      uint64_t v16 = (unsigned int *)glpASTNodeGetSaType(v6);
      if (glpCompilerDoesTypeRequirePrecision(a1, v16) && (glpASTNodeGetSaFlags(v6) & 0x1F) == 0)
      {
        uint64_t v17 = glpASTNodeGetSaFlags(v6);
        glpASTNodeSetSaFlags(v6, v17 & 0xFFFFFFFFFFFFFFE0 | a3);
        glpTypeConversionNodeSetToPrecision(v6, a3);
      }
    }
    uint64_t Base = glpUnaryOperatorNodeGetExpr(v6);
LABEL_26:
    uint64_t v6 = Base;
    if (!Base) {
      return 1;
    }
  }
  if (Kind == 46)
  {
    uint64_t v13 = (unsigned int *)glpASTNodeGetSaType(v6);
    if (glpCompilerDoesTypeRequirePrecision(a1, v13) && (glpASTNodeGetSaFlags(v6) & 0x1F) == 0)
    {
      uint64_t Extra = glpVariableDeclarationNodeGetExtra(v6);
      *(void *)(Extra + 48) = *(void *)(Extra + 48) & 0xFFFFFFFFFFFFFFE0 | a3;
      uint64_t v15 = glpASTNodeGetSaFlags(v6);
      glpASTNodeSetSaFlags(v6, v15 & 0xFFFFFFFFFFFFFFE0 | a3);
    }
    uint64_t Base = glpVariableDeclarationNodeGetInitializer(v6);
    goto LABEL_26;
  }
  if (Kind == 39)
  {
    uint64_t Lhs = glpBinaryOperatorNodeGetLhs(v6);
    pushdownPrecisionInternal(a1, Lhs, a3, a4);
    uint64_t Rhs = glpBinaryOperatorNodeGetRhs(v6);
    pushdownPrecisionInternal(a1, Rhs, a3, a4);
    goto LABEL_54;
  }
  if (Kind != 43) {
LABEL_58:
  }
    abort();
  if (glpCommaExprNodeGetExprCount(v6))
  {
    unsigned int v19 = 0;
    do
    {
      uint64_t Expr = glpCommaExprNodeGetExpr(v6, v19);
      pushdownPrecisionInternal(a1, Expr, a3, 1);
      ++v19;
    }
    while (v19 < glpCommaExprNodeGetExprCount(v6));
  }
LABEL_54:
  uint64_t v30 = (unsigned int *)glpASTNodeGetSaType(v6);
  if (glpCompilerDoesTypeRequirePrecision(a1, v30) && (glpASTNodeGetSaFlags(v6) & 0x1F) == 0)
  {
LABEL_56:
    uint64_t v31 = glpASTNodeGetSaFlags(v6);
    glpASTNodeSetSaFlags(v6, v31 & 0xFFFFFFFFFFFFFFE0 | a3);
  }
  return 1;
}

uint64_t glpPushdownPrecision(uint64_t a1, uint64_t a2, char a3)
{
  return 1;
}

unint64_t glp_serialized_integer64_control(unint64_t result)
{
  if (result >= 0x80)
  {
    unint64_t v1 = result & 0xFF00000000000000;
    uint64_t v2 = (result & 0xFF00000000000000) != 0 && HIBYTE(result) != 255;
    unsigned int v3 = ((v1 ^ (v2 << 63 >> 63)) == 0xFF00000000000000) | 0xFFFFFF8E;
    if ((v2 & 1) == 0)
    {
      unint64_t v4 = 0xFF00000000000000;
      do
      {
        unsigned int v3 = v3 & 0xFFFFFFF1 | (2 * (((v3 + 14) >> 1) & 7));
        if (v4 >> 8 == 255) {
          break;
        }
        v1 >>= 8;
        unint64_t v5 = result & (v4 >> 8);
        v4 >>= 8;
      }
      while (v5 == v1);
    }
    return v3 & 0xFFFFFF8F;
  }
  return result;
}

uint64_t glp_serialized_integer32_control(uint64_t result)
{
  if ((int)result >= 0) {
    int v1 = -128;
  }
  else {
    int v1 = -127;
  }
  unsigned int v2 = result ^ ((int)result >> 31);
  if (HIBYTE(v2)) {
    int v3 = 6;
  }
  else {
    int v3 = 4;
  }
  if (v2 >= 0x10000) {
    int v4 = v3;
  }
  else {
    int v4 = 2 * (v2 > 0xFF);
  }
  unsigned int v5 = v4 | v1;
  if (result >= 0x80) {
    return v5;
  }
  else {
    return result;
  }
}

uint64_t glpInitSerialContext(void *a1, _OWORD *a2)
{
  long long v3 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v3;
  a1[4] = 1024;
  a1[5] = ((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 1024, "Vector Storage (uint8_t)");
  a1[6] = glpMakeStringHash(a1);
  a1[7] = 0;
  uint64_t result = glpMakePointerHash(a1);
  a1[8] = result;
  return result;
}

uint64_t glpDestroySerialContext(uint64_t *a1, int a2)
{
  glpDestroyPointerHash(a1[8]);
  uint64_t result = glpDestroyStringHash(a1[6]);
  if (a2)
  {
    unsigned int v5 = (uint64_t (*)(uint64_t, uint64_t))a1[3];
    uint64_t v6 = *a1;
    uint64_t v7 = a1[5];
    return v5(v6, v7);
  }
  return result;
}

uint64_t serialize_pointer(void *a1, unint64_t a2)
{
  if (!a2)
  {
    uint64_t v13 = (_DWORD *)a1 + 9;
    uint64_t v21 = *((unsigned int *)a1 + 9);
    int v22 = v21 + 1;
    int v23 = *((_DWORD *)a1 + 8);
    if ((int)v21 + 1 <= v23)
    {
      unsigned int v26 = (char *)a1[5];
      int v27 = *((_DWORD *)a1 + 9);
    }
    else
    {
      if (v23 <= 1) {
        int v23 = 1;
      }
      int v24 = 2 * v23;
      if (v24 <= v22) {
        uint64_t v25 = v22;
      }
      else {
        uint64_t v25 = v24;
      }
      unsigned int v26 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v25, "Vector Storage (uint8_t, growth)");
      memcpy(v26, (const void *)a1[5], *((unsigned int *)a1 + 9));
      ((void (*)(void, void))a1[3])(*a1, a1[5]);
      *((_DWORD *)a1 + 8) = v25;
      a1[5] = v26;
      int v27 = *((_DWORD *)a1 + 9);
    }
    memmove(&v26[v21 + 1], &v26[v21], (v27 - v21));
    uint64_t result = 0;
    *(unsigned char *)(a1[5] + v21) = 0;
LABEL_41:
    int v40 = 1;
    goto LABEL_52;
  }
  int v4 = glpPointerHashGet(a1[8], a2);
  if (!v4)
  {
    uint64_t v28 = a1[8];
    uint64_t v29 = a1[7] + 1;
    a1[7] = v29;
    glpPointerHashPut(v28, a2, v29, v5);
    uint64_t v13 = (_DWORD *)a1 + 9;
    uint64_t v30 = *((unsigned int *)a1 + 9);
    int v31 = v30 + 1;
    int v32 = *((_DWORD *)a1 + 8);
    if ((int)v30 + 1 <= v32)
    {
      uint64_t v35 = (char *)a1[5];
      int v36 = *((_DWORD *)a1 + 9);
    }
    else
    {
      if (v32 <= 1) {
        int v32 = 1;
      }
      int v33 = 2 * v32;
      if (v33 <= v31) {
        uint64_t v34 = v31;
      }
      else {
        uint64_t v34 = v33;
      }
      uint64_t v35 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v34, "Vector Storage (uint8_t, growth)");
      memcpy(v35, (const void *)a1[5], *((unsigned int *)a1 + 9));
      ((void (*)(void, void))a1[3])(*a1, a1[5]);
      *((_DWORD *)a1 + 8) = v34;
      a1[5] = v35;
      int v36 = *((_DWORD *)a1 + 9);
    }
    memmove(&v35[v30 + 1], &v35[v30], (v36 - v30));
    int v40 = 1;
    *(unsigned char *)(a1[5] + v30) = 1;
    uint64_t result = 1;
LABEL_52:
    *v13 += v40;
    return result;
  }
  int v6 = v4 + 1;
  if (v4 + 1 >= 0) {
    int v7 = -128;
  }
  else {
    int v7 = -127;
  }
  unsigned int v8 = v6 ^ (v6 >> 31);
  if (HIBYTE(v8)) {
    int v9 = 6;
  }
  else {
    int v9 = 4;
  }
  if (v8 >= 0x10000) {
    int v10 = v9;
  }
  else {
    int v10 = 2 * (v8 > 0xFF);
  }
  int v11 = v10 | v7;
  if (v6 < 0x80) {
    unsigned int v12 = v4 + 1;
  }
  else {
    unsigned int v12 = v11;
  }
  uint64_t v13 = (_DWORD *)a1 + 9;
  uint64_t v14 = *((unsigned int *)a1 + 9);
  int v15 = v14 + 1;
  int v16 = *((_DWORD *)a1 + 8);
  if ((int)v14 + 1 <= v16)
  {
    unsigned int v19 = (char *)a1[5];
    int v20 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v16 <= 1) {
      int v16 = 1;
    }
    int v17 = 2 * v16;
    if (v17 <= v15) {
      uint64_t v18 = v15;
    }
    else {
      uint64_t v18 = v17;
    }
    unsigned int v19 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v18, "Vector Storage (uint8_t, growth)");
    memcpy(v19, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v18;
    a1[5] = v19;
    int v20 = *((_DWORD *)a1 + 9);
  }
  memmove(&v19[v14 + 1], &v19[v14], (v20 - v14));
  *(unsigned char *)(a1[5] + v14) = v12;
  int v37 = *((_DWORD *)a1 + 9);
  unsigned int v38 = v37 + 1;
  *((_DWORD *)a1 + 9) = v37 + 1;
  if ((v12 & 0x80) != 0)
  {
    switch((v12 >> 1) & 7)
    {
      case 0u:
        unsigned int v41 = v37 + 2;
        int v42 = *((_DWORD *)a1 + 8);
        if (v41 <= v42)
        {
          uint64_t v45 = (char *)a1[5];
          unsigned int v46 = v38;
        }
        else
        {
          if (v42 <= 1) {
            int v42 = 1;
          }
          int v43 = 2 * v42;
          if (v43 <= (int)v41) {
            uint64_t v44 = v41;
          }
          else {
            uint64_t v44 = v43;
          }
          uint64_t v45 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v44, "Vector Storage (uint8_t, growth)");
          memcpy(v45, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v44;
          a1[5] = v45;
          unsigned int v46 = *((_DWORD *)a1 + 9);
        }
        memmove(&v45[v38 + 1], &v45[v38], v46 - v38);
        uint64_t result = 0;
        *(unsigned char *)(a1[5] + v38) = v6;
        goto LABEL_41;
      case 1u:
        unsigned int v59 = v37 + 3;
        int v60 = *((_DWORD *)a1 + 8);
        if (v59 <= v60)
        {
          __n128 v63 = (char *)a1[5];
          unsigned int v64 = v38;
        }
        else
        {
          if (v60 <= 1) {
            int v60 = 1;
          }
          int v61 = 2 * v60;
          if (v61 <= (int)v59) {
            uint64_t v62 = v59;
          }
          else {
            uint64_t v62 = v61;
          }
          __n128 v63 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v62, "Vector Storage (uint8_t, growth)");
          memcpy(v63, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v62;
          a1[5] = v63;
          unsigned int v64 = *((_DWORD *)a1 + 9);
        }
        memmove(&v63[v38 + 1], &v63[v38], v64 - v38);
        uint64_t result = 0;
        *(_WORD *)(a1[5] + v38) = v6;
        int v40 = 2;
        goto LABEL_52;
      case 2u:
        unsigned int v47 = v37 + 4;
        int v48 = *((_DWORD *)a1 + 8);
        if (v47 <= v48)
        {
          unsigned int v51 = (char *)a1[5];
          unsigned int v52 = v38;
        }
        else
        {
          if (v48 <= 1) {
            int v48 = 1;
          }
          int v49 = 2 * v48;
          if (v49 <= (int)v47) {
            uint64_t v50 = v47;
          }
          else {
            uint64_t v50 = v49;
          }
          unsigned int v51 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v50, "Vector Storage (uint8_t, growth)");
          memcpy(v51, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v50;
          a1[5] = v51;
          unsigned int v52 = *((_DWORD *)a1 + 9);
        }
        memmove(&v51[v38 + 1], &v51[v38], v52 - v38);
        uint64_t result = 0;
        uint64_t v65 = a1[5] + v38;
        *(unsigned char *)(v65 + 2) = BYTE2(v6);
        *(_WORD *)uint64_t v65 = v6;
        int v40 = 3;
        goto LABEL_52;
      case 3u:
        unsigned int v53 = v37 + 5;
        int v54 = *((_DWORD *)a1 + 8);
        if (v53 <= v54)
        {
          __n128 v57 = (char *)a1[5];
          unsigned int v58 = v38;
        }
        else
        {
          if (v54 <= 1) {
            int v54 = 1;
          }
          int v55 = 2 * v54;
          if (v55 <= (int)v53) {
            uint64_t v56 = v53;
          }
          else {
            uint64_t v56 = v55;
          }
          __n128 v57 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v56, "Vector Storage (uint8_t, growth)");
          memcpy(v57, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v56;
          a1[5] = v57;
          unsigned int v58 = *((_DWORD *)a1 + 9);
        }
        memmove(&v57[v38 + 1], &v57[v38], v58 - v38);
        uint64_t result = 0;
        *(_DWORD *)(a1[5] + v38) = v6;
        int v40 = 4;
        goto LABEL_52;
      default:
        return 0;
    }
  }
  return 0;
}

uint64_t serialize_GLPString(void *a1, const char *a2, uint64_t a3)
{
  if ((int)a3 >= 0) {
    int v6 = -128;
  }
  else {
    int v6 = -127;
  }
  unsigned int v7 = a3 ^ ((int)a3 >> 31);
  if (HIBYTE(v7)) {
    int v8 = 6;
  }
  else {
    int v8 = 4;
  }
  if (v7 >= 0x10000) {
    int v9 = v8;
  }
  else {
    int v9 = 2 * (v7 > 0xFF);
  }
  int v10 = v9 | v6;
  if (a3 >= 0x80) {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v11 = a3;
  }
  int v12 = *((_DWORD *)a1 + 8);
  uint64_t v13 = *((unsigned int *)a1 + 9);
  int v14 = v13 + 1;
  if ((int)v13 + 1 <= v12)
  {
    int v17 = (char *)a1[5];
    int v18 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v12 <= 1) {
      int v12 = 1;
    }
    int v15 = 2 * v12;
    if (v15 <= v14) {
      uint64_t v16 = v14;
    }
    else {
      uint64_t v16 = v15;
    }
    int v17 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v16, "Vector Storage (uint8_t, growth)");
    memcpy(v17, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v16;
    a1[5] = v17;
    int v18 = *((_DWORD *)a1 + 9);
  }
  memmove(&v17[v13 + 1], &v17[v13], (v18 - v13));
  *(unsigned char *)(a1[5] + v13) = v11;
  int v19 = *((_DWORD *)a1 + 9);
  unsigned int v20 = v19 + 1;
  *((_DWORD *)a1 + 9) = v19 + 1;
  if ((v11 & 0x80) != 0)
  {
    switch((v11 >> 1) & 7)
    {
      case 0u:
        unsigned int v21 = v19 + 2;
        int v22 = *((_DWORD *)a1 + 8);
        if (v21 <= v22)
        {
          uint64_t v25 = (char *)a1[5];
          unsigned int v26 = v20;
        }
        else
        {
          if (v22 <= 1) {
            int v22 = 1;
          }
          int v23 = 2 * v22;
          if (v23 <= (int)v21) {
            uint64_t v24 = v21;
          }
          else {
            uint64_t v24 = v23;
          }
          uint64_t v25 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v24, "Vector Storage (uint8_t, growth)");
          memcpy(v25, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v24;
          a1[5] = v25;
          unsigned int v26 = *((_DWORD *)a1 + 9);
        }
        memmove(&v25[v20 + 1], &v25[v20], v26 - v20);
        *(unsigned char *)(a1[5] + v20) = a3;
        int v45 = 1;
        goto LABEL_59;
      case 1u:
        unsigned int v39 = v19 + 3;
        int v40 = *((_DWORD *)a1 + 8);
        if (v39 <= v40)
        {
          int v43 = (char *)a1[5];
          unsigned int v44 = v20;
        }
        else
        {
          if (v40 <= 1) {
            int v40 = 1;
          }
          int v41 = 2 * v40;
          if (v41 <= (int)v39) {
            uint64_t v42 = v39;
          }
          else {
            uint64_t v42 = v41;
          }
          int v43 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v42, "Vector Storage (uint8_t, growth)");
          memcpy(v43, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v42;
          a1[5] = v43;
          unsigned int v44 = *((_DWORD *)a1 + 9);
        }
        memmove(&v43[v20 + 1], &v43[v20], v44 - v20);
        *(_WORD *)(a1[5] + v20) = a3;
        int v45 = 2;
        goto LABEL_59;
      case 2u:
        unsigned int v27 = v19 + 4;
        int v28 = *((_DWORD *)a1 + 8);
        if (v27 <= v28)
        {
          int v31 = (char *)a1[5];
          unsigned int v32 = v20;
        }
        else
        {
          if (v28 <= 1) {
            int v28 = 1;
          }
          int v29 = 2 * v28;
          if (v29 <= (int)v27) {
            uint64_t v30 = v27;
          }
          else {
            uint64_t v30 = v29;
          }
          int v31 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v30, "Vector Storage (uint8_t, growth)");
          memcpy(v31, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v30;
          a1[5] = v31;
          unsigned int v32 = *((_DWORD *)a1 + 9);
        }
        memmove(&v31[v20 + 1], &v31[v20], v32 - v20);
        uint64_t v46 = a1[5] + v20;
        *(unsigned char *)(v46 + 2) = BYTE2(a3);
        *(_WORD *)uint64_t v46 = a3;
        int v45 = 3;
        goto LABEL_59;
      case 3u:
        unsigned int v33 = v19 + 5;
        int v34 = *((_DWORD *)a1 + 8);
        if (v33 <= v34)
        {
          int v37 = (char *)a1[5];
          unsigned int v38 = v20;
        }
        else
        {
          if (v34 <= 1) {
            int v34 = 1;
          }
          int v35 = 2 * v34;
          if (v35 <= (int)v33) {
            uint64_t v36 = v33;
          }
          else {
            uint64_t v36 = v35;
          }
          int v37 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v36, "Vector Storage (uint8_t, growth)");
          memcpy(v37, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v36;
          a1[5] = v37;
          unsigned int v38 = *((_DWORD *)a1 + 9);
        }
        memmove(&v37[v20 + 1], &v37[v20], v38 - v20);
        *(_DWORD *)(a1[5] + v20) = a3;
        int v45 = 4;
LABEL_59:
        *((_DWORD *)a1 + 9) += v45;
        break;
      default:
        break;
    }
  }
  unsigned int v47 = (const void *)glpStringHashCache(a1[6], a2, a3, (uint64_t)a2);
  uint64_t result = serialize_pointer(a1, (unint64_t)v47);
  if (result)
  {
    int v49 = *((_DWORD *)a1 + 8);
    uint64_t v50 = *((unsigned int *)a1 + 9);
    int v51 = v50 + a3;
    if ((int)v50 + (int)a3 <= v49)
    {
      int v54 = (char *)a1[5];
      int v55 = *((_DWORD *)a1 + 9);
    }
    else
    {
      if (v49 <= 1) {
        int v49 = 1;
      }
      int v52 = 2 * v49;
      if (v52 <= v51) {
        uint64_t v53 = v51;
      }
      else {
        uint64_t v53 = v52;
      }
      int v54 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v53, "Vector Storage (uint8_t, growth)");
      memcpy(v54, (const void *)a1[5], *((unsigned int *)a1 + 9));
      ((void (*)(void, void))a1[3])(*a1, a1[5]);
      *((_DWORD *)a1 + 8) = v53;
      a1[5] = v54;
      int v55 = *((_DWORD *)a1 + 9);
    }
    memmove(&v54[v50 + 1], &v54[v50], (v55 - v50));
    uint64_t result = (uint64_t)memcpy((void *)(a1[5] + v50), v47, a3);
    *((_DWORD *)a1 + 9) += a3;
  }
  return result;
}

char *deserialErrorString(unsigned int a1)
{
  if (a1 >= 7) {
    abort();
  }
  return off_264D9A0E0[a1];
}

uint64_t glpInitDeserialContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(void *)(a1 + 200) = a2;
  *(void *)(a1 + 208) = 4096;
  uint64_t result = (*(uint64_t (**)(void, uint64_t, const char *))(a2 + 8))(*(void *)a2, 0x8000, "Vector Storage (void *)");
  *(void *)(a1 + 216) = result;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = a3;
  *(void *)(a1 + 248) = a4;
  *(_DWORD *)(a1 + 256) = a5;
  *(_DWORD *)(a1 + 260) = 0;
  return result;
}

uint64_t glpReInitDeserialContext(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)(result + 212) = 0;
  *(void *)(result + 248) = a2;
  *(_DWORD *)(result + 256) = a3;
  *(_DWORD *)(result + 260) = 0;
  return result;
}

uint64_t glpDestroyDeserialContext(void *a1)
{
  for (unsigned int i = (void *)a1[28]; i; unsigned int i = (void *)a1[28])
  {
    a1[28] = *i;
    (*(void (**)(void))(a1[25] + 24))(*(void *)a1[25]);
  }
  long long v3 = (uint64_t *)a1[25];
  int v4 = (uint64_t (*)(uint64_t, uint64_t))v3[3];
  uint64_t v5 = *v3;
  uint64_t v6 = a1[27];

  return v4(v5, v6);
}

float deserialize_float(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 260);
  if (v1 + 4 > (unint64_t)*(unsigned int *)(a1 + 256)) {
    glpDeserialError(a1, 1u);
  }
  float result = *(float *)(*(void *)(a1 + 248) + v1);
  *(_DWORD *)(a1 + 260) = v1 + 4;
  return result;
}

double deserialize_double(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 260);
  if (v1 + 8 > (unint64_t)*(unsigned int *)(a1 + 256)) {
    glpDeserialError(a1, 1u);
  }
  double result = *(double *)(*(void *)(a1 + 248) + v1);
  *(_DWORD *)(a1 + 260) = v1 + 8;
  return result;
}

void *deserialize_pointer(void *result, uint64_t a2, void *a3)
{
  long long v3 = result;
  uint64_t v4 = *((unsigned int *)result + 65);
  unint64_t v5 = *((unsigned int *)result + 64);
  if (v4 >= v5) {
LABEL_61:
  }
    glpDeserialError((uint64_t)result, 1u);
  uint64_t v8 = result[31];
  int v9 = *(char *)(v8 + v4);
  unint64_t v10 = *(unsigned __int8 *)(v8 + v4);
  uint64_t v11 = v4 + 1;
  *((_DWORD *)result + 65) = v4 + 1;
  if (v9 < 0)
  {
    uint64_t v12 = (v10 >> 1) & 7;
    switch(v12)
    {
      case 1:
        if (v4 + 3 > v5) {
          goto LABEL_61;
        }
        LODWORD(v8) = *(unsigned __int16 *)(v8 + v11);
        unsigned int v13 = v4 + 3;
        break;
      case 2:
        unsigned int v13 = v4 + 4;
        if (v13 > v5) {
          goto LABEL_61;
        }
        LODWORD(v8) = *(unsigned __int16 *)(v8 + v11) | (*(unsigned __int8 *)(v8 + v11 + 2) << 16);
        break;
      case 3:
        if (v4 + 5 > v5) {
          goto LABEL_61;
        }
        LODWORD(v8) = *(_DWORD *)(v8 + v11);
        unsigned int v13 = v4 + 5;
        break;
      case 4:
        if (v4 + 5 > v5) {
          goto LABEL_61;
        }
        LODWORD(v8) = *(_DWORD *)(v8 + v11);
        *((_DWORD *)result + 65) = v4 + 5;
        if ((int)v4 + 5 >= v5) {
          goto LABEL_61;
        }
        unsigned int v13 = v4 + 6;
        break;
      case 5:
        if (v4 + 5 > v5) {
          goto LABEL_61;
        }
        LODWORD(v8) = *(_DWORD *)(v8 + v11);
        uint64_t v14 = (v4 + 5);
        *((_DWORD *)result + 65) = v14;
        if (v14 + 2 > v5) {
          goto LABEL_61;
        }
        unsigned int v13 = v4 + 7;
        break;
      case 6:
        if (v4 + 5 > v5) {
          goto LABEL_61;
        }
        LODWORD(v8) = *(_DWORD *)(v8 + v11);
        *((_DWORD *)result + 65) = v4 + 5;
        unsigned int v13 = v4 + 8;
        if (v13 > v5) {
          goto LABEL_61;
        }
        break;
      case 7:
        if (v4 + 9 > v5) {
          goto LABEL_61;
        }
        uint64_t v8 = *(void *)(v8 + v11);
        unsigned int v13 = v4 + 9;
        break;
      default:
        if (v11 >= v5) {
          goto LABEL_61;
        }
        LODWORD(v8) = *(unsigned __int8 *)(v8 + v11);
        unsigned int v13 = v4 + 2;
        break;
    }
    *((_DWORD *)result + 65) = v13;
    if (v9) {
      uint64_t v15 = -256 << (8 * v12);
    }
    else {
      LODWORD(v15) = 0;
    }
    LODWORD(v10) = v8 | v15;
  }
  if (v10 == 1)
  {
    uint64_t v16 = result[29];
    if (v16)
    {
      result[29] = *(void *)v16;
    }
    else
    {
      uint64_t v16 = (*(uint64_t (**)(void, uint64_t, const char *))(result[25] + 8))(*(void *)result[25], 32, "FutureStack");
      *(void *)(v16 + 8) = 0;
      *(void *)(v16 + 16) = 0;
      *(void *)uint64_t v16 = 0;
    }
    *(void *)uint64_t v16 = v3[28];
    int v27 = *((_DWORD *)v3 + 52);
    uint64_t v28 = *((unsigned int *)v3 + 53);
    *(_DWORD *)(v16 + 24) = v28;
    v3[28] = v16;
    if ((int)v28 + 1 <= v27)
    {
      unsigned int v32 = (char *)v3[27];
      int v33 = v28;
    }
    else
    {
      if (v27 <= 1) {
        int v27 = 1;
      }
      int v29 = 2 * v27;
      if (v29 <= (int)v28 + 1) {
        unsigned int v30 = v28 + 1;
      }
      else {
        unsigned int v30 = v29;
      }
      int v31 = (void *)v3[25];
      unsigned int v32 = (char *)((uint64_t (*)(void, uint64_t, const char *))v31[1])(*v31, 8 * v30, "Vector Storage (void *, growth)");
      memcpy(v32, (const void *)v3[27], 8 * *((unsigned int *)v3 + 53));
      ((void (*)(void, void))v31[3])(*v31, v3[27]);
      *((_DWORD *)v3 + 52) = v30;
      v3[27] = v32;
      int v33 = *((_DWORD *)v3 + 53);
    }
    memmove(&v32[8 * v28 + 8], &v32[8 * v28], 8 * (v33 - v28));
    *(void *)(v3[27] + 8 * v28) = 0;
    ++*((_DWORD *)v3 + 53);
    double result = (void *)(*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
    *(void *)(v3[27] + 8 * *(unsigned int *)(v16 + 24)) = result;
    uint64_t v34 = *(unsigned int *)(v16 + 12);
    if (v34)
    {
      uint64_t v35 = 0;
      uint64_t v36 = 8 * v34;
      do
      {
        **(void **)(*(void *)(v16 + 16) + v35) = result;
        v35 += 8;
      }
      while (v36 != v35);
    }
    uint64_t v37 = *(void *)v16;
    *(_DWORD *)(v16 + 12) = 0;
    *(_DWORD *)(v16 + 24) = 0;
    *(void *)uint64_t v16 = v3[29];
    v3[28] = v37;
    v3[29] = v16;
    *a3 = result;
  }
  else if (v10)
  {
    unsigned int v17 = v10 - 2;
    if ((v10 - 2) < *((_DWORD *)result + 53) && (uint64_t v18 = *(void *)(result[27] + 8 * v17)) != 0)
    {
      *a3 = v18;
    }
    else
    {
      int v19 = (char *)(result + 28);
      do
      {
        int v19 = *(char **)v19;
        if (!v19) {
          glpDeserialError((uint64_t)result, 2u);
        }
      }
      while (*((_DWORD *)v19 + 6) != v17);
      int v20 = *((_DWORD *)v19 + 2);
      uint64_t v21 = *((unsigned int *)v19 + 3);
      if ((int)v21 + 1 <= v20)
      {
        uint64_t v25 = (char *)*((void *)v19 + 2);
        int v26 = *((_DWORD *)v19 + 3);
      }
      else
      {
        if (v20 <= 1) {
          int v20 = 1;
        }
        int v22 = 2 * v20;
        if (v22 <= (int)v21 + 1) {
          unsigned int v23 = v21 + 1;
        }
        else {
          unsigned int v23 = v22;
        }
        uint64_t v24 = (void *)result[25];
        uint64_t v25 = (char *)((uint64_t (*)(void, uint64_t, const char *))v24[1])(*v24, 8 * v23, "Vector Storage (void**, growth)");
        memcpy(v25, *((const void **)v19 + 2), 8 * *((unsigned int *)v19 + 3));
        ((void (*)(void, void))v24[3])(*v24, *((void *)v19 + 2));
        *((_DWORD *)v19 + 2) = v23;
        *((void *)v19 + 2) = v25;
        int v26 = *((_DWORD *)v19 + 3);
      }
      double result = memmove(&v25[8 * v21 + 8], &v25[8 * v21], 8 * (v26 - v21));
      *(void *)(*((void *)v19 + 2) + 8 * v21) = a3;
      ++*((_DWORD *)v19 + 3);
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void glpDeserialError(uint64_t a1, unsigned int a2)
{
  CC_SHA1(*(const void **)(a1 + 248), *(_DWORD *)(a1 + 256), md);
  char v4 = deserialErrorString(a2);
  glpSetCrashLogMessagef("GLProgrammability: deserial error (%s) at offset %u into data of length %u with SHA1 %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x", md[10], md[11], md[12], md[13], md[14], md[15], md[16], v4);
  _longjmp((int *)a1, a2);
}

uint64_t deserialize_GLPString(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 260);
  unint64_t v2 = *(unsigned int *)(a1 + 256);
  if (v1 >= v2) {
LABEL_32:
  }
    glpDeserialError(a1, 1u);
  uint64_t v3 = *(void *)(a1 + 248);
  int v4 = *(char *)(v3 + v1);
  unint64_t v5 = *(unsigned __int8 *)(v3 + v1);
  uint64_t v6 = v1 + 1;
  *(_DWORD *)(a1 + 260) = v1 + 1;
  if (v4 < 0)
  {
    uint64_t v7 = (v5 >> 1) & 7;
    switch(v7)
    {
      case 1:
        if (v1 + 3 > v2) {
          goto LABEL_32;
        }
        LODWORD(v3) = *(unsigned __int16 *)(v3 + v6);
        unsigned int v8 = v1 + 3;
        break;
      case 2:
        unsigned int v8 = v1 + 4;
        if (v8 > v2) {
          goto LABEL_32;
        }
        LODWORD(v3) = *(unsigned __int16 *)(v3 + v6) | (*(unsigned __int8 *)(v3 + v6 + 2) << 16);
        break;
      case 3:
        if (v1 + 5 > v2) {
          goto LABEL_32;
        }
        LODWORD(v3) = *(_DWORD *)(v3 + v6);
        unsigned int v8 = v1 + 5;
        break;
      case 4:
        if (v1 + 5 > v2) {
          goto LABEL_32;
        }
        LODWORD(v3) = *(_DWORD *)(v3 + v6);
        *(_DWORD *)(a1 + 260) = v1 + 5;
        if ((int)v1 + 5 >= v2) {
          goto LABEL_32;
        }
        unsigned int v8 = v1 + 6;
        break;
      case 5:
        if (v1 + 5 > v2) {
          goto LABEL_32;
        }
        LODWORD(v3) = *(_DWORD *)(v3 + v6);
        uint64_t v9 = (v1 + 5);
        *(_DWORD *)(a1 + 260) = v9;
        if (v9 + 2 > v2) {
          goto LABEL_32;
        }
        unsigned int v8 = v1 + 7;
        break;
      case 6:
        if (v1 + 5 > v2) {
          goto LABEL_32;
        }
        LODWORD(v3) = *(_DWORD *)(v3 + v6);
        *(_DWORD *)(a1 + 260) = v1 + 5;
        unsigned int v8 = v1 + 8;
        if (v8 > v2) {
          goto LABEL_32;
        }
        break;
      case 7:
        if (v1 + 9 > v2) {
          goto LABEL_32;
        }
        uint64_t v3 = *(void *)(v3 + v6);
        unsigned int v8 = v1 + 9;
        break;
      default:
        if (v6 >= v2) {
          goto LABEL_32;
        }
        LODWORD(v3) = *(unsigned __int8 *)(v3 + v6);
        unsigned int v8 = v1 + 2;
        break;
    }
    *(_DWORD *)(a1 + 260) = v8;
    if (v4) {
      uint64_t v10 = -256 << (8 * v7);
    }
    else {
      LODWORD(v10) = 0;
    }
    LODWORD(v5) = v3 | v10;
  }
  uint64_t v16 = 0;
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 0x40000000;
  uint64_t v15[2] = __deserialize_GLPString_block_invoke;
  v15[3] = &__block_descriptor_tmp_8;
  v15[4] = a1;
  v15[5] = v5;
  deserialize_pointer((void *)a1, (uint64_t)v15, &v16);
  uint64_t result = v16;
  unsigned int v12 = v5 >> 5;
  if (v5 >> 5 < v5)
  {
    unsigned int v13 = ~(v5 >> 5);
    unsigned int v14 = v5;
    do
    {
      v14 ^= 32 * v14 + (v14 >> 2) + *(char *)(v16 + (v5 - 1));
      LODWORD(v5) = v5 + v13;
    }
    while (v5 > v12);
  }
  return result;
}

uint64_t ShInitialize(_OWORD *a1, int a2)
{
  if (a1)
  {
    unint64_t v2 = (_OWORD *)((char *)&glpBuiltInConstantValues + 32 * (a2 == 4));
    long long v3 = a1[1];
    *unint64_t v2 = *a1;
    v2[1] = v3;
    int v4 = &glpBuiltInConstantsInitialized;
    if (a2 == 4) {
      int v4 = &unk_26AFA3271;
    }
    *int v4 = 1;
  }
  return 1;
}

_DWORD *ShConstructCompiler(int *a1)
{
  int v2 = *a1;
  int v3 = a1[2];
  int v4 = a1[4];
  unint64_t v5 = malloc_type_malloc(0x88uLL, 0x7081ABB9uLL);
  if (!v5) {
    abort();
  }
  uint64_t v6 = v5;
  *unint64_t v5 = 0;
  v5[2] = 0;
  v5[3] = v2;
  v5[4] = a1[3];
  v5[5] = v4;
  *((void *)v5 + 3) = glpMakeLog(&GLP_MALLOC_ALLOCATOR);
  uint64_t Log = glpMakeLog(&GLP_MALLOC_ALLOCATOR);
  *((void *)v6 + 5) = 0;
  *((void *)v6 + 6) = 0;
  *((void *)v6 + 4) = Log;
  v6[14] = v3;
  return v6;
}

_DWORD *ShConstructLinker(int *a1)
{
  int v2 = *a1;
  int v3 = a1[4];
  int v4 = malloc_type_malloc(0x88uLL, 0x7081ABB9uLL);
  if (!v4) {
    abort();
  }
  unint64_t v5 = v4;
  *int v4 = 1;
  v4[2] = 0;
  v4[3] = v2;
  v4[4] = a1[3];
  v4[5] = v3;
  *((void *)v4 + 3) = glpMakeLog(&GLP_MALLOC_ALLOCATOR);
  *((void *)v5 + 4) = glpMakeLog(&GLP_MALLOC_ALLOCATOR);
  *(_OWORD *)(v5 + 10) = 0u;
  *(_OWORD *)(v5 + 14) = 0u;
  *(_OWORD *)(v5 + 17) = 0u;
  *((void *)v5 + 11) = 0;
  *((void *)v5 + 12) = 0;
  *((void *)v5 + 13) = glpMakeStringHash(&GLP_MALLOC_ALLOCATOR);
  *((void *)v5 + 14) = glpMakeStringHash(&GLP_MALLOC_ALLOCATOR);
  *((void *)v5 + 15) = 0;
  *((void *)v5 + 16) = (*((void *(**)(int, size_t))&GLP_MALLOC_ALLOCATOR + 1))(GLP_MALLOC_ALLOCATOR, 0);
  return v5;
}

void ShDestruct(unsigned int *a1)
{
  handleResetPre((uint64_t)a1);
  handleResetPost((uint64_t)a1);
  if (*a1 == 1)
  {
    uint64_t v2 = *((void *)a1 + 13);
    unint64_t v3 = *(unsigned int *)(v2 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = *(void *)(v2 + 40);
        uint64_t v7 = *(void **)(v6 + v4);
        if (v7)
        {
          free(*(void **)(v6 + v4 + 8));
          free(v7);
          unint64_t v3 = *(unsigned int *)(v2 + 32);
        }
        v4 += 32;
      }
      uint64_t v2 = *((void *)a1 + 13);
    }
    glpDestroyStringHash(v2);
    *((void *)a1 + 13) = 0;
    uint64_t v8 = *((void *)a1 + 14);
    unint64_t v9 = *(unsigned int *)(v8 + 32);
    if (v9)
    {
      uint64_t v10 = 0;
      for (unint64_t j = 0; j < v9; ++j)
      {
        uint64_t v12 = *(void *)(v8 + 40);
        unsigned int v13 = *(void **)(v12 + v10);
        if (v13)
        {
          free(*(void **)(v12 + v10 + 8));
          free(v13);
          unint64_t v9 = *(unsigned int *)(v8 + 32);
        }
        v10 += 32;
      }
      uint64_t v8 = *((void *)a1 + 14);
    }
    glpDestroyStringHash(v8);
    *((void *)a1 + 14) = 0;
    if (a1[31])
    {
      uint64_t v14 = 0;
      unint64_t v15 = 0;
      do
      {
        free(*(void **)(*((void *)a1 + 16) + v14));
        ++v15;
        v14 += 16;
      }
      while (v15 < a1[31]);
    }
    off_26B86F7A0(GLP_MALLOC_ALLOCATOR, *((void **)a1 + 16));
  }

  free(a1);
}

uint64_t handleResetPre(uint64_t result)
{
  uint64_t v1 = (void *)result;
  if (*(_DWORD *)result <= 1u)
  {
    uint64_t v2 = *(uint64_t ****)(result + 24);
    if (v2)
    {
      glpDestroyLog(v2);
      v1[3] = 0;
    }
    unint64_t v3 = (uint64_t ***)v1[4];
    if (v3)
    {
      glpDestroyLog(v3);
      v1[4] = 0;
    }
    uint64_t v5 = v1[5];
    uint64_t v4 = v1 + 5;
    uint64_t result = v5;
    if (v5)
    {
      uint64_t result = glpDestroyStringBuffer((uint64_t **)result);
      *uint64_t v4 = 0;
    }
  }
  return result;
}

void handleResetPost(uint64_t a1)
{
  if (*(_DWORD *)a1 == 1)
  {
    uint64_t v4 = *(void *)(a1 + 48);
    if (v4)
    {
      glpDestroyLinkedProgram(v4);
      *(void *)(a1 + 48) = 0;
    }
    free(*(void **)(a1 + 56));
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    free(*(void **)(a1 + 72));
    *(void *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    uint64_t v5 = *(void *)(a1 + 88);
    if (v5)
    {
      unint64_t v6 = *(unsigned int *)(v5 + 32);
      if (v6)
      {
        uint64_t v7 = 0;
        for (unint64_t i = 0; i < v6; ++i)
        {
          unint64_t v9 = *(void **)(*(void *)(v5 + 40) + v7);
          if (v9)
          {
            free(v9);
            unint64_t v6 = *(unsigned int *)(v5 + 32);
          }
          v7 += 16;
        }
        uint64_t v5 = *(void *)(a1 + 88);
      }
      glpDestroyIntHash(v5);
      *(void *)(a1 + 88) = 0;
    }
    uint64_t v10 = *(void **)(a1 + 96);
    unint64_t v3 = (void *)(a1 + 96);
    free(v10);
    goto LABEL_16;
  }
  if (!*(_DWORD *)a1)
  {
    unint64_t v3 = (void *)(a1 + 48);
    uint64_t v2 = *(void ***)(a1 + 48);
    if (v2)
    {
      glpDestroyCompiledShader(v2);
LABEL_16:
      *unint64_t v3 = 0;
    }
  }
}

uint64_t ShFinalize()
{
  return 1;
}

BOOL ShCompile(int32x2_t *a1, const char **a2, uint64_t a3, int32x2_t *a4)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v7 = (uint64_t)a4[11];
  uint64_t v34 = (uint64_t)a4[10];
  uint64_t v8 = (uint64_t)a4[12];
  char v33 = (char)*a4;
  a1[1] = vrev64_s32(*a4);
  handleResetPre((uint64_t)a1);
  uint64_t Log = glpMakeLog(&GLP_MALLOC_ALLOCATOR);
  uint64_t v10 = glpMakeLog(&GLP_MALLOC_ALLOCATOR);
  memset(v38, 0, sizeof(v38));
  if (!compilerCache) {
    dispatch_sync((dispatch_queue_t)gSerialQueue, &__block_literal_global_3);
  }
  size_t v11 = strlen(*a2);
  uint64_t v12 = (char *)malloc_type_malloc(v11 + 17, 0x7081ABB9uLL);
  if (!v12) {
    goto LABEL_21;
  }
  unsigned int v13 = v12;
  *(_DWORD *)uint64_t v12 = a1[2].i32[0];
  *((_DWORD *)v12 + 1) = a1[2].i32[1];
  *((void *)v12 + 1) = a1[7].u32[0];
  memcpy(v12 + 16, *a2, v11 + 1);
  glpCacheGenerateHash(v13, v11 + 17, (unsigned __int8 *)v38);
  free(v13);
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  if (!glpCacheGetElement(compilerCache, (uint64_t)v38, (uint64_t)&v37, (uint64_t)&v36))
  {
    uint64_t v32 = v10;
    Compiler = glpMakeCompiler(a1[2].u32[0], a1[2].i32[1], a1[7].i32[0], Log, v10, 128, ((unsigned __int32)a4[3].i32[0] >> 2) & 1);
    uint64_t v18 = glpCompileShader(Compiler, *a2, v34, v7, v8);
    uint64_t v16 = v18;
    uint64_t v31 = (uint64_t)Compiler;
    BOOL v35 = v18 != 0;
    if (v18)
    {
      unint64_t v19 = (glpCompiledShaderSerializedSize((uint64_t)v18) + 19) & 0xFFFFFFFFFFFFFFFCLL;
      unsigned int v20 = 16;
    }
    else
    {
      unsigned int v20 = 0;
      unint64_t v19 = 16;
    }
    uint64_t v24 = (v19 | 3) + glpLogGetSerializedSize(Log);
    unint64_t v25 = (glpLogGetSerializedSize(Log) + (v24 & 0xFFFFFFFFFFFFFFFCLL) + 3) & 0xFFFFFFFFFFFFFFFCLL;
    int v26 = (char *)malloc_type_malloc(v25, 0x7081ABB9uLL);
    if (v26)
    {
      int v27 = v26;
      *(_DWORD *)int v26 = v35;
      *((_DWORD *)v26 + 1) = v20;
      *((_DWORD *)v26 + 2) = v19;
      *((_DWORD *)v26 + 3) = v24 & 0xFFFFFFFC;
      if (v16)
      {
        glpCompiledShaderSerialize((uint64_t)v16, &v26[v20]);
        glpLogSerialize(Log, &v27[v19 & 0xFFFFFFFC]);
        uint64_t v22 = v32;
        glpLogSerialize(v32, &v27[v24 & 0xFFFFFFFC]);
        glpCacheAddElement(compilerCache, (uint64_t)v38, (uint64_t)v27, v25);
        free(v27);
        uint64_t v28 = (void *)v31;
        if (v33)
        {
          StringBuffer = (uint64_t *)glpLogGetStringBuffer(v32);
          glpStringBufferAppendCString(StringBuffer, "\nIntermediate Parse Tree\n========================\n");
          unint64_t TopLevelNode = glpCompilerGetTopLevelNode(v31);
          glpDumpASTNodeToStringBuffer(StringBuffer, TopLevelNode);
        }
      }
      else
      {
        glpLogSerialize(Log, &v26[v19 & 0xFFFFFFFC]);
        uint64_t v22 = v32;
        glpLogSerialize(v32, &v27[v24 & 0xFFFFFFFC]);
        glpCacheAddElement(compilerCache, (uint64_t)v38, (uint64_t)v27, v25);
        free(v27);
        uint64_t v28 = (void *)v31;
      }
      glpDestroyCompiler(v28);
      if (v16) {
        goto LABEL_11;
      }
      goto LABEL_12;
    }
LABEL_21:
    abort();
  }
  uint64_t v14 = v10;
  unint64_t v15 = (unsigned int *)v37;
  if (*(_DWORD *)v37) {
    uint64_t v16 = glpCompiledShaderDeserialize((int *)((char *)v37 + *((unsigned int *)v37 + 1)));
  }
  else {
    uint64_t v16 = 0;
  }
  glpLogDeserialize(Log, (uint64_t)v37 + v15[2]);
  uint64_t v21 = (char *)v37 + v15[3];
  uint64_t v22 = v14;
  glpLogDeserialize(v14, (uint64_t)v21);
  free(v37);
  uint64_t v37 = 0;
  if (v16)
  {
LABEL_11:
    handleResetPost((uint64_t)a1);
    a1[6] = (int32x2_t)v16;
  }
LABEL_12:
  BOOL result = v16 != 0;
  a1[3] = (int32x2_t)Log;
  a1[4] = (int32x2_t)v22;
  return result;
}

void __ShCompile_block_invoke()
{
  if (!compilerCache) {
    compilerCache = (uint64_t)glpCacheOpen();
  }
}

BOOL ShLink(uint64_t a1, uint64_t *a2, unsigned int a3, char *a4)
{
  uint64_t v232 = *MEMORY[0x263EF8340];
  int v4 = *(_DWORD *)a4;
  int v5 = *((_DWORD *)a4 + 1);
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = v4;
  if (!v5) {
    return 0;
  }
  handleResetPre(a1);
  if (!linkerCache) {
    dispatch_sync((dispatch_queue_t)gSerialQueue, &__block_literal_global_6);
  }
  memset(v224, 0, sizeof(v224));
  int v213 = a3;
  uint64_t v210 = a4;
  if (a3)
  {
    uint64_t v10 = a3;
    int v11 = 208;
    uint64_t v12 = a2;
    do
    {
      LODWORD(v225) = 0;
      uint64_t v13 = *v12++;
      glpGetCompiledShaderAST(*(void *)(v13 + 48), &v225);
      int v11 = ((v11 | 7) + v225) & 0xFFFFFFF8;
      --v10;
    }
    while (v10);
  }
  else
  {
    int v11 = 208;
  }
  long long v218 = 0u;
  long long v219 = 0u;
  glpInitPoolAllocator(0x4000, 0x4000, &v218);
  v229[0] = 0;
  *(_OWORD *)__unint64_t n = 0u;
  long long v228 = 0u;
  long long v225 = 0u;
  long long v226 = 0u;
  glpInitSerialContext(&v225, &v218);
  serialize_bindings(&v225, *(void *)(a1 + 104));
  serialize_bindings(&v225, *(void *)(a1 + 112));
  uint64_t v15 = *(unsigned int *)(a1 + 124);
  unsigned int v16 = (char)glp_serialized_integer32_control(v15);
  uint64_t v17 = HIDWORD(__n[0]);
  int v18 = __n[0];
  int v19 = HIDWORD(__n[0]) + 1;
  if ((HIDWORD(__n[0]) + 1) <= LODWORD(__n[0]))
  {
    uint64_t v22 = (char *)__n[1];
    int v23 = HIDWORD(__n[0]);
  }
  else
  {
    if (SLODWORD(__n[0]) <= 1) {
      int v18 = 1;
    }
    int v20 = 2 * v18;
    if (v20 <= v19) {
      uint64_t v21 = v19;
    }
    else {
      uint64_t v21 = v20;
    }
    uint64_t v22 = (char *)(*((uint64_t (**)(void, uint64_t, const char *))&v225 + 1))(v225, v21, "Vector Storage (uint8_t, growth)");
    memcpy(v22, (const void *)__n[1], HIDWORD(__n[0]));
    (*((void (**)(void, size_t))&v226 + 1))(v225, __n[1]);
    LODWORD(__n[0]) = v21;
    __n[1] = (size_t)v22;
    int v23 = HIDWORD(__n[0]);
  }
  memmove(&v22[v17 + 1], &v22[v17], (v23 - v17));
  *(unsigned char *)(__n[1] + v17) = v16;
  int v24 = HIDWORD(__n[0]);
  unsigned int v25 = ++HIDWORD(__n[0]);
  if ((v16 & 0x80000000) != 0)
  {
    switch((v16 >> 1) & 7)
    {
      case 0u:
        unsigned int v26 = v24 + 2;
        int v27 = __n[0];
        if (v26 <= LODWORD(__n[0]))
        {
          unsigned int v30 = (char *)__n[1];
          unsigned int v31 = v25;
        }
        else
        {
          if (SLODWORD(__n[0]) <= 1) {
            int v27 = 1;
          }
          int v28 = 2 * v27;
          if (v28 <= (int)v26) {
            uint64_t v29 = v26;
          }
          else {
            uint64_t v29 = v28;
          }
          unsigned int v30 = (char *)(*((uint64_t (**)(void, uint64_t, const char *))&v225 + 1))(v225, v29, "Vector Storage (uint8_t, growth)");
          memcpy(v30, (const void *)__n[1], HIDWORD(__n[0]));
          (*((void (**)(void, size_t))&v226 + 1))(v225, __n[1]);
          LODWORD(__n[0]) = v29;
          __n[1] = (size_t)v30;
          unsigned int v31 = HIDWORD(__n[0]);
        }
        memmove(&v30[v25 + 1], &v30[v25], v31 - v25);
        *(unsigned char *)(__n[1] + v25) = v15;
        unsigned int v25 = HIDWORD(__n[0]) + 1;
        goto LABEL_56;
      case 1u:
        unsigned int v32 = v24 + 3;
        int v33 = __n[0];
        if (v32 <= LODWORD(__n[0]))
        {
          uint64_t v36 = (char *)__n[1];
          unsigned int v37 = v25;
        }
        else
        {
          if (SLODWORD(__n[0]) <= 1) {
            int v33 = 1;
          }
          int v34 = 2 * v33;
          if (v34 <= (int)v32) {
            uint64_t v35 = v32;
          }
          else {
            uint64_t v35 = v34;
          }
          uint64_t v36 = (char *)(*((uint64_t (**)(void, uint64_t, const char *))&v225 + 1))(v225, v35, "Vector Storage (uint8_t, growth)");
          memcpy(v36, (const void *)__n[1], HIDWORD(__n[0]));
          (*((void (**)(void, size_t))&v226 + 1))(v225, __n[1]);
          LODWORD(__n[0]) = v35;
          __n[1] = (size_t)v36;
          unsigned int v37 = HIDWORD(__n[0]);
        }
        memmove(&v36[v25 + 1], &v36[v25], v37 - v25);
        *(_WORD *)(__n[1] + v25) = v15;
        unsigned int v25 = HIDWORD(__n[0]) + 2;
        goto LABEL_56;
      case 2u:
        unsigned int v38 = v24 + 4;
        int v39 = __n[0];
        if (v38 <= LODWORD(__n[0]))
        {
          uint64_t v42 = (char *)__n[1];
          unsigned int v43 = v25;
        }
        else
        {
          if (SLODWORD(__n[0]) <= 1) {
            int v39 = 1;
          }
          int v40 = 2 * v39;
          if (v40 <= (int)v38) {
            uint64_t v41 = v38;
          }
          else {
            uint64_t v41 = v40;
          }
          uint64_t v42 = (char *)(*((uint64_t (**)(void, uint64_t, const char *))&v225 + 1))(v225, v41, "Vector Storage (uint8_t, growth)");
          memcpy(v42, (const void *)__n[1], HIDWORD(__n[0]));
          (*((void (**)(void, size_t))&v226 + 1))(v225, __n[1]);
          LODWORD(__n[0]) = v41;
          __n[1] = (size_t)v42;
          unsigned int v43 = HIDWORD(__n[0]);
        }
        memmove(&v42[v25 + 1], &v42[v25], v43 - v25);
        size_t v50 = __n[1] + v25;
        *(unsigned char *)(v50 + 2) = BYTE2(v15);
        *(_WORD *)size_t v50 = v15;
        unsigned int v25 = HIDWORD(__n[0]) + 3;
        goto LABEL_56;
      case 3u:
        unsigned int v44 = v24 + 5;
        int v45 = __n[0];
        if (v44 <= LODWORD(__n[0]))
        {
          int v48 = (char *)__n[1];
          unsigned int v49 = v25;
        }
        else
        {
          if (SLODWORD(__n[0]) <= 1) {
            int v45 = 1;
          }
          int v46 = 2 * v45;
          if (v46 <= (int)v44) {
            uint64_t v47 = v44;
          }
          else {
            uint64_t v47 = v46;
          }
          int v48 = (char *)(*((uint64_t (**)(void, uint64_t, const char *))&v225 + 1))(v225, v47, "Vector Storage (uint8_t, growth)");
          memcpy(v48, (const void *)__n[1], HIDWORD(__n[0]));
          (*((void (**)(void, size_t))&v226 + 1))(v225, __n[1]);
          LODWORD(__n[0]) = v47;
          __n[1] = (size_t)v48;
          unsigned int v49 = HIDWORD(__n[0]);
        }
        memmove(&v48[v25 + 1], &v48[v25], v49 - v25);
        *(_DWORD *)(__n[1] + v25) = v15;
        unsigned int v25 = HIDWORD(__n[0]) + 4;
LABEL_56:
        HIDWORD(__n[0]) = v25;
        break;
      default:
        break;
    }
  }
  if (v15)
  {
    uint64_t v51 = 0;
    do
    {
      serialize_GLPString(&v225, *(const char **)(*(void *)(a1 + 128) + v51), *(void *)(*(void *)(a1 + 128) + v51 + 8));
      v51 += 16;
    }
    while (16 * v15 != v51);
    unsigned int v25 = HIDWORD(__n[0]);
  }
  CC_LONG v52 = v25 + v11;
  uint64_t v53 = (char *)malloc_type_malloc(v25 + v11, 0x7081ABB9uLL);
  if (!v53) {
    goto LABEL_154;
  }
  int v54 = v53;
  bzero(v53, v25 + v11);
  if (v213)
  {
    int v55 = v54 + 140;
    unsigned int v56 = 208;
    __n128 v57 = a2;
    uint64_t v58 = v213;
    do
    {
      uint64_t v59 = *v57++;
      int v60 = *(unsigned int **)(v59 + 48);
      LODWORD(v230[0]) = 0;
      CompiledShaderAST = (const void *)glpGetCompiledShaderAST((uint64_t)v60, v230);
      *(v55 - 3) = glpGetCompiledShaderLanguage(v60);
      *(v55 - 2) = glpGetCompiledShaderVersion((uint64_t)v60);
      *(v55 - 1) = v56;
      size_t v62 = LODWORD(v230[0]);
      *int v55 = v230[0];
      v55 += 4;
      memcpy(&v54[v56], CompiledShaderAST, v62);
      uint64_t v63 = v62 + v56;
      unsigned int v56 = (v63 + 7) & 0xFFFFFFF8;
      bzero(&v54[v63], v56 - v63);
      --v58;
    }
    while (v58);
  }
  else
  {
    unsigned int v56 = 208;
  }
  size_t v64 = HIDWORD(__n[0]);
  *((_DWORD *)v54 + 28) = v56;
  *((_DWORD *)v54 + 29) = v64;
  memcpy(&v54[v56], (const void *)__n[1], v64);
  glpDestroySerialContext((uint64_t *)&v225, 1);
  glpDestroyPoolAllocator((uint64_t)&v218);
  *(void *)int v54 = *(void *)v210;
  *((_DWORD *)v54 + 2) = *((_DWORD *)v210 + 2);
  *((_DWORD *)v54 + 3) = *(_DWORD *)(a1 + 16);
  int v65 = *(_DWORD *)(a1 + 20);
  *((_DWORD *)v54 + 4) = v65;
  *(void *)(v54 + 20) = *(void *)(v210 + 20);
  *((_DWORD *)v54 + 7) = *((_DWORD *)v210 + 7);
  long long v66 = *((_OWORD *)v210 + 2);
  long long v67 = *((_OWORD *)v210 + 4);
  *((_OWORD *)v54 + 3) = *((_OWORD *)v210 + 3);
  *((_OWORD *)v54 + 4) = v67;
  *((_OWORD *)v54 + 2) = v66;
  uint64_t v68 = &glpBuiltInConstantValues[8 * (v65 == 4)];
  long long v69 = *((_OWORD *)v68 + 1);
  *((_OWORD *)v54 + 5) = *(_OWORD *)v68;
  *((_OWORD *)v54 + 6) = v69;
  *((_DWORD *)v54 + 30) = v213;
  glpCacheGenerateHash(v54, v52, (unsigned __int8 *)v224);
  free(v54);
  uint64_t v216 = 0;
  long long v217 = 0;
  if (glpCacheGetElement(linkerCache, (uint64_t)v224, (uint64_t)&v217, (uint64_t)&v216))
  {
    char v70 = v217;
    int v71 = v217[12];
    uint64_t Log = glpMakeLog(&GLP_MALLOC_ALLOCATOR);
    uint64_t v73 = glpMakeLog(&GLP_MALLOC_ALLOCATOR);
    glpLogSetContainsErrors(Log, v70[16]);
    StringBuffer = (uint64_t *)glpLogGetStringBuffer(Log);
    glpStringBufferAppendFormat(StringBuffer, "%.*s", v75, v76, v77, v78, v79, v80, v70[18]);
    glpLogSetContainsErrors(v73, v70[19]);
    __n128 v81 = (uint64_t *)glpLogGetStringBuffer(v73);
    glpStringBufferAppendFormat(v81, "%.*s", v82, v83, v84, v85, v86, v87, v70[21]);
    if (v71)
    {
      int v88 = v70[15];
      uint64_t v89 = (uint64_t)v70 + (int)v70[14];
      handleResetPost(a1);
      __n128 v90 = glpLinkProgramFromLinkerOutput(v89, v88, v70);
    }
    else
    {
      __n128 v90 = 0;
    }
    *(void *)(a1 + 48) = v90;
    *(void *)(a1 + 24) = Log;
    *(void *)(a1 + 32) = v73;
    uint64_t v113 = v217;
  }
  else
  {
    uint64_t v91 = (uint64_t)(v210 + 32);
    uint64_t v208 = (void *)glpMakeLog(&GLP_MALLOC_ALLOCATOR);
    uint64_t v92 = glpMakeLog(&GLP_MALLOC_ALLOCATOR);
    Linker = glpMakeLinker(*(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20), *((_DWORD *)v210 + 5), *((_DWORD *)v210 + 6), *((_DWORD *)v210 + 7), (uint64_t)v208, v92, *(void *)(a1 + 104), *(void *)(a1 + 112), a1 + 120, (long long *)v210 + 2, 0, (uint64_t)&glpBuiltInConstantValues[8 * (v210[16] == 4)]);
    if (v213 >= 1)
    {
      uint64_t v101 = v213;
      do
      {
        uint64_t v102 = *a2++;
        glpLinkerAddShader(Linker, *(unsigned int **)(v102 + 48));
        --v101;
      }
      while (v101);
    }
    int v103 = *(_DWORD *)v210;
    uint64_t v104 = glpLinkProgram(Linker, v93, v94, v95, v96, v97, v98, v99);
    uint64_t v214 = (uint64_t)v104;
    if (v104)
    {
      uint64_t v105 = (uint64_t)v104;
      handleResetPost(a1);
      *(void *)(a1 + 48) = v105;
      glpLinkedProgramGetOverrides(v105, v91);
      if (*(_DWORD *)(a1 + 8) >= 4u)
      {
        for (unsigned int i = 0; i != 5; ++i)
        {
          PPStreamManager = (uint64_t **)glpLinkedProgramGetPPStreamManager(*(void *)(a1 + 48), i);
          if (PPStreamManager) {
            glpPPShaderLinearizeStreamMgr(PPStreamManager, 25291);
          }
        }
      }
      *(void *)(a1 + 24) = v208;
      *(void *)(a1 + 32) = v92;
      if (v103)
      {
        uint64_t v108 = (uint64_t *)glpLogGetStringBuffer(v92);
        glpStringBufferAppendCString(v108, "\nMerged ASTs\n========================\n");
        for (unsigned int j = 0; j != 5; ++j)
        {
          uint64_t MergedAST = glpLinkerGetMergedAST((uint64_t)Linker, j);
          if (MergedAST)
          {
            unint64_t v111 = MergedAST;
            glpStringBufferAppendCString(v108, "\nMerged AST for ");
            uint64_t v112 = glpLanguageToString(j);
            glpStringBufferAppendCString(v108, v112);
            glpStringBufferAppendCString(v108, " shader\n");
            glpDumpASTNodeToStringBuffer(v108, v111);
          }
        }
      }
    }
    else
    {
      *(void *)(a1 + 24) = v208;
      *(void *)(a1 + 32) = v92;
    }
    glpDestroyLinker(Linker);
    uint64_t v114 = glpLogGetStringBuffer((uint64_t)v208);
    uint64_t String = (const void *)glpStringBufferGetString(v114);
    int v117 = v116;
    uint64_t v118 = glpLogGetStringBuffer(v92);
    uint64_t v119 = glpStringBufferGetString(v118);
    uint64_t v121 = (const void *)v119;
    int v122 = v120;
    unsigned int v123 = v117 + 608;
    if ((v117 & 7) != 0) {
      unsigned int v123 = (v117 & 0xFFFFFFF8) + 616;
    }
    signed int v211 = v123;
    int v124 = v120 + v123 + 7;
    size_t v125 = v124 & 0xFFFFFFF8;
    __n128 v90 = (void *)v214;
    if (v214)
    {
      uint64_t v201 = (long long *)v91;
      int v202 = v120;
      int v203 = v117;
      uint64_t v204 = (const void *)v119;
      unsigned int v205 = String;
      uint64_t v206 = v92;
      uint64_t v231 = 0;
      memset(v230, 0, sizeof(v230));
      bzero(&v225, 0x208uLL);
      uint64_t v126 = 0;
      for (uint64_t k = 0; k != 5; ++k)
      {
        uint64_t v128 = glpLinkedProgramGetPPStreamManager(v214, k);
        uint64_t ShaderBytesCode = glpLinkedProgramGetShaderBytesCode(v214, k);
        uint64_t v130 = (_DWORD *)((char *)&v225 + v126);
        *(_DWORD *)((char *)&v225 + v126 + 4) = k;
        if (v128)
        {
          LODWORD(v218) = 0;
          Streaunint64_t m = PPStreamGetStream(v128, &v218);
          int v132 = v218;
          int v133 = 8 * v218;
          v130[2] = v125;
          v130[3] = v133;
          *uint64_t v130 = 1;
          LODWORD(v125) = v125 + 8 * v132;
        }
        else
        {
          Streaunint64_t m = 0;
        }
        *((void *)v230 + k) = Stream;
        if (ShaderBytesCode && *(void *)ShaderBytesCode)
        {
          int v134 = **(_DWORD **)ShaderBytesCode + 4;
          uint64_t v135 = (_DWORD *)((char *)&v225 + v126);
          v135[4] = v125;
          v135[5] = v134;
          *uint64_t v135 = 1;
          LODWORD(v125) = v134 + v125;
          uint64_t v136 = *(_DWORD **)(ShaderBytesCode + 8);
          if (v136)
          {
            int v137 = 8 * *v136 + 8;
            v135[8] = v125;
            v135[9] = v137;
            LODWORD(v125) = v137 + v125;
          }
          uint64_t v138 = *(_DWORD **)(ShaderBytesCode + 40);
          if (v138)
          {
            int v139 = *v138 + 4;
            BOOL v140 = (char *)&v225 + v126;
            *((_DWORD *)v140 + 6) = v125;
            *((_DWORD *)v140 + 7) = v139;
            LODWORD(v125) = v139 + v125;
          }
          char v141 = *(_DWORD **)(ShaderBytesCode + 16);
          if (v141)
          {
            int v142 = 4 * *v141 + 4;
            uint64_t v143 = (char *)&v225 + v126;
            *((_DWORD *)v143 + 10) = v125;
            *((_DWORD *)v143 + 11) = v142;
            LODWORD(v125) = v142 + v125;
          }
          char v144 = *(_DWORD **)(ShaderBytesCode + 24);
          if (v144)
          {
            int v145 = 4 * *v144 + 4;
            char v146 = (char *)&v225 + v126;
            *((_DWORD *)v146 + 12) = v125;
            *((_DWORD *)v146 + 13) = v145;
            LODWORD(v125) = v145 + v125;
          }
          if (*(void *)(ShaderBytesCode + 32))
          {
            int v147 = (char *)&v225 + v126;
            *((_DWORD *)v147 + 14) = v125;
            *((_DWORD *)v147 + 15) = 0;
          }
          int v148 = (char *)&v225 + v126;
          *(_OWORD *)(v148 + 88) = *(_OWORD *)(ShaderBytesCode + 72);
          *((void *)v148 + 8) = *(void *)(ShaderBytesCode + 48);
          *(_OWORD *)(v148 + 72) = *(_OWORD *)(ShaderBytesCode + 56);
        }
        v126 += 104;
      }
      memset(v223, 0, sizeof(v223));
      glpInitPoolAllocator(0x4000, 0x4000, v223);
      uint64_t v222 = 0;
      *(_OWORD *)__src = 0u;
      long long v221 = 0u;
      long long v218 = 0u;
      long long v219 = 0u;
      glpInitSerialContext(&v218, v223);
      glpSerializeLinkedProgram(&v218, v214);
      int v149 = HIDWORD(__src[0]);
      int v200 = (v125 + 7) & 0xFFFFFFF8;
      if ((BYTE4(__src[0]) & 7) != 0) {
        size_t v125 = ((HIDWORD(__src[0]) + v200) & 0xFFFFFFF8) + 8;
      }
      else {
        size_t v125 = (HIDWORD(__src[0]) + v200);
      }
      uint64_t v150 = malloc_type_malloc(v125, 0x7081ABB9uLL);
      if (!v150) {
        goto LABEL_154;
      }
      int v151 = v150;
      uint64_t v152 = 0;
      uint64_t v153 = 0;
      long long v154 = *v201;
      long long v155 = v201[2];
      *((_OWORD *)v150 + 1) = v201[1];
      *((_OWORD *)v150 + 2) = v155;
      *(_OWORD *)uint64_t v150 = v154;
      *((void *)v150 + 6) = 0x500000001;
      int v156 = (char *)(v150 + 22);
      do
      {
        uint64_t v157 = &v156[v152 * 8];
        *((_OWORD *)v157 + 3) = *(_OWORD *)&v229[v152 - 2];
        *((_OWORD *)v157 + 4) = *(_OWORD *)&v229[v152];
        *((_OWORD *)v157 + 5) = *(_OWORD *)&v229[v152 + 2];
        *((void *)v157 + 12) = v229[v152 + 4];
        *(_OWORD *)uint64_t v157 = *(long long *)((char *)&v225 + v152 * 8);
        *((_OWORD *)v157 + 1) = *(long long *)((char *)&v225 + v152 * 8 + 16);
        *((_OWORD *)v157 + 2) = *(_OWORD *)&__n[v152];
        BOOL v158 = (void *)*((void *)v230 + v153);
        if (v158)
        {
          memcpy((char *)v151 + *(unsigned int *)((char *)&v225 + v152 * 8 + 8), *((const void **)v230 + v153), *(int *)((char *)&v225 + v152 * 8 + 12));
          free(v158);
          *((void *)v230 + v153) = 0;
        }
        long long v159 = (const void **)glpLinkedProgramGetShaderBytesCode(v214, v153);
        if (v159)
        {
          uint64_t v160 = v159;
          if (*v159)
          {
            memcpy((char *)v151 + *(unsigned int *)((char *)&v225 + v152 * 8 + 16), *v159, *(int *)((char *)&v226 + v152 * 8 + 4));
            uint64_t v161 = v160[1];
            if (v161) {
              memcpy((char *)v151 + LODWORD(__n[v152]), v161, SHIDWORD(__n[v152]));
            }
            BOOL v162 = v160[5];
            if (v162) {
              memcpy((char *)v151 + LODWORD(__n[v152 - 1]), v162, *(unsigned int *)((char *)&v226 + v152 * 8 + 12));
            }
            uint64_t v163 = v160[2];
            if (v163) {
              memcpy((char *)v151 + LODWORD(__n[v152 + 1]), v163, SHIDWORD(__n[v152 + 1]));
            }
            BOOL v164 = v160[3];
            if (v164) {
              memcpy((char *)v151 + LODWORD(v229[v152 - 2]), v164, *(int *)((char *)&v228 + v152 * 8 + 4));
            }
            uint64_t v165 = v160[4];
            if (v165) {
              memcpy((char *)v151 + LODWORD(v229[v152 - 1]), v165, *(int *)((char *)&v228 + v152 * 8 + 12));
            }
          }
        }
        ++v153;
        v152 += 13;
      }
      while (v152 != 65);
      v151[14] = v200;
      v151[15] = v149;
      memcpy((char *)v151 + v200, __src[1], v149);
      glpDestroySerialContext((uint64_t *)&v218, 1);
      glpDestroyPoolAllocator((uint64_t)v223);
      __n128 v90 = (void *)v214;
      uint64_t String = v205;
      uint64_t v166 = v206;
      int v117 = v203;
      uint64_t v121 = v204;
      int v122 = v202;
    }
    else
    {
      long long v167 = malloc_type_malloc(v124 & 0xFFFFFFF8, 0x7081ABB9uLL);
      if (!v167) {
        goto LABEL_154;
      }
      int v151 = v167;
      v167[12] = 0;
      *((void *)v167 + 7) = 0;
      uint64_t v166 = v92;
    }
    v151[17] = 608;
    v151[18] = v117;
    v151[16] = glpLogContainsErrors((uint64_t)v208);
    v151[20] = v211;
    v151[21] = v122;
    v151[19] = glpLogContainsErrors(v166);
    memcpy(v151 + 152, String, v117);
    memcpy((char *)v151 + v211, v121, v122);
    glpCacheAddElement(linkerCache, (uint64_t)v224, (uint64_t)v151, v125);
    uint64_t v113 = v151;
  }
  free(v113);
  uint64_t v215 = v90;
  if (v90)
  {
    *(_DWORD *)(a1 + 64) = glpLinkedProgramGetDefaultUniformLocationCount(*(void *)(a1 + 48));
    uint64_t UniformHash = glpLinkedProgramGetUniformHash(*(void *)(a1 + 48));
    Bindableuint64_t UniformHash = glpLinkedProgramGetBindableUniformHash(*(void *)(a1 + 48));
    unint64_t v170 = *(unsigned int *)(BindableUniformHash + 32);
    if (v170)
    {
      uint64_t v171 = BindableUniformHash;
      uint64_t v172 = 0;
      unint64_t v173 = 0;
      int v174 = 0;
      do
      {
        uint64_t v175 = *(void *)(*(void *)(v171 + 40) + v172);
        if (v175)
        {
          unsigned int v176 = glpABIGetTypeSize(0, *(void *)(v175 + 24), 0);
          int Size = glpTypeSizeGetSize(v176);
          *(_DWORD *)(a1 + 68) += Size;
          uint64_t v178 = malloc_type_realloc(*(void **)(a1 + 96), 4 * (v174 + 1), 0x2BDC8648uLL);
          if (!v178) {
            goto LABEL_154;
          }
          *(void *)(a1 + 96) = v178;
          v178[v174] = Size;
          unint64_t v170 = *(unsigned int *)(v171 + 32);
          ++v174;
        }
        ++v173;
        v172 += 32;
      }
      while (v173 < v170);
    }
    size_t v179 = *(int *)(a1 + 64);
    *(_DWORD *)(a1 + 80) = v179;
    unsigned int v180 = malloc_type_calloc(v179, 8uLL, 0xA92C9FCEuLL);
    if (v180)
    {
      *(void *)(a1 + 72) = v180;
      unint64_t v181 = *(unsigned int *)(UniformHash + 32);
      if (v181)
      {
        uint64_t v182 = 0;
        uint64_t v207 = UniformHash;
        while (1)
        {
          uint64_t v183 = *(void *)(*(void *)(UniformHash + 40) + 32 * v182);
          if (v183)
          {
            uint64_t v184 = *(int *)(v183 + 4);
            if (v184 != -1)
            {
              unsigned int v185 = glpABIGetTypeSize(0, *(void *)(v183 + 24), 0);
              unsigned int v186 = glpTypeSizeGetSize(v185);
              size_t v187 = 4 * v186;
              unsigned int v188 = (unsigned int *)malloc_type_malloc(v187, 0x7081ABB9uLL);
              if (!v188) {
                goto LABEL_154;
              }
              unsigned int v189 = v188;
              uint64_t v190 = (int *)malloc_type_malloc(v187, 0x7081ABB9uLL);
              if (!v190) {
                goto LABEL_154;
              }
              unsigned int v191 = v190;
              BOOL v192 = malloc_type_malloc(v186, 0x7081ABB9uLL);
              if (!v192) {
                goto LABEL_154;
              }
              uint64_t v193 = v192;
              uint64_t v209 = v191;
              uint64_t v212 = v189;
              glpTypeGetAppleVec4Types(*(unsigned int **)(v183 + 24), v189, 1, v191, 0, v192, 0, 0, 1);
              if (v186)
              {
                uint64_t v194 = 0;
                uint64_t v195 = 8 * v184;
                uint64_t v196 = 8 * v186;
                uint64_t v197 = v193;
                do
                {
                  int v198 = *v191++;
                  *(_DWORD *)(*(void *)(a1 + 72) + v195 + v194) = v198;
                  unsigned int v199 = *v189++;
                  *(_WORD *)(*(void *)(a1 + 72) + v195 + v194 + 4) = glpPrimitiveTypeGetGLType(v199);
                  *(unsigned char *)(*(void *)(a1 + 72) + v195 + v194 + 6) = *(_DWORD *)v183;
                  *(unsigned char *)(*(void *)(a1 + 72) + v195 + v194 + 7) = *(unsigned char *)(*(void *)(a1 + 72) + v195 + v194 + 7) & 0xFE | *v197 & 1;
                  *(unsigned char *)(*(void *)(a1 + 72) + v195 + v194 + 7) = *(unsigned char *)(*(void *)(a1 + 72) + v195 + v194 + 7) & 0xFD | *v197 & 2;
                  LOBYTE(v199) = *v197++;
                  *(unsigned char *)(*(void *)(a1 + 72) + v195 + v194 + 7) = *(unsigned char *)(*(void *)(a1 + 72) + v195 + v194 + 7) & 0xFB | v199 & 4;
                  v194 += 8;
                }
                while (v196 != v194);
              }
              free(v212);
              free(v209);
              free(v193);
              uint64_t UniformHash = v207;
              unint64_t v181 = *(unsigned int *)(v207 + 32);
            }
          }
          if (++v182 >= v181) {
            return v215 != 0;
          }
        }
      }
      return v215 != 0;
    }
LABEL_154:
    abort();
  }
  return v215 != 0;
}

void __ShLink_block_invoke()
{
  if (!linkerCache) {
    linkerCache = (uint64_t)glpCacheOpen();
  }
}

void ShCleanup(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1) {
    glpCleanUpLinkedProgram(v1);
  }
}

uint64_t ShGetInfoLog(uint64_t a1)
{
  uint64_t String = (char *)glpLogGetString(*(void *)(a1 + 24));
  unint64_t v3 = (char *)glpLogGetString(*(void *)(a1 + 32));
  if (!*v3) {
    return (uint64_t)String;
  }
  int v4 = v3;
  int v5 = *(uint64_t ***)(a1 + 40);
  if (v5) {
    glpDestroyStringBuffer(v5);
  }
  StringBuffer = glpMakeStringBuffer(&GLP_MALLOC_ALLOCATOR);
  *(void *)(a1 + 40) = StringBuffer;
  glpStringBufferAppendCString(StringBuffer, String);
  glpStringBufferAppendCString(*(uint64_t **)(a1 + 40), v4);
  uint64_t v7 = *(uint64_t **)(a1 + 40);

  return glpStringBufferGetCString(v7);
}

uint64_t ShAttributeBindingRequest(uint64_t a1, int a2, char *__s1)
{
  uint64_t result = strncmp(__s1, "gl_", 3uLL);
  if (result)
  {
    unsigned int v7 = strlen(__s1);
    if (v7 >> 5 >= v7)
    {
      unsigned int v9 = v7;
    }
    else
    {
      unsigned int v8 = v7;
      unsigned int v9 = v7;
      do
      {
        v9 ^= 32 * v9 + (v9 >> 2) + __s1[v8 - 1];
        v8 += ~(v7 >> 5);
      }
      while (v8 > v7 >> 5);
    }
    uint64_t result = glpStringHashGet(*(void *)(a1 + 104), __s1, v7 | ((unint64_t)v9 << 32));
    if (result)
    {
      *(_DWORD *)uint64_t result = a2;
    }
    else
    {
      uint64_t v10 = malloc_type_malloc(0x10uLL, 0x7081ABB9uLL);
      if (!v10
        || (uint64_t v11 = (uint64_t)v10,
            *uint64_t v10 = a2,
            v10[1] = 0,
            *((void *)v10 + 1) = 0,
            unsigned int v12 = strlen(__s1),
            (uint64_t v13 = (char *)malloc_type_malloc((int)v12, 0x7081ABB9uLL)) == 0))
      {
        abort();
      }
      uint64_t v14 = v13;
      unsigned int v15 = v12;
      memcpy(v13, __s1, (int)v12);
      uint64_t v17 = *(void *)(a1 + 104);
      if (v12 >> 5 >= v12)
      {
        unsigned int v18 = v12;
      }
      else
      {
        unsigned int v18 = v12;
        do
        {
          v18 ^= 32 * v18 + (v18 >> 2) + v14[v15 - 1];
          v15 += ~(v12 >> 5);
        }
        while (v15 > v12 >> 5);
      }
      return glpStringHashPut(v17, v14, v12 | ((unint64_t)v18 << 32), v11, v16);
    }
  }
  return result;
}

uint64_t ShGetNumActiveAttributes(uint64_t a1)
{
  unsigned int v15 = 0;
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    uint64_t AttribHash = glpLinkedProgramGetAttribHash(result);
    long long v4 = 0u;
    uint64_t v5 = 0;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    memset(v3, 0, sizeof(v3));
    long long v7 = 0u;
    DWORD2(v4) = -1;
    uint64_t v8 = 0;
    uint64_t v9 = 0xFFFFFFFFLL;
    uint64_t v14 = 0;
    unint64_t v6 = &v15;
    getBindingInfo(AttribHash, (uint64_t (*)(uint64_t, unsigned int *, unsigned int *, unsigned int **, uint64_t *, unsigned __int8 *))typeFromGLPBinding, (uint64_t)v3);
    return v15;
  }
  return result;
}

uint64_t getBindingInfo(uint64_t a1, uint64_t (*a2)(uint64_t result, unsigned int *a2, unsigned int *a3, unsigned int **a4, uint64_t *a5, unsigned __int8 *a6), uint64_t a3)
{
  ptr = 0;
  *(void *)int v34 = 0;
  uint64_t v32 = 0;
  int v31 = 0;
  unint64_t v6 = *(_DWORD **)(a3 + 8);
  if (v6) {
    *unint64_t v6 = 0;
  }
  long long v7 = *(_DWORD **)(a3 + 104);
  if (v7) {
    *long long v7 = 0;
  }
  unint64_t v8 = *(unsigned int *)(a1 + 32);
  if (!v8)
  {
LABEL_28:
    uint64_t v18 = 0;
    goto LABEL_38;
  }
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  BOOL v12 = (char *)a2 == (char *)typeFromGLPUniformBlockBinding || (char *)a2 == (char *)typeFromGLPUniformBinding;
  while (1)
  {
    uint64_t v13 = *(void *)(a1 + 40);
    uint64_t v14 = *(void *)(v13 + v9);
    if (v14) {
      break;
    }
LABEL_27:
    ++v10;
    v9 += 32;
    if (v10 >= v8) {
      goto LABEL_28;
    }
  }
  unsigned int v15 = *(const void **)(v13 + v9 + 8);
  size_t v16 = *(unsigned int *)(v13 + v9 + 16);
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  uint64_t v27 = 0;
  int v28 = 0;
  unsigned __int8 v26 = 0;
  a2(v14, &v30, &v29, &v28, &v27, &v26);
  v34[0] = 0;
  if (v26)
  {
    if (!v12) {
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  if (*(void *)(a3 + 48) && *(_DWORD *)(a3 + 16) || *(void *)(a3 + 56))
  {
    uint64_t v17 = malloc_type_realloc(ptr, v16, 0x2BDC8648uLL);
    if (!v17) {
      abort();
    }
    ptr = v17;
    memcpy(v17, v15, v16);
  }
  v34[0] = v16;
  if (v12)
  {
LABEL_22:
    if (*(_DWORD *)(v14 + 4) == -1 && *(_DWORD *)(v14 + 8) != -1) {
      int v31 = *(_DWORD *)(v14 + 8);
    }
  }
LABEL_25:
  if (!getBindingInfoForType(1, v26, v30, 0, (uint64_t)&ptr, v29, v28, 0, (_DWORD *)&v32 + 1, &v32, &v31, 0, a3))
  {
    unint64_t v8 = *(unsigned int *)(a1 + 32);
    goto LABEL_27;
  }
  if (*(void *)a3) {
    **(void **)a3 = v14;
  }
  int v19 = v34[0];
  getString(ptr, v34[0], *(_DWORD *)(a3 + 16), *(_DWORD **)(a3 + 24), *(void **)(a3 + 48));
  int v20 = *(_DWORD **)(a3 + 64);
  if (v20) {
    *int v20 = v19 + 1;
  }
  uint64_t v21 = *(_DWORD **)(a3 + 80);
  if (v21) {
    *uint64_t v21 = HIDWORD(v32);
  }
  uint64_t v22 = *(_DWORD **)(a3 + 128);
  if (v22) {
    _DWORD *v22 = v31;
  }
  uint64_t v18 = 1;
LABEL_38:
  free(ptr);
  int v23 = *(_DWORD **)(a3 + 88);
  if (v23) {
    *int v23 = HIDWORD(v32);
  }
  int v24 = *(_DWORD **)(a3 + 136);
  if (v24) {
    *int v24 = v32;
  }
  return v18;
}

uint64_t typeFromGLPBinding(uint64_t result, _DWORD *a2, _DWORD *a3, void *a4, void *a5, unsigned char *a6)
{
  *a2 = 0;
  *a3 = 0;
  *a4 = *(void *)(result + 8);
  *a5 = 0;
  *a6 = 0;
  return result;
}

uint64_t ShGetActiveNonbindableUniformsSize(uint64_t a1)
{
  if (*(void *)(a1 + 48)) {
    return *(unsigned int *)(a1 + 64);
  }
  else {
    return 0;
  }
}

uint64_t ShGetNumBindableUniformBuffers(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return *(unsigned int *)(glpLinkedProgramGetBindableUniformHash(result) + 36);
  }
  return result;
}

uint64_t ShGetActiveBindableUniformBufferSizeTable(uint64_t a1)
{
  if (*(void *)(a1 + 48)) {
    return *(void *)(a1 + 96);
  }
  else {
    return 0;
  }
}

uint64_t ShGetActiveBindableUniformBufferIndexOffsetFromLocation(uint64_t a1, signed int a2, _DWORD *a3, _DWORD *a4)
{
  if (!*(void *)(a1 + 48)) {
    return 0;
  }
  uint64_t result = getBindableUniformLocationInfo(a1, a2);
  if (result)
  {
    if (a3) {
      *a3 = *(_DWORD *)result;
    }
    if (a4) {
      *a4 = *(_DWORD *)(result + 4);
    }
    return 1;
  }
  return result;
}

uint64_t getBindableUniformLocationInfo(uint64_t a1, signed int a2)
{
  v27[1] = *MEMORY[0x263EF8340];
  uint64_t IntHash = *(void *)(a1 + 88);
  if (!IntHash)
  {
    uint64_t IntHash = glpMakeIntHash(&GLP_MALLOC_ALLOCATOR);
    *(void *)(a1 + 88) = IntHash;
  }
  uint64_t v5 = glpIntHashGet(IntHash, a2);
  if (!v5)
  {
    Bindableuint64_t UniformHash = glpLinkedProgramGetBindableUniformHash(*(void *)(a1 + 48));
    unint64_t v7 = *(unsigned int *)(BindableUniformHash + 32);
    if (!v7) {
      return 0;
    }
    uint64_t v8 = BindableUniformHash;
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *(void *)(*(void *)(v8 + 40) + v9);
      if (v11)
      {
        unsigned int v12 = glpABIGetTypeSize(0, *(void *)(v11 + 24), 0);
        int Size = glpTypeSizeGetSize(v12);
        signed int v14 = *(_DWORD *)(v11 + 4);
        if (v14 <= a2 && v14 + Size > a2)
        {
          size_t v16 = malloc_type_malloc(0x18uLL, 0x7081ABB9uLL);
          if (!v16) {
            abort();
          }
          uint64_t v5 = (uint64_t)v16;
          uint64_t v18 = glpIntHashPut(*(void *)(a1 + 88), a2, (uint64_t)v16, v17);
          int v19 = a2 - *(_DWORD *)(v11 + 4);
          *(_DWORD *)uint64_t v5 = *(_DWORD *)(v11 + 8);
          *(_DWORD *)(v5 + 4) = v19;
          uint64_t v20 = MEMORY[0x270FA5388](v18);
          uint64_t v22 = (_DWORD *)((char *)v27 - ((v21 + 15) & 0x7FFFFFFF0));
          MEMORY[0x270FA5388](v20);
          int v24 = (char *)v27 - v23;
          glpTypeGetAppleVec4Types(*(unsigned int **)(v11 + 24), v22, 1, (void *)((char *)v27 - v23), 0, 0, 0, 0, 1);
          int v25 = a2 - *(_DWORD *)(v11 + 4);
          *(_DWORD *)(v5 + 8) = *(_DWORD *)&v24[4 * v25];
          *(_DWORD *)(v5 + 12) = glpPrimitiveTypeGetGLType(v22[v25]);
          *(unsigned char *)(v5 + 16) = *(_DWORD *)v11;
          return v5;
        }
        unint64_t v7 = *(unsigned int *)(v8 + 32);
      }
      ++v10;
      v9 += 32;
      if (v10 >= v7) {
        return 0;
      }
    }
  }
  return v5;
}

uint64_t ShGetBindableUniformTypeInfo(uint64_t a1, signed int a2, _DWORD *a3, _DWORD *a4, unsigned char *a5)
{
  if (!*(void *)(a1 + 48)) {
    return 0;
  }
  uint64_t result = getBindableUniformLocationInfo(a1, a2);
  if (result)
  {
    if (a3) {
      *a3 = *(_DWORD *)(result + 8);
    }
    if (a4) {
      *a4 = *(_DWORD *)(result + 12);
    }
    if (a5) {
      *a5 = *(unsigned char *)(result + 16);
    }
    return 1;
  }
  return result;
}

uint64_t ShGetUniformPartitionInfo()
{
  return 0;
}

uint64_t ShGetMaxAttributeLength(uint64_t a1)
{
  unsigned int v17 = 0;
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    uint64_t AttribHash = glpLinkedProgramGetAttribHash(result);
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v9 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    v3[0] = 0;
    long long v4 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    DWORD2(v7) = -1;
    uint64_t v10 = 0;
    uint64_t v11 = 0xFFFFFFFFLL;
    uint64_t v16 = 0;
    v3[1] = &v17;
    getBindingInfo(AttribHash, (uint64_t (*)(uint64_t, unsigned int *, unsigned int *, unsigned int **, uint64_t *, unsigned __int8 *))typeFromGLPBinding, (uint64_t)v3);
    return v17;
  }
  return result;
}

uint64_t ShGetActiveAttrib(uint64_t a1, int a2, int a3, _DWORD *a4, int *a5, _DWORD *a6, void *a7)
{
  uint64_t result = *(void *)(a1 + 48);
  if (!result) {
    return result;
  }
  uint64_t AttribHash = glpLinkedProgramGetAttribHash(result);
  uint64_t v15 = *(unsigned int *)(AttribHash + 32);
  if (!v15) {
    return 0;
  }
  for (unsigned int i = (int *)(*(void *)(AttribHash + 40) + 16); ; i += 8)
  {
    uint64_t v17 = *((void *)i - 2);
    if (v17) {
      break;
    }
LABEL_7:
    if (!--v15) {
      return 0;
    }
  }
  if (a2)
  {
    --a2;
    goto LABEL_7;
  }
  int v18 = *i;
  int v19 = (const void *)*((void *)i - 1);
  int Kind = glpTypeGetKind(*(unsigned int **)(v17 + 8));
  getString(v19, v18, a3, a4, a7);
  if (a5)
  {
    if (Kind == 2) {
      int ElementCount = glpArrayTypeGetElementCount(*(void *)(v17 + 8));
    }
    else {
      int ElementCount = 1;
    }
    *a5 = ElementCount;
  }
  if (a6)
  {
    uint64_t ElementType = *(void *)(v17 + 8);
    if (Kind == 2) {
      uint64_t ElementType = glpArrayTypeGetElementType(ElementType);
    }
    unsigned int PrimitiveType = glpPrimitiveTypeGetPrimitiveType(ElementType);
    *a6 = glpPrimitiveTypeGetGLType(PrimitiveType);
  }
  return 1;
}

const void *getString(const void *__src, int a2, int a3, _DWORD *a4, void *__dst)
{
  if (!a3)
  {
    if (!a4) {
      return __src;
    }
    __src = 0;
    goto LABEL_11;
  }
  if (a3 >= a2) {
    int v9 = a2;
  }
  else {
    int v9 = a3;
  }
  __src = memcpy(__dst, __src, v9);
  int v10 = a3 - 1;
  if (a3 - 1 >= a2) {
    int v10 = a2;
  }
  *((unsigned char *)__dst + v10) = 0;
  if (a4)
  {
    __src = (const void *)strlen((const char *)__dst);
LABEL_11:
    *a4 = __src;
  }
  return __src;
}

uint64_t ShGetAttribLocation(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = 0xFFFFFFFFLL;
  if (v2)
  {
    uint64_t AttribHash = glpLinkedProgramGetAttribHash(v2);
    unsigned int v6 = strlen(a2);
    if (v6 >> 5 >= v6)
    {
      unsigned int v8 = v6;
    }
    else
    {
      unsigned int v7 = v6;
      unsigned int v8 = v6;
      do
      {
        v8 ^= 32 * v8 + (v8 >> 2) + a2[v7 - 1];
        v7 += ~(v6 >> 5);
      }
      while (v7 > v6 >> 5);
    }
    int v9 = (unsigned int *)glpStringHashGet(AttribHash, a2, v6 | ((unint64_t)v8 << 32));
    if (v9) {
      return *v9;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  return v3;
}

uint64_t ShGetContextStateUniforms(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return glpLinkedProgramGetContextStateUniforms(result);
  }
  return result;
}

uint64_t ShGetUniformLocation(uint64_t a1, const char *a2, unsigned char *a3)
{
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = 0xFFFFFFFFLL;
  if (v4)
  {
    uint64_t UniformHash = glpLinkedProgramGetUniformHash(v4);
    unsigned int v9 = strlen(a2);
    if (v9 >> 5 < v9)
    {
      unsigned int v10 = v9;
      unsigned int v11 = v9;
      do
      {
        v11 ^= 32 * v11 + (v11 >> 2) + a2[v10 - 1];
        v10 += ~(v9 >> 5);
      }
      while (v10 > v9 >> 5);
    }
    unsigned int v12 = v9;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v18 = 0;
    int v19 = 0;
    if ((glpTypeParseDeref(UniformHash, (uint64_t (*)(uint64_t, uint64_t, uint64_t))topLevelLookUpUniformBindingTypeFromStringHash, (uint64_t)a2, v9, &v20, (uint64_t *)&v19, &v18)&& (uint64_t v13 = glpStringHashGet(UniformHash, v20, v21), *a3 = 0, v13)|| (BindableUniformHash = glpLinkedProgramGetBindableUniformHash(*(void *)(a1 + 48)), glpTypeParseDeref(BindableUniformHash, (uint64_t (*)(uint64_t, uint64_t, uint64_t))topLevelLookUpUniformBindingTypeFromStringHash, (uint64_t)a2, v12, &v20, (uint64_t *)&v19, &v18))&& (uint64_t v13 = glpStringHashGet(BindableUniformHash, v20, v21), *a3 = 1, v13))&& *(_DWORD *)(v13 + 4) != -1)
    {
      int Kind = glpTypeGetKind(v19);
      uint64_t ElementType = v19;
      if (Kind == 2)
      {
        uint64_t ElementType = (unsigned int *)glpArrayTypeGetElementType((uint64_t)v19);
        int v19 = ElementType;
      }
      if (glpTypeGetKind(ElementType))
      {
        uint64_t v5 = 0xFFFFFFFFLL;
        if (*a3 && !v18) {
          return *(unsigned int *)(v13 + 4);
        }
      }
      else
      {
        return (v18 + *(_DWORD *)(v13 + 4));
      }
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return v5;
}

uint64_t topLevelLookUpUniformBindingTypeFromStringHash(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t result = glpStringHashGet(a1, a2, a3);
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

uint64_t ShSetInitialUniformValue(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result = glpLinkedProgramGetUniformHash(*(void *)(a1 + 48));
  unint64_t v6 = *(unsigned int *)(result + 32);
  if (v6)
  {
    uint64_t v7 = result;
    uint64_t v8 = 0;
    for (unint64_t i = 0; i < v6; ++i)
    {
      uint64_t v10 = *(void *)(*(void *)(v7 + 40) + v8);
      if (v10 && *(_DWORD *)(v10 + 4) != -1)
      {
        unsigned int v11 = glpABIGetTypeSize(0, *(void *)(v10 + 24), 0);
        uint64_t result = glpTypeSizeGetSize(v11);
        int v12 = *(_DWORD *)(v10 + 4);
        int v13 = v12 + result;
        BOOL v14 = __OFSUB__(a2, v12);
        int v15 = a2 - v12;
        if (v15 < 0 == v14 && v13 > a2)
        {
          uint64_t v17 = *(void *)(v10 + 16);
          if (v17)
          {
            *(_OWORD *)a3 = *(_OWORD *)(v17 + 16 * v15);
          }
          else
          {
            *(void *)a3 = 0;
            *(void *)(a3 + 8) = 0;
          }
          return result;
        }
        unint64_t v6 = *(unsigned int *)(v7 + 32);
      }
      v8 += 32;
    }
  }
  return result;
}

uint64_t ShGetPPStreamManager(uint64_t a1, unsigned int a2)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return glpLinkedProgramGetPPStreamManager(result, a2);
  }
  return result;
}

uint64_t ShGetShaderByteCode(uint64_t a1, unsigned int a2)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return glpLinkedProgramGetShaderBytesCode(result, a2);
  }
  return result;
}

uint64_t ShGetLinkerPPStream(uint64_t a1, uint64_t a2)
{
  free(*(void **)(a1 + 56));
  uint64_t v4 = malloc_type_malloc(1uLL, 0x7081ABB9uLL);
  if (!v4) {
LABEL_9:
  }
    abort();
  uint64_t v5 = 0;
  *(void *)(a1 + 56) = v4;
  *uint64_t v4 = 0;
  do
  {
    if (*(void *)(a2 + v5 * 8))
    {
      unint64_t v6 = off_264D9A158[v5];
      size_t v7 = strlen(*(const char **)(a1 + 56));
      size_t v8 = strlen(v6);
      unsigned int v9 = (char *)malloc_type_realloc(*(void **)(a1 + 56), v7 + v8 + 1, 0x2BDC8648uLL);
      if (!v9) {
        goto LABEL_9;
      }
      *(void *)(a1 + 56) = v9;
      strcat(v9, v6);
      uint64_t v10 = (char *)glpPPDisassemble(*(_DWORD **)(a2 + v5 * 8));
      size_t v11 = strlen(*(const char **)(a1 + 56));
      size_t v12 = strlen(v10);
      int v13 = (char *)malloc_type_realloc(*(void **)(a1 + 56), v11 + v12 + 1, 0x2BDC8648uLL);
      if (!v13) {
        goto LABEL_9;
      }
      *(void *)(a1 + 56) = v13;
      strcat(v13, v10);
      glpPPDisassembleFree(v10);
    }
    ++v5;
  }
  while (v5 != 5);
  return *(void *)(a1 + 56);
}

uint64_t ShTransformFeedbackVaryings(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 124))
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      free(*(void **)(*(void *)(a1 + 128) + v6));
      ++v7;
      v6 += 16;
    }
    while (v7 < *(unsigned int *)(a1 + 124));
  }
  off_26B86F7A0(GLP_MALLOC_ALLOCATOR, *(void **)(a1 + 128));
  *(_DWORD *)(a1 + 120) = a2;
  *(_DWORD *)(a1 + --*(_DWORD *)(result + 124) = 0;
  *(void *)(a1 + 128) = (*((void *(**)(int, size_t))&GLP_MALLOC_ALLOCATOR + 1))(GLP_MALLOC_ALLOCATOR, 16 * a2);
  if (a2)
  {
    uint64_t v8 = 0;
    uint64_t v9 = a2;
    do
    {
      size_t v10 = strlen(*(const char **)(a3 + 8 * v8));
      uint64_t v11 = v10;
      size_t v12 = (char *)malloc_type_malloc(v10, 0x7081ABB9uLL);
      if (!v12) {
        abort();
      }
      int v13 = v12;
      memcpy(v12, *(const void **)(a3 + 8 * v8), v10);
      unsigned int v14 = v10 >> 5;
      if (v10 >> 5 >= v10)
      {
        size_t v16 = v10;
      }
      else
      {
        unsigned int v15 = ~(v10 >> 5);
        LODWORD(v16) = v10;
        do
        {
          size_t v16 = (32 * v16 + (v16 >> 2) + v13[(v10 - 1)]) ^ v16;
          LODWORD(v10) = v10 + v15;
        }
        while (v10 > v14);
      }
      size_t v17 = v11 | (v16 << 32);
      uint64_t v18 = (void *)(*(void *)(a1 + 128) + 16 * *(unsigned int *)(a1 + 124));
      *uint64_t v18 = v13;
      v18[1] = v17;
      ++*(_DWORD *)(a1 + 124);
      ++v8;
    }
    while (v8 != v9);
  }
  return 0;
}

uint64_t ShGetMaxTransformFeedbackVaryingLength(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    uint64_t result = glpLinkedProgramGetTransformFeedbackHash(result);
    if (result)
    {
      uint64_t v2 = result;
      uint64_t v3 = *(unsigned int *)(result + 32);
      if (v3)
      {
        uint64_t result = 0;
        uint64_t v4 = *(void *)(v2 + 40);
        do
        {
          if (*(void *)v4)
          {
            int v5 = *(_DWORD *)(*(void *)v4 + 8);
            if ((int)result <= v5 + 1) {
              uint64_t result = (v5 + 1);
            }
            else {
              uint64_t result = result;
            }
          }
          v4 += 16;
          --v3;
        }
        while (v3);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t ShGetTransformFeedbackVarying(uint64_t a1, unsigned int a2, int a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, void *a7)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    uint64_t TransformFeedbackHash = glpLinkedProgramGetTransformFeedbackHash(result);
    uint64_t v15 = glpIntHashGet(TransformFeedbackHash, a2);
    getString(*(const void **)v15, *(_DWORD *)(v15 + 8), a3, a4, a7);
    if (a5) {
      *a5 = *(_DWORD *)(v15 + 16);
    }
    if (a6) {
      *a6 = glpPrimitiveTypeGetGLType(*(_DWORD *)(v15 + 20));
    }
    return 1;
  }
  return result;
}

uint64_t ShGetNumActiveVaryingsComponents(uint64_t a1, unsigned int a2)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return glpLinkedProgramGetActiveOutComponents(result, a2);
  }
  return result;
}

uint64_t ShFragDataBindingRequest(uint64_t a1, int a2, int a3, char *__s1)
{
  uint64_t result = strncmp(__s1, "gl_", 3uLL);
  if (result)
  {
    unsigned int v9 = strlen(__s1);
    if (v9 >> 5 >= v9)
    {
      unsigned int v11 = v9;
    }
    else
    {
      unsigned int v10 = v9;
      unsigned int v11 = v9;
      do
      {
        v11 ^= 32 * v11 + (v11 >> 2) + __s1[v10 - 1];
        v10 += ~(v9 >> 5);
      }
      while (v10 > v9 >> 5);
    }
    uint64_t result = glpStringHashGet(*(void *)(a1 + 112), __s1, v9 | ((unint64_t)v11 << 32));
    if (result)
    {
      *(_DWORD *)uint64_t result = a2;
      *(_DWORD *)(result + 4) = a3;
    }
    else
    {
      size_t v12 = malloc_type_malloc(0x10uLL, 0x7081ABB9uLL);
      if (!v12
        || (uint64_t v13 = (uint64_t)v12,
            *size_t v12 = a2,
            v12[1] = a3,
            *((void *)v12 + 1) = 0,
            unsigned int v14 = strlen(__s1),
            (uint64_t v15 = (char *)malloc_type_malloc((int)v14, 0x7081ABB9uLL)) == 0))
      {
        abort();
      }
      size_t v16 = v15;
      unsigned int v17 = v14;
      memcpy(v15, __s1, (int)v14);
      uint64_t v19 = *(void *)(a1 + 112);
      if (v14 >> 5 >= v14)
      {
        unsigned int v20 = v14;
      }
      else
      {
        unsigned int v20 = v14;
        do
        {
          v20 ^= 32 * v20 + (v20 >> 2) + v16[v17 - 1];
          v17 += ~(v14 >> 5);
        }
        while (v17 > v14 >> 5);
      }
      return glpStringHashPut(v19, v16, v14 | ((unint64_t)v20 << 32), v13, v18);
    }
  }
  return result;
}

uint64_t ShGetFragDataLocation(uint64_t a1, const char *a2, _DWORD *a3)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = 0xFFFFFFFFLL;
  if (v3)
  {
    uint64_t OutputHash = glpLinkedProgramGetOutputHash(v3);
    unsigned int v8 = strlen(a2);
    if (v8 >> 5 < v8)
    {
      unsigned int v9 = v8;
      unsigned int v10 = v8;
      do
      {
        v10 ^= 32 * v10 + (v10 >> 2) + a2[v9 - 1];
        v9 += ~(v8 >> 5);
      }
      while (v9 > v8 >> 5);
    }
    double v18 = 0;
    uint64_t v19 = 0;
    uint64_t v16 = 0;
    unsigned int v17 = 0;
    if (glpTypeParseDeref(OutputHash, (uint64_t (*)(uint64_t, uint64_t, uint64_t))topLevelLookUpGLPBindingTypeFromStringHash, (uint64_t)a2, v8, &v18, (uint64_t *)&v17, &v16)&& (uint64_t v11 = glpStringHashGet(OutputHash, v18, v19)) != 0)
    {
      size_t v12 = (_DWORD *)v11;
      int Kind = glpTypeGetKind(v17);
      uint64_t ElementType = v17;
      if (Kind == 2)
      {
        uint64_t ElementType = (unsigned int *)glpArrayTypeGetElementType((uint64_t)v17);
        unsigned int v17 = ElementType;
      }
      if (glpTypeGetKind(ElementType))
      {
        uint64_t v4 = 0xFFFFFFFFLL;
        if (!a3) {
          return v4;
        }
        goto LABEL_14;
      }
      uint64_t v4 = (v16 + *v12);
      if (a3) {
LABEL_14:
      }
        *a3 = v12[1];
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return v4;
}

uint64_t topLevelLookUpGLPBindingTypeFromStringHash(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t result = glpStringHashGet(a1, a2, a3);
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t ShGetNumActiveUniformBlocks(uint64_t a1)
{
  unsigned int v15 = 0;
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    uint64_t UniformInterfaceBlockHash = glpLinkedProgramGetUniformInterfaceBlockHash(result);
    long long v12 = 0u;
    long long v13 = 0u;
    uint64_t v9 = 0;
    long long v11 = 0u;
    long long v6 = 0u;
    memset(v3, 0, sizeof(v3));
    long long v4 = 0u;
    long long v5 = 0u;
    DWORD2(v4) = -1;
    uint64_t v7 = 0;
    uint64_t v8 = 0xFFFFFFFFLL;
    uint64_t v14 = 256;
    unsigned int v10 = &v15;
    getBindingInfo(UniformInterfaceBlockHash, (uint64_t (*)(uint64_t, unsigned int *, unsigned int *, unsigned int **, uint64_t *, unsigned __int8 *))typeFromGLPUniformBlockBinding, (uint64_t)v3);
    return v15;
  }
  return result;
}

uint64_t typeFromGLPUniformBlockBinding(uint64_t result, _DWORD *a2, _DWORD *a3, void *a4, void *a5, unsigned char *a6)
{
  *a2 = *(_DWORD *)(result + 12);
  *a3 = *(_DWORD *)result;
  *a4 = *(void *)(result + 24);
  *a5 = *(void *)(result + 32);
  *a6 = 0;
  return result;
}

uint64_t ShGetMaxActiveUniformBlockLength(uint64_t a1)
{
  unsigned int v15 = 0;
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    uint64_t UniformInterfaceBlockHash = glpLinkedProgramGetUniformInterfaceBlockHash(result);
    uint64_t v6 = 0;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    memset(v3, 0, sizeof(v3));
    long long v4 = 0u;
    long long v5 = 0u;
    DWORD2(v4) = -1;
    uint64_t v9 = 0xFFFFFFFFLL;
    uint64_t v14 = 256;
    uint64_t v7 = &v15;
    uint64_t v8 = 0;
    getBindingInfo(UniformInterfaceBlockHash, (uint64_t (*)(uint64_t, unsigned int *, unsigned int *, unsigned int **, uint64_t *, unsigned __int8 *))typeFromGLPUniformBlockBinding, (uint64_t)v3);
    return v15;
  }
  return result;
}

uint64_t ShGetUniformBlockIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int v19 = -1;
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    uint64_t UniformInterfaceBlockHash = glpLinkedProgramGetUniformInterfaceBlockHash(v3);
    long long v12 = 0u;
    uint64_t v8 = 0;
    memset(v7, 0, sizeof(v7));
    long long v10 = 0u;
    long long v11 = 0u;
    DWORD2(v10) = -1;
    uint64_t v13 = 0;
    uint64_t v14 = 0xFFFFFFFFLL;
    long long v16 = 0u;
    long long v17 = 0u;
    memset(v18, 0, sizeof(v18));
    unsigned int v15 = &v19;
    uint64_t v9 = a2;
    BYTE1(v18[3]) = 1;
    getBindingInfo(UniformInterfaceBlockHash, (uint64_t (*)(uint64_t, unsigned int *, unsigned int *, unsigned int **, uint64_t *, unsigned __int8 *))typeFromGLPUniformBlockBinding, (uint64_t)v7);
    return v19;
  }
  return v2;
}

uint64_t ShGetActiveUniformBlockiv(uint64_t a1, int a2, int a3, int *a4)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    int v32 = 0;
    uint64_t UniformHash = glpLinkedProgramGetUniformHash(result);
    uint64_t v31 = 0;
    long long v23 = 0u;
    *(void *)&long long v24 = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
    memset(v22, 0, sizeof(v22));
    long long v25 = 0u;
    DWORD2(v23) = -1;
    *(void *)&long long v26 = 0;
    DWORD2(v26) = -1;
    *((void *)&v24 + 1) = &v32;
    getBindingInfo(UniformHash, (uint64_t (*)(uint64_t, unsigned int *, unsigned int *, unsigned int **, uint64_t *, unsigned __int8 *))typeFromGLPUniformBinding, (uint64_t)v22);
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    int v19 = 0;
    uint64_t UniformInterfaceBlockHash = glpLinkedProgramGetUniformInterfaceBlockHash(*(void *)(a1 + 48));
    memset(v22, 0, 20);
    memset((char *)&v22[1] + 8, 0, 40);
    DWORD2(v23) = -1;
    long long v24 = 0u;
    *((void *)&v25 + 1) = 0;
    LOWORD(v31) = 256;
    long long v27 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    DWORD2(v26) = a2;
    *(void *)&long long v26 = (char *)&v21 + 4;
    *(void *)&long long v23 = &v21;
    *(void *)&long long v25 = (char *)&v20 + 4;
    *(void *)&long long v28 = &v20;
    *((void *)&v28 + 1) = &v19;
    uint64_t result = getBindingInfo(UniformInterfaceBlockHash, (uint64_t (*)(uint64_t, unsigned int *, unsigned int *, unsigned int **, uint64_t *, unsigned __int8 *))typeFromGLPUniformBlockBinding, (uint64_t)v22);
    switch(a3)
    {
      case 35392:
        int v11 = HIDWORD(v21);
        goto LABEL_21;
      case 35393:
        int v11 = v21;
        goto LABEL_21;
      case 35394:
        int v11 = v19;
        goto LABEL_21;
      case 35395:
        if (v19 >= 1)
        {
          uint64_t v12 = (v19 + 1) & 0x1FFFFFFFELL;
          uint64x2_t v13 = (uint64x2_t)vdupq_n_s64((unint64_t)v19 - 1);
          uint64_t v14 = a4 + 1;
          int v15 = v32 + v20;
          int64x2_t v16 = (int64x2_t)xmmword_2393D2C80;
          int64x2_t v17 = vdupq_n_s64(2uLL);
          do
          {
            int32x2_t v18 = vmovn_s64((int64x2_t)vcgeq_u64(v13, (uint64x2_t)v16));
            if (v18.i8[0]) {
              *(v14 - 1) = v15;
            }
            if (v18.i8[4]) {
              *uint64_t v14 = v15 + 1;
            }
            int64x2_t v16 = vaddq_s64(v16, v17);
            v14 += 2;
            v15 += 2;
            v12 -= 2;
          }
          while (v12);
        }
        return result;
      case 35396:
        int v11 = BYTE4(v20) & 1;
        goto LABEL_21;
      case 35397:
        int v11 = (HIDWORD(v20) >> 3) & 1;
        goto LABEL_21;
      case 35398:
        int v11 = (HIDWORD(v20) >> 4) & 1;
        goto LABEL_21;
      default:
        if (a3 == 34032)
        {
          int v11 = (HIDWORD(v20) >> 1) & 1;
        }
        else
        {
          if (a3 != 34033) {
            return result;
          }
          int v11 = (HIDWORD(v20) >> 2) & 1;
        }
LABEL_21:
        *a4 = v11;
        break;
    }
  }
  return result;
}

uint64_t typeFromGLPUniformBinding(uint64_t result, _DWORD *a2, _DWORD *a3, void *a4, void *a5, unsigned char *a6)
{
  *a2 = *(_DWORD *)(result + 12);
  *a3 = *(_DWORD *)result;
  *a4 = *(void *)(result + 24);
  *a5 = *(void *)(result + 32);
  *a6 = *(unsigned char *)(result + 80);
  return result;
}

uint64_t ShGetActiveUniformBlockName(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    uint64_t UniformInterfaceBlockHash = glpLinkedProgramGetUniformInterfaceBlockHash(result);
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v18 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    DWORD2(v16) = -1;
    uint64_t v19 = 0;
    uint64_t v25 = 256;
    uint64_t v20 = a2;
    uint64_t v12 = a3;
    uint64_t v13 = a4;
    long long v15 = a5;
    return getBindingInfo(UniformInterfaceBlockHash, (uint64_t (*)(uint64_t, unsigned int *, unsigned int *, unsigned int **, uint64_t *, unsigned __int8 *))typeFromGLPUniformBlockBinding, (uint64_t)&v11);
  }
  return result;
}

uint64_t ShGetUniformIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = 0xFFFFFFFFLL;
  if (v3)
  {
    uint64_t UniformHash = glpLinkedProgramGetUniformHash(v3);
    unsigned int v24 = 0;
    long long v14 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    uint64_t v12 = 0;
    memset(v11, 0, sizeof(v11));
    DWORD2(v14) = -1;
    long long v16 = 0u;
    long long v17 = 0u;
    uint64_t v18 = 0xFFFFFFFFLL;
    uint64_t v23 = 0;
    long long v15 = &v24;
    uint64_t v13 = a2;
    if (getBindingInfo(UniformHash, (uint64_t (*)(uint64_t, unsigned int *, unsigned int *, unsigned int **, uint64_t *, unsigned __int8 *))typeFromGLPUniformBinding, (uint64_t)v11))
    {
      return v24;
    }
    else
    {
      LOBYTE(v23) = 1;
      uint64_t UniformInterfaceBlockHash = glpLinkedProgramGetUniformInterfaceBlockHash(*(void *)(a1 + 48));
      int BindingInfo = getBindingInfo(UniformInterfaceBlockHash, (uint64_t (*)(uint64_t, unsigned int *, unsigned int *, unsigned int **, uint64_t *, unsigned __int8 *))typeFromGLPUniformBinding, (uint64_t)v11);
      int NumActiveNonbindableUniforms = ShGetNumActiveNonbindableUniforms(a1);
      if (BindingInfo) {
        return v24 + NumActiveNonbindableUniforms;
      }
      else {
        return 0xFFFFFFFFLL;
      }
    }
  }
  return v4;
}

uint64_t ShGetNumActiveNonbindableUniforms(uint64_t a1)
{
  unsigned int v15 = 0;
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    uint64_t UniformHash = glpLinkedProgramGetUniformHash(result);
    long long v4 = 0u;
    uint64_t v5 = 0;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    memset(v3, 0, sizeof(v3));
    long long v7 = 0u;
    DWORD2(v4) = -1;
    uint64_t v8 = 0;
    uint64_t v9 = 0xFFFFFFFFLL;
    uint64_t v14 = 0;
    uint64_t v6 = &v15;
    getBindingInfo(UniformHash, (uint64_t (*)(uint64_t, unsigned int *, unsigned int *, unsigned int **, uint64_t *, unsigned __int8 *))typeFromGLPUniformBinding, (uint64_t)v3);
    return v15;
  }
  return result;
}

uint64_t ShGetActiveUniformIndex(uint64_t a1, unsigned int a2, int a3, unsigned int *a4)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    uint64_t UniformHash = glpLinkedProgramGetUniformHash(result);
    uint64_t v34 = 0;
    int v32 = -1;
    unsigned int v33 = 0;
    int v30 = -1;
    int v31 = -1;
    int v29 = -1;
    uint64_t v28 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v16 = 0u;
    memset(v13, 0, sizeof(v13));
    long long v19 = 0u;
    uint64_t v22 = 0xFFFFFFFFLL;
    uint64_t v27 = 0;
    uint64_t v18 = a2;
    uint64_t v14 = &v34;
    unsigned int v15 = (char *)&v34 + 4;
    uint64_t v21 = 0;
    long long v20 = (unint64_t)&v28;
    long long v17 = &v33;
    uint64_t result = getBindingInfo(UniformHash, (uint64_t (*)(uint64_t, unsigned int *, unsigned int *, unsigned int **, uint64_t *, unsigned __int8 *))typeFromGLPUniformBinding, (uint64_t)v13);
    if (!result)
    {
      *(void *)&long long v23 = &v32;
      *(void *)&long long v25 = &v31;
      *((void *)&v25 + 1) = &v30;
      *(void *)&long long v26 = &v29;
      *((void *)&v26 + 1) = (char *)&v28 + 4;
      int NumActiveNonbindableUniforms = ShGetNumActiveNonbindableUniforms(a1);
      LODWORD(v18) = v18 - NumActiveNonbindableUniforms;
      LOBYTE(v27) = 1;
      uint64_t UniformInterfaceBlockHash = glpLinkedProgramGetUniformInterfaceBlockHash(*(void *)(a1 + 48));
      uint64_t result = getBindingInfo(UniformInterfaceBlockHash, (uint64_t (*)(uint64_t, unsigned int *, unsigned int *, unsigned int **, uint64_t *, unsigned __int8 *))typeFromGLPUniformBinding, (uint64_t)v13);
    }
    switch(a3)
    {
      case 35383:
        unsigned int v12 = HIDWORD(v34);
        goto LABEL_19;
      case 35384:
        unsigned int v12 = v34;
        goto LABEL_19;
      case 35385:
        unsigned int v12 = v33;
        goto LABEL_19;
      case 35386:
        unsigned int v12 = v32;
        goto LABEL_19;
      case 35387:
        unsigned int v12 = v31;
        goto LABEL_19;
      case 35388:
        unsigned int v12 = v30;
        goto LABEL_19;
      case 35389:
        unsigned int v12 = v29;
        goto LABEL_19;
      case 35390:
        unsigned int v12 = HIDWORD(v28);
LABEL_19:
        *a4 = v12;
        break;
      default:
        switch(a3)
        {
          case 35424:
            unsigned int v12 = v28 & 1;
            goto LABEL_19;
          case 35425:
            unsigned int v12 = (v28 >> 1) & 1;
            goto LABEL_19;
          case 35426:
            unsigned int v12 = (v28 >> 2) & 1;
            goto LABEL_19;
          case 35427:
            unsigned int v12 = (v28 >> 3) & 1;
            goto LABEL_19;
          case 35428:
            unsigned int v12 = (v28 >> 4) & 1;
            goto LABEL_19;
          default:
            return result;
        }
    }
  }
  return result;
}

uint64_t ShGetActiveUniformName(uint64_t a1, int a2, unsigned int a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    uint64_t UniformHash = glpLinkedProgramGetUniformHash(result);
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v21 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    uint64_t v22 = 0;
    uint64_t v23 = 0xFFFFFFFFLL;
    uint64_t v28 = 0;
    DWORD2(v19) = a2;
    uint64_t v15 = a3;
    uint64_t v16 = a4;
    long long v18 = a5;
    uint64_t result = getBindingInfo(UniformHash, (uint64_t (*)(uint64_t, unsigned int *, unsigned int *, unsigned int **, uint64_t *, unsigned __int8 *))typeFromGLPUniformBinding, (uint64_t)&v14);
    if (!result)
    {
      int NumActiveNonbindableUniforms = ShGetNumActiveNonbindableUniforms(a1);
      DWORD2(v19) -= NumActiveNonbindableUniforms;
      LOBYTE(v28) = 1;
      uint64_t UniformInterfaceBlockHash = glpLinkedProgramGetUniformInterfaceBlockHash(*(void *)(a1 + 48));
      return getBindingInfo(UniformInterfaceBlockHash, (uint64_t (*)(uint64_t, unsigned int *, unsigned int *, unsigned int **, uint64_t *, unsigned __int8 *))typeFromGLPUniformBinding, (uint64_t)&v14);
    }
  }
  return result;
}

uint64_t ShGetNumActiveUniforms(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    int v20 = 0;
    uint64_t UniformHash = glpLinkedProgramGetUniformHash(result);
    long long v9 = 0u;
    uint64_t v10 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    memset(v8, 0, sizeof(v8));
    long long v12 = 0u;
    DWORD2(v9) = -1;
    uint64_t v13 = 0;
    uint64_t v14 = 0xFFFFFFFFLL;
    uint64_t v19 = 0;
    long long v11 = &v20;
    getBindingInfo(UniformHash, (uint64_t (*)(uint64_t, unsigned int *, unsigned int *, unsigned int **, uint64_t *, unsigned __int8 *))typeFromGLPUniformBinding, (uint64_t)v8);
    int v4 = v20;
    Bindableuint64_t UniformHash = glpLinkedProgramGetBindableUniformHash(*(void *)(a1 + 48));
    getBindingInfo(BindableUniformHash, (uint64_t (*)(uint64_t, unsigned int *, unsigned int *, unsigned int **, uint64_t *, unsigned __int8 *))typeFromGLPUniformBinding, (uint64_t)v8);
    int v6 = v20 + v4;
    LOBYTE(v19) = 1;
    uint64_t UniformInterfaceBlockHash = glpLinkedProgramGetUniformInterfaceBlockHash(*(void *)(a1 + 48));
    getBindingInfo(UniformInterfaceBlockHash, (uint64_t (*)(uint64_t, unsigned int *, unsigned int *, unsigned int **, uint64_t *, unsigned __int8 *))typeFromGLPUniformBinding, (uint64_t)v8);
    return (v6 + v20);
  }
  return result;
}

uint64_t ShGetMaxActiveUniformLength(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    int v22 = 0;
    uint64_t UniformHash = glpLinkedProgramGetUniformHash(result);
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v14 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    v8[0] = 0;
    long long v9 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    DWORD2(v12) = -1;
    uint64_t v15 = 0;
    uint64_t v16 = 0xFFFFFFFFLL;
    uint64_t v21 = 0;
    v8[1] = &v22;
    getBindingInfo(UniformHash, (uint64_t (*)(uint64_t, unsigned int *, unsigned int *, unsigned int **, uint64_t *, unsigned __int8 *))typeFromGLPUniformBinding, (uint64_t)v8);
    int v4 = v22;
    Bindableuint64_t UniformHash = glpLinkedProgramGetBindableUniformHash(*(void *)(a1 + 48));
    getBindingInfo(BindableUniformHash, (uint64_t (*)(uint64_t, unsigned int *, unsigned int *, unsigned int **, uint64_t *, unsigned __int8 *))typeFromGLPUniformBinding, (uint64_t)v8);
    if (v4 <= v22) {
      int v4 = v22;
    }
    LOBYTE(v21) = 1;
    uint64_t UniformInterfaceBlockHash = glpLinkedProgramGetUniformInterfaceBlockHash(*(void *)(a1 + 48));
    getBindingInfo(UniformInterfaceBlockHash, (uint64_t (*)(uint64_t, unsigned int *, unsigned int *, unsigned int **, uint64_t *, unsigned __int8 *))typeFromGLPUniformBinding, (uint64_t)v8);
    int v7 = v22;
    if (v4 > v22) {
      int v7 = v4;
    }
    return v7 & ~(v7 >> 31);
  }
  return result;
}

uint64_t ShGetActiveUniform(uint64_t a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    uint64_t UniformHash = glpLinkedProgramGetUniformHash(result);
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v30 = 0u;
    long long v22 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    uint64_t v31 = 0;
    uint64_t v32 = 0xFFFFFFFFLL;
    uint64_t v37 = 0;
    DWORD2(v28) = a2;
    uint64_t v23 = a3;
    uint64_t v24 = a4;
    uint64_t v25 = a5;
    uint64_t v26 = a6;
    long long v27 = a7;
    if (getBindingInfo(UniformHash, (uint64_t (*)(uint64_t, unsigned int *, unsigned int *, unsigned int **, uint64_t *, unsigned __int8 *))typeFromGLPUniformBinding, (uint64_t)&v22))return 1; {
    int NumActiveNonbindableUniforms = ShGetNumActiveNonbindableUniforms(a1);
    }
    DWORD2(v28) -= NumActiveNonbindableUniforms;
    Bindableuint64_t UniformHash = glpLinkedProgramGetBindableUniformHash(*(void *)(a1 + 48));
    if (getBindingInfo(BindableUniformHash, (uint64_t (*)(uint64_t, unsigned int *, unsigned int *, unsigned int **, uint64_t *, unsigned __int8 *))typeFromGLPUniformBinding, (uint64_t)&v22))
    {
      return 1;
    }
    else
    {
      int v50 = 0;
      uint64_t v18 = *(void *)(a1 + 48);
      if (v18)
      {
        uint64_t v19 = glpLinkedProgramGetBindableUniformHash(v18);
        long long v39 = 0u;
        uint64_t v40 = 0;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        memset(v38, 0, sizeof(v38));
        long long v42 = 0u;
        DWORD2(v39) = -1;
        uint64_t v43 = 0;
        uint64_t v44 = 0xFFFFFFFFLL;
        uint64_t v49 = 0;
        uint64_t v41 = &v50;
        getBindingInfo(v19, (uint64_t (*)(uint64_t, unsigned int *, unsigned int *, unsigned int **, uint64_t *, unsigned __int8 *))typeFromGLPUniformBinding, (uint64_t)v38);
        int v20 = v50;
        uint64_t v18 = *(void *)(a1 + 48);
      }
      else
      {
        int v20 = 0;
      }
      DWORD2(v28) -= v20;
      LOBYTE(v37) = 1;
      uint64_t UniformInterfaceBlockHash = glpLinkedProgramGetUniformInterfaceBlockHash(v18);
      return getBindingInfo(UniformInterfaceBlockHash, (uint64_t (*)(uint64_t, unsigned int *, unsigned int *, unsigned int **, uint64_t *, unsigned __int8 *))typeFromGLPUniformBinding, (uint64_t)&v22);
    }
  }
  return result;
}

uint64_t ShGetActiveSamplerLocations(uint64_t a1, _DWORD *a2)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    uint64_t SamplerLocations = glpLinkedProgramGetSamplerLocations(result);
    int v5 = *(_DWORD *)(SamplerLocations + 4);
    uint64_t result = *(void *)(SamplerLocations + 8);
  }
  else
  {
    int v5 = 0;
  }
  *a2 = v5;
  return result;
}

uint64_t ShGetNumActiveSubroutines(uint64_t a1, unsigned int a2)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return *(unsigned int *)(glpLinkedProgramGetSubroutineHash(result, a2) + 36);
  }
  return result;
}

uint64_t ShGetNumActiveSubroutineUniforms(uint64_t a1, unsigned int a2)
{
  unsigned int v16 = 0;
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    uint64_t SubroutineUniformHash = glpLinkedProgramGetSubroutineUniformHash(result, a2);
    long long v5 = 0u;
    uint64_t v6 = 0;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    memset(v4, 0, sizeof(v4));
    long long v8 = 0u;
    DWORD2(v5) = -1;
    uint64_t v9 = 0;
    uint64_t v10 = 0xFFFFFFFFLL;
    uint64_t v15 = 0;
    int v7 = &v16;
    getBindingInfo(SubroutineUniformHash, (uint64_t (*)(uint64_t, unsigned int *, unsigned int *, unsigned int **, uint64_t *, unsigned __int8 *))typeFromGLPUniformBinding, (uint64_t)v4);
    return v16;
  }
  return result;
}

uint64_t ShGetNumActiveSubroutineUniformLocations(uint64_t a1, unsigned int a2)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return glpLinkedProgramGetSubroutineUniformLocationCount(result, a2);
  }
  return result;
}

uint64_t ShGetMaxActiveSubroutineLength(uint64_t a1, unsigned int a2)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    uint64_t SubroutineHash = glpLinkedProgramGetSubroutineHash(result, a2);
    uint64_t v4 = *(unsigned int *)(SubroutineHash + 32);
    if (v4)
    {
      uint64_t v5 = SubroutineHash;
      uint64_t result = 0;
      uint64_t v6 = (_DWORD *)(*(void *)(v5 + 40) + 16);
      do
      {
        if (*((void *)v6 - 2))
        {
          if ((int)result <= *v6 + 1) {
            uint64_t result = (*v6 + 1);
          }
          else {
            uint64_t result = result;
          }
        }
        v6 += 8;
        --v4;
      }
      while (v4);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t ShGetMaxActiveSubroutineUniformLength(uint64_t a1, unsigned int a2)
{
  unsigned int v18 = 0;
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    uint64_t SubroutineUniformHash = glpLinkedProgramGetSubroutineUniformHash(result, a2);
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v10 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    v4[0] = 0;
    long long v5 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    DWORD2(v8) = -1;
    uint64_t v11 = 0;
    uint64_t v12 = 0xFFFFFFFFLL;
    uint64_t v17 = 0;
    v4[1] = &v18;
    getBindingInfo(SubroutineUniformHash, (uint64_t (*)(uint64_t, unsigned int *, unsigned int *, unsigned int **, uint64_t *, unsigned __int8 *))typeFromGLPUniformBinding, (uint64_t)v4);
    return v18;
  }
  return result;
}

uint64_t ShGetSubroutineUniformLocation(uint64_t a1, unsigned int a2, const char *a3)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = 0xFFFFFFFFLL;
  if (v3)
  {
    uint64_t SubroutineUniformHash = glpLinkedProgramGetSubroutineUniformHash(v3, a2);
    unsigned int v7 = strlen(a3);
    if (v7 >> 5 < v7)
    {
      unsigned int v8 = v7;
      unsigned int v9 = v7;
      do
      {
        v9 ^= 32 * v9 + (v9 >> 2) + a3[v8 - 1];
        v8 += ~(v7 >> 5);
      }
      while (v8 > v7 >> 5);
    }
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v15 = 0;
    long long v16 = 0;
    if (!glpTypeParseDeref(SubroutineUniformHash, (uint64_t (*)(uint64_t, uint64_t, uint64_t))topLevelLookUpUniformBindingTypeFromStringHash, (uint64_t)a3, v7, &v17, (uint64_t *)&v16, &v15))return 0xFFFFFFFFLL; {
    uint64_t v10 = glpStringHashGet(SubroutineUniformHash, v17, v18);
    }
    if (!v10) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v11 = v10;
    if (*(_DWORD *)(v10 + 4) == -1) {
      return 0xFFFFFFFFLL;
    }
    int Kind = glpTypeGetKind(v16);
    uint64_t ElementType = v16;
    if (Kind == 2)
    {
      uint64_t ElementType = (unsigned int *)glpArrayTypeGetElementType((uint64_t)v16);
      long long v16 = ElementType;
    }
    if (glpTypeGetKind(ElementType) == 5) {
      return (v15 + *(_DWORD *)(v11 + 4));
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  return v4;
}

uint64_t ShGetSubroutineIndex(uint64_t a1, unsigned int a2, const char *a3)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = 0xFFFFFFFFLL;
  if (v3)
  {
    uint64_t SubroutineHash = glpLinkedProgramGetSubroutineHash(v3, a2);
    unsigned int v7 = strlen(a3);
    if (v7 >> 5 >= v7)
    {
      unsigned int v9 = v7;
    }
    else
    {
      unsigned int v8 = v7;
      unsigned int v9 = v7;
      do
      {
        v9 ^= 32 * v9 + (v9 >> 2) + a3[v8 - 1];
        v8 += ~(v7 >> 5);
      }
      while (v8 > v7 >> 5);
    }
    uint64_t v10 = glpStringHashGet(SubroutineHash, a3, v7 | ((unint64_t)v9 << 32));
    if (v10) {
      return *(unsigned int *)(v10 + 4);
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  return v4;
}

uint64_t ShGetActiveSubroutineUniformiv(uint64_t a1, unsigned int a2, unsigned int a3, int a4, _DWORD *a5)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    uint64_t SubroutineUniformHash = glpLinkedProgramGetSubroutineUniformHash(result, a2);
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    long long v18 = 0u;
    uint64_t v19 = 0;
    long long v15 = 0u;
    uint64_t v16 = 0;
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v24 = 0;
    v25[0] = 0xFFFFFFFFLL;
    *(_OWORD *)&v25[1] = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    memset(v28, 0, sizeof(v28));
    long long v14 = &v30;
    uint64_t v21 = a3;
    uint64_t v10 = (uint64_t *)((char *)&v29 + 4);
    uint64_t v17 = (char *)&v29 + 4;
    int v20 = &v29;
    uint64_t result = getBindingInfo(SubroutineUniformHash, (uint64_t (*)(uint64_t, unsigned int *, unsigned int *, unsigned int **, uint64_t *, unsigned __int8 *))typeFromGLPUniformBinding, (uint64_t)&v14);
    if (a4 <= 36425)
    {
      if (a4 != 35384)
      {
        if (a4 != 35385) {
          return result;
        }
        uint64_t v10 = &v29;
      }
      goto LABEL_13;
    }
    if (a4 == 36426)
    {
      uint64_t v10 = (uint64_t *)(v30 + 68);
LABEL_13:
      *a5 = *(_DWORD *)v10;
      return result;
    }
    if (a4 == 36427)
    {
      uint64_t v11 = v30;
      if (*(_DWORD *)(v30 + 68))
      {
        unint64_t v12 = 0;
        uint64_t v13 = *(void *)(v30 + 72);
        do
        {
          a5[v12] = *(_DWORD *)(v13 + 4 * v12);
          ++v12;
        }
        while (v12 < *(unsigned int *)(v11 + 68));
      }
    }
  }
  return result;
}

uint64_t ShGetActiveSubroutineUniformName(uint64_t a1, unsigned int a2, int a3, unsigned int a4, uint64_t a5, unint64_t a6)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    uint64_t SubroutineUniformHash = glpLinkedProgramGetSubroutineUniformHash(result, a2);
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v19 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    uint64_t v20 = 0;
    uint64_t v21 = 0xFFFFFFFFLL;
    uint64_t v26 = 0;
    DWORD2(v17) = a3;
    uint64_t v13 = a4;
    uint64_t v14 = a5;
    long long v16 = a6;
    return getBindingInfo(SubroutineUniformHash, (uint64_t (*)(uint64_t, unsigned int *, unsigned int *, unsigned int **, uint64_t *, unsigned __int8 *))typeFromGLPUniformBinding, (uint64_t)&v12);
  }
  return result;
}

void *ShGetActiveSubroutineName(uint64_t a1, unsigned int a2, int a3, int a4, _DWORD *a5, void *a6)
{
  uint64_t result = *(void **)(a1 + 48);
  if (result)
  {
    uint64_t result = (void *)glpLinkedProgramGetSubroutineHash((uint64_t)result, a2);
    uint64_t v11 = *((unsigned int *)result + 8);
    if (v11)
    {
      for (unint64_t i = (int *)(result[5] + 16); ; i += 8)
      {
        uint64_t v13 = *((void *)i - 2);
        if (v13)
        {
          if (*(_DWORD *)(v13 + 4) == a3) {
            break;
          }
        }
        if (!--v11) {
          return result;
        }
      }
      int v14 = *i;
      long long v15 = (const void *)*((void *)i - 1);
      return getString(v15, v14, a4, a5, a6);
    }
  }
  return result;
}

uint64_t ShGetCachedUniformIndexTable(uint64_t a1)
{
  if (*(void *)(a1 + 48)) {
    return *(void *)(a1 + 72);
  }
  else {
    return 0;
  }
}

uint64_t ShGetCachedUniformIndexTableSize(uint64_t a1)
{
  if (*(void *)(a1 + 48)) {
    return *(unsigned int *)(a1 + 80);
  }
  else {
    return 0;
  }
}

uint64_t ShGetInteger(uint64_t *a1, int a2, void *a3)
{
  switch(a2)
  {
    case 1707:
      long long v5 = malloc_type_realloc(0, 4uLL, 0x2BDC8648uLL);
      if (!v5) {
        goto LABEL_39;
      }
      uint64_t v58 = a3;
      *long long v5 = 0;
      uint64_t v6 = a1[13];
      unint64_t v7 = *(unsigned int *)(v6 + 32);
      if (!v7) {
        goto LABEL_34;
      }
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      int v10 = 0;
      int v11 = 4;
      while (1)
      {
        uint64_t v12 = *(void *)(v6 + 40);
        uint64_t v13 = *(_DWORD **)(v12 + v8);
        if (v13)
        {
          int v14 = *(const void **)(v12 + v8 + 8);
          size_t v15 = *(unsigned int *)(v12 + v8 + 16);
          uint64_t v16 = v11;
          size_t v17 = v11 + 4;
          long long v18 = (char *)malloc_type_realloc(v5, v17, 0x2BDC8648uLL);
          if (!v18) {
            goto LABEL_39;
          }
          *(_DWORD *)&v18[v16] = v15;
          size_t v19 = (int)v15 + (int)v17;
          uint64_t v20 = (char *)malloc_type_realloc(v18, v19, 0x2BDC8648uLL);
          if (!v20) {
            goto LABEL_39;
          }
          uint64_t v21 = v20;
          memcpy(&v20[v17], v14, v15);
          long long v5 = malloc_type_realloc(v21, (int)v19 + 4, 0x2BDC8648uLL);
          if (!v5) {
            goto LABEL_39;
          }
          *(_DWORD *)((char *)v5 + v19) = *v13;
          ++v10;
          unint64_t v7 = *(unsigned int *)(v6 + 32);
          int v11 = v19 + 4;
        }
        ++v9;
        v8 += 32;
        if (v9 >= v7) {
          goto LABEL_35;
        }
      }
    case 1708:
      long long v5 = malloc_type_realloc(0, 4uLL, 0x2BDC8648uLL);
      if (!v5) {
        goto LABEL_39;
      }
      uint64_t v58 = a3;
      *long long v5 = 0;
      uint64_t v23 = a1[14];
      unint64_t v24 = *(unsigned int *)(v23 + 32);
      if (v24)
      {
        uint64_t v25 = 0;
        unint64_t v26 = 0;
        int v10 = 0;
        int v27 = 4;
        while (1)
        {
          uint64_t v28 = *(void *)(v23 + 40);
          uint64_t v29 = *(_DWORD **)(v28 + v25);
          if (v29)
          {
            uint64_t v30 = *(const void **)(v28 + v25 + 8);
            size_t v31 = *(unsigned int *)(v28 + v25 + 16);
            uint64_t v32 = v27;
            size_t v33 = v27 + 4;
            long long v34 = (char *)malloc_type_realloc(v5, v33, 0x2BDC8648uLL);
            if (!v34) {
              goto LABEL_39;
            }
            *(_DWORD *)&v34[v32] = v31;
            size_t v35 = (int)v31 + (int)v33;
            long long v36 = (char *)malloc_type_realloc(v34, v35, 0x2BDC8648uLL);
            if (!v36) {
              goto LABEL_39;
            }
            uint64_t v37 = v36;
            memcpy(&v36[v33], v30, v31);
            unsigned int v38 = (char *)malloc_type_realloc(v37, v35 + 4, 0x2BDC8648uLL);
            if (!v38) {
              goto LABEL_39;
            }
            *(_DWORD *)&v38[v35] = *v29;
            long long v5 = malloc_type_realloc(v38, (int)v35 + 8, 0x2BDC8648uLL);
            if (!v5) {
              goto LABEL_39;
            }
            *(_DWORD *)((char *)v5 + v35 + 4) = v29[1];
            ++v10;
            unint64_t v24 = *(unsigned int *)(v23 + 32);
            int v27 = v35 + 8;
          }
          ++v26;
          v25 += 32;
          if (v26 >= v24) {
            goto LABEL_35;
          }
        }
      }
LABEL_34:
      int v10 = 0;
LABEL_35:
      uint64_t v22 = 0;
      *long long v5 = v10;
      *uint64_t v58 = v5;
      break;
    case 1709:
      long long v39 = malloc_type_realloc(0, 4uLL, 0x2BDC8648uLL);
      if (!v39) {
        goto LABEL_39;
      }
      uint64_t v40 = v39;
      *long long v39 = 0;
      uint64_t OutputHash = glpLinkedProgramGetOutputHash(a1[6]);
      unint64_t v42 = *(unsigned int *)(OutputHash + 32);
      if (v42)
      {
        uint64_t v43 = OutputHash;
        uint64_t v44 = 0;
        unint64_t v45 = 0;
        int v46 = 0;
        int v47 = 4;
        do
        {
          uint64_t v48 = *(void *)(v43 + 40);
          if (*(void *)(v48 + v44))
          {
            uint64_t v49 = *(const void **)(v48 + v44 + 8);
            size_t v50 = *(unsigned int *)(v48 + v44 + 16);
            uint64_t v51 = v47;
            size_t v52 = v47 + 4;
            uint64_t v53 = (char *)malloc_type_realloc(v40, v52, 0x2BDC8648uLL);
            if (!v53
              || (*(_DWORD *)&v53[v51] = v50, (int v54 = malloc_type_realloc(v53, (int)v50 + (int)v52, 0x2BDC8648uLL)) == 0))
            {
LABEL_39:
              abort();
            }
            uint64_t v40 = v54;
            memcpy((char *)v54 + v52, v49, v50);
            ++v46;
            unint64_t v42 = *(unsigned int *)(v43 + 32);
            int v47 = v50 + v52;
          }
          ++v45;
          v44 += 32;
        }
        while (v45 < v42);
      }
      else
      {
        int v46 = 0;
      }
      uint64_t v22 = 0;
      _DWORD *v40 = v46;
      *a3 = v40;
      break;
    case 1710:
      CompiledShaderVersiounint64_t n = glpGetCompiledShaderVersion(a1[6]);
      int v56 = glpGLSLVersionToInt(CompiledShaderVersion);
      uint64_t v22 = 0;
      *(_DWORD *)a3 = v56;
      return v22;
    default:
      return 10010;
  }
  return v22;
}

dispatch_queue_t ShInitializeLibrary()
{
  dispatch_queue_t result = dispatch_queue_create("OpenGL Caching", 0);
  gSerialQueue = (uint64_t)result;
  return result;
}

void ShTerminateLibrary()
{
  if (compilerCache)
  {
    glpCacheDelete((void *)compilerCache);
    compilerCache = 0;
  }
  if (linkerCache)
  {
    glpCacheDelete((void *)linkerCache);
    linkerCache = 0;
  }
  dispatch_release((dispatch_object_t)gSerialQueue);
  gSerialQueue = 0;
}

uint64_t getBindingInfoForType(int a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int *a7, uint64_t a8, _DWORD *a9, _DWORD *a10, _DWORD *a11, int a12, uint64_t a13)
{
  int v14 = a7;
  uint64_t v17 = a13;
  uint64_t v126 = *MEMORY[0x263EF8340];
  BOOL v18 = *(void *)(a13 + 48) && *(_DWORD *)(a13 + 16) || *(void *)(a13 + 56) != 0;
  BOOL v120 = v18;
  uint64_t BindingInfoForType = 0;
  int v123 = a12;
  LODWORD(v20) = 1;
  switch(glpTypeGetKind(a7))
  {
    case 0u:
    case 5u:
      goto LABEL_68;
    case 1u:
      int v22 = *(_DWORD *)(a5 + 8);
      if (!a1)
      {
        int v27 = 0;
        int v28 = 0;
        int v77 = *(_DWORD *)(a5 + 8);
        uint64_t v23 = (uint64_t)a7;
        goto LABEL_138;
      }
      uint64_t v23 = (uint64_t)v14;
      int v24 = glpABIGetMinimumBufferBytesForType(a3, (uint64_t)v14, (unint64_t)(a4 != 0) << 10);
      if (*a11 == *(_DWORD *)(a13 + 120)) {
        goto LABEL_10;
      }
      if (!*(void *)(a13 + 128)) {
        goto LABEL_115;
      }
      uint64_t v78 = *(const void **)(a13 + 56);
      if (v78 && (size_t v79 = strlen((const char *)v78), v79 == *(_DWORD *)(a5 + 8)))
      {
        int v80 = memcmp(v78, *(const void **)a5, v79);
        uint64_t v17 = a13;
        if (v80)
        {
LABEL_115:
          int v27 = 0;
          int v28 = 0;
        }
        else
        {
LABEL_10:
          uint64_t v25 = *(unsigned int **)(v17 + 96);
          if (v25) {
            *uint64_t v25 = a6;
          }
          unint64_t v26 = *(_DWORD **)(v17 + 112);
          if (v26) {
            _DWORD *v26 = v24;
          }
          int v27 = *a9;
          int v28 = 1;
        }
      }
      else
      {
        int v27 = 0;
        int v28 = 0;
        uint64_t v17 = a13;
      }
      uint64_t v89 = *(int **)(v17 + 104);
      int v77 = *(_DWORD *)(a5 + 8);
      if (v89)
      {
        int v90 = *v89;
        if (*v89 <= v77 + 1) {
          int v90 = v77 + 1;
        }
        *uint64_t v89 = v90;
        int v77 = *(_DWORD *)(a5 + 8);
      }
LABEL_138:
      if (a2) {
        goto LABEL_143;
      }
      if (!v120) {
        goto LABEL_142;
      }
      uint64_t v91 = malloc_type_realloc(*(void **)a5, (v77 + 1), 0x2BDC8648uLL);
      if (!v91) {
        goto LABEL_174;
      }
      *(void *)a5 = v91;
      v91[*(unsigned int *)(a5 + 8)] = 46;
      int v77 = *(_DWORD *)(a5 + 8);
LABEL_142:
      *(_DWORD *)(a5 + 8) = ++v77;
LABEL_143:
      int ElementCount = glpAggregateTypeGetElementCount(v23);
      if (ElementCount < 1)
      {
        if (!a1) {
          return 0;
        }
      }
      else
      {
        int v93 = ElementCount;
        int v114 = v22;
        int v116 = v28;
        int v112 = v27;
        int v94 = 1;
        do
        {
          __int16 ElementFlags = glpAggregateTypeGetElementFlags(v23, v94 - 1);
          int v96 = glpABIGetStructTypeRangeOfField(a3, v23, (unint64_t)(a4 != 0) << 10, v94 - 1);
          uint64_t ElementType = glpAggregateTypeGetElementType(v23, v94 - 1);
          uint64_t FieldName = glpStructTypeGetFieldName(v23, v94 - 1);
          unsigned int v100 = v99;
          *(_DWORD *)(a5 + 8) = v77;
          if (v120)
          {
            uint64_t v101 = (const void *)FieldName;
            uint64_t v102 = (char *)malloc_type_realloc(*(void **)a5, v77 + v99, 0x2BDC8648uLL);
            if (!v102) {
              goto LABEL_174;
            }
            *(void *)a5 = v102;
            memcpy(&v102[*(unsigned int *)(a5 + 8)], v101, v100);
            int v103 = *(_DWORD *)(a5 + 8);
          }
          else
          {
            int v103 = v77;
          }
          *(_DWORD *)(a5 + 8) = v103 + v100;
          if ((ElementFlags & 0x400) != 0) {
            uint64_t v104 = 1;
          }
          else {
            uint64_t v104 = a4;
          }
          uint64_t v17 = a13;
          uint64_t BindingInfoForType = getBindingInfoForType(0, 0, a3, v104, a5, a6, ElementType, a8, a9, a10, a11, v96 + a12, a13);
          unsigned int v105 = glpABIGetTypeSize(0, ElementType, 0);
          int Size = glpTypeSizeGetSize(v105);
          uint64_t v23 = (uint64_t)a7;
          if (v94 >= v93) {
            break;
          }
          a8 = (Size + a8);
          ++v94;
        }
        while (!BindingInfoForType);
        int v28 = v116;
        if (!a1) {
          return BindingInfoForType;
        }
        int v27 = v112;
        int v22 = v114;
        if (BindingInfoForType)
        {
          if (!v116) {
            return 1;
          }
          goto LABEL_160;
        }
      }
      *(_DWORD *)(a5 + 8) = v22;
      if (!v28)
      {
        uint64_t BindingInfoForType = 0;
        ++*a11;
        size_t v64 = a10;
        goto LABEL_89;
      }
LABEL_160:
      uint64_t v107 = *(_DWORD **)(v17 + 144);
      if (v107) {
        *uint64_t v107 = v27;
      }
      uint64_t v75 = *(int **)(v17 + 152);
      if (v75)
      {
        int v76 = *a9 - v27;
        goto LABEL_171;
      }
      return 1;
    case 2u:
    case 3u:
      if (glpTypeGetKind(v14) == 3) {
        uint64_t v21 = glpBankTypeGetElementCount((uint64_t)v14);
      }
      else {
        uint64_t v21 = glpArrayTypeGetElementCount((uint64_t)v14);
      }
      uint64_t v20 = v21;
      if (glpTypeGetKind(v14) == 3) {
        uint64_t v29 = glpBankTypeGetElementType((uint64_t)v14);
      }
      else {
        uint64_t v29 = glpArrayTypeGetElementType((uint64_t)v14);
      }
      int v14 = (unsigned int *)v29;
      uint64_t v115 = (unint64_t)(a4 != 0) << 10;
      int v118 = glpABIGetArrayStrideForElementType(a3, v29, v115);
      if (a1 && *(unsigned char *)(a13 + 192) && glpTypeGetKind(a7) == 3)
      {
        int v30 = glpABIGetMinimumBufferBytesForType(a3, (uint64_t)v14, v115);
        if (*a11 == *(_DWORD *)(a13 + 120))
        {
LABEL_23:
          size_t v31 = *(unsigned int **)(v17 + 96);
          if (v31) {
            *size_t v31 = a6;
          }
          uint64_t v32 = *(_DWORD **)(v17 + 112);
          if (v32) {
            _DWORD *v32 = v30;
          }
          char v33 = 0;
          LODWORD(v34) = *a9;
LABEL_122:
          uint64_t v83 = *(int **)(a13 + 104);
          if (v83)
          {
            int v84 = *v83;
            int v85 = *(_DWORD *)(a5 + 8);
            if (*v83 <= v85 + 1) {
              int v84 = v85 + 1;
            }
            *uint64_t v83 = v84;
          }
          int v86 = getBindingInfoForType(0, 0, a3, a4, a5, a6, v14, a8, a9, a10, a11, 0, a13);
          unsigned int v87 = glpABIGetTypeSize(0, (uint64_t)v14, 0);
          glpTypeSizeGetSize(v87);
          if (v33)
          {
            if (!v86)
            {
              uint64_t BindingInfoForType = 0;
              ++*a11;
              ++*a10;
              *a11 += v20 - 1;
              *a10 += v20 - 1;
              return BindingInfoForType;
            }
          }
          else
          {
            int v88 = *(_DWORD **)(a13 + 144);
            if (v88) {
              *int v88 = v34;
            }
            uint64_t v75 = *(int **)(a13 + 152);
            if (v75)
            {
              int v76 = *a9 - v34;
              goto LABEL_171;
            }
          }
          return 1;
        }
        if (*(void *)(a13 + 128))
        {
          long long v34 = *(const char **)(a13 + 56);
          if (!v34)
          {
LABEL_121:
            char v33 = 1;
            goto LABEL_122;
          }
          size_t v81 = strlen(v34);
          if (v81 == *(_DWORD *)(a5 + 8))
          {
            int v82 = memcmp(v34, *(const void **)a5, v81);
            uint64_t v17 = a13;
            if (!v82) {
              goto LABEL_23;
            }
          }
        }
        LODWORD(v34) = 0;
        goto LABEL_121;
      }
      if (glpTypeGetKind(v14) != 5 && glpTypeGetKind(v14))
      {
        if ((int)v20 < 1) {
          return 0;
        }
        int v35 = 0;
        int v36 = 0;
        int v110 = *a9;
        int v111 = 0;
        int v113 = *(_DWORD *)(a5 + 8);
        while (1)
        {
          *(_DWORD *)(a5 + 8) = v113;
          unsigned int v37 = snprintf_l(__src, 0x20uLL, 0, "[%d]", v36);
          if (v120)
          {
            unsigned int v38 = (char *)malloc_type_realloc(*(void **)a5, *(_DWORD *)(a5 + 8) + v37, 0x2BDC8648uLL);
            if (!v38) {
              goto LABEL_174;
            }
            *(void *)a5 = v38;
            memcpy(&v38[*(unsigned int *)(a5 + 8)], __src, v37);
          }
          uint64_t v39 = v20;
          unsigned int v40 = *(_DWORD *)(a5 + 8) + v37;
          *(_DWORD *)(a5 + 8) = v40;
          if (!a1)
          {
            int v44 = v123;
            goto LABEL_57;
          }
          int v41 = glpABIGetMinimumBufferBytesForType(a3, (uint64_t)v14, v115);
          if (*a11 != *(_DWORD *)(v17 + 120))
          {
            if (!*(void *)(v17 + 128)) {
              goto LABEL_49;
            }
            unint64_t v45 = *(const char **)(v17 + 56);
            if (!v45 || (size_t v46 = strlen(v45), v46 != *(_DWORD *)(a5 + 8)))
            {
              uint64_t v17 = a13;
              goto LABEL_49;
            }
            int v47 = memcmp(v45, *(const void **)a5, v46);
            uint64_t v17 = a13;
            if (v47) {
              goto LABEL_49;
            }
          }
          unint64_t v42 = *(unsigned int **)(v17 + 96);
          if (v42) {
            unsigned int *v42 = a6;
          }
          uint64_t v43 = *(_DWORD **)(v17 + 112);
          if (v43) {
            *uint64_t v43 = v41;
          }
          int v111 = *a9;
          int v35 = 1;
LABEL_49:
          uint64_t v48 = *(int **)(v17 + 104);
          if (v48)
          {
            int v49 = *v48;
            int v50 = *(_DWORD *)(a5 + 8);
            if (*v48 <= v50 + 1) {
              int v49 = v50 + 1;
            }
            *uint64_t v48 = v49;
          }
          int v44 = *(unsigned __int8 *)(v17 + 193);
          if (*(unsigned char *)(v17 + 193))
          {
            int Kind = glpTypeGetKind(a7);
            int v44 = 0;
            if (v36)
            {
              if (Kind == 3)
              {
                int v111 = v110;
LABEL_59:
                *(_DWORD *)(a5 + 8) = v40;
                if (v35) {
                  goto LABEL_167;
                }
                uint64_t BindingInfoForType = 0;
                ++*a11;
                ++*a10;
                goto LABEL_61;
              }
            }
          }
LABEL_57:
          uint64_t BindingInfoForType = getBindingInfoForType(0, 0, a3, a4, a5, a6, v14, a8, a9, a10, a11, v44, v17);
          unsigned int v52 = glpABIGetTypeSize(0, (uint64_t)v14, 0);
          a8 = glpTypeSizeGetSize(v52) + a8;
          if (a1)
          {
            if (BindingInfoForType)
            {
              if (v35)
              {
LABEL_167:
                uint64_t v108 = *(_DWORD **)(v17 + 144);
                if (v108) {
                  *uint64_t v108 = v111;
                }
                uint64_t v75 = *(int **)(v17 + 152);
                if (v75)
                {
                  int v76 = *a9 - v111;
LABEL_171:
                  *uint64_t v75 = v76;
                }
              }
              return 1;
            }
            goto LABEL_59;
          }
LABEL_61:
          if (++v36 < (int)v39)
          {
            uint64_t v20 = v39;
            v123 += v118;
            if (!BindingInfoForType) {
              continue;
            }
          }
          return BindingInfoForType;
        }
      }
      if (v120)
      {
        uint64_t v53 = (char *)malloc_type_realloc(*(void **)a5, (*(_DWORD *)(a5 + 8) + 3), 0x2BDC8648uLL);
        if (!v53) {
LABEL_174:
        }
          abort();
        *(void *)a5 = v53;
        int v54 = &v53[*(unsigned int *)(a5 + 8)];
        v54[2] = 93;
        *(_WORD *)int v54 = 12379;
      }
      *(_DWORD *)(a5 + 8) += 3;
      LODWORD(BindingInfoForType) = v118;
LABEL_68:
      if (!*(void *)(a13 + 80)) {
        goto LABEL_77;
      }
      int v55 = *(const void **)(a13 + 56);
      if (v55)
      {
        size_t v56 = strlen(*(const char **)(a13 + 56));
        LODWORD(v55) = v56 == *(_DWORD *)(a5 + 8) && memcmp(v55, *(const void **)a5, v56) == 0;
        if (glpTypeGetKind(a7) == 2 && !v55)
        {
          size_t v57 = strlen(*(const char **)(a13 + 56));
          if (v57 == *(_DWORD *)(a5 + 8) - 3) {
            LODWORD(v55) = memcmp(*(const void **)(a13 + 56), *(const void **)a5, v57) == 0;
          }
          else {
LABEL_77:
          }
            LODWORD(v55) = 0;
        }
      }
      if (*a9 == *(_DWORD *)(a13 + 72) || v55 != 0)
      {
        if (glpTypeGetKind(v14))
        {
          BOOL v59 = 0;
        }
        else
        {
          unsigned int PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)v14);
          BOOL v59 = glpPrimitiveTypeGetCategory(PrimitiveType) == 3;
        }
        long long v66 = *(_DWORD **)(a13 + 32);
        if (v66) {
          _DWORD *v66 = v20;
        }
        if (*(void *)(a13 + 40))
        {
          unsigned int v67 = glpPrimitiveTypeGetPrimitiveType((uint64_t)v14);
          **(_DWORD **)(a13 + 40) = glpPrimitiveTypeGetGLType(v67);
        }
        uint64_t v68 = *(_DWORD **)(a13 + 160);
        if (v68) {
          *uint64_t v68 = a12;
        }
        long long v69 = *(_DWORD **)(a13 + 168);
        if (v69) {
          _DWORD *v69 = BindingInfoForType;
        }
        char v70 = *(_DWORD **)(a13 + 176);
        if (v70)
        {
          if (v59)
          {
            uint64_t v71 = glpPrimitiveTypeGetPrimitiveType((uint64_t)v14);
            int v72 = glpABIGetMatrixStride(a3, v71, (unint64_t)(a4 != 0) << 10);
            char v70 = *(_DWORD **)(a13 + 176);
          }
          else
          {
            int v72 = 0;
          }
          *char v70 = v72;
        }
        uint64_t v73 = *(unsigned int **)(a13 + 184);
        if (v73)
        {
          unsigned int v74 = a4;
          if (!v59) {
            unsigned int v74 = 0;
          }
          *uint64_t v73 = v74;
        }
        uint64_t v75 = *(int **)(a13 + 96);
        if (v75)
        {
          int v76 = a6;
          goto LABEL_171;
        }
        return 1;
      }
      unsigned int v60 = glpABIGetTypeSize(0, (uint64_t)v14, 0);
      glpTypeSizeGetSize(v60);
      int v61 = *(int **)(a13 + 8);
      if (v61)
      {
        int v62 = *v61;
        int v63 = *(_DWORD *)(a5 + 8);
        if (*v61 <= v63 + 1) {
          int v62 = v63 + 1;
        }
        *int v61 = v62;
      }
      uint64_t BindingInfoForType = 0;
      size_t v64 = a9;
LABEL_89:
      ++*v64;
      return BindingInfoForType;
    default:
      return BindingInfoForType;
  }
}

void *glpCopyString(uint64_t a1, const void *a2, unsigned int a3)
{
  size_t v4 = a3;
  long long v5 = (void *)(*(uint64_t (**)(void, void, const char *))(a1 + 8))(*(void *)a1, a3, "String Contents (copy)");
  memcpy(v5, a2, v4);
  return v5;
}

char *glpLowerCaseCopyOfString(uint64_t a1, const void *a2, unsigned int a3)
{
  size_t v4 = a3;
  long long v5 = (char *)(*(uint64_t (**)(void, void, const char *))(a1 + 8))(*(void *)a1, a3, "String Contents (copy)");
  memcpy(v5, a2, v4);
  if (v4)
  {
    uint64_t v6 = MEMORY[0x263EF8318];
    unint64_t v7 = v5;
    do
    {
      unsigned int v8 = *v7;
      if ((v8 & 0x80000000) != 0) {
        LOBYTE(v9) = ___tolower_l(v8, 0);
      }
      else {
        int v9 = *(_DWORD *)(v6 + 4 * v8 + 1084);
      }
      *v7++ = v9;
      --v4;
    }
    while (v4);
  }
  return v5;
}

BOOL glpStringsEqual(const char *a1, uint64_t a2, char *__s2, uint64_t a4)
{
  return a2 == a4 && strncmp(a1, __s2, a2) == 0;
}

uint64_t glpStringsCompare(const char *a1, unsigned int a2, char *__s2, unsigned int a4)
{
  unsigned int v5 = a2 - a4;
  if (a2 >= a4) {
    size_t v6 = a4;
  }
  else {
    size_t v6 = a2;
  }
  LODWORD(result) = strncmp(a1, __s2, v6);
  if (result) {
    return result;
  }
  else {
    return v5;
  }
}

void *glpMakeStringBuffer(void *a1)
{
  uint64_t v2 = (void *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 24, "String Buffer");
  *uint64_t v2 = a1;
  v2[1] = 64;
  v2[2] = ((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 64, "Vector Storage (char)");
  return v2;
}

uint64_t glpDestroyStringBuffer(uint64_t **a1)
{
  ((void (*)(uint64_t, uint64_t *))(*a1)[3])(**a1, a1[2]);
  uint64_t v2 = (uint64_t (*)(uint64_t, uint64_t **))(*a1)[3];
  uint64_t v3 = **a1;

  return v2(v3, a1);
}

uint64_t glpStringBufferGetString(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3 >> 5 < v3)
  {
    unsigned int v4 = v3;
    unsigned int v5 = v3;
    do
    {
      v5 ^= 32 * v5 + (v5 >> 2) + *(char *)(result + v4 - 1);
      v4 += ~(v3 >> 5);
    }
    while (v4 > v3 >> 5);
  }
  return result;
}

uint64_t glpStringBufferGetCString(uint64_t *a1)
{
  int v2 = *((_DWORD *)a1 + 2);
  uint64_t v3 = *((unsigned int *)a1 + 3);
  int v4 = v3 + 1;
  if ((int)v3 + 1 <= v2)
  {
    unsigned int v8 = (char *)a1[2];
    int v9 = *((_DWORD *)a1 + 3);
  }
  else
  {
    if (v2 <= 1) {
      int v2 = 1;
    }
    int v5 = 2 * v2;
    if (v5 <= v4) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = v5;
    }
    uint64_t v7 = *a1;
    unsigned int v8 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(*a1 + 8))(*(void *)*a1, v6, "Vector Storage (char, growth)");
    memcpy(v8, (const void *)a1[2], *((unsigned int *)a1 + 3));
    (*(void (**)(void, uint64_t))(v7 + 24))(*(void *)v7, a1[2]);
    *((_DWORD *)a1 + 2) = v6;
    a1[2] = (uint64_t)v8;
    int v9 = *((_DWORD *)a1 + 3);
  }
  memmove(&v8[v3 + 1], &v8[v3], (v9 - v3));
  *(unsigned char *)(a1[2] + v3) = 0;
  return a1[2];
}

void *glpStringBufferAppend(uint64_t *a1, const void *a2, unsigned int a3)
{
  int v6 = *((_DWORD *)a1 + 2);
  uint64_t v7 = *((unsigned int *)a1 + 3);
  int v8 = v7 + a3;
  if (v7 + a3 <= v6)
  {
    uint64_t v12 = (char *)a1[2];
    int v13 = *((_DWORD *)a1 + 3);
  }
  else
  {
    if (v6 <= 1) {
      int v6 = 1;
    }
    int v9 = 2 * v6;
    if (v9 <= v8) {
      uint64_t v10 = v8;
    }
    else {
      uint64_t v10 = v9;
    }
    uint64_t v11 = *a1;
    uint64_t v12 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(*a1 + 8))(*(void *)*a1, v10, "Vector Storage (char, growth)");
    memcpy(v12, (const void *)a1[2], *((unsigned int *)a1 + 3));
    (*(void (**)(void, uint64_t))(v11 + 24))(*(void *)v11, a1[2]);
    *((_DWORD *)a1 + 2) = v10;
    a1[2] = (uint64_t)v12;
    int v13 = *((_DWORD *)a1 + 3);
  }
  memmove(&v12[v7 + 1], &v12[v7], (v13 - v7));
  uint64_t result = memcpy((void *)(a1[2] + v7), a2, a3);
  *((_DWORD *)a1 + 3) += a3;
  return result;
}

void *glpStringBufferAppendCString(uint64_t *a1, char *__s)
{
  unsigned int v4 = strlen(__s);

  return glpStringBufferAppend(a1, __s, v4);
}

uint64_t glpStringBufferAppendFormat(uint64_t *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return glpStringBufferAppendFormatv(a1, a2, &a9);
}

uint64_t glpStringBufferAppendFormatv(uint64_t *a1, char *a2, va_list a3)
{
  uint64_t v5 = *((unsigned int *)a1 + 3);
  size_t v6 = (*((_DWORD *)a1 + 2) - v5);
  int v7 = vsnprintf_l((char *)(a1[2] + v5), v6, 0, a2, a3);
  size_t v8 = (v7 + 1);
  if (v8 <= v6)
  {
    int v14 = (void *)a1[2];
  }
  else
  {
    int v9 = *((_DWORD *)a1 + 2);
    if (v9 <= 1) {
      int v9 = 1;
    }
    int v10 = 2 * v9;
    int v11 = v8 + *((_DWORD *)a1 + 3);
    if (v10 <= v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = v10;
    }
    uint64_t v13 = *a1;
    int v14 = (void *)(*(uint64_t (**)(void, uint64_t, const char *))(*a1 + 8))(*(void *)*a1, v12, "Vector Storage (char, growth)");
    memcpy(v14, (const void *)a1[2], *((unsigned int *)a1 + 3));
    (*(void (**)(void, uint64_t))(v13 + 24))(*(void *)v13, a1[2]);
    *((_DWORD *)a1 + 2) = v12;
    a1[2] = (uint64_t)v14;
  }
  uint64_t result = vsnprintf_l((char *)v14 + *((unsigned int *)a1 + 3), v8, 0, a2, a3);
  *((_DWORD *)a1 + 3) += v7;
  return result;
}

BOOL glpDatasEqual(const void *a1, uint64_t a2, void *__s2, uint64_t a4)
{
  return a2 == a4 && memcmp(a1, __s2, a2) == 0;
}

uint64_t glpPrimitiveTypeFromString(const char *a1, uint64_t a2)
{
  return *(unsigned int *)(glpStringHashGet((uint64_t)&GLP_PRIMITIVE_TYPES, a1, a2) + 4);
}

uint64_t glpPrimitiveTypeGetPrimitiveType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t glpDeepCopyType(void *a1, uint64_t a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t StructType = a2;
  switch(*(_DWORD *)a2)
  {
    case 0:
      return StructType;
    case 1:
      int v44 = &v42;
      uint64_t v4 = *(unsigned int *)(a2 + 4);
      uint64_t v5 = MEMORY[0x270FA5388](a1);
      size_t v6 = &v42 - 2 * v4;
      uint64_t v7 = 8 * v4;
      MEMORY[0x270FA5388](v5);
      uint64_t v8 = (8 * v4 + 15) & 0xFFFFFFFF0;
      int v9 = (char *)&v42 - v8;
      if ((unint64_t)(8 * v4) >= 0x200) {
        size_t v10 = 512;
      }
      else {
        size_t v10 = 8 * v4;
      }
      bzero((char *)&v42 - v8, v10);
      uint64_t v12 = MEMORY[0x270FA5388](v11);
      uint64_t v13 = (char *)&v42 - v8;
      MEMORY[0x270FA5388](v12);
      int v14 = (char *)&v42 - v8;
      bzero(v14, v10);
      uint64_t v43 = v4;
      if (v4)
      {
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        do
        {
          uint64_t v17 = (void **)&v6[v15];
          *uint64_t v17 = glpCopyString((uint64_t)a1, *(const void **)(*(void *)(StructType + 48) + v15 * 8), *(void *)(*(void *)(StructType + 48) + v15 * 8 + 8));
          v17[1] = v18;
          *(void *)&v9[v16] = glpDeepCopyType(a1, *(void *)(*(void *)(StructType + 8) + v16));
          uint64_t v19 = *(void *)(StructType + 24);
          *(void *)&v13[v16] = *(void *)(*(void *)(StructType + 16) + v16);
          *(void *)&v14[v16] = glpCopyLayoutObject(a1, *(void ***)(v19 + v16));
          v16 += 8;
          v15 += 2;
        }
        while (v7 != v16);
      }
      uint64_t v20 = glpCopyString((uint64_t)a1, *(const void **)(StructType + 32), *(void *)(StructType + 40));
      uint64_t StructType = glpMakeStructType(a1, (uint64_t)v20, v21, v43, (uint64_t)v6, (uint64_t)v9, (uint64_t)v13, (uint64_t)v14);
      break;
    case 2:
      uint64_t v22 = glpDeepCopyType(a1, *(void *)(a2 + 16));
      uint64_t v23 = *(void *)(StructType + 4);
      uint64_t StructType = ((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 24, "Array Type");
      *(void *)uint64_t StructType = 0;
      *(void *)(StructType + 8) = 0;
      *(_DWORD *)uint64_t StructType = 2;
      *(void *)(StructType + 16) = v22;
      *(void *)(StructType + 4) = v23;
      break;
    case 3:
      int v24 = *(_DWORD *)(a2 + 8);
      uint64_t v25 = glpDeepCopyType(a1, *(void *)(a2 + 16));
      int v26 = *(_DWORD *)(StructType + 4);
      uint64_t StructType = ((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 24, "Bank Type");
      *(void *)uint64_t StructType = 0;
      *(void *)(StructType + 8) = 0;
      *(_DWORD *)(StructType + 4) = v26;
      *(_DWORD *)(StructType + 8) = v24;
      *(void *)(StructType + 16) = v25;
      *(_DWORD *)uint64_t StructType = 3;
      break;
    case 4:
      uint64_t v27 = *(unsigned int *)(a2 + 4);
      uint64_t v28 = MEMORY[0x270FA5388](a1);
      uint64_t v29 = (8 * v27 + 15) & 0xFFFFFFFF0;
      int v30 = (char *)&v42 - v29;
      MEMORY[0x270FA5388](v28);
      size_t v31 = (char *)&v42 - v29;
      if ((unint64_t)(8 * v27) >= 0x200) {
        size_t v32 = 512;
      }
      else {
        size_t v32 = 8 * v27;
      }
      bzero((char *)&v42 - v29, v32);
      MEMORY[0x270FA5388](v33);
      long long v34 = (char *)&v42 - v29;
      bzero(v34, v32);
      if (v27)
      {
        uint64_t v35 = 0;
        do
        {
          uint64_t v36 = *(void *)(StructType + 8);
          *(void *)&v30[v35] = *(void *)(*(void *)(StructType + 16) + v35);
          *(void *)&v31[v35] = glpDeepCopyType(a1, *(void *)(v36 + v35));
          *(void *)&v34[v35] = glpCopyLayoutObject(a1, *(void ***)(*(void *)(StructType + 24) + v35));
          v35 += 8;
        }
        while (8 * v27 != v35);
      }
      uint64_t v37 = glpDeepCopyType(a1, *(void *)(StructType + 32));
      uint64_t StructType = glpMakeFunctionType(a1, v37, v27, (uint64_t)v31, (uint64_t)v30, (uint64_t)v34);
      break;
    case 5:
      unsigned int v38 = glpCopyString((uint64_t)a1, *(const void **)(a2 + 16), *(void *)(a2 + 24));
      uint64_t v40 = v39;
      uint64_t StructType = ((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 32, "Subroutine Type");
      *(_OWORD *)uint64_t StructType = 0u;
      *(_OWORD *)(StructType + 16) = 0u;
      *(_DWORD *)uint64_t StructType = 5;
      *(void *)(StructType + 16) = v38;
      *(void *)(StructType + 24) = v40;
      *(void *)(StructType + 8) = 0;
      break;
    default:
      abort();
  }
  return StructType;
}

uint64_t glpTypeGetKind(unsigned int *a1)
{
  return *a1;
}

uint64_t glpAggregateTypeGetElementCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t glpStructTypeGetFieldName(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 48) + 16 * a2);
}

uint64_t glpAggregateTypeGetElementType(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 8) + 8 * a2);
}

uint64_t glpAggregateTypeGetElementFlags(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 8 * a2);
}

uint64_t glpAggregateTypeGetElementLayout(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 24) + 8 * a2);
}

uint64_t glpMakeStructType(void *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = ((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 56, "Struct Type");
  *(_OWORD *)uint64_t v16 = 0u;
  *(_OWORD *)(v16 + 16) = 0u;
  *(_OWORD *)(v16 + 32) = 0u;
  *(void *)(v16 + 48) = 0;
  *(_DWORD *)uint64_t v16 = 1;
  initAggregateType(a1, v16, a4, a6, a7, a8);
  *(void *)(v16 + 48) = ((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 16 * a4, "Struct type (field name storage)");
  if (a4)
  {
    uint64_t v17 = 0;
    do
    {
      *(_OWORD *)(*(void *)(v16 + 48) + v17) = *(_OWORD *)(a5 + v17);
      v17 += 16;
    }
    while (16 * a4 != v17);
  }
  *(void *)(v16 + 32) = a2;
  *(void *)(v16 + 40) = a3;
  return v16;
}

uint64_t glpStructTypeGetName(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t glpMakeArrayType(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 24, "Array Type");
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = a2;
  *(_DWORD *)uint64_t result = 2;
  *(_DWORD *)(result + 4) = a3;
  *(_DWORD *)(result + 8) = a4;
  return result;
}

uint64_t glpArrayTypeGetElementType(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t glpArrayTypeGetMaxElementCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t glpMakeBankType(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 24, "Bank Type");
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 4) = a4;
  *(_DWORD *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  *(_DWORD *)uint64_t result = 3;
  return result;
}

uint64_t glpBankTypeGetBank(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t glpBankTypeGetElementType(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t glpBankTypeGetElementCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t glpMakeFunctionType(void *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = ((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 40, "Function Type");
  *(_OWORD *)uint64_t v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(void *)(v12 + 32) = 0;
  *(_DWORD *)uint64_t v12 = 4;
  initAggregateType(a1, v12, a3, a4, a5, a6);
  *(void *)(v12 + 32) = a2;
  return v12;
}

uint64_t glpFunctionTypeGetReturnType(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

double glpMakeSubroutineType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 32, "Subroutine Type");
  double result = 0.0;
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_DWORD *)uint64_t v7 = 5;
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  *(void *)(v7 + 8) = a4;
  return result;
}

uint64_t glpSubroutineTypeGetName(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void *glpDestroyType(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  switch(*(_DWORD *)a2)
  {
    case 0:
      return result;
    case 1:
      destroyAggregateType(result, a2);
      ((void (*)(void, void))v3[3])(*v3, *(void *)(a2 + 32));
      uint64_t v5 = *(unsigned int *)(a2 + 4);
      if (v5)
      {
        uint64_t v6 = 0;
        uint64_t v7 = 16 * v5;
        do
        {
          ((void (*)(void, void))v3[3])(*v3, *(void *)(*(void *)(a2 + 48) + v6));
          v6 += 16;
        }
        while (v7 != v6);
      }
      ((void (*)(void, void))v3[3])(*v3, *(void *)(a2 + 48));
      break;
    case 2:
    case 3:
      uint64_t v4 = *(void *)(a2 + 16);
      goto LABEL_8;
    case 4:
      destroyAggregateType(result, a2);
      uint64_t v4 = *(void *)(a2 + 32);
LABEL_8:
      glpDestroyType(v3, v4);
      break;
    case 5:
      ((void (*)(void, void))result[3])(*result, *(void *)(a2 + 16));
      break;
    default:
      abort();
  }
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))v3[3];
  uint64_t v9 = *v3;

  return (void *)v8(v9, a2);
}

uint64_t destroyAggregateType(void *a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 4);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 8 * v4;
    do
    {
      glpDestroyType(a1, *(void *)(*(void *)(a2 + 8) + v5));
      glpDestroyLayoutObject((uint64_t)a1, *(void ***)(*(void *)(a2 + 24) + v5));
      v5 += 8;
    }
    while (v6 != v5);
  }
  ((void (*)(void, void))a1[3])(*a1, *(void *)(a2 + 8));
  ((void (*)(void, void))a1[3])(*a1, *(void *)(a2 + 16));
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))a1[3];
  uint64_t v8 = *a1;
  uint64_t v9 = *(void *)(a2 + 24);

  return v7(v8, v9);
}

uint64_t glpTypesEqual(unsigned int *a1, uint64_t a2)
{
  if (a1 == (unsigned int *)a2) {
    return 1;
  }
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  while (1)
  {
    uint64_t result = *v3;
    if (result != *(_DWORD *)v2) {
      return 0;
    }
    if (result != 5) {
      break;
    }
    uint64_t result = glpStringsEqual(*((const char **)v3 + 2), *((void *)v3 + 3), *(char **)(v2 + 16), *(void *)(v2 + 24));
    if (!result) {
      return result;
    }
    uint64_t v3 = (unsigned int *)**((void **)v3 + 1);
    uint64_t v2 = **(void **)(v2 + 8);
    if (v3 == (unsigned int *)v2) {
      return 1;
    }
  }
  switch((int)result)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = glpStringsEqual(*((const char **)v3 + 4), *((void *)v3 + 5), *(char **)(v2 + 32), *(void *)(v2 + 40));
      if (!result) {
        return result;
      }
      uint64_t result = aggregateGutsEqual((uint64_t)v3, v2);
      if (!result) {
        return result;
      }
      uint64_t v5 = v3[1];
      if (!v5) {
        return 1;
      }
      uint64_t v6 = 0;
      uint64_t v7 = 16 * v5;
      do
      {
        uint64_t result = glpStringsEqual(*(const char **)(*((void *)v3 + 6) + v6), *(void *)(*((void *)v3 + 6) + v6 + 8), *(char **)(*(void *)(v2 + 48) + v6), *(void *)(*(void *)(v2 + 48) + v6 + 8));
        if (!result) {
          break;
        }
        v6 += 16;
        uint64_t result = 1;
      }
      while (v7 != v6);
      break;
    case 2:
      uint64_t result = glpTypesEqual(*((void *)v3 + 2), *(void *)(v2 + 16));
      if (!result) {
        return result;
      }
      goto LABEL_21;
    case 3:
      uint64_t result = glpTypesEqual(*((void *)v3 + 2), *(void *)(v2 + 16));
      if (!result) {
        return result;
      }
      if (v3[2] != *(_DWORD *)(v2 + 8)) {
        return 0;
      }
LABEL_21:
      uint64_t result = v3[1] == *(_DWORD *)(v2 + 4);
      break;
    case 4:
      uint64_t result = glpTypesEqual(*((void *)v3 + 4), *(void *)(v2 + 32));
      if (result)
      {
        return aggregateGutsEqual((uint64_t)v3, v2);
      }
      return result;
    default:
      abort();
  }
  return result;
}

uint64_t aggregateGutsEqual(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 4);
  if (v2 != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  uint64_t v5 = 0;
  while (1)
  {
    uint64_t result = glpTypesEqual(*(void *)(*(void *)(a1 + 8) + 8 * v5), *(void *)(*(void *)(a2 + 8) + 8 * v5));
    if (!result) {
      break;
    }
    if (((*(void *)(*(void *)(a2 + 16) + 8 * v5) ^ *(void *)(*(void *)(a1 + 16) + 8 * v5)) & 0xFFFFFFFFFFFFFDFFLL) != 0) {
      return 0;
    }
    if (++v5 >= (unint64_t)*(unsigned int *)(a1 + 4)) {
      return 1;
    }
  }
  return result;
}

uint64_t glpArrayTypeGetElementCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t glpSubroutineTypeGetFunctionObject(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t glpEachPrimitiveComponentOfType(uint64_t a1, uint64_t a2)
{
  int v3 = 0;
  return _eachPrimitiveComponent(a1, (uint64_t)&v3, a2);
}

uint64_t _eachPrimitiveComponent(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  while (2)
  {
    switch(*(_DWORD *)v5)
    {
      case 0:
        uint64_t v6 = *(unsigned int *)(v5 + 4);
        uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16);
        return v7(a3, v6, a2);
      case 1:
        if (*(_DWORD *)(v5 + 4))
        {
          unint64_t v8 = 0;
          do
          {
            uint64_t result = _eachPrimitiveComponent(*(void *)(*(void *)(v5 + 8) + 8 * v8), a2, a3);
            if (a2) {
              break;
            }
            ++v8;
          }
          while (v8 < *(unsigned int *)(v5 + 4));
        }
        return result;
      case 2:
      case 3:
        uint64_t v5 = *(void *)(v5 + 16);
        continue;
      case 4:
      case 5:
        abort();
      default:
        return result;
    }
  }
}

uint64_t glpTypeGetSamplerCount(uint64_t a1)
{
  uint64_t v2 = 0;
  switch(*(_DWORD *)a1)
  {
    case 0:
      unsigned int Category = glpPrimitiveTypeGetCategory(*(_DWORD *)(a1 + 4));
      if (Category >= 5) {
        goto LABEL_21;
      }
      return dword_2393D2C98[Category];
    case 1:
      uint64_t v8 = *(unsigned int *)(a1 + 4);
      if (!v8) {
        return 0;
      }
      uint64_t v9 = 0;
      LODWORD(v2) = 0;
      uint64_t v10 = 8 * v8;
      do
      {
        int SamplerCount = glpTypeGetSamplerCount(*(void *)(*(void *)(a1 + 8) + v9));
        if (SamplerCount == -1) {
          uint64_t v2 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v2 = (SamplerCount + v2);
        }
        v9 += 8;
      }
      while (v10 != v9);
      return v2;
    case 2:
    case 3:
      int v3 = glpTypeGetSamplerCount(*(void *)(a1 + 16));
      int v4 = *(_DWORD *)(a1 + 4);
      if (v3) {
        unsigned int v5 = -1;
      }
      else {
        unsigned int v5 = 0;
      }
      unsigned int v6 = v4 * v3;
      if (v3 == -1) {
        unsigned int v6 = -1;
      }
      if (v4 == -1) {
        return v5;
      }
      else {
        return v6;
      }
    case 5:
      return v2;
    default:
LABEL_21:
      abort();
  }
}

uint64_t glpTypeIsAtomic(_DWORD *a1)
{
  if ((*a1 - 1) < 2) {
    return 0;
  }
  if (*a1) {
    abort();
  }
  glpPrimitiveTypeGetCategory(a1[1]);
  return 1;
}

char *glpGetPrimitiveType(unsigned int a1)
{
  return (char *)&GLP_PRIMITIVE_TYPE_ARRAY + 8 * a1;
}

uint64_t glpTypeIsSized(int *a1)
{
  int v1 = *a1;
  if (!*a1) {
    return 1;
  }
  if (v1 == 2) {
    return a1[1] != -1;
  }
  if (v1 != 1) {
    abort();
  }
  int v3 = 0;
  glpStructTypeGetSizesAndAlignments(0, (uint64_t)a1, 0, &v3, 0, 0);
  return glpTypeSizeIsValid(v3);
}

uint64_t glpStructTypeGetSizesAndAlignments(unsigned int a1, uint64_t a2, uint64_t a3, _DWORD *a4, unsigned int *a5, uint64_t a6)
{
  Typeunsigned int Size = glpMakeTypeSize(0);
  unsigned int v12 = glpABIGetMinimumStructAlignment(a1);
  uint64_t v13 = *(unsigned int *)(a2 + 4);
  uint64_t v28 = a4;
  uint64_t v29 = a5;
  if ((int)v13 >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 8 * v13;
    do
    {
      uint64_t v16 = TypeSize;
      if (glpTypeSizeIsValid(TypeSize))
      {
        uint64_t v17 = *(void *)(*(void *)(a2 + 8) + v14);
        uint64_t v18 = *(void *)(*(void *)(a2 + 16) + v14) | a3;
        unsigned int v19 = glpABIGetTypeSize(a1, v17, v18);
        uint64_t v20 = v19;
        if (glpTypeSizeIsValid(v19))
        {
          unsigned int v21 = glpABIGetTypeAlign(a1, v17, v18);
          unsigned int v22 = (v21 + glpTypeSizeGetSize(v16) - 1) / v21 * v21;
          unsigned int Size = glpTypeSizeGetSize(v20);
          unsigned int v24 = Size;
          if (v21 > v12) {
            unsigned int v12 = v21;
          }
          Typeunsigned int Size = glpMakeTypeSize(v22 + Size);
          if (a6)
          {
            uint64_t v25 = (unsigned int *)(a6 + v14);
            *uint64_t v25 = v22;
            v25[1] = v24;
          }
        }
        else
        {
          Typeunsigned int Size = glpInvalidTypeSize();
        }
      }
      v14 += 8;
    }
    while (v15 != v14);
  }
  uint64_t result = glpTypeSizeIsValid(TypeSize);
  if (result)
  {
    if (v28)
    {
      uint64_t result = glpAlignTypeSize(TypeSize, v12);
      *uint64_t v28 = result;
    }
    uint64_t v27 = v29;
    if (!v29) {
      return result;
    }
LABEL_20:
    *uint64_t v27 = v12;
    return result;
  }
  if (v28)
  {
    uint64_t result = glpInvalidTypeSize();
    *uint64_t v28 = result;
  }
  uint64_t v27 = v29;
  if (v29)
  {
    unsigned int v12 = -1;
    goto LABEL_20;
  }
  return result;
}

uint64_t initAggregateType(void *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(a2 + 4) = a3;
  uint64_t v12 = 8 * a3;
  *(void *)(a2 + 8) = ((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v12, "Aggregate type (element type storage)");
  *(void *)(a2 + 16) = ((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v12, "Aggregate type (element flag storage)");
  uint64_t result = ((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v12, "Aggregate type (element layout storage)");
  *(void *)(a2 + 24) = result;
  if (a3)
  {
    uint64_t v14 = 0;
    do
    {
      *(void *)(*(void *)(a2 + 8) + v14) = *(void *)(a4 + v14);
      uint64_t v15 = *(void *)(a2 + 24);
      *(void *)(*(void *)(a2 + 16) + v14) = *(void *)(a5 + v14);
      *(void *)(v15 + v14) = *(void *)(a6 + v14);
      v14 += 8;
    }
    while (8 * a3 != v14);
  }
  return result;
}

uint64_t glpAggregateTypeMangleName(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  StringBuffer = glpMakeStringBuffer(a4);
  glpStringBufferAppendCString(StringBuffer, "#");
  glpStringBufferAppendString(StringBuffer, a2, a3);
  if (*(_DWORD *)(a1 + 4))
  {
    unint64_t v8 = 0;
    do
    {
      glpStringBufferAppendCString(StringBuffer, "@");
      appendTypeName(*(void *)(*(void *)(a1 + 8) + 8 * v8++), StringBuffer);
    }
    while (v8 < *(unsigned int *)(a1 + 4));
  }

  return glpStringBufferGetString((uint64_t)StringBuffer);
}

void *appendTypeName(uint64_t a1, uint64_t *a2)
{
  switch(*(_DWORD *)a1)
  {
    case 0:
      uint64_t v11 = glpPrimitiveTypeToString(*(_DWORD *)(a1 + 4));
      goto LABEL_9;
    case 1:
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = *(void *)(a1 + 40);
      return (void *)glpStringBufferAppendString(a2, v12, v13);
    case 2:
    case 3:
      appendTypeName(*(void *)(a1 + 16), a2);
      if (*(_DWORD *)(a1 + 4) != -1) {
        return (void *)glpStringBufferAppendFormat(a2, "[%u]", v4, v5, v6, v7, v8, v9, *(_DWORD *)(a1 + 4));
      }
      uint64_t v11 = "[]";
LABEL_9:
      return glpStringBufferAppendCString(a2, v11);
    case 5:
      appendTypeName_cold_1(a1, (uint64_t)a2);
      goto LABEL_13;
    default:
LABEL_13:
      abort();
  }
}

uint64_t glpStructTypeGetFieldIndex(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 4);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 16 * v3;
  while (!glpStringsEqual(a2, a3, *(char **)(*(void *)(a1 + 48) + v7), *(void *)(*(void *)(a1 + 48) + v7 + 8)))
  {
    v7 += 16;
    uint64_t v8 = (v8 + 1);
    if (v9 == v7) {
      return 0xFFFFFFFFLL;
    }
  }
  return v8;
}

uint64_t glpTypeParseDeref(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3, unsigned int a4, void *a5, uint64_t *a6, _DWORD *a7)
{
  unsigned int v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = 0;
  LODWORD(v12) = 0;
  int v45 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v44 = 0;
  uint64_t v41 = a3 + 1;
  int v15 = 1;
  do
  {
    if (v9 == a4)
    {
      BOOL v16 = v15 != 0;
      if (v11 == a4 && !v15) {
        goto LABEL_46;
      }
LABEL_12:
      if (!v16) {
        return 0;
      }
      uint64_t v19 = v9 - v11;
      if (v19 >> 5 >= v19)
      {
        uint64_t v21 = v9 - v11;
      }
      else
      {
        unsigned int v20 = v9 - v11;
        LODWORD(v21) = v9 - v11;
        do
        {
          uint64_t v21 = (32 * v21 + (v21 >> 2) + *(char *)(a3 + (int)v11 + v20 - 1)) ^ v21;
          v20 += ~(v19 >> 5);
        }
        while (v20 > v19 >> 5);
      }
      uint64_t v22 = v19 | (v21 << 32);
      if (v13)
      {
        if (*(_DWORD *)v13 != 1) {
          return 0;
        }
        unsigned int FieldIndex = glpStructTypeGetFieldIndex(v13, (const char *)(a3 + (int)v11), v22);
        if (FieldIndex == -1) {
          return 0;
        }
        unsigned int v24 = FieldIndex;
        uint64_t v25 = *(void *)(*(void *)(v13 + 8) + 8 * FieldIndex);
        unint64_t v26 = glpABIGetStructTypeRangeOfField(0, v13, v10, FieldIndex);
        unint64_t v12 = HIDWORD(v26);
        v45 += v26;
        v10 |= *(void *)(*(void *)(v13 + 16) + 8 * v24) & 0x400;
        uint64_t v22 = v14;
        uint64_t v13 = v25;
      }
      else
      {
        uint64_t v27 = a2(a1, a3 + (int)v11, v22);
        if (v27 == -1)
        {
          uint64_t v13 = 0;
          int v15 = 1;
          uint64_t v44 = a3 + (int)v11;
          uint64_t v14 = v22;
          goto LABEL_43;
        }
        uint64_t v13 = v27;
        if (!v27) {
          return 0;
        }
        unsigned int v28 = glpABIGetTypeSize(0, v27, 0);
        LODWORD(v12) = glpTypeSizeGetSize(v28);
        int v45 = 0;
        uint64_t v44 = a3 + (int)v11;
      }
      unsigned int v11 = v9 + 1;
      if (v9 == a4)
      {
        int v15 = 0;
        uint64_t v14 = v22;
        unsigned int v9 = a4;
        goto LABEL_43;
      }
      uint64_t v18 = (int)v9;
      int v17 = *(unsigned __int8 *)(a3 + (int)v9);
      uint64_t v14 = v22;
      goto LABEL_28;
    }
    int v17 = *(unsigned __int8 *)(a3 + (int)v9);
    if (v17 != 91 && v17 != 46) {
      goto LABEL_43;
    }
    BOOL v16 = v15 != 0;
    if (v9 != v11 || v15) {
      goto LABEL_12;
    }
    if (!*(_DWORD *)v13) {
      return 0;
    }
    uint64_t v18 = (int)v9;
    unsigned int v11 = v9;
LABEL_28:
    if (v17 == 46)
    {
      int v15 = *(_DWORD *)v13;
      if (*(_DWORD *)v13 != 1) {
        return 0;
      }
      unsigned int v11 = v9 + 1;
    }
    else
    {
      if (v17 == 91)
      {
        uint64_t v29 = v18 << 32;
        int v30 = (unsigned __int8 *)(v41 + v18);
        unsigned int v9 = v18;
        while (++v9 < a4)
        {
          int v31 = *v30++;
          v29 += 0x100000000;
          if ((v31 - 48) >= 0xA)
          {
            if (v11 != v9)
            {
              uint64_t v32 = v29 >> 32;
              if (*(unsigned char *)(a3 + (v29 >> 32)) == 93)
              {
                size_t v46 = 0;
                unsigned int v33 = strtoul_l((const char *)(a3 + (int)v11), &v46, 10, 0);
                if (*(_DWORD *)v13 == 2 && *(unsigned char *)(a3 + v32) == 93)
                {
                  unsigned int v34 = v33;
                  if (*(_DWORD *)(v13 + 4) > v33)
                  {
                    unsigned int v11 = v9 + 1;
                    uint64_t v13 = *(void *)(v13 + 16);
                    unsigned int v35 = glpABIGetTypeSize(0, v13, 0);
                    v45 += glpTypeSizeGetSize(v35) * v34;
                    unsigned int v36 = glpABIGetTypeSize(0, v13, 0);
                    LODWORD(v12) = glpTypeSizeGetSize(v36);
                    goto LABEL_39;
                  }
                }
              }
            }
            return 0;
          }
        }
        return 0;
      }
LABEL_39:
      int v15 = 0;
    }
LABEL_43:
    ++v9;
  }
  while (v9 <= a4);
  if (v15) {
    return 0;
  }
LABEL_46:
  *a5 = v44;
  a5[1] = v14;
  *a6 = v13;
  uint64_t result = 1;
  *a7 = v45;
  a7[1] = v12;
  return result;
}

uint64_t glpTypeHumanReadableDescription(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  switch(*(_DWORD *)a1)
  {
    case 0:
      unint64_t v12 = glpPrimitiveTypeToString(*(_DWORD *)(a1 + 4));
      unsigned int v13 = strlen(v12);
      if (v13 >> 5 < v13)
      {
        unsigned int v14 = v13;
        unsigned int v15 = v13;
        do
        {
          v15 ^= 32 * v15 + (v15 >> 2) + v12[v14 - 1];
          v14 += ~(v13 >> 5);
        }
        while (v14 > v13 >> 5);
      }
      goto LABEL_20;
    case 1:
      unint64_t v12 = *(char **)(a1 + 32);
      goto LABEL_20;
    case 2:
    case 3:
      StringBuffer = glpMakeStringBuffer(a4);
      humanReadableDescriptionToBuffer(*(_DWORD **)(a1 + 16), StringBuffer);
      if (*(_DWORD *)(a1 + 4) == -1) {
        glpStringBufferAppendFormat(StringBuffer, "[]", v6, v7, v8, v9, v10, v11, v20);
      }
      else {
        glpStringBufferAppendFormat(StringBuffer, "[%u]", v6, v7, v8, v9, v10, v11, *(_DWORD *)(a1 + 4));
      }
      goto LABEL_17;
    case 4:
      StringBuffer = glpMakeStringBuffer(a4);
      humanReadableDescriptionToBuffer(*(_DWORD **)(a1 + 32), StringBuffer);
      glpStringBufferAppendCString(StringBuffer, " ");
      glpStringBufferAppendString(StringBuffer, a2, a3);
      glpStringBufferAppendCString(StringBuffer, "(");
      if (*(_DWORD *)(a1 + 4))
      {
        unint64_t v18 = 0;
        do
        {
          if (v18) {
            glpStringBufferAppendCString(StringBuffer, ", ");
          }
          humanReadableDescriptionToBuffer(*(_DWORD **)(*(void *)(a1 + 8) + 8 * v18++), StringBuffer);
        }
        while (v18 < *(unsigned int *)(a1 + 4));
      }
      glpStringBufferAppendCString(StringBuffer, ")");
LABEL_17:
      uint64_t result = glpStringBufferGetString((uint64_t)StringBuffer);
      break;
    case 5:
      unint64_t v12 = *(char **)(a1 + 16);
LABEL_20:
      uint64_t result = (uint64_t)v12;
      break;
    default:
      abort();
  }
  return result;
}

_DWORD *humanReadableDescriptionToBuffer(_DWORD *result, uint64_t *a2)
{
  switch(*result)
  {
    case 0:
      uint64_t v3 = glpPrimitiveTypeToString(result[1]);
      goto LABEL_4;
    case 1:
      uint64_t v4 = *((void *)result + 4);
      uint64_t v5 = *((void *)result + 5);
      goto LABEL_9;
    case 2:
    case 3:
      humanReadableDescriptionToBuffer(*((void *)result + 2), a2);
      uint64_t v3 = "[]";
LABEL_4:
      uint64_t result = glpStringBufferAppendCString(a2, v3);
      break;
    case 4:
      abort();
    case 5:
      uint64_t v4 = *((void *)result + 2);
      uint64_t v5 = *((void *)result + 3);
LABEL_9:
      uint64_t result = (_DWORD *)glpStringBufferAppendString(a2, v4, v5);
      break;
    default:
      return result;
  }
  return result;
}

void *glpDumpTypeToStringBuffer(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a2)
  {
    uint64_t v10 = a2;
    while (1)
    {
      if (*(_DWORD *)v10 != 5)
      {
        switch(*(_DWORD *)v10)
        {
          case 0:
            char v35 = glpPrimitiveTypeToString(*(_DWORD *)(v10 + 4));
            return (void *)glpStringBufferAppendFormat(a1, "%s", v14, v15, v16, v17, v18, v19, v35);
          case 1:
            return (void *)glpStringBufferAppendFormat(a1, "struct %.*s", a3, a4, a5, a6, a7, a8, *(void *)(v10 + 40));
          case 2:
            char v20 = "array<";
            goto LABEL_15;
          case 3:
            char v20 = "bank<";
LABEL_15:
            glpStringBufferAppendCString(a1, v20);
            glpDumpTypeToStringBuffer(a1, *(void *)(v10 + 16));
            if (*(_DWORD *)(v10 + 4) != -1) {
              return (void *)glpStringBufferAppendFormat(a1, ", %u>", v21, v22, v23, v24, v25, v26, *(_DWORD *)(v10 + 4));
            }
            return glpStringBufferAppendCString(a1, ", ?>");
          case 4:
            glpDumpTypeToStringBuffer(a1, *(void *)(v10 + 32));
            glpStringBufferAppendFormat(a1, " (*)(", v27, v28, v29, v30, v31, v32, v34);
            if (*(_DWORD *)(v10 + 4))
            {
              unint64_t v33 = 0;
              do
              {
                if (v33) {
                  glpStringBufferAppendFormat(a1, ", ", a3, a4, a5, a6, a7, a8, v36);
                }
                glpDumpTypeToStringBuffer(a1, *(void *)(*(void *)(v10 + 8) + 8 * v33++));
              }
              while (v33 < *(unsigned int *)(v10 + 4));
            }
            unsigned int v13 = ")";
            goto LABEL_7;
          default:
            abort();
        }
      }
      uint64_t result = (void *)glpStringBufferAppendFormat(a1, "subroutine %.*s: ", a3, a4, a5, a6, a7, a8, *(void *)(v10 + 24));
      unint64_t v12 = *(uint64_t **)(v10 + 8);
      if (!v12) {
        break;
      }
      uint64_t v10 = *v12;
      if (!*v12) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    unsigned int v13 = "NULL";
LABEL_7:
    return (void *)glpStringBufferAppendFormat(a1, v13, a3, a4, a5, a6, a7, a8, a9);
  }
  return result;
}

const char *glpUnaryOperatorStringToSymbol(char *__s2)
{
  if (!strcmp("pos", __s2)) {
    return "+";
  }
  if (!strcmp("neg", __s2)) {
    return "-";
  }
  if (!strcmp("not", __s2)) {
    return "!";
  }
  if (strcmp("comp", __s2)) {
    abort();
  }
  return "~";
}

uint64_t glpAnalyzeUnaryMathOp(uint64_t a1, uint64_t a2)
{
  uint64_t Expr = glpUnaryOperatorNodeGetExpr(a2);
  uint64_t Allocator = (void *)glpCompilerGetAllocator(a1);
  glpASTNodeGetLocation(a2, &v11);
  int v6 = glpASTNodeGetKind(a2) - 15;
  uint64_t v7 = "$OP_comp";
  uint64_t v8 = 0xEBA2867D00000008;
  switch(v6)
  {
    case 0:
      uint64_t v7 = "$OP_pos";
      uint64_t v8 = 0xA31C9B1600000007;
      break;
    case 1:
      uint64_t v7 = "$OP_neg";
      uint64_t v8 = 0x34DF279C00000007;
      break;
    case 2:
      uint64_t v7 = "$OP_not";
      uint64_t v8 = 0x9366A7C400000007;
      break;
    case 3:
      break;
    default:
      abort();
  }
  uint64_t UnopFuncallFragment = glpMakeUnopFuncallFragment(Allocator, &v11, (uint64_t)v7, v8, Expr);
  return glpSANode(a1, UnopFuncallFragment);
}

const char *glpBinaryOperatorStringToSymbol(char *__s2)
{
  if (!strcmp("slt", __s2)) {
    return "<";
  }
  if (!strcmp("sle", __s2)) {
    return "<=";
  }
  if (!strcmp("sgt", __s2)) {
    return ">";
  }
  if (!strcmp("sge", __s2)) {
    return ">=";
  }
  if (!strcmp("seq", __s2)) {
    return "==";
  }
  if (!strcmp("sne", __s2)) {
    return "!=";
  }
  if (!strcmp("mul", __s2)) {
    return "*";
  }
  if (!strcmp("div", __s2)) {
    return "/";
  }
  if (!strcmp("mod", __s2)) {
    return "%";
  }
  if (!strcmp("add", __s2)) {
    return "+";
  }
  if (!strcmp("sub", __s2)) {
    return "-";
  }
  if (!strcmp("and", __s2)) {
    return "&";
  }
  if (!strcmp("or", __s2)) {
    return "|";
  }
  if (!strcmp("xor", __s2)) {
    return "^";
  }
  if (!strcmp("shl", __s2)) {
    return "<<";
  }
  if (!strcmp("shr", __s2)) {
    return ">>";
  }
  if (!strcmp("anl", __s2)) {
    return "&&";
  }
  if (!strcmp("orl", __s2)) {
    return "||";
  }
  if (strcmp("xrl", __s2)) {
    abort();
  }
  return "^^";
}

uint64_t glpAnalyzeBinaryMathOp(uint64_t a1, uint64_t a2)
{
  uint64_t Lhs = glpBinaryOperatorNodeGetLhs(a2);
  uint64_t Rhs = glpBinaryOperatorNodeGetRhs(a2);
  uint64_t Allocator = (void *)glpCompilerGetAllocator(a1);
  glpASTNodeGetLocation(a2, &v12);
  int v7 = glpASTNodeGetKind(a2) - 19;
  uint64_t v8 = "$OP_xrl";
  uint64_t v9 = 0xCB2BD55100000007;
  switch(v7)
  {
    case 0:
      uint64_t v8 = "$OP_mul";
      uint64_t v9 = 0x952C13B700000007;
      break;
    case 1:
      uint64_t v8 = "$OP_div";
      uint64_t v9 = 0xF835D66B00000007;
      break;
    case 2:
      uint64_t v8 = "$OP_mod";
      uint64_t v9 = 0x2827016500000007;
      break;
    case 3:
      uint64_t v8 = "$OP_add";
      uint64_t v9 = 0xBD95F1700000007;
      break;
    case 4:
      uint64_t v8 = "$OP_sub";
      uint64_t v9 = 0x597AE55300000007;
      break;
    case 5:
      uint64_t v8 = "$OP_shl";
      uint64_t v9 = 0xC08132B300000007;
      break;
    case 6:
      uint64_t v8 = "$OP_shr";
      uint64_t v9 = 0x4CDCFCD000000007;
      break;
    case 7:
      uint64_t v8 = "$OP_slt";
      uint64_t v9 = 0x7B30B0FF00000007;
      break;
    case 8:
      uint64_t v8 = "$OP_sle";
      uint64_t v9 = 0xA153270000000007;
      break;
    case 9:
      uint64_t v8 = "$OP_sgt";
      uint64_t v9 = 0x1F55519B00000007;
      break;
    case 10:
      uint64_t v8 = "$OP_sge";
      uint64_t v9 = 0x1B1FEDA500000007;
      break;
    case 11:
      uint64_t v8 = "$OP_seq";
      uint64_t v9 = 0x8C71514400000007;
      break;
    case 12:
      uint64_t v8 = "$OP_sne";
      uint64_t v9 = 0x97C1FFE700000007;
      break;
    case 13:
      uint64_t v8 = "$OP_anl";
      uint64_t v9 = 0x6C41D90B00000007;
      break;
    case 14:
      uint64_t v8 = "$OP_orl";
      uint64_t v9 = 0xCEE17B3300000007;
      break;
    case 15:
      break;
    case 16:
      uint64_t v8 = "$OP_and";
      uint64_t v9 = 0x2CFF98A600000007;
      break;
    case 17:
      uint64_t v8 = "$OP_or";
      uint64_t v9 = 0x77FE58B000000006;
      break;
    case 18:
      uint64_t v8 = "$OP_xor";
      uint64_t v9 = 0x8ADCA24100000007;
      break;
    default:
      abort();
  }
  uint64_t BinopFuncallFragment = glpMakeBinopFuncallFragment(Allocator, &v12, (uint64_t)v8, v9, Lhs, Rhs);
  return glpSANode(a1, BinopFuncallFragment);
}

uint64_t glpCheckAndSanitizeConstructorCall(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = glpConstructorCallNodeGetType(a2);
  uint64_t SaType = (int *)glpASTNodeGetSaType(v4);
  switch(glpTypeGetKind((unsigned int *)SaType))
  {
    case 0u:
      uint64_t PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)SaType);
      if (glpPrimitiveTypeGetCategory(PrimitiveType) - 1 > 2)
      {
        Infouint64_t Log = (uint64_t **)glpCompilerGetInfoLog(a1);
        glpASTNodeGetLocation(a2, &v51);
        char v49 = glpPrimitiveTypeToString(PrimitiveType);
        glpLogMessage(InfoLog, 0, (uint64_t)&v51, "Primitive type '%s' can't be constructed", v30, v31, v32, v33, v49);
        return glpSAFailed();
      }
      int v7 = glpCallNodeGetArgCount(a2);
      if (!v7)
      {
        char v36 = (uint64_t **)glpCompilerGetInfoLog(a1);
        glpASTNodeGetLocation(a2, &v52);
        uint64_t v41 = "Constructor of primitive type must have at least one argument";
        uint64_t v42 = &v52;
LABEL_31:
        glpLogMessage(v36, 0, (uint64_t)v42, v41, v37, v38, v39, v40, v48);
        return glpSAFailed();
      }
      if (v7 != 1) {
        goto LABEL_6;
      }
      uint64_t v8 = glpCallNodeGetArg(a2, 0);
      uint64_t v9 = (unsigned int *)glpASTNodeGetSaType(v8);
      if (glpTypeGetKind(v9)) {
        goto LABEL_6;
      }
      unsigned int v46 = glpPrimitiveTypeGetPrimitiveType((uint64_t)v9);
      int Category = glpPrimitiveTypeGetCategory(v46);
      if (Category == 3)
      {
        char v11 = 0;
        char v10 = 1;
      }
      else
      {
        if (Category == 1) {
          char v10 = 0;
        }
        else {
LABEL_6:
        }
          char v10 = 1;
        char v11 = 1;
      }
      int v12 = glpPrimitiveTypeGetCategory(PrimitiveType);
      if (v12 != 3)
      {
        if (v12 == 2)
        {
          if ((v10 & 1) == 0) {
            return _checkAndSanitizeSplat(a1, a2, PrimitiveType);
          }
        }
        else if (v12 != 1)
        {
LABEL_11:
          abort();
        }
        return _checkAndSanitizeComponentwiseConstructorCall(a1, a2, PrimitiveType);
      }
      if ((v10 & 1) == 0) {
        return _checkAndSanitizeDiagonalMatrixConstructorCall(a1, a2, PrimitiveType);
      }
      if (v11) {
        return _checkAndSanitizeComponentwiseConstructorCall(a1, a2, PrimitiveType);
      }
      uint64_t NameTable = glpCompilerGetNameTable(a1);
      if (glpNameTableGetGLSLVersion(NameTable) != 1) {
        return _checkAndSanitizeSubOrSuperMatrixConstructorCall(a1, a2, PrimitiveType);
      }
      char v36 = (uint64_t **)glpCompilerGetInfoLog(a1);
      glpASTNodeGetLocation(a2, &v64);
      uint64_t v41 = "GLSL 110 does not allow sub- or super-matrix constructors";
      uint64_t v42 = &v64;
      goto LABEL_31;
    case 1u:
      v64.n128_u64[0] = 0;
      v64.n128_u64[1] = (unint64_t)&v64;
      uint64_t v65 = 0x2000000000;
      uint64_t v66 = 96;
      v52.n128_u64[0] = MEMORY[0x263EF8330];
      v52.n128_u64[1] = 0x40000000;
      uint64_t v53 = ___checkAndSanitizeStructConstructorCall_block_invoke;
      int v54 = &unk_264D9A288;
      int v55 = &v64;
      size_t v56 = SaType;
      uint64_t v57 = a1;
      if (_checkConstructorArgs(a1, a2, (uint64_t)&v52)) {
        uint64_t v13 = _elementwiseConstructor(a1, a2, (uint64_t)SaType, 0, *(void *)(v64.n128_u64[1] + 24));
      }
      else {
        uint64_t v13 = glpSAFailed();
      }
      uint64_t v34 = v13;
      goto LABEL_26;
    case 2u:
      if (!glpTypeIsSized(SaType))
      {
        uint64_t Allocator = glpCompilerGetAllocator(a1);
        uint64_t ElementType = glpArrayTypeGetElementType((uint64_t)SaType);
        int v16 = glpCallNodeGetArgCount(a2);
        uint64_t SaType = (int *)glpMakeArrayType(Allocator, ElementType, v16, -1);
      }
      uint64_t v17 = glpArrayTypeGetElementType((uint64_t)SaType);
      v64.n128_u64[0] = 0;
      v64.n128_u64[1] = (unint64_t)&v64;
      uint64_t v65 = 0x2000000000;
      uint64_t v66 = 0;
      uint64_t v60 = 0;
      int v61 = &v60;
      uint64_t v62 = 0x2000000000;
      uint64_t v63 = 96;
      v52.n128_u64[0] = MEMORY[0x263EF8330];
      v52.n128_u64[1] = 0x40000000;
      uint64_t v53 = ___checkAndSanitizeArrayConstructorCall_block_invoke;
      int v54 = &unk_264D9A240;
      int v55 = &v64;
      size_t v56 = (int *)&v60;
      uint64_t v57 = v17;
      uint64_t v58 = a1;
      BOOL v59 = SaType;
      if (_checkConstructorArgs(a1, a2, (uint64_t)&v52))
      {
        unint64_t v18 = v64.n128_u64[1];
        if (v61[3]) {
          goto LABEL_18;
        }
        if (!*(void *)(v64.n128_u64[1] + 24))
        {
          uint64_t v19 = 0;
          goto LABEL_19;
        }
        DoesTypeRequirePrecisiounint64_t n = glpCompilerDoesTypeRequirePrecision(a1, (unsigned int *)SaType);
        unint64_t v18 = v64.n128_u64[1];
        if (!DoesTypeRequirePrecision)
        {
LABEL_18:
          uint64_t v19 = 0;
          *(void *)(v18 + 24) = 0;
        }
        else
        {
          uint64_t v19 = *(void *)(v64.n128_u64[1] + 24);
        }
LABEL_19:
        uint64_t v20 = _elementwiseConstructor(a1, a2, (uint64_t)SaType, v19, v61[3]);
        goto LABEL_25;
      }
      uint64_t v20 = glpSAFailed();
LABEL_25:
      uint64_t v34 = v20;
      _Block_object_dispose(&v60, 8);
LABEL_26:
      _Block_object_dispose(&v64, 8);
      return v34;
    case 5u:
      uint64_t v21 = (void *)glpCompilerGetAllocator(a1);
      glpTypeHumanReadableDescription((uint64_t)SaType, (uint64_t)"<<BUG: unexpected function type>>", 0x92C8B9C800000021, v21);
      char v23 = v22;
      uint64_t v24 = (uint64_t **)glpCompilerGetInfoLog(a1);
      glpASTNodeGetLocation(a2, &v50);
      glpLogMessage(v24, 0, (uint64_t)&v50, "Subroutine type '%.*s' can't be constructed", v25, v26, v27, v28, v23);
      return glpSAFailed();
    default:
      goto LABEL_11;
  }
}

uint64_t glpLowerNonatomicTypeConversion(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = glpTypeConversionNodeGetToType(a2);
  uint64_t v5 = glpTypeConversionNodeGetToPrecision(a2);
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t Expr = glpUnaryOperatorNodeGetExpr(a2);
  glpHandleSideEffectsForExpr(a1, Expr, &v18, &v19);
  uint64_t Allocator = glpCompilerGetAllocator(a1);
  v16.n128_u64[0] = (unint64_t)"-1";
  v16.n128_u64[1] = 0xEDA00000002;
  uint64_t v17 = 0xFFFFFFFFLL;
  glpMakeCommaExprNode(Allocator, &v16, 0);
  uint64_t v9 = v8;
  uint64_t v10 = v19;
  if (v19)
  {
    char v11 = (void *)glpCompilerGetAllocator(a1);
    glpCommaExprNodeAddExpr(v11, v9, v10);
  }
  uint64_t v12 = v18;
  char SaFlags = glpASTNodeGetSaFlags(v18);
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 0x40000000;
  uint64_t v15[2] = __glpLowerNonatomicTypeConversion_block_invoke;
  v15[3] = &__block_descriptor_tmp_10;
  v15[4] = a1;
  v15[5] = v12;
  return _constructor(a1, v4, v9, v5, SaFlags & 0x60, (uint64_t)v15);
}

uint64_t glpHandleSideEffectsForExpr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = glpFlattenCommaTree(a1, a2);
  uint64_t v8 = glpSANode(a1, v7);
  uint64_t v9 = glpCommaResult(v8);
  uint64_t result = glpASTNodeGetKind(v9);
  if ((result - 81) >= 2)
  {
    if (result == 3)
    {
      if (v9 == v8) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = v8;
      }
      *a4 = v34;
      *a3 = v9;
    }
    else
    {
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      _tempForExpr(a1, v8, &v44, &v43);
      uint64_t Allocator = glpCompilerGetAllocator(a1);
      v45.n128_u64[0] = (unint64_t)"-1";
      v45.n128_u64[1] = 0xEDA00000002;
      uint64_t v46 = 0xFFFFFFFFLL;
      glpMakeCommaExprNode(Allocator, &v45, 0);
      uint64_t v37 = v36;
      uint64_t v38 = (void *)glpCompilerGetAllocator(a1);
      glpCommaExprNodeAddExpr(v38, v37, v44);
      uint64_t v39 = (void *)glpCompilerGetAllocator(a1);
      uint64_t v40 = v43;
      uint64_t v41 = (uint64_t *)glpCompilerGetAllocator(a1);
      uint64_t v42 = glpDeepCopyASTNode(v41, v40, (uint64_t (*)(uint64_t, uint64_t *, _DWORD *))getAccessorReplaceCallback, 0);
      uint64_t result = (uint64_t)glpCommaExprNodeAddExpr(v39, v37, v42);
      *a4 = v37;
      *a3 = v40;
    }
  }
  else
  {
    if (v9 == v8)
    {
      uint64_t v11 = glpCompilerGetAllocator(a1);
      v45.n128_u64[0] = (unint64_t)"-1";
      v45.n128_u64[1] = 0xEDA00000002;
      uint64_t v46 = 0xFFFFFFFFLL;
      glpMakeCommaExprNode(v11, &v45, 0);
      uint64_t v13 = v12;
      uint64_t v14 = (void *)glpCompilerGetAllocator(a1);
      glpCommaExprNodeAddExpr(v14, v13, v8);
      uint64_t v8 = v13;
    }
    uint64_t Offset = glpDerefNodeGetOffset(v9);
    if (Offset)
    {
      uint64_t v16 = Offset;
      uint64_t BankIndex = glpOffsetNodeGetBankIndex(Offset);
      if (BankIndex)
      {
        uint64_t v18 = BankIndex;
        if (!glpIsConstantNode(BankIndex))
        {
          uint64_t v44 = 0;
          v45.n128_u64[0] = 0;
          _tempForExpr(a1, v18, (uint64_t *)&v45, &v44);
          uint64_t v19 = (void *)glpCompilerGetAllocator(a1);
          uint64_t v20 = v45.n128_u64[0];
          int ExprCount = glpCommaExprNodeGetExprCount(v8);
          glpCommaExprNodeInsertExpr(v19, v8, v20, ExprCount - 1);
          glpOffsetNodeSetBankIndex(v16, v44);
        }
      }
      Offsetuint64_t Expr = glpOffsetNodeGetOffsetExpr(v16);
      if (OffsetExpr)
      {
        uint64_t v23 = OffsetExpr;
        if (!glpIsConstantNode(OffsetExpr))
        {
          uint64_t v44 = 0;
          v45.n128_u64[0] = 0;
          _tempForExpr(a1, v23, (uint64_t *)&v45, &v44);
          uint64_t v24 = (void *)glpCompilerGetAllocator(a1);
          uint64_t v25 = v45.n128_u64[0];
          int v26 = glpCommaExprNodeGetExprCount(v8);
          glpCommaExprNodeInsertExpr(v24, v8, v25, v26 - 1);
          glpOffsetNodeSetOffsetExpr(v16, v44);
        }
      }
      VectorElementuint64_t Expr = glpOffsetNodeGetVectorElementExpr(v16);
      if (VectorElementExpr)
      {
        uint64_t v28 = VectorElementExpr;
        if (!glpIsConstantNode(VectorElementExpr))
        {
          uint64_t v44 = 0;
          v45.n128_u64[0] = 0;
          _tempForExpr(a1, v28, (uint64_t *)&v45, &v44);
          uint64_t v29 = (void *)glpCompilerGetAllocator(a1);
          uint64_t v30 = v45.n128_u64[0];
          int v31 = glpCommaExprNodeGetExprCount(v8);
          glpCommaExprNodeInsertExpr(v29, v8, v30, v31 - 1);
          glpOffsetNodeSetVectorElementExpr(v16, v44);
        }
      }
    }
    if (glpCommaExprNodeGetExprCount(v8) == 1) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v8;
    }
    *a4 = v32;
    uint64_t v33 = (uint64_t *)glpCompilerGetAllocator(a1);
    uint64_t result = glpDeepCopyASTNode(v33, v9, (uint64_t (*)(uint64_t, uint64_t *, _DWORD *))getAccessorReplaceCallback, 0);
    *a3 = result;
  }
  if (*a4)
  {
    uint64_t result = glpSANode(a1, *a4);
    *a4 = result;
  }
  return result;
}

uint64_t _constructor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t Allocator = glpCompilerGetAllocator(a1);
  glpASTNodeGetLocation(a3, &v34);
  glpMakeCommaExprNode(Allocator, &v34, 0);
  uint64_t v14 = v13;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t Temporary = glpMakeTemporary(a1, a2, a4, 0, &v33, &v32);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a6 + 16))(a6, v32, v14);
  uint64_t v16 = v33;
  unint64_t v17 = glpASTNodeGetSaFlags(v33) & 0xFFFFFFFFFFFFFF7FLL;
  glpASTNodeSetSaFlags(v16, v17);
  *(void *)(glpVariableDeclarationNodeGetExtra(v16) + 48) = v17;
  uint64_t v18 = glpSANode(a1, v14);
  glpVariableDeclarationNodeSetInitializer(v16, v18);
  uint64_t v19 = glpCompilerGetAllocator(a1);
  uint64_t ValueHash = glpCompilerGetValueHash(a1);
  uint64_t v21 = glpConstantFold(v19, ValueHash, v16);
  char v22 = (void *)glpCompilerGetAllocator(a1);
  glpCommaExprNodeAddExpr(v22, a3, v21);
  uint64_t v23 = (void *)glpCompilerGetAllocator(a1);
  uint64_t v24 = glpCompilerGetAllocator(a1);
  glpASTNodeGetLocation(a3, &v31);
  glpMakeVariableIdentifierNode(v24, &v31, *(void *)(Temporary + 32), *(void *)(Temporary + 40));
  glpCommaExprNodeAddExpr(v23, a3, v25);
  uint64_t v26 = glpSANode(a1, a3);
  uint64_t Expr = v26;
  if (glpIsCommaExprNode(v26))
  {
    int ExprCount = glpCommaExprNodeGetExprCount(v26);
    uint64_t Expr = glpCommaExprNodeGetExpr(v26, ExprCount - 1);
  }
  if (glpIsConstantNode(Expr))
  {
    uint64_t SaFlags = glpASTNodeGetSaFlags(Expr);
    glpASTNodeSetSaFlags(Expr, SaFlags | a5);
    return Expr;
  }
  return v26;
}

uint64_t __glpLowerNonatomicTypeConversion_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = glpGetAccessorCount(a2);
  if (result)
  {
    int v7 = result;
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t Accessor = glpMakeAccessor(v9, a2, v8);
      uint64_t v11 = glpSANode(v9, Accessor);
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = glpMakeAccessor(v12, *(void *)(a1 + 40), v8);
      uint64_t v14 = glpSANode(v12, v13);
      uint64_t Allocator = glpCompilerGetAllocator(*(void *)(a1 + 32));
      v19.n128_u64[0] = (unint64_t)"-1";
      v19.n128_u64[1] = 0xEDA00000002;
      uint64_t v20 = 0xFFFFFFFFLL;
      uint64_t AssignNode = glpMakeAssignNode(Allocator, &v19, 0);
      glpBinaryOperatorNodeSetLhs(AssignNode, v11);
      glpBinaryOperatorNodeSetRhs(AssignNode, v14);
      uint64_t v17 = glpSANode(*(void *)(a1 + 32), AssignNode);
      uint64_t v18 = (void *)glpCompilerGetAllocator(*(void *)(a1 + 32));
      uint64_t result = (uint64_t)glpCommaExprNodeAddExpr(v18, a3, v17);
      uint64_t v8 = (v8 + 1);
    }
    while (v7 != v8);
  }
  return result;
}

uint64_t glpGetAccessorCount(uint64_t a1)
{
  uint64_t SaType = (unsigned int *)glpASTNodeGetSaType(a1);
  int Kind = glpTypeGetKind(SaType);
  if (Kind == 2)
  {
    return glpArrayTypeGetElementCount((uint64_t)SaType);
  }
  else if (Kind == 1)
  {
    return glpAggregateTypeGetElementCount((uint64_t)SaType);
  }
  else
  {
    if (Kind
      || (unsigned int PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)SaType),
          glpPrimitiveTypeGetCategory(PrimitiveType) != 3))
    {
      abort();
    }
    int v4 = glpPrimitiveTypeGetPrimitiveType((uint64_t)SaType);
    return glpPrimitiveMatrixGetColumns(v4);
  }
}

uint64_t glpMakeAccessor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t SaType = (unsigned int *)glpASTNodeGetSaType(a2);
  int Kind = glpTypeGetKind(SaType);
  if (Kind == 2)
  {
LABEL_5:
    uint64_t Allocator = glpCompilerGetAllocator(a1);
    uint64_t v10 = (uint64_t *)glpCompilerGetAllocator(a1);
    uint64_t v11 = glpDeepCopyASTNode(v10, a2, (uint64_t (*)(uint64_t, uint64_t *, _DWORD *))getAccessorReplaceCallback, 0);
    uint64_t IntConstant = glpCompilerGetIntConstant(a1, a3);
    v20.n128_u64[0] = (unint64_t)"-1";
    v20.n128_u64[1] = 0xEDA00000002;
    uint64_t v21 = 0xFFFFFFFFLL;
    return glpMakeArrayAccessFragment(Allocator, &v20, v11, IntConstant);
  }
  if (Kind != 1)
  {
    if (Kind
      || (unsigned int PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)SaType),
          glpPrimitiveTypeGetCategory(PrimitiveType) != 3))
    {
      abort();
    }
    goto LABEL_5;
  }
  uint64_t v14 = glpCompilerGetAllocator(a1);
  uint64_t FieldName = glpStructTypeGetFieldName((uint64_t)SaType, a3);
  uint64_t v17 = v16;
  uint64_t v18 = (uint64_t *)glpCompilerGetAllocator(a1);
  uint64_t v19 = glpDeepCopyASTNode(v18, a2, (uint64_t (*)(uint64_t, uint64_t *, _DWORD *))getAccessorReplaceCallback, 0);
  v20.n128_u64[0] = (unint64_t)"-1";
  v20.n128_u64[1] = 0xEDA00000002;
  uint64_t v21 = 0xFFFFFFFFLL;
  return glpMakeFieldAccessFragment(v14, &v20, FieldName, v17, v19);
}

uint64_t glpMakeTemporary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void *a6)
{
  uint64_t v12 = glpCompilerNewTempName(a1);
  uint64_t v14 = v13;
  uint64_t v30 = 0;
  uint64_t Allocator = glpCompilerGetAllocator(a1);
  v27.n128_u64[0] = (unint64_t)"-1";
  v27.n128_u64[1] = 0xEDA00000002;
  uint64_t v28 = 0xFFFFFFFFLL;
  uint64_t TypedVariableFragment = glpMakeTypedVariableFragment(Allocator, &v27, (uint64_t)v12, v14, &v30, a4);
  glpASTNodeSetSaFlags(v30, a3);
  glpASTNodeSetSaType(v30, a2);
  uint64_t v17 = glpSANode(a1, TypedVariableFragment);
  v27.n128_u64[0] = 0;
  v27.n128_u64[1] = (unint64_t)&v27;
  uint64_t v28 = 0x2000000000;
  uint64_t v29 = 0;
  uint64_t NameTable = glpCompilerGetNameTable(a1);
  v26[0] = MEMORY[0x263EF8330];
  v26[1] = 0x40000000;
  v26[2] = __glpMakeTemporary_block_invoke;
  void v26[3] = &unk_264D9A1A8;
  v26[4] = &v27;
  glpNameTableGet(NameTable, v12, v14, 0, (uint64_t)v26);
  if (v17)
  {
    uint64_t SaFlags = glpASTNodeGetSaFlags(v17);
    glpASTNodeSetSaFlags(v17, SaFlags & 0xFFFFFFFF7FFFFFFFLL);
  }
  *(void *)(*(void *)(v27.n128_u64[1] + 24) + 48) &= ~0x80000000uLL;
  *a5 = v17;
  uint64_t v20 = glpCompilerGetAllocator(a1);
  v24.n128_u64[0] = (unint64_t)"-1";
  v24.n128_u64[1] = 0xEDA00000002;
  uint64_t v25 = 0xFFFFFFFFLL;
  glpMakeVariableIdentifierNode(v20, &v24, (uint64_t)v12, v14);
  *a6 = glpSANode(a1, v21);
  uint64_t v22 = *(void *)(v27.n128_u64[1] + 24);
  _Block_object_dispose(&v27, 8);
  return v22;
}

uint64_t __glpMakeTemporary_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a3;
  *a5 = 1;
  return result;
}

uint64_t _tempForExpr(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  char SaFlags = glpASTNodeGetSaFlags(a2);
  if ((SaFlags & 0x60) != 0) {
    uint64_t v9 = SaFlags & 0x60;
  }
  else {
    uint64_t v9 = 256;
  }
  uint64_t v10 = glpASTNodeGetSaFlags(a2) & 0x1F;
  uint64_t SaType = glpASTNodeGetSaType(a2);

  return glpMakeTemporary(a1, SaType, v9 | v10, a2, a3, a4);
}

uint64_t glpDuplicateDerefOrConstant(uint64_t a1, uint64_t a2)
{
  uint64_t Allocator = (uint64_t *)glpCompilerGetAllocator(a1);

  return glpDeepCopyASTNode(Allocator, a2, (uint64_t (*)(uint64_t, uint64_t *, _DWORD *))getAccessorReplaceCallback, 0);
}

uint64_t glpMangleSideEffectsWithNewResult(void *a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return a3;
  }
  uint64_t v4 = a2;
  if (glpIsCommaExprNode(a2))
  {
    int ExprCount = glpCommaExprNodeGetExprCount(v4);
    glpCommaExprNodeSetExpr(v4, ExprCount - 1, a3);
    uint64_t SaType = glpASTNodeGetSaType(a3);
    glpASTNodeSetSaType(v4, SaType);
    uint64_t SaFlags = glpASTNodeGetSaFlags(a3);
    glpASTNodeSetSaFlags(v4, SaFlags);
  }
  else
  {
    glpASTNodeGetLocation(a3, &v14);
    glpMakeCommaExprNode((uint64_t)a1, &v14, 0);
    uint64_t v10 = v9;
    glpCommaExprNodeAddExpr(a1, v9, v4);
    glpCommaExprNodeAddExpr(a1, v10, a3);
    uint64_t v11 = glpASTNodeGetSaType(a3);
    glpASTNodeSetSaType(v10, v11);
    uint64_t v12 = glpASTNodeGetSaFlags(a3);
    glpASTNodeSetSaFlags(v10, v12);
    return v10;
  }
  return v4;
}

uint64_t getAccessorReplaceCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int Kind = glpASTNodeGetKind(a3);
  if (Kind == 80)
  {
    uint64_t Extra = (_OWORD *)glpOffsetNodeGetExtra(a3);
    int v7 = (_OWORD *)(*(uint64_t (**)(void, uint64_t, const char *))(a2 + 8))(*(void *)a2, 32, "Offset Object (accessor replacement)");
    long long v8 = Extra[1];
    *int v7 = *Extra;
    v7[1] = v8;
    glpOffsetNodeSetExtra(a3, (uint64_t)v7);
  }
  else if (Kind == 7 || Kind == 39)
  {
    abort();
  }
  return a3;
}

uint64_t glpGetScalarAccessorCount(uint64_t a1)
{
  uint64_t SaType = glpASTNodeGetSaType(a1);
  uint64_t PrimitiveType = glpPrimitiveTypeGetPrimitiveType(SaType);
  uint64_t result = glpPrimitiveTypeGetCategory(PrimitiveType);
  if (result != 1)
  {
    if (result != 2) {
      abort();
    }
    return glpPrimitiveVectorGetLength(PrimitiveType);
  }
  return result;
}

uint64_t glpMakeScalarAccessor(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t SaType = glpASTNodeGetSaType(a2);
  unsigned int PrimitiveType = glpPrimitiveTypeGetPrimitiveType(SaType);
  int Category = glpPrimitiveTypeGetCategory(PrimitiveType);
  if (Category == 2)
  {
    uint64_t Allocator = glpCompilerGetAllocator(a1);
    uint64_t v12 = &aXyzw[a3];
    uint64_t v13 = ((unint64_t)(*v12 ^ 1u) << 32) + 0x2000000001;
    __n128 v14 = (uint64_t *)glpCompilerGetAllocator(a1);
    uint64_t v15 = glpDeepCopyASTNode(v14, a2, (uint64_t (*)(uint64_t, uint64_t *, _DWORD *))getAccessorReplaceCallback, 0);
    v16.n128_u64[0] = (unint64_t)"-1";
    v16.n128_u64[1] = 0xEDA00000002;
    uint64_t v17 = 0xFFFFFFFFLL;
    return glpMakeFieldAccessFragment(Allocator, &v16, (uint64_t)v12, v13, v15);
  }
  else
  {
    if (Category != 1) {
      abort();
    }
    uint64_t v9 = (uint64_t *)glpCompilerGetAllocator(a1);
    return glpDeepCopyASTNode(v9, a2, (uint64_t (*)(uint64_t, uint64_t *, _DWORD *))getAccessorReplaceCallback, 0);
  }
}

uint64_t _checkAndSanitizeComponentwiseConstructorCall(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  int ScalarCount = glpPrimitiveTypeGetScalarCount(a3);
  v61[0] = 0;
  v61[1] = v61;
  v61[2] = 0x2000000000;
  int v62 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = &v57;
  uint64_t v59 = 0x2000000000;
  uint64_t v60 = 96;
  uint64_t v53 = 0;
  int v54 = &v53;
  uint64_t v55 = 0x2000000000;
  uint64_t v56 = 0;
  v51[0] = MEMORY[0x263EF8330];
  v51[1] = 0x40000000;
  v51[2] = ___checkAndSanitizeComponentwiseConstructorCall_block_invoke;
  v51[3] = &unk_264D9A1D0;
  v51[4] = &v53;
  v51[5] = &v57;
  v51[6] = v61;
  int v52 = ScalarCount;
  if (!_checkConstructorArgs(a1, a2, (uint64_t)v51))
  {
    uint64_t v41 = glpSAFailed();
    goto LABEL_19;
  }
  int v7 = v54 + 3;
  if (!v58[3])
  {
    if (!*v7) {
      goto LABEL_4;
    }
    unsigned int PrimitiveType = (unsigned int *)glpGetPrimitiveType(a3);
    if (glpCompilerDoesTypeRequirePrecision(a1, PrimitiveType)) {
      goto LABEL_4;
    }
    int v7 = v54 + 3;
  }
  *int v7 = 0;
LABEL_4:
  unsigned int v8 = glpCallNodeGetArgCount(a2);
  doPrecisionWarningsForLowpInt(a1, a2, a3, v54[3]);
  uint64_t v9 = (unsigned int *)glpGetPrimitiveType(a3);
  DoesTypeRequirePrecisiounint64_t n = glpCompilerDoesTypeRequirePrecision(a1, v9);
  if (!DoesTypeRequirePrecision && v8)
  {
    for (unsigned int i = 0; i != v8; ++i)
    {
      uint64_t v12 = glpCallNodeGetArg(a2, i);
      uint64_t SaType = (unsigned int *)glpASTNodeGetSaType(v12);
      DoesTypeRequirePrecisiounint64_t n = glpCompilerDoesTypeRequirePrecision(a1, SaType);
      if (DoesTypeRequirePrecision)
      {
        DoesTypeRequirePrecisiounint64_t n = glpASTNodeGetSaFlags(v12);
        if ((DoesTypeRequirePrecision & 0x1F) == 0)
        {
          uint64_t DefaultPrecisionForType = glpGetDefaultPrecisionForType(a1, SaType);
          if (DefaultPrecisionForType)
          {
            DoesTypeRequirePrecisiounint64_t n = glpPushdownPrecision(a1, v12, DefaultPrecisionForType);
          }
          else
          {
            uint64_t Allocator = (void *)glpCompilerGetAllocator(a1);
            glpTypeHumanReadableDescription((uint64_t)SaType, (uint64_t)"<<BUG: unexpected function type>>", 0x92C8B9C800000021, Allocator);
            char v17 = v16;
            Infouint64_t Log = (uint64_t **)glpCompilerGetInfoLog(a1);
            glpASTNodeGetLocation(a2, &v50);
            DoesTypeRequirePrecisiounint64_t n = (uint64_t)glpLogMessage(InfoLog, 0, (uint64_t)&v50, "Constructor argument of type '%.*s' - precision can not be inferred and no default precision available", v19, v20, v21, v22, v17);
          }
        }
      }
    }
  }
  uint64_t v49 = 0;
  MEMORY[0x270FA5388](DoesTypeRequirePrecision);
  __n128 v24 = (uint64_t *)((char *)&v45 - v23);
  bzero((char *)&v45 - v23, v25);
  uint64_t ArgsAccessible = _makeArgsAccessible(a1, a2, v54[3], v24, &v49);
  unsigned int v48 = 0;
  MEMORY[0x270FA5388](ArgsAccessible);
  uint64_t v28 = &v45 - v27;
  bzero(v28, v29);
  uint64_t v30 = _atomicizeArgs(a1, v8, (uint64_t)v24, &v48, (uint64_t)v28);
  uint64_t v47 = 0;
  LODWORD(v24) = v48;
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = (char *)&v45 - ((v31 + 15) & 0xFFFFFFFF0);
  bzero(v32, v31);
  uint64_t ScalarType = glpPrimitiveTypeGetScalarType(a3);
  _convertAccesses(a1, ScalarType, v54[3], v24, v28, &v47, (uint64_t *)v32);
  uint64_t v34 = glpCompilerGetAllocator(a1);
  glpASTNodeGetLocation(a2, &v46);
  glpMakeCommaExprNode(v34, &v46, 0);
  uint64_t v36 = v35;
  uint64_t v37 = v49;
  if (v49)
  {
    uint64_t v38 = (void *)glpCompilerGetAllocator(a1);
    glpCommaExprNodeAddExpr(v38, v36, v37);
  }
  uint64_t v39 = v47;
  if (v47)
  {
    uint64_t v40 = (void *)glpCompilerGetAllocator(a1);
    glpCommaExprNodeAddExpr(v40, v36, v39);
  }
  uint64_t v41 = _componentwiseConstructor(a1, a3, v36, v54[3], v58[3], (uint64_t)v32);
LABEL_19:
  uint64_t v42 = v41;
  _Block_object_dispose(&v53, 8);
  _Block_object_dispose(&v57, 8);
  _Block_object_dispose(v61, 8);
  return v42;
}

uint64_t _checkAndSanitizeSplat(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v47[1] = *MEMORY[0x263EF8340];
  uint64_t v45 = 0;
  v47[0] = 0;
  _makeArgsAccessible(a1, a2, 0, v47, &v45);
  uint64_t v6 = glpASTNodeGetSaFlags(v47[0]) & 0x1F;
  if (v6)
  {
    unsigned int PrimitiveType = (unsigned int *)glpGetPrimitiveType(a3);
    if (!glpCompilerDoesTypeRequirePrecision(a1, PrimitiveType)) {
      uint64_t v6 = 0;
    }
  }
  doPrecisionWarningsForLowpInt(a1, a2, a3, v6);
  unsigned int v8 = (unsigned int *)glpGetPrimitiveType(a3);
  if (!glpCompilerDoesTypeRequirePrecision(a1, v8))
  {
    uint64_t v30 = glpCallNodeGetArg(a2, 0);
    uint64_t SaType = (unsigned int *)glpASTNodeGetSaType(v30);
    if (glpCompilerDoesTypeRequirePrecision(a1, SaType) && (glpASTNodeGetSaFlags(v30) & 0x1F) == 0)
    {
      uint64_t DefaultPrecisionForType = glpGetDefaultPrecisionForType(a1, SaType);
      if (DefaultPrecisionForType)
      {
        glpPushdownPrecision(a1, v30, DefaultPrecisionForType);
      }
      else
      {
        uint64_t Allocator = (void *)glpCompilerGetAllocator(a1);
        glpTypeHumanReadableDescription((uint64_t)SaType, (uint64_t)"<<BUG: unexpected function type>>", 0x92C8B9C800000021, Allocator);
        char v35 = v34;
        Infouint64_t Log = (uint64_t **)glpCompilerGetInfoLog(a1);
        glpASTNodeGetLocation(a2, &v44);
        glpLogMessage(InfoLog, 0, (uint64_t)&v44, "Constructor argument of type '%.*s' - precision can not be inferred and no default precision available", v37, v38, v39, v40, v35);
      }
    }
  }
  uint64_t v43 = 0;
  uint64_t v46 = 0;
  uint64_t ScalarType = glpPrimitiveTypeGetScalarType(a3);
  _convertAccesses(a1, ScalarType, v6, 1u, v47, &v43, &v46);
  uint64_t ScalarCount = glpPrimitiveTypeGetScalarCount(a3);
  unsigned int v11 = ScalarCount;
  MEMORY[0x270FA5388](ScalarCount);
  __n128 v14 = (uint64_t *)((char *)&v41 - v13);
  if (v12 >= 0x200) {
    size_t v15 = 512;
  }
  else {
    size_t v15 = v12;
  }
  bzero((char *)&v41 - v13, v15);
  if (v11)
  {
    uint64_t v16 = v11;
    uint64_t v17 = v46;
    uint64_t v18 = v14;
    do
    {
      uint64_t v19 = (uint64_t *)glpCompilerGetAllocator(a1);
      *v18++ = glpDeepCopyASTNode(v19, v17, (uint64_t (*)(uint64_t, uint64_t *, _DWORD *))getAccessorReplaceCallback, 0);
      --v16;
    }
    while (v16);
  }
  uint64_t v20 = glpCompilerGetAllocator(a1);
  glpASTNodeGetLocation(a2, &v42);
  glpMakeCommaExprNode(v20, &v42, 0);
  uint64_t v22 = v21;
  uint64_t v23 = v45;
  if (v45)
  {
    __n128 v24 = (void *)glpCompilerGetAllocator(a1);
    glpCommaExprNodeAddExpr(v24, v22, v23);
  }
  uint64_t v25 = v43;
  if (v43)
  {
    uint64_t v26 = (void *)glpCompilerGetAllocator(a1);
    glpCommaExprNodeAddExpr(v26, v22, v25);
  }
  uint64_t v27 = glpCallNodeGetArg(a2, 0);
  char SaFlags = glpASTNodeGetSaFlags(v27);
  return _componentwiseConstructor(a1, a3, v22, v6, SaFlags & 0x60, (uint64_t)v14);
}

uint64_t _checkAndSanitizeDiagonalMatrixConstructorCall(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v50[1] = *MEMORY[0x263EF8340];
  uint64_t v48 = 0;
  v50[0] = 0;
  _makeArgsAccessible(a1, a2, 0, v50, &v48);
  uint64_t v6 = glpASTNodeGetSaFlags(v50[0]) & 0x1F;
  uint64_t v43 = a2;
  doPrecisionWarningsForLowpInt(a1, a2, a3, v6);
  uint64_t v47 = 0;
  uint64_t v49 = 0;
  uint64_t ScalarType = glpPrimitiveTypeGetScalarType(a3);
  uint64_t v42 = v6;
  _convertAccesses(a1, ScalarType, v6, 1u, v50, &v47, &v49);
  unsigned int v8 = glpPrimitiveTypeGetScalarType(a3);
  unsigned int PrimitiveType = (unsigned int *)glpGetPrimitiveType(v8);
  uint64_t Allocator = glpCompilerGetAllocator(a1);
  Mutableuint64_t Value = glpMakeMutableValue(Allocator, PrimitiveType, 0, v11, v12, v13, v14, v15, v41);
  uint64_t v17 = glpCompilerRemapValue(a1, PrimitiveType, MutableValue);
  v45.n128_u64[0] = (unint64_t)"-1";
  v45.n128_u64[1] = 0xEDA00000002;
  uint64_t v46 = 0xFFFFFFFFLL;
  uint64_t ConstantValueFragment = glpMakeConstantValueFragment(a1, &v45, (uint64_t)PrimitiveType, v17);
  unsigned int Rows = glpPrimitiveMatrixGetRows(a3);
  uint64_t ScalarCount = glpPrimitiveTypeGetScalarCount(a3);
  int v21 = ScalarCount;
  uint64_t v41 = (uint64_t)&v41;
  MEMORY[0x270FA5388](ScalarCount);
  __n128 v24 = (char *)&v41 - v23;
  if (v22 >= 0x200) {
    size_t v25 = 512;
  }
  else {
    size_t v25 = v22;
  }
  bzero((char *)&v41 - v23, v25);
  if (v21)
  {
    uint64_t v26 = 0;
    uint64_t v27 = v49;
    do
    {
      uint64_t v28 = (uint64_t *)glpCompilerGetAllocator(a1);
      if (v26 % Rows == v26 / Rows) {
        uint64_t v29 = v27;
      }
      else {
        uint64_t v29 = ConstantValueFragment;
      }
      *(void *)&v24[8 * v26++] = glpDeepCopyASTNode(v28, v29, (uint64_t (*)(uint64_t, uint64_t *, _DWORD *))getAccessorReplaceCallback, 0);
    }
    while (v21 != v26);
  }
  uint64_t v30 = glpCompilerGetAllocator(a1);
  uint64_t v31 = v43;
  glpASTNodeGetLocation(v43, &v44);
  glpMakeCommaExprNode(v30, &v44, 0);
  uint64_t v33 = v32;
  uint64_t v34 = v48;
  if (v48)
  {
    char v35 = (void *)glpCompilerGetAllocator(a1);
    glpCommaExprNodeAddExpr(v35, v33, v34);
  }
  uint64_t v36 = v47;
  if (v47)
  {
    uint64_t v37 = (void *)glpCompilerGetAllocator(a1);
    glpCommaExprNodeAddExpr(v37, v33, v36);
  }
  uint64_t v38 = glpCallNodeGetArg(v31, 0);
  char SaFlags = glpASTNodeGetSaFlags(v38);
  return _componentwiseConstructor(a1, a3, v33, v42, SaFlags & 0x60, (uint64_t)v24);
}

uint64_t _checkAndSanitizeSubOrSuperMatrixConstructorCall(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v80[1] = *MEMORY[0x263EF8340];
  unsigned int v6 = glpCallNodeGetArgCount(a2);
  uint64_t v78 = 0;
  v80[0] = 0;
  uint64_t v69 = a2;
  _makeArgsAccessible(a1, a2, 0, v80, &v78);
  unsigned int v77 = 0;
  memset(v79, 0, sizeof(v79));
  uint64_t v7 = _atomicizeArgs(a1, v6, (uint64_t)v80, &v77, (uint64_t)v79);
  uint64_t v76 = 0;
  unsigned int v8 = v77;
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFF0);
  bzero(v10, v9);
  uint64_t ScalarType = glpPrimitiveTypeGetScalarType(a3);
  uint64_t v12 = v80[0];
  char SaFlags = glpASTNodeGetSaFlags(v80[0]);
  _convertAccesses(a1, ScalarType, SaFlags & 0x1F, v8, (uint64_t *)v79, &v76, (uint64_t *)v10);
  unsigned int v14 = glpPrimitiveTypeGetScalarType(a3);
  unsigned int PrimitiveType = (unsigned int *)glpGetPrimitiveType(v14);
  uint64_t Allocator = glpCompilerGetAllocator(a1);
  Mutableuint64_t Value = glpMakeMutableValue(Allocator, PrimitiveType, 0, v17, v18, v19, v20, v21, v68);
  uint64_t v23 = glpCompilerRemapValue(a1, PrimitiveType, MutableValue);
  v74.n128_u64[0] = (unint64_t)"-1";
  v74.n128_u64[1] = 0xEDA00000002;
  uint64_t v75 = 0xFFFFFFFFLL;
  uint64_t ConstantValueFragment = glpMakeConstantValueFragment(a1, &v74, (uint64_t)PrimitiveType, v23);
  uint64_t v24 = glpCompilerGetAllocator(a1);
  uint64_t v30 = glpMakeMutableValue(v24, PrimitiveType, 1, v25, v26, v27, v28, v29, 0x3FF0000000000000);
  uint64_t v31 = glpCompilerRemapValue(a1, PrimitiveType, v30);
  v74.n128_u64[0] = (unint64_t)"-1";
  v74.n128_u64[1] = 0xEDA00000002;
  uint64_t v75 = 0xFFFFFFFFLL;
  uint64_t v32 = glpMakeConstantValueFragment(a1, &v74, (uint64_t)PrimitiveType, v31);
  int Rows = glpPrimitiveMatrixGetRows(a3);
  unsigned int v70 = a3;
  unsigned int Columns = glpPrimitiveMatrixGetColumns(a3);
  uint64_t SaType = glpASTNodeGetSaType(v12);
  int v36 = glpPrimitiveTypeGetPrimitiveType(SaType);
  unsigned int v37 = glpPrimitiveMatrixGetRows(v36);
  uint64_t v38 = glpASTNodeGetSaType(v12);
  int v39 = glpPrimitiveTypeGetPrimitiveType(v38);
  uint64_t v40 = glpPrimitiveMatrixGetColumns(v39);
  unsigned int v41 = v40;
  uint64_t v68 = (uint64_t)&v68;
  int v72 = Rows;
  MEMORY[0x270FA5388](v40);
  __n128 v44 = (char *)&v68 - v43;
  if (v42 >= 0x200) {
    size_t v45 = 512;
  }
  else {
    size_t v45 = v42;
  }
  bzero((char *)&v68 - v43, v45);
  if (Columns)
  {
    unint64_t v46 = 0;
    int v47 = 0;
    unint64_t v48 = v41;
    uint64_t v71 = Columns;
    int v49 = v72;
    do
    {
      if (v72)
      {
        uint64_t v50 = 0;
        do
        {
          if (v46 >= v48 || v50 >= v37)
          {
            uint64_t v53 = (uint64_t *)glpCompilerGetAllocator(a1);
            if (v46 == v50) {
              uint64_t v54 = v32;
            }
            else {
              uint64_t v54 = ConstantValueFragment;
            }
            uint64_t v52 = glpDeepCopyASTNode(v53, v54, (uint64_t (*)(uint64_t, uint64_t *, _DWORD *))getAccessorReplaceCallback, 0);
          }
          else
          {
            Scalaruint64_t Accessor = glpMakeScalarAccessor(a1, *(void *)&v10[8 * v46], v50);
            uint64_t v52 = glpSANode(a1, ScalarAccessor);
          }
          *(void *)&v44[8 * (v47 + v50++)] = v52;
        }
        while (v49 != v50);
        v47 += v50;
      }
      ++v46;
    }
    while (v46 != v71);
  }
  uint64_t v55 = glpCompilerGetAllocator(a1);
  v74.n128_u64[0] = (unint64_t)"-1";
  v74.n128_u64[1] = 0xEDA00000002;
  uint64_t v75 = 0xFFFFFFFFLL;
  glpMakeCommaExprNode(v55, &v74, 0);
  uint64_t v57 = v56;
  uint64_t v58 = v78;
  if (v78)
  {
    uint64_t v59 = (void *)glpCompilerGetAllocator(a1);
    glpCommaExprNodeAddExpr(v59, v57, v58);
  }
  uint64_t v60 = v76;
  if (v76)
  {
    int v61 = (void *)glpCompilerGetAllocator(a1);
    glpCommaExprNodeAddExpr(v61, v57, v60);
  }
  uint64_t v62 = v69;
  uint64_t v63 = glpCallNodeGetArg(v69, 0);
  uint64_t v64 = glpASTNodeGetSaFlags(v63) & 0x1F;
  uint64_t v65 = glpCallNodeGetArg(v62, 0);
  char v66 = glpASTNodeGetSaFlags(v65);
  return _componentwiseConstructor(a1, v70, v57, v64, v66 & 0x60, (uint64_t)v44);
}

uint64_t _checkConstructorArgs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = glpConstructorCallNodeGetType(a2);
  uint64_t SaType = glpASTNodeGetSaType(v6);
  unsigned int v8 = glpCallNodeGetArgCount(a2);
  if (v8)
  {
    unsigned int v9 = v8;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = glpCallNodeGetArg(a2, v10);
      int v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, v10, v11);
      if (v12 == 2) {
        break;
      }
      if (v12 == 1)
      {
        uint64_t v21 = glpASTNodeGetSaType(v11);
        uint64_t Allocator = (void *)glpCompilerGetAllocator(a1);
        glpTypeHumanReadableDescription(v21, (uint64_t)"<<BUG: unexpected function type>>", 0x92C8B9C800000021, Allocator);
        char v24 = v23;
        uint64_t v25 = (void *)glpCompilerGetAllocator(a1);
        glpTypeHumanReadableDescription(SaType, (uint64_t)"<<BUG: unexpected function type>>", 0x92C8B9C800000021, v25);
        Infouint64_t Log = (uint64_t **)glpCompilerGetInfoLog(a1);
        glpASTNodeGetLocation(a2, &v42);
        glpLogMessage(InfoLog, 0, (uint64_t)&v42, "Invalid type '%.*s' as argument %u of constructor of '%.*s'", v27, v28, v29, v30, v24);
        return 0;
      }
      uint64_t v10 = (v10 + 1);
      if (v9 == v10) {
        goto LABEL_6;
      }
    }
    if ((int)v10 + 1 >= v9) {
      return 1;
    }
    uint64_t v31 = (void *)glpCompilerGetAllocator(a1);
    glpTypeHumanReadableDescription(SaType, (uint64_t)"<<BUG: unexpected function type>>", 0x92C8B9C800000021, v31);
    char v33 = v32;
    uint64_t v34 = (uint64_t **)glpCompilerGetInfoLog(a1);
    glpASTNodeGetLocation(a2, &v41);
    glpLogMessage(v34, 0, (uint64_t)&v41, "Too many arguments to constructor of '%.*s'", v35, v36, v37, v38, v33);
  }
  else
  {
LABEL_6:
    uint64_t v13 = (void *)glpCompilerGetAllocator(a1);
    glpTypeHumanReadableDescription(SaType, (uint64_t)"<<BUG: unexpected function type>>", 0x92C8B9C800000021, v13);
    char v15 = v14;
    uint64_t v16 = (uint64_t **)glpCompilerGetInfoLog(a1);
    glpASTNodeGetLocation(a2, &v40);
    glpLogMessage(v16, 0, (uint64_t)&v40, "Too few arguments to constructor of '%.*s'", v17, v18, v19, v20, v15);
  }
  return 0;
}

uint64_t ___checkAndSanitizeComponentwiseConstructorCall_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t SaFlags = glpASTNodeGetSaFlags(a3);
  unint64_t v6 = SaFlags & 0x1F;
  if (v6 != 31)
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
    if (*(void *)(v7 + 24) > v6) {
      unint64_t v6 = *(void *)(v7 + 24);
    }
    *(void *)(v7 + 24) = v6;
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) &= SaFlags;
  uint64_t SaType = (unsigned int *)glpASTNodeGetSaType(a3);
  if (glpTypeGetKind(SaType)) {
    return 1;
  }
  uint64_t PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)SaType);
  if (glpPrimitiveTypeGetCategory(PrimitiveType) - 1 > 2) {
    return 1;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) += glpPrimitiveTypeGetScalarCount(PrimitiveType);
  return 2 * (*(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) >= *(_DWORD *)(a1 + 56));
}

uint64_t doPrecisionWarningsForLowpInt(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t result = glpCallNodeGetArgCount(a2);
  if (a4 == 4)
  {
    int v9 = result;
    uint64_t PrimitiveType = (unsigned int *)glpGetPrimitiveType(a3);
    uint64_t result = glpGetMostBasicPrimitiveType(PrimitiveType);
    if (result == 1)
    {
      if (v9)
      {
        for (unsigned int i = 0; i != v9; ++i)
        {
          uint64_t v12 = glpCallNodeGetArg(a2, i);
          uint64_t SaType = (unsigned int *)glpASTNodeGetSaType(v12);
          uint64_t result = glpGetMostBasicPrimitiveType(SaType);
          if (result == 36 || result == 5)
          {
            uint64_t result = glpASTNodeGetSaFlags(v12);
            if ((result & 0x1F) == 4)
            {
              uint64_t v15 = glpASTNodeGetSaType(v12);
              uint64_t Allocator = (void *)glpCompilerGetAllocator(a1);
              glpTypeHumanReadableDescription(v15, (uint64_t)"<<BUG: unexpected function type>>", 0x92C8B9C800000021, Allocator);
              char v18 = v17;
              Infouint64_t Log = (uint64_t **)glpCompilerGetInfoLog(a1);
              glpASTNodeGetLocation(a2, &v24);
              uint64_t result = (uint64_t)glpLogMessage(InfoLog, 1u, (uint64_t)&v24, "Casting lowp %.*s to lowp float - this may produce incorrect results", v20, v21, v22, v23, v18);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t _makeArgsAccessible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t Allocator = glpCompilerGetAllocator(a1);
  v20.n128_u64[0] = (unint64_t)"-1";
  v20.n128_u64[1] = 0xEDA00000002;
  uint64_t v21 = 0xFFFFFFFFLL;
  glpMakeCommaExprNode(Allocator, &v20, 0);
  *a5 = v11;
  unsigned int v12 = glpCallNodeGetArgCount(a2);
  if (v12)
  {
    uint64_t v13 = 0;
    uint64_t v14 = v12;
    do
    {
      uint64_t v15 = glpCallNodeGetArg(a2, v13);
      uint64_t v16 = v15;
      if (a3 && (glpASTNodeGetSaFlags(v15) & 0x1F) == 0) {
        glpPushdownPrecision(a1, v16, a3);
      }
      v20.n128_u64[0] = 0;
      glpHandleSideEffectsForExpr(a1, v16, a4, (uint64_t *)&v20);
      uint64_t v17 = v20.n128_u64[0];
      if (v20.n128_u64[0])
      {
        char v18 = (void *)glpCompilerGetAllocator(a1);
        glpCommaExprNodeAddExpr(v18, *a5, v17);
      }
      ++v13;
      ++a4;
    }
    while (v14 != v13);
  }
  uint64_t result = glpCommaExprNodeGetExprCount(*a5);
  if (!result) {
    *a5 = 0;
  }
  return result;
}

uint64_t _atomicizeArgs(uint64_t result, unsigned int a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v8 = result;
    uint64_t v9 = 0;
    unsigned int v10 = 0;
    uint64_t v11 = a2;
    do
    {
      uint64_t SaType = (_DWORD *)glpASTNodeGetSaType(*(void *)(a3 + 8 * v9));
      int IsAtomic = glpTypeIsAtomic(SaType);
      uint64_t result = *(void *)(a3 + 8 * v9);
      if (IsAtomic)
      {
        *(void *)(a5 + 8 * v10++) = result;
      }
      else
      {
        uint64_t result = glpGetAccessorCount(result);
        if (result)
        {
          int v14 = result;
          uint64_t v15 = 0;
          do
          {
            uint64_t Accessor = glpMakeAccessor(v8, *(void *)(a3 + 8 * v9), v15);
            uint64_t result = glpSANode(v8, Accessor);
            *(void *)(a5 + 8 * (v10 + v15)) = result;
            uint64_t v15 = (v15 + 1);
          }
          while (v14 != v15);
          v10 += v15;
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    unsigned int v10 = 0;
  }
  *a4 = v10;
  return result;
}

uint64_t _convertAccesses(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t Allocator = glpCompilerGetAllocator(a1);
  v27.n128_u64[0] = (unint64_t)"-1";
  v27.n128_u64[1] = 0xEDA00000002;
  uint64_t v28 = 0xFFFFFFFFLL;
  glpMakeCommaExprNode(Allocator, &v27, 0);
  *a6 = v15;
  if (a4)
  {
    uint64_t v16 = a4;
    do
    {
      uint64_t SaType = glpASTNodeGetSaType(*a5);
      uint64_t PrimitiveType = glpPrimitiveTypeGetPrimitiveType(SaType);
      int v19 = PrimitiveType;
      unsigned int v20 = glpPrimitiveTypeReplaceScalarType(PrimitiveType, a2);
      if (v19 == v20)
      {
        *a7 = *a5;
      }
      else
      {
        v27.n128_u64[0] = 0;
        uint64_t v21 = *a5;
        uint64_t v22 = glpGetPrimitiveType(v20);
        uint64_t v23 = glpConvert(a1, v21, (uint64_t)v22, a3);
        glpHandleSideEffectsForExpr(a1, v23, a7, (uint64_t *)&v27);
        uint64_t v24 = v27.n128_u64[0];
        if (v27.n128_u64[0])
        {
          uint64_t v25 = (void *)glpCompilerGetAllocator(a1);
          glpCommaExprNodeAddExpr(v25, *a6, v24);
        }
      }
      ++a5;
      ++a7;
      --v16;
    }
    while (v16);
    uint64_t v15 = *a6;
  }
  uint64_t result = glpCommaExprNodeGetExprCount(v15);
  if (!result) {
    *a6 = 0;
  }
  return result;
}

uint64_t _componentwiseConstructor(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t PrimitiveType = glpGetPrimitiveType(a2);
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 0x40000000;
  _OWORD v13[2] = ___componentwiseConstructor_block_invoke;
  uint64_t v13[3] = &__block_descriptor_tmp_86;
  v13[4] = a1;
  v13[5] = a6;
  return _constructor(a1, (uint64_t)PrimitiveType, a3, a4, a5, (uint64_t)v13);
}

void ___componentwiseConstructor_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v25[0] = 0;
  v25[1] = v25;
  void v25[2] = 0x2000000000;
  int v26 = 0;
  v23[0] = 0;
  v23[1] = v23;
  v23[2] = 0x2000000000;
  int v24 = 0;
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 0x40000000;
  uint64_t v17 = ___componentwiseConstructor_block_invoke_2;
  char v18 = &unk_264D9A1F8;
  long long v15 = *(_OWORD *)(a1 + 32);
  long long v21 = v15;
  int v19 = v25;
  unsigned int v20 = v23;
  uint64_t v22 = a3;
  uint64_t SaType = glpASTNodeGetSaType(a2);
  unsigned int PrimitiveType = glpPrimitiveTypeGetPrimitiveType(SaType);
  if (glpPrimitiveTypeGetCategory(PrimitiveType) == 3)
  {
    int AccessorCount = glpGetAccessorCount(a2);
    if (!AccessorCount) {
      goto LABEL_13;
    }
  }
  else
  {
    int AccessorCount = 1;
  }
  int v7 = 0;
  uint64_t v8 = 0;
  do
  {
    uint64_t v9 = a2;
    if (AccessorCount != 1)
    {
      uint64_t Accessor = glpMakeAccessor(v15, a2, v8);
      uint64_t v9 = glpSANode(v15, Accessor);
    }
    Scalarint AccessorCount = glpGetScalarAccessorCount(v9);
    if (ScalarAccessorCount)
    {
      int v12 = ScalarAccessorCount;
      for (int i = 0; i != v12; ++i)
      {
        Scalaruint64_t Accessor = glpMakeScalarAccessor(v15, v9, i);
        ((void (*)(void *, uint64_t, void))v17)(v16, ScalarAccessor, (v7 + i));
      }
      v7 += i;
    }
    uint64_t v8 = (v8 + 1);
  }
  while (v8 != AccessorCount);
LABEL_13:
  _Block_object_dispose(v23, 8);
  _Block_object_dispose(v25, 8);
}

uint64_t ___componentwiseConstructor_block_invoke_2(void *a1, uint64_t a2)
{
  Scalaruint64_t Accessor = glpMakeScalarAccessor(a1[6], *(void *)(a1[7] + 8 * *(unsigned int *)(*(void *)(a1[4] + 8) + 24)), *(_DWORD *)(*(void *)(a1[5] + 8) + 24));
  uint64_t v5 = a1[6];
  uint64_t v6 = a1[8];
  uint64_t Allocator = glpCompilerGetAllocator(v5);
  v11.n128_u64[0] = (unint64_t)"-1";
  v11.n128_u64[1] = 0xEDA00000002;
  uint64_t v12 = 0xFFFFFFFFLL;
  uint64_t AssignNode = glpMakeAssignNode(Allocator, &v11, 0);
  glpBinaryOperatorNodeSetLhs(AssignNode, a2);
  glpBinaryOperatorNodeSetRhs(AssignNode, ScalarAccessor);
  uint64_t v9 = (void *)glpCompilerGetAllocator(v5);
  glpCommaExprNodeAddExpr(v9, v6, AssignNode);
  LODWORD(a2) = ++*(_DWORD *)(*(void *)(a1[5] + 8) + 24);
  uint64_t result = glpGetScalarAccessorCount(*(void *)(a1[7] + 8 * *(unsigned int *)(*(void *)(a1[4] + 8) + 24)));
  if (a2 >= result)
  {
    ++*(_DWORD *)(*(void *)(a1[4] + 8) + 24);
    *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = 0;
  }
  return result;
}

uint64_t ___checkAndSanitizeArrayConstructorCall_block_invoke(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t SaFlags = glpASTNodeGetSaFlags(a3);
  unint64_t v7 = SaFlags & 0x1F;
  if (v7 != 31)
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
    if (*(void *)(v8 + 24) > v7) {
      unint64_t v7 = *(void *)(v8 + 24);
    }
    *(void *)(v8 + 24) = v7;
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) &= SaFlags;
  uint64_t SaType = (unsigned int *)glpASTNodeGetSaType(a3);
  if (glpTypesEqual(*(unsigned int **)(a1 + 48), (uint64_t)SaType)) {
    return 2 * (a2 + 1 == glpArrayTypeGetElementCount(*(void *)(a1 + 64)));
  }
  if (!glpTypeGetKind(SaType)
    && !glpTypeGetKind(*(unsigned int **)(a1 + 48))
    && (uint64_t PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)SaType),
        uint64_t v12 = glpPrimitiveTypeGetPrimitiveType(*(void *)(a1 + 48)),
        unsigned int ImplicitConversionPolicy = glpCompilerGetImplicitConversionPolicy(*(void *)(a1 + 56)),
        glpCanConvert(PrimitiveType, v12, ImplicitConversionPolicy)))
  {
    return 2 * (a2 + 1 == glpArrayTypeGetElementCount(*(void *)(a1 + 64)));
  }
  else
  {
    return 1;
  }
}

uint64_t _elementwiseConstructor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v22[1] = *MEMORY[0x263EF8340];
  v22[0] = 0;
  uint64_t v10 = glpCallNodeGetArgCount(a2);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (void *)((char *)v20 - v11);
  bzero((char *)v20 - v11, v13);
  _makeArgsAccessible(a1, a2, a4, v12, v22);
  uint64_t Allocator = glpCompilerGetAllocator(a1);
  glpASTNodeGetLocation(a2, &v21);
  glpMakeCommaExprNode(Allocator, &v21, 0);
  uint64_t v16 = v15;
  uint64_t v17 = v22[0];
  if (v22[0])
  {
    char v18 = (void *)glpCompilerGetAllocator(a1);
    glpCommaExprNodeAddExpr(v18, v16, v17);
  }
  v20[0] = MEMORY[0x263EF8330];
  v20[1] = 0x40000000;
  void v20[2] = ___elementwiseConstructor_block_invoke;
  void v20[3] = &__block_descriptor_tmp_88;
  v20[4] = a1;
  v20[5] = v16;
  v20[6] = v12;
  return _constructor(a1, a3, v16, a4, a5, (uint64_t)v20);
}

uint64_t ___elementwiseConstructor_block_invoke(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = glpGetAccessorCount(a2);
  if (result)
  {
    uint64_t v7 = 0;
    uint64_t v8 = result;
    do
    {
      uint64_t v9 = a1[4];
      uint64_t Accessor = glpMakeAccessor(v9, a2, v7);
      uint64_t v11 = glpSANode(v9, Accessor);
      uint64_t Allocator = glpCompilerGetAllocator(a1[4]);
      glpASTNodeGetLocation(a1[5], &v16);
      uint64_t AssignNode = glpMakeAssignNode(Allocator, &v16, 0);
      glpBinaryOperatorNodeSetLhs(AssignNode, v11);
      glpBinaryOperatorNodeSetRhs(AssignNode, *(void *)(a1[6] + 8 * v7));
      uint64_t v14 = glpSANode(a1[4], AssignNode);
      uint64_t v15 = (void *)glpCompilerGetAllocator(a1[4]);
      uint64_t result = (uint64_t)glpCommaExprNodeAddExpr(v15, a3, v14);
      ++v7;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t ___checkAndSanitizeStructConstructorCall_block_invoke(void *a1, unsigned int a2, uint64_t a3)
{
  *(void *)(*(void *)(a1[4] + 8) + 24) &= glpASTNodeGetSaFlags(a3);
  uint64_t SaType = (unsigned int *)glpASTNodeGetSaType(a3);
  uint64_t ElementType = (unsigned int *)glpAggregateTypeGetElementType(a1[5], a2);
  if (glpTypesEqual(ElementType, (uint64_t)SaType)) {
    return 2 * (a2 + 1 == glpAggregateTypeGetElementCount(a1[5]));
  }
  if (!glpTypeGetKind(SaType)
    && !glpTypeGetKind(ElementType)
    && (uint64_t PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)SaType),
        uint64_t v10 = glpPrimitiveTypeGetPrimitiveType((uint64_t)ElementType),
        unsigned int ImplicitConversionPolicy = glpCompilerGetImplicitConversionPolicy(a1[6]),
        glpCanConvert(PrimitiveType, v10, ImplicitConversionPolicy)))
  {
    return 2 * (a2 + 1 == glpAggregateTypeGetElementCount(a1[5]));
  }
  else
  {
    return 1;
  }
}

uint64_t glpMakeSourceLocation@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  a4[1] = a2;
  a4[2] = 0;
  *a4 = result;
  *((_DWORD *)a4 + 4) = a3;
  return result;
}

char *glpMakeMutableValue(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v35[1] = *MEMORY[0x263EF8340];
  unsigned int v12 = glpABIGetTypeSize(0, (uint64_t)a2, 0);
  unsigned int Size = glpTypeSizeGetSize(v12);
  uint64_t v14 = (char *)(*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 16 * Size, "Value");
  bzero(v14, 16 * Size);
  if (a3)
  {
    uint64_t v16 = Size;
    MEMORY[0x270FA5388](v15);
    char v18 = (_DWORD *)((char *)v35 - ((v17 + 15) & 0x7FFFFFFF0));
    glpTypeGetAppleVec4Types(a2, v18, 1, 0, 0, 0, 0, 0, 0);
    v35[0] = &a9;
    if (v16)
    {
      uint64_t v19 = 0;
      unsigned int v20 = v14;
      do
      {
        int ScalarType = glpPrimitiveTypeGetScalarType(v18[v19]);
        unsigned int ScalarCount = glpPrimitiveTypeGetScalarCount(v18[v19]);
        glpPrimitiveTypeGetBytesPerComponent(v18[v19]);
        if (ScalarType <= 8)
        {
          if (ScalarType == 1)
          {
            if (ScalarCount)
            {
              uint64_t v31 = 0;
              do
              {
                char v32 = (double *)v35[0];
                v35[0] += 8;
                float v33 = *v32;
                *(float *)&v20[v31] = v33;
                v31 += 4;
              }
              while (4 * ScalarCount != v31);
            }
          }
          else
          {
            if (ScalarType != 5) {
LABEL_31:
            }
              abort();
            if (ScalarCount)
            {
              uint64_t v25 = 0;
              do
              {
                int v26 = (_DWORD *)v35[0];
                v35[0] += 8;
                *(_DWORD *)&v20[v25] = *v26;
                v25 += 4;
              }
              while (4 * ScalarCount != v25);
            }
          }
        }
        else
        {
          switch(ScalarType)
          {
            case 62:
              if (ScalarCount)
              {
                uint64_t v27 = 0;
                do
                {
                  uint64_t v28 = (void *)v35[0];
                  v35[0] += 8;
                  *(void *)&v20[v27] = *v28;
                  v27 += 8;
                }
                while (8 * ScalarCount != v27);
              }
              break;
            case 36:
              if (ScalarCount)
              {
                uint64_t v29 = 0;
                do
                {
                  uint64_t v30 = (_DWORD *)v35[0];
                  v35[0] += 8;
                  *(_DWORD *)&v20[v29] = *v30;
                  v29 += 4;
                }
                while (4 * ScalarCount != v29);
              }
              break;
            case 9:
              if (ScalarCount)
              {
                uint64_t v23 = 0;
                do
                {
                  int v24 = (_DWORD *)v35[0];
                  v35[0] += 8;
                  *(_DWORD *)&v20[v23] = *v24 != 0;
                  v23 += 4;
                }
                while (4 * ScalarCount != v23);
              }
              break;
            default:
              goto LABEL_31;
          }
        }
        ++v19;
        v20 += 16;
      }
      while (v19 != v16);
    }
  }
  return v14;
}

char *glpCopyValue(uint64_t a1, unsigned int *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Mutableuint64_t Value = glpMakeMutableValue(a1, a2, 0, a4, a5, a6, a7, a8, v12);
  glpCopyValueInto(MutableValue, (uint64_t)a2, a3);
  return MutableValue;
}

void *glpCopyValueInto(void *a1, uint64_t a2, const void *a3)
{
  unsigned int v5 = glpABIGetTypeSize(0, a2, 0);
  size_t v6 = 16 * glpTypeSizeGetSize(v5);

  return memcpy(a1, a3, v6);
}

uint64_t glpCompareValues(char *a1, unsigned int *a2, char *a3)
{
  v17[1] = *MEMORY[0x263EF8340];
  unsigned int v6 = glpABIGetTypeSize(0, (uint64_t)a2, 0);
  uint64_t Size = glpTypeSizeGetSize(v6);
  unsigned int v8 = Size;
  MEMORY[0x270FA5388](Size);
  uint64_t v10 = (unsigned int *)((char *)v17 - v9);
  glpTypeGetAppleVec4Types(a2, (void *)((char *)v17 - v9), 1, 0, 0, 0, 0, 0, 0);
  uint64_t v11 = 0;
  if (v8)
  {
    uint64_t v12 = v8;
    do
    {
      int BytesPerComponent = glpPrimitiveTypeGetBytesPerComponent(*v10);
      unsigned int v14 = *v10++;
      int ScalarCount = glpPrimitiveTypeGetScalarCount(v14);
      uint64_t v11 = memcmp(a1, a3, (ScalarCount * BytesPerComponent)) | v11;
      a1 += 16;
      a3 += 16;
      --v12;
    }
    while (v12);
  }
  return v11;
}

BOOL glpValueIsUsableAsSize(unsigned int *a1, _DWORD *a2)
{
  if (glpTypeGetKind(a1)) {
    return 0;
  }
  if (glpPrimitiveTypeGetPrimitiveType((uint64_t)a1) != 5 || (*a2 & 0x80000000) != 0) {
    return glpPrimitiveTypeGetPrimitiveType((uint64_t)a1) == 36;
  }
  return 1;
}

uint64_t glpValueGetAsSize(uint64_t a1, unsigned int *a2)
{
  return *a2;
}

void *glpAppendValueDescriptionToStringBuffer(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  v43[1] = *MEMORY[0x263EF8340];
  unsigned int v6 = glpABIGetTypeSize(0, (uint64_t)a2, 0);
  uint64_t Size = glpTypeSizeGetSize(v6);
  unsigned int v8 = Size;
  MEMORY[0x270FA5388](Size);
  uint64_t v10 = (char *)v43 - v9;
  glpTypeGetAppleVec4Types(a2, (void *)((char *)v43 - v9), 1, 0, 0, 0, 0, 0, 0);
  glpStringBufferAppendCString(a1, "(");
  if (v8)
  {
    uint64_t v17 = 0;
    v43[0] = v8;
    do
    {
      char v18 = ", {";
      if (!v17) {
        char v18 = "{";
      }
      glpStringBufferAppendFormat(a1, "%s", v11, v12, v13, v14, v15, v16, (char)v18);
      int ScalarType = glpPrimitiveTypeGetScalarType(*(unsigned int *)&v10[4 * v17]);
      unsigned int ScalarCount = glpPrimitiveTypeGetScalarCount(*(unsigned int *)&v10[4 * v17]);
      glpPrimitiveTypeGetBytesPerComponent(*(unsigned int *)&v10[4 * v17]);
      if (ScalarType <= 8)
      {
        if (ScalarType == 1)
        {
          if (ScalarCount)
          {
            uint64_t v39 = 0;
            uint64_t v40 = 4 * ScalarCount;
            do
            {
              if (v39) {
                __n128 v41 = ", ";
              }
              else {
                __n128 v41 = "";
              }
              glpStringBufferAppendFormat(a1, "%s%f (= %a)", v21, v22, v23, v24, v25, v26, (char)v41);
              v39 += 4;
            }
            while (v40 != v39);
          }
        }
        else
        {
          if (ScalarType != 5) {
LABEL_47:
          }
            abort();
          if (ScalarCount)
          {
            uint64_t v30 = 0;
            uint64_t v31 = 4 * ScalarCount;
            do
            {
              if (v30) {
                char v32 = ", ";
              }
              else {
                char v32 = "";
              }
              glpStringBufferAppendFormat(a1, "%s%d", v21, v22, v23, v24, v25, v26, (char)v32);
              v30 += 4;
            }
            while (v31 != v30);
          }
        }
      }
      else
      {
        switch(ScalarType)
        {
          case 62:
            if (ScalarCount)
            {
              uint64_t v33 = 0;
              uint64_t v34 = 8 * ScalarCount;
              do
              {
                if (v33) {
                  uint64_t v35 = ", ";
                }
                else {
                  uint64_t v35 = "";
                }
                glpStringBufferAppendFormat(a1, "%s%f (= %a)", v21, v22, v23, v24, v25, v26, (char)v35);
                v33 += 8;
              }
              while (v34 != v33);
            }
            break;
          case 36:
            if (ScalarCount)
            {
              uint64_t v36 = 0;
              uint64_t v37 = 4 * ScalarCount;
              do
              {
                if (v36) {
                  uint64_t v38 = ", ";
                }
                else {
                  uint64_t v38 = "";
                }
                glpStringBufferAppendFormat(a1, "%s%u", v21, v22, v23, v24, v25, v26, (char)v38);
                v36 += 4;
              }
              while (v37 != v36);
            }
            break;
          case 9:
            if (ScalarCount)
            {
              uint64_t v27 = 0;
              uint64_t v28 = 4 * ScalarCount;
              do
              {
                if (v27) {
                  uint64_t v29 = ", ";
                }
                else {
                  uint64_t v29 = "";
                }
                glpStringBufferAppendFormat(a1, "%s%s", v21, v22, v23, v24, v25, v26, (char)v29);
                v27 += 4;
              }
              while (v28 != v27);
            }
            break;
          default:
            goto LABEL_47;
        }
      }
      glpStringBufferAppendFormat(a1, "}", v21, v22, v23, v24, v25, v26, v43[0]);
      ++v17;
      a3 += 16;
    }
    while (v17 != v43[0]);
  }
  return glpStringBufferAppendCString(a1, ")");
}

uint64_t glpTypedValueHash(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = glpABIGetTypeSize(0, a1, 0);
  unsigned int Size = glpTypeSizeGetSize(v3);
  unsigned int v5 = 16 * Size;
  unsigned int v6 = (Size >> 1) & 0x7FFFFFF;
  if (v6 >= 16 * Size) {
    return 16 * Size;
  }
  int v7 = ~(v5 >> 5);
  LODWORD(result) = 16 * Size;
  do
  {
    uint64_t result = (32 * result + (result >> 2) + *(char *)(a2 + v5 - 1)) ^ result;
    v5 += v7;
  }
  while (v5 > v6);
  return result;
}

uint64_t glpTypedValuesEqual(unsigned int *a1, char *a2, uint64_t a3, char *a4)
{
  uint64_t result = glpTypesEqual(a1, a3);
  if (result) {
    return glpCompareValues(a2, a1, a4) == 0;
  }
  return result;
}

uint64_t glpRemapValue(uint64_t a1, unsigned int *a2, char *a3)
{
  if (a3) {
    return glpTypedValueHashCache(a1, a2, a3, (uint64_t)a3);
  }
  else {
    return 0;
  }
}

uint64_t LookUpAddString(uint64_t a1, char *a2)
{
  unsigned int v3 = LookUpAddStringHash(a1, a2);
  uint64_t result = *(unsigned int *)(*(void *)(a1 + 16) + 8 * v3 + 4);
  if (!result)
  {
    uint64_t v5 = v3;
    int v6 = *(_DWORD *)(a1 + 64);
    if (v6 >= *(_DWORD *)(a1 + 68))
    {
      GrowAtomTable(a1, 2 * v6);
      int v6 = *(_DWORD *)(a1 + 64);
    }
    uint64_t v7 = *(void *)(a1 + 48);
    *(_DWORD *)(v7 + 4 * v6) = -1;
    unsigned int v8 = *(_DWORD *)(a1 + 64);
    uint64_t v9 = (int)v8;
    if (v8)
    {
      unsigned int v10 = 0;
      int v11 = 0;
      do
      {
        int v12 = v8 & 1 | (2 * v11);
        ++v10;
        int v11 = v12;
        BOOL v13 = v8 > 1;
        v8 >>= 1;
      }
      while (v13);
    }
    else
    {
      int v12 = 0;
      unsigned int v10 = 0;
    }
    char v14 = 20 - v10;
    if (v10 > 0x14) {
      char v14 = 0;
    }
    *(_DWORD *)(*(void *)(a1 + 56) + 4 * v9) = v12 << v14;
    uint64_t result = *(int *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = result + 1;
    uint64_t v15 = (_DWORD *)(*(void *)(a1 + 16) + 8 * v5);
    *(_DWORD *)(v7 + 4 * result) = *v15;
    v15[1] = result;
  }
  return result;
}

uint64_t LookUpAddStringHash(uint64_t a1, char *a2)
{
  for (unsigned int i = FindHashLoc((uint64_t *)a1, a2); (i & 0x80000000) != 0; unsigned int i = FindHashLoc((uint64_t *)a1, a2))
  {
    long long v5 = *(_OWORD *)(a1 + 48);
    long long v20 = *(_OWORD *)(a1 + 32);
    long long v21 = v5;
    uint64_t v22 = *(void *)(a1 + 64);
    long long v6 = *(_OWORD *)(a1 + 16);
    long long v18 = *(_OWORD *)a1;
    long long v19 = v6;
    if (InitAtomTable(a1, (2 * DWORD2(v6)) | 1u))
    {
      uint64_t v7 = *(int *)(a1 + 64);
      if ((int)v7 < (int)v22)
      {
        do
        {
          unsigned int v8 = (char *)(v18 + *(int *)(v21 + 4 * v7));
          int HashLoc = FindHashLoc((uint64_t *)&v18, v8);
          AddAtomFixed(a1, (uint64_t)v8, *(unsigned int *)(v19 + 8 * HashLoc + 4));
          ++v7;
        }
        while (v7 < (int)v22);
      }
      FreeAtomTable((uint64_t)&v18);
    }
  }
  uint64_t v10 = i;
  if (!*(_DWORD *)(*(void *)(a1 + 16) + 8 * i))
  {
    ++*(_DWORD *)(a1 + 28);
    int v11 = strlen(a2) + 1;
    int v13 = *(_DWORD *)(a1 + 8);
    int v12 = *(_DWORD *)(a1 + 12);
    if (v11 + v13 >= v12)
    {
      do
      {
        uint64_t v15 = malloc_type_malloc(2 * v12, 0x7081ABB9uLL);
        if (!v15) {
          abort();
        }
        uint64_t v14 = (uint64_t)v15;
        memcpy(v15, *(const void **)a1, *(int *)(a1 + 12));
        free(*(void **)a1);
        *(void *)a1 = v14;
        int v13 = *(_DWORD *)(a1 + 8);
        int v12 = 2 * *(_DWORD *)(a1 + 12);
        *(_DWORD *)(a1 + 12) = v12;
      }
      while (v13 + v11 >= v12);
    }
    else
    {
      uint64_t v14 = *(void *)a1;
    }
    strcpy((char *)(v14 + v13), a2);
    *(_DWORD *)(a1 + 8) += v11;
    uint64_t v16 = (_DWORD *)(*(void *)(a1 + 16) + 8 * v10);
    *uint64_t v16 = v13;
    v16[1] = 0;
  }
  return v10;
}

const char *GetAtomString(uint64_t a1, int a2)
{
  if (a2 < 1 || *(_DWORD *)(a1 + 64) <= a2)
  {
    uint64_t v4 = "<invalid atom>";
    if (a2 == -1) {
      uint64_t v4 = "<EOF>";
    }
    if (a2) {
      return v4;
    }
    else {
      return "<null atom>";
    }
  }
  else
  {
    uint64_t v2 = *(unsigned int *)(*(void *)(a1 + 48) + 4 * a2);
    if ((int)v2 < 1 || (int)v2 >= *(_DWORD *)(a1 + 8)) {
      return "<internal error: bad soffset>";
    }
    else {
      return (const char *)(*(void *)a1 + v2);
    }
  }
}

uint64_t GetReversedAtom(uint64_t a1, int a2)
{
  if (a2 < 1 || *(_DWORD *)(a1 + 64) <= a2) {
    return 0;
  }
  else {
    return *(unsigned int *)(*(void *)(a1 + 56) + 4 * a2);
  }
}

uint64_t InitAtomTable(uint64_t a1, int a2)
{
  uint64_t v4 = malloc_type_malloc(0x4000uLL, 0x7081ABB9uLL);
  if (!v4
    || ((*(void *)a1 = v4, *(void *)(a1 + 8) = 0x400000000001, a2 >= 1) ? (unsigned int v5 = a2) : (unsigned int v5 = 2047),
        (long long v6 = malloc_type_malloc(8 * v5, 0x7081ABB9uLL)) == 0))
  {
    abort();
  }
  *(void *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = v5;
  bzero(v6, 8 * v5);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 28) = 0;
  *(void *)(a1 + 44) = 0;
  *(void *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  GrowAtomTable(a1, 1024);
  if (!*(void *)(a1 + 48)) {
    return 0;
  }
  AddAtomFixed(a1, (uint64_t)"<undefined>", 0);
  uint64_t v7 = 0;
  unsigned int v8 = *(_DWORD **)(a1 + 48);
  do
    v8[v7++] = *v8;
  while (v7 != 290);
  v13[1] = 0;
  char v9 = 126;
  uint64_t v10 = 1u;
  do
  {
    v13[0] = v9;
    AddAtomFixed(a1, (uint64_t)v13, v9);
    char v9 = asc_2393E3B37[v10++];
  }
  while (v10 != 26);
  for (uint64_t i = 0; i != 512; i += 16)
    AddAtomFixed(a1, *(void *)((char *)&tokens + i + 8), *(unsigned int *)((char *)&tokens + i));
  LookUpAddString(a1, "<*** end fixed atoms ***>");
  return 1;
}

void GrowAtomTable(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 68) < a2)
  {
    uint64_t v4 = *(void **)(a1 + 48);
    size_t v5 = 4 * a2;
    if (v4)
    {
      long long v6 = (char *)malloc_type_realloc(v4, 4 * a2, 0x2BDC8648uLL);
      if (v6)
      {
        uint64_t v7 = v6;
        unsigned int v8 = (char *)malloc_type_realloc(*(void **)(a1 + 56), v5, 0x2BDC8648uLL);
        if (v8)
        {
          char v9 = v8;
          int v10 = *(_DWORD *)(a1 + 68);
LABEL_9:
          bzero(&v7[4 * v10], 4 * (a2 - v10));
          bzero(&v9[4 * *(int *)(a1 + 68)], 4 * (a2 - *(_DWORD *)(a1 + 68)));
          *(void *)(a1 + 48) = v7;
          *(void *)(a1 + 56) = v9;
          *(_DWORD *)(a1 + 68) = a2;
          return;
        }
      }
    }
    else
    {
      int v11 = (char *)malloc_type_malloc(4 * a2, 0x7081ABB9uLL);
      if (v11)
      {
        uint64_t v7 = v11;
        int v12 = (char *)malloc_type_malloc(v5, 0x7081ABB9uLL);
        if (v12)
        {
          char v9 = v12;
          int v10 = 0;
          *(_DWORD *)(a1 + 68) = 0;
          goto LABEL_9;
        }
      }
    }
    abort();
  }
}

uint64_t AddAtomFixed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = LookUpAddStringHash();
  int v6 = *(_DWORD *)(a1 + 68);
  BOOL v7 = *(_DWORD *)(a1 + 64) >= v6 || v6 <= (int)a3;
  if (v7)
  {
    int v8 = 2 * v6;
    if (v8 <= (int)a3) {
      int v9 = a3 + 1;
    }
    else {
      int v9 = v8;
    }
    GrowAtomTable(a1, v9);
  }
  int v10 = (_DWORD *)(*(void *)(a1 + 16) + 8 * v5);
  *(_DWORD *)(*(void *)(a1 + 48) + 4 * (int)a3) = *v10;
  v10[1] = a3;
  int v11 = *(_DWORD *)(a1 + 64);
  if (v11 <= (int)a3)
  {
    uint64_t v12 = *(void *)(a1 + 56);
    do
    {
      if (v11)
      {
        unsigned int v13 = 0;
        int v14 = 0;
        unsigned int v15 = v11;
        do
        {
          int v16 = v15 & 1 | (2 * v14);
          ++v13;
          int v14 = v16;
          BOOL v7 = v15 > 1;
          v15 >>= 1;
        }
        while (v7);
      }
      else
      {
        int v16 = 0;
        unsigned int v13 = 0;
      }
      BOOL v17 = v13 <= 0x14;
      char v18 = 20 - v13;
      if (!v17) {
        char v18 = 0;
      }
      *(_DWORD *)(v12 + 4 * v11) = v16 << v18;
      int v19 = *(_DWORD *)(a1 + 64);
      int v11 = v19 + 1;
      *(_DWORD *)(a1 + 64) = v19 + 1;
    }
    while (v19 < (int)a3);
  }
  return a3;
}

uint64_t GetStringOfAtom(void *a1, int a2)
{
  return *a1 + *(int *)(a1[6] + 4 * a2);
}

void FreeAtomTable(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2) {
    free(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  unsigned int v3 = *(void **)(a1 + 16);
  if (v3) {
    free(v3);
  }
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = *(void **)(a1 + 48);
  if (v4) {
    free(v4);
  }
  unsigned int v5 = *(void **)(a1 + 56);
  if (v5) {
    free(v5);
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
}

uint64_t FindHashLoc(uint64_t *a1, char *__s1)
{
  int v4 = *__s1;
  if (*__s1)
  {
    int v5 = 0;
    int v6 = __s1 + 1;
    signed __int8 v7 = *__s1;
    do
    {
      int v5 = (13507 * v5 + 197 * v7) ^ (v5 >> 2);
      int v8 = *v6++;
      signed __int8 v7 = v8;
    }
    while (v8);
    int v9 = v5 & 0x7FFFFFFF;
  }
  else
  {
    int v9 = 0;
  }
  int v10 = *((_DWORD *)a1 + 6);
  uint64_t v11 = (v9 % v10);
  uint64_t v12 = a1[2];
  uint64_t v13 = *(int *)(v12 + 8 * v11);
  if (v13)
  {
    uint64_t v14 = *a1;
    if (strcmp(__s1, (const char *)(*a1 + v13)))
    {
      int v15 = 0;
      if (v4)
      {
        int v16 = __s1 + 1;
        do
        {
          int v15 = (729 * v15 + 37 * (char)v4) ^ (v15 >> 1);
          int v17 = *v16++;
          LOBYTE(v4) = v17;
        }
        while (v17);
      }
      uint64_t v18 = 0;
      while (1)
      {
        uint64_t v11 = (((v11 + v15) & 0x7FFFFFFF) % v10);
        uint64_t v19 = *(int *)(v12 + 8 * v11);
        if (!v19) {
          break;
        }
        if (!strcmp(__s1, (const char *)(v14 + v19))) {
          return v11;
        }
        v18 += 4;
        if (v18 == 12) {
          return 0xFFFFFFFFLL;
        }
      }
      ++*(_DWORD *)((char *)a1 + v18 + 32);
    }
  }
  return v11;
}

uint64_t lazyCPPSetup(uint64_t result)
{
  if (!*(_DWORD *)(result + 28))
  {
    uint64_t v1 = result;
    glpInitializeExtensionBehavior(*(void *)(result + 32));
    glpAddExtensionDefines(*(void *)(v1 + 32));
    uint64_t result = glpParseContextValidateGLSLVersion(*(void *)(v1 + 32));
    *(_DWORD *)(v1 + 28) = 1;
  }
  return result;
}

uint64_t InitCPP(uint64_t a1)
{
  uint64_t v2 = a1 + 384;
  *(_DWORD *)(a1 + 456) = LookUpAddString(a1 + 384, "define");
  *(_DWORD *)(a1 + 460) = LookUpAddString(v2, "defined");
  *(_DWORD *)(a1 + 468) = LookUpAddString(v2, "elif");
  *(_DWORD *)(a1 + 464) = LookUpAddString(v2, "else");
  *(_DWORD *)(a1 + 472) = LookUpAddString(v2, "endif");
  *(_DWORD *)(a1 + 476) = LookUpAddString(v2, "if");
  *(_DWORD *)(a1 + 480) = LookUpAddString(v2, "ifdef");
  *(_DWORD *)(a1 + 484) = LookUpAddString(v2, "ifndef");
  *(_DWORD *)(a1 + 488) = LookUpAddString(v2, "include");
  *(_DWORD *)(a1 + 492) = LookUpAddString(v2, "line");
  *(_DWORD *)(a1 + 496) = LookUpAddString(v2, "pragma");
  *(_DWORD *)(a1 + 500) = LookUpAddString(v2, "undef");
  *(_DWORD *)(a1 + 504) = LookUpAddString(v2, "error");
  *(_DWORD *)(a1 + 508) = LookUpAddString(v2, "__LINE__");
  *(_DWORD *)(a1 + 512) = LookUpAddString(v2, "__FILE__");
  *(_DWORD *)(a1 + 516) = LookUpAddString(v2, "__VERSION__");
  *(_DWORD *)(a1 + 520) = LookUpAddString(v2, "version");
  *(_DWORD *)(a1 + 524) = LookUpAddString(v2, "extension");
  *(_DWORD *)(a1 + 528) = LookUpAddString(v2, "core");
  *(_DWORD *)(a1 + 532) = LookUpAddString(v2, "es");
  Pool = mem_CreatePool(0, 0, v3);
  *(void *)(a1 + 536) = NewScopeInPool(a1, Pool);
  return 1;
}

uint64_t FreeCPP(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 536);
  if (v1)
  {
    mem_FreePool(*(void **)(v1 + 40));
    *(void *)(a1 + 536) = 0;
  }
  return 1;
}

BOOL op_logor(int a1, int a2)
{
  return (a2 | a1) != 0;
}

BOOL op_logand(int a1, int a2)
{
  if (a1) {
    BOOL v2 = a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  return !v2;
}

uint64_t op_or(unsigned int a1, int a2)
{
  return a2 | a1;
}

uint64_t op_xor(unsigned int a1, int a2)
{
  return a2 ^ a1;
}

uint64_t op_and(unsigned int a1, int a2)
{
  return a2 & a1;
}

BOOL op_eq(int a1, int a2)
{
  return a1 == a2;
}

BOOL op_ne(int a1, int a2)
{
  return a1 != a2;
}

BOOL op_gt(int a1, int a2)
{
  return a1 > a2;
}

BOOL op_ge(int a1, int a2)
{
  return a1 >= a2;
}

BOOL op_lt(int a1, int a2)
{
  return a1 < a2;
}

BOOL op_le(int a1, int a2)
{
  return a1 <= a2;
}

uint64_t op_shl(int a1, char a2)
{
  return (a1 << a2);
}

uint64_t op_shr(int a1, char a2)
{
  return (a1 >> a2);
}

uint64_t op_add(int a1, int a2)
{
  return (a2 + a1);
}

uint64_t op_sub(int a1, int a2)
{
  return (a1 - a2);
}

uint64_t op_mul(int a1, int a2)
{
  return (a2 * a1);
}

uint64_t op_div(int a1, int a2)
{
  if (a2) {
    return (a1 / a2);
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t op_mod(int a1, int a2)
{
  if (a2) {
    return (a1 % a2);
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t op_neg(int a1)
{
  return -a1;
}

uint64_t op_cmpl(int a1)
{
  return ~a1;
}

BOOL op_not(int a1)
{
  return a1 == 0;
}

uint64_t readCPPline(uint64_t a1, uint64_t a2)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
  if (v10 != 270) {
    goto LABEL_112;
  }
  int v11 = *(_DWORD *)(a2 + 12);
  if (v11 != *(_DWORD *)(a1 + 520) && !*(_DWORD *)(a1 + 28))
  {
    StringOfAtounint64_t m = (const char *)GetStringOfAtom((void *)(a1 + 384), v11);
    size_t v18 = strlen(StringOfAtom);
    uint64_t v19 = (char *)malloc_type_malloc(v18 + 4, 0x7081ABB9uLL);
    if (!v19) {
      abort();
    }
    uint64_t v20 = (uint64_t)v19;
    sprintf_l(v19, 0, "#%s", StringOfAtom);
    ScanFromSimpleString(a1, v20, 0);
    lazyCPPSetup(a1);
    return 10;
  }
  if (v11 != *(_DWORD *)(a1 + 456))
  {
    if (v11 == *(_DWORD *)(a1 + 464))
    {
      uint64_t v15 = *(unsigned int *)(a1 + 40);
      if ((int)v15 < 1)
      {
        uint64_t v14 = "#else mismatch";
        goto LABEL_110;
      }
      if (*(_DWORD *)(a1 + 4 * v15 + 44))
      {
        uint64_t v14 = "#else after a #else";
        goto LABEL_110;
      }
      if ((*(unsigned int (**)(void))(*(void *)(a1 + 16) + 16))() != 10)
      {
        if ((int)glpCompilerGetIOSVersion(*(void *)(*(void *)(a1 + 32) + 784)) < 10) {
          glpCPPWarningToInfoLog(a1, (char)"unexpected tokens following #else preprocessor directive - expected a newline");
        }
        else {
          glpCPPErrorToInfoLog(a1, (char)"unexpected tokens following #else preprocessor directive - expected a newline");
        }
        while ((*(unsigned int (**)(void))(*(void *)(a1 + 16) + 16))() != 10)
          ;
      }
      *(_DWORD *)(a1 + 4 * *(int *)(a1 + 40) + 44) = 1;
LABEL_99:
      uint64_t v28 = CPPelse(a1, 0, a2);
      goto LABEL_100;
    }
    if (v11 == *(_DWORD *)(a1 + 468))
    {
      uint64_t v16 = *(unsigned int *)(a1 + 40);
      if ((int)v16 < 1)
      {
        uint64_t v14 = "#elif mismatch";
        goto LABEL_110;
      }
      if (*(_DWORD *)(a1 + 4 * v16 + 44))
      {
        uint64_t v14 = "#elif after a #else";
        goto LABEL_110;
      }
      while ((*(unsigned int (**)(void))(*(void *)(a1 + 16) + 16))() != 10)
        ;
      goto LABEL_99;
    }
    if (v11 == *(_DWORD *)(a1 + 472))
    {
      int v21 = *(_DWORD *)(a1 + 40);
      BOOL v22 = __OFSUB__(v21, 1);
      int v23 = v21 - 1;
      if (v23 < 0 != v22)
      {
        uint64_t v14 = "#endif mismatch";
        goto LABEL_110;
      }
      *(_DWORD *)(a1 + 40) = v23;
      if ((*(unsigned int (**)(void))(*(void *)(a1 + 16) + 16))() != 10)
      {
        if ((int)glpCompilerGetIOSVersion(*(void *)(*(void *)(a1 + 32) + 784)) < 8) {
          glpCPPWarningToInfoLog(a1, (char)"unexpected tokens following #endif preprocessor directive - expected a newline");
        }
        else {
          glpCPPErrorToInfoLog(a1, (char)"unexpected tokens following #endif preprocessor directive - expected a newline");
        }
        uint64_t v10 = 10;
        while ((*(unsigned int (**)(void))(*(void *)(a1 + 16) + 16))() != 10)
          ;
        goto LABEL_112;
      }
      goto LABEL_27;
    }
    if (v11 == *(_DWORD *)(a1 + 476))
    {
      uint64_t v28 = CPPif (a1, a2);
    }
    else
    {
      if (v11 == *(_DWORD *)(a1 + 480))
      {
        uint64_t v51 = a1;
        int v52 = 1;
      }
      else
      {
        if (v11 != *(_DWORD *)(a1 + 484))
        {
          if (v11 == *(_DWORD *)(a1 + 488))
          {
            if (glpIsExtensionEnabled(*(void *)(a1 + 32), 0x19u)
              || glpIsExtensionEnabled(*(void *)(a1 + 32), 0x23u))
            {
              uint64_t v28 = CPPinclude(a1, a2);
              goto LABEL_100;
            }
            int v11 = *(_DWORD *)(a2 + 12);
          }
          if (v11 == *(_DWORD *)(a1 + 492))
          {
            uint64_t v28 = CPPline((void *)a1, a2);
            goto LABEL_100;
          }
          if (v11 == *(_DWORD *)(a1 + 496))
          {
            uint64_t v28 = CPPpragma(a1, a2);
            goto LABEL_100;
          }
          if (v11 == *(_DWORD *)(a1 + 500))
          {
            uint64_t v28 = CPPundef(a1, a2);
            goto LABEL_100;
          }
          if (v11 != *(_DWORD *)(a1 + 504))
          {
            if (v11 == *(_DWORD *)(a1 + 520))
            {
              uint64_t v28 = CPPversion(a1, a2);
            }
            else
            {
              if (v11 != *(_DWORD *)(a1 + 524))
              {
                glpStoreErrMsg(a1, (char)"Invalid Directive:", v4, v5, v6, v7, v8, v9);
                char v68 = GetStringOfAtom((void *)(a1 + 384), *(_DWORD *)(a2 + 12));
                glpStoreErrMsg(a1, v68, v69, v70, v71, v72, v73, v74);
                char ErrMsg = glpGetErrMsg(a1);
                glpCPPShInfoLogMsg(a1, ErrMsg);
                glpResetErrMsg(a1);
                goto LABEL_111;
              }
              uint64_t v28 = CPPextension(a1, a2);
            }
            goto LABEL_100;
          }
          CPPerror(a1, a2);
LABEL_27:
          uint64_t v10 = 10;
          goto LABEL_112;
        }
        uint64_t v51 = a1;
        int v52 = 0;
      }
      uint64_t v28 = CPPifdef(v51, v52, a2);
    }
LABEL_100:
    uint64_t v10 = v28;
    goto LABEL_112;
  }
  uint64_t v12 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
  if (v12 != 270)
  {
    uint64_t v10 = v12;
LABEL_15:
    glpCPPErrorToInfoLog(a1, (char)"#define");
    goto LABEL_112;
  }
  if (!*(_DWORD *)(a1 + 28)) {
    lazyCPPSetup(a1);
  }
  int v13 = *(_DWORD *)(a2 + 12);
  if (checkReservedName(a1, v13))
  {
    uint64_t v14 = "#define of reserved name";
    goto LABEL_110;
  }
  int v24 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
  if (v24 != 40)
  {
    int v27 = v24;
    int v25 = 0;
    uint64_t v26 = 0;
LABEL_39:
    Atomuint64_t String = GetAtomString(a1 + 384, v13);
    uint64_t v30 = NewTokenStream(a1, AtomString, *(void **)(*(void *)(a1 + 536) + 40));
    while ((v27 + 1) > 0xB || ((1 << (v27 + 1)) & 0x803) == 0)
    {
      while (v27 == 92)
      {
        int v32 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
        if ((v32 + 1) > 0xB || ((1 << (v32 + 1)) & 0x803) == 0)
        {
          int v27 = v32;
          RecordToken(v30, 92, a2);
        }
        else
        {
          int v27 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
        }
      }
      if ((v27 + 1) > 0xB || ((1 << (v27 + 1)) & 0x803) == 0)
      {
        RecordToken(v30, v27, a2);
        int v27 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
      }
    }
    uint64_t v34 = LookUpSymbol(a1, *(void *)(a1 + 536), v13);
    if (v34)
    {
      uint64_t v41 = v34;
      if ((*(unsigned char *)(v34 + 56) & 2) == 0)
      {
        uint64_t v76 = v26;
        if (*(_DWORD *)(v34 + 32) == v25)
        {
          if (v25 < 1)
          {
LABEL_62:
            RewindTokenStream(*(void *)(v34 + 48));
            RewindTokenStream((uint64_t)v30);
            while (1)
            {
              bzero((void *)a2, 0x420uLL);
              Tokeunint64_t n = ReadToken(*(uint64_t **)(v41 + 48), a2);
              int v49 = *(_DWORD *)(a2 + 12);
              int v50 = *(_DWORD *)(a2 + 20);
              __strcpy_chk();
              bzero((void *)a2, 0x420uLL);
              if (ReadToken(v30, a2) != Token
                || *(_DWORD *)(a2 + 12) != v49
                || *(_DWORD *)(a2 + 20) != v50
                || strcmp((const char *)(a2 + 24), __s2))
              {
                break;
              }
              if (Token <= 0) {
                goto LABEL_73;
              }
            }
          }
          else
          {
            __n128 v42 = *(int **)(v34 + 40);
            uint64_t v43 = v25;
            __n128 v44 = v26;
            while (1)
            {
              int v46 = *v42++;
              int v45 = v46;
              int v47 = *v44++;
              if (v45 != v47) {
                break;
              }
              if (!--v43) {
                goto LABEL_62;
              }
            }
          }
        }
        glpStoreErrMsg(a1, (char)"Macro Redefined", v35, v36, v37, v38, v39, v40);
        char v53 = GetStringOfAtom((void *)(a1 + 384), v13);
        glpStoreErrMsg(a1, v53, v54, v55, v56, v57, v58, v59);
        char v60 = glpGetErrMsg(a1);
        glpDecLineNumber(a1);
        glpCPPShInfoLogMsg(a1, v60);
        glpIncLineNumber(a1);
        glpResetErrMsg(a1);
LABEL_73:
        uint64_t v26 = v76;
      }
    }
    else
    {
      uint64_t v41 = AddSymbol(a1, *(void *)(a1 + 536), v13, 0);
    }
    *(_DWORD *)(v41 + 32) = v25;
    *(_DWORD *)(v41 + 36) = 0;
    *(void *)(v41 + 40) = v26;
    *(void *)(v41 + 48) = v30;
    uint64_t v10 = 10;
    *(void *)(v41 + 56) = 0;
    goto LABEL_112;
  }
  if (*(_DWORD *)(a2 + 16))
  {
    int v25 = 0;
    uint64_t v26 = 0;
    int v27 = 40;
    goto LABEL_39;
  }
  int v25 = 0;
  while (1)
  {
    uint64_t v61 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
    uint64_t v10 = v61;
    if (!v25 && v61 == 41)
    {
      int v25 = 0;
LABEL_120:
      uint64_t v26 = (_DWORD *)mem_Alloc(*(void **)(*(void *)(a1 + 536) + 40), 4 * v25);
      memcpy(v26, __src, 4 * v25);
      int v27 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
      *(_DWORD *)(a2 + 20) = 1;
      goto LABEL_39;
    }
    if (v61 != 270) {
      goto LABEL_15;
    }
    if (v25 <= 63) {
      break;
    }
    if ((int)glpCompilerGetIOSVersion(*(void *)(*(void *)(a1 + 32) + 784)) >= 10)
    {
      uint64_t v14 = "too many arguments for #define";
      goto LABEL_110;
    }
LABEL_90:
    uint64_t v65 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
    if (v65 != 44)
    {
      uint64_t v10 = v65;
      if (v65 != 41) {
        goto LABEL_15;
      }
      goto LABEL_120;
    }
  }
  if (v25 < 1)
  {
LABEL_88:
    __src[v25++] = *(_DWORD *)(a2 + 12);
    goto LABEL_90;
  }
  uint64_t v62 = v25;
  uint64_t v63 = __src;
  while (1)
  {
    int v64 = *v63++;
    if (v64 == *(_DWORD *)(a2 + 12) && (int)glpCompilerGetIOSVersion(*(void *)(*(void *)(a1 + 32) + 784)) >= 10) {
      break;
    }
    if (!--v62) {
      goto LABEL_88;
    }
  }
  uint64_t v14 = "#define has duplicate argument names";
LABEL_110:
  glpCPPErrorToInfoLog(a1, (char)v14);
LABEL_111:
  uint64_t v10 = 270;
LABEL_112:
  while ((v10 + 1) > 0xB || ((1 << (v10 + 1)) & 0x803) == 0)
    uint64_t v10 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
  lazyCPPSetup(a1);
  return v10;
}

uint64_t CPPelse(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
  if ((int)result < 1) {
    return result;
  }
  int v7 = *(_DWORD *)(a1 + 40);
  while (1)
  {
    if (result == 10) {
      goto LABEL_13;
    }
    if (result != 35)
    {
      while ((*(unsigned int (**)(void))(*(void *)(a1 + 16) + 16))() != 10)
        ;
LABEL_13:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
      goto LABEL_14;
    }
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
    if (result == 270) {
      break;
    }
LABEL_14:
    if ((int)result <= 0) {
      return result;
    }
  }
  int v8 = *(_DWORD *)(a3 + 12);
  if (v8 == *(_DWORD *)(a1 + 476) || v8 == *(_DWORD *)(a1 + 480) || v8 == *(_DWORD *)(a1 + 484))
  {
    unsigned int v9 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 40) = v9;
    if (v9 >= 0x40)
    {
      glpCPPErrorToInfoLog(a1, (char)"max #if nesting depth exceeded");
      return 0;
    }
    *(_DWORD *)(a1 + 4 * v9 + 44) = 0;
    goto LABEL_11;
  }
  if (v8 == *(_DWORD *)(a1 + 472))
  {
    int v10 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v10 - 1;
    if (v10 <= v7)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
      if (result != 10)
      {
        if ((int)glpCompilerGetIOSVersion(*(void *)(*(void *)(a1 + 32) + 784)) < 8) {
          glpCPPWarningToInfoLog(a1, (char)"unexpected tokens following #endif preprocessor directive - expected a newline");
        }
        else {
          glpCPPErrorToInfoLog(a1, (char)"unexpected tokens following #endif preprocessor directive - expected a newline");
        }
        do
        {
          int v16 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
          uint64_t result = 10;
        }
        while (v16 != 10);
      }
      return result;
    }
    goto LABEL_11;
  }
  if (v8 == *(_DWORD *)(a1 + 468))
  {
    uint64_t v11 = *(int *)(a1 + 40);
    if (!*(_DWORD *)(a1 + 4 * v11 + 44))
    {
      uint64_t result = 270;
      if (a2 && v11 == v7)
      {
        *(_DWORD *)(a1 + 40) = v7 - 1;
        return CPPif (a1, a3);
      }
      goto LABEL_14;
    }
    uint64_t v15 = "#elif after a #else";
LABEL_41:
    glpCPPErrorToInfoLog(a1, (char)v15);
    return 270;
  }
  if (v8 != *(_DWORD *)(a1 + 464))
  {
LABEL_11:
    uint64_t result = 270;
    goto LABEL_14;
  }
  uint64_t v12 = a1 + 4 * *(int *)(a1 + 40);
  int v14 = *(_DWORD *)(v12 + 44);
  int v13 = (_DWORD *)(v12 + 44);
  if (v14)
  {
    uint64_t v15 = "#else after a #else";
    goto LABEL_41;
  }
  _DWORD *v13 = 1;
  uint64_t result = 270;
  if (!a2 || *(_DWORD *)(a1 + 40) != v7) {
    goto LABEL_14;
  }
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
  if (result != 10)
  {
    if ((int)glpCompilerGetIOSVersion(*(void *)(*(void *)(a1 + 32) + 784)) < 10) {
      glpCPPWarningToInfoLog(a1, (char)"unexpected tokens following #else preprocessor directive - expected a newline");
    }
    else {
      glpCPPErrorToInfoLog(a1, (char)"unexpected tokens following #else preprocessor directive - expected a newline");
    }
    do
    {
      int v17 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
      uint64_t result = 10;
    }
    while (v17 != 10);
  }
  return result;
}

uint64_t CPPif (uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
  uint64_t v7 = 0;
  if (!*(_DWORD *)(a1 + 28)) {
    lazyCPPSetup(a1);
  }
  unsigned int v5 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v5;
  if (v5 < 0x40)
  {
    *(_DWORD *)(a1 + 4 * v5 + 44) = 0;
    if (eval(a1, v4, 0, (BOOL *)&v7 + 1, &v7, a2, 0) != 10)
    {
      glpCPPErrorToInfoLog(a1, (char)"unexpected tokens following #if preprocessor directive - expected a newline");
      while ((*(unsigned int (**)(void))(*(void *)(a1 + 16) + 16))() != 10)
        ;
    }
    if (v7) {
      return 10;
    }
    else {
      return CPPelse(a1, 1, a2);
    }
  }
  else
  {
    glpCPPErrorToInfoLog(a1, (char)"max #if nesting depth exceeded");
    return 0;
  }
}

uint64_t CPPifdef(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
  int v7 = *(_DWORD *)(a3 + 12);
  if (!*(_DWORD *)(a1 + 28)) {
    lazyCPPSetup(a1);
  }
  unsigned int v8 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v8;
  if (v8 >= 0x40)
  {
    glpCPPErrorToInfoLog(a1, (char)"max #if nesting depth exceeded");
    return 0;
  }
  *(_DWORD *)(a1 + 4 * v8 + 44) = 0;
  if (v6 != 270)
  {
    if (a2) {
      int v10 = "ifdef";
    }
    else {
      int v10 = "ifndef";
    }
    glpCPPErrorToInfoLog(a1, (char)v10);
    return v6;
  }
  uint64_t v9 = LookUpSymbol(a1, *(void *)(a1 + 536), v7);
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 16) + 16))() != 10)
  {
    if ((int)glpCompilerGetIOSVersion(*(void *)(*(void *)(a1 + 32) + 784)) < 10) {
      glpCPPWarningToInfoLog(a1, (char)"unexpected tokens following #ifdef preprocessor directive - expected a newline");
    }
    else {
      glpCPPErrorToInfoLog(a1, (char)"unexpected tokens following #ifdef preprocessor directive - expected a newline");
    }
    while ((*(unsigned int (**)(void))(*(void *)(a1 + 16) + 16))() != 10)
      ;
  }
  if (v9) {
    int v11 = ((*(_DWORD *)(v9 + 56) >> 1) & 1) == 0;
  }
  else {
    int v11 = 0;
  }
  if (v11 == a2) {
    return 10;
  }

  return CPPelse(a1, 1, a3);
}

uint64_t CPPinclude(uint64_t a1, uint64_t a2)
{
  v43[1] = *MEMORY[0x263EF8340];
  if (!*(_DWORD *)(a1 + 28)) {
    lazyCPPSetup(a1);
  }
  *(_DWORD *)(a1 + 352) |= 2u;
  while (1)
  {
    int v4 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
    if (v4 != 270) {
      break;
    }
    if (!MacroExpand((void *)a1, *(_DWORD *)(a2 + 12), a2))
    {
      *(_DWORD *)(a1 + 352) &= ~2u;
LABEL_16:
      glpCPPErrorToInfoLog(a1, (char)"#include");
      return 10;
    }
  }
  *(_DWORD *)(a1 + 352) &= ~2u;
  if (v4 != 278) {
    goto LABEL_16;
  }
  StringOfAtounint64_t m = (char *)GetStringOfAtom((void *)(a1 + 384), *(_DWORD *)(a2 + 12));
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 16) + 16))() != 10)
  {
    glpCPPWarningToInfoLog(a1, (char)"unexpected tokens following #include preprocessor directive - expected a newline");
    while ((*(unsigned int (**)(void))(*(void *)(a1 + 16) + 16))() != 10)
      ;
  }
  if (!*(void *)(a1 + 368) || !*(void *)(a1 + 376))
  {
    glpStoreErrMsg(a1, (char)"GetInclude, FreeInclude callbacks unset, cannot #include", v6, v7, v8, v9, v10, v11);
    glpStoreErrMsg(a1, (char)StringOfAtom, v23, v24, v25, v26, v27, v28);
    char ErrMsg = glpGetErrMsg(a1);
    glpDecLineNumber(a1);
    glpCPPShInfoLogMsg(a1, ErrMsg);
    glpIncLineNumber(a1);
    glpResetErrMsg(a1);
    return 0;
  }
  size_t v12 = strlen(StringOfAtom);
  int v13 = (char *)v43 - ((MEMORY[0x270FA5388](v12) + 16) & 0xFFFFFFFFFFFFFFF0);
  strncpy(v13, StringOfAtom, v12);
  v13[v12] = 0;
  uint64_t v14 = (*(uint64_t (**)(void, char *))(a1 + 368))(*(void *)(a1 + 360), v13);
  if (!v14)
  {
    glpStoreErrMsg(a1, (char)"Cannot #include", v15, v16, v17, v18, v19, v20);
    glpStoreErrMsg(a1, (char)StringOfAtom, v30, v31, v32, v33, v34, v35);
    glpStoreErrMsg(a1, (char)"not found", v36, v37, v38, v39, v40, v41);
    char v42 = glpGetErrMsg(a1);
    glpDecLineNumber(a1);
    glpCPPShInfoLogMsg(a1, v42);
    glpIncLineNumber(a1);
    glpResetErrMsg(a1);
    return 0;
  }
  int v21 = *(_DWORD *)(a1 + 356);
  *(_DWORD *)(a1 + 356) = v21 + 1;
  if (v21 >= 199)
  {
    glpDecLineNumber(a1);
    glpCPPShInfoLogMsg(a1, (char)"#include nested too deeply");
    glpIncLineNumber(a1);
    return 0;
  }
  ScanFromIncludeString(a1, v14, StringOfAtom);
  return 10;
}

uint64_t CPPline(void *a1, uint64_t a2)
{
  for (uint64_t i = *(uint64_t (**)(void))(a1[2] + 16); ; uint64_t i = *(uint64_t (**)(void))(a1[2] + 16))
  {
    uint64_t v5 = i();
    uint64_t v6 = v5;
    if (v5 != 270) {
      break;
    }
    if (!MacroExpand(a1, *(_DWORD *)(a2 + 12), a2)) {
      goto LABEL_26;
    }
  }
  if (v5 == 10)
  {
    glpDecLineNumber((uint64_t)a1);
    glpCPPErrorToInfoLog((uint64_t)a1, (char)"#line");
    glpIncLineNumber((uint64_t)a1);
    return v6;
  }
  if (v5 != 271) {
    goto LABEL_26;
  }
  int v7 = strtol_l((const char *)(a2 + 24), 0, 10, 0);
  *(_DWORD *)(a2 + 16) = v7;
  glpSetLineNumber((uint64_t)a1, v7 - (*(_DWORD *)a1 > 5u));
  while (1)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(a1[2] + 16))();
    uint64_t v6 = v8;
    if (v8 != 270) {
      break;
    }
    if (!MacroExpand(a1, *(_DWORD *)(a2 + 12), a2)) {
      goto LABEL_26;
    }
  }
  if (v8 != 10)
  {
    if (v8 == 271)
    {
      glpSetFilename((uint64_t)a1, (char *)(a2 + 24));
      while (1)
      {
        uint64_t v6 = (*(uint64_t (**)(void))(a1[2] + 16))();
        if (v6 != 270) {
          break;
        }
        if (!MacroExpand(a1, *(_DWORD *)(a2 + 12), a2)) {
          goto LABEL_26;
        }
      }
LABEL_25:
      if (v6 == 10) {
        return v6;
      }
      goto LABEL_26;
    }
    if (v8 == 278 && (glpIsExtensionEnabled(a1[4], 0x19u) || glpIsExtensionEnabled(a1[4], 0x23u)))
    {
      StringOfAtounint64_t m = (char *)GetStringOfAtom(a1 + 48, *(_DWORD *)(a2 + 12));
      glpSetFilename((uint64_t)a1, StringOfAtom);
      do
      {
        uint64_t v6 = (*(uint64_t (**)(void))(a1[2] + 16))();
        if (v6 != 270) {
          goto LABEL_25;
        }
      }
      while (MacroExpand(a1, *(_DWORD *)(a2 + 12), a2));
    }
LABEL_26:
    glpCPPErrorToInfoLog((uint64_t)a1, (char)"#line");
  }
  return v6;
}

uint64_t CPPpragma(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
  if (v4 == 10) {
    return 10;
  }
  int v6 = v4;
  int v7 = malloc_type_malloc(0x50uLL, 0x7081ABB9uLL);
  if (!v7) {
LABEL_26:
  }
    abort();
  uint64_t v8 = v7;
  uint64_t v9 = 0;
  int v10 = 10;
  do
  {
    if (v9 >= v10)
    {
      v10 *= 2;
      uint64_t v11 = malloc_type_realloc(v8, 8 * v10, 0x2BDC8648uLL);
      if (!v11) {
        goto LABEL_26;
      }
      uint64_t v8 = v11;
    }
    if (v6 > 269)
    {
      if (v6 == 271)
      {
LABEL_16:
        size_t v16 = strlen((const char *)(a2 + 24));
        uint64_t v14 = (char *)malloc_type_malloc(v16 + 1, 0x7081ABB9uLL);
        if (!v14) {
          goto LABEL_26;
        }
        *((void *)v8 + v9) = v14;
        uint64_t v15 = (char *)(a2 + 24);
        goto LABEL_20;
      }
      if (v6 == 270)
      {
        Atomuint64_t String = GetAtomString(a1 + 384, *(_DWORD *)(a2 + 12));
        size_t v13 = strlen(AtomString);
        uint64_t v14 = (char *)malloc_type_malloc(v13 + 1, 0x7081ABB9uLL);
        if (!v14) {
          goto LABEL_26;
        }
        *((void *)v8 + v9) = v14;
        uint64_t v15 = (char *)AtomString;
        goto LABEL_20;
      }
    }
    else
    {
      if ((v6 - 266) < 2) {
        goto LABEL_16;
      }
      if (v6 == -1)
      {
        glpCPPShInfoLogMsg(a1, (char)"#pragma directive must end with a newline");
        return 0xFFFFFFFFLL;
      }
    }
    __src[0] = v6;
    __src[1] = 0;
    uint64_t v14 = (char *)malloc_type_malloc(2uLL, 0x7081ABB9uLL);
    if (!v14) {
      goto LABEL_26;
    }
    *((void *)v8 + v9) = v14;
    uint64_t v15 = __src;
LABEL_20:
    strcpy(v14, v15);
    ++v9;
    int v6 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
  }
  while (v6 != 10);
  (*(void (**)(void))(*(void *)(a1 + 16) + 32))();
  glpHandlePragma(a1, (const char **)v8, v9);
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
  if (v9)
  {
    uint64_t v17 = v9;
    uint64_t v18 = (void **)v8;
    do
    {
      uint64_t v19 = *v18++;
      free(v19);
      --v17;
    }
    while (v17);
  }
  free(v8);
  return v5;
}

uint64_t CPPundef(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
  if (v4 != 270)
  {
    uint64_t v5 = v4;
    goto LABEL_5;
  }
  if (checkReservedName(a1, *(_DWORD *)(a2 + 12)))
  {
    uint64_t v5 = 270;
    int v6 = "#undef of reserved name";
LABEL_6:
    glpCPPErrorToInfoLog(a1, (char)v6);
    return v5;
  }
  uint64_t v8 = LookUpSymbol(a1, *(void *)(a1 + 536), *(_DWORD *)(a2 + 12));
  if (v8) {
    *(_DWORD *)(v8 + 56) |= 2u;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
  if (v5 != 10)
  {
LABEL_5:
    int v6 = "#undef";
    goto LABEL_6;
  }
  return v5;
}

uint64_t CPPerror(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
  glpStoreErrMsg(a1, (char)"", v5, v6, v7, v8, v9, v10);
  while (1)
  {
    char v17 = v4 - 9;
    if ((v4 - 265) > 0xD) {
      break;
    }
    if (((1 << v17) & 0x46) != 0)
    {
      uint64_t v18 = a1;
      StringOfAtounint64_t m = a2 + 24;
      goto LABEL_11;
    }
    if (((1 << v17) & 0x2020) == 0)
    {
      if (v4 == 265) {
        goto LABEL_12;
      }
      break;
    }
    int v20 = *(_DWORD *)(a2 + 12);
    int v21 = (void *)(a1 + 384);
LABEL_10:
    StringOfAtounint64_t m = GetStringOfAtom(v21, v20);
    uint64_t v18 = a1;
LABEL_11:
    glpStoreErrMsg(v18, StringOfAtom, v11, v12, v13, v14, v15, v16);
    int v4 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
  }
  if (v4 != 10)
  {
    int v21 = (void *)(a1 + 384);
    int v20 = v4;
    goto LABEL_10;
  }
LABEL_12:
  glpDecLineNumber(a1);
  char ErrMsg = glpGetErrMsg(a1);
  glpCPPShInfoLogMsg(a1, ErrMsg);
  glpResetErrMsg(a1);

  return glpIncLineNumber(a1);
}

uint64_t CPPversion(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
  if (*(_DWORD *)(a1 + 28) == 1) {
    glpCPPShInfoLogMsg(a1, (char)"#version must occur before any other statement in the program");
  }
  if (v4 != 271)
  {
    if (v4 == 10)
    {
      glpDecLineNumber(a1);
      glpCPPErrorToInfoLog(a1, (char)"#version");
      glpIncLineNumber(a1);
      return v4;
    }
    glpCPPErrorToInfoLog(a1, (char)"#version");
  }
  int v5 = strtol_l((const char *)(a2 + 24), 0, 10, 0);
  *(_DWORD *)(a2 + 16) = v5;
  glpParseContextSetGLSLVersion(*(void *)(a1 + 32), v5);
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
  if (v4 == 10 && *(_DWORD *)a1 != 6)
  {
    lazyCPPSetup(a1);
    return 10;
  }
  else
  {
    int v6 = *(_DWORD *)(a2 + 12);
    if (v6 == *(_DWORD *)(a1 + 528) && *(_DWORD *)a1 >= 5u || v6 == *(_DWORD *)(a1 + 532) && *(_DWORD *)a1 == 6) {
      lazyCPPSetup(a1);
    }
    else {
      glpCPPErrorToInfoLog(a1, (char)"#version");
    }
  }
  return v4;
}

uint64_t CPPextension(uint64_t a1, uint64_t a2)
{
  if ((int)glpCompilerGetIOSVersion(*(void *)(*(void *)(a1 + 32) + 784)) >= 10 && (*(unsigned char *)(a1 + 352) & 8) != 0) {
    glpCPPErrorToInfoLog(a1, (char)"#extension must always be before any non-preprocessor tokens");
  }
  int v4 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
  if (v4 != 270)
  {
    if (v4 == 10)
    {
      glpDecLineNumber(a1);
      glpCPPShInfoLogMsg(a1, (char)"extension name not specified");
      glpIncLineNumber(a1);
      return 10;
    }
    glpCPPErrorToInfoLog(a1, (char)"#extension");
  }
  int v6 = *(_DWORD *)(a2 + 12);
  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
  if (v7 != 58)
  {
    uint64_t v5 = v7;
    uint64_t v12 = "':' missing after extension name";
LABEL_14:
    glpCPPShInfoLogMsg(a1, (char)v12);
    return v5;
  }
  uint64_t v8 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
  if (v8 != 270)
  {
    uint64_t v5 = v8;
    uint64_t v12 = "behavior for extension not specified";
    goto LABEL_14;
  }
  uint64_t v9 = *(void *)(a1 + 32);
  Atomuint64_t String = (char *)GetAtomString(a1 + 384, v6);
  uint64_t v11 = (char *)GetAtomString(a1 + 384, *(_DWORD *)(a2 + 12));
  glpUpdateExtensionBehavior(v9, AtomString, v11);
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
  if (v5 != 10) {
    glpCPPErrorToInfoLog(a1, (char)"#extension");
  }
  return v5;
}

uint64_t MacroExpand(void *a1, int a2, uint64_t a3)
{
  uint64_t v6 = LookUpSymbol((uint64_t)a1, a1[67], a2);
  if (*((_DWORD *)a1 + 127) == a2)
  {
    int LineNumber = glpGetLineNumber((uint64_t)a1);
LABEL_6:
    *(_DWORD *)(a3 + 16) = LineNumber;
    sprintf_l((char *)(a3 + 24), 0, "%d", LineNumber);
LABEL_7:
    uint64_t v9 = (uint64_t)a1;
    int v10 = 271;
LABEL_8:
    UngetToken(v9, v10, (const void *)a3);
    return 1;
  }
  if (*((_DWORD *)a1 + 128) == a2)
  {
    if ((*(char *)glpGetFilename((uint64_t)a1) - 48) > 9)
    {
      uint64_t Filename = glpGetFilename((uint64_t)a1);
      *(_DWORD *)(a3 + 12) = LookUpAddString((uint64_t)(a1 + 48), (char *)Filename);
      uint64_t v9 = (uint64_t)a1;
      int v10 = 278;
      goto LABEL_8;
    }
    uint64_t v8 = glpGetFilename((uint64_t)a1);
    int LineNumber = strtol_l((const char *)v8, 0, 10, 0);
    goto LABEL_6;
  }
  if (*((_DWORD *)a1 + 129) == a2)
  {
    int v12 = glpGLSLVersionToInt(*(_DWORD *)a1);
    sprintf_l((char *)(a3 + 24), 0, "%d", v12);
    *(_DWORD *)(a3 + 16) = strtol_l((const char *)(a3 + 24), 0, 10, 0);
    goto LABEL_7;
  }
  uint64_t v14 = v6;
  if (!v6 || (*(unsigned char *)(v6 + 56) & 3) != 0) {
    return 0;
  }
  uint64_t v15 = (char *)malloc_type_malloc(0x48uLL, 0x7081ABB9uLL);
  if (!v15) {
LABEL_82:
  }
    abort();
  uint64_t v16 = (int **)v15;
  *(_OWORD *)(v15 + 8) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 24) = 0u;
  *(void *)uint64_t v15 = a1;
  *((void *)v15 + 2) = macro_scan;
  uint64_t v17 = a1[2];
  *((_DWORD *)v16 + 12) = *(_DWORD *)(v17 + 48);
  v16[5] = *(int **)(v17 + 40);
  v16[7] = (int *)(v14 + 32);
  if (*(void *)(v14 + 40))
  {
    int v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v17, a3);
    if (v18 != 40)
    {
      UngetToken((uint64_t)a1, v18, (const void *)a3);
      *(_DWORD *)(a3 + 12) = a2;
      free(v16);
      return 0;
    }
    v16[8] = (int *)mem_Alloc(*(void **)(a1[67] + 40), 8 * *v16[7]);
    if (*v16[7] >= 1)
    {
      uint64_t v19 = 0;
      do
        *(void *)&v16[8][2 * v19++] = NewTokenStream((uint64_t)a1, "macro arg2", *(void **)(a1[67] + 40));
      while (v19 < *v16[7]);
    }
    uint64_t v20 = 0;
    int v21 = 0;
    while (2)
    {
      int v22 = 0;
      while (1)
      {
        int v23 = (*(uint64_t (**)(void))(a1[2] + 16))();
        if (v23 != 270) {
          goto LABEL_28;
        }
        do
        {
          if (!MacroExpand(a1, *(unsigned int *)(a3 + 12), a3))
          {
            int v23 = 270;
            goto LABEL_31;
          }
          int v30 = (*(uint64_t (**)(void))(a1[2] + 16))();
        }
        while (v30 == 270);
        int v23 = v30;
LABEL_28:
        if (v23 <= 0)
        {
LABEL_62:
          glpStoreErrMsg((uint64_t)a1, (char)"EOF in Macro ", v24, v25, v26, v27, v28, v29);
          StringOfAtounint64_t m = GetStringOfAtom(a1 + 48, a2);
          glpStoreErrMsg((uint64_t)a1, StringOfAtom, v47, v48, v49, v50, v51, v52);
          char ErrMsg = glpGetErrMsg((uint64_t)a1);
          glpCPPShInfoLogMsg((uint64_t)a1, ErrMsg);
          glpResetErrMsg((uint64_t)a1);
          free(v16);
          return 1;
        }
LABEL_31:
        int v31 = *v16[7];
        BOOL v32 = v23 != 41;
        if (v23 != 41 && !v31) {
          break;
        }
        if (v22)
        {
          if (v23 == 40) {
LABEL_40:
          }
            ++v22;
        }
        else
        {
          switch(v23)
          {
            case '(':
              goto LABEL_40;
            case ')':
              if (v31 != 1 || v21 != 0) {
                LODWORD(v20) = v20 + 1;
              }
              goto LABEL_51;
            case ',':
              goto LABEL_43;
          }
          int v22 = 0;
        }
        v22 -= v23 == 41;
        RecordToken(*(void **)&v16[8][2 * v20], v23, a3);
        int v21 = 1;
      }
      BOOL v32 = 1;
LABEL_43:
      if (++v20 < v31) {
        continue;
      }
      break;
    }
LABEL_51:
    if ((int)v20 >= v31)
    {
      if (!v32)
      {
LABEL_63:
        if (*v16[7] >= 1)
        {
          uint64_t v54 = 0;
          while (1)
          {
            uint64_t v55 = *(uint64_t **)&v16[8][2 * v54];
            RewindTokenStream((uint64_t)v55);
            do
            {
              while (1)
              {
                Tokeunint64_t n = ReadToken(v55, a3);
                if (Token == 270) {
                  break;
                }
                if (Token <= 0)
                {
                  uint64_t v57 = v55;
                  goto LABEL_80;
                }
              }
            }
            while (!LookUpSymbol((uint64_t)a1, a1[67], *(_DWORD *)(a3 + 12)));
            uint64_t v57 = NewTokenStream((uint64_t)a1, "macro arg1", *(void **)(a1[67] + 40));
            uint64_t v58 = (char *)malloc_type_malloc(0x38uLL, 0x7081ABB9uLL);
            if (!v58) {
              goto LABEL_82;
            }
            *(_OWORD *)(v58 + 8) = 0u;
            *(_OWORD *)(v58 + 24) = 0u;
            *(_OWORD *)(v58 + 40) = 0u;
            *(void *)uint64_t v58 = a1;
            *((void *)v58 + 2) = eof_scan;
            *((void *)v58 + 3) = eof_scan;
            *((void *)v58 + 4) = noop;
            *((void *)v58 + 1) = a1[2];
            a1[2] = v58;
            ReadFromTokenStream(v55, 0);
            int v59 = (*(uint64_t (**)(void))(a1[2] + 16))();
            if (v59 >= 1)
            {
              for (int i = v59; i > 0; int i = (*(uint64_t (**)(void))(a1[2] + 16))())
              {
                if (i != 270 || !MacroExpand(a1, *(unsigned int *)(a3 + 12), a3)) {
                  RecordToken(v57, i, a3);
                }
              }
            }
            uint64_t v61 = a1[2];
            if (*(uint64_t (**)())(v61 + 16) == eof_scan)
            {
              a1[2] = *(void *)(v61 + 8);
              free((void *)v61);
            }
LABEL_80:
            *(void *)&v16[8][2 * v54++] = v57;
            if (v54 >= *v16[7]) {
              goto LABEL_81;
            }
          }
        }
        goto LABEL_81;
      }
      int v43 = 0;
      uint64_t v34 = "Too many args in Macro ";
      while (v23 != 41 || v43 >= 1)
      {
        int v44 = v43 - (v23 == 41);
        int v45 = (*(uint64_t (**)(void))(a1[2] + 16))();
        int v23 = v45;
        if (v45 == 40) {
          int v43 = v44 + 1;
        }
        else {
          int v43 = v44;
        }
        if (v45 < 0) {
          goto LABEL_62;
        }
      }
    }
    else
    {
      uint64_t v34 = "Too few args in Macro ";
    }
    glpStoreErrMsg((uint64_t)a1, (char)v34, v24, v25, v26, v27, v28, v29);
    char v35 = GetStringOfAtom(a1 + 48, a2);
    glpStoreErrMsg((uint64_t)a1, v35, v36, v37, v38, v39, v40, v41);
    char v42 = glpGetErrMsg((uint64_t)a1);
    glpCPPShInfoLogMsg((uint64_t)a1, v42);
    glpResetErrMsg((uint64_t)a1);
    goto LABEL_63;
  }
LABEL_81:
  v16[1] = (int *)a1[2];
  *(_DWORD *)(v14 + 56) |= 1u;
  RewindTokenStream(*(void *)(v14 + 48));
  a1[2] = v16;
  return 1;
}

uint64_t macro_scan(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)MEMORY[0x270FA5388](a1);
  uint64_t v3 = v2;
  int v4 = v1;
  int v5 = 0;
  BOOL v6 = 0;
  LODWORD(v7) = 0;
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v8 = *v1;
  v29[0] = 0;
  uint64_t v28 = v8 + 384;
  uint64_t v9 = "## pastebuf exceeded";
  while (1)
  {
    int v10 = v9;
    while (1)
    {
      BOOL v11 = v6;
      Tokeunint64_t n = ReadToken(*(uint64_t **)(v4[7] + 16), v3);
      if (Token != 289) {
        break;
      }
      BOOL v6 = 0;
      if (!v11)
      {
        glpCPPErrorToInfoLog(v8, (char)"pasting invalid tokens");
        BOOL v6 = 0;
      }
    }
    uint64_t v13 = Token;
    uint64_t v14 = (unsigned int *)v4[7];
    uint64_t v9 = v10;
    if (Token == 270)
    {
      uint64_t v7 = *v14;
      int v15 = (v7 & ((int)v7 >> 31)) - 1;
      uint64_t v16 = v7 - 1;
      while (1)
      {
        BOOL v17 = __OFSUB__(v7, 1);
        LODWORD(v7) = v7 - 1;
        if ((int)v7 < 0 != v17) {
          break;
        }
        int v18 = *(_DWORD *)(*((void *)v14 + 1) + 4 * v16--);
        if (v18 == *(_DWORD *)(v3 + 12)) {
          goto LABEL_12;
        }
      }
      LODWORD(v7) = v15;
    }
LABEL_12:
    BOOL matched = MatchNextToken(*((void *)v14 + 2), 289);
    BOOL v20 = v13 != 270 || (int)v7 < 0;
    BOOL v21 = !v20;
    if ((!matched & (v5 ^ 1)) != 0) {
      break;
    }
    BOOL v6 = matched;
    if (v21)
    {
      int v22 = *(uint64_t **)(v4[8] + 8 * v7);
      RewindTokenStream((uint64_t)v22);
      int v23 = ReadToken(v22, v3);
      if ((v23 & 0x80000000) == 0)
      {
        while ((v23 - 266) <= 0xD)
        {
          int v24 = 1 << (v23 - 10);
          if ((v24 & 0x23) == 0)
          {
            if ((v24 & 0x3010) == 0) {
              break;
            }
            GetAtomString(v28, *(_DWORD *)(v3 + 12));
          }
LABEL_26:
          if ((unint64_t)__strlcat_chk() >> 4 >= 0x271) {
            glpCPPErrorToInfoLog(v8, (char)v10);
          }
          int v23 = ReadToken(v22, v3);
          if (v23 < 0) {
            goto LABEL_37;
          }
        }
        glpCPPErrorToInfoLog(v8, (char)"pasting invalid tokens");
        goto LABEL_26;
      }
      goto LABEL_37;
    }
    if ((v13 - 266) > 0xD) {
      goto LABEL_34;
    }
    int v25 = 1 << (v13 - 10);
    if ((v25 & 0x23) != 0) {
      goto LABEL_35;
    }
    if ((v25 & 0x3010) != 0) {
      GetAtomString(v28, *(_DWORD *)(v3 + 12));
    }
    else {
LABEL_34:
    }
      glpCPPErrorToInfoLog(v8, (char)"pasting invalid tokens");
LABEL_35:
    if ((unint64_t)__strlcat_chk() >> 4 >= 0x271) {
      glpCPPErrorToInfoLog(v8, (char)v10);
    }
LABEL_37:
    int v5 = 1;
    if (!v6)
    {
      if ((unint64_t)__strlcat_chk() >> 4 >= 0x271) {
        glpCPPErrorToInfoLog(v8, (char)"## pastebuf exceeded");
      }
      ScanFromTokenPastedString(v8, v29);
LABEL_43:
      uint64_t v26 = v8 + 16;
      return (*(uint64_t (**)(void))(*(void *)v26 + 16))();
    }
  }
  if (v21)
  {
    ReadFromTokenStream(*(uint64_t **)(v4[8] + 8 * v7), 0);
    goto LABEL_43;
  }
  if ((int)v13 <= 0)
  {
    *(_DWORD *)(v4[7] + 24) &= ~1u;
    *(void *)(v8 + 16) = v4[1];
    uint64_t v26 = v8 + 16;
    free(v4);
    return (*(uint64_t (**)(void))(*(void *)v26 + 16))();
  }
  return v13;
}

BOOL checkReservedName(uint64_t a1, int a2)
{
  BOOL result = 0;
  if (!glpIsExtensionEnabled(*(void *)(a1 + 32), 0x23u)
    && !*(_DWORD *)(a1 + 12)
    && (int)glpCompilerGetIOSVersion(*(void *)(*(void *)(a1 + 32) + 784)) >= 10)
  {
    StringOfAtounint64_t m = (const char *)GetStringOfAtom((void *)(a1 + 384), a2);
    if (!strncmp("GL_", StringOfAtom, 3uLL)
      || *(_DWORD *)(a1 + 508) == a2
      || *(_DWORD *)(a1 + 512) == a2
      || *(_DWORD *)(a1 + 516) == a2)
    {
      return 1;
    }
  }
  return result;
}

uint64_t eval(uint64_t a1, uint64_t a2, int a3, BOOL *a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  while (1)
  {
    if (a2 != 270)
    {
      if (a2 == 40)
      {
        uint64_t v15 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
        a2 = eval(a1, v15, 0, a4, a5, a6, a7);
        if (*a5) {
          return a2;
        }
LABEL_25:
        if (a2 != 41) {
          goto LABEL_48;
        }
        int v30 = a3;
        goto LABEL_27;
      }
      if (a2 == 271)
      {
        int v30 = a3;
        *a4 = *(_DWORD *)(a6 + 16);
LABEL_27:
        a2 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
        goto LABEL_28;
      }
      unsigned int v16 = 3;
      while (1)
      {
        uint64_t v17 = v16;
        if (unop[2 * v16] == (uint64_t (*)(BOOL))(int)a2) {
          break;
        }
        --v16;
        if (!v17) {
          goto LABEL_48;
        }
      }
      int v30 = a3;
      uint64_t v22 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
      a2 = eval(a1, v22, 12, a4, a5, a6, a7);
      *a4 = unop[2 * v17 + 1](*a4);
LABEL_28:
      if (*a5) {
        return a2;
      }
      goto LABEL_29;
    }
    int v14 = *(_DWORD *)(a6 + 12);
    if (v14 == *(_DWORD *)(a1 + 460))
    {
      uint64_t v18 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
      int v19 = v18;
      a2 = v18;
      if (v18 == 40) {
        a2 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
      }
      if (a2 != 270) {
        goto LABEL_48;
      }
      uint64_t v20 = LookUpSymbol(a1, *(void *)(a1 + 536), *(_DWORD *)(a6 + 12));
      if (v20) {
        BOOL v21 = ((*(_DWORD *)(v20 + 56) >> 1) & 1) == 0;
      }
      else {
        BOOL v21 = 0;
      }
      *a4 = v21;
      a2 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
      if (v19 == 40) {
        goto LABEL_25;
      }
      int v30 = a3;
      goto LABEL_28;
    }
    if (!MacroExpand((void *)a1, v14, a6)) {
      break;
    }
    a2 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
  }
  if (!a7)
  {
    a2 = 270;
LABEL_48:
    glpCPPErrorToInfoLog(a1, (char)"incorrect preprocessor directive");
    *a5 = 1;
    *a4 = 0;
    return a2;
  }
  int v30 = a3;
  a2 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
  *a4 = 0;
  *a5 = 0;
  LODWORD(a7) = 1;
  do
  {
LABEL_29:
    if (a2 == 10 || a2 == 41) {
      break;
    }
    unsigned int v23 = 17;
    while (1)
    {
      uint64_t v24 = v23;
      if (*((_DWORD *)&binop + 4 * v23) == a2) {
        break;
      }
      --v23;
      if (!v24) {
        goto LABEL_48;
      }
    }
    uint64_t v25 = *((unsigned int *)&binop + 4 * v23 + 1);
    if ((int)v25 <= v30) {
      break;
    }
    BOOL v26 = *a4;
    if (a7 || a2 == 276 && v26)
    {
      a7 = 1;
    }
    else
    {
      BOOL v28 = a2 == 257 && !v26;
      a7 = v28;
    }
    uint64_t v27 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
    a2 = eval(a1, v27, v25, a4, a5, a6, a7);
    *a4 = (*((uint64_t (**)(BOOL, BOOL))&binop + 2 * v24 + 1))(v26, *a4);
  }
  while (!*a5);
  return a2;
}

uint64_t eof_scan()
{
  return 0xFFFFFFFFLL;
}

uint64_t glpInitPreprocessor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 352) &= 0xFFFFFFFC;
  *(void *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 364) = 0;
  *(void *)(a1 + 356) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 560) = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 368) = a2;
  *(void *)(a1 + 376) = a3;
  InitAtomTable(a1 + 384, 0);
  InitScanner(a1);
  return 0;
}

uint64_t glpFinalizePreprocessor(uint64_t a1)
{
  return 0;
}

void *mem_CreatePool(size_t a1, unsigned int a2, int8x8_t a3)
{
  BOOL result = 0;
  if (a2) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 8;
  }
  if (a1) {
    size_t v6 = a1;
  }
  else {
    size_t v6 = 0x10000;
  }
  if (v6 >= 0x30)
  {
    a3.i32[0] = v5;
    uint8x8_t v7 = (uint8x8_t)vcnt_s8(a3);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.i32[0] <= 1u && (v6 & (v5 - 1)) == 0)
    {
      BOOL result = malloc_type_malloc(v6, 0x7081ABB9uLL);
      if (!result) {
        abort();
      }
      *BOOL result = 0;
      result[1] = ((unint64_t)result + v5 + 47) & -(uint64_t)v5;
      result[2] = (char *)result + v6;
      result[3] = v6;
      result[4] = v5 - 1;
      result[5] = 0;
    }
  }
  return result;
}

void mem_FreePool(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = (uint64_t **)a1[5];
  if (!v2) {
    goto LABEL_7;
  }
  do
  {
    ((void (*)(uint64_t *))v2[1])(v2[2]);
    uint64_t v2 = (uint64_t **)*v2;
  }
  while (v2);
  if (v1)
  {
LABEL_7:
    do
    {
      uint64_t v3 = (void *)*v1;
      free(v1);
      uint64_t v1 = v3;
    }
    while (v3);
  }
}

uint64_t mem_Alloc(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = (v3 + a2) & ~v3;
  if (!v4) {
    uint64_t v4 = v3 + 1;
  }
  uint64_t result = a1[1];
  unint64_t v6 = a1[2];
  unint64_t v7 = v4 + result;
  BOOL v8 = __CFADD__(v4, result);
  a1[1] = v7;
  if (v7 > v6 || v8)
  {
    uint64_t v10 = ~v3;
    uint64_t v11 = v3 + v4 + 8;
    uint64_t v12 = v11 & v10;
    a1[1] = result;
    size_t v13 = a1[3];
    if ((v11 & (unint64_t)v10) >= v13)
    {
      int v14 = malloc_type_malloc(v11 & v10, 0x7081ABB9uLL);
      if (v14) {
        goto LABEL_14;
      }
    }
    else
    {
      int v14 = malloc_type_malloc(v13, 0x7081ABB9uLL);
      if (v14)
      {
        uint64_t v15 = (char *)v14 + a1[3];
        a1[1] = (char *)v14 + v12;
        a1[2] = v15;
LABEL_14:
        *int v14 = *a1;
        *a1 = v14;
        return ((unint64_t)v14 + a1[4] + 8) & ~a1[4];
      }
    }
    abort();
  }
  return result;
}

uint64_t mem_AddCleanup(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = (a1[1] + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = mem_Alloc(a1, 24);
  if (!v6) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v7 = (void *)v6;
  uint64_t result = 0;
  *unint64_t v7 = a1[5];
  v7[1] = a2;
  v7[2] = a3;
  a1[5] = v7;
  return result;
}

uint64_t InitScanner(uint64_t a1)
{
  uint64_t result = InitCPP(a1);
  if (result)
  {
    eof_inputsrc = a1;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = &eof_inputsrc;
    *(_DWORD *)(a1 + 352) &= ~8u;
    *(void *)(a1 + 24) = 10;
    return 1;
  }
  return result;
}

uint64_t FreeScanner(uint64_t a1)
{
  for (int i = *(uint64_t **)(a1 + 16); i != &eof_inputsrc; int i = *(uint64_t **)(a1 + 16))
  {
    *(void *)(a1 + 16) = i[1];
    free(i);
  }

  return FreeCPP(a1);
}

uint64_t ScanFromString(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (char *)malloc_type_malloc(0x40uLL, 0x7081ABB9uLL);
  if (!v4) {
    abort();
  }
  uint64_t v5 = v4;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 8) = 0u;
  *((void *)v4 + 7) = a2;
  *(void *)uint64_t v4 = a1;
  glpSetFileNumber(a1, 0);
  glpSetLineNumber(a1, 1);
  *((_DWORD *)v5 + 12) = glpGetLineNumber(a1);
  uint64_t Filename = glpGetFilename(a1);
  *((void *)v5 + 2) = byte_scan;
  *((void *)v5 + 3) = str_getch;
  *((void *)v5 + 4) = str_ungetch;
  *((void *)v5 + 5) = Filename;
  *((void *)v5 + 1) = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v5;
  return 1;
}

uint64_t byte_scan(uint64_t *a1, uint64_t a2)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  *(_DWORD *)(a2 + 20) = 0;
LABEL_2:
  *(_DWORD *)(a2 + 16) = 0;
  while (1)
  {
    uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(v3 + 16) + 24))();
    uint64_t v5 = v4;
    if (v4 > 0x20 || ((1 << v4) & 0x100002200) == 0) {
      break;
    }
    *(void *)(a2 + 16) = 0x100000001;
  }
  int v6 = *(_DWORD *)(v3 + 352);
  if ((v6 & 4) == 0
    || (v6 &= ~4u, *(_DWORD *)(v3 + 352) = v6, (v4 & 0xFFFFFFDF) - 65 >= 0x1A)
    && v4 != 95
    && (v4 - 48) > 9)
  {
    switch((int)v4)
    {
      case '!':
        if ((*(unsigned int (**)(void))(*(void *)(v3 + 16) + 24))() == 61) {
          return 275;
        }
        (*(void (**)(void))(*(void *)(v3 + 16) + 32))();
        return 33;
      case '""':
        v61[0] = 34;
        int v26 = (*(uint64_t (**)(void))(*(void *)(v3 + 16) + 24))();
        unint64_t v27 = 1;
        while (2)
        {
          if (v26 == 92) {
            goto LABEL_81;
          }
          if (v26 == -1 || v26 == 10) {
            goto LABEL_185;
          }
          if (v26 != 34)
          {
            if (v27 > 0x400) {
              glpCPPErrorToInfoLog(v3, (char)"ERROR___STRING_TOO_LONG");
            }
            else {
              v61[v27++] = v26;
            }
LABEL_81:
            int v26 = (*(uint64_t (**)(void))(*(void *)(v3 + 16) + 24))();
            continue;
          }
          break;
        }
        if (v27 > 0x400) {
          goto LABEL_218;
        }
        char v52 = 34;
        goto LABEL_217;
      case '#':
        if ((*(unsigned int (**)(void))(*(void *)(v3 + 16) + 24))() == 35
          && (*(_DWORD *)v3 > 2u || glpIsExtensionEnabled(*(void *)(v3 + 32), 0x23u)))
        {
          *(_DWORD *)(v3 + 352) |= 4u;
          return 289;
        }
        else
        {
          (*(void (**)(void))(*(void *)(v3 + 16) + 32))();
          return 35;
        }
      case '$':
        if (!glpIsExtensionEnabled(*(void *)(v3 + 32), 0x23u))
        {
          uint64_t v5 = 36;
          if (!glpIsExtensionEnabled(*(void *)(v3 + 32), 0x24u)) {
            return v5;
          }
        }
        v61[0] = 36;
        LOBYTE(v5) = (*(uint64_t (**)(void))(*(void *)(v3 + 16) + 24))();
        unint64_t v9 = 1;
        goto LABEL_21;
      case '%':
        int v28 = (*(uint64_t (**)(void))(*(void *)(v3 + 16) + 24))();
        if (v28 == 61) {
          return 259;
        }
        if (v28 == 62) {
          return 288;
        }
        (*(void (**)(void))(*(void *)(v3 + 16) + 32))();
        return 37;
      case '&':
        int v29 = (*(uint64_t (**)(void))(*(void *)(v3 + 16) + 24))();
        if (v29 == 38) {
          return 257;
        }
        if (v29 == 61) {
          return 282;
        }
        (*(void (**)(void))(*(void *)(v3 + 16) + 32))();
        return 38;
      case '*':
        if ((*(unsigned int (**)(void))(*(void *)(v3 + 16) + 24))() == 61) {
          return 262;
        }
        (*(void (**)(void))(*(void *)(v3 + 16) + 32))();
        return 42;
      case '+':
        int v30 = (*(uint64_t (**)(void))(*(void *)(v3 + 16) + 24))();
        if (v30 == 43) {
          return 277;
        }
        if (v30 == 61) {
          return 260;
        }
        (*(void (**)(void))(*(void *)(v3 + 16) + 32))();
        return 43;
      case '-':
        int v31 = (*(uint64_t (**)(void))(*(void *)(v3 + 16) + 24))();
        if (v31 == 45) {
          return 274;
        }
        if (v31 == 61) {
          return 258;
        }
        (*(void (**)(void))(*(void *)(v3 + 16) + 32))();
        return 45;
      case '.':
        int v32 = (*(uint64_t (**)(void))(*(void *)(v3 + 16) + 24))();
        if ((v32 - 48) <= 9)
        {
          (*(void (**)(void))(*(void *)(v3 + 16) + 32))();
          uint64_t v16 = v3;
          unsigned int v17 = 0;
          int v18 = 46;
          goto LABEL_46;
        }
        if (v32 == 46) {
          return 0xFFFFFFFFLL;
        }
        (*(void (**)(void))(*(void *)(v3 + 16) + 32))();
        return 46;
      case '/':
        int v7 = (*(uint64_t (**)(void))(*(void *)(v3 + 16) + 24))();
        if (v7 != 42)
        {
          if (v7 == 61) {
            return 261;
          }
          if (v7 == 47)
          {
            do
              uint64_t v21 = (*(uint64_t (**)(void))(*(void *)(v3 + 16) + 24))();
            while (v21 != -1 && v21 != 10);
            return v21;
          }
          else
          {
            (*(void (**)(void))(*(void *)(v3 + 16) + 32))();
            return 47;
          }
        }
        do
        {
          int v8 = (*(uint64_t (**)(void))(*(void *)(v3 + 16) + 24))();
          while (v8 == 42)
          {
            int v8 = (*(uint64_t (**)(void))(*(void *)(v3 + 16) + 24))();
            if (v8 == 47) {
              goto LABEL_2;
            }
            if (v8 == -1) {
              goto LABEL_18;
            }
          }
        }
        while (v8 != -1);
LABEL_18:
        glpCPPErrorToInfoLog(v3, (char)"ERROR___EOF_IN_COMMENT");
        return 0xFFFFFFFFLL;
      case '0':
        *(unsigned char *)(a2 + 24) = 48;
        int v33 = (*(uint64_t (**)(void))(*(void *)(v3 + 16) + 24))();
        LODWORD(v5) = v33;
        if ((v33 & 0xFFFFFFDF) == 0x58)
        {
          *(unsigned char *)(a2 + 25) = v33;
          int v34 = (*(uint64_t (**)(void))(*(void *)(v3 + 16) + 24))();
          int v35 = v34;
          if ((v34 - 48) >= 0xA
            && ((v34 - 65) <= 0x25
              ? (BOOL v36 = ((1 << (v34 - 65)) & 0x3F0000003FLL) == 0)
              : (BOOL v36 = 1),
                v36))
          {
            glpCPPErrorToInfoLog(v3, (char)"ERROR___ERROR_IN_HEX_CONSTANT");
            unint64_t v37 = 2;
          }
          else
          {
            unint64_t v37 = 2;
            do
            {
              if (v37 > 0x400)
              {
                glpCPPErrorToInfoLog(v3, (char)"ERROR___TOKEN_TOO_LONG");
              }
              else
              {
                unint64_t v38 = a2 + v37++;
                *(unsigned char *)(v38 + 24) = v35;
              }
              int v39 = (*(uint64_t (**)(void))(*(void *)(v3 + 16) + 24))();
              int v35 = v39;
            }
            while ((v39 - 48) < 0xA
                 || (v39 - 65) <= 0x25 && ((1 << (v39 - 65)) & 0x3F0000003FLL) != 0);
          }
          if (*(_DWORD *)v3 <= 2u)
          {
            BOOL IsExtensionEnabled = glpIsExtensionEnabled(*(void *)(v3 + 32), 0xEu);
            if ((v35 & 0xFFFFFFDF) != 0x55 || !IsExtensionEnabled) {
              goto LABEL_224;
            }
          }
          else if ((v35 & 0xFFFFFFDF) != 0x55)
          {
LABEL_224:
            if (v37 >= 0x401)
            {
              glpCPPErrorToInfoLog(v3, (char)"ERROR___TOKEN_TOO_LONG");
              unint64_t v37 = 1024;
            }
            *(unsigned char *)(a2 + v37 + 24) = 0;
            (*(void (**)(void))(*(void *)(v3 + 16) + 32))();
            unint64_t v56 = strtoll_l((const char *)(a2 + 24), 0, 0, 0);
            *(_DWORD *)(a2 + 16) = v56;
            if (!HIDWORD(v56)) {
              return 271;
            }
            int v46 = "ERROR___HEX_CONST_OVERFLOW";
LABEL_158:
            glpCPPErrorToInfoLog(v3, (char)v46);
            return 271;
          }
          if (v37 > 0x400)
          {
            glpCPPErrorToInfoLog(v3, (char)"ERROR___TOKEN_TOO_LONG");
          }
          else
          {
            unint64_t v55 = a2 + v37++;
            *(unsigned char *)(v55 + 24) = v35;
          }
          (*(void (**)(void))(*(void *)(v3 + 16) + 24))();
          goto LABEL_224;
        }
        if ((v33 & 0xFFFFFFF8) == 0x30)
        {
          unsigned int v47 = 1;
          do
          {
            if (v47 > 0x400)
            {
              glpCPPErrorToInfoLog(v3, (char)"ERROR___TOKEN_TOO_LONG");
            }
            else
            {
              uint64_t v48 = a2 + v47++;
              *(unsigned char *)(v48 + 24) = v5;
            }
            int v49 = (*(uint64_t (**)(void))(*(void *)(v3 + 16) + 24))();
            LODWORD(v5) = v49;
          }
          while ((v49 & 0xFFFFFFF8) == 0x30);
          if ((v49 - 46) <= 0x37 && ((1 << (v49 - 46)) & 0x80000000800001) != 0)
          {
            uint64_t v16 = v3;
            unsigned int v17 = v47;
LABEL_45:
            int v18 = v5;
LABEL_46:
            return lFloatConst(v16, v17, v18, a2);
          }
          if (*(_DWORD *)v3 <= 2u)
          {
            BOOL v57 = glpIsExtensionEnabled(*(void *)(v3 + 32), 0xEu);
            if ((v5 & 0xFFFFFFDF) != 0x55 || !v57) {
              goto LABEL_244;
            }
          }
          else if ((v49 & 0xFFFFFFDF) != 0x55)
          {
LABEL_244:
            if (v47 >= 0x401)
            {
              glpCPPErrorToInfoLog(v3, (char)"ERROR___TOKEN_TOO_LONG");
              unsigned int v47 = 1024;
            }
            *(unsigned char *)(a2 + v47 + 24) = 0;
            (*(void (**)(void))(*(void *)(v3 + 16) + 32))();
            unint64_t v60 = strtoll_l((const char *)(a2 + 24), 0, 0, 0);
            *(_DWORD *)(a2 + 16) = v60;
            if (!HIDWORD(v60)) {
              return 271;
            }
            int v46 = "ERROR___OCT_CONST_OVERFLOW";
            goto LABEL_158;
          }
          if (v47 > 0x400)
          {
            glpCPPErrorToInfoLog(v3, (char)"ERROR___TOKEN_TOO_LONG");
          }
          else
          {
            uint64_t v59 = a2 + v47++;
            *(unsigned char *)(v59 + 24) = v5;
          }
          (*(void (**)(void))(*(void *)(v3 + 16) + 24))();
          goto LABEL_244;
        }
        unsigned int v13 = 1;
LABEL_35:
        if ((v5 - 48) <= 9)
        {
          do
          {
            if (v13 > 0x400)
            {
              glpCPPErrorToInfoLog(v3, (char)"ERROR___TOKEN_TOO_LONG");
            }
            else
            {
              uint64_t v14 = a2 + v13++;
              *(unsigned char *)(v14 + 24) = v5;
            }
            LODWORD(v5) = (*(uint64_t (**)(void))(*(void *)(v3 + 16) + 24))();
          }
          while ((v5 - 48) < 0xA);
        }
        if ((v5 - 46) <= 0x37 && ((1 << (v5 - 46)) & 0x80000000800001) != 0)
        {
          uint64_t v16 = v3;
          unsigned int v17 = v13;
          goto LABEL_45;
        }
        if (*(_DWORD *)v3 <= 2u)
        {
          BOOL v23 = glpIsExtensionEnabled(*(void *)(v3 + 32), 0xEu);
          if ((v5 & 0xFFFFFFDF) != 0x55 || !v23) {
            goto LABEL_154;
          }
        }
        else if ((v5 & 0xFFFFFFDF) != 0x55)
        {
LABEL_154:
          if (v13 >= 0x401)
          {
            glpCPPErrorToInfoLog(v3, (char)"ERROR___TOKEN_TOO_LONG");
            unsigned int v13 = 1024;
          }
          *(unsigned char *)(a2 + 24 + v13) = 0;
          (*(void (**)(void))(*(void *)(v3 + 16) + 32))();
          unint64_t v45 = strtoll_l((const char *)(a2 + 24), 0, 0, 0);
          *(_DWORD *)(a2 + 16) = v45;
          if (!HIDWORD(v45)) {
            return 271;
          }
          int v46 = "ERROR___INTEGER_CONST_OVERFLOW";
          goto LABEL_158;
        }
        if (v13 > 0x400)
        {
          glpCPPErrorToInfoLog(v3, (char)"ERROR___TOKEN_TOO_LONG");
        }
        else
        {
          uint64_t v25 = a2 + v13++;
          *(unsigned char *)(v25 + 24) = v5;
        }
        (*(void (**)(void))(*(void *)(v3 + 16) + 24))();
        goto LABEL_154;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        unsigned int v13 = 0;
        goto LABEL_35;
      case ':':
        if ((*(unsigned int (**)(void))(*(void *)(v3 + 16) + 24))() == 62) {
          return 286;
        }
        (*(void (**)(void))(*(void *)(v3 + 16) + 32))();
        return 58;
      case '<':
        if ((v6 & 2) == 0)
        {
          int v41 = (*(uint64_t (**)(void))(*(void *)(v3 + 16) + 24))();
          if (v41 > 59)
          {
            if (v41 == 61) {
              return 272;
            }
            if (v41 == 60)
            {
              if ((*(unsigned int (**)(void))(*(void *)(v3 + 16) + 24))() == 61) {
                return 281;
              }
              (*(void (**)(void))(*(void *)(v3 + 16) + 32))();
              return 273;
            }
          }
          else
          {
            if (v41 == 37) {
              return 287;
            }
            if (v41 == 58) {
              return 285;
            }
          }
          (*(void (**)(void))(*(void *)(v3 + 16) + 32))();
          return 60;
        }
        v61[0] = 60;
        int v51 = (*(uint64_t (**)(void))(*(void *)(v3 + 16) + 24))();
        unint64_t v27 = 1;
        while (2)
        {
          if (v51 == 92) {
            goto LABEL_178;
          }
          if (v51 == -1 || v51 == 10)
          {
LABEL_185:
            glpCPPErrorToInfoLog(v3, (char)"ERROR___CPP_EOL_IN_STRING");
            return 265;
          }
          if (v51 != 62)
          {
            if (v27 > 0x400) {
              glpCPPErrorToInfoLog(v3, (char)"ERROR___STRING_TOO_LONG");
            }
            else {
              v61[v27++] = v51;
            }
LABEL_178:
            int v51 = (*(uint64_t (**)(void))(*(void *)(v3 + 16) + 24))();
            continue;
          }
          break;
        }
        if (v27 > 0x400)
        {
LABEL_218:
          glpCPPErrorToInfoLog(v3, (char)"ERROR___STRING_TOO_LONG");
        }
        else
        {
          char v52 = 62;
LABEL_217:
          v61[v27++] = v52;
        }
        (*(void (**)(void))(*(void *)(v3 + 16) + 24))();
        if (v27 >= 0x401)
        {
          glpCPPErrorToInfoLog(v3, (char)"ERROR___STRING_TOO_LONG");
          unint64_t v27 = 1024;
        }
        v61[v27] = 0;
        *(_DWORD *)(a2 + 12) = LookUpAddString(v3 + 384, v61);
        (*(void (**)(void))(*(void *)(v3 + 16) + 32))();
        return 278;
      case '=':
        if ((*(unsigned int (**)(void))(*(void *)(v3 + 16) + 24))() == 61) {
          return 263;
        }
        (*(void (**)(void))(*(void *)(v3 + 16) + 32))();
        return 61;
      case '>':
        int v42 = (*(uint64_t (**)(void))(*(void *)(v3 + 16) + 24))();
        if (v42 == 61) {
          return 268;
        }
        if (v42 == 62)
        {
          if ((*(unsigned int (**)(void))(*(void *)(v3 + 16) + 24))() == 61)
          {
            return 280;
          }
          else
          {
            (*(void (**)(void))(*(void *)(v3 + 16) + 32))();
            return 269;
          }
        }
        else
        {
          (*(void (**)(void))(*(void *)(v3 + 16) + 32))();
          return 62;
        }
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
      case '_':
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 's':
      case 't':
      case 'u':
      case 'v':
      case 'w':
      case 'x':
      case 'y':
      case 'z':
        unint64_t v9 = 0;
        do
        {
LABEL_21:
          if (v9 > 0x400) {
            glpCPPErrorToInfoLog(v3, (char)"ERROR___TOKEN_TOO_LONG");
          }
          else {
            v61[v9++] = v5;
          }
          int v10 = (*(uint64_t (**)(void))(*(void *)(v3 + 16) + 24))();
          LOBYTE(v5) = v10;
          BOOL v11 = (v10 - 48) >= 0xA && (v10 & 0xFFFFFFDF) - 65 >= 0x1A;
        }
        while (!v11 || v10 == 95);
        goto LABEL_30;
      case '^':
        int v43 = (*(uint64_t (**)(void))(*(void *)(v3 + 16) + 24))();
        if (v43 == 94) {
          return 264;
        }
        if (v43 == 61) {
          return 284;
        }
        (*(void (**)(void))(*(void *)(v3 + 16) + 32))();
        return 94;
      case '|':
        int v44 = (*(uint64_t (**)(void))(*(void *)(v3 + 16) + 24))();
        if (v44 == 124) {
          return 276;
        }
        if (v44 == 61) {
          return 283;
        }
        (*(void (**)(void))(*(void *)(v3 + 16) + 32))();
        return 124;
      default:
        return v5;
    }
  }
  unint64_t v9 = 0;
  do
  {
    if (v9 > 0x400) {
      glpCPPErrorToInfoLog(v3, (char)"ERROR___TOKEN_TOO_LONG");
    }
    else {
      v61[v9++] = v5;
    }
    int v19 = (*(uint64_t (**)(void))(*(void *)(v3 + 16) + 24))();
    LOBYTE(v5) = v19;
    BOOL v20 = (v19 - 48) >= 0xA && (v19 & 0xFFFFFFDF) - 65 >= 0x1A;
  }
  while (!v20 || v19 == 95);
LABEL_30:
  if (v9 >= 0x401)
  {
    glpCPPErrorToInfoLog(v3, (char)"ERROR___TOKEN_TOO_LONG");
    unint64_t v9 = 1024;
  }
  v61[v9] = 0;
  (*(void (**)(void))(*(void *)(v3 + 16) + 32))();
  *(_DWORD *)(a2 + 12) = LookUpAddString(v3 + 384, v61);
  return 270;
}

uint64_t str_getch(uint64_t *a1, uint64_t a2)
{
  for (uint64_t i = *a1; ; a1 = *(uint64_t **)(i + 16))
  {
    uint64_t v4 = (unsigned char *)a1[7];
    uint64_t v5 = *v4;
    if (*v4) {
      break;
    }
    int v6 = *(_DWORD *)(i + 324) + 1;
    *(_DWORD *)(i + 324) = v6;
    int v7 = *(_DWORD *)(i + 336);
    *(void *)(i + 16) = a1[1];
    if (v6 >= v7)
    {
      *(_DWORD *)(i + 324) = 0;
      free(a1);
      return 0xFFFFFFFFLL;
    }
    free(a1);
    glpSetFileNumber(i, *(_DWORD *)(i + 324));
    glpSetLineNumber(i, 1);
    ScanFromString(i, *(void *)(*(void *)(i + 344) + 8 * *(int *)(i + 324)));
  }
  a1[7] = (uint64_t)(v4 + 1);
  if (v5 != 92)
  {
    if (v5 == 10)
    {
      ++*((_DWORD *)a1 + 12);
      glpIncLineNumber(i);
    }
    return v5;
  }
  uint64_t v8 = (*(uint64_t (**)(void))(*(void *)(i + 16) + 24))();
  uint64_t v9 = *(void *)(i + 16);
  if (v8 != 10)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v9, v8, a2);
    return 92;
  }
  int v10 = *(uint64_t (**)(void))(v9 + 24);

  return v10();
}

uint64_t *str_ungetch(uint64_t *result, int a2)
{
  uint64_t v2 = result[7];
  int v4 = *(unsigned __int8 *)(v2 - 1);
  uint64_t v3 = v2 - 1;
  if (v4 == a2)
  {
    result[7] = v3;
  }
  else
  {
    *(unsigned char *)result[7] = 0;
    --*(_DWORD *)(*result + 324);
  }
  if (a2 == 10)
  {
    --*((_DWORD *)result + 12);
    return (uint64_t *)glpDecLineNumber(*result);
  }
  return result;
}

uint64_t ScanFromIncludeString(uint64_t a1, uint64_t a2, char *a3)
{
  int v6 = (char *)malloc_type_malloc(0x48uLL, 0x7081ABB9uLL);
  if (!v6) {
    abort();
  }
  int v7 = v6;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 8) = 0u;
  *((void *)v6 + 7) = a2;
  *((void *)v6 + 8) = a2;
  *(void *)int v6 = a1;
  glpSetFilename(a1, a3);
  glpSetLineNumber(a1, 1);
  *((_DWORD *)v7 + 12) = glpGetLineNumber(a1);
  uint64_t Filename = glpGetFilename(a1);
  *((void *)v7 + 2) = byte_scan;
  *((void *)v7 + 3) = include_str_getch;
  *((void *)v7 + 4) = include_str_ungetch;
  *((void *)v7 + 5) = Filename;
  *((void *)v7 + 1) = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  return 1;
}

uint64_t include_str_getch(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (unsigned char *)a1[7];
  uint64_t v6 = *v5;
  if (*v5)
  {
    a1[7] = (uint64_t)(v5 + 1);
    if (v6 != 92)
    {
      if (v6 == 10)
      {
        ++*((_DWORD *)a1 + 12);
        glpIncLineNumber(v4);
      }
      return v6;
    }
    uint64_t v8 = (*(uint64_t (**)(void))(*(void *)(v4 + 16) + 24))();
    uint64_t v7 = *(void *)(v4 + 16);
    if (v8 != 10)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v7, v8, a2);
      return 92;
    }
  }
  else
  {
    *(void *)(v4 + 16) = a1[1];
    --*(_DWORD *)(v4 + 356);
    (*(void (**)(void, uint64_t))(v4 + 376))(*(void *)(v4 + 360), a1[8]);
    free(a1);
    glpSetLineNumber(v4, *(_DWORD *)(*(void *)(v4 + 16) + 48));
    glpSetFilename(v4, *(char **)(*(void *)(v4 + 16) + 40));
    uint64_t v7 = *(void *)(v4 + 16);
  }
  uint64_t v9 = *(uint64_t (**)(void))(v7 + 24);

  return v9();
}

uint64_t include_str_ungetch(uint64_t result, int a2)
{
  if (a2 == 10)
  {
    --*(_DWORD *)(result + 48);
    return glpDecLineNumber(*(void *)result);
  }
  return result;
}

uint64_t ScanFromSimpleString(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = (char *)malloc_type_malloc(0x50uLL, 0x7081ABB9uLL);
  if (!v6) {
    abort();
  }
  uint64_t v7 = v6;
  *(_OWORD *)(v6 + --*(void *)(result + 56) = 0u;
  *((void *)v6 + 8) = a2;
  *((void *)v6 + 9) = 0;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 8) = 0u;
  *((void *)v6 + 7) = a2;
  *(void *)uint64_t v6 = a1;
  *((_DWORD *)v6 + 12) = glpGetLineNumber(a1);
  uint64_t Filename = glpGetFilename(a1);
  *((void *)v7 + 2) = byte_scan;
  *((void *)v7 + 3) = simple_str_getch;
  *((void *)v7 + 4) = simple_str_ungetch;
  *((void *)v7 + 5) = Filename;
  *((void *)v7 + 1) = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  *((_DWORD *)v7 + 18) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = a3;
  return 1;
}

uint64_t simple_str_getch(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = (unsigned char *)*((void *)a1 + 7);
  uint64_t v6 = *v5;
  if (*v5)
  {
    *((void *)a1 + 7) = v5 + 1;
    if (v6 != 92)
    {
      if (v6 == 10)
      {
        ++*((_DWORD *)a1 + 12);
        glpIncLineNumber(v4);
      }
      return v6;
    }
    uint64_t v8 = (*(uint64_t (**)(void))(*(void *)(v4 + 16) + 24))();
    uint64_t v7 = *(void *)(v4 + 16);
    if (v8 != 10)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v7, v8, a2);
      return 92;
    }
  }
  else
  {
    *(void *)(v4 + 16) = *((void *)a1 + 1);
    *(_DWORD *)(v4 + 12) = *((_DWORD *)a1 + 18);
    free(*((void **)a1 + 8));
    free(a1);
    glpSetLineNumber(v4, *(_DWORD *)(*(void *)(v4 + 16) + 48));
    glpSetFilename(v4, *(char **)(*(void *)(v4 + 16) + 40));
    uint64_t v7 = *(void *)(v4 + 16);
  }
  uint64_t v9 = *(uint64_t (**)(void))(v7 + 24);

  return v9();
}

uint64_t simple_str_ungetch(uint64_t result, int a2)
{
  if (a2 == 10)
  {
    --*(_DWORD *)(result + 48);
    return glpDecLineNumber(*(void *)result);
  }
  return result;
}

uint64_t ScanFromTokenPastedString(uint64_t a1, const char *a2)
{
  uint64_t v4 = malloc_type_malloc(0x50uLL, 0x7081ABB9uLL);
  if (!v4) {
    goto LABEL_4;
  }
  uint64_t v5 = v4;
  v4[3] = 0u;
  _OWORD v4[4] = 0u;
  v4[1] = 0u;
  void v4[2] = 0u;
  *uint64_t v4 = 0u;
  size_t v6 = strlen(a2);
  uint64_t v7 = (char *)malloc_type_malloc(v6 + 1, 0x7081ABB9uLL);
  if (!v7) {
LABEL_4:
  }
    abort();
  *((void *)v5 + 8) = v7;
  strcpy(v7, a2);
  *((void *)v5 + 7) = *((void *)v5 + 8);
  *((_DWORD *)v5 + 18) = 0;
  *(void *)uint64_t v5 = a1;
  uint64_t v8 = *(void *)(a1 + 16);
  *((_DWORD *)v5 + 12) = *(_DWORD *)(v8 + 48);
  uint64_t v9 = *(void *)(v8 + 40);
  *((void *)v5 + 1) = v8;
  *((void *)v5 + 2) = token_pasted_str_scan;
  *((void *)v5 + 3) = token_pasted_str_getch;
  *((void *)v5 + 4) = token_pasted_str_ungetch;
  *((void *)v5 + 5) = v9;
  *(void *)(a1 + 16) = v5;
  return 1;
}

uint64_t token_pasted_str_scan(_DWORD *a1, uint64_t a2)
{
  if (a1[18])
  {
    uint64_t v3 = *(void *)a1;
    *(void *)(*(void *)a1 + 16) = *((void *)a1 + 1);
    free(*((void **)a1 + 8));
    free(a1);
    glpSetLineNumber(v3, *(_DWORD *)(*(void *)(v3 + 16) + 48));
    glpSetFilename(v3, *(char **)(*(void *)(v3 + 16) + 40));
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)(v3 + 16) + 16);
    return v4();
  }
  else
  {
    a1[18] = 1;
    return byte_scan((uint64_t *)a1, a2);
  }
}

uint64_t token_pasted_str_getch(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned char **)(a1 + 56);
  uint64_t v3 = *v2;
  if (!*v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = *(void *)a1;
  *(void *)(a1 + --*(void *)(result + 56) = v2 + 1;
  if (v3 != 92)
  {
    if (v3 == 10)
    {
      ++*(_DWORD *)(a1 + 48);
      glpIncLineNumber(v4);
    }
    return v3;
  }
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(v4 + 16) + 24))();
  uint64_t v7 = *(void *)(v4 + 16);
  if (v6 != 10)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v7, v6, a2);
    return 92;
  }
  uint64_t v8 = *(uint64_t (**)(void))(v7 + 24);

  return v8();
}

uint64_t token_pasted_str_ungetch(uint64_t result, int a2)
{
  if (a2 == 10)
  {
    --*(_DWORD *)(result + 48);
    return glpDecLineNumber(*(void *)result);
  }
  return result;
}

#error "239361260: call analysis failed (funcsize=198)"

uint64_t eof_scan_0()
{
  return 0xFFFFFFFFLL;
}

uint64_t lFloatConst(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  unsigned int v5 = a2;
  uint64_t v7 = (const char *)(a4 + 24);
  if (a3 == 46)
  {
    if (a2 > 0x400)
    {
      glpCPPErrorToInfoLog(a1, (char)"ERROR___FP_CONST_TOO_LONG");
    }
    else
    {
      v7[a2] = 46;
      unsigned int v5 = a2 + 1;
    }
    int v8 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 24))();
    if ((v8 - 48) <= 9)
    {
      do
      {
        if (v5 > 0x400) {
          glpCPPErrorToInfoLog(a1, (char)"ERROR___FP_CONST_TOO_LONG");
        }
        else {
          v7[v5++] = v8;
        }
        int v8 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 24))();
      }
      while ((v8 - 48) < 0xA);
    }
  }
  else
  {
    int v8 = a3;
  }
  if ((v8 & 0xFFFFFFDF) == 0x45)
  {
    if (v5 > 0x400) {
      glpCPPErrorToInfoLog(a1, (char)"ERROR___FP_CONST_TOO_LONG");
    }
    else {
      v7[v5++] = v8;
    }
    int v9 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 24))();
    if (v9 == 45)
    {
      if (v5 <= 0x400)
      {
        char v10 = 45;
        goto LABEL_21;
      }
    }
    else
    {
      int v8 = v9;
      if (v9 != 43) {
        goto LABEL_24;
      }
      if (v5 <= 0x400)
      {
        char v10 = 43;
LABEL_21:
        v7[v5++] = v10;
LABEL_23:
        int v8 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 24))();
LABEL_24:
        if ((v8 - 48) > 9)
        {
          glpCPPErrorToInfoLog(a1, (char)"ERROR___ERROR_IN_EXPONENT");
        }
        else
        {
          do
          {
            if (v5 > 0x400) {
              glpCPPErrorToInfoLog(a1, (char)"ERROR___FP_CONST_TOO_LONG");
            }
            else {
              v7[v5++] = v8;
            }
            int v8 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 24))();
          }
          while ((v8 - 48) < 0xA);
        }
        goto LABEL_31;
      }
    }
    glpCPPErrorToInfoLog(a1, (char)"ERROR___FP_CONST_TOO_LONG");
    goto LABEL_23;
  }
LABEL_31:
  if ((*(_DWORD *)a1 > 7u || glpIsExtensionEnabled(*(void *)(a1 + 32), 0x12u)) && (v8 | 0x20) == 0x6C)
  {
    if (v5 > 0x400) {
      glpCPPErrorToInfoLog(a1, (char)"ERROR___FP_CONST_TOO_LONG");
    }
    else {
      v7[v5++] = v8;
    }
    int v13 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 24))();
    if (v8 == 108) {
      int v14 = 102;
    }
    else {
      int v14 = 70;
    }
    if (v13 == v14)
    {
      if (v5 > 0x400) {
        glpCPPErrorToInfoLog(a1, (char)"ERROR___FP_CONST_TOO_LONG");
      }
      else {
        v7[v5++] = v13;
      }
      (*(void (**)(void))(*(void *)(a1 + 16) + 24))();
      int v12 = 0;
      uint64_t v11 = 267;
    }
    else
    {
      (*(void (**)(void))(*(void *)(a1 + 16) + 32))();
      --v5;
      uint64_t v11 = 266;
      int v12 = 1;
    }
  }
  else
  {
    uint64_t v11 = 266;
    int v12 = 1;
    if ((v8 & 0xFFFFFFDF) == 0x46 && *(_DWORD *)a1 >= 2u)
    {
      if (v5 > 0x400) {
        glpCPPErrorToInfoLog(a1, (char)"ERROR___FP_CONST_TOO_LONG");
      }
      else {
        v7[v5++] = v8;
      }
      (*(void (**)(void))(*(void *)(a1 + 16) + 24))();
    }
  }
  if (v5 >= 0x401)
  {
    glpCPPErrorToInfoLog(a1, (char)"ERROR___FP_CONST_TOO_LONG");
    unsigned int v5 = 1024;
  }
  v7[v5] = 0;
  if (v12) {
    *(float *)(a4 + 8) = strtof_l(v7, 0, 0);
  }
  else {
    *(double *)a4 = strtod_l(v7, 0, 0);
  }
  (*(void (**)(void))(*(void *)(a1 + 16) + 32))();
  return v11;
}

uint64_t NewScopeInPool(uint64_t a1, void *a2)
{
  uint64_t v4 = mem_Alloc(a2, 72);
  uint64_t v5 = v4;
  *(void *)(v4 + 40) = a2;
  *(void *)(v4 + 48) = 0;
  *(_DWORD *)(v4 + --*(void *)(result + 56) = 0;
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 544);
  *(void *)uint64_t v4 = a1;
  *(void *)(v4 + 8) = v6;
  if (v6) {
    *(void *)(v6 + 16) = v4;
  }
  *(void *)(v4 + 16) = 0;
  *(void *)(a1 + 544) = v4;
  mem_AddCleanup(a2, (uint64_t)unlinkScope, v4);
  return v5;
}

void *unlinkScope(void *result)
{
  uint64_t v1 = result[1];
  if (v1) {
    *(void *)(v1 + 16) = result[2];
  }
  uint64_t v2 = result[2];
  if (v2) {
    uint64_t v3 = (void *)(v2 + 8);
  }
  else {
    uint64_t v3 = (void *)(*result + 544);
  }
  *uint64_t v3 = v1;
  return result;
}

uint64_t AddSymbol(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v6 = a2;
  if (!a2) {
    uint64_t v6 = *(void *)(a1 + 552);
  }
  uint64_t v8 = mem_Alloc(*(void **)(v6 + 40), 64);
  uint64_t v9 = v8;
  *(void *)(v8 + 8) = 0;
  *(void *)(v8 + 16) = 0;
  *(void *)uint64_t v8 = 0;
  *(_DWORD *)(v8 + 24) = a3;
  *(_DWORD *)(v8 + 28) = a4;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  char v10 = *(uint64_t **)(v6 + 48);
  if (v10)
  {
    ReversedAtounint64_t m = GetReversedAtom(a1 + 384, a3);
    int v12 = GetReversedAtom(a1 + 384, *((_DWORD *)v10 + 6));
    while (1)
    {
      if (v12 == ReversedAtom)
      {
        glpCPPErrorToInfoLog(a1, (char)"GetAtomString(&cpp->atable, fSymb->name)");
        return v9;
      }
      if (v12 <= ReversedAtom)
      {
        int v13 = (uint64_t *)v10[1];
        if (!v13)
        {
          v10[1] = v9;
          return v9;
        }
      }
      else
      {
        int v13 = (uint64_t *)*v10;
        if (!*v10)
        {
          *char v10 = v9;
          return v9;
        }
      }
      int v12 = GetReversedAtom(a1 + 384, *((_DWORD *)v13 + 6));
      char v10 = v13;
    }
  }
  *(void *)(v6 + 48) = v8;
  return v9;
}

uint64_t LookUpLocalSymbol(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1 + 384;
  ReversedAtounint64_t m = GetReversedAtom(a1 + 384, a3);
  if (!a2) {
    a2 = *(void *)(a1 + 552);
  }
  uint64_t v7 = *(void *)(a2 + 48);
  if (v7)
  {
    do
    {
      int v8 = GetReversedAtom(v5, *(_DWORD *)(v7 + 24));
      if (v8 == ReversedAtom) {
        break;
      }
      uint64_t v9 = (uint64_t *)(v7 + 8);
      if (v8 > ReversedAtom) {
        uint64_t v9 = (uint64_t *)v7;
      }
      uint64_t v7 = *v9;
    }
    while (*v9);
  }
  return v7;
}

uint64_t LookUpSymbol(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = a2;
  if (!a2)
  {
    uint64_t v4 = *(void *)(a1 + 552);
    if (!v4) {
      return 0;
    }
  }
  while (1)
  {
    uint64_t result = LookUpLocalSymbol(a1, v4, a3);
    if (result) {
      break;
    }
    uint64_t v4 = *(void *)(v4 + 24);
    if (!v4) {
      return 0;
    }
  }
  return result;
}

void *NewTokenStream(uint64_t a1, const char *a2, void *a3)
{
  uint64_t v6 = (void *)mem_Alloc(a3, 40);
  *uint64_t v6 = a1;
  v6[1] = 0;
  size_t v7 = strlen(a2);
  uint64_t v8 = mem_Alloc(a3, v7 + 1);
  uint64_t v9 = v8;
  char v10 = *a2;
  uint64_t v11 = (char *)v8;
  if (*a2)
  {
    int v12 = (unsigned __int8 *)(a2 + 1);
    uint64_t v13 = MEMORY[0x263EF8318];
    uint64_t v11 = (char *)v8;
    do
    {
      if (v10 < 0)
      {
        int v14 = __maskrune_l(v10, 0x500uLL, 0);
        char v10 = *(v12 - 1);
        if (v14) {
          goto LABEL_9;
        }
      }
      else if ((*(_DWORD *)(v13 + 4 * v10 + 60) & 0x500) != 0)
      {
        goto LABEL_9;
      }
      if ((v10 & 0xFE) == 0x2E)
      {
        char v10 = 95;
LABEL_9:
        *v11++ = v10;
      }
      int v15 = *v12++;
      char v10 = v15;
    }
    while (v15);
  }
  *uint64_t v11 = 0;
  v6[3] = 0;
  v6[4] = 0;
  v6[2] = v9;
  lNewBlock((uint64_t)v6, a3);
  return v6;
}

uint64_t lNewBlock(uint64_t a1, void *a2)
{
  uint64_t result = mem_Alloc(a2, 288);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 24) = result + 32;
  *(_DWORD *)(result + 16) = 256;
  uint64_t v4 = (uint64_t *)(a1 + 24);
  if (*(void *)(a1 + 24)) {
    uint64_t v4 = *(uint64_t **)(a1 + 32);
  }
  *uint64_t v4 = result;
  *(void *)(a1 + 32) = result;
  return result;
}

uint64_t RecordToken(void *a1, int a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 20)) {
    lAddByte(a1, 0);
  }
  uint64_t result = lAddByte(a1, a2 & 0x7Fu | ((a2 > 256) << 7));
  if ((a2 - 266) <= 0xD)
  {
    int v7 = 1 << (a2 - 10);
    if ((v7 & 0x23) != 0)
    {
      char v12 = *(unsigned char *)(a3 + 24);
      if (v12)
      {
        uint64_t v13 = (unsigned __int8 *)(a3 + 25);
        do
        {
          lAddByte(a1, v12);
          int v14 = *v13++;
          char v12 = v14;
        }
        while (v14);
      }
    }
    else
    {
      if ((v7 & 0x3010) == 0) {
        return result;
      }
      Atomuint64_t String = GetAtomString(*a1 + 384, *(_DWORD *)(a3 + 12));
      char v9 = *AtomString;
      if (*AtomString)
      {
        char v10 = (unsigned __int8 *)(AtomString + 1);
        do
        {
          lAddByte(a1, v9);
          int v11 = *v10++;
          char v9 = v11;
        }
        while (v11);
      }
    }
    return lAddByte(a1, 0);
  }
  return result;
}

uint64_t lAddByte(void *a1, char a2)
{
  uint64_t result = a1[4];
  int v5 = *(_DWORD *)(result + 12);
  if (v5 >= *(_DWORD *)(result + 16))
  {
    uint64_t result = lNewBlock((uint64_t)a1, *(void **)(*(void *)(*a1 + 536) + 40));
    int v5 = *(_DWORD *)(result + 12);
  }
  uint64_t v6 = *(void *)(result + 24);
  *(_DWORD *)(result + 12) = v5 + 1;
  *(unsigned char *)(v6 + v5) = a2;
  return result;
}

uint64_t RewindTokenStream(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)(result + 32) = v1;
    *(_DWORD *)(v1 + 8) = 0;
  }
  return result;
}

uint64_t ReadToken(uint64_t *a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  LODWORD(result) = lReadByte((uint64_t)a1);
  if (!result)
  {
    *(_DWORD *)(a2 + 20) = 1;
    LODWORD(result) = lReadByte((uint64_t)a1);
    if ((result & 0x80000000) == 0) {
      goto LABEL_3;
    }
    return 0xFFFFFFFFLL;
  }
  if ((result & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
LABEL_3:
  if (result <= 0x7F) {
    uint64_t result = result;
  }
  else {
    uint64_t result = (result + 128);
  }
  switch((int)result)
  {
    case 266:
      int Byte = lReadByte((uint64_t)a1);
      if ((Byte & 0xDF) == 0x46
        || (int v8 = Byte << 24, Byte << 24 == 754974720)
        || v8 == 721420288
        || v8 == 771751936
        || (Byte & 0xDF) == 0x45
        || ((Byte << 24) - 788529153) < 0xAFFFFFF)
      {
        unint64_t v9 = 0;
        while (1)
        {
          if (v9 > 0x400) {
            glpCPPErrorToInfoLog(*a1, (char)"ERROR_TOKEN_TOO_LONG");
          }
          else {
            v20[v9++] = Byte;
          }
          int Byte = lReadByte((uint64_t)a1);
          if ((Byte & 0xDF) != 0x46)
          {
            int v19 = Byte << 24;
            if (Byte << 24 != 754974720
              && v19 != 721420288
              && v19 != 771751936
              && (Byte & 0xDF) != 0x45
              && ((Byte << 24) - 788529153) >= 0xAFFFFFF)
            {
              break;
            }
          }
        }
        if (v9 >= 0x401)
        {
          glpCPPErrorToInfoLog(*a1, (char)"ERROR_TOKEN_TOO_LONG");
          unint64_t v9 = 1024;
        }
      }
      else
      {
        unint64_t v9 = 0;
      }
      v20[v9] = 0;
      __strcpy_chk();
      *(float *)(a2 + 8) = strtof_l((const char *)(a2 + 24), 0, 0);
      uint64_t result = 266;
      break;
    case 267:
      unint64_t v10 = 0;
      while (1)
      {
        int v11 = lReadByte((uint64_t)a1);
        int v12 = v11 & 0xDF;
        if (v12 != 70 && v12 != 76)
        {
          int v13 = v11 << 24;
          if (v11 << 24 != 754974720
            && v13 != 721420288
            && v13 != 771751936
            && v12 != 69
            && ((v11 << 24) - 788529153) >= 0xAFFFFFF)
          {
            break;
          }
        }
        if (v10 <= 0x400) {
          v20[v10++] = v11;
        }
        else {
          glpCPPErrorToInfoLog(*a1, (char)"ERROR_TOKEN_TOO_LONG");
        }
      }
      if (v10 >= 0x401)
      {
        glpCPPErrorToInfoLog(*a1, (char)"ERROR_TOKEN_TOO_LONG");
        unint64_t v10 = 1024;
      }
      v20[v10] = 0;
      __strcpy_chk();
      *(double *)a2 = strtod_l((const char *)(a2 + 24), 0, 0);
      uint64_t result = 267;
      break;
    case 270:
    case 279:
      int v5 = lReadByte((uint64_t)a1);
      unsigned int v6 = 0;
      if (!glpIsExtensionEnabled(*(void *)(*a1 + 32), 0x23u) || v5 != 36) {
        goto LABEL_71;
      }
      v20[0] = 36;
      unsigned int v6 = 1;
      while (1)
      {
        int v5 = lReadByte((uint64_t)a1);
LABEL_71:
        if ((v5 & 0xFFFFFFDF) - 65 >= 0x1A && v5 != 95 && (v5 - 48) > 9) {
          break;
        }
        if (v6 > 0x400) {
          glpCPPErrorToInfoLog(*a1, (char)"ERROR_TOKEN_TOO_LONG");
        }
        else {
          v20[v6++] = v5;
        }
      }
      if (v6 >= 0x401)
      {
        glpCPPErrorToInfoLog(*a1, (char)"ERROR_TOKEN_TOO_LONG");
        unsigned int v6 = 1024;
      }
      v20[v6] = 0;
      *(_DWORD *)(a2 + 12) = LookUpAddString(*a1 + 384, v20);
      uint64_t result = 270;
      break;
    case 271:
      unint64_t v14 = 0;
      while (1)
      {
        int v15 = lReadByte((uint64_t)a1);
        BOOL v16 = ((v15 << 24) - 788529153) >= 0xAFFFFFF
           && ((v15 << 24) & 0xDFFFFFFF) - 1073741825 >= 0x6FFFFFF;
        if (v16 && (v15 & 0xDF) != 0x58 && (v15 & 0xDF) != 0x55) {
          break;
        }
        if (v14 <= 0x400) {
          v20[v14++] = v15;
        }
        else {
          glpCPPErrorToInfoLog(*a1, (char)"ERROR_TOKEN_TOO_LONG");
        }
      }
      if (v14 >= 0x401)
      {
        glpCPPErrorToInfoLog(*a1, (char)"ERROR_TOKEN_TOO_LONG");
        unint64_t v14 = 1024;
      }
      v20[v14] = 0;
      __strcpy_chk();
      *(_DWORD *)(a2 + 16) = strtoul_l((const char *)(a2 + 24), 0, 0, 0);
      uint64_t result = 271;
      break;
    case 278:
      char v17 = lReadByte((uint64_t)a1);
      if (v17)
      {
        unint64_t v18 = 0;
        do
        {
          if (v18 > 0x400) {
            glpCPPErrorToInfoLog(*a1, (char)"ERROR_TOKEN_TOO_LONG");
          }
          else {
            v20[v18++] = v17;
          }
          char v17 = lReadByte((uint64_t)a1);
        }
        while (v17);
        if (v18 >= 0x401)
        {
          glpCPPErrorToInfoLog(*a1, (char)"ERROR_TOKEN_TOO_LONG");
          unint64_t v18 = 1024;
        }
      }
      else
      {
        unint64_t v18 = 0;
      }
      v20[v18] = 0;
      *(_DWORD *)(a2 + 12) = LookUpAddString(*a1 + 384, v20);
      uint64_t result = 278;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t lReadByte(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 32);
  if (v1)
  {
    int v2 = *((_DWORD *)v1 + 2);
    if (v2 < *((_DWORD *)v1 + 3))
    {
LABEL_5:
      uint64_t v3 = v1[3];
      *((_DWORD *)v1 + 2) = v2 + 1;
      return *(unsigned __int8 *)(v3 + v2);
    }
    uint64_t v1 = (uint64_t *)*v1;
    if (v1)
    {
      int v2 = 0;
      *((_DWORD *)v1 + 2) = 0;
      *(void *)(a1 + 32) = v1;
      goto LABEL_5;
    }
    *(void *)(a1 + 32) = 0;
  }
  return 0xFFFFFFFFLL;
}

BOOL MatchNextToken(uint64_t a1, int a2)
{
  int v2 = *(uint64_t **)(a1 + 32);
  if (!v2) {
    return 0;
  }
  int v5 = *((_DWORD *)v2 + 2);
  if (v5 >= *((_DWORD *)v2 + 3))
  {
    int v2 = (uint64_t *)*v2;
    if (!v2) {
      goto LABEL_15;
    }
    int v5 = 0;
    *((_DWORD *)v2 + 2) = 0;
    *(void *)(a1 + 32) = v2;
  }
  int v6 = *(unsigned __int8 *)(v2[3] + v5);
  if (!v6)
  {
    lReadByte(a1);
    int v7 = *(uint64_t **)(a1 + 32);
    if (v7)
    {
      int v8 = *((_DWORD *)v7 + 2);
      if (v8 < *((_DWORD *)v7 + 3))
      {
LABEL_10:
        int v6 = *(unsigned __int8 *)(v7[3] + v8);
        goto LABEL_11;
      }
      int v7 = (uint64_t *)*v7;
      if (v7)
      {
        int v8 = 0;
        *((_DWORD *)v7 + 2) = 0;
        *(void *)(a1 + 32) = v7;
        goto LABEL_10;
      }
LABEL_15:
      BOOL result = 0;
      *(void *)(a1 + 32) = 0;
      return result;
    }
    return 0;
  }
LABEL_11:
  if ((v6 & 0x80u) != 0) {
    v6 += 128;
  }
  return v6 == a2;
}

uint64_t ReadFromTokenStream(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = malloc_type_malloc(0x48uLL, 0x7081ABB9uLL);
  if (!v4) {
    abort();
  }
  v4[8] = 0;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *(_OWORD *)uint64_t v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  uint64_t v5 = *a1;
  *uint64_t v4 = *a1;
  uint64_t v6 = *(void *)(v5 + 16);
  *((_DWORD *)v4 + 12) = *(_DWORD *)(v6 + 48);
  v4[5] = *(void *)(v6 + 40);
  v4[1] = v6;
  void v4[2] = scan_token;
  v4[7] = a1;
  v4[8] = a2;
  uint64_t v7 = a1[3];
  if (v7)
  {
    a1[4] = v7;
    *(_DWORD *)(v7 + 8) = 0;
  }
  *(void *)(v5 + 16) = v4;
  return 1;
}

uint64_t scan_token(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t **)(a1 + 56);
  uint64_t v4 = *v3;
  uint64_t result = ReadToken(v3, a2);
  if (result == 10)
  {
    ++*(_DWORD *)(a1 + 48);
  }
  else if ((int)result <= 0)
  {
    *(void *)(v4 + 16) = *(void *)(a1 + 8);
    uint64_t v6 = *(unsigned int (**)(uint64_t))(a1 + 64);
    free((void *)a1);
    if (v6 && !v6(v4))
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)(v4 + 16) + 16);
      return v7();
    }
  }
  return result;
}

void *UngetToken(uint64_t a1, int a2, const void *a3)
{
  uint64_t v6 = malloc_type_malloc(0x460uLL, 0x7081ABB9uLL);
  if (!v6) {
    abort();
  }
  uint64_t v7 = v6;
  bzero(v6, 0x460uLL);
  v7[14] = a2;
  uint64_t result = memcpy(v7 + 16, a3, 0x420uLL);
  *(void *)uint64_t v7 = a1;
  uint64_t v9 = *(void *)(a1 + 16);
  v7[12] = *(_DWORD *)(v9 + 48);
  *((void *)v7 + 5) = *(void *)(v9 + 40);
  *((void *)v7 + 1) = v9;
  *((void *)v7 + 2) = reget_token;
  *(void *)(a1 + 16) = v7;
  return result;
}

uint64_t reget_token(void *a1, void *__dst)
{
  uint64_t v3 = *((unsigned int *)a1 + 14);
  memcpy(__dst, a1 + 8, 0x420uLL);
  *(void *)(*a1 + 16) = a1[1];
  free(a1);
  return v3;
}

_OWORD *glpCacheOpen()
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  unsigned int v14 = 0;
  v0 = getenv("GL_SHADER_CACHE_SIZE");
  if (!v0 || sscanf(v0, "%d", &v14) != 1 || v14 >= 0x10000001) {
    unsigned int v14 = 0x10000000;
  }
  uint64_t v1 = malloc_type_malloc(0x30uLL, 0x7081ABB9uLL);
  if (!v1) {
    abort();
  }
  int v2 = v1;
  v1[1] = 0u;
  v1[2] = 0u;
  *uint64_t v1 = 0u;
  if (v14)
  {
    *((void *)v1 + 3) = dispatch_queue_create("CompilerFSCacheSerialQueue", 0);
    CFArrayRef v3 = (const __CFArray *)CFCopySearchPathForDirectoriesInDomains();
    CFIndex Count = CFArrayGetCount(v3);
    if (Count < 1) {
      goto LABEL_11;
    }
    CFURLRef ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(v3, Count - 1);
    if (!ValueAtIndex) {
      goto LABEL_11;
    }
    __s[0] = 0;
    CFStringRef v6 = CFURLCopyFileSystemPath(ValueAtIndex, kCFURLPOSIXPathStyle);
    int v7 = strlen(__s);
    CFStringGetCString(v6, &__s[v7], 1025 - v7, 0x8000100u);
    CFRelease(v6);
    memset(&v15, 0, sizeof(v15));
    if (stat(__s, &v15))
    {
      syslog(3, "path for application cache was not found: %s");
LABEL_11:
      CFRelease(v3);
      return v2;
    }
    MainBundle = CFBundleGetMainBundle();
    if (MainBundle)
    {
      CFStringRef Identifier = CFBundleGetIdentifier(MainBundle);
      if (Identifier)
      {
        CFStringRef v11 = Identifier;
        size_t v12 = strlen(__s);
        if (v12 && __s[v12] != 47) {
          __strncat_chk();
        }
        int v13 = strlen(__s);
        CFStringGetCString(v11, &__s[v13], 1025 - v13, 0x8000100u);
      }
      if (stat(__s, &v15) && mkdir(__s, 0x1FFu))
      {
        syslog(3, "could not create path: %s");
        goto LABEL_11;
      }
    }
    strlen(__s);
    __strncat_chk();
    if (stat(__s, &v15) && mkdir(__s, 0x1FFu)) {
      goto LABEL_11;
    }
    CFRelease(v3);
    __strlcat_chk();
    __strlcat_chk();
    *((void *)v2 + 1) = v14;
    *((_DWORD *)v2 + 4) = 2097153;
    if (!fscache_open())
    {
      if (*((void *)v2 + 5)) {
        *(_DWORD *)int v2 = v14;
      }
      else {
        syslog(3, "fscache_open returned a NULL pointer but no error.");
      }
    }
  }
  return v2;
}

void glpCacheDelete(void *a1)
{
  if (*(int *)a1 >= 1)
  {
    int v2 = *((void *)a1 + 3);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = __glpCacheDelete_block_invoke;
    block[3] = &__block_descriptor_tmp_11;
    block[4] = a1;
    dispatch_sync(v2, block);
  }
  dispatch_release(*((dispatch_object_t *)a1 + 3));
  free(a1);
}

uint64_t __glpCacheDelete_block_invoke(uint64_t a1)
{
  return MEMORY[0x270EF9BF0](*(void *)(*(void *)(a1 + 32) + 40));
}

uint64_t glpCacheGenerateHash(const void *a1, CC_LONG a2, unsigned __int8 *a3)
{
  memset(&v7, 0, sizeof(v7));
  CC_SHA256_Init(&v7);
  CC_SHA256_Update(&v7, a1, a2);
  CC_SHA256_Update(&v7, "Nov 10 2024", 0xBu);
  CC_SHA256_Update(&v7, "03:22:31", 8u);
  return CC_SHA256_Final(a3, &v7);
}

uint64_t glpCacheGetElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2000000000;
  int v11 = 0;
  if (*(_DWORD *)a1)
  {
    uint64_t v4 = *(NSObject **)(a1 + 24);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = __glpCacheGetElement_block_invoke;
    block[3] = &unk_264D9A4D0;
    block[4] = &v8;
    void block[5] = a1;
    block[6] = a2;
    block[7] = a3;
    block[8] = a4;
    dispatch_sync(v4, block);
    uint64_t v5 = *((unsigned int *)v9 + 6);
  }
  else
  {
    uint64_t v5 = 0;
  }
  _Block_object_dispose(&v8, 8);
  return v5;
}

uint64_t __glpCacheGetElement_block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t result = fscache_find_and_retain();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 203)
  {
    ++*(_DWORD *)(*(void *)(a1 + 40) + 36);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  else
  {
    uint64_t result = fscache_element_get_data();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
    if (*(_DWORD *)(v3 + 24))
    {
      *(_DWORD *)(v3 + 24) = 0;
    }
    else
    {
      long long v9 = 0u;
      long long v10 = 0u;
      glpCacheGenerateHash((const void *)0x20, 0xFFFFFFE0, (unsigned __int8 *)&v9);
      if ((void)v9 == MEMORY[0]
        && *((void *)&v9 + 1) == MEMORY[8]
        && (void)v10 == MEMORY[0x10]
        && *((void *)&v10 + 1) == MEMORY[0x18])
      {
        uint64_t v8 = malloc_type_malloc(0xFFFFFFFFFFFFFFE0, 0x7081ABB9uLL);
        if (!v8) {
          abort();
        }
        **(void **)(a1 + --*(void *)(result + 56) = v8;
        **(void **)(a1 + 64) = -32;
        uint64_t result = (uint64_t)memcpy(**(void ***)(a1 + 56), (const void *)0x20, 0xFFFFFFFFFFFFFFE0);
        ++*(_DWORD *)(*(void *)(a1 + 40) + 32);
        int v7 = 1;
      }
      else
      {
        uint64_t result = fscache_remove_and_release();
        int v7 = 0;
      }
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v7;
    }
  }
  return result;
}

void glpCacheAddElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)a1)
  {
    uint64_t v4 = *(NSObject **)(a1 + 24);
    v5[0] = MEMORY[0x263EF8330];
    v5[1] = 0x40000000;
    v5[2] = __glpCacheAddElement_block_invoke;
    v5[3] = &__block_descriptor_tmp_24;
    v5[4] = a3;
    v5[5] = a4;
    v5[6] = a1;
    v5[7] = a2;
    dispatch_sync(v4, v5);
  }
}

void __glpCacheAddElement_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  long long v5 = 0u;
  long long v6 = 0u;
  glpCacheGenerateHash(*(const void **)(a1 + 32), *(void *)(a1 + 40), (unsigned __int8 *)&v5);
  int v2 = malloc_type_malloc(*(void *)(a1 + 40) + 32, 0x7081ABB9uLL);
  if (!v2) {
    abort();
  }
  uint64_t v3 = v2;
  long long v4 = v6;
  *int v2 = v5;
  v2[1] = v4;
  memcpy(v2 + 2, *(const void **)(a1 + 32), *(void *)(a1 + 40));
  fscache_insert_and_retain();
  free(v3);
}

uint64_t glpBaseSizeOfNodeKind(unsigned int a1)
{
  if (a1 >= 0x56) {
    abort();
  }
  return qword_2393D2CB8[a1];
}

uint64_t glpDeepCopyASTNode(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t *, _DWORD *), uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = *(unsigned int *)(a2 + 4);
  uint64_t v8 = *a1;
  long long v9 = (uint64_t (*)(uint64_t, uint64_t, const char *))a1[1];
  uint64_t v10 = glpBaseSizeOfNodeKind(*(_DWORD *)(a2 + 16));
  uint64_t v11 = (_DWORD *)v9(v8, v10 + 8 * v7, "AST Node (copy)");
  size_t v12 = glpBaseSizeOfNodeKind(*(_DWORD *)(a2 + 16));
  memcpy(v11, (const void *)a2, v12);
  *uint64_t v11 = v7;
  v11[1] = v7;
  *((void *)v11 + 1) = (char *)v11 + glpBaseSizeOfNodeKind(*(_DWORD *)(a2 + 16));
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 8 * v7;
    do
    {
      *(void *)(*((void *)v11 + 1) + v13) = glpDeepCopyASTNode(a1, *(void *)(*(void *)(a2 + 8) + v13), a3, a4);
      v13 += 8;
    }
    while (v14 != v13);
  }
  if (!a3) {
    return (uint64_t)v11;
  }

  return a3(a4, a1, v11);
}

uint64_t glpASTNodeGetChildCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t glpASTNodeSetChild(uint64_t result, unsigned int a2, uint64_t a3)
{
  *(void *)(*(void *)(result + 8) + 8 * a2) = a3;
  return result;
}

uint64_t glpASTNodeGetChild(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 8) + 8 * a2);
}

uint64_t glpTopLevelNodeGetGlobalTypeQualifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 64);
  if (!v2) {
    return 0;
  }
  for (uint64_t i = *(uint64_t **)(a1 + 8); ; ++i)
  {
    uint64_t result = *i;
    if ((unint64_t)(*i + 1) >= 2
      && *(_DWORD *)(result + 16) == 63
      && *(void *)(result + 32)
      && (*(void *)(result + 24) & 0xFFFFFFFFFFFFFF7FLL) == a2)
    {
      break;
    }
    if (!--v2) {
      return 0;
    }
  }
  return result;
}

uint64_t glpTopLevelNodeGetDefCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t glpTopLevelNodeGetDef(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 8) + 8 * a2);
}

uint64_t glpASTNodeGetSaType(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t glpASTNodeGetSaFlags(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t glpASTNodeGetKind(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t glpASTNodeSetSaFlags(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t glpASTNodeSetSaType(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = a2;
  return result;
}

__n128 glpASTNodeGetLocation@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 40);
  *a2 = result;
  a2[1].n128_u64[0] = *(void *)(a1 + 56);
  return result;
}

__n128 glpASTNodeSetLocation(uint64_t a1, __n128 *a2)
{
  __n128 result = *a2;
  *(void *)(a1 + --*(void *)(result + 56) = a2[1].n128_u64[0];
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t glpUnaryOperatorNodeGetExpr(uint64_t a1)
{
  return **(void **)(a1 + 8);
}

uint64_t glpUnaryOperatorNodeSetExpr(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

uint64_t glpIsBinaryOperatorNode(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) - 19;
  if (v1 > 0x15) {
    return 0;
  }
  else {
    return dword_2393D2F6C[v1];
  }
}

uint64_t glpBinaryOperatorNodeGetLhs(uint64_t a1)
{
  return **(void **)(a1 + 8);
}

uint64_t glpBinaryOperatorNodeSetLhs(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

uint64_t glpBinaryOperatorNodeGetRhs(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 8);
}

uint64_t glpBinaryOperatorNodeSetRhs(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 8) + 8) = a2;
  return result;
}

uint64_t glpCallNodeGetArgCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t glpCallNodeGetArg(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 8) + 8 * a2);
}

uint64_t glpCallNodeSetArg(uint64_t result, unsigned int a2, uint64_t a3)
{
  *(void *)(*(void *)(result + 8) + 8 * a2) = a3;
  return result;
}

void *glpCallNodeAddArg(void *a1, uint64_t a2, uint64_t a3)
{
  return glpCallNodeInsertArg(a1, a2, a3, *(_DWORD *)(a2 + 64));
}

void *glpCallNodeInsertArg(void *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7 = *(_DWORD *)(a2 + 4);
  int v8 = v7 + 1;
  if ((v7 + 1) <= *(_DWORD *)a2)
  {
    uint64_t v13 = *(char **)(a2 + 8);
  }
  else
  {
    if (*(int *)a2 <= 1) {
      int v10 = 1;
    }
    else {
      int v10 = *(_DWORD *)a2;
    }
    int v11 = 2 * v10;
    if (v11 <= v8) {
      unsigned int v12 = v8;
    }
    else {
      unsigned int v12 = v11;
    }
    uint64_t v13 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 8 * v12, "Vector Storage (GLPASTNode *, growth)");
    memcpy(v13, *(const void **)(a2 + 8), 8 * *(unsigned int *)(a2 + 4));
    ((void (*)(void, void))a1[3])(*a1, *(void *)(a2 + 8));
    *(_DWORD *)a2 = v12;
    *(void *)(a2 + 8) = v13;
    int v7 = *(_DWORD *)(a2 + 4);
  }
  __n128 result = memmove(&v13[8 * a4 + 8], &v13[8 * a4], 8 * (v7 - a4));
  *(void *)(*(void *)(a2 + 8) + 8 * a4) = a3;
  ++*(_DWORD *)(a2 + 4);
  ++*(_DWORD *)(a2 + 64);
  return result;
}

void *glpStructureNodeClearFields(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 64);
  __n128 result = memmove(*(void **)(a1 + 8), (const void *)(*(void *)(a1 + 8) + 8 * v2), 8 * (*(_DWORD *)(a1 + 4) - v2));
  *(_DWORD *)(a1 + 4) -= v2;
  *(_DWORD *)(a1 + 64) = 0;
  return result;
}

uint64_t glpStructureNodeGetFieldCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t glpStructureNodeGetField(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 8) + 8 * a2);
}

uint64_t glpStructureNodeSetField(uint64_t result, unsigned int a2, uint64_t a3)
{
  *(void *)(*(void *)(result + 8) + 8 * a2) = a3;
  return result;
}

void *glpStructureNodeAddField(void *a1, uint64_t a2, uint64_t a3)
{
  return glpStructureNodeInsertField(a1, a2, a3, *(_DWORD *)(a2 + 64));
}

void *glpStructureNodeInsertField(void *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7 = *(_DWORD *)(a2 + 4);
  int v8 = v7 + 1;
  if ((v7 + 1) <= *(_DWORD *)a2)
  {
    uint64_t v13 = *(char **)(a2 + 8);
  }
  else
  {
    if (*(int *)a2 <= 1) {
      int v10 = 1;
    }
    else {
      int v10 = *(_DWORD *)a2;
    }
    int v11 = 2 * v10;
    if (v11 <= v8) {
      unsigned int v12 = v8;
    }
    else {
      unsigned int v12 = v11;
    }
    uint64_t v13 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 8 * v12, "Vector Storage (GLPASTNode *, growth)");
    memcpy(v13, *(const void **)(a2 + 8), 8 * *(unsigned int *)(a2 + 4));
    ((void (*)(void, void))a1[3])(*a1, *(void *)(a2 + 8));
    *(_DWORD *)a2 = v12;
    *(void *)(a2 + 8) = v13;
    int v7 = *(_DWORD *)(a2 + 4);
  }
  __n128 result = memmove(&v13[8 * a4 + 8], &v13[8 * a4], 8 * (v7 - a4));
  *(void *)(*(void *)(a2 + 8) + 8 * a4) = a3;
  ++*(_DWORD *)(a2 + 4);
  ++*(_DWORD *)(a2 + 64);
  return result;
}

uint64_t glpMakeTypeConversionNode(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 88, "AST Node (TypeConversion)");
  *(void *)(v7 + 8) = v7 + 80;
  *(_DWORD *)uint64_t v7 = 1;
  __n128 v9 = *a2;
  unint64_t v10 = a2[1].n128_u64[0];
  initUnaryOperatorNode(v7, 0, &v9);
  *(void *)(v7 + 64) = a3;
  *(void *)(v7 + 72) = a4;
  return v7;
}

BOOL glpIsTypeConversionNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 0;
}

uint64_t glpTypeConversionNodeGetToType(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t glpTypeConversionNodeGetToPrecision(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t glpTypeConversionNodeSetToPrecision(uint64_t result, uint64_t a2)
{
  *(void *)(result + 72) = a2;
  return result;
}

__n128 glpMakeVariableIdentifierNode(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (VariableIdentifier)");
  *(void *)(v7 + 8) = v7 + 80;
  *(_DWORD *)uint64_t v7 = 0;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 result = *a2;
  *(_DWORD *)(v7 + 4) = 0;
  *(_DWORD *)(v7 + 16) = 1;
  *(void *)(v7 + 24) = 0;
  *(void *)(v7 + 32) = 0;
  *(__n128 *)(v7 + 40) = result;
  *(void *)(v7 + --*(void *)(result + 56) = v8;
  *(void *)(v7 + 64) = a3;
  *(void *)(v7 + 72) = a4;
  return result;
}

BOOL glpIsVariableIdentifierNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 1;
}

uint64_t glpVariableIdentifierNodeGetName(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

__n128 glpMakeTypeIdentifierNode(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (TypeIdentifier)");
  *(void *)(v7 + 8) = v7 + 80;
  *(_DWORD *)uint64_t v7 = 0;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 result = *a2;
  *(_DWORD *)(v7 + 4) = 0;
  *(_DWORD *)(v7 + 16) = 2;
  *(void *)(v7 + 24) = 0;
  *(void *)(v7 + 32) = 0;
  *(__n128 *)(v7 + 40) = result;
  *(void *)(v7 + --*(void *)(result + 56) = v8;
  *(void *)(v7 + 64) = a3;
  *(void *)(v7 + 72) = a4;
  return result;
}

uint64_t glpTypeIdentifierNodeGetName(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

__n128 glpMakeConstantNode(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (Constant)");
  *(void *)(v7 + 8) = v7 + 80;
  *(_DWORD *)uint64_t v7 = 0;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 result = *a2;
  *(_DWORD *)(v7 + 4) = 0;
  *(_DWORD *)(v7 + 16) = 3;
  *(void *)(v7 + 24) = 0;
  *(void *)(v7 + 32) = 0;
  *(__n128 *)(v7 + 40) = result;
  *(void *)(v7 + --*(void *)(result + 56) = v8;
  *(void *)(v7 + 64) = a3;
  *(void *)(v7 + 72) = a4;
  return result;
}

BOOL glpIsConstantNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 3;
}

uint64_t glpConstantNodeGetType(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t glpConstantNodeGetValue(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t glpConstantNodeSetValue(uint64_t result, uint64_t a2)
{
  *(void *)(result + 72) = a2;
  return result;
}

__n128 glpMakeArrayAccessNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (ArrayAccess)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 2;
  unint64_t v4 = a2[1].n128_u64[0];
  __n128 result = *a2;
  *(_DWORD *)(v3 + 4) = 0;
  *(_DWORD *)(v3 + 16) = 4;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  *(__n128 *)(v3 + 40) = result;
  *(void *)(v3 + --*(void *)(result + 56) = v4;
  **(void **)(v3 + 8) = 0;
  LODWORD(v4) = *(_DWORD *)(v3 + 4) + 1;
  *(_DWORD *)(v3 + 4) = v4;
  *(void *)(*(void *)(v3 + 8) + 8 * v4) = 0;
  ++*(_DWORD *)(v3 + 4);
  return result;
}

BOOL glpIsArrayAccessNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 4;
}

uint64_t glpArrayAccessNodeGetArray(uint64_t a1)
{
  return **(void **)(a1 + 8);
}

uint64_t glpArrayAccessNodeSetArray(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

uint64_t glpArrayAccessNodeGetElement(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 8);
}

uint64_t glpArrayAccessNodeSetElement(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 8) + 8) = a2;
  return result;
}

__n128 glpMakeFieldAccessNode(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 88, "AST Node (FieldAccess)");
  *(void *)(v7 + 8) = v7 + 80;
  *(_DWORD *)uint64_t v7 = 1;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 result = *a2;
  *(_DWORD *)(v7 + 4) = 0;
  *(_DWORD *)(v7 + 16) = 5;
  *(void *)(v7 + 24) = 0;
  *(void *)(v7 + 32) = 0;
  *(__n128 *)(v7 + 40) = result;
  *(void *)(v7 + --*(void *)(result + 56) = v8;
  *(void *)(v7 + 64) = a3;
  *(void *)(v7 + 72) = a4;
  **(void **)(v7 + 8) = 0;
  ++*(_DWORD *)(v7 + 4);
  return result;
}

BOOL glpIsFieldAccessNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 5;
}

uint64_t glpFieldAccessNodeGetField(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t glpFieldAccessNodeGetStructure(uint64_t a1)
{
  return **(void **)(a1 + 8);
}

uint64_t glpFieldAccessNodeSetStructure(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

uint64_t glpMakeUndeterminedCallNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 88, "AST Node (UndeterminedCall)");
  *(void *)(v3 + 8) = v3 + 72;
  *(_DWORD *)uint64_t v3 = 2;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initCallNode(v3, 6, &v5);
  *(void *)(*(void *)(v3 + 8) + 8 * (*(_DWORD *)(v3 + 4))++) = 0;
  return v3;
}

BOOL glpIsUndeterminedCallNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 6;
}

uint64_t glpUndeterminedCallNodeGetCallee(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 8 * *(unsigned int *)(a1 + 64));
}

uint64_t glpUndeterminedCallNodeSetCallee(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 8) + 8 * *(unsigned int *)(result + 64)) = a2;
  return result;
}

uint64_t glpMakeFunctionCallNode(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 104, "AST Node (FunctionCall)");
  *(void *)(v7 + 8) = v7 + 96;
  *(_DWORD *)uint64_t v7 = 1;
  __n128 v9 = *a2;
  unint64_t v10 = a2[1].n128_u64[0];
  initCallNode(v7, 7, &v9);
  *(void *)(v7 + 72) = a3;
  *(void *)(v7 + 80) = a4;
  *(void *)(v7 + 88) = 0;
  return v7;
}

uint64_t glpFunctionCallNodeGetName(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t glpFunctionCallNodeGetExtra(uint64_t a1)
{
  return *(void *)(a1 + 88);
}

uint64_t glpFunctionCallNodeSetExtra(uint64_t result, uint64_t a2)
{
  *(void *)(result + 88) = a2;
  return result;
}

uint64_t glpMakeSubroutineArrayCallNode(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 104, "AST Node (SubroutineArrayCall)");
  *(void *)(v7 + 8) = v7 + 88;
  *(_DWORD *)uint64_t v7 = 2;
  __n128 v9 = *a2;
  unint64_t v10 = a2[1].n128_u64[0];
  initCallNode(v7, 8, &v9);
  *(void *)(v7 + 72) = a3;
  *(void *)(v7 + 80) = a4;
  *(void *)(*(void *)(v7 + 8) + 8 * (*(_DWORD *)(v7 + 4))++) = 0;
  return v7;
}

uint64_t glpSubroutineArrayCallNodeGetName(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t glpSubroutineArrayCallNodeGetIndexExpr(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 8 * *(unsigned int *)(a1 + 64));
}

uint64_t glpSubroutineArrayCallNodeSetIndexExpr(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 8) + 8 * *(unsigned int *)(result + 64)) = a2;
  return result;
}

uint64_t glpMakeMethodCallNode(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 104, "AST Node (MethodCall)");
  *(void *)(v7 + 8) = v7 + 88;
  *(_DWORD *)uint64_t v7 = 2;
  __n128 v9 = *a2;
  unint64_t v10 = a2[1].n128_u64[0];
  initCallNode(v7, 9, &v9);
  *(void *)(v7 + 72) = a3;
  *(void *)(v7 + 80) = a4;
  *(void *)(*(void *)(v7 + 8) + 8 * (*(_DWORD *)(v7 + 4))++) = 0;
  return v7;
}

uint64_t glpMethodCallNodeGetName(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t glpMethodCallNodeGetReceiver(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 8 * *(unsigned int *)(a1 + 64));
}

uint64_t glpMethodCallNodeSetReceiver(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 8) + 8 * *(unsigned int *)(result + 64)) = a2;
  return result;
}

uint64_t glpMakeConstructorCallNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 88, "AST Node (ConstructorCall)");
  *(void *)(v3 + 8) = v3 + 72;
  *(_DWORD *)uint64_t v3 = 2;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initCallNode(v3, 10, &v5);
  *(void *)(*(void *)(v3 + 8) + 8 * (*(_DWORD *)(v3 + 4))++) = 0;
  return v3;
}

uint64_t glpConstructorCallNodeGetType(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 8 * *(unsigned int *)(a1 + 64));
}

uint64_t glpConstructorCallNodeSetType(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 8) + 8 * *(unsigned int *)(result + 64)) = a2;
  return result;
}

uint64_t glpMakePostincrementNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 72, "AST Node (Postincrement)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 1;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initUnaryOperatorNode(v3, 11, &v5);
  return v3;
}

uint64_t glpMakePostdecrementNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 72, "AST Node (Postdecrement)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 1;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initUnaryOperatorNode(v3, 12, &v5);
  return v3;
}

uint64_t glpMakePreincrementNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 72, "AST Node (Preincrement)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 1;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initUnaryOperatorNode(v3, 13, &v5);
  return v3;
}

uint64_t glpMakePredecrementNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 72, "AST Node (Predecrement)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 1;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initUnaryOperatorNode(v3, 14, &v5);
  return v3;
}

uint64_t glpMakeUnaryPlusNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 72, "AST Node (UnaryPlus)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 1;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initUnaryOperatorNode(v3, 15, &v5);
  return v3;
}

uint64_t glpMakeNegateNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 72, "AST Node (Negate)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 1;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initUnaryOperatorNode(v3, 16, &v5);
  return v3;
}

uint64_t glpMakeLogicalNotNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 72, "AST Node (LogicalNot)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 1;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initUnaryOperatorNode(v3, 17, &v5);
  return v3;
}

uint64_t glpMakeBitwiseNotNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 72, "AST Node (BitwiseNot)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 1;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initUnaryOperatorNode(v3, 18, &v5);
  return v3;
}

uint64_t glpMakeMultiplyNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (Multiply)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 2;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initBinaryOperatorNode(v3, 19, &v5);
  return v3;
}

uint64_t glpMakeDivideNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (Divide)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 2;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initBinaryOperatorNode(v3, 20, &v5);
  return v3;
}

uint64_t glpMakeModuloNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (Modulo)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 2;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initBinaryOperatorNode(v3, 21, &v5);
  return v3;
}

uint64_t glpMakeAddNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (Add)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 2;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initBinaryOperatorNode(v3, 22, &v5);
  return v3;
}

uint64_t glpMakeSubtractNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (Subtract)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 2;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initBinaryOperatorNode(v3, 23, &v5);
  return v3;
}

uint64_t glpMakeShiftLeftNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (ShiftLeft)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 2;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initBinaryOperatorNode(v3, 24, &v5);
  return v3;
}

uint64_t glpMakeShiftRightNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (ShiftRight)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 2;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initBinaryOperatorNode(v3, 25, &v5);
  return v3;
}

uint64_t glpMakeLessNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (Less)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 2;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initBinaryOperatorNode(v3, 26, &v5);
  return v3;
}

uint64_t glpMakeLessEqualNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (LessEqual)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 2;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initBinaryOperatorNode(v3, 27, &v5);
  return v3;
}

uint64_t glpMakeGreaterNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (Greater)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 2;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initBinaryOperatorNode(v3, 28, &v5);
  return v3;
}

uint64_t glpMakeGreaterEqualNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (GreaterEqual)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 2;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initBinaryOperatorNode(v3, 29, &v5);
  return v3;
}

uint64_t glpMakeEqualNode(uint64_t a1, __n128 *a2, char a3)
{
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 88, "AST Node (Equal)");
  *(void *)(v5 + 8) = v5 + 72;
  *(_DWORD *)uint64_t v5 = 2;
  __n128 v7 = *a2;
  unint64_t v8 = a2[1].n128_u64[0];
  initBinaryOperatorNode(v5, 30, &v7);
  *(unsigned char *)(v5 + 64) = a3;
  return v5;
}

uint64_t glpEqualNodeGetIsFromSource(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

uint64_t glpMakeNotEqualNode(uint64_t a1, __n128 *a2, char a3)
{
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 88, "AST Node (NotEqual)");
  *(void *)(v5 + 8) = v5 + 72;
  *(_DWORD *)uint64_t v5 = 2;
  __n128 v7 = *a2;
  unint64_t v8 = a2[1].n128_u64[0];
  initBinaryOperatorNode(v5, 31, &v7);
  *(unsigned char *)(v5 + 64) = a3;
  return v5;
}

uint64_t glpNotEqualNodeGetIsFromSource(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

uint64_t glpMakeLogicalAndNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (LogicalAnd)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 2;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initBinaryOperatorNode(v3, 32, &v5);
  return v3;
}

uint64_t glpMakeLogicalOrNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (LogicalOr)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 2;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initBinaryOperatorNode(v3, 33, &v5);
  return v3;
}

uint64_t glpMakeLogicalXorNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (LogicalXor)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 2;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initBinaryOperatorNode(v3, 34, &v5);
  return v3;
}

uint64_t glpMakeBitwiseAndNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (BitwiseAnd)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 2;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initBinaryOperatorNode(v3, 35, &v5);
  return v3;
}

uint64_t glpMakeBitwiseOrNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (BitwiseOr)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 2;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initBinaryOperatorNode(v3, 36, &v5);
  return v3;
}

uint64_t glpMakeBitwiseXorNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (BitwiseXor)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 2;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initBinaryOperatorNode(v3, 37, &v5);
  return v3;
}

__n128 glpMakeIfExprNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 88, "AST Node (IfExpr)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 3;
  unint64_t v4 = a2[1].n128_u64[0];
  __n128 result = *a2;
  *(_DWORD *)(v3 + 4) = 0;
  *(_DWORD *)(v3 + 16) = 38;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  *(__n128 *)(v3 + 40) = result;
  *(void *)(v3 + --*(void *)(result + 56) = v4;
  **(void **)(v3 + 8) = 0;
  LODWORD(v4) = *(_DWORD *)(v3 + 4) + 1;
  *(_DWORD *)(v3 + 4) = v4;
  *(void *)(*(void *)(v3 + 8) + 8 * v4) = 0;
  LODWORD(v4) = *(_DWORD *)(v3 + 4) + 1;
  *(_DWORD *)(v3 + 4) = v4;
  *(void *)(*(void *)(v3 + 8) + 8 * v4) = 0;
  ++*(_DWORD *)(v3 + 4);
  return result;
}

uint64_t glpIfExprNodeGetCondition(uint64_t a1)
{
  return **(void **)(a1 + 8);
}

uint64_t glpIfExprNodeSetCondition(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

uint64_t glpIfExprNodeGetIfExpr(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 8);
}

uint64_t glpIfExprNodeSetIfExpr(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 8) + 8) = a2;
  return result;
}

uint64_t glpIfExprNodeGetElseExpr(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 16);
}

uint64_t glpIfExprNodeSetElseExpr(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 8) + 16) = a2;
  return result;
}

uint64_t glpMakeAssignNode(uint64_t a1, __n128 *a2, char a3)
{
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 88, "AST Node (Assign)");
  *(void *)(v5 + 8) = v5 + 72;
  *(_DWORD *)uint64_t v5 = 2;
  __n128 v7 = *a2;
  unint64_t v8 = a2[1].n128_u64[0];
  initBinaryOperatorNode(v5, 39, &v7);
  *(unsigned char *)(v5 + 64) = a3;
  return v5;
}

BOOL glpIsAssignNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 39;
}

uint64_t glpAssignNodeGetIsFromSource(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

uint64_t glpMakeOpAssignNode(uint64_t a1, __n128 *a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 88, "AST Node (OpAssign)");
  *(void *)(v5 + 8) = v5 + 72;
  *(_DWORD *)uint64_t v5 = 2;
  __n128 v7 = *a2;
  unint64_t v8 = a2[1].n128_u64[0];
  initBinaryOperatorNode(v5, 40, &v7);
  *(void *)(v5 + 64) = a3;
  return v5;
}

BOOL glpIsOpAssignNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 40;
}

uint64_t glpOpAssignNodeGetDesugar(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t glpReadInputNodeGetExtra(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

__n128 glpMakeWriteOutputNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 72, "AST Node (WriteOutput)");
  *(void *)(v3 + 8) = v3 + 72;
  *(_DWORD *)uint64_t v3 = 0;
  unint64_t v4 = a2[1].n128_u64[0];
  __n128 result = *a2;
  *(_DWORD *)(v3 + 4) = 0;
  *(_DWORD *)(v3 + 16) = 42;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  *(__n128 *)(v3 + 40) = result;
  *(void *)(v3 + --*(void *)(result + 56) = v4;
  *(void *)(v3 + 64) = 0;
  return result;
}

uint64_t glpWriteOutputNodeGetExtra(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t glpWriteOutputNodeSetExtra(uint64_t result, uint64_t a2)
{
  *(void *)(result + 64) = a2;
  return result;
}

__n128 glpMakeCommaExprNode(uint64_t a1, __n128 *a2, char a3)
{
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (CommaExpr)");
  *(void *)(v5 + 8) = v5 + 72;
  *(_DWORD *)uint64_t v5 = 1;
  unint64_t v6 = a2[1].n128_u64[0];
  __n128 result = *a2;
  *(_DWORD *)(v5 + 4) = 0;
  *(_DWORD *)(v5 + 16) = 43;
  *(void *)(v5 + 24) = 0;
  *(void *)(v5 + 32) = 0;
  *(__n128 *)(v5 + 40) = result;
  *(void *)(v5 + --*(void *)(result + 56) = v6;
  *(unsigned char *)(v5 + 64) = a3;
  *(_DWORD *)(v5 + 68) = 0;
  return result;
}

BOOL glpIsCommaExprNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 43;
}

uint64_t glpCommaExprNodeGetIsFromSource(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

void *glpCommaExprNodeClearExprs(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 68);
  __n128 result = memmove(*(void **)(a1 + 8), (const void *)(*(void *)(a1 + 8) + 8 * v2), 8 * (*(_DWORD *)(a1 + 4) - v2));
  *(_DWORD *)(a1 + 4) -= v2;
  *(_DWORD *)(a1 + 68) = 0;
  return result;
}

uint64_t glpCommaExprNodeGetExprCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 68);
}

uint64_t glpCommaExprNodeGetExpr(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 8) + 8 * a2);
}

uint64_t glpCommaExprNodeSetExpr(uint64_t result, unsigned int a2, uint64_t a3)
{
  *(void *)(*(void *)(result + 8) + 8 * a2) = a3;
  return result;
}

void *glpCommaExprNodeAddExpr(void *a1, uint64_t a2, uint64_t a3)
{
  return glpCommaExprNodeInsertExpr(a1, a2, a3, *(_DWORD *)(a2 + 68));
}

void *glpCommaExprNodeInsertExpr(void *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7 = *(_DWORD *)(a2 + 4);
  int v8 = v7 + 1;
  if ((v7 + 1) <= *(_DWORD *)a2)
  {
    uint64_t v13 = *(char **)(a2 + 8);
  }
  else
  {
    if (*(int *)a2 <= 1) {
      int v10 = 1;
    }
    else {
      int v10 = *(_DWORD *)a2;
    }
    int v11 = 2 * v10;
    if (v11 <= v8) {
      unsigned int v12 = v8;
    }
    else {
      unsigned int v12 = v11;
    }
    uint64_t v13 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 8 * v12, "Vector Storage (GLPASTNode *, growth)");
    memcpy(v13, *(const void **)(a2 + 8), 8 * *(unsigned int *)(a2 + 4));
    ((void (*)(void, void))a1[3])(*a1, *(void *)(a2 + 8));
    *(_DWORD *)a2 = v12;
    *(void *)(a2 + 8) = v13;
    int v7 = *(_DWORD *)(a2 + 4);
  }
  __n128 result = memmove(&v13[8 * a4 + 8], &v13[8 * a4], 8 * (v7 - a4));
  *(void *)(*(void *)(a2 + 8) + 8 * a4) = a3;
  ++*(_DWORD *)(a2 + 4);
  ++*(_DWORD *)(a2 + 68);
  return result;
}

__n128 glpMakeParameterDeclarationNode(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 96, "AST Node (ParameterDeclaration)");
  *(void *)(v7 + 8) = v7 + 88;
  *(_DWORD *)uint64_t v7 = 1;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 result = *a2;
  *(_DWORD *)(v7 + 4) = 0;
  *(_DWORD *)(v7 + 16) = 44;
  *(void *)(v7 + 24) = 0;
  *(void *)(v7 + 32) = 0;
  *(__n128 *)(v7 + 40) = result;
  *(void *)(v7 + --*(void *)(result + 56) = v8;
  *(void *)(v7 + 64) = a3;
  *(void *)(v7 + 72) = a4;
  *(void *)(v7 + 80) = 0;
  **(void **)(v7 + 8) = 0;
  ++*(_DWORD *)(v7 + 4);
  return result;
}

uint64_t glpParameterDeclarationNodeGetName(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t glpParameterDeclarationNodeGetExtra(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t glpParameterDeclarationNodeSetExtra(uint64_t result, uint64_t a2)
{
  *(void *)(result + 80) = a2;
  return result;
}

uint64_t glpParameterDeclarationNodeGetType(uint64_t a1)
{
  return **(void **)(a1 + 8);
}

uint64_t glpParameterDeclarationNodeSetType(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

__n128 glpMakeFunctionPrototypeNode(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 120, "AST Node (FunctionPrototype)");
  *(void *)(v7 + 8) = v7 + 96;
  *(_DWORD *)uint64_t v7 = 3;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 result = *a2;
  *(_DWORD *)(v7 + 4) = 0;
  *(_DWORD *)(v7 + 16) = 45;
  *(void *)(v7 + 24) = 0;
  *(void *)(v7 + 32) = 0;
  *(__n128 *)(v7 + 40) = result;
  *(void *)(v7 + --*(void *)(result + 56) = v8;
  *(void *)(v7 + 64) = a3;
  *(void *)(v7 + 72) = a4;
  *(void *)(v7 + 80) = 0;
  **(void **)(v7 + 8) = 0;
  LODWORD(v8) = *(_DWORD *)(v7 + 4) + 1;
  *(_DWORD *)(v7 + 4) = v8;
  *(void *)(*(void *)(v7 + 8) + 8 * v8) = 0;
  ++*(_DWORD *)(v7 + 4);
  *(_DWORD *)(v7 + 88) = 0;
  return result;
}

BOOL glpIsFunctionPrototypeNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 45;
}

uint64_t glpFunctionPrototypeNodeGetName(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t glpFunctionPrototypeNodeGetExtra(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t glpFunctionPrototypeNodeSetExtra(uint64_t result, uint64_t a2)
{
  *(void *)(result + 80) = a2;
  return result;
}

uint64_t glpFunctionPrototypeNodeGetReturnType(uint64_t a1)
{
  return **(void **)(a1 + 8);
}

uint64_t glpFunctionPrototypeNodeSetReturnType(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

uint64_t glpFunctionPrototypeNodeGetReturnOutParam(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 8);
}

uint64_t glpFunctionPrototypeNodeSetReturnOutParam(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 8) + 8) = a2;
  return result;
}

void *glpFunctionPrototypeNodeClearParameters(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 88);
  __n128 result = memmove((void *)(*(void *)(a1 + 8) + 16), (const void *)(*(void *)(a1 + 8) + 8 * (v2 + 2)), 8 * (*(_DWORD *)(a1 + 4) - (v2 + 2)));
  *(_DWORD *)(a1 + 4) -= v2;
  *(_DWORD *)(a1 + 88) = 0;
  return result;
}

uint64_t glpFunctionPrototypeNodeGetParameterCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t glpFunctionPrototypeNodeGetParameter(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(a1 + 8) + 8 * (a2 + 2));
}

uint64_t glpFunctionPrototypeNodeSetParameter(uint64_t result, int a2, uint64_t a3)
{
  *(void *)(*(void *)(result + 8) + 8 * (a2 + 2)) = a3;
  return result;
}

void *glpFunctionPrototypeNodeAddParameter(void *a1, uint64_t a2, uint64_t a3)
{
  return glpFunctionPrototypeNodeInsertParameter(a1, a2, a3, *(_DWORD *)(a2 + 88));
}

void *glpFunctionPrototypeNodeInsertParameter(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v7 = *(_DWORD *)(a2 + 4);
  int v8 = v7 + 1;
  if ((v7 + 1) <= *(_DWORD *)a2)
  {
    uint64_t v13 = *(char **)(a2 + 8);
  }
  else
  {
    if (*(int *)a2 <= 1) {
      int v10 = 1;
    }
    else {
      int v10 = *(_DWORD *)a2;
    }
    int v11 = 2 * v10;
    if (v11 <= v8) {
      unsigned int v12 = v8;
    }
    else {
      unsigned int v12 = v11;
    }
    uint64_t v13 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 8 * v12, "Vector Storage (GLPASTNode *, growth)");
    memcpy(v13, *(const void **)(a2 + 8), 8 * *(unsigned int *)(a2 + 4));
    ((void (*)(void, void))a1[3])(*a1, *(void *)(a2 + 8));
    *(_DWORD *)a2 = v12;
    *(void *)(a2 + 8) = v13;
    int v7 = *(_DWORD *)(a2 + 4);
  }
  unsigned int v14 = a4 + 2;
  __n128 result = memmove(&v13[8 * v14 + 8], &v13[8 * v14], 8 * (v7 - v14));
  *(void *)(*(void *)(a2 + 8) + 8 * v14) = a3;
  ++*(_DWORD *)(a2 + 4);
  ++*(_DWORD *)(a2 + 88);
  return result;
}

__n128 glpMakeVariableDeclarationNode(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 112, "AST Node (VariableDeclaration)");
  *(void *)(v9 + 8) = v9 + 96;
  *(_DWORD *)uint64_t v9 = 2;
  unint64_t v10 = a2[1].n128_u64[0];
  __n128 result = *a2;
  *(_DWORD *)(v9 + 4) = 0;
  *(_DWORD *)(v9 + 16) = 46;
  *(void *)(v9 + 24) = 0;
  *(void *)(v9 + 32) = 0;
  *(__n128 *)(v9 + 40) = result;
  *(void *)(v9 + --*(void *)(result + 56) = v10;
  *(void *)(v9 + 64) = a3;
  *(void *)(v9 + 72) = a4;
  *(unsigned char *)(v9 + 80) = a5;
  *(void *)(v9 + 88) = 0;
  **(void **)(v9 + 8) = 0;
  LODWORD(v10) = *(_DWORD *)(v9 + 4) + 1;
  *(_DWORD *)(v9 + 4) = v10;
  *(void *)(*(void *)(v9 + 8) + 8 * v10) = 0;
  ++*(_DWORD *)(v9 + 4);
  return result;
}

BOOL glpIsVariableDeclarationNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 46;
}

uint64_t glpVariableDeclarationNodeGetName(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t glpVariableDeclarationNodeSetName(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 64) = a2;
  *(void *)(result + 72) = a3;
  return result;
}

uint64_t glpVariableDeclarationNodeGetIsFromSource(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

uint64_t glpVariableDeclarationNodeGetExtra(uint64_t a1)
{
  return *(void *)(a1 + 88);
}

uint64_t glpVariableDeclarationNodeSetExtra(uint64_t result, uint64_t a2)
{
  *(void *)(result + 88) = a2;
  return result;
}

uint64_t glpVariableDeclarationNodeGetType(uint64_t a1)
{
  return **(void **)(a1 + 8);
}

uint64_t glpVariableDeclarationNodeSetType(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

uint64_t glpVariableDeclarationNodeGetInitializer(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 8);
}

uint64_t glpVariableDeclarationNodeSetInitializer(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 8) + 8) = a2;
  return result;
}

__n128 glpMakeVariableDeclarationGroupNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 88, "AST Node (VariableDeclarationGroup)");
  *(void *)(v3 + 8) = v3 + 72;
  *(_DWORD *)uint64_t v3 = 2;
  unint64_t v4 = a2[1].n128_u64[0];
  __n128 result = *a2;
  *(_DWORD *)(v3 + 4) = 0;
  *(_DWORD *)(v3 + 16) = 47;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  *(__n128 *)(v3 + 40) = result;
  *(void *)(v3 + --*(void *)(result + 56) = v4;
  **(void **)(v3 + 8) = 0;
  ++*(_DWORD *)(v3 + 4);
  *(_DWORD *)(v3 + 64) = 0;
  return result;
}

uint64_t glpVariableDeclarationGroupNodeGetBaseType(uint64_t a1)
{
  return **(void **)(a1 + 8);
}

uint64_t glpVariableDeclarationGroupNodeSetBaseType(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

uint64_t glpVariableDeclarationGroupNodeGetDeclarationCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t glpVariableDeclarationGroupNodeGetDeclaration(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(a1 + 8) + 8 * (a2 + 1));
}

uint64_t glpVariableDeclarationGroupNodeSetDeclaration(uint64_t result, int a2, uint64_t a3)
{
  *(void *)(*(void *)(result + 8) + 8 * (a2 + 1)) = a3;
  return result;
}

void *glpVariableDeclarationGroupNodeAddDeclaration(void *a1, uint64_t a2, uint64_t a3)
{
  return glpVariableDeclarationGroupNodeInsertDeclaration(a1, a2, a3, *(_DWORD *)(a2 + 64));
}

void *glpVariableDeclarationGroupNodeInsertDeclaration(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v7 = *(_DWORD *)(a2 + 4);
  int v8 = v7 + 1;
  if ((v7 + 1) <= *(_DWORD *)a2)
  {
    uint64_t v13 = *(char **)(a2 + 8);
  }
  else
  {
    if (*(int *)a2 <= 1) {
      int v10 = 1;
    }
    else {
      int v10 = *(_DWORD *)a2;
    }
    int v11 = 2 * v10;
    if (v11 <= v8) {
      unsigned int v12 = v8;
    }
    else {
      unsigned int v12 = v11;
    }
    uint64_t v13 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 8 * v12, "Vector Storage (GLPASTNode *, growth)");
    memcpy(v13, *(const void **)(a2 + 8), 8 * *(unsigned int *)(a2 + 4));
    ((void (*)(void, void))a1[3])(*a1, *(void *)(a2 + 8));
    *(_DWORD *)a2 = v12;
    *(void *)(a2 + 8) = v13;
    int v7 = *(_DWORD *)(a2 + 4);
  }
  unsigned int v14 = a4 + 1;
  __n128 result = memmove(&v13[8 * v14 + 8], &v13[8 * v14], 8 * (v7 - v14));
  *(void *)(*(void *)(a2 + 8) + 8 * v14) = a3;
  ++*(_DWORD *)(a2 + 4);
  ++*(_DWORD *)(a2 + 64);
  return result;
}

__n128 glpMakePrecisionDeclarationNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (PrecisionDeclaration)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 2;
  unint64_t v4 = a2[1].n128_u64[0];
  __n128 result = *a2;
  *(_DWORD *)(v3 + 4) = 0;
  *(_DWORD *)(v3 + 16) = 48;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  *(__n128 *)(v3 + 40) = result;
  *(void *)(v3 + --*(void *)(result + 56) = v4;
  **(void **)(v3 + 8) = 0;
  LODWORD(v4) = *(_DWORD *)(v3 + 4) + 1;
  *(_DWORD *)(v3 + 4) = v4;
  *(void *)(*(void *)(v3 + 8) + 8 * v4) = 0;
  ++*(_DWORD *)(v3 + 4);
  return result;
}

uint64_t glpPrecisionDeclarationNodeGetQualifier(uint64_t a1)
{
  return **(void **)(a1 + 8);
}

uint64_t glpPrecisionDeclarationNodeSetQualifier(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

uint64_t glpPrecisionDeclarationNodeGetType(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 8);
}

uint64_t glpPrecisionDeclarationNodeSetType(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 8) + 8) = a2;
  return result;
}

__n128 glpMakeQualifiedDeclarationNode(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 88, "AST Node (QualifiedDeclaration)");
  *(void *)(v7 + 8) = v7 + 80;
  *(_DWORD *)uint64_t v7 = 1;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 result = *a2;
  *(_DWORD *)(v7 + 4) = 0;
  *(_DWORD *)(v7 + 16) = 49;
  *(void *)(v7 + 24) = 0;
  *(void *)(v7 + 32) = 0;
  *(__n128 *)(v7 + 40) = result;
  *(void *)(v7 + --*(void *)(result + 56) = v8;
  *(void *)(v7 + 64) = a3;
  *(void *)(v7 + 72) = a4;
  **(void **)(v7 + 8) = 0;
  ++*(_DWORD *)(v7 + 4);
  return result;
}

uint64_t glpQualifiedDeclarationNodeGetName(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t glpQualifiedDeclarationNodeGetQualifiers(uint64_t a1)
{
  return **(void **)(a1 + 8);
}

uint64_t glpQualifiedDeclarationNodeSetQualifiers(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

__n128 glpMakeQualifiedDeclarationGroupNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (QualifiedDeclarationGroup)");
  *(void *)(v3 + 8) = v3 + 72;
  *(_DWORD *)uint64_t v3 = 1;
  unint64_t v4 = a2[1].n128_u64[0];
  __n128 result = *a2;
  *(_DWORD *)(v3 + 4) = 0;
  *(_DWORD *)(v3 + 16) = 50;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  *(__n128 *)(v3 + 40) = result;
  *(void *)(v3 + --*(void *)(result + 56) = v4;
  *(_DWORD *)(v3 + 64) = 0;
  return result;
}

uint64_t glpQualifiedDeclarationGroupNodeGetDeclarationCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t glpQualifiedDeclarationGroupNodeGetDeclaration(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 8) + 8 * a2);
}

uint64_t glpQualifiedDeclarationGroupNodeSetDeclaration(uint64_t result, unsigned int a2, uint64_t a3)
{
  *(void *)(*(void *)(result + 8) + 8 * a2) = a3;
  return result;
}

void *glpQualifiedDeclarationGroupNodeAddDeclaration(void *a1, uint64_t a2, uint64_t a3)
{
  return glpQualifiedDeclarationGroupNodeInsertDeclaration(a1, a2, a3, *(_DWORD *)(a2 + 64));
}

void *glpQualifiedDeclarationGroupNodeInsertDeclaration(void *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7 = *(_DWORD *)(a2 + 4);
  int v8 = v7 + 1;
  if ((v7 + 1) <= *(_DWORD *)a2)
  {
    uint64_t v13 = *(char **)(a2 + 8);
  }
  else
  {
    if (*(int *)a2 <= 1) {
      int v10 = 1;
    }
    else {
      int v10 = *(_DWORD *)a2;
    }
    int v11 = 2 * v10;
    if (v11 <= v8) {
      unsigned int v12 = v8;
    }
    else {
      unsigned int v12 = v11;
    }
    uint64_t v13 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 8 * v12, "Vector Storage (GLPASTNode *, growth)");
    memcpy(v13, *(const void **)(a2 + 8), 8 * *(unsigned int *)(a2 + 4));
    ((void (*)(void, void))a1[3])(*a1, *(void *)(a2 + 8));
    *(_DWORD *)a2 = v12;
    *(void *)(a2 + 8) = v13;
    int v7 = *(_DWORD *)(a2 + 4);
  }
  __n128 result = memmove(&v13[8 * a4 + 8], &v13[8 * a4], 8 * (v7 - a4));
  *(void *)(*(void *)(a2 + 8) + 8 * a4) = a3;
  ++*(_DWORD *)(a2 + 4);
  ++*(_DWORD *)(a2 + 64);
  return result;
}

__n128 glpMakeFunctionDefinitionNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (FunctionDefinition)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 2;
  unint64_t v4 = a2[1].n128_u64[0];
  __n128 result = *a2;
  *(_DWORD *)(v3 + 4) = 0;
  *(_DWORD *)(v3 + 16) = 51;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  *(__n128 *)(v3 + 40) = result;
  *(void *)(v3 + --*(void *)(result + 56) = v4;
  **(void **)(v3 + 8) = 0;
  LODWORD(v4) = *(_DWORD *)(v3 + 4) + 1;
  *(_DWORD *)(v3 + 4) = v4;
  *(void *)(*(void *)(v3 + 8) + 8 * v4) = 0;
  ++*(_DWORD *)(v3 + 4);
  return result;
}

BOOL glpIsFunctionDefinitionNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 51;
}

uint64_t glpFunctionDefinitionNodeGetPrototype(uint64_t a1)
{
  return **(void **)(a1 + 8);
}

uint64_t glpFunctionDefinitionNodeSetPrototype(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

uint64_t glpFunctionDefinitionNodeGetBody(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 8);
}

uint64_t glpFunctionDefinitionNodeSetBody(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 8) + 8) = a2;
  return result;
}

__n128 glpMakeQualifiedTypeNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (QualifiedType)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 2;
  unint64_t v4 = a2[1].n128_u64[0];
  __n128 result = *a2;
  *(_DWORD *)(v3 + 4) = 0;
  *(_DWORD *)(v3 + 16) = 52;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  *(__n128 *)(v3 + 40) = result;
  *(void *)(v3 + --*(void *)(result + 56) = v4;
  **(void **)(v3 + 8) = 0;
  LODWORD(v4) = *(_DWORD *)(v3 + 4) + 1;
  *(_DWORD *)(v3 + 4) = v4;
  *(void *)(*(void *)(v3 + 8) + 8 * v4) = 0;
  ++*(_DWORD *)(v3 + 4);
  return result;
}

BOOL glpIsQualifiedTypeNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 52;
}

uint64_t glpQualifiedTypeNodeGetType(uint64_t a1)
{
  return **(void **)(a1 + 8);
}

uint64_t glpQualifiedTypeNodeSetType(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

uint64_t glpQualifiedTypeNodeGetQualifiers(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 8);
}

uint64_t glpQualifiedTypeNodeSetQualifiers(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 8) + 8) = a2;
  return result;
}

__n128 glpMakePrimitiveTypeNode(uint64_t a1, __n128 *a2, int a3)
{
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 72, "AST Node (PrimitiveType)");
  *(void *)(v5 + 8) = v5 + 72;
  *(_DWORD *)uint64_t v5 = 0;
  unint64_t v6 = a2[1].n128_u64[0];
  __n128 result = *a2;
  *(_DWORD *)(v5 + 4) = 0;
  *(_DWORD *)(v5 + 16) = 53;
  *(void *)(v5 + 24) = 0;
  *(void *)(v5 + 32) = 0;
  *(__n128 *)(v5 + 40) = result;
  *(void *)(v5 + --*(void *)(result + 56) = v6;
  *(_DWORD *)(v5 + 64) = a3;
  return result;
}

BOOL glpIsPrimitiveTypeNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 53;
}

uint64_t glpPrimitiveTypeNodeGetType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

__n128 glpMakeArrayTypeNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (ArrayType)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 2;
  unint64_t v4 = a2[1].n128_u64[0];
  __n128 result = *a2;
  *(_DWORD *)(v3 + 4) = 0;
  *(_DWORD *)(v3 + 16) = 54;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  *(__n128 *)(v3 + 40) = result;
  *(void *)(v3 + --*(void *)(result + 56) = v4;
  **(void **)(v3 + 8) = 0;
  LODWORD(v4) = *(_DWORD *)(v3 + 4) + 1;
  *(_DWORD *)(v3 + 4) = v4;
  *(void *)(*(void *)(v3 + 8) + 8 * v4) = 0;
  ++*(_DWORD *)(v3 + 4);
  return result;
}

BOOL glpIsArrayTypeNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 54;
}

uint64_t glpArrayTypeNodeGetElementType(uint64_t a1)
{
  return **(void **)(a1 + 8);
}

uint64_t glpArrayTypeNodeSetElementType(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

uint64_t glpArrayTypeNodeGetDimension(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 8);
}

uint64_t glpArrayTypeNodeSetDimension(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 8) + 8) = a2;
  return result;
}

__n128 glpMakeFieldDeclarationNode(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 88, "AST Node (FieldDeclaration)");
  *(void *)(v7 + 8) = v7 + 80;
  *(_DWORD *)uint64_t v7 = 1;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 result = *a2;
  *(_DWORD *)(v7 + 4) = 0;
  *(_DWORD *)(v7 + 16) = 55;
  *(void *)(v7 + 24) = 0;
  *(void *)(v7 + 32) = 0;
  *(__n128 *)(v7 + 40) = result;
  *(void *)(v7 + --*(void *)(result + 56) = v8;
  *(void *)(v7 + 64) = a3;
  *(void *)(v7 + 72) = a4;
  **(void **)(v7 + 8) = 0;
  ++*(_DWORD *)(v7 + 4);
  return result;
}

uint64_t glpFieldDeclarationNodeGetName(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t glpFieldDeclarationNodeGetType(uint64_t a1)
{
  return **(void **)(a1 + 8);
}

uint64_t glpFieldDeclarationNodeSetType(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

uint64_t glpMakeStructTypeNode(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 96, "AST Node (StructType)");
  *(void *)(v7 + 8) = v7 + 88;
  *(_DWORD *)uint64_t v7 = 1;
  __n128 v9 = *a2;
  unint64_t v10 = a2[1].n128_u64[0];
  initStructureNode(v7, 56, &v9);
  *(void *)(v7 + 72) = a3;
  *(void *)(v7 + 80) = a4;
  return v7;
}

BOOL glpIsStructTypeNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 56;
}

uint64_t glpStructTypeNodeGetName(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t glpMakeInterfaceBlockNode(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8, uint64_t a9)
{
  uint64_t v16 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 144, "AST Node (InterfaceBlock)");
  *(void *)(v16 + 8) = v16 + 120;
  *(_DWORD *)uint64_t v16 = 3;
  __n128 v19 = *a2;
  unint64_t v20 = a2[1].n128_u64[0];
  initStructureNode(v16, 57, &v19);
  *(void *)(v16 + 72) = a3;
  *(void *)(v16 + 80) = a4;
  *(void *)(v16 + 88) = a5;
  *(void *)(v16 + 96) = a6;
  *(unsigned char *)(v16 + 104) = a7;
  *(unsigned char *)(v16 + 105) = a8;
  *(void *)(v16 + 112) = a9;
  *(void *)(*(void *)(v16 + 8) + 8 * *(unsigned int *)(v16 + 4)) = 0;
  unsigned int v17 = *(_DWORD *)(v16 + 4) + 1;
  *(_DWORD *)(v16 + 4) = v17;
  *(void *)(*(void *)(v16 + 8) + 8 * v17) = 0;
  ++*(_DWORD *)(v16 + 4);
  return v16;
}

BOOL glpIsInterfaceBlockNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 57;
}

uint64_t glpInterfaceBlockNodeGetBlockName(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t glpInterfaceBlockNodeGetInstanceName(uint64_t a1)
{
  return *(void *)(a1 + 88);
}

uint64_t glpInterfaceBlockNodeGetHasInstanceName(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 104);
}

uint64_t glpInterfaceBlockNodeGetIsArray(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 105);
}

uint64_t glpInterfaceBlockNodeGetExtra(uint64_t a1)
{
  return *(void *)(a1 + 112);
}

uint64_t glpInterfaceBlockNodeSetExtra(uint64_t result, uint64_t a2)
{
  *(void *)(result + 112) = a2;
  return result;
}

uint64_t glpInterfaceBlockNodeGetQualifiers(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 8 * *(unsigned int *)(a1 + 64));
}

uint64_t glpInterfaceBlockNodeSetQualifiers(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 8) + 8 * *(unsigned int *)(result + 64)) = a2;
  return result;
}

uint64_t glpInterfaceBlockNodeGetDimension(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 8 * (*(_DWORD *)(a1 + 64) + 1));
}

uint64_t glpInterfaceBlockNodeSetDimension(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 8) + 8 * (*(_DWORD *)(result + 64) + 1)) = a2;
  return result;
}

__n128 glpMakeLayoutTypeNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (LayoutType)");
  *(void *)(v3 + 8) = v3 + 72;
  *(_DWORD *)uint64_t v3 = 1;
  unint64_t v4 = a2[1].n128_u64[0];
  __n128 result = *a2;
  *(_DWORD *)(v3 + 4) = 0;
  *(_DWORD *)(v3 + 16) = 58;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  *(__n128 *)(v3 + 40) = result;
  *(void *)(v3 + --*(void *)(result + 56) = v4;
  *(_DWORD *)(v3 + 64) = 0;
  return result;
}

uint64_t glpLayoutTypeNodeGetLayoutPairCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t glpLayoutTypeNodeGetLayoutPair(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 8) + 8 * a2);
}

uint64_t glpLayoutTypeNodeSetLayoutPair(uint64_t result, unsigned int a2, uint64_t a3)
{
  *(void *)(*(void *)(result + 8) + 8 * a2) = a3;
  return result;
}

void *glpLayoutTypeNodeAddLayoutPair(void *a1, uint64_t a2, uint64_t a3)
{
  return glpLayoutTypeNodeInsertLayoutPair(a1, a2, a3, *(_DWORD *)(a2 + 64));
}

void *glpLayoutTypeNodeInsertLayoutPair(void *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7 = *(_DWORD *)(a2 + 4);
  int v8 = v7 + 1;
  if ((v7 + 1) <= *(_DWORD *)a2)
  {
    uint64_t v13 = *(char **)(a2 + 8);
  }
  else
  {
    if (*(int *)a2 <= 1) {
      int v10 = 1;
    }
    else {
      int v10 = *(_DWORD *)a2;
    }
    int v11 = 2 * v10;
    if (v11 <= v8) {
      unsigned int v12 = v8;
    }
    else {
      unsigned int v12 = v11;
    }
    uint64_t v13 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 8 * v12, "Vector Storage (GLPASTNode *, growth)");
    memcpy(v13, *(const void **)(a2 + 8), 8 * *(unsigned int *)(a2 + 4));
    ((void (*)(void, void))a1[3])(*a1, *(void *)(a2 + 8));
    *(_DWORD *)a2 = v12;
    *(void *)(a2 + 8) = v13;
    int v7 = *(_DWORD *)(a2 + 4);
  }
  __n128 result = memmove(&v13[8 * a4 + 8], &v13[8 * a4], 8 * (v7 - a4));
  *(void *)(*(void *)(a2 + 8) + 8 * a4) = a3;
  ++*(_DWORD *)(a2 + 4);
  ++*(_DWORD *)(a2 + 64);
  return result;
}

uint64_t glpMakeKeywordQualifierNode(uint64_t a1, __n128 *a2, int a3)
{
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 72, "AST Node (KeywordQualifier)");
  *(void *)(v5 + 8) = v5 + 72;
  *(_DWORD *)uint64_t v5 = 0;
  __n128 v7 = *a2;
  unint64_t v8 = a2[1].n128_u64[0];
  initQualifierNode(v5, 59, &v7);
  *(_DWORD *)(v5 + 64) = a3;
  return v5;
}

BOOL glpIsKeywordQualifierNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 59;
}

uint64_t glpKeywordQualifierNodeGetQualifier(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t glpMakeLayoutQualifierNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (LayoutQualifier)");
  *(void *)(v3 + 8) = v3 + 72;
  *(_DWORD *)uint64_t v3 = 1;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initQualifierNode(v3, 60, &v5);
  *(_DWORD *)(v3 + 64) = 0;
  return v3;
}

BOOL glpIsLayoutQualifierNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 60;
}

uint64_t glpLayoutQualifierNodeGetLayoutPairCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t glpLayoutQualifierNodeGetLayoutPair(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 8) + 8 * a2);
}

uint64_t glpLayoutQualifierNodeSetLayoutPair(uint64_t result, unsigned int a2, uint64_t a3)
{
  *(void *)(*(void *)(result + 8) + 8 * a2) = a3;
  return result;
}

void *glpLayoutQualifierNodeAddLayoutPair(void *a1, uint64_t a2, uint64_t a3)
{
  return glpLayoutQualifierNodeInsertLayoutPair(a1, a2, a3, *(_DWORD *)(a2 + 64));
}

void *glpLayoutQualifierNodeInsertLayoutPair(void *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7 = *(_DWORD *)(a2 + 4);
  int v8 = v7 + 1;
  if ((v7 + 1) <= *(_DWORD *)a2)
  {
    uint64_t v13 = *(char **)(a2 + 8);
  }
  else
  {
    if (*(int *)a2 <= 1) {
      int v10 = 1;
    }
    else {
      int v10 = *(_DWORD *)a2;
    }
    int v11 = 2 * v10;
    if (v11 <= v8) {
      unsigned int v12 = v8;
    }
    else {
      unsigned int v12 = v11;
    }
    uint64_t v13 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 8 * v12, "Vector Storage (GLPASTNode *, growth)");
    memcpy(v13, *(const void **)(a2 + 8), 8 * *(unsigned int *)(a2 + 4));
    ((void (*)(void, void))a1[3])(*a1, *(void *)(a2 + 8));
    *(_DWORD *)a2 = v12;
    *(void *)(a2 + 8) = v13;
    int v7 = *(_DWORD *)(a2 + 4);
  }
  __n128 result = memmove(&v13[8 * a4 + 8], &v13[8 * a4], 8 * (v7 - a4));
  *(void *)(*(void *)(a2 + 8) + 8 * a4) = a3;
  ++*(_DWORD *)(a2 + 4);
  ++*(_DWORD *)(a2 + 64);
  return result;
}

uint64_t glpMakeSubroutineTypeListNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (SubroutineTypeList)");
  *(void *)(v3 + 8) = v3 + 72;
  *(_DWORD *)uint64_t v3 = 1;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initQualifierNode(v3, 61, &v5);
  *(_DWORD *)(v3 + 64) = 0;
  return v3;
}

BOOL glpIsSubroutineTypeListNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 61;
}

uint64_t glpSubroutineTypeListNodeGetTypeCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t glpSubroutineTypeListNodeGetType(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 8) + 8 * a2);
}

uint64_t glpSubroutineTypeListNodeSetType(uint64_t result, unsigned int a2, uint64_t a3)
{
  *(void *)(*(void *)(result + 8) + 8 * a2) = a3;
  return result;
}

void *glpSubroutineTypeListNodeAddType(void *a1, uint64_t a2, uint64_t a3)
{
  return glpSubroutineTypeListNodeInsertType(a1, a2, a3, *(_DWORD *)(a2 + 64));
}

void *glpSubroutineTypeListNodeInsertType(void *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7 = *(_DWORD *)(a2 + 4);
  int v8 = v7 + 1;
  if ((v7 + 1) <= *(_DWORD *)a2)
  {
    uint64_t v13 = *(char **)(a2 + 8);
  }
  else
  {
    if (*(int *)a2 <= 1) {
      int v10 = 1;
    }
    else {
      int v10 = *(_DWORD *)a2;
    }
    int v11 = 2 * v10;
    if (v11 <= v8) {
      unsigned int v12 = v8;
    }
    else {
      unsigned int v12 = v11;
    }
    uint64_t v13 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 8 * v12, "Vector Storage (GLPASTNode *, growth)");
    memcpy(v13, *(const void **)(a2 + 8), 8 * *(unsigned int *)(a2 + 4));
    ((void (*)(void, void))a1[3])(*a1, *(void *)(a2 + 8));
    *(_DWORD *)a2 = v12;
    *(void *)(a2 + 8) = v13;
    int v7 = *(_DWORD *)(a2 + 4);
  }
  __n128 result = memmove(&v13[8 * a4 + 8], &v13[8 * a4], 8 * (v7 - a4));
  *(void *)(*(void *)(a2 + 8) + 8 * a4) = a3;
  ++*(_DWORD *)(a2 + 4);
  ++*(_DWORD *)(a2 + 64);
  return result;
}

__n128 glpMakeQualifierListNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (QualifierList)");
  *(void *)(v3 + 8) = v3 + 72;
  *(_DWORD *)uint64_t v3 = 1;
  unint64_t v4 = a2[1].n128_u64[0];
  __n128 result = *a2;
  *(_DWORD *)(v3 + 4) = 0;
  *(_DWORD *)(v3 + 16) = 62;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  *(__n128 *)(v3 + 40) = result;
  *(void *)(v3 + --*(void *)(result + 56) = v4;
  *(_DWORD *)(v3 + 64) = 0;
  return result;
}

BOOL glpIsQualifierListNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 62;
}

uint64_t glpQualifierListNodeGetQualifierCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t glpQualifierListNodeGetQualifier(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 8) + 8 * a2);
}

uint64_t glpQualifierListNodeSetQualifier(uint64_t result, unsigned int a2, uint64_t a3)
{
  *(void *)(*(void *)(result + 8) + 8 * a2) = a3;
  return result;
}

void *glpQualifierListNodeAddQualifier(void *a1, uint64_t a2, uint64_t a3)
{
  return glpQualifierListNodeInsertQualifier(a1, a2, a3, *(_DWORD *)(a2 + 64));
}

void *glpQualifierListNodeInsertQualifier(void *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7 = *(_DWORD *)(a2 + 4);
  int v8 = v7 + 1;
  if ((v7 + 1) <= *(_DWORD *)a2)
  {
    uint64_t v13 = *(char **)(a2 + 8);
  }
  else
  {
    if (*(int *)a2 <= 1) {
      int v10 = 1;
    }
    else {
      int v10 = *(_DWORD *)a2;
    }
    int v11 = 2 * v10;
    if (v11 <= v8) {
      unsigned int v12 = v8;
    }
    else {
      unsigned int v12 = v11;
    }
    uint64_t v13 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 8 * v12, "Vector Storage (GLPASTNode *, growth)");
    memcpy(v13, *(const void **)(a2 + 8), 8 * *(unsigned int *)(a2 + 4));
    ((void (*)(void, void))a1[3])(*a1, *(void *)(a2 + 8));
    *(_DWORD *)a2 = v12;
    *(void *)(a2 + 8) = v13;
    int v7 = *(_DWORD *)(a2 + 4);
  }
  __n128 result = memmove(&v13[8 * a4 + 8], &v13[8 * a4], 8 * (v7 - a4));
  *(void *)(*(void *)(a2 + 8) + 8 * a4) = a3;
  ++*(_DWORD *)(a2 + 4);
  ++*(_DWORD *)(a2 + 64);
  return result;
}

__n128 glpMakeGlobalTypeQualifierNode(uint64_t a1, __n128 *a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (GlobalTypeQualifier)");
  *(void *)(v5 + 8) = v5 + 72;
  *(_DWORD *)uint64_t v5 = 1;
  unint64_t v6 = a2[1].n128_u64[0];
  __n128 result = *a2;
  *(_DWORD *)(v5 + 4) = 0;
  *(_DWORD *)(v5 + 16) = 63;
  *(void *)(v5 + 24) = 0;
  *(void *)(v5 + 32) = 0;
  *(__n128 *)(v5 + 40) = result;
  *(void *)(v5 + --*(void *)(result + 56) = v6;
  *(void *)(v5 + 64) = a3;
  **(void **)(v5 + 8) = 0;
  ++*(_DWORD *)(v5 + 4);
  return result;
}

uint64_t glpGlobalTypeQualifierNodeGetLayout(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t glpGlobalTypeQualifierNodeSetLayout(uint64_t result, uint64_t a2)
{
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t glpGlobalTypeQualifierNodeGetQualifierList(uint64_t a1)
{
  return **(void **)(a1 + 8);
}

uint64_t glpGlobalTypeQualifierNodeSetQualifierList(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

__n128 glpMakeLayoutPairNode(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 112, "AST Node (LayoutPair)");
  *(void *)(v15 + 8) = v15 + 104;
  *(_DWORD *)uint64_t v15 = 1;
  unint64_t v16 = a2[1].n128_u64[0];
  __n128 result = *a2;
  *(_DWORD *)(v15 + 4) = 0;
  *(_DWORD *)(v15 + 16) = 64;
  *(void *)(v15 + 24) = 0;
  *(void *)(v15 + 32) = 0;
  *(__n128 *)(v15 + 40) = result;
  *(void *)(v15 + --*(void *)(result + 56) = v16;
  *(void *)(v15 + 64) = a3;
  *(void *)(v15 + 72) = a4;
  *(_DWORD *)(v15 + 80) = a5;
  *(_DWORD *)(v15 + 84) = a6;
  *(void *)(v15 + 88) = a7;
  *(void *)(v15 + 96) = a8;
  **(void **)(v15 + 8) = 0;
  ++*(_DWORD *)(v15 + 4);
  return result;
}

uint64_t glpLayoutPairNodeGetIdentifier(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t glpLayoutPairNodeGetValueKind(uint64_t a1)
{
  return *(unsigned int *)(a1 + 80);
}

uint64_t glpLayoutPairNodeGetValue(uint64_t a1)
{
  return *(unsigned int *)(a1 + 84);
}

uint64_t glpLayoutPairNodeGetString(uint64_t a1)
{
  return *(void *)(a1 + 88);
}

uint64_t glpLayoutPairNodeGetType(uint64_t a1)
{
  return **(void **)(a1 + 8);
}

uint64_t glpLayoutPairNodeSetType(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

uint64_t glpMakeExpressionStatementNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 72, "AST Node (ExpressionStatement)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 1;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initStatementNode(v3, 65, &v5);
  *(void *)(*(void *)(v3 + 8) + 8 * (*(_DWORD *)(v3 + 4))++) = 0;
  return v3;
}

uint64_t glpExpressionStatementNodeGetExpr(uint64_t a1)
{
  return **(void **)(a1 + 8);
}

uint64_t glpExpressionStatementNodeSetExpr(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

uint64_t glpMakeBlockNode(uint64_t a1, __n128 *a2, char a3)
{
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (Block)");
  *(void *)(v5 + 8) = v5 + 72;
  *(_DWORD *)uint64_t v5 = 1;
  __n128 v7 = *a2;
  unint64_t v8 = a2[1].n128_u64[0];
  initStatementNode(v5, 66, &v7);
  *(unsigned char *)(v5 + 64) = a3;
  *(_DWORD *)(v5 + 68) = 0;
  return v5;
}

uint64_t glpBlockNodeGetNeedsNewScope(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

uint64_t glpBlockNodeSetNeedsNewScope(uint64_t result, char a2)
{
  *(unsigned char *)(result + 64) = a2;
  return result;
}

uint64_t glpBlockNodeGetStatementCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 68);
}

uint64_t glpBlockNodeGetStatement(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 8) + 8 * a2);
}

uint64_t glpBlockNodeSetStatement(uint64_t result, unsigned int a2, uint64_t a3)
{
  *(void *)(*(void *)(result + 8) + 8 * a2) = a3;
  return result;
}

void *glpBlockNodeAddStatement(void *a1, uint64_t a2, uint64_t a3)
{
  return glpBlockNodeInsertStatement(a1, a2, a3, *(_DWORD *)(a2 + 68));
}

void *glpBlockNodeInsertStatement(void *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7 = *(_DWORD *)(a2 + 4);
  int v8 = v7 + 1;
  if ((v7 + 1) <= *(_DWORD *)a2)
  {
    uint64_t v13 = *(char **)(a2 + 8);
  }
  else
  {
    if (*(int *)a2 <= 1) {
      int v10 = 1;
    }
    else {
      int v10 = *(_DWORD *)a2;
    }
    int v11 = 2 * v10;
    if (v11 <= v8) {
      unsigned int v12 = v8;
    }
    else {
      unsigned int v12 = v11;
    }
    uint64_t v13 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 8 * v12, "Vector Storage (GLPASTNode *, growth)");
    memcpy(v13, *(const void **)(a2 + 8), 8 * *(unsigned int *)(a2 + 4));
    ((void (*)(void, void))a1[3])(*a1, *(void *)(a2 + 8));
    *(_DWORD *)a2 = v12;
    *(void *)(a2 + 8) = v13;
    int v7 = *(_DWORD *)(a2 + 4);
  }
  __n128 result = memmove(&v13[8 * a4 + 8], &v13[8 * a4], 8 * (v7 - a4));
  *(void *)(*(void *)(a2 + 8) + 8 * a4) = a3;
  ++*(_DWORD *)(a2 + 4);
  ++*(_DWORD *)(a2 + 68);
  return result;
}

uint64_t glpMakeIfStatementNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 88, "AST Node (IfStatement)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 3;
  __n128 v7 = *a2;
  unint64_t v8 = a2[1].n128_u64[0];
  initStatementNode(v3, 67, &v7);
  *(void *)(*(void *)(v3 + 8) + 8 * *(unsigned int *)(v3 + 4)) = 0;
  unsigned int v4 = *(_DWORD *)(v3 + 4) + 1;
  *(_DWORD *)(v3 + 4) = v4;
  *(void *)(*(void *)(v3 + 8) + 8 * v4) = 0;
  unsigned int v5 = *(_DWORD *)(v3 + 4) + 1;
  *(_DWORD *)(v3 + 4) = v5;
  *(void *)(*(void *)(v3 + 8) + 8 * v5) = 0;
  ++*(_DWORD *)(v3 + 4);
  return v3;
}

uint64_t glpIfStatementNodeGetCond(uint64_t a1)
{
  return **(void **)(a1 + 8);
}

uint64_t glpIfStatementNodeSetCond(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

uint64_t glpIfStatementNodeGetIfStatement(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 8);
}

uint64_t glpIfStatementNodeSetIfStatement(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 8) + 8) = a2;
  return result;
}

uint64_t glpIfStatementNodeGetElseStatement(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 16);
}

uint64_t glpIfStatementNodeSetElseStatement(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 8) + 16) = a2;
  return result;
}

uint64_t glpMakeLoopStatementNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (LoopStatement)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 2;
  __n128 v6 = *a2;
  unint64_t v7 = a2[1].n128_u64[0];
  initStatementNode(v3, 68, &v6);
  *(void *)(*(void *)(v3 + 8) + 8 * *(unsigned int *)(v3 + 4)) = 0;
  unsigned int v4 = *(_DWORD *)(v3 + 4) + 1;
  *(_DWORD *)(v3 + 4) = v4;
  *(void *)(*(void *)(v3 + 8) + 8 * v4) = 0;
  ++*(_DWORD *)(v3 + 4);
  return v3;
}

uint64_t glpLoopStatementNodeGetBody0(uint64_t a1)
{
  return **(void **)(a1 + 8);
}

uint64_t glpLoopStatementNodeSetBody0(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

uint64_t glpLoopStatementNodeGetBody1(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 8);
}

uint64_t glpLoopStatementNodeSetBody1(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 8) + 8) = a2;
  return result;
}

uint64_t glpMakeSwitchStatementNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (SwitchStatement)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 2;
  __n128 v6 = *a2;
  unint64_t v7 = a2[1].n128_u64[0];
  initStatementNode(v3, 69, &v6);
  *(void *)(*(void *)(v3 + 8) + 8 * *(unsigned int *)(v3 + 4)) = 0;
  unsigned int v4 = *(_DWORD *)(v3 + 4) + 1;
  *(_DWORD *)(v3 + 4) = v4;
  *(void *)(*(void *)(v3 + 8) + 8 * v4) = 0;
  ++*(_DWORD *)(v3 + 4);
  return v3;
}

uint64_t glpSwitchStatementNodeGetExpr(uint64_t a1)
{
  return **(void **)(a1 + 8);
}

uint64_t glpSwitchStatementNodeSetExpr(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

uint64_t glpSwitchStatementNodeGetBody(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 8);
}

uint64_t glpSwitchStatementNodeSetBody(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 8) + 8) = a2;
  return result;
}

uint64_t glpMakeCaseStatementNode(uint64_t a1, __n128 *a2, char a3)
{
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (CaseStatement)");
  *(void *)(v5 + 8) = v5 + 72;
  *(_DWORD *)uint64_t v5 = 1;
  __n128 v7 = *a2;
  unint64_t v8 = a2[1].n128_u64[0];
  initStatementNode(v5, 70, &v7);
  *(unsigned char *)(v5 + 64) = a3;
  *(void *)(*(void *)(v5 + 8) + 8 * (*(_DWORD *)(v5 + 4))++) = 0;
  return v5;
}

BOOL glpIsCaseStatementNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 70;
}

uint64_t glpCaseStatementNodeGetIsStray(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

uint64_t glpCaseStatementNodeSetIsStray(uint64_t result, char a2)
{
  *(unsigned char *)(result + 64) = a2;
  return result;
}

uint64_t glpCaseStatementNodeGetConstValue(uint64_t a1)
{
  return **(void **)(a1 + 8);
}

uint64_t glpCaseStatementNodeSetConstValue(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

uint64_t glpMakeDefaultStatementNode(uint64_t a1, __n128 *a2, char a3)
{
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 72, "AST Node (DefaultStatement)");
  *(void *)(v5 + 8) = v5 + 72;
  *(_DWORD *)uint64_t v5 = 0;
  __n128 v7 = *a2;
  unint64_t v8 = a2[1].n128_u64[0];
  initStatementNode(v5, 71, &v7);
  *(unsigned char *)(v5 + 64) = a3;
  return v5;
}

BOOL glpIsDefaultStatementNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 71;
}

uint64_t glpDefaultStatementNodeGetIsStray(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

uint64_t glpDefaultStatementNodeSetIsStray(uint64_t result, char a2)
{
  *(unsigned char *)(result + 64) = a2;
  return result;
}

uint64_t glpMakeBreakStatementNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 64, "AST Node (BreakStatement)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 0;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initStatementNode(v3, 72, &v5);
  return v3;
}

BOOL glpIsBreakStatementNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 72;
}

uint64_t glpMakeContinueStatementNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 64, "AST Node (ContinueStatement)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 0;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initStatementNode(v3, 73, &v5);
  return v3;
}

BOOL glpIsContinueStatementNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 73;
}

uint64_t glpMakeDiscardStatementNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 64, "AST Node (DiscardStatement)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 0;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initStatementNode(v3, 74, &v5);
  return v3;
}

BOOL glpIsDiscardStatementNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 74;
}

uint64_t glpMakeReturnStatementNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (ReturnStatement)");
  *(void *)(v3 + 8) = v3 + 72;
  *(_DWORD *)uint64_t v3 = 1;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initStatementNode(v3, 75, &v5);
  *(void *)(v3 + 64) = 0;
  *(void *)(*(void *)(v3 + 8) + 8 * (*(_DWORD *)(v3 + 4))++) = 0;
  return v3;
}

BOOL glpIsReturnStatementNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 75;
}

uint64_t glpReturnStatementNodeGetExtra(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t glpReturnStatementNodeSetExtra(uint64_t result, uint64_t a2)
{
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t glpReturnStatementNodeGetExpr(uint64_t a1)
{
  return **(void **)(a1 + 8);
}

uint64_t glpReturnStatementNodeSetExpr(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

__n128 glpMakeTopLevelNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (TopLevel)");
  *(void *)(v3 + 8) = v3 + 72;
  *(_DWORD *)uint64_t v3 = 1;
  unint64_t v4 = a2[1].n128_u64[0];
  __n128 result = *a2;
  *(_DWORD *)(v3 + 4) = 0;
  *(_DWORD *)(v3 + 16) = 76;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  *(__n128 *)(v3 + 40) = result;
  *(void *)(v3 + --*(void *)(result + 56) = v4;
  *(_DWORD *)(v3 + 64) = 0;
  return result;
}

BOOL glpIsTopLevelNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 76;
}

uint64_t glpTopLevelNodeSetDef(uint64_t result, unsigned int a2, uint64_t a3)
{
  *(void *)(*(void *)(result + 8) + 8 * a2) = a3;
  return result;
}

void *glpTopLevelNodeAddDef(void *a1, uint64_t a2, uint64_t a3)
{
  return glpTopLevelNodeInsertDef(a1, a2, a3, *(_DWORD *)(a2 + 64));
}

void *glpTopLevelNodeInsertDef(void *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7 = *(_DWORD *)(a2 + 4);
  int v8 = v7 + 1;
  if ((v7 + 1) <= *(_DWORD *)a2)
  {
    uint64_t v13 = *(char **)(a2 + 8);
  }
  else
  {
    if (*(int *)a2 <= 1) {
      int v10 = 1;
    }
    else {
      int v10 = *(_DWORD *)a2;
    }
    int v11 = 2 * v10;
    if (v11 <= v8) {
      unsigned int v12 = v8;
    }
    else {
      unsigned int v12 = v11;
    }
    uint64_t v13 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, 8 * v12, "Vector Storage (GLPASTNode *, growth)");
    memcpy(v13, *(const void **)(a2 + 8), 8 * *(unsigned int *)(a2 + 4));
    ((void (*)(void, void))a1[3])(*a1, *(void *)(a2 + 8));
    *(_DWORD *)a2 = v12;
    *(void *)(a2 + 8) = v13;
    int v7 = *(_DWORD *)(a2 + 4);
  }
  __n128 result = memmove(&v13[8 * a4 + 8], &v13[8 * a4], 8 * (v7 - a4));
  *(void *)(*(void *)(a2 + 8) + 8 * a4) = a3;
  ++*(_DWORD *)(a2 + 4);
  ++*(_DWORD *)(a2 + 64);
  return result;
}

__n128 glpMakeAvailabilityDeclarationNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 72, "AST Node (AvailabilityDeclaration)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 1;
  unint64_t v4 = a2[1].n128_u64[0];
  __n128 result = *a2;
  *(_DWORD *)(v3 + 4) = 0;
  *(_DWORD *)(v3 + 16) = 77;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  *(__n128 *)(v3 + 40) = result;
  *(void *)(v3 + --*(void *)(result + 56) = v4;
  **(void **)(v3 + 8) = 0;
  ++*(_DWORD *)(v3 + 4);
  return result;
}

uint64_t glpAvailabilityDeclarationNodeSetExpr(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

__n128 glpMakeRawCallNode(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 88, "AST Node (RawCall)");
  *(void *)(v9 + 8) = v9 + 88;
  *(_DWORD *)uint64_t v9 = 0;
  unint64_t v10 = a2[1].n128_u64[0];
  __n128 result = *a2;
  *(_DWORD *)(v9 + 4) = 0;
  *(_DWORD *)(v9 + 16) = 78;
  *(void *)(v9 + 24) = 0;
  *(void *)(v9 + 32) = 0;
  *(__n128 *)(v9 + 40) = result;
  *(void *)(v9 + --*(void *)(result + 56) = v10;
  *(void *)(v9 + 64) = a3;
  *(void *)(v9 + 72) = a4;
  *(void *)(v9 + 80) = a5;
  return result;
}

uint64_t glpRawCallNodeGetName(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t glpRawCallNodeGetExtra(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t glpRawCallNodeSetExtra(uint64_t result, uint64_t a2)
{
  *(void *)(result + 80) = a2;
  return result;
}

__n128 glpMakeSubroutineRawCallNode(uint64_t a1, __n128 *a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (SubroutineRawCall)");
  *(void *)(v5 + 8) = v5 + 72;
  *(_DWORD *)uint64_t v5 = 1;
  unint64_t v6 = a2[1].n128_u64[0];
  __n128 result = *a2;
  *(_DWORD *)(v5 + 4) = 0;
  *(_DWORD *)(v5 + 16) = 79;
  *(void *)(v5 + 24) = 0;
  *(void *)(v5 + 32) = 0;
  *(__n128 *)(v5 + 40) = result;
  *(void *)(v5 + --*(void *)(result + 56) = v6;
  *(void *)(v5 + 64) = a3;
  **(void **)(v5 + 8) = 0;
  ++*(_DWORD *)(v5 + 4);
  return result;
}

uint64_t glpSubroutineRawCallNodeGetExtra(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t glpSubroutineRawCallNodeGetIndexExpr(uint64_t a1)
{
  return **(void **)(a1 + 8);
}

uint64_t glpSubroutineRawCallNodeSetIndexExpr(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

uint64_t glpMakeOffsetNode(uint64_t a1, long long *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 112, "AST Node (Offset)");
  *(void *)(v3 + 8) = v3 + 88;
  *(_DWORD *)uint64_t v3 = 3;
  uint64_t v4 = *((void *)a2 + 2);
  long long v5 = *a2;
  *(_DWORD *)(v3 + 4) = 0;
  *(_DWORD *)(v3 + 16) = 80;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  *(_OWORD *)(v3 + 40) = v5;
  *(void *)(v3 + --*(void *)(result + 56) = v4;
  *(void *)(v3 + 64) = 0;
  *(void *)(v3 + 72) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  **(void **)(v3 + 8) = 0;
  LODWORD(v4) = *(_DWORD *)(v3 + 4) + 1;
  *(_DWORD *)(v3 + 4) = v4;
  *(void *)(*(void *)(v3 + 8) + 8 * v4) = 0;
  LODWORD(v4) = *(_DWORD *)(v3 + 4) + 1;
  *(_DWORD *)(v3 + 4) = v4;
  *(void *)(*(void *)(v3 + 8) + 8 * v4) = 0;
  ++*(_DWORD *)(v3 + 4);
  *(void *)(v3 + 32) = glpGetPrimitiveType(0);
  *(_DWORD *)(v3 + 80) = -1;
  return v3;
}

uint64_t glpOffsetNodeGetExtra(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t glpOffsetNodeSetExtra(uint64_t result, uint64_t a2)
{
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t glpOffsetNodeGetSwizzle(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t glpOffsetNodeSetSwizzle(uint64_t result, int a2)
{
  *(_DWORD *)(result + 72) = a2;
  return result;
}

uint64_t glpOffsetNodeGetPreSwizzlePrimitiveType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 76);
}

uint64_t glpOffsetNodeSetPreSwizzlePrimitiveType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 76) = a2;
  return result;
}

uint64_t glpOffsetNodeGetCompStride(uint64_t a1)
{
  return *(unsigned int *)(a1 + 80);
}

uint64_t glpOffsetNodeSetCompStride(uint64_t result, int a2)
{
  *(_DWORD *)(result + 80) = a2;
  return result;
}

uint64_t glpOffsetNodeGetBankIndex(uint64_t a1)
{
  return **(void **)(a1 + 8);
}

uint64_t glpOffsetNodeSetBankIndex(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

uint64_t glpOffsetNodeGetOffsetExpr(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 8);
}

uint64_t glpOffsetNodeSetOffsetExpr(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 8) + 8) = a2;
  return result;
}

uint64_t glpOffsetNodeGetVectorElementExpr(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 16);
}

uint64_t glpOffsetNodeSetVectorElementExpr(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 8) + 16) = a2;
  return result;
}

BOOL glpIsDerefNode(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 16) - 81) < 2;
}

uint64_t glpDerefNodeGetOffset(uint64_t a1)
{
  return **(void **)(a1 + 8);
}

uint64_t glpDerefNodeSetOffset(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

uint64_t glpMakeLValueNode(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 104, "AST Node (LValue)");
  *(void *)(v9 + 8) = v9 + 96;
  *(_DWORD *)uint64_t v9 = 1;
  __n128 v11 = *a2;
  unint64_t v12 = a2[1].n128_u64[0];
  initDerefNode(v9, 81, &v11);
  *(void *)(v9 + 64) = a3;
  *(void *)(v9 + 72) = a4;
  *(void *)(v9 + 80) = a5;
  *(_DWORD *)(v9 + 88) = 0;
  return v9;
}

BOOL glpIsLValueNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 81;
}

uint64_t glpLValueNodeGetVariableName(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t glpLValueNodeSetVariableName(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 64) = a2;
  *(void *)(result + 72) = a3;
  return result;
}

uint64_t glpLValueNodeGetVariableExtra(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t glpLValueNodeSetVariableExtra(uint64_t result, uint64_t a2)
{
  *(void *)(result + 80) = a2;
  return result;
}

uint64_t glpLValueNodeGetIndexLevel(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t glpLValueNodeSetIndexLevel(uint64_t result, int a2)
{
  *(_DWORD *)(result + 88) = a2;
  return result;
}

uint64_t glpMakeRValueNode(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (RValue)");
  *(void *)(v3 + 8) = v3 + 64;
  *(_DWORD *)uint64_t v3 = 2;
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  initDerefNode(v3, 82, &v5);
  *(void *)(*(void *)(v3 + 8) + 8 * (*(_DWORD *)(v3 + 4))++) = 0;
  return v3;
}

uint64_t glpRValueNodeGetBase(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 8);
}

uint64_t glpRValueNodeSetBase(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 8) + 8) = a2;
  return result;
}

__n128 glpMakeIBPartialDerefNode(uint64_t a1, __n128 *a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 80, "AST Node (IBPartialDeref)");
  *(void *)(v5 + 8) = v5 + 72;
  *(_DWORD *)uint64_t v5 = 1;
  unint64_t v6 = a2[1].n128_u64[0];
  __n128 result = *a2;
  *(_DWORD *)(v5 + 4) = 0;
  *(_DWORD *)(v5 + 16) = 83;
  *(void *)(v5 + 24) = 0;
  *(void *)(v5 + 32) = 0;
  *(__n128 *)(v5 + 40) = result;
  *(void *)(v5 + --*(void *)(result + 56) = v6;
  *(void *)(v5 + 64) = a3;
  **(void **)(v5 + 8) = 0;
  ++*(_DWORD *)(v5 + 4);
  return result;
}

BOOL glpIsIBPartialDerefNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 83;
}

uint64_t glpIBPartialDerefNodeGetIb(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t glpIBPartialDerefNodeGetBankIndex(uint64_t a1)
{
  return **(void **)(a1 + 8);
}

uint64_t glpIBPartialDerefNodeSetBankIndex(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

uint64_t glpMakePPStreamOpNode(uint64_t a1, __n128 *a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t v13 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 104, "AST Node (PPStreamOp)");
  *(void *)(v13 + 8) = v13 + 96;
  *(_DWORD *)uint64_t v13 = 1;
  __n128 v15 = *a2;
  unint64_t v16 = a2[1].n128_u64[0];
  initCallNode(v13, 84, &v15);
  *(_DWORD *)(v13 + 72) = a3;
  *(_DWORD *)(v13 + 76) = a4;
  *(_DWORD *)(v13 + 80) = a5;
  *(_DWORD *)(v13 + 84) = a6;
  *(_DWORD *)(v13 + 88) = a7;
  return v13;
}

uint64_t glpPPStreamOpNodeGetReturnPrimitiveType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t glpPPStreamOpNodeGetOpcode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 76);
}

uint64_t glpPPStreamOpNodeGetOpPrimitiveType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 80);
}

uint64_t glpPPStreamOpNodeGetHasSrctex(uint64_t a1)
{
  return *(unsigned int *)(a1 + 84);
}

uint64_t glpPPStreamOpNodeGetHasOffset(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

__n128 glpMakeSubroutineUniformNode(uint64_t a1, __n128 *a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t, const char *))(a1 + 8))(*(void *)a1, 72, "AST Node (SubroutineUniform)");
  *(void *)(v5 + 8) = v5 + 72;
  *(_DWORD *)uint64_t v5 = 0;
  unint64_t v6 = a2[1].n128_u64[0];
  __n128 result = *a2;
  *(_DWORD *)(v5 + 4) = 0;
  *(_DWORD *)(v5 + 16) = 85;
  *(void *)(v5 + 24) = 0;
  *(void *)(v5 + 32) = 0;
  *(__n128 *)(v5 + 40) = result;
  *(void *)(v5 + --*(void *)(result + 56) = v6;
  *(void *)(v5 + 64) = a3;
  return result;
}

BOOL glpIsSubroutineUniformNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 85;
}

uint64_t glpSubroutineUniformNodeGetExtra(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

__n128 initUnaryOperatorNode(uint64_t a1, int a2, __n128 *a3)
{
  unint64_t v3 = a3[1].n128_u64[0];
  __n128 result = *a3;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a1 + --*(void *)(result + 56) = v3;
  **(void **)(a1 + 8) = 0;
  ++*(_DWORD *)(a1 + 4);
  return result;
}

__n128 initCallNode(uint64_t a1, int a2, __n128 *a3)
{
  unint64_t v3 = a3[1].n128_u64[0];
  __n128 result = *a3;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a1 + --*(void *)(result + 56) = v3;
  *(_DWORD *)(a1 + 64) = 0;
  return result;
}

__n128 initBinaryOperatorNode(uint64_t a1, int a2, __n128 *a3)
{
  unint64_t v3 = a3[1].n128_u64[0];
  __n128 result = *a3;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a1 + --*(void *)(result + 56) = v3;
  **(void **)(a1 + 8) = 0;
  LODWORD(v3) = *(_DWORD *)(a1 + 4) + 1;
  *(_DWORD *)(a1 + 4) = v3;
  *(void *)(*(void *)(a1 + 8) + 8 * v3) = 0;
  ++*(_DWORD *)(a1 + 4);
  return result;
}

__n128 initStructureNode(uint64_t a1, int a2, __n128 *a3)
{
  unint64_t v3 = a3[1].n128_u64[0];
  __n128 result = *a3;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a1 + --*(void *)(result + 56) = v3;
  *(_DWORD *)(a1 + 64) = 0;
  return result;
}

__n128 initQualifierNode(uint64_t a1, int a2, __n128 *a3)
{
  unint64_t v3 = a3[1].n128_u64[0];
  __n128 result = *a3;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a1 + --*(void *)(result + 56) = v3;
  return result;
}

__n128 initStatementNode(uint64_t a1, int a2, __n128 *a3)
{
  unint64_t v3 = a3[1].n128_u64[0];
  __n128 result = *a3;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a1 + --*(void *)(result + 56) = v3;
  return result;
}

__n128 initDerefNode(uint64_t a1, int a2, __n128 *a3)
{
  unint64_t v3 = a3[1].n128_u64[0];
  __n128 result = *a3;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a1 + --*(void *)(result + 56) = v3;
  **(void **)(a1 + 8) = 0;
  ++*(_DWORD *)(a1 + 4);
  return result;
}

void *deserialize_GLPType(void *a1, void *a2)
{
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 0x40000000;
  void v3[2] = __deserialize_GLPType_block_invoke;
  v3[3] = &__block_descriptor_tmp_12;
  _OWORD v3[4] = a1;
  return deserialize_pointer(a1, (uint64_t)v3, a2);
}

void *deserialize_GLPValue(void *a1, uint64_t a2, void *a3)
{
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 0x40000000;
  void v4[2] = __deserialize_GLPValue_block_invoke;
  v4[3] = &__block_descriptor_tmp_2;
  _OWORD v4[4] = a1;
  v4[5] = a2;
  return deserialize_pointer(a1, (uint64_t)v4, a3);
}

void *deserialize_GLPNameTableEntry(uint64_t a1, void *a2)
{
  uint64_t v4 = (_DWORD *)(*(uint64_t (**)(void, uint64_t, const char *))(*(void *)(a1 + 240) + 8))(**(void **)(a1 + 240), 16, "Deserialized");
  uint64_t v5 = *(unsigned int *)(a1 + 260);
  unint64_t v6 = *(unsigned int *)(a1 + 256);
  if (v5 >= v6) {
LABEL_77:
  }
    glpDeserialError(a1, 1u);
  int v7 = v4;
  uint64_t v8 = *(void *)(a1 + 248);
  int v9 = *(char *)(v8 + v5);
  unint64_t v10 = *(unsigned __int8 *)(v8 + v5);
  uint64_t v11 = v5 + 1;
  *(_DWORD *)(a1 + 260) = v5 + 1;
  if (v9 < 0)
  {
    uint64_t v12 = (v10 >> 1) & 7;
    switch(v12)
    {
      case 1:
        if (v5 + 3 > v6) {
          goto LABEL_77;
        }
        LODWORD(v13) = *(unsigned __int16 *)(v8 + v11);
        LODWORD(v11) = v5 + 3;
        goto LABEL_23;
      case 2:
        unsigned int v14 = v5 + 4;
        if (v14 > v6) {
          goto LABEL_77;
        }
        LODWORD(v13) = *(unsigned __int16 *)(v8 + v11) | (*(unsigned __int8 *)(v8 + v11 + 2) << 16);
        *(_DWORD *)(a1 + 260) = v14;
        LODWORD(v11) = v14;
        goto LABEL_24;
      case 3:
        if (v5 + 5 > v6) {
          goto LABEL_77;
        }
        LODWORD(v13) = *(_DWORD *)(v8 + v11);
        LODWORD(v11) = v5 + 5;
        goto LABEL_23;
      case 4:
        if (v5 + 5 > v6) {
          goto LABEL_77;
        }
        LODWORD(v13) = *(_DWORD *)(v8 + v11);
        *(_DWORD *)(a1 + 260) = v5 + 5;
        if ((int)v5 + 5 >= v6) {
          goto LABEL_77;
        }
        LODWORD(v11) = v5 + 6;
        goto LABEL_23;
      case 5:
        if (v5 + 5 > v6) {
          goto LABEL_77;
        }
        LODWORD(v13) = *(_DWORD *)(v8 + v11);
        uint64_t v15 = (v5 + 5);
        *(_DWORD *)(a1 + 260) = v15;
        if (v15 + 2 > v6) {
          goto LABEL_77;
        }
        LODWORD(v11) = v5 + 7;
        goto LABEL_23;
      case 6:
        if (v5 + 5 > v6) {
          goto LABEL_77;
        }
        LODWORD(v13) = *(_DWORD *)(v8 + v11);
        *(_DWORD *)(a1 + 260) = v5 + 5;
        LODWORD(v11) = v5 + 8;
        if ((int)v5 + 8 > v6) {
          goto LABEL_77;
        }
        goto LABEL_23;
      case 7:
        if (v5 + 9 > v6) {
          goto LABEL_77;
        }
        uint64_t v13 = *(void *)(v8 + v11);
        LODWORD(v11) = v5 + 9;
        goto LABEL_23;
      default:
        if (v11 >= v6) {
          goto LABEL_77;
        }
        LODWORD(v13) = *(unsigned __int8 *)(v8 + v11);
        LODWORD(v11) = v5 + 2;
LABEL_23:
        *(_DWORD *)(a1 + 260) = v11;
LABEL_24:
        if (v9) {
          uint64_t v16 = -256 << (8 * v12);
        }
        else {
          LODWORD(v16) = 0;
        }
        LODWORD(v10) = v13 | v16;
        break;
    }
  }
  *uint64_t v4 = v10;
  switch((int)v10)
  {
    case 0:
    case 12:
      unsigned int v17 = v4 + 2;
      *(void *)&long long v41 = MEMORY[0x263EF8330];
      *((void *)&v41 + 1) = 0x40000000;
      unint64_t v18 = __deserialize_GLPVariableObject_block_invoke;
      __n128 v19 = &__block_descriptor_tmp_6;
      goto LABEL_37;
    case 1:
    case 2:
    case 3:
      unsigned int v17 = v4 + 2;
      *(void *)&long long v41 = MEMORY[0x263EF8330];
      *((void *)&v41 + 1) = 0x40000000;
      unint64_t v18 = __deserialize_GLPInterfaceBlockObject_block_invoke;
      __n128 v19 = &__block_descriptor_tmp_9;
      goto LABEL_37;
    case 4:
      unsigned int v17 = v4 + 2;
      *(void *)&long long v41 = MEMORY[0x263EF8330];
      *((void *)&v41 + 1) = 0x40000000;
      unint64_t v18 = __deserialize_GLPOverload_block_invoke;
      __n128 v19 = &__block_descriptor_tmp_10;
      goto LABEL_37;
    case 5:
      unsigned int v17 = v4 + 2;
      *(void *)&long long v41 = MEMORY[0x263EF8330];
      *((void *)&v41 + 1) = 0x40000000;
      unint64_t v18 = __deserialize_GLPFunctionObject_block_invoke;
      __n128 v19 = &__block_descriptor_tmp_5;
      goto LABEL_37;
    case 6:
    case 8:
    case 10:
      unsigned int v17 = v4 + 2;
      *(void *)&long long v41 = MEMORY[0x263EF8330];
      *((void *)&v41 + 1) = 0x40000000;
      unint64_t v18 = __deserialize_GLPType_block_invoke;
      __n128 v19 = &__block_descriptor_tmp_12;
      goto LABEL_37;
    case 7:
      unsigned int v17 = v4 + 2;
      *(void *)&long long v41 = MEMORY[0x263EF8330];
      *((void *)&v41 + 1) = 0x40000000;
      unint64_t v18 = __deserialize_GLPSubroutineUniformObject_block_invoke;
      __n128 v19 = &__block_descriptor_tmp_11;
      goto LABEL_37;
    case 9:
      unsigned int v17 = v4 + 2;
      *(void *)&long long v41 = MEMORY[0x263EF8330];
      *((void *)&v41 + 1) = 0x40000000;
      unint64_t v18 = __deserialize_GLPTwoThings_block_invoke;
      __n128 v19 = &__block_descriptor_tmp_12;
      goto LABEL_37;
    case 11:
      unsigned int v17 = v4 + 2;
      *(void *)&long long v41 = MEMORY[0x263EF8330];
      *((void *)&v41 + 1) = 0x40000000;
      unint64_t v18 = __deserialize_GLPLayoutObject_block_invoke;
      __n128 v19 = &__block_descriptor_tmp_3;
LABEL_37:
      int v42 = v18;
      int v43 = v19;
      uint64_t v44 = a1;
      __n128 result = deserialize_pointer((void *)a1, (uint64_t)&v41, v17);
      goto LABEL_38;
    case 13:
      if (v11 >= v6) {
        goto LABEL_77;
      }
      int v21 = *(char *)(v8 + v11);
      unint64_t v22 = *(unsigned __int8 *)(v8 + v11);
      uint64_t v23 = v11 + 1;
      *(_DWORD *)(a1 + 260) = v23;
      uint64_t v40 = a2;
      if (v21 < 0)
      {
        uint64_t v24 = (v22 >> 1) & 7;
        switch(v24)
        {
          case 1:
            if ((unint64_t)v11 + 3 > v6) {
              goto LABEL_77;
            }
            LODWORD(v8) = *(unsigned __int16 *)(v8 + v23);
            int v25 = v11 + 3;
            goto LABEL_61;
          case 2:
            unsigned int v26 = v11 + 4;
            if (v26 > v6) {
              goto LABEL_77;
            }
            LODWORD(v8) = *(unsigned __int16 *)(v8 + v23) | (*(unsigned __int8 *)(v8 + v23 + 2) << 16);
LABEL_58:
            *(_DWORD *)(a1 + 260) = v26;
            goto LABEL_62;
          case 3:
            if ((unint64_t)v11 + 5 > v6) {
              goto LABEL_77;
            }
            LODWORD(v8) = *(_DWORD *)(v8 + v23);
            int v25 = v11 + 5;
            goto LABEL_61;
          case 4:
            if ((unint64_t)v11 + 5 > v6) {
              goto LABEL_77;
            }
            LODWORD(v8) = *(_DWORD *)(v8 + v23);
            *(_DWORD *)(a1 + 260) = v11 + 5;
            if ((int)v11 + 5 >= v6) {
              goto LABEL_77;
            }
            int v25 = v11 + 6;
            goto LABEL_61;
          case 5:
            if ((unint64_t)v11 + 5 > v6) {
              goto LABEL_77;
            }
            LODWORD(v8) = *(_DWORD *)(v8 + v23);
            uint64_t v27 = (v11 + 5);
            *(_DWORD *)(a1 + 260) = v27;
            if (v27 + 2 > v6) {
              goto LABEL_77;
            }
            int v25 = v11 + 7;
            goto LABEL_61;
          case 6:
            if ((unint64_t)v11 + 5 <= v6)
            {
              LODWORD(v8) = *(_DWORD *)(v8 + v23);
              *(_DWORD *)(a1 + 260) = v11 + 5;
              unsigned int v26 = v11 + 8;
              if (v26 <= v6) {
                goto LABEL_58;
              }
            }
            goto LABEL_77;
          case 7:
            if ((unint64_t)v11 + 9 > v6) {
              goto LABEL_77;
            }
            uint64_t v8 = *(void *)(v8 + v23);
            int v25 = v11 + 9;
            goto LABEL_61;
          default:
            if (v23 >= v6) {
              goto LABEL_77;
            }
            LODWORD(v8) = *(unsigned __int8 *)(v8 + v23);
            int v25 = v11 + 2;
LABEL_61:
            *(_DWORD *)(a1 + 260) = v25;
LABEL_62:
            if (v21) {
              uint64_t v28 = -256 << (8 * v24);
            }
            else {
              LODWORD(v28) = 0;
            }
            LODWORD(v22) = v8 | v28;
            break;
        }
      }
      uint64_t v29 = (*(uint64_t (**)(void, uint64_t, const char *))(*(void *)(a1 + 240) + 8))(**(void **)(a1 + 240), 16, "Deserialized");
      uint64_t v30 = *(void *)(a1 + 240);
      *(_DWORD *)uint64_t v29 = v22;
      *(_DWORD *)(v29 + 4) = 0;
      __n128 result = (void *)(*(uint64_t (**)(void, uint64_t, const char *))(v30 + 8))(*(void *)v30, 24 * v22, "Vector Storage (GLPNameTableEntryWithName)");
      *(void *)(v29 + 8) = result;
      if ((int)v22 >= 1)
      {
        do
        {
          *(void *)&long long v41 = 0;
          *((void *)&v41 + 1) = deserialize_GLPString(a1);
          int v42 = v31;
          deserialize_GLPNameTableEntry(a1, &v41);
          int v32 = *(_DWORD *)v29;
          uint64_t v33 = *(unsigned int *)(v29 + 4);
          if ((v33 + 1) <= *(_DWORD *)v29)
          {
            unint64_t v37 = *(char **)(v29 + 8);
            int v38 = *(_DWORD *)(v29 + 4);
          }
          else
          {
            if (v32 <= 1) {
              int v32 = 1;
            }
            int v34 = 2 * v32;
            if (v34 <= (int)v33 + 1) {
              unsigned int v35 = v33 + 1;
            }
            else {
              unsigned int v35 = v34;
            }
            BOOL v36 = *(void **)(a1 + 240);
            unint64_t v37 = (char *)((uint64_t (*)(void, uint64_t, const char *))v36[1])(*v36, 24 * v35, "Vector Storage (GLPNameTableEntryWithName, growth)");
            memcpy(v37, *(const void **)(v29 + 8), 24 * *(unsigned int *)(v29 + 4));
            ((void (*)(void, void))v36[3])(*v36, *(void *)(v29 + 8));
            *(_DWORD *)uint64_t v29 = v35;
            *(void *)(v29 + 8) = v37;
            int v38 = *(_DWORD *)(v29 + 4);
          }
          __n128 result = memmove(&v37[24 * v33 + 24], &v37[24 * v33], 24 * (v38 - v33));
          uint64_t v39 = *(void *)(v29 + 8) + 24 * v33;
          *(void *)(v39 + 16) = v42;
          *(_OWORD *)uint64_t v39 = v41;
          ++*(_DWORD *)(v29 + 4);
          LODWORD(v22) = v22 - 1;
        }
        while (v22);
      }
      *((void *)v7 + 1) = v29;
      a2 = v40;
LABEL_38:
      *a2 = v7;
      return result;
    default:
      glpDeserialError(a1, 0xAu);
  }
}

uint64_t glpDeserializeAST(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  memset(v29, 0, sizeof(v29));
  glpInitPoolAllocator(0x20000, 0x20000, v29);
  uint64_t v38 = 0;
  long long v37 = 0u;
  memset(v36, 0, sizeof(v36));
  glpInitDeserialContext((uint64_t)v36, (uint64_t)v29, a1, a2, a3);
  if (_setjmp((int *)v36))
  {
    glpDestroyDeserialContext(v36);
    glpDestroyPoolAllocator((uint64_t)v29);
    return 0;
  }
  uint64_t v7 = HIDWORD(v38);
  if (HIDWORD(v38) >= v38) {
LABEL_36:
  }
    glpDeserialError((uint64_t)v36, 1u);
  int v8 = *(char *)(*((void *)&v37 + 1) + HIDWORD(v38));
  unint64_t v9 = *(unsigned __int8 *)(*((void *)&v37 + 1) + HIDWORD(v38));
  uint64_t v10 = HIDWORD(v38) + 1;
  ++HIDWORD(v38);
  if (v8 < 0)
  {
    uint64_t v12 = (v9 >> 1) & 7;
    uint64_t v13 = v7 + 1;
    switch(v12)
    {
      case 1:
        if (v7 + 3 > (unint64_t)v38) {
          goto LABEL_36;
        }
        int v14 = *(unsigned __int16 *)(*((void *)&v37 + 1) + v10);
        int v15 = v7 + 3;
        goto LABEL_22;
      case 2:
        unsigned int v16 = v7 + 4;
        if (v16 > v38) {
          goto LABEL_36;
        }
        LODWORD(v17) = *(unsigned __int16 *)(*((void *)&v37 + 1) + v10) | (*(unsigned __int8 *)(*((void *)&v37 + 1)
                                                                                                + v10
                                                                                                + 2) << 16);
        goto LABEL_28;
      case 3:
        if (v10 + 4 > (unint64_t)v38) {
          goto LABEL_36;
        }
        int v14 = *(_DWORD *)(*((void *)&v37 + 1) + v10);
        int v15 = v7 + 5;
        goto LABEL_22;
      case 4:
        if (v7 + 5 > (unint64_t)v38) {
          goto LABEL_36;
        }
        int v18 = *(_DWORD *)(*((void *)&v37 + 1) + v13);
        HIDWORD(v38) = v7 + 5;
        if ((int)v7 + 5 >= v38) {
          goto LABEL_36;
        }
        int v14 = v18;
        int v15 = v7 + 6;
        goto LABEL_22;
      case 5:
        if (v7 + 5 > (unint64_t)v38) {
          goto LABEL_36;
        }
        int v19 = *(_DWORD *)(*((void *)&v37 + 1) + v13);
        HIDWORD(v38) = v7 + 5;
        if ((unint64_t)(v7 + 5) + 2 > v38) {
          goto LABEL_36;
        }
        int v14 = v19;
        int v15 = v7 + 7;
        goto LABEL_22;
      case 6:
        if (v7 + 5 > (unint64_t)v38) {
          goto LABEL_36;
        }
        int v21 = v7;
        int v22 = v7;
        int v20 = *(_DWORD *)(*((void *)&v37 + 1) + v13);
        HIDWORD(v38) = v21 + 5;
        if (v22 + 8 > v38) {
          goto LABEL_36;
        }
        HIDWORD(v38) = v22 + 8;
        break;
      case 7:
        if (v7 + 9 > (unint64_t)v38) {
          goto LABEL_36;
        }
        uint64_t v17 = *(void *)(*((void *)&v37 + 1) + v10);
        unsigned int v16 = v7 + 9;
LABEL_28:
        HIDWORD(v38) = v16;
        int v20 = v17;
        break;
      default:
        if (v10 >= v38) {
          goto LABEL_36;
        }
        int v14 = *(unsigned __int8 *)(*((void *)&v37 + 1) + v10);
        int v15 = v7 + 2;
LABEL_22:
        HIDWORD(v38) = v15;
        int v20 = v14;
        break;
    }
    if (v8) {
      uint64_t v23 = -256 << (8 * v12);
    }
    else {
      LODWORD(v23) = 0;
    }
    int v11 = v20 | v23;
    if (!(v20 | v23)) {
      goto LABEL_35;
    }
    goto LABEL_33;
  }
  int v11 = v9;
  if (v9)
  {
LABEL_33:
    int v24 = v11;
    uint64_t v25 = MEMORY[0x263EF8330];
    do
    {
      uint64_t v28 = 0;
      int v26 = v24;
      uint64_t v30 = v25;
      uint64_t v31 = 0x40000000;
      int v32 = __deserialize_GLPType_block_invoke;
      uint64_t v33 = &__block_descriptor_tmp_12;
      int v34 = v36;
      deserialize_pointer(v36, (uint64_t)&v30, &v28);
      uint64_t v27 = 0;
      uint64_t v30 = MEMORY[0x263EF8330];
      uint64_t v31 = 0x40000000;
      int v32 = __deserialize_GLPValue_block_invoke;
      uint64_t v33 = &__block_descriptor_tmp_2;
      int v34 = v36;
      uint64_t v35 = v28;
      deserialize_pointer(v36, (uint64_t)&v30, &v27);
      int v24 = v26 - 1;
    }
    while (v26 != 1);
  }
LABEL_35:
  uint64_t v28 = 0;
  uint64_t v30 = MEMORY[0x263EF8330];
  uint64_t v31 = 0x40000000;
  int v32 = __deserialize_GLPASTNode_block_invoke;
  uint64_t v33 = &__block_descriptor_tmp_16_0;
  int v34 = v36;
  deserialize_pointer(v36, (uint64_t)&v30, &v28);
  glpDestroyDeserialContext(v36);
  glpDestroyPoolAllocator((uint64_t)v29);
  return v28;
}

BOOL glpDeserializeNames(uint64_t a1, unsigned int *a2, int a3, uint64_t *a4)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  memset(v81, 0, sizeof(v81));
  glpInitPoolAllocator(0x20000, 0x20000, v81);
  uint64_t v90 = 0;
  long long v89 = 0u;
  memset(v88, 0, sizeof(v88));
  uint64_t v8 = *a2;
  glpInitDeserialContext((uint64_t)v88, (uint64_t)v81, a1, (uint64_t)(a2 + 1), a3);
  if (_setjmp((int *)v88))
  {
    glpDestroyDeserialContext(v88);
    glpDestroyPoolAllocator((uint64_t)v81);
    return 0;
  }
  uint64_t v10 = HIDWORD(v90);
  if (HIDWORD(v90) >= v90) {
LABEL_103:
  }
    glpDeserialError((uint64_t)v88, 1u);
  int v11 = *(char *)(*((void *)&v89 + 1) + HIDWORD(v90));
  unint64_t v12 = *(unsigned __int8 *)(*((void *)&v89 + 1) + HIDWORD(v90));
  uint64_t v13 = HIDWORD(v90) + 1;
  unsigned int v14 = ++HIDWORD(v90);
  if (v11 < 0)
  {
    uint64_t v20 = (v12 >> 1) & 7;
    int v21 = v10;
    switch(v20)
    {
      case 1:
        if (v10 + 3 > (unint64_t)v90) {
          goto LABEL_103;
        }
        int v24 = *(unsigned __int16 *)(*((void *)&v89 + 1) + v13);
        unsigned int v25 = v10 + 3;
        goto LABEL_24;
      case 2:
        unsigned int v26 = v10 + 4;
        if (v26 > v90) {
          goto LABEL_103;
        }
        LODWORD(v27) = *(unsigned __int16 *)(*((void *)&v89 + 1) + v13) | (*(unsigned __int8 *)(*((void *)&v89 + 1)
                                                                                                + v13
                                                                                                + 2) << 16);
        goto LABEL_30;
      case 3:
        if (v13 + 4 > (unint64_t)v90) {
          goto LABEL_103;
        }
        int v22 = *(_DWORD *)(*((void *)&v89 + 1) + v13);
        unsigned int v23 = v21 + 5;
        goto LABEL_27;
      case 4:
        if (v10 + 5 > (unint64_t)v90) {
          goto LABEL_103;
        }
        int v28 = *(_DWORD *)(*((void *)&v89 + 1) + v13);
        HIDWORD(v90) = v10 + 5;
        if ((int)v10 + 5 >= v90) {
          goto LABEL_103;
        }
        int v24 = v28;
        unsigned int v25 = v10 + 6;
        goto LABEL_24;
      case 5:
        if (v10 + 5 > (unint64_t)v90) {
          goto LABEL_103;
        }
        int v29 = *(_DWORD *)(*((void *)&v89 + 1) + v13);
        HIDWORD(v90) = v10 + 5;
        if ((unint64_t)(v10 + 5) + 2 > v90) {
          goto LABEL_103;
        }
        int v24 = v29;
        unsigned int v25 = v10 + 7;
LABEL_24:
        HIDWORD(v90) = v25;
        unsigned int v30 = v25;
        int v22 = v24;
        break;
      case 6:
        if (v10 + 5 <= (unint64_t)v90)
        {
          int v31 = v10;
          int v22 = *(_DWORD *)(*((void *)&v89 + 1) + v13);
          HIDWORD(v90) = v21 + 5;
          unsigned int v23 = v31 + 8;
          if (v31 + 8 <= v90) {
            goto LABEL_27;
          }
        }
        goto LABEL_103;
      case 7:
        if (v10 + 9 > (unint64_t)v90) {
          goto LABEL_103;
        }
        uint64_t v27 = *(void *)(*((void *)&v89 + 1) + v13);
        unsigned int v26 = v10 + 9;
LABEL_30:
        HIDWORD(v90) = v26;
        unsigned int v30 = v26;
        int v22 = v27;
        break;
      default:
        if (v14 >= v90) {
          goto LABEL_103;
        }
        int v22 = *(unsigned __int8 *)(*((void *)&v89 + 1) + v13);
        unsigned int v23 = v21 + 2;
LABEL_27:
        HIDWORD(v90) = v23;
        unsigned int v30 = v23;
        break;
    }
    if (v11) {
      uint64_t v32 = -256 << (8 * v20);
    }
    else {
      LODWORD(v32) = 0;
    }
    unsigned int v14 = v30;
    int v15 = v22 | v32;
    if (v22 | v32) {
      goto LABEL_6;
    }
LABEL_35:
    unsigned int v19 = v90;
    unsigned int v18 = v14;
    goto LABEL_36;
  }
  int v15 = v12;
  if (!v12) {
    goto LABEL_35;
  }
LABEL_6:
  uint64_t v78 = a4;
  uint64_t v16 = MEMORY[0x263EF8330];
  int v17 = v15;
  do
  {
    uint64_t v80 = 0;
    uint64_t v82 = v16;
    uint64_t v83 = 0x40000000;
    int v84 = __deserialize_GLPType_block_invoke;
    int v85 = &__block_descriptor_tmp_12;
    int v86 = v88;
    deserialize_pointer(v88, (uint64_t)&v82, &v80);
    uint64_t v79 = 0;
    uint64_t v82 = MEMORY[0x263EF8330];
    uint64_t v83 = 0x40000000;
    int v84 = __deserialize_GLPValue_block_invoke;
    int v85 = &__block_descriptor_tmp_2;
    int v86 = v88;
    uint64_t v87 = v80;
    deserialize_pointer(v88, (uint64_t)&v82, &v79);
    --v17;
  }
  while (v17);
  unsigned int v18 = HIDWORD(v90);
  unsigned int v19 = v90;
  a4 = v78;
  uint64_t v8 = v8;
LABEL_36:
  if (v18 >= v19) {
    goto LABEL_103;
  }
  int v33 = *(unsigned __int8 *)(*((void *)&v89 + 1) + v18);
  HIDWORD(v90) = v18 + 1;
  if (v33)
  {
    uint64_t v34 = (*(uint64_t (**)(void, uint64_t, const char *))(v89 + 8))(*(void *)v89, 56, "Deserialized");
    uint64_t v35 = HIDWORD(v90);
    unint64_t v36 = v90;
    if (HIDWORD(v90) >= v90) {
      goto LABEL_103;
    }
    uint64_t v37 = *((void *)&v89 + 1);
    uint64_t v38 = *((void *)&v89 + 1);
    int v39 = *(char *)(*((void *)&v89 + 1) + HIDWORD(v90));
    unint64_t v40 = *(unsigned __int8 *)(*((void *)&v89 + 1) + HIDWORD(v90));
    uint64_t v41 = HIDWORD(v90) + 1;
    uint64_t v42 = v41;
    ++HIDWORD(v90);
    if (v39 < 0)
    {
      uint64_t v46 = (v40 >> 1) & 7;
      uint64_t v47 = -256 << (8 * v46);
      int v48 = v35;
      switch(v46)
      {
        case 1:
          if (v41 + 2 > (unint64_t)v90) {
            goto LABEL_103;
          }
          int v51 = *(unsigned __int16 *)(*((void *)&v89 + 1) + v41);
          unsigned int v52 = v35 + 3;
          goto LABEL_57;
        case 2:
          unsigned int v53 = v35 + 4;
          if ((int)v35 + 4 > v90) {
            goto LABEL_103;
          }
          LODWORD(v54) = *(unsigned __int16 *)(*((void *)&v89 + 1) + v41) | (*(unsigned __int8 *)(*((void *)&v89 + 1)
                                                                                                  + v41
                                                                                                  + 2) << 16);
          goto LABEL_63;
        case 3:
          if (v35 + 5 > (unint64_t)v90) {
            goto LABEL_103;
          }
          int v49 = *(_DWORD *)(*((void *)&v89 + 1) + v41);
          unsigned int v50 = v35 + 5;
          goto LABEL_60;
        case 4:
          if (v35 + 5 > (unint64_t)v90) {
            goto LABEL_103;
          }
          int v55 = v35;
          int v56 = *(_DWORD *)(*((void *)&v89 + 1) + v41);
          HIDWORD(v90) = v55 + 5;
          if (v55 + 5 >= v90) {
            goto LABEL_103;
          }
          int v51 = v56;
          unsigned int v52 = v48 + 6;
          goto LABEL_57;
        case 5:
          if (v35 + 5 > (unint64_t)v90) {
            goto LABEL_103;
          }
          int v57 = v35;
          int v58 = *(_DWORD *)(*((void *)&v89 + 1) + v41);
          HIDWORD(v90) = v57 + 5;
          if ((unint64_t)(v57 + 5) + 2 > v90) {
            goto LABEL_103;
          }
          int v51 = v58;
          unsigned int v52 = v48 + 7;
LABEL_57:
          HIDWORD(v90) = v52;
          unsigned int v59 = v52;
          int v49 = v51;
          break;
        case 6:
          if (v35 + 5 <= (unint64_t)v90)
          {
            int v49 = *(_DWORD *)(*((void *)&v89 + 1) + v41);
            HIDWORD(v90) = v35 + 5;
            unsigned int v50 = v35 + 8;
            if (v50 <= v90) {
              goto LABEL_60;
            }
          }
          goto LABEL_103;
        case 7:
          if (v41 + 8 > (unint64_t)v90) {
            goto LABEL_103;
          }
          uint64_t v54 = *(void *)(*((void *)&v89 + 1) + v41);
          unsigned int v53 = v48 + 9;
LABEL_63:
          HIDWORD(v90) = v53;
          unsigned int v59 = v53;
          int v49 = v54;
          break;
        default:
          if (v41 >= v90) {
            goto LABEL_103;
          }
          int v49 = *(unsigned __int8 *)(*((void *)&v89 + 1) + v41);
          unsigned int v50 = v35 + 2;
LABEL_60:
          HIDWORD(v90) = v50;
          unsigned int v59 = v50;
          break;
      }
      int v60 = (v39 & 1) != 0 ? v47 : 0;
      unsigned int v44 = v49 | v60;
      unsigned int v43 = v59;
    }
    else
    {
      unsigned int v43 = v35 + 1;
      unsigned int v44 = v40;
    }
    *(_DWORD *)(v34 + 32) = v44;
    if (v43 >= v36) {
      goto LABEL_103;
    }
    uint64_t v45 = v34;
    int v61 = *(char *)(v38 + v43);
    unint64_t v62 = *(unsigned __int8 *)(v38 + v43);
    uint64_t v63 = v43 + 1;
    HIDWORD(v90) = v43 + 1;
    if (v61 < 0)
    {
      uint64_t v65 = (v62 >> 1) & 7;
      unsigned int v66 = v36;
      switch(v65)
      {
        case 1:
          if ((unint64_t)v43 + 3 > v36) {
            goto LABEL_103;
          }
          LODWORD(v38) = *(unsigned __int16 *)(v38 + v63);
          unsigned int v67 = v43 + 3;
          goto LABEL_91;
        case 2:
          if (v43 + 4 > v36) {
            goto LABEL_103;
          }
          int v68 = *(unsigned __int16 *)(v37 + v63) | (*(unsigned __int8 *)(v37 + v63 + 2) << 16);
          HIDWORD(v90) = v43 + 4;
          LODWORD(v38) = v68;
          goto LABEL_92;
        case 3:
          if ((unint64_t)v43 + 5 > v36) {
            goto LABEL_103;
          }
          LODWORD(v38) = *(_DWORD *)(v38 + v63);
          unsigned int v67 = v43 + 5;
          goto LABEL_91;
        case 4:
          if ((unint64_t)v43 + 5 > v36) {
            goto LABEL_103;
          }
          LODWORD(v38) = *(_DWORD *)(v38 + v63);
          HIDWORD(v90) = v43 + 5;
          if (v43 + 5 >= v36) {
            goto LABEL_103;
          }
          unsigned int v67 = v43 + 6;
          goto LABEL_91;
        case 5:
          if ((unint64_t)v43 + 5 > v36) {
            goto LABEL_103;
          }
          LODWORD(v38) = *(_DWORD *)(v38 + v63);
          HIDWORD(v90) = v43 + 5;
          if ((unint64_t)(v43 + 5) + 2 > v36) {
            goto LABEL_103;
          }
          unsigned int v67 = v43 + 7;
          goto LABEL_91;
        case 6:
          if ((unint64_t)v43 + 5 <= v36)
          {
            LODWORD(v38) = *(_DWORD *)(v38 + v63);
            HIDWORD(v90) = v43 + 5;
            unsigned int v67 = v43 + 8;
            if (v43 + 8 <= v66) {
              goto LABEL_91;
            }
          }
          goto LABEL_103;
        case 7:
          if ((unint64_t)v43 + 9 > v36) {
            goto LABEL_103;
          }
          uint64_t v38 = *(void *)(v38 + v63);
          unsigned int v67 = v43 + 9;
          goto LABEL_91;
        default:
          if (v63 >= v36) {
            goto LABEL_103;
          }
          LODWORD(v38) = *(unsigned __int8 *)(v38 + v63);
          unsigned int v67 = v43 + 2;
LABEL_91:
          HIDWORD(v90) = v67;
LABEL_92:
          LODWORD(v69) = 0;
          if (v61) {
            uint64_t v69 = -256 << (8 * v65);
          }
          int v64 = v38 | v69;
          break;
      }
    }
    else
    {
      int v64 = v62;
    }
    *(_DWORD *)(v45 + 36) = v64;
    *(void *)(v45 + 40) = (*(uint64_t (**)(void, uint64_t, const char *, uint64_t))(v89 + 8))(*(void *)v89, 32 * v44, "Deserialized", v42);
    *(unsigned char *)(v45 + 48) = 0;
    *(_OWORD *)uint64_t v45 = 0u;
    *(_OWORD *)(v45 + 16) = 0u;
    unint64_t v70 = *(unsigned int *)(v45 + 32);
    if (v70)
    {
      uint64_t v71 = (char *)a2 + v8;
      unint64_t v72 = 0;
      uint64_t v73 = 0;
      while ((unint64_t)HIDWORD(v90) + 4 <= v90)
      {
        uint64_t v74 = *(unsigned int *)(*((void *)&v89 + 1) + HIDWORD(v90));
        HIDWORD(v90) += 4;
        uint64_t v75 = *(void *)(v45 + 40);
        if (v74 == -1)
        {
          *(void *)(v75 + v73) = 0;
        }
        else
        {
          uint64_t v76 = v75 + v73;
          *(void *)(v75 + v73) = &v71[v74];
          *(void *)(v76 + 8) = deserialize_GLPString((uint64_t)v88);
          *(void *)(v76 + 16) = v77;
          unint64_t v70 = *(unsigned int *)(v45 + 32);
        }
        ++v72;
        v73 += 32;
        if (v72 >= v70) {
          goto LABEL_102;
        }
      }
      goto LABEL_103;
    }
  }
  else
  {
    uint64_t v45 = 0;
  }
LABEL_102:
  *a4 = v45;
  glpDestroyDeserialContext(v88);
  glpDestroyPoolAllocator((uint64_t)v81);
  return *a4 != 0;
}

void *deserializeTypeConversionFields(uint64_t a1, uint64_t a2)
{
  deserializeASTFields(a1, a2);
  v20[0] = MEMORY[0x263EF8330];
  v20[1] = 0x40000000;
  void v20[2] = __deserialize_GLPType_block_invoke;
  void v20[3] = &__block_descriptor_tmp_12;
  v20[4] = a1;
  __n128 result = deserialize_pointer((void *)a1, (uint64_t)v20, (void *)(a2 + 64));
  uint64_t v5 = *(unsigned int *)(a1 + 260);
  unint64_t v6 = *(unsigned int *)(a1 + 256);
  if (v5 >= v6) {
LABEL_30:
  }
    glpDeserialError(a1, 1u);
  uint64_t v7 = *(void *)(a1 + 248);
  int v8 = *(char *)(v7 + v5);
  unint64_t v9 = *(unsigned __int8 *)(v7 + v5);
  uint64_t v10 = v5 + 1;
  *(_DWORD *)(a1 + 260) = v5 + 1;
  if (v8 < 0)
  {
    uint64_t v11 = (v9 >> 1) & 7;
    switch(v11)
    {
      case 1:
        if (v5 + 3 > v6) {
          goto LABEL_30;
        }
        unint64_t v12 = *(unsigned __int16 *)(v7 + v10);
        unsigned int v13 = v5 + 3;
        goto LABEL_24;
      case 2:
        unsigned int v13 = v5 + 4;
        if (v13 > v6) {
          goto LABEL_30;
        }
        unint64_t v12 = *(unsigned __int16 *)(v7 + v10) | ((unint64_t)*(unsigned __int8 *)(v7 + v10 + 2) << 16);
        goto LABEL_24;
      case 3:
        if (v5 + 5 > v6) {
          goto LABEL_30;
        }
        unint64_t v12 = *(unsigned int *)(v7 + v10);
        unsigned int v13 = v5 + 5;
        goto LABEL_24;
      case 4:
        if (v5 + 5 > v6) {
          goto LABEL_30;
        }
        uint64_t v14 = *(unsigned int *)(v7 + v10);
        *(_DWORD *)(a1 + 260) = v5 + 5;
        if ((int)v5 + 5 >= v6) {
          goto LABEL_30;
        }
        uint64_t v15 = *(unsigned __int8 *)(v7 + (v5 + 5));
        unsigned int v16 = v5 + 6;
        goto LABEL_21;
      case 5:
        if (v5 + 5 > v6) {
          goto LABEL_30;
        }
        uint64_t v14 = *(unsigned int *)(v7 + v10);
        uint64_t v17 = (v5 + 5);
        *(_DWORD *)(a1 + 260) = v17;
        if (v17 + 2 > v6) {
          goto LABEL_30;
        }
        uint64_t v15 = *(unsigned __int16 *)(v7 + v17);
        unsigned int v16 = v5 + 7;
        goto LABEL_21;
      case 6:
        if (v5 + 5 > v6) {
          goto LABEL_30;
        }
        uint64_t v14 = *(unsigned int *)(v7 + v10);
        unsigned int v18 = v5 + 5;
        *(_DWORD *)(a1 + 260) = v5 + 5;
        unsigned int v16 = v5 + 8;
        if (v16 > v6) {
          goto LABEL_30;
        }
        uint64_t v15 = *(unsigned __int16 *)(v7 + v18) | (*(unsigned __int8 *)(v7 + v18 + 2) << 16);
LABEL_21:
        *(_DWORD *)(a1 + 260) = v16;
        unint64_t v12 = v14 | (v15 << 32);
        goto LABEL_25;
      case 7:
        if (v5 + 9 > v6) {
          goto LABEL_30;
        }
        unint64_t v12 = *(void *)(v7 + v10);
        unsigned int v13 = v5 + 9;
        goto LABEL_24;
      default:
        if (v10 >= v6) {
          goto LABEL_30;
        }
        unint64_t v12 = *(unsigned __int8 *)(v7 + v10);
        unsigned int v13 = v5 + 2;
LABEL_24:
        *(_DWORD *)(a1 + 260) = v13;
LABEL_25:
        if (v8) {
          uint64_t v19 = -256 << (8 * v11);
        }
        else {
          uint64_t v19 = 0;
        }
        unint64_t v9 = v12 | v19;
        break;
    }
  }
  *(void *)(a2 + 72) = v9;
  return result;
}

uint64_t deserializeVariableIdentifierFields(uint64_t a1, uint64_t a2)
{
  deserializeASTFields(a1, a2);
  uint64_t result = deserialize_GLPString(a1);
  *(void *)(a2 + 64) = result;
  *(void *)(a2 + 72) = v5;
  return result;
}

uint64_t deserializeTypeIdentifierFields(uint64_t a1, uint64_t a2)
{
  deserializeASTFields(a1, a2);
  uint64_t result = deserialize_GLPString(a1);
  *(void *)(a2 + 64) = result;
  *(void *)(a2 + 72) = v5;
  return result;
}

void *deserializeConstantFields(void *a1, uint64_t a2)
{
  deserializeASTFields((uint64_t)a1, a2);
  uint64_t v6 = MEMORY[0x263EF8330];
  uint64_t v7 = 0x40000000;
  int v8 = (char *(*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__deserialize_GLPType_block_invoke;
  unint64_t v9 = &__block_descriptor_tmp_12;
  uint64_t v10 = a1;
  deserialize_pointer(a1, (uint64_t)&v6, (void *)(a2 + 64));
  uint64_t Type = glpConstantNodeGetType(a2);
  uint64_t v6 = MEMORY[0x263EF8330];
  uint64_t v7 = 0x40000000;
  int v8 = __deserialize_GLPValue_block_invoke;
  unint64_t v9 = &__block_descriptor_tmp_2;
  uint64_t v10 = a1;
  uint64_t v11 = Type;
  return deserialize_pointer(a1, (uint64_t)&v6, (void *)(a2 + 72));
}

uint64_t deserializeFieldAccessFields(uint64_t a1, uint64_t a2)
{
  deserializeASTFields(a1, a2);
  uint64_t result = deserialize_GLPString(a1);
  *(void *)(a2 + 64) = result;
  *(void *)(a2 + 72) = v5;
  return result;
}

void *deserializeFunctionCallFields(void *a1, void *a2)
{
  deserializeCallFields((uint64_t)a1, (uint64_t)a2);
  a2[9] = deserialize_GLPString((uint64_t)a1);
  a2[10] = v4;
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 0x40000000;
  v6[2] = __deserialize_GLPFunctionObject_block_invoke;
  v6[3] = &__block_descriptor_tmp_5;
  v6[4] = a1;
  return deserialize_pointer(a1, (uint64_t)v6, a2 + 11);
}

uint64_t deserializeSubroutineArrayCallFields(uint64_t a1, uint64_t a2)
{
  deserializeCallFields(a1, a2);
  uint64_t result = deserialize_GLPString(a1);
  *(void *)(a2 + 72) = result;
  *(void *)(a2 + 80) = v5;
  return result;
}

uint64_t deserializeMethodCallFields(uint64_t a1, uint64_t a2)
{
  deserializeCallFields(a1, a2);
  uint64_t result = deserialize_GLPString(a1);
  *(void *)(a2 + 72) = result;
  *(void *)(a2 + 80) = v5;
  return result;
}

void deserializeEqualFields(uint64_t a1, uint64_t a2)
{
  deserializeASTFields(a1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 260);
  if (v4 >= *(_DWORD *)(a1 + 256)) {
    glpDeserialError(a1, 1u);
  }
  char v5 = *(unsigned char *)(*(void *)(a1 + 248) + v4);
  *(_DWORD *)(a1 + 260) = v4 + 1;
  *(unsigned char *)(a2 + 64) = v5;
}

void deserializeNotEqualFields(uint64_t a1, uint64_t a2)
{
  deserializeASTFields(a1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 260);
  if (v4 >= *(_DWORD *)(a1 + 256)) {
    glpDeserialError(a1, 1u);
  }
  char v5 = *(unsigned char *)(*(void *)(a1 + 248) + v4);
  *(_DWORD *)(a1 + 260) = v4 + 1;
  *(unsigned char *)(a2 + 64) = v5;
}

void deserializeAssignFields(uint64_t a1, uint64_t a2)
{
  deserializeASTFields(a1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 260);
  if (v4 >= *(_DWORD *)(a1 + 256)) {
    glpDeserialError(a1, 1u);
  }
  char v5 = *(unsigned char *)(*(void *)(a1 + 248) + v4);
  *(_DWORD *)(a1 + 260) = v4 + 1;
  *(unsigned char *)(a2 + 64) = v5;
}

void *deserializeReadInputFields(void *a1, uint64_t a2)
{
  deserializeASTFields((uint64_t)a1, a2);
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 0x40000000;
  v5[2] = __deserialize_GLPVariableObject_block_invoke;
  v5[3] = &__block_descriptor_tmp_6;
  v5[4] = a1;
  return deserialize_pointer(a1, (uint64_t)v5, (void *)(a2 + 64));
}

void *deserializeWriteOutputFields(void *a1, uint64_t a2)
{
  deserializeASTFields((uint64_t)a1, a2);
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 0x40000000;
  v5[2] = __deserialize_GLPVariableObject_block_invoke;
  v5[3] = &__block_descriptor_tmp_6;
  v5[4] = a1;
  return deserialize_pointer(a1, (uint64_t)v5, (void *)(a2 + 64));
}

void deserializeCommaExprFields(uint64_t a1, uint64_t a2)
{
  deserializeASTFields(a1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 260);
  if (v4 >= *(_DWORD *)(a1 + 256)
    || (char v5 = *(unsigned char *)(*(void *)(a1 + 248) + v4),
        *(_DWORD *)(a1 + 260) = v4 + 1,
        *(unsigned char *)(a2 + 64) = v5,
        uint64_t v6 = *(unsigned int *)(a1 + 260),
        unint64_t v7 = *(unsigned int *)(a1 + 256),
        v6 >= v7))
  {
LABEL_29:
    glpDeserialError(a1, 1u);
  }
  uint64_t v8 = *(void *)(a1 + 248);
  int v9 = *(char *)(v8 + v6);
  unint64_t v10 = *(unsigned __int8 *)(v8 + v6);
  uint64_t v11 = v6 + 1;
  *(_DWORD *)(a1 + 260) = v6 + 1;
  if (v9 < 0)
  {
    uint64_t v12 = (v10 >> 1) & 7;
    switch(v12)
    {
      case 1:
        if (v6 + 3 > v7) {
          goto LABEL_29;
        }
        LODWORD(v8) = *(unsigned __int16 *)(v8 + v11);
        unsigned int v13 = v6 + 3;
        break;
      case 2:
        unsigned int v13 = v6 + 4;
        if (v13 > v7) {
          goto LABEL_29;
        }
        LODWORD(v8) = *(unsigned __int16 *)(v8 + v11) | (*(unsigned __int8 *)(v8 + v11 + 2) << 16);
        break;
      case 3:
        if (v6 + 5 > v7) {
          goto LABEL_29;
        }
        LODWORD(v8) = *(_DWORD *)(v8 + v11);
        unsigned int v13 = v6 + 5;
        break;
      case 4:
        if (v6 + 5 > v7) {
          goto LABEL_29;
        }
        LODWORD(v8) = *(_DWORD *)(v8 + v11);
        *(_DWORD *)(a1 + 260) = v6 + 5;
        if ((int)v6 + 5 >= v7) {
          goto LABEL_29;
        }
        unsigned int v13 = v6 + 6;
        break;
      case 5:
        if (v6 + 5 > v7) {
          goto LABEL_29;
        }
        LODWORD(v8) = *(_DWORD *)(v8 + v11);
        uint64_t v14 = (v6 + 5);
        *(_DWORD *)(a1 + 260) = v14;
        if (v14 + 2 > v7) {
          goto LABEL_29;
        }
        unsigned int v13 = v6 + 7;
        break;
      case 6:
        if (v6 + 5 > v7) {
          goto LABEL_29;
        }
        LODWORD(v8) = *(_DWORD *)(v8 + v11);
        *(_DWORD *)(a1 + 260) = v6 + 5;
        unsigned int v13 = v6 + 8;
        if (v13 > v7) {
          goto LABEL_29;
        }
        break;
      case 7:
        if (v6 + 9 > v7) {
          goto LABEL_29;
        }
        uint64_t v8 = *(void *)(v8 + v11);
        unsigned int v13 = v6 + 9;
        break;
      default:
        if (v11 >= v7) {
          goto LABEL_29;
        }
        LODWORD(v8) = *(unsigned __int8 *)(v8 + v11);
        unsigned int v13 = v6 + 2;
        break;
    }
    *(_DWORD *)(a1 + 260) = v13;
    if (v9) {
      uint64_t v15 = -256 << (8 * v12);
    }
    else {
      LODWORD(v15) = 0;
    }
    LODWORD(v10) = v8 | v15;
  }
  *(_DWORD *)(a2 + 68) = v10;
}

void *deserializeParameterDeclarationFields(void *a1, void *a2)
{
  deserializeASTFields((uint64_t)a1, (uint64_t)a2);
  a2[8] = deserialize_GLPString((uint64_t)a1);
  a2[9] = v4;
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 0x40000000;
  v6[2] = __deserialize_GLPVariableObject_block_invoke;
  v6[3] = &__block_descriptor_tmp_6;
  v6[4] = a1;
  return deserialize_pointer(a1, (uint64_t)v6, a2 + 10);
}

void *deserializeFunctionPrototypeFields(uint64_t a1, uint64_t a2)
{
  deserializeASTFields(a1, a2);
  *(void *)(a2 + 64) = deserialize_GLPString(a1);
  *(void *)(a2 + 72) = v4;
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 0x40000000;
  void v16[2] = __deserialize_GLPFunctionObject_block_invoke;
  void v16[3] = &__block_descriptor_tmp_5;
  v16[4] = a1;
  uint64_t result = deserialize_pointer((void *)a1, (uint64_t)v16, (void *)(a2 + 80));
  uint64_t v6 = *(unsigned int *)(a1 + 260);
  unint64_t v7 = *(unsigned int *)(a1 + 256);
  if (v6 >= v7) {
LABEL_28:
  }
    glpDeserialError(a1, 1u);
  uint64_t v8 = *(void *)(a1 + 248);
  int v9 = *(char *)(v8 + v6);
  unint64_t v10 = *(unsigned __int8 *)(v8 + v6);
  uint64_t v11 = v6 + 1;
  *(_DWORD *)(a1 + 260) = v6 + 1;
  if (v9 < 0)
  {
    uint64_t v12 = (v10 >> 1) & 7;
    switch(v12)
    {
      case 1:
        if (v6 + 3 > v7) {
          goto LABEL_28;
        }
        LODWORD(v8) = *(unsigned __int16 *)(v8 + v11);
        unsigned int v13 = v6 + 3;
        break;
      case 2:
        unsigned int v13 = v6 + 4;
        if (v13 > v7) {
          goto LABEL_28;
        }
        LODWORD(v8) = *(unsigned __int16 *)(v8 + v11) | (*(unsigned __int8 *)(v8 + v11 + 2) << 16);
        break;
      case 3:
        if (v6 + 5 > v7) {
          goto LABEL_28;
        }
        LODWORD(v8) = *(_DWORD *)(v8 + v11);
        unsigned int v13 = v6 + 5;
        break;
      case 4:
        if (v6 + 5 > v7) {
          goto LABEL_28;
        }
        LODWORD(v8) = *(_DWORD *)(v8 + v11);
        *(_DWORD *)(a1 + 260) = v6 + 5;
        if ((int)v6 + 5 >= v7) {
          goto LABEL_28;
        }
        unsigned int v13 = v6 + 6;
        break;
      case 5:
        if (v6 + 5 > v7) {
          goto LABEL_28;
        }
        LODWORD(v8) = *(_DWORD *)(v8 + v11);
        uint64_t v14 = (v6 + 5);
        *(_DWORD *)(a1 + 260) = v14;
        if (v14 + 2 > v7) {
          goto LABEL_28;
        }
        unsigned int v13 = v6 + 7;
        break;
      case 6:
        if (v6 + 5 > v7) {
          goto LABEL_28;
        }
        LODWORD(v8) = *(_DWORD *)(v8 + v11);
        *(_DWORD *)(a1 + 260) = v6 + 5;
        unsigned int v13 = v6 + 8;
        if (v13 > v7) {
          goto LABEL_28;
        }
        break;
      case 7:
        if (v6 + 9 > v7) {
          goto LABEL_28;
        }
        uint64_t v8 = *(void *)(v8 + v11);
        unsigned int v13 = v6 + 9;
        break;
      default:
        if (v11 >= v7) {
          goto LABEL_28;
        }
        LODWORD(v8) = *(unsigned __int8 *)(v8 + v11);
        unsigned int v13 = v6 + 2;
        break;
    }
    *(_DWORD *)(a1 + 260) = v13;
    if (v9) {
      uint64_t v15 = -256 << (8 * v12);
    }
    else {
      LODWORD(v15) = 0;
    }
    LODWORD(v10) = v8 | v15;
  }
  *(_DWORD *)(a2 + 88) = v10;
  return result;
}

void *deserializeVariableDeclarationFields(uint64_t a1, uint64_t a2)
{
  deserializeASTFields(a1, a2);
  *(void *)(a2 + 64) = deserialize_GLPString(a1);
  *(void *)(a2 + 72) = v4;
  uint64_t v5 = *(unsigned int *)(a1 + 260);
  if (v5 >= *(_DWORD *)(a1 + 256)) {
    glpDeserialError(a1, 1u);
  }
  char v6 = *(unsigned char *)(*(void *)(a1 + 248) + v5);
  *(_DWORD *)(a1 + 260) = v5 + 1;
  *(unsigned char *)(a2 + 80) = v6;
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 0x40000000;
  void v8[2] = __deserialize_GLPVariableObject_block_invoke;
  v8[3] = &__block_descriptor_tmp_6;
  _OWORD v8[4] = a1;
  return deserialize_pointer((void *)a1, (uint64_t)v8, (void *)(a2 + 88));
}

void deserializeVariableDeclarationGroupFields(uint64_t a1, uint64_t a2)
{
  deserializeASTFields(a1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 260);
  unint64_t v5 = *(unsigned int *)(a1 + 256);
  if (v4 >= v5) {
LABEL_28:
  }
    glpDeserialError(a1, 1u);
  uint64_t v6 = *(void *)(a1 + 248);
  int v7 = *(char *)(v6 + v4);
  unint64_t v8 = *(unsigned __int8 *)(v6 + v4);
  uint64_t v9 = v4 + 1;
  *(_DWORD *)(a1 + 260) = v4 + 1;
  if (v7 < 0)
  {
    uint64_t v10 = (v8 >> 1) & 7;
    switch(v10)
    {
      case 1:
        if (v4 + 3 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int16 *)(v6 + v9);
        unsigned int v11 = v4 + 3;
        break;
      case 2:
        unsigned int v11 = v4 + 4;
        if (v11 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int16 *)(v6 + v9) | (*(unsigned __int8 *)(v6 + v9 + 2) << 16);
        break;
      case 3:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        unsigned int v11 = v4 + 5;
        break;
      case 4:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        *(_DWORD *)(a1 + 260) = v4 + 5;
        if ((int)v4 + 5 >= v5) {
          goto LABEL_28;
        }
        unsigned int v11 = v4 + 6;
        break;
      case 5:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        uint64_t v12 = (v4 + 5);
        *(_DWORD *)(a1 + 260) = v12;
        if (v12 + 2 > v5) {
          goto LABEL_28;
        }
        unsigned int v11 = v4 + 7;
        break;
      case 6:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        *(_DWORD *)(a1 + 260) = v4 + 5;
        unsigned int v11 = v4 + 8;
        if (v11 > v5) {
          goto LABEL_28;
        }
        break;
      case 7:
        if (v4 + 9 > v5) {
          goto LABEL_28;
        }
        uint64_t v6 = *(void *)(v6 + v9);
        unsigned int v11 = v4 + 9;
        break;
      default:
        if (v9 >= v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int8 *)(v6 + v9);
        unsigned int v11 = v4 + 2;
        break;
    }
    *(_DWORD *)(a1 + 260) = v11;
    if (v7) {
      uint64_t v13 = -256 << (8 * v10);
    }
    else {
      LODWORD(v13) = 0;
    }
    LODWORD(v8) = v6 | v13;
  }
  *(_DWORD *)(a2 + 64) = v8;
}

uint64_t deserializeQualifiedDeclarationFields(uint64_t a1, uint64_t a2)
{
  deserializeASTFields(a1, a2);
  uint64_t result = deserialize_GLPString(a1);
  *(void *)(a2 + 64) = result;
  *(void *)(a2 + 72) = v5;
  return result;
}

void deserializeQualifiedDeclarationGroupFields(uint64_t a1, uint64_t a2)
{
  deserializeASTFields(a1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 260);
  unint64_t v5 = *(unsigned int *)(a1 + 256);
  if (v4 >= v5) {
LABEL_28:
  }
    glpDeserialError(a1, 1u);
  uint64_t v6 = *(void *)(a1 + 248);
  int v7 = *(char *)(v6 + v4);
  unint64_t v8 = *(unsigned __int8 *)(v6 + v4);
  uint64_t v9 = v4 + 1;
  *(_DWORD *)(a1 + 260) = v4 + 1;
  if (v7 < 0)
  {
    uint64_t v10 = (v8 >> 1) & 7;
    switch(v10)
    {
      case 1:
        if (v4 + 3 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int16 *)(v6 + v9);
        unsigned int v11 = v4 + 3;
        break;
      case 2:
        unsigned int v11 = v4 + 4;
        if (v11 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int16 *)(v6 + v9) | (*(unsigned __int8 *)(v6 + v9 + 2) << 16);
        break;
      case 3:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        unsigned int v11 = v4 + 5;
        break;
      case 4:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        *(_DWORD *)(a1 + 260) = v4 + 5;
        if ((int)v4 + 5 >= v5) {
          goto LABEL_28;
        }
        unsigned int v11 = v4 + 6;
        break;
      case 5:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        uint64_t v12 = (v4 + 5);
        *(_DWORD *)(a1 + 260) = v12;
        if (v12 + 2 > v5) {
          goto LABEL_28;
        }
        unsigned int v11 = v4 + 7;
        break;
      case 6:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        *(_DWORD *)(a1 + 260) = v4 + 5;
        unsigned int v11 = v4 + 8;
        if (v11 > v5) {
          goto LABEL_28;
        }
        break;
      case 7:
        if (v4 + 9 > v5) {
          goto LABEL_28;
        }
        uint64_t v6 = *(void *)(v6 + v9);
        unsigned int v11 = v4 + 9;
        break;
      default:
        if (v9 >= v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int8 *)(v6 + v9);
        unsigned int v11 = v4 + 2;
        break;
    }
    *(_DWORD *)(a1 + 260) = v11;
    if (v7) {
      uint64_t v13 = -256 << (8 * v10);
    }
    else {
      LODWORD(v13) = 0;
    }
    LODWORD(v8) = v6 | v13;
  }
  *(_DWORD *)(a2 + 64) = v8;
}

void deserializePrimitiveTypeFields(uint64_t a1, uint64_t a2)
{
  deserializeASTFields(a1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 260);
  unint64_t v5 = *(unsigned int *)(a1 + 256);
  if (v4 >= v5) {
LABEL_28:
  }
    glpDeserialError(a1, 1u);
  uint64_t v6 = *(void *)(a1 + 248);
  int v7 = *(char *)(v6 + v4);
  unint64_t v8 = *(unsigned __int8 *)(v6 + v4);
  uint64_t v9 = v4 + 1;
  *(_DWORD *)(a1 + 260) = v4 + 1;
  if (v7 < 0)
  {
    uint64_t v10 = (v8 >> 1) & 7;
    switch(v10)
    {
      case 1:
        if (v4 + 3 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int16 *)(v6 + v9);
        unsigned int v11 = v4 + 3;
        break;
      case 2:
        unsigned int v11 = v4 + 4;
        if (v11 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int16 *)(v6 + v9) | (*(unsigned __int8 *)(v6 + v9 + 2) << 16);
        break;
      case 3:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        unsigned int v11 = v4 + 5;
        break;
      case 4:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        *(_DWORD *)(a1 + 260) = v4 + 5;
        if ((int)v4 + 5 >= v5) {
          goto LABEL_28;
        }
        unsigned int v11 = v4 + 6;
        break;
      case 5:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        uint64_t v12 = (v4 + 5);
        *(_DWORD *)(a1 + 260) = v12;
        if (v12 + 2 > v5) {
          goto LABEL_28;
        }
        unsigned int v11 = v4 + 7;
        break;
      case 6:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        *(_DWORD *)(a1 + 260) = v4 + 5;
        unsigned int v11 = v4 + 8;
        if (v11 > v5) {
          goto LABEL_28;
        }
        break;
      case 7:
        if (v4 + 9 > v5) {
          goto LABEL_28;
        }
        uint64_t v6 = *(void *)(v6 + v9);
        unsigned int v11 = v4 + 9;
        break;
      default:
        if (v9 >= v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int8 *)(v6 + v9);
        unsigned int v11 = v4 + 2;
        break;
    }
    *(_DWORD *)(a1 + 260) = v11;
    if (v7) {
      uint64_t v13 = -256 << (8 * v10);
    }
    else {
      LODWORD(v13) = 0;
    }
    LODWORD(v8) = v6 | v13;
  }
  *(_DWORD *)(a2 + 64) = v8;
}

uint64_t deserializeFieldDeclarationFields(uint64_t a1, uint64_t a2)
{
  deserializeASTFields(a1, a2);
  uint64_t result = deserialize_GLPString(a1);
  *(void *)(a2 + 64) = result;
  *(void *)(a2 + 72) = v5;
  return result;
}

uint64_t deserializeStructTypeFields(uint64_t a1, uint64_t a2)
{
  deserializeStructureFields(a1, a2);
  uint64_t result = deserialize_GLPString(a1);
  *(void *)(a2 + 72) = result;
  *(void *)(a2 + 80) = v5;
  return result;
}

void *deserializeInterfaceBlockFields(uint64_t a1, uint64_t a2)
{
  deserializeStructureFields(a1, a2);
  *(void *)(a2 + 72) = deserialize_GLPString(a1);
  *(void *)(a2 + 80) = v4;
  *(void *)(a2 + 88) = deserialize_GLPString(a1);
  *(void *)(a2 + 96) = v5;
  uint64_t v6 = *(unsigned int *)(a1 + 260);
  if (v6 >= *(_DWORD *)(a1 + 256)
    || (char v7 = *(unsigned char *)(*(void *)(a1 + 248) + v6),
        *(_DWORD *)(a1 + 260) = v6 + 1,
        *(unsigned char *)(a2 + 104) = v7,
        uint64_t v8 = *(unsigned int *)(a1 + 260),
        v8 >= *(_DWORD *)(a1 + 256)))
  {
    glpDeserialError(a1, 1u);
  }
  char v9 = *(unsigned char *)(*(void *)(a1 + 248) + v8);
  *(_DWORD *)(a1 + 260) = v8 + 1;
  *(unsigned char *)(a2 + 105) = v9;
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 0x40000000;
  v11[2] = __deserialize_GLPInterfaceBlockObject_block_invoke;
  _OWORD v11[3] = &__block_descriptor_tmp_9;
  v11[4] = a1;
  return deserialize_pointer((void *)a1, (uint64_t)v11, (void *)(a2 + 112));
}

void deserializeLayoutTypeFields(uint64_t a1, uint64_t a2)
{
  deserializeASTFields(a1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 260);
  unint64_t v5 = *(unsigned int *)(a1 + 256);
  if (v4 >= v5) {
LABEL_28:
  }
    glpDeserialError(a1, 1u);
  uint64_t v6 = *(void *)(a1 + 248);
  int v7 = *(char *)(v6 + v4);
  unint64_t v8 = *(unsigned __int8 *)(v6 + v4);
  uint64_t v9 = v4 + 1;
  *(_DWORD *)(a1 + 260) = v4 + 1;
  if (v7 < 0)
  {
    uint64_t v10 = (v8 >> 1) & 7;
    switch(v10)
    {
      case 1:
        if (v4 + 3 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int16 *)(v6 + v9);
        unsigned int v11 = v4 + 3;
        break;
      case 2:
        unsigned int v11 = v4 + 4;
        if (v11 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int16 *)(v6 + v9) | (*(unsigned __int8 *)(v6 + v9 + 2) << 16);
        break;
      case 3:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        unsigned int v11 = v4 + 5;
        break;
      case 4:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        *(_DWORD *)(a1 + 260) = v4 + 5;
        if ((int)v4 + 5 >= v5) {
          goto LABEL_28;
        }
        unsigned int v11 = v4 + 6;
        break;
      case 5:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        uint64_t v12 = (v4 + 5);
        *(_DWORD *)(a1 + 260) = v12;
        if (v12 + 2 > v5) {
          goto LABEL_28;
        }
        unsigned int v11 = v4 + 7;
        break;
      case 6:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        *(_DWORD *)(a1 + 260) = v4 + 5;
        unsigned int v11 = v4 + 8;
        if (v11 > v5) {
          goto LABEL_28;
        }
        break;
      case 7:
        if (v4 + 9 > v5) {
          goto LABEL_28;
        }
        uint64_t v6 = *(void *)(v6 + v9);
        unsigned int v11 = v4 + 9;
        break;
      default:
        if (v9 >= v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int8 *)(v6 + v9);
        unsigned int v11 = v4 + 2;
        break;
    }
    *(_DWORD *)(a1 + 260) = v11;
    if (v7) {
      uint64_t v13 = -256 << (8 * v10);
    }
    else {
      LODWORD(v13) = 0;
    }
    LODWORD(v8) = v6 | v13;
  }
  *(_DWORD *)(a2 + 64) = v8;
}

void deserializeKeywordQualifierFields(uint64_t a1, uint64_t a2)
{
  deserializeASTFields(a1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 260);
  unint64_t v5 = *(unsigned int *)(a1 + 256);
  if (v4 >= v5) {
LABEL_28:
  }
    glpDeserialError(a1, 1u);
  uint64_t v6 = *(void *)(a1 + 248);
  int v7 = *(char *)(v6 + v4);
  unint64_t v8 = *(unsigned __int8 *)(v6 + v4);
  uint64_t v9 = v4 + 1;
  *(_DWORD *)(a1 + 260) = v4 + 1;
  if (v7 < 0)
  {
    uint64_t v10 = (v8 >> 1) & 7;
    switch(v10)
    {
      case 1:
        if (v4 + 3 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int16 *)(v6 + v9);
        unsigned int v11 = v4 + 3;
        break;
      case 2:
        unsigned int v11 = v4 + 4;
        if (v11 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int16 *)(v6 + v9) | (*(unsigned __int8 *)(v6 + v9 + 2) << 16);
        break;
      case 3:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        unsigned int v11 = v4 + 5;
        break;
      case 4:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        *(_DWORD *)(a1 + 260) = v4 + 5;
        if ((int)v4 + 5 >= v5) {
          goto LABEL_28;
        }
        unsigned int v11 = v4 + 6;
        break;
      case 5:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        uint64_t v12 = (v4 + 5);
        *(_DWORD *)(a1 + 260) = v12;
        if (v12 + 2 > v5) {
          goto LABEL_28;
        }
        unsigned int v11 = v4 + 7;
        break;
      case 6:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        *(_DWORD *)(a1 + 260) = v4 + 5;
        unsigned int v11 = v4 + 8;
        if (v11 > v5) {
          goto LABEL_28;
        }
        break;
      case 7:
        if (v4 + 9 > v5) {
          goto LABEL_28;
        }
        uint64_t v6 = *(void *)(v6 + v9);
        unsigned int v11 = v4 + 9;
        break;
      default:
        if (v9 >= v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int8 *)(v6 + v9);
        unsigned int v11 = v4 + 2;
        break;
    }
    *(_DWORD *)(a1 + 260) = v11;
    if (v7) {
      uint64_t v13 = -256 << (8 * v10);
    }
    else {
      LODWORD(v13) = 0;
    }
    LODWORD(v8) = v6 | v13;
  }
  *(_DWORD *)(a2 + 64) = v8;
}

void deserializeLayoutQualifierFields(uint64_t a1, uint64_t a2)
{
  deserializeASTFields(a1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 260);
  unint64_t v5 = *(unsigned int *)(a1 + 256);
  if (v4 >= v5) {
LABEL_28:
  }
    glpDeserialError(a1, 1u);
  uint64_t v6 = *(void *)(a1 + 248);
  int v7 = *(char *)(v6 + v4);
  unint64_t v8 = *(unsigned __int8 *)(v6 + v4);
  uint64_t v9 = v4 + 1;
  *(_DWORD *)(a1 + 260) = v4 + 1;
  if (v7 < 0)
  {
    uint64_t v10 = (v8 >> 1) & 7;
    switch(v10)
    {
      case 1:
        if (v4 + 3 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int16 *)(v6 + v9);
        unsigned int v11 = v4 + 3;
        break;
      case 2:
        unsigned int v11 = v4 + 4;
        if (v11 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int16 *)(v6 + v9) | (*(unsigned __int8 *)(v6 + v9 + 2) << 16);
        break;
      case 3:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        unsigned int v11 = v4 + 5;
        break;
      case 4:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        *(_DWORD *)(a1 + 260) = v4 + 5;
        if ((int)v4 + 5 >= v5) {
          goto LABEL_28;
        }
        unsigned int v11 = v4 + 6;
        break;
      case 5:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        uint64_t v12 = (v4 + 5);
        *(_DWORD *)(a1 + 260) = v12;
        if (v12 + 2 > v5) {
          goto LABEL_28;
        }
        unsigned int v11 = v4 + 7;
        break;
      case 6:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        *(_DWORD *)(a1 + 260) = v4 + 5;
        unsigned int v11 = v4 + 8;
        if (v11 > v5) {
          goto LABEL_28;
        }
        break;
      case 7:
        if (v4 + 9 > v5) {
          goto LABEL_28;
        }
        uint64_t v6 = *(void *)(v6 + v9);
        unsigned int v11 = v4 + 9;
        break;
      default:
        if (v9 >= v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int8 *)(v6 + v9);
        unsigned int v11 = v4 + 2;
        break;
    }
    *(_DWORD *)(a1 + 260) = v11;
    if (v7) {
      uint64_t v13 = -256 << (8 * v10);
    }
    else {
      LODWORD(v13) = 0;
    }
    LODWORD(v8) = v6 | v13;
  }
  *(_DWORD *)(a2 + 64) = v8;
}

void deserializeSubroutineTypeListFields(uint64_t a1, uint64_t a2)
{
  deserializeASTFields(a1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 260);
  unint64_t v5 = *(unsigned int *)(a1 + 256);
  if (v4 >= v5) {
LABEL_28:
  }
    glpDeserialError(a1, 1u);
  uint64_t v6 = *(void *)(a1 + 248);
  int v7 = *(char *)(v6 + v4);
  unint64_t v8 = *(unsigned __int8 *)(v6 + v4);
  uint64_t v9 = v4 + 1;
  *(_DWORD *)(a1 + 260) = v4 + 1;
  if (v7 < 0)
  {
    uint64_t v10 = (v8 >> 1) & 7;
    switch(v10)
    {
      case 1:
        if (v4 + 3 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int16 *)(v6 + v9);
        unsigned int v11 = v4 + 3;
        break;
      case 2:
        unsigned int v11 = v4 + 4;
        if (v11 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int16 *)(v6 + v9) | (*(unsigned __int8 *)(v6 + v9 + 2) << 16);
        break;
      case 3:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        unsigned int v11 = v4 + 5;
        break;
      case 4:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        *(_DWORD *)(a1 + 260) = v4 + 5;
        if ((int)v4 + 5 >= v5) {
          goto LABEL_28;
        }
        unsigned int v11 = v4 + 6;
        break;
      case 5:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        uint64_t v12 = (v4 + 5);
        *(_DWORD *)(a1 + 260) = v12;
        if (v12 + 2 > v5) {
          goto LABEL_28;
        }
        unsigned int v11 = v4 + 7;
        break;
      case 6:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        *(_DWORD *)(a1 + 260) = v4 + 5;
        unsigned int v11 = v4 + 8;
        if (v11 > v5) {
          goto LABEL_28;
        }
        break;
      case 7:
        if (v4 + 9 > v5) {
          goto LABEL_28;
        }
        uint64_t v6 = *(void *)(v6 + v9);
        unsigned int v11 = v4 + 9;
        break;
      default:
        if (v9 >= v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int8 *)(v6 + v9);
        unsigned int v11 = v4 + 2;
        break;
    }
    *(_DWORD *)(a1 + 260) = v11;
    if (v7) {
      uint64_t v13 = -256 << (8 * v10);
    }
    else {
      LODWORD(v13) = 0;
    }
    LODWORD(v8) = v6 | v13;
  }
  *(_DWORD *)(a2 + 64) = v8;
}

void deserializeQualifierListFields(uint64_t a1, uint64_t a2)
{
  deserializeASTFields(a1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 260);
  unint64_t v5 = *(unsigned int *)(a1 + 256);
  if (v4 >= v5) {
LABEL_28:
  }
    glpDeserialError(a1, 1u);
  uint64_t v6 = *(void *)(a1 + 248);
  int v7 = *(char *)(v6 + v4);
  unint64_t v8 = *(unsigned __int8 *)(v6 + v4);
  uint64_t v9 = v4 + 1;
  *(_DWORD *)(a1 + 260) = v4 + 1;
  if (v7 < 0)
  {
    uint64_t v10 = (v8 >> 1) & 7;
    switch(v10)
    {
      case 1:
        if (v4 + 3 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int16 *)(v6 + v9);
        unsigned int v11 = v4 + 3;
        break;
      case 2:
        unsigned int v11 = v4 + 4;
        if (v11 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int16 *)(v6 + v9) | (*(unsigned __int8 *)(v6 + v9 + 2) << 16);
        break;
      case 3:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        unsigned int v11 = v4 + 5;
        break;
      case 4:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        *(_DWORD *)(a1 + 260) = v4 + 5;
        if ((int)v4 + 5 >= v5) {
          goto LABEL_28;
        }
        unsigned int v11 = v4 + 6;
        break;
      case 5:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        uint64_t v12 = (v4 + 5);
        *(_DWORD *)(a1 + 260) = v12;
        if (v12 + 2 > v5) {
          goto LABEL_28;
        }
        unsigned int v11 = v4 + 7;
        break;
      case 6:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        *(_DWORD *)(a1 + 260) = v4 + 5;
        unsigned int v11 = v4 + 8;
        if (v11 > v5) {
          goto LABEL_28;
        }
        break;
      case 7:
        if (v4 + 9 > v5) {
          goto LABEL_28;
        }
        uint64_t v6 = *(void *)(v6 + v9);
        unsigned int v11 = v4 + 9;
        break;
      default:
        if (v9 >= v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int8 *)(v6 + v9);
        unsigned int v11 = v4 + 2;
        break;
    }
    *(_DWORD *)(a1 + 260) = v11;
    if (v7) {
      uint64_t v13 = -256 << (8 * v10);
    }
    else {
      LODWORD(v13) = 0;
    }
    LODWORD(v8) = v6 | v13;
  }
  *(_DWORD *)(a2 + 64) = v8;
}

void *deserializeGlobalTypeQualifierFields(void *a1, uint64_t a2)
{
  deserializeASTFields((uint64_t)a1, a2);
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 0x40000000;
  v5[2] = __deserialize_GLPLayoutObject_block_invoke;
  v5[3] = &__block_descriptor_tmp_3;
  v5[4] = a1;
  return deserialize_pointer(a1, (uint64_t)v5, (void *)(a2 + 64));
}

uint64_t deserializeLayoutPairFields(uint64_t a1, uint64_t a2)
{
  deserializeASTFields(a1, a2);
  *(void *)(a2 + 64) = deserialize_GLPString(a1);
  *(void *)(a2 + 72) = v4;
  uint64_t v5 = *(unsigned int *)(a1 + 260);
  unint64_t v6 = *(unsigned int *)(a1 + 256);
  if (v5 >= v6) {
    goto LABEL_29;
  }
  uint64_t v7 = *(void *)(a1 + 248);
  int v8 = *(char *)(v7 + v5);
  unint64_t v9 = *(unsigned __int8 *)(v7 + v5);
  uint64_t v10 = v5 + 1;
  *(_DWORD *)(a1 + 260) = v5 + 1;
  if (v8 < 0)
  {
    uint64_t v11 = (v9 >> 1) & 7;
    switch(v11)
    {
      case 1:
        if (v5 + 3 > v6) {
          goto LABEL_29;
        }
        LODWORD(v7) = *(unsigned __int16 *)(v7 + v10);
        unsigned int v12 = v5 + 3;
        break;
      case 2:
        unsigned int v12 = v5 + 4;
        if (v12 > v6) {
          goto LABEL_29;
        }
        LODWORD(v7) = *(unsigned __int16 *)(v7 + v10) | (*(unsigned __int8 *)(v7 + v10 + 2) << 16);
        break;
      case 3:
        if (v5 + 5 > v6) {
          goto LABEL_29;
        }
        LODWORD(v7) = *(_DWORD *)(v7 + v10);
        unsigned int v12 = v5 + 5;
        break;
      case 4:
        if (v5 + 5 > v6) {
          goto LABEL_29;
        }
        LODWORD(v7) = *(_DWORD *)(v7 + v10);
        *(_DWORD *)(a1 + 260) = v5 + 5;
        if ((int)v5 + 5 >= v6) {
          goto LABEL_29;
        }
        unsigned int v12 = v5 + 6;
        break;
      case 5:
        if (v5 + 5 > v6) {
          goto LABEL_29;
        }
        LODWORD(v7) = *(_DWORD *)(v7 + v10);
        uint64_t v13 = (v5 + 5);
        *(_DWORD *)(a1 + 260) = v13;
        if (v13 + 2 > v6) {
          goto LABEL_29;
        }
        unsigned int v12 = v5 + 7;
        break;
      case 6:
        if (v5 + 5 > v6) {
          goto LABEL_29;
        }
        LODWORD(v7) = *(_DWORD *)(v7 + v10);
        *(_DWORD *)(a1 + 260) = v5 + 5;
        unsigned int v12 = v5 + 8;
        if (v12 > v6) {
          goto LABEL_29;
        }
        break;
      case 7:
        if (v5 + 9 > v6) {
          goto LABEL_29;
        }
        uint64_t v7 = *(void *)(v7 + v10);
        unsigned int v12 = v5 + 9;
        break;
      default:
        if (v10 >= v6) {
          goto LABEL_29;
        }
        LODWORD(v7) = *(unsigned __int8 *)(v7 + v10);
        unsigned int v12 = v5 + 2;
        break;
    }
    *(_DWORD *)(a1 + 260) = v12;
    if (v8) {
      uint64_t v14 = -256 << (8 * v11);
    }
    else {
      LODWORD(v14) = 0;
    }
    LODWORD(v9) = v7 | v14;
  }
  *(_DWORD *)(a2 + 80) = v9;
  uint64_t v15 = *(unsigned int *)(a1 + 260);
  if (v15 + 4 > (unint64_t)*(unsigned int *)(a1 + 256)) {
LABEL_29:
  }
    glpDeserialError(a1, 1u);
  int v16 = *(_DWORD *)(*(void *)(a1 + 248) + v15);
  *(_DWORD *)(a1 + 260) = v15 + 4;
  *(_DWORD *)(a2 + 84) = v16;
  uint64_t result = deserialize_GLPString(a1);
  *(void *)(a2 + 88) = result;
  *(void *)(a2 + 96) = v18;
  return result;
}

void deserializeBlockFields(uint64_t a1, uint64_t a2)
{
  deserializeASTFields(a1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 260);
  if (v4 >= *(_DWORD *)(a1 + 256)
    || (char v5 = *(unsigned char *)(*(void *)(a1 + 248) + v4),
        *(_DWORD *)(a1 + 260) = v4 + 1,
        *(unsigned char *)(a2 + 64) = v5,
        uint64_t v6 = *(unsigned int *)(a1 + 260),
        unint64_t v7 = *(unsigned int *)(a1 + 256),
        v6 >= v7))
  {
LABEL_29:
    glpDeserialError(a1, 1u);
  }
  uint64_t v8 = *(void *)(a1 + 248);
  int v9 = *(char *)(v8 + v6);
  unint64_t v10 = *(unsigned __int8 *)(v8 + v6);
  uint64_t v11 = v6 + 1;
  *(_DWORD *)(a1 + 260) = v6 + 1;
  if (v9 < 0)
  {
    uint64_t v12 = (v10 >> 1) & 7;
    switch(v12)
    {
      case 1:
        if (v6 + 3 > v7) {
          goto LABEL_29;
        }
        LODWORD(v8) = *(unsigned __int16 *)(v8 + v11);
        unsigned int v13 = v6 + 3;
        break;
      case 2:
        unsigned int v13 = v6 + 4;
        if (v13 > v7) {
          goto LABEL_29;
        }
        LODWORD(v8) = *(unsigned __int16 *)(v8 + v11) | (*(unsigned __int8 *)(v8 + v11 + 2) << 16);
        break;
      case 3:
        if (v6 + 5 > v7) {
          goto LABEL_29;
        }
        LODWORD(v8) = *(_DWORD *)(v8 + v11);
        unsigned int v13 = v6 + 5;
        break;
      case 4:
        if (v6 + 5 > v7) {
          goto LABEL_29;
        }
        LODWORD(v8) = *(_DWORD *)(v8 + v11);
        *(_DWORD *)(a1 + 260) = v6 + 5;
        if ((int)v6 + 5 >= v7) {
          goto LABEL_29;
        }
        unsigned int v13 = v6 + 6;
        break;
      case 5:
        if (v6 + 5 > v7) {
          goto LABEL_29;
        }
        LODWORD(v8) = *(_DWORD *)(v8 + v11);
        uint64_t v14 = (v6 + 5);
        *(_DWORD *)(a1 + 260) = v14;
        if (v14 + 2 > v7) {
          goto LABEL_29;
        }
        unsigned int v13 = v6 + 7;
        break;
      case 6:
        if (v6 + 5 > v7) {
          goto LABEL_29;
        }
        LODWORD(v8) = *(_DWORD *)(v8 + v11);
        *(_DWORD *)(a1 + 260) = v6 + 5;
        unsigned int v13 = v6 + 8;
        if (v13 > v7) {
          goto LABEL_29;
        }
        break;
      case 7:
        if (v6 + 9 > v7) {
          goto LABEL_29;
        }
        uint64_t v8 = *(void *)(v8 + v11);
        unsigned int v13 = v6 + 9;
        break;
      default:
        if (v11 >= v7) {
          goto LABEL_29;
        }
        LODWORD(v8) = *(unsigned __int8 *)(v8 + v11);
        unsigned int v13 = v6 + 2;
        break;
    }
    *(_DWORD *)(a1 + 260) = v13;
    if (v9) {
      uint64_t v15 = -256 << (8 * v12);
    }
    else {
      LODWORD(v15) = 0;
    }
    LODWORD(v10) = v8 | v15;
  }
  *(_DWORD *)(a2 + 68) = v10;
}

void deserializeCaseStatementFields(uint64_t a1, uint64_t a2)
{
  deserializeASTFields(a1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 260);
  if (v4 >= *(_DWORD *)(a1 + 256)) {
    glpDeserialError(a1, 1u);
  }
  char v5 = *(unsigned char *)(*(void *)(a1 + 248) + v4);
  *(_DWORD *)(a1 + 260) = v4 + 1;
  *(unsigned char *)(a2 + 64) = v5;
}

void deserializeDefaultStatementFields(uint64_t a1, uint64_t a2)
{
  deserializeASTFields(a1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 260);
  if (v4 >= *(_DWORD *)(a1 + 256)) {
    glpDeserialError(a1, 1u);
  }
  char v5 = *(unsigned char *)(*(void *)(a1 + 248) + v4);
  *(_DWORD *)(a1 + 260) = v4 + 1;
  *(unsigned char *)(a2 + 64) = v5;
}

void *deserializeReturnStatementFields(void *a1, uint64_t a2)
{
  deserializeASTFields((uint64_t)a1, a2);
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 0x40000000;
  v5[2] = __deserialize_GLPFunctionObject_block_invoke;
  v5[3] = &__block_descriptor_tmp_5;
  v5[4] = a1;
  return deserialize_pointer(a1, (uint64_t)v5, (void *)(a2 + 64));
}

void deserializeTopLevelFields(uint64_t a1, uint64_t a2)
{
  deserializeASTFields(a1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 260);
  unint64_t v5 = *(unsigned int *)(a1 + 256);
  if (v4 >= v5) {
LABEL_28:
  }
    glpDeserialError(a1, 1u);
  uint64_t v6 = *(void *)(a1 + 248);
  int v7 = *(char *)(v6 + v4);
  unint64_t v8 = *(unsigned __int8 *)(v6 + v4);
  uint64_t v9 = v4 + 1;
  *(_DWORD *)(a1 + 260) = v4 + 1;
  if (v7 < 0)
  {
    uint64_t v10 = (v8 >> 1) & 7;
    switch(v10)
    {
      case 1:
        if (v4 + 3 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int16 *)(v6 + v9);
        unsigned int v11 = v4 + 3;
        break;
      case 2:
        unsigned int v11 = v4 + 4;
        if (v11 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int16 *)(v6 + v9) | (*(unsigned __int8 *)(v6 + v9 + 2) << 16);
        break;
      case 3:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        unsigned int v11 = v4 + 5;
        break;
      case 4:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        *(_DWORD *)(a1 + 260) = v4 + 5;
        if ((int)v4 + 5 >= v5) {
          goto LABEL_28;
        }
        unsigned int v11 = v4 + 6;
        break;
      case 5:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        uint64_t v12 = (v4 + 5);
        *(_DWORD *)(a1 + 260) = v12;
        if (v12 + 2 > v5) {
          goto LABEL_28;
        }
        unsigned int v11 = v4 + 7;
        break;
      case 6:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        *(_DWORD *)(a1 + 260) = v4 + 5;
        unsigned int v11 = v4 + 8;
        if (v11 > v5) {
          goto LABEL_28;
        }
        break;
      case 7:
        if (v4 + 9 > v5) {
          goto LABEL_28;
        }
        uint64_t v6 = *(void *)(v6 + v9);
        unsigned int v11 = v4 + 9;
        break;
      default:
        if (v9 >= v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int8 *)(v6 + v9);
        unsigned int v11 = v4 + 2;
        break;
    }
    *(_DWORD *)(a1 + 260) = v11;
    if (v7) {
      uint64_t v13 = -256 << (8 * v10);
    }
    else {
      LODWORD(v13) = 0;
    }
    LODWORD(v8) = v6 | v13;
  }
  *(_DWORD *)(a2 + 64) = v8;
}

void *deserializeRawCallFields(void *a1, void *a2)
{
  deserializeASTFields((uint64_t)a1, (uint64_t)a2);
  a2[8] = deserialize_GLPString((uint64_t)a1);
  a2[9] = v4;
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 0x40000000;
  v6[2] = __deserialize_GLPFunctionObject_block_invoke;
  v6[3] = &__block_descriptor_tmp_5;
  v6[4] = a1;
  return deserialize_pointer(a1, (uint64_t)v6, a2 + 10);
}

void *deserializeSubroutineRawCallFields(void *a1, uint64_t a2)
{
  deserializeASTFields((uint64_t)a1, a2);
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 0x40000000;
  v5[2] = __deserialize_GLPSubroutineUniformObject_block_invoke;
  v5[3] = &__block_descriptor_tmp_11;
  v5[4] = a1;
  return deserialize_pointer(a1, (uint64_t)v5, (void *)(a2 + 64));
}

void *deserializeOffsetFields(uint64_t a1, uint64_t a2)
{
  deserializeASTFields(a1, a2);
  v35[0] = MEMORY[0x263EF8330];
  v35[1] = 0x40000000;
  void v35[2] = __deserialize_GLPOffsetObject_block_invoke;
  v35[3] = &__block_descriptor_tmp_17;
  v35[4] = a1;
  uint64_t result = deserialize_pointer((void *)a1, (uint64_t)v35, (void *)(a2 + 64));
  uint64_t v5 = *(unsigned int *)(a1 + 260);
  unint64_t v6 = *(unsigned int *)(a1 + 256);
  if (v5 >= v6) {
    goto LABEL_80;
  }
  uint64_t v7 = *(void *)(a1 + 248);
  int v8 = *(char *)(v7 + v5);
  unint64_t v9 = *(unsigned __int8 *)(v7 + v5);
  uint64_t v10 = v5 + 1;
  *(_DWORD *)(a1 + 260) = v5 + 1;
  if (v8 < 0)
  {
    uint64_t v11 = (v9 >> 1) & 7;
    switch(v11)
    {
      case 1:
        if (v5 + 3 > v6) {
          goto LABEL_80;
        }
        LODWORD(v7) = *(unsigned __int16 *)(v7 + v10);
        unsigned int v12 = v5 + 3;
        break;
      case 2:
        unsigned int v12 = v5 + 4;
        if (v12 > v6) {
          goto LABEL_80;
        }
        LODWORD(v7) = *(unsigned __int16 *)(v7 + v10) | (*(unsigned __int8 *)(v7 + v10 + 2) << 16);
        break;
      case 3:
        if (v5 + 5 > v6) {
          goto LABEL_80;
        }
        LODWORD(v7) = *(_DWORD *)(v7 + v10);
        unsigned int v12 = v5 + 5;
        break;
      case 4:
        if (v5 + 5 > v6) {
          goto LABEL_80;
        }
        LODWORD(v7) = *(_DWORD *)(v7 + v10);
        *(_DWORD *)(a1 + 260) = v5 + 5;
        if ((int)v5 + 5 >= v6) {
          goto LABEL_80;
        }
        unsigned int v12 = v5 + 6;
        break;
      case 5:
        if (v5 + 5 > v6) {
          goto LABEL_80;
        }
        LODWORD(v7) = *(_DWORD *)(v7 + v10);
        uint64_t v13 = (v5 + 5);
        *(_DWORD *)(a1 + 260) = v13;
        if (v13 + 2 > v6) {
          goto LABEL_80;
        }
        unsigned int v12 = v5 + 7;
        break;
      case 6:
        if (v5 + 5 > v6) {
          goto LABEL_80;
        }
        LODWORD(v7) = *(_DWORD *)(v7 + v10);
        *(_DWORD *)(a1 + 260) = v5 + 5;
        unsigned int v12 = v5 + 8;
        if (v12 > v6) {
          goto LABEL_80;
        }
        break;
      case 7:
        if (v5 + 9 > v6) {
          goto LABEL_80;
        }
        uint64_t v7 = *(void *)(v7 + v10);
        unsigned int v12 = v5 + 9;
        break;
      default:
        if (v10 >= v6) {
          goto LABEL_80;
        }
        LODWORD(v7) = *(unsigned __int8 *)(v7 + v10);
        unsigned int v12 = v5 + 2;
        break;
    }
    *(_DWORD *)(a1 + 260) = v12;
    if (v8) {
      uint64_t v14 = -256 << (8 * v11);
    }
    else {
      LODWORD(v14) = 0;
    }
    LODWORD(v9) = v7 | v14;
  }
  *(_DWORD *)(a2 + 72) = v9;
  uint64_t v15 = *(unsigned int *)(a1 + 260);
  unint64_t v16 = *(unsigned int *)(a1 + 256);
  if (v15 >= v16) {
    goto LABEL_80;
  }
  uint64_t v17 = *(void *)(a1 + 248);
  int v18 = *(char *)(v17 + v15);
  unint64_t v19 = *(unsigned __int8 *)(v17 + v15);
  uint64_t v20 = v15 + 1;
  *(_DWORD *)(a1 + 260) = v15 + 1;
  if (v18 < 0)
  {
    uint64_t v21 = (v19 >> 1) & 7;
    switch(v21)
    {
      case 1:
        if (v15 + 3 > v16) {
          goto LABEL_80;
        }
        LODWORD(v17) = *(unsigned __int16 *)(v17 + v20);
        unsigned int v22 = v15 + 3;
        break;
      case 2:
        unsigned int v22 = v15 + 4;
        if (v22 > v16) {
          goto LABEL_80;
        }
        LODWORD(v17) = *(unsigned __int16 *)(v17 + v20) | (*(unsigned __int8 *)(v17 + v20 + 2) << 16);
        break;
      case 3:
        if (v15 + 5 > v16) {
          goto LABEL_80;
        }
        LODWORD(v17) = *(_DWORD *)(v17 + v20);
        unsigned int v22 = v15 + 5;
        break;
      case 4:
        if (v15 + 5 > v16) {
          goto LABEL_80;
        }
        LODWORD(v17) = *(_DWORD *)(v17 + v20);
        *(_DWORD *)(a1 + 260) = v15 + 5;
        if ((int)v15 + 5 >= v16) {
          goto LABEL_80;
        }
        unsigned int v22 = v15 + 6;
        break;
      case 5:
        if (v15 + 5 > v16) {
          goto LABEL_80;
        }
        LODWORD(v17) = *(_DWORD *)(v17 + v20);
        uint64_t v23 = (v15 + 5);
        *(_DWORD *)(a1 + 260) = v23;
        if (v23 + 2 > v16) {
          goto LABEL_80;
        }
        unsigned int v22 = v15 + 7;
        break;
      case 6:
        if (v15 + 5 > v16) {
          goto LABEL_80;
        }
        LODWORD(v17) = *(_DWORD *)(v17 + v20);
        *(_DWORD *)(a1 + 260) = v15 + 5;
        unsigned int v22 = v15 + 8;
        if (v22 > v16) {
          goto LABEL_80;
        }
        break;
      case 7:
        if (v15 + 9 > v16) {
          goto LABEL_80;
        }
        uint64_t v17 = *(void *)(v17 + v20);
        unsigned int v22 = v15 + 9;
        break;
      default:
        if (v20 >= v16) {
          goto LABEL_80;
        }
        LODWORD(v17) = *(unsigned __int8 *)(v17 + v20);
        unsigned int v22 = v15 + 2;
        break;
    }
    *(_DWORD *)(a1 + 260) = v22;
    if (v18) {
      uint64_t v24 = -256 << (8 * v21);
    }
    else {
      LODWORD(v24) = 0;
    }
    LODWORD(v19) = v17 | v24;
  }
  *(_DWORD *)(a2 + 76) = v19;
  uint64_t v25 = *(unsigned int *)(a1 + 260);
  unint64_t v26 = *(unsigned int *)(a1 + 256);
  if (v25 >= v26) {
LABEL_80:
  }
    glpDeserialError(a1, 1u);
  uint64_t v27 = *(void *)(a1 + 248);
  int v28 = *(char *)(v27 + v25);
  unint64_t v29 = *(unsigned __int8 *)(v27 + v25);
  uint64_t v30 = v25 + 1;
  *(_DWORD *)(a1 + 260) = v25 + 1;
  if (v28 < 0)
  {
    uint64_t v31 = (v29 >> 1) & 7;
    switch(v31)
    {
      case 1:
        if (v25 + 3 > v26) {
          goto LABEL_80;
        }
        LODWORD(v27) = *(unsigned __int16 *)(v27 + v30);
        unsigned int v32 = v25 + 3;
        break;
      case 2:
        unsigned int v32 = v25 + 4;
        if (v32 > v26) {
          goto LABEL_80;
        }
        LODWORD(v27) = *(unsigned __int16 *)(v27 + v30) | (*(unsigned __int8 *)(v27 + v30 + 2) << 16);
        break;
      case 3:
        if (v25 + 5 > v26) {
          goto LABEL_80;
        }
        LODWORD(v27) = *(_DWORD *)(v27 + v30);
        unsigned int v32 = v25 + 5;
        break;
      case 4:
        if (v25 + 5 > v26) {
          goto LABEL_80;
        }
        LODWORD(v27) = *(_DWORD *)(v27 + v30);
        *(_DWORD *)(a1 + 260) = v25 + 5;
        if ((int)v25 + 5 >= v26) {
          goto LABEL_80;
        }
        unsigned int v32 = v25 + 6;
        break;
      case 5:
        if (v25 + 5 > v26) {
          goto LABEL_80;
        }
        LODWORD(v27) = *(_DWORD *)(v27 + v30);
        uint64_t v33 = (v25 + 5);
        *(_DWORD *)(a1 + 260) = v33;
        if (v33 + 2 > v26) {
          goto LABEL_80;
        }
        unsigned int v32 = v25 + 7;
        break;
      case 6:
        if (v25 + 5 > v26) {
          goto LABEL_80;
        }
        LODWORD(v27) = *(_DWORD *)(v27 + v30);
        *(_DWORD *)(a1 + 260) = v25 + 5;
        unsigned int v32 = v25 + 8;
        if (v32 > v26) {
          goto LABEL_80;
        }
        break;
      case 7:
        if (v25 + 9 > v26) {
          goto LABEL_80;
        }
        uint64_t v27 = *(void *)(v27 + v30);
        unsigned int v32 = v25 + 9;
        break;
      default:
        if (v30 >= v26) {
          goto LABEL_80;
        }
        LODWORD(v27) = *(unsigned __int8 *)(v27 + v30);
        unsigned int v32 = v25 + 2;
        break;
    }
    *(_DWORD *)(a1 + 260) = v32;
    if (v28) {
      uint64_t v34 = -256 << (8 * v31);
    }
    else {
      LODWORD(v34) = 0;
    }
    LODWORD(v29) = v27 | v34;
  }
  *(_DWORD *)(a2 + 80) = v29;
  return result;
}

void *deserializeLValueFields(uint64_t a1, uint64_t a2)
{
  deserializeASTFields(a1, a2);
  *(void *)(a2 + 64) = deserialize_GLPString(a1);
  *(void *)(a2 + 72) = v4;
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 0x40000000;
  void v16[2] = __deserialize_GLPVariableObject_block_invoke;
  void v16[3] = &__block_descriptor_tmp_6;
  v16[4] = a1;
  uint64_t result = deserialize_pointer((void *)a1, (uint64_t)v16, (void *)(a2 + 80));
  uint64_t v6 = *(unsigned int *)(a1 + 260);
  unint64_t v7 = *(unsigned int *)(a1 + 256);
  if (v6 >= v7) {
LABEL_28:
  }
    glpDeserialError(a1, 1u);
  uint64_t v8 = *(void *)(a1 + 248);
  int v9 = *(char *)(v8 + v6);
  unint64_t v10 = *(unsigned __int8 *)(v8 + v6);
  uint64_t v11 = v6 + 1;
  *(_DWORD *)(a1 + 260) = v6 + 1;
  if (v9 < 0)
  {
    uint64_t v12 = (v10 >> 1) & 7;
    switch(v12)
    {
      case 1:
        if (v6 + 3 > v7) {
          goto LABEL_28;
        }
        LODWORD(v8) = *(unsigned __int16 *)(v8 + v11);
        unsigned int v13 = v6 + 3;
        break;
      case 2:
        unsigned int v13 = v6 + 4;
        if (v13 > v7) {
          goto LABEL_28;
        }
        LODWORD(v8) = *(unsigned __int16 *)(v8 + v11) | (*(unsigned __int8 *)(v8 + v11 + 2) << 16);
        break;
      case 3:
        if (v6 + 5 > v7) {
          goto LABEL_28;
        }
        LODWORD(v8) = *(_DWORD *)(v8 + v11);
        unsigned int v13 = v6 + 5;
        break;
      case 4:
        if (v6 + 5 > v7) {
          goto LABEL_28;
        }
        LODWORD(v8) = *(_DWORD *)(v8 + v11);
        *(_DWORD *)(a1 + 260) = v6 + 5;
        if ((int)v6 + 5 >= v7) {
          goto LABEL_28;
        }
        unsigned int v13 = v6 + 6;
        break;
      case 5:
        if (v6 + 5 > v7) {
          goto LABEL_28;
        }
        LODWORD(v8) = *(_DWORD *)(v8 + v11);
        uint64_t v14 = (v6 + 5);
        *(_DWORD *)(a1 + 260) = v14;
        if (v14 + 2 > v7) {
          goto LABEL_28;
        }
        unsigned int v13 = v6 + 7;
        break;
      case 6:
        if (v6 + 5 > v7) {
          goto LABEL_28;
        }
        LODWORD(v8) = *(_DWORD *)(v8 + v11);
        *(_DWORD *)(a1 + 260) = v6 + 5;
        unsigned int v13 = v6 + 8;
        if (v13 > v7) {
          goto LABEL_28;
        }
        break;
      case 7:
        if (v6 + 9 > v7) {
          goto LABEL_28;
        }
        uint64_t v8 = *(void *)(v8 + v11);
        unsigned int v13 = v6 + 9;
        break;
      default:
        if (v11 >= v7) {
          goto LABEL_28;
        }
        LODWORD(v8) = *(unsigned __int8 *)(v8 + v11);
        unsigned int v13 = v6 + 2;
        break;
    }
    *(_DWORD *)(a1 + 260) = v13;
    if (v9) {
      uint64_t v15 = -256 << (8 * v12);
    }
    else {
      LODWORD(v15) = 0;
    }
    LODWORD(v10) = v8 | v15;
  }
  *(_DWORD *)(a2 + 88) = v10;
  return result;
}

void *deserializeIBPartialDerefFields(void *a1, uint64_t a2)
{
  deserializeASTFields((uint64_t)a1, a2);
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 0x40000000;
  v5[2] = __deserialize_GLPInterfaceBlockObject_block_invoke;
  v5[3] = &__block_descriptor_tmp_9;
  v5[4] = a1;
  return deserialize_pointer(a1, (uint64_t)v5, (void *)(a2 + 64));
}

void deserializePPStreamOpFields(uint64_t a1, _DWORD *a2)
{
  deserializeCallFields(a1, (uint64_t)a2);
  uint64_t v4 = *(unsigned int *)(a1 + 260);
  unint64_t v5 = *(unsigned int *)(a1 + 256);
  if (v4 >= v5) {
    goto LABEL_132;
  }
  uint64_t v6 = *(void *)(a1 + 248);
  int v7 = *(char *)(v6 + v4);
  unint64_t v8 = *(unsigned __int8 *)(v6 + v4);
  uint64_t v9 = v4 + 1;
  *(_DWORD *)(a1 + 260) = v4 + 1;
  if (v7 < 0)
  {
    uint64_t v10 = (v8 >> 1) & 7;
    switch(v10)
    {
      case 1:
        if (v4 + 3 > v5) {
          goto LABEL_132;
        }
        LODWORD(v6) = *(unsigned __int16 *)(v6 + v9);
        unsigned int v11 = v4 + 3;
        break;
      case 2:
        unsigned int v11 = v4 + 4;
        if (v11 > v5) {
          goto LABEL_132;
        }
        LODWORD(v6) = *(unsigned __int16 *)(v6 + v9) | (*(unsigned __int8 *)(v6 + v9 + 2) << 16);
        break;
      case 3:
        if (v4 + 5 > v5) {
          goto LABEL_132;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        unsigned int v11 = v4 + 5;
        break;
      case 4:
        if (v4 + 5 > v5) {
          goto LABEL_132;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        *(_DWORD *)(a1 + 260) = v4 + 5;
        if ((int)v4 + 5 >= v5) {
          goto LABEL_132;
        }
        unsigned int v11 = v4 + 6;
        break;
      case 5:
        if (v4 + 5 > v5) {
          goto LABEL_132;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        uint64_t v12 = (v4 + 5);
        *(_DWORD *)(a1 + 260) = v12;
        if (v12 + 2 > v5) {
          goto LABEL_132;
        }
        unsigned int v11 = v4 + 7;
        break;
      case 6:
        if (v4 + 5 > v5) {
          goto LABEL_132;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        *(_DWORD *)(a1 + 260) = v4 + 5;
        unsigned int v11 = v4 + 8;
        if (v11 > v5) {
          goto LABEL_132;
        }
        break;
      case 7:
        if (v4 + 9 > v5) {
          goto LABEL_132;
        }
        uint64_t v6 = *(void *)(v6 + v9);
        unsigned int v11 = v4 + 9;
        break;
      default:
        if (v9 >= v5) {
          goto LABEL_132;
        }
        LODWORD(v6) = *(unsigned __int8 *)(v6 + v9);
        unsigned int v11 = v4 + 2;
        break;
    }
    *(_DWORD *)(a1 + 260) = v11;
    if (v7) {
      uint64_t v13 = -256 << (8 * v10);
    }
    else {
      LODWORD(v13) = 0;
    }
    LODWORD(v8) = v6 | v13;
  }
  a2[18] = v8;
  uint64_t v14 = *(unsigned int *)(a1 + 260);
  unint64_t v15 = *(unsigned int *)(a1 + 256);
  if (v14 >= v15) {
    goto LABEL_132;
  }
  uint64_t v16 = *(void *)(a1 + 248);
  int v17 = *(char *)(v16 + v14);
  unint64_t v18 = *(unsigned __int8 *)(v16 + v14);
  uint64_t v19 = v14 + 1;
  *(_DWORD *)(a1 + 260) = v14 + 1;
  if (v17 < 0)
  {
    uint64_t v20 = (v18 >> 1) & 7;
    switch(v20)
    {
      case 1:
        if (v14 + 3 > v15) {
          goto LABEL_132;
        }
        LODWORD(v16) = *(unsigned __int16 *)(v16 + v19);
        unsigned int v21 = v14 + 3;
        break;
      case 2:
        unsigned int v21 = v14 + 4;
        if (v21 > v15) {
          goto LABEL_132;
        }
        LODWORD(v16) = *(unsigned __int16 *)(v16 + v19) | (*(unsigned __int8 *)(v16 + v19 + 2) << 16);
        break;
      case 3:
        if (v14 + 5 > v15) {
          goto LABEL_132;
        }
        LODWORD(v16) = *(_DWORD *)(v16 + v19);
        unsigned int v21 = v14 + 5;
        break;
      case 4:
        if (v14 + 5 > v15) {
          goto LABEL_132;
        }
        LODWORD(v16) = *(_DWORD *)(v16 + v19);
        *(_DWORD *)(a1 + 260) = v14 + 5;
        if ((int)v14 + 5 >= v15) {
          goto LABEL_132;
        }
        unsigned int v21 = v14 + 6;
        break;
      case 5:
        if (v14 + 5 > v15) {
          goto LABEL_132;
        }
        LODWORD(v16) = *(_DWORD *)(v16 + v19);
        uint64_t v22 = (v14 + 5);
        *(_DWORD *)(a1 + 260) = v22;
        if (v22 + 2 > v15) {
          goto LABEL_132;
        }
        unsigned int v21 = v14 + 7;
        break;
      case 6:
        if (v14 + 5 > v15) {
          goto LABEL_132;
        }
        LODWORD(v16) = *(_DWORD *)(v16 + v19);
        *(_DWORD *)(a1 + 260) = v14 + 5;
        unsigned int v21 = v14 + 8;
        if (v21 > v15) {
          goto LABEL_132;
        }
        break;
      case 7:
        if (v14 + 9 > v15) {
          goto LABEL_132;
        }
        uint64_t v16 = *(void *)(v16 + v19);
        unsigned int v21 = v14 + 9;
        break;
      default:
        if (v19 >= v15) {
          goto LABEL_132;
        }
        LODWORD(v16) = *(unsigned __int8 *)(v16 + v19);
        unsigned int v21 = v14 + 2;
        break;
    }
    *(_DWORD *)(a1 + 260) = v21;
    if (v17) {
      uint64_t v23 = -256 << (8 * v20);
    }
    else {
      LODWORD(v23) = 0;
    }
    LODWORD(v18) = v16 | v23;
  }
  a2[19] = v18;
  uint64_t v24 = *(unsigned int *)(a1 + 260);
  unint64_t v25 = *(unsigned int *)(a1 + 256);
  if (v24 >= v25) {
    goto LABEL_132;
  }
  uint64_t v26 = *(void *)(a1 + 248);
  int v27 = *(char *)(v26 + v24);
  unint64_t v28 = *(unsigned __int8 *)(v26 + v24);
  uint64_t v29 = v24 + 1;
  *(_DWORD *)(a1 + 260) = v24 + 1;
  if (v27 < 0)
  {
    uint64_t v30 = (v28 >> 1) & 7;
    switch(v30)
    {
      case 1:
        if (v24 + 3 > v25) {
          goto LABEL_132;
        }
        LODWORD(v26) = *(unsigned __int16 *)(v26 + v29);
        unsigned int v31 = v24 + 3;
        break;
      case 2:
        unsigned int v31 = v24 + 4;
        if (v31 > v25) {
          goto LABEL_132;
        }
        LODWORD(v26) = *(unsigned __int16 *)(v26 + v29) | (*(unsigned __int8 *)(v26 + v29 + 2) << 16);
        break;
      case 3:
        if (v24 + 5 > v25) {
          goto LABEL_132;
        }
        LODWORD(v26) = *(_DWORD *)(v26 + v29);
        unsigned int v31 = v24 + 5;
        break;
      case 4:
        if (v24 + 5 > v25) {
          goto LABEL_132;
        }
        LODWORD(v26) = *(_DWORD *)(v26 + v29);
        *(_DWORD *)(a1 + 260) = v24 + 5;
        if ((int)v24 + 5 >= v25) {
          goto LABEL_132;
        }
        unsigned int v31 = v24 + 6;
        break;
      case 5:
        if (v24 + 5 > v25) {
          goto LABEL_132;
        }
        LODWORD(v26) = *(_DWORD *)(v26 + v29);
        uint64_t v32 = (v24 + 5);
        *(_DWORD *)(a1 + 260) = v32;
        if (v32 + 2 > v25) {
          goto LABEL_132;
        }
        unsigned int v31 = v24 + 7;
        break;
      case 6:
        if (v24 + 5 > v25) {
          goto LABEL_132;
        }
        LODWORD(v26) = *(_DWORD *)(v26 + v29);
        *(_DWORD *)(a1 + 260) = v24 + 5;
        unsigned int v31 = v24 + 8;
        if (v31 > v25) {
          goto LABEL_132;
        }
        break;
      case 7:
        if (v24 + 9 > v25) {
          goto LABEL_132;
        }
        uint64_t v26 = *(void *)(v26 + v29);
        unsigned int v31 = v24 + 9;
        break;
      default:
        if (v29 >= v25) {
          goto LABEL_132;
        }
        LODWORD(v26) = *(unsigned __int8 *)(v26 + v29);
        unsigned int v31 = v24 + 2;
        break;
    }
    *(_DWORD *)(a1 + 260) = v31;
    if (v27) {
      uint64_t v33 = -256 << (8 * v30);
    }
    else {
      LODWORD(v33) = 0;
    }
    LODWORD(v28) = v26 | v33;
  }
  a2[20] = v28;
  uint64_t v34 = *(unsigned int *)(a1 + 260);
  unint64_t v35 = *(unsigned int *)(a1 + 256);
  if (v34 >= v35) {
    goto LABEL_132;
  }
  uint64_t v36 = *(void *)(a1 + 248);
  int v37 = *(char *)(v36 + v34);
  unint64_t v38 = *(unsigned __int8 *)(v36 + v34);
  uint64_t v39 = v34 + 1;
  *(_DWORD *)(a1 + 260) = v34 + 1;
  if (v37 < 0)
  {
    uint64_t v40 = (v38 >> 1) & 7;
    switch(v40)
    {
      case 1:
        if (v34 + 3 > v35) {
          goto LABEL_132;
        }
        LODWORD(v36) = *(unsigned __int16 *)(v36 + v39);
        unsigned int v41 = v34 + 3;
        break;
      case 2:
        unsigned int v41 = v34 + 4;
        if (v41 > v35) {
          goto LABEL_132;
        }
        LODWORD(v36) = *(unsigned __int16 *)(v36 + v39) | (*(unsigned __int8 *)(v36 + v39 + 2) << 16);
        break;
      case 3:
        if (v34 + 5 > v35) {
          goto LABEL_132;
        }
        LODWORD(v36) = *(_DWORD *)(v36 + v39);
        unsigned int v41 = v34 + 5;
        break;
      case 4:
        if (v34 + 5 > v35) {
          goto LABEL_132;
        }
        LODWORD(v36) = *(_DWORD *)(v36 + v39);
        *(_DWORD *)(a1 + 260) = v34 + 5;
        if ((int)v34 + 5 >= v35) {
          goto LABEL_132;
        }
        unsigned int v41 = v34 + 6;
        break;
      case 5:
        if (v34 + 5 > v35) {
          goto LABEL_132;
        }
        LODWORD(v36) = *(_DWORD *)(v36 + v39);
        uint64_t v42 = (v34 + 5);
        *(_DWORD *)(a1 + 260) = v42;
        if (v42 + 2 > v35) {
          goto LABEL_132;
        }
        unsigned int v41 = v34 + 7;
        break;
      case 6:
        if (v34 + 5 > v35) {
          goto LABEL_132;
        }
        LODWORD(v36) = *(_DWORD *)(v36 + v39);
        *(_DWORD *)(a1 + 260) = v34 + 5;
        unsigned int v41 = v34 + 8;
        if (v41 > v35) {
          goto LABEL_132;
        }
        break;
      case 7:
        if (v34 + 9 > v35) {
          goto LABEL_132;
        }
        uint64_t v36 = *(void *)(v36 + v39);
        unsigned int v41 = v34 + 9;
        break;
      default:
        if (v39 >= v35) {
          goto LABEL_132;
        }
        LODWORD(v36) = *(unsigned __int8 *)(v36 + v39);
        unsigned int v41 = v34 + 2;
        break;
    }
    *(_DWORD *)(a1 + 260) = v41;
    if (v37) {
      uint64_t v43 = -256 << (8 * v40);
    }
    else {
      LODWORD(v43) = 0;
    }
    LODWORD(v38) = v36 | v43;
  }
  a2[21] = v38;
  uint64_t v44 = *(unsigned int *)(a1 + 260);
  unint64_t v45 = *(unsigned int *)(a1 + 256);
  if (v44 >= v45) {
LABEL_132:
  }
    glpDeserialError(a1, 1u);
  uint64_t v46 = *(void *)(a1 + 248);
  int v47 = *(char *)(v46 + v44);
  unint64_t v48 = *(unsigned __int8 *)(v46 + v44);
  uint64_t v49 = v44 + 1;
  *(_DWORD *)(a1 + 260) = v44 + 1;
  if (v47 < 0)
  {
    uint64_t v50 = (v48 >> 1) & 7;
    switch(v50)
    {
      case 1:
        if (v44 + 3 > v45) {
          goto LABEL_132;
        }
        LODWORD(v46) = *(unsigned __int16 *)(v46 + v49);
        unsigned int v51 = v44 + 3;
        break;
      case 2:
        unsigned int v51 = v44 + 4;
        if (v51 > v45) {
          goto LABEL_132;
        }
        LODWORD(v46) = *(unsigned __int16 *)(v46 + v49) | (*(unsigned __int8 *)(v46 + v49 + 2) << 16);
        break;
      case 3:
        if (v44 + 5 > v45) {
          goto LABEL_132;
        }
        LODWORD(v46) = *(_DWORD *)(v46 + v49);
        unsigned int v51 = v44 + 5;
        break;
      case 4:
        if (v44 + 5 > v45) {
          goto LABEL_132;
        }
        LODWORD(v46) = *(_DWORD *)(v46 + v49);
        *(_DWORD *)(a1 + 260) = v44 + 5;
        if ((int)v44 + 5 >= v45) {
          goto LABEL_132;
        }
        unsigned int v51 = v44 + 6;
        break;
      case 5:
        if (v44 + 5 > v45) {
          goto LABEL_132;
        }
        LODWORD(v46) = *(_DWORD *)(v46 + v49);
        uint64_t v52 = (v44 + 5);
        *(_DWORD *)(a1 + 260) = v52;
        if (v52 + 2 > v45) {
          goto LABEL_132;
        }
        unsigned int v51 = v44 + 7;
        break;
      case 6:
        if (v44 + 5 > v45) {
          goto LABEL_132;
        }
        LODWORD(v46) = *(_DWORD *)(v46 + v49);
        *(_DWORD *)(a1 + 260) = v44 + 5;
        unsigned int v51 = v44 + 8;
        if (v51 > v45) {
          goto LABEL_132;
        }
        break;
      case 7:
        if (v44 + 9 > v45) {
          goto LABEL_132;
        }
        uint64_t v46 = *(void *)(v46 + v49);
        unsigned int v51 = v44 + 9;
        break;
      default:
        if (v49 >= v45) {
          goto LABEL_132;
        }
        LODWORD(v46) = *(unsigned __int8 *)(v46 + v49);
        unsigned int v51 = v44 + 2;
        break;
    }
    *(_DWORD *)(a1 + 260) = v51;
    if (v47) {
      uint64_t v53 = -256 << (8 * v50);
    }
    else {
      LODWORD(v53) = 0;
    }
    LODWORD(v48) = v46 | v53;
  }
  a2[22] = v48;
}

void *deserializeSubroutineUniformFields(void *a1, uint64_t a2)
{
  deserializeASTFields((uint64_t)a1, a2);
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 0x40000000;
  v5[2] = __deserialize_GLPSubroutineUniformObject_block_invoke;
  v5[3] = &__block_descriptor_tmp_11;
  v5[4] = a1;
  return deserialize_pointer(a1, (uint64_t)v5, (void *)(a2 + 64));
}

double deserializeASTFields(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 260);
  unint64_t v4 = *(unsigned int *)(a1 + 256);
  if (v3 >= v4) {
    goto LABEL_82;
  }
  uint64_t v6 = *(void *)(a1 + 248);
  int v7 = *(char *)(v6 + v3);
  unint64_t v8 = *(unsigned __int8 *)(v6 + v3);
  uint64_t v9 = v3 + 1;
  *(_DWORD *)(a1 + 260) = v3 + 1;
  if (v7 < 0)
  {
    uint64_t v10 = (v8 >> 1) & 7;
    switch(v10)
    {
      case 1:
        if (v3 + 3 > v4) {
          goto LABEL_82;
        }
        LODWORD(v6) = *(unsigned __int16 *)(v6 + v9);
        unsigned int v11 = v3 + 3;
        break;
      case 2:
        unsigned int v11 = v3 + 4;
        if (v11 > v4) {
          goto LABEL_82;
        }
        LODWORD(v6) = *(unsigned __int16 *)(v6 + v9) | (*(unsigned __int8 *)(v6 + v9 + 2) << 16);
        break;
      case 3:
        if (v3 + 5 > v4) {
          goto LABEL_82;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        unsigned int v11 = v3 + 5;
        break;
      case 4:
        if (v3 + 5 > v4) {
          goto LABEL_82;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        *(_DWORD *)(a1 + 260) = v3 + 5;
        if ((int)v3 + 5 >= v4) {
          goto LABEL_82;
        }
        unsigned int v11 = v3 + 6;
        break;
      case 5:
        if (v3 + 5 > v4) {
          goto LABEL_82;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        uint64_t v12 = (v3 + 5);
        *(_DWORD *)(a1 + 260) = v12;
        if (v12 + 2 > v4) {
          goto LABEL_82;
        }
        unsigned int v11 = v3 + 7;
        break;
      case 6:
        if (v3 + 5 > v4) {
          goto LABEL_82;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        *(_DWORD *)(a1 + 260) = v3 + 5;
        unsigned int v11 = v3 + 8;
        if (v11 > v4) {
          goto LABEL_82;
        }
        break;
      case 7:
        if (v3 + 9 > v4) {
          goto LABEL_82;
        }
        uint64_t v6 = *(void *)(v6 + v9);
        unsigned int v11 = v3 + 9;
        break;
      default:
        if (v9 >= v4) {
          goto LABEL_82;
        }
        LODWORD(v6) = *(unsigned __int8 *)(v6 + v9);
        unsigned int v11 = v3 + 2;
        break;
    }
    *(_DWORD *)(a1 + 260) = v11;
    if (v7) {
      uint64_t v13 = -256 << (8 * v10);
    }
    else {
      LODWORD(v13) = 0;
    }
    LODWORD(v8) = v6 | v13;
  }
  *(_DWORD *)(a2 + 16) = v8;
  uint64_t v14 = *(unsigned int *)(a1 + 260);
  unint64_t v15 = *(unsigned int *)(a1 + 256);
  if (v14 >= v15) {
    goto LABEL_82;
  }
  uint64_t v16 = *(void *)(a1 + 248);
  int v17 = *(char *)(v16 + v14);
  unint64_t v18 = *(unsigned __int8 *)(v16 + v14);
  uint64_t v19 = v14 + 1;
  *(_DWORD *)(a1 + 260) = v14 + 1;
  if (v17 < 0)
  {
    uint64_t v20 = (v18 >> 1) & 7;
    switch(v20)
    {
      case 1:
        if (v14 + 3 > v15) {
          goto LABEL_82;
        }
        unint64_t v21 = *(unsigned __int16 *)(v16 + v19);
        unsigned int v22 = v14 + 3;
        goto LABEL_50;
      case 2:
        unsigned int v22 = v14 + 4;
        if (v22 > v15) {
          goto LABEL_82;
        }
        unint64_t v21 = *(unsigned __int16 *)(v16 + v19) | ((unint64_t)*(unsigned __int8 *)(v16 + v19 + 2) << 16);
        goto LABEL_50;
      case 3:
        if (v14 + 5 > v15) {
          goto LABEL_82;
        }
        unint64_t v21 = *(unsigned int *)(v16 + v19);
        unsigned int v22 = v14 + 5;
        goto LABEL_50;
      case 4:
        if (v14 + 5 > v15) {
          goto LABEL_82;
        }
        uint64_t v23 = *(unsigned int *)(v16 + v19);
        *(_DWORD *)(a1 + 260) = v14 + 5;
        if ((int)v14 + 5 >= v15) {
          goto LABEL_82;
        }
        uint64_t v24 = *(unsigned __int8 *)(v16 + (v14 + 5));
        unsigned int v25 = v14 + 6;
        goto LABEL_47;
      case 5:
        if (v14 + 5 > v15) {
          goto LABEL_82;
        }
        uint64_t v23 = *(unsigned int *)(v16 + v19);
        uint64_t v26 = (v14 + 5);
        *(_DWORD *)(a1 + 260) = v26;
        if (v26 + 2 > v15) {
          goto LABEL_82;
        }
        uint64_t v24 = *(unsigned __int16 *)(v16 + v26);
        unsigned int v25 = v14 + 7;
        goto LABEL_47;
      case 6:
        if (v14 + 5 > v15) {
          goto LABEL_82;
        }
        uint64_t v23 = *(unsigned int *)(v16 + v19);
        unsigned int v27 = v14 + 5;
        *(_DWORD *)(a1 + 260) = v14 + 5;
        unsigned int v25 = v14 + 8;
        if (v25 > v15) {
          goto LABEL_82;
        }
        uint64_t v24 = *(unsigned __int16 *)(v16 + v27) | (*(unsigned __int8 *)(v16 + v27 + 2) << 16);
LABEL_47:
        *(_DWORD *)(a1 + 260) = v25;
        unint64_t v21 = v23 | (v24 << 32);
        goto LABEL_51;
      case 7:
        if (v14 + 9 > v15) {
          goto LABEL_82;
        }
        unint64_t v21 = *(void *)(v16 + v19);
        unsigned int v22 = v14 + 9;
        goto LABEL_50;
      default:
        if (v19 >= v15) {
          goto LABEL_82;
        }
        unint64_t v21 = *(unsigned __int8 *)(v16 + v19);
        unsigned int v22 = v14 + 2;
LABEL_50:
        *(_DWORD *)(a1 + 260) = v22;
LABEL_51:
        if (v17) {
          uint64_t v28 = -256 << (8 * v20);
        }
        else {
          uint64_t v28 = 0;
        }
        unint64_t v18 = v21 | v28;
        break;
    }
  }
  *(void *)(a2 + 24) = v18;
  *(void *)&long long v42 = MEMORY[0x263EF8330];
  *((void *)&v42 + 1) = 0x40000000;
  uint64_t v43 = __deserialize_GLPType_block_invoke;
  uint64_t v44 = &__block_descriptor_tmp_12;
  uint64_t v45 = a1;
  deserialize_pointer((void *)a1, (uint64_t)&v42, (void *)(a2 + 32));
  uint64_t v29 = deserialize_GLPString(a1);
  uint64_t v31 = *(unsigned int *)(a1 + 260);
  unint64_t v32 = *(unsigned int *)(a1 + 256);
  if (v31 >= v32) {
LABEL_82:
  }
    glpDeserialError(a1, 1u);
  uint64_t v33 = *(void *)(a1 + 248);
  int v34 = *(char *)(v33 + v31);
  unint64_t v35 = *(unsigned __int8 *)(v33 + v31);
  uint64_t v36 = v31 + 1;
  *(_DWORD *)(a1 + 260) = v31 + 1;
  if (v34 < 0)
  {
    uint64_t v37 = (v35 >> 1) & 7;
    switch(v37)
    {
      case 1:
        if (v31 + 3 > v32) {
          goto LABEL_82;
        }
        LODWORD(v33) = *(unsigned __int16 *)(v33 + v36);
        unsigned int v38 = v31 + 3;
        break;
      case 2:
        unsigned int v38 = v31 + 4;
        if (v38 > v32) {
          goto LABEL_82;
        }
        LODWORD(v33) = *(unsigned __int16 *)(v33 + v36) | (*(unsigned __int8 *)(v33 + v36 + 2) << 16);
        break;
      case 3:
        if (v31 + 5 > v32) {
          goto LABEL_82;
        }
        LODWORD(v33) = *(_DWORD *)(v33 + v36);
        unsigned int v38 = v31 + 5;
        break;
      case 4:
        if (v31 + 5 > v32) {
          goto LABEL_82;
        }
        LODWORD(v33) = *(_DWORD *)(v33 + v36);
        *(_DWORD *)(a1 + 260) = v31 + 5;
        if ((int)v31 + 5 >= v32) {
          goto LABEL_82;
        }
        unsigned int v38 = v31 + 6;
        break;
      case 5:
        if (v31 + 5 > v32) {
          goto LABEL_82;
        }
        LODWORD(v33) = *(_DWORD *)(v33 + v36);
        uint64_t v39 = (v31 + 5);
        *(_DWORD *)(a1 + 260) = v39;
        if (v39 + 2 > v32) {
          goto LABEL_82;
        }
        unsigned int v38 = v31 + 7;
        break;
      case 6:
        if (v31 + 5 > v32) {
          goto LABEL_82;
        }
        LODWORD(v33) = *(_DWORD *)(v33 + v36);
        *(_DWORD *)(a1 + 260) = v31 + 5;
        unsigned int v38 = v31 + 8;
        if (v38 > v32) {
          goto LABEL_82;
        }
        break;
      case 7:
        if (v31 + 9 > v32) {
          goto LABEL_82;
        }
        uint64_t v33 = *(void *)(v33 + v36);
        unsigned int v38 = v31 + 9;
        break;
      default:
        if (v36 >= v32) {
          goto LABEL_82;
        }
        LODWORD(v33) = *(unsigned __int8 *)(v33 + v36);
        unsigned int v38 = v31 + 2;
        break;
    }
    *(_DWORD *)(a1 + 260) = v38;
    if (v34) {
      uint64_t v40 = -256 << (8 * v37);
    }
    else {
      LODWORD(v40) = 0;
    }
    LODWORD(v35) = v33 | v40;
  }
  glpMakeSourceLocation(v29, v30, v35, &v42);
  double result = *(double *)&v42;
  *(_OWORD *)(a2 + 40) = v42;
  *(void *)(a2 + --*(void *)(result + 56) = v43;
  return result;
}

void deserializeCallFields(uint64_t a1, uint64_t a2)
{
  deserializeASTFields(a1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 260);
  unint64_t v5 = *(unsigned int *)(a1 + 256);
  if (v4 >= v5) {
LABEL_28:
  }
    glpDeserialError(a1, 1u);
  uint64_t v6 = *(void *)(a1 + 248);
  int v7 = *(char *)(v6 + v4);
  unint64_t v8 = *(unsigned __int8 *)(v6 + v4);
  uint64_t v9 = v4 + 1;
  *(_DWORD *)(a1 + 260) = v4 + 1;
  if (v7 < 0)
  {
    uint64_t v10 = (v8 >> 1) & 7;
    switch(v10)
    {
      case 1:
        if (v4 + 3 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int16 *)(v6 + v9);
        unsigned int v11 = v4 + 3;
        break;
      case 2:
        unsigned int v11 = v4 + 4;
        if (v11 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int16 *)(v6 + v9) | (*(unsigned __int8 *)(v6 + v9 + 2) << 16);
        break;
      case 3:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        unsigned int v11 = v4 + 5;
        break;
      case 4:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        *(_DWORD *)(a1 + 260) = v4 + 5;
        if ((int)v4 + 5 >= v5) {
          goto LABEL_28;
        }
        unsigned int v11 = v4 + 6;
        break;
      case 5:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        uint64_t v12 = (v4 + 5);
        *(_DWORD *)(a1 + 260) = v12;
        if (v12 + 2 > v5) {
          goto LABEL_28;
        }
        unsigned int v11 = v4 + 7;
        break;
      case 6:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        *(_DWORD *)(a1 + 260) = v4 + 5;
        unsigned int v11 = v4 + 8;
        if (v11 > v5) {
          goto LABEL_28;
        }
        break;
      case 7:
        if (v4 + 9 > v5) {
          goto LABEL_28;
        }
        uint64_t v6 = *(void *)(v6 + v9);
        unsigned int v11 = v4 + 9;
        break;
      default:
        if (v9 >= v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int8 *)(v6 + v9);
        unsigned int v11 = v4 + 2;
        break;
    }
    *(_DWORD *)(a1 + 260) = v11;
    if (v7) {
      uint64_t v13 = -256 << (8 * v10);
    }
    else {
      LODWORD(v13) = 0;
    }
    LODWORD(v8) = v6 | v13;
  }
  *(_DWORD *)(a2 + 64) = v8;
}

void deserializeStructureFields(uint64_t a1, uint64_t a2)
{
  deserializeASTFields(a1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 260);
  unint64_t v5 = *(unsigned int *)(a1 + 256);
  if (v4 >= v5) {
LABEL_28:
  }
    glpDeserialError(a1, 1u);
  uint64_t v6 = *(void *)(a1 + 248);
  int v7 = *(char *)(v6 + v4);
  unint64_t v8 = *(unsigned __int8 *)(v6 + v4);
  uint64_t v9 = v4 + 1;
  *(_DWORD *)(a1 + 260) = v4 + 1;
  if (v7 < 0)
  {
    uint64_t v10 = (v8 >> 1) & 7;
    switch(v10)
    {
      case 1:
        if (v4 + 3 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int16 *)(v6 + v9);
        unsigned int v11 = v4 + 3;
        break;
      case 2:
        unsigned int v11 = v4 + 4;
        if (v11 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int16 *)(v6 + v9) | (*(unsigned __int8 *)(v6 + v9 + 2) << 16);
        break;
      case 3:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        unsigned int v11 = v4 + 5;
        break;
      case 4:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        *(_DWORD *)(a1 + 260) = v4 + 5;
        if ((int)v4 + 5 >= v5) {
          goto LABEL_28;
        }
        unsigned int v11 = v4 + 6;
        break;
      case 5:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        uint64_t v12 = (v4 + 5);
        *(_DWORD *)(a1 + 260) = v12;
        if (v12 + 2 > v5) {
          goto LABEL_28;
        }
        unsigned int v11 = v4 + 7;
        break;
      case 6:
        if (v4 + 5 > v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(_DWORD *)(v6 + v9);
        *(_DWORD *)(a1 + 260) = v4 + 5;
        unsigned int v11 = v4 + 8;
        if (v11 > v5) {
          goto LABEL_28;
        }
        break;
      case 7:
        if (v4 + 9 > v5) {
          goto LABEL_28;
        }
        uint64_t v6 = *(void *)(v6 + v9);
        unsigned int v11 = v4 + 9;
        break;
      default:
        if (v9 >= v5) {
          goto LABEL_28;
        }
        LODWORD(v6) = *(unsigned __int8 *)(v6 + v9);
        unsigned int v11 = v4 + 2;
        break;
    }
    *(_DWORD *)(a1 + 260) = v11;
    if (v7) {
      uint64_t v13 = -256 << (8 * v10);
    }
    else {
      LODWORD(v13) = 0;
    }
    LODWORD(v8) = v6 | v13;
  }
  *(_DWORD *)(a2 + 64) = v8;
}

uint64_t serialize_GLPType(void *a1, unint64_t a2)
{
  uint64_t ReturnType = (unsigned int *)a2;
  uint64_t result = serialize_pointer(a1, a2);
  if (result)
  {
    while (1)
    {
      uint64_t Kind = glpTypeGetKind(ReturnType);
      int v6 = Kind;
      char v7 = glp_serialized_integer32_control(Kind);
      int v8 = *((_DWORD *)a1 + 8);
      uint64_t v9 = *((unsigned int *)a1 + 9);
      int v10 = v9 + 1;
      if ((int)v9 + 1 <= v8)
      {
        uint64_t v13 = (char *)a1[5];
        int v14 = *((_DWORD *)a1 + 9);
      }
      else
      {
        if (v8 <= 1) {
          int v8 = 1;
        }
        int v11 = 2 * v8;
        uint64_t v12 = v11 <= v10 ? v10 : v11;
        uint64_t v13 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v12, "Vector Storage (uint8_t, growth)");
        memcpy(v13, (const void *)a1[5], *((unsigned int *)a1 + 9));
        ((void (*)(void, void))a1[3])(*a1, a1[5]);
        *((_DWORD *)a1 + 8) = v12;
        a1[5] = v13;
        int v14 = *((_DWORD *)a1 + 9);
      }
      memmove(&v13[v9 + 1], &v13[v9], (v14 - v9));
      *(unsigned char *)(a1[5] + v9) = v7;
      int v15 = *((_DWORD *)a1 + 9);
      unsigned int v16 = v15 + 1;
      *((_DWORD *)a1 + 9) = v15 + 1;
      if (v7 < 0)
      {
        switch((v7 >> 1) & 7)
        {
          case 0u:
            unsigned int v17 = v15 + 2;
            int v18 = *((_DWORD *)a1 + 8);
            if (v17 <= v18)
            {
              unint64_t v21 = (char *)a1[5];
              unsigned int v22 = v16;
            }
            else
            {
              if (v18 <= 1) {
                int v18 = 1;
              }
              int v19 = 2 * v18;
              if (v19 <= (int)v17) {
                uint64_t v20 = v17;
              }
              else {
                uint64_t v20 = v19;
              }
              unint64_t v21 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v20, "Vector Storage (uint8_t, growth)");
              memcpy(v21, (const void *)a1[5], *((unsigned int *)a1 + 9));
              ((void (*)(void, void))a1[3])(*a1, a1[5]);
              *((_DWORD *)a1 + 8) = v20;
              a1[5] = v21;
              unsigned int v22 = *((_DWORD *)a1 + 9);
            }
            memmove(&v21[v16 + 1], &v21[v16], v22 - v16);
            *(unsigned char *)(a1[5] + v16) = v6;
            int v41 = 1;
            goto LABEL_48;
          case 1u:
            unsigned int v23 = v15 + 3;
            int v24 = *((_DWORD *)a1 + 8);
            if (v23 <= v24)
            {
              unsigned int v27 = (char *)a1[5];
              unsigned int v28 = v16;
            }
            else
            {
              if (v24 <= 1) {
                int v24 = 1;
              }
              int v25 = 2 * v24;
              if (v25 <= (int)v23) {
                uint64_t v26 = v23;
              }
              else {
                uint64_t v26 = v25;
              }
              unsigned int v27 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v26, "Vector Storage (uint8_t, growth)");
              memcpy(v27, (const void *)a1[5], *((unsigned int *)a1 + 9));
              ((void (*)(void, void))a1[3])(*a1, a1[5]);
              *((_DWORD *)a1 + 8) = v26;
              a1[5] = v27;
              unsigned int v28 = *((_DWORD *)a1 + 9);
            }
            memmove(&v27[v16 + 1], &v27[v16], v28 - v16);
            *(_WORD *)(a1[5] + v16) = v6;
            int v41 = 2;
            goto LABEL_48;
          case 2u:
            unsigned int v29 = v15 + 4;
            int v30 = *((_DWORD *)a1 + 8);
            if (v29 <= v30)
            {
              uint64_t v33 = (char *)a1[5];
              unsigned int v34 = v16;
            }
            else
            {
              if (v30 <= 1) {
                int v30 = 1;
              }
              int v31 = 2 * v30;
              if (v31 <= (int)v29) {
                uint64_t v32 = v29;
              }
              else {
                uint64_t v32 = v31;
              }
              uint64_t v33 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v32, "Vector Storage (uint8_t, growth)");
              memcpy(v33, (const void *)a1[5], *((unsigned int *)a1 + 9));
              ((void (*)(void, void))a1[3])(*a1, a1[5]);
              *((_DWORD *)a1 + 8) = v32;
              a1[5] = v33;
              unsigned int v34 = *((_DWORD *)a1 + 9);
            }
            memmove(&v33[v16 + 1], &v33[v16], v34 - v16);
            uint64_t v42 = a1[5] + v16;
            *(unsigned char *)(v42 + 2) = BYTE2(v6);
            *(_WORD *)uint64_t v42 = v6;
            int v41 = 3;
            goto LABEL_48;
          case 3u:
            unsigned int v35 = v15 + 5;
            int v36 = *((_DWORD *)a1 + 8);
            if (v35 <= v36)
            {
              uint64_t v39 = (char *)a1[5];
              unsigned int v40 = v16;
            }
            else
            {
              if (v36 <= 1) {
                int v36 = 1;
              }
              int v37 = 2 * v36;
              if (v37 <= (int)v35) {
                uint64_t v38 = v35;
              }
              else {
                uint64_t v38 = v37;
              }
              uint64_t v39 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v38, "Vector Storage (uint8_t, growth)");
              memcpy(v39, (const void *)a1[5], *((unsigned int *)a1 + 9));
              ((void (*)(void, void))a1[3])(*a1, a1[5]);
              *((_DWORD *)a1 + 8) = v38;
              a1[5] = v39;
              unsigned int v40 = *((_DWORD *)a1 + 9);
            }
            memmove(&v39[v16 + 1], &v39[v16], v40 - v16);
            *(_DWORD *)(a1[5] + v16) = v6;
            int v41 = 4;
LABEL_48:
            *((_DWORD *)a1 + 9) += v41;
            break;
          default:
            break;
        }
      }
      int v43 = glpTypeGetKind(ReturnType);
      if (v43 != 4) {
        break;
      }
      uint64_t ElementCount = glpAggregateTypeGetElementCount((uint64_t)ReturnType);
      int v45 = ElementCount;
      char v46 = glp_serialized_integer32_control(ElementCount);
      int v47 = *((_DWORD *)a1 + 8);
      uint64_t v48 = *((unsigned int *)a1 + 9);
      int v49 = v48 + 1;
      if ((int)v48 + 1 <= v47)
      {
        uint64_t v52 = (char *)a1[5];
        int v53 = *((_DWORD *)a1 + 9);
      }
      else
      {
        if (v47 <= 1) {
          int v47 = 1;
        }
        int v50 = 2 * v47;
        if (v50 <= v49) {
          uint64_t v51 = v49;
        }
        else {
          uint64_t v51 = v50;
        }
        uint64_t v52 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v51, "Vector Storage (uint8_t, growth)");
        memcpy(v52, (const void *)a1[5], *((unsigned int *)a1 + 9));
        ((void (*)(void, void))a1[3])(*a1, a1[5]);
        *((_DWORD *)a1 + 8) = v51;
        a1[5] = v52;
        int v53 = *((_DWORD *)a1 + 9);
      }
      memmove(&v52[v48 + 1], &v52[v48], (v53 - v48));
      *(unsigned char *)(a1[5] + v48) = v46;
      int v54 = *((_DWORD *)a1 + 9);
      unsigned int v55 = v54 + 1;
      *((_DWORD *)a1 + 9) = v54 + 1;
      if (v46 < 0)
      {
        switch((v46 >> 1) & 7)
        {
          case 0u:
            unsigned int v56 = v54 + 2;
            int v57 = *((_DWORD *)a1 + 8);
            if (v56 <= v57)
            {
              int v60 = (char *)a1[5];
              unsigned int v61 = v55;
            }
            else
            {
              if (v57 <= 1) {
                int v57 = 1;
              }
              int v58 = 2 * v57;
              if (v58 <= (int)v56) {
                uint64_t v59 = v56;
              }
              else {
                uint64_t v59 = v58;
              }
              int v60 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v59, "Vector Storage (uint8_t, growth)");
              memcpy(v60, (const void *)a1[5], *((unsigned int *)a1 + 9));
              ((void (*)(void, void))a1[3])(*a1, a1[5]);
              *((_DWORD *)a1 + 8) = v59;
              a1[5] = v60;
              unsigned int v61 = *((_DWORD *)a1 + 9);
            }
            memmove(&v60[v55 + 1], &v60[v55], v61 - v55);
            *(unsigned char *)(a1[5] + v55) = v45;
            int v80 = 1;
            goto LABEL_96;
          case 1u:
            unsigned int v62 = v54 + 3;
            int v63 = *((_DWORD *)a1 + 8);
            if (v62 <= v63)
            {
              unsigned int v66 = (char *)a1[5];
              unsigned int v67 = v55;
            }
            else
            {
              if (v63 <= 1) {
                int v63 = 1;
              }
              int v64 = 2 * v63;
              if (v64 <= (int)v62) {
                uint64_t v65 = v62;
              }
              else {
                uint64_t v65 = v64;
              }
              unsigned int v66 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v65, "Vector Storage (uint8_t, growth)");
              memcpy(v66, (const void *)a1[5], *((unsigned int *)a1 + 9));
              ((void (*)(void, void))a1[3])(*a1, a1[5]);
              *((_DWORD *)a1 + 8) = v65;
              a1[5] = v66;
              unsigned int v67 = *((_DWORD *)a1 + 9);
            }
            memmove(&v66[v55 + 1], &v66[v55], v67 - v55);
            *(_WORD *)(a1[5] + v55) = v45;
            int v80 = 2;
            goto LABEL_96;
          case 2u:
            unsigned int v68 = v54 + 4;
            int v69 = *((_DWORD *)a1 + 8);
            if (v68 <= v69)
            {
              unint64_t v72 = (char *)a1[5];
              unsigned int v73 = v55;
            }
            else
            {
              if (v69 <= 1) {
                int v69 = 1;
              }
              int v70 = 2 * v69;
              if (v70 <= (int)v68) {
                uint64_t v71 = v68;
              }
              else {
                uint64_t v71 = v70;
              }
              unint64_t v72 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v71, "Vector Storage (uint8_t, growth)");
              memcpy(v72, (const void *)a1[5], *((unsigned int *)a1 + 9));
              ((void (*)(void, void))a1[3])(*a1, a1[5]);
              *((_DWORD *)a1 + 8) = v71;
              a1[5] = v72;
              unsigned int v73 = *((_DWORD *)a1 + 9);
            }
            memmove(&v72[v55 + 1], &v72[v55], v73 - v55);
            uint64_t v81 = a1[5] + v55;
            *(unsigned char *)(v81 + 2) = BYTE2(v45);
            *(_WORD *)uint64_t v81 = v45;
            int v80 = 3;
            goto LABEL_96;
          case 3u:
            unsigned int v74 = v54 + 5;
            int v75 = *((_DWORD *)a1 + 8);
            if (v74 <= v75)
            {
              uint64_t v78 = (char *)a1[5];
              unsigned int v79 = v55;
            }
            else
            {
              if (v75 <= 1) {
                int v75 = 1;
              }
              int v76 = 2 * v75;
              if (v76 <= (int)v74) {
                uint64_t v77 = v74;
              }
              else {
                uint64_t v77 = v76;
              }
              uint64_t v78 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v77, "Vector Storage (uint8_t, growth)");
              memcpy(v78, (const void *)a1[5], *((unsigned int *)a1 + 9));
              ((void (*)(void, void))a1[3])(*a1, a1[5]);
              *((_DWORD *)a1 + 8) = v77;
              a1[5] = v78;
              unsigned int v79 = *((_DWORD *)a1 + 9);
            }
            memmove(&v78[v55 + 1], &v78[v55], v79 - v55);
            *(_DWORD *)(a1[5] + v55) = v45;
            int v80 = 4;
LABEL_96:
            *((_DWORD *)a1 + 9) += v80;
            break;
          default:
            break;
        }
      }
      if (v45)
      {
        for (unsigned int i = 0; i != v45; ++i)
        {
          uint64_t ElementType = glpAggregateTypeGetElementType((uint64_t)ReturnType, i);
          serialize_GLPType(a1, ElementType);
          unint64_t ElementFlags = glpAggregateTypeGetElementFlags((uint64_t)ReturnType, i);
          char v85 = glp_serialized_integer64_control(ElementFlags);
          int v86 = *((_DWORD *)a1 + 8);
          uint64_t v87 = *((unsigned int *)a1 + 9);
          int v88 = v87 + 1;
          if ((int)v87 + 1 <= v86)
          {
            uint64_t v91 = (char *)a1[5];
            int v92 = *((_DWORD *)a1 + 9);
          }
          else
          {
            if (v86 <= 1) {
              int v86 = 1;
            }
            int v89 = 2 * v86;
            if (v89 <= v88) {
              uint64_t v90 = v88;
            }
            else {
              uint64_t v90 = v89;
            }
            uint64_t v91 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v90, "Vector Storage (uint8_t, growth)");
            memcpy(v91, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v90;
            a1[5] = v91;
            int v92 = *((_DWORD *)a1 + 9);
          }
          memmove(&v91[v87 + 1], &v91[v87], (v92 - v87));
          *(unsigned char *)(a1[5] + v87) = v85;
          int v93 = *((_DWORD *)a1 + 9);
          unsigned int v94 = v93 + 1;
          *((_DWORD *)a1 + 9) = v93 + 1;
          if (v85 < 0)
          {
            switch((v85 >> 1) & 7)
            {
              case 1u:
                unsigned int v101 = v93 + 3;
                int v102 = *((_DWORD *)a1 + 8);
                if (v101 <= v102)
                {
                  unsigned int v105 = (char *)a1[5];
                  unsigned int v106 = v94;
                }
                else
                {
                  if (v102 <= 1) {
                    int v102 = 1;
                  }
                  int v103 = 2 * v102;
                  if (v103 <= (int)v101) {
                    uint64_t v104 = v101;
                  }
                  else {
                    uint64_t v104 = v103;
                  }
                  unsigned int v105 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v104, "Vector Storage (uint8_t, growth)");
                  memcpy(v105, (const void *)a1[5], *((unsigned int *)a1 + 9));
                  ((void (*)(void, void))a1[3])(*a1, a1[5]);
                  *((_DWORD *)a1 + 8) = v104;
                  a1[5] = v105;
                  unsigned int v106 = *((_DWORD *)a1 + 9);
                }
                goto LABEL_202;
              case 2u:
                unsigned int v107 = v93 + 4;
                int v108 = *((_DWORD *)a1 + 8);
                if (v107 <= v108)
                {
                  int v111 = (char *)a1[5];
                  unsigned int v112 = v94;
                }
                else
                {
                  if (v108 <= 1) {
                    int v108 = 1;
                  }
                  int v109 = 2 * v108;
                  if (v109 <= (int)v107) {
                    uint64_t v110 = v107;
                  }
                  else {
                    uint64_t v110 = v109;
                  }
                  int v111 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v110, "Vector Storage (uint8_t, growth)");
                  memcpy(v111, (const void *)a1[5], *((unsigned int *)a1 + 9));
                  ((void (*)(void, void))a1[3])(*a1, a1[5]);
                  *((_DWORD *)a1 + 8) = v110;
                  a1[5] = v111;
                  unsigned int v112 = *((_DWORD *)a1 + 9);
                }
                memmove(&v111[v94 + 1], &v111[v94], v112 - v94);
                uint64_t v143 = a1[5] + v94;
                *(unsigned char *)(v143 + 2) = BYTE2(ElementFlags);
                *(_WORD *)uint64_t v143 = ElementFlags;
                goto LABEL_205;
              case 3u:
                unsigned int v113 = v93 + 5;
                int v114 = *((_DWORD *)a1 + 8);
                if (v113 <= v114)
                {
                  int v117 = (char *)a1[5];
                  unsigned int v118 = v94;
                }
                else
                {
                  if (v114 <= 1) {
                    int v114 = 1;
                  }
                  int v115 = 2 * v114;
                  if (v115 <= (int)v113) {
                    uint64_t v116 = v113;
                  }
                  else {
                    uint64_t v116 = v115;
                  }
                  int v117 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v116, "Vector Storage (uint8_t, growth)");
                  memcpy(v117, (const void *)a1[5], *((unsigned int *)a1 + 9));
                  ((void (*)(void, void))a1[3])(*a1, a1[5]);
                  *((_DWORD *)a1 + 8) = v116;
                  a1[5] = v117;
                  unsigned int v118 = *((_DWORD *)a1 + 9);
                }
                memmove(&v117[v94 + 1], &v117[v94], v118 - v94);
                *(_DWORD *)(a1[5] + v94) = ElementFlags;
                int v144 = 4;
                break;
              case 4u:
                unsigned int v119 = v93 + 5;
                int v120 = *((_DWORD *)a1 + 8);
                if (v119 <= v120)
                {
                  int v123 = (char *)a1[5];
                  unsigned int v124 = v94;
                }
                else
                {
                  if (v120 <= 1) {
                    int v120 = 1;
                  }
                  int v121 = 2 * v120;
                  if (v121 <= (int)v119) {
                    uint64_t v122 = v119;
                  }
                  else {
                    uint64_t v122 = v121;
                  }
                  int v123 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v122, "Vector Storage (uint8_t, growth)");
                  memcpy(v123, (const void *)a1[5], *((unsigned int *)a1 + 9));
                  ((void (*)(void, void))a1[3])(*a1, a1[5]);
                  *((_DWORD *)a1 + 8) = v122;
                  a1[5] = v123;
                  unsigned int v124 = *((_DWORD *)a1 + 9);
                }
                memmove(&v123[v94 + 1], &v123[v94], v124 - v94);
                *(_DWORD *)(a1[5] + v94) = ElementFlags;
                int v146 = *((_DWORD *)a1 + 8);
                int v145 = *((_DWORD *)a1 + 9);
                unsigned int v94 = v145 + 4;
                *((_DWORD *)a1 + 9) = v145 + 4;
                unsigned int v147 = v145 + 5;
                if (v147 <= v146)
                {
                  unsigned int v99 = (char *)a1[5];
                  unsigned int v100 = v94;
                }
                else
                {
                  if (v146 <= 1) {
                    int v146 = 1;
                  }
                  int v148 = 2 * v146;
                  if (v148 <= (int)v147) {
                    uint64_t v149 = v147;
                  }
                  else {
                    uint64_t v149 = v148;
                  }
                  unsigned int v99 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v149, "Vector Storage (uint8_t, growth)");
                  memcpy(v99, (const void *)a1[5], *((unsigned int *)a1 + 9));
                  ((void (*)(void, void))a1[3])(*a1, a1[5]);
                  *((_DWORD *)a1 + 8) = v149;
                  a1[5] = v99;
                  unsigned int v100 = *((_DWORD *)a1 + 9);
                }
                ElementFlags >>= 32;
                goto LABEL_199;
              case 5u:
                unsigned int v125 = v93 + 5;
                int v126 = *((_DWORD *)a1 + 8);
                if (v125 <= v126)
                {
                  unsigned int v129 = (char *)a1[5];
                  unsigned int v130 = v94;
                }
                else
                {
                  if (v126 <= 1) {
                    int v126 = 1;
                  }
                  int v127 = 2 * v126;
                  if (v127 <= (int)v125) {
                    uint64_t v128 = v125;
                  }
                  else {
                    uint64_t v128 = v127;
                  }
                  unsigned int v129 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v128, "Vector Storage (uint8_t, growth)");
                  memcpy(v129, (const void *)a1[5], *((unsigned int *)a1 + 9));
                  ((void (*)(void, void))a1[3])(*a1, a1[5]);
                  *((_DWORD *)a1 + 8) = v128;
                  a1[5] = v129;
                  unsigned int v130 = *((_DWORD *)a1 + 9);
                }
                memmove(&v129[v94 + 1], &v129[v94], v130 - v94);
                *(_DWORD *)(a1[5] + v94) = ElementFlags;
                int v151 = *((_DWORD *)a1 + 8);
                int v150 = *((_DWORD *)a1 + 9);
                unsigned int v94 = v150 + 4;
                *((_DWORD *)a1 + 9) = v150 + 4;
                unsigned int v152 = v150 + 6;
                if (v152 <= v151)
                {
                  unsigned int v105 = (char *)a1[5];
                  unsigned int v106 = v94;
                }
                else
                {
                  if (v151 <= 1) {
                    int v151 = 1;
                  }
                  int v153 = 2 * v151;
                  if (v153 <= (int)v152) {
                    uint64_t v154 = v152;
                  }
                  else {
                    uint64_t v154 = v153;
                  }
                  unsigned int v105 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v154, "Vector Storage (uint8_t, growth)");
                  memcpy(v105, (const void *)a1[5], *((unsigned int *)a1 + 9));
                  ((void (*)(void, void))a1[3])(*a1, a1[5]);
                  *((_DWORD *)a1 + 8) = v154;
                  a1[5] = v105;
                  unsigned int v106 = *((_DWORD *)a1 + 9);
                }
                ElementFlags >>= 32;
LABEL_202:
                memmove(&v105[v94 + 1], &v105[v94], v106 - v94);
                *(_WORD *)(a1[5] + v94) = ElementFlags;
                int v144 = 2;
                break;
              case 6u:
                unsigned int v131 = v93 + 5;
                int v132 = *((_DWORD *)a1 + 8);
                if (v131 <= v132)
                {
                  uint64_t v135 = (char *)a1[5];
                  unsigned int v136 = v94;
                }
                else
                {
                  if (v132 <= 1) {
                    int v132 = 1;
                  }
                  int v133 = 2 * v132;
                  if (v133 <= (int)v131) {
                    uint64_t v134 = v131;
                  }
                  else {
                    uint64_t v134 = v133;
                  }
                  uint64_t v135 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v134, "Vector Storage (uint8_t, growth)");
                  memcpy(v135, (const void *)a1[5], *((unsigned int *)a1 + 9));
                  ((void (*)(void, void))a1[3])(*a1, a1[5]);
                  *((_DWORD *)a1 + 8) = v134;
                  a1[5] = v135;
                  unsigned int v136 = *((_DWORD *)a1 + 9);
                }
                memmove(&v135[v94 + 1], &v135[v94], v136 - v94);
                *(_DWORD *)(a1[5] + v94) = ElementFlags;
                int v156 = *((_DWORD *)a1 + 8);
                int v155 = *((_DWORD *)a1 + 9);
                unsigned int v157 = v155 + 4;
                *((_DWORD *)a1 + 9) = v155 + 4;
                unsigned int v158 = v155 + 7;
                if (v158 <= v156)
                {
                  uint64_t v161 = (char *)a1[5];
                  unsigned int v162 = v157;
                }
                else
                {
                  if (v156 <= 1) {
                    int v156 = 1;
                  }
                  int v159 = 2 * v156;
                  if (v159 <= (int)v158) {
                    uint64_t v160 = v158;
                  }
                  else {
                    uint64_t v160 = v159;
                  }
                  uint64_t v161 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v160, "Vector Storage (uint8_t, growth)");
                  memcpy(v161, (const void *)a1[5], *((unsigned int *)a1 + 9));
                  ((void (*)(void, void))a1[3])(*a1, a1[5]);
                  *((_DWORD *)a1 + 8) = v160;
                  a1[5] = v161;
                  unsigned int v162 = *((_DWORD *)a1 + 9);
                }
                memmove(&v161[v157 + 1], &v161[v157], v162 - v157);
                uint64_t v163 = a1[5] + v157;
                *(unsigned char *)(v163 + 2) = BYTE6(ElementFlags);
                *(_WORD *)uint64_t v163 = WORD2(ElementFlags);
LABEL_205:
                int v144 = 3;
                break;
              case 7u:
                unsigned int v137 = v93 + 9;
                int v138 = *((_DWORD *)a1 + 8);
                if (v137 <= v138)
                {
                  char v141 = (char *)a1[5];
                  unsigned int v142 = v94;
                }
                else
                {
                  if (v138 <= 1) {
                    int v138 = 1;
                  }
                  int v139 = 2 * v138;
                  if (v139 <= (int)v137) {
                    uint64_t v140 = v137;
                  }
                  else {
                    uint64_t v140 = v139;
                  }
                  char v141 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v140, "Vector Storage (uint8_t, growth)");
                  memcpy(v141, (const void *)a1[5], *((unsigned int *)a1 + 9));
                  ((void (*)(void, void))a1[3])(*a1, a1[5]);
                  *((_DWORD *)a1 + 8) = v140;
                  a1[5] = v141;
                  unsigned int v142 = *((_DWORD *)a1 + 9);
                }
                memmove(&v141[v94 + 1], &v141[v94], v142 - v94);
                *(void *)(a1[5] + v94) = ElementFlags;
                int v144 = 8;
                break;
              default:
                unsigned int v95 = v93 + 2;
                int v96 = *((_DWORD *)a1 + 8);
                if (v95 <= v96)
                {
                  unsigned int v99 = (char *)a1[5];
                  unsigned int v100 = v94;
                }
                else
                {
                  if (v96 <= 1) {
                    int v96 = 1;
                  }
                  int v97 = 2 * v96;
                  if (v97 <= (int)v95) {
                    uint64_t v98 = v95;
                  }
                  else {
                    uint64_t v98 = v97;
                  }
                  unsigned int v99 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v98, "Vector Storage (uint8_t, growth)");
                  memcpy(v99, (const void *)a1[5], *((unsigned int *)a1 + 9));
                  ((void (*)(void, void))a1[3])(*a1, a1[5]);
                  *((_DWORD *)a1 + 8) = v98;
                  a1[5] = v99;
                  unsigned int v100 = *((_DWORD *)a1 + 9);
                }
LABEL_199:
                memmove(&v99[v94 + 1], &v99[v94], v100 - v94);
                *(unsigned char *)(a1[5] + v94) = ElementFlags;
                int v144 = 1;
                break;
            }
            *((_DWORD *)a1 + 9) += v144;
          }
          uint64_t ElementLayout = (unint64_t *)glpAggregateTypeGetElementLayout((uint64_t)ReturnType, i);
          serialize_GLPLayoutObject(a1, ElementLayout);
        }
      }
      uint64_t ReturnType = (unsigned int *)glpFunctionTypeGetReturnType((uint64_t)ReturnType);
      uint64_t result = serialize_pointer(a1, (unint64_t)ReturnType);
      if (!result) {
        return result;
      }
    }
    switch(v43)
    {
      case 0:
        uint64_t PrimitiveType = glpPrimitiveTypeGetPrimitiveType((uint64_t)ReturnType);
        int v166 = PrimitiveType;
        unsigned int v167 = (char)glp_serialized_integer32_control(PrimitiveType);
        int v168 = *((_DWORD *)a1 + 8);
        uint64_t v169 = *((unsigned int *)a1 + 9);
        int v170 = v169 + 1;
        if ((int)v169 + 1 <= v168)
        {
          unint64_t v173 = (char *)a1[5];
          int v174 = *((_DWORD *)a1 + 9);
        }
        else
        {
          if (v168 <= 1) {
            int v168 = 1;
          }
          int v171 = 2 * v168;
          if (v171 <= v170) {
            uint64_t v172 = v170;
          }
          else {
            uint64_t v172 = v171;
          }
          unint64_t v173 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v172, "Vector Storage (uint8_t, growth)");
          memcpy(v173, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v172;
          a1[5] = v173;
          int v174 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = (uint64_t)memmove(&v173[v169 + 1], &v173[v169], (v174 - v169));
        *(unsigned char *)(a1[5] + v169) = v167;
        int v210 = *((_DWORD *)a1 + 9);
        unsigned int v211 = v210 + 1;
        *((_DWORD *)a1 + 9) = v210 + 1;
        if ((v167 & 0x80000000) != 0)
        {
          switch((v167 >> 1) & 7)
          {
            case 0u:
              goto LABEL_499;
            case 1u:
              goto LABEL_506;
            case 2u:
              goto LABEL_513;
            case 3u:
              goto LABEL_520;
            default:
              return result;
          }
        }
        break;
      case 1:
        uint64_t v175 = glpAggregateTypeGetElementCount((uint64_t)ReturnType);
        int v176 = v175;
        unsigned int v177 = (char)glp_serialized_integer32_control(v175);
        int v178 = *((_DWORD *)a1 + 8);
        uint64_t v179 = *((unsigned int *)a1 + 9);
        int v180 = v179 + 1;
        if ((int)v179 + 1 <= v178)
        {
          uint64_t v183 = (char *)a1[5];
          int v184 = *((_DWORD *)a1 + 9);
        }
        else
        {
          if (v178 <= 1) {
            int v178 = 1;
          }
          int v181 = 2 * v178;
          if (v181 <= v180) {
            uint64_t v182 = v180;
          }
          else {
            uint64_t v182 = v181;
          }
          uint64_t v183 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v182, "Vector Storage (uint8_t, growth)");
          memcpy(v183, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v182;
          a1[5] = v183;
          int v184 = *((_DWORD *)a1 + 9);
        }
        memmove(&v183[v179 + 1], &v183[v179], (v184 - v179));
        *(unsigned char *)(a1[5] + v179) = v177;
        int v212 = *((_DWORD *)a1 + 9);
        unsigned int v213 = v212 + 1;
        *((_DWORD *)a1 + 9) = v212 + 1;
        if ((v177 & 0x80000000) != 0)
        {
          switch((v177 >> 1) & 7)
          {
            case 0u:
              unsigned int v214 = v212 + 2;
              int v215 = *((_DWORD *)a1 + 8);
              if (v214 <= v215)
              {
                long long v218 = (char *)a1[5];
                unsigned int v219 = v213;
              }
              else
              {
                if (v215 <= 1) {
                  int v215 = 1;
                }
                int v216 = 2 * v215;
                if (v216 <= (int)v214) {
                  uint64_t v217 = v214;
                }
                else {
                  uint64_t v217 = v216;
                }
                long long v218 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v217, "Vector Storage (uint8_t, growth)");
                memcpy(v218, (const void *)a1[5], *((unsigned int *)a1 + 9));
                ((void (*)(void, void))a1[3])(*a1, a1[5]);
                *((_DWORD *)a1 + 8) = v217;
                a1[5] = v218;
                unsigned int v219 = *((_DWORD *)a1 + 9);
              }
              memmove(&v218[v213 + 1], &v218[v213], v219 - v213);
              *(unsigned char *)(a1[5] + v213) = v176;
              int v290 = 1;
              goto LABEL_350;
            case 1u:
              unsigned int v236 = v212 + 3;
              int v237 = *((_DWORD *)a1 + 8);
              if (v236 <= v237)
              {
                uint64_t v240 = (char *)a1[5];
                unsigned int v241 = v213;
              }
              else
              {
                if (v237 <= 1) {
                  int v237 = 1;
                }
                int v238 = 2 * v237;
                if (v238 <= (int)v236) {
                  uint64_t v239 = v236;
                }
                else {
                  uint64_t v239 = v238;
                }
                uint64_t v240 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v239, "Vector Storage (uint8_t, growth)");
                memcpy(v240, (const void *)a1[5], *((unsigned int *)a1 + 9));
                ((void (*)(void, void))a1[3])(*a1, a1[5]);
                *((_DWORD *)a1 + 8) = v239;
                a1[5] = v240;
                unsigned int v241 = *((_DWORD *)a1 + 9);
              }
              memmove(&v240[v213 + 1], &v240[v213], v241 - v213);
              *(_WORD *)(a1[5] + v213) = v176;
              int v290 = 2;
              goto LABEL_350;
            case 2u:
              unsigned int v242 = v212 + 4;
              int v243 = *((_DWORD *)a1 + 8);
              if (v242 <= v243)
              {
                unsigned int v246 = (char *)a1[5];
                unsigned int v247 = v213;
              }
              else
              {
                if (v243 <= 1) {
                  int v243 = 1;
                }
                int v244 = 2 * v243;
                if (v244 <= (int)v242) {
                  uint64_t v245 = v242;
                }
                else {
                  uint64_t v245 = v244;
                }
                unsigned int v246 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v245, "Vector Storage (uint8_t, growth)");
                memcpy(v246, (const void *)a1[5], *((unsigned int *)a1 + 9));
                ((void (*)(void, void))a1[3])(*a1, a1[5]);
                *((_DWORD *)a1 + 8) = v245;
                a1[5] = v246;
                unsigned int v247 = *((_DWORD *)a1 + 9);
              }
              memmove(&v246[v213 + 1], &v246[v213], v247 - v213);
              uint64_t v293 = a1[5] + v213;
              *(unsigned char *)(v293 + 2) = BYTE2(v176);
              *(_WORD *)uint64_t v293 = v176;
              int v290 = 3;
              goto LABEL_350;
            case 3u:
              unsigned int v248 = v212 + 5;
              int v249 = *((_DWORD *)a1 + 8);
              if (v248 <= v249)
              {
                uint64_t v252 = (char *)a1[5];
                unsigned int v253 = v213;
              }
              else
              {
                if (v249 <= 1) {
                  int v249 = 1;
                }
                int v250 = 2 * v249;
                if (v250 <= (int)v248) {
                  uint64_t v251 = v248;
                }
                else {
                  uint64_t v251 = v250;
                }
                uint64_t v252 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v251, "Vector Storage (uint8_t, growth)");
                memcpy(v252, (const void *)a1[5], *((unsigned int *)a1 + 9));
                ((void (*)(void, void))a1[3])(*a1, a1[5]);
                *((_DWORD *)a1 + 8) = v251;
                a1[5] = v252;
                unsigned int v253 = *((_DWORD *)a1 + 9);
              }
              memmove(&v252[v213 + 1], &v252[v213], v253 - v213);
              *(_DWORD *)(a1[5] + v213) = v176;
              int v290 = 4;
LABEL_350:
              *((_DWORD *)a1 + 9) += v290;
              break;
            default:
              break;
          }
        }
        if (v176)
        {
          for (unsigned int j = 0; j != v176; ++j)
          {
            uint64_t v295 = glpAggregateTypeGetElementType((uint64_t)ReturnType, j);
            serialize_GLPType(a1, v295);
            unint64_t v296 = glpAggregateTypeGetElementFlags((uint64_t)ReturnType, j);
            char v297 = glp_serialized_integer64_control(v296);
            int v298 = *((_DWORD *)a1 + 8);
            uint64_t v299 = *((unsigned int *)a1 + 9);
            int v300 = v299 + 1;
            if ((int)v299 + 1 <= v298)
            {
              uint64_t v303 = (char *)a1[5];
              int v304 = *((_DWORD *)a1 + 9);
            }
            else
            {
              if (v298 <= 1) {
                int v298 = 1;
              }
              int v301 = 2 * v298;
              if (v301 <= v300) {
                uint64_t v302 = v300;
              }
              else {
                uint64_t v302 = v301;
              }
              uint64_t v303 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v302, "Vector Storage (uint8_t, growth)");
              memcpy(v303, (const void *)a1[5], *((unsigned int *)a1 + 9));
              ((void (*)(void, void))a1[3])(*a1, a1[5]);
              *((_DWORD *)a1 + 8) = v302;
              a1[5] = v303;
              int v304 = *((_DWORD *)a1 + 9);
            }
            memmove(&v303[v299 + 1], &v303[v299], (v304 - v299));
            *(unsigned char *)(a1[5] + v299) = v297;
            int v305 = *((_DWORD *)a1 + 9);
            unsigned int v306 = v305 + 1;
            *((_DWORD *)a1 + 9) = v305 + 1;
            if (v297 < 0)
            {
              switch((v297 >> 1) & 7)
              {
                case 1u:
                  unsigned int v313 = v305 + 3;
                  int v314 = *((_DWORD *)a1 + 8);
                  if (v313 <= v314)
                  {
                    uint64_t v317 = (char *)a1[5];
                    unsigned int v318 = v306;
                  }
                  else
                  {
                    if (v314 <= 1) {
                      int v314 = 1;
                    }
                    int v315 = 2 * v314;
                    if (v315 <= (int)v313) {
                      uint64_t v316 = v313;
                    }
                    else {
                      uint64_t v316 = v315;
                    }
                    uint64_t v317 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v316, "Vector Storage (uint8_t, growth)");
                    memcpy(v317, (const void *)a1[5], *((unsigned int *)a1 + 9));
                    ((void (*)(void, void))a1[3])(*a1, a1[5]);
                    *((_DWORD *)a1 + 8) = v316;
                    a1[5] = v317;
                    unsigned int v318 = *((_DWORD *)a1 + 9);
                  }
                  goto LABEL_456;
                case 2u:
                  unsigned int v319 = v305 + 4;
                  int v320 = *((_DWORD *)a1 + 8);
                  if (v319 <= v320)
                  {
                    uint64_t v323 = (char *)a1[5];
                    unsigned int v324 = v306;
                  }
                  else
                  {
                    if (v320 <= 1) {
                      int v320 = 1;
                    }
                    int v321 = 2 * v320;
                    if (v321 <= (int)v319) {
                      uint64_t v322 = v319;
                    }
                    else {
                      uint64_t v322 = v321;
                    }
                    uint64_t v323 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v322, "Vector Storage (uint8_t, growth)");
                    memcpy(v323, (const void *)a1[5], *((unsigned int *)a1 + 9));
                    ((void (*)(void, void))a1[3])(*a1, a1[5]);
                    *((_DWORD *)a1 + 8) = v322;
                    a1[5] = v323;
                    unsigned int v324 = *((_DWORD *)a1 + 9);
                  }
                  memmove(&v323[v306 + 1], &v323[v306], v324 - v306);
                  uint64_t v355 = a1[5] + v306;
                  *(unsigned char *)(v355 + 2) = BYTE2(v296);
                  *(_WORD *)uint64_t v355 = v296;
                  goto LABEL_459;
                case 3u:
                  unsigned int v325 = v305 + 5;
                  int v326 = *((_DWORD *)a1 + 8);
                  if (v325 <= v326)
                  {
                    uint64_t v329 = (char *)a1[5];
                    unsigned int v330 = v306;
                  }
                  else
                  {
                    if (v326 <= 1) {
                      int v326 = 1;
                    }
                    int v327 = 2 * v326;
                    if (v327 <= (int)v325) {
                      uint64_t v328 = v325;
                    }
                    else {
                      uint64_t v328 = v327;
                    }
                    uint64_t v329 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v328, "Vector Storage (uint8_t, growth)");
                    memcpy(v329, (const void *)a1[5], *((unsigned int *)a1 + 9));
                    ((void (*)(void, void))a1[3])(*a1, a1[5]);
                    *((_DWORD *)a1 + 8) = v328;
                    a1[5] = v329;
                    unsigned int v330 = *((_DWORD *)a1 + 9);
                  }
                  memmove(&v329[v306 + 1], &v329[v306], v330 - v306);
                  *(_DWORD *)(a1[5] + v306) = v296;
                  int v356 = 4;
                  break;
                case 4u:
                  unsigned int v331 = v305 + 5;
                  int v332 = *((_DWORD *)a1 + 8);
                  if (v331 <= v332)
                  {
                    uint64_t v335 = (char *)a1[5];
                    unsigned int v336 = v306;
                  }
                  else
                  {
                    if (v332 <= 1) {
                      int v332 = 1;
                    }
                    int v333 = 2 * v332;
                    if (v333 <= (int)v331) {
                      uint64_t v334 = v331;
                    }
                    else {
                      uint64_t v334 = v333;
                    }
                    uint64_t v335 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v334, "Vector Storage (uint8_t, growth)");
                    memcpy(v335, (const void *)a1[5], *((unsigned int *)a1 + 9));
                    ((void (*)(void, void))a1[3])(*a1, a1[5]);
                    *((_DWORD *)a1 + 8) = v334;
                    a1[5] = v335;
                    unsigned int v336 = *((_DWORD *)a1 + 9);
                  }
                  memmove(&v335[v306 + 1], &v335[v306], v336 - v306);
                  *(_DWORD *)(a1[5] + v306) = v296;
                  int v358 = *((_DWORD *)a1 + 8);
                  int v357 = *((_DWORD *)a1 + 9);
                  unsigned int v306 = v357 + 4;
                  *((_DWORD *)a1 + 9) = v357 + 4;
                  unsigned int v359 = v357 + 5;
                  if (v359 <= v358)
                  {
                    uint64_t v311 = (char *)a1[5];
                    unsigned int v312 = v306;
                  }
                  else
                  {
                    if (v358 <= 1) {
                      int v358 = 1;
                    }
                    int v360 = 2 * v358;
                    if (v360 <= (int)v359) {
                      uint64_t v361 = v359;
                    }
                    else {
                      uint64_t v361 = v360;
                    }
                    uint64_t v311 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v361, "Vector Storage (uint8_t, growth)");
                    memcpy(v311, (const void *)a1[5], *((unsigned int *)a1 + 9));
                    ((void (*)(void, void))a1[3])(*a1, a1[5]);
                    *((_DWORD *)a1 + 8) = v361;
                    a1[5] = v311;
                    unsigned int v312 = *((_DWORD *)a1 + 9);
                  }
                  v296 >>= 32;
                  goto LABEL_453;
                case 5u:
                  unsigned int v337 = v305 + 5;
                  int v338 = *((_DWORD *)a1 + 8);
                  if (v337 <= v338)
                  {
                    long long v341 = (char *)a1[5];
                    unsigned int v342 = v306;
                  }
                  else
                  {
                    if (v338 <= 1) {
                      int v338 = 1;
                    }
                    int v339 = 2 * v338;
                    if (v339 <= (int)v337) {
                      uint64_t v340 = v337;
                    }
                    else {
                      uint64_t v340 = v339;
                    }
                    long long v341 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v340, "Vector Storage (uint8_t, growth)");
                    memcpy(v341, (const void *)a1[5], *((unsigned int *)a1 + 9));
                    ((void (*)(void, void))a1[3])(*a1, a1[5]);
                    *((_DWORD *)a1 + 8) = v340;
                    a1[5] = v341;
                    unsigned int v342 = *((_DWORD *)a1 + 9);
                  }
                  memmove(&v341[v306 + 1], &v341[v306], v342 - v306);
                  *(_DWORD *)(a1[5] + v306) = v296;
                  int v363 = *((_DWORD *)a1 + 8);
                  int v362 = *((_DWORD *)a1 + 9);
                  unsigned int v306 = v362 + 4;
                  *((_DWORD *)a1 + 9) = v362 + 4;
                  unsigned int v364 = v362 + 6;
                  if (v364 <= v363)
                  {
                    uint64_t v317 = (char *)a1[5];
                    unsigned int v318 = v306;
                  }
                  else
                  {
                    if (v363 <= 1) {
                      int v363 = 1;
                    }
                    int v365 = 2 * v363;
                    if (v365 <= (int)v364) {
                      uint64_t v366 = v364;
                    }
                    else {
                      uint64_t v366 = v365;
                    }
                    uint64_t v317 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v366, "Vector Storage (uint8_t, growth)");
                    memcpy(v317, (const void *)a1[5], *((unsigned int *)a1 + 9));
                    ((void (*)(void, void))a1[3])(*a1, a1[5]);
                    *((_DWORD *)a1 + 8) = v366;
                    a1[5] = v317;
                    unsigned int v318 = *((_DWORD *)a1 + 9);
                  }
                  v296 >>= 32;
LABEL_456:
                  memmove(&v317[v306 + 1], &v317[v306], v318 - v306);
                  *(_WORD *)(a1[5] + v306) = v296;
                  int v356 = 2;
                  break;
                case 6u:
                  unsigned int v343 = v305 + 5;
                  int v344 = *((_DWORD *)a1 + 8);
                  if (v343 <= v344)
                  {
                    long long v347 = (char *)a1[5];
                    unsigned int v348 = v306;
                  }
                  else
                  {
                    if (v344 <= 1) {
                      int v344 = 1;
                    }
                    int v345 = 2 * v344;
                    if (v345 <= (int)v343) {
                      uint64_t v346 = v343;
                    }
                    else {
                      uint64_t v346 = v345;
                    }
                    long long v347 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v346, "Vector Storage (uint8_t, growth)");
                    memcpy(v347, (const void *)a1[5], *((unsigned int *)a1 + 9));
                    ((void (*)(void, void))a1[3])(*a1, a1[5]);
                    *((_DWORD *)a1 + 8) = v346;
                    a1[5] = v347;
                    unsigned int v348 = *((_DWORD *)a1 + 9);
                  }
                  memmove(&v347[v306 + 1], &v347[v306], v348 - v306);
                  *(_DWORD *)(a1[5] + v306) = v296;
                  int v368 = *((_DWORD *)a1 + 8);
                  int v367 = *((_DWORD *)a1 + 9);
                  unsigned int v369 = v367 + 4;
                  *((_DWORD *)a1 + 9) = v367 + 4;
                  unsigned int v370 = v367 + 7;
                  if (v370 <= v368)
                  {
                    unsigned int v373 = (char *)a1[5];
                    unsigned int v374 = v369;
                  }
                  else
                  {
                    if (v368 <= 1) {
                      int v368 = 1;
                    }
                    int v371 = 2 * v368;
                    if (v371 <= (int)v370) {
                      uint64_t v372 = v370;
                    }
                    else {
                      uint64_t v372 = v371;
                    }
                    unsigned int v373 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v372, "Vector Storage (uint8_t, growth)");
                    memcpy(v373, (const void *)a1[5], *((unsigned int *)a1 + 9));
                    ((void (*)(void, void))a1[3])(*a1, a1[5]);
                    *((_DWORD *)a1 + 8) = v372;
                    a1[5] = v373;
                    unsigned int v374 = *((_DWORD *)a1 + 9);
                  }
                  memmove(&v373[v369 + 1], &v373[v369], v374 - v369);
                  uint64_t v375 = a1[5] + v369;
                  *(unsigned char *)(v375 + 2) = BYTE6(v296);
                  *(_WORD *)uint64_t v375 = WORD2(v296);
LABEL_459:
                  int v356 = 3;
                  break;
                case 7u:
                  unsigned int v349 = v305 + 9;
                  int v350 = *((_DWORD *)a1 + 8);
                  if (v349 <= v350)
                  {
                    uint64_t v353 = (char *)a1[5];
                    unsigned int v354 = v306;
                  }
                  else
                  {
                    if (v350 <= 1) {
                      int v350 = 1;
                    }
                    int v351 = 2 * v350;
                    if (v351 <= (int)v349) {
                      uint64_t v352 = v349;
                    }
                    else {
                      uint64_t v352 = v351;
                    }
                    uint64_t v353 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v352, "Vector Storage (uint8_t, growth)");
                    memcpy(v353, (const void *)a1[5], *((unsigned int *)a1 + 9));
                    ((void (*)(void, void))a1[3])(*a1, a1[5]);
                    *((_DWORD *)a1 + 8) = v352;
                    a1[5] = v353;
                    unsigned int v354 = *((_DWORD *)a1 + 9);
                  }
                  memmove(&v353[v306 + 1], &v353[v306], v354 - v306);
                  *(void *)(a1[5] + v306) = v296;
                  int v356 = 8;
                  break;
                default:
                  unsigned int v307 = v305 + 2;
                  int v308 = *((_DWORD *)a1 + 8);
                  if (v307 <= v308)
                  {
                    uint64_t v311 = (char *)a1[5];
                    unsigned int v312 = v306;
                  }
                  else
                  {
                    if (v308 <= 1) {
                      int v308 = 1;
                    }
                    int v309 = 2 * v308;
                    if (v309 <= (int)v307) {
                      uint64_t v310 = v307;
                    }
                    else {
                      uint64_t v310 = v309;
                    }
                    uint64_t v311 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v310, "Vector Storage (uint8_t, growth)");
                    memcpy(v311, (const void *)a1[5], *((unsigned int *)a1 + 9));
                    ((void (*)(void, void))a1[3])(*a1, a1[5]);
                    *((_DWORD *)a1 + 8) = v310;
                    a1[5] = v311;
                    unsigned int v312 = *((_DWORD *)a1 + 9);
                  }
LABEL_453:
                  memmove(&v311[v306 + 1], &v311[v306], v312 - v306);
                  *(unsigned char *)(a1[5] + v306) = v296;
                  int v356 = 1;
                  break;
              }
              *((_DWORD *)a1 + 9) += v356;
            }
            uint64_t v376 = (unint64_t *)glpAggregateTypeGetElementLayout((uint64_t)ReturnType, j);
            serialize_GLPLayoutObject(a1, v376);
            uint64_t FieldName = (const char *)glpStructTypeGetFieldName((uint64_t)ReturnType, j);
            serialize_GLPString(a1, FieldName, v378);
          }
        }
        Name = (const char *)glpStructTypeGetName((uint64_t)ReturnType);
        uint64_t result = serialize_GLPString(a1, Name, v379);
        break;
      case 2:
        uint64_t v185 = glpArrayTypeGetElementType((uint64_t)ReturnType);
        serialize_GLPType(a1, v185);
        uint64_t v186 = glpArrayTypeGetElementCount((uint64_t)ReturnType);
        int v187 = v186;
        unsigned int v188 = (char)glp_serialized_integer32_control(v186);
        int v189 = *((_DWORD *)a1 + 8);
        uint64_t v190 = *((unsigned int *)a1 + 9);
        int v191 = v190 + 1;
        if ((int)v190 + 1 <= v189)
        {
          uint64_t v194 = (char *)a1[5];
          int v195 = *((_DWORD *)a1 + 9);
        }
        else
        {
          if (v189 <= 1) {
            int v189 = 1;
          }
          int v192 = 2 * v189;
          if (v192 <= v191) {
            uint64_t v193 = v191;
          }
          else {
            uint64_t v193 = v192;
          }
          uint64_t v194 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v193, "Vector Storage (uint8_t, growth)");
          memcpy(v194, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v193;
          a1[5] = v194;
          int v195 = *((_DWORD *)a1 + 9);
        }
        memmove(&v194[v190 + 1], &v194[v190], (v195 - v190));
        *(unsigned char *)(a1[5] + v190) = v188;
        int v220 = *((_DWORD *)a1 + 9);
        unsigned int v221 = v220 + 1;
        *((_DWORD *)a1 + 9) = v220 + 1;
        if ((v188 & 0x80000000) != 0)
        {
          switch((v188 >> 1) & 7)
          {
            case 0u:
              unsigned int v222 = v220 + 2;
              int v223 = *((_DWORD *)a1 + 8);
              if (v222 <= v223)
              {
                long long v226 = (char *)a1[5];
                unsigned int v227 = v221;
              }
              else
              {
                if (v223 <= 1) {
                  int v223 = 1;
                }
                int v224 = 2 * v223;
                if (v224 <= (int)v222) {
                  uint64_t v225 = v222;
                }
                else {
                  uint64_t v225 = v224;
                }
                long long v226 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v225, "Vector Storage (uint8_t, growth)");
                memcpy(v226, (const void *)a1[5], *((unsigned int *)a1 + 9));
                ((void (*)(void, void))a1[3])(*a1, a1[5]);
                *((_DWORD *)a1 + 8) = v225;
                a1[5] = v226;
                unsigned int v227 = *((_DWORD *)a1 + 9);
              }
              memmove(&v226[v221 + 1], &v226[v221], v227 - v221);
              *(unsigned char *)(a1[5] + v221) = v187;
              int v291 = 1;
              goto LABEL_471;
            case 1u:
              unsigned int v254 = v220 + 3;
              int v255 = *((_DWORD *)a1 + 8);
              if (v254 <= v255)
              {
                double v258 = (char *)a1[5];
                unsigned int v259 = v221;
              }
              else
              {
                if (v255 <= 1) {
                  int v255 = 1;
                }
                int v256 = 2 * v255;
                if (v256 <= (int)v254) {
                  uint64_t v257 = v254;
                }
                else {
                  uint64_t v257 = v256;
                }
                double v258 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v257, "Vector Storage (uint8_t, growth)");
                memcpy(v258, (const void *)a1[5], *((unsigned int *)a1 + 9));
                ((void (*)(void, void))a1[3])(*a1, a1[5]);
                *((_DWORD *)a1 + 8) = v257;
                a1[5] = v258;
                unsigned int v259 = *((_DWORD *)a1 + 9);
              }
              memmove(&v258[v221 + 1], &v258[v221], v259 - v221);
              *(_WORD *)(a1[5] + v221) = v187;
              int v291 = 2;
              goto LABEL_471;
            case 2u:
              unsigned int v260 = v220 + 4;
              int v261 = *((_DWORD *)a1 + 8);
              if (v260 <= v261)
              {
                long long v264 = (char *)a1[5];
                unsigned int v265 = v221;
              }
              else
              {
                if (v261 <= 1) {
                  int v261 = 1;
                }
                int v262 = 2 * v261;
                if (v262 <= (int)v260) {
                  uint64_t v263 = v260;
                }
                else {
                  uint64_t v263 = v262;
                }
                long long v264 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v263, "Vector Storage (uint8_t, growth)");
                memcpy(v264, (const void *)a1[5], *((unsigned int *)a1 + 9));
                ((void (*)(void, void))a1[3])(*a1, a1[5]);
                *((_DWORD *)a1 + 8) = v263;
                a1[5] = v264;
                unsigned int v265 = *((_DWORD *)a1 + 9);
              }
              memmove(&v264[v221 + 1], &v264[v221], v265 - v221);
              uint64_t v381 = a1[5] + v221;
              *(unsigned char *)(v381 + 2) = BYTE2(v187);
              *(_WORD *)uint64_t v381 = v187;
              int v291 = 3;
              goto LABEL_471;
            case 3u:
              unsigned int v266 = v220 + 5;
              int v267 = *((_DWORD *)a1 + 8);
              if (v266 <= v267)
              {
                uint64_t v270 = (char *)a1[5];
                unsigned int v271 = v221;
              }
              else
              {
                if (v267 <= 1) {
                  int v267 = 1;
                }
                int v268 = 2 * v267;
                if (v268 <= (int)v266) {
                  uint64_t v269 = v266;
                }
                else {
                  uint64_t v269 = v268;
                }
                uint64_t v270 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v269, "Vector Storage (uint8_t, growth)");
                memcpy(v270, (const void *)a1[5], *((unsigned int *)a1 + 9));
                ((void (*)(void, void))a1[3])(*a1, a1[5]);
                *((_DWORD *)a1 + 8) = v269;
                a1[5] = v270;
                unsigned int v271 = *((_DWORD *)a1 + 9);
              }
              memmove(&v270[v221 + 1], &v270[v221], v271 - v221);
              *(_DWORD *)(a1[5] + v221) = v187;
              int v291 = 4;
LABEL_471:
              *((_DWORD *)a1 + 9) += v291;
              break;
            default:
              break;
          }
        }
        Maxuint64_t ElementCount = glpArrayTypeGetMaxElementCount((uint64_t)ReturnType);
        int v166 = MaxElementCount;
        unsigned int v383 = (char)glp_serialized_integer32_control(MaxElementCount);
        int v384 = *((_DWORD *)a1 + 8);
        uint64_t v385 = *((unsigned int *)a1 + 9);
        int v386 = v385 + 1;
        if ((int)v385 + 1 <= v384)
        {
          uint64_t v389 = (char *)a1[5];
          int v390 = *((_DWORD *)a1 + 9);
        }
        else
        {
          if (v384 <= 1) {
            int v384 = 1;
          }
          int v387 = 2 * v384;
          if (v387 <= v386) {
            uint64_t v388 = v386;
          }
          else {
            uint64_t v388 = v387;
          }
          uint64_t v389 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v388, "Vector Storage (uint8_t, growth)");
          memcpy(v389, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v388;
          a1[5] = v389;
          int v390 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = (uint64_t)memmove(&v389[v385 + 1], &v389[v385], (v390 - v385));
        *(unsigned char *)(a1[5] + v385) = v383;
        int v210 = *((_DWORD *)a1 + 9);
        unsigned int v211 = v210 + 1;
        *((_DWORD *)a1 + 9) = v210 + 1;
        if ((v383 & 0x80000000) != 0)
        {
          switch((v383 >> 1) & 7)
          {
            case 0u:
              goto LABEL_499;
            case 1u:
              goto LABEL_506;
            case 2u:
              goto LABEL_513;
            case 3u:
              goto LABEL_520;
            default:
              return result;
          }
        }
        break;
      case 3:
        uint64_t v196 = glpBankTypeGetElementType((uint64_t)ReturnType);
        serialize_GLPType(a1, v196);
        uint64_t v197 = glpBankTypeGetElementCount((uint64_t)ReturnType);
        int v198 = v197;
        unsigned int v199 = (char)glp_serialized_integer32_control(v197);
        int v200 = *((_DWORD *)a1 + 8);
        uint64_t v201 = *((unsigned int *)a1 + 9);
        int v202 = v201 + 1;
        if ((int)v201 + 1 <= v200)
        {
          unsigned int v205 = (char *)a1[5];
          int v206 = *((_DWORD *)a1 + 9);
        }
        else
        {
          if (v200 <= 1) {
            int v200 = 1;
          }
          int v203 = 2 * v200;
          if (v203 <= v202) {
            uint64_t v204 = v202;
          }
          else {
            uint64_t v204 = v203;
          }
          unsigned int v205 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v204, "Vector Storage (uint8_t, growth)");
          memcpy(v205, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v204;
          a1[5] = v205;
          int v206 = *((_DWORD *)a1 + 9);
        }
        memmove(&v205[v201 + 1], &v205[v201], (v206 - v201));
        *(unsigned char *)(a1[5] + v201) = v199;
        int v228 = *((_DWORD *)a1 + 9);
        unsigned int v229 = v228 + 1;
        *((_DWORD *)a1 + 9) = v228 + 1;
        if ((v199 & 0x80000000) != 0)
        {
          switch((v199 >> 1) & 7)
          {
            case 0u:
              unsigned int v230 = v228 + 2;
              int v231 = *((_DWORD *)a1 + 8);
              if (v230 <= v231)
              {
                uint64_t v234 = (char *)a1[5];
                unsigned int v235 = v229;
              }
              else
              {
                if (v231 <= 1) {
                  int v231 = 1;
                }
                int v232 = 2 * v231;
                if (v232 <= (int)v230) {
                  uint64_t v233 = v230;
                }
                else {
                  uint64_t v233 = v232;
                }
                uint64_t v234 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v233, "Vector Storage (uint8_t, growth)");
                memcpy(v234, (const void *)a1[5], *((unsigned int *)a1 + 9));
                ((void (*)(void, void))a1[3])(*a1, a1[5]);
                *((_DWORD *)a1 + 8) = v233;
                a1[5] = v234;
                unsigned int v235 = *((_DWORD *)a1 + 9);
              }
              memmove(&v234[v229 + 1], &v234[v229], v235 - v229);
              *(unsigned char *)(a1[5] + v229) = v198;
              int v292 = 1;
              goto LABEL_488;
            case 1u:
              unsigned int v272 = v228 + 3;
              int v273 = *((_DWORD *)a1 + 8);
              if (v272 <= v273)
              {
                double v276 = (char *)a1[5];
                unsigned int v277 = v229;
              }
              else
              {
                if (v273 <= 1) {
                  int v273 = 1;
                }
                int v274 = 2 * v273;
                if (v274 <= (int)v272) {
                  uint64_t v275 = v272;
                }
                else {
                  uint64_t v275 = v274;
                }
                double v276 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v275, "Vector Storage (uint8_t, growth)");
                memcpy(v276, (const void *)a1[5], *((unsigned int *)a1 + 9));
                ((void (*)(void, void))a1[3])(*a1, a1[5]);
                *((_DWORD *)a1 + 8) = v275;
                a1[5] = v276;
                unsigned int v277 = *((_DWORD *)a1 + 9);
              }
              memmove(&v276[v229 + 1], &v276[v229], v277 - v229);
              *(_WORD *)(a1[5] + v229) = v198;
              int v292 = 2;
              goto LABEL_488;
            case 2u:
              unsigned int v278 = v228 + 4;
              int v279 = *((_DWORD *)a1 + 8);
              if (v278 <= v279)
              {
                int v282 = (char *)a1[5];
                unsigned int v283 = v229;
              }
              else
              {
                if (v279 <= 1) {
                  int v279 = 1;
                }
                int v280 = 2 * v279;
                if (v280 <= (int)v278) {
                  uint64_t v281 = v278;
                }
                else {
                  uint64_t v281 = v280;
                }
                int v282 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v281, "Vector Storage (uint8_t, growth)");
                memcpy(v282, (const void *)a1[5], *((unsigned int *)a1 + 9));
                ((void (*)(void, void))a1[3])(*a1, a1[5]);
                *((_DWORD *)a1 + 8) = v281;
                a1[5] = v282;
                unsigned int v283 = *((_DWORD *)a1 + 9);
              }
              memmove(&v282[v229 + 1], &v282[v229], v283 - v229);
              uint64_t v391 = a1[5] + v229;
              *(unsigned char *)(v391 + 2) = BYTE2(v198);
              *(_WORD *)uint64_t v391 = v198;
              int v292 = 3;
              goto LABEL_488;
            case 3u:
              unsigned int v284 = v228 + 5;
              int v285 = *((_DWORD *)a1 + 8);
              if (v284 <= v285)
              {
                uint64_t v288 = (char *)a1[5];
                unsigned int v289 = v229;
              }
              else
              {
                if (v285 <= 1) {
                  int v285 = 1;
                }
                int v286 = 2 * v285;
                if (v286 <= (int)v284) {
                  uint64_t v287 = v284;
                }
                else {
                  uint64_t v287 = v286;
                }
                uint64_t v288 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v287, "Vector Storage (uint8_t, growth)");
                memcpy(v288, (const void *)a1[5], *((unsigned int *)a1 + 9));
                ((void (*)(void, void))a1[3])(*a1, a1[5]);
                *((_DWORD *)a1 + 8) = v287;
                a1[5] = v288;
                unsigned int v289 = *((_DWORD *)a1 + 9);
              }
              memmove(&v288[v229 + 1], &v288[v229], v289 - v229);
              *(_DWORD *)(a1[5] + v229) = v198;
              int v292 = 4;
LABEL_488:
              *((_DWORD *)a1 + 9) += v292;
              break;
            default:
              break;
          }
        }
        uint64_t Bank = glpBankTypeGetBank((uint64_t)ReturnType);
        int v166 = Bank;
        unsigned int v393 = (char)glp_serialized_integer32_control(Bank);
        int v394 = *((_DWORD *)a1 + 8);
        uint64_t v395 = *((unsigned int *)a1 + 9);
        int v396 = v395 + 1;
        if ((int)v395 + 1 <= v394)
        {
          uint64_t v399 = (char *)a1[5];
          int v400 = *((_DWORD *)a1 + 9);
        }
        else
        {
          if (v394 <= 1) {
            int v394 = 1;
          }
          int v397 = 2 * v394;
          if (v397 <= v396) {
            uint64_t v398 = v396;
          }
          else {
            uint64_t v398 = v397;
          }
          uint64_t v399 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v398, "Vector Storage (uint8_t, growth)");
          memcpy(v399, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v398;
          a1[5] = v399;
          int v400 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = (uint64_t)memmove(&v399[v395 + 1], &v399[v395], (v400 - v395));
        *(unsigned char *)(a1[5] + v395) = v393;
        int v210 = *((_DWORD *)a1 + 9);
        unsigned int v211 = v210 + 1;
        *((_DWORD *)a1 + 9) = v210 + 1;
        if ((v393 & 0x80000000) != 0)
        {
          switch((v393 >> 1) & 7)
          {
            case 0u:
LABEL_499:
              unsigned int v401 = v210 + 2;
              int v402 = *((_DWORD *)a1 + 8);
              if (v401 <= v402)
              {
                uint64_t v405 = (char *)a1[5];
                unsigned int v406 = v211;
              }
              else
              {
                if (v402 <= 1) {
                  int v402 = 1;
                }
                int v403 = 2 * v402;
                if (v403 <= (int)v401) {
                  uint64_t v404 = v401;
                }
                else {
                  uint64_t v404 = v403;
                }
                uint64_t v405 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v404, "Vector Storage (uint8_t, growth)");
                memcpy(v405, (const void *)a1[5], *((unsigned int *)a1 + 9));
                ((void (*)(void, void))a1[3])(*a1, a1[5]);
                *((_DWORD *)a1 + 8) = v404;
                a1[5] = v405;
                unsigned int v406 = *((_DWORD *)a1 + 9);
              }
              uint64_t result = (uint64_t)memmove(&v405[v211 + 1], &v405[v211], v406 - v211);
              *(unsigned char *)(a1[5] + v211) = v166;
              int v425 = *((_DWORD *)a1 + 9) + 1;
              goto LABEL_535;
            case 1u:
LABEL_506:
              unsigned int v407 = v210 + 3;
              int v408 = *((_DWORD *)a1 + 8);
              if (v407 <= v408)
              {
                uint64_t v411 = (char *)a1[5];
                unsigned int v412 = v211;
              }
              else
              {
                if (v408 <= 1) {
                  int v408 = 1;
                }
                int v409 = 2 * v408;
                if (v409 <= (int)v407) {
                  uint64_t v410 = v407;
                }
                else {
                  uint64_t v410 = v409;
                }
                uint64_t v411 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v410, "Vector Storage (uint8_t, growth)");
                memcpy(v411, (const void *)a1[5], *((unsigned int *)a1 + 9));
                ((void (*)(void, void))a1[3])(*a1, a1[5]);
                *((_DWORD *)a1 + 8) = v410;
                a1[5] = v411;
                unsigned int v412 = *((_DWORD *)a1 + 9);
              }
              uint64_t result = (uint64_t)memmove(&v411[v211 + 1], &v411[v211], v412 - v211);
              *(_WORD *)(a1[5] + v211) = v166;
              int v425 = *((_DWORD *)a1 + 9) + 2;
              goto LABEL_535;
            case 2u:
LABEL_513:
              unsigned int v413 = v210 + 4;
              int v414 = *((_DWORD *)a1 + 8);
              if (v413 <= v414)
              {
                unsigned int v417 = (char *)a1[5];
                unsigned int v418 = v211;
              }
              else
              {
                if (v414 <= 1) {
                  int v414 = 1;
                }
                int v415 = 2 * v414;
                if (v415 <= (int)v413) {
                  uint64_t v416 = v413;
                }
                else {
                  uint64_t v416 = v415;
                }
                unsigned int v417 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v416, "Vector Storage (uint8_t, growth)");
                memcpy(v417, (const void *)a1[5], *((unsigned int *)a1 + 9));
                ((void (*)(void, void))a1[3])(*a1, a1[5]);
                *((_DWORD *)a1 + 8) = v416;
                a1[5] = v417;
                unsigned int v418 = *((_DWORD *)a1 + 9);
              }
              uint64_t result = (uint64_t)memmove(&v417[v211 + 1], &v417[v211], v418 - v211);
              uint64_t v426 = a1[5] + v211;
              *(unsigned char *)(v426 + 2) = BYTE2(v166);
              *(_WORD *)uint64_t v426 = v166;
              int v425 = *((_DWORD *)a1 + 9) + 3;
              goto LABEL_535;
            case 3u:
LABEL_520:
              unsigned int v419 = v210 + 5;
              int v420 = *((_DWORD *)a1 + 8);
              if (v419 <= v420)
              {
                int v423 = (char *)a1[5];
                unsigned int v424 = v211;
              }
              else
              {
                if (v420 <= 1) {
                  int v420 = 1;
                }
                int v421 = 2 * v420;
                if (v421 <= (int)v419) {
                  uint64_t v422 = v419;
                }
                else {
                  uint64_t v422 = v421;
                }
                int v423 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v422, "Vector Storage (uint8_t, growth)");
                memcpy(v423, (const void *)a1[5], *((unsigned int *)a1 + 9));
                ((void (*)(void, void))a1[3])(*a1, a1[5]);
                *((_DWORD *)a1 + 8) = v422;
                a1[5] = v423;
                unsigned int v424 = *((_DWORD *)a1 + 9);
              }
              uint64_t result = (uint64_t)memmove(&v423[v211 + 1], &v423[v211], v424 - v211);
              *(_DWORD *)(a1[5] + v211) = v166;
              int v425 = *((_DWORD *)a1 + 9) + 4;
LABEL_535:
              *((_DWORD *)a1 + 9) = v425;
              break;
            default:
              return result;
          }
        }
        break;
      case 5:
        uint64_t v207 = (const char *)glpSubroutineTypeGetName((uint64_t)ReturnType);
        serialize_GLPString(a1, v207, v208);
        unint64_t FunctionObject = glpSubroutineTypeGetFunctionObject((uint64_t)ReturnType);
        uint64_t result = serialize_GLPFunctionObject(a1, FunctionObject);
        break;
      default:
        abort();
    }
  }
  return result;
}

uint64_t serialize_GLPLayoutObject(void *a1, unint64_t *a2)
{
  uint64_t result = serialize_pointer(a1, (unint64_t)a2);
  if (result)
  {
    serialize_GLPLayoutPair(a1, *a2);
    unint64_t v5 = a2[1];
    return serialize_GLPLayoutPair(a1, v5);
  }
  return result;
}

uint64_t serialize_GLPFunctionObject(void *a1, unint64_t a2)
{
  uint64_t result = serialize_pointer(a1, a2);
  if (result)
  {
    serialize_GLPType(a1, *(void *)a2);
    unint64_t v5 = *(void *)(a2 + 8);
    unsigned int v6 = (char)glp_serialized_integer64_control(v5);
    int v7 = *((_DWORD *)a1 + 8);
    uint64_t v8 = *((unsigned int *)a1 + 9);
    int v9 = v8 + 1;
    if ((int)v8 + 1 <= v7)
    {
      uint64_t v12 = (char *)a1[5];
      int v13 = *((_DWORD *)a1 + 9);
    }
    else
    {
      if (v7 <= 1) {
        int v7 = 1;
      }
      int v10 = 2 * v7;
      if (v10 <= v9) {
        uint64_t v11 = v9;
      }
      else {
        uint64_t v11 = v10;
      }
      uint64_t v12 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v11, "Vector Storage (uint8_t, growth)");
      memcpy(v12, (const void *)a1[5], *((unsigned int *)a1 + 9));
      ((void (*)(void, void))a1[3])(*a1, a1[5]);
      *((_DWORD *)a1 + 8) = v11;
      a1[5] = v12;
      int v13 = *((_DWORD *)a1 + 9);
    }
    memmove(&v12[v8 + 1], &v12[v8], (v13 - v8));
    *(unsigned char *)(a1[5] + v8) = v6;
    int v14 = *((_DWORD *)a1 + 9);
    unsigned int v15 = v14 + 1;
    *((_DWORD *)a1 + 9) = v14 + 1;
    if ((v6 & 0x80000000) != 0)
    {
      switch((v6 >> 1) & 7)
      {
        case 1u:
          unsigned int v28 = v14 + 3;
          int v29 = *((_DWORD *)a1 + 8);
          if (v28 <= v29)
          {
            uint64_t v32 = (char *)a1[5];
            unsigned int v33 = v15;
          }
          else
          {
            if (v29 <= 1) {
              int v29 = 1;
            }
            int v30 = 2 * v29;
            if (v30 <= (int)v28) {
              uint64_t v31 = v28;
            }
            else {
              uint64_t v31 = v30;
            }
            uint64_t v32 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v31, "Vector Storage (uint8_t, growth)");
            memcpy(v32, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v31;
            a1[5] = v32;
            unsigned int v33 = *((_DWORD *)a1 + 9);
          }
          goto LABEL_105;
        case 2u:
          unsigned int v34 = v14 + 4;
          int v35 = *((_DWORD *)a1 + 8);
          if (v34 <= v35)
          {
            uint64_t v38 = (char *)a1[5];
            unsigned int v39 = v15;
          }
          else
          {
            if (v35 <= 1) {
              int v35 = 1;
            }
            int v36 = 2 * v35;
            if (v36 <= (int)v34) {
              uint64_t v37 = v34;
            }
            else {
              uint64_t v37 = v36;
            }
            uint64_t v38 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v37, "Vector Storage (uint8_t, growth)");
            memcpy(v38, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v37;
            a1[5] = v38;
            unsigned int v39 = *((_DWORD *)a1 + 9);
          }
          memmove(&v38[v15 + 1], &v38[v15], v39 - v15);
          uint64_t v70 = a1[5] + v15;
          *(unsigned char *)(v70 + 2) = BYTE2(v5);
          *(_WORD *)uint64_t v70 = v5;
          goto LABEL_108;
        case 3u:
          unsigned int v40 = v14 + 5;
          int v41 = *((_DWORD *)a1 + 8);
          if (v40 <= v41)
          {
            uint64_t v44 = (char *)a1[5];
            unsigned int v45 = v15;
          }
          else
          {
            if (v41 <= 1) {
              int v41 = 1;
            }
            int v42 = 2 * v41;
            if (v42 <= (int)v40) {
              uint64_t v43 = v40;
            }
            else {
              uint64_t v43 = v42;
            }
            uint64_t v44 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v43, "Vector Storage (uint8_t, growth)");
            memcpy(v44, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v43;
            a1[5] = v44;
            unsigned int v45 = *((_DWORD *)a1 + 9);
          }
          memmove(&v44[v15 + 1], &v44[v15], v45 - v15);
          *(_DWORD *)(a1[5] + v15) = v5;
          int v69 = 4;
          break;
        case 4u:
          unsigned int v22 = v14 + 5;
          int v23 = *((_DWORD *)a1 + 8);
          if (v22 <= v23)
          {
            uint64_t v26 = (char *)a1[5];
            unsigned int v27 = v15;
          }
          else
          {
            if (v23 <= 1) {
              int v23 = 1;
            }
            int v24 = 2 * v23;
            if (v24 <= (int)v22) {
              uint64_t v25 = v22;
            }
            else {
              uint64_t v25 = v24;
            }
            uint64_t v26 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v25, "Vector Storage (uint8_t, growth)");
            memcpy(v26, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v25;
            a1[5] = v26;
            unsigned int v27 = *((_DWORD *)a1 + 9);
          }
          memmove(&v26[v15 + 1], &v26[v15], v27 - v15);
          *(_DWORD *)(a1[5] + v15) = v5;
          int v65 = *((_DWORD *)a1 + 8);
          int v64 = *((_DWORD *)a1 + 9);
          unsigned int v15 = v64 + 4;
          *((_DWORD *)a1 + 9) = v64 + 4;
          unsigned int v66 = v64 + 5;
          if (v66 <= v65)
          {
            uint64_t v20 = (char *)a1[5];
            unsigned int v21 = v15;
          }
          else
          {
            if (v65 <= 1) {
              int v65 = 1;
            }
            int v67 = 2 * v65;
            if (v67 <= (int)v66) {
              uint64_t v68 = v66;
            }
            else {
              uint64_t v68 = v67;
            }
            uint64_t v20 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v68, "Vector Storage (uint8_t, growth)");
            memcpy(v20, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v68;
            a1[5] = v20;
            unsigned int v21 = *((_DWORD *)a1 + 9);
          }
          v5 >>= 32;
          goto LABEL_79;
        case 5u:
          unsigned int v46 = v14 + 5;
          int v47 = *((_DWORD *)a1 + 8);
          if (v46 <= v47)
          {
            int v50 = (char *)a1[5];
            unsigned int v51 = v15;
          }
          else
          {
            if (v47 <= 1) {
              int v47 = 1;
            }
            int v48 = 2 * v47;
            if (v48 <= (int)v46) {
              uint64_t v49 = v46;
            }
            else {
              uint64_t v49 = v48;
            }
            int v50 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v49, "Vector Storage (uint8_t, growth)");
            memcpy(v50, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v49;
            a1[5] = v50;
            unsigned int v51 = *((_DWORD *)a1 + 9);
          }
          memmove(&v50[v15 + 1], &v50[v15], v51 - v15);
          *(_DWORD *)(a1[5] + v15) = v5;
          int v72 = *((_DWORD *)a1 + 8);
          int v71 = *((_DWORD *)a1 + 9);
          unsigned int v15 = v71 + 4;
          *((_DWORD *)a1 + 9) = v71 + 4;
          unsigned int v73 = v71 + 6;
          if (v73 <= v72)
          {
            uint64_t v32 = (char *)a1[5];
            unsigned int v33 = v15;
          }
          else
          {
            if (v72 <= 1) {
              int v72 = 1;
            }
            int v74 = 2 * v72;
            if (v74 <= (int)v73) {
              uint64_t v75 = v73;
            }
            else {
              uint64_t v75 = v74;
            }
            uint64_t v32 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v75, "Vector Storage (uint8_t, growth)");
            memcpy(v32, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v75;
            a1[5] = v32;
            unsigned int v33 = *((_DWORD *)a1 + 9);
          }
          v5 >>= 32;
LABEL_105:
          memmove(&v32[v15 + 1], &v32[v15], v33 - v15);
          *(_WORD *)(a1[5] + v15) = v5;
          int v69 = 2;
          break;
        case 6u:
          unsigned int v52 = v14 + 5;
          int v53 = *((_DWORD *)a1 + 8);
          if (v52 <= v53)
          {
            unsigned int v56 = (char *)a1[5];
            unsigned int v57 = v15;
          }
          else
          {
            if (v53 <= 1) {
              int v53 = 1;
            }
            int v54 = 2 * v53;
            if (v54 <= (int)v52) {
              uint64_t v55 = v52;
            }
            else {
              uint64_t v55 = v54;
            }
            unsigned int v56 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v55, "Vector Storage (uint8_t, growth)");
            memcpy(v56, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v55;
            a1[5] = v56;
            unsigned int v57 = *((_DWORD *)a1 + 9);
          }
          memmove(&v56[v15 + 1], &v56[v15], v57 - v15);
          *(_DWORD *)(a1[5] + v15) = v5;
          int v77 = *((_DWORD *)a1 + 8);
          int v76 = *((_DWORD *)a1 + 9);
          unsigned int v78 = v76 + 4;
          *((_DWORD *)a1 + 9) = v76 + 4;
          unsigned int v79 = v76 + 7;
          if (v79 <= v77)
          {
            uint64_t v82 = (char *)a1[5];
            unsigned int v83 = v78;
          }
          else
          {
            if (v77 <= 1) {
              int v77 = 1;
            }
            int v80 = 2 * v77;
            if (v80 <= (int)v79) {
              uint64_t v81 = v79;
            }
            else {
              uint64_t v81 = v80;
            }
            uint64_t v82 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v81, "Vector Storage (uint8_t, growth)");
            memcpy(v82, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v81;
            a1[5] = v82;
            unsigned int v83 = *((_DWORD *)a1 + 9);
          }
          memmove(&v82[v78 + 1], &v82[v78], v83 - v78);
          uint64_t v84 = a1[5] + v78;
          *(unsigned char *)(v84 + 2) = BYTE6(v5);
          *(_WORD *)uint64_t v84 = WORD2(v5);
LABEL_108:
          int v69 = 3;
          break;
        case 7u:
          unsigned int v58 = v14 + 9;
          int v59 = *((_DWORD *)a1 + 8);
          if (v58 <= v59)
          {
            unsigned int v62 = (char *)a1[5];
            unsigned int v63 = v15;
          }
          else
          {
            if (v59 <= 1) {
              int v59 = 1;
            }
            int v60 = 2 * v59;
            if (v60 <= (int)v58) {
              uint64_t v61 = v58;
            }
            else {
              uint64_t v61 = v60;
            }
            unsigned int v62 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v61, "Vector Storage (uint8_t, growth)");
            memcpy(v62, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v61;
            a1[5] = v62;
            unsigned int v63 = *((_DWORD *)a1 + 9);
          }
          memmove(&v62[v15 + 1], &v62[v15], v63 - v15);
          *(void *)(a1[5] + v15) = v5;
          int v69 = 8;
          break;
        default:
          unsigned int v16 = v14 + 2;
          int v17 = *((_DWORD *)a1 + 8);
          if (v16 <= v17)
          {
            uint64_t v20 = (char *)a1[5];
            unsigned int v21 = v15;
          }
          else
          {
            if (v17 <= 1) {
              int v17 = 1;
            }
            int v18 = 2 * v17;
            if (v18 <= (int)v16) {
              uint64_t v19 = v16;
            }
            else {
              uint64_t v19 = v18;
            }
            uint64_t v20 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v19, "Vector Storage (uint8_t, growth)");
            memcpy(v20, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v19;
            a1[5] = v20;
            unsigned int v21 = *((_DWORD *)a1 + 9);
          }
LABEL_79:
          memmove(&v20[v15 + 1], &v20[v15], v21 - v15);
          *(unsigned char *)(a1[5] + v15) = v5;
          int v69 = 1;
          break;
      }
      *((_DWORD *)a1 + 9) += v69;
    }
    if ((*(unsigned char *)(a2 + 9) & 0x40) != 0)
    {
      unsigned int v85 = *(_DWORD *)(a2 + 92);
      unsigned int v86 = (char)glp_serialized_integer32_control(v85);
      int v87 = *((_DWORD *)a1 + 8);
      uint64_t v88 = *((unsigned int *)a1 + 9);
      int v89 = v88 + 1;
      if ((int)v88 + 1 <= v87)
      {
        int v92 = (char *)a1[5];
        int v93 = *((_DWORD *)a1 + 9);
      }
      else
      {
        if (v87 <= 1) {
          int v87 = 1;
        }
        int v90 = 2 * v87;
        if (v90 <= v89) {
          uint64_t v91 = v89;
        }
        else {
          uint64_t v91 = v90;
        }
        int v92 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v91, "Vector Storage (uint8_t, growth)");
        memcpy(v92, (const void *)a1[5], *((unsigned int *)a1 + 9));
        ((void (*)(void, void))a1[3])(*a1, a1[5]);
        *((_DWORD *)a1 + 8) = v91;
        a1[5] = v92;
        int v93 = *((_DWORD *)a1 + 9);
      }
      memmove(&v92[v88 + 1], &v92[v88], (v93 - v88));
      *(unsigned char *)(a1[5] + v88) = v86;
      int v94 = *((_DWORD *)a1 + 9);
      unsigned int v95 = v94 + 1;
      *((_DWORD *)a1 + 9) = v94 + 1;
      if ((v86 & 0x80000000) != 0)
      {
        switch((v86 >> 1) & 7)
        {
          case 0u:
            unsigned int v96 = v94 + 2;
            int v97 = *((_DWORD *)a1 + 8);
            if (v96 <= v97)
            {
              unsigned int v100 = (char *)a1[5];
              unsigned int v101 = v95;
            }
            else
            {
              if (v97 <= 1) {
                int v97 = 1;
              }
              int v98 = 2 * v97;
              if (v98 <= (int)v96) {
                uint64_t v99 = v96;
              }
              else {
                uint64_t v99 = v98;
              }
              unsigned int v100 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v99, "Vector Storage (uint8_t, growth)");
              memcpy(v100, (const void *)a1[5], *((unsigned int *)a1 + 9));
              ((void (*)(void, void))a1[3])(*a1, a1[5]);
              *((_DWORD *)a1 + 8) = v99;
              a1[5] = v100;
              unsigned int v101 = *((_DWORD *)a1 + 9);
            }
            memmove(&v100[v95 + 1], &v100[v95], v101 - v95);
            *(unsigned char *)(a1[5] + v95) = v85;
            int v120 = 1;
            goto LABEL_157;
          case 1u:
            unsigned int v114 = v94 + 3;
            int v115 = *((_DWORD *)a1 + 8);
            if (v114 <= v115)
            {
              unsigned int v118 = (char *)a1[5];
              unsigned int v119 = v95;
            }
            else
            {
              if (v115 <= 1) {
                int v115 = 1;
              }
              int v116 = 2 * v115;
              if (v116 <= (int)v114) {
                uint64_t v117 = v114;
              }
              else {
                uint64_t v117 = v116;
              }
              unsigned int v118 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v117, "Vector Storage (uint8_t, growth)");
              memcpy(v118, (const void *)a1[5], *((unsigned int *)a1 + 9));
              ((void (*)(void, void))a1[3])(*a1, a1[5]);
              *((_DWORD *)a1 + 8) = v117;
              a1[5] = v118;
              unsigned int v119 = *((_DWORD *)a1 + 9);
            }
            memmove(&v118[v95 + 1], &v118[v95], v119 - v95);
            *(_WORD *)(a1[5] + v95) = v85;
            int v120 = 2;
            goto LABEL_157;
          case 2u:
            unsigned int v102 = v94 + 4;
            int v103 = *((_DWORD *)a1 + 8);
            if (v102 <= v103)
            {
              unsigned int v106 = (char *)a1[5];
              unsigned int v107 = v95;
            }
            else
            {
              if (v103 <= 1) {
                int v103 = 1;
              }
              int v104 = 2 * v103;
              if (v104 <= (int)v102) {
                uint64_t v105 = v102;
              }
              else {
                uint64_t v105 = v104;
              }
              unsigned int v106 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v105, "Vector Storage (uint8_t, growth)");
              memcpy(v106, (const void *)a1[5], *((unsigned int *)a1 + 9));
              ((void (*)(void, void))a1[3])(*a1, a1[5]);
              *((_DWORD *)a1 + 8) = v105;
              a1[5] = v106;
              unsigned int v107 = *((_DWORD *)a1 + 9);
            }
            memmove(&v106[v95 + 1], &v106[v95], v107 - v95);
            uint64_t v121 = a1[5] + v95;
            *(unsigned char *)(v121 + 2) = BYTE2(v85);
            *(_WORD *)uint64_t v121 = v85;
            int v120 = 3;
            goto LABEL_157;
          case 3u:
            unsigned int v108 = v94 + 5;
            int v109 = *((_DWORD *)a1 + 8);
            if (v108 <= v109)
            {
              unsigned int v112 = (char *)a1[5];
              unsigned int v113 = v95;
            }
            else
            {
              if (v109 <= 1) {
                int v109 = 1;
              }
              int v110 = 2 * v109;
              if (v110 <= (int)v108) {
                uint64_t v111 = v108;
              }
              else {
                uint64_t v111 = v110;
              }
              unsigned int v112 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v111, "Vector Storage (uint8_t, growth)");
              memcpy(v112, (const void *)a1[5], *((unsigned int *)a1 + 9));
              ((void (*)(void, void))a1[3])(*a1, a1[5]);
              *((_DWORD *)a1 + 8) = v111;
              a1[5] = v112;
              unsigned int v113 = *((_DWORD *)a1 + 9);
            }
            memmove(&v112[v95 + 1], &v112[v95], v113 - v95);
            *(_DWORD *)(a1[5] + v95) = v85;
            int v120 = 4;
LABEL_157:
            *((_DWORD *)a1 + 9) += v120;
            break;
          default:
            break;
        }
      }
    }
    serialize_GLPString(a1, *(const char **)(a2 + 24), *(void *)(a2 + 32));
    serialize_GLPString(a1, *(const char **)(a2 + 40), *(void *)(a2 + 48));
    serialize_GLPASTNode(a1, *(void *)(a2 + 56));
    serialize_GLPASTNode(a1, *(void *)(a2 + 64));
    uint64_t v122 = *(unsigned int *)(a2 + 88);
    unsigned int v123 = (char)glp_serialized_integer32_control(v122);
    int v124 = *((_DWORD *)a1 + 8);
    uint64_t v125 = *((unsigned int *)a1 + 9);
    int v126 = v125 + 1;
    if ((int)v125 + 1 <= v124)
    {
      unsigned int v129 = (char *)a1[5];
      int v130 = *((_DWORD *)a1 + 9);
    }
    else
    {
      if (v124 <= 1) {
        int v124 = 1;
      }
      int v127 = 2 * v124;
      if (v127 <= v126) {
        uint64_t v128 = v126;
      }
      else {
        uint64_t v128 = v127;
      }
      unsigned int v129 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v128, "Vector Storage (uint8_t, growth)");
      memcpy(v129, (const void *)a1[5], *((unsigned int *)a1 + 9));
      ((void (*)(void, void))a1[3])(*a1, a1[5]);
      *((_DWORD *)a1 + 8) = v128;
      a1[5] = v129;
      int v130 = *((_DWORD *)a1 + 9);
    }
    memmove(&v129[v125 + 1], &v129[v125], (v130 - v125));
    *(unsigned char *)(a1[5] + v125) = v123;
    int v131 = *((_DWORD *)a1 + 9);
    unsigned int v132 = v131 + 1;
    *((_DWORD *)a1 + 9) = v131 + 1;
    if ((v123 & 0x80000000) != 0)
    {
      switch((v123 >> 1) & 7)
      {
        case 0u:
          unsigned int v133 = v131 + 2;
          int v134 = *((_DWORD *)a1 + 8);
          if (v133 <= v134)
          {
            unsigned int v137 = (char *)a1[5];
            unsigned int v138 = v132;
          }
          else
          {
            if (v134 <= 1) {
              int v134 = 1;
            }
            int v135 = 2 * v134;
            if (v135 <= (int)v133) {
              uint64_t v136 = v133;
            }
            else {
              uint64_t v136 = v135;
            }
            unsigned int v137 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v136, "Vector Storage (uint8_t, growth)");
            memcpy(v137, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v136;
            a1[5] = v137;
            unsigned int v138 = *((_DWORD *)a1 + 9);
          }
          memmove(&v137[v132 + 1], &v137[v132], v138 - v132);
          *(unsigned char *)(a1[5] + v132) = v122;
          int v158 = 1;
          goto LABEL_204;
        case 1u:
          unsigned int v151 = v131 + 3;
          int v152 = *((_DWORD *)a1 + 8);
          if (v151 <= v152)
          {
            int v155 = (char *)a1[5];
            unsigned int v156 = v132;
          }
          else
          {
            if (v152 <= 1) {
              int v152 = 1;
            }
            int v153 = 2 * v152;
            if (v153 <= (int)v151) {
              uint64_t v154 = v151;
            }
            else {
              uint64_t v154 = v153;
            }
            int v155 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v154, "Vector Storage (uint8_t, growth)");
            memcpy(v155, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v154;
            a1[5] = v155;
            unsigned int v156 = *((_DWORD *)a1 + 9);
          }
          memmove(&v155[v132 + 1], &v155[v132], v156 - v132);
          *(_WORD *)(a1[5] + v132) = v122;
          int v158 = 2;
          goto LABEL_204;
        case 2u:
          unsigned int v139 = v131 + 4;
          int v140 = *((_DWORD *)a1 + 8);
          if (v139 <= v140)
          {
            uint64_t v143 = (char *)a1[5];
            unsigned int v144 = v132;
          }
          else
          {
            if (v140 <= 1) {
              int v140 = 1;
            }
            int v141 = 2 * v140;
            if (v141 <= (int)v139) {
              uint64_t v142 = v139;
            }
            else {
              uint64_t v142 = v141;
            }
            uint64_t v143 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v142, "Vector Storage (uint8_t, growth)");
            memcpy(v143, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v142;
            a1[5] = v143;
            unsigned int v144 = *((_DWORD *)a1 + 9);
          }
          memmove(&v143[v132 + 1], &v143[v132], v144 - v132);
          uint64_t v157 = a1[5] + v132;
          *(unsigned char *)(v157 + 2) = BYTE2(v122);
          *(_WORD *)uint64_t v157 = v122;
          int v158 = 3;
          goto LABEL_204;
        case 3u:
          unsigned int v145 = v131 + 5;
          int v146 = *((_DWORD *)a1 + 8);
          if (v145 <= v146)
          {
            uint64_t v149 = (char *)a1[5];
            unsigned int v150 = v132;
          }
          else
          {
            if (v146 <= 1) {
              int v146 = 1;
            }
            int v147 = 2 * v146;
            if (v147 <= (int)v145) {
              uint64_t v148 = v145;
            }
            else {
              uint64_t v148 = v147;
            }
            uint64_t v149 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v148, "Vector Storage (uint8_t, growth)");
            memcpy(v149, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v148;
            a1[5] = v149;
            unsigned int v150 = *((_DWORD *)a1 + 9);
          }
          memmove(&v149[v132 + 1], &v149[v132], v150 - v132);
          *(_DWORD *)(a1[5] + v132) = v122;
          int v158 = 4;
LABEL_204:
          *((_DWORD *)a1 + 9) += v158;
          break;
        default:
          break;
      }
    }
    serialize_GLPVariableObject(a1, *(void *)(a2 + 72));
    if (v122)
    {
      uint64_t v159 = 0;
      uint64_t v160 = 8 * v122;
      do
      {
        serialize_GLPVariableObject(a1, *(void *)(*(void *)(a2 + 80) + v159));
        v159 += 8;
      }
      while (v160 != v159);
    }
    unsigned int v161 = *(_DWORD *)(a2 + 96);
    unsigned int v162 = (char)glp_serialized_integer32_control(v161);
    int v163 = *((_DWORD *)a1 + 8);
    uint64_t v164 = *((unsigned int *)a1 + 9);
    int v165 = v164 + 1;
    if ((int)v164 + 1 <= v163)
    {
      int v168 = (char *)a1[5];
      int v169 = *((_DWORD *)a1 + 9);
    }
    else
    {
      if (v163 <= 1) {
        int v163 = 1;
      }
      int v166 = 2 * v163;
      if (v166 <= v165) {
        uint64_t v167 = v165;
      }
      else {
        uint64_t v167 = v166;
      }
      int v168 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v167, "Vector Storage (uint8_t, growth)");
      memcpy(v168, (const void *)a1[5], *((unsigned int *)a1 + 9));
      ((void (*)(void, void))a1[3])(*a1, a1[5]);
      *((_DWORD *)a1 + 8) = v167;
      a1[5] = v168;
      int v169 = *((_DWORD *)a1 + 9);
    }
    uint64_t result = (uint64_t)memmove(&v168[v164 + 1], &v168[v164], (v169 - v164));
    *(unsigned char *)(a1[5] + v164) = v162;
    int v170 = *((_DWORD *)a1 + 9);
    unsigned int v171 = v170 + 1;
    *((_DWORD *)a1 + 9) = v170 + 1;
    if ((v162 & 0x80000000) != 0)
    {
      switch((v162 >> 1) & 7)
      {
        case 0u:
          unsigned int v172 = v170 + 2;
          int v173 = *((_DWORD *)a1 + 8);
          if (v172 <= v173)
          {
            int v176 = (char *)a1[5];
            unsigned int v177 = v171;
          }
          else
          {
            if (v173 <= 1) {
              int v173 = 1;
            }
            int v174 = 2 * v173;
            if (v174 <= (int)v172) {
              uint64_t v175 = v172;
            }
            else {
              uint64_t v175 = v174;
            }
            int v176 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v175, "Vector Storage (uint8_t, growth)");
            memcpy(v176, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v175;
            a1[5] = v176;
            unsigned int v177 = *((_DWORD *)a1 + 9);
          }
          uint64_t result = (uint64_t)memmove(&v176[v171 + 1], &v176[v171], v177 - v171);
          *(unsigned char *)(a1[5] + v171) = v161;
          int v197 = 1;
          goto LABEL_254;
        case 1u:
          unsigned int v190 = v170 + 3;
          int v191 = *((_DWORD *)a1 + 8);
          if (v190 <= v191)
          {
            uint64_t v194 = (char *)a1[5];
            unsigned int v195 = v171;
          }
          else
          {
            if (v191 <= 1) {
              int v191 = 1;
            }
            int v192 = 2 * v191;
            if (v192 <= (int)v190) {
              uint64_t v193 = v190;
            }
            else {
              uint64_t v193 = v192;
            }
            uint64_t v194 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v193, "Vector Storage (uint8_t, growth)");
            memcpy(v194, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v193;
            a1[5] = v194;
            unsigned int v195 = *((_DWORD *)a1 + 9);
          }
          uint64_t result = (uint64_t)memmove(&v194[v171 + 1], &v194[v171], v195 - v171);
          *(_WORD *)(a1[5] + v171) = v161;
          int v197 = 2;
          goto LABEL_254;
        case 2u:
          unsigned int v178 = v170 + 4;
          int v179 = *((_DWORD *)a1 + 8);
          if (v178 <= v179)
          {
            uint64_t v182 = (char *)a1[5];
            unsigned int v183 = v171;
          }
          else
          {
            if (v179 <= 1) {
              int v179 = 1;
            }
            int v180 = 2 * v179;
            if (v180 <= (int)v178) {
              uint64_t v181 = v178;
            }
            else {
              uint64_t v181 = v180;
            }
            uint64_t v182 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v181, "Vector Storage (uint8_t, growth)");
            memcpy(v182, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v181;
            a1[5] = v182;
            unsigned int v183 = *((_DWORD *)a1 + 9);
          }
          uint64_t result = (uint64_t)memmove(&v182[v171 + 1], &v182[v171], v183 - v171);
          uint64_t v196 = a1[5] + v171;
          *(unsigned char *)(v196 + 2) = BYTE2(v161);
          *(_WORD *)uint64_t v196 = v161;
          int v197 = 3;
          goto LABEL_254;
        case 3u:
          unsigned int v184 = v170 + 5;
          int v185 = *((_DWORD *)a1 + 8);
          if (v184 <= v185)
          {
            unsigned int v188 = (char *)a1[5];
            unsigned int v189 = v171;
          }
          else
          {
            if (v185 <= 1) {
              int v185 = 1;
            }
            int v186 = 2 * v185;
            if (v186 <= (int)v184) {
              uint64_t v187 = v184;
            }
            else {
              uint64_t v187 = v186;
            }
            unsigned int v188 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v187, "Vector Storage (uint8_t, growth)");
            memcpy(v188, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v187;
            a1[5] = v188;
            unsigned int v189 = *((_DWORD *)a1 + 9);
          }
          uint64_t result = (uint64_t)memmove(&v188[v171 + 1], &v188[v171], v189 - v171);
          *(_DWORD *)(a1[5] + v171) = v161;
          int v197 = 4;
LABEL_254:
          *((_DWORD *)a1 + 9) += v197;
          break;
        default:
          break;
      }
    }
    if (*(_DWORD *)(a2 + 96))
    {
      unint64_t v198 = 0;
      do
        uint64_t result = serialize_GLPType(a1, *(void *)(*(void *)(a2 + 104) + 8 * v198++));
      while (v198 < *(unsigned int *)(a2 + 96));
    }
  }
  return result;
}

uint64_t real_serialize_GLPValue(void *a1, unint64_t a2, unsigned int *a3)
{
  unint64_t v4 = a2;
  uint64_t v125 = *MEMORY[0x263EF8340];
  uint64_t result = serialize_pointer(a1, a2);
  if (result)
  {
    unsigned int v7 = glpABIGetTypeSize(0, (uint64_t)a3, 0);
    uint64_t Size = glpTypeSizeGetSize(v7);
    unsigned int v9 = Size;
    uint64_t v122 = (uint64_t)&v122;
    MEMORY[0x270FA5388](Size);
    int v124 = (char *)&v122 - v10;
    uint64_t result = glpTypeGetAppleVec4Types(a3, (uint64_t *)((char *)&v122 - v10), 1, 0, 0, 0, 0, 0, 0);
    if (v9)
    {
      uint64_t v11 = 0;
      uint64_t v123 = v9;
      do
      {
        uint64_t v12 = v124;
        int ScalarType = glpPrimitiveTypeGetScalarType(*(unsigned int *)&v124[4 * v11]);
        uint64_t result = glpPrimitiveTypeGetScalarCount(*(unsigned int *)&v12[4 * v11]);
        if (ScalarType <= 8)
        {
          if (ScalarType == 1)
          {
            if (result)
            {
              uint64_t v112 = 0;
              unsigned int v113 = *((_DWORD *)a1 + 9);
              uint64_t v114 = 4 * result;
              do
              {
                int v115 = *(_DWORD *)(v4 + v112);
                int v116 = v113 + 4;
                int v117 = *((_DWORD *)a1 + 8);
                if (v113 + 4 <= v117)
                {
                  int v120 = (char *)a1[5];
                  unsigned int v121 = v113;
                }
                else
                {
                  if (v117 <= 1) {
                    int v117 = 1;
                  }
                  int v118 = 2 * v117;
                  if (v118 <= v116) {
                    uint64_t v119 = v116;
                  }
                  else {
                    uint64_t v119 = v118;
                  }
                  int v120 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v119, "Vector Storage (uint8_t, growth)");
                  memcpy(v120, (const void *)a1[5], *((unsigned int *)a1 + 9));
                  ((void (*)(void, void))a1[3])(*a1, a1[5]);
                  *((_DWORD *)a1 + 8) = v119;
                  a1[5] = v120;
                  unsigned int v121 = *((_DWORD *)a1 + 9);
                }
                v112 += 4;
                uint64_t result = (uint64_t)memmove(&v120[v113 + 1], &v120[v113], v121 - v113);
                *(_DWORD *)(a1[5] + v113) = v115;
                unsigned int v113 = *((_DWORD *)a1 + 9) + 4;
                *((_DWORD *)a1 + 9) = v113;
              }
              while (v114 != v112);
            }
          }
          else
          {
            if (ScalarType != 5) {
LABEL_149:
            }
              abort();
            if (result)
            {
              uint64_t v24 = 0;
              uint64_t v25 = 4 * result;
              do
              {
                unsigned int v26 = *(_DWORD *)(v4 + v24);
                char v27 = glp_serialized_integer32_control(v26);
                int v28 = *((_DWORD *)a1 + 8);
                uint64_t v29 = *((unsigned int *)a1 + 9);
                int v30 = v29 + 1;
                if ((int)v29 + 1 <= v28)
                {
                  unsigned int v33 = (char *)a1[5];
                  int v34 = *((_DWORD *)a1 + 9);
                }
                else
                {
                  if (v28 <= 1) {
                    int v28 = 1;
                  }
                  int v31 = 2 * v28;
                  if (v31 <= v30) {
                    uint64_t v32 = v30;
                  }
                  else {
                    uint64_t v32 = v31;
                  }
                  unsigned int v33 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v32, "Vector Storage (uint8_t, growth)");
                  memcpy(v33, (const void *)a1[5], *((unsigned int *)a1 + 9));
                  ((void (*)(void, void))a1[3])(*a1, a1[5]);
                  *((_DWORD *)a1 + 8) = v32;
                  a1[5] = v33;
                  int v34 = *((_DWORD *)a1 + 9);
                }
                uint64_t result = (uint64_t)memmove(&v33[v29 + 1], &v33[v29], (v34 - v29));
                *(unsigned char *)(a1[5] + v29) = v27;
                int v35 = *((_DWORD *)a1 + 9);
                unsigned int v36 = v35 + 1;
                *((_DWORD *)a1 + 9) = v35 + 1;
                if (v27 < 0)
                {
                  switch((v27 >> 1) & 7)
                  {
                    case 0u:
                      unsigned int v37 = v35 + 2;
                      int v38 = *((_DWORD *)a1 + 8);
                      if (v37 <= v38)
                      {
                        int v41 = (char *)a1[5];
                        unsigned int v42 = v36;
                      }
                      else
                      {
                        if (v38 <= 1) {
                          int v38 = 1;
                        }
                        int v39 = 2 * v38;
                        if (v39 <= (int)v37) {
                          uint64_t v40 = v37;
                        }
                        else {
                          uint64_t v40 = v39;
                        }
                        int v41 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v40, "Vector Storage (uint8_t, growth)");
                        memcpy(v41, (const void *)a1[5], *((unsigned int *)a1 + 9));
                        ((void (*)(void, void))a1[3])(*a1, a1[5]);
                        *((_DWORD *)a1 + 8) = v40;
                        a1[5] = v41;
                        unsigned int v42 = *((_DWORD *)a1 + 9);
                      }
                      uint64_t result = (uint64_t)memmove(&v41[v36 + 1], &v41[v36], v42 - v36);
                      *(unsigned char *)(a1[5] + v36) = v26;
                      int v61 = 1;
                      goto LABEL_70;
                    case 1u:
                      unsigned int v43 = v35 + 3;
                      int v44 = *((_DWORD *)a1 + 8);
                      if (v43 <= v44)
                      {
                        int v47 = (char *)a1[5];
                        unsigned int v48 = v36;
                      }
                      else
                      {
                        if (v44 <= 1) {
                          int v44 = 1;
                        }
                        int v45 = 2 * v44;
                        if (v45 <= (int)v43) {
                          uint64_t v46 = v43;
                        }
                        else {
                          uint64_t v46 = v45;
                        }
                        int v47 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v46, "Vector Storage (uint8_t, growth)");
                        memcpy(v47, (const void *)a1[5], *((unsigned int *)a1 + 9));
                        ((void (*)(void, void))a1[3])(*a1, a1[5]);
                        *((_DWORD *)a1 + 8) = v46;
                        a1[5] = v47;
                        unsigned int v48 = *((_DWORD *)a1 + 9);
                      }
                      uint64_t result = (uint64_t)memmove(&v47[v36 + 1], &v47[v36], v48 - v36);
                      *(_WORD *)(a1[5] + v36) = v26;
                      int v61 = 2;
                      goto LABEL_70;
                    case 2u:
                      unsigned int v49 = v35 + 4;
                      int v50 = *((_DWORD *)a1 + 8);
                      if (v49 <= v50)
                      {
                        int v53 = (char *)a1[5];
                        unsigned int v54 = v36;
                      }
                      else
                      {
                        if (v50 <= 1) {
                          int v50 = 1;
                        }
                        int v51 = 2 * v50;
                        if (v51 <= (int)v49) {
                          uint64_t v52 = v49;
                        }
                        else {
                          uint64_t v52 = v51;
                        }
                        int v53 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v52, "Vector Storage (uint8_t, growth)");
                        memcpy(v53, (const void *)a1[5], *((unsigned int *)a1 + 9));
                        ((void (*)(void, void))a1[3])(*a1, a1[5]);
                        *((_DWORD *)a1 + 8) = v52;
                        a1[5] = v53;
                        unsigned int v54 = *((_DWORD *)a1 + 9);
                      }
                      uint64_t result = (uint64_t)memmove(&v53[v36 + 1], &v53[v36], v54 - v36);
                      uint64_t v62 = a1[5] + v36;
                      *(unsigned char *)(v62 + 2) = BYTE2(v26);
                      *(_WORD *)uint64_t v62 = v26;
                      int v61 = 3;
                      goto LABEL_70;
                    case 3u:
                      unsigned int v55 = v35 + 5;
                      int v56 = *((_DWORD *)a1 + 8);
                      if (v55 <= v56)
                      {
                        int v59 = (char *)a1[5];
                        unsigned int v60 = v36;
                      }
                      else
                      {
                        if (v56 <= 1) {
                          int v56 = 1;
                        }
                        int v57 = 2 * v56;
                        if (v57 <= (int)v55) {
                          uint64_t v58 = v55;
                        }
                        else {
                          uint64_t v58 = v57;
                        }
                        int v59 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v58, "Vector Storage (uint8_t, growth)");
                        memcpy(v59, (const void *)a1[5], *((unsigned int *)a1 + 9));
                        ((void (*)(void, void))a1[3])(*a1, a1[5]);
                        *((_DWORD *)a1 + 8) = v58;
                        a1[5] = v59;
                        unsigned int v60 = *((_DWORD *)a1 + 9);
                      }
                      uint64_t result = (uint64_t)memmove(&v59[v36 + 1], &v59[v36], v60 - v36);
                      *(_DWORD *)(a1[5] + v36) = v26;
                      int v61 = 4;
LABEL_70:
                      *((_DWORD *)a1 + 9) += v61;
                      break;
                    default:
                      break;
                  }
                }
                v24 += 4;
              }
              while (v25 != v24);
            }
          }
        }
        else
        {
          switch(ScalarType)
          {
            case 62:
              if (result)
              {
                uint64_t v63 = 0;
                unsigned int v64 = *((_DWORD *)a1 + 9);
                uint64_t v65 = 8 * result;
                do
                {
                  uint64_t v66 = *(void *)(v4 + v63);
                  int v67 = v64 + 8;
                  int v68 = *((_DWORD *)a1 + 8);
                  if (v64 + 8 <= v68)
                  {
                    int v71 = (char *)a1[5];
                    unsigned int v72 = v64;
                  }
                  else
                  {
                    if (v68 <= 1) {
                      int v68 = 1;
                    }
                    int v69 = 2 * v68;
                    if (v69 <= v67) {
                      uint64_t v70 = v67;
                    }
                    else {
                      uint64_t v70 = v69;
                    }
                    int v71 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v70, "Vector Storage (uint8_t, growth)");
                    memcpy(v71, (const void *)a1[5], *((unsigned int *)a1 + 9));
                    ((void (*)(void, void))a1[3])(*a1, a1[5]);
                    *((_DWORD *)a1 + 8) = v70;
                    a1[5] = v71;
                    unsigned int v72 = *((_DWORD *)a1 + 9);
                  }
                  v63 += 8;
                  uint64_t result = (uint64_t)memmove(&v71[v64 + 1], &v71[v64], v72 - v64);
                  *(void *)(a1[5] + v64) = v66;
                  unsigned int v64 = *((_DWORD *)a1 + 9) + 8;
                  *((_DWORD *)a1 + 9) = v64;
                }
                while (v65 != v63);
              }
              break;
            case 36:
              if (result)
              {
                uint64_t v73 = 0;
                uint64_t v74 = 4 * result;
                do
                {
                  unsigned int v75 = *(_DWORD *)(v4 + v73);
                  char v76 = glp_serialized_integer32_control(v75);
                  int v77 = *((_DWORD *)a1 + 8);
                  uint64_t v78 = *((unsigned int *)a1 + 9);
                  int v79 = v78 + 1;
                  if ((int)v78 + 1 <= v77)
                  {
                    uint64_t v82 = (char *)a1[5];
                    int v83 = *((_DWORD *)a1 + 9);
                  }
                  else
                  {
                    if (v77 <= 1) {
                      int v77 = 1;
                    }
                    int v80 = 2 * v77;
                    if (v80 <= v79) {
                      uint64_t v81 = v79;
                    }
                    else {
                      uint64_t v81 = v80;
                    }
                    uint64_t v82 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v81, "Vector Storage (uint8_t, growth)");
                    memcpy(v82, (const void *)a1[5], *((unsigned int *)a1 + 9));
                    ((void (*)(void, void))a1[3])(*a1, a1[5]);
                    *((_DWORD *)a1 + 8) = v81;
                    a1[5] = v82;
                    int v83 = *((_DWORD *)a1 + 9);
                  }
                  uint64_t result = (uint64_t)memmove(&v82[v78 + 1], &v82[v78], (v83 - v78));
                  *(unsigned char *)(a1[5] + v78) = v76;
                  int v84 = *((_DWORD *)a1 + 9);
                  unsigned int v85 = v84 + 1;
                  *((_DWORD *)a1 + 9) = v84 + 1;
                  if (v76 < 0)
                  {
                    switch((v76 >> 1) & 7)
                    {
                      case 0u:
                        unsigned int v86 = v84 + 2;
                        int v87 = *((_DWORD *)a1 + 8);
                        if (v86 <= v87)
                        {
                          int v90 = (char *)a1[5];
                          unsigned int v91 = v85;
                        }
                        else
                        {
                          if (v87 <= 1) {
                            int v87 = 1;
                          }
                          int v88 = 2 * v87;
                          if (v88 <= (int)v86) {
                            uint64_t v89 = v86;
                          }
                          else {
                            uint64_t v89 = v88;
                          }
                          int v90 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v89, "Vector Storage (uint8_t, growth)");
                          memcpy(v90, (const void *)a1[5], *((unsigned int *)a1 + 9));
                          ((void (*)(void, void))a1[3])(*a1, a1[5]);
                          *((_DWORD *)a1 + 8) = v89;
                          a1[5] = v90;
                          unsigned int v91 = *((_DWORD *)a1 + 9);
                        }
                        uint64_t result = (uint64_t)memmove(&v90[v85 + 1], &v90[v85], v91 - v85);
                        *(unsigned char *)(a1[5] + v85) = v75;
                        int v110 = 1;
                        goto LABEL_133;
                      case 1u:
                        unsigned int v92 = v84 + 3;
                        int v93 = *((_DWORD *)a1 + 8);
                        if (v92 <= v93)
                        {
                          unsigned int v96 = (char *)a1[5];
                          unsigned int v97 = v85;
                        }
                        else
                        {
                          if (v93 <= 1) {
                            int v93 = 1;
                          }
                          int v94 = 2 * v93;
                          if (v94 <= (int)v92) {
                            uint64_t v95 = v92;
                          }
                          else {
                            uint64_t v95 = v94;
                          }
                          unsigned int v96 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v95, "Vector Storage (uint8_t, growth)");
                          memcpy(v96, (const void *)a1[5], *((unsigned int *)a1 + 9));
                          ((void (*)(void, void))a1[3])(*a1, a1[5]);
                          *((_DWORD *)a1 + 8) = v95;
                          a1[5] = v96;
                          unsigned int v97 = *((_DWORD *)a1 + 9);
                        }
                        uint64_t result = (uint64_t)memmove(&v96[v85 + 1], &v96[v85], v97 - v85);
                        *(_WORD *)(a1[5] + v85) = v75;
                        int v110 = 2;
                        goto LABEL_133;
                      case 2u:
                        unsigned int v98 = v84 + 4;
                        int v99 = *((_DWORD *)a1 + 8);
                        if (v98 <= v99)
                        {
                          unsigned int v102 = (char *)a1[5];
                          unsigned int v103 = v85;
                        }
                        else
                        {
                          if (v99 <= 1) {
                            int v99 = 1;
                          }
                          int v100 = 2 * v99;
                          if (v100 <= (int)v98) {
                            uint64_t v101 = v98;
                          }
                          else {
                            uint64_t v101 = v100;
                          }
                          unsigned int v102 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v101, "Vector Storage (uint8_t, growth)");
                          memcpy(v102, (const void *)a1[5], *((unsigned int *)a1 + 9));
                          ((void (*)(void, void))a1[3])(*a1, a1[5]);
                          *((_DWORD *)a1 + 8) = v101;
                          a1[5] = v102;
                          unsigned int v103 = *((_DWORD *)a1 + 9);
                        }
                        uint64_t result = (uint64_t)memmove(&v102[v85 + 1], &v102[v85], v103 - v85);
                        uint64_t v111 = a1[5] + v85;
                        *(unsigned char *)(v111 + 2) = BYTE2(v75);
                        *(_WORD *)uint64_t v111 = v75;
                        int v110 = 3;
                        goto LABEL_133;
                      case 3u:
                        unsigned int v104 = v84 + 5;
                        int v105 = *((_DWORD *)a1 + 8);
                        if (v104 <= v105)
                        {
                          unsigned int v108 = (char *)a1[5];
                          unsigned int v109 = v85;
                        }
                        else
                        {
                          if (v105 <= 1) {
                            int v105 = 1;
                          }
                          int v106 = 2 * v105;
                          if (v106 <= (int)v104) {
                            uint64_t v107 = v104;
                          }
                          else {
                            uint64_t v107 = v106;
                          }
                          unsigned int v108 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v107, "Vector Storage (uint8_t, growth)");
                          memcpy(v108, (const void *)a1[5], *((unsigned int *)a1 + 9));
                          ((void (*)(void, void))a1[3])(*a1, a1[5]);
                          *((_DWORD *)a1 + 8) = v107;
                          a1[5] = v108;
                          unsigned int v109 = *((_DWORD *)a1 + 9);
                        }
                        uint64_t result = (uint64_t)memmove(&v108[v85 + 1], &v108[v85], v109 - v85);
                        *(_DWORD *)(a1[5] + v85) = v75;
                        int v110 = 4;
LABEL_133:
                        *((_DWORD *)a1 + 9) += v110;
                        break;
                      default:
                        break;
                    }
                  }
                  v73 += 4;
                }
                while (v74 != v73);
              }
              break;
            case 9:
              if (result)
              {
                uint64_t v14 = 0;
                unsigned int v15 = *((_DWORD *)a1 + 9);
                uint64_t v16 = 4 * result;
                do
                {
                  BOOL v17 = *(_DWORD *)(v4 + v14) != 0;
                  int v18 = v15 + 1;
                  int v19 = *((_DWORD *)a1 + 8);
                  if (v15 + 1 <= v19)
                  {
                    unsigned int v22 = (char *)a1[5];
                    unsigned int v23 = v15;
                  }
                  else
                  {
                    if (v19 <= 1) {
                      int v19 = 1;
                    }
                    int v20 = 2 * v19;
                    if (v20 <= v18) {
                      uint64_t v21 = v18;
                    }
                    else {
                      uint64_t v21 = v20;
                    }
                    unsigned int v22 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v21, "Vector Storage (uint8_t, growth)");
                    memcpy(v22, (const void *)a1[5], *((unsigned int *)a1 + 9));
                    ((void (*)(void, void))a1[3])(*a1, a1[5]);
                    *((_DWORD *)a1 + 8) = v21;
                    a1[5] = v22;
                    unsigned int v23 = *((_DWORD *)a1 + 9);
                  }
                  v14 += 4;
                  uint64_t result = (uint64_t)memmove(&v22[v15 + 1], &v22[v15], v23 - v15);
                  *(unsigned char *)(a1[5] + v15) = v17;
                  unsigned int v15 = *((_DWORD *)a1 + 9) + 1;
                  *((_DWORD *)a1 + 9) = v15;
                }
                while (v16 != v14);
              }
              break;
            default:
              goto LABEL_149;
          }
        }
        ++v11;
        v4 += 16;
      }
      while (v11 != v123);
    }
  }
  return result;
}

void glpSerializeAST(uint64_t a1, unint64_t a2, void *a3, _DWORD *a4)
{
  memset(v57, 0, sizeof(v57));
  glpInitPoolAllocator(0x4000, 0x4000, v57);
  uint64_t v56 = 0;
  *(_OWORD *)__unint64_t n = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  glpInitSerialContext(&v52, v57);
  unsigned int v8 = *(_DWORD *)(a1 + 36);
  unsigned int v9 = (char)glp_serialized_integer32_control(v8);
  int v10 = __n[0];
  uint64_t v11 = HIDWORD(__n[0]);
  int v12 = HIDWORD(__n[0]) + 1;
  if ((HIDWORD(__n[0]) + 1) <= LODWORD(__n[0]))
  {
    unsigned int v15 = (char *)__n[1];
    int v16 = HIDWORD(__n[0]);
  }
  else
  {
    if (SLODWORD(__n[0]) <= 1) {
      int v10 = 1;
    }
    int v13 = 2 * v10;
    if (v13 <= v12) {
      uint64_t v14 = v12;
    }
    else {
      uint64_t v14 = v13;
    }
    unsigned int v15 = (char *)(*((uint64_t (**)(void, uint64_t, const char *))&v52 + 1))(v52, v14, "Vector Storage (uint8_t, growth)");
    memcpy(v15, (const void *)__n[1], HIDWORD(__n[0]));
    (*((void (**)(void, size_t))&v53 + 1))(v52, __n[1]);
    LODWORD(__n[0]) = v14;
    __n[1] = (size_t)v15;
    int v16 = HIDWORD(__n[0]);
  }
  memmove(&v15[v11 + 1], &v15[v11], (v16 - v11));
  *(unsigned char *)(__n[1] + v11) = v9;
  int v17 = HIDWORD(__n[0]);
  unsigned int v18 = ++HIDWORD(__n[0]);
  if ((v9 & 0x80000000) != 0)
  {
    switch((v9 >> 1) & 7)
    {
      case 0u:
        unsigned int v19 = v17 + 2;
        int v20 = __n[0];
        if (v19 <= LODWORD(__n[0]))
        {
          unsigned int v23 = (char *)__n[1];
          unsigned int v24 = v18;
        }
        else
        {
          if (SLODWORD(__n[0]) <= 1) {
            int v20 = 1;
          }
          int v21 = 2 * v20;
          if (v21 <= (int)v19) {
            uint64_t v22 = v19;
          }
          else {
            uint64_t v22 = v21;
          }
          unsigned int v23 = (char *)(*((uint64_t (**)(void, uint64_t, const char *))&v52 + 1))(v52, v22, "Vector Storage (uint8_t, growth)");
          memcpy(v23, (const void *)__n[1], HIDWORD(__n[0]));
          (*((void (**)(void, size_t))&v53 + 1))(v52, __n[1]);
          LODWORD(__n[0]) = v22;
          __n[1] = (size_t)v23;
          unsigned int v24 = HIDWORD(__n[0]);
        }
        memmove(&v23[v18 + 1], &v23[v18], v24 - v18);
        *(unsigned char *)(__n[1] + v18) = v8;
        int v43 = 1;
        goto LABEL_47;
      case 1u:
        unsigned int v25 = v17 + 3;
        int v26 = __n[0];
        if (v25 <= LODWORD(__n[0]))
        {
          uint64_t v29 = (char *)__n[1];
          unsigned int v30 = v18;
        }
        else
        {
          if (SLODWORD(__n[0]) <= 1) {
            int v26 = 1;
          }
          int v27 = 2 * v26;
          if (v27 <= (int)v25) {
            uint64_t v28 = v25;
          }
          else {
            uint64_t v28 = v27;
          }
          uint64_t v29 = (char *)(*((uint64_t (**)(void, uint64_t, const char *))&v52 + 1))(v52, v28, "Vector Storage (uint8_t, growth)");
          memcpy(v29, (const void *)__n[1], HIDWORD(__n[0]));
          (*((void (**)(void, size_t))&v53 + 1))(v52, __n[1]);
          LODWORD(__n[0]) = v28;
          __n[1] = (size_t)v29;
          unsigned int v30 = HIDWORD(__n[0]);
        }
        memmove(&v29[v18 + 1], &v29[v18], v30 - v18);
        *(_WORD *)(__n[1] + v18) = v8;
        int v43 = 2;
        goto LABEL_47;
      case 2u:
        unsigned int v31 = v17 + 4;
        int v32 = __n[0];
        if (v31 <= LODWORD(__n[0]))
        {
          int v35 = (char *)__n[1];
          unsigned int v36 = v18;
        }
        else
        {
          if (SLODWORD(__n[0]) <= 1) {
            int v32 = 1;
          }
          int v33 = 2 * v32;
          if (v33 <= (int)v31) {
            uint64_t v34 = v31;
          }
          else {
            uint64_t v34 = v33;
          }
          int v35 = (char *)(*((uint64_t (**)(void, uint64_t, const char *))&v52 + 1))(v52, v34, "Vector Storage (uint8_t, growth)");
          memcpy(v35, (const void *)__n[1], HIDWORD(__n[0]));
          (*((void (**)(void, size_t))&v53 + 1))(v52, __n[1]);
          LODWORD(__n[0]) = v34;
          __n[1] = (size_t)v35;
          unsigned int v36 = HIDWORD(__n[0]);
        }
        memmove(&v35[v18 + 1], &v35[v18], v36 - v18);
        size_t v44 = __n[1] + v18;
        *(unsigned char *)(v44 + 2) = BYTE2(v8);
        *(_WORD *)size_t v44 = v8;
        int v43 = 3;
        goto LABEL_47;
      case 3u:
        unsigned int v37 = v17 + 5;
        int v38 = __n[0];
        if (v37 <= LODWORD(__n[0]))
        {
          int v41 = (char *)__n[1];
          unsigned int v42 = v18;
        }
        else
        {
          if (SLODWORD(__n[0]) <= 1) {
            int v38 = 1;
          }
          int v39 = 2 * v38;
          if (v39 <= (int)v37) {
            uint64_t v40 = v37;
          }
          else {
            uint64_t v40 = v39;
          }
          int v41 = (char *)(*((uint64_t (**)(void, uint64_t, const char *))&v52 + 1))(v52, v40, "Vector Storage (uint8_t, growth)");
          memcpy(v41, (const void *)__n[1], HIDWORD(__n[0]));
          (*((void (**)(void, size_t))&v53 + 1))(v52, __n[1]);
          LODWORD(__n[0]) = v40;
          __n[1] = (size_t)v41;
          unsigned int v42 = HIDWORD(__n[0]);
        }
        memmove(&v41[v18 + 1], &v41[v18], v42 - v18);
        *(_DWORD *)(__n[1] + v18) = v8;
        int v43 = 4;
LABEL_47:
        HIDWORD(__n[0]) += v43;
        break;
      default:
        break;
    }
  }
  unint64_t v45 = *(unsigned int *)(a1 + 32);
  if (v45)
  {
    uint64_t v46 = 0;
    for (unint64_t i = 0; i < v45; ++i)
    {
      uint64_t v48 = *(void *)(a1 + 40);
      unint64_t v49 = *(void *)(v48 + v46);
      if (v49)
      {
        int v50 = *(unsigned int **)(v48 + v46 + 8);
        serialize_GLPType(&v52, (unint64_t)v50);
        real_serialize_GLPValue(&v52, v49, v50);
        unint64_t v45 = *(unsigned int *)(a1 + 32);
      }
      v46 += 32;
    }
  }
  serialize_GLPASTNode(&v52, a2);
  int v51 = malloc_type_malloc(HIDWORD(__n[0]), 0x7081ABB9uLL);
  if (!v51) {
    abort();
  }
  *a3 = v51;
  memcpy(v51, (const void *)__n[1], HIDWORD(__n[0]));
  *a4 = HIDWORD(__n[0]);
  glpDestroySerialContext((uint64_t *)&v52, 1);
  glpDestroyPoolAllocator((uint64_t)v57);
}

uint64_t serialize_GLPASTNode(void *a1, unint64_t a2)
{
  uint64_t result = serialize_pointer(a1, a2);
  if (result)
  {
    switch(glpASTNodeGetKind(a2))
    {
      case 0u:
        serializeTypeConversionFields(a1, a2);
        break;
      case 1u:
        serializeVariableIdentifierFields(a1, a2);
        break;
      case 2u:
        serializeTypeIdentifierFields(a1, a2);
        break;
      case 3u:
        serializeConstantFields(a1, a2);
        break;
      case 4u:
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
      case 0x30u:
      case 0x33u:
      case 0x34u:
      case 0x36u:
      case 0x41u:
      case 0x43u:
      case 0x44u:
      case 0x45u:
      case 0x48u:
      case 0x49u:
      case 0x4Au:
      case 0x4Du:
      case 0x52u:
        serializeASTFields(a1, a2);
        break;
      case 5u:
        serializeFieldAccessFields(a1, a2);
        break;
      case 6u:
      case 0xAu:
        serializeCallFields(a1, a2);
        break;
      case 7u:
        serializeFunctionCallFields(a1, a2);
        break;
      case 8u:
        serializeSubroutineArrayCallFields(a1, a2);
        break;
      case 9u:
        serializeMethodCallFields(a1, a2);
        break;
      case 0x1Eu:
        serializeEqualFields(a1, a2);
        break;
      case 0x1Fu:
        serializeNotEqualFields(a1, a2);
        break;
      case 0x27u:
        serializeAssignFields(a1, a2);
        break;
      case 0x28u:
        serializeOpAssignFields(a1, a2);
      case 0x29u:
        serializeReadInputFields(a1, a2);
        break;
      case 0x2Au:
        serializeWriteOutputFields(a1, a2);
        break;
      case 0x2Bu:
        serializeCommaExprFields(a1, a2);
        break;
      case 0x2Cu:
        serializeParameterDeclarationFields(a1, a2);
        break;
      case 0x2Du:
        serializeFunctionPrototypeFields(a1, a2);
        break;
      case 0x2Eu:
        serializeVariableDeclarationFields(a1, a2);
        break;
      case 0x2Fu:
        serializeVariableDeclarationGroupFields(a1, a2);
        break;
      case 0x31u:
        serializeQualifiedDeclarationFields(a1, a2);
        break;
      case 0x32u:
        serializeQualifiedDeclarationGroupFields(a1, a2);
        break;
      case 0x35u:
        serializePrimitiveTypeFields(a1, a2);
        break;
      case 0x37u:
        serializeFieldDeclarationFields(a1, a2);
        break;
      case 0x38u:
        serializeStructTypeFields(a1, a2);
        break;
      case 0x39u:
        serializeInterfaceBlockFields(a1, a2);
        break;
      case 0x3Au:
        serializeLayoutTypeFields(a1, a2);
        break;
      case 0x3Bu:
        serializeKeywordQualifierFields(a1, a2);
        break;
      case 0x3Cu:
        serializeLayoutQualifierFields(a1, a2);
        break;
      case 0x3Du:
        serializeSubroutineTypeListFields(a1, a2);
        break;
      case 0x3Eu:
        serializeQualifierListFields(a1, a2);
        break;
      case 0x3Fu:
        serializeGlobalTypeQualifierFields(a1, a2);
        break;
      case 0x40u:
        serializeLayoutPairFields(a1, a2);
        break;
      case 0x42u:
        serializeBlockFields(a1, a2);
        break;
      case 0x46u:
        serializeCaseStatementFields(a1, a2);
        break;
      case 0x47u:
        serializeDefaultStatementFields(a1, a2);
        break;
      case 0x4Bu:
        serializeReturnStatementFields(a1, a2);
        break;
      case 0x4Cu:
        serializeTopLevelFields(a1, a2);
        break;
      case 0x4Eu:
        serializeRawCallFields(a1, a2);
        break;
      case 0x4Fu:
        serializeSubroutineRawCallFields(a1, a2);
        break;
      case 0x50u:
        serializeOffsetFields(a1, a2);
        break;
      case 0x51u:
        serializeLValueFields(a1, a2);
        break;
      case 0x53u:
        serializeIBPartialDerefFields(a1, a2);
        break;
      case 0x54u:
        serializePPStreamOpFields(a1, a2);
        break;
      case 0x55u:
        serializeSubroutineUniformFields(a1, a2);
        break;
      default:
        abort();
    }
    uint64_t ChildCount = glpASTNodeGetChildCount(a2);
    int v6 = ChildCount;
    unsigned int v7 = (char)glp_serialized_integer32_control(ChildCount);
    int v8 = *((_DWORD *)a1 + 8);
    uint64_t v9 = *((unsigned int *)a1 + 9);
    int v10 = v9 + 1;
    if ((int)v9 + 1 <= v8)
    {
      int v13 = (char *)a1[5];
      int v14 = *((_DWORD *)a1 + 9);
    }
    else
    {
      if (v8 <= 1) {
        int v8 = 1;
      }
      int v11 = 2 * v8;
      if (v11 <= v10) {
        uint64_t v12 = v10;
      }
      else {
        uint64_t v12 = v11;
      }
      int v13 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v12, "Vector Storage (uint8_t, growth)");
      memcpy(v13, (const void *)a1[5], *((unsigned int *)a1 + 9));
      ((void (*)(void, void))a1[3])(*a1, a1[5]);
      *((_DWORD *)a1 + 8) = v12;
      a1[5] = v13;
      int v14 = *((_DWORD *)a1 + 9);
    }
    uint64_t result = (uint64_t)memmove(&v13[v9 + 1], &v13[v9], (v14 - v9));
    *(unsigned char *)(a1[5] + v9) = v7;
    int v15 = *((_DWORD *)a1 + 9);
    unsigned int v16 = v15 + 1;
    *((_DWORD *)a1 + 9) = v15 + 1;
    if ((v7 & 0x80000000) != 0)
    {
      switch((v7 >> 1) & 7)
      {
        case 0u:
          unsigned int v17 = v15 + 2;
          int v18 = *((_DWORD *)a1 + 8);
          if (v17 <= v18)
          {
            int v21 = (char *)a1[5];
            unsigned int v22 = v16;
          }
          else
          {
            if (v18 <= 1) {
              int v18 = 1;
            }
            int v19 = 2 * v18;
            if (v19 <= (int)v17) {
              uint64_t v20 = v17;
            }
            else {
              uint64_t v20 = v19;
            }
            int v21 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v20, "Vector Storage (uint8_t, growth)");
            memcpy(v21, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v20;
            a1[5] = v21;
            unsigned int v22 = *((_DWORD *)a1 + 9);
          }
          uint64_t result = (uint64_t)memmove(&v21[v16 + 1], &v21[v16], v22 - v16);
          *(unsigned char *)(a1[5] + v16) = v6;
          int v41 = 1;
          goto LABEL_50;
        case 1u:
          unsigned int v23 = v15 + 3;
          int v24 = *((_DWORD *)a1 + 8);
          if (v23 <= v24)
          {
            int v27 = (char *)a1[5];
            unsigned int v28 = v16;
          }
          else
          {
            if (v24 <= 1) {
              int v24 = 1;
            }
            int v25 = 2 * v24;
            if (v25 <= (int)v23) {
              uint64_t v26 = v23;
            }
            else {
              uint64_t v26 = v25;
            }
            int v27 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v26, "Vector Storage (uint8_t, growth)");
            memcpy(v27, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v26;
            a1[5] = v27;
            unsigned int v28 = *((_DWORD *)a1 + 9);
          }
          uint64_t result = (uint64_t)memmove(&v27[v16 + 1], &v27[v16], v28 - v16);
          *(_WORD *)(a1[5] + v16) = v6;
          int v41 = 2;
          goto LABEL_50;
        case 2u:
          unsigned int v29 = v15 + 4;
          int v30 = *((_DWORD *)a1 + 8);
          if (v29 <= v30)
          {
            int v33 = (char *)a1[5];
            unsigned int v34 = v16;
          }
          else
          {
            if (v30 <= 1) {
              int v30 = 1;
            }
            int v31 = 2 * v30;
            if (v31 <= (int)v29) {
              uint64_t v32 = v29;
            }
            else {
              uint64_t v32 = v31;
            }
            int v33 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v32, "Vector Storage (uint8_t, growth)");
            memcpy(v33, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v32;
            a1[5] = v33;
            unsigned int v34 = *((_DWORD *)a1 + 9);
          }
          uint64_t result = (uint64_t)memmove(&v33[v16 + 1], &v33[v16], v34 - v16);
          uint64_t v42 = a1[5] + v16;
          *(unsigned char *)(v42 + 2) = BYTE2(v6);
          *(_WORD *)uint64_t v42 = v6;
          int v41 = 3;
          goto LABEL_50;
        case 3u:
          unsigned int v35 = v15 + 5;
          int v36 = *((_DWORD *)a1 + 8);
          if (v35 <= v36)
          {
            int v39 = (char *)a1[5];
            unsigned int v40 = v16;
          }
          else
          {
            if (v36 <= 1) {
              int v36 = 1;
            }
            int v37 = 2 * v36;
            if (v37 <= (int)v35) {
              uint64_t v38 = v35;
            }
            else {
              uint64_t v38 = v37;
            }
            int v39 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v38, "Vector Storage (uint8_t, growth)");
            memcpy(v39, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v38;
            a1[5] = v39;
            unsigned int v40 = *((_DWORD *)a1 + 9);
          }
          uint64_t result = (uint64_t)memmove(&v39[v16 + 1], &v39[v16], v40 - v16);
          *(_DWORD *)(a1[5] + v16) = v6;
          int v41 = 4;
LABEL_50:
          *((_DWORD *)a1 + 9) += v41;
          break;
        default:
          break;
      }
    }
    if (v6)
    {
      for (unsigned int i = 0; i != v6; ++i)
      {
        uint64_t Child = glpASTNodeGetChild(a2, i);
        uint64_t result = serialize_GLPASTNode(a1, Child);
      }
    }
  }
  return result;
}

uint64_t serialize_GLPLayoutPair(void *a1, unint64_t a2)
{
  uint64_t result = serialize_pointer(a1, a2);
  if (result)
  {
    serialize_GLPLayoutPair(a1, *(void *)a2);
    unsigned int v5 = *(_DWORD *)(a2 + 8);
    unsigned int v6 = (char)glp_serialized_integer32_control(v5);
    int v7 = *((_DWORD *)a1 + 8);
    uint64_t v8 = *((unsigned int *)a1 + 9);
    int v9 = v8 + 1;
    if ((int)v8 + 1 <= v7)
    {
      uint64_t v12 = (char *)a1[5];
      int v13 = *((_DWORD *)a1 + 9);
    }
    else
    {
      if (v7 <= 1) {
        int v7 = 1;
      }
      int v10 = 2 * v7;
      if (v10 <= v9) {
        uint64_t v11 = v9;
      }
      else {
        uint64_t v11 = v10;
      }
      uint64_t v12 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v11, "Vector Storage (uint8_t, growth)");
      memcpy(v12, (const void *)a1[5], *((unsigned int *)a1 + 9));
      ((void (*)(void, void))a1[3])(*a1, a1[5]);
      *((_DWORD *)a1 + 8) = v11;
      a1[5] = v12;
      int v13 = *((_DWORD *)a1 + 9);
    }
    memmove(&v12[v8 + 1], &v12[v8], (v13 - v8));
    *(unsigned char *)(a1[5] + v8) = v6;
    int v14 = *((_DWORD *)a1 + 9);
    unsigned int v15 = v14 + 1;
    *((_DWORD *)a1 + 9) = v14 + 1;
    if ((v6 & 0x80000000) != 0)
    {
      switch((v6 >> 1) & 7)
      {
        case 0u:
          unsigned int v16 = v14 + 2;
          int v17 = *((_DWORD *)a1 + 8);
          if (v16 <= v17)
          {
            uint64_t v20 = (char *)a1[5];
            unsigned int v21 = v15;
          }
          else
          {
            if (v17 <= 1) {
              int v17 = 1;
            }
            int v18 = 2 * v17;
            if (v18 <= (int)v16) {
              uint64_t v19 = v16;
            }
            else {
              uint64_t v19 = v18;
            }
            uint64_t v20 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v19, "Vector Storage (uint8_t, growth)");
            memcpy(v20, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v19;
            a1[5] = v20;
            unsigned int v21 = *((_DWORD *)a1 + 9);
          }
          memmove(&v20[v15 + 1], &v20[v15], v21 - v15);
          *(unsigned char *)(a1[5] + v15) = v5;
          int v41 = 1;
          goto LABEL_48;
        case 1u:
          unsigned int v34 = v14 + 3;
          int v35 = *((_DWORD *)a1 + 8);
          if (v34 <= v35)
          {
            uint64_t v38 = (char *)a1[5];
            unsigned int v39 = v15;
          }
          else
          {
            if (v35 <= 1) {
              int v35 = 1;
            }
            int v36 = 2 * v35;
            if (v36 <= (int)v34) {
              uint64_t v37 = v34;
            }
            else {
              uint64_t v37 = v36;
            }
            uint64_t v38 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v37, "Vector Storage (uint8_t, growth)");
            memcpy(v38, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v37;
            a1[5] = v38;
            unsigned int v39 = *((_DWORD *)a1 + 9);
          }
          memmove(&v38[v15 + 1], &v38[v15], v39 - v15);
          *(_WORD *)(a1[5] + v15) = v5;
          int v41 = 2;
          goto LABEL_48;
        case 2u:
          unsigned int v22 = v14 + 4;
          int v23 = *((_DWORD *)a1 + 8);
          if (v22 <= v23)
          {
            uint64_t v26 = (char *)a1[5];
            unsigned int v27 = v15;
          }
          else
          {
            if (v23 <= 1) {
              int v23 = 1;
            }
            int v24 = 2 * v23;
            if (v24 <= (int)v22) {
              uint64_t v25 = v22;
            }
            else {
              uint64_t v25 = v24;
            }
            uint64_t v26 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v25, "Vector Storage (uint8_t, growth)");
            memcpy(v26, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v25;
            a1[5] = v26;
            unsigned int v27 = *((_DWORD *)a1 + 9);
          }
          memmove(&v26[v15 + 1], &v26[v15], v27 - v15);
          uint64_t v40 = a1[5] + v15;
          *(unsigned char *)(v40 + 2) = BYTE2(v5);
          *(_WORD *)uint64_t v40 = v5;
          int v41 = 3;
          goto LABEL_48;
        case 3u:
          unsigned int v28 = v14 + 5;
          int v29 = *((_DWORD *)a1 + 8);
          if (v28 <= v29)
          {
            uint64_t v32 = (char *)a1[5];
            unsigned int v33 = v15;
          }
          else
          {
            if (v29 <= 1) {
              int v29 = 1;
            }
            int v30 = 2 * v29;
            if (v30 <= (int)v28) {
              uint64_t v31 = v28;
            }
            else {
              uint64_t v31 = v30;
            }
            uint64_t v32 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v31, "Vector Storage (uint8_t, growth)");
            memcpy(v32, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v31;
            a1[5] = v32;
            unsigned int v33 = *((_DWORD *)a1 + 9);
          }
          memmove(&v32[v15 + 1], &v32[v15], v33 - v15);
          *(_DWORD *)(a1[5] + v15) = v5;
          int v41 = 4;
LABEL_48:
          *((_DWORD *)a1 + 9) += v41;
          break;
        default:
          break;
      }
    }
    unsigned int v42 = *(_DWORD *)(a2 + 12);
    unsigned int v43 = (char)glp_serialized_integer32_control(v42);
    int v44 = *((_DWORD *)a1 + 8);
    uint64_t v45 = *((unsigned int *)a1 + 9);
    int v46 = v45 + 1;
    if ((int)v45 + 1 <= v44)
    {
      unint64_t v49 = (char *)a1[5];
      int v50 = *((_DWORD *)a1 + 9);
    }
    else
    {
      if (v44 <= 1) {
        int v44 = 1;
      }
      int v47 = 2 * v44;
      if (v47 <= v46) {
        uint64_t v48 = v46;
      }
      else {
        uint64_t v48 = v47;
      }
      unint64_t v49 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v48, "Vector Storage (uint8_t, growth)");
      memcpy(v49, (const void *)a1[5], *((unsigned int *)a1 + 9));
      ((void (*)(void, void))a1[3])(*a1, a1[5]);
      *((_DWORD *)a1 + 8) = v48;
      a1[5] = v49;
      int v50 = *((_DWORD *)a1 + 9);
    }
    uint64_t result = (uint64_t)memmove(&v49[v45 + 1], &v49[v45], (v50 - v45));
    *(unsigned char *)(a1[5] + v45) = v43;
    int v51 = *((_DWORD *)a1 + 9);
    unsigned int v52 = v51 + 1;
    *((_DWORD *)a1 + 9) = v51 + 1;
    if ((v43 & 0x80000000) != 0)
    {
      switch((v43 >> 1) & 7)
      {
        case 0u:
          unsigned int v53 = v51 + 2;
          int v54 = *((_DWORD *)a1 + 8);
          if (v53 <= v54)
          {
            int v57 = (char *)a1[5];
            unsigned int v58 = v52;
          }
          else
          {
            if (v54 <= 1) {
              int v54 = 1;
            }
            int v55 = 2 * v54;
            if (v55 <= (int)v53) {
              uint64_t v56 = v53;
            }
            else {
              uint64_t v56 = v55;
            }
            int v57 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v56, "Vector Storage (uint8_t, growth)");
            memcpy(v57, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v56;
            a1[5] = v57;
            unsigned int v58 = *((_DWORD *)a1 + 9);
          }
          uint64_t result = (uint64_t)memmove(&v57[v52 + 1], &v57[v52], v58 - v52);
          *(unsigned char *)(a1[5] + v52) = v42;
          int v78 = 1;
          goto LABEL_95;
        case 1u:
          unsigned int v71 = v51 + 3;
          int v72 = *((_DWORD *)a1 + 8);
          if (v71 <= v72)
          {
            unsigned int v75 = (char *)a1[5];
            unsigned int v76 = v52;
          }
          else
          {
            if (v72 <= 1) {
              int v72 = 1;
            }
            int v73 = 2 * v72;
            if (v73 <= (int)v71) {
              uint64_t v74 = v71;
            }
            else {
              uint64_t v74 = v73;
            }
            unsigned int v75 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v74, "Vector Storage (uint8_t, growth)");
            memcpy(v75, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v74;
            a1[5] = v75;
            unsigned int v76 = *((_DWORD *)a1 + 9);
          }
          uint64_t result = (uint64_t)memmove(&v75[v52 + 1], &v75[v52], v76 - v52);
          *(_WORD *)(a1[5] + v52) = v42;
          int v78 = 2;
          goto LABEL_95;
        case 2u:
          unsigned int v59 = v51 + 4;
          int v60 = *((_DWORD *)a1 + 8);
          if (v59 <= v60)
          {
            uint64_t v63 = (char *)a1[5];
            unsigned int v64 = v52;
          }
          else
          {
            if (v60 <= 1) {
              int v60 = 1;
            }
            int v61 = 2 * v60;
            if (v61 <= (int)v59) {
              uint64_t v62 = v59;
            }
            else {
              uint64_t v62 = v61;
            }
            uint64_t v63 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v62, "Vector Storage (uint8_t, growth)");
            memcpy(v63, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v62;
            a1[5] = v63;
            unsigned int v64 = *((_DWORD *)a1 + 9);
          }
          uint64_t result = (uint64_t)memmove(&v63[v52 + 1], &v63[v52], v64 - v52);
          uint64_t v77 = a1[5] + v52;
          *(unsigned char *)(v77 + 2) = BYTE2(v42);
          *(_WORD *)uint64_t v77 = v42;
          int v78 = 3;
          goto LABEL_95;
        case 3u:
          unsigned int v65 = v51 + 5;
          int v66 = *((_DWORD *)a1 + 8);
          if (v65 <= v66)
          {
            int v69 = (char *)a1[5];
            unsigned int v70 = v52;
          }
          else
          {
            if (v66 <= 1) {
              int v66 = 1;
            }
            int v67 = 2 * v66;
            if (v67 <= (int)v65) {
              uint64_t v68 = v65;
            }
            else {
              uint64_t v68 = v67;
            }
            int v69 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v68, "Vector Storage (uint8_t, growth)");
            memcpy(v69, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v68;
            a1[5] = v69;
            unsigned int v70 = *((_DWORD *)a1 + 9);
          }
          uint64_t result = (uint64_t)memmove(&v69[v52 + 1], &v69[v52], v70 - v52);
          *(_DWORD *)(a1[5] + v52) = v42;
          int v78 = 4;
LABEL_95:
          *((_DWORD *)a1 + 9) += v78;
          break;
        default:
          break;
      }
    }
    if (*(_DWORD *)(a2 + 12) == 1)
    {
      uint64_t v79 = *(unsigned int *)(a2 + 16);
      unsigned int v80 = (char)glp_serialized_integer32_control(v79);
      int v81 = *((_DWORD *)a1 + 8);
      uint64_t v82 = *((unsigned int *)a1 + 9);
      int v83 = v82 + 1;
      if ((int)v82 + 1 <= v81)
      {
        unsigned int v86 = (char *)a1[5];
        int v87 = *((_DWORD *)a1 + 9);
      }
      else
      {
        if (v81 <= 1) {
          int v81 = 1;
        }
        int v84 = 2 * v81;
        if (v84 <= v83) {
          uint64_t v85 = v83;
        }
        else {
          uint64_t v85 = v84;
        }
        unsigned int v86 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v85, "Vector Storage (uint8_t, growth)");
        memcpy(v86, (const void *)a1[5], *((unsigned int *)a1 + 9));
        ((void (*)(void, void))a1[3])(*a1, a1[5]);
        *((_DWORD *)a1 + 8) = v85;
        a1[5] = v86;
        int v87 = *((_DWORD *)a1 + 9);
      }
      uint64_t result = (uint64_t)memmove(&v86[v82 + 1], &v86[v82], (v87 - v82));
      *(unsigned char *)(a1[5] + v82) = v80;
      int v88 = *((_DWORD *)a1 + 9);
      unsigned int v89 = v88 + 1;
      *((_DWORD *)a1 + 9) = v88 + 1;
      if ((v80 & 0x80000000) != 0)
      {
        switch((v80 >> 1) & 7)
        {
          case 0u:
            unsigned int v90 = v88 + 2;
            int v91 = *((_DWORD *)a1 + 8);
            if (v90 <= v91)
            {
              int v94 = (char *)a1[5];
              unsigned int v95 = v89;
            }
            else
            {
              if (v91 <= 1) {
                int v91 = 1;
              }
              int v92 = 2 * v91;
              if (v92 <= (int)v90) {
                uint64_t v93 = v90;
              }
              else {
                uint64_t v93 = v92;
              }
              int v94 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v93, "Vector Storage (uint8_t, growth)");
              memcpy(v94, (const void *)a1[5], *((unsigned int *)a1 + 9));
              ((void (*)(void, void))a1[3])(*a1, a1[5]);
              *((_DWORD *)a1 + 8) = v93;
              a1[5] = v94;
              unsigned int v95 = *((_DWORD *)a1 + 9);
            }
            uint64_t result = (uint64_t)memmove(&v94[v89 + 1], &v94[v89], v95 - v89);
            *(unsigned char *)(a1[5] + v89) = v79;
            int v114 = 1;
            goto LABEL_143;
          case 1u:
            unsigned int v108 = v88 + 3;
            int v109 = *((_DWORD *)a1 + 8);
            if (v108 <= v109)
            {
              uint64_t v112 = (char *)a1[5];
              unsigned int v113 = v89;
            }
            else
            {
              if (v109 <= 1) {
                int v109 = 1;
              }
              int v110 = 2 * v109;
              if (v110 <= (int)v108) {
                uint64_t v111 = v108;
              }
              else {
                uint64_t v111 = v110;
              }
              uint64_t v112 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v111, "Vector Storage (uint8_t, growth)");
              memcpy(v112, (const void *)a1[5], *((unsigned int *)a1 + 9));
              ((void (*)(void, void))a1[3])(*a1, a1[5]);
              *((_DWORD *)a1 + 8) = v111;
              a1[5] = v112;
              unsigned int v113 = *((_DWORD *)a1 + 9);
            }
            uint64_t result = (uint64_t)memmove(&v112[v89 + 1], &v112[v89], v113 - v89);
            *(_WORD *)(a1[5] + v89) = v79;
            int v114 = 2;
            goto LABEL_143;
          case 2u:
            unsigned int v96 = v88 + 4;
            int v97 = *((_DWORD *)a1 + 8);
            if (v96 <= v97)
            {
              int v100 = (char *)a1[5];
              unsigned int v101 = v89;
            }
            else
            {
              if (v97 <= 1) {
                int v97 = 1;
              }
              int v98 = 2 * v97;
              if (v98 <= (int)v96) {
                uint64_t v99 = v96;
              }
              else {
                uint64_t v99 = v98;
              }
              int v100 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v99, "Vector Storage (uint8_t, growth)");
              memcpy(v100, (const void *)a1[5], *((unsigned int *)a1 + 9));
              ((void (*)(void, void))a1[3])(*a1, a1[5]);
              *((_DWORD *)a1 + 8) = v99;
              a1[5] = v100;
              unsigned int v101 = *((_DWORD *)a1 + 9);
            }
            uint64_t result = (uint64_t)memmove(&v100[v89 + 1], &v100[v89], v101 - v89);
            uint64_t v115 = a1[5] + v89;
            *(unsigned char *)(v115 + 2) = BYTE2(v79);
            *(_WORD *)uint64_t v115 = v79;
            int v114 = 3;
            goto LABEL_143;
          case 3u:
            unsigned int v102 = v88 + 5;
            int v103 = *((_DWORD *)a1 + 8);
            if (v102 <= v103)
            {
              int v106 = (char *)a1[5];
              unsigned int v107 = v89;
            }
            else
            {
              if (v103 <= 1) {
                int v103 = 1;
              }
              int v104 = 2 * v103;
              if (v104 <= (int)v102) {
                uint64_t v105 = v102;
              }
              else {
                uint64_t v105 = v104;
              }
              int v106 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v105, "Vector Storage (uint8_t, growth)");
              memcpy(v106, (const void *)a1[5], *((unsigned int *)a1 + 9));
              ((void (*)(void, void))a1[3])(*a1, a1[5]);
              *((_DWORD *)a1 + 8) = v105;
              a1[5] = v106;
              unsigned int v107 = *((_DWORD *)a1 + 9);
            }
            uint64_t result = (uint64_t)memmove(&v106[v89 + 1], &v106[v89], v107 - v89);
            *(_DWORD *)(a1[5] + v89) = v79;
            int v114 = 4;
LABEL_143:
            *((_DWORD *)a1 + 9) += v114;
            break;
          default:
            return result;
        }
      }
    }
  }
  return result;
}

uint64_t serialize_GLPVariableObject(void *a1, unint64_t a2)
{
  uint64_t result = serialize_pointer(a1, a2);
  if (result)
  {
    serialize_GLPType(a1, *(void *)a2);
    serialize_GLPLayoutObject(a1, *(unint64_t **)(a2 + 8));
    unint64_t v5 = *(void *)(a2 + 48);
    unsigned int v6 = (char)glp_serialized_integer64_control(v5);
    int v7 = *((_DWORD *)a1 + 8);
    uint64_t v8 = *((unsigned int *)a1 + 9);
    int v9 = v8 + 1;
    if ((int)v8 + 1 <= v7)
    {
      uint64_t v12 = (char *)a1[5];
      int v13 = *((_DWORD *)a1 + 9);
    }
    else
    {
      if (v7 <= 1) {
        int v7 = 1;
      }
      int v10 = 2 * v7;
      if (v10 <= v9) {
        uint64_t v11 = v9;
      }
      else {
        uint64_t v11 = v10;
      }
      uint64_t v12 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v11, "Vector Storage (uint8_t, growth)");
      memcpy(v12, (const void *)a1[5], *((unsigned int *)a1 + 9));
      ((void (*)(void, void))a1[3])(*a1, a1[5]);
      *((_DWORD *)a1 + 8) = v11;
      a1[5] = v12;
      int v13 = *((_DWORD *)a1 + 9);
    }
    memmove(&v12[v8 + 1], &v12[v8], (v13 - v8));
    *(unsigned char *)(a1[5] + v8) = v6;
    int v14 = *((_DWORD *)a1 + 9);
    unsigned int v15 = v14 + 1;
    *((_DWORD *)a1 + 9) = v14 + 1;
    if ((v6 & 0x80000000) != 0)
    {
      switch((v6 >> 1) & 7)
      {
        case 1u:
          unsigned int v22 = v14 + 3;
          int v23 = *((_DWORD *)a1 + 8);
          if (v22 <= v23)
          {
            uint64_t v26 = (char *)a1[5];
            unsigned int v27 = v15;
          }
          else
          {
            if (v23 <= 1) {
              int v23 = 1;
            }
            int v24 = 2 * v23;
            if (v24 <= (int)v22) {
              uint64_t v25 = v22;
            }
            else {
              uint64_t v25 = v24;
            }
            uint64_t v26 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v25, "Vector Storage (uint8_t, growth)");
            memcpy(v26, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v25;
            a1[5] = v26;
            unsigned int v27 = *((_DWORD *)a1 + 9);
          }
          goto LABEL_105;
        case 2u:
          unsigned int v28 = v14 + 4;
          int v29 = *((_DWORD *)a1 + 8);
          if (v28 <= v29)
          {
            uint64_t v32 = (char *)a1[5];
            unsigned int v33 = v15;
          }
          else
          {
            if (v29 <= 1) {
              int v29 = 1;
            }
            int v30 = 2 * v29;
            if (v30 <= (int)v28) {
              uint64_t v31 = v28;
            }
            else {
              uint64_t v31 = v30;
            }
            uint64_t v32 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v31, "Vector Storage (uint8_t, growth)");
            memcpy(v32, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v31;
            a1[5] = v32;
            unsigned int v33 = *((_DWORD *)a1 + 9);
          }
          memmove(&v32[v15 + 1], &v32[v15], v33 - v15);
          uint64_t v64 = a1[5] + v15;
          *(unsigned char *)(v64 + 2) = BYTE2(v5);
          *(_WORD *)uint64_t v64 = v5;
          goto LABEL_108;
        case 3u:
          unsigned int v34 = v14 + 5;
          int v35 = *((_DWORD *)a1 + 8);
          if (v34 <= v35)
          {
            uint64_t v38 = (char *)a1[5];
            unsigned int v39 = v15;
          }
          else
          {
            if (v35 <= 1) {
              int v35 = 1;
            }
            int v36 = 2 * v35;
            if (v36 <= (int)v34) {
              uint64_t v37 = v34;
            }
            else {
              uint64_t v37 = v36;
            }
            uint64_t v38 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v37, "Vector Storage (uint8_t, growth)");
            memcpy(v38, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v37;
            a1[5] = v38;
            unsigned int v39 = *((_DWORD *)a1 + 9);
          }
          memmove(&v38[v15 + 1], &v38[v15], v39 - v15);
          *(_DWORD *)(a1[5] + v15) = v5;
          int v65 = 4;
          break;
        case 4u:
          unsigned int v40 = v14 + 5;
          int v41 = *((_DWORD *)a1 + 8);
          if (v40 <= v41)
          {
            int v44 = (char *)a1[5];
            unsigned int v45 = v15;
          }
          else
          {
            if (v41 <= 1) {
              int v41 = 1;
            }
            int v42 = 2 * v41;
            if (v42 <= (int)v40) {
              uint64_t v43 = v40;
            }
            else {
              uint64_t v43 = v42;
            }
            int v44 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v43, "Vector Storage (uint8_t, growth)");
            memcpy(v44, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v43;
            a1[5] = v44;
            unsigned int v45 = *((_DWORD *)a1 + 9);
          }
          memmove(&v44[v15 + 1], &v44[v15], v45 - v15);
          *(_DWORD *)(a1[5] + v15) = v5;
          int v67 = *((_DWORD *)a1 + 8);
          int v66 = *((_DWORD *)a1 + 9);
          unsigned int v15 = v66 + 4;
          *((_DWORD *)a1 + 9) = v66 + 4;
          unsigned int v68 = v66 + 5;
          if (v68 <= v67)
          {
            uint64_t v20 = (char *)a1[5];
            unsigned int v21 = v15;
          }
          else
          {
            if (v67 <= 1) {
              int v67 = 1;
            }
            int v69 = 2 * v67;
            if (v69 <= (int)v68) {
              uint64_t v70 = v68;
            }
            else {
              uint64_t v70 = v69;
            }
            uint64_t v20 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v70, "Vector Storage (uint8_t, growth)");
            memcpy(v20, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v70;
            a1[5] = v20;
            unsigned int v21 = *((_DWORD *)a1 + 9);
          }
          v5 >>= 32;
          goto LABEL_102;
        case 5u:
          unsigned int v46 = v14 + 5;
          int v47 = *((_DWORD *)a1 + 8);
          if (v46 <= v47)
          {
            int v50 = (char *)a1[5];
            unsigned int v51 = v15;
          }
          else
          {
            if (v47 <= 1) {
              int v47 = 1;
            }
            int v48 = 2 * v47;
            if (v48 <= (int)v46) {
              uint64_t v49 = v46;
            }
            else {
              uint64_t v49 = v48;
            }
            int v50 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v49, "Vector Storage (uint8_t, growth)");
            memcpy(v50, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v49;
            a1[5] = v50;
            unsigned int v51 = *((_DWORD *)a1 + 9);
          }
          memmove(&v50[v15 + 1], &v50[v15], v51 - v15);
          *(_DWORD *)(a1[5] + v15) = v5;
          int v72 = *((_DWORD *)a1 + 8);
          int v71 = *((_DWORD *)a1 + 9);
          unsigned int v15 = v71 + 4;
          *((_DWORD *)a1 + 9) = v71 + 4;
          unsigned int v73 = v71 + 6;
          if (v73 <= v72)
          {
            uint64_t v26 = (char *)a1[5];
            unsigned int v27 = v15;
          }
          else
          {
            if (v72 <= 1) {
              int v72 = 1;
            }
            int v74 = 2 * v72;
            if (v74 <= (int)v73) {
              uint64_t v75 = v73;
            }
            else {
              uint64_t v75 = v74;
            }
            uint64_t v26 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v75, "Vector Storage (uint8_t, growth)");
            memcpy(v26, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v75;
            a1[5] = v26;
            unsigned int v27 = *((_DWORD *)a1 + 9);
          }
          v5 >>= 32;
LABEL_105:
          memmove(&v26[v15 + 1], &v26[v15], v27 - v15);
          *(_WORD *)(a1[5] + v15) = v5;
          int v65 = 2;
          break;
        case 6u:
          unsigned int v58 = v14 + 5;
          int v59 = *((_DWORD *)a1 + 8);
          if (v58 <= v59)
          {
            uint64_t v62 = (char *)a1[5];
            unsigned int v63 = v15;
          }
          else
          {
            if (v59 <= 1) {
              int v59 = 1;
            }
            int v60 = 2 * v59;
            if (v60 <= (int)v58) {
              uint64_t v61 = v58;
            }
            else {
              uint64_t v61 = v60;
            }
            uint64_t v62 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v61, "Vector Storage (uint8_t, growth)");
            memcpy(v62, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v61;
            a1[5] = v62;
            unsigned int v63 = *((_DWORD *)a1 + 9);
          }
          memmove(&v62[v15 + 1], &v62[v15], v63 - v15);
          *(_DWORD *)(a1[5] + v15) = v5;
          int v77 = *((_DWORD *)a1 + 8);
          int v76 = *((_DWORD *)a1 + 9);
          unsigned int v78 = v76 + 4;
          *((_DWORD *)a1 + 9) = v76 + 4;
          unsigned int v79 = v76 + 7;
          if (v79 <= v77)
          {
            uint64_t v82 = (char *)a1[5];
            unsigned int v83 = v78;
          }
          else
          {
            if (v77 <= 1) {
              int v77 = 1;
            }
            int v80 = 2 * v77;
            if (v80 <= (int)v79) {
              uint64_t v81 = v79;
            }
            else {
              uint64_t v81 = v80;
            }
            uint64_t v82 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v81, "Vector Storage (uint8_t, growth)");
            memcpy(v82, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v81;
            a1[5] = v82;
            unsigned int v83 = *((_DWORD *)a1 + 9);
          }
          memmove(&v82[v78 + 1], &v82[v78], v83 - v78);
          uint64_t v84 = a1[5] + v78;
          *(unsigned char *)(v84 + 2) = BYTE6(v5);
          *(_WORD *)uint64_t v84 = WORD2(v5);
LABEL_108:
          int v65 = 3;
          break;
        case 7u:
          unsigned int v52 = v14 + 9;
          int v53 = *((_DWORD *)a1 + 8);
          if (v52 <= v53)
          {
            uint64_t v56 = (char *)a1[5];
            unsigned int v57 = v15;
          }
          else
          {
            if (v53 <= 1) {
              int v53 = 1;
            }
            int v54 = 2 * v53;
            if (v54 <= (int)v52) {
              uint64_t v55 = v52;
            }
            else {
              uint64_t v55 = v54;
            }
            uint64_t v56 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v55, "Vector Storage (uint8_t, growth)");
            memcpy(v56, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v55;
            a1[5] = v56;
            unsigned int v57 = *((_DWORD *)a1 + 9);
          }
          memmove(&v56[v15 + 1], &v56[v15], v57 - v15);
          *(void *)(a1[5] + v15) = v5;
          int v65 = 8;
          break;
        default:
          unsigned int v16 = v14 + 2;
          int v17 = *((_DWORD *)a1 + 8);
          if (v16 <= v17)
          {
            uint64_t v20 = (char *)a1[5];
            unsigned int v21 = v15;
          }
          else
          {
            if (v17 <= 1) {
              int v17 = 1;
            }
            int v18 = 2 * v17;
            if (v18 <= (int)v16) {
              uint64_t v19 = v16;
            }
            else {
              uint64_t v19 = v18;
            }
            uint64_t v20 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v19, "Vector Storage (uint8_t, growth)");
            memcpy(v20, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v19;
            a1[5] = v20;
            unsigned int v21 = *((_DWORD *)a1 + 9);
          }
LABEL_102:
          memmove(&v20[v15 + 1], &v20[v15], v21 - v15);
          *(unsigned char *)(a1[5] + v15) = v5;
          int v65 = 1;
          break;
      }
      *((_DWORD *)a1 + 9) += v65;
    }
    serialize_GLPString(a1, *(const char **)(a2 + 16), *(void *)(a2 + 24));
    serialize_GLPString(a1, *(const char **)(a2 + 32), *(void *)(a2 + 40));
    char v85 = *(unsigned char *)(a2 + 56);
    int v86 = *((_DWORD *)a1 + 8);
    uint64_t v87 = *((unsigned int *)a1 + 9);
    int v88 = v87 + 1;
    if ((int)v87 + 1 <= v86)
    {
      int v91 = (char *)a1[5];
      int v92 = *((_DWORD *)a1 + 9);
    }
    else
    {
      if (v86 <= 1) {
        int v86 = 1;
      }
      int v89 = 2 * v86;
      if (v89 <= v88) {
        uint64_t v90 = v88;
      }
      else {
        uint64_t v90 = v89;
      }
      int v91 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v90, "Vector Storage (uint8_t, growth)");
      memcpy(v91, (const void *)a1[5], *((unsigned int *)a1 + 9));
      ((void (*)(void, void))a1[3])(*a1, a1[5]);
      *((_DWORD *)a1 + 8) = v90;
      a1[5] = v91;
      int v92 = *((_DWORD *)a1 + 9);
    }
    memmove(&v91[v87 + 1], &v91[v87], (v92 - v87));
    *(unsigned char *)(a1[5] + v87) = v85;
    ++*((_DWORD *)a1 + 9);
    real_serialize_GLPValue(a1, *(void *)(a2 + 64), *(unsigned int **)a2);
    real_serialize_GLPValue(a1, *(void *)(a2 + 72), *(unsigned int **)a2);
    serialize_GLPInterfaceBlockObject(a1, *(void *)(a2 + 80));
    serialize_GLPBufferObject(a1, *(void *)(a2 + 88));
    unsigned int v93 = *(_DWORD *)(a2 + 96);
    unsigned int v94 = (char)glp_serialized_integer32_control(v93);
    int v95 = *((_DWORD *)a1 + 8);
    uint64_t v96 = *((unsigned int *)a1 + 9);
    int v97 = v96 + 1;
    if ((int)v96 + 1 <= v95)
    {
      int v100 = (char *)a1[5];
      int v101 = *((_DWORD *)a1 + 9);
    }
    else
    {
      if (v95 <= 1) {
        int v95 = 1;
      }
      int v98 = 2 * v95;
      if (v98 <= v97) {
        uint64_t v99 = v97;
      }
      else {
        uint64_t v99 = v98;
      }
      int v100 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v99, "Vector Storage (uint8_t, growth)");
      memcpy(v100, (const void *)a1[5], *((unsigned int *)a1 + 9));
      ((void (*)(void, void))a1[3])(*a1, a1[5]);
      *((_DWORD *)a1 + 8) = v99;
      a1[5] = v100;
      int v101 = *((_DWORD *)a1 + 9);
    }
    memmove(&v100[v96 + 1], &v100[v96], (v101 - v96));
    *(unsigned char *)(a1[5] + v96) = v94;
    int v102 = *((_DWORD *)a1 + 9);
    unsigned int v103 = v102 + 1;
    *((_DWORD *)a1 + 9) = v102 + 1;
    if ((v94 & 0x80000000) != 0)
    {
      switch((v94 >> 1) & 7)
      {
        case 0u:
          unsigned int v104 = v102 + 2;
          int v105 = *((_DWORD *)a1 + 8);
          if (v104 <= v105)
          {
            unsigned int v108 = (char *)a1[5];
            unsigned int v109 = v103;
          }
          else
          {
            if (v105 <= 1) {
              int v105 = 1;
            }
            int v106 = 2 * v105;
            if (v106 <= (int)v104) {
              uint64_t v107 = v104;
            }
            else {
              uint64_t v107 = v106;
            }
            unsigned int v108 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v107, "Vector Storage (uint8_t, growth)");
            memcpy(v108, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v107;
            a1[5] = v108;
            unsigned int v109 = *((_DWORD *)a1 + 9);
          }
          memmove(&v108[v103 + 1], &v108[v103], v109 - v103);
          *(unsigned char *)(a1[5] + v103) = v93;
          int v128 = 1;
          goto LABEL_164;
        case 1u:
          unsigned int v110 = v102 + 3;
          int v111 = *((_DWORD *)a1 + 8);
          if (v110 <= v111)
          {
            int v114 = (char *)a1[5];
            unsigned int v115 = v103;
          }
          else
          {
            if (v111 <= 1) {
              int v111 = 1;
            }
            int v112 = 2 * v111;
            if (v112 <= (int)v110) {
              uint64_t v113 = v110;
            }
            else {
              uint64_t v113 = v112;
            }
            int v114 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v113, "Vector Storage (uint8_t, growth)");
            memcpy(v114, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v113;
            a1[5] = v114;
            unsigned int v115 = *((_DWORD *)a1 + 9);
          }
          memmove(&v114[v103 + 1], &v114[v103], v115 - v103);
          *(_WORD *)(a1[5] + v103) = v93;
          int v128 = 2;
          goto LABEL_164;
        case 2u:
          unsigned int v116 = v102 + 4;
          int v117 = *((_DWORD *)a1 + 8);
          if (v116 <= v117)
          {
            int v120 = (char *)a1[5];
            unsigned int v121 = v103;
          }
          else
          {
            if (v117 <= 1) {
              int v117 = 1;
            }
            int v118 = 2 * v117;
            if (v118 <= (int)v116) {
              uint64_t v119 = v116;
            }
            else {
              uint64_t v119 = v118;
            }
            int v120 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v119, "Vector Storage (uint8_t, growth)");
            memcpy(v120, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v119;
            a1[5] = v120;
            unsigned int v121 = *((_DWORD *)a1 + 9);
          }
          memmove(&v120[v103 + 1], &v120[v103], v121 - v103);
          uint64_t v129 = a1[5] + v103;
          *(unsigned char *)(v129 + 2) = BYTE2(v93);
          *(_WORD *)uint64_t v129 = v93;
          int v128 = 3;
          goto LABEL_164;
        case 3u:
          unsigned int v122 = v102 + 5;
          int v123 = *((_DWORD *)a1 + 8);
          if (v122 <= v123)
          {
            int v126 = (char *)a1[5];
            unsigned int v127 = v103;
          }
          else
          {
            if (v123 <= 1) {
              int v123 = 1;
            }
            int v124 = 2 * v123;
            if (v124 <= (int)v122) {
              uint64_t v125 = v122;
            }
            else {
              uint64_t v125 = v124;
            }
            int v126 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v125, "Vector Storage (uint8_t, growth)");
            memcpy(v126, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v125;
            a1[5] = v126;
            unsigned int v127 = *((_DWORD *)a1 + 9);
          }
          memmove(&v126[v103 + 1], &v126[v103], v127 - v103);
          *(_DWORD *)(a1[5] + v103) = v93;
          int v128 = 4;
LABEL_164:
          *((_DWORD *)a1 + 9) += v128;
          break;
        default:
          break;
      }
    }
    uint64_t v130 = *(unsigned int *)(a2 + 100);
    unsigned int v131 = (char)glp_serialized_integer32_control(v130);
    int v132 = *((_DWORD *)a1 + 8);
    uint64_t v133 = *((unsigned int *)a1 + 9);
    int v134 = v133 + 1;
    if ((int)v133 + 1 <= v132)
    {
      unsigned int v137 = (char *)a1[5];
      int v138 = *((_DWORD *)a1 + 9);
    }
    else
    {
      if (v132 <= 1) {
        int v132 = 1;
      }
      int v135 = 2 * v132;
      if (v135 <= v134) {
        uint64_t v136 = v134;
      }
      else {
        uint64_t v136 = v135;
      }
      unsigned int v137 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v136, "Vector Storage (uint8_t, growth)");
      memcpy(v137, (const void *)a1[5], *((unsigned int *)a1 + 9));
      ((void (*)(void, void))a1[3])(*a1, a1[5]);
      *((_DWORD *)a1 + 8) = v136;
      a1[5] = v137;
      int v138 = *((_DWORD *)a1 + 9);
    }
    uint64_t result = (uint64_t)memmove(&v137[v133 + 1], &v137[v133], (v138 - v133));
    *(unsigned char *)(a1[5] + v133) = v131;
    int v139 = *((_DWORD *)a1 + 9);
    unsigned int v140 = v139 + 1;
    *((_DWORD *)a1 + 9) = v139 + 1;
    if ((v131 & 0x80000000) != 0)
    {
      switch((v131 >> 1) & 7)
      {
        case 0u:
          unsigned int v141 = v139 + 2;
          int v142 = *((_DWORD *)a1 + 8);
          if (v141 <= v142)
          {
            unsigned int v145 = (char *)a1[5];
            unsigned int v146 = v140;
          }
          else
          {
            if (v142 <= 1) {
              int v142 = 1;
            }
            int v143 = 2 * v142;
            if (v143 <= (int)v141) {
              uint64_t v144 = v141;
            }
            else {
              uint64_t v144 = v143;
            }
            unsigned int v145 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v144, "Vector Storage (uint8_t, growth)");
            memcpy(v145, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v144;
            a1[5] = v145;
            unsigned int v146 = *((_DWORD *)a1 + 9);
          }
          uint64_t result = (uint64_t)memmove(&v145[v140 + 1], &v145[v140], v146 - v140);
          *(unsigned char *)(a1[5] + v140) = v130;
          int v165 = 1;
          goto LABEL_211;
        case 1u:
          unsigned int v147 = v139 + 3;
          int v148 = *((_DWORD *)a1 + 8);
          if (v147 <= v148)
          {
            unsigned int v151 = (char *)a1[5];
            unsigned int v152 = v140;
          }
          else
          {
            if (v148 <= 1) {
              int v148 = 1;
            }
            int v149 = 2 * v148;
            if (v149 <= (int)v147) {
              uint64_t v150 = v147;
            }
            else {
              uint64_t v150 = v149;
            }
            unsigned int v151 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v150, "Vector Storage (uint8_t, growth)");
            memcpy(v151, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v150;
            a1[5] = v151;
            unsigned int v152 = *((_DWORD *)a1 + 9);
          }
          uint64_t result = (uint64_t)memmove(&v151[v140 + 1], &v151[v140], v152 - v140);
          *(_WORD *)(a1[5] + v140) = v130;
          int v165 = 2;
          goto LABEL_211;
        case 2u:
          unsigned int v153 = v139 + 4;
          int v154 = *((_DWORD *)a1 + 8);
          if (v153 <= v154)
          {
            uint64_t v157 = (char *)a1[5];
            unsigned int v158 = v140;
          }
          else
          {
            if (v154 <= 1) {
              int v154 = 1;
            }
            int v155 = 2 * v154;
            if (v155 <= (int)v153) {
              uint64_t v156 = v153;
            }
            else {
              uint64_t v156 = v155;
            }
            uint64_t v157 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v156, "Vector Storage (uint8_t, growth)");
            memcpy(v157, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v156;
            a1[5] = v157;
            unsigned int v158 = *((_DWORD *)a1 + 9);
          }
          uint64_t result = (uint64_t)memmove(&v157[v140 + 1], &v157[v140], v158 - v140);
          uint64_t v166 = a1[5] + v140;
          *(unsigned char *)(v166 + 2) = BYTE2(v130);
          *(_WORD *)uint64_t v166 = v130;
          int v165 = 3;
          goto LABEL_211;
        case 3u:
          unsigned int v159 = v139 + 5;
          int v160 = *((_DWORD *)a1 + 8);
          if (v159 <= v160)
          {
            int v163 = (char *)a1[5];
            unsigned int v164 = v140;
          }
          else
          {
            if (v160 <= 1) {
              int v160 = 1;
            }
            int v161 = 2 * v160;
            if (v161 <= (int)v159) {
              uint64_t v162 = v159;
            }
            else {
              uint64_t v162 = v161;
            }
            int v163 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v162, "Vector Storage (uint8_t, growth)");
            memcpy(v163, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v162;
            a1[5] = v163;
            unsigned int v164 = *((_DWORD *)a1 + 9);
          }
          uint64_t result = (uint64_t)memmove(&v163[v140 + 1], &v163[v140], v164 - v140);
          *(_DWORD *)(a1[5] + v140) = v130;
          int v165 = 4;
LABEL_211:
          *((_DWORD *)a1 + 9) += v165;
          break;
        default:
          return result;
      }
    }
  }
  return result;
}

uint64_t serialize_GLPInterfaceBlockObject(void *a1, unint64_t a2)
{
  uint64_t result = serialize_pointer(a1, a2);
  if (result)
  {
    unsigned int VariableObjectCount = glpInterfaceBlockObjectGetVariableObjectCount(a2);
    serialize_GLPString(a1, *(const char **)a2, *(void *)(a2 + 8));
    char v6 = *(unsigned char *)(a2 + 32);
    int v7 = *((_DWORD *)a1 + 8);
    uint64_t v8 = *((unsigned int *)a1 + 9);
    int v9 = v8 + 1;
    if ((int)v8 + 1 <= v7)
    {
      uint64_t v12 = (char *)a1[5];
      int v13 = *((_DWORD *)a1 + 9);
    }
    else
    {
      if (v7 <= 1) {
        int v7 = 1;
      }
      int v10 = 2 * v7;
      if (v10 <= v9) {
        uint64_t v11 = v9;
      }
      else {
        uint64_t v11 = v10;
      }
      uint64_t v12 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v11, "Vector Storage (uint8_t, growth)");
      memcpy(v12, (const void *)a1[5], *((unsigned int *)a1 + 9));
      ((void (*)(void, void))a1[3])(*a1, a1[5]);
      *((_DWORD *)a1 + 8) = v11;
      a1[5] = v12;
      int v13 = *((_DWORD *)a1 + 9);
    }
    memmove(&v12[v8 + 1], &v12[v8], (v13 - v8));
    *(unsigned char *)(a1[5] + v8) = v6;
    ++*((_DWORD *)a1 + 9);
    if (*(unsigned char *)(a2 + 32)) {
      serialize_GLPString(a1, *(const char **)(a2 + 16), *(void *)(a2 + 24));
    }
    unint64_t v14 = *(void *)(a2 + 40);
    unsigned int v15 = (char)glp_serialized_integer64_control(v14);
    int v16 = *((_DWORD *)a1 + 8);
    uint64_t v17 = *((unsigned int *)a1 + 9);
    int v18 = v17 + 1;
    if ((int)v17 + 1 <= v16)
    {
      unsigned int v21 = (char *)a1[5];
      int v22 = *((_DWORD *)a1 + 9);
    }
    else
    {
      if (v16 <= 1) {
        int v16 = 1;
      }
      int v19 = 2 * v16;
      if (v19 <= v18) {
        uint64_t v20 = v18;
      }
      else {
        uint64_t v20 = v19;
      }
      unsigned int v21 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v20, "Vector Storage (uint8_t, growth)");
      memcpy(v21, (const void *)a1[5], *((unsigned int *)a1 + 9));
      ((void (*)(void, void))a1[3])(*a1, a1[5]);
      *((_DWORD *)a1 + 8) = v20;
      a1[5] = v21;
      int v22 = *((_DWORD *)a1 + 9);
    }
    memmove(&v21[v17 + 1], &v21[v17], (v22 - v17));
    *(unsigned char *)(a1[5] + v17) = v15;
    int v23 = *((_DWORD *)a1 + 9);
    unsigned int v24 = v23 + 1;
    *((_DWORD *)a1 + 9) = v23 + 1;
    if ((v15 & 0x80000000) != 0)
    {
      switch((v15 >> 1) & 7)
      {
        case 1u:
          unsigned int v31 = v23 + 3;
          int v32 = *((_DWORD *)a1 + 8);
          if (v31 <= v32)
          {
            int v35 = (char *)a1[5];
            unsigned int v36 = v24;
          }
          else
          {
            if (v32 <= 1) {
              int v32 = 1;
            }
            int v33 = 2 * v32;
            if (v33 <= (int)v31) {
              uint64_t v34 = v31;
            }
            else {
              uint64_t v34 = v33;
            }
            int v35 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v34, "Vector Storage (uint8_t, growth)");
            memcpy(v35, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v34;
            a1[5] = v35;
            unsigned int v36 = *((_DWORD *)a1 + 9);
          }
          goto LABEL_116;
        case 2u:
          unsigned int v37 = v23 + 4;
          int v38 = *((_DWORD *)a1 + 8);
          if (v37 <= v38)
          {
            int v41 = (char *)a1[5];
            unsigned int v42 = v24;
          }
          else
          {
            if (v38 <= 1) {
              int v38 = 1;
            }
            int v39 = 2 * v38;
            if (v39 <= (int)v37) {
              uint64_t v40 = v37;
            }
            else {
              uint64_t v40 = v39;
            }
            int v41 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v40, "Vector Storage (uint8_t, growth)");
            memcpy(v41, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v40;
            a1[5] = v41;
            unsigned int v42 = *((_DWORD *)a1 + 9);
          }
          memmove(&v41[v24 + 1], &v41[v24], v42 - v24);
          uint64_t v73 = a1[5] + v24;
          *(unsigned char *)(v73 + 2) = BYTE2(v14);
          *(_WORD *)uint64_t v73 = v14;
          goto LABEL_119;
        case 3u:
          unsigned int v43 = v23 + 5;
          int v44 = *((_DWORD *)a1 + 8);
          if (v43 <= v44)
          {
            int v47 = (char *)a1[5];
            unsigned int v48 = v24;
          }
          else
          {
            if (v44 <= 1) {
              int v44 = 1;
            }
            int v45 = 2 * v44;
            if (v45 <= (int)v43) {
              uint64_t v46 = v43;
            }
            else {
              uint64_t v46 = v45;
            }
            int v47 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v46, "Vector Storage (uint8_t, growth)");
            memcpy(v47, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v46;
            a1[5] = v47;
            unsigned int v48 = *((_DWORD *)a1 + 9);
          }
          memmove(&v47[v24 + 1], &v47[v24], v48 - v24);
          *(_DWORD *)(a1[5] + v24) = v14;
          int v74 = 4;
          break;
        case 4u:
          unsigned int v49 = v23 + 5;
          int v50 = *((_DWORD *)a1 + 8);
          if (v49 <= v50)
          {
            int v53 = (char *)a1[5];
            unsigned int v54 = v24;
          }
          else
          {
            if (v50 <= 1) {
              int v50 = 1;
            }
            int v51 = 2 * v50;
            if (v51 <= (int)v49) {
              uint64_t v52 = v49;
            }
            else {
              uint64_t v52 = v51;
            }
            int v53 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v52, "Vector Storage (uint8_t, growth)");
            memcpy(v53, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v52;
            a1[5] = v53;
            unsigned int v54 = *((_DWORD *)a1 + 9);
          }
          memmove(&v53[v24 + 1], &v53[v24], v54 - v24);
          *(_DWORD *)(a1[5] + v24) = v14;
          int v76 = *((_DWORD *)a1 + 8);
          int v75 = *((_DWORD *)a1 + 9);
          unsigned int v24 = v75 + 4;
          *((_DWORD *)a1 + 9) = v75 + 4;
          unsigned int v77 = v75 + 5;
          if (v77 <= v76)
          {
            int v29 = (char *)a1[5];
            unsigned int v30 = v24;
          }
          else
          {
            if (v76 <= 1) {
              int v76 = 1;
            }
            int v78 = 2 * v76;
            if (v78 <= (int)v77) {
              uint64_t v79 = v77;
            }
            else {
              uint64_t v79 = v78;
            }
            int v29 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v79, "Vector Storage (uint8_t, growth)");
            memcpy(v29, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v79;
            a1[5] = v29;
            unsigned int v30 = *((_DWORD *)a1 + 9);
          }
          v14 >>= 32;
          goto LABEL_113;
        case 5u:
          unsigned int v55 = v23 + 5;
          int v56 = *((_DWORD *)a1 + 8);
          if (v55 <= v56)
          {
            int v59 = (char *)a1[5];
            unsigned int v60 = v24;
          }
          else
          {
            if (v56 <= 1) {
              int v56 = 1;
            }
            int v57 = 2 * v56;
            if (v57 <= (int)v55) {
              uint64_t v58 = v55;
            }
            else {
              uint64_t v58 = v57;
            }
            int v59 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v58, "Vector Storage (uint8_t, growth)");
            memcpy(v59, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v58;
            a1[5] = v59;
            unsigned int v60 = *((_DWORD *)a1 + 9);
          }
          memmove(&v59[v24 + 1], &v59[v24], v60 - v24);
          *(_DWORD *)(a1[5] + v24) = v14;
          int v81 = *((_DWORD *)a1 + 8);
          int v80 = *((_DWORD *)a1 + 9);
          unsigned int v24 = v80 + 4;
          *((_DWORD *)a1 + 9) = v80 + 4;
          unsigned int v82 = v80 + 6;
          if (v82 <= v81)
          {
            int v35 = (char *)a1[5];
            unsigned int v36 = v24;
          }
          else
          {
            if (v81 <= 1) {
              int v81 = 1;
            }
            int v83 = 2 * v81;
            if (v83 <= (int)v82) {
              uint64_t v84 = v82;
            }
            else {
              uint64_t v84 = v83;
            }
            int v35 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v84, "Vector Storage (uint8_t, growth)");
            memcpy(v35, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v84;
            a1[5] = v35;
            unsigned int v36 = *((_DWORD *)a1 + 9);
          }
          v14 >>= 32;
LABEL_116:
          memmove(&v35[v24 + 1], &v35[v24], v36 - v24);
          *(_WORD *)(a1[5] + v24) = v14;
          int v74 = 2;
          break;
        case 6u:
          unsigned int v67 = v23 + 5;
          int v68 = *((_DWORD *)a1 + 8);
          if (v67 <= v68)
          {
            int v71 = (char *)a1[5];
            unsigned int v72 = v24;
          }
          else
          {
            if (v68 <= 1) {
              int v68 = 1;
            }
            int v69 = 2 * v68;
            if (v69 <= (int)v67) {
              uint64_t v70 = v67;
            }
            else {
              uint64_t v70 = v69;
            }
            int v71 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v70, "Vector Storage (uint8_t, growth)");
            memcpy(v71, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v70;
            a1[5] = v71;
            unsigned int v72 = *((_DWORD *)a1 + 9);
          }
          memmove(&v71[v24 + 1], &v71[v24], v72 - v24);
          *(_DWORD *)(a1[5] + v24) = v14;
          int v86 = *((_DWORD *)a1 + 8);
          int v85 = *((_DWORD *)a1 + 9);
          unsigned int v87 = v85 + 4;
          *((_DWORD *)a1 + 9) = v85 + 4;
          unsigned int v88 = v85 + 7;
          if (v88 <= v86)
          {
            int v91 = (char *)a1[5];
            unsigned int v92 = v87;
          }
          else
          {
            if (v86 <= 1) {
              int v86 = 1;
            }
            int v89 = 2 * v86;
            if (v89 <= (int)v88) {
              uint64_t v90 = v88;
            }
            else {
              uint64_t v90 = v89;
            }
            int v91 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v90, "Vector Storage (uint8_t, growth)");
            memcpy(v91, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v90;
            a1[5] = v91;
            unsigned int v92 = *((_DWORD *)a1 + 9);
          }
          memmove(&v91[v87 + 1], &v91[v87], v92 - v87);
          uint64_t v93 = a1[5] + v87;
          *(unsigned char *)(v93 + 2) = BYTE6(v14);
          *(_WORD *)uint64_t v93 = WORD2(v14);
LABEL_119:
          int v74 = 3;
          break;
        case 7u:
          unsigned int v61 = v23 + 9;
          int v62 = *((_DWORD *)a1 + 8);
          if (v61 <= v62)
          {
            int v65 = (char *)a1[5];
            unsigned int v66 = v24;
          }
          else
          {
            if (v62 <= 1) {
              int v62 = 1;
            }
            int v63 = 2 * v62;
            if (v63 <= (int)v61) {
              uint64_t v64 = v61;
            }
            else {
              uint64_t v64 = v63;
            }
            int v65 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v64, "Vector Storage (uint8_t, growth)");
            memcpy(v65, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v64;
            a1[5] = v65;
            unsigned int v66 = *((_DWORD *)a1 + 9);
          }
          memmove(&v65[v24 + 1], &v65[v24], v66 - v24);
          *(void *)(a1[5] + v24) = v14;
          int v74 = 8;
          break;
        default:
          unsigned int v25 = v23 + 2;
          int v26 = *((_DWORD *)a1 + 8);
          if (v25 <= v26)
          {
            int v29 = (char *)a1[5];
            unsigned int v30 = v24;
          }
          else
          {
            if (v26 <= 1) {
              int v26 = 1;
            }
            int v27 = 2 * v26;
            if (v27 <= (int)v25) {
              uint64_t v28 = v25;
            }
            else {
              uint64_t v28 = v27;
            }
            int v29 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v28, "Vector Storage (uint8_t, growth)");
            memcpy(v29, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v28;
            a1[5] = v29;
            unsigned int v30 = *((_DWORD *)a1 + 9);
          }
LABEL_113:
          memmove(&v29[v24 + 1], &v29[v24], v30 - v24);
          *(unsigned char *)(a1[5] + v24) = v14;
          int v74 = 1;
          break;
      }
      *((_DWORD *)a1 + 9) += v74;
    }
    serialize_GLPLayoutObject(a1, *(unint64_t **)(a2 + 56));
    serialize_GLPType(a1, *(void *)(a2 + 64));
    if (VariableObjectCount)
    {
      uint64_t v94 = 0;
      uint64_t v95 = 8 * VariableObjectCount;
      do
      {
        serialize_GLPVariableObject(a1, *(void *)(*(void *)(a2 + 72) + v94));
        v94 += 8;
      }
      while (v95 != v94);
    }
    unint64_t v96 = *(void *)(a2 + 80);
    return serialize_GLPBufferObject(a1, v96);
  }
  return result;
}

uint64_t serialize_GLPBufferObject(void *a1, unint64_t a2)
{
  uint64_t result = serialize_pointer(a1, a2);
  if (result)
  {
    serialize_GLPType(a1, *(void *)a2);
    unsigned int v5 = *(_DWORD *)(a2 + 8);
    unsigned int v6 = (char)glp_serialized_integer32_control(v5);
    int v7 = *((_DWORD *)a1 + 8);
    uint64_t v8 = *((unsigned int *)a1 + 9);
    int v9 = v8 + 1;
    if ((int)v8 + 1 <= v7)
    {
      uint64_t v12 = (char *)a1[5];
      int v13 = *((_DWORD *)a1 + 9);
    }
    else
    {
      if (v7 <= 1) {
        int v7 = 1;
      }
      int v10 = 2 * v7;
      if (v10 <= v9) {
        uint64_t v11 = v9;
      }
      else {
        uint64_t v11 = v10;
      }
      uint64_t v12 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v11, "Vector Storage (uint8_t, growth)");
      memcpy(v12, (const void *)a1[5], *((unsigned int *)a1 + 9));
      ((void (*)(void, void))a1[3])(*a1, a1[5]);
      *((_DWORD *)a1 + 8) = v11;
      a1[5] = v12;
      int v13 = *((_DWORD *)a1 + 9);
    }
    memmove(&v12[v8 + 1], &v12[v8], (v13 - v8));
    *(unsigned char *)(a1[5] + v8) = v6;
    int v14 = *((_DWORD *)a1 + 9);
    unsigned int v15 = v14 + 1;
    *((_DWORD *)a1 + 9) = v14 + 1;
    if ((v6 & 0x80000000) != 0)
    {
      switch((v6 >> 1) & 7)
      {
        case 0u:
          unsigned int v16 = v14 + 2;
          int v17 = *((_DWORD *)a1 + 8);
          if (v16 <= v17)
          {
            uint64_t v20 = (char *)a1[5];
            unsigned int v21 = v15;
          }
          else
          {
            if (v17 <= 1) {
              int v17 = 1;
            }
            int v18 = 2 * v17;
            if (v18 <= (int)v16) {
              uint64_t v19 = v16;
            }
            else {
              uint64_t v19 = v18;
            }
            uint64_t v20 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v19, "Vector Storage (uint8_t, growth)");
            memcpy(v20, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v19;
            a1[5] = v20;
            unsigned int v21 = *((_DWORD *)a1 + 9);
          }
          memmove(&v20[v15 + 1], &v20[v15], v21 - v15);
          *(unsigned char *)(a1[5] + v15) = v5;
          int v40 = 1;
          goto LABEL_48;
        case 1u:
          unsigned int v34 = v14 + 3;
          int v35 = *((_DWORD *)a1 + 8);
          if (v34 <= v35)
          {
            int v38 = (char *)a1[5];
            unsigned int v39 = v15;
          }
          else
          {
            if (v35 <= 1) {
              int v35 = 1;
            }
            int v36 = 2 * v35;
            if (v36 <= (int)v34) {
              uint64_t v37 = v34;
            }
            else {
              uint64_t v37 = v36;
            }
            int v38 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v37, "Vector Storage (uint8_t, growth)");
            memcpy(v38, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v37;
            a1[5] = v38;
            unsigned int v39 = *((_DWORD *)a1 + 9);
          }
          memmove(&v38[v15 + 1], &v38[v15], v39 - v15);
          *(_WORD *)(a1[5] + v15) = v5;
          int v40 = 2;
          goto LABEL_48;
        case 2u:
          unsigned int v22 = v14 + 4;
          int v23 = *((_DWORD *)a1 + 8);
          if (v22 <= v23)
          {
            int v26 = (char *)a1[5];
            unsigned int v27 = v15;
          }
          else
          {
            if (v23 <= 1) {
              int v23 = 1;
            }
            int v24 = 2 * v23;
            if (v24 <= (int)v22) {
              uint64_t v25 = v22;
            }
            else {
              uint64_t v25 = v24;
            }
            int v26 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v25, "Vector Storage (uint8_t, growth)");
            memcpy(v26, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v25;
            a1[5] = v26;
            unsigned int v27 = *((_DWORD *)a1 + 9);
          }
          memmove(&v26[v15 + 1], &v26[v15], v27 - v15);
          uint64_t v41 = a1[5] + v15;
          *(unsigned char *)(v41 + 2) = BYTE2(v5);
          *(_WORD *)uint64_t v41 = v5;
          int v40 = 3;
          goto LABEL_48;
        case 3u:
          unsigned int v28 = v14 + 5;
          int v29 = *((_DWORD *)a1 + 8);
          if (v28 <= v29)
          {
            int v32 = (char *)a1[5];
            unsigned int v33 = v15;
          }
          else
          {
            if (v29 <= 1) {
              int v29 = 1;
            }
            int v30 = 2 * v29;
            if (v30 <= (int)v28) {
              uint64_t v31 = v28;
            }
            else {
              uint64_t v31 = v30;
            }
            int v32 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v31, "Vector Storage (uint8_t, growth)");
            memcpy(v32, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v31;
            a1[5] = v32;
            unsigned int v33 = *((_DWORD *)a1 + 9);
          }
          memmove(&v32[v15 + 1], &v32[v15], v33 - v15);
          *(_DWORD *)(a1[5] + v15) = v5;
          int v40 = 4;
LABEL_48:
          *((_DWORD *)a1 + 9) += v40;
          break;
        default:
          break;
      }
    }
    uint64_t v42 = *(unsigned int *)(a2 + 12);
    unsigned int v43 = (char)glp_serialized_integer32_control(v42);
    int v44 = *((_DWORD *)a1 + 8);
    uint64_t v45 = *((unsigned int *)a1 + 9);
    int v46 = v45 + 1;
    if ((int)v45 + 1 <= v44)
    {
      unsigned int v49 = (char *)a1[5];
      int v50 = *((_DWORD *)a1 + 9);
    }
    else
    {
      if (v44 <= 1) {
        int v44 = 1;
      }
      int v47 = 2 * v44;
      if (v47 <= v46) {
        uint64_t v48 = v46;
      }
      else {
        uint64_t v48 = v47;
      }
      unsigned int v49 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v48, "Vector Storage (uint8_t, growth)");
      memcpy(v49, (const void *)a1[5], *((unsigned int *)a1 + 9));
      ((void (*)(void, void))a1[3])(*a1, a1[5]);
      *((_DWORD *)a1 + 8) = v48;
      a1[5] = v49;
      int v50 = *((_DWORD *)a1 + 9);
    }
    uint64_t result = (uint64_t)memmove(&v49[v45 + 1], &v49[v45], (v50 - v45));
    *(unsigned char *)(a1[5] + v45) = v43;
    int v51 = *((_DWORD *)a1 + 9);
    unsigned int v52 = v51 + 1;
    *((_DWORD *)a1 + 9) = v51 + 1;
    if ((v43 & 0x80000000) != 0)
    {
      switch((v43 >> 1) & 7)
      {
        case 0u:
          unsigned int v53 = v51 + 2;
          int v54 = *((_DWORD *)a1 + 8);
          if (v53 <= v54)
          {
            int v57 = (char *)a1[5];
            unsigned int v58 = v52;
          }
          else
          {
            if (v54 <= 1) {
              int v54 = 1;
            }
            int v55 = 2 * v54;
            if (v55 <= (int)v53) {
              uint64_t v56 = v53;
            }
            else {
              uint64_t v56 = v55;
            }
            int v57 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v56, "Vector Storage (uint8_t, growth)");
            memcpy(v57, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v56;
            a1[5] = v57;
            unsigned int v58 = *((_DWORD *)a1 + 9);
          }
          uint64_t result = (uint64_t)memmove(&v57[v52 + 1], &v57[v52], v58 - v52);
          *(unsigned char *)(a1[5] + v52) = v42;
          int v77 = 1;
          goto LABEL_95;
        case 1u:
          unsigned int v71 = v51 + 3;
          int v72 = *((_DWORD *)a1 + 8);
          if (v71 <= v72)
          {
            int v75 = (char *)a1[5];
            unsigned int v76 = v52;
          }
          else
          {
            if (v72 <= 1) {
              int v72 = 1;
            }
            int v73 = 2 * v72;
            if (v73 <= (int)v71) {
              uint64_t v74 = v71;
            }
            else {
              uint64_t v74 = v73;
            }
            int v75 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v74, "Vector Storage (uint8_t, growth)");
            memcpy(v75, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v74;
            a1[5] = v75;
            unsigned int v76 = *((_DWORD *)a1 + 9);
          }
          uint64_t result = (uint64_t)memmove(&v75[v52 + 1], &v75[v52], v76 - v52);
          *(_WORD *)(a1[5] + v52) = v42;
          int v77 = 2;
          goto LABEL_95;
        case 2u:
          unsigned int v59 = v51 + 4;
          int v60 = *((_DWORD *)a1 + 8);
          if (v59 <= v60)
          {
            int v63 = (char *)a1[5];
            unsigned int v64 = v52;
          }
          else
          {
            if (v60 <= 1) {
              int v60 = 1;
            }
            int v61 = 2 * v60;
            if (v61 <= (int)v59) {
              uint64_t v62 = v59;
            }
            else {
              uint64_t v62 = v61;
            }
            int v63 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v62, "Vector Storage (uint8_t, growth)");
            memcpy(v63, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v62;
            a1[5] = v63;
            unsigned int v64 = *((_DWORD *)a1 + 9);
          }
          uint64_t result = (uint64_t)memmove(&v63[v52 + 1], &v63[v52], v64 - v52);
          uint64_t v78 = a1[5] + v52;
          *(unsigned char *)(v78 + 2) = BYTE2(v42);
          *(_WORD *)uint64_t v78 = v42;
          int v77 = 3;
          goto LABEL_95;
        case 3u:
          unsigned int v65 = v51 + 5;
          int v66 = *((_DWORD *)a1 + 8);
          if (v65 <= v66)
          {
            int v69 = (char *)a1[5];
            unsigned int v70 = v52;
          }
          else
          {
            if (v66 <= 1) {
              int v66 = 1;
            }
            int v67 = 2 * v66;
            if (v67 <= (int)v65) {
              uint64_t v68 = v65;
            }
            else {
              uint64_t v68 = v67;
            }
            int v69 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v68, "Vector Storage (uint8_t, growth)");
            memcpy(v69, (const void *)a1[5], *((unsigned int *)a1 + 9));
            ((void (*)(void, void))a1[3])(*a1, a1[5]);
            *((_DWORD *)a1 + 8) = v68;
            a1[5] = v69;
            unsigned int v70 = *((_DWORD *)a1 + 9);
          }
          uint64_t result = (uint64_t)memmove(&v69[v52 + 1], &v69[v52], v70 - v52);
          *(_DWORD *)(a1[5] + v52) = v42;
          int v77 = 4;
LABEL_95:
          *((_DWORD *)a1 + 9) += v77;
          break;
        default:
          return result;
      }
    }
  }
  return result;
}

void *serializeTypeConversionFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  uint64_t v4 = glpTypeConversionNodeGetToType(a2);
  serialize_GLPType(a1, v4);
  unint64_t v5 = glpTypeConversionNodeGetToPrecision(a2);
  unsigned int v6 = (char)glp_serialized_integer64_control(v5);
  int v7 = *((_DWORD *)a1 + 8);
  uint64_t v8 = *((unsigned int *)a1 + 9);
  int v9 = v8 + 1;
  if ((int)v8 + 1 <= v7)
  {
    uint64_t v12 = (char *)a1[5];
    int v13 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v7 <= 1) {
      int v7 = 1;
    }
    int v10 = 2 * v7;
    if (v10 <= v9) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = v10;
    }
    uint64_t v12 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v11, "Vector Storage (uint8_t, growth)");
    memcpy(v12, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v11;
    a1[5] = v12;
    int v13 = *((_DWORD *)a1 + 9);
  }
  uint64_t result = memmove(&v12[v8 + 1], &v12[v8], (v13 - v8));
  *(unsigned char *)(a1[5] + v8) = v6;
  int v15 = *((_DWORD *)a1 + 9);
  unsigned int v16 = v15 + 1;
  *((_DWORD *)a1 + 9) = v15 + 1;
  if ((v6 & 0x80000000) != 0)
  {
    switch((v6 >> 1) & 7)
    {
      case 1u:
        unsigned int v23 = v15 + 3;
        int v24 = *((_DWORD *)a1 + 8);
        if (v23 <= v24)
        {
          unsigned int v27 = (char *)a1[5];
          unsigned int v28 = v16;
        }
        else
        {
          if (v24 <= 1) {
            int v24 = 1;
          }
          int v25 = 2 * v24;
          if (v25 <= (int)v23) {
            uint64_t v26 = v23;
          }
          else {
            uint64_t v26 = v25;
          }
          unsigned int v27 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v26, "Vector Storage (uint8_t, growth)");
          memcpy(v27, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v26;
          a1[5] = v27;
          unsigned int v28 = *((_DWORD *)a1 + 9);
        }
        goto LABEL_104;
      case 2u:
        unsigned int v29 = v15 + 4;
        int v30 = *((_DWORD *)a1 + 8);
        if (v29 <= v30)
        {
          unsigned int v33 = (char *)a1[5];
          unsigned int v34 = v16;
        }
        else
        {
          if (v30 <= 1) {
            int v30 = 1;
          }
          int v31 = 2 * v30;
          if (v31 <= (int)v29) {
            uint64_t v32 = v29;
          }
          else {
            uint64_t v32 = v31;
          }
          unsigned int v33 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v32, "Vector Storage (uint8_t, growth)");
          memcpy(v33, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v32;
          a1[5] = v33;
          unsigned int v34 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v33[v16 + 1], &v33[v16], v34 - v16);
        uint64_t v65 = a1[5] + v16;
        *(unsigned char *)(v65 + 2) = BYTE2(v5);
        *(_WORD *)uint64_t v65 = v5;
        goto LABEL_107;
      case 3u:
        unsigned int v35 = v15 + 5;
        int v36 = *((_DWORD *)a1 + 8);
        if (v35 <= v36)
        {
          unsigned int v39 = (char *)a1[5];
          unsigned int v40 = v16;
        }
        else
        {
          if (v36 <= 1) {
            int v36 = 1;
          }
          int v37 = 2 * v36;
          if (v37 <= (int)v35) {
            uint64_t v38 = v35;
          }
          else {
            uint64_t v38 = v37;
          }
          unsigned int v39 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v38, "Vector Storage (uint8_t, growth)");
          memcpy(v39, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v38;
          a1[5] = v39;
          unsigned int v40 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v39[v16 + 1], &v39[v16], v40 - v16);
        *(_DWORD *)(a1[5] + v16) = v5;
        int v66 = 4;
        break;
      case 4u:
        unsigned int v41 = v15 + 5;
        int v42 = *((_DWORD *)a1 + 8);
        if (v41 <= v42)
        {
          uint64_t v45 = (char *)a1[5];
          unsigned int v46 = v16;
        }
        else
        {
          if (v42 <= 1) {
            int v42 = 1;
          }
          int v43 = 2 * v42;
          if (v43 <= (int)v41) {
            uint64_t v44 = v41;
          }
          else {
            uint64_t v44 = v43;
          }
          uint64_t v45 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v44, "Vector Storage (uint8_t, growth)");
          memcpy(v45, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v44;
          a1[5] = v45;
          unsigned int v46 = *((_DWORD *)a1 + 9);
        }
        memmove(&v45[v16 + 1], &v45[v16], v46 - v16);
        *(_DWORD *)(a1[5] + v16) = v5;
        int v68 = *((_DWORD *)a1 + 8);
        int v67 = *((_DWORD *)a1 + 9);
        unsigned int v16 = v67 + 4;
        *((_DWORD *)a1 + 9) = v67 + 4;
        unsigned int v69 = v67 + 5;
        if (v69 <= v68)
        {
          unsigned int v21 = (char *)a1[5];
          unsigned int v22 = v16;
        }
        else
        {
          if (v68 <= 1) {
            int v68 = 1;
          }
          int v70 = 2 * v68;
          if (v70 <= (int)v69) {
            uint64_t v71 = v69;
          }
          else {
            uint64_t v71 = v70;
          }
          unsigned int v21 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v71, "Vector Storage (uint8_t, growth)");
          memcpy(v21, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v71;
          a1[5] = v21;
          unsigned int v22 = *((_DWORD *)a1 + 9);
        }
        v5 >>= 32;
        goto LABEL_101;
      case 5u:
        unsigned int v47 = v15 + 5;
        int v48 = *((_DWORD *)a1 + 8);
        if (v47 <= v48)
        {
          int v51 = (char *)a1[5];
          unsigned int v52 = v16;
        }
        else
        {
          if (v48 <= 1) {
            int v48 = 1;
          }
          int v49 = 2 * v48;
          if (v49 <= (int)v47) {
            uint64_t v50 = v47;
          }
          else {
            uint64_t v50 = v49;
          }
          int v51 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v50, "Vector Storage (uint8_t, growth)");
          memcpy(v51, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v50;
          a1[5] = v51;
          unsigned int v52 = *((_DWORD *)a1 + 9);
        }
        memmove(&v51[v16 + 1], &v51[v16], v52 - v16);
        *(_DWORD *)(a1[5] + v16) = v5;
        int v73 = *((_DWORD *)a1 + 8);
        int v72 = *((_DWORD *)a1 + 9);
        unsigned int v16 = v72 + 4;
        *((_DWORD *)a1 + 9) = v72 + 4;
        unsigned int v74 = v72 + 6;
        if (v74 <= v73)
        {
          unsigned int v27 = (char *)a1[5];
          unsigned int v28 = v16;
        }
        else
        {
          if (v73 <= 1) {
            int v73 = 1;
          }
          int v75 = 2 * v73;
          if (v75 <= (int)v74) {
            uint64_t v76 = v74;
          }
          else {
            uint64_t v76 = v75;
          }
          unsigned int v27 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v76, "Vector Storage (uint8_t, growth)");
          memcpy(v27, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v76;
          a1[5] = v27;
          unsigned int v28 = *((_DWORD *)a1 + 9);
        }
        v5 >>= 32;
LABEL_104:
        uint64_t result = memmove(&v27[v16 + 1], &v27[v16], v28 - v16);
        *(_WORD *)(a1[5] + v16) = v5;
        int v66 = 2;
        break;
      case 6u:
        unsigned int v59 = v15 + 5;
        int v60 = *((_DWORD *)a1 + 8);
        if (v59 <= v60)
        {
          int v63 = (char *)a1[5];
          unsigned int v64 = v16;
        }
        else
        {
          if (v60 <= 1) {
            int v60 = 1;
          }
          int v61 = 2 * v60;
          if (v61 <= (int)v59) {
            uint64_t v62 = v59;
          }
          else {
            uint64_t v62 = v61;
          }
          int v63 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v62, "Vector Storage (uint8_t, growth)");
          memcpy(v63, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v62;
          a1[5] = v63;
          unsigned int v64 = *((_DWORD *)a1 + 9);
        }
        memmove(&v63[v16 + 1], &v63[v16], v64 - v16);
        *(_DWORD *)(a1[5] + v16) = v5;
        int v78 = *((_DWORD *)a1 + 8);
        int v77 = *((_DWORD *)a1 + 9);
        unsigned int v79 = v77 + 4;
        *((_DWORD *)a1 + 9) = v77 + 4;
        unsigned int v80 = v77 + 7;
        if (v80 <= v78)
        {
          int v83 = (char *)a1[5];
          unsigned int v84 = v79;
        }
        else
        {
          if (v78 <= 1) {
            int v78 = 1;
          }
          int v81 = 2 * v78;
          if (v81 <= (int)v80) {
            uint64_t v82 = v80;
          }
          else {
            uint64_t v82 = v81;
          }
          int v83 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v82, "Vector Storage (uint8_t, growth)");
          memcpy(v83, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v82;
          a1[5] = v83;
          unsigned int v84 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v83[v79 + 1], &v83[v79], v84 - v79);
        uint64_t v85 = a1[5] + v79;
        *(unsigned char *)(v85 + 2) = BYTE6(v5);
        *(_WORD *)uint64_t v85 = WORD2(v5);
LABEL_107:
        int v66 = 3;
        break;
      case 7u:
        unsigned int v53 = v15 + 9;
        int v54 = *((_DWORD *)a1 + 8);
        if (v53 <= v54)
        {
          int v57 = (char *)a1[5];
          unsigned int v58 = v16;
        }
        else
        {
          if (v54 <= 1) {
            int v54 = 1;
          }
          int v55 = 2 * v54;
          if (v55 <= (int)v53) {
            uint64_t v56 = v53;
          }
          else {
            uint64_t v56 = v55;
          }
          int v57 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v56, "Vector Storage (uint8_t, growth)");
          memcpy(v57, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v56;
          a1[5] = v57;
          unsigned int v58 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v57[v16 + 1], &v57[v16], v58 - v16);
        *(void *)(a1[5] + v16) = v5;
        int v66 = 8;
        break;
      default:
        unsigned int v17 = v15 + 2;
        int v18 = *((_DWORD *)a1 + 8);
        if (v17 <= v18)
        {
          unsigned int v21 = (char *)a1[5];
          unsigned int v22 = v16;
        }
        else
        {
          if (v18 <= 1) {
            int v18 = 1;
          }
          int v19 = 2 * v18;
          if (v19 <= (int)v17) {
            uint64_t v20 = v17;
          }
          else {
            uint64_t v20 = v19;
          }
          unsigned int v21 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v20, "Vector Storage (uint8_t, growth)");
          memcpy(v21, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v20;
          a1[5] = v21;
          unsigned int v22 = *((_DWORD *)a1 + 9);
        }
LABEL_101:
        uint64_t result = memmove(&v21[v16 + 1], &v21[v16], v22 - v16);
        *(unsigned char *)(a1[5] + v16) = v5;
        int v66 = 1;
        break;
    }
    *((_DWORD *)a1 + 9) += v66;
  }
  return result;
}

uint64_t serializeVariableIdentifierFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  Name = (const char *)glpVariableIdentifierNodeGetName(a2);

  return serialize_GLPString(a1, Name, v4);
}

uint64_t serializeTypeIdentifierFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  Name = (const char *)glpTypeIdentifierNodeGetName(a2);

  return serialize_GLPString(a1, Name, v4);
}

uint64_t serializeConstantFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  uint64_t Type = glpConstantNodeGetType(a2);
  serialize_GLPType(a1, Type);
  unint64_t Value = glpConstantNodeGetValue(a2);
  unsigned int v6 = (unsigned int *)glpConstantNodeGetType(a2);

  return real_serialize_GLPValue(a1, Value, v6);
}

uint64_t serializeFieldAccessFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  Field = (const char *)glpFieldAccessNodeGetField(a2);

  return serialize_GLPString(a1, Field, v4);
}

uint64_t serializeFunctionCallFields(void *a1, uint64_t a2)
{
  serializeCallFields(a1, a2);
  uint64_t v4 = (const char *)glpFunctionCallNodeGetName(a2);
  serialize_GLPString(a1, v4, v5);
  uint64_t v6 = glpFunctionCallNodeGetExtra(a2);

  return serialize_GLPFunctionObject(a1, v6);
}

uint64_t serializeSubroutineArrayCallFields(void *a1, uint64_t a2)
{
  serializeCallFields(a1, a2);
  uint64_t v5 = (const char *)glpSubroutineArrayCallNodeGetName(a2);

  return serialize_GLPString(a1, v5, v4);
}

uint64_t serializeMethodCallFields(void *a1, uint64_t a2)
{
  serializeCallFields(a1, a2);
  uint64_t v5 = (const char *)glpMethodCallNodeGetName(a2);

  return serialize_GLPString(a1, v5, v4);
}

void *serializeEqualFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  char v4 = glpEqualNodeGetIsFromSource(a2);
  int v5 = *((_DWORD *)a1 + 8);
  uint64_t v6 = *((unsigned int *)a1 + 9);
  int v7 = v6 + 1;
  if ((int)v6 + 1 <= v5)
  {
    int v10 = (char *)a1[5];
    int v11 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v5 <= 1) {
      int v5 = 1;
    }
    int v8 = 2 * v5;
    if (v8 <= v7) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = v8;
    }
    int v10 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v9, "Vector Storage (uint8_t, growth)");
    memcpy(v10, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v9;
    a1[5] = v10;
    int v11 = *((_DWORD *)a1 + 9);
  }
  uint64_t result = memmove(&v10[v6 + 1], &v10[v6], (v11 - v6));
  *(unsigned char *)(a1[5] + v6) = v4;
  ++*((_DWORD *)a1 + 9);
  return result;
}

void *serializeNotEqualFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  char v4 = glpNotEqualNodeGetIsFromSource(a2);
  int v5 = *((_DWORD *)a1 + 8);
  uint64_t v6 = *((unsigned int *)a1 + 9);
  int v7 = v6 + 1;
  if ((int)v6 + 1 <= v5)
  {
    int v10 = (char *)a1[5];
    int v11 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v5 <= 1) {
      int v5 = 1;
    }
    int v8 = 2 * v5;
    if (v8 <= v7) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = v8;
    }
    int v10 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v9, "Vector Storage (uint8_t, growth)");
    memcpy(v10, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v9;
    a1[5] = v10;
    int v11 = *((_DWORD *)a1 + 9);
  }
  uint64_t result = memmove(&v10[v6 + 1], &v10[v6], (v11 - v6));
  *(unsigned char *)(a1[5] + v6) = v4;
  ++*((_DWORD *)a1 + 9);
  return result;
}

void *serializeAssignFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  char v4 = glpAssignNodeGetIsFromSource(a2);
  int v5 = *((_DWORD *)a1 + 8);
  uint64_t v6 = *((unsigned int *)a1 + 9);
  int v7 = v6 + 1;
  if ((int)v6 + 1 <= v5)
  {
    int v10 = (char *)a1[5];
    int v11 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v5 <= 1) {
      int v5 = 1;
    }
    int v8 = 2 * v5;
    if (v8 <= v7) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = v8;
    }
    int v10 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v9, "Vector Storage (uint8_t, growth)");
    memcpy(v10, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v9;
    a1[5] = v10;
    int v11 = *((_DWORD *)a1 + 9);
  }
  uint64_t result = memmove(&v10[v6 + 1], &v10[v6], (v11 - v6));
  *(unsigned char *)(a1[5] + v6) = v4;
  ++*((_DWORD *)a1 + 9);
  return result;
}

void serializeOpAssignFields(void *a1, uint64_t a2)
{
}

uint64_t serializeReadInputFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  unint64_t Extra = glpReadInputNodeGetExtra(a2);

  return serialize_GLPVariableObject(a1, Extra);
}

uint64_t serializeWriteOutputFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  unint64_t v4 = glpWriteOutputNodeGetExtra(a2);

  return serialize_GLPVariableObject(a1, v4);
}

void *serializeCommaExprFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  char v4 = glpCommaExprNodeGetIsFromSource(a2);
  int v5 = *((_DWORD *)a1 + 8);
  uint64_t v6 = *((unsigned int *)a1 + 9);
  int v7 = v6 + 1;
  if ((int)v6 + 1 <= v5)
  {
    int v10 = (char *)a1[5];
    int v11 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v5 <= 1) {
      int v5 = 1;
    }
    int v8 = 2 * v5;
    if (v8 <= v7) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = v8;
    }
    int v10 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v9, "Vector Storage (uint8_t, growth)");
    memcpy(v10, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v9;
    a1[5] = v10;
    int v11 = *((_DWORD *)a1 + 9);
  }
  memmove(&v10[v6 + 1], &v10[v6], (v11 - v6));
  *(unsigned char *)(a1[5] + v6) = v4;
  ++*((_DWORD *)a1 + 9);
  uint64_t ExprCount = glpCommaExprNodeGetExprCount(a2);
  int v13 = ExprCount;
  unsigned int v14 = (char)glp_serialized_integer32_control(ExprCount);
  int v15 = *((_DWORD *)a1 + 8);
  uint64_t v16 = *((unsigned int *)a1 + 9);
  int v17 = v16 + 1;
  if ((int)v16 + 1 <= v15)
  {
    uint64_t v20 = (char *)a1[5];
    int v21 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v15 <= 1) {
      int v15 = 1;
    }
    int v18 = 2 * v15;
    if (v18 <= v17) {
      uint64_t v19 = v17;
    }
    else {
      uint64_t v19 = v18;
    }
    uint64_t v20 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v19, "Vector Storage (uint8_t, growth)");
    memcpy(v20, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v19;
    a1[5] = v20;
    int v21 = *((_DWORD *)a1 + 9);
  }
  uint64_t result = memmove(&v20[v16 + 1], &v20[v16], (v21 - v16));
  *(unsigned char *)(a1[5] + v16) = v14;
  int v23 = *((_DWORD *)a1 + 9);
  unsigned int v24 = v23 + 1;
  *((_DWORD *)a1 + 9) = v23 + 1;
  if ((v14 & 0x80000000) != 0)
  {
    switch((v14 >> 1) & 7)
    {
      case 0u:
        unsigned int v25 = v23 + 2;
        int v26 = *((_DWORD *)a1 + 8);
        if (v25 <= v26)
        {
          unsigned int v29 = (char *)a1[5];
          unsigned int v30 = v24;
        }
        else
        {
          if (v26 <= 1) {
            int v26 = 1;
          }
          int v27 = 2 * v26;
          if (v27 <= (int)v25) {
            uint64_t v28 = v25;
          }
          else {
            uint64_t v28 = v27;
          }
          unsigned int v29 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v28, "Vector Storage (uint8_t, growth)");
          memcpy(v29, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v28;
          a1[5] = v29;
          unsigned int v30 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v29[v24 + 1], &v29[v24], v30 - v24);
        *(unsigned char *)(a1[5] + v24) = v13;
        int v49 = 1;
        goto LABEL_55;
      case 1u:
        unsigned int v43 = v23 + 3;
        int v44 = *((_DWORD *)a1 + 8);
        if (v43 <= v44)
        {
          unsigned int v47 = (char *)a1[5];
          unsigned int v48 = v24;
        }
        else
        {
          if (v44 <= 1) {
            int v44 = 1;
          }
          int v45 = 2 * v44;
          if (v45 <= (int)v43) {
            uint64_t v46 = v43;
          }
          else {
            uint64_t v46 = v45;
          }
          unsigned int v47 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v46, "Vector Storage (uint8_t, growth)");
          memcpy(v47, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v46;
          a1[5] = v47;
          unsigned int v48 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v47[v24 + 1], &v47[v24], v48 - v24);
        *(_WORD *)(a1[5] + v24) = v13;
        int v49 = 2;
        goto LABEL_55;
      case 2u:
        unsigned int v31 = v23 + 4;
        int v32 = *((_DWORD *)a1 + 8);
        if (v31 <= v32)
        {
          unsigned int v35 = (char *)a1[5];
          unsigned int v36 = v24;
        }
        else
        {
          if (v32 <= 1) {
            int v32 = 1;
          }
          int v33 = 2 * v32;
          if (v33 <= (int)v31) {
            uint64_t v34 = v31;
          }
          else {
            uint64_t v34 = v33;
          }
          unsigned int v35 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v34, "Vector Storage (uint8_t, growth)");
          memcpy(v35, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v34;
          a1[5] = v35;
          unsigned int v36 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v35[v24 + 1], &v35[v24], v36 - v24);
        uint64_t v50 = a1[5] + v24;
        *(unsigned char *)(v50 + 2) = BYTE2(v13);
        *(_WORD *)uint64_t v50 = v13;
        int v49 = 3;
        goto LABEL_55;
      case 3u:
        unsigned int v37 = v23 + 5;
        int v38 = *((_DWORD *)a1 + 8);
        if (v37 <= v38)
        {
          unsigned int v41 = (char *)a1[5];
          unsigned int v42 = v24;
        }
        else
        {
          if (v38 <= 1) {
            int v38 = 1;
          }
          int v39 = 2 * v38;
          if (v39 <= (int)v37) {
            uint64_t v40 = v37;
          }
          else {
            uint64_t v40 = v39;
          }
          unsigned int v41 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v40, "Vector Storage (uint8_t, growth)");
          memcpy(v41, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v40;
          a1[5] = v41;
          unsigned int v42 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v41[v24 + 1], &v41[v24], v42 - v24);
        *(_DWORD *)(a1[5] + v24) = v13;
        int v49 = 4;
LABEL_55:
        *((_DWORD *)a1 + 9) += v49;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t serializeParameterDeclarationFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  Name = (const char *)glpParameterDeclarationNodeGetName(a2);
  serialize_GLPString(a1, Name, v5);
  unint64_t Extra = glpParameterDeclarationNodeGetExtra(a2);

  return serialize_GLPVariableObject(a1, Extra);
}

void *serializeFunctionPrototypeFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  Name = (const char *)glpFunctionPrototypeNodeGetName(a2);
  serialize_GLPString(a1, Name, v5);
  uint64_t Extra = glpFunctionPrototypeNodeGetExtra(a2);
  serialize_GLPFunctionObject(a1, Extra);
  ParameterCFIndex Count = glpFunctionPrototypeNodeGetParameterCount(a2);
  int v8 = ParameterCount;
  unsigned int v9 = (char)glp_serialized_integer32_control(ParameterCount);
  int v10 = *((_DWORD *)a1 + 8);
  uint64_t v11 = *((unsigned int *)a1 + 9);
  int v12 = v11 + 1;
  if ((int)v11 + 1 <= v10)
  {
    int v15 = (char *)a1[5];
    int v16 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v10 <= 1) {
      int v10 = 1;
    }
    int v13 = 2 * v10;
    if (v13 <= v12) {
      uint64_t v14 = v12;
    }
    else {
      uint64_t v14 = v13;
    }
    int v15 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v14, "Vector Storage (uint8_t, growth)");
    memcpy(v15, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v14;
    a1[5] = v15;
    int v16 = *((_DWORD *)a1 + 9);
  }
  uint64_t result = memmove(&v15[v11 + 1], &v15[v11], (v16 - v11));
  *(unsigned char *)(a1[5] + v11) = v9;
  int v18 = *((_DWORD *)a1 + 9);
  unsigned int v19 = v18 + 1;
  *((_DWORD *)a1 + 9) = v18 + 1;
  if ((v9 & 0x80000000) != 0)
  {
    switch((v9 >> 1) & 7)
    {
      case 0u:
        unsigned int v20 = v18 + 2;
        int v21 = *((_DWORD *)a1 + 8);
        if (v20 <= v21)
        {
          unsigned int v24 = (char *)a1[5];
          unsigned int v25 = v19;
        }
        else
        {
          if (v21 <= 1) {
            int v21 = 1;
          }
          int v22 = 2 * v21;
          if (v22 <= (int)v20) {
            uint64_t v23 = v20;
          }
          else {
            uint64_t v23 = v22;
          }
          unsigned int v24 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v23, "Vector Storage (uint8_t, growth)");
          memcpy(v24, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v23;
          a1[5] = v24;
          unsigned int v25 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v24[v19 + 1], &v24[v19], v25 - v19);
        *(unsigned char *)(a1[5] + v19) = v8;
        int v44 = 1;
        goto LABEL_47;
      case 1u:
        unsigned int v38 = v18 + 3;
        int v39 = *((_DWORD *)a1 + 8);
        if (v38 <= v39)
        {
          unsigned int v42 = (char *)a1[5];
          unsigned int v43 = v19;
        }
        else
        {
          if (v39 <= 1) {
            int v39 = 1;
          }
          int v40 = 2 * v39;
          if (v40 <= (int)v38) {
            uint64_t v41 = v38;
          }
          else {
            uint64_t v41 = v40;
          }
          unsigned int v42 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v41, "Vector Storage (uint8_t, growth)");
          memcpy(v42, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v41;
          a1[5] = v42;
          unsigned int v43 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v42[v19 + 1], &v42[v19], v43 - v19);
        *(_WORD *)(a1[5] + v19) = v8;
        int v44 = 2;
        goto LABEL_47;
      case 2u:
        unsigned int v26 = v18 + 4;
        int v27 = *((_DWORD *)a1 + 8);
        if (v26 <= v27)
        {
          unsigned int v30 = (char *)a1[5];
          unsigned int v31 = v19;
        }
        else
        {
          if (v27 <= 1) {
            int v27 = 1;
          }
          int v28 = 2 * v27;
          if (v28 <= (int)v26) {
            uint64_t v29 = v26;
          }
          else {
            uint64_t v29 = v28;
          }
          unsigned int v30 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v29, "Vector Storage (uint8_t, growth)");
          memcpy(v30, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v29;
          a1[5] = v30;
          unsigned int v31 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v30[v19 + 1], &v30[v19], v31 - v19);
        uint64_t v45 = a1[5] + v19;
        *(unsigned char *)(v45 + 2) = BYTE2(v8);
        *(_WORD *)uint64_t v45 = v8;
        int v44 = 3;
        goto LABEL_47;
      case 3u:
        unsigned int v32 = v18 + 5;
        int v33 = *((_DWORD *)a1 + 8);
        if (v32 <= v33)
        {
          unsigned int v36 = (char *)a1[5];
          unsigned int v37 = v19;
        }
        else
        {
          if (v33 <= 1) {
            int v33 = 1;
          }
          int v34 = 2 * v33;
          if (v34 <= (int)v32) {
            uint64_t v35 = v32;
          }
          else {
            uint64_t v35 = v34;
          }
          unsigned int v36 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v35, "Vector Storage (uint8_t, growth)");
          memcpy(v36, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v35;
          a1[5] = v36;
          unsigned int v37 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v36[v19 + 1], &v36[v19], v37 - v19);
        *(_DWORD *)(a1[5] + v19) = v8;
        int v44 = 4;
LABEL_47:
        *((_DWORD *)a1 + 9) += v44;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t serializeVariableDeclarationFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  Name = (const char *)glpVariableDeclarationNodeGetName(a2);
  serialize_GLPString(a1, Name, v5);
  char v6 = glpVariableDeclarationNodeGetIsFromSource(a2);
  int v7 = *((_DWORD *)a1 + 8);
  uint64_t v8 = *((unsigned int *)a1 + 9);
  int v9 = v8 + 1;
  if ((int)v8 + 1 <= v7)
  {
    int v12 = (char *)a1[5];
    int v13 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v7 <= 1) {
      int v7 = 1;
    }
    int v10 = 2 * v7;
    if (v10 <= v9) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = v10;
    }
    int v12 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v11, "Vector Storage (uint8_t, growth)");
    memcpy(v12, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v11;
    a1[5] = v12;
    int v13 = *((_DWORD *)a1 + 9);
  }
  memmove(&v12[v8 + 1], &v12[v8], (v13 - v8));
  *(unsigned char *)(a1[5] + v8) = v6;
  ++*((_DWORD *)a1 + 9);
  unint64_t Extra = glpVariableDeclarationNodeGetExtra(a2);

  return serialize_GLPVariableObject(a1, Extra);
}

void *serializeVariableDeclarationGroupFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  DeclarationCFIndex Count = glpVariableDeclarationGroupNodeGetDeclarationCount(a2);
  int v5 = DeclarationCount;
  unsigned int v6 = (char)glp_serialized_integer32_control(DeclarationCount);
  int v7 = *((_DWORD *)a1 + 8);
  uint64_t v8 = *((unsigned int *)a1 + 9);
  int v9 = v8 + 1;
  if ((int)v8 + 1 <= v7)
  {
    int v12 = (char *)a1[5];
    int v13 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v7 <= 1) {
      int v7 = 1;
    }
    int v10 = 2 * v7;
    if (v10 <= v9) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = v10;
    }
    int v12 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v11, "Vector Storage (uint8_t, growth)");
    memcpy(v12, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v11;
    a1[5] = v12;
    int v13 = *((_DWORD *)a1 + 9);
  }
  uint64_t result = memmove(&v12[v8 + 1], &v12[v8], (v13 - v8));
  *(unsigned char *)(a1[5] + v8) = v6;
  int v15 = *((_DWORD *)a1 + 9);
  unsigned int v16 = v15 + 1;
  *((_DWORD *)a1 + 9) = v15 + 1;
  if ((v6 & 0x80000000) != 0)
  {
    switch((v6 >> 1) & 7)
    {
      case 0u:
        unsigned int v17 = v15 + 2;
        int v18 = *((_DWORD *)a1 + 8);
        if (v17 <= v18)
        {
          int v21 = (char *)a1[5];
          unsigned int v22 = v16;
        }
        else
        {
          if (v18 <= 1) {
            int v18 = 1;
          }
          int v19 = 2 * v18;
          if (v19 <= (int)v17) {
            uint64_t v20 = v17;
          }
          else {
            uint64_t v20 = v19;
          }
          int v21 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v20, "Vector Storage (uint8_t, growth)");
          memcpy(v21, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v20;
          a1[5] = v21;
          unsigned int v22 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v21[v16 + 1], &v21[v16], v22 - v16);
        *(unsigned char *)(a1[5] + v16) = v5;
        int v41 = 1;
        goto LABEL_47;
      case 1u:
        unsigned int v35 = v15 + 3;
        int v36 = *((_DWORD *)a1 + 8);
        if (v35 <= v36)
        {
          int v39 = (char *)a1[5];
          unsigned int v40 = v16;
        }
        else
        {
          if (v36 <= 1) {
            int v36 = 1;
          }
          int v37 = 2 * v36;
          if (v37 <= (int)v35) {
            uint64_t v38 = v35;
          }
          else {
            uint64_t v38 = v37;
          }
          int v39 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v38, "Vector Storage (uint8_t, growth)");
          memcpy(v39, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v38;
          a1[5] = v39;
          unsigned int v40 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v39[v16 + 1], &v39[v16], v40 - v16);
        *(_WORD *)(a1[5] + v16) = v5;
        int v41 = 2;
        goto LABEL_47;
      case 2u:
        unsigned int v23 = v15 + 4;
        int v24 = *((_DWORD *)a1 + 8);
        if (v23 <= v24)
        {
          int v27 = (char *)a1[5];
          unsigned int v28 = v16;
        }
        else
        {
          if (v24 <= 1) {
            int v24 = 1;
          }
          int v25 = 2 * v24;
          if (v25 <= (int)v23) {
            uint64_t v26 = v23;
          }
          else {
            uint64_t v26 = v25;
          }
          int v27 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v26, "Vector Storage (uint8_t, growth)");
          memcpy(v27, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v26;
          a1[5] = v27;
          unsigned int v28 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v27[v16 + 1], &v27[v16], v28 - v16);
        uint64_t v42 = a1[5] + v16;
        *(unsigned char *)(v42 + 2) = BYTE2(v5);
        *(_WORD *)uint64_t v42 = v5;
        int v41 = 3;
        goto LABEL_47;
      case 3u:
        unsigned int v29 = v15 + 5;
        int v30 = *((_DWORD *)a1 + 8);
        if (v29 <= v30)
        {
          int v33 = (char *)a1[5];
          unsigned int v34 = v16;
        }
        else
        {
          if (v30 <= 1) {
            int v30 = 1;
          }
          int v31 = 2 * v30;
          if (v31 <= (int)v29) {
            uint64_t v32 = v29;
          }
          else {
            uint64_t v32 = v31;
          }
          int v33 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v32, "Vector Storage (uint8_t, growth)");
          memcpy(v33, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v32;
          a1[5] = v33;
          unsigned int v34 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v33[v16 + 1], &v33[v16], v34 - v16);
        *(_DWORD *)(a1[5] + v16) = v5;
        int v41 = 4;
LABEL_47:
        *((_DWORD *)a1 + 9) += v41;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t serializeQualifiedDeclarationFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  Name = (const char *)glpQualifiedDeclarationNodeGetName(a2);

  return serialize_GLPString(a1, Name, v4);
}

void *serializeQualifiedDeclarationGroupFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  DeclarationCFIndex Count = glpQualifiedDeclarationGroupNodeGetDeclarationCount(a2);
  int v5 = DeclarationCount;
  unsigned int v6 = (char)glp_serialized_integer32_control(DeclarationCount);
  int v7 = *((_DWORD *)a1 + 8);
  uint64_t v8 = *((unsigned int *)a1 + 9);
  int v9 = v8 + 1;
  if ((int)v8 + 1 <= v7)
  {
    int v12 = (char *)a1[5];
    int v13 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v7 <= 1) {
      int v7 = 1;
    }
    int v10 = 2 * v7;
    if (v10 <= v9) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = v10;
    }
    int v12 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v11, "Vector Storage (uint8_t, growth)");
    memcpy(v12, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v11;
    a1[5] = v12;
    int v13 = *((_DWORD *)a1 + 9);
  }
  uint64_t result = memmove(&v12[v8 + 1], &v12[v8], (v13 - v8));
  *(unsigned char *)(a1[5] + v8) = v6;
  int v15 = *((_DWORD *)a1 + 9);
  unsigned int v16 = v15 + 1;
  *((_DWORD *)a1 + 9) = v15 + 1;
  if ((v6 & 0x80000000) != 0)
  {
    switch((v6 >> 1) & 7)
    {
      case 0u:
        unsigned int v17 = v15 + 2;
        int v18 = *((_DWORD *)a1 + 8);
        if (v17 <= v18)
        {
          int v21 = (char *)a1[5];
          unsigned int v22 = v16;
        }
        else
        {
          if (v18 <= 1) {
            int v18 = 1;
          }
          int v19 = 2 * v18;
          if (v19 <= (int)v17) {
            uint64_t v20 = v17;
          }
          else {
            uint64_t v20 = v19;
          }
          int v21 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v20, "Vector Storage (uint8_t, growth)");
          memcpy(v21, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v20;
          a1[5] = v21;
          unsigned int v22 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v21[v16 + 1], &v21[v16], v22 - v16);
        *(unsigned char *)(a1[5] + v16) = v5;
        int v41 = 1;
        goto LABEL_47;
      case 1u:
        unsigned int v35 = v15 + 3;
        int v36 = *((_DWORD *)a1 + 8);
        if (v35 <= v36)
        {
          int v39 = (char *)a1[5];
          unsigned int v40 = v16;
        }
        else
        {
          if (v36 <= 1) {
            int v36 = 1;
          }
          int v37 = 2 * v36;
          if (v37 <= (int)v35) {
            uint64_t v38 = v35;
          }
          else {
            uint64_t v38 = v37;
          }
          int v39 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v38, "Vector Storage (uint8_t, growth)");
          memcpy(v39, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v38;
          a1[5] = v39;
          unsigned int v40 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v39[v16 + 1], &v39[v16], v40 - v16);
        *(_WORD *)(a1[5] + v16) = v5;
        int v41 = 2;
        goto LABEL_47;
      case 2u:
        unsigned int v23 = v15 + 4;
        int v24 = *((_DWORD *)a1 + 8);
        if (v23 <= v24)
        {
          int v27 = (char *)a1[5];
          unsigned int v28 = v16;
        }
        else
        {
          if (v24 <= 1) {
            int v24 = 1;
          }
          int v25 = 2 * v24;
          if (v25 <= (int)v23) {
            uint64_t v26 = v23;
          }
          else {
            uint64_t v26 = v25;
          }
          int v27 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v26, "Vector Storage (uint8_t, growth)");
          memcpy(v27, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v26;
          a1[5] = v27;
          unsigned int v28 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v27[v16 + 1], &v27[v16], v28 - v16);
        uint64_t v42 = a1[5] + v16;
        *(unsigned char *)(v42 + 2) = BYTE2(v5);
        *(_WORD *)uint64_t v42 = v5;
        int v41 = 3;
        goto LABEL_47;
      case 3u:
        unsigned int v29 = v15 + 5;
        int v30 = *((_DWORD *)a1 + 8);
        if (v29 <= v30)
        {
          int v33 = (char *)a1[5];
          unsigned int v34 = v16;
        }
        else
        {
          if (v30 <= 1) {
            int v30 = 1;
          }
          int v31 = 2 * v30;
          if (v31 <= (int)v29) {
            uint64_t v32 = v29;
          }
          else {
            uint64_t v32 = v31;
          }
          int v33 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v32, "Vector Storage (uint8_t, growth)");
          memcpy(v33, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v32;
          a1[5] = v33;
          unsigned int v34 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v33[v16 + 1], &v33[v16], v34 - v16);
        *(_DWORD *)(a1[5] + v16) = v5;
        int v41 = 4;
LABEL_47:
        *((_DWORD *)a1 + 9) += v41;
        break;
      default:
        return result;
    }
  }
  return result;
}

void *serializePrimitiveTypeFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  uint64_t Type = glpPrimitiveTypeNodeGetType(a2);
  int v5 = Type;
  unsigned int v6 = (char)glp_serialized_integer32_control(Type);
  int v7 = *((_DWORD *)a1 + 8);
  uint64_t v8 = *((unsigned int *)a1 + 9);
  int v9 = v8 + 1;
  if ((int)v8 + 1 <= v7)
  {
    int v12 = (char *)a1[5];
    int v13 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v7 <= 1) {
      int v7 = 1;
    }
    int v10 = 2 * v7;
    if (v10 <= v9) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = v10;
    }
    int v12 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v11, "Vector Storage (uint8_t, growth)");
    memcpy(v12, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v11;
    a1[5] = v12;
    int v13 = *((_DWORD *)a1 + 9);
  }
  uint64_t result = memmove(&v12[v8 + 1], &v12[v8], (v13 - v8));
  *(unsigned char *)(a1[5] + v8) = v6;
  int v15 = *((_DWORD *)a1 + 9);
  unsigned int v16 = v15 + 1;
  *((_DWORD *)a1 + 9) = v15 + 1;
  if ((v6 & 0x80000000) != 0)
  {
    switch((v6 >> 1) & 7)
    {
      case 0u:
        unsigned int v17 = v15 + 2;
        int v18 = *((_DWORD *)a1 + 8);
        if (v17 <= v18)
        {
          int v21 = (char *)a1[5];
          unsigned int v22 = v16;
        }
        else
        {
          if (v18 <= 1) {
            int v18 = 1;
          }
          int v19 = 2 * v18;
          if (v19 <= (int)v17) {
            uint64_t v20 = v17;
          }
          else {
            uint64_t v20 = v19;
          }
          int v21 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v20, "Vector Storage (uint8_t, growth)");
          memcpy(v21, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v20;
          a1[5] = v21;
          unsigned int v22 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v21[v16 + 1], &v21[v16], v22 - v16);
        *(unsigned char *)(a1[5] + v16) = v5;
        int v41 = 1;
        goto LABEL_47;
      case 1u:
        unsigned int v35 = v15 + 3;
        int v36 = *((_DWORD *)a1 + 8);
        if (v35 <= v36)
        {
          int v39 = (char *)a1[5];
          unsigned int v40 = v16;
        }
        else
        {
          if (v36 <= 1) {
            int v36 = 1;
          }
          int v37 = 2 * v36;
          if (v37 <= (int)v35) {
            uint64_t v38 = v35;
          }
          else {
            uint64_t v38 = v37;
          }
          int v39 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v38, "Vector Storage (uint8_t, growth)");
          memcpy(v39, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v38;
          a1[5] = v39;
          unsigned int v40 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v39[v16 + 1], &v39[v16], v40 - v16);
        *(_WORD *)(a1[5] + v16) = v5;
        int v41 = 2;
        goto LABEL_47;
      case 2u:
        unsigned int v23 = v15 + 4;
        int v24 = *((_DWORD *)a1 + 8);
        if (v23 <= v24)
        {
          int v27 = (char *)a1[5];
          unsigned int v28 = v16;
        }
        else
        {
          if (v24 <= 1) {
            int v24 = 1;
          }
          int v25 = 2 * v24;
          if (v25 <= (int)v23) {
            uint64_t v26 = v23;
          }
          else {
            uint64_t v26 = v25;
          }
          int v27 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v26, "Vector Storage (uint8_t, growth)");
          memcpy(v27, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v26;
          a1[5] = v27;
          unsigned int v28 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v27[v16 + 1], &v27[v16], v28 - v16);
        uint64_t v42 = a1[5] + v16;
        *(unsigned char *)(v42 + 2) = BYTE2(v5);
        *(_WORD *)uint64_t v42 = v5;
        int v41 = 3;
        goto LABEL_47;
      case 3u:
        unsigned int v29 = v15 + 5;
        int v30 = *((_DWORD *)a1 + 8);
        if (v29 <= v30)
        {
          int v33 = (char *)a1[5];
          unsigned int v34 = v16;
        }
        else
        {
          if (v30 <= 1) {
            int v30 = 1;
          }
          int v31 = 2 * v30;
          if (v31 <= (int)v29) {
            uint64_t v32 = v29;
          }
          else {
            uint64_t v32 = v31;
          }
          int v33 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v32, "Vector Storage (uint8_t, growth)");
          memcpy(v33, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v32;
          a1[5] = v33;
          unsigned int v34 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v33[v16 + 1], &v33[v16], v34 - v16);
        *(_DWORD *)(a1[5] + v16) = v5;
        int v41 = 4;
LABEL_47:
        *((_DWORD *)a1 + 9) += v41;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t serializeFieldDeclarationFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  Name = (const char *)glpFieldDeclarationNodeGetName(a2);

  return serialize_GLPString(a1, Name, v4);
}

uint64_t serializeStructTypeFields(void *a1, uint64_t a2)
{
  serializeStructureFields(a1, a2);
  Name = (const char *)glpStructTypeNodeGetName(a2);

  return serialize_GLPString(a1, Name, v4);
}

uint64_t serializeInterfaceBlockFields(void *a1, uint64_t a2)
{
  serializeStructureFields(a1, a2);
  BlockName = (const char *)glpInterfaceBlockNodeGetBlockName(a2);
  serialize_GLPString(a1, BlockName, v5);
  InstanceName = (const char *)glpInterfaceBlockNodeGetInstanceName(a2);
  serialize_GLPString(a1, InstanceName, v7);
  char HasInstanceName = glpInterfaceBlockNodeGetHasInstanceName(a2);
  int v9 = *((_DWORD *)a1 + 8);
  uint64_t v10 = *((unsigned int *)a1 + 9);
  int v11 = v10 + 1;
  if ((int)v10 + 1 <= v9)
  {
    uint64_t v14 = (char *)a1[5];
    int v15 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v9 <= 1) {
      int v9 = 1;
    }
    int v12 = 2 * v9;
    if (v12 <= v11) {
      uint64_t v13 = v11;
    }
    else {
      uint64_t v13 = v12;
    }
    uint64_t v14 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v13, "Vector Storage (uint8_t, growth)");
    memcpy(v14, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v13;
    a1[5] = v14;
    int v15 = *((_DWORD *)a1 + 9);
  }
  memmove(&v14[v10 + 1], &v14[v10], (v15 - v10));
  *(unsigned char *)(a1[5] + v10) = HasInstanceName;
  ++*((_DWORD *)a1 + 9);
  Isuint64_t Array = glpInterfaceBlockNodeGetIsArray(a2);
  int v17 = *((_DWORD *)a1 + 8);
  uint64_t v18 = *((unsigned int *)a1 + 9);
  int v19 = v18 + 1;
  if ((int)v18 + 1 <= v17)
  {
    unsigned int v22 = (char *)a1[5];
    int v23 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v17 <= 1) {
      int v17 = 1;
    }
    int v20 = 2 * v17;
    if (v20 <= v19) {
      uint64_t v21 = v19;
    }
    else {
      uint64_t v21 = v20;
    }
    unsigned int v22 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v21, "Vector Storage (uint8_t, growth)");
    memcpy(v22, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v21;
    a1[5] = v22;
    int v23 = *((_DWORD *)a1 + 9);
  }
  memmove(&v22[v18 + 1], &v22[v18], (v23 - v18));
  *(unsigned char *)(a1[5] + v18) = IsArray;
  ++*((_DWORD *)a1 + 9);
  unint64_t Extra = glpInterfaceBlockNodeGetExtra(a2);

  return serialize_GLPInterfaceBlockObject(a1, Extra);
}

void *serializeLayoutTypeFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  uint64_t LayoutPairCount = glpLayoutTypeNodeGetLayoutPairCount(a2);
  int v5 = LayoutPairCount;
  unsigned int v6 = (char)glp_serialized_integer32_control(LayoutPairCount);
  int v7 = *((_DWORD *)a1 + 8);
  uint64_t v8 = *((unsigned int *)a1 + 9);
  int v9 = v8 + 1;
  if ((int)v8 + 1 <= v7)
  {
    int v12 = (char *)a1[5];
    int v13 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v7 <= 1) {
      int v7 = 1;
    }
    int v10 = 2 * v7;
    if (v10 <= v9) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = v10;
    }
    int v12 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v11, "Vector Storage (uint8_t, growth)");
    memcpy(v12, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v11;
    a1[5] = v12;
    int v13 = *((_DWORD *)a1 + 9);
  }
  uint64_t result = memmove(&v12[v8 + 1], &v12[v8], (v13 - v8));
  *(unsigned char *)(a1[5] + v8) = v6;
  int v15 = *((_DWORD *)a1 + 9);
  unsigned int v16 = v15 + 1;
  *((_DWORD *)a1 + 9) = v15 + 1;
  if ((v6 & 0x80000000) != 0)
  {
    switch((v6 >> 1) & 7)
    {
      case 0u:
        unsigned int v17 = v15 + 2;
        int v18 = *((_DWORD *)a1 + 8);
        if (v17 <= v18)
        {
          uint64_t v21 = (char *)a1[5];
          unsigned int v22 = v16;
        }
        else
        {
          if (v18 <= 1) {
            int v18 = 1;
          }
          int v19 = 2 * v18;
          if (v19 <= (int)v17) {
            uint64_t v20 = v17;
          }
          else {
            uint64_t v20 = v19;
          }
          uint64_t v21 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v20, "Vector Storage (uint8_t, growth)");
          memcpy(v21, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v20;
          a1[5] = v21;
          unsigned int v22 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v21[v16 + 1], &v21[v16], v22 - v16);
        *(unsigned char *)(a1[5] + v16) = v5;
        int v41 = 1;
        goto LABEL_47;
      case 1u:
        unsigned int v35 = v15 + 3;
        int v36 = *((_DWORD *)a1 + 8);
        if (v35 <= v36)
        {
          int v39 = (char *)a1[5];
          unsigned int v40 = v16;
        }
        else
        {
          if (v36 <= 1) {
            int v36 = 1;
          }
          int v37 = 2 * v36;
          if (v37 <= (int)v35) {
            uint64_t v38 = v35;
          }
          else {
            uint64_t v38 = v37;
          }
          int v39 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v38, "Vector Storage (uint8_t, growth)");
          memcpy(v39, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v38;
          a1[5] = v39;
          unsigned int v40 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v39[v16 + 1], &v39[v16], v40 - v16);
        *(_WORD *)(a1[5] + v16) = v5;
        int v41 = 2;
        goto LABEL_47;
      case 2u:
        unsigned int v23 = v15 + 4;
        int v24 = *((_DWORD *)a1 + 8);
        if (v23 <= v24)
        {
          int v27 = (char *)a1[5];
          unsigned int v28 = v16;
        }
        else
        {
          if (v24 <= 1) {
            int v24 = 1;
          }
          int v25 = 2 * v24;
          if (v25 <= (int)v23) {
            uint64_t v26 = v23;
          }
          else {
            uint64_t v26 = v25;
          }
          int v27 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v26, "Vector Storage (uint8_t, growth)");
          memcpy(v27, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v26;
          a1[5] = v27;
          unsigned int v28 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v27[v16 + 1], &v27[v16], v28 - v16);
        uint64_t v42 = a1[5] + v16;
        *(unsigned char *)(v42 + 2) = BYTE2(v5);
        *(_WORD *)uint64_t v42 = v5;
        int v41 = 3;
        goto LABEL_47;
      case 3u:
        unsigned int v29 = v15 + 5;
        int v30 = *((_DWORD *)a1 + 8);
        if (v29 <= v30)
        {
          int v33 = (char *)a1[5];
          unsigned int v34 = v16;
        }
        else
        {
          if (v30 <= 1) {
            int v30 = 1;
          }
          int v31 = 2 * v30;
          if (v31 <= (int)v29) {
            uint64_t v32 = v29;
          }
          else {
            uint64_t v32 = v31;
          }
          int v33 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v32, "Vector Storage (uint8_t, growth)");
          memcpy(v33, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v32;
          a1[5] = v33;
          unsigned int v34 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v33[v16 + 1], &v33[v16], v34 - v16);
        *(_DWORD *)(a1[5] + v16) = v5;
        int v41 = 4;
LABEL_47:
        *((_DWORD *)a1 + 9) += v41;
        break;
      default:
        return result;
    }
  }
  return result;
}

void *serializeKeywordQualifierFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  uint64_t Qualifier = glpKeywordQualifierNodeGetQualifier(a2);
  int v5 = Qualifier;
  unsigned int v6 = (char)glp_serialized_integer32_control(Qualifier);
  int v7 = *((_DWORD *)a1 + 8);
  uint64_t v8 = *((unsigned int *)a1 + 9);
  int v9 = v8 + 1;
  if ((int)v8 + 1 <= v7)
  {
    int v12 = (char *)a1[5];
    int v13 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v7 <= 1) {
      int v7 = 1;
    }
    int v10 = 2 * v7;
    if (v10 <= v9) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = v10;
    }
    int v12 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v11, "Vector Storage (uint8_t, growth)");
    memcpy(v12, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v11;
    a1[5] = v12;
    int v13 = *((_DWORD *)a1 + 9);
  }
  uint64_t result = memmove(&v12[v8 + 1], &v12[v8], (v13 - v8));
  *(unsigned char *)(a1[5] + v8) = v6;
  int v15 = *((_DWORD *)a1 + 9);
  unsigned int v16 = v15 + 1;
  *((_DWORD *)a1 + 9) = v15 + 1;
  if ((v6 & 0x80000000) != 0)
  {
    switch((v6 >> 1) & 7)
    {
      case 0u:
        unsigned int v17 = v15 + 2;
        int v18 = *((_DWORD *)a1 + 8);
        if (v17 <= v18)
        {
          uint64_t v21 = (char *)a1[5];
          unsigned int v22 = v16;
        }
        else
        {
          if (v18 <= 1) {
            int v18 = 1;
          }
          int v19 = 2 * v18;
          if (v19 <= (int)v17) {
            uint64_t v20 = v17;
          }
          else {
            uint64_t v20 = v19;
          }
          uint64_t v21 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v20, "Vector Storage (uint8_t, growth)");
          memcpy(v21, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v20;
          a1[5] = v21;
          unsigned int v22 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v21[v16 + 1], &v21[v16], v22 - v16);
        *(unsigned char *)(a1[5] + v16) = v5;
        int v41 = 1;
        goto LABEL_47;
      case 1u:
        unsigned int v35 = v15 + 3;
        int v36 = *((_DWORD *)a1 + 8);
        if (v35 <= v36)
        {
          int v39 = (char *)a1[5];
          unsigned int v40 = v16;
        }
        else
        {
          if (v36 <= 1) {
            int v36 = 1;
          }
          int v37 = 2 * v36;
          if (v37 <= (int)v35) {
            uint64_t v38 = v35;
          }
          else {
            uint64_t v38 = v37;
          }
          int v39 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v38, "Vector Storage (uint8_t, growth)");
          memcpy(v39, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v38;
          a1[5] = v39;
          unsigned int v40 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v39[v16 + 1], &v39[v16], v40 - v16);
        *(_WORD *)(a1[5] + v16) = v5;
        int v41 = 2;
        goto LABEL_47;
      case 2u:
        unsigned int v23 = v15 + 4;
        int v24 = *((_DWORD *)a1 + 8);
        if (v23 <= v24)
        {
          int v27 = (char *)a1[5];
          unsigned int v28 = v16;
        }
        else
        {
          if (v24 <= 1) {
            int v24 = 1;
          }
          int v25 = 2 * v24;
          if (v25 <= (int)v23) {
            uint64_t v26 = v23;
          }
          else {
            uint64_t v26 = v25;
          }
          int v27 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v26, "Vector Storage (uint8_t, growth)");
          memcpy(v27, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v26;
          a1[5] = v27;
          unsigned int v28 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v27[v16 + 1], &v27[v16], v28 - v16);
        uint64_t v42 = a1[5] + v16;
        *(unsigned char *)(v42 + 2) = BYTE2(v5);
        *(_WORD *)uint64_t v42 = v5;
        int v41 = 3;
        goto LABEL_47;
      case 3u:
        unsigned int v29 = v15 + 5;
        int v30 = *((_DWORD *)a1 + 8);
        if (v29 <= v30)
        {
          int v33 = (char *)a1[5];
          unsigned int v34 = v16;
        }
        else
        {
          if (v30 <= 1) {
            int v30 = 1;
          }
          int v31 = 2 * v30;
          if (v31 <= (int)v29) {
            uint64_t v32 = v29;
          }
          else {
            uint64_t v32 = v31;
          }
          int v33 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v32, "Vector Storage (uint8_t, growth)");
          memcpy(v33, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v32;
          a1[5] = v33;
          unsigned int v34 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v33[v16 + 1], &v33[v16], v34 - v16);
        *(_DWORD *)(a1[5] + v16) = v5;
        int v41 = 4;
LABEL_47:
        *((_DWORD *)a1 + 9) += v41;
        break;
      default:
        return result;
    }
  }
  return result;
}

void *serializeLayoutQualifierFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  uint64_t LayoutPairCount = glpLayoutQualifierNodeGetLayoutPairCount(a2);
  int v5 = LayoutPairCount;
  unsigned int v6 = (char)glp_serialized_integer32_control(LayoutPairCount);
  int v7 = *((_DWORD *)a1 + 8);
  uint64_t v8 = *((unsigned int *)a1 + 9);
  int v9 = v8 + 1;
  if ((int)v8 + 1 <= v7)
  {
    int v12 = (char *)a1[5];
    int v13 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v7 <= 1) {
      int v7 = 1;
    }
    int v10 = 2 * v7;
    if (v10 <= v9) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = v10;
    }
    int v12 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v11, "Vector Storage (uint8_t, growth)");
    memcpy(v12, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v11;
    a1[5] = v12;
    int v13 = *((_DWORD *)a1 + 9);
  }
  uint64_t result = memmove(&v12[v8 + 1], &v12[v8], (v13 - v8));
  *(unsigned char *)(a1[5] + v8) = v6;
  int v15 = *((_DWORD *)a1 + 9);
  unsigned int v16 = v15 + 1;
  *((_DWORD *)a1 + 9) = v15 + 1;
  if ((v6 & 0x80000000) != 0)
  {
    switch((v6 >> 1) & 7)
    {
      case 0u:
        unsigned int v17 = v15 + 2;
        int v18 = *((_DWORD *)a1 + 8);
        if (v17 <= v18)
        {
          uint64_t v21 = (char *)a1[5];
          unsigned int v22 = v16;
        }
        else
        {
          if (v18 <= 1) {
            int v18 = 1;
          }
          int v19 = 2 * v18;
          if (v19 <= (int)v17) {
            uint64_t v20 = v17;
          }
          else {
            uint64_t v20 = v19;
          }
          uint64_t v21 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v20, "Vector Storage (uint8_t, growth)");
          memcpy(v21, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v20;
          a1[5] = v21;
          unsigned int v22 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v21[v16 + 1], &v21[v16], v22 - v16);
        *(unsigned char *)(a1[5] + v16) = v5;
        int v41 = 1;
        goto LABEL_47;
      case 1u:
        unsigned int v35 = v15 + 3;
        int v36 = *((_DWORD *)a1 + 8);
        if (v35 <= v36)
        {
          int v39 = (char *)a1[5];
          unsigned int v40 = v16;
        }
        else
        {
          if (v36 <= 1) {
            int v36 = 1;
          }
          int v37 = 2 * v36;
          if (v37 <= (int)v35) {
            uint64_t v38 = v35;
          }
          else {
            uint64_t v38 = v37;
          }
          int v39 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v38, "Vector Storage (uint8_t, growth)");
          memcpy(v39, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v38;
          a1[5] = v39;
          unsigned int v40 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v39[v16 + 1], &v39[v16], v40 - v16);
        *(_WORD *)(a1[5] + v16) = v5;
        int v41 = 2;
        goto LABEL_47;
      case 2u:
        unsigned int v23 = v15 + 4;
        int v24 = *((_DWORD *)a1 + 8);
        if (v23 <= v24)
        {
          int v27 = (char *)a1[5];
          unsigned int v28 = v16;
        }
        else
        {
          if (v24 <= 1) {
            int v24 = 1;
          }
          int v25 = 2 * v24;
          if (v25 <= (int)v23) {
            uint64_t v26 = v23;
          }
          else {
            uint64_t v26 = v25;
          }
          int v27 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v26, "Vector Storage (uint8_t, growth)");
          memcpy(v27, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v26;
          a1[5] = v27;
          unsigned int v28 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v27[v16 + 1], &v27[v16], v28 - v16);
        uint64_t v42 = a1[5] + v16;
        *(unsigned char *)(v42 + 2) = BYTE2(v5);
        *(_WORD *)uint64_t v42 = v5;
        int v41 = 3;
        goto LABEL_47;
      case 3u:
        unsigned int v29 = v15 + 5;
        int v30 = *((_DWORD *)a1 + 8);
        if (v29 <= v30)
        {
          int v33 = (char *)a1[5];
          unsigned int v34 = v16;
        }
        else
        {
          if (v30 <= 1) {
            int v30 = 1;
          }
          int v31 = 2 * v30;
          if (v31 <= (int)v29) {
            uint64_t v32 = v29;
          }
          else {
            uint64_t v32 = v31;
          }
          int v33 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v32, "Vector Storage (uint8_t, growth)");
          memcpy(v33, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v32;
          a1[5] = v33;
          unsigned int v34 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v33[v16 + 1], &v33[v16], v34 - v16);
        *(_DWORD *)(a1[5] + v16) = v5;
        int v41 = 4;
LABEL_47:
        *((_DWORD *)a1 + 9) += v41;
        break;
      default:
        return result;
    }
  }
  return result;
}

void *serializeSubroutineTypeListFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  TypeCFIndex Count = glpSubroutineTypeListNodeGetTypeCount(a2);
  int v5 = TypeCount;
  unsigned int v6 = (char)glp_serialized_integer32_control(TypeCount);
  int v7 = *((_DWORD *)a1 + 8);
  uint64_t v8 = *((unsigned int *)a1 + 9);
  int v9 = v8 + 1;
  if ((int)v8 + 1 <= v7)
  {
    int v12 = (char *)a1[5];
    int v13 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v7 <= 1) {
      int v7 = 1;
    }
    int v10 = 2 * v7;
    if (v10 <= v9) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = v10;
    }
    int v12 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v11, "Vector Storage (uint8_t, growth)");
    memcpy(v12, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v11;
    a1[5] = v12;
    int v13 = *((_DWORD *)a1 + 9);
  }
  uint64_t result = memmove(&v12[v8 + 1], &v12[v8], (v13 - v8));
  *(unsigned char *)(a1[5] + v8) = v6;
  int v15 = *((_DWORD *)a1 + 9);
  unsigned int v16 = v15 + 1;
  *((_DWORD *)a1 + 9) = v15 + 1;
  if ((v6 & 0x80000000) != 0)
  {
    switch((v6 >> 1) & 7)
    {
      case 0u:
        unsigned int v17 = v15 + 2;
        int v18 = *((_DWORD *)a1 + 8);
        if (v17 <= v18)
        {
          uint64_t v21 = (char *)a1[5];
          unsigned int v22 = v16;
        }
        else
        {
          if (v18 <= 1) {
            int v18 = 1;
          }
          int v19 = 2 * v18;
          if (v19 <= (int)v17) {
            uint64_t v20 = v17;
          }
          else {
            uint64_t v20 = v19;
          }
          uint64_t v21 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v20, "Vector Storage (uint8_t, growth)");
          memcpy(v21, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v20;
          a1[5] = v21;
          unsigned int v22 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v21[v16 + 1], &v21[v16], v22 - v16);
        *(unsigned char *)(a1[5] + v16) = v5;
        int v41 = 1;
        goto LABEL_47;
      case 1u:
        unsigned int v35 = v15 + 3;
        int v36 = *((_DWORD *)a1 + 8);
        if (v35 <= v36)
        {
          int v39 = (char *)a1[5];
          unsigned int v40 = v16;
        }
        else
        {
          if (v36 <= 1) {
            int v36 = 1;
          }
          int v37 = 2 * v36;
          if (v37 <= (int)v35) {
            uint64_t v38 = v35;
          }
          else {
            uint64_t v38 = v37;
          }
          int v39 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v38, "Vector Storage (uint8_t, growth)");
          memcpy(v39, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v38;
          a1[5] = v39;
          unsigned int v40 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v39[v16 + 1], &v39[v16], v40 - v16);
        *(_WORD *)(a1[5] + v16) = v5;
        int v41 = 2;
        goto LABEL_47;
      case 2u:
        unsigned int v23 = v15 + 4;
        int v24 = *((_DWORD *)a1 + 8);
        if (v23 <= v24)
        {
          int v27 = (char *)a1[5];
          unsigned int v28 = v16;
        }
        else
        {
          if (v24 <= 1) {
            int v24 = 1;
          }
          int v25 = 2 * v24;
          if (v25 <= (int)v23) {
            uint64_t v26 = v23;
          }
          else {
            uint64_t v26 = v25;
          }
          int v27 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v26, "Vector Storage (uint8_t, growth)");
          memcpy(v27, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v26;
          a1[5] = v27;
          unsigned int v28 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v27[v16 + 1], &v27[v16], v28 - v16);
        uint64_t v42 = a1[5] + v16;
        *(unsigned char *)(v42 + 2) = BYTE2(v5);
        *(_WORD *)uint64_t v42 = v5;
        int v41 = 3;
        goto LABEL_47;
      case 3u:
        unsigned int v29 = v15 + 5;
        int v30 = *((_DWORD *)a1 + 8);
        if (v29 <= v30)
        {
          int v33 = (char *)a1[5];
          unsigned int v34 = v16;
        }
        else
        {
          if (v30 <= 1) {
            int v30 = 1;
          }
          int v31 = 2 * v30;
          if (v31 <= (int)v29) {
            uint64_t v32 = v29;
          }
          else {
            uint64_t v32 = v31;
          }
          int v33 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v32, "Vector Storage (uint8_t, growth)");
          memcpy(v33, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v32;
          a1[5] = v33;
          unsigned int v34 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v33[v16 + 1], &v33[v16], v34 - v16);
        *(_DWORD *)(a1[5] + v16) = v5;
        int v41 = 4;
LABEL_47:
        *((_DWORD *)a1 + 9) += v41;
        break;
      default:
        return result;
    }
  }
  return result;
}

void *serializeQualifierListFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  uint64_t QualifierCount = glpQualifierListNodeGetQualifierCount(a2);
  int v5 = QualifierCount;
  unsigned int v6 = (char)glp_serialized_integer32_control(QualifierCount);
  int v7 = *((_DWORD *)a1 + 8);
  uint64_t v8 = *((unsigned int *)a1 + 9);
  int v9 = v8 + 1;
  if ((int)v8 + 1 <= v7)
  {
    int v12 = (char *)a1[5];
    int v13 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v7 <= 1) {
      int v7 = 1;
    }
    int v10 = 2 * v7;
    if (v10 <= v9) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = v10;
    }
    int v12 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v11, "Vector Storage (uint8_t, growth)");
    memcpy(v12, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v11;
    a1[5] = v12;
    int v13 = *((_DWORD *)a1 + 9);
  }
  uint64_t result = memmove(&v12[v8 + 1], &v12[v8], (v13 - v8));
  *(unsigned char *)(a1[5] + v8) = v6;
  int v15 = *((_DWORD *)a1 + 9);
  unsigned int v16 = v15 + 1;
  *((_DWORD *)a1 + 9) = v15 + 1;
  if ((v6 & 0x80000000) != 0)
  {
    switch((v6 >> 1) & 7)
    {
      case 0u:
        unsigned int v17 = v15 + 2;
        int v18 = *((_DWORD *)a1 + 8);
        if (v17 <= v18)
        {
          uint64_t v21 = (char *)a1[5];
          unsigned int v22 = v16;
        }
        else
        {
          if (v18 <= 1) {
            int v18 = 1;
          }
          int v19 = 2 * v18;
          if (v19 <= (int)v17) {
            uint64_t v20 = v17;
          }
          else {
            uint64_t v20 = v19;
          }
          uint64_t v21 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v20, "Vector Storage (uint8_t, growth)");
          memcpy(v21, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v20;
          a1[5] = v21;
          unsigned int v22 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v21[v16 + 1], &v21[v16], v22 - v16);
        *(unsigned char *)(a1[5] + v16) = v5;
        int v41 = 1;
        goto LABEL_47;
      case 1u:
        unsigned int v35 = v15 + 3;
        int v36 = *((_DWORD *)a1 + 8);
        if (v35 <= v36)
        {
          int v39 = (char *)a1[5];
          unsigned int v40 = v16;
        }
        else
        {
          if (v36 <= 1) {
            int v36 = 1;
          }
          int v37 = 2 * v36;
          if (v37 <= (int)v35) {
            uint64_t v38 = v35;
          }
          else {
            uint64_t v38 = v37;
          }
          int v39 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v38, "Vector Storage (uint8_t, growth)");
          memcpy(v39, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v38;
          a1[5] = v39;
          unsigned int v40 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v39[v16 + 1], &v39[v16], v40 - v16);
        *(_WORD *)(a1[5] + v16) = v5;
        int v41 = 2;
        goto LABEL_47;
      case 2u:
        unsigned int v23 = v15 + 4;
        int v24 = *((_DWORD *)a1 + 8);
        if (v23 <= v24)
        {
          int v27 = (char *)a1[5];
          unsigned int v28 = v16;
        }
        else
        {
          if (v24 <= 1) {
            int v24 = 1;
          }
          int v25 = 2 * v24;
          if (v25 <= (int)v23) {
            uint64_t v26 = v23;
          }
          else {
            uint64_t v26 = v25;
          }
          int v27 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v26, "Vector Storage (uint8_t, growth)");
          memcpy(v27, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v26;
          a1[5] = v27;
          unsigned int v28 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v27[v16 + 1], &v27[v16], v28 - v16);
        uint64_t v42 = a1[5] + v16;
        *(unsigned char *)(v42 + 2) = BYTE2(v5);
        *(_WORD *)uint64_t v42 = v5;
        int v41 = 3;
        goto LABEL_47;
      case 3u:
        unsigned int v29 = v15 + 5;
        int v30 = *((_DWORD *)a1 + 8);
        if (v29 <= v30)
        {
          int v33 = (char *)a1[5];
          unsigned int v34 = v16;
        }
        else
        {
          if (v30 <= 1) {
            int v30 = 1;
          }
          int v31 = 2 * v30;
          if (v31 <= (int)v29) {
            uint64_t v32 = v29;
          }
          else {
            uint64_t v32 = v31;
          }
          int v33 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v32, "Vector Storage (uint8_t, growth)");
          memcpy(v33, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v32;
          a1[5] = v33;
          unsigned int v34 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v33[v16 + 1], &v33[v16], v34 - v16);
        *(_DWORD *)(a1[5] + v16) = v5;
        int v41 = 4;
LABEL_47:
        *((_DWORD *)a1 + 9) += v41;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t serializeGlobalTypeQualifierFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  Layout = (unint64_t *)glpGlobalTypeQualifierNodeGetLayout(a2);

  return serialize_GLPLayoutObject(a1, Layout);
}

uint64_t serializeLayoutPairFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  CFStringRef Identifier = (const char *)glpLayoutPairNodeGetIdentifier(a2);
  serialize_GLPString(a1, Identifier, v5);
  Valueuint64_t Kind = glpLayoutPairNodeGetValueKind(a2);
  int v7 = ValueKind;
  unsigned int v8 = (char)glp_serialized_integer32_control(ValueKind);
  int v9 = *((_DWORD *)a1 + 8);
  uint64_t v10 = *((unsigned int *)a1 + 9);
  int v11 = v10 + 1;
  if ((int)v10 + 1 <= v9)
  {
    uint64_t v14 = (char *)a1[5];
    int v15 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v9 <= 1) {
      int v9 = 1;
    }
    int v12 = 2 * v9;
    if (v12 <= v11) {
      uint64_t v13 = v11;
    }
    else {
      uint64_t v13 = v12;
    }
    uint64_t v14 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v13, "Vector Storage (uint8_t, growth)");
    memcpy(v14, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v13;
    a1[5] = v14;
    int v15 = *((_DWORD *)a1 + 9);
  }
  memmove(&v14[v10 + 1], &v14[v10], (v15 - v10));
  *(unsigned char *)(a1[5] + v10) = v8;
  int v16 = *((_DWORD *)a1 + 9);
  unsigned int v17 = v16 + 1;
  *((_DWORD *)a1 + 9) = v16 + 1;
  if ((v8 & 0x80000000) != 0)
  {
    switch((v8 >> 1) & 7)
    {
      case 0u:
        unsigned int v18 = v16 + 2;
        int v19 = *((_DWORD *)a1 + 8);
        if (v18 <= v19)
        {
          unsigned int v22 = (char *)a1[5];
          unsigned int v23 = v17;
        }
        else
        {
          if (v19 <= 1) {
            int v19 = 1;
          }
          int v20 = 2 * v19;
          if (v20 <= (int)v18) {
            uint64_t v21 = v18;
          }
          else {
            uint64_t v21 = v20;
          }
          unsigned int v22 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v21, "Vector Storage (uint8_t, growth)");
          memcpy(v22, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v21;
          a1[5] = v22;
          unsigned int v23 = *((_DWORD *)a1 + 9);
        }
        memmove(&v22[v17 + 1], &v22[v17], v23 - v17);
        *(unsigned char *)(a1[5] + v17) = v7;
        int v42 = 1;
        goto LABEL_47;
      case 1u:
        unsigned int v36 = v16 + 3;
        int v37 = *((_DWORD *)a1 + 8);
        if (v36 <= v37)
        {
          unsigned int v40 = (char *)a1[5];
          unsigned int v41 = v17;
        }
        else
        {
          if (v37 <= 1) {
            int v37 = 1;
          }
          int v38 = 2 * v37;
          if (v38 <= (int)v36) {
            uint64_t v39 = v36;
          }
          else {
            uint64_t v39 = v38;
          }
          unsigned int v40 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v39, "Vector Storage (uint8_t, growth)");
          memcpy(v40, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v39;
          a1[5] = v40;
          unsigned int v41 = *((_DWORD *)a1 + 9);
        }
        memmove(&v40[v17 + 1], &v40[v17], v41 - v17);
        *(_WORD *)(a1[5] + v17) = v7;
        int v42 = 2;
        goto LABEL_47;
      case 2u:
        unsigned int v24 = v16 + 4;
        int v25 = *((_DWORD *)a1 + 8);
        if (v24 <= v25)
        {
          unsigned int v28 = (char *)a1[5];
          unsigned int v29 = v17;
        }
        else
        {
          if (v25 <= 1) {
            int v25 = 1;
          }
          int v26 = 2 * v25;
          if (v26 <= (int)v24) {
            uint64_t v27 = v24;
          }
          else {
            uint64_t v27 = v26;
          }
          unsigned int v28 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v27, "Vector Storage (uint8_t, growth)");
          memcpy(v28, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v27;
          a1[5] = v28;
          unsigned int v29 = *((_DWORD *)a1 + 9);
        }
        memmove(&v28[v17 + 1], &v28[v17], v29 - v17);
        uint64_t v43 = a1[5] + v17;
        *(unsigned char *)(v43 + 2) = BYTE2(v7);
        *(_WORD *)uint64_t v43 = v7;
        int v42 = 3;
        goto LABEL_47;
      case 3u:
        unsigned int v30 = v16 + 5;
        int v31 = *((_DWORD *)a1 + 8);
        if (v30 <= v31)
        {
          unsigned int v34 = (char *)a1[5];
          unsigned int v35 = v17;
        }
        else
        {
          if (v31 <= 1) {
            int v31 = 1;
          }
          int v32 = 2 * v31;
          if (v32 <= (int)v30) {
            uint64_t v33 = v30;
          }
          else {
            uint64_t v33 = v32;
          }
          unsigned int v34 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v33, "Vector Storage (uint8_t, growth)");
          memcpy(v34, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v33;
          a1[5] = v34;
          unsigned int v35 = *((_DWORD *)a1 + 9);
        }
        memmove(&v34[v17 + 1], &v34[v17], v35 - v17);
        *(_DWORD *)(a1[5] + v17) = v7;
        int v42 = 4;
LABEL_47:
        *((_DWORD *)a1 + 9) += v42;
        break;
      default:
        break;
    }
  }
  int Value = glpLayoutPairNodeGetValue(a2);
  int v45 = *((_DWORD *)a1 + 8);
  uint64_t v46 = *((unsigned int *)a1 + 9);
  int v47 = v46 + 4;
  if ((int)v46 + 4 <= v45)
  {
    uint64_t v50 = (char *)a1[5];
    int v51 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v45 <= 1) {
      int v45 = 1;
    }
    int v48 = 2 * v45;
    if (v48 <= v47) {
      uint64_t v49 = v47;
    }
    else {
      uint64_t v49 = v48;
    }
    uint64_t v50 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v49, "Vector Storage (uint8_t, growth)");
    memcpy(v50, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v49;
    a1[5] = v50;
    int v51 = *((_DWORD *)a1 + 9);
  }
  memmove(&v50[v46 + 1], &v50[v46], (v51 - v46));
  *(_DWORD *)(a1[5] + v46) = Value;
  *((_DWORD *)a1 + 9) += 4;
  uint64_t String = (const char *)glpLayoutPairNodeGetString(a2);

  return serialize_GLPString(a1, String, v52);
}

void *serializeBlockFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  char NeedsNewScope = glpBlockNodeGetNeedsNewScope(a2);
  int v5 = *((_DWORD *)a1 + 8);
  uint64_t v6 = *((unsigned int *)a1 + 9);
  int v7 = v6 + 1;
  if ((int)v6 + 1 <= v5)
  {
    uint64_t v10 = (char *)a1[5];
    int v11 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v5 <= 1) {
      int v5 = 1;
    }
    int v8 = 2 * v5;
    if (v8 <= v7) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = v8;
    }
    uint64_t v10 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v9, "Vector Storage (uint8_t, growth)");
    memcpy(v10, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v9;
    a1[5] = v10;
    int v11 = *((_DWORD *)a1 + 9);
  }
  memmove(&v10[v6 + 1], &v10[v6], (v11 - v6));
  *(unsigned char *)(a1[5] + v6) = NeedsNewScope;
  ++*((_DWORD *)a1 + 9);
  uint64_t StatementCount = glpBlockNodeGetStatementCount(a2);
  int v13 = StatementCount;
  unsigned int v14 = (char)glp_serialized_integer32_control(StatementCount);
  int v15 = *((_DWORD *)a1 + 8);
  uint64_t v16 = *((unsigned int *)a1 + 9);
  int v17 = v16 + 1;
  if ((int)v16 + 1 <= v15)
  {
    int v20 = (char *)a1[5];
    int v21 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v15 <= 1) {
      int v15 = 1;
    }
    int v18 = 2 * v15;
    if (v18 <= v17) {
      uint64_t v19 = v17;
    }
    else {
      uint64_t v19 = v18;
    }
    int v20 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v19, "Vector Storage (uint8_t, growth)");
    memcpy(v20, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v19;
    a1[5] = v20;
    int v21 = *((_DWORD *)a1 + 9);
  }
  uint64_t result = memmove(&v20[v16 + 1], &v20[v16], (v21 - v16));
  *(unsigned char *)(a1[5] + v16) = v14;
  int v23 = *((_DWORD *)a1 + 9);
  unsigned int v24 = v23 + 1;
  *((_DWORD *)a1 + 9) = v23 + 1;
  if ((v14 & 0x80000000) != 0)
  {
    switch((v14 >> 1) & 7)
    {
      case 0u:
        unsigned int v25 = v23 + 2;
        int v26 = *((_DWORD *)a1 + 8);
        if (v25 <= v26)
        {
          unsigned int v29 = (char *)a1[5];
          unsigned int v30 = v24;
        }
        else
        {
          if (v26 <= 1) {
            int v26 = 1;
          }
          int v27 = 2 * v26;
          if (v27 <= (int)v25) {
            uint64_t v28 = v25;
          }
          else {
            uint64_t v28 = v27;
          }
          unsigned int v29 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v28, "Vector Storage (uint8_t, growth)");
          memcpy(v29, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v28;
          a1[5] = v29;
          unsigned int v30 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v29[v24 + 1], &v29[v24], v30 - v24);
        *(unsigned char *)(a1[5] + v24) = v13;
        int v49 = 1;
        goto LABEL_55;
      case 1u:
        unsigned int v43 = v23 + 3;
        int v44 = *((_DWORD *)a1 + 8);
        if (v43 <= v44)
        {
          int v47 = (char *)a1[5];
          unsigned int v48 = v24;
        }
        else
        {
          if (v44 <= 1) {
            int v44 = 1;
          }
          int v45 = 2 * v44;
          if (v45 <= (int)v43) {
            uint64_t v46 = v43;
          }
          else {
            uint64_t v46 = v45;
          }
          int v47 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v46, "Vector Storage (uint8_t, growth)");
          memcpy(v47, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v46;
          a1[5] = v47;
          unsigned int v48 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v47[v24 + 1], &v47[v24], v48 - v24);
        *(_WORD *)(a1[5] + v24) = v13;
        int v49 = 2;
        goto LABEL_55;
      case 2u:
        unsigned int v31 = v23 + 4;
        int v32 = *((_DWORD *)a1 + 8);
        if (v31 <= v32)
        {
          unsigned int v35 = (char *)a1[5];
          unsigned int v36 = v24;
        }
        else
        {
          if (v32 <= 1) {
            int v32 = 1;
          }
          int v33 = 2 * v32;
          if (v33 <= (int)v31) {
            uint64_t v34 = v31;
          }
          else {
            uint64_t v34 = v33;
          }
          unsigned int v35 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v34, "Vector Storage (uint8_t, growth)");
          memcpy(v35, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v34;
          a1[5] = v35;
          unsigned int v36 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v35[v24 + 1], &v35[v24], v36 - v24);
        uint64_t v50 = a1[5] + v24;
        *(unsigned char *)(v50 + 2) = BYTE2(v13);
        *(_WORD *)uint64_t v50 = v13;
        int v49 = 3;
        goto LABEL_55;
      case 3u:
        unsigned int v37 = v23 + 5;
        int v38 = *((_DWORD *)a1 + 8);
        if (v37 <= v38)
        {
          unsigned int v41 = (char *)a1[5];
          unsigned int v42 = v24;
        }
        else
        {
          if (v38 <= 1) {
            int v38 = 1;
          }
          int v39 = 2 * v38;
          if (v39 <= (int)v37) {
            uint64_t v40 = v37;
          }
          else {
            uint64_t v40 = v39;
          }
          unsigned int v41 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v40, "Vector Storage (uint8_t, growth)");
          memcpy(v41, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v40;
          a1[5] = v41;
          unsigned int v42 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v41[v24 + 1], &v41[v24], v42 - v24);
        *(_DWORD *)(a1[5] + v24) = v13;
        int v49 = 4;
LABEL_55:
        *((_DWORD *)a1 + 9) += v49;
        break;
      default:
        return result;
    }
  }
  return result;
}

void *serializeCaseStatementFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  char IsStray = glpCaseStatementNodeGetIsStray(a2);
  int v5 = *((_DWORD *)a1 + 8);
  uint64_t v6 = *((unsigned int *)a1 + 9);
  int v7 = v6 + 1;
  if ((int)v6 + 1 <= v5)
  {
    uint64_t v10 = (char *)a1[5];
    int v11 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v5 <= 1) {
      int v5 = 1;
    }
    int v8 = 2 * v5;
    if (v8 <= v7) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = v8;
    }
    uint64_t v10 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v9, "Vector Storage (uint8_t, growth)");
    memcpy(v10, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v9;
    a1[5] = v10;
    int v11 = *((_DWORD *)a1 + 9);
  }
  uint64_t result = memmove(&v10[v6 + 1], &v10[v6], (v11 - v6));
  *(unsigned char *)(a1[5] + v6) = IsStray;
  ++*((_DWORD *)a1 + 9);
  return result;
}

void *serializeDefaultStatementFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  char IsStray = glpDefaultStatementNodeGetIsStray(a2);
  int v5 = *((_DWORD *)a1 + 8);
  uint64_t v6 = *((unsigned int *)a1 + 9);
  int v7 = v6 + 1;
  if ((int)v6 + 1 <= v5)
  {
    uint64_t v10 = (char *)a1[5];
    int v11 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v5 <= 1) {
      int v5 = 1;
    }
    int v8 = 2 * v5;
    if (v8 <= v7) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = v8;
    }
    uint64_t v10 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v9, "Vector Storage (uint8_t, growth)");
    memcpy(v10, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v9;
    a1[5] = v10;
    int v11 = *((_DWORD *)a1 + 9);
  }
  uint64_t result = memmove(&v10[v6 + 1], &v10[v6], (v11 - v6));
  *(unsigned char *)(a1[5] + v6) = IsStray;
  ++*((_DWORD *)a1 + 9);
  return result;
}

uint64_t serializeReturnStatementFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  uint64_t Extra = glpReturnStatementNodeGetExtra(a2);

  return serialize_GLPFunctionObject(a1, Extra);
}

void *serializeTopLevelFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  uint64_t DefCount = glpTopLevelNodeGetDefCount(a2);
  int v5 = DefCount;
  unsigned int v6 = (char)glp_serialized_integer32_control(DefCount);
  int v7 = *((_DWORD *)a1 + 8);
  uint64_t v8 = *((unsigned int *)a1 + 9);
  int v9 = v8 + 1;
  if ((int)v8 + 1 <= v7)
  {
    int v12 = (char *)a1[5];
    int v13 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v7 <= 1) {
      int v7 = 1;
    }
    int v10 = 2 * v7;
    if (v10 <= v9) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = v10;
    }
    int v12 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v11, "Vector Storage (uint8_t, growth)");
    memcpy(v12, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v11;
    a1[5] = v12;
    int v13 = *((_DWORD *)a1 + 9);
  }
  uint64_t result = memmove(&v12[v8 + 1], &v12[v8], (v13 - v8));
  *(unsigned char *)(a1[5] + v8) = v6;
  int v15 = *((_DWORD *)a1 + 9);
  unsigned int v16 = v15 + 1;
  *((_DWORD *)a1 + 9) = v15 + 1;
  if ((v6 & 0x80000000) != 0)
  {
    switch((v6 >> 1) & 7)
    {
      case 0u:
        unsigned int v17 = v15 + 2;
        int v18 = *((_DWORD *)a1 + 8);
        if (v17 <= v18)
        {
          int v21 = (char *)a1[5];
          unsigned int v22 = v16;
        }
        else
        {
          if (v18 <= 1) {
            int v18 = 1;
          }
          int v19 = 2 * v18;
          if (v19 <= (int)v17) {
            uint64_t v20 = v17;
          }
          else {
            uint64_t v20 = v19;
          }
          int v21 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v20, "Vector Storage (uint8_t, growth)");
          memcpy(v21, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v20;
          a1[5] = v21;
          unsigned int v22 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v21[v16 + 1], &v21[v16], v22 - v16);
        *(unsigned char *)(a1[5] + v16) = v5;
        int v41 = 1;
        goto LABEL_47;
      case 1u:
        unsigned int v35 = v15 + 3;
        int v36 = *((_DWORD *)a1 + 8);
        if (v35 <= v36)
        {
          int v39 = (char *)a1[5];
          unsigned int v40 = v16;
        }
        else
        {
          if (v36 <= 1) {
            int v36 = 1;
          }
          int v37 = 2 * v36;
          if (v37 <= (int)v35) {
            uint64_t v38 = v35;
          }
          else {
            uint64_t v38 = v37;
          }
          int v39 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v38, "Vector Storage (uint8_t, growth)");
          memcpy(v39, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v38;
          a1[5] = v39;
          unsigned int v40 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v39[v16 + 1], &v39[v16], v40 - v16);
        *(_WORD *)(a1[5] + v16) = v5;
        int v41 = 2;
        goto LABEL_47;
      case 2u:
        unsigned int v23 = v15 + 4;
        int v24 = *((_DWORD *)a1 + 8);
        if (v23 <= v24)
        {
          int v27 = (char *)a1[5];
          unsigned int v28 = v16;
        }
        else
        {
          if (v24 <= 1) {
            int v24 = 1;
          }
          int v25 = 2 * v24;
          if (v25 <= (int)v23) {
            uint64_t v26 = v23;
          }
          else {
            uint64_t v26 = v25;
          }
          int v27 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v26, "Vector Storage (uint8_t, growth)");
          memcpy(v27, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v26;
          a1[5] = v27;
          unsigned int v28 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v27[v16 + 1], &v27[v16], v28 - v16);
        uint64_t v42 = a1[5] + v16;
        *(unsigned char *)(v42 + 2) = BYTE2(v5);
        *(_WORD *)uint64_t v42 = v5;
        int v41 = 3;
        goto LABEL_47;
      case 3u:
        unsigned int v29 = v15 + 5;
        int v30 = *((_DWORD *)a1 + 8);
        if (v29 <= v30)
        {
          int v33 = (char *)a1[5];
          unsigned int v34 = v16;
        }
        else
        {
          if (v30 <= 1) {
            int v30 = 1;
          }
          int v31 = 2 * v30;
          if (v31 <= (int)v29) {
            uint64_t v32 = v29;
          }
          else {
            uint64_t v32 = v31;
          }
          int v33 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v32, "Vector Storage (uint8_t, growth)");
          memcpy(v33, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v32;
          a1[5] = v33;
          unsigned int v34 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v33[v16 + 1], &v33[v16], v34 - v16);
        *(_DWORD *)(a1[5] + v16) = v5;
        int v41 = 4;
LABEL_47:
        *((_DWORD *)a1 + 9) += v41;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t serializeRawCallFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  uint64_t v4 = (const char *)glpRawCallNodeGetName(a2);
  serialize_GLPString(a1, v4, v5);
  uint64_t v6 = glpRawCallNodeGetExtra(a2);

  return serialize_GLPFunctionObject(a1, v6);
}

uint64_t serializeSubroutineRawCallFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  unint64_t v4 = glpSubroutineRawCallNodeGetExtra(a2);

  return serialize_GLPSubroutineUniformObject(a1, v4);
}

void *serializeOffsetFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  unint64_t Extra = glpOffsetNodeGetExtra(a2);
  serialize_pointer(a1, Extra);
  uint64_t Swizzle = glpOffsetNodeGetSwizzle(a2);
  int v6 = Swizzle;
  unsigned int v7 = (char)glp_serialized_integer32_control(Swizzle);
  int v8 = *((_DWORD *)a1 + 8);
  uint64_t v9 = *((unsigned int *)a1 + 9);
  int v10 = v9 + 1;
  if ((int)v9 + 1 <= v8)
  {
    int v13 = (char *)a1[5];
    int v14 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v8 <= 1) {
      int v8 = 1;
    }
    int v11 = 2 * v8;
    if (v11 <= v10) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = v11;
    }
    int v13 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v12, "Vector Storage (uint8_t, growth)");
    memcpy(v13, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v12;
    a1[5] = v13;
    int v14 = *((_DWORD *)a1 + 9);
  }
  memmove(&v13[v9 + 1], &v13[v9], (v14 - v9));
  *(unsigned char *)(a1[5] + v9) = v7;
  int v15 = *((_DWORD *)a1 + 9);
  unsigned int v16 = v15 + 1;
  *((_DWORD *)a1 + 9) = v15 + 1;
  if ((v7 & 0x80000000) != 0)
  {
    switch((v7 >> 1) & 7)
    {
      case 0u:
        unsigned int v17 = v15 + 2;
        int v18 = *((_DWORD *)a1 + 8);
        if (v17 <= v18)
        {
          int v21 = (char *)a1[5];
          unsigned int v22 = v16;
        }
        else
        {
          if (v18 <= 1) {
            int v18 = 1;
          }
          int v19 = 2 * v18;
          if (v19 <= (int)v17) {
            uint64_t v20 = v17;
          }
          else {
            uint64_t v20 = v19;
          }
          int v21 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v20, "Vector Storage (uint8_t, growth)");
          memcpy(v21, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v20;
          a1[5] = v21;
          unsigned int v22 = *((_DWORD *)a1 + 9);
        }
        memmove(&v21[v16 + 1], &v21[v16], v22 - v16);
        *(unsigned char *)(a1[5] + v16) = v6;
        int v41 = 1;
        goto LABEL_47;
      case 1u:
        unsigned int v35 = v15 + 3;
        int v36 = *((_DWORD *)a1 + 8);
        if (v35 <= v36)
        {
          int v39 = (char *)a1[5];
          unsigned int v40 = v16;
        }
        else
        {
          if (v36 <= 1) {
            int v36 = 1;
          }
          int v37 = 2 * v36;
          if (v37 <= (int)v35) {
            uint64_t v38 = v35;
          }
          else {
            uint64_t v38 = v37;
          }
          int v39 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v38, "Vector Storage (uint8_t, growth)");
          memcpy(v39, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v38;
          a1[5] = v39;
          unsigned int v40 = *((_DWORD *)a1 + 9);
        }
        memmove(&v39[v16 + 1], &v39[v16], v40 - v16);
        *(_WORD *)(a1[5] + v16) = v6;
        int v41 = 2;
        goto LABEL_47;
      case 2u:
        unsigned int v23 = v15 + 4;
        int v24 = *((_DWORD *)a1 + 8);
        if (v23 <= v24)
        {
          int v27 = (char *)a1[5];
          unsigned int v28 = v16;
        }
        else
        {
          if (v24 <= 1) {
            int v24 = 1;
          }
          int v25 = 2 * v24;
          if (v25 <= (int)v23) {
            uint64_t v26 = v23;
          }
          else {
            uint64_t v26 = v25;
          }
          int v27 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v26, "Vector Storage (uint8_t, growth)");
          memcpy(v27, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v26;
          a1[5] = v27;
          unsigned int v28 = *((_DWORD *)a1 + 9);
        }
        memmove(&v27[v16 + 1], &v27[v16], v28 - v16);
        uint64_t v42 = a1[5] + v16;
        *(unsigned char *)(v42 + 2) = BYTE2(v6);
        *(_WORD *)uint64_t v42 = v6;
        int v41 = 3;
        goto LABEL_47;
      case 3u:
        unsigned int v29 = v15 + 5;
        int v30 = *((_DWORD *)a1 + 8);
        if (v29 <= v30)
        {
          int v33 = (char *)a1[5];
          unsigned int v34 = v16;
        }
        else
        {
          if (v30 <= 1) {
            int v30 = 1;
          }
          int v31 = 2 * v30;
          if (v31 <= (int)v29) {
            uint64_t v32 = v29;
          }
          else {
            uint64_t v32 = v31;
          }
          int v33 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v32, "Vector Storage (uint8_t, growth)");
          memcpy(v33, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v32;
          a1[5] = v33;
          unsigned int v34 = *((_DWORD *)a1 + 9);
        }
        memmove(&v33[v16 + 1], &v33[v16], v34 - v16);
        *(_DWORD *)(a1[5] + v16) = v6;
        int v41 = 4;
LABEL_47:
        *((_DWORD *)a1 + 9) += v41;
        break;
      default:
        break;
    }
  }
  PreSwizzleuint64_t PrimitiveType = glpOffsetNodeGetPreSwizzlePrimitiveType(a2);
  int v44 = PreSwizzlePrimitiveType;
  unsigned int v45 = (char)glp_serialized_integer32_control(PreSwizzlePrimitiveType);
  int v46 = *((_DWORD *)a1 + 8);
  uint64_t v47 = *((unsigned int *)a1 + 9);
  int v48 = v47 + 1;
  if ((int)v47 + 1 <= v46)
  {
    int v51 = (char *)a1[5];
    int v52 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v46 <= 1) {
      int v46 = 1;
    }
    int v49 = 2 * v46;
    if (v49 <= v48) {
      uint64_t v50 = v48;
    }
    else {
      uint64_t v50 = v49;
    }
    int v51 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v50, "Vector Storage (uint8_t, growth)");
    memcpy(v51, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v50;
    a1[5] = v51;
    int v52 = *((_DWORD *)a1 + 9);
  }
  memmove(&v51[v47 + 1], &v51[v47], (v52 - v47));
  *(unsigned char *)(a1[5] + v47) = v45;
  int v53 = *((_DWORD *)a1 + 9);
  unsigned int v54 = v53 + 1;
  *((_DWORD *)a1 + 9) = v53 + 1;
  if ((v45 & 0x80000000) != 0)
  {
    switch((v45 >> 1) & 7)
    {
      case 0u:
        unsigned int v55 = v53 + 2;
        int v56 = *((_DWORD *)a1 + 8);
        if (v55 <= v56)
        {
          unsigned int v59 = (char *)a1[5];
          unsigned int v60 = v54;
        }
        else
        {
          if (v56 <= 1) {
            int v56 = 1;
          }
          int v57 = 2 * v56;
          if (v57 <= (int)v55) {
            uint64_t v58 = v55;
          }
          else {
            uint64_t v58 = v57;
          }
          unsigned int v59 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v58, "Vector Storage (uint8_t, growth)");
          memcpy(v59, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v58;
          a1[5] = v59;
          unsigned int v60 = *((_DWORD *)a1 + 9);
        }
        memmove(&v59[v54 + 1], &v59[v54], v60 - v54);
        *(unsigned char *)(a1[5] + v54) = v44;
        int v79 = 1;
        goto LABEL_94;
      case 1u:
        unsigned int v73 = v53 + 3;
        int v74 = *((_DWORD *)a1 + 8);
        if (v73 <= v74)
        {
          int v77 = (char *)a1[5];
          unsigned int v78 = v54;
        }
        else
        {
          if (v74 <= 1) {
            int v74 = 1;
          }
          int v75 = 2 * v74;
          if (v75 <= (int)v73) {
            uint64_t v76 = v73;
          }
          else {
            uint64_t v76 = v75;
          }
          int v77 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v76, "Vector Storage (uint8_t, growth)");
          memcpy(v77, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v76;
          a1[5] = v77;
          unsigned int v78 = *((_DWORD *)a1 + 9);
        }
        memmove(&v77[v54 + 1], &v77[v54], v78 - v54);
        *(_WORD *)(a1[5] + v54) = v44;
        int v79 = 2;
        goto LABEL_94;
      case 2u:
        unsigned int v61 = v53 + 4;
        int v62 = *((_DWORD *)a1 + 8);
        if (v61 <= v62)
        {
          uint64_t v65 = (char *)a1[5];
          unsigned int v66 = v54;
        }
        else
        {
          if (v62 <= 1) {
            int v62 = 1;
          }
          int v63 = 2 * v62;
          if (v63 <= (int)v61) {
            uint64_t v64 = v61;
          }
          else {
            uint64_t v64 = v63;
          }
          uint64_t v65 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v64, "Vector Storage (uint8_t, growth)");
          memcpy(v65, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v64;
          a1[5] = v65;
          unsigned int v66 = *((_DWORD *)a1 + 9);
        }
        memmove(&v65[v54 + 1], &v65[v54], v66 - v54);
        uint64_t v80 = a1[5] + v54;
        *(unsigned char *)(v80 + 2) = BYTE2(v44);
        *(_WORD *)uint64_t v80 = v44;
        int v79 = 3;
        goto LABEL_94;
      case 3u:
        unsigned int v67 = v53 + 5;
        int v68 = *((_DWORD *)a1 + 8);
        if (v67 <= v68)
        {
          uint64_t v71 = (char *)a1[5];
          unsigned int v72 = v54;
        }
        else
        {
          if (v68 <= 1) {
            int v68 = 1;
          }
          int v69 = 2 * v68;
          if (v69 <= (int)v67) {
            uint64_t v70 = v67;
          }
          else {
            uint64_t v70 = v69;
          }
          uint64_t v71 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v70, "Vector Storage (uint8_t, growth)");
          memcpy(v71, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v70;
          a1[5] = v71;
          unsigned int v72 = *((_DWORD *)a1 + 9);
        }
        memmove(&v71[v54 + 1], &v71[v54], v72 - v54);
        *(_DWORD *)(a1[5] + v54) = v44;
        int v79 = 4;
LABEL_94:
        *((_DWORD *)a1 + 9) += v79;
        break;
      default:
        break;
    }
  }
  uint64_t CompStride = glpOffsetNodeGetCompStride(a2);
  int v82 = CompStride;
  unsigned int v83 = (char)glp_serialized_integer32_control(CompStride);
  int v84 = *((_DWORD *)a1 + 8);
  uint64_t v85 = *((unsigned int *)a1 + 9);
  int v86 = v85 + 1;
  if ((int)v85 + 1 <= v84)
  {
    int v89 = (char *)a1[5];
    int v90 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v84 <= 1) {
      int v84 = 1;
    }
    int v87 = 2 * v84;
    if (v87 <= v86) {
      uint64_t v88 = v86;
    }
    else {
      uint64_t v88 = v87;
    }
    int v89 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v88, "Vector Storage (uint8_t, growth)");
    memcpy(v89, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v88;
    a1[5] = v89;
    int v90 = *((_DWORD *)a1 + 9);
  }
  uint64_t result = memmove(&v89[v85 + 1], &v89[v85], (v90 - v85));
  *(unsigned char *)(a1[5] + v85) = v83;
  int v92 = *((_DWORD *)a1 + 9);
  unsigned int v93 = v92 + 1;
  *((_DWORD *)a1 + 9) = v92 + 1;
  if ((v83 & 0x80000000) != 0)
  {
    switch((v83 >> 1) & 7)
    {
      case 0u:
        unsigned int v94 = v92 + 2;
        int v95 = *((_DWORD *)a1 + 8);
        if (v94 <= v95)
        {
          int v98 = (char *)a1[5];
          unsigned int v99 = v93;
        }
        else
        {
          if (v95 <= 1) {
            int v95 = 1;
          }
          int v96 = 2 * v95;
          if (v96 <= (int)v94) {
            uint64_t v97 = v94;
          }
          else {
            uint64_t v97 = v96;
          }
          int v98 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v97, "Vector Storage (uint8_t, growth)");
          memcpy(v98, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v97;
          a1[5] = v98;
          unsigned int v99 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v98[v93 + 1], &v98[v93], v99 - v93);
        *(unsigned char *)(a1[5] + v93) = v82;
        int v118 = 1;
        goto LABEL_141;
      case 1u:
        unsigned int v112 = v92 + 3;
        int v113 = *((_DWORD *)a1 + 8);
        if (v112 <= v113)
        {
          unsigned int v116 = (char *)a1[5];
          unsigned int v117 = v93;
        }
        else
        {
          if (v113 <= 1) {
            int v113 = 1;
          }
          int v114 = 2 * v113;
          if (v114 <= (int)v112) {
            uint64_t v115 = v112;
          }
          else {
            uint64_t v115 = v114;
          }
          unsigned int v116 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v115, "Vector Storage (uint8_t, growth)");
          memcpy(v116, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v115;
          a1[5] = v116;
          unsigned int v117 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v116[v93 + 1], &v116[v93], v117 - v93);
        *(_WORD *)(a1[5] + v93) = v82;
        int v118 = 2;
        goto LABEL_141;
      case 2u:
        unsigned int v100 = v92 + 4;
        int v101 = *((_DWORD *)a1 + 8);
        if (v100 <= v101)
        {
          unsigned int v104 = (char *)a1[5];
          unsigned int v105 = v93;
        }
        else
        {
          if (v101 <= 1) {
            int v101 = 1;
          }
          int v102 = 2 * v101;
          if (v102 <= (int)v100) {
            uint64_t v103 = v100;
          }
          else {
            uint64_t v103 = v102;
          }
          unsigned int v104 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v103, "Vector Storage (uint8_t, growth)");
          memcpy(v104, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v103;
          a1[5] = v104;
          unsigned int v105 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v104[v93 + 1], &v104[v93], v105 - v93);
        uint64_t v119 = a1[5] + v93;
        *(unsigned char *)(v119 + 2) = BYTE2(v82);
        *(_WORD *)uint64_t v119 = v82;
        int v118 = 3;
        goto LABEL_141;
      case 3u:
        unsigned int v106 = v92 + 5;
        int v107 = *((_DWORD *)a1 + 8);
        if (v106 <= v107)
        {
          unsigned int v110 = (char *)a1[5];
          unsigned int v111 = v93;
        }
        else
        {
          if (v107 <= 1) {
            int v107 = 1;
          }
          int v108 = 2 * v107;
          if (v108 <= (int)v106) {
            uint64_t v109 = v106;
          }
          else {
            uint64_t v109 = v108;
          }
          unsigned int v110 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v109, "Vector Storage (uint8_t, growth)");
          memcpy(v110, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v109;
          a1[5] = v110;
          unsigned int v111 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v110[v93 + 1], &v110[v93], v111 - v93);
        *(_DWORD *)(a1[5] + v93) = v82;
        int v118 = 4;
LABEL_141:
        *((_DWORD *)a1 + 9) += v118;
        break;
      default:
        return result;
    }
  }
  return result;
}

void *serializeLValueFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  uint64_t VariableName = (const char *)glpLValueNodeGetVariableName(a2);
  serialize_GLPString(a1, VariableName, v5);
  Variableunint64_t Extra = glpLValueNodeGetVariableExtra(a2);
  serialize_GLPVariableObject(a1, VariableExtra);
  uint64_t IndexLevel = glpLValueNodeGetIndexLevel(a2);
  int v8 = IndexLevel;
  unsigned int v9 = (char)glp_serialized_integer32_control(IndexLevel);
  int v10 = *((_DWORD *)a1 + 8);
  uint64_t v11 = *((unsigned int *)a1 + 9);
  int v12 = v11 + 1;
  if ((int)v11 + 1 <= v10)
  {
    int v15 = (char *)a1[5];
    int v16 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v10 <= 1) {
      int v10 = 1;
    }
    int v13 = 2 * v10;
    if (v13 <= v12) {
      uint64_t v14 = v12;
    }
    else {
      uint64_t v14 = v13;
    }
    int v15 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v14, "Vector Storage (uint8_t, growth)");
    memcpy(v15, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v14;
    a1[5] = v15;
    int v16 = *((_DWORD *)a1 + 9);
  }
  uint64_t result = memmove(&v15[v11 + 1], &v15[v11], (v16 - v11));
  *(unsigned char *)(a1[5] + v11) = v9;
  int v18 = *((_DWORD *)a1 + 9);
  unsigned int v19 = v18 + 1;
  *((_DWORD *)a1 + 9) = v18 + 1;
  if ((v9 & 0x80000000) != 0)
  {
    switch((v9 >> 1) & 7)
    {
      case 0u:
        unsigned int v20 = v18 + 2;
        int v21 = *((_DWORD *)a1 + 8);
        if (v20 <= v21)
        {
          int v24 = (char *)a1[5];
          unsigned int v25 = v19;
        }
        else
        {
          if (v21 <= 1) {
            int v21 = 1;
          }
          int v22 = 2 * v21;
          if (v22 <= (int)v20) {
            uint64_t v23 = v20;
          }
          else {
            uint64_t v23 = v22;
          }
          int v24 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v23, "Vector Storage (uint8_t, growth)");
          memcpy(v24, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v23;
          a1[5] = v24;
          unsigned int v25 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v24[v19 + 1], &v24[v19], v25 - v19);
        *(unsigned char *)(a1[5] + v19) = v8;
        int v44 = 1;
        goto LABEL_47;
      case 1u:
        unsigned int v38 = v18 + 3;
        int v39 = *((_DWORD *)a1 + 8);
        if (v38 <= v39)
        {
          uint64_t v42 = (char *)a1[5];
          unsigned int v43 = v19;
        }
        else
        {
          if (v39 <= 1) {
            int v39 = 1;
          }
          int v40 = 2 * v39;
          if (v40 <= (int)v38) {
            uint64_t v41 = v38;
          }
          else {
            uint64_t v41 = v40;
          }
          uint64_t v42 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v41, "Vector Storage (uint8_t, growth)");
          memcpy(v42, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v41;
          a1[5] = v42;
          unsigned int v43 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v42[v19 + 1], &v42[v19], v43 - v19);
        *(_WORD *)(a1[5] + v19) = v8;
        int v44 = 2;
        goto LABEL_47;
      case 2u:
        unsigned int v26 = v18 + 4;
        int v27 = *((_DWORD *)a1 + 8);
        if (v26 <= v27)
        {
          int v30 = (char *)a1[5];
          unsigned int v31 = v19;
        }
        else
        {
          if (v27 <= 1) {
            int v27 = 1;
          }
          int v28 = 2 * v27;
          if (v28 <= (int)v26) {
            uint64_t v29 = v26;
          }
          else {
            uint64_t v29 = v28;
          }
          int v30 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v29, "Vector Storage (uint8_t, growth)");
          memcpy(v30, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v29;
          a1[5] = v30;
          unsigned int v31 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v30[v19 + 1], &v30[v19], v31 - v19);
        uint64_t v45 = a1[5] + v19;
        *(unsigned char *)(v45 + 2) = BYTE2(v8);
        *(_WORD *)uint64_t v45 = v8;
        int v44 = 3;
        goto LABEL_47;
      case 3u:
        unsigned int v32 = v18 + 5;
        int v33 = *((_DWORD *)a1 + 8);
        if (v32 <= v33)
        {
          int v36 = (char *)a1[5];
          unsigned int v37 = v19;
        }
        else
        {
          if (v33 <= 1) {
            int v33 = 1;
          }
          int v34 = 2 * v33;
          if (v34 <= (int)v32) {
            uint64_t v35 = v32;
          }
          else {
            uint64_t v35 = v34;
          }
          int v36 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v35, "Vector Storage (uint8_t, growth)");
          memcpy(v36, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v35;
          a1[5] = v36;
          unsigned int v37 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v36[v19 + 1], &v36[v19], v37 - v19);
        *(_DWORD *)(a1[5] + v19) = v8;
        int v44 = 4;
LABEL_47:
        *((_DWORD *)a1 + 9) += v44;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t serializeIBPartialDerefFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  unint64_t Ib = glpIBPartialDerefNodeGetIb(a2);

  return serialize_GLPInterfaceBlockObject(a1, Ib);
}

void *serializePPStreamOpFields(void *a1, uint64_t a2)
{
  serializeCallFields(a1, a2);
  Returnuint64_t PrimitiveType = glpPPStreamOpNodeGetReturnPrimitiveType(a2);
  int v5 = ReturnPrimitiveType;
  unsigned int v6 = (char)glp_serialized_integer32_control(ReturnPrimitiveType);
  int v7 = *((_DWORD *)a1 + 8);
  uint64_t v8 = *((unsigned int *)a1 + 9);
  int v9 = v8 + 1;
  if ((int)v8 + 1 <= v7)
  {
    int v12 = (char *)a1[5];
    int v13 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v7 <= 1) {
      int v7 = 1;
    }
    int v10 = 2 * v7;
    if (v10 <= v9) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = v10;
    }
    int v12 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v11, "Vector Storage (uint8_t, growth)");
    memcpy(v12, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v11;
    a1[5] = v12;
    int v13 = *((_DWORD *)a1 + 9);
  }
  memmove(&v12[v8 + 1], &v12[v8], (v13 - v8));
  *(unsigned char *)(a1[5] + v8) = v6;
  int v14 = *((_DWORD *)a1 + 9);
  unsigned int v15 = v14 + 1;
  *((_DWORD *)a1 + 9) = v14 + 1;
  if ((v6 & 0x80000000) != 0)
  {
    switch((v6 >> 1) & 7)
    {
      case 0u:
        unsigned int v16 = v14 + 2;
        int v17 = *((_DWORD *)a1 + 8);
        if (v16 <= v17)
        {
          unsigned int v20 = (char *)a1[5];
          unsigned int v21 = v15;
        }
        else
        {
          if (v17 <= 1) {
            int v17 = 1;
          }
          int v18 = 2 * v17;
          if (v18 <= (int)v16) {
            uint64_t v19 = v16;
          }
          else {
            uint64_t v19 = v18;
          }
          unsigned int v20 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v19, "Vector Storage (uint8_t, growth)");
          memcpy(v20, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v19;
          a1[5] = v20;
          unsigned int v21 = *((_DWORD *)a1 + 9);
        }
        memmove(&v20[v15 + 1], &v20[v15], v21 - v15);
        *(unsigned char *)(a1[5] + v15) = v5;
        int v40 = 1;
        goto LABEL_47;
      case 1u:
        unsigned int v34 = v14 + 3;
        int v35 = *((_DWORD *)a1 + 8);
        if (v34 <= v35)
        {
          unsigned int v38 = (char *)a1[5];
          unsigned int v39 = v15;
        }
        else
        {
          if (v35 <= 1) {
            int v35 = 1;
          }
          int v36 = 2 * v35;
          if (v36 <= (int)v34) {
            uint64_t v37 = v34;
          }
          else {
            uint64_t v37 = v36;
          }
          unsigned int v38 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v37, "Vector Storage (uint8_t, growth)");
          memcpy(v38, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v37;
          a1[5] = v38;
          unsigned int v39 = *((_DWORD *)a1 + 9);
        }
        memmove(&v38[v15 + 1], &v38[v15], v39 - v15);
        *(_WORD *)(a1[5] + v15) = v5;
        int v40 = 2;
        goto LABEL_47;
      case 2u:
        unsigned int v22 = v14 + 4;
        int v23 = *((_DWORD *)a1 + 8);
        if (v22 <= v23)
        {
          unsigned int v26 = (char *)a1[5];
          unsigned int v27 = v15;
        }
        else
        {
          if (v23 <= 1) {
            int v23 = 1;
          }
          int v24 = 2 * v23;
          if (v24 <= (int)v22) {
            uint64_t v25 = v22;
          }
          else {
            uint64_t v25 = v24;
          }
          unsigned int v26 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v25, "Vector Storage (uint8_t, growth)");
          memcpy(v26, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v25;
          a1[5] = v26;
          unsigned int v27 = *((_DWORD *)a1 + 9);
        }
        memmove(&v26[v15 + 1], &v26[v15], v27 - v15);
        uint64_t v41 = a1[5] + v15;
        *(unsigned char *)(v41 + 2) = BYTE2(v5);
        *(_WORD *)uint64_t v41 = v5;
        int v40 = 3;
        goto LABEL_47;
      case 3u:
        unsigned int v28 = v14 + 5;
        int v29 = *((_DWORD *)a1 + 8);
        if (v28 <= v29)
        {
          unsigned int v32 = (char *)a1[5];
          unsigned int v33 = v15;
        }
        else
        {
          if (v29 <= 1) {
            int v29 = 1;
          }
          int v30 = 2 * v29;
          if (v30 <= (int)v28) {
            uint64_t v31 = v28;
          }
          else {
            uint64_t v31 = v30;
          }
          unsigned int v32 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v31, "Vector Storage (uint8_t, growth)");
          memcpy(v32, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v31;
          a1[5] = v32;
          unsigned int v33 = *((_DWORD *)a1 + 9);
        }
        memmove(&v32[v15 + 1], &v32[v15], v33 - v15);
        *(_DWORD *)(a1[5] + v15) = v5;
        int v40 = 4;
LABEL_47:
        *((_DWORD *)a1 + 9) += v40;
        break;
      default:
        break;
    }
  }
  uint64_t Opcode = glpPPStreamOpNodeGetOpcode(a2);
  int v43 = Opcode;
  unsigned int v44 = (char)glp_serialized_integer32_control(Opcode);
  int v45 = *((_DWORD *)a1 + 8);
  uint64_t v46 = *((unsigned int *)a1 + 9);
  int v47 = v46 + 1;
  if ((int)v46 + 1 <= v45)
  {
    uint64_t v50 = (char *)a1[5];
    int v51 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v45 <= 1) {
      int v45 = 1;
    }
    int v48 = 2 * v45;
    if (v48 <= v47) {
      uint64_t v49 = v47;
    }
    else {
      uint64_t v49 = v48;
    }
    uint64_t v50 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v49, "Vector Storage (uint8_t, growth)");
    memcpy(v50, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v49;
    a1[5] = v50;
    int v51 = *((_DWORD *)a1 + 9);
  }
  memmove(&v50[v46 + 1], &v50[v46], (v51 - v46));
  *(unsigned char *)(a1[5] + v46) = v44;
  int v52 = *((_DWORD *)a1 + 9);
  unsigned int v53 = v52 + 1;
  *((_DWORD *)a1 + 9) = v52 + 1;
  if ((v44 & 0x80000000) != 0)
  {
    switch((v44 >> 1) & 7)
    {
      case 0u:
        unsigned int v54 = v52 + 2;
        int v55 = *((_DWORD *)a1 + 8);
        if (v54 <= v55)
        {
          uint64_t v58 = (char *)a1[5];
          unsigned int v59 = v53;
        }
        else
        {
          if (v55 <= 1) {
            int v55 = 1;
          }
          int v56 = 2 * v55;
          if (v56 <= (int)v54) {
            uint64_t v57 = v54;
          }
          else {
            uint64_t v57 = v56;
          }
          uint64_t v58 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v57, "Vector Storage (uint8_t, growth)");
          memcpy(v58, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v57;
          a1[5] = v58;
          unsigned int v59 = *((_DWORD *)a1 + 9);
        }
        memmove(&v58[v53 + 1], &v58[v53], v59 - v53);
        *(unsigned char *)(a1[5] + v53) = v43;
        int v78 = 1;
        goto LABEL_94;
      case 1u:
        unsigned int v72 = v52 + 3;
        int v73 = *((_DWORD *)a1 + 8);
        if (v72 <= v73)
        {
          uint64_t v76 = (char *)a1[5];
          unsigned int v77 = v53;
        }
        else
        {
          if (v73 <= 1) {
            int v73 = 1;
          }
          int v74 = 2 * v73;
          if (v74 <= (int)v72) {
            uint64_t v75 = v72;
          }
          else {
            uint64_t v75 = v74;
          }
          uint64_t v76 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v75, "Vector Storage (uint8_t, growth)");
          memcpy(v76, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v75;
          a1[5] = v76;
          unsigned int v77 = *((_DWORD *)a1 + 9);
        }
        memmove(&v76[v53 + 1], &v76[v53], v77 - v53);
        *(_WORD *)(a1[5] + v53) = v43;
        int v78 = 2;
        goto LABEL_94;
      case 2u:
        unsigned int v60 = v52 + 4;
        int v61 = *((_DWORD *)a1 + 8);
        if (v60 <= v61)
        {
          uint64_t v64 = (char *)a1[5];
          unsigned int v65 = v53;
        }
        else
        {
          if (v61 <= 1) {
            int v61 = 1;
          }
          int v62 = 2 * v61;
          if (v62 <= (int)v60) {
            uint64_t v63 = v60;
          }
          else {
            uint64_t v63 = v62;
          }
          uint64_t v64 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v63, "Vector Storage (uint8_t, growth)");
          memcpy(v64, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v63;
          a1[5] = v64;
          unsigned int v65 = *((_DWORD *)a1 + 9);
        }
        memmove(&v64[v53 + 1], &v64[v53], v65 - v53);
        uint64_t v79 = a1[5] + v53;
        *(unsigned char *)(v79 + 2) = BYTE2(v43);
        *(_WORD *)uint64_t v79 = v43;
        int v78 = 3;
        goto LABEL_94;
      case 3u:
        unsigned int v66 = v52 + 5;
        int v67 = *((_DWORD *)a1 + 8);
        if (v66 <= v67)
        {
          uint64_t v70 = (char *)a1[5];
          unsigned int v71 = v53;
        }
        else
        {
          if (v67 <= 1) {
            int v67 = 1;
          }
          int v68 = 2 * v67;
          if (v68 <= (int)v66) {
            uint64_t v69 = v66;
          }
          else {
            uint64_t v69 = v68;
          }
          uint64_t v70 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v69, "Vector Storage (uint8_t, growth)");
          memcpy(v70, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v69;
          a1[5] = v70;
          unsigned int v71 = *((_DWORD *)a1 + 9);
        }
        memmove(&v70[v53 + 1], &v70[v53], v71 - v53);
        *(_DWORD *)(a1[5] + v53) = v43;
        int v78 = 4;
LABEL_94:
        *((_DWORD *)a1 + 9) += v78;
        break;
      default:
        break;
    }
  }
  Opuint64_t PrimitiveType = glpPPStreamOpNodeGetOpPrimitiveType(a2);
  int v81 = OpPrimitiveType;
  unsigned int v82 = (char)glp_serialized_integer32_control(OpPrimitiveType);
  int v83 = *((_DWORD *)a1 + 8);
  uint64_t v84 = *((unsigned int *)a1 + 9);
  int v85 = v84 + 1;
  if ((int)v84 + 1 <= v83)
  {
    uint64_t v88 = (char *)a1[5];
    int v89 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v83 <= 1) {
      int v83 = 1;
    }
    int v86 = 2 * v83;
    if (v86 <= v85) {
      uint64_t v87 = v85;
    }
    else {
      uint64_t v87 = v86;
    }
    uint64_t v88 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v87, "Vector Storage (uint8_t, growth)");
    memcpy(v88, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v87;
    a1[5] = v88;
    int v89 = *((_DWORD *)a1 + 9);
  }
  memmove(&v88[v84 + 1], &v88[v84], (v89 - v84));
  *(unsigned char *)(a1[5] + v84) = v82;
  int v90 = *((_DWORD *)a1 + 9);
  unsigned int v91 = v90 + 1;
  *((_DWORD *)a1 + 9) = v90 + 1;
  if ((v82 & 0x80000000) != 0)
  {
    switch((v82 >> 1) & 7)
    {
      case 0u:
        unsigned int v92 = v90 + 2;
        int v93 = *((_DWORD *)a1 + 8);
        if (v92 <= v93)
        {
          int v96 = (char *)a1[5];
          unsigned int v97 = v91;
        }
        else
        {
          if (v93 <= 1) {
            int v93 = 1;
          }
          int v94 = 2 * v93;
          if (v94 <= (int)v92) {
            uint64_t v95 = v92;
          }
          else {
            uint64_t v95 = v94;
          }
          int v96 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v95, "Vector Storage (uint8_t, growth)");
          memcpy(v96, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v95;
          a1[5] = v96;
          unsigned int v97 = *((_DWORD *)a1 + 9);
        }
        memmove(&v96[v91 + 1], &v96[v91], v97 - v91);
        *(unsigned char *)(a1[5] + v91) = v81;
        int v116 = 1;
        goto LABEL_141;
      case 1u:
        unsigned int v110 = v90 + 3;
        int v111 = *((_DWORD *)a1 + 8);
        if (v110 <= v111)
        {
          int v114 = (char *)a1[5];
          unsigned int v115 = v91;
        }
        else
        {
          if (v111 <= 1) {
            int v111 = 1;
          }
          int v112 = 2 * v111;
          if (v112 <= (int)v110) {
            uint64_t v113 = v110;
          }
          else {
            uint64_t v113 = v112;
          }
          int v114 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v113, "Vector Storage (uint8_t, growth)");
          memcpy(v114, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v113;
          a1[5] = v114;
          unsigned int v115 = *((_DWORD *)a1 + 9);
        }
        memmove(&v114[v91 + 1], &v114[v91], v115 - v91);
        *(_WORD *)(a1[5] + v91) = v81;
        int v116 = 2;
        goto LABEL_141;
      case 2u:
        unsigned int v98 = v90 + 4;
        int v99 = *((_DWORD *)a1 + 8);
        if (v98 <= v99)
        {
          int v102 = (char *)a1[5];
          unsigned int v103 = v91;
        }
        else
        {
          if (v99 <= 1) {
            int v99 = 1;
          }
          int v100 = 2 * v99;
          if (v100 <= (int)v98) {
            uint64_t v101 = v98;
          }
          else {
            uint64_t v101 = v100;
          }
          int v102 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v101, "Vector Storage (uint8_t, growth)");
          memcpy(v102, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v101;
          a1[5] = v102;
          unsigned int v103 = *((_DWORD *)a1 + 9);
        }
        memmove(&v102[v91 + 1], &v102[v91], v103 - v91);
        uint64_t v117 = a1[5] + v91;
        *(unsigned char *)(v117 + 2) = BYTE2(v81);
        *(_WORD *)uint64_t v117 = v81;
        int v116 = 3;
        goto LABEL_141;
      case 3u:
        unsigned int v104 = v90 + 5;
        int v105 = *((_DWORD *)a1 + 8);
        if (v104 <= v105)
        {
          int v108 = (char *)a1[5];
          unsigned int v109 = v91;
        }
        else
        {
          if (v105 <= 1) {
            int v105 = 1;
          }
          int v106 = 2 * v105;
          if (v106 <= (int)v104) {
            uint64_t v107 = v104;
          }
          else {
            uint64_t v107 = v106;
          }
          int v108 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v107, "Vector Storage (uint8_t, growth)");
          memcpy(v108, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v107;
          a1[5] = v108;
          unsigned int v109 = *((_DWORD *)a1 + 9);
        }
        memmove(&v108[v91 + 1], &v108[v91], v109 - v91);
        *(_DWORD *)(a1[5] + v91) = v81;
        int v116 = 4;
LABEL_141:
        *((_DWORD *)a1 + 9) += v116;
        break;
      default:
        break;
    }
  }
  uint64_t HasSrctex = glpPPStreamOpNodeGetHasSrctex(a2);
  int v119 = HasSrctex;
  unsigned int v120 = (char)glp_serialized_integer32_control(HasSrctex);
  int v121 = *((_DWORD *)a1 + 8);
  uint64_t v122 = *((unsigned int *)a1 + 9);
  int v123 = v122 + 1;
  if ((int)v122 + 1 <= v121)
  {
    int v126 = (char *)a1[5];
    int v127 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v121 <= 1) {
      int v121 = 1;
    }
    int v124 = 2 * v121;
    if (v124 <= v123) {
      uint64_t v125 = v123;
    }
    else {
      uint64_t v125 = v124;
    }
    int v126 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v125, "Vector Storage (uint8_t, growth)");
    memcpy(v126, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v125;
    a1[5] = v126;
    int v127 = *((_DWORD *)a1 + 9);
  }
  memmove(&v126[v122 + 1], &v126[v122], (v127 - v122));
  *(unsigned char *)(a1[5] + v122) = v120;
  int v128 = *((_DWORD *)a1 + 9);
  unsigned int v129 = v128 + 1;
  *((_DWORD *)a1 + 9) = v128 + 1;
  if ((v120 & 0x80000000) != 0)
  {
    switch((v120 >> 1) & 7)
    {
      case 0u:
        unsigned int v130 = v128 + 2;
        int v131 = *((_DWORD *)a1 + 8);
        if (v130 <= v131)
        {
          int v134 = (char *)a1[5];
          unsigned int v135 = v129;
        }
        else
        {
          if (v131 <= 1) {
            int v131 = 1;
          }
          int v132 = 2 * v131;
          if (v132 <= (int)v130) {
            uint64_t v133 = v130;
          }
          else {
            uint64_t v133 = v132;
          }
          int v134 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v133, "Vector Storage (uint8_t, growth)");
          memcpy(v134, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v133;
          a1[5] = v134;
          unsigned int v135 = *((_DWORD *)a1 + 9);
        }
        memmove(&v134[v129 + 1], &v134[v129], v135 - v129);
        *(unsigned char *)(a1[5] + v129) = v119;
        int v154 = 1;
        goto LABEL_188;
      case 1u:
        unsigned int v148 = v128 + 3;
        int v149 = *((_DWORD *)a1 + 8);
        if (v148 <= v149)
        {
          unsigned int v152 = (char *)a1[5];
          unsigned int v153 = v129;
        }
        else
        {
          if (v149 <= 1) {
            int v149 = 1;
          }
          int v150 = 2 * v149;
          if (v150 <= (int)v148) {
            uint64_t v151 = v148;
          }
          else {
            uint64_t v151 = v150;
          }
          unsigned int v152 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v151, "Vector Storage (uint8_t, growth)");
          memcpy(v152, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v151;
          a1[5] = v152;
          unsigned int v153 = *((_DWORD *)a1 + 9);
        }
        memmove(&v152[v129 + 1], &v152[v129], v153 - v129);
        *(_WORD *)(a1[5] + v129) = v119;
        int v154 = 2;
        goto LABEL_188;
      case 2u:
        unsigned int v136 = v128 + 4;
        int v137 = *((_DWORD *)a1 + 8);
        if (v136 <= v137)
        {
          unsigned int v140 = (char *)a1[5];
          unsigned int v141 = v129;
        }
        else
        {
          if (v137 <= 1) {
            int v137 = 1;
          }
          int v138 = 2 * v137;
          if (v138 <= (int)v136) {
            uint64_t v139 = v136;
          }
          else {
            uint64_t v139 = v138;
          }
          unsigned int v140 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v139, "Vector Storage (uint8_t, growth)");
          memcpy(v140, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v139;
          a1[5] = v140;
          unsigned int v141 = *((_DWORD *)a1 + 9);
        }
        memmove(&v140[v129 + 1], &v140[v129], v141 - v129);
        uint64_t v155 = a1[5] + v129;
        *(unsigned char *)(v155 + 2) = BYTE2(v119);
        *(_WORD *)uint64_t v155 = v119;
        int v154 = 3;
        goto LABEL_188;
      case 3u:
        unsigned int v142 = v128 + 5;
        int v143 = *((_DWORD *)a1 + 8);
        if (v142 <= v143)
        {
          unsigned int v146 = (char *)a1[5];
          unsigned int v147 = v129;
        }
        else
        {
          if (v143 <= 1) {
            int v143 = 1;
          }
          int v144 = 2 * v143;
          if (v144 <= (int)v142) {
            uint64_t v145 = v142;
          }
          else {
            uint64_t v145 = v144;
          }
          unsigned int v146 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v145, "Vector Storage (uint8_t, growth)");
          memcpy(v146, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v145;
          a1[5] = v146;
          unsigned int v147 = *((_DWORD *)a1 + 9);
        }
        memmove(&v146[v129 + 1], &v146[v129], v147 - v129);
        *(_DWORD *)(a1[5] + v129) = v119;
        int v154 = 4;
LABEL_188:
        *((_DWORD *)a1 + 9) += v154;
        break;
      default:
        break;
    }
  }
  Hasuint64_t Offset = glpPPStreamOpNodeGetHasOffset(a2);
  int v157 = HasOffset;
  unsigned int v158 = (char)glp_serialized_integer32_control(HasOffset);
  int v159 = *((_DWORD *)a1 + 8);
  uint64_t v160 = *((unsigned int *)a1 + 9);
  int v161 = v160 + 1;
  if ((int)v160 + 1 <= v159)
  {
    unsigned int v164 = (char *)a1[5];
    int v165 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v159 <= 1) {
      int v159 = 1;
    }
    int v162 = 2 * v159;
    if (v162 <= v161) {
      uint64_t v163 = v161;
    }
    else {
      uint64_t v163 = v162;
    }
    unsigned int v164 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v163, "Vector Storage (uint8_t, growth)");
    memcpy(v164, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v163;
    a1[5] = v164;
    int v165 = *((_DWORD *)a1 + 9);
  }
  uint64_t result = memmove(&v164[v160 + 1], &v164[v160], (v165 - v160));
  *(unsigned char *)(a1[5] + v160) = v158;
  int v167 = *((_DWORD *)a1 + 9);
  unsigned int v168 = v167 + 1;
  *((_DWORD *)a1 + 9) = v167 + 1;
  if ((v158 & 0x80000000) != 0)
  {
    switch((v158 >> 1) & 7)
    {
      case 0u:
        unsigned int v169 = v167 + 2;
        int v170 = *((_DWORD *)a1 + 8);
        if (v169 <= v170)
        {
          int v173 = (char *)a1[5];
          unsigned int v174 = v168;
        }
        else
        {
          if (v170 <= 1) {
            int v170 = 1;
          }
          int v171 = 2 * v170;
          if (v171 <= (int)v169) {
            uint64_t v172 = v169;
          }
          else {
            uint64_t v172 = v171;
          }
          int v173 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v172, "Vector Storage (uint8_t, growth)");
          memcpy(v173, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v172;
          a1[5] = v173;
          unsigned int v174 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v173[v168 + 1], &v173[v168], v174 - v168);
        *(unsigned char *)(a1[5] + v168) = v157;
        int v193 = 1;
        goto LABEL_235;
      case 1u:
        unsigned int v187 = v167 + 3;
        int v188 = *((_DWORD *)a1 + 8);
        if (v187 <= v188)
        {
          int v191 = (char *)a1[5];
          unsigned int v192 = v168;
        }
        else
        {
          if (v188 <= 1) {
            int v188 = 1;
          }
          int v189 = 2 * v188;
          if (v189 <= (int)v187) {
            uint64_t v190 = v187;
          }
          else {
            uint64_t v190 = v189;
          }
          int v191 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v190, "Vector Storage (uint8_t, growth)");
          memcpy(v191, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v190;
          a1[5] = v191;
          unsigned int v192 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v191[v168 + 1], &v191[v168], v192 - v168);
        *(_WORD *)(a1[5] + v168) = v157;
        int v193 = 2;
        goto LABEL_235;
      case 2u:
        unsigned int v175 = v167 + 4;
        int v176 = *((_DWORD *)a1 + 8);
        if (v175 <= v176)
        {
          int v179 = (char *)a1[5];
          unsigned int v180 = v168;
        }
        else
        {
          if (v176 <= 1) {
            int v176 = 1;
          }
          int v177 = 2 * v176;
          if (v177 <= (int)v175) {
            uint64_t v178 = v175;
          }
          else {
            uint64_t v178 = v177;
          }
          int v179 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v178, "Vector Storage (uint8_t, growth)");
          memcpy(v179, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v178;
          a1[5] = v179;
          unsigned int v180 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v179[v168 + 1], &v179[v168], v180 - v168);
        uint64_t v194 = a1[5] + v168;
        *(unsigned char *)(v194 + 2) = BYTE2(v157);
        *(_WORD *)uint64_t v194 = v157;
        int v193 = 3;
        goto LABEL_235;
      case 3u:
        unsigned int v181 = v167 + 5;
        int v182 = *((_DWORD *)a1 + 8);
        if (v181 <= v182)
        {
          int v185 = (char *)a1[5];
          unsigned int v186 = v168;
        }
        else
        {
          if (v182 <= 1) {
            int v182 = 1;
          }
          int v183 = 2 * v182;
          if (v183 <= (int)v181) {
            uint64_t v184 = v181;
          }
          else {
            uint64_t v184 = v183;
          }
          int v185 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v184, "Vector Storage (uint8_t, growth)");
          memcpy(v185, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v184;
          a1[5] = v185;
          unsigned int v186 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v185[v168 + 1], &v185[v168], v186 - v168);
        *(_DWORD *)(a1[5] + v168) = v157;
        int v193 = 4;
LABEL_235:
        *((_DWORD *)a1 + 9) += v193;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t serializeSubroutineUniformFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  unint64_t Extra = glpSubroutineUniformNodeGetExtra(a2);

  return serialize_GLPSubroutineUniformObject(a1, Extra);
}

void *serializeASTFields(void *a1, uint64_t a2)
{
  uint64_t Kind = glpASTNodeGetKind(a2);
  int v5 = Kind;
  unsigned int v6 = (char)glp_serialized_integer32_control(Kind);
  int v7 = *((_DWORD *)a1 + 8);
  uint64_t v8 = *((unsigned int *)a1 + 9);
  int v9 = v8 + 1;
  if ((int)v8 + 1 <= v7)
  {
    int v12 = (char *)a1[5];
    int v13 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v7 <= 1) {
      int v7 = 1;
    }
    int v10 = 2 * v7;
    if (v10 <= v9) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = v10;
    }
    int v12 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v11, "Vector Storage (uint8_t, growth)");
    memcpy(v12, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v11;
    a1[5] = v12;
    int v13 = *((_DWORD *)a1 + 9);
  }
  memmove(&v12[v8 + 1], &v12[v8], (v13 - v8));
  *(unsigned char *)(a1[5] + v8) = v6;
  int v14 = *((_DWORD *)a1 + 9);
  unsigned int v15 = v14 + 1;
  *((_DWORD *)a1 + 9) = v14 + 1;
  if ((v6 & 0x80000000) != 0)
  {
    switch((v6 >> 1) & 7)
    {
      case 0u:
        unsigned int v16 = v14 + 2;
        int v17 = *((_DWORD *)a1 + 8);
        if (v16 <= v17)
        {
          unsigned int v20 = (char *)a1[5];
          unsigned int v21 = v15;
        }
        else
        {
          if (v17 <= 1) {
            int v17 = 1;
          }
          int v18 = 2 * v17;
          if (v18 <= (int)v16) {
            uint64_t v19 = v16;
          }
          else {
            uint64_t v19 = v18;
          }
          unsigned int v20 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v19, "Vector Storage (uint8_t, growth)");
          memcpy(v20, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v19;
          a1[5] = v20;
          unsigned int v21 = *((_DWORD *)a1 + 9);
        }
        memmove(&v20[v15 + 1], &v20[v15], v21 - v15);
        *(unsigned char *)(a1[5] + v15) = v5;
        int v40 = 1;
        goto LABEL_47;
      case 1u:
        unsigned int v22 = v14 + 3;
        int v23 = *((_DWORD *)a1 + 8);
        if (v22 <= v23)
        {
          unsigned int v26 = (char *)a1[5];
          unsigned int v27 = v15;
        }
        else
        {
          if (v23 <= 1) {
            int v23 = 1;
          }
          int v24 = 2 * v23;
          if (v24 <= (int)v22) {
            uint64_t v25 = v22;
          }
          else {
            uint64_t v25 = v24;
          }
          unsigned int v26 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v25, "Vector Storage (uint8_t, growth)");
          memcpy(v26, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v25;
          a1[5] = v26;
          unsigned int v27 = *((_DWORD *)a1 + 9);
        }
        memmove(&v26[v15 + 1], &v26[v15], v27 - v15);
        *(_WORD *)(a1[5] + v15) = v5;
        int v40 = 2;
        goto LABEL_47;
      case 2u:
        unsigned int v28 = v14 + 4;
        int v29 = *((_DWORD *)a1 + 8);
        if (v28 <= v29)
        {
          unsigned int v32 = (char *)a1[5];
          unsigned int v33 = v15;
        }
        else
        {
          if (v29 <= 1) {
            int v29 = 1;
          }
          int v30 = 2 * v29;
          if (v30 <= (int)v28) {
            uint64_t v31 = v28;
          }
          else {
            uint64_t v31 = v30;
          }
          unsigned int v32 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v31, "Vector Storage (uint8_t, growth)");
          memcpy(v32, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v31;
          a1[5] = v32;
          unsigned int v33 = *((_DWORD *)a1 + 9);
        }
        memmove(&v32[v15 + 1], &v32[v15], v33 - v15);
        uint64_t v41 = a1[5] + v15;
        *(unsigned char *)(v41 + 2) = BYTE2(v5);
        *(_WORD *)uint64_t v41 = v5;
        int v40 = 3;
        goto LABEL_47;
      case 3u:
        unsigned int v34 = v14 + 5;
        int v35 = *((_DWORD *)a1 + 8);
        if (v34 <= v35)
        {
          unsigned int v38 = (char *)a1[5];
          unsigned int v39 = v15;
        }
        else
        {
          if (v35 <= 1) {
            int v35 = 1;
          }
          int v36 = 2 * v35;
          if (v36 <= (int)v34) {
            uint64_t v37 = v34;
          }
          else {
            uint64_t v37 = v36;
          }
          unsigned int v38 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v37, "Vector Storage (uint8_t, growth)");
          memcpy(v38, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v37;
          a1[5] = v38;
          unsigned int v39 = *((_DWORD *)a1 + 9);
        }
        memmove(&v38[v15 + 1], &v38[v15], v39 - v15);
        *(_DWORD *)(a1[5] + v15) = v5;
        int v40 = 4;
LABEL_47:
        *((_DWORD *)a1 + 9) += v40;
        break;
      default:
        break;
    }
  }
  unint64_t SaFlags = glpASTNodeGetSaFlags(a2);
  unsigned int v43 = (char)glp_serialized_integer64_control(SaFlags);
  int v44 = *((_DWORD *)a1 + 8);
  uint64_t v45 = *((unsigned int *)a1 + 9);
  int v46 = v45 + 1;
  if ((int)v45 + 1 <= v44)
  {
    uint64_t v49 = (char *)a1[5];
    int v50 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v44 <= 1) {
      int v44 = 1;
    }
    int v47 = 2 * v44;
    if (v47 <= v46) {
      uint64_t v48 = v46;
    }
    else {
      uint64_t v48 = v47;
    }
    uint64_t v49 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v48, "Vector Storage (uint8_t, growth)");
    memcpy(v49, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v48;
    a1[5] = v49;
    int v50 = *((_DWORD *)a1 + 9);
  }
  memmove(&v49[v45 + 1], &v49[v45], (v50 - v45));
  *(unsigned char *)(a1[5] + v45) = v43;
  int v51 = *((_DWORD *)a1 + 9);
  unsigned int v52 = v51 + 1;
  *((_DWORD *)a1 + 9) = v51 + 1;
  if ((v43 & 0x80000000) != 0)
  {
    switch((v43 >> 1) & 7)
    {
      case 1u:
        unsigned int v59 = v51 + 3;
        int v60 = *((_DWORD *)a1 + 8);
        if (v59 <= v60)
        {
          uint64_t v63 = (char *)a1[5];
          unsigned int v64 = v52;
        }
        else
        {
          if (v60 <= 1) {
            int v60 = 1;
          }
          int v61 = 2 * v60;
          if (v61 <= (int)v59) {
            uint64_t v62 = v59;
          }
          else {
            uint64_t v62 = v61;
          }
          uint64_t v63 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v62, "Vector Storage (uint8_t, growth)");
          memcpy(v63, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v62;
          a1[5] = v63;
          unsigned int v64 = *((_DWORD *)a1 + 9);
        }
        goto LABEL_151;
      case 2u:
        unsigned int v65 = v51 + 4;
        int v66 = *((_DWORD *)a1 + 8);
        if (v65 <= v66)
        {
          uint64_t v69 = (char *)a1[5];
          unsigned int v70 = v52;
        }
        else
        {
          if (v66 <= 1) {
            int v66 = 1;
          }
          int v67 = 2 * v66;
          if (v67 <= (int)v65) {
            uint64_t v68 = v65;
          }
          else {
            uint64_t v68 = v67;
          }
          uint64_t v69 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v68, "Vector Storage (uint8_t, growth)");
          memcpy(v69, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v68;
          a1[5] = v69;
          unsigned int v70 = *((_DWORD *)a1 + 9);
        }
        memmove(&v69[v52 + 1], &v69[v52], v70 - v52);
        uint64_t v101 = a1[5] + v52;
        *(unsigned char *)(v101 + 2) = BYTE2(SaFlags);
        *(_WORD *)uint64_t v101 = SaFlags;
        goto LABEL_154;
      case 3u:
        unsigned int v71 = v51 + 5;
        int v72 = *((_DWORD *)a1 + 8);
        if (v71 <= v72)
        {
          uint64_t v75 = (char *)a1[5];
          unsigned int v76 = v52;
        }
        else
        {
          if (v72 <= 1) {
            int v72 = 1;
          }
          int v73 = 2 * v72;
          if (v73 <= (int)v71) {
            uint64_t v74 = v71;
          }
          else {
            uint64_t v74 = v73;
          }
          uint64_t v75 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v74, "Vector Storage (uint8_t, growth)");
          memcpy(v75, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v74;
          a1[5] = v75;
          unsigned int v76 = *((_DWORD *)a1 + 9);
        }
        memmove(&v75[v52 + 1], &v75[v52], v76 - v52);
        *(_DWORD *)(a1[5] + v52) = SaFlags;
        int v102 = 4;
        break;
      case 4u:
        unsigned int v77 = v51 + 5;
        int v78 = *((_DWORD *)a1 + 8);
        if (v77 <= v78)
        {
          int v81 = (char *)a1[5];
          unsigned int v82 = v52;
        }
        else
        {
          if (v78 <= 1) {
            int v78 = 1;
          }
          int v79 = 2 * v78;
          if (v79 <= (int)v77) {
            uint64_t v80 = v77;
          }
          else {
            uint64_t v80 = v79;
          }
          int v81 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v80, "Vector Storage (uint8_t, growth)");
          memcpy(v81, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v80;
          a1[5] = v81;
          unsigned int v82 = *((_DWORD *)a1 + 9);
        }
        memmove(&v81[v52 + 1], &v81[v52], v82 - v52);
        *(_DWORD *)(a1[5] + v52) = SaFlags;
        int v104 = *((_DWORD *)a1 + 8);
        int v103 = *((_DWORD *)a1 + 9);
        unsigned int v52 = v103 + 4;
        *((_DWORD *)a1 + 9) = v103 + 4;
        unsigned int v105 = v103 + 5;
        if (v105 <= v104)
        {
          uint64_t v57 = (char *)a1[5];
          unsigned int v58 = v52;
        }
        else
        {
          if (v104 <= 1) {
            int v104 = 1;
          }
          int v106 = 2 * v104;
          if (v106 <= (int)v105) {
            uint64_t v107 = v105;
          }
          else {
            uint64_t v107 = v106;
          }
          uint64_t v57 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v107, "Vector Storage (uint8_t, growth)");
          memcpy(v57, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v107;
          a1[5] = v57;
          unsigned int v58 = *((_DWORD *)a1 + 9);
        }
        SaFlags >>= 32;
        goto LABEL_148;
      case 5u:
        unsigned int v83 = v51 + 5;
        int v84 = *((_DWORD *)a1 + 8);
        if (v83 <= v84)
        {
          uint64_t v87 = (char *)a1[5];
          unsigned int v88 = v52;
        }
        else
        {
          if (v84 <= 1) {
            int v84 = 1;
          }
          int v85 = 2 * v84;
          if (v85 <= (int)v83) {
            uint64_t v86 = v83;
          }
          else {
            uint64_t v86 = v85;
          }
          uint64_t v87 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v86, "Vector Storage (uint8_t, growth)");
          memcpy(v87, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v86;
          a1[5] = v87;
          unsigned int v88 = *((_DWORD *)a1 + 9);
        }
        memmove(&v87[v52 + 1], &v87[v52], v88 - v52);
        *(_DWORD *)(a1[5] + v52) = SaFlags;
        int v109 = *((_DWORD *)a1 + 8);
        int v108 = *((_DWORD *)a1 + 9);
        unsigned int v52 = v108 + 4;
        *((_DWORD *)a1 + 9) = v108 + 4;
        unsigned int v110 = v108 + 6;
        if (v110 <= v109)
        {
          uint64_t v63 = (char *)a1[5];
          unsigned int v64 = v52;
        }
        else
        {
          if (v109 <= 1) {
            int v109 = 1;
          }
          int v111 = 2 * v109;
          if (v111 <= (int)v110) {
            uint64_t v112 = v110;
          }
          else {
            uint64_t v112 = v111;
          }
          uint64_t v63 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v112, "Vector Storage (uint8_t, growth)");
          memcpy(v63, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v112;
          a1[5] = v63;
          unsigned int v64 = *((_DWORD *)a1 + 9);
        }
        SaFlags >>= 32;
LABEL_151:
        memmove(&v63[v52 + 1], &v63[v52], v64 - v52);
        *(_WORD *)(a1[5] + v52) = SaFlags;
        int v102 = 2;
        break;
      case 6u:
        unsigned int v95 = v51 + 5;
        int v96 = *((_DWORD *)a1 + 8);
        if (v95 <= v96)
        {
          int v99 = (char *)a1[5];
          unsigned int v100 = v52;
        }
        else
        {
          if (v96 <= 1) {
            int v96 = 1;
          }
          int v97 = 2 * v96;
          if (v97 <= (int)v95) {
            uint64_t v98 = v95;
          }
          else {
            uint64_t v98 = v97;
          }
          int v99 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v98, "Vector Storage (uint8_t, growth)");
          memcpy(v99, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v98;
          a1[5] = v99;
          unsigned int v100 = *((_DWORD *)a1 + 9);
        }
        memmove(&v99[v52 + 1], &v99[v52], v100 - v52);
        *(_DWORD *)(a1[5] + v52) = SaFlags;
        int v114 = *((_DWORD *)a1 + 8);
        int v113 = *((_DWORD *)a1 + 9);
        unsigned int v115 = v113 + 4;
        *((_DWORD *)a1 + 9) = v113 + 4;
        unsigned int v116 = v113 + 7;
        if (v116 <= v114)
        {
          int v119 = (char *)a1[5];
          unsigned int v120 = v115;
        }
        else
        {
          if (v114 <= 1) {
            int v114 = 1;
          }
          int v117 = 2 * v114;
          if (v117 <= (int)v116) {
            uint64_t v118 = v116;
          }
          else {
            uint64_t v118 = v117;
          }
          int v119 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v118, "Vector Storage (uint8_t, growth)");
          memcpy(v119, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v118;
          a1[5] = v119;
          unsigned int v120 = *((_DWORD *)a1 + 9);
        }
        memmove(&v119[v115 + 1], &v119[v115], v120 - v115);
        uint64_t v121 = a1[5] + v115;
        *(unsigned char *)(v121 + 2) = BYTE6(SaFlags);
        *(_WORD *)uint64_t v121 = WORD2(SaFlags);
LABEL_154:
        int v102 = 3;
        break;
      case 7u:
        unsigned int v89 = v51 + 9;
        int v90 = *((_DWORD *)a1 + 8);
        if (v89 <= v90)
        {
          int v93 = (char *)a1[5];
          unsigned int v94 = v52;
        }
        else
        {
          if (v90 <= 1) {
            int v90 = 1;
          }
          int v91 = 2 * v90;
          if (v91 <= (int)v89) {
            uint64_t v92 = v89;
          }
          else {
            uint64_t v92 = v91;
          }
          int v93 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v92, "Vector Storage (uint8_t, growth)");
          memcpy(v93, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v92;
          a1[5] = v93;
          unsigned int v94 = *((_DWORD *)a1 + 9);
        }
        memmove(&v93[v52 + 1], &v93[v52], v94 - v52);
        *(void *)(a1[5] + v52) = SaFlags;
        int v102 = 8;
        break;
      default:
        unsigned int v53 = v51 + 2;
        int v54 = *((_DWORD *)a1 + 8);
        if (v53 <= v54)
        {
          uint64_t v57 = (char *)a1[5];
          unsigned int v58 = v52;
        }
        else
        {
          if (v54 <= 1) {
            int v54 = 1;
          }
          int v55 = 2 * v54;
          if (v55 <= (int)v53) {
            uint64_t v56 = v53;
          }
          else {
            uint64_t v56 = v55;
          }
          uint64_t v57 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v56, "Vector Storage (uint8_t, growth)");
          memcpy(v57, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v56;
          a1[5] = v57;
          unsigned int v58 = *((_DWORD *)a1 + 9);
        }
LABEL_148:
        memmove(&v57[v52 + 1], &v57[v52], v58 - v52);
        *(unsigned char *)(a1[5] + v52) = SaFlags;
        int v102 = 1;
        break;
    }
    *((_DWORD *)a1 + 9) += v102;
  }
  uint64_t SaType = glpASTNodeGetSaType(a2);
  serialize_GLPType(a1, SaType);
  glpASTNodeGetLocation(a2, &v161);
  serialize_GLPString(a1, (const char *)v161.n128_u64[0], v161.n128_i64[1]);
  unsigned int v123 = v162;
  unsigned int v124 = (char)glp_serialized_integer32_control(v162);
  int v125 = *((_DWORD *)a1 + 8);
  uint64_t v126 = *((unsigned int *)a1 + 9);
  int v127 = v126 + 1;
  if ((int)v126 + 1 <= v125)
  {
    unsigned int v130 = (char *)a1[5];
    int v131 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v125 <= 1) {
      int v125 = 1;
    }
    int v128 = 2 * v125;
    if (v128 <= v127) {
      uint64_t v129 = v127;
    }
    else {
      uint64_t v129 = v128;
    }
    unsigned int v130 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v129, "Vector Storage (uint8_t, growth)");
    memcpy(v130, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v129;
    a1[5] = v130;
    int v131 = *((_DWORD *)a1 + 9);
  }
  uint64_t result = memmove(&v130[v126 + 1], &v130[v126], (v131 - v126));
  *(unsigned char *)(a1[5] + v126) = v124;
  int v133 = *((_DWORD *)a1 + 9);
  unsigned int v134 = v133 + 1;
  *((_DWORD *)a1 + 9) = v133 + 1;
  if ((v124 & 0x80000000) != 0)
  {
    switch((v124 >> 1) & 7)
    {
      case 0u:
        unsigned int v135 = v133 + 2;
        int v136 = *((_DWORD *)a1 + 8);
        if (v135 <= v136)
        {
          uint64_t v139 = (char *)a1[5];
          unsigned int v140 = v134;
        }
        else
        {
          if (v136 <= 1) {
            int v136 = 1;
          }
          int v137 = 2 * v136;
          if (v137 <= (int)v135) {
            uint64_t v138 = v135;
          }
          else {
            uint64_t v138 = v137;
          }
          uint64_t v139 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v138, "Vector Storage (uint8_t, growth)");
          memcpy(v139, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v138;
          a1[5] = v139;
          unsigned int v140 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v139[v134 + 1], &v139[v134], v140 - v134);
        *(unsigned char *)(a1[5] + v134) = v123;
        int v159 = 1;
        goto LABEL_202;
      case 1u:
        unsigned int v141 = v133 + 3;
        int v142 = *((_DWORD *)a1 + 8);
        if (v141 <= v142)
        {
          uint64_t v145 = (char *)a1[5];
          unsigned int v146 = v134;
        }
        else
        {
          if (v142 <= 1) {
            int v142 = 1;
          }
          int v143 = 2 * v142;
          if (v143 <= (int)v141) {
            uint64_t v144 = v141;
          }
          else {
            uint64_t v144 = v143;
          }
          uint64_t v145 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v144, "Vector Storage (uint8_t, growth)");
          memcpy(v145, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v144;
          a1[5] = v145;
          unsigned int v146 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v145[v134 + 1], &v145[v134], v146 - v134);
        *(_WORD *)(a1[5] + v134) = v123;
        int v159 = 2;
        goto LABEL_202;
      case 2u:
        unsigned int v147 = v133 + 4;
        int v148 = *((_DWORD *)a1 + 8);
        if (v147 <= v148)
        {
          uint64_t v151 = (char *)a1[5];
          unsigned int v152 = v134;
        }
        else
        {
          if (v148 <= 1) {
            int v148 = 1;
          }
          int v149 = 2 * v148;
          if (v149 <= (int)v147) {
            uint64_t v150 = v147;
          }
          else {
            uint64_t v150 = v149;
          }
          uint64_t v151 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v150, "Vector Storage (uint8_t, growth)");
          memcpy(v151, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v150;
          a1[5] = v151;
          unsigned int v152 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v151[v134 + 1], &v151[v134], v152 - v134);
        uint64_t v160 = a1[5] + v134;
        *(unsigned char *)(v160 + 2) = BYTE2(v123);
        *(_WORD *)uint64_t v160 = v123;
        int v159 = 3;
        goto LABEL_202;
      case 3u:
        unsigned int v153 = v133 + 5;
        int v154 = *((_DWORD *)a1 + 8);
        if (v153 <= v154)
        {
          int v157 = (char *)a1[5];
          unsigned int v158 = v134;
        }
        else
        {
          if (v154 <= 1) {
            int v154 = 1;
          }
          int v155 = 2 * v154;
          if (v155 <= (int)v153) {
            uint64_t v156 = v153;
          }
          else {
            uint64_t v156 = v155;
          }
          int v157 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v156, "Vector Storage (uint8_t, growth)");
          memcpy(v157, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v156;
          a1[5] = v157;
          unsigned int v158 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v157[v134 + 1], &v157[v134], v158 - v134);
        *(_DWORD *)(a1[5] + v134) = v123;
        int v159 = 4;
LABEL_202:
        *((_DWORD *)a1 + 9) += v159;
        break;
      default:
        return result;
    }
  }
  return result;
}

void *serializeCallFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  uint64_t v4 = glpCallNodeGetArgCount(a2);
  int v5 = v4;
  unsigned int v6 = (char)glp_serialized_integer32_control(v4);
  int v7 = *((_DWORD *)a1 + 8);
  uint64_t v8 = *((unsigned int *)a1 + 9);
  int v9 = v8 + 1;
  if ((int)v8 + 1 <= v7)
  {
    int v12 = (char *)a1[5];
    int v13 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v7 <= 1) {
      int v7 = 1;
    }
    int v10 = 2 * v7;
    if (v10 <= v9) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = v10;
    }
    int v12 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v11, "Vector Storage (uint8_t, growth)");
    memcpy(v12, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v11;
    a1[5] = v12;
    int v13 = *((_DWORD *)a1 + 9);
  }
  uint64_t result = memmove(&v12[v8 + 1], &v12[v8], (v13 - v8));
  *(unsigned char *)(a1[5] + v8) = v6;
  int v15 = *((_DWORD *)a1 + 9);
  unsigned int v16 = v15 + 1;
  *((_DWORD *)a1 + 9) = v15 + 1;
  if ((v6 & 0x80000000) != 0)
  {
    switch((v6 >> 1) & 7)
    {
      case 0u:
        unsigned int v17 = v15 + 2;
        int v18 = *((_DWORD *)a1 + 8);
        if (v17 <= v18)
        {
          unsigned int v21 = (char *)a1[5];
          unsigned int v22 = v16;
        }
        else
        {
          if (v18 <= 1) {
            int v18 = 1;
          }
          int v19 = 2 * v18;
          if (v19 <= (int)v17) {
            uint64_t v20 = v17;
          }
          else {
            uint64_t v20 = v19;
          }
          unsigned int v21 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v20, "Vector Storage (uint8_t, growth)");
          memcpy(v21, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v20;
          a1[5] = v21;
          unsigned int v22 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v21[v16 + 1], &v21[v16], v22 - v16);
        *(unsigned char *)(a1[5] + v16) = v5;
        int v41 = 1;
        goto LABEL_47;
      case 1u:
        unsigned int v35 = v15 + 3;
        int v36 = *((_DWORD *)a1 + 8);
        if (v35 <= v36)
        {
          unsigned int v39 = (char *)a1[5];
          unsigned int v40 = v16;
        }
        else
        {
          if (v36 <= 1) {
            int v36 = 1;
          }
          int v37 = 2 * v36;
          if (v37 <= (int)v35) {
            uint64_t v38 = v35;
          }
          else {
            uint64_t v38 = v37;
          }
          unsigned int v39 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v38, "Vector Storage (uint8_t, growth)");
          memcpy(v39, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v38;
          a1[5] = v39;
          unsigned int v40 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v39[v16 + 1], &v39[v16], v40 - v16);
        *(_WORD *)(a1[5] + v16) = v5;
        int v41 = 2;
        goto LABEL_47;
      case 2u:
        unsigned int v23 = v15 + 4;
        int v24 = *((_DWORD *)a1 + 8);
        if (v23 <= v24)
        {
          unsigned int v27 = (char *)a1[5];
          unsigned int v28 = v16;
        }
        else
        {
          if (v24 <= 1) {
            int v24 = 1;
          }
          int v25 = 2 * v24;
          if (v25 <= (int)v23) {
            uint64_t v26 = v23;
          }
          else {
            uint64_t v26 = v25;
          }
          unsigned int v27 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v26, "Vector Storage (uint8_t, growth)");
          memcpy(v27, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v26;
          a1[5] = v27;
          unsigned int v28 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v27[v16 + 1], &v27[v16], v28 - v16);
        uint64_t v42 = a1[5] + v16;
        *(unsigned char *)(v42 + 2) = BYTE2(v5);
        *(_WORD *)uint64_t v42 = v5;
        int v41 = 3;
        goto LABEL_47;
      case 3u:
        unsigned int v29 = v15 + 5;
        int v30 = *((_DWORD *)a1 + 8);
        if (v29 <= v30)
        {
          unsigned int v33 = (char *)a1[5];
          unsigned int v34 = v16;
        }
        else
        {
          if (v30 <= 1) {
            int v30 = 1;
          }
          int v31 = 2 * v30;
          if (v31 <= (int)v29) {
            uint64_t v32 = v29;
          }
          else {
            uint64_t v32 = v31;
          }
          unsigned int v33 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v32, "Vector Storage (uint8_t, growth)");
          memcpy(v33, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v32;
          a1[5] = v33;
          unsigned int v34 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v33[v16 + 1], &v33[v16], v34 - v16);
        *(_DWORD *)(a1[5] + v16) = v5;
        int v41 = 4;
LABEL_47:
        *((_DWORD *)a1 + 9) += v41;
        break;
      default:
        return result;
    }
  }
  return result;
}

void *serializeStructureFields(void *a1, uint64_t a2)
{
  serializeASTFields(a1, a2);
  FieldCFIndex Count = glpStructureNodeGetFieldCount(a2);
  int v5 = FieldCount;
  unsigned int v6 = (char)glp_serialized_integer32_control(FieldCount);
  int v7 = *((_DWORD *)a1 + 8);
  uint64_t v8 = *((unsigned int *)a1 + 9);
  int v9 = v8 + 1;
  if ((int)v8 + 1 <= v7)
  {
    int v12 = (char *)a1[5];
    int v13 = *((_DWORD *)a1 + 9);
  }
  else
  {
    if (v7 <= 1) {
      int v7 = 1;
    }
    int v10 = 2 * v7;
    if (v10 <= v9) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = v10;
    }
    int v12 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v11, "Vector Storage (uint8_t, growth)");
    memcpy(v12, (const void *)a1[5], *((unsigned int *)a1 + 9));
    ((void (*)(void, void))a1[3])(*a1, a1[5]);
    *((_DWORD *)a1 + 8) = v11;
    a1[5] = v12;
    int v13 = *((_DWORD *)a1 + 9);
  }
  uint64_t result = memmove(&v12[v8 + 1], &v12[v8], (v13 - v8));
  *(unsigned char *)(a1[5] + v8) = v6;
  int v15 = *((_DWORD *)a1 + 9);
  unsigned int v16 = v15 + 1;
  *((_DWORD *)a1 + 9) = v15 + 1;
  if ((v6 & 0x80000000) != 0)
  {
    switch((v6 >> 1) & 7)
    {
      case 0u:
        unsigned int v17 = v15 + 2;
        int v18 = *((_DWORD *)a1 + 8);
        if (v17 <= v18)
        {
          unsigned int v21 = (char *)a1[5];
          unsigned int v22 = v16;
        }
        else
        {
          if (v18 <= 1) {
            int v18 = 1;
          }
          int v19 = 2 * v18;
          if (v19 <= (int)v17) {
            uint64_t v20 = v17;
          }
          else {
            uint64_t v20 = v19;
          }
          unsigned int v21 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v20, "Vector Storage (uint8_t, growth)");
          memcpy(v21, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v20;
          a1[5] = v21;
          unsigned int v22 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v21[v16 + 1], &v21[v16], v22 - v16);
        *(unsigned char *)(a1[5] + v16) = v5;
        int v41 = 1;
        goto LABEL_47;
      case 1u:
        unsigned int v35 = v15 + 3;
        int v36 = *((_DWORD *)a1 + 8);
        if (v35 <= v36)
        {
          unsigned int v39 = (char *)a1[5];
          unsigned int v40 = v16;
        }
        else
        {
          if (v36 <= 1) {
            int v36 = 1;
          }
          int v37 = 2 * v36;
          if (v37 <= (int)v35) {
            uint64_t v38 = v35;
          }
          else {
            uint64_t v38 = v37;
          }
          unsigned int v39 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v38, "Vector Storage (uint8_t, growth)");
          memcpy(v39, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v38;
          a1[5] = v39;
          unsigned int v40 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v39[v16 + 1], &v39[v16], v40 - v16);
        *(_WORD *)(a1[5] + v16) = v5;
        int v41 = 2;
        goto LABEL_47;
      case 2u:
        unsigned int v23 = v15 + 4;
        int v24 = *((_DWORD *)a1 + 8);
        if (v23 <= v24)
        {
          unsigned int v27 = (char *)a1[5];
          unsigned int v28 = v16;
        }
        else
        {
          if (v24 <= 1) {
            int v24 = 1;
          }
          int v25 = 2 * v24;
          if (v25 <= (int)v23) {
            uint64_t v26 = v23;
          }
          else {
            uint64_t v26 = v25;
          }
          unsigned int v27 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v26, "Vector Storage (uint8_t, growth)");
          memcpy(v27, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v26;
          a1[5] = v27;
          unsigned int v28 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v27[v16 + 1], &v27[v16], v28 - v16);
        uint64_t v42 = a1[5] + v16;
        *(unsigned char *)(v42 + 2) = BYTE2(v5);
        *(_WORD *)uint64_t v42 = v5;
        int v41 = 3;
        goto LABEL_47;
      case 3u:
        unsigned int v29 = v15 + 5;
        int v30 = *((_DWORD *)a1 + 8);
        if (v29 <= v30)
        {
          unsigned int v33 = (char *)a1[5];
          unsigned int v34 = v16;
        }
        else
        {
          if (v30 <= 1) {
            int v30 = 1;
          }
          int v31 = 2 * v30;
          if (v31 <= (int)v29) {
            uint64_t v32 = v29;
          }
          else {
            uint64_t v32 = v31;
          }
          unsigned int v33 = (char *)((uint64_t (*)(void, uint64_t, const char *))a1[1])(*a1, v32, "Vector Storage (uint8_t, growth)");
          memcpy(v33, (const void *)a1[5], *((unsigned int *)a1 + 9));
          ((void (*)(void, void))a1[3])(*a1, a1[5]);
          *((_DWORD *)a1 + 8) = v32;
          a1[5] = v33;
          unsigned int v34 = *((_DWORD *)a1 + 9);
        }
        uint64_t result = memmove(&v33[v16 + 1], &v33[v16], v34 - v16);
        *(_DWORD *)(a1[5] + v16) = v5;
        int v41 = 4;
LABEL_47:
        *((_DWORD *)a1 + 9) += v41;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t serialize_GLPSubroutineUniformObject(void *a1, unint64_t a2)
{
  uint64_t result = serialize_pointer(a1, a2);
  if (result)
  {
    serialize_GLPString(a1, *(const char **)a2, *(void *)(a2 + 8));
    uint64_t v5 = *(void *)(a2 + 16);
    return serialize_GLPType(a1, v5);
  }
  return result;
}

uint64_t glpMakeCopyVarDeclFragment(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  __n128 v7 = *a2;
  unint64_t v8 = a2[1].n128_u64[0];
  glpMakeVariableDeclarationNode(a1, &v7, a3, a4, 0);
  uint64_t v5 = v4;
  glpVariableDeclarationNodeSetType(v4, 0);
  glpVariableDeclarationNodeSetInitializer(v5, 0);
  return v5;
}

uint64_t glpMakeCopyFunctionDefinitionFragment(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t *a4)
{
  __n128 v12 = *a2;
  unint64_t v13 = a2[1].n128_u64[0];
  uint64_t BlockNode = glpMakeBlockNode(a1, &v12, 0);
  *a4 = BlockNode;
  __n128 v12 = *a2;
  unint64_t v13 = a2[1].n128_u64[0];
  glpMakeFunctionDefinitionNode(a1, &v12);
  uint64_t v10 = v9;
  glpFunctionDefinitionNodeSetPrototype(v9, a3);
  glpFunctionDefinitionNodeSetBody(v10, BlockNode);
  return v10;
}

uint64_t glpMakeCopyInAssignFragment(uint64_t a1, __n128 *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14)
{
  uint64_t PrimitiveType = glpGetPrimitiveType(5u);
  __n128 v31 = *a2;
  unint64_t v32 = a2[1].n128_u64[0];
  glpMakeConstantNode(a1, &v31, (uint64_t)PrimitiveType, a9);
  uint64_t v24 = v23;
  *a8 = v23;
  __n128 v31 = *a2;
  unint64_t v32 = a2[1].n128_u64[0];
  uint64_t OffsetNode = glpMakeOffsetNode(a1, (long long *)&v31);
  glpOffsetNodeSetBankIndex(OffsetNode, 0);
  glpOffsetNodeSetOffsetExpr(OffsetNode, v24);
  glpOffsetNodeSetVectorElementExpr(OffsetNode, 0);
  *a7 = OffsetNode;
  __n128 v31 = *a2;
  unint64_t v32 = a2[1].n128_u64[0];
  uint64_t LValueNode = glpMakeLValueNode(a1, &v31, a4, a5, a6);
  glpDerefNodeSetOffset(LValueNode, OffsetNode);
  *a3 = LValueNode;
  __n128 v31 = *a2;
  unint64_t v32 = a2[1].n128_u64[0];
  uint64_t v27 = glpMakeOffsetNode(a1, (long long *)&v31);
  glpOffsetNodeSetBankIndex(v27, 0);
  glpOffsetNodeSetOffsetExpr(v27, 0);
  glpOffsetNodeSetVectorElementExpr(v27, 0);
  *a14 = v27;
  __n128 v31 = *a2;
  unint64_t v32 = a2[1].n128_u64[0];
  uint64_t v28 = glpMakeLValueNode(a1, &v31, a11, a12, a13);
  glpDerefNodeSetOffset(v28, v27);
  *a10 = v28;
  __n128 v31 = *a2;
  unint64_t v32 = a2[1].n128_u64[0];
  uint64_t AssignNode = glpMakeAssignNode(a1, &v31, 0);
  glpBinaryOperatorNodeSetLhs(AssignNode, LValueNode);
  glpBinaryOperatorNodeSetRhs(AssignNode, v28);
  return AssignNode;
}

uint64_t glpMakeCopyOutAssignFragment(uint64_t a1, __n128 *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t *a13, uint64_t a14)
{
  __n128 v31 = *a2;
  unint64_t v32 = a2[1].n128_u64[0];
  uint64_t OffsetNode = glpMakeOffsetNode(a1, (long long *)&v31);
  glpOffsetNodeSetBankIndex(OffsetNode, 0);
  glpOffsetNodeSetOffsetExpr(OffsetNode, 0);
  glpOffsetNodeSetVectorElementExpr(OffsetNode, 0);
  *a7 = OffsetNode;
  __n128 v31 = *a2;
  unint64_t v32 = a2[1].n128_u64[0];
  uint64_t LValueNode = glpMakeLValueNode(a1, &v31, a4, a5, a6);
  glpDerefNodeSetOffset(LValueNode, OffsetNode);
  *a3 = LValueNode;
  uint64_t PrimitiveType = glpGetPrimitiveType(5u);
  __n128 v31 = *a2;
  unint64_t v32 = a2[1].n128_u64[0];
  glpMakeConstantNode(a1, &v31, (uint64_t)PrimitiveType, a14);
  uint64_t v25 = v24;
  *a13 = v24;
  __n128 v31 = *a2;
  unint64_t v32 = a2[1].n128_u64[0];
  uint64_t v26 = glpMakeOffsetNode(a1, (long long *)&v31);
  glpOffsetNodeSetBankIndex(v26, 0);
  glpOffsetNodeSetOffsetExpr(v26, v25);
  glpOffsetNodeSetVectorElementExpr(v26, 0);
  *a12 = v26;
  __n128 v31 = *a2;
  unint64_t v32 = a2[1].n128_u64[0];
  uint64_t v27 = glpMakeLValueNode(a1, &v31, a9, a10, a11);
  glpDerefNodeSetOffset(v27, v26);
  *a8 = v27;
  __n128 v31 = *a2;
  unint64_t v32 = a2[1].n128_u64[0];
  uint64_t AssignNode = glpMakeAssignNode(a1, &v31, 0);
  glpBinaryOperatorNodeSetLhs(AssignNode, LValueNode);
  glpBinaryOperatorNodeSetRhs(AssignNode, v27);
  return AssignNode;
}

uint64_t glpMakeVRLFunctionFragment(void *a1, __n128 *a2, uint64_t a3)
{
  __n128 v7 = *a2;
  unint64_t v8 = a2[1].n128_u64[0];
  uint64_t PPStreamOpNode = glpMakePPStreamOpNode((uint64_t)a1, &v7, 0, 121, 0, 0, 0);
  glpCallNodeAddArg(a1, PPStreamOpNode, a3);
  return PPStreamOpNode;
}

uint64_t glpMakeStoreFragment(void *a1, __n128 *a2, int a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t *a15, uint64_t a16)
{
  uint64_t PrimitiveType = glpGetPrimitiveType(5u);
  __n128 v35 = *a2;
  unint64_t v36 = a2[1].n128_u64[0];
  glpMakeConstantNode((uint64_t)a1, &v35, (uint64_t)PrimitiveType, a5);
  uint64_t v25 = v24;
  *a4 = v24;
  __n128 v35 = *a2;
  unint64_t v36 = a2[1].n128_u64[0];
  uint64_t LValueNode = glpMakeLValueNode((uint64_t)a1, &v35, a7, a8, a9);
  glpDerefNodeSetOffset(LValueNode, 0);
  *a6 = LValueNode;
  uint64_t v27 = glpGetPrimitiveType(5u);
  __n128 v35 = *a2;
  unint64_t v36 = a2[1].n128_u64[0];
  glpMakeConstantNode((uint64_t)a1, &v35, (uint64_t)v27, a16);
  uint64_t v29 = v28;
  *a15 = v28;
  __n128 v35 = *a2;
  unint64_t v36 = a2[1].n128_u64[0];
  uint64_t OffsetNode = glpMakeOffsetNode((uint64_t)a1, (long long *)&v35);
  glpOffsetNodeSetBankIndex(OffsetNode, 0);
  glpOffsetNodeSetOffsetExpr(OffsetNode, v29);
  glpOffsetNodeSetVectorElementExpr(OffsetNode, 0);
  *a14 = OffsetNode;
  __n128 v35 = *a2;
  unint64_t v36 = a2[1].n128_u64[0];
  uint64_t v31 = glpMakeLValueNode((uint64_t)a1, &v35, a11, a12, a13);
  glpDerefNodeSetOffset(v31, OffsetNode);
  *a10 = v31;
  __n128 v35 = *a2;
  unint64_t v36 = a2[1].n128_u64[0];
  uint64_t PPStreamOpNode = glpMakePPStreamOpNode((uint64_t)a1, &v35, 0, 153, a3, 0, 0);
  glpCallNodeAddArg(a1, PPStreamOpNode, v25);
  glpCallNodeAddArg(a1, PPStreamOpNode, LValueNode);
  glpCallNodeAddArg(a1, PPStreamOpNode, v31);
  return PPStreamOpNode;
}

uint64_t glpMakeMainReturnFragment(void *a1, __n128 *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 v14 = *a2;
  unint64_t v15 = a2[1].n128_u64[0];
  glpMakeRawCallNode((uint64_t)a1, &v14, a4, a5, a6);
  uint64_t v10 = v9;
  *a3 = v9;
  __n128 v14 = *a2;
  unint64_t v15 = a2[1].n128_u64[0];
  uint64_t ReturnStatementNode = glpMakeReturnStatementNode((uint64_t)a1, &v14);
  glpReturnStatementNodeSetExpr(ReturnStatementNode, 0);
  __n128 v14 = *a2;
  unint64_t v15 = a2[1].n128_u64[0];
  uint64_t BlockNode = glpMakeBlockNode((uint64_t)a1, &v14, 0);
  glpBlockNodeAddStatement(a1, BlockNode, v10);
  glpBlockNodeAddStatement(a1, BlockNode, ReturnStatementNode);
  return BlockNode;
}

uint64_t glpMakeIncrementFragment(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t Allocator = (void *)glpCompilerGetAllocator(a1);
  uint64_t SaType = glpASTNodeGetSaType(a3);
  uint64_t PrimitiveType = glpPrimitiveTypeGetPrimitiveType(SaType);
  int ScalarType = glpPrimitiveTypeGetScalarType(PrimitiveType);
  __n128 v22 = *a2;
  unint64_t v23 = a2[1].n128_u64[0];
  glpMakePrimitiveTypeNode((uint64_t)Allocator, &v22, ScalarType);
  uint64_t v13 = v12;
  __n128 v14 = glpGetPrimitiveType(5u);
  uint64_t IntConstant = glpCompilerGetIntConstant(a1, 1);
  __n128 v22 = *a2;
  unint64_t v23 = a2[1].n128_u64[0];
  glpMakeConstantNode((uint64_t)Allocator, &v22, (uint64_t)v14, IntConstant);
  uint64_t v17 = v16;
  __n128 v22 = *a2;
  unint64_t v23 = a2[1].n128_u64[0];
  uint64_t v18 = glpMakeConstructorCallNode((uint64_t)Allocator, &v22);
  glpConstructorCallNodeSetType(v18, v13);
  glpCallNodeAddArg(Allocator, v18, v17);
  __n128 v22 = *a2;
  unint64_t v23 = a2[1].n128_u64[0];
  uint64_t AddNode = glpMakeAddNode((uint64_t)Allocator, &v22);
  glpBinaryOperatorNodeSetLhs(AddNode, a4);
  glpBinaryOperatorNodeSetRhs(AddNode, v18);
  __n128 v22 = *a2;
  unint64_t v23 = a2[1].n128_u64[0];
  uint64_t AssignNode = glpMakeAssignNode((uint64_t)Allocator, &v22, 0);
  glpBinaryOperatorNodeSetLhs(AssignNode, a3);
  glpBinaryOperatorNodeSetRhs(AssignNode, AddNode);
  return glpSANode(a1, AssignNode);
}

uint64_t glpMakeDecrementFragment(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t Allocator = (void *)glpCompilerGetAllocator(a1);
  uint64_t SaType = glpASTNodeGetSaType(a3);
  uint64_t PrimitiveType = glpPrimitiveTypeGetPrimitiveType(SaType);
  int ScalarType = glpPrimitiveTypeGetScalarType(PrimitiveType);
  __n128 v22 = *a2;
  unint64_t v23 = a2[1].n128_u64[0];
  glpMakePrimitiveTypeNode((uint64_t)Allocator, &v22, ScalarType);
  uint64_t v13 = v12;
  __n128 v14 = glpGetPrimitiveType(5u);
  uint64_t IntConstant = glpCompilerGetIntConstant(a1, 1);
  __n128 v22 = *a2;
  unint64_t v23 = a2[1].n128_u64[0];
  glpMakeConstantNode((uint64_t)Allocator, &v22, (uint64_t)v14, IntConstant);
  uint64_t v17 = v16;
  __n128 v22 = *a2;
  unint64_t v23 = a2[1].n128_u64[0];
  uint64_t v18 = glpMakeConstructorCallNode((uint64_t)Allocator, &v22);
  glpConstructorCallNodeSetType(v18, v13);
  glpCallNodeAddArg(Allocator, v18, v17);
  __n128 v22 = *a2;
  unint64_t v23 = a2[1].n128_u64[0];
  uint64_t SubtractNode = glpMakeSubtractNode((uint64_t)Allocator, &v22);
  glpBinaryOperatorNodeSetLhs(SubtractNode, a4);
  glpBinaryOperatorNodeSetRhs(SubtractNode, v18);
  __n128 v22 = *a2;
  unint64_t v23 = a2[1].n128_u64[0];
  uint64_t AssignNode = glpMakeAssignNode((uint64_t)Allocator, &v22, 0);
  glpBinaryOperatorNodeSetLhs(AssignNode, a3);
  glpBinaryOperatorNodeSetRhs(AssignNode, SubtractNode);
  return glpSANode(a1, AssignNode);
}

uint64_t glpMakeConstantValueFragment(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t Allocator = glpCompilerGetAllocator(a1);
  __n128 v11 = *a2;
  unint64_t v12 = a2[1].n128_u64[0];
  glpMakeConstantNode(Allocator, &v11, a3, a4);
  return glpSANode(a1, v9);
}

uint64_t glpMakeArrayIndexOffsetFragment(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t Allocator = glpCompilerGetAllocator(a1);
  uint64_t PrimitiveType = glpGetPrimitiveType(5u);
  __n128 v17 = *a2;
  unint64_t v18 = a2[1].n128_u64[0];
  glpMakeConstantNode(Allocator, &v17, (uint64_t)PrimitiveType, a5);
  uint64_t v13 = v12;
  __n128 v17 = *a2;
  unint64_t v18 = a2[1].n128_u64[0];
  uint64_t MultiplyNode = glpMakeMultiplyNode(Allocator, &v17);
  glpBinaryOperatorNodeSetLhs(MultiplyNode, a4);
  glpBinaryOperatorNodeSetRhs(MultiplyNode, v13);
  __n128 v17 = *a2;
  unint64_t v18 = a2[1].n128_u64[0];
  uint64_t AddNode = glpMakeAddNode(Allocator, &v17);
  glpBinaryOperatorNodeSetLhs(AddNode, a3);
  glpBinaryOperatorNodeSetRhs(AddNode, MultiplyNode);
  return glpSANode(a1, AddNode);
}

uint64_t glpMakeFieldOffsetFragment(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t Allocator = glpCompilerGetAllocator(a1);
  uint64_t PrimitiveType = glpGetPrimitiveType(5u);
  __n128 v14 = *a2;
  unint64_t v15 = a2[1].n128_u64[0];
  glpMakeConstantNode(Allocator, &v14, (uint64_t)PrimitiveType, a4);
  uint64_t v11 = v10;
  __n128 v14 = *a2;
  unint64_t v15 = a2[1].n128_u64[0];
  uint64_t AddNode = glpMakeAddNode(Allocator, &v14);
  glpBinaryOperatorNodeSetLhs(AddNode, a3);
  glpBinaryOperatorNodeSetRhs(AddNode, v11);
  return glpSANode(a1, AddNode);
}

uint64_t glpMakeIfExprFragment(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t Allocator = (void *)glpCompilerGetAllocator(a1);
  char SaFlags = glpASTNodeGetSaFlags(a7);
  int v17 = glpPrecisionQualifierFromSaFlags(SaFlags);
  __n128 v38 = *a2;
  unint64_t v39 = a2[1].n128_u64[0];
  uint64_t KeywordQualifierNode = glpMakeKeywordQualifierNode((uint64_t)Allocator, &v38, v17);
  __n128 v38 = *a2;
  unint64_t v39 = a2[1].n128_u64[0];
  glpMakeQualifiedTypeNode((uint64_t)Allocator, &v38);
  uint64_t v20 = v19;
  glpQualifiedTypeNodeSetType(v19, a5);
  glpQualifiedTypeNodeSetQualifiers(v20, KeywordQualifierNode);
  __n128 v38 = *a2;
  unint64_t v39 = a2[1].n128_u64[0];
  glpMakeVariableDeclarationNode((uint64_t)Allocator, &v38, a3, a4, 0);
  uint64_t v22 = v21;
  glpVariableDeclarationNodeSetType(v21, v20);
  glpVariableDeclarationNodeSetInitializer(v22, 0);
  __n128 v38 = *a2;
  unint64_t v39 = a2[1].n128_u64[0];
  glpMakeVariableIdentifierNode((uint64_t)Allocator, &v38, a3, a4);
  uint64_t v24 = v23;
  __n128 v38 = *a2;
  unint64_t v39 = a2[1].n128_u64[0];
  uint64_t AssignNode = glpMakeAssignNode((uint64_t)Allocator, &v38, 0);
  glpBinaryOperatorNodeSetLhs(AssignNode, v24);
  glpBinaryOperatorNodeSetRhs(AssignNode, a7);
  __n128 v38 = *a2;
  unint64_t v39 = a2[1].n128_u64[0];
  uint64_t BlockNode = glpMakeBlockNode((uint64_t)Allocator, &v38, 0);
  glpBlockNodeAddStatement(Allocator, BlockNode, AssignNode);
  __n128 v38 = *a2;
  unint64_t v39 = a2[1].n128_u64[0];
  glpMakeVariableIdentifierNode((uint64_t)Allocator, &v38, a3, a4);
  uint64_t v28 = v27;
  __n128 v38 = *a2;
  unint64_t v39 = a2[1].n128_u64[0];
  uint64_t v29 = glpMakeAssignNode((uint64_t)Allocator, &v38, 0);
  glpBinaryOperatorNodeSetLhs(v29, v28);
  glpBinaryOperatorNodeSetRhs(v29, a8);
  __n128 v38 = *a2;
  unint64_t v39 = a2[1].n128_u64[0];
  uint64_t v30 = glpMakeBlockNode((uint64_t)Allocator, &v38, 0);
  glpBlockNodeAddStatement(Allocator, v30, v29);
  __n128 v38 = *a2;
  unint64_t v39 = a2[1].n128_u64[0];
  uint64_t IfStatementNode = glpMakeIfStatementNode((uint64_t)Allocator, &v38);
  glpIfStatementNodeSetCond(IfStatementNode, a6);
  glpIfStatementNodeSetIfStatement(IfStatementNode, BlockNode);
  glpIfStatementNodeSetElseStatement(IfStatementNode, v30);
  __n128 v38 = *a2;
  unint64_t v39 = a2[1].n128_u64[0];
  glpMakeVariableIdentifierNode((uint64_t)Allocator, &v38, a3, a4);
  uint64_t v33 = v32;
  __n128 v38 = *a2;
  unint64_t v39 = a2[1].n128_u64[0];
  glpMakeCommaExprNode((uint64_t)Allocator, &v38, 0);
  uint64_t v35 = v34;
  glpCommaExprNodeAddExpr(Allocator, v34, v22);
  glpCommaExprNodeAddExpr(Allocator, v35, IfStatementNode);
  glpCommaExprNodeAddExpr(Allocator, v35, v33);
  return glpSANode(a1, v35);
}

uint64_t glpMakeTypedVariableFragment(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  __n128 v17 = *a2;
  unint64_t v18 = a2[1].n128_u64[0];
  glpMakeTypeIdentifierNode(a1, &v17, (uint64_t)"<<BUG: placeholder type still exists>>", 0x781A7BE300000026);
  uint64_t v13 = v12;
  *a5 = v12;
  __n128 v17 = *a2;
  unint64_t v18 = a2[1].n128_u64[0];
  glpMakeVariableDeclarationNode(a1, &v17, a3, a4, 0);
  uint64_t v15 = v14;
  glpVariableDeclarationNodeSetType(v14, v13);
  glpVariableDeclarationNodeSetInitializer(v15, a6);
  return v15;
}

uint64_t glpMakeFieldAccessFragment(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 v9 = *a2;
  unint64_t v10 = a2[1].n128_u64[0];
  glpMakeFieldAccessNode(a1, &v9, a3, a4);
  uint64_t v7 = v6;
  glpFieldAccessNodeSetStructure(v6, a5);
  return v7;
}

uint64_t glpMakeArrayAccessFragment(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t PrimitiveType = glpGetPrimitiveType(5u);
  __n128 v14 = *a2;
  unint64_t v15 = a2[1].n128_u64[0];
  glpMakeConstantNode(a1, &v14, (uint64_t)PrimitiveType, a4);
  uint64_t v10 = v9;
  __n128 v14 = *a2;
  unint64_t v15 = a2[1].n128_u64[0];
  glpMakeArrayAccessNode(a1, &v14);
  uint64_t v12 = v11;
  glpArrayAccessNodeSetArray(v11, a3);
  glpArrayAccessNodeSetElement(v12, v10);
  return v12;
}

uint64_t glpMakeAssignFragment(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t Allocator = glpCompilerGetAllocator(a1);
  __n128 v11 = *a2;
  unint64_t v12 = a2[1].n128_u64[0];
  uint64_t AssignNode = glpMakeAssignNode(Allocator, &v11, 0);
  glpBinaryOperatorNodeSetLhs(AssignNode, a3);
  glpBinaryOperatorNodeSetRhs(AssignNode, a4);
  return glpSANode(a1, AssignNode);
}

uint64_t glpMakeEqualFragment(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t Allocator = glpCompilerGetAllocator(a1);
  __n128 v11 = *a2;
  unint64_t v12 = a2[1].n128_u64[0];
  uint64_t EqualNode = glpMakeEqualNode(Allocator, &v11, 0);
  glpBinaryOperatorNodeSetLhs(EqualNode, a3);
  glpBinaryOperatorNodeSetRhs(EqualNode, a4);
  return glpSANode(a1, EqualNode);
}

uint64_t glpMakeNotEqualFragment(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t Allocator = glpCompilerGetAllocator(a1);
  __n128 v11 = *a2;
  unint64_t v12 = a2[1].n128_u64[0];
  Notuint64_t EqualNode = glpMakeNotEqualNode(Allocator, &v11, 0);
  glpBinaryOperatorNodeSetLhs(NotEqualNode, a3);
  glpBinaryOperatorNodeSetRhs(NotEqualNode, a4);
  return glpSANode(a1, NotEqualNode);
}

uint64_t glpMakeLogicalAndFragment(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t Allocator = glpCompilerGetAllocator(a1);
  __n128 v11 = *a2;
  unint64_t v12 = a2[1].n128_u64[0];
  uint64_t LogicalAndNode = glpMakeLogicalAndNode(Allocator, &v11);
  glpBinaryOperatorNodeSetLhs(LogicalAndNode, a3);
  glpBinaryOperatorNodeSetRhs(LogicalAndNode, a4);
  return glpSANode(a1, LogicalAndNode);
}

uint64_t glpMakeLogicalOrFragment(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t Allocator = glpCompilerGetAllocator(a1);
  __n128 v11 = *a2;
  unint64_t v12 = a2[1].n128_u64[0];
  uint64_t LogicalOrNode = glpMakeLogicalOrNode(Allocator, &v11);
  glpBinaryOperatorNodeSetLhs(LogicalOrNode, a3);
  glpBinaryOperatorNodeSetRhs(LogicalOrNode, a4);
  return glpSANode(a1, LogicalOrNode);
}

uint64_t glpMakeAddFragment(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t Allocator = glpCompilerGetAllocator(a1);
  __n128 v11 = *a2;
  unint64_t v12 = a2[1].n128_u64[0];
  uint64_t AddNode = glpMakeAddNode(Allocator, &v11);
  glpBinaryOperatorNodeSetLhs(AddNode, a3);
  glpBinaryOperatorNodeSetRhs(AddNode, a4);
  return glpSANode(a1, AddNode);
}

uint64_t glpMakeUnopFuncallFragment(void *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 v9 = *a2;
  unint64_t v10 = a2[1].n128_u64[0];
  uint64_t v7 = glpMakeFunctionCallNode((uint64_t)a1, &v9, a3, a4);
  glpCallNodeAddArg(a1, v7, a5);
  return v7;
}

uint64_t glpMakeBinopFuncallFragment(void *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 v11 = *a2;
  unint64_t v12 = a2[1].n128_u64[0];
  uint64_t v9 = glpMakeFunctionCallNode((uint64_t)a1, &v11, a3, a4);
  glpCallNodeAddArg(a1, v9, a5);
  glpCallNodeAddArg(a1, v9, a6);
  return v9;
}

uint64_t glpMakeSubroutineImplementationFragment(void *a1, __n128 *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  __n128 v23 = *a2;
  unint64_t v24 = a2[1].n128_u64[0];
  glpMakeFunctionPrototypeNode((uint64_t)a1, &v23, a4, a5);
  uint64_t v16 = v15;
  glpFunctionPrototypeNodeSetReturnType(v15, 0);
  glpFunctionPrototypeNodeSetReturnOutParam(v16, 0);
  *a3 = v16;
  __n128 v23 = *a2;
  unint64_t v24 = a2[1].n128_u64[0];
  uint64_t v17 = glpMakeFunctionCallNode((uint64_t)a1, &v23, a9, a10);
  *a7 = v17;
  __n128 v23 = *a2;
  unint64_t v24 = a2[1].n128_u64[0];
  uint64_t ReturnStatementNode = glpMakeReturnStatementNode((uint64_t)a1, &v23);
  glpReturnStatementNodeSetExpr(ReturnStatementNode, v17);
  __n128 v23 = *a2;
  unint64_t v24 = a2[1].n128_u64[0];
  uint64_t BlockNode = glpMakeBlockNode((uint64_t)a1, &v23, 0);
  glpBlockNodeAddStatement(a1, BlockNode, ReturnStatementNode);
  *a6 = BlockNode;
  __n128 v23 = *a2;
  unint64_t v24 = a2[1].n128_u64[0];
  glpMakeFunctionDefinitionNode((uint64_t)a1, &v23);
  uint64_t v21 = v20;
  glpFunctionDefinitionNodeSetPrototype(v20, v16);
  glpFunctionDefinitionNodeSetBody(v21, BlockNode);
  return v21;
}

uint64_t glpMakeSubroutineParameterFragment(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  __n128 v7 = *a2;
  unint64_t v8 = a2[1].n128_u64[0];
  glpMakeParameterDeclarationNode(a1, &v7, a3, a4);
  uint64_t v5 = v4;
  glpParameterDeclarationNodeSetType(v4, 0);
  return v5;
}

uint64_t glpMakeWhileFragment(void *a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  __n128 v14 = *a2;
  unint64_t v15 = a2[1].n128_u64[0];
  uint64_t LogicalNotNode = glpMakeLogicalNotNode((uint64_t)a1, &v14);
  glpUnaryOperatorNodeSetExpr(LogicalNotNode, a3);
  __n128 v14 = *a2;
  unint64_t v15 = a2[1].n128_u64[0];
  uint64_t BreakStatementNode = glpMakeBreakStatementNode((uint64_t)a1, &v14);
  __n128 v14 = *a2;
  unint64_t v15 = a2[1].n128_u64[0];
  uint64_t IfStatementNode = glpMakeIfStatementNode((uint64_t)a1, &v14);
  glpIfStatementNodeSetCond(IfStatementNode, LogicalNotNode);
  glpIfStatementNodeSetIfStatement(IfStatementNode, BreakStatementNode);
  glpIfStatementNodeSetElseStatement(IfStatementNode, 0);
  __n128 v14 = *a2;
  unint64_t v15 = a2[1].n128_u64[0];
  uint64_t BlockNode = glpMakeBlockNode((uint64_t)a1, &v14, 1);
  glpBlockNodeAddStatement(a1, BlockNode, IfStatementNode);
  glpBlockNodeAddStatement(a1, BlockNode, a4);
  __n128 v14 = *a2;
  unint64_t v15 = a2[1].n128_u64[0];
  uint64_t LoopStatementNode = glpMakeLoopStatementNode((uint64_t)a1, &v14);
  glpLoopStatementNodeSetBody0(LoopStatementNode, BlockNode);
  glpLoopStatementNodeSetBody1(LoopStatementNode, 0);
  return LoopStatementNode;
}

uint64_t glpMakeDoWhileFragment(void *a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  __n128 v15 = *a2;
  unint64_t v16 = a2[1].n128_u64[0];
  uint64_t BlockNode = glpMakeBlockNode((uint64_t)a1, &v15, 1);
  glpBlockNodeAddStatement(a1, BlockNode, a3);
  __n128 v15 = *a2;
  unint64_t v16 = a2[1].n128_u64[0];
  uint64_t LogicalNotNode = glpMakeLogicalNotNode((uint64_t)a1, &v15);
  glpUnaryOperatorNodeSetExpr(LogicalNotNode, a4);
  __n128 v15 = *a2;
  unint64_t v16 = a2[1].n128_u64[0];
  uint64_t BreakStatementNode = glpMakeBreakStatementNode((uint64_t)a1, &v15);
  __n128 v15 = *a2;
  unint64_t v16 = a2[1].n128_u64[0];
  uint64_t IfStatementNode = glpMakeIfStatementNode((uint64_t)a1, &v15);
  glpIfStatementNodeSetCond(IfStatementNode, LogicalNotNode);
  glpIfStatementNodeSetIfStatement(IfStatementNode, BreakStatementNode);
  glpIfStatementNodeSetElseStatement(IfStatementNode, 0);
  __n128 v15 = *a2;
  unint64_t v16 = a2[1].n128_u64[0];
  uint64_t v12 = glpMakeBlockNode((uint64_t)a1, &v15, 1);
  glpBlockNodeAddStatement(a1, v12, IfStatementNode);
  __n128 v15 = *a2;
  unint64_t v16 = a2[1].n128_u64[0];
  uint64_t LoopStatementNode = glpMakeLoopStatementNode((uint64_t)a1, &v15);
  glpLoopStatementNodeSetBody0(LoopStatementNode, BlockNode);
  glpLoopStatementNodeSetBody1(LoopStatementNode, v12);
  return LoopStatementNode;
}

uint64_t glpMakeForFragment(void *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 v19 = *a2;
  unint64_t v20 = a2[1].n128_u64[0];
  uint64_t LogicalNotNode = glpMakeLogicalNotNode((uint64_t)a1, &v19);
  glpUnaryOperatorNodeSetExpr(LogicalNotNode, a4);
  __n128 v19 = *a2;
  unint64_t v20 = a2[1].n128_u64[0];
  uint64_t BreakStatementNode = glpMakeBreakStatementNode((uint64_t)a1, &v19);
  __n128 v19 = *a2;
  unint64_t v20 = a2[1].n128_u64[0];
  uint64_t IfStatementNode = glpMakeIfStatementNode((uint64_t)a1, &v19);
  glpIfStatementNodeSetCond(IfStatementNode, LogicalNotNode);
  glpIfStatementNodeSetIfStatement(IfStatementNode, BreakStatementNode);
  glpIfStatementNodeSetElseStatement(IfStatementNode, 0);
  __n128 v19 = *a2;
  unint64_t v20 = a2[1].n128_u64[0];
  uint64_t BlockNode = glpMakeBlockNode((uint64_t)a1, &v19, 0);
  glpBlockNodeAddStatement(a1, BlockNode, IfStatementNode);
  glpBlockNodeAddStatement(a1, BlockNode, a5);
  __n128 v19 = *a2;
  unint64_t v20 = a2[1].n128_u64[0];
  uint64_t LoopStatementNode = glpMakeLoopStatementNode((uint64_t)a1, &v19);
  glpLoopStatementNodeSetBody0(LoopStatementNode, BlockNode);
  glpLoopStatementNodeSetBody1(LoopStatementNode, a6);
  __n128 v19 = *a2;
  unint64_t v20 = a2[1].n128_u64[0];
  uint64_t v17 = glpMakeBlockNode((uint64_t)a1, &v19, 1);
  glpBlockNodeAddStatement(a1, v17, a3);
  glpBlockNodeAddStatement(a1, v17, LoopStatementNode);
  return v17;
}

uint64_t glpDumpASTNodeToStringBuffer(uint64_t *a1, unint64_t a2)
{
  uint64_t PointerHash = glpMakePointerHash(&GLP_MALLOC_ALLOCATOR);
  writeASTNode(PointerHash, a1, a2, 0, 1, v5, v6, v7, v15);
  glpStringBufferAppendFormat(a1, "\n", v8, v9, v10, v11, v12, v13, v16);

  return glpDestroyPointerHash(PointerHash);
}

uint64_t writeASTNode(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = a4;
  if (a3 == -1)
  {
    if (a4)
    {
      uint64_t v12 = "<<FAILED>>";
      do
      {
        glpStringBufferAppendFormat(a2, "    ", a3, a4, a5, a6, a7, a8, v48);
        LODWORD(v9) = v9 - 1;
      }
      while (v9);
    }
    else
    {
      uint64_t v12 = "<<FAILED>>";
    }
  }
  else
  {
    if (!a3)
    {
      if (a4)
      {
        uint64_t v12 = "NIL";
        do
        {
          glpStringBufferAppendFormat(a2, "    ", a3, a4, a5, a6, a7, a8, v48);
          LODWORD(v9) = v9 - 1;
        }
        while (v9);
      }
      else
      {
        uint64_t v12 = "NIL";
      }
      goto LABEL_127;
    }
    int v13 = a5;
    if (a1)
    {
      if (glpPointerHashGet(a1, a3))
      {
        if (v9)
        {
          int v22 = v9;
          do
          {
            glpStringBufferAppendFormat(a2, "    ", v15, v16, v17, v18, v19, v20, v48);
            --v22;
          }
          while (v22);
          glpStringBufferAppendFormat(a2, "<<PREVIOUSLY VISITED:\n", v15, v16, v17, v18, v19, v20, v48);
          writeASTNode(0, a2, a3, (v9 + 1), 0);
          glpStringBufferAppendFormat(a2, "\n", v23, v24, v25, v26, v27, v28, v49);
          uint64_t v12 = ">>\n";
          do
          {
            glpStringBufferAppendFormat(a2, "    ", a3, a4, a5, a6, a7, a8, v50);
            LODWORD(v9) = v9 - 1;
          }
          while (v9);
          goto LABEL_127;
        }
        glpStringBufferAppendFormat(a2, "<<PREVIOUSLY VISITED:\n", v15, v16, v17, v18, v19, v20, v48);
        writeASTNode(0, a2, a3, 1, 0);
        uint64_t v12 = ">>\n";
        uint64_t v42 = "\n";
LABEL_126:
        glpStringBufferAppendFormat(a2, v42, v36, v37, v38, v39, v40, v41, v48);
        goto LABEL_127;
      }
      glpPointerHashPut(a1, a3, 1, v21);
    }
    if (v9)
    {
      int v29 = v9;
      do
      {
        glpStringBufferAppendFormat(a2, "    ", a3, a4, a5, a6, a7, a8, v48);
        --v29;
      }
      while (v29);
    }
    switch(glpASTNodeGetKind(a3))
    {
      case 0u:
        writeTypeConversion(a2, a3, v9, v31, v32, v33, v34, v35);
        break;
      case 1u:
        writeVariableIdentifier(a2, a3, v9, v31, v32, v33, v34, v35);
        break;
      case 2u:
        writeTypeIdentifier(a2, a3, v9, v31, v32, v33, v34, v35);
        break;
      case 3u:
        writeConstant(a2, a3, v9, v31, v32, v33, v34, v35);
        break;
      case 4u:
        writeArrayAccess(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 5u:
        writeFieldAccess(a2, a3, v9, v31, v32, v33, v34, v35);
        break;
      case 6u:
        writeUndeterminedCall(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 7u:
        writeFunctionCall(a2, a3, v9, v31, v32, v33, v34, v35);
        break;
      case 8u:
        writeSubroutineArrayCall(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 9u:
        writeMethodCall(a2, a3, v9, v31, v32, v33, v34, v35);
        break;
      case 0xAu:
        writeConstructorCall(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0xBu:
        writePostincrement(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0xCu:
        writePostdecrement(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0xDu:
        writePreincrement(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0xEu:
        writePredecrement(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0xFu:
        writeUnaryPlus(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x10u:
        writeNegate(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x11u:
        writeLogicalNot(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x12u:
        writeBitwiseNot(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x13u:
        writeMultiply(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x14u:
        writeDivide(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x15u:
        writeModulo(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x16u:
        writeAdd(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x17u:
        writeSubtract(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x18u:
        writeShiftLeft(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x19u:
        writeShiftRight(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x1Au:
        writeLess(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x1Bu:
        writeLessEqual(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x1Cu:
        writeGreater(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x1Du:
        writeGreaterEqual(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x1Eu:
        writeEqual(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x1Fu:
        writeNotEqual(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x20u:
        writeLogicalAnd(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x21u:
        writeLogicalOr(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x22u:
        writeLogicalXor(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x23u:
        writeBitwiseAnd(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x24u:
        writeBitwiseOr(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x25u:
        writeBitwiseXor(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x26u:
        writeIfExpr(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x27u:
        writeAssign(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x28u:
        writeOpAssign(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x29u:
        writeReadInput(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x2Au:
        writeWriteOutput(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x2Bu:
        writeCommaExpr(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x2Cu:
        writeParameterDeclaration(a2, a3, v9, v31, v32, v33, v34, v35);
        break;
      case 0x2Du:
        writeFunctionPrototype(a2, a3, v9, v31, v32, v33, v34, v35, v48);
        break;
      case 0x2Eu:
        writeVariableDeclaration(a2, a3, v9, v31, v32, v33, v34, v35, v48);
        break;
      case 0x2Fu:
        writeVariableDeclarationGroup(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x30u:
        writePrecisionDeclaration(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x31u:
        writeQualifiedDeclaration(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x32u:
        writeQualifiedDeclarationGroup(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x33u:
        writeFunctionDefinition(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x34u:
        writeQualifiedType(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x35u:
        writePrimitiveType(a2, a3, v9, v31, v32, v33, v34, v35);
        break;
      case 0x36u:
        writeArrayType(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x37u:
        writeFieldDeclaration(a2, a3, v9, v31, v32, v33, v34, v35);
        break;
      case 0x38u:
        writeStructType(a2, a3, v9, v31, v32, v33, v34, v35);
        break;
      case 0x39u:
        writeInterfaceBlock(a2, a3, v9, v31, v32, v33, v34, v35);
        break;
      case 0x3Au:
        writeLayoutType(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x3Bu:
        writeKeywordQualifier(a2, a3, v9, v31, v32, v33, v34, v35);
        break;
      case 0x3Cu:
        writeLayoutQualifier(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x3Du:
        writeSubroutineTypeList(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x3Eu:
        writeQualifierList(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x3Fu:
        writeGlobalTypeQualifier(a2, a3, v9, v31, v32, v33, v34, v35, v48);
        break;
      case 0x40u:
        writeLayoutPair(a2, a3, v9, v31, v32, v33, v34, v35);
        break;
      case 0x41u:
        writeExpressionStatement(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x42u:
        writeBlock(a2, a3, v9, v31, v32, v33, v34, v35);
        break;
      case 0x43u:
        writeIfStatement(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x44u:
        writeLoopStatement(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x45u:
        writeSwitchStatement(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x46u:
        writeCaseStatement(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x47u:
        writeDefaultStatement(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x48u:
        writeBreakStatement(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x49u:
        writeContinueStatement(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x4Au:
        writeDiscardStatement(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x4Bu:
        writeReturnStatement(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x4Cu:
        writeTopLevel(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x4Du:
        writeAvailabilityDeclaration(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x4Eu:
        writeRawCall(a2, a3, v9, v31, v32, v33, v34, v35);
        break;
      case 0x4Fu:
        writeSubroutineRawCall(a2, a3, v9, v31, v32, v33, v34, v35);
        break;
      case 0x50u:
        writeOffset(a2, a3, v9, v31, v32, v33, v34, v35);
        break;
      case 0x51u:
        writeLValue(a2, a3, v9, v31, v32, v33, v34, v35);
        break;
      case 0x52u:
        writeRValue(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x53u:
        writeIBPartialDeref(a2, a3, v30, v31, v32, v33, v34, v35, v48);
        break;
      case 0x54u:
        writePPStreamOp(a2, a3, v9, v31, v32, v33, v34, v35);
        break;
      case 0x55u:
        writeSubroutineUniform(a2, a3, v9, v31, v32, v33, v34, v35);
        break;
      default:
        abort();
    }
    if (!v13)
    {
      if (v9 == -1)
      {
        uint64_t v12 = ")";
        uint64_t v42 = "<<KIDS ELIDED TO AVOID RECURSION>>";
      }
      else
      {
        int v46 = v9 + 1;
        uint64_t v12 = ")";
        uint64_t v42 = "<<KIDS ELIDED TO AVOID RECURSION>>";
        do
        {
          glpStringBufferAppendFormat(a2, "    ", v36, v37, v38, v39, v40, v41, v48);
          --v46;
        }
        while (v46);
      }
      goto LABEL_126;
    }
    if (glpASTNodeGetChildCount(a3))
    {
      unsigned int v43 = 0;
      uint64_t v44 = (v9 + 1);
      uint64_t v12 = ")";
      do
      {
        if (v43) {
          glpStringBufferAppendFormat(a2, "\n", a3, a4, a5, a6, a7, a8, v48);
        }
        uint64_t Child = glpASTNodeGetChild(a3, v43);
        writeASTNode(a1, a2, Child, v44, 1);
        ++v43;
      }
      while (v43 < glpASTNodeGetChildCount(a3));
    }
    else
    {
      uint64_t v12 = ")";
    }
  }
LABEL_127:

  return glpStringBufferAppendFormat(a2, v12, a3, a4, a5, a6, a7, a8, a9);
}

void *writeTypeConversion(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  glpStringBufferAppendFormat(a1, "(TypeConversion:", a3, a4, a5, a6, a7, a8, v33);
  writeSAInfo(a1, a2);
  glpStringBufferAppendFormat(a1, "\n", v11, v12, v13, v14, v15, v16, v34);
  if (v8 != -1)
  {
    int v23 = v8 + 1;
    do
    {
      glpStringBufferAppendFormat(a1, "    ", v17, v18, v19, v20, v21, v22, v35);
      --v23;
    }
    while (v23);
  }
  uint64_t v24 = glpTypeConversionNodeGetToPrecision(a2);
  glpAppendFlagDescription(a1, v24);
  glpStringBufferAppendCString(a1, " ");
  uint64_t v25 = glpTypeConversionNodeGetToType(a2);
  glpDumpTypeToStringBuffer(a1, v25, v26, v27, v28, v29, v30, v31, v35);

  return glpStringBufferAppendCString(a1, "\n");
}

uint64_t writeVariableIdentifier(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  glpStringBufferAppendFormat(a1, "(VariableIdentifier:", a3, a4, a5, a6, a7, a8, v33);
  writeSAInfo(a1, a2);
  glpStringBufferAppendFormat(a1, "\n", v11, v12, v13, v14, v15, v16, v34);
  if (v8 != -1)
  {
    int v23 = v8 + 1;
    do
    {
      glpStringBufferAppendFormat(a1, "    ", v17, v18, v19, v20, v21, v22, v35);
      --v23;
    }
    while (v23);
  }
  glpVariableIdentifierNodeGetName(a2);
  char v25 = v24;
  glpVariableIdentifierNodeGetName(a2);
  return glpStringBufferAppendFormat(a1, "%.*s -> ", v26, v27, v28, v29, v30, v31, v25);
}

uint64_t writeTypeIdentifier(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  glpStringBufferAppendFormat(a1, "(TypeIdentifier:", a3, a4, a5, a6, a7, a8, v33);
  writeSAInfo(a1, a2);
  glpStringBufferAppendFormat(a1, "\n", v11, v12, v13, v14, v15, v16, v34);
  if (v8 != -1)
  {
    int v23 = v8 + 1;
    do
    {
      glpStringBufferAppendFormat(a1, "    ", v17, v18, v19, v20, v21, v22, v35);
      --v23;
    }
    while (v23);
  }
  glpTypeIdentifierNodeGetName(a2);
  char v25 = v24;
  glpTypeIdentifierNodeGetName(a2);
  return glpStringBufferAppendFormat(a1, "%.*s", v26, v27, v28, v29, v30, v31, v25);
}