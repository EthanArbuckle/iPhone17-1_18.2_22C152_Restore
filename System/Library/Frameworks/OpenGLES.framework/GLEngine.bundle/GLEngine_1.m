uint64_t gleFinishSync(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = (unsigned __int8 *)(result + 32496);
  if (*(unsigned char *)(result + 32496))
  {
    v3 = 0;
    v4 = a2 + 40;
    v5 = (void *)(result + 32512);
    do
    {
      result = (*(uint64_t (**)(void, void, void, void))(v5[206] + 1336))(*v5, 0, 0, *(void *)(v4 + 8 * v3++));
      v5 += 209;
    }
    while (v3 < *v2);
  }
  return result;
}

BOOL gleSyncTargetExtractor(uint64_t a1)
{
  return *(void *)(a1 + 152) != 0;
}

void gleBindRenderbuffer(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    uint64_t v4 = *(void *)(a1 + 19296) + 40;
    TextureObject = gleLookupHashObject(v4, a2);
    if (!TextureObject)
    {
      TextureObject = gleCreateTextureObject(*(void *)(a1 + 19296), 8194, a2);
      gleAddHashNameAndObject(a1, v4, (uint64_t)TextureObject);
    }
    ++TextureObject[5];
  }
  else
  {
    TextureObject = 0;
  }
  uint64_t v6 = *(void *)(a1 + 28952);
  if (v6)
  {
    int v7 = *(_DWORD *)(v6 + 20) - 1;
    *(_DWORD *)(v6 + 20) = v7;
    if (!v7) {
      gleUnbindAndFreeTextureObject(a1, v6);
    }
  }
  *(void *)(a1 + 28952) = TextureObject;
}

uint64_t gleCheckRenderbufferStorageArgs(uint64_t a1, int a2, unsigned int a3, int a4, unsigned int a5, unsigned int a6)
{
  if (a2 == 36161)
  {
    if (*(void *)(a1 + 28952))
    {
      if (((a6 | a5) & 0x80000000) == 0)
      {
        uint64_t v6 = *(void *)(a1 + 29480);
        if (*(_DWORD *)(v6 + 4) >= a5 && *(_DWORD *)(v6 + 8) >= a6) {
          return gleCheckRenderableFormatArgs(a1, 36161, a3, a4);
        }
      }
      v8 = (__int16 *)(a1 + 29832);
      if (!*(_WORD *)(a1 + 29832))
      {
        __int16 v9 = 1281;
LABEL_13:
        __int16 *v8 = v9;
      }
    }
    else
    {
      v8 = (__int16 *)(a1 + 29832);
      if (!*(_WORD *)(a1 + 29832))
      {
        __int16 v9 = 1282;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v8 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      __int16 v9 = 1280;
      goto LABEL_13;
    }
  }
  return 0;
}

uint64_t gleCheckRenderableFormatArgs(uint64_t a1, int a2, unsigned int a3, int a4)
{
  uint64_t v4 = (__int16 *)(a1 + 29832);
  if ((a3 & 0x80000000) != 0)
  {
    if (*v4) {
      return 0;
    }
    uint64_t result = 0;
    __int16 v11 = 1281;
LABEL_44:
    *uint64_t v4 = v11;
    return result;
  }
  v5 = *(unsigned __int8 **)(a1 + 29480);
  if (v5[170] < a3)
  {
LABEL_61:
    if (*v4) {
      return 0;
    }
    uint64_t result = 0;
    __int16 v11 = 1282;
    goto LABEL_44;
  }
  int v6 = 0;
  char v7 = 1;
  if (a4 > 34835)
  {
    if (a4 > 36165)
    {
      if (a4 <= 36755)
      {
        switch(a4)
        {
          case 36168:
            goto LABEL_49;
          case 36194:
            goto LABEL_50;
          case 36208:
          case 36214:
          case 36220:
          case 36226:
          case 36232:
          case 36238:
            goto LABEL_12;
          default:
            goto LABEL_41;
        }
      }
      if (a4 <= 36974) {
        goto LABEL_41;
      }
      if (a4 == 36975)
      {
        if ((*(unsigned char *)(a1 + 32501) & 0xFE) != 2)
        {
          int v6 = 1;
          goto LABEL_50;
        }
      }
      else if (a4 == 37874 || a4 == 37881)
      {
LABEL_39:
        if ((*(unsigned char *)(a1 + 32501) & 0xFE) != 2)
        {
LABEL_40:
          int v6 = 0;
          goto LABEL_50;
        }
      }
LABEL_41:
      if (*v4) {
        return 0;
      }
      uint64_t result = 0;
      __int16 v11 = 1280;
      goto LABEL_44;
    }
    if (a4 > 35445)
    {
      switch(a4)
      {
        case 35898:
        case 35901:
          if ((v5[578] & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_40;
        case 35899:
        case 35900:
        case 35902:
        case 35903:
        case 35904:
        case 35905:
        case 35906:
        case 35908:
        case 35909:
        case 35910:
        case 35911:
          goto LABEL_41;
        case 35907:
          if (*(unsigned char *)(a1 + 32501) == 2 || (v5[577] & 0x20) == 0) {
            goto LABEL_41;
          }
          goto LABEL_27;
        default:
          if ((a4 - 35446) < 3) {
            goto LABEL_39;
          }
          if ((a4 - 36012) < 2 && (*(unsigned char *)(a1 + 32501) & 0xFE) != 2) {
            goto LABEL_49;
          }
          goto LABEL_41;
      }
    }
    if ((a4 - 34836) <= 0xB)
    {
      int v9 = 1 << (a4 - 20);
      if ((v9 & 0xF3C) != 0 || (v9 & 3) != 0) {
        goto LABEL_41;
      }
      goto LABEL_27;
    }
    if (a4 != 35056) {
      goto LABEL_41;
    }
LABEL_49:
    int v6 = 0;
    char v7 = 0;
    goto LABEL_50;
  }
  if (a4 <= 33188)
  {
    switch(a4)
    {
      case 32849:
      case 32854:
      case 32855:
      case 32856:
        goto LABEL_50;
      case 32857:
        goto LABEL_13;
      default:
        goto LABEL_41;
    }
  }
  if (a4 <= 33318)
  {
    if ((a4 - 33189) >= 2) {
      goto LABEL_41;
    }
    goto LABEL_49;
  }
  char v8 = a4 - 39;
  if ((a4 - 33319) > 0x15) {
    goto LABEL_41;
  }
  if (((1 << v8) & 0x3FFC00) != 0)
  {
LABEL_12:
    int v6 = 1;
LABEL_13:
    if ((*(unsigned char *)(a1 + 32501) & 0xFE) == 2) {
      goto LABEL_41;
    }
    goto LABEL_29;
  }
  if (((1 << v8) & 0x2A9) != 0 || ((1 << v8) & 0x154) == 0) {
    goto LABEL_41;
  }
LABEL_27:
  if (*(unsigned char *)(a1 + 32501) == 2) {
    goto LABEL_41;
  }
  int v6 = 0;
LABEL_29:
  char v7 = 1;
LABEL_50:
  if ((v5[565] & 0x20) != 0)
  {
    if (a2 != 36161)
    {
      unsigned int v12 = (v7 & 1) != 0 ? v5[171] : v5[172];
      if (v12 < a3) {
        goto LABEL_61;
      }
    }
    if (v6 && v5[173] < a3) {
      goto LABEL_61;
    }
  }
  return 1;
}

uint64_t gleCreatePluginFramebuffer(uint64_t result, uint64_t a2)
{
  v2 = (unsigned __int8 *)(result + 32496);
  if (*(unsigned char *)(result + 32496))
  {
    unint64_t v3 = 0;
    uint64_t v4 = a2 + 256;
    v5 = (void *)(result + 32520);
    uint64_t v6 = a2 + 160;
    uint64_t v7 = a2 + 520;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(v5[205] + 1576))(*v5, v6, v4, v7);
      ++v3;
      v5 += 209;
      v6 += 8;
      v7 += 88;
    }
    while (v3 < *v2);
  }
  return result;
}

uint64_t gleInitializeFramebuffer(uint64_t result, uint64_t a2)
{
  uint64_t v2 = 0;
  *(void *)(a2 + 492) = 0;
  *(_DWORD *)(a2 + 500) = 0;
  *(void *)(a2 + 484) = 0;
  *(_OWORD *)(a2 + 504) = xmmword_227DC2090;
  *(_WORD *)(a2 + 476) = -29472;
  *(_WORD *)(a2 + 460) = -29472;
  *(void *)(a2 + 462) = 0;
  *(void *)(a2 + 468) = 0;
  do
  {
    uint64_t v3 = a2 + v2;
    *(void *)uint64_t v3 = 0;
    *(_WORD *)(v3 + 8) = 0;
    v2 += 16;
  }
  while (v2 != 160);
  uint64_t v4 = 0;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(void *)(a2 + 416) = 0;
  *(void *)(a2 + 424) = 0;
  *(void *)(a2 + 431) = 0;
  *(unsigned char *)(a2 + 439) = *(unsigned char *)(a2 + 439) & 0xFC | 1;
  *(_DWORD *)(a2 + 456) = 0;
  *(_OWORD *)(a2 + 440) = xmmword_227DC20A0;
  do
  {
    uint64_t v5 = a2 + v4;
    *(_WORD *)(v5 + 256) = 0;
    *(void *)(v5 + 264) = 0;
    *(_DWORD *)(v5 + 260) = 0;
    v4 += 16;
  }
  while (v4 != 160);
  uint64_t v6 = *(unsigned __int8 *)(result + 32496);
  if (*(unsigned char *)(result + 32496))
  {
    uint64_t v7 = (unsigned char *)(a2 + 602);
    do
    {
      *(_OWORD *)(v7 - 18) = 0uLL;
      *(_OWORD *)(v7 - 34) = 0uLL;
      *(_OWORD *)(v7 - 50) = 0uLL;
      *(_OWORD *)(v7 - 66) = 0uLL;
      *(_OWORD *)(v7 - 82) = 0uLL;
      *((_WORD *)v7 - 1) = 1;
      *uint64_t v7 = 0;
      v7 += 88;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t gleUnbindFramebufferObject(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (unsigned __int8 *)(result + 32496);
  if (*(unsigned char *)(result + 32496))
  {
    unint64_t v3 = 0;
    uint64_t v4 = a2 + 200;
    uint64_t v5 = (void *)(result + 32512);
    do
    {
      uint64_t result = (*(uint64_t (**)(void, void))(v5[206] + 1592))(*v5, *(void *)(v4 + 8 * v3++));
      v5 += 209;
    }
    while (v3 < *v2);
  }
  return result;
}

void gleFreeFramebufferObject(uint64_t a1, char *a2)
{
  uint64_t v4 = (void *)*((void *)a2 + 4);
  if (v4)
  {
    free(v4);
    *((void *)a2 + 4) = 0;
  }
  if (*(unsigned char *)(a1 + 320))
  {
    unint64_t v5 = 0;
    uint64_t v6 = a2 + 200;
    uint64_t v7 = a1 + 360;
    do
    {
      (*(void (**)(void, void))(*(void *)v7 + 1616))(*(void *)(v7 - 8), *(void *)&v6[8 * v5]);
      *(void *)&v6[8 * v5++] = 0;
      v7 += 32;
    }
    while (v5 < *(unsigned __int8 *)(a1 + 320));
  }
  for (uint64_t i = 40; i != 200; i += 16)
  {
    uint64_t v9 = *(void *)&a2[i];
    if (v9)
    {
      int v10 = *(_DWORD *)(v9 + 20) - 1;
      *(_DWORD *)(v9 + 20) = v10;
      if (!v10) {
        gleFreeTextureObject(a1, v9);
      }
    }
  }

  free(a2);
}

void gleUnbindAndFreeFramebufferObject(uint64_t a1, char *a2)
{
  uint64_t v4 = (void *)*((void *)a2 + 4);
  if (v4)
  {
    free(v4);
    *((void *)a2 + 4) = 0;
  }
  if (*(unsigned char *)(a1 + 32496))
  {
    unint64_t v5 = 0;
    uint64_t v6 = a2 + 200;
    uint64_t v7 = (void *)(a1 + 32512);
    do
    {
      (*(void (**)(void, void))(v7[206] + 1592))(*v7, *(void *)&v6[8 * v5]);
      (*(void (**)(void, void))(v7[206] + 1616))(v7[1], *(void *)&v6[8 * v5]);
      *(void *)&v6[8 * v5++] = 0;
      v7 += 209;
    }
    while (v5 < *(unsigned __int8 *)(a1 + 32496));
  }
  for (uint64_t i = 40; i != 200; i += 16)
  {
    uint64_t v9 = *(void *)&a2[i];
    if (v9)
    {
      int v10 = *(_DWORD *)(v9 + 20) - 1;
      *(_DWORD *)(v9 + 20) = v10;
      if (!v10) {
        gleUnbindAndFreeTextureObject(a1, v9);
      }
    }
  }

  free(a2);
}

void gleBindFramebuffer(int8x16_t *a1, int a2, unsigned int a3)
{
  unint64_t v5 = &a1[2029].i8[6];
  uint64_t v6 = &a1[1790].i8[12];
  if (a3)
  {
    uint64_t v8 = a1[1206].i64[0] + 8;
    uint64_t v9 = gleLookupHashObject(v8, a3);
    if (!v9)
    {
      int v10 = (uint64_t *)malloc_type_malloc(88 * v5[26] + 560, 0x577B5147uLL);
      if (!v10) {
        abort();
      }
      uint64_t v9 = v10;
      *((_DWORD *)v10 + 4) = a3;
      *int v10 = 0;
      *(uint64_t *)((char *)v10 + 20) = 0x100000001;
      v10[4] = 0;
      *((_DWORD *)v10 + 7) = 0;
      uint64_t v11 = (uint64_t)(v10 + 5);
      gleInitializeFramebuffer((uint64_t)a1, (uint64_t)(v10 + 5));
      gleCreatePluginFramebuffer((uint64_t)a1, v11);
      gleAddHashNameAndObject((uint64_t)a1, v8, (uint64_t)v9);
    }
    if (v5[26])
    {
      for (unsigned int i = *((_DWORD *)v9 + 135); i; i ^= 1 << v13)
      {
        unsigned int v13 = __clz(__rbit32(i));
        uint64_t v14 = v9[2 * v13 + 5];
        if (v14)
        {
          uint64_t v15 = *(void *)(v14 + 576);
          if (v15)
          {
            if (v15 != a1[1842].i64[0]) {
              gleSynchronizePluginTextureLevels((uint64_t)a1, v14 + 40);
            }
          }
        }
      }
    }
    int v16 = *((_DWORD *)v9 + 5);
    *((_DWORD *)v9 + 5) = v16 + 1;
    if (a2 == 36160)
    {
      *((_DWORD *)v9 + 5) = v16 + 2;
LABEL_18:
      uint64_t v17 = a1[1810].i64[1];
      a1[1810].i64[1] = (uint64_t)v9;
      unsigned int v18 = *((_DWORD *)v6 + 287) | 0x82000000;
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (a2 == 36160) {
    goto LABEL_18;
  }
  if (a2 == 36009)
  {
    uint64_t v17 = 0;
    unsigned int v18 = *((_DWORD *)v6 + 287);
LABEL_19:
    uint64_t v19 = a1[1810].i64[0];
    a1[1810].i64[0] = (uint64_t)v9;
    *(_DWORD *)uint64_t v6 = 0;
    *((_DWORD *)v6 + 287) = v18 | 0x50000000;
    goto LABEL_20;
  }
  uint64_t v19 = 0;
  uint64_t v17 = a1[1810].i64[1];
  a1[1810].i64[1] = (uint64_t)v9;
  *((_DWORD *)v6 + 287) |= 0x82000000;
  if (a2 == 36008) {
    goto LABEL_42;
  }
LABEL_20:
  if (v9) {
    __int8 v20 = 0;
  }
  else {
    __int8 v20 = *(unsigned char *)(a1[1842].i64[1] + 41);
  }
  v5[13] = v20;
  int v21 = (v19 == 0) ^ (v9 == 0);
  if (v9 && v19)
  {
    if (*(unsigned __int16 *)(v19 + 474) != *((unsigned __int16 *)v9 + 237)
      || *(unsigned __int16 *)(v19 + 476) != *((unsigned __int16 *)v9 + 238)
      || *(_DWORD *)(v19 + 488) != *((_DWORD *)v9 + 122))
    {
      LOBYTE(v21) = 1;
    }
    if ((v21 & 1) == 0) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v21) {
LABEL_36:
  }
    gleUpdateViewScissorDataIndexed((uint64_t)a1, 0);
LABEL_37:
  *(_DWORD *)uint64_t v6 = 0;
  a1[96].i32[3] |= 0x48000u;
  uint64_t v24 = a1[1810].i64[0];
  v25 = (_WORD *)(v24 + 552);
  if (!v24) {
    v25 = v6 + 1156;
  }
  a1[958].i16[7] = *((_WORD *)v6 + 576) & *v25;
  if (!v24 && v5[7] && a1[1813].i64[0])
  {
    __int8 *v5 = v5[13];
    __int8 v37 = v5[3];
    v5[1] = v37;
    v5[2] |= v37;
  }
  else
  {
    *(_WORD *)unint64_t v5 = 0;
  }
  --*((_DWORD *)v6 + 291);
LABEL_42:
  gliUpdateDispatchState(a1, 0);
  if (v9)
  {
    if (a2 == 36009)
    {
      v5[16] = *((_DWORD *)v9 + 120) == 0;
      uint64_t v38 = v5[26];
      if (v5[26])
      {
        v39 = v9 + 25;
        v40 = v5 + 1122;
        do
        {
          uint64_t v41 = *v39++;
          void *v40 = v41;
          v40 += 209;
          --v38;
        }
        while (v38);
      }
      if (*((_DWORD *)v9 + 139) == *(_DWORD *)(a1[1206].i64[0] + 4)) {
        goto LABEL_72;
      }
      v31 = v9 + 5;
      v32 = (_DWORD *)v9 + 139;
      uint64_t v33 = (uint64_t)a1;
      char v34 = 2;
    }
    else if (a2 == 36160)
    {
      BOOL v26 = *((_DWORD *)v9 + 120) == 0;
      v5[15] = v26;
      v5[16] = v26;
      uint64_t v27 = v5[26];
      if (v5[26])
      {
        v28 = v9 + 25;
        v29 = v5 + 1130;
        do
        {
          *(v29 - 1) = *v28;
          uint64_t v30 = *v28++;
          void *v29 = v30;
          v29 += 209;
          --v27;
        }
        while (v27);
      }
      if (*((_DWORD *)v9 + 139) == *(_DWORD *)(a1[1206].i64[0] + 4)) {
        goto LABEL_72;
      }
      v31 = v9 + 5;
      v32 = (_DWORD *)v9 + 139;
      uint64_t v33 = (uint64_t)a1;
      char v34 = 3;
    }
    else
    {
      v5[15] = *((_DWORD *)v9 + 120) == 0;
      uint64_t v42 = v5[26];
      if (v5[26])
      {
        v43 = v9 + 25;
        v44 = v5 + 1130;
        do
        {
          uint64_t v45 = *v43++;
          void *v44 = v45;
          v44 += 209;
          --v42;
        }
        while (v42);
      }
      if (*((_DWORD *)v9 + 139) == *(_DWORD *)(a1[1206].i64[0] + 4)) {
        goto LABEL_72;
      }
      v31 = v9 + 5;
      v32 = (_DWORD *)v9 + 139;
      uint64_t v33 = (uint64_t)a1;
      char v34 = 1;
    }
    gleUpdateFBODirtyStateForTexStampChange(v33, v31, v34);
    _DWORD *v32 = *(_DWORD *)(a1[1206].i64[0] + 4);
LABEL_72:
    if (*((_DWORD *)v6 + 293) != *(_DWORD *)(a1[1206].i64[0] + 4))
    {
      gleUpdateCtxDirtyStateForTexStampChange((uint64_t)a1);
      *((_DWORD *)v6 + 293) = *(_DWORD *)(a1[1206].i64[0] + 4);
    }
    goto LABEL_81;
  }
  if (a2 == 36009)
  {
    v5[16] = 1;
    uint64_t v46 = v5[26];
    if (v5[26])
    {
      v47 = v5 + 1122;
      do
      {
        void *v47 = 0;
        v47 += 209;
        --v46;
      }
      while (v46);
    }
  }
  else if (a2 == 36160)
  {
    *(_WORD *)(v5 + 15) = 257;
    uint64_t v35 = v5[26];
    if (v5[26])
    {
      v36 = &a1[2099].i64[1];
      do
      {
        uint64_t *v36 = 0;
        v36[1] = 0;
        v36 += 209;
        --v35;
      }
      while (v35);
    }
  }
  else
  {
    v5[15] = 1;
    uint64_t v48 = v5[26];
    if (v5[26])
    {
      v49 = v5 + 1130;
      do
      {
        void *v49 = 0;
        v49 += 209;
        --v48;
      }
      while (v48);
    }
  }
LABEL_81:
  if (v19 && (int v50 = *(_DWORD *)(v19 + 20) - 1, (*(_DWORD *)(v19 + 20) = v50) == 0))
  {
    gleUnbindAndFreeFramebufferObject((uint64_t)a1, (char *)v19);
    if (!v17) {
      return;
    }
  }
  else if (!v17)
  {
    return;
  }
  int v51 = *(_DWORD *)(v17 + 20) - 1;
  *(_DWORD *)(v17 + 20) = v51;
  if (!v51)
  {
    gleUnbindAndFreeFramebufferObject((uint64_t)a1, (char *)v17);
  }
}

uint64_t gleSetUnknownFramebufferCompleteness(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(a2 + 440) = 0xFFFF;
  uint64_t v2 = *(unsigned __int8 *)(result + 32496);
  if (*(unsigned char *)(result + 32496))
  {
    uint64_t v3 = a2 + 601;
    do
    {
      *(_WORD *)(v3 - 1) = 1;
      v3 += 88;
      --v2;
    }
    while (v2);
  }
  if (*(void *)(result + 28960) + 40 == a2)
  {
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 29800) |= 0x10000000u;
  }
  if (*(void *)(result + 28968) + 40 == a2) {
    *(_DWORD *)(result + 29800) |= 0x2000000u;
  }
  ++*(_DWORD *)(*(void *)(result + 19296) + 316);
  return result;
}

uint64_t gleInvalidateCurrentDrawFramebufferTextures(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = 0;
  uint64_t v3 = *(void *)(result + 28960);
  uint64_t v14 = v3 + 296;
  do
  {
    if ((*(_DWORD *)(v3 + 496) >> v2))
    {
      uint64_t v4 = *(void *)(v3 + 40 + 16 * v2);
      if (v4)
      {
        if ((*(_WORD *)(v4 + 808) & 0x800) == 0)
        {
          uint64_t v5 = v14 + 16 * v2;
          uint64_t v6 = *(int *)(v5 + 8);
          if (!*(void *)(v4 + 576)) {
            uint64_t result = gfxWaitTextureOnDevices();
          }
          *(void *)(v4 + 576) = *(void *)(v1 + 29472);
          if (*(_DWORD *)(v3 + 484) && !*(_WORD *)v5)
          {
            uint64_t v10 = 0;
            uint64_t v11 = v4 + 1036;
            uint64_t v12 = v4 + 32 * v6 + 1072;
            do
            {
              char v13 = *(unsigned char *)(v12 + 11);
              if ((v13 & 0x10) != 0)
              {
                if ((*(unsigned char *)(v12 + 11) & 9) == 0)
                {
                  uint64_t result = gfxFreeTextureLevel();
                  char v13 = *(unsigned char *)(v12 + 11);
                }
                v13 &= ~0x10u;
                *(_WORD *)(v11 + v10) &= ~(1 << v6);
              }
              *(unsigned char *)(v12 + 11) = v13 | 0x40;
              v10 += 2;
              v12 += 480;
            }
            while (v10 != 12);
          }
          else
          {
            uint64_t v7 = *(int *)(v14 + 16 * v2 + 4);
            uint64_t v8 = (char *)(v4 + 480 * (int)v7 + 32 * v6 + 1083);
            char v9 = *v8;
            if ((*v8 & 0x10) != 0)
            {
              if ((*v8 & 9) == 0)
              {
                uint64_t result = gfxFreeTextureLevel();
                char v9 = *v8;
              }
              v9 &= ~0x10u;
              *(_WORD *)(v4 + 2 * v7 + 1036) &= ~(1 << v6);
            }
            char *v8 = v9 | 0x40;
          }
        }
      }
    }
    ++v2;
  }
  while (v2 != 10);
  return result;
}

void gleFramebufferTexture(uint64_t a1, uint64_t a2, unsigned int a3, __int16 a4, uint64_t a5, int a6, int a7, int a8, char a9)
{
  uint64_t v17 = a1 + 29804;
  v54 = (_WORD *)(a1 + 15342);
  gleSetUnknownFramebufferCompleteness(a1, a2);
  uint64_t v18 = a2 + 16 * a3;
  uint64_t v19 = *(void *)v18;
  *(void *)uint64_t v18 = a5;
  *(unsigned char *)(v18 + 9) = a9;
  int v20 = 1 << a3;
  *(_DWORD *)(a2 + 496) |= 1 << a3;
  uint64_t v21 = a2 + 256;
  v22 = (_WORD *)(a2 + 256 + 16 * a3);
  if (a5)
  {
    _WORD *v22 = a4;
    v23 = (_DWORD *)(v21 + 16 * a3);
    v23[1] = a6;
    v23[2] = a7;
    v23[3] = a8;
    int v24 = *(_DWORD *)(a2 + 500) | v20;
    *(_DWORD *)(a2 + 500) = v24;
    uint64_t v25 = *(unsigned __int8 *)(v17 + 2692);
    if (*(unsigned char *)(v17 + 2692))
    {
      BOOL v26 = (uint64_t *)(a5 + 40);
      uint64_t v27 = (void *)(a2 + 8 * a3 + 520);
      do
      {
        uint64_t v28 = *v26++;
        *uint64_t v27 = v28;
        v27 += 11;
        --v25;
      }
      while (v25);
    }
    if (a3 <= 7)
    {
      uint64_t v29 = 0;
      unsigned int v30 = a3 + 36064;
      while (1)
      {
        uint64_t v31 = a2 + 2 * v29;
        int v32 = *(unsigned __int16 *)(v31 + 460);
        if (v30 == v32) {
          break;
        }
        if (++v29 == 8) {
          goto LABEL_25;
        }
      }
      *(_DWORD *)(a2 + 512) |= 1 << v29;
      *(_WORD *)(v31 + 416) = v32;
LABEL_25:
      int v41 = *(unsigned __int16 *)(a2 + 476);
      if (v30 == v41) {
        *(_WORD *)(a2 + 432) = v41;
      }
      goto LABEL_29;
    }
    if (a3 == 9)
    {
      int v39 = *(_DWORD *)(a2 + 512) | 0x600;
    }
    else
    {
      if (a3 != 8)
      {
LABEL_29:
        uint64_t v42 = *(void *)(a1 + 28960);
        if (v42 + 40 == a2)
        {
          v43 = (_WORD *)(v42 + 552);
          BOOL v44 = v42 == 0;
          int v47 = *(_DWORD *)v17;
          uint64_t v46 = (_WORD *)(v17 + 4);
          __int16 v45 = v47;
          if (v44) {
            v43 = v46;
          }
          _WORD *v54 = v45 & *v43;
        }
        *(_DWORD *)(a5 + 1008) = 65541;
        ++*(_DWORD *)(a5 + 20);
        goto LABEL_43;
      }
      int v39 = *(_DWORD *)(a2 + 512) | 0x100;
    }
    *(_DWORD *)(a2 + 512) = v39;
    goto LABEL_29;
  }
  _WORD *v22 = 0;
  uint64_t v33 = v21 + 16 * a3;
  *(void *)(v33 + 8) = 0;
  *(_DWORD *)(v33 + 4) = 0;
  int v24 = *(_DWORD *)(a2 + 500) & ~v20;
  *(_DWORD *)(a2 + 500) = v24;
  uint64_t v34 = *(unsigned __int8 *)(v17 + 2692);
  if (*(unsigned char *)(v17 + 2692))
  {
    uint64_t v35 = (void *)(a2 + 8 * a3 + 520);
    do
    {
      *uint64_t v35 = 0;
      v35 += 11;
      --v34;
    }
    while (v34);
  }
  if (a3 <= 7)
  {
    uint64_t v36 = 0;
    unsigned int v37 = a3 + 36064;
    while (1)
    {
      uint64_t v38 = a2 + 2 * v36;
      if (v37 == *(unsigned __int16 *)(v38 + 460)) {
        break;
      }
      if (++v36 == 8) {
        goto LABEL_35;
      }
    }
    *(_DWORD *)(a2 + 512) &= ~(1 << v36);
    *(_WORD *)(v38 + 416) = 0;
LABEL_35:
    if (v37 == *(unsigned __int16 *)(a2 + 476)) {
      *(_WORD *)(a2 + 432) = 0;
    }
    goto LABEL_39;
  }
  if (a3 == 9)
  {
    unsigned int v40 = *(_DWORD *)(a2 + 512) & 0xFFFFF9FF;
  }
  else
  {
    if (a3 != 8) {
      goto LABEL_39;
    }
    unsigned int v40 = *(_DWORD *)(a2 + 512) & 0xFFFFFEFF;
  }
  *(_DWORD *)(a2 + 512) = v40;
LABEL_39:
  uint64_t v48 = *(void *)(a1 + 28960);
  if (v48 + 40 == a2)
  {
    v49 = (_WORD *)(v48 + 552);
    BOOL v44 = v48 == 0;
    int v52 = *(_DWORD *)v17;
    int v51 = (_WORD *)(v17 + 4);
    __int16 v50 = v52;
    if (v44) {
      v49 = v51;
    }
    _WORD *v54 = v50 & *v49;
  }
LABEL_43:
  if ((*(unsigned char *)(*(void *)(a1 + 29480) + 561) & 0x40) != 0) {
    v24 &= *(_DWORD *)(a2 + 508) | *(_DWORD *)(a2 + 504) | 0xFFFFFF00;
  }
  *(_DWORD *)(a2 + 456) = v24;
  if (v19)
  {
    int v53 = *(_DWORD *)(v19 + 20) - 1;
    *(_DWORD *)(v19 + 20) = v53;
    if (!v53)
    {
      gleUnbindAndFreeTextureObject(a1, v19);
    }
  }
}

uint64_t gleUpdateFramebufferCompleteness(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (_DWORD *)(a2 + 444);
  *(_DWORD *)(a2 + 434) = 0;
  *(unsigned char *)(a2 + 438) = 0;
  *(unsigned char *)(a2 + 439) |= 1u;
  *(void *)(a2 + 444) = 0x100000000;
  *(void *)(a2 + 488) = 0;
  *(_DWORD *)(a2 + 484) = 0;
  if (*(void *)(result + 28960) + 40 == a2)
  {
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 29800) |= 0x40000000u;
  }
  if (*(void *)(result + 28968) + 40 == a2) {
    *(_DWORD *)(result + 29800) |= 0x80000000;
  }
  v71 = (_DWORD *)(result + 28652);
  uint64_t v4 = 0;
  int v72 = 0;
  int v73 = 0;
  int v70 = 0;
  uint64_t v5 = 0;
  unsigned __int16 v6 = 0;
  LOWORD(v7) = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  int v11 = 0;
  uint64_t v12 = 0;
  BOOL v13 = 0;
  int v14 = 0;
  int v15 = *(_DWORD *)(a2 + 500);
  int v16 = 15;
  unsigned int v79 = 0;
  int v80 = -1;
  int v74 = 1;
  int v75 = v15;
  unsigned __int16 v76 = 0;
  do
  {
    int v17 = 1 << v10;
    if (((1 << v10) & v15) == 0 || (uint64_t v18 = *(void *)(a2 + v4)) == 0)
    {
      uint64_t v27 = v8;
      uint64_t v28 = v9;
      goto LABEL_103;
    }
    uint64_t v19 = a2 + v4;
    unsigned int v20 = *(_DWORD *)(a2 + v4 + 260);
    uint64_t v21 = *(unsigned int *)(a2 + v4 + 264);
    uint64_t v22 = v18 + 1072 + 480 * v20 + 32 * v21;
    uint64_t v23 = *(unsigned __int16 *)(v22 + 4);
    uint64_t v24 = *(unsigned __int16 *)(v22 + 6);
    int v25 = *(_DWORD *)(a2 + 496);
    if ((v25 & v17) != 0)
    {
      if (!*(unsigned char *)(v18 + 810))
      {
        uint64_t v33 = v18 + 40;
        if ((*(unsigned __int16 *)(v18 + 40 + 2 * (int)v20 + 984) >> v21))
        {
          uint64_t v34 = v5;
          int v35 = v14;
          uint64_t v36 = v3;
          switch(*(_WORD *)(v19 + 256))
          {
            case 5:
            case 9:
            case 0xA:
              unsigned int v37 = *(_DWORD *)(a2 + v4 + 268);
              unsigned int v38 = *(unsigned __int16 *)(v33 + 480 * (int)v20 + 32 * (int)v21 + 1040);
              goto LABEL_110;
            case 6:
              unsigned int v37 = *(_DWORD *)(a2 + v4 + 268);
              unsigned int v38 = *(unsigned __int16 *)(v33 + 480 * (int)v20 + 32 * (int)v21 + 1038);
LABEL_110:
              int v14 = v35;
              uint64_t v5 = v34;
              if (v37 < v38) {
                goto LABEL_111;
              }
              break;
            default:
              BOOL v26 = 0;
              int v59 = *(_DWORD *)(a2 + v4 + 268);
              uint64_t v60 = v33 + 480 * (int)v20 + 32 * (int)v21;
              int v61 = *(unsigned __int16 *)(v60 + 1040);
              LODWORD(v60) = *(unsigned __int8 *)(v60 + 1042);
              int v62 = v60 + v61;
              int v63 = -(int)v60;
              BOOL v64 = v59 >= v62 || v59 < v63;
              uint64_t v3 = v36;
              int v14 = v35;
              uint64_t v5 = v34;
              if (v64) {
                goto LABEL_11;
              }
LABEL_111:
              if (v10 > 7)
              {
                int v57 = *(unsigned __int16 *)(v18 + 812);
                if (v4 == 128) {
                  int v58 = 6402;
                }
                else {
                  int v58 = 6401;
                }
                BOOL v26 = v57 == v58 || v57 == 34041;
                goto LABEL_11;
              }
              BOOL v26 = 0;
              int v52 = *(unsigned __int16 *)(v18 + 1000);
              if (v52 == 35409 || v52 == 35905) {
                goto LABEL_11;
              }
              BOOL v53 = v52 == 35901 || v52 == 35898;
              if ((v52 == 35901 || v52 == 35898) && (*(unsigned char *)(*(void *)(result + 29480) + 578) & 1) == 0) {
                break;
              }
              int v69 = *(unsigned __int16 *)(v18 + 812);
              if (v69 == 6407)
              {
                if ((v52 - 36208) < 0x24) {
                  break;
                }
                BOOL v26 = 0;
                if (v52 == 36975 || (v52 - 33341) > 0xFFFFFFF3) {
                  goto LABEL_11;
                }
              }
              if ((v52 & 0xFFFE) != 0x8CAC
                && (v52 - 34836) >= 0xC
                && (v52 - 33325) >= 4
                && v52 != 35901
                && v52 != 35898
                || ((v52 & 0xFFFE) != 0x881A ? (BOOL v54 = (v52 & 0xFFFFFFFD) == 33325) : (BOOL v54 = 1),
                    v54 ? (int v55 = 1) : (int v55 = v53),
                    v55 == 1))
              {
                if (!*(unsigned char *)(v18 + 595))
                {
                  if ((v69 - 6403) > 7) {
                    goto LABEL_140;
                  }
                  int v56 = 1 << (v69 - 3);
                  if ((v56 & 0x31) == 0)
                  {
                    if ((v56 & 0xC8) != 0)
                    {
LABEL_142:
                      if ((*(unsigned char *)(*(void *)(result + 29480) + 561) & 0x40) == 0) {
                        break;
                      }
                    }
                    else
                    {
LABEL_140:
                      if (v69 != 33319)
                      {
                        if (v69 != 32841) {
                          break;
                        }
                        goto LABEL_142;
                      }
                    }
                  }
                  BOOL v26 = 1;
                  goto LABEL_11;
                }
              }
              break;
          }
        }
      }
      BOOL v26 = 0;
LABEL_11:
      *(unsigned char *)(a2 + v4 + 8) = !v26;
      *(_DWORD *)(a2 + 496) = v25 & ~v17;
      if (!v26) {
        goto LABEL_170;
      }
    }
    else if (*(unsigned char *)(v19 + 8))
    {
LABEL_170:
      int v68 = 36054;
      goto LABEL_174;
    }
    int v29 = *(unsigned __int16 *)(v19 + 256);
    if (v29 == 6) {
      uint64_t v30 = 1;
    }
    else {
      uint64_t v30 = v24;
    }
    int v31 = *(char *)(a2 + v4 + 9);
    BOOL v32 = v80;
    if (v80 == -1)
    {
      BOOL v32 = v31 != 0;
      if (!*(unsigned char *)(a2 + v4 + 9)) {
        goto LABEL_27;
      }
    }
    else
    {
      if (v80 != v31) {
        goto LABEL_172;
      }
      if (!*(unsigned char *)(a2 + v4 + 9))
      {
LABEL_27:
        int v80 = v32;
        uint64_t v28 = v9;
        goto LABEL_37;
      }
    }
    uint64_t v28 = 6;
    switch(v29)
    {
      case 0:
        break;
      case 1:
      case 5:
      case 9:
      case 10:
        uint64_t v28 = *(unsigned __int16 *)(v18 + 1072 + 480 * v20 + 32 * v21 + 8);
        break;
      case 6:
        uint64_t v28 = v24;
        break;
      default:
        uint64_t v28 = 0;
        break;
    }
    if (v9)
    {
      if (v9 != v28)
      {
        int v68 = 36265;
        goto LABEL_174;
      }
    }
    else
    {
      *uint64_t v3 = v28;
    }
    if (v10 <= 7)
    {
      if (v16 == 15)
      {
        int v80 = 1;
        int v16 = v29;
        goto LABEL_37;
      }
      if (v16 != v29)
      {
LABEL_172:
        int v68 = 36264;
        goto LABEL_174;
      }
    }
    int v80 = 1;
LABEL_37:
    uint64_t v27 = v8;
    if (!(_WORD)v8)
    {
      int v39 = *(_DWORD *)(a2 + 452);
      uint64_t v40 = v5;
      if (v39 == 35453) {
        unsigned int v41 = v30;
      }
      else {
        unsigned int v41 = v23;
      }
      if (v39 == 35453) {
        unsigned __int16 v42 = v23;
      }
      else {
        unsigned __int16 v42 = v30;
      }
      if (v39 == 35451) {
        uint64_t v7 = v30;
      }
      else {
        uint64_t v7 = v41;
      }
      uint64_t v5 = v40;
      if (v39 == 35451) {
        unsigned __int16 v6 = v23;
      }
      else {
        unsigned __int16 v6 = v42;
      }
      *(_WORD *)(a2 + 434) = v7;
      *(_WORD *)(a2 + 436) = v6;
      unsigned __int16 v76 = v6;
      LOWORD(v77) = v6;
      WORD2(v77) = v7;
      LODWORD(v78) = v7;
      WORD2(v78) = v6;
      unsigned int v79 = v7;
      uint64_t v27 = v7;
    }
    int v43 = *(_DWORD *)(a2 + 452);
    if ((*(unsigned char *)(*(void *)(result + 29480) + 561) & 0x40) != 0)
    {
      switch(v43)
      {
        case 35450:
        case 35452:
          uint64_t v27 = v78;
          if (v23 < (unsigned __int16)v78)
          {
            *(_WORD *)(a2 + 434) = v23;
            LOWORD(v7) = v23;
            WORD2(v77) = v23;
            uint64_t v27 = v23;
          }
          WORD2(v78) = v77;
          unsigned int v79 = v27;
          LODWORD(v78) = v27;
          if (v30 < (unsigned __int16)v77) {
            goto LABEL_67;
          }
          break;
        case 35451:
        case 35453:
          uint64_t v27 = v79;
          if (v30 < (unsigned __int16)v79)
          {
            *(_WORD *)(a2 + 434) = v30;
            LOWORD(v7) = v30;
            WORD2(v77) = v30;
            LODWORD(v78) = v30;
            uint64_t v27 = v30;
          }
          LOWORD(v30) = v23;
          unsigned int v79 = v27;
          if (v23 < WORD2(v78))
          {
LABEL_67:
            unsigned __int16 v6 = v30;
            *(_WORD *)(a2 + 436) = v30;
            unsigned __int16 v76 = v30;
            LOWORD(v77) = v30;
            WORD2(v78) = v30;
            uint64_t v27 = v79;
          }
          break;
        default:
          break;
      }
    }
    else
    {
      switch(v43)
      {
        case 35450:
        case 35452:
          int v68 = 36057;
          if (v23 != WORD2(v77) || v30 != v76) {
            goto LABEL_174;
          }
          if (v43 == 35451)
          {
LABEL_56:
            int v68 = 36057;
            if (v30 != (unsigned __int16)v7) {
              goto LABEL_174;
            }
            BOOL v54 = v23 == v6;
            unsigned __int16 v6 = v23;
            LOWORD(v7) = v30;
            unsigned __int16 v76 = v23;
            LOWORD(v77) = v23;
            WORD2(v77) = v30;
            LODWORD(v78) = v30;
            WORD2(v78) = v23;
            unsigned int v79 = v30;
            uint64_t v27 = v30;
            if (!v54) {
              goto LABEL_174;
            }
          }
          else
          {
            unsigned __int16 v76 = v30;
            LOWORD(v77) = v30;
            WORD2(v77) = v23;
            LODWORD(v78) = v23;
            WORD2(v78) = v30;
            unsigned int v79 = v23;
            uint64_t v27 = v23;
          }
          break;
        case 35451:
        case 35453:
          goto LABEL_56;
        default:
          break;
      }
    }
    if (v10 <= 7)
    {
      int v44 = *(unsigned char *)(v18 + 832) & 1;
      if ((_WORD)v8)
      {
        if (v74 == v44)
        {
          int v68 = 36061;
          goto LABEL_174;
        }
      }
      else
      {
        int v74 = v44 == 0;
        *(_DWORD *)(a2 + 448) = v74;
      }
    }
    uint64_t v45 = *(unsigned __int8 *)(v18 + 1020);
    if (v11)
    {
      if (v5 != v45 || ((*(unsigned __int16 *)(v18 + 1022) >> 14) & 1) != (*(unsigned char *)(a2 + 439) & 1))
      {
        int v68 = 36182;
        goto LABEL_174;
      }
    }
    else
    {
      *(unsigned char *)(a2 + 438) = v45;
      *(unsigned char *)(a2 + 439) = *(unsigned char *)(a2 + 439) & 0xFE | ((*(_WORD *)(v18 + 1022) & 0x4000) != 0);
      uint64_t v5 = v45;
    }
    if (v10 <= 7)
    {
      int v46 = *(unsigned __int16 *)(v18 + 1000);
      uint64_t v47 = *(unsigned __int16 *)(v18 + 1000);
      if (v12)
      {
        if (v12 == v46)
        {
          uint64_t v47 = v12;
        }
        else
        {
          uint64_t v47 = v12;
          if ((*(unsigned char *)(*(void *)(result + 29480) + 561) & 0x40) == 0)
          {
            int v68 = 36058;
            goto LABEL_174;
          }
        }
      }
      if ((*(_DWORD *)(a2 + 456) & v17) == 0)
      {
        BOOL v48 = v13;
        goto LABEL_102;
      }
      unsigned int v49 = v46 - 36208;
      BOOL v48 = 1;
      int v50 = v14;
      if (!v13 && v49 >= 0x24) {
        BOOL v48 = v46 == 36975 || (v46 - 33329) < 0xC;
      }
      if ((v46 - 34836) < 0xC
        || (v46 - 33325) < 4
        || (v46 & 0xFFFE) == 0x8CAC
        || v46 == 35901
        || v46 == 35898)
      {
        v73 |= v17;
        v3[10] = v73;
LABEL_100:
        int v14 = v50;
        goto LABEL_102;
      }
      if (v49 < 0x12)
      {
LABEL_108:
        v72 |= v17;
        *(_DWORD *)(a2 + 488) = v72;
        goto LABEL_100;
      }
      if ((v46 - 33330) > 0xA)
      {
        if (v46 == 36975) {
          goto LABEL_108;
        }
        if ((v46 - 36226) < 0x12)
        {
LABEL_166:
          v70 |= v17;
          *(_DWORD *)(a2 + 492) = v70;
          goto LABEL_100;
        }
        int v65 = v46 & 1;
      }
      else
      {
        if ((v46 & 1) == 0) {
          goto LABEL_108;
        }
        int v65 = 1;
      }
      if ((v46 - 33340) < 0xFFFFFFF5 || !v65) {
        goto LABEL_100;
      }
      goto LABEL_166;
    }
    BOOL v48 = v13;
    uint64_t v47 = v12;
LABEL_102:
    ++v14;
    int v11 = 1;
    BOOL v13 = v48;
    uint64_t v12 = v47;
    int v15 = v75;
LABEL_103:
    ++v10;
    v4 += 16;
    uint64_t v8 = v27;
    uint64_t v9 = v28;
  }
  while (v4 != 160);
  if (v14)
  {
    *(unsigned char *)(a2 + 439) = *(unsigned char *)(a2 + 439) & 0xFD | (2 * v13);
    uint64_t v67 = result;
    uint64_t result = gleUpdateViewScissorDataIndexed(result, 0);
    int v68 = 0;
    _DWORD *v71 = 0;
    *(_DWORD *)(v67 + 1548) |= 0x48000u;
  }
  else
  {
    int v68 = 36055;
  }
LABEL_174:
  *(_DWORD *)(a2 + 440) = v68;
  return result;
}

uint64_t gleCheckFramebufferStatus(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(unsigned int *)(a2 + 440);
  if (!result) {
    goto LABEL_5;
  }
  if (result == 0xFFFF)
  {
    gleUpdateFramebufferCompleteness(a1, a2);
    uint64_t result = *(unsigned int *)(a2 + 440);
  }
  if (!result)
  {
LABEL_5:
    uint64_t v5 = *(unsigned __int8 *)(a1 + 32500);
    if (*(unsigned char *)(a2 + 88 * v5 + 600))
    {
      (*(void (**)(void, void))(*(void *)(a1 + 29496) + 528))(*(void *)(a1 + 29472), *(void *)(a2 + 8 * v5 + 160));
      LODWORD(v5) = *(unsigned __int8 *)(a1 + 32500);
    }
    if (*(unsigned char *)(a2 + 88 * v5 + 601)) {
      return 36061;
    }
    else {
      return 36053;
    }
  }
  return result;
}

uint64_t gleGenerateMipmap(uint64_t a1, int a2)
{
  uint64_t result = gleLookUpNonProxyNonFaceTexture(a1, a2);
  uint64_t v4 = result;
  __int16 v5 = *(_WORD *)(result + 768);
  if ((v5 & 0xF) != 0)
  {
    if ((v5 & 0xF) == 2) {
      return result;
    }
    int v6 = 1;
  }
  else
  {
    int v6 = 6;
  }
  char v7 = *(unsigned char *)(result + 898);
  *(unsigned char *)(result + 898) = v7 & 0xFE;
  if ((v5 & 0x1C00) == 0x400)
  {
    uint64_t v8 = 0;
    int v9 = 1;
    do
    {
      uint64_t result = gleGenSurfaceMipmaps(a1, v4, v8, *(_WORD *)(v4 + 982) >> 4, 1);
      v9 &= result;
      uint64_t v8 = (v8 + 1);
    }
    while (v6 != v8);
  }
  else
  {
    int v10 = 0;
    if (*(_DWORD *)(result + 888) >= (int)*(unsigned __int8 *)(result + 975)) {
      int v11 = *(unsigned __int8 *)(result + 975);
    }
    else {
      int v11 = *(_DWORD *)(result + 888);
    }
    do
      gleGenerateEmptyMipmaps(a1, v4, v10++, *(_DWORD *)(v4 + 884), v11, 0, 0);
    while (v6 != v10);
    uint64_t v12 = 0;
    int v9 = 1;
    do
    {
      uint64_t result = gleGenMipmaps(a1, v4, v12, *(_DWORD *)(v4 + 884), 0, 0);
      v9 &= result;
      uint64_t v12 = (v12 + 1);
    }
    while (v6 != v12);
  }
  if (!v9)
  {
    gleDirtyTextureObjectCurrentBindPointsData(a1, v4, 0);
    uint64_t result = (*(uint64_t (**)(void, void))(*(void *)(a1 + 29448) + 328))(*(void *)(a1 + 29024), *(void *)(v4 + 8 * *(unsigned __int8 *)(a1 + 32499)));
    if (result)
    {
      *(void *)(v4 + 536) = *(void *)(a1 + 29024);
      uint64_t result = gleInvalidatePluginTextureLevels(a1, v4);
    }
  }
  *(unsigned char *)(v4 + 898) = *(unsigned char *)(v4 + 898) & 0xFE | v7 & 1;
  return result;
}

uint64_t gleBlitFramebuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, double a9, __n128 a10, int a11, unsigned int a12, int a13)
{
  uint64_t v13 = a5;
  uint64_t v14 = a4;
  uint64_t v223 = *MEMORY[0x263EF8340];
  uint64_t v16 = *(void *)(a1 + 28968);
  v17.n128_u32[1] = 0;
  v17.n128_u64[1] = 0;
  long long v191 = 0u;
  uint64_t v18 = a1 + 28696;
  long long v189 = 0u;
  memset(v190, 0, sizeof(v190));
  long long v187 = 0u;
  memset(v188, 0, sizeof(v188));
  long long v185 = 0u;
  long long v186 = 0u;
  long long v183 = 0u;
  long long v184 = 0u;
  long long v182 = 0u;
  long long v180 = 0u;
  long long v181 = 0u;
  long long v178 = 0u;
  long long v179 = 0u;
  long long v176 = 0u;
  long long v177 = 0u;
  long long v175 = 0u;
  if (v16)
  {
    int v19 = *(unsigned __int16 *)(v16 + 474);
    int v20 = *(unsigned __int16 *)(v16 + 476);
  }
  else
  {
    int v19 = *(_DWORD *)(a1 + 29632);
    int v20 = *(_DWORD *)(a1 + 29636);
  }
  int v21 = a11;
  if ((int)a4 >= (int)a2)
  {
    int v22 = a8;
    a8 = a6;
    signed int v23 = a4;
    uint64_t v14 = a2;
  }
  else
  {
    int v22 = a6;
    signed int v23 = a2;
  }
  if ((int)a5 >= (int)a3)
  {
    int v24 = a11;
    int v21 = a7;
    int v25 = a5;
    uint64_t v13 = a3;
  }
  else
  {
    int v24 = a7;
    int v25 = a3;
  }
  int v26 = v23 - v14;
  int v27 = v25 - v13;
  unsigned int v173 = v25 - v13;
  unsigned int v174 = v23 - v14;
  int v28 = v22 - a8;
  int v29 = v24 - v21;
  LODWORD(v218) = v14;
  unsigned int v211 = v13;
  int v171 = v25 - v13;
  unsigned int v172 = v23 - v14;
  float v30 = 1.0;
  float v31 = 1.0;
  if (v23 - v14 != v22 - a8)
  {
    float v31 = -1.0;
    if (v26 + v28) {
      float v31 = (float)v28 / (float)v26;
    }
  }
  int v164 = v25;
  if (v27 != v29)
  {
    float v30 = -1.0;
    if (v27 + v29) {
      float v30 = (float)v29 / (float)v27;
    }
  }
  float v32 = (float)a8;
  float v33 = (float)v21;
  int v165 = v24;
  __int16 v166 = a8;
  int v169 = v22 - a8;
  int v159 = v24 - v21;
  __int16 v160 = v21;
  if (a13 != 9728)
  {
    if (a13 != 9729)
    {
      int v162 = 0;
      goto LABEL_31;
    }
    if (v31 != 1.0 && v31 != -1.0 || v30 != 1.0 && v30 != -1.0)
    {
      int v162 = 0;
LABEL_31:
      uint64_t v36 = v13;
      signed int v161 = v14;
      uint64_t v35 = v14;
      v17.n128_f32[0] = (float)a8;
      a10.n128_f32[0] = (float)v21;
LABEL_32:
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, __n128, __n128, float, float))(*(void *)(a1 + 29496)
                                                                                                 + 216))(*(void *)(a1 + 29464), v35, v36, v17, a10, v31, v30);
      if (result)
      {
        int v40 = *(_DWORD *)(*(void *)(a1 + 19296) + 316);
        if (*(_DWORD *)(v18 + 1120) != v40)
        {
          if (*(void *)(a1 + 28960))
          {
            uint64_t result = gleInvalidateCurrentDrawFramebufferTextures(a1);
            int v40 = *(_DWORD *)(*(void *)(a1 + 19296) + 316);
          }
          *(_DWORD *)(v18 + 1120) = v40;
        }
        return result;
      }
      signed int v155 = v23;
      int v156 = v22;
      unsigned int v157 = v20;
      uint64_t v168 = v18;
      unsigned int v41 = (char *)(a1 + 24760);
      uint64_t v42 = a1 + 17572;
      int v43 = (char *)(a1 + 15006);
      if (v162) {
        __int16 v44 = 9728;
      }
      else {
        __int16 v44 = 9729;
      }
      __int16 v152 = v44;
      if (*(unsigned char *)(a1 + 17697)) {
        int v45 = 8208;
      }
      else {
        int v45 = 0x2000;
      }
      if (*(unsigned char *)(a1 + 24756)) {
        v45 |= 0x20u;
      }
      if (*(_DWORD *)v42) {
        v45 |= 0x100u;
      }
      if (*(unsigned char *)(a1 + 15534) || *(_WORD *)(a1 + 15528) != 2305 || !*(unsigned char *)(a1 + 15538)) {
        v45 |= 0x400u;
      }
      unsigned int v158 = v19;
      unsigned int v46 = a12;
      if (*(unsigned char *)(a1 + 15537) || *(unsigned char *)(a1 + 15533)) {
        v45 |= 0x800u;
      }
      if (*(unsigned char *)(a1 + 15532)) {
        v45 |= 0x200u;
      }
      if (*v41) {
        int v47 = v45 | 0x40;
      }
      else {
        int v47 = v45;
      }
      if (*(void *)(a1 + 24768) || *(void *)(a1 + 24776)) {
        v47 |= 0x80u;
      }
      if ((*(_DWORD *)(a1 + 19160) & 0xFFFF3FFF) != 0 || (*(_WORD *)(a1 + 19152) & 0x1FF) != 0) {
        v47 |= 0x4000u;
      }
      if ((a12 & 0x4100) != 0)
      {
        int v48 = 65540;
        if (*(unsigned char *)(a1 + 16532) || *(unsigned char *)(a1 + 16533) || *(unsigned char *)(a1 + 16534) || *(unsigned char *)(a1 + 16535)) {
          int v48 = 65548;
        }
        int v49 = v47 | v48;
        if ((a12 & 0x4000) != 0)
        {
          if ((*(unsigned char *)(v168 + 1107) & 0x10) != 0)
          {
            gleUpdateAnyDrawBuffersFloat(a1, v37, v38, v39);
            unsigned int v46 = a12;
          }
          if (*(unsigned char *)(a1 + 15178) == (*(unsigned char *)(v168 + 3792) == 0)) {
            int v50 = 1;
          }
          else {
            int v50 = 131073;
          }
          v49 |= v50;
        }
        int v47 = v49 | (v46 >> 7) & 2;
        uint64_t v42 = a1 + 17572;
      }
      *(_OWORD *)((char *)v188 + 8) = *(_OWORD *)(a1 + 9312);
      LODWORD(v190[5]) = *(_DWORD *)(v42 + 2912);
      long long v51 = *(_OWORD *)(a1 + 9568);
      long long v175 = *(_OWORD *)(a1 + 9552);
      long long v176 = v51;
      long long v52 = *(_OWORD *)(a1 + 9600);
      long long v177 = *(_OWORD *)(a1 + 9584);
      long long v178 = v52;
      long long v53 = *(_OWORD *)(a1 + 9632);
      long long v179 = *(_OWORD *)(a1 + 9616);
      long long v180 = v53;
      long long v181 = *(_OWORD *)(a1 + 9648);
      long long v182 = *(_OWORD *)(a1 + 9664);
      if ((v47 & 0x10000) != 0)
      {
        uint64_t v66 = *(void *)(a1 + 19312);
        v190[3] = *(void *)(a1 + 26384);
        v190[4] = v66;
        os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
        VertexArrayHashObject = gleCreateVertexArrayHashObject(a1, 0);
        gleCreatePluginVertexArray(a1, (uint64_t)(VertexArrayHashObject + 40));
        uint64_t v68 = (uint64_t)VertexArrayHashObject;
        uint64_t v42 = a1 + 17572;
        gleSetCurrentVertexHashObject(a1, v68);
        os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
        LOWORD(v46) = a12;
        *(void *)(a1 + 19312) = 0;
        if ((v47 & 0x10) == 0)
        {
LABEL_81:
          if ((v47 & 0x20) == 0) {
            goto LABEL_82;
          }
          goto LABEL_116;
        }
      }
      else if ((v47 & 0x10) == 0)
      {
        goto LABEL_81;
      }
      char v200 = *(unsigned char *)(v42 + 125);
      if ((v47 & 0x20) == 0)
      {
LABEL_82:
        if ((v47 & 0x40) == 0) {
          goto LABEL_84;
        }
        goto LABEL_83;
      }
LABEL_116:
      char v198 = *(unsigned char *)(a1 + 24756);
      if ((v47 & 0x40) == 0)
      {
LABEL_84:
        uint64_t v54 = v168;
        if ((v47 & 0x80) != 0)
        {
          *(_OWORD *)&v190[1] = *(_OWORD *)(a1 + 24768);
          if ((v47 & 0x20000) == 0)
          {
LABEL_86:
            if ((v47 & 0x100) == 0) {
              goto LABEL_88;
            }
            goto LABEL_87;
          }
        }
        else if ((v47 & 0x20000) == 0)
        {
          goto LABEL_86;
        }
        unsigned __int16 v196 = *(_WORD *)(v168 + 1014);
        if ((v47 & 0x100) == 0)
        {
LABEL_88:
          if ((v47 & 0x400) != 0)
          {
            char v204 = *(unsigned char *)(a1 + 15534);
            __int16 v194 = *(_WORD *)(a1 + 15528);
            int v193 = *(_DWORD *)(a1 + 15524);
          }
          if ((v47 & 0x800) != 0)
          {
            char v202 = *(unsigned char *)(a1 + 15537);
            char v201 = *(unsigned char *)(a1 + 15533);
          }
          if ((v47 & 0x200) != 0) {
            char v203 = *(unsigned char *)(a1 + 15532);
          }
          if (v47)
          {
            *((void *)&v189 + 1) = *(void *)(a1 + 20792);
            uint64_t v55 = *(unsigned __int8 *)(v168 + 3800);
            if (*(unsigned char *)(v168 + 3800))
            {
              int v56 = (void *)&v188[1] + 1;
              int v57 = (void *)(a1 + 33176);
              do
              {
                *v56++ = *v57;
                v57 += 209;
                --v55;
              }
              while (v55);
            }
          }
          if ((v47 & 2) != 0)
          {
            LODWORD(v191) = *(_DWORD *)(a1 + 15760);
            v190[0] = *(void *)(a1 + 20880);
            uint64_t v58 = *(unsigned __int8 *)(v168 + 3800);
            if (*(unsigned char *)(v168 + 3800))
            {
              int v59 = (void *)&v188[7] + 1;
              uint64_t v60 = (void *)(a1 + 33184);
              do
              {
                *v59++ = *v60;
                v60 += 209;
                --v58;
              }
              while (v58);
            }
          }
          if ((v47 & 4) != 0)
          {
            long long v61 = *(_OWORD *)(a1 + 10400);
            long long v183 = *(_OWORD *)(a1 + 10384);
            long long v184 = v61;
            long long v62 = *(_OWORD *)(a1 + 10432);
            long long v185 = *(_OWORD *)(a1 + 10416);
            long long v186 = v62;
            HIDWORD(v190[7]) = *(_DWORD *)(a1 + 15684);
            __int16 v195 = *(_WORD *)(v42 + 6196);
          }
          if ((v47 & 8) != 0) {
            int v197 = *(_DWORD *)(a1 + 16532);
          }
          if ((v47 & 0x2000) != 0)
          {
            char v205 = *v43;
            long long v187 = *(_OWORD *)(a1 + 15200);
            *(void *)&v188[0] = *(void *)(a1 + 15216);
            DWORD1(v191) = *(_DWORD *)(a1 + 15644);
            char v206 = *(unsigned char *)(a1 + 15120);
            char v207 = *(unsigned char *)(a1 + 15196);
            char v208 = *(unsigned char *)(a1 + 15319);
            int v209 = *(_DWORD *)(a1 + 15336);
            char v210 = *(unsigned char *)(a1 + 15340);
            *(void *)((char *)&v190[5] + 4) = *(void *)(a1 + 15324);
            HIDWORD(v190[6]) = *(_DWORD *)(a1 + 15332);
          }
          if ((v47 & 0x4000) != 0)
          {
            DWORD2(v191) = *(_DWORD *)(v42 + 1588);
            HIDWORD(v191) = *(_DWORD *)(v42 + 1580);
          }
          int v154 = v47 & 0x8000 | (32 * (v46 & 0x400));
          if (v154) {
            uint64_t v192 = *(void *)(a1 + 18440);
          }
          HIWORD(v63) = 0;
          *(void *)(a1 + 9312) = 0;
          uint64_t v64 = *(void *)(a1 + 28960);
          int v153 = v46 & 0x400;
          if (v64)
          {
            LOWORD(v63) = *(_WORD *)(v64 + 474);
            *(float *)(a1 + 9320) = (float)v63;
            int v65 = *(unsigned __int16 *)(v64 + 476);
          }
          else
          {
            *(float *)(a1 + 9320) = (float)*(int *)(v168 + 936);
            int v65 = *(_DWORD *)(v168 + 940);
          }
          *(float *)(a1 + 9324) = (float)v65;
          gleUpdateViewScissorDataIndexed(a1, 0);
          glMatrixMode_Exec(a1, 5889);
          glLoadIdentity_Exec(a1);
          uint64_t v70 = *(void *)(a1 + 28960);
          if (v70)
          {
            LOWORD(v69) = *(_WORD *)(v70 + 474);
            double v71 = (double)v69;
            int v72 = *(unsigned __int16 *)(v70 + 476);
          }
          else
          {
            double v71 = (double)*(int *)(v168 + 936);
            int v72 = *(_DWORD *)(v168 + 940);
          }
          glOrtho_Exec(a1, 0, v71, 0.0, (double)v72, 0.0, -1.0);
          glMatrixMode_Exec(a1, 5888);
          glLoadIdentity_Exec(a1);
          if ((v47 & 0x10) != 0)
          {
            *(unsigned char *)(v42 + 125) = 0;
            gleUpdateInverseNeeds(a1);
            *(_DWORD *)(a1 + 28652) = 0;
            *(_DWORD *)(a1 + 1548) |= 0x1801Eu;
            if ((v47 & 8) == 0)
            {
LABEL_127:
              if ((v47 & 0x20) == 0) {
                goto LABEL_128;
              }
              goto LABEL_139;
            }
          }
          else if ((v47 & 8) == 0)
          {
            goto LABEL_127;
          }
          *(_DWORD *)(a1 + 16532) = 0;
          gleUpdateTextureCoordGen((_DWORD *)a1);
          if ((v47 & 0x20) == 0)
          {
LABEL_128:
            if ((v47 & 0x40) == 0) {
              goto LABEL_129;
            }
            goto LABEL_140;
          }
LABEL_139:
          glDisable_Exec(a1, 34336);
          if ((v47 & 0x40) == 0)
          {
LABEL_129:
            if ((v47 & 0x80) == 0) {
              goto LABEL_130;
            }
            goto LABEL_141;
          }
LABEL_140:
          glDisable_Exec(a1, 34820);
          if ((v47 & 0x80) == 0)
          {
LABEL_130:
            if ((v47 & 0x20000) == 0) {
              goto LABEL_132;
            }
            goto LABEL_131;
          }
LABEL_141:
          os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
          gleUseProgramObject(a1, 0);
          os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
          if ((v47 & 0x20000) == 0)
          {
LABEL_132:
            int v73 = v169;
            if ((v47 & 0x100) != 0)
            {
              int v75 = 0;
              unsigned int v76 = *(_DWORD *)v42;
              do
              {
                if ((v76 >> v75))
                {
                  *(_DWORD *)(a1 + 28652) = 0;
                  *(_DWORD *)(a1 + 1528) |= 0x1000000 << v75;
                }
                ++v75;
              }
              while (v75 != 8);
              *(_DWORD *)uint64_t v42 = 0;
              gleUpdateClipPlane(a1);
              int v73 = v169;
              if ((v47 & 0x400) == 0)
              {
LABEL_134:
                if ((v47 & 0x800) == 0) {
                  goto LABEL_135;
                }
                goto LABEL_149;
              }
            }
            else if ((v47 & 0x400) == 0)
            {
              goto LABEL_134;
            }
            *(unsigned char *)(a1 + 15534) = 0;
            *(_WORD *)(a1 + 15528) = 2305;
            *(_DWORD *)(a1 + 15524) = 453122818;
            *(unsigned char *)(a1 + 15538) = 1;
            *(_DWORD *)(a1 + 28652) = 0;
            *(_DWORD *)(a1 + 1548) |= 0x8202u;
            *(_DWORD *)(a1 + 1520) |= 0x800000u;
            if ((v47 & 0x800) == 0)
            {
LABEL_135:
              if ((v47 & 0x200) == 0)
              {
LABEL_136:
                int v74 = *(_DWORD *)(a1 + 1520);
                goto LABEL_151;
              }
LABEL_150:
              *(unsigned char *)(a1 + 15532) = 0;
              int v74 = *(_DWORD *)(a1 + 1520) | 0x2000000;
LABEL_151:
              char *v43 = 0;
              *(unsigned char *)(a1 + 15120) = 0;
              *(unsigned char *)(a1 + 15319) = 0;
              *(_DWORD *)(a1 + 28652) = 0;
              *(_DWORD *)(a1 + 1520) = v74 | 0x20003;
              if ((v47 & 0x4000) != 0)
              {
                *(_DWORD *)(v42 + 1588) &= 0xC000u;
                *(_DWORD *)(v42 + 1580) &= 0xFFFFFE00;
              }
              if ((a12 & 0x4100) == 0)
              {
LABEL_247:
                if (v153)
                {
                  int v117 = v173;
                  int v116 = v174;
                  uint64_t v218 = 0;
                  float v118 = (float)v73 / (float)(int)v174;
                  float v119 = (float)(int)v173;
                  *(unsigned char *)(a1 + 15340) = 0;
                  *(void *)(a1 + 15324) = -1;
                  *(void *)(a1 + 15332) = 0xFFFFFFFFLL;
                  *(_DWORD *)(v54 + 1104) |= 0x1C0000u;
                  if (v161 >= v155) {
                    unsigned int v120 = v155;
                  }
                  else {
                    unsigned int v120 = v161;
                  }
                  if (v155 <= v161) {
                    float v32 = (float)v156;
                  }
                  if ((int)v13 >= v164) {
                    unsigned int v121 = v164;
                  }
                  else {
                    unsigned int v121 = v13;
                  }
                  if (v164 <= (int)v13) {
                    float v33 = (float)v165;
                  }
                  *(_DWORD *)(a1 + 28652) = 0;
                  *(_DWORD *)(a1 + 1548) |= 0x40000u;
                  unsigned int v211 = v120;
                  if (v116 < 0) {
                    int v116 = -v116;
                  }
                  unsigned int v174 = v116;
                  if (v117 >= 0) {
                    int v122 = v117;
                  }
                  else {
                    int v122 = -v117;
                  }
                  unsigned int v172 = v121;
                  unsigned int v173 = v122;
                  HIDWORD(v170) = 0;
                  int v171 = 0;
                  float v123 = (float)v159 / v119;
                  if (gleClipReadableRange(a1, v158, v157, (int *)&v211, (int *)&v172, (int *)&v174, (int *)&v173, &v171, (_DWORD *)&v170 + 1))
                  {
                    float v32 = v32 + (float)((float)v171 * v118);
                    float v33 = v33 + (float)((float)SHIDWORD(v170) * v123);
                  }
                  if (v174 && v173)
                  {
                    float v124 = *(float *)(v54 + 12) + (float)(*(float *)(v54 + 8) * v33);
                    *(float *)&uint64_t v218 = *(float *)(v54 + 4) + (float)(*(float *)v54 * v32);
                    *((float *)&v218 + 1) = v124;
                    glPixelZoom_Exec(a1, v118, v123);
                    (*(void (**)(void, uint64_t *, void, void, void, void, uint64_t))(a1 + 29056))(*(void *)(a1 + 29016), &v218, v211, v172, v174, v173, 6146);
                  }
                }
                int v125 = *(_DWORD *)(*(void *)(a1 + 19296) + 316);
                if (*(_DWORD *)(v54 + 1120) != v125)
                {
                  if (*(void *)(a1 + 28960))
                  {
                    gleInvalidateCurrentDrawFramebufferTextures(a1);
                    int v125 = *(_DWORD *)(*(void *)(a1 + 19296) + 316);
                  }
                  *(_DWORD *)(v54 + 1120) = v125;
                }
                *(_OWORD *)(a1 + 9312) = *(_OWORD *)((char *)v188 + 8);
                gleUpdateViewScissorDataIndexed(a1, 0);
                glMatrixMode_Exec(a1, 5889);
                glLoadMatrixf_Exec(a1, (uint64_t)&v175);
                glMatrixMode_Exec(a1, 5888);
                glLoadMatrixf_Exec(a1, (uint64_t)&v179);
                if ((v47 & 0x10000) != 0)
                {
                  v126 = *(char **)(a1 + 26384);
                  gleSetCurrentVertexHashObject(a1, v190[3]);
                  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
                  gleFreeVertexArrayHashObject(*(void *)(a1 + 19296), v126);
                  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
                  *(void *)(a1 + 19312) = v190[4];
                  if ((v47 & 0x10) == 0)
                  {
LABEL_274:
                    if ((v47 & 0x20) == 0) {
                      goto LABEL_275;
                    }
                    goto LABEL_282;
                  }
                }
                else if ((v47 & 0x10) == 0)
                {
                  goto LABEL_274;
                }
                *(unsigned char *)(v42 + 125) = v200;
                gleUpdateInverseNeeds(a1);
                *(_DWORD *)(a1 + 28652) = 0;
                *(_DWORD *)(a1 + 1548) |= 0x1801Eu;
                if ((v47 & 0x20) == 0)
                {
LABEL_275:
                  if ((v47 & 0x40) == 0) {
                    goto LABEL_276;
                  }
LABEL_284:
                  if (v199)
                  {
                    glEnable_Exec(a1, 34820);
                    if ((v47 & 0x80) != 0) {
                      goto LABEL_286;
                    }
                  }
                  else
                  {
                    glDisable_Exec(a1, 34820);
                    if ((v47 & 0x80) != 0) {
                      goto LABEL_286;
                    }
                  }
LABEL_277:
                  if ((v47 & 0x20000) == 0) {
                    goto LABEL_278;
                  }
                  goto LABEL_287;
                }
LABEL_282:
                if (v198)
                {
                  glEnable_Exec(a1, 34336);
                  if ((v47 & 0x40) != 0) {
                    goto LABEL_284;
                  }
                }
                else
                {
                  glDisable_Exec(a1, 34336);
                  if ((v47 & 0x40) != 0) {
                    goto LABEL_284;
                  }
                }
LABEL_276:
                if ((v47 & 0x80) == 0) {
                  goto LABEL_277;
                }
LABEL_286:
                os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
                gleUseProgramObject(a1, (_DWORD *)v190[1]);
                gleBindProgramPipelineObject(a1, v190[2]);
                os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
                if ((v47 & 0x20000) == 0)
                {
LABEL_278:
                  if ((v47 & 0x100) == 0) {
                    goto LABEL_294;
                  }
                  goto LABEL_290;
                }
LABEL_287:
                int v127 = v196;
                *(_WORD *)(v54 + 1014) = v196;
                if (v127 == 35101) {
                  LOBYTE(v127) = *(unsigned char *)(v54 + 3792) == 0;
                }
                *(unsigned char *)(a1 + 15178) = v127;
                *(_DWORD *)(a1 + 28652) = 0;
                *(_DWORD *)(a1 + 1524) |= 0x400000u;
                if ((v47 & 0x100) == 0)
                {
LABEL_294:
                  if ((v47 & 0x400) != 0)
                  {
                    *(unsigned char *)(a1 + 15534) = v204;
                    *(_WORD *)(a1 + 15528) = v194;
                    int v130 = (unsigned __int16)v193;
                    *(_WORD *)(a1 + 15524) = v193;
                    int v131 = HIWORD(v193);
                    *(_WORD *)(a1 + 15526) = HIWORD(v193);
                    BOOL v133 = v130 == 6914 && v131 == 6914;
                    *(unsigned char *)(a1 + 15538) = v133;
                    *(_DWORD *)(a1 + 1548) |= 0x8202u;
                    *(_DWORD *)(a1 + 28652) = 0;
                    *(_DWORD *)(a1 + 1520) |= 0x800000u;
                    if ((v47 & 0x800) == 0)
                    {
LABEL_296:
                      if ((v47 & 0x200) == 0) {
                        goto LABEL_297;
                      }
                      goto LABEL_316;
                    }
                  }
                  else if ((v47 & 0x800) == 0)
                  {
                    goto LABEL_296;
                  }
                  *(unsigned char *)(a1 + 15537) = v202;
                  *(unsigned char *)(a1 + 15533) = v201;
                  *(_DWORD *)(a1 + 28652) = 0;
                  *(_DWORD *)(a1 + 1520) |= 0x800000u;
                  if ((v47 & 0x200) == 0)
                  {
LABEL_297:
                    if ((v47 & 1) == 0) {
                      goto LABEL_298;
                    }
                    goto LABEL_317;
                  }
LABEL_316:
                  *(unsigned char *)(a1 + 15532) = v203;
                  *(_DWORD *)(a1 + 28652) = 0;
                  *(_DWORD *)(a1 + 1520) |= 0x2000000u;
                  if ((v47 & 1) == 0)
                  {
LABEL_298:
                    if ((v47 & 2) == 0) {
                      goto LABEL_299;
                    }
                    goto LABEL_321;
                  }
LABEL_317:
                  *(void *)(a1 + 20792) = *((void *)&v189 + 1);
                  uint64_t v134 = *(unsigned __int8 *)(v54 + 3800);
                  if (*(unsigned char *)(v54 + 3800))
                  {
                    v135 = (uint64_t *)&v188[1] + 1;
                    v136 = (void *)(a1 + 33176);
                    do
                    {
                      uint64_t v137 = *v135++;
                      void *v136 = v137;
                      v136 += 209;
                      --v134;
                    }
                    while (v134);
                  }
                  *(_DWORD *)(a1 + 1524) |= 1u;
                  *(_DWORD *)(a1 + 1536) |= 1u;
                  *(_DWORD *)(a1 + 28652) = 0;
                  *(_DWORD *)(a1 + 1548) |= 0x8022000u;
                  if ((v47 & 2) == 0)
                  {
LABEL_299:
                    if ((v47 & 4) == 0) {
                      goto LABEL_300;
                    }
                    goto LABEL_325;
                  }
LABEL_321:
                  *(void *)(a1 + 20880) = v190[0];
                  *(_DWORD *)(a1 + 15760) = v191;
                  uint64_t v138 = *(unsigned __int8 *)(v54 + 3800);
                  if (*(unsigned char *)(v54 + 3800))
                  {
                    v139 = (void *)(a1 + 33184);
                    v140 = (uint64_t *)&v188[7] + 1;
                    do
                    {
                      uint64_t v141 = *v140++;
                      void *v139 = v141;
                      v139 += 209;
                      --v138;
                    }
                    while (v138);
                  }
                  *(_DWORD *)(a1 + 1524) |= 2u;
                  *(_DWORD *)(a1 + 1536) |= 1u;
                  *(_DWORD *)(a1 + 28652) = 0;
                  *(_DWORD *)(a1 + 1548) |= 0x8022000u;
                  if ((v47 & 4) == 0)
                  {
LABEL_300:
                    if ((v47 & 8) == 0) {
                      goto LABEL_301;
                    }
                    goto LABEL_326;
                  }
LABEL_325:
                  glMatrixMode_Exec(a1, 5890);
                  glLoadMatrixf_Exec(a1, (uint64_t)&v183);
                  *(_DWORD *)(a1 + 15684) = HIDWORD(v190[7]);
                  gleUpdateTextureParams((_DWORD *)a1, 0);
                  *(_WORD *)(v42 + 6196) = v195;
                  if ((v47 & 8) == 0)
                  {
LABEL_301:
                    if ((v47 & 0x2000) == 0) {
                      goto LABEL_302;
                    }
                    goto LABEL_327;
                  }
LABEL_326:
                  *(_DWORD *)(a1 + 16532) = v197;
                  gleUpdateTextureCoordGen((_DWORD *)a1);
                  if ((v47 & 0x2000) == 0)
                  {
LABEL_302:
                    if ((v47 & 0x4000) == 0)
                    {
LABEL_304:
                      if (v154) {
                        glPixelZoom_Exec(a1, *(float *)&v192, *((float *)&v192 + 1));
                      }
                      *(_DWORD *)(v42 + 2912) = v190[5];
                      return gleUpdateMatrixMode(a1);
                    }
LABEL_303:
                    *(_DWORD *)(v42 + 1588) = DWORD2(v191);
                    *(_DWORD *)(v42 + 1580) = HIDWORD(v191);
                    goto LABEL_304;
                  }
LABEL_327:
                  char *v43 = v205;
                  *(_OWORD *)(a1 + 15200) = v187;
                  *(void *)(a1 + 15216) = *(void *)&v188[0];
                  *(_DWORD *)(a1 + 15644) = DWORD1(v191);
                  *(unsigned char *)(a1 + 15120) = v206;
                  *(unsigned char *)(a1 + 15196) = v207;
                  *(unsigned char *)(a1 + 15319) = v208;
                  *(_DWORD *)(a1 + 15336) = v209;
                  *(unsigned char *)(a1 + 15340) = v210;
                  *(void *)(a1 + 15324) = *(void *)((char *)&v190[5] + 4);
                  *(_DWORD *)(a1 + 15332) = HIDWORD(v190[6]);
                  *(_DWORD *)(a1 + 1520) |= 0x10020203u;
                  *(_DWORD *)(v54 + 1104) |= 0x3C0000u;
                  *(_DWORD *)(a1 + 28652) = 0;
                  *(_DWORD *)(a1 + 1548) |= 0x40000u;
                  if ((v47 & 0x4000) == 0) {
                    goto LABEL_304;
                  }
                  goto LABEL_303;
                }
LABEL_290:
                *(_DWORD *)uint64_t v42 = v190[7];
                gleUpdateClipPlane(a1);
                int v128 = 0;
                unsigned int v129 = *(_DWORD *)v42;
                do
                {
                  if ((v129 >> v128))
                  {
                    *(_DWORD *)(a1 + 28652) = 0;
                    *(_DWORD *)(a1 + 1528) |= 0x1000000 << v128;
                  }
                  ++v128;
                }
                while (v128 != 8);
                goto LABEL_294;
              }
              *(_WORD *)(v42 + 6196) = 0;
              glMatrixMode_Exec(a1, 5890);
              glLoadIdentity_Exec(a1);
              *(_DWORD *)(a1 + 15684) = 4;
              gleUpdateTextureParams((_DWORD *)a1, 0);
              char v77 = 0;
              __int16 v78 = a12;
              if ((a12 >> 14)) {
                int v79 = -1;
              }
              else {
                int v79 = 0;
              }
              *(_DWORD *)(a1 + 15336) = v79;
              if ((a12 & 0x100) != 0)
              {
                *(_WORD *)(a1 + 15200) = 519;
                char v77 = 1;
                *(unsigned char *)(a1 + 15340) = 1;
              }
              *(unsigned char *)(a1 + 15204) = v77;
              *(_WORD *)(a1 + 15205) = 0;
              *(void *)(a1 + 15324) = 0;
              *(_DWORD *)(a1 + 15332) = 0;
              *(_DWORD *)(a1 + 15644) = 0;
              *(_DWORD *)(v168 + 1104) |= 0x1C0000u;
              *(_DWORD *)(a1 + 1520) |= 0x10000200u;
              *(_DWORD *)(a1 + 28652) = 0;
              *(_DWORD *)(a1 + 1548) |= 0x40000u;
              __int16 v80 = v166;
              if (!v16)
              {
                if ((a12 & 0x4000) == 0)
                {
                  char v146 = 0;
                  uint64_t v147 = 0;
                  uint64_t v148 = 0;
                  uint64_t v149 = 0;
                  uint64_t v150 = 0;
                  LOWORD(v151) = 0;
                  uint64_t v82 = 0;
                  v86 = 0;
                  uint64_t v145 = 0;
                  int v81 = 0;
                  char v88 = 1;
                  int v84 = 0;
                  char v89 = 1;
                  if ((a12 & 0x100) == 0)
                  {
LABEL_239:
                    char v167 = v89;
                    *(unsigned char *)(v168 + 3806) = (v82 != 0) | (2 * (v86 != 0));
                    *(void *)(a1 + 19224) = 0;
                    LOWORD(v218) = v80;
                    WORD1(v218) = v160;
                    WORD2(v218) = v156;
                    HIWORD(v218) = v160;
                    __int16 v219 = v80;
                    __int16 v220 = v165;
                    __int16 v221 = v156;
                    __int16 v222 = v165;
                    LOWORD(v211) = v161;
                    HIWORD(v211) = v13;
                    __int16 v212 = v155;
                    __int16 v213 = v13;
                    __int16 v214 = v161;
                    __int16 v215 = v164;
                    __int16 v216 = v155;
                    __int16 v217 = v164;
                    glEnableClientState_Exec(a1, 32884);
                    glEnableClientState_Exec(a1, 32888);
                    glVertexPointer_Exec(a1, 2, 5122, 0, (uint64_t)&v218);
                    glTexCoordPointer_Exec(a1, 2, 5122, 0, (uint64_t)&v211);
                    glDrawArrays_ForBlit(a1, 5, 0, 4);
                    *(unsigned char *)(v168 + 3806) = 0;
                    uint64_t v42 = a1 + 17572;
                    int v73 = v169;
                    if (v82)
                    {
                      if (v88)
                      {
                        *(_WORD *)(v82 + 960) = WORD2(v150);
                        *(_WORD *)(v82 + 962) = WORD2(v149);
                        *(_WORD *)(v82 + 964) = v149;
                        *(_WORD *)(v82 + 952) = v151;
                        *(_WORD *)(v82 + 954) = v150;
                        *(_DWORD *)(v82 + 968) = v84;
                        *(unsigned char *)(v82 + 597) = BYTE4(v148);
                      }
                      else
                      {
                        gleUnbindAndFreeTextureObject(a1, v82);
                        int v73 = v169;
                      }
                    }
                    uint64_t v54 = v168;
                    if (v86)
                    {
                      if (v167)
                      {
                        *((_WORD *)v86 + 476) = v148;
                        *((_WORD *)v86 + 477) = WORD2(v147);
                        v86[242] = v81;
                        *(void *)((char *)v86 + 958) = v145;
                        *((_WORD *)v86 + 461) = v147;
                        *((unsigned char *)v86 + 597) = v146;
                      }
                      else
                      {
                        gleUnbindAndFreeTextureObject(a1, (uint64_t)v86);
                        int v73 = v169;
                      }
                    }
                    goto LABEL_247;
                  }
                  goto LABEL_215;
                }
                v86 = 0;
                uint64_t v147 = 0;
                uint64_t v148 = 0;
                uint64_t v150 = 0;
                uint64_t v151 = 0;
                uint64_t v149 = 0;
                char v146 = 0;
                uint64_t v145 = 0;
                int v84 = 0;
                int v81 = 0;
LABEL_181:
                v90 = *(unsigned __int8 **)(a1 + 29480);
                int v91 = v90[43];
                unsigned int v92 = v90[48];
                unsigned int v93 = v90[51];
                if (v91)
                {
                  BOOL v94 = v93 == 0;
                  if (v92 < 0x11) {
                    unsigned int v95 = 34842;
                  }
                  else {
                    unsigned int v95 = 34836;
                  }
                  if (v94) {
                    uint64_t v83 = v95 + 1;
                  }
                  else {
                    uint64_t v83 = v95;
                  }
                }
                else
                {
                  if (v92 < 9)
                  {
                    if (v92 < 6)
                    {
                      if (v93) {
                        unsigned int v99 = 32855;
                      }
                      else {
                        unsigned int v99 = 32848;
                      }
                      if (v93 <= 1) {
                        uint64_t v83 = v99;
                      }
                      else {
                        uint64_t v83 = 32854;
                      }
                      goto LABEL_201;
                    }
                    BOOL v96 = v93 == 0;
                    unsigned int v97 = 32856;
                    unsigned int v98 = 32849;
                  }
                  else
                  {
                    BOOL v96 = v93 == 0;
                    unsigned int v97 = 32859;
                    unsigned int v98 = 32852;
                  }
                  if (v96) {
                    uint64_t v83 = v98;
                  }
                  else {
                    uint64_t v83 = v97;
                  }
                }
LABEL_201:
                TextureObject = gleCreateTextureObject(*(void *)(a1 + 19296), 2, -1);
                uint64_t v82 = (uint64_t)TextureObject;
                TextureObject[240] = -2127593169;
                *((_WORD *)TextureObject + 482) = -32465;
                *((_WORD *)TextureObject + 476) = v152;
                *((_WORD *)TextureObject + 477) = v152;
                if (v162) {
                  char v101 = 1;
                }
                else {
                  char v101 = 13;
                }
                *((unsigned char *)TextureObject + 597) = v101;
                v102 = (unsigned __int16 *)(TextureObject + 268);
                LOWORD(v144) = 256;
                unsigned int v163 = v83;
                uint64_t v103 = v83;
                uint64_t v104 = (uint64_t)(TextureObject + 10);
                gleEvaluateTextureImageChangeNoSync(a1, (uint64_t)(TextureObject + 10), (uint64_t)(TextureObject + 268), v158, v157, 1, 0, v103, 0x1908u, 0x1401u, v144, 1);
                *(_DWORD *)(v82 + 1008) = 65540;
                LODWORD(v142) = 0;
                HIDWORD(v142) = v158;
                if ((*(unsigned int (**)(void, void, void, void, void, void, void, void, uint64_t, void))(*(void *)(a1 + 29448) + 360))(*(void *)(a1 + 29016), *(void *)(v104 + 8 * *(unsigned __int8 *)(v168 + 3803)), 0, 0, 0, 0, 0, 0, v142, v157))
                {
                  char v88 = 0;
                  *(void *)(v82 + 576) = *(void *)(a1 + 29024);
                  *(unsigned char *)(v82 + 1083) |= 0x40u;
                  __int16 v80 = v166;
                  __int16 v78 = a12;
                }
                else
                {
                  if (gfxAllocateTextureLevel())
                  {
                    gleTextureImageCopy(a1, v104, v102, v163, 0, 0, v158, v157);
                    *(unsigned char *)(v82 + 1083) |= 0x10u;
                  }
                  else if (!*(_WORD *)(v168 + 1136))
                  {
                    *(_WORD *)(v168 + 1136) = 1285;
                  }
                  gfxModifyPluginTextureLevel();
                  char v88 = 0;
                  __int16 v80 = v166;
                  __int16 v78 = a12;
                }
                uint64_t v87 = HIDWORD(v151);
LABEL_212:
                char v89 = 1;
                if ((v78 & 0x100) == 0 || v86)
                {
LABEL_229:
                  if ((v78 & 0x4000) != 0)
                  {
                    *(void *)(a1 + 20792) = v82;
                    uint64_t v108 = *(unsigned __int8 *)(v168 + 3800);
                    if (*(unsigned char *)(v168 + 3800))
                    {
                      v109 = (uint64_t *)(v82 + 40);
                      v110 = (void *)(a1 + 33176);
                      do
                      {
                        uint64_t v111 = *v109++;
                        void *v110 = v111;
                        v110 += 209;
                        --v108;
                      }
                      while (v108);
                    }
                    *(_DWORD *)(a1 + 1524) |= 1u;
                    *(_DWORD *)(a1 + 1536) |= 1u;
                    *(_DWORD *)(a1 + 28652) = 0;
                    *(_DWORD *)(a1 + 1548) |= 0x8022000u;
                  }
                  if ((v78 & 0x100) != 0)
                  {
                    *(void *)(a1 + 20880) = v86;
                    *(_DWORD *)(a1 + 15760) = 4;
                    uint64_t v112 = *(unsigned __int8 *)(v168 + 3800);
                    if (*(unsigned char *)(v168 + 3800))
                    {
                      v113 = (uint64_t *)(v86 + 10);
                      v114 = (void *)(a1 + 33184);
                      do
                      {
                        uint64_t v115 = *v113++;
                        void *v114 = v115;
                        v114 += 209;
                        --v112;
                      }
                      while (v112);
                    }
                    *(_DWORD *)(a1 + 1524) |= 2u;
                    *(_DWORD *)(a1 + 1536) |= 1u;
                    *(_DWORD *)(a1 + 28652) = 0;
                    *(_DWORD *)(a1 + 1548) |= 0x8022000u;
                  }
                  goto LABEL_239;
                }
                if (v87)
                {
LABEL_221:
                  uint64_t v107 = v87;
                  v86 = gleCreateTextureObject(*(void *)(a1 + 19296), 2, -1);
                  v86[240] = -2127593169;
                  *((_WORD *)v86 + 482) = -32465;
                  v86[238] = 637543936;
                  *((unsigned char *)v86 + 597) = 1;
                  LOWORD(v144) = 256;
                  gleEvaluateTextureImageChangeNoSync(a1, (uint64_t)(v86 + 10), (uint64_t)(v86 + 268), v158, v157, 1, 0, v107, 0x1902u, 0x1401u, v144, 1);
                  v86[252] = 65540;
                  LODWORD(v143) = 0;
                  HIDWORD(v143) = v158;
                  if ((*(unsigned int (**)(void, void, void, void, void, void, void, void, uint64_t, void))(*(void *)(a1 + 29448) + 360))(*(void *)(a1 + 29016), *(void *)&v86[2 * *(unsigned __int8 *)(v168 + 3803) + 10], 0, 0, 0, 0, 0, 0, v143, v157))
                  {
                    char v89 = 0;
                    *((void *)v86 + 72) = *(void *)(a1 + 29024);
                    *((unsigned char *)v86 + 1083) |= 0x40u;
                  }
                  else
                  {
                    if (gfxAllocateTextureLevel())
                    {
                      gleTextureImageCopy(a1, (uint64_t)(v86 + 10), (unsigned __int16 *)v86 + 536, v107, 0, 0, v158, v157);
                      *((unsigned char *)v86 + 1083) |= 0x10u;
                    }
                    else if (!*(_WORD *)(v168 + 1136))
                    {
                      *(_WORD *)(v168 + 1136) = 1285;
                    }
                    gfxModifyPluginTextureLevel();
                    char v89 = 0;
                  }
                  __int16 v80 = v166;
                  __int16 v78 = a12;
                  goto LABEL_229;
                }
LABEL_215:
                unsigned int v105 = *(unsigned __int8 *)(*(void *)(a1 + 29480) + 56);
                if (v105 < 0x19) {
                  unsigned int v106 = 33190;
                }
                else {
                  unsigned int v106 = 33191;
                }
                if (v105 >= 0x11) {
                  uint64_t v87 = v106;
                }
                else {
                  uint64_t v87 = 33189;
                }
                goto LABEL_221;
              }
              int v81 = 0;
              if ((a12 & 0x4000) != 0)
              {
                uint64_t v82 = *(void *)(v16 + 16 * (*(unsigned __int16 *)(v16 + 472) - 36064) + 40);
                uint64_t v83 = *(unsigned __int16 *)(v82 + 1000);
                if ((*(_WORD *)(v82 + 808) & 0x200F) == 2)
                {
                  LOWORD(v149) = *(_WORD *)(v82 + 964);
                  WORD2(v149) = *(_WORD *)(v82 + 962);
                  WORD2(v150) = *(_WORD *)(v82 + 960);
                  LOWORD(v151) = *(_WORD *)(v82 + 952);
                  LOWORD(v150) = *(_WORD *)(v82 + 954);
                  int v84 = *(_DWORD *)(v82 + 968);
                  BYTE4(v148) = *(unsigned char *)(v82 + 597);
                  *(_DWORD *)(v82 + 960) = -2127593169;
                  *(_WORD *)(v82 + 964) = -32465;
                  *(_WORD *)(v82 + 952) = v152;
                  *(_WORD *)(v82 + 954) = v152;
                  *(_DWORD *)(v82 + 968) = 1065353216;
                  if (v162) {
                    char v85 = 1;
                  }
                  else {
                    char v85 = 13;
                  }
                  *(unsigned char *)(v82 + 597) = v85;
                  if ((a12 & 0x100) != 0) {
                    goto LABEL_166;
                  }
                  goto LABEL_175;
                }
                uint64_t v82 = 0;
                LOWORD(v151) = 0;
                uint64_t v149 = 0;
                uint64_t v150 = 0;
              }
              else
              {
                uint64_t v82 = 0;
                LOWORD(v151) = 0;
                uint64_t v149 = 0;
                uint64_t v150 = 0;
                uint64_t v83 = 0;
              }
              BYTE4(v148) = 0;
              int v84 = 0;
              if ((a12 & 0x100) != 0)
              {
LABEL_166:
                v86 = *(_DWORD **)(v16 + 168);
                uint64_t v87 = *((unsigned __int16 *)v86 + 500);
                if ((v86[202] & 0x200F) == 2)
                {
                  WORD2(v147) = *((_WORD *)v86 + 477);
                  LOWORD(v148) = *((_WORD *)v86 + 476);
                  int v81 = v86[242];
                  uint64_t v145 = *(void *)((char *)v86 + 958);
                  char v146 = *((unsigned char *)v86 + 597);
                  LOWORD(v147) = *((_WORD *)v86 + 461);
                  v86[238] = 637543936;
                  v86[242] = 1065353216;
                  *(void *)((char *)v86 + 958) = 0x812F812F812F0000;
                  *((_WORD *)v86 + 461) = 6409;
                  *((unsigned char *)v86 + 597) = 1;
LABEL_178:
                  char v88 = 1;
                  if ((a12 & 0x4000) == 0 || v82) {
                    goto LABEL_212;
                  }
                  HIDWORD(v151) = v87;
                  if (v83) {
                    goto LABEL_201;
                  }
                  goto LABEL_181;
                }
                v86 = 0;
                uint64_t v147 = 0;
                LOWORD(v148) = 0;
LABEL_177:
                char v146 = 0;
                uint64_t v145 = 0;
                goto LABEL_178;
              }
LABEL_175:
              v86 = 0;
              uint64_t v147 = 0;
              LOWORD(v148) = 0;
              uint64_t v87 = 0;
              goto LABEL_177;
            }
LABEL_149:
            *(unsigned char *)(a1 + 15537) = 0;
            *(unsigned char *)(a1 + 15533) = 0;
            *(_DWORD *)(a1 + 1520) |= 0x800000u;
            if ((v47 & 0x200) == 0) {
              goto LABEL_136;
            }
            goto LABEL_150;
          }
LABEL_131:
          *(_WORD *)(v168 + 1014) = -30435;
          *(unsigned char *)(a1 + 15178) = *(unsigned char *)(v168 + 3792) == 0;
          *(_DWORD *)(a1 + 28652) = 0;
          *(_DWORD *)(a1 + 1524) |= 0x400000u;
          goto LABEL_132;
        }
LABEL_87:
        LODWORD(v190[7]) = *(_DWORD *)v42;
        goto LABEL_88;
      }
LABEL_83:
      char v199 = *v41;
      goto LABEL_84;
    }
  }
  if (!*(unsigned char *)(*(void *)(a1 + 29480) + 111))
  {
    int v162 = 1;
    goto LABEL_31;
  }
  uint64_t v170 = 0;
  uint64_t result = gleClipReadableRange(a1, v19, v20, (int *)&v218, (int *)&v211, (int *)&v172, &v171, (_DWORD *)&v170 + 1, &v170);
  v17.n128_f32[0] = v32;
  a10.n128_f32[0] = v33;
  if (result)
  {
    v17.n128_f32[0] = v32 + (float)((float)SHIDWORD(v170) * v31);
    a10.n128_f32[0] = v33 + (float)((float)(int)v170 * v30);
  }
  if ((int)v172 >= 1 && v171 >= 1)
  {
    signed int v161 = v14;
    uint64_t v35 = v218;
    int v162 = 1;
    uint64_t v36 = v211;
    goto LABEL_32;
  }
  return result;
}

uint64_t gleCheckMultisampleResolveFramebuffers(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = (__int16 *)(a1 + 29832);
  uint64_t v4 = *a3;
  if (*(void *)a2) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if (*v3) {
      return 0;
    }
    uint64_t result = 0;
    __int16 v12 = 1286;
LABEL_32:
    *uint64_t v3 = v12;
    return result;
  }
  if (*(unsigned char *)(a2 + 438)) {
    BOOL v6 = *((unsigned char *)a3 + 438) == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6
    || (*(unsigned __int16 *)(a2 + 434) == *((unsigned __int16 *)a3 + 217)
      ? (BOOL v7 = *(unsigned __int16 *)(a2 + 436) == *((unsigned __int16 *)a3 + 218))
      : (BOOL v7 = 0),
        !v7))
  {
LABEL_29:
    if (*v3) {
      return 0;
    }
    uint64_t result = 0;
    __int16 v12 = 1282;
    goto LABEL_32;
  }
  if (*(unsigned __int8 *)(a1 + 32492) < 5u) {
    return 1;
  }
  unsigned int v8 = *(unsigned __int16 *)(*(void *)a2 + 812);
  if (v8 > 0x1907)
  {
    if (v8 != 6408)
    {
      if (v8 != 33319) {
        goto LABEL_29;
      }
      int v9 = *(unsigned __int16 *)(v4 + 812);
      uint64_t result = 1;
      int v11 = 6403;
      goto LABEL_24;
    }
    return 1;
  }
  if (v8 == 6403)
  {
    if (*(_WORD *)(v4 + 812) != 6403) {
      goto LABEL_29;
    }
    return 1;
  }
  if (v8 != 6407) {
    goto LABEL_29;
  }
  int v9 = *(unsigned __int16 *)(v4 + 812);
  uint64_t result = 1;
  if (v9 != 6403)
  {
    int v11 = 6407;
LABEL_24:
    if (v9 != v11 && v9 != 33319) {
      goto LABEL_29;
    }
  }
  return result;
}

uint64_t gleGetAttachmentInfo(uint64_t result, uint64_t a2, int a3, int a4, int *a5)
{
  *a5 = 0;
  uint64_t v6 = *(void *)(a2 + 16 * a3 + 40);
  if (v6)
  {
    uint64_t v8 = v6 + 40;
    uint64_t v9 = a2 + 16 * a3;
    uint64_t v10 = *(unsigned int *)(v9 + 300);
    uint64_t v11 = *(unsigned int *)(v9 + 304);
    if (a4 == 33296)
    {
      int v18 = *(unsigned __int16 *)(v6 + 1000);
      uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, int *))(*(void *)(result + 29496)
                                                                                           + 376))(*(void *)(result + 29464), *(void *)(v8 + 8 * *(unsigned __int8 *)(result + 32500)), v10, v11, 4099, &v18);
      if ((v18 - 35920) >= 0xFFFFFFF1) {
        int v13 = 35904;
      }
      else {
        int v13 = 9729;
      }
      goto LABEL_16;
    }
    if (a4 == 33297)
    {
      int v19 = *(unsigned __int16 *)(v6 + 1000);
      uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, int *))(*(void *)(result + 29496)
                                                                                           + 376))(*(void *)(result + 29464), *(void *)(v8 + 8 * *(unsigned __int8 *)(result + 32500)), v10, v11, 4099, &v19);
      int v12 = v19;
      int v13 = 5126;
      if ((v19 - 34836) < 0xC
        || (v19 - 33325) < 4
        || (v19 - 36012) < 2
        || v19 == 35898
        || v19 == 35901)
      {
        goto LABEL_16;
      }
      if ((v19 - 36208) >= 0x12)
      {
        if ((v19 - 33330) > 0xA)
        {
          if (v19 != 36975)
          {
            if ((v19 - 36226) < 0x12)
            {
LABEL_27:
              int v13 = 5124;
              goto LABEL_16;
            }
            BOOL v14 = (v19 & 1) == 0;
LABEL_25:
            if ((v19 - 33340) < 0xFFFFFFF5 || v14)
            {
              uint64_t result = gleInternalFormatIsSigned_0(v19);
              if (result)
              {
                int v13 = 36764;
              }
              else if (v12)
              {
                int v13 = 35863;
              }
              else
              {
                int v13 = 0;
              }
              goto LABEL_16;
            }
            goto LABEL_27;
          }
        }
        else if (v19)
        {
          BOOL v14 = 0;
          goto LABEL_25;
        }
      }
      int v13 = 5125;
LABEL_16:
      *a5 = v13;
      return result;
    }
    int v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(result + 29496) + 376);
    uint64_t v16 = *(void *)(v8 + 8 * *(unsigned __int8 *)(result + 32500));
    uint64_t v17 = *(void *)(result + 29464);
    return v15(v17, v16, v10, v11);
  }
  return result;
}

uint64_t gleInternalFormatIsSigned_0(int a1)
{
  if ((a1 - 34836) < 0xC || (a1 - 33325) < 4) {
    return 1;
  }
  if ((a1 - 36226) >= 0x12) {
    int v3 = ((a1 - 33329) < 0xB) & a1;
  }
  else {
    int v3 = 1;
  }
  if (a1 == 36286) {
    int v4 = 1;
  }
  else {
    int v4 = v3;
  }
  if (a1 == 36284) {
    unsigned int v5 = 1;
  }
  else {
    unsigned int v5 = v4;
  }
  if ((a1 - 36756) >= 8) {
    return v5;
  }
  else {
    return 1;
  }
}

uint64_t gleGetAttachmentsParameters(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v4 = 0;
  *a3 = 0;
  uint64_t v5 = *(void *)(result + 28960);
  while (1)
  {
    uint64_t v6 = v5 + v4;
    uint64_t v7 = *(void *)(v5 + v4 + 40);
    if (v7) {
      break;
    }
    v4 += 16;
    if (v4 == 128) {
      return result;
    }
  }
  uint64_t v8 = *(unsigned int *)(v6 + 300);
  uint64_t v9 = *(unsigned int *)(v6 + 304);
  uint64_t v10 = v7 + 8 * *(unsigned __int8 *)(result + 32500);
  int v11 = 0;
  uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, int *))(*(void *)(result + 29496)
                                                                                       + 376))(*(void *)(result + 29464), *(void *)(v10 + 40), v8, v9, a2, &v11);
  *a3 = v11;
  return result;
}

uint64_t gleFallbackBegin(unint64_t a1, unsigned int a2)
{
  v29[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = malloc_type_malloc(0xC8uLL, 0x577B5147uLL);
  if (!v4) {
    abort();
  }
  uint64_t v5 = 0;
  uint64_t v6 = (_DWORD *)(a1 + 28652);
  *(void *)(a1 + 28992) = v4;
  uint64_t v7 = *(void *)(a1 + 29232);
  long long v8 = *(_OWORD *)(a1 + 29216);
  long long v9 = *(_OWORD *)(a1 + 29200);
  v4[9] = *(_OWORD *)(a1 + 29184);
  v4[10] = v9;
  v4[11] = v8;
  *((void *)v4 + 24) = v7;
  long long v10 = *(_OWORD *)(a1 + 29168);
  long long v11 = *(_OWORD *)(a1 + 29152);
  long long v12 = *(_OWORD *)(a1 + 29136);
  v4[5] = *(_OWORD *)(a1 + 29120);
  v4[6] = v12;
  v4[7] = v11;
  v4[8] = v10;
  long long v13 = *(_OWORD *)(a1 + 29104);
  long long v14 = *(_OWORD *)(a1 + 29088);
  long long v15 = *(_OWORD *)(a1 + 29072);
  v4[1] = *(_OWORD *)(a1 + 29056);
  v4[2] = v15;
  v4[3] = v14;
  v4[4] = v13;
  *uint64_t v4 = *(_OWORD *)(a1 + 29040);
  *(_WORD *)(a1 + 2276) = 2;
  uint64_t v16 = *(void *)(a1 + 28992);
  v29[0] = *(void *)(a1 + 29016);
  v29[1] = v16;
  uint64_t v17 = *(void *)(a1 + 29032);
  v29[2] = v17;
  v29[3] = 0;
  unsigned int v18 = *(unsigned __int8 *)(a1 + 32497);
  uint64_t v19 = a1 + 1672 * *(unsigned __int8 *)(a1 + 32497) + 33112;
  do
  {
    *(_DWORD *)(v19 + v5) = *(_DWORD *)(v17 + 584 + v5);
    v5 += 4;
  }
  while (v5 != 32);
  for (uint64_t i = 0; i != 4; ++i)
    *(unsigned char *)(a1 + 1672 * v18 + 33160 + i) = *(unsigned char *)(v17 + 632 + i);
  for (uint64_t j = 0; j != 4; ++j)
    *(unsigned char *)(a1 + 1672 * v18 + 33164 + j) = *(unsigned char *)(v17 + 636 + j);
  uint64_t v22 = a1 + 1672 * v18 + 32512;
  *(unsigned char *)(v22 + 41) = *(unsigned char *)(a1 + 1672 * v18 + 32553) & 0x80 | *(unsigned char *)(v17 + 25) & 0x7F;
  *(unsigned char *)(v22 + 40) = *(unsigned char *)(a1 + 1672 * v18 + 32552) | *(unsigned char *)(v17 + 24);
  *(unsigned char *)(a1 + 32505) = 1;
  *uint64_t v6 = 0;
  *(int8x16_t *)(a1 + 1520) = vorrq_s8(*(int8x16_t *)(a1 + 1520), (int8x16_t)xmmword_227DC2030);
  *(int8x16_t *)(a1 + 1536) = vorrq_s8(*(int8x16_t *)(a1 + 1536), (int8x16_t)xmmword_227DC2040);
  *(_DWORD *)(a1 + 29800) |= 0xDE3C0478;
  gleSwitchPlugin(a1, v18);
  gleUpdateViewScissorData(a1);
  (*(void (**)(void, uint64_t, void *))(*(void *)(a1 + 29448) + 192))(*(void *)(a1 + 29016), 1100, v29);
  v23.n128_f64[0] = glePopulateRenderDispatch(a1);
  int v26 = *(unsigned __int8 *)(a1 + 32501);
  if ((v26 - 3) >= 2)
  {
    if (v26 == 1) {
      gleUpdateDeferredStateGL3((int8x16_t *)a1, 0, 0, 0, a2);
    }
    else {
      gleUpdateDeferredState(a1, 0, 0, 0, a2, v23, v24, v25);
    }
  }
  else
  {
    gleUpdateDeferredStateES2((int8x16_t *)a1, 0, 0, 0, a2);
  }
  uint64_t v27 = (*(uint64_t (**)(void, unint64_t, unint64_t))(*(void *)(a1 + 29448) + 144))(*(void *)(a1 + 29016), a1 + 29040, a1 + 1520);
  gleUpdateDispatchJIT(a1);
  *uint64_t v6 = 0;
  *(_DWORD *)(a1 + 1544) |= 0x80000000;
  return v27;
}

double gleFallbackForceEnd(unint64_t a1)
{
  v5[4] = *MEMORY[0x263EF8340];
  unint64_t v2 = a1 + 28652;
  (*(void (**)(void))(*(void *)(a1 + 29448) + 240))(*(void *)(a1 + 29016));
  memset(v5, 0, 32);
  (*(void (**)(void, uint64_t, void *))(*(void *)(a1 + 29448) + 192))(*(void *)(a1 + 29016), 1100, v5);
  free(*(void **)(a1 + 28992));
  *(void *)(a1 + 28992) = 0;
  *(_DWORD *)unint64_t v2 = 0;
  *(int8x16_t *)(a1 + 1520) = vorrq_s8(*(int8x16_t *)(a1 + 1520), (int8x16_t)xmmword_227DC2030);
  *(int8x8_t *)(a1 + 1536) = vorr_s8(*(int8x8_t *)(a1 + 1536), (int8x8_t)0x10FFFFFE00FFFFFFLL);
  int v3 = *(_DWORD *)(a1 + 1544);
  *(_DWORD *)(a1 + 1548) |= 0x79DFE67Fu;
  *(_DWORD *)(v2 + 1148) |= 0xDE3C0478;
  *(_WORD *)(a1 + 2276) = 0;
  *(_DWORD *)(a1 + 1544) = v3 & 0x3EFFFFFF | 0x1000000;
  gleSwitchPlugin(a1, *(unsigned __int8 *)(v2 + 3846));
  gleUpdateViewScissorData(a1);
  return glePopulateRenderDispatch(a1);
}

uint64_t gleFallbackAttemptToEnd(unint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  v64[4] = *MEMORY[0x263EF8340];
  long long v10 = (unsigned __int8 *)(a1 + 28680);
  long long v11 = (unsigned __int8 *)(a1 + 14996);
  if (*(unsigned char *)(*(void *)(a1 + 29480) + 101)) {
    __int16 v12 = *(unsigned char *)(a1 + 32490) != 0;
  }
  else {
    __int16 v12 = 1;
  }
  *(_WORD *)(a1 + 2276) = v12;
  *(_DWORD *)(a1 + 28652) = 0;
  long long v13 = (void *)(a1 + 1520);
  *(_DWORD *)(a1 + 1532) |= 0x80000000;
  gleSetConditionalStateForRenderer(a1, *(unsigned __int8 *)(a1 + 32500));
  if ((*(unsigned char *)(a1 + 1533) & 0x10) != 0)
  {
    long long v14 = *(void **)(a1 + 26384);
    if (v14)
    {
      uint64_t v15 = v14[118];
      if (v15)
      {
        uint64_t v16 = v14 + 118;
        if (v10[3816])
        {
          unint64_t v17 = 0;
          uint64_t v18 = v14[119];
          uint64_t v19 = v14 + 221;
          do
          {
            *(v19 - 1) |= v15;
            *v19 |= v18;
            ++v17;
            v19 += 35;
          }
          while (v17 < v10[3816]);
        }
        *uint64_t v16 = 0;
        v16[1] = 0;
      }
    }
  }
  *(_DWORD *)(a1 + 2280) = a2;
  *(unsigned char *)(a1 + 2284) = a3;
  *(unsigned char *)(a1 + 2285) = a4;
  gleUpdateContextStateBuffers(a1);
  uint64_t v20 = (*(uint64_t (**)(void, void, unint64_t))(*(void *)(a1 + 29496) + 144))(*(void *)(a1 + 29464), *(void *)(a1 + 29488), a1 + 1520);
  uint64_t v21 = v20;
  if ((v20 & 0x1A0) != 0)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *(void *)(a1 + 29032);
    uint64_t v24 = *(void *)(a1 + 29480);
    do
    {
      *(_DWORD *)(v23 + 584 + v22) = *(_DWORD *)(v24 + 584 + v22);
      v22 += 4;
    }
    while (v22 != 32);
    for (uint64_t i = 0; i != 4; ++i)
      *(unsigned char *)(v23 + 632 + i) = *(unsigned char *)(v24 + 632 + i);
    for (uint64_t j = 0; j != 4; ++j)
      *(unsigned char *)(v23 + 636 + j) = *(unsigned char *)(v24 + 636 + j);
    *(unsigned char *)(v23 + 25) = *(unsigned char *)(v23 + 25) & 0x80 | *(unsigned char *)(v24 + 25) & 0x7F;
  }
  if ((v20 & 0x20) != 0 || (int v27 = *((_DWORD *)v11 + 3413), (v27 & a2) == 0))
  {
    uint64_t v28 = 0;
    uint64_t v29 = *(void *)(a1 + 29032);
    do
    {
      if ((*(_DWORD *)(v29 + 584 + 4 * v28) & a2) != 0) {
        break;
      }
      ++v28;
    }
    while (v28 != 8);
    int v27 = *(_DWORD *)(v29 + 4 * v28 + 584);
    *((_DWORD *)v11 + 3413) = v27;
  }
  *(_DWORD *)(a1 + 2280) = v27;
  if ((v20 & 0x80) != 0 || (LODWORD(v30) = *v10, (v30 & a3) == 0))
  {
    uint64_t v31 = 0;
    uint64_t v30 = *(void *)(a1 + 29032);
    do
    {
      if ((*(unsigned char *)(v30 + 632 + v31) & a3) != 0) {
        break;
      }
      ++v31;
    }
    while (v31 != 4);
    LOBYTE(v30) = *(unsigned char *)(v30 + v31 + 632);
    *long long v10 = v30;
  }
  *(unsigned char *)(a1 + 2284) = v30;
  if ((v20 & 0x100) != 0 || (LODWORD(v32) = v10[2], (v32 & a4) == 0))
  {
    uint64_t v33 = 0;
    uint64_t v32 = *(void *)(a1 + 29032);
    do
    {
      if ((*(unsigned char *)(v32 + 636 + v33) & a4) != 0) {
        break;
      }
      ++v33;
    }
    while (v33 != 4);
    LOBYTE(v32) = *(unsigned char *)(v32 + v33 + 636);
    v10[2] = v32;
  }
  *(unsigned char *)(a1 + 2285) = v32;
  if ((v20 & 4) != 0)
  {
    int v47 = *(_OWORD **)(a1 + 28992);
    (*(void (**)(void))(*(void *)(a1 + 29448) + 240))(*(void *)(a1 + 29016));
    memset(v64, 0, 32);
    (*(void (**)(void, uint64_t, void *))(*(void *)(a1 + 29448) + 192))(*(void *)(a1 + 29016), 1100, v64);
    *long long v13 = 0;
    *(void *)(a1 + 1528) = 0;
    *(_DWORD *)(a1 + 1536) = 0;
    int v48 = *(_DWORD *)(a1 + 1544) | 0x1000000;
    *(_DWORD *)(a1 + 1548) |= 0x79DFE67Fu;
    *((_DWORD *)v10 + 280) |= 0x12000000u;
    *(_DWORD *)(a1 + 1544) = v48 & 0x7FFFFFFF;
    if (!*(_WORD *)(a1 + 2276)) {
      *(_DWORD *)(a1 + 1544) = v48 & 0x3FFFFFFF;
    }
    *(void *)(a1 + 28992) = 0;
    gleSwitchPlugin(a1, v10[3818]);
    *(_OWORD *)(a1 + 29040) = *v47;
    long long v49 = v47[1];
    long long v50 = v47[2];
    long long v51 = v47[3];
    *(_OWORD *)(a1 + 29104) = v47[4];
    *(_OWORD *)(a1 + 29088) = v51;
    *(_OWORD *)(a1 + 29072) = v50;
    *(_OWORD *)(a1 + 29056) = v49;
    long long v52 = v47[5];
    long long v53 = v47[6];
    long long v54 = v47[7];
    *(_OWORD *)(a1 + 29168) = v47[8];
    *(_OWORD *)(a1 + 29152) = v54;
    *(_OWORD *)(a1 + 29136) = v53;
    *(_OWORD *)(a1 + 29120) = v52;
    long long v55 = v47[9];
    long long v56 = v47[10];
    long long v57 = v47[11];
    *(void *)(a1 + 29232) = *((void *)v47 + 24);
    *(_OWORD *)(a1 + 29216) = v57;
    *(_OWORD *)(a1 + 29200) = v56;
    *(_OWORD *)(a1 + 29184) = v55;
    gleUpdateDispatchJIT(a1);
    free(v47);
    uint64_t result = gleUpdateDispatchCodeChange(a1, v21, a5, v58);
    if ((v21 & 2) != 0)
    {
      BOOL v59 = *(void *)(a1 + 26280) != 0;
      uint64_t v60 = *(void *)(a1 + 29032);
      uint64_t v61 = *(void *)(v60 + 536);
      *(void *)(a1 + 26280) = v61;
      uint64_t v62 = *(void *)(v60 + 544);
      *(void *)(a1 + 26288) = v62;
      if (v61 && !*(unsigned char *)(v61 + 2)) {
        *(unsigned char *)(v61 + 2) = 1;
      }
      char v63 = v59 ^ (v61 == 0);
      if (v62 && !*(unsigned char *)(v62 + 2)) {
        *(unsigned char *)(v62 + 2) = 1;
      }
      if ((v63 & 1) == 0) {
        gleSelectPrimitiveFunc(a1);
      }
      return gleSelectVertexSubmitFunc(a1);
    }
  }
  else
  {
    *(_WORD *)(a1 + 2276) = 2;
    uint64_t result = gleSetConditionalStateForRenderer(a1, v10[3819]);
    unsigned int v35 = *v11;
    if (*v11)
    {
      unint64_t v36 = 0;
      unsigned int v37 = *(unsigned __int16 *)(a1 + 1524);
      unint64_t v38 = a1 + 20776;
      do
      {
        if (v37)
        {
          char v39 = 0;
          unint64_t v40 = *(void *)(a1 + 14896 + 8 * v36);
          unint64_t v41 = v38;
          unsigned int v42 = v37;
          do
          {
            if (v37)
            {
              unint64_t v43 = (v40 >> v39) & 0xF;
              if (v43 <= 0xA)
              {
                uint64_t v44 = *(void *)(v41 + 8 * v43);
                uint64_t v45 = *(void *)(v44 + 576);
                if (v45)
                {
                  if (v45 != *(void *)(a1 + 29024)) {
                    uint64_t result = gleSynchronizePluginTextureLevels(a1, v44 + 40);
                  }
                }
              }
            }
            v41 += 88;
            v39 += 4;
            BOOL v46 = v42 > 1;
            v42 >>= 1;
          }
          while (v46);
          unsigned int v35 = *v11;
        }
        ++v36;
        v38 += 1408;
      }
      while (v36 < v35);
    }
  }
  return result;
}

uint64_t gleSetConditionalStateForRenderer(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = *(void *)(a1 + 29032);
  int v4 = *(_DWORD *)(a1 + 1528);
  *(void *)(a1 + 29032) = a1 + 1672 * a2 + 32528;
  uint64_t result = gleUpdateViewScissorData(a1);
  if ((v4 & 1) == 0) {
    *(_DWORD *)(a1 + 1528) &= ~1u;
  }
  *(void *)(a1 + 29032) = v3;
  return result;
}

double gleInitHashMachine(void *a1)
{
  uint64_t v2 = gfxLibCalloc();
  *(void *)&double result = 63;
  a1[3] = 63;
  a1[1] = v2;
  a1[2] = 0;
  *a1 = 0;
  return result;
}

uint64_t gleFreeCtxHashMachine(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v6 = 0;
  uint64_t v7 = (*(_DWORD *)(a2 + 24) + 1);
  do
  {
    long long v8 = *(void **)(*(void *)(a2 + 8) + 8 * v6);
    if (v8)
    {
      do
      {
        long long v9 = (void *)*v8;
        a3(a1);
        long long v8 = v9;
      }
      while (v9);
    }
    ++v6;
  }
  while (v6 != v7);
  long long v10 = *(void **)(a2 + 16);
  if (v10)
  {
    do
    {
      long long v11 = (void *)*v10;
      MEMORY[0x22A686F90]();
      long long v10 = v11;
    }
    while (v11);
  }
  uint64_t result = *(void *)(a2 + 8);
  if (result)
  {
    JUMPOUT(0x22A686F90);
  }
  return result;
}

uint64_t gleSetSharedFreeFuncs()
{
  gfxSetSharedFreeFunc();
  gfxSetSharedFreeFunc();
  gfxSetSharedFreeFunc();
  gfxSetSharedFreeFunc();
  gfxSetSharedFreeFunc();
  gfxSetSharedFreeFunc();
  gfxSetSharedFreeFunc();
  gfxSetSharedFreeFunc();

  return gfxSetSharedFreeFunc();
}

uint64_t gleAddHashName(uint64_t a1, unsigned int a2)
{
  int v4 = *(uint64_t **)(a1 + 16);
  if (v4 && (unsigned int v5 = *((_DWORD *)v4 + 2), v5 - 1 <= a2))
  {
    while (1)
    {
      long long v8 = v4;
      int v9 = *((_DWORD *)v4 + 3);
      if (v5 - 1 == a2)
      {
        *((_DWORD *)v8 + 2) = a2;
        *((_DWORD *)v8 + 3) = v9 + 1;
        return 1;
      }
      unsigned int v10 = v9 + v5;
      if (v5 <= a2 && v10 > a2) {
        return 0;
      }
      if (v10 == a2) {
        break;
      }
      int v4 = (uint64_t *)*v8;
      if (*v8)
      {
        unsigned int v5 = *((_DWORD *)v4 + 2);
        if (v5 - 1 <= a2) {
          continue;
        }
      }
      uint64_t v11 = gfxLibAlloc();
      *(void *)uint64_t v11 = *v8;
      uint64_t *v8 = v11;
      uint64_t result = 1;
      *(_DWORD *)(v11 + 8) = a2;
      *(_DWORD *)(v11 + 12) = 1;
      return result;
    }
    int v12 = v9 + 1;
    *((_DWORD *)v8 + 3) = v12;
    long long v13 = (uint64_t *)*v8;
    if (*v8 && a2 + 1 == *((_DWORD *)v13 + 2))
    {
      *((_DWORD *)v8 + 3) = *((_DWORD *)v13 + 3) + v12;
      uint64_t *v8 = *v13;
      MEMORY[0x22A686F90]();
    }
    return 1;
  }
  else
  {
    uint64_t v6 = gfxLibAlloc();
    *(void *)uint64_t v6 = *(void *)(a1 + 16);
    uint64_t result = 1;
    *(_DWORD *)(v6 + 8) = a2;
    *(_DWORD *)(v6 + 12) = 1;
    *(void *)(a1 + 16) = v6;
  }
  return result;
}

uint64_t gleGetHashMachineObjectNameTargetPairs(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  unsigned int v8 = *(_DWORD *)(a2 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v9 = 0;
  int v10 = 0;
  uint64_t v11 = *(void *)(a2 + 8);
  if (v8 + 1 > 1) {
    uint64_t v12 = v8 + 1;
  }
  else {
    uint64_t v12 = 1;
  }
  do
  {
    long long v13 = (void *)(v11 + 8 * v9);
    int v14 = 1 - v10;
    do
    {
      long long v13 = (void *)*v13;
      --v14;
    }
    while (v13);
    ++v9;
    int v10 = -v14;
  }
  while (v9 != v12);
  int v15 = a3 + 13;
  uint64_t v16 = zeroTargetExtractor;
  if ((a3 + 13) > 0x13)
  {
    unint64_t v17 = zeroDefaultExtractor;
    int v18 = ((uint64_t (*)(uint64_t, void))zeroDefaultExtractor)(a1, 0);
  }
  else
  {
    unint64_t v17 = off_26DC2E630[v15];
    uint64_t v16 = off_26DC2E6D0[v15];
    int v18 = ((uint64_t (*)(uint64_t, void))v17)(a1, 0);
  }
  int v19 = v18;
  int v20 = v18 - v14;
  uint64_t v21 = malloc_type_malloc((8 * (v18 - v14)) | 4u, 0x2F77C0BuLL);
  *a4 = (uint64_t)v21;
  *uint64_t v21 = v20;
  if (v19) {
    ((void (*)(uint64_t, _DWORD *))v17)(a1, v21 + 1);
  }
  if (v14)
  {
    unsigned int v22 = 0;
    unsigned int v23 = 2 * v19;
    do
    {
      uint64_t v24 = *(uint64_t **)(v11 + 8 * v22);
      if (v24)
      {
        uint64_t v25 = *a4;
        do
        {
          *(_DWORD *)(v25 + 4 * (v23 + 1)) = *((_DWORD *)v24 + 4);
          int v26 = ((uint64_t (*)(uint64_t *))v16)(v24);
          uint64_t v25 = *a4;
          v23 += 2;
          *(_DWORD *)(*a4 + 4 * v23) = v26;
          uint64_t v24 = (uint64_t *)*v24;
        }
        while (v24);
      }
      ++v22;
    }
    while (v22 <= v8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  return 0;
}

uint64_t zeroDefaultExtractor()
{
  return 0;
}

uint64_t zeroTargetExtractor()
{
  return 0;
}

uint64_t renderbufferTargetExtractor()
{
  return 36161;
}

uint64_t framebufferTargetExtractor()
{
  return 36160;
}

uint64_t xfbTargetExtractor()
{
  return 36386;
}

uint64_t gleDeleteContextHashNameAndObject(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), unsigned int a4)
{
  uint64_t result = gleRemoveHashName(a2, a4);
  if (result)
  {
    uint64_t result = (uint64_t)gleRemoveHashObject(a2, a4);
    if (result)
    {
      int v8 = *(_DWORD *)(result + 20) - 1;
      *(_DWORD *)(result + 20) = v8;
      if (!v8)
      {
        return a3(a1, result);
      }
    }
  }
  return result;
}

uint64_t gleRemoveHashName(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 16);
  do
  {
    int v4 = v3;
    uint64_t v3 = (uint64_t *)*v3;
    if (!v3) {
      return 0;
    }
    unsigned int v5 = *((_DWORD *)v3 + 2);
    if (a2 < v5) {
      return 0;
    }
    int v6 = *((_DWORD *)v3 + 3);
    unsigned int v7 = v6 + v5;
  }
  while (v6 + v5 <= a2);
  if (a2 <= v5)
  {
    if (a2 + 1 >= v7)
    {
      *int v4 = *v3;
      MEMORY[0x22A686F90](v3);
    }
    else
    {
      *((_DWORD *)v3 + 2) = v5 + 1;
      *((_DWORD *)v3 + 3) = v6 - 1;
    }
  }
  else
  {
    *((_DWORD *)v3 + 3) = a2 - v5;
    unsigned int v8 = a2 + 1;
    if (a2 + 1 < v7)
    {
      uint64_t v9 = gfxLibAlloc();
      *(void *)uint64_t v9 = *v3;
      *(_DWORD *)(v9 + 8) = v8;
      *(_DWORD *)(v9 + 12) = v7 + ~a2;
      *uint64_t v3 = v9;
    }
  }
  return 1;
}

uint64_t gleUnbindDeleteHashNameAndObject(uint64_t a1, void (**a2)(void, uint64_t), void (*a3)(uint64_t, uint64_t), unsigned int a4)
{
  uint64_t result = gleRemoveHashName((uint64_t)a2, a4);
  if (result)
  {
    uint64_t result = (uint64_t)gleRemoveHashObject((uint64_t)a2, a4);
    if (result)
    {
      uint64_t v9 = result;
      a3(a1, result);
      int v10 = *(_DWORD *)(v9 + 20) - 1;
      *(_DWORD *)(v9 + 20) = v10;
      if (!v10) {
        (*a2)(*(void *)(a1 + 19296), v9);
      }
      return 1;
    }
  }
  return result;
}

uint64_t *gleDeleteHashNameAndObject_NoDecrement(uint64_t a1, unsigned int a2)
{
  if (!gleRemoveHashName(a1, a2)) {
    return 0;
  }

  return gleRemoveHashObject(a1, a2);
}

uint64_t gleUnbindDeleteHashNamesAndObjects(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), unsigned int a4, int a5)
{
  int v6 = (void *)(a2 + 16);
  unsigned int v5 = *(void **)(a2 + 16);
  if (v5)
  {
    unsigned int v7 = a4;
    uint64_t v10 = result;
    unsigned int v11 = a5 + a4;
    unsigned int v20 = a5 + a4;
    do
    {
      unsigned int v12 = *((_DWORD *)v5 + 2);
      if (v11 <= v12) {
        break;
      }
      unsigned int v13 = *((_DWORD *)v5 + 3) + v12;
      if (v13 > v7)
      {
        if (v12 <= v7) {
          unsigned int v14 = v7;
        }
        else {
          unsigned int v14 = *((_DWORD *)v5 + 2);
        }
        if (v11 >= v13) {
          unsigned int v15 = *((_DWORD *)v5 + 3) + v12;
        }
        else {
          unsigned int v15 = v11;
        }
        unsigned int v21 = v14;
        if (v14 < v15)
        {
          unsigned int v16 = v14;
          do
          {
            uint64_t result = (uint64_t)gleRemoveHashObject(a2, v16);
            if (result)
            {
              uint64_t v17 = result;
              uint64_t result = a3(v10, result);
              int v18 = *(_DWORD *)(v17 + 20) - 1;
              *(_DWORD *)(v17 + 20) = v18;
              if (!v18) {
                uint64_t result = (*(uint64_t (**)(void, uint64_t))a2)(*(void *)(v10 + 19296), v17);
              }
            }
            ++v16;
          }
          while (v15 != v16);
        }
        unsigned int v7 = a4;
        if (v12 >= a4)
        {
          unsigned int v11 = v20;
          if (v13 <= v20)
          {
            *int v6 = *v5;
            uint64_t result = MEMORY[0x22A686F90](v5);
            unsigned int v5 = v6;
          }
          else
          {
            *((_DWORD *)v5 + 2) = v15;
            *((_DWORD *)v5 + 3) = v13 - v15;
          }
        }
        else
        {
          unsigned int v11 = v20;
          *((_DWORD *)v5 + 3) = v21 - v12;
          if (v13 > v20)
          {
            uint64_t result = gfxLibAlloc();
            *(void *)uint64_t result = *v5;
            *(_DWORD *)(result + 8) = v15;
            *(_DWORD *)(result + 12) = v13 - v15;
            void *v5 = result;
            unsigned int v5 = (void *)result;
          }
        }
      }
      int v6 = v5;
      unsigned int v5 = (void *)*v5;
    }
    while (v5);
  }
  return result;
}

float gleTransformLightDirection(uint64_t a1, int a2)
{
  uint64_t v2 = (float *)(a1 + 160 * a2);
  float v3 = v2[3152];
  float v4 = v2[3153];
  float v5 = v2[3154];
  *((float32x2_t *)v2 + 1576) = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)(a1 + 9632), v4), *(float32x2_t *)(a1 + 9616), v3), *(float32x2_t *)(a1 + 9648), v5);
  v2[3154] = (float)((float)(v4 * *(float *)(a1 + 9640)) + (float)(v3 * *(float *)(a1 + 9624)))
           + (float)(v5 * *(float *)(a1 + 9656));
  gleUpdateLightDirection(a1, a2);
  return result;
}

uint64_t gleSetAddVertexMaterialFunc(uint64_t a1)
{
  if (*(_WORD *)(a1 + 29830) == 7168 && !*(unsigned char *)(a1 + 14892)) {
    uint64_t v1 = (uint64_t (*)(void))gleAddVertexMaterial;
  }
  else {
    uint64_t v1 = (uint64_t (*)(void))gleAddVertexMaterial2Sided;
  }
  *(void *)(a1 + 1472) = v1;
  *(void *)(a1 + 1480) = v1;
  return v1();
}

uint64_t gleAddVertexMaterial(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  *(_DWORD *)(v2 + 500) = 1;
  if (v2 != result + 13824 && v2 != *(void *)(result + 1424))
  {
    uint64_t v4 = *(void *)(v2 + 504);
    uint64_t v3 = *(void *)(v2 + 512);
    if (v2 == *(void *)(result + 1440))
    {
      *(void *)(result + 1440) = v3;
      if (!v3) {
        goto LABEL_6;
      }
    }
    else
    {
      *(void *)(v4 + 512) = v3;
      if (!v3)
      {
LABEL_6:
        uint64_t v5 = *(void *)(result + 1424);
        uint64_t v6 = *(void *)(v5 + 512);
        *(void *)(v2 + 504) = v5;
        *(void *)(v2 + 512) = v6;
        *(void *)(v5 + 512) = v2;
        *(void *)(v6 + 504) = v2;
        *(unsigned char *)(v5 + 497) = 63;
        *(unsigned char *)(v2 + 497) = 63;
        return result;
      }
    }
    *(void *)(v3 + 504) = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t gleAddVertexMaterial2Sided(uint64_t result, uint64_t a2)
{
  uint64_t v2 = 0;
  char v3 = 1;
  do
  {
    char v4 = v3;
    uint64_t v5 = *(void *)(a2 + 8 * v2 + 32);
    *(_DWORD *)(v5 + 500) = 1;
    if (v5 != result + 528 * v2 + 13824)
    {
      uint64_t v6 = result + 8 * v2;
      if (v5 != *(void *)(v6 + 1424))
      {
        uint64_t v8 = *(void *)(v5 + 504);
        uint64_t v7 = *(void *)(v5 + 512);
        if (v5 == *(void *)(result + 1440))
        {
          *(void *)(result + 1440) = v7;
          if (!v7) {
            goto LABEL_7;
          }
        }
        else
        {
          *(void *)(v8 + 512) = v7;
          if (!v7)
          {
LABEL_7:
            uint64_t v9 = *(void *)(v6 + 1424);
            uint64_t v10 = *(void *)(v9 + 512);
            *(void *)(v5 + 504) = v9;
            *(void *)(v5 + 512) = v10;
            *(void *)(v9 + 512) = v5;
            *(void *)(v10 + 504) = v5;
            *(unsigned char *)(v9 + 497) = 63;
            *(unsigned char *)(v5 + 497) = 63;
            goto LABEL_8;
          }
        }
        *(void *)(v7 + 504) = v8;
        goto LABEL_7;
      }
    }
LABEL_8:
    char v3 = 0;
    uint64_t v2 = 1;
  }
  while ((v4 & 1) != 0);
  return result;
}

uint64_t glePopMaterials(uint64_t result)
{
  uint64_t v1 = 0;
  char v2 = 1;
  do
  {
    char v3 = v2;
    uint64_t v4 = *(void *)(result + 8 * v1 + 1424);
    uint64_t v5 = *(void *)(v4 + 512);
    if (v5)
    {
      if (*(void *)(v5 + 512))
      {
        uint64_t v6 = result + 528 * v1;
        uint64_t v7 = *(void *)(result + 1440);
        uint64_t v8 = *(void *)(v6 + 14328);
        *(void *)(v8 + 512) = v7;
        if (v7) {
          *(void *)(v7 + 504) = v8;
        }
        uint64_t v9 = v6 + 13824;
        *(void *)(result + 1440) = v5;
        *(void *)(v9 + 504) = v4;
        *(void *)(v4 + 512) = v9;
        *(unsigned char *)(v4 + 497) = 63;
      }
      *(_DWORD *)(v5 + 500) = 0;
    }
    char v2 = 0;
    *(_DWORD *)(v4 + 500) = 0;
    uint64_t v1 = 1;
  }
  while ((v3 & 1) != 0);
  return result;
}

void *glePopAndCopyMaterials(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = 0;
  char v3 = 1;
  do
  {
    char v4 = v3;
    uint64_t v5 = (char *)&v1[v2];
    uint64_t v6 = (char *)*((void *)v5 + 178);
    if (*((void *)v6 + 64))
    {
      uint64_t v7 = v1[180];
      uint64_t v8 = (char *)&v1[66 * v2];
      uint64_t v9 = *((void *)v8 + 1791);
      *(void *)(v9 + 512) = v7;
      if (v7) {
        *(void *)(v7 + 504) = v9;
      }
      uint64_t v10 = v8 + 13824;
      v1[180] = v6;
      *((void *)v5 + 178) = v8 + 13824;
      float result = memcpy(v8 + 13824, v6, 0x210uLL);
      *((void *)v10 + 64) = 0;
      uint64_t v6 = v10;
    }
    char v3 = 0;
    *((_DWORD *)v6 + 125) = 0;
    uint64_t v2 = 1;
  }
  while ((v4 & 1) != 0);
  return result;
}

float32x2_t *gleUpdateLightRGBASumsUnconditional(float32x2_t *result, float32x2_t *a2, int a3)
{
  __int8 v3 = a2[62].i8[0];
  float32x2_t v4 = a2[64];
  if (v4) {
    int v5 = (a2[62].u8[1] | *(unsigned __int8 *)(*(void *)&v4 + 496)) ^ 0xFF;
  }
  else {
    int v5 = 0;
  }
  if ((a2[62].i8[0] & 0xE) != 0)
  {
    if ((~v5 & 0xE) != 0)
    {
      a2[58] = vmla_f32(a2[6], *a2, result[1566]);
      a2[59].f32[0] = a2[7].f32[0] + (float)(result[1567].f32[0] * a2[1].f32[0]);
      a2[59].i32[1] = a2[3].i32[1];
      float32x2_t v6 = result[2406];
      if (v6)
      {
        unint64_t v7 = *(unsigned __int16 *)(*(void *)&v6 + 12 * a3 + 2826);
        if (v7 <= 0x3FF)
        {
          *(__int32 *)((char *)result[194].i32 + ((v7 >> 3) & 0x1FFC)) |= 1 << v7;
          result[3581].i32[1] = 0;
          result[191].i32[1] |= 0x800000u;
        }
      }
      float32x2_t v8 = result[2409];
      if (v8)
      {
        unint64_t v9 = *(unsigned __int16 *)(*(void *)&v8 + 12 * a3 + 2826);
        if (v9 <= 0x3FF)
        {
          *(__int32 *)((char *)result[242].i32 + ((v9 >> 3) & 0x1FFC)) |= 1 << v9;
          result[3581].i32[1] = 0;
          result[191].i32[1] |= 0x4000000u;
        }
      }
      float32x2_t v10 = result[2410];
      if (v10)
      {
        unint64_t v11 = *(unsigned __int16 *)(*(void *)&v10 + 12 * a3 + 2826);
        if (v11 <= 0x3FF)
        {
          *(__int32 *)((char *)result[258].i32 + ((v11 >> 3) & 0x1FFC)) |= 1 << v11;
          result[3581].i32[1] = 0;
          result[191].i32[1] |= 0x8000000u;
        }
      }
    }
    else
    {
      *(_OWORD *)a2[58].f32 = *(_OWORD *)(*(void *)&v4 + 464);
    }
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  unsigned int v14 = (_DWORD *)&result[3581] + 1;
  unsigned int v15 = (float *)&result[1573];
  uint64_t v16 = 6 * a3;
  uint64_t v17 = *(void *)&v4 + 112;
  do
  {
    if ((v3 & 4) != 0)
    {
      int v18 = &a2[v13 + 10];
      if ((v5 & 4) != 0)
      {
        *(_OWORD *)v18->f32 = *(_OWORD *)(v17 + v13 * 8 - 32);
      }
      else
      {
        *int v18 = vmul_f32(*(float32x2_t *)(v15 - 10), *a2);
        __int32 v19 = a2[1].i32[1];
        unsigned int v20 = &a2[v13];
        v20[11].f32[0] = *(v15 - 8) * a2[1].f32[0];
        v20[11].i32[1] = v19;
        float32x2_t v21 = result[2406];
        if (v21)
        {
          unint64_t v22 = *(unsigned __int16 *)(*(void *)&v21 + v16 + v12 + 2720);
          if (v22 <= 0x3FF)
          {
            *(__int32 *)((char *)result[194].i32 + ((v22 >> 3) & 0x1FFC)) |= 1 << v22;
            *unsigned int v14 = 0;
            result[191].i32[1] |= 0x800000u;
          }
        }
        float32x2_t v23 = result[2409];
        if (v23)
        {
          unint64_t v24 = *(unsigned __int16 *)(*(void *)&v23 + v16 + v12 + 2720);
          if (v24 <= 0x3FF)
          {
            *(__int32 *)((char *)result[242].i32 + ((v24 >> 3) & 0x1FFC)) |= 1 << v24;
            *unsigned int v14 = 0;
            result[191].i32[1] |= 0x4000000u;
          }
        }
        float32x2_t v25 = result[2410];
        if (v25)
        {
          unint64_t v26 = *(unsigned __int16 *)(*(void *)&v25 + v16 + v12 + 2720);
          if (v26 <= 0x3FF)
          {
            *(__int32 *)((char *)result[258].i32 + ((v26 >> 3) & 0x1FFC)) |= 1 << v26;
            *unsigned int v14 = 0;
            result[191].i32[1] |= 0x8000000u;
          }
        }
      }
    }
    if ((v3 & 8) != 0)
    {
      int v27 = &a2[v13];
      if ((v5 & 8) != 0)
      {
        *(_OWORD *)v27[12].f32 = *(_OWORD *)(v17 + v13 * 8 - 16);
      }
      else
      {
        v27[12] = vmul_f32(*(float32x2_t *)(v15 - 6), a2[2]);
        __int32 v28 = a2[3].i32[1];
        v27[13].f32[0] = *(v15 - 4) * a2[3].f32[0];
        v27[13].i32[1] = v28;
        float32x2_t v29 = result[2406];
        if (v29)
        {
          unint64_t v30 = *(unsigned __int16 *)(*(void *)&v29 + v16 + v12 + 2722);
          if (v30 <= 0x3FF)
          {
            *(__int32 *)((char *)result[194].i32 + ((v30 >> 3) & 0x1FFC)) |= 1 << v30;
            *unsigned int v14 = 0;
            result[191].i32[1] |= 0x800000u;
          }
        }
        float32x2_t v31 = result[2409];
        if (v31)
        {
          unint64_t v32 = *(unsigned __int16 *)(*(void *)&v31 + v16 + v12 + 2722);
          if (v32 <= 0x3FF)
          {
            *(__int32 *)((char *)result[242].i32 + ((v32 >> 3) & 0x1FFC)) |= 1 << v32;
            *unsigned int v14 = 0;
            result[191].i32[1] |= 0x4000000u;
          }
        }
        float32x2_t v33 = result[2410];
        if (v33)
        {
          unint64_t v34 = *(unsigned __int16 *)(*(void *)&v33 + v16 + v12 + 2722);
          if (v34 <= 0x3FF)
          {
            *(__int32 *)((char *)result[258].i32 + ((v34 >> 3) & 0x1FFC)) |= 1 << v34;
            *unsigned int v14 = 0;
            result[191].i32[1] |= 0x8000000u;
          }
        }
      }
    }
    if ((v3 & 0x10) != 0)
    {
      unsigned int v35 = &a2[v13];
      if ((v5 & 0x10) != 0)
      {
        *(_OWORD *)v35[14].f32 = *(_OWORD *)(v17 + v13 * 8);
      }
      else
      {
        v35[14] = vmul_f32(*(float32x2_t *)(v15 - 2), a2[4]);
        __int32 v36 = a2[5].i32[1];
        v35[15].f32[0] = *v15 * a2[5].f32[0];
        v35[15].i32[1] = v36;
        float32x2_t v37 = result[2406];
        if (v37)
        {
          unint64_t v38 = *(unsigned __int16 *)(*(void *)&v37 + v16 + v12 + 2724);
          if (v38 <= 0x3FF)
          {
            *(__int32 *)((char *)result[194].i32 + ((v38 >> 3) & 0x1FFC)) |= 1 << v38;
            *unsigned int v14 = 0;
            result[191].i32[1] |= 0x800000u;
          }
        }
        float32x2_t v39 = result[2409];
        if (v39)
        {
          unint64_t v40 = *(unsigned __int16 *)(*(void *)&v39 + v16 + v12 + 2724);
          if (v40 <= 0x3FF)
          {
            *(__int32 *)((char *)result[242].i32 + ((v40 >> 3) & 0x1FFC)) |= 1 << v40;
            *unsigned int v14 = 0;
            result[191].i32[1] |= 0x4000000u;
          }
        }
        float32x2_t v41 = result[2410];
        if (v41)
        {
          unint64_t v42 = *(unsigned __int16 *)(*(void *)&v41 + v16 + v12 + 2724);
          if (v42 <= 0x3FF)
          {
            *(__int32 *)((char *)result[258].i32 + ((v42 >> 3) & 0x1FFC)) |= 1 << v42;
            *unsigned int v14 = 0;
            result[191].i32[1] |= 0x8000000u;
          }
        }
      }
    }
    v15 += 40;
    v13 += 6;
    v12 += 12;
  }
  while (v12 != 96);
  a2[62].i8[0] = 1;
  return result;
}

unint64_t gleClipLinesPlane(uint64_t a1, char *a2, unint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 26008);
  uint64_t v5 = *(unsigned int *)(a1 + 28732);
  if ((int)v5 >= 1)
  {
    uint64_t v7 = 0;
    float32x2_t v8 = a2 - 8;
    unint64_t v22 = a2 - 8;
    uint64_t v23 = *(unsigned int *)(a1 + 28732);
    while (1)
    {
      unint64_t v9 = (unint64_t)&v8[8 * (int)a3];
      if (v9 > (unint64_t)a2) {
        break;
      }
      unsigned int v14 = a2;
LABEL_16:
      a3 = (unint64_t)(v14 - a2) >> 3;
      if ((int)a3 < 2) {
        return 0;
      }
      if (++v7 == v5) {
        goto LABEL_18;
      }
    }
    float v10 = *(float *)(a1 + 16 * *(unsigned __int8 *)(a1 + v7 + 28736) + 17576);
    float v11 = *(float *)(a1 + 16 * *(unsigned __int8 *)(a1 + v7 + 28736) + 17580);
    float v12 = *(float *)(a1 + 16 * *(unsigned __int8 *)(a1 + v7 + 28736) + 17584);
    float v13 = *(float *)(a1 + 16 * *(unsigned __int8 *)(a1 + v7 + 28736) + 17588);
    unsigned int v14 = a2;
    unsigned int v15 = a2;
    while (1)
    {
      uint64_t v17 = *(void *)v15;
      uint64_t v16 = *((void *)v15 + 1);
      float v18 = (float)((float)((float)(v11 * *(float *)(*(void *)v15 + 100))
                          + (float)(*(float *)(*(void *)v15 + 96) * v10))
                  + (float)(*(float *)(*(void *)v15 + 104) * v12))
          + (float)(*(float *)(*(void *)v15 + 108) * v13);
      float v19 = (float)((float)((float)(v11 * *(float *)(v16 + 100)) + (float)(*(float *)(v16 + 96) * v10))
                  + (float)(*(float *)(v16 + 104) * v12))
          + (float)(*(float *)(v16 + 108) * v13);
      if (v18 >= 0.0) {
        break;
      }
      if (v19 >= 0.0)
      {
        (*(void (**)(uint64_t, void, void, void, float))(a1 + 27880))(a1, *(void *)v15, *((void *)v15 + 1), *(void *)v15, v18 / (float)(v18 - v19));
        *(void *)unsigned int v14 = v17;
LABEL_12:
        *((void *)v14 + 1) = v16;
        v14 += 16;
      }
LABEL_13:
      v15 += 16;
      if ((unint64_t)v15 >= v9)
      {
        float32x2_t v8 = v22;
        uint64_t v5 = v23;
        goto LABEL_16;
      }
    }
    *(void *)unsigned int v14 = v17;
    if (v19 < 0.0)
    {
      uint64_t v20 = v4 + 640 * (*(unsigned char *)(v16 + 1) == 0);
      if (*(unsigned char *)(v16 + 1)) {
        uint64_t v4 = v16;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, float))(a1 + 27880))(a1, v17, v16, v4, v18 / (float)(v18 - v19));
      *((void *)v14 + 1) = v4;
      v14 += 16;
      uint64_t v4 = v20;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_18:
  *(void *)(a1 + 26008) = v4;
  return a3;
}

_DWORD *gleLLVMInit(uint64_t a1)
{
  uint64_t v2 = 0;
  *(_OWORD *)(a1 + 20368) = 0u;
  *(_OWORD *)(a1 + 20352) = 0u;
  *(_OWORD *)(a1 + 20336) = 0u;
  *(_OWORD *)(a1 + 20320) = 0u;
  *(_OWORD *)(a1 + 20304) = 0u;
  *(_OWORD *)(a1 + 20288) = 0u;
  *(_OWORD *)(a1 + 26216) = 0u;
  *(_OWORD *)(a1 + 26232) = 0u;
  *(void *)(a1 + 27936) = 0;
  *(void *)(a1 + 27952) = 0;
  *(void *)(a1 + 27944) = 0;
  do
  {
    *(void *)(a1 + 28176 + v2) = 0;
    v2 += 32;
  }
  while (v2 != 480);
  uint64_t v3 = 0;
  *(_DWORD *)(a1 + 27960) = 0;
  *(_DWORD *)(a1 + 27980) = 0;
  *(_DWORD *)(a1 + 28000) = 0;
  *(void *)(a1 + 20388) = 0;
  *(_DWORD *)(a1 + 20404) = 0;
  *(_DWORD *)(a1 + 20428) = 0;
  *(_DWORD *)(a1 + 20436) = 0;
  *(_DWORD *)(a1 + 20444) = 0;
  *(void *)(a1 + 20452) = 0;
  *(_DWORD *)(a1 + 20468) = 0;
  *(_DWORD *)(a1 + 20480) = 0;
  *(void *)(a1 + 20416) = 0;
  do
  {
    *(_DWORD *)(a1 + 28184 + v3) = 0;
    v3 += 32;
  }
  while (v3 != 480);
  uint64_t v4 = malloc_type_malloc(8uLL, 0x577B5147uLL);
  if (!v4
    || (*(void *)(a1 + 26248) = v4, (uint64_t v5 = malloc_type_malloc(8uLL, 0x577B5147uLL)) == 0)
    || (*(void *)(a1 + 26256) = v5, (float32x2_t v6 = malloc_type_malloc(8uLL, 0x577B5147uLL)) == 0)
    || (*(void *)(a1 + 26264) = v6, (float result = malloc_type_malloc(8uLL, 0x577B5147uLL)) == 0))
  {
    abort();
  }
  *(void *)(a1 + 26272) = result;
  **(_DWORD **)(a1 + 26248) = 0;
  **(_DWORD **)(a1 + 26256) = 0;
  **(_DWORD **)(a1 + 26264) = 0;
  *float result = 0;
  return result;
}

void gleLLVMFree(uint64_t a1)
{
  free(*(void **)(a1 + 26248));
  free(*(void **)(a1 + 26256));
  free(*(void **)(a1 + 26264));
  free(*(void **)(a1 + 26272));
  uint64_t v2 = *(void *)(a1 + 24224);
  if (v2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    __int16 v3 = *(_WORD *)(v2 + 2) - 1;
    *(_WORD *)(v2 + 2) = v3;
    if (!v3) {
      MEMORY[0x22A686880](v2);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    *(void *)(a1 + 24224) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 24280);
  if (v4)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    __int16 v5 = *(_WORD *)(v4 + 2) - 1;
    *(_WORD *)(v4 + 2) = v5;
    if (!v5) {
      MEMORY[0x22A686880](v4);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    *(void *)(a1 + 24280) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 24328);
  if (v6)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    __int16 v7 = *(_WORD *)(v6 + 2) - 1;
    *(_WORD *)(v6 + 2) = v7;
    if (!v7) {
      MEMORY[0x22A686880](v6);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    *(void *)(a1 + 24328) = 0;
  }
  uint64_t v8 = *(void *)(a1 + 24376);
  if (v8)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    __int16 v9 = *(_WORD *)(v8 + 2) - 1;
    *(_WORD *)(v8 + 2) = v9;
    if (!v9) {
      MEMORY[0x22A686880](v8);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    *(void *)(a1 + 24376) = 0;
  }
}

_DWORD *gleAllocateMaterial()
{
  float result = malloc_type_malloc(0x210uLL, 0x577B5147uLL);
  if (!result) {
    abort();
  }
  result[17] = 0;
  result[18] = 0;
  result[19] = 1065353216;
  return result;
}

void *gleLightMaterialRGBAChange_B_E(uint64_t a1, void *a2)
{
  float result = glePushMaterial(a1, 1u);
  result[6] = *a2;
  result[7] = a2[1];
  *((_WORD *)result + 248) |= 0x202u;
  uint64_t v5 = *(void *)(a1 + 19248);
  if (v5)
  {
    unint64_t v6 = *(unsigned __int16 *)(v5 + 2834);
    if (v6 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v6 >> 3) & 0x1FFC) + 1552) |= 1 << v6;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x800000u;
    }
  }
  uint64_t v7 = *(void *)(a1 + 19272);
  if (v7)
  {
    unint64_t v8 = *(unsigned __int16 *)(v7 + 2834);
    if (v8 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v8 >> 3) & 0x1FFC) + 1936) |= 1 << v8;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x4000000u;
    }
  }
  uint64_t v9 = *(void *)(a1 + 19280);
  if (v9)
  {
    unint64_t v10 = *(unsigned __int16 *)(v9 + 2834);
    if (v10 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v10 >> 3) & 0x1FFC) + 2064) |= 1 << v10;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x8000000u;
    }
  }
  return result;
}

void *gleLightMaterialRGBAChange_B_A(uint64_t a1, void *a2)
{
  float result = glePushMaterial(a1, 1u);
  *float result = *a2;
  result[1] = a2[1];
  *((_WORD *)result + 248) |= 0x404u;
  uint64_t v5 = *(void *)(a1 + 19248);
  if (v5)
  {
    unint64_t v6 = *(unsigned __int16 *)(v5 + 2828);
    if (v6 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v6 >> 3) & 0x1FFC) + 1552) |= 1 << v6;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x800000u;
    }
  }
  uint64_t v7 = *(void *)(a1 + 19272);
  if (v7)
  {
    unint64_t v8 = *(unsigned __int16 *)(v7 + 2828);
    if (v8 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v8 >> 3) & 0x1FFC) + 1936) |= 1 << v8;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x4000000u;
    }
  }
  uint64_t v9 = *(void *)(a1 + 19280);
  if (v9)
  {
    unint64_t v10 = *(unsigned __int16 *)(v9 + 2828);
    if (v10 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v10 >> 3) & 0x1FFC) + 2064) |= 1 << v10;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x8000000u;
    }
  }
  return result;
}

void *gleLightMaterialRGBAChange_B_D(uint64_t a1, void *a2)
{
  float result = glePushMaterial(a1, 1u);
  result[2] = *a2;
  result[3] = a2[1];
  *((_WORD *)result + 248) |= 0x808u;
  uint64_t v5 = *(void *)(a1 + 19248);
  if (v5)
  {
    unint64_t v6 = *(unsigned __int16 *)(v5 + 2830);
    if (v6 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v6 >> 3) & 0x1FFC) + 1552) |= 1 << v6;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x800000u;
    }
  }
  uint64_t v7 = *(void *)(a1 + 19272);
  if (v7)
  {
    unint64_t v8 = *(unsigned __int16 *)(v7 + 2830);
    if (v8 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v8 >> 3) & 0x1FFC) + 1936) |= 1 << v8;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x4000000u;
    }
  }
  uint64_t v9 = *(void *)(a1 + 19280);
  if (v9)
  {
    unint64_t v10 = *(unsigned __int16 *)(v9 + 2830);
    if (v10 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v10 >> 3) & 0x1FFC) + 2064) |= 1 << v10;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x8000000u;
    }
  }
  return result;
}

void *gleLightMaterialRGBAChange_B_S(uint64_t a1, void *a2)
{
  float result = glePushMaterial(a1, 1u);
  result[4] = *a2;
  result[5] = a2[1];
  *((_WORD *)result + 248) |= 0x1010u;
  uint64_t v5 = *(void *)(a1 + 19248);
  if (v5)
  {
    unint64_t v6 = *(unsigned __int16 *)(v5 + 2832);
    if (v6 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v6 >> 3) & 0x1FFC) + 1552) |= 1 << v6;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x800000u;
    }
  }
  uint64_t v7 = *(void *)(a1 + 19272);
  if (v7)
  {
    unint64_t v8 = *(unsigned __int16 *)(v7 + 2832);
    if (v8 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v8 >> 3) & 0x1FFC) + 1936) |= 1 << v8;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x4000000u;
    }
  }
  uint64_t v9 = *(void *)(a1 + 19280);
  if (v9)
  {
    unint64_t v10 = *(unsigned __int16 *)(v9 + 2832);
    if (v10 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v10 >> 3) & 0x1FFC) + 2064) |= 1 << v10;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x8000000u;
    }
  }
  return result;
}

void *gleLightMaterialRGBAChange_B_AD(uint64_t a1, void *a2)
{
  float result = glePushMaterial(a1, 1u);
  *float result = *a2;
  result[1] = a2[1];
  result[2] = *a2;
  result[3] = a2[1];
  *((_WORD *)result + 248) |= 0xC0Cu;
  uint64_t v5 = *(void *)(a1 + 19248);
  if (v5)
  {
    unint64_t v6 = *(unsigned __int16 *)(v5 + 2828);
    if (v6 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v6 >> 3) & 0x1FFC) + 1552) |= 1 << v6;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x800000u;
    }
  }
  uint64_t v7 = *(void *)(a1 + 19272);
  if (v7)
  {
    unint64_t v8 = *(unsigned __int16 *)(v7 + 2828);
    if (v8 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v8 >> 3) & 0x1FFC) + 1936) |= 1 << v8;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x4000000u;
    }
  }
  uint64_t v9 = *(void *)(a1 + 19280);
  if (v9)
  {
    unint64_t v10 = *(unsigned __int16 *)(v9 + 2828);
    if (v10 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v10 >> 3) & 0x1FFC) + 2064) |= 1 << v10;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x8000000u;
    }
  }
  if (v5)
  {
    unint64_t v11 = *(unsigned __int16 *)(v5 + 2830);
    if (v11 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v11 >> 3) & 0x1FFC) + 1552) |= 1 << v11;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x800000u;
    }
  }
  if (v7)
  {
    unint64_t v12 = *(unsigned __int16 *)(v7 + 2830);
    if (v12 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v12 >> 3) & 0x1FFC) + 1936) |= 1 << v12;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x4000000u;
    }
  }
  if (v9)
  {
    unint64_t v13 = *(unsigned __int16 *)(v9 + 2830);
    if (v13 <= 0x3FF)
    {
      *(_DWORD *)(a1 + ((v13 >> 3) & 0x1FFC) + 2064) |= 1 << v13;
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x8000000u;
    }
  }
  return result;
}

void *gleLightMaterialRGBAChange_FB_A(uint64_t a1, void *a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = (_DWORD *)(a1 + 28652);
  char v6 = 1;
  do
  {
    char v7 = v6;
    float result = glePushMaterial(a1, v4);
    *float result = *a2;
    result[1] = a2[1];
    *((_WORD *)result + 248) |= 0x404u;
    uint64_t v9 = *(void *)(a1 + 19248);
    if (v9)
    {
      unint64_t v10 = *(unsigned __int16 *)(v9 + 12 * v4 + 2816);
      if (v10 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v10 >> 3) & 0x1FFC) + 1552) |= 1 << v10;
        _DWORD *v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x800000u;
      }
    }
    uint64_t v11 = *(void *)(a1 + 19272);
    if (v11)
    {
      unint64_t v12 = *(unsigned __int16 *)(v11 + 12 * v4 + 2816);
      if (v12 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v12 >> 3) & 0x1FFC) + 1936) |= 1 << v12;
        _DWORD *v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x4000000u;
      }
    }
    uint64_t v13 = *(void *)(a1 + 19280);
    if (v13)
    {
      unint64_t v14 = *(unsigned __int16 *)(v13 + 12 * v4 + 2816);
      if (v14 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v14 >> 3) & 0x1FFC) + 2064) |= 1 << v14;
        _DWORD *v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x8000000u;
      }
    }
    char v6 = 0;
    uint64_t v4 = 1;
  }
  while ((v7 & 1) != 0);
  return result;
}

void *gleLightMaterialRGBAChange_FB_D(uint64_t a1, void *a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = (_DWORD *)(a1 + 28652);
  char v6 = 1;
  do
  {
    char v7 = v6;
    float result = glePushMaterial(a1, v4);
    result[2] = *a2;
    result[3] = a2[1];
    *((_WORD *)result + 248) |= 0x808u;
    uint64_t v9 = *(void *)(a1 + 19248);
    if (v9)
    {
      unint64_t v10 = *(unsigned __int16 *)(v9 + 12 * v4 + 2818);
      if (v10 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v10 >> 3) & 0x1FFC) + 1552) |= 1 << v10;
        _DWORD *v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x800000u;
      }
    }
    uint64_t v11 = *(void *)(a1 + 19272);
    if (v11)
    {
      unint64_t v12 = *(unsigned __int16 *)(v11 + 12 * v4 + 2818);
      if (v12 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v12 >> 3) & 0x1FFC) + 1936) |= 1 << v12;
        _DWORD *v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x4000000u;
      }
    }
    uint64_t v13 = *(void *)(a1 + 19280);
    if (v13)
    {
      unint64_t v14 = *(unsigned __int16 *)(v13 + 12 * v4 + 2818);
      if (v14 <= 0x3FF)
      {
        *(_DWORD *)(a1 + ((v14 >> 3) & 0x1FFC) + 2064) |= 1 << v14;
        _DWORD *v5 = 0;
        *(_DWORD *)(a1 + 1532) |= 0x8000000u;
      }
    }
    char v6 = 0;
    uint64_t v4 = 1;
  }
  while ((v7 & 1) != 0);
  return result;
}

__n128 gleMultiplyAlignedMatrix(float32x4_t *a1, float32x2_t *a2, float32x4_t *a3)
{
  __n128 result = *(__n128 *)a2->f32;
  float32x4_t v4 = a1[1];
  float32x4_t v5 = a1[2];
  float32x4_t v6 = a1[3];
  float32x4_t v7 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a1, COERCE_FLOAT(*(_OWORD *)a2[2].f32)), v4, a2[2], 1), v5, *(float32x4_t *)a2[2].f32, 2), v6, *(float32x4_t *)a2[2].f32, 3);
  float32x4_t v8 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a1, COERCE_FLOAT(*(_OWORD *)a2[4].f32)), v4, a2[4], 1), v5, *(float32x4_t *)a2[4].f32, 2), v6, *(float32x4_t *)a2[4].f32, 3);
  float32x4_t v9 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a1, COERCE_FLOAT(*(_OWORD *)a2[6].f32)), v4, a2[6], 1), v5, *(float32x4_t *)a2[6].f32, 2), v6, *(float32x4_t *)a2[6].f32, 3);
  *a3 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a1, COERCE_FLOAT(*(_OWORD *)a2->f32)), v4, *a2, 1), v5, *(float32x4_t *)a2->f32, 2), v6, *(float32x4_t *)a2->f32, 3);
  a3[1] = v7;
  a3[2] = v8;
  a3[3] = v9;
  return result;
}

float32x4_t gleApplyViewScissorTransform(float32x4_t *a1)
{
  result.i64[0] = a1[781].i64[0];
  result.i32[2] = a1[18].i32[1];
  result.i32[3] = result.i32[2];
  v2.i64[0] = a1[781].i64[1];
  v2.i32[2] = a1[18].i32[0];
  v2.i32[3] = v2.i32[2];
  float32x4_t v3 = vmlaq_f32(vmulq_laneq_f32(v2, a1[589], 3), result, a1[589]);
  float32x4_t v4 = vmlaq_f32(vmulq_laneq_f32(v2, a1[590], 3), result, a1[590]);
  float32x4_t v5 = vmlaq_f32(vmulq_laneq_f32(v2, a1[591], 3), result, a1[591]);
  float32x4_t v6 = vmlaq_f32(vmulq_laneq_f32(v2, a1[592], 3), result, a1[592]);
  a1[777] = v3;
  a1[778] = v4;
  a1[779] = v5;
  a1[780] = v6;
  return result;
}

uint64_t gleInvertMatrix(uint64_t result, int a2)
{
  int v2 = 0;
  uint64_t v72 = *MEMORY[0x263EF8340];
  uint64_t v3 = result + ((uint64_t)a2 << 6);
  int32x4_t v4 = *(int32x4_t *)(v3 + 9360);
  int32x4_t v5 = *(int32x4_t *)(v3 + 9376);
  v9.i64[0] = vzip1q_s32(v4, v5).u64[0];
  v9.i32[2] = *(_OWORD *)(v3 + 9392);
  v6.i64[0] = vtrn2q_s32(v4, v5).u64[0];
  v6.i32[2] = HIDWORD(*(void *)(v3 + 9392));
  v7.i64[0] = vzip2q_s32(v4, v5).u64[0];
  v7.i32[2] = *(void *)(v3 + 9400);
  v5.i64[0] = vuzp2q_s32(vuzp2q_s32(v4, v5), v4).u64[0];
  v5.i32[2] = HIDWORD(*(_OWORD *)(v3 + 9392));
  long long v8 = *(_OWORD *)(v3 + 9408);
  v6.i32[3] = HIDWORD(*(void *)(v3 + 9408));
  v9.i32[3] = *(void *)(v3 + 9408);
  v7.i32[3] = *(void *)(v3 + 9416);
  float32x4_t v69 = v6;
  float32x4_t v70 = v7;
  v5.i32[3] = HIDWORD(v8);
  float32x4_t v71 = (float32x4_t)v5;
  long long v65 = xmmword_227DC20F0;
  long long v66 = xmmword_227DC2100;
  long long v67 = xmmword_227DC1530;
  float32x4_t v10 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.i8, 0);
  float32x4_t v11 = vabsq_f32(v10);
  for (uint64_t i = 1; i != 4; ++i)
  {
    float32x4_t v13 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v68.f32[4 * i], 0);
    float32x4_t v14 = vabsq_f32(v13);
    int8x16_t v15 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v14, v11), 0);
    _NF = v11.f32[0] < v14.f32[0];
    float32x4_t v11 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v14, (int8x16_t)v11);
    float32x4_t v10 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v13, (int8x16_t)v10);
    if (_NF) {
      int v2 = i;
    }
  }
  if (v2)
  {
    float32x4_t v17 = *(&v68 + v2);
    float32x4_t v18 = *(&v64 + v2);
    *(&v68 + v2) = v9;
    *((_OWORD *)&v64 + v2) = xmmword_227DC2110;
    float32x4_t v9 = v17;
  }
  else
  {
    float32x4_t v18 = (float32x4_t)xmmword_227DC2110;
  }
  if (v10.f32[0] == 0.0) {
    goto LABEL_21;
  }
  __asm { FMOV            V3.4S, #1.0 }
  float32x4_t v23 = vdivq_f32(_Q3, v10);
  float32x4_t v24 = vmulq_f32(v23, v9);
  float32x4_t v25 = vmulq_f32(v23, v18);
  float32x4_t v26 = vmlsq_lane_f32((float32x4_t)v65, v25, *(float32x2_t *)v69.f32, 0);
  float32x4_t v27 = vmlsq_lane_f32(v69, v24, *(float32x2_t *)v69.f32, 0);
  float32x4_t v28 = vmlsq_lane_f32((float32x4_t)v66, v25, *(float32x2_t *)v70.f32, 0);
  float32x4_t v29 = vmlsq_lane_f32((float32x4_t)v67, v25, *(float32x2_t *)v71.f32, 0);
  float32x4_t v68 = v24;
  float32x4_t v69 = v27;
  float32x4_t v64 = v25;
  long long v65 = (__int128)v26;
  float32x4_t v70 = vmlsq_lane_f32(v70, v24, *(float32x2_t *)v70.f32, 0);
  float32x4_t v71 = vmlsq_lane_f32(v71, v24, *(float32x2_t *)v71.f32, 0);
  long long v66 = (__int128)v28;
  long long v67 = (__int128)v29;
  float32x4_t v30 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1);
  float32x4_t v31 = vabsq_f32(v30);
  int v32 = 1;
  for (uint64_t j = 2; j != 4; ++j)
  {
    float32x4_t v34 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v68.f32[4 * j], 1);
    float32x4_t v35 = vabsq_f32(v34);
    int8x16_t v36 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v35, v31), 0);
    _NF = v31.f32[0] < v35.f32[0];
    float32x4_t v31 = (float32x4_t)vbslq_s8(v36, (int8x16_t)v35, (int8x16_t)v31);
    float32x4_t v30 = (float32x4_t)vbslq_s8(v36, (int8x16_t)v34, (int8x16_t)v30);
    if (_NF) {
      int v32 = j;
    }
  }
  if (v32 != 1)
  {
    float32x4_t v37 = *(&v64 + v32);
    float32x4_t v69 = *(&v68 + v32);
    long long v65 = (__int128)v37;
    *(&v68 + v32) = v27;
    *(&v64 + v32) = v26;
  }
  if (v30.f32[0] == 0.0) {
    goto LABEL_21;
  }
  float32x4_t v38 = vdivq_f32(_Q3, v30);
  float32x4_t v39 = vmulq_f32(v38, v69);
  float32x4_t v40 = vmulq_f32(v38, (float32x4_t)v65);
  float32x4_t v41 = vmlsq_lane_f32((float32x4_t)v66, v40, *(float32x2_t *)v70.f32, 1);
  int32x4_t v42 = (int32x4_t)vmlsq_lane_f32(v70, v39, *(float32x2_t *)v70.f32, 1);
  float32x4_t v43 = vmlsq_lane_f32((float32x4_t)v67, v40, *(float32x2_t *)v71.f32, 1);
  float32x4_t v44 = vmlsq_lane_f32(v71, v39, *(float32x2_t *)v71.f32, 1);
  float32x4_t v45 = (float32x4_t)vdupq_laneq_s32(v42, 2);
  float32x4_t v46 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2);
  if (COERCE_FLOAT(v46.i32[0] & 0x7FFFFFFF) <= COERCE_FLOAT(v45.i32[0] & 0x7FFFFFFF))
  {
    float32x4_t v47 = vdivq_f32(_Q3, v45);
    float32x4_t v48 = v43;
    float32x4_t v49 = v44;
    float32x4_t v43 = v41;
    float32x4_t v44 = (float32x4_t)v42;
  }
  else
  {
    float32x4_t v47 = vdivq_f32(_Q3, v46);
    float32x4_t v48 = v41;
    float32x4_t v49 = (float32x4_t)v42;
    v45.i32[0] = v47.i32[0];
  }
  if (v45.f32[0] == 0.0 || (float32x4_t v50 = vmulq_f32(v47, v44), v51 = vmlsq_laneq_f32(v49, v50, v49, 2), v51.f32[3] == 0.0))
  {
LABEL_21:
    long long v52 = (_OWORD *)(result + ((uint64_t)a2 << 6));
    v52[681] = xmmword_227DC2110;
    v52[682] = xmmword_227DC20F0;
    v52[683] = xmmword_227DC2100;
    v52[684] = xmmword_227DC1530;
    int v53 = *(_DWORD *)(result + 12520) | (1 << a2);
  }
  else
  {
    float32x4_t v54 = vmlsq_lane_f32(v64, v40, *(float32x2_t *)v68.f32, 1);
    float32x4_t v55 = vmlsq_lane_f32(v68, v39, *(float32x2_t *)v68.f32, 1);
    float32x4_t v56 = vnegq_f32(v50);
    float32x4_t v57 = vmulq_f32(v47, v43);
    float32x4_t v58 = vmlsq_laneq_f32(v40, v57, v39, 2);
    float32x4_t v59 = vmlaq_laneq_f32(v39, v56, v39, 2);
    float32x4_t v60 = vmlsq_laneq_f32(v54, v57, v55, 2);
    float32x4_t v61 = vmlaq_laneq_f32(v55, v56, v55, 2);
    float32x4_t v62 = vmulq_laneq_f32(vmlsq_f32(v48, (float32x4_t)vdupq_laneq_s32((int32x4_t)v49, 2), v57), vdivq_f32(_Q3, v51), 3);
    char v63 = (float32x4_t *)(result + ((uint64_t)a2 << 6));
    v63[681] = vmlsq_laneq_f32(v60, v62, v61, 3);
    v63[682] = vmlsq_laneq_f32(v58, v62, v59, 3);
    v63[683] = vmlsq_laneq_f32(v57, v62, v50, 3);
    v63[684] = v62;
    int v53 = *(_DWORD *)(result + 12520) & ~(1 << a2);
  }
  *(_DWORD *)(result + 12520) = v53;
  return result;
}

uint64_t gleGenerateMatrixIdentifier(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t v5 = 0;
  LODWORD(a5) = *(_DWORD *)(a1 + 292);
  float32x4_t v6 = (const float *)(a1 + 288);
  float32x4_t v7 = vld1q_dup_f32(v6);
  *(float *)&a4 = -*(float *)&a5;
  float32x4_t v8 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
  float32x4_t v9 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
  int32x4_t v10 = (int32x4_t)xmmword_227DC1FD0;
  int8x16_t v11 = 0uLL;
  v12.i64[0] = 0x200000002;
  v12.i64[1] = 0x200000002;
  v13.i64[0] = 0x100000001;
  v13.i64[1] = 0x100000001;
  v14.i64[0] = 0x1E0000001ELL;
  v14.i64[1] = 0x1E0000001ELL;
  v15.i64[0] = 0x400000004;
  v15.i64[1] = 0x400000004;
  do
  {
    float32x4_t v16 = *(float32x4_t *)(a2 + v5);
    int32x4_t v17 = vceqq_f32(v16, v7);
    int8x16_t v11 = vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)vorrq_s8((int8x16_t)vsubq_s32((int32x4_t)vandq_s8((int8x16_t)v17, v12), v17), vorrq_s8(vandq_s8((int8x16_t)vceqq_f32(v16, v8), v13), vandq_s8((int8x16_t)vceqq_f32(v16, v9), v12))), (uint32x4_t)vsubq_s32(v14, vaddq_s32(v10, v10))), v11);
    int32x4_t v10 = vaddq_s32(v10, v15);
    v5 += 16;
  }
  while (v5 != 64);
  int8x8_t v18 = vorr_s8(*(int8x8_t *)v11.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL));
  return (v18.i32[0] | v18.i32[1]);
}

void gleVectorNormalize(uint64_t a1, float *a2, float *a3)
{
  float v3 = *a2;
  float v4 = a2[1];
  float v5 = a2[2];
  float v6 = (float)((float)(v4 * v4) + (float)(v3 * v3)) + (float)(v5 * v5);
  if (v6 <= 2.7105e-20)
  {
    float v8 = -1.0;
  }
  else
  {
    float v7 = 1.0 / sqrtf(v6);
    float v3 = v3 * v7;
    float v4 = v4 * v7;
    float v8 = v5 * v7;
  }
  *a3 = v3;
  a3[1] = v4;
  a3[2] = v8;
}

void *gleCreateQueryObjectClientState(uint64_t a1, void *a2, uint64_t a3)
{
  float32x4_t result = malloc_type_calloc(1uLL, 0x18uLL, 0x2BF3136CuLL);
  if (!result) {
    abort();
  }
  *a2 = result;
  *float32x4_t result = a3;
  *(void *)(a3 + 8) = *a2;
  uint64_t v6 = *a2;
  *(_WORD *)(v6 + 16) = *(_WORD *)(a3 + 252);
  *(unsigned char *)(v6 + 18) = *(unsigned char *)(a3 + 254);
  *(void *)(v6 + 8) = 0;
  *(unsigned char *)(v6 + 19) = 0;
  *(_DWORD *)(a3 + 256) = *(unsigned char *)(a3 + 254) != 0;
  return result;
}

void gleFreeQueryObject(uint64_t a1, void *a2)
{
  float v4 = (unsigned char *)(a1 + 32496);
  float v5 = (void *)a2[4];
  if (v5)
  {
    free(v5);
    a2[4] = 0;
  }
  uint64_t v6 = (_DWORD *)(a1 + 25992);
  if (*v4)
  {
    unint64_t v7 = 0;
    float v8 = a2 + 17;
    float32x4_t v9 = (void *)(a1 + 32512);
    do
    {
      (*(void (**)(void, void))(v9[206] + 1840))(*v9, *(v8 - 12));
      *(v8 - 12) = 0;
      (*(void (**)(void, void))(v9[206] + 1808))(v9[1], *v8);
      *v8++ = 0;
      ++v7;
      v9 += 209;
    }
    while (v7 < *v4);
  }
  int32x4_t v10 = (void *)a2[1];
  if (v10) {
    free(v10);
  }
  free(a2);
  if ((*v6)-- == 1)
  {
    *(_DWORD *)(a1 + 28652) = 0;
    *(_DWORD *)(a1 + 1548) |= 0x40000u;
  }
}

uint64_t gleCreateQueryObjectGLDState(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  float v3 = (unsigned __int8 *)(result + 32496);
  float v4 = (int *)(result + 25992);
  if (*(unsigned char *)(result + 32496))
  {
    unint64_t v5 = 0;
    uint64_t v6 = a2 + 136;
    unint64_t v7 = (void *)(result + 32512);
    do
    {
      (*(void (**)(void, uint64_t))(v7[206] + 1816))(*v7, v6 - 96);
      float32x4_t result = (*(uint64_t (**)(void, uint64_t))(v7[206] + 1728))(v7[1], v6);
      ++v5;
      v6 += 8;
      v7 += 209;
    }
    while (v5 < *v3);
  }
  int v8 = *v4;
  if (!*v4)
  {
    v4[665] = 0;
    *(_DWORD *)(v2 + 1548) |= 0x40000u;
  }
  *float v4 = v8 + 1;
  return result;
}

char *gleCreateQueryObject(uint64_t a1, int a2)
{
  float v4 = (char *)malloc_type_malloc(0x108uLL, 0x577B5147uLL);
  if (!v4) {
    abort();
  }
  unint64_t v5 = v4;
  *((_DWORD *)v4 + 4) = a2;
  *(void *)(v4 + 20) = 0xC00000001;
  *((void *)v4 + 4) = 0;
  *(_OWORD *)float v4 = 0u;
  *((_DWORD *)v4 + 63) = -16777216;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  if (*(void *)(a1 + 27648))
  {
    uint64_t v7 = 0;
    gleCreateQueryObjectClientState((uint64_t)v4, &v7, (uint64_t)v4);
  }
  else
  {
    gleCreateQueryObjectGLDState(a1, (uint64_t)v4);
  }
  return v5;
}

uint64_t gleSynchronizePluginQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  unsigned int v3 = *(unsigned __int16 *)(a2 + 212);
  if (v3 > 0x8C86)
  {
    if (v3 - 35975 >= 2) {
      goto LABEL_14;
    }
    uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t *))(*(void *)(a1 + 29448) + 776))(*(void *)(a1 + 29016), *(void *)(a2 + 8 * *(unsigned __int8 *)(a1 + 32499)), 34918, &v8);
  }
  else
  {
    if (v3 != 35007 && v3 != 35092 && v3 != 35887) {
LABEL_14:
    }
      abort();
    uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t *))(*(void *)(a1 + 29496) + 776))(*(void *)(a1 + 29464), *(void *)(a2 + 8 * *(unsigned __int8 *)(a1 + 32500)), 34918, &v8);
  }
  uint64_t v7 = *(void *)(a2 + 200) + v8;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = v7;
  return result;
}

uint64_t gleSynchronizePluginQueries(uint64_t result, uint64_t a2)
{
  unsigned int v3 = (void *)result;
  uint64_t v4 = *(void *)(result + 25936);
  if (v4 && *(void *)(v4 + 232) != a2) {
    uint64_t result = gleSynchronizePluginQuery(result, v4 + 40);
  }
  uint64_t v5 = v3[3243];
  if (v5 && *(void *)(v5 + 232) != a2) {
    uint64_t result = gleSynchronizePluginQuery((uint64_t)v3, v5 + 40);
  }
  uint64_t v6 = v3[3244];
  if (v6 && *(void *)(v6 + 232) != a2) {
    uint64_t result = gleSynchronizePluginQuery((uint64_t)v3, v6 + 40);
  }
  uint64_t v7 = v3[3245];
  if (v7 && *(void *)(v7 + 232)) {
    uint64_t result = gleSynchronizePluginQuery((uint64_t)v3, v7 + 40);
  }
  uint64_t v8 = v3[3246];
  if (v8 && *(void *)(v8 + 232))
  {
    return gleSynchronizePluginQuery((uint64_t)v3, v8 + 40);
  }
  return result;
}

uint64_t gleRestartPluginQuery(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v8 = 0;
  unsigned int v4 = *(unsigned __int16 *)(a2 + 212);
  if (v4 > 0x8C86)
  {
    if (v4 - 35975 >= 2 || !*(unsigned char *)(result + 32481) || !*(unsigned char *)(*(void *)(result + 29032) + 107)) {
      return result;
    }
    uint64_t result = (*(uint64_t (**)(void, void, void, uint64_t *))(*(void *)(result + 29448) + 768))(*(void *)(result + 29016), *(void *)(a2 + 8 * *(unsigned __int8 *)(result + 32499)), 0, &v8);
    uint64_t v7 = 29024;
LABEL_15:
    *(void *)(a2 + 192) = *(void *)(v3 + v7);
    *(unsigned char *)(a2 + 215) = -1;
    return result;
  }
  if (v4 == 35007 || v4 == 35092 || v4 == 35887)
  {
    uint64_t result = (*(uint64_t (**)(void, void, void, uint64_t *))(*(void *)(result + 29496) + 768))(*(void *)(result + 29464), *(void *)(a2 + 8 * *(unsigned __int8 *)(result + 32500)), 0, &v8);
    uint64_t v7 = 29472;
    goto LABEL_15;
  }
  return result;
}

uint64_t gleRestartPluginQueries(uint64_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v2 = *(void *)(result + 25936);
  if (v2 && !*(void *)(v2 + 232)) {
    uint64_t result = gleRestartPluginQuery(result, v2 + 40);
  }
  uint64_t v3 = v1[3243];
  if (v3 && !*(void *)(v3 + 232)) {
    uint64_t result = gleRestartPluginQuery((uint64_t)v1, v3 + 40);
  }
  uint64_t v4 = v1[3244];
  if (v4 && !*(void *)(v4 + 232)) {
    uint64_t result = gleRestartPluginQuery((uint64_t)v1, v4 + 40);
  }
  uint64_t v5 = v1[3245];
  if (v5) {
    uint64_t result = gleRestartPluginQuery((uint64_t)v1, v5 + 40);
  }
  uint64_t v6 = v1[3246];
  if (v6)
  {
    return gleRestartPluginQuery((uint64_t)v1, v6 + 40);
  }
  return result;
}

uint64_t gleQueryTargetExtractor(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 252);
}

void gleUnbindAndFreePipelineProgramObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (unsigned __int8 *)(a1 + 32496);
  if (*(unsigned char *)(a1 + 32496))
  {
    unint64_t v5 = 0;
    uint64_t v6 = (void *)(a1 + 32512);
    do
    {
      (*(void (**)(void, void))(v6[206] + 1648))(*v6, *(void *)(a2 + 40 + 8 * v5++));
      v6 += 209;
    }
    while (v5 < *v4);
  }
  uint64_t v7 = *(void *)(a1 + 19296);

  gleFreePipelineProgramObject(v7, a2);
}

void gleReconfigurePipelineProgramState(uint64_t a1)
{
  uint64_t v2 = (unsigned char *)(a1 + 24756);
  uint64_t v3 = *(void *)(a1 + 24520);
  uint64_t v4 = *(void *)(a1 + 24480);
  if (*(unsigned char *)(*(void *)(a1 + 29032) + 101) || *(unsigned char *)(a1 + 32505))
  {
    if (v3)
    {
      if (v4) {
        return;
      }
    }
    else
    {
      *(void *)(a1 + 24520) = cvmCreateHashMachine();
      if (v4) {
        return;
      }
    }
    *(void *)(a1 + 24480) = gleCreateStateProgram(a1, 0, 0, 0, 0, 0, 0, -1);
    if ((v2[108] & 1) == 0 && !*v2)
    {
      gleVPEnable(a1);
    }
  }
  else if (v4)
  {
    if (*(void *)(a1 + 24560))
    {
      cvmHashObjectRelease();
      *(void *)(a1 + 24560) = 0;
    }
    else
    {
      gleDestroyStateProgram(a1, *(void **)(a1 + 24480));
    }
    *(void *)(a1 + 24480) = 0;
    if ((v2[108] & 1) == 0 && !*v2)
    {
      gleVPDisable(a1);
    }
  }
}

void gleDestroyStateProgram(uint64_t a1, void *a2)
{
  if (a2[54]) {
    MEMORY[0x22A686880]();
  }
  uint64_t v4 = (void *)a2[55];
  if (v4)
  {
    free(v4);
    a2[55] = 0;
  }
  unint64_t v5 = (void *)a2[63];
  if (v5)
  {
    free(v5);
    a2[63] = 0;
  }
  uint64_t v6 = (void *)a2[13];
  if (v6)
  {
    free(v6);
    a2[13] = 0;
  }
  uint64_t v7 = (void *)a2[60];
  if (v7)
  {
    free(v7);
    a2[60] = 0;
  }
  uint64_t v8 = (void *)a2[61];
  if (v8)
  {
    free(v8);
    a2[61] = 0;
  }
  float32x4_t v9 = (void *)a2[62];
  if (v9)
  {
    free(v9);
    a2[62] = 0;
  }
  if (!*((unsigned char *)a2 + 426))
  {
    uint64_t v13 = a2[546];
    if (v13)
    {
      __int16 v14 = *(_WORD *)(v13 + 2) - 1;
      *(_WORD *)(v13 + 2) = v14;
      if (!v14) {
        MEMORY[0x22A686880]();
      }
    }
  }
  int32x4_t v10 = (unsigned __int8 *)(a1 + 32496);
  if (*(unsigned char *)(a1 + 32496))
  {
    unint64_t v11 = 0;
    int8x16_t v12 = (void *)(a1 + 32512);
    do
    {
      (*(void (**)(void, void))(v12[206] + 1648))(*v12, a2[v11]);
      (*(void (**)(void, void))(v12[206] + 1656))(v12[1], a2[v11]);
      a2[v11++] = 0;
      v12 += 209;
    }
    while (v11 < *v10);
  }

  free(a2);
}

uint64_t gleCreateStateProgram(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  int __pattern4 = 67109888;
  if (a2) {
    size_t v16 = 4384;
  }
  else {
    size_t v16 = 4376;
  }
  int32x4_t v17 = malloc_type_calloc(1uLL, v16, 0x2BF3136CuLL);
  if (!v17) {
    abort();
  }
  uint64_t v18 = (uint64_t)v17;
  v17[200] = -30603;
  *((void *)v17 + 14) = a5;
  *((void *)v17 + 15) = a6;
  if (a2) {
    __int16 v19 = -30716;
  }
  else {
    __int16 v19 = -31200;
  }
  *((void *)v17 + 13) = 0;
  memset_pattern4(v17 + 284, &__pattern4, 0xED8uLL);
  *(_WORD *)(v18 + 424) = v19;
  *(unsigned char *)(v18 + 426) = a2;
  *(unsigned char *)(v18 + 427) |= 1u;
  *(_DWORD *)(v18 + 476) = a7;
  *(void *)(v18 + 448) = a8;
  *(void *)(v18 + 456) = -1;
  *(void *)(v18 + 432) = a3;
  *(void *)(v18 + 440) = a4;
  *(_OWORD *)(v18 + 480) = 0u;
  *(_OWORD *)(v18 + 496) = 0u;
  *(_DWORD *)(v18 + 512) = 0;
  memset_pattern16((void *)(v18 + 520), &unk_227DC2140, 0x30uLL);
  gleCreatePluginPipelineProgram(a1, v18);
  return v18;
}

unint64_t gleUpdateContextStateData(unint64_t result, unsigned int a2)
{
  unint64_t v2 = result;
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(result + 24768);
  if (!v3 && ((v19 = *(void *)(result + 24776)) == 0 || (uint64_t v3 = *(void *)(v19 + 8 * (int)a2 + 40)) == 0)
    || ((*(_DWORD *)(result + 24864) >> a2) & 1) == 0)
  {
    if ((a2 & 0xFFFFFFFB) != 0) {
      return result;
    }
    uint64_t v20 = a2;
    if (*(unsigned char *)(result + a2 + 24756))
    {
      uint64_t v21 = *(void *)(result + 8 * a2 + 24400) + 40;
    }
    else
    {
      uint64_t v21 = *(void *)(result + 8 * a2 + 24480);
      if (!v21) {
        goto LABEL_56;
      }
    }
    unint64_t v22 = *(_DWORD **)(v21 + 104);
    if (v22)
    {
      float32x4_t v23 = (_DWORD *)(result + 16 * a2 + 17904);
      int v24 = *v22;
      LODWORD(v25) = *v22;
      if (*v22 > *v23)
      {
        unint64_t v26 = result + 16 * a2;
        free(*(void **)(v26 + 17912));
        uint64_t result = (unint64_t)malloc_type_malloc(16 * v24, 0x577B5147uLL);
        if (!result) {
          abort();
        }
        *(void *)(v26 + 17912) = result;
        _DWORD *v23 = v24;
        LODWORD(v25) = *v22;
      }
      *(_DWORD *)(v2 + 2272 + 16 * v20 + 15636) = v24;
      if (!v25) {
        return result;
      }
      uint64_t v27 = (uint64_t)&v22[2 * v22[2] + 4];
      float32x4_t v28 = *(_DWORD **)(v2 + 16 * v20 + 17912);
      uint64_t v25 = v25;
      float32x4_t v29 = (unint64_t *)(v22 + 4);
      while (1)
      {
        unint64_t v31 = *v29++;
        unint64_t v30 = v31;
        unsigned int v32 = (v31 >> 8) & 0x1F;
        if (v32 > 5)
        {
          if (v32 == 6)
          {
            float32x4_t v41 = (int *)(v27 + 16 * WORD2(v30));
LABEL_50:
            int v42 = *v41;
            goto LABEL_52;
          }
          if (v32 == 14)
          {
            unsigned int v36 = WORD1(v30);
            uint64_t v37 = HIDWORD(v30) & 7;
            goto LABEL_46;
          }
        }
        else
        {
          if (v32 == 1)
          {
            uint64_t v40 = HIDWORD(v30) & 0x3FFF;
            uint64_t v43 = 0;
            uint64_t v44 = 0;
            if (v40 < *(_DWORD *)(v21 + 428))
            {
              float32x4_t v41 = (int *)(*(void *)(v21 + 464) + 16 * v40);
              goto LABEL_50;
            }
            float32x4_t v41 = (int *)&v43;
            int v42 = 0;
LABEL_52:
            _DWORD *v28 = v42;
            v28[1] = v41[1];
            v28[2] = v41[2];
            int v39 = v41[3];
LABEL_53:
            v28[3] = v39;
            v28 += 4;
            goto LABEL_54;
          }
          if (v32 == 5)
          {
            unint64_t v33 = HIDWORD(v30);
            unsigned int v34 = 16 * (v33 & 0x3FFF) + 4112;
            unsigned int v35 = 16 * (v33 & 0x3FFF) + 16;
            if (*(unsigned char *)(v21 + 426)) {
              unsigned int v35 = 0;
            }
            if (*(unsigned char *)(v21 + 426) == 4) {
              unsigned int v35 = v34;
            }
            unsigned int v36 = v35 >> 2;
            uint64_t v37 = 1;
LABEL_46:
            float32x4_t v38 = (_DWORD *)(v2 + 2272 + 4 * v36);
            _DWORD *v28 = *v38;
            v28[1] = v38[v37];
            v28[2] = v38[2 * v37];
            int v39 = v38[3 * v37];
            goto LABEL_53;
          }
        }
LABEL_54:
        if (!--v25) {
          return result;
        }
      }
    }
LABEL_56:
    *(_DWORD *)(result + 16 * a2 + 17908) = 0;
    return result;
  }
  uint64_t v4 = *(unsigned int **)(v3 + 4008);
  if (v4)
  {
    uint64_t v5 = *v4;
    if (v5)
    {
      uint64_t v6 = (unint64_t *)(v4 + 4);
      uint64_t v7 = *(void *)(v3 + 3752);
      while (1)
      {
        uint64_t v8 = (_DWORD *)(v7 + 16 * *((unsigned int *)v6 - 2));
        uint64_t result = *v6;
        unsigned int v9 = (*v6 >> 8) & 0x1F;
        if (v9 == 1) {
          break;
        }
        if (v9 == 5)
        {
          unint64_t v14 = HIDWORD(result);
          unsigned int v15 = 16 * (v14 & 0x3FFF) + 4112;
          unsigned int v16 = 16 * (v14 & 0x3FFF) + 16;
          if (MEMORY[2]) {
            unsigned int v16 = 0;
          }
          if (MEMORY[2] == 4) {
            unsigned int v16 = v15;
          }
          unsigned int v10 = v16 >> 2;
          uint64_t v11 = 1;
LABEL_17:
          int32x4_t v17 = (_DWORD *)(v2 + 2272 + 4 * v10);
          _DWORD *v8 = *v17;
          v8[1] = v17[v11];
          v8[2] = v17[2 * v11];
          uint64_t result = 12 * v11;
          int v18 = *(_DWORD *)((char *)v17 + result);
LABEL_20:
          v8[3] = v18;
          goto LABEL_21;
        }
        if (v9 == 14)
        {
          unsigned int v10 = WORD1(result);
          uint64_t v11 = HIDWORD(result) & 7;
          goto LABEL_17;
        }
LABEL_21:
        v6 += 2;
        if (!--v5) {
          return result;
        }
      }
      uint64_t v12 = HIDWORD(result) & 0x3FFF;
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      if (v12 >= MEMORY[4])
      {
        uint64_t result = (unint64_t)&v43;
        int v13 = 0;
      }
      else
      {
        uint64_t result = MEMORY[0x28] + 16 * v12;
        int v13 = *(_DWORD *)result;
      }
      _DWORD *v8 = v13;
      v8[1] = *(_DWORD *)(result + 4);
      v8[2] = *(_DWORD *)(result + 8);
      int v18 = *(_DWORD *)(result + 12);
      goto LABEL_20;
    }
  }
  return result;
}

unint64_t gleUpdateContextStateBuffers(unint64_t result)
{
  if ((*(_WORD *)(result + 1534) & 0xFFC) != 0)
  {
    unint64_t v1 = result;
    if (*(void *)(result + 24768))
    {
      uint64_t result = gleUpdateContextStateData(result, 0);
      unsigned int v2 = 1;
    }
    else
    {
      unsigned int v2 = 0;
    }
    if ((*(unsigned char *)(*(void *)(v1 + 29032) + 25) & 0x7F) != 0)
    {
      do
      {
        int v3 = *(_DWORD *)(v1 + 1532) >> v2;
        if ((v3 & 0x40000) != 0 || (v3 & 0x800000) != 0) {
          uint64_t result = gleUpdateContextStateData(v1, v2);
        }
        ++v2;
      }
      while (v2 != 5);
    }
  }
  return result;
}

uint64_t glePrepareProgramForEmulation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int **)(a2 + 432);
  size_t v5 = 8 * v4[6];
  uint64_t v6 = (_WORD *)PPStreamTokenAlloc();
  memcpy(v6, v4, v5);
  if (PPStreamTokenValidateOptions() && !*(_WORD *)(a1 + 29832)) {
    *(_WORD *)(a1 + 29832) = 1282;
  }
  uint64_t result = PPStreamTokenConvertOutputBindings();
  v6[1] = 1;
  *(void *)(a2 + 4368) = v6;
  return result;
}

uint64_t glePipelineProgramDefaultExtractor(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 24440);
  if (v3 && *(void *)(v3 + 168))
  {
    if (a2) {
      *a2 = 0x862000000000;
    }
    uint64_t result = 1;
  }
  else
  {
    uint64_t result = 0;
  }
  uint64_t v5 = *(void *)(a1 + 24472);
  if (v5 && *(void *)(v5 + 168))
  {
    if (a2) {
      *(void *)((char *)a2 + 4 * (2 * result)) = 0x880400000000;
    }
    return (result + 1);
  }
  return result;
}

uint64_t glePipelineProgramTargetExtractor(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 466) == 4) {
    unsigned int v1 = 34820;
  }
  else {
    unsigned int v1 = 0;
  }
  if (*(unsigned char *)(a1 + 466)) {
    return v1;
  }
  else {
    return 34336;
  }
}

uint64_t glePPSetParamRemap(unsigned int a1, uint64_t a2, int a3, int a4, int16x4_t **a5, uint64_t a6, uint64_t a7, int *a8)
{
  if (a3 < 1)
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    unint64_t v14 = *a5;
    uint64_t v15 = a3;
    do
    {
      unint64_t v16 = *(void *)(a2 + 8 * v12);
      unsigned int v17 = (v16 >> 8) & 0x1F;
      if (!v14)
      {
        if (v17 < 0xE && ((0x3EDDu >> v17) & 1) != 0)
        {
          unint64_t v14 = 0;
        }
        else
        {
          int v18 = (int16x4_t *)malloc_type_malloc(0xED8uLL, 0x577B5147uLL);
          if (!v18) {
            goto LABEL_85;
          }
          *a5 = v18;
          gleInitPIndexTable(v18, a1);
          unint64_t v14 = *a5;
        }
      }
      switch(v17)
      {
        case 1u:
          v14->i16[HIDWORD(v16) & 0x3FFF] = v12;
          uint64_t v19 = a6;
          goto LABEL_47;
        case 5u:
          v14[256].i16[HIDWORD(v16) & 0x3FFF] = v12;
          goto LABEL_45;
        case 0xFu:
          uint64_t v20 = BYTE4(v16);
          switch((v16 >> 44) & 7)
          {
            case 0uLL:
              uint64_t v20 = 1;
              break;
            case 1uLL:
              uint64_t v20 = 3;
              break;
            case 2uLL:
              uint64_t v20 = 2;
              break;
            case 3uLL:
              uint64_t v20 = BYTE4(v16) + 4;
              break;
            case 4uLL:
              uint64_t v20 = BYTE4(v16) + 16;
              break;
            case 5uLL:
              uint64_t v20 = BYTE4(v16) + 8;
              break;
            case 6uLL:
              uint64_t v20 = BYTE4(v16) + 5;
              break;
            default:
              break;
          }
          switch((v16 >> 40) & 3)
          {
            case 1uLL:
              v14[v20 + 403].i16[(v16 >> 42) & 3] = v12;
              goto LABEL_45;
            case 2uLL:
              v14[v20 + 379].i16[(v16 >> 42) & 3] = v12;
              uint64_t v13 = 1;
              *a8 |= 1 << v20;
              goto LABEL_46;
            case 3uLL:
              v14[v20 + 427].i16[(v16 >> 42) & 3] = v12;
              uint64_t v13 = 1;
              *a8 |= 1 << v20;
              uint64_t v19 = a7;
              break;
            default:
              v14[v20 + 355].i16[(v16 >> 42) & 3] = v12;
              goto LABEL_45;
          }
          goto LABEL_47;
        case 0x10u:
          switch((v16 >> 40) & 0xF)
          {
            case 0uLL:
              v14[320].i16[10 * BYTE4(v16)] = v12;
              break;
            case 1uLL:
              v14[320].i16[10 * BYTE4(v16) + 1] = v12;
              break;
            case 2uLL:
              v14[320].i16[10 * BYTE4(v16) + 2] = v12;
              break;
            case 3uLL:
              v14[320].i16[10 * BYTE4(v16) + 3] = v12;
              break;
            case 4uLL:
              v14[321].i16[10 * BYTE4(v16)] = v12;
              break;
            case 5uLL:
              v14[321].i16[10 * BYTE4(v16) + 1] = v12;
              break;
            case 6uLL:
              v14[321].i16[10 * BYTE4(v16) + 2] = v12;
              break;
            case 7uLL:
              v14[321].i16[10 * BYTE4(v16) + 3] = v12;
              break;
            case 8uLL:
              v14[322].i16[10 * BYTE4(v16)] = v12;
              break;
            case 9uLL:
              v14[322].i16[10 * BYTE4(v16) + 1] = v12;
              break;
            default:
              goto LABEL_45;
          }
          goto LABEL_45;
        case 0x11u:
          uint64_t v21 = (v16 >> 41) & 3;
          switch(v21)
          {
            case 2:
              v14[340].i16[6 * BYTE4(v16) + 2 + 3 * ((v16 >> 40) & 1)] = v12;
              break;
            case 1:
              v14[340].i16[6 * BYTE4(v16) + 1 + 3 * ((v16 >> 40) & 1)] = v12;
              break;
            case 0:
              v14[340].i16[6 * BYTE4(v16) + 3 * ((v16 >> 40) & 1)] = v12;
              break;
          }
          int v22 = *a8 | 0x3000000;
          goto LABEL_44;
        case 0x12u:
          switch((v16 >> 33) & 7)
          {
            case 0uLL:
              v14[352].i16[6 * (BYTE4(v16) & 1)] = v12;
              break;
            case 1uLL:
              v14[352].i16[6 * (BYTE4(v16) & 1) + 1] = v12;
              break;
            case 2uLL:
              v14[352].i16[6 * (BYTE4(v16) & 1) + 2] = v12;
              break;
            case 3uLL:
              v14[352].i16[6 * (BYTE4(v16) & 1) + 3] = v12;
              break;
            case 4uLL:
              v14[353].i16[6 * (BYTE4(v16) & 1)] = v12;
              break;
            case 5uLL:
              v14[353].i16[6 * (BYTE4(v16) & 1) + 1] = v12;
              *a8 |= 0x1000000u;
              break;
            default:
              break;
          }
          int v22 = *a8 | 0x2000000;
          goto LABEL_44;
        case 0x13u:
          v14[473].i16[1] = v12;
          goto LABEL_45;
        case 0x14u:
          v14[(HIDWORD(v16) & 0x7F) + 451].i16[(v16 >> 39) & 7] = v12;
          goto LABEL_45;
        case 0x15u:
          v14[(HIDWORD(v16) & 0x7F) + 459].i16[(v16 >> 39) & 7] = v12;
          goto LABEL_45;
        case 0x16u:
          v14[467].i16[HIDWORD(v16) & 0x7F] = v12;
          goto LABEL_45;
        case 0x17u:
          v14[469].i16[HIDWORD(v16) & 0x7F] = v12;
          goto LABEL_45;
        case 0x18u:
          v14[471].i16[BYTE4(v16)] = v12;
          goto LABEL_45;
        case 0x19u:
          v14[472].i16[2] = v12;
          goto LABEL_45;
        case 0x1Au:
          v14[472].i16[3] = v12;
          goto LABEL_45;
        case 0x1Bu:
          v14[473].i16[0] = v12;
          goto LABEL_45;
        case 0x1Cu:
          v14[473].i16[2] = v12;
          goto LABEL_45;
        case 0x1Du:
          v14[473].i16[3] = v12;
          goto LABEL_45;
        case 0x1Eu:
          v14[474].i16[0] = v12;
          goto LABEL_45;
        case 0x1Fu:
          v14[474].i16[1] = v12;
          int v22 = *a8 | 0x10;
LABEL_44:
          *a8 = v22;
LABEL_45:
          uint64_t v13 = 1;
LABEL_46:
          uint64_t v19 = a7;
LABEL_47:
          *(_DWORD *)(v19 + 4 * (v12 >> 5)) |= 1 << v12;
          break;
        default:
          break;
      }
      ++v12;
    }
    while (v15 != v12);
  }
  if (a4)
  {
    float32x4_t v23 = *a5;
    if (!*a5)
    {
      int v24 = (int16x4_t *)malloc_type_malloc(0xED8uLL, 0x577B5147uLL);
      if (!v24) {
LABEL_85:
      }
        abort();
      *a5 = v24;
      gleInitPIndexTable(v24, a1);
      float32x4_t v23 = *a5;
    }
    int16x4_t v25 = v23[356];
    int16x4_t v26 = vceq_s16(v25, (int16x4_t)0x400040004000400);
    if (v26.i8[0]) {
      v23[356].i16[0] = 1023;
    }
    if (v26.i8[2]) {
      v23[356].i16[1] = 1023;
    }
    int16x4_t v27 = vceq_s16(v25, (int16x4_t)0x400040004000400);
    if (v27.i8[4]) {
      v23[356].i16[2] = 1023;
    }
    if (v27.i8[6]) {
      v23[356].i16[3] = 1023;
    }
    return 1;
  }
  return v13;
}

void gleInitPIndexTable(void *a1, unsigned int a2)
{
  int __pattern4 = ((a2 < 5) << 10) | ((a2 < 5) << 26);
  memset_pattern4(a1, &__pattern4, 0xED8uLL);
}

uint64_t gleSRGBToFormat(uint64_t result)
{
  if ((int)result > 37492)
  {
    if ((int)result <= 37839)
    {
      if (result == 37497) {
        int v1 = 37496;
      }
      else {
        int v1 = result;
      }
      if (result == 37495) {
        unsigned int v2 = 37494;
      }
      else {
        unsigned int v2 = v1;
      }
      if (result == 37493) {
        return 37492;
      }
      else {
        return v2;
      }
    }
    else
    {
      switch((int)result)
      {
        case 37840:
          uint64_t result = 37808;
          break;
        case 37841:
          uint64_t result = 37809;
          break;
        case 37842:
          uint64_t result = 37810;
          break;
        case 37843:
          uint64_t result = 37811;
          break;
        case 37844:
          uint64_t result = 37812;
          break;
        case 37845:
          uint64_t result = 37813;
          break;
        case 37846:
          uint64_t result = 37814;
          break;
        case 37847:
          uint64_t result = 37815;
          break;
        case 37848:
          uint64_t result = 37816;
          break;
        case 37849:
          uint64_t result = 37817;
          break;
        case 37850:
          uint64_t result = 37818;
          break;
        case 37851:
          uint64_t result = 37819;
          break;
        case 37852:
          uint64_t result = 37820;
          break;
        case 37853:
          uint64_t result = 37821;
          break;
        case 37878:
          uint64_t result = 37875;
          break;
        case 37879:
          uint64_t result = 37876;
          break;
        case 37880:
          uint64_t result = 37877;
          break;
        default:
          return result;
      }
    }
  }
  else
  {
    switch((int)result)
    {
      case 35904:
        uint64_t result = 6407;
        break;
      case 35905:
        uint64_t result = 32849;
        break;
      case 35906:
        uint64_t result = 6408;
        break;
      case 35907:
        uint64_t result = 32856;
        break;
      case 35908:
        uint64_t result = 6410;
        break;
      case 35909:
        uint64_t result = 32837;
        break;
      case 35910:
        uint64_t result = 6409;
        break;
      case 35911:
        uint64_t result = 32832;
        break;
      case 35912:
        uint64_t result = 34029;
        break;
      case 35913:
        uint64_t result = 34030;
        break;
      case 35914:
        uint64_t result = 34026;
        break;
      case 35915:
      case 35916:
        uint64_t result = 33776;
        break;
      case 35917:
        uint64_t result = 33777;
        break;
      case 35918:
        uint64_t result = 33778;
        break;
      case 35919:
        uint64_t result = 33779;
        break;
      default:
        switch((int)result)
        {
          case 35412:
            uint64_t result = 35841;
            break;
          case 35413:
            uint64_t result = 35840;
            break;
          case 35414:
            uint64_t result = 35843;
            break;
          case 35415:
            uint64_t result = 35842;
            break;
          case 35422:
            uint64_t result = 35420;
            break;
          case 35423:
            uint64_t result = 35421;
            break;
          case 35437:
            uint64_t result = 35429;
            break;
          case 35438:
            uint64_t result = 35430;
            break;
          case 35439:
            uint64_t result = 35431;
            break;
          case 35440:
            uint64_t result = 35432;
            break;
          case 35441:
            uint64_t result = 35433;
            break;
          case 35442:
            uint64_t result = 35434;
            break;
          case 35443:
            uint64_t result = 35435;
            break;
          case 35444:
            uint64_t result = 35436;
            break;
          case 35447:
            uint64_t result = 35446;
            break;
          default:
            return result;
        }
        break;
    }
  }
  return result;
}

uint64_t gleComponents(int a1)
{
  uint64_t result = 0;
  if (a1 > 36284)
  {
    switch(a1)
    {
      case 37808:
      case 37809:
      case 37810:
      case 37811:
      case 37812:
      case 37813:
      case 37814:
      case 37815:
      case 37816:
      case 37817:
      case 37818:
      case 37819:
      case 37820:
      case 37821:
      case 37840:
      case 37841:
      case 37842:
      case 37843:
      case 37844:
      case 37845:
      case 37846:
      case 37847:
      case 37848:
      case 37849:
      case 37850:
      case 37851:
      case 37852:
      case 37853:
      case 37874:
      case 37881:
      case 37886:
      case 37887:
      case 37888:
      case 37889:
      case 37890:
      case 37891:
      case 37892:
      case 37893:
      case 37894:
      case 37895:
      case 37896:
      case 37897:
      case 37898:
      case 37899:
      case 37900:
      case 37901:
      case 37903:
      case 37904:
        return 4;
      case 37822:
      case 37823:
      case 37824:
      case 37825:
      case 37826:
      case 37827:
      case 37828:
      case 37829:
      case 37830:
      case 37831:
      case 37832:
      case 37833:
      case 37834:
      case 37835:
      case 37836:
      case 37837:
      case 37838:
      case 37839:
      case 37854:
      case 37855:
      case 37856:
      case 37857:
      case 37858:
      case 37859:
      case 37860:
      case 37861:
      case 37862:
      case 37863:
      case 37864:
      case 37865:
      case 37866:
      case 37867:
      case 37868:
      case 37869:
      case 37870:
      case 37871:
      case 37872:
      case 37873:
      case 37882:
        return result;
      case 37875:
      case 37876:
      case 37877:
      case 37878:
      case 37879:
      case 37880:
      case 37883:
      case 37884:
      case 37885:
      case 37902:
        return 3;
      default:
        switch(a1)
        {
          case 37488:
          case 37489:
LABEL_33:
            uint64_t result = 1;
            break;
          case 37490:
          case 37491:
            return 2;
          case 37492:
            return 3;
          case 37493:
          case 37495:
            return result;
          case 37494:
          case 37496:
            return 4;
          default:
            if ((a1 - 36285) < 2) {
              return 2;
            }
            break;
        }
        break;
    }
    return result;
  }
  if (a1 <= 35419)
  {
    if (a1 <= 32991)
    {
      switch(a1)
      {
        case 6400:
        case 6401:
        case 6402:
        case 6403:
        case 6404:
        case 6405:
        case 6406:
        case 6409:
          goto LABEL_33;
        case 6407:
          return 3;
        case 6408:
          return 4;
        case 6410:
          return 2;
        default:
          if (a1 == 0x8000) {
            return 4;
          }
          if (a1 == 32841) {
            goto LABEL_33;
          }
          return result;
      }
    }
    if (a1 <= 33776)
    {
      if (a1 <= 33318)
      {
        if (a1 == 32992) {
          return 3;
        }
        if (a1 == 32993) {
          return 4;
        }
        return result;
      }
      if ((a1 - 33319) < 2) {
        return 2;
      }
      int v4 = 33776;
    }
    else
    {
      if (a1 <= 34040)
      {
        if ((a1 - 33777) < 3) {
          return 4;
        }
        return result;
      }
      if (a1 <= 34870)
      {
        if (a1 != 34041)
        {
          int v4 = 34233;
          goto LABEL_39;
        }
        return 2;
      }
      if (a1 == 34871) {
        return 2;
      }
      int v4 = 35359;
    }
LABEL_39:
    if (a1 != v4) {
      return result;
    }
    return 3;
  }
  if (a1 <= 35903)
  {
    if ((a1 - 35420) <= 0x1B)
    {
      int v3 = 1 << (a1 - 92);
      if ((v3 & 0x1FFFE00) != 0) {
        return 3;
      }
      if ((v3 & 0xC00000F) != 0) {
        return 4;
      }
    }
    if ((a1 - 35840) >= 2)
    {
      if ((a1 - 35842) >= 2) {
        return result;
      }
      return 4;
    }
    return 3;
  }
  switch(a1)
  {
    case 36244:
    case 36245:
    case 36246:
    case 36247:
    case 36252:
      goto LABEL_33;
    case 36248:
    case 36250:
      return 3;
    case 36249:
    case 36251:
      return 4;
    case 36253:
      return 2;
    default:
      switch(a1)
      {
        case 35904:
          return 3;
        case 35905:
        case 35907:
        case 35909:
          return result;
        case 35906:
          return 4;
        case 35908:
          return 2;
        case 35910:
          goto LABEL_33;
        default:
          if ((a1 - 36283) < 2) {
            goto LABEL_33;
          }
          break;
      }
      break;
  }
  return result;
}

uint64_t glePixelBytes(int a1, int a2)
{
  uint64_t result = 0;
  if (a2 > 33633)
  {
    if (a2 <= 34233)
    {
      if (a2 <= 33638)
      {
        if ((a2 - 33635) >= 4)
        {
          int v4 = 33634;
          goto LABEL_22;
        }
        return 2;
      }
      if ((a2 - 33639) >= 2)
      {
        int v6 = 34042;
LABEL_26:
        if (a2 != v6) {
          return result;
        }
        return 4;
      }
      return 4;
    }
    if (a2 <= 36192)
    {
      if ((a2 - 34234) < 2) {
        return 2;
      }
      if (a2 != 35899)
      {
        int v6 = 35902;
        goto LABEL_26;
      }
      return 4;
    }
    if (a2 != 36193)
    {
      if (a2 == 37881) {
        unsigned int v7 = 4;
      }
      else {
        unsigned int v7 = 0;
      }
      if (a2 == 36269) {
        return 8;
      }
      else {
        return v7;
      }
    }
    return 2 * gleComponents(a1);
  }
  if (a2 > 32817)
  {
    if ((a2 - 32819) < 2) {
      return 2;
    }
    if ((a2 - 32821) >= 2)
    {
      int v4 = 32818;
LABEL_22:
      if (a2 == v4) {
        return 1;
      }
      return result;
    }
    return 4;
  }
  if ((a2 - 5120) > 0xB) {
    goto LABEL_37;
  }
  if (((1 << a2) & 0x70) != 0) {
    return 4 * gleComponents(a1);
  }
  if (((1 << a2) & 0x80C) != 0) {
    return 2 * gleComponents(a1);
  }
  if (((1 << a2) & 3) == 0)
  {
LABEL_37:
    if (a2) {
      return result;
    }
    uint64_t result = 0;
    if (a1 > 37839)
    {
      unsigned int v9 = a1 - 37840;
      if (v9 > 0x3D || ((1 << v9) & 0x3FFFC00000003FFFLL) == 0) {
        return result;
      }
    }
    else
    {
      if (a1 > 36284)
      {
        if ((a1 - 37808) < 0xE) {
          return 16;
        }
        if ((a1 - 37488) > 8) {
          goto LABEL_44;
        }
        int v8 = 1 << (a1 - 112);
        if ((v8 & 0x53) == 0)
        {
          if ((v8 & 0x10C) != 0) {
            return 16;
          }
LABEL_44:
          if ((a1 - 36285) >= 2) {
            return result;
          }
          return 16;
        }
        return 8;
      }
      if (a1 > 35419)
      {
        if ((a1 - 35420) < 4) {
          return 16;
        }
        if ((a1 - 35840) >= 4 && (a1 - 36283) >= 2) {
          return result;
        }
        return 8;
      }
      if ((a1 - 33776) < 2) {
        return 8;
      }
      if ((a1 - 33778) >= 2 && a1 != 34871) {
        return result;
      }
    }
    return 16;
  }
  uint64_t result = 1;
  char v5 = a1 - 101;
  if ((a1 - 35429) <= 0xF)
  {
    if (((1 << v5) & 0xE2E2) != 0) {
      return 2;
    }
    if (((1 << v5) & 0xD0D) != 0) {
      return result;
    }
    return 4;
  }
  if ((a1 - 37883) < 3) {
    return result;
  }
  if (a1 == 37902 || (a1 - 37875) < 6) {
    return 2;
  }
  if ((a1 - 37903) < 2) {
    return 4;
  }

  return gleComponents(a1);
}

uint64_t gleRowBytes(int a1, int a2, int a3)
{
  if (a2)
  {
    if (a2 == 6656) {
      return ((a3 + 7) >> 3);
    }
    else {
      return glePixelBytes(a1, a2) * a3;
    }
  }
  else
  {
    glgConvertType();
    glgConvertType();
    int CompressedBlockBytes = glgGetCompressedBlockBytes();
    unsigned int CompressedBlockHeight = glgGetCompressedBlockHeight();
    return glgConvertPixelWidthToBlocks() * CompressedBlockBytes / CompressedBlockHeight;
  }
}

uint64_t gleClipReadableRange(uint64_t a1, int a2, int a3, int *a4, int *a5, int *a6, int *a7, _DWORD *a8, _DWORD *a9)
{
  int v9 = *a4;
  int v10 = *a5;
  int v11 = *a6;
  int v12 = *a7;
  *a8 = 0;
  *a9 = 0;
  if ((v10 & 0x80000000) == 0)
  {
    uint64_t result = 0;
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  *a9 = -v10;
  v12 += v10;
  *a7 = v12;
  *a5 = 0;
  uint64_t result = 1;
  int v10 = 0;
  if (v9 < 0)
  {
LABEL_3:
    *a8 = -v9;
    v11 += v9;
    *a6 = v11;
    *a4 = 0;
    uint64_t result = 1;
    int v9 = 0;
  }
LABEL_4:
  int v14 = a3 - v10;
  if (v12 > v14) {
    *a7 = v14;
  }
  int v15 = a2 - v9;
  if (v11 > v15) {
    *a6 = v15;
  }
  return result;
}

void glePixelStorageSettings(uint64_t a1, unint64_t a2, int a3, int a4, int *a5, _DWORD *a6, int *a7, _DWORD *a8, int *a9, char a10)
{
  int v10 = ((a2 >> 37) & 3) + 1 + (((a2 >> 37) & 3) + 1) * (BYTE4(a2) & 0x1F);
  *a6 = v10;
  if (!a5)
  {
    int v19 = 0;
    int v20 = (int)(((a2 >> 39) & 0xF) + a3) / (int)(((a2 >> 39) & 0xF) + 1) * v10;
    *a8 = v20;
    uint64_t v21 = (a2 >> 43) & 0xF;
    int v22 = v21 + a4;
    LODWORD(v21) = v21 + 1;
    *a9 = v22 / (int)v21 * v20;
    *a8 /= v21;
    goto LABEL_17;
  }
  unsigned int v11 = a5[1];
  uint64_t v12 = (a2 >> 39) & 0xF;
  if (!v11)
  {
    int v13 = *a5;
    if (!*a5) {
      int v13 = a3;
    }
    unsigned int v11 = (v13 + (int)v12) / ((int)v12 + 1) * v10;
    *a8 = v11;
    unsigned int v14 = a5[7];
    if (!(v11 % v14)) {
      goto LABEL_8;
    }
    unsigned int v11 = v14 + v11 - v11 % v14;
  }
  *a8 = v11;
LABEL_8:
  int v15 = a5[3];
  if (!v15)
  {
    int v16 = a5[2];
    if (!v16) {
      int v16 = a4;
    }
    int v15 = v16 * v11;
  }
  *a9 = v15;
  int v17 = *a6 * (a5[5] / ((int)v12 + 1)) + *a8 * a5[4];
  if ((a10 & 4) != 0) {
    int v18 = a5[6];
  }
  else {
    int v18 = 0;
  }
  int v19 = v17 + v18 * v15;
LABEL_17:
  *a7 = v19;
}

uint64_t glePixelStorageFromFormatType(uint64_t a1, int a2, int a3)
{
  uint64_t result = 0;
  uint64_t v5 = a1 + 32493;
  if (a3 <= 33636)
  {
    if ((a3 - 5120) <= 0xB)
    {
      if (((1 << a3) & 0x815) != 0) {
        goto LABEL_23;
      }
      if (((1 << a3) & 0x68) != 0) {
        goto LABEL_22;
      }
      if (a3 == 5121) {
        goto LABEL_25;
      }
    }
    if ((a3 - 32819) < 2) {
      goto LABEL_25;
    }
    int v7 = 33635;
LABEL_16:
    if (a3 != v7) {
      return result;
    }
    goto LABEL_25;
  }
  if (a3 <= 34233)
  {
    if ((a3 - 33637) < 3) {
      goto LABEL_25;
    }
    if (a3 == 33640) {
      goto LABEL_23;
    }
    int v7 = 34042;
    goto LABEL_16;
  }
  if (a3 <= 36192)
  {
    if ((a3 - 34234) >= 2 && a3 != 35899)
    {
      int v6 = 35902;
      goto LABEL_21;
    }
LABEL_22:
    int v8 = *(unsigned __int8 *)(v5 + 8);
    goto LABEL_24;
  }
  if (a3 != 37882 && a3 != 36269)
  {
    int v6 = 36193;
LABEL_21:
    if (a3 != v6) {
      return result;
    }
    goto LABEL_22;
  }
LABEL_23:
  int v8 = *(unsigned char *)(v5 + 8) & 0xFE;
LABEL_24:
  if (v8 == 2) {
    return 0;
  }
LABEL_25:
  uint64_t result = 0;
  if (a2 > 35727)
  {
    if ((a2 - 37874) > 0x1E || ((1 << (a2 + 14)) & 0x70000EFF) == 0)
    {
      if ((a2 - 35728) < 0xA)
      {
        if (*(unsigned __int8 *)(v5 + 8) - 3 >= 2) {
          goto LABEL_42;
        }
        return 0;
      }
      if ((a2 - 36244) > 5 || ((1 << (a2 + 108)) & 0x31) == 0) {
        return result;
      }
    }
    goto LABEL_34;
  }
  if (a2 > 34040)
  {
    if ((a2 - 35429) > 0x12 || a2 == 35445)
    {
      if (a2 == 34041) {
        goto LABEL_42;
      }
      if (a2 != 35359) {
        return result;
      }
LABEL_75:
      int v9 = *(unsigned __int8 *)(v5 + 8);
LABEL_35:
      if (v9 != 2) {
        goto LABEL_42;
      }
      return 0;
    }
LABEL_34:
    int v9 = *(unsigned char *)(v5 + 8) & 0xFE;
    goto LABEL_35;
  }
  if (a2 > 32992)
  {
    if (a2 == 32993) {
      goto LABEL_42;
    }
    if (a2 == 33319) {
      goto LABEL_75;
    }
    if (a2 != 33320) {
      return result;
    }
    goto LABEL_34;
  }
  if ((a2 - 6406) < 5) {
    goto LABEL_42;
  }
  if ((a2 - 6402) < 2) {
    goto LABEL_75;
  }
  if (a2 != 6401) {
    return result;
  }
  if ((*(_WORD *)v5 & 0x2000) == 0) {
    return 0;
  }
LABEL_42:
  if (a3 <= 33633)
  {
    switch(a3)
    {
      case 5120:
        if (a2 <= 32992)
        {
          uint64_t result = 0x181680004000800ALL;
          switch(a2)
          {
            case 6401:
              return 0x101700000020000BLL;
            case 6402:
              return result;
            case 6403:
              uint64_t v35 = 67141638;
              return v35 & 0xFFFFFFFFFFFFLL | 0x3810000000000000;
            case 6404:
              uint64_t v35 = 0x800008008007;
              return v35 & 0xFFFFFFFFFFFFLL | 0x3810000000000000;
            case 6405:
              uint64_t v36 = 268468232;
              return v36 & 0xFFFFFFFFFFFFLL | 0x3811000000000000;
            case 6406:
              uint64_t v36 = 0x800020200005;
              return v36 & 0xFFFFFFFFFFFFLL | 0x3811000000000000;
            case 6407:
              uint64_t v23 = 0x401C008001;
              goto LABEL_366;
            case 6408:
              return 0x3E1200603C208000;
            case 6409:
              return 0x381500001C008004;
            case 6410:
              return 0x3A1580203C208003;
            default:
              if (a2 == 0x8000)
              {
                uint64_t v43 = 0x80603C208400;
                return v43 & 0xFFFFFFFFFFFFLL | 0x3E13000000000000;
              }
              if (a2 != 32992) {
                return 0x4000000000000000;
              }
              uint64_t v23 = 0x80401C008401;
LABEL_366:
              uint64_t result = v23 & 0xFFFFFFFFFFFFLL | 0x3C14000000000000;
              break;
          }
        }
        else if (a2 <= 36243)
        {
          switch(a2)
          {
            case 32993:
              uint64_t v43 = 0x603C208800;
              return v43 & 0xFFFFFFFFFFFFLL | 0x3E13000000000000;
            case 33319:
              return 0x3A1900200C008002;
            case 33320:
              return 0x2A1900208C008002;
            default:
              return 0x4000000000000000;
          }
        }
        else
        {
          switch(a2)
          {
            case 36244:
              uint64_t v13 = 2214625286;
              return v13 & 0xFFFFFFFFFFFFLL | 0x2810000000000000;
            case 36245:
              uint64_t v13 = 0x800088008007;
              return v13 & 0xFFFFFFFFFFFFLL | 0x2810000000000000;
            case 36246:
              uint64_t v27 = 2415951880;
              return v27 & 0xFFFFFFFFFFFFLL | 0x2811000000000000;
            case 36247:
              uint64_t v27 = 0x8000A0200005;
              return v27 & 0xFFFFFFFFFFFFLL | 0x2811000000000000;
            case 36248:
              uint64_t v28 = 0x409C008001;
              goto LABEL_319;
            case 36249:
              return 0x2E120060BC208000;
            case 36250:
              uint64_t v28 = 0x80409C008401;
LABEL_319:
              uint64_t result = v28 & 0xFFFFFFFFFFFFLL | 0x2C14000000000000;
              break;
            case 36251:
              uint64_t result = 0x2E130060BC208800;
              break;
            case 36252:
              uint64_t result = 0x281500009C008004;
              break;
            case 36253:
              uint64_t result = 0x2A158020BC208003;
              break;
            default:
              return 0x4000000000000000;
          }
        }
        return result;
      case 5121:
        if (a2 > 35428)
        {
          switch(a2)
          {
            case 37875:
            case 37876:
            case 37877:
            case 37878:
            case 37879:
            case 37880:
            case 37883:
            case 37884:
            case 37885:
            case 37902:
              uint64_t v19 = 67141649;
              return v19 & 0xFFFFFFFFFFFFLL | 0x3C04000000000000;
            case 37881:
            case 37882:
            case 37886:
            case 37887:
            case 37888:
            case 37889:
            case 37890:
            case 37891:
            case 37892:
            case 37893:
            case 37894:
            case 37895:
            case 37896:
            case 37897:
            case 37898:
            case 37899:
            case 37900:
            case 37901:
              return 0x4000000000000000;
            case 37903:
            case 37904:
              uint64_t result = 0x3E02000004008010;
              break;
            default:
              switch(a2)
              {
                case 36244:
                  return 0x2800000084008016;
                case 36245:
                  return 0x2800800088008017;
                case 36246:
                  uint64_t v55 = 2415951896;
                  return v55 & 0xFFFFFFFFFFFFLL | 0x2801000000000000;
                case 36247:
                  uint64_t v55 = 0x8000A0200015;
                  return v55 & 0xFFFFFFFFFFFFLL | 0x2801000000000000;
                case 36248:
                  uint64_t v56 = 0x409C008011;
                  goto LABEL_461;
                case 36249:
                  return 0x2E020060BC208010;
                case 36250:
                  uint64_t v56 = 0x80409C008411;
LABEL_461:
                  uint64_t result = v56 & 0xFFFFFFFFFFFFLL | 0x2C04000000000000;
                  break;
                case 36251:
                  uint64_t result = 0x2E030060BC208810;
                  break;
                case 36252:
                  uint64_t result = 0x280500009C008014;
                  break;
                case 36253:
                  uint64_t result = 0x2A058020BC208013;
                  break;
                default:
                  return 0x4000000000000000;
              }
              break;
          }
          return result;
        }
        if (a2 < 0x8000)
        {
          uint64_t result = 0x180680004000801ALL;
          switch(a2)
          {
            case 6401:
              return 0x100700000020001BLL;
            case 6402:
              return result;
            case 6403:
              uint64_t v47 = 67141654;
              return v47 & 0xFFFFFFFFFFFFLL | 0x3800000000000000;
            case 6404:
              uint64_t v47 = 0x800008008017;
              return v47 & 0xFFFFFFFFFFFFLL | 0x3800000000000000;
            case 6405:
              uint64_t v48 = 268468248;
              goto LABEL_421;
            case 6406:
              uint64_t v48 = 0x800020200015;
LABEL_421:
              uint64_t result = v48 & 0xFFFFFFFFFFFFLL | 0x3801000000000000;
              break;
            case 6407:
              uint64_t v19 = 0x401C008011;
              return v19 & 0xFFFFFFFFFFFFLL | 0x3C04000000000000;
            case 6408:
              uint64_t result = 0x3E0200603C208010;
              break;
            case 6409:
              uint64_t result = 0x380500001C008014;
              break;
            case 6410:
              uint64_t result = 0x3A0580203C208013;
              break;
            default:
              return 0x4000000000000000;
          }
          return result;
        }
        if (a2 <= 32992)
        {
          if (a2 != 0x8000)
          {
            if (a2 != 32992) {
              return 0x4000000000000000;
            }
            uint64_t v19 = 0x80401C008411;
            return v19 & 0xFFFFFFFFFFFFLL | 0x3C04000000000000;
          }
          uint64_t v49 = 0x80603C208410;
        }
        else
        {
          if (a2 != 32993)
          {
            if (a2 == 33319) {
              return 0x3A0900200C008012;
            }
            if (a2 != 33320) {
              return 0x4000000000000000;
            }
            return 0x2A0900208C008012;
          }
          uint64_t v49 = 0x603C208810;
        }
        return v49 & 0xFFFFFFFFFFFFLL | 0x3E03000000000000;
      case 5122:
        if (a2 <= 32992)
        {
          uint64_t result = 0x184680014001000ALL;
          switch(a2)
          {
            case 6401:
              return 0x104700010040000BLL;
            case 6402:
              return result;
            case 6403:
              uint64_t v37 = 0x104010006;
              return v37 & 0xFFFFFFFFFFFFLL | 0x3840000000000000;
            case 6404:
              uint64_t v37 = 0x800108010007;
              return v37 & 0xFFFFFFFFFFFFLL | 0x3840000000000000;
            case 6405:
              uint64_t v38 = 0x110010008;
              return v38 & 0xFFFFFFFFFFFFLL | 0x3841000000000000;
            case 6406:
              uint64_t v38 = 0x800120400005;
              return v38 & 0xFFFFFFFFFFFFLL | 0x3841000000000000;
            case 6407:
              return 0x3C4400411C010001;
            case 6408:
              return 0x3E4200613C410000;
            case 6409:
              return 0x384500011C010004;
            case 6410:
              return 0x3A4580213C410003;
            default:
              if (a2 == 0x8000)
              {
                uint64_t v44 = 0x80613C410400;
                return v44 & 0xFFFFFFFFFFFFLL | 0x3E43000000000000;
              }
              if (a2 != 32992) {
                return 0x4000000000000000;
              }
              uint64_t result = 0x3C4480411C010401;
              break;
          }
        }
        else if (a2 <= 36243)
        {
          switch(a2)
          {
            case 32993:
              uint64_t v44 = 0x613C410800;
              return v44 & 0xFFFFFFFFFFFFLL | 0x3E43000000000000;
            case 33319:
              return 0x3A4900210C010002;
            case 33320:
              return 0x2A4900218C010002;
            default:
              return 0x4000000000000000;
          }
        }
        else
        {
          switch(a2)
          {
            case 36244:
              uint64_t v14 = 0x184010006;
              return v14 & 0xFFFFFFFFFFFFLL | 0x2840000000000000;
            case 36245:
              uint64_t v14 = 0x800188010007;
              return v14 & 0xFFFFFFFFFFFFLL | 0x2840000000000000;
            case 36246:
              uint64_t v29 = 0x190010008;
              return v29 & 0xFFFFFFFFFFFFLL | 0x2841000000000000;
            case 36247:
              uint64_t v29 = 0x8001A0400005;
              return v29 & 0xFFFFFFFFFFFFLL | 0x2841000000000000;
            case 36248:
              uint64_t v30 = 0x419C010001;
              goto LABEL_331;
            case 36249:
              return 0x2E420061BC410000;
            case 36250:
              uint64_t v30 = 0x80419C010401;
LABEL_331:
              uint64_t result = v30 & 0xFFFFFFFFFFFFLL | 0x2C44000000000000;
              break;
            case 36251:
              uint64_t result = 0x2E430061BC410800;
              break;
            case 36252:
              uint64_t result = 0x284500019C010004;
              break;
            case 36253:
              uint64_t result = 0x2A458021BC410003;
              break;
            default:
              return 0x4000000000000000;
          }
        }
        return result;
      case 5123:
        if (a2 > 33319)
        {
          switch(a2)
          {
            case 36244:
              return 0x2830000184010016;
            case 36245:
              return 0x2830800188010017;
            case 36246:
              uint64_t v52 = 0x190010018;
              return v52 & 0xFFFFFFFFFFFFLL | 0x2831000000000000;
            case 36247:
              uint64_t v52 = 0x8001A0400015;
              return v52 & 0xFFFFFFFFFFFFLL | 0x2831000000000000;
            case 36248:
              uint64_t v53 = 0x419C010011;
              return v53 & 0xFFFFFFFFFFFFLL | 0x2C34000000000000;
            case 36249:
              return 0x2E320061BC410010;
            case 36250:
              uint64_t v53 = 0x80419C010411;
              return v53 & 0xFFFFFFFFFFFFLL | 0x2C34000000000000;
            case 36251:
              return 0x2E330061BC410810;
            case 36252:
              return 0x283500019C010014;
            case 36253:
              return 0x2A358021BC410013;
            default:
              if ((a2 - 35446) < 2) {
                return 0x1E3200613C410010;
              }
              if (a2 != 33320) {
                return 0x4000000000000000;
              }
              uint64_t result = 0x2A3900218C010012;
              break;
          }
          return result;
        }
        if (a2 < 0x8000)
        {
          uint64_t result = 0x183680014001001ALL;
          switch(a2)
          {
            case 6401:
              return 0x103700010040001BLL;
            case 6402:
              return result;
            case 6403:
              uint64_t v50 = 0x104010016;
              return v50 & 0xFFFFFFFFFFFFLL | 0x3830000000000000;
            case 6404:
              uint64_t v50 = 0x800108010017;
              return v50 & 0xFFFFFFFFFFFFLL | 0x3830000000000000;
            case 6405:
              uint64_t v51 = 0x110010018;
              goto LABEL_435;
            case 6406:
              uint64_t v51 = 0x800120400015;
LABEL_435:
              uint64_t result = v51 & 0xFFFFFFFFFFFFLL | 0x3831000000000000;
              break;
            case 6407:
              uint64_t result = 0x3C3400411C010011;
              break;
            case 6408:
              uint64_t result = 0x3E3200613C410010;
              break;
            case 6409:
              uint64_t result = 0x383500011C010014;
              break;
            case 6410:
              uint64_t result = 0x3A3580213C410013;
              break;
            default:
              return 0x4000000000000000;
          }
          return result;
        }
        if (a2 > 32992)
        {
          if (a2 != 32993) {
            return 0x3A3900210C010012;
          }
          uint64_t v54 = 0x613C410810;
        }
        else
        {
          if (a2 != 0x8000)
          {
            if (a2 != 32992) {
              return 0x4000000000000000;
            }
            return 0x3C3480411C010411;
          }
          uint64_t v54 = 0x80613C410410;
        }
        return v54 & 0xFFFFFFFFFFFFLL | 0x3E33000000000000;
      case 5124:
        if (a2 <= 32992)
        {
          uint64_t result = 0x187680034002000ALL;
          switch(a2)
          {
            case 6401:
              return 0x107700030080000BLL;
            case 6402:
              return result;
            case 6403:
              uint64_t v39 = 0x304020006;
              return v39 & 0xFFFFFFFFFFFFLL | 0x3870000000000000;
            case 6404:
              uint64_t v39 = 0x800308020007;
              return v39 & 0xFFFFFFFFFFFFLL | 0x3870000000000000;
            case 6405:
              uint64_t v40 = 0x310020008;
              return v40 & 0xFFFFFFFFFFFFLL | 0x3871000000000000;
            case 6406:
              uint64_t v40 = 0x800320800005;
              return v40 & 0xFFFFFFFFFFFFLL | 0x3871000000000000;
            case 6407:
              return 0x3C7400431C020001;
            case 6408:
              return 0x3E7200633C820000;
            case 6409:
              return 0x387500031C020004;
            case 6410:
              return 0x3A7580233C820003;
            default:
              if (a2 == 0x8000)
              {
                uint64_t v45 = 0x80633C820400;
                return v45 & 0xFFFFFFFFFFFFLL | 0x3E73000000000000;
              }
              if (a2 != 32992) {
                return 0x4000000000000000;
              }
              uint64_t result = 0x3C7480431C020401;
              break;
          }
        }
        else if (a2 <= 36243)
        {
          switch(a2)
          {
            case 32993:
              uint64_t v45 = 0x633C820800;
              return v45 & 0xFFFFFFFFFFFFLL | 0x3E73000000000000;
            case 33319:
              return 0x3A7900230C020002;
            case 33320:
              return 0x2A7900238C020002;
            default:
              return 0x4000000000000000;
          }
        }
        else
        {
          switch(a2)
          {
            case 36244:
              uint64_t v15 = 0x384020006;
              return v15 & 0xFFFFFFFFFFFFLL | 0x2870000000000000;
            case 36245:
              uint64_t v15 = 0x800388020007;
              return v15 & 0xFFFFFFFFFFFFLL | 0x2870000000000000;
            case 36246:
              uint64_t v31 = 0x390020008;
              return v31 & 0xFFFFFFFFFFFFLL | 0x2871000000000000;
            case 36247:
              uint64_t v31 = 0x8003A0800005;
              return v31 & 0xFFFFFFFFFFFFLL | 0x2871000000000000;
            case 36248:
              uint64_t v32 = 0x439C020001;
              goto LABEL_343;
            case 36249:
              return 0x2E720063BC820000;
            case 36250:
              uint64_t v32 = 0x80439C020401;
LABEL_343:
              uint64_t result = v32 & 0xFFFFFFFFFFFFLL | 0x2C74000000000000;
              break;
            case 36251:
              uint64_t result = 0x2E730063BC820800;
              break;
            case 36252:
              uint64_t result = 0x287500039C020004;
              break;
            case 36253:
              uint64_t result = 0x2A758023BC820003;
              break;
            default:
              return 0x4000000000000000;
          }
        }
        return result;
      case 5125:
        if (a2 <= 32992)
        {
          uint64_t result = 0x186680034002001ALL;
          switch(a2)
          {
            case 6401:
              return 0x106700030080001BLL;
            case 6402:
              return result;
            case 6403:
              uint64_t v41 = 0x304020016;
              return v41 & 0xFFFFFFFFFFFFLL | 0x3860000000000000;
            case 6404:
              uint64_t v41 = 0x800308020017;
              return v41 & 0xFFFFFFFFFFFFLL | 0x3860000000000000;
            case 6405:
              uint64_t v42 = 0x310020018;
              return v42 & 0xFFFFFFFFFFFFLL | 0x3861000000000000;
            case 6406:
              uint64_t v42 = 0x800320800015;
              return v42 & 0xFFFFFFFFFFFFLL | 0x3861000000000000;
            case 6407:
              return 0x3C6400431C020011;
            case 6408:
              return 0x3E6200633C820010;
            case 6409:
              return 0x386500031C020014;
            case 6410:
              return 0x3A6580233C820013;
            default:
              if (a2 == 0x8000)
              {
                uint64_t v46 = 0x80633C820410;
                return v46 & 0xFFFFFFFFFFFFLL | 0x3E63000000000000;
              }
              if (a2 != 32992) {
                return 0x4000000000000000;
              }
              uint64_t result = 0x3C6480431C020411;
              break;
          }
        }
        else if (a2 <= 36243)
        {
          switch(a2)
          {
            case 32993:
              uint64_t v46 = 0x633C820810;
              return v46 & 0xFFFFFFFFFFFFLL | 0x3E63000000000000;
            case 33319:
              return 0x3A6900230C020012;
            case 33320:
              return 0x2A6900238C020012;
            default:
              return 0x4000000000000000;
          }
        }
        else
        {
          switch(a2)
          {
            case 36244:
              uint64_t v16 = 0x384020016;
              return v16 & 0xFFFFFFFFFFFFLL | 0x2860000000000000;
            case 36245:
              uint64_t v16 = 0x800388020017;
              return v16 & 0xFFFFFFFFFFFFLL | 0x2860000000000000;
            case 36246:
              uint64_t v33 = 0x390020018;
              return v33 & 0xFFFFFFFFFFFFLL | 0x2861000000000000;
            case 36247:
              uint64_t v33 = 0x8003A0800015;
              return v33 & 0xFFFFFFFFFFFFLL | 0x2861000000000000;
            case 36248:
              uint64_t v34 = 0x439C020011;
              goto LABEL_355;
            case 36249:
              return 0x2E620063BC820010;
            case 36250:
              uint64_t v34 = 0x80439C020411;
LABEL_355:
              uint64_t result = v34 & 0xFFFFFFFFFFFFLL | 0x2C64000000000000;
              break;
            case 36251:
              uint64_t result = 0x2E630063BC820810;
              break;
            case 36252:
              uint64_t result = 0x286500039C020014;
              break;
            case 36253:
              uint64_t result = 0x2A658023BC820013;
              break;
            default:
              return 0x4000000000000000;
          }
        }
        return result;
      case 5126:
        if (a2 < 0x8000)
        {
          uint64_t result = 0x18A680034002002ALL;
          switch(a2)
          {
            case 6401:
              return 0x10A700030080002BLL;
            case 6402:
              return result;
            case 6403:
              uint64_t v24 = 0x304020026;
              return v24 & 0xFFFFFFFFFFFFLL | 0x38A0000000000000;
            case 6404:
              uint64_t v24 = 0x800308020027;
              return v24 & 0xFFFFFFFFFFFFLL | 0x38A0000000000000;
            case 6405:
              uint64_t v25 = 0x310020028;
              goto LABEL_299;
            case 6406:
              uint64_t v25 = 0x800320800025;
LABEL_299:
              uint64_t result = v25 & 0xFFFFFFFFFFFFLL | 0x38A1000000000000;
              break;
            case 6407:
              uint64_t v18 = 0x431C020021;
              return v18 & 0xFFFFFFFFFFFFLL | 0x3CA4000000000000;
            case 6408:
              uint64_t result = 0x3EA200633C820020;
              break;
            case 6409:
              uint64_t result = 0x38A500031C020024;
              break;
            case 6410:
              uint64_t result = 0x3AA580233C820023;
              break;
            default:
              return 0x4000000000000000;
          }
          return result;
        }
        if (a2 > 32992)
        {
          if (a2 != 32993)
          {
            if (a2 != 33319) {
              return 0x4000000000000000;
            }
            return 0x3AA900230C020022;
          }
          uint64_t v26 = 0x633C820820;
        }
        else
        {
          if (a2 != 0x8000)
          {
            if (a2 != 32992) {
              return 0x4000000000000000;
            }
            uint64_t v18 = 0x80431C020421;
            return v18 & 0xFFFFFFFFFFFFLL | 0x3CA4000000000000;
          }
          uint64_t v26 = 0x80633C820420;
        }
        return v26 & 0xFFFFFFFFFFFFLL | 0x3EA3000000000000;
      case 5127:
      case 5128:
      case 5129:
      case 5130:
        return (unint64_t)((a3 - 35728) < 0xA) << 62;
      case 5131:
        goto LABEL_67;
      default:
        switch(a3)
        {
          case 32818:
            uint64_t v10 = 0x4000000000000000;
            if (a2 == 36248) {
              uint64_t v10 = 0x2CD400009E003051;
            }
            BOOL v11 = a2 == 6407;
            uint64_t v12 = 0x3CD400001E003051;
            goto LABEL_145;
          case 32819:
            if (a2 > 36248)
            {
              if (a2 == 36249)
              {
                return 0x2F120001BC104050;
              }
              else
              {
                if (a2 != 36251) {
                  return 0x4000000000000000;
                }
                return 0x2F130001BC104850;
              }
            }
            else if (a2 == 6408)
            {
              return 0x3F1200013C104050;
            }
            else
            {
              if (a2 != 32993) {
                return 0x4000000000000000;
              }
              return 0x3F1300013C104850;
            }
          case 32820:
            if (a2 > 36248)
            {
              if (a2 == 36249)
              {
                return 0x2F320001BC045050;
              }
              else
              {
                if (a2 != 36251) {
                  return 0x4000000000000000;
                }
                return 0x2F330001BC045850;
              }
            }
            else if (a2 == 6408)
            {
              return 0x3F3200013C045050;
            }
            else
            {
              if (a2 != 32993) {
                return 0x4000000000000000;
              }
              return 0x3F3300013C045850;
            }
          case 32821:
            if (a2 > 36248)
            {
              if (a2 == 36249)
              {
                return 0x2F520003BC208050;
              }
              else
              {
                if (a2 != 36251) {
                  return 0x4000000000000000;
                }
                return 0x2F530003BC208850;
              }
            }
            else if (a2 == 6408)
            {
              return 0x3F5200033C208050;
            }
            else
            {
              if (a2 != 32993) {
                return 0x4000000000000000;
              }
              return 0x3F5300033C208850;
            }
          case 32822:
            if (a2 > 36248)
            {
              if (a2 == 36249)
              {
                uint64_t result = 0x2F720003BC08A050;
              }
              else
              {
                if (a2 != 36251) {
                  return 0x4000000000000000;
                }
                uint64_t result = 0x2F730003BC08A850;
              }
            }
            else if (a2 == 6408)
            {
              uint64_t result = 0x3F7200033C08A050;
            }
            else
            {
              if (a2 != 32993) {
                return 0x4000000000000000;
              }
              uint64_t result = 0x3F7300033C08A850;
            }
            break;
          default:
            if (a3 != 6656) {
              return (unint64_t)((a3 - 35728) < 0xA) << 62;
            }
            if (a2 == 6401) {
              return 0x10B703800004019BLL;
            }
            else {
              return 0;
            }
        }
        return result;
    }
  }
  if (a3 > 34041)
  {
    if (a3 <= 35901)
    {
      if (a3 > 34234)
      {
        if (a3 == 34235)
        {
          uint64_t v10 = 0x4000000000000000;
          if (a2 == 35359) {
            uint64_t v10 = 0x3DD880011C006491;
          }
          BOOL v11 = a2 == 34233;
          uint64_t v12 = 0x3DD800011C0064D1;
          goto LABEL_145;
        }
        if (a3 != 35899) {
          return (unint64_t)((a3 - 35728) < 0xA) << 62;
        }
        BOOL v11 = a2 == 6407;
        uint64_t v10 = 0x4000000000000000;
        uint64_t v12 = 0x3CB400031E00B461;
      }
      else
      {
        if (a3 != 34042)
        {
          if (a3 == 34234)
          {
            uint64_t v10 = 0x4000000000000000;
            if (a2 == 35359) {
              uint64_t v10 = 0x3DC880011C006091;
            }
            BOOL v11 = a2 == 34233;
            uint64_t v12 = 0x3DC800011C0060D1;
            goto LABEL_145;
          }
          return (unint64_t)((a3 - 35728) < 0xA) << 62;
        }
        BOOL v11 = a2 == 34041;
        uint64_t v10 = 0x4000000000000000;
        uint64_t v12 = 0x1B9780034021805CLL;
      }
LABEL_145:
      if (v11) {
        return v12;
      }
      else {
        return v10;
      }
    }
    if (a3 > 36268)
    {
      if (a3 == 36269)
      {
        BOOL v11 = a2 == 34041;
        uint64_t v10 = 0x4000000000000000;
        uint64_t v12 = 0x1BB780074022006CLL;
      }
      else
      {
        if (a3 != 37882) {
          return (unint64_t)((a3 - 35728) < 0xA) << 62;
        }
        BOOL v11 = a2 == 37881;
        uint64_t v10 = 0x4000000000000000;
        uint64_t v12 = 0x1F8200613C410450;
      }
      goto LABEL_145;
    }
    if (a3 == 35902)
    {
      BOOL v11 = a2 == 6407;
      uint64_t v10 = 0x4000000000000000;
      uint64_t v12 = 0x3CC400031C00E461;
      goto LABEL_145;
    }
    if (a3 != 36193) {
      return (unint64_t)((a3 - 35728) < 0xA) << 62;
    }
LABEL_67:
    if (a2 < 0x8000)
    {
      uint64_t result = 0x189680014001002ALL;
      switch(a2)
      {
        case 6401:
          return 0x109700010040002BLL;
        case 6402:
          return result;
        case 6403:
          uint64_t v20 = 0x104010026;
          return v20 & 0xFFFFFFFFFFFFLL | 0x3890000000000000;
        case 6404:
          uint64_t v20 = 0x800108010027;
          return v20 & 0xFFFFFFFFFFFFLL | 0x3890000000000000;
        case 6405:
          uint64_t v21 = 0x110010028;
          goto LABEL_248;
        case 6406:
          uint64_t v21 = 0x800120400025;
LABEL_248:
          uint64_t result = v21 & 0xFFFFFFFFFFFFLL | 0x3891000000000000;
          break;
        case 6407:
          uint64_t v17 = 0x411C010021;
          return v17 & 0xFFFFFFFFFFFFLL | 0x3C94000000000000;
        case 6408:
          uint64_t result = 0x3E9200613C410020;
          break;
        case 6409:
          uint64_t result = 0x389500011C010024;
          break;
        case 6410:
          uint64_t result = 0x3A9580213C410023;
          break;
        default:
          return 0x4000000000000000;
      }
      return result;
    }
    if (a2 > 32992)
    {
      if (a2 != 32993)
      {
        if (a2 == 33319) {
          return 0x3A9900210C010022;
        }
        return 0x4000000000000000;
      }
      uint64_t v22 = 0x613C410820;
    }
    else
    {
      if (a2 != 0x8000)
      {
        if (a2 == 32992)
        {
          uint64_t v17 = 0x80411C010421;
          return v17 & 0xFFFFFFFFFFFFLL | 0x3C94000000000000;
        }
        return 0x4000000000000000;
      }
      uint64_t v22 = 0x80613C410420;
    }
    return v22 & 0xFFFFFFFFFFFFLL | 0x3E93000000000000;
  }
  switch(a3)
  {
    case 33634:
      uint64_t v10 = 0x4000000000000000;
      if (a2 == 36248) {
        uint64_t v10 = 0x2CE400009E003451;
      }
      BOOL v11 = a2 == 6407;
      uint64_t v12 = 0x3CE400001E003451;
      goto LABEL_145;
    case 33635:
      uint64_t v10 = 0x4000000000000000;
      if (a2 == 36248) {
        uint64_t v10 = 0x2CF400019F006051;
      }
      BOOL v11 = a2 == 6407;
      uint64_t v12 = 0x3CF400011F006051;
      goto LABEL_145;
    case 33636:
      uint64_t v10 = 0x4000000000000000;
      if (a2 == 36248) {
        uint64_t v10 = 0x2D0400019F006451;
      }
      BOOL v11 = a2 == 6407;
      uint64_t v12 = 0x3D0400011F006451;
      goto LABEL_145;
    case 33637:
      if (a2 > 36248)
      {
        if (a2 == 36249)
        {
          return 0x27220001BC104450;
        }
        else
        {
          if (a2 != 36251) {
            return 0x4000000000000000;
          }
          return 0x27230001BC104C50;
        }
      }
      else if (a2 == 6408)
      {
        return 0x372200013C104450;
      }
      else
      {
        if (a2 != 32993) {
          return 0x4000000000000000;
        }
        return 0x372300013C104C50;
      }
    case 33638:
      if (a2 > 36248)
      {
        if (a2 == 36249)
        {
          return 0x27420001BC045450;
        }
        else
        {
          if (a2 != 36251) {
            return 0x4000000000000000;
          }
          return 0x27430001BC045C50;
        }
      }
      else if (a2 == 6408)
      {
        return 0x374200013C045450;
      }
      else
      {
        if (a2 != 32993) {
          return 0x4000000000000000;
        }
        return 0x374300013C045C50;
      }
    case 33639:
      if (a2 > 36248)
      {
        if (a2 == 36249)
        {
          return 0x2F620003BC208450;
        }
        else
        {
          if (a2 != 36251) {
            return 0x4000000000000000;
          }
          return 0x2F630003BC208C50;
        }
      }
      else if (a2 == 6408)
      {
        return 0x3F6200033C208450;
      }
      else
      {
        if (a2 != 32993) {
          return 0x4000000000000000;
        }
        return 0x3F6300033C208C50;
      }
    case 33640:
      if (a2 <= 36248)
      {
        if (a2 == 6408)
        {
          uint64_t result = 0x3F8200033C208450;
        }
        else
        {
          if (a2 != 32993) {
            return 0x4000000000000000;
          }
          uint64_t result = 0x3F8300033C208C50;
        }
      }
      else
      {
        switch(a2)
        {
          case 36249:
            uint64_t result = 0x2F820003BC208450;
            break;
          case 36251:
            uint64_t result = 0x2F830003BC208C50;
            break;
          case 37874:
            uint64_t result = 0x1F8200033C08A450;
            break;
          default:
            return 0x4000000000000000;
        }
      }
      break;
    default:
      return (unint64_t)((a3 - 35728) < 0xA) << 62;
  }
  return result;
}

uint64_t glePixelStorageFromCompressedFormat(uint64_t a1, int a2)
{
  uint64_t result = 0;
  if (a2 <= 35839)
  {
    if (a2 <= 0x8BFF)
    {
      switch(a2)
      {
        case 35728:
          return 0x3C0400401C008111;
        case 35729:
          return 0x3E0200603C208110;
        case 35730:
          return 0x3CF400011F006111;
        case 35731:
          return 0x3F1200013C104110;
        case 35732:
          return 0x3F3200013C045110;
        case 35733:
          uint64_t v3 = 0x3C0400401C008111;
          goto LABEL_41;
        case 35734:
          uint64_t v3 = 0x3E0200603C208110;
          goto LABEL_41;
        case 35735:
          uint64_t v3 = 0x3CF400011F006111;
          goto LABEL_41;
        case 35736:
          uint64_t v3 = 0x3F1200013C104110;
          goto LABEL_41;
        case 35737:
          uint64_t v3 = 0x3F3200013C045110;
LABEL_41:
          uint64_t result = v3 | 0x40;
          break;
        default:
          JUMPOUT(0);
      }
    }
    else
    {
      switch(a2)
      {
        case 35412:
LABEL_16:
          uint64_t result = 0x3D69BF9F1C0022D1;
          break;
        case 35413:
LABEL_15:
          uint64_t result = 0x3D59BB9F1C004311;
          break;
        case 35414:
LABEL_18:
          uint64_t result = 0x3F69BF9F3C0822D0;
          break;
        case 35415:
LABEL_17:
          uint64_t result = 0x3F59BB9F3C104310;
          break;
        case 35416:
        case 35417:
        case 35418:
        case 35419:
          return result;
        case 35420:
        case 35422:
LABEL_6:
          uint64_t result = 0x3EEA098F3C208390;
          break;
        case 35421:
        case 35423:
LABEL_13:
          uint64_t result = 0x3EFA1B8F3C208390;
          break;
        default:
          switch(a2)
          {
            case 33776:
              uint64_t result = 0x3C0999871C0021D1;
              break;
            case 33777:
              uint64_t result = 0x3E1999873C0421D0;
              break;
            case 33778:
              uint64_t result = 0x3E29998F3C104210;
              break;
            case 33779:
              uint64_t result = 0x3E39998F3C144250;
              break;
            default:
              return result;
          }
          break;
      }
    }
  }
  else
  {
    switch(a2)
    {
      case 37808:
      case 37840:
      case 37887:
        uint64_t result = 0x3E0A198F3C208390;
        break;
      case 37809:
      case 37841:
      case 37888:
        uint64_t result = 0x3E1A1A0F3C208390;
        break;
      case 37810:
      case 37842:
      case 37889:
        uint64_t result = 0x3E2A220F3C208390;
        break;
      case 37811:
      case 37843:
      case 37890:
        uint64_t result = 0x3E3A228F3C208390;
        break;
      case 37812:
      case 37844:
      case 37891:
        uint64_t result = 0x3E4A2A8F3C208390;
        break;
      case 37813:
      case 37845:
      case 37893:
        uint64_t result = 0x3E5A238F3C208390;
        break;
      case 37814:
      case 37846:
      case 37894:
        uint64_t result = 0x3E6A2B8F3C208390;
        break;
      case 37815:
      case 37847:
      case 37895:
        uint64_t result = 0x3E7A3B8F3C208390;
        break;
      case 37816:
      case 37848:
      case 37896:
        uint64_t result = 0x3E8A248F3C208390;
        break;
      case 37817:
      case 37849:
      case 37897:
        uint64_t result = 0x3E9A2C8F3C208390;
        break;
      case 37818:
      case 37850:
      case 37898:
        uint64_t result = 0x3EAA3C8F3C208390;
        break;
      case 37819:
      case 37851:
      case 37899:
        uint64_t result = 0x3EBA4C8F3C208390;
        break;
      case 37820:
      case 37852:
      case 37900:
        uint64_t result = 0x3ECA4D8F3C208390;
        break;
      case 37821:
      case 37853:
      case 37901:
        uint64_t result = 0x3EDA5D8F3C208390;
        break;
      case 37822:
      case 37823:
      case 37824:
      case 37825:
      case 37826:
      case 37827:
      case 37828:
      case 37829:
      case 37830:
      case 37831:
      case 37832:
      case 37833:
      case 37834:
      case 37835:
      case 37836:
      case 37837:
      case 37838:
      case 37839:
      case 37854:
      case 37855:
      case 37856:
      case 37857:
      case 37858:
      case 37859:
      case 37860:
      case 37861:
      case 37862:
      case 37863:
      case 37864:
      case 37865:
      case 37866:
      case 37867:
      case 37868:
      case 37869:
      case 37870:
      case 37871:
      case 37872:
      case 37873:
      case 37874:
      case 37875:
      case 37876:
      case 37877:
      case 37878:
      case 37879:
      case 37880:
      case 37881:
      case 37882:
      case 37883:
      case 37884:
      case 37885:
        return result;
      case 37886:
        goto LABEL_6;
      case 37892:
        goto LABEL_13;
      default:
        switch(a2)
        {
          case 37488:
            uint64_t result = 0x399999870400B356;
            break;
          case 37489:
            uint64_t result = 0x39A999870400B346;
            break;
          case 37490:
            uint64_t result = 0x3BB9998F0C00B352;
            break;
          case 37491:
            uint64_t result = 0x3BC9998F0C00B342;
            break;
          case 37492:
          case 37493:
            uint64_t result = 0x3DD999871C005351;
            break;
          case 37494:
          case 37495:
            uint64_t result = 0x3FE999873C045350;
            break;
          case 37496:
          case 37497:
            uint64_t result = 0x3FF9998F3C205350;
            break;
          default:
            switch(a2)
            {
              case 35840:
                goto LABEL_15;
              case 35841:
                goto LABEL_16;
              case 35842:
                goto LABEL_17;
              case 35843:
                goto LABEL_18;
              default:
                return result;
            }
        }
        break;
    }
  }
  return result;
}

uint64_t gleInternalFormatFromSizedEnum(int a1)
{
  uint64_t result = 0;
  if (a1 <= 36193)
  {
    if (a1 <= 34835)
    {
      if (a1 > 33320)
      {
        switch(a1)
        {
          case 33321:
            return 268566550;
          case 33322:
            return 268697622;
          case 33323:
            int v21 = 20;
            goto LABEL_153;
          case 33324:
            return 805572630;
          case 33325:
            int v28 = 268697622;
            return (v28 + 48);
          case 33326:
            int v4 = 268959782;
            return (v4 + 32);
          case 33327:
            int v28 = 805572630;
            return (v28 + 48);
          case 33328:
            int v4 = 805834790;
            return (v4 + 32);
          case 33329:
            return 268566566;
          case 33330:
            return 268566582;
          case 33331:
            int v19 = 268697622;
            goto LABEL_155;
          case 33332:
            int v15 = 268697622;
            goto LABEL_157;
          case 33333:
            return 268959782;
          case 33334:
            int v14 = 268959782;
            goto LABEL_160;
          case 33335:
            int v21 = 36;
            goto LABEL_153;
          case 33336:
            int v21 = 52;
LABEL_153:
            int v29 = 805441538;
LABEL_203:
            uint64_t result = v29 | v21;
            break;
          case 33337:
            int v19 = 805572630;
LABEL_155:
            uint64_t result = (v19 + 16);
            break;
          case 33338:
            int v15 = 805572630;
LABEL_157:
            uint64_t result = v15 | 0x20u;
            break;
          case 33339:
            uint64_t result = 805834790;
            break;
          case 33340:
            int v14 = 805834790;
LABEL_160:
            uint64_t result = v14 | 0x10u;
            break;
          default:
            switch(a1)
            {
              case 33776:
                uint64_t result = 2080481425;
                break;
              case 33777:
                uint64_t result = 2081534096;
                break;
              case 33778:
                uint64_t result = 2084679952;
                break;
              case 33779:
                uint64_t result = 2088874384;
                break;
              default:
                return result;
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 32827:
            return 4194325;
          case 32828:
            return 8388629;
          case 32829:
            return 12582933;
          case 32830:
            return 16777237;
          case 32831:
            return 65556;
          case 32832:
            int v25 = 65556;
            return (v25 + 0x10000);
          case 32833:
            return 196628;
          case 32834:
            int v25 = 196628;
            return (v25 + 0x10000);
          case 32835:
            return 4263955;
          case 32836:
            return 2199571;
          case 32837:
            return 8523795;
          case 32838:
            return 4395027;
          case 32839:
            return 12783635;
          case 32840:
            return 17043475;
          case 32841:
          case 32846:
            return result;
          case 32842:
            int v18 = 65556;
            goto LABEL_123;
          case 32843:
            return 131096;
          case 32844:
            int v18 = 196628;
LABEL_123:
            uint64_t result = (v18 + 4);
            break;
          case 32845:
            uint64_t result = 262168;
            break;
          case 32847:
            unsigned __int16 v3 = 8209;
LABEL_187:
            uint64_t result = v3 | 0x70010000u;
            break;
          case 32848:
            uint64_t result = 1879138321;
            break;
          case 32849:
            unsigned __int16 v6 = 8193;
LABEL_128:
            int v14 = v6 | 0x70020000;
            goto LABEL_160;
          case 32850:
            unsigned __int16 v22 = -24559;
LABEL_196:
            uint64_t result = v22 | 0x70020000u;
            break;
          case 32851:
            unsigned __int16 v26 = 8209;
LABEL_162:
            uint64_t result = v26 | 0x70030000u;
            break;
          case 32852:
            int v14 = 1879318529;
            goto LABEL_160;
          case 32853:
            uint64_t result = 1881190416;
            break;
          case 32854:
            unsigned __int16 v27 = 12304;
LABEL_191:
            uint64_t result = v27 | 0x70410000u;
            break;
          case 32855:
            uint64_t result = 1880190992;
            break;
          case 32856:
            uint64_t result = 1887580176;
            break;
          case 32857:
            uint64_t result = 1881321488;
            break;
          case 32858:
            uint64_t result = 1891840016;
            break;
          case 32859:
LABEL_41:
            uint64_t result = 1896099856;
            break;
          default:
            BOOL v12 = a1 == 10768;
            unsigned int v13 = 2013323281;
LABEL_95:
            if (v12) {
              uint64_t result = v13;
            }
            else {
              uint64_t result = 0;
            }
            break;
        }
      }
    }
    else if (a1 > 35839)
    {
      if (a1 <= 35897)
      {
        switch(a1)
        {
          case 35840:
            unsigned __int16 v7 = 25233;
LABEL_99:
            int v23 = v7 | 0x70010000;
            goto LABEL_189;
          case 35841:
            unsigned __int16 v3 = 25233;
            goto LABEL_187;
          case 35842:
            int v23 = 1883337360;
LABEL_189:
            uint64_t result = (v23 + 128);
            break;
          case 35843:
            unsigned __int16 v27 = 29328;
            goto LABEL_191;
          default:
            return result;
        }
      }
      else
      {
        switch(a1)
        {
          case 35898:
            return 2013454417;
          case 35899:
          case 35900:
          case 35902:
          case 35903:
          case 35904:
          case 35906:
          case 35908:
          case 35909:
          case 35910:
          case 35912:
          case 35913:
          case 35914:
          case 35915:
            return result;
          case 35901:
            unsigned __int16 v26 = -24495;
            goto LABEL_162;
          case 35905:
            int v21 = 2064;
            int v29 = 1879187457;
            goto LABEL_203;
          case 35907:
            return 1887582224;
          case 35911:
            return 133140;
          case 35916:
            int v21 = 2176;
            int v29 = 2080481297;
            goto LABEL_203;
          case 35917:
            int v5 = 2081534096;
            goto LABEL_27;
          case 35918:
            int v5 = 2084679952;
            goto LABEL_27;
          case 35919:
            int v5 = 2088874384;
LABEL_27:
            uint64_t result = v5 | 0x800u;
            break;
          default:
            int v8 = 36012;
            unsigned int v9 = -2146959287;
            BOOL v10 = a1 == 36013;
            unsigned int v11 = -2146959287;
LABEL_36:
            if (!v10) {
              unsigned int v11 = 0;
            }
            if (a1 == v8) {
              uint64_t result = v9;
            }
            else {
              uint64_t result = v11;
            }
            break;
        }
      }
    }
    else if (a1 <= 35407)
    {
      switch(a1)
      {
        case 34836:
          int v4 = 1913139232;
          return (v4 + 32);
        case 34837:
          int v4 = 1879580705;
          return (v4 + 32);
        case 34838:
          int v4 = 33554469;
          return (v4 + 32);
        case 34839:
          uint64_t result = 524360;
          break;
        case 34840:
          int v4 = 524324;
          return (v4 + 32);
        case 34841:
          int v4 = 34082851;
          return (v4 + 32);
        case 34842:
          int v28 = 1896099856;
          return (v28 + 48);
        case 34843:
          uint64_t result = 1879318593;
          break;
        case 34844:
          int v28 = 16777237;
          return (v28 + 48);
        case 34845:
          int v28 = 262168;
          return (v28 + 48);
        case 34846:
          uint64_t result = 262212;
          break;
        case 34847:
          int v28 = 17043475;
          return (v28 + 48);
        default:
          int v8 = 34871;
          unsigned int v9 = 805442067;
          BOOL v10 = a1 == 35056;
          unsigned int v11 = -2147090407;
          goto LABEL_36;
      }
    }
    else
    {
      switch(a1)
      {
        case 35408:
          unsigned __int16 v3 = -23663;
          goto LABEL_187;
        case 35409:
          unsigned __int16 v7 = -23663;
          goto LABEL_99;
        case 35412:
          int v5 = 1879138961;
          goto LABEL_27;
        case 35413:
          int v24 = 1879138961;
          goto LABEL_104;
        case 35414:
          int v5 = 1883337360;
          goto LABEL_27;
        case 35415:
          int v24 = 1883337360;
LABEL_104:
          uint64_t result = (v24 + 2176);
          break;
        case 35420:
        case 35421:
LABEL_11:
          uint64_t result = 1887581456;
          break;
        case 35422:
        case 35423:
LABEL_22:
          int v5 = 1887581456;
          goto LABEL_27;
        case 35429:
        case 35430:
        case 35431:
        case 35432:
        case 35433:
        case 35434:
        case 35435:
        case 35436:
LABEL_23:
          uint64_t result = 268566545;
          break;
        case 35437:
        case 35438:
        case 35439:
        case 35440:
        case 35441:
        case 35442:
        case 35443:
        case 35444:
LABEL_26:
          int v5 = 268566545;
          goto LABEL_27;
        case 35446:
          goto LABEL_41;
        case 35447:
          int v5 = 1896099856;
          goto LABEL_27;
        default:
          return result;
      }
    }
  }
  else
  {
    if (a1 > 37487)
    {
      switch(a1)
      {
        case 37808:
        case 37809:
        case 37810:
        case 37811:
        case 37812:
        case 37813:
        case 37814:
        case 37815:
        case 37816:
        case 37817:
        case 37818:
        case 37819:
        case 37820:
        case 37821:
        case 37886:
        case 37887:
        case 37888:
        case 37889:
        case 37890:
        case 37891:
        case 37892:
        case 37893:
        case 37894:
        case 37895:
        case 37896:
        case 37897:
        case 37898:
        case 37899:
        case 37900:
        case 37901:
          goto LABEL_11;
        case 37822:
        case 37823:
        case 37824:
        case 37825:
        case 37826:
        case 37827:
        case 37828:
        case 37829:
        case 37830:
        case 37831:
        case 37832:
        case 37833:
        case 37834:
        case 37835:
        case 37836:
        case 37837:
        case 37838:
        case 37839:
        case 37854:
        case 37855:
        case 37856:
        case 37857:
        case 37858:
        case 37859:
        case 37860:
        case 37861:
        case 37862:
        case 37863:
        case 37864:
        case 37865:
        case 37866:
        case 37867:
        case 37868:
        case 37869:
        case 37870:
        case 37871:
        case 37872:
        case 37873:
        case 37882:
          return result;
        case 37840:
        case 37841:
        case 37842:
        case 37843:
        case 37844:
        case 37845:
        case 37846:
        case 37847:
        case 37848:
        case 37849:
        case 37850:
        case 37851:
        case 37852:
        case 37853:
          goto LABEL_22;
        case 37874:
          return 1881323536;
        case 37875:
        case 37876:
        case 37877:
        case 37883:
        case 37884:
        case 37885:
        case 37902:
          goto LABEL_23;
        case 37878:
        case 37879:
        case 37880:
          goto LABEL_26;
        case 37881:
          return 4028807184;
        case 37903:
        case 37904:
          return 268566544;
        default:
          switch(a1)
          {
            case 37488:
              unsigned __int16 v6 = -15226;
              goto LABEL_128;
            case 37489:
              unsigned __int16 v22 = -15226;
              goto LABEL_196;
            case 37490:
              unsigned __int16 v22 = -11118;
              goto LABEL_196;
            case 37491:
              return 1879233666;
            case 37492:
              return 1879139473;
            case 37493:
              return 1879141521;
            case 37494:
              int v21 = 1152;
              goto LABEL_202;
            case 37495:
              int v21 = 3200;
LABEL_202:
              int v29 = 1880190992;
              goto LABEL_203;
            case 37496:
              return 1887532176;
            case 37497:
              int v5 = 1887532176;
              goto LABEL_27;
            default:
              return result;
          }
      }
    }
    switch(a1)
    {
      case 36194:
        return 2080481297;
      case 36195:
      case 36196:
      case 36197:
      case 36198:
      case 36199:
      case 36200:
      case 36201:
      case 36202:
      case 36203:
      case 36204:
      case 36205:
      case 36206:
      case 36207:
      case 36244:
      case 36245:
      case 36246:
      case 36247:
      case 36248:
      case 36249:
      case 36250:
      case 36251:
      case 36252:
      case 36253:
      case 36254:
      case 36255:
      case 36256:
      case 36257:
      case 36258:
      case 36259:
      case 36260:
      case 36261:
      case 36262:
      case 36263:
      case 36264:
      case 36265:
      case 36266:
      case 36267:
      case 36268:
      case 36269:
      case 36270:
      case 36271:
      case 36272:
      case 36273:
      case 36274:
      case 36275:
      case 36276:
      case 36277:
      case 36278:
      case 36279:
      case 36280:
      case 36281:
      case 36282:
        return result;
      case 36208:
        int v14 = 1913139232;
        goto LABEL_160;
      case 36209:
        int v14 = 1879580705;
        goto LABEL_160;
      case 36210:
        int v14 = 33554469;
        goto LABEL_160;
      case 36211:
        return 524344;
      case 36212:
        int v14 = 524324;
        goto LABEL_160;
      case 36213:
        int v14 = 34082851;
        goto LABEL_160;
      case 36214:
        int v15 = 1896099856;
        goto LABEL_157;
      case 36215:
        int v16 = 1879318529;
        return v16 | 0x30u;
      case 36216:
        int v15 = 16777237;
        goto LABEL_157;
      case 36217:
        int v15 = 262168;
        goto LABEL_157;
      case 36218:
        int v17 = 262168;
        return (v17 + 28);
      case 36219:
        int v15 = 17043475;
        goto LABEL_157;
      case 36220:
        return 1887580208;
      case 36221:
        int v16 = 1879187457;
        return v16 | 0x30u;
      case 36222:
        int v15 = 8388629;
        goto LABEL_157;
      case 36223:
        int v15 = 131096;
        goto LABEL_157;
      case 36224:
        int v17 = 131096;
        return (v17 + 28);
      case 36225:
        int v15 = 8523795;
        goto LABEL_157;
      case 36226:
        return 1913139232;
      case 36227:
        return 1879580705;
      case 36228:
        return 33554469;
      case 36229:
        int v18 = 524324;
        goto LABEL_123;
      case 36230:
        return 524324;
      case 36231:
        return 34082851;
      case 36232:
        int v19 = 1896099856;
        goto LABEL_155;
      case 36233:
        int v15 = 1879318529;
        goto LABEL_157;
      case 36234:
        int v19 = 16777237;
        goto LABEL_155;
      case 36235:
        int v19 = 262168;
        goto LABEL_155;
      case 36236:
        int v20 = 262168;
        goto LABEL_81;
      case 36237:
        int v19 = 17043475;
        goto LABEL_155;
      case 36238:
        return 1887580192;
      case 36239:
        int v15 = 1879187457;
        goto LABEL_157;
      case 36240:
        int v19 = 8388629;
        goto LABEL_155;
      case 36241:
        int v19 = 131096;
        goto LABEL_155;
      case 36242:
        int v20 = 131096;
LABEL_81:
        uint64_t result = (v20 + 12);
        break;
      case 36243:
        int v19 = 8523795;
        goto LABEL_155;
      case 36283:
        uint64_t result = 268567062;
        break;
      case 36284:
        uint64_t result = 268567046;
        break;
      case 36285:
        int v21 = 528;
        goto LABEL_153;
      case 36286:
        uint64_t result = 805442050;
        break;
      default:
        switch(a1)
        {
          case 36756:
            uint64_t result = 268566534;
            break;
          case 36757:
            uint64_t result = 805441538;
            break;
          case 36758:
            unsigned __int16 v22 = 8193;
            goto LABEL_196;
          case 36759:
            uint64_t result = 1887580160;
            break;
          case 36760:
            uint64_t result = 268697606;
            break;
          case 36761:
            uint64_t result = 805572610;
            break;
          case 36762:
            uint64_t result = 1879318529;
            break;
          case 36763:
            uint64_t result = 1896099840;
            break;
          default:
            BOOL v12 = a1 == 36975;
            unsigned int v13 = 1881321520;
            goto LABEL_95;
        }
        break;
    }
  }
  return result;
}

_DWORD *gleFillBitmap(_DWORD *result, int a2, int a3, int a4, uint64_t a5, unsigned char *a6, char a7)
{
  unsigned __int16 v7 = result + 4621;
  int v8 = result[4622];
  if (!v8)
  {
    int v9 = result[4628];
    int v10 = *v7;
    if (!*v7) {
      int v10 = a2;
    }
    int v11 = v10 + 7;
    int v12 = (v11 >> 3) % v9;
    int v13 = v9 - v12;
    if (!v12) {
      int v13 = 0;
    }
    int v8 = v13 + (v11 >> 3);
  }
  int v14 = result[4626];
  uint64_t v15 = a5 + (int)result[4625] * (uint64_t)v8 + v14 / 8;
  if ((a7 & 4) != 0)
  {
    int v17 = result[4623];
    if (!v17) {
      int v17 = a3;
    }
    uint64_t v16 = v17 * v8;
    v15 += (int)result[4627] * v16;
  }
  else
  {
    uint64_t v16 = 0;
  }
  if (a4 >= 1)
  {
    int v18 = 0;
    int v19 = *((unsigned __int8 *)result + 18517);
    int v20 = v14 % 8;
    int v21 = 8 - v20;
    int v22 = LowBitsMask[8 - v20];
    char v23 = HighBitsMask[v20];
    uint64_t result = &__glMsbToLsbTable;
    do
    {
      if (a3 >= 1)
      {
        int v24 = 0;
        uint64_t v25 = v15;
        do
        {
          if (a2)
          {
            uint64_t v26 = 0;
            unsigned __int16 v27 = &HighBitsMask[a2];
            int v28 = a2;
            while (1)
            {
              int v29 = (unsigned __int8 *)(v25 + v26);
              if (v19) {
                int v29 = (unsigned __int8 *)&__glMsbToLsbTable + *v29;
              }
              int v30 = *v29;
              if (v20)
              {
                if (v28 <= v21)
                {
                  int v30 = (v30 & v22) << v20;
                }
                else
                {
                  uint64_t v31 = (unsigned char *)(v25 + v26 + 1);
                  if (v19) {
                    uint64_t v31 = (char *)&__glMsbToLsbTable + *v31;
                  }
                  int v30 = ((*v31 & v23) >> v21) | ((v30 & v22) << v20);
                }
              }
              if (v28 <= 7) {
                break;
              }
              a6[v26++] = v30;
              v27 -= 8;
              v28 -= 8;
              if (!v28)
              {
                a6 += v26;
                goto LABEL_30;
              }
            }
            uint64_t v32 = &a6[v26];
            unsigned char *v32 = *v27 & v30;
            a6 = v32 + 1;
          }
LABEL_30:
          v25 += v8;
          ++v24;
        }
        while (v24 != a3);
      }
      v15 += v16;
      ++v18;
    }
    while (v18 != a4);
  }
  return result;
}

unint64_t gleClipPoints(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  int v4 = a4;
  if (a3 >= 1)
  {
    unint64_t v5 = a2 + 640 * a3;
    int v4 = a4;
    do
    {
      if (!*(unsigned char *)(a2 + 3))
      {
        *(void *)int v4 = a2;
        v4 += 8;
      }
      a2 += 640;
    }
    while (a2 < v5);
  }
  return (unint64_t)(v4 - a4) >> 3;
}

uint64_t gleClipPointsPlane(uint64_t a1, char *a2, int a3)
{
  uint64_t v3 = a3;
  unint64_t v4 = *(unsigned int *)(a1 + 28732);
  if ((int)v4 >= 1 && a3 >= 1)
  {
    unint64_t v6 = 0;
    do
    {
      float v7 = *(float *)(a1 + 16 * *(unsigned __int8 *)(a1 + v6 + 28736) + 17576);
      float v8 = *(float *)(a1 + 16 * *(unsigned __int8 *)(a1 + v6 + 28736) + 17580);
      float v9 = *(float *)(a1 + 16 * *(unsigned __int8 *)(a1 + v6 + 28736) + 17584);
      float v10 = *(float *)(a1 + 16 * *(unsigned __int8 *)(a1 + v6 + 28736) + 17588);
      int v11 = &a2[8 * v3];
      int v12 = a2;
      int v13 = a2;
      do
      {
        if ((float)((float)((float)((float)(v8 * *(float *)(*(void *)v13 + 100))
                                   + (float)(*(float *)(*(void *)v13 + 96) * v7))
                           + (float)(*(float *)(*(void *)v13 + 104) * v9))
                   + (float)(*(float *)(*(void *)v13 + 108) * v10)) >= 0.0)
        {
          *(void *)int v12 = *(void *)v13;
          v12 += 8;
        }
        v13 += 8;
      }
      while (v13 < v11);
      unint64_t v14 = v12 - a2;
      uint64_t v3 = ((unint64_t)(v12 - a2) >> 3);
      ++v6;
    }
    while (v6 < v4 && (int)(v14 >> 3) > 0);
  }
  return v3;
}

uint64_t gleClipPolyPlane(uint64_t result, char *a2, int a3, char *a4, _DWORD *a5)
{
  uint64_t v5 = result;
  unint64_t v6 = *(float **)(result + 26008);
  uint64_t v34 = *(unsigned int *)(result + 28732);
  if ((int)v34 < 1)
  {
    LODWORD(v30) = 0;
LABEL_30:
    *a5 = v30;
    *(void *)(v5 + 26008) = v6;
    return result;
  }
  float v7 = a4;
  float v8 = a2;
  uint64_t v33 = a5;
  uint64_t v9 = 0;
  float v10 = a4;
  int v11 = &a2[8 * a3];
  while (1)
  {
    int v12 = v10;
    float v13 = *(float *)(v5 + 16 * *(unsigned __int8 *)(v5 + v9 + 28736) + 17576);
    float v14 = *(float *)(v5 + 16 * *(unsigned __int8 *)(v5 + v9 + 28736) + 17580);
    float v15 = *(float *)(v5 + 16 * *(unsigned __int8 *)(v5 + v9 + 28736) + 17584);
    float v16 = *(float *)(v5 + 16 * *(unsigned __int8 *)(v5 + v9 + 28736) + 17588);
    float v17 = *(float *)(*(void *)v8 + 96);
    float v18 = *(float *)(*(void *)v8 + 100);
    float v19 = *(float *)(*(void *)v8 + 104);
    float v20 = *(float *)(*(void *)v8 + 108);
    *(void *)int v11 = *(void *)v8;
    if (v8 < v11)
    {
      float v21 = (float)((float)((float)(v14 * v18) + (float)(v17 * v13)) + (float)(v19 * v15)) + (float)(v20 * v16);
      int v22 = v10;
      char v23 = v8;
      while (1)
      {
        float v24 = v21;
        uint64_t v25 = *(void *)v23;
        unsigned __int16 v27 = (float *)*((void *)v23 + 1);
        v23 += 8;
        uint64_t v26 = v27;
        float v21 = (float)((float)((float)(v14 * v27[25]) + (float)(v27[24] * v13)) + (float)(v27[26] * v15))
            + (float)(v27[27] * v16);
        if (v24 >= 0.0)
        {
          *(void *)int v22 = v25;
          if (v21 < 0.0)
          {
            if (*((unsigned char *)v26 + 1) && v26 == *(float **)v8)
            {
              int v28 = v6;
              unint64_t v6 = v26;
            }
            else
            {
              int v28 = v6 + 160;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, float))(v5 + 27880))(v5, v24 / (float)(v24 - v21));
            *((unsigned char *)v6 + 1) = 2;
            *((void *)v22 + 1) = v6;
            v22 += 16;
            goto LABEL_19;
          }
          v22 += 8;
        }
        else if (v21 >= 0.0)
        {
          if (!*(unsigned char *)(v25 + 1) || v25 == *(void *)v8)
          {
            int v28 = v6 + 160;
          }
          else
          {
            int v28 = v6;
            unint64_t v6 = (float *)v25;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, float))(v5 + 27880))(v5, v24 / (float)(v24 - v21));
          *(void *)int v22 = v6;
          v22 += 8;
LABEL_19:
          unint64_t v6 = v28;
        }
        if (v23 >= v11) {
          goto LABEL_23;
        }
      }
    }
    int v22 = v10;
LABEL_23:
    unint64_t v29 = v22 - v12;
    unint64_t v30 = (unint64_t)(v22 - v12) >> 3;
    if ((int)v30 <= 2) {
      break;
    }
    int v11 = &v12[v29 & 0x7FFFFFFF8];
    ++v9;
    float v10 = v8;
    float v8 = v12;
    if (v9 == v34)
    {
      if (v12 != v7)
      {
        uint64_t v31 = (v29 >> 3);
        do
        {
          uint64_t v32 = *(void *)v12;
          v12 += 8;
          *(void *)float v7 = v32;
          v7 += 8;
          --v31;
        }
        while (v31);
      }
      a5 = v33;
      goto LABEL_30;
    }
  }
  *uint64_t v33 = 0;
  return result;
}

uint64_t gleCullPolygonStack(uint64_t a1, float32x2_t *a2, int a3, _DWORD *a4, float *a5)
{
  float32x2_t v5 = a2[8];
  float v6 = 0.0;
  float v8 = v5.f32[1];
  float v7 = v5.f32[0];
  if (a3 >= 2)
  {
    uint64_t v9 = (float *)&a2[88] + 1;
    uint64_t v10 = a3 - 1;
    LODWORD(v11) = HIDWORD(*(void *)&a2[8]);
    float v12 = v5.f32[0];
    do
    {
      float v7 = *(v9 - 1);
      float v8 = *v9;
      float v6 = v6 + (float)((float)(v12 * *v9) - (float)(v7 * v11));
      v9 += 160;
      float v11 = v8;
      float v12 = v7;
      --v10;
    }
    while (v10);
  }
  float v13 = v6 + (float)((float)(v7 * COERCE_FLOAT(HIDWORD(*(void *)&a2[8]))) - (float)(v5.f32[0] * v8));
  int v14 = *(unsigned __int8 *)(a1 + 28748);
  int v15 = v13 > 0.0;
  if (*(unsigned char *)(a1 + 28750) == (v14 == v15)) {
    return 1;
  }
  *a4 = v14 != v15;
  if (!a5) {
    return 0;
  }
  float v17 = (unsigned __int16 *)(a1 + 15526);
  if (v14 == v15) {
    float v17 = (unsigned __int16 *)(a1 + 15524);
  }
  int v18 = *v17;
  float v19 = 0.0;
  if (v18 != 6913)
  {
    if (v18 != 6912 || !*(unsigned char *)(a1 + 15535)) {
      goto LABEL_24;
    }
LABEL_15:
    if (v13 == 0.0)
    {
      float32x2_t v30 = 0;
    }
    else
    {
      float v20 = -v5.f32[0];
      float32x2_t v21 = 0;
      float v22 = a2[9].f32[0];
      float32x2_t v23 = v5;
      float v24 = 1.0 / v13;
      if (a3 >= 2)
      {
        uint64_t v25 = (float *)&a2[89];
        uint64_t v26 = a3 - 1;
        float v27 = a2[9].f32[0];
        float32x2_t v28 = v5;
        do
        {
          float v22 = *v25;
          float32x2_t v23 = *(float32x2_t *)(v25 - 2);
          float32x2_t v21 = vadd_f32(v21, vmla_n_f32(vmul_n_f32(vneg_f32(v23), v27), v28, *v25));
          v25 += 160;
          float v27 = v22;
          float32x2_t v28 = v23;
          --v26;
        }
        while (v26);
      }
      float32x2_t v29 = vneg_f32(v5);
      v29.f32[0] = v20;
      float32x2_t v30 = vabs_f32(vmul_n_f32(vadd_f32(v21, vmla_n_f32(vmul_n_f32(v29, v22), v23, a2[9].f32[0])), v24));
    }
    if (v30.f32[0] <= v30.f32[1]) {
      v30.f32[0] = v30.f32[1];
    }
    float v19 = (float)(*(float *)(a1 + 15520) * *(float *)(*(void *)(a1 + 29032) + 140))
        + (float)((float)(*(float *)(a1 + 15516) * v30.f32[0]) * *(float *)(*(void *)(a1 + 29032) + 136));
    goto LABEL_24;
  }
  if (*(unsigned char *)(a1 + 15536)) {
    goto LABEL_15;
  }
LABEL_24:
  uint64_t result = 0;
  *a5 = v19;
  return result;
}

void *gleFlushLineLoopFunc(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 26124;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 26124);
  unint64_t v4 = ((__int16)v3 >> 3);
  float32x2_t v5 = *(char **)(a1 + 26000);
  if (!*(unsigned char *)(a1 + 28668))
  {
    if (v3 > 7)
    {
      if (v4 <= 1) {
        unsigned int v7 = 1;
      }
      else {
        unsigned int v7 = (__int16)v3 >> 3;
      }
      memmove(v5 - 640, v5, 8 * v7);
      goto LABEL_10;
    }
LABEL_5:
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(a1 + 28144))(a1);
    *(unsigned char *)(v2 + 2544) = 1;
    goto LABEL_14;
  }
  if (v3 <= 7) {
    goto LABEL_5;
  }
LABEL_10:
  if (v4 <= 1) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = v4;
  }
  size_t v9 = 8 * v8;
  memcpy(__dst, (const void *)(*(void *)(a1 + 26008) - 8 * v4), 8 * v8);
  (*(void (**)(uint64_t))(a1 + 28144))(a1);
  *(unsigned char *)(v2 + 2544) = 1;
  uint64_t result = memcpy(v5, __dst, v9);
LABEL_14:
  *(void *)(a1 + 26008) = &v5[8 * v4];
  if (*(unsigned char *)(v2 + 2545))
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, char *))(a1 + 1472);
    return (void *)v10(a1, v5);
  }
  return result;
}

void *gleFlushLineStripFunc(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 26124;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 26124);
  unint64_t v4 = ((__int16)v3 >> 3);
  if (v3 >= 8)
  {
    if (v4 <= 1) {
      uint64_t v5 = 1;
    }
    else {
      uint64_t v5 = ((__int16)v3 >> 3);
    }
    memcpy(__dst, (const void *)(*(void *)(a1 + 26008) - 8 * v4), 8 * v5);
  }
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(a1 + 28144))(a1);
  *(unsigned char *)(v2 + 2544) = 1;
  uint64_t v7 = *(void *)(a1 + 26000);
  if (v3 >= 8)
  {
    if (v4 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = ((__int16)v3 >> 3);
    }
    uint64_t result = memcpy(*(void **)(a1 + 26000), __dst, 8 * v8);
  }
  *(void *)(a1 + 26008) = v7 + 8 * v4;
  if (*(unsigned char *)(v2 + 2545))
  {
    size_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 1472);
    return (void *)v9(a1, v7);
  }
  return result;
}

void *gleFlushTriQuadStripFunc(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 26124;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 26124);
  unint64_t v4 = ((__int16)v3 >> 2);
  if (v3 >= 4)
  {
    if (v4 <= 1) {
      uint64_t v5 = 1;
    }
    else {
      uint64_t v5 = ((__int16)v3 >> 2);
    }
    memcpy(__dst, (const void *)(*(void *)(a1 + 26008) - 8 * v4), 8 * v5);
  }
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(a1 + 28144))(a1);
  *(unsigned char *)(v2 + 2544) = 1;
  uint64_t v7 = *(void *)(a1 + 26000);
  if (v3 >= 4)
  {
    if (v4 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = ((__int16)v3 >> 2);
    }
    uint64_t result = memcpy(*(void **)(a1 + 26000), __dst, 8 * v8);
  }
  *(void *)(a1 + 26008) = v7 + 8 * v4;
  if (*(unsigned char *)(v2 + 2545))
  {
    (*(void (**)(uint64_t, uint64_t))(a1 + 1472))(a1, v7);
    size_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 1472);
    return (void *)v9(a1, v7 + 640);
  }
  return result;
}

void *gleFlushTriangleFanFunc(uint64_t a1)
{
  __dst[160] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 26124;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 26124);
  unint64_t v4 = ((__int16)v3 >> 3);
  uint64_t v5 = *(char **)(a1 + 26000);
  if (v3 >= 8)
  {
    float v6 = (uint64_t *)(*(void *)(a1 + 26008) - 8 * v4);
    if (v4 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = ((__int16)v3 >> 3);
    }
    memcpy(__dst, v5, 8 * v7);
    if (v4 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = v4;
    }
    int v9 = (__int16)v3 >> 3;
    do
    {
      uint64_t v10 = *v6++;
      __dst[v9++] = v10;
      --v8;
    }
    while (v8);
  }
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(a1 + 28144))(a1);
  *(unsigned char *)(v2 + 2544) = 1;
  unint64_t v12 = (2 * v4);
  if (v3 >= 8)
  {
    if (v12 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v12;
    }
    uint64_t result = memcpy(v5, __dst, 8 * v13);
  }
  *(void *)(a1 + 26008) = &v5[8 * v12];
  if (*(unsigned char *)(v2 + 2545))
  {
    (*(void (**)(uint64_t, char *))(a1 + 1472))(a1, v5);
    int v14 = *(uint64_t (**)(uint64_t, char *))(a1 + 1472);
    return (void *)v14(a1, v5 + 640);
  }
  return result;
}

void *gleFlushPolygonFunc(uint64_t a1)
{
  __dst[160] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 26124;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 26124);
  unint64_t v4 = ((__int16)v3 >> 3);
  uint64_t v5 = *(char **)(a1 + 26000);
  if (v3 >= 8)
  {
    float v6 = (uint64_t *)(*(void *)(a1 + 26008) - 8 * v4);
    if (v4 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = ((__int16)v3 >> 3);
    }
    memcpy(__dst, v5, 8 * v7);
    if (v4 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = v4;
    }
    int v9 = (__int16)v3 >> 3;
    do
    {
      uint64_t v10 = *v6++;
      __dst[v9++] = v10;
      --v8;
    }
    while (v8);
  }
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(a1 + 28144))(a1);
  *(unsigned char *)(v2 + 2544) = 1;
  unint64_t v12 = (2 * v4);
  if (v3 >= 8)
  {
    if (v12 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v12;
    }
    uint64_t result = memcpy(v5, __dst, 8 * v13);
  }
  *(void *)(a1 + 26008) = &v5[8 * v12];
  if (*(unsigned char *)(v2 + 2545))
  {
    (*(void (**)(uint64_t, char *))(a1 + 1472))(a1, v5);
    int v14 = *(uint64_t (**)(uint64_t, char *))(a1 + 1472);
    return (void *)v14(a1, v5 + 640);
  }
  return result;
}

void *gleFlushLineStripAdjacencyFunc(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 26124;
  int v3 = 3 * *(__int16 *)(a1 + 26124);
  unint64_t v4 = (v3 >> 3);
  if (v3 >= 8)
  {
    if (v4 <= 1) {
      uint64_t v5 = 1;
    }
    else {
      uint64_t v5 = (v3 >> 3);
    }
    memcpy(__dst, (const void *)(*(void *)(a1 + 26008) - 8 * v4), 8 * v5);
  }
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(a1 + 28144))(a1);
  *(unsigned char *)(v2 + 2544) = 1;
  uint64_t v7 = *(void *)(a1 + 26000);
  if (v3 >= 8)
  {
    if (v4 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = (v3 >> 3);
    }
    uint64_t result = memcpy(*(void **)(a1 + 26000), __dst, 8 * v8);
  }
  *(void *)(a1 + 26008) = v7 + 8 * v4;
  if (*(unsigned char *)(v2 + 2545))
  {
    for (uint64_t i = 0; i != 1920; i += 640)
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 1472))(a1, v7 + i);
  }
  return result;
}

void *gleFlushTriangleStripAdjacencyFunc()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  unsigned char __dst[640] = *MEMORY[0x263EF8340];
  unsigned int v1 = *(unsigned __int16 *)(v0 + 26124);
  unint64_t v2 = ((__int16)v1 >> 3);
  unint64_t v3 = (__int16)v1 & 0xFFFFFFF8;
  unint64_t v4 = (char *)(*(void *)(v0 + 26008) - 8 * v3);
  if (v1 > 7)
  {
    if (v2 <= 1) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = ((__int16)v1 >> 3);
    }
    size_t v7 = 8 * v6;
    memcpy(__dst, v4, 8 * v6);
    uint64_t v8 = &v4[-8 * (2 * v2)];
    memcpy(&__dst[v2], v8, v7);
    int v9 = &v8[8 * (4 * v2)];
    unsigned int v10 = 6 * v2;
    if ((6 * v2) <= 1) {
      unsigned int v10 = 1;
    }
    memcpy(&__dst[v2 + v2], v9, 8 * v10);
    uint64_t v11 = &v9[8 * v2];
    uint64_t v5 = (uint64_t)&v11[8 * v2];
    if (v2 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v2;
    }
    uint64_t v13 = &v11[8 * v2];
    do
    {
      uint64_t v14 = *(void *)v13;
      v13 += 8;
      *(void *)uint64_t v11 = v14;
      v11 += 8;
      --v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v5 = (uint64_t)&v4[8 * (4 * v2) + 8 * v2 + 8 * v2 + -8 * (2 * v2)];
  }
  *(void *)(v0 + 26008) = v5;
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(v0 + 28144))(v0);
  *(unsigned char *)(v0 + 28668) = 1;
  uint64_t v16 = *(void *)(v0 + 26000);
  if (v1 >= 8)
  {
    if (v3 <= 1) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = (__int16)v1 & 0xFFFFFFF8;
    }
    uint64_t result = memcpy(*(void **)(v0 + 26000), __dst, 8 * v17);
  }
  *(void *)(v0 + 26008) = v16 + 8 * v3;
  if (*(unsigned char *)(v0 + 28669))
  {
    uint64_t v18 = 8;
    do
    {
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 1472))(v0, v16);
      v16 += 640;
      --v18;
    }
    while (v18);
  }
  return result;
}

void *gleFlushPatchesFunc(uint64_t a1)
{
  v15[1] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 26124;
  MEMORY[0x270FA5388]();
  uint64_t v6 = (char *)v15 - v4 * (uint64_t)v5;
  int v8 = v4 * v7;
  unint64_t v9 = ((v4 * v7) >> 3);
  if ((v4 * v7) >= 8)
  {
    unsigned int v10 = (const void *)(v3 - 8 * v9);
    if (v9 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = (v8 >> 3);
    }
    memcpy((char *)v15 - v4 * (uint64_t)v5, v10, 8 * v11);
  }
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(a1 + 28144))(a1);
  *(unsigned char *)(v2 + 2544) = 1;
  uint64_t v13 = *(void *)(a1 + 26000);
  if (v8 >= 8)
  {
    if (v9 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = (v8 >> 3);
    }
    uint64_t result = memcpy(*(void **)(a1 + 26000), v6, 8 * v14);
  }
  *(void *)(a1 + 26008) = v13 + 8 * v9;
  return result;
}

uint64_t gleUpdateInvalidPrimitives(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 26432);
  if (*(unsigned char *)(v1 + 41))
  {
    int v2 = -16385;
  }
  else
  {
    unsigned __int16 v3 = *(_WORD *)(v1 + 42) + 1;
    if (v3 > 2u) {
      int v2 = -32752;
    }
    else {
      int v2 = dword_227DC2280[(__int16)v3];
    }
  }
  *(_DWORD *)(result + 28656) = v2;
  return result;
}

uint64_t gleBeginPrimitiveTCLFunc(uint64_t a1)
{
  int v2 = (_WORD *)(a1 + 26124);
  *(unsigned char *)(a1 + 28668) = 0;
  int v6 = *(_DWORD *)(a1 + 28664);
  uint64_t v3 = 5;
  if (!v6) {
    uint64_t v3 = 4;
  }
  int v4 = (__int16)v2[v3];
  uint64_t result = (*(uint64_t (**)(void, void, int *))(a1 + 29200))(*(void *)(a1 + 29016), *(__int16 *)(a1 + 28660), &v6);
  _WORD *v2 = v4;
  *(void *)(a1 + 26048) = result;
  *(void *)(a1 + 26008) = result;
  *(void *)(a1 + 26016) = result + v6 * (uint64_t)v4;
  *(void *)(a1 + 28152) = gleFlushPrimitiveTCLFunc;
  *(void *)(a1 + 28144) = gleRenderPrimitiveTCLFunc;
  return result;
}

char *gleFlushPrimitiveTCLFunc(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v2 = v1;
  unint64_t v3 = 0;
  uint64_t v29 = *MEMORY[0x263EF8340];
  int v4 = (__int16 *)(v1 + 26124);
  unint64_t v5 = *(__int16 *)(v1 + 26124);
  switch(*(_WORD *)(v1 + 28660))
  {
    case 2:
      if (*(unsigned char *)(v1 + 28668)) {
        goto LABEL_13;
      }
      if (!*(_WORD *)(v1 + 26124)) {
        goto LABEL_22;
      }
      unint64_t v10 = 0;
      uint64_t v11 = *(void *)(v1 + 26000) - 640;
      uint64_t v12 = *(void *)(v1 + 26048);
      do
      {
        *(_DWORD *)(v11 + v10) = *(_DWORD *)(v12 + v10);
        v10 += 4;
      }
      while (v10 < v5);
      goto LABEL_13;
    case 3:
LABEL_13:
      if (!v5) {
        goto LABEL_22;
      }
      uint64_t v13 = 4;
      if (v5 > 4) {
        uint64_t v13 = v5;
      }
      memcpy(__dst, (const void *)(*(void *)(v1 + 26008) - v5), ((v13 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      unint64_t v3 = v5;
      goto LABEL_37;
    case 5:
    case 8:
      if (!*(_WORD *)(v1 + 26124)) {
        goto LABEL_22;
      }
      unint64_t v3 = 2 * v5;
      int v6 = (const void *)(*(void *)(v1 + 26008) - 2 * v5);
      goto LABEL_19;
    case 6:
    case 9:
      if (*(_WORD *)(v1 + 26124))
      {
        uint64_t v7 = *(void *)(v1 + 26008);
        uint64_t v8 = 4;
        if (v5 > 4) {
          uint64_t v8 = *(__int16 *)(v1 + 26124);
        }
        size_t v9 = ((v8 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
        memcpy(__dst, *(const void **)(v1 + 26048), v9);
        memcpy(&__dst[v5], (const void *)(v7 - v5), v9);
      }
      unint64_t v3 = 2 * v5;
      goto LABEL_37;
    case 0xB:
      if (*(_WORD *)(v1 + 26124))
      {
        unint64_t v3 = 3 * v5;
        int v6 = (const void *)(*(void *)(v1 + 26008) - 3 * v5);
LABEL_19:
        uint64_t v14 = 4;
        if (v3 > 4) {
          uint64_t v14 = v3;
        }
        uint64_t v15 = v14 - 1;
LABEL_34:
        memcpy(__dst, v6, (v15 & 0xFFFFFFFFFFFFFFFCLL) + 4);
      }
      else
      {
LABEL_22:
        unint64_t v3 = 0;
      }
LABEL_37:
      (*(void (**)(uint64_t))(v2 + 28144))(v2);
      *((unsigned char *)v4 + 2544) = 1;
      int v27 = *((_DWORD *)v4 + 635);
      uint64_t result = (char *)(*(uint64_t (**)(void, void, int *))(v2 + 29200))(*(void *)(v2 + 29016), v4[1268], &v27);
      uint64_t v26 = result;
      *(void *)(v2 + 26048) = result;
      *(void *)(v2 + 26016) = &result[v27 * (uint64_t)*v4];
      if (v3)
      {
        uint64_t result = (char *)memcpy(result, __dst, ((v3 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4);
        v26 += v3;
      }
      *(void *)(v2 + 26008) = v26;
      return result;
    case 0xD:
      uint64_t v16 = (char *)(*(void *)(v1 + 26008) - 8 * v5);
      if (*(_WORD *)(v1 + 26124))
      {
        if (v5 <= 4) {
          uint64_t v17 = 4;
        }
        else {
          uint64_t v17 = *(__int16 *)(v1 + 26124);
        }
        size_t v18 = ((v17 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
        memcpy(__dst, v16, v18);
        float v19 = &v16[-2 * v5];
        memcpy(&__dst[v5], v19, v18);
        float v20 = &v19[4 * v5];
        uint64_t v21 = 6 * v5;
        if (6 * v5 <= 4) {
          uint64_t v21 = 4;
        }
        memcpy(&__dst[v5 + v5], v20, ((v21 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4);
        unint64_t v22 = 0;
        uint64_t v23 = (uint64_t)&v20[v5 + v5];
        do
        {
          *(_DWORD *)&v20[v5 + v22] = *(_DWORD *)(v23 + v22);
          v22 += 4;
        }
        while (v22 < v5);
      }
      else
      {
        uint64_t v23 = (uint64_t)&v16[4 * v5 + 2 * v5 + -2 * v5];
      }
      *(void *)(v2 + 26008) = v23;
      unint64_t v3 = 8 * v5;
      goto LABEL_37;
    case 0xE:
      uint64_t v24 = *(void *)(v1 + 26008);
      unint64_t v3 = *(__int16 *)(v1 + 26124)
         * (uint64_t)((int)((v24 - *(void *)(v1 + 26048)) / (uint64_t)v5) % *(unsigned __int8 *)(v1 + 17724));
      if (!v3) {
        goto LABEL_37;
      }
      int v6 = (const void *)(v24 - v3);
      uint64_t v15 = v3 - 1;
      goto LABEL_34;
    default:
      goto LABEL_37;
  }
}

uint64_t gleRenderPrimitiveTCLFunc(uint64_t a1)
{
  uint64_t v2 = a1 + 26124;
  uint64_t v3 = *(__int16 *)(a1 + 28662);
  unint64_t v4 = *(__int16 *)(a1 + 26124);
  uint64_t v5 = *(void *)(a1 + 26008);
  unint64_t v6 = (v5 - *(void *)(a1 + 26048)) / v4;
  if ((*(_WORD *)(a1 + 28662) & 2) == 0) {
    goto LABEL_7;
  }
  if (v3 == 3)
  {
    int v8 = *(unsigned char *)(a1 + 28668) == 0;
    goto LABEL_19;
  }
  if (v3 != 2)
  {
LABEL_7:
    int v8 = 2;
    goto LABEL_19;
  }
  int v7 = *(__int16 *)(a1 + 28660);
  if (*(unsigned char *)(a1 + 28668))
  {
    if (v7 < 0)
    {
      if (v5 == *(void *)(a1 + 26016))
      {
        *(_WORD *)(a1 + 28660) = 2;
        (*(void (**)(uint64_t))(a1 + 28152))(a1);
        *(_WORD *)(v2 + 2536) = -1;
        uint64_t v5 = *(void *)(a1 + 26008);
        unint64_t v6 = (v5 - *(void *)(a1 + 26048)) / v4;
      }
      unint64_t v9 = 0;
      uint64_t v10 = *(void *)(a1 + 26000) - 640;
      do
      {
        *(_DWORD *)(v5 + v9) = *(_DWORD *)(v10 + v9);
        v9 += 4;
      }
      while (v9 < v4);
      int v8 = 0;
      *(void *)(a1 + 26008) = v5 + v4;
      unint64_t v6 = (v6 + 1);
    }
    else
    {
      int v8 = 0;
    }
    uint64_t v3 = 3;
  }
  else
  {
    if (v7 == 2) {
      uint64_t v3 = 3;
    }
    else {
      uint64_t v3 = 2;
    }
    int v8 = 1;
  }
LABEL_19:
  uint64_t v11 = v8 | ((*(unsigned char *)(v2 + 2544) == 0) << 15);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(a1 + 29208);
  uint64_t v13 = *(void *)(a1 + 29016);

  return v12(v13, v11, v3, v6);
}

void gleFreeProgramPipelineObject(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[10];
  if (v4)
  {
    int v5 = *(_DWORD *)(v4 + 20) - 1;
    *(_DWORD *)(v4 + 20) = v5;
    if (v5 == 1) {
      gleDeleteHashNameAndObject(a1, (void (**)(uint64_t, uint64_t))(a1 + 168), *(_DWORD *)(v4 + 16));
    }
  }
  for (uint64_t i = 5; i != 10; ++i)
  {
    uint64_t v7 = a2[i];
    if (v7)
    {
      int v8 = *(_DWORD *)(v7 + 20) - 1;
      *(_DWORD *)(v7 + 20) = v8;
      if (v8 == 1) {
        gleDeleteHashNameAndObject(a1, (void (**)(uint64_t, uint64_t))(a1 + 168), *(_DWORD *)(v7 + 16));
      }
    }
  }
  unint64_t v9 = (void *)a2[4];
  if (v9)
  {
    free(v9);
    a2[4] = 0;
  }
  uint64_t v10 = (void *)a2[11];
  if (v10) {
    free(v10);
  }

  free(a2);
}

char *gleCreateProgramPipelineHashObject(uint64_t a1, int a2)
{
  uint64_t v4 = (unsigned __int8 *)(a1 + 32496);
  memset(v8, 0, sizeof(v8));
  gleSetResource(a1, v8);
  ShInitialize();
  int v5 = (char *)malloc_type_malloc(72 * *v4 + 112, 0x577B5147uLL);
  if (!v5) {
    abort();
  }
  unint64_t v6 = v5;
  *((_DWORD *)v5 + 4) = a2;
  *(void *)(v5 + 20) = 0x600000001;
  *((void *)v5 + 4) = 0;
  *((_DWORD *)v5 + 7) = 0;
  *((void *)v5 + 10) = 0;
  *((void *)v5 + 11) = 0;
  *((_DWORD *)v5 + 24) = 0;
  *((_DWORD *)v5 + 26) = 1;
  *((void *)v5 + 9) = 0;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_WORD *)v5 + 50) = 0;
  gleAddHashNameAndObject(a1, *(void *)(a1 + 19296) + 136, (uint64_t)v5);
  return v6;
}

uint64_t gleGenProgramPipelines(uint64_t result, unsigned int a2, _DWORD *a3)
{
  if ((a2 & 0x80000000) != 0)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1281;
    }
  }
  else
  {
    uint64_t result = gleGenHashNames(*(void *)(result + 19296) + 136, a2);
    if (result) {
      BOOL v5 = a2 == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      uint64_t v6 = a2;
      do
      {
        *a3++ = result;
        uint64_t result = (result + 1);
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

void gleBindProgramPipelineObject(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (unsigned char *)(a1 + 32484);
  uint64_t v4 = *(void *)(a1 + 24776);
  *(void *)(a1 + 24776) = a2;
  if (a2)
  {
    ++*(_DWORD *)(a2 + 20);
    if (!*(void *)(a1 + 24768))
    {
      uint64_t v5 = 0;
      uint64_t v6 = a2 + 40;
      *(_DWORD *)(a2 + 104) |= 1u;
      uint64_t v7 = (void *)(a1 + 33504);
      do
      {
        uint64_t v8 = *(void *)(v6 + 8 * v5);
        if (v8)
        {
          unint64_t v9 = (uint64_t *)(v8 + 40);
          gleResetSubroutineUniforms((char *)a1, v8 + 40);
          *(_DWORD *)(v8 + 3696) |= 0x30u;
          uint64_t v10 = v3[12];
          if (v3[12])
          {
            int v11 = *(unsigned __int8 *)(v8 + 704 * v5 + 212);
            uint64_t v12 = v7;
            do
            {
              if (v11 && *(unsigned char *)(v8 + 3978) && !*(_DWORD *)(v8 + 3744)) {
                uint64_t v13 = *v9;
              }
              else {
                uint64_t v13 = 0;
              }
              *uint64_t v12 = v13;
              v12 += 209;
              ++v9;
              --v10;
            }
            while (v10);
          }
        }
        else if (v3[12])
        {
          unint64_t v14 = 0;
          uint64_t v15 = 1672 * v3[12];
          do
          {
            v7[v14 / 8] = 0;
            v14 += 1672;
          }
          while (v15 != v14);
        }
        ++v5;
        ++v7;
      }
      while (v5 != 5);
LABEL_28:
      float v20 = (int *)(a1 + 24864);
      int v21 = *(_DWORD *)(a1 + 24864);
      if (v21)
      {
        uint64_t v22 = *(void *)(a1 + 24224);
        if (v22)
        {
          __int16 v23 = *(_WORD *)(v22 + 2) - 1;
          *(_WORD *)(v22 + 2) = v23;
          if (!v23) {
            MEMORY[0x22A686880]();
          }
          *(void *)(a1 + 24224) = 0;
          int v21 = *v20;
        }
      }
      if ((v21 & 2) != 0)
      {
        uint64_t v24 = *(void *)(a1 + 24280);
        if (v24)
        {
          __int16 v25 = *(_WORD *)(v24 + 2) - 1;
          *(_WORD *)(v24 + 2) = v25;
          if (!v25) {
            MEMORY[0x22A686880]();
          }
          *(void *)(a1 + 24280) = 0;
          int v21 = *v20;
        }
      }
      if ((v21 & 4) != 0)
      {
        uint64_t v26 = *(void *)(a1 + 24328);
        if (v26)
        {
          __int16 v27 = *(_WORD *)(v26 + 2) - 1;
          *(_WORD *)(v26 + 2) = v27;
          if (!v27) {
            MEMORY[0x22A686880]();
          }
          *(void *)(a1 + 24328) = 0;
          int v21 = *v20;
        }
      }
      if ((v21 & 8) != 0)
      {
        uint64_t v28 = *(void *)(a1 + 24376);
        if (v28)
        {
          __int16 v29 = *(_WORD *)(v28 + 2) - 1;
          *(_WORD *)(v28 + 2) = v29;
          if (!v29) {
            MEMORY[0x22A686880]();
          }
          *(void *)(a1 + 24376) = 0;
        }
      }
      gleUpdateCurrentProgramState(a1);
      if (v4)
      {
        gleUnbindProgramPipelineObject(a1, v4);
        int v30 = *(_DWORD *)(v4 + 20) - 1;
        *(_DWORD *)(v4 + 20) = v30;
        if (!v30) {
          gleFreeProgramPipelineObject(*(void *)(a1 + 19296), (void *)v4);
        }
      }
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x10000000u;
      unsigned int v31 = *(_DWORD *)(a1 + 1540) & 0xEFFFFFFF;
      *(_DWORD *)(a1 + 1540) = v31;
      if (!*v3) {
        *(_DWORD *)(a1 + 1540) = v31 | 0x60000000;
      }
      return;
    }
  }
  else if (!*(void *)(a1 + 24768))
  {
    uint64_t v18 = *(unsigned __int8 *)(a1 + 32496);
    if (*(unsigned char *)(a1 + 32496))
    {
      uint64_t v19 = a1 + 33504;
      do
      {
        *(void *)(v19 + 32) = 0;
        *(_OWORD *)uint64_t v19 = 0uLL;
        *(_OWORD *)(v19 + 16) = 0uLL;
        v19 += 1672;
        --v18;
      }
      while (v18);
    }
    goto LABEL_28;
  }
  if (v4)
  {
    int v16 = *(_DWORD *)(v4 + 20) - 1;
    *(_DWORD *)(v4 + 20) = v16;
    if (!v16)
    {
      uint64_t v17 = *(void *)(a1 + 19296);
      gleFreeProgramPipelineObject(v17, (void *)v4);
    }
  }
}

uint64_t gleUnbindProgramPipelineObject(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = 0;
    uint64_t v3 = a2 + 40;
    uint64_t v4 = (unsigned __int8 *)(result + 32496);
    uint64_t v5 = (void *)(result + 32512);
    uint64_t v6 = 4016;
    do
    {
      uint64_t v7 = *(void *)(v3 + 8 * v2);
      if (v7)
      {
        unsigned __int8 v8 = *v4;
        if (*v4)
        {
          unint64_t v9 = 0;
          uint64_t v10 = (void *)(v7 + v6);
          int v11 = v5;
          do
          {
            if (*v10)
            {
              uint64_t result = (*(uint64_t (**)(void))(v11[206] + 1648))(*v11);
              unsigned __int8 v8 = *v4;
            }
            ++v9;
            v11 += 209;
            v10 += 9;
          }
          while (v9 < v8);
        }
      }
      ++v2;
      v6 += 8;
    }
    while (v2 != 5);
  }
  return result;
}

uint64_t gleDeleteProgramPipelines(uint64_t result, unsigned int a2, unsigned int *a3)
{
  uint64_t v3 = result;
  if ((a2 & 0x80000000) != 0)
  {
    if (!*(_WORD *)(result + 29832)) {
      *(_WORD *)(result + 29832) = 1281;
    }
  }
  else if (a2)
  {
    uint64_t v5 = a2;
    do
    {
      if (*a3)
      {
        uint64_t v6 = gleLookupHashObject(*(void *)(v3 + 19296) + 136, *a3);
        if (v6)
        {
          if (v6 == *(uint64_t **)(v3 + 24776)) {
            gleBindProgramPipelineObject(v3, 0);
          }
        }
        uint64_t result = gleUnbindDeleteHashNameAndObject(v3, (void (**)(void, uint64_t))(*(void *)(v3 + 19296) + 136), (void (*)(uint64_t, uint64_t))gleUnbindProgramPipelineObject, *a3);
      }
      ++a3;
      --v5;
    }
    while (v5);
  }
  return result;
}

void gleFreeProgramPipelineState(uint64_t a1)
{
  if (*(void *)(a1 + 24776))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    gleBindProgramPipelineObject(a1, 0);
    uint64_t v2 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);
    os_unfair_lock_unlock(v2);
  }
}

void *gleUpdateRasterStateProgram(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v89 = *MEMORY[0x263EF8340];
  uint64_t v85 = a1 + 29632;
  uint64_t v2 = (int16x8_t *)(a1 + 15004);
  uint64_t __s1 = 0;
  uint64_t v3 = a1 + 15596;
  if ((*(unsigned char *)(a1 + 15644) & 4) != 0) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = 2;
  }
  if (*(void *)(a1 + 28960)) {
    goto LABEL_5;
  }
  int updated = gleUpdateColorMode(a1, 0);
  switch(updated)
  {
    case 0x400:
      uint64_t v5 = 1688;
      break;
    case 0x8000000:
      uint64_t v5 = 408;
      break;
    case 0x8000:
      uint64_t v5 = 1432;
      break;
    default:
LABEL_5:
      uint64_t v5 = 152;
      break;
  }
  unint64_t v6 = v5 & 0xFFFFFFFFFFFFDFFFLL | ((unint64_t)(v2[10].i8[14] & 1) << 13);
  unint64_t v88 = v6;
  uint64_t v7 = *(void *)(v1 + 28960);
  if (v7) {
    unsigned __int8 v8 = (unsigned char *)(v7 + 88 * *(unsigned __int8 *)(v85 + 2867) + 642);
  }
  else {
    unsigned __int8 v8 = (unsigned char *)(*(void *)(v1 + 29032) + 45);
  }
  if (*v8) {
    BOOL v10 = v2[12].i8[0] == 0;
  }
  else {
    BOOL v10 = 1;
  }
  uint64_t v11 = 0x4000;
  if (v10) {
    uint64_t v11 = 0;
  }
  unint64_t v12 = v11 | v6;
  uint64_t v13 = v2;
  uint64_t v86 = v1;
  if (!v7)
  {
    uint64_t v17 = 0;
    uint16x8_t v18 = (uint16x8_t)vceqzq_s16(v2[11]);
    int8x16_t v19 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_227DC22B0, (int8x16_t)vmovl_u16(*(uint16x4_t *)v18.i8)), vbicq_s8((int8x16_t)xmmword_227DC22A0, (int8x16_t)vmovl_high_u16(v18)));
    *(int8x8_t *)v19.i8 = vorr_s8(*(int8x8_t *)v19.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL));
    unsigned __int32 v20 = v19.i32[0] | v19.i32[1];
    int v16 = 2;
    uint64_t v21 = 160;
    unint64_t v88 = (*(_DWORD *)v85 << 15) | ((unint64_t)*(unsigned int *)(v85 + 4) << 47) | ((unint64_t)(v19.i8[0] | v19.i8[4]) << 32) | v12;
    do
    {
      if ((v20 >> v7))
      {
        int v22 = gleUpdateColorMode(v86, 0);
        uint64_t v23 = v21 | 0x600;
        uint64_t v24 = v21 | 0x500;
        uint64_t v25 = v21 | 0x100;
        if (v22 != 0x8000000) {
          uint64_t v25 = v21;
        }
        if (v22 != 0x8000) {
          uint64_t v24 = v25;
        }
        if (v22 != 1024) {
          uint64_t v23 = v24;
        }
        unint64_t v26 = v23 & 0xFFFFFFFFFFFF9FFFLL | ((unint64_t)(v2[10].i8[14] & 1) << 13);
        if (*(unsigned char *)(*(void *)(v86 + 29032) + 45)) {
          BOOL v27 = v2[12].i8[0] == 0;
        }
        else {
          BOOL v27 = 1;
        }
        if (v27) {
          uint64_t v28 = 0;
        }
        else {
          uint64_t v28 = 0x4000;
        }
        unint64_t v29 = v28 | v26;
        *(&__s1 + v16) = v29;
        uint64_t v17 = *(void *)(v86 + 28960);
        if (v17)
        {
          unint64_t v30 = v29 & 0xFFFFFFFF00007FFFLL | ((unint64_t)*(unsigned __int16 *)(v17 + 474) << 15);
          *(&__s1 + v16) = v30;
          unsigned int v31 = *(unsigned __int16 *)(v17 + 476);
        }
        else
        {
          unsigned int v31 = *(_DWORD *)(v85 + 4);
          unint64_t v30 = v29 & 0xFFFFFFFF00007FFFLL | (*(_DWORD *)v85 << 15);
        }
        *(&__s1 + v16++) = v30 & 0x7FFFFFFFFFFFLL | ((unint64_t)v31 << 47);
      }
      ++v7;
      v21 += 8;
    }
    while (v7 != 8);
    uint64_t v1 = v86;
    if (v2[12].i8[8] || v2[12].i8[10])
    {
      if (v17)
      {
        if ((*(unsigned char *)(v17 + 497) & 1) == 0) {
          goto LABEL_67;
        }
        uint64_t v32 = (unint64_t *)(&__s1 + v16);
        unint64_t *v32 = 224;
        unint64_t v33 = ((unint64_t)*(unsigned __int16 *)(v17 + 474) << 15) | 0xE0;
        unint64_t *v32 = v33;
        uint64_t v34 = *(unsigned __int16 *)(v17 + 476);
      }
      else
      {
        if (!*(unsigned char *)(*(void *)(v86 + 29032) + 56))
        {
          if ((*(unsigned char *)(v86 + 15644) & 1) == 0) {
            goto LABEL_78;
          }
          goto LABEL_72;
        }
        uint64_t v32 = (unint64_t *)(&__s1 + v16);
        uint64_t v34 = *(unsigned int *)(v85 + 4);
        unint64_t v33 = (*(_DWORD *)v85 << 15) | 0xE0u;
        unint64_t *v32 = v33;
      }
      unint64_t *v32 = v33 | (v34 << 47);
      ++v16;
    }
LABEL_67:
    if ((*(unsigned char *)(v86 + 15644) & 1) == 0) {
      goto LABEL_78;
    }
    if (v17)
    {
      if ((*(unsigned char *)(v17 + 497) & 2) == 0) {
        goto LABEL_78;
      }
      uint64_t v43 = (unint64_t *)(&__s1 + v16);
      unint64_t *v43 = 232;
      unint64_t v44 = ((unint64_t)*(unsigned __int16 *)(v17 + 474) << 15) | 0xE8;
      unint64_t *v43 = v44;
      uint64_t v45 = *(unsigned __int16 *)(v17 + 476);
LABEL_74:
      unint64_t *v43 = v44 | (v45 << 47);
      ++v16;
      goto LABEL_78;
    }
LABEL_72:
    if (!*(unsigned char *)(*(void *)(v86 + 29032) + 57)) {
      goto LABEL_78;
    }
    uint64_t v43 = (unint64_t *)(&__s1 + v16);
    uint64_t v45 = *(unsigned int *)(v85 + 4);
    unint64_t v44 = (*(_DWORD *)v85 << 15) | 0xE8u;
    unint64_t *v43 = v44;
    goto LABEL_74;
  }
  uint16x8_t v14 = (uint16x8_t)vceqzq_s16(*(int16x8_t *)(v7 + 456));
  int8x16_t v15 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_227DC22B0, (int8x16_t)vmovl_u16(*(uint16x4_t *)v14.i8)), vbicq_s8((int8x16_t)xmmword_227DC22A0, (int8x16_t)vmovl_high_u16(v14)));
  *(int8x8_t *)v15.i8 = vorr_s8(*(int8x8_t *)v15.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
  unint64_t v88 = ((unint64_t)*(unsigned __int16 *)(v7 + 476) << 47) | ((unint64_t)*(unsigned __int16 *)(v7 + 474) << 15) | v12 | ((unint64_t)(v15.i8[0] | v15.i8[4]) << 32);
  if (*(_DWORD *)(v7 + 480))
  {
    int v16 = 2;
    goto LABEL_78;
  }
  uint64_t v84 = v4;
  uint64_t v35 = 0;
  uint64_t v36 = v7 + 456;
  int v37 = 2;
  do
  {
    if (*(_WORD *)(v36 + 2 * v35)) {
      gleGenTokenForAttachment(v1, v7 + 40, (unint64_t *)&__s1 + v37++, v35 + 20, *(unsigned __int16 *)(v36 + 2 * v35) - 36064);
    }
    ++v35;
  }
  while (v35 != 8);
  uint64_t v2 = v13;
  if (!v13[12].i8[8] && !v13[12].i8[10]) {
    goto LABEL_54;
  }
  uint64_t v38 = *(void *)(v1 + 28960);
  if (!v38)
  {
    if (!*(unsigned char *)(*(void *)(v1 + 29032) + 56)) {
      goto LABEL_54;
    }
LABEL_61:
    int v39 = v37 + 1;
    *(&__s1 + v37) = 224;
    uint64_t v40 = *(void *)(v7 + 168);
    if (v40)
    {
      uint64_t v41 = v40 + 480 * *(unsigned int *)(v7 + 428) + 32 * *(unsigned int *)(v7 + 432);
      *(&__s1 + v37) = ((unint64_t)*(unsigned __int16 *)(v41 + 1078) << 47) | ((unint64_t)*(unsigned __int16 *)(v41 + 1076) << 15) | 0xE0;
    }
    goto LABEL_63;
  }
  if (*(unsigned char *)(v38 + 497)) {
    goto LABEL_61;
  }
LABEL_54:
  int v39 = v37;
LABEL_63:
  uint64_t v4 = v84;
  if ((*(unsigned char *)(v1 + 15644) & 1) == 0)
  {
LABEL_66:
    int v16 = v39;
    goto LABEL_78;
  }
  uint64_t v42 = *(void *)(v1 + 28960);
  if (v42)
  {
    if ((*(unsigned char *)(v42 + 497) & 2) == 0) {
      goto LABEL_66;
    }
  }
  else if (!*(unsigned char *)(*(void *)(v1 + 29032) + 57))
  {
    goto LABEL_66;
  }
  int v16 = v39 + 1;
  *(&__s1 + v39) = 232;
  uint64_t v46 = *(void *)(v7 + 184);
  if (v46)
  {
    uint64_t v47 = v46 + 480 * *(unsigned int *)(v7 + 444) + 32 * *(unsigned int *)(v7 + 448);
    *(&__s1 + v39) = ((unint64_t)*(unsigned __int16 *)(v47 + 1078) << 47) | ((unint64_t)*(unsigned __int16 *)(v47 + 1076) << 15) | 0xE8;
  }
LABEL_78:
  if (v2[12].i8[10])
  {
    uint64_t v48 = *(void *)(v1 + 28960);
    if (!v48)
    {
      if (!*(unsigned char *)(*(void *)(v1 + 29032) + 56)) {
        goto LABEL_82;
      }
      goto LABEL_81;
    }
    if (*(unsigned char *)(v48 + 497)) {
LABEL_81:
    }
      *(&__s1 + v16++) = 8;
  }
LABEL_82:
  if (v2[167].i8[4] && (v2[167].i8[5] || v2[167].i8[6] || v2[167].i8[7] || v2[167].i8[9]))
  {
    uint64_t v49 = *(void *)(v1 + 28960);
    if (v49)
    {
      if (*(unsigned __int8 *)(v49 + 478) < 2u) {
        goto LABEL_90;
      }
      goto LABEL_89;
    }
    if (*(unsigned char *)(*(void *)(v1 + 29032) + 58)) {
LABEL_89:
    }
      *(&__s1 + v16++) = (((v2[167].i8[6] & 1) << 13) | ((v2[167].i8[5] & 1) << 12)) & 0x3FFF | (unint64_t)(((v2[167].i8[7] & 1) << 14) & 0x7FFF) | ((unint64_t)(v2[167].i8[9] & 1) << 15) | (v2[167].i32[0] << 16) | 0x10;
  }
LABEL_90:
  if (v2->i8[2])
  {
    *(&__s1 + v16) = 24;
    int v50 = v2->u16[0];
    int v51 = (v50 << 29) | 0x18;
    if ((v50 - 512) >= 7) {
      int v51 = -536870888;
    }
    *((_DWORD *)&__s1 + 2 * v16) = v51;
    int v52 = v16 + 1;
  }
  else
  {
    int v52 = v16;
  }
  if (*(unsigned char *)(v1 + 15644))
  {
    uint64_t v53 = *(void *)(v1 + 28960);
    if (v53)
    {
      if ((*(unsigned char *)(v53 + 497) & 2) == 0) {
        goto LABEL_201;
      }
    }
    else if (!*(unsigned char *)(*(void *)(v1 + 29032) + 57))
    {
      goto LABEL_201;
    }
    unint64_t v54 = 917536;
    if (v2[37].u16[4] - 512 < 7) {
      unint64_t v54 = ((unint64_t)(unsigned __int16)(v2[37].i16[4] - 512) << 17) | 0x20;
    }
    unsigned int v55 = v2[37].u16[5];
    if (v55 > 0x8506)
    {
      if (v55 == 34055)
      {
        v54 |= 0x18000uLL;
      }
      else if (v55 == 34056)
      {
        v54 |= 0x1C000uLL;
      }
    }
    else
    {
      switch(v2[37].i16[5])
      {
        case 0x1E00:
          v54 |= 0x4000uLL;
          break;
        case 0x1E01:
          v54 |= 0x8000uLL;
          break;
        case 0x1E02:
          v54 |= 0xC000uLL;
          break;
        case 0x1E03:
          v54 |= 0x10000uLL;
          break;
        default:
          if (v55 == 5386) {
            v54 |= 0x14000uLL;
          }
          break;
      }
    }
    unsigned int v56 = v2[37].u16[6];
    if (v56 <= 0x1DFF)
    {
      if (v2[37].i16[6])
      {
        if (v56 == 5386) {
          unint64_t v54 = v54 & 0xFFFFFFFFFFFFC7FFLL | 0x2800;
        }
      }
      else
      {
        v54 &= 0xFFFFFFFFFFFFC7FFLL;
      }
    }
    else
    {
      switch(v2[37].i16[6])
      {
        case 0x1E00:
          unint64_t v54 = v54 & 0xFFFFFFFFFFFFC7FFLL | 0x800;
          break;
        case 0x1E01:
          unint64_t v54 = v54 & 0xFFFFFFFFFFFFC7FFLL | 0x1000;
          break;
        case 0x1E02:
          unint64_t v54 = v54 & 0xFFFFFFFFFFFFC7FFLL | 0x1800;
          break;
        case 0x1E03:
          unint64_t v54 = v54 & 0xFFFFFFFFFFFFC7FFLL | 0x2000;
          break;
        default:
          if (v56 == 34055)
          {
            unint64_t v54 = v54 & 0xFFFFFFFFFFFFC7FFLL | 0x3000;
          }
          else if (v56 == 34056)
          {
            v54 |= 0x3800uLL;
          }
          break;
      }
    }
    unsigned int v57 = v2[37].u16[7];
    if (v57 <= 0x1DFF)
    {
      if (v2[37].i16[7])
      {
        if (v57 == 5386) {
          unint64_t v54 = v54 & 0xFFFFFFFFFFFFF8FFLL | 0x500;
        }
      }
      else
      {
        v54 &= 0xFFFFFFFFFFFFF8FFLL;
      }
    }
    else
    {
      switch(v2[37].i16[7])
      {
        case 0x1E00:
          unint64_t v54 = v54 & 0xFFFFFFFFFFFFF8FFLL | 0x100;
          break;
        case 0x1E01:
          unint64_t v54 = v54 & 0xFFFFFFFFFFFFF8FFLL | 0x200;
          break;
        case 0x1E02:
          unint64_t v54 = v54 & 0xFFFFFFFFFFFFF8FFLL | 0x300;
          break;
        case 0x1E03:
          unint64_t v54 = v54 & 0xFFFFFFFFFFFFF8FFLL | 0x400;
          break;
        default:
          if (v57 == 34055)
          {
            unint64_t v54 = v54 & 0xFFFFFFFFFFFFF8FFLL | 0x600;
          }
          else if (v57 == 34056)
          {
            v54 |= 0x700uLL;
          }
          break;
      }
    }
    switch(*(_WORD *)(v3 + 16 * v4 + 8))
    {
      case 0x200:
        unint64_t v58 = v54 & 0xFFFFFFFF1FFFFFFFLL;
        break;
      case 0x201:
        unint64_t v58 = v54 & 0xFFFFFFFF1FFFFFFFLL | 0x20000000;
        break;
      case 0x202:
        unint64_t v58 = v54 & 0xFFFFFFFF1FFFFFFFLL | 0x40000000;
        break;
      case 0x203:
        unint64_t v58 = v54 & 0xFFFFFFFF1FFFFFFFLL | 0x60000000;
        break;
      case 0x204:
        unint64_t v58 = v54 & 0xFFFFFFFF1FFFFFFFLL | 0x80000000;
        break;
      case 0x205:
        unint64_t v58 = v54 & 0xFFFFFFFF1FFFFFFFLL | 0xA0000000;
        break;
      case 0x206:
        unint64_t v58 = v54 & 0xFFFFFFFF1FFFFFFFLL | 0xC0000000;
        break;
      default:
        unint64_t v58 = v54 | 0xE0000000;
        break;
    }
    *(&__s1 + v52) = v58;
    unsigned int v59 = *(unsigned __int16 *)(v3 + 16 * v4 + 10);
    if (v59 <= 0x1DFF)
    {
      if (*(_WORD *)(v3 + 16 * v4 + 10))
      {
        if (v59 != 5386) {
          goto LABEL_170;
        }
        unint64_t v58 = v58 & 0xFFFFFFFFE3FFFFFFLL | 0x14000000;
      }
      else
      {
        v58 &= 0xFFFFFFFFE3FFFFFFLL;
      }
    }
    else
    {
      switch(*(_WORD *)(v3 + 16 * v4 + 10))
      {
        case 0x1E00:
          unint64_t v58 = v58 & 0xFFFFFFFFE3FFFFFFLL | 0x4000000;
          break;
        case 0x1E01:
          unint64_t v58 = v58 & 0xFFFFFFFFE3FFFFFFLL | 0x8000000;
          break;
        case 0x1E02:
          unint64_t v58 = v58 & 0xFFFFFFFFE3FFFFFFLL | 0xC000000;
          break;
        case 0x1E03:
          unint64_t v58 = v58 & 0xFFFFFFFFE3FFFFFFLL | 0x10000000;
          break;
        default:
          if (v59 == 34055)
          {
            unint64_t v58 = v58 & 0xFFFFFFFFE3FFFFFFLL | 0x18000000;
          }
          else
          {
            if (v59 != 34056) {
              goto LABEL_170;
            }
            v58 |= 0x1C000000uLL;
          }
          break;
      }
    }
    *(&__s1 + v52) = v58;
LABEL_170:
    unsigned int v60 = *(unsigned __int16 *)(v3 + 16 * v4 + 12);
    if (v60 <= 0x1DFF)
    {
      if (*(_WORD *)(v3 + 16 * v4 + 12))
      {
        if (v60 != 5386) {
          goto LABEL_185;
        }
        unint64_t v58 = v58 & 0xFFFFFFFFFC7FFFFFLL | 0x2800000;
      }
      else
      {
        v58 &= 0xFFFFFFFFFC7FFFFFLL;
      }
    }
    else
    {
      switch(*(_WORD *)(v3 + 16 * v4 + 12))
      {
        case 0x1E00:
          unint64_t v58 = v58 & 0xFFFFFFFFFC7FFFFFLL | 0x800000;
          break;
        case 0x1E01:
          unint64_t v58 = v58 & 0xFFFFFFFFFC7FFFFFLL | 0x1000000;
          break;
        case 0x1E02:
          unint64_t v58 = v58 & 0xFFFFFFFFFC7FFFFFLL | 0x1800000;
          break;
        case 0x1E03:
          unint64_t v58 = v58 & 0xFFFFFFFFFC7FFFFFLL | 0x2000000;
          break;
        default:
          if (v60 == 34055)
          {
            unint64_t v58 = v58 & 0xFFFFFFFFFC7FFFFFLL | 0x3000000;
          }
          else
          {
            if (v60 != 34056) {
              goto LABEL_185;
            }
            v58 |= 0x3800000uLL;
          }
          break;
      }
    }
    *(&__s1 + v52) = v58;
LABEL_185:
    unsigned int v61 = *(unsigned __int16 *)(v3 + 16 * v4 + 14);
    if (v61 <= 0x1DFF)
    {
      if (*(_WORD *)(v3 + 16 * v4 + 14))
      {
        if (v61 != 5386)
        {
LABEL_200:
          ++v52;
          goto LABEL_201;
        }
        unint64_t v62 = v58 & 0xFFFFFFFFFF8FFFFFLL | 0x500000;
      }
      else
      {
        unint64_t v62 = v58 & 0xFFFFFFFFFF8FFFFFLL;
      }
    }
    else
    {
      switch(*(_WORD *)(v3 + 16 * v4 + 14))
      {
        case 0x1E00:
          unint64_t v62 = v58 & 0xFFFFFFFFFF8FFFFFLL | 0x100000;
          break;
        case 0x1E01:
          unint64_t v62 = v58 & 0xFFFFFFFFFF8FFFFFLL | 0x200000;
          break;
        case 0x1E02:
          unint64_t v62 = v58 & 0xFFFFFFFFFF8FFFFFLL | 0x300000;
          break;
        case 0x1E03:
          unint64_t v62 = v58 & 0xFFFFFFFFFF8FFFFFLL | 0x400000;
          break;
        default:
          if (v61 == 34055)
          {
            unint64_t v62 = v58 & 0xFFFFFFFFFF8FFFFFLL | 0x600000;
          }
          else
          {
            if (v61 != 34056) {
              goto LABEL_200;
            }
            unint64_t v62 = v58 | 0x700000;
          }
          break;
      }
    }
    *(&__s1 + v52) = v62;
    goto LABEL_200;
  }
LABEL_201:
  if (!v2[12].i8[8]) {
    goto LABEL_216;
  }
  uint64_t v63 = *(void *)(v1 + 28960);
  if (v63)
  {
    if ((*(unsigned char *)(v63 + 497) & 1) == 0) {
      goto LABEL_216;
    }
  }
  else if (!*(unsigned char *)(*(void *)(v1 + 29032) + 56))
  {
    goto LABEL_216;
  }
  __int8 v64 = v2[12].i8[9];
  unint64_t v65 = ((unint64_t)(v64 & 1) << 28) | 0x28;
  switch(v2[12].i16[2])
  {
    case 0x200:
      goto LABEL_215;
    case 0x201:
      uint64_t v66 = 536870952;
      goto LABEL_214;
    case 0x202:
      uint64_t v66 = 1073741864;
      goto LABEL_214;
    case 0x203:
      uint64_t v66 = 1610612776;
      goto LABEL_214;
    case 0x204:
      uint64_t v66 = 2147483688;
      goto LABEL_214;
    case 0x205:
      uint64_t v66 = 2684354600;
      goto LABEL_214;
    case 0x206:
      uint64_t v66 = 3221225512;
      goto LABEL_214;
    default:
      uint64_t v66 = 3758096424;
LABEL_214:
      unint64_t v65 = ((unint64_t)(v64 & 1) << 28) | v66;
LABEL_215:
      *(&__s1 + v52++) = v65;
      break;
  }
LABEL_216:
  if (v2[686].i32[3] < 1)
  {
    int v67 = v52;
  }
  else
  {
    *(&__s1 + v52) = 48;
    int v67 = v52 + 1;
  }
  unsigned int v68 = v2[7].u8[4];
  if (v2[7].i8[4] && !v2[19].i8[11])
  {
    uint64_t v69 = 0;
    float32x4_t v70 = &v2->u16[5];
    uint64_t v71 = 64;
    while (((v68 >> v69) & 1) == 0)
    {
LABEL_358:
      ++v69;
      v71 += 8;
      v70 += 6;
      if (v69 == 8) {
        goto LABEL_359;
      }
    }
    *(&__s1 + v67) = v71;
    unsigned __int16 v72 = v70[2] + 32761;
    unint64_t v73 = v71;
    if (v72 <= 4u)
    {
      unint64_t v73 = v71;
      if ((0x1Bu >> v72))
      {
        unint64_t v73 = v71 | qword_227DC2338[(__int16)v72];
        *(&__s1 + v67) = v73;
      }
    }
    switch(v70[1])
    {
      case 0x8006u:
        v73 &= 0xFFFFFFFFFFFFC7FFLL;
        goto LABEL_232;
      case 0x8007u:
        unint64_t v73 = v73 & 0xFFFFFFFFFFFFC7FFLL | 0x1800;
        goto LABEL_232;
      case 0x8008u:
        unint64_t v73 = v73 & 0xFFFFFFFFFFFFC7FFLL | 0x2000;
        goto LABEL_232;
      case 0x800Au:
        unint64_t v73 = v73 & 0xFFFFFFFFFFFFC7FFLL | 0x800;
        goto LABEL_232;
      case 0x800Bu:
        unint64_t v73 = v73 & 0xFFFFFFFFFFFFC7FFLL | 0x1000;
LABEL_232:
        *(&__s1 + v67) = v73;
        break;
      default:
        break;
    }
    unsigned int v74 = *v70;
    if (v74 > 0x8000)
    {
      if (*v70 <= 0x8588u)
      {
        switch(*v70)
        {
          case 0x8001u:
            unint64_t v73 = v73 & 0xFFFFFFE0FFFFFFFFLL | 0x800000000;
            goto LABEL_263;
          case 0x8002u:
            unint64_t v73 = v73 & 0xFFFFFFE0FFFFFFFFLL | 0x900000000;
            goto LABEL_263;
          case 0x8003u:
            unint64_t v73 = v73 & 0xFFFFFFE0FFFFFFFFLL | 0xA00000000;
            goto LABEL_263;
          case 0x8004u:
            unint64_t v73 = v73 & 0xFFFFFFE0FFFFFFFFLL | 0xB00000000;
            goto LABEL_263;
          default:
            break;
        }
LABEL_264:
        unsigned int v75 = *(v70 - 2);
        if (v75 > 0x8000)
        {
          if (*(v70 - 2) <= 0x8588u)
          {
            switch(*(v70 - 2))
            {
              case 0x8001u:
                unint64_t v73 = v73 & 0xFFFFFC1FFFFFFFFFLL | 0x10000000000;
                goto LABEL_294;
              case 0x8002u:
                unint64_t v73 = v73 & 0xFFFFFC1FFFFFFFFFLL | 0x12000000000;
                goto LABEL_294;
              case 0x8003u:
                unint64_t v73 = v73 & 0xFFFFFC1FFFFFFFFFLL | 0x14000000000;
                goto LABEL_294;
              case 0x8004u:
                unint64_t v73 = v73 & 0xFFFFFC1FFFFFFFFFLL | 0x16000000000;
                goto LABEL_294;
              default:
                break;
            }
LABEL_295:
            unsigned int v76 = *(v70 - 1);
            if (v76 > 0x8000)
            {
              if (*(v70 - 1) <= 0x8588u)
              {
                switch(*(v70 - 1))
                {
                  case 0x8001u:
                    unint64_t v73 = v73 & 0xFFFF83FFFFFFFFFFLL | 0x200000000000;
                    goto LABEL_325;
                  case 0x8002u:
                    unint64_t v73 = v73 & 0xFFFF83FFFFFFFFFFLL | 0x240000000000;
                    goto LABEL_325;
                  case 0x8003u:
                    unint64_t v73 = v73 & 0xFFFF83FFFFFFFFFFLL | 0x280000000000;
                    goto LABEL_325;
                  case 0x8004u:
                    unint64_t v73 = v73 & 0xFFFF83FFFFFFFFFFLL | 0x2C0000000000;
                    goto LABEL_325;
                  default:
                    break;
                }
LABEL_326:
                unsigned int v77 = *(v70 - 3);
                if (v77 <= 0x8000)
                {
                  switch(*(v70 - 3))
                  {
                    case 0x300u:
                      unint64_t v78 = v73 & 0xFFF07FFFFFFFFFFFLL | 0x1000000000000;
                      goto LABEL_356;
                    case 0x301u:
                      unint64_t v78 = v73 & 0xFFF07FFFFFFFFFFFLL | 0x1800000000000;
                      goto LABEL_356;
                    case 0x302u:
                      unint64_t v78 = v73 & 0xFFF07FFFFFFFFFFFLL | 0x2000000000000;
                      goto LABEL_356;
                    case 0x303u:
                      unint64_t v78 = v73 & 0xFFF07FFFFFFFFFFFLL | 0x2800000000000;
                      goto LABEL_356;
                    case 0x304u:
                      unint64_t v78 = v73 & 0xFFF07FFFFFFFFFFFLL | 0x3000000000000;
                      goto LABEL_356;
                    case 0x305u:
                      unint64_t v78 = v73 & 0xFFF07FFFFFFFFFFFLL | 0x3800000000000;
                      goto LABEL_356;
                    case 0x306u:
                      unint64_t v78 = v73 & 0xFFF07FFFFFFFFFFFLL | 0x6000000000000;
                      goto LABEL_356;
                    case 0x307u:
                      unint64_t v78 = v73 & 0xFFF07FFFFFFFFFFFLL | 0x6800000000000;
                      goto LABEL_356;
                    case 0x308u:
                      unint64_t v78 = v73 & 0xFFF07FFFFFFFFFFFLL | 0x7000000000000;
                      goto LABEL_356;
                    default:
                      if (*(v70 - 3))
                      {
                        if (v77 != 1) {
                          goto LABEL_357;
                        }
                        unint64_t v78 = v73 & 0xFFF07FFFFFFFFFFFLL | 0x800000000000;
                      }
                      else
                      {
                        unint64_t v78 = v73 & 0xFFF07FFFFFFFFFFFLL;
                      }
                      break;
                  }
                  goto LABEL_356;
                }
                if (*(v70 - 3) <= 0x8588u)
                {
                  switch(*(v70 - 3))
                  {
                    case 0x8001u:
                      unint64_t v78 = v73 & 0xFFF07FFFFFFFFFFFLL | 0x4000000000000;
                      goto LABEL_356;
                    case 0x8002u:
                      unint64_t v78 = v73 & 0xFFF07FFFFFFFFFFFLL | 0x4800000000000;
                      goto LABEL_356;
                    case 0x8003u:
                      unint64_t v78 = v73 & 0xFFF07FFFFFFFFFFFLL | 0x5000000000000;
                      goto LABEL_356;
                    case 0x8004u:
                      unint64_t v78 = v73 & 0xFFF07FFFFFFFFFFFLL | 0x5800000000000;
                      goto LABEL_356;
                    default:
                      goto LABEL_357;
                  }
                  goto LABEL_357;
                }
                if (*(v70 - 3) > 0x88F9u)
                {
                  if (v77 == 35066)
                  {
                    unint64_t v78 = v73 & 0xFFF07FFFFFFFFFFFLL | 0x8800000000000;
                    goto LABEL_356;
                  }
                  if (v77 == 35067)
                  {
                    unint64_t v78 = v73 & 0xFFF07FFFFFFFFFFFLL | 0x9000000000000;
                    goto LABEL_356;
                  }
                }
                else
                {
                  if (v77 == 34185)
                  {
                    unint64_t v78 = v73 & 0xFFF07FFFFFFFFFFFLL | 0x8000000000000;
                    goto LABEL_356;
                  }
                  if (v77 == 35065)
                  {
                    unint64_t v78 = v73 & 0xFFF07FFFFFFFFFFFLL | 0x7800000000000;
LABEL_356:
                    *(&__s1 + v67) = v78;
                  }
                }
LABEL_357:
                ++v67;
                goto LABEL_358;
              }
              if (*(v70 - 1) > 0x88F9u)
              {
                if (v76 == 35066)
                {
                  unint64_t v73 = v73 & 0xFFFF83FFFFFFFFFFLL | 0x440000000000;
                }
                else
                {
                  if (v76 != 35067) {
                    goto LABEL_326;
                  }
                  unint64_t v73 = v73 & 0xFFFF83FFFFFFFFFFLL | 0x480000000000;
                }
              }
              else if (v76 == 34185)
              {
                unint64_t v73 = v73 & 0xFFFF83FFFFFFFFFFLL | 0x400000000000;
              }
              else
              {
                if (v76 != 35065) {
                  goto LABEL_326;
                }
                unint64_t v73 = v73 & 0xFFFF83FFFFFFFFFFLL | 0x3C0000000000;
              }
            }
            else
            {
              switch(*(v70 - 1))
              {
                case 0x300u:
                  unint64_t v73 = v73 & 0xFFFF83FFFFFFFFFFLL | 0x80000000000;
                  break;
                case 0x301u:
                  unint64_t v73 = v73 & 0xFFFF83FFFFFFFFFFLL | 0xC0000000000;
                  break;
                case 0x302u:
                  unint64_t v73 = v73 & 0xFFFF83FFFFFFFFFFLL | 0x100000000000;
                  break;
                case 0x303u:
                  unint64_t v73 = v73 & 0xFFFF83FFFFFFFFFFLL | 0x140000000000;
                  break;
                case 0x304u:
                  unint64_t v73 = v73 & 0xFFFF83FFFFFFFFFFLL | 0x180000000000;
                  break;
                case 0x305u:
                  unint64_t v73 = v73 & 0xFFFF83FFFFFFFFFFLL | 0x1C0000000000;
                  break;
                case 0x306u:
                  unint64_t v73 = v73 & 0xFFFF83FFFFFFFFFFLL | 0x300000000000;
                  break;
                case 0x307u:
                  unint64_t v73 = v73 & 0xFFFF83FFFFFFFFFFLL | 0x340000000000;
                  break;
                case 0x308u:
                  unint64_t v73 = v73 & 0xFFFF83FFFFFFFFFFLL | 0x380000000000;
                  break;
                default:
                  if (*(v70 - 1))
                  {
                    if (v76 != 1) {
                      goto LABEL_326;
                    }
                    unint64_t v73 = v73 & 0xFFFF83FFFFFFFFFFLL | 0x40000000000;
                  }
                  else
                  {
                    v73 &= 0xFFFF83FFFFFFFFFFLL;
                  }
                  break;
              }
            }
LABEL_325:
            *(&__s1 + v67) = v73;
            goto LABEL_326;
          }
          if (*(v70 - 2) > 0x88F9u)
          {
            if (v75 == 35066)
            {
              unint64_t v73 = v73 & 0xFFFFFC1FFFFFFFFFLL | 0x22000000000;
            }
            else
            {
              if (v75 != 35067) {
                goto LABEL_295;
              }
              unint64_t v73 = v73 & 0xFFFFFC1FFFFFFFFFLL | 0x24000000000;
            }
          }
          else if (v75 == 34185)
          {
            unint64_t v73 = v73 & 0xFFFFFC1FFFFFFFFFLL | 0x20000000000;
          }
          else
          {
            if (v75 != 35065) {
              goto LABEL_295;
            }
            unint64_t v73 = v73 & 0xFFFFFC1FFFFFFFFFLL | 0x1E000000000;
          }
        }
        else
        {
          switch(*(v70 - 2))
          {
            case 0x300u:
              unint64_t v73 = v73 & 0xFFFFFC1FFFFFFFFFLL | 0x4000000000;
              break;
            case 0x301u:
              unint64_t v73 = v73 & 0xFFFFFC1FFFFFFFFFLL | 0x6000000000;
              break;
            case 0x302u:
              unint64_t v73 = v73 & 0xFFFFFC1FFFFFFFFFLL | 0x8000000000;
              break;
            case 0x303u:
              unint64_t v73 = v73 & 0xFFFFFC1FFFFFFFFFLL | 0xA000000000;
              break;
            case 0x304u:
              unint64_t v73 = v73 & 0xFFFFFC1FFFFFFFFFLL | 0xC000000000;
              break;
            case 0x305u:
              unint64_t v73 = v73 & 0xFFFFFC1FFFFFFFFFLL | 0xE000000000;
              break;
            case 0x306u:
              unint64_t v73 = v73 & 0xFFFFFC1FFFFFFFFFLL | 0x18000000000;
              break;
            case 0x307u:
              unint64_t v73 = v73 & 0xFFFFFC1FFFFFFFFFLL | 0x1A000000000;
              break;
            case 0x308u:
              unint64_t v73 = v73 & 0xFFFFFC1FFFFFFFFFLL | 0x1C000000000;
              break;
            default:
              if (*(v70 - 2))
              {
                if (v75 != 1) {
                  goto LABEL_295;
                }
                unint64_t v73 = v73 & 0xFFFFFC1FFFFFFFFFLL | 0x2000000000;
              }
              else
              {
                v73 &= 0xFFFFFC1FFFFFFFFFLL;
              }
              break;
          }
        }
LABEL_294:
        *(&__s1 + v67) = v73;
        goto LABEL_295;
      }
      if (*v70 > 0x88F9u)
      {
        if (v74 == 35066)
        {
          unint64_t v73 = v73 & 0xFFFFFFE0FFFFFFFFLL | 0x1100000000;
        }
        else
        {
          if (v74 != 35067) {
            goto LABEL_264;
          }
          unint64_t v73 = v73 & 0xFFFFFFE0FFFFFFFFLL | 0x1200000000;
        }
      }
      else if (v74 == 34185)
      {
        unint64_t v73 = v73 & 0xFFFFFFE0FFFFFFFFLL | 0x1000000000;
      }
      else
      {
        if (v74 != 35065) {
          goto LABEL_264;
        }
        unint64_t v73 = v73 & 0xFFFFFFE0FFFFFFFFLL | 0xF00000000;
      }
    }
    else
    {
      switch(*v70)
      {
        case 0x300u:
          unint64_t v73 = v73 & 0xFFFFFFE0FFFFFFFFLL | 0x200000000;
          break;
        case 0x301u:
          unint64_t v73 = v73 & 0xFFFFFFE0FFFFFFFFLL | 0x300000000;
          break;
        case 0x302u:
          unint64_t v73 = v73 & 0xFFFFFFE0FFFFFFFFLL | 0x400000000;
          break;
        case 0x303u:
          unint64_t v73 = v73 & 0xFFFFFFE0FFFFFFFFLL | 0x500000000;
          break;
        case 0x304u:
          unint64_t v73 = v73 & 0xFFFFFFE0FFFFFFFFLL | 0x600000000;
          break;
        case 0x305u:
          unint64_t v73 = v73 & 0xFFFFFFE0FFFFFFFFLL | 0x700000000;
          break;
        case 0x306u:
          unint64_t v73 = v73 & 0xFFFFFFE0FFFFFFFFLL | 0xC00000000;
          break;
        case 0x307u:
          unint64_t v73 = v73 & 0xFFFFFFE0FFFFFFFFLL | 0xD00000000;
          break;
        case 0x308u:
          unint64_t v73 = v73 & 0xFFFFFFE0FFFFFFFFLL | 0xE00000000;
          break;
        default:
          if (*v70)
          {
            if (v74 != 1) {
              goto LABEL_264;
            }
            unint64_t v73 = v73 & 0xFFFFFFE0FFFFFFFFLL | 0x100000000;
          }
          else
          {
            v73 &= 0xFFFFFFE0FFFFFFFFLL;
          }
          break;
      }
    }
LABEL_263:
    *(&__s1 + v67) = v73;
    goto LABEL_264;
  }
LABEL_359:
  if (v2[13].i8[12]) {
    *(&__s1 + v67++) = 128;
  }
  if (v2[19].i8[11])
  {
    *(&__s1 + v67) = 136;
    unsigned int v79 = v2[19].u16[4] - 5377;
    if (v79 <= 0xE) {
      *(&__s1 + v67) = qword_227DC22C0[(__int16)v79];
    }
    ++v67;
  }
  if (*(unsigned char *)(v86 + 15324) != 0xFF
    || *(_DWORD *)(v86 + 15324 + 4 * v4) != 255
    || !v2[21].i8[0]
    || v2[20].u8[12] != 255
    || v2[20].u8[13] != 255
    || v2[20].u8[14] != 255
    || v2[20].u8[15] != 255)
  {
    *(&__s1 + v67++) = ((unint64_t)v2[20].u8[14] << 40) | ((unint64_t)v2[20].u8[15] << 32) | ((unint64_t)v2[20].u8[13] << 48) | ((unint64_t)v2[20].u8[12] << 56) | (unsigned __int16)(*(_DWORD *)(v86 + 15324) << 8) | ((unint64_t)(v2[21].i8[0] == 1) << 24) | ((unint64_t)*(_DWORD *)(v86 + 15324 + 4 * v4) << 16) | 0x90;
  }
  LODWORD(__s1) = v67 - 1;
  HIDWORD(__s1) = 1;
  __int16 v80 = *(_DWORD **)(v86 + 17816);
  if (v80)
  {
    if (v67 == *v80 + 1)
    {
      uint64_t result = (void *)memcmp(&__s1, *(const void **)(v86 + 17816), 8 * v67);
      if (!result) {
        return result;
      }
    }
    free(v80);
  }
  uint64_t v82 = malloc_type_malloc(8 * v67, 0x577B5147uLL);
  if (!v82) {
    abort();
  }
  uint64_t v83 = v82;
  uint64_t result = memcpy(v82, &__s1, 8 * v67);
  *(void *)(v86 + 17816) = v83;
  v2[853].i32[0] = 0;
  *(_DWORD *)(v86 + 1524) |= 0x20000000u;
  return result;
}

uint64_t gleUpdateColorMode(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 28960);
  if (!v2)
  {
    uint64_t v7 = *(void *)(a1 + 29032);
    if (!*(unsigned char *)(v7 + 43))
    {
      int v6 = *(unsigned __int8 *)(v7 + 48);
      goto LABEL_8;
    }
    return 0x8000000;
  }
  if (*(_DWORD *)(v2 + 524)) {
    return 0x8000000;
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32500);
  int v12 = 0;
  uint64_t v4 = v2 + 88 * v3 + 560;
  uint64_t v5 = *(void *)(v4 + 8 * a2);
  if (v5)
  {
    (*(void (**)(void, uint64_t, void, void, uint64_t, int *))(*(void *)(a1 + 29496) + 376))(*(void *)(a1 + 29464), v5, *(unsigned int *)(v2 + 16 * a2 + 300), *(unsigned int *)(v2 + 16 * a2 + 304), 32860, &v12);
    int v6 = v12;
LABEL_8:
    BOOL v9 = v6 == 8;
    unsigned int v10 = 1024;
    unsigned int v11 = 0x8000;
    goto LABEL_9;
  }
  if (!*(void *)(v2 + 168))
  {
    BOOL v9 = *(void *)(v2 + 184) == 0;
    unsigned int v10 = 0x8000;
    unsigned int v11 = 1024;
LABEL_9:
    if (v9) {
      return v11;
    }
    else {
      return v10;
    }
  }
  (*(void (**)(void, void, void, void, uint64_t, int *))(*(void *)(a1 + 29496) + 376))(*(void *)(a1 + 29464), *(void *)(v4 + 64), *(unsigned int *)(v2 + 428), *(unsigned int *)(v2 + 432), 34890, &v12);
  if (v12 <= 16) {
    return 1024;
  }
  else {
    return 0x8000;
  }
}

uint64_t gleGenTokenForAttachment(uint64_t result, uint64_t a2, unint64_t *a3, char a4, int a5)
{
  unint64_t v5 = 8 * (a4 & 0x1Fu);
  *a3 = v5;
  uint64_t v6 = *(void *)(a2 + 16 * a5);
  if (v6)
  {
    uint64_t v8 = v6 + 480 * *(unsigned int *)(a2 + 16 * a5 + 260) + 32 * *(unsigned int *)(a2 + 16 * a5 + 264);
    uint64_t v9 = *(unsigned __int16 *)(v8 + 1076);
    uint64_t v10 = *(unsigned __int16 *)(v8 + 1078);
    if (a5 <= 7)
    {
      uint64_t v11 = result;
      int v12 = (unsigned char *)(result + 15178);
      uint64_t result = gleUpdateColorMode(result, a5);
      switch(result)
      {
        case 0x400:
          unint64_t v13 = *a3 & 0xFFFFFFFFFFFFF0FFLL | 0x600;
          break;
        case 0x8000:
          unint64_t v13 = *a3 & 0xFFFFFFFFFFFFF0FFLL | 0x500;
          break;
        case 0x8000000:
          unint64_t v13 = *a3 & 0xFFFFFFFFFFFFF0FFLL | 0x100;
          break;
        default:
          unint64_t v13 = *a3 & 0xFFFFFFFFFFFFF0FFLL;
          break;
      }
      *a3 = v13;
      unint64_t v14 = v13 & 0xFFFFFFFFFFFFDFFFLL | ((unint64_t)(*v12 & 1) << 13);
      *a3 = v14;
      uint64_t v15 = *(void *)(v11 + 28960);
      if (v15)
      {
        LODWORD(v15) = *(unsigned __int8 *)(v15 + 88 * *(unsigned __int8 *)(v11 + 32499) + 642);
        if (v15) {
          LOBYTE(v15) = *(unsigned __int16 *)(v6 + 1000) - 35905 < 0xF;
        }
      }
      else
      {
        uint64_t v15 = *(unsigned char *)(*(void *)(v11 + 29032) + 45) != 0;
      }
      BOOL v16 = ((v12[18] != 0) & v15) == 0;
      uint64_t v17 = 0x4000;
      if (v16) {
        uint64_t v17 = 0;
      }
      unint64_t v5 = v17 | v14 & 0xFFFFFFFFFFFFBFFFLL;
    }
    *a3 = v5 & 0x7FFF00007FFFLL | (v9 << 15) | (v10 << 47);
  }
  return result;
}

char *gleCreateSamplerHashObject(uint64_t a1, int a2)
{
  uint64_t v4 = (char *)malloc_type_malloc(0xF0uLL, 0x577B5147uLL);
  if (!v4) {
    abort();
  }
  unint64_t v5 = v4;
  *((_DWORD *)v4 + 4) = a2;
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 20) = 0xB00000001;
  *((void *)v4 + 4) = 0;
  *((_DWORD *)v4 + 7) = 0;
  uint64_t v6 = v4 + 184;
  gfxInitializeGLSamplerState();
  uint64_t v7 = *(void *)(a1 + 19296);
  if (*(unsigned char *)(v7 + 320))
  {
    unint64_t v8 = 0;
    uint64_t v9 = v5 + 40;
    uint64_t v10 = v7 + 360;
    uint64_t v11 = v5 + 136;
    do
    {
      gfxInitializeGLSamplerPluginState();
      (*(void (**)(void, char *, char *, char *))(*(void *)v10 + 1864))(*(void *)(v10 - 8), v9, v6, v11);
      ++v8;
      v9 += 8;
      v10 += 32;
      v11 += 4;
    }
    while (v8 < *(unsigned __int8 *)(v7 + 320));
  }
  return v5;
}

void gleFreeSamplerObject(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 320))
  {
    unint64_t v4 = 0;
    uint64_t v5 = a1 + 360;
    do
    {
      (*(void (**)(void, void))(*(void *)v5 + 1872))(*(void *)(v5 - 8), a2[v4++ + 5]);
      v5 += 32;
    }
    while (v4 < *(unsigned __int8 *)(a1 + 320));
  }

  free(a2);
}

void gleBindSamplerObject(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v5 = a1 + 28652;
  if (!a3)
  {
    uint64_t v9 = a1 + 8 * a2;
    uint64_t v8 = *(void *)(v9 + 23936);
    *(void *)(v9 + 23936) = 0;
    if (!v8) {
      return;
    }
    goto LABEL_6;
  }
  uint64_t v6 = gleLookupHashObject(*(void *)(a1 + 19296) + 232, a3);
  if (v6)
  {
    ++*((_DWORD *)v6 + 5);
    uint64_t v7 = a1 + 8 * a2;
    uint64_t v8 = *(void *)(v7 + 23936);
    *(void *)(v7 + 23936) = v6;
    if (!v8)
    {
LABEL_8:
      if (((*(void *)(a1 + 8 * (a2 >> 4) + 14976) >> (4 * (a2 & 0xF))) & 0xFuLL) <= 0xA)
      {
        *(_DWORD *)(a1 + 1536) |= 1 << (a2 & 0xF);
        *(_DWORD *)uint64_t v5 = 0;
        *(_DWORD *)(a1 + 1548) |= 0x8000000u;
      }
      return;
    }
LABEL_6:
    int v10 = *(_DWORD *)(v8 + 20) - 1;
    *(_DWORD *)(v8 + 20) = v10;
    if (!v10) {
      gleFreeSamplerObject(*(void *)(a1 + 19296), (void *)v8);
    }
    goto LABEL_8;
  }
  if (!*(_WORD *)(v5 + 1180)) {
    *(_WORD *)(v5 + 1180) = 1282;
  }
}

void gleFreeSamplerState(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  for (uint64_t i = 0; i != 256; i += 8)
  {
    uint64_t v3 = *(void *)(a1 + 23936 + i);
    if (v3)
    {
      int v4 = *(_DWORD *)(v3 + 20) - 1;
      *(_DWORD *)(v3 + 20) = v4;
      if (!v4) {
        gleFreeSamplerObject(*(void *)(a1 + 19296), (void *)v3);
      }
    }
  }
  uint64_t v5 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v5);
}

uint64_t gleSelectHitRecord(uint64_t result, float a2)
{
  unint64_t v2 = result + 19400;
  if (!*(unsigned char *)(result + 19937))
  {
    unsigned int v3 = (float)(a2 * 4295000000.0) + (int)(float)(a2 * 256.0);
    if (*(unsigned char *)(result + 19936))
    {
      int v4 = *(unsigned int **)(result + 19920);
      if (v3 < *v4) {
        *int v4 = v3;
      }
      if (v3 > v4[1]) {
        v4[1] = v3;
      }
    }
    else
    {
      uint64_t v5 = *(_DWORD **)(result + 19392);
      uint64_t v6 = *(void *)(result + 19384) + 4 * *(int *)(result + 19928);
      *(unsigned char *)(result + 19936) = 1;
      if (v5 != (_DWORD *)v6)
      {
        unint64_t v7 = *(void *)(result + 19912);
        _DWORD *v5 = (v7 - v2) >> 2;
        ++*(_DWORD *)(result + 19932);
        if (v5 + 1 != (_DWORD *)v6)
        {
          *(void *)(result + 19920) = v5 + 1;
          v5[1] = v3;
          if (v5 + 2 != (_DWORD *)v6)
          {
            uint64_t v8 = v5 + 3;
            v5[2] = v3;
            if (v2 >= v7)
            {
LABEL_15:
              *(void *)(result + 19392) = v8;
              return result;
            }
            uint64_t v9 = (int *)(result + 19400);
            while (v8 != (_DWORD *)v6)
            {
              int v10 = *v9++;
              *v8++ = v10;
              if ((unint64_t)v9 >= v7) {
                goto LABEL_15;
              }
            }
          }
        }
      }
      *(unsigned char *)(result + 19937) = 1;
      *(void *)(result + 19392) = v6;
    }
  }
  return result;
}

uint64_t gleSelectPointsPtr(uint64_t result, uint64_t *a2, int a3)
{
  if (a3 >= 1)
  {
    unsigned int v3 = a2;
    uint64_t v4 = result;
    unint64_t v5 = (unint64_t)&a2[a3];
    do
    {
      uint64_t v6 = *v3++;
      uint64_t result = gleSelectHitRecord(v4, *(float *)(v6 + 72));
    }
    while ((unint64_t)v3 < v5);
  }
  return result;
}

uint64_t gleSelectLinesPtr(uint64_t result, void *a2, int a3)
{
  unint64_t v3 = (unint64_t)&a2[a3 - 1];
  if (v3 > (unint64_t)a2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    do
    {
      gleSelectHitRecord(v5, *(float *)(*v4 + 72));
      uint64_t result = gleSelectHitRecord(v5, *(float *)(v4[1] + 72));
      v4 += 2;
    }
    while ((unint64_t)v4 < v3);
  }
  return result;
}

uint64_t gleSelectPolygonPtr(uint64_t result, uint64_t *a2, int a3)
{
  if (a3 >= 1)
  {
    unint64_t v3 = a2;
    uint64_t v4 = result;
    unint64_t v5 = (unint64_t)&a2[a3];
    do
    {
      uint64_t v6 = *v3++;
      uint64_t result = gleSelectHitRecord(v4, *(float *)(v6 + 72));
    }
    while ((unint64_t)v3 < v5);
  }
  return result;
}

uint64_t gleUpdateCurrentProgramState(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v69 = *MEMORY[0x263EF8340];
  unint64_t v2 = (BOOL *)(result + 32484);
  uint64_t v66 = (_DWORD *)(result + 24864);
  unsigned int v3 = *(_DWORD *)(result + 24864);
  uint64_t v4 = *(void *)(result + 24768);
  if (v4)
  {
    uint64_t result = gleUpdateUniformBufferCompleteness(result, v4 + 40);
    int v5 = *(_DWORD *)(v4 + 3696);
    if (v5 & 0x20 | result)
    {
      int v6 = 0;
      uint64_t v7 = 0;
      *(_DWORD *)(v4 + 3720) = 0;
      uint64_t v8 = (void *)(v1 + 33504);
      do
      {
        if (*(unsigned char *)(v4 + 168 + 704 * v7 + 44) && *(unsigned char *)(v4 + 3978) && !*(_DWORD *)(v4 + 3744))
        {
          v6 |= 1 << v7;
          *(_DWORD *)(v4 + 3720) = v6;
          uint64_t v11 = v2[12];
          if (v2[12])
          {
            int v12 = v8;
            uint64_t result = v4 + 40;
            do
            {
              uint64_t v13 = *(void *)result;
              result += 8;
              *int v12 = v13;
              v12 += 209;
              --v11;
            }
            while (v11);
          }
        }
        else if (v2[12])
        {
          unint64_t v9 = 0;
          uint64_t v10 = 1672 * v2[12];
          do
          {
            v8[v9 / 8] = 0;
            v9 += 1672;
          }
          while (v10 != v9);
        }
        ++v7;
        ++v8;
      }
      while (v7 != 5);
      uint64_t v30 = 0;
      *(_DWORD *)(v4 + 3696) = v5 & 0xFFFFFFDF;
      *uint64_t v66 = v6;
      uint64_t v31 = v1 + 24756;
      while (1)
      {
        int v32 = (1 << v30) & v3;
        if ((*v66 & (1 << v30)) != 0) {
          break;
        }
        if (v32)
        {
          unint64_t v33 = off_26DC2E770;
          if (!*(unsigned char *)(v31 + v30))
          {
            unint64_t v33 = off_26DC2E7C0;
            goto LABEL_42;
          }
LABEL_44:
          uint64_t result = ((uint64_t (*)(uint64_t))v33[v30])(v1);
        }
        if (++v30 == 5) {
          goto LABEL_46;
        }
      }
      unint64_t v33 = off_26DC2E770;
      if (!v32)
      {
        unint64_t v33 = off_26DC2E770;
        if (!*(unsigned char *)(v31 + v30))
        {
          unint64_t v33 = off_26DC2E798;
LABEL_42:
          if (*(void *)(v31 + 8 * v30 - 276)) {
            unint64_t v33 = off_26DC2E770;
          }
        }
      }
      goto LABEL_44;
    }
LABEL_46:
    if (*(_DWORD *)(v4 + 3744)) {
      char v29 = 0;
    }
    else {
      char v29 = *(unsigned char *)(v4 + 3978) != 0;
    }
    goto LABEL_49;
  }
  uint64_t v14 = *(void *)(result + 24776);
  if (v14)
  {
    uint64_t v15 = 0;
    int v16 = 0;
    uint64_t v64 = *(void *)(result + 24776);
    uint64_t v17 = v14 + 40;
    uint64_t v65 = result + 33504;
    do
    {
      uint64_t v18 = *(void *)(v17 + 8 * v15);
      if (v18)
      {
        uint64_t result = gleUpdateUniformBufferCompleteness(v1, v18 + 40);
        int v19 = *(_DWORD *)(v18 + 3696);
        if (v19 & 0x20 | result)
        {
          *(_DWORD *)(v18 + 3720) = 0;
          if (*(unsigned char *)(v18 + 3978))
          {
            int v20 = *(_DWORD *)(v18 + 3744);
            if (!v20)
            {
              uint64_t v21 = 0;
              int v22 = (void *)v65;
              do
              {
                if (*(unsigned char *)(v18 + 168 + 704 * v21 + 44))
                {
                  v20 |= 1 << v21;
                  *(_DWORD *)(v18 + 3720) = v20;
                  uint64_t v23 = v2[12];
                  if (v2[12])
                  {
                    uint64_t v24 = v22;
                    uint64_t v25 = (uint64_t *)(v18 + 40);
                    do
                    {
                      uint64_t v26 = *v25++;
                      *uint64_t v24 = v26;
                      v24 += 209;
                      --v23;
                    }
                    while (v23);
                  }
                }
                ++v21;
                ++v22;
              }
              while (v21 != 5);
            }
          }
          *(_DWORD *)(v18 + 3696) = v19 & 0xFFFFFFDF;
          int v16 = 1;
        }
      }
      ++v15;
    }
    while (v15 != 5);
    int v27 = *(_DWORD *)(v64 + 104);
    if (v27)
    {
      uint64_t v38 = 0;
      unint64_t v39 = 0;
      while (1)
      {
        uint64_t v40 = *(void *)(v17 + 8 * v39);
        if (v40) {
          break;
        }
        ++v39;
        v38 += 704;
        if (v39 == 5)
        {
          char v41 = 1;
          goto LABEL_86;
        }
      }
      if (*(unsigned char *)(v40 + 3978))
      {
        uint64_t v42 = (long long *)(v40 + v38);
        long long v43 = *(long long *)((char *)v42 + 568);
        v68[4] = *(long long *)((char *)v42 + 552);
        v68[5] = v43;
        long long v44 = *(long long *)((char *)v42 + 600);
        v68[6] = *(long long *)((char *)v42 + 584);
        v68[7] = v44;
        long long v45 = *(long long *)((char *)v42 + 504);
        v68[0] = *(long long *)((char *)v42 + 488);
        v68[1] = v45;
        long long v46 = *(long long *)((char *)v42 + 536);
        v68[2] = *(long long *)((char *)v42 + 520);
        v68[3] = v46;
        uint64_t v42 = (long long *)((char *)v42 + 616);
        long long v47 = *v42;
        long long v48 = v42[1];
        long long v49 = v42[3];
        v67[2] = v42[2];
        v67[3] = v49;
        char v41 = 1;
        v67[0] = v47;
        v67[1] = v48;
        if ((v39 & 0xFFFFFFFC) == 0)
        {
          uint64_t v50 = 3;
          if (v39 > 3) {
            uint64_t v50 = v39;
          }
          while (1)
          {
            uint64_t v51 = *(void *)(v17 + 8 * (v39 + 1));
            if (v51) {
              break;
            }
LABEL_82:
            v38 += 704;
            char v41 = 1;
            if (v39++ == v50) {
              goto LABEL_86;
            }
          }
          char v41 = *(unsigned char *)(v51 + 3978);
          if (v41)
          {
            uint64_t v52 = 0;
            uint64_t v53 = v51 + v38;
            while (1)
            {
              uint64_t result = *(unsigned int *)(v53 + 4 * v52 + 1192);
              if ((int)result >= 1)
              {
                uint64_t result = *(unsigned __int16 *)(v53 + 2 * v52 + 1320);
                if (*((int *)v68 + v52) >= 1 && result != *((unsigned __int16 *)v67 + v52)) {
                  goto LABEL_85;
                }
                *((_DWORD *)v68 + v52) = 1;
                *((_WORD *)v67 + v52) = result;
              }
              if (++v52 == 32) {
                goto LABEL_82;
              }
            }
          }
        }
      }
      else
      {
LABEL_85:
        char v41 = 0;
      }
LABEL_86:
      *(unsigned char *)(v64 + 101) = v41;
      *(_DWORD *)(v64 + 104) = v27 & 0xFFFFFFFE;
    }
    else if (!v16)
    {
      char v28 = 1;
LABEL_33:
      char v29 = *(unsigned char *)(v64 + 101) & v28;
      if ((~*v66 & 0x11) != 0) {
        char v29 = 0;
      }
LABEL_49:
      BOOL *v2 = v29;
      goto LABEL_50;
    }
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    *uint64_t v66 = 0;
    uint64_t v57 = v1 + 24756;
    char v28 = 1;
    do
    {
      uint64_t v58 = *(void *)(v17 + 8 * v55);
      int v59 = 1 << v55;
      if (v58 && (int v60 = *(_DWORD *)(v58 + 3720), (v60 & v59) != 0))
      {
        uint64_t v61 = v58 + 40;
        if (v58 + 40 == v56)
        {
          uint64_t v61 = v56;
        }
        else if (v56 && *(_DWORD *)(v56 + 3680) >> v55 || (v60 & (v59 - 1)) != 0)
        {
          char v28 = 0;
        }
        *v66 |= v59;
        if ((v59 & v3) != 0 || *(unsigned char *)(v57 + v55) || *(void *)(v57 + 8 * v55 - 276)) {
          uint64_t v63 = off_26DC2E770;
        }
        else {
          uint64_t v63 = off_26DC2E798;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v63[v55])(v1);
      }
      else
      {
        if ((v59 & v3) != 0)
        {
          unint64_t v62 = off_26DC2E770;
          if (!*(unsigned char *)(v57 + v55))
          {
            unint64_t v62 = off_26DC2E770;
            if (!*(void *)(v57 + 8 * v55 - 276)) {
              unint64_t v62 = off_26DC2E7C0;
            }
          }
          uint64_t result = ((uint64_t (*)(uint64_t))v62[v55])(v1);
        }
        if (v56)
        {
          if ((*(_DWORD *)(v56 + 3680) & v59) != 0) {
            char v28 = 0;
          }
          uint64_t v61 = v56;
        }
        else
        {
          uint64_t v61 = 0;
        }
      }
      ++v55;
      uint64_t v56 = v61;
    }
    while (v55 != 5);
    goto LABEL_33;
  }
  BOOL *v2 = *(unsigned __int8 *)(result + 32501) - 5 < 0xFFFFFFFE;
  *uint64_t v66 = 0;
  if (v3)
  {
    uint64_t v35 = 0;
    uint64_t v36 = result + 24756;
    do
    {
      if ((v3 >> v35))
      {
        int v37 = off_26DC2E770;
        if (!*(unsigned char *)(v36 + v35))
        {
          if (*(void *)(v36 + 8 * v35 - 276)) {
            int v37 = off_26DC2E770;
          }
          else {
            int v37 = off_26DC2E7C0;
          }
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v37[v35])(v1);
      }
      ++v35;
    }
    while (v35 != 5);
  }
LABEL_50:
  int v34 = *v66 ^ v3;
  if ((v34 & 0x19) != 0)
  {
    if ((v34 & 0x11) != 0)
    {
      uint64_t result = gleUpdateFogData(v1);
      int v34 = *v66 ^ v3;
    }
    if ((v34 & 9) != 0)
    {
      v66[947] = 0;
      *(_DWORD *)(v1 + 1548) |= 0x4000u;
    }
  }
  return result;
}

uint64_t gleUpdateUniformBufferCompleteness(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 3740)) {
    return 0;
  }
  uint64_t v3 = *(unsigned int *)(a2 + 3708);
  if (!v3) {
    return 0;
  }
  int v4 = *(_DWORD *)(a2 + 3656);
  if ((v4 & 0x10) == 0) {
    return 0;
  }
  uint64_t v5 = 0;
  unsigned int v6 = *(_DWORD *)(a2 + 3704) & 0xFFFFFFFB;
  *(_DWORD *)(a2 + 3704) = v6;
  uint64_t v7 = *(void *)(a2 + 3664);
  do
  {
    uint64_t v8 = *(void *)(v7 + 8 * v5);
    if (v8)
    {
      if (*(void *)(v8 + 152) >= (unint64_t)(16 * *(int *)(*(void *)(a2 + 3672) + 4 * v5))) {
        goto LABEL_11;
      }
      int v9 = 4;
    }
    else
    {
      int v9 = 1;
    }
    v6 |= v9;
    *(_DWORD *)(a2 + 3704) = v6;
LABEL_11:
    ++v5;
  }
  while (v3 != v5);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 32496);
  if (*(unsigned char *)(a1 + 32496))
  {
    uint64_t v11 = 0;
    uint64_t v12 = a2 + 784;
    do
    {
      uint64_t v13 = 0;
      *(_DWORD *)(a2 + 72 * v11 + 4040) |= 8u;
      do
      {
        *(_DWORD *)(v12 + v13) |= 8u;
        v13 += 704;
      }
      while (v13 != 3520);
      ++v11;
      v12 += 4;
    }
    while (v11 != v10);
  }
  *(_DWORD *)(a2 + 3656) = v4 & 0xFFFFFFEF;
  return 1;
}

uint64_t gleResetUniformBufferCachePointers(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v4 = result;
  uint64_t v5 = *(unsigned int *)(a2 + 3740);
  if (v5)
  {
    if ((int)v5 >= 1)
    {
      unsigned int v6 = (int *)(a2 + 3744);
      uint64_t v7 = (void *)(result + 192 * a3 + 24904);
      do
      {
        uint64_t v9 = *v6++;
        uint64_t v8 = v9;
        uint64_t v10 = *(void *)(*(void *)(result + 24888) + 8 * v9);
        if (v10) {
          *uint64_t v7 = *(void *)(v10 + 136) + *(void *)(result + 18056 + 16 * v8);
        }
        ++v7;
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    uint64_t v11 = *(unsigned int *)(a2 + 3708);
    if ((int)v11 >= 1)
    {
      uint64_t v12 = 0;
      uint64_t v13 = result + 192 * a3 + 24904;
      uint64_t v14 = 8 * v11;
      do
      {
        uint64_t v15 = *(void *)(*(void *)(a2 + 3664) + v12);
        if (*(void *)(v15 + 192)) {
          uint64_t result = gleSynchronizeBufferOnCurrentDevicesForRead(v4, v15 + 40);
        }
        *(void *)(v13 + v12) = *(void *)(v15 + 136);
        v12 += 8;
      }
      while (v14 != v12);
    }
  }
  return result;
}

char *gleResetSubroutineUniforms(char *result, uint64_t a2)
{
  uint64_t v3 = (unsigned int *)(result + 17756);
  uint64_t v4 = (void **)(result + 17776);
  uint64_t v5 = -3520;
  do
  {
    if (*(unsigned char *)(a2 + v5 + 3692))
    {
      unsigned int v6 = *(_DWORD *)(a2 + v5 + 3676);
      if (v6)
      {
        uint64_t v7 = *v4;
        if (v6 > *v3)
        {
          uint64_t v7 = malloc_type_realloc(v7, 4 * (int)v6, 0x4F7DB462uLL);
          if (!v7) {
            abort();
          }
          *uint64_t v4 = v7;
        }
        uint64_t result = (char *)memcpy(v7, *(const void **)(a2 + v5 + 3680), 4 * (int)v6);
      }
      *uint64_t v3 = v6;
    }
    ++v3;
    ++v4;
    v5 += 704;
  }
  while (v5);
  return result;
}

void gleUseProgramObject(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = (unsigned char *)(a1 + 32484);
  uint64_t v5 = (int *)(a1 + 24864);
  unsigned int v6 = *(unsigned int **)(a1 + 24768);
  if (a2)
  {
    uint64_t v7 = (uint64_t)(a2 + 10);
    ++a2[5];
    a2[924] |= 0x30u;
    if (a2[945] || a2[937])
    {
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1532) |= 0x20000000u;
    }
    gleResetSubroutineUniforms((char *)a1, v7);
  }
  else
  {
    uint64_t v8 = *(unsigned __int8 *)(a1 + 32496);
    if (*(unsigned char *)(a1 + 32496))
    {
      uint64_t v9 = a1 + 33504;
      do
      {
        *(void *)(v9 + 32) = 0;
        *(_OWORD *)uint64_t v9 = 0uLL;
        *(_OWORD *)(v9 + 16) = 0uLL;
        v9 += 1672;
        --v8;
      }
      while (v8);
    }
  }
  *(void *)(a1 + 24768) = a2;
  if (v6)
  {
    if (v6[945] || v6[937])
    {
      v5[947] = 0;
      *(_DWORD *)(a1 + 1532) |= 0x20000000u;
    }
    int v10 = *v5;
    if (*v5)
    {
      uint64_t v11 = *(void *)(a1 + 24224);
      if (v11)
      {
        __int16 v12 = *(_WORD *)(v11 + 2) - 1;
        *(_WORD *)(v11 + 2) = v12;
        if (!v12) {
          MEMORY[0x22A686880]();
        }
        *(void *)(a1 + 24224) = 0;
        int v10 = *v5;
      }
    }
    if ((v10 & 2) != 0)
    {
      uint64_t v13 = *(void *)(a1 + 24280);
      if (v13)
      {
        __int16 v14 = *(_WORD *)(v13 + 2) - 1;
        *(_WORD *)(v13 + 2) = v14;
        if (!v14) {
          MEMORY[0x22A686880]();
        }
        *(void *)(a1 + 24280) = 0;
        int v10 = *v5;
      }
    }
    if ((v10 & 4) != 0)
    {
      uint64_t v15 = *(void *)(a1 + 24328);
      if (v15)
      {
        __int16 v16 = *(_WORD *)(v15 + 2) - 1;
        *(_WORD *)(v15 + 2) = v16;
        if (!v16) {
          MEMORY[0x22A686880]();
        }
        *(void *)(a1 + 24328) = 0;
        int v10 = *v5;
      }
    }
    if ((v10 & 8) != 0)
    {
      uint64_t v17 = *(void *)(a1 + 24376);
      if (v17)
      {
        __int16 v18 = *(_WORD *)(v17 + 2) - 1;
        *(_WORD *)(v17 + 2) = v18;
        if (!v18) {
          MEMORY[0x22A686880]();
        }
        *(void *)(a1 + 24376) = 0;
      }
    }
  }
  if (a2 || (uint64_t v19 = *(void *)(a1 + 24776)) == 0)
  {
    gleUpdateCurrentProgramState(a1);
    if (v6) {
      goto LABEL_38;
    }
  }
  else
  {
    gleBindProgramPipelineObject(a1, v19);
    if (v6)
    {
LABEL_38:
      int v20 = v6[5] - 1;
      v6[5] = v20;
      if (v20 == 1) {
        gleUnbindDeleteHashNameAndObject(a1, (void (**)(void, uint64_t))(*(void *)(a1 + 19296) + 168), (void (*)(uint64_t, uint64_t))gleUnbindProgramObject, v6[4]);
      }
      else {
        gleUnbindProgramObject(a1, (uint64_t)v6);
      }
    }
  }
  v5[947] = 0;
  *(_DWORD *)(a1 + 1532) |= 0x10000000u;
  unsigned int v21 = *(_DWORD *)(a1 + 1540) & 0xEFFFFFFF;
  *(_DWORD *)(a1 + 1540) = v21;
  if (!*v4) {
    *(_DWORD *)(a1 + 1540) = v21 | 0x60000000;
  }
}

uint64_t gleUnbindProgramObject(uint64_t result, uint64_t a2)
{
  unint64_t v2 = (unsigned __int8 *)(result + 32496);
  if (*(unsigned char *)(result + 32496))
  {
    uint64_t v3 = result;
    unint64_t v4 = 0;
    uint64_t v5 = a2 + 4016;
    do
    {
      uint64_t v6 = 0;
      unint64_t v7 = v3 + 1672 * v4;
      uint64_t v8 = (void *)(v7 + 32512);
      unint64_t v9 = v7 + 34160;
      do
      {
        if (*(void *)(v5 + v6)) {
          uint64_t result = (*(uint64_t (**)(void))(*(void *)v9 + 1648))(*v8);
        }
        v6 += 8;
      }
      while (v6 != 40);
      ++v4;
      v5 += 72;
    }
    while (v4 < *v2);
  }
  return result;
}

void gleInitShaderProgramState(uint64_t a1)
{
  *(_OWORD *)(a1 + 24848) = 0u;
  *(_OWORD *)(a1 + 24832) = 0u;
  *(_OWORD *)(a1 + 24816) = 0u;
  *(_OWORD *)(a1 + 24800) = 0u;
  *(_OWORD *)(a1 + 24784) = 0u;
  *(_OWORD *)(a1 + 24768) = 0u;
  *(_DWORD *)(a1 + 24864) = 0;
  bzero((void *)(a1 + 24872), 0x3E0uLL);
  uint64_t v2 = 0;
  uint64_t v3 = *(unsigned __int8 *)(a1 + 32496);
  unint64_t v4 = (void *)(a1 + 33704);
  do
  {
    uint64_t v5 = (void *)(a1 + 18056 + 16 * v2);
    void *v5 = 0;
    v5[1] = 0;
    if (v3)
    {
      uint64_t v6 = v3;
      unint64_t v7 = v4;
      do
      {
        *unint64_t v7 = 0;
        v7 += 209;
        --v6;
      }
      while (v6);
    }
    ++v2;
    ++v4;
  }
  while (v2 != 24);
}

void gleFreeShaderProgramState(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v2 = *(void *)(a1 + 24768);
  if (v2)
  {
    int v3 = *(_DWORD *)(v2 + 20) - 1;
    *(_DWORD *)(v2 + 20) = v3;
    if (v3 == 1) {
      gleUnbindDeleteHashNameAndObject(a1, (void (**)(void, uint64_t))(*(void *)(a1 + 19296) + 168), (void (*)(uint64_t, uint64_t))gleUnbindProgramObject, *(_DWORD *)(v2 + 16));
    }
    else {
      gleUnbindProgramObject(a1, v2);
    }
  }
  uint64_t v4 = *(void *)(a1 + 24896);
  if (v4)
  {
    unsigned int v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 24888) + 8 * v5);
      if (v6)
      {
        int v7 = *(_DWORD *)(v6 + 20) - 1;
        *(_DWORD *)(v6 + 20) = v7;
        if (!v7) {
          gleUnbindAndFreeBufferObject(a1, (void *)v6);
        }
      }
      uint64_t v8 = 1 << v5++;
      v4 &= ~v8;
    }
    while (v4);
  }
  *(void *)(a1 + 24896) = 0;
  free(*(void **)(a1 + 24880));
  free(*(void **)(a1 + 24872));
  free(*(void **)(a1 + 24888));
  unint64_t v9 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v9);
}

uint64_t gleSetResource(uint64_t result, _DWORD *a2)
{
  uint64_t v2 = *(void *)(result + 29032);
  int v3 = *(_DWORD *)(v2 + 344) >> 2;
  *a2 = 16;
  a2[1] = v3;
  int v4 = *(_DWORD *)(v2 + 448) >> 2;
  int v5 = *(unsigned __int8 *)(v2 + 21);
  a2[6] = *(unsigned __int16 *)(v2 + 332) >> 2;
  a2[7] = v5;
  int v6 = *(unsigned __int16 *)(v2 + 156);
  a2[2] = v4;
  a2[3] = v6;
  int v7 = *(unsigned __int16 *)(v2 + 154);
  LODWORD(v2) = *(unsigned __int8 *)(v2 + 175);
  a2[4] = v7;
  a2[5] = v2;
  return result;
}

uint64_t gleCreateShaderObjectNamed(uint64_t a1, int a2, uint64_t a3)
{
  ShInitialize();
  int v6 = malloc_type_malloc(0x50uLL, 0x577B5147uLL);
  if (!v6) {
    abort();
  }
  uint64_t v7 = (uint64_t)v6;
  if (!a3) {
    a3 = gleGenHashNames(*(void *)(a1 + 19296) + 168, 1u);
  }
  *(_DWORD *)(v7 + 16) = a3;
  *(void *)uint64_t v7 = 0;
  *(void *)(v7 + 20) = 0x700000002;
  *(unsigned char *)(v7 + 64) = 0;
  *(void *)(v7 + 36) = 0;
  *(void *)(v7 + 28) = 0;
  *(_DWORD *)(v7 + 44) = 0;
  *(_DWORD *)(v7 + 68) = a2;
  *(void *)(v7 + 48) = 0;
  *(void *)(v7 + 56) = 0;
  *(_WORD *)(v7 + 65) = 0;
  *(void *)(v7 + 72) = 0;
  gleAddHashNameAndObject(a1, *(void *)(a1 + 19296) + 168, v7);
  return a3;
}

uint64_t gleCreateShaderObject(uint64_t a1, int a2)
{
  return gleCreateShaderObjectNamed(a1, a2, 0);
}

uint64_t gleCreateProgramObjectNamed(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = a1 + 32492;
  ShInitialize();
  int v5 = (char *)malloc_type_malloc(72 * *(unsigned __int8 *)(v4 + 4) + 4016, 0x577B5147uLL);
  if (!v5) {
    abort();
  }
  int v6 = v5;
  uint64_t v7 = v5 + 3892;
  __CFSetLastAllocationEventName();
  if (!a2) {
    a2 = gleGenHashNames(*(void *)(a1 + 19296) + 168, 1u);
  }
  unsigned int v28 = a2;
  *((_DWORD *)v6 + 4) = a2;
  *(void *)(v6 + 20) = 0x800000002;
  *((void *)v6 + 4) = 0;
  *((_DWORD *)v6 + 7) = 0;
  v6[3979] = 0;
  *((void *)v6 + 17) = 0;
  *((_DWORD *)v6 + 981) = 0;
  *(_OWORD *)((char *)v7 + 40) = xmmword_227DC2390;
  *((_DWORD *)v6 + 987) = 5;
  uint64_t v25 = v6 + 3720;
  *uint64_t v7 = xmmword_227DC23A0;
  *((void *)v6 + 485) = 0x901020200070000;
  v6[3888] = 0;
  *((_DWORD *)v6 + 993) = 0;
  *(_DWORD *)(v6 + 3975) = 0;
  *((_DWORD *)v6 + 995) = 0;
  uint64_t v8 = ShConstructLinker();
  v6[3976] = 0;
  *((void *)v6 + 19) = v8;
  *((void *)v6 + 20) = 0;
  *((_DWORD *)v6 + 982) = 0;
  *((_DWORD *)v6 + 924) = 48;
  *((_DWORD *)v6 + 940) = 0;
  *((void *)v6 + 469) = 0;
  *((_DWORD *)v6 + 944) = 0;
  *((void *)v6 + 471) = 0;
  v7[4] = xmmword_227DC23B0;
  *((void *)v6 + 465) = 0;
  *((void *)v6 + 467) = 0;
  *((void *)v6 + 466) = 0;
  *((void *)v6 + 500) = 0;
  *((void *)v6 + 468) = 0;
  *((void *)v6 + 464) = 0;
  *((void *)v6 + 463) = 0;
  uint64_t v9 = *(unsigned __int8 *)(v4 + 4);
  if (*(unsigned char *)(v4 + 4))
  {
    int v10 = v6 + 4056;
    do
    {
      *(void *)int v10 = 0;
      *((void *)v10 + 1) = 0;
      *((_DWORD *)v10 + 6) = 0;
      *((void *)v10 + 2) = 0;
      v10 += 72;
      --v9;
    }
    while (v9);
  }
  uint64_t v11 = 0;
  *((void *)v6 + 489) = 0;
  __int16 v12 = v6 + 40;
  *((_DWORD *)v6 + 980) = 0;
  uint64_t v13 = v6 + 4016;
  *((_DWORD *)v6 + 969) = 0;
  *(_OWORD *)(v6 + 3780) = 0uLL;
  *(_OWORD *)(v6 + 3796) = 0uLL;
  *(_OWORD *)(v6 + 3812) = 0uLL;
  *(_OWORD *)(v6 + 3828) = 0uLL;
  uint64_t v26 = a1;
  uint64_t v27 = (uint64_t)v6;
  uint64_t v30 = v6 + 824;
  uint64_t v31 = v6 + 168;
  *(_OWORD *)(v6 + 3844) = 0uLL;
  char v29 = (void *)(a1 + 32520);
  *(_OWORD *)(v6 + 3860) = 0uLL;
  do
  {
    while (1)
    {
      __int16 v14 = &v31[704 * v11];
      bzero(v14, 0x2C0uLL);
      v14[562] = v11;
      *((_WORD *)v14 + 280) = gle_shader_targets[v11];
      if (*(unsigned char *)(v4 + 4)) {
        break;
      }
      if (++v11 == 5)
      {
        v12[4] = 0u;
        v12[5] = 0u;
        v12[2] = 0u;
        v12[3] = 0u;
        *__int16 v12 = 0u;
        v12[1] = 0u;
        uint64_t v21 = v26;
        goto LABEL_18;
      }
    }
    unint64_t v15 = 0;
    __int16 v16 = v14 + 560;
    uint64_t v17 = &v13[8 * v11];
    __int16 v18 = v29;
    uint64_t v19 = &v30[704 * v11];
    do
    {
      *(_DWORD *)uint64_t v19 = 1;
      v19 += 4;
      (*(void (**)(void, char *, char *))(v18[205] + 1624))(*v18, v17, v16);
      ++v15;
      unint64_t v20 = *(unsigned __int8 *)(v4 + 4);
      v18 += 209;
      v17 += 72;
    }
    while (v15 < v20);
    ++v11;
  }
  while (v11 != 5);
  v12[4] = 0u;
  v12[5] = 0u;
  v12[2] = 0u;
  v12[3] = 0u;
  *__int16 v12 = 0u;
  v12[1] = 0u;
  uint64_t v21 = v26;
  if (v20)
  {
    unint64_t v22 = 0;
    uint64_t v23 = (void *)(v26 + 32520);
    do
    {
      (*(void (**)(void, _OWORD *, char *, char *))(v23[205] + 1664))(*v23, v12, v25, v13);
      ++v22;
      v13 += 72;
      __int16 v12 = (_OWORD *)((char *)v12 + 8);
      v23 += 209;
    }
    while (v22 < *(unsigned __int8 *)(v4 + 4));
  }
LABEL_18:
  gleAddHashNameAndObject(v21, *(void *)(v21 + 19296) + 168, v27);
  return v28;
}

uint64_t gleCreateProgramObject(uint64_t a1)
{
  return gleCreateProgramObjectNamed(a1, 0);
}

void gleDetachShaderObjectIterFunc(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 24) != 8)
  {
    if (*(unsigned char *)(a2 + 64)) {
      return;
    }
    goto LABEL_12;
  }
  int v3 = *(_DWORD *)(a2 + 3928);
  if (v3 >= 1)
  {
    for (uint64_t i = 0; i < v3; ++i)
    {
      uint64_t v5 = *(void *)(*(void *)(a2 + 160) + 8 * i);
      if (v5)
      {
        --*(_DWORD *)(v5 + 20);
        int v3 = *(_DWORD *)(a2 + 3928);
      }
    }
  }
  int v6 = *(void **)(a2 + 160);
  if (v6) {
    free(v6);
  }
  *(void *)(a2 + 160) = 0;
  *(_DWORD *)(a2 + 3928) = 0;
  if (!*(unsigned char *)(a2 + 3979)) {
LABEL_12:
  }
    --*(_DWORD *)(a2 + 20);
}

void gleFreeShaderProgramObject(uint64_t a1, void *a2)
{
  if (*((_DWORD *)a2 + 6) == 7) {
    gleFreeShaderObject(a1, a2);
  }
  else {
    gleFreeProgramObject(a1, (uint64_t)a2);
  }
}

void gleFreeShaderObject(int a1, void *a2)
{
  int v3 = (void *)a2[4];
  if (v3)
  {
    free(v3);
    a2[4] = 0;
  }
  uint64_t v4 = (void *)a2[5];
  if (v4)
  {
    free(v4);
    a2[5] = 0;
  }
  *((_DWORD *)a2 + 14) = 0;
  uint64_t v5 = (void *)a2[6];
  if (v5) {
    free(v5);
  }
  if (a2[9]) {
    ShDestruct();
  }

  free(a2);
}

void gleFreeProgramObject(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 320))
  {
    unint64_t v4 = 0;
    uint64_t v5 = a2 + 4016;
    do
    {
      uint64_t v6 = 0;
      unint64_t v7 = a1 + 32 * v4;
      uint64_t v8 = (void *)(v7 + 352);
      unint64_t v9 = v7 + 360;
      do
      {
        if (*(void *)(v5 + v6))
        {
          (*(void (**)(void))(*(void *)v9 + 1656))(*v8);
          *(void *)(v5 + v6) = 0;
        }
        v6 += 8;
      }
      while (v6 != 40);
      if (*(void *)(a2 + 40 + 8 * v4)) {
        (*(void (**)(void))(*(void *)v9 + 1672))(*v8);
      }
      ++v4;
      v5 += 72;
    }
    while (v4 < *(unsigned __int8 *)(a1 + 320));
  }
  int v10 = *(void **)(a2 + 136);
  if (v10) {
    free(v10);
  }
  uint64_t v11 = 0;
  *(void *)(a2 + 136) = 0;
  *(_DWORD *)(a2 + 3924) = 0;
  do
  {
    free(*(void **)(a2 + v11 + 168));
    if (*(void *)(a2 + v11 + 736)) {
      MEMORY[0x22A686880]();
    }
    __int16 v12 = *(void **)(a2 + v11 + 200);
    if (v12) {
      free(v12);
    }
    uint64_t v13 = *(void *)(a2 + v11 + 680);
    if (v13)
    {
      __int16 v14 = *(_WORD *)(v13 + 2) - 1;
      *(_WORD *)(v13 + 2) = v14;
      if (!v14) {
        MEMORY[0x22A686880]();
      }
    }
    v11 += 704;
  }
  while (v11 != 3520);
  int v15 = *(_DWORD *)(a2 + 3928);
  if (v15 >= 1)
  {
    for (uint64_t i = 0; i < v15; ++i)
    {
      uint64_t v17 = *(void *)(*(void *)(a2 + 160) + 8 * i);
      if (v17)
      {
        int v18 = *(_DWORD *)(v17 + 20) - 1;
        *(_DWORD *)(v17 + 20) = v18;
        if (v18 == 1)
        {
          gleDeleteHashNameAndObject(a1, (void (**)(uint64_t, uint64_t))(a1 + 168), *(_DWORD *)(v17 + 16));
          int v15 = *(_DWORD *)(a2 + 3928);
        }
      }
    }
  }
  uint64_t v19 = *(void **)(a2 + 160);
  if (v19) {
    free(v19);
  }
  if (*(void *)(a2 + 152)) {
    ShDestruct();
  }
  if (*(_DWORD *)(a2 + 3760))
  {
    *(_DWORD *)(a2 + 3760) = 0;
    free(*(void **)(a2 + 3752));
    *(void *)(a2 + 3752) = 0;
    if (*(unsigned char *)(a1 + 320))
    {
      unint64_t v20 = 0;
      uint64_t v21 = a2 + 4064;
      do
      {
        free(*(void **)v21);
        ++v20;
        *(void *)uint64_t v21 = 0;
        *(void *)(v21 + 8) = 0;
        v21 += 72;
      }
      while (v20 < *(unsigned __int8 *)(a1 + 320));
    }
  }
  if (*(_DWORD *)(a2 + 3776))
  {
    *(_DWORD *)(a2 + 3776) = 0;
    free(*(void **)(a2 + 3768));
    *(void *)(a2 + 3768) = 0;
  }
  unint64_t v22 = *(void **)(a2 + 4000);
  if (v22)
  {
    free(v22);
    *(void *)(a2 + 4000) = 0;
  }
  unint64_t v23 = *(unsigned int *)(a2 + 3748);
  if (v23)
  {
    for (unint64_t j = 0; j < v23; ++j)
    {
      uint64_t v25 = *(void *)(*(void *)(a2 + 3704) + 8 * j);
      if (v25)
      {
        int v26 = *(_DWORD *)(v25 + 20) - 1;
        *(_DWORD *)(v25 + 20) = v26;
        if (!v26)
        {
          gleFreeBufferObject(a1, (void *)v25);
          unint64_t v23 = *(unsigned int *)(a2 + 3748);
        }
      }
    }
    if (*(unsigned char *)(a1 + 320))
    {
      unint64_t v27 = 0;
      unsigned int v28 = (void **)(a2 + 4056);
      do
      {
        char v29 = *v28;
        v28 += 9;
        free(v29);
        ++v27;
      }
      while (v27 < *(unsigned __int8 *)(a1 + 320));
    }
    uint64_t v30 = *(void **)(a2 + 3704);
    if (v30) {
      free(v30);
    }
    *(void *)(a2 + 3712) = 0;
  }
  uint64_t v31 = *(void **)(a2 + 32);
  if (v31) {
    free(v31);
  }

  free((void *)a2);
}

uint64_t gleShaderTargetExtractor(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 24) == 7) {
    return 35656;
  }
  else {
    return 35648;
  }
}

uint64_t gleGetObjectParameter(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = 1280;
  if (a3 > 35711)
  {
    if (a3 <= 35957)
    {
      switch(a3)
      {
        case 35712:
          int v6 = *(_DWORD *)(a2 + 24);
          if ((v6 - 7) > 1) {
            return 1282;
          }
          if (v6 == 7) {
            int MaxTransformFeedbackVaryingLength = *(unsigned __int8 *)(a2 + 64);
          }
          else {
            int MaxTransformFeedbackVaryingLength = *(unsigned __int8 *)(a2 + 3979);
          }
          goto LABEL_68;
        case 35713:
          if (*(_DWORD *)(a2 + 24) != 7) {
            return result;
          }
          int MaxTransformFeedbackVaryingLength = *(unsigned __int8 *)(a2 + 66);
          break;
        case 35714:
          if (*(_DWORD *)(a2 + 24) != 8) {
            return 1282;
          }
          int MaxTransformFeedbackVaryingLength = *(unsigned __int8 *)(a2 + 3976);
          goto LABEL_68;
        case 35715:
          if (*(_DWORD *)(a2 + 24) != 8) {
            return 1282;
          }
          int MaxTransformFeedbackVaryingLength = *(unsigned __int8 *)(a2 + 3977);
          goto LABEL_68;
        case 35716:
          int v8 = *(_DWORD *)(a2 + 24);
          if ((v8 - 7) > 1) {
            return 1282;
          }
          if (v8 == 7) {
            int v9 = *(_DWORD *)(a2 + 56);
          }
          else {
            int v9 = *(_DWORD *)(a2 + 3924);
          }
          goto LABEL_65;
        case 35717:
          if (*(_DWORD *)(a2 + 24) != 8) {
            return 1282;
          }
          int MaxTransformFeedbackVaryingLength = *(_DWORD *)(a2 + 3928);
          goto LABEL_68;
        case 35718:
          if (*(_DWORD *)(a2 + 24) != 8) {
            return 1282;
          }
          int MaxTransformFeedbackVaryingLength = *(_DWORD *)(a2 + 3916);
          goto LABEL_68;
        case 35719:
          if (*(_DWORD *)(a2 + 24) != 8) {
            return 1282;
          }
          int MaxTransformFeedbackVaryingLength = *(_DWORD *)(a2 + 3920);
          goto LABEL_68;
        case 35720:
          if (*(_DWORD *)(a2 + 24) != 7) {
            return result;
          }
          int v9 = *(_DWORD *)(a2 + 60);
LABEL_65:
          if (v9) {
            int MaxTransformFeedbackVaryingLength = v9 + 1;
          }
          else {
            int MaxTransformFeedbackVaryingLength = 0;
          }
          break;
        case 35721:
          if (*(_DWORD *)(a2 + 24) != 8) {
            return 1282;
          }
          int MaxTransformFeedbackVaryingLength = *(_DWORD *)(a2 + 3932);
          goto LABEL_68;
        case 35722:
          if (*(_DWORD *)(a2 + 24) != 8) {
            return 1282;
          }
          int MaxTransformFeedbackVaryingLength = *(_DWORD *)(a2 + 3936);
          goto LABEL_68;
        default:
          return result;
      }
      goto LABEL_68;
    }
    switch(a3)
    {
      case 35958:
        if (*(_DWORD *)(a2 + 24) == 8)
        {
          int MaxTransformFeedbackVaryingLength = ShGetMaxTransformFeedbackVaryingLength();
          goto LABEL_68;
        }
        break;
      case 35967:
        if (*(_DWORD *)(a2 + 24) == 8)
        {
          int MaxTransformFeedbackVaryingLength = *(_DWORD *)(a2 + 3968);
          goto LABEL_68;
        }
        break;
      case 35971:
        if (*(_DWORD *)(a2 + 24) == 8)
        {
          int MaxTransformFeedbackVaryingLength = *(_DWORD *)(a2 + 3964);
          goto LABEL_68;
        }
        break;
      default:
        return result;
    }
    return 1282;
  }
  if (a3 <= 35380)
  {
    switch(a3)
    {
      case 33367:
        if (*(_DWORD *)(a2 + 24) == 8)
        {
          int MaxTransformFeedbackVaryingLength = *(unsigned __int8 *)(a2 + 3983);
          goto LABEL_68;
        }
        break;
      case 33368:
        if (*(_DWORD *)(a2 + 24) == 8)
        {
          int MaxTransformFeedbackVaryingLength = *(unsigned __int8 *)(a2 + 3981);
          goto LABEL_68;
        }
        break;
      case 34625:
        if (*(_DWORD *)(a2 + 24) == 8)
        {
          int MaxTransformFeedbackVaryingLength = 0;
          goto LABEL_68;
        }
        break;
      default:
        return result;
    }
    return 1282;
  }
  if (a3 > 35661)
  {
    if (a3 == 35662)
    {
      int v10 = *(_DWORD *)(a2 + 24);
      if ((v10 - 7) <= 1)
      {
        if (v10 == 7) {
          int MaxTransformFeedbackVaryingLength = 35656;
        }
        else {
          int MaxTransformFeedbackVaryingLength = 35648;
        }
        goto LABEL_68;
      }
    }
    else
    {
      if (a3 != 35663) {
        return result;
      }
      if (*(_DWORD *)(a2 + 24) == 7)
      {
        int MaxTransformFeedbackVaryingLength = *(_DWORD *)(a2 + 68);
        goto LABEL_68;
      }
    }
    return 1282;
  }
  if (a3 == 35381)
  {
    if (*(_DWORD *)(a2 + 24) == 8)
    {
      int MaxTransformFeedbackVaryingLength = *(_DWORD *)(a2 + 3912);
      goto LABEL_68;
    }
    return 1282;
  }
  if (a3 != 35382) {
    return result;
  }
  if (*(_DWORD *)(a2 + 24) != 8) {
    return 1282;
  }
  int MaxTransformFeedbackVaryingLength = *(_DWORD *)(a2 + 3780);
LABEL_68:
  uint64_t result = 0;
  *a4 = MaxTransformFeedbackVaryingLength;
  return result;
}

uint64_t gleGetIndexForGLSLSamplerType(int a1)
{
  uint64_t result = 0;
  if (a1 > 36875)
  {
    unsigned int v3 = a1 - 36876;
    unsigned int v4 = a1 - 37128;
    if ((a1 - 37131) >= 3) {
      unsigned int v5 = 0;
    }
    else {
      unsigned int v5 = 9;
    }
    if (v4 < 3) {
      unsigned int v5 = 8;
    }
    if (v3 >= 4) {
      return v5;
    }
    else {
      return 10;
    }
  }
  else
  {
    switch(a1)
    {
      case 36288:
      case 36291:
      case 36302:
      case 36310:
        uint64_t result = 6;
        break;
      case 36289:
      case 36292:
      case 36303:
      case 36311:
        uint64_t result = 5;
        break;
      case 36290:
      case 36304:
      case 36312:
        uint64_t result = 7;
        break;
      case 36293:
      case 36294:
      case 36295:
      case 36296:
      case 36300:
      case 36308:
        return result;
      case 36297:
      case 36305:
LABEL_13:
        uint64_t result = 4;
        break;
      case 36298:
      case 36306:
LABEL_15:
        uint64_t result = 3;
        break;
      case 36299:
      case 36307:
LABEL_18:
        uint64_t result = 1;
        break;
      case 36301:
      case 36309:
LABEL_16:
        uint64_t result = 2;
        break;
      default:
        switch(a1)
        {
          case 35677:
          case 35681:
            goto LABEL_13;
          case 35678:
          case 35682:
            goto LABEL_15;
          case 35679:
            goto LABEL_18;
          case 35683:
          case 35684:
            goto LABEL_16;
          default:
            return result;
        }
    }
  }
  return result;
}

void gleEvaluateImageUnits(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  bzero(v32, 0x280uLL);
  memset(v31, 0, sizeof(v31));
  uint64_t v3 = *(unsigned int *)(a2 + 3720);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(int *)(a2 + 3944);
    int v6 = 1;
    do
    {
      if (v4 >= v5) {
        goto LABEL_27;
      }
      uint64_t v7 = *(void *)(a2 + 3952);
      unsigned int v8 = *(unsigned __int16 *)(v7 + 8 * v4 + 4);
      if (v8 > 0x900B)
      {
        if (v8 - 37128 < 6 || v8 - 36876 <= 3)
        {
LABEL_18:
          uint64_t v12 = 0;
          unsigned int v13 = *(unsigned __int8 *)(v7 + 8 * v4 + 6);
          uint64_t v14 = *(unsigned int *)(*(void *)(a2 + 3712) + 16 * v4);
          int v15 = &v32[v14];
          __int16 v16 = (_WORD *)v31 + v14;
          do
          {
            if ((v13 >> v12))
            {
              if (v14 > 0x1F || *v15 >= 1 && v8 != (unsigned __int16)*v16)
              {
                int v6 = 0;
                break;
              }
              ++*v15;
              *__int16 v16 = v8;
            }
            ++v12;
            v15 += 32;
            v16 += 32;
          }
          while (v12 != 5);
        }
      }
      else if (v8 - 36288 <= 0x18 && ((1 << (v8 + 64)) & 0x1FFFE3F) != 0 || v8 - 35677 < 8)
      {
        goto LABEL_18;
      }
LABEL_27:
      ++v4;
    }
    while (v4 != v3);
    if (!v6)
    {
      int v17 = 0;
      goto LABEL_39;
    }
  }
  else
  {
    int v6 = 1;
  }
  int v28 = v6;
  uint64_t v18 = 0;
  uint64_t v30 = v31;
  char v29 = v32;
  uint64_t v19 = a2;
  do
  {
    char v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = a2 + 704 * v18;
    *(void *)(v22 + 720) = -1;
    *(void *)(v22 + 712) = -1;
    do
    {
      int v23 = v29[v21];
      if (v23)
      {
        uint64_t v24 = a2 + 704 * v18 + 8 * (v21 >> 4);
        uint64_t v25 = *(void *)(v24 + 712) & ~(15 << (v20 & 0x3C));
        unsigned __int16 v26 = *((_WORD *)v30 + v21);
        *(void *)(v24 + 712) = ((unint64_t)gleGetIndexForGLSLSamplerType(v26) << (v20 & 0x3C)) | v25;
      }
      else
      {
        unsigned __int16 v26 = *((_WORD *)v30 + v21);
      }
      *(_DWORD *)(v19 + 4 * v21 + 448) = v23;
      *(_WORD *)(v19 + 2 * v21++ + 576) = v26;
      v20 += 4;
    }
    while (v21 != 32);
    ++v18;
    v29 += 32;
    v30 += 4;
    v19 += 704;
  }
  while (v18 != 5);
  int v17 = v28;
LABEL_39:
  if (*(unsigned __int8 *)(a2 + 3938) != v17)
  {
    *(unsigned char *)(a2 + 3938) = v17;
    *(_DWORD *)(a2 + 3656) |= 0x20u;
    gleUpdateCurrentProgramState(a1);
  }
}

const void *gleGetString(const void *__src, int a2, int a3, _DWORD *a4, void *__dst)
{
  if (!a3)
  {
    if (!a4) {
      return __src;
    }
    __src = 0;
    goto LABEL_11;
  }
  if (a3 >= a2) {
    int v9 = a2;
  }
  else {
    int v9 = a3;
  }
  __src = memcpy(__dst, __src, v9);
  int v10 = a3 - 1;
  if (a3 - 1 >= a2) {
    int v10 = a2;
  }
  *((unsigned char *)__dst + v10) = 0;
  if (a4)
  {
    __src = (const void *)strlen((const char *)__dst);
LABEL_11:
    *a4 = __src;
  }
  return __src;
}

size_t gleAppendStringToInfoLog(const char *a1, const void **a2, _DWORD *a3)
{
  size_t result = strlen(a1);
  if (result)
  {
    size_t v7 = result;
    unsigned int v8 = (char *)malloc_type_malloc(result + *a3 + 2, 0x577B5147uLL);
    if (!v8) {
      abort();
    }
    int v9 = v8;
    if (*a2)
    {
      memcpy(v8, *a2, *a3);
      int v10 = (char *)&v9[*a3];
      *int v10 = 10;
      unsigned int v8 = v10 + 1;
    }
    memcpy(v8, a1, v7 + 1);
    free((void *)*a2);
    *a2 = v9;
    size_t result = strlen(v9);
    *a3 = result;
  }
  return result;
}

uint64_t gleLinkProgram(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v147 = *MEMORY[0x263EF8340];
  uint64_t v134 = (void *)(a2 + 3892);
  uint64_t v4 = *(void *)(a1 + 24768);
  if (v4 + 40 == a2)
  {
    int v5 = 0;
  }
  else if (v4 || (uint64_t v41 = *(void *)(a1 + 24776)) == 0)
  {
    int v5 = 1;
  }
  else
  {
    uint64_t v42 = 0;
    uint64_t v43 = v41 + 40;
    do
    {
      uint64_t v44 = *(void *)(v43 + v42);
      BOOL v46 = v44 == 0;
      uint64_t v45 = v44 + 40;
      BOOL v46 = !v46 && v45 == a2;
      int v5 = !v46;
      if (v46) {
        break;
      }
      BOOL v46 = v42 == 32;
      v42 += 8;
    }
    while (!v46);
  }
  int v6 = *(void **)(a2 + 96);
  uint64_t v7 = v3 + 32493;
  *(unsigned char *)(a2 + 3936) = 0;
  *(unsigned char *)(a2 + 3938) = 0;
  *uint64_t v134 = 0;
  if (v6) {
    free(v6);
  }
  *(void *)(a2 + 96) = 0;
  *(_DWORD *)(a2 + 3884) = 0;
  if (*(_DWORD *)(a2 + 3720))
  {
    *(_DWORD *)(a2 + 3720) = 0;
    free(*(void **)(a2 + 3712));
    *(void *)(a2 + 3712) = 0;
    if (*(unsigned char *)(v3 + 32496))
    {
      unint64_t v8 = 0;
      uint64_t v9 = a2 + 4024;
      do
      {
        free(*(void **)v9);
        ++v8;
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        v9 += 72;
      }
      while (v8 < *(unsigned __int8 *)(v3 + 32496));
    }
  }
  if (*(_DWORD *)(a2 + 3736))
  {
    *(_DWORD *)(a2 + 3736) = 0;
    free(*(void **)(a2 + 3728));
    *(void *)(a2 + 3728) = 0;
  }
  int v10 = *(void **)(a2 + 3960);
  if (v10)
  {
    free(v10);
    *(void *)(a2 + 3960) = 0;
  }
  BOOL v133 = (_DWORD *)(a2 + 3884);
  if (*(_DWORD *)(a2 + 3708))
  {
    if (*(unsigned char *)(v3 + 32496))
    {
      unint64_t v11 = 0;
      uint64_t v12 = (void **)(a2 + 4016);
      do
      {
        free(*v12);
        *uint64_t v12 = 0;
        v12 += 9;
        ++v11;
      }
      while (v11 < *(unsigned __int8 *)(v3 + 32496));
    }
    unsigned int v13 = *(void **)(a2 + 3664);
    if (v13) {
      free(v13);
    }
    *(void *)(a2 + 3704) = 0;
    *(void *)(a2 + 3664) = 0;
    *(void *)(a2 + 3672) = 0;
  }
  uint64_t v14 = 0;
  *(void *)(a2 + 3872) = 0;
  *(_DWORD *)(a2 + 3880) = 0;
  *(_DWORD *)(a2 + 3836) = 0;
  *(_OWORD *)(a2 + 3740) = 0u;
  *(_OWORD *)(a2 + 3756) = 0u;
  *(_OWORD *)(a2 + 3772) = 0u;
  *(_OWORD *)(a2 + 3788) = 0u;
  *(_OWORD *)(a2 + 3804) = 0u;
  *(_OWORD *)(a2 + 3820) = 0u;
  do
  {
    uint64_t v15 = a2 + v14;
    *(void *)(v15 + 136) = 0;
    *(void *)(v15 + 144) = 0;
    *(_DWORD *)(v15 + 152) = 0;
    __int16 v16 = *(void **)(a2 + v14 + 160);
    if (v16)
    {
      free(v16);
      *(void *)(v15 + 160) = 0;
    }
    *(_DWORD *)(v15 + 156) = 0;
    *(unsigned char *)(v15 + 172) = 0;
    *(_DWORD *)(v15 + 184) = 0;
    *(_OWORD *)(v15 + 188) = 0u;
    *(_OWORD *)(v15 + 204) = 0u;
    *(_OWORD *)(v15 + 220) = 0u;
    *(_OWORD *)(v15 + 236) = 0u;
    *(_OWORD *)(v15 + 252) = 0u;
    *(_OWORD *)(v15 + 268) = 0u;
    *(_OWORD *)(v15 + 284) = 0u;
    *(_OWORD *)(v15 + 300) = 0u;
    uint64_t v17 = *(void *)(v15 + 640);
    if (v17)
    {
      __int16 v18 = *(_WORD *)(v17 + 2) - 1;
      *(_WORD *)(v17 + 2) = v18;
      if (!v18) {
        MEMORY[0x22A686880]();
      }
      *(void *)(v15 + 640) = 0;
    }
    uint64_t v19 = a2 + v14;
    if (*(void *)(a2 + v14 + 696))
    {
      MEMORY[0x22A686880]();
      *(void *)(v19 + 696) = 0;
      *(_DWORD *)(a2 + 3680) = 0;
    }
    if (*(void *)(v19 + 704))
    {
      *(void *)(v19 + 704) = 0;
      *(_DWORD *)(a2 + 3680) = 0;
    }
    *(_DWORD *)(a2 + 3656) |= 0x20u;
    *(void *)(v15 + 712) = -1;
    *(void *)(v15 + 720) = -1;
    v14 += 704;
  }
  while (v14 != 3520);
  *(void *)(a2 + 3952) = 0;
  *(_DWORD *)(a2 + 3944) = 0;
  int v20 = *(_DWORD *)(a2 + 3888);
  if (v20 >= 1)
  {
    uint64_t v21 = *(void *)(a2 + 120);
    uint64_t v22 = *(unsigned int *)(a2 + 3888);
    while (*(unsigned char *)(*(void *)v21 + 66))
    {
      v21 += 8;
      if (!--v22) {
        goto LABEL_38;
      }
    }
    uint64_t result = gleAppendStringToInfoLog("ERROR: One or more attached shaders not successfully compiled\n", (const void **)(a2 + 96), v133);
    if ((v5 & 1) == 0)
    {
      *(_DWORD *)(v3 + 28652) = 0;
LABEL_185:
      *(_DWORD *)(v3 + 1540) |= 0x10000000u;
      return result;
    }
    return result;
  }
LABEL_38:
  long long v142 = 0u;
  long long v143 = 0u;
  uint64_t v145 = 0;
  memset(v144, 0, sizeof(v144));
  int32x2_t v141 = vrev64_s32(*(int32x2_t *)(v3 + 29780));
  DWORD1(v143) = *(char *)(v3 + 29790);
  if ((*(unsigned char *)(*(void *)(v3 + 29032) + 25) & 0x7F) != 0) {
    int v23 = 2;
  }
  else {
    int v23 = 1;
  }
  if ((*(unsigned char *)(*(void *)(v3 + 29032) + 25) & 0x7F) == 2) {
    int v24 = 10;
  }
  else {
    int v24 = v23;
  }
  DWORD2(v142) = *(unsigned __int8 *)(v3 + 32501);
  HIDWORD(v142) = v24;
  if (*(unsigned char *)(v3 + 29788))
  {
    v24 |= 2u;
    HIDWORD(v142) = v24;
  }
  if (*(unsigned char *)(v3 + 29789)) {
    HIDWORD(v142) = v24 | 4;
  }
  unsigned int v25 = *(unsigned __int8 *)(a2 + 3940);
  LODWORD(v143) = ((*(unsigned __int16 *)(v3 + 32493) | (*(unsigned __int8 *)(v3 + 32495) << 16)) >> 15) & 0x1F;
  *((void *)&v143 + 1) = __PAIR64__(*(_DWORD *)(a2 + 3920), v25);
  *(void *)&v144[0] = v134[1];
  DWORD2(v144[0]) = *(_DWORD *)(a2 + 3908);
  *(_OWORD *)((char *)v144 + 12) = xmmword_227DC23C0;
  *(void *)((char *)&v144[1] + 12) = 2305;
  uint64_t v135 = v3 + 32493;
  uint64_t v136 = v3;
  int v131 = v5;
  int v130 = (_DWORD *)(v3 + 28652);
  if (!v20)
  {
    *(unsigned char *)(a2 + 3936) = ShLink();
    gleEvaluateImageUnits(v3, a2);
    InfoLog = (const char *)ShGetInfoLog();
    uint64_t v40 = (const void **)(a2 + 96);
    goto LABEL_165;
  }
  unsigned __int16 v26 = (char *)malloc_type_malloc(8 * v20, 0x577B5147uLL);
  if (!v26) {
    goto LABEL_187;
  }
  unint64_t v27 = v26;
  uint64_t v28 = *(unsigned int *)(a2 + 3888);
  if ((int)v28 >= 1)
  {
    uint64_t v29 = 0;
    do
    {
      *(void *)&v26[v29] = *(void *)(*(void *)(*(void *)(a2 + 120) + v29) + 72);
      v29 += 8;
    }
    while (8 * v28 != v29);
  }
  *(unsigned char *)(a2 + 3936) = ShLink();
  free(v27);
  *(_DWORD *)(a2 + 3892) = ShGetNumActiveAttributes();
  *(_DWORD *)(a2 + 3896) = ShGetMaxAttributeLength();
  int ActiveNonbindableUniformsSize = ShGetActiveNonbindableUniformsSize();
  *(_DWORD *)(a2 + 3720) = ActiveNonbindableUniformsSize;
  if (ActiveNonbindableUniformsSize)
  {
    uint64_t v31 = malloc_type_malloc((16 * ActiveNonbindableUniformsSize), 0x577B5147uLL);
    if (!v31) {
      goto LABEL_187;
    }
    *(void *)(a2 + 3712) = v31;
    if (*(unsigned char *)(v3 + 32496))
    {
      unint64_t v32 = 0;
      uint64_t v33 = a2 + 784;
      do
      {
        uint64_t v34 = 0;
        *(_DWORD *)(a2 + 72 * v32 + 4040) |= 2u;
        do
        {
          *(_DWORD *)(v33 + v34) |= 2u;
          v34 += 704;
        }
        while (v34 != 3520);
        uint64_t v35 = malloc_type_malloc(((*(_DWORD *)(a2 + 3720) + 31) >> 3) & 0x1FFFFFFC, 0x577B5147uLL);
        if (!v35) {
          goto LABEL_187;
        }
        unint64_t v36 = a2 + 72 * v32;
        *(void *)(v36 + 4024) = v35;
        memset(v35, 255, ((*(_DWORD *)(a2 + 3720) + 31) >> 3) & 0x1FFFFFFC);
        *(_DWORD *)(v36 + 4032) = 0;
        int v37 = *(_DWORD *)(a2 + 3720);
        *(_DWORD *)(v36 + 4036) = v37;
        ++v32;
        v33 += 4;
      }
      while (v32 < *(unsigned __int8 *)(v3 + 32496));
      if (!v37) {
        goto LABEL_81;
      }
    }
    else if (!*(_DWORD *)(a2 + 3720))
    {
LABEL_81:
      *(void *)(a2 + 3952) = ShGetCachedUniformIndexTable();
      *(_DWORD *)(a2 + 3944) = ShGetCachedUniformIndexTableSize();
      goto LABEL_82;
    }
    uint64_t v47 = 0;
    unint64_t v48 = 0;
    do
    {
      ShSetInitialUniformValue();
      ++v48;
      v47 += 16;
    }
    while (v48 < *(unsigned int *)(a2 + 3720));
    goto LABEL_81;
  }
LABEL_82:
  int v140 = 0;
  ShGetActiveSamplerLocations();
  *(void *)(a2 + 3968) = ShGetContextStateUniforms();
  int NumBindableUniformBuffers = ShGetNumBindableUniformBuffers();
  *(_DWORD *)(a2 + 3708) = NumBindableUniformBuffers;
  if (NumBindableUniformBuffers)
  {
    *(void *)(a2 + 3672) = ShGetActiveBindableUniformBufferSizeTable();
    uint64_t v50 = malloc_type_malloc(8 * *(unsigned int *)(a2 + 3708), 0x577B5147uLL);
    if (!v50) {
      goto LABEL_187;
    }
    *(void *)(a2 + 3664) = v50;
    uint64_t v51 = *(unsigned int *)(a2 + 3708);
    if (v51)
    {
      uint64_t v52 = 0;
      do
      {
        *(void *)(*(void *)(a2 + 3664) + v52) = 0;
        v52 += 8;
      }
      while (8 * v51 != v52);
    }
    *(_DWORD *)(a2 + 3704) = 1;
    if (*(unsigned char *)(v3 + 32496))
    {
      uint64_t v53 = 0;
      while (1)
      {
        unint64_t v54 = malloc_type_malloc((8 * v51), 0x577B5147uLL);
        if (!v54) {
          break;
        }
        uint64_t v55 = a2 + 72 * v53;
        *(void *)(v55 + 4016) = v54;
        uint64_t v51 = *(unsigned int *)(a2 + 3708);
        if (v51)
        {
          uint64_t v56 = 0;
          uint64_t v57 = (void *)(v55 + 4016);
          do
          {
            *(void *)(*v57 + v56) = 0;
            v56 += 8;
          }
          while (8 * v51 != v56);
        }
        if (++v53 >= (unint64_t)*(unsigned __int8 *)(v3 + 32496)) {
          goto LABEL_96;
        }
      }
LABEL_187:
      abort();
    }
  }
  else
  {
    *(_DWORD *)(a2 + 3704) = 0;
  }
LABEL_96:
  unsigned int v129 = (const void **)(a2 + 96);
  *(_DWORD *)(a2 + 3656) |= 0x10u;
  *(_DWORD *)(a2 + 3740) = ShGetNumActiveUniformBlocks();
  *(_DWORD *)(a2 + 3872) = ShGetMaxActiveUniformBlockLength();
  *(_DWORD *)(a2 + 3876) = ShGetNumActiveUniforms();
  *(_DWORD *)(a2 + 3880) = ShGetMaxActiveUniformLength();
  uint64_t v58 = *(unsigned __int8 *)(v3 + 32496);
  if (*(unsigned char *)(v3 + 32496))
  {
    uint64_t v59 = 0;
    uint64_t v60 = a2 + 784;
    do
    {
      uint64_t v61 = 0;
      *(_DWORD *)(a2 + 72 * v59 + 4040) |= 8u;
      do
      {
        *(_DWORD *)(v60 + v61) |= 8u;
        v61 += 704;
      }
      while (v61 != 3520);
      ++v59;
      v60 += 4;
    }
    while (v59 != v58);
  }
  uint64_t v62 = 0;
  long long v132 = xmmword_227DC23D0;
  do
  {
    uint64_t PPStreamManager = ShGetPPStreamManager();
    int v139 = 0;
    if ((BYTE12(v142) & 2) != 0)
    {
      uint64_t ShaderByteCode = ShGetShaderByteCode();
      if (ShaderByteCode)
      {
        uint64_t v65 = a2 + 704 * v62;
        *(void *)(v65 + 704) = *(void *)ShaderByteCode;
        *(_DWORD *)(v65 + 740) = *(_DWORD *)(ShaderByteCode + 48);
        *(_OWORD *)(v65 + 744) = *(_OWORD *)(ShaderByteCode + 8);
        *(void *)(v65 + 760) = *(void *)(ShaderByteCode + 24);
        *(void *)(v65 + 768) = *(void *)(ShaderByteCode + 40);
        *(_DWORD *)(v65 + 776) = *(_DWORD *)(a2 + 3720);
        *(void *)(v65 + 672) = *(void *)(ShaderByteCode + 72);
        *(void *)(v65 + 680) = *(void *)(ShaderByteCode + 80);
        *(unsigned char *)(v65 + 691) &= ~2u;
        *(unsigned char *)(v65 + 172) = 1;
        *(void *)(v65 + 696) = 0;
      }
    }
    if (PPStreamManager)
    {
      if (!v62 && !*(_DWORD *)(*(void *)(PPStreamManager + 48) + 16))
      {
        long long v146 = v132;
        PPStreamAddAttribBinding();
      }
      uint64_t v66 = (_DWORD *)(a2 + 704 * v62);
      v66[34] = ShGetNumActiveVaryingsComponents();
      v66[35] = ShGetNumActiveSubroutines();
      v66[36] = ShGetMaxActiveSubroutineLength();
      v66[37] = ShGetNumActiveSubroutineUniforms();
      int v67 = v66 + 37;
      v67[1] = ShGetMaxActiveSubroutineUniformLength();
      unsigned int NumActiveSubroutineUniformLocations = ShGetNumActiveSubroutineUniformLocations();
      v67[2] = NumActiveSubroutineUniformLocations;
      if (NumActiveSubroutineUniformLocations)
      {
        uint64_t v69 = malloc_type_malloc(4 * NumActiveSubroutineUniformLocations, 0x577B5147uLL);
        if (!v69) {
          goto LABEL_187;
        }
        uint64_t v70 = a2 + 704 * v62;
        *(void *)(v70 + 160) = v69;
        uint64_t v71 = (void *)(v70 + 160);
        if (*v67)
        {
          unsigned int v72 = 0;
          do
          {
            LODWORD(v146) = 0;
            uint64_t ActiveSubroutineUniformiv = ShGetActiveSubroutineUniformiv();
            MEMORY[0x270FA5388](ActiveSubroutineUniformiv);
            unsigned int v75 = (_DWORD *)((char *)&v128 - ((v74 + 15) & 0x7FFFFFFF0));
            ShGetActiveSubroutineUniformiv();
            int v138 = 0;
            ShGetActiveSubroutineUniformiv();
            int v137 = 0;
            uint64_t v76 = ShGetActiveSubroutineUniformiv();
            MEMORY[0x270FA5388](v76);
            ShGetActiveSubroutineUniformName();
            int SubroutineUniformLocation = ShGetSubroutineUniformLocation();
            if (v138 >= 1)
            {
              uint64_t v78 = 0;
              uint64_t v79 = *v71 + 4 * SubroutineUniformLocation;
              do
                *(_DWORD *)(v79 + 4 * v78++) = *v75;
              while (v78 < v138);
            }
            ++v72;
          }
          while (v72 < *v67);
        }
      }
      Stream = (unsigned __int16 *)PPStreamGetStream();
      uint64_t v81 = a2 + 704 * v62;
      *(void *)(v81 + 696) = Stream;
      *(void *)(v81 + 672) = *((void *)Stream + 1);
      *(void *)(v81 + 680) = *((void *)Stream + 2);
      *(_DWORD *)(v81 + 740) = PPStreamTokenGetProgramOptions();
      char IsTrivialPassThrough = PPStreamTokenIsTrivialPassThrough();
      *(_WORD *)(v81 + 174) = 0;
      uint64_t v83 = (BOOL *)(v81 + 174);
      v83[517] = (2 * (IsTrivialPassThrough & 1)) | v83[517] & 0xFD;
      *(v83 - 2) = 1;
      uint64_t v84 = *((unsigned int *)Stream + 16);
      if (v84)
      {
        uint64_t v85 = &Stream[4 * *((unsigned int *)Stream + 17)];
        uint64_t v86 = 8 * v84;
        do
        {
          uint64_t v87 = *(void *)v85;
          unsigned int v88 = (*(void *)v85 >> 8) & 0x1F;
          if (v88 == 5)
          {
            v83[1] = (v87 & 0x200000000) != 0;
          }
          else if (v88 == 4)
          {
            *uint64_t v83 = (v87 & 0x2000000000) != 0;
          }
          v85 += 4;
          v86 -= 8;
        }
        while (v86);
      }
      if (*Stream == 35633 || (uint64_t v89 = *((unsigned int *)Stream + 12), !v89))
      {
        int v90 = 0;
      }
      else
      {
        int v90 = 0;
        int v91 = &Stream[4 * *((unsigned int *)Stream + 13)];
        uint64_t v92 = 8 * v89;
        do
        {
          uint64_t v93 = *(void *)v91;
          v91 += 4;
          int v94 = 1 << SBYTE4(v93);
          if ((v93 & 0x10000017C00) != 0x10000007000) {
            int v94 = 0;
          }
          v90 |= v94;
          v92 -= 8;
        }
        while (v92);
      }
      *(_DWORD *)(a2 + 704 * v62 + 176) = v90;
      if (*Stream == 35632 || (uint64_t v95 = *((unsigned int *)Stream + 16), !v95))
      {
        int v96 = 0;
      }
      else
      {
        int v96 = 0;
        unsigned int v97 = &Stream[4 * *((unsigned int *)Stream + 17)];
        uint64_t v98 = 8 * v95;
        do
        {
          uint64_t v99 = *(void *)v97;
          v97 += 4;
          int v100 = 1 << SBYTE4(v99);
          if ((v99 & 0x4000005F00) != 0x4000001100) {
            int v100 = 0;
          }
          v96 |= v100;
          v98 -= 8;
        }
        while (v98);
      }
      uint64_t v101 = a2 + 704 * v62;
      *(_DWORD *)(v101 + 180) = v96;
      *(unsigned char *)(v101 + 173) = glePPSetParamRemap(v62, (uint64_t)&Stream[4 * *((unsigned int *)Stream + 15)], *((_DWORD *)Stream + 14), 0, (int16x4_t **)(v101 + 128), 0, v101 + 188, (int *)(v101 + 184));
      PPStreamTokenConvertParamBindings();
    }
    ++v62;
  }
  while (v62 != 5);
  *(unsigned char *)(a2 + 3941) = *(unsigned char *)(a2 + 3940);
  *(unsigned char *)(a2 + 3943) = *(unsigned char *)(a2 + 3942);
  v134[4] = v134[3];
  *(_DWORD *)(a2 + 3684) = 0;
  *(void *)(a2 + 3696) = 0;
  *(void *)(a2 + 3688) = 0;
  unsigned int v102 = 3;
  uint64_t v7 = v135;
  uint64_t v3 = v136;
  uint64_t v103 = v129;
  while (1)
  {
    unsigned int v104 = v102;
    if (*(void *)(a2 + 704 * v102 + 704))
    {
      uint64_t v106 = ShGetShaderByteCode();
      int v107 = *(_DWORD *)(a2 + 3684) | *(_DWORD *)(v106 + 52);
      *(_DWORD *)(a2 + 3684) = v107;
      *(_OWORD *)(a2 + 3688) = *(_OWORD *)(v106 + 56);
      goto LABEL_153;
    }
    uint64_t v105 = *(void *)(a2 + 704 * v102 + 696);
    if (v105) {
      break;
    }
    unsigned int v102 = v104 - 1;
    if (!v104) {
      goto LABEL_155;
    }
  }
  int v108 = *(_DWORD *)(v105 + 56);
  if (!v108) {
    goto LABEL_155;
  }
  int v107 = 0;
  for (int i = 0; i != v108; ++i)
  {
    uint64_t v110 = (i + *(_DWORD *)(v105 + 60));
    uint64_t v111 = *(void *)(v105 + 8 * v110);
    if ((v111 & 0x1F00) == 0xA00)
    {
      v107 |= 1 << (BYTE4(v111) & 0xF);
      *(_DWORD *)(a2 + 3684) = v107;
      *(_DWORD *)(a2 + 4 * (HIDWORD(*(void *)(v105 + 8 * v110)) & 0xFLL) + 3688) = *(void *)(v105 + 8 * v110) >> 40;
    }
  }
LABEL_153:
  if (v107) {
    *(_DWORD *)(a2 + 3684) = v107 | 0x10;
  }
LABEL_155:
  gleEvaluateImageUnits(v3, a2);
  unsigned int v112 = v144[0];
  v134[1] = *(void *)&v144[0];
  unsigned int v113 = HIDWORD(v144[0]);
  *(_DWORD *)(a2 + 3908) = DWORD2(v144[0]);
  *(_DWORD *)(a2 + 3864) = v113;
  *(int16x4_t *)(a2 + 3840) = vmovn_s32((int32x4_t)v144[1]);
  *(unsigned char *)(a2 + 3848) = v144[2];
  if (*(void *)(a2 + 2808))
  {
    if (!v112)
    {
      uint64_t v115 = "ERROR: Geometry shader is attached but max vertices out is 0\n";
      goto LABEL_161;
    }
    uint64_t v114 = *(void *)(v3 + 29032);
    if (*(_DWORD *)(a2 + 2248) * v112 > *(_DWORD *)(v114 + 372) || v112 > *(_DWORD *)(v114 + 368))
    {
      uint64_t v115 = "ERROR: Too many geometry output components\n";
LABEL_161:
      gleAppendStringToInfoLog(v115, v103, v133);
      *(unsigned char *)(a2 + 3936) = 0;
      goto LABEL_166;
    }
    if (v113 > *(unsigned __int16 *)(v114 + 378))
    {
      uint64_t v115 = "ERROR: Too many geometry shader invocations\n";
      goto LABEL_161;
    }
  }
  InfoLog = (const char *)ShGetInfoLog();
  uint64_t v40 = v103;
LABEL_165:
  gleAppendStringToInfoLog(InfoLog, v40, v133);
LABEL_166:
  uint64_t result = ShCleanup();
  if (*(void *)(a2 + 2808) || *(void *)(a2 + 2816))
  {
    *(_DWORD *)(a2 + 3852) = *(_DWORD *)(a2 + 3900);
    int v116 = *(_DWORD *)(a2 + 3904);
    int v117 = *(_DWORD *)(a2 + 3908);
    if (*(_DWORD *)(a2 + 3856) != v116 || *(_DWORD *)(a2 + 3860) != v117)
    {
      *(_DWORD *)(a2 + 3856) = v116;
      *(_DWORD *)(a2 + 3860) = v117;
      uint64_t result = gleUpdateInvalidPrimitives(v3);
    }
  }
  if (*(unsigned char *)(v7 + 3))
  {
    uint64_t v118 = 0;
    unint64_t v119 = 0;
    uint64_t v120 = a2 + 3976;
    do
    {
      uint64_t v121 = 0;
      unint64_t v122 = v3 + 1672 * v119;
      unint64_t v123 = v122 + 34160;
      float v124 = (void *)(v122 + 32520);
      uint64_t v125 = a2 + 784;
      do
      {
        if ((*(void *)(v125 - 64) & *(void *)(v125 - 72)) == -1) {
          int v126 = 1;
        }
        else {
          int v126 = 5;
        }
        *(_DWORD *)(v125 + v118) |= v126;
        uint64_t result = (*(uint64_t (**)(void, void))(*(void *)v123 + 1640))(*v124, *(void *)(v120 + v121));
        v121 += 8;
        v125 += 704;
      }
      while (v121 != 40);
      ++v119;
      uint64_t v3 = v136;
      v120 += 72;
      v118 += 4;
    }
    while (v119 < *(unsigned __int8 *)(v135 + 3));
  }
  if ((v131 & 1) == 0)
  {
    uint64_t result = (uint64_t)gleResetSubroutineUniforms((char *)v3, a2);
    int v127 = 805306368;
    if (!*(_DWORD *)(a2 + 3740))
    {
      if (*(_DWORD *)(a2 + 3708)) {
        int v127 = 805306368;
      }
      else {
        int v127 = 0x10000000;
      }
    }
    *(_DWORD *)(v3 + 1532) |= v127;
    *int v130 = 0;
    goto LABEL_185;
  }
  return result;
}

void gleClearTextures(void *a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = 1024;
  do
  {
    uint64_t v4 = a1[3482];
    if (v4)
    {
      uint64_t v5 = v4 + v2;
      uint64_t v6 = *(void *)(v4 + v2 + 512);
      if (v6)
      {
        gleDeleteTexture(v6, *(void *)(v5 + 768), (void *)(v4 + v3));
        *(void *)(v5 + 512) = 0;
      }
    }
    uint64_t v7 = a1[3479];
    if (v7)
    {
      uint64_t v8 = v7 + v2;
      uint64_t v9 = *(void *)(v7 + v2 + 512);
      if (v9)
      {
        gleDeleteTexture(v9, *(void *)(v8 + 768), (void *)(v7 + v3));
        *(void *)(v8 + 512) = 0;
      }
    }
    uint64_t v10 = a1[3480];
    if (v10)
    {
      uint64_t v11 = v10 + v2;
      uint64_t v12 = *(void *)(v10 + v2 + 512);
      if (v12)
      {
        gleDeleteTexture(v12, *(void *)(v11 + 768), (void *)(v10 + v3));
        *(void *)(v11 + 512) = 0;
      }
    }
    uint64_t v13 = a1[3483];
    if (v13)
    {
      uint64_t v14 = v13 + v2;
      uint64_t v15 = *(void *)(v13 + v2 + 512);
      if (v15)
      {
        gleDeleteTexture(v15, *(void *)(v14 + 768), (void *)(v13 + v3));
        *(void *)(v14 + 512) = 0;
      }
    }
    v2 += 8;
    v3 += 24;
  }
  while (v2 != 256);
}

void gleDeleteTexture(uint64_t a1, uint64_t a2, void *a3)
{
  if (*a3)
  {
    MEMORY[0x22A687250]();
    *a3 = 0;
  }
  glsmDestroyTexture();

  JUMPOUT(0x22A687260);
}

uint64_t gleUpdateShaderTexData(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v6 = 0;
  char v7 = 1;
  while (*(void *)(a3 + 8 * v6 + 584) == -1)
  {
    char v8 = v7;
    char v7 = 0;
    uint64_t v6 = 1;
    if ((v8 & 1) == 0) {
      return result;
    }
  }
  PPStreamTokenAddTexUnitInfo();
  uint64_t v9 = (void *)*a2;
  if (!*a2)
  {
    uint64_t v10 = malloc_type_calloc(1uLL, 0x780uLL, 0x2BF3136CuLL);
    if (!v10) {
      abort();
    }
    uint64_t v9 = v10;
    *a2 = v10;
  }
  for (uint64_t i = 0; i != 32; ++i)
  {
    uint64_t v12 = i >> 4;
    unint64_t v13 = (*(void *)(a3 + 8 * v12 + 584) >> (4 * (i & 0xFu))) & 0xFLL;
    if (v13 <= 0xA
      && ((*(unsigned __int16 *)(v5 + 2 * v12 + 14992) >> (i & 0xF)) & 1) != 0
      && (uint64_t v14 = *(void *)(v5 + 20776 + 88 * i + 8 * v13)) != 0)
    {
      if (*(void *)(v14 + 576)) {
        gleSynchronizePluginTextureLevels(v5, v14 + 40);
      }
      uint64_t v15 = *(void *)(v14 + 568);
      if (v15 && *(void *)(v15 + 192)) {
        gleSynchronizePluginBufferStorage(v5, v15 + 40);
      }
      __int16 v16 = (char *)&v9[i];
      uint64_t v17 = *((void *)v16 + 64);
      if (v17) {
        gleDeleteTexture(v17, *((void *)v16 + 96), &v9[3 * i + 128]);
      }
      gfxInitializeGLTexturePluginState();
      if ((*(_WORD *)(v14 + 808) & 0xF) == 7) {
        BYTE4(v9[3 * i + 130]) |= 8u;
      }
      if (*(void *)(v14 + 568)) {
        glsmCreateBuffer();
      }
      __int16 v18 = &v9[2 * i];
      glsmCreateTexture();
      glsmAllocateTextureLevels();
      gfxInitializeGLSamplerPluginState();
      glsmCreateSampler();
      *__int16 v18 = 0;
      v18[1] = 0;
      glsmLoadTextureStructure();
      *((void *)v16 + 64) = 0;
    }
    else
    {
      uint64_t v19 = (char *)&v9[i];
      uint64_t v20 = *((void *)v19 + 64);
      if (v20) {
        gleDeleteTexture(v20, *((void *)v19 + 96), &v9[3 * i + 128]);
      }
      *((void *)v19 + 64) = 0;
    }
  }
  return glsmUpdateTexImageDataInPPStream();
}

uint64_t glePrepareShaderForEmulation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  char v4 = 1;
  while (*(void *)(a2 + 8 * v3 + 584) == -1)
  {
    char v5 = v4;
    char v4 = 0;
    uint64_t v3 = 1;
    if ((v5 & 1) == 0)
    {
      glpPPShaderLinearize();
      goto LABEL_6;
    }
  }
  glpPPShaderLinearize();
  PPStreamTokenAddTexImages();
LABEL_6:
  uint64_t v6 = PPStreamTokenAddBlockInfo();
  PPStreamTokenConvertAttribBindings();
  uint64_t result = PPStreamTokenConvertOutputBindings();
  *(_WORD *)(v6 + 2) = 1;
  *(void *)(a2 + 512) = v6;
  return result;
}

size_t gleShaderParse(size_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 25))
  {
    if ((*(_WORD *)(result + 32493) & 0x800) != 0)
    {
      uint64_t v3 = strstr(*(char **)(a2 + 8), "float diffuseFactor; float specularFactor; float shininess;");
      if (v3) {
        qmemcpy(v3, "float shininess; float diffuseFactor; float specularFactor;", 59);
      }
    }
    *(unsigned char *)(a2 + 26) = 0;
    if (*(void *)(a2 + 32) || (uint64_t result = ShConstructCompiler(), (*(void *)(a2 + 32) = result) != 0))
    {
      *(unsigned char *)(a2 + 26) = ShCompile();
      *(unsigned char *)(a2 + 25) = 0;
      if (*(void *)a2) {
        free(*(void **)a2);
      }
      *(void *)a2 = 0;
      *(_DWORD *)(a2 + 16) = 0;
      InfoLog = (const char *)ShGetInfoLog();
      return gleAppendStringToInfoLog(InfoLog, (const void **)a2, (_DWORD *)(a2 + 16));
    }
  }
  return result;
}

double gleCleanUpGLDState(_OWORD *a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = (char *)a1 + 15640;
  do
  {
    free(*(void **)&v3[v2]);
    v2 += 16;
  }
  while (v2 != 80);
  double result = 0.0;
  a1[981] = 0u;
  a1[980] = 0u;
  a1[979] = 0u;
  a1[978] = 0u;
  a1[977] = 0u;
  return result;
}

void gleCleanUpDerivedState(uint64_t a1)
{
  free(*(void **)(a1 + 27856));
  free(*(void **)(a1 + 27832));
  free(*(void **)(a1 + 27840));
  uint64_t v2 = *(void **)(a1 + 27864);

  free(v2);
}

uint64_t gleUpdateAnyDrawBuffersFloat(uint64_t result, double a2, double a3, double a4)
{
  uint64_t v4 = result;
  uint64_t v5 = *(void *)(result + 28960);
  if (v5)
  {
    if (*(_DWORD *)(v5 + 480) == 0xFFFF) {
      double result = gleUpdateFramebufferCompleteness(result, v5 + 40);
    }
    uint64_t v6 = (unsigned char *)(v4 + 32488);
    int v7 = *(unsigned __int8 *)(v4 + 32488);
    int v8 = *(_DWORD *)(v5 + 524) != 0;
  }
  else
  {
    uint64_t v6 = (unsigned char *)(result + 32488);
    int v7 = *(unsigned __int8 *)(result + 32488);
    int v8 = *(unsigned __int8 *)(*(void *)(result + 29032) + 43);
  }
  if (v7 != v8)
  {
    *uint64_t v6 = v8;
    return gleUpdateDrawColorClamping(v4, a2, a3, a4);
  }
  return result;
}

uint64_t gleUpdateBufferColorClamping(uint64_t result, double a2, double a3, double a4)
{
  if (*(unsigned char *)(result + 32488) || (*(unsigned char *)(*(void *)(result + 29032) + 561) & 0x40) != 0)
  {
    *(_DWORD *)(result + 15000) = *(_DWORD *)(result + 29704);
    long long v7 = *(_OWORD *)(result + 29672);
    *(_OWORD *)(result + 15104) = *(_OWORD *)(result + 29688);
    *(_OWORD *)(result + 15152) = v7;
  }
  else
  {
    LODWORD(a3) = *(_DWORD *)(result + 288);
    LODWORD(a4) = *(_DWORD *)(result + 292);
    *(float *)(result + 15000) = fminf(fmaxf(*(float *)(result + 29704), *(float *)&a3), *(float *)&a4);
    float32x4_t v4 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    float32x4_t v5 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
    float32x4_t v6 = *(float32x4_t *)(result + 29672);
    *(float32x4_t *)(result + 15104) = vminnmq_f32(vmaxnmq_f32(*(float32x4_t *)(result + 29688), v4), v5);
    *(float32x4_t *)(result + 15152) = vminnmq_f32(vmaxnmq_f32(v6, v4), v5);
  }
  *(_DWORD *)(result + 29800) |= 8u;
  *(_DWORD *)(result + 1520) |= 5u;
  *(_DWORD *)(result + 28652) = 0;
  *(_DWORD *)(result + 1548) |= 0x40000u;
  return result;
}

uint64_t gleUpdateFragmentColorClamping(uint64_t result)
{
  uint64_t v1 = (__int16 *)(result + 23772);
  if (*(unsigned char *)(result + 15178))
  {
    uint64_t v2 = (const float *)(result + 288);
    uint64_t v3 = (const float *)(result + 292);
    float32x4_t v4 = vld1q_dup_f32(v2);
    float32x4_t v5 = vld1q_dup_f32(v3);
    *(float32x4_t *)(result + 15228) = vminnmq_f32(vmaxnmq_f32(*(float32x4_t *)(result + 29576), v4), v5);
    if (*v1 >= 1)
    {
      uint64_t v6 = (unsigned __int16)*v1;
      uint64_t v7 = *(void *)(result + 19248);
      uint64_t v8 = *(void *)(result + 19272);
      uint64_t v9 = (float32x4_t *)(result + 23808);
      uint64_t v10 = (float32x4_t *)(result + 15652);
      uint64_t v11 = *(void *)(result + 19280);
      uint64_t v12 = (unsigned __int16 *)(v11 + 3736);
      unint64_t v13 = (unsigned __int16 *)(v8 + 3736);
      uint64_t v14 = (unsigned __int16 *)(v7 + 3736);
      do
      {
        *uint64_t v10 = vminnmq_f32(vmaxnmq_f32(*v9, v4), v5);
        if (v7)
        {
          unint64_t v15 = *v14;
          if (v15 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v15 >> 3) & 0x1FFC) + 1552) |= 1 << v15;
            *(_DWORD *)(result + 28652) = 0;
            *(_DWORD *)(result + 1532) |= 0x800000u;
          }
        }
        if (v8)
        {
          unint64_t v16 = *v13;
          if (v16 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v16 >> 3) & 0x1FFC) + 1936) |= 1 << v16;
            *(_DWORD *)(result + 28652) = 0;
            *(_DWORD *)(result + 1532) |= 0x4000000u;
          }
        }
        if (v11)
        {
          unint64_t v17 = *v12;
          if (v17 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v17 >> 3) & 0x1FFC) + 2064) |= 1 << v17;
            *(_DWORD *)(result + 28652) = 0;
            *(_DWORD *)(result + 1532) |= 0x8000000u;
          }
        }
        ++v9;
        uint64_t v10 = (float32x4_t *)((char *)v10 + 76);
        ++v12;
        ++v13;
        ++v14;
        --v6;
      }
      while (v6);
    }
  }
  else
  {
    *(_OWORD *)(result + 15228) = *(_OWORD *)(result + 29576);
    if (*v1 >= 1)
    {
      uint64_t v18 = (unsigned __int16)*v1;
      uint64_t v19 = *(void *)(result + 19248);
      uint64_t v20 = *(void *)(result + 19272);
      uint64_t v21 = (_OWORD *)(result + 15652);
      uint64_t v22 = (_OWORD *)(result + 23808);
      uint64_t v23 = *(void *)(result + 19280);
      int v24 = (unsigned __int16 *)(v23 + 3736);
      unsigned int v25 = (unsigned __int16 *)(v20 + 3736);
      unsigned __int16 v26 = (unsigned __int16 *)(v19 + 3736);
      do
      {
        *uint64_t v21 = *v22;
        if (v19)
        {
          unint64_t v27 = *v26;
          if (v27 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v27 >> 3) & 0x1FFC) + 1552) |= 1 << v27;
            *(_DWORD *)(result + 28652) = 0;
            *(_DWORD *)(result + 1532) |= 0x800000u;
          }
        }
        if (v20)
        {
          unint64_t v28 = *v25;
          if (v28 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v28 >> 3) & 0x1FFC) + 1936) |= 1 << v28;
            *(_DWORD *)(result + 28652) = 0;
            *(_DWORD *)(result + 1532) |= 0x4000000u;
          }
        }
        if (v23)
        {
          unint64_t v29 = *v24;
          if (v29 <= 0x3FF)
          {
            *(_DWORD *)(result + ((v29 >> 3) & 0x1FFC) + 2064) |= 1 << v29;
            *(_DWORD *)(result + 28652) = 0;
            *(_DWORD *)(result + 1532) |= 0x8000000u;
          }
        }
        uint64_t v21 = (_OWORD *)((char *)v21 + 76);
        ++v22;
        ++v24;
        ++v25;
        ++v26;
        --v18;
      }
      while (v18);
    }
  }
  uint64_t v30 = *(void *)(result + 19248);
  if (v30)
  {
    unint64_t v31 = *(unsigned __int16 *)(v30 + 3780);
    if (v31 <= 0x3FF)
    {
      *(_DWORD *)(result + ((v31 >> 3) & 0x1FFC) + 1552) |= 1 << v31;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1532) |= 0x800000u;
    }
  }
  uint64_t v32 = *(void *)(result + 19272);
  if (v32)
  {
    unint64_t v33 = *(unsigned __int16 *)(v32 + 3780);
    if (v33 <= 0x3FF)
    {
      *(_DWORD *)(result + ((v33 >> 3) & 0x1FFC) + 1936) |= 1 << v33;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1532) |= 0x4000000u;
    }
  }
  uint64_t v34 = *(void *)(result + 19280);
  if (v34)
  {
    unint64_t v35 = *(unsigned __int16 *)(v34 + 3780);
    if (v35 <= 0x3FF)
    {
      *(_DWORD *)(result + ((v35 >> 3) & 0x1FFC) + 2064) |= 1 << v35;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1532) |= 0x8000000u;
    }
  }
  return result;
}

uint64_t gleUpdatePointSmooth(uint64_t result)
{
  if (*(unsigned char *)(result + 32501) != 2) {
    return result;
  }
  uint64_t v1 = (unsigned char *)(result + 15376);
  if (*(unsigned char *)(result + 15377))
  {
    int v2 = 0;
  }
  else
  {
    if ((*(unsigned char *)(result + 32507) & 0x7F) == 0)
    {
      int v2 = *(unsigned __int8 *)(result + 17680);
      if (!*(unsigned char *)(result + 17680)) {
        goto LABEL_6;
      }
      uint64_t v10 = *(void *)(result + 28960);
      if (!v10 || !*(unsigned char *)(v10 + 478))
      {
        int v2 = *(unsigned char *)(*(void *)(result + 29480) + 58) != 0;
        goto LABEL_6;
      }
    }
    int v2 = 1;
  }
LABEL_6:
  int v3 = *v1;
  if (v3 != v2)
  {
    *uint64_t v1 = v2;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1520) |= 0x400000u;
    int v3 = v2;
  }
  uint64_t v4 = *(void *)(result + 29032);
  if ((*(unsigned char *)(v4 + 25) & 0x7F) == 2)
  {
    if (v3)
    {
      uint64_t v5 = *(void *)(result + 28960);
      uint64_t v6 = (unsigned __int8 *)(v4 + 59);
      if (v5) {
        uint64_t v6 = (unsigned __int8 *)(v5 + 478);
      }
      int v7 = *v6 < 2u;
    }
    else
    {
      int v7 = 0;
    }
    unsigned int v8 = *(unsigned __int8 *)(result + 32507);
    if (v7 != v8 >> 7)
    {
      if (v7) {
        char v9 = 0x80;
      }
      else {
        char v9 = 0;
      }
      *(unsigned char *)(result + 32507) = v9 & 0x80 | v8 & 0x7F;
      *(_DWORD *)(result + 28652) = 0;
      *(_DWORD *)(result + 1548) |= 0x10000u;
    }
  }
  return result;
}

uint64_t gleDeriveVersion(uint64_t a1)
{
  v4[3] = *MEMORY[0x263EF8340];
  uint64_t v1 = (unsigned char *)(a1 + 32406);
  uint64_t result = gleGetFilteredExtensions(a1, (uint64_t)v4);
  v1[1] = 46;
  v1[3] = 0;
  int v3 = v1[95];
  if ((v3 - 2) <= 2)
  {
    *uint64_t v1 = v3 + 47;
    v1[2] = 0x303031u >> (8 * (v3 - 2));
  }
  return result;
}

uint64_t gleGetFilteredExtensions(uint64_t result, uint64_t a2)
{
  if ((*(_WORD *)(result + 32493) & 8) != 0)
  {
    uint64_t v4 = 0;
    *(void *)(a2 + 16) = 0;
    *(_OWORD *)a2 = xmmword_227DC2550;
    uint64_t v5 = *(void *)(result + 29480) + 560;
    do
    {
      *(_DWORD *)(a2 + v4) &= *(_DWORD *)(v5 + v4);
      v4 += 4;
    }
    while (v4 != 24);
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v3 = *(void *)(result + 29480) + 560;
    do
    {
      *(_DWORD *)(a2 + v2) = *(_DWORD *)(v3 + v2);
      v2 += 4;
    }
    while (v2 != 24);
    if ((*(_WORD *)(result + 32493) & 2) != 0) {
      *(_DWORD *)(a2 + 12) &= ~0x100u;
    }
  }
  return result;
}

uint64_t gleGetClampedStencilValue(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = *(void *)(a1 + 28960);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 184);
    if (v4)
    {
      int v8 = 0;
      (*(void (**)(void, void, void, void, uint64_t, int *))(*(void *)(a1 + 29496) + 376))(*(void *)(a1 + 29464), *(void *)(v4 + 8 * *(unsigned __int8 *)(a1 + 32500) + 40), *(unsigned int *)(v3 + 444), *(unsigned int *)(v3 + 448), 35057, &v8);
      char v5 = v8;
    }
    else
    {
      char v5 = 0;
    }
  }
  else
  {
    char v5 = *(unsigned char *)(*(void *)(a1 + 29480) + 57);
  }
  unsigned int v6 = 0x7FFFFFFFu >> ~v5;
  if (v6 >= a2) {
    return a2;
  }
  else {
    return v6;
  }
}

uint64_t gleUpdateReadFramebufferStateInline_0(uint64_t result, double a2, double a3, double a4)
{
  uint64_t v4 = result;
  uint64_t v5 = result + 19152;
  if ((*(unsigned char *)(result + 1540) & 4) != 0)
  {
    uint64_t result = gleGenerateMatrixIdentifier(result, result + 9488, a2, a3, a4);
    *(_DWORD *)uint64_t v5 = *(_DWORD *)v5 & 0xFFFFFEFF | ((result != -1074791426) << 8);
    *(_DWORD *)(v5 + 10580) = result;
  }
  if ((*(unsigned char *)(v5 + 10651) & 0x8A) != 0)
  {
    uint64_t result = gleUpdateReadFramebufferState(v4);
    if (result)
    {
      if (result != 16711680 && !*(_WORD *)(v4 + 29832)) {
        *(_WORD *)(v4 + 29832) = result;
      }
    }
  }
  return result;
}

uint64_t gleGetIndexedState(uint64_t a1, int a2, unsigned int a3, void *a4, _DWORD *a5, unsigned char *a6)
{
  unsigned int v6 = (_WORD *)(a1 + 29832);
  *a5 = 5124;
  *a6 = 0;
  if ((a2 - 35972) <= 0xB && ((1 << (a2 + 124)) & 0x803) != 0)
  {
    if (*(_DWORD *)(*(void *)(a1 + 29480) + 480) > a3)
    {
      switch(a2)
      {
        case 35972:
          uint64_t v11 = *(void *)(a1 + 26432);
          if (*(void *)(v11 + 8 * a3 + 128))
          {
            uint64_t v8 = *(void *)(v11 + 8 * a3 + 48);
            goto LABEL_25;
          }
          goto LABEL_33;
        case 35973:
          uint64_t v12 = *(void *)(a1 + 26432);
          if (*(void *)(v12 + 8 * a3 + 128))
          {
            uint64_t v8 = *(void *)(v12 + 8 * a3 + 88);
            goto LABEL_25;
          }
          goto LABEL_33;
        case 35983:
          uint64_t v7 = *(void *)(*(void *)(a1 + 26432) + 8 * a3 + 128);
          if (v7)
          {
LABEL_8:
            uint64_t v8 = *(unsigned int *)(v7 + 16);
LABEL_25:
            *a4 = v8;
            return 1;
          }
LABEL_33:
          *a4 = 0;
          return 1;
      }
      return 1;
    }
LABEL_18:
    uint64_t v9 = (unsigned __int16)*v6;
    if (*v6) {
      return 0;
    }
    *unsigned int v6 = 1281;
    return v9;
  }
  uint64_t v9 = 0xFFFFFFFFLL;
  if ((a2 - 35368) <= 2 && *(unsigned char *)(a1 + 32501) == 4)
  {
    if (*(unsigned __int8 *)(*(void *)(a1 + 29480) + 506) > a3)
    {
      switch(a2)
      {
        case 35370:
          uint64_t v13 = *(void *)(a1 + 24888);
          if (!v13 || !*(void *)(v13 + 8 * a3)) {
            goto LABEL_33;
          }
          uint64_t v14 = a3;
          uint64_t v15 = *(void *)(a1 + 24880);
          break;
        case 35369:
          uint64_t v16 = *(void *)(a1 + 24888);
          if (!v16 || !*(void *)(v16 + 8 * a3)) {
            goto LABEL_33;
          }
          uint64_t v14 = a3;
          uint64_t v15 = *(void *)(a1 + 24872);
          break;
        case 35368:
          uint64_t v10 = *(void *)(a1 + 24888);
          if (v10)
          {
            uint64_t v7 = *(void *)(v10 + 8 * a3);
            if (v7) {
              goto LABEL_8;
            }
          }
          goto LABEL_33;
        default:
          return 1;
      }
      uint64_t v8 = *(void *)(v15 + 8 * v14);
      goto LABEL_25;
    }
    goto LABEL_18;
  }
  return v9;
}

uint64_t gleSwitchPlugin(unint64_t a1, int a2)
{
  uint64_t v4 = (unsigned __int8 *)(a1 + 32481);
  unint64_t v5 = a1 + 24864;
  unint64_t v6 = a1 + 17985;
  if (*(unsigned char *)(a1 + 32481))
  {
    if (*(__int16 *)(a1 + 17986) != -1)
    {
      uint64_t v7 = *(void *)(a1 + 24768);
      if (!v7)
      {
        uint64_t v7 = *(void *)(a1 + 24776);
        if (v7)
        {
          uint64_t v36 = v7 + 40;
          unsigned int v37 = 3;
          while (1)
          {
            uint64_t v7 = *(void *)(v36 + 8 * v37);
            if (v7) {
              break;
            }
            if (--v37 == -1)
            {
              uint64_t v7 = 0;
              break;
            }
          }
        }
      }
      uint64_t v8 = 0;
      *(unsigned char *)unint64_t v6 = 1;
      *(_WORD *)(a1 + 17986) = -1;
      do
      {
        if ((*(_DWORD *)(v7 + 3724) >> v8))
        {
          uint64_t v9 = *(void *)(*(void *)(a1 + 26432) + 8 * v8 + 128);
          uint64_t v10 = *(void *)(a1 + 29024);
          *(unsigned char *)(v9 + 167) = 0;
          *(void *)(v9 + 192) = v10;
          uint64_t v11 = *(void *)(a1 + 26384);
          if (v11) {
            *(unsigned char *)(v11 + 1216) = 0;
          }
        }
        ++v8;
      }
      while (v8 != 5);
      *(_DWORD *)(a1 + 28652) = 0;
      *(_DWORD *)(a1 + 1524) |= 0x40000000u;
      (*(void (**)(void, void))(*(void *)(a1 + 29496) + 168))(*(void *)(a1 + 29464), 0);
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 26432);
    if (*(__int16 *)(v12 + 42) != -1 && !*(unsigned char *)(v12 + 41))
    {
      uint64_t v13 = *(void *)(a1 + 24768);
      if (!v13)
      {
        uint64_t v14 = *(void *)(a1 + 24776);
        if (v14)
        {
          uint64_t v15 = v14 + 40;
          unsigned int v16 = 3;
          while (1)
          {
            uint64_t v13 = *(void *)(v15 + 8 * v16);
            if (v13) {
              break;
            }
            if (--v16 == -1) {
              goto LABEL_17;
            }
          }
        }
        else
        {
LABEL_17:
          uint64_t v13 = 0;
        }
      }
      for (uint64_t i = 0; i != 5; ++i)
      {
        if ((*(_DWORD *)(v13 + 3724) >> i))
        {
          uint64_t v18 = *(void *)(*(void *)(a1 + 26432) + 8 * i + 128);
          *(unsigned char *)(v18 + 167) = 1;
          uint64_t v19 = v4[15];
          if (v4[15])
          {
            uint64_t v20 = (_DWORD *)(v18 + 304);
            do
            {
              *v20 |= 4u;
              v20 += 2;
              --v19;
            }
            while (v19);
          }
          gleDirtyBufferObjectCurrentBindPoints(a1, v18 + 40);
        }
      }
    }
  }
  if (*(void *)(a1 + 28992)) {
    int v21 = v4[17];
  }
  else {
    int v21 = a2;
  }
  uint64_t v22 = a1 + 32512 + 1672 * v21;
  uint64_t v23 = *(void *)(v22 + 8);
  gleSynchronizePluginTextures(a1);
  gleSynchronizePluginBuffers(a1, v21);
  gleSynchronizePluginQueries(a1, v23);
  v4[18] = a2;
  uint64_t v24 = a1 + 32512 + 1672 * a2;
  *(_OWORD *)(v5 + 4152) = *(_OWORD *)v24;
  *(void *)(a1 + 29032) = v24 + 16;
  *(void *)(a1 + 29448) = *(void *)(v24 + 1648) + 1056;
  *(void *)(a1 + 29456) = *(void *)(v24 + 1656) + 32;
  v4[19] = v21;
  *(_OWORD *)(v5 + 4600) = *(_OWORD *)v22;
  *(void *)(a1 + 29480) = v22 + 16;
  *(void *)(a1 + 29496) = *(void *)(v22 + 1648) + 1056;
  *(void *)(a1 + 29504) = *(void *)(v22 + 1656) + 32;
  unint64_t v25 = *(void *)(a1 + 28992);
  if (!v25) {
    unint64_t v25 = a1 + 29040;
  }
  *(void *)(a1 + 29488) = v25;
  *(_OWORD *)(v5 + 1416) = *(_OWORD *)(v24 + 552);
  if (*(_WORD *)(a1 + 2276) == 1)
  {
    if (*(unsigned char *)(a1 + 1672 * a2 + 32629))
    {
      *(_DWORD *)(v5 + 3788) = 0;
      *(_DWORD *)(a1 + 1544) |= 0x40000000u;
    }
  }
  else if (!*(_WORD *)(a1 + 2276) && !*(unsigned char *)(a1 + 1672 * a2 + 32629))
  {
    *(_WORD *)(a1 + 2276) = 1;
  }
  gleSetBaseTCLState(a1);
  *uint64_t v4 = *(unsigned char *)(*(void *)(a1 + 29032) + 101);
  gleUpdateContextStateData(a1, 0);
  *(_DWORD *)(v5 + 4932) = *(_DWORD *)(v5 + 4932) & 0xFFFFFFBE | (*v4 != 0) | ((*v4 != *(unsigned __int8 *)(*(void *)(a1 + 29032) + 101)) << 6);
  gleReconfigurePipelineProgramState(a1);
  gleResetDrawArraysFuncs(a1);
  gleSetColorMaterialEnable(a1);
  gleUpdateInverseNeeds(a1);
  gleRestartPluginQueries(a1);
  if ((*(_DWORD *)v5 & 0xFFFFFFEF) != 0)
  {
    if (*v4)
    {
      if (*(__int16 *)(v6 + 1) == -1 && !*(unsigned char *)v6)
      {
        uint64_t v38 = *(void *)(a1 + 26432);
        int v39 = *(unsigned __int16 *)(v38 + 42);
        if (v39 != 0xFFFF && !*(unsigned char *)(v38 + 41))
        {
          uint64_t v40 = v4[15];
          if (v4[15])
          {
            uint64_t v41 = v4 + 1103;
            do
            {
              *uint64_t v41 = 0;
              v41 += 209;
              --v40;
            }
            while (v40);
            LOWORD(v39) = *(_WORD *)(v38 + 42);
          }
          *(_WORD *)(v6 + 1) = v39;
          *(_DWORD *)(v5 + 3788) = 0;
          *(_DWORD *)(a1 + 1524) |= 0x40000000u;
          (*(void (**)(void, void))(*(void *)(a1 + 29496) + 168))(*(void *)(a1 + 29464), 0);
          if (v4[15])
          {
            uint64_t v42 = 0;
            uint64_t v43 = *(void *)(a1 + 26432);
            uint64_t v44 = v4 + 1103;
            uint64_t v45 = 8 * v4[15];
            do
            {
              void *v44 = *(void *)(*(void *)(v43 + 160) + v42 + 40);
              v42 += 8;
              v44 += 209;
            }
            while (v45 != v42);
          }
        }
      }
      uint64_t v26 = *(void *)(a1 + 26432);
      *(unsigned char *)unint64_t v6 = *(unsigned char *)(v26 + 41);
      *(_WORD *)(v6 + 1) = *(_WORD *)(v26 + 42);
      if (*(__int16 *)(v26 + 42) != -1 && !*(unsigned char *)(v26 + 41))
      {
        uint64_t v27 = *(void *)(a1 + 24768);
        if (!v27)
        {
          uint64_t v28 = *(void *)(a1 + 24776);
          if (v28)
          {
            uint64_t v29 = v28 + 40;
            unsigned int v30 = 3;
            while (1)
            {
              uint64_t v27 = *(void *)(v29 + 8 * v30);
              if (v27) {
                break;
              }
              if (--v30 == -1) {
                goto LABEL_47;
              }
            }
          }
          else
          {
LABEL_47:
            uint64_t v27 = 0;
          }
        }
        for (uint64_t j = 0; j != 5; ++j)
        {
          if ((*(_DWORD *)(v27 + 3724) >> j))
          {
            uint64_t v32 = *(void *)(*(void *)(a1 + 26432) + 8 * j + 128);
            if (*(unsigned char *)(v32 + 165))
            {
              if (!*(void *)(v32 + 192)) {
                gfxWaitBufferOnDevices();
              }
            }
          }
        }
        *(_DWORD *)(v5 + 3788) = 0;
        *(_DWORD *)(a1 + 1524) |= 0x40000000u;
        (*(void (**)(void, void))(*(void *)(a1 + 29496) + 168))(*(void *)(a1 + 29464), 0);
      }
    }
    else
    {
      gleResetTransformFeedbackBufferCachePointers((void *)a1);
    }
  }
  if (!v4[23])
  {
    uint64_t v33 = *(void *)(a1 + 29032);
    float v34 = *(float *)(v33 + 64);
    if (v34 < *(float *)(v33 + 72)) {
      float v34 = *(float *)(v33 + 72);
    }
    *(float *)(a1 + 15352) = v34;
  }
  uint64_t result = gleUpdatePointAttenuation(a1);
  *(_DWORD *)(v5 + 3788) = 0;
  *(_DWORD *)(a1 + 1548) |= 0x48002u;
  return result;
}

uint64_t gleUpdatePluginConfig(uint64_t a1)
{
  uint64_t v2 = a1 + 15176;
  BOOL v3 = *(unsigned char *)(*(void *)(a1 + 29480) + 41) == 0;
  if (*(unsigned char *)(*(void *)(a1 + 29480) + 41)) {
    __int16 v4 = 1029;
  }
  else {
    __int16 v4 = 1028;
  }
  *(_WORD *)(a1 + 29844) = v4;
  if (v3) {
    __int16 v5 = 1024;
  }
  else {
    __int16 v5 = 1026;
  }
  *(_WORD *)uint64_t v2 = v5;
  *(_WORD *)(a1 + 15180) = v5;
  *(_WORD *)(a1 + 29836) = v4;
  uint64_t result = gleUpdateViewScissorData(a1);
  *(_DWORD *)(v2 + 13476) = 0;
  *(_DWORD *)(a1 + 1548) |= 0x48000u;
  return result;
}

uint64_t gleUpdateDrawColorClamping(uint64_t a1, double a2, double a3, double a4)
{
  __int16 v5 = (unsigned char *)(a1 + 29714);
  unint64_t v6 = (_DWORD *)(a1 + 24864);
  uint64_t v7 = (unsigned char *)(a1 + 15178);
  int v8 = *(unsigned __int8 *)(a1 + 32488);
  if (*(unsigned __int16 *)(a1 + 29708) != 35101) {
    goto LABEL_16;
  }
  int v9 = v8 == 0;
  if (*v5 == v9) {
    goto LABEL_16;
  }
  unsigned char *v5 = v9;
  if ((*v6 & 8) != 0)
  {
    uint64_t v12 = *(void *)(a1 + 24768);
    if (!v12) {
      uint64_t v12 = *(void *)(*(void *)(a1 + 24776) + 64);
    }
    int v10 = (*(unsigned char *)(v12 + 2326) | v8) == 0;
    char v13 = *(unsigned char *)(v12 + 2327);
    goto LABEL_12;
  }
  if (*v6)
  {
    uint64_t v14 = *(void *)(a1 + 24768);
    if (!v14) {
      uint64_t v14 = *(void *)(*(void *)(a1 + 24776) + 40);
    }
    int v10 = (*(unsigned char *)(v14 + 214) | v8) == 0;
    char v13 = *(unsigned char *)(v14 + 215);
LABEL_12:
    int v11 = (v13 | v8) == 0;
    goto LABEL_13;
  }
  int v10 = v8 == 0;
  int v11 = v10;
LABEL_13:
  if (v10 != *(unsigned __int8 *)(a1 + 17702) || v11 != *(unsigned __int8 *)(a1 + 17703))
  {
    *(unsigned char *)(a1 + 17702) = v10;
    *(unsigned char *)(a1 + 17703) = v11;
    *(_DWORD *)(a1 + 1524) |= 0x400000u;
    *(_DWORD *)(a1 + 28652) = 0;
    *(_DWORD *)(a1 + 1548) |= 0x400u;
  }
LABEL_16:
  if (*(unsigned __int16 *)(a1 + 29710) == 35101)
  {
    int v15 = v8 == 0;
    if (*v7 != v15)
    {
      *uint64_t v7 = v15;
      gleUpdateFragmentColorClamping(a1);
      *(_DWORD *)(a1 + 1524) |= 0x400000u;
      v6[947] = 0;
      *(_DWORD *)(a1 + 1548) |= 0x60000u;
    }
  }

  return gleUpdateBufferColorClamping(a1, a2, a3, a4);
}

uint64_t gleUpdateReadColorClamping(uint64_t result)
{
  int v1 = *(unsigned char *)(result + 32489) == 0;
  if (*(unsigned __int16 *)(result + 29712) == 35101 && *(unsigned __int8 *)(result + 15179) != v1)
  {
    *(unsigned char *)(result + 15179) = v1;
    *(_DWORD *)(result + 28652) = 0;
    *(_DWORD *)(result + 1524) |= 0x400000u;
  }
  return result;
}

uint64_t gleCPChanged(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24768);
  if (!v2) {
    uint64_t v2 = *(void *)(*(void *)(a1 + 24776) + 48);
  }
  if (*(unsigned char *)(v2 + 917))
  {
    uint64_t v3 = 0;
    uint64_t v4 = v2 + 932;
    do
    {
      *(_DWORD *)(a1 + 1680 + v3) = *(_DWORD *)(v4 + v3);
      v3 += 4;
    }
    while (v3 != 128);
    int v5 = 17317888;
  }
  else
  {
    *(_OWORD *)(a1 + 1792) = 0u;
    *(_OWORD *)(a1 + 1776) = 0u;
    *(_OWORD *)(a1 + 1760) = 0u;
    *(_OWORD *)(a1 + 1744) = 0u;
    *(_OWORD *)(a1 + 1728) = 0u;
    *(_OWORD *)(a1 + 1712) = 0u;
    *(_OWORD *)(a1 + 1696) = 0u;
    int v5 = 540672;
    *(_OWORD *)(a1 + 1680) = 0u;
  }
  gleUpdateInverseNeeds(a1);
  uint64_t result = gleUpdateInvalidPrimitives(a1);
  *(_DWORD *)(a1 + 1532) |= v5;
  *(_DWORD *)(a1 + 28652) = 0;
  *(_DWORD *)(a1 + 1548) |= 0x200000u;
  return result;
}

uint64_t gleCPDisable(_DWORD *a1)
{
  uint64_t result = gleUpdateInvalidPrimitives((uint64_t)a1);
  a1[383] |= 0x80000u;
  a1[7163] = 0;
  a1[387] |= 0x200000u;
  return result;
}

uint64_t gleEPChanged(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24768);
  if (!v2) {
    uint64_t v2 = *(void *)(*(void *)(a1 + 24776) + 56);
  }
  if (*(unsigned char *)(v2 + 1621))
  {
    uint64_t v3 = 0;
    uint64_t v4 = v2 + 1636;
    do
    {
      *(_DWORD *)(a1 + 1808 + v3) = *(_DWORD *)(v4 + v3);
      v3 += 4;
    }
    while (v3 != 128);
    int v5 = 34635776;
  }
  else
  {
    *(_OWORD *)(a1 + 1920) = 0u;
    *(_OWORD *)(a1 + 1904) = 0u;
    *(_OWORD *)(a1 + 1888) = 0u;
    *(_OWORD *)(a1 + 1872) = 0u;
    *(_OWORD *)(a1 + 1856) = 0u;
    *(_OWORD *)(a1 + 1840) = 0u;
    *(_OWORD *)(a1 + 1824) = 0u;
    int v5 = 1081344;
    *(_OWORD *)(a1 + 1808) = 0u;
  }
  gleUpdateInverseNeeds(a1);
  uint64_t result = gleUpdateInvalidPrimitives(a1);
  *(_DWORD *)(a1 + 1532) |= v5;
  *(_DWORD *)(a1 + 28652) = 0;
  *(_DWORD *)(a1 + 1548) |= 0x400000u;
  return result;
}

uint64_t gleEPDisable(_DWORD *a1)
{
  uint64_t result = gleUpdateInvalidPrimitives((uint64_t)a1);
  a1[383] |= 0x100000u;
  a1[7163] = 0;
  a1[387] |= 0x400000u;
  return result;
}

uint64_t gleCheckReadPixelsNeeds(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v4 = a1 + 32493;
  int v5 = (_WORD *)(a1 + 29832);
  if ((*(_WORD *)(a1 + 32493) & 0x100) != 0) {
    goto LABEL_40;
  }
  uint64_t v6 = *(void *)(a1 + 28968);
  if (v6)
  {
    if (*(unsigned char *)(v6 + 478)) {
      goto LABEL_40;
    }
  }
  if (a2 > 6400)
  {
    if (a2 == 34041) {
      goto LABEL_11;
    }
    if (a2 != 6402)
    {
      int v7 = 6401;
      goto LABEL_10;
    }
LABEL_16:
    if (v6)
    {
      if (!*(void *)(v6 + 168)) {
        goto LABEL_40;
      }
    }
    else if (!*(unsigned char *)(*(void *)(a1 + 29480) + 56))
    {
LABEL_40:
      uint64_t result = 0;
      if (!*v5) {
        _WORD *v5 = 1282;
      }
      return result;
    }
    return 1;
  }
  if (a2 == 6145) {
    goto LABEL_16;
  }
  int v7 = 6146;
LABEL_10:
  if (a2 == v7)
  {
LABEL_11:
    if (v6)
    {
      if (!*(void *)(v6 + 184)) {
        goto LABEL_40;
      }
    }
    else if (!*(unsigned char *)(*(void *)(a1 + 29480) + 57))
    {
      goto LABEL_40;
    }
    if (a2 != 34041) {
      return 1;
    }
    goto LABEL_16;
  }
  if (!v6)
  {
    if (!*(_WORD *)(a1 + 15176) || a4) {
      goto LABEL_40;
    }
    return 1;
  }
  if (!*(_WORD *)(v6 + 472)) {
    goto LABEL_40;
  }
  uint64_t v8 = *(void *)(v6 + 16 * *(unsigned __int16 *)(v6 + 472) - 576984);
  if (!v8) {
    goto LABEL_40;
  }
  int v9 = *(unsigned __int16 *)(v8 + 1000);
  if ((v9 - 36208) >= 0x24)
  {
    BOOL v12 = v9 != 36975 && (v9 - 33329) >= 0xC;
    int v10 = !v12;
  }
  else
  {
    int v10 = 1;
  }
  if (v10 != a4) {
    goto LABEL_40;
  }
  uint64_t result = 1;
  if (a3)
  {
    if (*(unsigned char *)(v4 + 8) == 4 && (a3 - 35920) < 0xFFFFFFF1 == (v9 - 35905) < 0xF) {
      goto LABEL_40;
    }
  }
  return result;
}

uint64_t gleCheckTexImage2DArgs(uint64_t a1, int a2, signed int a3, int a4, int a5, unsigned int a6, int a7, int a8, int a9, unint64_t *a10)
{
  uint64_t v16 = a1 + 29832;
  uint64_t v17 = gleLookUpTexture2D(a1, a2);
  unint64_t v18 = glePixelStorageFromFormatType(a1, a8, a9);
  *a10 = v18;
  if (v17)
  {
    if (!*(unsigned char *)(v17 + 559) && (a8 != 35359 || (a5 & 1) == 0 && !a3 && (*(_WORD *)(v17 + 768) & 0xF) != 0))
    {
      unsigned int v19 = a5 - 2 * a7;
      unsigned int v20 = a6 - 2 * a7;
      int v21 = *(_DWORD *)(a1 + 19152);
      if ((v21 & 6) == 0) {
        goto LABEL_17;
      }
      if ((v21 & 2) != 0)
      {
        if (*(unsigned __int16 *)(a1 + 18856) != 32790) {
          goto LABEL_17;
        }
        unsigned int v19 = v19 - *(_DWORD *)(a1 + 18872) + 1;
        uint64_t v22 = (_DWORD *)(a1 + 18876);
      }
      else
      {
        if ((v21 & 4) == 0 || *(unsigned __int16 *)(a1 + 18928) != 32790)
        {
LABEL_17:
          int v25 = 1;
          switch(*(_WORD *)(v17 + 768) & 0xF)
          {
            case 0:
              if (v19 != v20) {
                goto LABEL_65;
              }
              uint64_t v26 = *(void *)(a1 + 29032);
              if ((int)v19 > *(unsigned __int16 *)(v26 + 168)) {
                goto LABEL_65;
              }
              int v25 = *(_DWORD *)(v26 + 572) >> 31;
              goto LABEL_21;
            case 2:
              if ((v19 & 0x80000000) != 0) {
                goto LABEL_65;
              }
              unsigned int v33 = *(unsigned __int16 *)(*(void *)(a1 + 29032) + 166);
              if (v19 > v33 || v20 > v33 || a3 > 0 || a7) {
                goto LABEL_65;
              }
              goto LABEL_53;
            case 3:
LABEL_21:
              if ((v19 & 0x80000000) != 0 || a7 && !v19) {
                goto LABEL_65;
              }
              if ((v19 & (v19 - 1)) != 0)
              {
                int v27 = *(unsigned __int8 *)(v16 + 2669);
                if (v27 != 4 && (a3 || v27 != 3 && (*(unsigned char *)(*(void *)(a1 + 29032) + 578) & 0x10) == 0)) {
                  goto LABEL_65;
                }
              }
              uint64_t v28 = *(void *)(a1 + 29032);
              unsigned int v29 = *(unsigned __int16 *)(v28 + 160);
              if (v19 > v29) {
                goto LABEL_65;
              }
              BOOL v30 = a7 && v20 == 0;
              BOOL v31 = v30;
              if ((v20 & 0x80000000) != 0) {
                goto LABEL_65;
              }
              if (v31) {
                goto LABEL_65;
              }
              if ((v20 & (v20 - 1)) != 0)
              {
                int v32 = *(unsigned __int8 *)(v16 + 2669);
                if (v32 != 4 && (a3 || v32 != 3 && (*(unsigned char *)(v28 + 578) & 0x10) == 0)) {
                  goto LABEL_65;
                }
              }
              if (v20 > v29) {
                goto LABEL_65;
              }
              goto LABEL_53;
            case 6:
              if ((v19 & 0x80000000) == 0 && (!a7 || v19))
              {
                if ((v19 & (v19 - 1)) == 0
                  || (int v34 = *(unsigned __int8 *)(v16 + 2669), v34 == 4)
                  || !a3 && (v34 == 3 || (*(unsigned char *)(*(void *)(a1 + 29032) + 578) & 0x10) != 0))
                {
                  uint64_t v35 = *(void *)(a1 + 29032);
                  if (v19 <= *(unsigned __int16 *)(v35 + 160)
                    && (a6 & 0x80000000) == 0
                    && *(unsigned __int16 *)(v35 + 162) >= a6)
                  {
                    goto LABEL_53;
                  }
                }
              }
LABEL_65:
              if (*(_WORD *)v16) {
                return 0;
              }
              uint64_t result = 0;
              __int16 v24 = 1281;
              break;
            default:
LABEL_53:
              if (gleCheckTexImageArgs(a1, a3, a4, a8, v18, a7, v25)) {
                return v17;
              }
              else {
                return 0;
              }
          }
          goto LABEL_68;
        }
        unsigned int v19 = v19 - *(_DWORD *)(a1 + 18944) + 1;
        uint64_t v22 = (_DWORD *)(a1 + 18948);
      }
      unsigned int v20 = v20 - *v22 + 1;
      goto LABEL_17;
    }
    if (!*(_WORD *)v16)
    {
      uint64_t result = 0;
      __int16 v24 = 1282;
      goto LABEL_68;
    }
    return 0;
  }
  if (*(_WORD *)v16) {
    return 0;
  }
  uint64_t result = 0;
  __int16 v24 = 1280;
LABEL_68:
  *(_WORD *)uint64_t v16 = v24;
  return result;
}

uint64_t gleCheckTexStorageArgs(uint64_t a1, int a2, int a3, int a4)
{
  int v4 = 0;
  uint64_t v5 = a1 + 29832;
  uint64_t result = 1;
  if (a2 > 36193)
  {
    if (a2 > 36974)
    {
      switch(a2)
      {
        case 37793:
          return result;
        case 37794:
        case 37795:
        case 37796:
        case 37797:
        case 37798:
        case 37799:
        case 37800:
        case 37801:
        case 37802:
        case 37803:
        case 37804:
        case 37805:
        case 37806:
        case 37807:
        case 37822:
        case 37823:
        case 37824:
        case 37825:
        case 37826:
        case 37827:
        case 37828:
        case 37829:
        case 37830:
        case 37831:
        case 37832:
        case 37833:
        case 37834:
        case 37835:
        case 37836:
        case 37837:
        case 37838:
        case 37839:
        case 37854:
        case 37855:
        case 37856:
        case 37857:
        case 37858:
        case 37859:
        case 37860:
        case 37861:
        case 37862:
        case 37863:
        case 37864:
        case 37865:
        case 37866:
        case 37867:
        case 37868:
        case 37869:
        case 37870:
        case 37871:
        case 37872:
        case 37873:
        case 37875:
        case 37876:
        case 37877:
        case 37878:
        case 37879:
        case 37880:
        case 37882:
        case 37883:
        case 37884:
        case 37885:
          goto LABEL_51;
        case 37808:
        case 37809:
        case 37810:
        case 37811:
        case 37812:
        case 37813:
        case 37814:
        case 37815:
        case 37816:
        case 37817:
        case 37818:
        case 37819:
        case 37820:
        case 37821:
        case 37840:
        case 37841:
        case 37842:
        case 37843:
        case 37844:
        case 37845:
        case 37846:
        case 37847:
        case 37848:
        case 37849:
        case 37850:
        case 37851:
        case 37852:
        case 37853:
        case 37886:
        case 37887:
        case 37888:
        case 37889:
        case 37890:
        case 37891:
        case 37892:
        case 37893:
        case 37894:
        case 37895:
        case 37896:
        case 37897:
        case 37898:
        case 37899:
        case 37900:
        case 37901:
          goto LABEL_4;
        case 37874:
        case 37881:
          goto LABEL_5;
        default:
          if ((a2 - 37488) < 0xA) {
            goto LABEL_4;
          }
          if (a2 != 36975) {
            goto LABEL_51;
          }
          goto LABEL_5;
      }
    }
    switch(a2)
    {
      case 36194:
        return result;
      case 36195:
      case 36196:
      case 36197:
      case 36198:
      case 36199:
      case 36200:
      case 36201:
      case 36202:
      case 36203:
      case 36204:
      case 36205:
      case 36206:
      case 36207:
      case 36210:
      case 36211:
      case 36212:
      case 36213:
      case 36216:
      case 36217:
      case 36218:
      case 36219:
      case 36222:
      case 36223:
      case 36224:
      case 36225:
      case 36228:
      case 36229:
      case 36230:
      case 36231:
      case 36234:
      case 36235:
      case 36236:
      case 36237:
      case 36240:
      case 36241:
      case 36242:
      case 36243:
      case 36244:
      case 36245:
      case 36246:
      case 36247:
      case 36248:
      case 36249:
      case 36250:
      case 36251:
      case 36252:
      case 36253:
      case 36254:
      case 36255:
      case 36256:
      case 36257:
      case 36258:
      case 36259:
      case 36260:
      case 36261:
      case 36262:
      case 36263:
      case 36264:
      case 36265:
      case 36266:
      case 36267:
      case 36268:
      case 36269:
      case 36270:
      case 36271:
      case 36272:
      case 36273:
      case 36274:
      case 36275:
      case 36276:
      case 36277:
      case 36278:
      case 36279:
      case 36280:
      case 36281:
      case 36282:
      case 36283:
      case 36284:
      case 36285:
      case 36286:
        goto LABEL_51;
      case 36208:
      case 36209:
      case 36214:
      case 36215:
      case 36220:
      case 36221:
      case 36226:
      case 36227:
      case 36232:
      case 36233:
      case 36238:
      case 36239:
        goto LABEL_21;
      default:
        if ((a2 - 36756) >= 4) {
          goto LABEL_51;
        }
        goto LABEL_5;
    }
    return result;
  }
  if (a2 > 33775)
  {
    if (a2 > 35445)
    {
      if (a2 > 35897)
      {
        switch(a2)
        {
          case 35898:
          case 35901:
            goto LABEL_45;
          case 35899:
          case 35900:
          case 35902:
          case 35903:
          case 35904:
          case 35906:
          case 35908:
          case 35909:
          case 35910:
          case 35911:
          case 35912:
          case 35913:
          case 35914:
          case 35915:
          case 35916:
          case 35917:
          case 35918:
          case 35919:
            goto LABEL_51;
          case 35905:
          case 35907:
            goto LABEL_21;
          default:
            if ((a2 - 36012) >= 2) {
              goto LABEL_51;
            }
            int v4 = 1;
            break;
        }
        goto LABEL_21;
      }
      int v7 = 1;
      if ((a2 - 35840) >= 4)
      {
        if ((a2 - 35446) >= 2) {
          goto LABEL_51;
        }
LABEL_5:
        int v7 = v4;
        if ((*(unsigned char *)(v5 + 2669) & 0xFE) == 2) {
          goto LABEL_51;
        }
      }
    }
    else
    {
      if (a2 <= 35055)
      {
        char v8 = a2 - 20;
        if ((a2 - 34836) > 0x23) {
          goto LABEL_51;
        }
        if (((1 << v8) & 0xD34) != 0)
        {
          if (*(unsigned char *)(v5 + 2669) != 2) {
            return result;
          }
          goto LABEL_51;
        }
        if (((1 << v8) & 0xC3) == 0) {
          goto LABEL_51;
        }
        goto LABEL_45;
      }
      switch(a2)
      {
        case 35408:
        case 35410:
        case 35411:
        case 35416:
        case 35417:
        case 35418:
        case 35419:
          goto LABEL_51;
        case 35409:
          goto LABEL_45;
        case 35412:
        case 35413:
        case 35414:
        case 35415:
          if (*(unsigned char *)(v5 + 2669) == 2) {
            goto LABEL_51;
          }
          int v7 = 1;
          break;
        case 35420:
        case 35421:
        case 35422:
        case 35423:
LABEL_4:
          int v4 = 1;
          goto LABEL_5;
        default:
          if (a2 == 35056) {
            goto LABEL_44;
          }
          goto LABEL_51;
      }
    }
    if (a4 || !v7) {
      return result;
    }
    goto LABEL_49;
  }
  if (a2 > 33188)
  {
    if ((a2 - 33321) > 0x13)
    {
      if ((a2 - 33189) >= 3) {
        goto LABEL_51;
      }
LABEL_44:
      int v4 = 1;
    }
    else
    {
      int v9 = 1 << (a2 - 41);
      if ((v9 & 0xFFF00) != 0)
      {
LABEL_21:
        int v10 = *(unsigned char *)(v5 + 2669) & 0xFE;
        goto LABEL_46;
      }
      if ((v9 & 0xF5) == 0) {
        goto LABEL_51;
      }
    }
LABEL_45:
    int v10 = *(unsigned __int8 *)(v5 + 2669);
LABEL_46:
    if (v10 != 2)
    {
      if (a3 || !v4) {
        return result;
      }
LABEL_49:
      if (!*(_WORD *)v5)
      {
        uint64_t result = 0;
        __int16 v11 = 1282;
LABEL_54:
        *(_WORD *)uint64_t v5 = v11;
        return result;
      }
      return 0;
    }
LABEL_51:
    if (!*(_WORD *)v5)
    {
      uint64_t result = 0;
      __int16 v11 = 1280;
      goto LABEL_54;
    }
    return 0;
  }
  switch(a2)
  {
    case 32828:
    case 32832:
    case 32837:
    case 32849:
    case 32854:
    case 32855:
    case 32856:
      return result;
    case 32857:
      goto LABEL_21;
    default:
      goto LABEL_51;
  }
  return result;
}

uint64_t gleCheckTexStorage2DArgs(uint64_t a1, int a2, unsigned int a3, int a4, int a5, int a6)
{
  uint64_t v11 = a1 + 29832;
  uint64_t v12 = gleLookUpNonFaceTexture2D(a1, a2);
  if (!v12)
  {
    if (!*(_WORD *)v11)
    {
      uint64_t result = 0;
      __int16 v22 = 1280;
LABEL_70:
      *(_WORD *)uint64_t v11 = v22;
      return result;
    }
    return 0;
  }
  uint64_t v13 = v12;
  if (*(unsigned char *)(v12 + 559)) {
    goto LABEL_53;
  }
  if ((int)a3 <= 0)
  {
LABEL_67:
    if (!*(_WORD *)v11)
    {
      uint64_t result = 0;
      __int16 v22 = 1281;
      goto LABEL_70;
    }
    return 0;
  }
  if (v12 == *(void *)(a1 + 8 * (*(_WORD *)(v12 + 768) & 0xF) + 23592) + 40)
  {
LABEL_53:
    if (!*(_WORD *)v11)
    {
      uint64_t result = 0;
      __int16 v22 = 1282;
      goto LABEL_70;
    }
    return 0;
  }
  int v14 = 1;
  int v15 = 1;
  switch(*(_WORD *)(v12 + 768) & 0xF)
  {
    case 0:
      if (a5 < 1) {
        goto LABEL_67;
      }
      if (a5 != a6) {
        goto LABEL_67;
      }
      uint64_t v16 = *(void *)(a1 + 29032);
      unsigned int v17 = *(_DWORD *)(v16 + 572);
      if ((a5 & (a5 - 1)) != 0)
      {
        int v18 = *(unsigned __int8 *)(v11 + 2669);
        if (v18 != 4 && (a3 != 1 || v18 != 3 && (*(unsigned char *)(v16 + 578) & 0x10) == 0)) {
          goto LABEL_67;
        }
      }
      if (*(unsigned __int16 *)(v16 + 168) < a5) {
        goto LABEL_67;
      }
      unsigned int v19 = 0;
      int v14 = v17 >> 31;
      do
      {
        ++v19;
        BOOL v20 = a5 > 1;
        a5 = a5 >> 1;
      }
      while (v20);
      if (v19 < a3) {
        goto LABEL_53;
      }
      goto LABEL_40;
    case 1:
    case 4:
    case 5:
      goto LABEL_41;
    case 2:
      if (a3 >= 2) {
        goto LABEL_67;
      }
      if (a5 < 1) {
        goto LABEL_67;
      }
      int v23 = *(unsigned __int16 *)(*(void *)(a1 + 29032) + 166);
      if (v23 < a5 || a6 < 1 || v23 < a6) {
        goto LABEL_67;
      }
      int v15 = 0;
      goto LABEL_41;
    case 3:
      if (a5 < 1) {
        goto LABEL_67;
      }
      if ((a5 & (a5 - 1)) != 0)
      {
        int v24 = *(unsigned __int8 *)(v11 + 2669);
        if (v24 != 4 && (a3 != 1 || v24 != 3 && (*(unsigned char *)(*(void *)(a1 + 29032) + 578) & 0x10) == 0)) {
          goto LABEL_67;
        }
      }
      uint64_t v25 = *(void *)(a1 + 29032);
      unsigned int v26 = *(unsigned __int16 *)(v25 + 160);
      if (v26 < a5 || a6 < 1) {
        goto LABEL_67;
      }
      if ((a6 & (a6 - 1)) == 0) {
        goto LABEL_33;
      }
      int v27 = *(unsigned __int8 *)(v11 + 2669);
      if (v27 == 4) {
        goto LABEL_33;
      }
      if (a3 != 1) {
        goto LABEL_67;
      }
      if (v27 == 3)
      {
LABEL_33:
        if (v26 < a6) {
          goto LABEL_67;
        }
      }
      else if (v26 < a6 || (*(_DWORD *)(v25 + 576) & 0x100000) == 0)
      {
        goto LABEL_67;
      }
      unsigned int v28 = 0;
      if (a5 <= a6) {
        unsigned int v29 = a6;
      }
      else {
        unsigned int v29 = a5;
      }
      do
      {
        ++v28;
        BOOL v20 = v29 > 1;
        v29 >>= 1;
      }
      while (v20);
      if (v28 < a3) {
        goto LABEL_53;
      }
      int v14 = 1;
LABEL_40:
      int v15 = 1;
LABEL_41:
      if (gleCheckTexStorageArgs(a1, a4, v14, v15)) {
        uint64_t result = v13;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      if (a5 < 1) {
        goto LABEL_67;
      }
      if ((a5 & (a5 - 1)) != 0)
      {
        int v30 = *(unsigned __int8 *)(v11 + 2669);
        if (v30 != 4 && (a3 != 1 || v30 != 3 && (*(unsigned char *)(*(void *)(a1 + 29032) + 578) & 0x10) == 0)) {
          goto LABEL_67;
        }
      }
      uint64_t v31 = *(void *)(a1 + 29032);
      if (*(unsigned __int16 *)(v31 + 160) < a5
        || a6 < 1
        || *(unsigned __int16 *)(v31 + 162) < a6)
      {
        goto LABEL_67;
      }
      unsigned int v32 = 0;
      do
      {
        ++v32;
        BOOL v20 = a5 > 1;
        a5 = a5 >> 1;
      }
      while (v20);
      if (v32 < a3) {
        goto LABEL_53;
      }
      int v15 = 0;
      int v14 = 1;
      goto LABEL_41;
    default:
      goto LABEL_40;
  }
  return result;
}

uint64_t gleCheckTexStorage3DArgs(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t v13 = a1 + 29832;
  uint64_t v14 = gleLookUpTexture3D(a1, a2);
  if (!v14)
  {
    if (!*(_WORD *)v13)
    {
      uint64_t result = 0;
      __int16 v27 = 1280;
LABEL_90:
      *(_WORD *)uint64_t v13 = v27;
      return result;
    }
    return 0;
  }
  uint64_t v15 = v14;
  if (*(unsigned char *)(v14 + 559))
  {
LABEL_63:
    if (!*(_WORD *)v13)
    {
      uint64_t result = 0;
      __int16 v27 = 1282;
      goto LABEL_90;
    }
    return 0;
  }
  if (a3 <= 0) {
    goto LABEL_87;
  }
  uint64_t v16 = *(_WORD *)(v14 + 768) & 0xF;
  if (v14 == *(void *)(a1 + 8 * v16 + 23592) + 40) {
    goto LABEL_63;
  }
  switch(v16)
  {
    case 0xA:
      if (a5 < 1) {
        goto LABEL_87;
      }
      if (a5 != a6) {
        goto LABEL_87;
      }
      if ((a5 & (a5 - 1)) != 0)
      {
        int v28 = *(unsigned __int8 *)(v13 + 2669);
        if (v28 != 4 && (a3 != 1 || v28 != 3 && (*(unsigned char *)(*(void *)(a1 + 29032) + 578) & 0x10) == 0)) {
          goto LABEL_87;
        }
      }
      uint64_t v29 = *(void *)(a1 + 29032);
      if (*(unsigned __int16 *)(v29 + 168) < a5
        || a7 < 1
        || a7 % 6u
        || *(unsigned __int16 *)(v29 + 162) < a7)
      {
        goto LABEL_87;
      }
      unsigned int v30 = 0;
      do
      {
        ++v30;
        BOOL v24 = a5 > 1;
        a5 = a5 >> 1;
      }
      while (v24);
      goto LABEL_62;
    case 5:
      if (a5 < 1) {
        goto LABEL_87;
      }
      if ((a5 & (a5 - 1)) != 0)
      {
        int v31 = *(unsigned __int8 *)(v13 + 2669);
        if (v31 != 4 && (a3 != 1 || v31 != 3 && (*(unsigned char *)(*(void *)(a1 + 29032) + 578) & 0x10) == 0)) {
          goto LABEL_87;
        }
      }
      uint64_t v32 = *(void *)(a1 + 29032);
      unsigned int v33 = *(unsigned __int16 *)(v32 + 160);
      if (v33 < a5 || a6 < 1) {
        goto LABEL_87;
      }
      if ((a6 & (a6 - 1)) == 0) {
        goto LABEL_55;
      }
      int v34 = *(unsigned __int8 *)(v13 + 2669);
      if (v34 == 4) {
        goto LABEL_55;
      }
      if (a3 != 1) {
        goto LABEL_87;
      }
      if (v34 == 3)
      {
LABEL_55:
        if (v33 < a6) {
          goto LABEL_87;
        }
      }
      else if (v33 < a6 || (*(_DWORD *)(v32 + 576) & 0x100000) == 0)
      {
        goto LABEL_87;
      }
      if (a7 < 1 || *(unsigned __int16 *)(v32 + 162) < a7) {
        goto LABEL_87;
      }
      unsigned int v30 = 0;
      if (a5 <= a6) {
        unsigned int v35 = a6;
      }
      else {
        unsigned int v35 = a5;
      }
      do
      {
        ++v30;
        BOOL v24 = v35 > 1;
        v35 >>= 1;
      }
      while (v24);
LABEL_62:
      if (v30 < a3) {
        goto LABEL_63;
      }
      break;
    case 1:
      if (a5 >= 1)
      {
        if ((a5 & (a5 - 1)) == 0
          || (int v17 = *(unsigned __int8 *)(v13 + 2669), v17 == 4)
          || a3 == 1 && (v17 == 3 || (*(unsigned char *)(*(void *)(a1 + 29032) + 578) & 0x10) != 0))
        {
          uint64_t v18 = *(void *)(a1 + 29032);
          unsigned int v19 = *(unsigned __int16 *)(v18 + 164);
          if (v19 >= a5 && a6 >= 1)
          {
            if ((a6 & (a6 - 1)) == 0) {
              goto LABEL_17;
            }
            int v20 = *(unsigned __int8 *)(v13 + 2669);
            if (v20 == 4) {
              goto LABEL_17;
            }
            if (a3 != 1) {
              goto LABEL_87;
            }
            if (v20 == 3)
            {
LABEL_17:
              if (v19 < a6) {
                goto LABEL_87;
              }
            }
            else if (v19 < a6 || (*(_DWORD *)(v18 + 576) & 0x100000) == 0)
            {
              goto LABEL_87;
            }
            if (a7 < 1) {
              goto LABEL_87;
            }
            if ((a7 & (a7 - 1)) == 0) {
              goto LABEL_21;
            }
            int v21 = *(unsigned __int8 *)(v13 + 2669);
            if (v21 == 4) {
              goto LABEL_21;
            }
            if (a3 != 1) {
              goto LABEL_87;
            }
            if (v21 == 3)
            {
LABEL_21:
              if (v19 >= a7)
              {
LABEL_22:
                unsigned int v22 = 0;
                if (a5 <= a6) {
                  unsigned int v23 = a6;
                }
                else {
                  unsigned int v23 = a5;
                }
                if (v23 <= a7) {
                  unsigned int v23 = a7;
                }
                do
                {
                  ++v22;
                  BOOL v24 = v23 > 1;
                  v23 >>= 1;
                }
                while (v24);
                if (v22 >= a3)
                {
                  int v25 = 0;
                  goto LABEL_66;
                }
                goto LABEL_63;
              }
            }
            else if (v19 >= a7 && (*(_DWORD *)(v18 + 576) & 0x100000) != 0)
            {
              goto LABEL_22;
            }
          }
        }
      }
LABEL_87:
      if (!*(_WORD *)v13)
      {
        uint64_t result = 0;
        __int16 v27 = 1281;
        goto LABEL_90;
      }
      return 0;
  }
  int v25 = 1;
LABEL_66:
  if (gleCheckTexStorageArgs(a1, a4, v25, v25)) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t gleCheckTexImage3DArgs(uint64_t a1, int a2, unsigned int a3, unsigned int a4, int a5, int a6, unsigned int a7, int a8, unsigned int a9, int a10, unint64_t *a11)
{
  uint64_t v16 = a1 + 29832;
  uint64_t v17 = gleLookUpTexture3D(a1, a2);
  unint64_t v18 = glePixelStorageFromFormatType(a1, a9, a10);
  *a11 = v18;
  if (!v17)
  {
    if (!*(_WORD *)v16)
    {
      uint64_t result = 0;
      __int16 v37 = 1280;
      goto LABEL_107;
    }
    return 0;
  }
  if (*(unsigned char *)(v17 + 559)
    || (int v19 = *(_WORD *)(v17 + 768) & 0xF, v20 = *(unsigned __int8 *)(v16 + 2669), v20 == 4)
    && (a9 >> 1 != 17723 ? (BOOL v21 = a9 == 37874) : (BOOL v21 = 1),
        !v21 ? (BOOL v22 = a4 >> 1 == 17723) : (BOOL v22 = 1),
        !v22 ? (BOOL v23 = a4 == 37874) : (BOOL v23 = 1),
        v23 ? (BOOL v24 = v19 == 5) : (BOOL v24 = 1),
        !v24 || a4 == 37881 || a9 == 37881))
  {
    if (!*(_WORD *)v16)
    {
      uint64_t result = 0;
      __int16 v37 = 1282;
      goto LABEL_107;
    }
    return 0;
  }
  int v25 = 2 * a8;
  unsigned int v26 = a5 - 2 * a8;
  if (v19 == 10)
  {
    if (a5 == a6)
    {
      uint64_t v38 = *(void *)(a1 + 29032);
      if ((int)v26 <= *(unsigned __int16 *)(v38 + 168)
        && (v26 & 0x80000000) == 0
        && (!a8 || a5 != v25)
        && ((v26 & (v26 - 1)) == 0 || v20 == 4 || !a3 && (v20 == 3 || (*(unsigned char *)(v38 + 578) & 0x10) != 0))
        && (a7 & 0x80000000) == 0
        && !(a7 % 6)
        && *(unsigned __int16 *)(v38 + 162) >= a7)
      {
        goto LABEL_108;
      }
    }
    goto LABEL_104;
  }
  unsigned int v27 = a6 - 2 * a8;
  if (v19 == 5)
  {
    if ((v26 & 0x80000000) == 0
      && (!a8 || a5 != v25)
      && ((v26 & (v26 - 1)) == 0
       || v20 == 4
       || !a3 && (v20 == 3 || (*(unsigned char *)(*(void *)(a1 + 29032) + 578) & 0x10) != 0)))
    {
      uint64_t v39 = *(void *)(a1 + 29032);
      unsigned int v40 = *(unsigned __int16 *)(v39 + 160);
      if (v26 <= v40)
      {
        BOOL v41 = a8 && a6 == v25;
        BOOL v42 = v41;
        if ((v27 & 0x80000000) == 0
          && !v42
          && ((v27 & (v27 - 1)) == 0 || v20 == 4 || !a3 && (v20 == 3 || (*(unsigned char *)(v39 + 578) & 0x10) != 0))
          && v27 <= v40
          && (a7 & 0x80000000) == 0
          && *(unsigned __int16 *)(v39 + 162) >= a7)
        {
          goto LABEL_108;
        }
      }
    }
LABEL_104:
    if (*(_WORD *)v16) {
      return 0;
    }
    uint64_t result = 0;
    __int16 v37 = 1281;
LABEL_107:
    *(_WORD *)uint64_t v16 = v37;
    return result;
  }
  if (v19 == 1)
  {
    if ((v26 & 0x80000000) == 0
      && (!a8 || a5 != v25)
      && ((v26 & (v26 - 1)) == 0
       || v20 == 4
       || !a3 && (v20 == 3 || (*(unsigned char *)(*(void *)(a1 + 29032) + 578) & 0x10) != 0)))
    {
      uint64_t v28 = *(void *)(a1 + 29032);
      unsigned int v29 = *(unsigned __int16 *)(v28 + 164);
      if (v26 <= v29)
      {
        BOOL v30 = a8 && a6 == v25;
        BOOL v31 = v30;
        if ((v27 & 0x80000000) == 0
          && !v31
          && ((v27 & (v27 - 1)) == 0 || v20 == 4 || !a3 && (v20 == 3 || (*(unsigned char *)(v28 + 578) & 0x10) != 0))
          && v27 <= v29)
        {
          unsigned int v32 = a7 - 2 * a8;
          BOOL v33 = a8 && a7 == v25;
          BOOL v34 = v33;
          if ((v32 & 0x80000000) == 0
            && !v34
            && ((v32 & (v32 - 1)) == 0 || v20 == 4 || !a3 && (v20 == 3 || (*(unsigned char *)(v28 + 578) & 0x10) != 0))
            && v32 <= v29)
          {
            int v35 = 0;
            goto LABEL_109;
          }
        }
      }
    }
    goto LABEL_104;
  }
LABEL_108:
  int v35 = 1;
LABEL_109:
  if (gleCheckTexImageArgs(a1, a3, a4, a9, v18, a8, v35)) {
    return v17;
  }
  else {
    return 0;
  }
}

uint64_t gleCheckCompressedTexImage3DArgs(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, unint64_t *a10)
{
  uint64_t v17 = a1 + 29832;
  uint64_t v18 = gleLookUpTexture3D(a1, a2);
  unint64_t v19 = glePixelStorageFromCompressedFormat(a1, a4);
  *a10 = v19;
  if (!v18)
  {
LABEL_7:
    if (!*(_WORD *)v17)
    {
      uint64_t result = 0;
      __int16 v28 = 1280;
LABEL_67:
      *(_WORD *)uint64_t v17 = v28;
      return result;
    }
    return 0;
  }
  if (*(unsigned char *)(v18 + 559))
  {
    if (!*(_WORD *)v17)
    {
      uint64_t result = 0;
      __int16 v28 = 1282;
      goto LABEL_67;
    }
    return 0;
  }
  unsigned int v21 = a5 - 2 * a8;
  unsigned int v22 = a6 - 2 * a8;
  unsigned int v23 = a7 - 2 * a8;
  int v24 = *(_WORD *)(v18 + 768) & 0xF;
  switch(v24)
  {
    case 10:
      if (a5 != a6) {
        goto LABEL_64;
      }
      uint64_t v29 = *(void *)(a1 + 29032);
      if ((int)v21 > *(unsigned __int16 *)(v29 + 168)) {
        goto LABEL_64;
      }
      if ((v21 & 0x80000000) != 0) {
        goto LABEL_64;
      }
      if ((v21 & (v21 - 1)) != 0)
      {
        int v30 = *(unsigned __int8 *)(v17 + 2669);
        if (v30 != 4 && (a3 || v30 != 3 && (*(unsigned char *)(v29 + 578) & 0x10) == 0)) {
          goto LABEL_64;
        }
      }
      if ((v23 & 0x80000000) != 0 || v23 % 6) {
        goto LABEL_64;
      }
      goto LABEL_26;
    case 5:
      if ((v21 & 0x80000000) != 0) {
        goto LABEL_64;
      }
      if ((v21 & (v21 - 1)) != 0)
      {
        int v31 = *(unsigned __int8 *)(v17 + 2669);
        if (v31 != 4 && (a3 || v31 != 3 && (*(unsigned char *)(*(void *)(a1 + 29032) + 578) & 0x10) == 0)) {
          goto LABEL_64;
        }
      }
      uint64_t v29 = *(void *)(a1 + 29032);
      unsigned int v32 = *(unsigned __int16 *)(v29 + 160);
      if (v21 > v32) {
        goto LABEL_64;
      }
      if ((v22 & 0x80000000) != 0) {
        goto LABEL_64;
      }
      if ((v22 & (v22 - 1)) != 0)
      {
        int v33 = *(unsigned __int8 *)(v17 + 2669);
        if (v33 != 4 && (a3 || v33 != 3 && (*(unsigned char *)(v29 + 578) & 0x10) == 0)) {
          goto LABEL_64;
        }
      }
      if (v22 > v32 || (v23 & 0x80000000) != 0) {
        goto LABEL_64;
      }
LABEL_26:
      if (v23 > *(unsigned __int16 *)(v29 + 162)) {
        goto LABEL_64;
      }
      break;
    case 1:
      uint64_t v25 = *(void *)(a1 + 29032);
      int v26 = *(_DWORD *)(v25 + 576);
      if ((v26 & 0x8000) == 0) {
        goto LABEL_7;
      }
      if ((v21 & 0x80000000) != 0
        || (v21 & (v21 - 1)) != 0
        && (int v34 = *(unsigned __int8 *)(v17 + 2669), v34 != 4)
        && (a3 || (v26 & 0x100000) == 0 && v34 != 3)
        || (unsigned int v35 = *(unsigned __int16 *)(v25 + 164), v21 > v35)
        || (v22 & 0x80000000) != 0
        || (v22 & (v22 - 1)) != 0
        && (int v36 = *(unsigned __int8 *)(v17 + 2669), v36 != 4)
        && (a3 || v36 != 3 && (v26 & 0x100000) == 0)
        || v22 > v35
        || (v23 & 0x80000000) != 0
        || (v23 & (v23 - 1)) != 0
        && (int v37 = *(unsigned __int8 *)(v17 + 2669), v37 != 4)
        && (a3 || v37 != 3 && (v26 & 0x100000) == 0)
        || v23 > v35)
      {
LABEL_64:
        if (!*(_WORD *)v17)
        {
          uint64_t result = 0;
          __int16 v28 = 1281;
          goto LABEL_67;
        }
        return 0;
      }
      break;
  }
  if (gleCheckCompressedTexImageArgs(a1, a3, a8, v21, v22, v23, a9, v19, v20)) {
    return v18;
  }
  else {
    return 0;
  }
}

uint64_t gleCheckCopyTexSubImageArgs(uint64_t a1, unsigned int a2, int a3, unsigned int a4, int a5, int a6)
{
  uint64_t v6 = a1 + 29832;
  if (a2 >= 0xF)
  {
    if (!*(_WORD *)v6)
    {
      uint64_t result = 0;
      __int16 v8 = 1281;
LABEL_95:
      *(_WORD *)uint64_t v6 = v8;
      return result;
    }
    return 0;
  }
  if (!a6 && (a3 == 34041 || a3 == 6402)) {
    goto LABEL_91;
  }
  uint64_t result = gleCheckReadPixelsNeeds(a1, a3, a4, a5);
  if (!result) {
    return result;
  }
  uint64_t v12 = *(void *)(*(void *)(a1 + 28968) + 16 * *(unsigned __int16 *)(*(void *)(a1 + 28968) + 472) - 576984);
  int v13 = *(unsigned __int16 *)(v12 + 812);
  if (v13 == 6403)
  {
    if (a3 == 6403) {
      goto LABEL_21;
    }
    int v14 = 6409;
  }
  else
  {
    if (v13 == 33319)
    {
      if (a3 == 6403 || a3 == 6409) {
        goto LABEL_21;
      }
    }
    else if (v13 != 6407 || (a3 - 6403) <= 6 && ((1 << (a3 - 3)) & 0x51) != 0)
    {
      goto LABEL_21;
    }
    int v14 = 33319;
  }
  if (a3 != v14) {
    goto LABEL_91;
  }
LABEL_21:
  if (*(unsigned char *)(v6 + 2669) != 4) {
    return 1;
  }
  int v15 = *(unsigned __int16 *)(v12 + 1000);
  if ((v15 - 36208) < 0x12) {
    goto LABEL_25;
  }
  if ((v15 - 33330) > 0xA)
  {
    if (v15 == 36975) {
      goto LABEL_25;
    }
  }
  else if ((v15 & 1) == 0)
  {
LABEL_25:
    int v16 = 1;
    goto LABEL_28;
  }
  int v16 = 0;
LABEL_28:
  if (a4 - 36208 < 0x12)
  {
LABEL_31:
    int v17 = 1;
    goto LABEL_34;
  }
  if (a4 - 33330 > 0xA)
  {
    if (a4 == 36975) {
      goto LABEL_31;
    }
  }
  else if ((a4 & 1) == 0)
  {
    goto LABEL_31;
  }
  int v17 = 0;
LABEL_34:
  if (v16 != v17) {
    goto LABEL_91;
  }
  int v18 = (v15 - 36226) < 0x12 || ((v15 - 33329) < 0xB) & v15;
  int v19 = a4 - 36226 < 0x12 || (a4 - 33329 < 0xB) & a4;
  if (v18 != v19) {
    goto LABEL_91;
  }
  if (*(unsigned __int8 *)(v6 + 2660) < 0xAu) {
    return 1;
  }
  int v21 = (v15 - 34836) < 0xC
     || (v15 - 33325) < 4
     || v15 == 35898
     || (v15 & 0xFFFE) == 36012
     || v15 == 35901;
  int v24 = 1;
  if (a4 - 34836 >= 0xC && a4 - 33325 >= 4) {
    int v24 = a4 == 35898 || a4 >> 1 == 18006 || a4 == 35901;
  }
  if (v21 != v24)
  {
LABEL_91:
    if (!*(_WORD *)v6)
    {
      uint64_t result = 0;
      __int16 v8 = 1282;
      goto LABEL_95;
    }
    return 0;
  }
  unsigned int v27 = gleInternalFormatFromSizedEnum(v15);
  if (!v27) {
    gleCheckCopyTexSubImageArgs_cold_1();
  }
  unsigned int v28 = v27;
  unsigned int v29 = gleInternalFormatFromSizedEnum(a4);
  if (!v29)
  {
    if (v15 == 32857) {
      goto LABEL_91;
    }
    return 1;
  }
  int v30 = (v28 >> 14) & 0x3F;
  if ((v28 & 0x10000000) != 0)
  {
    int v31 = v30 + ((int)(32 * v28) >> 31);
    if (v31)
    {
      if ((v29 & 0x10000000) != 0)
      {
        int v32 = ((v29 >> 14) & 0x3F) + ((int)(32 * v29) >> 31);
        if (v32)
        {
          if (v31 != v32) {
            goto LABEL_91;
          }
        }
      }
    }
  }
  if ((v28 & 0x40000000) != 0)
  {
    int v33 = v30 + ((int)(16 * v28) >> 31);
    if (v33)
    {
      if ((v29 & 0x40000000) != 0)
      {
        int v34 = ((v29 >> 14) & 0x3F) + ((int)(16 * v29) >> 31);
        if (v34)
        {
          if (v33 != v34) {
            goto LABEL_91;
          }
        }
      }
    }
  }
  if ((v28 & 0x20000000) != 0)
  {
    if (v30)
    {
      int v35 = (v29 >> 14) & 0x3F;
      if (v30 != v35 && (v29 & 0x20000000) != 0 && v35) {
        goto LABEL_91;
      }
    }
  }
  int v36 = (v28 >> 20) & 0x3F;
  if (!v36) {
    return 1;
  }
  int v37 = (v29 >> 20) & 0x3F;
  uint64_t result = 1;
  if (v37 && v36 != v37) {
    goto LABEL_91;
  }
  return result;
}

uint64_t gleCheckTexFormatArgs(uint64_t a1, int a2, int a3, unint64_t a4, int a5, _DWORD *a6)
{
  uint64_t v6 = (__int16 *)(a1 + 29832);
  *a6 = 0;
  if (a3 == 32993) {
    int v7 = 6408;
  }
  else {
    int v7 = a3;
  }
  if (a2 <= 34835)
  {
    if (a2 <= 33188)
    {
      if (a2 > 32826)
      {
        switch(a2)
        {
          case 32828:
            int v8 = 6406;
            goto LABEL_120;
          case 32832:
            int v8 = 6409;
            goto LABEL_120;
          case 32837:
            int v8 = 6410;
            goto LABEL_120;
          case 32849:
LABEL_91:
            int v8 = 6407;
            goto LABEL_120;
          case 32854:
            if (v7 != 6408) {
              goto LABEL_178;
            }
            uint64_t v38 = (a4 >> 52) & 0x1F;
            if (v38 == 17) {
              goto LABEL_205;
            }
LABEL_149:
            if (v38) {
              goto LABEL_178;
            }
            goto LABEL_198;
          case 32855:
            if (v7 != 6408) {
              goto LABEL_178;
            }
            uint64_t v39 = (a4 >> 52) & 0x1F;
            if (v39 == 19) {
              goto LABEL_205;
            }
            if (*(unsigned char *)(a1 + 32501) != 4) {
              goto LABEL_178;
            }
            int v37 = 0;
            if (v39)
            {
              if (v39 != 24) {
                goto LABEL_178;
              }
            }
            goto LABEL_206;
          case 32856:
LABEL_94:
            int v8 = 6408;
            goto LABEL_120;
          case 32857:
            int v16 = 6408;
            goto LABEL_116;
          default:
            goto LABEL_170;
        }
      }
      switch(a2)
      {
        case 6402:
          int v25 = *(unsigned __int8 *)(a1 + 32501);
          if (v25 == 2) {
            goto LABEL_170;
          }
          if (v25 == 4) {
            break;
          }
          if (v7 != 6402) {
            break;
          }
          uint64_t v26 = (a4 >> 52) & 0x1F;
          if (v26 != 3 && v26 != 6) {
            break;
          }
          goto LABEL_177;
        case 6403:
          goto LABEL_60;
        case 6406:
        case 6409:
        case 6410:
          if (*(unsigned char *)(a1 + 32501) != 4) {
            goto LABEL_62;
          }
          if (v7 != a2) {
            break;
          }
          goto LABEL_121;
        case 6407:
          if ((v7 - 35429) < 2
            || v7 == 37902
            || v7 == 37883
            || (v7 - 35431) < 0xE
            || (v7 & 0xFFFFFFFE) == 0x93FC)
          {
            int v22 = *(unsigned __int8 *)(a1 + 32501);
          }
          else
          {
            int v22 = *(unsigned __int8 *)(a1 + 32501);
            if ((v7 - 37875) > 5)
            {
              if (v22 == 3)
              {
                if ((*(unsigned char *)(*(void *)(a1 + 29480) + 579) & 8) != 0)
                {
                  if (v7 == 6407)
                  {
                    uint64_t v51 = (a4 >> 52) & 0x1F;
                    if (v51 <= 0xF)
                    {
                      int v19 = 1 << v51;
                      int v20 = 40449;
                      goto LABEL_218;
                    }
                  }
                  break;
                }
              }
              else if (v22 == 4)
              {
                if (v7 == 6407)
                {
                  int v37 = 0;
                  uint64_t v49 = (a4 >> 52) & 0x1F;
                  if (!v49 || v49 == 15) {
                    goto LABEL_206;
                  }
                }
                break;
              }
              if (v7 == 6407)
              {
                uint64_t v50 = (a4 >> 52) & 0x1F;
                if (v50 <= 0xF)
                {
                  int v19 = 1 << v50;
                  int v20 = 34305;
                  goto LABEL_218;
                }
              }
              break;
            }
          }
LABEL_80:
          if (v22 == 2) {
            goto LABEL_170;
          }
          if ((a4 & 0x1F0000000000000) == 0) {
            goto LABEL_205;
          }
          break;
        case 6408:
          int v22 = *(unsigned __int8 *)(a1 + 32501);
          if ((v7 - 37903) <= 1) {
            goto LABEL_80;
          }
          if (v22 == 4)
          {
            if (v7 != 6408) {
              break;
            }
            uint64_t v23 = (a4 >> 52) & 0x1F;
            if (v23 > 0x16) {
              break;
            }
            int v19 = 1 << v23;
            unsigned __int16 v24 = 1;
          }
          else
          {
            if (v7 != 6408) {
              break;
            }
            uint64_t v48 = (a4 >> 52) & 0x1F;
            if (v48 > 0x16) {
              break;
            }
            int v19 = 1 << v48;
            unsigned __int16 v24 = 1537;
          }
          int v20 = v24 | 0x4A0000;
          goto LABEL_218;
        default:
          goto LABEL_170;
      }
LABEL_178:
      if (!*v6)
      {
        uint64_t result = 0;
        __int16 v43 = 1282;
        goto LABEL_173;
      }
      return 0;
    }
    if (a2 <= 33775)
    {
      switch(a2)
      {
        case 33317:
        case 33318:
        case 33320:
        case 33322:
        case 33324:
          goto LABEL_170;
        case 33319:
LABEL_60:
          int v17 = *(unsigned __int8 *)(a1 + 32501);
          if (v17 == 2) {
            goto LABEL_170;
          }
          if (v17 == 4) {
            goto LABEL_178;
          }
LABEL_62:
          if (v7 != a2) {
            goto LABEL_178;
          }
          uint64_t v18 = (a4 >> 52) & 0x1F;
          if (v18 > 0xA) {
            goto LABEL_178;
          }
          int v19 = 1 << v18;
          int v20 = 1537;
LABEL_218:
          if ((v19 & v20) == 0) {
            goto LABEL_178;
          }
          goto LABEL_205;
        case 33321:
          int v8 = 6403;
          goto LABEL_120;
        case 33323:
          int v8 = 33319;
LABEL_120:
          if (v7 != v8) {
            goto LABEL_178;
          }
LABEL_121:
          int v37 = 0;
          if ((a4 & 0x1F0000000000000) != 0) {
            goto LABEL_178;
          }
          goto LABEL_206;
        case 33325:
          int v32 = 6403;
          goto LABEL_195;
        case 33326:
          int v9 = 6403;
          goto LABEL_191;
        case 33327:
          int v32 = 33319;
LABEL_195:
          if (v7 != v32) {
            goto LABEL_178;
          }
          uint64_t v45 = (a4 >> 52) & 0x1F;
          if (v45 == 9) {
            goto LABEL_205;
          }
          if (v45 != 10) {
            goto LABEL_178;
          }
LABEL_198:
          if (*(unsigned char *)(a1 + 32501) != 4) {
            goto LABEL_178;
          }
          goto LABEL_205;
        case 33328:
          int v9 = 33319;
LABEL_191:
          if (v7 != v9) {
            goto LABEL_178;
          }
          uint64_t v12 = a4 & 0x1F0000000000000;
          uint64_t v13 = 0xA0000000000000;
          goto LABEL_204;
        case 33329:
          int v34 = 36244;
          goto LABEL_156;
        case 33330:
          int v31 = 36244;
          goto LABEL_138;
        case 33331:
          int v30 = 36244;
          goto LABEL_135;
        case 33332:
          int v35 = 36244;
          goto LABEL_145;
        case 33333:
          int v36 = 36244;
          goto LABEL_159;
        case 33334:
          int v33 = 36244;
          goto LABEL_153;
        case 33335:
          int v34 = 33320;
LABEL_156:
          if (v7 != v34) {
            goto LABEL_178;
          }
          uint64_t v40 = a4 & 0x1F0000000000000;
          uint64_t v41 = 0x10000000000000;
          goto LABEL_161;
        case 33336:
          int v31 = 33320;
LABEL_138:
          if (v7 != v31 || (a4 & 0x1F0000000000000) != 0) {
            goto LABEL_178;
          }
          goto LABEL_162;
        case 33337:
          int v30 = 33320;
LABEL_135:
          if (v7 != v30) {
            goto LABEL_178;
          }
          uint64_t v40 = a4 & 0x1F0000000000000;
          uint64_t v41 = 0x40000000000000;
          goto LABEL_161;
        case 33338:
          int v35 = 33320;
LABEL_145:
          if (v7 != v35) {
            goto LABEL_178;
          }
          uint64_t v40 = a4 & 0x1F0000000000000;
          uint64_t v41 = 0x30000000000000;
          goto LABEL_161;
        case 33339:
          int v36 = 33320;
LABEL_159:
          if (v7 != v36) {
            goto LABEL_178;
          }
          uint64_t v40 = a4 & 0x1F0000000000000;
          uint64_t v41 = 0x70000000000000;
          goto LABEL_161;
        case 33340:
          int v33 = 33320;
LABEL_153:
          if (v7 != v33) {
            goto LABEL_178;
          }
          uint64_t v40 = a4 & 0x1F0000000000000;
          uint64_t v41 = 0x60000000000000;
          goto LABEL_161;
        default:
          if ((a2 - 33190) < 2)
          {
            if (v7 != 6402) {
              goto LABEL_178;
            }
            uint64_t v14 = a4 & 0x1F0000000000000;
            uint64_t v15 = 0x60000000000000;
            goto LABEL_176;
          }
          if (a2 != 33189) {
            goto LABEL_170;
          }
          if (v7 != 6402) {
            goto LABEL_178;
          }
          uint64_t v21 = (a4 >> 52) & 0x1F;
          if (v21 != 3 && (v21 != 6 || *(unsigned char *)(a1 + 32501) != 4)) {
            goto LABEL_178;
          }
          goto LABEL_177;
      }
    }
    if (a2 <= 34024) {
      goto LABEL_170;
    }
    if ((a2 - 34025) < 4) {
      goto LABEL_170;
    }
    if ((a2 - 34029) < 2) {
      goto LABEL_170;
    }
    if (a2 != 34041) {
      goto LABEL_170;
    }
    int v10 = *(unsigned __int8 *)(a1 + 32501);
    if (v10 == 2) {
      goto LABEL_170;
    }
    if (v10 == 4) {
      goto LABEL_178;
    }
    goto LABEL_54;
  }
  if (a2 <= 36193)
  {
    if (a2 > 35897)
    {
      switch(a2)
      {
        case 35898:
          if (v7 != 6407 || ((a4 >> 52) & 0x1F) - 9 >= 3) {
            goto LABEL_178;
          }
          goto LABEL_205;
        case 35899:
        case 35900:
        case 35902:
        case 35903:
        case 35908:
        case 35909:
        case 35910:
        case 35911:
        case 35912:
        case 35913:
        case 35914:
        case 35915:
        case 35916:
        case 35917:
        case 35918:
        case 35919:
          goto LABEL_170;
        case 35901:
          if (v7 != 6407) {
            goto LABEL_178;
          }
          uint64_t v29 = (a4 >> 52) & 0x1F;
          if (v29 > 0xC) {
            goto LABEL_178;
          }
          int v19 = 1 << v29;
          int v20 = 5632;
          goto LABEL_218;
        case 35904:
          int v27 = *(unsigned __int8 *)(a1 + 32501);
          if (v27 != 4 && v27 != 2) {
            goto LABEL_91;
          }
          goto LABEL_170;
        case 35905:
          goto LABEL_91;
        case 35906:
          int v28 = *(unsigned __int8 *)(a1 + 32501);
          if (v28 != 4 && v28 != 2) {
            goto LABEL_94;
          }
          goto LABEL_170;
        case 35907:
          goto LABEL_94;
        default:
          if (a2 != 36012)
          {
            if (a2 != 36013) {
              goto LABEL_170;
            }
            if (v7 == 34041)
            {
              uint64_t v14 = a4 & 0x1F0000000000000;
              uint64_t v15 = 0x1B0000000000000;
              goto LABEL_176;
            }
            goto LABEL_178;
          }
          if (v7 != 6402) {
            goto LABEL_178;
          }
          uint64_t v14 = a4 & 0x1F0000000000000;
          uint64_t v15 = 0xA0000000000000;
          break;
      }
      goto LABEL_176;
    }
    if (a2 <= 35055)
    {
      switch(a2)
      {
        case 34836:
          int v9 = 6408;
          goto LABEL_191;
        case 34837:
          int v9 = 6407;
          goto LABEL_191;
        case 34838:
          if (*(unsigned char *)(a1 + 32501) == 4) {
            goto LABEL_170;
          }
          int v9 = 6406;
          goto LABEL_191;
        case 34840:
          if (*(unsigned char *)(a1 + 32501) == 4) {
            goto LABEL_170;
          }
          int v9 = 6409;
          goto LABEL_191;
        case 34841:
          if (*(unsigned char *)(a1 + 32501) == 4) {
            goto LABEL_170;
          }
          int v9 = 6410;
          goto LABEL_191;
        case 34842:
          int v32 = 6408;
          goto LABEL_195;
        case 34843:
          int v32 = 6407;
          goto LABEL_195;
        case 34844:
          if (*(unsigned char *)(a1 + 32501) == 4) {
            goto LABEL_170;
          }
          int v44 = 6406;
          goto LABEL_202;
        case 34846:
          if (*(unsigned char *)(a1 + 32501) == 4) {
            goto LABEL_170;
          }
          int v44 = 6409;
          goto LABEL_202;
        case 34847:
          if (*(unsigned char *)(a1 + 32501) == 4) {
            goto LABEL_170;
          }
          int v44 = 6410;
LABEL_202:
          if (v7 != v44) {
            goto LABEL_178;
          }
          uint64_t v12 = a4 & 0x1F0000000000000;
          uint64_t v13 = 0x90000000000000;
          break;
        default:
          goto LABEL_170;
      }
      goto LABEL_204;
    }
    if (a2 > 35445)
    {
      if ((a2 - 35446) < 2)
      {
        if (v7 != a2) {
          goto LABEL_178;
        }
        uint64_t v12 = a4 & 0x1F0000000000000;
        uint64_t v13 = 0x30000000000000;
        goto LABEL_204;
      }
      goto LABEL_170;
    }
    if (a2 != 35056)
    {
      if (a2 == 35409)
      {
        if (v7 != 35359) {
          goto LABEL_178;
        }
        uint64_t v12 = a4 & 0x1E0000000000000;
        uint64_t v13 = 0x1C0000000000000;
        goto LABEL_204;
      }
LABEL_170:
      if (!*v6)
      {
        uint64_t result = 0;
        __int16 v43 = 1280;
LABEL_173:
        *uint64_t v6 = v43;
        return result;
      }
      return 0;
    }
LABEL_54:
    if (v7 != 34041) {
      goto LABEL_178;
    }
    uint64_t v14 = a4 & 0x1F0000000000000;
    uint64_t v15 = 0x190000000000000;
LABEL_176:
    if (v14 != v15) {
      goto LABEL_178;
    }
LABEL_177:
    if (a5)
    {
      int v37 = 1;
      goto LABEL_206;
    }
    goto LABEL_178;
  }
  if (a2 <= 36755)
  {
    switch(a2)
    {
      case 36194:
        if (v7 != 6407) {
          goto LABEL_178;
        }
        uint64_t v38 = (a4 >> 52) & 0x1F;
        if (v38 != 15) {
          goto LABEL_149;
        }
        goto LABEL_205;
      case 36208:
        int v33 = 36249;
        goto LABEL_153;
      case 36209:
        int v33 = 36248;
        goto LABEL_153;
      case 36210:
      case 36211:
      case 36212:
      case 36213:
      case 36216:
      case 36217:
      case 36218:
      case 36219:
      case 36222:
      case 36223:
      case 36224:
      case 36225:
      case 36228:
      case 36229:
      case 36230:
      case 36231:
      case 36234:
      case 36235:
      case 36236:
      case 36237:
      case 36240:
      case 36241:
      case 36242:
      case 36243:
        *a6 = 1;
        goto LABEL_170;
      case 36214:
        int v35 = 36249;
        goto LABEL_145;
      case 36215:
        int v35 = 36248;
        goto LABEL_145;
      case 36220:
        int v31 = 36249;
        goto LABEL_138;
      case 36221:
        int v31 = 36248;
        goto LABEL_138;
      case 36226:
        int v36 = 36249;
        goto LABEL_159;
      case 36227:
        int v36 = 36248;
        goto LABEL_159;
      case 36232:
        int v30 = 36249;
        goto LABEL_135;
      case 36233:
        int v30 = 36248;
        goto LABEL_135;
      case 36238:
        int v34 = 36249;
        goto LABEL_156;
      case 36239:
        int v34 = 36248;
        goto LABEL_156;
      default:
        goto LABEL_170;
    }
  }
  if (a2 > 36974)
  {
    if (a2 != 36975)
    {
      int v16 = 37874;
      if (a2 == 37874 || (int v16 = 37881, a2 == 37881))
      {
LABEL_116:
        if (v7 != v16) {
          goto LABEL_178;
        }
        uint64_t v12 = a4 & 0x1F0000000000000;
        uint64_t v13 = 0x180000000000000;
        goto LABEL_204;
      }
      goto LABEL_170;
    }
    if (v7 == 36249)
    {
      uint64_t v40 = a4 & 0x1F0000000000000;
      uint64_t v41 = 0x180000000000000;
LABEL_161:
      if (v40 == v41)
      {
LABEL_162:
        int v37 = 0;
        *a6 = 1;
        goto LABEL_206;
      }
    }
    goto LABEL_178;
  }
  switch(a2)
  {
    case 36756:
      int v11 = 6403;
      break;
    case 36757:
      int v11 = 33319;
      break;
    case 36758:
      int v11 = 6407;
      break;
    case 36759:
      int v11 = 6408;
      break;
    default:
      goto LABEL_170;
  }
  if (v7 != v11) {
    goto LABEL_178;
  }
  uint64_t v12 = a4 & 0x1F0000000000000;
  uint64_t v13 = 0x10000000000000;
LABEL_204:
  if (v12 != v13) {
    goto LABEL_178;
  }
LABEL_205:
  int v37 = 0;
LABEL_206:
  int v47 = v7 == 6402 || v7 == 34041;
  if (v37 != v47) {
    goto LABEL_178;
  }
  return 1;
}

uint64_t gleCheckTexSubImage3DArgs(uint64_t a1, int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, unint64_t *a12)
{
  uint64_t v17 = gleLookUpNonProxyTexture3D(a1, a2);
  unint64_t v18 = glePixelStorageFromFormatType(a1, a10, a11);
  *a12 = v18;
  if (!v17)
  {
    uint64_t v26 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      uint64_t v17 = 0;
      __int16 v27 = 1280;
      goto LABEL_48;
    }
    return 0;
  }
  unsigned int v19 = v18;
  if (a2 == 32879 && (a10 == 34041 || a10 == 6402)) {
    goto LABEL_20;
  }
  BOOL v21 = a10 == 6402 || a10 == 34041;
  int v22 = v21;
  int v23 = *(unsigned __int16 *)(v17 + 772);
  BOOL v24 = v23 == 6402 || v23 == 34041;
  int v25 = v24;
  if (v22 != v25) {
    goto LABEL_20;
  }
  if ((v18 & 0x800000000000000) == 0)
  {
    uint64_t v26 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      uint64_t v17 = 0;
      if ((v18 & 0x4000000000000000) != 0) {
        __int16 v27 = 1282;
      }
      else {
        __int16 v27 = 1280;
      }
      goto LABEL_48;
    }
    return 0;
  }
  if (a3 >= 0xF) {
    goto LABEL_26;
  }
  uint64_t v28 = v17 + 1032;
  if ((*(unsigned char *)(v17 + 1032 + 32 * a3 + 11) & 0x20) == 0
    || (v36 = 0, int v29 = *(unsigned __int16 *)(v17 + 2 * a3 + 560), v29 == 32856)
    && *(unsigned __int16 *)(v28 + 32 * a3 + 16) != a10
    || (a10 == 35359 || a10 == 34233) && *(unsigned __int16 *)(v28 + 32 * a3 + 18) != a11)
  {
LABEL_20:
    uint64_t v26 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      uint64_t v17 = 0;
      __int16 v27 = 1282;
LABEL_48:
      *uint64_t v26 = v27;
      return v17;
    }
    return 0;
  }
  if (!gleCheckTexFormatArgs(a1, v29, a10, v18, 1, &v36)) {
    return 0;
  }
  if (v36 != v19 >> 31) {
    goto LABEL_20;
  }
  if (a7 < 0) {
    goto LABEL_26;
  }
  int v30 = *(unsigned __int8 *)(v28 + 32 * a3 + 10);
  int v31 = -v30;
  if (-v30 > a4
    || a7 + a4 > *(unsigned __int16 *)(v28 + 32 * a3 + 4) + v30
    || a8 < 0
    || v31 > a5
    || a8 + a5 > *(unsigned __int16 *)(v28 + 32 * a3 + 6) + v30)
  {
    goto LABEL_26;
  }
  if (a2 != 36873 && a2 != 35866)
  {
    if ((a9 & 0x80000000) == 0 && v31 <= a6 && a9 + a6 <= *(unsigned __int16 *)(v28 + 32 * a3 + 8) + v30) {
      return v17;
    }
LABEL_26:
    uint64_t v26 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      uint64_t v17 = 0;
      __int16 v27 = 1281;
      goto LABEL_48;
    }
    return 0;
  }
  if ((a9 | a6) < 0 || a9 + a6 > *(unsigned __int16 *)(v28 + 32 * a3 + 8)) {
    goto LABEL_26;
  }
  return v17;
}

uint64_t gleCheckCopyTexSubImage3DArgs(uint64_t a1, int a2, signed int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  uint64_t v17 = gleLookUpNonProxyTexture3D(a1, a2);
  if (!v17)
  {
    int v25 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      uint64_t v18 = 0;
      __int16 v26 = 1280;
      goto LABEL_26;
    }
    return 0;
  }
  uint64_t v18 = v17;
  unsigned int v19 = *(unsigned __int16 *)(v17 + 960);
  BOOL v21 = v19 == 36975 || v19 - 33329 < 0xC;
  int v22 = v19 - 36208 < 0x24 || v21;
  if (!gleCheckCopyTexSubImageArgs(a1, a3, *(unsigned __int16 *)(v17 + 772), v19, v22, 0)) {
    return 0;
  }
  uint64_t v23 = v18 + 1032;
  uint64_t v24 = v18 + 1032 + 32 * a3;
  if ((*(unsigned char *)(v24 + 11) & 0x20) == 0)
  {
    int v25 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      uint64_t v18 = 0;
      __int16 v26 = 1282;
LABEL_26:
      __int16 *v25 = v26;
      return v18;
    }
    return 0;
  }
  if (a7 < 0
    || (int v27 = *(unsigned __int8 *)(v24 + 10), v28 = -v27, -v27 > a4)
    || a7 + a4 > *(unsigned __int16 *)(v23 + 32 * a3 + 4) + v27
    || a8 < 0
    || v28 > a5
    || a8 + a5 > *(unsigned __int16 *)(v23 + 32 * a3 + 6) + v27)
  {
LABEL_23:
    int v25 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      uint64_t v18 = 0;
      __int16 v26 = 1281;
      goto LABEL_26;
    }
    return 0;
  }
  if (a2 == 36873 || a2 == 35866)
  {
    if ((a9 | a6) < 0 || a9 + a6 > *(unsigned __int16 *)(v23 + 32 * a3 + 8)) {
      goto LABEL_23;
    }
  }
  else if (a9 < 0 || v28 > a6 || a9 + a6 > *(unsigned __int16 *)(v23 + 32 * a3 + 8) + v27)
  {
    goto LABEL_23;
  }
  return v18;
}

uint64_t gleCheckCompressedTexSubImage2DArgs(uint64_t a1, int a2, int a3, int a4, int a5, unsigned int a6, unsigned int a7, int a8, int a9, unint64_t *a10)
{
  uint64_t v17 = gleLookUpNonProxyTexture2D(a1, a2);
  unint64_t v18 = glePixelStorageFromCompressedFormat(a1, a8);
  *a10 = v18;
  if (!v17)
  {
    BOOL v21 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      uint64_t result = 0;
      __int16 v23 = 1280;
      goto LABEL_10;
    }
    return 0;
  }
  unint64_t v20 = v18;
  if (!gleCheckCompressedTexImageArgs(a1, a3, 0, a6, a7, 1, a9, v18, v19)) {
    return 0;
  }
  if (*(unsigned __int16 *)(v17 + 960) != a8 || (v20 & 0x380) == 0x100) {
    goto LABEL_5;
  }
  if (a2 == 34037 && a3 >= 1)
  {
    BOOL v21 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      uint64_t result = 0;
      __int16 v23 = 1281;
      goto LABEL_10;
    }
    return 0;
  }
  unsigned int v24 = (a2 - 34069) >= 6 ? 0 : a2 - 34069;
  if ((*(unsigned char *)(v17 + 480 * v24 + 32 * a3 + 1043) & 0x20) == 0) {
    goto LABEL_5;
  }
  if (((v20 >> 6) & 0xF) - 11 >= 2)
  {
    int v25 = *(unsigned __int16 *)(v17 + 480 * v24 + 32 * a3 + 1036);
    goto LABEL_25;
  }
  if (a5 | a4
    || (int v25 = *(unsigned __int16 *)(v17 + 480 * v24 + 32 * a3 + 1036), v25 != a6)
    || *(unsigned __int16 *)(v17 + 480 * v24 + 32 * a3 + 1038) != a7)
  {
LABEL_5:
    BOOL v21 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      uint64_t result = 0;
      __int16 v23 = 1282;
LABEL_10:
      *BOOL v21 = v23;
      return result;
    }
    return 0;
  }
LABEL_25:
  uint64_t v26 = v17 + 480 * v24 + 32 * a3;
  if (!gleCheckCompressedTexSubImageRange(a1, *(unsigned __int8 *)(v26 + 1042), a4, a6, v25, ((v20 >> 39) & 0xF) + 1))return 0; {
  if (gleCheckCompressedTexSubImageRange(a1, *(unsigned __int8 *)(v26 + 1042), a5, a7, *(unsigned __int16 *)(v17 + 480 * v24 + 32 * a3 + 1038), ((v20 >> 43) & 0xF) + 1))return v17;
  }
  else {
    return 0;
  }
}

uint64_t gleCheckCompressedTexSubImageRange(uint64_t a1, int a2, int a3, unsigned int a4, int a5, unsigned int a6)
{
  if ((a4 & 0x80000000) != 0 || -a2 > a3 || (int)(a4 + a3) > a5 + a2) {
    goto LABEL_8;
  }
  if (!a6) {
    return 1;
  }
  if (a3 % a6 || (uint64_t v6 = 1, a4 + a3 != a5) && a4 % a6)
  {
LABEL_8:
    uint64_t v6 = *(unsigned __int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return 0;
    }
    else {
      *(_WORD *)(a1 + 29832) = 1281;
    }
  }
  return v6;
}

uint64_t gleCheckCompressedTexSubImage3DArgs(uint64_t a1, int a2, int a3, unsigned int a4, unsigned int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, int a11, unint64_t *a12)
{
  unint64_t v30 = __PAIR64__(a4, a5);
  uint64_t v18 = gleLookUpNonProxyTexture3D(a1, a2);
  unint64_t v19 = glePixelStorageFromCompressedFormat(a1, a10);
  *a12 = v19;
  if (!v18)
  {
    __int16 v23 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      uint64_t v18 = 0;
      __int16 v24 = 1280;
      goto LABEL_13;
    }
    return 0;
  }
  unint64_t v21 = v19;
  if (!gleCheckCompressedTexImageArgs(a1, a3, 0, a7, a8, a9, a11, v19, v20)) {
    return 0;
  }
  if (*(unsigned __int16 *)(v18 + 960) != a10
    || ((a2 - 34069) >= 6 ? (unsigned int v22 = 0) : (unsigned int v22 = a2 - 34069),
        (*(unsigned char *)(v18 + 480 * v22 + 32 * a3 + 1043) & 0x20) == 0))
  {
LABEL_8:
    __int16 v23 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      uint64_t v18 = 0;
      __int16 v24 = 1282;
LABEL_13:
      __int16 *v23 = v24;
      return v18;
    }
    return 0;
  }
  uint64_t v29 = a3;
  uint64_t v26 = v18 + 480 * v22 + 32 * a3;
  if (!gleCheckCompressedTexSubImageRange(a1, *(unsigned __int8 *)(v26 + 1042), SHIDWORD(v30), a7, *(unsigned __int16 *)(v26 + 1036), ((v21 >> 39) & 0xF) + 1))return 0; {
  uint64_t v28 = v18 + 480 * v22 + 32 * v29;
  }
  if (!gleCheckCompressedTexSubImageRange(a1, *(unsigned __int8 *)(v26 + 1042), v30, a8, *(unsigned __int16 *)(v28 + 1038), ((v21 >> 43) & 0xF) + 1))return 0; {
  if (a2 == 35866)
  }
  {
    if ((a9 | a6) < 0 || a9 + a6 > *(unsigned __int16 *)(v18 + 480 * v22 + 32 * v29 + 1040)) {
      goto LABEL_24;
    }
  }
  else if (a9 < 0 {
         || (int v27 = *(unsigned __int8 *)(v26 + 1042), -v27 > a6)
  }
         || a9 + a6 > *(unsigned __int16 *)(v18 + 480 * v22 + 32 * v29 + 1040) + v27)
  {
LABEL_24:
    __int16 v23 = (__int16 *)(a1 + 29832);
    if (!*(_WORD *)(a1 + 29832))
    {
      uint64_t v18 = 0;
      __int16 v24 = 1281;
      goto LABEL_13;
    }
    return 0;
  }
  if (((v21 >> 6) & 0xF) - 11 <= 1
    && (v30 || *(unsigned __int16 *)(v26 + 1036) != a7 || *(unsigned __int16 *)(v28 + 1038) != a8))
  {
    goto LABEL_8;
  }
  return v18;
}

uint64_t gleCheckCopyTextureLevelsArgs(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, uint64_t *a6, void *a7)
{
  uint64_t v13 = *(void *)(a1 + 19296) + 72;
  uint64_t v14 = gleLookupHashObject(v13, a2);
  uint64_t v15 = gleLookupHashObject(v13, a3);
  if (v14) {
    BOOL v16 = v15 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16) {
    goto LABEL_15;
  }
  *a6 = (uint64_t)(v14 + 5);
  *a7 = v15 + 5;
  uint64_t v17 = *a6;
  if (!*a6) {
    goto LABEL_15;
  }
  if (!*(unsigned char *)(v17 + 559) || !*((unsigned char *)v15 + 599) || ((*((_WORD *)v15 + 404) ^ *(_WORD *)(v17 + 768)) & 0xF) != 0) {
    goto LABEL_20;
  }
  if ((a4 & 0x80000000) != 0 || a5 <= 0) {
    goto LABEL_15;
  }
  if (*(unsigned __int16 *)(v17 + 960) != *((unsigned __int16 *)v15 + 500)
    || *(unsigned __int8 *)(v17 + 979) != *((unsigned __int8 *)v15 + 1019))
  {
LABEL_20:
    uint64_t v18 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return 0;
    }
    uint64_t result = 0;
    __int16 v20 = 1282;
LABEL_18:
    *uint64_t v18 = v20;
    return result;
  }
  if (*((unsigned __int8 *)v15 + 1016) > a4 || a4 + a5 - 1 > *((unsigned __int8 *)v15 + 1018))
  {
LABEL_15:
    uint64_t v18 = (__int16 *)(a1 + 29832);
    if (*(_WORD *)(a1 + 29832)) {
      return 0;
    }
    uint64_t result = 0;
    __int16 v20 = 1281;
    goto LABEL_18;
  }
  return 1;
}

double gleTextureImageCopy(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8)
{
  unsigned int v33 = a6;
  v34[0] = a5;
  unsigned int v31 = a8;
  unsigned int v32 = a7;
  uint64_t v10 = a1 + 18448;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  int v25 = 0;
  long long v11 = *(_OWORD *)(a1 + 18464);
  long long v28 = *(_OWORD *)(a1 + 18448);
  long long v29 = v11;
  int v30 = *(_DWORD *)(a1 + 18480);
  *(_DWORD *)(a1 + 18448) = 0;
  *(void *)(a1 + 18464) = 0;
  *(void *)(a1 + 18456) = 0;
  *(void *)(a1 + 18472) = 0x100000000;
  *(_WORD *)(a1 + 18480) = 0;
  *(unsigned char *)(a1 + 18482) = 0;
  int v12 = a3[9];
  if (a3[9])
  {
    int v13 = a3[8];
    LODWORD(v27) = a3[9];
    HIDWORD(v27) = v13;
    int v14 = glePixelBytes(v13, v12);
    int v15 = 0;
    HIDWORD(v26) = v14;
  }
  else
  {
    int v15 = a3[7];
    gleIntermediateCompressedFormat(a3[8], (int *)&v27 + 1, (int *)&v27, (int *)&v26 + 1);
    int v14 = HIDWORD(v26);
  }
  int v16 = v14 * a3[6];
  uint64_t v17 = *(void *)(a1 + 28968);
  if (v17)
  {
    int v18 = *(unsigned __int16 *)(v17 + 474);
    int v19 = *(unsigned __int16 *)(v17 + 476);
  }
  else
  {
    int v18 = *(_DWORD *)(v10 + 11184);
    int v19 = *(_DWORD *)(v10 + 11188);
  }
  if (gleClipReadableRange(a1, v18, v19, (int *)v34, (int *)&v33, (int *)&v32, (int *)&v31, &v26, &v25)) {
    uint64_t v20 = HIDWORD(v26) * (int)v26 + v25 * v16;
  }
  else {
    uint64_t v20 = 0;
  }
  *(_DWORD *)(v10 + 4) = v16;
  if ((int)v32 >= 1 && (int)v31 >= 1)
  {
    if (a3[9])
    {
      (*(void (**)(void, void, void))(*(void *)(a1 + 29496) + 224))(*(void *)(a1 + 29464), v34[0], v33);
    }
    else
    {
      unint64_t v21 = (char *)malloc_type_malloc(v16 * v15, 0x577B5147uLL);
      if (!v21) {
        abort();
      }
      unsigned int v22 = v21;
      (*(void (**)(void, void, void, void, void, void, void, char *, int, void))(*(void *)(a1 + 29496) + 224))(*(void *)(a1 + 29464), v34[0], v33, v32, v31, HIDWORD(v27), v27, &v21[v20], 1, 0);
      glgConvertType();
      glgConvertType();
      gleRowBytes(a3[8], 0, a3[6]);
      glgProcessPixelsWithProcessor();
      free(v22);
    }
  }
  double result = *(double *)&v28;
  long long v24 = v29;
  *(_OWORD *)uint64_t v10 = v28;
  *(_OWORD *)(v10 + 16) = v24;
  *(_DWORD *)(v10 + 32) = v30;
  return result;
}

double gleTextureSubImageCopy(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10)
{
  unsigned int v35 = a10;
  unsigned int v15 = a9;
  uint64_t v16 = a1 + 18448;
  unsigned int v43 = a8;
  v44[0] = a7;
  long long v17 = *(_OWORD *)(a1 + 18464);
  long long v40 = *(_OWORD *)(a1 + 18448);
  long long v41 = v17;
  int v42 = *(_DWORD *)(a1 + 18480);
  *(_DWORD *)(a1 + 18448) = 0;
  *(void *)(a1 + 18456) = 0;
  *(void *)(a1 + 18472) = 0x100000000;
  *(_WORD *)(a1 + 18480) = 0;
  *(unsigned char *)(a1 + 18482) = 0;
  int v18 = *(unsigned __int8 *)(a3 + 10);
  if ((*(_WORD *)(a2 + 982) & 0x600) != 0) {
    int v19 = *(unsigned __int8 *)(a3 + 10);
  }
  else {
    int v19 = 0;
  }
  if ((*(unsigned char *)(a3 + 11) & 4) == 0)
  {
    int BytesPerRowOfPlane = 0;
LABEL_10:
    int v22 = v18 + a4;
    unsigned int v39 = 0;
    unsigned int v38 = 0;
    uint64_t v37 = 0;
    int v36 = 0;
    int v23 = *(unsigned __int16 *)(a3 + 18);
    if (*(_WORD *)(a3 + 18))
    {
      *(_DWORD *)(v16 + 16) = v19 + a5;
      *(_DWORD *)(v16 + 20) = v22;
      unsigned int v39 = *(unsigned __int16 *)(a3 + 16);
      unsigned int v38 = v23;
      int v24 = glePixelBytes(v39, v23);
      HIDWORD(v37) = v24;
      unsigned int v35 = 0;
      if (BytesPerRowOfPlane) {
        int v25 = BytesPerRowOfPlane;
      }
      else {
        int v25 = v24 * *(unsigned __int16 *)(a3 + 12);
      }
    }
    else
    {
      *(void *)(v16 + 16) = 0;
      gleIntermediateCompressedFormat(*(unsigned __int16 *)(a3 + 16), (int *)&v39, (int *)&v38, (int *)&v37 + 1);
      int v25 = HIDWORD(v37) * v15;
    }
    uint64_t v26 = *(void *)(a1 + 28968);
    if (v26)
    {
      int v27 = *(unsigned __int16 *)(v26 + 474);
      int v28 = *(unsigned __int16 *)(v26 + 476);
    }
    else
    {
      int v27 = *(_DWORD *)(v16 + 11184);
      int v28 = *(_DWORD *)(v16 + 11188);
    }
    if (gleClipReadableRange(a1, v27, v28, (int *)v44, (int *)&v43, (int *)&a9, (int *)&a10, &v37, &v36)) {
      uint64_t v29 = HIDWORD(v37) * (int)v37 + v36 * v25;
    }
    else {
      uint64_t v29 = 0;
    }
    *(_DWORD *)(v16 + 4) = v25;
    if ((int)a9 >= 1 && (int)a10 >= 1)
    {
      if (*(_WORD *)(a3 + 18))
      {
        (*(void (**)(void, void, void))(*(void *)(a1 + 29496) + 224))(*(void *)(a1 + 29464), v44[0], v43);
      }
      else
      {
        int v30 = (char *)malloc_type_malloc((int)(v25 * v35), 0x577B5147uLL);
        if (!v30) {
          abort();
        }
        unsigned int v31 = &v30[v29];
        unsigned int v32 = v30;
        (*(void (**)(void, void, void, void, void, void, void, char *, int, void))(*(void *)(a1 + 29496) + 224))(*(void *)(a1 + 29464), v44[0], v43, a9, a10, v39, v38, v31, 1, 0);
        glgConvertType();
        glgConvertType();
        if (!BytesPerRowOfPlane) {
          gleRowBytes(*(unsigned __int16 *)(a3 + 16), 0, *(unsigned __int16 *)(a3 + 12));
        }
        glgGetCompressedBlockBytes();
        glgGetCompressedBlockWidth();
        glgGetCompressedBlockHeight();
        glgConvertPixelWidthToBlocks();
        glgConvertPixelHeightToBlocks();
        glgProcessPixelsWithProcessor();
        free(v32);
      }
    }
    if ((*(unsigned char *)(a3 + 11) & 4) != 0) {
      IOSurfaceUnlockPlane();
    }
    goto LABEL_31;
  }
  unint64_t v21 = *(__IOSurface **)(a2 + 1024);
  (*(void (**)(void))(*(void *)(a1 + 29448) + 240))(*(void *)(a1 + 29016));
  if (*(void *)(a1 + 28992)) {
    (*(void (**)(void))(*(void *)(a1 + 29496) + 240))(*(void *)(a1 + 29464));
  }
  if (!IOSurfaceLockPlane())
  {
    IOSurfaceGetBaseAddressOfPlane(v21, *(unsigned __int16 *)(a2 + 1016));
    int BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(v21, *(unsigned __int16 *)(a2 + 1016));
    goto LABEL_10;
  }
LABEL_31:
  double result = *(double *)&v40;
  long long v34 = v41;
  *(_OWORD *)uint64_t v16 = v40;
  *(_OWORD *)(v16 + 16) = v34;
  *(_DWORD *)(v16 + 32) = v42;
  return result;
}

uint64_t gleIntermediateCompressedFormat(uint64_t result, int *a2, int *a3, int *a4)
{
  int v4 = 1;
  int v5 = 5121;
  int v6 = 6403;
  switch((int)result)
  {
    case 36283:
      break;
    case 36284:
      int v5 = 5120;
      break;
    case 36285:
      int v4 = 2;
      goto LABEL_11;
    case 36286:
      int v4 = 2;
      int v5 = 5120;
LABEL_11:
      int v6 = 33319;
      break;
    default:
      if (result == 34871) {
        int v6 = 6410;
      }
      else {
        int v6 = 6408;
      }
      int v5 = 5121;
      if (result == 34871) {
        int v4 = 2;
      }
      else {
        int v4 = 4;
      }
      break;
  }
  *a2 = v6;
  *a3 = v5;
  *a4 = v4;
  return result;
}

uint64_t gleGenerateEmptyMipmaps(uint64_t result, uint64_t a2, int a3, int a4, int a5, uint64_t a6, char a7)
{
  unsigned int v7 = *(_WORD *)(a2 + 768) & 0xF;
  if (v7 <= 0xA && ((0x47Bu >> v7) & 1) != 0)
  {
    int v12 = (unsigned char *)a2;
    uint64_t v88 = result;
    uint64_t v78 = result + 28652;
    unsigned int v13 = 0x7AFu >> v7;
    uint64_t v15 = a4;
    uint64_t v16 = a2 + 480 * a3 + 1032 + 32 * a4;
    uint64_t v17 = glePixelBytes(*(unsigned __int16 *)(v16 + 16), *(unsigned __int16 *)(v16 + 18));
    int v18 = *(unsigned __int8 *)(v16 + 10);
    int v19 = a3;
    int v20 = *(unsigned __int16 *)(v16 + 4) - 2 * v18;
    unsigned int v21 = (0x7AFu >> v7) & 1;
    unsigned int v22 = 0x386u >> v7;
    char v91 = *(unsigned char *)(v16 + 10);
    __int16 v23 = 2 * v18;
    if (v21) {
      int v24 = 2 * v18;
    }
    else {
      int v24 = 0;
    }
    int v25 = *(unsigned __int16 *)(v16 + 6) - v24;
    unsigned int v26 = (0x386u >> v7) & 1;
    int v27 = v19;
    if (v22) {
      int v28 = 2 * v18;
    }
    else {
      int v28 = 0;
    }
    int v29 = *(unsigned __int16 *)(v16 + 8) - v28;
    if (a5 >= 14) {
      int v30 = 14;
    }
    else {
      int v30 = a5;
    }
    int v31 = v12[559];
    BOOL v32 = v30 < v31 || v31 == 0;
    int v77 = v30;
    if (v32) {
      int v33 = v30;
    }
    else {
      int v33 = v31 - 1;
    }
    int v34 = v13 & (v25 > 1);
    if (v20 > 1) {
      int v34 = 1;
    }
    BOOL v35 = (v34 | v22 & (v29 > 1)) != 1 || v33 <= a4;
    int v75 = v27;
    int v76 = a4;
    int v36 = 0;
    if (!v35)
    {
      char v38 = v13 & 1;
      char v39 = a7 | 0x20;
      uint64_t v40 = 30 * v27 + 2 * v15;
      long long v41 = &v12[v40 + 560];
      uint64_t v42 = v15 + 1;
      uint64_t v43 = v33;
      uint64_t v44 = 480 * v27 + 32 * v15;
      uint64_t v45 = v40 + 562;
      uint64_t v46 = v17;
      __int16 v47 = (0x7AFu >> v7) & 1;
      __int16 v86 = v24;
      __int16 v87 = v23;
      __int16 v84 = v28;
      unsigned int v85 = v26;
      char v82 = a7 | 0x20;
      char v83 = v21;
      uint64_t v80 = v33;
      uint64_t v81 = v41;
      __int16 v79 = v21;
      while (1)
      {
        uint64_t v48 = &v12[v44];
        if (v36) {
          goto LABEL_27;
        }
        if ((v48[1075] & 0x20) != 0 && *(void *)&v12[v44 + 1088]) {
          break;
        }
        int v36 = 0;
LABEL_32:
        if (*((void *)v48 + 136) && (v12[v44 + 1075] & 1) == 0)
        {
          int v90 = v25;
          uint64_t v50 = v12;
          uint64_t v51 = a6;
          uint64_t v52 = v46;
          int v53 = v36;
          int v54 = v29;
          gfxFreeTextureLevel();
          uint64_t v43 = v80;
          long long v41 = v81;
          char v39 = v82;
          char v38 = v83;
          int v29 = v54;
          LOWORD(v28) = v84;
          unsigned int v26 = v85;
          int v25 = v90;
          LOWORD(v24) = v86;
          __int16 v23 = v87;
          int v36 = v53;
          uint64_t v46 = v52;
          a6 = v51;
          int v12 = v50;
          __int16 v47 = v79;
        }
        if (a6) {
          a6 += v20 * (int)v46 * v25 * v29;
        }
        else {
          a6 = 0;
        }
        int v20 = (v20 < 2) | (v20 >> 1);
        int v25 = (v25 >> v38) | (v25 >> v38 == 0);
        int v29 = (v29 >> v26) | (v29 >> v26 == 0);
        __int16 v55 = v20 + v23;
        uint64_t v56 = &v12[v44];
        *((_WORD *)v56 + 534) = v20 + v23;
        __int16 v57 = v25 + v24;
        *((_WORD *)v56 + 535) = v25 + v24;
        *((_WORD *)v56 + 536) = v29 + v28;
        v56[1074] = v91;
        int v58 = *(unsigned __int16 *)&v12[v44 + 1048];
        *((_WORD *)v56 + 540) = v58;
        *((_WORD *)v56 + 541) = *(_WORD *)&v12[v44 + 1050];
        v56[1075] = v39;
        *((void *)v48 + 136) = a6;
        if (v12[769])
        {
          __int16 v55 = 0;
          __int16 v57 = 0;
        }
        else if ((v58 == 35359 || v58 == 34233) && (unsigned __int16)(v20 + v23) == 1)
        {
          __int16 v55 = 2;
        }
        BOOL v61 = (v47 & 0x7FF) != 0 && v25 > 1 || v20 > 1;
        *((_WORD *)v56 + 538) = v55;
        *((_WORD *)v56 + 539) = v57;
        *(_WORD *)&v12[v45] = *v41;
        int v37 = v42 + 1;
        if (v26) {
          BOOL v62 = v29 <= 1;
        }
        else {
          BOOL v62 = 1;
        }
        int v63 = !v62 || v61;
        if (v63 == 1)
        {
          v44 += 32;
          v45 += 2;
          BOOL v35 = v42++ < v43;
          if (v35) {
            continue;
          }
        }
        goto LABEL_61;
      }
      int v89 = v29;
      int v49 = v25;
      (*(void (**)(void, uint64_t, void, void))(*(void *)(v88 + 29496) + 272))(*(void *)(v88 + 29464), 1, 0, *(void *)&v12[8 * *(unsigned __int8 *)(v78 + 3848)]);
      uint64_t v43 = v80;
      long long v41 = v81;
      char v39 = v82;
      char v38 = v83;
      int v29 = v89;
      LOWORD(v28) = v84;
      unsigned int v26 = v85;
      int v25 = v49;
      LOWORD(v24) = v86;
      __int16 v23 = v87;
LABEL_27:
      int v36 = 1;
      goto LABEL_32;
    }
    int v37 = a4 + 1;
LABEL_61:
    if (v37 <= v77)
    {
      uint64_t v64 = 480 * v75 + 32 * v37;
      uint64_t v65 = 30 * v75 + 2 * v37 + 560;
      for (int i = v77 - v37 + 1; i; --i)
      {
        int v67 = &v12[v64];
        if (!v36)
        {
          if ((v67[1043] & 0x20) == 0 || !*(void *)&v12[v64 + 1056])
          {
            int v36 = 0;
            goto LABEL_69;
          }
          (*(void (**)(void, uint64_t, void, void))(*(void *)(v88 + 29496) + 272))(*(void *)(v88 + 29464), 1, 0, *(void *)&v12[8 * *(unsigned __int8 *)(v78 + 3848)]);
        }
        int v36 = 1;
LABEL_69:
        char v68 = v67[1043];
        if (*((void *)v67 + 132))
        {
          if (v67[1043])
          {
            *((void *)v67 + 132) = 0;
          }
          else
          {
            int v69 = v36;
            gfxFreeTextureLevel();
            int v36 = v69;
            char v68 = v67[1043];
          }
          v68 &= ~0x10u;
        }
        v67[1043] = v68 & 0xB8;
        *(_DWORD *)&v12[v64 + 1036] = 0;
        *(_DWORD *)&v12[v64 + 1039] = 0;
        *(void *)&v12[v64 + 1044] = 0;
        *(_WORD *)&v12[v65] = 0;
        v64 += 32;
        v65 += 2;
      }
    }
    v12[558] = 1;
    int v70 = gfxEvaluateTextureForGeometryChange();
    if (v70)
    {
      (*(void (**)(void, uint64_t, void, void))(*(void *)(v88 + 29496) + 272))(*(void *)(v88 + 29464), 1, 0, *(void *)&v12[8 * *(unsigned __int8 *)(v78 + 3848)]);
      int v71 = v76;
      gfxSynchronizeTexLevelStorage();
      uint64_t v72 = *(void *)(v88 + 19296);
      int v73 = *(_DWORD *)(v72 + 296);
      if (v73)
      {
        if (!*(_WORD *)(v78 + 1180)) {
          *(_WORD *)(v78 + 1180) = v73;
        }
        *(_DWORD *)(v72 + 296) = 0;
      }
    }
    else
    {
      int v71 = v76;
    }
    double result = gfxUpdateTextureForGeometryChange();
    if ((v70 & 0xC0000001) != 0)
    {
      if (v70 < 0) {
        int v74 = 134356992;
      }
      else {
        int v74 = 139264;
      }
      *(_DWORD *)uint64_t v78 = 0;
      *(_DWORD *)(v88 + 1548) |= v74;
      double result = gleDirtyTextureObjectCurrentBindPointsGeom(v88, (uint64_t)v12);
    }
    if (v77 > v71)
    {
      do
      {
        ++v71;
        double result = gfxUpdatePluginTextureLevelGeometry();
      }
      while (v77 != v71);
    }
  }
  return result;
}

uint64_t gleGenMipmaps(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  if ((*(_WORD *)(a2 + 768) & 0xF) == 2) {
    return 0;
  }
  int v10 = *(unsigned __int8 *)(a2 + 975);
  if (!a5 && *(_DWORD *)(a2 + 888) < v10) {
    int v10 = *(_DWORD *)(a2 + 888);
  }
  if (a6) {
    gleGenerateEmptyMipmaps(a1, a2, a3, a4, v10, 0, 0);
  }
  if ((*(unsigned char *)(a2 + 480 * (int)a3 + 32 * a4 + 1043) & 0x20) == 0) {
    return 0;
  }
  int v12 = (_WORD *)(a1 + 29832);
  if (!(*(unsigned int (**)(void, void, uint64_t, void))(*(void *)(a1 + 29448) + 320))(*(void *)(a1 + 29016), *(void *)(a2 + 8 * *(unsigned __int8 *)(a1 + 32499)), a3, 0))
  {
    if ((*(_WORD *)(a2 + 768) & 0x100) == 0)
    {
      if (!*(void *)(a2 + 480 * (int)a3 + 32 * a4 + 1056) && !gfxAllocateTextureLevel() && !*v12) {
        *int v12 = 1285;
      }
      if (*(void *)(a2 + 536)) {
        gleSynchronizePluginTextureLevels(a1, a2);
      }
      gleGenerateMipmapData(a1, a2, a3, a4, v10);
    }
    return 0;
  }
  *(void *)(a2 + 536) = *(void *)(a1 + 29024);
  if (v10 > a4)
  {
    uint64_t v13 = v10 - (uint64_t)a4;
    int v14 = (unsigned char *)(480 * (int)a3 + 32 * a4 + a2 + 1075);
    do
    {
      *v14 |= 0x40u;
      v14 += 32;
      --v13;
    }
    while (v13);
  }
  return 1;
}

uint64_t gleGenerateMipmapData(uint64_t result, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v987 = *MEMORY[0x263EF8340];
  unsigned int v5 = *(_WORD *)(a2 + 768) & 0xF;
  if (v5 > 0xA) {
    return result;
  }
  uint64_t v7 = a2;
  if (((1 << v5) & 0x429) != 0)
  {
    int v8 = 0;
    int v787 = 2;
    int v747 = 1;
  }
  else if (((1 << v5) & 0x50) != 0)
  {
    int v747 = 0;
    int v8 = 0;
    int v787 = 1;
  }
  else
  {
    int v747 = 1;
    if (v5 != 1) {
      return result;
    }
    int v787 = 3;
    int v8 = 1;
  }
  int v9 = (unsigned __int16 *)(a2 + 480 * a3 + 32 * a4);
  int v10 = v9[524];
  int v11 = v9[525];
  int v12 = v9[518];
  unsigned int v13 = v9[519];
  int v14 = v9[520];
  uint64_t v738 = a4;
  if (v9[525])
  {
    int v740 = 0;
    int v741 = 0;
    uint64_t v736 = 0;
    goto LABEL_25;
  }
  int v972 = v8;
  uint64_t v15 = (uint64_t *)(a2 + 480 * a3 + 32 * a4 + 1056);
  uint64_t v736 = *v15;
  int v740 = 6403;
  int v741 = 5121;
  switch(v9[524])
  {
    case 0x8DBBu:
      break;
    case 0x8DBCu:
      int v741 = 5120;
      int v16 = 6403;
      goto LABEL_19;
    case 0x8DBDu:
      int v18 = 5121;
      goto LABEL_18;
    case 0x8DBEu:
      int v18 = 5120;
LABEL_18:
      int v741 = v18;
      int v16 = 33319;
LABEL_19:
      int v740 = v16;
      break;
    default:
      if (v10 == 34871) {
        int v17 = 6410;
      }
      else {
        int v17 = 6408;
      }
      int v740 = v17;
      int v741 = 5121;
      break;
  }
  uint64_t v19 = v9[520];
  double result = gfxLibAlloc();
  *uint64_t v15 = result;
  if (result)
  {
    int v969 = a5;
    uint64_t v986 = 0;
    long long v984 = 0u;
    long long v985 = 0u;
    long long v982 = 0u;
    long long v983 = 0u;
    glgConvertType();
    glgConvertType();
    int v20 = gleRowBytes(v10, 0, *(unsigned __int16 *)(v7 + 480 * a3 + 32 * v738 + 1044));
    int v21 = gleRowBytes(v740, v741, v12);
    int CompressedImageBytes = glgGetCompressedImageBytes();
    LODWORD(v983) = v20;
    HIDWORD(v983) = v21;
    *((void *)&v984 + 1) = 2;
    LODWORD(v985) = 0x10000000;
    *(void *)((char *)&v985 + 4) = __PAIR64__(v13, v12);
    if (v19)
    {
      int v23 = CompressedImageBytes;
      unsigned int v24 = 0;
      unsigned int v25 = 0;
      int v26 = v21 * v13;
      uint64_t v27 = v19;
      do
      {
        uint64_t v28 = *v15 + v24;
        *(void *)&long long v982 = v736 + v25;
        *((void *)&v982 + 1) = v28;
        glgProcessPixelsWithProcessor();
        v25 += v23;
        v24 += v26;
        --v27;
      }
      while (v27);
    }
    int v10 = v740;
    int v11 = v741;
    uint64_t v7 = a2;
    a5 = v969;
    int v8 = v972;
    int v14 = v19;
LABEL_25:
    int v821 = *(unsigned __int8 *)(v7 + 480 * a3 + 32 * v738 + 1042);
    int v29 = v12 - 2 * v821;
    if (v747) {
      int v30 = 2 * v821;
    }
    else {
      int v30 = 0;
    }
    int v746 = v30;
    int v31 = v13 - v30;
    uint64_t v748 = 2 * *(unsigned __int8 *)(v7 + 480 * a3 + 32 * v738 + 1042);
    if (v8) {
      int v32 = 2 * v821;
    }
    else {
      int v32 = 0;
    }
    int v745 = v32;
    int v33 = v14 - v32;
    __int16 v744 = *(_WORD *)(v7 + 982);
    if ((v31 - 1) & v31 | (v29 - 1) & v29 | (v33 - 1) & v33)
    {
      double result = gleComponents(v10);
      v973 = gleUbyteFilterBox;
      int v34 = (void (*)(void))gleUbyteFilter2;
      if (v11 <= 33633)
      {
        BOOL v35 = (void (*)(void))gleUbyteFilter1;
        int v36 = v11 - 5120;
        char v37 = 0;
        uint64_t v967 = result;
        int v38 = a4;
        char v39 = (void (*)(void))gleUbyteFilter3;
        switch(v36)
        {
          case 0:
            char v37 = 0;
            v973 = gleByteFilterBox;
            char v39 = (void (*)(void))gleByteFilter3;
            int v34 = (void (*)(void))gleByteFilter2;
            BOOL v35 = (void (*)(void))gleByteFilter1;
            uint64_t v967 = result;
            goto LABEL_87;
          case 1:
            goto LABEL_87;
          case 2:
            char v37 = 0;
            uint64_t v967 = (2 * result);
            v973 = gleShortFilterBox;
            char v39 = (void (*)(void))gleShortFilter3;
            int v34 = (void (*)(void))gleShortFilter2;
            uint64_t v46 = (void (*)(void))gleShortFilter1;
            goto LABEL_86;
          case 3:
            char v37 = 0;
            uint64_t v967 = (2 * result);
            v973 = gleUshortFilterBox;
            char v39 = (void (*)(void))gleUshortFilter3;
            int v34 = (void (*)(void))gleUshortFilter2;
            uint64_t v46 = (void (*)(void))gleUshortFilter1;
            goto LABEL_86;
          case 4:
            char v37 = 0;
            uint64_t v967 = (4 * result);
            v973 = gleIntFilterBox;
            char v39 = (void (*)(void))gleIntFilter3;
            int v34 = (void (*)(void))gleIntFilter2;
            uint64_t v46 = (void (*)(void))gleIntFilter1;
            goto LABEL_86;
          case 5:
            char v37 = 0;
            uint64_t v967 = (4 * result);
            v973 = gleUintFilterBox;
            char v39 = (void (*)(void))gleUintFilter3;
            int v34 = (void (*)(void))gleUintFilter2;
            uint64_t v46 = (void (*)(void))gleUintFilter1;
            goto LABEL_86;
          case 6:
            char v37 = 0;
            uint64_t v967 = (4 * result);
            v973 = gleFloatFilterBox;
            char v39 = (void (*)(void))gleFloatFilter3;
            int v34 = (void (*)(void))gleFloatFilter2;
            uint64_t v46 = (void (*)(void))gleFloatFilter1;
            goto LABEL_86;
          case 7:
          case 8:
          case 9:
          case 10:
            goto LABEL_74;
          case 11:
            char v37 = 0;
            uint64_t v967 = (2 * result);
            v973 = gleHalfFloatFilterBox;
            char v39 = (void (*)(void))gleHalfFloatFilter3;
            int v34 = (void (*)(void))gleHalfFloatFilter2;
            uint64_t v46 = (void (*)(void))gleHalfFloatFilter1;
            goto LABEL_86;
          default:
            int v38 = a4;
            switch(gleUbyteFilter3)
            {
              case 0x8032u:
                char v37 = 0;
                uint64_t v967 = 1;
                v973 = gle332FilterBox;
                char v39 = (void (*)(void))gle332Filter3;
                int v34 = (void (*)(void))gle332Filter2;
                uint64_t v46 = (void (*)(void))gle332Filter1;
                goto LABEL_86;
              case 0x8033u:
                goto LABEL_61;
              case 0x8034u:
                char v37 = 0;
                uint64_t v967 = 2;
                v973 = gle5551FilterBox;
                char v39 = (void (*)(void))gle5551Filter3;
                int v34 = (void (*)(void))gle5551Filter2;
                uint64_t v46 = (void (*)(void))gle5551Filter1;
                goto LABEL_86;
              case 0x8035u:
                goto LABEL_62;
              case 0x8036u:
                char v37 = 0;
                uint64_t v967 = 4;
                v973 = gle1010102FilterBox;
                char v39 = (void (*)(void))gle1010102Filter3;
                int v34 = (void (*)(void))gle1010102Filter2;
                uint64_t v46 = (void (*)(void))gle1010102Filter1;
                goto LABEL_86;
              default:
                goto LABEL_74;
            }
        }
      }
      if (v11 <= 34233)
      {
        int v38 = a4;
        switch(v11)
        {
          case 33634:
            char v37 = 0;
            uint64_t v967 = 1;
            v973 = gle233RevFilterBox;
            char v39 = (void (*)(void))gle233RevFilter3;
            int v34 = (void (*)(void))gle233RevFilter2;
            uint64_t v46 = (void (*)(void))gle233RevFilter1;
            goto LABEL_86;
          case 33635:
          case 33636:
            char v37 = 0;
            uint64_t v967 = 2;
            v973 = gle565FilterBox;
            char v39 = (void (*)(void))gle565Filter3;
            int v34 = (void (*)(void))gle565Filter2;
            uint64_t v46 = (void (*)(void))gle565Filter1;
            goto LABEL_86;
          case 33637:
LABEL_61:
            char v37 = 0;
            uint64_t v967 = 2;
            v973 = gle4444FilterBox;
            char v39 = (void (*)(void))gle4444Filter3;
            int v34 = (void (*)(void))gle4444Filter2;
            uint64_t v46 = (void (*)(void))gle4444Filter1;
            goto LABEL_86;
          case 33638:
            char v37 = 0;
            uint64_t v967 = 2;
            v973 = gle1555RevFilterBox;
            char v39 = (void (*)(void))gle1555RevFilter3;
            int v34 = (void (*)(void))gle1555RevFilter2;
            uint64_t v46 = (void (*)(void))gle1555RevFilter1;
            goto LABEL_86;
          case 33639:
LABEL_62:
            char v37 = 0;
            uint64_t v967 = 4;
            v973 = gle8888FilterBox;
            char v39 = (void (*)(void))gle8888Filter3;
            int v34 = (void (*)(void))gle8888Filter2;
            uint64_t v46 = (void (*)(void))gle8888Filter1;
            goto LABEL_86;
          case 33640:
            char v37 = 0;
            uint64_t v967 = 4;
            v973 = gle2101010RevFilterBox;
            char v39 = (void (*)(void))gle2101010RevFilter3;
            int v34 = (void (*)(void))gle2101010RevFilter2;
            uint64_t v46 = (void (*)(void))gle2101010RevFilter1;
            goto LABEL_86;
          default:
            int v38 = a4;
            if (v11 != 34042) {
              goto LABEL_74;
            }
            char v37 = 0;
            uint64_t v967 = 4;
            v973 = gle248FilterBox;
            char v39 = (void (*)(void))gle248Filter3;
            int v34 = (void (*)(void))gle248Filter2;
            uint64_t v46 = (void (*)(void))gle248Filter1;
            break;
        }
        goto LABEL_86;
      }
      if (v11 > 35901)
      {
        if (v11 == 35902)
        {
          char v37 = 0;
          uint64_t v967 = 4;
          v973 = gleSharedExponentFilterBox;
          char v39 = (void (*)(void))gleSharedExponentFilter3;
          int v34 = (void (*)(void))gleSharedExponentFilter2;
          BOOL v35 = (void (*)(void))gleSharedExponentFilter1;
          goto LABEL_69;
        }
        int v38 = a4;
        if (v11 == 36269)
        {
          char v37 = 0;
          uint64_t v967 = 8;
          v973 = gle32F248FilterBox;
          char v39 = (void (*)(void))gle32F248Filter3;
          int v34 = (void (*)(void))gle32F248Filter2;
          uint64_t v46 = (void (*)(void))gle32F248Filter1;
LABEL_86:
          BOOL v35 = v46;
LABEL_87:
          LODWORD(v49) = v38 + 1;
          int v50 = v29 >> v37;
          BOOL v51 = v29 >> v37 > 1;
          BOOL v896 = v31 > 1;
          BOOL v52 = v29 >> v37 > 1 || v31 > 1;
          BOOL v53 = v33 > 1;
          if (v33 > 1) {
            BOOL v52 = 1;
          }
          if (v38 < a5)
          {
            char v742 = v37;
            int v54 = a3;
            uint64_t v55 = v738;
            if (v52)
            {
              unsigned int v56 = v33;
              __int16 v57 = &v982;
              v930 = (char *)&v985;
              uint64_t v49 = v738 + 1;
              uint64_t v739 = a5;
              uint64_t v878 = 2 * (int)v967;
              v854 = v35;
              int v58 = v31;
              unsigned int v980 = result;
              v803 = v39;
              v899 = v34;
              while (1)
              {
                BOOL v874 = v53;
                BOOL v880 = v51;
                uint64_t v59 = v7 + 480 * v54 + 1032;
                uint64_t v60 = v59 + 32 * v55;
                if (v50 == 1) {
                  uint64_t v61 = 0;
                }
                else {
                  uint64_t v61 = v967;
                }
                uint64_t v861 = v61;
                char v62 = v742;
                int v63 = *(unsigned __int16 *)(v60 + 12) >> v742;
                unsigned int v64 = v63 * v967;
                unsigned int v925 = v58;
                if (v58 == 1) {
                  uint64_t v65 = 0;
                }
                else {
                  uint64_t v65 = v64;
                }
                uint64_t v862 = v65;
                uint64_t v66 = *(unsigned __int16 *)(v60 + 14);
                uint64_t v789 = v63 * (uint64_t)(int)v967;
                uint64_t v807 = (int)v64;
                uint64_t v67 = (int)v64 * v66;
                uint64_t v808 = v67;
                if (v56 == 1) {
                  uint64_t v67 = 0;
                }
                else {
                  uint64_t v67 = v67;
                }
                uint64_t v859 = v67;
                uint64_t v833 = *(void *)(v60 + 24);
                uint64_t v749 = v49;
                uint64_t v68 = v59 + 32 * v49;
                uint64_t v70 = *(void *)(v68 + 24);
                int v69 = (uint64_t *)(v68 + 24);
                int v71 = *((unsigned __int16 *)v69 - 10);
                int v72 = *((unsigned __int16 *)v69 - 9);
                int v73 = *((unsigned __int16 *)v69 - 8);
                uint64_t v942 = v70;
                if (!v70)
                {
                  uint64_t v74 = a2 + 480 * a3 + 32 * v49;
                  unsigned int v75 = v56;
                  int v76 = v50;
                  double result = gfxLibAlloc();
                  int v50 = v76;
                  unsigned int v56 = v75;
                  char v62 = v742;
                  uint64_t v942 = result;
                  *int v69 = result;
                  *(unsigned char *)(v74 + 1043) |= 0x10u;
                }
                int v971 = (v71 - (int)v748) >> v62;
                int v939 = v72 - v746;
                unsigned int v892 = v73 - v745;
                if (v747) {
                  int v77 = v73 - v745;
                }
                else {
                  int v77 = v72;
                }
                if ((v744 & 0x2000) == 0) {
                  int v77 = 1;
                }
                int v786 = v77;
                if (v77 >= 1) {
                  break;
                }
LABEL_457:
                uint64_t v55 = v749;
                uint64_t v7 = a2;
                uint64_t v49 = v749 + 1;
                int v50 = v971;
                BOOL v51 = v971 > 1;
                BOOL v896 = v939 > 1;
                BOOL v586 = v939 > 1 || v971 > 1;
                BOOL v53 = (int)v892 > 1;
                if ((int)v892 > 1) {
                  BOOL v586 = 1;
                }
                int v54 = a3;
                if (v586)
                {
                  unsigned int v56 = v892;
                  int v58 = v939;
                  if (v749 < v739) {
                    continue;
                  }
                }
                int v38 = a4;
                goto LABEL_466;
              }
              int v788 = 0;
              int v935 = v63 - (v50 + 2 * v821);
              uint64_t v78 = (int)v967 + (uint64_t)(int)v861;
              uint64_t v79 = v66 - (v748 + (int)v925);
              unsigned int v894 = v56;
              uint64_t v80 = 2 * (int)v861;
              uint64_t v857 = 2 * (int)v862;
              uint64_t v81 = 3 * (int)v862;
              int v82 = v50;
              uint64_t v83 = 3 * (int)v861;
              uint64_t v84 = 6 * (int)v861;
              uint64_t v85 = 6 * v861;
              uint64_t v800 = v84 + v857 + v78 - 2 * (int)v862 - v85;
              uint64_t v86 = (int)v861 + (uint64_t)(int)v862;
              uint64_t v87 = 2 * (int)v862 + (uint64_t)(2 * (int)v861);
              uint64_t v785 = v81 + 4 * (int)v861 - v87;
              uint64_t v784 = 3 * v86 - v87;
              uint64_t v783 = v81 + v80 - v87;
              uint64_t v88 = 2 * (int)v859;
              double result = 3 * (int)v859;
              uint64_t v89 = v84 + v88;
              uint64_t v799 = v84 + v88 + v78 - 2 * (int)v859 - v85;
              uint64_t v90 = (int)v861 + (uint64_t)(int)v859;
              uint64_t v91 = result + 4 * (int)v861;
              uint64_t v92 = 2 * (int)v859 + (uint64_t)(2 * (int)v861);
              uint64_t v772 = v91 - v92;
              uint64_t v771 = 3 * v90 - v92;
              uint64_t v770 = result + v80 - v92;
              uint64_t v93 = v789 + 2 * (int)v859;
              uint64_t v94 = v93 + 2 * (int)v861;
              uint64_t v769 = v91 - v94;
              uint64_t v768 = 3 * v90 - v94;
              uint64_t v767 = result + v80 - v94;
              uint64_t v95 = (int)v967 * (uint64_t)v935;
              uint64_t v804 = v78 + v80 - 2 * (int)v861;
              uint64_t v782 = v84 + 4 * (int)v862 - 2 * (int)v862 - 4 * v861;
              uint64_t v96 = 4 * (int)v861;
              uint64_t v97 = 5 * (int)v861;
              uint64_t v780 = 4 * v86 - 2 * (int)v862 - 4 * v861;
              uint64_t v781 = v97 + 4 * (int)v862 - 2 * (int)v862 - 4 * v861;
              uint64_t v820 = v84 + v857 - 4 * v861;
              uint64_t v819 = v97 + v857 - 4 * v861;
              uint64_t v818 = v96 + v857 - 4 * v861;
              uint64_t v817 = v96 + (int)v862 - 2 * (int)v861;
              uint64_t v816 = v83 + (int)v862 - 2 * (int)v861;
              uint64_t v815 = v80 + (int)v862 - 2 * (int)v861;
              uint64_t v98 = v84 + 4 * (int)v859;
              uint64_t v766 = v98 - 2 * (int)v859 - 4 * v861;
              uint64_t v99 = v97 + 4 * (int)v859;
              uint64_t v764 = 4 * v90 - 2 * (int)v859 - 4 * v861;
              uint64_t v765 = v99 - 2 * (int)v859 - 4 * v861;
              uint64_t v814 = v89 - 4 * v861;
              uint64_t v813 = v97 + v88 - 4 * v861;
              uint64_t v812 = v96 + v88 - 4 * v861;
              uint64_t v811 = v96 + (int)v859 - 2 * (int)v861;
              uint64_t v810 = v83 + (int)v859 - 2 * (int)v861;
              uint64_t v809 = v80 + (int)v859 - 2 * (int)v861;
              uint64_t v762 = v99 - v93 - 4 * v861;
              uint64_t v763 = v98 - v93 - 4 * v861;
              uint64_t v761 = 4 * v90 - v93 - 4 * v861;
              uint64_t v900 = -2 * (int)v861;
              uint64_t v805 = (int)v95 + (uint64_t)(int)v862;
              uint64_t v798 = v78 + v857 - 2 * (int)v862;
              uint64_t v778 = v857 + (int)v861 - 2 * (int)v862;
              uint64_t v779 = v80 + v857 - 2 * (int)v862;
              uint64_t v853 = v88 + 6 * (int)v862 - 4 * v862;
              uint64_t v100 = 4 * (int)v862;
              uint64_t v852 = v100 + v88 + (int)v862 - 4 * v862;
              uint64_t v851 = v100 + v88 - 4 * v862;
              uint64_t v850 = v100 + (int)v859 - 2 * (int)v862;
              uint64_t v776 = v81 - 2 * (int)v862;
              uint64_t v777 = v100 - 2 * (int)v862;
              uint64_t v849 = v81 + (int)v859 - 2 * (int)v862;
              uint64_t v848 = v857 + (int)v859 - 2 * (int)v862;
              uint64_t v923 = -2 * (int)v862;
              uint64_t v797 = v78 + v88 - 2 * (int)v859;
              uint64_t v759 = v80 + v88 - v789 - 2 * (int)v859;
              uint64_t v760 = v80 + v88 - 2 * (int)v859;
              uint64_t v101 = v88 + (int)v861;
              uint64_t v757 = v101 - v789 - 2 * (int)v859;
              uint64_t v758 = v101 - 2 * (int)v859;
              uint64_t v102 = 4 * (int)v859;
              uint64_t v876 = -2 * (int)v859;
              uint64_t v755 = result - 2 * (int)v859;
              uint64_t v756 = v102 - 2 * (int)v859;
              unsigned int v936 = v82;
              char v806 = v880 & v82;
              uint64_t v928 = v78;
              uint64_t v791 = v95;
              uint64_t v754 = v102 - v93;
              uint64_t v753 = result - v93;
              uint64_t v775 = v88 - v93;
              uint64_t v774 = v80 - v789;
              uint64_t v790 = v807 + (int)v95;
              uint64_t v773 = (int)v861 - v789;
              uint64_t v103 = v803;
              uint64_t v855 = v80;
              uint64_t v743 = v80 - v808;
              uint64_t v752 = v79 * v807;
              uint64_t v792 = (int)v859 + (uint64_t)((int)v79 * (int)v807);
              int v104 = v787;
              uint64_t v105 = v980;
              uint64_t v106 = v967;
              uint64_t v107 = v942;
              uint64_t v108 = v833;
              while (v104 != 3)
              {
                uint64_t v109 = (int)v967;
                if (v104 == 2)
                {
                  if (v821)
                  {
                    uint64_t v125 = v807;
                    uint64_t v126 = v108;
                    v899(v107);
                    uint64_t v127 = v126 + (int)v967;
                    uint64_t v128 = v107 + (int)v967;
                    uint64_t v129 = (int)v967 + (uint64_t)(int)v861;
                    v903 = (char *)v57;
                    if (v806)
                    {
                      if (v971 >= 1)
                      {
                        uint64_t v130 = v126;
                        uint64_t v131 = 0;
                        uint64_t v132 = v126 + v855;
                        uint64_t v133 = v130 + (int)v861;
                        uint64_t v134 = (char *)v57;
                        do
                        {
                          uint64_t v835 = v130;
                          uint64_t v135 = v134;
                          v107 += (int)v967;
                          ((void (*)(char *, uint64_t, void, uint64_t))v854)(v134, v130 + (int)v967, v980, v807);
                          uint64_t v136 = &v134[(int)v967];
                          ((void (*)(char *, uint64_t, void, uint64_t))v854)(v136, v133 + (int)v967, v980, v807);
                          ((void (*)(char *, uint64_t, void, uint64_t))v854)((char *)v135 + v878, v132 + (int)v967, v980, v807);
                          uint64_t v134 = &v136[-(int)v967];
                          ((void (*)(uint64_t, _OWORD *, void, uint64_t, void, void, uint64_t))v973)(v107, v135, v980, v967, v936, v971, v131);
                          uint64_t v131 = (v131 + 1);
                          uint64_t v130 = v835 + v804;
                          v132 += v804;
                          v133 += v804;
                        }
                        while (v971 != v131);
                        v903 = v134;
                        uint64_t v127 = v130 + (int)v967;
                        uint64_t v128 = v107 + (int)v967;
                        uint64_t v105 = v980;
                        uint64_t v109 = (int)v967;
                        uint64_t v125 = v807;
                        uint64_t v129 = (int)v967 + (uint64_t)(int)v861;
                      }
                      v127 += v109;
                    }
                    else
                    {
                      int v147 = v971;
                      if (v971 >= 1)
                      {
                        do
                        {
                          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v899)(v128, v127, v105, v861, v807);
                          v127 += v928;
                          v128 += (int)v967;
                          --v147;
                        }
                        while (v147);
                      }
                      uint64_t v129 = (int)v967 + (uint64_t)(int)v861;
                    }
                    double result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v899)(v128, v127 - (int)v967, v105, v967, v125);
                    uint64_t v107 = v128 + v109;
                    uint64_t v108 = v127 - (int)v967 + v878 + v791;
                    __int16 v57 = (long long *)v903;
                    int v144 = v930;
                  }
                  else
                  {
                    int v144 = v930;
                    uint64_t v129 = (int)v967 + (uint64_t)(int)v861;
                  }
                  uint64_t v148 = -2 * (int)v862;
                  uint64_t v149 = v862;
                  v930 = v144;
                  if (v896 & v925)
                  {
                    if (v939 < 1)
                    {
                      uint64_t v159 = (uint64_t)v57;
                    }
                    else
                    {
                      unsigned int v150 = 0;
                      do
                      {
                        unsigned int v944 = v150;
                        if (v821)
                        {
                          uint64_t v151 = v108;
                          uint64_t v152 = v148;
                          v854(v57);
                          int v153 = (char *)v57 + (int)v967;
                          ((void (*)(char *, uint64_t, uint64_t, uint64_t))v854)(v153, v151 + (int)v862, v105, v967);
                          uint64_t v154 = v151 + (int)v862 + (int)v862;
                          signed int v155 = &v153[(int)v967];
                          ((void (*)(char *, uint64_t, uint64_t, uint64_t))v854)(v155, v154, v105, v967);
                          int v156 = &v155[-2 * (int)v967];
                          double result = ((uint64_t (*)(uint64_t))v973)(v107);
                          uint64_t v108 = v154 + v152 + (int)v967;
                          v107 += (int)v967;
                        }
                        else
                        {
                          int v156 = (char *)v57;
                        }
                        if (v806)
                        {
                          if (v971 < 1)
                          {
                            uint64_t v159 = (uint64_t)v156;
                          }
                          else
                          {
                            uint64_t v157 = 0;
                            do
                            {
                              uint64_t v158 = v108;
                              ((void (*)(char *))v973)(v156);
                              ((void (*)(void))v973)();
                              ((void (*)(char *, uint64_t, void, uint64_t, void, void, uint64_t))v973)(&v156[v878], v158 + v857, v980, v861, v936, v971, v157);
                              uint64_t v159 = (uint64_t)v156;
                              double result = ((uint64_t (*)(uint64_t, char *, void, uint64_t, void, void, void))v973)(v107, v156, v980, v967, v925, v939, v944);
                              uint64_t v108 = v158 + (int)v862 + (int)v862 + v923 + v928;
                              v107 += (int)v967;
                              uint64_t v157 = (v157 + 1);
                            }
                            while (v971 != v157);
                          }
                          v108 += (int)v967;
                        }
                        else
                        {
                          int v160 = v971;
                          signed int v161 = v156;
                          uint64_t v159 = (uint64_t)v156;
                          if (v971 >= 1)
                          {
                            do
                            {
                              int v904 = v160;
                              uint64_t v162 = v108;
                              v854(v161);
                              uint64_t v163 = (uint64_t)v161 + (int)v967;
                              ((void (*)(uint64_t, uint64_t, void, uint64_t))v854)(v163, v162 + (int)v862, v980, v861);
                              ((void (*)(char *, uint64_t, void, uint64_t))v854)((char *)v161 + v878, v162 + v857, v980, v861);
                              int v164 = v161;
                              uint64_t v165 = v162 + (int)v862 + (int)v862 + v923;
                              uint64_t v159 = v163 - (int)v967;
                              double result = ((uint64_t (*)(uint64_t, _OWORD *, void, uint64_t, void, void, void))v973)(v107, v164, v980, v967, v925, v939, v944);
                              uint64_t v108 = v165 + v928;
                              v107 += (int)v967;
                              signed int v161 = (_OWORD *)v159;
                              int v160 = v904 - 1;
                            }
                            while (v904 != 1);
                          }
                        }
                        if (v821)
                        {
                          uint64_t v166 = v108 - (int)v967;
                          uint64_t v105 = v980;
                          ((void (*)(uint64_t, uint64_t, void, uint64_t))v854)(v159, v166, v980, v967);
                          uint64_t v167 = v166 + (int)v862;
                          uint64_t v168 = (int)v967;
                          ((void (*)(uint64_t, uint64_t, void, uint64_t))v854)(v159 + (int)v967, v167, v980, v967);
                          uint64_t v169 = v167 + (int)v862;
                          ((void (*)(uint64_t, uint64_t, void, uint64_t))v854)(v159 + v168 + v168, v169, v980, v967);
                          uint64_t v159 = v159 + v168 + v168 - 2 * (int)v967;
                          int v170 = v939;
                          unsigned int v171 = v944;
                          double result = ((uint64_t (*)(uint64_t, uint64_t, void, uint64_t, void, void, void))v973)(v107, v159, v980, v967, v925, v939, v944);
                          uint64_t v148 = -2 * (int)v862;
                          uint64_t v108 = v169 + v923 + v878;
                          v107 += (int)v967;
                        }
                        else
                        {
                          int v170 = v939;
                          uint64_t v148 = -2 * (int)v862;
                          uint64_t v105 = v980;
                          unsigned int v171 = v944;
                        }
                        v108 += v805;
                        unsigned int v150 = v171 + 1;
                        __int16 v57 = (long long *)v159;
                      }
                      while (v150 != v170);
                    }
                    v108 += v789;
                    __int16 v57 = (long long *)v159;
                    uint64_t v109 = (int)v967;
                  }
                  else if (v939 >= 1)
                  {
                    int v172 = 0;
                    do
                    {
                      int v905 = v172;
                      if (v821)
                      {
                        uint64_t v173 = v108;
                        double result = ((uint64_t (*)(uint64_t))v899)(v107);
                        uint64_t v108 = v173 + v109;
                        v107 += v109;
                      }
                      if (v806)
                      {
                        if (v971 < 1)
                        {
                          long long v178 = (char *)v57;
                        }
                        else
                        {
                          uint64_t v174 = 0;
                          do
                          {
                            uint64_t v175 = v108;
                            v854(v57);
                            v945 = (char *)v57 + (int)v967;
                            ((void (*)(void))v854)();
                            ((void (*)(char *, uint64_t, void, uint64_t))v854)((char *)v57 + v878, v175 + v855, v980, v862);
                            long long v176 = v57;
                            uint64_t v177 = v175 + (int)v861 + (int)v861 + v900;
                            long long v178 = &v945[-(int)v967];
                            double result = ((uint64_t (*)(uint64_t, long long *, void, uint64_t, void, void, uint64_t))v973)(v107, v176, v980, v967, v936, v971, v174);
                            uint64_t v108 = v177 + v928;
                            v107 += (int)v967;
                            uint64_t v174 = (v174 + 1);
                            __int16 v57 = (long long *)v178;
                          }
                          while (v971 != v174);
                        }
                        uint64_t v109 = (int)v967;
                        v108 += (int)v967;
                        __int16 v57 = (long long *)v178;
                        uint64_t v149 = v862;
                        uint64_t v129 = (int)v967 + (uint64_t)(int)v861;
                        uint64_t v105 = v980;
                      }
                      else
                      {
                        int v179 = v971;
                        uint64_t v180 = v129;
                        if (v971 >= 1)
                        {
                          do
                          {
                            uint64_t v181 = v108;
                            double result = ((uint64_t (*)(uint64_t))v899)(v107);
                            uint64_t v108 = v181 + v180;
                            v107 += v109;
                            --v179;
                          }
                          while (v179);
                        }
                        uint64_t v129 = v180;
                      }
                      if (v821)
                      {
                        long long v182 = v57;
                        uint64_t v183 = v108 - (int)v967;
                        double result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v899)(v107, v183, v105, v967, v149);
                        uint64_t v108 = v183 + v878;
                        __int16 v57 = v182;
                        v107 += v109;
                      }
                      v108 += v805;
                      int v172 = v905 + 1;
                    }
                    while (v905 + 1 != v939);
                  }
                  if (v821)
                  {
                    uint64_t v184 = v108;
                    uint64_t v185 = v108 - v789;
                    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v899)(v107, v108 - v789, v105, v967, v807);
                    uint64_t v186 = v105;
                    uint64_t v187 = v185 + v109;
                    uint64_t v188 = v107 + v109;
                    if (v806)
                    {
                      if (v971 < 1)
                      {
                        v906 = v57;
                        uint64_t v195 = v967;
                      }
                      else
                      {
                        uint64_t v189 = 0;
                        uint64_t v190 = v184;
                        uint64_t v191 = v184 + v774;
                        uint64_t v192 = v109;
                        uint64_t v193 = v190 + v773;
                        do
                        {
                          v107 += v192;
                          ((void (*)(long long *, uint64_t, void, uint64_t))v854)(v57, v185 + v192, v980, v807);
                          ((void (*)(char *, uint64_t, void, uint64_t))v854)((char *)v57 + v192, v193 + v192, v980, v807);
                          ((void (*)(char *, uint64_t, void, uint64_t))v854)((char *)v57 + v878, v191 + v192, v980, v807);
                          __int16 v194 = v57;
                          __int16 v57 = (long long *)((char *)v57 + v192 + v192 - 2 * (int)v967);
                          ((void (*)(uint64_t, long long *, void, uint64_t, void, void, uint64_t))v973)(v107, v194, v980, v967, v936, v971, v189);
                          uint64_t v189 = (v189 + 1);
                          v185 += v804;
                          v191 += v804;
                          v193 += v804;
                        }
                        while (v971 != v189);
                        v906 = v57;
                        uint64_t v187 = v185 + v192;
                        uint64_t v188 = v107 + v192;
                        uint64_t v109 = v192;
                        uint64_t v195 = v967;
                      }
                      v187 += v109;
                    }
                    else
                    {
                      v906 = v57;
                      int v196 = v971;
                      if (v971 >= 1)
                      {
                        do
                        {
                          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v899)(v188, v187, v186, v861, v807);
                          v187 += v928;
                          v188 += v109;
                          --v196;
                        }
                        while (v196);
                      }
                      uint64_t v195 = v967;
                    }
                    uint64_t v245 = v195;
                    double result = ((uint64_t (*)(uint64_t, uint64_t, void))v899)(v188, v187 - (int)v967, v980);
                    uint64_t v106 = v245;
                    uint64_t v107 = v188 + v109;
                    uint64_t v108 = v187 - (int)v967 + v878 + v790;
                    uint64_t v103 = v803;
                    __int16 v57 = v906;
                    uint64_t v105 = v980;
                    goto LABEL_456;
                  }
LABEL_195:
                  uint64_t v103 = v803;
                  uint64_t v106 = v967;
                  goto LABEL_456;
                }
                if (v821)
                {
                  uint64_t v110 = v108;
                  double result = ((uint64_t (*)(uint64_t))v854)(v107);
                  uint64_t v108 = v110 + (int)v967;
                  v107 += (int)v967;
                }
                if (v806)
                {
                  if (v971 >= 1)
                  {
                    for (int i = 0; i != v971; ++i)
                    {
                      uint64_t v112 = v108;
                      double result = ((uint64_t (*)(uint64_t))v973)(v107);
                      uint64_t v108 = v112 + v928;
                      v107 += (int)v967;
                    }
                  }
                  v108 += (int)v967;
                  uint64_t v105 = v980;
                }
                else
                {
                  int v137 = v971;
                  if (v971 >= 1)
                  {
                    do
                    {
                      uint64_t v138 = v108;
                      double result = ((uint64_t (*)(uint64_t))v854)(v107);
                      uint64_t v108 = v138 + v928;
                      v107 += (int)v967;
                      --v137;
                    }
                    while (v137);
                  }
                }
                if (!v821) {
                  goto LABEL_195;
                }
                int v139 = v57;
                uint64_t v140 = v108 - (int)v967;
                double result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v854)(v107, v140, v105, v967);
                uint64_t v106 = v967;
                uint64_t v108 = v140 + v878;
                __int16 v57 = v139;
                v107 += (int)v967;
                uint64_t v103 = v803;
LABEL_456:
                ++v788;
                int v104 = v787;
                if (v788 == v786) {
                  goto LABEL_457;
                }
              }
              uint64_t v113 = (int)v967;
              if (v821)
              {
                uint64_t v114 = v108;
                uint64_t v115 = v106;
                v103(v107);
                uint64_t v116 = v114 + (int)v967;
                uint64_t v117 = v107 + (int)v967;
                v902 = v57;
                if (v806)
                {
                  if (v971 < 1)
                  {
                    uint64_t v124 = v115;
                  }
                  else
                  {
                    uint64_t v118 = v114;
                    uint64_t v119 = 0;
                    uint64_t v943 = v114 + v855;
                    uint64_t v120 = v114 + (int)v861;
                    uint64_t v121 = (char *)v57;
                    do
                    {
                      uint64_t v834 = v118;
                      unint64_t v122 = v121;
                      v107 += (int)v967;
                      ((void (*)(char *, uint64_t, void, uint64_t, uint64_t))v899)(v121, v118 + (int)v967, v980, v807, v808);
                      unint64_t v123 = &v121[(int)v967];
                      ((void (*)(char *, uint64_t, void, uint64_t, uint64_t))v899)(v123, v120 + (int)v967, v980, v807, v808);
                      ((void (*)(char *, uint64_t, void, uint64_t, uint64_t))v899)((char *)v122 + v878, v943 + (int)v967, v980, v807, v808);
                      uint64_t v121 = &v123[-(int)v967];
                      ((void (*)(uint64_t, _OWORD *, void, uint64_t, void, void, uint64_t))v973)(v107, v122, v980, v967, v936, v971, v119);
                      uint64_t v119 = (v119 + 1);
                      uint64_t v118 = v834 + v804;
                      v943 += v804;
                      v120 += v804;
                    }
                    while (v971 != v119);
                    v902 = v121;
                    uint64_t v113 = (int)v967;
                    uint64_t v124 = v967;
                    uint64_t v116 = v118 + (int)v967;
                    uint64_t v117 = v107 + (int)v967;
                    uint64_t v105 = v980;
                  }
                  v116 += v113;
                  long long v146 = v930;
                }
                else
                {
                  int v145 = v971;
                  if (v971 >= 1)
                  {
                    do
                    {
                      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v803)(v117, v116, v105, v861, v807, v808);
                      v116 += v928;
                      v117 += (int)v967;
                      --v145;
                    }
                    while (v145);
                  }
                  long long v146 = v930;
                  uint64_t v124 = v967;
                }
                int v197 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v803;
                ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v803)(v117, v116 - (int)v967, v105, v124, v807, v808);
                uint64_t v946 = v117 + v113;
                uint64_t v198 = v116 - (int)v967 + v878 + v791;
                if (v896 & v925)
                {
                  uint64_t v199 = v105;
                  if (v939 < 1)
                  {
                    uint64_t v201 = v808;
                    uint64_t v202 = (uint64_t)v902;
                  }
                  else
                  {
                    unsigned int v200 = 0;
                    uint64_t v201 = v808;
                    uint64_t v202 = (uint64_t)v902;
                    uint64_t v203 = -2 * (int)v967;
                    char v204 = (void (*)(void, void))v899;
                    do
                    {
                      unsigned int v836 = v200;
                      char v205 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v204;
                      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v204)(v202, v198, v199, v124, v201);
                      uint64_t v822 = v198;
                      uint64_t v206 = v198 + (int)v862;
                      uint64_t v907 = v202;
                      uint64_t v207 = (int)v967;
                      uint64_t v208 = v202 + (int)v967;
                      v205(v208, v206, v199, v124, v201);
                      uint64_t v209 = v206 + (int)v862;
                      uint64_t v210 = v208 + (int)v967;
                      v205(v210, v209, v199, v124, v201);
                      ((void (*)(uint64_t))v973)(v946);
                      uint64_t v211 = v209 + v923;
                      uint64_t v212 = v209 + v923 + (int)v967;
                      uint64_t v213 = v199;
                      if (v806)
                      {
                        if (v971 < 1)
                        {
                          uint64_t v947 = v946 + (int)v967;
                          uint64_t v219 = -2 * (int)v967;
                          uint64_t v218 = v210 + v203;
                        }
                        else
                        {
                          unsigned int v881 = 0;
                          uint64_t v829 = v822 + v782;
                          uint64_t v825 = v822 + v781;
                          uint64_t v214 = v822 + v780;
                          uint64_t v864 = v822 + v785;
                          uint64_t v215 = v822 + v784;
                          uint64_t v842 = v822 + v783;
                          uint64_t v216 = v822 + v779;
                          uint64_t v217 = v822 + v778;
                          do
                          {
                            uint64_t v795 = v211;
                            v946 += (int)v967;
                            ((void (*)(uint64_t, uint64_t, void, uint64_t))v854)(v907, v211 + (int)v967, v980, v808);
                            ((void (*)(void))v854)();
                            ((void (*)(uint64_t, uint64_t, void, uint64_t))v854)(v907 + v878, v216 + (int)v967, v980, v808);
                            ((void (*)(char *, uint64_t, void, uint64_t, void, void, void))v973)(v930, v907, v980, v967, v936, v971, v881);
                            ((void (*)(uint64_t, uint64_t, void, uint64_t))v854)(v907, v842 + (int)v967, v980, v808);
                            ((void (*)(uint64_t, uint64_t, void, uint64_t))v854)(v907 + (int)v967, v215 + (int)v967, v980, v808);
                            ((void (*)(uint64_t, uint64_t, void, uint64_t))v854)(v907 + v878, v864 + (int)v967, v980, v808);
                            ((void (*)(void))v973)();
                            ((void (*)(uint64_t, uint64_t, void, uint64_t))v854)(v907, v214 + (int)v967, v980, v808);
                            ((void (*)(uint64_t, uint64_t, void, uint64_t))v854)(v907 + (int)v967, v825 + (int)v967, v980, v808);
                            ((void (*)(uint64_t, uint64_t, void, uint64_t))v854)(v907 + v878, v829 + (int)v967, v980, v808);
                            ((void (*)(char *, uint64_t, void, uint64_t, void, void, void))v973)(&v930[v878], v907, v980, v967, v936, v971, v881);
                            ((void (*)(uint64_t, char *, void, uint64_t, void, void, void))v973)(v946, v930, v980, v967, v925, v939, v200);
                            uint64_t v211 = v795 + v800;
                            v829 += v800;
                            v825 += v800;
                            v214 += v800;
                            v864 += v800;
                            v215 += v800;
                            v842 += v800;
                            v216 += v800;
                            v217 += v800;
                            ++v881;
                          }
                          while (v971 != v881);
                          uint64_t v207 = (int)v967;
                          uint64_t v212 = v211 + (int)v967;
                          uint64_t v947 = v946 + (int)v967;
                          uint64_t v218 = v907;
                          char v205 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v899;
                          uint64_t v124 = v967;
                          uint64_t v219 = -2 * (int)v967;
                          uint64_t v213 = v980;
                        }
                        v212 += v207;
                      }
                      else
                      {
                        int v220 = v971;
                        if (v971 < 1)
                        {
                          uint64_t v947 = v946 + (int)v967;
                          uint64_t v219 = -2 * (int)v967;
                          uint64_t v218 = v210 + v203;
                        }
                        else
                        {
                          uint64_t v221 = v822 + v777;
                          uint64_t v222 = v822 + v776;
                          do
                          {
                            int v882 = v220;
                            uint64_t v223 = v211;
                            ((void (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))v899)(v907, v211 + (int)v967, v980, v861, v808);
                            ((void (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))v899)(v907 + (int)v967, v222 + (int)v967, v980, v861, v808);
                            ((void (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))v899)(v907 + v878, v221 + (int)v967, v980, v861, v808);
                            v946 += (int)v967;
                            ((void (*)(uint64_t, uint64_t, void, uint64_t, void, void, void))v973)(v946, v907, v980, v967, v925, v939, v836);
                            uint64_t v211 = v223 + v798;
                            v221 += v798;
                            v222 += v798;
                            --v220;
                          }
                          while (v882 != 1);
                          uint64_t v212 = v211 + (int)v967;
                          uint64_t v947 = v946 + (int)v967;
                          uint64_t v218 = v907;
                          uint64_t v213 = v980;
                          char v205 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v899;
                          uint64_t v124 = v967;
                          uint64_t v219 = -2 * (int)v967;
                        }
                      }
                      uint64_t v224 = v212 - (int)v967;
                      uint64_t v199 = v213;
                      uint64_t v201 = v808;
                      ((void (*)(uint64_t, uint64_t))v205)(v218, v224);
                      uint64_t v225 = v224 + (int)v862;
                      uint64_t v226 = v218 + (int)v967;
                      v205(v226, v225, v199, v124, v808);
                      uint64_t v908 = v225 + (int)v862;
                      v899(v226 + (int)v967);
                      uint64_t v202 = v226 + (int)v967 + v219;
                      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void))v973)(v947, v202, v199, v124, v925, v939, v836);
                      uint64_t v203 = v219;
                      uint64_t v946 = v947 + (int)v967;
                      uint64_t v198 = v908 + v923 + v878 + v805;
                      char v204 = (void (*)(void, void))v899;
                      unsigned int v200 = v836 + 1;
                    }
                    while (v836 + 1 != v939);
                  }
                  v902 = (_OWORD *)v202;
                  v198 += v789;
                  int v197 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v803;
                  uint64_t v228 = v201;
                  uint64_t v105 = v199;
                  uint64_t v113 = (int)v967;
                  uint64_t v246 = v807;
                  uint64_t v230 = v124;
                }
                else
                {
                  v930 = v146;
                  if (v939 < 1)
                  {
                    uint64_t v228 = v808;
                    uint64_t v230 = v124;
                  }
                  else
                  {
                    int v227 = 0;
                    uint64_t v228 = v808;
                    uint64_t v229 = v862;
                    uint64_t v230 = v124;
                    int v231 = v971;
                    do
                    {
                      int v865 = v227;
                      v197(v946, v198, v105, v230, v229, v228);
                      uint64_t v232 = v198;
                      uint64_t v233 = v198 + v113;
                      uint64_t v234 = v946 + v113;
                      if (v806)
                      {
                        if (v231 < 1)
                        {
                          uint64_t v238 = v808;
                        }
                        else
                        {
                          uint64_t v235 = 0;
                          uint64_t v883 = v232 + v855;
                          uint64_t v236 = v232 + (int)v861;
                          v237 = v902;
                          uint64_t v238 = v808;
                          do
                          {
                            v239 = v237;
                            ((void (*)(_OWORD *, uint64_t, void, uint64_t, uint64_t))v899)(v237, v232 + (int)v967, v980, v862, v238);
                            uint64_t v240 = (uint64_t)v237 + (int)v967;
                            ((void (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))v899)(v240, v236 + (int)v967, v980, v862, v808);
                            ((void (*)(char *, uint64_t, void, uint64_t, uint64_t))v899)((char *)v239 + v878, v883 + (int)v967, v980, v862, v808);
                            v237 = (_OWORD *)(v240 - (int)v967);
                            v946 += (int)v967;
                            ((void (*)(uint64_t, _OWORD *, void, uint64_t, void, void, uint64_t))v973)(v946, v239, v980, v967, v936, v971, v235);
                            uint64_t v238 = v808;
                            uint64_t v235 = (v235 + 1);
                            v232 += v804;
                            v883 += v804;
                            v236 += v804;
                          }
                          while (v971 != v235);
                          v902 = v237;
                          uint64_t v113 = (int)v967;
                          uint64_t v233 = v232 + (int)v967;
                          uint64_t v234 = v946 + (int)v967;
                          uint64_t v105 = v980;
                          int v231 = v971;
                        }
                        v233 += v113;
                        int v242 = v865;
                      }
                      else
                      {
                        int v241 = v231;
                        if (v231 >= 1)
                        {
                          do
                          {
                            ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v803)(v234, v233, v105, v861, v862, v808);
                            v233 += v928;
                            v234 += v113;
                            --v241;
                          }
                          while (v241);
                        }
                        int v231 = v971;
                        int v242 = v865;
                        uint64_t v238 = v808;
                      }
                      uint64_t v243 = v233 - (int)v967;
                      uint64_t v229 = v862;
                      uint64_t v244 = v238;
                      int v197 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v803;
                      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v803)(v234, v243, v105, v967, v862, v238);
                      uint64_t v228 = v244;
                      uint64_t v230 = v967;
                      uint64_t v946 = v234 + v113;
                      uint64_t v198 = v243 + v878 + v805;
                      int v227 = v242 + 1;
                    }
                    while (v227 != v939);
                  }
                  uint64_t v246 = v807;
                }
                uint64_t v247 = v198 - v789;
                v197(v946, v198 - v789, v105, v230, v246, v228);
                uint64_t v248 = v198 - v789 + v113;
                uint64_t v249 = v946 + v113;
                if (v806)
                {
                  if (v971 < 1)
                  {
                    uint64_t v143 = v862;
                  }
                  else
                  {
                    uint64_t v250 = 0;
                    uint64_t v884 = v198 + v774;
                    uint64_t v251 = v198 + v773;
                    v252 = v902;
                    v253 = (void (*)(_OWORD *, uint64_t, void, uint64_t, uint64_t))v899;
                    do
                    {
                      v254 = v252;
                      v253(v252, v247 + (int)v967, v980, v807, v808);
                      uint64_t v255 = (uint64_t)v252 + (int)v967;
                      ((void (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))v899)(v255, v251 + (int)v967, v980, v807, v808);
                      ((void (*)(char *, uint64_t, void, uint64_t, uint64_t))v899)((char *)v254 + v878, v884 + (int)v967, v980, v807, v808);
                      v252 = (_OWORD *)(v255 - (int)v967);
                      v946 += (int)v967;
                      ((void (*)(uint64_t, _OWORD *, void, uint64_t, void, void, uint64_t))v973)(v946, v254, v980, v967, v936, v971, v250);
                      uint64_t v250 = (v250 + 1);
                      v247 += v804;
                      v884 += v804;
                      v251 += v804;
                      v253 = (void (*)(_OWORD *, uint64_t, void, uint64_t, uint64_t))v899;
                    }
                    while (v971 != v250);
                    v902 = v252;
                    uint64_t v113 = (int)v967;
                    uint64_t v248 = v247 + (int)v967;
                    uint64_t v249 = v946 + (int)v967;
                    uint64_t v143 = v862;
                  }
                  long long v142 = v930;
                  v248 += v113;
                }
                else
                {
                  int v256 = v971;
                  if (v971 >= 1)
                  {
                    do
                    {
                      ((void (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))v803)(v249, v248, v980, v861, v246, v808);
                      v248 += v928;
                      v249 += v113;
                      --v256;
                    }
                    while (v256);
                  }
                  uint64_t v143 = v862;
                  long long v142 = v930;
                }
                uint64_t v257 = v248 - (int)v967;
                uint64_t v105 = v980;
                uint64_t v141 = v967;
                double result = ((uint64_t (*)(uint64_t, uint64_t, void))v803)(v249, v257, v980);
                uint64_t v107 = v249 + v113;
                uint64_t v108 = v257 + v878 + v790 + v752;
                __int16 v57 = v902;
              }
              else
              {
                uint64_t v141 = v106;
                long long v142 = v930;
                uint64_t v143 = v862;
              }
              v930 = v142;
              if (v874 & v894)
              {
                uint64_t v103 = v803;
                uint64_t v258 = -2 * (int)v967;
                v259 = (void (*)(void))v899;
                uint64_t v106 = v141;
                if ((int)v892 >= 1)
                {
                  unsigned int v260 = 0;
                  while (1)
                  {
                    unsigned int v885 = v260;
                    if (v821)
                    {
                      uint64_t v261 = v106;
                      uint64_t v262 = v108;
                      ((void (*)(long long *))v259)(v57);
                      uint64_t v837 = v262;
                      v259();
                      uint64_t v263 = v262 + (int)v859 + (int)v859;
                      v264 = (char *)v57 + v113 + v113;
                      ((void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))v259)(v264, v263, v105, v261, v807);
                      uint64_t v265 = v263 + v876;
                      v266 = &v264[v258];
                      uint64_t v267 = v261;
                      ((void (*)(uint64_t, char *, uint64_t, uint64_t, void, void, void))v973)(v107, &v264[v258], v105, v261, v894, v892, v885);
                      uint64_t v268 = v265;
                      uint64_t v269 = v265 + v113;
                      uint64_t v270 = v113;
                      if (v806)
                      {
                        if (v971 < 1)
                        {
                          uint64_t v948 = v107 + v113;
                        }
                        else
                        {
                          uint64_t v271 = 0;
                          uint64_t v830 = v837 + v766;
                          uint64_t v272 = v837 + v765;
                          uint64_t v826 = v837 + v764;
                          uint64_t v273 = v837 + v772;
                          uint64_t v909 = v837 + v771;
                          uint64_t v866 = v837 + v770;
                          uint64_t v843 = v837 + v760;
                          uint64_t v274 = v837 + v758;
                          uint64_t v275 = v270;
                          v276 = (char *)v57;
                          v277 = v930;
                          uint64_t v278 = v107;
                          do
                          {
                            uint64_t v796 = v268;
                            ((void (*)(char *, uint64_t, void, uint64_t))v854)(v276, v268 + v275, v980, v807);
                            ((void (*)(void))v854)();
                            ((void (*)(char *, uint64_t, void, uint64_t))v854)(&v276[v878], v843 + v275, v980, v807);
                            v793 = v277;
                            ((void (*)(_OWORD *, char *, void, uint64_t, void, void, uint64_t))v973)(v277, v276, v980, v967, v936, v971, v271);
                            ((void (*)(char *, uint64_t, void, uint64_t))v854)(v276, v866 + v275, v980, v807);
                            ((void (*)(char *, uint64_t, void, uint64_t))v854)(&v276[v275], v909 + v275, v980, v807);
                            ((void (*)(char *, uint64_t, void, uint64_t))v854)(&v276[v878], v273 + v275, v980, v807);
                            ((void (*)(void))v973)();
                            ((void (*)(char *, uint64_t, void, uint64_t))v854)(v276, v826 + v275, v980, v807);
                            ((void (*)(char *, uint64_t, void, uint64_t))v854)(&v276[(int)v967], v272 + v275, v980, v807);
                            v278 += v275;
                            ((void (*)(char *, uint64_t, void, uint64_t))v854)(&v276[v878], v830 + v275, v980, v807);
                            ((void (*)(char *, char *, void, uint64_t, void, void, void))v973)((char *)v277 + v878, v276, v980, v967, v936, v971, v271);
                            v277 = (_OWORD *)((char *)v277 + v275 + v275 - 2 * (int)v967);
                            ((void (*)(uint64_t, _OWORD *, void, uint64_t, void, void, void))v973)(v278, v793, v980, v967, v894, v892, v885);
                            uint64_t v271 = (v271 + 1);
                            uint64_t v268 = v796 + v799;
                            v830 += v799;
                            v272 += v799;
                            v826 += v799;
                            v273 += v799;
                            v909 += v799;
                            v866 += v799;
                            v843 += v799;
                            v274 += v799;
                          }
                          while (v971 != v271);
                          uint64_t v269 = v268 + v275;
                          uint64_t v948 = v278 + v275;
                          v266 = v276;
                          uint64_t v113 = v275;
                          uint64_t v258 = -2 * (int)v967;
                          v930 = (char *)v277;
                          uint64_t v267 = v967;
                        }
                        uint64_t v286 = v807;
                        v269 += v113;
                        v285 = v899;
                      }
                      else if (v971 < 1)
                      {
                        uint64_t v948 = v107 + v113;
                        v285 = v899;
                        uint64_t v286 = v807;
                      }
                      else
                      {
                        uint64_t v281 = v837 + v756;
                        v910 = (char *)v57;
                        uint64_t v282 = v837 + v755;
                        int v283 = v971;
                        do
                        {
                          int v949 = v283;
                          uint64_t v284 = v268;
                          v107 += (int)v967;
                          ((void (*)(char *, uint64_t, void, uint64_t, uint64_t))v899)(v910, v268 + (int)v967, v980, v861, v807);
                          ((void (*)(char *, uint64_t, void, uint64_t, uint64_t))v899)(&v910[(int)v967], v282 + (int)v967, v980, v861, v807);
                          ((void (*)(char *, uint64_t, void, uint64_t, uint64_t))v899)(&v910[v878], v281 + (int)v967, v980, v861, v807);
                          ((void (*)(uint64_t, char *, void, uint64_t, void, void, void))v973)(v107, v910, v980, v967, v894, v892, v885);
                          uint64_t v268 = v284 + v797;
                          v281 += v797;
                          v282 += v797;
                          --v283;
                        }
                        while (v949 != 1);
                        uint64_t v113 = (int)v967;
                        uint64_t v269 = v268 + (int)v967;
                        uint64_t v948 = v107 + (int)v967;
                        v266 = v910;
                        v285 = v899;
                        uint64_t v286 = v807;
                        uint64_t v267 = v967;
                        uint64_t v258 = -2 * (int)v967;
                      }
                      uint64_t v287 = v269 - (int)v967;
                      uint64_t v288 = v267;
                      ((void (*)(char *, uint64_t, void, uint64_t, uint64_t))v285)(v266, v287, v980, v267, v286);
                      uint64_t v289 = v287 + (int)v859;
                      v290 = &v266[v113];
                      ((void (*)(char *, uint64_t, void, uint64_t, uint64_t))v285)(v290, v289, v980, v267, v286);
                      uint64_t v291 = v289 + (int)v859;
                      v292 = &v290[v113];
                      ((void (*)(char *, uint64_t, void, uint64_t, uint64_t))v285)(v292, v291, v980, v267, v286);
                      v280 = (long long *)&v292[v258];
                      uint64_t v279 = v288;
                      double result = ((uint64_t (*)(uint64_t))v973)(v948);
                      uint64_t v107 = v948 + v113;
                      uint64_t v108 = v291 + v876 + v878 + v791;
                      uint64_t v103 = v803;
                      v259 = (void (*)(void))v285;
                    }
                    else
                    {
                      uint64_t v279 = v106;
                      v280 = v57;
                    }
                    if (v896 & v925)
                    {
                      uint64_t v293 = v107;
                      uint64_t v294 = v939;
                      v295 = v280;
                      if (v939 < 1)
                      {
                        v324 = v280;
                        uint64_t v105 = v980;
                      }
                      else
                      {
                        unsigned int v296 = 0;
                        v297 = v930;
                        uint64_t v105 = v980;
                        do
                        {
                          unsigned int v911 = v296;
                          uint64_t v950 = v293;
                          if (v821)
                          {
                            uint64_t v298 = v108;
                            v854(v295);
                            v299 = v297;
                            uint64_t v300 = v298 + (int)v862;
                            uint64_t v301 = (int)v967;
                            ((void (*)(char *, uint64_t, uint64_t, uint64_t))v854)((char *)v295 + (int)v967, v300, v105, v967);
                            uint64_t v302 = v300 + (int)v862;
                            ((void (*)(char *, uint64_t, uint64_t, uint64_t))v854)((char *)v295 + v301 + v301, v302, v105, v967);
                            uint64_t v303 = (uint64_t)v295 + v301 + v301 + -2 * (int)v967;
                            ((void (*)(_OWORD *, uint64_t, uint64_t, uint64_t, void, uint64_t, void))v973)(v299, v303, v105, v967, v925, v294, v911);
                            uint64_t v304 = v302 + v923 + (int)v859;
                            ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v854)(v303, v304, v105, v967);
                            uint64_t v305 = v304 + (int)v862;
                            uint64_t v306 = v303 + (int)v967;
                            ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v854)(v306, v305, v105, v967);
                            uint64_t v307 = v305 + (int)v862;
                            uint64_t v308 = v306 + (int)v967;
                            ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v854)(v308, v307, v105, v967);
                            uint64_t v309 = v308 - 2 * (int)v967;
                            ((void (*)(char *, uint64_t, uint64_t, uint64_t, void, uint64_t, void))v973)((char *)v299 + (int)v967, v309, v105, v967, v925, v294, v911);
                            uint64_t v310 = v307 + v923 + (int)v859;
                            ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v854)(v309, v310, v105, v967);
                            uint64_t v311 = v310 + (int)v862;
                            uint64_t v312 = v309 + (int)v967;
                            ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v854)(v312, v311, v105, v967);
                            uint64_t v313 = v311 + (int)v862;
                            uint64_t v314 = v312 + (int)v967;
                            ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v854)(v314, v313, v105, v967);
                            uint64_t v315 = (uint64_t)v299 + (int)v967 + (int)v967;
                            v316 = (long long *)(v314 - 2 * (int)v967);
                            ((void (*)(uint64_t))v973)(v315);
                            v317 = (char *)(v315 - 2 * (int)v967);
                            double result = ((uint64_t (*)(uint64_t))v973)(v950);
                            uint64_t v108 = v313 + v923 + v876 + (int)v967;
                            v950 += (int)v967;
                          }
                          else
                          {
                            v317 = v297;
                            v316 = v295;
                          }
                          if (v806)
                          {
                            uint64_t v318 = v971;
                            uint64_t v319 = v980;
                            v320 = v316;
                            if (v971 < 1)
                            {
                              v324 = v316;
                              v930 = v317;
                              v322 = (void (*)(void))v973;
                            }
                            else
                            {
                              uint64_t v321 = 0;
                              v322 = (void (*)(void))v973;
                              do
                              {
                                uint64_t v323 = v108;
                                ((void (*)(long long *))v322)(v320);
                                v322();
                                ((void (*)(char *, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))v322)((char *)v320 + v878, v323 + v857, v319, v861, v936, v318, v321);
                                ((void (*)(char *, long long *, void, uint64_t, void, void, void))v322)(v317, v320, v980, v967, v925, v939, v911);
                                ((void (*)(long long *, uint64_t, void, uint64_t, void, void, uint64_t))v322)(v320, v323 + v848, v980, v861, v936, v971, v321);
                                ((void (*)(char *, uint64_t, void, uint64_t, void, void, uint64_t))v973)((char *)v320 + (int)v967, v323 + v849, v980, v861, v936, v971, v321);
                                ((void (*)(char *, uint64_t, void, uint64_t, void, void, uint64_t))v973)((char *)v320 + v878, v323 + v850, v980, v861, v936, v971, v321);
                                ((void (*)(void))v973)();
                                ((void (*)(long long *, uint64_t, void, uint64_t, void, void, uint64_t))v973)(v320, v323 + v851, v980, v861, v936, v971, v321);
                                ((void (*)(char *, uint64_t, void, uint64_t, void, void, uint64_t))v973)((char *)v320 + (int)v967, v323 + v852, v980, v861, v936, v971, v321);
                                ((void (*)(char *, uint64_t, void, uint64_t, void, void, uint64_t))v973)((char *)v320 + v878, v323 + v853, v980, v861, v936, v971, v321);
                                v322 = (void (*)(void))v973;
                                ((void (*)(char *, long long *, void, uint64_t, void, void, void))v973)(&v317[v878], v320, v980, v967, v925, v939, v911);
                                double result = ((uint64_t (*)(uint64_t, char *, void, uint64_t, void, void, void))v973)(v950, v317, v980, v967, v894, v892, v885);
                                v324 = v320;
                                uint64_t v108 = v323
                                     + (int)v862
                                     + (int)v862
                                     + v923
                                     + (int)v859
                                     + (uint64_t)(int)v862
                                     + (int)v862
                                     + v923
                                     + (int)v859
                                     + (int)v862
                                     + (int)v862
                                     + v923
                                     + v876
                                     + v928;
                                uint64_t v318 = v971;
                                uint64_t v319 = v980;
                                v950 += (int)v967;
                                uint64_t v321 = (v321 + 1);
                                v930 = v317;
                              }
                              while (v971 != v321);
                            }
                            v108 += (int)v967;
                            uint64_t v326 = v319;
                            uint64_t v328 = v950;
                          }
                          else
                          {
                            int v325 = v971;
                            v324 = v316;
                            v930 = v317;
                            uint64_t v326 = v980;
                            uint64_t v327 = v925;
                            uint64_t v328 = v950;
                            v322 = (void (*)(void))v973;
                            if (v971 >= 1)
                            {
                              do
                              {
                                int v844 = v325;
                                uint64_t v951 = v328;
                                uint64_t v329 = v108;
                                v854(v316);
                                ((void (*)(void))v854)();
                                ((void (*)(char *, uint64_t, uint64_t, uint64_t))v854)((char *)v316 + v878, v329 + v857, v326, v861);
                                ((void (*)(char *, long long *, void, uint64_t, uint64_t, void, void))v973)(v317, v316, v980, v967, v327, v939, v911);
                                ((void (*)(long long *, uint64_t, void, uint64_t))v854)(v316, v329 + v848, v980, v861);
                                ((void (*)(char *, uint64_t, void, uint64_t))v854)((char *)v316 + (int)v967, v329 + v849, v980, v861);
                                ((void (*)(char *, uint64_t, void, uint64_t))v854)((char *)v316 + v878, v329 + v850, v980, v861);
                                ((void (*)(void))v973)();
                                ((void (*)(long long *, uint64_t, void, uint64_t))v854)(v316, v329 + v851, v980, v861);
                                ((void (*)(char *, uint64_t, void, uint64_t))v854)((char *)v316 + (int)v967, v329 + v852, v980, v861);
                                uint64_t v327 = v925;
                                ((void (*)(char *, uint64_t, void, uint64_t))v854)((char *)v316 + v878, v329 + v853, v980, v861);
                                v322 = (void (*)(void))v973;
                                ((void (*)(char *, long long *, void, uint64_t, void, void, void))v973)(&v317[v878], v316, v980, v967, v925, v939, v911);
                                uint64_t v326 = v980;
                                double result = ((uint64_t (*)(uint64_t, char *, void, uint64_t, void, void, void))v973)(v951, v317, v980, v967, v894, v892, v885);
                                v324 = v316;
                                uint64_t v108 = v329
                                     + (int)v862
                                     + (int)v862
                                     + v923
                                     + (int)v859
                                     + (uint64_t)(int)v862
                                     + (int)v862
                                     + v923
                                     + (int)v859
                                     + (int)v862
                                     + (int)v862
                                     + v923
                                     + v876
                                     + v928;
                                uint64_t v328 = v951 + (int)v967;
                                v930 = v317;
                                int v325 = v844 - 1;
                              }
                              while (v844 != 1);
                            }
                          }
                          v973 = v322;
                          uint64_t v952 = v328;
                          uint64_t v330 = v326;
                          if (v821)
                          {
                            uint64_t v331 = v108 - (int)v967;
                            v332 = v324;
                            ((void (*)(long long *, uint64_t, uint64_t, uint64_t))v854)(v324, v331, v330, v967);
                            uint64_t v333 = v331 + (int)v862;
                            uint64_t v334 = (uint64_t)v332 + (int)v967;
                            ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v854)(v334, v333, v330, v967);
                            uint64_t v335 = v333 + (int)v862;
                            uint64_t v336 = v334 + (int)v967;
                            ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v854)(v336, v335, v330, v967);
                            uint64_t v337 = v336 - 2 * (int)v967;
                            unsigned int v338 = v911;
                            ((void (*)(char *, uint64_t, uint64_t, uint64_t, void, void, void))v322)(v930, v337, v330, v967, v925, v939, v911);
                            uint64_t v339 = v335 + v923 + (int)v859;
                            ((void (*)(uint64_t, uint64_t, void, uint64_t))v854)(v337, v339, v980, v967);
                            uint64_t v340 = v339 + (int)v862;
                            uint64_t v341 = v337 + (int)v967;
                            ((void (*)(uint64_t, uint64_t, void, uint64_t))v854)(v341, v340, v980, v967);
                            uint64_t v342 = v340 + (int)v862;
                            uint64_t v343 = v341 + (int)v967;
                            ((void (*)(uint64_t, uint64_t, void, uint64_t))v854)(v343, v342, v980, v967);
                            uint64_t v344 = v343 - 2 * (int)v967;
                            ((void (*)(char *, uint64_t, void, uint64_t, void, void, void))v322)(&v930[(int)v967], v344, v980, v967, v925, v939, v911);
                            uint64_t v345 = v342 + v923 + (int)v859;
                            ((void (*)(uint64_t, uint64_t, void, uint64_t))v854)(v344, v345, v980, v967);
                            uint64_t v346 = v345 + (int)v862;
                            uint64_t v347 = v344 + (int)v967;
                            ((void (*)(uint64_t, uint64_t, void, uint64_t))v854)(v347, v346, v980, v967);
                            uint64_t v867 = v346 + (int)v862;
                            uint64_t v348 = v347 + (int)v967;
                            v854(v348);
                            uint64_t v258 = -2 * (int)v967;
                            v349 = (long long *)(v348 - 2 * (int)v967);
                            v350 = &v930[(int)v967 + (int)v967];
                            ((void (*)(char *, long long *, void, uint64_t, void, void, void))v322)(v350, v349, v980, v967, v925, v939, v911);
                            v930 = &v350[-2 * (int)v967];
                            double result = ((uint64_t (*)(uint64_t))v322)(v952);
                            v324 = v349;
                            uint64_t v294 = v939;
                            uint64_t v105 = v980;
                            uint64_t v108 = v867 + v923 + v876 + v878;
                            uint64_t v293 = v952 + (int)v967;
                          }
                          else
                          {
                            uint64_t v258 = -2 * (int)v967;
                            uint64_t v294 = v939;
                            uint64_t v105 = v326;
                            uint64_t v293 = v328;
                            unsigned int v338 = v911;
                          }
                          v108 += v805;
                          unsigned int v296 = v338 + 1;
                          v297 = v930;
                          v295 = v324;
                        }
                        while (v296 != v294);
                      }
                      v108 += v789;
                      __int16 v57 = v324;
                      uint64_t v103 = v803;
                      v259 = (void (*)(void))v899;
                      uint64_t v113 = (int)v967;
                      uint64_t v106 = v967;
                      uint64_t v107 = v293;
                    }
                    else
                    {
                      __int16 v57 = v280;
                      uint64_t v106 = v279;
                      if (v939 < 1)
                      {
                        uint64_t v105 = v980;
                      }
                      else
                      {
                        int v351 = 0;
                        uint64_t v352 = v862;
                        uint64_t v105 = v980;
                        do
                        {
                          int v801 = v351;
                          if (v821)
                          {
                            uint64_t v353 = v113;
                            uint64_t v354 = v108;
                            uint64_t v355 = v105;
                            uint64_t v356 = v106;
                            ((void (*)(long long *))v259)(v57);
                            v357 = (char *)v57 + v353;
                            ((void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))v259)((char *)v57 + v353, v354 + (int)v859, v355, v356, v352);
                            uint64_t v358 = v354 + (int)v859 + (int)v859;
                            v359 = &v357[v353];
                            ((void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))v259)(v359, v358, v355, v356, v352);
                            v360 = &v359[-2 * (int)v967];
                            double result = ((uint64_t (*)(uint64_t))v973)(v107);
                            uint64_t v108 = v358 + v876 + v353;
                            v107 += v353;
                          }
                          else
                          {
                            v360 = (char *)v57;
                          }
                          if (v806)
                          {
                            uint64_t v361 = v107;
                            v362 = v360;
                            if (v971 < 1)
                            {
                              v368 = v360;
                              v370 = v930;
                              uint64_t v364 = v980;
                              uint64_t v369 = v894;
                              uint64_t v366 = v361;
                              v371 = v973;
                            }
                            else
                            {
                              uint64_t v363 = 0;
                              uint64_t v364 = v980;
                              v365 = v930;
                              uint64_t v366 = v107;
                              do
                              {
                                v931 = v365;
                                uint64_t v367 = v108;
                                v854(v362);
                                ((void (*)(char *, uint64_t, void, uint64_t))v854)(&v362[(int)v967], v367 + (int)v861, v980, v862);
                                ((void (*)(char *, uint64_t, void, uint64_t))v854)(&v362[v878], v367 + v855, v980, v862);
                                ((void (*)(char *, char *, void, uint64_t, void, void, uint64_t))v973)(v931, v362, v980, v967, v936, v971, v363);
                                ((void (*)(char *, uint64_t, void, uint64_t))v854)(v362, v367 + v809, v980, v862);
                                ((void (*)(char *, uint64_t, void, uint64_t))v854)(&v362[(int)v967], v367 + v810, v980, v862);
                                ((void (*)(char *, uint64_t, void, uint64_t))v854)(&v362[v878], v367 + v811, v980, v862);
                                ((void (*)(void))v973)();
                                ((void (*)(char *, uint64_t, void, uint64_t))v854)(v362, v367 + v812, v980, v862);
                                ((void (*)(char *, uint64_t, void, uint64_t))v854)(&v362[(int)v967], v367 + v813, v980, v862);
                                uint64_t v845 = v367
                                     + (int)v861
                                     + (int)v861
                                     + v900
                                     + (int)v859
                                     + (uint64_t)(int)v861
                                     + (int)v861
                                     + v900
                                     + (int)v859
                                     + (int)v861
                                     + (int)v861;
                                ((void (*)(char *, uint64_t, void, uint64_t))v854)(&v362[v878], v367 + v814, v980, v862);
                                v368 = v362;
                                uint64_t v369 = v894;
                                ((void (*)(char *, char *, void, uint64_t, void, void, void))v973)(&v931[v878], v362, v980, v967, v936, v971, v363);
                                v370 = v931;
                                v371 = v973;
                                double result = ((uint64_t (*)(uint64_t, char *, void, uint64_t, void, void, void))v973)(v366, v931, v980, v967, v894, v892, v885);
                                uint64_t v108 = v845 + v900 + v876 + v928;
                                v366 += (int)v967;
                                uint64_t v363 = (v363 + 1);
                                v365 = v931;
                              }
                              while (v971 != v363);
                            }
                            v973 = v371;
                            uint64_t v953 = v366;
                            uint64_t v378 = v967;
                            uint64_t v379 = v369;
                            v108 += (int)v967;
                            __int16 v57 = (long long *)v368;
                            v930 = v370;
                            v376 = (void (*)(long long *, uint64_t, uint64_t, uint64_t, uint64_t))v899;
                            uint64_t v113 = (int)v967;
                            uint64_t v377 = -2 * (int)v967;
                          }
                          else
                          {
                            int v372 = v971;
                            __int16 v57 = (long long *)v360;
                            if (v971 >= 1)
                            {
                              do
                              {
                                v373 = v57;
                                v374 = v57;
                                uint64_t v375 = v108;
                                v899((uint64_t)v374);
                                ((void (*)(void))v899)();
                                ((void (*)(char *, uint64_t, void, uint64_t, uint64_t))v899)((char *)v373 + v878, v375 + 2 * (int)v859, v980, v861, v862);
                                double result = ((uint64_t (*)(uint64_t, long long *, void, uint64_t, void, void, void))v973)(v107, v373, v980, v967, v894, v892, v885);
                                uint64_t v108 = v375 + (int)v859 + (int)v859 + v876 + v928;
                                __int16 v57 = v373;
                                v107 += (int)v967;
                                --v372;
                              }
                              while (v372);
                            }
                            v376 = (void (*)(long long *, uint64_t, uint64_t, uint64_t, uint64_t))v899;
                            uint64_t v377 = -2 * (int)v967;
                            uint64_t v953 = v107;
                            uint64_t v364 = v980;
                            uint64_t v113 = (int)v967;
                            uint64_t v378 = v967;
                            uint64_t v379 = v894;
                          }
                          if (v821)
                          {
                            v380 = v57;
                            uint64_t v381 = v108 - (int)v967;
                            v376(v380, v381, v364, v378, v862);
                            uint64_t v382 = v381 + (int)v859;
                            v383 = (char *)v380 + v113;
                            v376((long long *)v383, v382, v364, v378, v862);
                            uint64_t v384 = v382 + (int)v859;
                            v385 = &v383[v113];
                            v376((long long *)v385, v384, v364, v378, v862);
                            v386 = &v385[v377];
                            v387 = &v385[v377];
                            uint64_t v388 = v364;
                            uint64_t v389 = v378;
                            uint64_t v390 = v378;
                            uint64_t v258 = v377;
                            uint64_t v391 = v379;
                            uint64_t v105 = v364;
                            v259 = (void (*)(void))v376;
                            double result = ((uint64_t (*)(uint64_t, char *, uint64_t, uint64_t, uint64_t, void, void))v973)(v953, v387, v388, v390, v391, v892, v885);
                            uint64_t v108 = v384 + v876 + v878;
                            __int16 v57 = (long long *)v386;
                            uint64_t v107 = v953 + v113;
                          }
                          else
                          {
                            uint64_t v389 = v378;
                            uint64_t v105 = v364;
                            uint64_t v107 = v953;
                            uint64_t v258 = v377;
                            v259 = (void (*)(void))v376;
                          }
                          v108 += v805;
                          int v351 = v801 + 1;
                          uint64_t v106 = v389;
                          uint64_t v352 = v862;
                          uint64_t v103 = v803;
                        }
                        while (v801 + 1 != v939);
                      }
                    }
                    if (v821) {
                      break;
                    }
                    unsigned int v410 = v892;
                    unsigned int v411 = v885;
LABEL_327:
                    v108 += v792;
                    unsigned int v260 = v411 + 1;
                    if (v260 == v410) {
                      goto LABEL_399;
                    }
                  }
                  uint64_t v838 = v108;
                  uint64_t v392 = v108 - v789;
                  uint64_t v393 = v106;
                  ((void (*)(long long *, uint64_t, uint64_t))v259)(v57, v108 - v789, v105);
                  v259();
                  uint64_t v394 = v392 + (int)v859 + (int)v859;
                  v395 = (char *)v57 + v113 + v113;
                  ((void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))v259)(v395, v394, v105, v393, v807);
                  uint64_t v396 = v394 + v876;
                  v397 = &v395[v258];
                  ((void (*)(uint64_t, char *, uint64_t, uint64_t, void, void, void))v973)(v107, v397, v105, v393, v894, v892, v885);
                  uint64_t v398 = v394 + v876 + v113;
                  if (v806)
                  {
                    if (v971 < 1)
                    {
                      uint64_t v954 = v107 + v113;
                      uint64_t v409 = v113;
                    }
                    else
                    {
                      uint64_t v399 = v105;
                      unsigned int v823 = 0;
                      uint64_t v400 = v838 + v775;
                      uint64_t v831 = v838 + v763;
                      uint64_t v401 = v838 + v762;
                      uint64_t v827 = v838 + v761;
                      uint64_t v912 = v838 + v769;
                      uint64_t v868 = v838 + v768;
                      uint64_t v402 = v838 + v767;
                      uint64_t v846 = v838 + v759;
                      uint64_t v403 = v838 + v757;
                      uint64_t v404 = v113;
                      v397 = (char *)v57;
                      v405 = v930;
                      uint64_t v406 = v107;
                      uint64_t v407 = v399;
                      do
                      {
                        uint64_t v839 = v400;
                        v408 = v405;
                        ((void (*)(long long *, uint64_t, uint64_t, uint64_t))v854)(v57, v396 + v404, v407, v807);
                        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v854)((char *)v57 + v404, v403 + v404, v407, v807);
                        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v854)((char *)v57 + v878, v846 + v404, v407, v807);
                        ((void (*)(_OWORD *, long long *, uint64_t, uint64_t, void, void, void))v973)(v408, v57, v407, v967, v936, v971, v823);
                        ((void (*)(long long *, uint64_t, uint64_t, uint64_t))v854)(v57, v402 + v404, v407, v807);
                        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v854)((char *)v57 + v404, v868 + v404, v407, v807);
                        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v854)((char *)v57 + v878, v912 + v404, v407, v807);
                        ((void (*)(void))v973)();
                        ((void (*)(long long *, uint64_t, uint64_t, uint64_t))v854)(v57, v827 + v404, v407, v807);
                        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v854)((char *)v57 + (int)v967, v401 + v404, v407, v807);
                        v406 += v404;
                        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v854)((char *)v57 + v878, v831 + v404, v407, v807);
                        ((void (*)(char *, long long *, uint64_t, uint64_t, void, void, void))v973)((char *)v408 + v878, v57, v407, v967, v936, v971, v823);
                        v930 = (char *)v408 + v404 + v404 - 2 * (int)v967;
                        ((void (*)(uint64_t, _OWORD *, uint64_t, uint64_t, void, void, void))v973)(v406, v408, v407, v967, v894, v892, v885);
                        uint64_t v400 = v839 + v799;
                        v831 += v799;
                        v401 += v799;
                        v827 += v799;
                        v912 += v799;
                        v868 += v799;
                        v402 += v799;
                        v846 += v799;
                        v403 += v799;
                        v396 += v799;
                        v405 = v930;
                        ++v823;
                      }
                      while (v971 != v823);
                      uint64_t v398 = v400 + v404;
                      uint64_t v954 = v406 + v404;
                      uint64_t v409 = v404;
                      uint64_t v105 = v407;
                    }
                    uint64_t v416 = v807;
                    v398 += v409;
                    v259 = (void (*)(void))v899;
                  }
                  else
                  {
                    int v412 = v971;
                    if (v971 < 1)
                    {
                      uint64_t v954 = v107 + v113;
                      v259 = (void (*)(void))v899;
                      uint64_t v409 = v113;
                      uint64_t v417 = v894;
                      uint64_t v416 = v807;
                      goto LABEL_326;
                    }
                    uint64_t v413 = v838 + v775;
                    uint64_t v414 = v838 + v754;
                    v913 = (char *)v57;
                    uint64_t v415 = v838 + v753;
                    do
                    {
                      int v869 = v412;
                      uint64_t v955 = v413;
                      v107 += (int)v967;
                      ((void (*)(char *, uint64_t, void, uint64_t, uint64_t))v899)(v913, v396 + (int)v967, v980, v861, v807);
                      ((void (*)(char *, uint64_t, void, uint64_t, uint64_t))v899)(&v913[(int)v967], v415 + (int)v967, v980, v861, v807);
                      ((void (*)(char *, uint64_t, void, uint64_t, uint64_t))v899)(&v913[v878], v414 + (int)v967, v980, v861, v807);
                      ((void (*)(uint64_t, char *, void, uint64_t, void, void, void))v973)(v107, v913, v980, v967, v894, v892, v885);
                      uint64_t v413 = v955 + v797;
                      v414 += v797;
                      v415 += v797;
                      v396 += v797;
                      --v412;
                    }
                    while (v869 != 1);
                    uint64_t v409 = (int)v967;
                    uint64_t v398 = v413 + (int)v967;
                    uint64_t v954 = v107 + (int)v967;
                    v397 = v913;
                    uint64_t v105 = v980;
                    v259 = (void (*)(void))v899;
                    uint64_t v416 = v807;
                  }
                  uint64_t v417 = v894;
LABEL_326:
                  uint64_t v418 = v398 - (int)v967;
                  ((void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))v259)(v397, v418, v105, v967, v416);
                  uint64_t v419 = v418 + (int)v859;
                  ((void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))v259)(&v397[v409], v419, v105, v967, v416);
                  uint64_t v420 = v419 + (int)v859;
                  ((void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))v259)(&v397[v409 + v409], v420, v105, v967, v416);
                  uint64_t v421 = (uint64_t)&v397[v409 + v409 + -2 * (int)v967];
                  uint64_t v422 = v417;
                  uint64_t v258 = -2 * (int)v967;
                  unsigned int v410 = v892;
                  double result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void))v973)(v954, v421, v105, v967, v422, v892, v885);
                  uint64_t v106 = v967;
                  uint64_t v107 = v954 + v409;
                  unsigned int v411 = v885;
                  uint64_t v108 = v420 + v876 + v878 + v790;
                  __int16 v57 = (long long *)v421;
                  uint64_t v103 = v803;
                  uint64_t v113 = v409;
                  goto LABEL_327;
                }
LABEL_399:
                v108 += v808;
              }
              else
              {
                uint64_t v103 = v803;
                uint64_t v423 = -2 * (int)v967;
                v424 = (void (*)(long long *))v899;
                uint64_t v106 = v141;
                if ((int)v892 >= 1)
                {
                  for (int j = 0; j != v892; ++j)
                  {
                    if (v821)
                    {
                      uint64_t v425 = v108;
                      uint64_t v426 = v106;
                      v103(v107);
                      uint64_t v427 = v425 + v113;
                      uint64_t v428 = v107 + v113;
                      v914 = (char *)v57;
                      if (v806)
                      {
                        if (v971 < 1)
                        {
                          uint64_t v435 = v426;
                        }
                        else
                        {
                          uint64_t v429 = v425;
                          uint64_t v430 = 0;
                          uint64_t v956 = v425 + v855;
                          uint64_t v431 = v425 + (int)v861;
                          v432 = (char *)v57;
                          do
                          {
                            uint64_t v840 = v429;
                            v433 = v432;
                            v107 += (int)v967;
                            ((void (*)(char *, uint64_t, void, uint64_t, uint64_t))v899)(v432, v429 + (int)v967, v980, v807, v859);
                            v434 = &v432[(int)v967];
                            ((void (*)(char *, uint64_t, void, uint64_t, uint64_t))v899)(v434, v431 + (int)v967, v980, v807, v859);
                            ((void (*)(char *, uint64_t, void, uint64_t, uint64_t))v899)((char *)v433 + v878, v956 + (int)v967, v980, v807, v859);
                            v432 = &v434[-(int)v967];
                            ((void (*)(uint64_t, _OWORD *, void, uint64_t, void, void, uint64_t))v973)(v107, v433, v980, v967, v936, v971, v430);
                            uint64_t v430 = (v430 + 1);
                            uint64_t v429 = v840 + v804;
                            v956 += v804;
                            v431 += v804;
                          }
                          while (v971 != v430);
                          v914 = v432;
                          uint64_t v423 = -2 * (int)v967;
                          uint64_t v113 = (int)v967;
                          uint64_t v427 = v429 + (int)v967;
                          uint64_t v428 = v107 + (int)v967;
                          uint64_t v105 = v980;
                          uint64_t v435 = v967;
                        }
                        v427 += v113;
                      }
                      else
                      {
                        int v437 = v971;
                        if (v971 >= 1)
                        {
                          do
                          {
                            ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v803)(v428, v427, v105, v861, v807, v859);
                            v427 += v928;
                            v428 += v113;
                            --v437;
                          }
                          while (v437);
                        }
                        uint64_t v435 = v967;
                        uint64_t v423 = -2 * (int)v967;
                      }
                      uint64_t v438 = v427 - (int)v967;
                      uint64_t v436 = v435;
                      uint64_t v103 = v803;
                      double result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v803)(v428, v438, v105);
                      uint64_t v107 = v428 + v113;
                      uint64_t v108 = v438 + v878 + v791;
                      __int16 v57 = (long long *)v914;
                      v424 = (void (*)(long long *))v899;
                      uint64_t v143 = v862;
                    }
                    else
                    {
                      uint64_t v436 = v106;
                    }
                    if (v896 & v925)
                    {
                      uint64_t v106 = v436;
                      if (v939 >= 1)
                      {
                        unsigned int v439 = 0;
                        do
                        {
                          unsigned int v886 = v439;
                          if (v821)
                          {
                            uint64_t v440 = v108;
                            uint64_t v441 = v423;
                            uint64_t v442 = v105;
                            uint64_t v443 = v106;
                            v424(v57);
                            v444 = v57;
                            uint64_t v445 = v440 + (int)v862;
                            v446 = (char *)v444 + (int)v967;
                            ((void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))v424)(v446, v445, v442, v443, v859);
                            uint64_t v447 = v445 + (int)v862;
                            v448 = &v446[(int)v967];
                            v449 = (void (*)(void))v424;
                            ((void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))v424)(v448, v447, v442, v443, v859);
                            v450 = &v448[v441];
                            double result = ((uint64_t (*)(uint64_t))v973)(v107);
                            uint64_t v108 = v447 + v923 + (int)v967;
                            v107 += (int)v967;
                          }
                          else
                          {
                            v449 = (void (*)(void))v424;
                            v450 = (char *)v57;
                          }
                          if (v806)
                          {
                            uint64_t v451 = v107;
                            v452 = v450;
                            if (v971 < 1)
                            {
                              uint64_t v456 = v925;
                              v457 = v930;
                              uint64_t v453 = v980;
                              uint64_t v454 = v967;
                            }
                            else
                            {
                              unsigned int v870 = 0;
                              uint64_t v453 = v980;
                              uint64_t v454 = v967;
                              do
                              {
                                uint64_t v455 = v108;
                                v854(v452);
                                ((void (*)(void))v854)();
                                ((void (*)(char *, uint64_t, void, uint64_t))v854)(&v452[v878], v455 + v855, v980, v859);
                                ((void (*)(char *, char *, void, uint64_t, void, void, void))v973)(v930, v452, v980, v454, v936, v971, v870);
                                ((void (*)(char *, uint64_t, void, uint64_t))v854)(v452, v455 + v815, v980, v859);
                                ((void (*)(char *, uint64_t, void, uint64_t))v854)(&v452[(int)v967], v455 + v816, v980, v859);
                                ((void (*)(char *, uint64_t, void, uint64_t))v854)(&v452[v878], v455 + v817, v980, v859);
                                ((void (*)(void))v973)();
                                ((void (*)(char *, uint64_t, void, uint64_t))v854)(v452, v455 + v818, v980, v859);
                                ((void (*)(char *, uint64_t, void, uint64_t))v854)(&v452[(int)v967], v455 + v819, v980, v859);
                                uint64_t v915 = v455
                                     + (int)v861
                                     + (int)v861
                                     + v900
                                     + (int)v862
                                     + (uint64_t)(int)v861
                                     + (int)v861
                                     + v900
                                     + (int)v862
                                     + (int)v861
                                     + (int)v861;
                                ((void (*)(char *, uint64_t, void, uint64_t))v854)(&v452[v878], v455 + v820, v980, v859);
                                v450 = v452;
                                uint64_t v456 = v925;
                                ((void (*)(char *, char *, void, uint64_t, void, void, void))v973)(&v930[v878], v452, v980, v967, v936, v971, v870);
                                v457 = v930;
                                double result = ((uint64_t (*)(uint64_t, char *, void, uint64_t, void, void, void))v973)(v451, v930, v980, v967, v925, v939, v886);
                                uint64_t v108 = v915 + v900 + v923 + v928;
                                v451 += (int)v967;
                                ++v870;
                                uint64_t v454 = v967;
                              }
                              while (v971 != v870);
                            }
                            uint64_t v957 = v451;
                            uint64_t v465 = v456;
                            uint64_t v466 = v454;
                            uint64_t v460 = (int)v967;
                            v108 += (int)v967;
                            __int16 v57 = (long long *)v450;
                            v930 = v457;
                            uint64_t v105 = v453;
                            uint64_t v464 = -2 * (int)v967;
                          }
                          else
                          {
                            int v458 = v971;
                            __int16 v57 = (long long *)v450;
                            v459 = (void (*)(long long *))v449;
                            uint64_t v460 = (int)v967;
                            if (v971 >= 1)
                            {
                              do
                              {
                                v461 = v57;
                                v462 = v57;
                                uint64_t v463 = v108;
                                v459(v462);
                                ((void (*)(void))v899)();
                                ((void (*)(char *, uint64_t, void, uint64_t, uint64_t))v899)((char *)v461 + v878, v463 + v857, v980, v861, v859);
                                v459 = (void (*)(long long *))v899;
                                double result = ((uint64_t (*)(uint64_t, long long *, void, uint64_t, void, void, void))v973)(v107, v461, v980, v967, v925, v939, v886);
                                uint64_t v108 = v463 + (int)v862 + (int)v862 + v923 + v928;
                                __int16 v57 = v461;
                                v107 += (int)v967;
                                --v458;
                              }
                              while (v458);
                            }
                            uint64_t v464 = -2 * (int)v967;
                            uint64_t v957 = v107;
                            uint64_t v105 = v980;
                            uint64_t v465 = v925;
                            uint64_t v466 = v967;
                          }
                          uint64_t v106 = v466;
                          if (v821)
                          {
                            v467 = v57;
                            uint64_t v468 = v108 - (int)v967;
                            uint64_t v469 = v466;
                            ((void (*)(long long *, uint64_t, uint64_t))v899)(v467, v468, v105);
                            uint64_t v470 = v468 + (int)v862;
                            v471 = (char *)v467 + v460;
                            ((void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))v899)(v471, v470, v105, v466, v859);
                            uint64_t v472 = v470 + (int)v862;
                            v473 = &v471[v460];
                            ((void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))v899)(v473, v472, v105, v466, v859);
                            uint64_t v423 = v464;
                            v474 = &v473[v464];
                            v475 = &v473[v464];
                            int v476 = v939;
                            unsigned int v477 = v886;
                            double result = ((uint64_t (*)(uint64_t, char *, uint64_t, uint64_t, uint64_t, void, void))v973)(v957, v475, v105, v469, v465, v939, v886);
                            uint64_t v106 = v469;
                            uint64_t v108 = v472 + v923 + v878;
                            __int16 v57 = (long long *)v474;
                            uint64_t v107 = v957 + v460;
                            uint64_t v143 = v862;
                          }
                          else
                          {
                            uint64_t v107 = v957;
                            uint64_t v423 = v464;
                            int v476 = v939;
                            uint64_t v143 = v862;
                            unsigned int v477 = v886;
                          }
                          v108 += v805;
                          unsigned int v439 = v477 + 1;
                          BOOL v48 = v439 == v476;
                          v424 = (void (*)(long long *))v899;
                        }
                        while (!v48);
                      }
                      v108 += v789;
                      uint64_t v113 = (int)v967;
                      uint64_t v103 = v803;
                    }
                    else
                    {
                      uint64_t v106 = v436;
                      if (v939 >= 1)
                      {
                        int v478 = 0;
                        do
                        {
                          int v887 = v478;
                          if (v821)
                          {
                            uint64_t v479 = v108;
                            double result = ((uint64_t (*)(uint64_t))v103)(v107);
                            uint64_t v108 = v479 + v113;
                            v107 += v113;
                          }
                          if (v806)
                          {
                            if (v971 < 1)
                            {
                              v484 = v57;
                              v485 = v973;
                            }
                            else
                            {
                              uint64_t v480 = 0;
                              do
                              {
                                v481 = v57;
                                uint64_t v482 = v108;
                                v899((uint64_t)v57);
                                ((void (*)(void))v899)();
                                ((void (*)(char *, uint64_t, void, uint64_t, uint64_t))v899)((char *)v57 + v878, v482 + v855, v980, v862, v859);
                                uint64_t v483 = v482 + (int)v861 + (int)v861 + v900;
                                v484 = v481;
                                v485 = v973;
                                double result = ((uint64_t (*)(uint64_t, long long *, void, uint64_t, void, void, uint64_t))v973)(v107, v481, v980, v967, v936, v971, v480);
                                uint64_t v108 = v483 + v928;
                                v107 += (int)v967;
                                uint64_t v480 = (v480 + 1);
                                __int16 v57 = v481;
                              }
                              while (v971 != v480);
                            }
                            v973 = v485;
                            uint64_t v492 = -2 * (int)v967;
                            v108 += (int)v967;
                            __int16 v57 = v484;
                            uint64_t v103 = v803;
                            uint64_t v491 = v862;
                            uint64_t v106 = v967;
                            uint64_t v105 = v980;
                            uint64_t v113 = (int)v967;
                          }
                          else
                          {
                            v916 = v57;
                            int v486 = v971;
                            if (v971 >= 1)
                            {
                              do
                              {
                                uint64_t v487 = v143;
                                uint64_t v488 = v113;
                                uint64_t v489 = v108;
                                double result = ((uint64_t (*)(uint64_t))v103)(v107);
                                uint64_t v490 = v489;
                                uint64_t v113 = v488;
                                uint64_t v143 = v487;
                                uint64_t v108 = v490 + v928;
                                v107 += v113;
                                --v486;
                              }
                              while (v486);
                            }
                            uint64_t v491 = v143;
                            uint64_t v492 = -2 * (int)v967;
                            uint64_t v106 = v967;
                            __int16 v57 = v916;
                          }
                          if (v821)
                          {
                            v493 = v57;
                            uint64_t v494 = v108 - (int)v967;
                            uint64_t v495 = v105;
                            uint64_t v496 = v105;
                            uint64_t v497 = v106;
                            double result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v103)(v107, v494, v495);
                            uint64_t v106 = v497;
                            uint64_t v105 = v496;
                            uint64_t v108 = v494 + v878;
                            __int16 v57 = v493;
                            v107 += v113;
                          }
                          uint64_t v423 = v492;
                          v108 += v805;
                          int v478 = v887 + 1;
                          uint64_t v143 = v491;
                        }
                        while (v887 + 1 != v939);
                        v424 = (void (*)(long long *))v899;
                      }
                    }
                    if (v821)
                    {
                      uint64_t v498 = v108;
                      uint64_t v499 = v108 - v789;
                      uint64_t v500 = v106;
                      ((void (*)(uint64_t, uint64_t, uint64_t))v103)(v107, v108 - v789, v105);
                      uint64_t v501 = v499 + v113;
                      uint64_t v502 = v107 + v113;
                      if (v806)
                      {
                        if (v971 < 1)
                        {
                          v918 = v57;
                          uint64_t v505 = v500;
                        }
                        else
                        {
                          uint64_t v503 = 0;
                          uint64_t v917 = v498 + v774;
                          uint64_t v504 = v498 + v773;
                          do
                          {
                            v107 += (int)v967;
                            ((void (*)(long long *, uint64_t, void, uint64_t, uint64_t))v899)(v57, v499 + (int)v967, v980, v807, v859);
                            ((void (*)(char *, uint64_t, void, uint64_t, uint64_t))v899)((char *)v57 + (int)v967, v504 + (int)v967, v980, v807, v859);
                            ((void (*)(char *, uint64_t, void, uint64_t, uint64_t))v899)((char *)v57 + v878, v917 + (int)v967, v980, v807, v859);
                            ((void (*)(uint64_t, long long *, void, uint64_t, void, void, uint64_t))v973)(v107, v57, v980, v967, v936, v971, v503);
                            uint64_t v503 = (v503 + 1);
                            v499 += v804;
                            v917 += v804;
                            v504 += v804;
                          }
                          while (v971 != v503);
                          v918 = v57;
                          uint64_t v423 = -2 * (int)v967;
                          uint64_t v113 = (int)v967;
                          uint64_t v501 = v499 + (int)v967;
                          uint64_t v502 = v107 + (int)v967;
                          uint64_t v505 = v967;
                        }
                        v501 += v113;
                      }
                      else
                      {
                        v918 = v57;
                        int v506 = v971;
                        if (v971 >= 1)
                        {
                          do
                          {
                            ((void (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))v803)(v502, v501, v980, v861, v807, v859);
                            v501 += v928;
                            v502 += v113;
                            --v506;
                          }
                          while (v506);
                        }
                        uint64_t v505 = v967;
                        uint64_t v423 = -2 * (int)v967;
                      }
                      uint64_t v507 = v501 - (int)v967;
                      uint64_t v105 = v980;
                      uint64_t v508 = v505;
                      double result = ((uint64_t (*)(uint64_t, uint64_t, void))v803)(v502, v507, v980);
                      uint64_t v106 = v508;
                      uint64_t v107 = v502 + v113;
                      uint64_t v103 = v803;
                      uint64_t v108 = v507 + v878 + v790;
                      __int16 v57 = v918;
                      v424 = (void (*)(long long *))v899;
                      uint64_t v143 = v862;
                    }
                    v108 += v792;
                  }
                }
              }
              if (v821)
              {
                uint64_t v509 = v108;
                uint64_t v510 = v108 - v808;
                uint64_t v511 = v106;
                ((void (*)(uint64_t, uint64_t, uint64_t))v103)(v107, v108 - v808, v105);
                uint64_t v512 = v510 + v113;
                uint64_t v513 = v107 + v113;
                if (v806)
                {
                  if (v971 < 1)
                  {
                    v919 = v57;
                    uint64_t v519 = v807;
                    uint64_t v518 = v862;
                    uint64_t v516 = v511;
                    v517 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v899;
                  }
                  else
                  {
                    uint64_t v514 = 0;
                    uint64_t v958 = v509 + v743;
                    uint64_t v515 = v509 + (int)v861 - v808;
                    do
                    {
                      v107 += (int)v967;
                      ((void (*)(long long *, uint64_t, void, uint64_t, uint64_t))v899)(v57, v510 + (int)v967, v980, v807, v808);
                      ((void (*)(char *, uint64_t, void, uint64_t, uint64_t))v899)((char *)v57 + (int)v967, v515 + (int)v967, v980, v807, v808);
                      ((void (*)(char *, uint64_t, void, uint64_t, uint64_t))v899)((char *)v57 + v878, v958 + (int)v967, v980, v807, v808);
                      ((void (*)(uint64_t, long long *, void, uint64_t, void, void, uint64_t))v973)(v107, v57, v980, v967, v936, v971, v514);
                      uint64_t v514 = (v514 + 1);
                      v510 += v804;
                      v958 += v804;
                      v515 += v804;
                    }
                    while (v971 != v514);
                    v919 = v57;
                    uint64_t v113 = (int)v967;
                    uint64_t v516 = v967;
                    uint64_t v512 = v510 + (int)v967;
                    uint64_t v513 = v107 + (int)v967;
                    v517 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v899;
                    uint64_t v518 = v862;
                    uint64_t v519 = v807;
                  }
                  v512 += v113;
                }
                else
                {
                  v919 = v57;
                  int v520 = v971;
                  if (v971 >= 1)
                  {
                    do
                    {
                      ((void (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))v803)(v513, v512, v980, v861, v807, v808);
                      v512 += v928;
                      v513 += v113;
                      --v520;
                    }
                    while (v520);
                  }
                  uint64_t v516 = v967;
                  uint64_t v518 = v862;
                  v517 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v899;
                  uint64_t v519 = v807;
                }
                uint64_t v521 = v512 - (int)v967;
                uint64_t v105 = v980;
                uint64_t v522 = v516;
                ((void (*)(uint64_t, uint64_t, void))v803)(v513, v521, v980);
                uint64_t v959 = v513 + v113;
                uint64_t v523 = v521 + v878 + v791;
                if (v896 & v925)
                {
                  uint64_t v524 = v113;
                  uint64_t v525 = v980;
                  uint64_t v526 = v522;
                  if (v939 < 1)
                  {
                    uint64_t v529 = (uint64_t)v919;
                    uint64_t v530 = v524;
                  }
                  else
                  {
                    uint64_t v527 = 0;
                    uint64_t v528 = (int)v862;
                    uint64_t v529 = (uint64_t)v919;
                    uint64_t v530 = v524;
                    do
                    {
                      unsigned int v841 = v527;
                      uint64_t v531 = v523;
                      v517(v529, v523, v525, v526, v808);
                      uint64_t v888 = v531;
                      uint64_t v920 = v529;
                      uint64_t v532 = v529 + v530;
                      v517(v532, v531 + v528, v525, v526, v808);
                      v517(v532 + v530, v531 + v528 + v528, v525, v526, v808);
                      uint64_t v533 = v531 + v528 + v528 + v923;
                      uint64_t v534 = v532 + v530 - 2 * (int)v967;
                      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t))v973)(v959, v534, v525, v526, v925, v939, v527);
                      uint64_t v535 = v533;
                      uint64_t v536 = v533 + v530;
                      if (v806)
                      {
                        v537 = v930;
                        if (v971 < 1)
                        {
                          uint64_t v960 = v959 + v530;
                          uint64_t v543 = (int)v967;
                          v517 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v899;
                        }
                        else
                        {
                          unsigned int v824 = 0;
                          uint64_t v832 = v888 + v782;
                          uint64_t v828 = v888 + v781;
                          uint64_t v538 = v888 + v780;
                          uint64_t v871 = v888 + v785;
                          uint64_t v539 = v888 + v784;
                          uint64_t v847 = v888 + v783;
                          uint64_t v540 = v888 + v779;
                          uint64_t v541 = v888 + v778;
                          do
                          {
                            v542 = v537;
                            v932 = v537;
                            uint64_t v794 = v535;
                            v959 += (int)v967;
                            ((void (*)(uint64_t, uint64_t, void, uint64_t))v854)(v920, v535 + (int)v967, v980, v808);
                            ((void (*)(void))v854)();
                            ((void (*)(uint64_t, uint64_t, void, uint64_t))v854)(v920 + v878, v540 + (int)v967, v980, v808);
                            ((void (*)(char *, uint64_t, void, uint64_t, void, void, void))v973)(v542, v920, v980, v967, v936, v971, v824);
                            ((void (*)(uint64_t, uint64_t, void, uint64_t))v854)(v920, v847 + (int)v967, v980, v808);
                            ((void (*)(uint64_t, uint64_t, void, uint64_t))v854)(v920 + (int)v967, v539 + (int)v967, v980, v808);
                            ((void (*)(uint64_t, uint64_t, void, uint64_t))v854)(v920 + v878, v871 + (int)v967, v980, v808);
                            ((void (*)(void))v973)();
                            ((void (*)(uint64_t, uint64_t, void, uint64_t))v854)(v920, v538 + (int)v967, v980, v808);
                            ((void (*)(uint64_t, uint64_t, void, uint64_t))v854)(v920 + (int)v967, v828 + (int)v967, v980, v808);
                            ((void (*)(uint64_t, uint64_t, void, uint64_t))v854)(v920 + v878, v832 + (int)v967, v980, v808);
                            ((void (*)(char *, uint64_t, void, uint64_t, void, void, void))v973)(&v932[v878], v920, v980, v967, v936, v971, v824);
                            ((void (*)(uint64_t, char *, void, uint64_t, void, void, void))v973)(v959, v932, v980, v967, v925, v939, v841);
                            v537 = v932;
                            uint64_t v535 = v794 + v800;
                            v832 += v800;
                            v828 += v800;
                            v538 += v800;
                            v871 += v800;
                            v539 += v800;
                            v847 += v800;
                            v540 += v800;
                            v541 += v800;
                            ++v824;
                          }
                          while (v971 != v824);
                          uint64_t v536 = v535 + (int)v967;
                          uint64_t v960 = v959 + (int)v967;
                          uint64_t v534 = v920;
                          v517 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v899;
                          uint64_t v543 = (int)v967;
                        }
                        v930 = v537;
                        v536 += v543;
                        uint64_t v526 = v967;
                        uint64_t v549 = -2 * (int)v967;
                        uint64_t v550 = v808;
                        uint64_t v548 = v543;
                      }
                      else
                      {
                        int v544 = v971;
                        if (v971 < 1)
                        {
                          uint64_t v960 = v959 + v530;
                          uint64_t v548 = (int)v967;
                          uint64_t v526 = v967;
                          uint64_t v549 = -2 * (int)v967;
                          uint64_t v550 = v808;
                          v517 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v899;
                        }
                        else
                        {
                          uint64_t v545 = v888 + v777;
                          uint64_t v546 = v888 + v776;
                          do
                          {
                            int v889 = v544;
                            uint64_t v547 = v535;
                            ((void (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))v899)(v920, v535 + (int)v967, v980, v861, v808);
                            ((void (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))v899)(v920 + (int)v967, v546 + (int)v967, v980, v861, v808);
                            ((void (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))v899)(v920 + v878, v545 + (int)v967, v980, v861, v808);
                            v959 += (int)v967;
                            ((void (*)(uint64_t, uint64_t, void, uint64_t, void, void, void))v973)(v959, v920, v980, v967, v925, v939, v527);
                            uint64_t v535 = v547 + v798;
                            v545 += v798;
                            v546 += v798;
                            --v544;
                          }
                          while (v889 != 1);
                          uint64_t v548 = (int)v967;
                          uint64_t v536 = v535 + (int)v967;
                          uint64_t v960 = v959 + (int)v967;
                          uint64_t v534 = v920;
                          v517 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v899;
                          uint64_t v526 = v967;
                          uint64_t v549 = -2 * (int)v967;
                          uint64_t v550 = v808;
                        }
                      }
                      uint64_t v551 = v536 - (int)v967;
                      uint64_t v525 = v980;
                      v517(v534, v551, v980, v526, v550);
                      uint64_t v552 = v551 + (int)v862;
                      v517(v534 + v548, v552, v980, v526, v550);
                      uint64_t v921 = v552 + (int)v862;
                      ((void (*)(uint64_t))v517)(v534 + v548 + v548);
                      uint64_t v529 = v534 + v548 + v548 + v549;
                      uint64_t v530 = v548;
                      ((void (*)(uint64_t, uint64_t, void, uint64_t, void, void, void))v973)(v960, v529, v980, v526, v925, v939, v841);
                      uint64_t v959 = v960 + v548;
                      uint64_t v523 = v921 + v923 + v878 + v805;
                      uint64_t v527 = v841 + 1;
                      uint64_t v528 = (int)v862;
                    }
                    while (v527 != v939);
                  }
                  v919 = (_OWORD *)v529;
                  v523 += v789;
                  v554 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v803;
                  uint64_t v553 = v526;
                  uint64_t v105 = v525;
                  uint64_t v113 = v530;
                  uint64_t v571 = v807;
                }
                else
                {
                  uint64_t v553 = v522;
                  if (v939 < 1)
                  {
                    v554 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v803;
                  }
                  else
                  {
                    v554 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v803;
                    uint64_t v555 = v980;
                    int v556 = 0;
                    uint64_t v557 = v808;
                    do
                    {
                      uint64_t v558 = v523;
                      v554(v959, v523, v555, v553, v518, v557);
                      uint64_t v559 = v558;
                      uint64_t v560 = v558 + v113;
                      uint64_t v561 = v959 + v113;
                      if (v806)
                      {
                        if (v971 < 1)
                        {
                          uint64_t v519 = v807;
                        }
                        else
                        {
                          uint64_t v562 = 0;
                          uint64_t v563 = v559 + v855;
                          uint64_t v564 = v559 + (int)v861;
                          v565 = v919;
                          v566 = (void (*)(_OWORD *, uint64_t, void, uint64_t, uint64_t))v899;
                          do
                          {
                            uint64_t v890 = v559;
                            v567 = v565;
                            v566(v565, v559 + (int)v967, v980, v862, v808);
                            uint64_t v568 = (uint64_t)v565 + (int)v967;
                            ((void (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))v899)(v568, v564 + (int)v967, v980, v862, v808);
                            ((void (*)(char *, uint64_t, void, uint64_t, uint64_t))v899)((char *)v567 + v878, v563 + (int)v967, v980, v862, v808);
                            v565 = (_OWORD *)(v568 - (int)v967);
                            v959 += (int)v967;
                            ((void (*)(uint64_t, _OWORD *, void, uint64_t, void, void, uint64_t))v973)(v959, v567, v980, v967, v936, v971, v562);
                            v566 = (void (*)(_OWORD *, uint64_t, void, uint64_t, uint64_t))v899;
                            uint64_t v562 = (v562 + 1);
                            uint64_t v559 = v890 + v804;
                            v563 += v804;
                            v564 += v804;
                          }
                          while (v971 != v562);
                          v919 = v565;
                          uint64_t v113 = (int)v967;
                          uint64_t v560 = v559 + (int)v967;
                          uint64_t v561 = v959 + (int)v967;
                          uint64_t v555 = v980;
                          uint64_t v519 = v807;
                        }
                        v560 += v113;
                      }
                      else
                      {
                        int v569 = v971;
                        if (v971 >= 1)
                        {
                          do
                          {
                            ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v803)(v561, v560, v555, v861, v862, v808);
                            v560 += v928;
                            v561 += v113;
                            --v569;
                          }
                          while (v569);
                        }
                        uint64_t v519 = v807;
                      }
                      uint64_t v570 = v560 - (int)v967;
                      uint64_t v518 = v862;
                      uint64_t v557 = v808;
                      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v803)(v561, v570, v555, v967, v862, v808);
                      uint64_t v553 = v967;
                      uint64_t v959 = v561 + v113;
                      uint64_t v523 = v570 + v878 + v805;
                      v554 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v803;
                      ++v556;
                    }
                    while (v556 != v939);
                    uint64_t v105 = v555;
                    v517 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v899;
                  }
                  uint64_t v571 = v519;
                }
                uint64_t v572 = v523;
                uint64_t v573 = v523 - v789;
                v554(v959, v523 - v789, v105, v553, v571, v808);
                uint64_t v574 = v573 + v113;
                uint64_t v107 = v959 + v113;
                if (v806)
                {
                  if (v971 >= 1)
                  {
                    uint64_t v575 = 0;
                    uint64_t v576 = v572 + v774;
                    v577 = (void (*)(_OWORD *, uint64_t, void, uint64_t, uint64_t))v517;
                    uint64_t v578 = v572 + v773;
                    uint64_t v579 = v113;
                    v580 = v919;
                    do
                    {
                      v581 = v580;
                      v577(v580, v573 + v579, v980, v807, v808);
                      uint64_t v582 = (uint64_t)v580 + v579;
                      ((void (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))v899)(v582, v578 + v579, v980, v807, v808);
                      ((void (*)(char *, uint64_t, void, uint64_t, uint64_t))v899)((char *)v581 + v878, v576 + v579, v980, v807, v808);
                      v580 = (_OWORD *)(v582 + v579 - 2 * (int)v967);
                      v959 += v579;
                      ((void (*)(uint64_t, _OWORD *, void, uint64_t, void, void, uint64_t))v973)(v959, v581, v980, v967, v936, v971, v575);
                      v577 = (void (*)(_OWORD *, uint64_t, void, uint64_t, uint64_t))v899;
                      uint64_t v575 = (v575 + 1);
                      v573 += v804;
                      v576 += v804;
                      v578 += v804;
                    }
                    while (v971 != v575);
                    v919 = v580;
                    uint64_t v574 = v573 + v579;
                    uint64_t v107 = v959 + v579;
                    uint64_t v105 = v980;
                    uint64_t v113 = v579;
                  }
                  uint64_t v583 = v807;
                  v574 += v113;
                  __int16 v57 = v919;
                }
                else
                {
                  int v584 = v971;
                  uint64_t v583 = v807;
                  if (v971 >= 1)
                  {
                    do
                    {
                      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v803)(v107, v574, v105, v861, v807, v808);
                      v574 += v928;
                      v107 += v113;
                      --v584;
                    }
                    while (v584);
                  }
                  __int16 v57 = v919;
                }
                uint64_t v585 = v574 - (int)v967;
                double result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v803)(v107, v585, v105, v967, v583, v808);
                uint64_t v106 = v967;
                uint64_t v108 = v585;
                uint64_t v103 = v803;
              }
              goto LABEL_456;
            }
            goto LABEL_467;
          }
LABEL_465:
          int v54 = a3;
LABEL_466:
          uint64_t v55 = v738;
LABEL_467:
          int v974 = v49;
LABEL_643:
          uint64_t v591 = v736;
          goto LABEL_644;
        }
      }
      else
      {
        if ((v11 - 34234) < 2)
        {
          char v37 = 1;
          uint64_t v967 = 4;
          v973 = gle8888FilterBox;
          char v39 = (void (*)(void))gle8888Filter3;
          int v34 = (void (*)(void))gle8888Filter2;
          BOOL v35 = (void (*)(void))gle8888Filter1;
          if (v10 != 34233)
          {
            BOOL v48 = v10 == 35359;
            int v38 = a4;
            if (v48) {
              goto LABEL_87;
            }
            char v37 = 0;
            uint64_t v967 = 2;
            v973 = gle88FilterBox;
            char v39 = (void (*)(void))gle88Filter3;
            int v34 = (void (*)(void))gle88Filter2;
            uint64_t v46 = (void (*)(void))gle88Filter1;
            goto LABEL_86;
          }
LABEL_69:
          int v38 = a4;
          goto LABEL_87;
        }
        int v38 = a4;
        if (v11 == 35899)
        {
          char v37 = 0;
          uint64_t v967 = 4;
          v973 = glePackedFloatFilterBox;
          char v39 = (void (*)(void))glePackedFloatFilter3;
          int v34 = (void (*)(void))glePackedFloatFilter2;
          uint64_t v46 = (void (*)(void))glePackedFloatFilter1;
          goto LABEL_86;
        }
      }
LABEL_74:
      LODWORD(v49) = v38 + 1;
      goto LABEL_465;
    }
    int v40 = v14 - v32;
    int v41 = v31;
    double result = gleComponents(v10);
    unsigned int v970 = result;
    v898 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))gleUbyteFilter2;
    if (v11 <= 33633)
    {
      uint64_t v42 = gleUbyteFilter1;
      char v43 = 0;
      uint64_t v44 = result;
      int v38 = a4;
      uint64_t v45 = gleUbyteFilter3;
      switch(v11)
      {
        case 5120:
          char v43 = 0;
          uint64_t v45 = gleByteFilter3;
          v898 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))gleByteFilter2;
          uint64_t v42 = gleByteFilter1;
          uint64_t v44 = result;
          goto LABEL_487;
        case 5121:
          goto LABEL_487;
        case 5122:
          char v43 = 0;
          uint64_t v44 = (2 * result);
          uint64_t v45 = gleShortFilter3;
          v898 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))gleShortFilter2;
          __int16 v47 = gleShortFilter1;
          goto LABEL_486;
        case 5123:
          char v43 = 0;
          uint64_t v44 = (2 * result);
          uint64_t v45 = gleUshortFilter3;
          v898 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))gleUshortFilter2;
          __int16 v47 = gleUshortFilter1;
          goto LABEL_486;
        case 5124:
          char v43 = 0;
          uint64_t v44 = (4 * result);
          uint64_t v45 = gleIntFilter3;
          v898 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))gleIntFilter2;
          __int16 v47 = gleIntFilter1;
          goto LABEL_486;
        case 5125:
          char v43 = 0;
          uint64_t v44 = (4 * result);
          uint64_t v45 = gleUintFilter3;
          v898 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))gleUintFilter2;
          __int16 v47 = gleUintFilter1;
          goto LABEL_486;
        case 5126:
          char v43 = 0;
          uint64_t v44 = (4 * result);
          uint64_t v45 = gleFloatFilter3;
          v898 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))gleFloatFilter2;
          __int16 v47 = gleFloatFilter1;
          goto LABEL_486;
        case 5127:
        case 5128:
        case 5129:
        case 5130:
          goto LABEL_474;
        case 5131:
          char v43 = 0;
          uint64_t v44 = (2 * result);
          uint64_t v45 = gleHalfFloatFilter3;
          v898 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))gleHalfFloatFilter2;
          __int16 v47 = gleHalfFloatFilter1;
          goto LABEL_486;
        default:
          int v38 = a4;
          switch(v11)
          {
            case 32818:
              char v43 = 0;
              uint64_t v44 = 1;
              uint64_t v45 = gle332Filter3;
              v898 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))gle332Filter2;
              __int16 v47 = gle332Filter1;
              goto LABEL_486;
            case 32819:
              goto LABEL_70;
            case 32820:
              char v43 = 0;
              uint64_t v44 = 2;
              uint64_t v45 = gle5551Filter3;
              v898 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))gle5551Filter2;
              __int16 v47 = gle5551Filter1;
              goto LABEL_486;
            case 32821:
              goto LABEL_71;
            case 32822:
              char v43 = 0;
              uint64_t v44 = 4;
              uint64_t v45 = gle1010102Filter3;
              v898 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))gle1010102Filter2;
              __int16 v47 = gle1010102Filter1;
              goto LABEL_486;
            default:
              goto LABEL_474;
          }
      }
    }
    if (v11 <= 34233)
    {
      int v38 = a4;
      switch(v11)
      {
        case 33634:
          char v43 = 0;
          uint64_t v44 = 1;
          uint64_t v45 = gle233RevFilter3;
          v898 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))gle233RevFilter2;
          __int16 v47 = gle233RevFilter1;
          goto LABEL_486;
        case 33635:
        case 33636:
          char v43 = 0;
          uint64_t v44 = 2;
          uint64_t v45 = gle565Filter3;
          v898 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))gle565Filter2;
          __int16 v47 = gle565Filter1;
          goto LABEL_486;
        case 33637:
LABEL_70:
          char v43 = 0;
          uint64_t v44 = 2;
          uint64_t v45 = gle4444Filter3;
          v898 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))gle4444Filter2;
          __int16 v47 = gle4444Filter1;
          goto LABEL_486;
        case 33638:
          char v43 = 0;
          uint64_t v44 = 2;
          uint64_t v45 = gle1555RevFilter3;
          v898 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))gle1555RevFilter2;
          __int16 v47 = gle1555RevFilter1;
          goto LABEL_486;
        case 33639:
LABEL_71:
          char v43 = 0;
          uint64_t v44 = 4;
          uint64_t v45 = gle8888Filter3;
          v898 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))gle8888Filter2;
          __int16 v47 = gle8888Filter1;
          goto LABEL_486;
        case 33640:
          char v43 = 0;
          uint64_t v44 = 4;
          uint64_t v45 = gle2101010RevFilter3;
          v898 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))gle2101010RevFilter2;
          __int16 v47 = gle2101010RevFilter1;
          goto LABEL_486;
        default:
          int v38 = a4;
          if (v11 != 34042) {
            goto LABEL_474;
          }
          char v43 = 0;
          uint64_t v44 = 4;
          uint64_t v45 = gle248Filter3;
          v898 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))gle248Filter2;
          __int16 v47 = gle248Filter1;
          break;
      }
      goto LABEL_486;
    }
    if (v11 > 35901)
    {
      if (v11 == 35902)
      {
        char v43 = 0;
        uint64_t v44 = 4;
        uint64_t v45 = gleSharedExponentFilter3;
        v898 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))gleSharedExponentFilter2;
        uint64_t v42 = gleSharedExponentFilter1;
        goto LABEL_471;
      }
      int v38 = a4;
      if (v11 == 36269)
      {
        char v43 = 0;
        uint64_t v44 = 8;
        uint64_t v45 = gle32F248Filter3;
        v898 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))gle32F248Filter2;
        __int16 v47 = gle32F248Filter1;
        goto LABEL_486;
      }
    }
    else
    {
      if ((v11 - 34234) < 2)
      {
        char v43 = 1;
        uint64_t v44 = 4;
        uint64_t v45 = gle8888Filter3;
        v898 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))gle8888Filter2;
        uint64_t v42 = gle8888Filter1;
        if (v10 != 34233)
        {
          BOOL v48 = v10 == 35359;
          int v38 = a4;
          if (!v48)
          {
            char v43 = 0;
            uint64_t v44 = 2;
            uint64_t v45 = gle88Filter3;
            v898 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))gle88Filter2;
            __int16 v47 = gle88Filter1;
LABEL_486:
            uint64_t v42 = v47;
          }
LABEL_487:
          int v587 = v29 >> v43;
          int v974 = v38 + 1;
          BOOL v588 = v31 <= 1 && v587 <= 1;
          int v590 = !v588 || v40 > 1;
          if (v38 >= a5)
          {
LABEL_642:
            int v54 = a3;
            uint64_t v55 = v738;
            goto LABEL_643;
          }
          int v54 = a3;
          uint64_t v55 = v738;
          uint64_t v591 = v736;
          if (!v590)
          {
LABEL_644:
            if (v591)
            {
              uint64_t v715 = v7 + 480 * v54 + 32 * v55;
              double result = MEMORY[0x22A686F90](*(void *)(v715 + 1056));
              *(void *)(v715 + 1056) = v591;
              int v716 = v38 + 1;
              int v717 = v974;
              if (v38 + 1 < v974)
              {
                int v964 = v38 + 1;
                uint64_t v718 = v716;
                do
                {
                  uint64_t v986 = 0;
                  long long v984 = 0u;
                  long long v985 = 0u;
                  long long v982 = 0u;
                  long long v983 = 0u;
                  glgConvertType();
                  uint64_t v719 = v7 + 480 * a3 + 32 * v718;
                  glgConvertType();
                  int v720 = gleRowBytes(v740, v741, *(unsigned __int16 *)(v719 + 1036));
                  int v721 = gleRowBytes(*(unsigned __int16 *)(v719 + 1048), 0, *(unsigned __int16 *)(v719 + 1044));
                  int v722 = *(unsigned __int16 *)(v719 + 1038);
                  int v723 = glgGetCompressedImageBytes();
                  uint64_t v724 = *(void *)(v719 + 1056);
                  *(void *)(v719 + 1056) = gfxLibAlloc();
                  LODWORD(v983) = v720;
                  HIDWORD(v983) = v721;
                  *((void *)&v984 + 1) = 2;
                  int v725 = *(unsigned __int16 *)(v719 + 1036);
                  LODWORD(v985) = 0x10000000;
                  DWORD1(v985) = v725;
                  DWORD2(v985) = *(unsigned __int16 *)(v719 + 1038);
                  if (*(_WORD *)(v719 + 1040))
                  {
                    int v726 = v720;
                    unsigned int v727 = 0;
                    unsigned int v728 = 0;
                    unint64_t v729 = 0;
                    v730 = (void *)(v719 + 1056);
                    v731 = (unsigned __int16 *)(v719 + 1040);
                    int v732 = v726 * v722;
                    do
                    {
                      uint64_t v733 = *v730 + v728;
                      *(void *)&long long v982 = v724 + v727;
                      *((void *)&v982 + 1) = v733;
                      glgProcessPixelsWithProcessor();
                      ++v729;
                      v728 += v723;
                      v727 += v732;
                    }
                    while (v729 < *v731);
                  }
                  double result = MEMORY[0x22A686F90](v724);
                  ++v718;
                  int v717 = v974;
                  uint64_t v7 = a2;
                }
                while (v974 != v718);
                int v38 = a4;
                int v716 = v964;
              }
            }
            else
            {
              int v716 = v38 + 1;
              int v717 = v974;
            }
            if (v716 < v717)
            {
              int v734 = v38 + 1;
              uint64_t v735 = 480 * a3 + 32 * v738 + v7 + 1064;
              do
              {
                double result = gfxModifyPluginTextureLevel();
                ++v734;
                v735 += 32;
              }
              while (v717 != v734);
            }
            return result;
          }
          v872 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v42;
          uint64_t v592 = (int)v44;
          uint64_t v924 = 2 * (int)v44;
          uint64_t v593 = v738 + 1;
          int v594 = a5;
          LODWORD(v595) = v44;
          uint64_t v856 = v594;
          uint64_t v929 = -(uint64_t)(int)v44;
          char v858 = v43;
          uint64_t v961 = v44;
          v981 = (void (*)(void, void, void, void, void, void))v45;
          uint64_t v962 = (int)v44;
          while (1)
          {
            uint64_t v596 = v7 + 480 * a3 + 1032;
            uint64_t v597 = v596 + 32 * v55;
            uint64_t v598 = v593;
            if (v587 == 1) {
              uint64_t v599 = 0;
            }
            else {
              uint64_t v599 = v595;
            }
            int v600 = *(unsigned __int16 *)(v597 + 12) >> v43;
            unsigned int v601 = v600 * v595;
            int v926 = v41;
            if (v41 == 1) {
              uint64_t v602 = 0;
            }
            else {
              uint64_t v602 = v601;
            }
            uint64_t v603 = *(unsigned __int16 *)(v597 + 14);
            uint64_t v901 = v603 * (int)v601;
            if (v40 == 1) {
              uint64_t v604 = 0;
            }
            else {
              uint64_t v604 = *(unsigned __int16 *)(v597 + 14) * v601;
            }
            char v605 = v43;
            uint64_t v606 = *(void *)(v597 + 24);
            uint64_t v860 = v598;
            uint64_t v607 = v596 + 32 * v598;
            uint64_t v610 = *(void *)(v607 + 24);
            v608 = (uint64_t *)(v607 + 24);
            uint64_t v609 = v610;
            int v611 = *((unsigned __int16 *)v608 - 10);
            int v612 = *((unsigned __int16 *)v608 - 9);
            int v613 = *((unsigned __int16 *)v608 - 8);
            if (!v610)
            {
              int v933 = *((unsigned __int16 *)v608 - 10);
              uint64_t v614 = a2 + 480 * a3 + 32 * v860;
              int v975 = v587;
              unsigned int v615 = v601;
              uint64_t v965 = *(unsigned __int16 *)(v597 + 14);
              int v940 = *(unsigned __int16 *)(v597 + 12) >> v43;
              int v937 = *((unsigned __int16 *)v608 - 8);
              double result = gfxLibAlloc();
              int v611 = v933;
              int v613 = v937;
              int v600 = v940;
              uint64_t v603 = v965;
              unsigned int v601 = v615;
              int v587 = v975;
              uint64_t v609 = result;
              uint64_t *v608 = result;
              *(unsigned char *)(v614 + 1043) |= 0x10u;
            }
            int v616 = (v611 - (int)v748) >> v605;
            int v938 = v612 - v746;
            int v895 = v613 - v745;
            if (v747) {
              int v617 = v613 - v745;
            }
            else {
              int v617 = v612;
            }
            if ((v744 & 0x2000) == 0) {
              int v617 = 1;
            }
            int v873 = v617;
            uint64_t v618 = v970;
            uint64_t v595 = v961;
            v619 = v981;
            if (v617 >= 1) {
              break;
            }
LABEL_630:
            uint64_t v55 = v860;
            uint64_t v593 = v860 + 1;
            BOOL v588 = v616 <= 1;
            int v711 = v616;
            int v41 = v938;
            BOOL v712 = v588 && v938 <= 1;
            int v40 = v895;
            int v714 = !v712 || v895 > 1;
            uint64_t v7 = a2;
            char v43 = v858;
            if (v860 < v856)
            {
              int v587 = v711;
              if (v714) {
                continue;
              }
            }
            int v974 = v860 + 1;
            int v38 = a4;
            goto LABEL_642;
          }
          int v875 = 0;
          uint64_t v620 = v592 + (int)v599;
          uint64_t v934 = (int)v592 * (v600 - (v587 + (int)v748)) + (uint64_t)(int)v602;
          uint64_t v879 = -(uint64_t)(int)v601;
          uint64_t v891 = (int)v592 * (uint64_t)(v600 - (v587 + (int)v748));
          uint64_t v922 = (int)v601;
          uint64_t v877 = (int)v601 + (uint64_t)(int)v891;
          uint64_t v863 = (v603 - (v926 + (int)v748)) * (int)v601;
          uint64_t v893 = (int)v604 + (int)v863;
          unsigned int v966 = v604;
          int v941 = v616;
          uint64_t v927 = v620;
          unsigned int v963 = v599;
          unsigned int v968 = v602;
          while (1)
          {
            if (v787 == 3)
            {
              if (v821)
              {
                v622 = v619;
                v619(v609, v606, v618, v595, v922, v901);
                if (v616 < 1)
                {
                  uint64_t v627 = v606 + v592;
                  uint64_t v626 = v609 + v592;
                  v628 = v622;
                }
                else
                {
                  v623 = v622;
                  uint64_t v624 = v618;
                  int v625 = v616;
                  do
                  {
                    v609 += v592;
                    v623(v609, v606 + v592, v624, v599, v922, v901);
                    v606 += v927;
                    --v625;
                  }
                  while (v625);
                  uint64_t v626 = v609 + v592;
                  uint64_t v627 = v606 + v592;
                  v628 = v623;
                  uint64_t v595 = v961;
                  int v616 = v941;
                  uint64_t v618 = v624;
                }
                uint64_t v634 = v627 + v929;
                uint64_t v635 = v618;
                v628(v626, v627 + v929, v618, v595, v922, v901);
                uint64_t v636 = v634 + v924 + v891;
                uint64_t v637 = v609 + v592 + v592;
                if (v938 < 1)
                {
                  uint64_t v639 = v961;
                  v640 = v981;
                  uint64_t v641 = v901;
                  uint64_t v642 = v635;
                }
                else
                {
                  int v638 = 0;
                  uint64_t v639 = v961;
                  v640 = v981;
                  uint64_t v641 = v901;
                  uint64_t v642 = v635;
                  uint64_t v643 = v968;
                  do
                  {
                    int v976 = v638;
                    v640(v637, v636, v642, v639, v643, v641);
                    if (v616 < 1)
                    {
                      uint64_t v647 = v636 + v592;
                      uint64_t v646 = v637 + v592;
                      uint64_t v648 = v642;
                      uint64_t v645 = v901;
                      uint64_t v643 = v968;
                    }
                    else
                    {
                      uint64_t v644 = v642;
                      uint64_t v645 = v901;
                      uint64_t v643 = v968;
                      do
                      {
                        v637 += v592;
                        v981(v637, v636 + v592, v644, v599, v968, v901);
                        v636 += v927;
                        --v616;
                      }
                      while (v616);
                      uint64_t v646 = v637 + v592;
                      uint64_t v647 = v636 + v592;
                      uint64_t v648 = v644;
                      int v616 = v941;
                    }
                    uint64_t v649 = v647 + v929;
                    uint64_t v639 = v961;
                    v640 = v981;
                    v981(v646, v647 + v929, v648, v961, v643, v645);
                    uint64_t v641 = v645;
                    uint64_t v642 = v970;
                    uint64_t v636 = v649 + v924 + v934;
                    int v638 = v976 + 1;
                    v637 += v592 + v592;
                  }
                  while (v976 + 1 != v938);
                }
                uint64_t v659 = v636 + v879;
                v640(v637, v659, v642, v639, v922, v641);
                uint64_t v660 = v659 + v592;
                uint64_t v661 = v637 + v592;
                uint64_t v595 = v639;
                if (v616 < 1)
                {
                  uint64_t v663 = v922;
                  uint64_t v664 = v970;
                  uint64_t v602 = v968;
                }
                else
                {
                  int v662 = v616;
                  uint64_t v663 = v922;
                  uint64_t v664 = v970;
                  uint64_t v602 = v968;
                  do
                  {
                    v981(v661, v660, v970, v599, v922, v901);
                    v660 += v927;
                    v661 += v592;
                    --v662;
                  }
                  while (v662);
                }
                uint64_t v666 = v660 + v929;
                uint64_t v618 = v664;
                double result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v981)(v661, v666, v664, v595, v663, v901);
                uint64_t v609 = v661 + v592;
                uint64_t v606 = v666 + v924 + v877 + v863;
                v619 = v981;
                uint64_t v604 = v966;
              }
              if (v895 < 1)
              {
                int v616 = v941;
              }
              else
              {
                int v897 = 0;
                int v616 = v941;
                do
                {
                  if (v821)
                  {
                    uint64_t v667 = v618;
                    v619(v609, v606, v618, v595, v922, v604);
                    uint64_t v668 = v606 + v592;
                    uint64_t v669 = v609 + v592;
                    if (v616 < 1)
                    {
                      v671 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v981;
                      uint64_t v672 = v922;
                    }
                    else
                    {
                      int v670 = v616;
                      v671 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v981;
                      uint64_t v672 = v922;
                      do
                      {
                        v981(v669, v668, v667, v599, v922, v604);
                        v668 += v927;
                        v669 += v592;
                        --v670;
                      }
                      while (v670);
                    }
                    uint64_t v673 = v668 + v929;
                    double result = v671(v669, v673, v667, v961, v672, v604);
                    uint64_t v609 = v669 + v592;
                    uint64_t v606 = v673 + v924 + v891;
                    uint64_t v618 = v667;
                    uint64_t v602 = v968;
                  }
                  if (v938 < 1)
                  {
                    uint64_t v595 = v961;
                    int v616 = v941;
                  }
                  else
                  {
                    int v674 = 0;
                    uint64_t v595 = v961;
                    int v616 = v941;
                    do
                    {
                      int v978 = v674;
                      if (v821)
                      {
                        double result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v981)(v609, v606, v618, v595, v602, v604);
                        v606 += v592;
                        v609 += v592;
                      }
                      if (v616 >= 1)
                      {
                        do
                        {
                          double result = ((uint64_t (*)(uint64_t, uint64_t, void, void, void, void))v981)(v609, v606, v970, v963, v968, v966);
                          v606 += v927;
                          v609 += v962;
                          --v616;
                        }
                        while (v616);
                      }
                      if (v821)
                      {
                        uint64_t v675 = v606 + v929;
                        uint64_t v618 = v970;
                        uint64_t v595 = v961;
                        uint64_t v602 = v968;
                        uint64_t v604 = v966;
                        double result = ((uint64_t (*)(uint64_t, uint64_t, void, uint64_t, void, void))v981)(v609, v675, v970, v961, v968, v966);
                        uint64_t v606 = v675 + v924;
                        uint64_t v592 = v962;
                        v609 += v962;
                        uint64_t v599 = v963;
                      }
                      else
                      {
                        uint64_t v618 = v970;
                        uint64_t v595 = v961;
                        uint64_t v604 = v966;
                        uint64_t v599 = v963;
                        uint64_t v602 = v968;
                        uint64_t v592 = v962;
                      }
                      int v616 = v941;
                      v606 += v934;
                      int v674 = v978 + 1;
                    }
                    while (v978 + 1 != v938);
                  }
                  if (v821)
                  {
                    uint64_t v676 = v606 + v879;
                    uint64_t v677 = v618;
                    v981(v609, v676, v618, v595, v922, v604);
                    uint64_t v678 = v676 + v592;
                    uint64_t v679 = v609 + v592;
                    if (v616 < 1)
                    {
                      v681 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v981;
                      uint64_t v682 = v922;
                    }
                    else
                    {
                      int v680 = v616;
                      v681 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v981;
                      uint64_t v682 = v922;
                      do
                      {
                        v981(v679, v678, v677, v599, v922, v604);
                        v678 += v927;
                        v679 += v592;
                        --v680;
                      }
                      while (v680);
                    }
                    uint64_t v683 = v678 + v929;
                    double result = v681(v679, v683, v677, v961, v682, v604);
                    uint64_t v609 = v679 + v592;
                    uint64_t v606 = v683 + v924 + v877;
                    v619 = (void (*)(void, void, void, void, void, void))v681;
                    uint64_t v595 = v961;
                    int v616 = v941;
                    uint64_t v618 = v677;
                    uint64_t v602 = v968;
                  }
                  else
                  {
                    v619 = v981;
                  }
                  v606 += v893;
                  ++v897;
                }
                while (v897 != v895);
              }
              if (v821)
              {
                uint64_t v684 = v606 - v901;
                v685 = v619;
                v619(v609, v684, v618, v595, v922, v901);
                if (v616 < 1)
                {
                  uint64_t v687 = v684 + v592;
                  uint64_t v686 = v609 + v592;
                  v688 = v685;
                }
                else
                {
                  do
                  {
                    v609 += v592;
                    v981(v609, v684 + v592, v618, v599, v922, v901);
                    v684 += v927;
                    --v616;
                  }
                  while (v616);
                  uint64_t v686 = v609 + v592;
                  uint64_t v687 = v684 + v592;
                  v688 = v981;
                  uint64_t v595 = v961;
                  int v616 = v941;
                }
                uint64_t v689 = v687 + v929;
                uint64_t v690 = v618;
                v688(v686, v687 + v929, v618, v595, v922, v901);
                uint64_t v691 = v689 + v924 + v891;
                uint64_t v692 = v609 + 2 * v592;
                if (v938 < 1)
                {
                  uint64_t v694 = v961;
                  v695 = v981;
                  uint64_t v696 = v901;
                  uint64_t v697 = v690;
                }
                else
                {
                  int v693 = 0;
                  uint64_t v694 = v961;
                  v695 = v981;
                  uint64_t v696 = v901;
                  uint64_t v697 = v690;
                  uint64_t v698 = v968;
                  do
                  {
                    int v979 = v693;
                    v695(v692, v691, v697, v694, v698, v696);
                    if (v616 < 1)
                    {
                      uint64_t v702 = v691 + v592;
                      uint64_t v701 = v692 + v592;
                      uint64_t v703 = v697;
                      uint64_t v700 = v901;
                      uint64_t v698 = v968;
                    }
                    else
                    {
                      uint64_t v699 = v697;
                      uint64_t v700 = v901;
                      uint64_t v698 = v968;
                      do
                      {
                        v692 += v592;
                        v981(v692, v691 + v592, v699, v599, v968, v901);
                        v691 += v927;
                        --v616;
                      }
                      while (v616);
                      uint64_t v701 = v692 + v592;
                      uint64_t v702 = v691 + v592;
                      uint64_t v703 = v699;
                      int v616 = v941;
                    }
                    uint64_t v704 = v702 + v929;
                    uint64_t v694 = v961;
                    v695 = v981;
                    v981(v701, v702 + v929, v703, v961, v698, v700);
                    uint64_t v696 = v700;
                    uint64_t v697 = v970;
                    uint64_t v691 = v704 + v924 + v934;
                    int v693 = v979 + 1;
                    v692 += v592 + v592;
                  }
                  while (v979 + 1 != v938);
                }
                uint64_t v705 = v691 + v879;
                v695(v692, v705, v697, v694, v922, v696);
                uint64_t v706 = v705 + v592;
                uint64_t v609 = v692 + v592;
                if (v616 < 1)
                {
                  v708 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v981;
                  uint64_t v709 = v901;
                  uint64_t v710 = v922;
                  uint64_t v654 = v970;
                }
                else
                {
                  int v707 = v616;
                  v708 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v981;
                  uint64_t v709 = v901;
                  uint64_t v710 = v922;
                  uint64_t v654 = v970;
                  do
                  {
                    v981(v609, v706, v970, v599, v922, v901);
                    v706 += v927;
                    v609 += v592;
                    --v707;
                  }
                  while (v707);
                }
                uint64_t v606 = v706 + v929;
                double result = v708(v609, v606, v654, v961, v710, v709);
                v619 = (void (*)(void, void, void, void, void, void))v708;
                uint64_t v595 = v961;
                uint64_t v604 = v966;
                goto LABEL_628;
              }
              uint64_t v620 = v927;
            }
            else
            {
              if (v787 != 2)
              {
                if (v821)
                {
                  double result = v872(v609, v606, v618, v595);
                  v606 += v592;
                  v609 += v592;
                }
                if (v616 >= 1)
                {
                  do
                  {
                    double result = v872(v609, v606, v970, v599);
                    v606 += v620;
                    v609 += v592;
                    --v616;
                  }
                  while (v616);
                }
                if (v821)
                {
                  uint64_t v621 = v606 + v929;
                  uint64_t v618 = v970;
                  uint64_t v595 = v961;
                  double result = v872(v609, v621, v970, v961);
                  uint64_t v606 = v621 + v924;
                  v609 += v592;
                  v619 = v981;
                }
                else
                {
                  uint64_t v618 = v970;
                  v619 = v981;
                  uint64_t v595 = v961;
                }
                int v616 = v941;
                goto LABEL_629;
              }
              if (v821)
              {
                uint64_t v629 = v618;
                v898(v609, v606, v618, v595, v922);
                uint64_t v630 = v606 + v592;
                uint64_t v631 = v609 + v592;
                if (v616 < 1)
                {
                  v633 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v898;
                }
                else
                {
                  int v632 = v616;
                  v633 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v898;
                  do
                  {
                    v898(v631, v630, v629, v599, v922);
                    v630 += v927;
                    v631 += v592;
                    --v632;
                  }
                  while (v632);
                }
                uint64_t v650 = v630 + v929;
                double result = v633(v631, v650, v629, v595, v922);
                uint64_t v609 = v631 + v592;
                uint64_t v606 = v650 + v924 + v891;
                uint64_t v620 = v927;
                uint64_t v618 = v629;
                uint64_t v602 = v968;
              }
              if (v938 >= 1)
              {
                int v651 = 0;
                do
                {
                  int v977 = v651;
                  if (v821)
                  {
                    double result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v898)(v609, v606, v618, v595, v602);
                    v606 += v592;
                    v609 += v592;
                  }
                  if (v616 >= 1)
                  {
                    do
                    {
                      double result = ((uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))v898)(v609, v606, v970, v599, v602);
                      v606 += v620;
                      v609 += v592;
                      --v616;
                    }
                    while (v616);
                  }
                  if (v821)
                  {
                    uint64_t v652 = v606 + v929;
                    uint64_t v618 = v970;
                    uint64_t v595 = v961;
                    double result = ((uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))v898)(v609, v652, v970, v961, v602);
                    uint64_t v606 = v652 + v924;
                    v609 += v592;
                  }
                  else
                  {
                    uint64_t v618 = v970;
                    uint64_t v595 = v961;
                  }
                  int v616 = v941;
                  v606 += v934;
                  int v651 = v977 + 1;
                }
                while (v977 + 1 != v938);
              }
              if (v821)
              {
                uint64_t v653 = v606 + v879;
                uint64_t v654 = v618;
                v898(v609, v653, v618, v595, v922);
                uint64_t v655 = v653 + v592;
                uint64_t v656 = v609 + v592;
                if (v616 < 1)
                {
                  v658 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v898;
                }
                else
                {
                  int v657 = v616;
                  v658 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v898;
                  do
                  {
                    v898(v656, v655, v654, v599, v922);
                    v655 += v927;
                    v656 += v592;
                    --v657;
                  }
                  while (v657);
                }
                uint64_t v665 = v655 + v929;
                double result = v658(v656, v665, v654, v595, v922);
                uint64_t v609 = v656 + v592;
                uint64_t v606 = v665 + v924 + v877;
                v619 = v981;
LABEL_628:
                uint64_t v620 = v927;
                uint64_t v618 = v654;
                uint64_t v602 = v968;
                goto LABEL_629;
              }
              v619 = v981;
            }
LABEL_629:
            if (++v875 == v873) {
              goto LABEL_630;
            }
          }
        }
LABEL_471:
        int v38 = a4;
        goto LABEL_487;
      }
      int v38 = a4;
      if (v11 == 35899)
      {
        char v43 = 0;
        uint64_t v44 = 4;
        uint64_t v45 = glePackedFloatFilter3;
        v898 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))glePackedFloatFilter2;
        __int16 v47 = glePackedFloatFilter1;
        goto LABEL_486;
      }
    }
LABEL_474:
    int v974 = v38 + 1;
    goto LABEL_642;
  }
  return result;
}

uint64_t gleGenSurfaceMipmaps(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if ((*(_WORD *)(a2 + 768) & 0xF) == 2 || !*(_DWORD *)(a2 + 780)) {
    return 0;
  }
  int v10 = (unsigned __int8 *)(a1 + 32499);
  if ((*(_DWORD *)(a1 + 1672 * *(unsigned __int8 *)(a1 + 32499) + 34176) & 0x7F00) != 0x400)
  {
    gleGenerateEmptyMipmaps(a1, a2, a3, 0, a4, 0, 18);
    if (a5) {
      (*(void (**)(void, void, uint64_t, void))(*(void *)(a1 + 29448) + 320))(*(void *)(a1 + 29016), *(void *)(a2 + 8 * *v10), a3, 0);
    }
    return 1;
  }
  uint64_t v11 = *(void *)(a2 + 784);
  if (!v11) {
    return 0;
  }
  int v12 = *(unsigned __int16 *)(a2 + 774);
  if (v12 == 1028)
  {
    int v13 = *(unsigned __int16 *)(v11 + 28);
    uint64_t v14 = *(void *)(v11 + 48);
LABEL_17:
    uint64_t v15 = (void *)(v11 + 32);
    goto LABEL_18;
  }
  if (v12 == 1029)
  {
    int v13 = *(unsigned __int16 *)(v11 + 28);
    uint64_t v14 = *(void *)(v11 + 56);
    goto LABEL_17;
  }
  if (v12 != 6145)
  {
    int v13 = *(unsigned __int16 *)(v11 + 28);
    unsigned int v17 = v12 - 1033;
    if (v17 > 3) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = *(void *)(v11 + 8 * v17 + 72);
    }
    goto LABEL_17;
  }
  int v13 = *(unsigned __int16 *)(v11 + 30);
  uint64_t v14 = *(void *)(v11 + 64);
  uint64_t v15 = (void *)(v11 + 40);
LABEL_18:
  v18.i64[0] = *(void *)v11;
  if (*v15) {
    BOOL v19 = v14 == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19)
  {
    uint64_t v20 = 0;
  }
  else
  {
    int v21 = v18.i32[1] * a3 * ((v18.i32[0] * v13 + 15) & 0xFFFFFFF0);
    if (*(_DWORD *)(v11 + 8) != 34067) {
      int v21 = 0;
    }
    uint64_t v20 = v14 + v21;
  }
  int v22 = a3;
  uint64_t v23 = a2 + 480 * (int)a3;
  *(void *)(v23 + 1056) = v20;
  v18.i64[1] = *(void *)(v11 + 12);
  *(int16x4_t *)(v23 + 1044) = vmovn_s32(v18);
  gleGenerateEmptyMipmaps(a1, a2, a3, 0, a4, v20, 19);
  if (a4 >= 2)
  {
    int v25 = *(_DWORD *)(v11 + 4);
    int v24 = *(_DWORD *)(v11 + 8);
    if (v24 == 34067) {
      int v26 = 6;
    }
    else {
      int v26 = 1;
    }
    int v27 = *(unsigned __int16 *)(a2 + 774);
    int v28 = *(_DWORD *)v11;
    uint64_t v29 = 1;
    do
    {
      int v30 = (uint64_t *)(v11 + 64);
      int v31 = (unsigned __int16 *)(v11 + 30);
      int v32 = (void *)(v11 + 40);
      if (v27 != 6145)
      {
        int v30 = (uint64_t *)(v11 + 56);
        int v31 = (unsigned __int16 *)(v11 + 28);
        int v32 = (void *)(v11 + 32);
        if (v27 != 1029)
        {
          int v30 = (uint64_t *)(v11 + 48);
          int v31 = (unsigned __int16 *)(v11 + 28);
          int v32 = (void *)(v11 + 32);
          if (v27 != 1028)
          {
            int v30 = (uint64_t *)(v11 + 8 * (v27 - 1033) + 72);
            int v31 = (unsigned __int16 *)(v11 + 28);
            int v32 = (void *)(v11 + 32);
            if ((v27 - 1033) > 3) {
              goto LABEL_41;
            }
          }
        }
      }
      uint64_t v33 = *v30;
      if (*v32 && v33 != 0)
      {
        int v36 = *v31;
        uint64_t v37 = v29;
        int v38 = v28;
        int v39 = v25;
        do
        {
          v33 += (int)(v39 * v26 * ((v38 * v36 + 15) & 0xFFFFFFF0));
          v38 >>= 1;
          v39 >>= 1;
          --v37;
        }
        while (v37);
        uint64_t v35 = v33 + (int)(v39 * a3 * ((v38 * v36 + 15) & 0xFFFFFFF0));
        if (v24 != 34067) {
          uint64_t v35 = v33;
        }
      }
      else
      {
LABEL_41:
        uint64_t v35 = 0;
      }
      *(void *)(a2 + 480 * v22 + 32 * v29++ + 1056) = v35;
    }
    while (v29 != a4);
  }
  if (a5) {
    gleGenerateMipmapData(a1, a2, a3, 0, a4);
  }
  if (a4 >= 1)
  {
    uint64_t v40 = a4;
    int v41 = (void *)(a2 + 480 * v22 + 1056);
    do
    {
      *int v41 = 0;
      v41 += 4;
      --v40;
    }
    while (v40);
  }
  return 1;
}

unsigned char *gleUbyteFilter1(unsigned char *result, unsigned __int8 *a2, int a3, int a4)
{
  if (a3 >= 1)
  {
    uint64_t v4 = a3;
    do
    {
      *result++ = (a2[a4] + *a2) >> 1;
      ++a2;
      --v4;
    }
    while (v4);
  }
  return result;
}

unsigned char *gleUbyteFilter2(unsigned char *result, unsigned __int8 *a2, int a3, int a4, int a5)
{
  if (a3 >= 1)
  {
    uint64_t v5 = a3;
    do
    {
      *result++ = (a2[a4] + *a2 + a2[a5] + a2[a5 + (uint64_t)a4]) >> 2;
      ++a2;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t gleUbyteFilter3(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6)
{
  if (a3 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a6 + (uint64_t)a5;
    uint64_t v8 = a2 + v7;
    uint64_t v9 = a2 + v7 + a4;
    do
    {
      *(unsigned char *)(result + v6) = (*(unsigned __int8 *)(a2 + a4 + v6)
                               + *(unsigned __int8 *)(a2 + v6)
                               + *(unsigned __int8 *)(a2 + a5 + v6)
                               + *(unsigned __int8 *)(a2 + a5 + (uint64_t)a4 + v6)
                               + *(unsigned __int8 *)(a2 + a6 + v6)
                               + *(unsigned __int8 *)(a2 + a6 + (uint64_t)a4 + v6)
                               + *(unsigned __int8 *)(v8 + v6)
                               + *(unsigned __int8 *)(v9 + v6)) >> 3;
      ++v6;
    }
    while (a3 != v6);
  }
  return result;
}

uint64_t gleUbyteFilterBox(uint64_t result, unsigned __int8 *a2, int a3, int a4, unsigned int a5, int a6, int a7)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  signed int v7 = 0xFFFFFFFF / a5 * a6;
  int v8 = (v7 >> 16) + 1;
  int v9 = ~(v7 >> 16);
  int v10 = v9 - ((int)(0xFFFFFFFF / a5 * (a6 - a7)) >> 16) + 0x10000;
  signed int v11 = 0xFFFFFFFF / a5 + 0xFFFFFFFF / a5 * a7;
  int v12 = v9 - (v11 >> 16);
  int v13 = v11 >> 16;
  int v14 = v12 + 0x10000;
  if (a6 <= 2 * a7) {
    int v13 = v10;
  }
  v19[1] = v8;
  v19[2] = v13;
  if (a6 <= 2 * a7) {
    int v14 = (int)(0xFFFFFFFF / a5 * (a6 - a7)) >> 16;
  }
  v19[0] = v14;
  if (a3 >= 1)
  {
    uint64_t v15 = 0;
    do
    {
      uint64_t v16 = 0;
      int v17 = 0;
      int32x4_t v18 = a2;
      do
      {
        v17 += v19[v16] * *v18;
        v18 += a4;
        ++v16;
      }
      while (v16 != 3);
      *(unsigned char *)(result + v15++) = BYTE2(v17);
      ++a2;
    }
    while (v15 != a3);
  }
  return result;
}

unsigned char *gleByteFilter1(unsigned char *result, char *a2, int a3, int a4)
{
  if (a3 >= 1)
  {
    uint64_t v4 = a3;
    do
    {
      *result++ = (a2[a4] + *a2) >> 1;
      ++a2;
      --v4;
    }
    while (v4);
  }
  return result;
}

unsigned char *gleByteFilter2(unsigned char *result, char *a2, int a3, int a4, int a5)
{
  if (a3 >= 1)
  {
    uint64_t v5 = a3;
    do
    {
      *result++ = (a2[a4] + *a2 + a2[a5] + a2[a5 + (uint64_t)a4]) >> 2;
      ++a2;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t gleByteFilter3(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6)
{
  if (a3 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a6 + (uint64_t)a5;
    uint64_t v8 = a2 + v7;
    uint64_t v9 = a2 + v7 + a4;
    do
    {
      *(unsigned char *)(result + v6) = (*(char *)(a2 + a4 + v6)
                                             + *(char *)(a2 + v6)
                                             + *(char *)(a2 + a5 + v6)
                                             + *(char *)(a2 + a5 + (uint64_t)a4 + v6)
                                             + *(char *)(a2 + a6 + v6)
                                             + *(char *)(a2 + a6 + (uint64_t)a4 + v6)
                                             + *(char *)(v8 + v6)
                                             + *(char *)(v9 + v6)) >> 3;
      ++v6;
    }
    while (a3 != v6);
  }
  return result;
}

uint64_t gleByteFilterBox(uint64_t result, char *a2, int a3, int a4, unsigned int a5, int a6, int a7)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  signed int v7 = 0xFFFFFFFF / a5 * a6;
  int v8 = (v7 >> 16) + 1;
  int v9 = ~(v7 >> 16);
  int v10 = v9 - ((int)(0xFFFFFFFF / a5 * (a6 - a7)) >> 16) + 0x10000;
  signed int v11 = 0xFFFFFFFF / a5 + 0xFFFFFFFF / a5 * a7;
  int v12 = v9 - (v11 >> 16);
  int v13 = v11 >> 16;
  int v14 = v12 + 0x10000;
  if (a6 <= 2 * a7) {
    int v13 = v10;
  }
  v19[1] = v8;
  v19[2] = v13;
  if (a6 <= 2 * a7) {
    int v14 = (int)(0xFFFFFFFF / a5 * (a6 - a7)) >> 16;
  }
  v19[0] = v14;
  if (a3 >= 1)
  {
    uint64_t v15 = 0;
    do
    {
      uint64_t v16 = 0;
      int v17 = 0;
      int32x4_t v18 = a2;
      do
      {
        v17 += v19[v16] * *v18;
        v18 += a4;
        ++v16;
      }
      while (v16 != 3);
      *(unsigned char *)(result + v15++) = BYTE2(v17);
      ++a2;
    }
    while (v15 != a3);
  }
  return result;
}

uint64_t gleUshortFilter1(uint64_t result, uint64_t a2, int a3, int a4)
{
  unint64_t v4 = (2 * a3);
  if ((int)v4 >= 1)
  {
    for (unint64_t i = 0; i < v4; i += 2)
      *(_WORD *)(result + i) = (*(unsigned __int16 *)(a2 + a4 + i) + *(unsigned __int16 *)(a2 + i)) >> 1;
  }
  return result;
}

uint64_t gleUshortFilter2(uint64_t result, uint64_t a2, int a3, int a4, int a5)
{
  unint64_t v5 = (2 * a3);
  if ((int)v5 >= 1)
  {
    for (unint64_t i = 0; i < v5; i += 2)
      *(_WORD *)(result + i) = (*(unsigned __int16 *)(a2 + a4 + i)
                              + *(unsigned __int16 *)(a2 + i)
                              + *(unsigned __int16 *)(a2 + a5 + i)
                              + *(unsigned __int16 *)(a2 + a5 + a4 + i)) >> 2;
  }
  return result;
}

uint64_t gleUshortFilter3(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6)
{
  unint64_t v6 = (2 * a3);
  if ((int)v6 >= 1)
  {
    unint64_t v7 = 0;
    uint64_t v8 = a6 + (uint64_t)a5;
    uint64_t v9 = a2 + v8;
    uint64_t v10 = a2 + v8 + a4;
    do
    {
      *(_WORD *)(result + v7) = (*(unsigned __int16 *)(a2 + a4 + v7)
                               + *(unsigned __int16 *)(a2 + v7)
                               + *(unsigned __int16 *)(a2 + a5 + v7)
                               + *(unsigned __int16 *)(a2 + a5 + (uint64_t)a4 + v7)
                               + *(unsigned __int16 *)(a2 + a6 + v7)
                               + *(unsigned __int16 *)(a2 + a6 + (uint64_t)a4 + v7)
                               + *(unsigned __int16 *)(v9 + v7)
                               + *(unsigned __int16 *)(v10 + v7)) >> 3;
      v7 += 2;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t gleUshortFilterBox(uint64_t result, unsigned __int16 *a2, int a3, int a4, unsigned int a5, int a6, int a7)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  signed int v7 = 0xFFFFFFFF / a5 * a6;
  int v8 = (v7 >> 16) + 1;
  int v9 = ~(v7 >> 16);
  int v10 = v9 - ((int)(0xFFFFFFFF / a5 * (a6 - a7)) >> 16) + 0x10000;
  signed int v11 = 0xFFFFFFFF / a5 + 0xFFFFFFFF / a5 * a7;
  int v12 = v9 - (v11 >> 16);
  int v13 = v11 >> 16;
  int v14 = v12 + 0x10000;
  if (a6 <= 2 * a7)
  {
    int v13 = v10;
    int v14 = (int)(0xFFFFFFFF / a5 * (a6 - a7)) >> 16;
  }
  v20[1] = v8;
  v20[2] = v13;
  v20[0] = v14;
  unint64_t v15 = (2 * a3);
  if ((int)v15 >= 1)
  {
    for (unint64_t i = 0; i < v15; i += 2)
    {
      uint64_t v17 = 0;
      int v18 = 0;
      BOOL v19 = a2;
      do
      {
        v18 += v20[v17] * *v19;
        BOOL v19 = (unsigned __int16 *)((char *)v19 + a4);
        ++v17;
      }
      while (v17 != 3);
      *(_WORD *)(result + i) = HIWORD(v18);
      ++a2;
    }
  }
  return result;
}

uint64_t gleShortFilter1(uint64_t result, uint64_t a2, int a3, int a4)
{
  unint64_t v4 = (2 * a3);
  if ((int)v4 >= 1)
  {
    for (unint64_t i = 0; i < v4; i += 2)
      *(_WORD *)(result + i) = (*(__int16 *)(a2 + a4 + i) + *(__int16 *)(a2 + i)) >> 1;
  }
  return result;
}

uint64_t gleShortFilter2(uint64_t result, uint64_t a2, int a3, int a4, int a5)
{
  unint64_t v5 = (2 * a3);
  if ((int)v5 >= 1)
  {
    for (unint64_t i = 0; i < v5; i += 2)
      *(_WORD *)(result + i) = (*(__int16 *)(a2 + a4 + i)
                                            + *(__int16 *)(a2 + i)
                                            + *(__int16 *)(a2 + a5 + i)
                                            + *(__int16 *)(a2 + a5 + a4 + i)) >> 2;
  }
  return result;
}

uint64_t gleShortFilter3(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6)
{
  unint64_t v6 = (2 * a3);
  if ((int)v6 >= 1)
  {
    unint64_t v7 = 0;
    uint64_t v8 = a6 + (uint64_t)a5;
    uint64_t v9 = a2 + v8;
    uint64_t v10 = a2 + v8 + a4;
    do
    {
      *(_WORD *)(result + v7) = (*(__int16 *)(a2 + a4 + v7)
                                             + *(__int16 *)(a2 + v7)
                                             + *(__int16 *)(a2 + a5 + v7)
                                             + *(__int16 *)(a2 + a5 + (uint64_t)a4 + v7)
                                             + *(__int16 *)(a2 + a6 + v7)
                                             + *(__int16 *)(a2 + a6 + (uint64_t)a4 + v7)
                                             + *(__int16 *)(v9 + v7)
                                             + *(__int16 *)(v10 + v7)) >> 3;
      v7 += 2;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t gleShortFilterBox(uint64_t result, __int16 *a2, int a3, int a4, unsigned int a5, int a6, int a7)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  signed int v7 = 0xFFFFFFFF / a5 * a6;
  int v8 = (v7 >> 16) + 1;
  int v9 = ~(v7 >> 16);
  int v10 = v9 - ((int)(0xFFFFFFFF / a5 * (a6 - a7)) >> 16) + 0x10000;
  signed int v11 = 0xFFFFFFFF / a5 + 0xFFFFFFFF / a5 * a7;
  int v12 = v9 - (v11 >> 16);
  int v13 = v11 >> 16;
  int v14 = v12 + 0x10000;
  if (a6 <= 2 * a7)
  {
    int v13 = v10;
    int v14 = (int)(0xFFFFFFFF / a5 * (a6 - a7)) >> 16;
  }
  v20[1] = v8;
  v20[2] = v13;
  v20[0] = v14;
  unint64_t v15 = (2 * a3);
  if ((int)v15 >= 1)
  {
    for (unint64_t i = 0; i < v15; i += 2)
    {
      uint64_t v17 = 0;
      int v18 = 0;
      BOOL v19 = a2;
      do
      {
        v18 += v20[v17] * *v19;
        BOOL v19 = (__int16 *)((char *)v19 + a4);
        ++v17;
      }
      while (v17 != 3);
      *(_WORD *)(result + i) = HIWORD(v18);
      ++a2;
    }
  }
  return result;
}

uint64_t gleUintFilter1(uint64_t result, uint64_t a2, int a3, int a4)
{
  unint64_t v4 = (4 * a3);
  if ((int)v4 >= 1)
  {
    for (unint64_t i = 0; i < v4; i += 4)
      *(_DWORD *)(result + i) = (*(unsigned int *)(a2 + a4 + i) + (unint64_t)*(unsigned int *)(a2 + i)) >> 1;
  }
  return result;
}

uint64_t gleUintFilter2(uint64_t result, uint64_t a2, int a3, int a4, int a5)
{
  unint64_t v5 = (4 * a3);
  if ((int)v5 >= 1)
  {
    for (unint64_t i = 0; i < v5; i += 4)
      *(_DWORD *)(result + i) = (*(unsigned int *)(a2 + a4 + i)
                               + (unint64_t)*(unsigned int *)(a2 + i)
                               + *(unsigned int *)(a2 + a5 + i)
                               + (unint64_t)*(unsigned int *)(a2 + a5 + a4 + i)) >> 2;
  }
  return result;
}

uint64_t gleUintFilter3(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6)
{
  unint64_t v6 = (4 * a3);
  if ((int)v6 >= 1)
  {
    unint64_t v7 = 0;
    uint64_t v8 = a6 + (uint64_t)a5;
    uint64_t v9 = a2 + v8;
    uint64_t v10 = a2 + v8 + a4;
    do
    {
      *(_DWORD *)(result + v7) = (*(unsigned int *)(a2 + a4 + v7)
                                + (unint64_t)*(unsigned int *)(a2 + v7)
                                + *(unsigned int *)(a2 + a5 + v7)
                                + (unint64_t)*(unsigned int *)(a2 + a5 + (uint64_t)a4 + v7)
                                + *(unsigned int *)(a2 + a6 + v7)
                                + (unint64_t)*(unsigned int *)(a2 + a6 + (uint64_t)a4 + v7)
                                + *(unsigned int *)(v9 + v7)
                                + *(unsigned int *)(v10 + v7)) >> 3;
      v7 += 4;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t gleUintFilterBox(uint64_t result, unsigned int *a2, int a3, int a4, unsigned int a5, int a6, int a7)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  signed int v7 = 0xFFFFFFFF / a5 * a6;
  int v8 = (v7 >> 16) + 1;
  int v9 = ~(v7 >> 16);
  int v10 = v9 - ((int)(0xFFFFFFFF / a5 * (a6 - a7)) >> 16) + 0x10000;
  signed int v11 = 0xFFFFFFFF / a5 + 0xFFFFFFFF / a5 * a7;
  int v12 = v9 - (v11 >> 16);
  int v13 = v11 >> 16;
  int v14 = v12 + 0x10000;
  if (a6 <= 2 * a7)
  {
    int v13 = v10;
    int v14 = (int)(0xFFFFFFFF / a5 * (a6 - a7)) >> 16;
  }
  v20[1] = v8;
  v20[2] = v13;
  v20[0] = v14;
  unint64_t v15 = (4 * a3);
  if ((int)v15 >= 1)
  {
    for (unint64_t i = 0; i < v15; i += 4)
    {
      uint64_t v17 = 0;
      unint64_t v18 = 0;
      BOOL v19 = a2;
      do
      {
        v18 += *v19 * (uint64_t)(int)v20[v17];
        BOOL v19 = (unsigned int *)((char *)v19 + a4);
        ++v17;
      }
      while (v17 != 3);
      *(_DWORD *)(result + i) = v18 >> 16;
      ++a2;
    }
  }
  return result;
}

uint64_t gleIntFilter1(uint64_t result, uint64_t a2, int a3, int a4)
{
  unint64_t v4 = (4 * a3);
  if ((int)v4 >= 1)
  {
    for (unint64_t i = 0; i < v4; i += 4)
      *(_DWORD *)(result + i) = (unint64_t)(*(int *)(a2 + a4 + i) + (uint64_t)*(int *)(a2 + i)) >> 1;
  }
  return result;
}

uint64_t gleIntFilter2(uint64_t result, uint64_t a2, int a3, int a4, int a5)
{
  unint64_t v5 = (4 * a3);
  if ((int)v5 >= 1)
  {
    for (unint64_t i = 0; i < v5; i += 4)
      *(_DWORD *)(result + i) = (unint64_t)(*(int *)(a2 + a4 + i)
                                                 + (uint64_t)*(int *)(a2 + i)
                                                 + *(int *)(a2 + a5 + i)
                                                 + (uint64_t)*(int *)(a2 + a5 + a4 + i)) >> 2;
  }
  return result;
}

uint64_t gleIntFilter3(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6)
{
  unint64_t v6 = (4 * a3);
  if ((int)v6 >= 1)
  {
    unint64_t v7 = 0;
    uint64_t v8 = a6 + (uint64_t)a5;
    uint64_t v9 = a2 + v8;
    uint64_t v10 = a2 + v8 + a4;
    do
    {
      *(_DWORD *)(result + v7) = (unint64_t)(*(int *)(a2 + a4 + v7)
                                                  + (uint64_t)*(int *)(a2 + v7)
                                                  + *(int *)(a2 + a5 + v7)
                                                  + (uint64_t)*(int *)(a2 + a5 + (uint64_t)a4 + v7)
                                                  + *(int *)(a2 + a6 + v7)
                                                  + (uint64_t)*(int *)(a2 + a6 + (uint64_t)a4 + v7)
                                                  + *(int *)(v9 + v7)
                                                  + *(int *)(v10 + v7)) >> 3;
      v7 += 4;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t gleIntFilterBox(uint64_t result, int *a2, int a3, int a4, unsigned int a5, int a6, int a7)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  signed int v7 = 0xFFFFFFFF / a5 * a6;
  int v8 = (v7 >> 16) + 1;
  int v9 = ~(v7 >> 16);
  int v10 = v9 - ((int)(0xFFFFFFFF / a5 * (a6 - a7)) >> 16) + 0x10000;
  signed int v11 = 0xFFFFFFFF / a5 + 0xFFFFFFFF / a5 * a7;
  int v12 = v9 - (v11 >> 16);
  int v13 = v11 >> 16;
  int v14 = v12 + 0x10000;
  if (a6 <= 2 * a7)
  {
    int v13 = v10;
    int v14 = (int)(0xFFFFFFFF / a5 * (a6 - a7)) >> 16;
  }
  v20[1] = v8;
  v20[2] = v13;
  v20[0] = v14;
  unint64_t v15 = (4 * a3);
  if ((int)v15 >= 1)
  {
    for (unint64_t i = 0; i < v15; i += 4)
    {
      uint64_t v17 = 0;
      unint64_t v18 = 0;
      BOOL v19 = a2;
      do
      {
        v18 += *v19 * (uint64_t)(int)v20[v17++];
        BOOL v19 = (int *)((char *)v19 + a4);
      }
      while (v17 != 3);
      *(_DWORD *)(result + i) = v18 >> 16;
      ++a2;
    }
  }
  return result;
}

uint64_t gleFloatFilter1(uint64_t result, uint64_t a2, int a3, int a4)
{
  unint64_t v4 = (4 * a3);
  if ((int)v4 >= 1)
  {
    for (unint64_t i = 0; i < v4; i += 4)
      *(float *)(result + i) = (float)(*(float *)(a2 + i) + *(float *)(a2 + a4 + i)) * 0.5;
  }
  return result;
}

uint64_t gleFloatFilter2(uint64_t result, uint64_t a2, int a3, int a4, int a5)
{
  unint64_t v5 = (4 * a3);
  if ((int)v5 >= 1)
  {
    for (unint64_t i = 0; i < v5; i += 4)
      *(float *)(result + i) = (float)((float)((float)(*(float *)(a2 + i) + *(float *)(a2 + a4 + i))
                                             + *(float *)(a2 + a5 + i))
                                     + *(float *)(a2 + a5 + a4 + i))
                             * 0.25;
  }
  return result;
}

uint64_t gleFloatFilter3(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6)
{
  unint64_t v6 = (4 * a3);
  if ((int)v6 >= 1)
  {
    unint64_t v7 = 0;
    uint64_t v8 = a6 + (uint64_t)a5;
    uint64_t v9 = a2 + v8;
    uint64_t v10 = a2 + v8 + a4;
    do
    {
      *(float *)(result + v7) = (float)((float)((float)((float)((float)((float)((float)(*(float *)(a2 + v7)
                                                                                      + *(float *)(a2 + a4 + v7))
                                                                              + *(float *)(a2 + a5 + v7))
                                                                      + *(float *)(a2 + a5 + (uint64_t)a4 + v7))
                                                              + *(float *)(a2 + a6 + v7))
                                                      + *(float *)(a2 + a6 + (uint64_t)a4 + v7))
                                              + *(float *)(v9 + v7))
                                      + *(float *)(v10 + v7))
                              * 0.125;
      v7 += 4;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t gleFloatFilterBox(uint64_t result, float *a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  float v7 = 1.0 / (float)a5;
  v13[0] = v7 * (float)(a6 - a7);
  v13[1] = v7 * (float)a6;
  v13[2] = v7 * (float)(a7 + 1);
  unint64_t v8 = (4 * a3);
  if ((int)v8 >= 1)
  {
    for (unint64_t i = 0; i < v8; i += 4)
    {
      uint64_t v10 = 0;
      float v11 = 0.0;
      int v12 = a2;
      do
      {
        float v11 = v11 + (float)(v13[v10] * *v12);
        int v12 = (float *)((char *)v12 + a4);
        ++v10;
      }
      while (v10 != 3);
      *(float *)(result + i) = v11;
      ++a2;
    }
  }
  return result;
}

uint64_t gleHalfFloatFilter1(uint64_t result, uint64_t a2, int a3, int a4)
{
  unint64_t v4 = (2 * a3);
  if ((int)v4 >= 1)
  {
    unint64_t v5 = 0;
    uint64_t v6 = a2 + a4;
    while (1)
    {
      unsigned int v7 = *(unsigned __int16 *)(a2 + v5);
      unsigned int v8 = v7 & 0x3FF;
      int v9 = v7 & 0x7C00;
      if ((v7 & 0x7C00) == 0) {
        break;
      }
      if (v9 != 31744)
      {
        int v13 = (v9 << 13) + 939524096;
LABEL_12:
        int v10 = v13 | (v8 << 13);
        goto LABEL_13;
      }
      if ((v7 & 0x3FF) != 0) {
        int v10 = 0x7FFFFFFF;
      }
      else {
        int v10 = 2139095040;
      }
LABEL_13:
      unsigned int v15 = *(unsigned __int16 *)(v6 + v5);
      unsigned int v16 = v15 & 0x3FF;
      int v17 = v15 & 0x7C00;
      if ((v15 & 0x7C00) != 0)
      {
        if (v17 == 31744)
        {
          if ((v15 & 0x3FF) != 0) {
            int v18 = 0x7FFFFFFF;
          }
          else {
            int v18 = 2139095040;
          }
          goto LABEL_23;
        }
        int v21 = (v17 << 13) + 939524096;
      }
      else
      {
        unsigned int v19 = __clz(v16);
        int v20 = v15 << (v19 - 21);
        int v21 = 1124073472 - (v19 << 23);
        int v22 = v20 & 0x3FE;
        if ((v15 & 0x3FF) != 0)
        {
          unsigned int v16 = v22;
        }
        else
        {
          int v21 = 0;
          unsigned int v16 = 0;
        }
      }
      int v18 = v21 | (v16 << 13);
LABEL_23:
      float v23 = (float)(COERCE_FLOAT(v10 & 0x7FFFFFFF | ((v7 >> 15) << 31))
                  + COERCE_FLOAT(v18 & 0x7FFFFFFF | ((v15 >> 15) << 31)))
          * 0.5;
      int v24 = HIWORD(LODWORD(v23));
      int v25 = HIWORD(LODWORD(v23)) & 0x8000;
      unsigned int v26 = LODWORD(v23) & 0x7F800000;
      int v27 = LODWORD(v23) & 0x7FFFFF;
      unsigned int v28 = (LODWORD(v23) >> 23);
      unsigned int v29 = v25 | (((v26 + 0x8000000) | v27) >> 13);
      unsigned int v30 = (v27 | 0x800000u) >> (((939524096 - v26) >> 23) + 14);
      if (v26 >> 23 < 0x5F) {
        LOWORD(v30) = 0;
      }
      __int16 v31 = v30 | v25;
      if (v26 <= 0x38000000) {
        LOWORD(v29) = v31;
      }
      if (v27) {
        BOOL v32 = v26 == 2139095040;
      }
      else {
        BOOL v32 = 0;
      }
      __int16 v33 = v25 | 0x7C00;
      __int16 v34 = v24 | 0x7FFF;
      if (!v32) {
        __int16 v34 = v33;
      }
      if (v28 >= 0x8F) {
        __int16 v35 = v34;
      }
      else {
        __int16 v35 = v29;
      }
      *(_WORD *)(result + v5) = v35;
      v5 += 2;
      if (v5 >= v4) {
        return result;
      }
    }
    unsigned int v11 = __clz(v8);
    int v12 = v7 << (v11 - 21);
    int v13 = 1124073472 - (v11 << 23);
    int v14 = v12 & 0x3FE;
    if ((v7 & 0x3FF) != 0)
    {
      unsigned int v8 = v14;
    }
    else
    {
      int v13 = 0;
      unsigned int v8 = 0;
    }
    goto LABEL_12;
  }
  return result;
}

uint64_t gleHalfFloatFilter2(uint64_t result, uint64_t a2, int a3, int a4, int a5)
{
  unint64_t v5 = (2 * a3);
  if ((int)v5 >= 1)
  {
    unint64_t v6 = 0;
    uint64_t v7 = a2 + a5;
    uint64_t v8 = v7 + a4;
    uint64_t v9 = a2 + a4;
    while (1)
    {
      unsigned int v10 = *(unsigned __int16 *)(a2 + v6);
      unsigned int v11 = v10 & 0x3FF;
      int v12 = v10 & 0x7C00;
      if ((v10 & 0x7C00) == 0) {
        break;
      }
      if (v12 != 31744)
      {
        int v16 = (v12 << 13) + 939524096;
LABEL_12:
        int v13 = v16 | (v11 << 13);
        goto LABEL_13;
      }
      if ((v10 & 0x3FF) != 0) {
        int v13 = 0x7FFFFFFF;
      }
      else {
        int v13 = 2139095040;
      }
LABEL_13:
      unsigned int v18 = *(unsigned __int16 *)(v9 + v6);
      unsigned int v19 = v18 & 0x3FF;
      int v20 = v18 & 0x7C00;
      if ((v18 & 0x7C00) == 0)
      {
        unsigned int v22 = __clz(v19);
        int v23 = v18 << (v22 - 21);
        int v24 = 1124073472 - (v22 << 23);
        int v25 = v23 & 0x3FE;
        if ((v18 & 0x3FF) != 0)
        {
          unsigned int v19 = v25;
        }
        else
        {
          int v24 = 0;
          unsigned int v19 = 0;
        }
        goto LABEL_22;
      }
      if (v20 != 31744)
      {
        int v24 = (v20 << 13) + 939524096;
LABEL_22:
        int v21 = v24 | (v19 << 13);
        goto LABEL_23;
      }
      if ((v18 & 0x3FF) != 0) {
        int v21 = 0x7FFFFFFF;
      }
      else {
        int v21 = 2139095040;
      }
LABEL_23:
      unsigned int v26 = *(unsigned __int16 *)(v7 + v6);
      unsigned int v27 = v26 & 0x3FF;
      int v28 = v26 & 0x7C00;
      if ((v26 & 0x7C00) == 0)
      {
        unsigned int v30 = __clz(v27);
        int v31 = v26 << (v30 - 21);
        int v32 = 1124073472 - (v30 << 23);
        int v33 = v31 & 0x3FE;
        if ((v26 & 0x3FF) != 0)
        {
          unsigned int v27 = v33;
        }
        else
        {
          int v32 = 0;
          unsigned int v27 = 0;
        }
        goto LABEL_32;
      }
      if (v28 != 31744)
      {
        int v32 = (v28 << 13) + 939524096;
LABEL_32:
        int v29 = v32 | (v27 << 13);
        goto LABEL_33;
      }
      if ((v26 & 0x3FF) != 0) {
        int v29 = 0x7FFFFFFF;
      }
      else {
        int v29 = 2139095040;
      }
LABEL_33:
      unsigned int v34 = *(unsigned __int16 *)(v8 + v6);
      unsigned int v35 = v34 & 0x3FF;
      int v36 = v34 & 0x7C00;
      if ((v34 & 0x7C00) != 0)
      {
        if (v36 == 31744)
        {
          if ((v34 & 0x3FF) != 0) {
            int v37 = 0x7FFFFFFF;
          }
          else {
            int v37 = 2139095040;
          }
          goto LABEL_43;
        }
        int v40 = (v36 << 13) + 939524096;
      }
      else
      {
        unsigned int v38 = __clz(v35);
        int v39 = v34 << (v38 - 21);
        int v40 = 1124073472 - (v38 << 23);
        int v41 = v39 & 0x3FE;
        if ((v34 & 0x3FF) != 0)
        {
          unsigned int v35 = v41;
        }
        else
        {
          int v40 = 0;
          unsigned int v35 = 0;
        }
      }
      int v37 = v40 | (v35 << 13);
LABEL_43:
      float v42 = (float)((float)((float)(COERCE_FLOAT(v13 & 0x7FFFFFFF | ((v10 >> 15) << 31))
                                  + COERCE_FLOAT(v21 & 0x7FFFFFFF | ((v18 >> 15) << 31)))
                          + COERCE_FLOAT(v29 & 0x7FFFFFFF | ((v26 >> 15) << 31)))
                  + COERCE_FLOAT(v37 & 0x7FFFFFFF | ((v34 >> 15) << 31)))
          * 0.25;
      int v43 = HIWORD(LODWORD(v42));
      int v44 = HIWORD(LODWORD(v42)) & 0x8000;
      unsigned int v45 = LODWORD(v42) & 0x7F800000;
      int v46 = LODWORD(v42) & 0x7FFFFF;
      unsigned int v47 = (LODWORD(v42) >> 23);
      unsigned int v48 = v44 | (((v45 + 0x8000000) | v46) >> 13);
      unsigned int v49 = (v46 | 0x800000u) >> (((939524096 - v45) >> 23) + 14);
      if (v45 >> 23 < 0x5F) {
        LOWORD(v49) = 0;
      }
      __int16 v50 = v49 | v44;
      if (v45 <= 0x38000000) {
        LOWORD(v48) = v50;
      }
      if (v46) {
        BOOL v51 = v45 == 2139095040;
      }
      else {
        BOOL v51 = 0;
      }
      __int16 v52 = v44 | 0x7C00;
      __int16 v53 = v43 | 0x7FFF;
      if (!v51) {
        __int16 v53 = v52;
      }
      if (v47 >= 0x8F) {
        __int16 v54 = v53;
      }
      else {
        __int16 v54 = v48;
      }
      *(_WORD *)(result + v6) = v54;
      v6 += 2;
      if (v6 >= v5) {
        return result;
      }
    }
    unsigned int v14 = __clz(v11);
    int v15 = v10 << (v14 - 21);
    int v16 = 1124073472 - (v14 << 23);
    int v17 = v15 & 0x3FE;
    if ((v10 & 0x3FF) != 0)
    {
      unsigned int v11 = v17;
    }
    else
    {
      int v16 = 0;
      unsigned int v11 = 0;
    }
    goto LABEL_12;
  }
  return result;
}

uint64_t gleHalfFloatFilter3(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6)
{
  uint64_t v87 = result;
  unint64_t v6 = (2 * a3);
  if ((int)v6 >= 1)
  {
    unint64_t v7 = 0;
    uint64_t v8 = a6 + (uint64_t)a5;
    uint64_t v85 = a2 + a6 + (uint64_t)a4;
    uint64_t v86 = a2 + v8;
    uint64_t v9 = a2 + v8 + a4;
    uint64_t v10 = a2 + a5 + (uint64_t)a4;
    uint64_t v11 = a2 + a4;
    while (1)
    {
      unsigned int v12 = *(unsigned __int16 *)(a2 + v7);
      unsigned int v13 = v12 & 0x3FF;
      int v14 = v12 & 0x7C00;
      if ((v12 & 0x7C00) == 0) {
        break;
      }
      if (v14 != 31744)
      {
        int v18 = (v14 << 13) + 939524096;
LABEL_12:
        int v15 = v18 | (v13 << 13);
        goto LABEL_13;
      }
      if ((v12 & 0x3FF) != 0) {
        int v15 = 0x7FFFFFFF;
      }
      else {
        int v15 = 2139095040;
      }
LABEL_13:
      unsigned int v20 = *(unsigned __int16 *)(v11 + v7);
      unsigned int v21 = v20 & 0x3FF;
      int v22 = v20 & 0x7C00;
      if ((v20 & 0x7C00) == 0)
      {
        unsigned int v24 = __clz(v21);
        int v25 = v20 << (v24 - 21);
        int v26 = 1124073472 - (v24 << 23);
        int v27 = v25 & 0x3FE;
        if ((v20 & 0x3FF) != 0)
        {
          unsigned int v21 = v27;
        }
        else
        {
          int v26 = 0;
          unsigned int v21 = 0;
        }
        goto LABEL_22;
      }
      if (v22 != 31744)
      {
        int v26 = (v22 << 13) + 939524096;
LABEL_22:
        int v23 = v26 | (v21 << 13);
        goto LABEL_23;
      }
      if ((v20 & 0x3FF) != 0) {
        int v23 = 0x7FFFFFFF;
      }
      else {
        int v23 = 2139095040;
      }
LABEL_23:
      unsigned int v28 = *(unsigned __int16 *)(a2 + a5 + v7);
      unsigned int v29 = v28 & 0x3FF;
      int v30 = v28 & 0x7C00;
      if ((v28 & 0x7C00) == 0)
      {
        unsigned int v32 = __clz(v29);
        int v33 = v28 << (v32 - 21);
        int v34 = 1124073472 - (v32 << 23);
        int v35 = v33 & 0x3FE;
        if ((v28 & 0x3FF) != 0)
        {
          unsigned int v29 = v35;
        }
        else
        {
          int v34 = 0;
          unsigned int v29 = 0;
        }
        goto LABEL_32;
      }
      if (v30 != 31744)
      {
        int v34 = (v30 << 13) + 939524096;
LABEL_32:
        int v31 = v34 | (v29 << 13);
        goto LABEL_33;
      }
      if ((v28 & 0x3FF) != 0) {
        int v31 = 0x7FFFFFFF;
      }
      else {
        int v31 = 2139095040;
      }
LABEL_33:
      unsigned int v36 = *(unsigned __int16 *)(v10 + v7);
      unsigned int v37 = v36 & 0x3FF;
      int v38 = v36 & 0x7C00;
      if ((v36 & 0x7C00) == 0)
      {
        unsigned int v40 = __clz(v37);
        int v41 = v36 << (v40 - 21);
        int v42 = 1124073472 - (v40 << 23);
        int v43 = v41 & 0x3FE;
        if ((v36 & 0x3FF) != 0)
        {
          unsigned int v37 = v43;
        }
        else
        {
          int v42 = 0;
          unsigned int v37 = 0;
        }
        goto LABEL_42;
      }
      if (v38 != 31744)
      {
        int v42 = (v38 << 13) + 939524096;
LABEL_42:
        int v39 = v42 | (v37 << 13);
        goto LABEL_43;
      }
      if ((v36 & 0x3FF) != 0) {
        int v39 = 0x7FFFFFFF;
      }
      else {
        int v39 = 2139095040;
      }
LABEL_43:
      unsigned int v44 = *(unsigned __int16 *)(a2 + a6 + v7);
      unsigned int v45 = v44 & 0x3FF;
      int v46 = v44 & 0x7C00;
      if ((v44 & 0x7C00) == 0)
      {
        unsigned int v48 = __clz(v45);
        int v49 = v44 << (v48 - 21);
        int v50 = 1124073472 - (v48 << 23);
        int v51 = v49 & 0x3FE;
        if ((v44 & 0x3FF) != 0)
        {
          unsigned int v45 = v51;
        }
        else
        {
          int v50 = 0;
          unsigned int v45 = 0;
        }
        goto LABEL_52;
      }
      if (v46 != 31744)
      {
        int v50 = (v46 << 13) + 939524096;
LABEL_52:
        int v47 = v50 | (v45 << 13);
        goto LABEL_53;
      }
      if ((v44 & 0x3FF) != 0) {
        int v47 = 0x7FFFFFFF;
      }
      else {
        int v47 = 2139095040;
      }
LABEL_53:
      unsigned int v52 = *(unsigned __int16 *)(v85 + v7);
      unsigned int v53 = v52 & 0x3FF;
      int v54 = v52 & 0x7C00;
      if ((v52 & 0x7C00) == 0)
      {
        unsigned int v56 = __clz(v53);
        int v57 = v52 << (v56 - 21);
        int v58 = 1124073472 - (v56 << 23);
        int v59 = v57 & 0x3FE;
        if ((v52 & 0x3FF) != 0)
        {
          unsigned int v53 = v59;
        }
        else
        {
          int v58 = 0;
          unsigned int v53 = 0;
        }
        goto LABEL_62;
      }
      if (v54 != 31744)
      {
        int v58 = (v54 << 13) + 939524096;
LABEL_62:
        int v55 = v58 | (v53 << 13);
        goto LABEL_63;
      }
      if ((v52 & 0x3FF) != 0) {
        int v55 = 0x7FFFFFFF;
      }
      else {
        int v55 = 2139095040;
      }
LABEL_63:
      unsigned int v60 = *(unsigned __int16 *)(v86 + v7);
      unsigned int v61 = v60 & 0x3FF;
      int v62 = v60 & 0x7C00;
      if ((v60 & 0x7C00) == 0)
      {
        if ((v60 & 0x3FF) != 0)
        {
          unsigned int v64 = __clz(v61);
          int v65 = 1124073472 - (v64 << 23);
          unsigned int v61 = (v60 << (v64 - 21)) & 0x3FE;
        }
        else
        {
          int v65 = 0;
        }
        goto LABEL_72;
      }
      if (v62 != 31744)
      {
        int v65 = (v62 << 13) + 939524096;
LABEL_72:
        int v63 = v65 | (v61 << 13);
        goto LABEL_73;
      }
      if ((v60 & 0x3FF) != 0) {
        int v63 = 0x7FFFFFFF;
      }
      else {
        int v63 = 2139095040;
      }
LABEL_73:
      unsigned int v66 = *(unsigned __int16 *)(v9 + v7);
      unsigned int v67 = v66 & 0x3FF;
      int v68 = v66 & 0x7C00;
      if ((v66 & 0x7C00) != 0)
      {
        if (v68 == 31744)
        {
          if ((v66 & 0x3FF) != 0) {
            int v69 = 0x7FFFFFFF;
          }
          else {
            int v69 = 2139095040;
          }
          goto LABEL_83;
        }
        int v72 = (v68 << 13) + 939524096;
      }
      else if ((v66 & 0x3FF) != 0)
      {
        unsigned int v70 = __clz(v67);
        int v71 = v66 << (v70 - 21);
        int v72 = 1124073472 - (v70 << 23);
        unsigned int v67 = v71 & 0x3FE;
      }
      else
      {
        int v72 = 0;
      }
      int v69 = v72 | (v67 << 13);
LABEL_83:
      float v73 = (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(v15 & 0x7FFFFFFF | ((v12 >> 15) << 31))
                                                                  + COERCE_FLOAT(v23 & 0x7FFFFFFF | ((v20 >> 15) << 31)))
                                                          + COERCE_FLOAT(v31 & 0x7FFFFFFF | ((v28 >> 15) << 31)))
                                                  + COERCE_FLOAT(v39 & 0x7FFFFFFF | ((v36 >> 15) << 31)))
                                          + COERCE_FLOAT(v47 & 0x7FFFFFFF | ((v44 >> 15) << 31)))
                                  + COERCE_FLOAT(v55 & 0x7FFFFFFF | ((v52 >> 15) << 31)))
                          + COERCE_FLOAT(v63 & 0x7FFFFFFF | ((v60 >> 15) << 31)))
                  + COERCE_FLOAT(v69 & 0x7FFFFFFF | ((v66 >> 15) << 31)))
          * 0.125;
      int v74 = HIWORD(LODWORD(v73));
      int v75 = HIWORD(LODWORD(v73)) & 0x8000;
      unsigned int v76 = LODWORD(v73) & 0x7F800000;
      double result = LODWORD(v73) & 0x7FFFFF;
      unsigned int v77 = (LODWORD(v73) >> 23);
      unsigned int v78 = v75 | (((v76 + 0x8000000) | result) >> 13);
      unsigned int v79 = (result | 0x800000) >> (((939524096 - v76) >> 23) + 14);
      if (v76 >> 23 < 0x5F) {
        LOWORD(v79) = 0;
      }
      __int16 v80 = v79 | v75;
      if (v76 <= 0x38000000) {
        LOWORD(v78) = v80;
      }
      if (result) {
        BOOL v81 = v76 == 2139095040;
      }
      else {
        BOOL v81 = 0;
      }
      __int16 v82 = v75 | 0x7C00;
      __int16 v83 = v74 | 0x7FFF;
      if (!v81) {
        __int16 v83 = v82;
      }
      if (v77 >= 0x8F) {
        __int16 v84 = v83;
      }
      else {
        __int16 v84 = v78;
      }
      *(_WORD *)(v87 + v7) = v84;
      v7 += 2;
      if (v7 >= v6) {
        return result;
      }
    }
    unsigned int v16 = __clz(v13);
    int v17 = v12 << (v16 - 21);
    int v18 = 1124073472 - (v16 << 23);
    int v19 = v17 & 0x3FE;
    if ((v12 & 0x3FF) != 0)
    {
      unsigned int v13 = v19;
    }
    else
    {
      int v18 = 0;
      unsigned int v13 = 0;
    }
    goto LABEL_12;
  }
  return result;
}

uint64_t gleHalfFloatFilterBox(uint64_t result, unsigned __int16 *a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  float v7 = 1.0 / (float)a5;
  v31[0] = v7 * (float)(a6 - a7);
  v31[1] = v7 * (float)a6;
  v31[2] = v7 * (float)(a7 + 1);
  unint64_t v8 = (2 * a3);
  if ((int)v8 < 1) {
    return result;
  }
  unint64_t v9 = 0;
  uint64_t v10 = a4;
  do
  {
    uint64_t v11 = 0;
    float v12 = 0.0;
    unsigned int v13 = a2;
    do
    {
      unsigned int v14 = *v13;
      unsigned int v15 = v14 & 0x3FF;
      int v16 = v14 & 0x7C00;
      if ((v14 & 0x7C00) == 0)
      {
        unsigned int v18 = __clz(v15);
        int v19 = v14 << (v18 - 21);
        int v20 = 1124073472 - (v18 << 23);
        int v21 = v19 & 0x3FE;
        if ((v14 & 0x3FF) != 0)
        {
          unsigned int v15 = v21;
        }
        else
        {
          int v20 = 0;
          unsigned int v15 = 0;
        }
        goto LABEL_13;
      }
      if (v16 != 31744)
      {
        int v20 = (v16 << 13) + 939524096;
LABEL_13:
        int v17 = v20 | (v15 << 13);
        goto LABEL_14;
      }
      if ((v14 & 0x3FF) != 0) {
        int v17 = 0x7FFFFFFF;
      }
      else {
        int v17 = 2139095040;
      }
LABEL_14:
      unsigned int v13 = (unsigned __int16 *)((char *)v13 + v10);
      float v12 = v12 + (float)(v31[v11++] * COERCE_FLOAT(v17 & 0x7FFFFFFF | ((v14 >> 15) << 31)));
    }
    while (v11 != 3);
    int v22 = HIWORD(LODWORD(v12)) & 0x8000;
    unsigned int v23 = LODWORD(v12) & 0x7F800000;
    unsigned int v24 = v22 | ((((LODWORD(v12) & 0x7F800000) + 0x8000000) | LODWORD(v12) & 0x7FFFFFu) >> 13);
    unsigned int v25 = (LODWORD(v12) & 0x7FFFFF | 0x800000u) >> (((939524096 - (LODWORD(v12) & 0x7F800000u)) >> 23) + 14);
    if ((LODWORD(v12) & 0x7F800000u) >> 23 < 0x5F) {
      LOWORD(v25) = 0;
    }
    __int16 v26 = v25 | v22;
    if (v23 <= 0x38000000) {
      LOWORD(v24) = v26;
    }
    BOOL v27 = (LODWORD(v12) & 0x7FFFFF) != 0 && v23 == 2139095040;
    __int16 v28 = v22 | 0x7C00;
    int v29 = HIWORD(LODWORD(v12)) | 0x7FFF;
    if (!v27) {
      LOWORD(v29) = v28;
    }
    if ((LODWORD(v12) >> 23) >= 0x8Fu) {
      __int16 v30 = v29;
    }
    else {
      __int16 v30 = v24;
    }
    *(_WORD *)(result + v9) = v30;
    v9 += 2;
    ++a2;
  }
  while (v9 < v8);
  return result;
}

unsigned int *glePackedFloatFilter1(unsigned int *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = 0;
  float v5 = 0.0;
  char v6 = 1;
  float v7 = 0.0;
  float v8 = 0.0;
  do
  {
    char v9 = v6;
    unsigned int v10 = *(_DWORD *)(a2 + v4);
    unsigned int v11 = v10 & 0x3F;
    int v12 = v10 & 0x7C0;
    if ((v10 & 0x7C0) == 0)
    {
      if ((v10 & 0x3F) != 0)
      {
        unsigned int v14 = __clz(v11);
        int v15 = 1157627904 - (v14 << 23);
        unsigned int v11 = (v10 << (v14 - 25)) & 0x3E;
      }
      else
      {
        int v15 = 0;
      }
      goto LABEL_11;
    }
    if (v12 != 1984)
    {
      int v15 = (v12 << 17) + 939524096;
LABEL_11:
      LODWORD(v13) = v15 | (v11 << 17);
      goto LABEL_12;
    }
    float v13 = NAN;
    if ((v10 & 0x3F) == 0) {
      float v13 = INFINITY;
    }
LABEL_12:
    unsigned int v16 = (v10 >> 11) & 0x3F;
    int v17 = (v10 >> 11) & 0x7C0;
    if (!v17)
    {
      if (v16)
      {
        unsigned int v19 = __clz(v16);
        int v20 = 1157627904 - (v19 << 23);
        unsigned int v16 = (v10 >> 11 << (v19 - 25)) & 0x3E;
      }
      else
      {
        int v20 = 0;
      }
      goto LABEL_21;
    }
    if (v17 != 1984)
    {
      int v20 = (v17 << 17) + 939524096;
LABEL_21:
      LODWORD(v18) = v20 | (v16 << 17);
      goto LABEL_22;
    }
    float v18 = NAN;
    if (!v16) {
      float v18 = INFINITY;
    }
LABEL_22:
    unsigned int v21 = v10 >> 22;
    unsigned int v22 = (v10 >> 22) & 0x1F;
    int v23 = v21 & 0x3E0;
    if ((v21 & 0x3E0) == 0)
    {
      if (v22)
      {
        unsigned int v25 = __clz(v22);
        int v26 = v21 << (v25 - 26);
        int v27 = 1166016512 - (v25 << 23);
        unsigned int v22 = v26 & 0x1E;
      }
      else
      {
        int v27 = 0;
      }
      goto LABEL_31;
    }
    if (v23 != 992)
    {
      int v27 = (v23 << 18) + 939524096;
LABEL_31:
      LODWORD(v24) = v27 | (v22 << 18);
      goto LABEL_32;
    }
    float v24 = NAN;
    if (!v22) {
      float v24 = INFINITY;
    }
LABEL_32:
    char v6 = 0;
    float v8 = v8 + v13;
    float v7 = v7 + v18;
    float v5 = v5 + v24;
    uint64_t v4 = a4;
  }
  while ((v9 & 1) != 0);
  float v28 = v7 * 0.5;
  float v29 = v5 * 0.5;
  if ((COERCE_UNSIGNED_INT(v5 * 0.5) & 0x80000000) != 0)
  {
    unsigned int v33 = 0;
  }
  else
  {
    unsigned int v30 = LODWORD(v29) & 0x7F800000;
    unsigned int v31 = LODWORD(v29) & 0x7FFFFF;
    if (v30 <= 0x477FFFFF)
    {
      if (v30 >= 0x38000001)
      {
        unsigned int v33 = ((v30 - 939524096) | v31) >> 18;
      }
      else
      {
        unsigned int v34 = v31 >> (((939524096 - v30) >> 23) + 19);
        if (v30 >> 25 >= 0x19) {
          unsigned int v33 = v34;
        }
        else {
          unsigned int v33 = 0;
        }
      }
    }
    else if (v30 != 2139095040 || v31 == 0)
    {
      unsigned int v33 = 992;
    }
    else
    {
      unsigned int v33 = 1023;
    }
  }
  float v35 = v8 * 0.5;
  if ((LODWORD(v28) & 0x80000000) != 0)
  {
    unsigned int v39 = 0;
  }
  else
  {
    unsigned int v36 = LODWORD(v28) & 0x7F800000;
    unsigned int v37 = LODWORD(v28) & 0x7FFFFF;
    if ((LODWORD(v28) & 0x7F800000u) <= 0x477FFFFF)
    {
      if (v36 >= 0x38000001)
      {
        unsigned int v39 = ((v36 - 939524096) | v37) >> 17;
      }
      else
      {
        unsigned int v40 = v37 >> (((939524096 - v36) >> 23) + 18);
        if (v36 >> 23 >= 0x63) {
          unsigned int v39 = v40;
        }
        else {
          unsigned int v39 = 0;
        }
      }
    }
    else if (v36 != 2139095040 || v37 == 0)
    {
      unsigned int v39 = 1984;
    }
    else
    {
      unsigned int v39 = 2047;
    }
  }
  if ((LODWORD(v35) & 0x80000000) != 0)
  {
    unsigned int v44 = 0;
  }
  else
  {
    unsigned int v41 = LODWORD(v35) & 0x7F800000;
    unsigned int v42 = LODWORD(v35) & 0x7FFFFF;
    if ((LODWORD(v35) & 0x7F800000u) <= 0x477FFFFF)
    {
      if (v41 >= 0x38000001)
      {
        unsigned int v44 = ((v41 - 939524096) | v42) >> 17;
      }
      else
      {
        unsigned int v44 = v42 >> (((939524096 - v41) >> 23) + 18);
        if (v41 >> 23 < 0x63) {
          unsigned int v44 = 0;
        }
      }
    }
    else if (v41 != 2139095040 || v42 == 0)
    {
      unsigned int v44 = 1984;
    }
    else
    {
      unsigned int v44 = 2047;
    }
  }
  *double result = (v39 << 11) | (v33 << 22) | v44;
  return result;
}

unsigned int *glePackedFloatFilter2(unsigned int *result, unsigned int *a2, uint64_t a3, int a4, int a5)
{
  unsigned int v5 = 0;
  char v6 = (unsigned int *)((char *)a2 + a5);
  float v7 = (unsigned int *)((char *)v6 + a4);
  float v8 = 0.0;
  float v9 = 0.0;
  float v10 = 0.0;
  unsigned int v11 = (unsigned int *)((char *)a2 + a4);
  do
  {
    unsigned int v12 = v5;
    float v13 = a2;
    switch(v5)
    {
      case 0u:
        goto LABEL_6;
      case 1u:
        float v13 = v11;
        goto LABEL_6;
      case 2u:
        float v13 = v6;
        goto LABEL_6;
      case 3u:
        float v13 = v7;
LABEL_6:
        unsigned int v12 = *v13;
        break;
      default:
        break;
    }
    unsigned int v14 = v12 & 0x3F;
    int v15 = v12 & 0x7C0;
    if ((v12 & 0x7C0) == 0)
    {
      unsigned int v17 = __clz(v14);
      int v18 = v12 << (v17 - 25);
      int v19 = 1157627904 - (v17 << 23);
      int v20 = v18 & 0x3E;
      if ((v12 & 0x3F) != 0)
      {
        unsigned int v14 = v20;
      }
      else
      {
        int v19 = 0;
        unsigned int v14 = 0;
      }
      goto LABEL_16;
    }
    if (v15 != 1984)
    {
      int v19 = (v15 << 17) + 939524096;
LABEL_16:
      LODWORD(v16) = v19 | (v14 << 17);
      goto LABEL_17;
    }
    float v16 = NAN;
    if ((v12 & 0x3F) == 0) {
      float v16 = INFINITY;
    }
LABEL_17:
    unsigned int v21 = (v12 >> 11) & 0x3F;
    int v22 = (v12 >> 11) & 0x7C0;
    if (!v22)
    {
      unsigned int v24 = __clz(v21);
      unsigned int v25 = v12 >> 11 << (v24 - 25);
      int v26 = 1157627904 - (v24 << 23);
      int v27 = v25 & 0x3E;
      if (v21) {
        int v28 = v26;
      }
      else {
        int v28 = 0;
      }
      if (v21) {
        unsigned int v21 = v27;
      }
      else {
        unsigned int v21 = 0;
      }
      goto LABEL_29;
    }
    if (v22 != 1984)
    {
      int v28 = (v22 << 17) + 939524096;
LABEL_29:
      LODWORD(v23) = v28 | (v21 << 17);
      goto LABEL_30;
    }
    float v23 = NAN;
    if (!v21) {
      float v23 = INFINITY;
    }
LABEL_30:
    unsigned int v29 = (v12 >> 22) & 0x1F;
    int v30 = (v12 >> 22) & 0x3E0;
    if (!v30)
    {
      unsigned int v32 = __clz(v29);
      unsigned int v33 = v12 >> 22 << (v32 - 26);
      int v34 = 1166016512 - (v32 << 23);
      int v35 = v33 & 0x1E;
      if (v29) {
        int v36 = v34;
      }
      else {
        int v36 = 0;
      }
      if (v29) {
        unsigned int v29 = v35;
      }
      else {
        unsigned int v29 = 0;
      }
      goto LABEL_42;
    }
    if (v30 != 992)
    {
      int v36 = (v30 << 18) + 939524096;
LABEL_42:
      LODWORD(v31) = v36 | (v29 << 18);
      goto LABEL_43;
    }
    float v31 = NAN;
    if (!v29) {
      float v31 = INFINITY;
    }
LABEL_43:
    float v10 = v10 + v16;
    float v9 = v9 + v23;
    float v8 = v8 + v31;
    ++v5;
  }
  while (v5 != 4);
  float v37 = v9 * 0.25;
  float v38 = v8 * 0.25;
  if ((COERCE_UNSIGNED_INT(v8 * 0.25) & 0x80000000) != 0)
  {
    unsigned int v42 = 0;
  }
  else
  {
    unsigned int v39 = LODWORD(v38) & 0x7F800000;
    unsigned int v40 = LODWORD(v38) & 0x7FFFFF;
    if (v39 <= 0x477FFFFF)
    {
      if (v39 >= 0x38000001)
      {
        unsigned int v42 = ((v39 - 939524096) | v40) >> 18;
      }
      else
      {
        unsigned int v43 = v40 >> (((939524096 - v39) >> 23) + 19);
        if (v39 >> 25 >= 0x19) {
          unsigned int v42 = v43;
        }
        else {
          unsigned int v42 = 0;
        }
      }
    }
    else if (v39 != 2139095040 || v40 == 0)
    {
      unsigned int v42 = 992;
    }
    else
    {
      unsigned int v42 = 1023;
    }
  }
  float v44 = v10 * 0.25;
  if ((LODWORD(v37) & 0x80000000) != 0)
  {
    unsigned int v48 = 0;
  }
  else
  {
    unsigned int v45 = LODWORD(v37) & 0x7F800000;
    unsigned int v46 = LODWORD(v37) & 0x7FFFFF;
    if ((LODWORD(v37) & 0x7F800000u) <= 0x477FFFFF)
    {
      if (v45 >= 0x38000001)
      {
        unsigned int v48 = ((v45 - 939524096) | v46) >> 17;
      }
      else
      {
        unsigned int v49 = v46 >> (((939524096 - v45) >> 23) + 18);
        if (v45 >> 23 >= 0x63) {
          unsigned int v48 = v49;
        }
        else {
          unsigned int v48 = 0;
        }
      }
    }
    else if (v45 != 2139095040 || v46 == 0)
    {
      unsigned int v48 = 1984;
    }
    else
    {
      unsigned int v48 = 2047;
    }
  }
  if ((LODWORD(v44) & 0x80000000) != 0)
  {
    unsigned int v53 = 0;
  }
  else
  {
    unsigned int v50 = LODWORD(v44) & 0x7F800000;
    unsigned int v51 = LODWORD(v44) & 0x7FFFFF;
    if ((LODWORD(v44) & 0x7F800000u) <= 0x477FFFFF)
    {
      if (v50 >= 0x38000001)
      {
        unsigned int v53 = ((v50 - 939524096) | v51) >> 17;
      }
      else
      {
        unsigned int v53 = v51 >> (((939524096 - v50) >> 23) + 18);
        if (v50 >> 23 < 0x63) {
          unsigned int v53 = 0;
        }
      }
    }
    else if (v50 != 2139095040 || v51 == 0)
    {
      unsigned int v53 = 1984;
    }
    else
    {
      unsigned int v53 = 2047;
    }
  }
  *double result = (v48 << 11) | (v42 << 22) | v53;
  return result;
}

unsigned int *glePackedFloatFilter3(unsigned int *result, char *a2, uint64_t a3, int a4, int a5, int a6)
{
  unsigned int v6 = 0;
  float v7 = &a2[a6];
  float v8 = &v7[a5 + a4];
  float v9 = &v7[a4];
  float v10 = &a2[a5 + a4];
  float v11 = 0.0;
  float v12 = 0.0;
  float v13 = 0.0;
  unsigned int v14 = &a2[a4];
  do
  {
    unsigned int v15 = v6;
    float v16 = a2;
    switch(v6)
    {
      case 0u:
        goto LABEL_10;
      case 1u:
        float v16 = v14;
        goto LABEL_10;
      case 2u:
        float v16 = &a2[a5];
        goto LABEL_10;
      case 3u:
        float v16 = v10;
        goto LABEL_10;
      case 4u:
        float v16 = &a2[a6];
        goto LABEL_10;
      case 5u:
        float v16 = v9;
        goto LABEL_10;
      case 6u:
        float v16 = &v7[a5];
        goto LABEL_10;
      case 7u:
        float v16 = v8;
LABEL_10:
        unsigned int v15 = *(_DWORD *)v16;
        break;
      default:
        break;
    }
    unsigned int v17 = v15 & 0x3F;
    int v18 = v15 & 0x7C0;
    if ((v15 & 0x7C0) == 0)
    {
      unsigned int v20 = __clz(v17);
      int v21 = v15 << (v20 - 25);
      int v22 = 1157627904 - (v20 << 23);
      int v23 = v21 & 0x3E;
      if ((v15 & 0x3F) != 0)
      {
        unsigned int v17 = v23;
      }
      else
      {
        int v22 = 0;
        unsigned int v17 = 0;
      }
      goto LABEL_20;
    }
    if (v18 != 1984)
    {
      int v22 = (v18 << 17) + 939524096;
LABEL_20:
      LODWORD(v19) = v22 | (v17 << 17);
      goto LABEL_21;
    }
    float v19 = NAN;
    if ((v15 & 0x3F) == 0) {
      float v19 = INFINITY;
    }
LABEL_21:
    unsigned int v24 = (v15 >> 11) & 0x3F;
    int v25 = (v15 >> 11) & 0x7C0;
    if (!v25)
    {
      unsigned int v27 = __clz(v24);
      unsigned int v28 = v15 >> 11 << (v27 - 25);
      int v29 = 1157627904 - (v27 << 23);
      int v30 = v28 & 0x3E;
      if (v24) {
        int v31 = v29;
      }
      else {
        int v31 = 0;
      }
      if (v24) {
        unsigned int v24 = v30;
      }
      else {
        unsigned int v24 = 0;
      }
      goto LABEL_33;
    }
    if (v25 != 1984)
    {
      int v31 = (v25 << 17) + 939524096;
LABEL_33:
      LODWORD(v26) = v31 | (v24 << 17);
      goto LABEL_34;
    }
    float v26 = NAN;
    if (!v24) {
      float v26 = INFINITY;
    }
LABEL_34:
    unsigned int v32 = (v15 >> 22) & 0x1F;
    int v33 = (v15 >> 22) & 0x3E0;
    if (!v33)
    {
      unsigned int v35 = __clz(v32);
      unsigned int v36 = v15 >> 22 << (v35 - 26);
      int v37 = 1166016512 - (v35 << 23);
      int v38 = v36 & 0x1E;
      if (v32) {
        int v39 = v37;
      }
      else {
        int v39 = 0;
      }
      if (v32) {
        unsigned int v32 = v38;
      }
      else {
        unsigned int v32 = 0;
      }
      goto LABEL_46;
    }
    if (v33 != 992)
    {
      int v39 = (v33 << 18) + 939524096;
LABEL_46:
      LODWORD(v34) = v39 | (v32 << 18);
      goto LABEL_47;
    }
    float v34 = NAN;
    if (!v32) {
      float v34 = INFINITY;
    }
LABEL_47:
    float v13 = v13 + v19;
    float v12 = v12 + v26;
    float v11 = v11 + v34;
    ++v6;
  }
  while (v6 != 8);
  float v40 = v12 * 0.125;
  float v41 = v11 * 0.125;
  if ((COERCE_UNSIGNED_INT(v11 * 0.125) & 0x80000000) != 0)
  {
    unsigned int v45 = 0;
  }
  else
  {
    unsigned int v42 = LODWORD(v41) & 0x7F800000;
    unsigned int v43 = LODWORD(v41) & 0x7FFFFF;
    if (v42 <= 0x477FFFFF)
    {
      if (v42 >= 0x38000001)
      {
        unsigned int v45 = ((v42 - 939524096) | v43) >> 18;
      }
      else
      {
        unsigned int v46 = v43 >> (((939524096 - v42) >> 23) + 19);
        if (v42 >> 25 >= 0x19) {
          unsigned int v45 = v46;
        }
        else {
          unsigned int v45 = 0;
        }
      }
    }
    else if (v42 != 2139095040 || v43 == 0)
    {
      unsigned int v45 = 992;
    }
    else
    {
      unsigned int v45 = 1023;
    }
  }
  float v47 = v13 * 0.125;
  if ((LODWORD(v40) & 0x80000000) != 0)
  {
    unsigned int v51 = 0;
  }
  else
  {
    unsigned int v48 = LODWORD(v40) & 0x7F800000;
    unsigned int v49 = LODWORD(v40) & 0x7FFFFF;
    if ((LODWORD(v40) & 0x7F800000u) <= 0x477FFFFF)
    {
      if (v48 >= 0x38000001)
      {
        unsigned int v51 = ((v48 - 939524096) | v49) >> 17;
      }
      else
      {
        unsigned int v52 = v49 >> (((939524096 - v48) >> 23) + 18);
        if (v48 >> 23 >= 0x63) {
          unsigned int v51 = v52;
        }
        else {
          unsigned int v51 = 0;
        }
      }
    }
    else if (v48 != 2139095040 || v49 == 0)
    {
      unsigned int v51 = 1984;
    }
    else
    {
      unsigned int v51 = 2047;
    }
  }
  if ((LODWORD(v47) & 0x80000000) != 0)
  {
    unsigned int v56 = 0;
  }
  else
  {
    unsigned int v53 = LODWORD(v47) & 0x7F800000;
    unsigned int v54 = LODWORD(v47) & 0x7FFFFF;
    if ((LODWORD(v47) & 0x7F800000u) <= 0x477FFFFF)
    {
      if (v53 >= 0x38000001)
      {
        unsigned int v56 = ((v53 - 939524096) | v54) >> 17;
      }
      else
      {
        unsigned int v56 = v54 >> (((939524096 - v53) >> 23) + 18);
        if (v53 >> 23 < 0x63) {
          unsigned int v56 = 0;
        }
      }
    }
    else if (v53 != 2139095040 || v54 == 0)
    {
      unsigned int v56 = 1984;
    }
    else
    {
      unsigned int v56 = 2047;
    }
  }
  *double result = (v51 << 11) | (v45 << 22) | v56;
  return result;
}

unsigned int *glePackedFloatFilterBox(unsigned int *result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  unsigned int v7 = 0;
  uint64_t v8 = 0;
  uint64_t v54 = *MEMORY[0x263EF8340];
  float v9 = 1.0 / (float)a5;
  v53[0] = v9 * (float)(a6 - a7);
  v53[1] = v9 * (float)a6;
  v53[2] = v9 * (float)(a7 + 1);
  float v10 = 0.0;
  float v11 = 0.0;
  float v12 = 0.0;
  do
  {
    unsigned int v13 = *(_DWORD *)(a2 + v7);
    unsigned int v14 = v13 & 0x3F;
    int v15 = v13 & 0x7C0;
    if ((v13 & 0x7C0) == 0)
    {
      unsigned int v17 = __clz(v14);
      int v18 = v13 << (v17 - 25);
      int v19 = 1157627904 - (v17 << 23);
      int v20 = v18 & 0x3E;
      if ((v13 & 0x3F) != 0)
      {
        unsigned int v14 = v20;
      }
      else
      {
        int v19 = 0;
        unsigned int v14 = 0;
      }
      goto LABEL_11;
    }
    if (v15 != 1984)
    {
      int v19 = (v15 << 17) + 939524096;
LABEL_11:
      LODWORD(v16) = v19 | (v14 << 17);
      goto LABEL_12;
    }
    float v16 = NAN;
    if ((v13 & 0x3F) == 0) {
      float v16 = INFINITY;
    }
LABEL_12:
    unsigned int v21 = (v13 >> 11) & 0x3F;
    int v22 = (v13 >> 11) & 0x7C0;
    if (!v22)
    {
      unsigned int v24 = __clz(v21);
      unsigned int v25 = v13 >> 11 << (v24 - 25);
      int v26 = 1157627904 - (v24 << 23);
      int v27 = v25 & 0x3E;
      if (v21) {
        int v28 = v26;
      }
      else {
        int v28 = 0;
      }
      if (v21) {
        unsigned int v21 = v27;
      }
      else {
        unsigned int v21 = 0;
      }
      goto LABEL_24;
    }
    if (v22 != 1984)
    {
      int v28 = (v22 << 17) + 939524096;
LABEL_24:
      LODWORD(v23) = v28 | (v21 << 17);
      goto LABEL_25;
    }
    float v23 = NAN;
    if (!v21) {
      float v23 = INFINITY;
    }
LABEL_25:
    unsigned int v29 = v13 >> 22;
    unsigned int v30 = (v13 >> 22) & 0x1F;
    int v31 = v29 & 0x3E0;
    if ((v29 & 0x3E0) == 0)
    {
      unsigned int v33 = __clz(v30);
      int v34 = v29 << (v33 - 26);
      int v35 = 1166016512 - (v33 << 23);
      int v36 = v34 & 0x1E;
      if (v30) {
        int v37 = v35;
      }
      else {
        int v37 = 0;
      }
      if (v30) {
        unsigned int v30 = v36;
      }
      else {
        unsigned int v30 = 0;
      }
      goto LABEL_37;
    }
    if (v31 != 992)
    {
      int v37 = (v31 << 18) + 939524096;
LABEL_37:
      LODWORD(v32) = v37 | (v30 << 18);
      goto LABEL_38;
    }
    float v32 = NAN;
    if (!v30) {
      float v32 = INFINITY;
    }
LABEL_38:
    float v38 = v53[v8];
    float v12 = v12 + (float)(v16 * v38);
    float v11 = v11 + (float)(v23 * v38);
    float v10 = v10 + (float)(v32 * v38);
    ++v8;
    v7 += a4;
  }
  while (v8 != 3);
  if ((LODWORD(v10) & 0x80000000) != 0)
  {
    unsigned int v42 = 0;
  }
  else
  {
    unsigned int v39 = LODWORD(v10) & 0x7F800000;
    unsigned int v40 = LODWORD(v10) & 0x7FFFFF;
    if ((LODWORD(v10) & 0x7F800000u) <= 0x477FFFFF)
    {
      if (v39 >= 0x38000001)
      {
        unsigned int v42 = ((v39 - 939524096) | v40) >> 18;
      }
      else
      {
        unsigned int v43 = v40 >> (((939524096 - v39) >> 23) + 19);
        if (v39 >> 25 >= 0x19) {
          unsigned int v42 = v43;
        }
        else {
          unsigned int v42 = 0;
        }
      }
    }
    else if (v39 != 2139095040 || v40 == 0)
    {
      unsigned int v42 = 992;
    }
    else
    {
      unsigned int v42 = 1023;
    }
  }
  if ((LODWORD(v11) & 0x80000000) != 0)
  {
    unsigned int v47 = 0;
  }
  else
  {
    unsigned int v44 = LODWORD(v11) & 0x7F800000;
    unsigned int v45 = LODWORD(v11) & 0x7FFFFF;
    if ((LODWORD(v11) & 0x7F800000u) <= 0x477FFFFF)
    {
      if (v44 >= 0x38000001)
      {
        unsigned int v47 = ((v44 - 939524096) | v45) >> 17;
      }
      else
      {
        unsigned int v48 = v45 >> (((939524096 - v44) >> 23) + 18);
        if (v44 >> 23 >= 0x63) {
          unsigned int v47 = v48;
        }
        else {
          unsigned int v47 = 0;
        }
      }
    }
    else if (v44 != 2139095040 || v45 == 0)
    {
      unsigned int v47 = 1984;
    }
    else
    {
      unsigned int v47 = 2047;
    }
  }
  if ((LODWORD(v12) & 0x80000000) != 0)
  {
    unsigned int v52 = 0;
  }
  else
  {
    unsigned int v49 = LODWORD(v12) & 0x7F800000;
    unsigned int v50 = LODWORD(v12) & 0x7FFFFF;
    if ((LODWORD(v12) & 0x7F800000u) <= 0x477FFFFF)
    {
      if (v49 >= 0x38000001)
      {
        unsigned int v52 = ((v49 - 939524096) | v50) >> 17;
      }
      else
      {
        unsigned int v52 = v50 >> (((939524096 - v49) >> 23) + 18);
        if (v49 >> 23 < 0x63) {
          unsigned int v52 = 0;
        }
      }
    }
    else if (v49 != 2139095040 || v50 == 0)
    {
      unsigned int v52 = 1984;
    }
    else
    {
      unsigned int v52 = 2047;
    }
  }
  *double result = (v47 << 11) | (v42 << 22) | v52;
  return result;
}

uint32x2_t gleSharedExponentFilter1(unsigned __int32 *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = 0;
  float32x4_t v5 = 0uLL;
  char v6 = 1;
  do
  {
    unsigned int v7 = *(_DWORD *)(a2 + v4);
    char v8 = v6;
    *(float32x2_t *)v9.f32 = vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)__PAIR64__(v7 >> 9, v7), (int8x8_t)0x100000001));
    v9.f32[2] = (float)((v7 >> 18) & 0x1FF);
    v9.f32[3] = (float)(v7 >> 27);
    float32x4_t v5 = vaddq_f32(v5, vmulq_f32(v9, (float32x4_t)vdupq_n_s32((v7 >> 27 << 23) + 864026624)));
    uint64_t v4 = a4;
    char v6 = 0;
  }
  while ((v8 & 1) != 0);
  v10.i64[0] = 0x3F0000003F000000;
  v10.i64[1] = 0x3F0000003F000000;
  float32x4_t v11 = vmulq_f32(v5, v10);
  float32x4_t v12 = (float32x4_t)vdupq_n_s32(0x477F8000u);
  float32x4_t v13 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v11, v12), (int8x16_t)v12, (int8x16_t)v11);
  int8x16_t v14 = (int8x16_t)vcltzq_f32(v13);
  float32x4_t v15 = (float32x4_t)vbicq_s8((int8x16_t)v13, v14);
  float v16 = v15.f32[2];
  if (v15.f32[0] <= v15.f32[2]) {
    float v17 = v15.f32[2];
  }
  else {
    float v17 = v15.f32[0];
  }
  if (v15.f32[1] > v15.f32[2]) {
    float v16 = v15.f32[1];
  }
  if (v15.f32[0] <= v15.f32[1]) {
    float v18 = v16;
  }
  else {
    float v18 = v17;
  }
  unsigned int v19 = (LODWORD(v18) >> 23);
  if (v19 <= 0x6F) {
    unsigned int v19 = 111;
  }
  unsigned int v20 = v19 - 111;
  LODWORD(v21) = ((v19 - 111) << 23) + 864026624;
  int v22 = (int)(float)((float)(v18 / v21) + 0.5);
  *(float *)v14.i32 = v21 + v21;
  unsigned int v23 = v19 + 18;
  if (v22 != 512)
  {
    v14.i32[0] = (v20 << 23) + 864026624;
    unsigned int v23 = v20;
  }
  int8x16_t v24 = (int8x16_t)vaddq_f32(vdivq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.i8, 0)), v10);
  unsigned int v25 = *(float *)v24.i32;
  uint32x2_t result = vshl_u32(vcvt_u32_f32((float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 4uLL)), (uint32x2_t)0x1200000009);
  *a1 = v25 | (v23 << 27) | result.i32[0] | result.i32[1];
  return result;
}

uint32x2_t gleSharedExponentFilter2(unsigned __int32 *a1, _DWORD *a2, uint64_t a3, int a4, int a5)
{
  int v5 = 0;
  float32x4_t v6 = 0uLL;
  do
  {
    unsigned int v7 = a2;
    switch(v5)
    {
      case 0:
        goto LABEL_6;
      case 1:
        unsigned int v7 = (_DWORD *)((char *)a2 + a4);
        goto LABEL_6;
      case 2:
        unsigned int v7 = (_DWORD *)((char *)a2 + a5);
        goto LABEL_6;
      case 3:
        unsigned int v7 = (_DWORD *)((char *)a2 + a5 + a4);
LABEL_6:
        LODWORD(v7) = *v7;
        break;
      default:
        break;
    }
    v8.i32[0] = (int)v7;
    v8.i32[1] = v7 >> 9;
    *(float32x2_t *)v9.f32 = vcvt_f32_u32((uint32x2_t)vand_s8(v8, (int8x8_t)0x100000001));
    v9.f32[2] = (float)((v7 >> 18) & 0x1FF);
    v9.f32[3] = (float)(v7 >> 27);
    float32x4_t v6 = vaddq_f32(v6, vmulq_n_f32(v9, COERCE_FLOAT((v7 >> 27 << 23) + 864026624)));
    ++v5;
  }
  while (v5 != 4);
  __asm { FMOV            V1.4S, #0.25 }
  float32x4_t v15 = vmulq_f32(v6, _Q1);
  float32x4_t v16 = (float32x4_t)vdupq_n_s32(0x477F8000u);
  float32x4_t v17 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v15, v16), (int8x16_t)v16, (int8x16_t)v15);
  int8x16_t v18 = (int8x16_t)vcltzq_f32(v17);
  float32x4_t v19 = (float32x4_t)vbicq_s8((int8x16_t)v17, v18);
  float v20 = v19.f32[2];
  if (v19.f32[0] <= v19.f32[2]) {
    float v21 = v19.f32[2];
  }
  else {
    float v21 = v19.f32[0];
  }
  if (v19.f32[1] > v19.f32[2]) {
    float v20 = v19.f32[1];
  }
  if (v19.f32[0] <= v19.f32[1]) {
    float v22 = v20;
  }
  else {
    float v22 = v21;
  }
  unsigned int v23 = (LODWORD(v22) >> 23);
  if (v23 <= 0x6F) {
    unsigned int v23 = 111;
  }
  unsigned int v24 = v23 - 111;
  LODWORD(v25) = ((v23 - 111) << 23) + 864026624;
  int v26 = (int)(float)((float)(v22 / v25) + 0.5);
  *(float *)v18.i32 = v25 + v25;
  unsigned int v27 = v23 + 18;
  if (v26 != 512) {
    v18.i32[0] = (v24 << 23) + 864026624;
  }
  float32x4_t v28 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.i8, 0);
  if (v26 != 512) {
    unsigned int v27 = v24;
  }
  float32x4_t v29 = vdivq_f32(v19, v28);
  v30.i64[0] = 0x3F0000003F000000;
  v30.i64[1] = 0x3F0000003F000000;
  int8x16_t v31 = (int8x16_t)vaddq_f32(v29, v30);
  unsigned int v32 = *(float *)v31.i32;
  uint32x2_t result = vshl_u32(vcvt_u32_f32((float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 4uLL)), (uint32x2_t)0x1200000009);
  *a1 = v32 | (v27 << 27) | result.i32[0] | result.i32[1];
  return result;
}

uint32x2_t gleSharedExponentFilter3(unsigned __int32 *a1, unsigned __int32 *a2, uint64_t a3, int a4, int a5, int a6)
{
  unsigned __int32 v6 = 0;
  unsigned int v7 = (char *)a2 + a6;
  int8x8_t v8 = (unsigned __int32 *)&v7[a5 + a4];
  float32x4_t v9 = (unsigned __int32 *)&v7[a4];
  float32x4_t v10 = (unsigned __int32 *)((char *)a2 + a5 + a4);
  float32x4_t v11 = 0uLL;
  float32x4_t v12 = (unsigned __int32 *)((char *)a2 + a4);
  do
  {
    unsigned __int32 v13 = v6;
    int8x16_t v14 = a2;
    switch(v6)
    {
      case 0u:
        goto LABEL_10;
      case 1u:
        int8x16_t v14 = v12;
        goto LABEL_10;
      case 2u:
        int8x16_t v14 = (unsigned __int32 *)((char *)a2 + a5);
        goto LABEL_10;
      case 3u:
        int8x16_t v14 = v10;
        goto LABEL_10;
      case 4u:
        int8x16_t v14 = (unsigned __int32 *)((char *)a2 + a6);
        goto LABEL_10;
      case 5u:
        int8x16_t v14 = v9;
        goto LABEL_10;
      case 6u:
        int8x16_t v14 = (unsigned __int32 *)&v7[a5];
        goto LABEL_10;
      case 7u:
        int8x16_t v14 = v8;
LABEL_10:
        unsigned __int32 v13 = *v14;
        break;
      default:
        break;
    }
    v15.i32[0] = v13;
    v15.i32[1] = v13 >> 9;
    *(float32x2_t *)v16.f32 = vcvt_f32_u32((uint32x2_t)vand_s8(v15, (int8x8_t)0x100000001));
    v16.f32[2] = (float)((v13 >> 18) & 0x1FF);
    v16.f32[3] = (float)(v13 >> 27);
    float32x4_t v11 = vaddq_f32(v11, vmulq_n_f32(v16, COERCE_FLOAT((v13 >> 27 << 23) + 864026624)));
    ++v6;
  }
  while (v6 != 8);
  v17.i64[0] = 0x3E0000003E000000;
  v17.i64[1] = 0x3E0000003E000000;
  float32x4_t v18 = vmulq_f32(v11, v17);
  float32x4_t v19 = (float32x4_t)vdupq_n_s32(0x477F8000u);
  float32x4_t v20 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v18, v19), (int8x16_t)v19, (int8x16_t)v18);
  int8x16_t v21 = (int8x16_t)vcltzq_f32(v20);
  float32x4_t v22 = (float32x4_t)vbicq_s8((int8x16_t)v20, v21);
  float v23 = v22.f32[2];
  if (v22.f32[0] <= v22.f32[2]) {
    float v24 = v22.f32[2];
  }
  else {
    float v24 = v22.f32[0];
  }
  if (v22.f32[1] > v22.f32[2]) {
    float v23 = v22.f32[1];
  }
  if (v22.f32[0] <= v22.f32[1]) {
    float v25 = v23;
  }
  else {
    float v25 = v24;
  }
  unsigned int v26 = (LODWORD(v25) >> 23);
  if (v26 <= 0x6F) {
    unsigned int v26 = 111;
  }
  unsigned int v27 = v26 - 111;
  LODWORD(v28) = ((v26 - 111) << 23) + 864026624;
  int v29 = (int)(float)((float)(v25 / v28) + 0.5);
  *(float *)v21.i32 = v28 + v28;
  unsigned int v30 = v26 + 18;
  if (v29 != 512) {
    v21.i32[0] = (v27 << 23) + 864026624;
  }
  float32x4_t v31 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.i8, 0);
  if (v29 != 512) {
    unsigned int v30 = v27;
  }
  float32x4_t v32 = vdivq_f32(v22, v31);
  v33.i64[0] = 0x3F0000003F000000;
  v33.i64[1] = 0x3F0000003F000000;
  int8x16_t v34 = (int8x16_t)vaddq_f32(v32, v33);
  unsigned int v35 = *(float *)v34.i32;
  uint32x2_t result = vshl_u32(vcvt_u32_f32((float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 4uLL)), (uint32x2_t)0x1200000009);
  *a1 = v35 | (v30 << 27) | result.i32[0] | result.i32[1];
  return result;
}

uint32x2_t gleSharedExponentFilterBox(unsigned __int32 *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  unsigned int v7 = 0;
  uint64_t v8 = 0;
  uint64_t v32 = *MEMORY[0x263EF8340];
  float v9 = 1.0 / (float)a5;
  v31[0] = v9 * (float)(a6 - a7);
  v31[1] = v9 * (float)a6;
  v31[2] = v9 * (float)(a7 + 1);
  float32x4_t v10 = 0uLL;
  do
  {
    unsigned __int32 v11 = *(_DWORD *)(a2 + v7);
    v12.i32[0] = v11;
    v12.i32[1] = v11 >> 9;
    *(float32x2_t *)v13.f32 = vcvt_f32_u32((uint32x2_t)vand_s8(v12, (int8x8_t)0x100000001));
    v13.f32[2] = (float)((v11 >> 18) & 0x1FF);
    v13.f32[3] = (float)(v11 >> 27);
    float32x4_t v10 = vmlaq_n_f32(v10, vmulq_n_f32(v13, COERCE_FLOAT((v11 >> 27 << 23) + 864026624)), v31[v8++]);
    v7 += a4;
  }
  while (v8 != 3);
  float32x4_t v14 = (float32x4_t)vdupq_n_s32(0x477F8000u);
  float32x4_t v15 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v10, v14), (int8x16_t)v14, (int8x16_t)v10);
  int8x16_t v16 = (int8x16_t)vcltzq_f32(v15);
  float32x4_t v17 = (float32x4_t)vbicq_s8((int8x16_t)v15, v16);
  float v18 = v17.f32[2];
  if (v17.f32[0] <= v17.f32[2]) {
    float v19 = v17.f32[2];
  }
  else {
    float v19 = v17.f32[0];
  }
  if (v17.f32[1] > v17.f32[2]) {
    float v18 = v17.f32[1];
  }
  if (v17.f32[0] <= v17.f32[1]) {
    float v20 = v18;
  }
  else {
    float v20 = v19;
  }
  unsigned int v21 = (LODWORD(v20) >> 23);
  if (v21 <= 0x6F) {
    unsigned int v21 = 111;
  }
  unsigned int v22 = v21 - 111;
  LODWORD(v23) = ((v21 - 111) << 23) + 864026624;
  int v24 = (int)(float)((float)(v20 / v23) + 0.5);
  *(float *)v16.i32 = v23 + v23;
  unsigned int v25 = v21 + 18;
  if (v24 != 512)
  {
    v16.i32[0] = (v22 << 23) + 864026624;
    unsigned int v25 = v22;
  }
  float32x4_t v26 = vdivq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.i8, 0));
  v27.i64[0] = 0x3F0000003F000000;
  v27.i64[1] = 0x3F0000003F000000;
  int8x16_t v28 = (int8x16_t)vaddq_f32(v26, v27);
  unsigned int v29 = *(float *)v28.i32;
  uint32x2_t result = vshl_u32(vcvt_u32_f32((float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 4uLL)), (uint32x2_t)0x1200000009);
  *a1 = v29 | (v25 << 27) | result.i32[0] | result.i32[1];
  return result;
}

unsigned char *gle332Filter1(unsigned char *result, unsigned char *a2, uint64_t a3, int a4)
{
  *uint32x2_t result = (((a2[a4] & 3) + (*a2 & 3)) | ((*a2 & 0xE0) + a2[a4]) & 0x1C0 | ((a2[a4] & 0x1C)
                                                                                            + (*a2 & 0x1C)) & 0x38u) >> 1;
  return result;
}

unsigned char *gle332Filter2(unsigned char *result, unsigned char *a2, uint64_t a3, int a4, int a5)
{
  int v5 = &a2[a4];
  __int16 v6 = *v5;
  char v7 = a2[a5];
  *uint32x2_t result = (((v6 & 3) + (*a2 & 3) + (v7 & 3) + (v5[a5] & 3)) | ((v6 & 0x1C)
                                                               + (*a2 & 0x1C)
                                                               + (v7 & 0x1C)
                                                               + (v5[a5] & 0x1C)) & 0x70 | ((*a2 & 0xE0)
                                                                                          + v6
                                                                                          + (v7 & 0xE0)
                                                                                          + (v5[a5] & 0xE0)) & 0x380u) >> 2;
  return result;
}

unsigned char *gle332Filter3(unsigned char *result, unsigned char *a2, uint64_t a3, int a4, int a5, int a6)
{
  __int16 v6 = &a2[a4];
  char v7 = &a2[a5];
  uint64_t v8 = &v6[a5];
  __int16 v9 = (*v6 & 0xE0) + (*a2 & 0xE0) + (*v7 & 0xE0) + (*v8 & 0xE0);
  char v10 = (*v6 & 0x1C) + (*a2 & 0x1C) + (*v7 & 0x1C) + (*v8 & 0x1C);
  int v11 = (*v6 & 3) + (*a2 & 3) + (*v7 & 3) + (*v8 & 3);
  char v12 = a2[a6];
  LOBYTE(v6) = v6[a6];
  LOBYTE(v7) = v7[a6];
  *uint32x2_t result = ((v11 + (v12 & 3) + (v6 & 3) + (v7 & 3) + (v8[a6] & 3)) | (v10 + (v12 & 0x1C) + (v6 & 0x1C) + (v7 & 0x1C) + (v8[a6] & 0x1C)) & 0xE0 | (v9 + (v12 & 0xE0) + (v6 & 0xE0) + (v7 & 0xE0) + (v8[a6] & 0xE0)) & 0x700u) >> 3;
  return result;
}

unsigned char *gle332FilterBox(unsigned char *result, unsigned char *a2, uint64_t a3, int a4, unsigned int a5, int a6, int a7)
{
  uint64_t v7 = 0;
  int v8 = 0;
  int v9 = 0;
  int v10 = 0;
  uint64_t v21 = *MEMORY[0x263EF8340];
  signed int v11 = 0xFFFFFFFF / a5 * a6;
  int v12 = ~(v11 >> 16);
  signed int v13 = 0xFFFFFFFF / a5 * (a6 - a7);
  signed int v14 = 0xFFFFFFFF / a5 + 0xFFFFFFFF / a5 * a7;
  int v15 = v12 - (v13 >> 16) + 0x10000;
  int v16 = v12 - (v14 >> 16);
  int v17 = v14 >> 16;
  if (a6 <= 2 * a7) {
    int v17 = v15;
  }
  v20[2] = v17;
  int v18 = v16 + 0x10000;
  if (a6 <= 2 * a7) {
    int v18 = v13 >> 16;
  }
  v20[0] = v18;
  v20[1] = (v11 >> 16) + 1;
  do
  {
    int v19 = v20[v7];
    v10 += (*a2 & 0xE0) * v19;
    v9 += (*a2 & 0x1C) * v19;
    v8 += (*a2 & 3) * v19;
    a2 += a4;
    ++v7;
  }
  while (v7 != 3);
  *uint32x2_t result = BYTE2(v10) & 0xE0 | BYTE2(v9) & 0x1C | BYTE2(v8) & 3;
  return result;
}

unsigned char *gle233RevFilter1(unsigned char *result, unsigned char *a2, uint64_t a3, int a4)
{
  *uint32x2_t result = (((a2[a4] & 0x38) + (*a2 & 0x38)) & 0x70 | ((a2[a4] & 7) + (*a2 & 7)) | ((a2[a4] & 0xC0)
                                                                                   + *a2) & 0x180u) >> 1;
  return result;
}

unsigned char *gle233RevFilter2(unsigned char *result, unsigned __int8 *a2, uint64_t a3, int a4, int a5)
{
  __int16 v5 = *a2;
  __int16 v6 = &a2[a4];
  unsigned __int8 v7 = a2[a5];
  *uint32x2_t result = (((*v6 & 0x38) + (v5 & 0x38) + (v7 & 0x38) + (v6[a5] & 0x38)) & 0xE0 | ((*v6 & 7)
                                                                                  + (v5 & 7)
                                                                                  + (v7 & 7)
                                                                                  + (v6[a5] & 7)) | ((*v6 & 0xC0) + v5 + (v7 & 0xC0) + (v6[a5] & 0xC0)) & 0x300u) >> 2;
  return result;
}

unsigned char *gle233RevFilter3(unsigned char *result, unsigned char *a2, uint64_t a3, int a4, int a5, int a6)
{
  __int16 v6 = &a2[a4];
  unsigned __int8 v7 = &a2[a5];
  int v8 = &v6[a5];
  int v9 = (*v6 & 7) + (*a2 & 7) + (*v7 & 7) + (*v8 & 7);
  __int16 v10 = (*v6 & 0x38) + (*a2 & 0x38) + (*v7 & 0x38) + (*v8 & 0x38);
  __int16 v11 = (*v6 & 0xC0) + (*a2 & 0xC0) + (*v7 & 0xC0) + (*v8 & 0xC0);
  char v12 = a2[a6];
  LOBYTE(v6) = v6[a6];
  LOBYTE(v7) = v7[a6];
  *uint32x2_t result = ((v10 + (v12 & 0x38) + (v6 & 0x38) + (v7 & 0x38) + (v8[a6] & 0x38)) & 0x1C0 | (v9 + (v12 & 7) + (v6 & 7) + (v7 & 7) + (v8[a6] & 7)) | (v11 + (v12 & 0xC0) + (v6 & 0xC0) + (v7 & 0xC0) + (v8[a6] & 0xC0)) & 0x600u) >> 3;
  return result;
}

unsigned char *gle233RevFilterBox(unsigned char *result, unsigned char *a2, uint64_t a3, int a4, unsigned int a5, int a6, int a7)
{
  uint64_t v7 = 0;
  int v8 = 0;
  int v9 = 0;
  int v10 = 0;
  uint64_t v21 = *MEMORY[0x263EF8340];
  signed int v11 = 0xFFFFFFFF / a5 * a6;
  int v12 = ~(v11 >> 16);
  signed int v13 = 0xFFFFFFFF / a5 * (a6 - a7);
  signed int v14 = 0xFFFFFFFF / a5 + 0xFFFFFFFF / a5 * a7;
  int v15 = v12 - (v13 >> 16) + 0x10000;
  int v16 = v12 - (v14 >> 16);
  int v17 = v14 >> 16;
  if (a6 <= 2 * a7) {
    int v17 = v15;
  }
  v20[2] = v17;
  int v18 = v16 + 0x10000;
  if (a6 <= 2 * a7) {
    int v18 = v13 >> 16;
  }
  v20[0] = v18;
  v20[1] = (v11 >> 16) + 1;
  do
  {
    int v19 = v20[v7];
    v10 += (*a2 & 7) * v19;
    v9 += (*a2 & 0x38) * v19;
    v8 += (*a2 & 0xC0) * v19;
    a2 += a4;
    ++v7;
  }
  while (v7 != 3);
  *uint32x2_t result = BYTE2(v9) & 0x38 | BYTE2(v10) & 7 | BYTE2(v8) & 0xC0;
  return result;
}

_WORD *gle565Filter1(_WORD *result, _WORD *a2, uint64_t a3, int a4)
{
  *uint32x2_t result = (((*(_WORD *)((char *)a2 + a4) & 0x1F) + (*a2 & 0x1F)) | ((*a2 & 0xF800)
                                                                    + *(unsigned __int16 *)((char *)a2 + a4)) & 0x1F000 | ((*(_WORD *)((char *)a2 + a4) & 0x7E0) + (*a2 & 0x7E0)) & 0xFC0u) >> 1;
  return result;
}

_WORD *gle565Filter2(_WORD *result, _WORD *a2, uint64_t a3, int a4, int a5)
{
  __int16 v5 = (_WORD *)((char *)a2 + a4);
  int v6 = *v5;
  __int16 v7 = *(_WORD *)((char *)a2 + a5);
  *uint32x2_t result = (((v6 & 0x1F) + (*a2 & 0x1F) + (v7 & 0x1F) + (*(unsigned __int16 *)((char *)v5 + a5) & 0x1F)) | ((v6 & 0x7E0) + (*a2 & 0x7E0) + (v7 & 0x7E0) + (*(unsigned __int16 *)((char *)v5 + a5) & 0x7E0)) & 0x1F80 | ((*a2 & 0xF800) + v6 + (v7 & 0xF800) + (*(unsigned __int16 *)((char *)v5 + a5) & 0xF800)) & 0x3E000u) >> 2;
  return result;
}

_WORD *gle565Filter3(_WORD *result, _WORD *a2, uint64_t a3, int a4, int a5, int a6)
{
  int v6 = (_WORD *)((char *)a2 + a4);
  __int16 v7 = (_WORD *)((char *)a2 + a5);
  int v8 = (_WORD *)((char *)v6 + a5);
  int v9 = (*v6 & 0xF800) + (*a2 & 0xF800) + (*v7 & 0xF800) + (*v8 & 0xF800);
  __int16 v10 = (*v6 & 0x7E0) + (*a2 & 0x7E0) + (*v7 & 0x7E0) + (*v8 & 0x7E0);
  int v11 = (*v6 & 0x1F) + (*a2 & 0x1F) + (*v7 & 0x1F) + (*v8 & 0x1F);
  __int16 v12 = *(_WORD *)((char *)a2 + a6);
  LOWORD(v6) = *(_WORD *)((char *)v6 + a6);
  LOWORD(v7) = *(_WORD *)((char *)v7 + a6);
  *uint32x2_t result = ((v11
            + (v12 & 0x1F)
            + (v6 & 0x1F)
            + (v7 & 0x1F)
            + (*(_WORD *)((char *)v8 + a6) & 0x1F)) | (v10
                                                     + (v12 & 0x7E0)
                                                     + ((unsigned __int16)v6 & 0x7E0)
                                                     + ((unsigned __int16)v7 & 0x7E0)
                                                     + (*(_WORD *)((char *)v8 + a6) & 0x7E0)) & 0x3F00 | (v9 + (v12 & 0xF800) + ((unsigned __int16)v6 & 0xF800) + ((unsigned __int16)v7 & 0xF800) + (*(_WORD *)((char *)v8 + a6) & 0xF800)) & 0x7C000u) >> 3;
  return result;
}

_WORD *gle565FilterBox(_WORD *result, _WORD *a2, uint64_t a3, int a4, unsigned int a5, int a6, int a7)
{
  uint64_t v7 = 0;
  int v8 = 0;
  int v9 = 0;
  int v10 = 0;
  uint64_t v21 = *MEMORY[0x263EF8340];
  signed int v11 = 0xFFFFFFFF / a5 * a6;
  int v12 = ~(v11 >> 16);
  signed int v13 = 0xFFFFFFFF / a5 * (a6 - a7);
  signed int v14 = 0xFFFFFFFF / a5 + 0xFFFFFFFF / a5 * a7;
  int v15 = v12 - (v13 >> 16) + 0x10000;
  int v16 = v12 - (v14 >> 16);
  int v17 = v14 >> 16;
  if (a6 <= 2 * a7) {
    int v17 = v15;
  }
  v20[2] = v17;
  int v18 = v16 + 0x10000;
  if (a6 <= 2 * a7) {
    int v18 = v13 >> 16;
  }
  v20[0] = v18;
  v20[1] = (v11 >> 16) + 1;
  do
  {
    int v19 = v20[v7];
    v10 += (*a2 & 0xF800) * v19;
    v9 += (*a2 & 0x7E0) * v19;
    v8 += (*a2 & 0x1F) * v19;
    a2 = (_WORD *)((char *)a2 + a4);
    ++v7;
  }
  while (v7 != 3);
  *uint32x2_t result = HIWORD(v10) & 0xF800 | HIWORD(v9) & 0x7E0 | BYTE2(v8) & 0x1F;
  return result;
}

_WORD *gle4444Filter1(_WORD *result, _WORD *a2, uint64_t a3, int a4)
{
  int v4 = *(unsigned __int16 *)((char *)a2 + a4);
  *uint32x2_t result = (((v4 & 0xF) + (*a2 & 0xF)) | ((*a2 & 0xF000) + v4) & 0x1E000 | ((v4 & 0xF00) + (*a2 & 0xF00)) & 0x1E00 | ((v4 & 0xF0) + (*a2 & 0xF0)) & 0x1E0u) >> 1;
  return result;
}

_WORD *gle4444Filter2(_WORD *result, _WORD *a2, uint64_t a3, int a4, int a5)
{
  __int16 v5 = (_WORD *)((char *)a2 + a4);
  int v6 = *v5;
  __int16 v7 = *(_WORD *)((char *)a2 + a5);
  LOWORD(v5) = *(unsigned __int16 *)((char *)v5 + a5);
  *uint32x2_t result = (((v6 & 0xF) + (*a2 & 0xF) + (v7 & 0xF) + (v5 & 0xF)) | ((v6 & 0xF00)
                                                                                    + (*a2 & 0xF00)
                                                                                    + (v7 & 0xF00)
                                                                                    + ((unsigned __int16)v5 & 0xF00)) & 0x3C00 | ((*a2 & 0xF000) + v6 + (v7 & 0xF000) + ((unsigned __int16)v5 & 0xF000)) & 0x3C000 | ((v6 & 0xF0) + (*a2 & 0xF0) + (v7 & 0xF0) + (v5 & 0xF0)) & 0x3C0u) >> 2;
  return result;
}

_WORD *gle4444Filter3(_WORD *result, _WORD *a2, uint64_t a3, int a4, int a5, int a6)
{
  int v6 = (_WORD *)((char *)a2 + a4);
  __int16 v7 = (_WORD *)((char *)a2 + a5);
  int v8 = (_WORD *)((char *)v6 + a5);
  int v9 = (*v6 & 0xF000) + (*a2 & 0xF000) + (*v7 & 0xF000) + (*v8 & 0xF000);
  __int16 v10 = (*v6 & 0xF00) + (*a2 & 0xF00) + (*v7 & 0xF00) + (*v8 & 0xF00);
  int v11 = (*v6 & 0xF0) + (*a2 & 0xF0) + (*v7 & 0xF0) + (*v8 & 0xF0);
  int v12 = (*v6 & 0xF) + (*a2 & 0xF) + (*v7 & 0xF) + (*v8 & 0xF);
  __int16 v13 = *(_WORD *)((char *)a2 + a6);
  LOWORD(v6) = *(_WORD *)((char *)v6 + a6);
  int v14 = (v13 & 0xF000) + ((unsigned __int16)v6 & 0xF000);
  __int16 v15 = (v13 & 0xF00) + ((unsigned __int16)v6 & 0xF00);
  int v16 = (v13 & 0xF0) + (v6 & 0xF0);
  LODWORD(v6) = (v13 & 0xF) + (v6 & 0xF);
  LOWORD(v7) = *(_WORD *)((char *)v7 + a6);
  int v17 = v14 + ((unsigned __int16)v7 & 0xF000);
  LOWORD(v14) = v15 + ((unsigned __int16)v7 & 0xF00);
  int v18 = v16 + (v7 & 0xF0);
  LODWORD(v6) = v6 + (v7 & 0xF);
  LOWORD(v7) = *(_WORD *)((char *)v8 + a6);
  *uint32x2_t result = ((v12 + v6 + (v7 & 0xF)) | (v10 + (_WORD)v14 + ((unsigned __int16)v7 & 0xF00)) & 0x7800 | (v9 + v17 + ((unsigned __int16)v7 & 0xF000)) & 0x78000 | (v11 + v18 + (v7 & 0xF0)) & 0x780u) >> 3;
  return result;
}

int8x8_t gle4444FilterBox(_WORD *a1, unsigned __int16 *a2, uint64_t a3, int a4, unsigned int a5, int a6, int a7)
{
  uint64_t v7 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  signed int v8 = 0xFFFFFFFF / a5 * a6;
  int v9 = (v8 >> 16) + 1;
  int v10 = ~(v8 >> 16);
  int v11 = v10 - ((int)(0xFFFFFFFF / a5 * (a6 - a7)) >> 16) + 0x10000;
  int v12 = v10 - ((int)(0xFFFFFFFF / a5 + 0xFFFFFFFF / a5 * a7) >> 16) + 0x10000;
  if (a6 > 2 * a7) {
    int v13 = (int)(0xFFFFFFFF / a5 + 0xFFFFFFFF / a5 * a7) >> 16;
  }
  else {
    int v13 = v11;
  }
  if (a6 <= 2 * a7) {
    int v12 = (int)(0xFFFFFFFF / a5 * (a6 - a7)) >> 16;
  }
  v19[1] = v9;
  v19[2] = v13;
  v19[0] = v12;
  int32x4_t v14 = 0uLL;
  do
  {
    __int16 v15 = (const float *)&v19[v7];
    int32x4_t v16 = (int32x4_t)vld1q_dup_f32(v15);
    int32x4_t v14 = vmlaq_s32(v14, (int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(*a2), (int8x16_t)xmmword_227DC2770), v16);
    a2 = (unsigned __int16 *)((char *)a2 + a4);
    ++v7;
  }
  while (v7 != 3);
  int8x16_t v17 = vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v14, 0x10uLL), (int8x16_t)xmmword_227DC2770);
  int8x8_t result = vorr_s8(*(int8x8_t *)v17.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL));
  *a1 = result.i16[0] | result.i16[2];
  return result;
}

_WORD *gle5551Filter1(_WORD *result, _WORD *a2, uint64_t a3, int a4)
{
  int v4 = *(unsigned __int16 *)((char *)a2 + a4);
  *int8x8_t result = (((v4 & 1) + (*a2 & 1)) | ((*a2 & 0xF800) + v4) & 0x1F000 | ((v4 & 0x7C0) + (*a2 & 0x7C0)) & 0xF80 | ((v4 & 0x3E) + (*a2 & 0x3E)) & 0x7Cu) >> 1;
  return result;
}

_WORD *gle5551Filter2(_WORD *result, _WORD *a2, uint64_t a3, int a4, int a5)
{
  __int16 v5 = (_WORD *)((char *)a2 + a4);
  int v6 = *v5;
  __int16 v7 = *(_WORD *)((char *)a2 + a5);
  LOWORD(v5) = *(unsigned __int16 *)((char *)v5 + a5);
  *int8x8_t result = (((v6 & 1) + (*a2 & 1) + (v7 & 1) + (v5 & 1)) | ((v6 & 0x7C0)
                                                                            + (*a2 & 0x7C0)
                                                                            + (v7 & 0x7C0)
                                                                            + ((unsigned __int16)v5 & 0x7C0)) & 0x1F00 | ((*a2 & 0xF800) + v6 + (v7 & 0xF800) + ((unsigned __int16)v5 & 0xF800)) & 0x3E000 | ((v6 & 0x3E) + (*a2 & 0x3E) + (v7 & 0x3E) + (v5 & 0x3E)) & 0xF8u) >> 2;
  return result;
}

_WORD *gle5551Filter3(_WORD *result, _WORD *a2, uint64_t a3, int a4, int a5, int a6)
{
  int v6 = (_WORD *)((char *)a2 + a4);
  __int16 v7 = (_WORD *)((char *)a2 + a5);
  signed int v8 = (_WORD *)((char *)v6 + a5);
  int v9 = (*v6 & 0xF800) + (*a2 & 0xF800) + (*v7 & 0xF800) + (*v8 & 0xF800);
  __int16 v10 = (*v6 & 0x7C0) + (*a2 & 0x7C0) + (*v7 & 0x7C0) + (*v8 & 0x7C0);
  int v11 = (*v6 & 0x3E) + (*a2 & 0x3E) + (*v7 & 0x3E) + (*v8 & 0x3E);
  int v12 = (*v6 & 1) + (*a2 & 1) + (*v7 & 1) + (*v8 & 1);
  __int16 v13 = *(_WORD *)((char *)a2 + a6);
  LOWORD(v6) = *(_WORD *)((char *)v6 + a6);
  int v14 = (v13 & 0xF800) + ((unsigned __int16)v6 & 0xF800);
  __int16 v15 = (v13 & 0x7C0) + ((unsigned __int16)v6 & 0x7C0);
  int v16 = (v13 & 0x3E) + (v6 & 0x3E);
  LODWORD(v6) = (v13 & 1) + (v6 & 1);
  LOWORD(v7) = *(_WORD *)((char *)v7 + a6);
  int v17 = v14 + ((unsigned __int16)v7 & 0xF800);
  LOWORD(v14) = v15 + ((unsigned __int16)v7 & 0x7C0);
  int v18 = v16 + (v7 & 0x3E);
  LODWORD(v6) = v6 + (v7 & 1);
  LOWORD(v7) = *(_WORD *)((char *)v8 + a6);
  *int8x8_t result = ((v12 + v6 + (v7 & 1)) | (v10 + (_WORD)v14 + ((unsigned __int16)v7 & 0x7C0)) & 0x3E00 | (v9 + v17 + ((unsigned __int16)v7 & 0xF800)) & 0x7C000 | (v11 + v18 + (v7 & 0x3E)) & 0x1F0u) >> 3;
  return result;
}

_WORD *gle5551FilterBox(_WORD *result, unsigned __int16 *a2, uint64_t a3, int a4, unsigned int a5, int a6, int a7)
{
  uint64_t v7 = 0;
  int v8 = 0;
  int v9 = 0;
  int v10 = 0;
  int v11 = 0;
  uint64_t v24 = *MEMORY[0x263EF8340];
  signed int v12 = 0xFFFFFFFF / a5 * a6;
  int v13 = ~(v12 >> 16);
  signed int v14 = 0xFFFFFFFF / a5 * (a6 - a7);
  signed int v15 = 0xFFFFFFFF / a5 + 0xFFFFFFFF / a5 * a7;
  int v16 = v13 - (v14 >> 16) + 0x10000;
  int v17 = v13 - (v15 >> 16);
  int v18 = v15 >> 16;
  if (a6 <= 2 * a7) {
    int v18 = v16;
  }
  int v19 = v14 >> 16;
  int v20 = v17 + 0x10000;
  if (a6 <= 2 * a7) {
    int v20 = v19;
  }
  v23[2] = v18;
  v23[0] = v20;
  v23[1] = (v12 >> 16) + 1;
  do
  {
    int v21 = v23[v7];
    int v22 = *a2;
    v11 += (v22 & 0xF800) * v21;
    v10 += (v22 & 0x7C0) * v21;
    v9 += (v22 & 0x3E) * v21;
    v8 += (v22 << 31 >> 31) & v21;
    a2 = (unsigned __int16 *)((char *)a2 + a4);
    ++v7;
  }
  while (v7 != 3);
  *int8x8_t result = HIWORD(v11) & 0xF800 | HIWORD(v10) & 0x7C0 | BYTE2(v9) & 0x3E | BYTE2(v8) & 1;
  return result;
}

_WORD *gle1555RevFilter1(_WORD *result, unsigned __int16 *a2, uint64_t a3, int a4)
{
  int v4 = *a2;
  *int8x8_t result = (((*(unsigned __int16 *)((char *)a2 + a4) & 0x3E0) + (v4 & 0x3E0)) & 0x7C0 | ((*(unsigned __int16 *)((char *)a2 + a4) & 0x1F)
                                                                                        + (v4 & 0x1F)) | ((*(unsigned __int16 *)((char *)a2 + a4) & 0x7C00) + (v4 & 0x7C00)) & 0xF800 | ((*(unsigned __int16 *)((char *)a2 + a4) & 0x8000) + v4) & 0x10000u) >> 1;
  return result;
}

_WORD *gle1555RevFilter2(_WORD *result, unsigned __int16 *a2, uint64_t a3, int a4, int a5)
{
  int v5 = *a2;
  int v6 = (unsigned __int16 *)((char *)a2 + a4);
  __int16 v7 = *(unsigned __int16 *)((char *)a2 + a5);
  *int8x8_t result = (((*v6 & 0x3E0) + (v5 & 0x3E0) + (v7 & 0x3E0) + (*(_WORD *)((char *)v6 + a5) & 0x3E0)) & 0xF80 | ((*v6 & 0x1F) + (v5 & 0x1F) + (v7 & 0x1F) + (*(_WORD *)((char *)v6 + a5) & 0x1F)) | ((*v6 & 0x7C00) + (v5 & 0x7C00) + (v7 & 0x7C00) + (*(_WORD *)((char *)v6 + a5) & 0x7C00)) & 0x1F000 | ((*v6 & 0x8000) + v5 + (v7 & 0x8000) + (*(_WORD *)((char *)v6 + a5) & 0x8000)) & 0x20000u) >> 2;
  return result;
}

_WORD *gle1555RevFilter3(_WORD *result, _WORD *a2, uint64_t a3, int a4, int a5, int a6)
{
  int v6 = (_WORD *)((char *)a2 + a4);
  __int16 v7 = (_WORD *)((char *)a2 + a5);
  int v8 = (_WORD *)((char *)v6 + a5);
  int v9 = (*v6 & 0x1F) + (*a2 & 0x1F) + (*v7 & 0x1F) + (*v8 & 0x1F);
  __int16 v10 = (*v6 & 0x3E0) + (*a2 & 0x3E0) + (*v7 & 0x3E0) + (*v8 & 0x3E0);
  int v11 = (*v6 & 0x7C00) + (*a2 & 0x7C00) + (*v7 & 0x7C00) + (*v8 & 0x7C00);
  int v12 = (*v6 & 0x8000) + (*a2 & 0x8000) + (*v7 & 0x8000) + (*v8 & 0x8000);
  __int16 v13 = *(_WORD *)((char *)a2 + a6);
  LOWORD(v6) = *(_WORD *)((char *)v6 + a6);
  LOWORD(v7) = *(_WORD *)((char *)v7 + a6);
  *int8x8_t result = ((v10
            + (v13 & 0x3E0)
            + ((unsigned __int16)v6 & 0x3E0)
            + ((unsigned __int16)v7 & 0x3E0)
            + (*(_WORD *)((char *)v8 + a6) & 0x3E0)) & 0x1F00 | (v9
                                                               + (v13 & 0x1F)
                                                               + (v6 & 0x1F)
                                                               + (v7 & 0x1F)
                                                               + (*(_WORD *)((char *)v8 + a6) & 0x1F)) | (v11 + (v13 & 0x7C00) + ((unsigned __int16)v6 & 0x7C00) + ((unsigned __int16)v7 & 0x7C00) + (*(_WORD *)((char *)v8 + a6) & 0x7C00)) & 0x3E000 | (v12 + (v13 & 0x8000) + ((unsigned __int16)v6 & 0x8000) + ((unsigned __int16)v7 & 0x8000) + (*(_WORD *)((char *)v8 + a6) & 0x8000)) & 0x40000u) >> 3;
  return result;
}

int8x8_t gle1555RevFilterBox(_WORD *a1, unsigned __int16 *a2, uint64_t a3, int a4, unsigned int a5, int a6, int a7)
{
  uint64_t v7 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  signed int v8 = 0xFFFFFFFF / a5 * a6;
  int v9 = (v8 >> 16) + 1;
  int v10 = ~(v8 >> 16);
  int v11 = v10 - ((int)(0xFFFFFFFF / a5 * (a6 - a7)) >> 16) + 0x10000;
  int v12 = v10 - ((int)(0xFFFFFFFF / a5 + 0xFFFFFFFF / a5 * a7) >> 16) + 0x10000;
  if (a6 > 2 * a7) {
    int v13 = (int)(0xFFFFFFFF / a5 + 0xFFFFFFFF / a5 * a7) >> 16;
  }
  else {
    int v13 = v11;
  }
  if (a6 <= 2 * a7) {
    int v12 = (int)(0xFFFFFFFF / a5 * (a6 - a7)) >> 16;
  }
  v19[1] = v9;
  v19[2] = v13;
  v19[0] = v12;
  int32x4_t v14 = 0uLL;
  do
  {
    signed int v15 = (const float *)&v19[v7];
    int32x4_t v16 = (int32x4_t)vld1q_dup_f32(v15);
    int32x4_t v14 = vmlaq_s32(v14, (int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(*a2), (int8x16_t)xmmword_227DC2780), v16);
    a2 = (unsigned __int16 *)((char *)a2 + a4);
    ++v7;
  }
  while (v7 != 3);
  int8x16_t v17 = vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v14, 0x10uLL), (int8x16_t)xmmword_227DC2780);
  int8x8_t result = vorr_s8(*(int8x8_t *)v17.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL));
  *a1 = result.i16[0] | result.i16[2];
  return result;
}

unsigned int *gle8888Filter1(unsigned int *result, _DWORD *a2, uint64_t a3, int a4)
{
  *int8x8_t result = (((*(_DWORD *)((char *)a2 + a4) >> 1) & 0x7F800000) + (*a2 >> 1)) & 0xFF000000 | (((*(_DWORD *)((char *)a2 + a4)
                                                                                              + *a2) | ((*(_DWORD *)((char *)a2 + a4) & 0xFF0000) + (*a2 & 0xFF0000)) & 0x1FE0000u) >> 1) | (((*(_DWORD *)((char *)a2 + a4) & 0xFF00) + (*a2 & 0xFF00u)) >> 1) & 0xFF00;
  return result;
}

unsigned int *gle8888Filter2(unsigned int *result, _DWORD *a2, uint64_t a3, int a4, int a5)
{
  int v5 = (_DWORD *)((char *)a2 + a4);
  int v6 = *v5 & 0xFF00;
  unsigned int v7 = *(_DWORD *)((char *)a2 + a5);
  int v8 = ((*v5 >> 2) & 0x3FC00000) + (*a2 >> 2) + (HIBYTE(v7) << 22);
  int v9 = (*v5 & 0xFF0000) + (*a2 & 0xFF0000) + (v7 & 0xFF0000);
  int v10 = *v5 + *a2 + v7;
  LODWORD(v5) = *(_DWORD *)((char *)v5 + a5);
  *int8x8_t result = (v8 + (v5 >> 24 << 22)) & 0xFF000000 | (((v10 + v5) | (v9
                                                                                                + (v5 & 0xFF0000)) & 0x3FC0000) >> 2) | ((v6 + (*a2 & 0xFF00) + (v7 & 0xFF00) + ((unsigned __int16)v5 & 0xFF00)) >> 2) & 0xFF00;
  return result;
}

int32x2_t gle8888Filter3(unsigned __int32 *a1, unsigned int *a2, uint64_t a3, int a4, int a5, int a6)
{
  unsigned int v6 = *a2;
  unsigned int v7 = (unsigned int *)((char *)a2 + a4);
  unsigned int v8 = *v7;
  int v9 = (unsigned int *)((char *)a2 + a5);
  unsigned int v10 = *v9;
  int v11 = (*v7 & 0xFF00) + (*a2 & 0xFF00) + (*v9 & 0xFF00);
  int v12 = (unsigned int *)((char *)v7 + a5);
  unsigned int v13 = *v12;
  int v14 = ((*v7 >> 3) & 0x1FE00000) + (HIBYTE(*a2) << 21) + (HIBYTE(*v9) << 21) + (HIBYTE(*v12) << 21);
  unsigned int v15 = *(unsigned int *)((char *)a2 + a6);
  LODWORD(v7) = *(unsigned int *)((char *)v7 + a6);
  LODWORD(v9) = *(unsigned int *)((char *)v9 + a6);
  LODWORD(v12) = *(unsigned int *)((char *)v12 + a6);
  int32x2_t result = vadd_s32(vadd_s32(vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v8), (int8x8_t)0xFF0000000000FFLL), (int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v6), (int8x8_t)0xFF0000000000FFLL)), (int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v10), (int8x8_t)0xFF0000000000FFLL)), vadd_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v13), (int8x8_t)0xFF0000000000FFLL), (int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v15), (int8x8_t)0xFF0000000000FFLL))), vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v7), (int8x8_t)0xFF0000000000FFLL), (int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v9), (int8x8_t)0xFF0000000000FFLL)), (int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v12), (int8x8_t)0xFF0000000000FFLL)));
  *a1 = (v14
       + (HIBYTE(v15) << 21)
       + (v7 >> 24 << 21)
       + (v9 >> 24 << 21)
       + (v12 >> 24 << 21)) & 0xFF000000 | ((result.i32[0] | result.i32[1] & 0x7F80000u) >> 3) | ((v11 + (v13 & 0xFF00) + (v15 & 0xFF00) + ((unsigned __int16)v7 & 0xFF00) + ((unsigned __int16)v9 & 0xFF00) + ((unsigned __int16)v12 & 0xFF00)) >> 3) & 0xFF00;
  return result;
}

int *gle8888FilterBox(int *result, _DWORD *a2, uint64_t a3, int a4, unsigned int a5, int a6, int a7)
{
  uint64_t v7 = 0;
  int v8 = 0;
  unsigned int v9 = 0;
  int v10 = 0;
  int v11 = 0;
  uint64_t v23 = *MEMORY[0x263EF8340];
  signed int v12 = 0xFFFFFFFF / a5 * a6;
  int v13 = ~(v12 >> 16);
  signed int v14 = 0xFFFFFFFF / a5 * (a6 - a7);
  signed int v15 = 0xFFFFFFFF / a5 + 0xFFFFFFFF / a5 * a7;
  int v16 = v13 - (v14 >> 16) + 0x10000;
  int v17 = v13 - (v15 >> 16);
  int v18 = v15 >> 16;
  if (a6 <= 2 * a7) {
    int v18 = v16;
  }
  int v19 = v14 >> 16;
  int v20 = v17 + 0x10000;
  if (a6 <= 2 * a7) {
    int v20 = v19;
  }
  v22[2] = v18;
  v22[0] = v20;
  v22[1] = (v12 >> 16) + 1;
  do
  {
    int v21 = v22[v7];
    v11 += HIBYTE(*a2) * v21;
    v10 += BYTE2(*a2) * v21;
    v9 += BYTE1(*a2) * v21;
    v8 += *a2 * v21;
    a2 = (_DWORD *)((char *)a2 + a4);
    ++v7;
  }
  while (v7 != 3);
  *int32x2_t result = v10 & 0xFF0000 | (BYTE2(v11) << 24) | (v9 >> 8) & 0xFF00 | BYTE2(v8);
  return result;
}

_WORD *gle88Filter1(_WORD *result, _WORD *a2, uint64_t a3, int a4)
{
  *int32x2_t result = (((*(_WORD *)((char *)a2 + a4) & 0xFF00) + (unsigned __int16)*a2) & 0x1FE00 | (*(_WORD *)((char *)a2 + a4)
                                                                                         + *a2)) >> 1;
  return result;
}

_WORD *gle88Filter2(_WORD *result, _WORD *a2, uint64_t a3, int a4, int a5)
{
  int v5 = (_WORD *)((char *)a2 + a4);
  *int32x2_t result = (((*v5 & 0xFF00)
            + (unsigned __int16)*a2
            + (*(_WORD *)((char *)a2 + a5) & 0xFF00)
            + (*(_WORD *)((char *)v5 + a5) & 0xFF00)) & 0x3FC00 | (*v5
                                                                 + *a2
                                                                 + *(_WORD *)((char *)a2 + a5)
                                                                 + *(_WORD *)((char *)v5 + a5))) >> 2;
  return result;
}

_WORD *gle88Filter3(_WORD *result, _WORD *a2, uint64_t a3, int a4, int a5, int a6)
{
  unsigned int v6 = (_WORD *)((char *)a2 + a4);
  uint64_t v7 = (_WORD *)((char *)a2 + a5);
  int v8 = (_WORD *)((char *)v6 + a5);
  *int32x2_t result = (((*v6 & 0xFF00)
            + (*a2 & 0xFF00)
            + (*v7 & 0xFF00)
            + (*v8 & 0xFF00)
            + (*(_WORD *)((char *)a2 + a6) & 0xFF00)
            + (*(_WORD *)((char *)v6 + a6) & 0xFF00)
            + (*(_WORD *)((char *)v7 + a6) & 0xFF00)
            + (*(_WORD *)((char *)v8 + a6) & 0xFF00)) & 0x7F800 | (*v6
                                                                 + *a2
                                                                 + *v7
                                                                 + *v8
                                                                 + *(_WORD *)((char *)a2 + a6)
                                                                 + *(_WORD *)((char *)v6 + a6)
                                                                 + *(_WORD *)((char *)v7 + a6)
                                                                 + *(_WORD *)((char *)v8 + a6))) >> 3;
  return result;
}

_WORD *gle88FilterBox(_WORD *result, _WORD *a2, uint64_t a3, int a4, unsigned int a5, int a6, int a7)
{
  uint64_t v7 = 0;
  int v8 = 0;
  int v9 = 0;
  uint64_t v21 = *MEMORY[0x263EF8340];
  signed int v10 = 0xFFFFFFFF / a5 * a6;
  int v11 = ~(v10 >> 16);
  signed int v12 = 0xFFFFFFFF / a5 * (a6 - a7);
  signed int v13 = 0xFFFFFFFF / a5 + 0xFFFFFFFF / a5 * a7;
  int v14 = v11 - (v12 >> 16) + 0x10000;
  int v15 = v11 - (v13 >> 16);
  int v16 = v13 >> 16;
  if (a6 <= 2 * a7) {
    int v16 = v14;
  }
  int v17 = v12 >> 16;
  int v18 = v15 + 0x10000;
  v20[1] = (v10 >> 16) + 1;
  v20[2] = v16;
  if (a6 <= 2 * a7) {
    int v18 = v17;
  }
  v20[0] = v18;
  do
  {
    int v19 = v20[v7];
    v9 += (*a2 & 0xFF00) * v19;
    v8 += *a2 * v19;
    a2 = (_WORD *)((char *)a2 + a4);
    ++v7;
  }
  while (v7 != 3);
  *int32x2_t result = HIWORD(v9) & 0xFF00 | BYTE2(v8);
  return result;
}

unsigned int *gle1010102Filter1(unsigned int *result, _DWORD *a2, uint64_t a3, int a4)
{
  unsigned int v4 = *(_DWORD *)((char *)a2 + a4);
  *int32x2_t result = (((v4 >> 1) & 0x7FE00000) + (*a2 >> 1)) & 0xFFC00000 | ((((v4 & 3) + (*a2 & 3)) | ((v4 & 0x3FF000)
                                                                                             + (*a2 & 0x3FF000)) & 0x7FE000) >> 1) | (((v4 & 0xFFC) + (*a2 & 0xFFC)) >> 1) & 0xFFC;
  return result;
}

unsigned int *gle1010102Filter2(unsigned int *result, _DWORD *a2, uint64_t a3, int a4, int a5)
{
  int v5 = (_DWORD *)((char *)a2 + a4);
  int v6 = *v5 & 0xFFC;
  unsigned int v7 = *(_DWORD *)((char *)a2 + a5);
  int v8 = ((*v5 >> 2) & 0x3FF00000) + (*a2 >> 2) + (v7 >> 22 << 20);
  int v9 = (*v5 & 0x3FF000) + (*a2 & 0x3FF000) + (v7 & 0x3FF000);
  int v10 = (*v5 & 3) + (*a2 & 3) + (v7 & 3);
  LODWORD(v5) = *(_DWORD *)((char *)v5 + a5);
  *int32x2_t result = (v8 + (v5 >> 22 << 20)) & 0xFFC00000 | (((v10 + (v5 & 3)) | (v9 + (v5 & 0x3FF000)) & 0xFFC000) >> 2) | ((v6 + (*a2 & 0xFFC) + (v7 & 0xFFC) + ((unsigned __int16)v5 & 0xFFC)) >> 2) & 0xFFC;
  return result;
}

int32x2_t gle1010102Filter3(unsigned __int32 *a1, unsigned int *a2, uint64_t a3, int a4, int a5, int a6)
{
  int v6 = (unsigned int *)((char *)a2 + a4);
  unsigned int v7 = *v6;
  int v8 = (unsigned int *)((char *)a2 + a5);
  unsigned int v9 = *v8;
  int v10 = (unsigned int *)((char *)v6 + a5);
  unsigned int v11 = *v10;
  LODWORD(v6) = *(unsigned int *)((char *)v6 + a6);
  LODWORD(v8) = *(unsigned int *)((char *)v8 + a6);
  LODWORD(v10) = *(unsigned int *)((char *)v10 + a6);
  int32x2_t result = vadd_s32(vadd_s32(vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v7), (int8x8_t)0x3FF00000000003), (int32x2_t)vand_s8((int8x8_t)vdup_n_s32(*a2), (int8x8_t)0x3FF00000000003)), (int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v9), (int8x8_t)0x3FF00000000003)), vadd_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v11), (int8x8_t)0x3FF00000000003), (int32x2_t)vand_s8((int8x8_t)vdup_n_s32(*(unsigned int *)((char *)a2 + a6)), (int8x8_t)0x3FF00000000003))), vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v6), (int8x8_t)0x3FF00000000003), (int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v8), (int8x8_t)0x3FF00000000003)), (int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v10), (int8x8_t)0x3FF00000000003)));
  *a1 = (((v7 >> 3) & 0x1FF80000)
       + (*a2 >> 22 << 19)
       + (v9 >> 22 << 19)
       + (v11 >> 22 << 19)
       + (*(unsigned int *)((char *)a2 + a6) >> 22 << 19)
       + (v6 >> 22 << 19)
       + (v8 >> 22 << 19)
       + (v10 >> 22 << 19)) & 0xFFC00000 | ((result.i32[0] | result.i32[1] & 0x1FF8000u) >> 3) | (((v7 & 0xFFC) + (*a2 & 0xFFC) + (v9 & 0xFFC) + (v11 & 0xFFC) + (*(unsigned int *)((char *)a2 + a6) & 0xFFC) + ((unsigned __int16)v6 & 0xFFC) + ((unsigned __int16)v8 & 0xFFC) + ((unsigned __int16)v10 & 0xFFC)) >> 3) & 0xFFC;
  return result;
}

int8x8_t gle1010102FilterBox(__int32 *a1, unsigned int *a2, uint64_t a3, int a4, unsigned int a5, int a6, int a7)
{
  uint64_t v7 = 0;
  unsigned int v8 = 0;
  unsigned int v9 = 0;
  uint64_t v24 = *MEMORY[0x263EF8340];
  signed int v10 = 0xFFFFFFFF / a5 * a6;
  int v11 = ~(v10 >> 16);
  signed int v12 = 0xFFFFFFFF / a5 * (a6 - a7);
  signed int v13 = 0xFFFFFFFF / a5 + 0xFFFFFFFF / a5 * a7;
  int v14 = v11 - (v12 >> 16) + 0x10000;
  int v15 = v11 - (v13 >> 16);
  int v16 = v13 >> 16;
  if (a6 <= 2 * a7) {
    int v16 = v14;
  }
  int v17 = (v10 >> 16) + 1;
  int v18 = v12 >> 16;
  int v19 = v15 + 0x10000;
  if (a6 <= 2 * a7) {
    int v19 = v18;
  }
  v23[1] = v17;
  v23[2] = v16;
  v23[0] = v19;
  int32x2_t v20 = 0;
  do
  {
    unsigned int v21 = v23[v7];
    v9 += (*a2 >> 22) * v21;
    int32x2_t v20 = vmla_s32(v20, (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*a2), (uint32x2_t)0xFFFFFFFEFFFFFFF4), (int8x8_t)0x300000003), vdup_n_s32(v21));
    v8 += (*a2 & 3) * v21;
    a2 = (unsigned int *)((char *)a2 + a4);
    ++v7;
  }
  while (v7 != 3);
  int8x8_t result = vand_s8((int8x8_t)vshl_u32((uint32x2_t)v20, (uint32x2_t)0xFFFFFFF2FFFFFFFCLL), (int8x8_t)0xFFC003FF000);
  *a1 = result.i32[0] | (HIWORD(v9) << 22) | HIWORD(v8) & 3 | result.i32[1];
  return result;
}

unsigned int *gle2101010RevFilter1(unsigned int *result, _DWORD *a2, uint64_t a3, int a4)
{
  unsigned int v4 = *(_DWORD *)((char *)a2 + a4);
  *int8x8_t result = (((v4 >> 1) & 0x60000000) + (*a2 >> 1)) & 0xC0000000 | ((((v4 & 0xFFC00) + (*a2 & 0xFFC00)) & 0x1FF800 | ((v4 & 0x3FF) + (*a2 & 0x3FF)) | ((v4 & 0x3FF00000) + (*a2 & 0x3FF00000)) & 0x7FE00000) >> 1);
  return result;
}

int8x8_t gle2101010RevFilter2(unsigned __int32 *a1, unsigned int *a2, uint64_t a3, int a4, int a5)
{
  int v5 = (unsigned int *)((char *)a2 + a4);
  unsigned int v6 = *v5;
  unsigned int v7 = *(unsigned int *)((char *)a2 + a5);
  int v8 = (*v5 & 0x3FF) + (*a2 & 0x3FF) + (v7 & 0x3FF);
  int v9 = ((*v5 >> 2) & 0x30000000) + (*a2 >> 2) + (v7 >> 30 << 28);
  LODWORD(v5) = *(unsigned int *)((char *)v5 + a5);
  int8x8_t result = vand_s8((int8x8_t)vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v6), (int8x8_t)0x3FF00000000FFC00), (int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v5), (int8x8_t)0x3FF00000000FFC00)), vadd_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(*a2), (int8x8_t)0x3FF00000000FFC00), (int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v7), (int8x8_t)0x3FF00000000FFC00))), (int8x8_t)0xFFC00000003FF000);
  *a1 = (v9 + (v5 >> 30 << 28)) & 0xC0000000 | ((result.i32[0] | (v8 + ((unsigned __int16)v5 & 0x3FFu)) | result.i32[1]) >> 2);
  return result;
}

int8x8_t gle2101010RevFilter3(__int32 *a1, unsigned int *a2, uint64_t a3, int a4, int a5, int a6)
{
  unsigned int v6 = (unsigned int *)((char *)a2 + a4);
  unsigned int v7 = *v6;
  int v8 = (unsigned int *)((char *)a2 + a5);
  unsigned int v9 = *v8;
  signed int v10 = (unsigned int *)((char *)v6 + a5);
  unsigned int v11 = *v10;
  unsigned int v12 = *(unsigned int *)((char *)a2 + a6);
  LODWORD(v6) = *(unsigned int *)((char *)v6 + a6);
  LODWORD(v8) = *(unsigned int *)((char *)v8 + a6);
  LODWORD(v10) = *(unsigned int *)((char *)v10 + a6);
  int32x2_t v13 = vadd_s32(vadd_s32(vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v7), (int8x8_t)0x3FF000FFC00), (int32x2_t)vand_s8((int8x8_t)vdup_n_s32(*a2), (int8x8_t)0x3FF000FFC00)), (int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v9), (int8x8_t)0x3FF000FFC00)), vadd_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v11), (int8x8_t)0x3FF000FFC00), (int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v12), (int8x8_t)0x3FF000FFC00))), vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v6), (int8x8_t)0x3FF000FFC00), (int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v8), (int8x8_t)0x3FF000FFC00)), (int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v10), (int8x8_t)0x3FF000FFC00)));
  unsigned __int32 v14 = v13.i32[0] & 0x7FE000 | v13.i32[1];
  int8x8_t v15 = (int8x8_t)vshr_n_u32((uint32x2_t)__PAIR64__(v7, *a2), 3uLL);
  int32x2_t v16 = (int32x2_t)vand_s8((int8x8_t)vadd_s32(vadd_s32(vadd_s32(vadd_s32((int32x2_t)vand_s8(v15, (int8x8_t)0x7FE000018000000), (int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v9 >> 3), (int8x8_t)0x7FE000018000000)), vrev64_s32((int32x2_t)vand_s8(v15, (int8x8_t)0x1800000007FE0000))), (int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v8 >> 3), (int8x8_t)0x7FE000018000000)), vadd_s32(vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v11 >> 3), (int8x8_t)0x7FE000018000000), (int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v12 >> 3), (int8x8_t)0x7FE000018000000)), (int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v6 >> 3), (int8x8_t)0x7FE000018000000)), (int32x2_t)vand_s8(
                                                (int8x8_t)vdup_n_s32(v10 >> 3),
                                                (int8x8_t)0x7FE000018000000))),
                     (int8x8_t)0x3FF00000C0000000);
  int8x8_t result = vorr_s8((int8x8_t)v16, (int8x8_t)vdup_lane_s32(v16, 1));
  *a1 = result.i32[0] | (v14 >> 3);
  return result;
}

int *gle2101010RevFilterBox(int *result, _DWORD *a2, uint64_t a3, int a4, unsigned int a5, int a6, int a7)
{
  uint64_t v7 = 0;
  int v8 = 0;
  unsigned int v9 = 0;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  uint64_t v23 = *MEMORY[0x263EF8340];
  signed int v12 = 0xFFFFFFFF / a5 * a6;
  int v13 = ~(v12 >> 16);
  signed int v14 = 0xFFFFFFFF / a5 * (a6 - a7);
  signed int v15 = 0xFFFFFFFF / a5 + 0xFFFFFFFF / a5 * a7;
  int v16 = v13 - (v14 >> 16) + 0x10000;
  int v17 = v13 - (v15 >> 16);
  int v18 = v15 >> 16;
  if (a6 <= 2 * a7) {
    int v18 = v16;
  }
  int v19 = v14 >> 16;
  int v20 = v17 + 0x10000;
  if (a6 <= 2 * a7) {
    int v20 = v19;
  }
  v22[2] = v18;
  v22[0] = v20;
  v22[1] = (v12 >> 16) + 1;
  do
  {
    int v21 = v22[v7];
    v11 += (*a2 & 0x3FF) * v21;
    v10 += ((*a2 >> 10) & 0x3FF) * v21;
    v9 += ((*a2 >> 20) & 0x3FF) * v21;
    v8 += (*a2 >> 30) * v21;
    a2 = (_DWORD *)((char *)a2 + a4);
    ++v7;
  }
  while (v7 != 3);
  *int8x8_t result = (v10 >> 6) & 0xFFC00 | HIWORD(v11) & 0x3FF | ((HIWORD(v9) & 0x3FF) << 20) & 0x3FFFFFFF | (BYTE2(v8) << 30);
  return result;
}

unsigned int *gle248Filter1(unsigned int *result, _DWORD *a2, uint64_t a3, int a4)
{
  *int8x8_t result = (((*(_DWORD *)((char *)a2 + a4) >> 1) & 0x7FFFFF80) + (*a2 >> 1)) & 0xFFFFFF00 | *a2;
  return result;
}

unsigned int *gle248Filter2(unsigned int *result, _DWORD *a2, uint64_t a3, int a4, int a5)
{
  *int8x8_t result = (((*(_DWORD *)((char *)a2 + a4) >> 2) & 0x3FFFFFC0)
           + (*a2 >> 2)
           + (*(_DWORD *)((char *)a2 + a5) >> 8 << 6)
           + (*(_DWORD *)((char *)a2 + a4 + a5) >> 8 << 6)) & 0xFFFFFF00 | *a2;
  return result;
}

unsigned int *gle248Filter3(unsigned int *result, _DWORD *a2, uint64_t a3, int a4, int a5, int a6)
{
  unsigned int v6 = (_DWORD *)((char *)a2 + a4);
  *int8x8_t result = (((*v6 >> 3) & 0x1FFFFFE0)
           + 32 * (*a2 >> 8)
           + 32 * (*(_DWORD *)((char *)a2 + a5) >> 8)
           + 32 * (*(_DWORD *)((char *)v6 + a5) >> 8)
           + 32 * (*(_DWORD *)((char *)a2 + a6) >> 8)
           + 32 * (*(_DWORD *)((char *)v6 + a6) >> 8)
           + 32 * (*(_DWORD *)((char *)a2 + a5 + a6) >> 8)
           + 32 * (*(_DWORD *)((char *)v6 + a5 + a6) >> 8)) & 0xFFFFFF00 | *a2;
  return result;
}

unsigned int *gle248FilterBox(unsigned int *result, unsigned __int8 *a2, uint64_t a3, int a4, unsigned int a5, int a6, int a7)
{
  uint64_t v7 = 0;
  int v8 = 0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  signed int v9 = 0xFFFFFFFF / a5 * a6;
  int v10 = ~(v9 >> 16);
  int v11 = (v9 >> 16) + 1;
  signed int v12 = 0xFFFFFFFF / a5 + 0xFFFFFFFF / a5 * a7;
  int v13 = v10 - ((int)(0xFFFFFFFF / a5 * (a6 - a7)) >> 16) + 0x10000;
  int v14 = v10 - (v12 >> 16);
  int v15 = v12 >> 16;
  int v16 = v14 + 0x10000;
  if (a6 <= 2 * a7)
  {
    int v15 = v13;
    int v16 = (int)(0xFFFFFFFF / a5 * (a6 - a7)) >> 16;
  }
  v18[1] = v11;
  v18[2] = v15;
  v18[0] = v16;
  int v17 = *a2;
  do
  {
    v8 += *((unsigned __int16 *)a2 + 1) * v18[v7];
    a2 += a4;
    ++v7;
  }
  while (v7 != 3);
  *int8x8_t result = v8 & 0xFFFFFF00 | v17;
  return result;
}

float gle32F248Filter1(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float result = (float)(*(float *)a2 + *(float *)(a2 + a4)) * 0.5;
  *(float *)a1 = result;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  return result;
}

float gle32F248Filter2(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  float result = (float)((float)((float)(*(float *)a2 + *(float *)(a2 + a4)) + *(float *)(a2 + a5)) + *(float *)(a2 + a4 + a5))
         * 0.25;
  *(float *)a1 = result;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  return result;
}

float gle32F248Filter3(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  unsigned int v6 = (float *)(a2 + a4);
  float result = (float)((float)((float)((float)((float)((float)((float)(*(float *)a2 + *v6) + *(float *)(a2 + a5))
                                                 + *(float *)((char *)v6 + a5))
                                         + *(float *)(a2 + a6))
                                 + *(float *)((char *)v6 + a6))
                         + *(float *)(a2 + a5 + a6))
                 + *(float *)((char *)v6 + a5 + a6))
         * 0.125;
  *(float *)a1 = result;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  return result;
}

uint64_t gle32F248FilterBox(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  uint64_t v7 = 0;
  uint64_t v12 = *MEMORY[0x263EF8340];
  float v8 = 1.0 / (float)a5;
  v11[0] = v8 * (float)(a6 - a7);
  v11[1] = v8 * (float)a6;
  v11[2] = v8 * (float)(a7 + 1);
  float v9 = 0.0;
  int v10 = (float *)a2;
  do
  {
    float v9 = v9 + (float)(v11[v7] * *v10);
    int v10 = (float *)((char *)v10 + a4);
    ++v7;
  }
  while (v7 != 3);
  *(float *)float result = v9;
  *(_DWORD *)(result + 4) = *(_DWORD *)(a2 + 4);
  return result;
}

uint64_t gleLookUpTexture3D(uint64_t a1, int a2)
{
  if (a2 == 32879)
  {
    uint64_t v3 = 1;
  }
  else
  {
    if (a2 != 35866 || (*(unsigned char *)(a1 + 32501) & 0xFE) == 2) {
      return 0;
    }
    uint64_t v3 = 5;
  }
  return *(void *)(a1 + 20776 + 88 * *(unsigned __int16 *)(a1 + 23768) + 8 * v3) + 40;
}

uint64_t gleLookUpNonFaceTexture2D(uint64_t a1, int a2)
{
  uint64_t v2 = a1 + 20776;
  if (a2 == 34067)
  {
    if (*(unsigned char *)(a1 + 32501) != 2)
    {
      uint64_t v3 = (void *)(v2 + 88 * *(unsigned __int16 *)(a1 + 23768));
      return *v3 + 40;
    }
    return 0;
  }
  if (a2 != 3553) {
    return 0;
  }
  uint64_t v3 = (void *)(v2 + 88 * *(unsigned __int16 *)(a1 + 23768) + 24);
  return *v3 + 40;
}

uint64_t gleLookUpNonProxyTexture3D(uint64_t a1, int a2)
{
  uint64_t v2 = (unsigned char *)(a1 + 32501);
  if (a2 == 35866)
  {
    if ((*v2 & 0xFE) != 2)
    {
      uint64_t v3 = 5;
      return *(void *)(a1 + 20776 + 88 * *(unsigned __int16 *)(a1 + 23768) + 8 * v3) + 40;
    }
    return 0;
  }
  if (a2 != 32879 || (*v2 & 0xFE) == 2) {
    return 0;
  }
  uint64_t v3 = 1;
  return *(void *)(a1 + 20776 + 88 * *(unsigned __int16 *)(a1 + 23768) + 8 * v3) + 40;
}

uint64_t gleLookUpNonProxyNonFaceTexture(uint64_t a1, int a2)
{
  uint64_t result = 0;
  unsigned int v4 = (unsigned char *)(a1 + 32501);
  uint64_t v5 = a1 + 20776;
  unsigned int v6 = *(unsigned __int16 *)(a1 + 23768);
  if (a2 > 34066)
  {
    if (a2 == 34067)
    {
      uint64_t v7 = (void *)(v5 + 88 * v6);
      return *v7 + 40;
    }
    if (a2 != 35866) {
      return result;
    }
    if ((*v4 & 0xFE) != 2)
    {
      uint64_t v7 = (void *)(v5 + 88 * v6 + 40);
      return *v7 + 40;
    }
    return 0;
  }
  if (a2 == 3553)
  {
    uint64_t v7 = (void *)(v5 + 88 * v6 + 24);
    return *v7 + 40;
  }
  if (a2 != 32879) {
    return result;
  }
  if ((*v4 & 0xFE) == 2) {
    return 0;
  }
  uint64_t v7 = (void *)(v5 + 88 * v6 + 8);
  return *v7 + 40;
}

void gleFreeTextureObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 40;
  gfxDestroyPluginTexture();
  uint64_t v5 = *(void **)(a2 + 32);
  if (v5)
  {
    free(v5);
    *(void *)(a2 + 32) = 0;
  }
  uint64_t v6 = *(void *)(a2 + 800);
  if (v6)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v6 + 16))();
    *(void *)(a2 + 800) = 0;
  }
  if ((*(_WORD *)(a2 + 808) & 0x100) == 0)
  {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 1019);
    if (*(unsigned char *)(a2 + 1019))
    {
      uint64_t v8 = 0;
      uint64_t v9 = *(unsigned __int8 *)(a2 + 1021);
      uint64_t v10 = a2 + 1072;
      do
      {
        if (v9)
        {
          uint64_t v11 = v9;
          uint64_t v12 = v10;
          do
          {
            if (*(void *)(v12 + 24) && (*(unsigned char *)(v12 + 11) & 7) == 0) {
              uint64_t v6 = gfxFreeTextureLevel();
            }
            v12 += 32;
            --v11;
          }
          while (v11);
        }
        ++v8;
        v10 += 480;
      }
      while (v8 != v7);
    }
  }
  uint64_t v13 = *(void *)(a2 + 568);
  if (v13)
  {
    int v14 = *(_DWORD *)(v13 + 20) - 1;
    *(_DWORD *)(v13 + 20) = v14;
    if (!v14) {
      gleFreeBufferObject(a1, (void *)v13);
    }
    *(void *)(a2 + 568) = 0;
  }
  gleTextureReleaseIOSurfaces(v6, v4);

  free((void *)a2);
}

void gleTextureReleaseIOSurfaces(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 1024))
  {
    uint64_t v3 = 0;
    uint64_t v4 = a2 + 816;
    while (1)
    {
      uint64_t v5 = *(const void **)(v4 + v3);
      if (v5 == *(const void **)(a2 + 1024)) {
        break;
      }
      if (v5) {
        goto LABEL_5;
      }
LABEL_6:
      v3 += 8;
      if (v3 == 32) {
        return;
      }
    }
    *(void *)(a2 + 1024) = 0;
    uint64_t v5 = *(const void **)(v4 + v3);
    if (!v5) {
      goto LABEL_6;
    }
LABEL_5:
    CFRelease(v5);
    *(void *)(v4 + v3) = 0;
    goto LABEL_6;
  }
}

uint64_t gleUnbindTextureObject(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = a2 + 40;
  if (*(void *)(a2 + 1064) && (*(unsigned char *)(a2 + 832) & 2) != 0 && *(unsigned char *)(result + 32496))
  {
    unint64_t v4 = 0;
    uint64_t v5 = (void *)(result + 32512);
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(v5[206] + 1248))(*v5, 707, *(void *)(v3 + 8 * v4++));
      v5 += 209;
    }
    while (v4 < *(unsigned __int8 *)(v2 + 32496));
  }
  uint64_t v6 = (unsigned __int8 *)(v2 + 32496);
  if (*(unsigned char *)(v2 + 32496))
  {
    unint64_t v7 = 0;
    uint64_t v8 = (void *)(v2 + 32512);
    do
    {
      uint64_t result = (*(uint64_t (**)(void, void))(v8[206] + 1392))(*v8, *(void *)(v3 + 8 * v7++));
      v8 += 209;
    }
    while (v7 < *v6);
  }
  return result;
}

void gleUnbindAndFreeTextureObject(uint64_t a1, uint64_t a2)
{
  gleUnbindTextureObject(a1, a2);
  uint64_t v4 = *(void *)(a1 + 19296);

  gleFreeTextureObject(v4, a2);
}

uint64_t gleReclaimTextureObjectResources(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = 0;
  uint64_t v3 = *(void *)(result + 19296);
  uint64_t v4 = *(void *)(v3 + 80);
  unsigned int v5 = *(_DWORD *)(v3 + 96);
  uint64_t v6 = (unsigned char *)(result + 32496);
  unint64_t v7 = (void *)(result + 32520);
  do
  {
    for (unint64_t i = *(uint64_t **)(v4 + 8 * v2); i; unint64_t i = (uint64_t *)*i)
    {
      if (*((_DWORD *)i + 5) == 1 && *v6)
      {
        unint64_t v9 = 0;
        uint64_t v10 = v7;
        do
        {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(v10[205] + 1400))(*v10, i[v9++ + 5]);
          v10 += 209;
        }
        while (v9 < *v6);
      }
    }
    ++v2;
  }
  while (v2 <= v5);
  for (uint64_t j = 0; j != 11; ++j)
  {
    uint64_t v12 = *(void *)(v1 + 8 * j + 23592);
    if (v12 && *(_DWORD *)(v12 + 20) == 1 && *v6)
    {
      unint64_t v13 = 0;
      uint64_t v14 = v12 + 40;
      int v15 = (void *)(v1 + 32520);
      do
      {
        uint64_t result = (*(uint64_t (**)(void, void))(v15[205] + 1400))(*v15, *(void *)(v14 + 8 * v13++));
        v15 += 209;
      }
      while (v13 < *v6);
    }
  }
  return result;
}

void gleTextureImagePut(_DWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, int a7, int a8, int a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int v36 = (char *)a13;
  if ((*(_WORD *)(a2 + 982) & 0x1800) == 0x1000
    || (char v16 = 3, (*(_WORD *)(a2 + 982) & 0x2000) != 0) && (*(_WORD *)(a2 + 982) & 0x600) != 0)
  {
    char v16 = 4;
  }
  uint64_t v46 = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  DWORD1(v43) = (a10 >> 47) & 0x1F;
  DWORD2(v43) = (a10 >> 52) & 0x1F;
  glePixelStorageSettings((uint64_t)a1, a10, a7, a8, (int *)a12, &v41, (int *)&v41 + 1, (_DWORD *)&v40 + 1, (int *)&v40, v16);
  LODWORD(v45) = 2147479551;
  if (((a10 >> 47) & 0x1F) == 0xC && a12 && ((a10 >> 52) & 0x1F) == 0xB)
  {
    if ((*(unsigned char *)(a12 + 20) & 7) != 0)
    {
      LODWORD(v45) = 2147479547;
      HIDWORD(v41) = 0;
      HIDWORD(v40) = (((a10 >> 37) & 3) + 1 + (((a10 >> 37) & 3) + 1) * (BYTE4(a10) & 0x1F))
                   * ((int)(((a10 >> 39) & 0xF) + a7)
                    / (int)(((a10 >> 39) & 0xF) + 1));
      LODWORD(v40) = HIDWORD(v40) * a8;
      int v17 = (char *)malloc_type_malloc((HIDWORD(v40) * a8 * a9), 0x577B5147uLL);
      if (!v17) {
        abort();
      }
      int v18 = v17;
      uint64_t v19 = a1;
      gleFillBitmap(a1, a7, a8, a9, a13, v17, v16);
      int v36 = v18;
    }
    else
    {
      int v18 = 0;
      uint64_t v19 = a1;
    }
    HIDWORD(v45) = 0;
    LODWORD(v46) = 0;
    HIDWORD(v44) = 0;
    uint64_t v20 = a2;
  }
  else
  {
    int v18 = 0;
    HIDWORD(v45) = 0;
    LODWORD(v46) = 0;
    HIDWORD(v44) = 0;
    uint64_t v20 = a2;
    uint64_t v19 = a1;
    if (!a12) {
      goto LABEL_20;
    }
  }
  if (*(unsigned char *)(a12 + 33))
  {
    HIDWORD(v44) = 4;
    int v21 = 5;
  }
  else
  {
    int v21 = 1;
  }
  if (*(unsigned char *)(a12 + 32)) {
    HIDWORD(v44) = v21;
  }
LABEL_20:
  glgConvertType();
  if ((a10 & 0x80000000) != 0) {
    HIDWORD(v44) |= 0x100000u;
  }
  *(void *)((char *)&v45 + 4) = __PAIR64__(a8, a7);
  DWORD2(v44) = 2;
  int v22 = glePixelBytes(*(unsigned __int16 *)(a3 + 16), *(unsigned __int16 *)(a3 + 18));
  if ((*(unsigned char *)(a3 + 11) & 4) == 0)
  {
    BaseAddressOfPlane = *(char **)(a3 + 24);
    int BytesPerRowOfPlane = gleRowBytes(*(unsigned __int16 *)(a3 + 16), *(unsigned __int16 *)(a3 + 18), *(unsigned __int16 *)(a3 + 12));
    goto LABEL_28;
  }
  unsigned int v25 = *(__IOSurface **)(v20 + 1024);
  (*(void (**)(void))(v19[3681] + 240))(v19[3627]);
  if (v19[3624]) {
    (*(void (**)(void))(v19[3687] + 240))(v19[3683]);
  }
  if (!IOSurfaceLockPlane())
  {
    BaseAddressOfPlane = (char *)IOSurfaceGetBaseAddressOfPlane(v25, *(unsigned __int16 *)(v20 + 1016));
    int BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(v25, *(unsigned __int16 *)(v20 + 1016));
LABEL_28:
    if (*(_WORD *)(a3 + 18))
    {
      unsigned int CompressedImageBytes = BytesPerRowOfPlane * *(unsigned __int16 *)(a3 + 6);
      LODWORD(v43) = HIDWORD(v40);
      HIDWORD(v43) = BytesPerRowOfPlane;
      *(void *)&long long v42 = &v36[HIDWORD(v41)];
    }
    else
    {
      unsigned int CompressedImageBytes = glgGetCompressedImageBytes();
      int v27 = *(unsigned __int16 *)(a3 + 18);
      LODWORD(v43) = HIDWORD(v40);
      HIDWORD(v43) = BytesPerRowOfPlane;
      *(void *)&long long v42 = &v36[HIDWORD(v41)];
      if (!v27 && a5 | a4 | a6)
      {
        int CompressedBlockBytes = glgGetCompressedBlockBytes();
        unsigned int v30 = a4 / glgGetCompressedBlockWidth();
        unsigned int v31 = a5 / glgGetCompressedBlockHeight();
        int v32 = glgConvertPixelWidthToBlocks();
        unsigned int v28 = (v30 + (v31 + glgConvertPixelHeightToBlocks() * a6) * v32) * CompressedBlockBytes;
        goto LABEL_32;
      }
    }
    BaseAddressOfPlane += BytesPerRowOfPlane * a5 + (unint64_t)(CompressedImageBytes * a6);
    unsigned int v28 = v22 * a4;
LABEL_32:
    *((void *)&v42 + 1) = &BaseAddressOfPlane[v28];
    glgProcessPixelsWithProcessor();
    int v29 = a9 - 1;
    if (a9 != 1)
    {
      do
      {
        *(void *)&long long v42 = v42 + v40;
        *((void *)&v42 + 1) += CompressedImageBytes;
        glgProcessPixelsWithProcessor();
        --v29;
      }
      while (v29);
    }
    if (v18) {
      free(v18);
    }
    if ((*(unsigned char *)(a3 + 11) & 4) != 0) {
      IOSurfaceUnlockPlane();
    }
  }
}

void gleCompressedPalettedTextureImagePut(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, uint64_t a8)
{
  int v8 = 0;
  unsigned int v9 = 3;
  int v10 = 4;
  int v11 = 1;
  uint64_t v12 = 48;
  switch(a7)
  {
    case 35728:
      goto LABEL_7;
    case 35729:
      int v8 = 0;
      uint64_t v12 = 64;
      unsigned int v9 = 4;
      goto LABEL_7;
    case 35730:
    case 35731:
    case 35732:
      int v8 = 0;
      unsigned int v9 = 2;
      uint64_t v12 = 32;
      goto LABEL_7;
    case 35733:
      int v11 = 0;
      unsigned int v9 = 3;
      int v10 = 8;
      int v8 = 1;
      uint64_t v12 = 768;
      goto LABEL_7;
    case 35734:
      int v11 = 0;
      unsigned int v9 = 4;
      int v10 = 8;
      int v8 = 1;
      uint64_t v12 = 1024;
      goto LABEL_7;
    case 35735:
    case 35736:
    case 35737:
      int v11 = 0;
      unsigned int v9 = 2;
      int v10 = 8;
      int v8 = 1;
      uint64_t v12 = 512;
LABEL_7:
      for (unint64_t i = (unsigned char *)(a8 + v12); a4; --a4)
      {
        i += (a6 * v10 * a5) >> 3;
        a5 = a5 >> (a5 > 1);
        a6 = a6 >> (a6 > 1);
      }
      if (v11)
      {
        if (a6 >= 1)
        {
          for (uint64_t j = 0; j != a6; ++j)
          {
            if (a5 >= 1)
            {
              int v15 = 0;
              int v16 = 0;
              uint64_t v17 = *(void *)(a3 + 24) + a5 * v9 * j;
              do
              {
                for (uint64_t k = 0; k != v9; ++k)
                {
                  *(unsigned char *)(v17 + (v15 + k)) = *(unsigned char *)(a8
                                                                       + ((unint64_t)*i >> 4)
                                                                       * v9
                                                                       + k);
                  if ((v16 | 1) < a5) {
                    *(unsigned char *)(v17 + v9 + v15 + k) = *(unsigned char *)(a8 + (*i & 0xF) * (unint64_t)v9 + k);
                  }
                }
                v16 += 2;
                ++i;
                v15 += 2 * v9;
              }
              while (v16 < a5);
            }
          }
        }
      }
      else
      {
        if (a6 <= 0) {
          int v8 = 0;
        }
        if (v8 == 1)
        {
          uint64_t v19 = 0;
          do
          {
            if (a5 >= 1)
            {
              unsigned int v20 = 0;
              int v21 = 0;
              uint64_t v22 = *(void *)(a3 + 24) + a5 * v9 * v19;
              do
              {
                uint64_t v23 = v9;
                uint64_t v24 = a8;
                unsigned int v25 = v20;
                do
                {
                  *(unsigned char *)(v22 + v25++) = *(unsigned char *)(v24 + *i * (unint64_t)v9);
                  ++v24;
                  --v23;
                }
                while (v23);
                ++v21;
                ++i;
                v20 += v9;
              }
              while (v21 != a5);
            }
            ++v19;
          }
          while (v19 != a6);
        }
      }
      break;
    default:
      return;
  }
}

uint64_t gleSizedInternalFormat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, BOOL *a7)
{
  BOOL v7 = 0;
  if ((int)a3 > 37487)
  {
    if ((int)a3 <= 37839)
    {
      if ((a3 - 37808) >= 0xE)
      {
        switch((int)a3)
        {
          case 37488:
LABEL_68:
            if (a6)
            {
LABEL_92:
              BOOL v8 = 1;
            }
            else
            {
              BOOL v8 = 1;
              if ((*(_WORD *)(a2 + 982) & 0x600) != 0 && (*(_WORD *)(a2 + 982) & 0x100) == 0)
              {
                BOOL v8 = (*(unsigned char *)(*(void *)(a1 + 29032) + 577) & 0x80) == 0 && (*(_WORD *)(a2 + 982) & 0x1800) != 0;
                if (!v8) {
                  goto LABEL_39;
                }
              }
            }
LABEL_93:
            a3 = 33321;
            goto LABEL_39;
          case 37489:
LABEL_106:
            if (a6)
            {
              BOOL v8 = 1;
            }
            else
            {
              BOOL v8 = 1;
              if ((*(_WORD *)(a2 + 982) & 0x600) != 0 && (*(_WORD *)(a2 + 982) & 0x100) == 0)
              {
                BOOL v8 = (*(unsigned char *)(*(void *)(a1 + 29032) + 577) & 0x80) == 0 && (*(_WORD *)(a2 + 982) & 0x1800) != 0;
                if (!v8) {
                  goto LABEL_39;
                }
              }
            }
            a3 = 36756;
            goto LABEL_39;
          case 37490:
LABEL_109:
            if (a6) {
              goto LABEL_165;
            }
            BOOL v8 = 1;
            if ((*(_WORD *)(a2 + 982) & 0x600) == 0 || (*(_WORD *)(a2 + 982) & 0x100) != 0) {
              goto LABEL_166;
            }
            BOOL v8 = (*(unsigned char *)(*(void *)(a1 + 29032) + 577) & 0x80) == 0 && (*(_WORD *)(a2 + 982) & 0x1800) != 0;
            if (v8) {
              goto LABEL_166;
            }
            goto LABEL_39;
          case 37491:
LABEL_117:
            if (a6)
            {
              BOOL v8 = 1;
            }
            else
            {
              BOOL v8 = 1;
              if ((*(_WORD *)(a2 + 982) & 0x600) != 0 && (*(_WORD *)(a2 + 982) & 0x100) == 0)
              {
                BOOL v8 = (*(unsigned char *)(*(void *)(a1 + 29032) + 577) & 0x80) == 0 && (*(_WORD *)(a2 + 982) & 0x1800) != 0;
                if (!v8) {
                  goto LABEL_39;
                }
              }
            }
            a3 = 36757;
            goto LABEL_39;
          case 37492:
            goto LABEL_54;
          case 37493:
            goto LABEL_76;
          case 37494:
            goto LABEL_86;
          case 37495:
          case 37497:
            goto LABEL_36;
          case 37496:
            goto LABEL_15;
          default:
            goto LABEL_40;
        }
      }
      goto LABEL_15;
    }
    if ((a3 - 37886) < 0x10)
    {
LABEL_15:
      if (a6)
      {
LABEL_16:
        BOOL v8 = 1;
      }
      else
      {
        BOOL v8 = 1;
        if ((*(_WORD *)(a2 + 982) & 0x600) != 0 && (*(_WORD *)(a2 + 982) & 0x100) == 0)
        {
          BOOL v8 = (*(unsigned char *)(*(void *)(a1 + 29032) + 577) & 0x80) == 0 && (*(_WORD *)(a2 + 982) & 0x1800) != 0;
          if (!v8) {
            goto LABEL_39;
          }
        }
      }
LABEL_17:
      a3 = 32854;
      goto LABEL_39;
    }
    if ((a3 - 37840) >= 0xE) {
      goto LABEL_40;
    }
    goto LABEL_36;
  }
  if ((int)a3 > 35411)
  {
    if ((int)a3 > 35903)
    {
      switch((int)a3)
      {
        case 35904:
          BOOL v7 = 0;
          a3 = 35905;
          goto LABEL_40;
        case 35905:
        case 35907:
        case 35909:
        case 35911:
          goto LABEL_40;
        case 35906:
          BOOL v7 = 0;
          a3 = 35907;
          goto LABEL_40;
        case 35908:
        case 35915:
          BOOL v7 = 0;
          a3 = 35909;
          goto LABEL_40;
        case 35910:
        case 35914:
          BOOL v7 = 0;
          a3 = 35911;
          goto LABEL_40;
        case 35912:
          if (a6) {
            goto LABEL_140;
          }
          BOOL v8 = 1;
          if ((*(_WORD *)(a2 + 982) & 0x600) == 0 || (*(_WORD *)(a2 + 982) & 0x100) != 0) {
            goto LABEL_141;
          }
          BOOL v8 = (*(unsigned char *)(*(void *)(a1 + 29032) + 577) & 0x80) == 0 && (*(_WORD *)(a2 + 982) & 0x1800) != 0;
          if (v8) {
            goto LABEL_141;
          }
          a3 = 35916;
          break;
        case 35913:
          if (a6) {
            goto LABEL_37;
          }
          BOOL v8 = 1;
          if ((*(_WORD *)(a2 + 982) & 0x600) == 0 || (*(_WORD *)(a2 + 982) & 0x100) != 0) {
            goto LABEL_38;
          }
          BOOL v8 = (*(unsigned char *)(*(void *)(a1 + 29032) + 577) & 0x80) == 0 && (*(_WORD *)(a2 + 982) & 0x1800) != 0;
          if (v8) {
            goto LABEL_38;
          }
          a3 = 35918;
          break;
        case 35916:
          goto LABEL_76;
        case 35917:
        case 35918:
        case 35919:
          goto LABEL_36;
        default:
          switch((int)a3)
          {
            case 36283:
              goto LABEL_68;
            case 36284:
              goto LABEL_106;
            case 36285:
              goto LABEL_109;
            case 36286:
              goto LABEL_117;
            default:
              goto LABEL_40;
          }
          goto LABEL_40;
      }
      goto LABEL_39;
    }
    char v9 = a3 - 84;
    if ((a3 - 35412) > 0xB)
    {
LABEL_32:
      if ((a3 - 35840) < 2) {
        goto LABEL_54;
      }
      if ((a3 - 35842) >= 2) {
        goto LABEL_40;
      }
      goto LABEL_15;
    }
    if (((1 << v9) & 0xC0C) == 0)
    {
      if (((1 << v9) & 3) != 0)
      {
LABEL_76:
        if (a6)
        {
LABEL_140:
          BOOL v8 = 1;
        }
        else
        {
          BOOL v8 = 1;
          if ((*(_WORD *)(a2 + 982) & 0x600) != 0 && (*(_WORD *)(a2 + 982) & 0x100) == 0)
          {
            BOOL v8 = (*(unsigned char *)(*(void *)(a1 + 29032) + 577) & 0x80) == 0 && (*(_WORD *)(a2 + 982) & 0x1800) != 0;
            if (!v8) {
              goto LABEL_39;
            }
          }
        }
LABEL_141:
        a3 = 35905;
        goto LABEL_39;
      }
      if (((1 << v9) & 0x300) != 0) {
        goto LABEL_15;
      }
      goto LABEL_32;
    }
LABEL_36:
    if (a6)
    {
LABEL_37:
      BOOL v8 = 1;
    }
    else
    {
      BOOL v8 = 1;
      if ((*(_WORD *)(a2 + 982) & 0x600) != 0 && (*(_WORD *)(a2 + 982) & 0x100) == 0)
      {
        BOOL v8 = (*(unsigned char *)(*(void *)(a1 + 29032) + 577) & 0x80) == 0 && (*(_WORD *)(a2 + 982) & 0x1800) != 0;
        if (!v8) {
          goto LABEL_39;
        }
      }
    }
LABEL_38:
    a3 = 35907;
    goto LABEL_39;
  }
  if ((int)a3 <= 33317)
  {
    if ((int)a3 > 6400)
    {
      switch((int)a3)
      {
        case 6401:
          BOOL v7 = 0;
          a3 = 36168;
          goto LABEL_40;
        case 6402:
          if (a5 > 5125)
          {
            BOOL v7 = 0;
            a3 = 36012;
            if (a5 != 5126 && a5 != 36269)
            {
LABEL_262:
              BOOL v7 = 0;
              a3 = 33190;
              goto LABEL_40;
            }
          }
          else
          {
            if ((a5 - 5122) >= 2)
            {
              if ((a5 - 5124) < 2)
              {
                BOOL v7 = 0;
                a3 = 33191;
                goto LABEL_40;
              }
              goto LABEL_262;
            }
            BOOL v7 = 0;
            a3 = 33189;
          }
          break;
        case 6403:
          if (a5 == 5126)
          {
            BOOL v7 = 0;
            a3 = 33326;
          }
          else if (a5 == 36193 || a5 == 5131)
          {
            BOOL v7 = 0;
            a3 = 33325;
          }
          else
          {
            BOOL v7 = 0;
            a3 = 33321;
          }
          goto LABEL_40;
        case 6404:
        case 6405:
          goto LABEL_40;
        case 6406:
          if (a5 == 5126)
          {
            BOOL v7 = 0;
            a3 = 34838;
            goto LABEL_40;
          }
          if (a5 == 36193 || a5 == 5131)
          {
            BOOL v7 = 0;
            a3 = 34844;
            goto LABEL_40;
          }
          goto LABEL_20;
        case 6407:
          goto LABEL_99;
        case 6408:
          goto LABEL_103;
        case 6409:
          goto LABEL_63;
        case 6410:
          goto LABEL_95;
        default:
          if (a3 == 32841)
          {
            if (a5 == 5126)
            {
              BOOL v7 = 0;
              a3 = 34839;
              goto LABEL_40;
            }
            if (a5 == 36193 || a5 == 5131)
            {
              BOOL v7 = 0;
              a3 = 34845;
              goto LABEL_40;
            }
            goto LABEL_175;
          }
          if (a3 != 33317) {
            goto LABEL_40;
          }
          if (a6) {
            goto LABEL_92;
          }
          BOOL v8 = 1;
          if ((*(_WORD *)(a2 + 982) & 0x600) != 0 && (*(_WORD *)(a2 + 982) & 0x100) == 0)
          {
            BOOL v8 = (*(unsigned char *)(*(void *)(a1 + 29032) + 577) & 0x80) == 0 && (*(_WORD *)(a2 + 982) & 0x1800) != 0;
            if (!v8)
            {
              a3 = 36283;
              goto LABEL_39;
            }
          }
          goto LABEL_93;
      }
      goto LABEL_40;
    }
    switch((int)a3)
    {
      case 1:
LABEL_63:
        if (a5 == 5126)
        {
          BOOL v7 = 0;
          a3 = 34840;
        }
        else
        {
          if (a5 != 36193 && a5 != 5131) {
            goto LABEL_120;
          }
          BOOL v7 = 0;
          a3 = 34846;
        }
        goto LABEL_40;
      case 2:
LABEL_95:
        if (a5 == 5126)
        {
          BOOL v7 = 0;
          a3 = 34841;
        }
        else if (a5 == 36193 || a5 == 5131)
        {
          BOOL v7 = 0;
          a3 = 34847;
        }
        else
        {
          BOOL v7 = 0;
          a3 = 32837;
        }
        goto LABEL_40;
      case 3:
LABEL_99:
        if (a5 <= 33633)
        {
          if (a5 > 32817)
          {
            if (a5 == 32818 || a5 == 32819 || a5 == 32820)
            {
LABEL_102:
              BOOL v7 = 0;
              a3 = 36194;
              goto LABEL_40;
            }
            goto LABEL_278;
          }
          if (a5 == 5121)
          {
            BOOL v7 = 0;
            if ((a4 - 35429) < 2 || a4 == 37883) {
              goto LABEL_286;
            }
            if (a4 == 37902)
            {
              BOOL v7 = 0;
              a3 = 37902;
            }
            else
            {
              BOOL v7 = 0;
              if ((a4 - 35431) < 0xE || (a4 & 0xFFFFFFFE) == 0x93FC) {
                goto LABEL_286;
              }
              BOOL v7 = 0;
              if ((a4 - 37875) >= 6) {
                a3 = 32849;
              }
              else {
                a3 = a4;
              }
            }
            goto LABEL_40;
          }
          if (a5 == 5126)
          {
            BOOL v7 = 0;
            a3 = 34837;
            goto LABEL_40;
          }
          if (a5 != 5131)
          {
LABEL_278:
            BOOL v7 = 0;
            a3 = 32849;
            goto LABEL_40;
          }
        }
        else
        {
          if (a5 <= 34233)
          {
            switch(a5)
            {
              case 33634:
              case 33635:
              case 33636:
              case 33637:
              case 33638:
                goto LABEL_102;
              default:
                goto LABEL_278;
            }
          }
          if (a5 <= 35901)
          {
            if ((a5 - 34234) >= 2)
            {
              if (a5 == 35899)
              {
                BOOL v7 = 0;
                a3 = 35898;
                goto LABEL_40;
              }
            }
            else
            {
              if (a4 == 34233)
              {
                BOOL v7 = 0;
                a3 = 35408;
                goto LABEL_40;
              }
              if (a4 == 35359)
              {
                BOOL v7 = 0;
                a3 = 35409;
                goto LABEL_40;
              }
            }
            goto LABEL_278;
          }
          if (a5 != 36193)
          {
            if (a5 == 35902)
            {
              BOOL v7 = 0;
              a3 = 35901;
              goto LABEL_40;
            }
            goto LABEL_278;
          }
        }
        BOOL v7 = 0;
        a3 = 34843;
        goto LABEL_40;
      case 4:
LABEL_103:
        BOOL v7 = 0;
        a3 = 34842;
        if (a5 <= 33633)
        {
          if (a5 > 32817)
          {
            switch(a5)
            {
              case 32818:
              case 32820:
LABEL_178:
                BOOL v7 = 0;
                a3 = 32855;
                break;
              case 32819:
LABEL_273:
                BOOL v7 = 0;
                a3 = 32854;
                break;
              case 32822:
LABEL_274:
                BOOL v7 = 0;
                a3 = 32857;
                break;
              default:
                goto LABEL_287;
            }
            goto LABEL_40;
          }
          if (a5 == 5121)
          {
            if ((a4 - 37903) < 2)
            {
              BOOL v7 = 0;
LABEL_286:
              a3 = a4;
              goto LABEL_40;
            }
LABEL_287:
            BOOL v7 = 0;
            a3 = 32856;
            goto LABEL_40;
          }
          if (a5 == 5126)
          {
            BOOL v7 = 0;
            a3 = 34836;
            goto LABEL_40;
          }
          int v11 = 5131;
        }
        else
        {
          if (a5 <= 35898)
          {
            switch(a5)
            {
              case 33634:
              case 33635:
              case 33636:
              case 33638:
                goto LABEL_178;
              case 33637:
                goto LABEL_273;
              case 33640:
                goto LABEL_274;
              default:
                goto LABEL_287;
            }
          }
          if (a5 == 35899 || a5 == 35902) {
            goto LABEL_40;
          }
          int v11 = 36193;
        }
        if (a5 == v11) {
          goto LABEL_40;
        }
        goto LABEL_287;
      default:
        goto LABEL_40;
    }
  }
  if ((int)a3 > 34024)
  {
    switch((int)a3)
    {
      case 34025:
LABEL_20:
        BOOL v7 = 0;
        a3 = 32828;
        goto LABEL_40;
      case 34026:
LABEL_120:
        BOOL v7 = 0;
        a3 = 32832;
        goto LABEL_40;
      case 34027:
        goto LABEL_122;
      case 34028:
LABEL_175:
        BOOL v7 = 0;
        a3 = 32843;
        goto LABEL_40;
      case 34029:
        if (a6) {
          goto LABEL_151;
        }
        BOOL v8 = 1;
        if ((*(_WORD *)(a2 + 982) & 0x600) == 0 || (*(_WORD *)(a2 + 982) & 0x100) != 0) {
          goto LABEL_152;
        }
        BOOL v8 = (*(unsigned char *)(*(void *)(a1 + 29032) + 577) & 0x80) == 0 && (*(_WORD *)(a2 + 982) & 0x1800) != 0;
        if (v8) {
          goto LABEL_152;
        }
        a3 = 33776;
        goto LABEL_39;
      case 34030:
        if (a6) {
          goto LABEL_16;
        }
        BOOL v8 = 1;
        if ((*(_WORD *)(a2 + 982) & 0x600) == 0 || (*(_WORD *)(a2 + 982) & 0x100) != 0) {
          goto LABEL_17;
        }
        BOOL v8 = (*(unsigned char *)(*(void *)(a1 + 29032) + 577) & 0x80) == 0 && (*(_WORD *)(a2 + 982) & 0x1800) != 0;
        if (v8) {
          goto LABEL_17;
        }
        a3 = 33778;
        goto LABEL_39;
      case 34031:
      case 34032:
      case 34033:
      case 34034:
      case 34035:
      case 34036:
      case 34037:
      case 34038:
      case 34039:
      case 34040:
        goto LABEL_40;
      case 34041:
        BOOL v7 = 0;
        if (a5 == 36269) {
          a3 = 36013;
        }
        else {
          a3 = 35056;
        }
        goto LABEL_40;
      default:
        if (a3 != 34871) {
          goto LABEL_40;
        }
LABEL_122:
        if (a6)
        {
          BOOL v8 = 1;
LABEL_124:
          a3 = 32837;
          goto LABEL_39;
        }
        BOOL v8 = 1;
        if ((*(_WORD *)(a2 + 982) & 0x600) == 0 || (*(_WORD *)(a2 + 982) & 0x100) != 0) {
          goto LABEL_124;
        }
        BOOL v8 = (*(unsigned char *)(*(void *)(a1 + 29032) + 577) & 0x80) == 0 && (*(_WORD *)(a2 + 982) & 0x1800) != 0;
        if (v8) {
          goto LABEL_124;
        }
        a3 = 34871;
        break;
    }
    goto LABEL_39;
  }
  if ((int)a3 > 33776)
  {
    if ((a3 - 33778) >= 2)
    {
      if (a3 != 33777) {
        goto LABEL_40;
      }
LABEL_86:
      if (a6)
      {
        BOOL v8 = 1;
      }
      else
      {
        BOOL v8 = 1;
        if ((*(_WORD *)(a2 + 982) & 0x600) != 0 && (*(_WORD *)(a2 + 982) & 0x100) == 0)
        {
          BOOL v8 = (*(unsigned char *)(*(void *)(a1 + 29032) + 577) & 0x80) == 0 && (*(_WORD *)(a2 + 982) & 0x1800) != 0;
          if (!v8) {
            goto LABEL_39;
          }
        }
      }
      a3 = 32855;
      goto LABEL_39;
    }
    goto LABEL_15;
  }
  switch(a3)
  {
    case 0x8226:
      if (a6)
      {
LABEL_165:
        BOOL v8 = 1;
      }
      else
      {
        BOOL v8 = 1;
        if ((*(_WORD *)(a2 + 982) & 0x600) != 0 && (*(_WORD *)(a2 + 982) & 0x100) == 0)
        {
          BOOL v8 = (*(unsigned char *)(*(void *)(a1 + 29032) + 577) & 0x80) == 0 && (*(_WORD *)(a2 + 982) & 0x1800) != 0;
          if (!v8)
          {
            a3 = 36285;
            goto LABEL_39;
          }
        }
      }
LABEL_166:
      a3 = 33323;
LABEL_39:
      BOOL v7 = !v8;
      break;
    case 0x8227:
      if (a5 == 5126)
      {
        BOOL v7 = 0;
        a3 = 33328;
      }
      else if (a5 == 36193 || a5 == 5131)
      {
        BOOL v7 = 0;
        a3 = 33327;
      }
      else
      {
        BOOL v7 = 0;
        a3 = 33323;
      }
      break;
    case 0x83F0:
LABEL_54:
      if (a6)
      {
LABEL_151:
        BOOL v8 = 1;
      }
      else
      {
        BOOL v8 = 1;
        if ((*(_WORD *)(a2 + 982) & 0x600) != 0 && (*(_WORD *)(a2 + 982) & 0x100) == 0)
        {
          BOOL v8 = (*(unsigned char *)(*(void *)(a1 + 29032) + 577) & 0x80) == 0 && (*(_WORD *)(a2 + 982) & 0x1800) != 0;
          if (!v8) {
            goto LABEL_39;
          }
        }
      }
LABEL_152:
      a3 = 36194;
      goto LABEL_39;
  }
LABEL_40:
  if (a7) {
    *a7 = v7;
  }
  return a3;
}

uint64_t gleTypeFromReadFramebuffer(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 28968);
  LOWORD(v3) = 5121;
  if (a2 > 32840)
  {
    if (a2 == 32841 || a2 == 33319) {
      goto LABEL_3;
    }
    if (a2 != 34041 || !v2) {
      return (unsigned __int16)v3;
    }
  }
  else
  {
    if ((a2 - 6406) < 5)
    {
LABEL_3:
      if (v2)
      {
        unsigned int v4 = *(unsigned __int16 *)(v2 + 472) - 36064;
        if (v4 > 9) {
          return (unsigned __int16)v3;
        }
        goto LABEL_22;
      }
      unsigned int v5 = *(unsigned char **)(a1 + 29480);
      unsigned int v6 = v5[48];
      if (v5[43])
      {
        if (v6 <= 0x10) {
          LOWORD(v3) = 5131;
        }
        else {
          LOWORD(v3) = 5126;
        }
        return (unsigned __int16)v3;
      }
      if (v6 > 8)
      {
        LOWORD(v3) = 5123;
        return (unsigned __int16)v3;
      }
      if (v6 > 5) {
        return (unsigned __int16)v3;
      }
      unsigned int v14 = v5[51];
      if (v14 > 1)
      {
        LOWORD(v3) = -32717;
        return (unsigned __int16)v3;
      }
      BOOL v16 = v14 == 0;
      __int16 v17 = -32716;
      __int16 v18 = -31901;
LABEL_33:
      if (v16) {
        LOWORD(v3) = v18;
      }
      else {
        LOWORD(v3) = v17;
      }
      return (unsigned __int16)v3;
    }
    if (a2 != 6402)
    {
      if (a2 != 6403) {
        return (unsigned __int16)v3;
      }
      goto LABEL_3;
    }
    if (!v2)
    {
      unsigned int v15 = *(unsigned __int8 *)(*(void *)(a1 + 29480) + 56);
      BOOL v16 = v15 == 24;
      if (v15 > 0x18)
      {
        LOWORD(v3) = 5125;
        return (unsigned __int16)v3;
      }
      __int16 v17 = 5123;
      __int16 v18 = 5121;
      goto LABEL_33;
    }
  }
  unsigned int v4 = 8;
LABEL_22:
  uint64_t v7 = v2 + 16 * v4;
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t v9 = v8 + 1072;
  uint64_t v10 = *(unsigned int *)(v7 + 300);
  uint64_t v11 = *(unsigned int *)(v7 + 304);
  unsigned int v3 = *(unsigned __int16 *)(v8 + 1072 + 480 * v10 + 32 * v11 + 18);
  __int16 v21 = *(_WORD *)(v8 + 1072 + 480 * v10 + 32 * v11 + 18);
  uint64_t v12 = v8 + 8 * *(unsigned __int8 *)(a1 + 32500);
  unsigned int v20 = 0;
  (*(void (**)(void, void, uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)(a1 + 29496) + 376))(*(void *)(a1 + 29464), *(void *)(v12 + 40), v10, v11, 4099, &v20);
  if (v20 != *(unsigned __int16 *)(v8 + 1000) || (*(unsigned char *)(v9 + 480 * v10 + 32 * v11 + 11) & 1) != 0)
  {
    gleTexLevelStorage(v20, *(unsigned __int16 *)(v9 + 480 * v10 + 32 * v11 + 16), v3, &v19, &v21);
    LOWORD(v3) = v21;
  }
  return (unsigned __int16)v3;
}

uint64_t glePixelPackSettings(uint64_t a1, int a2, int a3, int a4, int a5, int *a6, _DWORD *a7, _DWORD *a8, _DWORD *a9, int *a10, char a11)
{
  uint64_t result = glePixelBytes(a2, a3);
  *a7 = result;
  unsigned int v17 = a6[1];
  if (v17) {
    goto LABEL_6;
  }
  int v18 = *a6;
  if (!*a6) {
    int v18 = a4;
  }
  unsigned int v17 = v18 * result;
  *a9 = v17;
  unsigned int v19 = a6[7];
  if (v17 % v19)
  {
    v17 += v19 - v17 % v19;
LABEL_6:
    *a9 = v17;
  }
  int v20 = a6[3];
  if (!v20)
  {
    int v21 = a6[2];
    int v22 = v17 * a5;
    int v23 = v17 * v21;
    if (v21) {
      int v20 = v23;
    }
    else {
      int v20 = v22;
    }
  }
  *a10 = v20;
  if ((a11 & 4) != 0) {
    int v24 = a6[6];
  }
  else {
    int v24 = 0;
  }
  *a8 = *a7 * a6[5] + *a9 * a6[4] + v20 * v24;
  return result;
}

uint64_t gleStandardizeIntegerFormat(unsigned int a1)
{
  if (a1 == 33320) {
    unsigned int v1 = 33319;
  }
  else {
    unsigned int v1 = a1;
  }
  unsigned int v2 = a1 - 29843;
  if (a1 >= 0x8D9E) {
    unsigned int v2 = a1;
  }
  if (a1 <= 0x8D9B) {
    unsigned int v3 = a1 - 3258;
  }
  else {
    unsigned int v3 = v2;
  }
  if (a1 <= 0x8D99) {
    unsigned int v4 = a1 - 29841;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a1 >= 0x8D94) {
    return v4;
  }
  else {
    return v1;
  }
}

uint64_t gleCreateIOSurfaceLevel(uint64_t a1, uint64_t a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6, __int16 a7)
{
  *(void *)(a2 + 24) = 0;
  *(_WORD *)(a2 + 4) = a3;
  *(_WORD *)(a2 + 6) = a4;
  *(_WORD *)(a2 + 8) = a5;
  *(_WORD *)(a2 + 16) = a6;
  *(_WORD *)(a2 + 18) = a7;
  *(_WORD *)(a2 + 10) = 13312;
  *(_DWORD *)(a2 + 12) = 0;
  return 0;
}

uint64_t gleEvaluateTextureImageChange(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, int a9, unsigned int a10, unsigned int a11, unsigned int a12, uint64_t a13, uint64_t a14)
{
  if (a11 == 33320) {
    unsigned int v19 = 33319;
  }
  else {
    unsigned int v19 = a11;
  }
  unsigned int v20 = a11 - 29843;
  if (a11 >= 0x8D9E) {
    unsigned int v20 = a11;
  }
  if (a11 <= 0x8D9B) {
    unsigned int v21 = a11 - 3258;
  }
  else {
    unsigned int v21 = v20;
  }
  if (a11 <= 0x8D99) {
    unsigned int v22 = a11 - 29841;
  }
  else {
    unsigned int v22 = v21;
  }
  if (a11 >= 0x8D94) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = v19;
  }
  __int16 v38 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  BOOL v35 = 0;
  uint64_t v24 = gleSizedInternalFormat(a1, a2, a10, v23, a12, a9, &v35);
  uint64_t v25 = v24;
  if (*(_DWORD *)(a2 + 884) == a5) {
    *(unsigned char *)(a2 + 555) = v35;
  }
  float32x4_t v26 = (_WORD *)(a1 + 29832);
  if (a5 >= 1) {
    *(unsigned char *)(a2 + 558) = 1;
  }
  *(_WORD *)(a2 + 30 * a4 + 2 * a5 + 560) = v24;
  uint64_t v27 = gfxEvaluateTextureForGeometryChange();
  if (v27)
  {
    (*(void (**)(void, uint64_t, void, void))(*(void *)(a1 + 29496) + 272))(*(void *)(a1 + 29464), 1, 0, *(void *)(a2 + 8 * *(unsigned __int8 *)(a1 + 32500)));
    gfxSynchronizeTexLevelStorage();
    uint64_t v28 = *(void *)(a1 + 19296);
    int v29 = *(_DWORD *)(v28 + 296);
    if (v29)
    {
      if (!*v26) {
        *float32x4_t v26 = v29;
      }
      *(_DWORD *)(v28 + 296) = 0;
    }
  }
  else if ((*(unsigned char *)(a3 + 11) & 0x20) != 0)
  {
    (*(void (**)(void, uint64_t, void, void))(*(void *)(a1 + 29496) + 272))(*(void *)(a1 + 29464), 1, 0, *(void *)(a2 + 8 * *(unsigned __int8 *)(a1 + 32500)));
  }
  if (*(void *)(a3 + 24))
  {
    char v30 = *(unsigned char *)(a3 + 11);
    if (v30)
    {
      *(void *)(a3 + 24) = 0;
    }
    else
    {
      gfxFreeTextureLevel();
      char v30 = *(unsigned char *)(a3 + 11);
    }
    *(unsigned char *)(a3 + 11) = v30 & 0xEF;
  }
  gleCreateTextureLevel(a1, a2, a3, v25, a6, a7, a8, a9, v23, a12, a14);
  gfxUpdateTextureForGeometryChange();
  gfxUpdatePluginTextureLevelGeometry();
  return v27;
}

uint64_t gleEvaluateTextureParameterChange(uint64_t a1, uint64_t a2, int a3, int a4, char a5, char a6)
{
  char v10 = *(unsigned char *)(a2 + 559);
  int v11 = (v10 - 1);
  if (v11 >= a3) {
    int v12 = a3;
  }
  else {
    int v12 = (v10 - 1);
  }
  if (v11 >= a4) {
    int v11 = a4;
  }
  if (v11 <= v12) {
    int v11 = v12;
  }
  if (*(unsigned char *)(a2 + 559)) {
    int v13 = v11;
  }
  else {
    int v13 = a4;
  }
  if (*(unsigned char *)(a2 + 559)) {
    int v14 = v12;
  }
  else {
    int v14 = a3;
  }
  if (gfxEvaluateTextureForParameterChange())
  {
    unsigned int v15 = (_WORD *)(a1 + 29832);
    (*(void (**)(void, uint64_t, void, void))(*(void *)(a1 + 29496) + 272))(*(void *)(a1 + 29464), 1, 0, *(void *)(a2 + 8 * *(unsigned __int8 *)(a1 + 32500)));
    gfxSynchronizeTexLevelStorage();
    uint64_t v16 = *(void *)(a1 + 19296);
    int v17 = *(_DWORD *)(v16 + 296);
    if (v17)
    {
      if (!*v15) {
        *unsigned int v15 = v17;
      }
      *(_DWORD *)(v16 + 296) = 0;
    }
  }
  *(_DWORD *)(a2 + 884) = v14;
  *(_DWORD *)(a2 + 888) = v13;
  *(unsigned char *)(a2 + 898) = a6 & 1 | (2 * (a5 & 1)) | *(unsigned char *)(a2 + 898) & 0xFC;
  gfxUpdateTextureForParameterChange();
  return gfxUpdatePluginTextureLevelGeometry();
}

uint64_t gleEvaluateTextureImageChangeNoSync(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, char a7, uint64_t a8, unsigned int a9, unsigned int a10, int a11, int a12)
{
  *(_WORD *)(a2 + 560) = a8;
  gfxEvaluateTextureForGeometryChange();
  if (a12) {
    gleCreateTextureLevel(a1, a2, a3, a8, a4, a5, a6, a7, a9, a10, 0);
  }
  gfxUpdateTextureForGeometryChange();
  return gfxUpdatePluginTextureLevelGeometry();
}

uint64_t gleSynchronizeTextureLevelOnCurrentDevices(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (_WORD *)(a1 + 29832);
  uint64_t v4 = 2667;
  if (*(void *)(a1 + 29024) != *(void *)(a2 + 536)) {
    uint64_t v4 = 2668;
  }
  uint64_t v5 = *((unsigned __int8 *)v3 + v4);
  (*(void (**)(void, uint64_t, void, void))(*(void *)(a1 + 1672 * v5 + 34160) + 1328))(*(void *)(a1 + 1672 * v5 + 32512), 1, 0, *(void *)(a2 + 8 * v5));
  gfxUploadPluginTextureLevel();
  uint64_t v6 = *(void *)(a1 + 19296);
  int v7 = *(_DWORD *)(v6 + 296);
  if (v7)
  {
    if (!*v3) {
      *unsigned int v3 = v7;
    }
    *(_DWORD *)(v6 + 296) = 0;
  }
  return v5;
}

uint64_t gleSynchronizeTextureLevelOnCurrentDevicesForRead(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (_WORD *)(a1 + 29832);
  uint64_t v4 = 2667;
  if (*(void *)(a1 + 29024) != *(void *)(a2 + 536)) {
    uint64_t v4 = 2668;
  }
  uint64_t v5 = *((unsigned __int8 *)v3 + v4);
  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(a1 + 1672 * v5 + 34160) + 1328))(*(void *)(a1 + 1672 * v5 + 32512), 1, 1, *(void *)(a2 + 8 * v5));
  gfxUploadPluginTextureLevel();
  uint64_t v6 = *(void *)(a1 + 19296);
  int v7 = *(_DWORD *)(v6 + 296);
  if (v7)
  {
    if (!*v3) {
      *unsigned int v3 = v7;
    }
    *(_DWORD *)(v6 + 296) = 0;
  }
  return v5;
}

uint64_t gleSynchronizePluginTextureLevels(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_WORD *)(a1 + 29832);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 979);
  uint64_t v6 = *(unsigned __int8 *)(a2 + 981);
  uint64_t v7 = *(void *)(a2 + 536);
  if (v7 && *(unsigned char *)(a1 + 32496))
  {
    uint64_t v8 = 0;
    uint64_t v9 = (void *)(a1 + 32512);
    while (v9[1] != v7)
    {
      ++v8;
      v9 += 209;
      if (*(unsigned __int8 *)(a1 + 32496) == v8) {
        goto LABEL_6;
      }
    }
    if (*(unsigned __int8 *)(a1 + 32499) == v8 || *(unsigned __int8 *)(a1 + 32500) == v8) {
      (*(void (**)(void, uint64_t, void, void))(v9[206] + 1328))(*v9, 1, 0, *(void *)(a2 + 8 * v8));
    }
  }
LABEL_6:
  if (v5)
  {
    uint64_t v10 = 0;
    uint64_t v11 = a2 + 1032;
    do
    {
      if (v6)
      {
        uint64_t v12 = 0;
        uint64_t v13 = v11;
        do
        {
          if ((*(unsigned char *)(v13 + 11) & 0x40) != 0)
          {
            gfxUploadPluginTextureLevel();
            gfxModifyPluginTextureLevel();
            uint64_t v14 = *(void *)(a1 + 19296);
            int v15 = *(_DWORD *)(v14 + 296);
            if (v15)
            {
              if (!*v4) {
                *uint64_t v4 = v15;
              }
              *(_DWORD *)(v14 + 296) = 0;
            }
          }
          ++v12;
          v13 += 32;
        }
        while (v6 != v12);
      }
      ++v10;
      v11 += 480;
    }
    while (v10 != v5);
  }
  *(void *)(a2 + 536) = 0;

  return gleDirtyTextureObjectCurrentBindPointsData(a1, a2, 0);
}

uint64_t gleDirtyTextureObjectCurrentBindPointsData(uint64_t result, uint64_t a2, int a3)
{
  if ((*(_WORD *)(a2 + 768) & 0x100) == 0)
  {
    uint64_t v3 = result;
    uint64_t v4 = (_DWORD *)(result + 28652);
    uint64_t v5 = *(void *)(result + 19296);
    int v6 = *(_DWORD *)(v5 + 4) + 1;
    *(_DWORD *)(v5 + 4) = v6;
    *(_DWORD *)(a2 + 544) = v6;
    if (a3) {
      *(_DWORD *)(a2 + 548) = v6;
    }
    uint64_t v7 = *(void *)(result + 28960);
    uint64_t v8 = *(void *)(result + 28968);
    if (*(_OWORD *)(result + 28960) != 0)
    {
      if (v7)
      {
        if (*(_DWORD *)(v7 + 556) != *(_DWORD *)(result + 29824))
        {
          *uint64_t v4 = 0;
          *(_DWORD *)(result + 29800) |= 0x50000000u;
        }
        gleUpdateFBODirtyStateForTexStampChange(result, (_DWORD *)(v7 + 40), (v7 == v8) | 2);
        if (v7 != v8) {
          *(_DWORD *)(v7 + 556) = *(_DWORD *)(*(void *)(v3 + 19296) + 4);
        }
      }
      if (v8)
      {
        if (*(_DWORD *)(v8 + 556) != v4[293]) {
          v4[287] |= 0x82000000;
        }
        if (v8 != v7) {
          gleUpdateFBODirtyStateForTexStampChange(v3, (_DWORD *)(v8 + 40), 1);
        }
        *(_DWORD *)(v8 + 556) = *(_DWORD *)(*(void *)(v3 + 19296) + 4);
      }
    }
    uint64_t result = gleUpdateCtxDirtyStateForTexStampChange(v3);
    v4[293] = *(_DWORD *)(*(void *)(v3 + 19296) + 4);
  }
  return result;
}

uint64_t gleSynchronizePluginTextures(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = 0;
  uint64_t v3 = result + 20776;
  do
  {
    for (uint64_t i = 0; i != 88; i += 8)
    {
      uint64_t v5 = *(void *)(v3 + i);
      if (v5 && *(void *)(v5 + 576)) {
        uint64_t result = gleSynchronizePluginTextureLevels(v1, v5 + 40);
      }
    }
    ++v2;
    v3 += 88;
  }
  while (v2 != 32);
  uint64_t v6 = *(void *)(v1 + 28960);
  if (v6)
  {
    for (uint64_t j = 40; j != 200; j += 16)
    {
      uint64_t v8 = *(void *)(v6 + j);
      if (v8 && *(void *)(v8 + 576)) {
        uint64_t result = gleSynchronizePluginTextureLevels(v1, v8 + 40);
      }
    }
  }
  uint64_t v9 = *(void *)(v1 + 28968);
  if (v9 && v9 != *(void *)(v1 + 28960))
  {
    for (uint64_t k = 40; k != 200; k += 16)
    {
      uint64_t v11 = *(void *)(v9 + k);
      if (v11)
      {
        if (*(void *)(v11 + 576)) {
          uint64_t result = gleSynchronizePluginTextureLevels(v1, v11 + 40);
        }
      }
    }
  }
  return result;
}

uint64_t gleInvalidatePluginTextureLevels(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *(unsigned __int8 *)(a2 + 979);
  if ((*(_WORD *)(a2 + 912) & 0xFFFC) == 0x2700) {
    int v3 = (-1 << ((*(_WORD *)(a2 + 982) & 0xF) + 1)) & ~(-1 << ((*(_WORD *)(a2 + 982) >> 4) + 1));
  }
  else {
    int v3 = 1;
  }
  int v15 = v3;
  if (*(unsigned char *)(a2 + 979))
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = a2 + 2 * v4;
      int v6 = *(unsigned __int16 *)(v5 + 996);
      unsigned int v7 = v15 & v6;
      if ((v15 & v6) != 0)
      {
        uint64_t v8 = (_WORD *)(v5 + 996);
        do
        {
          uint64_t v9 = __clz(__rbit32(v7));
          int v10 = 1 << v9;
          uint64_t v11 = a2 + 480 * v4 + 32 * v9;
          char v12 = *(unsigned char *)(v11 + 1043);
          if ((v12 & 0xF) == 0)
          {
            uint64_t v13 = (char *)(v11 + 1043);
            if ((*(unsigned char *)(v11 + 1043) & 0x10) != 0)
            {
              if ((*(unsigned char *)(v11 + 1043) & 9) == 0)
              {
                uint64_t result = gfxFreeTextureLevel();
                char v12 = *v13;
                int v6 = (unsigned __int16)*v8;
              }
              v12 &= ~0x10u;
              v6 &= ~v10;
              _WORD *v8 = v6;
            }
            *uint64_t v13 = v12 | 0x40;
          }
          v7 ^= v10;
        }
        while (v7);
      }
      ++v4;
    }
    while (v4 != v16);
  }
  return result;
}

uint64_t gleTextureTargetExtractor(uint64_t a1)
{
  uint64_t v1 = *(_WORD *)(a1 + 808) & 0xF;
  if (v1 > 0xA) {
    return 0;
  }
  else {
    return dword_227DC27A0[v1];
  }
}

uint64_t gleUpdateCtxDirtyStateForTexStampChange(uint64_t result)
{
  uint64_t v1 = 0;
  if (*(unsigned __int8 *)(result + 14996) <= 1u) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = *(unsigned __int8 *)(result + 14996);
  }
  do
  {
    unint64_t v3 = *(void *)(result + 8 * v1 + 14976);
    if (v3 != -1)
    {
      unint64_t v4 = ~v3;
      int v5 = *(_DWORD *)(result + 29824);
      do
      {
        unint64_t v6 = __clz(__rbit64(v4));
        uint64_t v7 = 15 << (v6 & 0x3C);
        uint64_t v8 = *(void *)(result + 20776 + 88 * ((16 * v1) | (v6 >> 2)) + 8 * ((v7 & v3) >> (v6 & 0x3C)));
        if (*(_DWORD *)(v8 + 584) - v5 >= 1)
        {
          *(_DWORD *)(result + 28652) = 0;
          int v9 = 1 << (v6 >> 2);
          *(_DWORD *)(result + 1524) |= v9;
          if (*(_DWORD *)(v8 + 588) - v5 >= 1)
          {
            *(_DWORD *)(result + 1536) |= v9;
            *(_DWORD *)(result + 28652) = 0;
            *(_DWORD *)(result + 1548) |= 0x8000000u;
          }
        }
        v4 &= ~v7;
      }
      while (v4);
    }
    ++v1;
  }
  while (v1 != v2);
  return result;
}

uint64_t gleUpdateFBODirtyStateForTexStampChange(uint64_t result, _DWORD *a2, char a3)
{
  unint64_t v3 = (_DWORD *)(result + 28652);
  unsigned int v4 = a2[125];
  int v5 = a2 + 64;
  if (a2[110])
  {
    if (!v4) {
      return result;
    }
    int v6 = a2[129];
    while (1)
    {
      uint64_t v7 = __clz(__rbit32(v4));
      int v8 = 1 << v7;
      v4 ^= 1 << v7;
      uint64_t v9 = *(void *)&a2[4 * v7];
      if (*(_DWORD *)(v9 + 584) - v6 >= 1
        && *(_DWORD *)(v9 + 480 * (int)v5[4 * v7 + 1] + 32 * (int)v5[4 * v7 + 2] + 1072) - v6 >= 1)
      {
        a2[124] |= v8;
        if ((a2[114] & v8) != 0) {
          break;
        }
      }
      if (!v4) {
        return result;
      }
    }
    a2[110] = 0xFFFF;
    if ((a3 & 2) != 0)
    {
      *unint64_t v3 = 0;
      *(_DWORD *)(result + 29800) |= 0x10000000u;
      if ((a3 & 1) == 0)
      {
LABEL_33:
        if (!v4) {
          return result;
        }
        goto LABEL_51;
      }
    }
    else if ((a3 & 1) == 0)
    {
      goto LABEL_33;
    }
    *(_DWORD *)(result + 29800) |= 0x2000000u;
    if (!v4) {
      return result;
    }
LABEL_51:
    int v25 = a2[129];
    do
    {
      uint64_t v26 = __clz(__rbit32(v4));
      int v27 = 1 << v26;
      uint64_t v28 = *(void *)&a2[4 * v26];
      if (*(_DWORD *)(v28 + 584) - v25 >= 1
        && *(_DWORD *)(v28 + 480 * (int)v5[4 * v26 + 1] + 32 * (int)v5[4 * v26 + 2] + 1072) - v25 >= 1)
      {
        a2[124] |= v27;
      }
      v4 ^= v27;
    }
    while (v4);
    return result;
  }
  if (!v4) {
    return result;
  }
  int v10 = 0;
  int v11 = a2[129];
  while (1)
  {
    uint64_t v12 = __clz(__rbit32(v4));
    int v13 = 1 << v12;
    v4 ^= 1 << v12;
    uint64_t v14 = *(void *)&a2[4 * v12];
    if (*(_DWORD *)(v14 + 584) - v11 < 1) {
      goto LABEL_28;
    }
    if (*(_DWORD *)(v14 + 480 * (int)v5[4 * v12 + 1] + 32 * (int)v5[4 * v12 + 2] + 1072) - v11 >= 1) {
      break;
    }
    if (!v10)
    {
      if ((a2[114] & v13) == 0)
      {
        int v10 = 0;
        goto LABEL_28;
      }
      uint64_t v15 = *(unsigned __int8 *)(result + 32496);
      if (*(unsigned char *)(result + 32496))
      {
        uint64_t v16 = (char *)a2 + 601;
        int v17 = (char *)a2 + 601;
        do
        {
          int v18 = *v17;
          v17 += 88;
          if (!v18) {
            *(v16 - 1) = 1;
          }
          uint64_t v16 = v17;
          --v15;
        }
        while (v15);
      }
      if ((a3 & 2) != 0)
      {
        *unint64_t v3 = 0;
        *(_DWORD *)(result + 29800) |= 0x50000000u;
      }
      if (a3) {
        *(_DWORD *)(result + 29800) |= 0x82000000;
      }
      ++*(_DWORD *)(*(void *)(result + 19296) + 316);
    }
    int v10 = 1;
LABEL_28:
    if (!v4) {
      return result;
    }
  }
  a2[124] |= v13;
  if ((a2[114] & v13) == 0) {
    goto LABEL_28;
  }
  a2[110] = 0xFFFF;
  uint64_t v19 = *(unsigned __int8 *)(result + 32496);
  if (*(unsigned char *)(result + 32496))
  {
    unsigned int v20 = (char *)a2 + 601;
    do
    {
      *(_WORD *)(v20 - 1) = 1;
      v20 += 88;
      --v19;
    }
    while (v19);
  }
  if ((a3 & 2) != 0)
  {
    *unint64_t v3 = 0;
    *(_DWORD *)(result + 29800) |= 0x10000000u;
  }
  if (a3) {
    *(_DWORD *)(result + 29800) |= 0x2000000u;
  }
  ++*(_DWORD *)(*(void *)(result + 19296) + 316);
  if (v4)
  {
    int v21 = a2[129];
    do
    {
      uint64_t v22 = __clz(__rbit32(v4));
      int v23 = 1 << v22;
      uint64_t v24 = *(void *)&a2[4 * v22];
      if (*(_DWORD *)(v24 + 584) - v21 >= 1
        && *(_DWORD *)(v24 + 480 * (int)v5[4 * v22 + 1] + 32 * (int)v5[4 * v22 + 2] + 1072) - v21 >= 1)
      {
        a2[124] |= v23;
      }
      v4 ^= v23;
    }
    while (v4);
  }
  return result;
}

uint64_t gleDirtyTextureObjectCurrentBindPointsNoFBO(uint64_t result, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 768) & 0x100) == 0)
  {
    uint64_t v3 = result;
    unsigned int v4 = (_DWORD *)(result + 28652);
    uint64_t v5 = *(void *)(result + 28960);
    uint64_t v6 = *(void *)(result + 28968);
    if (*(_OWORD *)(result + 28960) == 0)
    {
      uint64_t v10 = *(void *)(result + 19296);
      int v11 = *(_DWORD *)(v10 + 4) + 1;
      *(_DWORD *)(v10 + 4) = v11;
      *(_DWORD *)(a2 + 544) = v11;
    }
    else
    {
      if (v5)
      {
        int v7 = *(_DWORD *)(v5 + 556);
        if (v7 != *(_DWORD *)(result + 29824))
        {
          *unsigned int v4 = 0;
          *(_DWORD *)(result + 29800) |= 0x50000000u;
          int v7 = *(_DWORD *)(v5 + 556);
        }
        if (v7 != *(_DWORD *)(*(void *)(result + 19296) + 4)) {
          gleUpdateFBODirtyStateForTexStampChange(result, (_DWORD *)(v5 + 40), (v5 == v6) | 2);
        }
      }
      if (v6)
      {
        if (*(_DWORD *)(v6 + 556) != v4[293]) {
          v4[287] |= 0x82000000;
        }
        if (v6 != v5 && *(_DWORD *)(v6 + 556) != *(_DWORD *)(*(void *)(v3 + 19296) + 4)) {
          gleUpdateFBODirtyStateForTexStampChange(v3, (_DWORD *)(v6 + 40), 1);
        }
      }
      uint64_t v8 = *(void *)(v3 + 19296);
      int v9 = *(_DWORD *)(v8 + 4) + 1;
      *(_DWORD *)(v8 + 4) = v9;
      *(_DWORD *)(a2 + 544) = v9;
      if (v5) {
        *(_DWORD *)(v5 + 556) = v9;
      }
      if (v6) {
        *(_DWORD *)(v6 + 556) = *(_DWORD *)(*(void *)(v3 + 19296) + 4);
      }
    }
    uint64_t result = gleUpdateCtxDirtyStateForTexStampChange(v3);
    v4[293] = *(_DWORD *)(*(void *)(v3 + 19296) + 4);
  }
  return result;
}

uint64_t gleDirtyTextureObjectCurrentBindPointsGeom(uint64_t result, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 768) & 0x100) == 0)
  {
    uint64_t v2 = result;
    uint64_t v3 = (_DWORD *)(result + 28652);
    uint64_t v4 = *(void *)(result + 19296);
    int v5 = *(_DWORD *)(v4 + 4) + 1;
    *(_DWORD *)(v4 + 4) = v5;
    *(_DWORD *)(a2 + 544) = v5;
    uint64_t v6 = *(unsigned __int8 *)(a2 + 979);
    if (*(unsigned char *)(a2 + 979))
    {
      uint64_t v7 = 0;
      uint64_t v8 = *(unsigned __int8 *)(a2 + 976);
      uint64_t v9 = *(unsigned __int8 *)(a2 + 978);
      uint64_t v10 = a2 + 32 * v8 + 1032;
      do
      {
        if (v8 <= v9)
        {
          int v11 = (_DWORD *)v10;
          uint64_t v12 = v9 - v8 + 1;
          do
          {
            *int v11 = v5;
            v11 += 8;
            --v12;
          }
          while (v12);
        }
        ++v7;
        v10 += 480;
      }
      while (v7 != v6);
    }
    uint64_t v13 = *(void *)(result + 28960);
    uint64_t v14 = *(void *)(result + 28968);
    if (*(_OWORD *)(result + 28960) != 0)
    {
      if (v13)
      {
        if (*(_DWORD *)(v13 + 556) != *(_DWORD *)(result + 29824))
        {
          *uint64_t v3 = 0;
          *(_DWORD *)(result + 29800) |= 0x50000000u;
        }
        gleUpdateFBODirtyStateForTexStampChange(result, (_DWORD *)(v13 + 40), (v13 == v14) | 2);
        if (v13 != v14) {
          *(_DWORD *)(v13 + 556) = *(_DWORD *)(*(void *)(v2 + 19296) + 4);
        }
      }
      if (v14)
      {
        if (*(_DWORD *)(v14 + 556) != v3[293]) {
          v3[287] |= 0x82000000;
        }
        if (v14 != v13) {
          gleUpdateFBODirtyStateForTexStampChange(v2, (_DWORD *)(v14 + 40), 1);
        }
        *(_DWORD *)(v14 + 556) = *(_DWORD *)(*(void *)(v2 + 19296) + 4);
      }
    }
    uint64_t result = gleUpdateCtxDirtyStateForTexStampChange(v2);
    v3[293] = *(_DWORD *)(*(void *)(v2 + 19296) + 4);
  }
  return result;
}

uint64_t gleDirtyTextureLevelCurrentBindPointsGeom(uint64_t result, uint64_t a2, int *a3)
{
  if ((*(_WORD *)(a2 + 768) & 0x100) == 0)
  {
    uint64_t v3 = result;
    uint64_t v4 = (_DWORD *)(result + 28652);
    uint64_t v5 = *(void *)(result + 19296);
    int v6 = *(_DWORD *)(v5 + 4) + 1;
    *(_DWORD *)(v5 + 4) = v6;
    *(_DWORD *)(a2 + 544) = v6;
    *a3 = v6;
    uint64_t v7 = *(void *)(result + 28960);
    uint64_t v8 = *(void *)(result + 28968);
    if (*(_OWORD *)(result + 28960) != 0)
    {
      if (v7)
      {
        if (*(_DWORD *)(v7 + 556) != *(_DWORD *)(result + 29824))
        {
          *uint64_t v4 = 0;
          *(_DWORD *)(result + 29800) |= 0x50000000u;
        }
        gleUpdateFBODirtyStateForTexStampChange(result, (_DWORD *)(v7 + 40), (v7 == v8) | 2);
        if (v7 != v8) {
          *(_DWORD *)(v7 + 556) = *(_DWORD *)(*(void *)(v3 + 19296) + 4);
        }
      }
      if (v8)
      {
        if (*(_DWORD *)(v8 + 556) != v4[293]) {
          v4[287] |= 0x82000000;
        }
        if (v8 != v7) {
          gleUpdateFBODirtyStateForTexStampChange(v3, (_DWORD *)(v8 + 40), 1);
        }
        *(_DWORD *)(v8 + 556) = *(_DWORD *)(*(void *)(v3 + 19296) + 4);
      }
    }
    uint64_t result = gleUpdateCtxDirtyStateForTexStampChange(v3);
    v4[293] = *(_DWORD *)(*(void *)(v3 + 19296) + 4);
  }
  return result;
}

uint64_t gleDirtyRenderbufferCurrentBindPointsGeom(uint64_t result, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 768) & 0x100) == 0)
  {
    uint64_t v2 = result;
    uint64_t v3 = (_DWORD *)(result + 28652);
    int v4 = *(_DWORD *)(result + 29824);
    uint64_t v5 = *(void *)(result + 19296);
    int v6 = *(_DWORD *)(v5 + 4);
    *(_DWORD *)(v5 + 4) = v6 + 1;
    *(_DWORD *)(a2 + 544) = v6 + 1;
    *(_DWORD *)(a2 + 1032) = v6 + 1;
    uint64_t v7 = *(void *)(result + 28960);
    uint64_t v8 = *(void *)(result + 28968);
    if (*(_OWORD *)(result + 28960) != 0)
    {
      if (v7)
      {
        if (*(_DWORD *)(v7 + 556) != *(_DWORD *)(result + 29824))
        {
          *uint64_t v3 = 0;
          *(_DWORD *)(result + 29800) |= 0x50000000u;
        }
        uint64_t result = gleUpdateFBODirtyStateForTexStampChange(result, (_DWORD *)(v7 + 40), (v7 == v8) | 2u);
        if (v7 != v8) {
          *(_DWORD *)(v7 + 556) = *(_DWORD *)(*(void *)(v2 + 19296) + 4);
        }
      }
      if (v8)
      {
        if (*(_DWORD *)(v8 + 556) != v3[293]) {
          v3[287] |= 0x82000000;
        }
        if (v8 != v7) {
          uint64_t result = gleUpdateFBODirtyStateForTexStampChange(v2, (_DWORD *)(v8 + 40), 1);
        }
        *(_DWORD *)(v8 + 556) = *(_DWORD *)(*(void *)(v2 + 19296) + 4);
      }
    }
    if (v4 != v6) {
      uint64_t result = gleUpdateCtxDirtyStateForTexStampChange(v2);
    }
    v3[293] = *(_DWORD *)(*(void *)(v2 + 19296) + 4);
  }
  return result;
}

uint64_t gleDirtyTextureLevelCurrentBindPointsData(uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((*(_WORD *)(a2 + 768) & 0x100) == 0)
  {
    uint64_t v4 = result;
    uint64_t v5 = (_DWORD *)(result + 28652);
    uint64_t v6 = *(void *)(result + 28960);
    uint64_t v7 = *(void *)(result + 28968);
    if (*(_OWORD *)(result + 28960) == 0)
    {
      uint64_t v13 = *(void *)(result + 19296);
      int v14 = *(_DWORD *)(v13 + 4) + 1;
      *(_DWORD *)(v13 + 4) = v14;
      *(_DWORD *)(a2 + 544) = v14;
    }
    else
    {
      if (v6)
      {
        int v9 = *(_DWORD *)(v6 + 556);
        if (v9 != *(_DWORD *)(result + 29824))
        {
          _DWORD *v5 = 0;
          *(_DWORD *)(result + 29800) |= 0x50000000u;
          int v9 = *(_DWORD *)(v6 + 556);
        }
        char v10 = (v6 == v7) | 2;
        if (v9 != *(_DWORD *)(*(void *)(result + 19296) + 4)) {
          gleUpdateFBODirtyStateForTexStampChange(result, (_DWORD *)(v6 + 40), v10);
        }
        gleUpdateFBODirtyStateForLevDataChange(v4, v6 + 40, a2, a3, v10);
      }
      if (v7)
      {
        if (*(_DWORD *)(v7 + 556) != v5[293]) {
          v5[287] |= 0x82000000;
        }
        if (v7 != v6)
        {
          if (*(_DWORD *)(v7 + 556) != *(_DWORD *)(*(void *)(v4 + 19296) + 4)) {
            gleUpdateFBODirtyStateForTexStampChange(v4, (_DWORD *)(v7 + 40), 1);
          }
          gleUpdateFBODirtyStateForLevDataChange(v4, v7 + 40, a2, a3, 1);
        }
      }
      uint64_t v11 = *(void *)(v4 + 19296);
      int v12 = *(_DWORD *)(v11 + 4) + 1;
      *(_DWORD *)(v11 + 4) = v12;
      *(_DWORD *)(a2 + 544) = v12;
      if (v6) {
        *(_DWORD *)(v6 + 556) = v12;
      }
      if (v7) {
        *(_DWORD *)(v7 + 556) = *(_DWORD *)(*(void *)(v4 + 19296) + 4);
      }
    }
    uint64_t result = gleUpdateCtxDirtyStateForTexStampChange(v4);
    v5[293] = *(_DWORD *)(*(void *)(v4 + 19296) + 4);
  }
  return result;
}

uint64_t gleUpdateFBODirtyStateForLevDataChange(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!*(_DWORD *)(a2 + 440))
  {
    unsigned int v5 = *(_DWORD *)(a2 + 456);
    if (v5)
    {
      while (1)
      {
        uint64_t v6 = __clz(__rbit32(v5));
        if (*(void *)(a2 + 16 * v6) + 40 == a3
          && a3 + 480 * *(int *)(a2 + 256 + 16 * v6 + 4) + 32 * *(int *)(a2 + 256 + 16 * v6 + 8) + 1032 == a4)
        {
          break;
        }
        v5 ^= 1 << v6;
        if (!v5) {
          return result;
        }
      }
      uint64_t v7 = *(unsigned __int8 *)(result + 32496);
      if (*(unsigned char *)(result + 32496))
      {
        uint64_t v8 = (unsigned __int8 *)(a2 + 601);
        int v9 = (unsigned __int8 *)(a2 + 601);
        do
        {
          int v10 = *v9;
          v9 += 88;
          if (!v10) {
            *(v8 - 1) = 1;
          }
          uint64_t v8 = v9;
          --v7;
        }
        while (v7);
      }
      if ((a5 & 2) != 0)
      {
        *(_DWORD *)(result + 28652) = 0;
        *(_DWORD *)(result + 29800) |= 0x50000000u;
      }
      if (a5) {
        *(_DWORD *)(result + 29800) |= 0x82000000;
      }
      ++*(_DWORD *)(*(void *)(result + 19296) + 316);
    }
  }
  return result;
}

uint64_t gleInitTransformFeedback(uint64_t a1)
{
  gleInitHashMachine((void *)(a1 + 26400));
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  TransformFeedbackObject = gleCreateTransformFeedbackObject(a1, 0);
  ++*((_DWORD *)TransformFeedbackObject + 5);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  unint64_t v3 = 0;
  uint64_t v4 = TransformFeedbackObject + 128;
  *(void *)(a1 + 26432) = TransformFeedbackObject;
  *(void *)(a1 + 26440) = TransformFeedbackObject;
  unsigned int v5 = TransformFeedbackObject + 48;
  uint64_t v6 = TransformFeedbackObject + 88;
  uint64_t v7 = (void *)(a1 + 33552);
  do
  {
    uint64_t result = *(void *)&v4[8 * v3];
    uint64_t v9 = *(unsigned __int8 *)(a1 + 32496);
    if (result)
    {
      if (*(unsigned char *)(a1 + 32496))
      {
        int v10 = (uint64_t *)(result + 40);
        uint64_t v11 = v7;
        do
        {
          uint64_t v12 = *v10++;
          *uint64_t v11 = v12;
          v11 += 209;
          --v9;
        }
        while (v9);
      }
    }
    else if (*(unsigned char *)(a1 + 32496))
    {
      unint64_t v13 = 0;
      uint64_t v14 = 1672 * *(unsigned __int8 *)(a1 + 32496);
      do
      {
        v7[v13 / 8] = 0;
        v13 += 1672;
      }
      while (v14 != v13);
    }
    if (v3 <= 3) {
      uint64_t result = gleTransferBufferBindingToGLD(result, *(void *)&v5[8 * v3], *(void *)&v6[8 * v3], (uint64_t *)(a1 + 8 * v3 + 17992), (uint64_t *)(a1 + 8 * v3 + 18024), 4, 4);
    }
    ++v3;
    ++v7;
  }
  while (v3 != 5);
  return result;
}

char *gleCreateTransformFeedbackObject(uint64_t a1, int a2)
{
  uint64_t v4 = (char *)malloc_type_malloc(0xC0uLL, 0x577B5147uLL);
  if (!v4) {
    abort();
  }
  unsigned int v5 = v4;
  *((_DWORD *)v4 + 4) = a2;
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  *(void *)(v4 + 20) = 0xE00000001;
  *((void *)v4 + 4) = 0;
  *((_DWORD *)v4 + 7) = 0;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  for (uint64_t i = 128; i != 168; i += 8)
    *(void *)&v4[i] = 0;
  *((_DWORD *)v4 + 42) = 0;
  *((_DWORD *)v4 + 10) = -65536;
  *((void *)v4 + 23) = 0;
  TransformFeedbackBuffer = gleCreateTransformFeedbackBuffer(a1);
  if (TransformFeedbackBuffer)
  {
    *((void *)v5 + 20) = TransformFeedbackBuffer;
    *((void *)v5 + 10) = 0;
    *((void *)v5 + 15) = *((void *)TransformFeedbackBuffer + 19);
    *((_DWORD *)v5 + 42) |= 0x10u;
  }
  return v5;
}

void gleFreeTransformFeedbackState(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  uint64_t v2 = 0;
  uint64_t v3 = (*(_DWORD *)(a1 + 26424) + 1);
  do
  {
    uint64_t v4 = *(void *)(a1 + 26408);
    unsigned int v5 = *(void **)(v4 + 8 * v2);
    if (v5)
    {
      do
      {
        uint64_t v6 = (void *)*v5;
        gleFreeTransformFeedbackObject(a1, v5);
        unsigned int v5 = v6;
      }
      while (v6);
      uint64_t v4 = *(void *)(a1 + 26408);
    }
    *(void *)(v4 + 8 * v2++) = 0;
  }
  while (v2 != v3);
  uint64_t v7 = *(void **)(a1 + 26416);
  if (v7)
  {
    do
    {
      uint64_t v8 = (void *)*v7;
      MEMORY[0x22A686F90]();
      uint64_t v7 = v8;
    }
    while (v8);
  }
  if (*(void *)(a1 + 26408)) {
    MEMORY[0x22A686F90]();
  }
  gleFreeTransformFeedbackObject(a1, *(void **)(a1 + 26440));
  uint64_t v9 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v9);
}

void gleFreeTransformFeedbackObject(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)a2[4];
  if (v4)
  {
    free(v4);
    a2[4] = 0;
  }
  int v5 = *((_DWORD *)a2 + 42);
  if (v5)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = a2[v6 + 16];
      if (v7)
      {
        int v8 = *(_DWORD *)(v7 + 20) - 1;
        *(_DWORD *)(v7 + 20) = v8;
        if (!v8)
        {
          gleUnbindAndFreeBufferObject(a1, (void *)v7);
          int v5 = *((_DWORD *)a2 + 42);
        }
      }
      v5 &= ~(1 << v6);
      *((_DWORD *)a2 + 42) = v5;
      if (v5) {
        BOOL v9 = v6 >= 4;
      }
      else {
        BOOL v9 = 1;
      }
      ++v6;
    }
    while (!v9);
  }

  free(a2);
}

void *gleResetTransformFeedbackBufferCachePointers(void *result)
{
  uint64_t v1 = (uint64_t)result;
  uint64_t v2 = result[3096];
  if (!v2)
  {
    uint64_t v2 = result[3097];
    if (v2)
    {
      uint64_t v5 = v2 + 40;
      unsigned int v6 = 3;
      while (1)
      {
        uint64_t v2 = *(void *)(v5 + 8 * v6);
        if (v2) {
          break;
        }
        if (--v6 == -1)
        {
          uint64_t v2 = 0;
          break;
        }
      }
    }
  }
  uint64_t v3 = result[3304];
  if (*(__int16 *)(v3 + 42) == -1 || *(unsigned char *)(v3 + 41)) {
    unsigned int v4 = 0;
  }
  else {
    unsigned int v4 = *(_DWORD *)(v2 + 3724);
  }
  unint64_t v7 = 0;
  int v8 = result + 2249;
  do
  {
    if ((v4 >> v7))
    {
      uint64_t v9 = *(void *)(*(void *)(v1 + 26432) + 8 * v7 + 128);
      if (*(void *)(v9 + 192))
      {
        uint64_t result = (void *)gleSynchronizeBufferOnCurrentDevices(v1, v9 + 40);
      }
      else if (*(unsigned char *)(v9 + 165))
      {
        (*(void (**)(void, uint64_t, void, void))(*(void *)(v1 + 29448) + 272))(*(void *)(v1 + 29016), 3, 0, *(void *)(v9 + 40 + 8 * *(unsigned __int8 *)(v1 + 32499)));
        uint64_t result = (void *)gfxWaitBufferOnDevices();
      }
      uint64_t v11 = *(void *)(v9 + 136);
      if (v7 > 3)
      {
        uint64_t v12 = v11 + *(void *)(*(void *)(v1 + 26432) + 8 * v7 + 48);
        v8[849] = v12;
        uint64_t v13 = *(void *)(*(void *)(v1 + 26432) + 8 * v7 + 88);
      }
      else
      {
        uint64_t v12 = v11 + *v8;
        v8[849] = v12;
        uint64_t v13 = v8[4];
      }
      uint64_t v10 = v12 + v13;
    }
    else
    {
      uint64_t v10 = 0;
      v8[849] = 0;
    }
    v8[854] = v10;
    ++v7;
    ++v8;
  }
  while (v7 != 5);
  return result;
}

void gleBindTransformFeedback(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 26432) != a2)
  {
    int v17 = *(_DWORD **)(a1 + 26432);
    uint64_t v4 = a1 + 28652;
    if (*(unsigned char *)(a1 + 32481)) {
      *(unsigned char *)(a1 + 17985) = *(unsigned char *)(a2 + 41);
    }
    unint64_t v5 = 0;
    unsigned int v6 = (void *)(a1 + 33552);
    do
    {
      uint64_t v7 = *(void *)(a2 + 128 + 8 * v5);
      uint64_t v8 = *(unsigned __int8 *)(v4 + 3844);
      if (v7)
      {
        if (*(unsigned char *)(v4 + 3844))
        {
          uint64_t v9 = (uint64_t *)(v7 + 40);
          uint64_t v10 = v6;
          do
          {
            uint64_t v11 = *v9++;
            *uint64_t v10 = v11;
            v10 += 209;
            --v8;
          }
          while (v8);
        }
      }
      else if (*(unsigned char *)(v4 + 3844))
      {
        unint64_t v12 = 0;
        uint64_t v13 = 1672 * *(unsigned __int8 *)(v4 + 3844);
        do
        {
          v6[v12 / 8] = 0;
          v12 += 1672;
        }
        while (v13 != v12);
      }
      if (v5 <= 3) {
        gleTransferBufferBindingToGLD(v7, *(void *)(a2 + 48 + 8 * v5), *(void *)(a2 + 88 + 8 * v5), (uint64_t *)(a1 + 8 * v5 + 17992), (uint64_t *)(a1 + 8 * v5 + 18024), 4, 4);
      }
      ++v5;
      ++v6;
    }
    while (v5 != 5);
    ++*(_DWORD *)(a2 + 20);
    *(void *)(a1 + 26432) = a2;
    if (*((unsigned __int16 *)v17 + 21) != *(unsigned __int16 *)(a2 + 42))
    {
      gleUpdateInvalidPrimitives(a1);
      *(_DWORD *)uint64_t v4 = 0;
      *(_DWORD *)(a1 + 1548) |= 0x8000u;
    }
    int v14 = v17[5] - 1;
    v17[5] = v14;
    if (!v14) {
      gleFreeTransformFeedbackObject(a1, v17);
    }
    *(_DWORD *)uint64_t v4 = 0;
    *(_DWORD *)(a1 + 1524) |= 0x40000000u;
    if (*(unsigned char *)(v4 + 3829))
    {
      uint64_t v15 = *(void (**)(uint64_t, void))(*(void *)(a1 + 29496) + 168);
      uint64_t v16 = *(void *)(a1 + 29464);
      v15(v16, 0);
    }
  }
}

void gleSelectPrimitiveFunc(uint64_t a1)
{
  *(_DWORD *)(a1 + 28676) = 0;
  if (*(_WORD *)(a1 + 29830) == 7168 && *(unsigned char *)(a1 + 32481))
  {
    memset_pattern16((void *)(a1 + 28024), off_26DC2E7F0, 0x78uLL);
  }
  else
  {
    *(void *)(a1 + 28024) = gleBeginPointsRender;
    *(void *)(a1 + 28032) = gleBeginLinesRender;
    *(void *)(a1 + 28040) = gleBeginLineLoopRender;
    *(void *)(a1 + 28048) = gleBeginLineStripRender;
    *(void *)(a1 + 28056) = gleBeginTrianglesRender;
    *(void *)(a1 + 28064) = gleBeginTriangleStripRender;
    *(void *)(a1 + 28072) = gleBeginTriangleFanRender;
    *(void *)(a1 + 28080) = gleBeginQuadsRender;
    *(void *)(a1 + 28088) = gleBeginQuadStripRender;
    *(void *)(a1 + 28096) = gleBeginPolygonRender;
    *(void *)(a1 + 28104) = gleBeginLinesAdjacencyRender;
    *(void *)(a1 + 28112) = gleBeginLineStripAdjacencyRender;
    *(void *)(a1 + 28120) = gleBeginTrianglesAdjacencyRender;
    *(void *)(a1 + 28128) = gleBeginTriangleStripAdjacencyRender;
    *(void *)(a1 + 28136) = gleBeginPatchesRender;
    *(void *)(a1 + 1472) = gleSetAddVertexMaterialFunc;
    *(void *)(a1 + 1480) = gleSetAddVertexMaterialFunc;
  }
}

char *gleCreateVertexArrayHashObject(uint64_t a1, int a2)
{
  uint64_t v4 = (unsigned char *)(a1 + 32496);
  unint64_t v5 = (char *)malloc_type_malloc(280 * *(unsigned __int8 *)(a1 + 32496) + 1496, 0x577B5147uLL);
  if (!v5) {
    abort();
  }
  unsigned int v6 = v5;
  uint64_t v7 = 0;
  *((_DWORD *)v5 + 4) = a2;
  *(void *)unint64_t v5 = 0;
  *((void *)v5 + 1) = 0;
  *(void *)(v5 + 20) = 0x500000001;
  *((void *)v5 + 4) = 0;
  *((_DWORD *)v5 + 7) = 0;
  uint64_t v8 = 960;
  do
  {
    *(void *)&v5[v8] = 0;
    uint64_t v9 = &v5[v7];
    *((void *)v9 + 17) = 0;
    *((void *)v9 + 19) = 0x204140600000000;
    *((_DWORD *)v9 + 36) = 0;
    v7 += 24;
    v8 += 8;
  }
  while (v7 != 768);
  v5[182] = 3;
  v5[230] = 3;
  v5[302] = 1;
  v5[254] = 1;
  *((_WORD *)v5 + 162) = 5121;
  v5[326] = 1;
  *((_DWORD *)v5 + 231) = 0;
  *((void *)v5 + 117) = 0;
  *((void *)v5 + 116) = 0;
  *((void *)v5 + 114) = 0;
  *((void *)v5 + 113) = 0;
  *((_WORD *)v5 + 461) = -31308;
  *((void *)v5 + 119) = 0;
  *((void *)v5 + 118) = 0;
  *((_DWORD *)v5 + 304) = 335872001;
  v5[1220] = 0;
  *((_DWORD *)v5 + 306) = 0;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *((void *)v5 + 186) = 0;
  *((_OWORD *)v5 + 92) = 0u;
  *((_OWORD *)v5 + 91) = 0u;
  *((_OWORD *)v5 + 90) = 0u;
  *((_OWORD *)v5 + 89) = 0u;
  *((_OWORD *)v5 + 88) = 0u;
  *((_OWORD *)v5 + 87) = 0u;
  *((_OWORD *)v5 + 86) = 0u;
  *((_OWORD *)v5 + 85) = 0u;
  *((_OWORD *)v5 + 84) = 0u;
  *((_OWORD *)v5 + 83) = 0u;
  *((_OWORD *)v5 + 82) = 0u;
  *((_OWORD *)v5 + 81) = 0u;
  *((_OWORD *)v5 + 80) = 0u;
  *((_OWORD *)v5 + 79) = 0u;
  *((_OWORD *)v5 + 78) = 0u;
  *((_OWORD *)v5 + 77) = 0u;
  if (*v4)
  {
    unint64_t v10 = 0;
    uint64_t v11 = v5;
    do
    {
      *(_OWORD *)(v11 + 1720) = 0uLL;
      *(_OWORD *)(v11 + 1736) = 0uLL;
      *(_OWORD *)(v11 + 1688) = 0uLL;
      *(_OWORD *)(v11 + 1704) = 0uLL;
      *(_OWORD *)(v11 + 1656) = 0uLL;
      *(_OWORD *)(v11 + 1672) = 0uLL;
      *(_OWORD *)(v11 + 1624) = 0uLL;
      *(_OWORD *)(v11 + 1640) = 0uLL;
      *(_OWORD *)(v11 + 1592) = 0uLL;
      *(_OWORD *)(v11 + 1608) = 0uLL;
      *(_OWORD *)(v11 + 1560) = 0uLL;
      *(_OWORD *)(v11 + 1576) = 0uLL;
      *(_OWORD *)(v11 + 1528) = 0uLL;
      *(_OWORD *)(v11 + 1544) = 0uLL;
      *(_OWORD *)(v11 + 1496) = 0uLL;
      *(_OWORD *)(v11 + 1512) = 0uLL;
      *((void *)v11 + 219) = 0;
      *((_OWORD *)v11 + 110) = xmmword_227DC27E0;
      ++v10;
      v11 += 280;
    }
    while (v10 < *v4);
  }
  if (*(void *)(a1 + 27648))
  {
    uint64_t v13 = 0;
    gleCreateVAOClientState(a1, (uint64_t)&v13, v5);
  }
  return v6;
}

void gleCreateVAOClientState(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v5 = malloc_type_calloc(1uLL, 0x448uLL, 0x2BF3136CuLL);
  if (!v5) {
    abort();
  }
  *(void *)a2 = v5;
  a3[1] = v5;
  *(void *)(*(void *)a2 + 1088) = a3;
  unsigned int v6 = *(void **)a2;

  gleSetVAOClientState((uint64_t)v5, v6, a3);
}

uint64_t gleUnbindVertexArrayObject(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (unsigned __int8 *)(result + 32496);
  if (*(unsigned char *)(result + 32496))
  {
    unint64_t v3 = 0;
    uint64_t v4 = a2 + 40;
    unint64_t v5 = (void *)(result + 32512);
    do
    {
      uint64_t result = (*(uint64_t (**)(void, void))(v5[206] + 1704))(*v5, *(void *)(v4 + 8 * v3++));
      v5 += 209;
    }
    while (v3 < *v2);
  }
  return result;
}

void gleFreeVertexArrayHashObject(uint64_t a1, char *a2)
{
  uint64_t v4 = (void *)*((void *)a2 + 4);
  if (v4)
  {
    free(v4);
    *((void *)a2 + 4) = 0;
  }
  if (*(unsigned char *)(a1 + 320))
  {
    unint64_t v5 = 0;
    unsigned int v6 = a2 + 40;
    uint64_t v7 = a1 + 360;
    do
    {
      (*(void (**)(void, void))(*(void *)v7 + 1720))(*(void *)(v7 - 8), *(void *)&v6[8 * v5]);
      *(void *)&v6[8 * v5++] = 0;
      v7 += 32;
    }
    while (v5 < *(unsigned __int8 *)(a1 + 320));
  }
  uint64_t v8 = *((void *)a2 + 154);
  if (v8)
  {
    int v9 = *(_DWORD *)(v8 + 20) - 1;
    *(_DWORD *)(v8 + 20) = v9;
    if (!v9) {
      gleFreeBufferObject(a1, (void *)v8);
    }
  }
  for (uint64_t i = 1240; i != 1496; i += 8)
  {
    uint64_t v11 = *(void *)&a2[i];
    if (v11)
    {
      int v12 = *(_DWORD *)(v11 + 20) - 1;
      *(_DWORD *)(v11 + 20) = v12;
      if (!v12) {
        gleFreeBufferObject(a1, (void *)v11);
      }
    }
  }
  uint64_t v13 = (void *)*((void *)a2 + 1);
  if (v13) {
    free(v13);
  }

  free(a2);
}

void gleFreeCtxVertexArrayHashObject(uint64_t a1, char *a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  gleFreeVertexArrayHashObject(*(void *)(a1 + 19296), a2);
  uint64_t v4 = (os_unfair_lock_s *)(*(void *)(a1 + 19296) + 324);

  os_unfair_lock_unlock(v4);
}

void gleUnbindAndFreeVertexArrayObject(uint64_t a1, char *a2)
{
  uint64_t v4 = (void *)*((void *)a2 + 4);
  if (v4)
  {
    free(v4);
    *((void *)a2 + 4) = 0;
  }
  unint64_t v5 = a2 + 40;
  unsigned int v6 = (unsigned char *)(a1 + 32496);
  LODWORD(v7) = *(unsigned __int8 *)(a1 + 32496);
  if (*(unsigned char *)(a1 + 32496))
  {
    unint64_t v8 = 0;
    int v9 = (void *)(a1 + 32512);
    do
    {
      (*(void (**)(void, void))(v9[206] + 1704))(*v9, *(void *)&v5[8 * v8++]);
      unint64_t v7 = *v6;
      v9 += 209;
    }
    while (v8 < v7);
  }
  uint64_t v10 = *((void *)a2 + 154);
  if (v10 && (int v11 = *(_DWORD *)(v10 + 20) - 1, (*(_DWORD *)(v10 + 20) = v11) == 0))
  {
    gleUnbindAndFreeBufferObject(a1, (void *)v10);
    if (*v6)
    {
LABEL_9:
      unint64_t v12 = 0;
      uint64_t v13 = (void *)(a1 + 32520);
      do
      {
        (*(void (**)(void, void))(v13[205] + 1720))(*v13, *(void *)&v5[8 * v12]);
        *(void *)&v5[8 * v12++] = 0;
        v13 += 209;
      }
      while (v12 < *v6);
    }
  }
  else if (v7)
  {
    goto LABEL_9;
  }
  for (uint64_t i = 1240; i != 1496; i += 8)
  {
    uint64_t v15 = *(void *)&a2[i];
    if (v15)
    {
      int v16 = *(_DWORD *)(v15 + 20) - 1;
      *(_DWORD *)(v15 + 20) = v16;
      if (!v16) {
        gleUnbindAndFreeBufferObject(a1, (void *)v15);
      }
    }
  }
  int v17 = (void *)*((void *)a2 + 1);
  if (v17) {
    free(v17);
  }

  free(a2);
}

uint64_t gleSetCurrentVertexHashObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 28652;
  *(void *)(a1 + 26384) = a2;
  uint64_t result = gleUpdateDrawArraysFuncs(a1);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 3844);
  if (a2)
  {
    if (!*(unsigned char *)(v4 + 3844)) {
      goto LABEL_10;
    }
    unint64_t v7 = (uint64_t *)(a2 + 40);
    uint64_t v8 = 33544;
    uint64_t v9 = *(unsigned __int8 *)(v4 + 3844);
    do
    {
      uint64_t v10 = *v7++;
      *(void *)(a1 + v8) = v10;
      v8 += 1672;
      --v9;
    }
    while (v9);
    if (v6 >= 2)
    {
      *(unsigned char *)(a2 + 1216) = 1;
      uint64_t v11 = *(void *)(a2 + 1232);
      if (v11)
      {
        uint64_t v12 = *(void *)(v11 + 192);
        if (v12)
        {
          if (v12 == *(void *)(a1 + 29024)) {
            *(unsigned char *)(a2 + 1216) = 0;
          }
          else {
            uint64_t result = gleSynchronizePluginBufferStorage(a1, v11 + 40);
          }
        }
      }
      unint64_t v14 = *(void *)(a2 + 912);
      if (v14)
      {
        uint64_t v15 = *(void *)(a2 + 904);
        do
        {
          unint64_t v16 = __clz(__rbit64(v14));
          uint64_t v17 = 1 << v16;
          uint64_t v18 = *(void *)(a2 + 1240 + 8 * v16 - 128);
          uint64_t v19 = *(void *)(v18 + 192);
          if (v19)
          {
            if (v19 == *(void *)(a1 + 29024))
            {
              if ((v17 & v15) != 0) {
                *(unsigned char *)(a2 + 1216) = 0;
              }
            }
            else
            {
              uint64_t result = gleSynchronizePluginBufferStorage(a1, v18 + 40);
            }
          }
          v14 ^= v17;
        }
        while (v14);
      }
    }
    else
    {
LABEL_10:
      *(unsigned char *)(a2 + 1216) = 0;
    }
    int v20 = *(_DWORD *)(a2 + 1224);
    if (v20 != **(_DWORD **)(a1 + 19296))
    {
      uint64_t result = gleUpdateVAODirtyStateForBufStampChange(a1, a2 + 40);
      *(_DWORD *)(a2 + 1224) = **(_DWORD **)(a1 + 19296);
      int v20 = **(_DWORD **)(a1 + 19296);
    }
    if (*(_DWORD *)(v4 + 1168) != v20)
    {
      uint64_t result = gleUpdateCtxDirtyStateForBufStampChange(a1);
      *(_DWORD *)(v4 + 1168) = **(_DWORD **)(a1 + 19296);
    }
    *(void *)(a1 + 26184) = gleSetVertexArrayFunc;
    *(void *)(a1 + 26192) = gleSetVertexArrayFunc;
    *(void *)(a1 + 26200) = gleSetVertexElemFunc;
    *(void *)(a1 + 26208) = gleSetVertexElemFunc;
    int v21 = *(_DWORD *)(a1 + 1548);
    int v22 = v21 | 0x4000;
    *(_DWORD *)(a1 + 1548) = v21 | 0x4000;
    *(_DWORD *)uint64_t v4 = 0;
    int v23 = *(_DWORD *)(a1 + 1532);
    *(_DWORD *)(a1 + 1532) = v23 | 0x1000;
    if (*(unsigned char *)(v4 + 3849) == 2)
    {
      int v24 = (*(_DWORD *)(a2 + 904) >> 22) & 1;
      if (v24 != *(unsigned __int8 *)(a1 + 15379))
      {
        int v25 = (unsigned char *)(a1 + 17700);
        *(unsigned char *)(a1 + 15379) = (*(_DWORD *)(a2 + 904) & 0x400000) != 0;
        if ((*(unsigned char *)(a1 + 24864) & 9) != 0 || *(unsigned char *)(a1 + 24756))
        {
          int v26 = *(unsigned __int8 *)(a1 + 24750);
        }
        else if (v24)
        {
          int v26 = 1;
        }
        else
        {
          int v26 = *(unsigned __int8 *)(a1 + 15378) != 0;
        }
        if (v26 != *v25)
        {
          unsigned char *v25 = v26;
          *(_DWORD *)(a1 + 1532) = v23 | 0x40001000;
          int v22 = v21 | 0x10004000;
        }
        *(_DWORD *)uint64_t v4 = 0;
        *(_DWORD *)(a1 + 1548) = v22 | 0x1800A;
      }
    }
  }
  else
  {
    if (*(unsigned char *)(v4 + 3844))
    {
      uint64_t v13 = (void *)(a1 + 33544);
      do
      {
        *uint64_t v13 = 0;
        v13 += 209;
        --v6;
      }
      while (v6);
    }
    *(_DWORD *)uint64_t v4 = 0;
    *(_DWORD *)(a1 + 1540) |= 0x8000000u;
  }
  return result;
}

void gleBindVertexArray(uint64_t a1, unsigned int a2)
{
  if (!a2)
  {
    VertexArrayHashObject = *(_DWORD **)(a1 + 26392);
    if (!VertexArrayHashObject)
    {
LABEL_8:
      uint64_t v5 = *(void *)(a1 + 26384);
      gleSetCurrentVertexHashObject(a1, (uint64_t)VertexArrayHashObject);
      if (v5)
      {
        int v6 = *(_DWORD *)(v5 + 20) - 1;
        *(_DWORD *)(v5 + 20) = v6;
        if (!v6)
        {
          gleUnbindAndFreeVertexArrayObject(a1, (char *)v5);
        }
      }
      return;
    }
LABEL_7:
    ++VertexArrayHashObject[5];
    goto LABEL_8;
  }
  VertexArrayHashObject = gleLookupHashObject(a1 + 26352, a2);
  if (VertexArrayHashObject) {
    goto LABEL_7;
  }
  if (gleIsHashName(a1 + 26352, a2))
  {
    VertexArrayHashObject = gleCreateVertexArrayHashObject(a1, a2);
    gleCreatePluginVertexArray(a1, (uint64_t)(VertexArrayHashObject + 10));
    gleAddHashNameAndObject(a1, a1 + 26352, (uint64_t)VertexArrayHashObject);
    if (!VertexArrayHashObject) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (!*(_WORD *)(a1 + 29832)) {
    *(_WORD *)(a1 + 29832) = 1282;
  }
}

uint64_t gleReserveVertexArray(uint64_t a1, unsigned int a2)
{
  return gleAddHashName(a1 + 26352, a2);
}

uint64_t gleReclaimVertexArrayResources(uint64_t result)
{
  uint64_t v1 = 0;
  uint64_t v2 = (unsigned char *)(result + 32496);
  uint64_t v3 = *(void *)(result + 26360);
  uint64_t v4 = (*(_DWORD *)(result + 26376) + 1);
  uint64_t v16 = result;
  uint64_t v5 = (void *)(result + 32512);
  do
  {
    for (uint64_t i = *(uint64_t **)(v3 + 8 * v1); i; uint64_t i = (uint64_t *)*i)
    {
      if (*((_DWORD *)i + 5) == 1)
      {
        if (*v2)
        {
          unint64_t v7 = 0;
          uint64_t v8 = i + 5;
          uint64_t v9 = i + 220;
          uint64_t v10 = v5;
          do
          {
            (*(void (**)(void, uint64_t))(v10[206] + 1704))(*v10, v8[v7]);
            uint64_t result = (*(uint64_t (**)(void, uint64_t))(v10[206] + 1712))(v10[1], v8[v7]);
            *v9 |= 1uLL;
            ++v7;
            v10 += 209;
            v9 += 35;
          }
          while (v7 < *v2);
        }
        i[118] |= 1uLL;
      }
    }
    ++v1;
  }
  while (v1 != v4);
  uint64_t v11 = *(void *)(v16 + 26392);
  if (*(_DWORD *)(v11 + 20) == 1 && *v2)
  {
    unint64_t v12 = 0;
    uint64_t v13 = v11 + 40;
    unint64_t v14 = (void *)(v16 + 32512);
    uint64_t v15 = (void *)(v11 + 1760);
    do
    {
      (*(void (**)(void, void))(v14[206] + 1704))(*v14, *(void *)(v13 + 8 * v12));
      uint64_t result = (*(uint64_t (**)(void, void))(v14[206] + 1712))(v14[1], *(void *)(v13 + 8 * v12));
      *v15 |= 1uLL;
      ++v12;
      v14 += 209;
      v15 += 35;
    }
    while (v12 < *v2);
  }
  return result;
}

void gleSetVAOClientState(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a3[154];
  if (v3) {
    uint64_t v3 = *(void *)(v3 + 8);
  }
  *a2 = v3;
  uint64_t v4 = 155;
  for (uint64_t i = 35; i != 131; i += 3)
  {
    uint64_t v6 = a3[v4];
    if (v6) {
      uint64_t v6 = *(void *)(v6 + 8);
    }
    a2[v4 - 154] = v6;
    unint64_t v7 = &a2[i];
    long long v8 = *(_OWORD *)&a3[i - 18];
    v7[2] = a3[i - 16];
    *(_OWORD *)unint64_t v7 = v8;
    ++v4;
  }
  a2[34] = a3[113];
  a2[33] = a3[114];
}

uint64_t gleBindVertexArray_Thread(uint64_t a1, unsigned int a2)
{
  if (!a2)
  {
    VertexArrayHashObject = *(void **)(a1 + 26392);
    if (!VertexArrayHashObject) {
      goto LABEL_5;
    }
    goto LABEL_7;
  }
  VertexArrayHashObject = gleLookupHashObject(a1 + 26352, a2);
  if (VertexArrayHashObject) {
    goto LABEL_7;
  }
  uint64_t result = gleIsHashName(a1 + 26352, a2);
  if (result)
  {
    VertexArrayHashObject = gleCreateVertexArrayHashObject(a1, a2);
    gleAddHashNameAndObject(a1, a1 + 26352, (uint64_t)VertexArrayHashObject);
    *gleAddCommand(a1, (uint64_t)gleCreatePluginVertexArray_UnpackThread, 8) = VertexArrayHashObject + 5;
    if (!VertexArrayHashObject)
    {
LABEL_5:
      uint64_t v6 = 0;
LABEL_8:
      *(void *)(a1 + 26448) = v6;
      uint64_t result = (uint64_t)gleAddCommand(a1, (uint64_t)gleBindVertexArray_UnpackThread, 16);
      *(_DWORD *)uint64_t result = a2;
      *(void *)(result + 8) = VertexArrayHashObject;
      return result;
    }
LABEL_7:
    uint64_t v6 = VertexArrayHashObject[1];
    goto LABEL_8;
  }
  if (!*(_WORD *)(a1 + 29832)) {
    *(_WORD *)(a1 + 29832) = 1282;
  }
  return result;
}

uint64_t gleCreatePluginVertexArray_UnpackThread(uint64_t a1, uint64_t *a2)
{
  return 8;
}

uint64_t gleBindVertexArray_UnpackThread(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    ++*(_DWORD *)(v3 + 20);
  }
  uint64_t v4 = *(void *)(a1 + 26384);
  gleSetCurrentVertexHashObject(a1, v3);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  if (v4)
  {
    int v5 = *(_DWORD *)(v4 + 20) - 1;
    *(_DWORD *)(v4 + 20) = v5;
    if (!v5) {
      gleUnbindAndFreeVertexArrayObject(a1, (char *)v4);
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  return 16;
}

uint64_t gleDeleteVertexArrayObject_UnpackThread(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  int v4 = *(_DWORD *)(v3 + 20) - 1;
  *(_DWORD *)(v3 + 20) = v4;
  if (!v4) {
    gleUnbindAndFreeVertexArrayObject(a1, (char *)v3);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  return 8;
}

uint64_t gleVPChangedCore(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(a1 + 32496);
  uint64_t v3 = a1 + 24756;
  int v4 = (unsigned __int16 *)(a1 + 14888);
  if (*(unsigned char *)(a1 + 24864))
  {
    uint64_t v8 = *(void *)(a1 + 24768);
    if (!v8) {
      uint64_t v8 = *(void *)(*(void *)(a1 + 24776) + 40);
    }
    uint64_t v9 = (uint64_t *)(v8 + 228);
    uint64_t v10 = *(uint64_t **)(v8 + 168);
    int v11 = *(unsigned __int8 *)(v8 + 213);
    int v7 = 1;
  }
  else
  {
    if (*(unsigned char *)v3)
    {
      uint64_t v5 = *(void *)(a1 + 24400);
      uint64_t v6 = (uint64_t *)(v5 + 40);
      if (!*(void *)(v5 + 472))
      {
        *(_DWORD *)(a1 + 28652) = 0;
        *(_DWORD *)(a1 + 1540) |= 0x40000000u;
      }
      int v7 = 1;
    }
    else
    {
      int v7 = 0;
      uint64_t v6 = *(uint64_t **)(a1 + 24480);
    }
    uint64_t v9 = v6 + 34;
    uint64_t v10 = v6 + 71;
    int v11 = *((unsigned __int8 *)v6 + 418);
    uint64_t v12 = *v2;
    if (*v2)
    {
      uint64_t v13 = (void *)(a1 + 33432);
      do
      {
        uint64_t v14 = *v6++;
        *uint64_t v13 = v14;
        v13 += 209;
        --v12;
      }
      while (v12);
    }
  }
  if (v11)
  {
    for (uint64_t i = 0; i != 128; i += 4)
      *(_DWORD *)(a1 + 1552 + i) = *(_DWORD *)((char *)v9 + i);
  }
  else
  {
    *(_OWORD *)(a1 + 1664) = 0u;
    *(_OWORD *)(a1 + 1648) = 0u;
    *(_OWORD *)(a1 + 1632) = 0u;
    *(_OWORD *)(a1 + 1616) = 0u;
    *(_OWORD *)(a1 + 1600) = 0u;
    *(_OWORD *)(a1 + 1584) = 0u;
    *(_OWORD *)(a1 + 1568) = 0u;
    *(_OWORD *)(a1 + 1552) = 0u;
  }
  *(void *)(a1 + 24200) = gleSetVPTransformFuncAll;
  *(void *)(a1 + 24208) = gleSetVPTransformFuncAll;
  uint64_t result = gleUpdateInverseNeeds(a1);
  if (*((unsigned char *)v4 + 2))
  {
    int v17 = v7 ? v2[10] : (*v4 == 33274);
    if (v17 != *((unsigned __int8 *)v4 + 395))
    {
      *((unsigned char *)v4 + 395) = v17;
      *(_DWORD *)(a1 + 1548) |= 0x20000u;
    }
  }
  int v18 = 270336;
  if (*(uint64_t **)(a1 + 19248) != v10)
  {
    *(void *)(a1 + 19248) = v10;
    if (v11) {
      int v18 = 8658944;
    }
    else {
      int v18 = 270336;
    }
  }
  *(_DWORD *)(a1 + 1532) |= v18;
  *(_DWORD *)(v3 + 3896) = 0;
  *(_DWORD *)(a1 + 1548) |= 0x108002u;
  return result;
}

void gleVPFlipColors(uint64_t a1, unint64_t a2, int a3, int a4)
{
  if (a3 >= 1)
  {
    unint64_t v4 = a2 + 640 * a3;
    do
    {
      if (*(unsigned __int8 *)(a2 + 2) != a4)
      {
        *(unsigned char *)(a2 + 2) = a4;
        long long v5 = *(_OWORD *)(a2 + 112);
        long long v6 = *(_OWORD *)(a2 + 144);
        long long v7 = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a2 + 112) = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a2 + 128) = v5;
        *(_OWORD *)(a2 + 144) = v7;
        *(_OWORD *)(a2 + 160) = v6;
      }
      a2 += 640;
    }
    while (a2 < v4);
  }
}

uint64_t gleSwitchToMultiViewportMode(uint64_t result)
{
  *(unsigned char *)(result + 15580) = 1;
  if (*(unsigned char *)(result + 15576))
  {
    *(_DWORD *)(result + 15576) = 1;
    int v1 = *(_DWORD *)(result + 1548) | 0x204;
  }
  else
  {
    int v1 = *(_DWORD *)(result + 1548);
  }
  *(_DWORD *)(result + 1528) |= 1u;
  *(_DWORD *)(result + 28652) = 0;
  *(_DWORD *)(result + 1548) = v1 | 1;
  return result;
}

uint64_t gleUpdateViewScissorDataIndexed(uint64_t result, unsigned int a2)
{
  uint64_t v2 = (unsigned char *)(result + 12518);
  uint64_t v3 = *(int **)(result + 29480);
  int32x2_t v4 = *(int32x2_t *)(v3 + 1);
  uint64_t v5 = result + 9216;
  long long v6 = (int32x2_t *)(result + 15560 + 16 * a2);
  int v7 = 1 << a2;
  int v8 = *(_DWORD *)(result + 15576) & (1 << a2);
  if (!a2)
  {
    *(_OWORD *)(result + 15540) = *(_OWORD *)v6->i8;
    *(unsigned char *)(result + 15556) = v8 != 0;
  }
  uint64_t v9 = v5 + 144 * a2;
  uint64_t v10 = result + 28696;
  int32x2_t v11 = vcvt_s32_f32(vadd_f32(*(float32x2_t *)(v9 + 96), (float32x2_t)vbsl_s8((int8x8_t)vcgez_f32(*(float32x2_t *)(v9 + 96)), (int8x8_t)0x3F0000003F000000, (int8x8_t)0xBF000000BF000000)));
  int32x2_t v12 = vmin_s32(v4, vcvt_s32_f32(vadd_f32(*(float32x2_t *)(v9 + 104), (float32x2_t)0x3F0000003F000000)));
  *(int32x2_t *)&long long v13 = v11;
  *((int32x2_t *)&v13 + 1) = v12;
  *(_OWORD *)(v9 + 80) = v13;
  uint64_t v14 = *(void *)(result + 28960);
  if (v14)
  {
    v15.i32[0] = *(unsigned __int16 *)(v14 + 474);
    v15.i32[1] = *(unsigned __int16 *)(v14 + 476);
  }
  else
  {
    int32x2_t v15 = *(int32x2_t *)(result + 29632);
  }
  uint64_t v16 = (_DWORD *)(v10 + 36 * a2);
  float32x2_t v17 = vcvt_f32_s32(v12);
  float32x2_t v18 = vmul_f32(v17, (float32x2_t)0x3F0000003F000000);
  *(float32x2_t *)(result + 9216 + 144 * a2) = v18;
  float32x2_t v19 = vcvt_f32_s32(v11);
  float32x2_t v20 = vmla_f32(v19, (float32x2_t)0x3F0000003F000000, v17);
  *(float32x2_t *)(v5 + 144 * a2 + 16) = v20;
  if (v14)
  {
    int v21 = *v3;
    if (*(_DWORD *)(v14 + 488)) {
      int v22 = 16;
    }
    else {
      int v22 = 32;
    }
    BOOL v23 = (v21 & v22) != 0;
  }
  else
  {
    BOOL v23 = 0;
  }
  *(unsigned char *)(result + 12519) = v23;
  if (*(_WORD *)(result + 29830) != 7168)
  {
    int v29 = (float32x2_t *)(v5 + 144 * a2);
    v29[4] = v18;
    v29[6] = v20;
    v11.i32[0] = *(_DWORD *)(result + 292);
    if (a2)
    {
      v12.i32[0] = *(_DWORD *)(result + 288);
    }
    else
    {
      *(_DWORD *)(result + 12496) = v11.i32[0];
      *(_DWORD *)(result + 12500) = v11.i32[0];
      v12.i32[0] = *(_DWORD *)(result + 288);
      *(_DWORD *)(result + 12504) = v12.i32[0];
      *(_DWORD *)(result + 12508) = v12.i32[0];
    }
    char v30 = (int32x2_t *)(v5 + 144 * a2);
    v30[16] = vdup_lane_s32(v11, 0);
    v30[17] = vdup_lane_s32(v12, 0);
    *uint64_t v16 = v11.i32[0];
    unsigned int v31 = (_DWORD *)(v10 + 36 * a2);
    v31[1] = v12.i32[0];
    v31[2] = v11.i32[0];
    float v31[3] = v12.i32[0];
    if (!a2) {
      goto LABEL_67;
    }
    goto LABEL_21;
  }
  int32x2_t v24 = vadd_s32(v12, v11);
  int v25 = **(_DWORD **)(result + 29032);
  if ((v25 & 4) != 0 || *(_DWORD *)(result + 20384) == 4353)
  {
    if (v8)
    {
      int32x2_t v26 = vadd_s32(*(int32x2_t *)(result + 15560 + 16 * a2 + 8), *v6);
      int32x2_t v27 = (int32x2_t)vand_s8((int8x8_t)vcgez_s32(*v6), (int8x8_t)vmin_s32(*v6, v15));
      int32x2_t v28 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32(v27, v26), (int8x8_t)v27, (int8x8_t)vmin_s32(v26, v15));
    }
    else
    {
      int32x2_t v27 = 0;
      int32x2_t v28 = v15;
    }
    float32x4_t v33 = (float *)(v10 + 36 * a2 + 20);
    vst2_f32(v33, *(float32x2x2_t *)v27.i8);
    float32x2_t v19 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_s32(v11, v27), (int8x8_t)v11, (int8x8_t)vmin_s32(v27, v24));
    __int32 v34 = v19.i32[1];
    int32x2_t v24 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v19, v28), (int8x8_t)v19, (int8x8_t)vmin_s32(v28, v24));
    __int32 v35 = v19.i32[0];
    v19.f32[0] = (float)v19.i32[0];
    float v36 = (float)v19.i32[1];
  }
  else
  {
    __int32 v35 = v11.i32[0];
    __int32 v34 = v11.i32[1];
    float v36 = v19.f32[1];
  }
  __int32 v37 = v24.i32[0];
  __int32 v38 = v24.i32[0] - v35;
  float v39 = (float)(v24.i32[0] - v35);
  float v40 = (float)(v24.i32[1] - v34);
  float v41 = 0.49997;
  if ((v25 & 8) != 0) {
    float v41 = 0.5;
  }
  float v42 = v41 * v39;
  float v43 = v41 * v40;
  float v44 = v36 + (float)(v40 * 0.5);
  uint64_t v45 = v5 + 144 * a2;
  *(float *)(v45 + 32) = v42;
  *(float *)(v45 + 48) = v19.f32[0] + (float)(v39 * 0.5);
  v19.i32[0] = *(_DWORD *)(result + 292);
  *uint64_t v16 = v19.i32[0];
  *(_DWORD *)(v10 + 36 * a2 + 4) = 0;
  if (!v14) {
    goto LABEL_30;
  }
  if (*(_DWORD *)(v14 + 488))
  {
    if ((v25 & 0x10) == 0)
    {
LABEL_30:
      uint64_t v46 = v5 + 144 * a2;
      *(float *)(v46 + 36) = v43;
      *(float *)(v46 + 52) = v44;
      v15.i32[0] = 0;
      float v47 = v19.f32[0];
      goto LABEL_33;
    }
  }
  else if ((v25 & 0x20) == 0)
  {
    goto LABEL_30;
  }
  *(float *)v15.i32 = (float)v15.i32[1];
  uint64_t v48 = v5 + 144 * a2;
  *(float *)(v48 + 36) = -v43;
  *(float *)(v48 + 52) = (float)v15.i32[1] - v44;
  float v47 = -v19.f32[0];
LABEL_33:
  uint64_t v49 = v10 + 36 * a2;
  *(float *)(v49 + 8) = v47;
  *(_DWORD *)(v49 + 12) = v15.i32[0];
  BOOL v50 = v37 == v35 || v24.i32[1] == v34;
  if (!v50)
  {
    __int32 v54 = v12.i32[0];
    __int32 v55 = v11.i32[0];
    if (v12.i32[0] != v38 || v12.i32[1] != v24.i32[1] - v34 || v11.i32[0] != v35 || v11.i32[1] != v34)
    {
      float v59 = v17.f32[0] / v39;
      if (a2)
      {
        float v60 = v17.f32[1] / v40;
      }
      else
      {
        *(float *)(result + 12496) = v59;
        float v60 = v17.f32[1] / v40;
        *(float *)(result + 12500) = v17.f32[1] / v40;
      }
      uint64_t v61 = v5 + 144 * a2;
      *(float *)(v61 + 128) = v59;
      *(float *)(v61 + 132) = v60;
      *(float *)v11.i32 = (float)((float)(v54 + 2 * (v55 - v35)) / v39) - v19.f32[0];
      if (!a2) {
        *(_DWORD *)(result + 12504) = v11.i32[0];
      }
      *(_DWORD *)(v5 + 144 * a2 + 136) = v11.i32[0];
      float v52 = (float)((float)(v12.i32[1] + 2 * (v11.i32[1] - v34)) / v40) - v19.f32[0];
      if (a2)
      {
        *(float *)(v5 + 144 * a2 + 140) = v52;
        goto LABEL_62;
      }
      *(float *)(result + 12508) = v52;
      goto LABEL_41;
    }
    if (a2)
    {
      v11.i32[0] = *(_DWORD *)(result + 288);
    }
    else
    {
      *(_DWORD *)(result + 12496) = v19.i32[0];
      *(_DWORD *)(result + 12500) = v19.i32[0];
      v11.i32[0] = *(_DWORD *)(result + 288);
      *(_DWORD *)(result + 12504) = v11.i32[0];
      *(_DWORD *)(result + 12508) = v11.i32[0];
    }
    int v62 = (int32x2_t *)(v5 + 144 * a2);
    v62[16] = vdup_lane_s32((int32x2_t)v19, 0);
    v62[17] = vdup_lane_s32(v11, 0);
    if (!a2)
    {
LABEL_67:
      BOOL v50 = (*(_DWORD *)(result + 12524) & ~v7) == 0;
      *(_DWORD *)(result + 12524) &= ~v7;
      int v53 = !v50;
      goto LABEL_70;
    }
LABEL_21:
    int v32 = 0;
    goto LABEL_63;
  }
  v11.i32[0] = *(_DWORD *)(result + 288);
  if (!a2)
  {
    *(_DWORD *)(result + 12496) = v11.i32[0];
    *(_DWORD *)(result + 12500) = v11.i32[0];
    *(int32x2_t *)(result + 12504) = vdup_n_s32(0x5368D4A5u);
  }
  unsigned int v51 = (int32x2_t *)(v5 + 144 * a2);
  v51[16] = vdup_lane_s32(v11, 0);
  v51[17].i32[0] = 1399379109;
  float v52 = 1.0e12;
LABEL_41:
  *(float *)(v5 + 144 * a2 + 140) = v52;
  if (a2)
  {
LABEL_62:
    int v32 = 1;
LABEL_63:
    if (*v2 == v32) {
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  *(_DWORD *)(result + 12524) |= v7;
  int v53 = 1;
LABEL_70:
  if (*v2 != v53)
  {
    unsigned char *v2 = v53;
LABEL_72:
    *(_DWORD *)(result + 1548) |= 0x204u;
  }
LABEL_73:
  *(_DWORD *)(result + 1528) |= 1u;
  *(_DWORD *)(result + 28652) = 0;
  *(_DWORD *)(result + 1548) |= 1u;
  return result;
}

_OWORD *gleGetVertexSubmitFuncObjectAndKey(uint64_t a1, int a2, int a3, int a4, void **a5)
{
  v183[93] = *MEMORY[0x263EF8340];
  long long v6 = (unsigned char *)(a1 + 32481);
  uint64_t v7 = a1 + 24756;
  int v8 = *(unsigned int **)(a1 + 26280);
  if (v8)
  {
    if (*v6)
    {
      if (a2 != 2 && *(_WORD *)(a1 + 29830) != 7168) {
        goto LABEL_5;
      }
    }
    else if (a2 != 2)
    {
      goto LABEL_5;
    }
    if (a3 == 2 && *(void *)(a1 + 26288)) {
      int v8 = *(unsigned int **)(a1 + 26288);
    }
    uint64_t v179 = *v8;
    uint64_t v44 = v179;
    int v45 = v179;
    uint64_t v46 = v179 | 0x800000000;
    v179 |= 0x800000000uLL;
    if (!v44)
    {
      if ((v45 & 0x10000) != 0) {
        goto LABEL_101;
      }
      BOOL v60 = 1;
      goto LABEL_100;
    }
    if (v44 >= 0xC
      && (v180 < (void *)&v8[v44 + 1] ? (BOOL v47 = v8 + 1 >= (unsigned int *)&v180[v44]) : (BOOL v47 = 1), v47))
    {
      uint64_t v48 = v44 & 0xF8;
      uint64_t v49 = (float *)v183;
      BOOL v50 = (float32x4_t *)(v8 + 5);
      long long v51 = 0uLL;
      uint64_t v52 = v48;
      do
      {
        float32x4_t v53 = v50[-1];
        v184.val[0] = *v50;
        __int32 v54 = v49 - 8;
        vst2q_f32(v54, *(float32x4x2_t *)(&v51 - 1));
        v184.val[1] = 0uLL;
        vst2q_f32(v49, v184);
        v49 += 16;
        v50 += 2;
        v52 -= 8;
      }
      while (v52);
      if (v48 == v44)
      {
LABEL_86:
        if ((v45 & 0x10000) != 0) {
          goto LABEL_101;
        }
        if (v44 >= 8)
        {
          uint64_t v59 = v44 & 0xF8;
          uint64_t v61 = (int8x16_t *)v183;
          v62.i64[0] = 0x100000001;
          v62.i64[1] = 0x100000001;
          int8x16_t v63 = (int8x16_t)vdupq_n_s64(1uLL);
          uint64_t v64 = v59;
          v65.i64[0] = 0x100000001;
          v65.i64[1] = 0x100000001;
          do
          {
            int8x16_t v67 = v61[-2];
            int8x16_t v66 = v61[-1];
            int8x16_t v69 = *v61;
            int8x16_t v68 = v61[1];
            v61 += 4;
            int32x4_t v62 = (int32x4_t)vandq_s8((int8x16_t)v62, (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v67, v63)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v66, v63))));
            int32x4_t v65 = (int32x4_t)vandq_s8((int8x16_t)v65, (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v69, v63)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v68, v63))));
            v64 -= 8;
          }
          while (v64);
          v70.i64[0] = 0x100000001;
          v70.i64[1] = 0x100000001;
          BOOL v60 = (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vornq_s8(vmvnq_s8((int8x16_t)vceqq_s32(v62, v70)), (int8x16_t)vceqq_s32(v65, v70)))) & 1) == 0;
          if (v59 == v44)
          {
LABEL_100:
            uint64_t v179 = v46 & 0xFFFFFFFFFFFFDFFFLL | (v60 << 13);
            goto LABEL_101;
          }
        }
        else
        {
          uint64_t v59 = 0;
          BOOL v60 = 1;
        }
        uint64_t v71 = v44 - v59;
        int v72 = (char *)&v180[v59];
        do
        {
          char v73 = *v72;
          v72 += 8;
          if (v73) {
            BOOL v60 = 0;
          }
          --v71;
        }
        while (v71);
        goto LABEL_100;
      }
    }
    else
    {
      uint64_t v48 = 0;
    }
    uint64_t v55 = v44 - v48;
    unsigned int v56 = &v8[v48 + 1];
    int v57 = (char *)&v180[v48] + 4;
    do
    {
      unsigned int v58 = *v56++;
      *(void *)(v57 - 4) = v58;
      v57 += 8;
      --v55;
    }
    while (v55);
    goto LABEL_86;
  }
LABEL_5:
  uint64_t v9 = *(void *)(a1 + 24480);
  if (!v9 && !*(unsigned char *)v7 && (*(unsigned char *)(a1 + 24864) & 1) == 0)
  {
    int v10 = *(unsigned __int16 *)(a1 + 29830);
    if (v10 == 7168)
    {
      unsigned int v146 = *(_DWORD *)(a1 + 23788);
      if (*(unsigned char *)(a1 + 19232)) {
        __int16 v147 = *(_DWORD *)(a1 + 23788) | 0x100;
      }
      else {
        __int16 v147 = *(_DWORD *)(a1 + 23788);
      }
      if (*(unsigned char *)(a1 + 19233)) {
        v147 |= 0x200u;
      }
      if (*(_DWORD *)(a1 + 23788))
      {
        uint64_t v148 = 0;
        int v149 = 1;
        int v150 = 0x10000;
        do
        {
          v149 += v146 & 1;
          v150 |= ((int)(v146 << 31) >> 31) & (0x1000000 << v148++);
          BOOL v151 = v146 > 1;
          v146 >>= 1;
        }
        while (v151);
      }
      else
      {
        int v150 = 0x10000;
        int v149 = 1;
      }
      if (*(unsigned char *)(a1 + 17699))
      {
        v149 += 2;
        v150 |= 0x900000u;
      }
      int v153 = v150 | 0x100000;
      if (*(unsigned char *)(a1 + 17697)) {
        ++v149;
      }
      else {
        int v153 = v150;
      }
      if (*v6) {
        int v154 = v149;
      }
      else {
        int v154 = v149 + 1;
      }
      if (*v6) {
        int v155 = v153;
      }
      else {
        int v155 = v153 | 0x80;
      }
      if (*(unsigned char *)(a1 + 14890))
      {
        if (*(unsigned char *)(a1 + 14891)) {
          int v156 = 2;
        }
        else {
          int v156 = 1;
        }
        v154 += v156;
        if (*(unsigned char *)(a1 + 14891)) {
          int v157 = 393216;
        }
        else {
          int v157 = 0x20000;
        }
        v155 |= v157;
        if (!*v6)
        {
          if (*(unsigned char *)(a1 + 14892))
          {
            v155 |= 0x60u;
            v154 += 2;
          }
          else
          {
            v155 |= 0x20u;
            ++v154;
          }
        }
        if (*(unsigned __int16 *)(a1 + 14888) == 33274) {
          __int16 v158 = 255;
        }
        else {
          __int16 v158 = 767;
        }
        v147 &= v158;
      }
      else if (((*(_DWORD *)(a1 + 23804) | *(_DWORD *)(a1 + 23800)) & *(_DWORD *)(a1 + 23788)) != 0)
      {
        v155 |= 0x20000u;
        ++v154;
      }
      int v159 = v155 | 0x400000;
      if (!*(unsigned char *)(a1 + 15379)) {
        int v159 = v155;
      }
      int v11 = v154 + ((unsigned __int16)(v147 & 0x100) >> 8);
      if (*(unsigned char *)(a1 + 15379)) {
        LOBYTE(v11) = v11 + 1;
      }
      unsigned int v12 = v159 | ((v147 & 0x100) << 10);
      if ((v147 & 0x200) != 0)
      {
        v12 |= 0x80000u;
        LOBYTE(v11) = v11 + 1;
      }
    }
    else
    {
      if (v10 != 7169)
      {
        int v152 = 0;
        uint64_t v179 = 10493953;
        unsigned int v12 = 0x10000;
        goto LABEL_285;
      }
      if (*(unsigned char *)(a1 + 14890)) {
        LOBYTE(v11) = 7;
      }
      else {
        LOBYTE(v11) = 5;
      }
      if (*(unsigned char *)(a1 + 14890)) {
        unsigned int v12 = 17236192;
      }
      else {
        unsigned int v12 = 17236096;
      }
    }
    uint64_t v179 = (v11 | 0xBC000u) + 9723904;
    if ((v12 & 0x80) != 0)
    {
      LODWORD(v180[0]) = 0;
      v180[0] = v180[0] & 0xFFFFFFFFFFF00000 | 0xB0300;
      int v152 = 1;
    }
    else
    {
      int v152 = 0;
    }
    if ((v12 & 0x10000) == 0)
    {
      if ((v12 & 0x20000) == 0) {
        goto LABEL_277;
      }
      goto LABEL_286;
    }
LABEL_285:
    uint64_t v161 = ++v152;
    LODWORD(v180[v161 - 1]) = 0;
    v180[v161 - 1] = v180[v161 - 1] & 0xFFFFFFFFFFF00000 | 0x1818;
    if ((v12 & 0x20000) == 0)
    {
LABEL_277:
      if ((v12 & 0x40000) == 0) {
        goto LABEL_278;
      }
      goto LABEL_287;
    }
LABEL_286:
    uint64_t v162 = ++v152;
    LODWORD(v180[v162 - 1]) = 0;
    v180[v162 - 1] = v180[v162 - 1] & 0xFFFFFFFFFFF00000 | 0x501C;
    if ((v12 & 0x40000) == 0)
    {
LABEL_278:
      if ((v12 & 0x80000) == 0) {
        goto LABEL_279;
      }
      goto LABEL_292;
    }
LABEL_287:
    if (*(unsigned char *)(a1 + 14890) && *(unsigned char *)(a1 + 1452)) {
      uint64_t v163 = 38964;
    }
    else {
      uint64_t v163 = 38944;
    }
    uint64_t v164 = ++v152;
    LODWORD(v180[v164 - 1]) = 0;
    v180[v164 - 1] = v180[v164 - 1] & 0xFFFFFFFFFFF00000 | v163;
    if ((v12 & 0x80000) == 0)
    {
LABEL_279:
      if ((v12 & 0x100000) == 0) {
        goto LABEL_280;
      }
      goto LABEL_293;
    }
LABEL_292:
    uint64_t v165 = ++v152;
    LODWORD(v180[v165 - 1]) = 0;
    v180[v165 - 1] = v180[v165 - 1] & 0xFFFFFFFFFFF00000 | 0xD024;
    if ((v12 & 0x100000) == 0)
    {
LABEL_280:
      if ((v12 & 0x400000) == 0) {
        goto LABEL_281;
      }
      goto LABEL_294;
    }
LABEL_293:
    uint64_t v166 = ++v152;
    LODWORD(v180[v166 - 1]) = 0;
    v180[v166 - 1] = v180[v166 - 1] & 0xFFFFFFFFFFF00000 | 0x12028;
    if ((v12 & 0x400000) == 0)
    {
LABEL_281:
      if ((v12 & 0x800000) == 0) {
        goto LABEL_282;
      }
      goto LABEL_295;
    }
LABEL_294:
    uint64_t v167 = ++v152;
    LODWORD(v180[v167 - 1]) = 0;
    v180[v167 - 1] = v180[v167 - 1] & 0xFFFFFFFFFFF00000 | 0x1800C;
    if ((v12 & 0x800000) == 0)
    {
LABEL_282:
      unsigned int v160 = v12;
      if ((v12 & 0x1000000) == 0) {
        goto LABEL_283;
      }
      goto LABEL_296;
    }
LABEL_295:
    uint64_t v168 = ++v152;
    LODWORD(v180[v168 - 1]) = 0;
    v180[v168 - 1] = v180[v168 - 1] & 0xFFFFFFFFFFF00000 | 0x1D901;
    unsigned int v160 = v12;
    if ((v12 & 0x1000000) == 0)
    {
LABEL_283:
      if (!HIBYTE(v12))
      {
LABEL_323:
        if ((v160 & 0x20) != 0)
        {
          uint64_t v177 = ++v152;
          LODWORD(v180[v177 - 1]) = 0;
          v180[v177 - 1] = v180[v177 - 1] & 0xFFFFFFFFFFF00000 | 0xA8308;
        }
        if ((v160 & 0x40) != 0)
        {
          uint64_t v178 = (v152 + 1);
          LODWORD(v180[v178 - 1]) = 0;
          v180[v178 - 1] = v180[v178 - 1] & 0xFFFFFFFFFFF00000 | 0xAC30A;
        }
        goto LABEL_101;
      }
LABEL_297:
      if ((v160 & 0x2000000) != 0)
      {
        uint64_t v170 = ++v152;
        LODWORD(v180[v170 - 1]) = 0;
        v180[v170 - 1] = v180[v170 - 1] & 0xFFFFFFFFFFF00000 | 0x2583C;
      }
      else if (!(v12 >> 25))
      {
        goto LABEL_323;
      }
      if ((v160 & 0x4000000) != 0)
      {
        uint64_t v171 = ++v152;
        LODWORD(v180[v171 - 1]) = 0;
        v180[v171 - 1] = v180[v171 - 1] & 0xFFFFFFFFFFF00000 | 0x29840;
      }
      else if (!(v12 >> 26))
      {
        goto LABEL_323;
      }
      if ((v160 & 0x8000000) != 0)
      {
        uint64_t v172 = ++v152;
        LODWORD(v180[v172 - 1]) = 0;
        v180[v172 - 1] = v180[v172 - 1] & 0xFFFFFFFFFFF00000 | 0x2D844;
      }
      else if (!(v12 >> 27))
      {
        goto LABEL_323;
      }
      if ((v160 & 0x10000000) != 0)
      {
        uint64_t v173 = ++v152;
        LODWORD(v180[v173 - 1]) = 0;
        v180[v173 - 1] = v180[v173 - 1] & 0xFFFFFFFFFFF00000 | 0x31848;
      }
      else if (!(v12 >> 28))
      {
        goto LABEL_323;
      }
      if ((v160 & 0x20000000) != 0)
      {
        uint64_t v174 = ++v152;
        LODWORD(v180[v174 - 1]) = 0;
        v180[v174 - 1] = v180[v174 - 1] & 0xFFFFFFFFFFF00000 | 0x3584C;
      }
      else if (!(v12 >> 29))
      {
        goto LABEL_323;
      }
      if ((v160 & 0x40000000) != 0)
      {
        uint64_t v175 = ++v152;
        LODWORD(v180[v175 - 1]) = 0;
        v180[v175 - 1] = v180[v175 - 1] & 0xFFFFFFFFFFF00000 | 0x39850;
      }
      else if (!(v12 >> 30))
      {
        goto LABEL_323;
      }
      if ((v12 & 0x80000000) != 0)
      {
        uint64_t v176 = ++v152;
        LODWORD(v180[v176 - 1]) = 0;
        v180[v176 - 1] = v180[v176 - 1] & 0xFFFFFFFFFFF00000 | 0x3D854;
      }
      goto LABEL_323;
    }
LABEL_296:
    uint64_t v169 = ++v152;
    LODWORD(v180[v169 - 1]) = 0;
    v180[v169 - 1] = v180[v169 - 1] & 0xFFFFFFFFFFF00000 | 0x21838;
    goto LABEL_297;
  }
  if (*(unsigned char *)(a1 + 24864))
  {
    uint64_t v15 = *(void *)(a1 + 24768);
    if (!v15) {
      uint64_t v15 = *(void *)(*(void *)(a1 + 24776) + 40);
    }
    long long v13 = *(unint64_t **)(v15 + 736);
    if (!v13) {
      goto LABEL_19;
    }
  }
  else if (*(unsigned char *)v7)
  {
    long long v13 = *(unint64_t **)(*(void *)(a1 + 24400) + 472);
    if (!v13)
    {
LABEL_19:
      unsigned int v14 = 0;
      goto LABEL_24;
    }
  }
  else
  {
    long long v13 = *(unint64_t **)(v9 + 432);
    if (!v13) {
      goto LABEL_19;
    }
  }
  unsigned int v14 = *((_DWORD *)v13 + 12);
  v13 += *((unsigned int *)v13 + 13);
LABEL_24:
  uint64_t v179 = v14 | ((v14 & 0x3F) << 18) | 0x2000;
  if (v14)
  {
    int v16 = 0;
    uint64_t v17 = v14;
    float32x2_t v18 = (uint64_t *)v13;
    uint64_t v19 = v17;
    do
    {
      uint64_t v21 = *v18++;
      char v20 = BYTE4(v21);
      unsigned int v22 = (v21 >> 10) & 0x1F;
      if (v22 == 1 || (v22 == 28 ? (BOOL v23 = (v20 & 0x2F | 0x10) == 16) : (BOOL v23 = 0), v23)) {
        ++v16;
      }
      --v19;
    }
    while (v19);
    uint64_t v24 = 0;
    uint64_t v25 = 4 * v17;
    do
    {
      unint64_t v31 = *v13++;
      unint64_t v30 = v31;
      uint64_t v32 = ((v31 >> 3) & 7) - 2;
      if (v32 > 2) {
        uint64_t v33 = 0;
      }
      else {
        uint64_t v33 = qword_227DC2870[v32];
      }
      int v34 = v30 >> 6;
      unsigned int v35 = (v30 >> 10) & 0x1F;
      if (v35 == 17)
      {
        int v26 = 0;
        unsigned int v27 = v16 + 1;
        uint64_t v28 = 45;
        ++v16;
      }
      else
      {
        uint64_t v28 = HIDWORD(v30) & 0x3F;
        uint64_t v36 = (v30 >> 39) & 1;
        if ((v30 & 0x2F00000000) != 0) {
          int v37 = v16 + 1;
        }
        else {
          int v37 = v16;
        }
        if ((v30 & 0x2F00000000) != 0) {
          int v38 = v16;
        }
        else {
          int v38 = v19;
        }
        if ((v30 & 0x2F00000000) != 0) {
          int v39 = v19;
        }
        else {
          int v39 = v19 + 1;
        }
        if ((v30 & 0x4000000000) != 0) {
          int v40 = 4;
        }
        else {
          int v40 = v30 >> 6;
        }
        unsigned int v41 = v38 + 1;
        if (v35 == 28)
        {
          int v42 = v40;
        }
        else
        {
          unsigned int v41 = v16 + 1;
          uint64_t v28 = 48;
          int v37 = v16 + 1;
          int v39 = v19;
          LODWORD(v36) = 0;
          int v42 = v34;
        }
        BOOL v43 = v35 == 18;
        if (v35 == 18) {
          unsigned int v27 = v16 + 1;
        }
        else {
          unsigned int v27 = v41;
        }
        if (v43)
        {
          uint64_t v28 = 47;
          ++v16;
        }
        else
        {
          int v16 = v37;
        }
        if (v43)
        {
          int v26 = 0;
        }
        else
        {
          LODWORD(v19) = v39;
          int v26 = v36;
        }
        if (!v43) {
          int v34 = v42;
        }
      }
      uint64_t v29 = v27;
      LODWORD(v180[v29 - 1]) = 0;
      v180[v29 - 1] = v33 | v24 & 0xFC | (v34 << 11) | ((unint64_t)(v26 != 0) << 20) | v180[v29 - 1] & 0xFFFFFFFFFFE00000 | (v28 << 14);
      v24 += 4;
    }
    while (v25 != v24);
  }
LABEL_101:
  if (a3 == 1) {
    uint64_t v74 = v179 | 0x200000000;
  }
  else {
    uint64_t v74 = v179;
  }
  uint64_t v75 = *(unsigned __int8 *)(a1 + 32501) - 3 < 2;
  uint64_t v76 = a4 == 1;
  unint64_t v77 = v74 & 0xFFFFFFEFFFFFF7FFLL | (v76 << 11) | (v75 << 36);
  uint64_t v179 = v77;
  if (a2 != 2)
  {
    if (!a2)
    {
      uint64_t v78 = *(void *)(a1 + 19240);
      uint64_t v179 = v77 & 0xFFFFFFFFFFFFF8FFLL | 0x600;
      uint64_t v79 = v74;
      if ((_BYTE)v74)
      {
        uint64_t v80 = v78 + 1152;
        BOOL v81 = v180;
        do
        {
          unsigned int v82 = *(unsigned __int8 *)(v80 + ((*v81 >> 14) & 0x3F));
          unsigned int v83 = (*v81 >> 11) & 7;
          if (v83 + 1 < v82 && v82 != 5) {
            LOBYTE(v82) = v83 + 1;
          }
          *BOOL v81 = *v81 & 0xFEFFFFFF | ((unint64_t)(v82 & 7) << 32) | 0xA000000000;
          ++v81;
          --v79;
        }
        while (v79);
      }
      goto LABEL_212;
    }
    uint64_t v87 = *(void *)(a1 + 19240);
    uint64_t v88 = *(void *)(a1 + 26384);
    unint64_t v89 = *(void *)(v88 + 904);
    if ((v74 & 0x200000000) != 0)
    {
      int v90 = v74;
      if ((_BYTE)v74)
      {
        uint64_t v74 = v74;
        uint64_t v91 = v180;
        uint64_t v92 = 0x100010000;
        do
        {
          unint64_t v93 = *v91;
          if ((*v91 & 0xBC000) != 0)
          {
            uint64_t v94 = 0x10000 << (v93 >> 14);
            v92 |= v94;
            if ((v94 & v89) != 0) {
              *uint64_t v91 = v93 | 0x200000;
            }
          }
          ++v91;
          --v74;
        }
        while (v74);
      }
      else
      {
        uint64_t v92 = 0x100010000;
      }
      uint64_t v108 = v89 & 0x100010000;
      unint64_t v77 = v77 & 0xFFFFFFFBFFFFFFFFLL | ((unint64_t)((v89 & 0x100010000) == 0) << 34);
      uint64_t v179 = v77;
      if ((v89 & 0x100010000) == 0 || (v89 & ~v92) != 0)
      {
        if (v108) {
          int v109 = v90;
        }
        else {
          int v109 = 0;
        }
        if (v108) {
          unint64_t v110 = v89 & ~v92;
        }
        else {
          unint64_t v110 = v89;
        }
        uint64_t v111 = 1153;
        uint64_t v112 = 0x4000;
        do
        {
          if (((v110 >> v111) & 0x10000) != 0)
          {
            uint64_t v113 = ++v109;
            v180[v113 - 1] = v112;
            v180[v113 - 1] = (v112 + ((unint64_t)((*(unsigned char *)(v87 + v111) - 1) & 7) << 11)) | 0x600000;
          }
          ++v111;
          v112 += 0x4000;
        }
        while (v111 != 1184);
        unint64_t v77 = v179 & 0xFFFFFFFFFFFFFF00 | v109;
      }
    }
    int v114 = *(unsigned __int16 *)(v7 + 1580);
    uint64_t v115 = 256;
    if (v114 == 5123) {
      uint64_t v115 = 768;
    }
    if (v114 == 5125) {
      uint64_t v115 = 1280;
    }
    BOOL v116 = (v77 & 0x800) == 0 || v114 == 5375;
    uint64_t v117 = 512;
    if (!v116) {
      uint64_t v117 = v115;
    }
    uint64_t v179 = v117 | v77 & 0xFFFFFFFFFFFFF8FFLL;
    uint64_t v118 = v77;
    if (!(_BYTE)v77) {
      goto LABEL_212;
    }
    uint64_t v119 = v87 + 1152;
    uint64_t v120 = v180;
    while (1)
    {
      unint64_t v122 = *v120;
      uint64_t v123 = (*v120 >> 14) & 0x3F;
      if ((*v120 & 0xBC000) != 0) {
        break;
      }
      if ((v89 >> (v123 + 16))) {
        goto LABEL_166;
      }
      if ((v89 & 0x10000) != 0)
      {
        if (*(_DWORD *)(v88 + 144)) {
          uint64_t v125 = 0;
        }
        else {
          uint64_t v125 = *(unsigned int *)(v88 + 152);
        }
        unsigned int v127 = *(char *)(v88 + 158);
        int v124 = *(unsigned __int16 *)(v88 + 156);
        unint64_t v126 = ((unint64_t)*(unsigned __int8 *)(v88 + 159) >> 1) & 1;
        LODWORD(v122) = v122 & 0xFFF03FFF;
      }
      else if ((v89 & 0x100000000) != 0)
      {
        if (*(_DWORD *)(v88 + 528)) {
          uint64_t v125 = 0;
        }
        else {
          uint64_t v125 = *(unsigned int *)(v88 + 536);
        }
        unsigned int v127 = *(char *)(v88 + 542);
        int v124 = *(unsigned __int16 *)(v88 + 540);
        unint64_t v126 = ((unint64_t)*(unsigned __int8 *)(v88 + 543) >> 1) & 1;
        LODWORD(v122) = v122 & 0xFFF03FFF | 0x40000;
      }
      else
      {
        int v124 = 0;
        uint64_t v125 = 0;
        unint64_t v126 = 0;
        unsigned int v127 = 4;
      }
LABEL_173:
      unsigned int v129 = (v122 >> 11) & 7;
      if (v127 > v129 + 1 && v127 != 5 && (v122 & 0x100000) == 0) {
        LOBYTE(v127) = v129 + 1;
      }
      char v121 = v124;
      if ((v124 - 5120) <= 6) {
        goto LABEL_160;
      }
      if (v124 == 5130)
      {
        char v121 = 7;
      }
      else if ((v124 - 13312) > 5)
      {
        char v121 = v124;
        if ((v124 - 21504) > 5)
        {
          if (v124 <= 36254)
          {
            if (v124 == 5131)
            {
              char v121 = 14;
            }
            else
            {
              if (v124 != 33640)
              {
LABEL_209:
                if (v124 == 5132) {
                  char v121 = 19;
                }
                else {
                  char v121 = 20;
                }
                goto LABEL_160;
              }
              char v121 = 16;
            }
          }
          else
          {
            switch(v124)
            {
              case 36255:
                char v121 = 15;
                break;
              case 41832:
                char v121 = 18;
                break;
              case 44447:
                char v121 = 17;
                break;
              default:
                goto LABEL_209;
            }
          }
        }
      }
      else
      {
        char v121 = v124 + 8;
      }
LABEL_160:
      *v120++ = v122 & 0xFEFFFFFF | ((unint64_t)(v127 & 7) << 32) | ((unint64_t)(v121 & 0x1F) << 35) | (v125 << 40) | (v126 << 24);
      if (!--v118) {
        goto LABEL_212;
      }
    }
    if (v123 > 0x1F)
    {
      int v124 = 0;
      uint64_t v125 = 0;
      unint64_t v126 = 0;
      if (v123 >= 0x28) {
        unsigned int v127 = 1;
      }
      else {
        unsigned int v127 = 4;
      }
      goto LABEL_173;
    }
    if (((v89 >> (v123 + 16)) & 1) == 0)
    {
      int v124 = 0;
      uint64_t v125 = 0;
      unint64_t v126 = 0;
      unsigned int v127 = *(unsigned __int8 *)(v119 + v123);
      goto LABEL_173;
    }
LABEL_166:
    uint64_t v128 = v88 + 136 + 24 * ((*v120 >> 14) & 0x3F);
    LODWORD(v125) = *(_DWORD *)(v128 + 16);
    if (*(_DWORD *)(v128 + 8)) {
      uint64_t v125 = 0;
    }
    else {
      uint64_t v125 = v125;
    }
    unsigned int v127 = *(char *)(v128 + 22);
    int v124 = *(unsigned __int16 *)(v128 + 20);
    unint64_t v126 = ((unint64_t)*(unsigned __int8 *)(v128 + 23) >> 1) & 1;
    goto LABEL_173;
  }
  unint64_t v85 = v74 & 0xFFFFFFEFFFFFF0FFLL | (v76 << 11) | (v75 << 36);
  uint64_t v179 = v85 | 0x400;
  if ((_BYTE)v74)
  {
    if (v74 < 4uLL)
    {
      unint64_t v86 = 0;
      goto LABEL_128;
    }
    unint64_t v86 = v74 - (unint64_t)(v74 & 3);
    uint64_t v95 = (int64x2_t *)&v182;
    int8x16_t v96 = (int8x16_t)vdupq_n_s64(0xFEFFFFFFuLL);
    int8x16_t v97 = (int8x16_t)vdupq_n_s64(0xA000000000uLL);
    unint64_t v98 = v86;
    do
    {
      int64x2_t v99 = v95[-1];
      int8x8_t v100 = (int8x8_t)vmovn_s64(v99);
      int8x8_t v101 = (int8x8_t)vmovn_s64(*v95);
      int8x8_t v102 = (int8x8_t)vcgt_u32((uint32x2_t)0x180000001800, (uint32x2_t)vand_s8(v100, (int8x8_t)0x380000003800));
      int8x8_t v103 = (int8x8_t)vcgt_u32((uint32x2_t)0x180000001800, (uint32x2_t)vand_s8(v101, (int8x8_t)0x380000003800));
      int8x16_t v104 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vorr_s8(vand_s8(vand_s8((int8x8_t)vsra_n_u32((uint32x2_t)0x100000001, (uint32x2_t)v101, 0xBuLL), (int8x8_t)0x700000007), v103), vbic_s8((int8x8_t)0x400000004, v103)), 0x20uLL), vorrq_s8(vandq_s8(*(int8x16_t *)v95, v96), v97));
      v95[-1] = (int64x2_t)vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vorr_s8(vand_s8(vand_s8((int8x8_t)vsra_n_u32((uint32x2_t)0x100000001, (uint32x2_t)v100, 0xBuLL), (int8x8_t)0x700000007), v102), vbic_s8((int8x8_t)0x400000004, v102)), 0x20uLL), vorrq_s8(vandq_s8((int8x16_t)v99, v96), v97));
      *uint64_t v95 = (int64x2_t)v104;
      v95 += 2;
      v98 -= 4;
    }
    while (v98);
    if ((v74 & 3) != 0)
    {
LABEL_128:
      unint64_t v105 = v74 - v86;
      uint64_t v106 = &v180[v86];
      do
      {
        if (((*v106 >> 11) & 7) >= 3) {
          uint64_t v107 = 4;
        }
        else {
          uint64_t v107 = ((*v106 >> 11) + 1) & 7;
        }
        *uint64_t v106 = *v106 & 0xFEFFFFFFLL | (v107 << 32) | 0xA000000000;
        ++v106;
        --v105;
      }
      while (v105);
    }
  }
  uint64_t v179 = v85 | 0x400000400;
LABEL_212:
  unint64_t v132 = 0;
  unsigned __int8 v133 = v179;
  unsigned int v134 = v179;
  uint64_t v135 = v179 + 1;
  uint64_t result = *a5;
  while (v180[v132 / 8 - 1] == *(void *)((char *)result + v132))
  {
    v132 += 8;
    if (8 * v179 + 8 == v132) {
      return result;
    }
  }
  if (8 * v179 + 8 != v132)
  {
    free(result);
    uint64_t result = malloc_type_malloc((8 * v135), 0x577B5147uLL);
    if (!result) {
      abort();
    }
    uint64_t v137 = 0;
    if (v134 < 3) {
      goto LABEL_223;
    }
    if ((unint64_t)((char *)result - (char *)&v179) < 0x20) {
      goto LABEL_223;
    }
    uint64_t v137 = v135 & 0x1FC;
    uint64_t v138 = (long long *)&v181;
    int v139 = result + 1;
    uint64_t v140 = v137;
    do
    {
      long long v141 = *v138;
      *(v139 - 1) = *(v138 - 1);
      _OWORD *v139 = v141;
      v138 += 2;
      v139 += 2;
      v140 -= 4;
    }
    while (v140);
    if (v137 != v135)
    {
LABEL_223:
      long long v142 = &v180[v137 - 1];
      uint64_t v143 = (void *)result + v137;
      uint64_t v144 = v133 - v137 + 1;
      do
      {
        uint64_t v145 = *v142++;
        *v143++ = v145;
        --v144;
      }
      while (v144);
    }
    *a5 = result;
  }
  return result;
}

void *gleLLVMSubmitFunc(uint64_t a1, uint64_t a2, float32_t a3, int8x16_t a4, float32_t a5, float32_t a6)
{
  return gleRunVertexSubmitImmediate((void *)a1, a2, 0, 0, 0, *(unint64_t **)(a1 + 26248), a3, a4, a5, a6);
}

void *gleSetVertexConvertFunc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  gleGetVertexSubmitFuncObjectAndKey(a1, 2, 0, 0, (void **)(a1 + 26256));
  *(void *)(a1 + 26168) = gleLLVMConvertFunc;
  *(void *)(a1 + 26176) = gleLLVMConvertFunc;
  long long v6 = *(unint64_t **)(a1 + 26256);
  v7.i64[0] = 0;

  return gleRunVertexSubmitImmediate((void *)a1, a3, a2, 0, 0, v6, 0.0, v7, 0.0, 0.0);
}

void *gleLLVMConvertFunc(uint64_t a1, uint64_t a2, uint64_t a3, double a4, int8x16_t a5)
{
  a5.i64[0] = 0;
  return gleRunVertexSubmitImmediate((void *)a1, a3, a2, 0, 0, *(unint64_t **)(a1 + 26256), 0.0, a5, 0.0, 0.0);
}

uint64_t gleSetVertexArrayFunc(uint64_t a1, int a2, int a3)
{
  gleGetVertexSubmitFuncObjectAndKey(a1, 1, 2, 1, (void **)(a1 + 26264));
  *(void *)(a1 + 26184) = gleLLVMArrayFunc;
  *(void *)(a1 + 26192) = gleLLVMArrayFunc;
  if (*(unsigned char *)(a1 + 32503)) {
    uint64_t v10 = mach_absolute_time();
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t result = (uint64_t)gleRunVertexSubmitARM((void *)a1, v8, v9, v6, v7, a2, a3, *(void *)(a1 + 26264));
  if (*(unsigned char *)(a1 + 32503))
  {
    uint64_t result = mach_absolute_time();
    *(void *)(a1 + 19184) += result - v10;
  }
  return result;
}

uint64_t gleLLVMArrayFunc(uint64_t a1, uint64_t a2, uint64_t a3, double a4, int8x16_t a5)
{
  int v5 = a3;
  int v6 = a2;
  double v8 = (unsigned char *)(a1 + 32503);
  if (*(unsigned char *)(a1 + 32503)) {
    uint64_t v9 = mach_absolute_time();
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t result = (uint64_t)gleRunVertexSubmitARM((void *)a1, a4, a5, a2, a3, v6, v5, *(void *)(a1 + 26264));
  if (*v8)
  {
    uint64_t result = mach_absolute_time();
    *(void *)(a1 + 19184) += result - v9;
  }
  return result;
}

void *gleSetVertexElemFunc(uint64_t a1, int a2)
{
  gleGetVertexSubmitFuncObjectAndKey(a1, 1, 1, 0, (void **)(a1 + 26272));
  *(void *)(a1 + 26200) = gleLLVMElemFunc;
  *(void *)(a1 + 26208) = gleLLVMElemFunc;
  int32x2_t v4 = *(unint64_t **)(a1 + 26272);
  v5.i64[0] = 0;

  return gleRunVertexSubmitImmediate((void *)a1, 0, 0, a2, 0, v4, 0.0, v5, 0.0, 0.0);
}

void *gleLLVMElemFunc(uint64_t a1, int a2, double a3, int8x16_t a4)
{
  a4.i64[0] = 0;
  return gleRunVertexSubmitImmediate((void *)a1, 0, 0, a2, 0, *(unint64_t **)(a1 + 26272), 0.0, a4, 0.0, 0.0);
}

void *gleRunVertexSubmitImmediate(void *result, uint64_t a2, uint64_t a3, int a4, int a5, unint64_t *a6, float32_t a7, int8x16_t a8, float32_t a9, float32_t a10)
{
  unsigned __int32 v14 = a8.i32[0];
  int v16 = result;
  uint64_t v172 = *MEMORY[0x263EF8340];
  unint64_t v17 = *a6;
  long long v168 = 0u;
  long long v169 = 0u;
  long long v170 = 0u;
  uint64_t v171 = 0;
  unsigned int v18 = (v17 >> 8) & 7;
  if (v18 == 4)
  {
    *((void *)&v168 + 1) = a2;
    uint64_t v21 = 2;
    uint64_t v20 = a3;
  }
  else if (v18 == 6)
  {
    uint64_t v19 = result[178];
    *((void *)&v168 + 1) = a2;
    *(void *)&long long v170 = v19;
    uint64_t v20 = result[179];
    uint64_t v21 = 5;
  }
  else
  {
    uint64_t v10 = a4;
    if ((v17 & 0x800) != 0)
    {
      uint64_t v159 = a5;
      uint64_t v24 = result[3255];
      *((void *)&v168 + 1) = result[3251];
      *(void *)&long long v169 = v24;
      uint64_t v25 = result[3289];
      uint64_t v171 = result[3298] + 960;
      uint64_t v26 = result[178];
      *((void *)&v169 + 1) = v25;
      *(void *)&long long v170 = v26;
      uint64_t v20 = result[179];
      uint64_t v21 = 5;
    }
    else
    {
      uint64_t v159 = 0;
      uint64_t v22 = result[3251];
      long long v170 = *((_OWORD *)result + 89);
      uint64_t v23 = result[3289];
      *((void *)&v168 + 1) = v22;
      *((void *)&v169 + 1) = v23;
      uint64_t v20 = result[3298] + 960;
      uint64_t v21 = 6;
    }
  }
  *((void *)&v168 + v21) = v20;
  int v154 = (__int32 *)(result + 52);
  int v155 = (__int32 *)(result + 50);
  int v152 = (__int32 *)(result + 48);
  int v153 = (__int32 *)(result + 44);
  BOOL v151 = (__int32 *)(result + 42);
  int v156 = (__int32 *)(result + 40);
  int v157 = (__int32 *)(result + 46);
  v27.i64[0] = 0x447FC000447FC000;
  float32x2_t v28 = (float32x2_t)vdup_n_s32(0x43FF8000u);
  __asm { FMOV            V14.2S, #-1.0 }
  do
  {
    switch((v17 >> 8) & 7)
    {
      case 1u:
        int v34 = *(unsigned __int8 *)(*((void *)&v169 + 1) + v10);
        goto LABEL_15;
      case 2u:
        uint64_t v35 = v10 + v159;
        goto LABEL_17;
      case 3u:
        int v34 = *(unsigned __int16 *)(*((void *)&v169 + 1) + 2 * v10);
LABEL_15:
        uint64_t v35 = (v159 + v34);
        goto LABEL_17;
      case 5u:
        uint64_t v35 = (*(_DWORD *)(*((void *)&v169 + 1) + 4 * v10) + v159);
LABEL_17:
        uint64_t v165 = v35;
        break;
      default:
        break;
    }
    if ((_BYTE)v17)
    {
      uint64_t v161 = v10;
      unint64_t v36 = 0;
      uint64_t v37 = 8 * v17;
      while (1)
      {
        int v38 = (uint64_t *)&a6[v36 / 8];
        unint64_t v39 = a6[v36 / 8 + 1];
        unsigned int v40 = (v39 >> 14) & 0x3F;
        unsigned int v41 = 4 * v39;
        if (v40 > 0x1F)
        {
          if (v40 > 0x29)
          {
            if (v40 > 0x2B)
            {
              switch(v40)
              {
                case '/':
                  unsigned int v83 = v41 & 0xFC7FFFFF | (((*(_DWORD *)a6 >> 8) & 7) << 23);
                  if ((v83 & 0x2800000) == 0x2000000) {
                    int v84 = 0;
                  }
                  else {
                    int v84 = *((_DWORD *)v16 + 2302);
                  }
                  *(_DWORD *)(*((void *)&v168 + 1) + (v83 & 0x3FC)) = v84;
                  break;
                case '.':
                  *(_DWORD *)(*((void *)&v168 + 1) + 4 * a6[v36 / 8 + 1]) = *(_DWORD *)(a3 + 16);
                  break;
                case '-':
                  unsigned int v66 = v41 & 0xFC7FFFFF | (((*(_DWORD *)a6 >> 8) & 7) << 23);
                  if ((v66 & 0x2800000) == 0x2000000) {
                    int v67 = 0;
                  }
                  else {
                    int v67 = v165;
                  }
                  *(_DWORD *)(*((void *)&v168 + 1) + (v66 & 0x3FC)) = v67;
                  break;
                default:
                  *(void *)&double v164 = *((unsigned int *)v16 + 2301);
                  *(_DWORD *)(*((void *)&v168 + 1) + 4 * a6[v36 / 8 + 1]) = LODWORD(v164);
                  break;
              }
            }
            else
            {
              unint64_t v54 = (((*a6 & 0x700) == 1536) << 21) | (((v39 & 0x4000) != 0) << 20) | v41;
              uint64_t v55 = *(void *)(((unint64_t)&v168 & 0xFFFFFFFFFFFFFFF7 | (8 * ((v54 >> 20) & 1))) + 0x20);
              if (v54 >= 0x200000) {
                *(_DWORD *)(v55 + 500) = 1;
              }
              *(void *)(*((void *)&v168 + 1) + (v54 & 0x3FC)) = v55;
            }
          }
          else
          {
            if (v40 >= 0x28) {
              int v47 = 64;
            }
            else {
              int v47 = 48;
            }
            if (v40 < 0x26) {
              int v47 = 32;
            }
            if (v40 < 0x24) {
              int v47 = 16;
            }
            if (v40 >= 0x22) {
              int v48 = v47;
            }
            else {
              int v48 = 0;
            }
            uint64_t v49 = (v39 >> 12) & 0x700000;
            unint64_t v50 = v48 & 0xFF7FFFFF | (((v39 & 0x4000) != 0) << 23) | v49;
            uint64_t v51 = v50 & 0x70;
            unint64_t v52 = v50 >> 20;
            if ((*((unsigned char *)a6 + 1) & 0x20) != 0)
            {
              unsigned int v60 = v49 >> 20;
              if (v49 >> 20)
              {
                uint64_t v61 = *(void *)(((unint64_t)&v168 | v52 & 8) + 0x20) + v51;
                if (v60 == 1)
                {
                  v167.i32[0] = *(_DWORD *)v61;
                }
                else
                {
                  *(void *)&long long v166 = *(void *)v61;
                  if (v60 == 4)
                  {
                    *((void *)&v166 + 1) = *(void *)(v61 + 8);
                  }
                  else if (v60 == 3)
                  {
                    v167.i32[2] = *(_DWORD *)(v61 + 8);
                  }
                }
              }
              uint64_t result = (void *)gleLLVMStoreDataToOutFloatInDouble((uint64_t)&v168, &v167, &v166, v49 | v41 | ((v39 << 17) + 0x10000000) & 0x70000000);
            }
            else
            {
              float32x4_t v53 = (__int32 *)(*(void *)(((unint64_t)&v168 | (v50 >> 20) & 8) + 0x20) + v51);
              v167.i32[0] = *v53;
              if (v49 > 0x100000)
              {
                v167.i32[1] = v53[1];
                if (v49 != 0x200000)
                {
                  v167.i32[2] = v53[2];
                  if (v49 == 0x400000) {
                    v167.i32[3] = v53[3];
                  }
                }
              }
              uint64_t result = (void *)gleLLVMStoreDataToOutFloatInFloat((uint64_t)&v168, &v167, v49 | v41 | ((v39 << 17) + 0x10000000) & 0x70000000);
            }
          }
          goto LABEL_21;
        }
        uint64_t v42 = HIDWORD(v39) & 7;
        uint64_t v43 = (v39 >> 35) & 0x1F;
        if (v43 == 20) {
          break;
        }
        if ((v39 & 0x200000) != 0)
        {
          int v62 = 32 * v40 + 8176;
          if (v40 <= 0xF) {
            int v62 = 16 * v40 + 8432;
          }
          if ((v39 & 0xBC000) == 0 && (*a6 & 0x1000000000) == 0) {
            unsigned int v46 = -1;
          }
          else {
            unsigned int v46 = v62;
          }
        }
        else
        {
          unsigned int v46 = 0;
        }
        uint64_t v64 = (unsigned __int8 *)(*(void *)(v171 + 8 * v40) + (v39 >> 40) * v165);
        *(void *)&long long v168 = v64;
        switch((v39 >> 8) & 7)
        {
          case 1u:
            switch((int)v42)
            {
              case 1:
                *(void *)&double v65 = *v64;
                goto LABEL_185;
              case 2:
                *(void *)&double v65 = *(unsigned __int16 *)v64;
                goto LABEL_185;
              case 3:
                uint64_t v163 = v64[2];
                *(void *)&double v164 = *(unsigned __int16 *)v64;
                int v76 = 1;
                goto LABEL_236;
              case 4:
              case 5:
                *(void *)&double v65 = *(unsigned int *)v64;
LABEL_185:
                double v164 = v65;
                int v76 = 1;
                break;
              default:
                int v76 = 1;
                break;
            }
            break;
          case 2u:
            switch((int)v42)
            {
              case 1:
                *(void *)&double v68 = *(unsigned __int16 *)v64;
                goto LABEL_159;
              case 2:
                *(void *)&double v68 = *(unsigned int *)v64;
                goto LABEL_159;
              case 3:
                uint64_t v163 = *((unsigned __int16 *)v64 + 2);
                *(void *)&double v164 = *(unsigned int *)v64;
                int v76 = 2;
                goto LABEL_236;
              case 4:
                double v68 = *(double *)v64;
LABEL_159:
                double v164 = v68;
                int v76 = 2;
                break;
              default:
                int v76 = 2;
                break;
            }
            break;
          case 3u:
            switch((int)v43)
            {
              case 0:
                *(void *)&double v164 = (char)*v64;
                if (v42 >= 2)
                {
                  uint64_t v163 = (char)v64[1];
                  if (v42 != 2)
                  {
                    int v160 = (char)v64[2];
                    if (v42 >= 4)
                    {
                      LODWORD(v43) = 0;
                      int v69 = (char)v64[3];
                      goto LABEL_164;
                    }
                  }
                }
                LODWORD(v43) = 0;
                int v76 = 3;
                break;
              case 1:
                *(void *)&double v164 = *v64;
                if (v42 >= 2)
                {
                  uint64_t v163 = v64[1];
                  if (v42 != 2)
                  {
                    int v160 = v64[2];
                    if (v42 >= 4) {
                      int v158 = v64[3];
                    }
                  }
                }
                int v76 = 3;
                LODWORD(v43) = 1;
                break;
              case 2:
                *(void *)&double v164 = *(__int16 *)v64;
                if (v42 >= 2)
                {
                  uint64_t v163 = *((__int16 *)v64 + 1);
                  if (v42 != 2)
                  {
                    int v160 = *((__int16 *)v64 + 2);
                    if (v42 >= 4) {
                      int v158 = *((__int16 *)v64 + 3);
                    }
                  }
                }
                int v76 = 3;
                LODWORD(v43) = 2;
                break;
              case 3:
                *(void *)&double v164 = *(unsigned __int16 *)v64;
                if (v42 >= 2)
                {
                  uint64_t v163 = *((unsigned __int16 *)v64 + 1);
                  if (v42 != 2)
                  {
                    int v160 = *((unsigned __int16 *)v64 + 2);
                    if (v42 >= 4) {
                      int v158 = *((unsigned __int16 *)v64 + 3);
                    }
                  }
                }
                LODWORD(v43) = 3;
                int v76 = 3;
                break;
              default:
                *(void *)&double v164 = *(unsigned int *)v64;
                if (v42 < 2
                  || (uint64_t v163 = *((unsigned int *)v64 + 1), v42 == 2)
                  || (int v160 = *((_DWORD *)v64 + 2), v42 < 4))
                {
                  int v76 = 3;
                }
                else
                {
                  int v69 = *((_DWORD *)v64 + 3);
LABEL_164:
                  int v158 = v69;
                  int v76 = 3;
                }
                break;
            }
            break;
          case 4u:
            int v70 = v43 << 23;
            int v71 = v42 - 2;
            if (v42 >= 2) {
              int v72 = 2;
            }
            else {
              int v72 = BYTE4(v39) & 7;
            }
            int v73 = v70 | (v72 << 20);
            if (v42 < 2) {
              int v71 = 0;
            }
            int v74 = v70 | (v71 << 20) | 0x10;
            if ((v39 & 0x100000) == 0) {
              int v74 = v73;
            }
            uint64_t v75 = (uint64_t *)&v64[*(void *)&v74 & 0xFFFFFLL];
            v27.i64[0] = *v75;
            *(void *)&long long v166 = *v75;
            if ((*(void *)&v74 & 0x600000) != 0)
            {
              v27.i64[0] = v75[1];
              *((void *)&v166 + 1) = v27.i64[0];
            }
            goto LABEL_114;
          default:
            if ((v39 & 0xF800000000) == 0x3000000000 && (*a6 & 0x2000) != 0)
            {
              switch((int)v42)
              {
                case 1:
                  v27.i32[0] = *(_DWORD *)v64;
                  v167.i32[0] = *(_DWORD *)v64;
                  int v76 = 5;
                  break;
                case 2:
                  v27.i64[0] = *(void *)v64;
                  *(void *)&long long v166 = *(void *)v64;
                  int v76 = 5;
                  break;
                case 3:
                  v27.i64[0] = *(void *)v64;
                  *(void *)&long long v166 = *(void *)v64;
                  v27.i32[0] = *((_DWORD *)v64 + 2);
                  v167.i32[2] = v27.i32[0];
                  int v76 = 5;
                  break;
                case 4:
                  float32x4_t v27 = *(float32x4_t *)v64;
                  long long v166 = *(_OWORD *)v64;
                  int v76 = 5;
                  break;
                default:
                  int v76 = 5;
                  break;
              }
            }
            else
            {
              switch((int)v43)
              {
                case 0:
                case 8:
                  v27.i8[0] = *v64;
                  v27.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v27.f32)).u64[0];
                  v27.f32[0] = (float)v27.i32[0];
                  v167.i32[0] = v27.i32[0];
                  if (v42 < 2) {
                    goto LABEL_211;
                  }
                  v27.i8[0] = v64[1];
                  v27.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v27.f32)).u64[0];
                  v27.f32[0] = (float)v27.i32[0];
                  v167.i32[1] = v27.i32[0];
                  if (v42 == 2) {
                    goto LABEL_211;
                  }
                  v27.i8[0] = v64[2];
                  v27.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v27.f32)).u64[0];
                  v27.f32[0] = (float)v27.i32[0];
                  v167.i32[2] = v27.i32[0];
                  if (v42 < 4) {
                    goto LABEL_211;
                  }
                  v27.i8[0] = v64[3];
                  v27.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v27.f32)).u64[0];
                  v27.f32[0] = (float)v27.i32[0];
                  goto LABEL_210;
                case 1:
                case 9:
                  v27.i8[0] = *v64;
                  v27.f32[0] = (float)v27.u32[0];
                  v167.i32[0] = v27.i32[0];
                  if (v42 < 2) {
                    goto LABEL_211;
                  }
                  v27.i8[0] = v64[1];
                  v27.f32[0] = (float)v27.u32[0];
                  v167.i32[1] = v27.i32[0];
                  if (v42 == 2) {
                    goto LABEL_211;
                  }
                  v27.i8[0] = v64[2];
                  v27.f32[0] = (float)v27.u32[0];
                  v167.i32[2] = v27.i32[0];
                  if (v42 < 4) {
                    goto LABEL_211;
                  }
                  v27.i8[0] = v64[3];
                  goto LABEL_209;
                case 2:
                case 10:
                  v27.i16[0] = *(_WORD *)v64;
                  v27.i64[0] = vmovl_s16(*(int16x4_t *)v27.f32).u64[0];
                  v27.f32[0] = (float)v27.i32[0];
                  v167.i32[0] = v27.i32[0];
                  if (v42 < 2) {
                    goto LABEL_211;
                  }
                  v27.i16[0] = *((_WORD *)v64 + 1);
                  v27.i64[0] = vmovl_s16(*(int16x4_t *)v27.f32).u64[0];
                  v27.f32[0] = (float)v27.i32[0];
                  v167.i32[1] = v27.i32[0];
                  if (v42 == 2) {
                    goto LABEL_211;
                  }
                  v27.i16[0] = *((_WORD *)v64 + 2);
                  v27.i64[0] = vmovl_s16(*(int16x4_t *)v27.f32).u64[0];
                  v27.f32[0] = (float)v27.i32[0];
                  v167.i32[2] = v27.i32[0];
                  if (v42 < 4) {
                    goto LABEL_211;
                  }
                  v27.i16[0] = *((_WORD *)v64 + 3);
                  v27.i64[0] = vmovl_s16(*(int16x4_t *)v27.f32).u64[0];
                  v27.f32[0] = (float)v27.i32[0];
                  goto LABEL_210;
                case 3:
                case 11:
                  v27.i16[0] = *(_WORD *)v64;
                  v27.f32[0] = (float)v27.u32[0];
                  v167.i32[0] = v27.i32[0];
                  if (v42 < 2) {
                    goto LABEL_211;
                  }
                  v27.i16[0] = *((_WORD *)v64 + 1);
                  v27.f32[0] = (float)v27.u32[0];
                  v167.i32[1] = v27.i32[0];
                  if (v42 == 2) {
                    goto LABEL_211;
                  }
                  v27.i16[0] = *((_WORD *)v64 + 2);
                  v27.f32[0] = (float)v27.u32[0];
                  v167.i32[2] = v27.i32[0];
                  if (v42 < 4) {
                    goto LABEL_211;
                  }
                  v27.i16[0] = *((_WORD *)v64 + 3);
LABEL_209:
                  v27.f32[0] = (float)v27.u32[0];
                  goto LABEL_210;
                case 4:
                case 12:
                case 19:
                  v27.f32[0] = (float)*(int *)v64;
                  v167.f32[0] = v27.f32[0];
                  if (v42 < 2) {
                    goto LABEL_211;
                  }
                  v27.f32[0] = (float)*((int *)v64 + 1);
                  v167.f32[1] = v27.f32[0];
                  if (v42 == 2) {
                    goto LABEL_211;
                  }
                  v27.f32[0] = (float)*((int *)v64 + 2);
                  v167.f32[2] = v27.f32[0];
                  if (v42 < 4) {
                    goto LABEL_211;
                  }
                  v27.f32[0] = (float)*((int *)v64 + 3);
LABEL_210:
                  v167.i32[3] = v27.i32[0];
LABEL_211:
                  int v76 = 0;
                  unint64_t v85 = v156;
                  unint64_t v86 = v157;
                  switch((int)v43)
                  {
                    case 8:
                      goto LABEL_213;
                    case 9:
                      goto LABEL_332;
                    case 10:
                      unint64_t v85 = v151;
LABEL_213:
                      v27.i32[0] = *v85;
                      float v87 = *(float *)v85 * v167.f32[0];
                      if (v87 < -1.0) {
                        float v87 = -1.0;
                      }
                      v167.f32[0] = v87;
                      if (v42 < 2) {
                        goto LABEL_336;
                      }
                      float v88 = v27.f32[0] * v167.f32[1];
                      if ((float)(v27.f32[0] * v167.f32[1]) < -1.0) {
                        float v88 = -1.0;
                      }
                      v167.f32[1] = v88;
                      if (v42 == 2) {
                        goto LABEL_336;
                      }
                      float v89 = v27.f32[0] * v167.f32[2];
                      if ((float)(v27.f32[0] * v167.f32[2]) < -1.0) {
                        float v89 = -1.0;
                      }
                      v167.f32[2] = v89;
                      if (v42 < 4) {
                        goto LABEL_336;
                      }
                      int v76 = 0;
                      v27.f32[0] = v27.f32[0] * v167.f32[3];
                      if (v27.f32[0] < -1.0) {
                        v27.f32[0] = -1.0;
                      }
                      v167.i32[3] = v27.i32[0];
                      break;
                    case 11:
                      unint64_t v86 = v152;
                      goto LABEL_332;
                    case 12:
                      unint64_t v86 = v153;
                      goto LABEL_332;
                    case 13:
                      goto LABEL_331;
                    case 19:
                      unint64_t v86 = v154;
                      goto LABEL_332;
                    default:
                      goto LABEL_236;
                  }
                  goto LABEL_236;
                case 5:
                  v27.f32[0] = (float)*(unsigned int *)v64;
                  v167.f32[0] = v27.f32[0];
                  if (v42 < 2
                    || (v27.f32[0] = (float)*((unsigned int *)v64 + 1), v167.f32[1] = v27.f32[0], v42 == 2)
                    || (v27.f32[0] = (float)*((unsigned int *)v64 + 2), v167.f32[2] = v27.f32[0], v42 < 4))
                  {
                    int v76 = 0;
                    LODWORD(v43) = 5;
                  }
                  else
                  {
                    int v76 = 0;
                    v27.f32[0] = (float)*((unsigned int *)v64 + 3);
                    v167.f32[3] = v27.f32[0];
                    LODWORD(v43) = 5;
                  }
                  goto LABEL_236;
                case 6:
                  switch((int)v42)
                  {
                    case 1:
                      int v76 = 0;
                      v27.i32[0] = *(_DWORD *)v64;
                      v167.i32[0] = *(_DWORD *)v64;
                      break;
                    case 2:
                      int v76 = 0;
                      v167.i32[0] = *(_DWORD *)v64;
                      v27.i32[0] = *((_DWORD *)v64 + 1);
                      v167.i32[1] = v27.i32[0];
                      break;
                    case 3:
                      int v76 = 0;
                      v167.i64[0] = *(void *)v64;
                      v27.i32[0] = *((_DWORD *)v64 + 2);
                      v167.i32[2] = v27.i32[0];
                      break;
                    case 4:
                      int v76 = 0;
                      v167.i64[0] = *(void *)v64;
                      v167.i32[2] = *((_DWORD *)v64 + 2);
                      goto LABEL_147;
                    default:
                      goto LABEL_234;
                  }
                  goto LABEL_235;
                case 7:
                  v27.i64[0] = *(void *)v64;
                  v27.f32[0] = *(double *)v64;
                  v167.i32[0] = v27.i32[0];
                  if (v42 < 2
                    || (v27.i64[0] = *((void *)v64 + 1),
                        v27.f32[0] = *(double *)v27.i64,
                        v167.i32[1] = v27.i32[0],
                        v42 == 2)
                    || (v27.i64[0] = *((void *)v64 + 2),
                        v27.f32[0] = *(double *)v27.i64,
                        v167.i32[2] = v27.i32[0],
                        v42 < 4))
                  {
                    int v76 = 0;
                    LODWORD(v43) = 7;
                  }
                  else
                  {
                    int v76 = 0;
                    v27.i64[0] = *((void *)v64 + 3);
                    v27.f32[0] = *(double *)v27.i64;
                    v167.i32[3] = v27.i32[0];
                    LODWORD(v43) = 7;
                  }
                  goto LABEL_236;
                case 13:
                  v167.f32[0] = (float)(*(_DWORD *)v64 >> 1);
                  unint64_t v86 = v155;
                  if (v42 >= 2)
                  {
                    v167.f32[1] = (float)(*((_DWORD *)v64 + 1) >> 1);
                    unint64_t v86 = v155;
                    if (v42 != 2)
                    {
                      v167.f32[2] = (float)(*((_DWORD *)v64 + 2) >> 1);
                      unint64_t v86 = v155;
                      if (v42 >= 4)
                      {
                        v167.f32[3] = (float)(*((_DWORD *)v64 + 3) >> 1);
LABEL_331:
                        unint64_t v86 = v155;
                      }
                    }
                  }
LABEL_332:
                  v27.i32[0] = *v86;
                  v167.f32[0] = *(float *)v86 * v167.f32[0];
                  if (v42 < 2
                    || (v167.f32[1] = v27.f32[0] * v167.f32[1], v42 == 2)
                    || (v167.f32[2] = v27.f32[0] * v167.f32[2], v42 < 4))
                  {
LABEL_336:
                    int v76 = 0;
                  }
                  else
                  {
                    int v76 = 0;
                    v27.f32[0] = v27.f32[0] * v167.f32[3];
                    v167.i32[3] = v27.i32[0];
                  }
                  goto LABEL_236;
                case 14:
                  unsigned int v104 = *(unsigned __int16 *)v64;
                  unsigned int v105 = v104 & 0x3FF;
                  int v106 = v104 & 0x7C00;
                  if ((v104 & 0x7C00) == 0)
                  {
                    unsigned int v125 = __clz(v105);
                    int v126 = v104 << (v125 - 21);
                    int v127 = 1124073472 - (v125 << 23);
                    int v128 = v126 & 0x3FE;
                    if ((v104 & 0x3FF) != 0)
                    {
                      unsigned int v105 = v128;
                    }
                    else
                    {
                      int v127 = 0;
                      unsigned int v105 = 0;
                    }
                    goto LABEL_409;
                  }
                  if (v106 != 31744)
                  {
                    int v127 = (v106 << 13) + 939524096;
LABEL_409:
                    int v107 = v127 | (v105 << 13);
                    goto LABEL_410;
                  }
                  if ((v104 & 0x3FF) != 0) {
                    int v107 = 0x7FFFFFFF;
                  }
                  else {
                    int v107 = 2139095040;
                  }
LABEL_410:
                  v167.i32[0] = v107 & 0x7FFFFFFF | ((v104 >> 15) << 31);
                  if (v42 < 2) {
                    goto LABEL_441;
                  }
                  unsigned int v129 = *((unsigned __int16 *)v64 + 1);
                  unsigned int v130 = v129 & 0x3FF;
                  int v131 = v129 & 0x7C00;
                  if ((v129 & 0x7C00) == 0)
                  {
                    unsigned int v133 = __clz(v130);
                    int v134 = v129 << (v133 - 21);
                    int v135 = 1124073472 - (v133 << 23);
                    int v136 = v134 & 0x3FE;
                    if ((v129 & 0x3FF) != 0)
                    {
                      unsigned int v130 = v136;
                    }
                    else
                    {
                      int v135 = 0;
                      unsigned int v130 = 0;
                    }
                    goto LABEL_423;
                  }
                  if (v131 != 31744)
                  {
                    int v135 = (v131 << 13) + 939524096;
LABEL_423:
                    int v132 = v135 | (v130 << 13);
                    goto LABEL_424;
                  }
                  if ((v129 & 0x3FF) != 0) {
                    int v132 = 0x7FFFFFFF;
                  }
                  else {
                    int v132 = 2139095040;
                  }
LABEL_424:
                  v167.i32[1] = v132 & 0x7FFFFFFF | ((v129 >> 15) << 31);
                  if (v42 == 2) {
                    goto LABEL_441;
                  }
                  unsigned int v137 = *((unsigned __int16 *)v64 + 2);
                  unsigned int v138 = v137 & 0x3FF;
                  int v139 = v137 & 0x7C00;
                  if ((v137 & 0x7C00) == 0)
                  {
                    unsigned int v141 = __clz(v138);
                    int v142 = v137 << (v141 - 21);
                    int v143 = 1124073472 - (v141 << 23);
                    int v144 = v142 & 0x3FE;
                    if ((v137 & 0x3FF) != 0)
                    {
                      unsigned int v138 = v144;
                    }
                    else
                    {
                      int v143 = 0;
                      unsigned int v138 = 0;
                    }
                    goto LABEL_434;
                  }
                  if (v139 != 31744)
                  {
                    int v143 = (v139 << 13) + 939524096;
LABEL_434:
                    int v140 = v143 | (v138 << 13);
                    goto LABEL_435;
                  }
                  if ((v137 & 0x3FF) != 0) {
                    int v140 = 0x7FFFFFFF;
                  }
                  else {
                    int v140 = 2139095040;
                  }
LABEL_435:
                  v167.i32[2] = v140 & 0x7FFFFFFF | ((v137 >> 15) << 31);
                  if (v42 < 4)
                  {
LABEL_441:
                    int v76 = 0;
                    LODWORD(v43) = 14;
                    goto LABEL_236;
                  }
                  unsigned int v145 = *((unsigned __int16 *)v64 + 3);
                  unsigned int v146 = v145 & 0x3FF;
                  int v147 = v145 & 0x7C00;
                  if ((v145 & 0x7C00) == 0)
                  {
                    if ((v145 & 0x3FF) != 0)
                    {
                      unsigned int v149 = __clz(v146);
                      int v150 = 1124073472 - (v149 << 23);
                      unsigned int v146 = (v145 << (v149 - 21)) & 0x3FE;
                    }
                    else
                    {
                      int v150 = 0;
                    }
                    goto LABEL_446;
                  }
                  if (v147 != 31744)
                  {
                    int v150 = (v147 << 13) + 939524096;
LABEL_446:
                    int v148 = v150 | (v146 << 13);
                    goto LABEL_447;
                  }
                  if ((v145 & 0x3FF) != 0) {
                    int v148 = 0x7FFFFFFF;
                  }
                  else {
                    int v148 = 2139095040;
                  }
LABEL_447:
                  int v76 = 0;
                  v167.i32[3] = v148 & 0x7FFFFFFF | ((v145 >> 15) << 31);
                  LODWORD(v43) = 14;
                  break;
                case 15:
                  int v76 = 0;
                  signed int v108 = *(_DWORD *)v64;
                  *(float32x2_t *)v27.f32 = vcvt_f32_s32(vshr_n_s32((int32x2_t)vshl_u32((uint32x2_t)vdup_n_s32(v108), (uint32x2_t)0xC00000016), 0x16uLL));
                  v167.i64[0] = v27.i64[0];
                  v27.f32[0] = (float)((4 * v108) >> 22);
                  v167.f32[2] = v27.f32[0];
                  v167.f32[3] = (float)(v108 >> 30);
                  LODWORD(v43) = 15;
                  goto LABEL_236;
                case 16:
                  int v76 = 0;
                  unsigned int v109 = *(_DWORD *)v64;
                  v167.f32[0] = (float)(v109 & 0x3FF);
                  *(float32x2_t *)v27.f32 = vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v109), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003));
                  *(uint64_t *)((char *)v167.i64 + 4) = v27.i64[0];
                  v27.f32[0] = (float)(v109 >> 30);
                  v167.f32[3] = v27.f32[0];
                  LODWORD(v43) = 16;
                  goto LABEL_236;
                case 17:
                  int v76 = 0;
                  signed int v110 = *(_DWORD *)v64;
                  float32x2_t v111 = vdiv_f32(vcvt_f32_s32(vshr_n_s32((int32x2_t)vshl_u32((uint32x2_t)vdup_n_s32(v110), (uint32x2_t)0xC00000016), 0x16uLL)), v28);
                  *(int8x8_t *)v27.f32 = vbsl_s8((int8x8_t)vcgt_f32(_D14, v111), (int8x8_t)_D14, (int8x8_t)v111);
                  v167.i64[0] = v27.i64[0];
                  v27.f32[0] = (float)((4 * v110) >> 22) / 511.0;
                  float v112 = (float)(v110 >> 30);
                  if (v27.f32[0] < -1.0) {
                    v27.f32[0] = -1.0;
                  }
                  if (v112 < -1.0) {
                    float v112 = -1.0;
                  }
                  v167.i64[1] = __PAIR64__(LODWORD(v112), v27.u32[0]);
                  LODWORD(v43) = 17;
                  goto LABEL_236;
                case 18:
                  int v76 = 0;
                  unsigned int v113 = *(_DWORD *)v64;
                  a8.i32[0] = v113;
                  a8.i32[1] = v113 >> 10;
                  a8.i32[2] = v113 >> 20;
                  v114.i64[0] = 0x300000003;
                  v114.i64[1] = 0x300000003;
                  a8 = vandq_s8(a8, v114);
                  a8.i32[3] = vshrq_n_u32((uint32x4_t)vdupq_n_s32(v113), 0x1EuLL).i32[3];
                  float32x4_t v115 = vcvtq_f32_u32((uint32x4_t)a8);
                  a8.i32[3] = 1077936128;
                  float32x4_t v27 = vdivq_f32(v115, (float32x4_t)xmmword_227DC2800);
                  float32x4_t v167 = v27;
                  LODWORD(v43) = 18;
                  goto LABEL_236;
                default:
                  goto LABEL_211;
              }
            }
            break;
        }
LABEL_236:
        unsigned int v90 = ((v39 << 17) + 0x10000000) & 0x70000000;
        LODWORD(v91) = v90 | (v42 << 20);
        if ((v39 & 0x400000) == 0)
        {
          LODWORD(v91) = v91 | v41;
          switch(v76)
          {
            case 0:
              LODWORD(v91) = v91 & 0x7FFFFFFF | ((*(_DWORD *)a6 >> 13) << 31);
              uint64_t result = (void *)gleLLVMStoreDataToOutFloatInFloat((uint64_t)&v168, &v167, v91);
              if ((*((unsigned char *)v38 + 10) & 0x20) != 0) {
                break;
              }
              goto LABEL_21;
            case 1:
              LODWORD(v91) = v91 | (v43 << 23);
              unsigned int v92 = (v91 >> 23) & 0x1F;
              if (v92 == 8) {
                int v93 = 2130706432;
              }
              else {
                int v93 = 0x1000000;
              }
              if (v92 == 9) {
                int v94 = -16777216;
              }
              else {
                int v94 = v93;
              }
              if (v90 != 0x40000000) {
                int v94 = 0;
              }
              if (v42 > 3) {
                int v94 = 0;
              }
              int v95 = v42 - 1;
              unsigned int v96 = v90 >> 28;
              uint64_t v97 = *((void *)&v168 + 1) + v41;
              switch(v95)
              {
                case 0:
                  switch(v96)
                  {
                    case 1u:
                      *(unsigned char *)uint64_t v97 = LOBYTE(v164);
                      if ((*((unsigned char *)v38 + 10) & 0x20) != 0) {
                        goto LABEL_358;
                      }
                      break;
                    case 2u:
                      goto LABEL_297;
                    case 3u:
                      goto LABEL_317;
                    case 4u:
                      goto LABEL_319;
                    case 5u:
                    case 6u:
                      goto LABEL_305;
                    default:
                      goto LABEL_357;
                  }
                  goto LABEL_21;
                case 1:
                  switch(v96)
                  {
                    case 2u:
                      goto LABEL_297;
                    case 3u:
LABEL_317:
                      *(_WORD *)uint64_t v97 = LOWORD(v164);
                      *(unsigned char *)(v97 + 2) = 0;
                      if ((*((unsigned char *)v38 + 10) & 0x20) != 0) {
                        goto LABEL_358;
                      }
                      break;
                    case 4u:
LABEL_319:
                      *(_DWORD *)uint64_t v97 = v94 | LODWORD(v164);
                      if ((*((unsigned char *)v38 + 10) & 0x20) != 0) {
                        goto LABEL_358;
                      }
                      break;
                    case 5u:
                    case 6u:
                      goto LABEL_305;
                    default:
                      goto LABEL_357;
                  }
                  goto LABEL_21;
                case 2:
                  if (v96 - 5 < 2)
                  {
                    *(_DWORD *)uint64_t v97 = LODWORD(v164) | (v163 << 16);
                    if ((*((unsigned char *)v38 + 10) & 0x20) == 0) {
                      goto LABEL_21;
                    }
                  }
                  else if (v96 == 4)
                  {
                    *(_DWORD *)uint64_t v97 = LODWORD(v164) | (v163 << 16) | v94;
                    if ((*((unsigned char *)v38 + 10) & 0x20) == 0) {
                      goto LABEL_21;
                    }
                  }
                  else
                  {
                    if (v96 != 3) {
                      goto LABEL_357;
                    }
                    *(_WORD *)uint64_t v97 = LOWORD(v164);
                    *(unsigned char *)(v97 + 2) = v163;
                    if ((*((unsigned char *)v38 + 10) & 0x20) == 0) {
                      goto LABEL_21;
                    }
                  }
                  break;
                case 3:
                  goto LABEL_305;
                case 4:
                  switch(v96)
                  {
                    case 1u:
                      goto LABEL_356;
                    case 2u:
                      goto LABEL_355;
                    case 3u:
                      *(unsigned char *)(v97 + 2) = LOBYTE(v164);
LABEL_355:
                      *(unsigned char *)(v97 + 1) = BYTE1(v164);
LABEL_356:
                      *(unsigned char *)uint64_t v97 = BYTE2(v164);
                      goto LABEL_357;
                    case 4u:
                      *(_DWORD *)uint64_t v97 = LODWORD(v164);
                      *(unsigned char *)uint64_t v97 = BYTE2(v164);
                      *(unsigned char *)(v97 + 2) = LOBYTE(v164);
                      if ((*((unsigned char *)v38 + 10) & 0x20) != 0) {
                        goto LABEL_358;
                      }
                      goto LABEL_21;
                    case 5u:
                    case 6u:
                      goto LABEL_305;
                    default:
                      goto LABEL_357;
                  }
                default:
                  goto LABEL_357;
              }
              break;
            case 2:
              uint64_t v98 = 0;
              unint64_t v91 = v91 | (v43 << 23);
              if (v42 <= 3 && v90 == 0x40000000)
              {
                uint64_t v99 = ((v91 >> 23) & 0x1F) - 10;
                if (v99 > 4) {
                  uint64_t v98 = 0x1000000000000;
                }
                else {
                  uint64_t v98 = qword_227DC2888[v99];
                }
              }
              int v102 = v42 - 1;
              unsigned int v103 = v90 >> 28;
              uint64_t v97 = *((void *)&v168 + 1) + v41;
              switch(v102)
              {
                case 0:
                  switch(v103)
                  {
                    case 1u:
LABEL_297:
                      *(_WORD *)uint64_t v97 = LOWORD(v164);
                      if ((*((unsigned char *)v38 + 10) & 0x20) != 0) {
                        goto LABEL_358;
                      }
                      break;
                    case 2u:
                      goto LABEL_305;
                    case 3u:
                      goto LABEL_313;
                    case 4u:
                      goto LABEL_315;
                    case 5u:
                    case 6u:
                      goto LABEL_289;
                    default:
                      goto LABEL_357;
                  }
                  goto LABEL_21;
                case 1:
                  switch(v103)
                  {
                    case 2u:
LABEL_305:
                      *(_DWORD *)uint64_t v97 = LODWORD(v164);
                      if ((*((unsigned char *)v38 + 10) & 0x20) != 0) {
                        goto LABEL_358;
                      }
                      break;
                    case 3u:
LABEL_313:
                      *(_DWORD *)uint64_t v97 = LODWORD(v164);
                      *(_WORD *)(v97 + 4) = 0;
                      if ((*((unsigned char *)v38 + 10) & 0x20) != 0) {
                        goto LABEL_358;
                      }
                      break;
                    case 4u:
LABEL_315:
                      *(void *)uint64_t v97 = v98 | *(void *)&v164;
                      if ((*((unsigned char *)v38 + 10) & 0x20) != 0) {
                        goto LABEL_358;
                      }
                      break;
                    case 5u:
                    case 6u:
                      goto LABEL_289;
                    default:
                      goto LABEL_357;
                  }
                  goto LABEL_21;
                case 2:
                  if (v103 - 5 < 2)
                  {
                    *(void *)uint64_t v97 = *(void *)&v164 | (v163 << 32);
                    if ((*((unsigned char *)v38 + 10) & 0x20) == 0) {
                      goto LABEL_21;
                    }
                  }
                  else if (v103 == 4)
                  {
                    *(void *)uint64_t v97 = *(void *)&v164 | (v163 << 32) | v98;
                    if ((*((unsigned char *)v38 + 10) & 0x20) == 0) {
                      goto LABEL_21;
                    }
                  }
                  else
                  {
                    if (v103 != 3) {
                      goto LABEL_357;
                    }
                    *(_DWORD *)uint64_t v97 = LODWORD(v164);
                    *(_WORD *)(v97 + 4) = v163;
                    if ((*((unsigned char *)v38 + 10) & 0x20) == 0) {
                      goto LABEL_21;
                    }
                  }
                  break;
                case 3:
LABEL_289:
                  *(double *)uint64_t v97 = v164;
                  if ((*((unsigned char *)v38 + 10) & 0x20) != 0) {
                    goto LABEL_358;
                  }
                  goto LABEL_21;
                default:
                  goto LABEL_357;
              }
              break;
            case 3:
              int8x8_t v100 = (_DWORD *)(*((void *)&v168 + 1) + v41);
              switch((int)v42)
              {
                case 1:
                  *int8x8_t v100 = LODWORD(v164);
                  if (v90 < 0x10000001) {
                    goto LABEL_357;
                  }
                  v100[1] = 0;
                  if (v90 == 0x20000000) {
                    goto LABEL_357;
                  }
                  goto LABEL_279;
                case 2:
                  *int8x8_t v100 = LODWORD(v164);
                  v100[1] = v163;
                  if (v90 < 0x20000001) {
                    goto LABEL_357;
                  }
LABEL_279:
                  v100[2] = 0;
                  if (v90 == 0x40000000) {
                    goto LABEL_307;
                  }
                  if (v90 <= 0x40000000) {
                    goto LABEL_357;
                  }
                  goto LABEL_284;
                case 3:
                  *int8x8_t v100 = LODWORD(v164);
                  v100[1] = v163;
                  v100[2] = v160;
                  if (v90 >> 28 == 4)
                  {
LABEL_307:
                    v100[3] = 1;
                    if ((*((unsigned char *)v38 + 10) & 0x20) == 0) {
                      goto LABEL_21;
                    }
                  }
                  else
                  {
                    if (v90 >> 28 != 5) {
                      goto LABEL_357;
                    }
LABEL_284:
                    v100[3] = 0;
                    if ((*((unsigned char *)v38 + 10) & 0x20) == 0) {
                      goto LABEL_21;
                    }
                  }
                  break;
                case 4:
                  *int8x8_t v100 = LODWORD(v164);
                  v100[1] = v163;
                  v100[2] = v160;
                  v100[3] = v158;
                  if ((*((unsigned char *)v38 + 10) & 0x20) != 0) {
                    goto LABEL_358;
                  }
                  goto LABEL_21;
                default:
                  goto LABEL_357;
              }
              break;
            case 5:
              uint64_t result = (void *)gleLLVMStoreDataToOutFloatInDouble((uint64_t)&v168, &v167, &v166, v91);
              if ((*((unsigned char *)v38 + 10) & 0x20) != 0) {
                break;
              }
              goto LABEL_21;
            case 7:
              int v101 = v42 - 2;
              if (v42 < 2) {
                int v101 = 0;
              }
              else {
                LODWORD(v42) = 2;
              }
              if ((v39 & 0x100000) != 0) {
                LODWORD(v42) = v101;
              }
              LODWORD(v91) = v91 & 0x700003FC | (v42 << 20);
              if (v42 == 2)
              {
                v27.i64[0] = v166;
                *(_OWORD *)(*((void *)&v168 + 1) + 4 * v39) = v166;
                if ((*((unsigned char *)v38 + 10) & 0x20) == 0) {
                  goto LABEL_21;
                }
              }
              else
              {
                if (v42 != 1) {
                  goto LABEL_357;
                }
                v27.i64[0] = v166;
                *(void *)(*((void *)&v168 + 1) + 4 * v39) = v166;
                if ((*((unsigned char *)v38 + 10) & 0x20) == 0) {
                  goto LABEL_21;
                }
              }
              break;
            default:
              goto LABEL_357;
          }
LABEL_358:
          unsigned int v116 = v91 & 0xF0700000;
          if (v76)
          {
            if (v76 == 5)
            {
              int v124 = ((v116 >> 20) & 7) - 1;
              unsigned int v122 = (v91 >> 28) & 7;
              uint64_t v123 = (char *)v16 + (v46 & 0xFFFFF);
              switch(v124)
              {
                case 0:
                  v27.i32[0] = v167.i32[0];
                  *(_DWORD *)uint64_t v123 = v167.i32[0];
                  if (v122 < 2) {
                    goto LABEL_21;
                  }
                  *((_DWORD *)v123 + 1) = 0;
                  if (v122 == 4) {
                    goto LABEL_369;
                  }
                  goto LABEL_390;
                case 1:
                  v27.i64[0] = v166;
                  *(void *)uint64_t v123 = v166;
                  if (v122 != 4) {
                    goto LABEL_390;
                  }
                  goto LABEL_369;
                case 2:
                  v27.i64[0] = v166;
                  goto LABEL_393;
                case 3:
                  v27.i64[0] = v166;
                  *(_OWORD *)uint64_t v123 = v166;
                  goto LABEL_21;
                default:
                  goto LABEL_21;
              }
            }
            if (v76 == 3)
            {
              int v117 = ((v116 >> 20) & 7) - 1;
              unsigned int v118 = (v91 >> 28) & 7;
              uint64_t v119 = (_DWORD *)((char *)v16 + (v46 & 0xFFFFF));
              switch(v117)
              {
                case 0:
                  *uint64_t v119 = LODWORD(v164);
                  if (v118 >= 2)
                  {
                    v119[1] = 0;
                    if (v118 != 2) {
                      goto LABEL_375;
                    }
                  }
                  break;
                case 1:
                  *uint64_t v119 = LODWORD(v164);
                  v119[1] = v163;
                  if (v118 >= 3)
                  {
LABEL_375:
                    v119[2] = 0;
                    if (v118 == 4) {
                      goto LABEL_398;
                    }
                    if (v118 > 4) {
                      goto LABEL_380;
                    }
                  }
                  break;
                case 2:
                  *uint64_t v119 = LODWORD(v164);
                  v119[1] = v163;
                  v119[2] = v160;
                  if (v118 == 4)
                  {
LABEL_398:
                    v119[3] = 1;
                  }
                  else if (v118 == 5)
                  {
LABEL_380:
                    v119[3] = 0;
                  }
                  break;
                case 3:
                  *uint64_t v119 = LODWORD(v164);
                  v119[1] = v163;
                  v119[2] = v160;
                  v119[3] = v158;
                  break;
                default:
                  goto LABEL_21;
              }
            }
          }
          else
          {
            int v120 = ((v116 >> 20) & 7) - 1;
            int v121 = v91 & 0x70700000 | (v43 << 23) & 0x7FF00000 | ((*(_DWORD *)a6 >> 13) << 31) | v46 & 0xFFFFF;
            unsigned int v122 = (v91 >> 28) & 7;
            uint64_t v123 = (char *)v16 + (v46 & 0xFFFFF);
            switch(v120)
            {
              case 0:
                v27.i32[0] = v167.i32[0];
                *(_DWORD *)uint64_t v123 = v167.i32[0];
                if (v122 >= 2)
                {
                  *((_DWORD *)v123 + 1) = 0;
                  if ((v121 & 0x80000000) == 0) {
                    goto LABEL_383;
                  }
                  goto LABEL_368;
                }
                break;
              case 1:
                v27.i64[0] = v167.i64[0];
                *(void *)uint64_t v123 = v167.i64[0];
                if (v121 < 0)
                {
LABEL_368:
                  if (v122 == 4)
                  {
LABEL_369:
                    *((void *)v123 + 1) = 0x3F80000000000000;
                  }
                  else
                  {
LABEL_390:
                    if (v122 == 3)
                    {
                      *((_DWORD *)v123 + 2) = 0;
                    }
                    else if (v122 >= 5)
                    {
                      *((void *)v123 + 1) = 0;
                    }
                  }
                }
                else
                {
LABEL_383:
                  if (v122 >= 3)
                  {
                    *((_DWORD *)v123 + 2) = 0;
                    if (v122 == 4) {
                      goto LABEL_396;
                    }
                    if (v122 >= 5) {
                      goto LABEL_401;
                    }
                  }
                }
                break;
              case 2:
                v27.i64[0] = v167.i64[0];
LABEL_393:
                *(void *)uint64_t v123 = v27.i64[0];
                v27.i32[0] = v167.i32[2];
                *((_DWORD *)v123 + 2) = v167.i32[2];
                switch(v122)
                {
                  case 6u:
                    *((_DWORD *)v123 + 3) = v27.i32[0];
                    break;
                  case 5u:
LABEL_401:
                    *((_DWORD *)v123 + 3) = 0;
                    break;
                  case 4u:
LABEL_396:
                    *((_DWORD *)v123 + 3) = 1065353216;
                    break;
                }
                break;
              case 3:
                v27.i64[0] = v167.i64[0];
                *(float32x4_t *)uint64_t v123 = v167;
                break;
              default:
                goto LABEL_21;
            }
          }
          goto LABEL_21;
        }
LABEL_357:
        if ((*((unsigned char *)v38 + 10) & 0x20) != 0) {
          goto LABEL_358;
        }
LABEL_21:
        v36 += 8;
        if (v37 == v36)
        {
          unint64_t v17 = *a6;
          uint64_t v10 = v161;
          goto LABEL_449;
        }
      }
      unint64_t v44 = *a6;
      uint64_t v45 = *a6 & 0x700;
      if (v45 == 1024)
      {
        if (v40)
        {
          if (v40 == 6) {
            unsigned int v46 = 48;
          }
          else {
            unsigned int v46 = 16 * v40 + 96;
          }
        }
        else
        {
          unsigned int v46 = 64;
        }
      }
      else
      {
        if ((v39 & 0xBC000) == 0 && (v44 & 0x1000000000) == 0)
        {
          if ((v39 & 0x700) != 0x400)
          {
            v167.f32[0] = a7;
            if (v42 < 2 || (v167.i32[1] = v14, v42 == 2) || (v167.f32[2] = a9, v42 != 4))
            {
              int v76 = 0;
            }
            else
            {
              int v76 = 0;
              v167.f32[3] = a10;
            }
            unsigned int v46 = -1;
            goto LABEL_235;
          }
          unsigned int v46 = -1;
          goto LABEL_103;
        }
        BOOL v57 = v40 > 0xF;
        int v58 = 32 * v40 + 8176;
        int v59 = 16 * v40 + 8432;
        if (v57) {
          unsigned int v46 = v58;
        }
        else {
          unsigned int v46 = v59;
        }
      }
      if ((v39 & 0x700) != 0x400)
      {
        if ((v44 & 0x2000) == 0)
        {
          if (v45 == 1024) {
            uint64_t v64 = (unsigned __int8 *)(a3 + v46);
          }
          else {
            uint64_t v64 = (unsigned __int8 *)v16 + v46;
          }
          v27.i32[0] = *(_DWORD *)v64;
          v167.i32[0] = *(_DWORD *)v64;
          if (v42 < 2
            || (v27.i32[0] = *((_DWORD *)v64 + 1), v167.i32[1] = v27.i32[0], v42 == 2)
            || (v27.i32[0] = *((_DWORD *)v64 + 2), v167.i32[2] = v27.i32[0], v42 != 4))
          {
LABEL_234:
            int v76 = 0;
          }
          else
          {
            int v76 = 0;
LABEL_147:
            v27.i32[0] = *((_DWORD *)v64 + 3);
            v167.i32[3] = v27.i32[0];
          }
          goto LABEL_235;
        }
        if (v45 == 1024)
        {
          if (!v42) {
            goto LABEL_188;
          }
          unsigned int v82 = (void *)(a3 + v46);
          if (v42 != 1)
          {
LABEL_122:
            v27.i64[0] = *v82;
            *(void *)&long long v166 = *v82;
            if (v42 == 4)
            {
              v27.i64[0] = v82[1];
              *((void *)&v166 + 1) = v27.i64[0];
            }
            else if (v42 == 3)
            {
              v27.i32[0] = *((_DWORD *)v82 + 2);
              v167.i32[2] = v27.i32[0];
            }
LABEL_188:
            int v76 = 5;
LABEL_235:
            LODWORD(v43) = 6;
            goto LABEL_236;
          }
        }
        else
        {
          if (!v42) {
            goto LABEL_188;
          }
          unsigned int v82 = (void *)((char *)v16 + v46);
          if (v42 != 1) {
            goto LABEL_122;
          }
        }
        v27.i32[0] = *(_DWORD *)v82;
        v167.i32[0] = *(_DWORD *)v82;
        goto LABEL_188;
      }
LABEL_103:
      int v77 = v46 & 0xFFFFF;
      int v78 = v42 - 2;
      if (v42 >= 2) {
        int v79 = 2;
      }
      else {
        int v79 = BYTE4(v39) & 7;
      }
      if (v42 < 2) {
        int v78 = 0;
      }
      if ((v39 & 0x100000) != 0) {
        int v77 = v46 + 16;
      }
      else {
        int v78 = v79;
      }
      int v80 = v77 | (v78 << 20);
      BOOL v81 = (void *)((char *)v16 + (*(void *)&v80 & 0xFFFFFLL));
      v27.i64[0] = *v81;
      *(void *)&long long v166 = *v81;
      if ((*(void *)&v80 & 0x600000) != 0)
      {
        v27.i64[0] = v81[1];
        *((void *)&v166 + 1) = v27.i64[0];
      }
      LODWORD(v43) = 7;
LABEL_114:
      int v76 = 7;
      goto LABEL_236;
    }
LABEL_449:
    if ((v17 & 0x400000000) != 0)
    {
      if ((v17 & 0x800) == 0) {
        return result;
      }
      uint64_t v33 = *((void *)&v168 + 1);
    }
    else
    {
      uint64_t v33 = *((void *)&v168 + 1) + ((v17 >> 14) & 0x3FC);
      *((void *)&v168 + 1) = v33;
      if ((v17 & 0x800) == 0) {
        break;
      }
    }
    ++v10;
  }
  while (v33 != (void)v169);
  v16[3251] = v33;
  return result;
}

uint64_t gleLLVMStoreDataToOutFloatInDouble(uint64_t result, _DWORD *a2, void *a3, unsigned int a4)
{
  unsigned int v4 = (a4 >> 28) & 7;
  int8x16_t v5 = (_DWORD *)(*(void *)(result + 8) + (*(void *)&a4 & 0xFFFFFLL));
  switch((a4 >> 20) & 7)
  {
    case 1u:
      _DWORD *v5 = *a2;
      if (v4 >= 2)
      {
        v5[1] = 0;
        if (v4 == 4) {
          goto LABEL_14;
        }
        if (v4 == 3)
        {
          v5[2] = 0;
        }
        else if (v4 >= 5)
        {
          *((void *)v5 + 1) = 0;
        }
      }
      break;
    case 2u:
      *(void *)int8x16_t v5 = *a3;
      if (v4 == 4)
      {
LABEL_14:
        *((void *)v5 + 1) = 0x3F80000000000000;
      }
      else if (v4 == 3)
      {
        v5[2] = 0;
      }
      else if (v4 >= 5)
      {
        *((void *)v5 + 1) = 0;
      }
      break;
    case 3u:
      *(void *)int8x16_t v5 = *a3;
      v5[2] = a2[2];
      switch(v4)
      {
        case 6u:
          v5[3] = a2[2];
          break;
        case 5u:
          v5[3] = 0;
          break;
        case 4u:
          v5[3] = 1065353216;
          break;
      }
      break;
    case 4u:
      *(void *)int8x16_t v5 = *a3;
      *((void *)v5 + 1) = a3[1];
      break;
    default:
      return result;
  }
  return result;
}

uint64_t gleLLVMStoreDataToOutFloatInFloat(uint64_t result, _DWORD *a2, unsigned int a3)
{
  unsigned int v3 = (a3 >> 28) & 7;
  unsigned int v4 = (_DWORD *)(*(void *)(result + 8) + (*(void *)&a3 & 0xFFFFFLL));
  switch((a3 >> 20) & 7)
  {
    case 1u:
      *unsigned int v4 = *a2;
      if (v3 >= 2)
      {
        v4[1] = 0;
        if ((a3 & 0x80000000) == 0) {
          goto LABEL_8;
        }
        if (v3 == 4) {
          goto LABEL_28;
        }
        if (v3 == 3)
        {
          v4[2] = 0;
        }
        else if (v3 >= 5)
        {
          *((void *)v4 + 1) = 0;
        }
      }
      return result;
    case 2u:
      *unsigned int v4 = *a2;
      v4[1] = a2[1];
      if ((a3 & 0x80000000) != 0)
      {
        if (v3 == 4)
        {
LABEL_28:
          *((void *)v4 + 1) = 0x3F80000000000000;
        }
        else if (v3 == 3)
        {
          v4[2] = 0;
        }
        else if (v3 >= 5)
        {
          *((void *)v4 + 1) = 0;
        }
      }
      else
      {
LABEL_8:
        if (v3 >= 3)
        {
          v4[2] = 0;
          if (v3 == 4) {
            goto LABEL_15;
          }
          if (v3 >= 5) {
            goto LABEL_26;
          }
        }
      }
      return result;
    case 3u:
      *unsigned int v4 = *a2;
      v4[1] = a2[1];
      v4[2] = a2[2];
      switch(v3)
      {
        case 6u:
          v4[3] = a2[2];
          break;
        case 5u:
LABEL_26:
          v4[3] = 0;
          break;
        case 4u:
LABEL_15:
          v4[3] = 1065353216;
          break;
      }
      return result;
    case 4u:
      goto LABEL_17;
    case 5u:
      if (v3 >= 5)
      {
LABEL_17:
        *unsigned int v4 = *a2;
        v4[1] = a2[1];
        v4[2] = a2[2];
LABEL_18:
        v4[3] = a2[3];
        return result;
      }
      *unsigned int v4 = a2[2];
      if (v3 >= 2)
      {
        v4[1] = a2[1];
        if (v3 != 2)
        {
          v4[2] = *a2;
          if (v3 >= 4) {
            goto LABEL_18;
          }
        }
      }
      return result;
    default:
      return result;
  }
}

void *gleRunVertexSubmitARM(void *a1, double a2, int8x16_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8)
{
  v36[51] = *MEMORY[0x263EF8340];
  unint64_t v8 = *(void *)a8;
  unsigned int v9 = (*(void *)a8 >> 8) & 7;
  int v10 = *(void *)a8;
  if (!*(void *)a8)
  {
    LODWORD(v13) = 0;
LABEL_45:
    int v34 = &loc_227D9A09C;
    switch(v9)
    {
      case 5u:
        int v34 = &loc_227D99880;
        break;
      case 3u:
        v36[3 * v13 + 1] = &loc_227D99864;
        JUMPOUT(0x227D99864);
      case 1u:
        v36[3 * v13 + 1] = &loc_227D99848;
        JUMPOUT(0x227D99848);
    }
    v36[3 * v13 + 1] = v34;
    __asm { BRAA            X8, X17 }
  }
  unint64_t v11 = 0;
  unsigned int v12 = 4 * *(_DWORD *)(a8 + 8) + ((v8 >> 14) & 0x3FC);
  uint64_t v13 = *(void *)a8;
  unsigned __int32 v14 = (_DWORD *)(a8 + 16);
  uint64_t v15 = v36;
  while (1)
  {
    int v17 = v12;
    if (v11 < (v10 - 1)) {
      int v17 = 4 * *v14;
    }
    unint64_t v18 = *((void *)v14 - 1);
    uint64_t v19 = (BYTE4(v18) & 7u) - 1;
    unsigned int v20 = (v18 >> 11) & 7;
    unsigned int v21 = (v18 >> 14) & 0x3F;
    int v22 = 4 * v18;
    uint64_t v23 = (v18 >> 35) & 0x1F;
    int v24 = *((_DWORD *)&unk_26DC2E800 + 32 * v23 + 8 * v19 + 6);
    unint64_t v25 = v18 >> 40;
    *((_DWORD *)v15 + 4) = v18 >> 40;
    *((_DWORD *)v15 + 5) = v17 - v22;
    if (((v18 >> 14) & 0x3D | 2) != 0x2F
      && (dword_227DC2818[v23] != ((v18 >> 8) & 7) || v20 > v19))
    {
      break;
    }
    int v27 = v24 + v22;
    if (v20 >= v19) {
      uint64_t v19 = v19;
    }
    else {
      uint64_t v19 = v20;
    }
    if ((v18 & 0xF800000000) == 0xA000000000)
    {
      if (v21 == 45)
      {
        *uint64_t v15 = 0;
        if (v9 <= 5 && ((1 << v9) & 0x2A) != 0) {
          v15[1] = &loc_227D9989C;
        }
        else {
          v15[1] = &loc_227D998BC;
        }
        goto LABEL_5;
      }
      if (v21 != 47)
      {
        if ((v8 & 0x1000000000) != 0 || (v18 & 0xBC000) != 0)
        {
          if (v21 > 0xF) {
            int v31 = 32 * v21 + 8176;
          }
          else {
            int v31 = 16 * v21 + 8432;
          }
        }
        else
        {
          int v31 = -1;
        }
        *uint64_t v15 = (char *)a1 + v31;
LABEL_40:
        uint64_t v32 = (char *)&unk_26DC2E800 + 128 * v23;
LABEL_41:
        uint64_t v33 = &v32[32 * v19];
        if (v27 == v17) {
          uint64_t v16 = *((void *)v33 + 2);
        }
        else {
          uint64_t v16 = *((void *)v33 + 1);
        }
        goto LABEL_4;
      }
      uint64_t v16 = *((void *)&unk_26DC2E800 + 4 * v19 + 66);
      *uint64_t v15 = a1 + 1151;
    }
    else
    {
      uint64_t v28 = *(void *)(8 * v21 + a1[3298] + 960);
      *uint64_t v15 = v28;
      BOOL v29 = (v18 & 0x30000000000) != 0;
      if ((v28 & 3) != 0) {
        BOOL v29 = 1;
      }
      if ((v8 & 0x700) == 0x200)
      {
        *uint64_t v15 = v28 + ((a7 + a6) * v25);
        if (!v29) {
          goto LABEL_40;
        }
        unint64_t v30 = (char *)&unk_26DC2E800 + 128 * v23;
      }
      else
      {
        if (!v29)
        {
          uint64_t v32 = (char *)&unk_26DC2F280 + 128 * v23;
          goto LABEL_41;
        }
        unint64_t v30 = (char *)&unk_26DC2F280 + 128 * v23;
      }
      uint64_t v16 = *(void *)&v30[32 * v19];
    }
LABEL_4:
    v15[1] = v16;
LABEL_5:
    ++v11;
    v15 += 3;
    v14 += 2;
    if (v13 == v11) {
      goto LABEL_45;
    }
  }
  a3.i64[0] = 0;
  return gleRunVertexSubmitImmediate(a1, 0, 0, a6, a7, (unint64_t *)a8, 0.0, a3, 0.0, 0.0);
}

uint64_t gleSetGPTransformFuncAll(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (int *)(a1 + 26104);
  if ((*(_DWORD *)(a1 + 24864) & 0xFFFFFFE8) != 8)
  {
    int v8 = 64;
    goto LABEL_15;
  }
  int v7 = (*(unsigned char *)(a1 + 15205) != 0) << 8;
  if (*(unsigned char *)(a1 + 24749))
  {
    int v8 = v7 | 0x20;
    if (!*(unsigned char *)(a1 + 20494)) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  int v8 = v7 | (*(unsigned char *)(a1 + 12518) != 0);
  if (*(_WORD *)(a1 + 15302) == 4353) {
LABEL_4:
  }
    v8 |= 2u;
LABEL_5:
  int v9 = *(unsigned __int8 *)(a1 + 29592);
  if ((v9 & 0x90) == 0x10)
  {
    switch(v9 & 3)
    {
      case 1:
        unsigned int v10 = v8 & 0xFFFFFFF3 | 4;
        break;
      case 2:
        unsigned int v10 = v8 & 0xFFFFFFF3 | 8;
        break;
      case 3:
        unsigned int v10 = v8 | 0xC;
        break;
      default:
        unsigned int v10 = v8 & 0xFFFFFFF3;
        break;
    }
    int v8 = v10 | (32 * v9) & 0x80;
  }
LABEL_15:
  *(void *)(a1 + 24352) = gleLLVMGPTransform;
  *(void *)(a1 + 24360) = gleLLVMGPTransform;
  uint64_t v11 = *(void *)(a1 + 24768);
  uint64_t v12 = v11;
  if (!v11) {
    uint64_t v12 = *(void *)(*(void *)(a1 + 24776) + 64);
  }
  int v13 = (36 * *(_DWORD *)(v12 + 3892)) | 3;
  int v14 = (672 * v13) | 8;
  if (*v6 < v14)
  {
    uint64_t v15 = *(void **)(a1 + 26056);
    if (v15) {
      free(v15);
    }
    uint64_t v16 = (char *)malloc_type_malloc(v14, 0x577B5147uLL);
    if (!v16) {
      abort();
    }
    *(void *)(a1 + 26056) = v16;
    *int v6 = v14;
    int v17 = &v16[640 * v13];
    *(void *)(a1 + 26064) = v17;
    uint64_t v18 = 8 * v13;
    uint64_t v19 = &v17[v18];
    *(void *)(a1 + 26072) = v19;
    *(void *)(a1 + 26080) = &v19[v18];
    *(void *)(a1 + 26112) = 0;
    uint64_t v11 = *(void *)(a1 + 24768);
  }
  if (!v11) {
    uint64_t v11 = *(void *)(*(void *)(a1 + 24776) + 64);
  }
  if (*(_DWORD *)(v11 + 3780) | *(_DWORD *)(v11 + 3748)) {
    gleResetUniformBufferCachePointers(a1, v11 + 40, 3);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  *(void *)(a1 + 24384) = *(void *)(v11 + 3752);
  if (!*(void *)(v11 + 2792)) {
    glePrepareShaderForEmulation(a1, v11 + 2280);
  }
  gleUpdateShaderTexData(a1, (void *)(a1 + 27864), v11 + 2280);
  uint64_t v20 = *(void *)(v11 + 2792);
  uint64_t v21 = *(void *)(a1 + 24376);
  if (v21)
  {
    __int16 v22 = *(_WORD *)(v21 + 2) - 1;
    *(_WORD *)(v21 + 2) = v22;
    if (!v22) {
      MEMORY[0x22A686880]();
    }
  }
  ++*(_WORD *)(v20 + 2);
  *(void *)(a1 + 24376) = v20;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  v6[436] = v8;
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 24352);

  return v23(a1, a2, a3);
}

uint64_t gleLLVMGPTransform(int32x2_t *a1, uint64_t a2, int a3)
{
  unsigned int v4 = a1 + 3108;
  if (a1[3096])
  {
    int32x2_t v6 = a1[3096];
    if ((v4->i32[0] & 4) != 0) {
      goto LABEL_7;
    }
LABEL_5:
    int64x2_t v40 = 0u;
    int64x2_t v38 = 0u;
    int64x2_t v39 = 0u;
    int v7 = a1[3582].i16[3];
    goto LABEL_14;
  }
  if ((v4->i32[0] & 4) == 0) {
    goto LABEL_5;
  }
  int32x2_t v6 = *(int32x2_t *)(*(void *)&a1[3097] + 56);
LABEL_7:
  int64x2_t v40 = 0u;
  int64x2_t v38 = 0u;
  int64x2_t v39 = 0u;
  if (*(unsigned char *)(*(void *)&v6 + 3888))
  {
LABEL_8:
    int v7 = 0;
    v38.i64[0] = a2;
LABEL_40:
    int v9 = a3;
    goto LABEL_41;
  }
  int v8 = *(unsigned __int16 *)(*(void *)&v6 + 3882);
  if (v8 == 7) {
    int v8 = 4;
  }
  if (v8 == 36474) {
    int v7 = 1;
  }
  else {
    int v7 = v8;
  }
LABEL_14:
  int v9 = 0;
  switch(v7)
  {
    case 0:
      goto LABEL_8;
    case 1:
      if (a3 >= 0) {
        int v10 = a3;
      }
      else {
        int v10 = a3 + 1;
      }
      a3 = v10 >> 1;
      v38.i64[0] = a2;
      v38.i64[1] = a2 + 640;
      int v7 = 1;
      goto LABEL_40;
    case 2:
    case 3:
      --a3;
      v38.i64[0] = a2;
      v38.i64[1] = a2 + 640;
      goto LABEL_40;
    case 4:
      a3 /= 3;
      v38.i64[0] = a2;
      v38.i64[1] = a2 + 640;
      v39.i64[0] = a2 + 1280;
      int v7 = 4;
      goto LABEL_40;
    case 5:
      if (a3 <= 2) {
        a3 = 0;
      }
      else {
        a3 -= 2;
      }
      v38.i64[0] = a2;
      v38.i64[1] = a2 + 640;
      v39.i64[0] = a2 + 1280;
      int v7 = 5;
      goto LABEL_40;
    case 6:
      if (a3 <= 2) {
        a3 = 0;
      }
      else {
        a3 -= 2;
      }
      v38.i64[0] = a2;
      v38.i64[1] = a2 + 640;
      v39.i64[0] = a2 + 1280;
      int v7 = 6;
      goto LABEL_40;
    case 10:
      a3 /= 4;
      v38.i64[0] = a2;
      v38.i64[1] = a2 + 640;
      v39.i64[0] = a2 + 1280;
      v39.i64[1] = a2 + 1920;
      int v7 = 10;
      goto LABEL_40;
    case 11:
      if (a3 <= 3) {
        a3 = 0;
      }
      else {
        a3 -= 3;
      }
      v38.i64[0] = a2;
      v38.i64[1] = a2 + 640;
      v39.i64[0] = a2 + 1280;
      v39.i64[1] = a2 + 1920;
      int v7 = 11;
      goto LABEL_40;
    case 12:
      v38.i64[0] = a2;
      v38.i64[1] = a2 + 640;
      a3 /= 6;
      v39.i64[0] = a2 + 1280;
      v39.i64[1] = a2 + 1920;
      v40.i64[0] = a2 + 2560;
      v40.i64[1] = a2 + 3200;
      int v7 = 12;
      goto LABEL_40;
    case 13:
      int v11 = a3 - 4;
      if (a3 < 4) {
        int v11 = a3 - 3;
      }
      BOOL v12 = a3 <= 7;
      a3 = v11 >> 1;
      v38.i64[0] = a2;
      v38.i64[1] = a2 + 640;
      uint64_t v13 = 3200;
      if (!v12) {
        uint64_t v13 = 3840;
      }
      v39.i64[0] = a2 + 1280;
      v39.i64[1] = a2 + v13;
      v40.i64[0] = a2 + 2560;
      v40.i64[1] = a2 + 1920;
      int v7 = 13;
      goto LABEL_40;
    default:
      break;
  }
LABEL_41:
  int32x2_t v14 = a1[3257];
  uint64_t v15 = (int32x2_t *)a1[3260];
  a1[3264] = 0;
  *uint64_t v15 = v14;
  if (v9 < 1)
  {
    return (unsigned __int16)-256;
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v32 = 1280 * (v9 - 2);
    uint64_t v17 = 1280 * v9;
    uint64_t v31 = a2 + 4480;
    uint64_t v30 = a2 + 5120;
    unsigned __int16 v18 = -256;
    char v19 = 1;
    int64x2_t v37 = vdupq_n_s64(0x280uLL);
    int64x2_t v34 = vdupq_n_s64(0xA00uLL);
    int64x2_t v35 = vdupq_n_s64(0x780uLL);
    int64x2_t v33 = vdupq_n_s64(0xF00uLL);
    do
    {
      __int16 v20 = glvmInterpretGPTransformPrimitive();
      a1[3264] = vadd_s32(a1[3264], 0);
      ++v4[476].i32[0];
      switch(v7)
      {
        case 0:
          v38.i64[0] += 640;
          break;
        case 1:
          int64x2_t v21 = v38;
          int64x2_t v22 = vdupq_n_s64(0x500uLL);
          goto LABEL_49;
        case 2:
        case 3:
          int64x2_t v21 = v38;
          int64x2_t v22 = v37;
LABEL_49:
          int64x2_t v38 = vaddq_s64(v21, v22);
          break;
        case 4:
          int64x2_t v38 = vaddq_s64(v38, v35);
          v39.i64[0] += 1920;
          break;
        case 5:
          if (v19) {
            v38.i64[0] = v39.i64[0];
          }
          else {
            v38.i64[1] = v39.i64[0];
          }
          v39.i64[0] += 640;
          break;
        case 6:
          v38.i64[1] = v39.i64[0];
          v39.i64[0] += 640;
          break;
        case 10:
          int64x2_t v38 = vaddq_s64(v38, v34);
          int64x2_t v39 = vaddq_s64(v39, v34);
          break;
        case 11:
          int64x2_t v23 = vdupq_n_s64(0x280uLL);
          int64x2_t v38 = vaddq_s64(v38, v23);
          int64x2_t v39 = vaddq_s64(v39, v23);
          break;
        case 12:
          int64x2_t v38 = vaddq_s64(v38, v33);
          int64x2_t v39 = vaddq_s64(v39, v33);
          int64x2_t v40 = vaddq_s64(v40, v33);
          break;
        case 13:
          uint64_t v24 = a2 + v16;
          if (v19)
          {
            v38.i64[0] = v24 + 2560;
            v38.i64[1] = a2 + v16;
            v39.i64[0] = a2 + v16 + 1280;
            v39.i64[1] = v24 + 3200;
            v40.i64[0] = v24 + 3840;
            if (v32 == v16) {
              uint64_t v28 = v31;
            }
            else {
              uint64_t v28 = v30;
            }
            uint64_t v27 = v28 + v16;
          }
          else
          {
            v38.i64[0] = a2 + v16 + 1280;
            v38.i64[1] = a2 + v16;
            uint64_t v25 = 3840;
            if (v32 == v16) {
              uint64_t v25 = 3200;
            }
            v39.i64[0] = v24 + 2560;
            v39.i64[1] = v24 + v25 + 1280;
            uint64_t v26 = v24 + 3840;
            uint64_t v27 = v24 + 3200;
            v40.i64[0] = v26;
          }
          v40.i64[1] = v27;
          break;
        default:
          break;
      }
      unsigned __int16 v18 = (v20 | v18) & (v20 | 0xFF);
      v16 += 1280;
      ++v19;
    }
    while (v17 != v16);
  }
  return v18;
}

uint64_t gleSetEyeInterpFunc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  gleBuildInterpolateFunc(a1, 0);
  int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(a1 + 27880);
  v11.n128_f32[0] = a5;

  return v10(a1, a2, a3, a4, v11);
}

uint64_t gleSetFlatCopyFunc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  gleBuildInterpolateFunc(a1, 2);
  int32x2_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 27912);

  return v6(a1, a2, a3);
}

float32x4_t gleLLVMVecInterpolateEye(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, double a5)
{
  int v10 = *(_DWORD *)(a1 + 27960);
  int v9 = *(_DWORD *)(a1 + 27964);
  uint64_t v12 = *(unsigned int *)(a1 + 27972);
  uint64_t v11 = *(unsigned int *)(a1 + 27976);
  unsigned __int32 v13 = *(_DWORD *)(a2 + 28);
  float32x4_t v14 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
  a4[1].i32[3] = v13;
  float32x4_t v15 = *(float32x4_t *)(a2 + 80);
  float32x4_t v17 = vsubq_f32(a3[5], v15);
  float32x4_t v16 = vmlaq_n_f32(v15, v17, *(float *)&a5);
  a4[5] = v16;
  v17.f32[0] = -v16.f32[3];
  if (v16.f32[3] >= v16.f32[0]) {
    int v18 = 16 * (v16.f32[0] < (float)-v16.f32[3]);
  }
  else {
    int v18 = (16 * (v16.f32[0] < (float)-v16.f32[3])) | 0x20;
  }
  if (v16.f32[1] < v17.f32[0]) {
    v18 |= 4u;
  }
  if (v16.f32[1] > v16.f32[3]) {
    v18 |= 8u;
  }
  int v19 = v18 | (v16.f32[2] < v17.f32[0]);
  if (v16.f32[2] > v16.f32[3]) {
    v19 |= 2u;
  }
  if ((v10 & 4) == 0) {
    int v18 = v19;
  }
  a4->i32[0] = *(_DWORD *)a2 & 0xFF00FF | (v18 << 24) | 0x100;
  if (!v18)
  {
    v17.i32[0] = *(_DWORD *)(a1 + 292);
    if (v16.f32[3] == v17.f32[0])
    {
      int32x4_t v20 = vdupq_laneq_s32((int32x4_t)v16, 3);
    }
    else
    {
      v17.f32[0] = v17.f32[0] / v16.f32[3];
      int32x4_t v20 = vdupq_lane_s32(*(int32x2_t *)v17.f32, 0);
      float32x4_t v16 = vmulq_n_f32(v16, v17.f32[0]);
    }
    float32x4_t v21 = vmlaq_f32(*(float32x4_t *)(a1 + 9216 + 144 * v13 + 48), v16, *(float32x4_t *)(a1 + 9216 + 144 * v13 + 32));
    v21.i32[3] = v20.i32[3];
    a4[4] = v21;
  }
  float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 96), vsubq_f32(a3[6], *(float32x4_t *)(a2 + 96)), v14);
  a4[6] = result;
  if ((v10 & 2) != 0)
  {
    if ((v10 & 0x400) != 0)
    {
      float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 112), vsubq_f32(a3[7], *(float32x4_t *)(a2 + 112)), v14);
      a4[7] = result;
    }
    if ((v10 & 0x1000) != 0)
    {
      uint64_t v24 = *(float32x4_t **)(a2 + 32);
      uint64_t v25 = (float32x4_t *)a3[2].i64[0];
      if (v24 != v25)
      {
        uint64_t v26 = *(float32x4_t **)(a2 + 32);
        if (v24[31].i32[1] == 1)
        {
          uint64_t v27 = *(void *)(a1 + 1424);
          uint64_t v26 = *(float32x4_t **)(a1 + 1440);
          if (v26)
          {
            *(void *)(a1 + 1440) = v26[32].i64[0];
          }
          else
          {
            char v36 = v9;
            float32x4_t v37 = v14;
            uint64_t v26 = (float32x4_t *)(*(uint64_t (**)(void))(a1 + 1488))();
            float32x4_t v14 = v37;
            LOBYTE(v9) = v36;
          }
          uint64_t v28 = *(void *)(v27 + 512);
          v26[31].i64[1] = v27;
          v26[32].i64[0] = v28;
          *(void *)(v28 + 504) = v26;
          *(void *)(v27 + 512) = v26;
          v26[31].i64[0] = 0x200003F3FLL;
        }
        *uint64_t v26 = vmlaq_f32(*v24, vsubq_f32(*v25, *v24), v14);
        v26[1] = vmlaq_f32(v24[1], vsubq_f32(v25[1], v24[1]), v14);
        v26[2] = vmlaq_f32(v24[2], vsubq_f32(v25[2], v24[2]), v14);
        v26[3] = vmlaq_f32(v24[3], vsubq_f32(v25[3], v24[3]), v14);
        float32x4_t result = vmlaq_f32(v24[4], vsubq_f32(v25[4], v24[4]), v14);
        v26[4] = result;
        uint64_t v24 = v26;
      }
      a4[2].i64[0] = (uint64_t)v24;
      if ((v10 & 0x2000) != 0)
      {
        int64x2_t v23 = *(float32x4_t **)(a2 + 40);
        BOOL v29 = (float32x4_t *)a3[2].i64[1];
        if (v23 != v29)
        {
          uint64_t v30 = *(float32x4_t **)(a2 + 40);
          if (v23[31].i32[1] == 1)
          {
            uint64_t v31 = *(void *)(a1 + 1432);
            uint64_t v30 = *(float32x4_t **)(a1 + 1440);
            if (v30)
            {
              *(void *)(a1 + 1440) = v30[32].i64[0];
            }
            else
            {
              uint64_t v32 = *(uint64_t (**)(void))(a1 + 1488);
              char v33 = v9;
              float32x4_t v38 = v14;
              uint64_t v30 = (float32x4_t *)v32();
              float32x4_t v14 = v38;
              LOBYTE(v9) = v33;
            }
            uint64_t v34 = *(void *)(v31 + 512);
            v30[31].i64[1] = v31;
            v30[32].i64[0] = v34;
            *(void *)(v34 + 504) = v30;
            *(void *)(v31 + 512) = v30;
            v30[31].i64[0] = 0x200003F3FLL;
          }
          *uint64_t v30 = vmlaq_f32(*v23, vsubq_f32(*v29, *v23), v14);
          v30[1] = vmlaq_f32(v23[1], vsubq_f32(v29[1], v23[1]), v14);
          v30[2] = vmlaq_f32(v23[2], vsubq_f32(v29[2], v23[2]), v14);
          v30[3] = vmlaq_f32(v23[3], vsubq_f32(v29[3], v23[3]), v14);
          float32x4_t result = vmlaq_f32(v23[4], vsubq_f32(v29[4], v23[4]), v14);
          v30[4] = result;
          int64x2_t v23 = v30;
        }
        goto LABEL_41;
      }
    }
  }
  else
  {
    if ((v10 & 0x400) != 0)
    {
      float32x4_t result = *(float32x4_t *)(a2 + 112);
      a4[7] = result;
    }
    if ((v10 & 0x1000) != 0)
    {
      a4[2].i64[0] = *(void *)(a2 + 32);
      if ((v10 & 0x2000) != 0)
      {
        int64x2_t v23 = *(float32x4_t **)(a2 + 40);
LABEL_41:
        a4[2].i64[1] = (uint64_t)v23;
      }
    }
  }
  uint64_t v35 = v12 | (v11 << 32);
  if (!v35) {
    goto LABEL_106;
  }
  if (v11)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 96), vsubq_f32(a3[6], *(float32x4_t *)(a2 + 96)), v14);
    a4[6] = result;
  }
  if ((v35 & 0x200000000 | 2) != 2)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 112), vsubq_f32(a3[7], *(float32x4_t *)(a2 + 112)), v14);
    a4[7] = result;
  }
  if ((v35 & 0x400000000 | 4) != 4)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 128), vsubq_f32(a3[8], *(float32x4_t *)(a2 + 128)), v14);
    a4[8] = result;
  }
  if ((v35 & 0x800000000 | 8) != 8)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 144), vsubq_f32(a3[9], *(float32x4_t *)(a2 + 144)), v14);
    a4[9] = result;
  }
  if ((v35 & 0x1000000000 | 0x10) != 0x10)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 160), vsubq_f32(a3[10], *(float32x4_t *)(a2 + 160)), v14);
    a4[10] = result;
  }
  if ((v35 & 0x2000000000 | 0x20) != 0x20)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 176), vsubq_f32(a3[11], *(float32x4_t *)(a2 + 176)), v14);
    a4[11] = result;
  }
  if ((v35 & 0x4000000000 | 0x40) != 0x40)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 192), vsubq_f32(a3[12], *(float32x4_t *)(a2 + 192)), v14);
    a4[12] = result;
  }
  if ((v35 & 0x8000000000 | 0x80) != 0x80)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 208), vsubq_f32(a3[13], *(float32x4_t *)(a2 + 208)), v14);
    a4[13] = result;
  }
  if ((v35 & 0x10000000000 | 0x100) != 0x100)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 224), vsubq_f32(a3[14], *(float32x4_t *)(a2 + 224)), v14);
    a4[14] = result;
  }
  if ((v35 & 0x20000000000 | 0x200) != 0x200)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 240), vsubq_f32(a3[15], *(float32x4_t *)(a2 + 240)), v14);
    a4[15] = result;
  }
  if ((v35 & 0x40000000000 | 0x400) != 0x400)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 256), vsubq_f32(a3[16], *(float32x4_t *)(a2 + 256)), v14);
    a4[16] = result;
  }
  if ((v35 & 0x80000000000 | 0x800) != 0x800)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 272), vsubq_f32(a3[17], *(float32x4_t *)(a2 + 272)), v14);
    a4[17] = result;
  }
  if ((v35 & 0x100000000000 | 0x1000) != 0x1000)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 288), vsubq_f32(a3[18], *(float32x4_t *)(a2 + 288)), v14);
    a4[18] = result;
  }
  if ((v35 & 0x200000000000 | 0x2000) != 0x2000)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 304), vsubq_f32(a3[19], *(float32x4_t *)(a2 + 304)), v14);
    a4[19] = result;
  }
  if ((v35 & 0x400000000000 | 0x4000) != 0x4000)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 320), vsubq_f32(a3[20], *(float32x4_t *)(a2 + 320)), v14);
    a4[20] = result;
  }
  if ((v35 & 0x800000000000 | 0x8000) != 0x8000)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 336), vsubq_f32(a3[21], *(float32x4_t *)(a2 + 336)), v14);
    a4[21] = result;
  }
  if ((v35 & 0x1000000000000 | 0x10000) != 0x10000)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 352), vsubq_f32(a3[22], *(float32x4_t *)(a2 + 352)), v14);
    a4[22] = result;
  }
  if ((v35 & 0x2000000000000 | 0x20000) != 0x20000)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 368), vsubq_f32(a3[23], *(float32x4_t *)(a2 + 368)), v14);
    a4[23] = result;
  }
  if ((v35 & 0x4000000000000 | 0x40000) != 0x40000)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 384), vsubq_f32(a3[24], *(float32x4_t *)(a2 + 384)), v14);
    a4[24] = result;
  }
  if ((v35 & 0x8000000000000 | 0x80000) != 0x80000)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 400), vsubq_f32(a3[25], *(float32x4_t *)(a2 + 400)), v14);
    a4[25] = result;
  }
  if ((v35 & 0x10000000000000 | 0x100000) != 0x100000)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 416), vsubq_f32(a3[26], *(float32x4_t *)(a2 + 416)), v14);
    a4[26] = result;
  }
  if ((v35 & 0x20000000000000 | 0x200000) != 0x200000)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 432), vsubq_f32(a3[27], *(float32x4_t *)(a2 + 432)), v14);
    a4[27] = result;
  }
  if ((v35 & 0x40000000000000 | 0x400000) != 0x400000)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 448), vsubq_f32(a3[28], *(float32x4_t *)(a2 + 448)), v14);
    a4[28] = result;
  }
  if ((v35 & 0x80000000000000 | 0x800000) != 0x800000)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 464), vsubq_f32(a3[29], *(float32x4_t *)(a2 + 464)), v14);
    a4[29] = result;
  }
  if ((v35 & 0x100000000000000 | 0x1000000) != 0x1000000)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 480), vsubq_f32(a3[30], *(float32x4_t *)(a2 + 480)), v14);
    a4[30] = result;
  }
  if ((v35 & 0x200000000000000 | 0x2000000) != 0x2000000)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 496), vsubq_f32(a3[31], *(float32x4_t *)(a2 + 496)), v14);
    a4[31] = result;
  }
  if ((v35 & 0x400000000000000 | 0x4000000) != 0x4000000)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 512), vsubq_f32(a3[32], *(float32x4_t *)(a2 + 512)), v14);
    a4[32] = result;
  }
  if ((v35 & 0x800000000000000 | 0x8000000) != 0x8000000)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 528), vsubq_f32(a3[33], *(float32x4_t *)(a2 + 528)), v14);
    a4[33] = result;
  }
  if ((v35 & 0x1000000000000000 | 0x10000000) != 0x10000000)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 544), vsubq_f32(a3[34], *(float32x4_t *)(a2 + 544)), v14);
    a4[34] = result;
  }
  if ((v35 & 0x2000000000000000 | 0x20000000) != 0x20000000)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 560), vsubq_f32(a3[35], *(float32x4_t *)(a2 + 560)), v14);
    a4[35] = result;
  }
  if ((v35 & 0x4000000000000000 | 0x40000000) != 0x40000000)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 576), vsubq_f32(a3[36], *(float32x4_t *)(a2 + 576)), v14);
    a4[36] = result;
  }
  if ((v35 & 0x8000000000000000 | 0x80000000) != 0x80000000)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 592), vsubq_f32(a3[37], *(float32x4_t *)(a2 + 592)), v14);
    a4[37] = result;
    if ((v9 & 0xC0) == 0) {
      return result;
    }
  }
  else
  {
LABEL_106:
    if ((v9 & 0xC0) == 0) {
      return result;
    }
  }
  if ((v9 & 0x40) != 0)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 608), vsubq_f32(a3[38], *(float32x4_t *)(a2 + 608)), v14);
    a4[38] = result;
  }
  if ((v9 & 0x80) != 0)
  {
    float32x4_t result = vmlaq_f32(*(float32x4_t *)(a2 + 624), vsubq_f32(a3[39], *(float32x4_t *)(a2 + 624)), v14);
    a4[39] = result;
  }
  return result;
}

uint64_t gleLLVMVecInterpolateClip(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, unsigned int a5, int32x4_t a6, double a7, double a8, float32x4_t a9)
{
  int v14 = *(_DWORD *)(a1 + 27980);
  int v13 = *(_DWORD *)(a1 + 27984);
  uint64_t v15 = *(unsigned int *)(a1 + 27992);
  uint64_t v16 = *(unsigned int *)(a1 + 27996);
  unsigned int v17 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a4 + 28) = v17;
  int v18 = (float32x4_t *)(a2 + 80);
  a6.i32[0] = *(_DWORD *)(a2 + 92);
  float v19 = a3[5].f32[3];
  int32x4_t v20 = (float *)(a2 + 84);
  f32 = &a3[5].f32[1];
  if (a5 <= 8) {
    int v22 = 4;
  }
  else {
    int v22 = 16;
  }
  if (a5 > 8)
  {
    f32 = a3[5].f32;
    int32x4_t v20 = (float *)(a2 + 80);
  }
  if (a5 <= 2)
  {
    int v22 = 1;
    f32 = &a3[5].f32[2];
    int32x4_t v20 = (float *)(a2 + 88);
  }
  float v23 = *v20;
  float v24 = *f32;
  if (v22 != a5) {
    float v24 = -*f32;
  }
  float v25 = v19 + v24;
  if (v22 != a5) {
    float v23 = -v23;
  }
  float v26 = *(float *)a6.i32 + v23;
  float32x4_t v27 = 0uLL;
  if (v14 & 8 | v16 & ~v15)
  {
    *(float *)a6.i32 = (float)(v26 / *(float *)a6.i32) / (float)((float)(v26 / *(float *)a6.i32) - (float)(v25 / v19));
    float32x4_t v27 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.i8, 0);
  }
  *(float *)a6.i32 = v26 / (float)(v26 - v25);
  float32x4_t v28 = vsubq_f32(a3[5], *v18);
  float32x4_t v29 = vmlaq_n_f32(*v18, v28, *(float *)a6.i32);
  *(float32x4_t *)(a4 + 80) = v29;
  if (a5 > 2)
  {
    if (a5 > 8)
    {
      if (v22 == a5)
      {
        float v36 = -v29.f32[3];
        if (v29.f32[3] >= 0.0) {
          int v34 = 0;
        }
        else {
          int v34 = 32;
        }
      }
      else
      {
        int v34 = 0;
        float v36 = v29.f32[3];
      }
      *(float *)(a4 + 80) = v36;
    }
    else
    {
      if (v22 == a5)
      {
        if (v29.f32[3] >= 0.0) {
          int v35 = 0;
        }
        else {
          int v35 = 8;
        }
        float v37 = -v29.f32[3];
      }
      else
      {
        int v35 = 0;
        float v37 = v29.f32[3];
      }
      *(float *)(a4 + 84) = v37;
      if (v29.f32[0] < (float)-v29.f32[3]) {
        v35 |= 0x10u;
      }
      if (v29.f32[0] <= v29.f32[3]) {
        int v34 = v35;
      }
      else {
        int v34 = v35 | 0x20;
      }
    }
  }
  else
  {
    float v30 = -v29.f32[3];
    if (v29.f32[3] < 0.0) {
      int v31 = 2;
    }
    else {
      int v31 = 0;
    }
    if (v22 == a5) {
      float v32 = -v29.f32[3];
    }
    else {
      float v32 = v29.f32[3];
    }
    if (v22 == a5) {
      int v33 = v31;
    }
    else {
      int v33 = 0;
    }
    *(float *)(a4 + 88) = v32;
    if (v29.f32[0] < v30) {
      v33 |= 0x10u;
    }
    if (v29.f32[0] > v29.f32[3]) {
      v33 |= 0x20u;
    }
    if (v29.f32[1] < v30) {
      v33 |= 4u;
    }
    if (v29.f32[1] <= v29.f32[3]) {
      int v34 = v33;
    }
    else {
      int v34 = v33 | 8;
    }
  }
  *(_DWORD *)a4 = *(_DWORD *)a2 & 0xFF00FF | (v34 << 24) | 0x100;
  if (v34)
  {
    float32x4_t v38 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.i8, 0);
    if ((v14 & 2) == 0) {
      goto LABEL_53;
    }
  }
  else
  {
    float v39 = *(float *)(a1 + 292);
    if (v29.f32[3] != v39)
    {
      float v39 = v39 / v29.f32[3];
      float32x4_t v29 = vmulq_n_f32(v29, v39);
    }
    uint64_t v40 = a1 + 9216 + 144 * v17;
    float32x4_t v28 = *(float32x4_t *)(v40 + 32);
    float32x4_t v41 = vmlaq_f32(*(float32x4_t *)(v40 + 48), v29, v28);
    v41.f32[3] = v39;
    *(float32x4_t *)(a4 + 64) = v41;
    float32x4_t v38 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.i8, 0);
    if ((v14 & 2) == 0)
    {
LABEL_53:
      if ((v14 & 0x10) != 0)
      {
        *(_OWORD *)(a4 + 96) = *(_OWORD *)(a2 + 96);
        if ((v14 & 0x400) == 0)
        {
LABEL_55:
          if ((v14 & 0x1000) == 0) {
            goto LABEL_86;
          }
LABEL_66:
          *(void *)(a4 + 32) = *(void *)(a2 + 32);
          if ((v14 & 0x2000) != 0)
          {
            uint64_t v42 = *(float32x4_t **)(a2 + 40);
LABEL_85:
            *(void *)(a4 + 40) = v42;
            goto LABEL_86;
          }
          goto LABEL_86;
        }
      }
      else if ((v14 & 0x400) == 0)
      {
        goto LABEL_55;
      }
      *(_OWORD *)(a4 + 112) = *(_OWORD *)(a2 + 112);
      if ((v14 & 0x1000) == 0) {
        goto LABEL_86;
      }
      goto LABEL_66;
    }
  }
  if ((v14 & 0x10) == 0)
  {
    if ((v14 & 0x400) == 0) {
      goto LABEL_62;
    }
LABEL_69:
    a6.i32[0] = 0;
    v29.i32[0] = v14 & 8;
    int8x16_t v44 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_s32((int32x4_t)v29, a6)), 0);
    float32x4_t v45 = *(float32x4_t *)(a2 + 112);
    float32x4_t v28 = vsubq_f32(a3[7], v45);
    a9 = vmlaq_f32(v45, v28, v27);
    float32x4_t v29 = vmlaq_f32(v45, v28, v38);
    a6 = (int32x4_t)vbslq_s8(v44, (int8x16_t)a9, (int8x16_t)v29);
    *(int32x4_t *)(a4 + 112) = a6;
    if ((v14 & 0x1000) == 0) {
      goto LABEL_86;
    }
    goto LABEL_70;
  }
  float32x4_t v43 = *(float32x4_t *)(a2 + 96);
  float32x4_t v29 = vsubq_f32(a3[6], v43);
  a6 = (int32x4_t)vmlaq_f32(v43, v29, v38);
  *(int32x4_t *)(a4 + 96) = a6;
  if ((v14 & 0x400) != 0) {
    goto LABEL_69;
  }
LABEL_62:
  if ((v14 & 0x1000) == 0) {
    goto LABEL_86;
  }
LABEL_70:
  unsigned int v46 = *(float32x4_t **)(a2 + 32);
  int v47 = (float32x4_t *)a3[2].i64[0];
  if (v46 != v47)
  {
    a6.i32[0] = 0;
    v29.i32[0] = v14 & 8;
    float32x4_t v28 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_s32((int32x4_t)v29, a6)), 0), (int8x16_t)v27, (int8x16_t)v38);
    uint64_t v48 = *(void *)(a2 + 32);
    if (v46[31].i32[1] == 1)
    {
      uint64_t v49 = *(void *)(a1 + 1424);
      uint64_t v48 = *(void *)(a1 + 1440);
      if (v48)
      {
        *(void *)(a1 + 1440) = *(void *)(v48 + 512);
      }
      else
      {
        char v127 = v34;
        char v128 = v13;
        float32x4_t v130 = v38;
        float32x4_t v132 = v27;
        float32x4_t v126 = v28;
        uint64_t v48 = (*(uint64_t (**)(void))(a1 + 1488))();
        float32x4_t v28 = v126;
        float32x4_t v38 = v130;
        float32x4_t v27 = v132;
        LOBYTE(v34) = v127;
        LOBYTE(v13) = v128;
      }
      uint64_t v50 = *(void *)(v49 + 512);
      *(void *)(v48 + 504) = v49;
      *(void *)(v48 + 512) = v50;
      *(void *)(v50 + 504) = v48;
      *(void *)(v49 + 512) = v48;
      *(void *)(v48 + 496) = 0x200003F3FLL;
    }
    *(float32x4_t *)uint64_t v48 = vmlaq_f32(*v46, vsubq_f32(*v47, *v46), v28);
    *(float32x4_t *)(v48 + 16) = vmlaq_f32(v46[1], vsubq_f32(v47[1], v46[1]), v28);
    *(float32x4_t *)(v48 + 32) = vmlaq_f32(v46[2], vsubq_f32(v47[2], v46[2]), v28);
    *(float32x4_t *)(v48 + 48) = vmlaq_f32(v46[3], vsubq_f32(v47[3], v46[3]), v28);
    float32x4_t v51 = v46[4];
    float32x4_t v29 = vsubq_f32(v47[4], v51);
    a6 = (int32x4_t)vmlaq_f32(v51, v29, v28);
    *(int32x4_t *)(v48 + 64) = a6;
    unsigned int v46 = (float32x4_t *)v48;
  }
  *(void *)(a4 + 32) = v46;
  if ((v14 & 0x2000) != 0)
  {
    uint64_t v42 = *(float32x4_t **)(a2 + 40);
    unint64_t v52 = (float32x4_t *)a3[2].i64[1];
    if (v42 != v52)
    {
      a6.i32[0] = 0;
      v29.i32[0] = v14 & 8;
      float32x4_t v28 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_s32((int32x4_t)v29, a6)), 0), (int8x16_t)v27, (int8x16_t)v38);
      float32x4_t v53 = *(float32x4_t **)(a2 + 40);
      if (v42[31].i32[1] == 1)
      {
        uint64_t v54 = *(void *)(a1 + 1432);
        float32x4_t v53 = *(float32x4_t **)(a1 + 1440);
        if (v53)
        {
          *(void *)(a1 + 1440) = v53[32].i64[0];
        }
        else
        {
          uint64_t v55 = *(uint64_t (**)(void))(a1 + 1488);
          char v56 = v13;
          float32x4_t v131 = v38;
          float32x4_t v133 = v27;
          char v57 = v34;
          float32x4_t v129 = v28;
          float32x4_t v53 = (float32x4_t *)v55();
          float32x4_t v28 = v129;
          float32x4_t v38 = v131;
          LOBYTE(v34) = v57;
          float32x4_t v27 = v133;
          LOBYTE(v13) = v56;
        }
        uint64_t v58 = *(void *)(v54 + 512);
        v53[31].i64[1] = v54;
        v53[32].i64[0] = v58;
        *(void *)(v58 + 504) = v53;
        *(void *)(v54 + 512) = v53;
        v53[31].i64[0] = 0x200003F3FLL;
      }
      *float32x4_t v53 = vmlaq_f32(*v42, vsubq_f32(*v52, *v42), v28);
      v53[1] = vmlaq_f32(v42[1], vsubq_f32(v52[1], v42[1]), v28);
      v53[2] = vmlaq_f32(v42[2], vsubq_f32(v52[2], v42[2]), v28);
      float v53[3] = vmlaq_f32(v42[3], vsubq_f32(v52[3], v42[3]), v28);
      v53[4] = vmlaq_f32(v42[4], vsubq_f32(v52[4], v42[4]), v28);
      uint64_t v42 = v53;
    }
    goto LABEL_85;
  }
LABEL_86:
  uint64_t v59 = v15 | (v16 << 32);
  if (!v59) {
    goto LABEL_150;
  }
  if ((v59 & 0x100000001uLL) >= 2)
  {
    float32x4_t v60 = *(float32x4_t *)(a2 + 96);
    v28.i64[0] = 0x100000000;
    a9.i64[0] = v59 & 0x100000001;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v61 = vsubq_f32(a3[6], v60);
    a9 = vmlaq_f32(v60, v61, v27);
    *(int8x16_t *)(a4 + 96) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v60, v61, v38));
  }
  if ((v59 & 0x200000000 | 2) != 2)
  {
    float32x4_t v62 = *(float32x4_t *)(a2 + 112);
    v28.i64[0] = 0x200000000;
    a9.i64[0] = v59 & 0x200000002;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v63 = vsubq_f32(a3[7], v62);
    a9 = vmlaq_f32(v62, v63, v27);
    *(int8x16_t *)(a4 + 112) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v62, v63, v38));
  }
  if ((v59 & 0x400000000 | 4) != 4)
  {
    float32x4_t v64 = *(float32x4_t *)(a2 + 128);
    v28.i64[0] = 0x400000000;
    a9.i64[0] = v59 & 0x400000004;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v65 = vsubq_f32(a3[8], v64);
    a9 = vmlaq_f32(v64, v65, v27);
    *(int8x16_t *)(a4 + 128) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v64, v65, v38));
  }
  if ((v59 & 0x800000000 | 8) != 8)
  {
    float32x4_t v66 = *(float32x4_t *)(a2 + 144);
    v28.i64[0] = 0x800000000;
    a9.i64[0] = v59 & 0x800000008;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v67 = vsubq_f32(a3[9], v66);
    a9 = vmlaq_f32(v66, v67, v27);
    *(int8x16_t *)(a4 + 144) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v66, v67, v38));
  }
  if ((v59 & 0x1000000000 | 0x10) != 0x10)
  {
    float32x4_t v68 = *(float32x4_t *)(a2 + 160);
    v28.i64[0] = 0x1000000000;
    a9.i64[0] = v59 & 0x1000000010;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v69 = vsubq_f32(a3[10], v68);
    a9 = vmlaq_f32(v68, v69, v27);
    *(int8x16_t *)(a4 + 160) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v68, v69, v38));
  }
  if ((v59 & 0x2000000000 | 0x20) != 0x20)
  {
    float32x4_t v70 = *(float32x4_t *)(a2 + 176);
    v28.i64[0] = 0x2000000000;
    a9.i64[0] = v59 & 0x2000000020;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v71 = vsubq_f32(a3[11], v70);
    a9 = vmlaq_f32(v70, v71, v27);
    *(int8x16_t *)(a4 + 176) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v70, v71, v38));
  }
  if ((v59 & 0x4000000000 | 0x40) != 0x40)
  {
    float32x4_t v72 = *(float32x4_t *)(a2 + 192);
    v28.i64[0] = 0x4000000000;
    a9.i64[0] = v59 & 0x4000000040;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v73 = vsubq_f32(a3[12], v72);
    a9 = vmlaq_f32(v72, v73, v27);
    *(int8x16_t *)(a4 + 192) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v72, v73, v38));
  }
  if ((v59 & 0x8000000000 | 0x80) != 0x80)
  {
    float32x4_t v74 = *(float32x4_t *)(a2 + 208);
    v28.i64[0] = 0x8000000000;
    a9.i64[0] = v59 & 0x8000000080;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v75 = vsubq_f32(a3[13], v74);
    a9 = vmlaq_f32(v74, v75, v27);
    *(int8x16_t *)(a4 + 208) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v74, v75, v38));
  }
  if ((v59 & 0x10000000000 | 0x100) != 0x100)
  {
    float32x4_t v76 = *(float32x4_t *)(a2 + 224);
    v28.i64[0] = 0x10000000000;
    a9.i64[0] = v59 & 0x10000000100;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v77 = vsubq_f32(a3[14], v76);
    a9 = vmlaq_f32(v76, v77, v27);
    *(int8x16_t *)(a4 + 224) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v76, v77, v38));
  }
  if ((v59 & 0x20000000000 | 0x200) != 0x200)
  {
    float32x4_t v78 = *(float32x4_t *)(a2 + 240);
    v28.i64[0] = 0x20000000000;
    a9.i64[0] = v59 & 0x20000000200;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v79 = vsubq_f32(a3[15], v78);
    a9 = vmlaq_f32(v78, v79, v27);
    *(int8x16_t *)(a4 + 240) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v78, v79, v38));
  }
  if ((v59 & 0x40000000000 | 0x400) != 0x400)
  {
    float32x4_t v80 = *(float32x4_t *)(a2 + 256);
    v28.i64[0] = 0x40000000000;
    a9.i64[0] = v59 & 0x40000000400;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v81 = vsubq_f32(a3[16], v80);
    a9 = vmlaq_f32(v80, v81, v27);
    *(int8x16_t *)(a4 + 256) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v80, v81, v38));
  }
  if ((v59 & 0x80000000000 | 0x800) != 0x800)
  {
    float32x4_t v82 = *(float32x4_t *)(a2 + 272);
    v28.i64[0] = 0x80000000000;
    a9.i64[0] = v59 & 0x80000000800;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v83 = vsubq_f32(a3[17], v82);
    a9 = vmlaq_f32(v82, v83, v27);
    *(int8x16_t *)(a4 + 272) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v82, v83, v38));
  }
  if ((v59 & 0x100000000000 | 0x1000) != 0x1000)
  {
    float32x4_t v84 = *(float32x4_t *)(a2 + 288);
    v28.i64[0] = 0x100000000000;
    a9.i64[0] = v59 & 0x100000001000;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v85 = vsubq_f32(a3[18], v84);
    a9 = vmlaq_f32(v84, v85, v27);
    *(int8x16_t *)(a4 + 288) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v84, v85, v38));
  }
  if ((v59 & 0x200000000000 | 0x2000) != 0x2000)
  {
    float32x4_t v86 = *(float32x4_t *)(a2 + 304);
    v28.i64[0] = 0x200000000000;
    a9.i64[0] = v59 & 0x200000002000;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v87 = vsubq_f32(a3[19], v86);
    a9 = vmlaq_f32(v86, v87, v27);
    *(int8x16_t *)(a4 + 304) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v86, v87, v38));
  }
  if ((v59 & 0x400000000000 | 0x4000) != 0x4000)
  {
    float32x4_t v88 = *(float32x4_t *)(a2 + 320);
    v28.i64[0] = 0x400000000000;
    a9.i64[0] = v59 & 0x400000004000;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v89 = vsubq_f32(a3[20], v88);
    a9 = vmlaq_f32(v88, v89, v27);
    *(int8x16_t *)(a4 + 320) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v88, v89, v38));
  }
  if ((v59 & 0x800000000000 | 0x8000) != 0x8000)
  {
    float32x4_t v90 = *(float32x4_t *)(a2 + 336);
    v28.i64[0] = 0x800000000000;
    a9.i64[0] = v59 & 0x800000008000;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v91 = vsubq_f32(a3[21], v90);
    a9 = vmlaq_f32(v90, v91, v27);
    *(int8x16_t *)(a4 + 336) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v90, v91, v38));
  }
  if ((v59 & 0x1000000000000 | 0x10000) != 0x10000)
  {
    float32x4_t v92 = *(float32x4_t *)(a2 + 352);
    v28.i64[0] = 0x1000000000000;
    a9.i64[0] = v59 & 0x1000000010000;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v93 = vsubq_f32(a3[22], v92);
    a9 = vmlaq_f32(v92, v93, v27);
    *(int8x16_t *)(a4 + 352) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v92, v93, v38));
  }
  if ((v59 & 0x2000000000000 | 0x20000) != 0x20000)
  {
    float32x4_t v94 = *(float32x4_t *)(a2 + 368);
    v28.i64[0] = 0x2000000000000;
    a9.i64[0] = v59 & 0x2000000020000;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v95 = vsubq_f32(a3[23], v94);
    a9 = vmlaq_f32(v94, v95, v27);
    *(int8x16_t *)(a4 + 368) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v94, v95, v38));
  }
  if ((v59 & 0x4000000000000 | 0x40000) != 0x40000)
  {
    float32x4_t v96 = *(float32x4_t *)(a2 + 384);
    v28.i64[0] = 0x4000000000000;
    a9.i64[0] = v59 & 0x4000000040000;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v97 = vsubq_f32(a3[24], v96);
    a9 = vmlaq_f32(v96, v97, v27);
    *(int8x16_t *)(a4 + 384) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v96, v97, v38));
  }
  if ((v59 & 0x8000000000000 | 0x80000) != 0x80000)
  {
    float32x4_t v98 = *(float32x4_t *)(a2 + 400);
    v28.i64[0] = 0x8000000000000;
    a9.i64[0] = v59 & 0x8000000080000;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v99 = vsubq_f32(a3[25], v98);
    a9 = vmlaq_f32(v98, v99, v27);
    *(int8x16_t *)(a4 + 400) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v98, v99, v38));
  }
  if ((v59 & 0x10000000000000 | 0x100000) != 0x100000)
  {
    float32x4_t v100 = *(float32x4_t *)(a2 + 416);
    v28.i64[0] = 0x10000000000000;
    a9.i64[0] = v59 & 0x10000000100000;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v101 = vsubq_f32(a3[26], v100);
    a9 = vmlaq_f32(v100, v101, v27);
    *(int8x16_t *)(a4 + 416) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v100, v101, v38));
  }
  if ((v59 & 0x20000000000000 | 0x200000) != 0x200000)
  {
    float32x4_t v102 = *(float32x4_t *)(a2 + 432);
    v28.i64[0] = 0x20000000000000;
    a9.i64[0] = v59 & 0x20000000200000;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v103 = vsubq_f32(a3[27], v102);
    a9 = vmlaq_f32(v102, v103, v27);
    *(int8x16_t *)(a4 + 432) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v102, v103, v38));
  }
  if ((v59 & 0x40000000000000 | 0x400000) != 0x400000)
  {
    float32x4_t v104 = *(float32x4_t *)(a2 + 448);
    v28.i64[0] = 0x40000000000000;
    a9.i64[0] = v59 & 0x40000000400000;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v105 = vsubq_f32(a3[28], v104);
    a9 = vmlaq_f32(v104, v105, v27);
    *(int8x16_t *)(a4 + 448) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v104, v105, v38));
  }
  if ((v59 & 0x80000000000000 | 0x800000) != 0x800000)
  {
    float32x4_t v106 = *(float32x4_t *)(a2 + 464);
    v28.i64[0] = 0x80000000000000;
    a9.i64[0] = v59 & 0x80000000800000;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v107 = vsubq_f32(a3[29], v106);
    a9 = vmlaq_f32(v106, v107, v27);
    *(int8x16_t *)(a4 + 464) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v106, v107, v38));
  }
  if ((v59 & 0x100000000000000 | 0x1000000) != 0x1000000)
  {
    float32x4_t v108 = *(float32x4_t *)(a2 + 480);
    v28.i64[0] = 0x100000000000000;
    a9.i64[0] = v59 & 0x100000001000000;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v109 = vsubq_f32(a3[30], v108);
    a9 = vmlaq_f32(v108, v109, v27);
    *(int8x16_t *)(a4 + 480) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v108, v109, v38));
  }
  if ((v59 & 0x200000000000000 | 0x2000000) != 0x2000000)
  {
    float32x4_t v110 = *(float32x4_t *)(a2 + 496);
    v28.i64[0] = 0x200000000000000;
    a9.i64[0] = v59 & 0x200000002000000;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v111 = vsubq_f32(a3[31], v110);
    a9 = vmlaq_f32(v110, v111, v27);
    *(int8x16_t *)(a4 + 496) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v110, v111, v38));
  }
  if ((v59 & 0x400000000000000 | 0x4000000) != 0x4000000)
  {
    float32x4_t v112 = *(float32x4_t *)(a2 + 512);
    v28.i64[0] = 0x400000000000000;
    a9.i64[0] = v59 & 0x400000004000000;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v113 = vsubq_f32(a3[32], v112);
    a9 = vmlaq_f32(v112, v113, v27);
    *(int8x16_t *)(a4 + 512) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v112, v113, v38));
  }
  if ((v59 & 0x800000000000000 | 0x8000000) != 0x8000000)
  {
    float32x4_t v114 = *(float32x4_t *)(a2 + 528);
    v28.i64[0] = 0x800000000000000;
    a9.i64[0] = v59 & 0x800000008000000;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v115 = vsubq_f32(a3[33], v114);
    a9 = vmlaq_f32(v114, v115, v27);
    *(int8x16_t *)(a4 + 528) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v114, v115, v38));
  }
  if ((v59 & 0x1000000000000000 | 0x10000000) != 0x10000000)
  {
    float32x4_t v116 = *(float32x4_t *)(a2 + 544);
    v28.i64[0] = 0x1000000000000000;
    a9.i64[0] = v59 & 0x1000000010000000;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v117 = vsubq_f32(a3[34], v116);
    a9 = vmlaq_f32(v116, v117, v27);
    *(int8x16_t *)(a4 + 544) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v116, v117, v38));
  }
  if ((v59 & 0x2000000000000000 | 0x20000000) != 0x20000000)
  {
    float32x4_t v118 = *(float32x4_t *)(a2 + 560);
    v28.i64[0] = 0x2000000000000000;
    a9.i64[0] = v59 & 0x2000000020000000;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v119 = vsubq_f32(a3[35], v118);
    a9 = vmlaq_f32(v118, v119, v27);
    *(int8x16_t *)(a4 + 560) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v118, v119, v38));
  }
  if ((v59 & 0x4000000000000000 | 0x40000000) != 0x40000000)
  {
    float32x4_t v120 = *(float32x4_t *)(a2 + 576);
    v28.i64[0] = 0x4000000000000000;
    a9.i64[0] = v59 & 0x4000000040000000;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0);
    float32x4_t v121 = vsubq_f32(a3[36], v120);
    a9 = vmlaq_f32(v120, v121, v27);
    *(int8x16_t *)(a4 + 576) = vbslq_s8((int8x16_t)v28, (int8x16_t)a9, (int8x16_t)vmlaq_f32(v120, v121, v38));
  }
  unint64_t v122 = v59 & 0x8000000080000000;
  if ((v122 | 0x80000000) != 0x80000000)
  {
    float32x4_t v124 = *(float32x4_t *)(a2 + 592);
    v28.i64[0] = 0x8000000000000000;
    a9.i64[0] = v122;
    float32x4_t v125 = vsubq_f32(a3[37], v124);
    *(int8x16_t *)(a4 + 592) = vbslq_s8((int8x16_t)vdupq_lane_s64(vceqq_s64((int64x2_t)a9, (int64x2_t)v28).i64[0], 0), (int8x16_t)vmlaq_f32(v124, v125, v27), (int8x16_t)vmlaq_f32(v124, v125, v38));
    if ((v13 & 0xC0) == 0) {
      return v34;
    }
  }
  else
  {
LABEL_150:
    if ((v13 & 0xC0) == 0) {
      return v34;
    }
  }
  if ((v13 & 0x40) != 0) {
    *(float32x4_t *)(a4 + 608) = vmlaq_f32(*(float32x4_t *)(a2 + 608), vsubq_f32(a3[38], *(float32x4_t *)(a2 + 608)), v38);
  }
  if ((v13 & 0x80) != 0) {
    *(float32x4_t *)(a4 + 624) = vmlaq_f32(*(float32x4_t *)(a2 + 624), vsubq_f32(a3[39], *(float32x4_t *)(a2 + 624)), v38);
  }
  return v34;
}

__n128 gleLLVMVecCopyFlatVaryings(uint64_t a1, __n128 *a2, __n128 *a3)
{
  int v3 = *(_DWORD *)(a1 + 28004);
  uint64_t v4 = *(void *)(a1 + 28012);
  if (v4)
  {
    if ((v4 & 0x100000001) == 1)
    {
      __n128 result = a2[6];
      a3[6] = result;
    }
    if ((v4 & 0x200000002) == 2)
    {
      __n128 result = a2[7];
      a3[7] = result;
    }
    if ((v4 & 0x400000004) == 4)
    {
      __n128 result = a2[8];
      a3[8] = result;
    }
    if ((v4 & 0x800000008) == 8)
    {
      __n128 result = a2[9];
      a3[9] = result;
    }
    if ((v4 & 0x1000000010) == 0x10)
    {
      __n128 result = a2[10];
      a3[10] = result;
    }
    if ((v4 & 0x2000000020) == 0x20)
    {
      __n128 result = a2[11];
      a3[11] = result;
    }
    if ((v4 & 0x4000000040) == 0x40)
    {
      __n128 result = a2[12];
      a3[12] = result;
    }
    if ((v4 & 0x8000000080) == 0x80)
    {
      __n128 result = a2[13];
      a3[13] = result;
    }
    if ((v4 & 0x10000000100) == 0x100)
    {
      __n128 result = a2[14];
      a3[14] = result;
    }
    if ((v4 & 0x20000000200) == 0x200)
    {
      __n128 result = a2[15];
      a3[15] = result;
    }
    if ((v4 & 0x40000000400) == 0x400)
    {
      __n128 result = a2[16];
      a3[16] = result;
    }
    if ((v4 & 0x80000000800) == 0x800)
    {
      __n128 result = a2[17];
      a3[17] = result;
    }
    if ((v4 & 0x100000001000) == 0x1000)
    {
      __n128 result = a2[18];
      a3[18] = result;
    }
    if ((v4 & 0x200000002000) == 0x2000)
    {
      __n128 result = a2[19];
      a3[19] = result;
    }
    if ((v4 & 0x400000004000) == 0x4000)
    {
      __n128 result = a2[20];
      a3[20] = result;
    }
    if ((v4 & 0x800000008000) == 0x8000)
    {
      __n128 result = a2[21];
      a3[21] = result;
    }
    if ((v4 & 0x1000000010000) == 0x10000)
    {
      __n128 result = a2[22];
      a3[22] = result;
    }
    if ((v4 & 0x2000000020000) == 0x20000)
    {
      __n128 result = a2[23];
      a3[23] = result;
    }
    if ((v4 & 0x4000000040000) == 0x40000)
    {
      __n128 result = a2[24];
      a3[24] = result;
    }
    if ((v4 & 0x8000000080000) == 0x80000)
    {
      __n128 result = a2[25];
      a3[25] = result;
    }
    if ((v4 & 0x10000000100000) == 0x100000)
    {
      __n128 result = a2[26];
      a3[26] = result;
    }
    if ((v4 & 0x20000000200000) == 0x200000)
    {
      __n128 result = a2[27];
      a3[27] = result;
    }
    if ((v4 & 0x40000000400000) == 0x400000)
    {
      __n128 result = a2[28];
      a3[28] = result;
    }
    if ((v4 & 0x80000000800000) == 0x800000)
    {
      __n128 result = a2[29];
      a3[29] = result;
    }
    if ((v4 & 0x100000001000000) == 0x1000000)
    {
      __n128 result = a2[30];
      a3[30] = result;
    }
    if ((v4 & 0x200000002000000) == 0x2000000)
    {
      __n128 result = a2[31];
      a3[31] = result;
    }
    if ((v4 & 0x400000004000000) == 0x4000000)
    {
      __n128 result = a2[32];
      a3[32] = result;
    }
    if ((v4 & 0x800000008000000) == 0x8000000)
    {
      __n128 result = a2[33];
      a3[33] = result;
    }
    if ((v4 & 0x1000000010000000) == 0x10000000)
    {
      __n128 result = a2[34];
      a3[34] = result;
    }
    if ((v4 & 0x2000000020000000) == 0x20000000)
    {
      __n128 result = a2[35];
      a3[35] = result;
    }
    if ((v4 & 0x4000000040000000) == 0x40000000)
    {
      __n128 result = a2[36];
      a3[36] = result;
    }
    if ((v4 & 0x8000000080000000) == 0x80000000)
    {
      __n128 result = a2[37];
      a3[37] = result;
    }
  }
  if ((v3 & 0x800) != 0)
  {
    __n128 result = a2[1];
    a3[1] = result;
  }
  return result;
}

uint64_t gleSetLightFrontFunc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  gleBuildLightingTransformFunc(a1, 0, 0);
  int32x2_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 20160);

  return v6(a1, a2, a3);
}

uint64_t gleBuildLightingTransformFunc(uint64_t result, int a2, int a3)
{
  int v3 = (unsigned __int16 *)(result + 14884);
  if (a2 == 1) {
    int v4 = 3;
  }
  else {
    int v4 = 1;
  }
  if (a3) {
    v4 |= 4u;
  }
  if (*(unsigned char *)(result + 14893)) {
    v4 |= 8u;
  }
  if (*(unsigned __int16 *)(result + 14888) == 33274) {
    v4 |= 0x10u;
  }
  if (*(unsigned char *)(result + 14894)) {
    v4 |= 0x20u;
  }
  int v5 = *(unsigned __int8 *)(result + 14891);
  if (*(unsigned char *)(result + 14891))
  {
    int v6 = *v3;
    if (v6 != 1032)
    {
      int v7 = a2 ? 1029 : 1028;
      if (v7 != v6)
      {
        int v5 = 0;
        unsigned int v9 = *(_DWORD *)(result + 14880);
        if (!v9) {
          goto LABEL_45;
        }
        goto LABEL_33;
      }
    }
    unsigned int v8 = *(unsigned __int16 *)(result + 14886);
    if (v8 <= 0x1201)
    {
      if (v8 == 4608)
      {
        int v5 = 512;
        unsigned int v9 = *(_DWORD *)(result + 14880);
        if (!v9) {
          goto LABEL_45;
        }
        goto LABEL_33;
      }
      if (v8 == 4609)
      {
        int v5 = 1024;
        unsigned int v9 = *(_DWORD *)(result + 14880);
        if (!v9) {
          goto LABEL_45;
        }
        goto LABEL_33;
      }
      goto LABEL_44;
    }
    if (v8 != 4610)
    {
      if (v8 == 5632)
      {
        int v5 = 256;
        unsigned int v9 = *(_DWORD *)(result + 14880);
        if (!v9) {
          goto LABEL_45;
        }
        goto LABEL_33;
      }
LABEL_44:
      int v5 = 1536;
      unsigned int v9 = *(_DWORD *)(result + 14880);
      if (!v9) {
        goto LABEL_45;
      }
      goto LABEL_33;
    }
    int v5 = 2048;
  }
  unsigned int v9 = *(_DWORD *)(result + 14880);
  if (!v9) {
    goto LABEL_45;
  }
LABEL_33:
  char v10 = 0;
  uint64_t v11 = (unsigned char *)(result + 809);
  do
  {
    if (v9)
    {
      int v14 = v5 | (1 << v10);
      if (!*v11)
      {
        v4 |= 256 << v10;
        if (!v11[3]) {
          v14 |= 0x1000000 << v10;
        }
      }
      if (v11[1]) {
        int v12 = 0x10000 << v10;
      }
      else {
        int v12 = 0;
      }
      int v5 = v12 | v14;
    }
    ++v10;
    v11 += 80;
    BOOL v13 = v9 > 1;
    v9 >>= 1;
  }
  while (v13);
LABEL_45:
  if (a3)
  {
    if (a2)
    {
      *(void *)(result + 20208) = gleLLVMVecLightPtrBackTransform;
      *(void *)(result + 20216) = gleLLVMVecLightPtrBackTransform;
      *(_DWORD *)(result + 20444) = v4;
      uint64_t v15 = 2782;
    }
    else
    {
      *(void *)(result + 20192) = gleLLVMVecLightPtrFrontTransform;
      *(void *)(result + 20200) = gleLLVMVecLightPtrFrontTransform;
      *(_DWORD *)(result + 20436) = v4;
      uint64_t v15 = 2778;
    }
  }
  else if (a2)
  {
    *(void *)(result + 20176) = gleLLVMVecLightBackTransform;
    *(void *)(result + 20184) = gleLLVMVecLightBackTransform;
    *(_DWORD *)(result + 20428) = v4;
    uint64_t v15 = 2774;
  }
  else
  {
    *(void *)(result + 20160) = gleLLVMVecLightFrontTransform;
    *(void *)(result + 20168) = gleLLVMVecLightFrontTransform;
    *(_DWORD *)(result + 20420) = v4;
    uint64_t v15 = 2770;
  }
  *(_DWORD *)&v3[v15] = v5;
  return result;
}

uint64_t gleSetLightBackFunc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  gleBuildLightingTransformFunc(a1, 1, 0);
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 20176);

  return v6(a1, a2, a3);
}

uint64_t gleSetLightPtrFrontFunc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  gleBuildLightingTransformFunc(a1, 0, 1);
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 20192);

  return v6(a1, a2, a3);
}

uint64_t gleSetLightPtrBackFunc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  gleBuildLightingTransformFunc(a1, 1, 1);
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 20208);

  return v6(a1, a2, a3);
}

void gleLLVMVecLightFrontTransform(uint64_t a1, float32x4_t *a2, int a3, int32x4_t a4)
{
  int v4 = a2;
  uint64_t v5 = a1;
  LODWORD(v6) = *(_DWORD *)(a1 + 20420);
  unsigned __int32 v7 = *(_DWORD *)(a1 + 20424);
  unint64_t v8 = (unint64_t)&a2[40 * a3];
  int v1500 = (unsigned __int16)v6 & 0xFF08;
  unsigned int v1586 = v7 & 0xFFFF0300;
  int v1499 = v7 & 0x1010000;
  int v1328 = (unsigned __int16)v6 & 0x108;
  int v1498 = v7 & 0x2020000;
  int v1327 = (unsigned __int16)v6 & 0x208;
  int v1497 = v7 & 0x4040000;
  int v1326 = (unsigned __int16)v6 & 0x408;
  int v1496 = v7 & 0x8080000;
  int v1325 = (unsigned __int16)v6 & 0x808;
  int v1495 = v7 & 0x10100000;
  int v1324 = (unsigned __int16)v6 & 0x1008;
  int v1494 = v7 & 0x20200000;
  int v1323 = (unsigned __int16)v6 & 0x2008;
  int v1493 = v7 & 0x40400000;
  int v1322 = (unsigned __int16)v6 & 0x4008;
  unsigned int v1492 = v7 & 0x80800000;
  int v1321 = (unsigned __int16)v6 & 0x8008;
  v1353 = (const float *)(a1 + 13740);
  a4.i32[0] = v7;
  int32x4_t v1345 = a4;
  v1330 = (const float *)(a1 + 13744);
  v1329 = (const float *)(a1 + 13748);
  v1352 = (const float *)(a1 + 13580);
  v1344 = (const float *)(a1 + 13584);
  v1343 = (const float *)(a1 + 13588);
  v1351 = (const float *)(a1 + 13420);
  v1342 = (const float *)(a1 + 13424);
  v1341 = (const float *)(a1 + 13428);
  v1350 = (const float *)(a1 + 13260);
  v1340 = (const float *)(a1 + 13264);
  v1339 = (const float *)(a1 + 13268);
  v1349 = (const float *)(a1 + 13100);
  v1338 = (const float *)(a1 + 13104);
  v1337 = (const float *)(a1 + 13108);
  v1348 = (const float *)(a1 + 12940);
  v1336 = (const float *)(a1 + 12944);
  v1335 = (const float *)(a1 + 12948);
  v1347 = (const float *)(a1 + 12780);
  v1334 = (const float *)(a1 + 12784);
  v1333 = (const float *)(a1 + 12788);
  v1346 = (const float *)(a1 + 12620);
  v1332 = (const float *)(a1 + 12624);
  v1331 = (const float *)(a1 + 12628);
  float v9 = 1.0;
  unint64_t v1501 = v8;
  __int16 v1462 = (__int16)v6;
  do
  {
    char v10 = v4 + 40;
    uint64_t v11 = v4 + 80;
    int v12 = v4 + 120;
    if ((unint64_t)&v4[120] >= v8)
    {
      if ((unint64_t)v10 >= v8) {
        BOOL v13 = v4;
      }
      else {
        BOOL v13 = v4 + 40;
      }
      if ((unint64_t)v11 >= v8)
      {
        char v10 = v13;
        uint64_t v11 = v13;
      }
      int v12 = v11;
    }
    v4->i8[2] &= ~2u;
    v10->i8[2] &= ~2u;
    v11->i8[2] &= ~2u;
    v12->i8[2] &= ~2u;
    int v14 = (float32x4_t *)v4[2].i64[0];
    if (v14[31].i8[0]) {
      a1 = (*(uint64_t (**)(uint64_t, uint64_t, void))(v5 + 1504))(v5, v4[2].i64[0], 0);
    }
    uint64_t v15 = (float32x4_t *)v10[2].i64[0];
    if (v15 != v14 && v15[31].i8[0]) {
      a1 = (*(uint64_t (**)(uint64_t, uint64_t, void))(v5 + 1504))(v5, v10[2].i64[0], 0);
    }
    uint64_t v16 = (float32x4_t *)v11[2].i64[0];
    if (v16 != v15 && v16[31].i8[0]) {
      a1 = (*(uint64_t (**)(uint64_t, uint64_t, void))(v5 + 1504))(v5, v11[2].i64[0], 0);
    }
    unsigned int v17 = (float32x4_t *)v12[2].i64[0];
    v1514 = v17;
    if (v17 != v16 && v17[31].i8[0])
    {
      a1 = (*(uint64_t (**)(uint64_t, float32x4_t *, void))(v5 + 1504))(v5, v17, 0);
      unsigned int v17 = v1514;
    }
    if (v1500)
    {
      float v18 = v4[6].f32[3];
      float32x4_t v1584 = v4[6];
      if (v18 != v9) {
        float32x4_t v1584 = vmulq_n_f32(v1584, v9 / v18);
      }
      float v19 = v10[6].f32[3];
      float32x4_t v1580 = v10[6];
      if (v19 != v9) {
        float32x4_t v1580 = vmulq_n_f32(v1580, v9 / v19);
      }
      float v20 = v11[6].f32[3];
      float32x4_t v1582 = v11[6];
      if (v20 != v9) {
        float32x4_t v1582 = vmulq_n_f32(v1582, v9 / v20);
      }
      float v21 = v12[6].f32[3];
      float32x4_t v22 = v12[6];
      if (v21 != v9) {
        float32x4_t v22 = vmulq_n_f32(v22, v9 / v21);
      }
      if ((v7 & 0x100) != 0)
      {
LABEL_35:
        float32x4_t v27 = *(float32x4_t *)(v5 + 12528);
        float32x4_t v23 = vmlaq_f32(v4[13], v27, *v14);
        float32x4_t v24 = vmlaq_f32(v10[13], v27, *v15);
        float32x4_t v25 = vmlaq_f32(v11[13], v27, *v16);
        float32x4_t v26 = vmlaq_f32(v12[13], v27, *v17);
        goto LABEL_38;
      }
    }
    else
    {
      float32x4_t v22 = 0uLL;
      float32x4_t v1580 = 0u;
      float32x4_t v1582 = 0u;
      float32x4_t v1584 = 0u;
      if ((v7 & 0x100) != 0) {
        goto LABEL_35;
      }
    }
    if ((v7 & 0x200) != 0)
    {
      float32x4_t v28 = *(float32x4_t *)(v5 + 12528);
      float32x4_t v23 = vmlaq_f32(v14[3], v4[13], v28);
      float32x4_t v24 = vmlaq_f32(v15[3], v10[13], v28);
      float32x4_t v25 = vmlaq_f32(v16[3], v11[13], v28);
      float32x4_t v26 = vmlaq_f32(v17[3], v12[13], v28);
    }
    else if (v1586)
    {
      float32x4_t v23 = v14[29];
      float32x4_t v24 = v15[29];
      float32x4_t v25 = v16[29];
      float32x4_t v26 = v17[29];
    }
    else
    {
      float32x4_t v23 = v14[30];
      float32x4_t v24 = v15[30];
      float32x4_t v25 = v16[30];
      float32x4_t v26 = v17[30];
    }
LABEL_38:
    float32x4_t v29 = 0uLL;
    float32x4_t v1510 = 0u;
    float32x4_t v1512 = v22;
    if ((v7 & 1) == 0) {
      goto LABEL_71;
    }
    float32x4_t v30 = v4[7];
    float32x4_t v31 = v10[7];
    float32x4_t v32 = v11[7];
    float32x4_t v33 = v12[7];
    if ((v6 & 2) != 0)
    {
      float32x4_t v30 = vnegq_f32(v30);
      float32x4_t v31 = vnegq_f32(v31);
      float32x4_t v32 = vnegq_f32(v32);
      float32x4_t v33 = vnegq_f32(v33);
    }
    float32x4_t v34 = *(float32x4_t *)(v5 + 12640);
    float32x4_t v35 = 0uLL;
    if (((unsigned __int16)v6 & 0x100) != 0)
    {
      float32x4_t v39 = vsubq_f32(v34, v1584);
      float32x4_t v40 = vsubq_f32(v34, v1580);
      float32x4_t v41 = vsubq_f32(v34, v1582);
      float32x4_t v42 = vsubq_f32(v34, v22);
      float32x4_t v43 = vmulq_f32(v39, v39);
      int32x4_t v44 = (int32x4_t)vmulq_f32(v40, v40);
      float32x4_t v45 = vmulq_f32(v41, v41);
      v46.i64[0] = vzip1q_s32((int32x4_t)v43, v44).u64[0];
      v46.i32[2] = v45.i32[0];
      float32x4_t v47 = vmulq_f32(v42, v42);
      v46.i32[3] = v47.i32[0];
      v48.i64[0] = vtrn2q_s32((int32x4_t)v43, v44).u64[0];
      v48.i64[1] = __PAIR64__(v47.u32[1], v45.u32[1]);
      v43.i64[0] = vzip2q_s32((int32x4_t)v43, v44).u64[0];
      v43.i64[1] = __PAIR64__(v47.u32[2], v45.u32[2]);
      float32x4_t v49 = vsqrtq_f32(vaddq_f32(v43, vaddq_f32(v46, v48)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v55 = vdivq_f32(_Q0, v49);
      float32x4_t v34 = vmulq_n_f32(v39, v55.f32[0]);
      float32x4_t v36 = vmulq_lane_f32(v40, *(float32x2_t *)v55.f32, 1);
      float32x4_t v37 = vmulq_laneq_f32(v41, v55, 2);
      float32x4_t v38 = vmulq_laneq_f32(v42, v55, 3);
      if ((v7 & 0x1000000) != 0)
      {
        float32x4_t v56 = vdivq_f32(_Q0, v55);
        char v57 = v1332;
        float32x4_t v58 = vld1q_dup_f32(v57);
        uint64_t v59 = v1331;
        float32x4_t v60 = vld1q_dup_f32(v59);
        float32x4_t v35 = vdivq_f32(_Q0, vmlaq_f32(v58, vmlaq_n_f32(v60, v56, *(float *)(v5 + 12632)), v56));
        if ((v7 & 0x10000) == 0)
        {
LABEL_46:
          if (!v1499) {
            goto LABEL_58;
          }
          goto LABEL_53;
        }
      }
      else if ((v7 & 0x10000) == 0)
      {
        goto LABEL_46;
      }
    }
    else
    {
      float32x4_t v36 = *(float32x4_t *)(v5 + 12640);
      float32x4_t v37 = v36;
      float32x4_t v38 = v36;
      if ((v7 & 0x10000) == 0) {
        goto LABEL_46;
      }
    }
    float32x4_t v61 = vnegq_f32(*(float32x4_t *)(v5 + 12656));
    float32x4_t v62 = vmulq_f32(v34, v61);
    int32x4_t v63 = (int32x4_t)vmulq_f32(v36, v61);
    float32x4_t v64 = vmulq_f32(v37, v61);
    float32x4_t v65 = vmulq_f32(v38, v61);
    v66.i64[0] = vzip1q_s32((int32x4_t)v62, v63).u64[0];
    v66.i64[1] = __PAIR64__(v65.u32[0], v64.u32[0]);
    v67.i64[0] = vtrn2q_s32((int32x4_t)v62, v63).u64[0];
    v67.i64[1] = __PAIR64__(v65.u32[1], v64.u32[1]);
    v62.i64[0] = vzip2q_s32((int32x4_t)v62, v63).u64[0];
    v62.i64[1] = __PAIR64__(v65.u32[2], v64.u32[2]);
    float32x4_t v68 = vaddq_f32(v62, vaddq_f32(v66, v67));
    float32x4_t v69 = v1346;
    float32x4_t v70 = vld1q_dup_f32(v69);
    int32x4_t v71 = vcgeq_f32(v68, v70);
    int32x4_t v72 = (int32x4_t)vmvnq_s8((int8x16_t)v71);
    *(int16x4_t *)v72.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v72), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v72.i8))
    {
      float32x4_t v35 = 0uLL;
      if (!v1499) {
        goto LABEL_58;
      }
    }
    else
    {
      v72.i32[0] = 0;
      int8x16_t v1426 = (int8x16_t)v71;
      v71.i32[0] = v7 & 0x1000000;
      int8x16_t v73 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v71, v72), 0);
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1412 = (float32x4_t)vbslq_s8(v73, _Q1, (int8x16_t)v35);
      float v75 = *(float *)(v5 + 12636);
      float32x4_t v1548 = v24;
      float32x4_t v1564 = v23;
      float32x4_t v1532 = v25;
      float32x4_t v1516 = v26;
      float32x4_t v1445 = v37;
      float32x4_t v1453 = v34;
      float32x4_t v1506 = v38;
      float32x4_t v1511 = v68;
      float32x4_t v1437 = v36;
      unsigned int v1398 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(v5 + 560))(a1));
      unsigned int v1390 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1511.f32[1], v75));
      unsigned int v1382 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1511.f32[2], v75));
      *(float *)&unsigned int v76 = (*(float (**)(float, float))(v5 + 560))(v1511.f32[3], v75);
      float32x4_t v36 = v1437;
      float32x4_t v37 = v1445;
      float32x4_t v38 = v1506;
      float32x4_t v34 = v1453;
      float32x4_t v22 = v1512;
      float32x4_t v26 = v1516;
      float32x4_t v25 = v1532;
      float32x4_t v24 = v1548;
      float32x4_t v23 = v1564;
      unsigned int v17 = v1514;
      v77.i64[0] = __PAIR64__(v1390, v1398);
      v77.i64[1] = __PAIR64__(v76, v1382);
      float32x4_t v35 = vmulq_f32(v1412, (float32x4_t)vandq_s8(v77, v1426));
      if (!v1499) {
        goto LABEL_58;
      }
    }
LABEL_53:
    if (v35.f32[0] <= 0.0 && v35.f32[1] <= 0.0 && v35.f32[2] <= 0.0)
    {
      float32x4_t v1510 = 0u;
      if (v35.f32[3] <= 0.0)
      {
        float32x4_t v29 = 0uLL;
        goto LABEL_71;
      }
    }
LABEL_58:
    if (v1586)
    {
      if ((v7 & 0x200) != 0)
      {
        float32x4_t v82 = *(float32x4_t *)(v5 + 12544);
        float32x4_t v78 = vmulq_f32(v82, v4[13]);
        float32x4_t v79 = vmulq_f32(v82, v10[13]);
        float32x4_t v80 = vmulq_f32(v82, v11[13]);
        float32x4_t v81 = vmulq_f32(v82, v12[13]);
      }
      else
      {
        float32x4_t v78 = v14[5];
        float32x4_t v79 = v15[5];
        float32x4_t v80 = v16[5];
        float32x4_t v81 = v17[5];
      }
    }
    else
    {
      float32x4_t v81 = 0uLL;
      float32x4_t v80 = 0uLL;
      float32x4_t v79 = 0uLL;
      float32x4_t v78 = 0uLL;
    }
    float32x4_t v83 = vmulq_f32(v30, v34);
    int32x4_t v84 = (int32x4_t)vmulq_f32(v31, v36);
    float32x4_t v85 = vmulq_f32(v32, v37);
    float32x4_t v86 = vmulq_f32(v33, v38);
    v87.i64[0] = vzip1q_s32((int32x4_t)v83, v84).u64[0];
    v87.i64[1] = __PAIR64__(v86.u32[0], v85.u32[0]);
    v88.i64[0] = vtrn2q_s32((int32x4_t)v83, v84).u64[0];
    v88.i64[1] = __PAIR64__(v86.u32[1], v85.u32[1]);
    v83.i64[0] = vzip2q_s32((int32x4_t)v83, v84).u64[0];
    v83.i64[1] = __PAIR64__(v86.u32[2], v85.u32[2]);
    float32x4_t v89 = vaddq_f32(v83, vaddq_f32(v87, v88));
    if (v89.f32[0] <= 0.0 && v89.f32[1] <= 0.0 && v89.f32[2] <= 0.0 && v89.f32[3] <= 0.0)
    {
      float32x4_t v29 = 0uLL;
      float32x4_t v1510 = 0u;
      if (v1586)
      {
        if (v1499)
        {
          float32x4_t v78 = vmulq_n_f32(v78, v35.f32[0]);
          float32x4_t v79 = vmulq_lane_f32(v79, *(float32x2_t *)v35.f32, 1);
          float32x4_t v80 = vmulq_laneq_f32(v80, v35, 2);
          float32x4_t v81 = vmulq_laneq_f32(v81, v35, 3);
        }
        float32x4_t v23 = vaddq_f32(v23, v78);
        float32x4_t v24 = vaddq_f32(v24, v79);
        float32x4_t v25 = vaddq_f32(v25, v80);
        float32x4_t v26 = vaddq_f32(v26, v81);
      }
LABEL_71:
      float32x4_t v1504 = v29;
      float32x4_t v1507 = v29;
      float32x4_t v1502 = v29;
      if ((v7 & 2) == 0) {
        goto LABEL_195;
      }
      goto LABEL_72;
    }
    float32x4_t v1508 = v38;
    if ((v7 & 0x400) != 0)
    {
      float32x4_t v155 = *(float32x4_t *)(v5 + 12560);
      float32x4_t v112 = vmulq_f32(v155, v4[13]);
      float32x4_t v113 = vmulq_f32(v155, v10[13]);
      float32x4_t v114 = vmulq_f32(v155, v11[13]);
      float32x4_t v115 = vmulq_f32(v155, v12[13]);
    }
    else
    {
      float32x4_t v112 = v14[6];
      float32x4_t v113 = v15[6];
      float32x4_t v114 = v16[6];
      float32x4_t v115 = v17[6];
    }
    float32x4_t v156 = vmulq_n_f32(v112, fmaxf(v89.f32[0], 0.0));
    float32x4_t v157 = vmulq_n_f32(v113, fmaxf(v89.f32[1], 0.0));
    float32x4_t v158 = vmulq_n_f32(v114, fmaxf(v89.f32[2], 0.0));
    float32x4_t v159 = vmulq_n_f32(v115, fmaxf(v89.f32[3], 0.0));
    if (v1586)
    {
      float32x4_t v156 = vaddq_f32(v78, v156);
      float32x4_t v157 = vaddq_f32(v79, v157);
      float32x4_t v158 = vaddq_f32(v80, v158);
      float32x4_t v159 = vaddq_f32(v81, v159);
    }
    float32x4_t v1463 = v157;
    float32x4_t v1478 = v156;
    float32x4_t v1446 = v159;
    float32x4_t v1454 = v158;
    if ((v6 & 0x20) != 0)
    {
      float32x4_t v173 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v30, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v30, 0xCuLL)));
      int32x4_t v174 = (int32x4_t)vmlsq_f32(vmulq_f32(v173, v34), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v34, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v34, 0xCuLL))), v30);
      int32x4_t v175 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v174, 0xCuLL);
      float32x4_t v176 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v31, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v31, 0xCuLL)));
      float32x4_t v177 = vmlsq_f32(vmulq_f32(v176, v36), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v36, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v36, 0xCuLL))), v31);
      int32x4_t v178 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v177, 0xCuLL);
      float32x4_t v179 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v32, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v32, 0xCuLL)));
      int32x4_t v180 = (int32x4_t)vmlsq_f32(vmulq_f32(v179, v37), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v37, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v37, 0xCuLL))), v32);
      int32x4_t v181 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v180, 0xCuLL);
      float32x4_t v182 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v33, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v33, 0xCuLL)));
      int32x4_t v183 = (int32x4_t)vmlsq_f32(vmulq_f32(v182, v1508), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1508, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1508, 0xCuLL))), v33);
      int32x4_t v184 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v183, 0xCuLL);
      int32x4_t v185 = (int32x4_t)vmlsq_f32(vmulq_f32(v173, (float32x4_t)vrev64q_s32(vuzp1q_s32(v174, v175))), (float32x4_t)vextq_s8((int8x16_t)v175, (int8x16_t)vrev64q_s32(v175), 8uLL), v30);
      int32x4_t v186 = (int32x4_t)vmlsq_f32(vmulq_f32(v176, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v177, v178))), (float32x4_t)vextq_s8((int8x16_t)v178, (int8x16_t)vrev64q_s32(v178), 8uLL), v31);
      int32x4_t v187 = (int32x4_t)vmlsq_f32(vmulq_f32(v179, (float32x4_t)vrev64q_s32(vuzp1q_s32(v180, v181))), (float32x4_t)vextq_s8((int8x16_t)v181, (int8x16_t)vrev64q_s32(v181), 8uLL), v32);
      int32x4_t v188 = (int32x4_t)vmlsq_f32(vmulq_f32(v182, (float32x4_t)vrev64q_s32(vuzp1q_s32(v183, v184))), (float32x4_t)vextq_s8((int8x16_t)v184, (int8x16_t)vrev64q_s32(v184), 8uLL), v33);
      v177.i64[0] = 0x4000000040000000;
      v177.i64[1] = 0x4000000040000000;
      float32x4_t v189 = vmlaq_f32(v34, v177, (float32x4_t)vrev64q_s32(vuzp1q_s32(v185, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v185, 0xCuLL))));
      float32x4_t v190 = vmlaq_f32(v36, v177, (float32x4_t)vrev64q_s32(vuzp1q_s32(v186, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v186, 0xCuLL))));
      float32x4_t v191 = vmlaq_f32(v37, v177, (float32x4_t)vrev64q_s32(vuzp1q_s32(v187, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v187, 0xCuLL))));
      float32x4_t v192 = vmlaq_f32(v1508, v177, (float32x4_t)vrev64q_s32(vuzp1q_s32(v188, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v188, 0xCuLL))));
      if ((v6 & 8) != 0)
      {
        float32x4_t v215 = vmulq_f32(v1584, v1584);
        int32x4_t v216 = (int32x4_t)vmulq_f32(v1580, v1580);
        float32x4_t v217 = vmulq_f32(v1582, v1582);
        float32x4_t v218 = vmulq_f32(v22, v22);
        v219.i64[0] = vzip1q_s32((int32x4_t)v215, v216).u64[0];
        v219.i64[1] = __PAIR64__(v218.u32[0], v217.u32[0]);
        v220.i64[0] = vtrn2q_s32((int32x4_t)v215, v216).u64[0];
        v220.i64[1] = __PAIR64__(v218.u32[1], v217.u32[1]);
        v215.i64[0] = vzip2q_s32((int32x4_t)v215, v216).u64[0];
        v215.i64[1] = __PAIR64__(v218.u32[2], v217.u32[2]);
        __asm { FMOV            V7.4S, #1.0 }
        float32x4_t v222 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v215, vaddq_f32(v219, v220))));
        float32x4_t v223 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1584), v222.f32[0]), v189);
        int32x4_t v224 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v222.f32, 1), v190);
        float32x4_t v225 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1582), v222, 2), v191);
        float32x4_t v226 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v22), v222, 3), v192);
        v217.i64[0] = vzip1q_s32((int32x4_t)v223, v224).u64[0];
        v217.i64[1] = __PAIR64__(v226.u32[0], v225.u32[0]);
        v218.i64[0] = vtrn2q_s32((int32x4_t)v223, v224).u64[0];
        v218.i64[1] = __PAIR64__(v226.u32[1], v225.u32[1]);
        v223.i64[0] = vzip2q_s32((int32x4_t)v223, v224).u64[0];
        v223.i64[1] = __PAIR64__(v226.u32[2], v225.u32[2]);
        float32x4_t v193 = vaddq_f32(v223, vaddq_f32(v217, v218));
      }
      else
      {
        v193.i64[0] = vzip2q_s32((int32x4_t)v189, (int32x4_t)v190).u64[0];
        v193.i64[1] = __PAIR64__(v192.u32[2], v191.u32[2]);
      }
      float32x4_t v159 = v1446;
      float32x4_t v158 = v1454;
      float v9 = 1.0;
    }
    else
    {
      if (v1328)
      {
        if ((v6 & 8) != 0)
        {
          float32x4_t v247 = vmulq_f32(v1584, v1584);
          int32x4_t v248 = (int32x4_t)vmulq_f32(v1580, v1580);
          float32x4_t v249 = vmulq_f32(v1582, v1582);
          v250.i64[0] = vzip1q_s32((int32x4_t)v247, v248).u64[0];
          v250.i32[2] = v249.i32[0];
          float32x4_t v251 = vmulq_f32(v22, v22);
          v250.i32[3] = v251.i32[0];
          v252.i64[0] = vtrn2q_s32((int32x4_t)v247, v248).u64[0];
          v252.i64[1] = __PAIR64__(v251.u32[1], v249.u32[1]);
          v247.i64[0] = vzip2q_s32((int32x4_t)v247, v248).u64[0];
          v247.i64[1] = __PAIR64__(v251.u32[2], v249.u32[2]);
          __asm { FMOV            V16.4S, #1.0 }
          float32x4_t v254 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v247, vaddq_f32(v250, v252))));
          float32x4_t v160 = vmulq_n_f32(vnegq_f32(v1584), v254.f32[0]);
          float32x4_t v161 = vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v254.f32, 1);
          float32x4_t v162 = vmulq_laneq_f32(vnegq_f32(v1582), v254, 2);
          float32x4_t v163 = vmulq_laneq_f32(vnegq_f32(v22), v254, 3);
        }
        else
        {
          float32x4_t v160 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v161 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v162 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v163 = (float32x4_t)xmmword_227DC2100;
        }
        float32x4_t v255 = vaddq_f32(v34, v160);
        float32x4_t v256 = vaddq_f32(v36, v161);
        float32x4_t v257 = vaddq_f32(v37, v162);
        float32x4_t v258 = vaddq_f32(v1508, v163);
        float32x4_t v259 = vmulq_f32(v255, v255);
        int32x4_t v260 = (int32x4_t)vmulq_f32(v256, v256);
        float32x4_t v261 = vmulq_f32(v257, v257);
        v262.i64[0] = vzip1q_s32((int32x4_t)v259, v260).u64[0];
        v262.i32[2] = v261.i32[0];
        float32x4_t v263 = vmulq_f32(v258, v258);
        v262.i32[3] = v263.i32[0];
        v264.i64[0] = vtrn2q_s32((int32x4_t)v259, v260).u64[0];
        v264.i64[1] = __PAIR64__(v263.u32[1], v261.u32[1]);
        v259.i64[0] = vzip2q_s32((int32x4_t)v259, v260).u64[0];
        v259.i64[1] = __PAIR64__(v263.u32[2], v261.u32[2]);
        __asm { FMOV            V17.4S, #1.0 }
        float32x4_t v266 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v259, vaddq_f32(v262, v264))));
        float32x4_t v239 = vmulq_n_f32(v255, v266.f32[0]);
        float32x4_t v240 = vmulq_lane_f32(v256, *(float32x2_t *)v266.f32, 1);
        float32x4_t v241 = vmulq_laneq_f32(v257, v266, 2);
        float32x4_t v242 = vmulq_laneq_f32(v258, v266, 3);
      }
      else
      {
        float32x4_t v239 = *(float32x4_t *)(v5 + 12672);
        float32x4_t v240 = v239;
        float32x4_t v241 = v239;
        float32x4_t v242 = v239;
      }
      float v9 = 1.0;
      float32x4_t v267 = vmulq_f32(v30, v239);
      int32x4_t v268 = (int32x4_t)vmulq_f32(v31, v240);
      float32x4_t v269 = vmulq_f32(v32, v241);
      float32x4_t v270 = vmulq_f32(v33, v242);
      v271.i64[0] = vzip1q_s32((int32x4_t)v267, v268).u64[0];
      v271.i64[1] = __PAIR64__(v270.u32[0], v269.u32[0]);
      v272.i64[0] = vtrn2q_s32((int32x4_t)v267, v268).u64[0];
      v272.i64[1] = __PAIR64__(v270.u32[1], v269.u32[1]);
      v267.i64[0] = vzip2q_s32((int32x4_t)v267, v268).u64[0];
      v267.i64[1] = __PAIR64__(v270.u32[2], v269.u32[2]);
      float32x4_t v193 = vaddq_f32(v267, vaddq_f32(v271, v272));
    }
    if (v89.f32[0] <= 0.0) {
      float v273 = 0.0;
    }
    else {
      float v273 = v193.f32[0];
    }
    if (v89.f32[1] <= 0.0) {
      float v274 = 0.0;
    }
    else {
      float v274 = v193.f32[1];
    }
    if (v89.f32[2] <= 0.0) {
      float v275 = 0.0;
    }
    else {
      float v275 = v193.f32[2];
    }
    if (v89.f32[3] <= 0.0) {
      float v276 = 0.0;
    }
    else {
      float v276 = v193.f32[3];
    }
    float32x4_t v1510 = 0u;
    if (v273 > 0.0 || v274 > 0.0 || v275 > 0.0 || v276 > 0.0)
    {
      float32x4_t v1509 = v35;
      float32x4_t v1518 = v26;
      float32x4_t v1534 = v25;
      float32x4_t v1550 = v24;
      float32x4_t v1566 = v23;
      float v279 = fmaxf(v274, 0.0);
      float v280 = fmaxf(v275, 0.0);
      float v281 = v15[4].f32[0];
      float v282 = fmaxf(v276, 0.0);
      float v283 = v16[4].f32[0];
      float v284 = v17[4].f32[0];
      int v6 = v16;
      v285 = v15;
      uint64_t v286 = v17;
      LODWORD(v1505) = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t, float, float32_t))(v5 + 560))(a1, fmaxf(v273, 0.0), v14[4].f32[0]));
      LODWORD(v1503) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v279, v281));
      LODWORD(v1438) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v280, v283));
      a1 = (*(uint64_t (**)(float, float))(v5 + 560))(v282, v284);
      if ((v7 & 0x800) != 0)
      {
        v290 = v285;
        uint64_t v288 = v14;
        float32x4_t v294 = *(float32x4_t *)(v5 + 12576);
        float32x4_t v289 = vmulq_f32(v294, v4[13]);
        float32x4_t v291 = vmulq_f32(v294, v10[13]);
        float32x4_t v292 = vmulq_f32(v294, v11[13]);
        float32x4_t v293 = vmulq_f32(v294, v12[13]);
      }
      else
      {
        uint64_t v288 = v14;
        float32x4_t v289 = v14[7];
        v290 = v285;
        float32x4_t v291 = v285[7];
        float32x4_t v292 = v6[7];
        float32x4_t v293 = v286[7];
      }
      unsigned int v17 = v286;
      uint64_t v16 = v6;
      float32x4_t v35 = v1509;
      float32x4_t v278 = v1463;
      float32x4_t v277 = v1478;
      float32x4_t v159 = v1446;
      float32x4_t v158 = v1454;
      float32x4_t v295 = vmulq_n_f32(v289, v1505);
      float32x4_t v296 = vmulq_n_f32(v291, v1503);
      float32x4_t v297 = vmulq_n_f32(v292, v1438);
      float32x4_t v298 = vmulq_n_f32(v293, v287);
      LOWORD(v6) = v1462;
      float32x4_t v24 = v1550;
      float32x4_t v23 = v1566;
      float32x4_t v25 = v1534;
      float32x4_t v26 = v1518;
      float32x4_t v22 = v1512;
      if ((v1462 & 0x10) != 0)
      {
        int v14 = v288;
        uint64_t v15 = v290;
        if (v1499)
        {
          float32x4_t v295 = vmulq_n_f32(v295, v1509.f32[0]);
          float32x4_t v296 = vmulq_lane_f32(v296, *(float32x2_t *)v1509.f32, 1);
          float32x4_t v297 = vmulq_laneq_f32(v297, v1509, 2);
          float32x4_t v298 = vmulq_laneq_f32(v298, v1509, 3);
        }
        float32x4_t v1507 = vaddq_f32(v296, (float32x4_t)0);
        float32x4_t v1510 = vaddq_f32(v295, (float32x4_t)0);
        float32x4_t v1502 = vaddq_f32(v298, (float32x4_t)0);
        float32x4_t v1504 = vaddq_f32(v297, (float32x4_t)0);
        if (v1499)
        {
LABEL_160:
          float32x4_t v277 = vmulq_n_f32(v277, v35.f32[0]);
          float32x4_t v278 = vmulq_lane_f32(v278, *(float32x2_t *)v35.f32, 1);
          float32x4_t v158 = vmulq_laneq_f32(v158, v35, 2);
          float32x4_t v159 = vmulq_laneq_f32(v159, v35, 3);
        }
      }
      else
      {
        float32x4_t v277 = vaddq_f32(v1478, v295);
        float32x4_t v278 = vaddq_f32(v1463, v296);
        float32x4_t v158 = vaddq_f32(v1454, v297);
        float32x4_t v159 = vaddq_f32(v1446, v298);
        float32x4_t v1504 = 0u;
        float32x4_t v1507 = 0u;
        float32x4_t v1502 = 0u;
        int v14 = v288;
        uint64_t v15 = v290;
        if (v1499) {
          goto LABEL_160;
        }
      }
    }
    else
    {
      float32x4_t v1504 = 0uLL;
      float32x4_t v1507 = 0uLL;
      float32x4_t v1502 = 0uLL;
      float32x4_t v278 = v1463;
      float32x4_t v277 = v1478;
      if (v1499) {
        goto LABEL_160;
      }
    }
    float32x4_t v23 = vaddq_f32(v23, v277);
    float32x4_t v24 = vaddq_f32(v24, v278);
    float32x4_t v25 = vaddq_f32(v25, v158);
    float32x4_t v26 = vaddq_f32(v26, v159);
    if ((v7 & 2) == 0) {
      goto LABEL_195;
    }
LABEL_72:
    float32x4_t v90 = v4[7];
    float32x4_t v91 = v10[7];
    float32x4_t v92 = v11[7];
    float32x4_t v93 = v12[7];
    if ((v6 & 2) != 0)
    {
      float32x4_t v90 = vnegq_f32(v90);
      float32x4_t v91 = vnegq_f32(v91);
      float32x4_t v92 = vnegq_f32(v92);
      float32x4_t v93 = vnegq_f32(v93);
    }
    float32x4_t v94 = *(float32x4_t *)(v5 + 12800);
    float32x4_t v95 = 0uLL;
    if (((unsigned __int16)v6 & 0x200) != 0)
    {
      float32x4_t v99 = vsubq_f32(v94, v1584);
      float32x4_t v100 = vsubq_f32(v94, v1580);
      float32x4_t v101 = vsubq_f32(v94, v1582);
      float32x4_t v102 = vsubq_f32(v94, v22);
      float32x4_t v103 = vmulq_f32(v99, v99);
      int32x4_t v104 = (int32x4_t)vmulq_f32(v100, v100);
      float32x4_t v105 = vmulq_f32(v101, v101);
      v106.i64[0] = vzip1q_s32((int32x4_t)v103, v104).u64[0];
      v106.i32[2] = v105.i32[0];
      float32x4_t v107 = vmulq_f32(v102, v102);
      v106.i32[3] = v107.i32[0];
      v108.i64[0] = vtrn2q_s32((int32x4_t)v103, v104).u64[0];
      v108.i64[1] = __PAIR64__(v107.u32[1], v105.u32[1]);
      v103.i64[0] = vzip2q_s32((int32x4_t)v103, v104).u64[0];
      v103.i64[1] = __PAIR64__(v107.u32[2], v105.u32[2]);
      float32x4_t v109 = vsqrtq_f32(vaddq_f32(v103, vaddq_f32(v106, v108)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v111 = vdivq_f32(_Q0, v109);
      float32x4_t v94 = vmulq_n_f32(v99, v111.f32[0]);
      float32x4_t v96 = vmulq_lane_f32(v100, *(float32x2_t *)v111.f32, 1);
      float32x4_t v97 = vmulq_laneq_f32(v101, v111, 2);
      float32x4_t v98 = vmulq_laneq_f32(v102, v111, 3);
      if ((v7 & 0x2000000) != 0)
      {
        float32x4_t v116 = vdivq_f32(_Q0, v111);
        float32x4_t v117 = v1334;
        float32x4_t v118 = vld1q_dup_f32(v117);
        float32x4_t v119 = v1333;
        float32x4_t v120 = vld1q_dup_f32(v119);
        float32x4_t v95 = vdivq_f32(_Q0, vmlaq_f32(v118, vmlaq_n_f32(v120, v116, *(float *)(v5 + 12792)), v116));
        if ((v7 & 0x20000) == 0)
        {
LABEL_79:
          if (!v1498) {
            goto LABEL_92;
          }
          goto LABEL_88;
        }
      }
      else if ((v7 & 0x20000) == 0)
      {
        goto LABEL_79;
      }
    }
    else
    {
      float32x4_t v96 = *(float32x4_t *)(v5 + 12800);
      float32x4_t v97 = v96;
      float32x4_t v98 = v96;
      if ((v7 & 0x20000) == 0) {
        goto LABEL_79;
      }
    }
    float32x4_t v121 = vnegq_f32(*(float32x4_t *)(v5 + 12816));
    float32x4_t v122 = vmulq_f32(v94, v121);
    int32x4_t v123 = (int32x4_t)vmulq_f32(v96, v121);
    float32x4_t v124 = vmulq_f32(v97, v121);
    float32x4_t v125 = vmulq_f32(v98, v121);
    v126.i64[0] = vzip1q_s32((int32x4_t)v122, v123).u64[0];
    v126.i64[1] = __PAIR64__(v125.u32[0], v124.u32[0]);
    v127.i64[0] = vtrn2q_s32((int32x4_t)v122, v123).u64[0];
    v127.i64[1] = __PAIR64__(v125.u32[1], v124.u32[1]);
    v122.i64[0] = vzip2q_s32((int32x4_t)v122, v123).u64[0];
    v122.i64[1] = __PAIR64__(v125.u32[2], v124.u32[2]);
    float32x4_t v128 = vaddq_f32(v122, vaddq_f32(v126, v127));
    float32x4_t v129 = v1347;
    float32x4_t v130 = vld1q_dup_f32(v129);
    int32x4_t v131 = vcgeq_f32(v128, v130);
    int32x4_t v132 = (int32x4_t)vmvnq_s8((int8x16_t)v131);
    *(int16x4_t *)v132.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v132), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v132.i8))
    {
      float32x4_t v95 = 0uLL;
      if (!v1498) {
        goto LABEL_92;
      }
    }
    else
    {
      v132.i32[0] = 0;
      int8x16_t v1383 = (int8x16_t)v131;
      float32x4_t v1391 = v96;
      v131.i32[0] = v7 & 0x2000000;
      int8x16_t v133 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v131, v132), 0);
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1375 = (float32x4_t)vbslq_s8(v133, _Q1, (int8x16_t)v95);
      float v135 = *(float *)(v5 + 12796);
      float32x4_t v1549 = v24;
      float32x4_t v1565 = v23;
      float32x4_t v1533 = v25;
      float32x4_t v1517 = v26;
      float32x4_t v1477 = v128;
      float32x4_t v1427 = v94;
      float32x4_t v1399 = v97;
      float32x4_t v1413 = v98;
      unsigned int v1368 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(v5 + 560))(a1));
      unsigned int v1361 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1477.f32[1], v135));
      unsigned int v1354 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1477.f32[2], v135));
      *(float *)&unsigned int v136 = (*(float (**)(float, float))(v5 + 560))(v1477.f32[3], v135);
      float32x4_t v96 = v1391;
      float32x4_t v97 = v1399;
      float32x4_t v98 = v1413;
      float32x4_t v94 = v1427;
      float32x4_t v22 = v1512;
      float32x4_t v26 = v1517;
      float32x4_t v25 = v1533;
      float32x4_t v24 = v1549;
      float32x4_t v23 = v1565;
      unsigned int v17 = v1514;
      v137.i64[0] = __PAIR64__(v1361, v1368);
      v137.i64[1] = __PAIR64__(v136, v1354);
      float32x4_t v95 = vmulq_f32(v1375, (float32x4_t)vandq_s8(v137, v1383));
      if (!v1498) {
        goto LABEL_92;
      }
    }
LABEL_88:
    if (v95.f32[0] <= 0.0 && v95.f32[1] <= 0.0 && v95.f32[2] <= 0.0 && v95.f32[3] <= 0.0) {
      goto LABEL_195;
    }
LABEL_92:
    if (v1586)
    {
      if ((v7 & 0x200) != 0)
      {
        float32x4_t v142 = *(float32x4_t *)(v5 + 12704);
        float32x4_t v138 = vmulq_f32(v142, v4[13]);
        float32x4_t v139 = vmulq_f32(v142, v10[13]);
        float32x4_t v140 = vmulq_f32(v142, v11[13]);
        float32x4_t v141 = vmulq_f32(v142, v12[13]);
      }
      else
      {
        float32x4_t v138 = v14[8];
        float32x4_t v139 = v15[8];
        float32x4_t v140 = v16[8];
        float32x4_t v141 = v17[8];
      }
    }
    else
    {
      float32x4_t v141 = 0uLL;
      float32x4_t v140 = 0uLL;
      float32x4_t v139 = 0uLL;
      float32x4_t v138 = 0uLL;
    }
    float32x4_t v143 = vmulq_f32(v90, v94);
    int32x4_t v144 = (int32x4_t)vmulq_f32(v91, v96);
    float32x4_t v145 = vmulq_f32(v92, v97);
    float32x4_t v146 = vmulq_f32(v93, v98);
    v147.i64[0] = vzip1q_s32((int32x4_t)v143, v144).u64[0];
    v147.i64[1] = __PAIR64__(v146.u32[0], v145.u32[0]);
    v148.i64[0] = vtrn2q_s32((int32x4_t)v143, v144).u64[0];
    v148.i64[1] = __PAIR64__(v146.u32[1], v145.u32[1]);
    v143.i64[0] = vzip2q_s32((int32x4_t)v143, v144).u64[0];
    v143.i64[1] = __PAIR64__(v146.u32[2], v145.u32[2]);
    float32x4_t v149 = vaddq_f32(v143, vaddq_f32(v147, v148));
    if (v149.f32[0] > 0.0 || v149.f32[1] > 0.0 || v149.f32[2] > 0.0 || v149.f32[3] > 0.0)
    {
      float32x4_t v150 = v97;
      if ((v7 & 0x400) != 0)
      {
        float32x4_t v164 = *(float32x4_t *)(v5 + 12720);
        float32x4_t v151 = vmulq_f32(v164, v4[13]);
        float32x4_t v152 = vmulq_f32(v164, v10[13]);
        float32x4_t v153 = vmulq_f32(v164, v11[13]);
        float32x4_t v154 = vmulq_f32(v164, v12[13]);
      }
      else
      {
        float32x4_t v151 = v14[9];
        float32x4_t v152 = v15[9];
        float32x4_t v153 = v16[9];
        float32x4_t v154 = v17[9];
      }
      float32x4_t v165 = vmulq_n_f32(v151, fmaxf(v149.f32[0], 0.0));
      float32x4_t v166 = vmulq_n_f32(v152, fmaxf(v149.f32[1], 0.0));
      float32x4_t v167 = vmulq_n_f32(v153, fmaxf(v149.f32[2], 0.0));
      float32x4_t v168 = vmulq_n_f32(v154, fmaxf(v149.f32[3], 0.0));
      if (v1586)
      {
        float32x4_t v165 = vaddq_f32(v138, v165);
        float32x4_t v166 = vaddq_f32(v139, v166);
        float32x4_t v167 = vaddq_f32(v140, v167);
        float32x4_t v168 = vaddq_f32(v141, v168);
      }
      float32x4_t v1464 = v166;
      float32x4_t v1479 = v165;
      float32x4_t v1447 = v168;
      float32x4_t v1455 = v167;
      if ((v6 & 0x20) != 0)
      {
        float32x4_t v194 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v90, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v90, 0xCuLL)));
        int32x4_t v195 = (int32x4_t)vmlsq_f32(vmulq_f32(v194, v94), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v94, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v94, 0xCuLL))), v90);
        int32x4_t v196 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v195, 0xCuLL);
        float32x4_t v197 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v91, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v91, 0xCuLL)));
        float32x4_t v198 = vmlsq_f32(vmulq_f32(v197, v96), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v96, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v96, 0xCuLL))), v91);
        int32x4_t v199 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v198, 0xCuLL);
        float32x4_t v200 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v92, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v92, 0xCuLL)));
        int32x4_t v201 = (int32x4_t)vmlsq_f32(vmulq_f32(v200, v150), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v150, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v150, 0xCuLL))), v92);
        int32x4_t v202 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v201, 0xCuLL);
        float32x4_t v203 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v93, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v93, 0xCuLL)));
        int32x4_t v204 = (int32x4_t)vmlsq_f32(vmulq_f32(v203, v98), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v98, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v98, 0xCuLL))), v93);
        int32x4_t v205 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v204, 0xCuLL);
        int32x4_t v206 = (int32x4_t)vmlsq_f32(vmulq_f32(v194, (float32x4_t)vrev64q_s32(vuzp1q_s32(v195, v196))), (float32x4_t)vextq_s8((int8x16_t)v196, (int8x16_t)vrev64q_s32(v196), 8uLL), v90);
        int32x4_t v207 = (int32x4_t)vmlsq_f32(vmulq_f32(v197, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v198, v199))), (float32x4_t)vextq_s8((int8x16_t)v199, (int8x16_t)vrev64q_s32(v199), 8uLL), v91);
        int32x4_t v208 = (int32x4_t)vmlsq_f32(vmulq_f32(v200, (float32x4_t)vrev64q_s32(vuzp1q_s32(v201, v202))), (float32x4_t)vextq_s8((int8x16_t)v202, (int8x16_t)vrev64q_s32(v202), 8uLL), v92);
        int32x4_t v209 = (int32x4_t)vmlsq_f32(vmulq_f32(v203, (float32x4_t)vrev64q_s32(vuzp1q_s32(v204, v205))), (float32x4_t)vextq_s8((int8x16_t)v205, (int8x16_t)vrev64q_s32(v205), 8uLL), v93);
        v198.i64[0] = 0x4000000040000000;
        v198.i64[1] = 0x4000000040000000;
        float32x4_t v210 = vmlaq_f32(v94, v198, (float32x4_t)vrev64q_s32(vuzp1q_s32(v206, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v206, 0xCuLL))));
        float32x4_t v211 = vmlaq_f32(v96, v198, (float32x4_t)vrev64q_s32(vuzp1q_s32(v207, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v207, 0xCuLL))));
        float32x4_t v212 = vmlaq_f32(v150, v198, (float32x4_t)vrev64q_s32(vuzp1q_s32(v208, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v208, 0xCuLL))));
        float32x4_t v213 = vmlaq_f32(v98, v198, (float32x4_t)vrev64q_s32(vuzp1q_s32(v209, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v209, 0xCuLL))));
        if ((v6 & 8) != 0)
        {
          float32x4_t v227 = vmulq_f32(v1584, v1584);
          int32x4_t v228 = (int32x4_t)vmulq_f32(v1580, v1580);
          float32x4_t v229 = vmulq_f32(v1582, v1582);
          float32x4_t v22 = v1512;
          float32x4_t v230 = vmulq_f32(v22, v22);
          v231.i64[0] = vzip1q_s32((int32x4_t)v227, v228).u64[0];
          v231.i64[1] = __PAIR64__(v230.u32[0], v229.u32[0]);
          v232.i64[0] = vtrn2q_s32((int32x4_t)v227, v228).u64[0];
          v232.i64[1] = __PAIR64__(v230.u32[1], v229.u32[1]);
          v227.i64[0] = vzip2q_s32((int32x4_t)v227, v228).u64[0];
          v227.i64[1] = __PAIR64__(v230.u32[2], v229.u32[2]);
          __asm { FMOV            V7.4S, #1.0 }
          float32x4_t v234 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v227, vaddq_f32(v231, v232))));
          float32x4_t v235 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1584), v234.f32[0]), v210);
          int32x4_t v236 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v234.f32, 1), v211);
          float32x4_t v237 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1582), v234, 2), v212);
          float32x4_t v238 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1512), v234, 3), v213);
          v229.i64[0] = vzip1q_s32((int32x4_t)v235, v236).u64[0];
          v229.i64[1] = __PAIR64__(v238.u32[0], v237.u32[0]);
          v230.i64[0] = vtrn2q_s32((int32x4_t)v235, v236).u64[0];
          v230.i64[1] = __PAIR64__(v238.u32[1], v237.u32[1]);
          v235.i64[0] = vzip2q_s32((int32x4_t)v235, v236).u64[0];
          v235.i64[1] = __PAIR64__(v238.u32[2], v237.u32[2]);
          float32x4_t v214 = vaddq_f32(v235, vaddq_f32(v229, v230));
          float32x4_t v168 = v1447;
          float32x4_t v167 = v1455;
          float v9 = 1.0;
        }
        else
        {
          v214.i64[0] = vzip2q_s32((int32x4_t)v210, (int32x4_t)v211).u64[0];
          v214.i64[1] = __PAIR64__(v213.u32[2], v212.u32[2]);
          float32x4_t v168 = v1447;
          float32x4_t v167 = v1455;
          float v9 = 1.0;
          float32x4_t v22 = v1512;
        }
      }
      else
      {
        if (v1327)
        {
          if ((v6 & 8) != 0)
          {
            float32x4_t v299 = vmulq_f32(v1584, v1584);
            int32x4_t v300 = (int32x4_t)vmulq_f32(v1580, v1580);
            float32x4_t v301 = vmulq_f32(v1582, v1582);
            v302.i64[0] = vzip1q_s32((int32x4_t)v299, v300).u64[0];
            v302.i32[2] = v301.i32[0];
            float32x4_t v303 = vmulq_f32(v1512, v1512);
            v302.i32[3] = v303.i32[0];
            v304.i64[0] = vtrn2q_s32((int32x4_t)v299, v300).u64[0];
            v304.i64[1] = __PAIR64__(v303.u32[1], v301.u32[1]);
            v299.i64[0] = vzip2q_s32((int32x4_t)v299, v300).u64[0];
            v299.i64[1] = __PAIR64__(v303.u32[2], v301.u32[2]);
            __asm { FMOV            V16.4S, #1.0 }
            float32x4_t v306 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v299, vaddq_f32(v302, v304))));
            float32x4_t v169 = vmulq_n_f32(vnegq_f32(v1584), v306.f32[0]);
            float32x4_t v170 = vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v306.f32, 1);
            float32x4_t v171 = vmulq_laneq_f32(vnegq_f32(v1582), v306, 2);
            float32x4_t v172 = vmulq_laneq_f32(vnegq_f32(v1512), v306, 3);
          }
          else
          {
            float32x4_t v169 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v170 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v171 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v172 = (float32x4_t)xmmword_227DC2100;
          }
          float32x4_t v307 = vaddq_f32(v94, v169);
          float32x4_t v308 = vaddq_f32(v96, v170);
          float32x4_t v309 = vaddq_f32(v150, v171);
          float32x4_t v310 = vaddq_f32(v98, v172);
          float32x4_t v311 = vmulq_f32(v307, v307);
          int32x4_t v312 = (int32x4_t)vmulq_f32(v308, v308);
          float32x4_t v313 = vmulq_f32(v309, v309);
          v314.i64[0] = vzip1q_s32((int32x4_t)v311, v312).u64[0];
          v314.i32[2] = v313.i32[0];
          float32x4_t v315 = vmulq_f32(v310, v310);
          v314.i32[3] = v315.i32[0];
          v316.i64[0] = vtrn2q_s32((int32x4_t)v311, v312).u64[0];
          v316.i64[1] = __PAIR64__(v315.u32[1], v313.u32[1]);
          v311.i64[0] = vzip2q_s32((int32x4_t)v311, v312).u64[0];
          v311.i64[1] = __PAIR64__(v315.u32[2], v313.u32[2]);
          __asm { FMOV            V17.4S, #1.0 }
          float32x4_t v318 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v311, vaddq_f32(v314, v316))));
          float32x4_t v243 = vmulq_n_f32(v307, v318.f32[0]);
          float32x4_t v244 = vmulq_lane_f32(v308, *(float32x2_t *)v318.f32, 1);
          float32x4_t v245 = vmulq_laneq_f32(v309, v318, 2);
          float32x4_t v246 = vmulq_laneq_f32(v310, v318, 3);
        }
        else
        {
          float32x4_t v243 = *(float32x4_t *)(v5 + 12832);
          float32x4_t v244 = v243;
          float32x4_t v245 = v243;
          float32x4_t v246 = v243;
        }
        float32x4_t v22 = v1512;
        float32x4_t v319 = vmulq_f32(v90, v243);
        int32x4_t v320 = (int32x4_t)vmulq_f32(v91, v244);
        float32x4_t v321 = vmulq_f32(v92, v245);
        float32x4_t v322 = vmulq_f32(v93, v246);
        v323.i64[0] = vzip1q_s32((int32x4_t)v319, v320).u64[0];
        v323.i64[1] = __PAIR64__(v322.u32[0], v321.u32[0]);
        v324.i64[0] = vtrn2q_s32((int32x4_t)v319, v320).u64[0];
        v324.i64[1] = __PAIR64__(v322.u32[1], v321.u32[1]);
        v319.i64[0] = vzip2q_s32((int32x4_t)v319, v320).u64[0];
        v319.i64[1] = __PAIR64__(v322.u32[2], v321.u32[2]);
        float32x4_t v214 = vaddq_f32(v319, vaddq_f32(v323, v324));
      }
      if (v149.f32[0] <= 0.0) {
        float v325 = 0.0;
      }
      else {
        float v325 = v214.f32[0];
      }
      if (v149.f32[1] <= 0.0) {
        float v326 = 0.0;
      }
      else {
        float v326 = v214.f32[1];
      }
      if (v149.f32[2] <= 0.0) {
        float v327 = 0.0;
      }
      else {
        float v327 = v214.f32[2];
      }
      if (v149.f32[3] <= 0.0) {
        float v328 = 0.0;
      }
      else {
        float v328 = v214.f32[3];
      }
      if (v325 > 0.0 || v326 > 0.0 || v327 > 0.0 || v328 > 0.0)
      {
        float32x4_t v1439 = v95;
        float32x4_t v1519 = v26;
        float32x4_t v1535 = v25;
        float32x4_t v1551 = v24;
        float32x4_t v1567 = v23;
        float v331 = fmaxf(v326, 0.0);
        float v332 = fmaxf(v327, 0.0);
        float v333 = v14[4].f32[0];
        float v334 = v15[4].f32[0];
        float v335 = fmaxf(v328, 0.0);
        float v336 = v16[4].f32[0];
        float v337 = v17[4].f32[0];
        unsigned int v338 = v16;
        uint64_t v339 = v15;
        uint64_t v340 = v14;
        uint64_t v341 = v17;
        LODWORD(v1428) = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t, float, float))(v5 + 560))(a1, fmaxf(v325, 0.0), v333));
        LODWORD(v1414) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v331, v334));
        LODWORD(v1400) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v332, v336));
        a1 = (*(uint64_t (**)(float, float))(v5 + 560))(v335, v337);
        if ((v7 & 0x800) != 0)
        {
          uint64_t v346 = v338;
          uint64_t v343 = v340;
          float32x4_t v349 = *(float32x4_t *)(v5 + 12736);
          float32x4_t v344 = vmulq_f32(v349, v4[13]);
          float32x4_t v345 = vmulq_f32(v349, v10[13]);
          float32x4_t v347 = vmulq_f32(v349, v11[13]);
          float32x4_t v348 = vmulq_f32(v349, v12[13]);
        }
        else
        {
          uint64_t v343 = v340;
          float32x4_t v344 = v340[10];
          float32x4_t v345 = v339[10];
          uint64_t v346 = v338;
          float32x4_t v347 = v338[10];
          float32x4_t v348 = v341[10];
        }
        unsigned int v17 = v341;
        uint64_t v15 = v339;
        float32x4_t v95 = v1439;
        float32x4_t v168 = v1447;
        float32x4_t v330 = v1464;
        float32x4_t v329 = v1479;
        float32x4_t v167 = v1455;
        float32x4_t v350 = vmulq_n_f32(v344, v1428);
        float32x4_t v351 = vmulq_n_f32(v345, v1414);
        float32x4_t v352 = vmulq_n_f32(v347, v1400);
        float32x4_t v353 = vmulq_n_f32(v348, v342);
        LOWORD(v6) = v1462;
        float32x4_t v24 = v1551;
        float32x4_t v23 = v1567;
        float32x4_t v25 = v1535;
        float32x4_t v26 = v1519;
        float32x4_t v22 = v1512;
        if ((v1462 & 0x10) != 0)
        {
          int v14 = v343;
          uint64_t v16 = v346;
          if (v1498)
          {
            float32x4_t v350 = vmulq_n_f32(v350, v1439.f32[0]);
            float32x4_t v351 = vmulq_lane_f32(v351, *(float32x2_t *)v1439.f32, 1);
            float32x4_t v352 = vmulq_laneq_f32(v352, v1439, 2);
            float32x4_t v353 = vmulq_laneq_f32(v353, v1439, 3);
          }
          float32x4_t v1507 = vaddq_f32(v1507, v351);
          float32x4_t v1510 = vaddq_f32(v1510, v350);
          float32x4_t v1502 = vaddq_f32(v1502, v353);
          float32x4_t v1504 = vaddq_f32(v1504, v352);
          if (!v1498) {
            goto LABEL_194;
          }
        }
        else
        {
          float32x4_t v329 = vaddq_f32(v1479, v350);
          float32x4_t v330 = vaddq_f32(v1464, v351);
          float32x4_t v167 = vaddq_f32(v1455, v352);
          float32x4_t v168 = vaddq_f32(v1447, v353);
          int v14 = v343;
          uint64_t v16 = v346;
          if (!v1498) {
            goto LABEL_194;
          }
        }
      }
      else
      {
        float32x4_t v330 = v1464;
        float32x4_t v329 = v1479;
        if (!v1498) {
          goto LABEL_194;
        }
      }
      float32x4_t v329 = vmulq_n_f32(v329, v95.f32[0]);
      float32x4_t v330 = vmulq_lane_f32(v330, *(float32x2_t *)v95.f32, 1);
      float32x4_t v167 = vmulq_laneq_f32(v167, v95, 2);
      float32x4_t v168 = vmulq_laneq_f32(v168, v95, 3);
LABEL_194:
      float32x4_t v23 = vaddq_f32(v23, v329);
      float32x4_t v24 = vaddq_f32(v24, v330);
      float32x4_t v25 = vaddq_f32(v25, v167);
      float32x4_t v26 = vaddq_f32(v26, v168);
      goto LABEL_195;
    }
    if (v1586)
    {
      if (v1498)
      {
        float32x4_t v138 = vmulq_n_f32(v138, v95.f32[0]);
        float32x4_t v139 = vmulq_lane_f32(v139, *(float32x2_t *)v95.f32, 1);
        float32x4_t v140 = vmulq_laneq_f32(v140, v95, 2);
        float32x4_t v141 = vmulq_laneq_f32(v141, v95, 3);
      }
      float32x4_t v23 = vaddq_f32(v23, v138);
      float32x4_t v24 = vaddq_f32(v24, v139);
      float32x4_t v25 = vaddq_f32(v25, v140);
      float32x4_t v26 = vaddq_f32(v26, v141);
    }
LABEL_195:
    if ((v7 & 4) == 0) {
      goto LABEL_227;
    }
    float32x4_t v354 = v4[7];
    float32x4_t v355 = v10[7];
    float32x4_t v356 = v11[7];
    float32x4_t v357 = v12[7];
    if ((v6 & 2) != 0)
    {
      float32x4_t v354 = vnegq_f32(v354);
      float32x4_t v355 = vnegq_f32(v355);
      float32x4_t v356 = vnegq_f32(v356);
      float32x4_t v357 = vnegq_f32(v357);
    }
    float32x4_t v358 = *(float32x4_t *)(v5 + 12960);
    float32x4_t v359 = 0uLL;
    if (((unsigned __int16)v6 & 0x400) != 0)
    {
      float32x4_t v363 = vsubq_f32(v358, v1584);
      float32x4_t v364 = vsubq_f32(v358, v1580);
      float32x4_t v365 = vsubq_f32(v358, v1582);
      float32x4_t v366 = vsubq_f32(v358, v22);
      float32x4_t v367 = vmulq_f32(v363, v363);
      int32x4_t v368 = (int32x4_t)vmulq_f32(v364, v364);
      float32x4_t v369 = vmulq_f32(v365, v365);
      v370.i64[0] = vzip1q_s32((int32x4_t)v367, v368).u64[0];
      v370.i32[2] = v369.i32[0];
      float32x4_t v371 = vmulq_f32(v366, v366);
      v370.i32[3] = v371.i32[0];
      v372.i64[0] = vtrn2q_s32((int32x4_t)v367, v368).u64[0];
      v372.i64[1] = __PAIR64__(v371.u32[1], v369.u32[1]);
      v367.i64[0] = vzip2q_s32((int32x4_t)v367, v368).u64[0];
      v367.i64[1] = __PAIR64__(v371.u32[2], v369.u32[2]);
      float32x4_t v373 = vsqrtq_f32(vaddq_f32(v367, vaddq_f32(v370, v372)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v375 = vdivq_f32(_Q0, v373);
      float32x4_t v358 = vmulq_n_f32(v363, v375.f32[0]);
      float32x4_t v360 = vmulq_lane_f32(v364, *(float32x2_t *)v375.f32, 1);
      float32x4_t v361 = vmulq_laneq_f32(v365, v375, 2);
      float32x4_t v362 = vmulq_laneq_f32(v366, v375, 3);
      if ((v7 & 0x4000000) != 0)
      {
        float32x4_t v376 = vdivq_f32(_Q0, v375);
        uint64_t v377 = v1336;
        float32x4_t v378 = vld1q_dup_f32(v377);
        uint64_t v379 = v1335;
        float32x4_t v380 = vld1q_dup_f32(v379);
        float32x4_t v359 = vdivq_f32(_Q0, vmlaq_f32(v378, vmlaq_n_f32(v380, v376, *(float *)(v5 + 12952)), v376));
        if ((v7 & 0x40000) == 0)
        {
LABEL_203:
          if (!v1497) {
            goto LABEL_214;
          }
          goto LABEL_210;
        }
      }
      else if ((v7 & 0x40000) == 0)
      {
        goto LABEL_203;
      }
    }
    else
    {
      float32x4_t v360 = *(float32x4_t *)(v5 + 12960);
      float32x4_t v361 = v360;
      float32x4_t v362 = v360;
      if ((v7 & 0x40000) == 0) {
        goto LABEL_203;
      }
    }
    float32x4_t v381 = vnegq_f32(*(float32x4_t *)(v5 + 12976));
    float32x4_t v382 = vmulq_f32(v358, v381);
    int32x4_t v383 = (int32x4_t)vmulq_f32(v360, v381);
    float32x4_t v384 = vmulq_f32(v361, v381);
    float32x4_t v385 = vmulq_f32(v362, v381);
    v386.i64[0] = vzip1q_s32((int32x4_t)v382, v383).u64[0];
    v386.i64[1] = __PAIR64__(v385.u32[0], v384.u32[0]);
    v387.i64[0] = vtrn2q_s32((int32x4_t)v382, v383).u64[0];
    v387.i64[1] = __PAIR64__(v385.u32[1], v384.u32[1]);
    v382.i64[0] = vzip2q_s32((int32x4_t)v382, v383).u64[0];
    v382.i64[1] = __PAIR64__(v385.u32[2], v384.u32[2]);
    float32x4_t v388 = vaddq_f32(v382, vaddq_f32(v386, v387));
    uint64_t v389 = v1348;
    float32x4_t v390 = vld1q_dup_f32(v389);
    int32x4_t v391 = vcgeq_f32(v388, v390);
    int32x4_t v392 = (int32x4_t)vmvnq_s8((int8x16_t)v391);
    *(int16x4_t *)v392.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v392), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v392.i8))
    {
      float32x4_t v359 = 0uLL;
      if (!v1497) {
        goto LABEL_214;
      }
    }
    else
    {
      v392.i32[0] = 0;
      int8x16_t v1384 = (int8x16_t)v391;
      float32x4_t v1392 = v360;
      v391.i32[0] = v7 & 0x4000000;
      int8x16_t v393 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v391, v392), 0);
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1376 = (float32x4_t)vbslq_s8(v393, _Q1, (int8x16_t)v359);
      float v395 = *(float *)(v5 + 12956);
      float32x4_t v1552 = v24;
      float32x4_t v1568 = v23;
      float32x4_t v1536 = v25;
      float32x4_t v1520 = v26;
      float32x4_t v1480 = v388;
      float32x4_t v1429 = v358;
      float32x4_t v1401 = v361;
      float32x4_t v1415 = v362;
      unsigned int v1369 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(v5 + 560))(a1));
      unsigned int v1362 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1480.f32[1], v395));
      unsigned int v1355 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1480.f32[2], v395));
      *(float *)&unsigned int v396 = (*(float (**)(float, float))(v5 + 560))(v1480.f32[3], v395);
      float32x4_t v360 = v1392;
      float32x4_t v361 = v1401;
      float32x4_t v362 = v1415;
      float32x4_t v358 = v1429;
      float32x4_t v22 = v1512;
      float32x4_t v26 = v1520;
      float32x4_t v25 = v1536;
      float32x4_t v24 = v1552;
      float32x4_t v23 = v1568;
      unsigned int v17 = v1514;
      v397.i64[0] = __PAIR64__(v1362, v1369);
      v397.i64[1] = __PAIR64__(v396, v1355);
      float32x4_t v359 = vmulq_f32(v1376, (float32x4_t)vandq_s8(v397, v1384));
      if (!v1497) {
        goto LABEL_214;
      }
    }
LABEL_210:
    if (v359.f32[0] <= 0.0 && v359.f32[1] <= 0.0 && v359.f32[2] <= 0.0 && v359.f32[3] <= 0.0) {
      goto LABEL_227;
    }
LABEL_214:
    if (v1586)
    {
      if ((v7 & 0x200) != 0)
      {
        float32x4_t v402 = *(float32x4_t *)(v5 + 12864);
        float32x4_t v398 = vmulq_f32(v402, v4[13]);
        float32x4_t v399 = vmulq_f32(v402, v10[13]);
        float32x4_t v400 = vmulq_f32(v402, v11[13]);
        float32x4_t v401 = vmulq_f32(v402, v12[13]);
      }
      else
      {
        float32x4_t v398 = v14[11];
        float32x4_t v399 = v15[11];
        float32x4_t v400 = v16[11];
        float32x4_t v401 = v17[11];
      }
    }
    else
    {
      float32x4_t v401 = 0uLL;
      float32x4_t v400 = 0uLL;
      float32x4_t v399 = 0uLL;
      float32x4_t v398 = 0uLL;
    }
    float32x4_t v403 = vmulq_f32(v354, v358);
    int32x4_t v404 = (int32x4_t)vmulq_f32(v355, v360);
    float32x4_t v405 = vmulq_f32(v356, v361);
    float32x4_t v406 = vmulq_f32(v357, v362);
    v407.i64[0] = vzip1q_s32((int32x4_t)v403, v404).u64[0];
    v407.i64[1] = __PAIR64__(v406.u32[0], v405.u32[0]);
    v408.i64[0] = vtrn2q_s32((int32x4_t)v403, v404).u64[0];
    v408.i64[1] = __PAIR64__(v406.u32[1], v405.u32[1]);
    v403.i64[0] = vzip2q_s32((int32x4_t)v403, v404).u64[0];
    v403.i64[1] = __PAIR64__(v406.u32[2], v405.u32[2]);
    float32x4_t v409 = vaddq_f32(v403, vaddq_f32(v407, v408));
    if (v409.f32[0] <= 0.0 && v409.f32[1] <= 0.0 && v409.f32[2] <= 0.0 && v409.f32[3] <= 0.0)
    {
      if (v1586)
      {
        if (v1497)
        {
          float32x4_t v398 = vmulq_n_f32(v398, v359.f32[0]);
          float32x4_t v399 = vmulq_lane_f32(v399, *(float32x2_t *)v359.f32, 1);
          float32x4_t v400 = vmulq_laneq_f32(v400, v359, 2);
          float32x4_t v401 = vmulq_laneq_f32(v401, v359, 3);
        }
        float32x4_t v23 = vaddq_f32(v23, v398);
        float32x4_t v24 = vaddq_f32(v24, v399);
        float32x4_t v25 = vaddq_f32(v25, v400);
        float32x4_t v26 = vaddq_f32(v26, v401);
      }
LABEL_227:
      if ((v7 & 8) == 0) {
        goto LABEL_351;
      }
      goto LABEL_228;
    }
    if ((v7 & 0x400) != 0)
    {
      float32x4_t v475 = *(float32x4_t *)(v5 + 12880);
      float32x4_t v432 = vmulq_f32(v475, v4[13]);
      float32x4_t v433 = vmulq_f32(v475, v10[13]);
      float32x4_t v434 = vmulq_f32(v475, v11[13]);
      float32x4_t v435 = vmulq_f32(v475, v12[13]);
    }
    else
    {
      float32x4_t v432 = v14[12];
      float32x4_t v433 = v15[12];
      float32x4_t v434 = v16[12];
      float32x4_t v435 = v17[12];
    }
    float32x4_t v476 = vmulq_n_f32(v432, fmaxf(v409.f32[0], 0.0));
    float32x4_t v477 = vmulq_n_f32(v433, fmaxf(v409.f32[1], 0.0));
    float32x4_t v478 = vmulq_n_f32(v434, fmaxf(v409.f32[2], 0.0));
    float32x4_t v479 = vmulq_n_f32(v435, fmaxf(v409.f32[3], 0.0));
    if (v1586)
    {
      float32x4_t v476 = vaddq_f32(v398, v476);
      float32x4_t v477 = vaddq_f32(v399, v477);
      float32x4_t v478 = vaddq_f32(v400, v478);
      float32x4_t v479 = vaddq_f32(v401, v479);
    }
    float32x4_t v1465 = v477;
    float32x4_t v1482 = v476;
    float32x4_t v1448 = v479;
    float32x4_t v1456 = v478;
    if ((v6 & 0x20) != 0)
    {
      float32x4_t v493 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v354, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v354, 0xCuLL)));
      int32x4_t v494 = (int32x4_t)vmlsq_f32(vmulq_f32(v493, v358), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v358, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v358, 0xCuLL))), v354);
      int32x4_t v495 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v494, 0xCuLL);
      float32x4_t v496 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v355, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v355, 0xCuLL)));
      float32x4_t v497 = vmlsq_f32(vmulq_f32(v496, v360), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v360, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v360, 0xCuLL))), v355);
      int32x4_t v498 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v497, 0xCuLL);
      float32x4_t v499 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v356, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v356, 0xCuLL)));
      int32x4_t v500 = (int32x4_t)vmlsq_f32(vmulq_f32(v499, v361), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v361, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v361, 0xCuLL))), v356);
      int32x4_t v501 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v500, 0xCuLL);
      float32x4_t v502 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v357, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v357, 0xCuLL)));
      int32x4_t v503 = (int32x4_t)vmlsq_f32(vmulq_f32(v502, v362), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v362, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v362, 0xCuLL))), v357);
      int32x4_t v504 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v503, 0xCuLL);
      int32x4_t v505 = (int32x4_t)vmlsq_f32(vmulq_f32(v493, (float32x4_t)vrev64q_s32(vuzp1q_s32(v494, v495))), (float32x4_t)vextq_s8((int8x16_t)v495, (int8x16_t)vrev64q_s32(v495), 8uLL), v354);
      int32x4_t v506 = (int32x4_t)vmlsq_f32(vmulq_f32(v496, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v497, v498))), (float32x4_t)vextq_s8((int8x16_t)v498, (int8x16_t)vrev64q_s32(v498), 8uLL), v355);
      int32x4_t v507 = (int32x4_t)vmlsq_f32(vmulq_f32(v499, (float32x4_t)vrev64q_s32(vuzp1q_s32(v500, v501))), (float32x4_t)vextq_s8((int8x16_t)v501, (int8x16_t)vrev64q_s32(v501), 8uLL), v356);
      int32x4_t v508 = (int32x4_t)vmlsq_f32(vmulq_f32(v502, (float32x4_t)vrev64q_s32(vuzp1q_s32(v503, v504))), (float32x4_t)vextq_s8((int8x16_t)v504, (int8x16_t)vrev64q_s32(v504), 8uLL), v357);
      v497.i64[0] = 0x4000000040000000;
      v497.i64[1] = 0x4000000040000000;
      float32x4_t v509 = vmlaq_f32(v358, v497, (float32x4_t)vrev64q_s32(vuzp1q_s32(v505, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v505, 0xCuLL))));
      float32x4_t v510 = vmlaq_f32(v360, v497, (float32x4_t)vrev64q_s32(vuzp1q_s32(v506, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v506, 0xCuLL))));
      float32x4_t v511 = vmlaq_f32(v361, v497, (float32x4_t)vrev64q_s32(vuzp1q_s32(v507, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v507, 0xCuLL))));
      float32x4_t v512 = vmlaq_f32(v362, v497, (float32x4_t)vrev64q_s32(vuzp1q_s32(v508, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v508, 0xCuLL))));
      if ((v6 & 8) != 0)
      {
        float32x4_t v535 = vmulq_f32(v1584, v1584);
        int32x4_t v536 = (int32x4_t)vmulq_f32(v1580, v1580);
        float32x4_t v537 = vmulq_f32(v1582, v1582);
        float32x4_t v538 = vmulq_f32(v22, v22);
        v539.i64[0] = vzip1q_s32((int32x4_t)v535, v536).u64[0];
        v539.i64[1] = __PAIR64__(v538.u32[0], v537.u32[0]);
        v540.i64[0] = vtrn2q_s32((int32x4_t)v535, v536).u64[0];
        v540.i64[1] = __PAIR64__(v538.u32[1], v537.u32[1]);
        v535.i64[0] = vzip2q_s32((int32x4_t)v535, v536).u64[0];
        v535.i64[1] = __PAIR64__(v538.u32[2], v537.u32[2]);
        __asm { FMOV            V7.4S, #1.0 }
        float32x4_t v542 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v535, vaddq_f32(v539, v540))));
        float32x4_t v543 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1584), v542.f32[0]), v509);
        int32x4_t v544 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v542.f32, 1), v510);
        float32x4_t v545 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1582), v542, 2), v511);
        float32x4_t v546 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v22), v542, 3), v512);
        v537.i64[0] = vzip1q_s32((int32x4_t)v543, v544).u64[0];
        v537.i64[1] = __PAIR64__(v546.u32[0], v545.u32[0]);
        v538.i64[0] = vtrn2q_s32((int32x4_t)v543, v544).u64[0];
        v538.i64[1] = __PAIR64__(v546.u32[1], v545.u32[1]);
        v543.i64[0] = vzip2q_s32((int32x4_t)v543, v544).u64[0];
        v543.i64[1] = __PAIR64__(v546.u32[2], v545.u32[2]);
        float32x4_t v513 = vaddq_f32(v543, vaddq_f32(v537, v538));
      }
      else
      {
        v513.i64[0] = vzip2q_s32((int32x4_t)v509, (int32x4_t)v510).u64[0];
        v513.i64[1] = __PAIR64__(v512.u32[2], v511.u32[2]);
      }
      float32x4_t v479 = v1448;
      float32x4_t v478 = v1456;
      float v9 = 1.0;
    }
    else
    {
      if (v1326)
      {
        if ((v6 & 8) != 0)
        {
          float32x4_t v567 = vmulq_f32(v1584, v1584);
          int32x4_t v568 = (int32x4_t)vmulq_f32(v1580, v1580);
          float32x4_t v569 = vmulq_f32(v1582, v1582);
          v570.i64[0] = vzip1q_s32((int32x4_t)v567, v568).u64[0];
          v570.i32[2] = v569.i32[0];
          float32x4_t v571 = vmulq_f32(v22, v22);
          v570.i32[3] = v571.i32[0];
          v572.i64[0] = vtrn2q_s32((int32x4_t)v567, v568).u64[0];
          v572.i64[1] = __PAIR64__(v571.u32[1], v569.u32[1]);
          v567.i64[0] = vzip2q_s32((int32x4_t)v567, v568).u64[0];
          v567.i64[1] = __PAIR64__(v571.u32[2], v569.u32[2]);
          __asm { FMOV            V16.4S, #1.0 }
          float32x4_t v574 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v567, vaddq_f32(v570, v572))));
          float32x4_t v480 = vmulq_n_f32(vnegq_f32(v1584), v574.f32[0]);
          float32x4_t v481 = vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v574.f32, 1);
          float32x4_t v482 = vmulq_laneq_f32(vnegq_f32(v1582), v574, 2);
          float32x4_t v483 = vmulq_laneq_f32(vnegq_f32(v22), v574, 3);
        }
        else
        {
          float32x4_t v480 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v481 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v482 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v483 = (float32x4_t)xmmword_227DC2100;
        }
        float32x4_t v575 = vaddq_f32(v358, v480);
        float32x4_t v576 = vaddq_f32(v360, v481);
        float32x4_t v577 = vaddq_f32(v361, v482);
        float32x4_t v578 = vaddq_f32(v362, v483);
        float32x4_t v579 = vmulq_f32(v575, v575);
        int32x4_t v580 = (int32x4_t)vmulq_f32(v576, v576);
        float32x4_t v581 = vmulq_f32(v577, v577);
        v582.i64[0] = vzip1q_s32((int32x4_t)v579, v580).u64[0];
        v582.i32[2] = v581.i32[0];
        float32x4_t v583 = vmulq_f32(v578, v578);
        v582.i32[3] = v583.i32[0];
        v584.i64[0] = vtrn2q_s32((int32x4_t)v579, v580).u64[0];
        v584.i64[1] = __PAIR64__(v583.u32[1], v581.u32[1]);
        v579.i64[0] = vzip2q_s32((int32x4_t)v579, v580).u64[0];
        v579.i64[1] = __PAIR64__(v583.u32[2], v581.u32[2]);
        __asm { FMOV            V17.4S, #1.0 }
        float32x4_t v586 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v579, vaddq_f32(v582, v584))));
        float32x4_t v559 = vmulq_n_f32(v575, v586.f32[0]);
        float32x4_t v560 = vmulq_lane_f32(v576, *(float32x2_t *)v586.f32, 1);
        float32x4_t v561 = vmulq_laneq_f32(v577, v586, 2);
        float32x4_t v562 = vmulq_laneq_f32(v578, v586, 3);
      }
      else
      {
        float32x4_t v559 = *(float32x4_t *)(v5 + 12992);
        float32x4_t v560 = v559;
        float32x4_t v561 = v559;
        float32x4_t v562 = v559;
      }
      float32x4_t v587 = vmulq_f32(v354, v559);
      int32x4_t v588 = (int32x4_t)vmulq_f32(v355, v560);
      float32x4_t v589 = vmulq_f32(v356, v561);
      float32x4_t v590 = vmulq_f32(v357, v562);
      v591.i64[0] = vzip1q_s32((int32x4_t)v587, v588).u64[0];
      v591.i64[1] = __PAIR64__(v590.u32[0], v589.u32[0]);
      v592.i64[0] = vtrn2q_s32((int32x4_t)v587, v588).u64[0];
      v592.i64[1] = __PAIR64__(v590.u32[1], v589.u32[1]);
      v587.i64[0] = vzip2q_s32((int32x4_t)v587, v588).u64[0];
      v587.i64[1] = __PAIR64__(v590.u32[2], v589.u32[2]);
      float32x4_t v513 = vaddq_f32(v587, vaddq_f32(v591, v592));
    }
    if (v409.f32[0] <= 0.0) {
      float v593 = 0.0;
    }
    else {
      float v593 = v513.f32[0];
    }
    if (v409.f32[1] <= 0.0) {
      float v594 = 0.0;
    }
    else {
      float v594 = v513.f32[1];
    }
    if (v409.f32[2] <= 0.0) {
      float v595 = 0.0;
    }
    else {
      float v595 = v513.f32[2];
    }
    if (v409.f32[3] <= 0.0) {
      float v596 = 0.0;
    }
    else {
      float v596 = v513.f32[3];
    }
    if (v593 > 0.0 || v594 > 0.0 || v595 > 0.0 || v596 > 0.0)
    {
      float32x4_t v1440 = v359;
      float32x4_t v1522 = v26;
      float32x4_t v1538 = v25;
      float32x4_t v1554 = v24;
      float32x4_t v1570 = v23;
      float v599 = fmaxf(v594, 0.0);
      float v600 = fmaxf(v595, 0.0);
      float v601 = v14[4].f32[0];
      float v602 = v15[4].f32[0];
      float v603 = fmaxf(v596, 0.0);
      float v604 = v16[4].f32[0];
      float v605 = v17[4].f32[0];
      uint64_t v606 = v16;
      uint64_t v607 = v15;
      v608 = v14;
      uint64_t v609 = v17;
      LODWORD(v1431) = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t, float, float))(v5 + 560))(a1, fmaxf(v593, 0.0), v601));
      LODWORD(v1417) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v599, v602));
      LODWORD(v1403) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v600, v604));
      a1 = (*(uint64_t (**)(float, float))(v5 + 560))(v603, v605);
      if ((v7 & 0x800) != 0)
      {
        uint64_t v614 = v606;
        int v611 = v608;
        float32x4_t v617 = *(float32x4_t *)(v5 + 12896);
        float32x4_t v612 = vmulq_f32(v617, v4[13]);
        float32x4_t v613 = vmulq_f32(v617, v10[13]);
        float32x4_t v615 = vmulq_f32(v617, v11[13]);
        float32x4_t v616 = vmulq_f32(v617, v12[13]);
      }
      else
      {
        int v611 = v608;
        float32x4_t v612 = v608[13];
        float32x4_t v613 = v607[13];
        uint64_t v614 = v606;
        float32x4_t v615 = v606[13];
        float32x4_t v616 = v609[13];
      }
      unsigned int v17 = v609;
      uint64_t v15 = v607;
      float32x4_t v359 = v1440;
      float32x4_t v479 = v1448;
      float32x4_t v598 = v1465;
      float32x4_t v597 = v1482;
      float32x4_t v478 = v1456;
      float32x4_t v618 = vmulq_n_f32(v612, v1431);
      float32x4_t v619 = vmulq_n_f32(v613, v1417);
      float32x4_t v620 = vmulq_n_f32(v615, v1403);
      float32x4_t v621 = vmulq_n_f32(v616, v610);
      LOWORD(v6) = v1462;
      float32x4_t v24 = v1554;
      float32x4_t v23 = v1570;
      float32x4_t v25 = v1538;
      float32x4_t v26 = v1522;
      float32x4_t v22 = v1512;
      if ((v1462 & 0x10) != 0)
      {
        int v14 = v611;
        uint64_t v16 = v614;
        if (v1497)
        {
          float32x4_t v618 = vmulq_n_f32(v618, v1440.f32[0]);
          float32x4_t v619 = vmulq_lane_f32(v619, *(float32x2_t *)v1440.f32, 1);
          float32x4_t v620 = vmulq_laneq_f32(v620, v1440, 2);
          float32x4_t v621 = vmulq_laneq_f32(v621, v1440, 3);
        }
        float32x4_t v1507 = vaddq_f32(v1507, v619);
        float32x4_t v1510 = vaddq_f32(v1510, v618);
        float32x4_t v1502 = vaddq_f32(v1502, v621);
        float32x4_t v1504 = vaddq_f32(v1504, v620);
        if (v1497)
        {
LABEL_316:
          float32x4_t v597 = vmulq_n_f32(v597, v359.f32[0]);
          float32x4_t v598 = vmulq_lane_f32(v598, *(float32x2_t *)v359.f32, 1);
          float32x4_t v478 = vmulq_laneq_f32(v478, v359, 2);
          float32x4_t v479 = vmulq_laneq_f32(v479, v359, 3);
        }
      }
      else
      {
        float32x4_t v597 = vaddq_f32(v1482, v618);
        float32x4_t v598 = vaddq_f32(v1465, v619);
        float32x4_t v478 = vaddq_f32(v1456, v620);
        float32x4_t v479 = vaddq_f32(v1448, v621);
        int v14 = v611;
        uint64_t v16 = v614;
        if (v1497) {
          goto LABEL_316;
        }
      }
    }
    else
    {
      float32x4_t v598 = v1465;
      float32x4_t v597 = v1482;
      if (v1497) {
        goto LABEL_316;
      }
    }
    float32x4_t v23 = vaddq_f32(v23, v597);
    float32x4_t v24 = vaddq_f32(v24, v598);
    float32x4_t v25 = vaddq_f32(v25, v478);
    float32x4_t v26 = vaddq_f32(v26, v479);
    if ((v7 & 8) == 0) {
      goto LABEL_351;
    }
LABEL_228:
    float32x4_t v410 = v4[7];
    float32x4_t v411 = v10[7];
    float32x4_t v412 = v11[7];
    float32x4_t v413 = v12[7];
    if ((v6 & 2) != 0)
    {
      float32x4_t v410 = vnegq_f32(v410);
      float32x4_t v411 = vnegq_f32(v411);
      float32x4_t v412 = vnegq_f32(v412);
      float32x4_t v413 = vnegq_f32(v413);
    }
    float32x4_t v414 = *(float32x4_t *)(v5 + 13120);
    float32x4_t v415 = 0uLL;
    if (((unsigned __int16)v6 & 0x800) != 0)
    {
      float32x4_t v419 = vsubq_f32(v414, v1584);
      float32x4_t v420 = vsubq_f32(v414, v1580);
      float32x4_t v421 = vsubq_f32(v414, v1582);
      float32x4_t v422 = vsubq_f32(v414, v22);
      float32x4_t v423 = vmulq_f32(v419, v419);
      int32x4_t v424 = (int32x4_t)vmulq_f32(v420, v420);
      float32x4_t v425 = vmulq_f32(v421, v421);
      v426.i64[0] = vzip1q_s32((int32x4_t)v423, v424).u64[0];
      v426.i32[2] = v425.i32[0];
      float32x4_t v427 = vmulq_f32(v422, v422);
      v426.i32[3] = v427.i32[0];
      v428.i64[0] = vtrn2q_s32((int32x4_t)v423, v424).u64[0];
      v428.i64[1] = __PAIR64__(v427.u32[1], v425.u32[1]);
      v423.i64[0] = vzip2q_s32((int32x4_t)v423, v424).u64[0];
      v423.i64[1] = __PAIR64__(v427.u32[2], v425.u32[2]);
      float32x4_t v429 = vsqrtq_f32(vaddq_f32(v423, vaddq_f32(v426, v428)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v431 = vdivq_f32(_Q0, v429);
      float32x4_t v414 = vmulq_n_f32(v419, v431.f32[0]);
      float32x4_t v416 = vmulq_lane_f32(v420, *(float32x2_t *)v431.f32, 1);
      float32x4_t v417 = vmulq_laneq_f32(v421, v431, 2);
      float32x4_t v418 = vmulq_laneq_f32(v422, v431, 3);
      if ((v7 & 0x8000000) != 0)
      {
        float32x4_t v436 = vdivq_f32(_Q0, v431);
        int v437 = v1338;
        float32x4_t v438 = vld1q_dup_f32(v437);
        unsigned int v439 = v1337;
        float32x4_t v440 = vld1q_dup_f32(v439);
        float32x4_t v415 = vdivq_f32(_Q0, vmlaq_f32(v438, vmlaq_n_f32(v440, v436, *(float *)(v5 + 13112)), v436));
        if ((v7 & 0x80000) == 0)
        {
LABEL_235:
          if (!v1496) {
            goto LABEL_248;
          }
          goto LABEL_244;
        }
      }
      else if ((v7 & 0x80000) == 0)
      {
        goto LABEL_235;
      }
    }
    else
    {
      float32x4_t v416 = *(float32x4_t *)(v5 + 13120);
      float32x4_t v417 = v416;
      float32x4_t v418 = v416;
      if ((v7 & 0x80000) == 0) {
        goto LABEL_235;
      }
    }
    float32x4_t v441 = vnegq_f32(*(float32x4_t *)(v5 + 13136));
    float32x4_t v442 = vmulq_f32(v414, v441);
    int32x4_t v443 = (int32x4_t)vmulq_f32(v416, v441);
    float32x4_t v444 = vmulq_f32(v417, v441);
    float32x4_t v445 = vmulq_f32(v418, v441);
    v446.i64[0] = vzip1q_s32((int32x4_t)v442, v443).u64[0];
    v446.i64[1] = __PAIR64__(v445.u32[0], v444.u32[0]);
    v447.i64[0] = vtrn2q_s32((int32x4_t)v442, v443).u64[0];
    v447.i64[1] = __PAIR64__(v445.u32[1], v444.u32[1]);
    v442.i64[0] = vzip2q_s32((int32x4_t)v442, v443).u64[0];
    v442.i64[1] = __PAIR64__(v445.u32[2], v444.u32[2]);
    float32x4_t v448 = vaddq_f32(v442, vaddq_f32(v446, v447));
    v449 = v1349;
    float32x4_t v450 = vld1q_dup_f32(v449);
    int32x4_t v451 = vcgeq_f32(v448, v450);
    int32x4_t v452 = (int32x4_t)vmvnq_s8((int8x16_t)v451);
    *(int16x4_t *)v452.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v452), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v452.i8))
    {
      float32x4_t v415 = 0uLL;
      if (!v1496) {
        goto LABEL_248;
      }
    }
    else
    {
      v452.i32[0] = 0;
      int8x16_t v1385 = (int8x16_t)v451;
      float32x4_t v1393 = v416;
      v451.i32[0] = v7 & 0x8000000;
      int8x16_t v453 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v451, v452), 0);
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1377 = (float32x4_t)vbslq_s8(v453, _Q1, (int8x16_t)v415);
      float v455 = *(float *)(v5 + 13116);
      float32x4_t v1553 = v24;
      float32x4_t v1569 = v23;
      float32x4_t v1537 = v25;
      float32x4_t v1521 = v26;
      float32x4_t v1481 = v448;
      float32x4_t v1430 = v414;
      float32x4_t v1402 = v417;
      float32x4_t v1416 = v418;
      unsigned int v1370 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(v5 + 560))(a1));
      unsigned int v1363 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1481.f32[1], v455));
      unsigned int v1356 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1481.f32[2], v455));
      *(float *)&unsigned int v456 = (*(float (**)(float, float))(v5 + 560))(v1481.f32[3], v455);
      float32x4_t v416 = v1393;
      float32x4_t v417 = v1402;
      float32x4_t v418 = v1416;
      float32x4_t v414 = v1430;
      float32x4_t v22 = v1512;
      float32x4_t v26 = v1521;
      float32x4_t v25 = v1537;
      float32x4_t v24 = v1553;
      float32x4_t v23 = v1569;
      unsigned int v17 = v1514;
      v457.i64[0] = __PAIR64__(v1363, v1370);
      v457.i64[1] = __PAIR64__(v456, v1356);
      float32x4_t v415 = vmulq_f32(v1377, (float32x4_t)vandq_s8(v457, v1385));
      if (!v1496) {
        goto LABEL_248;
      }
    }
LABEL_244:
    if (v415.f32[0] <= 0.0 && v415.f32[1] <= 0.0 && v415.f32[2] <= 0.0 && v415.f32[3] <= 0.0) {
      goto LABEL_351;
    }
LABEL_248:
    if (v1586)
    {
      if ((v7 & 0x200) != 0)
      {
        float32x4_t v462 = *(float32x4_t *)(v5 + 13024);
        float32x4_t v458 = vmulq_f32(v462, v4[13]);
        float32x4_t v459 = vmulq_f32(v462, v10[13]);
        float32x4_t v460 = vmulq_f32(v462, v11[13]);
        float32x4_t v461 = vmulq_f32(v462, v12[13]);
      }
      else
      {
        float32x4_t v458 = v14[14];
        float32x4_t v459 = v15[14];
        float32x4_t v460 = v16[14];
        float32x4_t v461 = v17[14];
      }
    }
    else
    {
      float32x4_t v461 = 0uLL;
      float32x4_t v460 = 0uLL;
      float32x4_t v459 = 0uLL;
      float32x4_t v458 = 0uLL;
    }
    float32x4_t v463 = vmulq_f32(v410, v414);
    int32x4_t v464 = (int32x4_t)vmulq_f32(v411, v416);
    float32x4_t v465 = vmulq_f32(v412, v417);
    float32x4_t v466 = vmulq_f32(v413, v418);
    v467.i64[0] = vzip1q_s32((int32x4_t)v463, v464).u64[0];
    v467.i64[1] = __PAIR64__(v466.u32[0], v465.u32[0]);
    v468.i64[0] = vtrn2q_s32((int32x4_t)v463, v464).u64[0];
    v468.i64[1] = __PAIR64__(v466.u32[1], v465.u32[1]);
    v463.i64[0] = vzip2q_s32((int32x4_t)v463, v464).u64[0];
    v463.i64[1] = __PAIR64__(v466.u32[2], v465.u32[2]);
    float32x4_t v469 = vaddq_f32(v463, vaddq_f32(v467, v468));
    if (v469.f32[0] > 0.0 || v469.f32[1] > 0.0 || v469.f32[2] > 0.0 || v469.f32[3] > 0.0)
    {
      float32x4_t v470 = v418;
      if ((v7 & 0x400) != 0)
      {
        float32x4_t v484 = *(float32x4_t *)(v5 + 13040);
        float32x4_t v471 = vmulq_f32(v484, v4[13]);
        float32x4_t v472 = vmulq_f32(v484, v10[13]);
        float32x4_t v473 = vmulq_f32(v484, v11[13]);
        float32x4_t v474 = vmulq_f32(v484, v12[13]);
      }
      else
      {
        float32x4_t v471 = v14[15];
        float32x4_t v472 = v15[15];
        float32x4_t v473 = v16[15];
        float32x4_t v474 = v17[15];
      }
      float32x4_t v485 = vmulq_n_f32(v471, fmaxf(v469.f32[0], 0.0));
      float32x4_t v486 = vmulq_n_f32(v472, fmaxf(v469.f32[1], 0.0));
      float32x4_t v487 = vmulq_n_f32(v473, fmaxf(v469.f32[2], 0.0));
      float32x4_t v488 = vmulq_n_f32(v474, fmaxf(v469.f32[3], 0.0));
      if (v1586)
      {
        float32x4_t v485 = vaddq_f32(v458, v485);
        float32x4_t v486 = vaddq_f32(v459, v486);
        float32x4_t v487 = vaddq_f32(v460, v487);
        float32x4_t v488 = vaddq_f32(v461, v488);
      }
      float32x4_t v1466 = v486;
      float32x4_t v1483 = v485;
      float32x4_t v1449 = v488;
      float32x4_t v1457 = v487;
      if ((v6 & 0x20) != 0)
      {
        float32x4_t v514 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v410, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v410, 0xCuLL)));
        int32x4_t v515 = (int32x4_t)vmlsq_f32(vmulq_f32(v514, v414), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v414, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v414, 0xCuLL))), v410);
        int32x4_t v516 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v515, 0xCuLL);
        float32x4_t v517 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v411, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v411, 0xCuLL)));
        float32x4_t v518 = vmlsq_f32(vmulq_f32(v517, v416), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v416, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v416, 0xCuLL))), v411);
        int32x4_t v519 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v518, 0xCuLL);
        float32x4_t v520 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v412, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v412, 0xCuLL)));
        int32x4_t v521 = (int32x4_t)vmlsq_f32(vmulq_f32(v520, v417), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v417, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v417, 0xCuLL))), v412);
        int32x4_t v522 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v521, 0xCuLL);
        float32x4_t v523 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v413, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v413, 0xCuLL)));
        int32x4_t v524 = (int32x4_t)vmlsq_f32(vmulq_f32(v523, v470), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v470, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v470, 0xCuLL))), v413);
        int32x4_t v525 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v524, 0xCuLL);
        int32x4_t v526 = (int32x4_t)vmlsq_f32(vmulq_f32(v514, (float32x4_t)vrev64q_s32(vuzp1q_s32(v515, v516))), (float32x4_t)vextq_s8((int8x16_t)v516, (int8x16_t)vrev64q_s32(v516), 8uLL), v410);
        int32x4_t v527 = (int32x4_t)vmlsq_f32(vmulq_f32(v517, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v518, v519))), (float32x4_t)vextq_s8((int8x16_t)v519, (int8x16_t)vrev64q_s32(v519), 8uLL), v411);
        int32x4_t v528 = (int32x4_t)vmlsq_f32(vmulq_f32(v520, (float32x4_t)vrev64q_s32(vuzp1q_s32(v521, v522))), (float32x4_t)vextq_s8((int8x16_t)v522, (int8x16_t)vrev64q_s32(v522), 8uLL), v412);
        int32x4_t v529 = (int32x4_t)vmlsq_f32(vmulq_f32(v523, (float32x4_t)vrev64q_s32(vuzp1q_s32(v524, v525))), (float32x4_t)vextq_s8((int8x16_t)v525, (int8x16_t)vrev64q_s32(v525), 8uLL), v413);
        v518.i64[0] = 0x4000000040000000;
        v518.i64[1] = 0x4000000040000000;
        float32x4_t v530 = vmlaq_f32(v414, v518, (float32x4_t)vrev64q_s32(vuzp1q_s32(v526, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v526, 0xCuLL))));
        float32x4_t v531 = vmlaq_f32(v416, v518, (float32x4_t)vrev64q_s32(vuzp1q_s32(v527, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v527, 0xCuLL))));
        float32x4_t v532 = vmlaq_f32(v417, v518, (float32x4_t)vrev64q_s32(vuzp1q_s32(v528, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v528, 0xCuLL))));
        float32x4_t v533 = vmlaq_f32(v470, v518, (float32x4_t)vrev64q_s32(vuzp1q_s32(v529, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v529, 0xCuLL))));
        if ((v6 & 8) != 0)
        {
          float32x4_t v547 = vmulq_f32(v1584, v1584);
          int32x4_t v548 = (int32x4_t)vmulq_f32(v1580, v1580);
          float32x4_t v549 = vmulq_f32(v1582, v1582);
          float32x4_t v22 = v1512;
          float32x4_t v550 = vmulq_f32(v22, v22);
          v551.i64[0] = vzip1q_s32((int32x4_t)v547, v548).u64[0];
          v551.i64[1] = __PAIR64__(v550.u32[0], v549.u32[0]);
          v552.i64[0] = vtrn2q_s32((int32x4_t)v547, v548).u64[0];
          v552.i64[1] = __PAIR64__(v550.u32[1], v549.u32[1]);
          v547.i64[0] = vzip2q_s32((int32x4_t)v547, v548).u64[0];
          v547.i64[1] = __PAIR64__(v550.u32[2], v549.u32[2]);
          __asm { FMOV            V7.4S, #1.0 }
          float32x4_t v554 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v547, vaddq_f32(v551, v552))));
          float32x4_t v555 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1584), v554.f32[0]), v530);
          int32x4_t v556 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v554.f32, 1), v531);
          float32x4_t v557 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1582), v554, 2), v532);
          float32x4_t v558 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1512), v554, 3), v533);
          v549.i64[0] = vzip1q_s32((int32x4_t)v555, v556).u64[0];
          v549.i64[1] = __PAIR64__(v558.u32[0], v557.u32[0]);
          v550.i64[0] = vtrn2q_s32((int32x4_t)v555, v556).u64[0];
          v550.i64[1] = __PAIR64__(v558.u32[1], v557.u32[1]);
          v555.i64[0] = vzip2q_s32((int32x4_t)v555, v556).u64[0];
          v555.i64[1] = __PAIR64__(v558.u32[2], v557.u32[2]);
          float32x4_t v534 = vaddq_f32(v555, vaddq_f32(v549, v550));
          float32x4_t v488 = v1449;
          float32x4_t v487 = v1457;
          float v9 = 1.0;
        }
        else
        {
          v534.i64[0] = vzip2q_s32((int32x4_t)v530, (int32x4_t)v531).u64[0];
          v534.i64[1] = __PAIR64__(v533.u32[2], v532.u32[2]);
          float32x4_t v488 = v1449;
          float32x4_t v487 = v1457;
          float v9 = 1.0;
          float32x4_t v22 = v1512;
        }
      }
      else
      {
        if (v1325)
        {
          if ((v6 & 8) != 0)
          {
            float32x4_t v622 = vmulq_f32(v1584, v1584);
            int32x4_t v623 = (int32x4_t)vmulq_f32(v1580, v1580);
            float32x4_t v624 = vmulq_f32(v1582, v1582);
            v625.i64[0] = vzip1q_s32((int32x4_t)v622, v623).u64[0];
            v625.i32[2] = v624.i32[0];
            float32x4_t v626 = vmulq_f32(v1512, v1512);
            v625.i32[3] = v626.i32[0];
            v627.i64[0] = vtrn2q_s32((int32x4_t)v622, v623).u64[0];
            v627.i64[1] = __PAIR64__(v626.u32[1], v624.u32[1]);
            v622.i64[0] = vzip2q_s32((int32x4_t)v622, v623).u64[0];
            v622.i64[1] = __PAIR64__(v626.u32[2], v624.u32[2]);
            __asm { FMOV            V16.4S, #1.0 }
            float32x4_t v629 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v622, vaddq_f32(v625, v627))));
            float32x4_t v489 = vmulq_n_f32(vnegq_f32(v1584), v629.f32[0]);
            float32x4_t v490 = vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v629.f32, 1);
            float32x4_t v491 = vmulq_laneq_f32(vnegq_f32(v1582), v629, 2);
            float32x4_t v492 = vmulq_laneq_f32(vnegq_f32(v1512), v629, 3);
          }
          else
          {
            float32x4_t v489 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v490 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v491 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v492 = (float32x4_t)xmmword_227DC2100;
          }
          float32x4_t v630 = vaddq_f32(v414, v489);
          float32x4_t v631 = vaddq_f32(v416, v490);
          float32x4_t v632 = vaddq_f32(v417, v491);
          float32x4_t v633 = vaddq_f32(v470, v492);
          float32x4_t v634 = vmulq_f32(v630, v630);
          int32x4_t v635 = (int32x4_t)vmulq_f32(v631, v631);
          float32x4_t v636 = vmulq_f32(v632, v632);
          v637.i64[0] = vzip1q_s32((int32x4_t)v634, v635).u64[0];
          v637.i32[2] = v636.i32[0];
          float32x4_t v638 = vmulq_f32(v633, v633);
          v637.i32[3] = v638.i32[0];
          v639.i64[0] = vtrn2q_s32((int32x4_t)v634, v635).u64[0];
          v639.i64[1] = __PAIR64__(v638.u32[1], v636.u32[1]);
          v634.i64[0] = vzip2q_s32((int32x4_t)v634, v635).u64[0];
          v634.i64[1] = __PAIR64__(v638.u32[2], v636.u32[2]);
          __asm { FMOV            V17.4S, #1.0 }
          float32x4_t v641 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v634, vaddq_f32(v637, v639))));
          float32x4_t v563 = vmulq_n_f32(v630, v641.f32[0]);
          float32x4_t v564 = vmulq_lane_f32(v631, *(float32x2_t *)v641.f32, 1);
          float32x4_t v565 = vmulq_laneq_f32(v632, v641, 2);
          float32x4_t v566 = vmulq_laneq_f32(v633, v641, 3);
        }
        else
        {
          float32x4_t v563 = *(float32x4_t *)(v5 + 13152);
          float32x4_t v564 = v563;
          float32x4_t v565 = v563;
          float32x4_t v566 = v563;
        }
        float32x4_t v22 = v1512;
        float32x4_t v642 = vmulq_f32(v410, v563);
        int32x4_t v643 = (int32x4_t)vmulq_f32(v411, v564);
        float32x4_t v644 = vmulq_f32(v412, v565);
        float32x4_t v645 = vmulq_f32(v413, v566);
        v646.i64[0] = vzip1q_s32((int32x4_t)v642, v643).u64[0];
        v646.i64[1] = __PAIR64__(v645.u32[0], v644.u32[0]);
        v647.i64[0] = vtrn2q_s32((int32x4_t)v642, v643).u64[0];
        v647.i64[1] = __PAIR64__(v645.u32[1], v644.u32[1]);
        v642.i64[0] = vzip2q_s32((int32x4_t)v642, v643).u64[0];
        v642.i64[1] = __PAIR64__(v645.u32[2], v644.u32[2]);
        float32x4_t v534 = vaddq_f32(v642, vaddq_f32(v646, v647));
      }
      if (v469.f32[0] <= 0.0) {
        float v648 = 0.0;
      }
      else {
        float v648 = v534.f32[0];
      }
      if (v469.f32[1] <= 0.0) {
        float v649 = 0.0;
      }
      else {
        float v649 = v534.f32[1];
      }
      if (v469.f32[2] <= 0.0) {
        float v650 = 0.0;
      }
      else {
        float v650 = v534.f32[2];
      }
      if (v469.f32[3] <= 0.0) {
        float v651 = 0.0;
      }
      else {
        float v651 = v534.f32[3];
      }
      if (v648 > 0.0 || v649 > 0.0 || v650 > 0.0 || v651 > 0.0)
      {
        float32x4_t v1441 = v415;
        float32x4_t v1523 = v26;
        float32x4_t v1539 = v25;
        float32x4_t v1555 = v24;
        float32x4_t v1571 = v23;
        float v654 = fmaxf(v649, 0.0);
        float v655 = fmaxf(v650, 0.0);
        float v656 = v14[4].f32[0];
        float v657 = v15[4].f32[0];
        float v658 = fmaxf(v651, 0.0);
        float v659 = v16[4].f32[0];
        float v660 = v17[4].f32[0];
        uint64_t v661 = v16;
        int v662 = v15;
        uint64_t v663 = v14;
        uint64_t v664 = v17;
        LODWORD(v1432) = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t, float, float))(v5 + 560))(a1, fmaxf(v648, 0.0), v656));
        LODWORD(v1418) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v654, v657));
        LODWORD(v1404) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v655, v659));
        a1 = (*(uint64_t (**)(float, float))(v5 + 560))(v658, v660);
        if ((v7 & 0x800) != 0)
        {
          uint64_t v669 = v661;
          uint64_t v666 = v663;
          float32x4_t v672 = *(float32x4_t *)(v5 + 13056);
          float32x4_t v667 = vmulq_f32(v672, v4[13]);
          float32x4_t v668 = vmulq_f32(v672, v10[13]);
          float32x4_t v670 = vmulq_f32(v672, v11[13]);
          float32x4_t v671 = vmulq_f32(v672, v12[13]);
        }
        else
        {
          uint64_t v666 = v663;
          float32x4_t v667 = v663[16];
          float32x4_t v668 = v662[16];
          uint64_t v669 = v661;
          float32x4_t v670 = v661[16];
          float32x4_t v671 = v664[16];
        }
        unsigned int v17 = v664;
        uint64_t v15 = v662;
        float32x4_t v415 = v1441;
        float32x4_t v488 = v1449;
        float32x4_t v653 = v1466;
        float32x4_t v652 = v1483;
        float32x4_t v487 = v1457;
        float32x4_t v673 = vmulq_n_f32(v667, v1432);
        float32x4_t v674 = vmulq_n_f32(v668, v1418);
        float32x4_t v675 = vmulq_n_f32(v670, v1404);
        float32x4_t v676 = vmulq_n_f32(v671, v665);
        LOWORD(v6) = v1462;
        float32x4_t v24 = v1555;
        float32x4_t v23 = v1571;
        float32x4_t v25 = v1539;
        float32x4_t v26 = v1523;
        float32x4_t v22 = v1512;
        if ((v1462 & 0x10) != 0)
        {
          int v14 = v666;
          uint64_t v16 = v669;
          if (v1496)
          {
            float32x4_t v673 = vmulq_n_f32(v673, v1441.f32[0]);
            float32x4_t v674 = vmulq_lane_f32(v674, *(float32x2_t *)v1441.f32, 1);
            float32x4_t v675 = vmulq_laneq_f32(v675, v1441, 2);
            float32x4_t v676 = vmulq_laneq_f32(v676, v1441, 3);
          }
          float32x4_t v1507 = vaddq_f32(v1507, v674);
          float32x4_t v1510 = vaddq_f32(v1510, v673);
          float32x4_t v1502 = vaddq_f32(v1502, v676);
          float32x4_t v1504 = vaddq_f32(v1504, v675);
          if (!v1496) {
            goto LABEL_350;
          }
        }
        else
        {
          float32x4_t v652 = vaddq_f32(v1483, v673);
          float32x4_t v653 = vaddq_f32(v1466, v674);
          float32x4_t v487 = vaddq_f32(v1457, v675);
          float32x4_t v488 = vaddq_f32(v1449, v676);
          int v14 = v666;
          uint64_t v16 = v669;
          if (!v1496) {
            goto LABEL_350;
          }
        }
      }
      else
      {
        float32x4_t v653 = v1466;
        float32x4_t v652 = v1483;
        if (!v1496) {
          goto LABEL_350;
        }
      }
      float32x4_t v652 = vmulq_n_f32(v652, v415.f32[0]);
      float32x4_t v653 = vmulq_lane_f32(v653, *(float32x2_t *)v415.f32, 1);
      float32x4_t v487 = vmulq_laneq_f32(v487, v415, 2);
      float32x4_t v488 = vmulq_laneq_f32(v488, v415, 3);
LABEL_350:
      float32x4_t v23 = vaddq_f32(v23, v652);
      float32x4_t v24 = vaddq_f32(v24, v653);
      float32x4_t v25 = vaddq_f32(v25, v487);
      float32x4_t v26 = vaddq_f32(v26, v488);
      goto LABEL_351;
    }
    if (v1586)
    {
      if (v1496)
      {
        float32x4_t v458 = vmulq_n_f32(v458, v415.f32[0]);
        float32x4_t v459 = vmulq_lane_f32(v459, *(float32x2_t *)v415.f32, 1);
        float32x4_t v460 = vmulq_laneq_f32(v460, v415, 2);
        float32x4_t v461 = vmulq_laneq_f32(v461, v415, 3);
      }
      float32x4_t v23 = vaddq_f32(v23, v458);
      float32x4_t v24 = vaddq_f32(v24, v459);
      float32x4_t v25 = vaddq_f32(v25, v460);
      float32x4_t v26 = vaddq_f32(v26, v461);
    }
LABEL_351:
    if ((v7 & 0x10) == 0) {
      goto LABEL_383;
    }
    float32x4_t v677 = v4[7];
    float32x4_t v678 = v10[7];
    float32x4_t v679 = v11[7];
    float32x4_t v680 = v12[7];
    if ((v6 & 2) != 0)
    {
      float32x4_t v677 = vnegq_f32(v677);
      float32x4_t v678 = vnegq_f32(v678);
      float32x4_t v679 = vnegq_f32(v679);
      float32x4_t v680 = vnegq_f32(v680);
    }
    float32x4_t v681 = *(float32x4_t *)(v5 + 13280);
    float32x4_t v682 = 0uLL;
    if (((unsigned __int16)v6 & 0x1000) != 0)
    {
      float32x4_t v686 = vsubq_f32(v681, v1584);
      float32x4_t v687 = vsubq_f32(v681, v1580);
      float32x4_t v688 = vsubq_f32(v681, v1582);
      float32x4_t v689 = vsubq_f32(v681, v22);
      float32x4_t v690 = vmulq_f32(v686, v686);
      int32x4_t v691 = (int32x4_t)vmulq_f32(v687, v687);
      float32x4_t v692 = vmulq_f32(v688, v688);
      v693.i64[0] = vzip1q_s32((int32x4_t)v690, v691).u64[0];
      v693.i32[2] = v692.i32[0];
      float32x4_t v694 = vmulq_f32(v689, v689);
      v693.i32[3] = v694.i32[0];
      v695.i64[0] = vtrn2q_s32((int32x4_t)v690, v691).u64[0];
      v695.i64[1] = __PAIR64__(v694.u32[1], v692.u32[1]);
      v690.i64[0] = vzip2q_s32((int32x4_t)v690, v691).u64[0];
      v690.i64[1] = __PAIR64__(v694.u32[2], v692.u32[2]);
      float32x4_t v696 = vsqrtq_f32(vaddq_f32(v690, vaddq_f32(v693, v695)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v698 = vdivq_f32(_Q0, v696);
      float32x4_t v681 = vmulq_n_f32(v686, v698.f32[0]);
      float32x4_t v683 = vmulq_lane_f32(v687, *(float32x2_t *)v698.f32, 1);
      float32x4_t v684 = vmulq_laneq_f32(v688, v698, 2);
      float32x4_t v685 = vmulq_laneq_f32(v689, v698, 3);
      if ((v7 & 0x10000000) != 0)
      {
        float32x4_t v699 = vdivq_f32(_Q0, v698);
        uint64_t v700 = v1340;
        float32x4_t v701 = vld1q_dup_f32(v700);
        uint64_t v702 = v1339;
        float32x4_t v703 = vld1q_dup_f32(v702);
        float32x4_t v682 = vdivq_f32(_Q0, vmlaq_f32(v701, vmlaq_n_f32(v703, v699, *(float *)(v5 + 13272)), v699));
        if ((v7 & 0x100000) == 0)
        {
LABEL_359:
          if (!v1495) {
            goto LABEL_370;
          }
          goto LABEL_366;
        }
      }
      else if ((v7 & 0x100000) == 0)
      {
        goto LABEL_359;
      }
    }
    else
    {
      float32x4_t v683 = *(float32x4_t *)(v5 + 13280);
      float32x4_t v684 = v683;
      float32x4_t v685 = v683;
      if ((v7 & 0x100000) == 0) {
        goto LABEL_359;
      }
    }
    float32x4_t v704 = vnegq_f32(*(float32x4_t *)(v5 + 13296));
    float32x4_t v705 = vmulq_f32(v681, v704);
    int32x4_t v706 = (int32x4_t)vmulq_f32(v683, v704);
    float32x4_t v707 = vmulq_f32(v684, v704);
    float32x4_t v708 = vmulq_f32(v685, v704);
    v709.i64[0] = vzip1q_s32((int32x4_t)v705, v706).u64[0];
    v709.i64[1] = __PAIR64__(v708.u32[0], v707.u32[0]);
    v710.i64[0] = vtrn2q_s32((int32x4_t)v705, v706).u64[0];
    v710.i64[1] = __PAIR64__(v708.u32[1], v707.u32[1]);
    v705.i64[0] = vzip2q_s32((int32x4_t)v705, v706).u64[0];
    v705.i64[1] = __PAIR64__(v708.u32[2], v707.u32[2]);
    float32x4_t v711 = vaddq_f32(v705, vaddq_f32(v709, v710));
    BOOL v712 = v1350;
    float32x4_t v713 = vld1q_dup_f32(v712);
    int32x4_t v714 = vcgeq_f32(v711, v713);
    int32x4_t v715 = (int32x4_t)vmvnq_s8((int8x16_t)v714);
    *(int16x4_t *)v715.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v715), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v715.i8))
    {
      float32x4_t v682 = 0uLL;
      if (!v1495) {
        goto LABEL_370;
      }
    }
    else
    {
      v715.i32[0] = 0;
      int8x16_t v1386 = (int8x16_t)v714;
      v714.i32[0] = v7 & 0x10000000;
      int8x16_t v716 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v714, v715), 0);
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1378 = (float32x4_t)vbslq_s8(v716, _Q1, (int8x16_t)v682);
      float v718 = *(float *)(v5 + 13276);
      float32x4_t v1556 = v24;
      float32x4_t v1572 = v23;
      float32x4_t v1540 = v25;
      float32x4_t v1524 = v26;
      float32x4_t v1405 = v684;
      float32x4_t v1419 = v681;
      float32x4_t v1467 = v685;
      float32x4_t v1484 = v711;
      float32x4_t v1394 = v683;
      unsigned int v1371 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(v5 + 560))(a1));
      unsigned int v1364 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1484.f32[1], v718));
      unsigned int v1357 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1484.f32[2], v718));
      *(float *)&unsigned int v719 = (*(float (**)(float, float))(v5 + 560))(v1484.f32[3], v718);
      float32x4_t v683 = v1394;
      float32x4_t v684 = v1405;
      float32x4_t v685 = v1467;
      float32x4_t v681 = v1419;
      float32x4_t v22 = v1512;
      float32x4_t v26 = v1524;
      float32x4_t v25 = v1540;
      float32x4_t v24 = v1556;
      float32x4_t v23 = v1572;
      unsigned int v17 = v1514;
      v720.i64[0] = __PAIR64__(v1364, v1371);
      v720.i64[1] = __PAIR64__(v719, v1357);
      float32x4_t v682 = vmulq_f32(v1378, (float32x4_t)vandq_s8(v720, v1386));
      if (!v1495) {
        goto LABEL_370;
      }
    }
LABEL_366:
    if (v682.f32[0] <= 0.0 && v682.f32[1] <= 0.0 && v682.f32[2] <= 0.0 && v682.f32[3] <= 0.0) {
      goto LABEL_383;
    }
LABEL_370:
    if (v1586)
    {
      if ((v7 & 0x200) != 0)
      {
        float32x4_t v725 = *(float32x4_t *)(v5 + 13184);
        float32x4_t v721 = vmulq_f32(v725, v4[13]);
        float32x4_t v722 = vmulq_f32(v725, v10[13]);
        float32x4_t v723 = vmulq_f32(v725, v11[13]);
        float32x4_t v724 = vmulq_f32(v725, v12[13]);
      }
      else
      {
        float32x4_t v721 = v14[17];
        float32x4_t v722 = v15[17];
        float32x4_t v723 = v16[17];
        float32x4_t v724 = v17[17];
      }
    }
    else
    {
      float32x4_t v724 = 0uLL;
      float32x4_t v723 = 0uLL;
      float32x4_t v722 = 0uLL;
      float32x4_t v721 = 0uLL;
    }
    float32x4_t v726 = vmulq_f32(v677, v681);
    int32x4_t v727 = (int32x4_t)vmulq_f32(v678, v683);
    float32x4_t v728 = vmulq_f32(v679, v684);
    float32x4_t v729 = vmulq_f32(v680, v685);
    v730.i64[0] = vzip1q_s32((int32x4_t)v726, v727).u64[0];
    v730.i64[1] = __PAIR64__(v729.u32[0], v728.u32[0]);
    v731.i64[0] = vtrn2q_s32((int32x4_t)v726, v727).u64[0];
    v731.i64[1] = __PAIR64__(v729.u32[1], v728.u32[1]);
    v726.i64[0] = vzip2q_s32((int32x4_t)v726, v727).u64[0];
    v726.i64[1] = __PAIR64__(v729.u32[2], v728.u32[2]);
    float32x4_t v732 = vaddq_f32(v726, vaddq_f32(v730, v731));
    if (v732.f32[0] <= 0.0 && v732.f32[1] <= 0.0 && v732.f32[2] <= 0.0 && v732.f32[3] <= 0.0)
    {
      if (v1586)
      {
        if (v1495)
        {
          float32x4_t v721 = vmulq_n_f32(v721, v682.f32[0]);
          float32x4_t v722 = vmulq_lane_f32(v722, *(float32x2_t *)v682.f32, 1);
          float32x4_t v723 = vmulq_laneq_f32(v723, v682, 2);
          float32x4_t v724 = vmulq_laneq_f32(v724, v682, 3);
        }
        float32x4_t v23 = vaddq_f32(v23, v721);
        float32x4_t v24 = vaddq_f32(v24, v722);
        float32x4_t v25 = vaddq_f32(v25, v723);
        float32x4_t v26 = vaddq_f32(v26, v724);
      }
LABEL_383:
      if ((v7 & 0x20) == 0) {
        goto LABEL_508;
      }
      goto LABEL_384;
    }
    float32x4_t v1468 = v685;
    if ((v7 & 0x400) != 0)
    {
      float32x4_t v797 = *(float32x4_t *)(v5 + 13200);
      float32x4_t v755 = vmulq_f32(v797, v4[13]);
      float32x4_t v756 = vmulq_f32(v797, v10[13]);
      float32x4_t v757 = vmulq_f32(v797, v11[13]);
      float32x4_t v758 = vmulq_f32(v797, v12[13]);
    }
    else
    {
      float32x4_t v755 = v14[18];
      float32x4_t v756 = v15[18];
      float32x4_t v757 = v16[18];
      float32x4_t v758 = v17[18];
    }
    float32x4_t v798 = vmulq_n_f32(v755, fmaxf(v732.f32[0], 0.0));
    float32x4_t v799 = vmulq_n_f32(v756, fmaxf(v732.f32[1], 0.0));
    float32x4_t v800 = vmulq_n_f32(v757, fmaxf(v732.f32[2], 0.0));
    float32x4_t v801 = vmulq_n_f32(v758, fmaxf(v732.f32[3], 0.0));
    if (v1586)
    {
      float32x4_t v798 = vaddq_f32(v721, v798);
      float32x4_t v799 = vaddq_f32(v722, v799);
      float32x4_t v800 = vaddq_f32(v723, v800);
      float32x4_t v801 = vaddq_f32(v724, v801);
    }
    float32x4_t v1486 = v798;
    float32x4_t v1450 = v800;
    float32x4_t v1458 = v799;
    float32x4_t v1442 = v801;
    if ((v6 & 0x20) != 0)
    {
      float32x4_t v815 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v677, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v677, 0xCuLL)));
      int32x4_t v816 = (int32x4_t)vmlsq_f32(vmulq_f32(v815, v681), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v681, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v681, 0xCuLL))), v677);
      int32x4_t v817 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v816, 0xCuLL);
      float32x4_t v818 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v678, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v678, 0xCuLL)));
      float32x4_t v819 = vmlsq_f32(vmulq_f32(v818, v683), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v683, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v683, 0xCuLL))), v678);
      int32x4_t v820 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v819, 0xCuLL);
      float32x4_t v821 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v679, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v679, 0xCuLL)));
      int32x4_t v822 = (int32x4_t)vmlsq_f32(vmulq_f32(v821, v684), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v684, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v684, 0xCuLL))), v679);
      int32x4_t v823 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v822, 0xCuLL);
      float32x4_t v824 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v680, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v680, 0xCuLL)));
      int32x4_t v825 = (int32x4_t)vmlsq_f32(vmulq_f32(v824, v1468), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1468, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1468, 0xCuLL))), v680);
      int32x4_t v826 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v825, 0xCuLL);
      int32x4_t v827 = (int32x4_t)vmlsq_f32(vmulq_f32(v815, (float32x4_t)vrev64q_s32(vuzp1q_s32(v816, v817))), (float32x4_t)vextq_s8((int8x16_t)v817, (int8x16_t)vrev64q_s32(v817), 8uLL), v677);
      int32x4_t v828 = (int32x4_t)vmlsq_f32(vmulq_f32(v818, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v819, v820))), (float32x4_t)vextq_s8((int8x16_t)v820, (int8x16_t)vrev64q_s32(v820), 8uLL), v678);
      int32x4_t v829 = (int32x4_t)vmlsq_f32(vmulq_f32(v821, (float32x4_t)vrev64q_s32(vuzp1q_s32(v822, v823))), (float32x4_t)vextq_s8((int8x16_t)v823, (int8x16_t)vrev64q_s32(v823), 8uLL), v679);
      int32x4_t v830 = (int32x4_t)vmlsq_f32(vmulq_f32(v824, (float32x4_t)vrev64q_s32(vuzp1q_s32(v825, v826))), (float32x4_t)vextq_s8((int8x16_t)v826, (int8x16_t)vrev64q_s32(v826), 8uLL), v680);
      v819.i64[0] = 0x4000000040000000;
      v819.i64[1] = 0x4000000040000000;
      float32x4_t v831 = vmlaq_f32(v681, v819, (float32x4_t)vrev64q_s32(vuzp1q_s32(v827, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v827, 0xCuLL))));
      float32x4_t v832 = vmlaq_f32(v683, v819, (float32x4_t)vrev64q_s32(vuzp1q_s32(v828, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v828, 0xCuLL))));
      float32x4_t v833 = vmlaq_f32(v684, v819, (float32x4_t)vrev64q_s32(vuzp1q_s32(v829, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v829, 0xCuLL))));
      float32x4_t v834 = vmlaq_f32(v1468, v819, (float32x4_t)vrev64q_s32(vuzp1q_s32(v830, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v830, 0xCuLL))));
      if ((v6 & 8) != 0)
      {
        float32x4_t v857 = vmulq_f32(v1584, v1584);
        int32x4_t v858 = (int32x4_t)vmulq_f32(v1580, v1580);
        float32x4_t v859 = vmulq_f32(v1582, v1582);
        float32x4_t v860 = vmulq_f32(v22, v22);
        v861.i64[0] = vzip1q_s32((int32x4_t)v857, v858).u64[0];
        v861.i64[1] = __PAIR64__(v860.u32[0], v859.u32[0]);
        v862.i64[0] = vtrn2q_s32((int32x4_t)v857, v858).u64[0];
        v862.i64[1] = __PAIR64__(v860.u32[1], v859.u32[1]);
        v857.i64[0] = vzip2q_s32((int32x4_t)v857, v858).u64[0];
        v857.i64[1] = __PAIR64__(v860.u32[2], v859.u32[2]);
        __asm { FMOV            V7.4S, #1.0 }
        float32x4_t v864 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v857, vaddq_f32(v861, v862))));
        float32x4_t v865 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1584), v864.f32[0]), v831);
        int32x4_t v866 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v864.f32, 1), v832);
        float32x4_t v867 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1582), v864, 2), v833);
        float32x4_t v868 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v22), v864, 3), v834);
        v859.i64[0] = vzip1q_s32((int32x4_t)v865, v866).u64[0];
        v859.i64[1] = __PAIR64__(v868.u32[0], v867.u32[0]);
        v860.i64[0] = vtrn2q_s32((int32x4_t)v865, v866).u64[0];
        v860.i64[1] = __PAIR64__(v868.u32[1], v867.u32[1]);
        v865.i64[0] = vzip2q_s32((int32x4_t)v865, v866).u64[0];
        v865.i64[1] = __PAIR64__(v868.u32[2], v867.u32[2]);
        float32x4_t v835 = vaddq_f32(v865, vaddq_f32(v859, v860));
      }
      else
      {
        v835.i64[0] = vzip2q_s32((int32x4_t)v831, (int32x4_t)v832).u64[0];
        v835.i64[1] = __PAIR64__(v834.u32[2], v833.u32[2]);
      }
      float32x4_t v801 = v1442;
      float32x4_t v800 = v1450;
      float v9 = 1.0;
    }
    else
    {
      if (v1324)
      {
        if ((v6 & 8) != 0)
        {
          float32x4_t v889 = vmulq_f32(v1584, v1584);
          int32x4_t v890 = (int32x4_t)vmulq_f32(v1580, v1580);
          float32x4_t v891 = vmulq_f32(v1582, v1582);
          v892.i64[0] = vzip1q_s32((int32x4_t)v889, v890).u64[0];
          v892.i32[2] = v891.i32[0];
          float32x4_t v893 = vmulq_f32(v22, v22);
          v892.i32[3] = v893.i32[0];
          v894.i64[0] = vtrn2q_s32((int32x4_t)v889, v890).u64[0];
          v894.i64[1] = __PAIR64__(v893.u32[1], v891.u32[1]);
          v889.i64[0] = vzip2q_s32((int32x4_t)v889, v890).u64[0];
          v889.i64[1] = __PAIR64__(v893.u32[2], v891.u32[2]);
          __asm { FMOV            V16.4S, #1.0 }
          float32x4_t v896 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v889, vaddq_f32(v892, v894))));
          float32x4_t v802 = vmulq_n_f32(vnegq_f32(v1584), v896.f32[0]);
          float32x4_t v803 = vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v896.f32, 1);
          float32x4_t v804 = vmulq_laneq_f32(vnegq_f32(v1582), v896, 2);
          float32x4_t v805 = vmulq_laneq_f32(vnegq_f32(v22), v896, 3);
        }
        else
        {
          float32x4_t v802 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v803 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v804 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v805 = (float32x4_t)xmmword_227DC2100;
        }
        float32x4_t v897 = vaddq_f32(v681, v802);
        float32x4_t v898 = vaddq_f32(v683, v803);
        float32x4_t v899 = vaddq_f32(v684, v804);
        float32x4_t v900 = vaddq_f32(v1468, v805);
        float32x4_t v901 = vmulq_f32(v897, v897);
        int32x4_t v902 = (int32x4_t)vmulq_f32(v898, v898);
        float32x4_t v903 = vmulq_f32(v899, v899);
        v904.i64[0] = vzip1q_s32((int32x4_t)v901, v902).u64[0];
        v904.i32[2] = v903.i32[0];
        float32x4_t v905 = vmulq_f32(v900, v900);
        v904.i32[3] = v905.i32[0];
        v906.i64[0] = vtrn2q_s32((int32x4_t)v901, v902).u64[0];
        v906.i64[1] = __PAIR64__(v905.u32[1], v903.u32[1]);
        v901.i64[0] = vzip2q_s32((int32x4_t)v901, v902).u64[0];
        v901.i64[1] = __PAIR64__(v905.u32[2], v903.u32[2]);
        __asm { FMOV            V17.4S, #1.0 }
        float32x4_t v908 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v901, vaddq_f32(v904, v906))));
        float32x4_t v881 = vmulq_n_f32(v897, v908.f32[0]);
        float32x4_t v882 = vmulq_lane_f32(v898, *(float32x2_t *)v908.f32, 1);
        float32x4_t v883 = vmulq_laneq_f32(v899, v908, 2);
        float32x4_t v884 = vmulq_laneq_f32(v900, v908, 3);
      }
      else
      {
        float32x4_t v881 = *(float32x4_t *)(v5 + 13312);
        float32x4_t v882 = v881;
        float32x4_t v883 = v881;
        float32x4_t v884 = v881;
      }
      float32x4_t v909 = vmulq_f32(v677, v881);
      int32x4_t v910 = (int32x4_t)vmulq_f32(v678, v882);
      float32x4_t v911 = vmulq_f32(v679, v883);
      float32x4_t v912 = vmulq_f32(v680, v884);
      v913.i64[0] = vzip1q_s32((int32x4_t)v909, v910).u64[0];
      v913.i64[1] = __PAIR64__(v912.u32[0], v911.u32[0]);
      v914.i64[0] = vtrn2q_s32((int32x4_t)v909, v910).u64[0];
      v914.i64[1] = __PAIR64__(v912.u32[1], v911.u32[1]);
      v909.i64[0] = vzip2q_s32((int32x4_t)v909, v910).u64[0];
      v909.i64[1] = __PAIR64__(v912.u32[2], v911.u32[2]);
      float32x4_t v835 = vaddq_f32(v909, vaddq_f32(v913, v914));
    }
    if (v732.f32[0] <= 0.0) {
      float v915 = 0.0;
    }
    else {
      float v915 = v835.f32[0];
    }
    if (v732.f32[1] <= 0.0) {
      float v916 = 0.0;
    }
    else {
      float v916 = v835.f32[1];
    }
    if (v732.f32[2] <= 0.0) {
      float v917 = 0.0;
    }
    else {
      float v917 = v835.f32[2];
    }
    if (v732.f32[3] <= 0.0) {
      float v918 = 0.0;
    }
    else {
      float v918 = v835.f32[3];
    }
    if (v915 > 0.0 || v916 > 0.0 || v917 > 0.0 || v918 > 0.0)
    {
      float32x4_t v1471 = v682;
      float32x4_t v1526 = v26;
      float32x4_t v1542 = v25;
      float32x4_t v1558 = v24;
      float32x4_t v1574 = v23;
      float v921 = fmaxf(v916, 0.0);
      float v922 = fmaxf(v917, 0.0);
      float v923 = v14[4].f32[0];
      float v924 = v15[4].f32[0];
      float v925 = fmaxf(v918, 0.0);
      float v926 = v16[4].f32[0];
      float v927 = v17[4].f32[0];
      uint64_t v928 = v16;
      uint64_t v929 = v15;
      v930 = v14;
      v931 = v17;
      LODWORD(v1433) = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t, float, float))(v5 + 560))(a1, fmaxf(v915, 0.0), v923));
      LODWORD(v1421) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v921, v924));
      LODWORD(v1407) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v922, v926));
      a1 = (*(uint64_t (**)(float, float))(v5 + 560))(v925, v927);
      if ((v7 & 0x800) != 0)
      {
        unsigned int v936 = v928;
        int v933 = v930;
        float32x4_t v939 = *(float32x4_t *)(v5 + 13216);
        float32x4_t v934 = vmulq_f32(v939, v4[13]);
        float32x4_t v935 = vmulq_f32(v939, v10[13]);
        float32x4_t v937 = vmulq_f32(v939, v11[13]);
        float32x4_t v938 = vmulq_f32(v939, v12[13]);
      }
      else
      {
        int v933 = v930;
        float32x4_t v934 = v930[19];
        float32x4_t v935 = v929[19];
        unsigned int v936 = v928;
        float32x4_t v937 = v928[19];
        float32x4_t v938 = v931[19];
      }
      unsigned int v17 = v931;
      uint64_t v15 = v929;
      float32x4_t v682 = v1471;
      float32x4_t v919 = v1486;
      float32x4_t v800 = v1450;
      float32x4_t v920 = v1458;
      float32x4_t v801 = v1442;
      float32x4_t v940 = vmulq_n_f32(v934, v1433);
      float32x4_t v941 = vmulq_n_f32(v935, v1421);
      float32x4_t v942 = vmulq_n_f32(v937, v1407);
      float32x4_t v943 = vmulq_n_f32(v938, v932);
      LOWORD(v6) = v1462;
      float32x4_t v24 = v1558;
      float32x4_t v23 = v1574;
      float32x4_t v25 = v1542;
      float32x4_t v26 = v1526;
      float32x4_t v22 = v1512;
      if ((v1462 & 0x10) != 0)
      {
        int v14 = v933;
        uint64_t v16 = v936;
        if (v1495)
        {
          float32x4_t v940 = vmulq_n_f32(v940, v1471.f32[0]);
          float32x4_t v941 = vmulq_lane_f32(v941, *(float32x2_t *)v1471.f32, 1);
          float32x4_t v942 = vmulq_laneq_f32(v942, v1471, 2);
          float32x4_t v943 = vmulq_laneq_f32(v943, v1471, 3);
        }
        float32x4_t v1507 = vaddq_f32(v1507, v941);
        float32x4_t v1510 = vaddq_f32(v1510, v940);
        float32x4_t v1502 = vaddq_f32(v1502, v943);
        float32x4_t v1504 = vaddq_f32(v1504, v942);
        if (v1495)
        {
LABEL_473:
          float32x4_t v919 = vmulq_n_f32(v919, v682.f32[0]);
          float32x4_t v920 = vmulq_lane_f32(v920, *(float32x2_t *)v682.f32, 1);
          float32x4_t v800 = vmulq_laneq_f32(v800, v682, 2);
          float32x4_t v801 = vmulq_laneq_f32(v801, v682, 3);
        }
      }
      else
      {
        float32x4_t v919 = vaddq_f32(v1486, v940);
        float32x4_t v920 = vaddq_f32(v1458, v941);
        float32x4_t v800 = vaddq_f32(v1450, v942);
        float32x4_t v801 = vaddq_f32(v1442, v943);
        int v14 = v933;
        uint64_t v16 = v936;
        if (v1495) {
          goto LABEL_473;
        }
      }
    }
    else
    {
      float32x4_t v919 = v1486;
      float32x4_t v920 = v1458;
      if (v1495) {
        goto LABEL_473;
      }
    }
    float32x4_t v23 = vaddq_f32(v23, v919);
    float32x4_t v24 = vaddq_f32(v24, v920);
    float32x4_t v25 = vaddq_f32(v25, v800);
    float32x4_t v26 = vaddq_f32(v26, v801);
    if ((v7 & 0x20) == 0) {
      goto LABEL_508;
    }
LABEL_384:
    float32x4_t v733 = v4[7];
    float32x4_t v734 = v10[7];
    float32x4_t v735 = v11[7];
    float32x4_t v736 = v12[7];
    if ((v6 & 2) != 0)
    {
      float32x4_t v733 = vnegq_f32(v733);
      float32x4_t v734 = vnegq_f32(v734);
      float32x4_t v735 = vnegq_f32(v735);
      float32x4_t v736 = vnegq_f32(v736);
    }
    float32x4_t v737 = *(float32x4_t *)(v5 + 13440);
    float32x4_t v738 = 0uLL;
    if (((unsigned __int16)v6 & 0x2000) != 0)
    {
      float32x4_t v742 = vsubq_f32(v737, v1584);
      float32x4_t v743 = vsubq_f32(v737, v1580);
      float32x4_t v744 = vsubq_f32(v737, v1582);
      float32x4_t v745 = vsubq_f32(v737, v22);
      float32x4_t v746 = vmulq_f32(v742, v742);
      int32x4_t v747 = (int32x4_t)vmulq_f32(v743, v743);
      float32x4_t v748 = vmulq_f32(v744, v744);
      v749.i64[0] = vzip1q_s32((int32x4_t)v746, v747).u64[0];
      v749.i32[2] = v748.i32[0];
      float32x4_t v750 = vmulq_f32(v745, v745);
      v749.i32[3] = v750.i32[0];
      v751.i64[0] = vtrn2q_s32((int32x4_t)v746, v747).u64[0];
      v751.i64[1] = __PAIR64__(v750.u32[1], v748.u32[1]);
      v746.i64[0] = vzip2q_s32((int32x4_t)v746, v747).u64[0];
      v746.i64[1] = __PAIR64__(v750.u32[2], v748.u32[2]);
      float32x4_t v752 = vsqrtq_f32(vaddq_f32(v746, vaddq_f32(v749, v751)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v754 = vdivq_f32(_Q0, v752);
      float32x4_t v737 = vmulq_n_f32(v742, v754.f32[0]);
      float32x4_t v739 = vmulq_lane_f32(v743, *(float32x2_t *)v754.f32, 1);
      float32x4_t v740 = vmulq_laneq_f32(v744, v754, 2);
      float32x4_t v741 = vmulq_laneq_f32(v745, v754, 3);
      if ((v7 & 0x20000000) != 0)
      {
        float32x4_t v759 = vdivq_f32(_Q0, v754);
        uint64_t v760 = v1342;
        float32x4_t v761 = vld1q_dup_f32(v760);
        uint64_t v762 = v1341;
        float32x4_t v763 = vld1q_dup_f32(v762);
        float32x4_t v738 = vdivq_f32(_Q0, vmlaq_f32(v761, vmlaq_n_f32(v763, v759, *(float *)(v5 + 13432)), v759));
        if ((v7 & 0x200000) == 0)
        {
LABEL_391:
          if (!v1494) {
            goto LABEL_404;
          }
          goto LABEL_400;
        }
      }
      else if ((v7 & 0x200000) == 0)
      {
        goto LABEL_391;
      }
    }
    else
    {
      float32x4_t v739 = *(float32x4_t *)(v5 + 13440);
      float32x4_t v740 = v739;
      float32x4_t v741 = v739;
      if ((v7 & 0x200000) == 0) {
        goto LABEL_391;
      }
    }
    float32x4_t v764 = vnegq_f32(*(float32x4_t *)(v5 + 13456));
    float32x4_t v765 = vmulq_f32(v737, v764);
    int32x4_t v766 = (int32x4_t)vmulq_f32(v739, v764);
    float32x4_t v767 = vmulq_f32(v740, v764);
    float32x4_t v768 = vmulq_f32(v741, v764);
    v769.i64[0] = vzip1q_s32((int32x4_t)v765, v766).u64[0];
    v769.i64[1] = __PAIR64__(v768.u32[0], v767.u32[0]);
    v770.i64[0] = vtrn2q_s32((int32x4_t)v765, v766).u64[0];
    v770.i64[1] = __PAIR64__(v768.u32[1], v767.u32[1]);
    v765.i64[0] = vzip2q_s32((int32x4_t)v765, v766).u64[0];
    v765.i64[1] = __PAIR64__(v768.u32[2], v767.u32[2]);
    float32x4_t v771 = vaddq_f32(v765, vaddq_f32(v769, v770));
    uint64_t v772 = v1351;
    float32x4_t v773 = vld1q_dup_f32(v772);
    int32x4_t v774 = vcgeq_f32(v771, v773);
    int32x4_t v775 = (int32x4_t)vmvnq_s8((int8x16_t)v774);
    *(int16x4_t *)v775.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v775), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v775.i8))
    {
      float32x4_t v738 = 0uLL;
      if (!v1494) {
        goto LABEL_404;
      }
    }
    else
    {
      v775.i32[0] = 0;
      int8x16_t v1387 = (int8x16_t)v774;
      v774.i32[0] = v7 & 0x20000000;
      int8x16_t v776 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v774, v775), 0);
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1379 = (float32x4_t)vbslq_s8(v776, _Q1, (int8x16_t)v738);
      float v778 = *(float *)(v5 + 13436);
      float32x4_t v1557 = v24;
      float32x4_t v1573 = v23;
      float32x4_t v1541 = v25;
      float32x4_t v1525 = v26;
      float32x4_t v1406 = v740;
      float32x4_t v1420 = v737;
      float32x4_t v1469 = v741;
      float32x4_t v1485 = v771;
      float32x4_t v1395 = v739;
      unsigned int v1372 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(v5 + 560))(a1));
      unsigned int v1365 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1485.f32[1], v778));
      unsigned int v1358 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1485.f32[2], v778));
      *(float *)&unsigned int v779 = (*(float (**)(float, float))(v5 + 560))(v1485.f32[3], v778);
      float32x4_t v739 = v1395;
      float32x4_t v740 = v1406;
      float32x4_t v741 = v1469;
      float32x4_t v737 = v1420;
      float32x4_t v22 = v1512;
      float32x4_t v26 = v1525;
      float32x4_t v25 = v1541;
      float32x4_t v24 = v1557;
      float32x4_t v23 = v1573;
      unsigned int v17 = v1514;
      v780.i64[0] = __PAIR64__(v1365, v1372);
      v780.i64[1] = __PAIR64__(v779, v1358);
      float32x4_t v738 = vmulq_f32(v1379, (float32x4_t)vandq_s8(v780, v1387));
      if (!v1494) {
        goto LABEL_404;
      }
    }
LABEL_400:
    if (v738.f32[0] <= 0.0 && v738.f32[1] <= 0.0 && v738.f32[2] <= 0.0 && v738.f32[3] <= 0.0) {
      goto LABEL_508;
    }
LABEL_404:
    if (v1586)
    {
      if ((v7 & 0x200) != 0)
      {
        float32x4_t v785 = *(float32x4_t *)(v5 + 13344);
        float32x4_t v781 = vmulq_f32(v785, v4[13]);
        float32x4_t v782 = vmulq_f32(v785, v10[13]);
        float32x4_t v783 = vmulq_f32(v785, v11[13]);
        float32x4_t v784 = vmulq_f32(v785, v12[13]);
      }
      else
      {
        float32x4_t v781 = v14[20];
        float32x4_t v782 = v15[20];
        float32x4_t v783 = v16[20];
        float32x4_t v784 = v17[20];
      }
    }
    else
    {
      float32x4_t v784 = 0uLL;
      float32x4_t v783 = 0uLL;
      float32x4_t v782 = 0uLL;
      float32x4_t v781 = 0uLL;
    }
    float32x4_t v786 = vmulq_f32(v733, v737);
    int32x4_t v787 = (int32x4_t)vmulq_f32(v734, v739);
    float32x4_t v788 = vmulq_f32(v735, v740);
    float32x4_t v789 = vmulq_f32(v736, v741);
    v790.i64[0] = vzip1q_s32((int32x4_t)v786, v787).u64[0];
    v790.i64[1] = __PAIR64__(v789.u32[0], v788.u32[0]);
    v791.i64[0] = vtrn2q_s32((int32x4_t)v786, v787).u64[0];
    v791.i64[1] = __PAIR64__(v789.u32[1], v788.u32[1]);
    v786.i64[0] = vzip2q_s32((int32x4_t)v786, v787).u64[0];
    v786.i64[1] = __PAIR64__(v789.u32[2], v788.u32[2]);
    float32x4_t v792 = vaddq_f32(v786, vaddq_f32(v790, v791));
    if (v792.f32[0] > 0.0 || v792.f32[1] > 0.0 || v792.f32[2] > 0.0 || v792.f32[3] > 0.0)
    {
      float32x4_t v1470 = v741;
      if ((v7 & 0x400) != 0)
      {
        float32x4_t v806 = *(float32x4_t *)(v5 + 13360);
        float32x4_t v793 = vmulq_f32(v806, v4[13]);
        float32x4_t v794 = vmulq_f32(v806, v10[13]);
        float32x4_t v795 = vmulq_f32(v806, v11[13]);
        float32x4_t v796 = vmulq_f32(v806, v12[13]);
      }
      else
      {
        float32x4_t v793 = v14[21];
        float32x4_t v794 = v15[21];
        float32x4_t v795 = v16[21];
        float32x4_t v796 = v17[21];
      }
      float32x4_t v807 = vmulq_n_f32(v793, fmaxf(v792.f32[0], 0.0));
      float32x4_t v808 = vmulq_n_f32(v794, fmaxf(v792.f32[1], 0.0));
      float32x4_t v809 = vmulq_n_f32(v795, fmaxf(v792.f32[2], 0.0));
      float32x4_t v810 = vmulq_n_f32(v796, fmaxf(v792.f32[3], 0.0));
      if (v1586)
      {
        float32x4_t v807 = vaddq_f32(v781, v807);
        float32x4_t v808 = vaddq_f32(v782, v808);
        float32x4_t v809 = vaddq_f32(v783, v809);
        float32x4_t v810 = vaddq_f32(v784, v810);
      }
      float32x4_t v1487 = v807;
      float32x4_t v1451 = v809;
      float32x4_t v1459 = v808;
      float32x4_t v1443 = v810;
      if ((v6 & 0x20) != 0)
      {
        float32x4_t v836 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v733, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v733, 0xCuLL)));
        int32x4_t v837 = (int32x4_t)vmlsq_f32(vmulq_f32(v836, v737), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v737, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v737, 0xCuLL))), v733);
        int32x4_t v838 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v837, 0xCuLL);
        float32x4_t v839 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v734, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v734, 0xCuLL)));
        float32x4_t v840 = vmlsq_f32(vmulq_f32(v839, v739), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v739, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v739, 0xCuLL))), v734);
        int32x4_t v841 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v840, 0xCuLL);
        float32x4_t v842 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v735, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v735, 0xCuLL)));
        int32x4_t v843 = (int32x4_t)vmlsq_f32(vmulq_f32(v842, v740), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v740, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v740, 0xCuLL))), v735);
        int32x4_t v844 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v843, 0xCuLL);
        float32x4_t v845 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v736, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v736, 0xCuLL)));
        int32x4_t v846 = (int32x4_t)vmlsq_f32(vmulq_f32(v845, v1470), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1470, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1470, 0xCuLL))), v736);
        int32x4_t v847 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v846, 0xCuLL);
        int32x4_t v848 = (int32x4_t)vmlsq_f32(vmulq_f32(v836, (float32x4_t)vrev64q_s32(vuzp1q_s32(v837, v838))), (float32x4_t)vextq_s8((int8x16_t)v838, (int8x16_t)vrev64q_s32(v838), 8uLL), v733);
        int32x4_t v849 = (int32x4_t)vmlsq_f32(vmulq_f32(v839, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v840, v841))), (float32x4_t)vextq_s8((int8x16_t)v841, (int8x16_t)vrev64q_s32(v841), 8uLL), v734);
        int32x4_t v850 = (int32x4_t)vmlsq_f32(vmulq_f32(v842, (float32x4_t)vrev64q_s32(vuzp1q_s32(v843, v844))), (float32x4_t)vextq_s8((int8x16_t)v844, (int8x16_t)vrev64q_s32(v844), 8uLL), v735);
        int32x4_t v851 = (int32x4_t)vmlsq_f32(vmulq_f32(v845, (float32x4_t)vrev64q_s32(vuzp1q_s32(v846, v847))), (float32x4_t)vextq_s8((int8x16_t)v847, (int8x16_t)vrev64q_s32(v847), 8uLL), v736);
        v840.i64[0] = 0x4000000040000000;
        v840.i64[1] = 0x4000000040000000;
        float32x4_t v852 = vmlaq_f32(v737, v840, (float32x4_t)vrev64q_s32(vuzp1q_s32(v848, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v848, 0xCuLL))));
        float32x4_t v853 = vmlaq_f32(v739, v840, (float32x4_t)vrev64q_s32(vuzp1q_s32(v849, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v849, 0xCuLL))));
        float32x4_t v854 = vmlaq_f32(v740, v840, (float32x4_t)vrev64q_s32(vuzp1q_s32(v850, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v850, 0xCuLL))));
        float32x4_t v855 = vmlaq_f32(v1470, v840, (float32x4_t)vrev64q_s32(vuzp1q_s32(v851, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v851, 0xCuLL))));
        if ((v6 & 8) != 0)
        {
          float32x4_t v869 = vmulq_f32(v1584, v1584);
          int32x4_t v870 = (int32x4_t)vmulq_f32(v1580, v1580);
          float32x4_t v871 = vmulq_f32(v1582, v1582);
          float32x4_t v872 = vmulq_f32(v22, v22);
          v873.i64[0] = vzip1q_s32((int32x4_t)v869, v870).u64[0];
          v873.i64[1] = __PAIR64__(v872.u32[0], v871.u32[0]);
          v874.i64[0] = vtrn2q_s32((int32x4_t)v869, v870).u64[0];
          v874.i64[1] = __PAIR64__(v872.u32[1], v871.u32[1]);
          v869.i64[0] = vzip2q_s32((int32x4_t)v869, v870).u64[0];
          v869.i64[1] = __PAIR64__(v872.u32[2], v871.u32[2]);
          __asm { FMOV            V7.4S, #1.0 }
          float32x4_t v876 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v869, vaddq_f32(v873, v874))));
          float32x4_t v877 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1584), v876.f32[0]), v852);
          int32x4_t v878 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v876.f32, 1), v853);
          float32x4_t v879 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1582), v876, 2), v854);
          float32x4_t v880 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v22), v876, 3), v855);
          v871.i64[0] = vzip1q_s32((int32x4_t)v877, v878).u64[0];
          v871.i64[1] = __PAIR64__(v880.u32[0], v879.u32[0]);
          v872.i64[0] = vtrn2q_s32((int32x4_t)v877, v878).u64[0];
          v872.i64[1] = __PAIR64__(v880.u32[1], v879.u32[1]);
          v877.i64[0] = vzip2q_s32((int32x4_t)v877, v878).u64[0];
          v877.i64[1] = __PAIR64__(v880.u32[2], v879.u32[2]);
          float32x4_t v856 = vaddq_f32(v877, vaddq_f32(v871, v872));
        }
        else
        {
          v856.i64[0] = vzip2q_s32((int32x4_t)v852, (int32x4_t)v853).u64[0];
          v856.i64[1] = __PAIR64__(v855.u32[2], v854.u32[2]);
        }
        float32x4_t v810 = v1443;
        float32x4_t v809 = v1451;
        float v9 = 1.0;
      }
      else
      {
        if (v1323)
        {
          if ((v6 & 8) != 0)
          {
            float32x4_t v944 = vmulq_f32(v1584, v1584);
            int32x4_t v945 = (int32x4_t)vmulq_f32(v1580, v1580);
            float32x4_t v946 = vmulq_f32(v1582, v1582);
            v947.i64[0] = vzip1q_s32((int32x4_t)v944, v945).u64[0];
            v947.i32[2] = v946.i32[0];
            float32x4_t v948 = vmulq_f32(v22, v22);
            v947.i32[3] = v948.i32[0];
            v949.i64[0] = vtrn2q_s32((int32x4_t)v944, v945).u64[0];
            v949.i64[1] = __PAIR64__(v948.u32[1], v946.u32[1]);
            v944.i64[0] = vzip2q_s32((int32x4_t)v944, v945).u64[0];
            v944.i64[1] = __PAIR64__(v948.u32[2], v946.u32[2]);
            __asm { FMOV            V16.4S, #1.0 }
            float32x4_t v951 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v944, vaddq_f32(v947, v949))));
            float32x4_t v811 = vmulq_n_f32(vnegq_f32(v1584), v951.f32[0]);
            float32x4_t v812 = vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v951.f32, 1);
            float32x4_t v813 = vmulq_laneq_f32(vnegq_f32(v1582), v951, 2);
            float32x4_t v814 = vmulq_laneq_f32(vnegq_f32(v22), v951, 3);
          }
          else
          {
            float32x4_t v811 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v812 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v813 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v814 = (float32x4_t)xmmword_227DC2100;
          }
          float32x4_t v952 = vaddq_f32(v737, v811);
          float32x4_t v953 = vaddq_f32(v739, v812);
          float32x4_t v954 = vaddq_f32(v740, v813);
          float32x4_t v955 = vaddq_f32(v1470, v814);
          float32x4_t v956 = vmulq_f32(v952, v952);
          int32x4_t v957 = (int32x4_t)vmulq_f32(v953, v953);
          float32x4_t v958 = vmulq_f32(v954, v954);
          v959.i64[0] = vzip1q_s32((int32x4_t)v956, v957).u64[0];
          v959.i32[2] = v958.i32[0];
          float32x4_t v960 = vmulq_f32(v955, v955);
          v959.i32[3] = v960.i32[0];
          v961.i64[0] = vtrn2q_s32((int32x4_t)v956, v957).u64[0];
          v961.i64[1] = __PAIR64__(v960.u32[1], v958.u32[1]);
          v956.i64[0] = vzip2q_s32((int32x4_t)v956, v957).u64[0];
          v956.i64[1] = __PAIR64__(v960.u32[2], v958.u32[2]);
          __asm { FMOV            V17.4S, #1.0 }
          float32x4_t v963 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v956, vaddq_f32(v959, v961))));
          float32x4_t v885 = vmulq_n_f32(v952, v963.f32[0]);
          float32x4_t v886 = vmulq_lane_f32(v953, *(float32x2_t *)v963.f32, 1);
          float32x4_t v887 = vmulq_laneq_f32(v954, v963, 2);
          float32x4_t v888 = vmulq_laneq_f32(v955, v963, 3);
        }
        else
        {
          float32x4_t v885 = *(float32x4_t *)(v5 + 13472);
          float32x4_t v886 = v885;
          float32x4_t v887 = v885;
          float32x4_t v888 = v885;
        }
        float32x4_t v964 = vmulq_f32(v733, v885);
        int32x4_t v965 = (int32x4_t)vmulq_f32(v734, v886);
        float32x4_t v966 = vmulq_f32(v735, v887);
        float32x4_t v967 = vmulq_f32(v736, v888);
        v968.i64[0] = vzip1q_s32((int32x4_t)v964, v965).u64[0];
        v968.i64[1] = __PAIR64__(v967.u32[0], v966.u32[0]);
        v969.i64[0] = vtrn2q_s32((int32x4_t)v964, v965).u64[0];
        v969.i64[1] = __PAIR64__(v967.u32[1], v966.u32[1]);
        v964.i64[0] = vzip2q_s32((int32x4_t)v964, v965).u64[0];
        v964.i64[1] = __PAIR64__(v967.u32[2], v966.u32[2]);
        float32x4_t v856 = vaddq_f32(v964, vaddq_f32(v968, v969));
      }
      if (v792.f32[0] <= 0.0) {
        float v970 = 0.0;
      }
      else {
        float v970 = v856.f32[0];
      }
      if (v792.f32[1] <= 0.0) {
        float v971 = 0.0;
      }
      else {
        float v971 = v856.f32[1];
      }
      if (v792.f32[2] <= 0.0) {
        float v972 = 0.0;
      }
      else {
        float v972 = v856.f32[2];
      }
      if (v792.f32[3] <= 0.0) {
        float v973 = 0.0;
      }
      else {
        float v973 = v856.f32[3];
      }
      if (v970 > 0.0 || v971 > 0.0 || v972 > 0.0 || v973 > 0.0)
      {
        float32x4_t v1472 = v738;
        float32x4_t v1527 = v26;
        float32x4_t v1543 = v25;
        float32x4_t v1559 = v24;
        float32x4_t v1575 = v23;
        float v976 = fmaxf(v971, 0.0);
        float v977 = fmaxf(v972, 0.0);
        float v978 = v14[4].f32[0];
        float v979 = v15[4].f32[0];
        float v980 = fmaxf(v973, 0.0);
        float v981 = v16[4].f32[0];
        float v982 = v17[4].f32[0];
        long long v983 = v16;
        long long v984 = v15;
        long long v985 = v14;
        uint64_t v986 = v17;
        LODWORD(v1434) = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t, float, float))(v5 + 560))(a1, fmaxf(v970, 0.0), v978));
        LODWORD(v1422) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v976, v979));
        LODWORD(v1408) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v977, v981));
        a1 = (*(uint64_t (**)(float, float))(v5 + 560))(v980, v982);
        if ((v7 & 0x800) != 0)
        {
          v991 = v983;
          v988 = v985;
          float32x4_t v994 = *(float32x4_t *)(v5 + 13376);
          float32x4_t v989 = vmulq_f32(v994, v4[13]);
          float32x4_t v990 = vmulq_f32(v994, v10[13]);
          float32x4_t v992 = vmulq_f32(v994, v11[13]);
          float32x4_t v993 = vmulq_f32(v994, v12[13]);
        }
        else
        {
          v988 = v985;
          float32x4_t v989 = v985[22];
          float32x4_t v990 = v984[22];
          v991 = v983;
          float32x4_t v992 = v983[22];
          float32x4_t v993 = v986[22];
        }
        unsigned int v17 = v986;
        uint64_t v15 = v984;
        float32x4_t v738 = v1472;
        float32x4_t v974 = v1487;
        float32x4_t v809 = v1451;
        float32x4_t v975 = v1459;
        float32x4_t v810 = v1443;
        float32x4_t v995 = vmulq_n_f32(v989, v1434);
        float32x4_t v996 = vmulq_n_f32(v990, v1422);
        float32x4_t v997 = vmulq_n_f32(v992, v1408);
        float32x4_t v998 = vmulq_n_f32(v993, v987);
        LOWORD(v6) = v1462;
        float32x4_t v24 = v1559;
        float32x4_t v23 = v1575;
        float32x4_t v25 = v1543;
        float32x4_t v26 = v1527;
        float32x4_t v22 = v1512;
        if ((v1462 & 0x10) != 0)
        {
          int v14 = v988;
          uint64_t v16 = v991;
          if (v1494)
          {
            float32x4_t v995 = vmulq_n_f32(v995, v1472.f32[0]);
            float32x4_t v996 = vmulq_lane_f32(v996, *(float32x2_t *)v1472.f32, 1);
            float32x4_t v997 = vmulq_laneq_f32(v997, v1472, 2);
            float32x4_t v998 = vmulq_laneq_f32(v998, v1472, 3);
          }
          float32x4_t v1507 = vaddq_f32(v1507, v996);
          float32x4_t v1510 = vaddq_f32(v1510, v995);
          float32x4_t v1502 = vaddq_f32(v1502, v998);
          float32x4_t v1504 = vaddq_f32(v1504, v997);
          if (!v1494) {
            goto LABEL_507;
          }
        }
        else
        {
          float32x4_t v974 = vaddq_f32(v1487, v995);
          float32x4_t v975 = vaddq_f32(v1459, v996);
          float32x4_t v809 = vaddq_f32(v1451, v997);
          float32x4_t v810 = vaddq_f32(v1443, v998);
          int v14 = v988;
          uint64_t v16 = v991;
          if (!v1494) {
            goto LABEL_507;
          }
        }
      }
      else
      {
        float32x4_t v974 = v1487;
        float32x4_t v975 = v1459;
        if (!v1494) {
          goto LABEL_507;
        }
      }
      float32x4_t v974 = vmulq_n_f32(v974, v738.f32[0]);
      float32x4_t v975 = vmulq_lane_f32(v975, *(float32x2_t *)v738.f32, 1);
      float32x4_t v809 = vmulq_laneq_f32(v809, v738, 2);
      float32x4_t v810 = vmulq_laneq_f32(v810, v738, 3);
LABEL_507:
      float32x4_t v23 = vaddq_f32(v23, v974);
      float32x4_t v24 = vaddq_f32(v24, v975);
      float32x4_t v25 = vaddq_f32(v25, v809);
      float32x4_t v26 = vaddq_f32(v26, v810);
      goto LABEL_508;
    }
    if (v1586)
    {
      if (v1494)
      {
        float32x4_t v781 = vmulq_n_f32(v781, v738.f32[0]);
        float32x4_t v782 = vmulq_lane_f32(v782, *(float32x2_t *)v738.f32, 1);
        float32x4_t v783 = vmulq_laneq_f32(v783, v738, 2);
        float32x4_t v784 = vmulq_laneq_f32(v784, v738, 3);
      }
      float32x4_t v23 = vaddq_f32(v23, v781);
      float32x4_t v24 = vaddq_f32(v24, v782);
      float32x4_t v25 = vaddq_f32(v25, v783);
      float32x4_t v26 = vaddq_f32(v26, v784);
    }
LABEL_508:
    if ((v7 & 0x40) == 0) {
      goto LABEL_540;
    }
    float32x4_t v999 = v4[7];
    float32x4_t v1000 = v10[7];
    float32x4_t v1001 = v11[7];
    float32x4_t v1002 = v12[7];
    if ((v6 & 2) != 0)
    {
      float32x4_t v999 = vnegq_f32(v999);
      float32x4_t v1000 = vnegq_f32(v1000);
      float32x4_t v1001 = vnegq_f32(v1001);
      float32x4_t v1002 = vnegq_f32(v1002);
    }
    float32x4_t v1003 = *(float32x4_t *)(v5 + 13600);
    float32x4_t v1004 = 0uLL;
    if (((unsigned __int16)v6 & 0x4000) != 0)
    {
      float32x4_t v1008 = vsubq_f32(v1003, v1584);
      float32x4_t v1009 = vsubq_f32(v1003, v1580);
      float32x4_t v1010 = vsubq_f32(v1003, v1582);
      float32x4_t v1011 = vsubq_f32(v1003, v22);
      float32x4_t v1012 = vmulq_f32(v1008, v1008);
      int32x4_t v1013 = (int32x4_t)vmulq_f32(v1009, v1009);
      float32x4_t v1014 = vmulq_f32(v1010, v1010);
      v1015.i64[0] = vzip1q_s32((int32x4_t)v1012, v1013).u64[0];
      v1015.i32[2] = v1014.i32[0];
      float32x4_t v1016 = vmulq_f32(v1011, v1011);
      v1015.i32[3] = v1016.i32[0];
      v1017.i64[0] = vtrn2q_s32((int32x4_t)v1012, v1013).u64[0];
      v1017.i64[1] = __PAIR64__(v1016.u32[1], v1014.u32[1]);
      v1012.i64[0] = vzip2q_s32((int32x4_t)v1012, v1013).u64[0];
      v1012.i64[1] = __PAIR64__(v1016.u32[2], v1014.u32[2]);
      float32x4_t v1018 = vsqrtq_f32(vaddq_f32(v1012, vaddq_f32(v1015, v1017)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v1020 = vdivq_f32(_Q0, v1018);
      float32x4_t v1003 = vmulq_n_f32(v1008, v1020.f32[0]);
      float32x4_t v1005 = vmulq_lane_f32(v1009, *(float32x2_t *)v1020.f32, 1);
      float32x4_t v1006 = vmulq_laneq_f32(v1010, v1020, 2);
      float32x4_t v1007 = vmulq_laneq_f32(v1011, v1020, 3);
      if ((v7 & 0x40000000) != 0)
      {
        float32x4_t v1021 = vdivq_f32(_Q0, v1020);
        v1022 = v1344;
        float32x4_t v1023 = vld1q_dup_f32(v1022);
        v1024 = v1343;
        float32x4_t v1025 = vld1q_dup_f32(v1024);
        float32x4_t v1004 = vdivq_f32(_Q0, vmlaq_f32(v1023, vmlaq_n_f32(v1025, v1021, *(float *)(v5 + 13592)), v1021));
        if ((v7 & 0x400000) == 0)
        {
LABEL_516:
          if (!v1493) {
            goto LABEL_527;
          }
          goto LABEL_523;
        }
      }
      else if ((v7 & 0x400000) == 0)
      {
        goto LABEL_516;
      }
    }
    else
    {
      float32x4_t v1005 = *(float32x4_t *)(v5 + 13600);
      float32x4_t v1006 = v1005;
      float32x4_t v1007 = v1005;
      if ((v7 & 0x400000) == 0) {
        goto LABEL_516;
      }
    }
    float32x4_t v1026 = vnegq_f32(*(float32x4_t *)(v5 + 13616));
    float32x4_t v1027 = vmulq_f32(v1003, v1026);
    int32x4_t v1028 = (int32x4_t)vmulq_f32(v1005, v1026);
    float32x4_t v1029 = vmulq_f32(v1006, v1026);
    float32x4_t v1030 = vmulq_f32(v1007, v1026);
    v1031.i64[0] = vzip1q_s32((int32x4_t)v1027, v1028).u64[0];
    v1031.i64[1] = __PAIR64__(v1030.u32[0], v1029.u32[0]);
    v1032.i64[0] = vtrn2q_s32((int32x4_t)v1027, v1028).u64[0];
    v1032.i64[1] = __PAIR64__(v1030.u32[1], v1029.u32[1]);
    v1027.i64[0] = vzip2q_s32((int32x4_t)v1027, v1028).u64[0];
    v1027.i64[1] = __PAIR64__(v1030.u32[2], v1029.u32[2]);
    float32x4_t v1033 = vaddq_f32(v1027, vaddq_f32(v1031, v1032));
    v1034 = v1352;
    float32x4_t v1035 = vld1q_dup_f32(v1034);
    int32x4_t v1036 = vcgeq_f32(v1033, v1035);
    int32x4_t v1037 = (int32x4_t)vmvnq_s8((int8x16_t)v1036);
    *(int16x4_t *)v1037.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v1037), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v1037.i8))
    {
      float32x4_t v1004 = 0uLL;
      if (!v1493) {
        goto LABEL_527;
      }
    }
    else
    {
      v1037.i32[0] = 0;
      int8x16_t v1388 = (int8x16_t)v1036;
      v1036.i32[0] = v7 & 0x40000000;
      int8x16_t v1038 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v1036, v1037), 0);
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1380 = (float32x4_t)vbslq_s8(v1038, _Q1, (int8x16_t)v1004);
      float v1040 = *(float *)(v5 + 13596);
      float32x4_t v1560 = v24;
      float32x4_t v1576 = v23;
      float32x4_t v1544 = v25;
      float32x4_t v1528 = v26;
      float32x4_t v1409 = v1006;
      float32x4_t v1423 = v1003;
      float32x4_t v1473 = v1007;
      float32x4_t v1488 = v1033;
      float32x4_t v1396 = v1005;
      unsigned int v1373 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(v5 + 560))(a1));
      unsigned int v1366 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1488.f32[1], v1040));
      unsigned int v1359 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1488.f32[2], v1040));
      *(float *)&unsigned int v1041 = (*(float (**)(float, float))(v5 + 560))(v1488.f32[3], v1040);
      float32x4_t v1005 = v1396;
      float32x4_t v1006 = v1409;
      float32x4_t v1007 = v1473;
      float32x4_t v1003 = v1423;
      float32x4_t v22 = v1512;
      float32x4_t v26 = v1528;
      float32x4_t v25 = v1544;
      float32x4_t v24 = v1560;
      float32x4_t v23 = v1576;
      unsigned int v17 = v1514;
      v1042.i64[0] = __PAIR64__(v1366, v1373);
      v1042.i64[1] = __PAIR64__(v1041, v1359);
      float32x4_t v1004 = vmulq_f32(v1380, (float32x4_t)vandq_s8(v1042, v1388));
      if (!v1493) {
        goto LABEL_527;
      }
    }
LABEL_523:
    if (v1004.f32[0] <= 0.0 && v1004.f32[1] <= 0.0 && v1004.f32[2] <= 0.0 && v1004.f32[3] <= 0.0) {
      goto LABEL_540;
    }
LABEL_527:
    if (v1586)
    {
      if ((v7 & 0x200) != 0)
      {
        float32x4_t v1047 = *(float32x4_t *)(v5 + 13504);
        float32x4_t v1043 = vmulq_f32(v1047, v4[13]);
        float32x4_t v1044 = vmulq_f32(v1047, v10[13]);
        float32x4_t v1045 = vmulq_f32(v1047, v11[13]);
        float32x4_t v1046 = vmulq_f32(v1047, v12[13]);
      }
      else
      {
        float32x4_t v1043 = v14[23];
        float32x4_t v1044 = v15[23];
        float32x4_t v1045 = v16[23];
        float32x4_t v1046 = v17[23];
      }
    }
    else
    {
      float32x4_t v1046 = 0uLL;
      float32x4_t v1045 = 0uLL;
      float32x4_t v1044 = 0uLL;
      float32x4_t v1043 = 0uLL;
    }
    float32x4_t v1048 = vmulq_f32(v999, v1003);
    int32x4_t v1049 = (int32x4_t)vmulq_f32(v1000, v1005);
    float32x4_t v1050 = vmulq_f32(v1001, v1006);
    float32x4_t v1051 = vmulq_f32(v1002, v1007);
    v1052.i64[0] = vzip1q_s32((int32x4_t)v1048, v1049).u64[0];
    v1052.i64[1] = __PAIR64__(v1051.u32[0], v1050.u32[0]);
    v1053.i64[0] = vtrn2q_s32((int32x4_t)v1048, v1049).u64[0];
    v1053.i64[1] = __PAIR64__(v1051.u32[1], v1050.u32[1]);
    v1048.i64[0] = vzip2q_s32((int32x4_t)v1048, v1049).u64[0];
    v1048.i64[1] = __PAIR64__(v1051.u32[2], v1050.u32[2]);
    float32x4_t v1054 = vaddq_f32(v1048, vaddq_f32(v1052, v1053));
    if (v1054.f32[0] <= 0.0 && v1054.f32[1] <= 0.0 && v1054.f32[2] <= 0.0 && v1054.f32[3] <= 0.0)
    {
      if (v1586)
      {
        if (v1493)
        {
          float32x4_t v1043 = vmulq_n_f32(v1043, v1004.f32[0]);
          float32x4_t v1044 = vmulq_lane_f32(v1044, *(float32x2_t *)v1004.f32, 1);
          float32x4_t v1045 = vmulq_laneq_f32(v1045, v1004, 2);
          float32x4_t v1046 = vmulq_laneq_f32(v1046, v1004, 3);
        }
        float32x4_t v23 = vaddq_f32(v23, v1043);
        float32x4_t v24 = vaddq_f32(v24, v1044);
        float32x4_t v25 = vaddq_f32(v25, v1045);
        float32x4_t v26 = vaddq_f32(v26, v1046);
      }
LABEL_540:
      if ((v7 & 0x80) == 0) {
        goto LABEL_665;
      }
      goto LABEL_541;
    }
    float32x4_t v1474 = v1007;
    if ((v7 & 0x400) != 0)
    {
      float32x4_t v1118 = *(float32x4_t *)(v5 + 13520);
      float32x4_t v1077 = vmulq_f32(v1118, v4[13]);
      float32x4_t v1078 = vmulq_f32(v1118, v10[13]);
      float32x4_t v1079 = vmulq_f32(v1118, v11[13]);
      float32x4_t v1080 = vmulq_f32(v1118, v12[13]);
    }
    else
    {
      float32x4_t v1077 = v14[24];
      float32x4_t v1078 = v15[24];
      float32x4_t v1079 = v16[24];
      float32x4_t v1080 = v17[24];
    }
    float32x4_t v1119 = vmulq_n_f32(v1077, fmaxf(v1054.f32[0], 0.0));
    float32x4_t v1120 = vmulq_n_f32(v1078, fmaxf(v1054.f32[1], 0.0));
    float32x4_t v1121 = vmulq_n_f32(v1079, fmaxf(v1054.f32[2], 0.0));
    float32x4_t v1122 = vmulq_n_f32(v1080, fmaxf(v1054.f32[3], 0.0));
    if (v1586)
    {
      float32x4_t v1119 = vaddq_f32(v1043, v1119);
      float32x4_t v1120 = vaddq_f32(v1044, v1120);
      float32x4_t v1121 = vaddq_f32(v1045, v1121);
      float32x4_t v1122 = vaddq_f32(v1046, v1122);
    }
    float32x4_t v1490 = v1119;
    float32x4_t v1452 = v1121;
    float32x4_t v1460 = v1120;
    float32x4_t v1444 = v1122;
    if ((v6 & 0x20) != 0)
    {
      float32x4_t v1136 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v999, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v999, 0xCuLL)));
      int32x4_t v1137 = (int32x4_t)vmlsq_f32(vmulq_f32(v1136, v1003), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1003, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1003, 0xCuLL))), v999);
      int32x4_t v1138 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1137, 0xCuLL);
      float32x4_t v1139 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1000, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1000, 0xCuLL)));
      float32x4_t v1140 = vmlsq_f32(vmulq_f32(v1139, v1005), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1005, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1005, 0xCuLL))), v1000);
      int32x4_t v1141 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1140, 0xCuLL);
      float32x4_t v1142 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1001, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1001, 0xCuLL)));
      int32x4_t v1143 = (int32x4_t)vmlsq_f32(vmulq_f32(v1142, v1006), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1006, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1006, 0xCuLL))), v1001);
      int32x4_t v1144 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1143, 0xCuLL);
      float32x4_t v1145 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1002, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1002, 0xCuLL)));
      int32x4_t v1146 = (int32x4_t)vmlsq_f32(vmulq_f32(v1145, v1474), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1474, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1474, 0xCuLL))), v1002);
      int32x4_t v1147 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1146, 0xCuLL);
      int32x4_t v1148 = (int32x4_t)vmlsq_f32(vmulq_f32(v1136, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1137, v1138))), (float32x4_t)vextq_s8((int8x16_t)v1138, (int8x16_t)vrev64q_s32(v1138), 8uLL), v999);
      int32x4_t v1149 = (int32x4_t)vmlsq_f32(vmulq_f32(v1139, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1140, v1141))), (float32x4_t)vextq_s8((int8x16_t)v1141, (int8x16_t)vrev64q_s32(v1141), 8uLL), v1000);
      int32x4_t v1150 = (int32x4_t)vmlsq_f32(vmulq_f32(v1142, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1143, v1144))), (float32x4_t)vextq_s8((int8x16_t)v1144, (int8x16_t)vrev64q_s32(v1144), 8uLL), v1001);
      int32x4_t v1151 = (int32x4_t)vmlsq_f32(vmulq_f32(v1145, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1146, v1147))), (float32x4_t)vextq_s8((int8x16_t)v1147, (int8x16_t)vrev64q_s32(v1147), 8uLL), v1002);
      v1140.i64[0] = 0x4000000040000000;
      v1140.i64[1] = 0x4000000040000000;
      float32x4_t v1152 = vmlaq_f32(v1003, v1140, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1148, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1148, 0xCuLL))));
      float32x4_t v1153 = vmlaq_f32(v1005, v1140, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1149, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1149, 0xCuLL))));
      float32x4_t v1154 = vmlaq_f32(v1006, v1140, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1150, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1150, 0xCuLL))));
      float32x4_t v1155 = vmlaq_f32(v1474, v1140, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1151, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1151, 0xCuLL))));
      if ((v6 & 8) != 0)
      {
        float32x4_t v1178 = vmulq_f32(v1584, v1584);
        int32x4_t v1179 = (int32x4_t)vmulq_f32(v1580, v1580);
        float32x4_t v1180 = vmulq_f32(v1582, v1582);
        float32x4_t v1181 = vmulq_f32(v22, v22);
        v1182.i64[0] = vzip1q_s32((int32x4_t)v1178, v1179).u64[0];
        v1182.i64[1] = __PAIR64__(v1181.u32[0], v1180.u32[0]);
        v1183.i64[0] = vtrn2q_s32((int32x4_t)v1178, v1179).u64[0];
        v1183.i64[1] = __PAIR64__(v1181.u32[1], v1180.u32[1]);
        v1178.i64[0] = vzip2q_s32((int32x4_t)v1178, v1179).u64[0];
        v1178.i64[1] = __PAIR64__(v1181.u32[2], v1180.u32[2]);
        __asm { FMOV            V7.4S, #1.0 }
        float32x4_t v1185 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v1178, vaddq_f32(v1182, v1183))));
        float32x4_t v1186 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1584), v1185.f32[0]), v1152);
        int32x4_t v1187 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v1185.f32, 1), v1153);
        float32x4_t v1188 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1582), v1185, 2), v1154);
        float32x4_t v1189 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v22), v1185, 3), v1155);
        v1180.i64[0] = vzip1q_s32((int32x4_t)v1186, v1187).u64[0];
        v1180.i64[1] = __PAIR64__(v1189.u32[0], v1188.u32[0]);
        v1181.i64[0] = vtrn2q_s32((int32x4_t)v1186, v1187).u64[0];
        v1181.i64[1] = __PAIR64__(v1189.u32[1], v1188.u32[1]);
        v1186.i64[0] = vzip2q_s32((int32x4_t)v1186, v1187).u64[0];
        v1186.i64[1] = __PAIR64__(v1189.u32[2], v1188.u32[2]);
        float32x4_t v1156 = vaddq_f32(v1186, vaddq_f32(v1180, v1181));
      }
      else
      {
        v1156.i64[0] = vzip2q_s32((int32x4_t)v1152, (int32x4_t)v1153).u64[0];
        v1156.i64[1] = __PAIR64__(v1155.u32[2], v1154.u32[2]);
      }
      float32x4_t v1122 = v1444;
      float32x4_t v1121 = v1452;
      float v9 = 1.0;
    }
    else
    {
      if (v1322)
      {
        if ((v6 & 8) != 0)
        {
          float32x4_t v1210 = vmulq_f32(v1584, v1584);
          int32x4_t v1211 = (int32x4_t)vmulq_f32(v1580, v1580);
          float32x4_t v1212 = vmulq_f32(v1582, v1582);
          v1213.i64[0] = vzip1q_s32((int32x4_t)v1210, v1211).u64[0];
          v1213.i32[2] = v1212.i32[0];
          float32x4_t v1214 = vmulq_f32(v22, v22);
          v1213.i32[3] = v1214.i32[0];
          v1215.i64[0] = vtrn2q_s32((int32x4_t)v1210, v1211).u64[0];
          v1215.i64[1] = __PAIR64__(v1214.u32[1], v1212.u32[1]);
          v1210.i64[0] = vzip2q_s32((int32x4_t)v1210, v1211).u64[0];
          v1210.i64[1] = __PAIR64__(v1214.u32[2], v1212.u32[2]);
          __asm { FMOV            V16.4S, #1.0 }
          float32x4_t v1217 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v1210, vaddq_f32(v1213, v1215))));
          float32x4_t v1123 = vmulq_n_f32(vnegq_f32(v1584), v1217.f32[0]);
          float32x4_t v1124 = vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v1217.f32, 1);
          float32x4_t v1125 = vmulq_laneq_f32(vnegq_f32(v1582), v1217, 2);
          float32x4_t v1126 = vmulq_laneq_f32(vnegq_f32(v22), v1217, 3);
        }
        else
        {
          float32x4_t v1123 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v1124 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v1125 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v1126 = (float32x4_t)xmmword_227DC2100;
        }
        float32x4_t v1218 = vaddq_f32(v1003, v1123);
        float32x4_t v1219 = vaddq_f32(v1005, v1124);
        float32x4_t v1220 = vaddq_f32(v1006, v1125);
        float32x4_t v1221 = vaddq_f32(v1474, v1126);
        float32x4_t v1222 = vmulq_f32(v1218, v1218);
        int32x4_t v1223 = (int32x4_t)vmulq_f32(v1219, v1219);
        float32x4_t v1224 = vmulq_f32(v1220, v1220);
        v1225.i64[0] = vzip1q_s32((int32x4_t)v1222, v1223).u64[0];
        v1225.i32[2] = v1224.i32[0];
        float32x4_t v1226 = vmulq_f32(v1221, v1221);
        v1225.i32[3] = v1226.i32[0];
        v1227.i64[0] = vtrn2q_s32((int32x4_t)v1222, v1223).u64[0];
        v1227.i64[1] = __PAIR64__(v1226.u32[1], v1224.u32[1]);
        v1222.i64[0] = vzip2q_s32((int32x4_t)v1222, v1223).u64[0];
        v1222.i64[1] = __PAIR64__(v1226.u32[2], v1224.u32[2]);
        __asm { FMOV            V17.4S, #1.0 }
        float32x4_t v1229 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v1222, vaddq_f32(v1225, v1227))));
        float32x4_t v1202 = vmulq_n_f32(v1218, v1229.f32[0]);
        float32x4_t v1203 = vmulq_lane_f32(v1219, *(float32x2_t *)v1229.f32, 1);
        float32x4_t v1204 = vmulq_laneq_f32(v1220, v1229, 2);
        float32x4_t v1205 = vmulq_laneq_f32(v1221, v1229, 3);
      }
      else
      {
        float32x4_t v1202 = *(float32x4_t *)(v5 + 13632);
        float32x4_t v1203 = v1202;
        float32x4_t v1204 = v1202;
        float32x4_t v1205 = v1202;
      }
      float32x4_t v1230 = vmulq_f32(v999, v1202);
      int32x4_t v1231 = (int32x4_t)vmulq_f32(v1000, v1203);
      float32x4_t v1232 = vmulq_f32(v1001, v1204);
      float32x4_t v1233 = vmulq_f32(v1002, v1205);
      v1234.i64[0] = vzip1q_s32((int32x4_t)v1230, v1231).u64[0];
      v1234.i64[1] = __PAIR64__(v1233.u32[0], v1232.u32[0]);
      v1235.i64[0] = vtrn2q_s32((int32x4_t)v1230, v1231).u64[0];
      v1235.i64[1] = __PAIR64__(v1233.u32[1], v1232.u32[1]);
      v1230.i64[0] = vzip2q_s32((int32x4_t)v1230, v1231).u64[0];
      v1230.i64[1] = __PAIR64__(v1233.u32[2], v1232.u32[2]);
      float32x4_t v1156 = vaddq_f32(v1230, vaddq_f32(v1234, v1235));
    }
    if (v1054.f32[0] <= 0.0) {
      float v1236 = 0.0;
    }
    else {
      float v1236 = v1156.f32[0];
    }
    if (v1054.f32[1] <= 0.0) {
      float v1237 = 0.0;
    }
    else {
      float v1237 = v1156.f32[1];
    }
    if (v1054.f32[2] <= 0.0) {
      float v1238 = 0.0;
    }
    else {
      float v1238 = v1156.f32[2];
    }
    if (v1054.f32[3] <= 0.0) {
      float v1239 = 0.0;
    }
    else {
      float v1239 = v1156.f32[3];
    }
    if (v1236 > 0.0 || v1237 > 0.0 || v1238 > 0.0 || v1239 > 0.0)
    {
      float32x4_t v1476 = v1004;
      float32x4_t v1530 = v26;
      float32x4_t v1546 = v25;
      float32x4_t v1562 = v24;
      float32x4_t v1578 = v23;
      float v1242 = fmaxf(v1237, 0.0);
      float v1243 = fmaxf(v1238, 0.0);
      float v1244 = v14[4].f32[0];
      float v1245 = v15[4].f32[0];
      float v1246 = fmaxf(v1239, 0.0);
      float v1247 = v16[4].f32[0];
      float v1248 = v17[4].f32[0];
      v1249 = v16;
      v1250 = v15;
      v1251 = v14;
      v1252 = v17;
      LODWORD(v1436) = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t, float, float))(v5 + 560))(a1, fmaxf(v1236, 0.0), v1244));
      LODWORD(v1425) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1242, v1245));
      LODWORD(v1411) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1243, v1247));
      a1 = (*(uint64_t (**)(float, float))(v5 + 560))(v1246, v1248);
      if ((v7 & 0x800) != 0)
      {
        v1257 = v1249;
        v1254 = v1251;
        float32x4_t v1260 = *(float32x4_t *)(v5 + 13536);
        float32x4_t v1255 = vmulq_f32(v1260, v4[13]);
        float32x4_t v1256 = vmulq_f32(v1260, v10[13]);
        float32x4_t v1258 = vmulq_f32(v1260, v11[13]);
        float32x4_t v1259 = vmulq_f32(v1260, v12[13]);
      }
      else
      {
        v1254 = v1251;
        float32x4_t v1255 = v1251[25];
        float32x4_t v1256 = v1250[25];
        v1257 = v1249;
        float32x4_t v1258 = v1249[25];
        float32x4_t v1259 = v1252[25];
      }
      unsigned int v17 = v1252;
      uint64_t v15 = v1250;
      float32x4_t v1004 = v1476;
      float32x4_t v1240 = v1490;
      float32x4_t v1121 = v1452;
      float32x4_t v1241 = v1460;
      float32x4_t v1122 = v1444;
      float32x4_t v1261 = vmulq_n_f32(v1255, v1436);
      float32x4_t v1262 = vmulq_n_f32(v1256, v1425);
      float32x4_t v1263 = vmulq_n_f32(v1258, v1411);
      float32x4_t v1264 = vmulq_n_f32(v1259, v1253);
      LOWORD(v6) = v1462;
      float32x4_t v24 = v1562;
      float32x4_t v23 = v1578;
      float32x4_t v25 = v1546;
      float32x4_t v26 = v1530;
      float32x4_t v22 = v1512;
      if ((v1462 & 0x10) != 0)
      {
        int v14 = v1254;
        uint64_t v16 = v1257;
        if (v1493)
        {
          float32x4_t v1261 = vmulq_n_f32(v1261, v1476.f32[0]);
          float32x4_t v1262 = vmulq_lane_f32(v1262, *(float32x2_t *)v1476.f32, 1);
          float32x4_t v1263 = vmulq_laneq_f32(v1263, v1476, 2);
          float32x4_t v1264 = vmulq_laneq_f32(v1264, v1476, 3);
        }
        float32x4_t v1507 = vaddq_f32(v1507, v1262);
        float32x4_t v1510 = vaddq_f32(v1510, v1261);
        float32x4_t v1502 = vaddq_f32(v1502, v1264);
        float32x4_t v1504 = vaddq_f32(v1504, v1263);
        if (v1493)
        {
LABEL_630:
          float32x4_t v1240 = vmulq_n_f32(v1240, v1004.f32[0]);
          float32x4_t v1241 = vmulq_lane_f32(v1241, *(float32x2_t *)v1004.f32, 1);
          float32x4_t v1121 = vmulq_laneq_f32(v1121, v1004, 2);
          float32x4_t v1122 = vmulq_laneq_f32(v1122, v1004, 3);
        }
      }
      else
      {
        float32x4_t v1240 = vaddq_f32(v1490, v1261);
        float32x4_t v1241 = vaddq_f32(v1460, v1262);
        float32x4_t v1121 = vaddq_f32(v1452, v1263);
        float32x4_t v1122 = vaddq_f32(v1444, v1264);
        int v14 = v1254;
        uint64_t v16 = v1257;
        if (v1493) {
          goto LABEL_630;
        }
      }
    }
    else
    {
      float32x4_t v1240 = v1490;
      float32x4_t v1241 = v1460;
      if (v1493) {
        goto LABEL_630;
      }
    }
    float32x4_t v23 = vaddq_f32(v23, v1240);
    float32x4_t v24 = vaddq_f32(v24, v1241);
    float32x4_t v25 = vaddq_f32(v25, v1121);
    float32x4_t v26 = vaddq_f32(v26, v1122);
    if ((v7 & 0x80) == 0) {
      goto LABEL_665;
    }
LABEL_541:
    float32x4_t v1055 = v4[7];
    float32x4_t v1056 = v10[7];
    float32x4_t v1057 = v11[7];
    float32x4_t v1058 = v12[7];
    if ((v6 & 2) != 0)
    {
      float32x4_t v1055 = vnegq_f32(v1055);
      float32x4_t v1056 = vnegq_f32(v1056);
      float32x4_t v1057 = vnegq_f32(v1057);
      float32x4_t v1058 = vnegq_f32(v1058);
    }
    float32x4_t v1059 = *(float32x4_t *)(v5 + 13760);
    float32x4_t v1060 = 0uLL;
    if (((unsigned __int16)v6 & 0x8000) != 0)
    {
      float32x4_t v1064 = vsubq_f32(v1059, v1584);
      float32x4_t v1065 = vsubq_f32(v1059, v1580);
      float32x4_t v1066 = vsubq_f32(v1059, v1582);
      float32x4_t v1067 = vsubq_f32(v1059, v22);
      float32x4_t v1068 = vmulq_f32(v1064, v1064);
      int32x4_t v1069 = (int32x4_t)vmulq_f32(v1065, v1065);
      float32x4_t v1070 = vmulq_f32(v1066, v1066);
      v1071.i64[0] = vzip1q_s32((int32x4_t)v1068, v1069).u64[0];
      v1071.i32[2] = v1070.i32[0];
      float32x4_t v1072 = vmulq_f32(v1067, v1067);
      v1071.i32[3] = v1072.i32[0];
      v1073.i64[0] = vtrn2q_s32((int32x4_t)v1068, v1069).u64[0];
      v1073.i64[1] = __PAIR64__(v1072.u32[1], v1070.u32[1]);
      v1068.i64[0] = vzip2q_s32((int32x4_t)v1068, v1069).u64[0];
      v1068.i64[1] = __PAIR64__(v1072.u32[2], v1070.u32[2]);
      float32x4_t v1074 = vsqrtq_f32(vaddq_f32(v1068, vaddq_f32(v1071, v1073)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v1076 = vdivq_f32(_Q0, v1074);
      float32x4_t v1059 = vmulq_n_f32(v1064, v1076.f32[0]);
      float32x4_t v1061 = vmulq_lane_f32(v1065, *(float32x2_t *)v1076.f32, 1);
      float32x4_t v1062 = vmulq_laneq_f32(v1066, v1076, 2);
      float32x4_t v1063 = vmulq_laneq_f32(v1067, v1076, 3);
      if ((v7 & 0x80000000) != 0)
      {
        float32x4_t v1081 = vdivq_f32(_Q0, v1076);
        v1082 = v1330;
        float32x4_t v1083 = vld1q_dup_f32(v1082);
        v1084 = v1329;
        float32x4_t v1085 = vld1q_dup_f32(v1084);
        float32x4_t v1060 = vdivq_f32(_Q0, vmlaq_f32(v1083, vmlaq_n_f32(v1085, v1081, *(float *)(v5 + 13752)), v1081));
        if ((v7 & 0x800000) == 0)
        {
LABEL_548:
          if (!v1492) {
            goto LABEL_561;
          }
          goto LABEL_557;
        }
      }
      else if ((v7 & 0x800000) == 0)
      {
        goto LABEL_548;
      }
    }
    else
    {
      float32x4_t v1061 = *(float32x4_t *)(v5 + 13760);
      float32x4_t v1062 = v1061;
      float32x4_t v1063 = v1061;
      if ((v7 & 0x800000) == 0) {
        goto LABEL_548;
      }
    }
    float32x4_t v1086 = vnegq_f32(*(float32x4_t *)(v5 + 13776));
    float32x4_t v1087 = vmulq_f32(v1059, v1086);
    int32x4_t v1088 = (int32x4_t)vmulq_f32(v1061, v1086);
    float32x4_t v1089 = vmulq_f32(v1062, v1086);
    float32x4_t v1090 = vmulq_f32(v1063, v1086);
    v1091.i64[0] = vzip1q_s32((int32x4_t)v1087, v1088).u64[0];
    v1091.i64[1] = __PAIR64__(v1090.u32[0], v1089.u32[0]);
    v1092.i64[0] = vtrn2q_s32((int32x4_t)v1087, v1088).u64[0];
    v1092.i64[1] = __PAIR64__(v1090.u32[1], v1089.u32[1]);
    v1087.i64[0] = vzip2q_s32((int32x4_t)v1087, v1088).u64[0];
    v1087.i64[1] = __PAIR64__(v1090.u32[2], v1089.u32[2]);
    float32x4_t v1093 = vaddq_f32(v1087, vaddq_f32(v1091, v1092));
    v1094 = v1353;
    float32x4_t v1095 = vld1q_dup_f32(v1094);
    int8x16_t v1096 = (int8x16_t)vcgeq_f32(v1093, v1095);
    int32x4_t v1097 = (int32x4_t)vmvnq_s8(v1096);
    *(int16x4_t *)v1097.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v1097), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v1097.i8))
    {
      float32x4_t v1060 = 0uLL;
      if (!v1492) {
        goto LABEL_561;
      }
    }
    else
    {
      v1097.i32[0] = 0;
      int8x16_t v1389 = v1096;
      float32x4_t v1397 = v1061;
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1381 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v1097, v1345), 0), (int8x16_t)v1060, _Q1);
      float v1099 = *(float *)(v5 + 13756);
      float32x4_t v1561 = v24;
      float32x4_t v1577 = v23;
      float32x4_t v1545 = v25;
      float32x4_t v1529 = v26;
      float32x4_t v1489 = v1093;
      float32x4_t v1435 = v1059;
      float32x4_t v1410 = v1062;
      float32x4_t v1424 = v1063;
      unsigned int v1374 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t, float32_t, float))(v5 + 560))(a1, v1093.f32[0], v1099));
      unsigned int v1367 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1489.f32[1], v1099));
      unsigned int v1360 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1489.f32[2], v1099));
      *(float *)&unsigned int v1100 = (*(float (**)(float, float))(v5 + 560))(v1489.f32[3], v1099);
      float32x4_t v1061 = v1397;
      float32x4_t v1062 = v1410;
      float32x4_t v1063 = v1424;
      float32x4_t v1059 = v1435;
      float32x4_t v22 = v1512;
      float32x4_t v26 = v1529;
      float32x4_t v25 = v1545;
      float32x4_t v24 = v1561;
      float32x4_t v23 = v1577;
      unsigned int v17 = v1514;
      v1101.i64[0] = __PAIR64__(v1367, v1374);
      v1101.i64[1] = __PAIR64__(v1100, v1360);
      float32x4_t v1060 = vmulq_f32(v1381, (float32x4_t)vandq_s8(v1101, v1389));
      if (!v1492) {
        goto LABEL_561;
      }
    }
LABEL_557:
    if (v1060.f32[0] <= 0.0 && v1060.f32[1] <= 0.0 && v1060.f32[2] <= 0.0 && v1060.f32[3] <= 0.0) {
      goto LABEL_665;
    }
LABEL_561:
    if (v1586)
    {
      if ((v7 & 0x200) != 0)
      {
        float32x4_t v1106 = *(float32x4_t *)(v5 + 13664);
        float32x4_t v1102 = vmulq_f32(v1106, v4[13]);
        float32x4_t v1103 = vmulq_f32(v1106, v10[13]);
        float32x4_t v1104 = vmulq_f32(v1106, v11[13]);
        float32x4_t v1105 = vmulq_f32(v1106, v12[13]);
      }
      else
      {
        float32x4_t v1102 = v14[26];
        float32x4_t v1103 = v15[26];
        float32x4_t v1104 = v16[26];
        float32x4_t v1105 = v17[26];
      }
    }
    else
    {
      float32x4_t v1105 = 0uLL;
      float32x4_t v1104 = 0uLL;
      float32x4_t v1103 = 0uLL;
      float32x4_t v1102 = 0uLL;
    }
    float32x4_t v1107 = vmulq_f32(v1055, v1059);
    int32x4_t v1108 = (int32x4_t)vmulq_f32(v1056, v1061);
    float32x4_t v1109 = vmulq_f32(v1057, v1062);
    float32x4_t v1110 = vmulq_f32(v1058, v1063);
    v1111.i64[0] = vzip1q_s32((int32x4_t)v1107, v1108).u64[0];
    v1111.i64[1] = __PAIR64__(v1110.u32[0], v1109.u32[0]);
    v1112.i64[0] = vtrn2q_s32((int32x4_t)v1107, v1108).u64[0];
    v1112.i64[1] = __PAIR64__(v1110.u32[1], v1109.u32[1]);
    v1107.i64[0] = vzip2q_s32((int32x4_t)v1107, v1108).u64[0];
    v1107.i64[1] = __PAIR64__(v1110.u32[2], v1109.u32[2]);
    float32x4_t v1113 = vaddq_f32(v1107, vaddq_f32(v1111, v1112));
    if (v1113.f32[0] > 0.0 || v1113.f32[1] > 0.0 || v1113.f32[2] > 0.0 || v1113.f32[3] > 0.0)
    {
      if ((v7 & 0x400) != 0)
      {
        float32x4_t v1127 = *(float32x4_t *)(v5 + 13680);
        float32x4_t v1114 = vmulq_f32(v1127, v4[13]);
        float32x4_t v1115 = vmulq_f32(v1127, v10[13]);
        float32x4_t v1116 = vmulq_f32(v1127, v11[13]);
        float32x4_t v1117 = vmulq_f32(v1127, v12[13]);
      }
      else
      {
        float32x4_t v1114 = v14[27];
        float32x4_t v1115 = v15[27];
        float32x4_t v1116 = v16[27];
        float32x4_t v1117 = v17[27];
      }
      float32x4_t v1128 = vmulq_n_f32(v1114, fmaxf(v1113.f32[0], 0.0));
      float32x4_t v1129 = vmulq_n_f32(v1115, fmaxf(v1113.f32[1], 0.0));
      float32x4_t v1130 = vmulq_n_f32(v1116, fmaxf(v1113.f32[2], 0.0));
      float32x4_t v1131 = vmulq_n_f32(v1117, fmaxf(v1113.f32[3], 0.0));
      if (v1586)
      {
        float32x4_t v1128 = vaddq_f32(v1102, v1128);
        float32x4_t v1129 = vaddq_f32(v1103, v1129);
        float32x4_t v1130 = vaddq_f32(v1104, v1130);
        float32x4_t v1131 = vaddq_f32(v1105, v1131);
      }
      float32x4_t v1515 = v1128;
      float32x4_t v1475 = v1130;
      float32x4_t v1491 = v1129;
      float32x4_t v1461 = v1131;
      if ((v6 & 0x20) != 0)
      {
        float32x4_t v1157 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1055, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1055, 0xCuLL)));
        int32x4_t v1158 = (int32x4_t)vmlsq_f32(vmulq_f32(v1157, v1059), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1059, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1059, 0xCuLL))), v1055);
        int32x4_t v1159 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1158, 0xCuLL);
        float32x4_t v1160 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1056, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1056, 0xCuLL)));
        float32x4_t v1161 = vmlsq_f32(vmulq_f32(v1160, v1061), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1061, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1061, 0xCuLL))), v1056);
        int32x4_t v1162 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1161, 0xCuLL);
        float32x4_t v1163 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1057, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1057, 0xCuLL)));
        int32x4_t v1164 = (int32x4_t)vmlsq_f32(vmulq_f32(v1163, v1062), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1062, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1062, 0xCuLL))), v1057);
        int32x4_t v1165 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1164, 0xCuLL);
        float32x4_t v1166 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1058, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1058, 0xCuLL)));
        int32x4_t v1167 = (int32x4_t)vmlsq_f32(vmulq_f32(v1166, v1063), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1063, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1063, 0xCuLL))), v1058);
        int32x4_t v1168 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1167, 0xCuLL);
        int32x4_t v1169 = (int32x4_t)vmlsq_f32(vmulq_f32(v1157, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1158, v1159))), (float32x4_t)vextq_s8((int8x16_t)v1159, (int8x16_t)vrev64q_s32(v1159), 8uLL), v1055);
        int32x4_t v1170 = (int32x4_t)vmlsq_f32(vmulq_f32(v1160, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1161, v1162))), (float32x4_t)vextq_s8((int8x16_t)v1162, (int8x16_t)vrev64q_s32(v1162), 8uLL), v1056);
        int32x4_t v1171 = (int32x4_t)vmlsq_f32(vmulq_f32(v1163, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1164, v1165))), (float32x4_t)vextq_s8((int8x16_t)v1165, (int8x16_t)vrev64q_s32(v1165), 8uLL), v1057);
        int32x4_t v1172 = (int32x4_t)vmlsq_f32(vmulq_f32(v1166, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1167, v1168))), (float32x4_t)vextq_s8((int8x16_t)v1168, (int8x16_t)vrev64q_s32(v1168), 8uLL), v1058);
        v1161.i64[0] = 0x4000000040000000;
        v1161.i64[1] = 0x4000000040000000;
        float32x4_t v1173 = vmlaq_f32(v1059, v1161, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1169, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1169, 0xCuLL))));
        float32x4_t v1174 = vmlaq_f32(v1061, v1161, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1170, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1170, 0xCuLL))));
        float32x4_t v1175 = vmlaq_f32(v1062, v1161, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1171, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1171, 0xCuLL))));
        float32x4_t v1176 = vmlaq_f32(v1063, v1161, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1172, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1172, 0xCuLL))));
        if ((v6 & 8) != 0)
        {
          float32x4_t v1190 = vmulq_f32(v1584, v1584);
          int32x4_t v1191 = (int32x4_t)vmulq_f32(v1580, v1580);
          float32x4_t v1192 = vmulq_f32(v1582, v1582);
          float32x4_t v1193 = vmulq_f32(v22, v22);
          v1194.i64[0] = vzip1q_s32((int32x4_t)v1190, v1191).u64[0];
          v1194.i64[1] = __PAIR64__(v1193.u32[0], v1192.u32[0]);
          v1195.i64[0] = vtrn2q_s32((int32x4_t)v1190, v1191).u64[0];
          v1195.i64[1] = __PAIR64__(v1193.u32[1], v1192.u32[1]);
          v1190.i64[0] = vzip2q_s32((int32x4_t)v1190, v1191).u64[0];
          v1190.i64[1] = __PAIR64__(v1193.u32[2], v1192.u32[2]);
          __asm { FMOV            V7.4S, #1.0 }
          float32x4_t v1197 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v1190, vaddq_f32(v1194, v1195))));
          float32x4_t v1198 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1584), v1197.f32[0]), v1173);
          int32x4_t v1199 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v1197.f32, 1), v1174);
          float32x4_t v1200 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1582), v1197, 2), v1175);
          float32x4_t v1201 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v22), v1197, 3), v1176);
          v1192.i64[0] = vzip1q_s32((int32x4_t)v1198, v1199).u64[0];
          v1192.i64[1] = __PAIR64__(v1201.u32[0], v1200.u32[0]);
          v1193.i64[0] = vtrn2q_s32((int32x4_t)v1198, v1199).u64[0];
          v1193.i64[1] = __PAIR64__(v1201.u32[1], v1200.u32[1]);
          v1198.i64[0] = vzip2q_s32((int32x4_t)v1198, v1199).u64[0];
          v1198.i64[1] = __PAIR64__(v1201.u32[2], v1200.u32[2]);
          float32x4_t v1177 = vaddq_f32(v1198, vaddq_f32(v1192, v1193));
        }
        else
        {
          v1177.i64[0] = vzip2q_s32((int32x4_t)v1173, (int32x4_t)v1174).u64[0];
          v1177.i64[1] = __PAIR64__(v1176.u32[2], v1175.u32[2]);
        }
        float32x4_t v1130 = v1475;
        float v9 = 1.0;
        float32x4_t v1131 = v1461;
      }
      else
      {
        if (v1321)
        {
          if ((v6 & 8) != 0)
          {
            float32x4_t v1265 = vmulq_f32(v1584, v1584);
            int32x4_t v1266 = (int32x4_t)vmulq_f32(v1580, v1580);
            float32x4_t v1267 = vmulq_f32(v1582, v1582);
            v1268.i64[0] = vzip1q_s32((int32x4_t)v1265, v1266).u64[0];
            v1268.i32[2] = v1267.i32[0];
            float32x4_t v1269 = vmulq_f32(v22, v22);
            v1268.i32[3] = v1269.i32[0];
            v1270.i64[0] = vtrn2q_s32((int32x4_t)v1265, v1266).u64[0];
            v1270.i64[1] = __PAIR64__(v1269.u32[1], v1267.u32[1]);
            v1265.i64[0] = vzip2q_s32((int32x4_t)v1265, v1266).u64[0];
            v1265.i64[1] = __PAIR64__(v1269.u32[2], v1267.u32[2]);
            __asm { FMOV            V16.4S, #1.0 }
            float32x4_t v1272 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v1265, vaddq_f32(v1268, v1270))));
            float32x4_t v1132 = vmulq_n_f32(vnegq_f32(v1584), v1272.f32[0]);
            float32x4_t v1133 = vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v1272.f32, 1);
            float32x4_t v1134 = vmulq_laneq_f32(vnegq_f32(v1582), v1272, 2);
            float32x4_t v1135 = vmulq_laneq_f32(vnegq_f32(v22), v1272, 3);
          }
          else
          {
            float32x4_t v1132 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v1133 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v1134 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v1135 = (float32x4_t)xmmword_227DC2100;
          }
          float32x4_t v1273 = vaddq_f32(v1059, v1132);
          float32x4_t v1274 = vaddq_f32(v1061, v1133);
          float32x4_t v1275 = vaddq_f32(v1062, v1134);
          float32x4_t v1276 = vaddq_f32(v1063, v1135);
          float32x4_t v1277 = vmulq_f32(v1273, v1273);
          int32x4_t v1278 = (int32x4_t)vmulq_f32(v1274, v1274);
          float32x4_t v1279 = vmulq_f32(v1275, v1275);
          v1280.i64[0] = vzip1q_s32((int32x4_t)v1277, v1278).u64[0];
          v1280.i32[2] = v1279.i32[0];
          float32x4_t v1281 = vmulq_f32(v1276, v1276);
          v1280.i32[3] = v1281.i32[0];
          v1282.i64[0] = vtrn2q_s32((int32x4_t)v1277, v1278).u64[0];
          v1282.i64[1] = __PAIR64__(v1281.u32[1], v1279.u32[1]);
          v1277.i64[0] = vzip2q_s32((int32x4_t)v1277, v1278).u64[0];
          v1277.i64[1] = __PAIR64__(v1281.u32[2], v1279.u32[2]);
          __asm { FMOV            V17.4S, #1.0 }
          float32x4_t v1284 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v1277, vaddq_f32(v1280, v1282))));
          float32x4_t v1206 = vmulq_n_f32(v1273, v1284.f32[0]);
          float32x4_t v1207 = vmulq_lane_f32(v1274, *(float32x2_t *)v1284.f32, 1);
          float32x4_t v1208 = vmulq_laneq_f32(v1275, v1284, 2);
          float32x4_t v1209 = vmulq_laneq_f32(v1276, v1284, 3);
        }
        else
        {
          float32x4_t v1206 = *(float32x4_t *)(v5 + 13792);
          float32x4_t v1207 = v1206;
          float32x4_t v1208 = v1206;
          float32x4_t v1209 = v1206;
        }
        float32x4_t v1285 = vmulq_f32(v1055, v1206);
        int32x4_t v1286 = (int32x4_t)vmulq_f32(v1056, v1207);
        float32x4_t v1287 = vmulq_f32(v1057, v1208);
        float32x4_t v1288 = vmulq_f32(v1058, v1209);
        v1289.i64[0] = vzip1q_s32((int32x4_t)v1285, v1286).u64[0];
        v1289.i64[1] = __PAIR64__(v1288.u32[0], v1287.u32[0]);
        v1290.i64[0] = vtrn2q_s32((int32x4_t)v1285, v1286).u64[0];
        v1290.i64[1] = __PAIR64__(v1288.u32[1], v1287.u32[1]);
        v1285.i64[0] = vzip2q_s32((int32x4_t)v1285, v1286).u64[0];
        v1285.i64[1] = __PAIR64__(v1288.u32[2], v1287.u32[2]);
        float32x4_t v1177 = vaddq_f32(v1285, vaddq_f32(v1289, v1290));
      }
      if (v1113.f32[0] <= 0.0) {
        float v1291 = 0.0;
      }
      else {
        float v1291 = v1177.f32[0];
      }
      if (v1113.f32[1] <= 0.0) {
        float v1292 = 0.0;
      }
      else {
        float v1292 = v1177.f32[1];
      }
      if (v1113.f32[2] <= 0.0) {
        float v1293 = 0.0;
      }
      else {
        float v1293 = v1177.f32[2];
      }
      if (v1113.f32[3] <= 0.0) {
        float v1294 = 0.0;
      }
      else {
        float v1294 = v1177.f32[3];
      }
      if (v1291 > 0.0 || v1292 > 0.0 || v1293 > 0.0 || v1294 > 0.0)
      {
        float32x4_t v1585 = v1060;
        float32x4_t v1531 = v26;
        float32x4_t v1547 = v25;
        float32x4_t v1563 = v24;
        float32x4_t v1579 = v23;
        float v1297 = fmaxf(v1292, 0.0);
        float v1298 = fmaxf(v1293, 0.0);
        float v1299 = v14[4].f32[0];
        float v1300 = v15[4].f32[0];
        float v1301 = fmaxf(v1294, 0.0);
        float v1302 = v16[4].f32[0];
        float v1303 = v17[4].f32[0];
        v1304 = v16;
        v1305 = v15;
        v1306 = v14;
        v1307 = v17;
        LODWORD(v1583) = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t, float, float))(v5 + 560))(a1, fmaxf(v1291, 0.0), v1299));
        LODWORD(v1581) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1297, v1300));
        LODWORD(v1513) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1298, v1302));
        a1 = (*(uint64_t (**)(float, float))(v5 + 560))(v1301, v1303);
        if ((v7 & 0x800) != 0)
        {
          v1312 = v1304;
          v1309 = v1306;
          float32x4_t v1315 = *(float32x4_t *)(v5 + 13696);
          float32x4_t v1310 = vmulq_f32(v1315, v4[13]);
          float32x4_t v1311 = vmulq_f32(v1315, v10[13]);
          float32x4_t v1313 = vmulq_f32(v1315, v11[13]);
          float32x4_t v1314 = vmulq_f32(v1315, v12[13]);
        }
        else
        {
          v1309 = v1306;
          float32x4_t v1310 = v1306[28];
          float32x4_t v1311 = v1305[28];
          v1312 = v1304;
          float32x4_t v1313 = v1304[28];
          float32x4_t v1314 = v1307[28];
        }
        unsigned int v17 = v1307;
        uint64_t v15 = v1305;
        float32x4_t v1060 = v1585;
        float32x4_t v1130 = v1475;
        float32x4_t v1296 = v1491;
        float32x4_t v1131 = v1461;
        float32x4_t v1316 = vmulq_n_f32(v1310, v1583);
        float32x4_t v23 = v1579;
        float32x4_t v1317 = vmulq_n_f32(v1311, v1581);
        float32x4_t v1295 = v1515;
        float32x4_t v1318 = vmulq_n_f32(v1313, v1513);
        float32x4_t v1319 = vmulq_n_f32(v1314, v1308);
        LOWORD(v6) = v1462;
        float32x4_t v25 = v1547;
        float32x4_t v24 = v1563;
        float32x4_t v26 = v1531;
        if ((v1462 & 0x10) != 0)
        {
          int v14 = v1309;
          uint64_t v16 = v1312;
          if (v1492)
          {
            float32x4_t v1316 = vmulq_n_f32(v1316, v1585.f32[0]);
            float32x4_t v1317 = vmulq_lane_f32(v1317, *(float32x2_t *)v1585.f32, 1);
            float32x4_t v1318 = vmulq_laneq_f32(v1318, v1585, 2);
            float32x4_t v1319 = vmulq_laneq_f32(v1319, v1585, 3);
          }
          float32x4_t v1507 = vaddq_f32(v1507, v1317);
          float32x4_t v1510 = vaddq_f32(v1510, v1316);
          float32x4_t v1502 = vaddq_f32(v1502, v1319);
          float32x4_t v1504 = vaddq_f32(v1504, v1318);
          if (!v1492) {
            goto LABEL_664;
          }
        }
        else
        {
          float32x4_t v1295 = vaddq_f32(v1515, v1316);
          float32x4_t v1296 = vaddq_f32(v1491, v1317);
          float32x4_t v1130 = vaddq_f32(v1475, v1318);
          float32x4_t v1131 = vaddq_f32(v1461, v1319);
          int v14 = v1309;
          uint64_t v16 = v1312;
          if (!v1492) {
            goto LABEL_664;
          }
        }
      }
      else
      {
        float32x4_t v1295 = v1515;
        float32x4_t v1296 = v1491;
        if (!v1492) {
          goto LABEL_664;
        }
      }
      float32x4_t v1295 = vmulq_n_f32(v1295, v1060.f32[0]);
      float32x4_t v1296 = vmulq_lane_f32(v1296, *(float32x2_t *)v1060.f32, 1);
      float32x4_t v1130 = vmulq_laneq_f32(v1130, v1060, 2);
      float32x4_t v1131 = vmulq_laneq_f32(v1131, v1060, 3);
LABEL_664:
      float32x4_t v23 = vaddq_f32(v23, v1295);
      float32x4_t v24 = vaddq_f32(v24, v1296);
      float32x4_t v25 = vaddq_f32(v25, v1130);
      float32x4_t v26 = vaddq_f32(v26, v1131);
      goto LABEL_665;
    }
    if (v1586)
    {
      if (v1492)
      {
        float32x4_t v1102 = vmulq_n_f32(v1102, v1060.f32[0]);
        float32x4_t v1103 = vmulq_lane_f32(v1103, *(float32x2_t *)v1060.f32, 1);
        float32x4_t v1104 = vmulq_laneq_f32(v1104, v1060, 2);
        float32x4_t v1105 = vmulq_laneq_f32(v1105, v1060, 3);
      }
      float32x4_t v23 = vaddq_f32(v23, v1102);
      float32x4_t v24 = vaddq_f32(v24, v1103);
      float32x4_t v25 = vaddq_f32(v25, v1104);
      float32x4_t v26 = vaddq_f32(v26, v1105);
    }
LABEL_665:
    v4[8] = v23;
    v10[8] = v24;
    v11[8] = v25;
    v12[8] = v26;
    if ((v7 & 0x400) != 0)
    {
      v4[8].i32[3] = v4[13].i32[3];
      v10[8].i32[3] = v10[13].i32[3];
      v11[8].i32[3] = v11[13].i32[3];
      v1320 = &v12[13].i32[3];
    }
    else
    {
      if ((v7 & 0x3FF) == 0) {
        goto LABEL_670;
      }
      v4[8].i32[3] = v14[29].i32[3];
      v10[8].i32[3] = v15[29].i32[3];
      v11[8].i32[3] = v16[29].i32[3];
      v1320 = &v17[29].i32[3];
    }
    v12[8].i32[3] = *v1320;
LABEL_670:
    if ((v6 & 0x10) != 0)
    {
      v4[9] = v1510;
      v10[9] = v1507;
      v11[9] = v1504;
      v12[9] = v1502;
    }
    int v4 = v12 + 40;
    unint64_t v8 = v1501;
  }
  while ((unint64_t)&v12[40] < v1501);
}

void gleLLVMVecLightBackTransform(uint64_t a1, float32x4_t *a2, int a3, int32x4_t a4)
{
  int v4 = a2;
  uint64_t v5 = a1;
  LODWORD(v6) = *(_DWORD *)(a1 + 20428);
  unsigned __int32 v7 = *(_DWORD *)(a1 + 20432);
  unint64_t v8 = (unint64_t)&a2[40 * a3];
  int v1500 = (unsigned __int16)v6 & 0xFF08;
  unsigned int v1586 = v7 & 0xFFFF0300;
  int v1499 = v7 & 0x1010000;
  int v1328 = (unsigned __int16)v6 & 0x108;
  int v1498 = v7 & 0x2020000;
  int v1327 = (unsigned __int16)v6 & 0x208;
  int v1497 = v7 & 0x4040000;
  int v1326 = (unsigned __int16)v6 & 0x408;
  int v1496 = v7 & 0x8080000;
  int v1325 = (unsigned __int16)v6 & 0x808;
  int v1495 = v7 & 0x10100000;
  int v1324 = (unsigned __int16)v6 & 0x1008;
  int v1494 = v7 & 0x20200000;
  int v1323 = (unsigned __int16)v6 & 0x2008;
  int v1493 = v7 & 0x40400000;
  int v1322 = (unsigned __int16)v6 & 0x4008;
  unsigned int v1492 = v7 & 0x80800000;
  int v1321 = (unsigned __int16)v6 & 0x8008;
  v1353 = (const float *)(a1 + 13740);
  a4.i32[0] = v7;
  int32x4_t v1345 = a4;
  v1330 = (const float *)(a1 + 13744);
  v1329 = (const float *)(a1 + 13748);
  v1352 = (const float *)(a1 + 13580);
  v1344 = (const float *)(a1 + 13584);
  v1343 = (const float *)(a1 + 13588);
  v1351 = (const float *)(a1 + 13420);
  v1342 = (const float *)(a1 + 13424);
  v1341 = (const float *)(a1 + 13428);
  v1350 = (const float *)(a1 + 13260);
  v1340 = (const float *)(a1 + 13264);
  v1339 = (const float *)(a1 + 13268);
  v1349 = (const float *)(a1 + 13100);
  v1338 = (const float *)(a1 + 13104);
  v1337 = (const float *)(a1 + 13108);
  v1348 = (const float *)(a1 + 12940);
  v1336 = (const float *)(a1 + 12944);
  v1335 = (const float *)(a1 + 12948);
  v1347 = (const float *)(a1 + 12780);
  v1334 = (const float *)(a1 + 12784);
  v1333 = (const float *)(a1 + 12788);
  v1346 = (const float *)(a1 + 12620);
  v1332 = (const float *)(a1 + 12624);
  v1331 = (const float *)(a1 + 12628);
  float v9 = 1.0;
  unint64_t v1501 = v8;
  __int16 v1462 = (__int16)v6;
  do
  {
    char v10 = v4 + 40;
    uint64_t v11 = v4 + 80;
    int v12 = v4 + 120;
    if ((unint64_t)&v4[120] >= v8)
    {
      if ((unint64_t)v10 >= v8) {
        BOOL v13 = v4;
      }
      else {
        BOOL v13 = v4 + 40;
      }
      if ((unint64_t)v11 >= v8)
      {
        char v10 = v13;
        uint64_t v11 = v13;
      }
      int v12 = v11;
    }
    v4->i8[2] &= ~4u;
    v10->i8[2] &= ~4u;
    v11->i8[2] &= ~4u;
    v12->i8[2] &= ~4u;
    int v14 = (float32x4_t *)v4[2].i64[1];
    if (v14[31].i8[0]) {
      a1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 1504))(v5, v4[2].i64[1], 1);
    }
    uint64_t v15 = (float32x4_t *)v10[2].i64[1];
    if (v15 != v14 && v15[31].i8[0]) {
      a1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 1504))(v5, v10[2].i64[1], 1);
    }
    uint64_t v16 = (float32x4_t *)v11[2].i64[1];
    if (v16 != v15 && v16[31].i8[0]) {
      a1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 1504))(v5, v11[2].i64[1], 1);
    }
    unsigned int v17 = (float32x4_t *)v12[2].i64[1];
    v1514 = v17;
    if (v17 != v16 && v17[31].i8[0])
    {
      a1 = (*(uint64_t (**)(uint64_t, float32x4_t *, uint64_t))(v5 + 1504))(v5, v17, 1);
      unsigned int v17 = v1514;
    }
    if (v1500)
    {
      float v18 = v4[6].f32[3];
      float32x4_t v1584 = v4[6];
      if (v18 != v9) {
        float32x4_t v1584 = vmulq_n_f32(v1584, v9 / v18);
      }
      float v19 = v10[6].f32[3];
      float32x4_t v1580 = v10[6];
      if (v19 != v9) {
        float32x4_t v1580 = vmulq_n_f32(v1580, v9 / v19);
      }
      float v20 = v11[6].f32[3];
      float32x4_t v1582 = v11[6];
      if (v20 != v9) {
        float32x4_t v1582 = vmulq_n_f32(v1582, v9 / v20);
      }
      float v21 = v12[6].f32[3];
      float32x4_t v22 = v12[6];
      if (v21 != v9) {
        float32x4_t v22 = vmulq_n_f32(v22, v9 / v21);
      }
      if ((v7 & 0x100) != 0)
      {
LABEL_35:
        float32x4_t v27 = *(float32x4_t *)(v5 + 12528);
        float32x4_t v23 = vmlaq_f32(v4[13], v27, *v14);
        float32x4_t v24 = vmlaq_f32(v10[13], v27, *v15);
        float32x4_t v25 = vmlaq_f32(v11[13], v27, *v16);
        float32x4_t v26 = vmlaq_f32(v12[13], v27, *v17);
        goto LABEL_38;
      }
    }
    else
    {
      float32x4_t v22 = 0uLL;
      float32x4_t v1580 = 0u;
      float32x4_t v1582 = 0u;
      float32x4_t v1584 = 0u;
      if ((v7 & 0x100) != 0) {
        goto LABEL_35;
      }
    }
    if ((v7 & 0x200) != 0)
    {
      float32x4_t v28 = *(float32x4_t *)(v5 + 12528);
      float32x4_t v23 = vmlaq_f32(v14[3], v4[13], v28);
      float32x4_t v24 = vmlaq_f32(v15[3], v10[13], v28);
      float32x4_t v25 = vmlaq_f32(v16[3], v11[13], v28);
      float32x4_t v26 = vmlaq_f32(v17[3], v12[13], v28);
    }
    else if (v1586)
    {
      float32x4_t v23 = v14[29];
      float32x4_t v24 = v15[29];
      float32x4_t v25 = v16[29];
      float32x4_t v26 = v17[29];
    }
    else
    {
      float32x4_t v23 = v14[30];
      float32x4_t v24 = v15[30];
      float32x4_t v25 = v16[30];
      float32x4_t v26 = v17[30];
    }
LABEL_38:
    float32x4_t v29 = 0uLL;
    float32x4_t v1510 = 0u;
    float32x4_t v1512 = v22;
    if ((v7 & 1) == 0) {
      goto LABEL_71;
    }
    float32x4_t v30 = v4[7];
    float32x4_t v31 = v10[7];
    float32x4_t v32 = v11[7];
    float32x4_t v33 = v12[7];
    if ((v6 & 2) != 0)
    {
      float32x4_t v30 = vnegq_f32(v30);
      float32x4_t v31 = vnegq_f32(v31);
      float32x4_t v32 = vnegq_f32(v32);
      float32x4_t v33 = vnegq_f32(v33);
    }
    float32x4_t v34 = *(float32x4_t *)(v5 + 12640);
    float32x4_t v35 = 0uLL;
    if (((unsigned __int16)v6 & 0x100) != 0)
    {
      float32x4_t v39 = vsubq_f32(v34, v1584);
      float32x4_t v40 = vsubq_f32(v34, v1580);
      float32x4_t v41 = vsubq_f32(v34, v1582);
      float32x4_t v42 = vsubq_f32(v34, v22);
      float32x4_t v43 = vmulq_f32(v39, v39);
      int32x4_t v44 = (int32x4_t)vmulq_f32(v40, v40);
      float32x4_t v45 = vmulq_f32(v41, v41);
      v46.i64[0] = vzip1q_s32((int32x4_t)v43, v44).u64[0];
      v46.i32[2] = v45.i32[0];
      float32x4_t v47 = vmulq_f32(v42, v42);
      v46.i32[3] = v47.i32[0];
      v48.i64[0] = vtrn2q_s32((int32x4_t)v43, v44).u64[0];
      v48.i64[1] = __PAIR64__(v47.u32[1], v45.u32[1]);
      v43.i64[0] = vzip2q_s32((int32x4_t)v43, v44).u64[0];
      v43.i64[1] = __PAIR64__(v47.u32[2], v45.u32[2]);
      float32x4_t v49 = vsqrtq_f32(vaddq_f32(v43, vaddq_f32(v46, v48)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v55 = vdivq_f32(_Q0, v49);
      float32x4_t v34 = vmulq_n_f32(v39, v55.f32[0]);
      float32x4_t v36 = vmulq_lane_f32(v40, *(float32x2_t *)v55.f32, 1);
      float32x4_t v37 = vmulq_laneq_f32(v41, v55, 2);
      float32x4_t v38 = vmulq_laneq_f32(v42, v55, 3);
      if ((v7 & 0x1000000) != 0)
      {
        float32x4_t v56 = vdivq_f32(_Q0, v55);
        char v57 = v1332;
        float32x4_t v58 = vld1q_dup_f32(v57);
        uint64_t v59 = v1331;
        float32x4_t v60 = vld1q_dup_f32(v59);
        float32x4_t v35 = vdivq_f32(_Q0, vmlaq_f32(v58, vmlaq_n_f32(v60, v56, *(float *)(v5 + 12632)), v56));
        if ((v7 & 0x10000) == 0)
        {
LABEL_46:
          if (!v1499) {
            goto LABEL_58;
          }
          goto LABEL_53;
        }
      }
      else if ((v7 & 0x10000) == 0)
      {
        goto LABEL_46;
      }
    }
    else
    {
      float32x4_t v36 = *(float32x4_t *)(v5 + 12640);
      float32x4_t v37 = v36;
      float32x4_t v38 = v36;
      if ((v7 & 0x10000) == 0) {
        goto LABEL_46;
      }
    }
    float32x4_t v61 = vnegq_f32(*(float32x4_t *)(v5 + 12656));
    float32x4_t v62 = vmulq_f32(v34, v61);
    int32x4_t v63 = (int32x4_t)vmulq_f32(v36, v61);
    float32x4_t v64 = vmulq_f32(v37, v61);
    float32x4_t v65 = vmulq_f32(v38, v61);
    v66.i64[0] = vzip1q_s32((int32x4_t)v62, v63).u64[0];
    v66.i64[1] = __PAIR64__(v65.u32[0], v64.u32[0]);
    v67.i64[0] = vtrn2q_s32((int32x4_t)v62, v63).u64[0];
    v67.i64[1] = __PAIR64__(v65.u32[1], v64.u32[1]);
    v62.i64[0] = vzip2q_s32((int32x4_t)v62, v63).u64[0];
    v62.i64[1] = __PAIR64__(v65.u32[2], v64.u32[2]);
    float32x4_t v68 = vaddq_f32(v62, vaddq_f32(v66, v67));
    float32x4_t v69 = v1346;
    float32x4_t v70 = vld1q_dup_f32(v69);
    int32x4_t v71 = vcgeq_f32(v68, v70);
    int32x4_t v72 = (int32x4_t)vmvnq_s8((int8x16_t)v71);
    *(int16x4_t *)v72.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v72), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v72.i8))
    {
      float32x4_t v35 = 0uLL;
      if (!v1499) {
        goto LABEL_58;
      }
    }
    else
    {
      v72.i32[0] = 0;
      int8x16_t v1426 = (int8x16_t)v71;
      v71.i32[0] = v7 & 0x1000000;
      int8x16_t v73 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v71, v72), 0);
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1412 = (float32x4_t)vbslq_s8(v73, _Q1, (int8x16_t)v35);
      float v75 = *(float *)(v5 + 12636);
      float32x4_t v1548 = v24;
      float32x4_t v1564 = v23;
      float32x4_t v1532 = v25;
      float32x4_t v1516 = v26;
      float32x4_t v1445 = v37;
      float32x4_t v1453 = v34;
      float32x4_t v1506 = v38;
      float32x4_t v1511 = v68;
      float32x4_t v1437 = v36;
      unsigned int v1398 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(v5 + 560))(a1));
      unsigned int v1390 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1511.f32[1], v75));
      unsigned int v1382 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1511.f32[2], v75));
      *(float *)&unsigned int v76 = (*(float (**)(float, float))(v5 + 560))(v1511.f32[3], v75);
      float32x4_t v36 = v1437;
      float32x4_t v37 = v1445;
      float32x4_t v38 = v1506;
      float32x4_t v34 = v1453;
      float32x4_t v22 = v1512;
      float32x4_t v26 = v1516;
      float32x4_t v25 = v1532;
      float32x4_t v24 = v1548;
      float32x4_t v23 = v1564;
      unsigned int v17 = v1514;
      v77.i64[0] = __PAIR64__(v1390, v1398);
      v77.i64[1] = __PAIR64__(v76, v1382);
      float32x4_t v35 = vmulq_f32(v1412, (float32x4_t)vandq_s8(v77, v1426));
      if (!v1499) {
        goto LABEL_58;
      }
    }
LABEL_53:
    if (v35.f32[0] <= 0.0 && v35.f32[1] <= 0.0 && v35.f32[2] <= 0.0)
    {
      float32x4_t v1510 = 0u;
      if (v35.f32[3] <= 0.0)
      {
        float32x4_t v29 = 0uLL;
        goto LABEL_71;
      }
    }
LABEL_58:
    if (v1586)
    {
      if ((v7 & 0x200) != 0)
      {
        float32x4_t v82 = *(float32x4_t *)(v5 + 12544);
        float32x4_t v78 = vmulq_f32(v82, v4[13]);
        float32x4_t v79 = vmulq_f32(v82, v10[13]);
        float32x4_t v80 = vmulq_f32(v82, v11[13]);
        float32x4_t v81 = vmulq_f32(v82, v12[13]);
      }
      else
      {
        float32x4_t v78 = v14[5];
        float32x4_t v79 = v15[5];
        float32x4_t v80 = v16[5];
        float32x4_t v81 = v17[5];
      }
    }
    else
    {
      float32x4_t v81 = 0uLL;
      float32x4_t v80 = 0uLL;
      float32x4_t v79 = 0uLL;
      float32x4_t v78 = 0uLL;
    }
    float32x4_t v83 = vmulq_f32(v30, v34);
    int32x4_t v84 = (int32x4_t)vmulq_f32(v31, v36);
    float32x4_t v85 = vmulq_f32(v32, v37);
    float32x4_t v86 = vmulq_f32(v33, v38);
    v87.i64[0] = vzip1q_s32((int32x4_t)v83, v84).u64[0];
    v87.i64[1] = __PAIR64__(v86.u32[0], v85.u32[0]);
    v88.i64[0] = vtrn2q_s32((int32x4_t)v83, v84).u64[0];
    v88.i64[1] = __PAIR64__(v86.u32[1], v85.u32[1]);
    v83.i64[0] = vzip2q_s32((int32x4_t)v83, v84).u64[0];
    v83.i64[1] = __PAIR64__(v86.u32[2], v85.u32[2]);
    float32x4_t v89 = vaddq_f32(v83, vaddq_f32(v87, v88));
    if (v89.f32[0] <= 0.0 && v89.f32[1] <= 0.0 && v89.f32[2] <= 0.0 && v89.f32[3] <= 0.0)
    {
      float32x4_t v29 = 0uLL;
      float32x4_t v1510 = 0u;
      if (v1586)
      {
        if (v1499)
        {
          float32x4_t v78 = vmulq_n_f32(v78, v35.f32[0]);
          float32x4_t v79 = vmulq_lane_f32(v79, *(float32x2_t *)v35.f32, 1);
          float32x4_t v80 = vmulq_laneq_f32(v80, v35, 2);
          float32x4_t v81 = vmulq_laneq_f32(v81, v35, 3);
        }
        float32x4_t v23 = vaddq_f32(v23, v78);
        float32x4_t v24 = vaddq_f32(v24, v79);
        float32x4_t v25 = vaddq_f32(v25, v80);
        float32x4_t v26 = vaddq_f32(v26, v81);
      }
LABEL_71:
      float32x4_t v1504 = v29;
      float32x4_t v1507 = v29;
      float32x4_t v1502 = v29;
      if ((v7 & 2) == 0) {
        goto LABEL_195;
      }
      goto LABEL_72;
    }
    float32x4_t v1508 = v38;
    if ((v7 & 0x400) != 0)
    {
      float32x4_t v155 = *(float32x4_t *)(v5 + 12560);
      float32x4_t v112 = vmulq_f32(v155, v4[13]);
      float32x4_t v113 = vmulq_f32(v155, v10[13]);
      float32x4_t v114 = vmulq_f32(v155, v11[13]);
      float32x4_t v115 = vmulq_f32(v155, v12[13]);
    }
    else
    {
      float32x4_t v112 = v14[6];
      float32x4_t v113 = v15[6];
      float32x4_t v114 = v16[6];
      float32x4_t v115 = v17[6];
    }
    float32x4_t v156 = vmulq_n_f32(v112, fmaxf(v89.f32[0], 0.0));
    float32x4_t v157 = vmulq_n_f32(v113, fmaxf(v89.f32[1], 0.0));
    float32x4_t v158 = vmulq_n_f32(v114, fmaxf(v89.f32[2], 0.0));
    float32x4_t v159 = vmulq_n_f32(v115, fmaxf(v89.f32[3], 0.0));
    if (v1586)
    {
      float32x4_t v156 = vaddq_f32(v78, v156);
      float32x4_t v157 = vaddq_f32(v79, v157);
      float32x4_t v158 = vaddq_f32(v80, v158);
      float32x4_t v159 = vaddq_f32(v81, v159);
    }
    float32x4_t v1463 = v157;
    float32x4_t v1478 = v156;
    float32x4_t v1446 = v159;
    float32x4_t v1454 = v158;
    if ((v6 & 0x20) != 0)
    {
      float32x4_t v173 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v30, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v30, 0xCuLL)));
      int32x4_t v174 = (int32x4_t)vmlsq_f32(vmulq_f32(v173, v34), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v34, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v34, 0xCuLL))), v30);
      int32x4_t v175 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v174, 0xCuLL);
      float32x4_t v176 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v31, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v31, 0xCuLL)));
      float32x4_t v177 = vmlsq_f32(vmulq_f32(v176, v36), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v36, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v36, 0xCuLL))), v31);
      int32x4_t v178 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v177, 0xCuLL);
      float32x4_t v179 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v32, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v32, 0xCuLL)));
      int32x4_t v180 = (int32x4_t)vmlsq_f32(vmulq_f32(v179, v37), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v37, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v37, 0xCuLL))), v32);
      int32x4_t v181 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v180, 0xCuLL);
      float32x4_t v182 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v33, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v33, 0xCuLL)));
      int32x4_t v183 = (int32x4_t)vmlsq_f32(vmulq_f32(v182, v1508), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1508, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1508, 0xCuLL))), v33);
      int32x4_t v184 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v183, 0xCuLL);
      int32x4_t v185 = (int32x4_t)vmlsq_f32(vmulq_f32(v173, (float32x4_t)vrev64q_s32(vuzp1q_s32(v174, v175))), (float32x4_t)vextq_s8((int8x16_t)v175, (int8x16_t)vrev64q_s32(v175), 8uLL), v30);
      int32x4_t v186 = (int32x4_t)vmlsq_f32(vmulq_f32(v176, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v177, v178))), (float32x4_t)vextq_s8((int8x16_t)v178, (int8x16_t)vrev64q_s32(v178), 8uLL), v31);
      int32x4_t v187 = (int32x4_t)vmlsq_f32(vmulq_f32(v179, (float32x4_t)vrev64q_s32(vuzp1q_s32(v180, v181))), (float32x4_t)vextq_s8((int8x16_t)v181, (int8x16_t)vrev64q_s32(v181), 8uLL), v32);
      int32x4_t v188 = (int32x4_t)vmlsq_f32(vmulq_f32(v182, (float32x4_t)vrev64q_s32(vuzp1q_s32(v183, v184))), (float32x4_t)vextq_s8((int8x16_t)v184, (int8x16_t)vrev64q_s32(v184), 8uLL), v33);
      v177.i64[0] = 0x4000000040000000;
      v177.i64[1] = 0x4000000040000000;
      float32x4_t v189 = vmlaq_f32(v34, v177, (float32x4_t)vrev64q_s32(vuzp1q_s32(v185, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v185, 0xCuLL))));
      float32x4_t v190 = vmlaq_f32(v36, v177, (float32x4_t)vrev64q_s32(vuzp1q_s32(v186, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v186, 0xCuLL))));
      float32x4_t v191 = vmlaq_f32(v37, v177, (float32x4_t)vrev64q_s32(vuzp1q_s32(v187, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v187, 0xCuLL))));
      float32x4_t v192 = vmlaq_f32(v1508, v177, (float32x4_t)vrev64q_s32(vuzp1q_s32(v188, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v188, 0xCuLL))));
      if ((v6 & 8) != 0)
      {
        float32x4_t v215 = vmulq_f32(v1584, v1584);
        int32x4_t v216 = (int32x4_t)vmulq_f32(v1580, v1580);
        float32x4_t v217 = vmulq_f32(v1582, v1582);
        float32x4_t v218 = vmulq_f32(v22, v22);
        v219.i64[0] = vzip1q_s32((int32x4_t)v215, v216).u64[0];
        v219.i64[1] = __PAIR64__(v218.u32[0], v217.u32[0]);
        v220.i64[0] = vtrn2q_s32((int32x4_t)v215, v216).u64[0];
        v220.i64[1] = __PAIR64__(v218.u32[1], v217.u32[1]);
        v215.i64[0] = vzip2q_s32((int32x4_t)v215, v216).u64[0];
        v215.i64[1] = __PAIR64__(v218.u32[2], v217.u32[2]);
        __asm { FMOV            V7.4S, #1.0 }
        float32x4_t v222 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v215, vaddq_f32(v219, v220))));
        float32x4_t v223 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1584), v222.f32[0]), v189);
        int32x4_t v224 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v222.f32, 1), v190);
        float32x4_t v225 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1582), v222, 2), v191);
        float32x4_t v226 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v22), v222, 3), v192);
        v217.i64[0] = vzip1q_s32((int32x4_t)v223, v224).u64[0];
        v217.i64[1] = __PAIR64__(v226.u32[0], v225.u32[0]);
        v218.i64[0] = vtrn2q_s32((int32x4_t)v223, v224).u64[0];
        v218.i64[1] = __PAIR64__(v226.u32[1], v225.u32[1]);
        v223.i64[0] = vzip2q_s32((int32x4_t)v223, v224).u64[0];
        v223.i64[1] = __PAIR64__(v226.u32[2], v225.u32[2]);
        float32x4_t v193 = vaddq_f32(v223, vaddq_f32(v217, v218));
      }
      else
      {
        v193.i64[0] = vzip2q_s32((int32x4_t)v189, (int32x4_t)v190).u64[0];
        v193.i64[1] = __PAIR64__(v192.u32[2], v191.u32[2]);
      }
      float32x4_t v159 = v1446;
      float32x4_t v158 = v1454;
      float v9 = 1.0;
    }
    else
    {
      if (v1328)
      {
        if ((v6 & 8) != 0)
        {
          float32x4_t v247 = vmulq_f32(v1584, v1584);
          int32x4_t v248 = (int32x4_t)vmulq_f32(v1580, v1580);
          float32x4_t v249 = vmulq_f32(v1582, v1582);
          v250.i64[0] = vzip1q_s32((int32x4_t)v247, v248).u64[0];
          v250.i32[2] = v249.i32[0];
          float32x4_t v251 = vmulq_f32(v22, v22);
          v250.i32[3] = v251.i32[0];
          v252.i64[0] = vtrn2q_s32((int32x4_t)v247, v248).u64[0];
          v252.i64[1] = __PAIR64__(v251.u32[1], v249.u32[1]);
          v247.i64[0] = vzip2q_s32((int32x4_t)v247, v248).u64[0];
          v247.i64[1] = __PAIR64__(v251.u32[2], v249.u32[2]);
          __asm { FMOV            V16.4S, #1.0 }
          float32x4_t v254 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v247, vaddq_f32(v250, v252))));
          float32x4_t v160 = vmulq_n_f32(vnegq_f32(v1584), v254.f32[0]);
          float32x4_t v161 = vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v254.f32, 1);
          float32x4_t v162 = vmulq_laneq_f32(vnegq_f32(v1582), v254, 2);
          float32x4_t v163 = vmulq_laneq_f32(vnegq_f32(v22), v254, 3);
        }
        else
        {
          float32x4_t v160 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v161 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v162 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v163 = (float32x4_t)xmmword_227DC2100;
        }
        float32x4_t v255 = vaddq_f32(v34, v160);
        float32x4_t v256 = vaddq_f32(v36, v161);
        float32x4_t v257 = vaddq_f32(v37, v162);
        float32x4_t v258 = vaddq_f32(v1508, v163);
        float32x4_t v259 = vmulq_f32(v255, v255);
        int32x4_t v260 = (int32x4_t)vmulq_f32(v256, v256);
        float32x4_t v261 = vmulq_f32(v257, v257);
        v262.i64[0] = vzip1q_s32((int32x4_t)v259, v260).u64[0];
        v262.i32[2] = v261.i32[0];
        float32x4_t v263 = vmulq_f32(v258, v258);
        v262.i32[3] = v263.i32[0];
        v264.i64[0] = vtrn2q_s32((int32x4_t)v259, v260).u64[0];
        v264.i64[1] = __PAIR64__(v263.u32[1], v261.u32[1]);
        v259.i64[0] = vzip2q_s32((int32x4_t)v259, v260).u64[0];
        v259.i64[1] = __PAIR64__(v263.u32[2], v261.u32[2]);
        __asm { FMOV            V17.4S, #1.0 }
        float32x4_t v266 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v259, vaddq_f32(v262, v264))));
        float32x4_t v239 = vmulq_n_f32(v255, v266.f32[0]);
        float32x4_t v240 = vmulq_lane_f32(v256, *(float32x2_t *)v266.f32, 1);
        float32x4_t v241 = vmulq_laneq_f32(v257, v266, 2);
        float32x4_t v242 = vmulq_laneq_f32(v258, v266, 3);
      }
      else
      {
        float32x4_t v239 = *(float32x4_t *)(v5 + 12672);
        float32x4_t v240 = v239;
        float32x4_t v241 = v239;
        float32x4_t v242 = v239;
      }
      float v9 = 1.0;
      float32x4_t v267 = vmulq_f32(v30, v239);
      int32x4_t v268 = (int32x4_t)vmulq_f32(v31, v240);
      float32x4_t v269 = vmulq_f32(v32, v241);
      float32x4_t v270 = vmulq_f32(v33, v242);
      v271.i64[0] = vzip1q_s32((int32x4_t)v267, v268).u64[0];
      v271.i64[1] = __PAIR64__(v270.u32[0], v269.u32[0]);
      v272.i64[0] = vtrn2q_s32((int32x4_t)v267, v268).u64[0];
      v272.i64[1] = __PAIR64__(v270.u32[1], v269.u32[1]);
      v267.i64[0] = vzip2q_s32((int32x4_t)v267, v268).u64[0];
      v267.i64[1] = __PAIR64__(v270.u32[2], v269.u32[2]);
      float32x4_t v193 = vaddq_f32(v267, vaddq_f32(v271, v272));
    }
    if (v89.f32[0] <= 0.0) {
      float v273 = 0.0;
    }
    else {
      float v273 = v193.f32[0];
    }
    if (v89.f32[1] <= 0.0) {
      float v274 = 0.0;
    }
    else {
      float v274 = v193.f32[1];
    }
    if (v89.f32[2] <= 0.0) {
      float v275 = 0.0;
    }
    else {
      float v275 = v193.f32[2];
    }
    if (v89.f32[3] <= 0.0) {
      float v276 = 0.0;
    }
    else {
      float v276 = v193.f32[3];
    }
    float32x4_t v1510 = 0u;
    if (v273 > 0.0 || v274 > 0.0 || v275 > 0.0 || v276 > 0.0)
    {
      float32x4_t v1509 = v35;
      float32x4_t v1518 = v26;
      float32x4_t v1534 = v25;
      float32x4_t v1550 = v24;
      float32x4_t v1566 = v23;
      float v279 = fmaxf(v274, 0.0);
      float v280 = fmaxf(v275, 0.0);
      float v281 = v15[4].f32[0];
      float v282 = fmaxf(v276, 0.0);
      float v283 = v16[4].f32[0];
      float v284 = v17[4].f32[0];
      int v6 = v16;
      v285 = v15;
      uint64_t v286 = v17;
      LODWORD(v1505) = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t, float, float32_t))(v5 + 560))(a1, fmaxf(v273, 0.0), v14[4].f32[0]));
      LODWORD(v1503) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v279, v281));
      LODWORD(v1438) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v280, v283));
      a1 = (*(uint64_t (**)(float, float))(v5 + 560))(v282, v284);
      if ((v7 & 0x800) != 0)
      {
        v290 = v285;
        uint64_t v288 = v14;
        float32x4_t v294 = *(float32x4_t *)(v5 + 12576);
        float32x4_t v289 = vmulq_f32(v294, v4[13]);
        float32x4_t v291 = vmulq_f32(v294, v10[13]);
        float32x4_t v292 = vmulq_f32(v294, v11[13]);
        float32x4_t v293 = vmulq_f32(v294, v12[13]);
      }
      else
      {
        uint64_t v288 = v14;
        float32x4_t v289 = v14[7];
        v290 = v285;
        float32x4_t v291 = v285[7];
        float32x4_t v292 = v6[7];
        float32x4_t v293 = v286[7];
      }
      unsigned int v17 = v286;
      uint64_t v16 = v6;
      float32x4_t v35 = v1509;
      float32x4_t v278 = v1463;
      float32x4_t v277 = v1478;
      float32x4_t v159 = v1446;
      float32x4_t v158 = v1454;
      float32x4_t v295 = vmulq_n_f32(v289, v1505);
      float32x4_t v296 = vmulq_n_f32(v291, v1503);
      float32x4_t v297 = vmulq_n_f32(v292, v1438);
      float32x4_t v298 = vmulq_n_f32(v293, v287);
      LOWORD(v6) = v1462;
      float32x4_t v24 = v1550;
      float32x4_t v23 = v1566;
      float32x4_t v25 = v1534;
      float32x4_t v26 = v1518;
      float32x4_t v22 = v1512;
      if ((v1462 & 0x10) != 0)
      {
        int v14 = v288;
        uint64_t v15 = v290;
        if (v1499)
        {
          float32x4_t v295 = vmulq_n_f32(v295, v1509.f32[0]);
          float32x4_t v296 = vmulq_lane_f32(v296, *(float32x2_t *)v1509.f32, 1);
          float32x4_t v297 = vmulq_laneq_f32(v297, v1509, 2);
          float32x4_t v298 = vmulq_laneq_f32(v298, v1509, 3);
        }
        float32x4_t v1507 = vaddq_f32(v296, (float32x4_t)0);
        float32x4_t v1510 = vaddq_f32(v295, (float32x4_t)0);
        float32x4_t v1502 = vaddq_f32(v298, (float32x4_t)0);
        float32x4_t v1504 = vaddq_f32(v297, (float32x4_t)0);
        if (v1499)
        {
LABEL_160:
          float32x4_t v277 = vmulq_n_f32(v277, v35.f32[0]);
          float32x4_t v278 = vmulq_lane_f32(v278, *(float32x2_t *)v35.f32, 1);
          float32x4_t v158 = vmulq_laneq_f32(v158, v35, 2);
          float32x4_t v159 = vmulq_laneq_f32(v159, v35, 3);
        }
      }
      else
      {
        float32x4_t v277 = vaddq_f32(v1478, v295);
        float32x4_t v278 = vaddq_f32(v1463, v296);
        float32x4_t v158 = vaddq_f32(v1454, v297);
        float32x4_t v159 = vaddq_f32(v1446, v298);
        float32x4_t v1504 = 0u;
        float32x4_t v1507 = 0u;
        float32x4_t v1502 = 0u;
        int v14 = v288;
        uint64_t v15 = v290;
        if (v1499) {
          goto LABEL_160;
        }
      }
    }
    else
    {
      float32x4_t v1504 = 0uLL;
      float32x4_t v1507 = 0uLL;
      float32x4_t v1502 = 0uLL;
      float32x4_t v278 = v1463;
      float32x4_t v277 = v1478;
      if (v1499) {
        goto LABEL_160;
      }
    }
    float32x4_t v23 = vaddq_f32(v23, v277);
    float32x4_t v24 = vaddq_f32(v24, v278);
    float32x4_t v25 = vaddq_f32(v25, v158);
    float32x4_t v26 = vaddq_f32(v26, v159);
    if ((v7 & 2) == 0) {
      goto LABEL_195;
    }
LABEL_72:
    float32x4_t v90 = v4[7];
    float32x4_t v91 = v10[7];
    float32x4_t v92 = v11[7];
    float32x4_t v93 = v12[7];
    if ((v6 & 2) != 0)
    {
      float32x4_t v90 = vnegq_f32(v90);
      float32x4_t v91 = vnegq_f32(v91);
      float32x4_t v92 = vnegq_f32(v92);
      float32x4_t v93 = vnegq_f32(v93);
    }
    float32x4_t v94 = *(float32x4_t *)(v5 + 12800);
    float32x4_t v95 = 0uLL;
    if (((unsigned __int16)v6 & 0x200) != 0)
    {
      float32x4_t v99 = vsubq_f32(v94, v1584);
      float32x4_t v100 = vsubq_f32(v94, v1580);
      float32x4_t v101 = vsubq_f32(v94, v1582);
      float32x4_t v102 = vsubq_f32(v94, v22);
      float32x4_t v103 = vmulq_f32(v99, v99);
      int32x4_t v104 = (int32x4_t)vmulq_f32(v100, v100);
      float32x4_t v105 = vmulq_f32(v101, v101);
      v106.i64[0] = vzip1q_s32((int32x4_t)v103, v104).u64[0];
      v106.i32[2] = v105.i32[0];
      float32x4_t v107 = vmulq_f32(v102, v102);
      v106.i32[3] = v107.i32[0];
      v108.i64[0] = vtrn2q_s32((int32x4_t)v103, v104).u64[0];
      v108.i64[1] = __PAIR64__(v107.u32[1], v105.u32[1]);
      v103.i64[0] = vzip2q_s32((int32x4_t)v103, v104).u64[0];
      v103.i64[1] = __PAIR64__(v107.u32[2], v105.u32[2]);
      float32x4_t v109 = vsqrtq_f32(vaddq_f32(v103, vaddq_f32(v106, v108)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v111 = vdivq_f32(_Q0, v109);
      float32x4_t v94 = vmulq_n_f32(v99, v111.f32[0]);
      float32x4_t v96 = vmulq_lane_f32(v100, *(float32x2_t *)v111.f32, 1);
      float32x4_t v97 = vmulq_laneq_f32(v101, v111, 2);
      float32x4_t v98 = vmulq_laneq_f32(v102, v111, 3);
      if ((v7 & 0x2000000) != 0)
      {
        float32x4_t v116 = vdivq_f32(_Q0, v111);
        float32x4_t v117 = v1334;
        float32x4_t v118 = vld1q_dup_f32(v117);
        float32x4_t v119 = v1333;
        float32x4_t v120 = vld1q_dup_f32(v119);
        float32x4_t v95 = vdivq_f32(_Q0, vmlaq_f32(v118, vmlaq_n_f32(v120, v116, *(float *)(v5 + 12792)), v116));
        if ((v7 & 0x20000) == 0)
        {
LABEL_79:
          if (!v1498) {
            goto LABEL_92;
          }
          goto LABEL_88;
        }
      }
      else if ((v7 & 0x20000) == 0)
      {
        goto LABEL_79;
      }
    }
    else
    {
      float32x4_t v96 = *(float32x4_t *)(v5 + 12800);
      float32x4_t v97 = v96;
      float32x4_t v98 = v96;
      if ((v7 & 0x20000) == 0) {
        goto LABEL_79;
      }
    }
    float32x4_t v121 = vnegq_f32(*(float32x4_t *)(v5 + 12816));
    float32x4_t v122 = vmulq_f32(v94, v121);
    int32x4_t v123 = (int32x4_t)vmulq_f32(v96, v121);
    float32x4_t v124 = vmulq_f32(v97, v121);
    float32x4_t v125 = vmulq_f32(v98, v121);
    v126.i64[0] = vzip1q_s32((int32x4_t)v122, v123).u64[0];
    v126.i64[1] = __PAIR64__(v125.u32[0], v124.u32[0]);
    v127.i64[0] = vtrn2q_s32((int32x4_t)v122, v123).u64[0];
    v127.i64[1] = __PAIR64__(v125.u32[1], v124.u32[1]);
    v122.i64[0] = vzip2q_s32((int32x4_t)v122, v123).u64[0];
    v122.i64[1] = __PAIR64__(v125.u32[2], v124.u32[2]);
    float32x4_t v128 = vaddq_f32(v122, vaddq_f32(v126, v127));
    float32x4_t v129 = v1347;
    float32x4_t v130 = vld1q_dup_f32(v129);
    int32x4_t v131 = vcgeq_f32(v128, v130);
    int32x4_t v132 = (int32x4_t)vmvnq_s8((int8x16_t)v131);
    *(int16x4_t *)v132.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v132), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v132.i8))
    {
      float32x4_t v95 = 0uLL;
      if (!v1498) {
        goto LABEL_92;
      }
    }
    else
    {
      v132.i32[0] = 0;
      int8x16_t v1383 = (int8x16_t)v131;
      float32x4_t v1391 = v96;
      v131.i32[0] = v7 & 0x2000000;
      int8x16_t v133 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v131, v132), 0);
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1375 = (float32x4_t)vbslq_s8(v133, _Q1, (int8x16_t)v95);
      float v135 = *(float *)(v5 + 12796);
      float32x4_t v1549 = v24;
      float32x4_t v1565 = v23;
      float32x4_t v1533 = v25;
      float32x4_t v1517 = v26;
      float32x4_t v1477 = v128;
      float32x4_t v1427 = v94;
      float32x4_t v1399 = v97;
      float32x4_t v1413 = v98;
      unsigned int v1368 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(v5 + 560))(a1));
      unsigned int v1361 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1477.f32[1], v135));
      unsigned int v1354 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1477.f32[2], v135));
      *(float *)&unsigned int v136 = (*(float (**)(float, float))(v5 + 560))(v1477.f32[3], v135);
      float32x4_t v96 = v1391;
      float32x4_t v97 = v1399;
      float32x4_t v98 = v1413;
      float32x4_t v94 = v1427;
      float32x4_t v22 = v1512;
      float32x4_t v26 = v1517;
      float32x4_t v25 = v1533;
      float32x4_t v24 = v1549;
      float32x4_t v23 = v1565;
      unsigned int v17 = v1514;
      v137.i64[0] = __PAIR64__(v1361, v1368);
      v137.i64[1] = __PAIR64__(v136, v1354);
      float32x4_t v95 = vmulq_f32(v1375, (float32x4_t)vandq_s8(v137, v1383));
      if (!v1498) {
        goto LABEL_92;
      }
    }
LABEL_88:
    if (v95.f32[0] <= 0.0 && v95.f32[1] <= 0.0 && v95.f32[2] <= 0.0 && v95.f32[3] <= 0.0) {
      goto LABEL_195;
    }
LABEL_92:
    if (v1586)
    {
      if ((v7 & 0x200) != 0)
      {
        float32x4_t v142 = *(float32x4_t *)(v5 + 12704);
        float32x4_t v138 = vmulq_f32(v142, v4[13]);
        float32x4_t v139 = vmulq_f32(v142, v10[13]);
        float32x4_t v140 = vmulq_f32(v142, v11[13]);
        float32x4_t v141 = vmulq_f32(v142, v12[13]);
      }
      else
      {
        float32x4_t v138 = v14[8];
        float32x4_t v139 = v15[8];
        float32x4_t v140 = v16[8];
        float32x4_t v141 = v17[8];
      }
    }
    else
    {
      float32x4_t v141 = 0uLL;
      float32x4_t v140 = 0uLL;
      float32x4_t v139 = 0uLL;
      float32x4_t v138 = 0uLL;
    }
    float32x4_t v143 = vmulq_f32(v90, v94);
    int32x4_t v144 = (int32x4_t)vmulq_f32(v91, v96);
    float32x4_t v145 = vmulq_f32(v92, v97);
    float32x4_t v146 = vmulq_f32(v93, v98);
    v147.i64[0] = vzip1q_s32((int32x4_t)v143, v144).u64[0];
    v147.i64[1] = __PAIR64__(v146.u32[0], v145.u32[0]);
    v148.i64[0] = vtrn2q_s32((int32x4_t)v143, v144).u64[0];
    v148.i64[1] = __PAIR64__(v146.u32[1], v145.u32[1]);
    v143.i64[0] = vzip2q_s32((int32x4_t)v143, v144).u64[0];
    v143.i64[1] = __PAIR64__(v146.u32[2], v145.u32[2]);
    float32x4_t v149 = vaddq_f32(v143, vaddq_f32(v147, v148));
    if (v149.f32[0] > 0.0 || v149.f32[1] > 0.0 || v149.f32[2] > 0.0 || v149.f32[3] > 0.0)
    {
      float32x4_t v150 = v97;
      if ((v7 & 0x400) != 0)
      {
        float32x4_t v164 = *(float32x4_t *)(v5 + 12720);
        float32x4_t v151 = vmulq_f32(v164, v4[13]);
        float32x4_t v152 = vmulq_f32(v164, v10[13]);
        float32x4_t v153 = vmulq_f32(v164, v11[13]);
        float32x4_t v154 = vmulq_f32(v164, v12[13]);
      }
      else
      {
        float32x4_t v151 = v14[9];
        float32x4_t v152 = v15[9];
        float32x4_t v153 = v16[9];
        float32x4_t v154 = v17[9];
      }
      float32x4_t v165 = vmulq_n_f32(v151, fmaxf(v149.f32[0], 0.0));
      float32x4_t v166 = vmulq_n_f32(v152, fmaxf(v149.f32[1], 0.0));
      float32x4_t v167 = vmulq_n_f32(v153, fmaxf(v149.f32[2], 0.0));
      float32x4_t v168 = vmulq_n_f32(v154, fmaxf(v149.f32[3], 0.0));
      if (v1586)
      {
        float32x4_t v165 = vaddq_f32(v138, v165);
        float32x4_t v166 = vaddq_f32(v139, v166);
        float32x4_t v167 = vaddq_f32(v140, v167);
        float32x4_t v168 = vaddq_f32(v141, v168);
      }
      float32x4_t v1464 = v166;
      float32x4_t v1479 = v165;
      float32x4_t v1447 = v168;
      float32x4_t v1455 = v167;
      if ((v6 & 0x20) != 0)
      {
        float32x4_t v194 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v90, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v90, 0xCuLL)));
        int32x4_t v195 = (int32x4_t)vmlsq_f32(vmulq_f32(v194, v94), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v94, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v94, 0xCuLL))), v90);
        int32x4_t v196 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v195, 0xCuLL);
        float32x4_t v197 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v91, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v91, 0xCuLL)));
        float32x4_t v198 = vmlsq_f32(vmulq_f32(v197, v96), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v96, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v96, 0xCuLL))), v91);
        int32x4_t v199 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v198, 0xCuLL);
        float32x4_t v200 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v92, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v92, 0xCuLL)));
        int32x4_t v201 = (int32x4_t)vmlsq_f32(vmulq_f32(v200, v150), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v150, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v150, 0xCuLL))), v92);
        int32x4_t v202 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v201, 0xCuLL);
        float32x4_t v203 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v93, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v93, 0xCuLL)));
        int32x4_t v204 = (int32x4_t)vmlsq_f32(vmulq_f32(v203, v98), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v98, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v98, 0xCuLL))), v93);
        int32x4_t v205 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v204, 0xCuLL);
        int32x4_t v206 = (int32x4_t)vmlsq_f32(vmulq_f32(v194, (float32x4_t)vrev64q_s32(vuzp1q_s32(v195, v196))), (float32x4_t)vextq_s8((int8x16_t)v196, (int8x16_t)vrev64q_s32(v196), 8uLL), v90);
        int32x4_t v207 = (int32x4_t)vmlsq_f32(vmulq_f32(v197, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v198, v199))), (float32x4_t)vextq_s8((int8x16_t)v199, (int8x16_t)vrev64q_s32(v199), 8uLL), v91);
        int32x4_t v208 = (int32x4_t)vmlsq_f32(vmulq_f32(v200, (float32x4_t)vrev64q_s32(vuzp1q_s32(v201, v202))), (float32x4_t)vextq_s8((int8x16_t)v202, (int8x16_t)vrev64q_s32(v202), 8uLL), v92);
        int32x4_t v209 = (int32x4_t)vmlsq_f32(vmulq_f32(v203, (float32x4_t)vrev64q_s32(vuzp1q_s32(v204, v205))), (float32x4_t)vextq_s8((int8x16_t)v205, (int8x16_t)vrev64q_s32(v205), 8uLL), v93);
        v198.i64[0] = 0x4000000040000000;
        v198.i64[1] = 0x4000000040000000;
        float32x4_t v210 = vmlaq_f32(v94, v198, (float32x4_t)vrev64q_s32(vuzp1q_s32(v206, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v206, 0xCuLL))));
        float32x4_t v211 = vmlaq_f32(v96, v198, (float32x4_t)vrev64q_s32(vuzp1q_s32(v207, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v207, 0xCuLL))));
        float32x4_t v212 = vmlaq_f32(v150, v198, (float32x4_t)vrev64q_s32(vuzp1q_s32(v208, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v208, 0xCuLL))));
        float32x4_t v213 = vmlaq_f32(v98, v198, (float32x4_t)vrev64q_s32(vuzp1q_s32(v209, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v209, 0xCuLL))));
        if ((v6 & 8) != 0)
        {
          float32x4_t v227 = vmulq_f32(v1584, v1584);
          int32x4_t v228 = (int32x4_t)vmulq_f32(v1580, v1580);
          float32x4_t v229 = vmulq_f32(v1582, v1582);
          float32x4_t v22 = v1512;
          float32x4_t v230 = vmulq_f32(v22, v22);
          v231.i64[0] = vzip1q_s32((int32x4_t)v227, v228).u64[0];
          v231.i64[1] = __PAIR64__(v230.u32[0], v229.u32[0]);
          v232.i64[0] = vtrn2q_s32((int32x4_t)v227, v228).u64[0];
          v232.i64[1] = __PAIR64__(v230.u32[1], v229.u32[1]);
          v227.i64[0] = vzip2q_s32((int32x4_t)v227, v228).u64[0];
          v227.i64[1] = __PAIR64__(v230.u32[2], v229.u32[2]);
          __asm { FMOV            V7.4S, #1.0 }
          float32x4_t v234 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v227, vaddq_f32(v231, v232))));
          float32x4_t v235 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1584), v234.f32[0]), v210);
          int32x4_t v236 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v234.f32, 1), v211);
          float32x4_t v237 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1582), v234, 2), v212);
          float32x4_t v238 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1512), v234, 3), v213);
          v229.i64[0] = vzip1q_s32((int32x4_t)v235, v236).u64[0];
          v229.i64[1] = __PAIR64__(v238.u32[0], v237.u32[0]);
          v230.i64[0] = vtrn2q_s32((int32x4_t)v235, v236).u64[0];
          v230.i64[1] = __PAIR64__(v238.u32[1], v237.u32[1]);
          v235.i64[0] = vzip2q_s32((int32x4_t)v235, v236).u64[0];
          v235.i64[1] = __PAIR64__(v238.u32[2], v237.u32[2]);
          float32x4_t v214 = vaddq_f32(v235, vaddq_f32(v229, v230));
          float32x4_t v168 = v1447;
          float32x4_t v167 = v1455;
          float v9 = 1.0;
        }
        else
        {
          v214.i64[0] = vzip2q_s32((int32x4_t)v210, (int32x4_t)v211).u64[0];
          v214.i64[1] = __PAIR64__(v213.u32[2], v212.u32[2]);
          float32x4_t v168 = v1447;
          float32x4_t v167 = v1455;
          float v9 = 1.0;
          float32x4_t v22 = v1512;
        }
      }
      else
      {
        if (v1327)
        {
          if ((v6 & 8) != 0)
          {
            float32x4_t v299 = vmulq_f32(v1584, v1584);
            int32x4_t v300 = (int32x4_t)vmulq_f32(v1580, v1580);
            float32x4_t v301 = vmulq_f32(v1582, v1582);
            v302.i64[0] = vzip1q_s32((int32x4_t)v299, v300).u64[0];
            v302.i32[2] = v301.i32[0];
            float32x4_t v303 = vmulq_f32(v1512, v1512);
            v302.i32[3] = v303.i32[0];
            v304.i64[0] = vtrn2q_s32((int32x4_t)v299, v300).u64[0];
            v304.i64[1] = __PAIR64__(v303.u32[1], v301.u32[1]);
            v299.i64[0] = vzip2q_s32((int32x4_t)v299, v300).u64[0];
            v299.i64[1] = __PAIR64__(v303.u32[2], v301.u32[2]);
            __asm { FMOV            V16.4S, #1.0 }
            float32x4_t v306 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v299, vaddq_f32(v302, v304))));
            float32x4_t v169 = vmulq_n_f32(vnegq_f32(v1584), v306.f32[0]);
            float32x4_t v170 = vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v306.f32, 1);
            float32x4_t v171 = vmulq_laneq_f32(vnegq_f32(v1582), v306, 2);
            float32x4_t v172 = vmulq_laneq_f32(vnegq_f32(v1512), v306, 3);
          }
          else
          {
            float32x4_t v169 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v170 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v171 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v172 = (float32x4_t)xmmword_227DC2100;
          }
          float32x4_t v307 = vaddq_f32(v94, v169);
          float32x4_t v308 = vaddq_f32(v96, v170);
          float32x4_t v309 = vaddq_f32(v150, v171);
          float32x4_t v310 = vaddq_f32(v98, v172);
          float32x4_t v311 = vmulq_f32(v307, v307);
          int32x4_t v312 = (int32x4_t)vmulq_f32(v308, v308);
          float32x4_t v313 = vmulq_f32(v309, v309);
          v314.i64[0] = vzip1q_s32((int32x4_t)v311, v312).u64[0];
          v314.i32[2] = v313.i32[0];
          float32x4_t v315 = vmulq_f32(v310, v310);
          v314.i32[3] = v315.i32[0];
          v316.i64[0] = vtrn2q_s32((int32x4_t)v311, v312).u64[0];
          v316.i64[1] = __PAIR64__(v315.u32[1], v313.u32[1]);
          v311.i64[0] = vzip2q_s32((int32x4_t)v311, v312).u64[0];
          v311.i64[1] = __PAIR64__(v315.u32[2], v313.u32[2]);
          __asm { FMOV            V17.4S, #1.0 }
          float32x4_t v318 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v311, vaddq_f32(v314, v316))));
          float32x4_t v243 = vmulq_n_f32(v307, v318.f32[0]);
          float32x4_t v244 = vmulq_lane_f32(v308, *(float32x2_t *)v318.f32, 1);
          float32x4_t v245 = vmulq_laneq_f32(v309, v318, 2);
          float32x4_t v246 = vmulq_laneq_f32(v310, v318, 3);
        }
        else
        {
          float32x4_t v243 = *(float32x4_t *)(v5 + 12832);
          float32x4_t v244 = v243;
          float32x4_t v245 = v243;
          float32x4_t v246 = v243;
        }
        float32x4_t v22 = v1512;
        float32x4_t v319 = vmulq_f32(v90, v243);
        int32x4_t v320 = (int32x4_t)vmulq_f32(v91, v244);
        float32x4_t v321 = vmulq_f32(v92, v245);
        float32x4_t v322 = vmulq_f32(v93, v246);
        v323.i64[0] = vzip1q_s32((int32x4_t)v319, v320).u64[0];
        v323.i64[1] = __PAIR64__(v322.u32[0], v321.u32[0]);
        v324.i64[0] = vtrn2q_s32((int32x4_t)v319, v320).u64[0];
        v324.i64[1] = __PAIR64__(v322.u32[1], v321.u32[1]);
        v319.i64[0] = vzip2q_s32((int32x4_t)v319, v320).u64[0];
        v319.i64[1] = __PAIR64__(v322.u32[2], v321.u32[2]);
        float32x4_t v214 = vaddq_f32(v319, vaddq_f32(v323, v324));
      }
      if (v149.f32[0] <= 0.0) {
        float v325 = 0.0;
      }
      else {
        float v325 = v214.f32[0];
      }
      if (v149.f32[1] <= 0.0) {
        float v326 = 0.0;
      }
      else {
        float v326 = v214.f32[1];
      }
      if (v149.f32[2] <= 0.0) {
        float v327 = 0.0;
      }
      else {
        float v327 = v214.f32[2];
      }
      if (v149.f32[3] <= 0.0) {
        float v328 = 0.0;
      }
      else {
        float v328 = v214.f32[3];
      }
      if (v325 > 0.0 || v326 > 0.0 || v327 > 0.0 || v328 > 0.0)
      {
        float32x4_t v1439 = v95;
        float32x4_t v1519 = v26;
        float32x4_t v1535 = v25;
        float32x4_t v1551 = v24;
        float32x4_t v1567 = v23;
        float v331 = fmaxf(v326, 0.0);
        float v332 = fmaxf(v327, 0.0);
        float v333 = v14[4].f32[0];
        float v334 = v15[4].f32[0];
        float v335 = fmaxf(v328, 0.0);
        float v336 = v16[4].f32[0];
        float v337 = v17[4].f32[0];
        unsigned int v338 = v16;
        uint64_t v339 = v15;
        uint64_t v340 = v14;
        uint64_t v341 = v17;
        LODWORD(v1428) = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t, float, float))(v5 + 560))(a1, fmaxf(v325, 0.0), v333));
        LODWORD(v1414) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v331, v334));
        LODWORD(v1400) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v332, v336));
        a1 = (*(uint64_t (**)(float, float))(v5 + 560))(v335, v337);
        if ((v7 & 0x800) != 0)
        {
          uint64_t v346 = v338;
          uint64_t v343 = v340;
          float32x4_t v349 = *(float32x4_t *)(v5 + 12736);
          float32x4_t v344 = vmulq_f32(v349, v4[13]);
          float32x4_t v345 = vmulq_f32(v349, v10[13]);
          float32x4_t v347 = vmulq_f32(v349, v11[13]);
          float32x4_t v348 = vmulq_f32(v349, v12[13]);
        }
        else
        {
          uint64_t v343 = v340;
          float32x4_t v344 = v340[10];
          float32x4_t v345 = v339[10];
          uint64_t v346 = v338;
          float32x4_t v347 = v338[10];
          float32x4_t v348 = v341[10];
        }
        unsigned int v17 = v341;
        uint64_t v15 = v339;
        float32x4_t v95 = v1439;
        float32x4_t v168 = v1447;
        float32x4_t v330 = v1464;
        float32x4_t v329 = v1479;
        float32x4_t v167 = v1455;
        float32x4_t v350 = vmulq_n_f32(v344, v1428);
        float32x4_t v351 = vmulq_n_f32(v345, v1414);
        float32x4_t v352 = vmulq_n_f32(v347, v1400);
        float32x4_t v353 = vmulq_n_f32(v348, v342);
        LOWORD(v6) = v1462;
        float32x4_t v24 = v1551;
        float32x4_t v23 = v1567;
        float32x4_t v25 = v1535;
        float32x4_t v26 = v1519;
        float32x4_t v22 = v1512;
        if ((v1462 & 0x10) != 0)
        {
          int v14 = v343;
          uint64_t v16 = v346;
          if (v1498)
          {
            float32x4_t v350 = vmulq_n_f32(v350, v1439.f32[0]);
            float32x4_t v351 = vmulq_lane_f32(v351, *(float32x2_t *)v1439.f32, 1);
            float32x4_t v352 = vmulq_laneq_f32(v352, v1439, 2);
            float32x4_t v353 = vmulq_laneq_f32(v353, v1439, 3);
          }
          float32x4_t v1507 = vaddq_f32(v1507, v351);
          float32x4_t v1510 = vaddq_f32(v1510, v350);
          float32x4_t v1502 = vaddq_f32(v1502, v353);
          float32x4_t v1504 = vaddq_f32(v1504, v352);
          if (!v1498) {
            goto LABEL_194;
          }
        }
        else
        {
          float32x4_t v329 = vaddq_f32(v1479, v350);
          float32x4_t v330 = vaddq_f32(v1464, v351);
          float32x4_t v167 = vaddq_f32(v1455, v352);
          float32x4_t v168 = vaddq_f32(v1447, v353);
          int v14 = v343;
          uint64_t v16 = v346;
          if (!v1498) {
            goto LABEL_194;
          }
        }
      }
      else
      {
        float32x4_t v330 = v1464;
        float32x4_t v329 = v1479;
        if (!v1498) {
          goto LABEL_194;
        }
      }
      float32x4_t v329 = vmulq_n_f32(v329, v95.f32[0]);
      float32x4_t v330 = vmulq_lane_f32(v330, *(float32x2_t *)v95.f32, 1);
      float32x4_t v167 = vmulq_laneq_f32(v167, v95, 2);
      float32x4_t v168 = vmulq_laneq_f32(v168, v95, 3);
LABEL_194:
      float32x4_t v23 = vaddq_f32(v23, v329);
      float32x4_t v24 = vaddq_f32(v24, v330);
      float32x4_t v25 = vaddq_f32(v25, v167);
      float32x4_t v26 = vaddq_f32(v26, v168);
      goto LABEL_195;
    }
    if (v1586)
    {
      if (v1498)
      {
        float32x4_t v138 = vmulq_n_f32(v138, v95.f32[0]);
        float32x4_t v139 = vmulq_lane_f32(v139, *(float32x2_t *)v95.f32, 1);
        float32x4_t v140 = vmulq_laneq_f32(v140, v95, 2);
        float32x4_t v141 = vmulq_laneq_f32(v141, v95, 3);
      }
      float32x4_t v23 = vaddq_f32(v23, v138);
      float32x4_t v24 = vaddq_f32(v24, v139);
      float32x4_t v25 = vaddq_f32(v25, v140);
      float32x4_t v26 = vaddq_f32(v26, v141);
    }
LABEL_195:
    if ((v7 & 4) == 0) {
      goto LABEL_227;
    }
    float32x4_t v354 = v4[7];
    float32x4_t v355 = v10[7];
    float32x4_t v356 = v11[7];
    float32x4_t v357 = v12[7];
    if ((v6 & 2) != 0)
    {
      float32x4_t v354 = vnegq_f32(v354);
      float32x4_t v355 = vnegq_f32(v355);
      float32x4_t v356 = vnegq_f32(v356);
      float32x4_t v357 = vnegq_f32(v357);
    }
    float32x4_t v358 = *(float32x4_t *)(v5 + 12960);
    float32x4_t v359 = 0uLL;
    if (((unsigned __int16)v6 & 0x400) != 0)
    {
      float32x4_t v363 = vsubq_f32(v358, v1584);
      float32x4_t v364 = vsubq_f32(v358, v1580);
      float32x4_t v365 = vsubq_f32(v358, v1582);
      float32x4_t v366 = vsubq_f32(v358, v22);
      float32x4_t v367 = vmulq_f32(v363, v363);
      int32x4_t v368 = (int32x4_t)vmulq_f32(v364, v364);
      float32x4_t v369 = vmulq_f32(v365, v365);
      v370.i64[0] = vzip1q_s32((int32x4_t)v367, v368).u64[0];
      v370.i32[2] = v369.i32[0];
      float32x4_t v371 = vmulq_f32(v366, v366);
      v370.i32[3] = v371.i32[0];
      v372.i64[0] = vtrn2q_s32((int32x4_t)v367, v368).u64[0];
      v372.i64[1] = __PAIR64__(v371.u32[1], v369.u32[1]);
      v367.i64[0] = vzip2q_s32((int32x4_t)v367, v368).u64[0];
      v367.i64[1] = __PAIR64__(v371.u32[2], v369.u32[2]);
      float32x4_t v373 = vsqrtq_f32(vaddq_f32(v367, vaddq_f32(v370, v372)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v375 = vdivq_f32(_Q0, v373);
      float32x4_t v358 = vmulq_n_f32(v363, v375.f32[0]);
      float32x4_t v360 = vmulq_lane_f32(v364, *(float32x2_t *)v375.f32, 1);
      float32x4_t v361 = vmulq_laneq_f32(v365, v375, 2);
      float32x4_t v362 = vmulq_laneq_f32(v366, v375, 3);
      if ((v7 & 0x4000000) != 0)
      {
        float32x4_t v376 = vdivq_f32(_Q0, v375);
        uint64_t v377 = v1336;
        float32x4_t v378 = vld1q_dup_f32(v377);
        uint64_t v379 = v1335;
        float32x4_t v380 = vld1q_dup_f32(v379);
        float32x4_t v359 = vdivq_f32(_Q0, vmlaq_f32(v378, vmlaq_n_f32(v380, v376, *(float *)(v5 + 12952)), v376));
        if ((v7 & 0x40000) == 0)
        {
LABEL_203:
          if (!v1497) {
            goto LABEL_214;
          }
          goto LABEL_210;
        }
      }
      else if ((v7 & 0x40000) == 0)
      {
        goto LABEL_203;
      }
    }
    else
    {
      float32x4_t v360 = *(float32x4_t *)(v5 + 12960);
      float32x4_t v361 = v360;
      float32x4_t v362 = v360;
      if ((v7 & 0x40000) == 0) {
        goto LABEL_203;
      }
    }
    float32x4_t v381 = vnegq_f32(*(float32x4_t *)(v5 + 12976));
    float32x4_t v382 = vmulq_f32(v358, v381);
    int32x4_t v383 = (int32x4_t)vmulq_f32(v360, v381);
    float32x4_t v384 = vmulq_f32(v361, v381);
    float32x4_t v385 = vmulq_f32(v362, v381);
    v386.i64[0] = vzip1q_s32((int32x4_t)v382, v383).u64[0];
    v386.i64[1] = __PAIR64__(v385.u32[0], v384.u32[0]);
    v387.i64[0] = vtrn2q_s32((int32x4_t)v382, v383).u64[0];
    v387.i64[1] = __PAIR64__(v385.u32[1], v384.u32[1]);
    v382.i64[0] = vzip2q_s32((int32x4_t)v382, v383).u64[0];
    v382.i64[1] = __PAIR64__(v385.u32[2], v384.u32[2]);
    float32x4_t v388 = vaddq_f32(v382, vaddq_f32(v386, v387));
    uint64_t v389 = v1348;
    float32x4_t v390 = vld1q_dup_f32(v389);
    int32x4_t v391 = vcgeq_f32(v388, v390);
    int32x4_t v392 = (int32x4_t)vmvnq_s8((int8x16_t)v391);
    *(int16x4_t *)v392.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v392), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v392.i8))
    {
      float32x4_t v359 = 0uLL;
      if (!v1497) {
        goto LABEL_214;
      }
    }
    else
    {
      v392.i32[0] = 0;
      int8x16_t v1384 = (int8x16_t)v391;
      float32x4_t v1392 = v360;
      v391.i32[0] = v7 & 0x4000000;
      int8x16_t v393 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v391, v392), 0);
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1376 = (float32x4_t)vbslq_s8(v393, _Q1, (int8x16_t)v359);
      float v395 = *(float *)(v5 + 12956);
      float32x4_t v1552 = v24;
      float32x4_t v1568 = v23;
      float32x4_t v1536 = v25;
      float32x4_t v1520 = v26;
      float32x4_t v1480 = v388;
      float32x4_t v1429 = v358;
      float32x4_t v1401 = v361;
      float32x4_t v1415 = v362;
      unsigned int v1369 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(v5 + 560))(a1));
      unsigned int v1362 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1480.f32[1], v395));
      unsigned int v1355 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1480.f32[2], v395));
      *(float *)&unsigned int v396 = (*(float (**)(float, float))(v5 + 560))(v1480.f32[3], v395);
      float32x4_t v360 = v1392;
      float32x4_t v361 = v1401;
      float32x4_t v362 = v1415;
      float32x4_t v358 = v1429;
      float32x4_t v22 = v1512;
      float32x4_t v26 = v1520;
      float32x4_t v25 = v1536;
      float32x4_t v24 = v1552;
      float32x4_t v23 = v1568;
      unsigned int v17 = v1514;
      v397.i64[0] = __PAIR64__(v1362, v1369);
      v397.i64[1] = __PAIR64__(v396, v1355);
      float32x4_t v359 = vmulq_f32(v1376, (float32x4_t)vandq_s8(v397, v1384));
      if (!v1497) {
        goto LABEL_214;
      }
    }
LABEL_210:
    if (v359.f32[0] <= 0.0 && v359.f32[1] <= 0.0 && v359.f32[2] <= 0.0 && v359.f32[3] <= 0.0) {
      goto LABEL_227;
    }
LABEL_214:
    if (v1586)
    {
      if ((v7 & 0x200) != 0)
      {
        float32x4_t v402 = *(float32x4_t *)(v5 + 12864);
        float32x4_t v398 = vmulq_f32(v402, v4[13]);
        float32x4_t v399 = vmulq_f32(v402, v10[13]);
        float32x4_t v400 = vmulq_f32(v402, v11[13]);
        float32x4_t v401 = vmulq_f32(v402, v12[13]);
      }
      else
      {
        float32x4_t v398 = v14[11];
        float32x4_t v399 = v15[11];
        float32x4_t v400 = v16[11];
        float32x4_t v401 = v17[11];
      }
    }
    else
    {
      float32x4_t v401 = 0uLL;
      float32x4_t v400 = 0uLL;
      float32x4_t v399 = 0uLL;
      float32x4_t v398 = 0uLL;
    }
    float32x4_t v403 = vmulq_f32(v354, v358);
    int32x4_t v404 = (int32x4_t)vmulq_f32(v355, v360);
    float32x4_t v405 = vmulq_f32(v356, v361);
    float32x4_t v406 = vmulq_f32(v357, v362);
    v407.i64[0] = vzip1q_s32((int32x4_t)v403, v404).u64[0];
    v407.i64[1] = __PAIR64__(v406.u32[0], v405.u32[0]);
    v408.i64[0] = vtrn2q_s32((int32x4_t)v403, v404).u64[0];
    v408.i64[1] = __PAIR64__(v406.u32[1], v405.u32[1]);
    v403.i64[0] = vzip2q_s32((int32x4_t)v403, v404).u64[0];
    v403.i64[1] = __PAIR64__(v406.u32[2], v405.u32[2]);
    float32x4_t v409 = vaddq_f32(v403, vaddq_f32(v407, v408));
    if (v409.f32[0] <= 0.0 && v409.f32[1] <= 0.0 && v409.f32[2] <= 0.0 && v409.f32[3] <= 0.0)
    {
      if (v1586)
      {
        if (v1497)
        {
          float32x4_t v398 = vmulq_n_f32(v398, v359.f32[0]);
          float32x4_t v399 = vmulq_lane_f32(v399, *(float32x2_t *)v359.f32, 1);
          float32x4_t v400 = vmulq_laneq_f32(v400, v359, 2);
          float32x4_t v401 = vmulq_laneq_f32(v401, v359, 3);
        }
        float32x4_t v23 = vaddq_f32(v23, v398);
        float32x4_t v24 = vaddq_f32(v24, v399);
        float32x4_t v25 = vaddq_f32(v25, v400);
        float32x4_t v26 = vaddq_f32(v26, v401);
      }
LABEL_227:
      if ((v7 & 8) == 0) {
        goto LABEL_351;
      }
      goto LABEL_228;
    }
    if ((v7 & 0x400) != 0)
    {
      float32x4_t v475 = *(float32x4_t *)(v5 + 12880);
      float32x4_t v432 = vmulq_f32(v475, v4[13]);
      float32x4_t v433 = vmulq_f32(v475, v10[13]);
      float32x4_t v434 = vmulq_f32(v475, v11[13]);
      float32x4_t v435 = vmulq_f32(v475, v12[13]);
    }
    else
    {
      float32x4_t v432 = v14[12];
      float32x4_t v433 = v15[12];
      float32x4_t v434 = v16[12];
      float32x4_t v435 = v17[12];
    }
    float32x4_t v476 = vmulq_n_f32(v432, fmaxf(v409.f32[0], 0.0));
    float32x4_t v477 = vmulq_n_f32(v433, fmaxf(v409.f32[1], 0.0));
    float32x4_t v478 = vmulq_n_f32(v434, fmaxf(v409.f32[2], 0.0));
    float32x4_t v479 = vmulq_n_f32(v435, fmaxf(v409.f32[3], 0.0));
    if (v1586)
    {
      float32x4_t v476 = vaddq_f32(v398, v476);
      float32x4_t v477 = vaddq_f32(v399, v477);
      float32x4_t v478 = vaddq_f32(v400, v478);
      float32x4_t v479 = vaddq_f32(v401, v479);
    }
    float32x4_t v1465 = v477;
    float32x4_t v1482 = v476;
    float32x4_t v1448 = v479;
    float32x4_t v1456 = v478;
    if ((v6 & 0x20) != 0)
    {
      float32x4_t v493 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v354, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v354, 0xCuLL)));
      int32x4_t v494 = (int32x4_t)vmlsq_f32(vmulq_f32(v493, v358), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v358, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v358, 0xCuLL))), v354);
      int32x4_t v495 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v494, 0xCuLL);
      float32x4_t v496 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v355, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v355, 0xCuLL)));
      float32x4_t v497 = vmlsq_f32(vmulq_f32(v496, v360), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v360, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v360, 0xCuLL))), v355);
      int32x4_t v498 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v497, 0xCuLL);
      float32x4_t v499 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v356, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v356, 0xCuLL)));
      int32x4_t v500 = (int32x4_t)vmlsq_f32(vmulq_f32(v499, v361), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v361, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v361, 0xCuLL))), v356);
      int32x4_t v501 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v500, 0xCuLL);
      float32x4_t v502 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v357, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v357, 0xCuLL)));
      int32x4_t v503 = (int32x4_t)vmlsq_f32(vmulq_f32(v502, v362), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v362, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v362, 0xCuLL))), v357);
      int32x4_t v504 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v503, 0xCuLL);
      int32x4_t v505 = (int32x4_t)vmlsq_f32(vmulq_f32(v493, (float32x4_t)vrev64q_s32(vuzp1q_s32(v494, v495))), (float32x4_t)vextq_s8((int8x16_t)v495, (int8x16_t)vrev64q_s32(v495), 8uLL), v354);
      int32x4_t v506 = (int32x4_t)vmlsq_f32(vmulq_f32(v496, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v497, v498))), (float32x4_t)vextq_s8((int8x16_t)v498, (int8x16_t)vrev64q_s32(v498), 8uLL), v355);
      int32x4_t v507 = (int32x4_t)vmlsq_f32(vmulq_f32(v499, (float32x4_t)vrev64q_s32(vuzp1q_s32(v500, v501))), (float32x4_t)vextq_s8((int8x16_t)v501, (int8x16_t)vrev64q_s32(v501), 8uLL), v356);
      int32x4_t v508 = (int32x4_t)vmlsq_f32(vmulq_f32(v502, (float32x4_t)vrev64q_s32(vuzp1q_s32(v503, v504))), (float32x4_t)vextq_s8((int8x16_t)v504, (int8x16_t)vrev64q_s32(v504), 8uLL), v357);
      v497.i64[0] = 0x4000000040000000;
      v497.i64[1] = 0x4000000040000000;
      float32x4_t v509 = vmlaq_f32(v358, v497, (float32x4_t)vrev64q_s32(vuzp1q_s32(v505, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v505, 0xCuLL))));
      float32x4_t v510 = vmlaq_f32(v360, v497, (float32x4_t)vrev64q_s32(vuzp1q_s32(v506, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v506, 0xCuLL))));
      float32x4_t v511 = vmlaq_f32(v361, v497, (float32x4_t)vrev64q_s32(vuzp1q_s32(v507, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v507, 0xCuLL))));
      float32x4_t v512 = vmlaq_f32(v362, v497, (float32x4_t)vrev64q_s32(vuzp1q_s32(v508, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v508, 0xCuLL))));
      if ((v6 & 8) != 0)
      {
        float32x4_t v535 = vmulq_f32(v1584, v1584);
        int32x4_t v536 = (int32x4_t)vmulq_f32(v1580, v1580);
        float32x4_t v537 = vmulq_f32(v1582, v1582);
        float32x4_t v538 = vmulq_f32(v22, v22);
        v539.i64[0] = vzip1q_s32((int32x4_t)v535, v536).u64[0];
        v539.i64[1] = __PAIR64__(v538.u32[0], v537.u32[0]);
        v540.i64[0] = vtrn2q_s32((int32x4_t)v535, v536).u64[0];
        v540.i64[1] = __PAIR64__(v538.u32[1], v537.u32[1]);
        v535.i64[0] = vzip2q_s32((int32x4_t)v535, v536).u64[0];
        v535.i64[1] = __PAIR64__(v538.u32[2], v537.u32[2]);
        __asm { FMOV            V7.4S, #1.0 }
        float32x4_t v542 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v535, vaddq_f32(v539, v540))));
        float32x4_t v543 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1584), v542.f32[0]), v509);
        int32x4_t v544 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v542.f32, 1), v510);
        float32x4_t v545 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1582), v542, 2), v511);
        float32x4_t v546 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v22), v542, 3), v512);
        v537.i64[0] = vzip1q_s32((int32x4_t)v543, v544).u64[0];
        v537.i64[1] = __PAIR64__(v546.u32[0], v545.u32[0]);
        v538.i64[0] = vtrn2q_s32((int32x4_t)v543, v544).u64[0];
        v538.i64[1] = __PAIR64__(v546.u32[1], v545.u32[1]);
        v543.i64[0] = vzip2q_s32((int32x4_t)v543, v544).u64[0];
        v543.i64[1] = __PAIR64__(v546.u32[2], v545.u32[2]);
        float32x4_t v513 = vaddq_f32(v543, vaddq_f32(v537, v538));
      }
      else
      {
        v513.i64[0] = vzip2q_s32((int32x4_t)v509, (int32x4_t)v510).u64[0];
        v513.i64[1] = __PAIR64__(v512.u32[2], v511.u32[2]);
      }
      float32x4_t v479 = v1448;
      float32x4_t v478 = v1456;
      float v9 = 1.0;
    }
    else
    {
      if (v1326)
      {
        if ((v6 & 8) != 0)
        {
          float32x4_t v567 = vmulq_f32(v1584, v1584);
          int32x4_t v568 = (int32x4_t)vmulq_f32(v1580, v1580);
          float32x4_t v569 = vmulq_f32(v1582, v1582);
          v570.i64[0] = vzip1q_s32((int32x4_t)v567, v568).u64[0];
          v570.i32[2] = v569.i32[0];
          float32x4_t v571 = vmulq_f32(v22, v22);
          v570.i32[3] = v571.i32[0];
          v572.i64[0] = vtrn2q_s32((int32x4_t)v567, v568).u64[0];
          v572.i64[1] = __PAIR64__(v571.u32[1], v569.u32[1]);
          v567.i64[0] = vzip2q_s32((int32x4_t)v567, v568).u64[0];
          v567.i64[1] = __PAIR64__(v571.u32[2], v569.u32[2]);
          __asm { FMOV            V16.4S, #1.0 }
          float32x4_t v574 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v567, vaddq_f32(v570, v572))));
          float32x4_t v480 = vmulq_n_f32(vnegq_f32(v1584), v574.f32[0]);
          float32x4_t v481 = vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v574.f32, 1);
          float32x4_t v482 = vmulq_laneq_f32(vnegq_f32(v1582), v574, 2);
          float32x4_t v483 = vmulq_laneq_f32(vnegq_f32(v22), v574, 3);
        }
        else
        {
          float32x4_t v480 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v481 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v482 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v483 = (float32x4_t)xmmword_227DC2100;
        }
        float32x4_t v575 = vaddq_f32(v358, v480);
        float32x4_t v576 = vaddq_f32(v360, v481);
        float32x4_t v577 = vaddq_f32(v361, v482);
        float32x4_t v578 = vaddq_f32(v362, v483);
        float32x4_t v579 = vmulq_f32(v575, v575);
        int32x4_t v580 = (int32x4_t)vmulq_f32(v576, v576);
        float32x4_t v581 = vmulq_f32(v577, v577);
        v582.i64[0] = vzip1q_s32((int32x4_t)v579, v580).u64[0];
        v582.i32[2] = v581.i32[0];
        float32x4_t v583 = vmulq_f32(v578, v578);
        v582.i32[3] = v583.i32[0];
        v584.i64[0] = vtrn2q_s32((int32x4_t)v579, v580).u64[0];
        v584.i64[1] = __PAIR64__(v583.u32[1], v581.u32[1]);
        v579.i64[0] = vzip2q_s32((int32x4_t)v579, v580).u64[0];
        v579.i64[1] = __PAIR64__(v583.u32[2], v581.u32[2]);
        __asm { FMOV            V17.4S, #1.0 }
        float32x4_t v586 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v579, vaddq_f32(v582, v584))));
        float32x4_t v559 = vmulq_n_f32(v575, v586.f32[0]);
        float32x4_t v560 = vmulq_lane_f32(v576, *(float32x2_t *)v586.f32, 1);
        float32x4_t v561 = vmulq_laneq_f32(v577, v586, 2);
        float32x4_t v562 = vmulq_laneq_f32(v578, v586, 3);
      }
      else
      {
        float32x4_t v559 = *(float32x4_t *)(v5 + 12992);
        float32x4_t v560 = v559;
        float32x4_t v561 = v559;
        float32x4_t v562 = v559;
      }
      float32x4_t v587 = vmulq_f32(v354, v559);
      int32x4_t v588 = (int32x4_t)vmulq_f32(v355, v560);
      float32x4_t v589 = vmulq_f32(v356, v561);
      float32x4_t v590 = vmulq_f32(v357, v562);
      v591.i64[0] = vzip1q_s32((int32x4_t)v587, v588).u64[0];
      v591.i64[1] = __PAIR64__(v590.u32[0], v589.u32[0]);
      v592.i64[0] = vtrn2q_s32((int32x4_t)v587, v588).u64[0];
      v592.i64[1] = __PAIR64__(v590.u32[1], v589.u32[1]);
      v587.i64[0] = vzip2q_s32((int32x4_t)v587, v588).u64[0];
      v587.i64[1] = __PAIR64__(v590.u32[2], v589.u32[2]);
      float32x4_t v513 = vaddq_f32(v587, vaddq_f32(v591, v592));
    }
    if (v409.f32[0] <= 0.0) {
      float v593 = 0.0;
    }
    else {
      float v593 = v513.f32[0];
    }
    if (v409.f32[1] <= 0.0) {
      float v594 = 0.0;
    }
    else {
      float v594 = v513.f32[1];
    }
    if (v409.f32[2] <= 0.0) {
      float v595 = 0.0;
    }
    else {
      float v595 = v513.f32[2];
    }
    if (v409.f32[3] <= 0.0) {
      float v596 = 0.0;
    }
    else {
      float v596 = v513.f32[3];
    }
    if (v593 > 0.0 || v594 > 0.0 || v595 > 0.0 || v596 > 0.0)
    {
      float32x4_t v1440 = v359;
      float32x4_t v1522 = v26;
      float32x4_t v1538 = v25;
      float32x4_t v1554 = v24;
      float32x4_t v1570 = v23;
      float v599 = fmaxf(v594, 0.0);
      float v600 = fmaxf(v595, 0.0);
      float v601 = v14[4].f32[0];
      float v602 = v15[4].f32[0];
      float v603 = fmaxf(v596, 0.0);
      float v604 = v16[4].f32[0];
      float v605 = v17[4].f32[0];
      uint64_t v606 = v16;
      uint64_t v607 = v15;
      v608 = v14;
      uint64_t v609 = v17;
      LODWORD(v1431) = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t, float, float))(v5 + 560))(a1, fmaxf(v593, 0.0), v601));
      LODWORD(v1417) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v599, v602));
      LODWORD(v1403) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v600, v604));
      a1 = (*(uint64_t (**)(float, float))(v5 + 560))(v603, v605);
      if ((v7 & 0x800) != 0)
      {
        uint64_t v614 = v606;
        int v611 = v608;
        float32x4_t v617 = *(float32x4_t *)(v5 + 12896);
        float32x4_t v612 = vmulq_f32(v617, v4[13]);
        float32x4_t v613 = vmulq_f32(v617, v10[13]);
        float32x4_t v615 = vmulq_f32(v617, v11[13]);
        float32x4_t v616 = vmulq_f32(v617, v12[13]);
      }
      else
      {
        int v611 = v608;
        float32x4_t v612 = v608[13];
        float32x4_t v613 = v607[13];
        uint64_t v614 = v606;
        float32x4_t v615 = v606[13];
        float32x4_t v616 = v609[13];
      }
      unsigned int v17 = v609;
      uint64_t v15 = v607;
      float32x4_t v359 = v1440;
      float32x4_t v479 = v1448;
      float32x4_t v598 = v1465;
      float32x4_t v597 = v1482;
      float32x4_t v478 = v1456;
      float32x4_t v618 = vmulq_n_f32(v612, v1431);
      float32x4_t v619 = vmulq_n_f32(v613, v1417);
      float32x4_t v620 = vmulq_n_f32(v615, v1403);
      float32x4_t v621 = vmulq_n_f32(v616, v610);
      LOWORD(v6) = v1462;
      float32x4_t v24 = v1554;
      float32x4_t v23 = v1570;
      float32x4_t v25 = v1538;
      float32x4_t v26 = v1522;
      float32x4_t v22 = v1512;
      if ((v1462 & 0x10) != 0)
      {
        int v14 = v611;
        uint64_t v16 = v614;
        if (v1497)
        {
          float32x4_t v618 = vmulq_n_f32(v618, v1440.f32[0]);
          float32x4_t v619 = vmulq_lane_f32(v619, *(float32x2_t *)v1440.f32, 1);
          float32x4_t v620 = vmulq_laneq_f32(v620, v1440, 2);
          float32x4_t v621 = vmulq_laneq_f32(v621, v1440, 3);
        }
        float32x4_t v1507 = vaddq_f32(v1507, v619);
        float32x4_t v1510 = vaddq_f32(v1510, v618);
        float32x4_t v1502 = vaddq_f32(v1502, v621);
        float32x4_t v1504 = vaddq_f32(v1504, v620);
        if (v1497)
        {
LABEL_316:
          float32x4_t v597 = vmulq_n_f32(v597, v359.f32[0]);
          float32x4_t v598 = vmulq_lane_f32(v598, *(float32x2_t *)v359.f32, 1);
          float32x4_t v478 = vmulq_laneq_f32(v478, v359, 2);
          float32x4_t v479 = vmulq_laneq_f32(v479, v359, 3);
        }
      }
      else
      {
        float32x4_t v597 = vaddq_f32(v1482, v618);
        float32x4_t v598 = vaddq_f32(v1465, v619);
        float32x4_t v478 = vaddq_f32(v1456, v620);
        float32x4_t v479 = vaddq_f32(v1448, v621);
        int v14 = v611;
        uint64_t v16 = v614;
        if (v1497) {
          goto LABEL_316;
        }
      }
    }
    else
    {
      float32x4_t v598 = v1465;
      float32x4_t v597 = v1482;
      if (v1497) {
        goto LABEL_316;
      }
    }
    float32x4_t v23 = vaddq_f32(v23, v597);
    float32x4_t v24 = vaddq_f32(v24, v598);
    float32x4_t v25 = vaddq_f32(v25, v478);
    float32x4_t v26 = vaddq_f32(v26, v479);
    if ((v7 & 8) == 0) {
      goto LABEL_351;
    }
LABEL_228:
    float32x4_t v410 = v4[7];
    float32x4_t v411 = v10[7];
    float32x4_t v412 = v11[7];
    float32x4_t v413 = v12[7];
    if ((v6 & 2) != 0)
    {
      float32x4_t v410 = vnegq_f32(v410);
      float32x4_t v411 = vnegq_f32(v411);
      float32x4_t v412 = vnegq_f32(v412);
      float32x4_t v413 = vnegq_f32(v413);
    }
    float32x4_t v414 = *(float32x4_t *)(v5 + 13120);
    float32x4_t v415 = 0uLL;
    if (((unsigned __int16)v6 & 0x800) != 0)
    {
      float32x4_t v419 = vsubq_f32(v414, v1584);
      float32x4_t v420 = vsubq_f32(v414, v1580);
      float32x4_t v421 = vsubq_f32(v414, v1582);
      float32x4_t v422 = vsubq_f32(v414, v22);
      float32x4_t v423 = vmulq_f32(v419, v419);
      int32x4_t v424 = (int32x4_t)vmulq_f32(v420, v420);
      float32x4_t v425 = vmulq_f32(v421, v421);
      v426.i64[0] = vzip1q_s32((int32x4_t)v423, v424).u64[0];
      v426.i32[2] = v425.i32[0];
      float32x4_t v427 = vmulq_f32(v422, v422);
      v426.i32[3] = v427.i32[0];
      v428.i64[0] = vtrn2q_s32((int32x4_t)v423, v424).u64[0];
      v428.i64[1] = __PAIR64__(v427.u32[1], v425.u32[1]);
      v423.i64[0] = vzip2q_s32((int32x4_t)v423, v424).u64[0];
      v423.i64[1] = __PAIR64__(v427.u32[2], v425.u32[2]);
      float32x4_t v429 = vsqrtq_f32(vaddq_f32(v423, vaddq_f32(v426, v428)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v431 = vdivq_f32(_Q0, v429);
      float32x4_t v414 = vmulq_n_f32(v419, v431.f32[0]);
      float32x4_t v416 = vmulq_lane_f32(v420, *(float32x2_t *)v431.f32, 1);
      float32x4_t v417 = vmulq_laneq_f32(v421, v431, 2);
      float32x4_t v418 = vmulq_laneq_f32(v422, v431, 3);
      if ((v7 & 0x8000000) != 0)
      {
        float32x4_t v436 = vdivq_f32(_Q0, v431);
        int v437 = v1338;
        float32x4_t v438 = vld1q_dup_f32(v437);
        unsigned int v439 = v1337;
        float32x4_t v440 = vld1q_dup_f32(v439);
        float32x4_t v415 = vdivq_f32(_Q0, vmlaq_f32(v438, vmlaq_n_f32(v440, v436, *(float *)(v5 + 13112)), v436));
        if ((v7 & 0x80000) == 0)
        {
LABEL_235:
          if (!v1496) {
            goto LABEL_248;
          }
          goto LABEL_244;
        }
      }
      else if ((v7 & 0x80000) == 0)
      {
        goto LABEL_235;
      }
    }
    else
    {
      float32x4_t v416 = *(float32x4_t *)(v5 + 13120);
      float32x4_t v417 = v416;
      float32x4_t v418 = v416;
      if ((v7 & 0x80000) == 0) {
        goto LABEL_235;
      }
    }
    float32x4_t v441 = vnegq_f32(*(float32x4_t *)(v5 + 13136));
    float32x4_t v442 = vmulq_f32(v414, v441);
    int32x4_t v443 = (int32x4_t)vmulq_f32(v416, v441);
    float32x4_t v444 = vmulq_f32(v417, v441);
    float32x4_t v445 = vmulq_f32(v418, v441);
    v446.i64[0] = vzip1q_s32((int32x4_t)v442, v443).u64[0];
    v446.i64[1] = __PAIR64__(v445.u32[0], v444.u32[0]);
    v447.i64[0] = vtrn2q_s32((int32x4_t)v442, v443).u64[0];
    v447.i64[1] = __PAIR64__(v445.u32[1], v444.u32[1]);
    v442.i64[0] = vzip2q_s32((int32x4_t)v442, v443).u64[0];
    v442.i64[1] = __PAIR64__(v445.u32[2], v444.u32[2]);
    float32x4_t v448 = vaddq_f32(v442, vaddq_f32(v446, v447));
    v449 = v1349;
    float32x4_t v450 = vld1q_dup_f32(v449);
    int32x4_t v451 = vcgeq_f32(v448, v450);
    int32x4_t v452 = (int32x4_t)vmvnq_s8((int8x16_t)v451);
    *(int16x4_t *)v452.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v452), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v452.i8))
    {
      float32x4_t v415 = 0uLL;
      if (!v1496) {
        goto LABEL_248;
      }
    }
    else
    {
      v452.i32[0] = 0;
      int8x16_t v1385 = (int8x16_t)v451;
      float32x4_t v1393 = v416;
      v451.i32[0] = v7 & 0x8000000;
      int8x16_t v453 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v451, v452), 0);
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1377 = (float32x4_t)vbslq_s8(v453, _Q1, (int8x16_t)v415);
      float v455 = *(float *)(v5 + 13116);
      float32x4_t v1553 = v24;
      float32x4_t v1569 = v23;
      float32x4_t v1537 = v25;
      float32x4_t v1521 = v26;
      float32x4_t v1481 = v448;
      float32x4_t v1430 = v414;
      float32x4_t v1402 = v417;
      float32x4_t v1416 = v418;
      unsigned int v1370 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(v5 + 560))(a1));
      unsigned int v1363 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1481.f32[1], v455));
      unsigned int v1356 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1481.f32[2], v455));
      *(float *)&unsigned int v456 = (*(float (**)(float, float))(v5 + 560))(v1481.f32[3], v455);
      float32x4_t v416 = v1393;
      float32x4_t v417 = v1402;
      float32x4_t v418 = v1416;
      float32x4_t v414 = v1430;
      float32x4_t v22 = v1512;
      float32x4_t v26 = v1521;
      float32x4_t v25 = v1537;
      float32x4_t v24 = v1553;
      float32x4_t v23 = v1569;
      unsigned int v17 = v1514;
      v457.i64[0] = __PAIR64__(v1363, v1370);
      v457.i64[1] = __PAIR64__(v456, v1356);
      float32x4_t v415 = vmulq_f32(v1377, (float32x4_t)vandq_s8(v457, v1385));
      if (!v1496) {
        goto LABEL_248;
      }
    }
LABEL_244:
    if (v415.f32[0] <= 0.0 && v415.f32[1] <= 0.0 && v415.f32[2] <= 0.0 && v415.f32[3] <= 0.0) {
      goto LABEL_351;
    }
LABEL_248:
    if (v1586)
    {
      if ((v7 & 0x200) != 0)
      {
        float32x4_t v462 = *(float32x4_t *)(v5 + 13024);
        float32x4_t v458 = vmulq_f32(v462, v4[13]);
        float32x4_t v459 = vmulq_f32(v462, v10[13]);
        float32x4_t v460 = vmulq_f32(v462, v11[13]);
        float32x4_t v461 = vmulq_f32(v462, v12[13]);
      }
      else
      {
        float32x4_t v458 = v14[14];
        float32x4_t v459 = v15[14];
        float32x4_t v460 = v16[14];
        float32x4_t v461 = v17[14];
      }
    }
    else
    {
      float32x4_t v461 = 0uLL;
      float32x4_t v460 = 0uLL;
      float32x4_t v459 = 0uLL;
      float32x4_t v458 = 0uLL;
    }
    float32x4_t v463 = vmulq_f32(v410, v414);
    int32x4_t v464 = (int32x4_t)vmulq_f32(v411, v416);
    float32x4_t v465 = vmulq_f32(v412, v417);
    float32x4_t v466 = vmulq_f32(v413, v418);
    v467.i64[0] = vzip1q_s32((int32x4_t)v463, v464).u64[0];
    v467.i64[1] = __PAIR64__(v466.u32[0], v465.u32[0]);
    v468.i64[0] = vtrn2q_s32((int32x4_t)v463, v464).u64[0];
    v468.i64[1] = __PAIR64__(v466.u32[1], v465.u32[1]);
    v463.i64[0] = vzip2q_s32((int32x4_t)v463, v464).u64[0];
    v463.i64[1] = __PAIR64__(v466.u32[2], v465.u32[2]);
    float32x4_t v469 = vaddq_f32(v463, vaddq_f32(v467, v468));
    if (v469.f32[0] > 0.0 || v469.f32[1] > 0.0 || v469.f32[2] > 0.0 || v469.f32[3] > 0.0)
    {
      float32x4_t v470 = v418;
      if ((v7 & 0x400) != 0)
      {
        float32x4_t v484 = *(float32x4_t *)(v5 + 13040);
        float32x4_t v471 = vmulq_f32(v484, v4[13]);
        float32x4_t v472 = vmulq_f32(v484, v10[13]);
        float32x4_t v473 = vmulq_f32(v484, v11[13]);
        float32x4_t v474 = vmulq_f32(v484, v12[13]);
      }
      else
      {
        float32x4_t v471 = v14[15];
        float32x4_t v472 = v15[15];
        float32x4_t v473 = v16[15];
        float32x4_t v474 = v17[15];
      }
      float32x4_t v485 = vmulq_n_f32(v471, fmaxf(v469.f32[0], 0.0));
      float32x4_t v486 = vmulq_n_f32(v472, fmaxf(v469.f32[1], 0.0));
      float32x4_t v487 = vmulq_n_f32(v473, fmaxf(v469.f32[2], 0.0));
      float32x4_t v488 = vmulq_n_f32(v474, fmaxf(v469.f32[3], 0.0));
      if (v1586)
      {
        float32x4_t v485 = vaddq_f32(v458, v485);
        float32x4_t v486 = vaddq_f32(v459, v486);
        float32x4_t v487 = vaddq_f32(v460, v487);
        float32x4_t v488 = vaddq_f32(v461, v488);
      }
      float32x4_t v1466 = v486;
      float32x4_t v1483 = v485;
      float32x4_t v1449 = v488;
      float32x4_t v1457 = v487;
      if ((v6 & 0x20) != 0)
      {
        float32x4_t v514 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v410, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v410, 0xCuLL)));
        int32x4_t v515 = (int32x4_t)vmlsq_f32(vmulq_f32(v514, v414), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v414, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v414, 0xCuLL))), v410);
        int32x4_t v516 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v515, 0xCuLL);
        float32x4_t v517 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v411, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v411, 0xCuLL)));
        float32x4_t v518 = vmlsq_f32(vmulq_f32(v517, v416), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v416, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v416, 0xCuLL))), v411);
        int32x4_t v519 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v518, 0xCuLL);
        float32x4_t v520 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v412, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v412, 0xCuLL)));
        int32x4_t v521 = (int32x4_t)vmlsq_f32(vmulq_f32(v520, v417), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v417, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v417, 0xCuLL))), v412);
        int32x4_t v522 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v521, 0xCuLL);
        float32x4_t v523 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v413, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v413, 0xCuLL)));
        int32x4_t v524 = (int32x4_t)vmlsq_f32(vmulq_f32(v523, v470), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v470, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v470, 0xCuLL))), v413);
        int32x4_t v525 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v524, 0xCuLL);
        int32x4_t v526 = (int32x4_t)vmlsq_f32(vmulq_f32(v514, (float32x4_t)vrev64q_s32(vuzp1q_s32(v515, v516))), (float32x4_t)vextq_s8((int8x16_t)v516, (int8x16_t)vrev64q_s32(v516), 8uLL), v410);
        int32x4_t v527 = (int32x4_t)vmlsq_f32(vmulq_f32(v517, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v518, v519))), (float32x4_t)vextq_s8((int8x16_t)v519, (int8x16_t)vrev64q_s32(v519), 8uLL), v411);
        int32x4_t v528 = (int32x4_t)vmlsq_f32(vmulq_f32(v520, (float32x4_t)vrev64q_s32(vuzp1q_s32(v521, v522))), (float32x4_t)vextq_s8((int8x16_t)v522, (int8x16_t)vrev64q_s32(v522), 8uLL), v412);
        int32x4_t v529 = (int32x4_t)vmlsq_f32(vmulq_f32(v523, (float32x4_t)vrev64q_s32(vuzp1q_s32(v524, v525))), (float32x4_t)vextq_s8((int8x16_t)v525, (int8x16_t)vrev64q_s32(v525), 8uLL), v413);
        v518.i64[0] = 0x4000000040000000;
        v518.i64[1] = 0x4000000040000000;
        float32x4_t v530 = vmlaq_f32(v414, v518, (float32x4_t)vrev64q_s32(vuzp1q_s32(v526, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v526, 0xCuLL))));
        float32x4_t v531 = vmlaq_f32(v416, v518, (float32x4_t)vrev64q_s32(vuzp1q_s32(v527, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v527, 0xCuLL))));
        float32x4_t v532 = vmlaq_f32(v417, v518, (float32x4_t)vrev64q_s32(vuzp1q_s32(v528, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v528, 0xCuLL))));
        float32x4_t v533 = vmlaq_f32(v470, v518, (float32x4_t)vrev64q_s32(vuzp1q_s32(v529, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v529, 0xCuLL))));
        if ((v6 & 8) != 0)
        {
          float32x4_t v547 = vmulq_f32(v1584, v1584);
          int32x4_t v548 = (int32x4_t)vmulq_f32(v1580, v1580);
          float32x4_t v549 = vmulq_f32(v1582, v1582);
          float32x4_t v22 = v1512;
          float32x4_t v550 = vmulq_f32(v22, v22);
          v551.i64[0] = vzip1q_s32((int32x4_t)v547, v548).u64[0];
          v551.i64[1] = __PAIR64__(v550.u32[0], v549.u32[0]);
          v552.i64[0] = vtrn2q_s32((int32x4_t)v547, v548).u64[0];
          v552.i64[1] = __PAIR64__(v550.u32[1], v549.u32[1]);
          v547.i64[0] = vzip2q_s32((int32x4_t)v547, v548).u64[0];
          v547.i64[1] = __PAIR64__(v550.u32[2], v549.u32[2]);
          __asm { FMOV            V7.4S, #1.0 }
          float32x4_t v554 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v547, vaddq_f32(v551, v552))));
          float32x4_t v555 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1584), v554.f32[0]), v530);
          int32x4_t v556 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v554.f32, 1), v531);
          float32x4_t v557 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1582), v554, 2), v532);
          float32x4_t v558 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1512), v554, 3), v533);
          v549.i64[0] = vzip1q_s32((int32x4_t)v555, v556).u64[0];
          v549.i64[1] = __PAIR64__(v558.u32[0], v557.u32[0]);
          v550.i64[0] = vtrn2q_s32((int32x4_t)v555, v556).u64[0];
          v550.i64[1] = __PAIR64__(v558.u32[1], v557.u32[1]);
          v555.i64[0] = vzip2q_s32((int32x4_t)v555, v556).u64[0];
          v555.i64[1] = __PAIR64__(v558.u32[2], v557.u32[2]);
          float32x4_t v534 = vaddq_f32(v555, vaddq_f32(v549, v550));
          float32x4_t v488 = v1449;
          float32x4_t v487 = v1457;
          float v9 = 1.0;
        }
        else
        {
          v534.i64[0] = vzip2q_s32((int32x4_t)v530, (int32x4_t)v531).u64[0];
          v534.i64[1] = __PAIR64__(v533.u32[2], v532.u32[2]);
          float32x4_t v488 = v1449;
          float32x4_t v487 = v1457;
          float v9 = 1.0;
          float32x4_t v22 = v1512;
        }
      }
      else
      {
        if (v1325)
        {
          if ((v6 & 8) != 0)
          {
            float32x4_t v622 = vmulq_f32(v1584, v1584);
            int32x4_t v623 = (int32x4_t)vmulq_f32(v1580, v1580);
            float32x4_t v624 = vmulq_f32(v1582, v1582);
            v625.i64[0] = vzip1q_s32((int32x4_t)v622, v623).u64[0];
            v625.i32[2] = v624.i32[0];
            float32x4_t v626 = vmulq_f32(v1512, v1512);
            v625.i32[3] = v626.i32[0];
            v627.i64[0] = vtrn2q_s32((int32x4_t)v622, v623).u64[0];
            v627.i64[1] = __PAIR64__(v626.u32[1], v624.u32[1]);
            v622.i64[0] = vzip2q_s32((int32x4_t)v622, v623).u64[0];
            v622.i64[1] = __PAIR64__(v626.u32[2], v624.u32[2]);
            __asm { FMOV            V16.4S, #1.0 }
            float32x4_t v629 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v622, vaddq_f32(v625, v627))));
            float32x4_t v489 = vmulq_n_f32(vnegq_f32(v1584), v629.f32[0]);
            float32x4_t v490 = vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v629.f32, 1);
            float32x4_t v491 = vmulq_laneq_f32(vnegq_f32(v1582), v629, 2);
            float32x4_t v492 = vmulq_laneq_f32(vnegq_f32(v1512), v629, 3);
          }
          else
          {
            float32x4_t v489 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v490 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v491 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v492 = (float32x4_t)xmmword_227DC2100;
          }
          float32x4_t v630 = vaddq_f32(v414, v489);
          float32x4_t v631 = vaddq_f32(v416, v490);
          float32x4_t v632 = vaddq_f32(v417, v491);
          float32x4_t v633 = vaddq_f32(v470, v492);
          float32x4_t v634 = vmulq_f32(v630, v630);
          int32x4_t v635 = (int32x4_t)vmulq_f32(v631, v631);
          float32x4_t v636 = vmulq_f32(v632, v632);
          v637.i64[0] = vzip1q_s32((int32x4_t)v634, v635).u64[0];
          v637.i32[2] = v636.i32[0];
          float32x4_t v638 = vmulq_f32(v633, v633);
          v637.i32[3] = v638.i32[0];
          v639.i64[0] = vtrn2q_s32((int32x4_t)v634, v635).u64[0];
          v639.i64[1] = __PAIR64__(v638.u32[1], v636.u32[1]);
          v634.i64[0] = vzip2q_s32((int32x4_t)v634, v635).u64[0];
          v634.i64[1] = __PAIR64__(v638.u32[2], v636.u32[2]);
          __asm { FMOV            V17.4S, #1.0 }
          float32x4_t v641 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v634, vaddq_f32(v637, v639))));
          float32x4_t v563 = vmulq_n_f32(v630, v641.f32[0]);
          float32x4_t v564 = vmulq_lane_f32(v631, *(float32x2_t *)v641.f32, 1);
          float32x4_t v565 = vmulq_laneq_f32(v632, v641, 2);
          float32x4_t v566 = vmulq_laneq_f32(v633, v641, 3);
        }
        else
        {
          float32x4_t v563 = *(float32x4_t *)(v5 + 13152);
          float32x4_t v564 = v563;
          float32x4_t v565 = v563;
          float32x4_t v566 = v563;
        }
        float32x4_t v22 = v1512;
        float32x4_t v642 = vmulq_f32(v410, v563);
        int32x4_t v643 = (int32x4_t)vmulq_f32(v411, v564);
        float32x4_t v644 = vmulq_f32(v412, v565);
        float32x4_t v645 = vmulq_f32(v413, v566);
        v646.i64[0] = vzip1q_s32((int32x4_t)v642, v643).u64[0];
        v646.i64[1] = __PAIR64__(v645.u32[0], v644.u32[0]);
        v647.i64[0] = vtrn2q_s32((int32x4_t)v642, v643).u64[0];
        v647.i64[1] = __PAIR64__(v645.u32[1], v644.u32[1]);
        v642.i64[0] = vzip2q_s32((int32x4_t)v642, v643).u64[0];
        v642.i64[1] = __PAIR64__(v645.u32[2], v644.u32[2]);
        float32x4_t v534 = vaddq_f32(v642, vaddq_f32(v646, v647));
      }
      if (v469.f32[0] <= 0.0) {
        float v648 = 0.0;
      }
      else {
        float v648 = v534.f32[0];
      }
      if (v469.f32[1] <= 0.0) {
        float v649 = 0.0;
      }
      else {
        float v649 = v534.f32[1];
      }
      if (v469.f32[2] <= 0.0) {
        float v650 = 0.0;
      }
      else {
        float v650 = v534.f32[2];
      }
      if (v469.f32[3] <= 0.0) {
        float v651 = 0.0;
      }
      else {
        float v651 = v534.f32[3];
      }
      if (v648 > 0.0 || v649 > 0.0 || v650 > 0.0 || v651 > 0.0)
      {
        float32x4_t v1441 = v415;
        float32x4_t v1523 = v26;
        float32x4_t v1539 = v25;
        float32x4_t v1555 = v24;
        float32x4_t v1571 = v23;
        float v654 = fmaxf(v649, 0.0);
        float v655 = fmaxf(v650, 0.0);
        float v656 = v14[4].f32[0];
        float v657 = v15[4].f32[0];
        float v658 = fmaxf(v651, 0.0);
        float v659 = v16[4].f32[0];
        float v660 = v17[4].f32[0];
        uint64_t v661 = v16;
        int v662 = v15;
        uint64_t v663 = v14;
        uint64_t v664 = v17;
        LODWORD(v1432) = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t, float, float))(v5 + 560))(a1, fmaxf(v648, 0.0), v656));
        LODWORD(v1418) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v654, v657));
        LODWORD(v1404) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v655, v659));
        a1 = (*(uint64_t (**)(float, float))(v5 + 560))(v658, v660);
        if ((v7 & 0x800) != 0)
        {
          uint64_t v669 = v661;
          uint64_t v666 = v663;
          float32x4_t v672 = *(float32x4_t *)(v5 + 13056);
          float32x4_t v667 = vmulq_f32(v672, v4[13]);
          float32x4_t v668 = vmulq_f32(v672, v10[13]);
          float32x4_t v670 = vmulq_f32(v672, v11[13]);
          float32x4_t v671 = vmulq_f32(v672, v12[13]);
        }
        else
        {
          uint64_t v666 = v663;
          float32x4_t v667 = v663[16];
          float32x4_t v668 = v662[16];
          uint64_t v669 = v661;
          float32x4_t v670 = v661[16];
          float32x4_t v671 = v664[16];
        }
        unsigned int v17 = v664;
        uint64_t v15 = v662;
        float32x4_t v415 = v1441;
        float32x4_t v488 = v1449;
        float32x4_t v653 = v1466;
        float32x4_t v652 = v1483;
        float32x4_t v487 = v1457;
        float32x4_t v673 = vmulq_n_f32(v667, v1432);
        float32x4_t v674 = vmulq_n_f32(v668, v1418);
        float32x4_t v675 = vmulq_n_f32(v670, v1404);
        float32x4_t v676 = vmulq_n_f32(v671, v665);
        LOWORD(v6) = v1462;
        float32x4_t v24 = v1555;
        float32x4_t v23 = v1571;
        float32x4_t v25 = v1539;
        float32x4_t v26 = v1523;
        float32x4_t v22 = v1512;
        if ((v1462 & 0x10) != 0)
        {
          int v14 = v666;
          uint64_t v16 = v669;
          if (v1496)
          {
            float32x4_t v673 = vmulq_n_f32(v673, v1441.f32[0]);
            float32x4_t v674 = vmulq_lane_f32(v674, *(float32x2_t *)v1441.f32, 1);
            float32x4_t v675 = vmulq_laneq_f32(v675, v1441, 2);
            float32x4_t v676 = vmulq_laneq_f32(v676, v1441, 3);
          }
          float32x4_t v1507 = vaddq_f32(v1507, v674);
          float32x4_t v1510 = vaddq_f32(v1510, v673);
          float32x4_t v1502 = vaddq_f32(v1502, v676);
          float32x4_t v1504 = vaddq_f32(v1504, v675);
          if (!v1496) {
            goto LABEL_350;
          }
        }
        else
        {
          float32x4_t v652 = vaddq_f32(v1483, v673);
          float32x4_t v653 = vaddq_f32(v1466, v674);
          float32x4_t v487 = vaddq_f32(v1457, v675);
          float32x4_t v488 = vaddq_f32(v1449, v676);
          int v14 = v666;
          uint64_t v16 = v669;
          if (!v1496) {
            goto LABEL_350;
          }
        }
      }
      else
      {
        float32x4_t v653 = v1466;
        float32x4_t v652 = v1483;
        if (!v1496) {
          goto LABEL_350;
        }
      }
      float32x4_t v652 = vmulq_n_f32(v652, v415.f32[0]);
      float32x4_t v653 = vmulq_lane_f32(v653, *(float32x2_t *)v415.f32, 1);
      float32x4_t v487 = vmulq_laneq_f32(v487, v415, 2);
      float32x4_t v488 = vmulq_laneq_f32(v488, v415, 3);
LABEL_350:
      float32x4_t v23 = vaddq_f32(v23, v652);
      float32x4_t v24 = vaddq_f32(v24, v653);
      float32x4_t v25 = vaddq_f32(v25, v487);
      float32x4_t v26 = vaddq_f32(v26, v488);
      goto LABEL_351;
    }
    if (v1586)
    {
      if (v1496)
      {
        float32x4_t v458 = vmulq_n_f32(v458, v415.f32[0]);
        float32x4_t v459 = vmulq_lane_f32(v459, *(float32x2_t *)v415.f32, 1);
        float32x4_t v460 = vmulq_laneq_f32(v460, v415, 2);
        float32x4_t v461 = vmulq_laneq_f32(v461, v415, 3);
      }
      float32x4_t v23 = vaddq_f32(v23, v458);
      float32x4_t v24 = vaddq_f32(v24, v459);
      float32x4_t v25 = vaddq_f32(v25, v460);
      float32x4_t v26 = vaddq_f32(v26, v461);
    }
LABEL_351:
    if ((v7 & 0x10) == 0) {
      goto LABEL_383;
    }
    float32x4_t v677 = v4[7];
    float32x4_t v678 = v10[7];
    float32x4_t v679 = v11[7];
    float32x4_t v680 = v12[7];
    if ((v6 & 2) != 0)
    {
      float32x4_t v677 = vnegq_f32(v677);
      float32x4_t v678 = vnegq_f32(v678);
      float32x4_t v679 = vnegq_f32(v679);
      float32x4_t v680 = vnegq_f32(v680);
    }
    float32x4_t v681 = *(float32x4_t *)(v5 + 13280);
    float32x4_t v682 = 0uLL;
    if (((unsigned __int16)v6 & 0x1000) != 0)
    {
      float32x4_t v686 = vsubq_f32(v681, v1584);
      float32x4_t v687 = vsubq_f32(v681, v1580);
      float32x4_t v688 = vsubq_f32(v681, v1582);
      float32x4_t v689 = vsubq_f32(v681, v22);
      float32x4_t v690 = vmulq_f32(v686, v686);
      int32x4_t v691 = (int32x4_t)vmulq_f32(v687, v687);
      float32x4_t v692 = vmulq_f32(v688, v688);
      v693.i64[0] = vzip1q_s32((int32x4_t)v690, v691).u64[0];
      v693.i32[2] = v692.i32[0];
      float32x4_t v694 = vmulq_f32(v689, v689);
      v693.i32[3] = v694.i32[0];
      v695.i64[0] = vtrn2q_s32((int32x4_t)v690, v691).u64[0];
      v695.i64[1] = __PAIR64__(v694.u32[1], v692.u32[1]);
      v690.i64[0] = vzip2q_s32((int32x4_t)v690, v691).u64[0];
      v690.i64[1] = __PAIR64__(v694.u32[2], v692.u32[2]);
      float32x4_t v696 = vsqrtq_f32(vaddq_f32(v690, vaddq_f32(v693, v695)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v698 = vdivq_f32(_Q0, v696);
      float32x4_t v681 = vmulq_n_f32(v686, v698.f32[0]);
      float32x4_t v683 = vmulq_lane_f32(v687, *(float32x2_t *)v698.f32, 1);
      float32x4_t v684 = vmulq_laneq_f32(v688, v698, 2);
      float32x4_t v685 = vmulq_laneq_f32(v689, v698, 3);
      if ((v7 & 0x10000000) != 0)
      {
        float32x4_t v699 = vdivq_f32(_Q0, v698);
        uint64_t v700 = v1340;
        float32x4_t v701 = vld1q_dup_f32(v700);
        uint64_t v702 = v1339;
        float32x4_t v703 = vld1q_dup_f32(v702);
        float32x4_t v682 = vdivq_f32(_Q0, vmlaq_f32(v701, vmlaq_n_f32(v703, v699, *(float *)(v5 + 13272)), v699));
        if ((v7 & 0x100000) == 0)
        {
LABEL_359:
          if (!v1495) {
            goto LABEL_370;
          }
          goto LABEL_366;
        }
      }
      else if ((v7 & 0x100000) == 0)
      {
        goto LABEL_359;
      }
    }
    else
    {
      float32x4_t v683 = *(float32x4_t *)(v5 + 13280);
      float32x4_t v684 = v683;
      float32x4_t v685 = v683;
      if ((v7 & 0x100000) == 0) {
        goto LABEL_359;
      }
    }
    float32x4_t v704 = vnegq_f32(*(float32x4_t *)(v5 + 13296));
    float32x4_t v705 = vmulq_f32(v681, v704);
    int32x4_t v706 = (int32x4_t)vmulq_f32(v683, v704);
    float32x4_t v707 = vmulq_f32(v684, v704);
    float32x4_t v708 = vmulq_f32(v685, v704);
    v709.i64[0] = vzip1q_s32((int32x4_t)v705, v706).u64[0];
    v709.i64[1] = __PAIR64__(v708.u32[0], v707.u32[0]);
    v710.i64[0] = vtrn2q_s32((int32x4_t)v705, v706).u64[0];
    v710.i64[1] = __PAIR64__(v708.u32[1], v707.u32[1]);
    v705.i64[0] = vzip2q_s32((int32x4_t)v705, v706).u64[0];
    v705.i64[1] = __PAIR64__(v708.u32[2], v707.u32[2]);
    float32x4_t v711 = vaddq_f32(v705, vaddq_f32(v709, v710));
    BOOL v712 = v1350;
    float32x4_t v713 = vld1q_dup_f32(v712);
    int32x4_t v714 = vcgeq_f32(v711, v713);
    int32x4_t v715 = (int32x4_t)vmvnq_s8((int8x16_t)v714);
    *(int16x4_t *)v715.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v715), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v715.i8))
    {
      float32x4_t v682 = 0uLL;
      if (!v1495) {
        goto LABEL_370;
      }
    }
    else
    {
      v715.i32[0] = 0;
      int8x16_t v1386 = (int8x16_t)v714;
      v714.i32[0] = v7 & 0x10000000;
      int8x16_t v716 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v714, v715), 0);
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1378 = (float32x4_t)vbslq_s8(v716, _Q1, (int8x16_t)v682);
      float v718 = *(float *)(v5 + 13276);
      float32x4_t v1556 = v24;
      float32x4_t v1572 = v23;
      float32x4_t v1540 = v25;
      float32x4_t v1524 = v26;
      float32x4_t v1405 = v684;
      float32x4_t v1419 = v681;
      float32x4_t v1467 = v685;
      float32x4_t v1484 = v711;
      float32x4_t v1394 = v683;
      unsigned int v1371 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(v5 + 560))(a1));
      unsigned int v1364 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1484.f32[1], v718));
      unsigned int v1357 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1484.f32[2], v718));
      *(float *)&unsigned int v719 = (*(float (**)(float, float))(v5 + 560))(v1484.f32[3], v718);
      float32x4_t v683 = v1394;
      float32x4_t v684 = v1405;
      float32x4_t v685 = v1467;
      float32x4_t v681 = v1419;
      float32x4_t v22 = v1512;
      float32x4_t v26 = v1524;
      float32x4_t v25 = v1540;
      float32x4_t v24 = v1556;
      float32x4_t v23 = v1572;
      unsigned int v17 = v1514;
      v720.i64[0] = __PAIR64__(v1364, v1371);
      v720.i64[1] = __PAIR64__(v719, v1357);
      float32x4_t v682 = vmulq_f32(v1378, (float32x4_t)vandq_s8(v720, v1386));
      if (!v1495) {
        goto LABEL_370;
      }
    }
LABEL_366:
    if (v682.f32[0] <= 0.0 && v682.f32[1] <= 0.0 && v682.f32[2] <= 0.0 && v682.f32[3] <= 0.0) {
      goto LABEL_383;
    }
LABEL_370:
    if (v1586)
    {
      if ((v7 & 0x200) != 0)
      {
        float32x4_t v725 = *(float32x4_t *)(v5 + 13184);
        float32x4_t v721 = vmulq_f32(v725, v4[13]);
        float32x4_t v722 = vmulq_f32(v725, v10[13]);
        float32x4_t v723 = vmulq_f32(v725, v11[13]);
        float32x4_t v724 = vmulq_f32(v725, v12[13]);
      }
      else
      {
        float32x4_t v721 = v14[17];
        float32x4_t v722 = v15[17];
        float32x4_t v723 = v16[17];
        float32x4_t v724 = v17[17];
      }
    }
    else
    {
      float32x4_t v724 = 0uLL;
      float32x4_t v723 = 0uLL;
      float32x4_t v722 = 0uLL;
      float32x4_t v721 = 0uLL;
    }
    float32x4_t v726 = vmulq_f32(v677, v681);
    int32x4_t v727 = (int32x4_t)vmulq_f32(v678, v683);
    float32x4_t v728 = vmulq_f32(v679, v684);
    float32x4_t v729 = vmulq_f32(v680, v685);
    v730.i64[0] = vzip1q_s32((int32x4_t)v726, v727).u64[0];
    v730.i64[1] = __PAIR64__(v729.u32[0], v728.u32[0]);
    v731.i64[0] = vtrn2q_s32((int32x4_t)v726, v727).u64[0];
    v731.i64[1] = __PAIR64__(v729.u32[1], v728.u32[1]);
    v726.i64[0] = vzip2q_s32((int32x4_t)v726, v727).u64[0];
    v726.i64[1] = __PAIR64__(v729.u32[2], v728.u32[2]);
    float32x4_t v732 = vaddq_f32(v726, vaddq_f32(v730, v731));
    if (v732.f32[0] <= 0.0 && v732.f32[1] <= 0.0 && v732.f32[2] <= 0.0 && v732.f32[3] <= 0.0)
    {
      if (v1586)
      {
        if (v1495)
        {
          float32x4_t v721 = vmulq_n_f32(v721, v682.f32[0]);
          float32x4_t v722 = vmulq_lane_f32(v722, *(float32x2_t *)v682.f32, 1);
          float32x4_t v723 = vmulq_laneq_f32(v723, v682, 2);
          float32x4_t v724 = vmulq_laneq_f32(v724, v682, 3);
        }
        float32x4_t v23 = vaddq_f32(v23, v721);
        float32x4_t v24 = vaddq_f32(v24, v722);
        float32x4_t v25 = vaddq_f32(v25, v723);
        float32x4_t v26 = vaddq_f32(v26, v724);
      }
LABEL_383:
      if ((v7 & 0x20) == 0) {
        goto LABEL_508;
      }
      goto LABEL_384;
    }
    float32x4_t v1468 = v685;
    if ((v7 & 0x400) != 0)
    {
      float32x4_t v797 = *(float32x4_t *)(v5 + 13200);
      float32x4_t v755 = vmulq_f32(v797, v4[13]);
      float32x4_t v756 = vmulq_f32(v797, v10[13]);
      float32x4_t v757 = vmulq_f32(v797, v11[13]);
      float32x4_t v758 = vmulq_f32(v797, v12[13]);
    }
    else
    {
      float32x4_t v755 = v14[18];
      float32x4_t v756 = v15[18];
      float32x4_t v757 = v16[18];
      float32x4_t v758 = v17[18];
    }
    float32x4_t v798 = vmulq_n_f32(v755, fmaxf(v732.f32[0], 0.0));
    float32x4_t v799 = vmulq_n_f32(v756, fmaxf(v732.f32[1], 0.0));
    float32x4_t v800 = vmulq_n_f32(v757, fmaxf(v732.f32[2], 0.0));
    float32x4_t v801 = vmulq_n_f32(v758, fmaxf(v732.f32[3], 0.0));
    if (v1586)
    {
      float32x4_t v798 = vaddq_f32(v721, v798);
      float32x4_t v799 = vaddq_f32(v722, v799);
      float32x4_t v800 = vaddq_f32(v723, v800);
      float32x4_t v801 = vaddq_f32(v724, v801);
    }
    float32x4_t v1486 = v798;
    float32x4_t v1450 = v800;
    float32x4_t v1458 = v799;
    float32x4_t v1442 = v801;
    if ((v6 & 0x20) != 0)
    {
      float32x4_t v815 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v677, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v677, 0xCuLL)));
      int32x4_t v816 = (int32x4_t)vmlsq_f32(vmulq_f32(v815, v681), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v681, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v681, 0xCuLL))), v677);
      int32x4_t v817 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v816, 0xCuLL);
      float32x4_t v818 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v678, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v678, 0xCuLL)));
      float32x4_t v819 = vmlsq_f32(vmulq_f32(v818, v683), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v683, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v683, 0xCuLL))), v678);
      int32x4_t v820 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v819, 0xCuLL);
      float32x4_t v821 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v679, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v679, 0xCuLL)));
      int32x4_t v822 = (int32x4_t)vmlsq_f32(vmulq_f32(v821, v684), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v684, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v684, 0xCuLL))), v679);
      int32x4_t v823 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v822, 0xCuLL);
      float32x4_t v824 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v680, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v680, 0xCuLL)));
      int32x4_t v825 = (int32x4_t)vmlsq_f32(vmulq_f32(v824, v1468), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1468, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1468, 0xCuLL))), v680);
      int32x4_t v826 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v825, 0xCuLL);
      int32x4_t v827 = (int32x4_t)vmlsq_f32(vmulq_f32(v815, (float32x4_t)vrev64q_s32(vuzp1q_s32(v816, v817))), (float32x4_t)vextq_s8((int8x16_t)v817, (int8x16_t)vrev64q_s32(v817), 8uLL), v677);
      int32x4_t v828 = (int32x4_t)vmlsq_f32(vmulq_f32(v818, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v819, v820))), (float32x4_t)vextq_s8((int8x16_t)v820, (int8x16_t)vrev64q_s32(v820), 8uLL), v678);
      int32x4_t v829 = (int32x4_t)vmlsq_f32(vmulq_f32(v821, (float32x4_t)vrev64q_s32(vuzp1q_s32(v822, v823))), (float32x4_t)vextq_s8((int8x16_t)v823, (int8x16_t)vrev64q_s32(v823), 8uLL), v679);
      int32x4_t v830 = (int32x4_t)vmlsq_f32(vmulq_f32(v824, (float32x4_t)vrev64q_s32(vuzp1q_s32(v825, v826))), (float32x4_t)vextq_s8((int8x16_t)v826, (int8x16_t)vrev64q_s32(v826), 8uLL), v680);
      v819.i64[0] = 0x4000000040000000;
      v819.i64[1] = 0x4000000040000000;
      float32x4_t v831 = vmlaq_f32(v681, v819, (float32x4_t)vrev64q_s32(vuzp1q_s32(v827, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v827, 0xCuLL))));
      float32x4_t v832 = vmlaq_f32(v683, v819, (float32x4_t)vrev64q_s32(vuzp1q_s32(v828, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v828, 0xCuLL))));
      float32x4_t v833 = vmlaq_f32(v684, v819, (float32x4_t)vrev64q_s32(vuzp1q_s32(v829, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v829, 0xCuLL))));
      float32x4_t v834 = vmlaq_f32(v1468, v819, (float32x4_t)vrev64q_s32(vuzp1q_s32(v830, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v830, 0xCuLL))));
      if ((v6 & 8) != 0)
      {
        float32x4_t v857 = vmulq_f32(v1584, v1584);
        int32x4_t v858 = (int32x4_t)vmulq_f32(v1580, v1580);
        float32x4_t v859 = vmulq_f32(v1582, v1582);
        float32x4_t v860 = vmulq_f32(v22, v22);
        v861.i64[0] = vzip1q_s32((int32x4_t)v857, v858).u64[0];
        v861.i64[1] = __PAIR64__(v860.u32[0], v859.u32[0]);
        v862.i64[0] = vtrn2q_s32((int32x4_t)v857, v858).u64[0];
        v862.i64[1] = __PAIR64__(v860.u32[1], v859.u32[1]);
        v857.i64[0] = vzip2q_s32((int32x4_t)v857, v858).u64[0];
        v857.i64[1] = __PAIR64__(v860.u32[2], v859.u32[2]);
        __asm { FMOV            V7.4S, #1.0 }
        float32x4_t v864 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v857, vaddq_f32(v861, v862))));
        float32x4_t v865 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1584), v864.f32[0]), v831);
        int32x4_t v866 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v864.f32, 1), v832);
        float32x4_t v867 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1582), v864, 2), v833);
        float32x4_t v868 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v22), v864, 3), v834);
        v859.i64[0] = vzip1q_s32((int32x4_t)v865, v866).u64[0];
        v859.i64[1] = __PAIR64__(v868.u32[0], v867.u32[0]);
        v860.i64[0] = vtrn2q_s32((int32x4_t)v865, v866).u64[0];
        v860.i64[1] = __PAIR64__(v868.u32[1], v867.u32[1]);
        v865.i64[0] = vzip2q_s32((int32x4_t)v865, v866).u64[0];
        v865.i64[1] = __PAIR64__(v868.u32[2], v867.u32[2]);
        float32x4_t v835 = vaddq_f32(v865, vaddq_f32(v859, v860));
      }
      else
      {
        v835.i64[0] = vzip2q_s32((int32x4_t)v831, (int32x4_t)v832).u64[0];
        v835.i64[1] = __PAIR64__(v834.u32[2], v833.u32[2]);
      }
      float32x4_t v801 = v1442;
      float32x4_t v800 = v1450;
      float v9 = 1.0;
    }
    else
    {
      if (v1324)
      {
        if ((v6 & 8) != 0)
        {
          float32x4_t v889 = vmulq_f32(v1584, v1584);
          int32x4_t v890 = (int32x4_t)vmulq_f32(v1580, v1580);
          float32x4_t v891 = vmulq_f32(v1582, v1582);
          v892.i64[0] = vzip1q_s32((int32x4_t)v889, v890).u64[0];
          v892.i32[2] = v891.i32[0];
          float32x4_t v893 = vmulq_f32(v22, v22);
          v892.i32[3] = v893.i32[0];
          v894.i64[0] = vtrn2q_s32((int32x4_t)v889, v890).u64[0];
          v894.i64[1] = __PAIR64__(v893.u32[1], v891.u32[1]);
          v889.i64[0] = vzip2q_s32((int32x4_t)v889, v890).u64[0];
          v889.i64[1] = __PAIR64__(v893.u32[2], v891.u32[2]);
          __asm { FMOV            V16.4S, #1.0 }
          float32x4_t v896 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v889, vaddq_f32(v892, v894))));
          float32x4_t v802 = vmulq_n_f32(vnegq_f32(v1584), v896.f32[0]);
          float32x4_t v803 = vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v896.f32, 1);
          float32x4_t v804 = vmulq_laneq_f32(vnegq_f32(v1582), v896, 2);
          float32x4_t v805 = vmulq_laneq_f32(vnegq_f32(v22), v896, 3);
        }
        else
        {
          float32x4_t v802 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v803 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v804 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v805 = (float32x4_t)xmmword_227DC2100;
        }
        float32x4_t v897 = vaddq_f32(v681, v802);
        float32x4_t v898 = vaddq_f32(v683, v803);
        float32x4_t v899 = vaddq_f32(v684, v804);
        float32x4_t v900 = vaddq_f32(v1468, v805);
        float32x4_t v901 = vmulq_f32(v897, v897);
        int32x4_t v902 = (int32x4_t)vmulq_f32(v898, v898);
        float32x4_t v903 = vmulq_f32(v899, v899);
        v904.i64[0] = vzip1q_s32((int32x4_t)v901, v902).u64[0];
        v904.i32[2] = v903.i32[0];
        float32x4_t v905 = vmulq_f32(v900, v900);
        v904.i32[3] = v905.i32[0];
        v906.i64[0] = vtrn2q_s32((int32x4_t)v901, v902).u64[0];
        v906.i64[1] = __PAIR64__(v905.u32[1], v903.u32[1]);
        v901.i64[0] = vzip2q_s32((int32x4_t)v901, v902).u64[0];
        v901.i64[1] = __PAIR64__(v905.u32[2], v903.u32[2]);
        __asm { FMOV            V17.4S, #1.0 }
        float32x4_t v908 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v901, vaddq_f32(v904, v906))));
        float32x4_t v881 = vmulq_n_f32(v897, v908.f32[0]);
        float32x4_t v882 = vmulq_lane_f32(v898, *(float32x2_t *)v908.f32, 1);
        float32x4_t v883 = vmulq_laneq_f32(v899, v908, 2);
        float32x4_t v884 = vmulq_laneq_f32(v900, v908, 3);
      }
      else
      {
        float32x4_t v881 = *(float32x4_t *)(v5 + 13312);
        float32x4_t v882 = v881;
        float32x4_t v883 = v881;
        float32x4_t v884 = v881;
      }
      float32x4_t v909 = vmulq_f32(v677, v881);
      int32x4_t v910 = (int32x4_t)vmulq_f32(v678, v882);
      float32x4_t v911 = vmulq_f32(v679, v883);
      float32x4_t v912 = vmulq_f32(v680, v884);
      v913.i64[0] = vzip1q_s32((int32x4_t)v909, v910).u64[0];
      v913.i64[1] = __PAIR64__(v912.u32[0], v911.u32[0]);
      v914.i64[0] = vtrn2q_s32((int32x4_t)v909, v910).u64[0];
      v914.i64[1] = __PAIR64__(v912.u32[1], v911.u32[1]);
      v909.i64[0] = vzip2q_s32((int32x4_t)v909, v910).u64[0];
      v909.i64[1] = __PAIR64__(v912.u32[2], v911.u32[2]);
      float32x4_t v835 = vaddq_f32(v909, vaddq_f32(v913, v914));
    }
    if (v732.f32[0] <= 0.0) {
      float v915 = 0.0;
    }
    else {
      float v915 = v835.f32[0];
    }
    if (v732.f32[1] <= 0.0) {
      float v916 = 0.0;
    }
    else {
      float v916 = v835.f32[1];
    }
    if (v732.f32[2] <= 0.0) {
      float v917 = 0.0;
    }
    else {
      float v917 = v835.f32[2];
    }
    if (v732.f32[3] <= 0.0) {
      float v918 = 0.0;
    }
    else {
      float v918 = v835.f32[3];
    }
    if (v915 > 0.0 || v916 > 0.0 || v917 > 0.0 || v918 > 0.0)
    {
      float32x4_t v1471 = v682;
      float32x4_t v1526 = v26;
      float32x4_t v1542 = v25;
      float32x4_t v1558 = v24;
      float32x4_t v1574 = v23;
      float v921 = fmaxf(v916, 0.0);
      float v922 = fmaxf(v917, 0.0);
      float v923 = v14[4].f32[0];
      float v924 = v15[4].f32[0];
      float v925 = fmaxf(v918, 0.0);
      float v926 = v16[4].f32[0];
      float v927 = v17[4].f32[0];
      uint64_t v928 = v16;
      uint64_t v929 = v15;
      v930 = v14;
      v931 = v17;
      LODWORD(v1433) = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t, float, float))(v5 + 560))(a1, fmaxf(v915, 0.0), v923));
      LODWORD(v1421) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v921, v924));
      LODWORD(v1407) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v922, v926));
      a1 = (*(uint64_t (**)(float, float))(v5 + 560))(v925, v927);
      if ((v7 & 0x800) != 0)
      {
        unsigned int v936 = v928;
        int v933 = v930;
        float32x4_t v939 = *(float32x4_t *)(v5 + 13216);
        float32x4_t v934 = vmulq_f32(v939, v4[13]);
        float32x4_t v935 = vmulq_f32(v939, v10[13]);
        float32x4_t v937 = vmulq_f32(v939, v11[13]);
        float32x4_t v938 = vmulq_f32(v939, v12[13]);
      }
      else
      {
        int v933 = v930;
        float32x4_t v934 = v930[19];
        float32x4_t v935 = v929[19];
        unsigned int v936 = v928;
        float32x4_t v937 = v928[19];
        float32x4_t v938 = v931[19];
      }
      unsigned int v17 = v931;
      uint64_t v15 = v929;
      float32x4_t v682 = v1471;
      float32x4_t v919 = v1486;
      float32x4_t v800 = v1450;
      float32x4_t v920 = v1458;
      float32x4_t v801 = v1442;
      float32x4_t v940 = vmulq_n_f32(v934, v1433);
      float32x4_t v941 = vmulq_n_f32(v935, v1421);
      float32x4_t v942 = vmulq_n_f32(v937, v1407);
      float32x4_t v943 = vmulq_n_f32(v938, v932);
      LOWORD(v6) = v1462;
      float32x4_t v24 = v1558;
      float32x4_t v23 = v1574;
      float32x4_t v25 = v1542;
      float32x4_t v26 = v1526;
      float32x4_t v22 = v1512;
      if ((v1462 & 0x10) != 0)
      {
        int v14 = v933;
        uint64_t v16 = v936;
        if (v1495)
        {
          float32x4_t v940 = vmulq_n_f32(v940, v1471.f32[0]);
          float32x4_t v941 = vmulq_lane_f32(v941, *(float32x2_t *)v1471.f32, 1);
          float32x4_t v942 = vmulq_laneq_f32(v942, v1471, 2);
          float32x4_t v943 = vmulq_laneq_f32(v943, v1471, 3);
        }
        float32x4_t v1507 = vaddq_f32(v1507, v941);
        float32x4_t v1510 = vaddq_f32(v1510, v940);
        float32x4_t v1502 = vaddq_f32(v1502, v943);
        float32x4_t v1504 = vaddq_f32(v1504, v942);
        if (v1495)
        {
LABEL_473:
          float32x4_t v919 = vmulq_n_f32(v919, v682.f32[0]);
          float32x4_t v920 = vmulq_lane_f32(v920, *(float32x2_t *)v682.f32, 1);
          float32x4_t v800 = vmulq_laneq_f32(v800, v682, 2);
          float32x4_t v801 = vmulq_laneq_f32(v801, v682, 3);
        }
      }
      else
      {
        float32x4_t v919 = vaddq_f32(v1486, v940);
        float32x4_t v920 = vaddq_f32(v1458, v941);
        float32x4_t v800 = vaddq_f32(v1450, v942);
        float32x4_t v801 = vaddq_f32(v1442, v943);
        int v14 = v933;
        uint64_t v16 = v936;
        if (v1495) {
          goto LABEL_473;
        }
      }
    }
    else
    {
      float32x4_t v919 = v1486;
      float32x4_t v920 = v1458;
      if (v1495) {
        goto LABEL_473;
      }
    }
    float32x4_t v23 = vaddq_f32(v23, v919);
    float32x4_t v24 = vaddq_f32(v24, v920);
    float32x4_t v25 = vaddq_f32(v25, v800);
    float32x4_t v26 = vaddq_f32(v26, v801);
    if ((v7 & 0x20) == 0) {
      goto LABEL_508;
    }
LABEL_384:
    float32x4_t v733 = v4[7];
    float32x4_t v734 = v10[7];
    float32x4_t v735 = v11[7];
    float32x4_t v736 = v12[7];
    if ((v6 & 2) != 0)
    {
      float32x4_t v733 = vnegq_f32(v733);
      float32x4_t v734 = vnegq_f32(v734);
      float32x4_t v735 = vnegq_f32(v735);
      float32x4_t v736 = vnegq_f32(v736);
    }
    float32x4_t v737 = *(float32x4_t *)(v5 + 13440);
    float32x4_t v738 = 0uLL;
    if (((unsigned __int16)v6 & 0x2000) != 0)
    {
      float32x4_t v742 = vsubq_f32(v737, v1584);
      float32x4_t v743 = vsubq_f32(v737, v1580);
      float32x4_t v744 = vsubq_f32(v737, v1582);
      float32x4_t v745 = vsubq_f32(v737, v22);
      float32x4_t v746 = vmulq_f32(v742, v742);
      int32x4_t v747 = (int32x4_t)vmulq_f32(v743, v743);
      float32x4_t v748 = vmulq_f32(v744, v744);
      v749.i64[0] = vzip1q_s32((int32x4_t)v746, v747).u64[0];
      v749.i32[2] = v748.i32[0];
      float32x4_t v750 = vmulq_f32(v745, v745);
      v749.i32[3] = v750.i32[0];
      v751.i64[0] = vtrn2q_s32((int32x4_t)v746, v747).u64[0];
      v751.i64[1] = __PAIR64__(v750.u32[1], v748.u32[1]);
      v746.i64[0] = vzip2q_s32((int32x4_t)v746, v747).u64[0];
      v746.i64[1] = __PAIR64__(v750.u32[2], v748.u32[2]);
      float32x4_t v752 = vsqrtq_f32(vaddq_f32(v746, vaddq_f32(v749, v751)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v754 = vdivq_f32(_Q0, v752);
      float32x4_t v737 = vmulq_n_f32(v742, v754.f32[0]);
      float32x4_t v739 = vmulq_lane_f32(v743, *(float32x2_t *)v754.f32, 1);
      float32x4_t v740 = vmulq_laneq_f32(v744, v754, 2);
      float32x4_t v741 = vmulq_laneq_f32(v745, v754, 3);
      if ((v7 & 0x20000000) != 0)
      {
        float32x4_t v759 = vdivq_f32(_Q0, v754);
        uint64_t v760 = v1342;
        float32x4_t v761 = vld1q_dup_f32(v760);
        uint64_t v762 = v1341;
        float32x4_t v763 = vld1q_dup_f32(v762);
        float32x4_t v738 = vdivq_f32(_Q0, vmlaq_f32(v761, vmlaq_n_f32(v763, v759, *(float *)(v5 + 13432)), v759));
        if ((v7 & 0x200000) == 0)
        {
LABEL_391:
          if (!v1494) {
            goto LABEL_404;
          }
          goto LABEL_400;
        }
      }
      else if ((v7 & 0x200000) == 0)
      {
        goto LABEL_391;
      }
    }
    else
    {
      float32x4_t v739 = *(float32x4_t *)(v5 + 13440);
      float32x4_t v740 = v739;
      float32x4_t v741 = v739;
      if ((v7 & 0x200000) == 0) {
        goto LABEL_391;
      }
    }
    float32x4_t v764 = vnegq_f32(*(float32x4_t *)(v5 + 13456));
    float32x4_t v765 = vmulq_f32(v737, v764);
    int32x4_t v766 = (int32x4_t)vmulq_f32(v739, v764);
    float32x4_t v767 = vmulq_f32(v740, v764);
    float32x4_t v768 = vmulq_f32(v741, v764);
    v769.i64[0] = vzip1q_s32((int32x4_t)v765, v766).u64[0];
    v769.i64[1] = __PAIR64__(v768.u32[0], v767.u32[0]);
    v770.i64[0] = vtrn2q_s32((int32x4_t)v765, v766).u64[0];
    v770.i64[1] = __PAIR64__(v768.u32[1], v767.u32[1]);
    v765.i64[0] = vzip2q_s32((int32x4_t)v765, v766).u64[0];
    v765.i64[1] = __PAIR64__(v768.u32[2], v767.u32[2]);
    float32x4_t v771 = vaddq_f32(v765, vaddq_f32(v769, v770));
    uint64_t v772 = v1351;
    float32x4_t v773 = vld1q_dup_f32(v772);
    int32x4_t v774 = vcgeq_f32(v771, v773);
    int32x4_t v775 = (int32x4_t)vmvnq_s8((int8x16_t)v774);
    *(int16x4_t *)v775.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v775), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v775.i8))
    {
      float32x4_t v738 = 0uLL;
      if (!v1494) {
        goto LABEL_404;
      }
    }
    else
    {
      v775.i32[0] = 0;
      int8x16_t v1387 = (int8x16_t)v774;
      v774.i32[0] = v7 & 0x20000000;
      int8x16_t v776 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v774, v775), 0);
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1379 = (float32x4_t)vbslq_s8(v776, _Q1, (int8x16_t)v738);
      float v778 = *(float *)(v5 + 13436);
      float32x4_t v1557 = v24;
      float32x4_t v1573 = v23;
      float32x4_t v1541 = v25;
      float32x4_t v1525 = v26;
      float32x4_t v1406 = v740;
      float32x4_t v1420 = v737;
      float32x4_t v1469 = v741;
      float32x4_t v1485 = v771;
      float32x4_t v1395 = v739;
      unsigned int v1372 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(v5 + 560))(a1));
      unsigned int v1365 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1485.f32[1], v778));
      unsigned int v1358 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1485.f32[2], v778));
      *(float *)&unsigned int v779 = (*(float (**)(float, float))(v5 + 560))(v1485.f32[3], v778);
      float32x4_t v739 = v1395;
      float32x4_t v740 = v1406;
      float32x4_t v741 = v1469;
      float32x4_t v737 = v1420;
      float32x4_t v22 = v1512;
      float32x4_t v26 = v1525;
      float32x4_t v25 = v1541;
      float32x4_t v24 = v1557;
      float32x4_t v23 = v1573;
      unsigned int v17 = v1514;
      v780.i64[0] = __PAIR64__(v1365, v1372);
      v780.i64[1] = __PAIR64__(v779, v1358);
      float32x4_t v738 = vmulq_f32(v1379, (float32x4_t)vandq_s8(v780, v1387));
      if (!v1494) {
        goto LABEL_404;
      }
    }
LABEL_400:
    if (v738.f32[0] <= 0.0 && v738.f32[1] <= 0.0 && v738.f32[2] <= 0.0 && v738.f32[3] <= 0.0) {
      goto LABEL_508;
    }
LABEL_404:
    if (v1586)
    {
      if ((v7 & 0x200) != 0)
      {
        float32x4_t v785 = *(float32x4_t *)(v5 + 13344);
        float32x4_t v781 = vmulq_f32(v785, v4[13]);
        float32x4_t v782 = vmulq_f32(v785, v10[13]);
        float32x4_t v783 = vmulq_f32(v785, v11[13]);
        float32x4_t v784 = vmulq_f32(v785, v12[13]);
      }
      else
      {
        float32x4_t v781 = v14[20];
        float32x4_t v782 = v15[20];
        float32x4_t v783 = v16[20];
        float32x4_t v784 = v17[20];
      }
    }
    else
    {
      float32x4_t v784 = 0uLL;
      float32x4_t v783 = 0uLL;
      float32x4_t v782 = 0uLL;
      float32x4_t v781 = 0uLL;
    }
    float32x4_t v786 = vmulq_f32(v733, v737);
    int32x4_t v787 = (int32x4_t)vmulq_f32(v734, v739);
    float32x4_t v788 = vmulq_f32(v735, v740);
    float32x4_t v789 = vmulq_f32(v736, v741);
    v790.i64[0] = vzip1q_s32((int32x4_t)v786, v787).u64[0];
    v790.i64[1] = __PAIR64__(v789.u32[0], v788.u32[0]);
    v791.i64[0] = vtrn2q_s32((int32x4_t)v786, v787).u64[0];
    v791.i64[1] = __PAIR64__(v789.u32[1], v788.u32[1]);
    v786.i64[0] = vzip2q_s32((int32x4_t)v786, v787).u64[0];
    v786.i64[1] = __PAIR64__(v789.u32[2], v788.u32[2]);
    float32x4_t v792 = vaddq_f32(v786, vaddq_f32(v790, v791));
    if (v792.f32[0] > 0.0 || v792.f32[1] > 0.0 || v792.f32[2] > 0.0 || v792.f32[3] > 0.0)
    {
      float32x4_t v1470 = v741;
      if ((v7 & 0x400) != 0)
      {
        float32x4_t v806 = *(float32x4_t *)(v5 + 13360);
        float32x4_t v793 = vmulq_f32(v806, v4[13]);
        float32x4_t v794 = vmulq_f32(v806, v10[13]);
        float32x4_t v795 = vmulq_f32(v806, v11[13]);
        float32x4_t v796 = vmulq_f32(v806, v12[13]);
      }
      else
      {
        float32x4_t v793 = v14[21];
        float32x4_t v794 = v15[21];
        float32x4_t v795 = v16[21];
        float32x4_t v796 = v17[21];
      }
      float32x4_t v807 = vmulq_n_f32(v793, fmaxf(v792.f32[0], 0.0));
      float32x4_t v808 = vmulq_n_f32(v794, fmaxf(v792.f32[1], 0.0));
      float32x4_t v809 = vmulq_n_f32(v795, fmaxf(v792.f32[2], 0.0));
      float32x4_t v810 = vmulq_n_f32(v796, fmaxf(v792.f32[3], 0.0));
      if (v1586)
      {
        float32x4_t v807 = vaddq_f32(v781, v807);
        float32x4_t v808 = vaddq_f32(v782, v808);
        float32x4_t v809 = vaddq_f32(v783, v809);
        float32x4_t v810 = vaddq_f32(v784, v810);
      }
      float32x4_t v1487 = v807;
      float32x4_t v1451 = v809;
      float32x4_t v1459 = v808;
      float32x4_t v1443 = v810;
      if ((v6 & 0x20) != 0)
      {
        float32x4_t v836 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v733, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v733, 0xCuLL)));
        int32x4_t v837 = (int32x4_t)vmlsq_f32(vmulq_f32(v836, v737), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v737, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v737, 0xCuLL))), v733);
        int32x4_t v838 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v837, 0xCuLL);
        float32x4_t v839 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v734, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v734, 0xCuLL)));
        float32x4_t v840 = vmlsq_f32(vmulq_f32(v839, v739), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v739, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v739, 0xCuLL))), v734);
        int32x4_t v841 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v840, 0xCuLL);
        float32x4_t v842 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v735, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v735, 0xCuLL)));
        int32x4_t v843 = (int32x4_t)vmlsq_f32(vmulq_f32(v842, v740), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v740, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v740, 0xCuLL))), v735);
        int32x4_t v844 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v843, 0xCuLL);
        float32x4_t v845 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v736, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v736, 0xCuLL)));
        int32x4_t v846 = (int32x4_t)vmlsq_f32(vmulq_f32(v845, v1470), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1470, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1470, 0xCuLL))), v736);
        int32x4_t v847 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v846, 0xCuLL);
        int32x4_t v848 = (int32x4_t)vmlsq_f32(vmulq_f32(v836, (float32x4_t)vrev64q_s32(vuzp1q_s32(v837, v838))), (float32x4_t)vextq_s8((int8x16_t)v838, (int8x16_t)vrev64q_s32(v838), 8uLL), v733);
        int32x4_t v849 = (int32x4_t)vmlsq_f32(vmulq_f32(v839, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v840, v841))), (float32x4_t)vextq_s8((int8x16_t)v841, (int8x16_t)vrev64q_s32(v841), 8uLL), v734);
        int32x4_t v850 = (int32x4_t)vmlsq_f32(vmulq_f32(v842, (float32x4_t)vrev64q_s32(vuzp1q_s32(v843, v844))), (float32x4_t)vextq_s8((int8x16_t)v844, (int8x16_t)vrev64q_s32(v844), 8uLL), v735);
        int32x4_t v851 = (int32x4_t)vmlsq_f32(vmulq_f32(v845, (float32x4_t)vrev64q_s32(vuzp1q_s32(v846, v847))), (float32x4_t)vextq_s8((int8x16_t)v847, (int8x16_t)vrev64q_s32(v847), 8uLL), v736);
        v840.i64[0] = 0x4000000040000000;
        v840.i64[1] = 0x4000000040000000;
        float32x4_t v852 = vmlaq_f32(v737, v840, (float32x4_t)vrev64q_s32(vuzp1q_s32(v848, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v848, 0xCuLL))));
        float32x4_t v853 = vmlaq_f32(v739, v840, (float32x4_t)vrev64q_s32(vuzp1q_s32(v849, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v849, 0xCuLL))));
        float32x4_t v854 = vmlaq_f32(v740, v840, (float32x4_t)vrev64q_s32(vuzp1q_s32(v850, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v850, 0xCuLL))));
        float32x4_t v855 = vmlaq_f32(v1470, v840, (float32x4_t)vrev64q_s32(vuzp1q_s32(v851, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v851, 0xCuLL))));
        if ((v6 & 8) != 0)
        {
          float32x4_t v869 = vmulq_f32(v1584, v1584);
          int32x4_t v870 = (int32x4_t)vmulq_f32(v1580, v1580);
          float32x4_t v871 = vmulq_f32(v1582, v1582);
          float32x4_t v872 = vmulq_f32(v22, v22);
          v873.i64[0] = vzip1q_s32((int32x4_t)v869, v870).u64[0];
          v873.i64[1] = __PAIR64__(v872.u32[0], v871.u32[0]);
          v874.i64[0] = vtrn2q_s32((int32x4_t)v869, v870).u64[0];
          v874.i64[1] = __PAIR64__(v872.u32[1], v871.u32[1]);
          v869.i64[0] = vzip2q_s32((int32x4_t)v869, v870).u64[0];
          v869.i64[1] = __PAIR64__(v872.u32[2], v871.u32[2]);
          __asm { FMOV            V7.4S, #1.0 }
          float32x4_t v876 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v869, vaddq_f32(v873, v874))));
          float32x4_t v877 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1584), v876.f32[0]), v852);
          int32x4_t v878 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v876.f32, 1), v853);
          float32x4_t v879 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1582), v876, 2), v854);
          float32x4_t v880 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v22), v876, 3), v855);
          v871.i64[0] = vzip1q_s32((int32x4_t)v877, v878).u64[0];
          v871.i64[1] = __PAIR64__(v880.u32[0], v879.u32[0]);
          v872.i64[0] = vtrn2q_s32((int32x4_t)v877, v878).u64[0];
          v872.i64[1] = __PAIR64__(v880.u32[1], v879.u32[1]);
          v877.i64[0] = vzip2q_s32((int32x4_t)v877, v878).u64[0];
          v877.i64[1] = __PAIR64__(v880.u32[2], v879.u32[2]);
          float32x4_t v856 = vaddq_f32(v877, vaddq_f32(v871, v872));
        }
        else
        {
          v856.i64[0] = vzip2q_s32((int32x4_t)v852, (int32x4_t)v853).u64[0];
          v856.i64[1] = __PAIR64__(v855.u32[2], v854.u32[2]);
        }
        float32x4_t v810 = v1443;
        float32x4_t v809 = v1451;
        float v9 = 1.0;
      }
      else
      {
        if (v1323)
        {
          if ((v6 & 8) != 0)
          {
            float32x4_t v944 = vmulq_f32(v1584, v1584);
            int32x4_t v945 = (int32x4_t)vmulq_f32(v1580, v1580);
            float32x4_t v946 = vmulq_f32(v1582, v1582);
            v947.i64[0] = vzip1q_s32((int32x4_t)v944, v945).u64[0];
            v947.i32[2] = v946.i32[0];
            float32x4_t v948 = vmulq_f32(v22, v22);
            v947.i32[3] = v948.i32[0];
            v949.i64[0] = vtrn2q_s32((int32x4_t)v944, v945).u64[0];
            v949.i64[1] = __PAIR64__(v948.u32[1], v946.u32[1]);
            v944.i64[0] = vzip2q_s32((int32x4_t)v944, v945).u64[0];
            v944.i64[1] = __PAIR64__(v948.u32[2], v946.u32[2]);
            __asm { FMOV            V16.4S, #1.0 }
            float32x4_t v951 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v944, vaddq_f32(v947, v949))));
            float32x4_t v811 = vmulq_n_f32(vnegq_f32(v1584), v951.f32[0]);
            float32x4_t v812 = vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v951.f32, 1);
            float32x4_t v813 = vmulq_laneq_f32(vnegq_f32(v1582), v951, 2);
            float32x4_t v814 = vmulq_laneq_f32(vnegq_f32(v22), v951, 3);
          }
          else
          {
            float32x4_t v811 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v812 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v813 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v814 = (float32x4_t)xmmword_227DC2100;
          }
          float32x4_t v952 = vaddq_f32(v737, v811);
          float32x4_t v953 = vaddq_f32(v739, v812);
          float32x4_t v954 = vaddq_f32(v740, v813);
          float32x4_t v955 = vaddq_f32(v1470, v814);
          float32x4_t v956 = vmulq_f32(v952, v952);
          int32x4_t v957 = (int32x4_t)vmulq_f32(v953, v953);
          float32x4_t v958 = vmulq_f32(v954, v954);
          v959.i64[0] = vzip1q_s32((int32x4_t)v956, v957).u64[0];
          v959.i32[2] = v958.i32[0];
          float32x4_t v960 = vmulq_f32(v955, v955);
          v959.i32[3] = v960.i32[0];
          v961.i64[0] = vtrn2q_s32((int32x4_t)v956, v957).u64[0];
          v961.i64[1] = __PAIR64__(v960.u32[1], v958.u32[1]);
          v956.i64[0] = vzip2q_s32((int32x4_t)v956, v957).u64[0];
          v956.i64[1] = __PAIR64__(v960.u32[2], v958.u32[2]);
          __asm { FMOV            V17.4S, #1.0 }
          float32x4_t v963 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v956, vaddq_f32(v959, v961))));
          float32x4_t v885 = vmulq_n_f32(v952, v963.f32[0]);
          float32x4_t v886 = vmulq_lane_f32(v953, *(float32x2_t *)v963.f32, 1);
          float32x4_t v887 = vmulq_laneq_f32(v954, v963, 2);
          float32x4_t v888 = vmulq_laneq_f32(v955, v963, 3);
        }
        else
        {
          float32x4_t v885 = *(float32x4_t *)(v5 + 13472);
          float32x4_t v886 = v885;
          float32x4_t v887 = v885;
          float32x4_t v888 = v885;
        }
        float32x4_t v964 = vmulq_f32(v733, v885);
        int32x4_t v965 = (int32x4_t)vmulq_f32(v734, v886);
        float32x4_t v966 = vmulq_f32(v735, v887);
        float32x4_t v967 = vmulq_f32(v736, v888);
        v968.i64[0] = vzip1q_s32((int32x4_t)v964, v965).u64[0];
        v968.i64[1] = __PAIR64__(v967.u32[0], v966.u32[0]);
        v969.i64[0] = vtrn2q_s32((int32x4_t)v964, v965).u64[0];
        v969.i64[1] = __PAIR64__(v967.u32[1], v966.u32[1]);
        v964.i64[0] = vzip2q_s32((int32x4_t)v964, v965).u64[0];
        v964.i64[1] = __PAIR64__(v967.u32[2], v966.u32[2]);
        float32x4_t v856 = vaddq_f32(v964, vaddq_f32(v968, v969));
      }
      if (v792.f32[0] <= 0.0) {
        float v970 = 0.0;
      }
      else {
        float v970 = v856.f32[0];
      }
      if (v792.f32[1] <= 0.0) {
        float v971 = 0.0;
      }
      else {
        float v971 = v856.f32[1];
      }
      if (v792.f32[2] <= 0.0) {
        float v972 = 0.0;
      }
      else {
        float v972 = v856.f32[2];
      }
      if (v792.f32[3] <= 0.0) {
        float v973 = 0.0;
      }
      else {
        float v973 = v856.f32[3];
      }
      if (v970 > 0.0 || v971 > 0.0 || v972 > 0.0 || v973 > 0.0)
      {
        float32x4_t v1472 = v738;
        float32x4_t v1527 = v26;
        float32x4_t v1543 = v25;
        float32x4_t v1559 = v24;
        float32x4_t v1575 = v23;
        float v976 = fmaxf(v971, 0.0);
        float v977 = fmaxf(v972, 0.0);
        float v978 = v14[4].f32[0];
        float v979 = v15[4].f32[0];
        float v980 = fmaxf(v973, 0.0);
        float v981 = v16[4].f32[0];
        float v982 = v17[4].f32[0];
        long long v983 = v16;
        long long v984 = v15;
        long long v985 = v14;
        uint64_t v986 = v17;
        LODWORD(v1434) = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t, float, float))(v5 + 560))(a1, fmaxf(v970, 0.0), v978));
        LODWORD(v1422) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v976, v979));
        LODWORD(v1408) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v977, v981));
        a1 = (*(uint64_t (**)(float, float))(v5 + 560))(v980, v982);
        if ((v7 & 0x800) != 0)
        {
          v991 = v983;
          v988 = v985;
          float32x4_t v994 = *(float32x4_t *)(v5 + 13376);
          float32x4_t v989 = vmulq_f32(v994, v4[13]);
          float32x4_t v990 = vmulq_f32(v994, v10[13]);
          float32x4_t v992 = vmulq_f32(v994, v11[13]);
          float32x4_t v993 = vmulq_f32(v994, v12[13]);
        }
        else
        {
          v988 = v985;
          float32x4_t v989 = v985[22];
          float32x4_t v990 = v984[22];
          v991 = v983;
          float32x4_t v992 = v983[22];
          float32x4_t v993 = v986[22];
        }
        unsigned int v17 = v986;
        uint64_t v15 = v984;
        float32x4_t v738 = v1472;
        float32x4_t v974 = v1487;
        float32x4_t v809 = v1451;
        float32x4_t v975 = v1459;
        float32x4_t v810 = v1443;
        float32x4_t v995 = vmulq_n_f32(v989, v1434);
        float32x4_t v996 = vmulq_n_f32(v990, v1422);
        float32x4_t v997 = vmulq_n_f32(v992, v1408);
        float32x4_t v998 = vmulq_n_f32(v993, v987);
        LOWORD(v6) = v1462;
        float32x4_t v24 = v1559;
        float32x4_t v23 = v1575;
        float32x4_t v25 = v1543;
        float32x4_t v26 = v1527;
        float32x4_t v22 = v1512;
        if ((v1462 & 0x10) != 0)
        {
          int v14 = v988;
          uint64_t v16 = v991;
          if (v1494)
          {
            float32x4_t v995 = vmulq_n_f32(v995, v1472.f32[0]);
            float32x4_t v996 = vmulq_lane_f32(v996, *(float32x2_t *)v1472.f32, 1);
            float32x4_t v997 = vmulq_laneq_f32(v997, v1472, 2);
            float32x4_t v998 = vmulq_laneq_f32(v998, v1472, 3);
          }
          float32x4_t v1507 = vaddq_f32(v1507, v996);
          float32x4_t v1510 = vaddq_f32(v1510, v995);
          float32x4_t v1502 = vaddq_f32(v1502, v998);
          float32x4_t v1504 = vaddq_f32(v1504, v997);
          if (!v1494) {
            goto LABEL_507;
          }
        }
        else
        {
          float32x4_t v974 = vaddq_f32(v1487, v995);
          float32x4_t v975 = vaddq_f32(v1459, v996);
          float32x4_t v809 = vaddq_f32(v1451, v997);
          float32x4_t v810 = vaddq_f32(v1443, v998);
          int v14 = v988;
          uint64_t v16 = v991;
          if (!v1494) {
            goto LABEL_507;
          }
        }
      }
      else
      {
        float32x4_t v974 = v1487;
        float32x4_t v975 = v1459;
        if (!v1494) {
          goto LABEL_507;
        }
      }
      float32x4_t v974 = vmulq_n_f32(v974, v738.f32[0]);
      float32x4_t v975 = vmulq_lane_f32(v975, *(float32x2_t *)v738.f32, 1);
      float32x4_t v809 = vmulq_laneq_f32(v809, v738, 2);
      float32x4_t v810 = vmulq_laneq_f32(v810, v738, 3);
LABEL_507:
      float32x4_t v23 = vaddq_f32(v23, v974);
      float32x4_t v24 = vaddq_f32(v24, v975);
      float32x4_t v25 = vaddq_f32(v25, v809);
      float32x4_t v26 = vaddq_f32(v26, v810);
      goto LABEL_508;
    }
    if (v1586)
    {
      if (v1494)
      {
        float32x4_t v781 = vmulq_n_f32(v781, v738.f32[0]);
        float32x4_t v782 = vmulq_lane_f32(v782, *(float32x2_t *)v738.f32, 1);
        float32x4_t v783 = vmulq_laneq_f32(v783, v738, 2);
        float32x4_t v784 = vmulq_laneq_f32(v784, v738, 3);
      }
      float32x4_t v23 = vaddq_f32(v23, v781);
      float32x4_t v24 = vaddq_f32(v24, v782);
      float32x4_t v25 = vaddq_f32(v25, v783);
      float32x4_t v26 = vaddq_f32(v26, v784);
    }
LABEL_508:
    if ((v7 & 0x40) == 0) {
      goto LABEL_540;
    }
    float32x4_t v999 = v4[7];
    float32x4_t v1000 = v10[7];
    float32x4_t v1001 = v11[7];
    float32x4_t v1002 = v12[7];
    if ((v6 & 2) != 0)
    {
      float32x4_t v999 = vnegq_f32(v999);
      float32x4_t v1000 = vnegq_f32(v1000);
      float32x4_t v1001 = vnegq_f32(v1001);
      float32x4_t v1002 = vnegq_f32(v1002);
    }
    float32x4_t v1003 = *(float32x4_t *)(v5 + 13600);
    float32x4_t v1004 = 0uLL;
    if (((unsigned __int16)v6 & 0x4000) != 0)
    {
      float32x4_t v1008 = vsubq_f32(v1003, v1584);
      float32x4_t v1009 = vsubq_f32(v1003, v1580);
      float32x4_t v1010 = vsubq_f32(v1003, v1582);
      float32x4_t v1011 = vsubq_f32(v1003, v22);
      float32x4_t v1012 = vmulq_f32(v1008, v1008);
      int32x4_t v1013 = (int32x4_t)vmulq_f32(v1009, v1009);
      float32x4_t v1014 = vmulq_f32(v1010, v1010);
      v1015.i64[0] = vzip1q_s32((int32x4_t)v1012, v1013).u64[0];
      v1015.i32[2] = v1014.i32[0];
      float32x4_t v1016 = vmulq_f32(v1011, v1011);
      v1015.i32[3] = v1016.i32[0];
      v1017.i64[0] = vtrn2q_s32((int32x4_t)v1012, v1013).u64[0];
      v1017.i64[1] = __PAIR64__(v1016.u32[1], v1014.u32[1]);
      v1012.i64[0] = vzip2q_s32((int32x4_t)v1012, v1013).u64[0];
      v1012.i64[1] = __PAIR64__(v1016.u32[2], v1014.u32[2]);
      float32x4_t v1018 = vsqrtq_f32(vaddq_f32(v1012, vaddq_f32(v1015, v1017)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v1020 = vdivq_f32(_Q0, v1018);
      float32x4_t v1003 = vmulq_n_f32(v1008, v1020.f32[0]);
      float32x4_t v1005 = vmulq_lane_f32(v1009, *(float32x2_t *)v1020.f32, 1);
      float32x4_t v1006 = vmulq_laneq_f32(v1010, v1020, 2);
      float32x4_t v1007 = vmulq_laneq_f32(v1011, v1020, 3);
      if ((v7 & 0x40000000) != 0)
      {
        float32x4_t v1021 = vdivq_f32(_Q0, v1020);
        v1022 = v1344;
        float32x4_t v1023 = vld1q_dup_f32(v1022);
        v1024 = v1343;
        float32x4_t v1025 = vld1q_dup_f32(v1024);
        float32x4_t v1004 = vdivq_f32(_Q0, vmlaq_f32(v1023, vmlaq_n_f32(v1025, v1021, *(float *)(v5 + 13592)), v1021));
        if ((v7 & 0x400000) == 0)
        {
LABEL_516:
          if (!v1493) {
            goto LABEL_527;
          }
          goto LABEL_523;
        }
      }
      else if ((v7 & 0x400000) == 0)
      {
        goto LABEL_516;
      }
    }
    else
    {
      float32x4_t v1005 = *(float32x4_t *)(v5 + 13600);
      float32x4_t v1006 = v1005;
      float32x4_t v1007 = v1005;
      if ((v7 & 0x400000) == 0) {
        goto LABEL_516;
      }
    }
    float32x4_t v1026 = vnegq_f32(*(float32x4_t *)(v5 + 13616));
    float32x4_t v1027 = vmulq_f32(v1003, v1026);
    int32x4_t v1028 = (int32x4_t)vmulq_f32(v1005, v1026);
    float32x4_t v1029 = vmulq_f32(v1006, v1026);
    float32x4_t v1030 = vmulq_f32(v1007, v1026);
    v1031.i64[0] = vzip1q_s32((int32x4_t)v1027, v1028).u64[0];
    v1031.i64[1] = __PAIR64__(v1030.u32[0], v1029.u32[0]);
    v1032.i64[0] = vtrn2q_s32((int32x4_t)v1027, v1028).u64[0];
    v1032.i64[1] = __PAIR64__(v1030.u32[1], v1029.u32[1]);
    v1027.i64[0] = vzip2q_s32((int32x4_t)v1027, v1028).u64[0];
    v1027.i64[1] = __PAIR64__(v1030.u32[2], v1029.u32[2]);
    float32x4_t v1033 = vaddq_f32(v1027, vaddq_f32(v1031, v1032));
    v1034 = v1352;
    float32x4_t v1035 = vld1q_dup_f32(v1034);
    int32x4_t v1036 = vcgeq_f32(v1033, v1035);
    int32x4_t v1037 = (int32x4_t)vmvnq_s8((int8x16_t)v1036);
    *(int16x4_t *)v1037.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v1037), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v1037.i8))
    {
      float32x4_t v1004 = 0uLL;
      if (!v1493) {
        goto LABEL_527;
      }
    }
    else
    {
      v1037.i32[0] = 0;
      int8x16_t v1388 = (int8x16_t)v1036;
      v1036.i32[0] = v7 & 0x40000000;
      int8x16_t v1038 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v1036, v1037), 0);
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1380 = (float32x4_t)vbslq_s8(v1038, _Q1, (int8x16_t)v1004);
      float v1040 = *(float *)(v5 + 13596);
      float32x4_t v1560 = v24;
      float32x4_t v1576 = v23;
      float32x4_t v1544 = v25;
      float32x4_t v1528 = v26;
      float32x4_t v1409 = v1006;
      float32x4_t v1423 = v1003;
      float32x4_t v1473 = v1007;
      float32x4_t v1488 = v1033;
      float32x4_t v1396 = v1005;
      unsigned int v1373 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(v5 + 560))(a1));
      unsigned int v1366 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1488.f32[1], v1040));
      unsigned int v1359 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1488.f32[2], v1040));
      *(float *)&unsigned int v1041 = (*(float (**)(float, float))(v5 + 560))(v1488.f32[3], v1040);
      float32x4_t v1005 = v1396;
      float32x4_t v1006 = v1409;
      float32x4_t v1007 = v1473;
      float32x4_t v1003 = v1423;
      float32x4_t v22 = v1512;
      float32x4_t v26 = v1528;
      float32x4_t v25 = v1544;
      float32x4_t v24 = v1560;
      float32x4_t v23 = v1576;
      unsigned int v17 = v1514;
      v1042.i64[0] = __PAIR64__(v1366, v1373);
      v1042.i64[1] = __PAIR64__(v1041, v1359);
      float32x4_t v1004 = vmulq_f32(v1380, (float32x4_t)vandq_s8(v1042, v1388));
      if (!v1493) {
        goto LABEL_527;
      }
    }
LABEL_523:
    if (v1004.f32[0] <= 0.0 && v1004.f32[1] <= 0.0 && v1004.f32[2] <= 0.0 && v1004.f32[3] <= 0.0) {
      goto LABEL_540;
    }
LABEL_527:
    if (v1586)
    {
      if ((v7 & 0x200) != 0)
      {
        float32x4_t v1047 = *(float32x4_t *)(v5 + 13504);
        float32x4_t v1043 = vmulq_f32(v1047, v4[13]);
        float32x4_t v1044 = vmulq_f32(v1047, v10[13]);
        float32x4_t v1045 = vmulq_f32(v1047, v11[13]);
        float32x4_t v1046 = vmulq_f32(v1047, v12[13]);
      }
      else
      {
        float32x4_t v1043 = v14[23];
        float32x4_t v1044 = v15[23];
        float32x4_t v1045 = v16[23];
        float32x4_t v1046 = v17[23];
      }
    }
    else
    {
      float32x4_t v1046 = 0uLL;
      float32x4_t v1045 = 0uLL;
      float32x4_t v1044 = 0uLL;
      float32x4_t v1043 = 0uLL;
    }
    float32x4_t v1048 = vmulq_f32(v999, v1003);
    int32x4_t v1049 = (int32x4_t)vmulq_f32(v1000, v1005);
    float32x4_t v1050 = vmulq_f32(v1001, v1006);
    float32x4_t v1051 = vmulq_f32(v1002, v1007);
    v1052.i64[0] = vzip1q_s32((int32x4_t)v1048, v1049).u64[0];
    v1052.i64[1] = __PAIR64__(v1051.u32[0], v1050.u32[0]);
    v1053.i64[0] = vtrn2q_s32((int32x4_t)v1048, v1049).u64[0];
    v1053.i64[1] = __PAIR64__(v1051.u32[1], v1050.u32[1]);
    v1048.i64[0] = vzip2q_s32((int32x4_t)v1048, v1049).u64[0];
    v1048.i64[1] = __PAIR64__(v1051.u32[2], v1050.u32[2]);
    float32x4_t v1054 = vaddq_f32(v1048, vaddq_f32(v1052, v1053));
    if (v1054.f32[0] <= 0.0 && v1054.f32[1] <= 0.0 && v1054.f32[2] <= 0.0 && v1054.f32[3] <= 0.0)
    {
      if (v1586)
      {
        if (v1493)
        {
          float32x4_t v1043 = vmulq_n_f32(v1043, v1004.f32[0]);
          float32x4_t v1044 = vmulq_lane_f32(v1044, *(float32x2_t *)v1004.f32, 1);
          float32x4_t v1045 = vmulq_laneq_f32(v1045, v1004, 2);
          float32x4_t v1046 = vmulq_laneq_f32(v1046, v1004, 3);
        }
        float32x4_t v23 = vaddq_f32(v23, v1043);
        float32x4_t v24 = vaddq_f32(v24, v1044);
        float32x4_t v25 = vaddq_f32(v25, v1045);
        float32x4_t v26 = vaddq_f32(v26, v1046);
      }
LABEL_540:
      if ((v7 & 0x80) == 0) {
        goto LABEL_665;
      }
      goto LABEL_541;
    }
    float32x4_t v1474 = v1007;
    if ((v7 & 0x400) != 0)
    {
      float32x4_t v1118 = *(float32x4_t *)(v5 + 13520);
      float32x4_t v1077 = vmulq_f32(v1118, v4[13]);
      float32x4_t v1078 = vmulq_f32(v1118, v10[13]);
      float32x4_t v1079 = vmulq_f32(v1118, v11[13]);
      float32x4_t v1080 = vmulq_f32(v1118, v12[13]);
    }
    else
    {
      float32x4_t v1077 = v14[24];
      float32x4_t v1078 = v15[24];
      float32x4_t v1079 = v16[24];
      float32x4_t v1080 = v17[24];
    }
    float32x4_t v1119 = vmulq_n_f32(v1077, fmaxf(v1054.f32[0], 0.0));
    float32x4_t v1120 = vmulq_n_f32(v1078, fmaxf(v1054.f32[1], 0.0));
    float32x4_t v1121 = vmulq_n_f32(v1079, fmaxf(v1054.f32[2], 0.0));
    float32x4_t v1122 = vmulq_n_f32(v1080, fmaxf(v1054.f32[3], 0.0));
    if (v1586)
    {
      float32x4_t v1119 = vaddq_f32(v1043, v1119);
      float32x4_t v1120 = vaddq_f32(v1044, v1120);
      float32x4_t v1121 = vaddq_f32(v1045, v1121);
      float32x4_t v1122 = vaddq_f32(v1046, v1122);
    }
    float32x4_t v1490 = v1119;
    float32x4_t v1452 = v1121;
    float32x4_t v1460 = v1120;
    float32x4_t v1444 = v1122;
    if ((v6 & 0x20) != 0)
    {
      float32x4_t v1136 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v999, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v999, 0xCuLL)));
      int32x4_t v1137 = (int32x4_t)vmlsq_f32(vmulq_f32(v1136, v1003), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1003, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1003, 0xCuLL))), v999);
      int32x4_t v1138 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1137, 0xCuLL);
      float32x4_t v1139 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1000, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1000, 0xCuLL)));
      float32x4_t v1140 = vmlsq_f32(vmulq_f32(v1139, v1005), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1005, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1005, 0xCuLL))), v1000);
      int32x4_t v1141 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1140, 0xCuLL);
      float32x4_t v1142 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1001, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1001, 0xCuLL)));
      int32x4_t v1143 = (int32x4_t)vmlsq_f32(vmulq_f32(v1142, v1006), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1006, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1006, 0xCuLL))), v1001);
      int32x4_t v1144 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1143, 0xCuLL);
      float32x4_t v1145 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1002, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1002, 0xCuLL)));
      int32x4_t v1146 = (int32x4_t)vmlsq_f32(vmulq_f32(v1145, v1474), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1474, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1474, 0xCuLL))), v1002);
      int32x4_t v1147 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1146, 0xCuLL);
      int32x4_t v1148 = (int32x4_t)vmlsq_f32(vmulq_f32(v1136, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1137, v1138))), (float32x4_t)vextq_s8((int8x16_t)v1138, (int8x16_t)vrev64q_s32(v1138), 8uLL), v999);
      int32x4_t v1149 = (int32x4_t)vmlsq_f32(vmulq_f32(v1139, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1140, v1141))), (float32x4_t)vextq_s8((int8x16_t)v1141, (int8x16_t)vrev64q_s32(v1141), 8uLL), v1000);
      int32x4_t v1150 = (int32x4_t)vmlsq_f32(vmulq_f32(v1142, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1143, v1144))), (float32x4_t)vextq_s8((int8x16_t)v1144, (int8x16_t)vrev64q_s32(v1144), 8uLL), v1001);
      int32x4_t v1151 = (int32x4_t)vmlsq_f32(vmulq_f32(v1145, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1146, v1147))), (float32x4_t)vextq_s8((int8x16_t)v1147, (int8x16_t)vrev64q_s32(v1147), 8uLL), v1002);
      v1140.i64[0] = 0x4000000040000000;
      v1140.i64[1] = 0x4000000040000000;
      float32x4_t v1152 = vmlaq_f32(v1003, v1140, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1148, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1148, 0xCuLL))));
      float32x4_t v1153 = vmlaq_f32(v1005, v1140, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1149, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1149, 0xCuLL))));
      float32x4_t v1154 = vmlaq_f32(v1006, v1140, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1150, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1150, 0xCuLL))));
      float32x4_t v1155 = vmlaq_f32(v1474, v1140, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1151, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1151, 0xCuLL))));
      if ((v6 & 8) != 0)
      {
        float32x4_t v1178 = vmulq_f32(v1584, v1584);
        int32x4_t v1179 = (int32x4_t)vmulq_f32(v1580, v1580);
        float32x4_t v1180 = vmulq_f32(v1582, v1582);
        float32x4_t v1181 = vmulq_f32(v22, v22);
        v1182.i64[0] = vzip1q_s32((int32x4_t)v1178, v1179).u64[0];
        v1182.i64[1] = __PAIR64__(v1181.u32[0], v1180.u32[0]);
        v1183.i64[0] = vtrn2q_s32((int32x4_t)v1178, v1179).u64[0];
        v1183.i64[1] = __PAIR64__(v1181.u32[1], v1180.u32[1]);
        v1178.i64[0] = vzip2q_s32((int32x4_t)v1178, v1179).u64[0];
        v1178.i64[1] = __PAIR64__(v1181.u32[2], v1180.u32[2]);
        __asm { FMOV            V7.4S, #1.0 }
        float32x4_t v1185 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v1178, vaddq_f32(v1182, v1183))));
        float32x4_t v1186 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1584), v1185.f32[0]), v1152);
        int32x4_t v1187 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v1185.f32, 1), v1153);
        float32x4_t v1188 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1582), v1185, 2), v1154);
        float32x4_t v1189 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v22), v1185, 3), v1155);
        v1180.i64[0] = vzip1q_s32((int32x4_t)v1186, v1187).u64[0];
        v1180.i64[1] = __PAIR64__(v1189.u32[0], v1188.u32[0]);
        v1181.i64[0] = vtrn2q_s32((int32x4_t)v1186, v1187).u64[0];
        v1181.i64[1] = __PAIR64__(v1189.u32[1], v1188.u32[1]);
        v1186.i64[0] = vzip2q_s32((int32x4_t)v1186, v1187).u64[0];
        v1186.i64[1] = __PAIR64__(v1189.u32[2], v1188.u32[2]);
        float32x4_t v1156 = vaddq_f32(v1186, vaddq_f32(v1180, v1181));
      }
      else
      {
        v1156.i64[0] = vzip2q_s32((int32x4_t)v1152, (int32x4_t)v1153).u64[0];
        v1156.i64[1] = __PAIR64__(v1155.u32[2], v1154.u32[2]);
      }
      float32x4_t v1122 = v1444;
      float32x4_t v1121 = v1452;
      float v9 = 1.0;
    }
    else
    {
      if (v1322)
      {
        if ((v6 & 8) != 0)
        {
          float32x4_t v1210 = vmulq_f32(v1584, v1584);
          int32x4_t v1211 = (int32x4_t)vmulq_f32(v1580, v1580);
          float32x4_t v1212 = vmulq_f32(v1582, v1582);
          v1213.i64[0] = vzip1q_s32((int32x4_t)v1210, v1211).u64[0];
          v1213.i32[2] = v1212.i32[0];
          float32x4_t v1214 = vmulq_f32(v22, v22);
          v1213.i32[3] = v1214.i32[0];
          v1215.i64[0] = vtrn2q_s32((int32x4_t)v1210, v1211).u64[0];
          v1215.i64[1] = __PAIR64__(v1214.u32[1], v1212.u32[1]);
          v1210.i64[0] = vzip2q_s32((int32x4_t)v1210, v1211).u64[0];
          v1210.i64[1] = __PAIR64__(v1214.u32[2], v1212.u32[2]);
          __asm { FMOV            V16.4S, #1.0 }
          float32x4_t v1217 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v1210, vaddq_f32(v1213, v1215))));
          float32x4_t v1123 = vmulq_n_f32(vnegq_f32(v1584), v1217.f32[0]);
          float32x4_t v1124 = vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v1217.f32, 1);
          float32x4_t v1125 = vmulq_laneq_f32(vnegq_f32(v1582), v1217, 2);
          float32x4_t v1126 = vmulq_laneq_f32(vnegq_f32(v22), v1217, 3);
        }
        else
        {
          float32x4_t v1123 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v1124 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v1125 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v1126 = (float32x4_t)xmmword_227DC2100;
        }
        float32x4_t v1218 = vaddq_f32(v1003, v1123);
        float32x4_t v1219 = vaddq_f32(v1005, v1124);
        float32x4_t v1220 = vaddq_f32(v1006, v1125);
        float32x4_t v1221 = vaddq_f32(v1474, v1126);
        float32x4_t v1222 = vmulq_f32(v1218, v1218);
        int32x4_t v1223 = (int32x4_t)vmulq_f32(v1219, v1219);
        float32x4_t v1224 = vmulq_f32(v1220, v1220);
        v1225.i64[0] = vzip1q_s32((int32x4_t)v1222, v1223).u64[0];
        v1225.i32[2] = v1224.i32[0];
        float32x4_t v1226 = vmulq_f32(v1221, v1221);
        v1225.i32[3] = v1226.i32[0];
        v1227.i64[0] = vtrn2q_s32((int32x4_t)v1222, v1223).u64[0];
        v1227.i64[1] = __PAIR64__(v1226.u32[1], v1224.u32[1]);
        v1222.i64[0] = vzip2q_s32((int32x4_t)v1222, v1223).u64[0];
        v1222.i64[1] = __PAIR64__(v1226.u32[2], v1224.u32[2]);
        __asm { FMOV            V17.4S, #1.0 }
        float32x4_t v1229 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v1222, vaddq_f32(v1225, v1227))));
        float32x4_t v1202 = vmulq_n_f32(v1218, v1229.f32[0]);
        float32x4_t v1203 = vmulq_lane_f32(v1219, *(float32x2_t *)v1229.f32, 1);
        float32x4_t v1204 = vmulq_laneq_f32(v1220, v1229, 2);
        float32x4_t v1205 = vmulq_laneq_f32(v1221, v1229, 3);
      }
      else
      {
        float32x4_t v1202 = *(float32x4_t *)(v5 + 13632);
        float32x4_t v1203 = v1202;
        float32x4_t v1204 = v1202;
        float32x4_t v1205 = v1202;
      }
      float32x4_t v1230 = vmulq_f32(v999, v1202);
      int32x4_t v1231 = (int32x4_t)vmulq_f32(v1000, v1203);
      float32x4_t v1232 = vmulq_f32(v1001, v1204);
      float32x4_t v1233 = vmulq_f32(v1002, v1205);
      v1234.i64[0] = vzip1q_s32((int32x4_t)v1230, v1231).u64[0];
      v1234.i64[1] = __PAIR64__(v1233.u32[0], v1232.u32[0]);
      v1235.i64[0] = vtrn2q_s32((int32x4_t)v1230, v1231).u64[0];
      v1235.i64[1] = __PAIR64__(v1233.u32[1], v1232.u32[1]);
      v1230.i64[0] = vzip2q_s32((int32x4_t)v1230, v1231).u64[0];
      v1230.i64[1] = __PAIR64__(v1233.u32[2], v1232.u32[2]);
      float32x4_t v1156 = vaddq_f32(v1230, vaddq_f32(v1234, v1235));
    }
    if (v1054.f32[0] <= 0.0) {
      float v1236 = 0.0;
    }
    else {
      float v1236 = v1156.f32[0];
    }
    if (v1054.f32[1] <= 0.0) {
      float v1237 = 0.0;
    }
    else {
      float v1237 = v1156.f32[1];
    }
    if (v1054.f32[2] <= 0.0) {
      float v1238 = 0.0;
    }
    else {
      float v1238 = v1156.f32[2];
    }
    if (v1054.f32[3] <= 0.0) {
      float v1239 = 0.0;
    }
    else {
      float v1239 = v1156.f32[3];
    }
    if (v1236 > 0.0 || v1237 > 0.0 || v1238 > 0.0 || v1239 > 0.0)
    {
      float32x4_t v1476 = v1004;
      float32x4_t v1530 = v26;
      float32x4_t v1546 = v25;
      float32x4_t v1562 = v24;
      float32x4_t v1578 = v23;
      float v1242 = fmaxf(v1237, 0.0);
      float v1243 = fmaxf(v1238, 0.0);
      float v1244 = v14[4].f32[0];
      float v1245 = v15[4].f32[0];
      float v1246 = fmaxf(v1239, 0.0);
      float v1247 = v16[4].f32[0];
      float v1248 = v17[4].f32[0];
      v1249 = v16;
      v1250 = v15;
      v1251 = v14;
      v1252 = v17;
      LODWORD(v1436) = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t, float, float))(v5 + 560))(a1, fmaxf(v1236, 0.0), v1244));
      LODWORD(v1425) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1242, v1245));
      LODWORD(v1411) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1243, v1247));
      a1 = (*(uint64_t (**)(float, float))(v5 + 560))(v1246, v1248);
      if ((v7 & 0x800) != 0)
      {
        v1257 = v1249;
        v1254 = v1251;
        float32x4_t v1260 = *(float32x4_t *)(v5 + 13536);
        float32x4_t v1255 = vmulq_f32(v1260, v4[13]);
        float32x4_t v1256 = vmulq_f32(v1260, v10[13]);
        float32x4_t v1258 = vmulq_f32(v1260, v11[13]);
        float32x4_t v1259 = vmulq_f32(v1260, v12[13]);
      }
      else
      {
        v1254 = v1251;
        float32x4_t v1255 = v1251[25];
        float32x4_t v1256 = v1250[25];
        v1257 = v1249;
        float32x4_t v1258 = v1249[25];
        float32x4_t v1259 = v1252[25];
      }
      unsigned int v17 = v1252;
      uint64_t v15 = v1250;
      float32x4_t v1004 = v1476;
      float32x4_t v1240 = v1490;
      float32x4_t v1121 = v1452;
      float32x4_t v1241 = v1460;
      float32x4_t v1122 = v1444;
      float32x4_t v1261 = vmulq_n_f32(v1255, v1436);
      float32x4_t v1262 = vmulq_n_f32(v1256, v1425);
      float32x4_t v1263 = vmulq_n_f32(v1258, v1411);
      float32x4_t v1264 = vmulq_n_f32(v1259, v1253);
      LOWORD(v6) = v1462;
      float32x4_t v24 = v1562;
      float32x4_t v23 = v1578;
      float32x4_t v25 = v1546;
      float32x4_t v26 = v1530;
      float32x4_t v22 = v1512;
      if ((v1462 & 0x10) != 0)
      {
        int v14 = v1254;
        uint64_t v16 = v1257;
        if (v1493)
        {
          float32x4_t v1261 = vmulq_n_f32(v1261, v1476.f32[0]);
          float32x4_t v1262 = vmulq_lane_f32(v1262, *(float32x2_t *)v1476.f32, 1);
          float32x4_t v1263 = vmulq_laneq_f32(v1263, v1476, 2);
          float32x4_t v1264 = vmulq_laneq_f32(v1264, v1476, 3);
        }
        float32x4_t v1507 = vaddq_f32(v1507, v1262);
        float32x4_t v1510 = vaddq_f32(v1510, v1261);
        float32x4_t v1502 = vaddq_f32(v1502, v1264);
        float32x4_t v1504 = vaddq_f32(v1504, v1263);
        if (v1493)
        {
LABEL_630:
          float32x4_t v1240 = vmulq_n_f32(v1240, v1004.f32[0]);
          float32x4_t v1241 = vmulq_lane_f32(v1241, *(float32x2_t *)v1004.f32, 1);
          float32x4_t v1121 = vmulq_laneq_f32(v1121, v1004, 2);
          float32x4_t v1122 = vmulq_laneq_f32(v1122, v1004, 3);
        }
      }
      else
      {
        float32x4_t v1240 = vaddq_f32(v1490, v1261);
        float32x4_t v1241 = vaddq_f32(v1460, v1262);
        float32x4_t v1121 = vaddq_f32(v1452, v1263);
        float32x4_t v1122 = vaddq_f32(v1444, v1264);
        int v14 = v1254;
        uint64_t v16 = v1257;
        if (v1493) {
          goto LABEL_630;
        }
      }
    }
    else
    {
      float32x4_t v1240 = v1490;
      float32x4_t v1241 = v1460;
      if (v1493) {
        goto LABEL_630;
      }
    }
    float32x4_t v23 = vaddq_f32(v23, v1240);
    float32x4_t v24 = vaddq_f32(v24, v1241);
    float32x4_t v25 = vaddq_f32(v25, v1121);
    float32x4_t v26 = vaddq_f32(v26, v1122);
    if ((v7 & 0x80) == 0) {
      goto LABEL_665;
    }
LABEL_541:
    float32x4_t v1055 = v4[7];
    float32x4_t v1056 = v10[7];
    float32x4_t v1057 = v11[7];
    float32x4_t v1058 = v12[7];
    if ((v6 & 2) != 0)
    {
      float32x4_t v1055 = vnegq_f32(v1055);
      float32x4_t v1056 = vnegq_f32(v1056);
      float32x4_t v1057 = vnegq_f32(v1057);
      float32x4_t v1058 = vnegq_f32(v1058);
    }
    float32x4_t v1059 = *(float32x4_t *)(v5 + 13760);
    float32x4_t v1060 = 0uLL;
    if (((unsigned __int16)v6 & 0x8000) != 0)
    {
      float32x4_t v1064 = vsubq_f32(v1059, v1584);
      float32x4_t v1065 = vsubq_f32(v1059, v1580);
      float32x4_t v1066 = vsubq_f32(v1059, v1582);
      float32x4_t v1067 = vsubq_f32(v1059, v22);
      float32x4_t v1068 = vmulq_f32(v1064, v1064);
      int32x4_t v1069 = (int32x4_t)vmulq_f32(v1065, v1065);
      float32x4_t v1070 = vmulq_f32(v1066, v1066);
      v1071.i64[0] = vzip1q_s32((int32x4_t)v1068, v1069).u64[0];
      v1071.i32[2] = v1070.i32[0];
      float32x4_t v1072 = vmulq_f32(v1067, v1067);
      v1071.i32[3] = v1072.i32[0];
      v1073.i64[0] = vtrn2q_s32((int32x4_t)v1068, v1069).u64[0];
      v1073.i64[1] = __PAIR64__(v1072.u32[1], v1070.u32[1]);
      v1068.i64[0] = vzip2q_s32((int32x4_t)v1068, v1069).u64[0];
      v1068.i64[1] = __PAIR64__(v1072.u32[2], v1070.u32[2]);
      float32x4_t v1074 = vsqrtq_f32(vaddq_f32(v1068, vaddq_f32(v1071, v1073)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v1076 = vdivq_f32(_Q0, v1074);
      float32x4_t v1059 = vmulq_n_f32(v1064, v1076.f32[0]);
      float32x4_t v1061 = vmulq_lane_f32(v1065, *(float32x2_t *)v1076.f32, 1);
      float32x4_t v1062 = vmulq_laneq_f32(v1066, v1076, 2);
      float32x4_t v1063 = vmulq_laneq_f32(v1067, v1076, 3);
      if ((v7 & 0x80000000) != 0)
      {
        float32x4_t v1081 = vdivq_f32(_Q0, v1076);
        v1082 = v1330;
        float32x4_t v1083 = vld1q_dup_f32(v1082);
        v1084 = v1329;
        float32x4_t v1085 = vld1q_dup_f32(v1084);
        float32x4_t v1060 = vdivq_f32(_Q0, vmlaq_f32(v1083, vmlaq_n_f32(v1085, v1081, *(float *)(v5 + 13752)), v1081));
        if ((v7 & 0x800000) == 0)
        {
LABEL_548:
          if (!v1492) {
            goto LABEL_561;
          }
          goto LABEL_557;
        }
      }
      else if ((v7 & 0x800000) == 0)
      {
        goto LABEL_548;
      }
    }
    else
    {
      float32x4_t v1061 = *(float32x4_t *)(v5 + 13760);
      float32x4_t v1062 = v1061;
      float32x4_t v1063 = v1061;
      if ((v7 & 0x800000) == 0) {
        goto LABEL_548;
      }
    }
    float32x4_t v1086 = vnegq_f32(*(float32x4_t *)(v5 + 13776));
    float32x4_t v1087 = vmulq_f32(v1059, v1086);
    int32x4_t v1088 = (int32x4_t)vmulq_f32(v1061, v1086);
    float32x4_t v1089 = vmulq_f32(v1062, v1086);
    float32x4_t v1090 = vmulq_f32(v1063, v1086);
    v1091.i64[0] = vzip1q_s32((int32x4_t)v1087, v1088).u64[0];
    v1091.i64[1] = __PAIR64__(v1090.u32[0], v1089.u32[0]);
    v1092.i64[0] = vtrn2q_s32((int32x4_t)v1087, v1088).u64[0];
    v1092.i64[1] = __PAIR64__(v1090.u32[1], v1089.u32[1]);
    v1087.i64[0] = vzip2q_s32((int32x4_t)v1087, v1088).u64[0];
    v1087.i64[1] = __PAIR64__(v1090.u32[2], v1089.u32[2]);
    float32x4_t v1093 = vaddq_f32(v1087, vaddq_f32(v1091, v1092));
    v1094 = v1353;
    float32x4_t v1095 = vld1q_dup_f32(v1094);
    int8x16_t v1096 = (int8x16_t)vcgeq_f32(v1093, v1095);
    int32x4_t v1097 = (int32x4_t)vmvnq_s8(v1096);
    *(int16x4_t *)v1097.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v1097), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v1097.i8))
    {
      float32x4_t v1060 = 0uLL;
      if (!v1492) {
        goto LABEL_561;
      }
    }
    else
    {
      v1097.i32[0] = 0;
      int8x16_t v1389 = v1096;
      float32x4_t v1397 = v1061;
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1381 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v1097, v1345), 0), (int8x16_t)v1060, _Q1);
      float v1099 = *(float *)(v5 + 13756);
      float32x4_t v1561 = v24;
      float32x4_t v1577 = v23;
      float32x4_t v1545 = v25;
      float32x4_t v1529 = v26;
      float32x4_t v1489 = v1093;
      float32x4_t v1435 = v1059;
      float32x4_t v1410 = v1062;
      float32x4_t v1424 = v1063;
      unsigned int v1374 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t, float32_t, float))(v5 + 560))(a1, v1093.f32[0], v1099));
      unsigned int v1367 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1489.f32[1], v1099));
      unsigned int v1360 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1489.f32[2], v1099));
      *(float *)&unsigned int v1100 = (*(float (**)(float, float))(v5 + 560))(v1489.f32[3], v1099);
      float32x4_t v1061 = v1397;
      float32x4_t v1062 = v1410;
      float32x4_t v1063 = v1424;
      float32x4_t v1059 = v1435;
      float32x4_t v22 = v1512;
      float32x4_t v26 = v1529;
      float32x4_t v25 = v1545;
      float32x4_t v24 = v1561;
      float32x4_t v23 = v1577;
      unsigned int v17 = v1514;
      v1101.i64[0] = __PAIR64__(v1367, v1374);
      v1101.i64[1] = __PAIR64__(v1100, v1360);
      float32x4_t v1060 = vmulq_f32(v1381, (float32x4_t)vandq_s8(v1101, v1389));
      if (!v1492) {
        goto LABEL_561;
      }
    }
LABEL_557:
    if (v1060.f32[0] <= 0.0 && v1060.f32[1] <= 0.0 && v1060.f32[2] <= 0.0 && v1060.f32[3] <= 0.0) {
      goto LABEL_665;
    }
LABEL_561:
    if (v1586)
    {
      if ((v7 & 0x200) != 0)
      {
        float32x4_t v1106 = *(float32x4_t *)(v5 + 13664);
        float32x4_t v1102 = vmulq_f32(v1106, v4[13]);
        float32x4_t v1103 = vmulq_f32(v1106, v10[13]);
        float32x4_t v1104 = vmulq_f32(v1106, v11[13]);
        float32x4_t v1105 = vmulq_f32(v1106, v12[13]);
      }
      else
      {
        float32x4_t v1102 = v14[26];
        float32x4_t v1103 = v15[26];
        float32x4_t v1104 = v16[26];
        float32x4_t v1105 = v17[26];
      }
    }
    else
    {
      float32x4_t v1105 = 0uLL;
      float32x4_t v1104 = 0uLL;
      float32x4_t v1103 = 0uLL;
      float32x4_t v1102 = 0uLL;
    }
    float32x4_t v1107 = vmulq_f32(v1055, v1059);
    int32x4_t v1108 = (int32x4_t)vmulq_f32(v1056, v1061);
    float32x4_t v1109 = vmulq_f32(v1057, v1062);
    float32x4_t v1110 = vmulq_f32(v1058, v1063);
    v1111.i64[0] = vzip1q_s32((int32x4_t)v1107, v1108).u64[0];
    v1111.i64[1] = __PAIR64__(v1110.u32[0], v1109.u32[0]);
    v1112.i64[0] = vtrn2q_s32((int32x4_t)v1107, v1108).u64[0];
    v1112.i64[1] = __PAIR64__(v1110.u32[1], v1109.u32[1]);
    v1107.i64[0] = vzip2q_s32((int32x4_t)v1107, v1108).u64[0];
    v1107.i64[1] = __PAIR64__(v1110.u32[2], v1109.u32[2]);
    float32x4_t v1113 = vaddq_f32(v1107, vaddq_f32(v1111, v1112));
    if (v1113.f32[0] > 0.0 || v1113.f32[1] > 0.0 || v1113.f32[2] > 0.0 || v1113.f32[3] > 0.0)
    {
      if ((v7 & 0x400) != 0)
      {
        float32x4_t v1127 = *(float32x4_t *)(v5 + 13680);
        float32x4_t v1114 = vmulq_f32(v1127, v4[13]);
        float32x4_t v1115 = vmulq_f32(v1127, v10[13]);
        float32x4_t v1116 = vmulq_f32(v1127, v11[13]);
        float32x4_t v1117 = vmulq_f32(v1127, v12[13]);
      }
      else
      {
        float32x4_t v1114 = v14[27];
        float32x4_t v1115 = v15[27];
        float32x4_t v1116 = v16[27];
        float32x4_t v1117 = v17[27];
      }
      float32x4_t v1128 = vmulq_n_f32(v1114, fmaxf(v1113.f32[0], 0.0));
      float32x4_t v1129 = vmulq_n_f32(v1115, fmaxf(v1113.f32[1], 0.0));
      float32x4_t v1130 = vmulq_n_f32(v1116, fmaxf(v1113.f32[2], 0.0));
      float32x4_t v1131 = vmulq_n_f32(v1117, fmaxf(v1113.f32[3], 0.0));
      if (v1586)
      {
        float32x4_t v1128 = vaddq_f32(v1102, v1128);
        float32x4_t v1129 = vaddq_f32(v1103, v1129);
        float32x4_t v1130 = vaddq_f32(v1104, v1130);
        float32x4_t v1131 = vaddq_f32(v1105, v1131);
      }
      float32x4_t v1515 = v1128;
      float32x4_t v1475 = v1130;
      float32x4_t v1491 = v1129;
      float32x4_t v1461 = v1131;
      if ((v6 & 0x20) != 0)
      {
        float32x4_t v1157 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1055, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1055, 0xCuLL)));
        int32x4_t v1158 = (int32x4_t)vmlsq_f32(vmulq_f32(v1157, v1059), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1059, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1059, 0xCuLL))), v1055);
        int32x4_t v1159 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1158, 0xCuLL);
        float32x4_t v1160 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1056, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1056, 0xCuLL)));
        float32x4_t v1161 = vmlsq_f32(vmulq_f32(v1160, v1061), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1061, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1061, 0xCuLL))), v1056);
        int32x4_t v1162 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1161, 0xCuLL);
        float32x4_t v1163 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1057, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1057, 0xCuLL)));
        int32x4_t v1164 = (int32x4_t)vmlsq_f32(vmulq_f32(v1163, v1062), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1062, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1062, 0xCuLL))), v1057);
        int32x4_t v1165 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1164, 0xCuLL);
        float32x4_t v1166 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1058, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1058, 0xCuLL)));
        int32x4_t v1167 = (int32x4_t)vmlsq_f32(vmulq_f32(v1166, v1063), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1063, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1063, 0xCuLL))), v1058);
        int32x4_t v1168 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1167, 0xCuLL);
        int32x4_t v1169 = (int32x4_t)vmlsq_f32(vmulq_f32(v1157, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1158, v1159))), (float32x4_t)vextq_s8((int8x16_t)v1159, (int8x16_t)vrev64q_s32(v1159), 8uLL), v1055);
        int32x4_t v1170 = (int32x4_t)vmlsq_f32(vmulq_f32(v1160, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1161, v1162))), (float32x4_t)vextq_s8((int8x16_t)v1162, (int8x16_t)vrev64q_s32(v1162), 8uLL), v1056);
        int32x4_t v1171 = (int32x4_t)vmlsq_f32(vmulq_f32(v1163, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1164, v1165))), (float32x4_t)vextq_s8((int8x16_t)v1165, (int8x16_t)vrev64q_s32(v1165), 8uLL), v1057);
        int32x4_t v1172 = (int32x4_t)vmlsq_f32(vmulq_f32(v1166, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1167, v1168))), (float32x4_t)vextq_s8((int8x16_t)v1168, (int8x16_t)vrev64q_s32(v1168), 8uLL), v1058);
        v1161.i64[0] = 0x4000000040000000;
        v1161.i64[1] = 0x4000000040000000;
        float32x4_t v1173 = vmlaq_f32(v1059, v1161, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1169, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1169, 0xCuLL))));
        float32x4_t v1174 = vmlaq_f32(v1061, v1161, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1170, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1170, 0xCuLL))));
        float32x4_t v1175 = vmlaq_f32(v1062, v1161, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1171, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1171, 0xCuLL))));
        float32x4_t v1176 = vmlaq_f32(v1063, v1161, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1172, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1172, 0xCuLL))));
        if ((v6 & 8) != 0)
        {
          float32x4_t v1190 = vmulq_f32(v1584, v1584);
          int32x4_t v1191 = (int32x4_t)vmulq_f32(v1580, v1580);
          float32x4_t v1192 = vmulq_f32(v1582, v1582);
          float32x4_t v1193 = vmulq_f32(v22, v22);
          v1194.i64[0] = vzip1q_s32((int32x4_t)v1190, v1191).u64[0];
          v1194.i64[1] = __PAIR64__(v1193.u32[0], v1192.u32[0]);
          v1195.i64[0] = vtrn2q_s32((int32x4_t)v1190, v1191).u64[0];
          v1195.i64[1] = __PAIR64__(v1193.u32[1], v1192.u32[1]);
          v1190.i64[0] = vzip2q_s32((int32x4_t)v1190, v1191).u64[0];
          v1190.i64[1] = __PAIR64__(v1193.u32[2], v1192.u32[2]);
          __asm { FMOV            V7.4S, #1.0 }
          float32x4_t v1197 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v1190, vaddq_f32(v1194, v1195))));
          float32x4_t v1198 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1584), v1197.f32[0]), v1173);
          int32x4_t v1199 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v1197.f32, 1), v1174);
          float32x4_t v1200 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1582), v1197, 2), v1175);
          float32x4_t v1201 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v22), v1197, 3), v1176);
          v1192.i64[0] = vzip1q_s32((int32x4_t)v1198, v1199).u64[0];
          v1192.i64[1] = __PAIR64__(v1201.u32[0], v1200.u32[0]);
          v1193.i64[0] = vtrn2q_s32((int32x4_t)v1198, v1199).u64[0];
          v1193.i64[1] = __PAIR64__(v1201.u32[1], v1200.u32[1]);
          v1198.i64[0] = vzip2q_s32((int32x4_t)v1198, v1199).u64[0];
          v1198.i64[1] = __PAIR64__(v1201.u32[2], v1200.u32[2]);
          float32x4_t v1177 = vaddq_f32(v1198, vaddq_f32(v1192, v1193));
        }
        else
        {
          v1177.i64[0] = vzip2q_s32((int32x4_t)v1173, (int32x4_t)v1174).u64[0];
          v1177.i64[1] = __PAIR64__(v1176.u32[2], v1175.u32[2]);
        }
        float32x4_t v1130 = v1475;
        float v9 = 1.0;
        float32x4_t v1131 = v1461;
      }
      else
      {
        if (v1321)
        {
          if ((v6 & 8) != 0)
          {
            float32x4_t v1265 = vmulq_f32(v1584, v1584);
            int32x4_t v1266 = (int32x4_t)vmulq_f32(v1580, v1580);
            float32x4_t v1267 = vmulq_f32(v1582, v1582);
            v1268.i64[0] = vzip1q_s32((int32x4_t)v1265, v1266).u64[0];
            v1268.i32[2] = v1267.i32[0];
            float32x4_t v1269 = vmulq_f32(v22, v22);
            v1268.i32[3] = v1269.i32[0];
            v1270.i64[0] = vtrn2q_s32((int32x4_t)v1265, v1266).u64[0];
            v1270.i64[1] = __PAIR64__(v1269.u32[1], v1267.u32[1]);
            v1265.i64[0] = vzip2q_s32((int32x4_t)v1265, v1266).u64[0];
            v1265.i64[1] = __PAIR64__(v1269.u32[2], v1267.u32[2]);
            __asm { FMOV            V16.4S, #1.0 }
            float32x4_t v1272 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v1265, vaddq_f32(v1268, v1270))));
            float32x4_t v1132 = vmulq_n_f32(vnegq_f32(v1584), v1272.f32[0]);
            float32x4_t v1133 = vmulq_lane_f32(vnegq_f32(v1580), *(float32x2_t *)v1272.f32, 1);
            float32x4_t v1134 = vmulq_laneq_f32(vnegq_f32(v1582), v1272, 2);
            float32x4_t v1135 = vmulq_laneq_f32(vnegq_f32(v22), v1272, 3);
          }
          else
          {
            float32x4_t v1132 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v1133 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v1134 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v1135 = (float32x4_t)xmmword_227DC2100;
          }
          float32x4_t v1273 = vaddq_f32(v1059, v1132);
          float32x4_t v1274 = vaddq_f32(v1061, v1133);
          float32x4_t v1275 = vaddq_f32(v1062, v1134);
          float32x4_t v1276 = vaddq_f32(v1063, v1135);
          float32x4_t v1277 = vmulq_f32(v1273, v1273);
          int32x4_t v1278 = (int32x4_t)vmulq_f32(v1274, v1274);
          float32x4_t v1279 = vmulq_f32(v1275, v1275);
          v1280.i64[0] = vzip1q_s32((int32x4_t)v1277, v1278).u64[0];
          v1280.i32[2] = v1279.i32[0];
          float32x4_t v1281 = vmulq_f32(v1276, v1276);
          v1280.i32[3] = v1281.i32[0];
          v1282.i64[0] = vtrn2q_s32((int32x4_t)v1277, v1278).u64[0];
          v1282.i64[1] = __PAIR64__(v1281.u32[1], v1279.u32[1]);
          v1277.i64[0] = vzip2q_s32((int32x4_t)v1277, v1278).u64[0];
          v1277.i64[1] = __PAIR64__(v1281.u32[2], v1279.u32[2]);
          __asm { FMOV            V17.4S, #1.0 }
          float32x4_t v1284 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v1277, vaddq_f32(v1280, v1282))));
          float32x4_t v1206 = vmulq_n_f32(v1273, v1284.f32[0]);
          float32x4_t v1207 = vmulq_lane_f32(v1274, *(float32x2_t *)v1284.f32, 1);
          float32x4_t v1208 = vmulq_laneq_f32(v1275, v1284, 2);
          float32x4_t v1209 = vmulq_laneq_f32(v1276, v1284, 3);
        }
        else
        {
          float32x4_t v1206 = *(float32x4_t *)(v5 + 13792);
          float32x4_t v1207 = v1206;
          float32x4_t v1208 = v1206;
          float32x4_t v1209 = v1206;
        }
        float32x4_t v1285 = vmulq_f32(v1055, v1206);
        int32x4_t v1286 = (int32x4_t)vmulq_f32(v1056, v1207);
        float32x4_t v1287 = vmulq_f32(v1057, v1208);
        float32x4_t v1288 = vmulq_f32(v1058, v1209);
        v1289.i64[0] = vzip1q_s32((int32x4_t)v1285, v1286).u64[0];
        v1289.i64[1] = __PAIR64__(v1288.u32[0], v1287.u32[0]);
        v1290.i64[0] = vtrn2q_s32((int32x4_t)v1285, v1286).u64[0];
        v1290.i64[1] = __PAIR64__(v1288.u32[1], v1287.u32[1]);
        v1285.i64[0] = vzip2q_s32((int32x4_t)v1285, v1286).u64[0];
        v1285.i64[1] = __PAIR64__(v1288.u32[2], v1287.u32[2]);
        float32x4_t v1177 = vaddq_f32(v1285, vaddq_f32(v1289, v1290));
      }
      if (v1113.f32[0] <= 0.0) {
        float v1291 = 0.0;
      }
      else {
        float v1291 = v1177.f32[0];
      }
      if (v1113.f32[1] <= 0.0) {
        float v1292 = 0.0;
      }
      else {
        float v1292 = v1177.f32[1];
      }
      if (v1113.f32[2] <= 0.0) {
        float v1293 = 0.0;
      }
      else {
        float v1293 = v1177.f32[2];
      }
      if (v1113.f32[3] <= 0.0) {
        float v1294 = 0.0;
      }
      else {
        float v1294 = v1177.f32[3];
      }
      if (v1291 > 0.0 || v1292 > 0.0 || v1293 > 0.0 || v1294 > 0.0)
      {
        float32x4_t v1585 = v1060;
        float32x4_t v1531 = v26;
        float32x4_t v1547 = v25;
        float32x4_t v1563 = v24;
        float32x4_t v1579 = v23;
        float v1297 = fmaxf(v1292, 0.0);
        float v1298 = fmaxf(v1293, 0.0);
        float v1299 = v14[4].f32[0];
        float v1300 = v15[4].f32[0];
        float v1301 = fmaxf(v1294, 0.0);
        float v1302 = v16[4].f32[0];
        float v1303 = v17[4].f32[0];
        v1304 = v16;
        v1305 = v15;
        v1306 = v14;
        v1307 = v17;
        LODWORD(v1583) = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t, float, float))(v5 + 560))(a1, fmaxf(v1291, 0.0), v1299));
        LODWORD(v1581) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1297, v1300));
        LODWORD(v1513) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v5 + 560))(v1298, v1302));
        a1 = (*(uint64_t (**)(float, float))(v5 + 560))(v1301, v1303);
        if ((v7 & 0x800) != 0)
        {
          v1312 = v1304;
          v1309 = v1306;
          float32x4_t v1315 = *(float32x4_t *)(v5 + 13696);
          float32x4_t v1310 = vmulq_f32(v1315, v4[13]);
          float32x4_t v1311 = vmulq_f32(v1315, v10[13]);
          float32x4_t v1313 = vmulq_f32(v1315, v11[13]);
          float32x4_t v1314 = vmulq_f32(v1315, v12[13]);
        }
        else
        {
          v1309 = v1306;
          float32x4_t v1310 = v1306[28];
          float32x4_t v1311 = v1305[28];
          v1312 = v1304;
          float32x4_t v1313 = v1304[28];
          float32x4_t v1314 = v1307[28];
        }
        unsigned int v17 = v1307;
        uint64_t v15 = v1305;
        float32x4_t v1060 = v1585;
        float32x4_t v1130 = v1475;
        float32x4_t v1296 = v1491;
        float32x4_t v1131 = v1461;
        float32x4_t v1316 = vmulq_n_f32(v1310, v1583);
        float32x4_t v23 = v1579;
        float32x4_t v1317 = vmulq_n_f32(v1311, v1581);
        float32x4_t v1295 = v1515;
        float32x4_t v1318 = vmulq_n_f32(v1313, v1513);
        float32x4_t v1319 = vmulq_n_f32(v1314, v1308);
        LOWORD(v6) = v1462;
        float32x4_t v25 = v1547;
        float32x4_t v24 = v1563;
        float32x4_t v26 = v1531;
        if ((v1462 & 0x10) != 0)
        {
          int v14 = v1309;
          uint64_t v16 = v1312;
          if (v1492)
          {
            float32x4_t v1316 = vmulq_n_f32(v1316, v1585.f32[0]);
            float32x4_t v1317 = vmulq_lane_f32(v1317, *(float32x2_t *)v1585.f32, 1);
            float32x4_t v1318 = vmulq_laneq_f32(v1318, v1585, 2);
            float32x4_t v1319 = vmulq_laneq_f32(v1319, v1585, 3);
          }
          float32x4_t v1507 = vaddq_f32(v1507, v1317);
          float32x4_t v1510 = vaddq_f32(v1510, v1316);
          float32x4_t v1502 = vaddq_f32(v1502, v1319);
          float32x4_t v1504 = vaddq_f32(v1504, v1318);
          if (!v1492) {
            goto LABEL_664;
          }
        }
        else
        {
          float32x4_t v1295 = vaddq_f32(v1515, v1316);
          float32x4_t v1296 = vaddq_f32(v1491, v1317);
          float32x4_t v1130 = vaddq_f32(v1475, v1318);
          float32x4_t v1131 = vaddq_f32(v1461, v1319);
          int v14 = v1309;
          uint64_t v16 = v1312;
          if (!v1492) {
            goto LABEL_664;
          }
        }
      }
      else
      {
        float32x4_t v1295 = v1515;
        float32x4_t v1296 = v1491;
        if (!v1492) {
          goto LABEL_664;
        }
      }
      float32x4_t v1295 = vmulq_n_f32(v1295, v1060.f32[0]);
      float32x4_t v1296 = vmulq_lane_f32(v1296, *(float32x2_t *)v1060.f32, 1);
      float32x4_t v1130 = vmulq_laneq_f32(v1130, v1060, 2);
      float32x4_t v1131 = vmulq_laneq_f32(v1131, v1060, 3);
LABEL_664:
      float32x4_t v23 = vaddq_f32(v23, v1295);
      float32x4_t v24 = vaddq_f32(v24, v1296);
      float32x4_t v25 = vaddq_f32(v25, v1130);
      float32x4_t v26 = vaddq_f32(v26, v1131);
      goto LABEL_665;
    }
    if (v1586)
    {
      if (v1492)
      {
        float32x4_t v1102 = vmulq_n_f32(v1102, v1060.f32[0]);
        float32x4_t v1103 = vmulq_lane_f32(v1103, *(float32x2_t *)v1060.f32, 1);
        float32x4_t v1104 = vmulq_laneq_f32(v1104, v1060, 2);
        float32x4_t v1105 = vmulq_laneq_f32(v1105, v1060, 3);
      }
      float32x4_t v23 = vaddq_f32(v23, v1102);
      float32x4_t v24 = vaddq_f32(v24, v1103);
      float32x4_t v25 = vaddq_f32(v25, v1104);
      float32x4_t v26 = vaddq_f32(v26, v1105);
    }
LABEL_665:
    v4[8] = v23;
    v10[8] = v24;
    v11[8] = v25;
    v12[8] = v26;
    if ((v7 & 0x400) != 0)
    {
      v4[8].i32[3] = v4[13].i32[3];
      v10[8].i32[3] = v10[13].i32[3];
      v11[8].i32[3] = v11[13].i32[3];
      v1320 = &v12[13].i32[3];
    }
    else
    {
      if ((v7 & 0x3FF) == 0) {
        goto LABEL_670;
      }
      v4[8].i32[3] = v14[29].i32[3];
      v10[8].i32[3] = v15[29].i32[3];
      v11[8].i32[3] = v16[29].i32[3];
      v1320 = &v17[29].i32[3];
    }
    v12[8].i32[3] = *v1320;
LABEL_670:
    if ((v6 & 0x10) != 0)
    {
      v4[9] = v1510;
      v10[9] = v1507;
      v11[9] = v1504;
      v12[9] = v1502;
    }
    int v4 = v12 + 40;
    unint64_t v8 = v1501;
  }
  while ((unint64_t)&v12[40] < v1501);
}

void gleLLVMVecLightPtrFrontTransform(uint64_t a1, uint64_t a2, int a3, int32x4_t a4)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(a1 + 20436);
  unsigned __int32 v6 = *(_DWORD *)(a1 + 20440);
  unint64_t v7 = a2 + 8 * a3;
  int v1467 = v5 & 0xFF08;
  unsigned int v1554 = v6 & 0xFFFF0300;
  int v1451 = v6 & 0x1010000;
  int v1286 = v5 & 0x108;
  int v1450 = v6 & 0x2020000;
  int v1285 = v5 & 0x208;
  int v1449 = v6 & 0x4040000;
  int v1284 = v5 & 0x408;
  int v1448 = v6 & 0x8080000;
  int v1283 = v5 & 0x808;
  int v1447 = v6 & 0x10100000;
  int v1282 = v5 & 0x1008;
  int v1446 = v6 & 0x20200000;
  int v1281 = v5 & 0x2008;
  int v1445 = v6 & 0x40400000;
  int v1280 = v5 & 0x4008;
  unsigned int v1444 = v6 & 0x80800000;
  int v1279 = v5 & 0x8008;
  unint64_t v8 = (void *)(a2 + 16);
  float32x4_t v1311 = (const float *)(a1 + 13740);
  a4.i32[0] = v6;
  int32x4_t v1303 = a4;
  float32x4_t v1288 = (const float *)(a1 + 13744);
  float32x4_t v1287 = (const float *)(a1 + 13748);
  float32x4_t v1310 = (const float *)(a1 + 13580);
  float v1302 = (const float *)(a1 + 13584);
  float v1301 = (const float *)(a1 + 13588);
  v1309 = (const float *)(a1 + 13420);
  float v1300 = (const float *)(a1 + 13424);
  float v1299 = (const float *)(a1 + 13428);
  float v1308 = (const float *)(a1 + 13260);
  float v1298 = (const float *)(a1 + 13264);
  float v1297 = (const float *)(a1 + 13268);
  v1307 = (const float *)(a1 + 13100);
  float32x4_t v1296 = (const float *)(a1 + 13104);
  float32x4_t v1295 = (const float *)(a1 + 13108);
  v1306 = (const float *)(a1 + 12940);
  float v1294 = (const float *)(a1 + 12944);
  float v1293 = (const float *)(a1 + 12948);
  v1305 = (const float *)(a1 + 12780);
  float v1292 = (const float *)(a1 + 12784);
  float v1291 = (const float *)(a1 + 12788);
  v1304 = (const float *)(a1 + 12620);
  float32x4_t v1290 = (const float *)(a1 + 12624);
  float32x4_t v1289 = (const float *)(a1 + 12628);
  float v9 = 1.0;
  __int16 v1427 = v5;
  unint64_t v1468 = v7;
  do
  {
    uint64_t v11 = (float32x4_t *)*(v8 - 2);
    v11->i8[2] &= ~2u;
    if ((unint64_t)(v8 + 1) >= v7)
    {
      if ((unint64_t)v8 >= v7)
      {
        uint64_t v15 = (float32x4_t **)(v8 - 1);
        int v12 = v11;
        BOOL v13 = v11;
        int v14 = v11;
        if ((unint64_t)(v8 - 1) >= v7) {
          goto LABEL_11;
        }
        int v14 = *v15;
        int v12 = *v15;
      }
      else
      {
        int v12 = (float32x4_t *)*(v8 - 1);
        int v14 = (float32x4_t *)*v8;
        v12->i8[2] &= ~2u;
      }
      BOOL v13 = v14;
    }
    else
    {
      int v12 = (float32x4_t *)*(v8 - 1);
      BOOL v13 = (float32x4_t *)*v8;
      int v14 = (float32x4_t *)v8[1];
      v12->i8[2] &= ~2u;
      v13->i8[2] &= ~2u;
    }
    v14->i8[2] &= ~2u;
LABEL_11:
    uint64_t v16 = (float32x4_t *)v11[2].i64[0];
    if (v16[31].i8[0]) {
      a1 = (*(uint64_t (**)(uint64_t, uint64_t, void))(v4 + 1504))(v4, v11[2].i64[0], 0);
    }
    unsigned int v17 = (float32x4_t *)v12[2].i64[0];
    float32x4_t v1547 = v16;
    if (v17 != v16 && v17[31].i8[0]) {
      a1 = (*(uint64_t (**)(uint64_t, float32x4_t *, void))(v4 + 1504))(v4, v17, 0);
    }
    float v18 = (float32x4_t *)v13[2].i64[0];
    if (v18 != v17 && v18[31].i8[0]) {
      a1 = (*(uint64_t (**)(uint64_t, uint64_t, void))(v4 + 1504))(v4, v13[2].i64[0], 0);
    }
    float v19 = (float32x4_t *)v14[2].i64[0];
    float32x4_t v1481 = v19;
    if (v19 != v18 && v19[31].i8[0])
    {
      a1 = (*(uint64_t (**)(uint64_t, float32x4_t *, void))(v4 + 1504))(v4, v19, 0);
      float v19 = v1481;
    }
    if (v1467)
    {
      float v20 = v11[6].f32[3];
      float32x4_t v1552 = v11[6];
      if (v20 != v9) {
        float32x4_t v1552 = vmulq_n_f32(v1552, v9 / v20);
      }
      float v21 = v12[6].f32[3];
      float32x4_t v1548 = v12[6];
      if (v21 != v9) {
        float32x4_t v1548 = vmulq_n_f32(v1548, v9 / v21);
      }
      float v22 = v13[6].f32[3];
      float32x4_t v1550 = v13[6];
      if (v22 != v9) {
        float32x4_t v1550 = vmulq_n_f32(v1550, v9 / v22);
      }
      float v23 = v14[6].f32[3];
      float32x4_t v24 = v14[6];
      if (v23 != v9) {
        float32x4_t v24 = vmulq_n_f32(v24, v9 / v23);
      }
      if ((v6 & 0x100) != 0)
      {
LABEL_36:
        float32x4_t v29 = *(float32x4_t *)(v4 + 12528);
        float32x4_t v25 = vmlaq_f32(v11[13], v29, *v1547);
        float32x4_t v26 = vmlaq_f32(v12[13], v29, *v17);
        float32x4_t v27 = vmlaq_f32(v13[13], v29, *v18);
        float32x4_t v28 = vmlaq_f32(v14[13], v29, *v19);
        goto LABEL_39;
      }
    }
    else
    {
      float32x4_t v24 = 0uLL;
      float32x4_t v1548 = 0u;
      float32x4_t v1550 = 0u;
      float32x4_t v1552 = 0u;
      if ((v6 & 0x100) != 0) {
        goto LABEL_36;
      }
    }
    if ((v6 & 0x200) != 0)
    {
      float32x4_t v30 = *(float32x4_t *)(v4 + 12528);
      float32x4_t v25 = vmlaq_f32(v1547[3], v11[13], v30);
      float32x4_t v26 = vmlaq_f32(v17[3], v12[13], v30);
      float32x4_t v27 = vmlaq_f32(v18[3], v13[13], v30);
      float32x4_t v28 = vmlaq_f32(v19[3], v14[13], v30);
    }
    else if (v1554)
    {
      float32x4_t v25 = v1547[29];
      float32x4_t v26 = v17[29];
      float32x4_t v27 = v18[29];
      float32x4_t v28 = v19[29];
    }
    else
    {
      float32x4_t v25 = v1547[30];
      float32x4_t v26 = v17[30];
      float32x4_t v27 = v18[30];
      float32x4_t v28 = v19[30];
    }
LABEL_39:
    float32x4_t v31 = 0uLL;
    float32x4_t v1477 = 0u;
    float32x4_t v1479 = v24;
    if ((v6 & 1) == 0) {
      goto LABEL_71;
    }
    float32x4_t v32 = v11[7];
    float32x4_t v33 = v12[7];
    float32x4_t v34 = v13[7];
    float32x4_t v35 = v14[7];
    if ((v5 & 2) != 0)
    {
      float32x4_t v32 = vnegq_f32(v32);
      float32x4_t v33 = vnegq_f32(v33);
      float32x4_t v34 = vnegq_f32(v34);
      float32x4_t v35 = vnegq_f32(v35);
    }
    float32x4_t v36 = *(float32x4_t *)(v4 + 12640);
    float32x4_t v37 = 0uLL;
    if ((v5 & 0x100) != 0)
    {
      float32x4_t v62 = vsubq_f32(v36, v1552);
      float32x4_t v63 = vsubq_f32(v36, v1548);
      float32x4_t v64 = vsubq_f32(v36, v1550);
      float32x4_t v65 = vsubq_f32(v36, v24);
      float32x4_t v66 = vmulq_f32(v62, v62);
      int32x4_t v67 = (int32x4_t)vmulq_f32(v63, v63);
      float32x4_t v68 = vmulq_f32(v64, v64);
      v69.i64[0] = vzip1q_s32((int32x4_t)v66, v67).u64[0];
      v69.i32[2] = v68.i32[0];
      float32x4_t v70 = vmulq_f32(v65, v65);
      v69.i32[3] = v70.i32[0];
      v71.i64[0] = vtrn2q_s32((int32x4_t)v66, v67).u64[0];
      v71.i64[1] = __PAIR64__(v70.u32[1], v68.u32[1]);
      v66.i64[0] = vzip2q_s32((int32x4_t)v66, v67).u64[0];
      v66.i64[1] = __PAIR64__(v70.u32[2], v68.u32[2]);
      float32x4_t v72 = vsqrtq_f32(vaddq_f32(v66, vaddq_f32(v69, v71)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v74 = vdivq_f32(_Q0, v72);
      float32x4_t v36 = vmulq_n_f32(v62, v74.f32[0]);
      float32x4_t v38 = vmulq_lane_f32(v63, *(float32x2_t *)v74.f32, 1);
      float32x4_t v39 = vmulq_laneq_f32(v64, v74, 2);
      float32x4_t v40 = vmulq_laneq_f32(v65, v74, 3);
      if ((v6 & 0x1000000) != 0)
      {
        float32x4_t v75 = vdivq_f32(_Q0, v74);
        unsigned int v76 = v1290;
        float32x4_t v77 = vld1q_dup_f32(v76);
        float32x4_t v78 = v1289;
        float32x4_t v79 = vld1q_dup_f32(v78);
        float32x4_t v37 = vdivq_f32(_Q0, vmlaq_f32(v77, vmlaq_n_f32(v79, v75, *(float *)(v4 + 12632)), v75));
        if ((v6 & 0x10000) == 0)
        {
LABEL_49:
          if (!v1451) {
            goto LABEL_58;
          }
          goto LABEL_50;
        }
      }
      else if ((v6 & 0x10000) == 0)
      {
        goto LABEL_49;
      }
    }
    else
    {
      float32x4_t v38 = *(float32x4_t *)(v4 + 12640);
      float32x4_t v39 = v38;
      float32x4_t v40 = v38;
      if ((v6 & 0x10000) == 0) {
        goto LABEL_49;
      }
    }
    float32x4_t v41 = vnegq_f32(*(float32x4_t *)(v4 + 12656));
    float32x4_t v42 = vmulq_f32(v36, v41);
    int32x4_t v43 = (int32x4_t)vmulq_f32(v38, v41);
    float32x4_t v44 = vmulq_f32(v39, v41);
    float32x4_t v45 = vmulq_f32(v40, v41);
    v46.i64[0] = vzip1q_s32((int32x4_t)v42, v43).u64[0];
    v46.i64[1] = __PAIR64__(v45.u32[0], v44.u32[0]);
    v47.i64[0] = vtrn2q_s32((int32x4_t)v42, v43).u64[0];
    v47.i64[1] = __PAIR64__(v45.u32[1], v44.u32[1]);
    v42.i64[0] = vzip2q_s32((int32x4_t)v42, v43).u64[0];
    v42.i64[1] = __PAIR64__(v45.u32[2], v44.u32[2]);
    float32x4_t v48 = vaddq_f32(v42, vaddq_f32(v46, v47));
    float32x4_t v49 = v1304;
    float32x4_t v50 = vld1q_dup_f32(v49);
    int32x4_t v51 = vcgeq_f32(v48, v50);
    int32x4_t v52 = (int32x4_t)vmvnq_s8((int8x16_t)v51);
    *(int16x4_t *)v52.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v52), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v52.i8))
    {
      float32x4_t v37 = 0uLL;
      if (!v1451) {
        goto LABEL_58;
      }
    }
    else
    {
      v52.i32[0] = 0;
      int8x16_t v1390 = (int8x16_t)v51;
      v51.i32[0] = v6 & 0x1000000;
      int8x16_t v53 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v51, v52), 0);
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1376 = (float32x4_t)vbslq_s8(v53, _Q1, (int8x16_t)v37);
      float v59 = *(float *)(v4 + 12636);
      float32x4_t v1515 = v26;
      float32x4_t v1531 = v25;
      float32x4_t v1483 = v28;
      float32x4_t v1499 = v27;
      float32x4_t v1409 = v39;
      float32x4_t v1418 = v36;
      float32x4_t v1473 = v40;
      float32x4_t v1478 = v48;
      float32x4_t v1401 = v38;
      unsigned int v1362 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(v4 + 560))(a1));
      unsigned int v1348 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1478.f32[1], v59));
      unsigned int v1340 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1478.f32[2], v59));
      *(float *)&unsigned int v60 = (*(float (**)(float, float))(v4 + 560))(v1478.f32[3], v59);
      float32x4_t v38 = v1401;
      float32x4_t v39 = v1409;
      float32x4_t v40 = v1473;
      float32x4_t v36 = v1418;
      float32x4_t v24 = v1479;
      float32x4_t v28 = v1483;
      float32x4_t v27 = v1499;
      float32x4_t v26 = v1515;
      float32x4_t v25 = v1531;
      float v19 = v1481;
      v61.i64[0] = __PAIR64__(v1348, v1362);
      v61.i64[1] = __PAIR64__(v60, v1340);
      float32x4_t v37 = vmulq_f32(v1376, (float32x4_t)vandq_s8(v61, v1390));
      if (!v1451) {
        goto LABEL_58;
      }
    }
LABEL_50:
    if (v37.f32[0] <= 0.0 && v37.f32[1] <= 0.0 && v37.f32[2] <= 0.0)
    {
      float32x4_t v1477 = 0u;
      if (v37.f32[3] <= 0.0)
      {
        float32x4_t v31 = 0uLL;
        goto LABEL_71;
      }
    }
LABEL_58:
    if (v1554)
    {
      if ((v6 & 0x200) != 0)
      {
        float32x4_t v84 = *(float32x4_t *)(v4 + 12544);
        float32x4_t v80 = vmulq_f32(v84, v11[13]);
        float32x4_t v81 = vmulq_f32(v84, v12[13]);
        float32x4_t v82 = vmulq_f32(v84, v13[13]);
        float32x4_t v83 = vmulq_f32(v84, v14[13]);
      }
      else
      {
        float32x4_t v80 = v1547[5];
        float32x4_t v81 = v17[5];
        float32x4_t v82 = v18[5];
        float32x4_t v83 = v19[5];
      }
    }
    else
    {
      float32x4_t v83 = 0uLL;
      float32x4_t v82 = 0uLL;
      float32x4_t v81 = 0uLL;
      float32x4_t v80 = 0uLL;
    }
    float32x4_t v85 = vmulq_f32(v32, v36);
    int32x4_t v86 = (int32x4_t)vmulq_f32(v33, v38);
    float32x4_t v87 = vmulq_f32(v34, v39);
    float32x4_t v88 = vmulq_f32(v35, v40);
    v89.i64[0] = vzip1q_s32((int32x4_t)v85, v86).u64[0];
    v89.i64[1] = __PAIR64__(v88.u32[0], v87.u32[0]);
    v90.i64[0] = vtrn2q_s32((int32x4_t)v85, v86).u64[0];
    v90.i64[1] = __PAIR64__(v88.u32[1], v87.u32[1]);
    v85.i64[0] = vzip2q_s32((int32x4_t)v85, v86).u64[0];
    v85.i64[1] = __PAIR64__(v88.u32[2], v87.u32[2]);
    float32x4_t v91 = vaddq_f32(v85, vaddq_f32(v89, v90));
    if (v91.f32[0] <= 0.0 && v91.f32[1] <= 0.0 && v91.f32[2] <= 0.0 && v91.f32[3] <= 0.0)
    {
      float32x4_t v31 = 0uLL;
      float32x4_t v1477 = 0u;
      if (v1554)
      {
        if (v1451)
        {
          float32x4_t v80 = vmulq_n_f32(v80, v37.f32[0]);
          float32x4_t v81 = vmulq_lane_f32(v81, *(float32x2_t *)v37.f32, 1);
          float32x4_t v82 = vmulq_laneq_f32(v82, v37, 2);
          float32x4_t v83 = vmulq_laneq_f32(v83, v37, 3);
        }
        float32x4_t v25 = vaddq_f32(v25, v80);
        float32x4_t v26 = vaddq_f32(v26, v81);
        float32x4_t v27 = vaddq_f32(v27, v82);
        float32x4_t v28 = vaddq_f32(v28, v83);
      }
LABEL_71:
      float32x4_t v1471 = v31;
      float32x4_t v1474 = v31;
      float32x4_t v1469 = v31;
      if ((v6 & 2) == 0) {
        goto LABEL_163;
      }
      goto LABEL_72;
    }
    float32x4_t v1475 = v40;
    if ((v6 & 0x400) != 0)
    {
      float32x4_t v157 = *(float32x4_t *)(v4 + 12560);
      float32x4_t v135 = vmulq_f32(v157, v11[13]);
      float32x4_t v136 = vmulq_f32(v157, v12[13]);
      float32x4_t v137 = vmulq_f32(v157, v13[13]);
      float32x4_t v138 = vmulq_f32(v157, v14[13]);
    }
    else
    {
      float32x4_t v135 = v1547[6];
      float32x4_t v136 = v17[6];
      float32x4_t v137 = v18[6];
      float32x4_t v138 = v19[6];
    }
    float32x4_t v158 = vmulq_n_f32(v135, fmaxf(v91.f32[0], 0.0));
    float32x4_t v159 = vmulq_n_f32(v136, fmaxf(v91.f32[1], 0.0));
    float32x4_t v160 = vmulq_n_f32(v137, fmaxf(v91.f32[2], 0.0));
    float32x4_t v161 = vmulq_n_f32(v138, fmaxf(v91.f32[3], 0.0));
    if (v1554)
    {
      float32x4_t v158 = vaddq_f32(v80, v158);
      float32x4_t v159 = vaddq_f32(v81, v159);
      float32x4_t v160 = vaddq_f32(v82, v160);
      float32x4_t v161 = vaddq_f32(v83, v161);
    }
    float32x4_t v1430 = v158;
    float32x4_t v1410 = v160;
    float32x4_t v1419 = v159;
    float32x4_t v1402 = v161;
    if ((v5 & 0x20) != 0)
    {
      float32x4_t v175 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v32, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v32, 0xCuLL)));
      int32x4_t v176 = (int32x4_t)vmlsq_f32(vmulq_f32(v175, v36), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v36, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v36, 0xCuLL))), v32);
      int32x4_t v177 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v176, 0xCuLL);
      float32x4_t v178 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v33, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v33, 0xCuLL)));
      float32x4_t v179 = vmlsq_f32(vmulq_f32(v178, v38), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v38, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v38, 0xCuLL))), v33);
      int32x4_t v180 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v179, 0xCuLL);
      float32x4_t v181 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v34, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v34, 0xCuLL)));
      int32x4_t v182 = (int32x4_t)vmlsq_f32(vmulq_f32(v181, v39), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v39, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v39, 0xCuLL))), v34);
      int32x4_t v183 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v182, 0xCuLL);
      float32x4_t v184 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v35, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v35, 0xCuLL)));
      int32x4_t v185 = (int32x4_t)vmlsq_f32(vmulq_f32(v184, v1475), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1475, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1475, 0xCuLL))), v35);
      int32x4_t v186 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v185, 0xCuLL);
      int32x4_t v187 = (int32x4_t)vmlsq_f32(vmulq_f32(v175, (float32x4_t)vrev64q_s32(vuzp1q_s32(v176, v177))), (float32x4_t)vextq_s8((int8x16_t)v177, (int8x16_t)vrev64q_s32(v177), 8uLL), v32);
      int32x4_t v188 = (int32x4_t)vmlsq_f32(vmulq_f32(v178, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v179, v180))), (float32x4_t)vextq_s8((int8x16_t)v180, (int8x16_t)vrev64q_s32(v180), 8uLL), v33);
      int32x4_t v189 = (int32x4_t)vmlsq_f32(vmulq_f32(v181, (float32x4_t)vrev64q_s32(vuzp1q_s32(v182, v183))), (float32x4_t)vextq_s8((int8x16_t)v183, (int8x16_t)vrev64q_s32(v183), 8uLL), v34);
      int32x4_t v190 = (int32x4_t)vmlsq_f32(vmulq_f32(v184, (float32x4_t)vrev64q_s32(vuzp1q_s32(v185, v186))), (float32x4_t)vextq_s8((int8x16_t)v186, (int8x16_t)vrev64q_s32(v186), 8uLL), v35);
      v179.i64[0] = 0x4000000040000000;
      v179.i64[1] = 0x4000000040000000;
      float32x4_t v191 = vmlaq_f32(v36, v179, (float32x4_t)vrev64q_s32(vuzp1q_s32(v187, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v187, 0xCuLL))));
      float32x4_t v192 = vmlaq_f32(v38, v179, (float32x4_t)vrev64q_s32(vuzp1q_s32(v188, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v188, 0xCuLL))));
      float32x4_t v193 = vmlaq_f32(v39, v179, (float32x4_t)vrev64q_s32(vuzp1q_s32(v189, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v189, 0xCuLL))));
      float32x4_t v194 = vmlaq_f32(v1475, v179, (float32x4_t)vrev64q_s32(vuzp1q_s32(v190, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v190, 0xCuLL))));
      if ((v5 & 8) != 0)
      {
        float32x4_t v217 = vmulq_f32(v1552, v1552);
        int32x4_t v218 = (int32x4_t)vmulq_f32(v1548, v1548);
        float32x4_t v219 = vmulq_f32(v1550, v1550);
        float32x4_t v220 = vmulq_f32(v24, v24);
        v221.i64[0] = vzip1q_s32((int32x4_t)v217, v218).u64[0];
        v221.i64[1] = __PAIR64__(v220.u32[0], v219.u32[0]);
        v222.i64[0] = vtrn2q_s32((int32x4_t)v217, v218).u64[0];
        v222.i64[1] = __PAIR64__(v220.u32[1], v219.u32[1]);
        v217.i64[0] = vzip2q_s32((int32x4_t)v217, v218).u64[0];
        v217.i64[1] = __PAIR64__(v220.u32[2], v219.u32[2]);
        __asm { FMOV            V7.4S, #1.0 }
        float32x4_t v224 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v217, vaddq_f32(v221, v222))));
        float32x4_t v225 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1552), v224.f32[0]), v191);
        int32x4_t v226 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v224.f32, 1), v192);
        float32x4_t v227 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1550), v224, 2), v193);
        float32x4_t v228 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v24), v224, 3), v194);
        v219.i64[0] = vzip1q_s32((int32x4_t)v225, v226).u64[0];
        v219.i64[1] = __PAIR64__(v228.u32[0], v227.u32[0]);
        v220.i64[0] = vtrn2q_s32((int32x4_t)v225, v226).u64[0];
        v220.i64[1] = __PAIR64__(v228.u32[1], v227.u32[1]);
        v225.i64[0] = vzip2q_s32((int32x4_t)v225, v226).u64[0];
        v225.i64[1] = __PAIR64__(v228.u32[2], v227.u32[2]);
        float32x4_t v195 = vaddq_f32(v225, vaddq_f32(v219, v220));
      }
      else
      {
        v195.i64[0] = vzip2q_s32((int32x4_t)v191, (int32x4_t)v192).u64[0];
        v195.i64[1] = __PAIR64__(v194.u32[2], v193.u32[2]);
      }
      float32x4_t v161 = v1402;
      float32x4_t v160 = v1410;
      float v9 = 1.0;
    }
    else
    {
      if (v1286)
      {
        if ((v5 & 8) != 0)
        {
          float32x4_t v249 = vmulq_f32(v1552, v1552);
          int32x4_t v250 = (int32x4_t)vmulq_f32(v1548, v1548);
          float32x4_t v251 = vmulq_f32(v1550, v1550);
          v252.i64[0] = vzip1q_s32((int32x4_t)v249, v250).u64[0];
          v252.i32[2] = v251.i32[0];
          float32x4_t v253 = vmulq_f32(v24, v24);
          v252.i32[3] = v253.i32[0];
          v254.i64[0] = vtrn2q_s32((int32x4_t)v249, v250).u64[0];
          v254.i64[1] = __PAIR64__(v253.u32[1], v251.u32[1]);
          v249.i64[0] = vzip2q_s32((int32x4_t)v249, v250).u64[0];
          v249.i64[1] = __PAIR64__(v253.u32[2], v251.u32[2]);
          __asm { FMOV            V16.4S, #1.0 }
          float32x4_t v256 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v249, vaddq_f32(v252, v254))));
          float32x4_t v162 = vmulq_n_f32(vnegq_f32(v1552), v256.f32[0]);
          float32x4_t v163 = vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v256.f32, 1);
          float32x4_t v164 = vmulq_laneq_f32(vnegq_f32(v1550), v256, 2);
          float32x4_t v165 = vmulq_laneq_f32(vnegq_f32(v24), v256, 3);
        }
        else
        {
          float32x4_t v162 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v163 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v164 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v165 = (float32x4_t)xmmword_227DC2100;
        }
        float32x4_t v257 = vaddq_f32(v36, v162);
        float32x4_t v258 = vaddq_f32(v38, v163);
        float32x4_t v259 = vaddq_f32(v39, v164);
        float32x4_t v260 = vaddq_f32(v1475, v165);
        float32x4_t v261 = vmulq_f32(v257, v257);
        int32x4_t v262 = (int32x4_t)vmulq_f32(v258, v258);
        float32x4_t v263 = vmulq_f32(v259, v259);
        v264.i64[0] = vzip1q_s32((int32x4_t)v261, v262).u64[0];
        v264.i32[2] = v263.i32[0];
        float32x4_t v265 = vmulq_f32(v260, v260);
        v264.i32[3] = v265.i32[0];
        v266.i64[0] = vtrn2q_s32((int32x4_t)v261, v262).u64[0];
        v266.i64[1] = __PAIR64__(v265.u32[1], v263.u32[1]);
        v261.i64[0] = vzip2q_s32((int32x4_t)v261, v262).u64[0];
        v261.i64[1] = __PAIR64__(v265.u32[2], v263.u32[2]);
        __asm { FMOV            V17.4S, #1.0 }
        float32x4_t v268 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v261, vaddq_f32(v264, v266))));
        float32x4_t v241 = vmulq_n_f32(v257, v268.f32[0]);
        float32x4_t v242 = vmulq_lane_f32(v258, *(float32x2_t *)v268.f32, 1);
        float32x4_t v243 = vmulq_laneq_f32(v259, v268, 2);
        float32x4_t v244 = vmulq_laneq_f32(v260, v268, 3);
      }
      else
      {
        float32x4_t v241 = *(float32x4_t *)(v4 + 12672);
        float32x4_t v242 = v241;
        float32x4_t v243 = v241;
        float32x4_t v244 = v241;
      }
      float v9 = 1.0;
      float32x4_t v269 = vmulq_f32(v32, v241);
      int32x4_t v270 = (int32x4_t)vmulq_f32(v33, v242);
      float32x4_t v271 = vmulq_f32(v34, v243);
      float32x4_t v272 = vmulq_f32(v35, v244);
      v273.i64[0] = vzip1q_s32((int32x4_t)v269, v270).u64[0];
      v273.i64[1] = __PAIR64__(v272.u32[0], v271.u32[0]);
      v274.i64[0] = vtrn2q_s32((int32x4_t)v269, v270).u64[0];
      v274.i64[1] = __PAIR64__(v272.u32[1], v271.u32[1]);
      v269.i64[0] = vzip2q_s32((int32x4_t)v269, v270).u64[0];
      v269.i64[1] = __PAIR64__(v272.u32[2], v271.u32[2]);
      float32x4_t v195 = vaddq_f32(v269, vaddq_f32(v273, v274));
    }
    if (v91.f32[0] <= 0.0) {
      float v275 = 0.0;
    }
    else {
      float v275 = v195.f32[0];
    }
    if (v91.f32[1] <= 0.0) {
      float v276 = 0.0;
    }
    else {
      float v276 = v195.f32[1];
    }
    if (v91.f32[2] <= 0.0) {
      float v277 = 0.0;
    }
    else {
      float v277 = v195.f32[2];
    }
    if (v91.f32[3] <= 0.0) {
      float v278 = 0.0;
    }
    else {
      float v278 = v195.f32[3];
    }
    float32x4_t v1477 = 0u;
    if (v275 > 0.0 || v276 > 0.0 || v277 > 0.0 || v278 > 0.0)
    {
      float32x4_t v1476 = v37;
      float32x4_t v1485 = v28;
      float32x4_t v1501 = v27;
      float32x4_t v1517 = v26;
      float32x4_t v1533 = v25;
      float32x4_t v1453 = v8;
      float v281 = fmaxf(v276, 0.0);
      float v282 = fmaxf(v277, 0.0);
      float v283 = v17[4].f32[0];
      float v284 = fmaxf(v278, 0.0);
      float v285 = v18[4].f32[0];
      float v286 = v19[4].f32[0];
      float v287 = v19;
      LODWORD(v1472) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(fmaxf(v275, 0.0), v1547[4].f32[0]));
      LODWORD(v1470) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v281, v283));
      LODWORD(v1392) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v282, v285));
      a1 = (*(uint64_t (**)(float, float))(v4 + 560))(v284, v286);
      if ((v6 & 0x800) != 0)
      {
        float32x4_t v293 = *(float32x4_t *)(v4 + 12576);
        float32x4_t v289 = vmulq_f32(v293, v11[13]);
        float32x4_t v290 = vmulq_f32(v293, v12[13]);
        float32x4_t v291 = vmulq_f32(v293, v13[13]);
        float32x4_t v292 = vmulq_f32(v293, v14[13]);
      }
      else
      {
        float32x4_t v289 = v1547[7];
        float32x4_t v290 = v17[7];
        float32x4_t v291 = v18[7];
        float32x4_t v292 = v287[7];
      }
      float v19 = v287;
      float32x4_t v37 = v1476;
      float32x4_t v279 = v1430;
      float32x4_t v160 = v1410;
      float32x4_t v280 = v1419;
      float32x4_t v294 = vmulq_n_f32(v289, v1472);
      float32x4_t v295 = vmulq_n_f32(v290, v1470);
      float32x4_t v161 = v1402;
      float32x4_t v296 = vmulq_n_f32(v291, v1392);
      float32x4_t v297 = vmulq_n_f32(v292, v288);
      LOWORD(v5) = v1427;
      unint64_t v8 = v1453;
      float32x4_t v26 = v1517;
      float32x4_t v25 = v1533;
      float32x4_t v28 = v1485;
      float32x4_t v27 = v1501;
      float32x4_t v24 = v1479;
      if ((v1427 & 0x10) != 0)
      {
        if (v1451)
        {
          float32x4_t v294 = vmulq_n_f32(v294, v1476.f32[0]);
          float32x4_t v295 = vmulq_lane_f32(v295, *(float32x2_t *)v1476.f32, 1);
          float32x4_t v296 = vmulq_laneq_f32(v296, v1476, 2);
          float32x4_t v297 = vmulq_laneq_f32(v297, v1476, 3);
        }
        float32x4_t v1474 = vaddq_f32(v295, (float32x4_t)0);
        float32x4_t v1477 = vaddq_f32(v294, (float32x4_t)0);
        float32x4_t v1471 = vaddq_f32(v296, (float32x4_t)0);
        float32x4_t v298 = vaddq_f32(v297, (float32x4_t)0);
      }
      else
      {
        float32x4_t v279 = vaddq_f32(v1430, v294);
        float32x4_t v280 = vaddq_f32(v1419, v295);
        float32x4_t v160 = vaddq_f32(v1410, v296);
        float32x4_t v161 = vaddq_f32(v1402, v297);
        float32x4_t v298 = 0uLL;
        float32x4_t v1471 = 0u;
        float32x4_t v1474 = 0u;
      }
      float32x4_t v1469 = v298;
      if (v1451)
      {
LABEL_161:
        float32x4_t v279 = vmulq_n_f32(v279, v37.f32[0]);
        float32x4_t v280 = vmulq_lane_f32(v280, *(float32x2_t *)v37.f32, 1);
        float32x4_t v160 = vmulq_laneq_f32(v160, v37, 2);
        float32x4_t v161 = vmulq_laneq_f32(v161, v37, 3);
      }
    }
    else
    {
      float32x4_t v1471 = 0uLL;
      float32x4_t v1474 = 0uLL;
      float32x4_t v1469 = 0uLL;
      float32x4_t v279 = v1430;
      float32x4_t v280 = v1419;
      if (v1451) {
        goto LABEL_161;
      }
    }
    float32x4_t v25 = vaddq_f32(v25, v279);
    float32x4_t v26 = vaddq_f32(v26, v280);
    float32x4_t v27 = vaddq_f32(v27, v160);
    float32x4_t v28 = vaddq_f32(v28, v161);
    if ((v6 & 2) == 0) {
      goto LABEL_163;
    }
LABEL_72:
    float32x4_t v92 = v11[7];
    float32x4_t v93 = v12[7];
    float32x4_t v94 = v13[7];
    float32x4_t v95 = v14[7];
    if ((v5 & 2) != 0)
    {
      float32x4_t v92 = vnegq_f32(v92);
      float32x4_t v93 = vnegq_f32(v93);
      float32x4_t v94 = vnegq_f32(v94);
      float32x4_t v95 = vnegq_f32(v95);
    }
    float32x4_t v96 = *(float32x4_t *)(v4 + 12800);
    float32x4_t v97 = 0uLL;
    if ((v5 & 0x200) != 0)
    {
      float32x4_t v118 = vsubq_f32(v96, v1552);
      float32x4_t v119 = vsubq_f32(v96, v1548);
      float32x4_t v120 = vsubq_f32(v96, v1550);
      float32x4_t v121 = vsubq_f32(v96, v24);
      float32x4_t v122 = vmulq_f32(v118, v118);
      int32x4_t v123 = (int32x4_t)vmulq_f32(v119, v119);
      float32x4_t v124 = vmulq_f32(v120, v120);
      v125.i64[0] = vzip1q_s32((int32x4_t)v122, v123).u64[0];
      v125.i32[2] = v124.i32[0];
      float32x4_t v126 = vmulq_f32(v121, v121);
      v125.i32[3] = v126.i32[0];
      v127.i64[0] = vtrn2q_s32((int32x4_t)v122, v123).u64[0];
      v127.i64[1] = __PAIR64__(v126.u32[1], v124.u32[1]);
      v122.i64[0] = vzip2q_s32((int32x4_t)v122, v123).u64[0];
      v122.i64[1] = __PAIR64__(v126.u32[2], v124.u32[2]);
      float32x4_t v128 = vsqrtq_f32(vaddq_f32(v122, vaddq_f32(v125, v127)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v130 = vdivq_f32(_Q0, v128);
      float32x4_t v96 = vmulq_n_f32(v118, v130.f32[0]);
      float32x4_t v98 = vmulq_lane_f32(v119, *(float32x2_t *)v130.f32, 1);
      float32x4_t v99 = vmulq_laneq_f32(v120, v130, 2);
      float32x4_t v100 = vmulq_laneq_f32(v121, v130, 3);
      if ((v6 & 0x2000000) != 0)
      {
        float32x4_t v139 = vdivq_f32(_Q0, v130);
        float32x4_t v140 = v1292;
        float32x4_t v141 = vld1q_dup_f32(v140);
        float32x4_t v142 = v1291;
        float32x4_t v143 = vld1q_dup_f32(v142);
        float32x4_t v97 = vdivq_f32(_Q0, vmlaq_f32(v141, vmlaq_n_f32(v143, v139, *(float *)(v4 + 12792)), v139));
        if ((v6 & 0x20000) == 0)
        {
LABEL_81:
          if (!v1450) {
            goto LABEL_86;
          }
          goto LABEL_82;
        }
      }
      else if ((v6 & 0x20000) == 0)
      {
        goto LABEL_81;
      }
    }
    else
    {
      float32x4_t v98 = *(float32x4_t *)(v4 + 12800);
      float32x4_t v99 = v98;
      float32x4_t v100 = v98;
      if ((v6 & 0x20000) == 0) {
        goto LABEL_81;
      }
    }
    float32x4_t v101 = vnegq_f32(*(float32x4_t *)(v4 + 12816));
    float32x4_t v102 = vmulq_f32(v96, v101);
    int32x4_t v103 = (int32x4_t)vmulq_f32(v98, v101);
    float32x4_t v104 = vmulq_f32(v99, v101);
    float32x4_t v105 = vmulq_f32(v100, v101);
    v106.i64[0] = vzip1q_s32((int32x4_t)v102, v103).u64[0];
    v106.i64[1] = __PAIR64__(v105.u32[0], v104.u32[0]);
    v107.i64[0] = vtrn2q_s32((int32x4_t)v102, v103).u64[0];
    v107.i64[1] = __PAIR64__(v105.u32[1], v104.u32[1]);
    v102.i64[0] = vzip2q_s32((int32x4_t)v102, v103).u64[0];
    v102.i64[1] = __PAIR64__(v105.u32[2], v104.u32[2]);
    float32x4_t v108 = vaddq_f32(v102, vaddq_f32(v106, v107));
    float32x4_t v109 = v1305;
    float32x4_t v110 = vld1q_dup_f32(v109);
    int32x4_t v111 = vcgeq_f32(v108, v110);
    int32x4_t v112 = (int32x4_t)vmvnq_s8((int8x16_t)v111);
    *(int16x4_t *)v112.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v112), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v112.i8))
    {
      float32x4_t v97 = 0uLL;
      if (!v1450) {
        goto LABEL_86;
      }
    }
    else
    {
      v112.i32[0] = 0;
      int8x16_t v1341 = (int8x16_t)v111;
      v111.i32[0] = v6 & 0x2000000;
      int8x16_t v113 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v111, v112), 0);
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1333 = (float32x4_t)vbslq_s8(v113, _Q1, (int8x16_t)v97);
      float v115 = *(float *)(v4 + 12796);
      float32x4_t v1516 = v26;
      float32x4_t v1532 = v25;
      float32x4_t v1484 = v28;
      float32x4_t v1500 = v27;
      float32x4_t v1363 = v99;
      float32x4_t v1377 = v96;
      float32x4_t v1428 = v100;
      float32x4_t v1349 = v98;
      float32x4_t v1452 = v108;
      unsigned int v1326 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(v4 + 560))(a1));
      unsigned int v1319 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1452.f32[1], v115));
      unsigned int v1312 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1452.f32[2], v115));
      *(float *)&unsigned int v116 = (*(float (**)(float, float))(v4 + 560))(v1452.f32[3], v115);
      float32x4_t v98 = v1349;
      float32x4_t v99 = v1363;
      float32x4_t v100 = v1428;
      float32x4_t v96 = v1377;
      float32x4_t v24 = v1479;
      float32x4_t v28 = v1484;
      float32x4_t v27 = v1500;
      float32x4_t v26 = v1516;
      float32x4_t v25 = v1532;
      float v19 = v1481;
      v117.i64[0] = __PAIR64__(v1319, v1326);
      v117.i64[1] = __PAIR64__(v116, v1312);
      float32x4_t v97 = vmulq_f32(v1333, (float32x4_t)vandq_s8(v117, v1341));
      if (!v1450) {
        goto LABEL_86;
      }
    }
LABEL_82:
    if (v97.f32[0] <= 0.0 && v97.f32[1] <= 0.0 && v97.f32[2] <= 0.0 && v97.f32[3] <= 0.0)
    {
LABEL_163:
      if ((v6 & 4) == 0) {
        goto LABEL_231;
      }
      goto LABEL_164;
    }
LABEL_86:
    if (v1554)
    {
      if ((v6 & 0x200) != 0)
      {
        float32x4_t v144 = *(float32x4_t *)(v4 + 12704);
        float32x4_t v131 = vmulq_f32(v144, v11[13]);
        float32x4_t v132 = vmulq_f32(v144, v12[13]);
        float32x4_t v133 = vmulq_f32(v144, v13[13]);
        float32x4_t v134 = vmulq_f32(v144, v14[13]);
      }
      else
      {
        float32x4_t v131 = v1547[8];
        float32x4_t v132 = v17[8];
        float32x4_t v133 = v18[8];
        float32x4_t v134 = v19[8];
      }
    }
    else
    {
      float32x4_t v134 = 0uLL;
      float32x4_t v133 = 0uLL;
      float32x4_t v132 = 0uLL;
      float32x4_t v131 = 0uLL;
    }
    float32x4_t v145 = vmulq_f32(v92, v96);
    int32x4_t v146 = (int32x4_t)vmulq_f32(v93, v98);
    float32x4_t v147 = vmulq_f32(v94, v99);
    float32x4_t v148 = vmulq_f32(v95, v100);
    v149.i64[0] = vzip1q_s32((int32x4_t)v145, v146).u64[0];
    v149.i64[1] = __PAIR64__(v148.u32[0], v147.u32[0]);
    v150.i64[0] = vtrn2q_s32((int32x4_t)v145, v146).u64[0];
    v150.i64[1] = __PAIR64__(v148.u32[1], v147.u32[1]);
    v145.i64[0] = vzip2q_s32((int32x4_t)v145, v146).u64[0];
    v145.i64[1] = __PAIR64__(v148.u32[2], v147.u32[2]);
    float32x4_t v151 = vaddq_f32(v145, vaddq_f32(v149, v150));
    if (v151.f32[0] > 0.0 || v151.f32[1] > 0.0 || v151.f32[2] > 0.0 || v151.f32[3] > 0.0)
    {
      float32x4_t v1429 = v100;
      float32x4_t v152 = v99;
      if ((v6 & 0x400) != 0)
      {
        float32x4_t v166 = *(float32x4_t *)(v4 + 12720);
        float32x4_t v153 = vmulq_f32(v166, v11[13]);
        float32x4_t v154 = vmulq_f32(v166, v12[13]);
        float32x4_t v155 = vmulq_f32(v166, v13[13]);
        float32x4_t v156 = vmulq_f32(v166, v14[13]);
      }
      else
      {
        float32x4_t v153 = v1547[9];
        float32x4_t v154 = v17[9];
        float32x4_t v155 = v18[9];
        float32x4_t v156 = v19[9];
      }
      float32x4_t v167 = vmulq_n_f32(v153, fmaxf(v151.f32[0], 0.0));
      float32x4_t v168 = vmulq_n_f32(v154, fmaxf(v151.f32[1], 0.0));
      float32x4_t v169 = vmulq_n_f32(v155, fmaxf(v151.f32[2], 0.0));
      float32x4_t v170 = vmulq_n_f32(v156, fmaxf(v151.f32[3], 0.0));
      if (v1554)
      {
        float32x4_t v167 = vaddq_f32(v131, v167);
        float32x4_t v168 = vaddq_f32(v132, v168);
        float32x4_t v169 = vaddq_f32(v133, v169);
        float32x4_t v170 = vaddq_f32(v134, v170);
      }
      float32x4_t v1411 = v168;
      float32x4_t v1420 = v167;
      float32x4_t v1391 = v170;
      float32x4_t v1403 = v169;
      if ((v5 & 0x20) != 0)
      {
        float32x4_t v196 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v92, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v92, 0xCuLL)));
        int32x4_t v197 = (int32x4_t)vmlsq_f32(vmulq_f32(v196, v96), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v96, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v96, 0xCuLL))), v92);
        int32x4_t v198 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v197, 0xCuLL);
        float32x4_t v199 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v93, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v93, 0xCuLL)));
        float32x4_t v200 = vmlsq_f32(vmulq_f32(v199, v98), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v98, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v98, 0xCuLL))), v93);
        int32x4_t v201 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v200, 0xCuLL);
        float32x4_t v202 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v94, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v94, 0xCuLL)));
        int32x4_t v203 = (int32x4_t)vmlsq_f32(vmulq_f32(v202, v152), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v152, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v152, 0xCuLL))), v94);
        int32x4_t v204 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v203, 0xCuLL);
        float32x4_t v205 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v95, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v95, 0xCuLL)));
        int32x4_t v206 = (int32x4_t)vmlsq_f32(vmulq_f32(v205, v1429), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1429, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1429, 0xCuLL))), v95);
        int32x4_t v207 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v206, 0xCuLL);
        int32x4_t v208 = (int32x4_t)vmlsq_f32(vmulq_f32(v196, (float32x4_t)vrev64q_s32(vuzp1q_s32(v197, v198))), (float32x4_t)vextq_s8((int8x16_t)v198, (int8x16_t)vrev64q_s32(v198), 8uLL), v92);
        int32x4_t v209 = (int32x4_t)vmlsq_f32(vmulq_f32(v199, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v200, v201))), (float32x4_t)vextq_s8((int8x16_t)v201, (int8x16_t)vrev64q_s32(v201), 8uLL), v93);
        int32x4_t v210 = (int32x4_t)vmlsq_f32(vmulq_f32(v202, (float32x4_t)vrev64q_s32(vuzp1q_s32(v203, v204))), (float32x4_t)vextq_s8((int8x16_t)v204, (int8x16_t)vrev64q_s32(v204), 8uLL), v94);
        int32x4_t v211 = (int32x4_t)vmlsq_f32(vmulq_f32(v205, (float32x4_t)vrev64q_s32(vuzp1q_s32(v206, v207))), (float32x4_t)vextq_s8((int8x16_t)v207, (int8x16_t)vrev64q_s32(v207), 8uLL), v95);
        v200.i64[0] = 0x4000000040000000;
        v200.i64[1] = 0x4000000040000000;
        float32x4_t v212 = vmlaq_f32(v96, v200, (float32x4_t)vrev64q_s32(vuzp1q_s32(v208, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v208, 0xCuLL))));
        float32x4_t v213 = vmlaq_f32(v98, v200, (float32x4_t)vrev64q_s32(vuzp1q_s32(v209, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v209, 0xCuLL))));
        float32x4_t v214 = vmlaq_f32(v152, v200, (float32x4_t)vrev64q_s32(vuzp1q_s32(v210, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v210, 0xCuLL))));
        float32x4_t v215 = vmlaq_f32(v1429, v200, (float32x4_t)vrev64q_s32(vuzp1q_s32(v211, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v211, 0xCuLL))));
        if ((v5 & 8) != 0)
        {
          float32x4_t v229 = vmulq_f32(v1552, v1552);
          int32x4_t v230 = (int32x4_t)vmulq_f32(v1548, v1548);
          float32x4_t v231 = vmulq_f32(v1550, v1550);
          float32x4_t v24 = v1479;
          float32x4_t v232 = vmulq_f32(v24, v24);
          v233.i64[0] = vzip1q_s32((int32x4_t)v229, v230).u64[0];
          v233.i64[1] = __PAIR64__(v232.u32[0], v231.u32[0]);
          v234.i64[0] = vtrn2q_s32((int32x4_t)v229, v230).u64[0];
          v234.i64[1] = __PAIR64__(v232.u32[1], v231.u32[1]);
          v229.i64[0] = vzip2q_s32((int32x4_t)v229, v230).u64[0];
          v229.i64[1] = __PAIR64__(v232.u32[2], v231.u32[2]);
          __asm { FMOV            V7.4S, #1.0 }
          float32x4_t v236 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v229, vaddq_f32(v233, v234))));
          float32x4_t v237 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1552), v236.f32[0]), v212);
          int32x4_t v238 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v236.f32, 1), v213);
          float32x4_t v239 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1550), v236, 2), v214);
          float32x4_t v240 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1479), v236, 3), v215);
          v231.i64[0] = vzip1q_s32((int32x4_t)v237, v238).u64[0];
          v231.i64[1] = __PAIR64__(v240.u32[0], v239.u32[0]);
          v232.i64[0] = vtrn2q_s32((int32x4_t)v237, v238).u64[0];
          v232.i64[1] = __PAIR64__(v240.u32[1], v239.u32[1]);
          v237.i64[0] = vzip2q_s32((int32x4_t)v237, v238).u64[0];
          v237.i64[1] = __PAIR64__(v240.u32[2], v239.u32[2]);
          float32x4_t v216 = vaddq_f32(v237, vaddq_f32(v231, v232));
          float32x4_t v170 = v1391;
          float32x4_t v169 = v1403;
          float v9 = 1.0;
        }
        else
        {
          v216.i64[0] = vzip2q_s32((int32x4_t)v212, (int32x4_t)v213).u64[0];
          v216.i64[1] = __PAIR64__(v215.u32[2], v214.u32[2]);
          float32x4_t v170 = v1391;
          float32x4_t v169 = v1403;
          float v9 = 1.0;
          float32x4_t v24 = v1479;
        }
      }
      else
      {
        if (v1285)
        {
          if ((v5 & 8) != 0)
          {
            float32x4_t v405 = vmulq_f32(v1552, v1552);
            int32x4_t v406 = (int32x4_t)vmulq_f32(v1548, v1548);
            float32x4_t v407 = vmulq_f32(v1550, v1550);
            v408.i64[0] = vzip1q_s32((int32x4_t)v405, v406).u64[0];
            v408.i32[2] = v407.i32[0];
            float32x4_t v409 = vmulq_f32(v1479, v1479);
            v408.i32[3] = v409.i32[0];
            v410.i64[0] = vtrn2q_s32((int32x4_t)v405, v406).u64[0];
            v410.i64[1] = __PAIR64__(v409.u32[1], v407.u32[1]);
            v405.i64[0] = vzip2q_s32((int32x4_t)v405, v406).u64[0];
            v405.i64[1] = __PAIR64__(v409.u32[2], v407.u32[2]);
            __asm { FMOV            V16.4S, #1.0 }
            float32x4_t v412 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v405, vaddq_f32(v408, v410))));
            float32x4_t v171 = vmulq_n_f32(vnegq_f32(v1552), v412.f32[0]);
            float32x4_t v172 = vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v412.f32, 1);
            float32x4_t v173 = vmulq_laneq_f32(vnegq_f32(v1550), v412, 2);
            float32x4_t v174 = vmulq_laneq_f32(vnegq_f32(v1479), v412, 3);
          }
          else
          {
            float32x4_t v171 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v172 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v173 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v174 = (float32x4_t)xmmword_227DC2100;
          }
          float32x4_t v413 = vaddq_f32(v96, v171);
          float32x4_t v414 = vaddq_f32(v98, v172);
          float32x4_t v415 = vaddq_f32(v152, v173);
          float32x4_t v416 = vaddq_f32(v1429, v174);
          float32x4_t v417 = vmulq_f32(v413, v413);
          int32x4_t v418 = (int32x4_t)vmulq_f32(v414, v414);
          float32x4_t v419 = vmulq_f32(v415, v415);
          v420.i64[0] = vzip1q_s32((int32x4_t)v417, v418).u64[0];
          v420.i32[2] = v419.i32[0];
          float32x4_t v421 = vmulq_f32(v416, v416);
          v420.i32[3] = v421.i32[0];
          v422.i64[0] = vtrn2q_s32((int32x4_t)v417, v418).u64[0];
          v422.i64[1] = __PAIR64__(v421.u32[1], v419.u32[1]);
          v417.i64[0] = vzip2q_s32((int32x4_t)v417, v418).u64[0];
          v417.i64[1] = __PAIR64__(v421.u32[2], v419.u32[2]);
          __asm { FMOV            V17.4S, #1.0 }
          float32x4_t v424 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v417, vaddq_f32(v420, v422))));
          float32x4_t v245 = vmulq_n_f32(v413, v424.f32[0]);
          float32x4_t v246 = vmulq_lane_f32(v414, *(float32x2_t *)v424.f32, 1);
          float32x4_t v247 = vmulq_laneq_f32(v415, v424, 2);
          float32x4_t v248 = vmulq_laneq_f32(v416, v424, 3);
        }
        else
        {
          float32x4_t v245 = *(float32x4_t *)(v4 + 12832);
          float32x4_t v246 = v245;
          float32x4_t v247 = v245;
          float32x4_t v248 = v245;
        }
        float32x4_t v24 = v1479;
        float32x4_t v425 = vmulq_f32(v92, v245);
        int32x4_t v426 = (int32x4_t)vmulq_f32(v93, v246);
        float32x4_t v427 = vmulq_f32(v94, v247);
        float32x4_t v428 = vmulq_f32(v95, v248);
        v429.i64[0] = vzip1q_s32((int32x4_t)v425, v426).u64[0];
        v429.i64[1] = __PAIR64__(v428.u32[0], v427.u32[0]);
        v430.i64[0] = vtrn2q_s32((int32x4_t)v425, v426).u64[0];
        v430.i64[1] = __PAIR64__(v428.u32[1], v427.u32[1]);
        v425.i64[0] = vzip2q_s32((int32x4_t)v425, v426).u64[0];
        v425.i64[1] = __PAIR64__(v428.u32[2], v427.u32[2]);
        float32x4_t v216 = vaddq_f32(v425, vaddq_f32(v429, v430));
      }
      if (v151.f32[0] <= 0.0) {
        float v431 = 0.0;
      }
      else {
        float v431 = v216.f32[0];
      }
      if (v151.f32[1] <= 0.0) {
        float v432 = 0.0;
      }
      else {
        float v432 = v216.f32[1];
      }
      if (v151.f32[2] <= 0.0) {
        float v433 = 0.0;
      }
      else {
        float v433 = v216.f32[2];
      }
      if (v151.f32[3] <= 0.0) {
        float v434 = 0.0;
      }
      else {
        float v434 = v216.f32[3];
      }
      if (v431 <= 0.0 && v432 <= 0.0 && v433 <= 0.0 && v434 <= 0.0)
      {
        float32x4_t v436 = v1411;
        float32x4_t v435 = v1420;
        if (!v1450) {
          goto LABEL_230;
        }
        goto LABEL_229;
      }
      float32x4_t v1432 = v97;
      float32x4_t v1488 = v28;
      float32x4_t v1504 = v27;
      float32x4_t v1520 = v26;
      float32x4_t v1536 = v25;
      float32x4_t v1456 = v8;
      float v498 = fmaxf(v432, 0.0);
      float v499 = fmaxf(v433, 0.0);
      float v500 = v17[4].f32[0];
      float v501 = fmaxf(v434, 0.0);
      float v502 = v18[4].f32[0];
      float v503 = v19[4].f32[0];
      int32x4_t v504 = v19;
      LODWORD(v1380) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(fmaxf(v431, 0.0), v1547[4].f32[0]));
      LODWORD(v1366) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v498, v500));
      LODWORD(v1352) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v499, v502));
      a1 = (*(uint64_t (**)(float, float))(v4 + 560))(v501, v503);
      if ((v6 & 0x800) != 0)
      {
        float32x4_t v540 = *(float32x4_t *)(v4 + 12736);
        float32x4_t v506 = vmulq_f32(v540, v11[13]);
        float32x4_t v507 = vmulq_f32(v540, v12[13]);
        float32x4_t v508 = vmulq_f32(v540, v13[13]);
        float32x4_t v509 = vmulq_f32(v540, v14[13]);
      }
      else
      {
        float32x4_t v506 = v1547[10];
        float32x4_t v507 = v17[10];
        float32x4_t v508 = v18[10];
        float32x4_t v509 = v504[10];
      }
      float v19 = v504;
      float32x4_t v97 = v1432;
      float32x4_t v436 = v1411;
      float32x4_t v435 = v1420;
      float32x4_t v170 = v1391;
      float32x4_t v169 = v1403;
      float32x4_t v541 = vmulq_n_f32(v506, v1380);
      float32x4_t v542 = vmulq_n_f32(v507, v1366);
      float32x4_t v543 = vmulq_n_f32(v508, v1352);
      float32x4_t v544 = vmulq_n_f32(v509, v505);
      LOWORD(v5) = v1427;
      unint64_t v8 = v1456;
      float32x4_t v26 = v1520;
      float32x4_t v25 = v1536;
      float32x4_t v28 = v1488;
      float32x4_t v27 = v1504;
      float32x4_t v24 = v1479;
      if ((v1427 & 0x10) != 0)
      {
        if (v1450)
        {
          float32x4_t v541 = vmulq_n_f32(v541, v1432.f32[0]);
          float32x4_t v542 = vmulq_lane_f32(v542, *(float32x2_t *)v1432.f32, 1);
          float32x4_t v543 = vmulq_laneq_f32(v543, v1432, 2);
          float32x4_t v544 = vmulq_laneq_f32(v544, v1432, 3);
        }
        float32x4_t v1474 = vaddq_f32(v1474, v542);
        float32x4_t v1477 = vaddq_f32(v1477, v541);
        float32x4_t v1469 = vaddq_f32(v1469, v544);
        float32x4_t v1471 = vaddq_f32(v1471, v543);
        if (!v1450)
        {
LABEL_230:
          float32x4_t v25 = vaddq_f32(v25, v435);
          float32x4_t v26 = vaddq_f32(v26, v436);
          float32x4_t v27 = vaddq_f32(v27, v169);
          float32x4_t v28 = vaddq_f32(v28, v170);
          if ((v6 & 4) == 0) {
            goto LABEL_231;
          }
          goto LABEL_164;
        }
      }
      else
      {
        float32x4_t v435 = vaddq_f32(v1420, v541);
        float32x4_t v436 = vaddq_f32(v1411, v542);
        float32x4_t v169 = vaddq_f32(v1403, v543);
        float32x4_t v170 = vaddq_f32(v1391, v544);
        if (!v1450) {
          goto LABEL_230;
        }
      }
LABEL_229:
      float32x4_t v435 = vmulq_n_f32(v435, v97.f32[0]);
      float32x4_t v436 = vmulq_lane_f32(v436, *(float32x2_t *)v97.f32, 1);
      float32x4_t v169 = vmulq_laneq_f32(v169, v97, 2);
      float32x4_t v170 = vmulq_laneq_f32(v170, v97, 3);
      goto LABEL_230;
    }
    if (!v1554) {
      goto LABEL_163;
    }
    if (v1450)
    {
      float32x4_t v131 = vmulq_n_f32(v131, v97.f32[0]);
      float32x4_t v132 = vmulq_lane_f32(v132, *(float32x2_t *)v97.f32, 1);
      float32x4_t v133 = vmulq_laneq_f32(v133, v97, 2);
      float32x4_t v134 = vmulq_laneq_f32(v134, v97, 3);
    }
    float32x4_t v25 = vaddq_f32(v25, v131);
    float32x4_t v26 = vaddq_f32(v26, v132);
    float32x4_t v27 = vaddq_f32(v27, v133);
    float32x4_t v28 = vaddq_f32(v28, v134);
    if ((v6 & 4) == 0) {
      goto LABEL_231;
    }
LABEL_164:
    float32x4_t v299 = v11[7];
    float32x4_t v300 = v12[7];
    float32x4_t v301 = v13[7];
    float32x4_t v302 = v14[7];
    if ((v5 & 2) != 0)
    {
      float32x4_t v299 = vnegq_f32(v299);
      float32x4_t v300 = vnegq_f32(v300);
      float32x4_t v301 = vnegq_f32(v301);
      float32x4_t v302 = vnegq_f32(v302);
    }
    float32x4_t v303 = *(float32x4_t *)(v4 + 12960);
    float32x4_t v304 = 0uLL;
    if ((v5 & 0x400) != 0)
    {
      float32x4_t v325 = vsubq_f32(v303, v1552);
      float32x4_t v326 = vsubq_f32(v303, v1548);
      float32x4_t v327 = vsubq_f32(v303, v1550);
      float32x4_t v328 = vsubq_f32(v303, v24);
      float32x4_t v329 = vmulq_f32(v325, v325);
      int32x4_t v330 = (int32x4_t)vmulq_f32(v326, v326);
      float32x4_t v331 = vmulq_f32(v327, v327);
      v332.i64[0] = vzip1q_s32((int32x4_t)v329, v330).u64[0];
      v332.i32[2] = v331.i32[0];
      float32x4_t v333 = vmulq_f32(v328, v328);
      v332.i32[3] = v333.i32[0];
      v334.i64[0] = vtrn2q_s32((int32x4_t)v329, v330).u64[0];
      v334.i64[1] = __PAIR64__(v333.u32[1], v331.u32[1]);
      v329.i64[0] = vzip2q_s32((int32x4_t)v329, v330).u64[0];
      v329.i64[1] = __PAIR64__(v333.u32[2], v331.u32[2]);
      float32x4_t v335 = vsqrtq_f32(vaddq_f32(v329, vaddq_f32(v332, v334)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v337 = vdivq_f32(_Q0, v335);
      float32x4_t v303 = vmulq_n_f32(v325, v337.f32[0]);
      float32x4_t v305 = vmulq_lane_f32(v326, *(float32x2_t *)v337.f32, 1);
      float32x4_t v306 = vmulq_laneq_f32(v327, v337, 2);
      float32x4_t v307 = vmulq_laneq_f32(v328, v337, 3);
      if ((v6 & 0x4000000) != 0)
      {
        float32x4_t v342 = vdivq_f32(_Q0, v337);
        uint64_t v343 = v1294;
        float32x4_t v344 = vld1q_dup_f32(v343);
        float32x4_t v345 = v1293;
        float32x4_t v346 = vld1q_dup_f32(v345);
        float32x4_t v304 = vdivq_f32(_Q0, vmlaq_f32(v344, vmlaq_n_f32(v346, v342, *(float *)(v4 + 12952)), v342));
        if ((v6 & 0x40000) == 0)
        {
LABEL_173:
          if (!v1449) {
            goto LABEL_178;
          }
          goto LABEL_174;
        }
      }
      else if ((v6 & 0x40000) == 0)
      {
        goto LABEL_173;
      }
    }
    else
    {
      float32x4_t v305 = *(float32x4_t *)(v4 + 12960);
      float32x4_t v306 = v305;
      float32x4_t v307 = v305;
      if ((v6 & 0x40000) == 0) {
        goto LABEL_173;
      }
    }
    float32x4_t v308 = vnegq_f32(*(float32x4_t *)(v4 + 12976));
    float32x4_t v309 = vmulq_f32(v303, v308);
    int32x4_t v310 = (int32x4_t)vmulq_f32(v305, v308);
    float32x4_t v311 = vmulq_f32(v306, v308);
    float32x4_t v312 = vmulq_f32(v307, v308);
    v313.i64[0] = vzip1q_s32((int32x4_t)v309, v310).u64[0];
    v313.i64[1] = __PAIR64__(v312.u32[0], v311.u32[0]);
    v314.i64[0] = vtrn2q_s32((int32x4_t)v309, v310).u64[0];
    v314.i64[1] = __PAIR64__(v312.u32[1], v311.u32[1]);
    v309.i64[0] = vzip2q_s32((int32x4_t)v309, v310).u64[0];
    v309.i64[1] = __PAIR64__(v312.u32[2], v311.u32[2]);
    float32x4_t v315 = vaddq_f32(v309, vaddq_f32(v313, v314));
    float32x4_t v316 = v1306;
    float32x4_t v317 = vld1q_dup_f32(v316);
    int32x4_t v318 = vcgeq_f32(v315, v317);
    int32x4_t v319 = (int32x4_t)vmvnq_s8((int8x16_t)v318);
    *(int16x4_t *)v319.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v319), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v319.i8))
    {
      float32x4_t v304 = 0uLL;
      if (!v1449) {
        goto LABEL_178;
      }
    }
    else
    {
      v319.i32[0] = 0;
      int8x16_t v1342 = (int8x16_t)v318;
      float32x4_t v1350 = v305;
      v318.i32[0] = v6 & 0x4000000;
      int8x16_t v320 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v318, v319), 0);
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1334 = (float32x4_t)vbslq_s8(v320, _Q1, (int8x16_t)v304);
      float v322 = *(float *)(v4 + 12956);
      float32x4_t v1518 = v26;
      float32x4_t v1534 = v25;
      float32x4_t v1486 = v28;
      float32x4_t v1502 = v27;
      float32x4_t v1393 = v303;
      float32x4_t v1364 = v306;
      float32x4_t v1378 = v307;
      float32x4_t v1454 = v315;
      unsigned int v1327 = COERCE_UNSIGNED_INT64((*(double (**)(void))(v4 + 560))());
      unsigned int v1320 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1454.f32[1], v322));
      unsigned int v1313 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1454.f32[2], v322));
      *(float *)&unsigned int v323 = (*(float (**)(float, float))(v4 + 560))(v1454.f32[3], v322);
      float32x4_t v305 = v1350;
      float32x4_t v306 = v1364;
      float32x4_t v307 = v1378;
      float32x4_t v303 = v1393;
      float32x4_t v24 = v1479;
      float32x4_t v28 = v1486;
      float32x4_t v27 = v1502;
      float32x4_t v26 = v1518;
      float32x4_t v25 = v1534;
      float v19 = v1481;
      v324.i64[0] = __PAIR64__(v1320, v1327);
      v324.i64[1] = __PAIR64__(v323, v1313);
      float32x4_t v304 = vmulq_f32(v1334, (float32x4_t)vandq_s8(v324, v1342));
      if (!v1449) {
        goto LABEL_178;
      }
    }
LABEL_174:
    if (v304.f32[0] <= 0.0 && v304.f32[1] <= 0.0 && v304.f32[2] <= 0.0 && v304.f32[3] <= 0.0) {
      goto LABEL_231;
    }
LABEL_178:
    if (v1554)
    {
      if ((v6 & 0x200) != 0)
      {
        float32x4_t v347 = *(float32x4_t *)(v4 + 12864);
        float32x4_t v338 = vmulq_f32(v347, v11[13]);
        float32x4_t v339 = vmulq_f32(v347, v12[13]);
        float32x4_t v340 = vmulq_f32(v347, v13[13]);
        float32x4_t v341 = vmulq_f32(v347, v14[13]);
      }
      else
      {
        float32x4_t v338 = v1547[11];
        float32x4_t v339 = v17[11];
        float32x4_t v340 = v18[11];
        float32x4_t v341 = v19[11];
      }
    }
    else
    {
      float32x4_t v341 = 0uLL;
      float32x4_t v340 = 0uLL;
      float32x4_t v339 = 0uLL;
      float32x4_t v338 = 0uLL;
    }
    float32x4_t v348 = vmulq_f32(v299, v303);
    int32x4_t v349 = (int32x4_t)vmulq_f32(v300, v305);
    float32x4_t v350 = vmulq_f32(v301, v306);
    float32x4_t v351 = vmulq_f32(v302, v307);
    v352.i64[0] = vzip1q_s32((int32x4_t)v348, v349).u64[0];
    v352.i64[1] = __PAIR64__(v351.u32[0], v350.u32[0]);
    v353.i64[0] = vtrn2q_s32((int32x4_t)v348, v349).u64[0];
    v353.i64[1] = __PAIR64__(v351.u32[1], v350.u32[1]);
    v348.i64[0] = vzip2q_s32((int32x4_t)v348, v349).u64[0];
    v348.i64[1] = __PAIR64__(v351.u32[2], v350.u32[2]);
    float32x4_t v354 = vaddq_f32(v348, vaddq_f32(v352, v353));
    if (v354.f32[0] <= 0.0 && v354.f32[1] <= 0.0 && v354.f32[2] <= 0.0 && v354.f32[3] <= 0.0)
    {
      if (v1554)
      {
        if (v1449)
        {
          float32x4_t v338 = vmulq_n_f32(v338, v304.f32[0]);
          float32x4_t v339 = vmulq_lane_f32(v339, *(float32x2_t *)v304.f32, 1);
          float32x4_t v340 = vmulq_laneq_f32(v340, v304, 2);
          float32x4_t v341 = vmulq_laneq_f32(v341, v304, 3);
        }
        float32x4_t v25 = vaddq_f32(v25, v338);
        float32x4_t v26 = vaddq_f32(v26, v339);
        float32x4_t v27 = vaddq_f32(v27, v340);
        float32x4_t v28 = vaddq_f32(v28, v341);
      }
LABEL_231:
      if ((v6 & 8) == 0) {
        goto LABEL_309;
      }
      goto LABEL_232;
    }
    if ((v6 & 0x400) != 0)
    {
      float32x4_t v359 = *(float32x4_t *)(v4 + 12880);
      float32x4_t v355 = vmulq_f32(v359, v11[13]);
      float32x4_t v356 = vmulq_f32(v359, v12[13]);
      float32x4_t v357 = vmulq_f32(v359, v13[13]);
      float32x4_t v358 = vmulq_f32(v359, v14[13]);
    }
    else
    {
      float32x4_t v355 = v1547[12];
      float32x4_t v356 = v17[12];
      float32x4_t v357 = v18[12];
      float32x4_t v358 = v19[12];
    }
    float32x4_t v360 = vmulq_n_f32(v355, fmaxf(v354.f32[0], 0.0));
    float32x4_t v361 = vmulq_n_f32(v356, fmaxf(v354.f32[1], 0.0));
    float32x4_t v362 = vmulq_n_f32(v357, fmaxf(v354.f32[2], 0.0));
    float32x4_t v363 = vmulq_n_f32(v358, fmaxf(v354.f32[3], 0.0));
    if (v1554)
    {
      float32x4_t v360 = vaddq_f32(v338, v360);
      float32x4_t v361 = vaddq_f32(v339, v361);
      float32x4_t v362 = vaddq_f32(v340, v362);
      float32x4_t v363 = vaddq_f32(v341, v363);
    }
    float32x4_t v1431 = v360;
    float32x4_t v1412 = v362;
    float32x4_t v1421 = v361;
    float32x4_t v1404 = v363;
    if ((v5 & 0x20) != 0)
    {
      float32x4_t v368 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v299, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v299, 0xCuLL)));
      int32x4_t v369 = (int32x4_t)vmlsq_f32(vmulq_f32(v368, v303), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v303, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v303, 0xCuLL))), v299);
      int32x4_t v370 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v369, 0xCuLL);
      float32x4_t v371 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v300, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v300, 0xCuLL)));
      float32x4_t v372 = vmlsq_f32(vmulq_f32(v371, v305), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v305, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v305, 0xCuLL))), v300);
      int32x4_t v373 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v372, 0xCuLL);
      float32x4_t v374 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v301, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v301, 0xCuLL)));
      int32x4_t v375 = (int32x4_t)vmlsq_f32(vmulq_f32(v374, v306), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v306, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v306, 0xCuLL))), v301);
      int32x4_t v376 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v375, 0xCuLL);
      float32x4_t v377 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v302, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v302, 0xCuLL)));
      int32x4_t v378 = (int32x4_t)vmlsq_f32(vmulq_f32(v377, v307), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v307, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v307, 0xCuLL))), v302);
      int32x4_t v379 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v378, 0xCuLL);
      int32x4_t v380 = (int32x4_t)vmlsq_f32(vmulq_f32(v368, (float32x4_t)vrev64q_s32(vuzp1q_s32(v369, v370))), (float32x4_t)vextq_s8((int8x16_t)v370, (int8x16_t)vrev64q_s32(v370), 8uLL), v299);
      int32x4_t v381 = (int32x4_t)vmlsq_f32(vmulq_f32(v371, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v372, v373))), (float32x4_t)vextq_s8((int8x16_t)v373, (int8x16_t)vrev64q_s32(v373), 8uLL), v300);
      int32x4_t v382 = (int32x4_t)vmlsq_f32(vmulq_f32(v374, (float32x4_t)vrev64q_s32(vuzp1q_s32(v375, v376))), (float32x4_t)vextq_s8((int8x16_t)v376, (int8x16_t)vrev64q_s32(v376), 8uLL), v301);
      int32x4_t v383 = (int32x4_t)vmlsq_f32(vmulq_f32(v377, (float32x4_t)vrev64q_s32(vuzp1q_s32(v378, v379))), (float32x4_t)vextq_s8((int8x16_t)v379, (int8x16_t)vrev64q_s32(v379), 8uLL), v302);
      v372.i64[0] = 0x4000000040000000;
      v372.i64[1] = 0x4000000040000000;
      float32x4_t v384 = vmlaq_f32(v303, v372, (float32x4_t)vrev64q_s32(vuzp1q_s32(v380, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v380, 0xCuLL))));
      float32x4_t v385 = vmlaq_f32(v305, v372, (float32x4_t)vrev64q_s32(vuzp1q_s32(v381, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v381, 0xCuLL))));
      float32x4_t v386 = vmlaq_f32(v306, v372, (float32x4_t)vrev64q_s32(vuzp1q_s32(v382, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v382, 0xCuLL))));
      float32x4_t v387 = vmlaq_f32(v307, v372, (float32x4_t)vrev64q_s32(vuzp1q_s32(v383, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v383, 0xCuLL))));
      if ((v5 & 8) != 0)
      {
        float32x4_t v389 = vmulq_f32(v1552, v1552);
        int32x4_t v390 = (int32x4_t)vmulq_f32(v1548, v1548);
        float32x4_t v391 = vmulq_f32(v1550, v1550);
        float32x4_t v392 = vmulq_f32(v24, v24);
        v393.i64[0] = vzip1q_s32((int32x4_t)v389, v390).u64[0];
        v393.i64[1] = __PAIR64__(v392.u32[0], v391.u32[0]);
        v394.i64[0] = vtrn2q_s32((int32x4_t)v389, v390).u64[0];
        v394.i64[1] = __PAIR64__(v392.u32[1], v391.u32[1]);
        v389.i64[0] = vzip2q_s32((int32x4_t)v389, v390).u64[0];
        v389.i64[1] = __PAIR64__(v392.u32[2], v391.u32[2]);
        __asm { FMOV            V7.4S, #1.0 }
        float32x4_t v396 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v389, vaddq_f32(v393, v394))));
        float32x4_t v397 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1552), v396.f32[0]), v384);
        int32x4_t v398 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v396.f32, 1), v385);
        float32x4_t v399 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1550), v396, 2), v386);
        float32x4_t v400 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v24), v396, 3), v387);
        v391.i64[0] = vzip1q_s32((int32x4_t)v397, v398).u64[0];
        v391.i64[1] = __PAIR64__(v400.u32[0], v399.u32[0]);
        v392.i64[0] = vtrn2q_s32((int32x4_t)v397, v398).u64[0];
        v392.i64[1] = __PAIR64__(v400.u32[1], v399.u32[1]);
        v397.i64[0] = vzip2q_s32((int32x4_t)v397, v398).u64[0];
        v397.i64[1] = __PAIR64__(v400.u32[2], v399.u32[2]);
        float32x4_t v388 = vaddq_f32(v397, vaddq_f32(v391, v392));
      }
      else
      {
        v388.i64[0] = vzip2q_s32((int32x4_t)v384, (int32x4_t)v385).u64[0];
        v388.i64[1] = __PAIR64__(v387.u32[2], v386.u32[2]);
      }
      float32x4_t v363 = v1404;
      float32x4_t v362 = v1412;
      float v9 = 1.0;
    }
    else
    {
      if (v1284)
      {
        if ((v5 & 8) != 0)
        {
          float32x4_t v561 = vmulq_f32(v1552, v1552);
          int32x4_t v562 = (int32x4_t)vmulq_f32(v1548, v1548);
          float32x4_t v563 = vmulq_f32(v1550, v1550);
          v564.i64[0] = vzip1q_s32((int32x4_t)v561, v562).u64[0];
          v564.i32[2] = v563.i32[0];
          float32x4_t v565 = vmulq_f32(v24, v24);
          v564.i32[3] = v565.i32[0];
          v566.i64[0] = vtrn2q_s32((int32x4_t)v561, v562).u64[0];
          v566.i64[1] = __PAIR64__(v565.u32[1], v563.u32[1]);
          v561.i64[0] = vzip2q_s32((int32x4_t)v561, v562).u64[0];
          v561.i64[1] = __PAIR64__(v565.u32[2], v563.u32[2]);
          __asm { FMOV            V16.4S, #1.0 }
          float32x4_t v568 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v561, vaddq_f32(v564, v566))));
          float32x4_t v364 = vmulq_n_f32(vnegq_f32(v1552), v568.f32[0]);
          float32x4_t v365 = vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v568.f32, 1);
          float32x4_t v366 = vmulq_laneq_f32(vnegq_f32(v1550), v568, 2);
          float32x4_t v367 = vmulq_laneq_f32(vnegq_f32(v24), v568, 3);
        }
        else
        {
          float32x4_t v364 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v365 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v366 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v367 = (float32x4_t)xmmword_227DC2100;
        }
        float32x4_t v569 = vaddq_f32(v303, v364);
        float32x4_t v570 = vaddq_f32(v305, v365);
        float32x4_t v571 = vaddq_f32(v306, v366);
        float32x4_t v572 = vaddq_f32(v307, v367);
        float32x4_t v573 = vmulq_f32(v569, v569);
        int32x4_t v574 = (int32x4_t)vmulq_f32(v570, v570);
        float32x4_t v575 = vmulq_f32(v571, v571);
        v576.i64[0] = vzip1q_s32((int32x4_t)v573, v574).u64[0];
        v576.i32[2] = v575.i32[0];
        float32x4_t v577 = vmulq_f32(v572, v572);
        v576.i32[3] = v577.i32[0];
        v578.i64[0] = vtrn2q_s32((int32x4_t)v573, v574).u64[0];
        v578.i64[1] = __PAIR64__(v577.u32[1], v575.u32[1]);
        v573.i64[0] = vzip2q_s32((int32x4_t)v573, v574).u64[0];
        v573.i64[1] = __PAIR64__(v577.u32[2], v575.u32[2]);
        __asm { FMOV            V17.4S, #1.0 }
        float32x4_t v580 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v573, vaddq_f32(v576, v578))));
        float32x4_t v401 = vmulq_n_f32(v569, v580.f32[0]);
        float32x4_t v402 = vmulq_lane_f32(v570, *(float32x2_t *)v580.f32, 1);
        float32x4_t v403 = vmulq_laneq_f32(v571, v580, 2);
        float32x4_t v404 = vmulq_laneq_f32(v572, v580, 3);
      }
      else
      {
        float32x4_t v401 = *(float32x4_t *)(v4 + 12992);
        float32x4_t v402 = v401;
        float32x4_t v403 = v401;
        float32x4_t v404 = v401;
      }
      float32x4_t v581 = vmulq_f32(v299, v401);
      int32x4_t v582 = (int32x4_t)vmulq_f32(v300, v402);
      float32x4_t v583 = vmulq_f32(v301, v403);
      float32x4_t v584 = vmulq_f32(v302, v404);
      v585.i64[0] = vzip1q_s32((int32x4_t)v581, v582).u64[0];
      v585.i64[1] = __PAIR64__(v584.u32[0], v583.u32[0]);
      v586.i64[0] = vtrn2q_s32((int32x4_t)v581, v582).u64[0];
      v586.i64[1] = __PAIR64__(v584.u32[1], v583.u32[1]);
      v581.i64[0] = vzip2q_s32((int32x4_t)v581, v582).u64[0];
      v581.i64[1] = __PAIR64__(v584.u32[2], v583.u32[2]);
      float32x4_t v388 = vaddq_f32(v581, vaddq_f32(v585, v586));
    }
    if (v354.f32[0] <= 0.0) {
      float v587 = 0.0;
    }
    else {
      float v587 = v388.f32[0];
    }
    if (v354.f32[1] <= 0.0) {
      float v588 = 0.0;
    }
    else {
      float v588 = v388.f32[1];
    }
    if (v354.f32[2] <= 0.0) {
      float v589 = 0.0;
    }
    else {
      float v589 = v388.f32[2];
    }
    if (v354.f32[3] <= 0.0) {
      float v590 = 0.0;
    }
    else {
      float v590 = v388.f32[3];
    }
    if (v587 <= 0.0 && v588 <= 0.0 && v589 <= 0.0 && v590 <= 0.0)
    {
      float32x4_t v591 = v1431;
      float32x4_t v592 = v1421;
      if (!v1449) {
        goto LABEL_308;
      }
LABEL_307:
      float32x4_t v591 = vmulq_n_f32(v591, v304.f32[0]);
      float32x4_t v592 = vmulq_lane_f32(v592, *(float32x2_t *)v304.f32, 1);
      float32x4_t v362 = vmulq_laneq_f32(v362, v304, 2);
      float32x4_t v363 = vmulq_laneq_f32(v363, v304, 3);
      goto LABEL_308;
    }
    float32x4_t v1395 = v304;
    float32x4_t v1490 = v28;
    float32x4_t v1506 = v27;
    float32x4_t v1522 = v26;
    float32x4_t v1538 = v25;
    float32x4_t v1458 = v8;
    float v653 = fmaxf(v588, 0.0);
    float v654 = fmaxf(v589, 0.0);
    float v655 = v17[4].f32[0];
    float v656 = fmaxf(v590, 0.0);
    float v657 = v18[4].f32[0];
    float v658 = v19[4].f32[0];
    float v659 = v19;
    LODWORD(v1382) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(fmaxf(v587, 0.0), v1547[4].f32[0]));
    LODWORD(v1368) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v653, v655));
    LODWORD(v1354) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v654, v657));
    a1 = (*(uint64_t (**)(float, float))(v4 + 560))(v656, v658);
    if ((v6 & 0x800) != 0)
    {
      float32x4_t v695 = *(float32x4_t *)(v4 + 12896);
      float32x4_t v661 = vmulq_f32(v695, v11[13]);
      float32x4_t v662 = vmulq_f32(v695, v12[13]);
      float32x4_t v663 = vmulq_f32(v695, v13[13]);
      float32x4_t v664 = vmulq_f32(v695, v14[13]);
    }
    else
    {
      float32x4_t v661 = v1547[13];
      float32x4_t v662 = v17[13];
      float32x4_t v663 = v18[13];
      float32x4_t v664 = v659[13];
    }
    float v19 = v659;
    float32x4_t v304 = v1395;
    float32x4_t v363 = v1404;
    float32x4_t v591 = v1431;
    float32x4_t v362 = v1412;
    float32x4_t v592 = v1421;
    float32x4_t v696 = vmulq_n_f32(v661, v1382);
    float32x4_t v697 = vmulq_n_f32(v662, v1368);
    float32x4_t v698 = vmulq_n_f32(v663, v1354);
    float32x4_t v699 = vmulq_n_f32(v664, v660);
    LOWORD(v5) = v1427;
    unint64_t v8 = v1458;
    float32x4_t v26 = v1522;
    float32x4_t v25 = v1538;
    float32x4_t v28 = v1490;
    float32x4_t v27 = v1506;
    float32x4_t v24 = v1479;
    if ((v1427 & 0x10) != 0)
    {
      if (v1449)
      {
        float32x4_t v696 = vmulq_n_f32(v696, v1395.f32[0]);
        float32x4_t v697 = vmulq_lane_f32(v697, *(float32x2_t *)v1395.f32, 1);
        float32x4_t v698 = vmulq_laneq_f32(v698, v1395, 2);
        float32x4_t v699 = vmulq_laneq_f32(v699, v1395, 3);
      }
      float32x4_t v1474 = vaddq_f32(v1474, v697);
      float32x4_t v1477 = vaddq_f32(v1477, v696);
      float32x4_t v1469 = vaddq_f32(v1469, v699);
      float32x4_t v1471 = vaddq_f32(v1471, v698);
      if (v1449) {
        goto LABEL_307;
      }
    }
    else
    {
      float32x4_t v591 = vaddq_f32(v1431, v696);
      float32x4_t v592 = vaddq_f32(v1421, v697);
      float32x4_t v362 = vaddq_f32(v1412, v698);
      float32x4_t v363 = vaddq_f32(v1404, v699);
      if (v1449) {
        goto LABEL_307;
      }
    }
LABEL_308:
    float32x4_t v25 = vaddq_f32(v25, v591);
    float32x4_t v26 = vaddq_f32(v26, v592);
    float32x4_t v27 = vaddq_f32(v27, v362);
    float32x4_t v28 = vaddq_f32(v28, v363);
    if ((v6 & 8) == 0) {
      goto LABEL_309;
    }
LABEL_232:
    float32x4_t v437 = v11[7];
    float32x4_t v438 = v12[7];
    float32x4_t v439 = v13[7];
    float32x4_t v440 = v14[7];
    if ((v5 & 2) != 0)
    {
      float32x4_t v437 = vnegq_f32(v437);
      float32x4_t v438 = vnegq_f32(v438);
      float32x4_t v439 = vnegq_f32(v439);
      float32x4_t v440 = vnegq_f32(v440);
    }
    float32x4_t v441 = *(float32x4_t *)(v4 + 13120);
    float32x4_t v442 = 0uLL;
    if ((v5 & 0x800) != 0)
    {
      float32x4_t v463 = vsubq_f32(v441, v1552);
      float32x4_t v464 = vsubq_f32(v441, v1548);
      float32x4_t v465 = vsubq_f32(v441, v1550);
      float32x4_t v466 = vsubq_f32(v441, v24);
      float32x4_t v467 = vmulq_f32(v463, v463);
      int32x4_t v468 = (int32x4_t)vmulq_f32(v464, v464);
      float32x4_t v469 = vmulq_f32(v465, v465);
      v470.i64[0] = vzip1q_s32((int32x4_t)v467, v468).u64[0];
      v470.i32[2] = v469.i32[0];
      float32x4_t v471 = vmulq_f32(v466, v466);
      v470.i32[3] = v471.i32[0];
      v472.i64[0] = vtrn2q_s32((int32x4_t)v467, v468).u64[0];
      v472.i64[1] = __PAIR64__(v471.u32[1], v469.u32[1]);
      v467.i64[0] = vzip2q_s32((int32x4_t)v467, v468).u64[0];
      v467.i64[1] = __PAIR64__(v471.u32[2], v469.u32[2]);
      float32x4_t v473 = vsqrtq_f32(vaddq_f32(v467, vaddq_f32(v470, v472)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v475 = vdivq_f32(_Q0, v473);
      float32x4_t v441 = vmulq_n_f32(v463, v475.f32[0]);
      float32x4_t v443 = vmulq_lane_f32(v464, *(float32x2_t *)v475.f32, 1);
      float32x4_t v444 = vmulq_laneq_f32(v465, v475, 2);
      float32x4_t v445 = vmulq_laneq_f32(v466, v475, 3);
      if ((v6 & 0x8000000) != 0)
      {
        float32x4_t v480 = vdivq_f32(_Q0, v475);
        float32x4_t v481 = v1296;
        float32x4_t v482 = vld1q_dup_f32(v481);
        float32x4_t v483 = v1295;
        float32x4_t v484 = vld1q_dup_f32(v483);
        float32x4_t v442 = vdivq_f32(_Q0, vmlaq_f32(v482, vmlaq_n_f32(v484, v480, *(float *)(v4 + 13112)), v480));
        if ((v6 & 0x80000) == 0)
        {
LABEL_241:
          if (!v1448) {
            goto LABEL_246;
          }
          goto LABEL_242;
        }
      }
      else if ((v6 & 0x80000) == 0)
      {
        goto LABEL_241;
      }
    }
    else
    {
      float32x4_t v443 = *(float32x4_t *)(v4 + 13120);
      float32x4_t v444 = v443;
      float32x4_t v445 = v443;
      if ((v6 & 0x80000) == 0) {
        goto LABEL_241;
      }
    }
    float32x4_t v446 = vnegq_f32(*(float32x4_t *)(v4 + 13136));
    float32x4_t v447 = vmulq_f32(v441, v446);
    int32x4_t v448 = (int32x4_t)vmulq_f32(v443, v446);
    float32x4_t v449 = vmulq_f32(v444, v446);
    float32x4_t v450 = vmulq_f32(v445, v446);
    v451.i64[0] = vzip1q_s32((int32x4_t)v447, v448).u64[0];
    v451.i64[1] = __PAIR64__(v450.u32[0], v449.u32[0]);
    v452.i64[0] = vtrn2q_s32((int32x4_t)v447, v448).u64[0];
    v452.i64[1] = __PAIR64__(v450.u32[1], v449.u32[1]);
    v447.i64[0] = vzip2q_s32((int32x4_t)v447, v448).u64[0];
    v447.i64[1] = __PAIR64__(v450.u32[2], v449.u32[2]);
    float32x4_t v453 = vaddq_f32(v447, vaddq_f32(v451, v452));
    uint64_t v454 = v1307;
    float32x4_t v455 = vld1q_dup_f32(v454);
    int32x4_t v456 = vcgeq_f32(v453, v455);
    int32x4_t v457 = (int32x4_t)vmvnq_s8((int8x16_t)v456);
    *(int16x4_t *)v457.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v457), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v457.i8))
    {
      float32x4_t v442 = 0uLL;
      if (!v1448) {
        goto LABEL_246;
      }
    }
    else
    {
      v457.i32[0] = 0;
      int8x16_t v1343 = (int8x16_t)v456;
      float32x4_t v1351 = v443;
      v456.i32[0] = v6 & 0x8000000;
      int8x16_t v458 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v456, v457), 0);
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1335 = (float32x4_t)vbslq_s8(v458, _Q1, (int8x16_t)v442);
      float v460 = *(float *)(v4 + 13116);
      float32x4_t v1519 = v26;
      float32x4_t v1535 = v25;
      float32x4_t v1487 = v28;
      float32x4_t v1503 = v27;
      float32x4_t v1394 = v441;
      float32x4_t v1365 = v444;
      float32x4_t v1379 = v445;
      float32x4_t v1455 = v453;
      unsigned int v1328 = COERCE_UNSIGNED_INT64((*(double (**)(void))(v4 + 560))());
      unsigned int v1321 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1455.f32[1], v460));
      unsigned int v1314 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1455.f32[2], v460));
      *(float *)&unsigned int v461 = (*(float (**)(float, float))(v4 + 560))(v1455.f32[3], v460);
      float32x4_t v443 = v1351;
      float32x4_t v444 = v1365;
      float32x4_t v445 = v1379;
      float32x4_t v441 = v1394;
      float32x4_t v24 = v1479;
      float32x4_t v28 = v1487;
      float32x4_t v27 = v1503;
      float32x4_t v26 = v1519;
      float32x4_t v25 = v1535;
      float v19 = v1481;
      v462.i64[0] = __PAIR64__(v1321, v1328);
      v462.i64[1] = __PAIR64__(v461, v1314);
      float32x4_t v442 = vmulq_f32(v1335, (float32x4_t)vandq_s8(v462, v1343));
      if (!v1448) {
        goto LABEL_246;
      }
    }
LABEL_242:
    if (v442.f32[0] <= 0.0 && v442.f32[1] <= 0.0 && v442.f32[2] <= 0.0 && v442.f32[3] <= 0.0)
    {
LABEL_309:
      if ((v6 & 0x10) == 0) {
        goto LABEL_387;
      }
      goto LABEL_310;
    }
LABEL_246:
    if (v1554)
    {
      if ((v6 & 0x200) != 0)
      {
        float32x4_t v485 = *(float32x4_t *)(v4 + 13024);
        float32x4_t v476 = vmulq_f32(v485, v11[13]);
        float32x4_t v477 = vmulq_f32(v485, v12[13]);
        float32x4_t v478 = vmulq_f32(v485, v13[13]);
        float32x4_t v479 = vmulq_f32(v485, v14[13]);
      }
      else
      {
        float32x4_t v476 = v1547[14];
        float32x4_t v477 = v17[14];
        float32x4_t v478 = v18[14];
        float32x4_t v479 = v19[14];
      }
    }
    else
    {
      float32x4_t v479 = 0uLL;
      float32x4_t v478 = 0uLL;
      float32x4_t v477 = 0uLL;
      float32x4_t v476 = 0uLL;
    }
    float32x4_t v486 = vmulq_f32(v437, v441);
    int32x4_t v487 = (int32x4_t)vmulq_f32(v438, v443);
    float32x4_t v488 = vmulq_f32(v439, v444);
    float32x4_t v489 = vmulq_f32(v440, v445);
    v490.i64[0] = vzip1q_s32((int32x4_t)v486, v487).u64[0];
    v490.i64[1] = __PAIR64__(v489.u32[0], v488.u32[0]);
    v491.i64[0] = vtrn2q_s32((int32x4_t)v486, v487).u64[0];
    v491.i64[1] = __PAIR64__(v489.u32[1], v488.u32[1]);
    v486.i64[0] = vzip2q_s32((int32x4_t)v486, v487).u64[0];
    v486.i64[1] = __PAIR64__(v489.u32[2], v488.u32[2]);
    float32x4_t v492 = vaddq_f32(v486, vaddq_f32(v490, v491));
    if (v492.f32[0] > 0.0 || v492.f32[1] > 0.0 || v492.f32[2] > 0.0 || v492.f32[3] > 0.0)
    {
      float32x4_t v493 = v445;
      if ((v6 & 0x400) != 0)
      {
        float32x4_t v510 = *(float32x4_t *)(v4 + 13040);
        float32x4_t v494 = vmulq_f32(v510, v11[13]);
        float32x4_t v495 = vmulq_f32(v510, v12[13]);
        float32x4_t v496 = vmulq_f32(v510, v13[13]);
        float32x4_t v497 = vmulq_f32(v510, v14[13]);
      }
      else
      {
        float32x4_t v494 = v1547[15];
        float32x4_t v495 = v17[15];
        float32x4_t v496 = v18[15];
        float32x4_t v497 = v19[15];
      }
      float32x4_t v511 = vmulq_n_f32(v494, fmaxf(v492.f32[0], 0.0));
      float32x4_t v512 = vmulq_n_f32(v495, fmaxf(v492.f32[1], 0.0));
      float32x4_t v513 = vmulq_n_f32(v496, fmaxf(v492.f32[2], 0.0));
      float32x4_t v514 = vmulq_n_f32(v497, fmaxf(v492.f32[3], 0.0));
      if (v1554)
      {
        float32x4_t v511 = vaddq_f32(v476, v511);
        float32x4_t v512 = vaddq_f32(v477, v512);
        float32x4_t v513 = vaddq_f32(v478, v513);
        float32x4_t v514 = vaddq_f32(v479, v514);
      }
      float32x4_t v1433 = v511;
      float32x4_t v1413 = v513;
      float32x4_t v1422 = v512;
      float32x4_t v1405 = v514;
      if ((v5 & 0x20) != 0)
      {
        float32x4_t v519 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v437, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v437, 0xCuLL)));
        int32x4_t v520 = (int32x4_t)vmlsq_f32(vmulq_f32(v519, v441), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v441, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v441, 0xCuLL))), v437);
        int32x4_t v521 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v520, 0xCuLL);
        float32x4_t v522 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v438, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v438, 0xCuLL)));
        float32x4_t v523 = vmlsq_f32(vmulq_f32(v522, v443), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v443, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v443, 0xCuLL))), v438);
        int32x4_t v524 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v523, 0xCuLL);
        float32x4_t v525 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v439, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v439, 0xCuLL)));
        int32x4_t v526 = (int32x4_t)vmlsq_f32(vmulq_f32(v525, v444), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v444, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v444, 0xCuLL))), v439);
        int32x4_t v527 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v526, 0xCuLL);
        float32x4_t v528 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v440, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v440, 0xCuLL)));
        int32x4_t v529 = (int32x4_t)vmlsq_f32(vmulq_f32(v528, v493), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v493, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v493, 0xCuLL))), v440);
        int32x4_t v530 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v529, 0xCuLL);
        int32x4_t v531 = (int32x4_t)vmlsq_f32(vmulq_f32(v519, (float32x4_t)vrev64q_s32(vuzp1q_s32(v520, v521))), (float32x4_t)vextq_s8((int8x16_t)v521, (int8x16_t)vrev64q_s32(v521), 8uLL), v437);
        int32x4_t v532 = (int32x4_t)vmlsq_f32(vmulq_f32(v522, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v523, v524))), (float32x4_t)vextq_s8((int8x16_t)v524, (int8x16_t)vrev64q_s32(v524), 8uLL), v438);
        int32x4_t v533 = (int32x4_t)vmlsq_f32(vmulq_f32(v525, (float32x4_t)vrev64q_s32(vuzp1q_s32(v526, v527))), (float32x4_t)vextq_s8((int8x16_t)v527, (int8x16_t)vrev64q_s32(v527), 8uLL), v439);
        int32x4_t v534 = (int32x4_t)vmlsq_f32(vmulq_f32(v528, (float32x4_t)vrev64q_s32(vuzp1q_s32(v529, v530))), (float32x4_t)vextq_s8((int8x16_t)v530, (int8x16_t)vrev64q_s32(v530), 8uLL), v440);
        v523.i64[0] = 0x4000000040000000;
        v523.i64[1] = 0x4000000040000000;
        float32x4_t v535 = vmlaq_f32(v441, v523, (float32x4_t)vrev64q_s32(vuzp1q_s32(v531, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v531, 0xCuLL))));
        float32x4_t v536 = vmlaq_f32(v443, v523, (float32x4_t)vrev64q_s32(vuzp1q_s32(v532, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v532, 0xCuLL))));
        float32x4_t v537 = vmlaq_f32(v444, v523, (float32x4_t)vrev64q_s32(vuzp1q_s32(v533, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v533, 0xCuLL))));
        float32x4_t v538 = vmlaq_f32(v493, v523, (float32x4_t)vrev64q_s32(vuzp1q_s32(v534, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v534, 0xCuLL))));
        if ((v5 & 8) != 0)
        {
          float32x4_t v545 = vmulq_f32(v1552, v1552);
          int32x4_t v546 = (int32x4_t)vmulq_f32(v1548, v1548);
          float32x4_t v547 = vmulq_f32(v1550, v1550);
          float32x4_t v24 = v1479;
          float32x4_t v548 = vmulq_f32(v24, v24);
          v549.i64[0] = vzip1q_s32((int32x4_t)v545, v546).u64[0];
          v549.i64[1] = __PAIR64__(v548.u32[0], v547.u32[0]);
          v550.i64[0] = vtrn2q_s32((int32x4_t)v545, v546).u64[0];
          v550.i64[1] = __PAIR64__(v548.u32[1], v547.u32[1]);
          v545.i64[0] = vzip2q_s32((int32x4_t)v545, v546).u64[0];
          v545.i64[1] = __PAIR64__(v548.u32[2], v547.u32[2]);
          __asm { FMOV            V7.4S, #1.0 }
          float32x4_t v552 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v545, vaddq_f32(v549, v550))));
          float32x4_t v553 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1552), v552.f32[0]), v535);
          int32x4_t v554 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v552.f32, 1), v536);
          float32x4_t v555 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1550), v552, 2), v537);
          float32x4_t v556 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1479), v552, 3), v538);
          v547.i64[0] = vzip1q_s32((int32x4_t)v553, v554).u64[0];
          v547.i64[1] = __PAIR64__(v556.u32[0], v555.u32[0]);
          v548.i64[0] = vtrn2q_s32((int32x4_t)v553, v554).u64[0];
          v548.i64[1] = __PAIR64__(v556.u32[1], v555.u32[1]);
          v553.i64[0] = vzip2q_s32((int32x4_t)v553, v554).u64[0];
          v553.i64[1] = __PAIR64__(v556.u32[2], v555.u32[2]);
          float32x4_t v539 = vaddq_f32(v553, vaddq_f32(v547, v548));
          float32x4_t v514 = v1405;
          float32x4_t v513 = v1413;
          float v9 = 1.0;
        }
        else
        {
          v539.i64[0] = vzip2q_s32((int32x4_t)v535, (int32x4_t)v536).u64[0];
          v539.i64[1] = __PAIR64__(v538.u32[2], v537.u32[2]);
          float32x4_t v514 = v1405;
          float32x4_t v513 = v1413;
          float v9 = 1.0;
          float32x4_t v24 = v1479;
        }
      }
      else
      {
        if (v1283)
        {
          if ((v5 & 8) != 0)
          {
            float32x4_t v716 = vmulq_f32(v1552, v1552);
            int32x4_t v717 = (int32x4_t)vmulq_f32(v1548, v1548);
            float32x4_t v718 = vmulq_f32(v1550, v1550);
            v719.i64[0] = vzip1q_s32((int32x4_t)v716, v717).u64[0];
            v719.i32[2] = v718.i32[0];
            float32x4_t v720 = vmulq_f32(v1479, v1479);
            v719.i32[3] = v720.i32[0];
            v721.i64[0] = vtrn2q_s32((int32x4_t)v716, v717).u64[0];
            v721.i64[1] = __PAIR64__(v720.u32[1], v718.u32[1]);
            v716.i64[0] = vzip2q_s32((int32x4_t)v716, v717).u64[0];
            v716.i64[1] = __PAIR64__(v720.u32[2], v718.u32[2]);
            __asm { FMOV            V16.4S, #1.0 }
            float32x4_t v723 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v716, vaddq_f32(v719, v721))));
            float32x4_t v515 = vmulq_n_f32(vnegq_f32(v1552), v723.f32[0]);
            float32x4_t v516 = vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v723.f32, 1);
            float32x4_t v517 = vmulq_laneq_f32(vnegq_f32(v1550), v723, 2);
            float32x4_t v518 = vmulq_laneq_f32(vnegq_f32(v1479), v723, 3);
          }
          else
          {
            float32x4_t v515 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v516 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v517 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v518 = (float32x4_t)xmmword_227DC2100;
          }
          float32x4_t v724 = vaddq_f32(v441, v515);
          float32x4_t v725 = vaddq_f32(v443, v516);
          float32x4_t v726 = vaddq_f32(v444, v517);
          float32x4_t v727 = vaddq_f32(v493, v518);
          float32x4_t v728 = vmulq_f32(v724, v724);
          int32x4_t v729 = (int32x4_t)vmulq_f32(v725, v725);
          float32x4_t v730 = vmulq_f32(v726, v726);
          v731.i64[0] = vzip1q_s32((int32x4_t)v728, v729).u64[0];
          v731.i32[2] = v730.i32[0];
          float32x4_t v732 = vmulq_f32(v727, v727);
          v731.i32[3] = v732.i32[0];
          v733.i64[0] = vtrn2q_s32((int32x4_t)v728, v729).u64[0];
          v733.i64[1] = __PAIR64__(v732.u32[1], v730.u32[1]);
          v728.i64[0] = vzip2q_s32((int32x4_t)v728, v729).u64[0];
          v728.i64[1] = __PAIR64__(v732.u32[2], v730.u32[2]);
          __asm { FMOV            V17.4S, #1.0 }
          float32x4_t v735 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v728, vaddq_f32(v731, v733))));
          float32x4_t v557 = vmulq_n_f32(v724, v735.f32[0]);
          float32x4_t v558 = vmulq_lane_f32(v725, *(float32x2_t *)v735.f32, 1);
          float32x4_t v559 = vmulq_laneq_f32(v726, v735, 2);
          float32x4_t v560 = vmulq_laneq_f32(v727, v735, 3);
        }
        else
        {
          float32x4_t v557 = *(float32x4_t *)(v4 + 13152);
          float32x4_t v558 = v557;
          float32x4_t v559 = v557;
          float32x4_t v560 = v557;
        }
        float32x4_t v24 = v1479;
        float32x4_t v736 = vmulq_f32(v437, v557);
        int32x4_t v737 = (int32x4_t)vmulq_f32(v438, v558);
        float32x4_t v738 = vmulq_f32(v439, v559);
        float32x4_t v739 = vmulq_f32(v440, v560);
        v740.i64[0] = vzip1q_s32((int32x4_t)v736, v737).u64[0];
        v740.i64[1] = __PAIR64__(v739.u32[0], v738.u32[0]);
        v741.i64[0] = vtrn2q_s32((int32x4_t)v736, v737).u64[0];
        v741.i64[1] = __PAIR64__(v739.u32[1], v738.u32[1]);
        v736.i64[0] = vzip2q_s32((int32x4_t)v736, v737).u64[0];
        v736.i64[1] = __PAIR64__(v739.u32[2], v738.u32[2]);
        float32x4_t v539 = vaddq_f32(v736, vaddq_f32(v740, v741));
      }
      if (v492.f32[0] <= 0.0) {
        float v742 = 0.0;
      }
      else {
        float v742 = v539.f32[0];
      }
      if (v492.f32[1] <= 0.0) {
        float v743 = 0.0;
      }
      else {
        float v743 = v539.f32[1];
      }
      if (v492.f32[2] <= 0.0) {
        float v744 = 0.0;
      }
      else {
        float v744 = v539.f32[2];
      }
      if (v492.f32[3] <= 0.0) {
        float v745 = 0.0;
      }
      else {
        float v745 = v539.f32[3];
      }
      if (v742 <= 0.0 && v743 <= 0.0 && v744 <= 0.0 && v745 <= 0.0)
      {
        float32x4_t v746 = v1433;
        float32x4_t v747 = v1422;
        if (!v1448) {
          goto LABEL_386;
        }
        goto LABEL_385;
      }
      float32x4_t v1397 = v442;
      float32x4_t v1492 = v28;
      float32x4_t v1508 = v27;
      float32x4_t v1524 = v26;
      float32x4_t v1540 = v25;
      float32x4_t v1460 = v8;
      float v808 = fmaxf(v743, 0.0);
      float v809 = fmaxf(v744, 0.0);
      float v810 = v17[4].f32[0];
      float v811 = fmaxf(v745, 0.0);
      float v812 = v18[4].f32[0];
      float v813 = v19[4].f32[0];
      float32x4_t v814 = v19;
      LODWORD(v1384) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(fmaxf(v742, 0.0), v1547[4].f32[0]));
      LODWORD(v1370) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v808, v810));
      LODWORD(v1356) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v809, v812));
      a1 = (*(uint64_t (**)(float, float))(v4 + 560))(v811, v813);
      if ((v6 & 0x800) != 0)
      {
        float32x4_t v850 = *(float32x4_t *)(v4 + 13056);
        float32x4_t v816 = vmulq_f32(v850, v11[13]);
        float32x4_t v817 = vmulq_f32(v850, v12[13]);
        float32x4_t v818 = vmulq_f32(v850, v13[13]);
        float32x4_t v819 = vmulq_f32(v850, v14[13]);
      }
      else
      {
        float32x4_t v816 = v1547[16];
        float32x4_t v817 = v17[16];
        float32x4_t v818 = v18[16];
        float32x4_t v819 = v814[16];
      }
      float v19 = v814;
      float32x4_t v442 = v1397;
      float32x4_t v514 = v1405;
      float32x4_t v746 = v1433;
      float32x4_t v513 = v1413;
      float32x4_t v747 = v1422;
      float32x4_t v851 = vmulq_n_f32(v816, v1384);
      float32x4_t v852 = vmulq_n_f32(v817, v1370);
      float32x4_t v853 = vmulq_n_f32(v818, v1356);
      float32x4_t v854 = vmulq_n_f32(v819, v815);
      LOWORD(v5) = v1427;
      unint64_t v8 = v1460;
      float32x4_t v26 = v1524;
      float32x4_t v25 = v1540;
      float32x4_t v28 = v1492;
      float32x4_t v27 = v1508;
      float32x4_t v24 = v1479;
      if ((v1427 & 0x10) != 0)
      {
        if (v1448)
        {
          float32x4_t v851 = vmulq_n_f32(v851, v1397.f32[0]);
          float32x4_t v852 = vmulq_lane_f32(v852, *(float32x2_t *)v1397.f32, 1);
          float32x4_t v853 = vmulq_laneq_f32(v853, v1397, 2);
          float32x4_t v854 = vmulq_laneq_f32(v854, v1397, 3);
        }
        float32x4_t v1474 = vaddq_f32(v1474, v852);
        float32x4_t v1477 = vaddq_f32(v1477, v851);
        float32x4_t v1469 = vaddq_f32(v1469, v854);
        float32x4_t v1471 = vaddq_f32(v1471, v853);
        if (!v1448)
        {
LABEL_386:
          float32x4_t v25 = vaddq_f32(v25, v746);
          float32x4_t v26 = vaddq_f32(v26, v747);
          float32x4_t v27 = vaddq_f32(v27, v513);
          float32x4_t v28 = vaddq_f32(v28, v514);
          if ((v6 & 0x10) == 0) {
            goto LABEL_387;
          }
          goto LABEL_310;
        }
      }
      else
      {
        float32x4_t v746 = vaddq_f32(v1433, v851);
        float32x4_t v747 = vaddq_f32(v1422, v852);
        float32x4_t v513 = vaddq_f32(v1413, v853);
        float32x4_t v514 = vaddq_f32(v1405, v854);
        if (!v1448) {
          goto LABEL_386;
        }
      }
LABEL_385:
      float32x4_t v746 = vmulq_n_f32(v746, v442.f32[0]);
      float32x4_t v747 = vmulq_lane_f32(v747, *(float32x2_t *)v442.f32, 1);
      float32x4_t v513 = vmulq_laneq_f32(v513, v442, 2);
      float32x4_t v514 = vmulq_laneq_f32(v514, v442, 3);
      goto LABEL_386;
    }
    if (!v1554) {
      goto LABEL_309;
    }
    if (v1448)
    {
      float32x4_t v476 = vmulq_n_f32(v476, v442.f32[0]);
      float32x4_t v477 = vmulq_lane_f32(v477, *(float32x2_t *)v442.f32, 1);
      float32x4_t v478 = vmulq_laneq_f32(v478, v442, 2);
      float32x4_t v479 = vmulq_laneq_f32(v479, v442, 3);
    }
    float32x4_t v25 = vaddq_f32(v25, v476);
    float32x4_t v26 = vaddq_f32(v26, v477);
    float32x4_t v27 = vaddq_f32(v27, v478);
    float32x4_t v28 = vaddq_f32(v28, v479);
    if ((v6 & 0x10) == 0) {
      goto LABEL_387;
    }
LABEL_310:
    float32x4_t v593 = v11[7];
    float32x4_t v594 = v12[7];
    float32x4_t v595 = v13[7];
    float32x4_t v596 = v14[7];
    if ((v5 & 2) != 0)
    {
      float32x4_t v593 = vnegq_f32(v593);
      float32x4_t v594 = vnegq_f32(v594);
      float32x4_t v595 = vnegq_f32(v595);
      float32x4_t v596 = vnegq_f32(v596);
    }
    float32x4_t v597 = *(float32x4_t *)(v4 + 13280);
    float32x4_t v598 = 0uLL;
    if ((v5 & 0x1000) != 0)
    {
      float32x4_t v619 = vsubq_f32(v597, v1552);
      float32x4_t v620 = vsubq_f32(v597, v1548);
      float32x4_t v621 = vsubq_f32(v597, v1550);
      float32x4_t v622 = vsubq_f32(v597, v24);
      float32x4_t v623 = vmulq_f32(v619, v619);
      int32x4_t v624 = (int32x4_t)vmulq_f32(v620, v620);
      float32x4_t v625 = vmulq_f32(v621, v621);
      v626.i64[0] = vzip1q_s32((int32x4_t)v623, v624).u64[0];
      v626.i32[2] = v625.i32[0];
      float32x4_t v627 = vmulq_f32(v622, v622);
      v626.i32[3] = v627.i32[0];
      v628.i64[0] = vtrn2q_s32((int32x4_t)v623, v624).u64[0];
      v628.i64[1] = __PAIR64__(v627.u32[1], v625.u32[1]);
      v623.i64[0] = vzip2q_s32((int32x4_t)v623, v624).u64[0];
      v623.i64[1] = __PAIR64__(v627.u32[2], v625.u32[2]);
      float32x4_t v629 = vsqrtq_f32(vaddq_f32(v623, vaddq_f32(v626, v628)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v631 = vdivq_f32(_Q0, v629);
      float32x4_t v597 = vmulq_n_f32(v619, v631.f32[0]);
      float32x4_t v599 = vmulq_lane_f32(v620, *(float32x2_t *)v631.f32, 1);
      float32x4_t v600 = vmulq_laneq_f32(v621, v631, 2);
      float32x4_t v601 = vmulq_laneq_f32(v622, v631, 3);
      if ((v6 & 0x10000000) != 0)
      {
        float32x4_t v636 = vdivq_f32(_Q0, v631);
        float32x4_t v637 = v1298;
        float32x4_t v638 = vld1q_dup_f32(v637);
        float32x4_t v639 = v1297;
        float32x4_t v640 = vld1q_dup_f32(v639);
        float32x4_t v598 = vdivq_f32(_Q0, vmlaq_f32(v638, vmlaq_n_f32(v640, v636, *(float *)(v4 + 13272)), v636));
        if ((v6 & 0x100000) == 0)
        {
LABEL_319:
          if (!v1447) {
            goto LABEL_324;
          }
          goto LABEL_320;
        }
      }
      else if ((v6 & 0x100000) == 0)
      {
        goto LABEL_319;
      }
    }
    else
    {
      float32x4_t v599 = *(float32x4_t *)(v4 + 13280);
      float32x4_t v600 = v599;
      float32x4_t v601 = v599;
      if ((v6 & 0x100000) == 0) {
        goto LABEL_319;
      }
    }
    float32x4_t v602 = vnegq_f32(*(float32x4_t *)(v4 + 13296));
    float32x4_t v603 = vmulq_f32(v597, v602);
    int32x4_t v604 = (int32x4_t)vmulq_f32(v599, v602);
    float32x4_t v605 = vmulq_f32(v600, v602);
    float32x4_t v606 = vmulq_f32(v601, v602);
    v607.i64[0] = vzip1q_s32((int32x4_t)v603, v604).u64[0];
    v607.i64[1] = __PAIR64__(v606.u32[0], v605.u32[0]);
    v608.i64[0] = vtrn2q_s32((int32x4_t)v603, v604).u64[0];
    v608.i64[1] = __PAIR64__(v606.u32[1], v605.u32[1]);
    v603.i64[0] = vzip2q_s32((int32x4_t)v603, v604).u64[0];
    v603.i64[1] = __PAIR64__(v606.u32[2], v605.u32[2]);
    float32x4_t v609 = vaddq_f32(v603, vaddq_f32(v607, v608));
    float v610 = v1308;
    float32x4_t v611 = vld1q_dup_f32(v610);
    int32x4_t v612 = vcgeq_f32(v609, v611);
    int32x4_t v613 = (int32x4_t)vmvnq_s8((int8x16_t)v612);
    *(int16x4_t *)v613.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v613), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v613.i8))
    {
      float32x4_t v598 = 0uLL;
      if (!v1447) {
        goto LABEL_324;
      }
    }
    else
    {
      v613.i32[0] = 0;
      int8x16_t v1344 = (int8x16_t)v612;
      v612.i32[0] = v6 & 0x10000000;
      int8x16_t v614 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v612, v613), 0);
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1336 = (float32x4_t)vbslq_s8(v614, _Q1, (int8x16_t)v598);
      float v616 = *(float *)(v4 + 13276);
      float32x4_t v1521 = v26;
      float32x4_t v1537 = v25;
      float32x4_t v1489 = v28;
      float32x4_t v1505 = v27;
      float32x4_t v1367 = v600;
      float32x4_t v1381 = v597;
      float32x4_t v1434 = v601;
      float32x4_t v1353 = v599;
      float32x4_t v1457 = v609;
      unsigned int v1329 = COERCE_UNSIGNED_INT64((*(double (**)(void))(v4 + 560))());
      unsigned int v1322 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1457.f32[1], v616));
      unsigned int v1315 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1457.f32[2], v616));
      *(float *)&unsigned int v617 = (*(float (**)(float, float))(v4 + 560))(v1457.f32[3], v616);
      float32x4_t v599 = v1353;
      float32x4_t v600 = v1367;
      float32x4_t v601 = v1434;
      float32x4_t v597 = v1381;
      float32x4_t v24 = v1479;
      float32x4_t v28 = v1489;
      float32x4_t v27 = v1505;
      float32x4_t v26 = v1521;
      float32x4_t v25 = v1537;
      float v19 = v1481;
      v618.i64[0] = __PAIR64__(v1322, v1329);
      v618.i64[1] = __PAIR64__(v617, v1315);
      float32x4_t v598 = vmulq_f32(v1336, (float32x4_t)vandq_s8(v618, v1344));
      if (!v1447) {
        goto LABEL_324;
      }
    }
LABEL_320:
    if (v598.f32[0] <= 0.0 && v598.f32[1] <= 0.0 && v598.f32[2] <= 0.0 && v598.f32[3] <= 0.0) {
      goto LABEL_387;
    }
LABEL_324:
    if (v1554)
    {
      if ((v6 & 0x200) != 0)
      {
        float32x4_t v641 = *(float32x4_t *)(v4 + 13184);
        float32x4_t v632 = vmulq_f32(v641, v11[13]);
        float32x4_t v633 = vmulq_f32(v641, v12[13]);
        float32x4_t v634 = vmulq_f32(v641, v13[13]);
        float32x4_t v635 = vmulq_f32(v641, v14[13]);
      }
      else
      {
        float32x4_t v632 = v1547[17];
        float32x4_t v633 = v17[17];
        float32x4_t v634 = v18[17];
        float32x4_t v635 = v19[17];
      }
    }
    else
    {
      float32x4_t v635 = 0uLL;
      float32x4_t v634 = 0uLL;
      float32x4_t v633 = 0uLL;
      float32x4_t v632 = 0uLL;
    }
    float32x4_t v642 = vmulq_f32(v593, v597);
    int32x4_t v643 = (int32x4_t)vmulq_f32(v594, v599);
    float32x4_t v644 = vmulq_f32(v595, v600);
    float32x4_t v645 = vmulq_f32(v596, v601);
    v646.i64[0] = vzip1q_s32((int32x4_t)v642, v643).u64[0];
    v646.i64[1] = __PAIR64__(v645.u32[0], v644.u32[0]);
    v647.i64[0] = vtrn2q_s32((int32x4_t)v642, v643).u64[0];
    v647.i64[1] = __PAIR64__(v645.u32[1], v644.u32[1]);
    v642.i64[0] = vzip2q_s32((int32x4_t)v642, v643).u64[0];
    v642.i64[1] = __PAIR64__(v645.u32[2], v644.u32[2]);
    float32x4_t v648 = vaddq_f32(v642, vaddq_f32(v646, v647));
    if (v648.f32[0] <= 0.0 && v648.f32[1] <= 0.0 && v648.f32[2] <= 0.0 && v648.f32[3] <= 0.0)
    {
      if (v1554)
      {
        if (v1447)
        {
          float32x4_t v632 = vmulq_n_f32(v632, v598.f32[0]);
          float32x4_t v633 = vmulq_lane_f32(v633, *(float32x2_t *)v598.f32, 1);
          float32x4_t v634 = vmulq_laneq_f32(v634, v598, 2);
          float32x4_t v635 = vmulq_laneq_f32(v635, v598, 3);
        }
        float32x4_t v25 = vaddq_f32(v25, v632);
        float32x4_t v26 = vaddq_f32(v26, v633);
        float32x4_t v27 = vaddq_f32(v27, v634);
        float32x4_t v28 = vaddq_f32(v28, v635);
      }
LABEL_387:
      if ((v6 & 0x20) == 0) {
        goto LABEL_466;
      }
      goto LABEL_388;
    }
    float32x4_t v1435 = v601;
    if ((v6 & 0x400) != 0)
    {
      float32x4_t v665 = *(float32x4_t *)(v4 + 13200);
      float32x4_t v649 = vmulq_f32(v665, v11[13]);
      float32x4_t v650 = vmulq_f32(v665, v12[13]);
      float32x4_t v651 = vmulq_f32(v665, v13[13]);
      float32x4_t v652 = vmulq_f32(v665, v14[13]);
    }
    else
    {
      float32x4_t v649 = v1547[18];
      float32x4_t v650 = v17[18];
      float32x4_t v651 = v18[18];
      float32x4_t v652 = v19[18];
    }
    float32x4_t v666 = vmulq_n_f32(v649, fmaxf(v648.f32[0], 0.0));
    float32x4_t v667 = vmulq_n_f32(v650, fmaxf(v648.f32[1], 0.0));
    float32x4_t v668 = vmulq_n_f32(v651, fmaxf(v648.f32[2], 0.0));
    float32x4_t v669 = vmulq_n_f32(v652, fmaxf(v648.f32[3], 0.0));
    if (v1554)
    {
      float32x4_t v666 = vaddq_f32(v632, v666);
      float32x4_t v667 = vaddq_f32(v633, v667);
      float32x4_t v668 = vaddq_f32(v634, v668);
      float32x4_t v669 = vaddq_f32(v635, v669);
    }
    float32x4_t v1414 = v667;
    float32x4_t v1423 = v666;
    float32x4_t v1396 = v669;
    float32x4_t v1406 = v668;
    if ((v5 & 0x20) != 0)
    {
      float32x4_t v674 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v593, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v593, 0xCuLL)));
      int32x4_t v675 = (int32x4_t)vmlsq_f32(vmulq_f32(v674, v597), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v597, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v597, 0xCuLL))), v593);
      int32x4_t v676 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v675, 0xCuLL);
      float32x4_t v677 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v594, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v594, 0xCuLL)));
      float32x4_t v678 = vmlsq_f32(vmulq_f32(v677, v599), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v599, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v599, 0xCuLL))), v594);
      int32x4_t v679 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v678, 0xCuLL);
      float32x4_t v680 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v595, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v595, 0xCuLL)));
      int32x4_t v681 = (int32x4_t)vmlsq_f32(vmulq_f32(v680, v600), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v600, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v600, 0xCuLL))), v595);
      int32x4_t v682 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v681, 0xCuLL);
      float32x4_t v683 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v596, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v596, 0xCuLL)));
      int32x4_t v684 = (int32x4_t)vmlsq_f32(vmulq_f32(v683, v1435), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1435, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1435, 0xCuLL))), v596);
      int32x4_t v685 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v684, 0xCuLL);
      int32x4_t v686 = (int32x4_t)vmlsq_f32(vmulq_f32(v674, (float32x4_t)vrev64q_s32(vuzp1q_s32(v675, v676))), (float32x4_t)vextq_s8((int8x16_t)v676, (int8x16_t)vrev64q_s32(v676), 8uLL), v593);
      int32x4_t v687 = (int32x4_t)vmlsq_f32(vmulq_f32(v677, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v678, v679))), (float32x4_t)vextq_s8((int8x16_t)v679, (int8x16_t)vrev64q_s32(v679), 8uLL), v594);
      int32x4_t v688 = (int32x4_t)vmlsq_f32(vmulq_f32(v680, (float32x4_t)vrev64q_s32(vuzp1q_s32(v681, v682))), (float32x4_t)vextq_s8((int8x16_t)v682, (int8x16_t)vrev64q_s32(v682), 8uLL), v595);
      int32x4_t v689 = (int32x4_t)vmlsq_f32(vmulq_f32(v683, (float32x4_t)vrev64q_s32(vuzp1q_s32(v684, v685))), (float32x4_t)vextq_s8((int8x16_t)v685, (int8x16_t)vrev64q_s32(v685), 8uLL), v596);
      v678.i64[0] = 0x4000000040000000;
      v678.i64[1] = 0x4000000040000000;
      float32x4_t v690 = vmlaq_f32(v597, v678, (float32x4_t)vrev64q_s32(vuzp1q_s32(v686, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v686, 0xCuLL))));
      float32x4_t v691 = vmlaq_f32(v599, v678, (float32x4_t)vrev64q_s32(vuzp1q_s32(v687, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v687, 0xCuLL))));
      float32x4_t v692 = vmlaq_f32(v600, v678, (float32x4_t)vrev64q_s32(vuzp1q_s32(v688, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v688, 0xCuLL))));
      float32x4_t v693 = vmlaq_f32(v1435, v678, (float32x4_t)vrev64q_s32(vuzp1q_s32(v689, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v689, 0xCuLL))));
      if ((v5 & 8) != 0)
      {
        float32x4_t v700 = vmulq_f32(v1552, v1552);
        int32x4_t v701 = (int32x4_t)vmulq_f32(v1548, v1548);
        float32x4_t v702 = vmulq_f32(v1550, v1550);
        float32x4_t v703 = vmulq_f32(v24, v24);
        v704.i64[0] = vzip1q_s32((int32x4_t)v700, v701).u64[0];
        v704.i64[1] = __PAIR64__(v703.u32[0], v702.u32[0]);
        v705.i64[0] = vtrn2q_s32((int32x4_t)v700, v701).u64[0];
        v705.i64[1] = __PAIR64__(v703.u32[1], v702.u32[1]);
        v700.i64[0] = vzip2q_s32((int32x4_t)v700, v701).u64[0];
        v700.i64[1] = __PAIR64__(v703.u32[2], v702.u32[2]);
        __asm { FMOV            V7.4S, #1.0 }
        float32x4_t v707 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v700, vaddq_f32(v704, v705))));
        float32x4_t v708 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1552), v707.f32[0]), v690);
        int32x4_t v709 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v707.f32, 1), v691);
        float32x4_t v710 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1550), v707, 2), v692);
        float32x4_t v711 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v24), v707, 3), v693);
        v702.i64[0] = vzip1q_s32((int32x4_t)v708, v709).u64[0];
        v702.i64[1] = __PAIR64__(v711.u32[0], v710.u32[0]);
        v703.i64[0] = vtrn2q_s32((int32x4_t)v708, v709).u64[0];
        v703.i64[1] = __PAIR64__(v711.u32[1], v710.u32[1]);
        v708.i64[0] = vzip2q_s32((int32x4_t)v708, v709).u64[0];
        v708.i64[1] = __PAIR64__(v711.u32[2], v710.u32[2]);
        float32x4_t v694 = vaddq_f32(v708, vaddq_f32(v702, v703));
      }
      else
      {
        v694.i64[0] = vzip2q_s32((int32x4_t)v690, (int32x4_t)v691).u64[0];
        v694.i64[1] = __PAIR64__(v693.u32[2], v692.u32[2]);
      }
      float32x4_t v669 = v1396;
      float32x4_t v668 = v1406;
      float v9 = 1.0;
    }
    else
    {
      if (v1282)
      {
        if ((v5 & 8) != 0)
        {
          float32x4_t v871 = vmulq_f32(v1552, v1552);
          int32x4_t v872 = (int32x4_t)vmulq_f32(v1548, v1548);
          float32x4_t v873 = vmulq_f32(v1550, v1550);
          v874.i64[0] = vzip1q_s32((int32x4_t)v871, v872).u64[0];
          v874.i32[2] = v873.i32[0];
          float32x4_t v875 = vmulq_f32(v24, v24);
          v874.i32[3] = v875.i32[0];
          v876.i64[0] = vtrn2q_s32((int32x4_t)v871, v872).u64[0];
          v876.i64[1] = __PAIR64__(v875.u32[1], v873.u32[1]);
          v871.i64[0] = vzip2q_s32((int32x4_t)v871, v872).u64[0];
          v871.i64[1] = __PAIR64__(v875.u32[2], v873.u32[2]);
          __asm { FMOV            V16.4S, #1.0 }
          float32x4_t v878 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v871, vaddq_f32(v874, v876))));
          float32x4_t v670 = vmulq_n_f32(vnegq_f32(v1552), v878.f32[0]);
          float32x4_t v671 = vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v878.f32, 1);
          float32x4_t v672 = vmulq_laneq_f32(vnegq_f32(v1550), v878, 2);
          float32x4_t v673 = vmulq_laneq_f32(vnegq_f32(v24), v878, 3);
        }
        else
        {
          float32x4_t v670 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v671 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v672 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v673 = (float32x4_t)xmmword_227DC2100;
        }
        float32x4_t v879 = vaddq_f32(v597, v670);
        float32x4_t v880 = vaddq_f32(v599, v671);
        float32x4_t v881 = vaddq_f32(v600, v672);
        float32x4_t v882 = vaddq_f32(v1435, v673);
        float32x4_t v883 = vmulq_f32(v879, v879);
        int32x4_t v884 = (int32x4_t)vmulq_f32(v880, v880);
        float32x4_t v885 = vmulq_f32(v881, v881);
        v886.i64[0] = vzip1q_s32((int32x4_t)v883, v884).u64[0];
        v886.i32[2] = v885.i32[0];
        float32x4_t v887 = vmulq_f32(v882, v882);
        v886.i32[3] = v887.i32[0];
        v888.i64[0] = vtrn2q_s32((int32x4_t)v883, v884).u64[0];
        v888.i64[1] = __PAIR64__(v887.u32[1], v885.u32[1]);
        v883.i64[0] = vzip2q_s32((int32x4_t)v883, v884).u64[0];
        v883.i64[1] = __PAIR64__(v887.u32[2], v885.u32[2]);
        __asm { FMOV            V17.4S, #1.0 }
        float32x4_t v890 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v883, vaddq_f32(v886, v888))));
        float32x4_t v712 = vmulq_n_f32(v879, v890.f32[0]);
        float32x4_t v713 = vmulq_lane_f32(v880, *(float32x2_t *)v890.f32, 1);
        float32x4_t v714 = vmulq_laneq_f32(v881, v890, 2);
        float32x4_t v715 = vmulq_laneq_f32(v882, v890, 3);
      }
      else
      {
        float32x4_t v712 = *(float32x4_t *)(v4 + 13312);
        float32x4_t v713 = v712;
        float32x4_t v714 = v712;
        float32x4_t v715 = v712;
      }
      float32x4_t v891 = vmulq_f32(v593, v712);
      int32x4_t v892 = (int32x4_t)vmulq_f32(v594, v713);
      float32x4_t v893 = vmulq_f32(v595, v714);
      float32x4_t v894 = vmulq_f32(v596, v715);
      v895.i64[0] = vzip1q_s32((int32x4_t)v891, v892).u64[0];
      v895.i64[1] = __PAIR64__(v894.u32[0], v893.u32[0]);
      v896.i64[0] = vtrn2q_s32((int32x4_t)v891, v892).u64[0];
      v896.i64[1] = __PAIR64__(v894.u32[1], v893.u32[1]);
      v891.i64[0] = vzip2q_s32((int32x4_t)v891, v892).u64[0];
      v891.i64[1] = __PAIR64__(v894.u32[2], v893.u32[2]);
      float32x4_t v694 = vaddq_f32(v891, vaddq_f32(v895, v896));
    }
    if (v648.f32[0] <= 0.0) {
      float v897 = 0.0;
    }
    else {
      float v897 = v694.f32[0];
    }
    if (v648.f32[1] <= 0.0) {
      float v898 = 0.0;
    }
    else {
      float v898 = v694.f32[1];
    }
    if (v648.f32[2] <= 0.0) {
      float v899 = 0.0;
    }
    else {
      float v899 = v694.f32[2];
    }
    if (v648.f32[3] <= 0.0) {
      float v900 = 0.0;
    }
    else {
      float v900 = v694.f32[3];
    }
    if (v897 <= 0.0 && v898 <= 0.0 && v899 <= 0.0 && v900 <= 0.0)
    {
      float32x4_t v902 = v1414;
      float32x4_t v901 = v1423;
      if (!v1447) {
        goto LABEL_465;
      }
LABEL_464:
      float32x4_t v901 = vmulq_n_f32(v901, v598.f32[0]);
      float32x4_t v902 = vmulq_lane_f32(v902, *(float32x2_t *)v598.f32, 1);
      float32x4_t v668 = vmulq_laneq_f32(v668, v598, 2);
      float32x4_t v669 = vmulq_laneq_f32(v669, v598, 3);
      goto LABEL_465;
    }
    float32x4_t v1440 = v598;
    float32x4_t v1494 = v28;
    float32x4_t v1510 = v27;
    float32x4_t v1526 = v26;
    float32x4_t v1542 = v25;
    __int16 v1462 = v8;
    float v963 = fmaxf(v898, 0.0);
    float v964 = fmaxf(v899, 0.0);
    float v965 = v17[4].f32[0];
    float v966 = fmaxf(v900, 0.0);
    float v967 = v18[4].f32[0];
    float v968 = v19[4].f32[0];
    float32x4_t v969 = v19;
    LODWORD(v1386) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(fmaxf(v897, 0.0), v1547[4].f32[0]));
    LODWORD(v1372) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v963, v965));
    LODWORD(v1358) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v964, v967));
    a1 = (*(uint64_t (**)(float, float))(v4 + 560))(v966, v968);
    if ((v6 & 0x800) != 0)
    {
      float32x4_t v1005 = *(float32x4_t *)(v4 + 13216);
      float32x4_t v971 = vmulq_f32(v1005, v11[13]);
      float32x4_t v972 = vmulq_f32(v1005, v12[13]);
      float32x4_t v973 = vmulq_f32(v1005, v13[13]);
      float32x4_t v974 = vmulq_f32(v1005, v14[13]);
    }
    else
    {
      float32x4_t v971 = v1547[19];
      float32x4_t v972 = v17[19];
      float32x4_t v973 = v18[19];
      float32x4_t v974 = v969[19];
    }
    float v19 = v969;
    float32x4_t v598 = v1440;
    float32x4_t v902 = v1414;
    float32x4_t v901 = v1423;
    float32x4_t v669 = v1396;
    float32x4_t v668 = v1406;
    float32x4_t v1006 = vmulq_n_f32(v971, v1386);
    float32x4_t v1007 = vmulq_n_f32(v972, v1372);
    float32x4_t v1008 = vmulq_n_f32(v973, v1358);
    float32x4_t v1009 = vmulq_n_f32(v974, v970);
    LOWORD(v5) = v1427;
    unint64_t v8 = v1462;
    float32x4_t v26 = v1526;
    float32x4_t v25 = v1542;
    float32x4_t v28 = v1494;
    float32x4_t v27 = v1510;
    float32x4_t v24 = v1479;
    if ((v1427 & 0x10) != 0)
    {
      if (v1447)
      {
        float32x4_t v1006 = vmulq_n_f32(v1006, v1440.f32[0]);
        float32x4_t v1007 = vmulq_lane_f32(v1007, *(float32x2_t *)v1440.f32, 1);
        float32x4_t v1008 = vmulq_laneq_f32(v1008, v1440, 2);
        float32x4_t v1009 = vmulq_laneq_f32(v1009, v1440, 3);
      }
      float32x4_t v1474 = vaddq_f32(v1474, v1007);
      float32x4_t v1477 = vaddq_f32(v1477, v1006);
      float32x4_t v1469 = vaddq_f32(v1469, v1009);
      float32x4_t v1471 = vaddq_f32(v1471, v1008);
      if (v1447) {
        goto LABEL_464;
      }
    }
    else
    {
      float32x4_t v901 = vaddq_f32(v1423, v1006);
      float32x4_t v902 = vaddq_f32(v1414, v1007);
      float32x4_t v668 = vaddq_f32(v1406, v1008);
      float32x4_t v669 = vaddq_f32(v1396, v1009);
      if (v1447) {
        goto LABEL_464;
      }
    }
LABEL_465:
    float32x4_t v25 = vaddq_f32(v25, v901);
    float32x4_t v26 = vaddq_f32(v26, v902);
    float32x4_t v27 = vaddq_f32(v27, v668);
    float32x4_t v28 = vaddq_f32(v28, v669);
    if ((v6 & 0x20) == 0) {
      goto LABEL_466;
    }
LABEL_388:
    float32x4_t v748 = v11[7];
    float32x4_t v749 = v12[7];
    float32x4_t v750 = v13[7];
    float32x4_t v751 = v14[7];
    if ((v5 & 2) != 0)
    {
      float32x4_t v748 = vnegq_f32(v748);
      float32x4_t v749 = vnegq_f32(v749);
      float32x4_t v750 = vnegq_f32(v750);
      float32x4_t v751 = vnegq_f32(v751);
    }
    float32x4_t v752 = *(float32x4_t *)(v4 + 13440);
    float32x4_t v753 = 0uLL;
    if ((v5 & 0x2000) != 0)
    {
      float32x4_t v774 = vsubq_f32(v752, v1552);
      float32x4_t v775 = vsubq_f32(v752, v1548);
      float32x4_t v776 = vsubq_f32(v752, v1550);
      float32x4_t v777 = vsubq_f32(v752, v24);
      float32x4_t v778 = vmulq_f32(v774, v774);
      int32x4_t v779 = (int32x4_t)vmulq_f32(v775, v775);
      float32x4_t v780 = vmulq_f32(v776, v776);
      v781.i64[0] = vzip1q_s32((int32x4_t)v778, v779).u64[0];
      v781.i32[2] = v780.i32[0];
      float32x4_t v782 = vmulq_f32(v777, v777);
      v781.i32[3] = v782.i32[0];
      v783.i64[0] = vtrn2q_s32((int32x4_t)v778, v779).u64[0];
      v783.i64[1] = __PAIR64__(v782.u32[1], v780.u32[1]);
      v778.i64[0] = vzip2q_s32((int32x4_t)v778, v779).u64[0];
      v778.i64[1] = __PAIR64__(v782.u32[2], v780.u32[2]);
      float32x4_t v784 = vsqrtq_f32(vaddq_f32(v778, vaddq_f32(v781, v783)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v786 = vdivq_f32(_Q0, v784);
      float32x4_t v752 = vmulq_n_f32(v774, v786.f32[0]);
      float32x4_t v754 = vmulq_lane_f32(v775, *(float32x2_t *)v786.f32, 1);
      float32x4_t v755 = vmulq_laneq_f32(v776, v786, 2);
      float32x4_t v756 = vmulq_laneq_f32(v777, v786, 3);
      if ((v6 & 0x20000000) != 0)
      {
        float32x4_t v791 = vdivq_f32(_Q0, v786);
        float32x4_t v792 = v1300;
        float32x4_t v793 = vld1q_dup_f32(v792);
        float32x4_t v794 = v1299;
        float32x4_t v795 = vld1q_dup_f32(v794);
        float32x4_t v753 = vdivq_f32(_Q0, vmlaq_f32(v793, vmlaq_n_f32(v795, v791, *(float *)(v4 + 13432)), v791));
        if ((v6 & 0x200000) == 0)
        {
LABEL_397:
          if (!v1446) {
            goto LABEL_402;
          }
          goto LABEL_398;
        }
      }
      else if ((v6 & 0x200000) == 0)
      {
        goto LABEL_397;
      }
    }
    else
    {
      float32x4_t v754 = *(float32x4_t *)(v4 + 13440);
      float32x4_t v755 = v754;
      float32x4_t v756 = v754;
      if ((v6 & 0x200000) == 0) {
        goto LABEL_397;
      }
    }
    float32x4_t v757 = vnegq_f32(*(float32x4_t *)(v4 + 13456));
    float32x4_t v758 = vmulq_f32(v752, v757);
    int32x4_t v759 = (int32x4_t)vmulq_f32(v754, v757);
    float32x4_t v760 = vmulq_f32(v755, v757);
    float32x4_t v761 = vmulq_f32(v756, v757);
    v762.i64[0] = vzip1q_s32((int32x4_t)v758, v759).u64[0];
    v762.i64[1] = __PAIR64__(v761.u32[0], v760.u32[0]);
    v763.i64[0] = vtrn2q_s32((int32x4_t)v758, v759).u64[0];
    v763.i64[1] = __PAIR64__(v761.u32[1], v760.u32[1]);
    v758.i64[0] = vzip2q_s32((int32x4_t)v758, v759).u64[0];
    v758.i64[1] = __PAIR64__(v761.u32[2], v760.u32[2]);
    float32x4_t v764 = vaddq_f32(v758, vaddq_f32(v762, v763));
    float32x4_t v765 = v1309;
    float32x4_t v766 = vld1q_dup_f32(v765);
    int32x4_t v767 = vcgeq_f32(v764, v766);
    int32x4_t v768 = (int32x4_t)vmvnq_s8((int8x16_t)v767);
    *(int16x4_t *)v768.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v768), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v768.i8))
    {
      float32x4_t v753 = 0uLL;
      if (!v1446) {
        goto LABEL_402;
      }
    }
    else
    {
      v768.i32[0] = 0;
      int8x16_t v1345 = (int8x16_t)v767;
      v767.i32[0] = v6 & 0x20000000;
      int8x16_t v769 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v767, v768), 0);
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1337 = (float32x4_t)vbslq_s8(v769, _Q1, (int8x16_t)v753);
      float v771 = *(float *)(v4 + 13436);
      float32x4_t v1523 = v26;
      float32x4_t v1539 = v25;
      float32x4_t v1491 = v28;
      float32x4_t v1507 = v27;
      float32x4_t v1369 = v755;
      float32x4_t v1383 = v752;
      float32x4_t v1436 = v756;
      float32x4_t v1355 = v754;
      float32x4_t v1459 = v764;
      unsigned int v1330 = COERCE_UNSIGNED_INT64((*(double (**)(void))(v4 + 560))());
      unsigned int v1323 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1459.f32[1], v771));
      unsigned int v1316 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1459.f32[2], v771));
      *(float *)&unsigned int v772 = (*(float (**)(float, float))(v4 + 560))(v1459.f32[3], v771);
      float32x4_t v754 = v1355;
      float32x4_t v755 = v1369;
      float32x4_t v756 = v1436;
      float32x4_t v752 = v1383;
      float32x4_t v24 = v1479;
      float32x4_t v28 = v1491;
      float32x4_t v27 = v1507;
      float32x4_t v26 = v1523;
      float32x4_t v25 = v1539;
      float v19 = v1481;
      v773.i64[0] = __PAIR64__(v1323, v1330);
      v773.i64[1] = __PAIR64__(v772, v1316);
      float32x4_t v753 = vmulq_f32(v1337, (float32x4_t)vandq_s8(v773, v1345));
      if (!v1446) {
        goto LABEL_402;
      }
    }
LABEL_398:
    if (v753.f32[0] <= 0.0 && v753.f32[1] <= 0.0 && v753.f32[2] <= 0.0 && v753.f32[3] <= 0.0)
    {
LABEL_466:
      if ((v6 & 0x40) == 0) {
        goto LABEL_544;
      }
      goto LABEL_467;
    }
LABEL_402:
    if (v1554)
    {
      if ((v6 & 0x200) != 0)
      {
        float32x4_t v796 = *(float32x4_t *)(v4 + 13344);
        float32x4_t v787 = vmulq_f32(v796, v11[13]);
        float32x4_t v788 = vmulq_f32(v796, v12[13]);
        float32x4_t v789 = vmulq_f32(v796, v13[13]);
        float32x4_t v790 = vmulq_f32(v796, v14[13]);
      }
      else
      {
        float32x4_t v787 = v1547[20];
        float32x4_t v788 = v17[20];
        float32x4_t v789 = v18[20];
        float32x4_t v790 = v19[20];
      }
    }
    else
    {
      float32x4_t v790 = 0uLL;
      float32x4_t v789 = 0uLL;
      float32x4_t v788 = 0uLL;
      float32x4_t v787 = 0uLL;
    }
    float32x4_t v797 = vmulq_f32(v748, v752);
    int32x4_t v798 = (int32x4_t)vmulq_f32(v749, v754);
    float32x4_t v799 = vmulq_f32(v750, v755);
    float32x4_t v800 = vmulq_f32(v751, v756);
    v801.i64[0] = vzip1q_s32((int32x4_t)v797, v798).u64[0];
    v801.i64[1] = __PAIR64__(v800.u32[0], v799.u32[0]);
    v802.i64[0] = vtrn2q_s32((int32x4_t)v797, v798).u64[0];
    v802.i64[1] = __PAIR64__(v800.u32[1], v799.u32[1]);
    v797.i64[0] = vzip2q_s32((int32x4_t)v797, v798).u64[0];
    v797.i64[1] = __PAIR64__(v800.u32[2], v799.u32[2]);
    float32x4_t v803 = vaddq_f32(v797, vaddq_f32(v801, v802));
    if (v803.f32[0] > 0.0 || v803.f32[1] > 0.0 || v803.f32[2] > 0.0 || v803.f32[3] > 0.0)
    {
      float32x4_t v1437 = v756;
      if ((v6 & 0x400) != 0)
      {
        float32x4_t v820 = *(float32x4_t *)(v4 + 13360);
        float32x4_t v804 = vmulq_f32(v820, v11[13]);
        float32x4_t v805 = vmulq_f32(v820, v12[13]);
        float32x4_t v806 = vmulq_f32(v820, v13[13]);
        float32x4_t v807 = vmulq_f32(v820, v14[13]);
      }
      else
      {
        float32x4_t v804 = v1547[21];
        float32x4_t v805 = v17[21];
        float32x4_t v806 = v18[21];
        float32x4_t v807 = v19[21];
      }
      float32x4_t v821 = vmulq_n_f32(v804, fmaxf(v803.f32[0], 0.0));
      float32x4_t v822 = vmulq_n_f32(v805, fmaxf(v803.f32[1], 0.0));
      float32x4_t v823 = vmulq_n_f32(v806, fmaxf(v803.f32[2], 0.0));
      float32x4_t v824 = vmulq_n_f32(v807, fmaxf(v803.f32[3], 0.0));
      if (v1554)
      {
        float32x4_t v821 = vaddq_f32(v787, v821);
        float32x4_t v822 = vaddq_f32(v788, v822);
        float32x4_t v823 = vaddq_f32(v789, v823);
        float32x4_t v824 = vaddq_f32(v790, v824);
      }
      float32x4_t v1415 = v822;
      float32x4_t v1424 = v821;
      float32x4_t v1398 = v824;
      float32x4_t v1407 = v823;
      if ((v5 & 0x20) != 0)
      {
        float32x4_t v829 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v748, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v748, 0xCuLL)));
        int32x4_t v830 = (int32x4_t)vmlsq_f32(vmulq_f32(v829, v752), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v752, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v752, 0xCuLL))), v748);
        int32x4_t v831 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v830, 0xCuLL);
        float32x4_t v832 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v749, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v749, 0xCuLL)));
        float32x4_t v833 = vmlsq_f32(vmulq_f32(v832, v754), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v754, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v754, 0xCuLL))), v749);
        int32x4_t v834 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v833, 0xCuLL);
        float32x4_t v835 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v750, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v750, 0xCuLL)));
        int32x4_t v836 = (int32x4_t)vmlsq_f32(vmulq_f32(v835, v755), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v755, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v755, 0xCuLL))), v750);
        int32x4_t v837 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v836, 0xCuLL);
        float32x4_t v838 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v751, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v751, 0xCuLL)));
        int32x4_t v839 = (int32x4_t)vmlsq_f32(vmulq_f32(v838, v1437), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1437, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1437, 0xCuLL))), v751);
        int32x4_t v840 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v839, 0xCuLL);
        int32x4_t v841 = (int32x4_t)vmlsq_f32(vmulq_f32(v829, (float32x4_t)vrev64q_s32(vuzp1q_s32(v830, v831))), (float32x4_t)vextq_s8((int8x16_t)v831, (int8x16_t)vrev64q_s32(v831), 8uLL), v748);
        int32x4_t v842 = (int32x4_t)vmlsq_f32(vmulq_f32(v832, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v833, v834))), (float32x4_t)vextq_s8((int8x16_t)v834, (int8x16_t)vrev64q_s32(v834), 8uLL), v749);
        int32x4_t v843 = (int32x4_t)vmlsq_f32(vmulq_f32(v835, (float32x4_t)vrev64q_s32(vuzp1q_s32(v836, v837))), (float32x4_t)vextq_s8((int8x16_t)v837, (int8x16_t)vrev64q_s32(v837), 8uLL), v750);
        int32x4_t v844 = (int32x4_t)vmlsq_f32(vmulq_f32(v838, (float32x4_t)vrev64q_s32(vuzp1q_s32(v839, v840))), (float32x4_t)vextq_s8((int8x16_t)v840, (int8x16_t)vrev64q_s32(v840), 8uLL), v751);
        v833.i64[0] = 0x4000000040000000;
        v833.i64[1] = 0x4000000040000000;
        float32x4_t v845 = vmlaq_f32(v752, v833, (float32x4_t)vrev64q_s32(vuzp1q_s32(v841, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v841, 0xCuLL))));
        float32x4_t v846 = vmlaq_f32(v754, v833, (float32x4_t)vrev64q_s32(vuzp1q_s32(v842, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v842, 0xCuLL))));
        float32x4_t v847 = vmlaq_f32(v755, v833, (float32x4_t)vrev64q_s32(vuzp1q_s32(v843, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v843, 0xCuLL))));
        float32x4_t v848 = vmlaq_f32(v1437, v833, (float32x4_t)vrev64q_s32(vuzp1q_s32(v844, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v844, 0xCuLL))));
        if ((v5 & 8) != 0)
        {
          float32x4_t v855 = vmulq_f32(v1552, v1552);
          int32x4_t v856 = (int32x4_t)vmulq_f32(v1548, v1548);
          float32x4_t v857 = vmulq_f32(v1550, v1550);
          float32x4_t v858 = vmulq_f32(v24, v24);
          v859.i64[0] = vzip1q_s32((int32x4_t)v855, v856).u64[0];
          v859.i64[1] = __PAIR64__(v858.u32[0], v857.u32[0]);
          v860.i64[0] = vtrn2q_s32((int32x4_t)v855, v856).u64[0];
          v860.i64[1] = __PAIR64__(v858.u32[1], v857.u32[1]);
          v855.i64[0] = vzip2q_s32((int32x4_t)v855, v856).u64[0];
          v855.i64[1] = __PAIR64__(v858.u32[2], v857.u32[2]);
          __asm { FMOV            V7.4S, #1.0 }
          float32x4_t v862 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v855, vaddq_f32(v859, v860))));
          float32x4_t v863 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1552), v862.f32[0]), v845);
          int32x4_t v864 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v862.f32, 1), v846);
          float32x4_t v865 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1550), v862, 2), v847);
          float32x4_t v866 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v24), v862, 3), v848);
          v857.i64[0] = vzip1q_s32((int32x4_t)v863, v864).u64[0];
          v857.i64[1] = __PAIR64__(v866.u32[0], v865.u32[0]);
          v858.i64[0] = vtrn2q_s32((int32x4_t)v863, v864).u64[0];
          v858.i64[1] = __PAIR64__(v866.u32[1], v865.u32[1]);
          v863.i64[0] = vzip2q_s32((int32x4_t)v863, v864).u64[0];
          v863.i64[1] = __PAIR64__(v866.u32[2], v865.u32[2]);
          float32x4_t v849 = vaddq_f32(v863, vaddq_f32(v857, v858));
        }
        else
        {
          v849.i64[0] = vzip2q_s32((int32x4_t)v845, (int32x4_t)v846).u64[0];
          v849.i64[1] = __PAIR64__(v848.u32[2], v847.u32[2]);
        }
        float32x4_t v824 = v1398;
        float32x4_t v823 = v1407;
        float v9 = 1.0;
      }
      else
      {
        if (v1281)
        {
          if ((v5 & 8) != 0)
          {
            float32x4_t v1026 = vmulq_f32(v1552, v1552);
            int32x4_t v1027 = (int32x4_t)vmulq_f32(v1548, v1548);
            float32x4_t v1028 = vmulq_f32(v1550, v1550);
            v1029.i64[0] = vzip1q_s32((int32x4_t)v1026, v1027).u64[0];
            v1029.i32[2] = v1028.i32[0];
            float32x4_t v1030 = vmulq_f32(v24, v24);
            v1029.i32[3] = v1030.i32[0];
            v1031.i64[0] = vtrn2q_s32((int32x4_t)v1026, v1027).u64[0];
            v1031.i64[1] = __PAIR64__(v1030.u32[1], v1028.u32[1]);
            v1026.i64[0] = vzip2q_s32((int32x4_t)v1026, v1027).u64[0];
            v1026.i64[1] = __PAIR64__(v1030.u32[2], v1028.u32[2]);
            __asm { FMOV            V16.4S, #1.0 }
            float32x4_t v1033 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v1026, vaddq_f32(v1029, v1031))));
            float32x4_t v825 = vmulq_n_f32(vnegq_f32(v1552), v1033.f32[0]);
            float32x4_t v826 = vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v1033.f32, 1);
            float32x4_t v827 = vmulq_laneq_f32(vnegq_f32(v1550), v1033, 2);
            float32x4_t v828 = vmulq_laneq_f32(vnegq_f32(v24), v1033, 3);
          }
          else
          {
            float32x4_t v825 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v826 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v827 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v828 = (float32x4_t)xmmword_227DC2100;
          }
          float32x4_t v1034 = vaddq_f32(v752, v825);
          float32x4_t v1035 = vaddq_f32(v754, v826);
          float32x4_t v1036 = vaddq_f32(v755, v827);
          float32x4_t v1037 = vaddq_f32(v1437, v828);
          float32x4_t v1038 = vmulq_f32(v1034, v1034);
          int32x4_t v1039 = (int32x4_t)vmulq_f32(v1035, v1035);
          float32x4_t v1040 = vmulq_f32(v1036, v1036);
          v1041.i64[0] = vzip1q_s32((int32x4_t)v1038, v1039).u64[0];
          v1041.i32[2] = v1040.i32[0];
          float32x4_t v1042 = vmulq_f32(v1037, v1037);
          v1041.i32[3] = v1042.i32[0];
          v1043.i64[0] = vtrn2q_s32((int32x4_t)v1038, v1039).u64[0];
          v1043.i64[1] = __PAIR64__(v1042.u32[1], v1040.u32[1]);
          v1038.i64[0] = vzip2q_s32((int32x4_t)v1038, v1039).u64[0];
          v1038.i64[1] = __PAIR64__(v1042.u32[2], v1040.u32[2]);
          __asm { FMOV            V17.4S, #1.0 }
          float32x4_t v1045 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v1038, vaddq_f32(v1041, v1043))));
          float32x4_t v867 = vmulq_n_f32(v1034, v1045.f32[0]);
          float32x4_t v868 = vmulq_lane_f32(v1035, *(float32x2_t *)v1045.f32, 1);
          float32x4_t v869 = vmulq_laneq_f32(v1036, v1045, 2);
          float32x4_t v870 = vmulq_laneq_f32(v1037, v1045, 3);
        }
        else
        {
          float32x4_t v867 = *(float32x4_t *)(v4 + 13472);
          float32x4_t v868 = v867;
          float32x4_t v869 = v867;
          float32x4_t v870 = v867;
        }
        float32x4_t v1046 = vmulq_f32(v748, v867);
        int32x4_t v1047 = (int32x4_t)vmulq_f32(v749, v868);
        float32x4_t v1048 = vmulq_f32(v750, v869);
        float32x4_t v1049 = vmulq_f32(v751, v870);
        v1050.i64[0] = vzip1q_s32((int32x4_t)v1046, v1047).u64[0];
        v1050.i64[1] = __PAIR64__(v1049.u32[0], v1048.u32[0]);
        v1051.i64[0] = vtrn2q_s32((int32x4_t)v1046, v1047).u64[0];
        v1051.i64[1] = __PAIR64__(v1049.u32[1], v1048.u32[1]);
        v1046.i64[0] = vzip2q_s32((int32x4_t)v1046, v1047).u64[0];
        v1046.i64[1] = __PAIR64__(v1049.u32[2], v1048.u32[2]);
        float32x4_t v849 = vaddq_f32(v1046, vaddq_f32(v1050, v1051));
      }
      if (v803.f32[0] <= 0.0) {
        float v1052 = 0.0;
      }
      else {
        float v1052 = v849.f32[0];
      }
      if (v803.f32[1] <= 0.0) {
        float v1053 = 0.0;
      }
      else {
        float v1053 = v849.f32[1];
      }
      if (v803.f32[2] <= 0.0) {
        float v1054 = 0.0;
      }
      else {
        float v1054 = v849.f32[2];
      }
      if (v803.f32[3] <= 0.0) {
        float v1055 = 0.0;
      }
      else {
        float v1055 = v849.f32[3];
      }
      if (v1052 <= 0.0 && v1053 <= 0.0 && v1054 <= 0.0 && v1055 <= 0.0)
      {
        float32x4_t v1057 = v1415;
        float32x4_t v1056 = v1424;
        if (!v1446) {
          goto LABEL_543;
        }
        goto LABEL_542;
      }
      float32x4_t v1441 = v753;
      float32x4_t v1496 = v28;
      float32x4_t v1512 = v27;
      float32x4_t v1528 = v26;
      float32x4_t v1544 = v25;
      float32x4_t v1464 = v8;
      float v1117 = fmaxf(v1053, 0.0);
      float v1118 = fmaxf(v1054, 0.0);
      float v1119 = v17[4].f32[0];
      float v1120 = fmaxf(v1055, 0.0);
      float v1121 = v18[4].f32[0];
      float v1122 = v19[4].f32[0];
      float32x4_t v1123 = v19;
      LODWORD(v1388) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(fmaxf(v1052, 0.0), v1547[4].f32[0]));
      LODWORD(v1374) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1117, v1119));
      LODWORD(v1360) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1118, v1121));
      a1 = (*(uint64_t (**)(float, float))(v4 + 560))(v1120, v1122);
      if ((v6 & 0x800) != 0)
      {
        float32x4_t v1159 = *(float32x4_t *)(v4 + 13376);
        float32x4_t v1125 = vmulq_f32(v1159, v11[13]);
        float32x4_t v1126 = vmulq_f32(v1159, v12[13]);
        float32x4_t v1127 = vmulq_f32(v1159, v13[13]);
        float32x4_t v1128 = vmulq_f32(v1159, v14[13]);
      }
      else
      {
        float32x4_t v1125 = v1547[22];
        float32x4_t v1126 = v17[22];
        float32x4_t v1127 = v18[22];
        float32x4_t v1128 = v1123[22];
      }
      float v19 = v1123;
      float32x4_t v753 = v1441;
      float32x4_t v1057 = v1415;
      float32x4_t v1056 = v1424;
      float32x4_t v824 = v1398;
      float32x4_t v823 = v1407;
      float32x4_t v1160 = vmulq_n_f32(v1125, v1388);
      float32x4_t v1161 = vmulq_n_f32(v1126, v1374);
      float32x4_t v1162 = vmulq_n_f32(v1127, v1360);
      float32x4_t v1163 = vmulq_n_f32(v1128, v1124);
      LOWORD(v5) = v1427;
      unint64_t v8 = v1464;
      float32x4_t v26 = v1528;
      float32x4_t v25 = v1544;
      float32x4_t v28 = v1496;
      float32x4_t v27 = v1512;
      float32x4_t v24 = v1479;
      if ((v1427 & 0x10) != 0)
      {
        if (v1446)
        {
          float32x4_t v1160 = vmulq_n_f32(v1160, v1441.f32[0]);
          float32x4_t v1161 = vmulq_lane_f32(v1161, *(float32x2_t *)v1441.f32, 1);
          float32x4_t v1162 = vmulq_laneq_f32(v1162, v1441, 2);
          float32x4_t v1163 = vmulq_laneq_f32(v1163, v1441, 3);
        }
        float32x4_t v1474 = vaddq_f32(v1474, v1161);
        float32x4_t v1477 = vaddq_f32(v1477, v1160);
        float32x4_t v1469 = vaddq_f32(v1469, v1163);
        float32x4_t v1471 = vaddq_f32(v1471, v1162);
        if (!v1446)
        {
LABEL_543:
          float32x4_t v25 = vaddq_f32(v25, v1056);
          float32x4_t v26 = vaddq_f32(v26, v1057);
          float32x4_t v27 = vaddq_f32(v27, v823);
          float32x4_t v28 = vaddq_f32(v28, v824);
          if ((v6 & 0x40) == 0) {
            goto LABEL_544;
          }
          goto LABEL_467;
        }
      }
      else
      {
        float32x4_t v1056 = vaddq_f32(v1424, v1160);
        float32x4_t v1057 = vaddq_f32(v1415, v1161);
        float32x4_t v823 = vaddq_f32(v1407, v1162);
        float32x4_t v824 = vaddq_f32(v1398, v1163);
        if (!v1446) {
          goto LABEL_543;
        }
      }
LABEL_542:
      float32x4_t v1056 = vmulq_n_f32(v1056, v753.f32[0]);
      float32x4_t v1057 = vmulq_lane_f32(v1057, *(float32x2_t *)v753.f32, 1);
      float32x4_t v823 = vmulq_laneq_f32(v823, v753, 2);
      float32x4_t v824 = vmulq_laneq_f32(v824, v753, 3);
      goto LABEL_543;
    }
    if (!v1554) {
      goto LABEL_466;
    }
    if (v1446)
    {
      float32x4_t v787 = vmulq_n_f32(v787, v753.f32[0]);
      float32x4_t v788 = vmulq_lane_f32(v788, *(float32x2_t *)v753.f32, 1);
      float32x4_t v789 = vmulq_laneq_f32(v789, v753, 2);
      float32x4_t v790 = vmulq_laneq_f32(v790, v753, 3);
    }
    float32x4_t v25 = vaddq_f32(v25, v787);
    float32x4_t v26 = vaddq_f32(v26, v788);
    float32x4_t v27 = vaddq_f32(v27, v789);
    float32x4_t v28 = vaddq_f32(v28, v790);
    if ((v6 & 0x40) == 0) {
      goto LABEL_544;
    }
LABEL_467:
    float32x4_t v903 = v11[7];
    float32x4_t v904 = v12[7];
    float32x4_t v905 = v13[7];
    float32x4_t v906 = v14[7];
    if ((v5 & 2) != 0)
    {
      float32x4_t v903 = vnegq_f32(v903);
      float32x4_t v904 = vnegq_f32(v904);
      float32x4_t v905 = vnegq_f32(v905);
      float32x4_t v906 = vnegq_f32(v906);
    }
    float32x4_t v907 = *(float32x4_t *)(v4 + 13600);
    float32x4_t v908 = 0uLL;
    if ((v5 & 0x4000) != 0)
    {
      float32x4_t v929 = vsubq_f32(v907, v1552);
      float32x4_t v930 = vsubq_f32(v907, v1548);
      float32x4_t v931 = vsubq_f32(v907, v1550);
      float32x4_t v932 = vsubq_f32(v907, v24);
      float32x4_t v933 = vmulq_f32(v929, v929);
      int32x4_t v934 = (int32x4_t)vmulq_f32(v930, v930);
      float32x4_t v935 = vmulq_f32(v931, v931);
      v936.i64[0] = vzip1q_s32((int32x4_t)v933, v934).u64[0];
      v936.i32[2] = v935.i32[0];
      float32x4_t v937 = vmulq_f32(v932, v932);
      v936.i32[3] = v937.i32[0];
      v938.i64[0] = vtrn2q_s32((int32x4_t)v933, v934).u64[0];
      v938.i64[1] = __PAIR64__(v937.u32[1], v935.u32[1]);
      v933.i64[0] = vzip2q_s32((int32x4_t)v933, v934).u64[0];
      v933.i64[1] = __PAIR64__(v937.u32[2], v935.u32[2]);
      float32x4_t v939 = vsqrtq_f32(vaddq_f32(v933, vaddq_f32(v936, v938)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v941 = vdivq_f32(_Q0, v939);
      float32x4_t v907 = vmulq_n_f32(v929, v941.f32[0]);
      float32x4_t v909 = vmulq_lane_f32(v930, *(float32x2_t *)v941.f32, 1);
      float32x4_t v910 = vmulq_laneq_f32(v931, v941, 2);
      float32x4_t v911 = vmulq_laneq_f32(v932, v941, 3);
      if ((v6 & 0x40000000) != 0)
      {
        float32x4_t v946 = vdivq_f32(_Q0, v941);
        float32x4_t v947 = v1302;
        float32x4_t v948 = vld1q_dup_f32(v947);
        float32x4_t v949 = v1301;
        float32x4_t v950 = vld1q_dup_f32(v949);
        float32x4_t v908 = vdivq_f32(_Q0, vmlaq_f32(v948, vmlaq_n_f32(v950, v946, *(float *)(v4 + 13592)), v946));
        if ((v6 & 0x400000) == 0)
        {
LABEL_476:
          if (!v1445) {
            goto LABEL_481;
          }
          goto LABEL_477;
        }
      }
      else if ((v6 & 0x400000) == 0)
      {
        goto LABEL_476;
      }
    }
    else
    {
      float32x4_t v909 = *(float32x4_t *)(v4 + 13600);
      float32x4_t v910 = v909;
      float32x4_t v911 = v909;
      if ((v6 & 0x400000) == 0) {
        goto LABEL_476;
      }
    }
    float32x4_t v912 = vnegq_f32(*(float32x4_t *)(v4 + 13616));
    float32x4_t v913 = vmulq_f32(v907, v912);
    int32x4_t v914 = (int32x4_t)vmulq_f32(v909, v912);
    float32x4_t v915 = vmulq_f32(v910, v912);
    float32x4_t v916 = vmulq_f32(v911, v912);
    v917.i64[0] = vzip1q_s32((int32x4_t)v913, v914).u64[0];
    v917.i64[1] = __PAIR64__(v916.u32[0], v915.u32[0]);
    v918.i64[0] = vtrn2q_s32((int32x4_t)v913, v914).u64[0];
    v918.i64[1] = __PAIR64__(v916.u32[1], v915.u32[1]);
    v913.i64[0] = vzip2q_s32((int32x4_t)v913, v914).u64[0];
    v913.i64[1] = __PAIR64__(v916.u32[2], v915.u32[2]);
    float32x4_t v919 = vaddq_f32(v913, vaddq_f32(v917, v918));
    float32x4_t v920 = v1310;
    float32x4_t v921 = vld1q_dup_f32(v920);
    int32x4_t v922 = vcgeq_f32(v919, v921);
    int32x4_t v923 = (int32x4_t)vmvnq_s8((int8x16_t)v922);
    *(int16x4_t *)v923.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v923), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v923.i8))
    {
      float32x4_t v908 = 0uLL;
      if (!v1445) {
        goto LABEL_481;
      }
    }
    else
    {
      v923.i32[0] = 0;
      int8x16_t v1346 = (int8x16_t)v922;
      v922.i32[0] = v6 & 0x40000000;
      int8x16_t v924 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v922, v923), 0);
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1338 = (float32x4_t)vbslq_s8(v924, _Q1, (int8x16_t)v908);
      float v926 = *(float *)(v4 + 13596);
      float32x4_t v1525 = v26;
      float32x4_t v1541 = v25;
      float32x4_t v1493 = v28;
      float32x4_t v1509 = v27;
      float32x4_t v1371 = v910;
      float32x4_t v1385 = v907;
      float32x4_t v1438 = v911;
      float32x4_t v1357 = v909;
      float32x4_t v1461 = v919;
      unsigned int v1331 = COERCE_UNSIGNED_INT64((*(double (**)(void))(v4 + 560))());
      unsigned int v1324 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1461.f32[1], v926));
      unsigned int v1317 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1461.f32[2], v926));
      *(float *)&unsigned int v927 = (*(float (**)(float, float))(v4 + 560))(v1461.f32[3], v926);
      float32x4_t v909 = v1357;
      float32x4_t v910 = v1371;
      float32x4_t v911 = v1438;
      float32x4_t v907 = v1385;
      float32x4_t v24 = v1479;
      float32x4_t v28 = v1493;
      float32x4_t v27 = v1509;
      float32x4_t v26 = v1525;
      float32x4_t v25 = v1541;
      float v19 = v1481;
      v928.i64[0] = __PAIR64__(v1324, v1331);
      v928.i64[1] = __PAIR64__(v927, v1317);
      float32x4_t v908 = vmulq_f32(v1338, (float32x4_t)vandq_s8(v928, v1346));
      if (!v1445) {
        goto LABEL_481;
      }
    }
LABEL_477:
    if (v908.f32[0] <= 0.0 && v908.f32[1] <= 0.0 && v908.f32[2] <= 0.0 && v908.f32[3] <= 0.0) {
      goto LABEL_544;
    }
LABEL_481:
    if (v1554)
    {
      if ((v6 & 0x200) != 0)
      {
        float32x4_t v951 = *(float32x4_t *)(v4 + 13504);
        float32x4_t v942 = vmulq_f32(v951, v11[13]);
        float32x4_t v943 = vmulq_f32(v951, v12[13]);
        float32x4_t v944 = vmulq_f32(v951, v13[13]);
        float32x4_t v945 = vmulq_f32(v951, v14[13]);
      }
      else
      {
        float32x4_t v942 = v1547[23];
        float32x4_t v943 = v17[23];
        float32x4_t v944 = v18[23];
        float32x4_t v945 = v19[23];
      }
    }
    else
    {
      float32x4_t v945 = 0uLL;
      float32x4_t v944 = 0uLL;
      float32x4_t v943 = 0uLL;
      float32x4_t v942 = 0uLL;
    }
    float32x4_t v952 = vmulq_f32(v903, v907);
    int32x4_t v953 = (int32x4_t)vmulq_f32(v904, v909);
    float32x4_t v954 = vmulq_f32(v905, v910);
    float32x4_t v955 = vmulq_f32(v906, v911);
    v956.i64[0] = vzip1q_s32((int32x4_t)v952, v953).u64[0];
    v956.i64[1] = __PAIR64__(v955.u32[0], v954.u32[0]);
    v957.i64[0] = vtrn2q_s32((int32x4_t)v952, v953).u64[0];
    v957.i64[1] = __PAIR64__(v955.u32[1], v954.u32[1]);
    v952.i64[0] = vzip2q_s32((int32x4_t)v952, v953).u64[0];
    v952.i64[1] = __PAIR64__(v955.u32[2], v954.u32[2]);
    float32x4_t v958 = vaddq_f32(v952, vaddq_f32(v956, v957));
    if (v958.f32[0] <= 0.0 && v958.f32[1] <= 0.0 && v958.f32[2] <= 0.0 && v958.f32[3] <= 0.0)
    {
      if (v1554)
      {
        if (v1445)
        {
          float32x4_t v942 = vmulq_n_f32(v942, v908.f32[0]);
          float32x4_t v943 = vmulq_lane_f32(v943, *(float32x2_t *)v908.f32, 1);
          float32x4_t v944 = vmulq_laneq_f32(v944, v908, 2);
          float32x4_t v945 = vmulq_laneq_f32(v945, v908, 3);
        }
        float32x4_t v25 = vaddq_f32(v25, v942);
        float32x4_t v26 = vaddq_f32(v26, v943);
        float32x4_t v27 = vaddq_f32(v27, v944);
        float32x4_t v28 = vaddq_f32(v28, v945);
      }
LABEL_544:
      if ((v6 & 0x80) == 0) {
        goto LABEL_655;
      }
      goto LABEL_545;
    }
    float32x4_t v1439 = v911;
    if ((v6 & 0x400) != 0)
    {
      float32x4_t v975 = *(float32x4_t *)(v4 + 13520);
      float32x4_t v959 = vmulq_f32(v975, v11[13]);
      float32x4_t v960 = vmulq_f32(v975, v12[13]);
      float32x4_t v961 = vmulq_f32(v975, v13[13]);
      float32x4_t v962 = vmulq_f32(v975, v14[13]);
    }
    else
    {
      float32x4_t v959 = v1547[24];
      float32x4_t v960 = v17[24];
      float32x4_t v961 = v18[24];
      float32x4_t v962 = v19[24];
    }
    float32x4_t v976 = vmulq_n_f32(v959, fmaxf(v958.f32[0], 0.0));
    float32x4_t v977 = vmulq_n_f32(v960, fmaxf(v958.f32[1], 0.0));
    float32x4_t v978 = vmulq_n_f32(v961, fmaxf(v958.f32[2], 0.0));
    float32x4_t v979 = vmulq_n_f32(v962, fmaxf(v958.f32[3], 0.0));
    if (v1554)
    {
      float32x4_t v976 = vaddq_f32(v942, v976);
      float32x4_t v977 = vaddq_f32(v943, v977);
      float32x4_t v978 = vaddq_f32(v944, v978);
      float32x4_t v979 = vaddq_f32(v945, v979);
    }
    float32x4_t v1416 = v977;
    float32x4_t v1425 = v976;
    float32x4_t v1399 = v979;
    float32x4_t v1408 = v978;
    if ((v5 & 0x20) != 0)
    {
      float32x4_t v984 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v903, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v903, 0xCuLL)));
      int32x4_t v985 = (int32x4_t)vmlsq_f32(vmulq_f32(v984, v907), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v907, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v907, 0xCuLL))), v903);
      int32x4_t v986 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v985, 0xCuLL);
      float32x4_t v987 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v904, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v904, 0xCuLL)));
      float32x4_t v988 = vmlsq_f32(vmulq_f32(v987, v909), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v909, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v909, 0xCuLL))), v904);
      int32x4_t v989 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v988, 0xCuLL);
      float32x4_t v990 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v905, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v905, 0xCuLL)));
      int32x4_t v991 = (int32x4_t)vmlsq_f32(vmulq_f32(v990, v910), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v910, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v910, 0xCuLL))), v905);
      int32x4_t v992 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v991, 0xCuLL);
      float32x4_t v993 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v906, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v906, 0xCuLL)));
      int32x4_t v994 = (int32x4_t)vmlsq_f32(vmulq_f32(v993, v1439), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1439, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1439, 0xCuLL))), v906);
      int32x4_t v995 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v994, 0xCuLL);
      int32x4_t v996 = (int32x4_t)vmlsq_f32(vmulq_f32(v984, (float32x4_t)vrev64q_s32(vuzp1q_s32(v985, v986))), (float32x4_t)vextq_s8((int8x16_t)v986, (int8x16_t)vrev64q_s32(v986), 8uLL), v903);
      int32x4_t v997 = (int32x4_t)vmlsq_f32(vmulq_f32(v987, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v988, v989))), (float32x4_t)vextq_s8((int8x16_t)v989, (int8x16_t)vrev64q_s32(v989), 8uLL), v904);
      int32x4_t v998 = (int32x4_t)vmlsq_f32(vmulq_f32(v990, (float32x4_t)vrev64q_s32(vuzp1q_s32(v991, v992))), (float32x4_t)vextq_s8((int8x16_t)v992, (int8x16_t)vrev64q_s32(v992), 8uLL), v905);
      int32x4_t v999 = (int32x4_t)vmlsq_f32(vmulq_f32(v993, (float32x4_t)vrev64q_s32(vuzp1q_s32(v994, v995))), (float32x4_t)vextq_s8((int8x16_t)v995, (int8x16_t)vrev64q_s32(v995), 8uLL), v906);
      v988.i64[0] = 0x4000000040000000;
      v988.i64[1] = 0x4000000040000000;
      float32x4_t v1000 = vmlaq_f32(v907, v988, (float32x4_t)vrev64q_s32(vuzp1q_s32(v996, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v996, 0xCuLL))));
      float32x4_t v1001 = vmlaq_f32(v909, v988, (float32x4_t)vrev64q_s32(vuzp1q_s32(v997, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v997, 0xCuLL))));
      float32x4_t v1002 = vmlaq_f32(v910, v988, (float32x4_t)vrev64q_s32(vuzp1q_s32(v998, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v998, 0xCuLL))));
      float32x4_t v1003 = vmlaq_f32(v1439, v988, (float32x4_t)vrev64q_s32(vuzp1q_s32(v999, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v999, 0xCuLL))));
      if ((v5 & 8) != 0)
      {
        float32x4_t v1010 = vmulq_f32(v1552, v1552);
        int32x4_t v1011 = (int32x4_t)vmulq_f32(v1548, v1548);
        float32x4_t v1012 = vmulq_f32(v1550, v1550);
        float32x4_t v1013 = vmulq_f32(v24, v24);
        v1014.i64[0] = vzip1q_s32((int32x4_t)v1010, v1011).u64[0];
        v1014.i64[1] = __PAIR64__(v1013.u32[0], v1012.u32[0]);
        v1015.i64[0] = vtrn2q_s32((int32x4_t)v1010, v1011).u64[0];
        v1015.i64[1] = __PAIR64__(v1013.u32[1], v1012.u32[1]);
        v1010.i64[0] = vzip2q_s32((int32x4_t)v1010, v1011).u64[0];
        v1010.i64[1] = __PAIR64__(v1013.u32[2], v1012.u32[2]);
        __asm { FMOV            V7.4S, #1.0 }
        float32x4_t v1017 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v1010, vaddq_f32(v1014, v1015))));
        float32x4_t v1018 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1552), v1017.f32[0]), v1000);
        int32x4_t v1019 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v1017.f32, 1), v1001);
        float32x4_t v1020 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1550), v1017, 2), v1002);
        float32x4_t v1021 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v24), v1017, 3), v1003);
        v1012.i64[0] = vzip1q_s32((int32x4_t)v1018, v1019).u64[0];
        v1012.i64[1] = __PAIR64__(v1021.u32[0], v1020.u32[0]);
        v1013.i64[0] = vtrn2q_s32((int32x4_t)v1018, v1019).u64[0];
        v1013.i64[1] = __PAIR64__(v1021.u32[1], v1020.u32[1]);
        v1018.i64[0] = vzip2q_s32((int32x4_t)v1018, v1019).u64[0];
        v1018.i64[1] = __PAIR64__(v1021.u32[2], v1020.u32[2]);
        float32x4_t v1004 = vaddq_f32(v1018, vaddq_f32(v1012, v1013));
      }
      else
      {
        v1004.i64[0] = vzip2q_s32((int32x4_t)v1000, (int32x4_t)v1001).u64[0];
        v1004.i64[1] = __PAIR64__(v1003.u32[2], v1002.u32[2]);
      }
      float32x4_t v979 = v1399;
      float32x4_t v978 = v1408;
      float v9 = 1.0;
    }
    else
    {
      if (v1280)
      {
        if ((v5 & 8) != 0)
        {
          float32x4_t v1180 = vmulq_f32(v1552, v1552);
          int32x4_t v1181 = (int32x4_t)vmulq_f32(v1548, v1548);
          float32x4_t v1182 = vmulq_f32(v1550, v1550);
          v1183.i64[0] = vzip1q_s32((int32x4_t)v1180, v1181).u64[0];
          v1183.i32[2] = v1182.i32[0];
          float32x4_t v1184 = vmulq_f32(v24, v24);
          v1183.i32[3] = v1184.i32[0];
          v1185.i64[0] = vtrn2q_s32((int32x4_t)v1180, v1181).u64[0];
          v1185.i64[1] = __PAIR64__(v1184.u32[1], v1182.u32[1]);
          v1180.i64[0] = vzip2q_s32((int32x4_t)v1180, v1181).u64[0];
          v1180.i64[1] = __PAIR64__(v1184.u32[2], v1182.u32[2]);
          __asm { FMOV            V16.4S, #1.0 }
          float32x4_t v1187 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v1180, vaddq_f32(v1183, v1185))));
          float32x4_t v980 = vmulq_n_f32(vnegq_f32(v1552), v1187.f32[0]);
          float32x4_t v981 = vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v1187.f32, 1);
          float32x4_t v982 = vmulq_laneq_f32(vnegq_f32(v1550), v1187, 2);
          float32x4_t v983 = vmulq_laneq_f32(vnegq_f32(v24), v1187, 3);
        }
        else
        {
          float32x4_t v980 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v981 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v982 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v983 = (float32x4_t)xmmword_227DC2100;
        }
        float32x4_t v1188 = vaddq_f32(v907, v980);
        float32x4_t v1189 = vaddq_f32(v909, v981);
        float32x4_t v1190 = vaddq_f32(v910, v982);
        float32x4_t v1191 = vaddq_f32(v1439, v983);
        float32x4_t v1192 = vmulq_f32(v1188, v1188);
        int32x4_t v1193 = (int32x4_t)vmulq_f32(v1189, v1189);
        float32x4_t v1194 = vmulq_f32(v1190, v1190);
        v1195.i64[0] = vzip1q_s32((int32x4_t)v1192, v1193).u64[0];
        v1195.i32[2] = v1194.i32[0];
        float32x4_t v1196 = vmulq_f32(v1191, v1191);
        v1195.i32[3] = v1196.i32[0];
        v1197.i64[0] = vtrn2q_s32((int32x4_t)v1192, v1193).u64[0];
        v1197.i64[1] = __PAIR64__(v1196.u32[1], v1194.u32[1]);
        v1192.i64[0] = vzip2q_s32((int32x4_t)v1192, v1193).u64[0];
        v1192.i64[1] = __PAIR64__(v1196.u32[2], v1194.u32[2]);
        __asm { FMOV            V17.4S, #1.0 }
        float32x4_t v1199 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v1192, vaddq_f32(v1195, v1197))));
        float32x4_t v1022 = vmulq_n_f32(v1188, v1199.f32[0]);
        float32x4_t v1023 = vmulq_lane_f32(v1189, *(float32x2_t *)v1199.f32, 1);
        float32x4_t v1024 = vmulq_laneq_f32(v1190, v1199, 2);
        float32x4_t v1025 = vmulq_laneq_f32(v1191, v1199, 3);
      }
      else
      {
        float32x4_t v1022 = *(float32x4_t *)(v4 + 13632);
        float32x4_t v1023 = v1022;
        float32x4_t v1024 = v1022;
        float32x4_t v1025 = v1022;
      }
      float32x4_t v1200 = vmulq_f32(v903, v1022);
      int32x4_t v1201 = (int32x4_t)vmulq_f32(v904, v1023);
      float32x4_t v1202 = vmulq_f32(v905, v1024);
      float32x4_t v1203 = vmulq_f32(v906, v1025);
      v1204.i64[0] = vzip1q_s32((int32x4_t)v1200, v1201).u64[0];
      v1204.i64[1] = __PAIR64__(v1203.u32[0], v1202.u32[0]);
      v1205.i64[0] = vtrn2q_s32((int32x4_t)v1200, v1201).u64[0];
      v1205.i64[1] = __PAIR64__(v1203.u32[1], v1202.u32[1]);
      v1200.i64[0] = vzip2q_s32((int32x4_t)v1200, v1201).u64[0];
      v1200.i64[1] = __PAIR64__(v1203.u32[2], v1202.u32[2]);
      float32x4_t v1004 = vaddq_f32(v1200, vaddq_f32(v1204, v1205));
    }
    if (v958.f32[0] <= 0.0) {
      float v1206 = 0.0;
    }
    else {
      float v1206 = v1004.f32[0];
    }
    if (v958.f32[1] <= 0.0) {
      float v1207 = 0.0;
    }
    else {
      float v1207 = v1004.f32[1];
    }
    if (v958.f32[2] <= 0.0) {
      float v1208 = 0.0;
    }
    else {
      float v1208 = v1004.f32[2];
    }
    if (v958.f32[3] <= 0.0) {
      float v1209 = 0.0;
    }
    else {
      float v1209 = v1004.f32[3];
    }
    if (v1206 <= 0.0 && v1207 <= 0.0 && v1208 <= 0.0 && v1209 <= 0.0)
    {
      float32x4_t v1211 = v1416;
      float32x4_t v1210 = v1425;
      if (!v1445) {
        goto LABEL_621;
      }
LABEL_620:
      float32x4_t v1210 = vmulq_n_f32(v1210, v908.f32[0]);
      float32x4_t v1211 = vmulq_lane_f32(v1211, *(float32x2_t *)v908.f32, 1);
      float32x4_t v978 = vmulq_laneq_f32(v978, v908, 2);
      float32x4_t v979 = vmulq_laneq_f32(v979, v908, 3);
      goto LABEL_621;
    }
    float32x4_t v1443 = v908;
    float32x4_t v1497 = v28;
    float32x4_t v1513 = v27;
    float32x4_t v1529 = v26;
    float32x4_t v1545 = v25;
    float32x4_t v1465 = v8;
    float v1212 = fmaxf(v1207, 0.0);
    float v1213 = fmaxf(v1208, 0.0);
    float v1214 = v17[4].f32[0];
    float v1215 = fmaxf(v1209, 0.0);
    float v1216 = v18[4].f32[0];
    float v1217 = v19[4].f32[0];
    float32x4_t v1218 = v19;
    LODWORD(v1389) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(fmaxf(v1206, 0.0), v1547[4].f32[0]));
    LODWORD(v1375) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1212, v1214));
    LODWORD(v1361) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1213, v1216));
    a1 = (*(uint64_t (**)(float, float))(v4 + 560))(v1215, v1217);
    if ((v6 & 0x800) != 0)
    {
      float32x4_t v1224 = *(float32x4_t *)(v4 + 13536);
      float32x4_t v1220 = vmulq_f32(v1224, v11[13]);
      float32x4_t v1221 = vmulq_f32(v1224, v12[13]);
      float32x4_t v1222 = vmulq_f32(v1224, v13[13]);
      float32x4_t v1223 = vmulq_f32(v1224, v14[13]);
    }
    else
    {
      float32x4_t v1220 = v1547[25];
      float32x4_t v1221 = v17[25];
      float32x4_t v1222 = v18[25];
      float32x4_t v1223 = v1218[25];
    }
    float v19 = v1218;
    float32x4_t v908 = v1443;
    float32x4_t v1211 = v1416;
    float32x4_t v1210 = v1425;
    float32x4_t v979 = v1399;
    float32x4_t v978 = v1408;
    float32x4_t v1225 = vmulq_n_f32(v1220, v1389);
    float32x4_t v1226 = vmulq_n_f32(v1221, v1375);
    float32x4_t v1227 = vmulq_n_f32(v1222, v1361);
    float32x4_t v1228 = vmulq_n_f32(v1223, v1219);
    LOWORD(v5) = v1427;
    unint64_t v8 = v1465;
    float32x4_t v26 = v1529;
    float32x4_t v25 = v1545;
    float32x4_t v28 = v1497;
    float32x4_t v27 = v1513;
    float32x4_t v24 = v1479;
    if ((v1427 & 0x10) != 0)
    {
      if (v1445)
      {
        float32x4_t v1225 = vmulq_n_f32(v1225, v1443.f32[0]);
        float32x4_t v1226 = vmulq_lane_f32(v1226, *(float32x2_t *)v1443.f32, 1);
        float32x4_t v1227 = vmulq_laneq_f32(v1227, v1443, 2);
        float32x4_t v1228 = vmulq_laneq_f32(v1228, v1443, 3);
      }
      float32x4_t v1474 = vaddq_f32(v1474, v1226);
      float32x4_t v1477 = vaddq_f32(v1477, v1225);
      float32x4_t v1469 = vaddq_f32(v1469, v1228);
      float32x4_t v1471 = vaddq_f32(v1471, v1227);
      if (v1445) {
        goto LABEL_620;
      }
    }
    else
    {
      float32x4_t v1210 = vaddq_f32(v1425, v1225);
      float32x4_t v1211 = vaddq_f32(v1416, v1226);
      float32x4_t v978 = vaddq_f32(v1408, v1227);
      float32x4_t v979 = vaddq_f32(v1399, v1228);
      if (v1445) {
        goto LABEL_620;
      }
    }
LABEL_621:
    float32x4_t v25 = vaddq_f32(v25, v1210);
    float32x4_t v26 = vaddq_f32(v26, v1211);
    float32x4_t v27 = vaddq_f32(v27, v978);
    float32x4_t v28 = vaddq_f32(v28, v979);
    if ((v6 & 0x80) == 0) {
      goto LABEL_655;
    }
LABEL_545:
    float32x4_t v1058 = v11[7];
    float32x4_t v1059 = v12[7];
    float32x4_t v1060 = v13[7];
    float32x4_t v1061 = v14[7];
    if ((v5 & 2) != 0)
    {
      float32x4_t v1058 = vnegq_f32(v1058);
      float32x4_t v1059 = vnegq_f32(v1059);
      float32x4_t v1060 = vnegq_f32(v1060);
      float32x4_t v1061 = vnegq_f32(v1061);
    }
    float32x4_t v1062 = *(float32x4_t *)(v4 + 13760);
    float32x4_t v1063 = 0uLL;
    if ((v5 & 0x8000) != 0)
    {
      float32x4_t v1083 = vsubq_f32(v1062, v1552);
      float32x4_t v1084 = vsubq_f32(v1062, v1548);
      float32x4_t v1085 = vsubq_f32(v1062, v1550);
      float32x4_t v1086 = vsubq_f32(v1062, v24);
      float32x4_t v1087 = vmulq_f32(v1083, v1083);
      int32x4_t v1088 = (int32x4_t)vmulq_f32(v1084, v1084);
      float32x4_t v1089 = vmulq_f32(v1085, v1085);
      v1090.i64[0] = vzip1q_s32((int32x4_t)v1087, v1088).u64[0];
      v1090.i32[2] = v1089.i32[0];
      float32x4_t v1091 = vmulq_f32(v1086, v1086);
      v1090.i32[3] = v1091.i32[0];
      v1092.i64[0] = vtrn2q_s32((int32x4_t)v1087, v1088).u64[0];
      v1092.i64[1] = __PAIR64__(v1091.u32[1], v1089.u32[1]);
      v1087.i64[0] = vzip2q_s32((int32x4_t)v1087, v1088).u64[0];
      v1087.i64[1] = __PAIR64__(v1091.u32[2], v1089.u32[2]);
      float32x4_t v1093 = vsqrtq_f32(vaddq_f32(v1087, vaddq_f32(v1090, v1092)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v1095 = vdivq_f32(_Q0, v1093);
      float32x4_t v1062 = vmulq_n_f32(v1083, v1095.f32[0]);
      float32x4_t v1064 = vmulq_lane_f32(v1084, *(float32x2_t *)v1095.f32, 1);
      float32x4_t v1065 = vmulq_laneq_f32(v1085, v1095, 2);
      float32x4_t v1066 = vmulq_laneq_f32(v1086, v1095, 3);
      if ((v6 & 0x80000000) != 0)
      {
        float32x4_t v1100 = vdivq_f32(_Q0, v1095);
        int8x16_t v1101 = v1288;
        float32x4_t v1102 = vld1q_dup_f32(v1101);
        float32x4_t v1103 = v1287;
        float32x4_t v1104 = vld1q_dup_f32(v1103);
        float32x4_t v1063 = vdivq_f32(_Q0, vmlaq_f32(v1102, vmlaq_n_f32(v1104, v1100, *(float *)(v4 + 13752)), v1100));
        if ((v6 & 0x800000) == 0)
        {
LABEL_554:
          if (!v1444) {
            goto LABEL_559;
          }
          goto LABEL_555;
        }
      }
      else if ((v6 & 0x800000) == 0)
      {
        goto LABEL_554;
      }
    }
    else
    {
      float32x4_t v1064 = *(float32x4_t *)(v4 + 13760);
      float32x4_t v1065 = v1064;
      float32x4_t v1066 = v1064;
      if ((v6 & 0x800000) == 0) {
        goto LABEL_554;
      }
    }
    float32x4_t v1067 = vnegq_f32(*(float32x4_t *)(v4 + 13776));
    float32x4_t v1068 = vmulq_f32(v1062, v1067);
    int32x4_t v1069 = (int32x4_t)vmulq_f32(v1064, v1067);
    float32x4_t v1070 = vmulq_f32(v1065, v1067);
    float32x4_t v1071 = vmulq_f32(v1066, v1067);
    v1072.i64[0] = vzip1q_s32((int32x4_t)v1068, v1069).u64[0];
    v1072.i64[1] = __PAIR64__(v1071.u32[0], v1070.u32[0]);
    v1073.i64[0] = vtrn2q_s32((int32x4_t)v1068, v1069).u64[0];
    v1073.i64[1] = __PAIR64__(v1071.u32[1], v1070.u32[1]);
    v1068.i64[0] = vzip2q_s32((int32x4_t)v1068, v1069).u64[0];
    v1068.i64[1] = __PAIR64__(v1071.u32[2], v1070.u32[2]);
    float32x4_t v1074 = vaddq_f32(v1068, vaddq_f32(v1072, v1073));
    v1075 = v1311;
    float32x4_t v1076 = vld1q_dup_f32(v1075);
    int8x16_t v1077 = (int8x16_t)vcgeq_f32(v1074, v1076);
    int32x4_t v1078 = (int32x4_t)vmvnq_s8(v1077);
    *(int16x4_t *)v1078.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v1078), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v1078.i8))
    {
      float32x4_t v1063 = 0uLL;
      if (!v1444) {
        goto LABEL_559;
      }
    }
    else
    {
      v1078.i32[0] = 0;
      int8x16_t v1347 = v1077;
      float32x4_t v1359 = v1064;
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1339 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v1078, v1303), 0), (int8x16_t)v1063, _Q1);
      float v1080 = *(float *)(v4 + 13756);
      float32x4_t v1527 = v26;
      float32x4_t v1543 = v25;
      float32x4_t v1495 = v28;
      float32x4_t v1511 = v27;
      float32x4_t v1400 = v1062;
      float32x4_t v1373 = v1065;
      float32x4_t v1387 = v1066;
      float32x4_t v1463 = v1074;
      unsigned int v1332 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1074.f32[0], v1080));
      unsigned int v1325 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1463.f32[1], v1080));
      unsigned int v1318 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1463.f32[2], v1080));
      *(float *)&unsigned int v1081 = (*(float (**)(float, float))(v4 + 560))(v1463.f32[3], v1080);
      float32x4_t v1064 = v1359;
      float32x4_t v1065 = v1373;
      float32x4_t v1066 = v1387;
      float32x4_t v1062 = v1400;
      float32x4_t v24 = v1479;
      float32x4_t v28 = v1495;
      float32x4_t v27 = v1511;
      float32x4_t v26 = v1527;
      float32x4_t v25 = v1543;
      float v19 = v1481;
      v1082.i64[0] = __PAIR64__(v1325, v1332);
      v1082.i64[1] = __PAIR64__(v1081, v1318);
      float32x4_t v1063 = vmulq_f32(v1339, (float32x4_t)vandq_s8(v1082, v1347));
      if (!v1444) {
        goto LABEL_559;
      }
    }
LABEL_555:
    if (v1063.f32[0] <= 0.0 && v1063.f32[1] <= 0.0 && v1063.f32[2] <= 0.0 && v1063.f32[3] <= 0.0) {
      goto LABEL_655;
    }
LABEL_559:
    if (v1554)
    {
      if ((v6 & 0x200) != 0)
      {
        float32x4_t v1105 = *(float32x4_t *)(v4 + 13664);
        float32x4_t v1096 = vmulq_f32(v1105, v11[13]);
        float32x4_t v1097 = vmulq_f32(v1105, v12[13]);
        float32x4_t v1098 = vmulq_f32(v1105, v13[13]);
        float32x4_t v1099 = vmulq_f32(v1105, v14[13]);
      }
      else
      {
        float32x4_t v1096 = v1547[26];
        float32x4_t v1097 = v17[26];
        float32x4_t v1098 = v18[26];
        float32x4_t v1099 = v19[26];
      }
    }
    else
    {
      float32x4_t v1099 = 0uLL;
      float32x4_t v1098 = 0uLL;
      float32x4_t v1097 = 0uLL;
      float32x4_t v1096 = 0uLL;
    }
    float32x4_t v1106 = vmulq_f32(v1058, v1062);
    int32x4_t v1107 = (int32x4_t)vmulq_f32(v1059, v1064);
    float32x4_t v1108 = vmulq_f32(v1060, v1065);
    float32x4_t v1109 = vmulq_f32(v1061, v1066);
    v1110.i64[0] = vzip1q_s32((int32x4_t)v1106, v1107).u64[0];
    v1110.i64[1] = __PAIR64__(v1109.u32[0], v1108.u32[0]);
    v1111.i64[0] = vtrn2q_s32((int32x4_t)v1106, v1107).u64[0];
    v1111.i64[1] = __PAIR64__(v1109.u32[1], v1108.u32[1]);
    v1106.i64[0] = vzip2q_s32((int32x4_t)v1106, v1107).u64[0];
    v1106.i64[1] = __PAIR64__(v1109.u32[2], v1108.u32[2]);
    float32x4_t v1112 = vaddq_f32(v1106, vaddq_f32(v1110, v1111));
    if (v1112.f32[0] > 0.0 || v1112.f32[1] > 0.0 || v1112.f32[2] > 0.0 || v1112.f32[3] > 0.0)
    {
      if ((v6 & 0x400) != 0)
      {
        float32x4_t v1129 = *(float32x4_t *)(v4 + 13680);
        float32x4_t v1113 = vmulq_f32(v1129, v11[13]);
        float32x4_t v1114 = vmulq_f32(v1129, v12[13]);
        float32x4_t v1115 = vmulq_f32(v1129, v13[13]);
        float32x4_t v1116 = vmulq_f32(v1129, v14[13]);
      }
      else
      {
        float32x4_t v1113 = v1547[27];
        float32x4_t v1114 = v17[27];
        float32x4_t v1115 = v18[27];
        float32x4_t v1116 = v19[27];
      }
      float32x4_t v1130 = vmulq_n_f32(v1113, fmaxf(v1112.f32[0], 0.0));
      float32x4_t v1131 = vmulq_n_f32(v1114, fmaxf(v1112.f32[1], 0.0));
      float32x4_t v1132 = vmulq_n_f32(v1115, fmaxf(v1112.f32[2], 0.0));
      float32x4_t v1133 = vmulq_n_f32(v1116, fmaxf(v1112.f32[3], 0.0));
      if (v1554)
      {
        float32x4_t v1130 = vaddq_f32(v1096, v1130);
        float32x4_t v1131 = vaddq_f32(v1097, v1131);
        float32x4_t v1132 = vaddq_f32(v1098, v1132);
        float32x4_t v1133 = vaddq_f32(v1099, v1133);
      }
      float32x4_t v1482 = v1130;
      float32x4_t v1442 = v1131;
      float32x4_t v1417 = v1133;
      float32x4_t v1426 = v1132;
      if ((v5 & 0x20) != 0)
      {
        float32x4_t v1138 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1058, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1058, 0xCuLL)));
        int32x4_t v1139 = (int32x4_t)vmlsq_f32(vmulq_f32(v1138, v1062), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1062, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1062, 0xCuLL))), v1058);
        int32x4_t v1140 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1139, 0xCuLL);
        float32x4_t v1141 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1059, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1059, 0xCuLL)));
        float32x4_t v1142 = vmlsq_f32(vmulq_f32(v1141, v1064), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1064, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1064, 0xCuLL))), v1059);
        int32x4_t v1143 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1142, 0xCuLL);
        float32x4_t v1144 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1060, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1060, 0xCuLL)));
        int32x4_t v1145 = (int32x4_t)vmlsq_f32(vmulq_f32(v1144, v1065), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1065, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1065, 0xCuLL))), v1060);
        int32x4_t v1146 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1145, 0xCuLL);
        float32x4_t v1147 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1061, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1061, 0xCuLL)));
        int32x4_t v1148 = (int32x4_t)vmlsq_f32(vmulq_f32(v1147, v1066), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1066, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1066, 0xCuLL))), v1061);
        int32x4_t v1149 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1148, 0xCuLL);
        int32x4_t v1150 = (int32x4_t)vmlsq_f32(vmulq_f32(v1138, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1139, v1140))), (float32x4_t)vextq_s8((int8x16_t)v1140, (int8x16_t)vrev64q_s32(v1140), 8uLL), v1058);
        int32x4_t v1151 = (int32x4_t)vmlsq_f32(vmulq_f32(v1141, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1142, v1143))), (float32x4_t)vextq_s8((int8x16_t)v1143, (int8x16_t)vrev64q_s32(v1143), 8uLL), v1059);
        int32x4_t v1152 = (int32x4_t)vmlsq_f32(vmulq_f32(v1144, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1145, v1146))), (float32x4_t)vextq_s8((int8x16_t)v1146, (int8x16_t)vrev64q_s32(v1146), 8uLL), v1060);
        int32x4_t v1153 = (int32x4_t)vmlsq_f32(vmulq_f32(v1147, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1148, v1149))), (float32x4_t)vextq_s8((int8x16_t)v1149, (int8x16_t)vrev64q_s32(v1149), 8uLL), v1061);
        v1142.i64[0] = 0x4000000040000000;
        v1142.i64[1] = 0x4000000040000000;
        float32x4_t v1154 = vmlaq_f32(v1062, v1142, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1150, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1150, 0xCuLL))));
        float32x4_t v1155 = vmlaq_f32(v1064, v1142, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1151, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1151, 0xCuLL))));
        float32x4_t v1156 = vmlaq_f32(v1065, v1142, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1152, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1152, 0xCuLL))));
        float32x4_t v1157 = vmlaq_f32(v1066, v1142, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1153, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1153, 0xCuLL))));
        if ((v5 & 8) != 0)
        {
          float32x4_t v1164 = vmulq_f32(v1552, v1552);
          int32x4_t v1165 = (int32x4_t)vmulq_f32(v1548, v1548);
          float32x4_t v1166 = vmulq_f32(v1550, v1550);
          float32x4_t v1167 = vmulq_f32(v24, v24);
          v1168.i64[0] = vzip1q_s32((int32x4_t)v1164, v1165).u64[0];
          v1168.i64[1] = __PAIR64__(v1167.u32[0], v1166.u32[0]);
          v1169.i64[0] = vtrn2q_s32((int32x4_t)v1164, v1165).u64[0];
          v1169.i64[1] = __PAIR64__(v1167.u32[1], v1166.u32[1]);
          v1164.i64[0] = vzip2q_s32((int32x4_t)v1164, v1165).u64[0];
          v1164.i64[1] = __PAIR64__(v1167.u32[2], v1166.u32[2]);
          __asm { FMOV            V7.4S, #1.0 }
          float32x4_t v1171 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v1164, vaddq_f32(v1168, v1169))));
          float32x4_t v1172 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1552), v1171.f32[0]), v1154);
          int32x4_t v1173 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v1171.f32, 1), v1155);
          float32x4_t v1174 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1550), v1171, 2), v1156);
          float32x4_t v1175 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v24), v1171, 3), v1157);
          v1166.i64[0] = vzip1q_s32((int32x4_t)v1172, v1173).u64[0];
          v1166.i64[1] = __PAIR64__(v1175.u32[0], v1174.u32[0]);
          v1167.i64[0] = vtrn2q_s32((int32x4_t)v1172, v1173).u64[0];
          v1167.i64[1] = __PAIR64__(v1175.u32[1], v1174.u32[1]);
          v1172.i64[0] = vzip2q_s32((int32x4_t)v1172, v1173).u64[0];
          v1172.i64[1] = __PAIR64__(v1175.u32[2], v1174.u32[2]);
          float32x4_t v1158 = vaddq_f32(v1172, vaddq_f32(v1166, v1167));
        }
        else
        {
          v1158.i64[0] = vzip2q_s32((int32x4_t)v1154, (int32x4_t)v1155).u64[0];
          v1158.i64[1] = __PAIR64__(v1157.u32[2], v1156.u32[2]);
        }
        float32x4_t v1133 = v1417;
        float32x4_t v1132 = v1426;
        float v9 = 1.0;
      }
      else
      {
        if (v1279)
        {
          if ((v5 & 8) != 0)
          {
            float32x4_t v1229 = vmulq_f32(v1552, v1552);
            int32x4_t v1230 = (int32x4_t)vmulq_f32(v1548, v1548);
            float32x4_t v1231 = vmulq_f32(v1550, v1550);
            v1232.i64[0] = vzip1q_s32((int32x4_t)v1229, v1230).u64[0];
            v1232.i32[2] = v1231.i32[0];
            float32x4_t v1233 = vmulq_f32(v24, v24);
            v1232.i32[3] = v1233.i32[0];
            v1234.i64[0] = vtrn2q_s32((int32x4_t)v1229, v1230).u64[0];
            v1234.i64[1] = __PAIR64__(v1233.u32[1], v1231.u32[1]);
            v1229.i64[0] = vzip2q_s32((int32x4_t)v1229, v1230).u64[0];
            v1229.i64[1] = __PAIR64__(v1233.u32[2], v1231.u32[2]);
            __asm { FMOV            V16.4S, #1.0 }
            float32x4_t v1236 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v1229, vaddq_f32(v1232, v1234))));
            float32x4_t v1134 = vmulq_n_f32(vnegq_f32(v1552), v1236.f32[0]);
            float32x4_t v1135 = vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v1236.f32, 1);
            float32x4_t v1136 = vmulq_laneq_f32(vnegq_f32(v1550), v1236, 2);
            float32x4_t v1137 = vmulq_laneq_f32(vnegq_f32(v24), v1236, 3);
          }
          else
          {
            float32x4_t v1134 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v1135 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v1136 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v1137 = (float32x4_t)xmmword_227DC2100;
          }
          float32x4_t v1237 = vaddq_f32(v1062, v1134);
          float32x4_t v1238 = vaddq_f32(v1064, v1135);
          float32x4_t v1239 = vaddq_f32(v1065, v1136);
          float32x4_t v1240 = vaddq_f32(v1066, v1137);
          float32x4_t v1241 = vmulq_f32(v1237, v1237);
          int32x4_t v1242 = (int32x4_t)vmulq_f32(v1238, v1238);
          float32x4_t v1243 = vmulq_f32(v1239, v1239);
          v1244.i64[0] = vzip1q_s32((int32x4_t)v1241, v1242).u64[0];
          v1244.i32[2] = v1243.i32[0];
          float32x4_t v1245 = vmulq_f32(v1240, v1240);
          v1244.i32[3] = v1245.i32[0];
          v1246.i64[0] = vtrn2q_s32((int32x4_t)v1241, v1242).u64[0];
          v1246.i64[1] = __PAIR64__(v1245.u32[1], v1243.u32[1]);
          v1241.i64[0] = vzip2q_s32((int32x4_t)v1241, v1242).u64[0];
          v1241.i64[1] = __PAIR64__(v1245.u32[2], v1243.u32[2]);
          __asm { FMOV            V17.4S, #1.0 }
          float32x4_t v1248 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v1241, vaddq_f32(v1244, v1246))));
          float32x4_t v1176 = vmulq_n_f32(v1237, v1248.f32[0]);
          float32x4_t v1177 = vmulq_lane_f32(v1238, *(float32x2_t *)v1248.f32, 1);
          float32x4_t v1178 = vmulq_laneq_f32(v1239, v1248, 2);
          float32x4_t v1179 = vmulq_laneq_f32(v1240, v1248, 3);
        }
        else
        {
          float32x4_t v1176 = *(float32x4_t *)(v4 + 13792);
          float32x4_t v1177 = v1176;
          float32x4_t v1178 = v1176;
          float32x4_t v1179 = v1176;
        }
        float32x4_t v1249 = vmulq_f32(v1058, v1176);
        int32x4_t v1250 = (int32x4_t)vmulq_f32(v1059, v1177);
        float32x4_t v1251 = vmulq_f32(v1060, v1178);
        float32x4_t v1252 = vmulq_f32(v1061, v1179);
        v1253.i64[0] = vzip1q_s32((int32x4_t)v1249, v1250).u64[0];
        v1253.i64[1] = __PAIR64__(v1252.u32[0], v1251.u32[0]);
        v1254.i64[0] = vtrn2q_s32((int32x4_t)v1249, v1250).u64[0];
        v1254.i64[1] = __PAIR64__(v1252.u32[1], v1251.u32[1]);
        v1249.i64[0] = vzip2q_s32((int32x4_t)v1249, v1250).u64[0];
        v1249.i64[1] = __PAIR64__(v1252.u32[2], v1251.u32[2]);
        float32x4_t v1158 = vaddq_f32(v1249, vaddq_f32(v1253, v1254));
      }
      if (v1112.f32[0] <= 0.0) {
        float v1255 = 0.0;
      }
      else {
        float v1255 = v1158.f32[0];
      }
      if (v1112.f32[1] <= 0.0) {
        float v1256 = 0.0;
      }
      else {
        float v1256 = v1158.f32[1];
      }
      if (v1112.f32[2] <= 0.0) {
        float v1257 = 0.0;
      }
      else {
        float v1257 = v1158.f32[2];
      }
      if (v1112.f32[3] <= 0.0) {
        float v1258 = 0.0;
      }
      else {
        float v1258 = v1158.f32[3];
      }
      if (v1255 > 0.0 || v1256 > 0.0 || v1257 > 0.0 || v1258 > 0.0)
      {
        float32x4_t v1553 = v1063;
        float32x4_t v1498 = v28;
        float32x4_t v1514 = v27;
        float32x4_t v1530 = v26;
        float32x4_t v1546 = v25;
        float32x4_t v1466 = v8;
        float v1262 = fmaxf(v1256, 0.0);
        float v1263 = fmaxf(v1257, 0.0);
        float v1264 = v17[4].f32[0];
        float v1265 = fmaxf(v1258, 0.0);
        float v1266 = v18[4].f32[0];
        float v1267 = v19[4].f32[0];
        float32x4_t v1268 = v19;
        LODWORD(v1551) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(fmaxf(v1255, 0.0), v1547[4].f32[0]));
        LODWORD(v1549) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1262, v1264));
        LODWORD(v1480) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1263, v1266));
        a1 = (*(uint64_t (**)(float, float))(v4 + 560))(v1265, v1267);
        if ((v6 & 0x800) != 0)
        {
          float32x4_t v1274 = *(float32x4_t *)(v4 + 13696);
          float32x4_t v1270 = vmulq_f32(v1274, v11[13]);
          float32x4_t v1271 = vmulq_f32(v1274, v12[13]);
          float32x4_t v1272 = vmulq_f32(v1274, v13[13]);
          float32x4_t v1273 = vmulq_f32(v1274, v14[13]);
        }
        else
        {
          float32x4_t v1270 = v1547[28];
          float32x4_t v1271 = v17[28];
          float32x4_t v1272 = v18[28];
          float32x4_t v1273 = v1268[28];
        }
        float v19 = v1268;
        float32x4_t v1063 = v1553;
        float32x4_t v1260 = v1442;
        float32x4_t v1133 = v1417;
        float32x4_t v1132 = v1426;
        float32x4_t v1275 = vmulq_n_f32(v1270, v1551);
        float32x4_t v1276 = vmulq_n_f32(v1271, v1549);
        float32x4_t v1259 = v1482;
        float32x4_t v1277 = vmulq_n_f32(v1272, v1480);
        float32x4_t v1278 = vmulq_n_f32(v1273, v1269);
        LOWORD(v5) = v1427;
        unint64_t v8 = v1466;
        float32x4_t v26 = v1530;
        float32x4_t v25 = v1546;
        float32x4_t v28 = v1498;
        float32x4_t v27 = v1514;
        if ((v1427 & 0x10) != 0)
        {
          if (v1444)
          {
            float32x4_t v1275 = vmulq_n_f32(v1275, v1553.f32[0]);
            float32x4_t v1276 = vmulq_lane_f32(v1276, *(float32x2_t *)v1553.f32, 1);
            float32x4_t v1277 = vmulq_laneq_f32(v1277, v1553, 2);
            float32x4_t v1278 = vmulq_laneq_f32(v1278, v1553, 3);
          }
          float32x4_t v1474 = vaddq_f32(v1474, v1276);
          float32x4_t v1477 = vaddq_f32(v1477, v1275);
          float32x4_t v1469 = vaddq_f32(v1469, v1278);
          float32x4_t v1471 = vaddq_f32(v1471, v1277);
          if (!v1444) {
            goto LABEL_654;
          }
        }
        else
        {
          float32x4_t v1259 = vaddq_f32(v1482, v1275);
          float32x4_t v1260 = vaddq_f32(v1442, v1276);
          float32x4_t v1132 = vaddq_f32(v1426, v1277);
          float32x4_t v1133 = vaddq_f32(v1417, v1278);
          if (!v1444) {
            goto LABEL_654;
          }
        }
      }
      else
      {
        float32x4_t v1259 = v1482;
        float32x4_t v1260 = v1442;
        if (!v1444)
        {
LABEL_654:
          float32x4_t v25 = vaddq_f32(v25, v1259);
          float32x4_t v26 = vaddq_f32(v26, v1260);
          float32x4_t v27 = vaddq_f32(v27, v1132);
          float32x4_t v28 = vaddq_f32(v28, v1133);
          goto LABEL_655;
        }
      }
      float32x4_t v1259 = vmulq_n_f32(v1259, v1063.f32[0]);
      float32x4_t v1260 = vmulq_lane_f32(v1260, *(float32x2_t *)v1063.f32, 1);
      float32x4_t v1132 = vmulq_laneq_f32(v1132, v1063, 2);
      float32x4_t v1133 = vmulq_laneq_f32(v1133, v1063, 3);
      goto LABEL_654;
    }
    if (v1554)
    {
      if (v1444)
      {
        float32x4_t v1096 = vmulq_n_f32(v1096, v1063.f32[0]);
        float32x4_t v1097 = vmulq_lane_f32(v1097, *(float32x2_t *)v1063.f32, 1);
        float32x4_t v1098 = vmulq_laneq_f32(v1098, v1063, 2);
        float32x4_t v1099 = vmulq_laneq_f32(v1099, v1063, 3);
      }
      float32x4_t v25 = vaddq_f32(v25, v1096);
      float32x4_t v26 = vaddq_f32(v26, v1097);
      float32x4_t v27 = vaddq_f32(v27, v1098);
      float32x4_t v28 = vaddq_f32(v28, v1099);
    }
LABEL_655:
    v11[8] = v25;
    v12[8] = v26;
    v13[8] = v27;
    v14[8] = v28;
    if ((v6 & 0x400) != 0)
    {
      v11[8].i32[3] = v11[13].i32[3];
      v12[8].i32[3] = v12[13].i32[3];
      v13[8].i32[3] = v13[13].i32[3];
      float32x4_t v1261 = &v14[13].i32[3];
    }
    else
    {
      if ((v6 & 0x3FF) == 0) {
        goto LABEL_660;
      }
      v11[8].i32[3] = v1547[29].i32[3];
      v12[8].i32[3] = v17[29].i32[3];
      v13[8].i32[3] = v18[29].i32[3];
      float32x4_t v1261 = &v19[29].i32[3];
    }
    v14[8].i32[3] = *v1261;
LABEL_660:
    if ((v5 & 0x10) != 0)
    {
      v11[9] = v1477;
      v12[9] = v1474;
      v13[9] = v1471;
      v14[9] = v1469;
    }
    char v10 = v8 + 2;
    v8 += 4;
    unint64_t v7 = v1468;
  }
  while ((unint64_t)v10 < v1468);
}

void gleLLVMVecLightPtrBackTransform(uint64_t a1, uint64_t a2, int a3, int32x4_t a4)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(a1 + 20444);
  unsigned __int32 v6 = *(_DWORD *)(a1 + 20448);
  unint64_t v7 = a2 + 8 * a3;
  int v1467 = v5 & 0xFF08;
  unsigned int v1554 = v6 & 0xFFFF0300;
  int v1451 = v6 & 0x1010000;
  int v1287 = v5 & 0x108;
  int v1450 = v6 & 0x2020000;
  int v1286 = v5 & 0x208;
  int v1449 = v6 & 0x4040000;
  int v1285 = v5 & 0x408;
  int v1448 = v6 & 0x8080000;
  int v1284 = v5 & 0x808;
  int v1447 = v6 & 0x10100000;
  int v1283 = v5 & 0x1008;
  int v1446 = v6 & 0x20200000;
  int v1282 = v5 & 0x2008;
  int v1445 = v6 & 0x40400000;
  int v1281 = v5 & 0x4008;
  unsigned int v1444 = v6 & 0x80800000;
  int v1280 = v5 & 0x8008;
  unint64_t v8 = (void *)(a2 + 16);
  unsigned int v1312 = (const float *)(a1 + 13740);
  a4.i32[0] = v6;
  int32x4_t v1304 = a4;
  float32x4_t v1289 = (const float *)(a1 + 13744);
  float32x4_t v1288 = (const float *)(a1 + 13748);
  float32x4_t v1311 = (const float *)(a1 + 13580);
  int32x4_t v1303 = (const float *)(a1 + 13584);
  float v1302 = (const float *)(a1 + 13588);
  float32x4_t v1310 = (const float *)(a1 + 13420);
  float v1301 = (const float *)(a1 + 13424);
  float v1300 = (const float *)(a1 + 13428);
  v1309 = (const float *)(a1 + 13260);
  float v1299 = (const float *)(a1 + 13264);
  float v1298 = (const float *)(a1 + 13268);
  float v1308 = (const float *)(a1 + 13100);
  float v1297 = (const float *)(a1 + 13104);
  float32x4_t v1296 = (const float *)(a1 + 13108);
  v1307 = (const float *)(a1 + 12940);
  float32x4_t v1295 = (const float *)(a1 + 12944);
  float v1294 = (const float *)(a1 + 12948);
  v1306 = (const float *)(a1 + 12780);
  float v1293 = (const float *)(a1 + 12784);
  float v1292 = (const float *)(a1 + 12788);
  v1305 = (const float *)(a1 + 12620);
  float v1291 = (const float *)(a1 + 12624);
  float32x4_t v1290 = (const float *)(a1 + 12628);
  float v9 = 1.0;
  __int16 v1429 = v5;
  unint64_t v1468 = v7;
  do
  {
    uint64_t v11 = (float32x4_t *)*(v8 - 2);
    v11->i8[2] &= ~2u;
    if ((unint64_t)(v8 + 1) >= v7)
    {
      if ((unint64_t)v8 >= v7)
      {
        uint64_t v15 = (float32x4_t **)(v8 - 1);
        int v12 = v11;
        BOOL v13 = v11;
        int v14 = v11;
        if ((unint64_t)(v8 - 1) >= v7) {
          goto LABEL_11;
        }
        int v14 = *v15;
        int v12 = *v15;
      }
      else
      {
        int v12 = (float32x4_t *)*(v8 - 1);
        int v14 = (float32x4_t *)*v8;
        v12->i8[2] &= ~2u;
      }
      BOOL v13 = v14;
    }
    else
    {
      int v12 = (float32x4_t *)*(v8 - 1);
      BOOL v13 = (float32x4_t *)*v8;
      int v14 = (float32x4_t *)v8[1];
      v12->i8[2] &= ~2u;
      v13->i8[2] &= ~2u;
    }
    v14->i8[2] &= ~2u;
LABEL_11:
    uint64_t v16 = (float32x4_t *)v11[2].i64[1];
    if (v16[31].i8[0]) {
      a1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 1504))(v4, v11[2].i64[1], 1);
    }
    unsigned int v17 = (float32x4_t *)v12[2].i64[1];
    float32x4_t v1547 = v16;
    if (v17 != v16 && v17[31].i8[0]) {
      a1 = (*(uint64_t (**)(uint64_t, float32x4_t *, uint64_t))(v4 + 1504))(v4, v17, 1);
    }
    float v18 = (float32x4_t *)v13[2].i64[1];
    if (v18 != v17 && v18[31].i8[0]) {
      a1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 1504))(v4, v13[2].i64[1], 1);
    }
    float v19 = (float32x4_t *)v14[2].i64[1];
    float32x4_t v1481 = v19;
    if (v19 != v18 && v19[31].i8[0])
    {
      a1 = (*(uint64_t (**)(uint64_t, float32x4_t *, uint64_t))(v4 + 1504))(v4, v19, 1);
      float v19 = v1481;
    }
    if (v1467)
    {
      float v20 = v11[6].f32[3];
      float32x4_t v1552 = v11[6];
      if (v20 != v9) {
        float32x4_t v1552 = vmulq_n_f32(v1552, v9 / v20);
      }
      float v21 = v12[6].f32[3];
      float32x4_t v1548 = v12[6];
      if (v21 != v9) {
        float32x4_t v1548 = vmulq_n_f32(v1548, v9 / v21);
      }
      float v22 = v13[6].f32[3];
      float32x4_t v1550 = v13[6];
      if (v22 != v9) {
        float32x4_t v1550 = vmulq_n_f32(v1550, v9 / v22);
      }
      float v23 = v14[6].f32[3];
      float32x4_t v24 = v14[6];
      if (v23 != v9) {
        float32x4_t v24 = vmulq_n_f32(v24, v9 / v23);
      }
      if ((v6 & 0x100) != 0)
      {
LABEL_36:
        float32x4_t v29 = *(float32x4_t *)(v4 + 12528);
        float32x4_t v25 = vmlaq_f32(v11[13], v29, *v1547);
        float32x4_t v26 = vmlaq_f32(v12[13], v29, *v17);
        float32x4_t v27 = vmlaq_f32(v13[13], v29, *v18);
        float32x4_t v28 = vmlaq_f32(v14[13], v29, *v19);
        goto LABEL_39;
      }
    }
    else
    {
      float32x4_t v24 = 0uLL;
      float32x4_t v1548 = 0u;
      float32x4_t v1550 = 0u;
      float32x4_t v1552 = 0u;
      if ((v6 & 0x100) != 0) {
        goto LABEL_36;
      }
    }
    if ((v6 & 0x200) != 0)
    {
      float32x4_t v30 = *(float32x4_t *)(v4 + 12528);
      float32x4_t v25 = vmlaq_f32(v1547[3], v11[13], v30);
      float32x4_t v26 = vmlaq_f32(v17[3], v12[13], v30);
      float32x4_t v27 = vmlaq_f32(v18[3], v13[13], v30);
      float32x4_t v28 = vmlaq_f32(v19[3], v14[13], v30);
    }
    else if (v1554)
    {
      float32x4_t v25 = v1547[29];
      float32x4_t v26 = v17[29];
      float32x4_t v27 = v18[29];
      float32x4_t v28 = v19[29];
    }
    else
    {
      float32x4_t v25 = v1547[30];
      float32x4_t v26 = v17[30];
      float32x4_t v27 = v18[30];
      float32x4_t v28 = v19[30];
    }
LABEL_39:
    float32x4_t v31 = 0uLL;
    float32x4_t v1477 = 0u;
    float32x4_t v1479 = v24;
    if ((v6 & 1) == 0) {
      goto LABEL_71;
    }
    float32x4_t v32 = v11[7];
    float32x4_t v33 = v12[7];
    float32x4_t v34 = v13[7];
    float32x4_t v35 = v14[7];
    if ((v5 & 2) != 0)
    {
      float32x4_t v32 = vnegq_f32(v32);
      float32x4_t v33 = vnegq_f32(v33);
      float32x4_t v34 = vnegq_f32(v34);
      float32x4_t v35 = vnegq_f32(v35);
    }
    float32x4_t v36 = *(float32x4_t *)(v4 + 12640);
    float32x4_t v37 = 0uLL;
    if ((v5 & 0x100) != 0)
    {
      float32x4_t v62 = vsubq_f32(v36, v1552);
      float32x4_t v63 = vsubq_f32(v36, v1548);
      float32x4_t v64 = vsubq_f32(v36, v1550);
      float32x4_t v65 = vsubq_f32(v36, v24);
      float32x4_t v66 = vmulq_f32(v62, v62);
      int32x4_t v67 = (int32x4_t)vmulq_f32(v63, v63);
      float32x4_t v68 = vmulq_f32(v64, v64);
      v69.i64[0] = vzip1q_s32((int32x4_t)v66, v67).u64[0];
      v69.i32[2] = v68.i32[0];
      float32x4_t v70 = vmulq_f32(v65, v65);
      v69.i32[3] = v70.i32[0];
      v71.i64[0] = vtrn2q_s32((int32x4_t)v66, v67).u64[0];
      v71.i64[1] = __PAIR64__(v70.u32[1], v68.u32[1]);
      v66.i64[0] = vzip2q_s32((int32x4_t)v66, v67).u64[0];
      v66.i64[1] = __PAIR64__(v70.u32[2], v68.u32[2]);
      float32x4_t v72 = vsqrtq_f32(vaddq_f32(v66, vaddq_f32(v69, v71)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v74 = vdivq_f32(_Q0, v72);
      float32x4_t v36 = vmulq_n_f32(v62, v74.f32[0]);
      float32x4_t v38 = vmulq_lane_f32(v63, *(float32x2_t *)v74.f32, 1);
      float32x4_t v39 = vmulq_laneq_f32(v64, v74, 2);
      float32x4_t v40 = vmulq_laneq_f32(v65, v74, 3);
      if ((v6 & 0x1000000) != 0)
      {
        float32x4_t v75 = vdivq_f32(_Q0, v74);
        unsigned int v76 = v1291;
        float32x4_t v77 = vld1q_dup_f32(v76);
        float32x4_t v78 = v1290;
        float32x4_t v79 = vld1q_dup_f32(v78);
        float32x4_t v37 = vdivq_f32(_Q0, vmlaq_f32(v77, vmlaq_n_f32(v79, v75, *(float *)(v4 + 12632)), v75));
        if ((v6 & 0x10000) == 0)
        {
LABEL_49:
          if (!v1451) {
            goto LABEL_58;
          }
          goto LABEL_50;
        }
      }
      else if ((v6 & 0x10000) == 0)
      {
        goto LABEL_49;
      }
    }
    else
    {
      float32x4_t v38 = *(float32x4_t *)(v4 + 12640);
      float32x4_t v39 = v38;
      float32x4_t v40 = v38;
      if ((v6 & 0x10000) == 0) {
        goto LABEL_49;
      }
    }
    float32x4_t v41 = vnegq_f32(*(float32x4_t *)(v4 + 12656));
    float32x4_t v42 = vmulq_f32(v36, v41);
    int32x4_t v43 = (int32x4_t)vmulq_f32(v38, v41);
    float32x4_t v44 = vmulq_f32(v39, v41);
    float32x4_t v45 = vmulq_f32(v40, v41);
    v46.i64[0] = vzip1q_s32((int32x4_t)v42, v43).u64[0];
    v46.i64[1] = __PAIR64__(v45.u32[0], v44.u32[0]);
    v47.i64[0] = vtrn2q_s32((int32x4_t)v42, v43).u64[0];
    v47.i64[1] = __PAIR64__(v45.u32[1], v44.u32[1]);
    v42.i64[0] = vzip2q_s32((int32x4_t)v42, v43).u64[0];
    v42.i64[1] = __PAIR64__(v45.u32[2], v44.u32[2]);
    float32x4_t v48 = vaddq_f32(v42, vaddq_f32(v46, v47));
    float32x4_t v49 = v1305;
    float32x4_t v50 = vld1q_dup_f32(v49);
    int32x4_t v51 = vcgeq_f32(v48, v50);
    int32x4_t v52 = (int32x4_t)vmvnq_s8((int8x16_t)v51);
    *(int16x4_t *)v52.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v52), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v52.i8))
    {
      float32x4_t v37 = 0uLL;
      if (!v1451) {
        goto LABEL_58;
      }
    }
    else
    {
      v52.i32[0] = 0;
      int8x16_t v1391 = (int8x16_t)v51;
      v51.i32[0] = v6 & 0x1000000;
      int8x16_t v53 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v51, v52), 0);
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1377 = (float32x4_t)vbslq_s8(v53, _Q1, (int8x16_t)v37);
      float v59 = *(float *)(v4 + 12636);
      float32x4_t v1515 = v26;
      float32x4_t v1531 = v25;
      float32x4_t v1483 = v28;
      float32x4_t v1499 = v27;
      float32x4_t v1411 = v39;
      float32x4_t v1420 = v36;
      float32x4_t v1473 = v40;
      float32x4_t v1478 = v48;
      float32x4_t v1403 = v38;
      unsigned int v1363 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(v4 + 560))(a1));
      unsigned int v1349 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1478.f32[1], v59));
      unsigned int v1341 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1478.f32[2], v59));
      *(float *)&unsigned int v60 = (*(float (**)(float, float))(v4 + 560))(v1478.f32[3], v59);
      float32x4_t v38 = v1403;
      float32x4_t v39 = v1411;
      float32x4_t v40 = v1473;
      float32x4_t v36 = v1420;
      float32x4_t v24 = v1479;
      float32x4_t v28 = v1483;
      float32x4_t v27 = v1499;
      float32x4_t v26 = v1515;
      float32x4_t v25 = v1531;
      float v19 = v1481;
      v61.i64[0] = __PAIR64__(v1349, v1363);
      v61.i64[1] = __PAIR64__(v60, v1341);
      float32x4_t v37 = vmulq_f32(v1377, (float32x4_t)vandq_s8(v61, v1391));
      if (!v1451) {
        goto LABEL_58;
      }
    }
LABEL_50:
    if (v37.f32[0] <= 0.0 && v37.f32[1] <= 0.0 && v37.f32[2] <= 0.0)
    {
      float32x4_t v1477 = 0u;
      if (v37.f32[3] <= 0.0)
      {
        float32x4_t v31 = 0uLL;
        goto LABEL_71;
      }
    }
LABEL_58:
    if (v1554)
    {
      if ((v6 & 0x200) != 0)
      {
        float32x4_t v84 = *(float32x4_t *)(v4 + 12544);
        float32x4_t v80 = vmulq_f32(v84, v11[13]);
        float32x4_t v81 = vmulq_f32(v84, v12[13]);
        float32x4_t v82 = vmulq_f32(v84, v13[13]);
        float32x4_t v83 = vmulq_f32(v84, v14[13]);
      }
      else
      {
        float32x4_t v80 = v1547[5];
        float32x4_t v81 = v17[5];
        float32x4_t v82 = v18[5];
        float32x4_t v83 = v19[5];
      }
    }
    else
    {
      float32x4_t v83 = 0uLL;
      float32x4_t v82 = 0uLL;
      float32x4_t v81 = 0uLL;
      float32x4_t v80 = 0uLL;
    }
    float32x4_t v85 = vmulq_f32(v32, v36);
    int32x4_t v86 = (int32x4_t)vmulq_f32(v33, v38);
    float32x4_t v87 = vmulq_f32(v34, v39);
    float32x4_t v88 = vmulq_f32(v35, v40);
    v89.i64[0] = vzip1q_s32((int32x4_t)v85, v86).u64[0];
    v89.i64[1] = __PAIR64__(v88.u32[0], v87.u32[0]);
    v90.i64[0] = vtrn2q_s32((int32x4_t)v85, v86).u64[0];
    v90.i64[1] = __PAIR64__(v88.u32[1], v87.u32[1]);
    v85.i64[0] = vzip2q_s32((int32x4_t)v85, v86).u64[0];
    v85.i64[1] = __PAIR64__(v88.u32[2], v87.u32[2]);
    float32x4_t v91 = vaddq_f32(v85, vaddq_f32(v89, v90));
    if (v91.f32[0] <= 0.0 && v91.f32[1] <= 0.0 && v91.f32[2] <= 0.0 && v91.f32[3] <= 0.0)
    {
      float32x4_t v31 = 0uLL;
      float32x4_t v1477 = 0u;
      if (v1554)
      {
        if (v1451)
        {
          float32x4_t v80 = vmulq_n_f32(v80, v37.f32[0]);
          float32x4_t v81 = vmulq_lane_f32(v81, *(float32x2_t *)v37.f32, 1);
          float32x4_t v82 = vmulq_laneq_f32(v82, v37, 2);
          float32x4_t v83 = vmulq_laneq_f32(v83, v37, 3);
        }
        float32x4_t v25 = vaddq_f32(v25, v80);
        float32x4_t v26 = vaddq_f32(v26, v81);
        float32x4_t v27 = vaddq_f32(v27, v82);
        float32x4_t v28 = vaddq_f32(v28, v83);
      }
LABEL_71:
      float32x4_t v1471 = v31;
      float32x4_t v1474 = v31;
      float32x4_t v1469 = v31;
      if ((v6 & 2) == 0) {
        goto LABEL_163;
      }
      goto LABEL_72;
    }
    float32x4_t v1475 = v40;
    if ((v6 & 0x400) != 0)
    {
      float32x4_t v157 = *(float32x4_t *)(v4 + 12560);
      float32x4_t v135 = vmulq_f32(v157, v11[13]);
      float32x4_t v136 = vmulq_f32(v157, v12[13]);
      float32x4_t v137 = vmulq_f32(v157, v13[13]);
      float32x4_t v138 = vmulq_f32(v157, v14[13]);
    }
    else
    {
      float32x4_t v135 = v1547[6];
      float32x4_t v136 = v17[6];
      float32x4_t v137 = v18[6];
      float32x4_t v138 = v19[6];
    }
    float32x4_t v158 = vmulq_n_f32(v135, fmaxf(v91.f32[0], 0.0));
    float32x4_t v159 = vmulq_n_f32(v136, fmaxf(v91.f32[1], 0.0));
    float32x4_t v160 = vmulq_n_f32(v137, fmaxf(v91.f32[2], 0.0));
    float32x4_t v161 = vmulq_n_f32(v138, fmaxf(v91.f32[3], 0.0));
    if (v1554)
    {
      float32x4_t v158 = vaddq_f32(v80, v158);
      float32x4_t v159 = vaddq_f32(v81, v159);
      float32x4_t v160 = vaddq_f32(v82, v160);
      float32x4_t v161 = vaddq_f32(v83, v161);
    }
    float32x4_t v1430 = v158;
    float32x4_t v1412 = v160;
    float32x4_t v1421 = v159;
    float32x4_t v1404 = v161;
    if ((v5 & 0x20) != 0)
    {
      float32x4_t v175 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v32, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v32, 0xCuLL)));
      int32x4_t v176 = (int32x4_t)vmlsq_f32(vmulq_f32(v175, v36), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v36, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v36, 0xCuLL))), v32);
      int32x4_t v177 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v176, 0xCuLL);
      float32x4_t v178 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v33, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v33, 0xCuLL)));
      float32x4_t v179 = vmlsq_f32(vmulq_f32(v178, v38), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v38, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v38, 0xCuLL))), v33);
      int32x4_t v180 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v179, 0xCuLL);
      float32x4_t v181 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v34, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v34, 0xCuLL)));
      int32x4_t v182 = (int32x4_t)vmlsq_f32(vmulq_f32(v181, v39), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v39, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v39, 0xCuLL))), v34);
      int32x4_t v183 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v182, 0xCuLL);
      float32x4_t v184 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v35, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v35, 0xCuLL)));
      int32x4_t v185 = (int32x4_t)vmlsq_f32(vmulq_f32(v184, v1475), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1475, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1475, 0xCuLL))), v35);
      int32x4_t v186 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v185, 0xCuLL);
      int32x4_t v187 = (int32x4_t)vmlsq_f32(vmulq_f32(v175, (float32x4_t)vrev64q_s32(vuzp1q_s32(v176, v177))), (float32x4_t)vextq_s8((int8x16_t)v177, (int8x16_t)vrev64q_s32(v177), 8uLL), v32);
      int32x4_t v188 = (int32x4_t)vmlsq_f32(vmulq_f32(v178, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v179, v180))), (float32x4_t)vextq_s8((int8x16_t)v180, (int8x16_t)vrev64q_s32(v180), 8uLL), v33);
      int32x4_t v189 = (int32x4_t)vmlsq_f32(vmulq_f32(v181, (float32x4_t)vrev64q_s32(vuzp1q_s32(v182, v183))), (float32x4_t)vextq_s8((int8x16_t)v183, (int8x16_t)vrev64q_s32(v183), 8uLL), v34);
      int32x4_t v190 = (int32x4_t)vmlsq_f32(vmulq_f32(v184, (float32x4_t)vrev64q_s32(vuzp1q_s32(v185, v186))), (float32x4_t)vextq_s8((int8x16_t)v186, (int8x16_t)vrev64q_s32(v186), 8uLL), v35);
      v179.i64[0] = 0x4000000040000000;
      v179.i64[1] = 0x4000000040000000;
      float32x4_t v191 = vmlaq_f32(v36, v179, (float32x4_t)vrev64q_s32(vuzp1q_s32(v187, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v187, 0xCuLL))));
      float32x4_t v192 = vmlaq_f32(v38, v179, (float32x4_t)vrev64q_s32(vuzp1q_s32(v188, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v188, 0xCuLL))));
      float32x4_t v193 = vmlaq_f32(v39, v179, (float32x4_t)vrev64q_s32(vuzp1q_s32(v189, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v189, 0xCuLL))));
      float32x4_t v194 = vmlaq_f32(v1475, v179, (float32x4_t)vrev64q_s32(vuzp1q_s32(v190, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v190, 0xCuLL))));
      if ((v5 & 8) != 0)
      {
        float32x4_t v217 = vmulq_f32(v1552, v1552);
        int32x4_t v218 = (int32x4_t)vmulq_f32(v1548, v1548);
        float32x4_t v219 = vmulq_f32(v1550, v1550);
        float32x4_t v220 = vmulq_f32(v24, v24);
        v221.i64[0] = vzip1q_s32((int32x4_t)v217, v218).u64[0];
        v221.i64[1] = __PAIR64__(v220.u32[0], v219.u32[0]);
        v222.i64[0] = vtrn2q_s32((int32x4_t)v217, v218).u64[0];
        v222.i64[1] = __PAIR64__(v220.u32[1], v219.u32[1]);
        v217.i64[0] = vzip2q_s32((int32x4_t)v217, v218).u64[0];
        v217.i64[1] = __PAIR64__(v220.u32[2], v219.u32[2]);
        __asm { FMOV            V7.4S, #1.0 }
        float32x4_t v224 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v217, vaddq_f32(v221, v222))));
        float32x4_t v225 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1552), v224.f32[0]), v191);
        int32x4_t v226 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v224.f32, 1), v192);
        float32x4_t v227 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1550), v224, 2), v193);
        float32x4_t v228 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v24), v224, 3), v194);
        v219.i64[0] = vzip1q_s32((int32x4_t)v225, v226).u64[0];
        v219.i64[1] = __PAIR64__(v228.u32[0], v227.u32[0]);
        v220.i64[0] = vtrn2q_s32((int32x4_t)v225, v226).u64[0];
        v220.i64[1] = __PAIR64__(v228.u32[1], v227.u32[1]);
        v225.i64[0] = vzip2q_s32((int32x4_t)v225, v226).u64[0];
        v225.i64[1] = __PAIR64__(v228.u32[2], v227.u32[2]);
        float32x4_t v195 = vaddq_f32(v225, vaddq_f32(v219, v220));
      }
      else
      {
        v195.i64[0] = vzip2q_s32((int32x4_t)v191, (int32x4_t)v192).u64[0];
        v195.i64[1] = __PAIR64__(v194.u32[2], v193.u32[2]);
      }
      float32x4_t v161 = v1404;
      float32x4_t v160 = v1412;
      float v9 = 1.0;
    }
    else
    {
      if (v1287)
      {
        if ((v5 & 8) != 0)
        {
          float32x4_t v249 = vmulq_f32(v1552, v1552);
          int32x4_t v250 = (int32x4_t)vmulq_f32(v1548, v1548);
          float32x4_t v251 = vmulq_f32(v1550, v1550);
          v252.i64[0] = vzip1q_s32((int32x4_t)v249, v250).u64[0];
          v252.i32[2] = v251.i32[0];
          float32x4_t v253 = vmulq_f32(v24, v24);
          v252.i32[3] = v253.i32[0];
          v254.i64[0] = vtrn2q_s32((int32x4_t)v249, v250).u64[0];
          v254.i64[1] = __PAIR64__(v253.u32[1], v251.u32[1]);
          v249.i64[0] = vzip2q_s32((int32x4_t)v249, v250).u64[0];
          v249.i64[1] = __PAIR64__(v253.u32[2], v251.u32[2]);
          __asm { FMOV            V16.4S, #1.0 }
          float32x4_t v256 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v249, vaddq_f32(v252, v254))));
          float32x4_t v162 = vmulq_n_f32(vnegq_f32(v1552), v256.f32[0]);
          float32x4_t v163 = vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v256.f32, 1);
          float32x4_t v164 = vmulq_laneq_f32(vnegq_f32(v1550), v256, 2);
          float32x4_t v165 = vmulq_laneq_f32(vnegq_f32(v24), v256, 3);
        }
        else
        {
          float32x4_t v162 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v163 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v164 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v165 = (float32x4_t)xmmword_227DC2100;
        }
        float32x4_t v257 = vaddq_f32(v36, v162);
        float32x4_t v258 = vaddq_f32(v38, v163);
        float32x4_t v259 = vaddq_f32(v39, v164);
        float32x4_t v260 = vaddq_f32(v1475, v165);
        float32x4_t v261 = vmulq_f32(v257, v257);
        int32x4_t v262 = (int32x4_t)vmulq_f32(v258, v258);
        float32x4_t v263 = vmulq_f32(v259, v259);
        v264.i64[0] = vzip1q_s32((int32x4_t)v261, v262).u64[0];
        v264.i32[2] = v263.i32[0];
        float32x4_t v265 = vmulq_f32(v260, v260);
        v264.i32[3] = v265.i32[0];
        v266.i64[0] = vtrn2q_s32((int32x4_t)v261, v262).u64[0];
        v266.i64[1] = __PAIR64__(v265.u32[1], v263.u32[1]);
        v261.i64[0] = vzip2q_s32((int32x4_t)v261, v262).u64[0];
        v261.i64[1] = __PAIR64__(v265.u32[2], v263.u32[2]);
        __asm { FMOV            V17.4S, #1.0 }
        float32x4_t v268 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v261, vaddq_f32(v264, v266))));
        float32x4_t v241 = vmulq_n_f32(v257, v268.f32[0]);
        float32x4_t v242 = vmulq_lane_f32(v258, *(float32x2_t *)v268.f32, 1);
        float32x4_t v243 = vmulq_laneq_f32(v259, v268, 2);
        float32x4_t v244 = vmulq_laneq_f32(v260, v268, 3);
      }
      else
      {
        float32x4_t v241 = *(float32x4_t *)(v4 + 12672);
        float32x4_t v242 = v241;
        float32x4_t v243 = v241;
        float32x4_t v244 = v241;
      }
      float v9 = 1.0;
      float32x4_t v269 = vmulq_f32(v32, v241);
      int32x4_t v270 = (int32x4_t)vmulq_f32(v33, v242);
      float32x4_t v271 = vmulq_f32(v34, v243);
      float32x4_t v272 = vmulq_f32(v35, v244);
      v273.i64[0] = vzip1q_s32((int32x4_t)v269, v270).u64[0];
      v273.i64[1] = __PAIR64__(v272.u32[0], v271.u32[0]);
      v274.i64[0] = vtrn2q_s32((int32x4_t)v269, v270).u64[0];
      v274.i64[1] = __PAIR64__(v272.u32[1], v271.u32[1]);
      v269.i64[0] = vzip2q_s32((int32x4_t)v269, v270).u64[0];
      v269.i64[1] = __PAIR64__(v272.u32[2], v271.u32[2]);
      float32x4_t v195 = vaddq_f32(v269, vaddq_f32(v273, v274));
    }
    if (v91.f32[0] <= 0.0) {
      float v275 = 0.0;
    }
    else {
      float v275 = v195.f32[0];
    }
    if (v91.f32[1] <= 0.0) {
      float v276 = 0.0;
    }
    else {
      float v276 = v195.f32[1];
    }
    if (v91.f32[2] <= 0.0) {
      float v277 = 0.0;
    }
    else {
      float v277 = v195.f32[2];
    }
    if (v91.f32[3] <= 0.0) {
      float v278 = 0.0;
    }
    else {
      float v278 = v195.f32[3];
    }
    float32x4_t v1477 = 0u;
    if (v275 > 0.0 || v276 > 0.0 || v277 > 0.0 || v278 > 0.0)
    {
      float32x4_t v1476 = v37;
      float32x4_t v1485 = v28;
      float32x4_t v1501 = v27;
      float32x4_t v1517 = v26;
      float32x4_t v1533 = v25;
      float32x4_t v1453 = v8;
      float v281 = fmaxf(v276, 0.0);
      float v282 = fmaxf(v277, 0.0);
      float v283 = v17[4].f32[0];
      float v284 = fmaxf(v278, 0.0);
      float v285 = v18[4].f32[0];
      float v286 = v19[4].f32[0];
      float v287 = v19;
      LODWORD(v1472) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(fmaxf(v275, 0.0), v1547[4].f32[0]));
      LODWORD(v1470) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v281, v283));
      LODWORD(v1393) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v282, v285));
      a1 = (*(uint64_t (**)(float, float))(v4 + 560))(v284, v286);
      if ((v6 & 0x800) != 0)
      {
        float32x4_t v293 = *(float32x4_t *)(v4 + 12576);
        float32x4_t v289 = vmulq_f32(v293, v11[13]);
        float32x4_t v290 = vmulq_f32(v293, v12[13]);
        float32x4_t v291 = vmulq_f32(v293, v13[13]);
        float32x4_t v292 = vmulq_f32(v293, v14[13]);
      }
      else
      {
        float32x4_t v289 = v1547[7];
        float32x4_t v290 = v17[7];
        float32x4_t v291 = v18[7];
        float32x4_t v292 = v287[7];
      }
      float v19 = v287;
      float32x4_t v37 = v1476;
      float32x4_t v279 = v1430;
      float32x4_t v160 = v1412;
      float32x4_t v280 = v1421;
      float32x4_t v294 = vmulq_n_f32(v289, v1472);
      float32x4_t v295 = vmulq_n_f32(v290, v1470);
      float32x4_t v161 = v1404;
      float32x4_t v296 = vmulq_n_f32(v291, v1393);
      float32x4_t v297 = vmulq_n_f32(v292, v288);
      LOWORD(v5) = v1429;
      unint64_t v8 = v1453;
      float32x4_t v26 = v1517;
      float32x4_t v25 = v1533;
      float32x4_t v28 = v1485;
      float32x4_t v27 = v1501;
      float32x4_t v24 = v1479;
      if ((v1429 & 0x10) != 0)
      {
        if (v1451)
        {
          float32x4_t v294 = vmulq_n_f32(v294, v1476.f32[0]);
          float32x4_t v295 = vmulq_lane_f32(v295, *(float32x2_t *)v1476.f32, 1);
          float32x4_t v296 = vmulq_laneq_f32(v296, v1476, 2);
          float32x4_t v297 = vmulq_laneq_f32(v297, v1476, 3);
        }
        float32x4_t v1474 = vaddq_f32(v295, (float32x4_t)0);
        float32x4_t v1477 = vaddq_f32(v294, (float32x4_t)0);
        float32x4_t v1471 = vaddq_f32(v296, (float32x4_t)0);
        float32x4_t v298 = vaddq_f32(v297, (float32x4_t)0);
      }
      else
      {
        float32x4_t v279 = vaddq_f32(v1430, v294);
        float32x4_t v280 = vaddq_f32(v1421, v295);
        float32x4_t v160 = vaddq_f32(v1412, v296);
        float32x4_t v161 = vaddq_f32(v1404, v297);
        float32x4_t v298 = 0uLL;
        float32x4_t v1471 = 0u;
        float32x4_t v1474 = 0u;
      }
      float32x4_t v1469 = v298;
      if (v1451)
      {
LABEL_161:
        float32x4_t v279 = vmulq_n_f32(v279, v37.f32[0]);
        float32x4_t v280 = vmulq_lane_f32(v280, *(float32x2_t *)v37.f32, 1);
        float32x4_t v160 = vmulq_laneq_f32(v160, v37, 2);
        float32x4_t v161 = vmulq_laneq_f32(v161, v37, 3);
      }
    }
    else
    {
      float32x4_t v1471 = 0uLL;
      float32x4_t v1474 = 0uLL;
      float32x4_t v1469 = 0uLL;
      float32x4_t v279 = v1430;
      float32x4_t v280 = v1421;
      if (v1451) {
        goto LABEL_161;
      }
    }
    float32x4_t v25 = vaddq_f32(v25, v279);
    float32x4_t v26 = vaddq_f32(v26, v280);
    float32x4_t v27 = vaddq_f32(v27, v160);
    float32x4_t v28 = vaddq_f32(v28, v161);
    if ((v6 & 2) == 0) {
      goto LABEL_163;
    }
LABEL_72:
    float32x4_t v92 = v11[7];
    float32x4_t v93 = v12[7];
    float32x4_t v94 = v13[7];
    float32x4_t v95 = v14[7];
    if ((v5 & 2) != 0)
    {
      float32x4_t v92 = vnegq_f32(v92);
      float32x4_t v93 = vnegq_f32(v93);
      float32x4_t v94 = vnegq_f32(v94);
      float32x4_t v95 = vnegq_f32(v95);
    }
    float32x4_t v96 = *(float32x4_t *)(v4 + 12800);
    float32x4_t v97 = 0uLL;
    if ((v5 & 0x200) != 0)
    {
      float32x4_t v118 = vsubq_f32(v96, v1552);
      float32x4_t v119 = vsubq_f32(v96, v1548);
      float32x4_t v120 = vsubq_f32(v96, v1550);
      float32x4_t v121 = vsubq_f32(v96, v24);
      float32x4_t v122 = vmulq_f32(v118, v118);
      int32x4_t v123 = (int32x4_t)vmulq_f32(v119, v119);
      float32x4_t v124 = vmulq_f32(v120, v120);
      v125.i64[0] = vzip1q_s32((int32x4_t)v122, v123).u64[0];
      v125.i32[2] = v124.i32[0];
      float32x4_t v126 = vmulq_f32(v121, v121);
      v125.i32[3] = v126.i32[0];
      v127.i64[0] = vtrn2q_s32((int32x4_t)v122, v123).u64[0];
      v127.i64[1] = __PAIR64__(v126.u32[1], v124.u32[1]);
      v122.i64[0] = vzip2q_s32((int32x4_t)v122, v123).u64[0];
      v122.i64[1] = __PAIR64__(v126.u32[2], v124.u32[2]);
      float32x4_t v128 = vsqrtq_f32(vaddq_f32(v122, vaddq_f32(v125, v127)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v130 = vdivq_f32(_Q0, v128);
      float32x4_t v96 = vmulq_n_f32(v118, v130.f32[0]);
      float32x4_t v98 = vmulq_lane_f32(v119, *(float32x2_t *)v130.f32, 1);
      float32x4_t v99 = vmulq_laneq_f32(v120, v130, 2);
      float32x4_t v100 = vmulq_laneq_f32(v121, v130, 3);
      if ((v6 & 0x2000000) != 0)
      {
        float32x4_t v139 = vdivq_f32(_Q0, v130);
        float32x4_t v140 = v1293;
        float32x4_t v141 = vld1q_dup_f32(v140);
        float32x4_t v142 = v1292;
        float32x4_t v143 = vld1q_dup_f32(v142);
        float32x4_t v97 = vdivq_f32(_Q0, vmlaq_f32(v141, vmlaq_n_f32(v143, v139, *(float *)(v4 + 12792)), v139));
        if ((v6 & 0x20000) == 0)
        {
LABEL_81:
          if (!v1450) {
            goto LABEL_86;
          }
          goto LABEL_82;
        }
      }
      else if ((v6 & 0x20000) == 0)
      {
        goto LABEL_81;
      }
    }
    else
    {
      float32x4_t v98 = *(float32x4_t *)(v4 + 12800);
      float32x4_t v99 = v98;
      float32x4_t v100 = v98;
      if ((v6 & 0x20000) == 0) {
        goto LABEL_81;
      }
    }
    float32x4_t v101 = vnegq_f32(*(float32x4_t *)(v4 + 12816));
    float32x4_t v102 = vmulq_f32(v96, v101);
    int32x4_t v103 = (int32x4_t)vmulq_f32(v98, v101);
    float32x4_t v104 = vmulq_f32(v99, v101);
    float32x4_t v105 = vmulq_f32(v100, v101);
    v106.i64[0] = vzip1q_s32((int32x4_t)v102, v103).u64[0];
    v106.i64[1] = __PAIR64__(v105.u32[0], v104.u32[0]);
    v107.i64[0] = vtrn2q_s32((int32x4_t)v102, v103).u64[0];
    v107.i64[1] = __PAIR64__(v105.u32[1], v104.u32[1]);
    v102.i64[0] = vzip2q_s32((int32x4_t)v102, v103).u64[0];
    v102.i64[1] = __PAIR64__(v105.u32[2], v104.u32[2]);
    float32x4_t v108 = vaddq_f32(v102, vaddq_f32(v106, v107));
    float32x4_t v109 = v1306;
    float32x4_t v110 = vld1q_dup_f32(v109);
    int32x4_t v111 = vcgeq_f32(v108, v110);
    int32x4_t v112 = (int32x4_t)vmvnq_s8((int8x16_t)v111);
    *(int16x4_t *)v112.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v112), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v112.i8))
    {
      float32x4_t v97 = 0uLL;
      if (!v1450) {
        goto LABEL_86;
      }
    }
    else
    {
      v112.i32[0] = 0;
      int8x16_t v1342 = (int8x16_t)v111;
      float32x4_t v1350 = v98;
      v111.i32[0] = v6 & 0x2000000;
      int8x16_t v113 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v111, v112), 0);
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1334 = (float32x4_t)vbslq_s8(v113, _Q1, (int8x16_t)v97);
      float v115 = *(float *)(v4 + 12796);
      float32x4_t v1516 = v26;
      float32x4_t v1532 = v25;
      float32x4_t v1484 = v28;
      float32x4_t v1500 = v27;
      float32x4_t v1392 = v96;
      float32x4_t v1364 = v99;
      float32x4_t v1378 = v100;
      float32x4_t v1452 = v108;
      unsigned int v1327 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(v4 + 560))(a1));
      unsigned int v1320 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1452.f32[1], v115));
      unsigned int v1313 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1452.f32[2], v115));
      *(float *)&unsigned int v116 = (*(float (**)(float, float))(v4 + 560))(v1452.f32[3], v115);
      float32x4_t v98 = v1350;
      float32x4_t v99 = v1364;
      float32x4_t v100 = v1378;
      float32x4_t v96 = v1392;
      float32x4_t v24 = v1479;
      float32x4_t v28 = v1484;
      float32x4_t v27 = v1500;
      float32x4_t v26 = v1516;
      float32x4_t v25 = v1532;
      float v19 = v1481;
      v117.i64[0] = __PAIR64__(v1320, v1327);
      v117.i64[1] = __PAIR64__(v116, v1313);
      float32x4_t v97 = vmulq_f32(v1334, (float32x4_t)vandq_s8(v117, v1342));
      if (!v1450) {
        goto LABEL_86;
      }
    }
LABEL_82:
    if (v97.f32[0] <= 0.0 && v97.f32[1] <= 0.0 && v97.f32[2] <= 0.0 && v97.f32[3] <= 0.0)
    {
LABEL_163:
      if ((v6 & 4) == 0) {
        goto LABEL_231;
      }
      goto LABEL_164;
    }
LABEL_86:
    if (v1554)
    {
      if ((v6 & 0x200) != 0)
      {
        float32x4_t v144 = *(float32x4_t *)(v4 + 12704);
        float32x4_t v131 = vmulq_f32(v144, v11[13]);
        float32x4_t v132 = vmulq_f32(v144, v12[13]);
        float32x4_t v133 = vmulq_f32(v144, v13[13]);
        float32x4_t v134 = vmulq_f32(v144, v14[13]);
      }
      else
      {
        float32x4_t v131 = v1547[8];
        float32x4_t v132 = v17[8];
        float32x4_t v133 = v18[8];
        float32x4_t v134 = v19[8];
      }
    }
    else
    {
      float32x4_t v134 = 0uLL;
      float32x4_t v133 = 0uLL;
      float32x4_t v132 = 0uLL;
      float32x4_t v131 = 0uLL;
    }
    float32x4_t v145 = vmulq_f32(v92, v96);
    int32x4_t v146 = (int32x4_t)vmulq_f32(v93, v98);
    float32x4_t v147 = vmulq_f32(v94, v99);
    float32x4_t v148 = vmulq_f32(v95, v100);
    v149.i64[0] = vzip1q_s32((int32x4_t)v145, v146).u64[0];
    v149.i64[1] = __PAIR64__(v148.u32[0], v147.u32[0]);
    v150.i64[0] = vtrn2q_s32((int32x4_t)v145, v146).u64[0];
    v150.i64[1] = __PAIR64__(v148.u32[1], v147.u32[1]);
    v145.i64[0] = vzip2q_s32((int32x4_t)v145, v146).u64[0];
    v145.i64[1] = __PAIR64__(v148.u32[2], v147.u32[2]);
    float32x4_t v151 = vaddq_f32(v145, vaddq_f32(v149, v150));
    if (v151.f32[0] > 0.0 || v151.f32[1] > 0.0 || v151.f32[2] > 0.0 || v151.f32[3] > 0.0)
    {
      float32x4_t v152 = v99;
      if ((v6 & 0x400) != 0)
      {
        float32x4_t v166 = *(float32x4_t *)(v4 + 12720);
        float32x4_t v153 = vmulq_f32(v166, v11[13]);
        float32x4_t v154 = vmulq_f32(v166, v12[13]);
        float32x4_t v155 = vmulq_f32(v166, v13[13]);
        float32x4_t v156 = vmulq_f32(v166, v14[13]);
      }
      else
      {
        float32x4_t v153 = v1547[9];
        float32x4_t v154 = v17[9];
        float32x4_t v155 = v18[9];
        float32x4_t v156 = v19[9];
      }
      float32x4_t v167 = vmulq_n_f32(v153, fmaxf(v151.f32[0], 0.0));
      float32x4_t v168 = vmulq_n_f32(v154, fmaxf(v151.f32[1], 0.0));
      float32x4_t v169 = vmulq_n_f32(v155, fmaxf(v151.f32[2], 0.0));
      float32x4_t v170 = vmulq_n_f32(v156, fmaxf(v151.f32[3], 0.0));
      if (v1554)
      {
        float32x4_t v167 = vaddq_f32(v131, v167);
        float32x4_t v168 = vaddq_f32(v132, v168);
        float32x4_t v169 = vaddq_f32(v133, v169);
        float32x4_t v170 = vaddq_f32(v134, v170);
      }
      float32x4_t v1431 = v167;
      float32x4_t v1413 = v169;
      float32x4_t v1422 = v168;
      float32x4_t v1405 = v170;
      if ((v5 & 0x20) != 0)
      {
        float32x4_t v196 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v92, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v92, 0xCuLL)));
        int32x4_t v197 = (int32x4_t)vmlsq_f32(vmulq_f32(v196, v96), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v96, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v96, 0xCuLL))), v92);
        int32x4_t v198 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v197, 0xCuLL);
        float32x4_t v199 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v93, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v93, 0xCuLL)));
        float32x4_t v200 = vmlsq_f32(vmulq_f32(v199, v98), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v98, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v98, 0xCuLL))), v93);
        int32x4_t v201 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v200, 0xCuLL);
        float32x4_t v202 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v94, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v94, 0xCuLL)));
        int32x4_t v203 = (int32x4_t)vmlsq_f32(vmulq_f32(v202, v152), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v152, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v152, 0xCuLL))), v94);
        int32x4_t v204 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v203, 0xCuLL);
        float32x4_t v205 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v95, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v95, 0xCuLL)));
        int32x4_t v206 = (int32x4_t)vmlsq_f32(vmulq_f32(v205, v100), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v100, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v100, 0xCuLL))), v95);
        int32x4_t v207 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v206, 0xCuLL);
        int32x4_t v208 = (int32x4_t)vmlsq_f32(vmulq_f32(v196, (float32x4_t)vrev64q_s32(vuzp1q_s32(v197, v198))), (float32x4_t)vextq_s8((int8x16_t)v198, (int8x16_t)vrev64q_s32(v198), 8uLL), v92);
        int32x4_t v209 = (int32x4_t)vmlsq_f32(vmulq_f32(v199, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v200, v201))), (float32x4_t)vextq_s8((int8x16_t)v201, (int8x16_t)vrev64q_s32(v201), 8uLL), v93);
        int32x4_t v210 = (int32x4_t)vmlsq_f32(vmulq_f32(v202, (float32x4_t)vrev64q_s32(vuzp1q_s32(v203, v204))), (float32x4_t)vextq_s8((int8x16_t)v204, (int8x16_t)vrev64q_s32(v204), 8uLL), v94);
        int32x4_t v211 = (int32x4_t)vmlsq_f32(vmulq_f32(v205, (float32x4_t)vrev64q_s32(vuzp1q_s32(v206, v207))), (float32x4_t)vextq_s8((int8x16_t)v207, (int8x16_t)vrev64q_s32(v207), 8uLL), v95);
        v200.i64[0] = 0x4000000040000000;
        v200.i64[1] = 0x4000000040000000;
        float32x4_t v212 = vmlaq_f32(v96, v200, (float32x4_t)vrev64q_s32(vuzp1q_s32(v208, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v208, 0xCuLL))));
        float32x4_t v213 = vmlaq_f32(v98, v200, (float32x4_t)vrev64q_s32(vuzp1q_s32(v209, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v209, 0xCuLL))));
        float32x4_t v214 = vmlaq_f32(v152, v200, (float32x4_t)vrev64q_s32(vuzp1q_s32(v210, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v210, 0xCuLL))));
        float32x4_t v215 = vmlaq_f32(v100, v200, (float32x4_t)vrev64q_s32(vuzp1q_s32(v211, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v211, 0xCuLL))));
        if ((v5 & 8) != 0)
        {
          float32x4_t v229 = vmulq_f32(v1552, v1552);
          int32x4_t v230 = (int32x4_t)vmulq_f32(v1548, v1548);
          float32x4_t v231 = vmulq_f32(v1550, v1550);
          float32x4_t v24 = v1479;
          float32x4_t v232 = vmulq_f32(v24, v24);
          v233.i64[0] = vzip1q_s32((int32x4_t)v229, v230).u64[0];
          v233.i64[1] = __PAIR64__(v232.u32[0], v231.u32[0]);
          v234.i64[0] = vtrn2q_s32((int32x4_t)v229, v230).u64[0];
          v234.i64[1] = __PAIR64__(v232.u32[1], v231.u32[1]);
          v229.i64[0] = vzip2q_s32((int32x4_t)v229, v230).u64[0];
          v229.i64[1] = __PAIR64__(v232.u32[2], v231.u32[2]);
          __asm { FMOV            V7.4S, #1.0 }
          float32x4_t v236 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v229, vaddq_f32(v233, v234))));
          float32x4_t v237 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1552), v236.f32[0]), v212);
          int32x4_t v238 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v236.f32, 1), v213);
          float32x4_t v239 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1550), v236, 2), v214);
          float32x4_t v240 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1479), v236, 3), v215);
          v231.i64[0] = vzip1q_s32((int32x4_t)v237, v238).u64[0];
          v231.i64[1] = __PAIR64__(v240.u32[0], v239.u32[0]);
          v232.i64[0] = vtrn2q_s32((int32x4_t)v237, v238).u64[0];
          v232.i64[1] = __PAIR64__(v240.u32[1], v239.u32[1]);
          v237.i64[0] = vzip2q_s32((int32x4_t)v237, v238).u64[0];
          v237.i64[1] = __PAIR64__(v240.u32[2], v239.u32[2]);
          float32x4_t v216 = vaddq_f32(v237, vaddq_f32(v231, v232));
          float32x4_t v170 = v1405;
          float32x4_t v169 = v1413;
          float v9 = 1.0;
        }
        else
        {
          v216.i64[0] = vzip2q_s32((int32x4_t)v212, (int32x4_t)v213).u64[0];
          v216.i64[1] = __PAIR64__(v215.u32[2], v214.u32[2]);
          float32x4_t v170 = v1405;
          float32x4_t v169 = v1413;
          float v9 = 1.0;
          float32x4_t v24 = v1479;
        }
      }
      else
      {
        if (v1286)
        {
          if ((v5 & 8) != 0)
          {
            float32x4_t v405 = vmulq_f32(v1552, v1552);
            int32x4_t v406 = (int32x4_t)vmulq_f32(v1548, v1548);
            float32x4_t v407 = vmulq_f32(v1550, v1550);
            v408.i64[0] = vzip1q_s32((int32x4_t)v405, v406).u64[0];
            v408.i32[2] = v407.i32[0];
            float32x4_t v409 = vmulq_f32(v1479, v1479);
            v408.i32[3] = v409.i32[0];
            v410.i64[0] = vtrn2q_s32((int32x4_t)v405, v406).u64[0];
            v410.i64[1] = __PAIR64__(v409.u32[1], v407.u32[1]);
            v405.i64[0] = vzip2q_s32((int32x4_t)v405, v406).u64[0];
            v405.i64[1] = __PAIR64__(v409.u32[2], v407.u32[2]);
            __asm { FMOV            V16.4S, #1.0 }
            float32x4_t v412 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v405, vaddq_f32(v408, v410))));
            float32x4_t v171 = vmulq_n_f32(vnegq_f32(v1552), v412.f32[0]);
            float32x4_t v172 = vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v412.f32, 1);
            float32x4_t v173 = vmulq_laneq_f32(vnegq_f32(v1550), v412, 2);
            float32x4_t v174 = vmulq_laneq_f32(vnegq_f32(v1479), v412, 3);
          }
          else
          {
            float32x4_t v171 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v172 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v173 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v174 = (float32x4_t)xmmword_227DC2100;
          }
          float32x4_t v413 = vaddq_f32(v96, v171);
          float32x4_t v414 = vaddq_f32(v98, v172);
          float32x4_t v415 = vaddq_f32(v152, v173);
          float32x4_t v416 = vaddq_f32(v100, v174);
          float32x4_t v417 = vmulq_f32(v413, v413);
          int32x4_t v418 = (int32x4_t)vmulq_f32(v414, v414);
          float32x4_t v419 = vmulq_f32(v415, v415);
          v420.i64[0] = vzip1q_s32((int32x4_t)v417, v418).u64[0];
          v420.i32[2] = v419.i32[0];
          float32x4_t v421 = vmulq_f32(v416, v416);
          v420.i32[3] = v421.i32[0];
          v422.i64[0] = vtrn2q_s32((int32x4_t)v417, v418).u64[0];
          v422.i64[1] = __PAIR64__(v421.u32[1], v419.u32[1]);
          v417.i64[0] = vzip2q_s32((int32x4_t)v417, v418).u64[0];
          v417.i64[1] = __PAIR64__(v421.u32[2], v419.u32[2]);
          __asm { FMOV            V17.4S, #1.0 }
          float32x4_t v424 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v417, vaddq_f32(v420, v422))));
          float32x4_t v245 = vmulq_n_f32(v413, v424.f32[0]);
          float32x4_t v246 = vmulq_lane_f32(v414, *(float32x2_t *)v424.f32, 1);
          float32x4_t v247 = vmulq_laneq_f32(v415, v424, 2);
          float32x4_t v248 = vmulq_laneq_f32(v416, v424, 3);
        }
        else
        {
          float32x4_t v245 = *(float32x4_t *)(v4 + 12832);
          float32x4_t v246 = v245;
          float32x4_t v247 = v245;
          float32x4_t v248 = v245;
        }
        float32x4_t v24 = v1479;
        float32x4_t v425 = vmulq_f32(v92, v245);
        int32x4_t v426 = (int32x4_t)vmulq_f32(v93, v246);
        float32x4_t v427 = vmulq_f32(v94, v247);
        float32x4_t v428 = vmulq_f32(v95, v248);
        v429.i64[0] = vzip1q_s32((int32x4_t)v425, v426).u64[0];
        v429.i64[1] = __PAIR64__(v428.u32[0], v427.u32[0]);
        v430.i64[0] = vtrn2q_s32((int32x4_t)v425, v426).u64[0];
        v430.i64[1] = __PAIR64__(v428.u32[1], v427.u32[1]);
        v425.i64[0] = vzip2q_s32((int32x4_t)v425, v426).u64[0];
        v425.i64[1] = __PAIR64__(v428.u32[2], v427.u32[2]);
        float32x4_t v216 = vaddq_f32(v425, vaddq_f32(v429, v430));
      }
      if (v151.f32[0] <= 0.0) {
        float v431 = 0.0;
      }
      else {
        float v431 = v216.f32[0];
      }
      if (v151.f32[1] <= 0.0) {
        float v432 = 0.0;
      }
      else {
        float v432 = v216.f32[1];
      }
      if (v151.f32[2] <= 0.0) {
        float v433 = 0.0;
      }
      else {
        float v433 = v216.f32[2];
      }
      if (v151.f32[3] <= 0.0) {
        float v434 = 0.0;
      }
      else {
        float v434 = v216.f32[3];
      }
      if (v431 <= 0.0 && v432 <= 0.0 && v433 <= 0.0 && v434 <= 0.0)
      {
        float32x4_t v435 = v1431;
        float32x4_t v436 = v1422;
        if (!v1450) {
          goto LABEL_230;
        }
        goto LABEL_229;
      }
      float32x4_t v1396 = v97;
      float32x4_t v1488 = v28;
      float32x4_t v1504 = v27;
      float32x4_t v1520 = v26;
      float32x4_t v1536 = v25;
      float32x4_t v1456 = v8;
      float v498 = fmaxf(v432, 0.0);
      float v499 = fmaxf(v433, 0.0);
      float v500 = v17[4].f32[0];
      float v501 = fmaxf(v434, 0.0);
      float v502 = v18[4].f32[0];
      float v503 = v19[4].f32[0];
      int32x4_t v504 = v19;
      LODWORD(v1381) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(fmaxf(v431, 0.0), v1547[4].f32[0]));
      LODWORD(v1367) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v498, v500));
      LODWORD(v1353) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v499, v502));
      a1 = (*(uint64_t (**)(float, float))(v4 + 560))(v501, v503);
      if ((v6 & 0x800) != 0)
      {
        float32x4_t v540 = *(float32x4_t *)(v4 + 12736);
        float32x4_t v506 = vmulq_f32(v540, v11[13]);
        float32x4_t v507 = vmulq_f32(v540, v12[13]);
        float32x4_t v508 = vmulq_f32(v540, v13[13]);
        float32x4_t v509 = vmulq_f32(v540, v14[13]);
      }
      else
      {
        float32x4_t v506 = v1547[10];
        float32x4_t v507 = v17[10];
        float32x4_t v508 = v18[10];
        float32x4_t v509 = v504[10];
      }
      float v19 = v504;
      float32x4_t v97 = v1396;
      float32x4_t v170 = v1405;
      float32x4_t v435 = v1431;
      float32x4_t v169 = v1413;
      float32x4_t v436 = v1422;
      float32x4_t v541 = vmulq_n_f32(v506, v1381);
      float32x4_t v542 = vmulq_n_f32(v507, v1367);
      float32x4_t v543 = vmulq_n_f32(v508, v1353);
      float32x4_t v544 = vmulq_n_f32(v509, v505);
      LOWORD(v5) = v1429;
      unint64_t v8 = v1456;
      float32x4_t v26 = v1520;
      float32x4_t v25 = v1536;
      float32x4_t v28 = v1488;
      float32x4_t v27 = v1504;
      float32x4_t v24 = v1479;
      if ((v1429 & 0x10) != 0)
      {
        if (v1450)
        {
          float32x4_t v541 = vmulq_n_f32(v541, v1396.f32[0]);
          float32x4_t v542 = vmulq_lane_f32(v542, *(float32x2_t *)v1396.f32, 1);
          float32x4_t v543 = vmulq_laneq_f32(v543, v1396, 2);
          float32x4_t v544 = vmulq_laneq_f32(v544, v1396, 3);
        }
        float32x4_t v1474 = vaddq_f32(v1474, v542);
        float32x4_t v1477 = vaddq_f32(v1477, v541);
        float32x4_t v1469 = vaddq_f32(v1469, v544);
        float32x4_t v1471 = vaddq_f32(v1471, v543);
        if (!v1450)
        {
LABEL_230:
          float32x4_t v25 = vaddq_f32(v25, v435);
          float32x4_t v26 = vaddq_f32(v26, v436);
          float32x4_t v27 = vaddq_f32(v27, v169);
          float32x4_t v28 = vaddq_f32(v28, v170);
          if ((v6 & 4) == 0) {
            goto LABEL_231;
          }
          goto LABEL_164;
        }
      }
      else
      {
        float32x4_t v435 = vaddq_f32(v1431, v541);
        float32x4_t v436 = vaddq_f32(v1422, v542);
        float32x4_t v169 = vaddq_f32(v1413, v543);
        float32x4_t v170 = vaddq_f32(v1405, v544);
        if (!v1450) {
          goto LABEL_230;
        }
      }
LABEL_229:
      float32x4_t v435 = vmulq_n_f32(v435, v97.f32[0]);
      float32x4_t v436 = vmulq_lane_f32(v436, *(float32x2_t *)v97.f32, 1);
      float32x4_t v169 = vmulq_laneq_f32(v169, v97, 2);
      float32x4_t v170 = vmulq_laneq_f32(v170, v97, 3);
      goto LABEL_230;
    }
    if (!v1554) {
      goto LABEL_163;
    }
    if (v1450)
    {
      float32x4_t v131 = vmulq_n_f32(v131, v97.f32[0]);
      float32x4_t v132 = vmulq_lane_f32(v132, *(float32x2_t *)v97.f32, 1);
      float32x4_t v133 = vmulq_laneq_f32(v133, v97, 2);
      float32x4_t v134 = vmulq_laneq_f32(v134, v97, 3);
    }
    float32x4_t v25 = vaddq_f32(v25, v131);
    float32x4_t v26 = vaddq_f32(v26, v132);
    float32x4_t v27 = vaddq_f32(v27, v133);
    float32x4_t v28 = vaddq_f32(v28, v134);
    if ((v6 & 4) == 0) {
      goto LABEL_231;
    }
LABEL_164:
    float32x4_t v299 = v11[7];
    float32x4_t v300 = v12[7];
    float32x4_t v301 = v13[7];
    float32x4_t v302 = v14[7];
    if ((v5 & 2) != 0)
    {
      float32x4_t v299 = vnegq_f32(v299);
      float32x4_t v300 = vnegq_f32(v300);
      float32x4_t v301 = vnegq_f32(v301);
      float32x4_t v302 = vnegq_f32(v302);
    }
    float32x4_t v303 = *(float32x4_t *)(v4 + 12960);
    float32x4_t v304 = 0uLL;
    if ((v5 & 0x400) != 0)
    {
      float32x4_t v325 = vsubq_f32(v303, v1552);
      float32x4_t v326 = vsubq_f32(v303, v1548);
      float32x4_t v327 = vsubq_f32(v303, v1550);
      float32x4_t v328 = vsubq_f32(v303, v24);
      float32x4_t v329 = vmulq_f32(v325, v325);
      int32x4_t v330 = (int32x4_t)vmulq_f32(v326, v326);
      float32x4_t v331 = vmulq_f32(v327, v327);
      v332.i64[0] = vzip1q_s32((int32x4_t)v329, v330).u64[0];
      v332.i32[2] = v331.i32[0];
      float32x4_t v333 = vmulq_f32(v328, v328);
      v332.i32[3] = v333.i32[0];
      v334.i64[0] = vtrn2q_s32((int32x4_t)v329, v330).u64[0];
      v334.i64[1] = __PAIR64__(v333.u32[1], v331.u32[1]);
      v329.i64[0] = vzip2q_s32((int32x4_t)v329, v330).u64[0];
      v329.i64[1] = __PAIR64__(v333.u32[2], v331.u32[2]);
      float32x4_t v335 = vsqrtq_f32(vaddq_f32(v329, vaddq_f32(v332, v334)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v337 = vdivq_f32(_Q0, v335);
      float32x4_t v303 = vmulq_n_f32(v325, v337.f32[0]);
      float32x4_t v305 = vmulq_lane_f32(v326, *(float32x2_t *)v337.f32, 1);
      float32x4_t v306 = vmulq_laneq_f32(v327, v337, 2);
      float32x4_t v307 = vmulq_laneq_f32(v328, v337, 3);
      if ((v6 & 0x4000000) != 0)
      {
        float32x4_t v342 = vdivq_f32(_Q0, v337);
        uint64_t v343 = v1295;
        float32x4_t v344 = vld1q_dup_f32(v343);
        float32x4_t v345 = v1294;
        float32x4_t v346 = vld1q_dup_f32(v345);
        float32x4_t v304 = vdivq_f32(_Q0, vmlaq_f32(v344, vmlaq_n_f32(v346, v342, *(float *)(v4 + 12952)), v342));
        if ((v6 & 0x40000) == 0)
        {
LABEL_173:
          if (!v1449) {
            goto LABEL_178;
          }
          goto LABEL_174;
        }
      }
      else if ((v6 & 0x40000) == 0)
      {
        goto LABEL_173;
      }
    }
    else
    {
      float32x4_t v305 = *(float32x4_t *)(v4 + 12960);
      float32x4_t v306 = v305;
      float32x4_t v307 = v305;
      if ((v6 & 0x40000) == 0) {
        goto LABEL_173;
      }
    }
    float32x4_t v308 = vnegq_f32(*(float32x4_t *)(v4 + 12976));
    float32x4_t v309 = vmulq_f32(v303, v308);
    int32x4_t v310 = (int32x4_t)vmulq_f32(v305, v308);
    float32x4_t v311 = vmulq_f32(v306, v308);
    float32x4_t v312 = vmulq_f32(v307, v308);
    v313.i64[0] = vzip1q_s32((int32x4_t)v309, v310).u64[0];
    v313.i64[1] = __PAIR64__(v312.u32[0], v311.u32[0]);
    v314.i64[0] = vtrn2q_s32((int32x4_t)v309, v310).u64[0];
    v314.i64[1] = __PAIR64__(v312.u32[1], v311.u32[1]);
    v309.i64[0] = vzip2q_s32((int32x4_t)v309, v310).u64[0];
    v309.i64[1] = __PAIR64__(v312.u32[2], v311.u32[2]);
    float32x4_t v315 = vaddq_f32(v309, vaddq_f32(v313, v314));
    float32x4_t v316 = v1307;
    float32x4_t v317 = vld1q_dup_f32(v316);
    int32x4_t v318 = vcgeq_f32(v315, v317);
    int32x4_t v319 = (int32x4_t)vmvnq_s8((int8x16_t)v318);
    *(int16x4_t *)v319.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v319), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v319.i8))
    {
      float32x4_t v304 = 0uLL;
      if (!v1449) {
        goto LABEL_178;
      }
    }
    else
    {
      v319.i32[0] = 0;
      int8x16_t v1343 = (int8x16_t)v318;
      float32x4_t v1351 = v305;
      v318.i32[0] = v6 & 0x4000000;
      int8x16_t v320 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v318, v319), 0);
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1335 = (float32x4_t)vbslq_s8(v320, _Q1, (int8x16_t)v304);
      float v322 = *(float *)(v4 + 12956);
      float32x4_t v1518 = v26;
      float32x4_t v1534 = v25;
      float32x4_t v1486 = v28;
      float32x4_t v1502 = v27;
      float32x4_t v1394 = v303;
      float32x4_t v1365 = v306;
      float32x4_t v1379 = v307;
      float32x4_t v1454 = v315;
      unsigned int v1328 = COERCE_UNSIGNED_INT64((*(double (**)(void))(v4 + 560))());
      unsigned int v1321 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1454.f32[1], v322));
      unsigned int v1314 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1454.f32[2], v322));
      *(float *)&unsigned int v323 = (*(float (**)(float, float))(v4 + 560))(v1454.f32[3], v322);
      float32x4_t v305 = v1351;
      float32x4_t v306 = v1365;
      float32x4_t v307 = v1379;
      float32x4_t v303 = v1394;
      float32x4_t v24 = v1479;
      float32x4_t v28 = v1486;
      float32x4_t v27 = v1502;
      float32x4_t v26 = v1518;
      float32x4_t v25 = v1534;
      float v19 = v1481;
      v324.i64[0] = __PAIR64__(v1321, v1328);
      v324.i64[1] = __PAIR64__(v323, v1314);
      float32x4_t v304 = vmulq_f32(v1335, (float32x4_t)vandq_s8(v324, v1343));
      if (!v1449) {
        goto LABEL_178;
      }
    }
LABEL_174:
    if (v304.f32[0] <= 0.0 && v304.f32[1] <= 0.0 && v304.f32[2] <= 0.0 && v304.f32[3] <= 0.0) {
      goto LABEL_231;
    }
LABEL_178:
    if (v1554)
    {
      if ((v6 & 0x200) != 0)
      {
        float32x4_t v347 = *(float32x4_t *)(v4 + 12864);
        float32x4_t v338 = vmulq_f32(v347, v11[13]);
        float32x4_t v339 = vmulq_f32(v347, v12[13]);
        float32x4_t v340 = vmulq_f32(v347, v13[13]);
        float32x4_t v341 = vmulq_f32(v347, v14[13]);
      }
      else
      {
        float32x4_t v338 = v1547[11];
        float32x4_t v339 = v17[11];
        float32x4_t v340 = v18[11];
        float32x4_t v341 = v19[11];
      }
    }
    else
    {
      float32x4_t v341 = 0uLL;
      float32x4_t v340 = 0uLL;
      float32x4_t v339 = 0uLL;
      float32x4_t v338 = 0uLL;
    }
    float32x4_t v348 = vmulq_f32(v299, v303);
    int32x4_t v349 = (int32x4_t)vmulq_f32(v300, v305);
    float32x4_t v350 = vmulq_f32(v301, v306);
    float32x4_t v351 = vmulq_f32(v302, v307);
    v352.i64[0] = vzip1q_s32((int32x4_t)v348, v349).u64[0];
    v352.i64[1] = __PAIR64__(v351.u32[0], v350.u32[0]);
    v353.i64[0] = vtrn2q_s32((int32x4_t)v348, v349).u64[0];
    v353.i64[1] = __PAIR64__(v351.u32[1], v350.u32[1]);
    v348.i64[0] = vzip2q_s32((int32x4_t)v348, v349).u64[0];
    v348.i64[1] = __PAIR64__(v351.u32[2], v350.u32[2]);
    float32x4_t v354 = vaddq_f32(v348, vaddq_f32(v352, v353));
    if (v354.f32[0] <= 0.0 && v354.f32[1] <= 0.0 && v354.f32[2] <= 0.0 && v354.f32[3] <= 0.0)
    {
      if (v1554)
      {
        if (v1449)
        {
          float32x4_t v338 = vmulq_n_f32(v338, v304.f32[0]);
          float32x4_t v339 = vmulq_lane_f32(v339, *(float32x2_t *)v304.f32, 1);
          float32x4_t v340 = vmulq_laneq_f32(v340, v304, 2);
          float32x4_t v341 = vmulq_laneq_f32(v341, v304, 3);
        }
        float32x4_t v25 = vaddq_f32(v25, v338);
        float32x4_t v26 = vaddq_f32(v26, v339);
        float32x4_t v27 = vaddq_f32(v27, v340);
        float32x4_t v28 = vaddq_f32(v28, v341);
      }
LABEL_231:
      if ((v6 & 8) == 0) {
        goto LABEL_309;
      }
      goto LABEL_232;
    }
    if ((v6 & 0x400) != 0)
    {
      float32x4_t v359 = *(float32x4_t *)(v4 + 12880);
      float32x4_t v355 = vmulq_f32(v359, v11[13]);
      float32x4_t v356 = vmulq_f32(v359, v12[13]);
      float32x4_t v357 = vmulq_f32(v359, v13[13]);
      float32x4_t v358 = vmulq_f32(v359, v14[13]);
    }
    else
    {
      float32x4_t v355 = v1547[12];
      float32x4_t v356 = v17[12];
      float32x4_t v357 = v18[12];
      float32x4_t v358 = v19[12];
    }
    float32x4_t v360 = vmulq_n_f32(v355, fmaxf(v354.f32[0], 0.0));
    float32x4_t v361 = vmulq_n_f32(v356, fmaxf(v354.f32[1], 0.0));
    float32x4_t v362 = vmulq_n_f32(v357, fmaxf(v354.f32[2], 0.0));
    float32x4_t v363 = vmulq_n_f32(v358, fmaxf(v354.f32[3], 0.0));
    if (v1554)
    {
      float32x4_t v360 = vaddq_f32(v338, v360);
      float32x4_t v361 = vaddq_f32(v339, v361);
      float32x4_t v362 = vaddq_f32(v340, v362);
      float32x4_t v363 = vaddq_f32(v341, v363);
    }
    float32x4_t v1432 = v360;
    float32x4_t v1414 = v362;
    float32x4_t v1423 = v361;
    float32x4_t v1406 = v363;
    if ((v5 & 0x20) != 0)
    {
      float32x4_t v368 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v299, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v299, 0xCuLL)));
      int32x4_t v369 = (int32x4_t)vmlsq_f32(vmulq_f32(v368, v303), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v303, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v303, 0xCuLL))), v299);
      int32x4_t v370 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v369, 0xCuLL);
      float32x4_t v371 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v300, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v300, 0xCuLL)));
      float32x4_t v372 = vmlsq_f32(vmulq_f32(v371, v305), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v305, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v305, 0xCuLL))), v300);
      int32x4_t v373 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v372, 0xCuLL);
      float32x4_t v374 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v301, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v301, 0xCuLL)));
      int32x4_t v375 = (int32x4_t)vmlsq_f32(vmulq_f32(v374, v306), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v306, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v306, 0xCuLL))), v301);
      int32x4_t v376 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v375, 0xCuLL);
      float32x4_t v377 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v302, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v302, 0xCuLL)));
      int32x4_t v378 = (int32x4_t)vmlsq_f32(vmulq_f32(v377, v307), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v307, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v307, 0xCuLL))), v302);
      int32x4_t v379 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v378, 0xCuLL);
      int32x4_t v380 = (int32x4_t)vmlsq_f32(vmulq_f32(v368, (float32x4_t)vrev64q_s32(vuzp1q_s32(v369, v370))), (float32x4_t)vextq_s8((int8x16_t)v370, (int8x16_t)vrev64q_s32(v370), 8uLL), v299);
      int32x4_t v381 = (int32x4_t)vmlsq_f32(vmulq_f32(v371, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v372, v373))), (float32x4_t)vextq_s8((int8x16_t)v373, (int8x16_t)vrev64q_s32(v373), 8uLL), v300);
      int32x4_t v382 = (int32x4_t)vmlsq_f32(vmulq_f32(v374, (float32x4_t)vrev64q_s32(vuzp1q_s32(v375, v376))), (float32x4_t)vextq_s8((int8x16_t)v376, (int8x16_t)vrev64q_s32(v376), 8uLL), v301);
      int32x4_t v383 = (int32x4_t)vmlsq_f32(vmulq_f32(v377, (float32x4_t)vrev64q_s32(vuzp1q_s32(v378, v379))), (float32x4_t)vextq_s8((int8x16_t)v379, (int8x16_t)vrev64q_s32(v379), 8uLL), v302);
      v372.i64[0] = 0x4000000040000000;
      v372.i64[1] = 0x4000000040000000;
      float32x4_t v384 = vmlaq_f32(v303, v372, (float32x4_t)vrev64q_s32(vuzp1q_s32(v380, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v380, 0xCuLL))));
      float32x4_t v385 = vmlaq_f32(v305, v372, (float32x4_t)vrev64q_s32(vuzp1q_s32(v381, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v381, 0xCuLL))));
      float32x4_t v386 = vmlaq_f32(v306, v372, (float32x4_t)vrev64q_s32(vuzp1q_s32(v382, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v382, 0xCuLL))));
      float32x4_t v387 = vmlaq_f32(v307, v372, (float32x4_t)vrev64q_s32(vuzp1q_s32(v383, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v383, 0xCuLL))));
      if ((v5 & 8) != 0)
      {
        float32x4_t v389 = vmulq_f32(v1552, v1552);
        int32x4_t v390 = (int32x4_t)vmulq_f32(v1548, v1548);
        float32x4_t v391 = vmulq_f32(v1550, v1550);
        float32x4_t v392 = vmulq_f32(v24, v24);
        v393.i64[0] = vzip1q_s32((int32x4_t)v389, v390).u64[0];
        v393.i64[1] = __PAIR64__(v392.u32[0], v391.u32[0]);
        v394.i64[0] = vtrn2q_s32((int32x4_t)v389, v390).u64[0];
        v394.i64[1] = __PAIR64__(v392.u32[1], v391.u32[1]);
        v389.i64[0] = vzip2q_s32((int32x4_t)v389, v390).u64[0];
        v389.i64[1] = __PAIR64__(v392.u32[2], v391.u32[2]);
        __asm { FMOV            V7.4S, #1.0 }
        float32x4_t v396 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v389, vaddq_f32(v393, v394))));
        float32x4_t v397 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1552), v396.f32[0]), v384);
        int32x4_t v398 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v396.f32, 1), v385);
        float32x4_t v399 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1550), v396, 2), v386);
        float32x4_t v400 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v24), v396, 3), v387);
        v391.i64[0] = vzip1q_s32((int32x4_t)v397, v398).u64[0];
        v391.i64[1] = __PAIR64__(v400.u32[0], v399.u32[0]);
        v392.i64[0] = vtrn2q_s32((int32x4_t)v397, v398).u64[0];
        v392.i64[1] = __PAIR64__(v400.u32[1], v399.u32[1]);
        v397.i64[0] = vzip2q_s32((int32x4_t)v397, v398).u64[0];
        v397.i64[1] = __PAIR64__(v400.u32[2], v399.u32[2]);
        float32x4_t v388 = vaddq_f32(v397, vaddq_f32(v391, v392));
      }
      else
      {
        v388.i64[0] = vzip2q_s32((int32x4_t)v384, (int32x4_t)v385).u64[0];
        v388.i64[1] = __PAIR64__(v387.u32[2], v386.u32[2]);
      }
      float32x4_t v363 = v1406;
      float32x4_t v362 = v1414;
      float v9 = 1.0;
    }
    else
    {
      if (v1285)
      {
        if ((v5 & 8) != 0)
        {
          float32x4_t v561 = vmulq_f32(v1552, v1552);
          int32x4_t v562 = (int32x4_t)vmulq_f32(v1548, v1548);
          float32x4_t v563 = vmulq_f32(v1550, v1550);
          v564.i64[0] = vzip1q_s32((int32x4_t)v561, v562).u64[0];
          v564.i32[2] = v563.i32[0];
          float32x4_t v565 = vmulq_f32(v24, v24);
          v564.i32[3] = v565.i32[0];
          v566.i64[0] = vtrn2q_s32((int32x4_t)v561, v562).u64[0];
          v566.i64[1] = __PAIR64__(v565.u32[1], v563.u32[1]);
          v561.i64[0] = vzip2q_s32((int32x4_t)v561, v562).u64[0];
          v561.i64[1] = __PAIR64__(v565.u32[2], v563.u32[2]);
          __asm { FMOV            V16.4S, #1.0 }
          float32x4_t v568 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v561, vaddq_f32(v564, v566))));
          float32x4_t v364 = vmulq_n_f32(vnegq_f32(v1552), v568.f32[0]);
          float32x4_t v365 = vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v568.f32, 1);
          float32x4_t v366 = vmulq_laneq_f32(vnegq_f32(v1550), v568, 2);
          float32x4_t v367 = vmulq_laneq_f32(vnegq_f32(v24), v568, 3);
        }
        else
        {
          float32x4_t v364 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v365 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v366 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v367 = (float32x4_t)xmmword_227DC2100;
        }
        float32x4_t v569 = vaddq_f32(v303, v364);
        float32x4_t v570 = vaddq_f32(v305, v365);
        float32x4_t v571 = vaddq_f32(v306, v366);
        float32x4_t v572 = vaddq_f32(v307, v367);
        float32x4_t v573 = vmulq_f32(v569, v569);
        int32x4_t v574 = (int32x4_t)vmulq_f32(v570, v570);
        float32x4_t v575 = vmulq_f32(v571, v571);
        v576.i64[0] = vzip1q_s32((int32x4_t)v573, v574).u64[0];
        v576.i32[2] = v575.i32[0];
        float32x4_t v577 = vmulq_f32(v572, v572);
        v576.i32[3] = v577.i32[0];
        v578.i64[0] = vtrn2q_s32((int32x4_t)v573, v574).u64[0];
        v578.i64[1] = __PAIR64__(v577.u32[1], v575.u32[1]);
        v573.i64[0] = vzip2q_s32((int32x4_t)v573, v574).u64[0];
        v573.i64[1] = __PAIR64__(v577.u32[2], v575.u32[2]);
        __asm { FMOV            V17.4S, #1.0 }
        float32x4_t v580 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v573, vaddq_f32(v576, v578))));
        float32x4_t v401 = vmulq_n_f32(v569, v580.f32[0]);
        float32x4_t v402 = vmulq_lane_f32(v570, *(float32x2_t *)v580.f32, 1);
        float32x4_t v403 = vmulq_laneq_f32(v571, v580, 2);
        float32x4_t v404 = vmulq_laneq_f32(v572, v580, 3);
      }
      else
      {
        float32x4_t v401 = *(float32x4_t *)(v4 + 12992);
        float32x4_t v402 = v401;
        float32x4_t v403 = v401;
        float32x4_t v404 = v401;
      }
      float32x4_t v581 = vmulq_f32(v299, v401);
      int32x4_t v582 = (int32x4_t)vmulq_f32(v300, v402);
      float32x4_t v583 = vmulq_f32(v301, v403);
      float32x4_t v584 = vmulq_f32(v302, v404);
      v585.i64[0] = vzip1q_s32((int32x4_t)v581, v582).u64[0];
      v585.i64[1] = __PAIR64__(v584.u32[0], v583.u32[0]);
      v586.i64[0] = vtrn2q_s32((int32x4_t)v581, v582).u64[0];
      v586.i64[1] = __PAIR64__(v584.u32[1], v583.u32[1]);
      v581.i64[0] = vzip2q_s32((int32x4_t)v581, v582).u64[0];
      v581.i64[1] = __PAIR64__(v584.u32[2], v583.u32[2]);
      float32x4_t v388 = vaddq_f32(v581, vaddq_f32(v585, v586));
    }
    if (v354.f32[0] <= 0.0) {
      float v587 = 0.0;
    }
    else {
      float v587 = v388.f32[0];
    }
    if (v354.f32[1] <= 0.0) {
      float v588 = 0.0;
    }
    else {
      float v588 = v388.f32[1];
    }
    if (v354.f32[2] <= 0.0) {
      float v589 = 0.0;
    }
    else {
      float v589 = v388.f32[2];
    }
    if (v354.f32[3] <= 0.0) {
      float v590 = 0.0;
    }
    else {
      float v590 = v388.f32[3];
    }
    if (v587 <= 0.0 && v588 <= 0.0 && v589 <= 0.0 && v590 <= 0.0)
    {
      float32x4_t v591 = v1432;
      float32x4_t v592 = v1423;
      if (!v1449) {
        goto LABEL_308;
      }
LABEL_307:
      float32x4_t v591 = vmulq_n_f32(v591, v304.f32[0]);
      float32x4_t v592 = vmulq_lane_f32(v592, *(float32x2_t *)v304.f32, 1);
      float32x4_t v362 = vmulq_laneq_f32(v362, v304, 2);
      float32x4_t v363 = vmulq_laneq_f32(v363, v304, 3);
      goto LABEL_308;
    }
    float32x4_t v1397 = v304;
    float32x4_t v1490 = v28;
    float32x4_t v1506 = v27;
    float32x4_t v1522 = v26;
    float32x4_t v1538 = v25;
    float32x4_t v1458 = v8;
    float v654 = fmaxf(v588, 0.0);
    float v655 = fmaxf(v589, 0.0);
    float v656 = v17[4].f32[0];
    float v657 = fmaxf(v590, 0.0);
    float v658 = v18[4].f32[0];
    float v659 = v19[4].f32[0];
    float v660 = v19;
    LODWORD(v1383) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(fmaxf(v587, 0.0), v1547[4].f32[0]));
    LODWORD(v1369) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v654, v656));
    LODWORD(v1355) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v655, v658));
    a1 = (*(uint64_t (**)(float, float))(v4 + 560))(v657, v659);
    if ((v6 & 0x800) != 0)
    {
      float32x4_t v696 = *(float32x4_t *)(v4 + 12896);
      float32x4_t v662 = vmulq_f32(v696, v11[13]);
      float32x4_t v663 = vmulq_f32(v696, v12[13]);
      float32x4_t v664 = vmulq_f32(v696, v13[13]);
      float32x4_t v665 = vmulq_f32(v696, v14[13]);
    }
    else
    {
      float32x4_t v662 = v1547[13];
      float32x4_t v663 = v17[13];
      float32x4_t v664 = v18[13];
      float32x4_t v665 = v660[13];
    }
    float v19 = v660;
    float32x4_t v304 = v1397;
    float32x4_t v363 = v1406;
    float32x4_t v591 = v1432;
    float32x4_t v362 = v1414;
    float32x4_t v592 = v1423;
    float32x4_t v697 = vmulq_n_f32(v662, v1383);
    float32x4_t v698 = vmulq_n_f32(v663, v1369);
    float32x4_t v699 = vmulq_n_f32(v664, v1355);
    float32x4_t v700 = vmulq_n_f32(v665, v661);
    LOWORD(v5) = v1429;
    unint64_t v8 = v1458;
    float32x4_t v26 = v1522;
    float32x4_t v25 = v1538;
    float32x4_t v28 = v1490;
    float32x4_t v27 = v1506;
    float32x4_t v24 = v1479;
    if ((v1429 & 0x10) != 0)
    {
      if (v1449)
      {
        float32x4_t v697 = vmulq_n_f32(v697, v1397.f32[0]);
        float32x4_t v698 = vmulq_lane_f32(v698, *(float32x2_t *)v1397.f32, 1);
        float32x4_t v699 = vmulq_laneq_f32(v699, v1397, 2);
        float32x4_t v700 = vmulq_laneq_f32(v700, v1397, 3);
      }
      float32x4_t v1474 = vaddq_f32(v1474, v698);
      float32x4_t v1477 = vaddq_f32(v1477, v697);
      float32x4_t v1469 = vaddq_f32(v1469, v700);
      float32x4_t v1471 = vaddq_f32(v1471, v699);
      if (v1449) {
        goto LABEL_307;
      }
    }
    else
    {
      float32x4_t v591 = vaddq_f32(v1432, v697);
      float32x4_t v592 = vaddq_f32(v1423, v698);
      float32x4_t v362 = vaddq_f32(v1414, v699);
      float32x4_t v363 = vaddq_f32(v1406, v700);
      if (v1449) {
        goto LABEL_307;
      }
    }
LABEL_308:
    float32x4_t v25 = vaddq_f32(v25, v591);
    float32x4_t v26 = vaddq_f32(v26, v592);
    float32x4_t v27 = vaddq_f32(v27, v362);
    float32x4_t v28 = vaddq_f32(v28, v363);
    if ((v6 & 8) == 0) {
      goto LABEL_309;
    }
LABEL_232:
    float32x4_t v437 = v11[7];
    float32x4_t v438 = v12[7];
    float32x4_t v439 = v13[7];
    float32x4_t v440 = v14[7];
    if ((v5 & 2) != 0)
    {
      float32x4_t v437 = vnegq_f32(v437);
      float32x4_t v438 = vnegq_f32(v438);
      float32x4_t v439 = vnegq_f32(v439);
      float32x4_t v440 = vnegq_f32(v440);
    }
    float32x4_t v441 = *(float32x4_t *)(v4 + 13120);
    float32x4_t v442 = 0uLL;
    if ((v5 & 0x800) != 0)
    {
      float32x4_t v463 = vsubq_f32(v441, v1552);
      float32x4_t v464 = vsubq_f32(v441, v1548);
      float32x4_t v465 = vsubq_f32(v441, v1550);
      float32x4_t v466 = vsubq_f32(v441, v24);
      float32x4_t v467 = vmulq_f32(v463, v463);
      int32x4_t v468 = (int32x4_t)vmulq_f32(v464, v464);
      float32x4_t v469 = vmulq_f32(v465, v465);
      v470.i64[0] = vzip1q_s32((int32x4_t)v467, v468).u64[0];
      v470.i32[2] = v469.i32[0];
      float32x4_t v471 = vmulq_f32(v466, v466);
      v470.i32[3] = v471.i32[0];
      v472.i64[0] = vtrn2q_s32((int32x4_t)v467, v468).u64[0];
      v472.i64[1] = __PAIR64__(v471.u32[1], v469.u32[1]);
      v467.i64[0] = vzip2q_s32((int32x4_t)v467, v468).u64[0];
      v467.i64[1] = __PAIR64__(v471.u32[2], v469.u32[2]);
      float32x4_t v473 = vsqrtq_f32(vaddq_f32(v467, vaddq_f32(v470, v472)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v475 = vdivq_f32(_Q0, v473);
      float32x4_t v441 = vmulq_n_f32(v463, v475.f32[0]);
      float32x4_t v443 = vmulq_lane_f32(v464, *(float32x2_t *)v475.f32, 1);
      float32x4_t v444 = vmulq_laneq_f32(v465, v475, 2);
      float32x4_t v445 = vmulq_laneq_f32(v466, v475, 3);
      if ((v6 & 0x8000000) != 0)
      {
        float32x4_t v480 = vdivq_f32(_Q0, v475);
        float32x4_t v481 = v1297;
        float32x4_t v482 = vld1q_dup_f32(v481);
        float32x4_t v483 = v1296;
        float32x4_t v484 = vld1q_dup_f32(v483);
        float32x4_t v442 = vdivq_f32(_Q0, vmlaq_f32(v482, vmlaq_n_f32(v484, v480, *(float *)(v4 + 13112)), v480));
        if ((v6 & 0x80000) == 0)
        {
LABEL_241:
          if (!v1448) {
            goto LABEL_246;
          }
          goto LABEL_242;
        }
      }
      else if ((v6 & 0x80000) == 0)
      {
        goto LABEL_241;
      }
    }
    else
    {
      float32x4_t v443 = *(float32x4_t *)(v4 + 13120);
      float32x4_t v444 = v443;
      float32x4_t v445 = v443;
      if ((v6 & 0x80000) == 0) {
        goto LABEL_241;
      }
    }
    float32x4_t v446 = vnegq_f32(*(float32x4_t *)(v4 + 13136));
    float32x4_t v447 = vmulq_f32(v441, v446);
    int32x4_t v448 = (int32x4_t)vmulq_f32(v443, v446);
    float32x4_t v449 = vmulq_f32(v444, v446);
    float32x4_t v450 = vmulq_f32(v445, v446);
    v451.i64[0] = vzip1q_s32((int32x4_t)v447, v448).u64[0];
    v451.i64[1] = __PAIR64__(v450.u32[0], v449.u32[0]);
    v452.i64[0] = vtrn2q_s32((int32x4_t)v447, v448).u64[0];
    v452.i64[1] = __PAIR64__(v450.u32[1], v449.u32[1]);
    v447.i64[0] = vzip2q_s32((int32x4_t)v447, v448).u64[0];
    v447.i64[1] = __PAIR64__(v450.u32[2], v449.u32[2]);
    float32x4_t v453 = vaddq_f32(v447, vaddq_f32(v451, v452));
    uint64_t v454 = v1308;
    float32x4_t v455 = vld1q_dup_f32(v454);
    int32x4_t v456 = vcgeq_f32(v453, v455);
    int32x4_t v457 = (int32x4_t)vmvnq_s8((int8x16_t)v456);
    *(int16x4_t *)v457.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v457), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v457.i8))
    {
      float32x4_t v442 = 0uLL;
      if (!v1448) {
        goto LABEL_246;
      }
    }
    else
    {
      v457.i32[0] = 0;
      int8x16_t v1344 = (int8x16_t)v456;
      float32x4_t v1352 = v443;
      v456.i32[0] = v6 & 0x8000000;
      int8x16_t v458 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v456, v457), 0);
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1336 = (float32x4_t)vbslq_s8(v458, _Q1, (int8x16_t)v442);
      float v460 = *(float *)(v4 + 13116);
      float32x4_t v1519 = v26;
      float32x4_t v1535 = v25;
      float32x4_t v1487 = v28;
      float32x4_t v1503 = v27;
      float32x4_t v1395 = v441;
      float32x4_t v1366 = v444;
      float32x4_t v1380 = v445;
      float32x4_t v1455 = v453;
      unsigned int v1329 = COERCE_UNSIGNED_INT64((*(double (**)(void))(v4 + 560))());
      unsigned int v1322 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1455.f32[1], v460));
      unsigned int v1315 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1455.f32[2], v460));
      *(float *)&unsigned int v461 = (*(float (**)(float, float))(v4 + 560))(v1455.f32[3], v460);
      float32x4_t v443 = v1352;
      float32x4_t v444 = v1366;
      float32x4_t v445 = v1380;
      float32x4_t v441 = v1395;
      float32x4_t v24 = v1479;
      float32x4_t v28 = v1487;
      float32x4_t v27 = v1503;
      float32x4_t v26 = v1519;
      float32x4_t v25 = v1535;
      float v19 = v1481;
      v462.i64[0] = __PAIR64__(v1322, v1329);
      v462.i64[1] = __PAIR64__(v461, v1315);
      float32x4_t v442 = vmulq_f32(v1336, (float32x4_t)vandq_s8(v462, v1344));
      if (!v1448) {
        goto LABEL_246;
      }
    }
LABEL_242:
    if (v442.f32[0] <= 0.0 && v442.f32[1] <= 0.0 && v442.f32[2] <= 0.0 && v442.f32[3] <= 0.0)
    {
LABEL_309:
      if ((v6 & 0x10) == 0) {
        goto LABEL_387;
      }
      goto LABEL_310;
    }
LABEL_246:
    if (v1554)
    {
      if ((v6 & 0x200) != 0)
      {
        float32x4_t v485 = *(float32x4_t *)(v4 + 13024);
        float32x4_t v476 = vmulq_f32(v485, v11[13]);
        float32x4_t v477 = vmulq_f32(v485, v12[13]);
        float32x4_t v478 = vmulq_f32(v485, v13[13]);
        float32x4_t v479 = vmulq_f32(v485, v14[13]);
      }
      else
      {
        float32x4_t v476 = v1547[14];
        float32x4_t v477 = v17[14];
        float32x4_t v478 = v18[14];
        float32x4_t v479 = v19[14];
      }
    }
    else
    {
      float32x4_t v479 = 0uLL;
      float32x4_t v478 = 0uLL;
      float32x4_t v477 = 0uLL;
      float32x4_t v476 = 0uLL;
    }
    float32x4_t v486 = vmulq_f32(v437, v441);
    int32x4_t v487 = (int32x4_t)vmulq_f32(v438, v443);
    float32x4_t v488 = vmulq_f32(v439, v444);
    float32x4_t v489 = vmulq_f32(v440, v445);
    v490.i64[0] = vzip1q_s32((int32x4_t)v486, v487).u64[0];
    v490.i64[1] = __PAIR64__(v489.u32[0], v488.u32[0]);
    v491.i64[0] = vtrn2q_s32((int32x4_t)v486, v487).u64[0];
    v491.i64[1] = __PAIR64__(v489.u32[1], v488.u32[1]);
    v486.i64[0] = vzip2q_s32((int32x4_t)v486, v487).u64[0];
    v486.i64[1] = __PAIR64__(v489.u32[2], v488.u32[2]);
    float32x4_t v492 = vaddq_f32(v486, vaddq_f32(v490, v491));
    if (v492.f32[0] > 0.0 || v492.f32[1] > 0.0 || v492.f32[2] > 0.0 || v492.f32[3] > 0.0)
    {
      float32x4_t v493 = v445;
      if ((v6 & 0x400) != 0)
      {
        float32x4_t v510 = *(float32x4_t *)(v4 + 13040);
        float32x4_t v494 = vmulq_f32(v510, v11[13]);
        float32x4_t v495 = vmulq_f32(v510, v12[13]);
        float32x4_t v496 = vmulq_f32(v510, v13[13]);
        float32x4_t v497 = vmulq_f32(v510, v14[13]);
      }
      else
      {
        float32x4_t v494 = v1547[15];
        float32x4_t v495 = v17[15];
        float32x4_t v496 = v18[15];
        float32x4_t v497 = v19[15];
      }
      float32x4_t v511 = vmulq_n_f32(v494, fmaxf(v492.f32[0], 0.0));
      float32x4_t v512 = vmulq_n_f32(v495, fmaxf(v492.f32[1], 0.0));
      float32x4_t v513 = vmulq_n_f32(v496, fmaxf(v492.f32[2], 0.0));
      float32x4_t v514 = vmulq_n_f32(v497, fmaxf(v492.f32[3], 0.0));
      if (v1554)
      {
        float32x4_t v511 = vaddq_f32(v476, v511);
        float32x4_t v512 = vaddq_f32(v477, v512);
        float32x4_t v513 = vaddq_f32(v478, v513);
        float32x4_t v514 = vaddq_f32(v479, v514);
      }
      float32x4_t v1433 = v511;
      float32x4_t v1415 = v513;
      float32x4_t v1424 = v512;
      float32x4_t v1407 = v514;
      if ((v5 & 0x20) != 0)
      {
        float32x4_t v519 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v437, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v437, 0xCuLL)));
        int32x4_t v520 = (int32x4_t)vmlsq_f32(vmulq_f32(v519, v441), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v441, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v441, 0xCuLL))), v437);
        int32x4_t v521 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v520, 0xCuLL);
        float32x4_t v522 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v438, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v438, 0xCuLL)));
        float32x4_t v523 = vmlsq_f32(vmulq_f32(v522, v443), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v443, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v443, 0xCuLL))), v438);
        int32x4_t v524 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v523, 0xCuLL);
        float32x4_t v525 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v439, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v439, 0xCuLL)));
        int32x4_t v526 = (int32x4_t)vmlsq_f32(vmulq_f32(v525, v444), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v444, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v444, 0xCuLL))), v439);
        int32x4_t v527 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v526, 0xCuLL);
        float32x4_t v528 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v440, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v440, 0xCuLL)));
        int32x4_t v529 = (int32x4_t)vmlsq_f32(vmulq_f32(v528, v493), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v493, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v493, 0xCuLL))), v440);
        int32x4_t v530 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v529, 0xCuLL);
        int32x4_t v531 = (int32x4_t)vmlsq_f32(vmulq_f32(v519, (float32x4_t)vrev64q_s32(vuzp1q_s32(v520, v521))), (float32x4_t)vextq_s8((int8x16_t)v521, (int8x16_t)vrev64q_s32(v521), 8uLL), v437);
        int32x4_t v532 = (int32x4_t)vmlsq_f32(vmulq_f32(v522, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v523, v524))), (float32x4_t)vextq_s8((int8x16_t)v524, (int8x16_t)vrev64q_s32(v524), 8uLL), v438);
        int32x4_t v533 = (int32x4_t)vmlsq_f32(vmulq_f32(v525, (float32x4_t)vrev64q_s32(vuzp1q_s32(v526, v527))), (float32x4_t)vextq_s8((int8x16_t)v527, (int8x16_t)vrev64q_s32(v527), 8uLL), v439);
        int32x4_t v534 = (int32x4_t)vmlsq_f32(vmulq_f32(v528, (float32x4_t)vrev64q_s32(vuzp1q_s32(v529, v530))), (float32x4_t)vextq_s8((int8x16_t)v530, (int8x16_t)vrev64q_s32(v530), 8uLL), v440);
        v523.i64[0] = 0x4000000040000000;
        v523.i64[1] = 0x4000000040000000;
        float32x4_t v535 = vmlaq_f32(v441, v523, (float32x4_t)vrev64q_s32(vuzp1q_s32(v531, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v531, 0xCuLL))));
        float32x4_t v536 = vmlaq_f32(v443, v523, (float32x4_t)vrev64q_s32(vuzp1q_s32(v532, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v532, 0xCuLL))));
        float32x4_t v537 = vmlaq_f32(v444, v523, (float32x4_t)vrev64q_s32(vuzp1q_s32(v533, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v533, 0xCuLL))));
        float32x4_t v538 = vmlaq_f32(v493, v523, (float32x4_t)vrev64q_s32(vuzp1q_s32(v534, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v534, 0xCuLL))));
        if ((v5 & 8) != 0)
        {
          float32x4_t v545 = vmulq_f32(v1552, v1552);
          int32x4_t v546 = (int32x4_t)vmulq_f32(v1548, v1548);
          float32x4_t v547 = vmulq_f32(v1550, v1550);
          float32x4_t v24 = v1479;
          float32x4_t v548 = vmulq_f32(v24, v24);
          v549.i64[0] = vzip1q_s32((int32x4_t)v545, v546).u64[0];
          v549.i64[1] = __PAIR64__(v548.u32[0], v547.u32[0]);
          v550.i64[0] = vtrn2q_s32((int32x4_t)v545, v546).u64[0];
          v550.i64[1] = __PAIR64__(v548.u32[1], v547.u32[1]);
          v545.i64[0] = vzip2q_s32((int32x4_t)v545, v546).u64[0];
          v545.i64[1] = __PAIR64__(v548.u32[2], v547.u32[2]);
          __asm { FMOV            V7.4S, #1.0 }
          float32x4_t v552 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v545, vaddq_f32(v549, v550))));
          float32x4_t v553 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1552), v552.f32[0]), v535);
          int32x4_t v554 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v552.f32, 1), v536);
          float32x4_t v555 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1550), v552, 2), v537);
          float32x4_t v556 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1479), v552, 3), v538);
          v547.i64[0] = vzip1q_s32((int32x4_t)v553, v554).u64[0];
          v547.i64[1] = __PAIR64__(v556.u32[0], v555.u32[0]);
          v548.i64[0] = vtrn2q_s32((int32x4_t)v553, v554).u64[0];
          v548.i64[1] = __PAIR64__(v556.u32[1], v555.u32[1]);
          v553.i64[0] = vzip2q_s32((int32x4_t)v553, v554).u64[0];
          v553.i64[1] = __PAIR64__(v556.u32[2], v555.u32[2]);
          float32x4_t v539 = vaddq_f32(v553, vaddq_f32(v547, v548));
          float32x4_t v514 = v1407;
          float32x4_t v513 = v1415;
          float v9 = 1.0;
        }
        else
        {
          v539.i64[0] = vzip2q_s32((int32x4_t)v535, (int32x4_t)v536).u64[0];
          v539.i64[1] = __PAIR64__(v538.u32[2], v537.u32[2]);
          float32x4_t v514 = v1407;
          float32x4_t v513 = v1415;
          float v9 = 1.0;
          float32x4_t v24 = v1479;
        }
      }
      else
      {
        if (v1284)
        {
          if ((v5 & 8) != 0)
          {
            float32x4_t v717 = vmulq_f32(v1552, v1552);
            int32x4_t v718 = (int32x4_t)vmulq_f32(v1548, v1548);
            float32x4_t v719 = vmulq_f32(v1550, v1550);
            v720.i64[0] = vzip1q_s32((int32x4_t)v717, v718).u64[0];
            v720.i32[2] = v719.i32[0];
            float32x4_t v721 = vmulq_f32(v1479, v1479);
            v720.i32[3] = v721.i32[0];
            v722.i64[0] = vtrn2q_s32((int32x4_t)v717, v718).u64[0];
            v722.i64[1] = __PAIR64__(v721.u32[1], v719.u32[1]);
            v717.i64[0] = vzip2q_s32((int32x4_t)v717, v718).u64[0];
            v717.i64[1] = __PAIR64__(v721.u32[2], v719.u32[2]);
            __asm { FMOV            V16.4S, #1.0 }
            float32x4_t v724 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v717, vaddq_f32(v720, v722))));
            float32x4_t v515 = vmulq_n_f32(vnegq_f32(v1552), v724.f32[0]);
            float32x4_t v516 = vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v724.f32, 1);
            float32x4_t v517 = vmulq_laneq_f32(vnegq_f32(v1550), v724, 2);
            float32x4_t v518 = vmulq_laneq_f32(vnegq_f32(v1479), v724, 3);
          }
          else
          {
            float32x4_t v515 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v516 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v517 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v518 = (float32x4_t)xmmword_227DC2100;
          }
          float32x4_t v725 = vaddq_f32(v441, v515);
          float32x4_t v726 = vaddq_f32(v443, v516);
          float32x4_t v727 = vaddq_f32(v444, v517);
          float32x4_t v728 = vaddq_f32(v493, v518);
          float32x4_t v729 = vmulq_f32(v725, v725);
          int32x4_t v730 = (int32x4_t)vmulq_f32(v726, v726);
          float32x4_t v731 = vmulq_f32(v727, v727);
          v732.i64[0] = vzip1q_s32((int32x4_t)v729, v730).u64[0];
          v732.i32[2] = v731.i32[0];
          float32x4_t v733 = vmulq_f32(v728, v728);
          v732.i32[3] = v733.i32[0];
          v734.i64[0] = vtrn2q_s32((int32x4_t)v729, v730).u64[0];
          v734.i64[1] = __PAIR64__(v733.u32[1], v731.u32[1]);
          v729.i64[0] = vzip2q_s32((int32x4_t)v729, v730).u64[0];
          v729.i64[1] = __PAIR64__(v733.u32[2], v731.u32[2]);
          __asm { FMOV            V17.4S, #1.0 }
          float32x4_t v736 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v729, vaddq_f32(v732, v734))));
          float32x4_t v557 = vmulq_n_f32(v725, v736.f32[0]);
          float32x4_t v558 = vmulq_lane_f32(v726, *(float32x2_t *)v736.f32, 1);
          float32x4_t v559 = vmulq_laneq_f32(v727, v736, 2);
          float32x4_t v560 = vmulq_laneq_f32(v728, v736, 3);
        }
        else
        {
          float32x4_t v557 = *(float32x4_t *)(v4 + 13152);
          float32x4_t v558 = v557;
          float32x4_t v559 = v557;
          float32x4_t v560 = v557;
        }
        float32x4_t v24 = v1479;
        float32x4_t v737 = vmulq_f32(v437, v557);
        int32x4_t v738 = (int32x4_t)vmulq_f32(v438, v558);
        float32x4_t v739 = vmulq_f32(v439, v559);
        float32x4_t v740 = vmulq_f32(v440, v560);
        v741.i64[0] = vzip1q_s32((int32x4_t)v737, v738).u64[0];
        v741.i64[1] = __PAIR64__(v740.u32[0], v739.u32[0]);
        v742.i64[0] = vtrn2q_s32((int32x4_t)v737, v738).u64[0];
        v742.i64[1] = __PAIR64__(v740.u32[1], v739.u32[1]);
        v737.i64[0] = vzip2q_s32((int32x4_t)v737, v738).u64[0];
        v737.i64[1] = __PAIR64__(v740.u32[2], v739.u32[2]);
        float32x4_t v539 = vaddq_f32(v737, vaddq_f32(v741, v742));
      }
      if (v492.f32[0] <= 0.0) {
        float v743 = 0.0;
      }
      else {
        float v743 = v539.f32[0];
      }
      if (v492.f32[1] <= 0.0) {
        float v744 = 0.0;
      }
      else {
        float v744 = v539.f32[1];
      }
      if (v492.f32[2] <= 0.0) {
        float v745 = 0.0;
      }
      else {
        float v745 = v539.f32[2];
      }
      if (v492.f32[3] <= 0.0) {
        float v746 = 0.0;
      }
      else {
        float v746 = v539.f32[3];
      }
      if (v743 <= 0.0 && v744 <= 0.0 && v745 <= 0.0 && v746 <= 0.0)
      {
        float32x4_t v747 = v1433;
        float32x4_t v748 = v1424;
        if (!v1448) {
          goto LABEL_386;
        }
        goto LABEL_385;
      }
      float32x4_t v1399 = v442;
      float32x4_t v1492 = v28;
      float32x4_t v1508 = v27;
      float32x4_t v1524 = v26;
      float32x4_t v1540 = v25;
      float32x4_t v1460 = v8;
      float v809 = fmaxf(v744, 0.0);
      float v810 = fmaxf(v745, 0.0);
      float v811 = v17[4].f32[0];
      float v812 = fmaxf(v746, 0.0);
      float v813 = v18[4].f32[0];
      float v814 = v19[4].f32[0];
      float v815 = v19;
      LODWORD(v1385) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(fmaxf(v743, 0.0), v1547[4].f32[0]));
      LODWORD(v1371) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v809, v811));
      LODWORD(v1357) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v810, v813));
      a1 = (*(uint64_t (**)(float, float))(v4 + 560))(v812, v814);
      if ((v6 & 0x800) != 0)
      {
        float32x4_t v851 = *(float32x4_t *)(v4 + 13056);
        float32x4_t v817 = vmulq_f32(v851, v11[13]);
        float32x4_t v818 = vmulq_f32(v851, v12[13]);
        float32x4_t v819 = vmulq_f32(v851, v13[13]);
        float32x4_t v820 = vmulq_f32(v851, v14[13]);
      }
      else
      {
        float32x4_t v817 = v1547[16];
        float32x4_t v818 = v17[16];
        float32x4_t v819 = v18[16];
        float32x4_t v820 = v815[16];
      }
      float v19 = v815;
      float32x4_t v442 = v1399;
      float32x4_t v514 = v1407;
      float32x4_t v747 = v1433;
      float32x4_t v513 = v1415;
      float32x4_t v748 = v1424;
      float32x4_t v852 = vmulq_n_f32(v817, v1385);
      float32x4_t v853 = vmulq_n_f32(v818, v1371);
      float32x4_t v854 = vmulq_n_f32(v819, v1357);
      float32x4_t v855 = vmulq_n_f32(v820, v816);
      LOWORD(v5) = v1429;
      unint64_t v8 = v1460;
      float32x4_t v26 = v1524;
      float32x4_t v25 = v1540;
      float32x4_t v28 = v1492;
      float32x4_t v27 = v1508;
      float32x4_t v24 = v1479;
      if ((v1429 & 0x10) != 0)
      {
        if (v1448)
        {
          float32x4_t v852 = vmulq_n_f32(v852, v1399.f32[0]);
          float32x4_t v853 = vmulq_lane_f32(v853, *(float32x2_t *)v1399.f32, 1);
          float32x4_t v854 = vmulq_laneq_f32(v854, v1399, 2);
          float32x4_t v855 = vmulq_laneq_f32(v855, v1399, 3);
        }
        float32x4_t v1474 = vaddq_f32(v1474, v853);
        float32x4_t v1477 = vaddq_f32(v1477, v852);
        float32x4_t v1469 = vaddq_f32(v1469, v855);
        float32x4_t v1471 = vaddq_f32(v1471, v854);
        if (!v1448)
        {
LABEL_386:
          float32x4_t v25 = vaddq_f32(v25, v747);
          float32x4_t v26 = vaddq_f32(v26, v748);
          float32x4_t v27 = vaddq_f32(v27, v513);
          float32x4_t v28 = vaddq_f32(v28, v514);
          if ((v6 & 0x10) == 0) {
            goto LABEL_387;
          }
          goto LABEL_310;
        }
      }
      else
      {
        float32x4_t v747 = vaddq_f32(v1433, v852);
        float32x4_t v748 = vaddq_f32(v1424, v853);
        float32x4_t v513 = vaddq_f32(v1415, v854);
        float32x4_t v514 = vaddq_f32(v1407, v855);
        if (!v1448) {
          goto LABEL_386;
        }
      }
LABEL_385:
      float32x4_t v747 = vmulq_n_f32(v747, v442.f32[0]);
      float32x4_t v748 = vmulq_lane_f32(v748, *(float32x2_t *)v442.f32, 1);
      float32x4_t v513 = vmulq_laneq_f32(v513, v442, 2);
      float32x4_t v514 = vmulq_laneq_f32(v514, v442, 3);
      goto LABEL_386;
    }
    if (!v1554) {
      goto LABEL_309;
    }
    if (v1448)
    {
      float32x4_t v476 = vmulq_n_f32(v476, v442.f32[0]);
      float32x4_t v477 = vmulq_lane_f32(v477, *(float32x2_t *)v442.f32, 1);
      float32x4_t v478 = vmulq_laneq_f32(v478, v442, 2);
      float32x4_t v479 = vmulq_laneq_f32(v479, v442, 3);
    }
    float32x4_t v25 = vaddq_f32(v25, v476);
    float32x4_t v26 = vaddq_f32(v26, v477);
    float32x4_t v27 = vaddq_f32(v27, v478);
    float32x4_t v28 = vaddq_f32(v28, v479);
    if ((v6 & 0x10) == 0) {
      goto LABEL_387;
    }
LABEL_310:
    float32x4_t v593 = v11[7];
    float32x4_t v594 = v12[7];
    float32x4_t v595 = v13[7];
    float32x4_t v596 = v14[7];
    if ((v5 & 2) != 0)
    {
      float32x4_t v593 = vnegq_f32(v593);
      float32x4_t v594 = vnegq_f32(v594);
      float32x4_t v595 = vnegq_f32(v595);
      float32x4_t v596 = vnegq_f32(v596);
    }
    float32x4_t v597 = *(float32x4_t *)(v4 + 13280);
    float32x4_t v598 = 0uLL;
    if ((v5 & 0x1000) != 0)
    {
      float32x4_t v619 = vsubq_f32(v597, v1552);
      float32x4_t v620 = vsubq_f32(v597, v1548);
      float32x4_t v621 = vsubq_f32(v597, v1550);
      float32x4_t v622 = vsubq_f32(v597, v24);
      float32x4_t v623 = vmulq_f32(v619, v619);
      int32x4_t v624 = (int32x4_t)vmulq_f32(v620, v620);
      float32x4_t v625 = vmulq_f32(v621, v621);
      v626.i64[0] = vzip1q_s32((int32x4_t)v623, v624).u64[0];
      v626.i32[2] = v625.i32[0];
      float32x4_t v627 = vmulq_f32(v622, v622);
      v626.i32[3] = v627.i32[0];
      v628.i64[0] = vtrn2q_s32((int32x4_t)v623, v624).u64[0];
      v628.i64[1] = __PAIR64__(v627.u32[1], v625.u32[1]);
      v623.i64[0] = vzip2q_s32((int32x4_t)v623, v624).u64[0];
      v623.i64[1] = __PAIR64__(v627.u32[2], v625.u32[2]);
      float32x4_t v629 = vsqrtq_f32(vaddq_f32(v623, vaddq_f32(v626, v628)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v631 = vdivq_f32(_Q0, v629);
      float32x4_t v597 = vmulq_n_f32(v619, v631.f32[0]);
      float32x4_t v599 = vmulq_lane_f32(v620, *(float32x2_t *)v631.f32, 1);
      float32x4_t v600 = vmulq_laneq_f32(v621, v631, 2);
      float32x4_t v601 = vmulq_laneq_f32(v622, v631, 3);
      if ((v6 & 0x10000000) != 0)
      {
        float32x4_t v636 = vdivq_f32(_Q0, v631);
        float32x4_t v637 = v1299;
        float32x4_t v638 = vld1q_dup_f32(v637);
        float32x4_t v639 = v1298;
        float32x4_t v640 = vld1q_dup_f32(v639);
        float32x4_t v598 = vdivq_f32(_Q0, vmlaq_f32(v638, vmlaq_n_f32(v640, v636, *(float *)(v4 + 13272)), v636));
        if ((v6 & 0x100000) == 0)
        {
LABEL_319:
          if (!v1447) {
            goto LABEL_324;
          }
          goto LABEL_320;
        }
      }
      else if ((v6 & 0x100000) == 0)
      {
        goto LABEL_319;
      }
    }
    else
    {
      float32x4_t v599 = *(float32x4_t *)(v4 + 13280);
      float32x4_t v600 = v599;
      float32x4_t v601 = v599;
      if ((v6 & 0x100000) == 0) {
        goto LABEL_319;
      }
    }
    float32x4_t v602 = vnegq_f32(*(float32x4_t *)(v4 + 13296));
    float32x4_t v603 = vmulq_f32(v597, v602);
    int32x4_t v604 = (int32x4_t)vmulq_f32(v599, v602);
    float32x4_t v605 = vmulq_f32(v600, v602);
    float32x4_t v606 = vmulq_f32(v601, v602);
    v607.i64[0] = vzip1q_s32((int32x4_t)v603, v604).u64[0];
    v607.i64[1] = __PAIR64__(v606.u32[0], v605.u32[0]);
    v608.i64[0] = vtrn2q_s32((int32x4_t)v603, v604).u64[0];
    v608.i64[1] = __PAIR64__(v606.u32[1], v605.u32[1]);
    v603.i64[0] = vzip2q_s32((int32x4_t)v603, v604).u64[0];
    v603.i64[1] = __PAIR64__(v606.u32[2], v605.u32[2]);
    float32x4_t v609 = vaddq_f32(v603, vaddq_f32(v607, v608));
    float v610 = v1309;
    float32x4_t v611 = vld1q_dup_f32(v610);
    int32x4_t v612 = vcgeq_f32(v609, v611);
    int32x4_t v613 = (int32x4_t)vmvnq_s8((int8x16_t)v612);
    *(int16x4_t *)v613.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v613), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v613.i8))
    {
      float32x4_t v598 = 0uLL;
      if (!v1447) {
        goto LABEL_324;
      }
    }
    else
    {
      v613.i32[0] = 0;
      int8x16_t v1345 = (int8x16_t)v612;
      v612.i32[0] = v6 & 0x10000000;
      int8x16_t v614 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v612, v613), 0);
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1337 = (float32x4_t)vbslq_s8(v614, _Q1, (int8x16_t)v598);
      float v616 = *(float *)(v4 + 13276);
      float32x4_t v1521 = v26;
      float32x4_t v1537 = v25;
      float32x4_t v1489 = v28;
      float32x4_t v1505 = v27;
      float32x4_t v1368 = v600;
      float32x4_t v1382 = v597;
      float32x4_t v1434 = v601;
      float32x4_t v1354 = v599;
      float32x4_t v1457 = v609;
      unsigned int v1330 = COERCE_UNSIGNED_INT64((*(double (**)(void))(v4 + 560))());
      unsigned int v1323 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1457.f32[1], v616));
      unsigned int v1316 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1457.f32[2], v616));
      *(float *)&unsigned int v617 = (*(float (**)(float, float))(v4 + 560))(v1457.f32[3], v616);
      float32x4_t v599 = v1354;
      float32x4_t v600 = v1368;
      float32x4_t v601 = v1434;
      float32x4_t v597 = v1382;
      float32x4_t v24 = v1479;
      float32x4_t v28 = v1489;
      float32x4_t v27 = v1505;
      float32x4_t v26 = v1521;
      float32x4_t v25 = v1537;
      float v19 = v1481;
      v618.i64[0] = __PAIR64__(v1323, v1330);
      v618.i64[1] = __PAIR64__(v617, v1316);
      float32x4_t v598 = vmulq_f32(v1337, (float32x4_t)vandq_s8(v618, v1345));
      if (!v1447) {
        goto LABEL_324;
      }
    }
LABEL_320:
    if (v598.f32[0] <= 0.0 && v598.f32[1] <= 0.0 && v598.f32[2] <= 0.0 && v598.f32[3] <= 0.0) {
      goto LABEL_387;
    }
LABEL_324:
    if (v1554)
    {
      if ((v6 & 0x200) != 0)
      {
        float32x4_t v641 = *(float32x4_t *)(v4 + 13184);
        float32x4_t v632 = vmulq_f32(v641, v11[13]);
        float32x4_t v633 = vmulq_f32(v641, v12[13]);
        float32x4_t v634 = vmulq_f32(v641, v13[13]);
        float32x4_t v635 = vmulq_f32(v641, v14[13]);
      }
      else
      {
        float32x4_t v632 = v1547[17];
        float32x4_t v633 = v17[17];
        float32x4_t v634 = v18[17];
        float32x4_t v635 = v19[17];
      }
    }
    else
    {
      float32x4_t v635 = 0uLL;
      float32x4_t v634 = 0uLL;
      float32x4_t v633 = 0uLL;
      float32x4_t v632 = 0uLL;
    }
    float32x4_t v642 = vmulq_f32(v593, v597);
    int32x4_t v643 = (int32x4_t)vmulq_f32(v594, v599);
    float32x4_t v644 = vmulq_f32(v595, v600);
    float32x4_t v645 = vmulq_f32(v596, v601);
    v646.i64[0] = vzip1q_s32((int32x4_t)v642, v643).u64[0];
    v646.i64[1] = __PAIR64__(v645.u32[0], v644.u32[0]);
    v647.i64[0] = vtrn2q_s32((int32x4_t)v642, v643).u64[0];
    v647.i64[1] = __PAIR64__(v645.u32[1], v644.u32[1]);
    v642.i64[0] = vzip2q_s32((int32x4_t)v642, v643).u64[0];
    v642.i64[1] = __PAIR64__(v645.u32[2], v644.u32[2]);
    float32x4_t v648 = vaddq_f32(v642, vaddq_f32(v646, v647));
    if (v648.f32[0] <= 0.0 && v648.f32[1] <= 0.0 && v648.f32[2] <= 0.0 && v648.f32[3] <= 0.0)
    {
      if (v1554)
      {
        if (v1447)
        {
          float32x4_t v632 = vmulq_n_f32(v632, v598.f32[0]);
          float32x4_t v633 = vmulq_lane_f32(v633, *(float32x2_t *)v598.f32, 1);
          float32x4_t v634 = vmulq_laneq_f32(v634, v598, 2);
          float32x4_t v635 = vmulq_laneq_f32(v635, v598, 3);
        }
        float32x4_t v25 = vaddq_f32(v25, v632);
        float32x4_t v26 = vaddq_f32(v26, v633);
        float32x4_t v27 = vaddq_f32(v27, v634);
        float32x4_t v28 = vaddq_f32(v28, v635);
      }
LABEL_387:
      if ((v6 & 0x20) == 0) {
        goto LABEL_466;
      }
      goto LABEL_388;
    }
    float32x4_t v1435 = v601;
    float32x4_t v649 = v599;
    if ((v6 & 0x400) != 0)
    {
      float32x4_t v666 = *(float32x4_t *)(v4 + 13200);
      float32x4_t v650 = vmulq_f32(v666, v11[13]);
      float32x4_t v651 = vmulq_f32(v666, v12[13]);
      float32x4_t v652 = vmulq_f32(v666, v13[13]);
      float32x4_t v653 = vmulq_f32(v666, v14[13]);
    }
    else
    {
      float32x4_t v650 = v1547[18];
      float32x4_t v651 = v17[18];
      float32x4_t v652 = v18[18];
      float32x4_t v653 = v19[18];
    }
    float32x4_t v667 = vmulq_n_f32(v650, fmaxf(v648.f32[0], 0.0));
    float32x4_t v668 = vmulq_n_f32(v651, fmaxf(v648.f32[1], 0.0));
    float32x4_t v669 = vmulq_n_f32(v652, fmaxf(v648.f32[2], 0.0));
    float32x4_t v670 = vmulq_n_f32(v653, fmaxf(v648.f32[3], 0.0));
    if (v1554)
    {
      float32x4_t v667 = vaddq_f32(v632, v667);
      float32x4_t v668 = vaddq_f32(v633, v668);
      float32x4_t v669 = vaddq_f32(v634, v669);
      float32x4_t v670 = vaddq_f32(v635, v670);
    }
    float32x4_t v1416 = v668;
    float32x4_t v1425 = v667;
    float32x4_t v1398 = v670;
    float32x4_t v1408 = v669;
    if ((v5 & 0x20) != 0)
    {
      float32x4_t v675 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v593, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v593, 0xCuLL)));
      int32x4_t v676 = (int32x4_t)vmlsq_f32(vmulq_f32(v675, v597), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v597, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v597, 0xCuLL))), v593);
      int32x4_t v677 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v676, 0xCuLL);
      float32x4_t v678 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v594, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v594, 0xCuLL)));
      float32x4_t v679 = vmlsq_f32(vmulq_f32(v678, v649), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v649, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v649, 0xCuLL))), v594);
      int32x4_t v680 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v679, 0xCuLL);
      float32x4_t v681 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v595, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v595, 0xCuLL)));
      int32x4_t v682 = (int32x4_t)vmlsq_f32(vmulq_f32(v681, v600), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v600, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v600, 0xCuLL))), v595);
      int32x4_t v683 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v682, 0xCuLL);
      float32x4_t v684 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v596, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v596, 0xCuLL)));
      int32x4_t v685 = (int32x4_t)vmlsq_f32(vmulq_f32(v684, v1435), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1435, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1435, 0xCuLL))), v596);
      int32x4_t v686 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v685, 0xCuLL);
      int32x4_t v687 = (int32x4_t)vmlsq_f32(vmulq_f32(v675, (float32x4_t)vrev64q_s32(vuzp1q_s32(v676, v677))), (float32x4_t)vextq_s8((int8x16_t)v677, (int8x16_t)vrev64q_s32(v677), 8uLL), v593);
      int32x4_t v688 = (int32x4_t)vmlsq_f32(vmulq_f32(v678, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v679, v680))), (float32x4_t)vextq_s8((int8x16_t)v680, (int8x16_t)vrev64q_s32(v680), 8uLL), v594);
      int32x4_t v689 = (int32x4_t)vmlsq_f32(vmulq_f32(v681, (float32x4_t)vrev64q_s32(vuzp1q_s32(v682, v683))), (float32x4_t)vextq_s8((int8x16_t)v683, (int8x16_t)vrev64q_s32(v683), 8uLL), v595);
      int32x4_t v690 = (int32x4_t)vmlsq_f32(vmulq_f32(v684, (float32x4_t)vrev64q_s32(vuzp1q_s32(v685, v686))), (float32x4_t)vextq_s8((int8x16_t)v686, (int8x16_t)vrev64q_s32(v686), 8uLL), v596);
      v679.i64[0] = 0x4000000040000000;
      v679.i64[1] = 0x4000000040000000;
      float32x4_t v691 = vmlaq_f32(v597, v679, (float32x4_t)vrev64q_s32(vuzp1q_s32(v687, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v687, 0xCuLL))));
      float32x4_t v692 = vmlaq_f32(v649, v679, (float32x4_t)vrev64q_s32(vuzp1q_s32(v688, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v688, 0xCuLL))));
      float32x4_t v693 = vmlaq_f32(v600, v679, (float32x4_t)vrev64q_s32(vuzp1q_s32(v689, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v689, 0xCuLL))));
      float32x4_t v694 = vmlaq_f32(v1435, v679, (float32x4_t)vrev64q_s32(vuzp1q_s32(v690, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v690, 0xCuLL))));
      if ((v5 & 8) != 0)
      {
        float32x4_t v701 = vmulq_f32(v1552, v1552);
        int32x4_t v702 = (int32x4_t)vmulq_f32(v1548, v1548);
        float32x4_t v703 = vmulq_f32(v1550, v1550);
        float32x4_t v704 = vmulq_f32(v24, v24);
        v705.i64[0] = vzip1q_s32((int32x4_t)v701, v702).u64[0];
        v705.i64[1] = __PAIR64__(v704.u32[0], v703.u32[0]);
        v706.i64[0] = vtrn2q_s32((int32x4_t)v701, v702).u64[0];
        v706.i64[1] = __PAIR64__(v704.u32[1], v703.u32[1]);
        v701.i64[0] = vzip2q_s32((int32x4_t)v701, v702).u64[0];
        v701.i64[1] = __PAIR64__(v704.u32[2], v703.u32[2]);
        __asm { FMOV            V7.4S, #1.0 }
        float32x4_t v708 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v701, vaddq_f32(v705, v706))));
        float32x4_t v709 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1552), v708.f32[0]), v691);
        int32x4_t v710 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v708.f32, 1), v692);
        float32x4_t v711 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1550), v708, 2), v693);
        float32x4_t v712 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v24), v708, 3), v694);
        v703.i64[0] = vzip1q_s32((int32x4_t)v709, v710).u64[0];
        v703.i64[1] = __PAIR64__(v712.u32[0], v711.u32[0]);
        v704.i64[0] = vtrn2q_s32((int32x4_t)v709, v710).u64[0];
        v704.i64[1] = __PAIR64__(v712.u32[1], v711.u32[1]);
        v709.i64[0] = vzip2q_s32((int32x4_t)v709, v710).u64[0];
        v709.i64[1] = __PAIR64__(v712.u32[2], v711.u32[2]);
        float32x4_t v695 = vaddq_f32(v709, vaddq_f32(v703, v704));
      }
      else
      {
        v695.i64[0] = vzip2q_s32((int32x4_t)v691, (int32x4_t)v692).u64[0];
        v695.i64[1] = __PAIR64__(v694.u32[2], v693.u32[2]);
      }
      float32x4_t v670 = v1398;
      float32x4_t v669 = v1408;
      float v9 = 1.0;
    }
    else
    {
      if (v1283)
      {
        if ((v5 & 8) != 0)
        {
          float32x4_t v872 = vmulq_f32(v1552, v1552);
          int32x4_t v873 = (int32x4_t)vmulq_f32(v1548, v1548);
          float32x4_t v874 = vmulq_f32(v1550, v1550);
          v875.i64[0] = vzip1q_s32((int32x4_t)v872, v873).u64[0];
          v875.i32[2] = v874.i32[0];
          float32x4_t v876 = vmulq_f32(v24, v24);
          v875.i32[3] = v876.i32[0];
          v877.i64[0] = vtrn2q_s32((int32x4_t)v872, v873).u64[0];
          v877.i64[1] = __PAIR64__(v876.u32[1], v874.u32[1]);
          v872.i64[0] = vzip2q_s32((int32x4_t)v872, v873).u64[0];
          v872.i64[1] = __PAIR64__(v876.u32[2], v874.u32[2]);
          __asm { FMOV            V16.4S, #1.0 }
          float32x4_t v879 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v872, vaddq_f32(v875, v877))));
          float32x4_t v671 = vmulq_n_f32(vnegq_f32(v1552), v879.f32[0]);
          float32x4_t v672 = vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v879.f32, 1);
          float32x4_t v673 = vmulq_laneq_f32(vnegq_f32(v1550), v879, 2);
          float32x4_t v674 = vmulq_laneq_f32(vnegq_f32(v24), v879, 3);
        }
        else
        {
          float32x4_t v671 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v672 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v673 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v674 = (float32x4_t)xmmword_227DC2100;
        }
        float32x4_t v880 = vaddq_f32(v597, v671);
        float32x4_t v881 = vaddq_f32(v649, v672);
        float32x4_t v882 = vaddq_f32(v600, v673);
        float32x4_t v883 = vaddq_f32(v1435, v674);
        float32x4_t v884 = vmulq_f32(v880, v880);
        int32x4_t v885 = (int32x4_t)vmulq_f32(v881, v881);
        float32x4_t v886 = vmulq_f32(v882, v882);
        v887.i64[0] = vzip1q_s32((int32x4_t)v884, v885).u64[0];
        v887.i32[2] = v886.i32[0];
        float32x4_t v888 = vmulq_f32(v883, v883);
        v887.i32[3] = v888.i32[0];
        v889.i64[0] = vtrn2q_s32((int32x4_t)v884, v885).u64[0];
        v889.i64[1] = __PAIR64__(v888.u32[1], v886.u32[1]);
        v884.i64[0] = vzip2q_s32((int32x4_t)v884, v885).u64[0];
        v884.i64[1] = __PAIR64__(v888.u32[2], v886.u32[2]);
        __asm { FMOV            V17.4S, #1.0 }
        float32x4_t v891 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v884, vaddq_f32(v887, v889))));
        float32x4_t v713 = vmulq_n_f32(v880, v891.f32[0]);
        float32x4_t v714 = vmulq_lane_f32(v881, *(float32x2_t *)v891.f32, 1);
        float32x4_t v715 = vmulq_laneq_f32(v882, v891, 2);
        float32x4_t v716 = vmulq_laneq_f32(v883, v891, 3);
      }
      else
      {
        float32x4_t v713 = *(float32x4_t *)(v4 + 13312);
        float32x4_t v714 = v713;
        float32x4_t v715 = v713;
        float32x4_t v716 = v713;
      }
      float32x4_t v892 = vmulq_f32(v593, v713);
      int32x4_t v893 = (int32x4_t)vmulq_f32(v594, v714);
      float32x4_t v894 = vmulq_f32(v595, v715);
      float32x4_t v895 = vmulq_f32(v596, v716);
      v896.i64[0] = vzip1q_s32((int32x4_t)v892, v893).u64[0];
      v896.i64[1] = __PAIR64__(v895.u32[0], v894.u32[0]);
      v897.i64[0] = vtrn2q_s32((int32x4_t)v892, v893).u64[0];
      v897.i64[1] = __PAIR64__(v895.u32[1], v894.u32[1]);
      v892.i64[0] = vzip2q_s32((int32x4_t)v892, v893).u64[0];
      v892.i64[1] = __PAIR64__(v895.u32[2], v894.u32[2]);
      float32x4_t v695 = vaddq_f32(v892, vaddq_f32(v896, v897));
    }
    if (v648.f32[0] <= 0.0) {
      float v898 = 0.0;
    }
    else {
      float v898 = v695.f32[0];
    }
    if (v648.f32[1] <= 0.0) {
      float v899 = 0.0;
    }
    else {
      float v899 = v695.f32[1];
    }
    if (v648.f32[2] <= 0.0) {
      float v900 = 0.0;
    }
    else {
      float v900 = v695.f32[2];
    }
    if (v648.f32[3] <= 0.0) {
      float v901 = 0.0;
    }
    else {
      float v901 = v695.f32[3];
    }
    if (v898 <= 0.0 && v899 <= 0.0 && v900 <= 0.0 && v901 <= 0.0)
    {
      float32x4_t v903 = v1416;
      float32x4_t v902 = v1425;
      if (!v1447) {
        goto LABEL_465;
      }
LABEL_464:
      float32x4_t v902 = vmulq_n_f32(v902, v598.f32[0]);
      float32x4_t v903 = vmulq_lane_f32(v903, *(float32x2_t *)v598.f32, 1);
      float32x4_t v669 = vmulq_laneq_f32(v669, v598, 2);
      float32x4_t v670 = vmulq_laneq_f32(v670, v598, 3);
      goto LABEL_465;
    }
    float32x4_t v1440 = v598;
    float32x4_t v1494 = v28;
    float32x4_t v1510 = v27;
    float32x4_t v1526 = v26;
    float32x4_t v1542 = v25;
    __int16 v1462 = v8;
    float v964 = fmaxf(v899, 0.0);
    float v965 = fmaxf(v900, 0.0);
    float v966 = v17[4].f32[0];
    float v967 = fmaxf(v901, 0.0);
    float v968 = v18[4].f32[0];
    float v969 = v19[4].f32[0];
    float v970 = v19;
    LODWORD(v1387) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(fmaxf(v898, 0.0), v1547[4].f32[0]));
    LODWORD(v1373) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v964, v966));
    LODWORD(v1359) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v965, v968));
    a1 = (*(uint64_t (**)(float, float))(v4 + 560))(v967, v969);
    if ((v6 & 0x800) != 0)
    {
      float32x4_t v1006 = *(float32x4_t *)(v4 + 13216);
      float32x4_t v972 = vmulq_f32(v1006, v11[13]);
      float32x4_t v973 = vmulq_f32(v1006, v12[13]);
      float32x4_t v974 = vmulq_f32(v1006, v13[13]);
      float32x4_t v975 = vmulq_f32(v1006, v14[13]);
    }
    else
    {
      float32x4_t v972 = v1547[19];
      float32x4_t v973 = v17[19];
      float32x4_t v974 = v18[19];
      float32x4_t v975 = v970[19];
    }
    float v19 = v970;
    float32x4_t v598 = v1440;
    float32x4_t v903 = v1416;
    float32x4_t v902 = v1425;
    float32x4_t v670 = v1398;
    float32x4_t v669 = v1408;
    float32x4_t v1007 = vmulq_n_f32(v972, v1387);
    float32x4_t v1008 = vmulq_n_f32(v973, v1373);
    float32x4_t v1009 = vmulq_n_f32(v974, v1359);
    float32x4_t v1010 = vmulq_n_f32(v975, v971);
    LOWORD(v5) = v1429;
    unint64_t v8 = v1462;
    float32x4_t v26 = v1526;
    float32x4_t v25 = v1542;
    float32x4_t v28 = v1494;
    float32x4_t v27 = v1510;
    float32x4_t v24 = v1479;
    if ((v1429 & 0x10) != 0)
    {
      if (v1447)
      {
        float32x4_t v1007 = vmulq_n_f32(v1007, v1440.f32[0]);
        float32x4_t v1008 = vmulq_lane_f32(v1008, *(float32x2_t *)v1440.f32, 1);
        float32x4_t v1009 = vmulq_laneq_f32(v1009, v1440, 2);
        float32x4_t v1010 = vmulq_laneq_f32(v1010, v1440, 3);
      }
      float32x4_t v1474 = vaddq_f32(v1474, v1008);
      float32x4_t v1477 = vaddq_f32(v1477, v1007);
      float32x4_t v1469 = vaddq_f32(v1469, v1010);
      float32x4_t v1471 = vaddq_f32(v1471, v1009);
      if (v1447) {
        goto LABEL_464;
      }
    }
    else
    {
      float32x4_t v902 = vaddq_f32(v1425, v1007);
      float32x4_t v903 = vaddq_f32(v1416, v1008);
      float32x4_t v669 = vaddq_f32(v1408, v1009);
      float32x4_t v670 = vaddq_f32(v1398, v1010);
      if (v1447) {
        goto LABEL_464;
      }
    }
LABEL_465:
    float32x4_t v25 = vaddq_f32(v25, v902);
    float32x4_t v26 = vaddq_f32(v26, v903);
    float32x4_t v27 = vaddq_f32(v27, v669);
    float32x4_t v28 = vaddq_f32(v28, v670);
    if ((v6 & 0x20) == 0) {
      goto LABEL_466;
    }
LABEL_388:
    float32x4_t v749 = v11[7];
    float32x4_t v750 = v12[7];
    float32x4_t v751 = v13[7];
    float32x4_t v752 = v14[7];
    if ((v5 & 2) != 0)
    {
      float32x4_t v749 = vnegq_f32(v749);
      float32x4_t v750 = vnegq_f32(v750);
      float32x4_t v751 = vnegq_f32(v751);
      float32x4_t v752 = vnegq_f32(v752);
    }
    float32x4_t v753 = *(float32x4_t *)(v4 + 13440);
    float32x4_t v754 = 0uLL;
    if ((v5 & 0x2000) != 0)
    {
      float32x4_t v775 = vsubq_f32(v753, v1552);
      float32x4_t v776 = vsubq_f32(v753, v1548);
      float32x4_t v777 = vsubq_f32(v753, v1550);
      float32x4_t v778 = vsubq_f32(v753, v24);
      float32x4_t v779 = vmulq_f32(v775, v775);
      int32x4_t v780 = (int32x4_t)vmulq_f32(v776, v776);
      float32x4_t v781 = vmulq_f32(v777, v777);
      v782.i64[0] = vzip1q_s32((int32x4_t)v779, v780).u64[0];
      v782.i32[2] = v781.i32[0];
      float32x4_t v783 = vmulq_f32(v778, v778);
      v782.i32[3] = v783.i32[0];
      v784.i64[0] = vtrn2q_s32((int32x4_t)v779, v780).u64[0];
      v784.i64[1] = __PAIR64__(v783.u32[1], v781.u32[1]);
      v779.i64[0] = vzip2q_s32((int32x4_t)v779, v780).u64[0];
      v779.i64[1] = __PAIR64__(v783.u32[2], v781.u32[2]);
      float32x4_t v785 = vsqrtq_f32(vaddq_f32(v779, vaddq_f32(v782, v784)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v787 = vdivq_f32(_Q0, v785);
      float32x4_t v753 = vmulq_n_f32(v775, v787.f32[0]);
      float32x4_t v755 = vmulq_lane_f32(v776, *(float32x2_t *)v787.f32, 1);
      float32x4_t v756 = vmulq_laneq_f32(v777, v787, 2);
      float32x4_t v757 = vmulq_laneq_f32(v778, v787, 3);
      if ((v6 & 0x20000000) != 0)
      {
        float32x4_t v792 = vdivq_f32(_Q0, v787);
        float32x4_t v793 = v1301;
        float32x4_t v794 = vld1q_dup_f32(v793);
        float32x4_t v795 = v1300;
        float32x4_t v796 = vld1q_dup_f32(v795);
        float32x4_t v754 = vdivq_f32(_Q0, vmlaq_f32(v794, vmlaq_n_f32(v796, v792, *(float *)(v4 + 13432)), v792));
        if ((v6 & 0x200000) == 0)
        {
LABEL_397:
          if (!v1446) {
            goto LABEL_402;
          }
          goto LABEL_398;
        }
      }
      else if ((v6 & 0x200000) == 0)
      {
        goto LABEL_397;
      }
    }
    else
    {
      float32x4_t v755 = *(float32x4_t *)(v4 + 13440);
      float32x4_t v756 = v755;
      float32x4_t v757 = v755;
      if ((v6 & 0x200000) == 0) {
        goto LABEL_397;
      }
    }
    float32x4_t v758 = vnegq_f32(*(float32x4_t *)(v4 + 13456));
    float32x4_t v759 = vmulq_f32(v753, v758);
    int32x4_t v760 = (int32x4_t)vmulq_f32(v755, v758);
    float32x4_t v761 = vmulq_f32(v756, v758);
    float32x4_t v762 = vmulq_f32(v757, v758);
    v763.i64[0] = vzip1q_s32((int32x4_t)v759, v760).u64[0];
    v763.i64[1] = __PAIR64__(v762.u32[0], v761.u32[0]);
    v764.i64[0] = vtrn2q_s32((int32x4_t)v759, v760).u64[0];
    v764.i64[1] = __PAIR64__(v762.u32[1], v761.u32[1]);
    v759.i64[0] = vzip2q_s32((int32x4_t)v759, v760).u64[0];
    v759.i64[1] = __PAIR64__(v762.u32[2], v761.u32[2]);
    float32x4_t v765 = vaddq_f32(v759, vaddq_f32(v763, v764));
    float32x4_t v766 = v1310;
    float32x4_t v767 = vld1q_dup_f32(v766);
    int32x4_t v768 = vcgeq_f32(v765, v767);
    int32x4_t v769 = (int32x4_t)vmvnq_s8((int8x16_t)v768);
    *(int16x4_t *)v769.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v769), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v769.i8))
    {
      float32x4_t v754 = 0uLL;
      if (!v1446) {
        goto LABEL_402;
      }
    }
    else
    {
      v769.i32[0] = 0;
      int8x16_t v1346 = (int8x16_t)v768;
      float32x4_t v1356 = v755;
      v768.i32[0] = v6 & 0x20000000;
      int8x16_t v770 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v768, v769), 0);
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1338 = (float32x4_t)vbslq_s8(v770, _Q1, (int8x16_t)v754);
      float v772 = *(float *)(v4 + 13436);
      float32x4_t v1523 = v26;
      float32x4_t v1539 = v25;
      float32x4_t v1491 = v28;
      float32x4_t v1507 = v27;
      float32x4_t v1370 = v756;
      float32x4_t v1384 = v753;
      float32x4_t v1436 = v757;
      float32x4_t v1459 = v765;
      unsigned int v1331 = COERCE_UNSIGNED_INT64((*(double (**)(void))(v4 + 560))());
      unsigned int v1324 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1459.f32[1], v772));
      unsigned int v1317 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1459.f32[2], v772));
      *(float *)&unsigned int v773 = (*(float (**)(float, float))(v4 + 560))(v1459.f32[3], v772);
      float32x4_t v755 = v1356;
      float32x4_t v756 = v1370;
      float32x4_t v757 = v1436;
      float32x4_t v753 = v1384;
      float32x4_t v24 = v1479;
      float32x4_t v28 = v1491;
      float32x4_t v27 = v1507;
      float32x4_t v26 = v1523;
      float32x4_t v25 = v1539;
      float v19 = v1481;
      v774.i64[0] = __PAIR64__(v1324, v1331);
      v774.i64[1] = __PAIR64__(v773, v1317);
      float32x4_t v754 = vmulq_f32(v1338, (float32x4_t)vandq_s8(v774, v1346));
      if (!v1446) {
        goto LABEL_402;
      }
    }
LABEL_398:
    if (v754.f32[0] <= 0.0 && v754.f32[1] <= 0.0 && v754.f32[2] <= 0.0 && v754.f32[3] <= 0.0)
    {
LABEL_466:
      if ((v6 & 0x40) == 0) {
        goto LABEL_544;
      }
      goto LABEL_467;
    }
LABEL_402:
    if (v1554)
    {
      if ((v6 & 0x200) != 0)
      {
        float32x4_t v797 = *(float32x4_t *)(v4 + 13344);
        float32x4_t v788 = vmulq_f32(v797, v11[13]);
        float32x4_t v789 = vmulq_f32(v797, v12[13]);
        float32x4_t v790 = vmulq_f32(v797, v13[13]);
        float32x4_t v791 = vmulq_f32(v797, v14[13]);
      }
      else
      {
        float32x4_t v788 = v1547[20];
        float32x4_t v789 = v17[20];
        float32x4_t v790 = v18[20];
        float32x4_t v791 = v19[20];
      }
    }
    else
    {
      float32x4_t v791 = 0uLL;
      float32x4_t v790 = 0uLL;
      float32x4_t v789 = 0uLL;
      float32x4_t v788 = 0uLL;
    }
    float32x4_t v798 = vmulq_f32(v749, v753);
    int32x4_t v799 = (int32x4_t)vmulq_f32(v750, v755);
    float32x4_t v800 = vmulq_f32(v751, v756);
    float32x4_t v801 = vmulq_f32(v752, v757);
    v802.i64[0] = vzip1q_s32((int32x4_t)v798, v799).u64[0];
    v802.i64[1] = __PAIR64__(v801.u32[0], v800.u32[0]);
    v803.i64[0] = vtrn2q_s32((int32x4_t)v798, v799).u64[0];
    v803.i64[1] = __PAIR64__(v801.u32[1], v800.u32[1]);
    v798.i64[0] = vzip2q_s32((int32x4_t)v798, v799).u64[0];
    v798.i64[1] = __PAIR64__(v801.u32[2], v800.u32[2]);
    float32x4_t v804 = vaddq_f32(v798, vaddq_f32(v802, v803));
    if (v804.f32[0] > 0.0 || v804.f32[1] > 0.0 || v804.f32[2] > 0.0 || v804.f32[3] > 0.0)
    {
      float32x4_t v1437 = v757;
      if ((v6 & 0x400) != 0)
      {
        float32x4_t v821 = *(float32x4_t *)(v4 + 13360);
        float32x4_t v805 = vmulq_f32(v821, v11[13]);
        float32x4_t v806 = vmulq_f32(v821, v12[13]);
        float32x4_t v807 = vmulq_f32(v821, v13[13]);
        float32x4_t v808 = vmulq_f32(v821, v14[13]);
      }
      else
      {
        float32x4_t v805 = v1547[21];
        float32x4_t v806 = v17[21];
        float32x4_t v807 = v18[21];
        float32x4_t v808 = v19[21];
      }
      float32x4_t v822 = vmulq_n_f32(v805, fmaxf(v804.f32[0], 0.0));
      float32x4_t v823 = vmulq_n_f32(v806, fmaxf(v804.f32[1], 0.0));
      float32x4_t v824 = vmulq_n_f32(v807, fmaxf(v804.f32[2], 0.0));
      float32x4_t v825 = vmulq_n_f32(v808, fmaxf(v804.f32[3], 0.0));
      if (v1554)
      {
        float32x4_t v822 = vaddq_f32(v788, v822);
        float32x4_t v823 = vaddq_f32(v789, v823);
        float32x4_t v824 = vaddq_f32(v790, v824);
        float32x4_t v825 = vaddq_f32(v791, v825);
      }
      float32x4_t v1417 = v823;
      float32x4_t v1426 = v822;
      float32x4_t v1400 = v825;
      float32x4_t v1409 = v824;
      if ((v5 & 0x20) != 0)
      {
        float32x4_t v830 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v749, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v749, 0xCuLL)));
        int32x4_t v831 = (int32x4_t)vmlsq_f32(vmulq_f32(v830, v753), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v753, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v753, 0xCuLL))), v749);
        int32x4_t v832 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v831, 0xCuLL);
        float32x4_t v833 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v750, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v750, 0xCuLL)));
        float32x4_t v834 = vmlsq_f32(vmulq_f32(v833, v755), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v755, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v755, 0xCuLL))), v750);
        int32x4_t v835 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v834, 0xCuLL);
        float32x4_t v836 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v751, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v751, 0xCuLL)));
        int32x4_t v837 = (int32x4_t)vmlsq_f32(vmulq_f32(v836, v756), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v756, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v756, 0xCuLL))), v751);
        int32x4_t v838 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v837, 0xCuLL);
        float32x4_t v839 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v752, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v752, 0xCuLL)));
        int32x4_t v840 = (int32x4_t)vmlsq_f32(vmulq_f32(v839, v1437), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1437, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1437, 0xCuLL))), v752);
        int32x4_t v841 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v840, 0xCuLL);
        int32x4_t v842 = (int32x4_t)vmlsq_f32(vmulq_f32(v830, (float32x4_t)vrev64q_s32(vuzp1q_s32(v831, v832))), (float32x4_t)vextq_s8((int8x16_t)v832, (int8x16_t)vrev64q_s32(v832), 8uLL), v749);
        int32x4_t v843 = (int32x4_t)vmlsq_f32(vmulq_f32(v833, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v834, v835))), (float32x4_t)vextq_s8((int8x16_t)v835, (int8x16_t)vrev64q_s32(v835), 8uLL), v750);
        int32x4_t v844 = (int32x4_t)vmlsq_f32(vmulq_f32(v836, (float32x4_t)vrev64q_s32(vuzp1q_s32(v837, v838))), (float32x4_t)vextq_s8((int8x16_t)v838, (int8x16_t)vrev64q_s32(v838), 8uLL), v751);
        int32x4_t v845 = (int32x4_t)vmlsq_f32(vmulq_f32(v839, (float32x4_t)vrev64q_s32(vuzp1q_s32(v840, v841))), (float32x4_t)vextq_s8((int8x16_t)v841, (int8x16_t)vrev64q_s32(v841), 8uLL), v752);
        v834.i64[0] = 0x4000000040000000;
        v834.i64[1] = 0x4000000040000000;
        float32x4_t v846 = vmlaq_f32(v753, v834, (float32x4_t)vrev64q_s32(vuzp1q_s32(v842, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v842, 0xCuLL))));
        float32x4_t v847 = vmlaq_f32(v755, v834, (float32x4_t)vrev64q_s32(vuzp1q_s32(v843, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v843, 0xCuLL))));
        float32x4_t v848 = vmlaq_f32(v756, v834, (float32x4_t)vrev64q_s32(vuzp1q_s32(v844, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v844, 0xCuLL))));
        float32x4_t v849 = vmlaq_f32(v1437, v834, (float32x4_t)vrev64q_s32(vuzp1q_s32(v845, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v845, 0xCuLL))));
        if ((v5 & 8) != 0)
        {
          float32x4_t v856 = vmulq_f32(v1552, v1552);
          int32x4_t v857 = (int32x4_t)vmulq_f32(v1548, v1548);
          float32x4_t v858 = vmulq_f32(v1550, v1550);
          float32x4_t v859 = vmulq_f32(v24, v24);
          v860.i64[0] = vzip1q_s32((int32x4_t)v856, v857).u64[0];
          v860.i64[1] = __PAIR64__(v859.u32[0], v858.u32[0]);
          v861.i64[0] = vtrn2q_s32((int32x4_t)v856, v857).u64[0];
          v861.i64[1] = __PAIR64__(v859.u32[1], v858.u32[1]);
          v856.i64[0] = vzip2q_s32((int32x4_t)v856, v857).u64[0];
          v856.i64[1] = __PAIR64__(v859.u32[2], v858.u32[2]);
          __asm { FMOV            V7.4S, #1.0 }
          float32x4_t v863 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v856, vaddq_f32(v860, v861))));
          float32x4_t v864 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1552), v863.f32[0]), v846);
          int32x4_t v865 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v863.f32, 1), v847);
          float32x4_t v866 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1550), v863, 2), v848);
          float32x4_t v867 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v24), v863, 3), v849);
          v858.i64[0] = vzip1q_s32((int32x4_t)v864, v865).u64[0];
          v858.i64[1] = __PAIR64__(v867.u32[0], v866.u32[0]);
          v859.i64[0] = vtrn2q_s32((int32x4_t)v864, v865).u64[0];
          v859.i64[1] = __PAIR64__(v867.u32[1], v866.u32[1]);
          v864.i64[0] = vzip2q_s32((int32x4_t)v864, v865).u64[0];
          v864.i64[1] = __PAIR64__(v867.u32[2], v866.u32[2]);
          float32x4_t v850 = vaddq_f32(v864, vaddq_f32(v858, v859));
        }
        else
        {
          v850.i64[0] = vzip2q_s32((int32x4_t)v846, (int32x4_t)v847).u64[0];
          v850.i64[1] = __PAIR64__(v849.u32[2], v848.u32[2]);
        }
        float32x4_t v825 = v1400;
        float32x4_t v824 = v1409;
        float v9 = 1.0;
      }
      else
      {
        if (v1282)
        {
          if ((v5 & 8) != 0)
          {
            float32x4_t v1027 = vmulq_f32(v1552, v1552);
            int32x4_t v1028 = (int32x4_t)vmulq_f32(v1548, v1548);
            float32x4_t v1029 = vmulq_f32(v1550, v1550);
            v1030.i64[0] = vzip1q_s32((int32x4_t)v1027, v1028).u64[0];
            v1030.i32[2] = v1029.i32[0];
            float32x4_t v1031 = vmulq_f32(v24, v24);
            v1030.i32[3] = v1031.i32[0];
            v1032.i64[0] = vtrn2q_s32((int32x4_t)v1027, v1028).u64[0];
            v1032.i64[1] = __PAIR64__(v1031.u32[1], v1029.u32[1]);
            v1027.i64[0] = vzip2q_s32((int32x4_t)v1027, v1028).u64[0];
            v1027.i64[1] = __PAIR64__(v1031.u32[2], v1029.u32[2]);
            __asm { FMOV            V16.4S, #1.0 }
            float32x4_t v1034 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v1027, vaddq_f32(v1030, v1032))));
            float32x4_t v826 = vmulq_n_f32(vnegq_f32(v1552), v1034.f32[0]);
            float32x4_t v827 = vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v1034.f32, 1);
            float32x4_t v828 = vmulq_laneq_f32(vnegq_f32(v1550), v1034, 2);
            float32x4_t v829 = vmulq_laneq_f32(vnegq_f32(v24), v1034, 3);
          }
          else
          {
            float32x4_t v826 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v827 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v828 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v829 = (float32x4_t)xmmword_227DC2100;
          }
          float32x4_t v1035 = vaddq_f32(v753, v826);
          float32x4_t v1036 = vaddq_f32(v755, v827);
          float32x4_t v1037 = vaddq_f32(v756, v828);
          float32x4_t v1038 = vaddq_f32(v1437, v829);
          float32x4_t v1039 = vmulq_f32(v1035, v1035);
          int32x4_t v1040 = (int32x4_t)vmulq_f32(v1036, v1036);
          float32x4_t v1041 = vmulq_f32(v1037, v1037);
          v1042.i64[0] = vzip1q_s32((int32x4_t)v1039, v1040).u64[0];
          v1042.i32[2] = v1041.i32[0];
          float32x4_t v1043 = vmulq_f32(v1038, v1038);
          v1042.i32[3] = v1043.i32[0];
          v1044.i64[0] = vtrn2q_s32((int32x4_t)v1039, v1040).u64[0];
          v1044.i64[1] = __PAIR64__(v1043.u32[1], v1041.u32[1]);
          v1039.i64[0] = vzip2q_s32((int32x4_t)v1039, v1040).u64[0];
          v1039.i64[1] = __PAIR64__(v1043.u32[2], v1041.u32[2]);
          __asm { FMOV            V17.4S, #1.0 }
          float32x4_t v1046 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v1039, vaddq_f32(v1042, v1044))));
          float32x4_t v868 = vmulq_n_f32(v1035, v1046.f32[0]);
          float32x4_t v869 = vmulq_lane_f32(v1036, *(float32x2_t *)v1046.f32, 1);
          float32x4_t v870 = vmulq_laneq_f32(v1037, v1046, 2);
          float32x4_t v871 = vmulq_laneq_f32(v1038, v1046, 3);
        }
        else
        {
          float32x4_t v868 = *(float32x4_t *)(v4 + 13472);
          float32x4_t v869 = v868;
          float32x4_t v870 = v868;
          float32x4_t v871 = v868;
        }
        float32x4_t v1047 = vmulq_f32(v749, v868);
        int32x4_t v1048 = (int32x4_t)vmulq_f32(v750, v869);
        float32x4_t v1049 = vmulq_f32(v751, v870);
        float32x4_t v1050 = vmulq_f32(v752, v871);
        v1051.i64[0] = vzip1q_s32((int32x4_t)v1047, v1048).u64[0];
        v1051.i64[1] = __PAIR64__(v1050.u32[0], v1049.u32[0]);
        v1052.i64[0] = vtrn2q_s32((int32x4_t)v1047, v1048).u64[0];
        v1052.i64[1] = __PAIR64__(v1050.u32[1], v1049.u32[1]);
        v1047.i64[0] = vzip2q_s32((int32x4_t)v1047, v1048).u64[0];
        v1047.i64[1] = __PAIR64__(v1050.u32[2], v1049.u32[2]);
        float32x4_t v850 = vaddq_f32(v1047, vaddq_f32(v1051, v1052));
      }
      if (v804.f32[0] <= 0.0) {
        float v1053 = 0.0;
      }
      else {
        float v1053 = v850.f32[0];
      }
      if (v804.f32[1] <= 0.0) {
        float v1054 = 0.0;
      }
      else {
        float v1054 = v850.f32[1];
      }
      if (v804.f32[2] <= 0.0) {
        float v1055 = 0.0;
      }
      else {
        float v1055 = v850.f32[2];
      }
      if (v804.f32[3] <= 0.0) {
        float v1056 = 0.0;
      }
      else {
        float v1056 = v850.f32[3];
      }
      if (v1053 <= 0.0 && v1054 <= 0.0 && v1055 <= 0.0 && v1056 <= 0.0)
      {
        float32x4_t v1058 = v1417;
        float32x4_t v1057 = v1426;
        if (!v1446) {
          goto LABEL_543;
        }
        goto LABEL_542;
      }
      float32x4_t v1441 = v754;
      float32x4_t v1496 = v28;
      float32x4_t v1512 = v27;
      float32x4_t v1528 = v26;
      float32x4_t v1544 = v25;
      float32x4_t v1464 = v8;
      float v1118 = fmaxf(v1054, 0.0);
      float v1119 = fmaxf(v1055, 0.0);
      float v1120 = v17[4].f32[0];
      float v1121 = fmaxf(v1056, 0.0);
      float v1122 = v18[4].f32[0];
      float v1123 = v19[4].f32[0];
      float v1124 = v19;
      LODWORD(v1389) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(fmaxf(v1053, 0.0), v1547[4].f32[0]));
      LODWORD(v1375) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1118, v1120));
      LODWORD(v1361) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1119, v1122));
      a1 = (*(uint64_t (**)(float, float))(v4 + 560))(v1121, v1123);
      if ((v6 & 0x800) != 0)
      {
        float32x4_t v1160 = *(float32x4_t *)(v4 + 13376);
        float32x4_t v1126 = vmulq_f32(v1160, v11[13]);
        float32x4_t v1127 = vmulq_f32(v1160, v12[13]);
        float32x4_t v1128 = vmulq_f32(v1160, v13[13]);
        float32x4_t v1129 = vmulq_f32(v1160, v14[13]);
      }
      else
      {
        float32x4_t v1126 = v1547[22];
        float32x4_t v1127 = v17[22];
        float32x4_t v1128 = v18[22];
        float32x4_t v1129 = v1124[22];
      }
      float v19 = v1124;
      float32x4_t v754 = v1441;
      float32x4_t v1058 = v1417;
      float32x4_t v1057 = v1426;
      float32x4_t v825 = v1400;
      float32x4_t v824 = v1409;
      float32x4_t v1161 = vmulq_n_f32(v1126, v1389);
      float32x4_t v1162 = vmulq_n_f32(v1127, v1375);
      float32x4_t v1163 = vmulq_n_f32(v1128, v1361);
      float32x4_t v1164 = vmulq_n_f32(v1129, v1125);
      LOWORD(v5) = v1429;
      unint64_t v8 = v1464;
      float32x4_t v26 = v1528;
      float32x4_t v25 = v1544;
      float32x4_t v28 = v1496;
      float32x4_t v27 = v1512;
      float32x4_t v24 = v1479;
      if ((v1429 & 0x10) != 0)
      {
        if (v1446)
        {
          float32x4_t v1161 = vmulq_n_f32(v1161, v1441.f32[0]);
          float32x4_t v1162 = vmulq_lane_f32(v1162, *(float32x2_t *)v1441.f32, 1);
          float32x4_t v1163 = vmulq_laneq_f32(v1163, v1441, 2);
          float32x4_t v1164 = vmulq_laneq_f32(v1164, v1441, 3);
        }
        float32x4_t v1474 = vaddq_f32(v1474, v1162);
        float32x4_t v1477 = vaddq_f32(v1477, v1161);
        float32x4_t v1469 = vaddq_f32(v1469, v1164);
        float32x4_t v1471 = vaddq_f32(v1471, v1163);
        if (!v1446)
        {
LABEL_543:
          float32x4_t v25 = vaddq_f32(v25, v1057);
          float32x4_t v26 = vaddq_f32(v26, v1058);
          float32x4_t v27 = vaddq_f32(v27, v824);
          float32x4_t v28 = vaddq_f32(v28, v825);
          if ((v6 & 0x40) == 0) {
            goto LABEL_544;
          }
          goto LABEL_467;
        }
      }
      else
      {
        float32x4_t v1057 = vaddq_f32(v1426, v1161);
        float32x4_t v1058 = vaddq_f32(v1417, v1162);
        float32x4_t v824 = vaddq_f32(v1409, v1163);
        float32x4_t v825 = vaddq_f32(v1400, v1164);
        if (!v1446) {
          goto LABEL_543;
        }
      }
LABEL_542:
      float32x4_t v1057 = vmulq_n_f32(v1057, v754.f32[0]);
      float32x4_t v1058 = vmulq_lane_f32(v1058, *(float32x2_t *)v754.f32, 1);
      float32x4_t v824 = vmulq_laneq_f32(v824, v754, 2);
      float32x4_t v825 = vmulq_laneq_f32(v825, v754, 3);
      goto LABEL_543;
    }
    if (!v1554) {
      goto LABEL_466;
    }
    if (v1446)
    {
      float32x4_t v788 = vmulq_n_f32(v788, v754.f32[0]);
      float32x4_t v789 = vmulq_lane_f32(v789, *(float32x2_t *)v754.f32, 1);
      float32x4_t v790 = vmulq_laneq_f32(v790, v754, 2);
      float32x4_t v791 = vmulq_laneq_f32(v791, v754, 3);
    }
    float32x4_t v25 = vaddq_f32(v25, v788);
    float32x4_t v26 = vaddq_f32(v26, v789);
    float32x4_t v27 = vaddq_f32(v27, v790);
    float32x4_t v28 = vaddq_f32(v28, v791);
    if ((v6 & 0x40) == 0) {
      goto LABEL_544;
    }
LABEL_467:
    float32x4_t v904 = v11[7];
    float32x4_t v905 = v12[7];
    float32x4_t v906 = v13[7];
    float32x4_t v907 = v14[7];
    if ((v5 & 2) != 0)
    {
      float32x4_t v904 = vnegq_f32(v904);
      float32x4_t v905 = vnegq_f32(v905);
      float32x4_t v906 = vnegq_f32(v906);
      float32x4_t v907 = vnegq_f32(v907);
    }
    float32x4_t v908 = *(float32x4_t *)(v4 + 13600);
    float32x4_t v909 = 0uLL;
    if ((v5 & 0x4000) != 0)
    {
      float32x4_t v930 = vsubq_f32(v908, v1552);
      float32x4_t v931 = vsubq_f32(v908, v1548);
      float32x4_t v932 = vsubq_f32(v908, v1550);
      float32x4_t v933 = vsubq_f32(v908, v24);
      float32x4_t v934 = vmulq_f32(v930, v930);
      int32x4_t v935 = (int32x4_t)vmulq_f32(v931, v931);
      float32x4_t v936 = vmulq_f32(v932, v932);
      v937.i64[0] = vzip1q_s32((int32x4_t)v934, v935).u64[0];
      v937.i32[2] = v936.i32[0];
      float32x4_t v938 = vmulq_f32(v933, v933);
      v937.i32[3] = v938.i32[0];
      v939.i64[0] = vtrn2q_s32((int32x4_t)v934, v935).u64[0];
      v939.i64[1] = __PAIR64__(v938.u32[1], v936.u32[1]);
      v934.i64[0] = vzip2q_s32((int32x4_t)v934, v935).u64[0];
      v934.i64[1] = __PAIR64__(v938.u32[2], v936.u32[2]);
      float32x4_t v940 = vsqrtq_f32(vaddq_f32(v934, vaddq_f32(v937, v939)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v942 = vdivq_f32(_Q0, v940);
      float32x4_t v908 = vmulq_n_f32(v930, v942.f32[0]);
      float32x4_t v910 = vmulq_lane_f32(v931, *(float32x2_t *)v942.f32, 1);
      float32x4_t v911 = vmulq_laneq_f32(v932, v942, 2);
      float32x4_t v912 = vmulq_laneq_f32(v933, v942, 3);
      if ((v6 & 0x40000000) != 0)
      {
        float32x4_t v947 = vdivq_f32(_Q0, v942);
        float32x4_t v948 = v1303;
        float32x4_t v949 = vld1q_dup_f32(v948);
        float32x4_t v950 = v1302;
        float32x4_t v951 = vld1q_dup_f32(v950);
        float32x4_t v909 = vdivq_f32(_Q0, vmlaq_f32(v949, vmlaq_n_f32(v951, v947, *(float *)(v4 + 13592)), v947));
        if ((v6 & 0x400000) == 0)
        {
LABEL_476:
          if (!v1445) {
            goto LABEL_481;
          }
          goto LABEL_477;
        }
      }
      else if ((v6 & 0x400000) == 0)
      {
        goto LABEL_476;
      }
    }
    else
    {
      float32x4_t v910 = *(float32x4_t *)(v4 + 13600);
      float32x4_t v911 = v910;
      float32x4_t v912 = v910;
      if ((v6 & 0x400000) == 0) {
        goto LABEL_476;
      }
    }
    float32x4_t v913 = vnegq_f32(*(float32x4_t *)(v4 + 13616));
    float32x4_t v914 = vmulq_f32(v908, v913);
    int32x4_t v915 = (int32x4_t)vmulq_f32(v910, v913);
    float32x4_t v916 = vmulq_f32(v911, v913);
    float32x4_t v917 = vmulq_f32(v912, v913);
    v918.i64[0] = vzip1q_s32((int32x4_t)v914, v915).u64[0];
    v918.i64[1] = __PAIR64__(v917.u32[0], v916.u32[0]);
    v919.i64[0] = vtrn2q_s32((int32x4_t)v914, v915).u64[0];
    v919.i64[1] = __PAIR64__(v917.u32[1], v916.u32[1]);
    v914.i64[0] = vzip2q_s32((int32x4_t)v914, v915).u64[0];
    v914.i64[1] = __PAIR64__(v917.u32[2], v916.u32[2]);
    float32x4_t v920 = vaddq_f32(v914, vaddq_f32(v918, v919));
    float32x4_t v921 = v1311;
    float32x4_t v922 = vld1q_dup_f32(v921);
    int32x4_t v923 = vcgeq_f32(v920, v922);
    int32x4_t v924 = (int32x4_t)vmvnq_s8((int8x16_t)v923);
    *(int16x4_t *)v924.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v924), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v924.i8))
    {
      float32x4_t v909 = 0uLL;
      if (!v1445) {
        goto LABEL_481;
      }
    }
    else
    {
      v924.i32[0] = 0;
      int8x16_t v1347 = (int8x16_t)v923;
      v923.i32[0] = v6 & 0x40000000;
      int8x16_t v925 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v923, v924), 0);
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1339 = (float32x4_t)vbslq_s8(v925, _Q1, (int8x16_t)v909);
      float v927 = *(float *)(v4 + 13596);
      float32x4_t v1525 = v26;
      float32x4_t v1541 = v25;
      float32x4_t v1493 = v28;
      float32x4_t v1509 = v27;
      float32x4_t v1372 = v911;
      float32x4_t v1386 = v908;
      float32x4_t v1438 = v912;
      float32x4_t v1358 = v910;
      float32x4_t v1461 = v920;
      unsigned int v1332 = COERCE_UNSIGNED_INT64((*(double (**)(void))(v4 + 560))());
      unsigned int v1325 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1461.f32[1], v927));
      unsigned int v1318 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1461.f32[2], v927));
      *(float *)&unsigned int v928 = (*(float (**)(float, float))(v4 + 560))(v1461.f32[3], v927);
      float32x4_t v910 = v1358;
      float32x4_t v911 = v1372;
      float32x4_t v912 = v1438;
      float32x4_t v908 = v1386;
      float32x4_t v24 = v1479;
      float32x4_t v28 = v1493;
      float32x4_t v27 = v1509;
      float32x4_t v26 = v1525;
      float32x4_t v25 = v1541;
      float v19 = v1481;
      v929.i64[0] = __PAIR64__(v1325, v1332);
      v929.i64[1] = __PAIR64__(v928, v1318);
      float32x4_t v909 = vmulq_f32(v1339, (float32x4_t)vandq_s8(v929, v1347));
      if (!v1445) {
        goto LABEL_481;
      }
    }
LABEL_477:
    if (v909.f32[0] <= 0.0 && v909.f32[1] <= 0.0 && v909.f32[2] <= 0.0 && v909.f32[3] <= 0.0) {
      goto LABEL_544;
    }
LABEL_481:
    if (v1554)
    {
      if ((v6 & 0x200) != 0)
      {
        float32x4_t v952 = *(float32x4_t *)(v4 + 13504);
        float32x4_t v943 = vmulq_f32(v952, v11[13]);
        float32x4_t v944 = vmulq_f32(v952, v12[13]);
        float32x4_t v945 = vmulq_f32(v952, v13[13]);
        float32x4_t v946 = vmulq_f32(v952, v14[13]);
      }
      else
      {
        float32x4_t v943 = v1547[23];
        float32x4_t v944 = v17[23];
        float32x4_t v945 = v18[23];
        float32x4_t v946 = v19[23];
      }
    }
    else
    {
      float32x4_t v946 = 0uLL;
      float32x4_t v945 = 0uLL;
      float32x4_t v944 = 0uLL;
      float32x4_t v943 = 0uLL;
    }
    float32x4_t v953 = vmulq_f32(v904, v908);
    int32x4_t v954 = (int32x4_t)vmulq_f32(v905, v910);
    float32x4_t v955 = vmulq_f32(v906, v911);
    float32x4_t v956 = vmulq_f32(v907, v912);
    v957.i64[0] = vzip1q_s32((int32x4_t)v953, v954).u64[0];
    v957.i64[1] = __PAIR64__(v956.u32[0], v955.u32[0]);
    v958.i64[0] = vtrn2q_s32((int32x4_t)v953, v954).u64[0];
    v958.i64[1] = __PAIR64__(v956.u32[1], v955.u32[1]);
    v953.i64[0] = vzip2q_s32((int32x4_t)v953, v954).u64[0];
    v953.i64[1] = __PAIR64__(v956.u32[2], v955.u32[2]);
    float32x4_t v959 = vaddq_f32(v953, vaddq_f32(v957, v958));
    if (v959.f32[0] <= 0.0 && v959.f32[1] <= 0.0 && v959.f32[2] <= 0.0 && v959.f32[3] <= 0.0)
    {
      if (v1554)
      {
        if (v1445)
        {
          float32x4_t v943 = vmulq_n_f32(v943, v909.f32[0]);
          float32x4_t v944 = vmulq_lane_f32(v944, *(float32x2_t *)v909.f32, 1);
          float32x4_t v945 = vmulq_laneq_f32(v945, v909, 2);
          float32x4_t v946 = vmulq_laneq_f32(v946, v909, 3);
        }
        float32x4_t v25 = vaddq_f32(v25, v943);
        float32x4_t v26 = vaddq_f32(v26, v944);
        float32x4_t v27 = vaddq_f32(v27, v945);
        float32x4_t v28 = vaddq_f32(v28, v946);
      }
LABEL_544:
      if ((v6 & 0x80) == 0) {
        goto LABEL_655;
      }
      goto LABEL_545;
    }
    float32x4_t v1439 = v912;
    if ((v6 & 0x400) != 0)
    {
      float32x4_t v976 = *(float32x4_t *)(v4 + 13520);
      float32x4_t v960 = vmulq_f32(v976, v11[13]);
      float32x4_t v961 = vmulq_f32(v976, v12[13]);
      float32x4_t v962 = vmulq_f32(v976, v13[13]);
      float32x4_t v963 = vmulq_f32(v976, v14[13]);
    }
    else
    {
      float32x4_t v960 = v1547[24];
      float32x4_t v961 = v17[24];
      float32x4_t v962 = v18[24];
      float32x4_t v963 = v19[24];
    }
    float32x4_t v977 = vmulq_n_f32(v960, fmaxf(v959.f32[0], 0.0));
    float32x4_t v978 = vmulq_n_f32(v961, fmaxf(v959.f32[1], 0.0));
    float32x4_t v979 = vmulq_n_f32(v962, fmaxf(v959.f32[2], 0.0));
    float32x4_t v980 = vmulq_n_f32(v963, fmaxf(v959.f32[3], 0.0));
    if (v1554)
    {
      float32x4_t v977 = vaddq_f32(v943, v977);
      float32x4_t v978 = vaddq_f32(v944, v978);
      float32x4_t v979 = vaddq_f32(v945, v979);
      float32x4_t v980 = vaddq_f32(v946, v980);
    }
    float32x4_t v1418 = v978;
    float32x4_t v1427 = v977;
    float32x4_t v1401 = v980;
    float32x4_t v1410 = v979;
    if ((v5 & 0x20) != 0)
    {
      float32x4_t v985 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v904, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v904, 0xCuLL)));
      int32x4_t v986 = (int32x4_t)vmlsq_f32(vmulq_f32(v985, v908), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v908, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v908, 0xCuLL))), v904);
      int32x4_t v987 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v986, 0xCuLL);
      float32x4_t v988 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v905, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v905, 0xCuLL)));
      float32x4_t v989 = vmlsq_f32(vmulq_f32(v988, v910), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v910, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v910, 0xCuLL))), v905);
      int32x4_t v990 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v989, 0xCuLL);
      float32x4_t v991 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v906, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v906, 0xCuLL)));
      int32x4_t v992 = (int32x4_t)vmlsq_f32(vmulq_f32(v991, v911), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v911, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v911, 0xCuLL))), v906);
      int32x4_t v993 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v992, 0xCuLL);
      float32x4_t v994 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v907, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v907, 0xCuLL)));
      int32x4_t v995 = (int32x4_t)vmlsq_f32(vmulq_f32(v994, v1439), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1439, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1439, 0xCuLL))), v907);
      int32x4_t v996 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v995, 0xCuLL);
      int32x4_t v997 = (int32x4_t)vmlsq_f32(vmulq_f32(v985, (float32x4_t)vrev64q_s32(vuzp1q_s32(v986, v987))), (float32x4_t)vextq_s8((int8x16_t)v987, (int8x16_t)vrev64q_s32(v987), 8uLL), v904);
      int32x4_t v998 = (int32x4_t)vmlsq_f32(vmulq_f32(v988, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v989, v990))), (float32x4_t)vextq_s8((int8x16_t)v990, (int8x16_t)vrev64q_s32(v990), 8uLL), v905);
      int32x4_t v999 = (int32x4_t)vmlsq_f32(vmulq_f32(v991, (float32x4_t)vrev64q_s32(vuzp1q_s32(v992, v993))), (float32x4_t)vextq_s8((int8x16_t)v993, (int8x16_t)vrev64q_s32(v993), 8uLL), v906);
      int32x4_t v1000 = (int32x4_t)vmlsq_f32(vmulq_f32(v994, (float32x4_t)vrev64q_s32(vuzp1q_s32(v995, v996))), (float32x4_t)vextq_s8((int8x16_t)v996, (int8x16_t)vrev64q_s32(v996), 8uLL), v907);
      v989.i64[0] = 0x4000000040000000;
      v989.i64[1] = 0x4000000040000000;
      float32x4_t v1001 = vmlaq_f32(v908, v989, (float32x4_t)vrev64q_s32(vuzp1q_s32(v997, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v997, 0xCuLL))));
      float32x4_t v1002 = vmlaq_f32(v910, v989, (float32x4_t)vrev64q_s32(vuzp1q_s32(v998, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v998, 0xCuLL))));
      float32x4_t v1003 = vmlaq_f32(v911, v989, (float32x4_t)vrev64q_s32(vuzp1q_s32(v999, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v999, 0xCuLL))));
      float32x4_t v1004 = vmlaq_f32(v1439, v989, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1000, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1000, 0xCuLL))));
      if ((v5 & 8) != 0)
      {
        float32x4_t v1011 = vmulq_f32(v1552, v1552);
        int32x4_t v1012 = (int32x4_t)vmulq_f32(v1548, v1548);
        float32x4_t v1013 = vmulq_f32(v1550, v1550);
        float32x4_t v1014 = vmulq_f32(v24, v24);
        v1015.i64[0] = vzip1q_s32((int32x4_t)v1011, v1012).u64[0];
        v1015.i64[1] = __PAIR64__(v1014.u32[0], v1013.u32[0]);
        v1016.i64[0] = vtrn2q_s32((int32x4_t)v1011, v1012).u64[0];
        v1016.i64[1] = __PAIR64__(v1014.u32[1], v1013.u32[1]);
        v1011.i64[0] = vzip2q_s32((int32x4_t)v1011, v1012).u64[0];
        v1011.i64[1] = __PAIR64__(v1014.u32[2], v1013.u32[2]);
        __asm { FMOV            V7.4S, #1.0 }
        float32x4_t v1018 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v1011, vaddq_f32(v1015, v1016))));
        float32x4_t v1019 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1552), v1018.f32[0]), v1001);
        int32x4_t v1020 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v1018.f32, 1), v1002);
        float32x4_t v1021 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1550), v1018, 2), v1003);
        float32x4_t v1022 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v24), v1018, 3), v1004);
        v1013.i64[0] = vzip1q_s32((int32x4_t)v1019, v1020).u64[0];
        v1013.i64[1] = __PAIR64__(v1022.u32[0], v1021.u32[0]);
        v1014.i64[0] = vtrn2q_s32((int32x4_t)v1019, v1020).u64[0];
        v1014.i64[1] = __PAIR64__(v1022.u32[1], v1021.u32[1]);
        v1019.i64[0] = vzip2q_s32((int32x4_t)v1019, v1020).u64[0];
        v1019.i64[1] = __PAIR64__(v1022.u32[2], v1021.u32[2]);
        float32x4_t v1005 = vaddq_f32(v1019, vaddq_f32(v1013, v1014));
      }
      else
      {
        v1005.i64[0] = vzip2q_s32((int32x4_t)v1001, (int32x4_t)v1002).u64[0];
        v1005.i64[1] = __PAIR64__(v1004.u32[2], v1003.u32[2]);
      }
      float32x4_t v980 = v1401;
      float32x4_t v979 = v1410;
      float v9 = 1.0;
    }
    else
    {
      if (v1281)
      {
        if ((v5 & 8) != 0)
        {
          float32x4_t v1181 = vmulq_f32(v1552, v1552);
          int32x4_t v1182 = (int32x4_t)vmulq_f32(v1548, v1548);
          float32x4_t v1183 = vmulq_f32(v1550, v1550);
          v1184.i64[0] = vzip1q_s32((int32x4_t)v1181, v1182).u64[0];
          v1184.i32[2] = v1183.i32[0];
          float32x4_t v1185 = vmulq_f32(v24, v24);
          v1184.i32[3] = v1185.i32[0];
          v1186.i64[0] = vtrn2q_s32((int32x4_t)v1181, v1182).u64[0];
          v1186.i64[1] = __PAIR64__(v1185.u32[1], v1183.u32[1]);
          v1181.i64[0] = vzip2q_s32((int32x4_t)v1181, v1182).u64[0];
          v1181.i64[1] = __PAIR64__(v1185.u32[2], v1183.u32[2]);
          __asm { FMOV            V16.4S, #1.0 }
          float32x4_t v1188 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v1181, vaddq_f32(v1184, v1186))));
          float32x4_t v981 = vmulq_n_f32(vnegq_f32(v1552), v1188.f32[0]);
          float32x4_t v982 = vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v1188.f32, 1);
          float32x4_t v983 = vmulq_laneq_f32(vnegq_f32(v1550), v1188, 2);
          float32x4_t v984 = vmulq_laneq_f32(vnegq_f32(v24), v1188, 3);
        }
        else
        {
          float32x4_t v981 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v982 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v983 = (float32x4_t)xmmword_227DC2100;
          float32x4_t v984 = (float32x4_t)xmmword_227DC2100;
        }
        float32x4_t v1189 = vaddq_f32(v908, v981);
        float32x4_t v1190 = vaddq_f32(v910, v982);
        float32x4_t v1191 = vaddq_f32(v911, v983);
        float32x4_t v1192 = vaddq_f32(v1439, v984);
        float32x4_t v1193 = vmulq_f32(v1189, v1189);
        int32x4_t v1194 = (int32x4_t)vmulq_f32(v1190, v1190);
        float32x4_t v1195 = vmulq_f32(v1191, v1191);
        v1196.i64[0] = vzip1q_s32((int32x4_t)v1193, v1194).u64[0];
        v1196.i32[2] = v1195.i32[0];
        float32x4_t v1197 = vmulq_f32(v1192, v1192);
        v1196.i32[3] = v1197.i32[0];
        v1198.i64[0] = vtrn2q_s32((int32x4_t)v1193, v1194).u64[0];
        v1198.i64[1] = __PAIR64__(v1197.u32[1], v1195.u32[1]);
        v1193.i64[0] = vzip2q_s32((int32x4_t)v1193, v1194).u64[0];
        v1193.i64[1] = __PAIR64__(v1197.u32[2], v1195.u32[2]);
        __asm { FMOV            V17.4S, #1.0 }
        float32x4_t v1200 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v1193, vaddq_f32(v1196, v1198))));
        float32x4_t v1023 = vmulq_n_f32(v1189, v1200.f32[0]);
        float32x4_t v1024 = vmulq_lane_f32(v1190, *(float32x2_t *)v1200.f32, 1);
        float32x4_t v1025 = vmulq_laneq_f32(v1191, v1200, 2);
        float32x4_t v1026 = vmulq_laneq_f32(v1192, v1200, 3);
      }
      else
      {
        float32x4_t v1023 = *(float32x4_t *)(v4 + 13632);
        float32x4_t v1024 = v1023;
        float32x4_t v1025 = v1023;
        float32x4_t v1026 = v1023;
      }
      float32x4_t v1201 = vmulq_f32(v904, v1023);
      int32x4_t v1202 = (int32x4_t)vmulq_f32(v905, v1024);
      float32x4_t v1203 = vmulq_f32(v906, v1025);
      float32x4_t v1204 = vmulq_f32(v907, v1026);
      v1205.i64[0] = vzip1q_s32((int32x4_t)v1201, v1202).u64[0];
      v1205.i64[1] = __PAIR64__(v1204.u32[0], v1203.u32[0]);
      v1206.i64[0] = vtrn2q_s32((int32x4_t)v1201, v1202).u64[0];
      v1206.i64[1] = __PAIR64__(v1204.u32[1], v1203.u32[1]);
      v1201.i64[0] = vzip2q_s32((int32x4_t)v1201, v1202).u64[0];
      v1201.i64[1] = __PAIR64__(v1204.u32[2], v1203.u32[2]);
      float32x4_t v1005 = vaddq_f32(v1201, vaddq_f32(v1205, v1206));
    }
    if (v959.f32[0] <= 0.0) {
      float v1207 = 0.0;
    }
    else {
      float v1207 = v1005.f32[0];
    }
    if (v959.f32[1] <= 0.0) {
      float v1208 = 0.0;
    }
    else {
      float v1208 = v1005.f32[1];
    }
    if (v959.f32[2] <= 0.0) {
      float v1209 = 0.0;
    }
    else {
      float v1209 = v1005.f32[2];
    }
    if (v959.f32[3] <= 0.0) {
      float v1210 = 0.0;
    }
    else {
      float v1210 = v1005.f32[3];
    }
    if (v1207 <= 0.0 && v1208 <= 0.0 && v1209 <= 0.0 && v1210 <= 0.0)
    {
      float32x4_t v1212 = v1418;
      float32x4_t v1211 = v1427;
      if (!v1445) {
        goto LABEL_621;
      }
LABEL_620:
      float32x4_t v1211 = vmulq_n_f32(v1211, v909.f32[0]);
      float32x4_t v1212 = vmulq_lane_f32(v1212, *(float32x2_t *)v909.f32, 1);
      float32x4_t v979 = vmulq_laneq_f32(v979, v909, 2);
      float32x4_t v980 = vmulq_laneq_f32(v980, v909, 3);
      goto LABEL_621;
    }
    float32x4_t v1443 = v909;
    float32x4_t v1497 = v28;
    float32x4_t v1513 = v27;
    float32x4_t v1529 = v26;
    float32x4_t v1545 = v25;
    float32x4_t v1465 = v8;
    float v1213 = fmaxf(v1208, 0.0);
    float v1214 = fmaxf(v1209, 0.0);
    float v1215 = v17[4].f32[0];
    float v1216 = fmaxf(v1210, 0.0);
    float v1217 = v18[4].f32[0];
    float v1218 = v19[4].f32[0];
    float v1219 = v19;
    LODWORD(v1390) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(fmaxf(v1207, 0.0), v1547[4].f32[0]));
    LODWORD(v1376) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1213, v1215));
    LODWORD(v1362) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1214, v1217));
    a1 = (*(uint64_t (**)(float, float))(v4 + 560))(v1216, v1218);
    if ((v6 & 0x800) != 0)
    {
      float32x4_t v1225 = *(float32x4_t *)(v4 + 13536);
      float32x4_t v1221 = vmulq_f32(v1225, v11[13]);
      float32x4_t v1222 = vmulq_f32(v1225, v12[13]);
      float32x4_t v1223 = vmulq_f32(v1225, v13[13]);
      float32x4_t v1224 = vmulq_f32(v1225, v14[13]);
    }
    else
    {
      float32x4_t v1221 = v1547[25];
      float32x4_t v1222 = v17[25];
      float32x4_t v1223 = v18[25];
      float32x4_t v1224 = v1219[25];
    }
    float v19 = v1219;
    float32x4_t v909 = v1443;
    float32x4_t v1212 = v1418;
    float32x4_t v1211 = v1427;
    float32x4_t v980 = v1401;
    float32x4_t v979 = v1410;
    float32x4_t v1226 = vmulq_n_f32(v1221, v1390);
    float32x4_t v1227 = vmulq_n_f32(v1222, v1376);
    float32x4_t v1228 = vmulq_n_f32(v1223, v1362);
    float32x4_t v1229 = vmulq_n_f32(v1224, v1220);
    LOWORD(v5) = v1429;
    unint64_t v8 = v1465;
    float32x4_t v26 = v1529;
    float32x4_t v25 = v1545;
    float32x4_t v28 = v1497;
    float32x4_t v27 = v1513;
    float32x4_t v24 = v1479;
    if ((v1429 & 0x10) != 0)
    {
      if (v1445)
      {
        float32x4_t v1226 = vmulq_n_f32(v1226, v1443.f32[0]);
        float32x4_t v1227 = vmulq_lane_f32(v1227, *(float32x2_t *)v1443.f32, 1);
        float32x4_t v1228 = vmulq_laneq_f32(v1228, v1443, 2);
        float32x4_t v1229 = vmulq_laneq_f32(v1229, v1443, 3);
      }
      float32x4_t v1474 = vaddq_f32(v1474, v1227);
      float32x4_t v1477 = vaddq_f32(v1477, v1226);
      float32x4_t v1469 = vaddq_f32(v1469, v1229);
      float32x4_t v1471 = vaddq_f32(v1471, v1228);
      if (v1445) {
        goto LABEL_620;
      }
    }
    else
    {
      float32x4_t v1211 = vaddq_f32(v1427, v1226);
      float32x4_t v1212 = vaddq_f32(v1418, v1227);
      float32x4_t v979 = vaddq_f32(v1410, v1228);
      float32x4_t v980 = vaddq_f32(v1401, v1229);
      if (v1445) {
        goto LABEL_620;
      }
    }
LABEL_621:
    float32x4_t v25 = vaddq_f32(v25, v1211);
    float32x4_t v26 = vaddq_f32(v26, v1212);
    float32x4_t v27 = vaddq_f32(v27, v979);
    float32x4_t v28 = vaddq_f32(v28, v980);
    if ((v6 & 0x80) == 0) {
      goto LABEL_655;
    }
LABEL_545:
    float32x4_t v1059 = v11[7];
    float32x4_t v1060 = v12[7];
    float32x4_t v1061 = v13[7];
    float32x4_t v1062 = v14[7];
    if ((v5 & 2) != 0)
    {
      float32x4_t v1059 = vnegq_f32(v1059);
      float32x4_t v1060 = vnegq_f32(v1060);
      float32x4_t v1061 = vnegq_f32(v1061);
      float32x4_t v1062 = vnegq_f32(v1062);
    }
    float32x4_t v1063 = *(float32x4_t *)(v4 + 13760);
    float32x4_t v1064 = 0uLL;
    if ((v5 & 0x8000) != 0)
    {
      float32x4_t v1084 = vsubq_f32(v1063, v1552);
      float32x4_t v1085 = vsubq_f32(v1063, v1548);
      float32x4_t v1086 = vsubq_f32(v1063, v1550);
      float32x4_t v1087 = vsubq_f32(v1063, v24);
      float32x4_t v1088 = vmulq_f32(v1084, v1084);
      int32x4_t v1089 = (int32x4_t)vmulq_f32(v1085, v1085);
      float32x4_t v1090 = vmulq_f32(v1086, v1086);
      v1091.i64[0] = vzip1q_s32((int32x4_t)v1088, v1089).u64[0];
      v1091.i32[2] = v1090.i32[0];
      float32x4_t v1092 = vmulq_f32(v1087, v1087);
      v1091.i32[3] = v1092.i32[0];
      v1093.i64[0] = vtrn2q_s32((int32x4_t)v1088, v1089).u64[0];
      v1093.i64[1] = __PAIR64__(v1092.u32[1], v1090.u32[1]);
      v1088.i64[0] = vzip2q_s32((int32x4_t)v1088, v1089).u64[0];
      v1088.i64[1] = __PAIR64__(v1092.u32[2], v1090.u32[2]);
      float32x4_t v1094 = vsqrtq_f32(vaddq_f32(v1088, vaddq_f32(v1091, v1093)));
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v1096 = vdivq_f32(_Q0, v1094);
      float32x4_t v1063 = vmulq_n_f32(v1084, v1096.f32[0]);
      float32x4_t v1065 = vmulq_lane_f32(v1085, *(float32x2_t *)v1096.f32, 1);
      float32x4_t v1066 = vmulq_laneq_f32(v1086, v1096, 2);
      float32x4_t v1067 = vmulq_laneq_f32(v1087, v1096, 3);
      if ((v6 & 0x80000000) != 0)
      {
        float32x4_t v1101 = vdivq_f32(_Q0, v1096);
        float32x4_t v1102 = v1289;
        float32x4_t v1103 = vld1q_dup_f32(v1102);
        float32x4_t v1104 = v1288;
        float32x4_t v1105 = vld1q_dup_f32(v1104);
        float32x4_t v1064 = vdivq_f32(_Q0, vmlaq_f32(v1103, vmlaq_n_f32(v1105, v1101, *(float *)(v4 + 13752)), v1101));
        if ((v6 & 0x800000) == 0)
        {
LABEL_554:
          if (!v1444) {
            goto LABEL_559;
          }
          goto LABEL_555;
        }
      }
      else if ((v6 & 0x800000) == 0)
      {
        goto LABEL_554;
      }
    }
    else
    {
      float32x4_t v1065 = *(float32x4_t *)(v4 + 13760);
      float32x4_t v1066 = v1065;
      float32x4_t v1067 = v1065;
      if ((v6 & 0x800000) == 0) {
        goto LABEL_554;
      }
    }
    float32x4_t v1068 = vnegq_f32(*(float32x4_t *)(v4 + 13776));
    float32x4_t v1069 = vmulq_f32(v1063, v1068);
    int32x4_t v1070 = (int32x4_t)vmulq_f32(v1065, v1068);
    float32x4_t v1071 = vmulq_f32(v1066, v1068);
    float32x4_t v1072 = vmulq_f32(v1067, v1068);
    v1073.i64[0] = vzip1q_s32((int32x4_t)v1069, v1070).u64[0];
    v1073.i64[1] = __PAIR64__(v1072.u32[0], v1071.u32[0]);
    v1074.i64[0] = vtrn2q_s32((int32x4_t)v1069, v1070).u64[0];
    v1074.i64[1] = __PAIR64__(v1072.u32[1], v1071.u32[1]);
    v1069.i64[0] = vzip2q_s32((int32x4_t)v1069, v1070).u64[0];
    v1069.i64[1] = __PAIR64__(v1072.u32[2], v1071.u32[2]);
    float32x4_t v1075 = vaddq_f32(v1069, vaddq_f32(v1073, v1074));
    float32x4_t v1076 = v1312;
    float32x4_t v1077 = vld1q_dup_f32(v1076);
    int8x16_t v1078 = (int8x16_t)vcgeq_f32(v1075, v1077);
    int32x4_t v1079 = (int32x4_t)vmvnq_s8(v1078);
    *(int16x4_t *)v1079.i8 = vcltz_s16(vshl_n_s16(vmovn_s32(v1079), 0xFuLL));
    if (vminv_u16(*(uint16x4_t *)v1079.i8))
    {
      float32x4_t v1064 = 0uLL;
      if (!v1444) {
        goto LABEL_559;
      }
    }
    else
    {
      v1079.i32[0] = 0;
      int8x16_t v1348 = v1078;
      float32x4_t v1360 = v1065;
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v1340 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v1079, v1304), 0), (int8x16_t)v1064, _Q1);
      float v1081 = *(float *)(v4 + 13756);
      float32x4_t v1527 = v26;
      float32x4_t v1543 = v25;
      float32x4_t v1495 = v28;
      float32x4_t v1511 = v27;
      float32x4_t v1402 = v1063;
      float32x4_t v1374 = v1066;
      float32x4_t v1388 = v1067;
      float32x4_t v1463 = v1075;
      unsigned int v1333 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1075.f32[0], v1081));
      unsigned int v1326 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1463.f32[1], v1081));
      unsigned int v1319 = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1463.f32[2], v1081));
      *(float *)&unsigned int v1082 = (*(float (**)(float, float))(v4 + 560))(v1463.f32[3], v1081);
      float32x4_t v1065 = v1360;
      float32x4_t v1066 = v1374;
      float32x4_t v1067 = v1388;
      float32x4_t v1063 = v1402;
      float32x4_t v24 = v1479;
      float32x4_t v28 = v1495;
      float32x4_t v27 = v1511;
      float32x4_t v26 = v1527;
      float32x4_t v25 = v1543;
      float v19 = v1481;
      v1083.i64[0] = __PAIR64__(v1326, v1333);
      v1083.i64[1] = __PAIR64__(v1082, v1319);
      float32x4_t v1064 = vmulq_f32(v1340, (float32x4_t)vandq_s8(v1083, v1348));
      if (!v1444) {
        goto LABEL_559;
      }
    }
LABEL_555:
    if (v1064.f32[0] <= 0.0 && v1064.f32[1] <= 0.0 && v1064.f32[2] <= 0.0 && v1064.f32[3] <= 0.0) {
      goto LABEL_655;
    }
LABEL_559:
    if (v1554)
    {
      if ((v6 & 0x200) != 0)
      {
        float32x4_t v1106 = *(float32x4_t *)(v4 + 13664);
        float32x4_t v1097 = vmulq_f32(v1106, v11[13]);
        float32x4_t v1098 = vmulq_f32(v1106, v12[13]);
        float32x4_t v1099 = vmulq_f32(v1106, v13[13]);
        float32x4_t v1100 = vmulq_f32(v1106, v14[13]);
      }
      else
      {
        float32x4_t v1097 = v1547[26];
        float32x4_t v1098 = v17[26];
        float32x4_t v1099 = v18[26];
        float32x4_t v1100 = v19[26];
      }
    }
    else
    {
      float32x4_t v1100 = 0uLL;
      float32x4_t v1099 = 0uLL;
      float32x4_t v1098 = 0uLL;
      float32x4_t v1097 = 0uLL;
    }
    float32x4_t v1107 = vmulq_f32(v1059, v1063);
    int32x4_t v1108 = (int32x4_t)vmulq_f32(v1060, v1065);
    float32x4_t v1109 = vmulq_f32(v1061, v1066);
    float32x4_t v1110 = vmulq_f32(v1062, v1067);
    v1111.i64[0] = vzip1q_s32((int32x4_t)v1107, v1108).u64[0];
    v1111.i64[1] = __PAIR64__(v1110.u32[0], v1109.u32[0]);
    v1112.i64[0] = vtrn2q_s32((int32x4_t)v1107, v1108).u64[0];
    v1112.i64[1] = __PAIR64__(v1110.u32[1], v1109.u32[1]);
    v1107.i64[0] = vzip2q_s32((int32x4_t)v1107, v1108).u64[0];
    v1107.i64[1] = __PAIR64__(v1110.u32[2], v1109.u32[2]);
    float32x4_t v1113 = vaddq_f32(v1107, vaddq_f32(v1111, v1112));
    if (v1113.f32[0] > 0.0 || v1113.f32[1] > 0.0 || v1113.f32[2] > 0.0 || v1113.f32[3] > 0.0)
    {
      if ((v6 & 0x400) != 0)
      {
        float32x4_t v1130 = *(float32x4_t *)(v4 + 13680);
        float32x4_t v1114 = vmulq_f32(v1130, v11[13]);
        float32x4_t v1115 = vmulq_f32(v1130, v12[13]);
        float32x4_t v1116 = vmulq_f32(v1130, v13[13]);
        float32x4_t v1117 = vmulq_f32(v1130, v14[13]);
      }
      else
      {
        float32x4_t v1114 = v1547[27];
        float32x4_t v1115 = v17[27];
        float32x4_t v1116 = v18[27];
        float32x4_t v1117 = v19[27];
      }
      float32x4_t v1131 = vmulq_n_f32(v1114, fmaxf(v1113.f32[0], 0.0));
      float32x4_t v1132 = vmulq_n_f32(v1115, fmaxf(v1113.f32[1], 0.0));
      float32x4_t v1133 = vmulq_n_f32(v1116, fmaxf(v1113.f32[2], 0.0));
      float32x4_t v1134 = vmulq_n_f32(v1117, fmaxf(v1113.f32[3], 0.0));
      if (v1554)
      {
        float32x4_t v1131 = vaddq_f32(v1097, v1131);
        float32x4_t v1132 = vaddq_f32(v1098, v1132);
        float32x4_t v1133 = vaddq_f32(v1099, v1133);
        float32x4_t v1134 = vaddq_f32(v1100, v1134);
      }
      float32x4_t v1482 = v1131;
      float32x4_t v1442 = v1132;
      float32x4_t v1419 = v1134;
      float32x4_t v1428 = v1133;
      if ((v5 & 0x20) != 0)
      {
        float32x4_t v1139 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1059, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1059, 0xCuLL)));
        int32x4_t v1140 = (int32x4_t)vmlsq_f32(vmulq_f32(v1139, v1063), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1063, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1063, 0xCuLL))), v1059);
        int32x4_t v1141 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1140, 0xCuLL);
        float32x4_t v1142 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1060, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1060, 0xCuLL)));
        float32x4_t v1143 = vmlsq_f32(vmulq_f32(v1142, v1065), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1065, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1065, 0xCuLL))), v1060);
        int32x4_t v1144 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1143, 0xCuLL);
        float32x4_t v1145 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1061, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1061, 0xCuLL)));
        int32x4_t v1146 = (int32x4_t)vmlsq_f32(vmulq_f32(v1145, v1066), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1066, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1066, 0xCuLL))), v1061);
        int32x4_t v1147 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1146, 0xCuLL);
        float32x4_t v1148 = (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1062, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1062, 0xCuLL)));
        int32x4_t v1149 = (int32x4_t)vmlsq_f32(vmulq_f32(v1148, v1067), (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1067, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1067, 0xCuLL))), v1062);
        int32x4_t v1150 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1149, 0xCuLL);
        int32x4_t v1151 = (int32x4_t)vmlsq_f32(vmulq_f32(v1139, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1140, v1141))), (float32x4_t)vextq_s8((int8x16_t)v1141, (int8x16_t)vrev64q_s32(v1141), 8uLL), v1059);
        int32x4_t v1152 = (int32x4_t)vmlsq_f32(vmulq_f32(v1142, (float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v1143, v1144))), (float32x4_t)vextq_s8((int8x16_t)v1144, (int8x16_t)vrev64q_s32(v1144), 8uLL), v1060);
        int32x4_t v1153 = (int32x4_t)vmlsq_f32(vmulq_f32(v1145, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1146, v1147))), (float32x4_t)vextq_s8((int8x16_t)v1147, (int8x16_t)vrev64q_s32(v1147), 8uLL), v1061);
        int32x4_t v1154 = (int32x4_t)vmlsq_f32(vmulq_f32(v1148, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1149, v1150))), (float32x4_t)vextq_s8((int8x16_t)v1150, (int8x16_t)vrev64q_s32(v1150), 8uLL), v1062);
        v1143.i64[0] = 0x4000000040000000;
        v1143.i64[1] = 0x4000000040000000;
        float32x4_t v1155 = vmlaq_f32(v1063, v1143, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1151, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1151, 0xCuLL))));
        float32x4_t v1156 = vmlaq_f32(v1065, v1143, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1152, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1152, 0xCuLL))));
        float32x4_t v1157 = vmlaq_f32(v1066, v1143, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1153, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1153, 0xCuLL))));
        float32x4_t v1158 = vmlaq_f32(v1067, v1143, (float32x4_t)vrev64q_s32(vuzp1q_s32(v1154, (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v1154, 0xCuLL))));
        if ((v5 & 8) != 0)
        {
          float32x4_t v1165 = vmulq_f32(v1552, v1552);
          int32x4_t v1166 = (int32x4_t)vmulq_f32(v1548, v1548);
          float32x4_t v1167 = vmulq_f32(v1550, v1550);
          float32x4_t v1168 = vmulq_f32(v24, v24);
          v1169.i64[0] = vzip1q_s32((int32x4_t)v1165, v1166).u64[0];
          v1169.i64[1] = __PAIR64__(v1168.u32[0], v1167.u32[0]);
          v1170.i64[0] = vtrn2q_s32((int32x4_t)v1165, v1166).u64[0];
          v1170.i64[1] = __PAIR64__(v1168.u32[1], v1167.u32[1]);
          v1165.i64[0] = vzip2q_s32((int32x4_t)v1165, v1166).u64[0];
          v1165.i64[1] = __PAIR64__(v1168.u32[2], v1167.u32[2]);
          __asm { FMOV            V7.4S, #1.0 }
          float32x4_t v1172 = vdivq_f32(_Q7, vsqrtq_f32(vaddq_f32(v1165, vaddq_f32(v1169, v1170))));
          float32x4_t v1173 = vmulq_f32(vmulq_n_f32(vnegq_f32(v1552), v1172.f32[0]), v1155);
          int32x4_t v1174 = (int32x4_t)vmulq_f32(vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v1172.f32, 1), v1156);
          float32x4_t v1175 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v1550), v1172, 2), v1157);
          float32x4_t v1176 = vmulq_f32(vmulq_laneq_f32(vnegq_f32(v24), v1172, 3), v1158);
          v1167.i64[0] = vzip1q_s32((int32x4_t)v1173, v1174).u64[0];
          v1167.i64[1] = __PAIR64__(v1176.u32[0], v1175.u32[0]);
          v1168.i64[0] = vtrn2q_s32((int32x4_t)v1173, v1174).u64[0];
          v1168.i64[1] = __PAIR64__(v1176.u32[1], v1175.u32[1]);
          v1173.i64[0] = vzip2q_s32((int32x4_t)v1173, v1174).u64[0];
          v1173.i64[1] = __PAIR64__(v1176.u32[2], v1175.u32[2]);
          float32x4_t v1159 = vaddq_f32(v1173, vaddq_f32(v1167, v1168));
        }
        else
        {
          v1159.i64[0] = vzip2q_s32((int32x4_t)v1155, (int32x4_t)v1156).u64[0];
          v1159.i64[1] = __PAIR64__(v1158.u32[2], v1157.u32[2]);
        }
        float32x4_t v1134 = v1419;
        float32x4_t v1133 = v1428;
        float v9 = 1.0;
      }
      else
      {
        if (v1280)
        {
          if ((v5 & 8) != 0)
          {
            float32x4_t v1230 = vmulq_f32(v1552, v1552);
            int32x4_t v1231 = (int32x4_t)vmulq_f32(v1548, v1548);
            float32x4_t v1232 = vmulq_f32(v1550, v1550);
            v1233.i64[0] = vzip1q_s32((int32x4_t)v1230, v1231).u64[0];
            v1233.i32[2] = v1232.i32[0];
            float32x4_t v1234 = vmulq_f32(v24, v24);
            v1233.i32[3] = v1234.i32[0];
            v1235.i64[0] = vtrn2q_s32((int32x4_t)v1230, v1231).u64[0];
            v1235.i64[1] = __PAIR64__(v1234.u32[1], v1232.u32[1]);
            v1230.i64[0] = vzip2q_s32((int32x4_t)v1230, v1231).u64[0];
            v1230.i64[1] = __PAIR64__(v1234.u32[2], v1232.u32[2]);
            __asm { FMOV            V16.4S, #1.0 }
            float32x4_t v1237 = vdivq_f32(_Q16, vsqrtq_f32(vaddq_f32(v1230, vaddq_f32(v1233, v1235))));
            float32x4_t v1135 = vmulq_n_f32(vnegq_f32(v1552), v1237.f32[0]);
            float32x4_t v1136 = vmulq_lane_f32(vnegq_f32(v1548), *(float32x2_t *)v1237.f32, 1);
            float32x4_t v1137 = vmulq_laneq_f32(vnegq_f32(v1550), v1237, 2);
            float32x4_t v1138 = vmulq_laneq_f32(vnegq_f32(v24), v1237, 3);
          }
          else
          {
            float32x4_t v1135 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v1136 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v1137 = (float32x4_t)xmmword_227DC2100;
            float32x4_t v1138 = (float32x4_t)xmmword_227DC2100;
          }
          float32x4_t v1238 = vaddq_f32(v1063, v1135);
          float32x4_t v1239 = vaddq_f32(v1065, v1136);
          float32x4_t v1240 = vaddq_f32(v1066, v1137);
          float32x4_t v1241 = vaddq_f32(v1067, v1138);
          float32x4_t v1242 = vmulq_f32(v1238, v1238);
          int32x4_t v1243 = (int32x4_t)vmulq_f32(v1239, v1239);
          float32x4_t v1244 = vmulq_f32(v1240, v1240);
          v1245.i64[0] = vzip1q_s32((int32x4_t)v1242, v1243).u64[0];
          v1245.i32[2] = v1244.i32[0];
          float32x4_t v1246 = vmulq_f32(v1241, v1241);
          v1245.i32[3] = v1246.i32[0];
          v1247.i64[0] = vtrn2q_s32((int32x4_t)v1242, v1243).u64[0];
          v1247.i64[1] = __PAIR64__(v1246.u32[1], v1244.u32[1]);
          v1242.i64[0] = vzip2q_s32((int32x4_t)v1242, v1243).u64[0];
          v1242.i64[1] = __PAIR64__(v1246.u32[2], v1244.u32[2]);
          __asm { FMOV            V17.4S, #1.0 }
          float32x4_t v1249 = vdivq_f32(_Q17, vsqrtq_f32(vaddq_f32(v1242, vaddq_f32(v1245, v1247))));
          float32x4_t v1177 = vmulq_n_f32(v1238, v1249.f32[0]);
          float32x4_t v1178 = vmulq_lane_f32(v1239, *(float32x2_t *)v1249.f32, 1);
          float32x4_t v1179 = vmulq_laneq_f32(v1240, v1249, 2);
          float32x4_t v1180 = vmulq_laneq_f32(v1241, v1249, 3);
        }
        else
        {
          float32x4_t v1177 = *(float32x4_t *)(v4 + 13792);
          float32x4_t v1178 = v1177;
          float32x4_t v1179 = v1177;
          float32x4_t v1180 = v1177;
        }
        float32x4_t v1250 = vmulq_f32(v1059, v1177);
        int32x4_t v1251 = (int32x4_t)vmulq_f32(v1060, v1178);
        float32x4_t v1252 = vmulq_f32(v1061, v1179);
        float32x4_t v1253 = vmulq_f32(v1062, v1180);
        v1254.i64[0] = vzip1q_s32((int32x4_t)v1250, v1251).u64[0];
        v1254.i64[1] = __PAIR64__(v1253.u32[0], v1252.u32[0]);
        v1255.i64[0] = vtrn2q_s32((int32x4_t)v1250, v1251).u64[0];
        v1255.i64[1] = __PAIR64__(v1253.u32[1], v1252.u32[1]);
        v1250.i64[0] = vzip2q_s32((int32x4_t)v1250, v1251).u64[0];
        v1250.i64[1] = __PAIR64__(v1253.u32[2], v1252.u32[2]);
        float32x4_t v1159 = vaddq_f32(v1250, vaddq_f32(v1254, v1255));
      }
      if (v1113.f32[0] <= 0.0) {
        float v1256 = 0.0;
      }
      else {
        float v1256 = v1159.f32[0];
      }
      if (v1113.f32[1] <= 0.0) {
        float v1257 = 0.0;
      }
      else {
        float v1257 = v1159.f32[1];
      }
      if (v1113.f32[2] <= 0.0) {
        float v1258 = 0.0;
      }
      else {
        float v1258 = v1159.f32[2];
      }
      if (v1113.f32[3] <= 0.0) {
        float v1259 = 0.0;
      }
      else {
        float v1259 = v1159.f32[3];
      }
      if (v1256 > 0.0 || v1257 > 0.0 || v1258 > 0.0 || v1259 > 0.0)
      {
        float32x4_t v1553 = v1064;
        float32x4_t v1498 = v28;
        float32x4_t v1514 = v27;
        float32x4_t v1530 = v26;
        float32x4_t v1546 = v25;
        float32x4_t v1466 = v8;
        float v1263 = fmaxf(v1257, 0.0);
        float v1264 = fmaxf(v1258, 0.0);
        float v1265 = v17[4].f32[0];
        float v1266 = fmaxf(v1259, 0.0);
        float v1267 = v18[4].f32[0];
        float v1268 = v19[4].f32[0];
        float v1269 = v19;
        LODWORD(v1551) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(fmaxf(v1256, 0.0), v1547[4].f32[0]));
        LODWORD(v1549) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1263, v1265));
        LODWORD(v1480) = COERCE_UNSIGNED_INT64((*(double (**)(float, float))(v4 + 560))(v1264, v1267));
        a1 = (*(uint64_t (**)(float, float))(v4 + 560))(v1266, v1268);
        if ((v6 & 0x800) != 0)
        {
          float32x4_t v1275 = *(float32x4_t *)(v4 + 13696);
          float32x4_t v1271 = vmulq_f32(v1275, v11[13]);
          float32x4_t v1272 = vmulq_f32(v1275, v12[13]);
          float32x4_t v1273 = vmulq_f32(v1275, v13[13]);
          float32x4_t v1274 = vmulq_f32(v1275, v14[13]);
        }
        else
        {
          float32x4_t v1271 = v1547[28];
          float32x4_t v1272 = v17[28];
          float32x4_t v1273 = v18[28];
          float32x4_t v1274 = v1269[28];
        }
        float v19 = v1269;
        float32x4_t v1064 = v1553;
        float32x4_t v1261 = v1442;
        float32x4_t v1134 = v1419;
        float32x4_t v1133 = v1428;
        float32x4_t v1276 = vmulq_n_f32(v1271, v1551);
        float32x4_t v1277 = vmulq_n_f32(v1272, v1549);
        float32x4_t v1260 = v1482;
        float32x4_t v1278 = vmulq_n_f32(v1273, v1480);
        float32x4_t v1279 = vmulq_n_f32(v1274, v1270);
        LOWORD(v5) = v1429;
        unint64_t v8 = v1466;
        float32x4_t v26 = v1530;
        float32x4_t v25 = v1546;
        float32x4_t v28 = v1498;
        float32x4_t v27 = v1514;
        if ((v1429 & 0x10) != 0)
        {
          if (v1444)
          {
            float32x4_t v1276 = vmulq_n_f32(v1276, v1553.f32[0]);
            float32x4_t v1277 = vmulq_lane_f32(v1277, *(float32x2_t *)v1553.f32, 1);
            float32x4_t v1278 = vmulq_laneq_f32(v1278, v1553, 2);
            float32x4_t v1279 = vmulq_laneq_f32(v1279, v1553, 3);
          }
          float32x4_t v1474 = vaddq_f32(v1474, v1277);
          float32x4_t v1477 = vaddq_f32(v1477, v1276);
          float32x4_t v1469 = vaddq_f32(v1469, v1279);
          float32x4_t v1471 = vaddq_f32(v1471, v1278);
          if (!v1444) {
            goto LABEL_654;
          }
        }
        else
        {
          float32x4_t v1260 = vaddq_f32(v1482, v1276);
          float32x4_t v1261 = vaddq_f32(v1442, v1277);
          float32x4_t v1133 = vaddq_f32(v1428, v1278);
          float32x4_t v1134 = vaddq_f32(v1419, v1279);
          if (!v1444) {
            goto LABEL_654;
          }
        }
      }
      else
      {
        float32x4_t v1260 = v1482;
        float32x4_t v1261 = v1442;
        if (!v1444)
        {
LABEL_654:
          float32x4_t v25 = vaddq_f32(v25, v1260);
          float32x4_t v26 = vaddq_f32(v26, v1261);
          float32x4_t v27 = vaddq_f32(v27, v1133);
          float32x4_t v28 = vaddq_f32(v28, v1134);
          goto LABEL_655;
        }
      }
      float32x4_t v1260 = vmulq_n_f32(v1260, v1064.f32[0]);
      float32x4_t v1261 = vmulq_lane_f32(v1261, *(float32x2_t *)v1064.f32, 1);
      float32x4_t v1133 = vmulq_laneq_f32(v1133, v1064, 2);
      float32x4_t v1134 = vmulq_laneq_f32(v1134, v1064, 3);
      goto LABEL_654;
    }
    if (v1554)
    {
      if (v1444)
      {
        float32x4_t v1097 = vmulq_n_f32(v1097, v1064.f32[0]);
        float32x4_t v1098 = vmulq_lane_f32(v1098, *(float32x2_t *)v1064.f32, 1);
        float32x4_t v1099 = vmulq_laneq_f32(v1099, v1064, 2);
        float32x4_t v1100 = vmulq_laneq_f32(v1100, v1064, 3);
      }
      float32x4_t v25 = vaddq_f32(v25, v1097);
      float32x4_t v26 = vaddq_f32(v26, v1098);
      float32x4_t v27 = vaddq_f32(v27, v1099);
      float32x4_t v28 = vaddq_f32(v28, v1100);
    }
LABEL_655:
    v11[8] = v25;
    v12[8] = v26;
    v13[8] = v27;
    v14[8] = v28;
    if ((v6 & 0x400) != 0)
    {
      v11[8].i32[3] = v11[13].i32[3];
      v12[8].i32[3] = v12[13].i32[3];
      v13[8].i32[3] = v13[13].i32[3];
      float v1262 = &v14[13].i32[3];
    }
    else
    {
      if ((v6 & 0x3FF) == 0) {
        goto LABEL_660;
      }
      v11[8].i32[3] = v1547[29].i32[3];
      v12[8].i32[3] = v17[29].i32[3];
      v13[8].i32[3] = v18[29].i32[3];
      float v1262 = &v19[29].i32[3];
    }
    v14[8].i32[3] = *v1262;
LABEL_660:
    if ((v5 & 0x10) != 0)
    {
      v11[9] = v1477;
      v12[9] = v1474;
      v13[9] = v1471;
      v14[9] = v1469;
    }
    char v10 = v8 + 2;
    v8 += 4;
    unint64_t v7 = v1468;
  }
  while ((unint64_t)v10 < v1468);
}

uint64_t gleSetModelviewFunc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  gleBuildModelviewTransformFunc(a1, 0);
  unsigned __int32 v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 20112);

  return v6(a1, a2, a3);
}

uint64_t gleBuildModelviewTransformFunc(uint64_t result, int a2)
{
  if (a2 == 1) {
    int v2 = (*(unsigned __int8 *)(result + 29592) >> 1) & 0x30 | 0xC;
  }
  else {
    int v2 = 4;
  }
  if (*(unsigned char *)(result + 19234))
  {
    unsigned int v3 = *(unsigned __int8 *)(result + 29592);
    int v4 = v2 | 8;
    int v5 = ((v3 & 4) << 6) & 0xFF3F | ((v3 & 3) << 6) | v2;
    if ((v3 & 0x10) == 0) {
      int v5 = v4;
    }
    int v2 = v5 | (v3 >> 1) & 0x30;
  }
  if (*(unsigned char *)(result + 15379)) {
    v2 |= 0x4000u;
  }
  if (*(unsigned char *)(result + 17699) || *(unsigned char *)(result + 17697))
  {
    v2 |= 0x2400u;
    goto LABEL_13;
  }
  unsigned int v9 = *(_DWORD *)(result + 29724);
  if ((v2 & 2) != 0) {
    unsigned int v9 = *(_DWORD *)(result + 29724) & 0xFFFF00FF | 0xFB00;
  }
  if ((!*(unsigned char *)(result + 14890) || !*(_DWORD *)(result + 1448))
    && !*(unsigned char *)(result + 28744)
    && !*(unsigned char *)(result + 15378)
    && ((*(_DWORD *)(result + 23796) | *(_DWORD *)(result + 23792) | *(_DWORD *)(result + 23804)) & *(_DWORD *)(result + 23788)) == 0)
  {
    if ((*(unsigned char *)(result + 29592) & 0x60) == 0x20) {
      goto LABEL_13;
    }
    unsigned int v9 = v9 & 0xC0C0C0C | 0xB3E3F3F2;
  }
  int v10 = v2 | 0x2000;
  if ((~v9 & 0x3FCFF3FC) == 0) {
    int v10 = v2 | 0x1000;
  }
  if (v9 != -1074791426) {
    int v2 = v10;
  }
LABEL_13:
  if (a2 == 1)
  {
    int v6 = v2 | 0x800;
    int8x8_t v7 = *(int8x8_t *)(result + 23792);
LABEL_22:
    *(void *)(result + 20240) = gleLLVMVecModelRPos;
    *(void *)(result + 20248) = gleLLVMVecModelRPos;
    *(_DWORD *)(result + 20456) = v6;
    *(int8x8_t *)(result + 20460) = v7;
    return result;
  }
  if (*(unsigned char *)(result + 15378)) {
    int v6 = v2 | 0x200;
  }
  else {
    int v6 = v2;
  }
  if (*(_WORD *)(result + 29830) == 7169)
  {
    unsigned int v8 = 16843009;
  }
  else
  {
    unsigned int v8 = *(_DWORD *)(result + 23788);
    if (!v8)
    {
      int8x8_t v7 = 0;
      if (a2) {
        goto LABEL_22;
      }
      goto LABEL_37;
    }
  }
  int8x8_t v7 = vand_s8(*(int8x8_t *)(result + 23792), (int8x8_t)vdup_n_s32(v8));
  if (a2) {
    goto LABEL_22;
  }
LABEL_37:
  *(void *)(result + 20112) = gleLLVMVecModelTransform;
  *(void *)(result + 20120) = gleLLVMVecModelTransform;
  *(_DWORD *)(result + 20392) = v6;
  *(int8x8_t *)(result + 20396) = v7;
  return result;
}

uint64_t gleSetModelviewRPosFunc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  gleBuildModelviewTransformFunc(a1, 1);
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 20240);

  return v6(a1, a2, a3);
}

uint64_t gleLLVMVecModelTransform(unsigned int *a1, float32x4_t *a2, int a3, double a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, float32x4_t a11)
{
  return gleLLVMVecModel((uint64_t)a1, a2, a3, a1[5098], a1[5099], a1[5100], a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t gleLLVMVecModelRPos(unsigned int *a1, float32x4_t *a2, int a3, double a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, float32x4_t a11)
{
  return gleLLVMVecModel((uint64_t)a1, a2, a3, a1[5114], a1[5115], a1[5116], a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t gleLLVMVecModel(uint64_t result, float32x4_t *a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, double a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14)
{
  int v27 = a4 & 0xC0;
  if (a4 & 0x6C0 | a6 | a5)
  {
    if ((a4 & 0xC0) != 0)
    {
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v575 = _Q0;
      float32x4_t v577 = 0u;
      v32.i64[0] = 0x8000000080000000;
      v32.i64[1] = 0x8000000080000000;
      int8x16_t v590 = v32;
      switch(v27)
      {
        case 192:
          v32.i32[0] = *(_DWORD *)(result + 15244);
          a8 = vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.i8, 0));
          float32x4_t v35 = vmulq_n_f32(a8, *(float *)v32.i32);
          break;
        case 128:
          float32x4_t v36 = (const float *)(result + 15244);
          float32x4_t v35 = vld1q_dup_f32(v36);
          break;
        case 64:
          a8.i32[0] = *(_DWORD *)(result + 15256);
          a9 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.f32, 0);
          float32x4_t v619 = a9;
          *(float *)v32.i32 = *(float *)(result + 15252) * a8.f32[0];
          float32x4_t v577 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.i8, 0);
          goto LABEL_22;
        default:
          float32x4_t v35 = 0uLL;
          break;
      }
      goto LABEL_21;
    }
    float32x4_t v35 = 0uLL;
    float32x4_t v575 = 0u;
    int8x16_t v590 = 0u;
LABEL_17:
    float32x4_t v577 = v35;
LABEL_21:
    float32x4_t v619 = v35;
LABEL_22:
    float32x4_t v37 = 0uLL;
    float32x4_t v586 = 0u;
    float32x4_t v587 = 0u;
    float32x4_t v585 = 0u;
    float32x4_t v588 = 0u;
    float32x4_t v589 = 0u;
    float32x4_t v591 = 0u;
    if ((a4 & 0x200) != 0)
    {
      float32x4_t v38 = (const float *)(result + 15344);
      float32x4_t v39 = vld1q_dup_f32(v38);
      float32x4_t v591 = v39;
      float32x4_t v40 = (const float *)(result + 15348);
      float32x4_t v41 = vld1q_dup_f32(v40);
      float32x4_t v42 = (const float *)(result + 15352);
      float32x4_t v43 = vld1q_dup_f32(v42);
      float32x4_t v588 = v41;
      float32x4_t v589 = v43;
      float32x4_t v44 = (const float *)(result + 15360);
      a8 = vld1q_dup_f32(v44);
      float32x4_t v45 = (const float *)(result + 15364);
      float32x4_t v46 = vld1q_dup_f32(v45);
      float32x4_t v586 = v46;
      float32x4_t v587 = a8;
      float32x4_t v47 = (const float *)(result + 15368);
      float32x4_t v37 = vld1q_dup_f32(v47);
      float32x4_t v585 = v37;
    }
    int v618 = (a5 >> 1) & 0x1010101;
    int v617 = (a5 >> 2) & 0x1010101;
    int v616 = (a5 >> 3) & 0x1010101;
    int v615 = (a5 >> 4) & 0x1010101;
    int v614 = (a5 >> 5) & 0x1010101;
    int v613 = (a5 >> 6) & 0x1010101;
    int v612 = (a5 >> 7) & 0x1010101;
    int v48 = (a6 >> 1) & 0x1010101;
    int v49 = (a6 >> 2) & 0x1010101;
    int v50 = (a6 >> 3) & 0x1010101;
    int v51 = (a6 >> 4) & 0x1010101;
    int v52 = (a6 >> 5) & 0x1010101;
    int v53 = (a6 >> 6) & 0x1010101;
    int v54 = (a6 >> 7) & 0x1010101;
    if (!(a6 | a5)) {
      goto LABEL_98;
    }
    float32x4_t v55 = (__int32 *)(result + 16392);
    if (!(a6 & 0x1010101 | a5 & 0x1010101))
    {
LABEL_35:
      if (!(v48 | v618))
      {
LABEL_44:
        if (!(v49 | v617))
        {
LABEL_53:
          float32x4_t v92 = (__int32 *)(result + 16984);
          if (!(v50 | v616))
          {
LABEL_62:
            if (!(v51 | v615))
            {
LABEL_71:
              if (!(v52 | v614))
              {
LABEL_80:
                if (!(v53 | v613))
                {
LABEL_89:
                  if (!(v54 | v612)) {
                    goto LABEL_98;
                  }
                  if (!v54)
                  {
                    a10.i32[0] = (a5 >> 7) & 0x1010101;
                    *(int8x8_t *)a10.f32 = vcnt_s8(*(int8x8_t *)a10.f32);
                    a10.i16[0] = vaddlv_u8(*(uint8x8_t *)a10.f32);
                    if (a10.i32[0] >= 2u)
                    {
                      a10.i32[0] = *(_DWORD *)(result + 17444);
                      a12.i32[0] = *(_DWORD *)(result + 17448);
                      a14.i32[0] = *(_DWORD *)(result + 17452);
                      a11.i32[0] = *(_DWORD *)(result + 17456);
                      float32x4_t v141 = (unsigned __int32 *)(result + 17480);
                      float32x4_t v142 = (unsigned __int32 *)(result + 17484);
                      float32x4_t v143 = (unsigned __int32 *)(result + 17488);
                      float32x4_t v144 = (unsigned __int32 *)(result + 17492);
                      float32x4_t v145 = (unsigned __int32 *)(result + 17516);
                      int32x4_t v146 = (unsigned __int32 *)(result + 17520);
                      float32x4_t v147 = (unsigned __int32 *)(result + 17524);
                      float32x4_t v148 = (unsigned __int32 *)(result + 17528);
                      float32x4_t v149 = (unsigned __int32 *)(result + 17552);
                      float32x4_t v150 = (unsigned __int32 *)(result + 17556);
                      float32x4_t v151 = (unsigned __int32 *)(result + 17560);
                      float32x4_t v152 = (unsigned __int32 *)(result + 17564);
LABEL_97:
                      a10.i32[1] = *v141;
                      a10.i32[2] = *v145;
                      a10.i32[3] = *v149;
                      a12.i32[1] = *v142;
                      a12.i32[2] = *v146;
                      a12.i32[3] = *v150;
                      a14.i32[1] = *v143;
                      a14.i32[2] = *v147;
                      a14.i32[3] = *v151;
                      a11.i32[1] = *v144;
                      a11.i32[2] = *v148;
                      a11.i32[3] = *v152;
LABEL_98:
                      int v153 = a4 & 0x3000;
                      if ((a4 & 0x3000) != 0)
                      {
                        if (v153 == 4096)
                        {
                          v154.i32[0] = *(_DWORD *)(result + 9616);
                          v154.i32[1] = *(_DWORD *)(result + 9636);
                          if ((a4 & 2) != 0)
                          {
                            v154.i32[2] = *(_DWORD *)(result + 9616);
                            v154.i32[3] = *(_DWORD *)(result + 9676);
                            float32x4_t v576 = v154;
                            int32x4_t v155 = 0uLL;
                            float32x4_t v573 = 0u;
                            int v574 = 1;
                          }
                          else
                          {
                            int v574 = 0;
                            v154.i32[2] = *(_DWORD *)(result + 9656);
                            v154.i32[3] = *(_DWORD *)(result + 9676);
                            float32x4_t v576 = v154;
                            int32x4_t v155 = 0uLL;
                            float32x4_t v573 = 0u;
                          }
                          float32x4_t v571 = (float32x4_t)v155;
                          float32x4_t v572 = (float32x4_t)v155;
                        }
                        else
                        {
                          int v574 = a4 & 2;
                          float32x4_t v571 = 0u;
                          if ((a4 & 2) == 0) {
                            float32x4_t v571 = *(float32x4_t *)(result + 9648);
                          }
                          float32x4_t v576 = *(float32x4_t *)(result + 9616);
                          int32x4_t v155 = *(int32x4_t *)(result + 9664);
                          float32x4_t v572 = *(float32x4_t *)(result + 9632);
                          float32x4_t v573 = (float32x4_t)v155;
                        }
                      }
                      else
                      {
                        int v574 = a4 & 2;
                        v155.i32[1] = 0;
                        v155.i64[1] = 0;
                        float32x4_t v572 = 0u;
                        float32x4_t v573 = 0u;
                        float32x4_t v571 = 0u;
                        float32x4_t v576 = 0u;
                      }
                      __n128 result = 0;
                      BOOL v157 = (a4 & 0x400) == 0 || a5 != 0;
                      int v158 = a4 & 0x30;
                      if (v158 == 32) {
                        int v159 = 1;
                      }
                      else {
                        int v159 = (a4 >> 9) & 1;
                      }
                      unint64_t v160 = (unint64_t)&a2[40 * a3];
                      BOOL v162 = (a4 & 0xC0) != 0 && v158 == 16;
                      int v163 = a6 & 0x1010101;
                      BOOL v164 = (a6 & 0x1010101) != 0;
                      int v165 = a5 & 0x1010101;
                      BOOL v166 = (a5 & 0x1010101) != 0;
                      if ((v165 & (v165 - 1)) == 0) {
                        BOOL v164 = 1;
                      }
                      BOOL v584 = v164;
                      BOOL v167 = (a6 & 0x2020202) != 0;
                      if ((v618 & (v618 - 1)) == 0) {
                        BOOL v167 = 1;
                      }
                      BOOL v168 = (a6 & 0x4040404) != 0;
                      if ((v617 & (v617 - 1)) == 0) {
                        BOOL v168 = 1;
                      }
                      BOOL v583 = v168;
                      BOOL v169 = (a6 & 0x8080808) != 0;
                      if ((v616 & (v616 - 1)) == 0) {
                        BOOL v169 = 1;
                      }
                      BOOL v582 = v169;
                      BOOL v170 = (a6 & 0x10101010) != 0;
                      if ((v615 & (v615 - 1)) == 0) {
                        BOOL v170 = 1;
                      }
                      BOOL v581 = v170;
                      BOOL v171 = (a6 & 0x20202020) != 0;
                      if ((v614 & (v614 - 1)) == 0) {
                        BOOL v171 = 1;
                      }
                      BOOL v580 = v171;
                      BOOL v172 = (a6 & 0x40404040) != 0;
                      if ((v613 & (v613 - 1)) == 0) {
                        BOOL v172 = 1;
                      }
                      BOOL v579 = v172;
                      BOOL v173 = (a6 & 0x80808080) != 0;
                      if ((v612 & (v612 - 1)) == 0) {
                        BOOL v173 = 1;
                      }
                      BOOL v578 = v173;
                      if ((v163 & (v163 - 1)) == 0) {
                        BOOL v166 = 1;
                      }
                      BOOL v599 = v166;
                      BOOL v174 = (a5 & 0x2020202) != 0;
                      if ((v48 & (v48 - 1)) == 0) {
                        BOOL v174 = 1;
                      }
                      BOOL v598 = v174;
                      BOOL v175 = (a5 & 0x4040404) != 0;
                      if ((v49 & (v49 - 1)) == 0) {
                        BOOL v175 = 1;
                      }
                      BOOL v597 = v175;
                      BOOL v176 = (a5 & 0x8080808) != 0;
                      if ((v50 & (v50 - 1)) == 0) {
                        BOOL v176 = 1;
                      }
                      BOOL v596 = v176;
                      BOOL v177 = (a5 & 0x10101010) != 0;
                      if ((v51 & (v51 - 1)) == 0) {
                        BOOL v177 = 1;
                      }
                      BOOL v595 = v177;
                      BOOL v178 = (v52 & (v52 - 1)) == 0 || (a5 & 0x20202020) != 0;
                      BOOL v594 = v178;
                      BOOL v179 = (v53 & (v53 - 1)) == 0 || (a5 & 0x40404040) != 0;
                      BOOL v593 = v179;
                      v155.i32[0] = 32;
                      BOOL v180 = (v54 & (v54 - 1)) == 0 || (a5 & 0x80808080) != 0;
                      BOOL v592 = v180;
                      int32x4_t v181 = (int32x4_t)v589;
                      v181.i32[0] = a4 & 0x30;
                      int8x16_t v182 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v181, v155), 0);
                      int32x4_t v183 = a2;
                      while (1)
                      {
                        _X13 = &a2[160 * result];
                        __asm
                        {
                          PRFM            #0, [X13,#0xA60]
                          PRFM            #0, [X13,#0xCE0]
                          PRFM            #0, [X13,#0xF60]
                          PRFM            #0, [X13,#0x11E0]
                        }
                        if (!v157)
                        {
LABEL_328:
                          _X14 = _X13 + 301;
                          _X15 = _X13 + 261;
                          _X16 = _X13 + 221;
                          _X10 = _X13 + 181;
                          __asm { PRFM            #0, [X10] }
                          float32x4_t v208 = v183[21];
                          __asm { PRFM            #0, [X16] }
                          float32x4_t v209 = v183[61];
                          __asm { PRFM            #0, [X15] }
                          float32x4_t v210 = v183[101];
                          __asm { PRFM            #0, [X14] }
                          float32x4_t v211 = v183[141];
                          goto LABEL_329;
                        }
                        float32x4_t v208 = v183[6];
                        float32x4_t v209 = v183[46];
                        float32x4_t v210 = v183[86];
                        float32x4_t v211 = v183[126];
                        if (!a5) {
                          goto LABEL_551;
                        }
                        if (!v165) {
                          goto LABEL_187;
                        }
                        if (v584) {
                          break;
                        }
                        float32x4_t v212 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v611, v208.f32[0]), v610, *(float32x2_t *)v208.f32, 1), v609, v208, 2), v608, v208, 3);
                        float32x4_t v213 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v611, v209.f32[0]), v610, *(float32x2_t *)v209.f32, 1), v609, v209, 2), v608, v209, 3);
                        float32x4_t v214 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v611, v210.f32[0]), v610, *(float32x2_t *)v210.f32, 1), v609, v210, 2), v608, v210, 3);
                        float32x4_t v215 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v611, v211.f32[0]), v610, *(float32x2_t *)v211.f32, 1), v609, v211, 2), v608, v211, 3);
                        if (v165 == 16843009)
                        {
                          v183[14] = v212;
                          v183[54] = v213;
                          v183[94] = v214;
                          v183[134] = v215;
                          goto LABEL_187;
                        }
                        if ((a5 & 0x101) == 0x101)
                        {
                          v183[14].i64[0] = v212.i64[0];
                          v183[54].i64[0] = v213.i64[0];
                          v183[94].i64[0] = v214.i64[0];
                          v183[134].i64[0] = v215.i64[0];
                          if ((a5 & 0x10000) == 0) {
                            goto LABEL_185;
                          }
                        }
                        else if (a5)
                        {
                          v183[14].i32[0] = v212.i32[0];
                          v183[54].i32[0] = v213.i32[0];
                          v183[94].i32[0] = v214.i32[0];
                          v183[134].i32[0] = v215.i32[0];
                          if ((a5 & 0x10000) == 0) {
                            goto LABEL_185;
                          }
                        }
                        else if ((a5 & 0x100) != 0)
                        {
                          v183[14].i32[1] = v212.i32[1];
                          v183[54].i32[1] = v213.i32[1];
                          v183[94].i32[1] = v214.i32[1];
                          v183[134].i32[1] = v215.i32[1];
                          if ((a5 & 0x10000) == 0)
                          {
LABEL_185:
                            if ((a5 & 0x1000000) == 0) {
                              goto LABEL_187;
                            }
LABEL_186:
                            v183[14].i32[3] = v212.i32[3];
                            v183[54].i32[3] = v213.i32[3];
                            v183[94].i32[3] = v214.i32[3];
                            v183[134].i32[3] = v215.i32[3];
                            goto LABEL_187;
                          }
                        }
                        else if ((a5 & 0x10000) == 0)
                        {
                          goto LABEL_185;
                        }
                        v183[14].i32[2] = v212.i32[2];
                        v183[54].i32[2] = v213.i32[2];
                        v183[94].i32[2] = v214.i32[2];
                        v183[134].i32[2] = v215.i32[2];
                        if ((a5 & 0x1000000) != 0) {
                          goto LABEL_186;
                        }
LABEL_187:
                        if (!v618) {
                          goto LABEL_209;
                        }
                        if (v167)
                        {
                          if ((a5 & 2) != 0)
                          {
                            float32x4_t v236 = vmulq_f32(v607, v208);
                            float32x4_t v237 = vmulq_f32(v607, v209);
                            float32x4_t v238 = vmulq_f32(v607, v210);
                            float32x4_t v239 = vmulq_f32(v607, v211);
                            v183[15].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v236, (float32x4_t)vdupq_laneq_s64((int64x2_t)v236, 1)));
                            v183[55].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v237, (float32x4_t)vdupq_laneq_s64((int64x2_t)v237, 1)));
                            v183[95].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v238, (float32x4_t)vdupq_laneq_s64((int64x2_t)v238, 1)));
                            v183[135].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v239, (float32x4_t)vdupq_laneq_s64((int64x2_t)v239, 1)));
                            if ((a5 & 0x200) == 0) {
                              goto LABEL_191;
                            }
                          }
                          else if ((a5 & 0x200) == 0)
                          {
LABEL_191:
                            if ((a5 & 0x20000) != 0) {
                              goto LABEL_198;
                            }
LABEL_192:
                            if ((a5 & 0x2000000) != 0) {
                              goto LABEL_199;
                            }
                            goto LABEL_209;
                          }
                          float32x4_t v240 = vmulq_f32(v606, v208);
                          float32x4_t v241 = vmulq_f32(v606, v209);
                          float32x4_t v242 = vmulq_f32(v606, v210);
                          float32x4_t v243 = vmulq_f32(v606, v211);
                          v183[15].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v240, (float32x4_t)vdupq_laneq_s64((int64x2_t)v240, 1)));
                          v183[55].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v241, (float32x4_t)vdupq_laneq_s64((int64x2_t)v241, 1)));
                          v183[95].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v242, (float32x4_t)vdupq_laneq_s64((int64x2_t)v242, 1)));
                          v183[135].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v243, (float32x4_t)vdupq_laneq_s64((int64x2_t)v243, 1)));
                          if ((a5 & 0x20000) != 0)
                          {
LABEL_198:
                            float32x4_t v244 = vmulq_f32(v605, v208);
                            float32x4_t v245 = vmulq_f32(v605, v209);
                            float32x4_t v246 = vmulq_f32(v605, v210);
                            float32x4_t v247 = vmulq_f32(v605, v211);
                            v183[15].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v244, (float32x4_t)vdupq_laneq_s64((int64x2_t)v244, 1)));
                            v183[55].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v245, (float32x4_t)vdupq_laneq_s64((int64x2_t)v245, 1)));
                            v183[95].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v246, (float32x4_t)vdupq_laneq_s64((int64x2_t)v246, 1)));
                            v183[135].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v247, (float32x4_t)vdupq_laneq_s64((int64x2_t)v247, 1)));
                            if ((a5 & 0x2000000) == 0) {
                              goto LABEL_209;
                            }
LABEL_199:
                            float32x4_t v248 = vmulq_f32(v604, v208);
                            float32x4_t v249 = vmulq_f32(v604, v209);
                            float32x4_t v250 = vmulq_f32(v604, v210);
                            float32x4_t v251 = vmulq_f32(v604, v211);
                            v183[15].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v248, (float32x4_t)vdupq_laneq_s64((int64x2_t)v248, 1)));
                            v183[55].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v249, (float32x4_t)vdupq_laneq_s64((int64x2_t)v249, 1)));
                            v183[95].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v250, (float32x4_t)vdupq_laneq_s64((int64x2_t)v250, 1)));
                            v183[135].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v251, (float32x4_t)vdupq_laneq_s64((int64x2_t)v251, 1)));
                            goto LABEL_209;
                          }
                          goto LABEL_192;
                        }
                        float32x4_t v232 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v607, v208.f32[0]), v606, *(float32x2_t *)v208.f32, 1), v605, v208, 2), v604, v208, 3);
                        float32x4_t v233 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v607, v209.f32[0]), v606, *(float32x2_t *)v209.f32, 1), v605, v209, 2), v604, v209, 3);
                        float32x4_t v234 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v607, v210.f32[0]), v606, *(float32x2_t *)v210.f32, 1), v605, v210, 2), v604, v210, 3);
                        float32x4_t v235 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v607, v211.f32[0]), v606, *(float32x2_t *)v211.f32, 1), v605, v211, 2), v604, v211, 3);
                        if (v618 == 16843009)
                        {
                          v183[15] = v232;
                          v183[55] = v233;
                          void v183[95] = v234;
                          v183[135] = v235;
                          goto LABEL_209;
                        }
                        if ((a5 & 0x202) == 0x202)
                        {
                          v183[15].i64[0] = v232.i64[0];
                          v183[55].i64[0] = v233.i64[0];
                          v183[95].i64[0] = v234.i64[0];
                          v183[135].i64[0] = v235.i64[0];
                          if ((a5 & 0x20000) == 0) {
                            goto LABEL_207;
                          }
                        }
                        else if ((a5 & 2) != 0)
                        {
                          v183[15].i32[0] = v232.i32[0];
                          v183[55].i32[0] = v233.i32[0];
                          v183[95].i32[0] = v234.i32[0];
                          v183[135].i32[0] = v235.i32[0];
                          if ((a5 & 0x20000) == 0) {
                            goto LABEL_207;
                          }
                        }
                        else if ((a5 & 0x200) != 0)
                        {
                          v183[15].i32[1] = v232.i32[1];
                          v183[55].i32[1] = v233.i32[1];
                          v183[95].i32[1] = v234.i32[1];
                          v183[135].i32[1] = v235.i32[1];
                          if ((a5 & 0x20000) == 0)
                          {
LABEL_207:
                            if ((a5 & 0x2000000) == 0) {
                              goto LABEL_209;
                            }
LABEL_208:
                            v183[15].i32[3] = v232.i32[3];
                            v183[55].i32[3] = v233.i32[3];
                            v183[95].i32[3] = v234.i32[3];
                            v183[135].i32[3] = v235.i32[3];
                            goto LABEL_209;
                          }
                        }
                        else if ((a5 & 0x20000) == 0)
                        {
                          goto LABEL_207;
                        }
                        v183[15].i32[2] = v232.i32[2];
                        v183[55].i32[2] = v233.i32[2];
                        v183[95].i32[2] = v234.i32[2];
                        v183[135].i32[2] = v235.i32[2];
                        if ((a5 & 0x2000000) != 0) {
                          goto LABEL_208;
                        }
LABEL_209:
                        if (!v617) {
                          goto LABEL_231;
                        }
                        if (v583)
                        {
                          if ((a5 & 4) != 0)
                          {
                            float32x4_t v256 = vmulq_f32(v603, v208);
                            float32x4_t v257 = vmulq_f32(v603, v209);
                            float32x4_t v258 = vmulq_f32(v603, v210);
                            float32x4_t v259 = vmulq_f32(v603, v211);
                            v183[16].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v256, (float32x4_t)vdupq_laneq_s64((int64x2_t)v256, 1)));
                            v183[56].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v257, (float32x4_t)vdupq_laneq_s64((int64x2_t)v257, 1)));
                            v183[96].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v258, (float32x4_t)vdupq_laneq_s64((int64x2_t)v258, 1)));
                            v183[136].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v259, (float32x4_t)vdupq_laneq_s64((int64x2_t)v259, 1)));
                            if ((a5 & 0x400) == 0) {
                              goto LABEL_213;
                            }
                          }
                          else if ((a5 & 0x400) == 0)
                          {
LABEL_213:
                            if ((a5 & 0x40000) != 0) {
                              goto LABEL_220;
                            }
LABEL_214:
                            if ((a5 & 0x4000000) != 0) {
                              goto LABEL_221;
                            }
                            goto LABEL_231;
                          }
                          float32x4_t v260 = vmulq_f32(v602, v208);
                          float32x4_t v261 = vmulq_f32(v602, v209);
                          float32x4_t v262 = vmulq_f32(v602, v210);
                          float32x4_t v263 = vmulq_f32(v602, v211);
                          v183[16].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v260, (float32x4_t)vdupq_laneq_s64((int64x2_t)v260, 1)));
                          v183[56].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v261, (float32x4_t)vdupq_laneq_s64((int64x2_t)v261, 1)));
                          v183[96].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v262, (float32x4_t)vdupq_laneq_s64((int64x2_t)v262, 1)));
                          v183[136].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v263, (float32x4_t)vdupq_laneq_s64((int64x2_t)v263, 1)));
                          if ((a5 & 0x40000) != 0)
                          {
LABEL_220:
                            float32x4_t v264 = vmulq_f32(v601, v208);
                            float32x4_t v265 = vmulq_f32(v601, v209);
                            float32x4_t v266 = vmulq_f32(v601, v210);
                            float32x4_t v267 = vmulq_f32(v601, v211);
                            v183[16].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v264, (float32x4_t)vdupq_laneq_s64((int64x2_t)v264, 1)));
                            v183[56].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v265, (float32x4_t)vdupq_laneq_s64((int64x2_t)v265, 1)));
                            v183[96].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v266, (float32x4_t)vdupq_laneq_s64((int64x2_t)v266, 1)));
                            v183[136].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v267, (float32x4_t)vdupq_laneq_s64((int64x2_t)v267, 1)));
                            if ((a5 & 0x4000000) == 0) {
                              goto LABEL_231;
                            }
LABEL_221:
                            float32x4_t v268 = vmulq_f32(v600, v208);
                            float32x4_t v269 = vmulq_f32(v600, v209);
                            float32x4_t v270 = vmulq_f32(v600, v210);
                            float32x4_t v271 = vmulq_f32(v600, v211);
                            v183[16].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v268, (float32x4_t)vdupq_laneq_s64((int64x2_t)v268, 1)));
                            v183[56].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v269, (float32x4_t)vdupq_laneq_s64((int64x2_t)v269, 1)));
                            v183[96].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v270, (float32x4_t)vdupq_laneq_s64((int64x2_t)v270, 1)));
                            v183[136].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v271, (float32x4_t)vdupq_laneq_s64((int64x2_t)v271, 1)));
                            goto LABEL_231;
                          }
                          goto LABEL_214;
                        }
                        float32x4_t v252 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v603, v208.f32[0]), v602, *(float32x2_t *)v208.f32, 1), v601, v208, 2), v600, v208, 3);
                        float32x4_t v253 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v603, v209.f32[0]), v602, *(float32x2_t *)v209.f32, 1), v601, v209, 2), v600, v209, 3);
                        float32x4_t v254 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v603, v210.f32[0]), v602, *(float32x2_t *)v210.f32, 1), v601, v210, 2), v600, v210, 3);
                        float32x4_t v255 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v603, v211.f32[0]), v602, *(float32x2_t *)v211.f32, 1), v601, v211, 2), v600, v211, 3);
                        if (v617 == 16843009)
                        {
                          v183[16] = v252;
                          v183[56] = v253;
                          v183[96] = v254;
                          v183[136] = v255;
                          goto LABEL_231;
                        }
                        if ((a5 & 0x404) == 0x404)
                        {
                          v183[16].i64[0] = v252.i64[0];
                          v183[56].i64[0] = v253.i64[0];
                          v183[96].i64[0] = v254.i64[0];
                          v183[136].i64[0] = v255.i64[0];
                          if ((a5 & 0x40000) == 0) {
                            goto LABEL_229;
                          }
                        }
                        else if ((a5 & 4) != 0)
                        {
                          v183[16].i32[0] = v252.i32[0];
                          v183[56].i32[0] = v253.i32[0];
                          v183[96].i32[0] = v254.i32[0];
                          v183[136].i32[0] = v255.i32[0];
                          if ((a5 & 0x40000) == 0) {
                            goto LABEL_229;
                          }
                        }
                        else if ((a5 & 0x400) != 0)
                        {
                          v183[16].i32[1] = v252.i32[1];
                          v183[56].i32[1] = v253.i32[1];
                          v183[96].i32[1] = v254.i32[1];
                          v183[136].i32[1] = v255.i32[1];
                          if ((a5 & 0x40000) == 0)
                          {
LABEL_229:
                            if ((a5 & 0x4000000) == 0) {
                              goto LABEL_231;
                            }
LABEL_230:
                            v183[16].i32[3] = v252.i32[3];
                            v183[56].i32[3] = v253.i32[3];
                            v183[96].i32[3] = v254.i32[3];
                            v183[136].i32[3] = v255.i32[3];
                            goto LABEL_231;
                          }
                        }
                        else if ((a5 & 0x40000) == 0)
                        {
                          goto LABEL_229;
                        }
                        v183[16].i32[2] = v252.i32[2];
                        v183[56].i32[2] = v253.i32[2];
                        v183[96].i32[2] = v254.i32[2];
                        v183[136].i32[2] = v255.i32[2];
                        if ((a5 & 0x4000000) != 0) {
                          goto LABEL_230;
                        }
LABEL_231:
                        if (!v616) {
                          goto LABEL_253;
                        }
                        if (v582)
                        {
                          if ((a5 & 8) != 0)
                          {
                            float32x4_t v276 = vmulq_f32(v24, v208);
                            float32x4_t v277 = vmulq_f32(v24, v209);
                            float32x4_t v278 = vmulq_f32(v24, v210);
                            float32x4_t v279 = vmulq_f32(v24, v211);
                            v183[17].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v276, (float32x4_t)vdupq_laneq_s64((int64x2_t)v276, 1)));
                            v183[57].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v277, (float32x4_t)vdupq_laneq_s64((int64x2_t)v277, 1)));
                            v183[97].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v278, (float32x4_t)vdupq_laneq_s64((int64x2_t)v278, 1)));
                            v183[137].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v279, (float32x4_t)vdupq_laneq_s64((int64x2_t)v279, 1)));
                            if ((a5 & 0x800) == 0) {
                              goto LABEL_235;
                            }
                          }
                          else if ((a5 & 0x800) == 0)
                          {
LABEL_235:
                            if ((a5 & 0x80000) != 0) {
                              goto LABEL_242;
                            }
LABEL_236:
                            if ((a5 & 0x8000000) != 0) {
                              goto LABEL_243;
                            }
                            goto LABEL_253;
                          }
                          float32x4_t v280 = vmulq_f32(v25, v208);
                          float32x4_t v281 = vmulq_f32(v25, v209);
                          float32x4_t v282 = vmulq_f32(v25, v210);
                          float32x4_t v283 = vmulq_f32(v25, v211);
                          v183[17].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v280, (float32x4_t)vdupq_laneq_s64((int64x2_t)v280, 1)));
                          v183[57].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v281, (float32x4_t)vdupq_laneq_s64((int64x2_t)v281, 1)));
                          v183[97].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v282, (float32x4_t)vdupq_laneq_s64((int64x2_t)v282, 1)));
                          v183[137].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v283, (float32x4_t)vdupq_laneq_s64((int64x2_t)v283, 1)));
                          if ((a5 & 0x80000) != 0)
                          {
LABEL_242:
                            float32x4_t v284 = vmulq_f32(v14, v208);
                            float32x4_t v285 = vmulq_f32(v14, v209);
                            float32x4_t v286 = vmulq_f32(v14, v210);
                            float32x4_t v287 = vmulq_f32(v14, v211);
                            v183[17].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v284, (float32x4_t)vdupq_laneq_s64((int64x2_t)v284, 1)));
                            v183[57].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v285, (float32x4_t)vdupq_laneq_s64((int64x2_t)v285, 1)));
                            v183[97].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v286, (float32x4_t)vdupq_laneq_s64((int64x2_t)v286, 1)));
                            v183[137].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v287, (float32x4_t)vdupq_laneq_s64((int64x2_t)v287, 1)));
                            if ((a5 & 0x8000000) == 0) {
                              goto LABEL_253;
                            }
LABEL_243:
                            float32x4_t v288 = vmulq_f32(v15, v208);
                            float32x4_t v289 = vmulq_f32(v15, v209);
                            float32x4_t v290 = vmulq_f32(v15, v210);
                            float32x4_t v291 = vmulq_f32(v15, v211);
                            v183[17].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v288, (float32x4_t)vdupq_laneq_s64((int64x2_t)v288, 1)));
                            v183[57].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v289, (float32x4_t)vdupq_laneq_s64((int64x2_t)v289, 1)));
                            v183[97].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v290, (float32x4_t)vdupq_laneq_s64((int64x2_t)v290, 1)));
                            v183[137].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v291, (float32x4_t)vdupq_laneq_s64((int64x2_t)v291, 1)));
                            goto LABEL_253;
                          }
                          goto LABEL_236;
                        }
                        float32x4_t v272 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v24, v208.f32[0]), v25, *(float32x2_t *)v208.f32, 1), v14, v208, 2), v15, v208, 3);
                        float32x4_t v273 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v24, v209.f32[0]), v25, *(float32x2_t *)v209.f32, 1), v14, v209, 2), v15, v209, 3);
                        float32x4_t v274 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v24, v210.f32[0]), v25, *(float32x2_t *)v210.f32, 1), v14, v210, 2), v15, v210, 3);
                        float32x4_t v275 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v24, v211.f32[0]), v25, *(float32x2_t *)v211.f32, 1), v14, v211, 2), v15, v211, 3);
                        if (v616 == 16843009)
                        {
                          v183[17] = v272;
                          v183[57] = v273;
                          v183[97] = v274;
                          v183[137] = v275;
                          goto LABEL_253;
                        }
                        if ((a5 & 0x808) == 0x808)
                        {
                          v183[17].i64[0] = v272.i64[0];
                          v183[57].i64[0] = v273.i64[0];
                          v183[97].i64[0] = v274.i64[0];
                          v183[137].i64[0] = v275.i64[0];
                          if ((a5 & 0x80000) == 0) {
                            goto LABEL_251;
                          }
                        }
                        else if ((a5 & 8) != 0)
                        {
                          v183[17].i32[0] = v272.i32[0];
                          v183[57].i32[0] = v273.i32[0];
                          v183[97].i32[0] = v274.i32[0];
                          v183[137].i32[0] = v275.i32[0];
                          if ((a5 & 0x80000) == 0) {
                            goto LABEL_251;
                          }
                        }
                        else if ((a5 & 0x800) != 0)
                        {
                          v183[17].i32[1] = v272.i32[1];
                          v183[57].i32[1] = v273.i32[1];
                          v183[97].i32[1] = v274.i32[1];
                          v183[137].i32[1] = v275.i32[1];
                          if ((a5 & 0x80000) == 0)
                          {
LABEL_251:
                            if ((a5 & 0x8000000) == 0) {
                              goto LABEL_253;
                            }
LABEL_252:
                            v183[17].i32[3] = v272.i32[3];
                            v183[57].i32[3] = v273.i32[3];
                            v183[97].i32[3] = v274.i32[3];
                            v183[137].i32[3] = v275.i32[3];
                            goto LABEL_253;
                          }
                        }
                        else if ((a5 & 0x80000) == 0)
                        {
                          goto LABEL_251;
                        }
                        v183[17].i32[2] = v272.i32[2];
                        v183[57].i32[2] = v273.i32[2];
                        v183[97].i32[2] = v274.i32[2];
                        v183[137].i32[2] = v275.i32[2];
                        if ((a5 & 0x8000000) != 0) {
                          goto LABEL_252;
                        }
LABEL_253:
                        if (!v615) {
                          goto LABEL_275;
                        }
                        if (v581)
                        {
                          if ((a5 & 0x10) != 0)
                          {
                            float32x4_t v296 = vmulq_f32(v16, v208);
                            float32x4_t v297 = vmulq_f32(v16, v209);
                            float32x4_t v298 = vmulq_f32(v16, v210);
                            float32x4_t v299 = vmulq_f32(v16, v211);
                            v183[18].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v296, (float32x4_t)vdupq_laneq_s64((int64x2_t)v296, 1)));
                            v183[58].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v297, (float32x4_t)vdupq_laneq_s64((int64x2_t)v297, 1)));
                            v183[98].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v298, (float32x4_t)vdupq_laneq_s64((int64x2_t)v298, 1)));
                            v183[138].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v299, (float32x4_t)vdupq_laneq_s64((int64x2_t)v299, 1)));
                            if ((a5 & 0x1000) == 0) {
                              goto LABEL_257;
                            }
                          }
                          else if ((a5 & 0x1000) == 0)
                          {
LABEL_257:
                            if ((a5 & 0x100000) != 0) {
                              goto LABEL_264;
                            }
LABEL_258:
                            if ((a5 & 0x10000000) != 0) {
                              goto LABEL_265;
                            }
                            goto LABEL_275;
                          }
                          float32x4_t v300 = vmulq_f32(v17, v208);
                          float32x4_t v301 = vmulq_f32(v17, v209);
                          float32x4_t v302 = vmulq_f32(v17, v210);
                          float32x4_t v303 = vmulq_f32(v17, v211);
                          v183[18].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v300, (float32x4_t)vdupq_laneq_s64((int64x2_t)v300, 1)));
                          v183[58].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v301, (float32x4_t)vdupq_laneq_s64((int64x2_t)v301, 1)));
                          v183[98].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v302, (float32x4_t)vdupq_laneq_s64((int64x2_t)v302, 1)));
                          v183[138].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v303, (float32x4_t)vdupq_laneq_s64((int64x2_t)v303, 1)));
                          if ((a5 & 0x100000) != 0)
                          {
LABEL_264:
                            float32x4_t v304 = vmulq_f32(v18, v208);
                            float32x4_t v305 = vmulq_f32(v18, v209);
                            float32x4_t v306 = vmulq_f32(v18, v210);
                            float32x4_t v307 = vmulq_f32(v18, v211);
                            v183[18].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v304, (float32x4_t)vdupq_laneq_s64((int64x2_t)v304, 1)));
                            v183[58].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v305, (float32x4_t)vdupq_laneq_s64((int64x2_t)v305, 1)));
                            v183[98].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v306, (float32x4_t)vdupq_laneq_s64((int64x2_t)v306, 1)));
                            v183[138].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v307, (float32x4_t)vdupq_laneq_s64((int64x2_t)v307, 1)));
                            if ((a5 & 0x10000000) == 0) {
                              goto LABEL_275;
                            }
LABEL_265:
                            float32x4_t v308 = vmulq_f32(v19, v208);
                            float32x4_t v309 = vmulq_f32(v19, v209);
                            float32x4_t v310 = vmulq_f32(v19, v210);
                            float32x4_t v311 = vmulq_f32(v19, v211);
                            v183[18].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v308, (float32x4_t)vdupq_laneq_s64((int64x2_t)v308, 1)));
                            v183[58].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v309, (float32x4_t)vdupq_laneq_s64((int64x2_t)v309, 1)));
                            v183[98].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v310, (float32x4_t)vdupq_laneq_s64((int64x2_t)v310, 1)));
                            v183[138].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v311, (float32x4_t)vdupq_laneq_s64((int64x2_t)v311, 1)));
                            goto LABEL_275;
                          }
                          goto LABEL_258;
                        }
                        float32x4_t v292 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v16, v208.f32[0]), v17, *(float32x2_t *)v208.f32, 1), v18, v208, 2), v19, v208, 3);
                        float32x4_t v293 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v16, v209.f32[0]), v17, *(float32x2_t *)v209.f32, 1), v18, v209, 2), v19, v209, 3);
                        float32x4_t v294 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v16, v210.f32[0]), v17, *(float32x2_t *)v210.f32, 1), v18, v210, 2), v19, v210, 3);
                        float32x4_t v295 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v16, v211.f32[0]), v17, *(float32x2_t *)v211.f32, 1), v18, v211, 2), v19, v211, 3);
                        if (v615 == 16843009)
                        {
                          v183[18] = v292;
                          v183[58] = v293;
                          v183[98] = v294;
                          v183[138] = v295;
                          goto LABEL_275;
                        }
                        if ((a5 & 0x1010) == 0x1010)
                        {
                          v183[18].i64[0] = v292.i64[0];
                          v183[58].i64[0] = v293.i64[0];
                          v183[98].i64[0] = v294.i64[0];
                          v183[138].i64[0] = v295.i64[0];
                          if ((a5 & 0x100000) == 0) {
                            goto LABEL_273;
                          }
                        }
                        else if ((a5 & 0x10) != 0)
                        {
                          v183[18].i32[0] = v292.i32[0];
                          v183[58].i32[0] = v293.i32[0];
                          v183[98].i32[0] = v294.i32[0];
                          v183[138].i32[0] = v295.i32[0];
                          if ((a5 & 0x100000) == 0) {
                            goto LABEL_273;
                          }
                        }
                        else if ((a5 & 0x1000) != 0)
                        {
                          v183[18].i32[1] = v292.i32[1];
                          v183[58].i32[1] = v293.i32[1];
                          v183[98].i32[1] = v294.i32[1];
                          v183[138].i32[1] = v295.i32[1];
                          if ((a5 & 0x100000) == 0)
                          {
LABEL_273:
                            if ((a5 & 0x10000000) == 0) {
                              goto LABEL_275;
                            }
LABEL_274:
                            v183[18].i32[3] = v292.i32[3];
                            v183[58].i32[3] = v293.i32[3];
                            v183[98].i32[3] = v294.i32[3];
                            v183[138].i32[3] = v295.i32[3];
                            goto LABEL_275;
                          }
                        }
                        else if ((a5 & 0x100000) == 0)
                        {
                          goto LABEL_273;
                        }
                        v183[18].i32[2] = v292.i32[2];
                        v183[58].i32[2] = v293.i32[2];
                        v183[98].i32[2] = v294.i32[2];
                        v183[138].i32[2] = v295.i32[2];
                        if ((a5 & 0x10000000) != 0) {
                          goto LABEL_274;
                        }
LABEL_275:
                        if (!v614) {
                          goto LABEL_297;
                        }
                        if (v580)
                        {
                          if ((a5 & 0x20) != 0)
                          {
                            float32x4_t v316 = vmulq_f32(v20, v208);
                            float32x4_t v317 = vmulq_f32(v20, v209);
                            float32x4_t v318 = vmulq_f32(v20, v210);
                            float32x4_t v319 = vmulq_f32(v20, v211);
                            v183[19].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v316, (float32x4_t)vdupq_laneq_s64((int64x2_t)v316, 1)));
                            v183[59].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v317, (float32x4_t)vdupq_laneq_s64((int64x2_t)v317, 1)));
                            v183[99].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v318, (float32x4_t)vdupq_laneq_s64((int64x2_t)v318, 1)));
                            v183[139].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v319, (float32x4_t)vdupq_laneq_s64((int64x2_t)v319, 1)));
                            if ((a5 & 0x2000) == 0) {
                              goto LABEL_279;
                            }
                          }
                          else if ((a5 & 0x2000) == 0)
                          {
LABEL_279:
                            if ((a5 & 0x200000) != 0) {
                              goto LABEL_286;
                            }
LABEL_280:
                            if ((a5 & 0x20000000) != 0) {
                              goto LABEL_287;
                            }
                            goto LABEL_297;
                          }
                          float32x4_t v320 = vmulq_f32(v21, v208);
                          float32x4_t v321 = vmulq_f32(v21, v209);
                          float32x4_t v322 = vmulq_f32(v21, v210);
                          float32x4_t v323 = vmulq_f32(v21, v211);
                          v183[19].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v320, (float32x4_t)vdupq_laneq_s64((int64x2_t)v320, 1)));
                          v183[59].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v321, (float32x4_t)vdupq_laneq_s64((int64x2_t)v321, 1)));
                          v183[99].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v322, (float32x4_t)vdupq_laneq_s64((int64x2_t)v322, 1)));
                          v183[139].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v323, (float32x4_t)vdupq_laneq_s64((int64x2_t)v323, 1)));
                          if ((a5 & 0x200000) != 0)
                          {
LABEL_286:
                            float32x4_t v324 = vmulq_f32(a9, v208);
                            float32x4_t v325 = vmulq_f32(a9, v209);
                            float32x4_t v326 = vmulq_f32(a9, v210);
                            float32x4_t v327 = vmulq_f32(a9, v211);
                            v183[19].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v324, (float32x4_t)vdupq_laneq_s64((int64x2_t)v324, 1)));
                            v183[59].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v325, (float32x4_t)vdupq_laneq_s64((int64x2_t)v325, 1)));
                            v183[99].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v326, (float32x4_t)vdupq_laneq_s64((int64x2_t)v326, 1)));
                            v183[139].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v327, (float32x4_t)vdupq_laneq_s64((int64x2_t)v327, 1)));
                            if ((a5 & 0x20000000) == 0) {
                              goto LABEL_297;
                            }
LABEL_287:
                            float32x4_t v328 = vmulq_f32(v23, v208);
                            float32x4_t v329 = vmulq_f32(v23, v209);
                            float32x4_t v330 = vmulq_f32(v23, v210);
                            float32x4_t v331 = vmulq_f32(v23, v211);
                            v183[19].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v328, (float32x4_t)vdupq_laneq_s64((int64x2_t)v328, 1)));
                            v183[59].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v329, (float32x4_t)vdupq_laneq_s64((int64x2_t)v329, 1)));
                            v183[99].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v330, (float32x4_t)vdupq_laneq_s64((int64x2_t)v330, 1)));
                            v183[139].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v331, (float32x4_t)vdupq_laneq_s64((int64x2_t)v331, 1)));
                            goto LABEL_297;
                          }
                          goto LABEL_280;
                        }
                        float32x4_t v312 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, v208.f32[0]), v21, *(float32x2_t *)v208.f32, 1), a9, v208, 2), v23, v208, 3);
                        float32x4_t v313 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, v209.f32[0]), v21, *(float32x2_t *)v209.f32, 1), a9, v209, 2), v23, v209, 3);
                        float32x4_t v314 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, v210.f32[0]), v21, *(float32x2_t *)v210.f32, 1), a9, v210, 2), v23, v210, 3);
                        float32x4_t v315 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, v211.f32[0]), v21, *(float32x2_t *)v211.f32, 1), a9, v211, 2), v23, v211, 3);
                        if (v614 == 16843009)
                        {
                          v183[19] = v312;
                          v183[59] = v313;
                          v183[99] = v314;
                          v183[139] = v315;
                          goto LABEL_297;
                        }
                        if ((a5 & 0x2020) == 0x2020)
                        {
                          v183[19].i64[0] = v312.i64[0];
                          v183[59].i64[0] = v313.i64[0];
                          v183[99].i64[0] = v314.i64[0];
                          v183[139].i64[0] = v315.i64[0];
                          if ((a5 & 0x200000) == 0) {
                            goto LABEL_295;
                          }
                        }
                        else if ((a5 & 0x20) != 0)
                        {
                          v183[19].i32[0] = v312.i32[0];
                          v183[59].i32[0] = v313.i32[0];
                          v183[99].i32[0] = v314.i32[0];
                          v183[139].i32[0] = v315.i32[0];
                          if ((a5 & 0x200000) == 0) {
                            goto LABEL_295;
                          }
                        }
                        else if ((a5 & 0x2000) != 0)
                        {
                          v183[19].i32[1] = v312.i32[1];
                          v183[59].i32[1] = v313.i32[1];
                          v183[99].i32[1] = v314.i32[1];
                          v183[139].i32[1] = v315.i32[1];
                          if ((a5 & 0x200000) == 0)
                          {
LABEL_295:
                            if ((a5 & 0x20000000) == 0) {
                              goto LABEL_297;
                            }
LABEL_296:
                            v183[19].i32[3] = v312.i32[3];
                            v183[59].i32[3] = v313.i32[3];
                            v183[99].i32[3] = v314.i32[3];
                            v183[139].i32[3] = v315.i32[3];
                            goto LABEL_297;
                          }
                        }
                        else if ((a5 & 0x200000) == 0)
                        {
                          goto LABEL_295;
                        }
                        v183[19].i32[2] = v312.i32[2];
                        v183[59].i32[2] = v313.i32[2];
                        v183[99].i32[2] = v314.i32[2];
                        v183[139].i32[2] = v315.i32[2];
                        if ((a5 & 0x20000000) != 0) {
                          goto LABEL_296;
                        }
LABEL_297:
                        if (!v613) {
                          goto LABEL_319;
                        }
                        if (v579)
                        {
                          if ((a5 & 0x40) != 0)
                          {
                            float32x4_t v336 = vmulq_f32(a13, v208);
                            float32x4_t v337 = vmulq_f32(a13, v209);
                            float32x4_t v338 = vmulq_f32(a13, v210);
                            float32x4_t v339 = vmulq_f32(a13, v211);
                            v183[20].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v336, (float32x4_t)vdupq_laneq_s64((int64x2_t)v336, 1)));
                            v183[60].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v337, (float32x4_t)vdupq_laneq_s64((int64x2_t)v337, 1)));
                            v183[100].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v338, (float32x4_t)vdupq_laneq_s64((int64x2_t)v338, 1)));
                            v183[140].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v339, (float32x4_t)vdupq_laneq_s64((int64x2_t)v339, 1)));
                            if ((a5 & 0x4000) == 0) {
                              goto LABEL_301;
                            }
                          }
                          else if ((a5 & 0x4000) == 0)
                          {
LABEL_301:
                            if ((a5 & 0x400000) != 0) {
                              goto LABEL_308;
                            }
LABEL_302:
                            if ((a5 & 0x40000000) != 0) {
                              goto LABEL_309;
                            }
                            goto LABEL_319;
                          }
                          float32x4_t v340 = vmulq_f32(v22, v208);
                          float32x4_t v341 = vmulq_f32(v22, v209);
                          float32x4_t v342 = vmulq_f32(v22, v210);
                          float32x4_t v343 = vmulq_f32(v22, v211);
                          v183[20].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v340, (float32x4_t)vdupq_laneq_s64((int64x2_t)v340, 1)));
                          v183[60].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v341, (float32x4_t)vdupq_laneq_s64((int64x2_t)v341, 1)));
                          v183[100].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v342, (float32x4_t)vdupq_laneq_s64((int64x2_t)v342, 1)));
                          v183[140].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v343, (float32x4_t)vdupq_laneq_s64((int64x2_t)v343, 1)));
                          if ((a5 & 0x400000) != 0)
                          {
LABEL_308:
                            float32x4_t v344 = vmulq_f32(v37, v208);
                            float32x4_t v345 = vmulq_f32(v37, v209);
                            float32x4_t v346 = vmulq_f32(v37, v210);
                            float32x4_t v347 = vmulq_f32(v37, v211);
                            v183[20].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v344, (float32x4_t)vdupq_laneq_s64((int64x2_t)v344, 1)));
                            v183[60].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v345, (float32x4_t)vdupq_laneq_s64((int64x2_t)v345, 1)));
                            v183[100].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v346, (float32x4_t)vdupq_laneq_s64((int64x2_t)v346, 1)));
                            v183[140].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v347, (float32x4_t)vdupq_laneq_s64((int64x2_t)v347, 1)));
                            if ((a5 & 0x40000000) == 0) {
                              goto LABEL_319;
                            }
LABEL_309:
                            float32x4_t v348 = vmulq_f32(a8, v208);
                            float32x4_t v349 = vmulq_f32(a8, v209);
                            float32x4_t v350 = vmulq_f32(a8, v210);
                            float32x4_t v351 = vmulq_f32(a8, v211);
                            v183[20].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v348, (float32x4_t)vdupq_laneq_s64((int64x2_t)v348, 1)));
                            v183[60].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v349, (float32x4_t)vdupq_laneq_s64((int64x2_t)v349, 1)));
                            v183[100].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v350, (float32x4_t)vdupq_laneq_s64((int64x2_t)v350, 1)));
                            v183[140].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v351, (float32x4_t)vdupq_laneq_s64((int64x2_t)v351, 1)));
                            goto LABEL_319;
                          }
                          goto LABEL_302;
                        }
                        float32x4_t v332 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a13, v208.f32[0]), v22, *(float32x2_t *)v208.f32, 1), v37, v208, 2), a8, v208, 3);
                        float32x4_t v333 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a13, v209.f32[0]), v22, *(float32x2_t *)v209.f32, 1), v37, v209, 2), a8, v209, 3);
                        float32x4_t v334 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a13, v210.f32[0]), v22, *(float32x2_t *)v210.f32, 1), v37, v210, 2), a8, v210, 3);
                        float32x4_t v335 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a13, v211.f32[0]), v22, *(float32x2_t *)v211.f32, 1), v37, v211, 2), a8, v211, 3);
                        if (v613 == 16843009)
                        {
                          v183[20] = v332;
                          v183[60] = v333;
                          v183[100] = v334;
                          v183[140] = v335;
                          goto LABEL_319;
                        }
                        if ((a5 & 0x4040) == 0x4040)
                        {
                          v183[20].i64[0] = v332.i64[0];
                          v183[60].i64[0] = v333.i64[0];
                          v183[100].i64[0] = v334.i64[0];
                          v183[140].i64[0] = v335.i64[0];
                          if ((a5 & 0x400000) == 0) {
                            goto LABEL_317;
                          }
                        }
                        else if ((a5 & 0x40) != 0)
                        {
                          v183[20].i32[0] = v332.i32[0];
                          v183[60].i32[0] = v333.i32[0];
                          v183[100].i32[0] = v334.i32[0];
                          v183[140].i32[0] = v335.i32[0];
                          if ((a5 & 0x400000) == 0) {
                            goto LABEL_317;
                          }
                        }
                        else if ((a5 & 0x4000) != 0)
                        {
                          v183[20].i32[1] = v332.i32[1];
                          v183[60].i32[1] = v333.i32[1];
                          v183[100].i32[1] = v334.i32[1];
                          v183[140].i32[1] = v335.i32[1];
                          if ((a5 & 0x400000) == 0)
                          {
LABEL_317:
                            if ((a5 & 0x40000000) == 0) {
                              goto LABEL_319;
                            }
LABEL_318:
                            v183[20].i32[3] = v332.i32[3];
                            v183[60].i32[3] = v333.i32[3];
                            v183[100].i32[3] = v334.i32[3];
                            v183[140].i32[3] = v335.i32[3];
                            goto LABEL_319;
                          }
                        }
                        else if ((a5 & 0x400000) == 0)
                        {
                          goto LABEL_317;
                        }
                        v183[20].i32[2] = v332.i32[2];
                        v183[60].i32[2] = v333.i32[2];
                        v183[100].i32[2] = v334.i32[2];
                        v183[140].i32[2] = v335.i32[2];
                        if ((a5 & 0x40000000) != 0) {
                          goto LABEL_318;
                        }
LABEL_319:
                        if (!v612) {
                          goto LABEL_551;
                        }
                        if (v578)
                        {
                          if ((a5 & 0x80) != 0)
                          {
                            float32x4_t v384 = vmulq_f32(a10, v208);
                            float32x4_t v385 = vmulq_f32(a10, v209);
                            float32x4_t v386 = vmulq_f32(a10, v210);
                            float32x4_t v387 = vmulq_f32(a10, v211);
                            v183[21].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v384, (float32x4_t)vdupq_laneq_s64((int64x2_t)v384, 1)));
                            v183[61].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v385, (float32x4_t)vdupq_laneq_s64((int64x2_t)v385, 1)));
                            v183[101].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v386, (float32x4_t)vdupq_laneq_s64((int64x2_t)v386, 1)));
                            v183[141].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v387, (float32x4_t)vdupq_laneq_s64((int64x2_t)v387, 1)));
                            if ((a5 & 0x8000) == 0) {
                              goto LABEL_323;
                            }
                          }
                          else if ((a5 & 0x8000) == 0)
                          {
LABEL_323:
                            if ((a5 & 0x800000) != 0) {
                              goto LABEL_349;
                            }
LABEL_324:
                            if ((a5 & 0x80000000) != 0) {
                              goto LABEL_350;
                            }
                            goto LABEL_551;
                          }
                          float32x4_t v388 = vmulq_f32(a12, v208);
                          float32x4_t v389 = vmulq_f32(a12, v209);
                          float32x4_t v390 = vmulq_f32(a12, v210);
                          float32x4_t v391 = vmulq_f32(a12, v211);
                          v183[21].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v388, (float32x4_t)vdupq_laneq_s64((int64x2_t)v388, 1)));
                          v183[61].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v389, (float32x4_t)vdupq_laneq_s64((int64x2_t)v389, 1)));
                          v183[101].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v390, (float32x4_t)vdupq_laneq_s64((int64x2_t)v390, 1)));
                          v183[141].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v391, (float32x4_t)vdupq_laneq_s64((int64x2_t)v391, 1)));
                          if ((a5 & 0x800000) != 0)
                          {
LABEL_349:
                            float32x4_t v392 = vmulq_f32(a14, v208);
                            float32x4_t v393 = vmulq_f32(a14, v209);
                            float32x4_t v394 = vmulq_f32(a14, v210);
                            float32x4_t v395 = vmulq_f32(a14, v211);
                            v183[21].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v392, (float32x4_t)vdupq_laneq_s64((int64x2_t)v392, 1)));
                            v183[61].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v393, (float32x4_t)vdupq_laneq_s64((int64x2_t)v393, 1)));
                            v183[101].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v394, (float32x4_t)vdupq_laneq_s64((int64x2_t)v394, 1)));
                            v183[141].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v395, (float32x4_t)vdupq_laneq_s64((int64x2_t)v395, 1)));
                            if ((a5 & 0x80000000) != 0)
                            {
LABEL_350:
                              float32x4_t v396 = vmulq_f32(a11, v208);
                              float32x4_t v397 = vmulq_f32(a11, v209);
                              float32x4_t v398 = vmulq_f32(a11, v210);
                              float32x4_t v399 = vmulq_f32(a11, v211);
                              v183[21].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v396, (float32x4_t)vdupq_laneq_s64((int64x2_t)v396, 1)));
                              v183[61].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v397, (float32x4_t)vdupq_laneq_s64((int64x2_t)v397, 1)));
                              v183[101].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v398, (float32x4_t)vdupq_laneq_s64((int64x2_t)v398, 1)));
                              v183[141].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v399, (float32x4_t)vdupq_laneq_s64((int64x2_t)v399, 1)));
                              if ((a4 & 0x400) != 0) {
                                goto LABEL_328;
                              }
                              goto LABEL_552;
                            }
                            goto LABEL_551;
                          }
                          goto LABEL_324;
                        }
                        float32x4_t v352 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a10, v208.f32[0]), a12, *(float32x2_t *)v208.f32, 1), a14, v208, 2), a11, v208, 3);
                        float32x4_t v353 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a10, v209.f32[0]), a12, *(float32x2_t *)v209.f32, 1), a14, v209, 2), a11, v209, 3);
                        float32x4_t v354 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a10, v210.f32[0]), a12, *(float32x2_t *)v210.f32, 1), a14, v210, 2), a11, v210, 3);
                        float32x4_t v355 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a10, v211.f32[0]), a12, *(float32x2_t *)v211.f32, 1), a14, v211, 2), a11, v211, 3);
                        if (v612 == 16843009)
                        {
                          v183[21] = v352;
                          v183[61] = v353;
                          v183[101] = v354;
                          v183[141] = v355;
                          if ((a4 & 0x400) != 0) {
                            goto LABEL_328;
                          }
                          goto LABEL_552;
                        }
                        if ((a5 & 0x8080) == 0x8080)
                        {
                          v183[21].i64[0] = v352.i64[0];
                          v183[61].i64[0] = v353.i64[0];
                          v183[101].i64[0] = v354.i64[0];
                          v183[141].i64[0] = v355.i64[0];
                          if ((a5 & 0x800000) != 0) {
                            goto LABEL_354;
                          }
                        }
                        else if ((a5 & 0x80) != 0)
                        {
                          v183[21].i32[0] = v352.i32[0];
                          v183[61].i32[0] = v353.i32[0];
                          v183[101].i32[0] = v354.i32[0];
                          v183[141].i32[0] = v355.i32[0];
                          if ((a5 & 0x800000) != 0) {
                            goto LABEL_354;
                          }
                        }
                        else if ((a5 & 0x8000) != 0)
                        {
                          v183[21].i32[1] = v352.i32[1];
                          v183[61].i32[1] = v353.i32[1];
                          v183[101].i32[1] = v354.i32[1];
                          v183[141].i32[1] = v355.i32[1];
                          if ((a5 & 0x800000) != 0)
                          {
LABEL_354:
                            v183[21].i32[2] = v352.i32[2];
                            v183[61].i32[2] = v353.i32[2];
                            v183[101].i32[2] = v354.i32[2];
                            v183[141].i32[2] = v355.i32[2];
                            if ((a5 & 0x80000000) != 0) {
                              goto LABEL_355;
                            }
                            goto LABEL_551;
                          }
                        }
                        else if ((a5 & 0x800000) != 0)
                        {
                          goto LABEL_354;
                        }
                        if ((a5 & 0x80000000) != 0)
                        {
LABEL_355:
                          v183[21].i32[3] = v352.i32[3];
                          v183[61].i32[3] = v353.i32[3];
                          v183[101].i32[3] = v354.i32[3];
                          v183[141].i32[3] = v355.i32[3];
                          if ((a4 & 0x400) != 0) {
                            goto LABEL_328;
                          }
                          goto LABEL_552;
                        }
LABEL_551:
                        if ((a4 & 0x400) != 0) {
                          goto LABEL_328;
                        }
LABEL_552:
                        if (v153 == 0x2000)
                        {
                          float32x4_t v567 = vmlaq_lane_f32(vmulq_n_f32(v576, v208.f32[0]), v572, *(float32x2_t *)v208.f32, 1);
                          float32x4_t v568 = vmlaq_lane_f32(vmulq_n_f32(v576, v209.f32[0]), v572, *(float32x2_t *)v209.f32, 1);
                          float32x4_t v569 = vmlaq_lane_f32(vmulq_n_f32(v576, v210.f32[0]), v572, *(float32x2_t *)v210.f32, 1);
                          float32x4_t v570 = vmlaq_lane_f32(vmulq_n_f32(v576, v211.f32[0]), v572, *(float32x2_t *)v211.f32, 1);
                          if (v574)
                          {
                            if ((a4 & 1) == 0) {
                              goto LABEL_557;
                            }
                          }
                          else
                          {
                            float32x4_t v567 = vmlaq_laneq_f32(v567, v571, v208, 2);
                            float32x4_t v568 = vmlaq_laneq_f32(v568, v571, v209, 2);
                            float32x4_t v569 = vmlaq_laneq_f32(v569, v571, v210, 2);
                            float32x4_t v570 = vmlaq_laneq_f32(v570, v571, v211, 2);
                            if ((a4 & 1) == 0)
                            {
LABEL_557:
                              float32x4_t v211 = vmlaq_laneq_f32(v570, v573, v211, 3);
                              float32x4_t v210 = vmlaq_laneq_f32(v569, v573, v210, 3);
                              float32x4_t v209 = vmlaq_laneq_f32(v568, v573, v209, 3);
                              float32x4_t v208 = vmlaq_laneq_f32(v567, v573, v208, 3);
                              goto LABEL_329;
                            }
                          }
                          float32x4_t v208 = vaddq_f32(v573, v567);
                          float32x4_t v209 = vaddq_f32(v573, v568);
                          float32x4_t v210 = vaddq_f32(v573, v569);
                          float32x4_t v211 = vaddq_f32(v573, v570);
                        }
                        else if (v153 == 4096)
                        {
                          float32x4_t v208 = vmulq_f32(v576, v208);
                          float32x4_t v209 = vmulq_f32(v576, v209);
                          float32x4_t v210 = vmulq_f32(v576, v210);
                          float32x4_t v211 = vmulq_f32(v576, v211);
                        }
LABEL_329:
                        if (!a6) {
                          goto LABEL_518;
                        }
                        if (!v163) {
                          goto LABEL_362;
                        }
                        if (v599)
                        {
                          if (a6)
                          {
                            float32x4_t v368 = vmulq_f32(v611, v208);
                            float32x4_t v369 = vmulq_f32(v611, v209);
                            float32x4_t v370 = vmulq_f32(v611, v210);
                            float32x4_t v371 = vmulq_f32(v611, v211);
                            v183[14].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v368, (float32x4_t)vdupq_laneq_s64((int64x2_t)v368, 1)));
                            v183[54].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v369, (float32x4_t)vdupq_laneq_s64((int64x2_t)v369, 1)));
                            v183[94].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v370, (float32x4_t)vdupq_laneq_s64((int64x2_t)v370, 1)));
                            v183[134].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v371, (float32x4_t)vdupq_laneq_s64((int64x2_t)v371, 1)));
                            if ((a6 & 0x100) == 0) {
                              goto LABEL_334;
                            }
                          }
                          else if ((a6 & 0x100) == 0)
                          {
LABEL_334:
                            if ((a6 & 0x10000) != 0) {
                              goto LABEL_341;
                            }
LABEL_335:
                            if ((a6 & 0x1000000) != 0) {
                              goto LABEL_342;
                            }
                            goto LABEL_362;
                          }
                          float32x4_t v372 = vmulq_f32(v610, v208);
                          float32x4_t v373 = vmulq_f32(v610, v209);
                          float32x4_t v374 = vmulq_f32(v610, v210);
                          float32x4_t v375 = vmulq_f32(v610, v211);
                          v183[14].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v372, (float32x4_t)vdupq_laneq_s64((int64x2_t)v372, 1)));
                          v183[54].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v373, (float32x4_t)vdupq_laneq_s64((int64x2_t)v373, 1)));
                          v183[94].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v374, (float32x4_t)vdupq_laneq_s64((int64x2_t)v374, 1)));
                          v183[134].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v375, (float32x4_t)vdupq_laneq_s64((int64x2_t)v375, 1)));
                          if ((a6 & 0x10000) != 0)
                          {
LABEL_341:
                            float32x4_t v376 = vmulq_f32(v609, v208);
                            float32x4_t v377 = vmulq_f32(v609, v209);
                            float32x4_t v378 = vmulq_f32(v609, v210);
                            float32x4_t v379 = vmulq_f32(v609, v211);
                            v183[14].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v376, (float32x4_t)vdupq_laneq_s64((int64x2_t)v376, 1)));
                            v183[54].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v377, (float32x4_t)vdupq_laneq_s64((int64x2_t)v377, 1)));
                            v183[94].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v378, (float32x4_t)vdupq_laneq_s64((int64x2_t)v378, 1)));
                            v183[134].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v379, (float32x4_t)vdupq_laneq_s64((int64x2_t)v379, 1)));
                            if ((a6 & 0x1000000) == 0) {
                              goto LABEL_362;
                            }
LABEL_342:
                            float32x4_t v380 = vmulq_f32(v608, v208);
                            float32x4_t v381 = vmulq_f32(v608, v209);
                            float32x4_t v382 = vmulq_f32(v608, v210);
                            float32x4_t v383 = vmulq_f32(v608, v211);
                            v183[14].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v380, (float32x4_t)vdupq_laneq_s64((int64x2_t)v380, 1)));
                            v183[54].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v381, (float32x4_t)vdupq_laneq_s64((int64x2_t)v381, 1)));
                            v183[94].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v382, (float32x4_t)vdupq_laneq_s64((int64x2_t)v382, 1)));
                            v183[134].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v383, (float32x4_t)vdupq_laneq_s64((int64x2_t)v383, 1)));
                            goto LABEL_362;
                          }
                          goto LABEL_335;
                        }
                        float32x4_t v364 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v611, v208.f32[0]), v610, *(float32x2_t *)v208.f32, 1), v609, v208, 2), v608, v208, 3);
                        float32x4_t v365 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v611, v209.f32[0]), v610, *(float32x2_t *)v209.f32, 1), v609, v209, 2), v608, v209, 3);
                        float32x4_t v366 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v611, v210.f32[0]), v610, *(float32x2_t *)v210.f32, 1), v609, v210, 2), v608, v210, 3);
                        float32x4_t v367 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v611, v211.f32[0]), v610, *(float32x2_t *)v211.f32, 1), v609, v211, 2), v608, v211, 3);
                        if (v163 == 16843009)
                        {
                          v183[14] = v364;
                          v183[54] = v365;
                          v183[94] = v366;
                          v183[134] = v367;
                          goto LABEL_362;
                        }
                        if ((a6 & 0x101) == 0x101)
                        {
                          v183[14].i64[0] = v364.i64[0];
                          v183[54].i64[0] = v365.i64[0];
                          v183[94].i64[0] = v366.i64[0];
                          v183[134].i64[0] = v367.i64[0];
                          if ((a6 & 0x10000) == 0) {
                            goto LABEL_360;
                          }
                        }
                        else if (a6)
                        {
                          v183[14].i32[0] = v364.i32[0];
                          v183[54].i32[0] = v365.i32[0];
                          v183[94].i32[0] = v366.i32[0];
                          v183[134].i32[0] = v367.i32[0];
                          if ((a6 & 0x10000) == 0) {
                            goto LABEL_360;
                          }
                        }
                        else if ((a6 & 0x100) != 0)
                        {
                          v183[14].i32[1] = v364.i32[1];
                          v183[54].i32[1] = v365.i32[1];
                          v183[94].i32[1] = v366.i32[1];
                          v183[134].i32[1] = v367.i32[1];
                          if ((a6 & 0x10000) == 0)
                          {
LABEL_360:
                            if ((a6 & 0x1000000) == 0) {
                              goto LABEL_362;
                            }
LABEL_361:
                            v183[14].i32[3] = v364.i32[3];
                            v183[54].i32[3] = v365.i32[3];
                            v183[94].i32[3] = v366.i32[3];
                            v183[134].i32[3] = v367.i32[3];
                            goto LABEL_362;
                          }
                        }
                        else if ((a6 & 0x10000) == 0)
                        {
                          goto LABEL_360;
                        }
                        v183[14].i32[2] = v364.i32[2];
                        v183[54].i32[2] = v365.i32[2];
                        v183[94].i32[2] = v366.i32[2];
                        v183[134].i32[2] = v367.i32[2];
                        if ((a6 & 0x1000000) != 0) {
                          goto LABEL_361;
                        }
LABEL_362:
                        if (!v48) {
                          goto LABEL_384;
                        }
                        if (v598)
                        {
                          if ((a6 & 2) != 0)
                          {
                            float32x4_t v404 = vmulq_f32(v607, v208);
                            float32x4_t v405 = vmulq_f32(v607, v209);
                            float32x4_t v406 = vmulq_f32(v607, v210);
                            float32x4_t v407 = vmulq_f32(v607, v211);
                            v183[15].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v404, (float32x4_t)vdupq_laneq_s64((int64x2_t)v404, 1)));
                            v183[55].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v405, (float32x4_t)vdupq_laneq_s64((int64x2_t)v405, 1)));
                            v183[95].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v406, (float32x4_t)vdupq_laneq_s64((int64x2_t)v406, 1)));
                            v183[135].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v407, (float32x4_t)vdupq_laneq_s64((int64x2_t)v407, 1)));
                            if ((a6 & 0x200) == 0) {
                              goto LABEL_366;
                            }
                          }
                          else if ((a6 & 0x200) == 0)
                          {
LABEL_366:
                            if ((a6 & 0x20000) != 0) {
                              goto LABEL_373;
                            }
LABEL_367:
                            if ((a6 & 0x2000000) != 0) {
                              goto LABEL_374;
                            }
                            goto LABEL_384;
                          }
                          float32x4_t v408 = vmulq_f32(v606, v208);
                          float32x4_t v409 = vmulq_f32(v606, v209);
                          float32x4_t v410 = vmulq_f32(v606, v210);
                          float32x4_t v411 = vmulq_f32(v606, v211);
                          v183[15].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v408, (float32x4_t)vdupq_laneq_s64((int64x2_t)v408, 1)));
                          v183[55].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v409, (float32x4_t)vdupq_laneq_s64((int64x2_t)v409, 1)));
                          v183[95].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v410, (float32x4_t)vdupq_laneq_s64((int64x2_t)v410, 1)));
                          v183[135].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v411, (float32x4_t)vdupq_laneq_s64((int64x2_t)v411, 1)));
                          if ((a6 & 0x20000) != 0)
                          {
LABEL_373:
                            float32x4_t v412 = vmulq_f32(v605, v208);
                            float32x4_t v413 = vmulq_f32(v605, v209);
                            float32x4_t v414 = vmulq_f32(v605, v210);
                            float32x4_t v415 = vmulq_f32(v605, v211);
                            v183[15].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v412, (float32x4_t)vdupq_laneq_s64((int64x2_t)v412, 1)));
                            v183[55].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v413, (float32x4_t)vdupq_laneq_s64((int64x2_t)v413, 1)));
                            v183[95].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v414, (float32x4_t)vdupq_laneq_s64((int64x2_t)v414, 1)));
                            v183[135].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v415, (float32x4_t)vdupq_laneq_s64((int64x2_t)v415, 1)));
                            if ((a6 & 0x2000000) == 0) {
                              goto LABEL_384;
                            }
LABEL_374:
                            float32x4_t v416 = vmulq_f32(v604, v208);
                            float32x4_t v417 = vmulq_f32(v604, v209);
                            float32x4_t v418 = vmulq_f32(v604, v210);
                            float32x4_t v419 = vmulq_f32(v604, v211);
                            v183[15].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v416, (float32x4_t)vdupq_laneq_s64((int64x2_t)v416, 1)));
                            v183[55].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v417, (float32x4_t)vdupq_laneq_s64((int64x2_t)v417, 1)));
                            v183[95].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v418, (float32x4_t)vdupq_laneq_s64((int64x2_t)v418, 1)));
                            v183[135].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v419, (float32x4_t)vdupq_laneq_s64((int64x2_t)v419, 1)));
                            goto LABEL_384;
                          }
                          goto LABEL_367;
                        }
                        float32x4_t v400 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v607, v208.f32[0]), v606, *(float32x2_t *)v208.f32, 1), v605, v208, 2), v604, v208, 3);
                        float32x4_t v401 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v607, v209.f32[0]), v606, *(float32x2_t *)v209.f32, 1), v605, v209, 2), v604, v209, 3);
                        float32x4_t v402 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v607, v210.f32[0]), v606, *(float32x2_t *)v210.f32, 1), v605, v210, 2), v604, v210, 3);
                        float32x4_t v403 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v607, v211.f32[0]), v606, *(float32x2_t *)v211.f32, 1), v605, v211, 2), v604, v211, 3);
                        if (v48 == 16843009)
                        {
                          v183[15] = v400;
                          v183[55] = v401;
                          void v183[95] = v402;
                          v183[135] = v403;
                          goto LABEL_384;
                        }
                        if ((a6 & 0x202) == 0x202)
                        {
                          v183[15].i64[0] = v400.i64[0];
                          v183[55].i64[0] = v401.i64[0];
                          v183[95].i64[0] = v402.i64[0];
                          v183[135].i64[0] = v403.i64[0];
                          if ((a6 & 0x20000) == 0) {
                            goto LABEL_382;
                          }
                        }
                        else if ((a6 & 2) != 0)
                        {
                          v183[15].i32[0] = v400.i32[0];
                          v183[55].i32[0] = v401.i32[0];
                          v183[95].i32[0] = v402.i32[0];
                          v183[135].i32[0] = v403.i32[0];
                          if ((a6 & 0x20000) == 0) {
                            goto LABEL_382;
                          }
                        }
                        else if ((a6 & 0x200) != 0)
                        {
                          v183[15].i32[1] = v400.i32[1];
                          v183[55].i32[1] = v401.i32[1];
                          v183[95].i32[1] = v402.i32[1];
                          v183[135].i32[1] = v403.i32[1];
                          if ((a6 & 0x20000) == 0)
                          {
LABEL_382:
                            if ((a6 & 0x2000000) == 0) {
                              goto LABEL_384;
                            }
LABEL_383:
                            v183[15].i32[3] = v400.i32[3];
                            v183[55].i32[3] = v401.i32[3];
                            v183[95].i32[3] = v402.i32[3];
                            v183[135].i32[3] = v403.i32[3];
                            goto LABEL_384;
                          }
                        }
                        else if ((a6 & 0x20000) == 0)
                        {
                          goto LABEL_382;
                        }
                        v183[15].i32[2] = v400.i32[2];
                        v183[55].i32[2] = v401.i32[2];
                        v183[95].i32[2] = v402.i32[2];
                        v183[135].i32[2] = v403.i32[2];
                        if ((a6 & 0x2000000) != 0) {
                          goto LABEL_383;
                        }
LABEL_384:
                        if (!v49) {
                          goto LABEL_406;
                        }
                        if (v597)
                        {
                          if ((a6 & 4) != 0)
                          {
                            float32x4_t v424 = vmulq_f32(v603, v208);
                            float32x4_t v425 = vmulq_f32(v603, v209);
                            float32x4_t v426 = vmulq_f32(v603, v210);
                            float32x4_t v427 = vmulq_f32(v603, v211);
                            v183[16].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v424, (float32x4_t)vdupq_laneq_s64((int64x2_t)v424, 1)));
                            v183[56].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v425, (float32x4_t)vdupq_laneq_s64((int64x2_t)v425, 1)));
                            v183[96].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v426, (float32x4_t)vdupq_laneq_s64((int64x2_t)v426, 1)));
                            v183[136].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v427, (float32x4_t)vdupq_laneq_s64((int64x2_t)v427, 1)));
                            if ((a6 & 0x400) == 0) {
                              goto LABEL_388;
                            }
                          }
                          else if ((a6 & 0x400) == 0)
                          {
LABEL_388:
                            if ((a6 & 0x40000) != 0) {
                              goto LABEL_395;
                            }
LABEL_389:
                            if ((a6 & 0x4000000) != 0) {
                              goto LABEL_396;
                            }
                            goto LABEL_406;
                          }
                          float32x4_t v428 = vmulq_f32(v602, v208);
                          float32x4_t v429 = vmulq_f32(v602, v209);
                          float32x4_t v430 = vmulq_f32(v602, v210);
                          float32x4_t v431 = vmulq_f32(v602, v211);
                          v183[16].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v428, (float32x4_t)vdupq_laneq_s64((int64x2_t)v428, 1)));
                          v183[56].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v429, (float32x4_t)vdupq_laneq_s64((int64x2_t)v429, 1)));
                          v183[96].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v430, (float32x4_t)vdupq_laneq_s64((int64x2_t)v430, 1)));
                          v183[136].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v431, (float32x4_t)vdupq_laneq_s64((int64x2_t)v431, 1)));
                          if ((a6 & 0x40000) != 0)
                          {
LABEL_395:
                            float32x4_t v432 = vmulq_f32(v601, v208);
                            float32x4_t v433 = vmulq_f32(v601, v209);
                            float32x4_t v434 = vmulq_f32(v601, v210);
                            float32x4_t v435 = vmulq_f32(v601, v211);
                            v183[16].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v432, (float32x4_t)vdupq_laneq_s64((int64x2_t)v432, 1)));
                            v183[56].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v433, (float32x4_t)vdupq_laneq_s64((int64x2_t)v433, 1)));
                            v183[96].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v434, (float32x4_t)vdupq_laneq_s64((int64x2_t)v434, 1)));
                            v183[136].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v435, (float32x4_t)vdupq_laneq_s64((int64x2_t)v435, 1)));
                            if ((a6 & 0x4000000) == 0) {
                              goto LABEL_406;
                            }
LABEL_396:
                            float32x4_t v436 = vmulq_f32(v600, v208);
                            float32x4_t v437 = vmulq_f32(v600, v209);
                            float32x4_t v438 = vmulq_f32(v600, v210);
                            float32x4_t v439 = vmulq_f32(v600, v211);
                            v183[16].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v436, (float32x4_t)vdupq_laneq_s64((int64x2_t)v436, 1)));
                            v183[56].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v437, (float32x4_t)vdupq_laneq_s64((int64x2_t)v437, 1)));
                            v183[96].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v438, (float32x4_t)vdupq_laneq_s64((int64x2_t)v438, 1)));
                            v183[136].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v439, (float32x4_t)vdupq_laneq_s64((int64x2_t)v439, 1)));
                            goto LABEL_406;
                          }
                          goto LABEL_389;
                        }
                        float32x4_t v420 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v603, v208.f32[0]), v602, *(float32x2_t *)v208.f32, 1), v601, v208, 2), v600, v208, 3);
                        float32x4_t v421 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v603, v209.f32[0]), v602, *(float32x2_t *)v209.f32, 1), v601, v209, 2), v600, v209, 3);
                        float32x4_t v422 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v603, v210.f32[0]), v602, *(float32x2_t *)v210.f32, 1), v601, v210, 2), v600, v210, 3);
                        float32x4_t v423 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v603, v211.f32[0]), v602, *(float32x2_t *)v211.f32, 1), v601, v211, 2), v600, v211, 3);
                        if (v49 == 16843009)
                        {
                          v183[16] = v420;
                          v183[56] = v421;
                          v183[96] = v422;
                          v183[136] = v423;
                          goto LABEL_406;
                        }
                        if ((a6 & 0x404) == 0x404)
                        {
                          v183[16].i64[0] = v420.i64[0];
                          v183[56].i64[0] = v421.i64[0];
                          v183[96].i64[0] = v422.i64[0];
                          v183[136].i64[0] = v423.i64[0];
                          if ((a6 & 0x40000) == 0) {
                            goto LABEL_404;
                          }
                        }
                        else if ((a6 & 4) != 0)
                        {
                          v183[16].i32[0] = v420.i32[0];
                          v183[56].i32[0] = v421.i32[0];
                          v183[96].i32[0] = v422.i32[0];
                          v183[136].i32[0] = v423.i32[0];
                          if ((a6 & 0x40000) == 0) {
                            goto LABEL_404;
                          }
                        }
                        else if ((a6 & 0x400) != 0)
                        {
                          v183[16].i32[1] = v420.i32[1];
                          v183[56].i32[1] = v421.i32[1];
                          v183[96].i32[1] = v422.i32[1];
                          v183[136].i32[1] = v423.i32[1];
                          if ((a6 & 0x40000) == 0)
                          {
LABEL_404:
                            if ((a6 & 0x4000000) == 0) {
                              goto LABEL_406;
                            }
LABEL_405:
                            v183[16].i32[3] = v420.i32[3];
                            v183[56].i32[3] = v421.i32[3];
                            v183[96].i32[3] = v422.i32[3];
                            v183[136].i32[3] = v423.i32[3];
                            goto LABEL_406;
                          }
                        }
                        else if ((a6 & 0x40000) == 0)
                        {
                          goto LABEL_404;
                        }
                        v183[16].i32[2] = v420.i32[2];
                        v183[56].i32[2] = v421.i32[2];
                        v183[96].i32[2] = v422.i32[2];
                        v183[136].i32[2] = v423.i32[2];
                        if ((a6 & 0x4000000) != 0) {
                          goto LABEL_405;
                        }
LABEL_406:
                        if (!v50) {
                          goto LABEL_428;
                        }
                        if (v596)
                        {
                          if ((a6 & 8) != 0)
                          {
                            float32x4_t v444 = vmulq_f32(v24, v208);
                            float32x4_t v445 = vmulq_f32(v24, v209);
                            float32x4_t v446 = vmulq_f32(v24, v210);
                            float32x4_t v447 = vmulq_f32(v24, v211);
                            v183[17].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v444, (float32x4_t)vdupq_laneq_s64((int64x2_t)v444, 1)));
                            v183[57].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v445, (float32x4_t)vdupq_laneq_s64((int64x2_t)v445, 1)));
                            v183[97].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v446, (float32x4_t)vdupq_laneq_s64((int64x2_t)v446, 1)));
                            v183[137].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v447, (float32x4_t)vdupq_laneq_s64((int64x2_t)v447, 1)));
                            if ((a6 & 0x800) == 0) {
                              goto LABEL_410;
                            }
                          }
                          else if ((a6 & 0x800) == 0)
                          {
LABEL_410:
                            if ((a6 & 0x80000) != 0) {
                              goto LABEL_417;
                            }
LABEL_411:
                            if ((a6 & 0x8000000) != 0) {
                              goto LABEL_418;
                            }
                            goto LABEL_428;
                          }
                          float32x4_t v448 = vmulq_f32(v25, v208);
                          float32x4_t v449 = vmulq_f32(v25, v209);
                          float32x4_t v450 = vmulq_f32(v25, v210);
                          float32x4_t v451 = vmulq_f32(v25, v211);
                          v183[17].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v448, (float32x4_t)vdupq_laneq_s64((int64x2_t)v448, 1)));
                          v183[57].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v449, (float32x4_t)vdupq_laneq_s64((int64x2_t)v449, 1)));
                          v183[97].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v450, (float32x4_t)vdupq_laneq_s64((int64x2_t)v450, 1)));
                          v183[137].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v451, (float32x4_t)vdupq_laneq_s64((int64x2_t)v451, 1)));
                          if ((a6 & 0x80000) != 0)
                          {
LABEL_417:
                            float32x4_t v452 = vmulq_f32(v14, v208);
                            float32x4_t v453 = vmulq_f32(v14, v209);
                            float32x4_t v454 = vmulq_f32(v14, v210);
                            float32x4_t v455 = vmulq_f32(v14, v211);
                            v183[17].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v452, (float32x4_t)vdupq_laneq_s64((int64x2_t)v452, 1)));
                            v183[57].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v453, (float32x4_t)vdupq_laneq_s64((int64x2_t)v453, 1)));
                            v183[97].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v454, (float32x4_t)vdupq_laneq_s64((int64x2_t)v454, 1)));
                            v183[137].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v455, (float32x4_t)vdupq_laneq_s64((int64x2_t)v455, 1)));
                            if ((a6 & 0x8000000) == 0) {
                              goto LABEL_428;
                            }
LABEL_418:
                            float32x4_t v456 = vmulq_f32(v15, v208);
                            float32x4_t v457 = vmulq_f32(v15, v209);
                            float32x4_t v458 = vmulq_f32(v15, v210);
                            float32x4_t v459 = vmulq_f32(v15, v211);
                            v183[17].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v456, (float32x4_t)vdupq_laneq_s64((int64x2_t)v456, 1)));
                            v183[57].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v457, (float32x4_t)vdupq_laneq_s64((int64x2_t)v457, 1)));
                            v183[97].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v458, (float32x4_t)vdupq_laneq_s64((int64x2_t)v458, 1)));
                            v183[137].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v459, (float32x4_t)vdupq_laneq_s64((int64x2_t)v459, 1)));
                            goto LABEL_428;
                          }
                          goto LABEL_411;
                        }
                        float32x4_t v440 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v24, v208.f32[0]), v25, *(float32x2_t *)v208.f32, 1), v14, v208, 2), v15, v208, 3);
                        float32x4_t v441 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v24, v209.f32[0]), v25, *(float32x2_t *)v209.f32, 1), v14, v209, 2), v15, v209, 3);
                        float32x4_t v442 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v24, v210.f32[0]), v25, *(float32x2_t *)v210.f32, 1), v14, v210, 2), v15, v210, 3);
                        float32x4_t v443 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v24, v211.f32[0]), v25, *(float32x2_t *)v211.f32, 1), v14, v211, 2), v15, v211, 3);
                        if (v50 == 16843009)
                        {
                          v183[17] = v440;
                          v183[57] = v441;
                          v183[97] = v442;
                          v183[137] = v443;
                          goto LABEL_428;
                        }
                        if ((a6 & 0x808) == 0x808)
                        {
                          v183[17].i64[0] = v440.i64[0];
                          v183[57].i64[0] = v441.i64[0];
                          v183[97].i64[0] = v442.i64[0];
                          v183[137].i64[0] = v443.i64[0];
                          if ((a6 & 0x80000) == 0) {
                            goto LABEL_426;
                          }
                        }
                        else if ((a6 & 8) != 0)
                        {
                          v183[17].i32[0] = v440.i32[0];
                          v183[57].i32[0] = v441.i32[0];
                          v183[97].i32[0] = v442.i32[0];
                          v183[137].i32[0] = v443.i32[0];
                          if ((a6 & 0x80000) == 0) {
                            goto LABEL_426;
                          }
                        }
                        else if ((a6 & 0x800) != 0)
                        {
                          v183[17].i32[1] = v440.i32[1];
                          v183[57].i32[1] = v441.i32[1];
                          v183[97].i32[1] = v442.i32[1];
                          v183[137].i32[1] = v443.i32[1];
                          if ((a6 & 0x80000) == 0)
                          {
LABEL_426:
                            if ((a6 & 0x8000000) == 0) {
                              goto LABEL_428;
                            }
LABEL_427:
                            v183[17].i32[3] = v440.i32[3];
                            v183[57].i32[3] = v441.i32[3];
                            v183[97].i32[3] = v442.i32[3];
                            v183[137].i32[3] = v443.i32[3];
                            goto LABEL_428;
                          }
                        }
                        else if ((a6 & 0x80000) == 0)
                        {
                          goto LABEL_426;
                        }
                        v183[17].i32[2] = v440.i32[2];
                        v183[57].i32[2] = v441.i32[2];
                        v183[97].i32[2] = v442.i32[2];
                        v183[137].i32[2] = v443.i32[2];
                        if ((a6 & 0x8000000) != 0) {
                          goto LABEL_427;
                        }
LABEL_428:
                        if (!v51) {
                          goto LABEL_450;
                        }
                        if (v595)
                        {
                          if ((a6 & 0x10) != 0)
                          {
                            float32x4_t v464 = vmulq_f32(v16, v208);
                            float32x4_t v465 = vmulq_f32(v16, v209);
                            float32x4_t v466 = vmulq_f32(v16, v210);
                            float32x4_t v467 = vmulq_f32(v16, v211);
                            v183[18].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v464, (float32x4_t)vdupq_laneq_s64((int64x2_t)v464, 1)));
                            v183[58].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v465, (float32x4_t)vdupq_laneq_s64((int64x2_t)v465, 1)));
                            v183[98].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v466, (float32x4_t)vdupq_laneq_s64((int64x2_t)v466, 1)));
                            v183[138].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v467, (float32x4_t)vdupq_laneq_s64((int64x2_t)v467, 1)));
                            if ((a6 & 0x1000) == 0) {
                              goto LABEL_432;
                            }
                          }
                          else if ((a6 & 0x1000) == 0)
                          {
LABEL_432:
                            if ((a6 & 0x100000) != 0) {
                              goto LABEL_439;
                            }
LABEL_433:
                            if ((a6 & 0x10000000) != 0) {
                              goto LABEL_440;
                            }
                            goto LABEL_450;
                          }
                          float32x4_t v468 = vmulq_f32(v17, v208);
                          float32x4_t v469 = vmulq_f32(v17, v209);
                          float32x4_t v470 = vmulq_f32(v17, v210);
                          float32x4_t v471 = vmulq_f32(v17, v211);
                          v183[18].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v468, (float32x4_t)vdupq_laneq_s64((int64x2_t)v468, 1)));
                          v183[58].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v469, (float32x4_t)vdupq_laneq_s64((int64x2_t)v469, 1)));
                          v183[98].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v470, (float32x4_t)vdupq_laneq_s64((int64x2_t)v470, 1)));
                          v183[138].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v471, (float32x4_t)vdupq_laneq_s64((int64x2_t)v471, 1)));
                          if ((a6 & 0x100000) != 0)
                          {
LABEL_439:
                            float32x4_t v472 = vmulq_f32(v18, v208);
                            float32x4_t v473 = vmulq_f32(v18, v209);
                            float32x4_t v474 = vmulq_f32(v18, v210);
                            float32x4_t v475 = vmulq_f32(v18, v211);
                            v183[18].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v472, (float32x4_t)vdupq_laneq_s64((int64x2_t)v472, 1)));
                            v183[58].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v473, (float32x4_t)vdupq_laneq_s64((int64x2_t)v473, 1)));
                            v183[98].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v474, (float32x4_t)vdupq_laneq_s64((int64x2_t)v474, 1)));
                            v183[138].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v475, (float32x4_t)vdupq_laneq_s64((int64x2_t)v475, 1)));
                            if ((a6 & 0x10000000) == 0) {
                              goto LABEL_450;
                            }
LABEL_440:
                            float32x4_t v476 = vmulq_f32(v19, v208);
                            float32x4_t v477 = vmulq_f32(v19, v209);
                            float32x4_t v478 = vmulq_f32(v19, v210);
                            float32x4_t v479 = vmulq_f32(v19, v211);
                            v183[18].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v476, (float32x4_t)vdupq_laneq_s64((int64x2_t)v476, 1)));
                            v183[58].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v477, (float32x4_t)vdupq_laneq_s64((int64x2_t)v477, 1)));
                            v183[98].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v478, (float32x4_t)vdupq_laneq_s64((int64x2_t)v478, 1)));
                            v183[138].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v479, (float32x4_t)vdupq_laneq_s64((int64x2_t)v479, 1)));
                            goto LABEL_450;
                          }
                          goto LABEL_433;
                        }
                        float32x4_t v460 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v16, v208.f32[0]), v17, *(float32x2_t *)v208.f32, 1), v18, v208, 2), v19, v208, 3);
                        float32x4_t v461 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v16, v209.f32[0]), v17, *(float32x2_t *)v209.f32, 1), v18, v209, 2), v19, v209, 3);
                        float32x4_t v462 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v16, v210.f32[0]), v17, *(float32x2_t *)v210.f32, 1), v18, v210, 2), v19, v210, 3);
                        float32x4_t v463 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v16, v211.f32[0]), v17, *(float32x2_t *)v211.f32, 1), v18, v211, 2), v19, v211, 3);
                        if (v51 == 16843009)
                        {
                          v183[18] = v460;
                          v183[58] = v461;
                          v183[98] = v462;
                          v183[138] = v463;
                          goto LABEL_450;
                        }
                        if ((a6 & 0x1010) == 0x1010)
                        {
                          v183[18].i64[0] = v460.i64[0];
                          v183[58].i64[0] = v461.i64[0];
                          v183[98].i64[0] = v462.i64[0];
                          v183[138].i64[0] = v463.i64[0];
                          if ((a6 & 0x100000) == 0) {
                            goto LABEL_448;
                          }
                        }
                        else if ((a6 & 0x10) != 0)
                        {
                          v183[18].i32[0] = v460.i32[0];
                          v183[58].i32[0] = v461.i32[0];
                          v183[98].i32[0] = v462.i32[0];
                          v183[138].i32[0] = v463.i32[0];
                          if ((a6 & 0x100000) == 0) {
                            goto LABEL_448;
                          }
                        }
                        else if ((a6 & 0x1000) != 0)
                        {
                          v183[18].i32[1] = v460.i32[1];
                          v183[58].i32[1] = v461.i32[1];
                          v183[98].i32[1] = v462.i32[1];
                          v183[138].i32[1] = v463.i32[1];
                          if ((a6 & 0x100000) == 0)
                          {
LABEL_448:
                            if ((a6 & 0x10000000) == 0) {
                              goto LABEL_450;
                            }
LABEL_449:
                            v183[18].i32[3] = v460.i32[3];
                            v183[58].i32[3] = v461.i32[3];
                            v183[98].i32[3] = v462.i32[3];
                            v183[138].i32[3] = v463.i32[3];
                            goto LABEL_450;
                          }
                        }
                        else if ((a6 & 0x100000) == 0)
                        {
                          goto LABEL_448;
                        }
                        v183[18].i32[2] = v460.i32[2];
                        v183[58].i32[2] = v461.i32[2];
                        v183[98].i32[2] = v462.i32[2];
                        v183[138].i32[2] = v463.i32[2];
                        if ((a6 & 0x10000000) != 0) {
                          goto LABEL_449;
                        }
LABEL_450:
                        if (!v52) {
                          goto LABEL_472;
                        }
                        if (v594)
                        {
                          if ((a6 & 0x20) != 0)
                          {
                            float32x4_t v484 = vmulq_f32(v20, v208);
                            float32x4_t v485 = vmulq_f32(v20, v209);
                            float32x4_t v486 = vmulq_f32(v20, v210);
                            float32x4_t v487 = vmulq_f32(v20, v211);
                            v183[19].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v484, (float32x4_t)vdupq_laneq_s64((int64x2_t)v484, 1)));
                            v183[59].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v485, (float32x4_t)vdupq_laneq_s64((int64x2_t)v485, 1)));
                            v183[99].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v486, (float32x4_t)vdupq_laneq_s64((int64x2_t)v486, 1)));
                            v183[139].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v487, (float32x4_t)vdupq_laneq_s64((int64x2_t)v487, 1)));
                            if ((a6 & 0x2000) == 0) {
                              goto LABEL_454;
                            }
                          }
                          else if ((a6 & 0x2000) == 0)
                          {
LABEL_454:
                            if ((a6 & 0x200000) != 0) {
                              goto LABEL_461;
                            }
LABEL_455:
                            if ((a6 & 0x20000000) != 0) {
                              goto LABEL_462;
                            }
                            goto LABEL_472;
                          }
                          float32x4_t v488 = vmulq_f32(v21, v208);
                          float32x4_t v489 = vmulq_f32(v21, v209);
                          float32x4_t v490 = vmulq_f32(v21, v210);
                          float32x4_t v491 = vmulq_f32(v21, v211);
                          v183[19].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v488, (float32x4_t)vdupq_laneq_s64((int64x2_t)v488, 1)));
                          v183[59].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v489, (float32x4_t)vdupq_laneq_s64((int64x2_t)v489, 1)));
                          v183[99].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v490, (float32x4_t)vdupq_laneq_s64((int64x2_t)v490, 1)));
                          v183[139].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v491, (float32x4_t)vdupq_laneq_s64((int64x2_t)v491, 1)));
                          if ((a6 & 0x200000) != 0)
                          {
LABEL_461:
                            float32x4_t v492 = vmulq_f32(a9, v208);
                            float32x4_t v493 = vmulq_f32(a9, v209);
                            float32x4_t v494 = vmulq_f32(a9, v210);
                            float32x4_t v495 = vmulq_f32(a9, v211);
                            v183[19].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v492, (float32x4_t)vdupq_laneq_s64((int64x2_t)v492, 1)));
                            v183[59].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v493, (float32x4_t)vdupq_laneq_s64((int64x2_t)v493, 1)));
                            v183[99].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v494, (float32x4_t)vdupq_laneq_s64((int64x2_t)v494, 1)));
                            v183[139].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v495, (float32x4_t)vdupq_laneq_s64((int64x2_t)v495, 1)));
                            if ((a6 & 0x20000000) == 0) {
                              goto LABEL_472;
                            }
LABEL_462:
                            float32x4_t v496 = vmulq_f32(v23, v208);
                            float32x4_t v497 = vmulq_f32(v23, v209);
                            float32x4_t v498 = vmulq_f32(v23, v210);
                            float32x4_t v499 = vmulq_f32(v23, v211);
                            v183[19].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v496, (float32x4_t)vdupq_laneq_s64((int64x2_t)v496, 1)));
                            v183[59].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v497, (float32x4_t)vdupq_laneq_s64((int64x2_t)v497, 1)));
                            v183[99].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v498, (float32x4_t)vdupq_laneq_s64((int64x2_t)v498, 1)));
                            v183[139].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v499, (float32x4_t)vdupq_laneq_s64((int64x2_t)v499, 1)));
                            goto LABEL_472;
                          }
                          goto LABEL_455;
                        }
                        float32x4_t v480 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, v208.f32[0]), v21, *(float32x2_t *)v208.f32, 1), a9, v208, 2), v23, v208, 3);
                        float32x4_t v481 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, v209.f32[0]), v21, *(float32x2_t *)v209.f32, 1), a9, v209, 2), v23, v209, 3);
                        float32x4_t v482 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, v210.f32[0]), v21, *(float32x2_t *)v210.f32, 1), a9, v210, 2), v23, v210, 3);
                        float32x4_t v483 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, v211.f32[0]), v21, *(float32x2_t *)v211.f32, 1), a9, v211, 2), v23, v211, 3);
                        if (v52 == 16843009)
                        {
                          v183[19] = v480;
                          v183[59] = v481;
                          v183[99] = v482;
                          v183[139] = v483;
                          goto LABEL_472;
                        }
                        if ((a6 & 0x2020) == 0x2020)
                        {
                          v183[19].i64[0] = v480.i64[0];
                          v183[59].i64[0] = v481.i64[0];
                          v183[99].i64[0] = v482.i64[0];
                          v183[139].i64[0] = v483.i64[0];
                          if ((a6 & 0x200000) == 0) {
                            goto LABEL_470;
                          }
                        }
                        else if ((a6 & 0x20) != 0)
                        {
                          v183[19].i32[0] = v480.i32[0];
                          v183[59].i32[0] = v481.i32[0];
                          v183[99].i32[0] = v482.i32[0];
                          v183[139].i32[0] = v483.i32[0];
                          if ((a6 & 0x200000) == 0) {
                            goto LABEL_470;
                          }
                        }
                        else if ((a6 & 0x2000) != 0)
                        {
                          v183[19].i32[1] = v480.i32[1];
                          v183[59].i32[1] = v481.i32[1];
                          v183[99].i32[1] = v482.i32[1];
                          v183[139].i32[1] = v483.i32[1];
                          if ((a6 & 0x200000) == 0)
                          {
LABEL_470:
                            if ((a6 & 0x20000000) == 0) {
                              goto LABEL_472;
                            }
LABEL_471:
                            v183[19].i32[3] = v480.i32[3];
                            v183[59].i32[3] = v481.i32[3];
                            v183[99].i32[3] = v482.i32[3];
                            v183[139].i32[3] = v483.i32[3];
                            goto LABEL_472;
                          }
                        }
                        else if ((a6 & 0x200000) == 0)
                        {
                          goto LABEL_470;
                        }
                        v183[19].i32[2] = v480.i32[2];
                        v183[59].i32[2] = v481.i32[2];
                        v183[99].i32[2] = v482.i32[2];
                        v183[139].i32[2] = v483.i32[2];
                        if ((a6 & 0x20000000) != 0) {
                          goto LABEL_471;
                        }
LABEL_472:
                        if (!v53) {
                          goto LABEL_494;
                        }
                        if (v593)
                        {
                          if ((a6 & 0x40) != 0)
                          {
                            float32x4_t v504 = vmulq_f32(a13, v208);
                            float32x4_t v505 = vmulq_f32(a13, v209);
                            float32x4_t v506 = vmulq_f32(a13, v210);
                            float32x4_t v507 = vmulq_f32(a13, v211);
                            v183[20].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v504, (float32x4_t)vdupq_laneq_s64((int64x2_t)v504, 1)));
                            v183[60].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v505, (float32x4_t)vdupq_laneq_s64((int64x2_t)v505, 1)));
                            v183[100].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v506, (float32x4_t)vdupq_laneq_s64((int64x2_t)v506, 1)));
                            v183[140].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v507, (float32x4_t)vdupq_laneq_s64((int64x2_t)v507, 1)));
                            if ((a6 & 0x4000) == 0) {
                              goto LABEL_476;
                            }
                          }
                          else if ((a6 & 0x4000) == 0)
                          {
LABEL_476:
                            if ((a6 & 0x400000) != 0) {
                              goto LABEL_483;
                            }
LABEL_477:
                            if ((a6 & 0x40000000) != 0) {
                              goto LABEL_484;
                            }
                            goto LABEL_494;
                          }
                          float32x4_t v508 = vmulq_f32(v22, v208);
                          float32x4_t v509 = vmulq_f32(v22, v209);
                          float32x4_t v510 = vmulq_f32(v22, v210);
                          float32x4_t v511 = vmulq_f32(v22, v211);
                          v183[20].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v508, (float32x4_t)vdupq_laneq_s64((int64x2_t)v508, 1)));
                          v183[60].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v509, (float32x4_t)vdupq_laneq_s64((int64x2_t)v509, 1)));
                          v183[100].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v510, (float32x4_t)vdupq_laneq_s64((int64x2_t)v510, 1)));
                          v183[140].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v511, (float32x4_t)vdupq_laneq_s64((int64x2_t)v511, 1)));
                          if ((a6 & 0x400000) != 0)
                          {
LABEL_483:
                            float32x4_t v512 = vmulq_f32(v37, v208);
                            float32x4_t v513 = vmulq_f32(v37, v209);
                            float32x4_t v514 = vmulq_f32(v37, v210);
                            float32x4_t v515 = vmulq_f32(v37, v211);
                            v183[20].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v512, (float32x4_t)vdupq_laneq_s64((int64x2_t)v512, 1)));
                            v183[60].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v513, (float32x4_t)vdupq_laneq_s64((int64x2_t)v513, 1)));
                            v183[100].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v514, (float32x4_t)vdupq_laneq_s64((int64x2_t)v514, 1)));
                            v183[140].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v515, (float32x4_t)vdupq_laneq_s64((int64x2_t)v515, 1)));
                            if ((a6 & 0x40000000) == 0) {
                              goto LABEL_494;
                            }
LABEL_484:
                            float32x4_t v516 = vmulq_f32(a8, v208);
                            float32x4_t v517 = vmulq_f32(a8, v209);
                            float32x4_t v518 = vmulq_f32(a8, v210);
                            float32x4_t v519 = vmulq_f32(a8, v211);
                            v183[20].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v516, (float32x4_t)vdupq_laneq_s64((int64x2_t)v516, 1)));
                            v183[60].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v517, (float32x4_t)vdupq_laneq_s64((int64x2_t)v517, 1)));
                            v183[100].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v518, (float32x4_t)vdupq_laneq_s64((int64x2_t)v518, 1)));
                            v183[140].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v519, (float32x4_t)vdupq_laneq_s64((int64x2_t)v519, 1)));
                            goto LABEL_494;
                          }
                          goto LABEL_477;
                        }
                        float32x4_t v500 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a13, v208.f32[0]), v22, *(float32x2_t *)v208.f32, 1), v37, v208, 2), a8, v208, 3);
                        float32x4_t v501 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a13, v209.f32[0]), v22, *(float32x2_t *)v209.f32, 1), v37, v209, 2), a8, v209, 3);
                        float32x4_t v502 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a13, v210.f32[0]), v22, *(float32x2_t *)v210.f32, 1), v37, v210, 2), a8, v210, 3);
                        float32x4_t v503 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a13, v211.f32[0]), v22, *(float32x2_t *)v211.f32, 1), v37, v211, 2), a8, v211, 3);
                        if (v53 == 16843009)
                        {
                          v183[20] = v500;
                          v183[60] = v501;
                          v183[100] = v502;
                          v183[140] = v503;
                          goto LABEL_494;
                        }
                        if ((a6 & 0x4040) == 0x4040)
                        {
                          v183[20].i64[0] = v500.i64[0];
                          v183[60].i64[0] = v501.i64[0];
                          v183[100].i64[0] = v502.i64[0];
                          v183[140].i64[0] = v503.i64[0];
                          if ((a6 & 0x400000) == 0) {
                            goto LABEL_492;
                          }
                        }
                        else if ((a6 & 0x40) != 0)
                        {
                          v183[20].i32[0] = v500.i32[0];
                          v183[60].i32[0] = v501.i32[0];
                          v183[100].i32[0] = v502.i32[0];
                          v183[140].i32[0] = v503.i32[0];
                          if ((a6 & 0x400000) == 0) {
                            goto LABEL_492;
                          }
                        }
                        else if ((a6 & 0x4000) != 0)
                        {
                          v183[20].i32[1] = v500.i32[1];
                          v183[60].i32[1] = v501.i32[1];
                          v183[100].i32[1] = v502.i32[1];
                          v183[140].i32[1] = v503.i32[1];
                          if ((a6 & 0x400000) == 0)
                          {
LABEL_492:
                            if ((a6 & 0x40000000) == 0) {
                              goto LABEL_494;
                            }
LABEL_493:
                            v183[20].i32[3] = v500.i32[3];
                            v183[60].i32[3] = v501.i32[3];
                            v183[100].i32[3] = v502.i32[3];
                            v183[140].i32[3] = v503.i32[3];
                            goto LABEL_494;
                          }
                        }
                        else if ((a6 & 0x400000) == 0)
                        {
                          goto LABEL_492;
                        }
                        v183[20].i32[2] = v500.i32[2];
                        v183[60].i32[2] = v501.i32[2];
                        v183[100].i32[2] = v502.i32[2];
                        v183[140].i32[2] = v503.i32[2];
                        if ((a6 & 0x40000000) != 0) {
                          goto LABEL_493;
                        }
LABEL_494:
                        if (!v54) {
                          goto LABEL_518;
                        }
                        if (v592)
                        {
                          if ((a6 & 0x80) != 0)
                          {
                            float32x4_t v524 = vmulq_f32(a10, v208);
                            float32x4_t v525 = vmulq_f32(a10, v209);
                            float32x4_t v526 = vmulq_f32(a10, v210);
                            float32x4_t v527 = vmulq_f32(a10, v211);
                            v183[21].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v524, (float32x4_t)vdupq_laneq_s64((int64x2_t)v524, 1)));
                            v183[61].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v525, (float32x4_t)vdupq_laneq_s64((int64x2_t)v525, 1)));
                            v183[101].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v526, (float32x4_t)vdupq_laneq_s64((int64x2_t)v526, 1)));
                            v183[141].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v527, (float32x4_t)vdupq_laneq_s64((int64x2_t)v527, 1)));
                            if ((a6 & 0x8000) == 0) {
                              goto LABEL_498;
                            }
                          }
                          else if ((a6 & 0x8000) == 0)
                          {
LABEL_498:
                            if ((a6 & 0x800000) == 0) {
                              goto LABEL_499;
                            }
LABEL_506:
                            float32x4_t v532 = vmulq_f32(a14, v208);
                            float32x4_t v533 = vmulq_f32(a14, v209);
                            float32x4_t v534 = vmulq_f32(a14, v210);
                            float32x4_t v535 = vmulq_f32(a14, v211);
                            v183[21].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v532, (float32x4_t)vdupq_laneq_s64((int64x2_t)v532, 1)));
                            v183[61].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v533, (float32x4_t)vdupq_laneq_s64((int64x2_t)v533, 1)));
                            v183[101].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v534, (float32x4_t)vdupq_laneq_s64((int64x2_t)v534, 1)));
                            v183[141].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v535, (float32x4_t)vdupq_laneq_s64((int64x2_t)v535, 1)));
                            if ((a6 & 0x80000000) != 0)
                            {
LABEL_507:
                              float32x4_t v536 = vmulq_f32(a11, v208);
                              float32x4_t v537 = vmulq_f32(a11, v209);
                              float32x4_t v538 = vmulq_f32(a11, v210);
                              float32x4_t v539 = vmulq_f32(a11, v211);
                              v183[21].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v536, (float32x4_t)vdupq_laneq_s64((int64x2_t)v536, 1)));
                              v183[61].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v537, (float32x4_t)vdupq_laneq_s64((int64x2_t)v537, 1)));
                              v183[101].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v538, (float32x4_t)vdupq_laneq_s64((int64x2_t)v538, 1)));
                              v183[141].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v539, (float32x4_t)vdupq_laneq_s64((int64x2_t)v539, 1)));
                              if ((a4 & 0x3000) == 0) {
                                goto LABEL_520;
                              }
                              goto LABEL_519;
                            }
                            goto LABEL_518;
                          }
                          float32x4_t v528 = vmulq_f32(a12, v208);
                          float32x4_t v529 = vmulq_f32(a12, v209);
                          float32x4_t v530 = vmulq_f32(a12, v210);
                          float32x4_t v531 = vmulq_f32(a12, v211);
                          v183[21].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v528, (float32x4_t)vdupq_laneq_s64((int64x2_t)v528, 1)));
                          v183[61].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v529, (float32x4_t)vdupq_laneq_s64((int64x2_t)v529, 1)));
                          v183[101].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v530, (float32x4_t)vdupq_laneq_s64((int64x2_t)v530, 1)));
                          v183[141].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v531, (float32x4_t)vdupq_laneq_s64((int64x2_t)v531, 1)));
                          if ((a6 & 0x800000) == 0)
                          {
LABEL_499:
                            if ((a6 & 0x80000000) != 0) {
                              goto LABEL_507;
                            }
                            goto LABEL_518;
                          }
                          goto LABEL_506;
                        }
                        float32x4_t v520 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a10, v208.f32[0]), a12, *(float32x2_t *)v208.f32, 1), a14, v208, 2), a11, v208, 3);
                        float32x4_t v521 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a10, v209.f32[0]), a12, *(float32x2_t *)v209.f32, 1), a14, v209, 2), a11, v209, 3);
                        float32x4_t v522 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a10, v210.f32[0]), a12, *(float32x2_t *)v210.f32, 1), a14, v210, 2), a11, v210, 3);
                        float32x4_t v523 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a10, v211.f32[0]), a12, *(float32x2_t *)v211.f32, 1), a14, v211, 2), a11, v211, 3);
                        if (v54 == 16843009)
                        {
                          v183[21] = v520;
                          v183[61] = v521;
                          v183[101] = v522;
                          v183[141] = v523;
                          if ((a4 & 0x3000) == 0) {
                            goto LABEL_520;
                          }
                          goto LABEL_519;
                        }
                        if ((a6 & 0x8080) == 0x8080)
                        {
                          v183[21].i64[0] = v520.i64[0];
                          v183[61].i64[0] = v521.i64[0];
                          v183[101].i64[0] = v522.i64[0];
                          v183[141].i64[0] = v523.i64[0];
                          if ((a6 & 0x800000) != 0) {
                            goto LABEL_511;
                          }
                        }
                        else if ((a6 & 0x80) != 0)
                        {
                          v183[21].i32[0] = v520.i32[0];
                          v183[61].i32[0] = v521.i32[0];
                          v183[101].i32[0] = v522.i32[0];
                          v183[141].i32[0] = v523.i32[0];
                          if ((a6 & 0x800000) != 0) {
                            goto LABEL_511;
                          }
                        }
                        else if ((a6 & 0x8000) != 0)
                        {
                          v183[21].i32[1] = v520.i32[1];
                          v183[61].i32[1] = v521.i32[1];
                          v183[101].i32[1] = v522.i32[1];
                          v183[141].i32[1] = v523.i32[1];
                          if ((a6 & 0x800000) != 0)
                          {
LABEL_511:
                            v183[21].i32[2] = v520.i32[2];
                            v183[61].i32[2] = v521.i32[2];
                            v183[101].i32[2] = v522.i32[2];
                            v183[141].i32[2] = v523.i32[2];
                            if ((a6 & 0x80000000) != 0) {
                              goto LABEL_512;
                            }
                            goto LABEL_518;
                          }
                        }
                        else if ((a6 & 0x800000) != 0)
                        {
                          goto LABEL_511;
                        }
                        if ((a6 & 0x80000000) != 0)
                        {
LABEL_512:
                          v183[21].i32[3] = v520.i32[3];
                          v183[61].i32[3] = v521.i32[3];
                          v183[101].i32[3] = v522.i32[3];
                          v183[141].i32[3] = v523.i32[3];
                          if ((a4 & 0x3000) == 0) {
                            goto LABEL_520;
                          }
LABEL_519:
                          v183[6] = v208;
                          v183[46] = v209;
                          v183[86] = v210;
                          v183[126] = v211;
                          goto LABEL_520;
                        }
LABEL_518:
                        if ((a4 & 0x3000) != 0) {
                          goto LABEL_519;
                        }
LABEL_520:
                        float32x4_t v540 = 0uLL;
                        if (v159)
                        {
                          float32x4_t v541 = vmulq_f32(v208, v208);
                          int32x4_t v542 = (int32x4_t)vmulq_f32(v209, v209);
                          float32x4_t v543 = vmulq_f32(v210, v210);
                          float32x4_t v544 = vmulq_f32(v211, v211);
                          v545.i64[0] = vzip1q_s32((int32x4_t)v541, v542).u64[0];
                          v545.i64[1] = __PAIR64__(v544.u32[0], v543.u32[0]);
                          v546.i64[0] = vtrn2q_s32((int32x4_t)v541, v542).u64[0];
                          v546.i64[1] = __PAIR64__(v544.u32[1], v543.u32[1]);
                          v541.i64[0] = vzip2q_s32((int32x4_t)v541, v542).u64[0];
                          v541.i64[1] = __PAIR64__(v544.u32[2], v543.u32[2]);
                          float32x4_t v540 = vsqrtq_f32(vaddq_f32(v541, vaddq_f32(v545, v546)));
                          if ((a4 & 0x200) != 0)
                          {
                            if ((a4 & 0x4000) != 0)
                            {
                              v547.i32[0] = v183[3].i32[0];
                              v547.i32[1] = v183[43].i32[0];
                              v547.i32[2] = v183[83].i32[0];
                              v547.i32[3] = v183[123].i32[0];
                              float32x4_t v591 = v547;
                            }
                            __asm { FMOV            V24.4S, #1.0 }
                            float32x4_t v549 = vmulq_f32(vdivq_f32(_Q24, vsqrtq_f32(vmlaq_f32(v587, vmlaq_f32(v586, v585, v540), v540))), v591);
                            float32x4_t v550 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v549, v588), (int8x16_t)v549, (int8x16_t)v588);
                            float v551 = v589.f32[0];
                            int16x4_t v552 = vmovn_s32(vcgtq_f32(v589, v550));
                            if (v552.i8[0]) {
                              float v551 = v550.f32[0];
                            }
                            float v553 = v550.f32[1];
                            if ((v552.i8[2] & 1) == 0) {
                              float v553 = v589.f32[1];
                            }
                            float v554 = v550.f32[2];
                            if ((v552.i8[4] & 1) == 0) {
                              float v554 = v589.f32[2];
                            }
                            float v555 = v550.f32[3];
                            v183[3].f32[0] = v551;
                            v183[43].f32[0] = v553;
                            if ((v552.i8[6] & 1) == 0) {
                              float v555 = v589.f32[3];
                            }
                            v183[83].f32[0] = v554;
                            v183[123].f32[0] = v555;
                          }
                        }
                        if (v162)
                        {
                          _X10 = _X13 + 291;
                          _X14 = _X13 + 251;
                          _X15 = _X13 + 211;
                          _X13 = _X13 + 171;
                          __asm { PRFM            #0, [X13] }
                          v208.i32[2] = v183[11].i32[0];
                          __asm { PRFM            #0, [X15] }
                          v209.i32[2] = v183[51].i32[0];
                          __asm { PRFM            #0, [X14] }
                          v210.i32[2] = v183[91].i32[0];
                          __asm { PRFM            #0, [X10] }
                          v211.i32[2] = v183[131].i32[0];
                        }
                        if ((a4 & 8) != 0 && v158 != 16)
                        {
                          if (v158 == 32)
                          {
                            v183[11].i32[0] = v540.i32[0];
                            v183[51].i32[0] = v540.i32[1];
                            v183[91].i32[0] = v540.i32[2];
                            __int32 v564 = v540.i32[3];
                          }
                          else
                          {
                            v183[11].i32[0] = v208.i32[2];
                            v183[51].i32[0] = v209.i32[2];
                            v183[91].i32[0] = v210.i32[2];
                            __int32 v564 = v211.i32[2];
                          }
                          v183[131].i32[0] = v564;
                        }
                        if ((a4 & 0xC0) == 0) {
                          goto LABEL_162;
                        }
                        v565.i64[0] = vzip2q_s32((int32x4_t)v208, (int32x4_t)v209).u64[0];
                        v565.i64[1] = __PAIR64__(v211.u32[2], v210.u32[2]);
                        float32x4_t v202 = (float32x4_t)vbslq_s8(v182, (int8x16_t)v540, (int8x16_t)v565);
                        if (v27 == 192)
                        {
                          float32x4_t v184 = vmulq_f32(v202, v202);
                        }
                        else
                        {
                          if (v27 != 128)
                          {
                            if (v27 == 64)
                            {
                              v210.i32[0] = 0;
                              v565.i32[0] = a4 & 0x100;
                              float32x4_t v566 = vmaxnmq_f32(vmlaq_f32(v577, v619, (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v565, (int32x4_t)v210), 0), vorrq_s8(v590, (int8x16_t)v202), veorq_s8(v590, (int8x16_t)v202))), (float32x4_t)0);
                              float32x4_t v202 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v575, v566), (int8x16_t)v566, (int8x16_t)v575);
                            }
                            goto LABEL_161;
                          }
                          v210.i32[0] = 0;
                          v565.i32[0] = a4 & 0x100;
                          float32x4_t v184 = (float32x4_t)vorrq_s8(vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v565, (int32x4_t)v210), 0), (int8x16_t)v202, (int8x16_t)vmaxnmq_f32(v202, (float32x4_t)0)), v590);
                        }
                        float32x4_t v185 = vmulq_f32(v619, v184);
                        __asm { FMOV            V19.4S, #1.0 }
                        float32x4_t v187 = vsubq_f32(_Q19, v185);
                        float64x2_t v188 = vcvt_hight_f64_f32(v187);
                        float32x4_t v189 = vmulq_f32(v185, v185);
                        __asm { FMOV            V24.2D, #0.5 }
                        float64x2_t v191 = vaddq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v189.f32), _Q24), vcvtq_f64_f32(*(float32x2_t *)v187.f32));
                        float64x2_t v192 = vaddq_f64(vmulq_f64(vcvt_hight_f64_f32(v189), _Q24), v188);
                        float32x4_t v193 = vmulq_f32(v185, v189);
                        __asm { FMOV            V24.2D, #-6.0 }
                        float64x2_t v195 = vaddq_f64(v192, vdivq_f64(vcvt_hight_f64_f32(v193), _Q24));
                        float64x2_t v196 = vaddq_f64(v191, vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v193.f32), _Q24));
                        float32x4_t v197 = vmulq_f32(v185, v193);
                        float64x2_t v198 = vcvtq_f64_f32(*(float32x2_t *)v197.f32);
                        __asm { FMOV            V22.2D, #24.0 }
                        float64x2_t v200 = vaddq_f64(v195, vdivq_f64(vcvt_hight_f64_f32(v197), _Q22));
                        __asm { FMOV            V20.2D, #1.0 }
                        float32x4_t v202 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(_Q20, vaddq_f64(v196, vdivq_f64(v198, _Q22)))), vdivq_f64(_Q20, v200));
LABEL_161:
                        v183[11].i32[1] = v202.i32[0];
                        v183[51].i32[1] = v202.i32[1];
                        v183[91].i32[1] = v202.i32[2];
                        v183[131].i32[1] = v202.i32[3];
LABEL_162:
                        v183 += 160;
                        ++result;
                        if ((unint64_t)v183 >= v160) {
                          return result;
                        }
                      }
                      if (a5)
                      {
                        float32x4_t v216 = vmulq_f32(v611, v208);
                        float32x4_t v217 = vmulq_f32(v611, v209);
                        float32x4_t v218 = vmulq_f32(v611, v210);
                        float32x4_t v219 = vmulq_f32(v611, v211);
                        v183[14].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v216, (float32x4_t)vdupq_laneq_s64((int64x2_t)v216, 1)));
                        v183[54].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v217, (float32x4_t)vdupq_laneq_s64((int64x2_t)v217, 1)));
                        v183[94].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v218, (float32x4_t)vdupq_laneq_s64((int64x2_t)v218, 1)));
                        v183[134].f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v219, (float32x4_t)vdupq_laneq_s64((int64x2_t)v219, 1)));
                        if ((a5 & 0x100) == 0)
                        {
LABEL_169:
                          if ((a5 & 0x10000) != 0) {
                            goto LABEL_176;
                          }
LABEL_170:
                          if ((a5 & 0x1000000) != 0) {
                            goto LABEL_177;
                          }
                          goto LABEL_187;
                        }
                      }
                      else if ((a5 & 0x100) == 0)
                      {
                        goto LABEL_169;
                      }
                      float32x4_t v220 = vmulq_f32(v610, v208);
                      float32x4_t v221 = vmulq_f32(v610, v209);
                      float32x4_t v222 = vmulq_f32(v610, v210);
                      float32x4_t v223 = vmulq_f32(v610, v211);
                      v183[14].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v220, (float32x4_t)vdupq_laneq_s64((int64x2_t)v220, 1)));
                      v183[54].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v221, (float32x4_t)vdupq_laneq_s64((int64x2_t)v221, 1)));
                      v183[94].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v222, (float32x4_t)vdupq_laneq_s64((int64x2_t)v222, 1)));
                      v183[134].f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v223, (float32x4_t)vdupq_laneq_s64((int64x2_t)v223, 1)));
                      if ((a5 & 0x10000) != 0)
                      {
LABEL_176:
                        float32x4_t v224 = vmulq_f32(v609, v208);
                        float32x4_t v225 = vmulq_f32(v609, v209);
                        float32x4_t v226 = vmulq_f32(v609, v210);
                        float32x4_t v227 = vmulq_f32(v609, v211);
                        v183[14].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v224, (float32x4_t)vdupq_laneq_s64((int64x2_t)v224, 1)));
                        v183[54].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v225, (float32x4_t)vdupq_laneq_s64((int64x2_t)v225, 1)));
                        v183[94].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v226, (float32x4_t)vdupq_laneq_s64((int64x2_t)v226, 1)));
                        v183[134].f32[2] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v227, (float32x4_t)vdupq_laneq_s64((int64x2_t)v227, 1)));
                        if ((a5 & 0x1000000) == 0) {
                          goto LABEL_187;
                        }
LABEL_177:
                        float32x4_t v228 = vmulq_f32(v608, v208);
                        float32x4_t v229 = vmulq_f32(v608, v209);
                        float32x4_t v230 = vmulq_f32(v608, v210);
                        float32x4_t v231 = vmulq_f32(v608, v211);
                        v183[14].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v228, (float32x4_t)vdupq_laneq_s64((int64x2_t)v228, 1)));
                        v183[54].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v229, (float32x4_t)vdupq_laneq_s64((int64x2_t)v229, 1)));
                        v183[94].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v230, (float32x4_t)vdupq_laneq_s64((int64x2_t)v230, 1)));
                        v183[134].f32[3] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v231, (float32x4_t)vdupq_laneq_s64((int64x2_t)v231, 1)));
                        goto LABEL_187;
                      }
                      goto LABEL_170;
                    }
                  }
                  if (!v612)
                  {
                    a10.i32[0] = (a6 >> 7) & 0x1010101;
                    *(int8x8_t *)a10.f32 = vcnt_s8(*(int8x8_t *)a10.f32);
                    a10.i16[0] = vaddlv_u8(*(uint8x8_t *)a10.f32);
                    if (a10.i32[0] >= 2u)
                    {
                      a10.i32[0] = *(_DWORD *)(result + 17428);
                      a12.i32[0] = *(_DWORD *)(result + 17432);
                      a14.i32[0] = *(_DWORD *)(result + 17436);
                      a11.i32[0] = *(_DWORD *)(result + 17440);
                      float32x4_t v141 = (unsigned __int32 *)(result + 17464);
                      float32x4_t v142 = (unsigned __int32 *)(result + 17468);
                      float32x4_t v143 = (unsigned __int32 *)(result + 17472);
                      float32x4_t v144 = (unsigned __int32 *)(result + 17476);
                      float32x4_t v145 = (unsigned __int32 *)(result + 17500);
                      int32x4_t v146 = (unsigned __int32 *)(result + 17504);
                      float32x4_t v147 = (unsigned __int32 *)(result + 17508);
                      float32x4_t v148 = (unsigned __int32 *)(result + 17512);
                      float32x4_t v149 = (unsigned __int32 *)(result + 17536);
                      float32x4_t v150 = (unsigned __int32 *)(result + 17540);
                      float32x4_t v151 = (unsigned __int32 *)(result + 17544);
                      float32x4_t v152 = (unsigned __int32 *)(result + 17548);
                      goto LABEL_97;
                    }
                  }
                  if ((a5 & 0x80) != 0)
                  {
                    a10 = *(float32x4_t *)(result + 17444);
                    if ((a5 & 0x8000) == 0)
                    {
LABEL_698:
                      if ((a5 & 0x800000) == 0) {
                        goto LABEL_699;
                      }
                      goto LABEL_754;
                    }
                  }
                  else if ((a5 & 0x8000) == 0)
                  {
                    goto LABEL_698;
                  }
                  a12 = *(float32x4_t *)(result + 17480);
                  if ((a5 & 0x800000) == 0)
                  {
LABEL_699:
                    if ((a5 & 0x80000000) == 0) {
                      goto LABEL_700;
                    }
                    goto LABEL_755;
                  }
LABEL_754:
                  a14 = *(float32x4_t *)(result + 17516);
                  if ((a5 & 0x80000000) == 0)
                  {
LABEL_700:
                    if ((a6 & 0x80) == 0) {
                      goto LABEL_701;
                    }
                    goto LABEL_756;
                  }
LABEL_755:
                  a11 = *(float32x4_t *)(result + 17552);
                  if ((a6 & 0x80) == 0)
                  {
LABEL_701:
                    if ((a6 & 0x8000) == 0) {
                      goto LABEL_702;
                    }
                    goto LABEL_757;
                  }
LABEL_756:
                  a10 = *(float32x4_t *)(result + 17428);
                  if ((a6 & 0x8000) == 0)
                  {
LABEL_702:
                    if ((a6 & 0x800000) == 0) {
                      goto LABEL_703;
                    }
                    goto LABEL_758;
                  }
LABEL_757:
                  a12 = *(float32x4_t *)(result + 17464);
                  if ((a6 & 0x800000) == 0)
                  {
LABEL_703:
                    if ((a6 & 0x80000000) == 0) {
                      goto LABEL_98;
                    }
LABEL_759:
                    a11 = *(float32x4_t *)(result + 17536);
                    goto LABEL_98;
                  }
LABEL_758:
                  a14 = *(float32x4_t *)(result + 17500);
                  if ((a6 & 0x80000000) == 0) {
                    goto LABEL_98;
                  }
                  goto LABEL_759;
                }
                if (!v53)
                {
                  v37.i32[0] = (a5 >> 6) & 0x1010101;
                  *(int8x8_t *)v37.f32 = vcnt_s8(*(int8x8_t *)v37.f32);
                  v37.i16[0] = vaddlv_u8(*(uint8x8_t *)v37.f32);
                  if (v37.i32[0] >= 2u)
                  {
                    a13.i32[0] = *(_DWORD *)(result + 17296);
                    v22.i32[0] = *(_DWORD *)(result + 17300);
                    v37.i32[0] = *(_DWORD *)(result + 17304);
                    a8.i32[0] = *(_DWORD *)(result + 17308);
                    float32x4_t v129 = (unsigned __int32 *)(result + 17332);
                    float32x4_t v130 = (__int32 *)(result + 17336);
                    float32x4_t v131 = (__int32 *)(result + 17340);
                    float32x4_t v132 = (unsigned __int32 *)(result + 17344);
                    float32x4_t v133 = (unsigned __int32 *)(result + 17368);
                    float32x4_t v134 = (__int32 *)(result + 17372);
                    float32x4_t v135 = (__int32 *)(result + 17376);
                    float32x4_t v136 = (unsigned __int32 *)(result + 17380);
                    float32x4_t v137 = (unsigned __int32 *)(result + 17404);
                    float32x4_t v138 = (__int32 *)(result + 17408);
                    float32x4_t v139 = (__int32 *)(result + 17412);
                    float32x4_t v140 = (unsigned __int32 *)(result + 17416);
LABEL_88:
                    a13.i32[1] = *v129;
                    a13.i32[2] = *v133;
                    a13.i32[3] = *v137;
                    v22.i32[1] = *v130;
                    v22.i32[2] = *v134;
                    v22.i32[3] = *v138;
                    v37.i32[1] = *v131;
                    v37.i32[2] = *v135;
                    v37.i32[3] = *v139;
                    a8.i32[1] = *v132;
                    a8.i32[2] = *v136;
                    a8.i32[3] = *v140;
                    goto LABEL_89;
                  }
                }
                if (!v613)
                {
                  v37.i32[0] = (a6 >> 6) & 0x1010101;
                  *(int8x8_t *)v37.f32 = vcnt_s8(*(int8x8_t *)v37.f32);
                  v37.i16[0] = vaddlv_u8(*(uint8x8_t *)v37.f32);
                  if (v37.i32[0] >= 2u)
                  {
                    a13.i32[0] = *(_DWORD *)(result + 17280);
                    v22.i32[0] = *(_DWORD *)(result + 17284);
                    v37.i32[0] = *(_DWORD *)(result + 17288);
                    a8.i32[0] = *(_DWORD *)(result + 17292);
                    float32x4_t v129 = (unsigned __int32 *)(result + 17316);
                    float32x4_t v130 = (__int32 *)(result + 17320);
                    float32x4_t v131 = (__int32 *)(result + 17324);
                    float32x4_t v132 = (unsigned __int32 *)(result + 17328);
                    float32x4_t v133 = (unsigned __int32 *)(result + 17352);
                    float32x4_t v134 = (__int32 *)(result + 17356);
                    float32x4_t v135 = (__int32 *)(result + 17360);
                    float32x4_t v136 = (unsigned __int32 *)(result + 17364);
                    float32x4_t v137 = (unsigned __int32 *)(result + 17388);
                    float32x4_t v138 = (__int32 *)(result + 17392);
                    float32x4_t v139 = (__int32 *)(result + 17396);
                    float32x4_t v140 = (unsigned __int32 *)(result + 17400);
                    goto LABEL_88;
                  }
                }
                if ((a5 & 0x40) != 0)
                {
                  a13 = *(float32x4_t *)(result + 17296);
                  if ((a5 & 0x4000) == 0)
                  {
LABEL_689:
                    if ((a5 & 0x400000) == 0) {
                      goto LABEL_690;
                    }
                    goto LABEL_746;
                  }
                }
                else if ((a5 & 0x4000) == 0)
                {
                  goto LABEL_689;
                }
                float32x4_t v22 = *(float32x4_t *)(result + 17332);
                if ((a5 & 0x400000) == 0)
                {
LABEL_690:
                  if ((a5 & 0x40000000) == 0) {
                    goto LABEL_691;
                  }
                  goto LABEL_747;
                }
LABEL_746:
                float32x4_t v37 = *(float32x4_t *)(result + 17368);
                if ((a5 & 0x40000000) == 0)
                {
LABEL_691:
                  if ((a6 & 0x40) == 0) {
                    goto LABEL_692;
                  }
                  goto LABEL_748;
                }
LABEL_747:
                a8 = *(float32x4_t *)(result + 17404);
                if ((a6 & 0x40) == 0)
                {
LABEL_692:
                  if ((a6 & 0x4000) == 0) {
                    goto LABEL_693;
                  }
                  goto LABEL_749;
                }
LABEL_748:
                a13 = *(float32x4_t *)(result + 17280);
                if ((a6 & 0x4000) == 0)
                {
LABEL_693:
                  if ((a6 & 0x400000) == 0) {
                    goto LABEL_694;
                  }
                  goto LABEL_750;
                }
LABEL_749:
                float32x4_t v22 = *(float32x4_t *)(result + 17316);
                if ((a6 & 0x400000) == 0)
                {
LABEL_694:
                  if ((a6 & 0x40000000) == 0) {
                    goto LABEL_89;
                  }
LABEL_751:
                  a8 = *(float32x4_t *)(result + 17388);
                  goto LABEL_89;
                }
LABEL_750:
                float32x4_t v37 = *(float32x4_t *)(result + 17352);
                if ((a6 & 0x40000000) == 0) {
                  goto LABEL_89;
                }
                goto LABEL_751;
              }
              if (!v52)
              {
                v37.i32[0] = (a5 >> 5) & 0x1010101;
                *(int8x8_t *)v37.f32 = vcnt_s8(*(int8x8_t *)v37.f32);
                v37.i16[0] = vaddlv_u8(*(uint8x8_t *)v37.f32);
                if (v37.i32[0] >= 2u)
                {
                  v20.i32[0] = *(_DWORD *)(result + 17148);
                  v21.i32[0] = *(_DWORD *)(result + 17152);
                  a9.i32[0] = *(_DWORD *)(result + 17156);
                  v23.i32[0] = *(_DWORD *)(result + 17160);
                  int8x16_t v117 = (__int32 *)(result + 17184);
                  float32x4_t v118 = (__int32 *)(result + 17188);
                  float32x4_t v119 = (unsigned __int32 *)(result + 17192);
                  float32x4_t v120 = (__int32 *)(result + 17196);
                  float32x4_t v121 = (__int32 *)(result + 17220);
                  float32x4_t v122 = (__int32 *)(result + 17224);
                  int32x4_t v123 = (unsigned __int32 *)(result + 17228);
                  float32x4_t v124 = (__int32 *)(result + 17232);
                  float32x4_t v125 = (__int32 *)(result + 17256);
                  float32x4_t v126 = (__int32 *)(result + 17260);
                  float32x4_t v127 = (unsigned __int32 *)(result + 17264);
                  float32x4_t v128 = (__int32 *)(result + 17268);
LABEL_79:
                  v20.i32[1] = *v117;
                  v20.i32[2] = *v121;
                  v20.i32[3] = *v125;
                  v21.i32[1] = *v118;
                  v21.i32[2] = *v122;
                  v21.i32[3] = *v126;
                  a9.i32[1] = *v119;
                  a9.i32[2] = *v123;
                  a9.i32[3] = *v127;
                  v23.i32[1] = *v120;
                  v23.i32[2] = *v124;
                  v23.i32[3] = *v128;
                  goto LABEL_80;
                }
              }
              if (!v614)
              {
                v37.i32[0] = (a6 >> 5) & 0x1010101;
                *(int8x8_t *)v37.f32 = vcnt_s8(*(int8x8_t *)v37.f32);
                v37.i16[0] = vaddlv_u8(*(uint8x8_t *)v37.f32);
                if (v37.i32[0] >= 2u)
                {
                  v20.i32[0] = *(_DWORD *)(result + 17132);
                  v21.i32[0] = *(_DWORD *)(result + 17136);
                  a9.i32[0] = *(_DWORD *)(result + 17140);
                  v23.i32[0] = *(_DWORD *)(result + 17144);
                  int8x16_t v117 = (__int32 *)(result + 17168);
                  float32x4_t v118 = (__int32 *)(result + 17172);
                  float32x4_t v119 = (unsigned __int32 *)(result + 17176);
                  float32x4_t v120 = (__int32 *)(result + 17180);
                  float32x4_t v121 = (__int32 *)(result + 17204);
                  float32x4_t v122 = (__int32 *)(result + 17208);
                  int32x4_t v123 = (unsigned __int32 *)(result + 17212);
                  float32x4_t v124 = (__int32 *)(result + 17216);
                  float32x4_t v125 = (__int32 *)(result + 17240);
                  float32x4_t v126 = (__int32 *)(result + 17244);
                  float32x4_t v127 = (unsigned __int32 *)(result + 17248);
                  float32x4_t v128 = (__int32 *)(result + 17252);
                  goto LABEL_79;
                }
              }
              if ((a5 & 0x20) != 0)
              {
                float32x4_t v20 = *(float32x4_t *)(result + 17148);
                if ((a5 & 0x2000) == 0)
                {
LABEL_680:
                  if ((a5 & 0x200000) == 0) {
                    goto LABEL_681;
                  }
                  goto LABEL_738;
                }
              }
              else if ((a5 & 0x2000) == 0)
              {
                goto LABEL_680;
              }
              float32x4_t v21 = *(float32x4_t *)(result + 17184);
              if ((a5 & 0x200000) == 0)
              {
LABEL_681:
                if ((a5 & 0x20000000) == 0) {
                  goto LABEL_682;
                }
                goto LABEL_739;
              }
LABEL_738:
              a9 = *(float32x4_t *)(result + 17220);
              if ((a5 & 0x20000000) == 0)
              {
LABEL_682:
                if ((a6 & 0x20) == 0) {
                  goto LABEL_683;
                }
                goto LABEL_740;
              }
LABEL_739:
              float32x4_t v23 = *(float32x4_t *)(result + 17256);
              if ((a6 & 0x20) == 0)
              {
LABEL_683:
                if ((a6 & 0x2000) == 0) {
                  goto LABEL_684;
                }
                goto LABEL_741;
              }
LABEL_740:
              float32x4_t v20 = *(float32x4_t *)(result + 17132);
              if ((a6 & 0x2000) == 0)
              {
LABEL_684:
                if ((a6 & 0x200000) == 0) {
                  goto LABEL_685;
                }
                goto LABEL_742;
              }
LABEL_741:
              float32x4_t v21 = *(float32x4_t *)(result + 17168);
              if ((a6 & 0x200000) == 0)
              {
LABEL_685:
                if ((a6 & 0x20000000) == 0) {
                  goto LABEL_80;
                }
LABEL_743:
                float32x4_t v23 = *(float32x4_t *)(result + 17240);
                goto LABEL_80;
              }
LABEL_742:
              a9 = *(float32x4_t *)(result + 17204);
              if ((a6 & 0x20000000) == 0) {
                goto LABEL_80;
              }
              goto LABEL_743;
            }
            if (!v51)
            {
              v37.i32[0] = (a5 >> 4) & 0x1010101;
              *(int8x8_t *)v37.f32 = vcnt_s8(*(int8x8_t *)v37.f32);
              v37.i16[0] = vaddlv_u8(*(uint8x8_t *)v37.f32);
              if (v37.i32[0] >= 2u)
              {
                v16.i32[0] = *(_DWORD *)(result + 17000);
                v17.i32[0] = *(_DWORD *)(result + 17004);
                v18.i32[0] = *(_DWORD *)(result + 17008);
                v19.i32[0] = *(_DWORD *)(result + 17012);
                float32x4_t v105 = (__int32 *)(result + 17036);
                float32x4_t v106 = (__int32 *)(result + 17040);
                float32x4_t v107 = (__int32 *)(result + 17044);
                float32x4_t v108 = (__int32 *)(result + 17048);
                float32x4_t v109 = (__int32 *)(result + 17072);
                float32x4_t v110 = (__int32 *)(result + 17076);
                int32x4_t v111 = (__int32 *)(result + 17080);
                int32x4_t v112 = (__int32 *)(result + 17084);
                int8x16_t v113 = (__int32 *)(result + 17108);
                float32x4_t v114 = (__int32 *)(result + 17112);
                float v115 = (__int32 *)(result + 17116);
                unsigned int v116 = (__int32 *)(result + 17120);
LABEL_70:
                v16.i32[1] = *v105;
                v16.i32[2] = *v109;
                v16.i32[3] = *v113;
                v17.i32[1] = *v106;
                v17.i32[2] = *v110;
                v17.i32[3] = *v114;
                v18.i32[1] = *v107;
                v18.i32[2] = *v111;
                v18.i32[3] = *v115;
                v19.i32[1] = *v108;
                v19.i32[2] = *v112;
                v19.i32[3] = *v116;
                goto LABEL_71;
              }
            }
            if (!v615)
            {
              v37.i32[0] = (a6 >> 4) & 0x1010101;
              *(int8x8_t *)v37.f32 = vcnt_s8(*(int8x8_t *)v37.f32);
              v37.i16[0] = vaddlv_u8(*(uint8x8_t *)v37.f32);
              if (v37.i32[0] >= 2u)
              {
                v16.i32[0] = *v92;
                v17.i32[0] = *(_DWORD *)(result + 16988);
                v18.i32[0] = *(_DWORD *)(result + 16992);
                v19.i32[0] = *(_DWORD *)(result + 16996);
                float32x4_t v105 = (__int32 *)(result + 17020);
                float32x4_t v106 = (__int32 *)(result + 17024);
                float32x4_t v107 = (__int32 *)(result + 17028);
                float32x4_t v108 = (__int32 *)(result + 17032);
                float32x4_t v109 = (__int32 *)(result + 17056);
                float32x4_t v110 = (__int32 *)(result + 17060);
                int32x4_t v111 = (__int32 *)(result + 17064);
                int32x4_t v112 = (__int32 *)(result + 17068);
                int8x16_t v113 = (__int32 *)(result + 17092);
                float32x4_t v114 = (__int32 *)(result + 17096);
                float v115 = (__int32 *)(result + 17100);
                unsigned int v116 = (__int32 *)(result + 17104);
                goto LABEL_70;
              }
            }
            if ((a5 & 0x10) != 0)
            {
              float32x4_t v16 = *(float32x4_t *)(result + 17000);
              if ((a5 & 0x1000) == 0)
              {
LABEL_671:
                if ((a5 & 0x100000) == 0) {
                  goto LABEL_672;
                }
                goto LABEL_730;
              }
            }
            else if ((a5 & 0x1000) == 0)
            {
              goto LABEL_671;
            }
            float32x4_t v17 = *(float32x4_t *)(result + 17036);
            if ((a5 & 0x100000) == 0)
            {
LABEL_672:
              if ((a5 & 0x10000000) == 0) {
                goto LABEL_673;
              }
              goto LABEL_731;
            }
LABEL_730:
            float32x4_t v18 = *(float32x4_t *)(result + 17072);
            if ((a5 & 0x10000000) == 0)
            {
LABEL_673:
              if ((a6 & 0x10) == 0) {
                goto LABEL_674;
              }
              goto LABEL_732;
            }
LABEL_731:
            float32x4_t v19 = *(float32x4_t *)(result + 17108);
            if ((a6 & 0x10) == 0)
            {
LABEL_674:
              if ((a6 & 0x1000) == 0) {
                goto LABEL_675;
              }
              goto LABEL_733;
            }
LABEL_732:
            float32x4_t v16 = *(float32x4_t *)v92;
            if ((a6 & 0x1000) == 0)
            {
LABEL_675:
              if ((a6 & 0x100000) == 0) {
                goto LABEL_676;
              }
              goto LABEL_734;
            }
LABEL_733:
            float32x4_t v17 = *(float32x4_t *)(result + 17020);
            if ((a6 & 0x100000) == 0)
            {
LABEL_676:
              if ((a6 & 0x10000000) == 0) {
                goto LABEL_71;
              }
LABEL_735:
              float32x4_t v19 = *(float32x4_t *)(result + 17092);
              goto LABEL_71;
            }
LABEL_734:
            float32x4_t v18 = *(float32x4_t *)(result + 17056);
            if ((a6 & 0x10000000) == 0) {
              goto LABEL_71;
            }
            goto LABEL_735;
          }
          if (!v50)
          {
            v37.i32[0] = (a5 >> 3) & 0x1010101;
            *(int8x8_t *)v37.f32 = vcnt_s8(*(int8x8_t *)v37.f32);
            v37.i16[0] = vaddlv_u8(*(uint8x8_t *)v37.f32);
            if (v37.i32[0] >= 2u)
            {
              v24.i32[0] = *(_DWORD *)(result + 16852);
              v25.i32[0] = *(_DWORD *)(result + 16856);
              v14.i32[0] = *(_DWORD *)(result + 16860);
              v15.i32[0] = *(_DWORD *)(result + 16864);
              float32x4_t v93 = (__int32 *)(result + 16888);
              float32x4_t v94 = (__int32 *)(result + 16892);
              float32x4_t v95 = (__int32 *)(result + 16896);
              float32x4_t v96 = (__int32 *)(result + 16900);
              float32x4_t v97 = (__int32 *)(result + 16924);
              float32x4_t v98 = (__int32 *)(result + 16928);
              float32x4_t v99 = (__int32 *)(result + 16932);
              float32x4_t v100 = (__int32 *)(result + 16936);
              float32x4_t v101 = (__int32 *)(result + 16960);
              float32x4_t v102 = (__int32 *)(result + 16964);
              int32x4_t v103 = (__int32 *)(result + 16968);
              float32x4_t v104 = (__int32 *)(result + 16972);
LABEL_61:
              v24.i32[1] = *v93;
              v24.i32[2] = *v97;
              v24.i32[3] = *v101;
              v25.i32[1] = *v94;
              v25.i32[2] = *v98;
              v25.i32[3] = *v102;
              v14.i32[1] = *v95;
              v14.i32[2] = *v99;
              v14.i32[3] = *v103;
              v15.i32[1] = *v96;
              v15.i32[2] = *v100;
              v15.i32[3] = *v104;
              goto LABEL_62;
            }
          }
          if (!v616)
          {
            v37.i32[0] = (a6 >> 3) & 0x1010101;
            *(int8x8_t *)v37.f32 = vcnt_s8(*(int8x8_t *)v37.f32);
            v37.i16[0] = vaddlv_u8(*(uint8x8_t *)v37.f32);
            if (v37.i32[0] >= 2u)
            {
              v24.i32[0] = *(_DWORD *)(result + 16836);
              v25.i32[0] = *(_DWORD *)(result + 16840);
              v14.i32[0] = *(_DWORD *)(result + 16844);
              v15.i32[0] = *(_DWORD *)(result + 16848);
              float32x4_t v93 = (__int32 *)(result + 16872);
              float32x4_t v94 = (__int32 *)(result + 16876);
              float32x4_t v95 = (__int32 *)(result + 16880);
              float32x4_t v96 = (__int32 *)(result + 16884);
              float32x4_t v97 = (__int32 *)(result + 16908);
              float32x4_t v98 = (__int32 *)(result + 16912);
              float32x4_t v99 = (__int32 *)(result + 16916);
              float32x4_t v100 = (__int32 *)(result + 16920);
              float32x4_t v101 = (__int32 *)(result + 16944);
              float32x4_t v102 = (__int32 *)(result + 16948);
              int32x4_t v103 = (__int32 *)(result + 16952);
              float32x4_t v104 = (__int32 *)(result + 16956);
              goto LABEL_61;
            }
          }
          if ((a5 & 8) != 0)
          {
            float32x4_t v24 = *(float32x4_t *)(result + 16852);
            if ((a5 & 0x800) == 0)
            {
LABEL_662:
              if ((a5 & 0x80000) == 0) {
                goto LABEL_663;
              }
              goto LABEL_722;
            }
          }
          else if ((a5 & 0x800) == 0)
          {
            goto LABEL_662;
          }
          float32x4_t v25 = *(float32x4_t *)(result + 16888);
          if ((a5 & 0x80000) == 0)
          {
LABEL_663:
            if ((a5 & 0x8000000) == 0) {
              goto LABEL_664;
            }
            goto LABEL_723;
          }
LABEL_722:
          float32x4_t v14 = *(float32x4_t *)(result + 16924);
          if ((a5 & 0x8000000) == 0)
          {
LABEL_664:
            if ((a6 & 8) == 0) {
              goto LABEL_665;
            }
            goto LABEL_724;
          }
LABEL_723:
          float32x4_t v15 = *(float32x4_t *)(result + 16960);
          if ((a6 & 8) == 0)
          {
LABEL_665:
            if ((a6 & 0x800) == 0) {
              goto LABEL_666;
            }
            goto LABEL_725;
          }
LABEL_724:
          float32x4_t v24 = *(float32x4_t *)(result + 16836);
          if ((a6 & 0x800) == 0)
          {
LABEL_666:
            if ((a6 & 0x80000) == 0) {
              goto LABEL_667;
            }
            goto LABEL_726;
          }
LABEL_725:
          float32x4_t v25 = *(float32x4_t *)(result + 16872);
          if ((a6 & 0x80000) == 0)
          {
LABEL_667:
            if ((a6 & 0x8000000) == 0) {
              goto LABEL_62;
            }
LABEL_727:
            float32x4_t v15 = *(float32x4_t *)(result + 16944);
            goto LABEL_62;
          }
LABEL_726:
          float32x4_t v14 = *(float32x4_t *)(result + 16908);
          if ((a6 & 0x8000000) == 0) {
            goto LABEL_62;
          }
          goto LABEL_727;
        }
        if (!v49)
        {
          v37.i32[0] = (a5 >> 2) & 0x1010101;
          *(int8x8_t *)v37.f32 = vcnt_s8(*(int8x8_t *)v37.f32);
          v37.i16[0] = vaddlv_u8(*(uint8x8_t *)v37.f32);
          if (v37.i32[0] >= 2u)
          {
            v37.i32[0] = *(_DWORD *)(result + 16704);
            a8.i32[0] = *(_DWORD *)(result + 16708);
            a9.i32[0] = *(_DWORD *)(result + 16712);
            a10.i32[0] = *(_DWORD *)(result + 16716);
            float32x4_t v80 = (__int32 *)(result + 16740);
            float32x4_t v81 = (unsigned __int32 *)(result + 16744);
            float32x4_t v82 = (unsigned __int32 *)(result + 16748);
            float32x4_t v83 = (unsigned __int32 *)(result + 16752);
            float32x4_t v84 = (__int32 *)(result + 16776);
            float32x4_t v85 = (unsigned __int32 *)(result + 16780);
            int32x4_t v86 = (unsigned __int32 *)(result + 16784);
            float32x4_t v87 = (unsigned __int32 *)(result + 16788);
            float32x4_t v88 = (__int32 *)(result + 16812);
            float32x4_t v89 = (unsigned __int32 *)(result + 16816);
            float32x4_t v90 = (unsigned __int32 *)(result + 16820);
            float32x4_t v91 = (unsigned __int32 *)(result + 16824);
LABEL_52:
            v37.i32[1] = *v80;
            v37.i32[2] = *v84;
            v37.i32[3] = *v88;
            a8.i32[1] = *v81;
            a8.i32[2] = *v85;
            a8.i32[3] = *v89;
            float32x4_t v602 = a8;
            float32x4_t v603 = v37;
            a9.i32[1] = *v82;
            a9.i32[2] = *v86;
            a9.i32[3] = *v90;
            a10.i32[1] = *v83;
            a10.i32[2] = *v87;
            a10.i32[3] = *v91;
            float32x4_t v600 = a10;
            float32x4_t v601 = a9;
            goto LABEL_53;
          }
        }
        if (!v617)
        {
          v37.i32[0] = (a6 >> 2) & 0x1010101;
          *(int8x8_t *)v37.f32 = vcnt_s8(*(int8x8_t *)v37.f32);
          v37.i16[0] = vaddlv_u8(*(uint8x8_t *)v37.f32);
          if (v37.i32[0] >= 2u)
          {
            v37.i32[0] = *(_DWORD *)(result + 16688);
            a8.i32[0] = *(_DWORD *)(result + 16692);
            a9.i32[0] = *(_DWORD *)(result + 16696);
            a10.i32[0] = *(_DWORD *)(result + 16700);
            float32x4_t v80 = (__int32 *)(result + 16724);
            float32x4_t v81 = (unsigned __int32 *)(result + 16728);
            float32x4_t v82 = (unsigned __int32 *)(result + 16732);
            float32x4_t v83 = (unsigned __int32 *)(result + 16736);
            float32x4_t v84 = (__int32 *)(result + 16760);
            float32x4_t v85 = (unsigned __int32 *)(result + 16764);
            int32x4_t v86 = (unsigned __int32 *)(result + 16768);
            float32x4_t v87 = (unsigned __int32 *)(result + 16772);
            float32x4_t v88 = (__int32 *)(result + 16796);
            float32x4_t v89 = (unsigned __int32 *)(result + 16800);
            float32x4_t v90 = (unsigned __int32 *)(result + 16804);
            float32x4_t v91 = (unsigned __int32 *)(result + 16808);
            goto LABEL_52;
          }
        }
        if ((a5 & 4) != 0)
        {
          float32x4_t v37 = *(float32x4_t *)(result + 16704);
          float32x4_t v603 = v37;
        }
        if ((a5 & 0x400) != 0)
        {
          float32x4_t v37 = *(float32x4_t *)(result + 16740);
          float32x4_t v602 = v37;
        }
        if ((a5 & 0x40000) != 0)
        {
          float32x4_t v37 = *(float32x4_t *)(result + 16776);
          float32x4_t v601 = v37;
        }
        if ((a5 & 0x4000000) != 0)
        {
          float32x4_t v37 = *(float32x4_t *)(result + 16812);
          float32x4_t v600 = v37;
          if ((a6 & 4) == 0)
          {
LABEL_656:
            if ((a6 & 0x400) == 0) {
              goto LABEL_657;
            }
            goto LABEL_717;
          }
        }
        else if ((a6 & 4) == 0)
        {
          goto LABEL_656;
        }
        float32x4_t v37 = *(float32x4_t *)(result + 16688);
        float32x4_t v603 = v37;
        if ((a6 & 0x400) == 0)
        {
LABEL_657:
          if ((a6 & 0x40000) == 0) {
            goto LABEL_658;
          }
          goto LABEL_718;
        }
LABEL_717:
        float32x4_t v37 = *(float32x4_t *)(result + 16724);
        float32x4_t v602 = v37;
        if ((a6 & 0x40000) == 0)
        {
LABEL_658:
          if ((a6 & 0x4000000) == 0) {
            goto LABEL_53;
          }
LABEL_719:
          float32x4_t v37 = *(float32x4_t *)(result + 16796);
          float32x4_t v600 = v37;
          goto LABEL_53;
        }
LABEL_718:
        float32x4_t v37 = *(float32x4_t *)(result + 16760);
        float32x4_t v601 = v37;
        if ((a6 & 0x4000000) == 0) {
          goto LABEL_53;
        }
        goto LABEL_719;
      }
      if (!v48)
      {
        v37.i32[0] = (a5 >> 1) & 0x1010101;
        *(int8x8_t *)v37.f32 = vcnt_s8(*(int8x8_t *)v37.f32);
        v37.i16[0] = vaddlv_u8(*(uint8x8_t *)v37.f32);
        if (v37.i32[0] >= 2u)
        {
          v37.i32[0] = *(_DWORD *)(result + 16556);
          a8.i32[0] = *(_DWORD *)(result + 16560);
          a9.i32[0] = *(_DWORD *)(result + 16564);
          a10.i32[0] = *(_DWORD *)(result + 16568);
          float32x4_t v68 = (__int32 *)(result + 16592);
          float32x4_t v69 = (unsigned __int32 *)(result + 16596);
          float32x4_t v70 = (unsigned __int32 *)(result + 16600);
          float32x4_t v71 = (unsigned __int32 *)(result + 16604);
          float32x4_t v72 = (__int32 *)(result + 16628);
          int8x16_t v73 = (unsigned __int32 *)(result + 16632);
          float32x4_t v74 = (unsigned __int32 *)(result + 16636);
          float32x4_t v75 = (unsigned __int32 *)(result + 16640);
          unsigned int v76 = (__int32 *)(result + 16664);
          float32x4_t v77 = (unsigned __int32 *)(result + 16668);
          float32x4_t v78 = (unsigned __int32 *)(result + 16672);
          float32x4_t v79 = (unsigned __int32 *)(result + 16676);
LABEL_43:
          v37.i32[1] = *v68;
          v37.i32[2] = *v72;
          v37.i32[3] = *v76;
          a8.i32[1] = *v69;
          a8.i32[2] = *v73;
          a8.i32[3] = *v77;
          float32x4_t v606 = a8;
          float32x4_t v607 = v37;
          a9.i32[1] = *v70;
          a9.i32[2] = *v74;
          a9.i32[3] = *v78;
          a10.i32[1] = *v71;
          a10.i32[2] = *v75;
          a10.i32[3] = *v79;
          float32x4_t v604 = a10;
          float32x4_t v605 = a9;
          goto LABEL_44;
        }
      }
      if (!v618)
      {
        v37.i32[0] = (a6 >> 1) & 0x1010101;
        *(int8x8_t *)v37.f32 = vcnt_s8(*(int8x8_t *)v37.f32);
        v37.i16[0] = vaddlv_u8(*(uint8x8_t *)v37.f32);
        if (v37.i32[0] >= 2u)
        {
          v37.i32[0] = *(_DWORD *)(result + 16540);
          a8.i32[0] = *(_DWORD *)(result + 16544);
          a9.i32[0] = *(_DWORD *)(result + 16548);
          a10.i32[0] = *(_DWORD *)(result + 16552);
          float32x4_t v68 = (__int32 *)(result + 16576);
          float32x4_t v69 = (unsigned __int32 *)(result + 16580);
          float32x4_t v70 = (unsigned __int32 *)(result + 16584);
          float32x4_t v71 = (unsigned __int32 *)(result + 16588);
          float32x4_t v72 = (__int32 *)(result + 16612);
          int8x16_t v73 = (unsigned __int32 *)(result + 16616);
          float32x4_t v74 = (unsigned __int32 *)(result + 16620);
          float32x4_t v75 = (unsigned __int32 *)(result + 16624);
          unsigned int v76 = (__int32 *)(result + 16648);
          float32x4_t v77 = (unsigned __int32 *)(result + 16652);
          float32x4_t v78 = (unsigned __int32 *)(result + 16656);
          float32x4_t v79 = (unsigned __int32 *)(result + 16660);
          goto LABEL_43;
        }
      }
      if ((a5 & 2) != 0)
      {
        float32x4_t v37 = *(float32x4_t *)(result + 16556);
        float32x4_t v607 = v37;
      }
      if ((a5 & 0x200) != 0)
      {
        float32x4_t v37 = *(float32x4_t *)(result + 16592);
        float32x4_t v606 = v37;
      }
      if ((a5 & 0x20000) != 0)
      {
        float32x4_t v37 = *(float32x4_t *)(result + 16628);
        float32x4_t v605 = v37;
      }
      if ((a5 & 0x2000000) != 0)
      {
        float32x4_t v37 = *(float32x4_t *)(result + 16664);
        float32x4_t v604 = v37;
        if ((a6 & 2) == 0)
        {
LABEL_644:
          if ((a6 & 0x200) == 0) {
            goto LABEL_645;
          }
          goto LABEL_712;
        }
      }
      else if ((a6 & 2) == 0)
      {
        goto LABEL_644;
      }
      float32x4_t v37 = *(float32x4_t *)(result + 16540);
      float32x4_t v607 = v37;
      if ((a6 & 0x200) == 0)
      {
LABEL_645:
        if ((a6 & 0x20000) == 0) {
          goto LABEL_646;
        }
        goto LABEL_713;
      }
LABEL_712:
      float32x4_t v37 = *(float32x4_t *)(result + 16576);
      float32x4_t v606 = v37;
      if ((a6 & 0x20000) == 0)
      {
LABEL_646:
        if ((a6 & 0x2000000) == 0) {
          goto LABEL_44;
        }
LABEL_714:
        float32x4_t v37 = *(float32x4_t *)(result + 16648);
        float32x4_t v604 = v37;
        goto LABEL_44;
      }
LABEL_713:
      float32x4_t v37 = *(float32x4_t *)(result + 16612);
      float32x4_t v605 = v37;
      if ((a6 & 0x2000000) == 0) {
        goto LABEL_44;
      }
      goto LABEL_714;
    }
    if ((a6 & 0x1010101) == 0)
    {
      v37.i32[0] = a5 & 0x1010101;
      *(int8x8_t *)v37.f32 = vcnt_s8(*(int8x8_t *)v37.f32);
      v37.i16[0] = vaddlv_u8(*(uint8x8_t *)v37.f32);
      if (v37.i32[0] >= 2u)
      {
        v37.i32[0] = *(_DWORD *)(result + 16408);
        a8.i32[0] = *(_DWORD *)(result + 16412);
        a9.i32[0] = *(_DWORD *)(result + 16416);
        a10.i32[0] = *(_DWORD *)(result + 16420);
        float32x4_t v56 = (__int32 *)(result + 16444);
        char v57 = (unsigned __int32 *)(result + 16448);
        float32x4_t v58 = (unsigned __int32 *)(result + 16452);
        float v59 = (unsigned __int32 *)(result + 16456);
        unsigned int v60 = (__int32 *)(result + 16480);
        int8x16_t v61 = (unsigned __int32 *)(result + 16484);
        float32x4_t v62 = (unsigned __int32 *)(result + 16488);
        float32x4_t v63 = (unsigned __int32 *)(result + 16492);
        float32x4_t v64 = (__int32 *)(result + 16516);
        float32x4_t v65 = (unsigned __int32 *)(result + 16520);
        float32x4_t v66 = (unsigned __int32 *)(result + 16524);
        int32x4_t v67 = (unsigned __int32 *)(result + 16528);
LABEL_34:
        v37.i32[1] = *v56;
        v37.i32[2] = *v60;
        v37.i32[3] = *v64;
        a8.i32[1] = *v57;
        a8.i32[2] = *v61;
        a8.i32[3] = *v65;
        float32x4_t v610 = a8;
        float32x4_t v611 = v37;
        a9.i32[1] = *v58;
        a9.i32[2] = *v62;
        a9.i32[3] = *v66;
        a10.i32[1] = *v59;
        a10.i32[2] = *v63;
        a10.i32[3] = *v67;
        float32x4_t v608 = a10;
        float32x4_t v609 = a9;
        goto LABEL_35;
      }
    }
    if ((a5 & 0x1010101) == 0)
    {
      v37.i32[0] = a6 & 0x1010101;
      *(int8x8_t *)v37.f32 = vcnt_s8(*(int8x8_t *)v37.f32);
      v37.i16[0] = vaddlv_u8(*(uint8x8_t *)v37.f32);
      if (v37.i32[0] >= 2u)
      {
        v37.i32[0] = *v55;
        a8.i32[0] = *(_DWORD *)(result + 16396);
        a9.i32[0] = *(_DWORD *)(result + 16400);
        a10.i32[0] = *(_DWORD *)(result + 16404);
        float32x4_t v56 = (__int32 *)(result + 16428);
        char v57 = (unsigned __int32 *)(result + 16432);
        float32x4_t v58 = (unsigned __int32 *)(result + 16436);
        float v59 = (unsigned __int32 *)(result + 16440);
        unsigned int v60 = (__int32 *)(result + 16464);
        int8x16_t v61 = (unsigned __int32 *)(result + 16468);
        float32x4_t v62 = (unsigned __int32 *)(result + 16472);
        float32x4_t v63 = (unsigned __int32 *)(result + 16476);
        float32x4_t v64 = (__int32 *)(result + 16500);
        float32x4_t v65 = (unsigned __int32 *)(result + 16504);
        float32x4_t v66 = (unsigned __int32 *)(result + 16508);
        int32x4_t v67 = (unsigned __int32 *)(result + 16512);
        goto LABEL_34;
      }
    }
    if (a5)
    {
      float32x4_t v37 = *(float32x4_t *)(result + 16408);
      float32x4_t v611 = v37;
    }
    if ((a5 & 0x100) != 0)
    {
      float32x4_t v37 = *(float32x4_t *)(result + 16444);
      float32x4_t v610 = v37;
    }
    if ((a5 & 0x10000) != 0)
    {
      float32x4_t v37 = *(float32x4_t *)(result + 16480);
      float32x4_t v609 = v37;
    }
    if ((a5 & 0x1000000) != 0)
    {
      float32x4_t v37 = *(float32x4_t *)(result + 16516);
      float32x4_t v608 = v37;
      if ((a6 & 1) == 0)
      {
LABEL_632:
        if ((a6 & 0x100) == 0) {
          goto LABEL_633;
        }
        goto LABEL_707;
      }
    }
    else if ((a6 & 1) == 0)
    {
      goto LABEL_632;
    }
    float32x4_t v37 = *(float32x4_t *)v55;
    float32x4_t v611 = *(float32x4_t *)v55;
    if ((a6 & 0x100) == 0)
    {
LABEL_633:
      if ((a6 & 0x10000) == 0) {
        goto LABEL_634;
      }
      goto LABEL_708;
    }
LABEL_707:
    float32x4_t v37 = *(float32x4_t *)(result + 16428);
    float32x4_t v610 = v37;
    if ((a6 & 0x10000) == 0)
    {
LABEL_634:
      if ((a6 & 0x1000000) == 0) {
        goto LABEL_35;
      }
LABEL_709:
      float32x4_t v37 = *(float32x4_t *)(result + 16500);
      float32x4_t v608 = v37;
      goto LABEL_35;
    }
LABEL_708:
    float32x4_t v37 = *(float32x4_t *)(result + 16464);
    float32x4_t v609 = v37;
    if ((a6 & 0x1000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_709;
  }
  BOOL v34 = (a4 & 8) == 0 || (a4 & 0x30) == 16;
  float32x4_t v35 = 0uLL;
  float32x4_t v575 = 0u;
  int8x16_t v590 = 0u;
  if ((a4 & 0x3000) != 0) {
    goto LABEL_17;
  }
  float32x4_t v577 = 0uLL;
  float32x4_t v619 = 0uLL;
  if (!v34) {
    goto LABEL_22;
  }
  return result;
}

uint64_t gleSetNormalFunc(int8x8_t *a1, unint64_t a2, int a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, float32x4_t a11)
{
  if (a1[1564].i8[4]) {
    int v11 = 768;
  }
  else {
    int v11 = 256;
  }
  int v12 = a1 + 2212;
  if (a1[2212].i8[3]) {
    v11 |= v12->u8[0] | 0x2800;
  }
  if (a1[2212].i8[1])
  {
    int v13 = v11 | v12->u8[0] | 0x2000;
  }
  else
  {
    int v14 = v11 | 0x1000;
    if ((~a1[3716].i32[0] & 0xFCFCFC00) == 0x40100400) {
      int v14 = v11;
    }
    int v15 = v11 | 0x2000;
    if ((~a1[3716].i32[0] & 0x3CCCF000) != 0) {
      int v13 = v15;
    }
    else {
      int v13 = v14;
    }
  }
  if (a1[3728].i16[3] == 7169)
  {
    unsigned int v16 = 16843009;
  }
  else
  {
    unsigned int v16 = a1[2973].u32[1];
    if (!v16)
    {
      double v17 = 0.0;
      goto LABEL_18;
    }
  }
  a5 = COERCE_DOUBLE(vdup_n_s32(v16));
  double v17 = COERCE_DOUBLE(vand_s8(a1[2975], *(int8x8_t *)&a5));
LABEL_18:
  a1[2516] = (int8x8_t)gleLLVMVecNormalTransform;
  a1[2517] = (int8x8_t)gleLLVMVecNormalTransform;
  a1[2550].i32[1] = v13;
  *(double *)&a1[2551] = v17;
  return gleLLVMVecNormal((uint64_t)a1, a2, a3, v13, LODWORD(v17), HIDWORD(v17), v17, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t gleSetNormalRPosFunc(uint64_t a1, unint64_t a2, int a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, float32x4_t a11)
{
  if (*(unsigned char *)(a1 + 12516)) {
    int v11 = 768;
  }
  else {
    int v11 = 256;
  }
  int v12 = (unsigned __int8 *)(a1 + 17696);
  if (*(unsigned char *)(a1 + 17699)) {
    v11 |= *v12 | 0x2800;
  }
  if (*(unsigned char *)(a1 + 17697))
  {
    int v13 = v11 | *v12 | 0x2000;
  }
  else
  {
    int v14 = v11 | 0x1000;
    if ((~*(_DWORD *)(a1 + 29728) & 0xFCFCFC00) == 0x40100400) {
      int v14 = v11;
    }
    int v13 = v11 | 0x2000;
    if ((~*(_DWORD *)(a1 + 29728) & 0x3CCCF000) == 0) {
      int v13 = v14;
    }
  }
  *(void *)(a1 + 20256) = gleLLVMVecNormalRPos;
  *(void *)(a1 + 20264) = gleLLVMVecNormalRPos;
  *(_DWORD *)(a1 + 20468) = v13 | 0x400;
  double v15 = *(double *)(a1 + 23800);
  *(double *)(a1 + 20472) = v15;
  return gleLLVMVecNormal(a1, a2, a3, v13 | 0x400u, LODWORD(v15), HIDWORD(v15), v15, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t gleLLVMVecNormalTransform(_DWORD *a1, unint64_t a2, int a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, float32x4_t a11)
{
  return gleLLVMVecNormal((uint64_t)a1, a2, a3, a1[5101], a1[5102], a1[5103], a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t gleLLVMVecNormalRPos(_DWORD *a1, unint64_t a2, int a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, float32x4_t a11)
{
  return gleLLVMVecNormal((uint64_t)a1, a2, a3, a1[5117], a1[5118], a1[5119], a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t gleLLVMVecNormal(uint64_t result, unint64_t a2, int a3, __int16 a4, unsigned int a5, unsigned int a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, float32x4_t a14)
{
  int v153 = a6 | a5;
  if (a4 & 0x32FF | a6 | a5)
  {
    unint64_t v21 = a2;
    unint64_t v22 = a2 + 640 * a3;
    if ((_BYTE)a4)
    {
      if (a3 >= 1)
      {
        float32x4_t v23 = (_OWORD *)a2;
        do
        {
          v23[21] = 0uLL;
          v23[61] = 0uLL;
          v23[101] = 0uLL;
          v23[141] = 0uLL;
          v23 += 160;
        }
        while ((unint64_t)v23 < v22);
      }
      uint64_t v24 = 0;
      if (a4 <= 1u) {
        uint64_t v25 = 1;
      }
      else {
        uint64_t v25 = a4;
      }
      float32x4_t v26 = 0uLL;
      uint64_t v27 = 160;
      float32x4_t v28 = 0uLL;
      float32x4_t v29 = 0uLL;
      do
      {
        if ((a4 & 0x800) == 0)
        {
          float32x4_t v30 = (float32x4_t *)(result + (v24 << 6));
          float32x4_t v26 = v30[697];
          float32x4_t v28 = v30[698];
          float32x4_t v29 = v30[699];
        }
        if (a3 >= 1)
        {
          unint64_t v31 = a2;
          do
          {
            if ((a4 & 0x800) != 0)
            {
              int8x16_t v32 = (float32x4_t *)(result + ((unint64_t)*(unsigned __int8 *)(v31 + v24 + 4) << 6));
              float32x4_t v26 = v32[701];
              float32x4_t v28 = v32[702];
              float32x4_t v29 = v32[703];
            }
            *(float32x4_t *)(v31 + 336) = vmlaq_n_f32(*(float32x4_t *)(v31 + 336), vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)(v31 + 112))), v28, *(float32x2_t *)(v31 + 112), 1), v29, *(float32x4_t *)(v31 + 112), 2), *(float *)(v31 + v27));
            v31 += 640;
          }
          while (v31 < v22);
        }
        ++v24;
        v27 += 4;
      }
      while (v24 != v25);
    }
    else
    {
      float32x4_t v29 = 0uLL;
      if ((a4 & 0x3000) != 0)
      {
        if ((a4 & 0x3000) == 0x1000)
        {
          v26.i32[0] = *(_DWORD *)(result + 11152);
          v26.i32[1] = *(_DWORD *)(result + 11172);
          v26.i32[2] = *(_DWORD *)(result + 11192);
          v26.i32[3] = v26.i32[0];
          float32x4_t v28 = 0uLL;
        }
        else
        {
          float32x4_t v26 = *(float32x4_t *)(result + 11152);
          float32x4_t v28 = *(float32x4_t *)(result + 11168);
          float32x4_t v29 = *(float32x4_t *)(result + 11184);
        }
      }
      else
      {
        float32x4_t v28 = 0uLL;
        float32x4_t v26 = 0uLL;
      }
    }
    uint64_t v33 = 0;
    int v147 = a6 & a5;
    int v34 = a6 & 0x1010101 & a5;
    int v152 = (a6 & 0x1010101 ^ 0x1010101) & a5;
    int v150 = v34 ^ a6 & 0x1010101;
    int v145 = a6 & 0x101 & (unsigned __int16)a5 ^ a6 & 0x101;
    int v146 = (a6 & 0x101 ^ 0x101) & (unsigned __int16)a5;
    int v144 = a6 & 0x101 & (unsigned __int16)a5;
    int v35 = (a6 >> 1) & 0x1010101;
    int v36 = v35 & (a5 >> 1);
    unsigned int v148 = v36 ^ v35;
    int v149 = (v35 ^ 0x1010101) & (a5 >> 1);
    int v143 = ((unsigned __int16)v35 ^ 0x101) & (unsigned __int16)(a5 >> 1);
    int v37 = (a6 >> 2) & 0x1010101;
    int v38 = v37 & (a5 >> 2);
    int v39 = (v37 ^ 0x1010101) & (a5 >> 2);
    int v40 = v38 ^ v37;
    int v41 = (a6 >> 3) & 0x1010101;
    int v42 = v41 & (a5 >> 3);
    int v43 = (v41 ^ 0x1010101) & (a5 >> 3);
    int v44 = v42 ^ v41;
    int v45 = (a6 >> 4) & 0x1010101;
    int v46 = v45 & (a5 >> 4);
    int v47 = (v45 ^ 0x1010101) & (a5 >> 4);
    int v48 = v46 ^ v45;
    int v49 = (a6 >> 5) & 0x1010101;
    int v50 = v49 & (a5 >> 5);
    int v51 = (v49 ^ 0x1010101) & (a5 >> 5);
    int v52 = v50 ^ v49;
    int v53 = (a6 >> 6) & 0x1010101;
    int v54 = v53 & (a5 >> 6);
    int v55 = (v53 ^ 0x1010101) & (a5 >> 6);
    int v56 = v54 ^ v53;
    unsigned int v57 = a5 >> 7;
    int v58 = (a6 >> 7) & 0x1010101;
    int v59 = (v58 ^ 0x1010101) & (a5 >> 7);
    int v60 = v58 & v57;
    int v61 = v58 & v57 ^ v58;
    v62.i64[0] = 0x3F0000003F000000;
    v62.i64[1] = 0x3F0000003F000000;
    int v142 = (unsigned __int16)(v60 ^ v58);
    do
    {
      _X17 = v21 + 2560 * v33;
      __asm
      {
        PRFM            #0, [X17,#0xA70]
        PRFM            #0, [X17,#0xCF0]
        PRFM            #0, [X17,#0xF70]
        PRFM            #0, [X17,#0x11F0]
      }
      __n128 result = a4;
      if ((_BYTE)a4)
      {
        __n128 result = _X17 + 4816;
        _X20 = _X17 + 4176;
        _X21 = _X17 + 3536;
        _X17 = _X17 + 2896;
        __asm { PRFM            #0, [X17] }
        _Q26 = *(float32x4_t *)(a2 + 336);
        __asm { PRFM            #0, [X21] }
        _Q25 = *(float32x4_t *)(a2 + 976);
        __asm { PRFM            #0, [X20] }
        _Q24 = *(float32x4_t *)(a2 + 1616);
        __asm { PRFM            #0, [X0] }
        _Q23 = *(float32x4_t *)(a2 + 2256);
      }
      else if ((a4 & 0x3000) == 0x1000)
      {
        _Q26 = vmulq_f32(v26, *(float32x4_t *)(a2 + 112));
        _Q25 = vmulq_f32(v26, *(float32x4_t *)(a2 + 752));
        _Q24 = vmulq_f32(v26, *(float32x4_t *)(a2 + 1392));
        _Q23 = vmulq_f32(v26, *(float32x4_t *)(a2 + 2032));
      }
      else if ((a4 & 0x3000) != 0)
      {
        _Q26 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)(a2 + 112))), v28, *(float32x2_t *)(a2 + 112), 1), v29, *(float32x4_t *)(a2 + 112), 2);
        _Q25 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)(a2 + 752))), v28, *(float32x2_t *)(a2 + 752), 1), v29, *(float32x4_t *)(a2 + 752), 2);
        _Q24 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)(a2 + 1392))), v28, *(float32x2_t *)(a2 + 1392), 1), v29, *(float32x4_t *)(a2 + 1392), 2);
        _Q23 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)(a2 + 2032))), v28, *(float32x2_t *)(a2 + 2032), 1), v29, *(float32x4_t *)(a2 + 2032), 2);
      }
      else
      {
        _Q26 = *(float32x4_t *)(a2 + 112);
        _Q25 = *(float32x4_t *)(a2 + 752);
        _Q24 = *(float32x4_t *)(a2 + 1392);
        _Q23 = *(float32x4_t *)(a2 + 2032);
      }
      if ((a4 & 0x200) != 0)
      {
        _S29 = _Q26.i32[2];
        __asm { FMLA            S27, S29, V26.S[2] }
        float v86 = -1.0;
        int v83 = v152;
        if (_S27 <= 2.7105e-20)
        {
          float v90 = -1.0;
          v89.i64[0] = _Q26.i64[0];
        }
        else
        {
          __n128 result = 1597463040;
          LODWORD(v87) = 1597463040 - (LODWORD(_S27) >> 1);
          float v88 = (float)((float)(v87 * 0.0625) * (float)(3.0 - (float)((float)(_S27 * v87) * v87)))
              * (float)((float)((float)-(float)((float)((float)(_S27 * v87) * v87)
                                              * (float)(3.0 - (float)((float)(_S27 * v87) * v87)))
                              * (float)(3.0 - (float)((float)(_S27 * v87) * v87)))
                      + 12.0);
          *(float32x2_t *)v89.f32 = vmul_n_f32(*(float32x2_t *)_Q26.f32, v88);
          float v90 = _Q26.f32[2] * v88;
        }
        _S31 = _Q25.i32[2];
        __asm { FMLA            S30, S31, V25.S[2] }
        if (_S30 <= 2.7105e-20)
        {
          v95.i64[0] = _Q25.i64[0];
        }
        else
        {
          __n128 result = 1597463040;
          LODWORD(v93) = 1597463040 - (LODWORD(_S30) >> 1);
          float v94 = (float)((float)(v93 * 0.0625) * (float)(3.0 - (float)((float)(_S30 * v93) * v93)))
              * (float)((float)((float)-(float)((float)((float)(_S30 * v93) * v93)
                                              * (float)(3.0 - (float)((float)(_S30 * v93) * v93)))
                              * (float)(3.0 - (float)((float)(_S30 * v93) * v93)))
                      + 12.0);
          *(float32x2_t *)v95.f32 = vmul_n_f32(*(float32x2_t *)_Q25.f32, v94);
          float v86 = _Q25.f32[2] * v94;
        }
        _S9 = _Q24.i32[2];
        __asm { FMLA            S8, S9, V24.S[2] }
        float v98 = -1.0;
        if (_S8 <= 2.7105e-20)
        {
          float v102 = -1.0;
          v101.i64[0] = _Q24.i64[0];
        }
        else
        {
          __n128 result = 1597463040;
          LODWORD(v99) = 1597463040 - (LODWORD(_S8) >> 1);
          float v100 = (float)((float)(v99 * 0.0625) * (float)(3.0 - (float)((float)(_S8 * v99) * v99)))
               * (float)((float)((float)-(float)((float)((float)(_S8 * v99) * v99)
                                               * (float)(3.0 - (float)((float)(_S8 * v99) * v99)))
                               * (float)(3.0 - (float)((float)(_S8 * v99) * v99)))
                       + 12.0);
          *(float32x2_t *)v101.f32 = vmul_n_f32(*(float32x2_t *)_Q24.f32, v100);
          float v102 = _Q24.f32[2] * v100;
        }
        _S11 = _Q23.i32[2];
        __asm { FMLA            S10, S11, V23.S[2] }
        if (_S10 <= 2.7105e-20)
        {
          v107.i64[0] = _Q23.i64[0];
        }
        else
        {
          __n128 result = 1597463040;
          LODWORD(v105) = 1597463040 - (LODWORD(_S10) >> 1);
          float v106 = (float)((float)(v105 * 0.0625) * (float)(3.0 - (float)((float)(_S10 * v105) * v105)))
               * (float)((float)((float)-(float)((float)((float)(_S10 * v105) * v105)
                                               * (float)(3.0 - (float)((float)(_S10 * v105) * v105)))
                               * (float)(3.0 - (float)((float)(_S10 * v105) * v105)))
                       + 12.0);
          *(float32x2_t *)v107.f32 = vmul_n_f32(*(float32x2_t *)_Q23.f32, v106);
          float v98 = _Q23.f32[2] * v106;
        }
        v89.i64[1] = __PAIR64__(vextq_s8(*(int8x16_t *)&_Q26, *(int8x16_t *)&_Q26, 8uLL).u32[1], LODWORD(v90));
        v95.i64[1] = __PAIR64__(vextq_s8(*(int8x16_t *)&_Q25, *(int8x16_t *)&_Q25, 8uLL).u32[1], LODWORD(v86));
        v101.i64[1] = __PAIR64__(vextq_s8(*(int8x16_t *)&_Q24, *(int8x16_t *)&_Q24, 8uLL).u32[1], LODWORD(v102));
        v107.i64[1] = __PAIR64__(vextq_s8(*(int8x16_t *)&_Q23, *(int8x16_t *)&_Q23, 8uLL).u32[1], LODWORD(v98));
        _Q23 = v107;
        _Q24 = v101;
        _Q25 = v95;
        _Q26 = v89;
        if ((a4 & 0x32FF) == 0) {
          goto LABEL_47;
        }
      }
      else
      {
        int v83 = v152;
        if ((a4 & 0x32FF) == 0) {
          goto LABEL_47;
        }
      }
      *(float32x4_t *)(a2 + 112) = _Q26;
      *(float32x4_t *)(a2 + 752) = _Q25;
      *(float32x4_t *)(a2 + 1392) = _Q24;
      *(float32x4_t *)(a2 + 2032) = _Q23;
LABEL_47:
      if (v153)
      {
        if (a6)
        {
          float32x4_t v108 = *(float32x4_t *)(a2 + 96);
          float32x4_t v109 = *(float32x4_t *)(a2 + 736);
          float32x4_t v110 = *(float32x4_t *)(a2 + 1376);
          float32x4_t v111 = *(float32x4_t *)(a2 + 2016);
          float32x4_t v112 = vmulq_f32(v108, v108);
          int32x4_t v113 = (int32x4_t)vmulq_f32(v109, v109);
          float32x4_t v114 = vmulq_f32(v110, v110);
          float32x4_t v115 = vmulq_f32(v111, v111);
          v116.i64[0] = vzip1q_s32((int32x4_t)v112, v113).u64[0];
          v116.i64[1] = __PAIR64__(v115.u32[0], v114.u32[0]);
          v117.i64[0] = vtrn2q_s32((int32x4_t)v112, v113).u64[0];
          v117.i64[1] = __PAIR64__(v115.u32[1], v114.u32[1]);
          v112.i64[0] = vzip2q_s32((int32x4_t)v112, v113).u64[0];
          v112.i64[1] = __PAIR64__(v115.u32[2], v114.u32[2]);
          __asm { FMOV            V27.4S, #1.0 }
          float32x4_t v119 = vdivq_f32(_Q27, vsqrtq_f32(vaddq_f32(v116, vaddq_f32(v117, v112))));
          float32x4_t v120 = vmulq_n_f32(v108, v119.f32[0]);
          float32x4_t v121 = vmulq_lane_f32(v109, *(float32x2_t *)v119.f32, 1);
          float32x4_t v122 = vmulq_laneq_f32(v110, v119, 2);
          float32x4_t v123 = vmulq_laneq_f32(v111, v119, 3);
          float32x4_t v124 = vmulq_f32(v120, _Q26);
          int32x4_t v125 = (int32x4_t)vmulq_f32(v121, _Q25);
          float32x4_t v126 = vmulq_f32(v122, _Q24);
          float32x4_t v127 = vmulq_f32(v123, _Q23);
          v117.i64[0] = vzip1q_s32((int32x4_t)v124, v125).u64[0];
          v117.i64[1] = __PAIR64__(v127.u32[0], v126.u32[0]);
          v128.i64[0] = vtrn2q_s32((int32x4_t)v124, v125).u64[0];
          v128.i64[1] = __PAIR64__(v127.u32[1], v126.u32[1]);
          v124.i64[0] = vzip2q_s32((int32x4_t)v124, v125).u64[0];
          v124.i64[1] = __PAIR64__(v127.u32[2], v126.u32[2]);
          float32x4_t v129 = vaddq_f32(v117, vaddq_f32(v128, v124));
          float32x4_t v130 = vaddq_f32(v129, v129);
          float32x4_t v20 = vmlsq_lane_f32(v120, _Q26, *(float32x2_t *)v130.f32, 0);
          float32x4_t v19 = vmlsq_lane_f32(v121, _Q25, *(float32x2_t *)v130.f32, 1);
          float32x4_t v18 = vmlsq_laneq_f32(v122, _Q24, v130, 2);
          float32x4_t v17 = vmlsq_laneq_f32(v123, _Q23, v130, 3);
          if (v147)
          {
            float32x4_t v131 = vaddq_f32(v20, (float32x4_t)xmmword_227DC2100);
            float32x4_t v132 = vaddq_f32(v19, (float32x4_t)xmmword_227DC2100);
            float32x4_t v133 = vaddq_f32(v18, (float32x4_t)xmmword_227DC2100);
            float32x4_t v134 = vaddq_f32(v17, (float32x4_t)xmmword_227DC2100);
            float32x4_t v135 = vmulq_f32(v131, v131);
            float32x4_t v136 = vmulq_f32(v132, v132);
            float32x4_t v137 = vmulq_f32(v133, v133);
            float32x4_t v138 = vmulq_f32(v134, v134);
            v139.i64[0] = vzip1q_s32((int32x4_t)v135, (int32x4_t)v136).u64[0];
            v139.i64[1] = __PAIR64__(v138.u32[0], v137.u32[0]);
            v140.i64[0] = vtrn2q_s32((int32x4_t)v135, (int32x4_t)v136).u64[0];
            v140.i64[1] = __PAIR64__(v138.u32[1], v137.u32[1]);
            v135.i64[0] = vzip2q_s32((int32x4_t)v135, (int32x4_t)v136).u64[0];
            v135.i64[1] = __PAIR64__(v138.u32[2], v137.u32[2]);
            float32x4_t v141 = vmulq_f32(vdivq_f32(_Q27, vsqrtq_f32(vaddq_f32(v139, vaddq_f32(v140, v135)))), v62);
            v138.i64[0] = 0x3F0000003F000000;
            v138.i64[1] = 0x3F0000003F000000;
            a14 = vmlaq_n_f32(v138, v20, v141.f32[0]);
            v135.i64[0] = 0x3F0000003F000000;
            v135.i64[1] = 0x3F0000003F000000;
            float32x4_t v14 = vmlaq_lane_f32(v135, v19, *(float32x2_t *)v141.f32, 1);
            v136.i64[0] = 0x3F0000003F000000;
            v136.i64[1] = 0x3F0000003F000000;
            float32x4_t v15 = vmlaq_laneq_f32(v136, v18, v141, 2);
            v137.i64[0] = 0x3F0000003F000000;
            v137.i64[1] = 0x3F0000003F000000;
            float32x4_t v16 = vmlaq_laneq_f32(v137, v17, v141, 3);
          }
        }
        if (v83)
        {
          if (v146 == 257)
          {
            *(void *)(a2 + 224) = _Q26.i64[0];
            *(void *)(a2 + 864) = _Q25.i64[0];
            *(void *)(a2 + 1504) = _Q24.i64[0];
            *(void *)(a2 + 2144) = _Q23.i64[0];
          }
          else if (v83)
          {
            *(_DWORD *)(a2 + 224) = _Q26.i32[0];
            *(_DWORD *)(a2 + 864) = _Q25.i32[0];
            *(_DWORD *)(a2 + 1504) = _Q24.i32[0];
            *(_DWORD *)(a2 + 2144) = _Q23.i32[0];
          }
          else if ((v83 & 0x100) != 0)
          {
            *(_DWORD *)(a2 + 228) = _Q26.i32[1];
            *(_DWORD *)(a2 + 868) = _Q25.i32[1];
            *(_DWORD *)(a2 + 1508) = _Q24.i32[1];
            *(_DWORD *)(a2 + 2148) = _Q23.i32[1];
          }
          if ((v83 & 0x10000) != 0)
          {
            *(_DWORD *)(a2 + 232) = _Q26.i32[2];
            *(_DWORD *)(a2 + 872) = _Q25.i32[2];
            *(_DWORD *)(a2 + 1512) = _Q24.i32[2];
            *(_DWORD *)(a2 + 2152) = _Q23.i32[2];
          }
        }
        if (v150)
        {
          if (v145 == 257)
          {
            *(void *)(a2 + 224) = v20.i64[0];
            *(void *)(a2 + 864) = v19.i64[0];
            *(void *)(a2 + 1504) = v18.i64[0];
            *(void *)(a2 + 2144) = v17.i64[0];
          }
          else if (v150)
          {
            *(_DWORD *)(a2 + 224) = v20.i32[0];
            *(_DWORD *)(a2 + 864) = v19.i32[0];
            *(_DWORD *)(a2 + 1504) = v18.i32[0];
            *(_DWORD *)(a2 + 2144) = v17.i32[0];
          }
          else if ((v150 & 0x100) != 0)
          {
            *(_DWORD *)(a2 + 228) = v20.i32[1];
            *(_DWORD *)(a2 + 868) = v19.i32[1];
            *(_DWORD *)(a2 + 1508) = v18.i32[1];
            *(_DWORD *)(a2 + 2148) = v17.i32[1];
          }
          if ((v150 & 0x10000) != 0)
          {
            *(_DWORD *)(a2 + 232) = v20.i32[2];
            *(_DWORD *)(a2 + 872) = v19.i32[2];
            *(_DWORD *)(a2 + 1512) = v18.i32[2];
            *(_DWORD *)(a2 + 2152) = v17.i32[2];
          }
        }
        if (v34)
        {
          if (v144 == 257)
          {
            *(void *)(a2 + 224) = a14.i64[0];
            *(void *)(a2 + 864) = v14.i64[0];
            *(void *)(a2 + 1504) = v15.i64[0];
            *(void *)(a2 + 2144) = v16.i64[0];
          }
          else if (v34)
          {
            *(_DWORD *)(a2 + 224) = a14.i32[0];
            *(_DWORD *)(a2 + 864) = v14.i32[0];
            *(_DWORD *)(a2 + 1504) = v15.i32[0];
            *(_DWORD *)(a2 + 2144) = v16.i32[0];
          }
          else if ((v34 & 0x100) != 0)
          {
            *(_DWORD *)(a2 + 228) = a14.i32[1];
            *(_DWORD *)(a2 + 868) = v14.i32[1];
            *(_DWORD *)(a2 + 1508) = v15.i32[1];
            *(_DWORD *)(a2 + 2148) = v16.i32[1];
          }
          if ((v34 & 0x10000) != 0)
          {
            *(_DWORD *)(a2 + 232) = a14.i32[2];
            *(_DWORD *)(a2 + 872) = v14.i32[2];
            *(_DWORD *)(a2 + 1512) = v15.i32[2];
            *(_DWORD *)(a2 + 2152) = v16.i32[2];
          }
        }
        if (v149)
        {
          if (v143 == 257)
          {
            *(void *)(a2 + 240) = _Q26.i64[0];
            *(void *)(a2 + 880) = _Q25.i64[0];
            *(void *)(a2 + 1520) = _Q24.i64[0];
            *(void *)(a2 + 2160) = _Q23.i64[0];
          }
          else if (v149)
          {
            *(_DWORD *)(a2 + 240) = _Q26.i32[0];
            *(_DWORD *)(a2 + 880) = _Q25.i32[0];
            *(_DWORD *)(a2 + 1520) = _Q24.i32[0];
            *(_DWORD *)(a2 + 2160) = _Q23.i32[0];
          }
          else if ((v149 & 0x100) != 0)
          {
            *(_DWORD *)(a2 + 244) = _Q26.i32[1];
            *(_DWORD *)(a2 + 884) = _Q25.i32[1];
            *(_DWORD *)(a2 + 1524) = _Q24.i32[1];
            *(_DWORD *)(a2 + 2164) = _Q23.i32[1];
          }
          if ((v149 & 0x10000) != 0)
          {
            *(_DWORD *)(a2 + 248) = _Q26.i32[2];
            *(_DWORD *)(a2 + 888) = _Q25.i32[2];
            *(_DWORD *)(a2 + 1528) = _Q24.i32[2];
            *(_DWORD *)(a2 + 2168) = _Q23.i32[2];
          }
        }
        __n128 result = v148;
        if (v148)
        {
          if ((unsigned __int16)v148 == 257)
          {
            *(void *)(a2 + 240) = v20.i64[0];
            *(void *)(a2 + 880) = v19.i64[0];
            *(void *)(a2 + 1520) = v18.i64[0];
            *(void *)(a2 + 2160) = v17.i64[0];
          }
          else if (v148)
          {
            *(_DWORD *)(a2 + 240) = v20.i32[0];
            *(_DWORD *)(a2 + 880) = v19.i32[0];
            *(_DWORD *)(a2 + 1520) = v18.i32[0];
            *(_DWORD *)(a2 + 2160) = v17.i32[0];
          }
          else if ((v148 & 0x100) != 0)
          {
            *(_DWORD *)(a2 + 244) = v20.i32[1];
            *(_DWORD *)(a2 + 884) = v19.i32[1];
            *(_DWORD *)(a2 + 1524) = v18.i32[1];
            *(_DWORD *)(a2 + 2164) = v17.i32[1];
          }
          if ((v148 & 0x10000) != 0)
          {
            *(_DWORD *)(a2 + 248) = v20.i32[2];
            *(_DWORD *)(a2 + 888) = v19.i32[2];
            *(_DWORD *)(a2 + 1528) = v18.i32[2];
            *(_DWORD *)(a2 + 2168) = v17.i32[2];
          }
        }
        if (v36)
        {
          if ((unsigned __int16)v36 == 257)
          {
            *(void *)(a2 + 240) = a14.i64[0];
            *(void *)(a2 + 880) = v14.i64[0];
            *(void *)(a2 + 1520) = v15.i64[0];
            *(void *)(a2 + 2160) = v16.i64[0];
          }
          else if (v36)
          {
            *(_DWORD *)(a2 + 240) = a14.i32[0];
            *(_DWORD *)(a2 + 880) = v14.i32[0];
            *(_DWORD *)(a2 + 1520) = v15.i32[0];
            *(_DWORD *)(a2 + 2160) = v16.i32[0];
          }
          else if ((v36 & 0x100) != 0)
          {
            *(_DWORD *)(a2 + 244) = a14.i32[1];
            *(_DWORD *)(a2 + 884) = v14.i32[1];
            *(_DWORD *)(a2 + 1524) = v15.i32[1];
            *(_DWORD *)(a2 + 2164) = v16.i32[1];
          }
          if ((v36 & 0x10000) != 0)
          {
            *(_DWORD *)(a2 + 248) = a14.i32[2];
            *(_DWORD *)(a2 + 888) = v14.i32[2];
            *(_DWORD *)(a2 + 1528) = v15.i32[2];
            *(_DWORD *)(a2 + 2168) = v16.i32[2];
          }
        }
        if (v39)
        {
          if ((unsigned __int16)v39 == 257)
          {
            *(void *)(a2 + 256) = _Q26.i64[0];
            *(void *)(a2 + 896) = _Q25.i64[0];
            *(void *)(a2 + 1536) = _Q24.i64[0];
            *(void *)(a2 + 2176) = _Q23.i64[0];
          }
          else if (v39)
          {
            *(_DWORD *)(a2 + 256) = _Q26.i32[0];
            *(_DWORD *)(a2 + 896) = _Q25.i32[0];
            *(_DWORD *)(a2 + 1536) = _Q24.i32[0];
            *(_DWORD *)(a2 + 2176) = _Q23.i32[0];
          }
          else if ((v39 & 0x100) != 0)
          {
            *(_DWORD *)(a2 + 260) = _Q26.i32[1];
            *(_DWORD *)(a2 + 900) = _Q25.i32[1];
            *(_DWORD *)(a2 + 1540) = _Q24.i32[1];
            *(_DWORD *)(a2 + 2180) = _Q23.i32[1];
          }
          if ((v39 & 0x10000) != 0)
          {
            *(_DWORD *)(a2 + 264) = _Q26.i32[2];
            *(_DWORD *)(a2 + 904) = _Q25.i32[2];
            *(_DWORD *)(a2 + 1544) = _Q24.i32[2];
            *(_DWORD *)(a2 + 2184) = _Q23.i32[2];
          }
        }
        if (v40)
        {
          if ((unsigned __int16)v40 == 257)
          {
            *(void *)(a2 + 256) = v20.i64[0];
            *(void *)(a2 + 896) = v19.i64[0];
            *(void *)(a2 + 1536) = v18.i64[0];
            *(void *)(a2 + 2176) = v17.i64[0];
          }
          else if (v40)
          {
            *(_DWORD *)(a2 + 256) = v20.i32[0];
            *(_DWORD *)(a2 + 896) = v19.i32[0];
            *(_DWORD *)(a2 + 1536) = v18.i32[0];
            *(_DWORD *)(a2 + 2176) = v17.i32[0];
          }
          else if ((v40 & 0x100) != 0)
          {
            *(_DWORD *)(a2 + 260) = v20.i32[1];
            *(_DWORD *)(a2 + 900) = v19.i32[1];
            *(_DWORD *)(a2 + 1540) = v18.i32[1];
            *(_DWORD *)(a2 + 2180) = v17.i32[1];
          }
          if ((v40 & 0x10000) != 0)
          {
            *(_DWORD *)(a2 + 264) = v20.i32[2];
            *(_DWORD *)(a2 + 904) = v19.i32[2];
            *(_DWORD *)(a2 + 1544) = v18.i32[2];
            *(_DWORD *)(a2 + 2184) = v17.i32[2];
          }
        }
        if (v38)
        {
          if ((unsigned __int16)v38 == 257)
          {
            *(void *)(a2 + 256) = a14.i64[0];
            *(void *)(a2 + 896) = v14.i64[0];
            *(void *)(a2 + 1536) = v15.i64[0];
            *(void *)(a2 + 2176) = v16.i64[0];
          }
          else if (v38)
          {
            *(_DWORD *)(a2 + 256) = a14.i32[0];
            *(_DWORD *)(a2 + 896) = v14.i32[0];
            *(_DWORD *)(a2 + 1536) = v15.i32[0];
            *(_DWORD *)(a2 + 2176) = v16.i32[0];
          }
          else if ((v38 & 0x100) != 0)
          {
            *(_DWORD *)(a2 + 260) = a14.i32[1];
            *(_DWORD *)(a2 + 900) = v14.i32[1];
            *(_DWORD *)(a2 + 1540) = v15.i32[1];
            *(_DWORD *)(a2 + 2180) = v16.i32[1];
          }
          if ((v38 & 0x10000) != 0)
          {
            *(_DWORD *)(a2 + 264) = a14.i32[2];
            *(_DWORD *)(a2 + 904) = v14.i32[2];
            *(_DWORD *)(a2 + 1544) = v15.i32[2];
            *(_DWORD *)(a2 + 2184) = v16.i32[2];
          }
        }
        if (v43)
        {
          if ((unsigned __int16)v43 == 257)
          {
            *(void *)(a2 + 272) = _Q26.i64[0];
            *(void *)(a2 + 912) = _Q25.i64[0];
            *(void *)(a2 + 1552) = _Q24.i64[0];
            *(void *)(a2 + 2192) = _Q23.i64[0];
          }
          else if (v43)
          {
            *(_DWORD *)(a2 + 272) = _Q26.i32[0];
            *(_DWORD *)(a2 + 912) = _Q25.i32[0];
            *(_DWORD *)(a2 + 1552) = _Q24.i32[0];
            *(_DWORD *)(a2 + 2192) = _Q23.i32[0];
          }
          else if ((v43 & 0x100) != 0)
          {
            *(_DWORD *)(a2 + 276) = _Q26.i32[1];
            *(_DWORD *)(a2 + 916) = _Q25.i32[1];
            *(_DWORD *)(a2 + 1556) = _Q24.i32[1];
            *(_DWORD *)(a2 + 2196) = _Q23.i32[1];
          }
          if ((v43 & 0x10000) != 0)
          {
            *(_DWORD *)(a2 + 280) = _Q26.i32[2];
            *(_DWORD *)(a2 + 920) = _Q25.i32[2];
            *(_DWORD *)(a2 + 1560) = _Q24.i32[2];
            *(_DWORD *)(a2 + 2200) = _Q23.i32[2];
          }
        }
        if (v44)
        {
          if ((unsigned __int16)v44 == 257)
          {
            *(void *)(a2 + 272) = v20.i64[0];
            *(void *)(a2 + 912) = v19.i64[0];
            *(void *)(a2 + 1552) = v18.i64[0];
            *(void *)(a2 + 2192) = v17.i64[0];
          }
          else if (v44)
          {
            *(_DWORD *)(a2 + 272) = v20.i32[0];
            *(_DWORD *)(a2 + 912) = v19.i32[0];
            *(_DWORD *)(a2 + 1552) = v18.i32[0];
            *(_DWORD *)(a2 + 2192) = v17.i32[0];
          }
          else if ((v44 & 0x100) != 0)
          {
            *(_DWORD *)(a2 + 276) = v20.i32[1];
            *(_DWORD *)(a2 + 916) = v19.i32[1];
            *(_DWORD *)(a2 + 1556) = v18.i32[1];
            *(_DWORD *)(a2 + 2196) = v17.i32[1];
          }
          if ((v44 & 0x10000) != 0)
          {
            *(_DWORD *)(a2 + 280) = v20.i32[2];
            *(_DWORD *)(a2 + 920) = v19.i32[2];
            *(_DWORD *)(a2 + 1560) = v18.i32[2];
            *(_DWORD *)(a2 + 2200) = v17.i32[2];
          }
        }
        if (v42)
        {
          if ((unsigned __int16)v42 == 257)
          {
            *(void *)(a2 + 272) = a14.i64[0];
            *(void *)(a2 + 912) = v14.i64[0];
            *(void *)(a2 + 1552) = v15.i64[0];
            *(void *)(a2 + 2192) = v16.i64[0];
          }
          else if (v42)
          {
            *(_DWORD *)(a2 + 272) = a14.i32[0];
            *(_DWORD *)(a2 + 912) = v14.i32[0];
            *(_DWORD *)(a2 + 1552) = v15.i32[0];
            *(_DWORD *)(a2 + 2192) = v16.i32[0];
          }
          else if ((v42 & 0x100) != 0)
          {
            *(_DWORD *)(a2 + 276) = a14.i32[1];
            *(_DWORD *)(a2 + 916) = v14.i32[1];
            *(_DWORD *)(a2 + 1556) = v15.i32[1];
            *(_DWORD *)(a2 + 2196) = v16.i32[1];
          }
          if ((v42 & 0x10000) != 0)
          {
            *(_DWORD *)(a2 + 280) = a14.i32[2];
            *(_DWORD *)(a2 + 920) = v14.i32[2];
            *(_DWORD *)(a2 + 1560) = v15.i32[2];
            *(_DWORD *)(a2 + 2200) = v16.i32[2];
          }
        }
        if (v47)
        {
          if ((unsigned __int16)v47 == 257)
          {
            *(void *)(a2 + 288) = _Q26.i64[0];
            *(void *)(a2 + 928) = _Q25.i64[0];
            *(void *)(a2 + 1568) = _Q24.i64[0];
            *(void *)(a2 + 2208) = _Q23.i64[0];
          }
          else if (v47)
          {
            *(_DWORD *)(a2 + 288) = _Q26.i32[0];
            *(_DWORD *)(a2 + 928) = _Q25.i32[0];
            *(_DWORD *)(a2 + 1568) = _Q24.i32[0];
            *(_DWORD *)(a2 + 2208) = _Q23.i32[0];
          }
          else if ((v47 & 0x100) != 0)
          {
            *(_DWORD *)(a2 + 292) = _Q26.i32[1];
            *(_DWORD *)(a2 + 932) = _Q25.i32[1];
            *(_DWORD *)(a2 + 1572) = _Q24.i32[1];
            *(_DWORD *)(a2 + 2212) = _Q23.i32[1];
          }
          if ((v47 & 0x10000) != 0)
          {
            *(_DWORD *)(a2 + 296) = _Q26.i32[2];
            *(_DWORD *)(a2 + 936) = _Q25.i32[2];
            *(_DWORD *)(a2 + 1576) = _Q24.i32[2];
            *(_DWORD *)(a2 + 2216) = _Q23.i32[2];
          }
        }
        if (v48)
        {
          if ((unsigned __int16)v48 == 257)
          {
            *(void *)(a2 + 288) = v20.i64[0];
            *(void *)(a2 + 928) = v19.i64[0];
            *(void *)(a2 + 1568) = v18.i64[0];
            *(void *)(a2 + 2208) = v17.i64[0];
          }
          else if (v48)
          {
            *(_DWORD *)(a2 + 288) = v20.i32[0];
            *(_DWORD *)(a2 + 928) = v19.i32[0];
            *(_DWORD *)(a2 + 1568) = v18.i32[0];
            *(_DWORD *)(a2 + 2208) = v17.i32[0];
          }
          else if ((v48 & 0x100) != 0)
          {
            *(_DWORD *)(a2 + 292) = v20.i32[1];
            *(_DWORD *)(a2 + 932) = v19.i32[1];
            *(_DWORD *)(a2 + 1572) = v18.i32[1];
            *(_DWORD *)(a2 + 2212) = v17.i32[1];
          }
          if ((v48 & 0x10000) != 0)
          {
            *(_DWORD *)(a2 + 296) = v20.i32[2];
            *(_DWORD *)(a2 + 936) = v19.i32[2];
            *(_DWORD *)(a2 + 1576) = v18.i32[2];
            *(_DWORD *)(a2 + 2216) = v17.i32[2];
          }
        }
        if (v46)
        {
          if ((unsigned __int16)v46 == 257)
          {
            *(void *)(a2 + 288) = a14.i64[0];
            *(void *)(a2 + 928) = v14.i64[0];
            *(void *)(a2 + 1568) = v15.i64[0];
            *(void *)(a2 + 2208) = v16.i64[0];
          }
          else if (v46)
          {
            *(_DWORD *)(a2 + 288) = a14.i32[0];
            *(_DWORD *)(a2 + 928) = v14.i32[0];
            *(_DWORD *)(a2 + 1568) = v15.i32[0];
            *(_DWORD *)(a2 + 2208) = v16.i32[0];
          }
          else if ((v46 & 0x100) != 0)
          {
            *(_DWORD *)(a2 + 292) = a14.i32[1];
            *(_DWORD *)(a2 + 932) = v14.i32[1];
            *(_DWORD *)(a2 + 1572) = v15.i32[1];
            *(_DWORD *)(a2 + 2212) = v16.i32[1];
          }
          if ((v46 & 0x10000) != 0)
          {
            *(_DWORD *)(a2 + 296) = a14.i32[2];
            *(_DWORD *)(a2 + 936) = v14.i32[2];
            *(_DWORD *)(a2 + 1576) = v15.i32[2];
            *(_DWORD *)(a2 + 2216) = v16.i32[2];
          }
        }
        if (v51)
        {
          if ((unsigned __int16)v51 == 257)
          {
            *(void *)(a2 + 304) = _Q26.i64[0];
            *(void *)(a2 + 944) = _Q25.i64[0];
            *(void *)(a2 + 1584) = _Q24.i64[0];
            *(void *)(a2 + 2224) = _Q23.i64[0];
          }
          else if (v51)
          {
            *(_DWORD *)(a2 + 304) = _Q26.i32[0];
            *(_DWORD *)(a2 + 944) = _Q25.i32[0];
            *(_DWORD *)(a2 + 1584) = _Q24.i32[0];
            *(_DWORD *)(a2 + 2224) = _Q23.i32[0];
          }
          else if ((v51 & 0x100) != 0)
          {
            *(_DWORD *)(a2 + 308) = _Q26.i32[1];
            *(_DWORD *)(a2 + 948) = _Q25.i32[1];
            *(_DWORD *)(a2 + 1588) = _Q24.i32[1];
            *(_DWORD *)(a2 + 2228) = _Q23.i32[1];
          }
          if ((v51 & 0x10000) != 0)
          {
            *(_DWORD *)(a2 + 312) = _Q26.i32[2];
            *(_DWORD *)(a2 + 952) = _Q25.i32[2];
            *(_DWORD *)(a2 + 1592) = _Q24.i32[2];
            *(_DWORD *)(a2 + 2232) = _Q23.i32[2];
          }
        }
        if (v52)
        {
          if ((unsigned __int16)v52 == 257)
          {
            *(void *)(a2 + 304) = v20.i64[0];
            *(void *)(a2 + 944) = v19.i64[0];
            *(void *)(a2 + 1584) = v18.i64[0];
            *(void *)(a2 + 2224) = v17.i64[0];
          }
          else if (v52)
          {
            *(_DWORD *)(a2 + 304) = v20.i32[0];
            *(_DWORD *)(a2 + 944) = v19.i32[0];
            *(_DWORD *)(a2 + 1584) = v18.i32[0];
            *(_DWORD *)(a2 + 2224) = v17.i32[0];
          }
          else if ((v52 & 0x100) != 0)
          {
            *(_DWORD *)(a2 + 308) = v20.i32[1];
            *(_DWORD *)(a2 + 948) = v19.i32[1];
            *(_DWORD *)(a2 + 1588) = v18.i32[1];
            *(_DWORD *)(a2 + 2228) = v17.i32[1];
          }
          if ((v52 & 0x10000) != 0)
          {
            *(_DWORD *)(a2 + 312) = v20.i32[2];
            *(_DWORD *)(a2 + 952) = v19.i32[2];
            *(_DWORD *)(a2 + 1592) = v18.i32[2];
            *(_DWORD *)(a2 + 2232) = v17.i32[2];
          }
        }
        if (v50)
        {
          if ((unsigned __int16)v50 == 257)
          {
            *(void *)(a2 + 304) = a14.i64[0];
            *(void *)(a2 + 944) = v14.i64[0];
            *(void *)(a2 + 1584) = v15.i64[0];
            *(void *)(a2 + 2224) = v16.i64[0];
          }
          else if (v50)
          {
            *(_DWORD *)(a2 + 304) = a14.i32[0];
            *(_DWORD *)(a2 + 944) = v14.i32[0];
            *(_DWORD *)(a2 + 1584) = v15.i32[0];
            *(_DWORD *)(a2 + 2224) = v16.i32[0];
          }
          else if ((v50 & 0x100) != 0)
          {
            *(_DWORD *)(a2 + 308) = a14.i32[1];
            *(_DWORD *)(a2 + 948) = v14.i32[1];
            *(_DWORD *)(a2 + 1588) = v15.i32[1];
            *(_DWORD *)(a2 + 2228) = v16.i32[1];
          }
          if ((v50 & 0x10000) != 0)
          {
            *(_DWORD *)(a2 + 312) = a14.i32[2];
            *(_DWORD *)(a2 + 952) = v14.i32[2];
            *(_DWORD *)(a2 + 1592) = v15.i32[2];
            *(_DWORD *)(a2 + 2232) = v16.i32[2];
          }
        }
        if (v55)
        {
          if ((unsigned __int16)v55 == 257)
          {
            *(void *)(a2 + 320) = _Q26.i64[0];
            *(void *)(a2 + 960) = _Q25.i64[0];
            *(void *)(a2 + 1600) = _Q24.i64[0];
            *(void *)(a2 + 2240) = _Q23.i64[0];
          }
          else if (v55)
          {
            *(_DWORD *)(a2 + 320) = _Q26.i32[0];
            *(_DWORD *)(a2 + 960) = _Q25.i32[0];
            *(_DWORD *)(a2 + 1600) = _Q24.i32[0];
            *(_DWORD *)(a2 + 2240) = _Q23.i32[0];
          }
          else if ((v55 & 0x100) != 0)
          {
            *(_DWORD *)(a2 + 324) = _Q26.i32[1];
            *(_DWORD *)(a2 + 964) = _Q25.i32[1];
            *(_DWORD *)(a2 + 1604) = _Q24.i32[1];
            *(_DWORD *)(a2 + 2244) = _Q23.i32[1];
          }
          if ((v55 & 0x10000) != 0)
          {
            *(_DWORD *)(a2 + 328) = _Q26.i32[2];
            *(_DWORD *)(a2 + 968) = _Q25.i32[2];
            *(_DWORD *)(a2 + 1608) = _Q24.i32[2];
            *(_DWORD *)(a2 + 2248) = _Q23.i32[2];
          }
        }
        if (v56)
        {
          if ((unsigned __int16)v56 == 257)
          {
            *(void *)(a2 + 320) = v20.i64[0];
            *(void *)(a2 + 960) = v19.i64[0];
            *(void *)(a2 + 1600) = v18.i64[0];
            *(void *)(a2 + 2240) = v17.i64[0];
          }
          else if (v56)
          {
            *(_DWORD *)(a2 + 320) = v20.i32[0];
            *(_DWORD *)(a2 + 960) = v19.i32[0];
            *(_DWORD *)(a2 + 1600) = v18.i32[0];
            *(_DWORD *)(a2 + 2240) = v17.i32[0];
          }
          else if ((v56 & 0x100) != 0)
          {
            *(_DWORD *)(a2 + 324) = v20.i32[1];
            *(_DWORD *)(a2 + 964) = v19.i32[1];
            *(_DWORD *)(a2 + 1604) = v18.i32[1];
            *(_DWORD *)(a2 + 2244) = v17.i32[1];
          }
          if ((v56 & 0x10000) != 0)
          {
            *(_DWORD *)(a2 + 328) = v20.i32[2];
            *(_DWORD *)(a2 + 968) = v19.i32[2];
            *(_DWORD *)(a2 + 1608) = v18.i32[2];
            *(_DWORD *)(a2 + 2248) = v17.i32[2];
          }
        }
        if (v54)
        {
          if ((unsigned __int16)v54 == 257)
          {
            *(void *)(a2 + 320) = a14.i64[0];
            *(void *)(a2 + 960) = v14.i64[0];
            *(void *)(a2 + 1600) = v15.i64[0];
            *(void *)(a2 + 2240) = v16.i64[0];
          }
          else if (v54)
          {
            *(_DWORD *)(a2 + 320) = a14.i32[0];
            *(_DWORD *)(a2 + 960) = v14.i32[0];
            *(_DWORD *)(a2 + 1600) = v15.i32[0];
            *(_DWORD *)(a2 + 2240) = v16.i32[0];
          }
          else if ((v54 & 0x100) != 0)
          {
            *(_DWORD *)(a2 + 324) = a14.i32[1];
            *(_DWORD *)(a2 + 964) = v14.i32[1];
            *(_DWORD *)(a2 + 1604) = v15.i32[1];
            *(_DWORD *)(a2 + 2244) = v16.i32[1];
          }
          if ((v54 & 0x10000) != 0)
          {
            *(_DWORD *)(a2 + 328) = a14.i32[2];
            *(_DWORD *)(a2 + 968) = v14.i32[2];
            *(_DWORD *)(a2 + 1608) = v15.i32[2];
            *(_DWORD *)(a2 + 2248) = v16.i32[2];
          }
        }
        if (v59)
        {
          if ((unsigned __int16)v59 == 257)
          {
            *(void *)(a2 + 336) = _Q26.i64[0];
            *(void *)(a2 + 976) = _Q25.i64[0];
            *(void *)(a2 + 1616) = _Q24.i64[0];
            *(void *)(a2 + 2256) = _Q23.i64[0];
          }
          else if (v59)
          {
            *(_DWORD *)(a2 + 336) = _Q26.i32[0];
            *(_DWORD *)(a2 + 976) = _Q25.i32[0];
            *(_DWORD *)(a2 + 1616) = _Q24.i32[0];
            *(_DWORD *)(a2 + 2256) = _Q23.i32[0];
          }
          else if ((v59 & 0x100) != 0)
          {
            *(_DWORD *)(a2 + 340) = _Q26.i32[1];
            *(_DWORD *)(a2 + 980) = _Q25.i32[1];
            *(_DWORD *)(a2 + 1620) = _Q24.i32[1];
            *(_DWORD *)(a2 + 2260) = _Q23.i32[1];
          }
          if ((v59 & 0x10000) != 0)
          {
            *(_DWORD *)(a2 + 344) = _Q26.i32[2];
            *(_DWORD *)(a2 + 984) = _Q25.i32[2];
            *(_DWORD *)(a2 + 1624) = _Q24.i32[2];
            *(_DWORD *)(a2 + 2264) = _Q23.i32[2];
          }
        }
        if (v61)
        {
          if (v142 == 257)
          {
            *(void *)(a2 + 336) = v20.i64[0];
            *(void *)(a2 + 976) = v19.i64[0];
            *(void *)(a2 + 1616) = v18.i64[0];
            *(void *)(a2 + 2256) = v17.i64[0];
          }
          else if (v61)
          {
            *(_DWORD *)(a2 + 336) = v20.i32[0];
            *(_DWORD *)(a2 + 976) = v19.i32[0];
            *(_DWORD *)(a2 + 1616) = v18.i32[0];
            *(_DWORD *)(a2 + 2256) = v17.i32[0];
          }
          else if ((v61 & 0x100) != 0)
          {
            *(_DWORD *)(a2 + 340) = v20.i32[1];
            *(_DWORD *)(a2 + 980) = v19.i32[1];
            *(_DWORD *)(a2 + 1620) = v18.i32[1];
            *(_DWORD *)(a2 + 2260) = v17.i32[1];
          }
          if ((v61 & 0x10000) != 0)
          {
            *(_DWORD *)(a2 + 344) = v20.i32[2];
            *(_DWORD *)(a2 + 984) = v19.i32[2];
            *(_DWORD *)(a2 + 1624) = v18.i32[2];
            *(_DWORD *)(a2 + 2264) = v17.i32[2];
          }
        }
        if (v60)
        {
          if ((unsigned __int16)v60 == 257)
          {
            *(void *)(a2 + 336) = a14.i64[0];
            *(void *)(a2 + 976) = v14.i64[0];
            *(void *)(a2 + 1616) = v15.i64[0];
            *(void *)(a2 + 2256) = v16.i64[0];
          }
          else if (v60)
          {
            *(_DWORD *)(a2 + 336) = a14.i32[0];
            *(_DWORD *)(a2 + 976) = v14.i32[0];
            *(_DWORD *)(a2 + 1616) = v15.i32[0];
            *(_DWORD *)(a2 + 2256) = v16.i32[0];
          }
          else if ((v60 & 0x100) != 0)
          {
            *(_DWORD *)(a2 + 340) = a14.i32[1];
            *(_DWORD *)(a2 + 980) = v14.i32[1];
            *(_DWORD *)(a2 + 1620) = v15.i32[1];
            *(_DWORD *)(a2 + 2260) = v16.i32[1];
          }
          if ((v60 & 0x10000) != 0)
          {
            *(_DWORD *)(a2 + 344) = a14.i32[2];
            *(_DWORD *)(a2 + 984) = v14.i32[2];
            *(_DWORD *)(a2 + 1624) = v15.i32[2];
            *(_DWORD *)(a2 + 2264) = v16.i32[2];
          }
        }
      }
      a2 += 2560;
      ++v33;
    }
    while (a2 < v22);
  }
  return result;
}

uint64_t gleBuildPrimitiveRenderFunc(uint64_t result, unsigned int a2)
{
  int v2 = (unsigned char *)(result + 14890);
  int v3 = *(_DWORD *)(result + 28676);
  if (!v3)
  {
    int v5 = *(unsigned __int16 *)(result + 29830);
    if (v5 != 7168)
    {
      int v6 = -2146434048;
      *(unsigned char *)(result + 28748) = *(unsigned __int16 *)(result + 15528) == 2305;
      if (v5 == 7169)
      {
        if (*(unsigned char *)(result + 17701))
        {
          int v6 = -2145909760;
        }
        else if (!*(unsigned char *)(result + 15534))
        {
          if (*(unsigned __int16 *)(result + 15524) == *(unsigned __int16 *)(result + 15526)) {
            int v6 = -2147482624;
          }
          else {
            int v6 = -2146434048;
          }
        }
      }
      else
      {
        int v6 = -2146433024;
        if (!*(unsigned char *)(result + 15534)) {
          int v6 = -2147481600;
        }
      }
      goto LABEL_49;
    }
    uint64_t v8 = *(void *)(result + 28960);
    if (!v8) {
      goto LABEL_14;
    }
    int v9 = *(_DWORD *)(v8 + 488);
    int v10 = **(_DWORD **)(result + 29032);
    if (v9)
    {
      if ((v10 & 0x10) == 0)
      {
LABEL_14:
        BOOL v11 = *(unsigned __int16 *)(result + 15528) == 2305;
LABEL_20:
        *(unsigned char *)(result + 28748) = v11;
        if (*(void *)(result + 26280)) {
          unsigned int v12 = -2147352576;
        }
        else {
          unsigned int v12 = 0x80000000;
        }
        if (*(unsigned char *)(result + 17701)) {
          int v6 = v12 | 0x180000;
        }
        else {
          int v6 = v12;
        }
        if (!*(unsigned char *)(result + 15538))
        {
          if (((int v13 = *(unsigned __int16 *)(result + 15524), v13 == 6913) || *(_WORD *)(result + 15526) == 6913)
            && *(unsigned char *)(result + 15536)
            || (v13 == 6912 || *(_WORD *)(result + 15526) == 6912) && *(unsigned char *)(result + 15535))
          {
            v6 |= 0x300000u;
          }
        }
        if ((*(unsigned char *)(result + 24864) & 0x10) != 0)
        {
          uint64_t v14 = *(void *)(result + 24768);
          if (v14)
          {
            if ((*(unsigned char *)(v14 + 3529) & 4) != 0) {
              goto LABEL_45;
            }
          }
          else if ((*(unsigned char *)(*(void *)(*(void *)(result + 24776) + 72) + 3529) & 4) != 0)
          {
            goto LABEL_45;
          }
        }
        int v15 = *(_DWORD *)(result + 15644);
        if ((v15 & 0x74) == 0 || (v15 & 1) == 0)
        {
LABEL_46:
          if ((v6 & 0x100000) == 0 && *(unsigned __int16 *)(result + 15524) != *(unsigned __int16 *)(result + 15526)) {
            v6 |= 0x100000u;
          }
LABEL_49:
          int v16 = *(unsigned __int8 *)(result + 15534);
          if (*(unsigned char *)(result + 15534)) {
            char v17 = *(unsigned __int16 *)(result + 15530) == 1028;
          }
          else {
            char v17 = 2;
          }
          *(unsigned char *)(result + 28750) = v17;
          *(unsigned char *)(result + 28669) = 0;
          int v18 = *(unsigned __int8 *)(result + 15538);
          if (*(unsigned char *)(result + 15538)) {
            int v19 = v6;
          }
          else {
            int v19 = v6 | 0x800000;
          }
          if (*(void *)(result + 24480)
            || *(unsigned char *)(result + 24756)
            || (int v20 = *(_DWORD *)(result + 24864), (v20 & 1) != 0))
          {
            int v20 = *(_DWORD *)(result + 24864);
            if ((v20 & 8) != 0) {
              int v24 = 544;
            }
            else {
              int v24 = 512;
            }
            int v23 = v24 | v19;
            if (v16
              && v5 == 7168
              && (v19 & 0x100000) == 0
              && (!*(unsigned char *)(result + 15538) || !*(unsigned char *)(*(void *)(result + 29032) + 100)))
            {
              v23 |= 0x100000u;
            }
            goto LABEL_91;
          }
          if (v5 != 7169)
          {
            if (v5 != 7168)
            {
              if (*(unsigned char *)(result + 28744)) {
                int v23 = v19 | 0x4000;
              }
              else {
                int v23 = v19;
              }
              goto LABEL_91;
            }
            int v21 = *v2;
            if (*v2)
            {
              v19 |= 0x100u;
              *(unsigned char *)(result + 28669) = 1;
            }
            if (v16
              && (v19 & 0x100000) == 0
              && ((v19 & 0x100) != 0 || !v18 || !*(unsigned char *)(*(void *)(result + 29032) + 100)))
            {
              v19 |= 0x100000u;
            }
            int v22 = *(_DWORD *)(result + 23788);
            int v23 = v19 | 0x80;
            if (!v22) {
              int v23 = v19;
            }
            if (v21 && *(_DWORD *)(result + 1448)
              || *(unsigned char *)(result + 19234)
              || *(unsigned char *)(result + 17699)
              || *(unsigned char *)(result + 17697)
              || *(unsigned char *)(result + 28744)
              || *(unsigned char *)(result + 15378)
              || ((*(_DWORD *)(result + 23796) | *(_DWORD *)(result + 23792) | *(_DWORD *)(result + 23804)) & v22) != 0)
            {
              v23 |= 0x4000u;
            }
            if (!v21 && ((*(_DWORD *)(result + 23800) | *(_DWORD *)(result + 23804)) & v22) == 0)
            {
LABEL_91:
              if ((v23 & 0xC00) != 0) {
                goto LABEL_111;
              }
              if ((v20 & 0x10) != 0)
              {
                uint64_t v28 = *(void *)(result + 24768);
                if (!v28) {
                  uint64_t v28 = *(void *)(*(void *)(result + 24776) + 72);
                }
                float32x4_t v26 = (void *)(v28 + 3528);
                uint64_t v27 = (uint64_t *)(v28 + 3536);
              }
              else
              {
                if (!*(unsigned char *)(result + 24760))
                {
                  uint64_t v29 = 0;
                  BOOL v31 = 1;
                  goto LABEL_102;
                }
                uint64_t v25 = *(void *)(result + 24432);
                float32x4_t v26 = (void *)(v25 + 152);
                uint64_t v27 = (uint64_t *)(v25 + 160);
              }
              uint64_t v29 = *v27;
              uint64_t v30 = *v26 & 0x800;
              BOOL v31 = v30 == 0;
              if ((v23 & 0x20) == 0 && v30)
              {
                v23 |= 0x4000040u;
LABEL_104:
                if ((v23 & 0x60) == 0x20) {
                  v23 |= 0x40u;
                }
                if (*(_DWORD *)(result + 15592) == 7424) {
                  v23 |= 0x8000040u;
                }
                if ((v23 & 0x40) != 0 && *(_DWORD *)(result + 17704) == 36429) {
                  v23 |= 0x10u;
                }
LABEL_111:
                if (*(unsigned char *)(result + 28744)) {
                  v23 |= 0x10000u;
                }
                uint64_t v32 = *(void *)(result + 26432);
                if (*(__int16 *)(v32 + 42) == -1 || *(unsigned char *)(v32 + 41))
                {
                  if (*(void *)(result + 25960)) {
                    v23 |= 8u;
                  }
                }
                else
                {
                  v23 |= 0x1000u;
                }
                if (*(unsigned char *)(result + 17984)) {
                  int v33 = v23 | 0x2000;
                }
                else {
                  int v33 = v23;
                }
                if (*(_WORD *)(result + 15302) == 4353) {
                  v33 |= 0x1000000u;
                }
                BOOL v34 = (v33 & 0x100000) == 0 || v16 == 0;
                int v3 = v33 | 0x400000;
                if (v34) {
                  int v3 = v33;
                }
                *(_DWORD *)(result + 28676) = v3;
                if ((v3 & 2) == 0) {
                  goto LABEL_3;
                }
                goto LABEL_129;
              }
LABEL_102:
              if ((v29 & ((unint64_t)~v29 >> 32)) != 0 || !v31) {
                v23 |= 0x40u;
              }
              goto LABEL_104;
            }
LABEL_186:
            v23 |= 0x8000u;
            goto LABEL_91;
          }
          int v41 = *v2;
          if (*v2)
          {
            int v23 = v19 | 0x180;
            *(unsigned char *)(result + 28669) = 1;
            if (*(_DWORD *)(result + 1448)) {
              goto LABEL_183;
            }
          }
          else
          {
            int v23 = v19 | 0x80;
          }
          if (!*(unsigned char *)(result + 19234)
            && !*(unsigned char *)(result + 17699)
            && !*(unsigned char *)(result + 17697)
            && !*(unsigned char *)(result + 28744)
            && !*(unsigned char *)(result + 15378)
            && ((*(_DWORD *)(result + 23796) | *(_DWORD *)(result + 23792) | *(_DWORD *)(result + 23804)) & *(_DWORD *)(result + 23788)) == 0)
          {
LABEL_184:
            if (!v41
              && ((*(_DWORD *)(result + 23800) | *(_DWORD *)(result + 23804)) & *(_DWORD *)(result + 23788)) == 0)
            {
              goto LABEL_91;
            }
            goto LABEL_186;
          }
LABEL_183:
          v23 |= 0x4000u;
          goto LABEL_184;
        }
LABEL_45:
        v6 |= 0x2100000u;
        goto LABEL_46;
      }
    }
    else if ((v10 & 0x20) == 0)
    {
      goto LABEL_14;
    }
    BOOL v11 = *(unsigned __int16 *)(result + 15528) != 2305;
    goto LABEL_20;
  }
  if ((v3 & 2) == 0)
  {
LABEL_3:
    if ((v3 & 0x20) == 0)
    {
      unsigned int v4 = a2;
      if (a2 < 4) {
        goto LABEL_146;
      }
      goto LABEL_143;
    }
    uint64_t v7 = *(void *)(result + 24768);
    goto LABEL_138;
  }
LABEL_129:
  uint64_t v7 = *(void *)(result + 24768);
  if (v7)
  {
    if ((v3 & 0x20) != 0)
    {
      if (a2 == 2) {
        v3 |= 0x40000u;
      }
LABEL_142:
      unsigned int v4 = *(_DWORD *)(v7 + 3900);
      if (v4 < 4) {
        goto LABEL_146;
      }
      goto LABEL_143;
    }
  }
  else
  {
    if ((v3 & 0x20) != 0)
    {
LABEL_138:
      if (a2 == 2) {
        v3 |= 0x40000u;
      }
      if (!v7) {
        uint64_t v7 = *(void *)(*(void *)(result + 24776) + 64);
      }
      goto LABEL_142;
    }
    uint64_t v7 = *(void *)(*(void *)(result + 24776) + 56);
  }
  if (*(unsigned char *)(v7 + 3888))
  {
    unsigned int v4 = 0;
    goto LABEL_146;
  }
  unsigned int v4 = *(unsigned __int16 *)(v7 + 3882);
  if (v4 == 7) {
    unsigned int v4 = 4;
  }
  if (v4 == 36474) {
    unsigned int v4 = 1;
  }
  if (v4 >= 4)
  {
LABEL_143:
    if (*(unsigned char *)(result + 15534) && *(_WORD *)(result + 15530) == 1032) {
      v3 |= 0x2000u;
    }
  }
LABEL_146:
  int v35 = v3 & 0x4322B;
  if ((v3 & 0x1008) == 0) {
    int v35 = v3 & 0x2000;
  }
  if ((v3 & 0x2000) == 0) {
    int v35 = v3;
  }
  int v36 = (v4 << 12) | (a2 << 8) | (*(__int16 *)(result + 26124) >> 2);
  switch(v4)
  {
    case 0u:
      v35 &= 0xF707FFAF;
      uint64_t v37 = result + 32 * a2;
      int v38 = gleLLVMVecPrimPointRender;
      goto LABEL_158;
    case 1u:
    case 2u:
    case 3u:
    case 0xAu:
    case 0xBu:
      if ((v35 & 0x100) != 0) {
        int v39 = -16252929;
      }
      else {
        int v39 = -150470657;
      }
      v35 &= v39;
      uint64_t v37 = result + 32 * a2;
      int v38 = gleLLVMVecPrimLineRender;
      goto LABEL_158;
    case 4u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
    case 0xCu:
    case 0xDu:
      if ((v35 & 0x80100) == 0) {
        v35 &= ~0x8000000u;
      }
      uint64_t v37 = result + 32 * a2;
      int v38 = gleLLVMVecPrimMultiRender;
      goto LABEL_158;
    case 9u:
      if ((v35 & 0x80100) == 0) {
        v35 &= ~0x8000000u;
      }
      uint64_t v37 = result + 32 * a2;
      int v38 = gleLLVMVecPrimPolyRender;
LABEL_158:
      *(void *)(v37 + 28160) = v38;
      *(void *)(v37 + 28168) = v38;
      uint64_t v40 = v37 + 28160;
      *(_DWORD *)(v40 + 24) = v35;
      *(_DWORD *)(v40 + 28) = v36;
      *(void *)(result + 28144) = v38;
      break;
    default:
      *(void *)(result + 28144) = *(void *)(result + 32 * a2 + 28160);
      break;
  }
  return result;
}

uint64_t gleBeginPointsRunRender(uint64_t result)
{
  *(unsigned char *)(result + 28668) = 0;
  *(void *)(result + 28152) = gleFlushAtomicFunc;
  *(void *)(result + 28144) = *(void *)(result + 28160);
  *(void *)(result + 26008) = *(void *)(result + 26000);
  *(_DWORD *)(result + 28672) = 0;
  return result;
}

uint64_t gleBeginLinesRunRender(uint64_t result)
{
  *(unsigned char *)(result + 28668) = 0;
  *(void *)(result + 28152) = gleFlushAtomicFunc;
  *(void *)(result + 28144) = *(void *)(result + 28192);
  *(void *)(result + 26008) = *(void *)(result + 26000);
  *(_DWORD *)(result + 28672) = 0;
  return result;
}

uint64_t gleBeginLineLoopRunRender(uint64_t result)
{
  *(unsigned char *)(result + 28668) = 0;
  *(void *)(result + 28152) = gleFlushLineLoopFunc;
  *(void *)(result + 28144) = *(void *)(result + 28224);
  *(void *)(result + 26008) = *(void *)(result + 26000);
  *(_DWORD *)(result + 28672) = 0;
  return result;
}

uint64_t gleBeginLineStripRunRender(uint64_t result)
{
  *(unsigned char *)(result + 28668) = 0;
  *(void *)(result + 28152) = gleFlushLineStripFunc;
  *(void *)(result + 28144) = *(void *)(result + 28256);
  *(void *)(result + 26008) = *(void *)(result + 26000);
  *(_DWORD *)(result + 28672) = 0;
  return result;
}

uint64_t gleBeginTrianglesRunRender(uint64_t result)
{
  *(unsigned char *)(result + 28668) = 0;
  *(void *)(result + 28152) = gleFlushAtomicFunc;
  *(void *)(result + 28144) = *(void *)(result + 28288);
  *(void *)(result + 26008) = *(void *)(result + 26000);
  *(_DWORD *)(result + 28672) = 0;
  return result;
}

uint64_t gleBeginTriangleStripRunRender(uint64_t result)
{
  *(unsigned char *)(result + 28668) = 0;
  *(void *)(result + 28152) = gleFlushTriQuadStripFunc;
  *(void *)(result + 28144) = *(void *)(result + 28320);
  *(void *)(result + 26008) = *(void *)(result + 26000);
  *(_DWORD *)(result + 28672) = 0;
  return result;
}

uint64_t gleBeginTriangleFanRunRender(uint64_t result)
{
  *(unsigned char *)(result + 28668) = 0;
  *(void *)(result + 28152) = gleFlushTriangleFanFunc;
  *(void *)(result + 28144) = *(void *)(result + 28352);
  *(void *)(result + 26008) = *(void *)(result + 26000);
  *(_DWORD *)(result + 28672) = 0;
  return result;
}

uint64_t gleBeginQuadsRunRender(uint64_t result)
{
  *(unsigned char *)(result + 28668) = 0;
  *(void *)(result + 28152) = gleFlushAtomicFunc;
  *(void *)(result + 28144) = *(void *)(result + 28384);
  *(void *)(result + 26008) = *(void *)(result + 26000);
  *(_DWORD *)(result + 28672) = 0;
  return result;
}

uint64_t gleBeginQuadStripRunRender(uint64_t result)
{
  *(unsigned char *)(result + 28668) = 0;
  *(void *)(result + 28152) = gleFlushTriQuadStripFunc;
  *(void *)(result + 28144) = *(void *)(result + 28416);
  *(void *)(result + 26008) = *(void *)(result + 26000);
  *(_DWORD *)(result + 28672) = 0;
  return result;
}

uint64_t gleBeginPolygonRunRender(uint64_t result)
{
  *(unsigned char *)(result + 28668) = 0;
  *(void *)(result + 28152) = gleFlushPolygonFunc;
  *(void *)(result + 28144) = *(void *)(result + 28448);
  *(void *)(result + 26008) = *(void *)(result + 26000);
  *(_DWORD *)(result + 28672) = 0;
  return result;
}

uint64_t gleBeginLinesAdjRunRender(uint64_t result)
{
  *(unsigned char *)(result + 28668) = 0;
  *(void *)(result + 28152) = gleFlushAtomicFunc;
  *(void *)(result + 28144) = *(void *)(result + 28480);
  *(void *)(result + 26008) = *(void *)(result + 26000);
  *(_DWORD *)(result + 28672) = 0;
  return result;
}

uint64_t gleBeginLineStripAdjRunRender(uint64_t result)
{
  *(unsigned char *)(result + 28668) = 0;
  *(void *)(result + 28152) = gleFlushLineStripAdjacencyFunc;
  *(void *)(result + 28144) = *(void *)(result + 28512);
  *(void *)(result + 26008) = *(void *)(result + 26000);
  *(_DWORD *)(result + 28672) = 0;
  return result;
}

uint64_t gleBeginTrianglesAdjRunRender(uint64_t result)
{
  *(unsigned char *)(result + 28668) = 0;
  *(void *)(result + 28152) = gleFlushAtomicFunc;
  *(void *)(result + 28144) = *(void *)(result + 28544);
  *(void *)(result + 26008) = *(void *)(result + 26000);
  *(_DWORD *)(result + 28672) = 0;
  return result;
}

uint64_t gleBeginTriangleStripAdjRunRender(uint64_t result)
{
  *(unsigned char *)(result + 28668) = 0;
  *(void *)(result + 28152) = gleFlushTriangleStripAdjacencyFunc;
  *(void *)(result + 28144) = *(void *)(result + 28576);
  *(void *)(result + 26008) = *(void *)(result + 26000);
  *(_DWORD *)(result + 28672) = 0;
  return result;
}

uint64_t gleBeginPatchesRunRender(uint64_t result)
{
  *(unsigned char *)(result + 28668) = 0;
  *(void *)(result + 28152) = gleFlushPatchesFunc;
  *(void *)(result + 28144) = *(void *)(result + 28608);
  *(void *)(result + 26008) = *(void *)(result + 26000);
  *(_DWORD *)(result + 28672) = 0;
  return result;
}

uint64_t gleBeginPointsRender(void *a1)
{
  int v2 = (char *)a1 + 28668;
  uint64_t result = gleBuildPrimitiveRenderFunc((uint64_t)a1, 0);
  a1[3503] = gleBeginPointsRunRender;
  char *v2 = 0;
  a1[3519] = gleFlushAtomicFunc;
  a1[3518] = a1[3520];
  a1[3251] = a1[3250];
  *((_DWORD *)v2 + 1) = 0;
  return result;
}

uint64_t gleBeginLinesRender(void *a1)
{
  int v2 = (char *)a1 + 28668;
  uint64_t result = gleBuildPrimitiveRenderFunc((uint64_t)a1, 1u);
  a1[3504] = gleBeginLinesRunRender;
  char *v2 = 0;
  a1[3519] = gleFlushAtomicFunc;
  a1[3518] = a1[3524];
  a1[3251] = a1[3250];
  *((_DWORD *)v2 + 1) = 0;
  return result;
}

uint64_t gleBeginLineLoopRender(void *a1)
{
  int v2 = (char *)a1 + 28668;
  uint64_t result = gleBuildPrimitiveRenderFunc((uint64_t)a1, 2u);
  a1[3505] = gleBeginLineLoopRunRender;
  char *v2 = 0;
  a1[3519] = gleFlushLineLoopFunc;
  a1[3518] = a1[3528];
  a1[3251] = a1[3250];
  *((_DWORD *)v2 + 1) = 0;
  return result;
}

uint64_t gleBeginLineStripRender(void *a1)
{
  int v2 = (char *)a1 + 28668;
  uint64_t result = gleBuildPrimitiveRenderFunc((uint64_t)a1, 3u);
  a1[3506] = gleBeginLineStripRunRender;
  char *v2 = 0;
  a1[3519] = gleFlushLineStripFunc;
  a1[3518] = a1[3532];
  a1[3251] = a1[3250];
  *((_DWORD *)v2 + 1) = 0;
  return result;
}

uint64_t gleBeginTrianglesRender(void *a1)
{
  int v2 = (char *)a1 + 28668;
  uint64_t result = gleBuildPrimitiveRenderFunc((uint64_t)a1, 4u);
  a1[3507] = gleBeginTrianglesRunRender;
  char *v2 = 0;
  a1[3519] = gleFlushAtomicFunc;
  a1[3518] = a1[3536];
  a1[3251] = a1[3250];
  *((_DWORD *)v2 + 1) = 0;
  return result;
}

uint64_t gleBeginTriangleStripRender(void *a1)
{
  int v2 = (char *)a1 + 28668;
  uint64_t result = gleBuildPrimitiveRenderFunc((uint64_t)a1, 5u);
  a1[3508] = gleBeginTriangleStripRunRender;
  char *v2 = 0;
  a1[3519] = gleFlushTriQuadStripFunc;
  a1[3518] = a1[3540];
  a1[3251] = a1[3250];
  *((_DWORD *)v2 + 1) = 0;
  return result;
}

uint64_t gleBeginTriangleFanRender(void *a1)
{
  int v2 = (char *)a1 + 28668;
  uint64_t result = gleBuildPrimitiveRenderFunc((uint64_t)a1, 6u);
  a1[3509] = gleBeginTriangleFanRunRender;
  char *v2 = 0;
  a1[3519] = gleFlushTriangleFanFunc;
  a1[3518] = a1[3544];
  a1[3251] = a1[3250];
  *((_DWORD *)v2 + 1) = 0;
  return result;
}

uint64_t gleBeginQuadsRender(void *a1)
{
  int v2 = (char *)a1 + 28668;
  uint64_t result = gleBuildPrimitiveRenderFunc((uint64_t)a1, 7u);
  a1[3510] = gleBeginQuadsRunRender;
  char *v2 = 0;
  a1[3519] = gleFlushAtomicFunc;
  a1[3518] = a1[3548];
  a1[3251] = a1[3250];
  *((_DWORD *)v2 + 1) = 0;
  return result;
}

uint64_t gleBeginQuadStripRender(void *a1)
{
  int v2 = (char *)a1 + 28668;
  uint64_t result = gleBuildPrimitiveRenderFunc((uint64_t)a1, 8u);
  a1[3511] = gleBeginQuadStripRunRender;
  char *v2 = 0;
  a1[3519] = gleFlushTriQuadStripFunc;
  a1[3518] = a1[3552];
  a1[3251] = a1[3250];
  *((_DWORD *)v2 + 1) = 0;
  return result;
}

uint64_t gleBeginPolygonRender(void *a1)
{
  int v2 = (char *)a1 + 28668;
  uint64_t result = gleBuildPrimitiveRenderFunc((uint64_t)a1, 9u);
  a1[3512] = gleBeginPolygonRunRender;
  char *v2 = 0;
  a1[3519] = gleFlushPolygonFunc;
  a1[3518] = a1[3556];
  a1[3251] = a1[3250];
  *((_DWORD *)v2 + 1) = 0;
  return result;
}

uint64_t gleBeginLinesAdjacencyRender(void *a1)
{
  int v2 = (char *)a1 + 28668;
  uint64_t result = gleBuildPrimitiveRenderFunc((uint64_t)a1, 0xAu);
  a1[3513] = gleBeginLinesAdjRunRender;
  char *v2 = 0;
  a1[3519] = gleFlushAtomicFunc;
  a1[3518] = a1[3560];
  a1[3251] = a1[3250];
  *((_DWORD *)v2 + 1) = 0;
  return result;
}

uint64_t gleBeginLineStripAdjacencyRender(void *a1)
{
  int v2 = (char *)a1 + 28668;
  uint64_t result = gleBuildPrimitiveRenderFunc((uint64_t)a1, 0xBu);
  a1[3514] = gleBeginLineStripAdjRunRender;
  char *v2 = 0;
  a1[3519] = gleFlushLineStripAdjacencyFunc;
  a1[3518] = a1[3564];
  a1[3251] = a1[3250];
  *((_DWORD *)v2 + 1) = 0;
  return result;
}

uint64_t gleBeginTrianglesAdjacencyRender(void *a1)
{
  int v2 = (char *)a1 + 28668;
  uint64_t result = gleBuildPrimitiveRenderFunc((uint64_t)a1, 0xCu);
  a1[3515] = gleBeginTrianglesAdjRunRender;
  char *v2 = 0;
  a1[3519] = gleFlushAtomicFunc;
  a1[3518] = a1[3568];
  a1[3251] = a1[3250];
  *((_DWORD *)v2 + 1) = 0;
  return result;
}

uint64_t gleBeginTriangleStripAdjacencyRender(void *a1)
{
  int v2 = (char *)a1 + 28668;
  uint64_t result = gleBuildPrimitiveRenderFunc((uint64_t)a1, 0xDu);
  a1[3516] = gleBeginTriangleStripAdjRunRender;
  char *v2 = 0;
  a1[3519] = gleFlushTriangleStripAdjacencyFunc;
  a1[3518] = a1[3572];
  a1[3251] = a1[3250];
  *((_DWORD *)v2 + 1) = 0;
  return result;
}

uint64_t gleBeginPatchesRender(void *a1)
{
  int v2 = (char *)a1 + 28668;
  uint64_t result = gleBuildPrimitiveRenderFunc((uint64_t)a1, 0xEu);
  a1[3517] = gleBeginPatchesRunRender;
  char *v2 = 0;
  a1[3519] = gleFlushPatchesFunc;
  a1[3518] = a1[3576];
  a1[3251] = a1[3250];
  *((_DWORD *)v2 + 1) = 0;
  return result;
}

uint64_t gleLLVMVecPrimPointRender(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = (unsigned __int16 *)(result + 26124);
  int v4 = *(_DWORD *)(result + 32 * *(__int16 *)(result + 28662) + 28184);
  unsigned int v3 = *(_DWORD *)(result + 32 * *(__int16 *)(result + 28662) + 28188);
  *(void *)(result + 28144) = *(void *)(result + 32 * *(__int16 *)(result + 28662) + 28160);
  if ((v4 & 0x40000) != 0 && *(__int16 *)(result + 28660) < 0)
  {
    uint64_t v5 = *(void *)(result + 26000);
    uint64_t v6 = *(void *)(result + 26008);
    if (v6 != v5)
    {
      if (*(unsigned char *)(result + 28668)) {
        uint64_t v7 = -1;
      }
      else {
        uint64_t v7 = 0;
      }
      if ((__int16)*v2 >= 8)
      {
        unint64_t v8 = (unint64_t)*v2 >> 3;
        if (*v2 >= 0x40u)
        {
          unint64_t v9 = 0;
          uint64_t v10 = -640;
          if (!*(unsigned char *)(result + 28668)) {
            uint64_t v10 = 0;
          }
          if ((unint64_t)(v6 - v5 - v10) >= 0x20)
          {
            unint64_t v9 = v8 & 0x1FFC;
            BOOL v11 = (long long *)(v5 + 640 * v7 + 16);
            unsigned int v12 = (_OWORD *)(v6 + 16);
            unint64_t v13 = v9;
            do
            {
              long long v14 = *v11;
              *(v12 - 1) = *(v11 - 1);
              *unsigned int v12 = v14;
              v11 += 2;
              v12 += 2;
              v13 -= 4;
            }
            while (v13);
            if (v9 == v8) {
              goto LABEL_18;
            }
          }
        }
        else
        {
          unint64_t v9 = 0;
        }
        unint64_t v15 = v8 - v9;
        uint64_t v16 = 8 * v9;
        char v17 = (void *)(v6 + 8 * v9);
        int v18 = (uint64_t *)(v5 + v16 + 640 * v7);
        do
        {
          uint64_t v19 = *v18++;
          *v17++ = v19;
          --v15;
        }
        while (v15);
      }
LABEL_18:
      *(void *)(result + 26008) = v6 + 4 * v3;
    }
  }
  if ((v4 & 0x3008) == 0x2000) {
    goto LABEL_87;
  }
  int v20 = (unsigned __int8 *)(result + 17724);
  uint64_t v21 = *(void *)(result + 26000);
  unint64_t v22 = (*(void *)(result + 26008) - v21) / (4 * v3);
  switch((v3 >> 8) & 0xF)
  {
    case 1u:
      goto LABEL_36;
    case 3u:
      if ((int)v22 <= 1) {
        goto LABEL_87;
      }
      goto LABEL_38;
    case 4u:
      unint64_t v22 = (3 * ((int)v22 / 3));
      if ((int)v22 < 1) {
        goto LABEL_87;
      }
      goto LABEL_38;
    case 5u:
    case 6u:
    case 9u:
      if ((int)v22 <= 2) {
        goto LABEL_87;
      }
      goto LABEL_38;
    case 7u:
    case 0xAu:
      unint64_t v22 = ((*(void *)(result + 26008) - v21) / (4 * v3)) & 0xFFFFFFFCLL;
      if ((int)v22 < 1) {
        goto LABEL_87;
      }
      goto LABEL_38;
    case 8u:
      if ((int)v22 <= 3) {
        goto LABEL_87;
      }
      goto LABEL_36;
    case 0xBu:
      if ((int)v22 <= 3) {
        goto LABEL_87;
      }
      goto LABEL_38;
    case 0xCu:
      unint64_t v22 = (6 * ((int)v22 / 6));
      if ((int)v22 < 1) {
        goto LABEL_87;
      }
      goto LABEL_38;
    case 0xDu:
      if ((int)v22 <= 5) {
        goto LABEL_87;
      }
LABEL_36:
      unint64_t v22 = ((*(void *)(result + 26008) - v21) / (4 * v3)) & 0xFFFFFFFELL;
LABEL_37:
      if ((int)v22 < 1) {
        goto LABEL_87;
      }
LABEL_38:
      if ((v4 & 0x200) != 0)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, void, unint64_t))(result + 24200))(result, *(void *)(result + 26000), v22);
        unsigned int v23 = result;
        uint64_t v21 = *(void *)(v1 + 26032);
        int v24 = (unsigned __int16)v3 >> 12;
        if ((v4 & 0x20) != 0) {
          goto LABEL_40;
        }
LABEL_45:
        if ((v4 & 8) == 0) {
          goto LABEL_82;
        }
        uint64_t v25 = (int *)(v1 + 26116);
        uint64_t v27 = (uint64_t *)(v1 + 26080);
        float32x4_t v26 = (_DWORD *)(v1 + 25976);
        goto LABEL_47;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, void, unint64_t))(result + 20096))(result, *(void *)(result + 26000), v22);
      unsigned int v23 = result;
      int v24 = (unsigned __int16)v3 >> 12;
      if ((v4 & 0x20) == 0) {
        goto LABEL_45;
      }
LABEL_40:
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v1 + 24352))(v1, v21, v22);
      unsigned int v23 = result;
      if ((v4 & 8) == 0 || *(int *)(v1 + 26116) < 1) {
        goto LABEL_82;
      }
      uint64_t v25 = (int *)(v1 + 26116);
      float32x4_t v26 = (_DWORD *)(v1 + 25976);
      uint64_t v27 = (uint64_t *)(v1 + 26080);
      uint64_t v28 = *(uint64_t **)(v1 + 26080);
      uint64_t v21 = *v28;
      unint64_t v22 = (v28[1] - *v28) / 0x280uLL;
      if ((int)v22 < 1) {
        goto LABEL_63;
      }
LABEL_47:
      unsigned int v29 = v22;
      switch(v24)
      {
        case 1:
          unsigned int v29 = v22 >> 1;
          break;
        case 3:
          unsigned int v29 = v22 - 1;
          break;
        case 4:
          unsigned int v29 = v22 / 3;
          break;
        case 5:
        case 6:
        case 9:
          unsigned int v29 = v22 - 2;
          break;
        case 7:
        case 10:
          unsigned int v29 = v22 >> 2;
          break;
        case 8:
          int v31 = v22 - 2;
          BOOL v30 = (int)v22 < 2;
          int v32 = v22 - 1;
          goto LABEL_59;
        case 11:
          unsigned int v29 = v22 - 3;
          break;
        case 12:
          unsigned int v29 = v22 / 6;
          break;
        case 13:
          int v31 = v22 - 4;
          BOOL v30 = (int)v22 < 4;
          int v32 = v22 - 3;
LABEL_59:
          if (v30) {
            int v31 = v32;
          }
          unsigned int v29 = v31 >> 1;
          break;
        default:
          break;
      }
      *v26 += v29;
      if ((v4 & 0x20) != 0)
      {
LABEL_63:
        uint64_t v33 = *v25;
        if ((int)v33 > 1)
        {
          uint64_t v34 = 0;
          uint64_t v35 = *v27;
          do
          {
            uint64_t v38 = v35 + 8 * v34;
            uint64_t v21 = *(void *)(v38 + 8);
            unint64_t v22 = (*(void *)(v38 + 16) - v21) / 0x280uLL;
            uint64_t result = (v22 - 1);
            if ((int)v22 >= 1)
            {
              unint64_t v36 = (*(void *)(v38 + 16) - v21) / 0x280uLL;
              switch(v24)
              {
                case 1:
                  LODWORD(v36) = v22 >> 1;
                  break;
                case 3:
                  LODWORD(v36) = v22 - 1;
                  break;
                case 4:
                  LODWORD(v36) = v22 / 3;
                  break;
                case 5:
                case 6:
                case 9:
                  LODWORD(v36) = v22 - 2;
                  break;
                case 7:
                case 10:
                  LODWORD(v36) = v22 >> 2;
                  break;
                case 8:
                  int v39 = v22 - 2;
                  if ((int)v22 < 2) {
                    int v39 = v22 - 1;
                  }
                  goto LABEL_81;
                case 11:
                  LODWORD(v36) = v22 - 3;
                  break;
                case 12:
                  LODWORD(v36) = v22 / 6;
                  break;
                case 13:
                  int v39 = v22 - 4;
                  if ((int)v22 < 4) {
                    int v39 = v22 - 3;
                  }
LABEL_81:
                  LODWORD(v36) = v39 >> 1;
                  break;
                default:
                  break;
              }
              *v26 += v36;
            }
            uint64_t v37 = v34 + 2;
            ++v34;
          }
          while (v37 < v33);
        }
      }
LABEL_82:
      if ((v4 & 0x2000) == 0)
      {
        if ((v4 & 0x1000000) == 0 && v23 >= 0x100)
        {
          if ((v4 & 0x4000000) != 0) {
            *((_DWORD *)v2 + 637) += v22;
          }
          goto LABEL_87;
        }
        if ((v4 & 0x4000) != 0)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v1 + 20112))(v1, v21, v22);
          if ((v4 & 0x8000) == 0)
          {
LABEL_97:
            if ((v4 & 0x80) == 0) {
              goto LABEL_98;
            }
            goto LABEL_102;
          }
        }
        else if ((v4 & 0x8000) == 0)
        {
          goto LABEL_97;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v1 + 20128))(v1, v21, v22);
        if ((v4 & 0x80) == 0)
        {
LABEL_98:
          if ((v4 & 0x4000000) == 0) {
            goto LABEL_114;
          }
          goto LABEL_103;
        }
LABEL_102:
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v1 + 20144))(v1, v21, v22);
        if ((v4 & 0x4000000) == 0)
        {
LABEL_114:
          uint64_t v52 = 0;
          BOOL v53 = (v4 & 0x1000000) == 0;
          if (!(_BYTE)v23) {
            BOOL v53 = 0;
          }
          uint64_t v54 = 26064;
          if ((v4 & 0x20) == 0) {
            uint64_t v54 = 26088;
          }
          float32x4_t v74 = v2;
          uint64_t v75 = v54;
          char v55 = (v4 & 0x10C00) != 0 || v53;
          char v73 = v55;
          while (1)
          {
            if ((v4 & 0x20) != 0)
            {
              if (v52 >= *((int *)v20 + 2098)) {
                goto LABEL_87;
              }
              int v56 = (uint64_t *)(*(void *)(v1 + 26080) + 8 * v52);
              uint64_t v21 = *v56;
              unint64_t v22 = (v56[1] - *v56) / 0x280uLL;
              if ((int)v22 >= 1) {
                goto LABEL_129;
              }
LABEL_123:
              ++v52;
            }
            else
            {
              if (v52) {
                goto LABEL_87;
              }
LABEL_129:
              if (v55)
              {
                unsigned int v57 = *(uint64_t **)(v1 + v75);
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t *))(v1 + 464))(v1, v21, v22, v57);
                unint64_t v22 = result;
                if (!result) {
                  goto LABEL_123;
                }
                if ((v4 & 0x10000) != 0)
                {
                  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v1 + 488))(v1, v57, result);
                  unint64_t v22 = result;
                  if (!result) {
                    goto LABEL_123;
                  }
                }
                if ((v4 & 0x100) != 0) {
                  (*(void (**)(uint64_t, uint64_t *, unint64_t))(v1 + 20192))(v1, v57, v22);
                }
                if ((v4 & 0x400) != 0)
                {
                  uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t *, unint64_t))(v1 + 19240))(v1, v57, v22);
                  goto LABEL_123;
                }
                if ((v4 & 0x800) != 0)
                {
                  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, unint64_t))(*(void *)(v1 + 19240)
                                                                                           + 8))(v1, v57, v22);
                  goto LABEL_123;
                }
                if ((v4 & 0x20000) == 0)
                {
                  uint64_t result = (*(uint64_t (**)(void, uint64_t *, unint64_t))(v1 + 29176))(*(void *)(v1 + 29016), v57, v22);
                  goto LABEL_123;
                }
                uint64_t v66 = (__int16)v2[4];
                int v67 = v22;
                do
                {
                  int v77 = 0;
                  uint64_t v68 = (*(uint64_t (**)(void, void, int *))(v1 + 29200))(*(void *)(v1 + 29016), 0, &v77);
                  unint64_t v69 = v68;
                  int v70 = v77;
                  if (v77 > v67)
                  {
                    int v77 = v67;
                    int v70 = v67;
                  }
                  unint64_t v71 = v68 + (int)v66 * (uint64_t)v70;
                  do
                  {
                    uint64_t v72 = *v57++;
                    (*(void (**)(uint64_t, uint64_t, unint64_t))(v1 + 26168))(v1, v72, v69);
                    v69 += v66;
                  }
                  while (v69 < v71);
                  v67 -= v77;
                  uint64_t result = (*(uint64_t (**)(void, void, void))(v1 + 29208))(*(void *)(v1 + 29016), 0, 0);
                }
                while (v67);
LABEL_149:
                int v20 = (unsigned __int8 *)(v1 + 17724);
                int v2 = v74;
                char v55 = v73;
                ++v52;
              }
              else
              {
                if ((v4 & 0x100) != 0) {
                  (*(void (**)(uint64_t, uint64_t, unint64_t))(v1 + 20160))(v1, v21, v22);
                }
                if ((v4 & 0x20000) != 0)
                {
                  uint64_t v58 = (__int16)v2[4];
                  int v59 = v22;
                  uint64_t v60 = v21;
                  do
                  {
                    int v76 = 0;
                    uint64_t v61 = (*(uint64_t (**)(void, void, int *))(v1 + 29200))(*(void *)(v1 + 29016), 0, &v76);
                    unint64_t v62 = v61;
                    int v63 = v76;
                    if (v76 > v59)
                    {
                      int v76 = v59;
                      int v63 = v59;
                    }
                    unint64_t v64 = v61 + (int)v58 * (uint64_t)v63;
                    do
                    {
                      uint64_t v65 = v60;
                      v60 += 640;
                      (*(void (**)(uint64_t, uint64_t, unint64_t))(v1 + 26168))(v1, v65, v62);
                      v62 += v58;
                    }
                    while (v62 < v64);
                    v59 -= v76;
                    uint64_t result = (*(uint64_t (**)(void, void, void))(v1 + 29208))(*(void *)(v1 + 29016), 0, 0);
                  }
                  while (v59);
                  goto LABEL_149;
                }
                uint64_t result = (*(uint64_t (**)(void, uint64_t, unint64_t, void))(v1 + 29064))(*(void *)(v1 + 29016), v21, v22, 0);
                ++v52;
              }
            }
          }
        }
LABEL_103:
        int v43 = *((_DWORD *)v2 + 637);
        if ((int)v22 <= 1) {
          uint64_t v44 = 1;
        }
        else {
          uint64_t v44 = v22;
        }
        if (v44 >= 2)
        {
          uint64_t v45 = v44 & 0x7FFFFFFE;
          int v46 = *((_DWORD *)v2 + 637);
          uint64_t v47 = v45;
          uint64_t v48 = v21;
          do
          {
            *(_DWORD *)(v48 + 16) = v46;
            *(_DWORD *)(v48 + 656) = v46 + 1;
            v48 += 1280;
            v46 += 2;
            v47 -= 2;
          }
          while (v47);
          if (v45 == v44) {
            goto LABEL_113;
          }
        }
        else
        {
          uint64_t v45 = 0;
        }
        uint64_t v49 = v44 - v45;
        int v50 = (_DWORD *)(v21 + 640 * v45 + 16);
        int v51 = v43 + v45;
        do
        {
          *int v50 = v51;
          v50 += 160;
          ++v51;
          --v49;
        }
        while (v49);
LABEL_113:
        *((_DWORD *)v2 + 637) = v43 + v22;
        goto LABEL_114;
      }
LABEL_87:
      if ((v4 & 0x100) != 0)
      {
        uint64_t v40 = *(void *)(v1 + 1424);
        if (*(void *)(v40 + 512) || (uint64_t v41 = *(void *)(v1 + 1432), *(void *)(v41 + 512)))
        {
          uint64_t v42 = *(void *)(v1 + 19240);
          if ((__int16)v2[1268] < 0) {
            return (*(uint64_t (**)(uint64_t))(v42 + 56))(v1);
          }
          else {
            return (*(uint64_t (**)(uint64_t))(v42 + 48))(v1);
          }
        }
        else
        {
          *(_DWORD *)(v40 + 500) = 0;
          *(_DWORD *)(v41 + 500) = 0;
        }
      }
      return result;
    case 0xEu:
      unint64_t v22 = (int)v22 / *v20 * *v20;
      if ((int)v22 < 1) {
        goto LABEL_87;
      }
      goto LABEL_38;
    default:
      goto LABEL_37;
  }
}

uint64_t gleLLVMVecPrimLineRender(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = (unsigned __int16 *)(result + 26124);
  unsigned int v4 = *(_DWORD *)(result + 32 * *(__int16 *)(result + 28662) + 28184);
  unsigned int v3 = *(_DWORD *)(result + 32 * *(__int16 *)(result + 28662) + 28188);
  *(void *)(result + 28144) = *(void *)(result + 32 * *(__int16 *)(result + 28662) + 28160);
  if ((v4 & 0x40000) == 0) {
    goto LABEL_19;
  }
  if ((*(__int16 *)(result + 28660) & 0x80000000) == 0) {
    goto LABEL_19;
  }
  uint64_t v5 = *(void *)(result + 26000);
  uint64_t v6 = *(void *)(result + 26008);
  if (v6 == v5) {
    goto LABEL_19;
  }
  if (*(unsigned char *)(result + 28668)) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = 0;
  }
  if ((__int16)*v2 >= 8)
  {
    unint64_t v8 = (unint64_t)*v2 >> 3;
    if (*v2 >= 0x40u)
    {
      unint64_t v9 = 0;
      uint64_t v10 = -640;
      if (!*(unsigned char *)(result + 28668)) {
        uint64_t v10 = 0;
      }
      if ((unint64_t)(v6 - v5 - v10) >= 0x20)
      {
        unint64_t v9 = v8 & 0x1FFC;
        BOOL v11 = (long long *)(v5 + 640 * v7 + 16);
        unsigned int v12 = (_OWORD *)(v6 + 16);
        unint64_t v13 = v9;
        do
        {
          long long v14 = *v11;
          *(v12 - 1) = *(v11 - 1);
          *unsigned int v12 = v14;
          v11 += 2;
          v12 += 2;
          v13 -= 4;
        }
        while (v13);
        if (v9 == v8) {
          goto LABEL_18;
        }
      }
    }
    else
    {
      unint64_t v9 = 0;
    }
    unint64_t v15 = v8 - v9;
    uint64_t v16 = 8 * v9;
    char v17 = (void *)(v6 + 8 * v9);
    int v18 = (uint64_t *)(v5 + v16 + 640 * v7);
    do
    {
      uint64_t v19 = *v18++;
      *v17++ = v19;
      --v15;
    }
    while (v15);
  }
LABEL_18:
  *(void *)(result + 26008) = v6 + 4 * v3;
LABEL_19:
  if ((v4 & 0x3008) != 0x2000)
  {
    BOOL v177 = (int *)(result + 17724);
    int v20 = (v3 >> 8) & 0xF;
    uint64_t v21 = *(void *)(result + 26000);
    uint64_t v22 = 4 * v3;
    uint64_t v23 = *(void *)(result + 26008);
    uint64_t v24 = (v23 - v21) / v22;
    switch(v20)
    {
      case 1:
        LODWORD(v24) = v24 & 0xFFFFFFFE;
        break;
      case 3:
        if ((int)v24 <= 1) {
          LODWORD(v24) = 0;
        }
        break;
      case 4:
        LODWORD(v24) = 3 * ((int)v24 / 3);
        break;
      case 5:
      case 6:
      case 9:
        if ((int)v24 <= 2) {
          LODWORD(v24) = 0;
        }
        break;
      case 7:
      case 10:
        LODWORD(v24) = v24 & 0xFFFFFFFC;
        break;
      case 8:
        if ((int)v24 <= 3) {
          LODWORD(v24) = 0;
        }
        else {
          LODWORD(v24) = v24 & 0xFFFFFFFE;
        }
        break;
      case 11:
        if ((int)v24 <= 3) {
          LODWORD(v24) = 0;
        }
        break;
      case 12:
        LODWORD(v24) = 6 * ((int)v24 / 6);
        break;
      case 13:
        if ((int)v24 <= 5) {
          LODWORD(v24) = 0;
        }
        else {
          LODWORD(v24) = v24 & 0xFFFFFFFE;
        }
        break;
      case 14:
        LODWORD(v24) = (int)v24 / *(unsigned __int8 *)v177 * *(unsigned __int8 *)v177;
        break;
      default:
        break;
    }
    BOOL v25 = (v3 & 0xE00) == 2560;
    BOOL v26 = (v4 & 0x20) == 0;
    uint64_t v27 = v26 && v25 ? (_OWORD *)(v21 + v22) : *(_OWORD **)(result + 26000);
    uint64_t v24 = v26 && v25 ? (v24 - 2) : v24;
    if ((int)v24 >= 1)
    {
      unint64_t v28 = v24;
      int v29 = 0;
      if ((v4 & 0x20) == 0 && v20 == 2)
      {
        if ((*(__int16 *)(result + 28660) & 0x80000000) == 0)
        {
          int v29 = 0;
          if ((v4 & 0x200) != 0) {
            goto LABEL_49;
          }
LABEL_75:
          uint64_t result = (*(uint64_t (**)(uint64_t, _OWORD *, unint64_t))(result + 20096))(result, v27, v28);
          uint64_t v30 = result;
          if ((v4 & 0x20) == 0)
          {
LABEL_51:
            int v187 = (unsigned __int16)v3 >> 12;
            if ((v4 & 8) == 0) {
              goto LABEL_116;
            }
            if (v20 == 2) {
              int v31 = v29;
            }
            else {
              int v31 = 1;
            }
            int v32 = (((v4 & 0x20) == 0) & ~v31) << 31 >> 31;
            if ((v4 & 0x20) != 0)
            {
              if (v177[2098] < 1) {
                goto LABEL_116;
              }
              uint64_t v33 = *(void *)(v1 + 26080);
              uint64_t v27 = *(_OWORD **)v33;
              unint64_t v28 = (*(void *)(v33 + 8) - *(void *)v33) / 0x280uLL;
              if ((int)v28 < 2) {
                goto LABEL_92;
              }
            }
            int v34 = v28 + 2;
            if ((v4 & 0x20) != 0) {
              int v34 = v28;
            }
            if ((v3 & 0xE00) != 0xA00) {
              int v34 = v28;
            }
            int v35 = v34 + v32;
            switch((unsigned __int16)v3 >> 12)
            {
              case 1:
                if (v35 < 0) {
                  ++v35;
                }
                goto LABEL_90;
              case 3:
                --v35;
                break;
              case 4:
                int v43 = 1431655766;
                goto LABEL_86;
              case 5:
              case 6:
              case 9:
                v35 -= 2;
                break;
              case 7:
              case 10:
                v35 /= 4;
                break;
              case 8:
                int v45 = v35 - 2;
                BOOL v44 = v35-- < 2;
                goto LABEL_88;
              case 11:
                v35 -= 3;
                break;
              case 12:
                int v43 = 715827883;
LABEL_86:
                int v35 = ((unint64_t)(v35 * (uint64_t)v43) >> 32)
                    + (((unint64_t)(v35 * (uint64_t)v43) >> 32) >> 31);
                break;
              case 13:
                int v45 = v35 - 4;
                BOOL v44 = v35 < 4;
                v35 -= 3;
LABEL_88:
                if (!v44) {
                  int v35 = v45;
                }
LABEL_90:
                v35 >>= 1;
                break;
              default:
                break;
            }
            v177[2063] += v35;
            if ((v4 & 0x20) != 0)
            {
LABEL_92:
              int v46 = v177[2098];
              if (v46 <= 1) {
                uint64_t v47 = 1;
              }
              else {
                uint64_t v47 = v46;
              }
              if (v46 >= 2)
              {
                uint64_t v48 = v47 - 1;
                uint64_t v49 = (void *)(*(void *)(v1 + 26080) + 16);
                do
                {
                  uint64_t v27 = (_OWORD *)*(v49 - 1);
                  unint64_t v28 = (*v49 - (void)v27) / 0x280uLL;
                  if ((int)v28 >= 2)
                  {
                    int v50 = v28 + v32;
                    switch((unsigned __int16)v3 >> 12)
                    {
                      case 1:
                        if (v50 < 0) {
                          ++v50;
                        }
                        goto LABEL_115;
                      case 3:
                        --v50;
                        break;
                      case 4:
                        unint64_t v51 = 1431655766 * v50;
                        goto LABEL_111;
                      case 5:
                      case 6:
                      case 9:
                        v50 -= 2;
                        break;
                      case 7:
                      case 10:
                        v50 /= 4;
                        break;
                      case 8:
                        int v53 = v50 - 2;
                        BOOL v52 = v50-- < 2;
                        goto LABEL_113;
                      case 11:
                        v50 -= 3;
                        break;
                      case 12:
                        unint64_t v51 = 715827883 * v50;
LABEL_111:
                        int v50 = HIDWORD(v51) + (v51 >> 63);
                        break;
                      case 13:
                        int v53 = v50 - 4;
                        BOOL v52 = v50 < 4;
                        v50 -= 3;
LABEL_113:
                        if (!v52) {
                          int v50 = v53;
                        }
LABEL_115:
                        v50 >>= 1;
                        break;
                      default:
                        break;
                    }
                    v177[2063] += v50;
                  }
                  ++v49;
                  --v48;
                }
                while (v48);
              }
            }
LABEL_116:
            if ((v4 & 0x2000) != 0) {
              goto LABEL_339;
            }
            if ((v4 & 0x1000000) == 0 && v30 >= 0x100)
            {
              if ((v4 & 0x4000000) == 0) {
                goto LABEL_339;
              }
              if (v20 == 10)
              {
                int v57 = (int)v28 / 4 + 1;
              }
              else
              {
                if (v20 == 1)
                {
                  if ((v28 & 0x80000000) == 0) {
                    int v54 = v28;
                  }
                  else {
                    int v54 = v28 + 1;
                  }
                  int v55 = v54 >> 1;
                  int v56 = v2 + 1274;
                  int v57 = *((_DWORD *)v2 + 637);
                  goto LABEL_338;
                }
                int v57 = v28 - 1;
              }
              int v56 = v2 + 1274;
              int v55 = *((_DWORD *)v2 + 637);
LABEL_338:
              *int v56 = v57 + v55;
              goto LABEL_339;
            }
            if ((v4 & 0x4000) != 0) {
              uint64_t result = (*(uint64_t (**)(uint64_t, _OWORD *, unint64_t))(v1 + 20112))(v1, v27, v28);
            }
            if ((v4 & 0x8000) != 0) {
              uint64_t result = (*(uint64_t (**)(uint64_t, _OWORD *, unint64_t))(v1 + 20128))(v1, v27, v28);
            }
            uint64_t v190 = (v4 & 0x10) == 0;
            unint64_t v58 = v28;
            if ((v4 & 0x80) != 0) {
              uint64_t result = (*(uint64_t (**)(uint64_t, _OWORD *, unint64_t))(v1 + 20144))(v1, v27, v28);
            }
            int v59 = 0;
            BOOL v60 = (v4 & 0x10C00) != 0 || v187 == 10;
            int v61 = !v60;
            int v176 = v61;
            uint64_t v62 = 26088;
            if ((v4 & 0x20) != 0) {
              uint64_t v62 = 26064;
            }
            uint64_t v175 = v62;
            BOOL v64 = (v3 & 0xE000) != 0x2000 && v187 != 11;
            BOOL v192 = v64;
            if (v187 == 2) {
              int v65 = v29;
            }
            else {
              int v65 = 0;
            }
            char v66 = v187 == 1;
            if (v187 == 1) {
              int v67 = 2;
            }
            else {
              int v67 = 1;
            }
            if (v187 == 1) {
              int v68 = 0;
            }
            else {
              int v68 = -1;
            }
            int v171 = v68;
            int v172 = v67;
            int v173 = v4 & 0x8000100;
            int v174 = v65;
            uint64_t v195 = (v190 << 7) | (v190 << 9);
            int32x4_t v183 = v2;
            uint64_t v69 = v30;
LABEL_157:
            while (2)
            {
              while (2)
              {
                while (2)
                {
                  if ((v4 & 0x20) != 0)
                  {
                    if (v59 >= v177[2098]) {
                      goto LABEL_339;
                    }
                    uint64_t v70 = *(void *)(v1 + 26080) + 8 * v59;
                    uint64_t v27 = *(_OWORD **)v70;
                    unint64_t v188 = (*(void *)(v70 + 8) - *(void *)v70) / 0x280uLL;
                    if ((int)v188 < 2)
                    {
                      unint64_t v58 = (*(void *)(v70 + 8) - *(void *)v70) / 0x280uLL;
                      ++v59;
                      continue;
                    }
                  }
                  else
                  {
                    unint64_t v188 = v58;
                    if (v59 >= 1) {
                      goto LABEL_339;
                    }
                  }
                  break;
                }
                if (!v176 || (v4 & 0x1000000) == 0 && (_BYTE)v69)
                {
                  float32x4_t v193 = *(char **)(v1 + v175);
                  LODWORD(v58) = v188;
                  unint64_t v71 = &v27[40 * (int)v188];
                  int v181 = v59;
                  if (v192)
                  {
                    if (v187 == 10)
                    {
                      if ((v4 & 0x1000000) != 0) {
                        goto LABEL_201;
                      }
                      uint64_t v72 = 4;
                      if ((_BYTE)v69)
                      {
                        if ((int)v188 < 1)
                        {
                          unsigned __int8 v77 = 0;
                        }
                        else
                        {
                          unint64_t v73 = (unint64_t)&v27[40 * (int)v188];
                          if (v73 <= (unint64_t)(v27 + 160)) {
                            unint64_t v73 = (unint64_t)(v27 + 160);
                          }
                          unint64_t v74 = v73 - 2560 - (void)v27;
                          uint64_t v75 = 1;
                          if (v74) {
                            uint64_t v75 = 2;
                          }
                          unint64_t v76 = v75 + (v74 - (v74 != 0)) / 0xA00;
                          if (v76 < 2)
                          {
                            unsigned __int8 v77 = 0;
                            float32x4_t v78 = v27;
                            goto LABEL_199;
                          }
                          char v105 = 0;
                          char v106 = 0;
                          float32x4_t v78 = &v27[160 * (v76 & 0x3FFFFFFFFFFFFELL)];
                          uint64_t v107 = v76 & 0x3FFFFFFFFFFFFELL;
                          float32x4_t v108 = v27;
                          do
                          {
                            v105 |= v108[3] | v108[643];
                            v106 |= v108[2563] | v108[3203];
                            v108 += 5120;
                            v107 -= 2;
                          }
                          while (v107);
                          unsigned __int8 v77 = v106 | v105;
                          if (v76 != (v76 & 0x3FFFFFFFFFFFFELL))
                          {
                            do
                            {
LABEL_199:
                              v77 |= *((unsigned char *)v78 + 3) | *((unsigned char *)v78 + 643);
                              v78 += 160;
                            }
                            while (v78 < v71);
                          }
                        }
                        uint64_t v69 = v77;
LABEL_201:
                        uint64_t v72 = 4;
                      }
                    }
                    else
                    {
                      uint64_t v72 = 2;
                    }
                  }
                  else if (v174)
                  {
                    if (v188)
                    {
                      long long v79 = v27[1];
                      _OWORD *v71 = *v27;
                      v71[1] = v79;
                      long long v80 = v27[3];
                      v71[2] = v27[2];
                      v71[3] = v80;
                      long long v81 = v27[5];
                      v71[4] = v27[4];
                      v71[5] = v81;
                      long long v82 = v27[7];
                      v71[6] = v27[6];
                      v71[7] = v82;
                      long long v83 = v27[9];
                      v71[8] = v27[8];
                      v71[9] = v83;
                      long long v84 = v27[11];
                      v71[10] = v27[10];
                      v71[11] = v84;
                      long long v85 = v27[13];
                      v71[12] = v27[12];
                      v71[13] = v85;
                      long long v86 = v27[15];
                      v71[14] = v27[14];
                      v71[15] = v86;
                      long long v87 = v27[17];
                      v71[16] = v27[16];
                      v71[17] = v87;
                      long long v88 = v27[19];
                      v71[18] = v27[18];
                      v71[19] = v88;
                      long long v89 = v27[21];
                      v71[20] = v27[20];
                      v71[21] = v89;
                      long long v90 = v27[23];
                      v71[22] = v27[22];
                      v71[23] = v90;
                      long long v91 = v27[25];
                      v71[24] = v27[24];
                      v71[25] = v91;
                      long long v92 = v27[27];
                      v71[26] = v27[26];
                      v71[27] = v92;
                      long long v93 = v27[29];
                      v71[28] = v27[28];
                      v71[29] = v93;
                      long long v94 = v27[31];
                      v71[30] = v27[30];
                      v71[31] = v94;
                      long long v95 = v27[33];
                      v71[32] = v27[32];
                      v71[33] = v95;
                      long long v96 = v27[35];
                      v71[34] = v27[34];
                      v71[35] = v96;
                      long long v97 = v27[37];
                      v71[36] = v27[36];
                      v71[37] = v97;
                      long long v98 = v27[39];
                      v71[38] = v27[38];
                      v71[39] = v98;
                    }
                    else
                    {
                      for (uint64_t i = 0; i != 640; i += 8)
                        *(void *)((char *)v71 + i) = *(void *)((char *)v27 + i);
                    }
                    if ((v4 & 0x200) == 0) {
                      *(void *)(v1 + 26008) = v71 + 40;
                    }
                    LODWORD(v58) = v188 + 1;
                    uint64_t v72 = 1;
                  }
                  else
                  {
                    v71 -= 40;
                    uint64_t v72 = 1;
                  }
                  uint64_t v109 = v195 | 0x10;
                  int v110 = HIBYTE(v4) & 1;
                  if (!(_BYTE)v69) {
                    LOBYTE(v110) = 1;
                  }
                  char v194 = v110;
                  uint64_t v111 = 640 * v72;
                  BOOL v178 = v27;
                  float32x4_t v112 = v27;
                  unsigned int v184 = v69;
                  float64x2_t v191 = v71;
                  while (2)
                  {
                    if ((v4 & 0x200) != 0) {
                      *(void *)(v1 + 26008) = *(void *)(v1 + 26000);
                    }
                    int32x4_t v113 = v112 + 1400;
                    if (v112 + 1400 > v71) {
                      int32x4_t v113 = v71;
                    }
                    if ((v4 & 0x20) != 0) {
                      float32x4_t v114 = v113;
                    }
                    else {
                      float32x4_t v114 = v71;
                    }
                    if ((v4 & 0x40) != 0)
                    {
                      for (j = v193; v112 < v114; float32x4_t v112 = (_OWORD *)((char *)v112 + v111))
                      {
                        float32x4_t v118 = (char *)v112 + v195;
                        if ((v4 & 0x4000000) != 0)
                        {
                          int v119 = *((_DWORD *)v2 + 637);
                          *((_DWORD *)v118 + 4) = v119;
                          *((_DWORD *)v2 + 637) = v119 + 1;
                        }
                        *(void *)uint64_t j = v112;
                        *((void *)j + 1) = v112 + 40;
                        if ((v4 & 0x10000) != 0)
                        {
                          uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v1 + 496))(v1, j, 2);
                          if (!result) {
                            continue;
                          }
                        }
                        if ((v194 & 1) == 0)
                        {
                          uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t, void))(v1 + 472))(v1, j, 2, v69);
                          if (!result) {
                            continue;
                          }
                        }
                        if ((v4 & 0x100) != 0)
                        {
                          if ((v4 & 0x8000000) != 0) {
                            uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v1 + 20160))(v1, v118, 1);
                          }
                          else {
                            uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v1 + 20192))(v1, j, 2);
                          }
                        }
                        if (v118 != *(char **)&j[8 * v190]) {
                          uint64_t result = (*(uint64_t (**)(uint64_t, char *))(v1 + 27912))(v1, v118);
                        }
                        j += 16;
                      }
                      unint64_t v58 = (unint64_t)(j - v193) >> 3;
                      if (v58)
                      {
                        unint64_t v71 = v191;
                        uint64_t v109 = v195 | 0x10;
                        goto LABEL_250;
                      }
LABEL_275:
                      unint64_t v71 = v191;
                      uint64_t v109 = v195 | 0x10;
                      if ((v4 & 0x20) == 0) {
                        goto LABEL_277;
                      }
                    }
                    else
                    {
                      float32x4_t v115 = v193;
                      while (v112 < v114)
                      {
                        if ((v4 & 0x4000000) != 0)
                        {
                          int v116 = *((_DWORD *)v2 + 637);
                          *(_DWORD *)((char *)v112 + v109) = v116;
                          *((_DWORD *)v2 + 637) = v116 + 1;
                        }
                        *(void *)float32x4_t v115 = v112;
                        *((void *)v115 + 1) = v112 + 40;
                        v115 += 16;
                        float32x4_t v112 = (_OWORD *)((char *)v112 + v111);
                      }
                      if ((v4 & 0x20) != 0)
                      {
                        unint64_t v58 = (unint64_t)(v115 - v193) >> 3;
                        if ((v4 & 0x10000) == 0) {
                          goto LABEL_246;
                        }
LABEL_245:
                        uint64_t result = (*(uint64_t (**)(uint64_t, char *, unint64_t))(v1 + 496))(v1, v193, v58);
                        unint64_t v58 = result;
                        if (result) {
                          goto LABEL_246;
                        }
                        goto LABEL_265;
                      }
                      if (v192)
                      {
                        if (v187 == 10) {
                          unint64_t v58 = (((int)v58 >> 1) + 1);
                        }
                        else {
                          unint64_t v58 = v58;
                        }
                        if ((v4 & 0x10000) != 0) {
                          goto LABEL_245;
                        }
                      }
                      else
                      {
                        unint64_t v58 = (2 * v58 - 2);
                        if ((v4 & 0x10000) != 0) {
                          goto LABEL_245;
                        }
                      }
LABEL_246:
                      if ((v194 & 1) != 0
                        || (uint64_t result = (*(uint64_t (**)(uint64_t, char *, unint64_t, void))(v1 + 472))(v1, v193, v58, v69), v58 = result, result))
                      {
                        if ((v4 & 0x100) != 0) {
                          (*(void (**)(uint64_t, char *, unint64_t))(v1 + 20192))(v1, v193, v58);
                        }
LABEL_250:
                        if ((v4 & 0x400) != 0)
                        {
                          if (v192) {
                            uint64_t v121 = 2;
                          }
                          else {
                            uint64_t v121 = *((unsigned char *)v2 + 2544) == 0;
                          }
                          uint64_t result = (*(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t))(*(void *)(v1 + 19240) + 16))(v1, v193, v58, v121);
                          goto LABEL_265;
                        }
                        if ((v4 & 0x800) == 0)
                        {
                          if ((v4 & 0x20000) == 0)
                          {
                            if (v192) {
                              uint64_t v120 = 2;
                            }
                            else {
                              uint64_t v120 = *((unsigned char *)v2 + 2544) == 0;
                            }
                            uint64_t result = (*(uint64_t (**)(void, char *, unint64_t, uint64_t))(v1 + 29184))(*(void *)(v1 + 29016), v193, v58, v120);
                            goto LABEL_265;
                          }
                          if (v192) {
                            uint64_t v122 = 2;
                          }
                          else {
                            uint64_t v122 = *((unsigned char *)v2 + 2544) == 0;
                          }
                          uint64_t v123 = (__int16)v2[4];
                          unint64_t v189 = v58;
                          int v124 = v58;
                          int32x4_t v125 = (uint64_t *)v193;
                          do
                          {
                            v196[0] = 0;
                            uint64_t v126 = (*(uint64_t (**)(void, uint64_t, _DWORD *))(v1 + 29200))(*(void *)(v1 + 29016), 1, v196);
                            unint64_t v127 = v126;
                            int v128 = v196[0];
                            if (v196[0] > v124)
                            {
                              v196[0] = v124;
                              int v128 = v124;
                            }
                            unint64_t v129 = v126 + (int)v123 * (uint64_t)v128;
                            do
                            {
                              uint64_t v130 = *v125++;
                              (*(void (**)(uint64_t, uint64_t, unint64_t))(v1 + 26168))(v1, v130, v127);
                              v127 += v123;
                            }
                            while (v127 < v129);
                            v124 -= v196[0];
                            uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(v1 + 29208))(*(void *)(v1 + 29016), v122, 1);
                          }
                          while (v124);
                          int v2 = v183;
                          uint64_t v69 = v184;
                          unint64_t v58 = v189;
                          goto LABEL_275;
                        }
                        uint64_t result = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(void *)(v1 + 19240)
                                                                                              + 24))(v1, v193, v58);
                        if ((v4 & 0x20) == 0) {
                          goto LABEL_277;
                        }
                      }
                      else
                      {
LABEL_265:
                        if ((v4 & 0x20) == 0) {
                          goto LABEL_277;
                        }
                      }
                    }
                    if (v112 >= v71)
                    {
LABEL_277:
                      uint64_t v27 = v178;
                      goto LABEL_278;
                    }
                    continue;
                  }
                }
                unint64_t v58 = v188;
                if ((v4 & 0x4000000) != 0)
                {
                  int v99 = *((_DWORD *)v2 + 637);
                  int v100 = ((int)v188 + v171) / v172;
                  if (v100 <= 1) {
                    int v59 = 1;
                  }
                  else {
                    int v59 = ((int)v188 + v171) / v172;
                  }
                  if (v59 < 2)
                  {
                    int v101 = 0;
                    BOOL v102 = (v4 & 0x10) == 0;
                    goto LABEL_280;
                  }
                  int v104 = 0;
                  int v101 = v59 & 0x7FFFFFFE;
                  BOOL v102 = (v4 & 0x10) == 0;
                  do
                  {
                    LODWORD(v27[40 * (int)((v104 << v66) | v190) + 1]) = v99 + v104;
                    LODWORD(v27[40 * ((v4 & 0x10) == 0) + 1 + 40 * (uint64_t)((v104 + 1) << v66)]) = v99 + v104 + 1;
                    v104 += 2;
                  }
                  while (v104 != v101);
                  while (v59 != v101)
                  {
LABEL_280:
                    LODWORD(v27[40 * (v101 << v66) + 1 + 40 * (unint64_t)v102]) = v99 + v101;
                    ++v101;
                  }
                  int v131 = v100 + v99;
                  *((_DWORD *)v2 + 637) = v131;
                  if (v187 == 2)
                  {
                    int v132 = v188 - 1;
                    if ((v4 & 0x10) == 0) {
                      int v132 = 0;
                    }
                    LODWORD(v27[40 * v132 + 1]) = v131;
                  }
                }
                if (v173 == 256) {
                  (*(void (**)(uint64_t, _OWORD *, unint64_t))(v1 + 20160))(v1, v27, v188);
                }
                if (!v174)
                {
                  if (v187 == 1)
                  {
                    if (v173 == 134217984 && (int)v190 < (int)v188)
                    {
                      unint64_t v133 = (unint64_t)&v27[40 * ((v4 & 0x10) == 0)];
                      do
                      {
                        (*(void (**)(uint64_t, unint64_t, uint64_t))(v1 + 20160))(v1, v133, 1);
                        v133 += 1280;
                      }
                      while (v133 < (unint64_t)&v27[40 * (int)v188]);
                    }
                    if ((v4 & 0x20000) == 0)
                    {
                      unint64_t v58 = v188;
                      uint64_t result = (*(uint64_t (**)(void, _OWORD *, unint64_t, uint64_t))(v1 + 29072))(*(void *)(v1 + 29016), v27, v188, 2);
                      goto LABEL_279;
                    }
                    int v181 = v59;
                    uint64_t v144 = v69;
                    uint64_t v145 = (__int16)v2[4];
                    int v146 = v188;
                    int v147 = v27;
                    do
                    {
                      v196[0] = 0;
                      uint64_t v148 = (*(uint64_t (**)(void, uint64_t, _DWORD *))(v1 + 29200))(*(void *)(v1 + 29016), 1, v196);
                      unint64_t v149 = v148;
                      int v150 = v196[0];
                      if (v196[0] > v146)
                      {
                        v196[0] = v146;
                        int v150 = v146;
                      }
                      unint64_t v151 = v148 + (int)v145 * (uint64_t)v150;
                      do
                      {
                        int v152 = v147;
                        v147 += 40;
                        (*(void (**)(uint64_t, _OWORD *, unint64_t))(v1 + 26168))(v1, v152, v149);
                        v149 += v145;
                      }
                      while (v149 < v151);
                      v146 -= v196[0];
                      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(v1 + 29208))(*(void *)(v1 + 29016), 2, 1);
                    }
                    while (v146);
                    uint64_t v69 = v144;
                    unint64_t v58 = v188;
                  }
                  else
                  {
                    if (v173 == 134217984) {
                      (*(void (**)(uint64_t, _OWORD *, void))(v1 + 20160))(v1, &v27[40 * ((v4 & 0x10) == 0)], (v188 - 1));
                    }
                    if ((v4 & 0x20000) == 0)
                    {
                      uint64_t result = (*(uint64_t (**)(void, _OWORD *, unint64_t, BOOL))(v1 + 29080))(*(void *)(v1 + 29016), v27, v188, *((unsigned char *)v2 + 2544) == 0);
                      ++v59;
                      continue;
                    }
                    int v181 = v59;
                    unsigned int v186 = v69;
                    BOOL v153 = *((unsigned char *)v2 + 2544) == 0;
                    uint64_t v154 = (__int16)v2[4];
                    int v155 = v188;
                    BOOL v180 = v27;
                    float32x4_t v156 = v27;
                    do
                    {
                      v196[0] = 0;
                      uint64_t v157 = (*(uint64_t (**)(void, uint64_t, _DWORD *))(v1 + 29200))(*(void *)(v1 + 29016), 3, v196);
                      unint64_t v158 = v157;
                      int v159 = v196[0];
                      if (v196[0] > v155)
                      {
                        v196[0] = v155;
                        int v159 = v155;
                      }
                      unint64_t v160 = v157 + (int)v154 * (uint64_t)v159;
                      do
                      {
                        float32x4_t v161 = v156 + 40;
                        (*(void (**)(uint64_t, _OWORD *, unint64_t))(v1 + 26168))(v1, v156, v158);
                        v158 += v154;
                        v156 += 40;
                      }
                      while (v158 < v160);
                      int v162 = v196[0];
                      uint64_t result = (*(uint64_t (**)(void, BOOL, uint64_t, void))(v1 + 29208))(*(void *)(v1 + 29016), v153, 3, v196[0]);
                      float32x4_t v156 = v161 - 40;
                      BOOL v60 = v155 == v162;
                      int v155 = v155 - v162 + 1;
                    }
                    while (!v60);
                    uint64_t v27 = v180;
                    uint64_t v69 = v186;
                    unint64_t v58 = v188;
                  }
LABEL_278:
                  int v59 = v181;
                  goto LABEL_279;
                }
                break;
              }
              if (v173 == 134217984) {
                (*(void (**)(uint64_t, _OWORD *, unint64_t))(v1 + 20160))(v1, v27, v188);
              }
              if ((v4 & 0x20000) == 0)
              {
                uint64_t result = (*(uint64_t (**)(void, _OWORD *, unint64_t, uint64_t))(v1 + 29088))(*(void *)(v1 + 29016), v27, v188, 1);
                ++v59;
                continue;
              }
              break;
            }
            int v182 = v59;
            unsigned int v185 = v69;
            uint64_t v134 = (__int16)v2[4];
            uint64_t v135 = 2;
            unint64_t v136 = v188;
            BOOL v179 = v27;
            while (1)
            {
              v196[0] = 0;
              uint64_t v137 = (*(uint64_t (**)(void, uint64_t, _DWORD *))(v1 + 29200))(*(void *)(v1 + 29016), v135, v196);
              unint64_t v138 = v137;
              int v139 = v196[0];
              if (v196[0] <= (int)v136)
              {
                if (v196[0] >= (int)v136) {
                  uint64_t v135 = v135;
                }
                else {
                  uint64_t v135 = 3;
                }
                int v140 = v196[0];
              }
              else
              {
                v196[0] = v136;
                int v140 = v136;
              }
              unint64_t v141 = v137 + (int)v134 * (uint64_t)v140;
              do
              {
                int v142 = v27 + 40;
                (*(void (**)(uint64_t, _OWORD *, unint64_t))(v1 + 26168))(v1, v27, v138);
                v138 += v134;
                v27 += 40;
              }
              while (v138 < v141);
              int v143 = v136 - v196[0];
              if (v136 == v196[0])
              {
                if (v135 != 3)
                {
                  int v2 = v183;
                  uint64_t v27 = v179;
LABEL_319:
                  uint64_t v69 = v185;
                  unint64_t v58 = v188;
                  int v59 = v182;
                  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, unint64_t))(v1 + 29208))(*(void *)(v1 + 29016), 1, v135, v136);
LABEL_279:
                  char v66 = v187 == 1;
                  ++v59;
                  goto LABEL_157;
                }
                if (v139 > (int)v136)
                {
                  uint64_t v27 = v179;
                  (*(void (**)(uint64_t, _OWORD *, unint64_t))(v1 + 26168))(v1, v179, v138);
                  unint64_t v136 = ++v196[0];
                  int v2 = v183;
                  goto LABEL_319;
                }
              }
              uint64_t v27 = v142 - 40;
              (*(void (**)(void, uint64_t, uint64_t))(v1 + 29208))(*(void *)(v1 + 29016), 1, v135);
              unint64_t v136 = (v143 + 1);
            }
          }
LABEL_50:
          uint64_t result = (*(uint64_t (**)(uint64_t, _OWORD *, unint64_t))(v1 + 24352))(v1, v27, v28);
          uint64_t v30 = result;
          goto LABEL_51;
        }
        if (*(unsigned char *)(result + 28668))
        {
          if ((__int16)*v2 < 8) {
            goto LABEL_71;
          }
          unint64_t v36 = (unint64_t)*v2 >> 3;
          if (*v2 >= 0x30u && (unint64_t)(v23 - v21 + 640) >= 0x20)
          {
            BOOL v166 = (long long *)(v21 - 640);
            unint64_t v37 = v36 & 0x1FFC;
            BOOL v167 = (_OWORD *)(v23 + 16);
            unint64_t v168 = v37;
            do
            {
              long long v169 = *v166;
              long long v170 = v166[1];
              v166 += 2;
              *(v167 - 1) = v169;
              *BOOL v167 = v170;
              v167 += 2;
              v168 -= 4;
            }
            while (v168);
            if (v37 == v36)
            {
LABEL_71:
              int v29 = 0;
              *(void *)(result + 26008) = v23 + v22;
              unint64_t v28 = (v28 + 1);
              if ((v4 & 0x200) == 0) {
                goto LABEL_75;
              }
              goto LABEL_49;
            }
          }
          else
          {
            unint64_t v37 = 0;
          }
          unint64_t v38 = v36 - v37;
          uint64_t v39 = 8 * v37;
          uint64_t v40 = (void *)(v23 + 8 * v37);
          uint64_t v41 = (uint64_t *)(v39 + v21 - 640);
          do
          {
            uint64_t v42 = *v41++;
            *v40++ = v42;
            --v38;
          }
          while (v38);
          goto LABEL_71;
        }
        int v29 = 1;
      }
      if ((v4 & 0x200) == 0) {
        goto LABEL_75;
      }
LABEL_49:
      uint64_t result = (*(uint64_t (**)(uint64_t, _OWORD *, unint64_t))(result + 24200))(result, v27, v28);
      uint64_t v30 = result;
      uint64_t v27 = *(_OWORD **)(v1 + 26032);
      if ((v4 & 0x20) == 0) {
        goto LABEL_51;
      }
      goto LABEL_50;
    }
  }
LABEL_339:
  if ((v4 & 0x100) != 0)
  {
    uint64_t v163 = *(void *)(v1 + 1424);
    if (*(void *)(v163 + 512) || (uint64_t v164 = *(void *)(v1 + 1432), *(void *)(v164 + 512)))
    {
      uint64_t v165 = *(void *)(v1 + 19240);
      if ((__int16)v2[1268] < 0) {
        return (*(uint64_t (**)(uint64_t))(v165 + 56))(v1);
      }
      else {
        return (*(uint64_t (**)(uint64_t))(v165 + 48))(v1);
      }
    }
    else
    {
      *(_DWORD *)(v163 + 500) = 0;
      *(_DWORD *)(v164 + 500) = 0;
    }
  }
  return result;
}

uint64_t gleLLVMVecPrimMultiRender(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = (unsigned __int16 *)(result + 26124);
  unsigned int v4 = *(_DWORD *)(result + 32 * *(__int16 *)(result + 28662) + 28184);
  unsigned int v3 = *(_DWORD *)(result + 32 * *(__int16 *)(result + 28662) + 28188);
  *(void *)(result + 28144) = *(void *)(result + 32 * *(__int16 *)(result + 28662) + 28160);
  if ((v4 & 0x40000) == 0) {
    goto LABEL_19;
  }
  if ((*(__int16 *)(result + 28660) & 0x80000000) == 0) {
    goto LABEL_19;
  }
  uint64_t v5 = *(void *)(result + 26000);
  uint64_t v6 = *(void *)(result + 26008);
  if (v6 == v5) {
    goto LABEL_19;
  }
  if (*(unsigned char *)(result + 28668)) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = 0;
  }
  if ((__int16)*v2 >= 8)
  {
    unint64_t v8 = (unint64_t)*v2 >> 3;
    if (*v2 >= 0x40u)
    {
      unint64_t v9 = 0;
      uint64_t v10 = -640;
      if (!*(unsigned char *)(result + 28668)) {
        uint64_t v10 = 0;
      }
      if ((unint64_t)(v6 - v5 - v10) >= 0x20)
      {
        unint64_t v9 = v8 & 0x1FFC;
        BOOL v11 = (long long *)(v5 + 640 * v7 + 16);
        unsigned int v12 = (_OWORD *)(v6 + 16);
        unint64_t v13 = v9;
        do
        {
          long long v14 = *v11;
          *(v12 - 1) = *(v11 - 1);
          *unsigned int v12 = v14;
          v11 += 2;
          v12 += 2;
          v13 -= 4;
        }
        while (v13);
        if (v9 == v8) {
          goto LABEL_18;
        }
      }
    }
    else
    {
      unint64_t v9 = 0;
    }
    unint64_t v15 = v8 - v9;
    uint64_t v16 = 8 * v9;
    char v17 = (void *)(v6 + 8 * v9);
    int v18 = (uint64_t *)(v5 + v16 + 640 * v7);
    do
    {
      uint64_t v19 = *v18++;
      *v17++ = v19;
      --v15;
    }
    while (v15);
  }
LABEL_18:
  *(void *)(result + 26008) = v6 + 4 * v3;
LABEL_19:
  if ((v4 & 0x3008) == 0x2000) {
    goto LABEL_524;
  }
  unsigned int v305 = (unsigned __int16)v3 >> 12;
  int v20 = 0;
  uint64_t v21 = 0;
  unsigned int v286 = 0;
  char v281 = 1;
  unsigned int v296 = 3;
  unsigned int v22 = 2;
  int v23 = 3;
  char v278 = 1;
  char v283 = 1;
  switch((unsigned __int16)v3 >> 12)
  {
    case 4:
      goto LABEL_30;
    case 5:
      char v281 = 0;
      char v278 = 0;
      unsigned int v286 = 0;
      int v23 = 1;
      unsigned int v296 = 3;
      int v20 = 1;
      goto LABEL_26;
    case 6:
      char v281 = 0;
      char v283 = 0;
      unsigned int v22 = 1;
      unsigned int v296 = 3;
      int v23 = 1;
      int v20 = 1;
      char v278 = 1;
      uint64_t v21 = 1;
      unsigned int v286 = 1;
      goto LABEL_30;
    case 7:
      int v20 = 0;
      uint64_t v21 = 0;
      unsigned int v286 = 0;
      char v281 = 1;
      unsigned int v296 = 4;
      unsigned int v22 = 3;
      int v23 = 4;
      goto LABEL_28;
    case 8:
      char v281 = 0;
      char v278 = 0;
      unsigned int v286 = 0;
      int v20 = 1;
      int v23 = 2;
      unsigned int v296 = 4;
      unsigned int v22 = 3;
      goto LABEL_26;
    case 12:
      int v20 = 0;
      uint64_t v21 = 0;
      unsigned int v286 = 0;
      char v281 = 1;
      int v23 = 6;
      unsigned int v296 = 3;
      unsigned int v22 = 4;
LABEL_28:
      char v278 = 1;
      break;
    default:
      char v281 = 0;
      char v278 = 0;
      unsigned int v286 = 0;
      int v20 = 1;
      int v23 = 2;
      unsigned int v296 = 3;
      unsigned int v22 = 4;
LABEL_26:
      uint64_t v21 = 2;
      break;
  }
  char v283 = 1;
LABEL_30:
  unint64_t v303 = *(void *)(result + 26000);
  unint64_t v304 = (uint64_t)(*(void *)(result + 26008) - v303) / (4 * v3);
  switch((v3 >> 8) & 0xF)
  {
    case 1u:
      goto LABEL_43;
    case 3u:
      if ((int)v304 <= 1) {
        goto LABEL_524;
      }
      goto LABEL_47;
    case 4u:
      uint64_t v24 = (3 * ((int)v304 / 3));
      goto LABEL_45;
    case 5u:
    case 6u:
    case 9u:
      if ((int)v304 <= 2) {
        goto LABEL_524;
      }
      goto LABEL_47;
    case 7u:
    case 0xAu:
      uint64_t v24 = ((uint64_t)(*(void *)(result + 26008) - v303) / (4 * v3)) & 0xFFFFFFFCLL;
      goto LABEL_45;
    case 8u:
      if ((int)v304 <= 3) {
        goto LABEL_524;
      }
      goto LABEL_43;
    case 0xBu:
      if ((int)v304 <= 3) {
        goto LABEL_524;
      }
      goto LABEL_47;
    case 0xCu:
      uint64_t v24 = (6 * ((int)v304 / 6));
      goto LABEL_45;
    case 0xDu:
      if ((int)v304 <= 5) {
        goto LABEL_524;
      }
LABEL_43:
      uint64_t v24 = ((uint64_t)(*(void *)(result + 26008) - v303) / (4 * v3)) & 0xFFFFFFFELL;
LABEL_45:
      unint64_t v304 = v24;
LABEL_46:
      if ((int)v304 < 1) {
        goto LABEL_524;
      }
LABEL_47:
      if ((v4 & 0x200) != 0)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(result + 24200))(result, v303, v304);
        uint64_t v25 = result;
        unint64_t v303 = *(void *)(v1 + 26032);
        if ((v4 & 0x20) != 0) {
          goto LABEL_49;
        }
LABEL_54:
        if ((v4 & 8) == 0) {
          goto LABEL_88;
        }
        BOOL v26 = (int *)(v1 + 26116);
        unint64_t v28 = (uint64_t *)(v1 + 26080);
        uint64_t v27 = (_DWORD *)(v1 + 25976);
        goto LABEL_56;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(result + 20096))(result, v303, v304);
      uint64_t v25 = result;
      if ((v4 & 0x20) == 0) {
        goto LABEL_54;
      }
LABEL_49:
      uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(v1 + 24352))(v1, v303, v304);
      uint64_t v25 = result;
      if ((v4 & 8) == 0 || *(int *)(v1 + 26116) < 1) {
        goto LABEL_88;
      }
      BOOL v26 = (int *)(v1 + 26116);
      uint64_t v27 = (_DWORD *)(v1 + 25976);
      unint64_t v28 = (uint64_t *)(v1 + 26080);
      int v29 = *(unint64_t **)(v1 + 26080);
      unint64_t v303 = *v29;
      unint64_t v304 = (v29[1] - *v29) / 0x280;
      if ((int)v304 <= 2) {
        goto LABEL_70;
      }
LABEL_56:
      unsigned int v30 = v304;
      switch((unsigned __int16)v3 >> 12)
      {
        case 1:
          unsigned int v30 = v304 >> 1;
          break;
        case 3:
          unsigned int v30 = v304 - 1;
          break;
        case 4:
          unsigned int v30 = v304 / 3;
          break;
        case 5:
        case 6:
        case 9:
          unsigned int v30 = v304 - 2;
          break;
        case 7:
        case 10:
          unsigned int v30 = v304 >> 2;
          break;
        case 8:
          int v32 = v304 - 2;
          BOOL v31 = (int)v304 < 2;
          int v33 = v304 - 1;
          goto LABEL_66;
        case 11:
          unsigned int v30 = v304 - 3;
          break;
        case 12:
          unsigned int v30 = v304 / 6;
          break;
        case 13:
          int v32 = v304 - 4;
          BOOL v31 = (int)v304 < 4;
          int v33 = v304 - 3;
LABEL_66:
          if (v31) {
            int v32 = v33;
          }
          unsigned int v30 = v32 >> 1;
          break;
        default:
          break;
      }
      *v27 += v30;
      if ((v4 & 0x20) != 0)
      {
LABEL_70:
        uint64_t v34 = *v26;
        if ((int)v34 >= 2)
        {
          uint64_t v35 = 0;
          uint64_t v36 = *v28;
          do
          {
            uint64_t v38 = v36 + 8 * v35;
            unint64_t v303 = *(void *)(v38 + 8);
            unint64_t v39 = (*(void *)(v38 + 16) - v303) / 0x280;
            if ((int)v39 >= 3)
            {
              uint64_t result = v39;
              switch((unsigned __int16)v3 >> 12)
              {
                case 1:
                  uint64_t result = v39 >> 1;
                  break;
                case 3:
                  uint64_t result = (v39 - 1);
                  break;
                case 4:
                  uint64_t result = v39 / 3uLL;
                  break;
                case 5:
                case 6:
                case 9:
                  uint64_t result = (v39 - 2);
                  break;
                case 7:
                case 10:
                  uint64_t result = v39 >> 2;
                  break;
                case 8:
                  uint64_t result = (v39 - 2) >> 1;
                  break;
                case 11:
                  uint64_t result = (v39 - 3);
                  break;
                case 12:
                  uint64_t result = v39 / 6uLL;
                  break;
                case 13:
                  int v40 = v39 - 4;
                  if ((int)v39 < 4) {
                    int v40 = v39 - 3;
                  }
                  uint64_t result = (v40 >> 1);
                  break;
                default:
                  break;
              }
              *v27 += result;
            }
            uint64_t v37 = v35 + 2;
            ++v35;
          }
          while (v37 < v34);
          unint64_t v304 = v39;
        }
      }
LABEL_88:
      if ((v4 & 0x2000) == 0)
      {
        if ((v4 & 0x1000000) == 0 && v25 >= 0x100)
        {
          if ((v4 & 0x4000000) != 0) {
            *((_DWORD *)v2 + 637) += (int)(v304 - v286 - v21) / v23;
          }
          goto LABEL_524;
        }
        unsigned int v302 = v23;
        unint64_t v292 = v4 & 0x10;
        if ((v4 & 0x10) != 0) {
          uint64_t v41 = 0;
        }
        else {
          uint64_t v41 = v22;
        }
        uint64_t v306 = v41;
        if ((v4 & 0x4000) != 0) {
          (*(void (**)(uint64_t, unint64_t, unint64_t))(v1 + 20112))(v1, v303, v304);
        }
        uint64_t v42 = (unsigned __int16)v3 >> 12;
        if ((v4 & 0x8000) != 0) {
          (*(void (**)(uint64_t, unint64_t, unint64_t))(v1 + 20128))(v1, v303, v304);
        }
        if ((v4 & 0x80) != 0) {
          (*(void (**)(uint64_t, unint64_t, unint64_t))(v1 + 20144))(v1, v303, v304);
        }
        unsigned int v315 = 0;
        int v288 = 0;
        int v43 = HIBYTE(v4) & 1;
        BOOL v45 = (v4 & 0x810C00) == 0 && (v42 - 14) < 0xFFFFFFFE;
        BOOL v276 = v45;
        if ((v3 & 0xE000) != 0xC000) {
          LOBYTE(v43) = 1;
        }
        char v272 = v43;
        uint64_t v46 = -3;
        if ((v3 & 0xE000) != 0xC000) {
          uint64_t v46 = 0;
        }
        uint64_t v271 = v46;
        int v294 = v3 & 0x7000;
        uint64_t v47 = 26064;
        if ((v4 & 0x20) == 0) {
          uint64_t v47 = 26088;
        }
        uint64_t v282 = v47;
        uint64_t v48 = 26072;
        if ((v4 & 0x20) == 0) {
          uint64_t v48 = 26096;
        }
        uint64_t v269 = v48;
        uint64_t v49 = 26000;
        if ((v4 & 0x200) == 0) {
          uint64_t v49 = 26016;
        }
        uint64_t v293 = v49;
        if ((v4 & 0x400000) != 0) {
          int v50 = 0;
        }
        else {
          int v50 = v20;
        }
        int v270 = v50;
        unint64_t v51 = &v316;
        if ((v4 & 0x200000) == 0) {
          unint64_t v51 = 0;
        }
        float32x4_t v285 = v51;
        int v287 = v4 & 0xC00;
        char v52 = v281;
        if ((v4 & 0x200000) == 0) {
          char v52 = 1;
        }
        char v277 = v52;
        int v273 = v4 & 0x50;
        int v275 = v20 & (v4 >> 19);
        uint64_t v279 = (v306 + 4 * v306) << 7;
        if ((v4 & 0x8480100) == 0x80100) {
          int v53 = v20;
        }
        else {
          int v53 = 0;
        }
        int v291 = v53;
        uint64_t v54 = v23;
        uint64_t v280 = 640 * v23;
        unsigned int v267 = v286 - v296;
        int v268 = v286 + v21;
        unint64_t v295 = 0;
        uint64_t v274 = -(uint64_t)v296;
        float32x4_t v297 = v2;
        unsigned int v290 = v4;
        uint64_t result = v305 - 4;
        unsigned int v289 = v21;
        uint64_t v55 = v25;
        unsigned int v307 = v23;
        while (1)
        {
          if ((v4 & 0x20) != 0)
          {
            if (v288 >= *(_DWORD *)(v1 + 26116))
            {
LABEL_522:
              if ((v4 & 0x2000000) != 0) {
                *(_DWORD *)(v1 + 9200) = 1065353216;
              }
              break;
            }
            unsigned int v317 = 0;
            int v56 = (unint64_t *)(*(void *)(v1 + 26080) + 8 * v288);
            unint64_t v303 = *v56;
            unint64_t v304 = (v56[1] - *v56) / 0x280;
            if ((int)v304 < 3) {
              goto LABEL_130;
            }
          }
          else
          {
            if (v288 >= 1) {
              goto LABEL_522;
            }
            unsigned int v317 = 0;
          }
          int v57 = HIBYTE(v4) & 1;
          if (!(_BYTE)v55) {
            int v57 = 1;
          }
          int v284 = v4 << 12;
          if ((v276 & v57) != 1)
          {
            if ((_BYTE)v55) {
              char v64 = v272;
            }
            else {
              char v64 = 1;
            }
            if ((v64 & 1) == 0)
            {
              if ((int)v304 < 1)
              {
                LODWORD(v55) = 0;
              }
              else
              {
                unint64_t v65 = v303;
                unint64_t v66 = v303 + 640 * (int)v304;
                if (v66 <= v303 + 1280) {
                  unint64_t v66 = v303 + 1280;
                }
                unint64_t v67 = v66 - 1280 - v303;
                uint64_t v68 = 1;
                if (v67) {
                  uint64_t v68 = 2;
                }
                unint64_t v69 = v68 + (v67 - (v67 != 0)) / 0x500;
                if (v69 < 2)
                {
                  LODWORD(v55) = 0;
                  unint64_t v70 = v303;
                  goto LABEL_290;
                }
                int v133 = 0;
                int v134 = 0;
                unint64_t v70 = v303 + 1280 * (v69 & 0x7FFFFFFFFFFFFELL);
                uint64_t v135 = v69 & 0x7FFFFFFFFFFFFELL;
                do
                {
                  v133 |= *(unsigned __int8 *)(v65 + 3);
                  v134 |= *(unsigned __int8 *)(v65 + 1283);
                  v65 += 2560;
                  v135 -= 2;
                }
                while (v135);
                LODWORD(v55) = v134 | v133;
                if (v69 != (v69 & 0x7FFFFFFFFFFFFELL))
                {
                  do
                  {
LABEL_290:
                    LODWORD(v55) = *(unsigned __int8 *)(v70 + 3) | v55;
                    v70 += 1280;
                  }
                  while (v70 < v303 + 640 * (int)v304);
                }
              }
            }
            unsigned int v299 = v55;
            unint64_t v136 = ((unint64_t)v286 << 7) | ((unint64_t)v286 << 9);
            unint64_t v137 = v303 + v136;
            unint64_t v138 = v303 + 640 * (int)v304 + 640 * (int)v274 + v136 + 640 * v271;
            int v139 = v315;
            if (v294 == 20480) {
              int v139 = 1;
            }
            unsigned int v315 = v139;
            if (v137 > v138)
            {
LABEL_129:
              uint64_t v55 = v299;
              goto LABEL_130;
            }
            unint64_t v312 = v138;
            int v140 = *(unint64_t **)(v1 + v282);
            int v141 = HIBYTE(v4) & 1;
            int v142 = *(unint64_t **)(v1 + v269);
            if (!(_BYTE)v299) {
              LOBYTE(v141) = 1;
            }
            char v309 = v141;
            int v301 = -1;
            while (2)
            {
              if ((v4 & 0x4000000) != 0)
              {
                int v146 = *((_DWORD *)v2 + 637);
                *(_DWORD *)(v137 + 640 * v306 + 16) = v146;
                *((_DWORD *)v2 + 637) = v146 + 1;
              }
              BOOL v147 = v315;
              if (v294 == 20480) {
                BOOL v147 = v315 == 0;
              }
              unsigned int v315 = v147;
              float v316 = 0.0;
              switch((int)result)
              {
                case 0:
                  goto LABEL_309;
                case 1:
                  if (v147)
                  {
                    if (v292)
                    {
                      unint64_t *v140 = v137;
                      v140[1] = v137 + 1280;
                      unint64_t v148 = v137 + 640;
                      goto LABEL_326;
                    }
                    unint64_t v152 = v137 + 1280;
                    unint64_t v153 = v137 + 640;
                    goto LABEL_334;
                  }
LABEL_309:
                  if (v292)
                  {
                    unint64_t v149 = v137 + 640;
                    goto LABEL_320;
                  }
                  unint64_t *v140 = v137 + 1280;
                  v140[1] = v137;
                  unint64_t v148 = v137 + 640;
                  goto LABEL_326;
                case 2:
                  if (v292)
                  {
                    unint64_t *v140 = v137;
                    v140[1] = v137 + 640;
                    unint64_t v148 = v303;
                    goto LABEL_326;
                  }
                  unint64_t *v140 = v137 + 640;
                  v140[1] = v303;
                  goto LABEL_335;
                case 3:
                  if (v292)
                  {
                    unint64_t *v140 = v137;
                    v140[1] = v137 + 640;
                    unint64_t v150 = v137 + 1280;
                    unint64_t v151 = v137 + 1920;
                    goto LABEL_330;
                  }
                  unint64_t *v140 = v137 + 1920;
                  v140[1] = v137;
                  unint64_t v150 = v137 + 640;
                  goto LABEL_329;
                case 4:
                  if (v292)
                  {
                    unint64_t *v140 = v137;
                    v140[1] = v137 + 640;
                    unint64_t v150 = v137 + 1920;
LABEL_329:
                    unint64_t v151 = v137 + 1280;
LABEL_330:
                    v140[2] = v150;
                    v140[3] = v151;
                  }
                  else
                  {
                    unint64_t *v140 = v137 + 1920;
                    v140[1] = v137 + 1280;
                    v140[2] = v137;
                    v140[3] = v137 + 640;
                  }
                  goto LABEL_336;
                case 8:
                  goto LABEL_321;
                case 9:
                  if (!v147)
                  {
LABEL_321:
                    if (!v292)
                    {
                      unint64_t *v140 = v137 + 2560;
                      v140[1] = v137;
                      goto LABEL_325;
                    }
                    unint64_t *v140 = v137;
                    v140[1] = v137 + 1280;
                    unint64_t v148 = v137 + 2560;
LABEL_326:
                    v140[2] = v148;
                    goto LABEL_336;
                  }
                  if (v292)
                  {
                    unint64_t v149 = v137 + 2560;
LABEL_320:
                    unint64_t *v140 = v137;
                    v140[1] = v149;
LABEL_325:
                    unint64_t v148 = v137 + 1280;
                    goto LABEL_326;
                  }
                  unint64_t v152 = v137 + 2560;
                  unint64_t v153 = v137 + 1280;
LABEL_334:
                  unint64_t *v140 = v152;
                  v140[1] = v153;
LABEL_335:
                  v140[2] = v137;
LABEL_336:
                  uint64_t v154 = result;
                  *(void *)(v1 + 26008) = *(void *)(v1 + v293);
                  v318[0] = 0;
                  unint64_t v155 = v137;
                  if ((v4 & 0x10000) != 0)
                  {
                    (*(void (**)(uint64_t, unint64_t *, void, unint64_t *, _DWORD *))(v1 + 504))(v1, v140, v296, v142, v318);
                    unint64_t v137 = v155;
                    uint64_t v145 = v142;
                    int v143 = v140;
                    unint64_t v144 = v296;
                    int v23 = v302;
                    unint64_t v304 = v318[0];
                    if (!v318[0]) {
                      goto LABEL_298;
                    }
                  }
                  else
                  {
                    uint64_t v145 = v140;
                    int v140 = v142;
                    unint64_t v304 = v296;
                  }
                  if (v309) {
                    goto LABEL_348;
                  }
                  uint64_t v156 = v21;
                  uint64_t v157 = v145;
                  (*(void (**)(uint64_t, unint64_t *, unint64_t, void, unint64_t *, _DWORD *, uint64_t))(v1 + 480))(v1, v145, v304, v299, v140, v318, 1);
                  if (v318[0])
                  {
                    if (v318[0] >= 1) {
                      uint64_t v145 = v140;
                    }
                    else {
                      uint64_t v145 = v157;
                    }
                    if (v318[0] < 1)
                    {
                      unint64_t v158 = v304;
                    }
                    else
                    {
                      int v140 = v157;
                      unint64_t v158 = v318[0];
                    }
                    unint64_t v304 = v158;
                    uint64_t v21 = v156;
                    uint64_t v54 = v302;
                    unint64_t v137 = v155;
LABEL_348:
                    float32x4_t v314 = v145;
                    if ((v4 & 0x100000) == 0
                      || (v159 = (*(uint64_t (**)(uint64_t, unint64_t *, unint64_t, unsigned int *, float *))(v1 + 520))(v1, v145, v304, &v317, v285), v145 = v314, unint64_t v137 = v155, (v4 & 0x400000) == 0)|| !v159)
                    {
                      unint64_t v160 = v137 + 640 * v306;
                      unint64_t v161 = v295;
                      if ((v4 & 0x40) != 0) {
                        unint64_t v161 = v137 + 640 * v306;
                      }
                      unint64_t v295 = v161;
                      if ((v4 & 0x8000000) != 0)
                      {
                        if ((v4 & 0x100) != 0)
                        {
                          (*(void (**)(uint64_t, unint64_t, uint64_t))(v1
                                                                                     + 16 * (int)(v317 & (v284 >> 31))
                                                                                     + 20160))(v1, v161, 1);
                        }
                        else
                        {
                          if ((v4 & 0x80000) == 0) {
                            goto LABEL_375;
                          }
                          (*(void (**)(uint64_t, unint64_t, uint64_t, void))(v1 + 544))(v1, v161, 1, v317);
                        }
                      }
                      else
                      {
                        if ((v4 & 0x100) == 0)
                        {
                          if ((v4 & 0x80000) != 0 && (int)v304 >= 1)
                          {
                            uint64_t v162 = v304;
                            uint64_t v163 = (uint64_t *)v145;
                            do
                            {
                              uint64_t v164 = *v163++;
                              (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v1 + 544))(v1, v164, 1, v317);
                              --v162;
                            }
                            while (v162);
                            uint64_t result = v305 - 4;
                            int v23 = v302;
                            uint64_t v54 = v302;
                            uint64_t v145 = v314;
                            if ((v4 & 0x40) == 0) {
                              goto LABEL_378;
                            }
                            goto LABEL_376;
                          }
LABEL_375:
                          uint64_t result = v154;
                          if ((v4 & 0x40) == 0) {
                            goto LABEL_378;
                          }
LABEL_376:
                          if (v160 != *v145)
                          {
                            uint64_t v169 = result;
                            (*(void (**)(uint64_t, unint64_t))(v1 + 27912))(v1, v160);
                            uint64_t v145 = v314;
                            uint64_t result = v169;
                          }
LABEL_378:
                          if ((v4 & 0x800000) != 0)
                          {
                            int v171 = (unsigned __int16 *)(v1 + 15524);
                            if (v317) {
                              int v171 = (unsigned __int16 *)(v1 + 15526);
                            }
                            uint64_t v170 = *v171 - 6912;
                            unint64_t v137 = v155;
                            if ((v4 & 0x2000000) == 0)
                            {
LABEL_388:
                              if (v287 || v170 == 2)
                              {
                                if ((v4 & 0x400) != 0)
                                {
                                  uint64_t v179 = result;
                                  (*(void (**)(uint64_t, unint64_t *, unint64_t, uint64_t))(*(void *)(v1 + 19240) + 32))(v1, v145, v304, v170);
                                }
                                else
                                {
                                  if ((v4 & 0x800) != 0)
                                  {
                                    uint64_t v193 = result;
                                    (*(void (**)(uint64_t, unint64_t *, unint64_t))(*(void *)(v1 + 19240) + 40))(v1, v145, v304);
                                    uint64_t v145 = v314;
                                    uint64_t result = v193;
                                    goto LABEL_458;
                                  }
                                  if ((v4 & 0x20000) != 0)
                                  {
                                    uint64_t v204 = (__int16)v297[4];
                                    int32x4_t v206 = v145 + 1;
                                    unint64_t v205 = *v145;
                                    int v207 = v304 - 1;
                                    do
                                    {
                                      v318[0] = 0;
                                      uint64_t v208 = (*(uint64_t (**)(void, uint64_t, _DWORD *))(v1 + 29200))(*(void *)(v1 + 29016), 9, v318);
                                      (*(void (**)(uint64_t, unint64_t, uint64_t))(v1 + 26168))(v1, v205, v208);
                                      unint64_t v209 = v208 + v204;
                                      int v210 = v318[0] - 1;
                                      if (v318[0] - 1 >= v207) {
                                        int v210 = v207;
                                      }
                                      v318[0] = v210;
                                      unint64_t v211 = v209 + (int)v204 * (uint64_t)v210;
                                      --v206;
                                      do
                                      {
                                        uint64_t v212 = v206[1];
                                        ++v206;
                                        (*(void (**)(uint64_t, uint64_t, unint64_t))(v1 + 26168))(v1, v212, v209);
                                        v209 += v204;
                                      }
                                      while (v209 < v211);
                                      int v213 = v318[0];
                                      (*(void (**)(void, uint64_t, uint64_t, void))(v1 + 29208))(*(void *)(v1 + 29016), v170, 9, (v318[0] + 1));
                                      BOOL v86 = v207 == v213;
                                      int v207 = v207 - v213 + 1;
                                    }
                                    while (!v86);
                                    unsigned int v4 = v290;
                                    uint64_t v42 = v305;
                                    uint64_t result = v305 - 4;
                                    int v23 = v302;
                                    uint64_t v21 = v289;
                                    uint64_t v54 = v302;
                                    unint64_t v137 = v155;
                                    int v2 = v297;
                                    uint64_t v145 = v314;
LABEL_300:
                                    v137 += 640 * v54;
                                    int v142 = v140;
                                    int v140 = v145;
                                    if (v137 > v312) {
                                      goto LABEL_129;
                                    }
                                    continue;
                                  }
                                  uint64_t v179 = result;
                                  (*(void (**)(void, unint64_t *, unint64_t, uint64_t))(v1 + 29192))(*(void *)(v1 + 29016), v145, v304, v170);
                                }
                                uint64_t v145 = v314;
                                uint64_t result = v179;
                              }
                              else
                              {
                                int v173 = &v145[(int)v304];
                                if (v170 == 1)
                                {
                                  unint64_t v174 = (unint64_t)(v173 - 1);
                                  if ((unint64_t)v145 >= v174)
                                  {
                                    unint64_t v175 = 0;
                                    int v176 = v145;
                                    char v177 = v281;
                                  }
                                  else
                                  {
                                    unint64_t v175 = 0;
                                    int v176 = v145;
                                    char v177 = v281;
                                    do
                                    {
                                      if ((v281 & 1) != 0 || *(unsigned char *)(*v176 + 1) != 2)
                                      {
                                        if ((v4 & 0x40) != 0 && *v145 != v176[(v292 >> 4) ^ 1])
                                        {
                                          (*(void (**)(uint64_t))(v1 + 27912))(v1);
                                          uint64_t v145 = v314;
                                        }
                                        BOOL v178 = &v140[(int)v175];
                                        *BOOL v178 = *v176;
                                        unint64_t v175 = (v175 + 2);
                                        v178[1] = v176[1];
                                      }
                                      ++v176;
                                    }
                                    while ((unint64_t)v176 < v174);
                                  }
                                  uint64_t v187 = *v176;
                                  if ((v177 & 1) != 0 || *(unsigned char *)(v187 + 1) != 2)
                                  {
                                    int v23 = v302;
                                    if (v273 == 80)
                                    {
                                      (*(void (**)(uint64_t, unint64_t, uint64_t))(v1 + 27912))(v1, *v145, v187);
                                      uint64_t v145 = v314;
                                      uint64_t v187 = *v176;
                                    }
                                    unint64_t v188 = &v140[(int)v175];
                                    *unint64_t v188 = v187;
                                    unint64_t v175 = (v175 + 2);
                                    v188[1] = *v145;
                                    if (!v175) {
                                      goto LABEL_425;
                                    }
                                  }
                                  else
                                  {
                                    int v23 = v302;
                                    if (!v175)
                                    {
LABEL_425:
                                      unint64_t v137 = v155;
                                      unint64_t v304 = 0;
                                      uint64_t result = v305 - 4;
                                      uint64_t v21 = v289;
LABEL_474:
                                      uint64_t v54 = v302;
                                      int v2 = v297;
                                      goto LABEL_300;
                                    }
                                  }
                                  unint64_t v304 = v175;
                                  unint64_t v189 = &v140[(int)v175];
                                  if ((v4 & 0x200000) != 0 && (int)v175 >= 1)
                                  {
                                    float v190 = v316;
                                    float64x2_t v191 = v140;
                                    do
                                    {
                                      uint64_t v192 = *v191++;
                                      *(float *)(v192 + 72) = v190 + *(float *)(v192 + 72);
                                    }
                                    while (v191 < v189);
                                  }
                                  if ((v4 & 0x20000) != 0)
                                  {
                                    uint64_t v194 = (__int16)v297[4];
                                    int v195 = v175;
                                    float64x2_t v196 = v140;
                                    uint64_t v21 = v289;
                                    do
                                    {
                                      v318[0] = 0;
                                      uint64_t v197 = (*(uint64_t (**)(void, uint64_t, _DWORD *))(v1 + 29200))(*(void *)(v1 + 29016), 1, v318);
                                      unint64_t v198 = v197;
                                      int v199 = v318[0];
                                      if (v318[0] > v195)
                                      {
                                        v318[0] = v195;
                                        int v199 = v195;
                                      }
                                      unint64_t v200 = v197 + (int)v194 * (uint64_t)v199;
                                      do
                                      {
                                        uint64_t v201 = *v196++;
                                        (*(void (**)(uint64_t, uint64_t, unint64_t))(v1 + 26168))(v1, v201, v198);
                                        v198 += v194;
                                      }
                                      while (v198 < v200);
                                      v195 -= v318[0];
                                      (*(void (**)(void, uint64_t, uint64_t))(v1 + 29208))(*(void *)(v1 + 29016), 1, 1);
                                    }
                                    while (v195);
                                  }
                                  else
                                  {
                                    (*(void (**)(void, unint64_t *, unint64_t, uint64_t))(v1 + 29184))(*(void *)(v1 + 29016), v140, v175, 1);
                                    uint64_t v21 = v289;
                                  }
                                  if ((v277 & 1) == 0)
                                  {
                                    unsigned int v4 = v290;
                                    uint64_t v42 = v305;
                                    int v23 = v302;
                                    unint64_t v137 = v155;
                                    uint64_t v145 = v314;
                                    if ((int)v304 >= 1)
                                    {
                                      float v202 = v316;
                                      int32x4_t v203 = v140;
                                      int v2 = v297;
                                      do
                                      {
                                        if (!*(unsigned char *)(*v203 + 1)) {
                                          *(float *)(*v203 + 72) = *(float *)(*v203 + 72) - v202;
                                        }
                                        ++v203;
                                      }
                                      while (v203 < v189);
LABEL_472:
                                      uint64_t result = v305 - 4;
                                      uint64_t v54 = v302;
                                      goto LABEL_300;
                                    }
                                    goto LABEL_473;
                                  }
                                  goto LABEL_466;
                                }
                                if ((int)v304 < 1)
                                {
                                  unint64_t v304 = 0;
                                  int v23 = v302;
                                  int v2 = v297;
                                  goto LABEL_300;
                                }
                                unint64_t v180 = 0;
                                int v181 = v145;
                                do
                                {
                                  unint64_t v182 = *v181;
                                  if (!*(unsigned char *)(*v181 + 1))
                                  {
                                    if ((v4 & 0x40) != 0 && *v145 != v182)
                                    {
                                      (*(void (**)(uint64_t))(v1 + 27912))(v1);
                                      uint64_t v145 = v314;
                                      unint64_t v182 = *v181;
                                    }
                                    v140[(int)v180] = v182;
                                    unint64_t v180 = (v180 + 1);
                                  }
                                  ++v181;
                                }
                                while (v181 < v173);
                                int v23 = v302;
                                if (v180)
                                {
                                  unint64_t v304 = v180;
                                  int32x4_t v183 = &v140[(int)v180];
                                  if ((v4 & 0x200000) != 0 && (int)v304 >= 1)
                                  {
                                    float v184 = v316;
                                    unsigned int v185 = v140;
                                    do
                                    {
                                      uint64_t v186 = *v185++;
                                      *(float *)(v186 + 72) = v184 + *(float *)(v186 + 72);
                                    }
                                    while (v185 < v183);
                                  }
                                  if ((v4 & 0x20000) != 0)
                                  {
                                    uint64_t v214 = (__int16)v297[4];
                                    int v215 = v304;
                                    float32x4_t v216 = v140;
                                    do
                                    {
                                      v318[0] = 0;
                                      uint64_t v217 = (*(uint64_t (**)(void, void, _DWORD *))(v1 + 29200))(*(void *)(v1 + 29016), 0, v318);
                                      unint64_t v218 = v217;
                                      int v219 = v318[0];
                                      if (v318[0] > v215)
                                      {
                                        v318[0] = v215;
                                        int v219 = v215;
                                      }
                                      unint64_t v220 = v217 + (int)v214 * (uint64_t)v219;
                                      do
                                      {
                                        uint64_t v221 = *v216++;
                                        (*(void (**)(uint64_t, uint64_t, unint64_t))(v1 + 26168))(v1, v221, v218);
                                        v218 += v214;
                                      }
                                      while (v218 < v220);
                                      v215 -= v318[0];
                                      (*(void (**)(void, void, void))(v1 + 29208))(*(void *)(v1 + 29016), 0, 0);
                                    }
                                    while (v215);
                                  }
                                  else
                                  {
                                    (*(void (**)(void, unint64_t *, unint64_t))(v1 + 29176))(*(void *)(v1 + 29016), v140, v304);
                                  }
                                  if ((v277 & 1) == 0)
                                  {
                                    unsigned int v4 = v290;
                                    uint64_t v42 = v305;
                                    int v23 = v302;
                                    unint64_t v137 = v155;
                                    uint64_t v145 = v314;
                                    if ((int)v304 >= 1)
                                    {
                                      float v222 = v316;
                                      float32x4_t v223 = v140;
                                      int v2 = v297;
                                      do
                                      {
                                        if (!*(unsigned char *)(*v223 + 1)) {
                                          *(float *)(*v223 + 72) = *(float *)(*v223 + 72) - v222;
                                        }
                                        ++v223;
                                      }
                                      while (v223 < v183);
                                      goto LABEL_472;
                                    }
LABEL_473:
                                    uint64_t result = v305 - 4;
                                    goto LABEL_474;
                                  }
LABEL_466:
                                  unsigned int v4 = v290;
                                  uint64_t v42 = v305;
                                  uint64_t result = v305 - 4;
                                  int v23 = v302;
                                  uint64_t v54 = v302;
                                  unint64_t v137 = v155;
                                  int v2 = v297;
                                  uint64_t v145 = v314;
                                  goto LABEL_300;
                                }
                                unint64_t v304 = 0;
                                uint64_t result = v305 - 4;
                                uint64_t v54 = v302;
                              }
LABEL_458:
                              unint64_t v137 = v155;
                              int v2 = v297;
                              goto LABEL_300;
                            }
                          }
                          else
                          {
                            uint64_t v170 = 2;
                            unint64_t v137 = v155;
                            if ((v4 & 0x2000000) == 0) {
                              goto LABEL_388;
                            }
                          }
                          if (v317) {
                            float v172 = 0.0;
                          }
                          else {
                            float v172 = 1.0;
                          }
                          *(float *)(v1 + 9200) = v172;
                          goto LABEL_388;
                        }
                        if ((v4 & 0x80000) != 0)
                        {
                          int v165 = v317;
                          if (v270)
                          {
                            if ((int)v304 >= 1 && (v317 ^ v301) == 1)
                            {
                              uint64_t v166 = v304;
                              BOOL v167 = (uint64_t *)v145;
                              do
                              {
                                uint64_t v168 = *v167++;
                                *(unsigned char *)(v168 + 2) |= 6u;
                                --v166;
                              }
                              while (v166);
                            }
                            int v301 = v165;
                          }
                          (*(void (**)(uint64_t, unint64_t *, unint64_t))(v1
                                                                                                + 16 * v165
                                                                                                + 20192))(v1, v145, v304);
                        }
                        else
                        {
                          (*(void (**)(uint64_t, unint64_t *, unint64_t))(v1 + 20192))(v1, v145, v304);
                        }
                      }
                      uint64_t v145 = v314;
                      goto LABEL_375;
                    }
LABEL_299:
                    int v2 = v297;
                    uint64_t result = v154;
                    goto LABEL_300;
                  }
                  int v143 = v157;
                  int v142 = v140;
                  unint64_t v144 = v304;
                  uint64_t v54 = v302;
                  unint64_t v137 = v155;
LABEL_298:
                  int v140 = v142;
                  uint64_t v145 = v143;
                  unint64_t v304 = v144;
                  goto LABEL_299;
                default:
                  goto LABEL_336;
              }
            }
          }
          unsigned int v298 = v55;
          if ((v4 & 0x100000) != 0)
          {
            int v300 = 0;
            unsigned int v71 = v315;
            if (v42 == 5) {
              unsigned int v71 = 0;
            }
            unsigned int v315 = v71;
            unint64_t v72 = ((unint64_t)v286 << 7) | ((unint64_t)v286 << 9);
            unint64_t v73 = v303 + v72;
            unint64_t v74 = v303 + 640 * (int)v304 + 640 * (int)v274 + v72;
            int v75 = -1;
            unint64_t v308 = v74;
            while (1)
            {
              unsigned int v313 = v75;
              if (v73 <= v74) {
                break;
              }
              int v77 = 0;
              unsigned int v310 = 0;
              unint64_t v78 = v73;
LABEL_166:
              uint64_t v79 = (v77 + v21);
              if ((int)v79 < (int)(v296 - v286))
              {
LABEL_160:
                uint64_t v55 = v298;
                unint64_t v74 = v308;
                int v75 = v313;
LABEL_161:
                int v76 = v300;
                if (v291) {
                  int v76 = 1;
                }
                int v300 = v76;
                if (v73 > v74)
                {
LABEL_285:
                  uint64_t result = v305 - 4;
                  uint64_t v54 = v302;
                  goto LABEL_130;
                }
              }
              else
              {
                int v75 = v313;
                if ((v4 & 0x8000000) != 0)
                {
                  int v88 = v79 - v296 + v286;
                  if ((v4 & 0x100) != 0)
                  {
                    if (v88 < 0) {
                      goto LABEL_231;
                    }
                    int v94 = 0;
                    unint64_t v95 = v78 + v279;
                    do
                    {
                      (*(void (**)(uint64_t, unint64_t, uint64_t))(v1
                                                                                 + 16 * (int)(v313 & (v284 >> 31))
                                                                                 + 20160))(v1, v95, 1);
                      v94 += v302;
                      v95 += v280;
                    }
                    while (v88 >= v94);
                    unint64_t v295 = v95 - 640 * (int)v302;
                    int v2 = v297;
                    unsigned int v4 = v290;
                    uint64_t v42 = v305;
                    uint64_t v21 = v289;
                    goto LABEL_230;
                  }
                  if ((v4 & 0x80000) != 0 && (v88 & 0x80000000) == 0)
                  {
                    int v89 = 0;
                    unint64_t v90 = v78 + v279;
                    do
                    {
                      (*(void (**)(uint64_t, unint64_t, uint64_t, void))(v1 + 544))(v1, v90, 1, v313);
                      v89 += v302;
                      v90 += v280;
                    }
                    while (v88 >= v89);
                    unint64_t v295 = v90 - 640 * (int)v302;
                    unsigned int v4 = v290;
                    uint64_t v42 = v305;
                    uint64_t v21 = v289;
                    int v2 = v297;
                  }
                }
                else
                {
                  if ((v4 & 0x100) != 0)
                  {
                    if ((v4 & 0x80000) != 0) {
                      signed int v91 = v313;
                    }
                    else {
                      signed int v91 = 0;
                    }
                    int v92 = v275;
                    if (!v300) {
                      int v92 = 0;
                    }
                    if (v92 == 1)
                    {
                      if ((v283 & 1) == 0) {
                        *(unsigned char *)(v303 + 2) |= 6u;
                      }
                      *(unsigned char *)(v78 + 2) |= 6u;
                      if ((v278 & 1) == 0) {
                        *(unsigned char *)(v78 + 642) |= 6u;
                      }
                    }
                    uint64_t v93 = v91;
                    if ((v283 & 1) == 0) {
                      (*(void (**)(uint64_t, unint64_t, uint64_t))(v1 + 16 * v91 + 20160))(v1, v303, 1);
                    }
                    (*(void (**)(uint64_t, unint64_t, uint64_t))(v1 + 16 * v93 + 20160))(v1, v78, v79);
LABEL_230:
                    int v75 = v313;
                    goto LABEL_231;
                  }
                  if ((v4 & 0x80000) != 0)
                  {
                    if ((v283 & 1) == 0) {
                      (*(void (**)(uint64_t, unint64_t, uint64_t, void))(v1 + 544))(v1, v303, 1, v313);
                    }
                    int v75 = v313;
                    (*(void (**)(uint64_t, unint64_t, uint64_t, void))(v1 + 544))(v1, v78, v79, v313);
                  }
                }
LABEL_231:
                if ((v4 & 0x2000000) != 0)
                {
                  if (v75) {
                    float v96 = 0.0;
                  }
                  else {
                    float v96 = 1.0;
                  }
                  *(float *)(v1 + 9200) = v96;
                }
                int v23 = v302;
                if (v42 != 5 || !v310)
                {
                  uint64_t v55 = v298;
                  if ((v4 & 0x20000) != 0) {
                    goto LABEL_252;
                  }
LABEL_241:
                  switch(v305)
                  {
                    case 4u:
                      int v100 = *(void (**)(void, unint64_t, uint64_t, uint64_t))(v1 + 29104);
                      goto LABEL_274;
                    case 5u:
                      int v100 = *(void (**)(void, unint64_t, uint64_t, uint64_t))(v1 + 29120);
                      goto LABEL_274;
                    case 6u:
                      uint64_t v123 = v79;
                      uint64_t v124 = v55;
                      (*(void (**)(void, unint64_t, unint64_t, uint64_t, uint64_t))(v1 + 29112))(*(void *)(v1 + 29016), v303, v78, v123, 2);
                      goto LABEL_275;
                    case 7u:
                      int v100 = *(void (**)(void, unint64_t, uint64_t, uint64_t))(v1 + 29128);
                      goto LABEL_274;
                    case 8u:
                      int v100 = *(void (**)(void, unint64_t, uint64_t, uint64_t))(v1 + 29136);
LABEL_274:
                      uint64_t v125 = v79;
                      uint64_t v124 = v55;
                      v100(*(void *)(v1 + 29016), v78, v125, 2);
LABEL_275:
                      int v75 = v313;
                      uint64_t v55 = v124;
                      break;
                    default:
                      break;
                  }
LABEL_276:
                  unint64_t v74 = v308;
                  goto LABEL_161;
                }
                long long v97 = *(void **)(v1 + v282);
                unint64_t v98 = v78 + 1280;
                *long long v97 = v78 + 1280;
                unint64_t v311 = v78 + 640;
                v97[1] = v78 + 640;
                int v99 = v97 + 1;
                v97[2] = v78;
                if ((v4 & 0x20000) != 0)
                {
                  uint64_t v101 = (__int16)v2[4];
                  int v102 = 2;
                  do
                  {
                    v318[0] = 0;
                    uint64_t v103 = (*(uint64_t (**)(void, uint64_t, _DWORD *))(v1 + 29200))(*(void *)(v1 + 29016), 9, v318);
                    (*(void (**)(uint64_t, unint64_t, uint64_t))(v1 + 26168))(v1, v98, v103);
                    unint64_t v104 = v103 + v101;
                    int v105 = v318[0] - 1;
                    if (v318[0] - 1 >= v102) {
                      int v105 = v102;
                    }
                    v318[0] = v105;
                    unint64_t v106 = v104 + (int)v101 * (uint64_t)v105;
                    --v99;
                    do
                    {
                      uint64_t v107 = v99[1];
                      ++v99;
                      (*(void (**)(uint64_t, uint64_t, unint64_t))(v1 + 26168))(v1, v107, v104);
                      v104 += v101;
                    }
                    while (v104 < v106);
                    int v108 = v318[0];
                    (*(void (**)(void, uint64_t, uint64_t, void))(v1 + 29208))(*(void *)(v1 + 29016), 2, 9, (v318[0] + 1));
                    BOOL v86 = v102 == v108;
                    int v102 = v102 - v108 + 1;
                  }
                  while (!v86);
                }
                else
                {
                  (*(void (**)(void))(v1 + 29192))(*(void *)(v1 + 29016));
                }
                if ((int)v79 >= 4)
                {
                  uint64_t v79 = (v79 - 1);
                  unint64_t v78 = v311;
                  int v2 = v297;
                  unsigned int v4 = v290;
                  uint64_t v42 = v305;
                  int v23 = v302;
                  uint64_t v21 = v289;
                  uint64_t v55 = v298;
                  int v75 = v313;
                  if ((v290 & 0x20000) != 0)
                  {
LABEL_252:
                    switch(v305)
                    {
                      case 4u:
                      case 7u:
                        uint64_t v109 = (__int16)v2[4];
                        do
                        {
                          v318[0] = 0;
                          uint64_t v110 = (*(uint64_t (**)(void, uint64_t, _DWORD *))(v1 + 29200))(*(void *)(v1 + 29016), v42, v318);
                          unint64_t v111 = v110;
                          int v112 = v318[0];
                          if (v318[0] > (int)v79)
                          {
                            v318[0] = v79;
                            int v112 = v79;
                          }
                          unint64_t v113 = v110 + (int)v109 * (uint64_t)v112;
                          do
                          {
                            unint64_t v114 = v78;
                            v78 += 640;
                            (*(void (**)(uint64_t, unint64_t, unint64_t))(v1 + 26168))(v1, v114, v111);
                            v111 += v109;
                          }
                          while (v111 < v113);
                          LODWORD(v79) = v79 - v318[0];
                          uint64_t v42 = v305;
                          (*(void (**)(void, uint64_t, void))(v1 + 29208))(*(void *)(v1 + 29016), 2, v305);
                        }
                        while (v79);
                        int v23 = v302;
                        goto LABEL_160;
                      case 5u:
                      case 8u:
                        uint64_t v115 = (__int16)v2[4];
                        do
                        {
                          v318[0] = 0;
                          uint64_t v116 = (*(uint64_t (**)(void, uint64_t, _DWORD *))(v1 + 29200))(*(void *)(v1 + 29016), v42, v318);
                          unint64_t v117 = v116;
                          int v118 = v318[0];
                          if (v318[0] > (int)v79)
                          {
                            v318[0] = v79;
                            int v118 = v79;
                          }
                          unint64_t v119 = v116 + (int)v115 * (uint64_t)v118;
                          do
                          {
                            unint64_t v120 = v78 + 640;
                            (*(void (**)(uint64_t, unint64_t, unint64_t))(v1 + 26168))(v1, v78, v117);
                            v117 += v115;
                            v78 += 640;
                          }
                          while (v117 < v119);
                          int v121 = v318[0];
                          (*(void (**)(void, uint64_t, void, void))(v1 + 29208))(*(void *)(v1 + 29016), 2, v305, v318[0]);
                          unint64_t v78 = v120 - 1280;
                          int v122 = v79 - v121;
                          BOOL v86 = v79 == v121;
                          uint64_t v42 = v305;
                          LODWORD(v79) = v122 + 2;
                        }
                        while (!v86);
                        unsigned int v4 = v290;
                        int v23 = v302;
                        goto LABEL_160;
                      case 6u:
                        uint64_t v126 = (__int16)v2[4];
                        do
                        {
                          v318[0] = 0;
                          uint64_t v127 = (*(uint64_t (**)(void, uint64_t, _DWORD *))(v1 + 29200))(*(void *)(v1 + 29016), 6, v318);
                          (*(void (**)(uint64_t, unint64_t, uint64_t))(v1 + 26168))(v1, v303, v127);
                          unint64_t v128 = v127 + v126;
                          int v129 = v318[0] - 1;
                          if (v318[0] - 1 >= (int)v79) {
                            int v129 = v79;
                          }
                          v318[0] = v129;
                          unint64_t v130 = v128 + (int)v126 * (uint64_t)v129;
                          do
                          {
                            unint64_t v131 = v78 + 640;
                            (*(void (**)(uint64_t, unint64_t, unint64_t))(v1 + 26168))(v1, v78, v128);
                            v128 += v126;
                            v78 += 640;
                          }
                          while (v128 < v130);
                          int v132 = v318[0];
                          (*(void (**)(void, uint64_t, uint64_t, void))(v1 + 29208))(*(void *)(v1 + 29016), 2, 6, (v318[0] + 1));
                          unint64_t v78 = v131 - 640;
                          BOOL v86 = v79 == v132;
                          LODWORD(v79) = v79 - v132 + 1;
                        }
                        while (!v86);
                        unsigned int v4 = v290;
                        uint64_t v42 = v305;
                        int v23 = v302;
                        goto LABEL_160;
                      default:
                        goto LABEL_276;
                    }
                  }
                  goto LABEL_241;
                }
                int v2 = v297;
                unsigned int v4 = v290;
                uint64_t v42 = v305;
                int v23 = v302;
                uint64_t v21 = v289;
                uint64_t v55 = v298;
                unint64_t v74 = v308;
                int v75 = v313;
                if (v73 > v308) {
                  goto LABEL_285;
                }
              }
            }
            unsigned int v310 = 0;
            int v77 = 0;
            unint64_t v78 = v73;
            while (1)
            {
              if ((v4 & 0x4000000) != 0)
              {
                int v82 = *((_DWORD *)v2 + 637);
                *(_DWORD *)(v73 + 640 * v306 + 16) = v82;
                *((_DWORD *)v2 + 637) = v82 + 1;
              }
              if (v42 == 4) {
                break;
              }
              if (v42 == 5)
              {
                int v83 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, unint64_t, void, unsigned int *))(v1 + 528))(v1, v73, v73 + 640, v73 + 1280, v315, &v317);
                if ((v4 & 0x400000) == 0) {
                  goto LABEL_194;
                }
              }
              else
              {
                if (v42 == 7)
                {
                  int v83 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unsigned int *))(v1 + 536))(v1, v73, v73 + 640, v73 + 1280, v73 + 1920, &v317);
                }
                else
                {
                  if (v42 == 6)
                  {
                    int v83 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, unint64_t, void, unsigned int *))(v1 + 528))(v1, v303, v73, v73 + 640, 0, &v317);
LABEL_182:
                    if ((v4 & 0x400000) == 0) {
                      goto LABEL_194;
                    }
                    goto LABEL_193;
                  }
                  int v83 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unsigned int *))(v1 + 536))(v1, v73, v73 + 640, v73 + 1920, v73 + 1280, &v317);
                }
                if ((v4 & 0x400000) == 0) {
                  goto LABEL_194;
                }
              }
LABEL_193:
              if (!v83)
              {
LABEL_194:
                if ((v317 ^ v313) == 1 && v77 > 0) {
                  goto LABEL_166;
                }
                BOOL v85 = v315 == 0;
                if (v42 != 5) {
                  BOOL v85 = v315;
                }
                if (v77) {
                  BOOL v86 = 0;
                }
                else {
                  BOOL v86 = v42 == 5;
                }
                v73 += 640 * v307;
                unsigned int v87 = v310;
                if (v86) {
                  unsigned int v87 = v315;
                }
                unsigned int v310 = v87;
                v77 += v23;
                unsigned int v315 = v85;
                unsigned int v313 = v317;
                unint64_t v81 = v78;
                goto LABEL_177;
              }
              v73 += 640 * v307;
              BOOL v80 = v315;
              if (v42 == 5) {
                BOOL v80 = v315 == 0;
              }
              unsigned int v315 = v80;
              unint64_t v81 = v73;
              if (v77 > 0) {
                goto LABEL_166;
              }
LABEL_177:
              unint64_t v78 = v81;
              if (v73 > v308) {
                goto LABEL_166;
              }
            }
            int v83 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, unint64_t, void, unsigned int *))(v1 + 528))(v1, v73, v73 + 640, v73 + 1280, 0, &v317);
            goto LABEL_182;
          }
          uint64_t v58 = v55;
          if ((v4 & 0x4000000) != 0)
          {
            int v59 = *((_DWORD *)v2 + 637);
            int v60 = ((int)v304 - v268) / v23;
            if (v60 <= 1) {
              uint64_t v61 = 1;
            }
            else {
              uint64_t v61 = v60;
            }
            if (v61 >= 2)
            {
              uint64_t v62 = v61 & 0x7FFFFFFE;
              unint64_t v224 = v303 + 16;
              int v225 = *((_DWORD *)v2 + 637);
              uint64_t v226 = v62;
              uint64_t v63 = 640 * v302;
              do
              {
                *(_DWORD *)(v224 + 640 * (v286 + v306)) = v225;
                *(_DWORD *)(v224 + 640 * (v302 + (unint64_t)(v286 + v306))) = v225 + 1;
                v224 += 1280 * v302;
                v225 += 2;
                v226 -= 2;
              }
              while (v226);
              if (v62 == v61) {
                goto LABEL_480;
              }
            }
            else
            {
              uint64_t v62 = 0;
              uint64_t v63 = 640 * v302;
            }
            uint64_t v227 = v61 - v62;
            float32x4_t v228 = (_DWORD *)(v303
                            + 640
                            * (v286 + v306 + v54 * (unint64_t)v62)
                            + 16);
            int v229 = v59 + v62;
            do
            {
              *float32x4_t v228 = v229;
              float32x4_t v228 = (_DWORD *)((char *)v228 + v63);
              ++v229;
              --v227;
            }
            while (v227);
LABEL_480:
            int v288 = v61;
            *((_DWORD *)v2 + 637) = v60 + v59;
            uint64_t v55 = v58;
          }
          if ((v4 & 0x100) != 0)
          {
            if ((v4 & 0x8000000) != 0)
            {
              if ((int)v286 <= (int)(v304 + v267))
              {
                unint64_t v231 = v303 + 640 * (v306 + v286);
                uint64_t v232 = v54;
                uint64_t v233 = v286;
                do
                {
                  (*(void (**)(uint64_t, unint64_t, uint64_t))(v1 + 20160))(v1, v231, 1);
                  v233 += v232;
                  v231 += v280;
                }
                while ((int)(v304 + v267) >= (int)v233);
                unint64_t v295 = v231 - 640 * (int)v302;
                uint64_t result = v305 - 4;
                uint64_t v54 = v232;
                uint64_t v21 = v289;
                uint64_t v55 = v58;
              }
            }
            else
            {
              uint64_t v230 = result;
              (*(void (**)(uint64_t, unint64_t, unint64_t))(v1 + 20160))(v1, v303, v304);
              uint64_t v55 = v58;
              uint64_t result = v230;
            }
          }
          if ((v4 & 0x20000) != 0)
          {
            int v23 = v302;
            switch((int)result)
            {
              case 0:
              case 3:
                uint64_t v235 = (__int16)v2[4];
                int v236 = v304;
                uint64_t v237 = v42;
                unint64_t v238 = v303;
                do
                {
                  v318[0] = 0;
                  uint64_t v239 = (*(uint64_t (**)(void, uint64_t, _DWORD *))(v1 + 29200))(*(void *)(v1 + 29016), v237, v318);
                  unint64_t v240 = v239;
                  int v241 = v318[0];
                  if (v318[0] > v236)
                  {
                    v318[0] = v236;
                    int v241 = v236;
                  }
                  unint64_t v242 = v239 + (int)v235 * (uint64_t)v241;
                  do
                  {
                    unint64_t v243 = v238;
                    v238 += 640;
                    (*(void (**)(uint64_t, unint64_t, unint64_t))(v1 + 26168))(v1, v243, v240);
                    v240 += v235;
                  }
                  while (v240 < v242);
                  v236 -= v318[0];
                  uint64_t v237 = v305;
                  (*(void (**)(void, uint64_t, void))(v1 + 29208))(*(void *)(v1 + 29016), 2, v305);
                }
                while (v236);
                uint64_t v42 = v305;
                goto LABEL_521;
              case 1:
              case 4:
                uint64_t v244 = (__int16)v2[4];
                uint64_t v245 = v42;
                int v246 = v304;
                unint64_t v247 = v303;
                do
                {
                  v318[0] = 0;
                  uint64_t v248 = (*(uint64_t (**)(void, uint64_t, _DWORD *))(v1 + 29200))(*(void *)(v1 + 29016), v245, v318);
                  unint64_t v249 = v248;
                  int v250 = v318[0];
                  if (v318[0] > v246)
                  {
                    v318[0] = v246;
                    int v250 = v246;
                  }
                  unint64_t v251 = v248 + (int)v244 * (uint64_t)v250;
                  do
                  {
                    unint64_t v252 = v247 + 640;
                    (*(void (**)(uint64_t, unint64_t, unint64_t))(v1 + 26168))(v1, v247, v249);
                    v249 += v244;
                    v247 += 640;
                  }
                  while (v249 < v251);
                  int v253 = v318[0];
                  uint64_t v245 = v305;
                  (*(void (**)(void, uint64_t, void, void))(v1 + 29208))(*(void *)(v1 + 29016), 2, v305, v318[0]);
                  unint64_t v247 = v252 - 1280;
                  BOOL v86 = v246 == v253;
                  int v246 = v246 - v253 + 2;
                }
                while (!v86);
                unsigned int v4 = v290;
                uint64_t v42 = v305;
                goto LABEL_521;
              case 2:
                unint64_t v255 = v303 + 640;
                int v256 = v304 - 1;
                uint64_t v257 = (__int16)v2[4];
                do
                {
                  v318[0] = 0;
                  uint64_t v258 = (*(uint64_t (**)(void, uint64_t, _DWORD *))(v1 + 29200))(*(void *)(v1 + 29016), 6, v318);
                  (*(void (**)(uint64_t, unint64_t, uint64_t))(v1 + 26168))(v1, v303, v258);
                  unint64_t v259 = v258 + v257;
                  int v260 = v318[0] - 1;
                  if (v318[0] - 1 >= v256) {
                    int v260 = v256;
                  }
                  v318[0] = v260;
                  unint64_t v261 = v259 + (int)v257 * (uint64_t)v260;
                  do
                  {
                    unint64_t v262 = v255 + 640;
                    (*(void (**)(uint64_t, unint64_t, unint64_t))(v1 + 26168))(v1, v255, v259);
                    v259 += v257;
                    v255 += 640;
                  }
                  while (v259 < v261);
                  int v263 = v318[0];
                  (*(void (**)(void, uint64_t, uint64_t, void))(v1 + 29208))(*(void *)(v1 + 29016), 2, 6, (v318[0] + 1));
                  unint64_t v255 = v262 - 640;
                  BOOL v86 = v256 == v263;
                  int v256 = v256 - v263 + 1;
                }
                while (!v86);
                unsigned int v4 = v290;
                uint64_t v42 = v305;
LABEL_521:
                uint64_t result = v305 - 4;
                int v23 = v302;
                uint64_t v55 = v298;
                uint64_t v54 = v302;
                break;
              default:
                break;
            }
          }
          else
          {
            int v23 = v302;
            switch((int)result)
            {
              case 0:
                float32x4_t v234 = *(void (**)(void, unint64_t, unint64_t, uint64_t))(v1 + 29104);
                goto LABEL_511;
              case 1:
                float32x4_t v234 = *(void (**)(void, unint64_t, unint64_t, uint64_t))(v1 + 29120);
                goto LABEL_511;
              case 2:
                uint64_t v254 = result;
                (*(void (**)(void, unint64_t, unint64_t, void, uint64_t))(v1 + 29112))(*(void *)(v1 + 29016), v303, v303 + 640, (v304 - 1), 2);
                goto LABEL_512;
              case 3:
                float32x4_t v234 = *(void (**)(void, unint64_t, unint64_t, uint64_t))(v1 + 29128);
                goto LABEL_511;
              case 4:
                float32x4_t v234 = *(void (**)(void, unint64_t, unint64_t, uint64_t))(v1 + 29136);
LABEL_511:
                uint64_t v254 = result;
                v234(*(void *)(v1 + 29016), v303, v304, 2);
LABEL_512:
                uint64_t v55 = v58;
                uint64_t result = v254;
                break;
              default:
                break;
            }
          }
LABEL_130:
          ++v288;
        }
      }
LABEL_524:
      if ((v4 & 0x100) != 0)
      {
        uint64_t v264 = *(void *)(v1 + 1424);
        if (*(void *)(v264 + 512) || (uint64_t v265 = *(void *)(v1 + 1432), *(void *)(v265 + 512)))
        {
          uint64_t v266 = *(void *)(v1 + 19240);
          if ((__int16)v2[1268] < 0) {
            return (*(uint64_t (**)(uint64_t))(v266 + 56))(v1);
          }
          else {
            return (*(uint64_t (**)(uint64_t))(v266 + 48))(v1);
          }
        }
        else
        {
          *(_DWORD *)(v264 + 500) = 0;
          *(_DWORD *)(v265 + 500) = 0;
        }
      }
      return result;
    case 0xEu:
      uint64_t v24 = (int)v304 / *(unsigned __int8 *)(result + 17724) * *(unsigned __int8 *)(result + 17724);
      goto LABEL_45;
    default:
      goto LABEL_46;
  }
}

uint64_t gleLLVMVecPrimPolyRender(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = (__int16 *)(result + 26132);
  unsigned int v4 = *(_DWORD *)(result + 32 * *(__int16 *)(result + 28662) + 28184);
  unsigned int v3 = *(_DWORD *)(result + 32 * *(__int16 *)(result + 28662) + 28188);
  *(void *)(result + 28144) = *(void *)(result + 32 * *(__int16 *)(result + 28662) + 28160);
  unsigned int v127 = 0;
  if ((v4 & 0x3008) != 0x2000)
  {
    unint64_t v5 = *(void *)(result + 26000);
    uint64_t v6 = (uint64_t)(*(void *)(result + 26008) - v5) / (4 * v3);
    switch((v3 >> 8) & 0xF)
    {
      case 1u:
        goto LABEL_18;
      case 3u:
        if ((int)v6 <= 1) {
          break;
        }
        goto LABEL_20;
      case 4u:
        uint64_t v6 = (3 * ((int)v6 / 3));
        if ((int)v6 < 1) {
          break;
        }
        goto LABEL_20;
      case 5u:
      case 6u:
      case 9u:
        if ((int)v6 <= 2) {
          break;
        }
        goto LABEL_20;
      case 7u:
      case 0xAu:
        uint64_t v6 = ((uint64_t)(*(void *)(result + 26008) - v5) / (4 * v3)) & 0xFFFFFFFCLL;
        if ((int)v6 < 1) {
          break;
        }
        goto LABEL_20;
      case 8u:
        if ((int)v6 <= 3) {
          break;
        }
        goto LABEL_18;
      case 0xBu:
        if ((int)v6 <= 3) {
          break;
        }
        goto LABEL_20;
      case 0xCu:
        uint64_t v6 = (6 * ((int)v6 / 6));
        if ((int)v6 < 1) {
          break;
        }
        goto LABEL_20;
      case 0xDu:
        if ((int)v6 <= 5) {
          break;
        }
LABEL_18:
        uint64_t v6 = ((uint64_t)(*(void *)(result + 26008) - v5) / (4 * v3)) & 0xFFFFFFFELL;
LABEL_19:
        if ((int)v6 < 1) {
          break;
        }
LABEL_20:
        if ((v4 & 0x200) != 0)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 24200))(result, *(void *)(result + 26000), v6);
          unsigned int v8 = result;
          unint64_t v5 = *(void *)(v1 + 26032);
          if ((v4 & 0x20) == 0) {
            goto LABEL_25;
          }
        }
        else
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 20096))(result, *(void *)(result + 26000), v6);
          unsigned int v8 = result;
          if ((v4 & 0x20) == 0) {
            goto LABEL_25;
          }
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v1 + 24352))(v1, v5, v6);
        unsigned int v8 = result;
LABEL_25:
        if ((v4 & 8) != 0)
        {
          unsigned int v9 = v6;
          switch((unsigned __int16)v3 >> 12)
          {
            case 1:
              unsigned int v9 = v6 >> 1;
              break;
            case 3:
              unsigned int v9 = v6 - 1;
              break;
            case 4:
              unsigned int v9 = v6 / 3;
              break;
            case 5:
            case 6:
            case 9:
              unsigned int v9 = v6 - 2;
              break;
            case 7:
            case 10:
              unsigned int v9 = v6 >> 2;
              break;
            case 8:
              int v11 = v6 - 2;
              BOOL v10 = (int)v6 < 2;
              int v12 = v6 - 1;
              goto LABEL_40;
            case 11:
              unsigned int v9 = v6 - 3;
              break;
            case 12:
              unsigned int v9 = v6 / 6;
              break;
            case 13:
              int v11 = v6 - 4;
              BOOL v10 = (int)v6 < 4;
              int v12 = v6 - 3;
LABEL_40:
              if (v10) {
                int v11 = v12;
              }
              unsigned int v9 = v11 >> 1;
              break;
            default:
              break;
          }
          *(_DWORD *)(v1 + 25976) += v9;
          if ((v4 & 0x2000) != 0) {
            break;
          }
        }
        else if ((v4 & 0x2000) != 0)
        {
          break;
        }
        if ((v4 & 0x1000000) == 0 && v8 > 0xFF) {
          break;
        }
        if ((v4 & 0x4000) != 0)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v1 + 20112))(v1, v5, v6);
          if ((v4 & 0x8000) == 0)
          {
LABEL_48:
            if ((v4 & 0x80) == 0) {
              goto LABEL_49;
            }
            goto LABEL_58;
          }
        }
        else if ((v4 & 0x8000) == 0)
        {
          goto LABEL_48;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v1 + 20128))(v1, v5, v6);
        if ((v4 & 0x80) == 0)
        {
LABEL_49:
          if ((v4 & 0x4000000) == 0) {
            goto LABEL_51;
          }
          goto LABEL_50;
        }
LABEL_58:
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v1 + 20144))(v1, v5, v6);
        if ((v4 & 0x4000000) != 0) {
LABEL_50:
        }
          *(_DWORD *)(v5 + 16) = 0;
LABEL_51:
        if ((v4 & 0x10C00) == 0 && ((v4 & 0x1000000) != 0 || !(_BYTE)v8))
        {
          HIDWORD(v126) = 0;
          if ((v4 & 0x100000) != 0)
          {
            uint64_t v35 = (v4 & 0x200000) != 0 ? (char *)&v126 + 4 : 0;
            uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, unsigned int *, char *))(v1 + 512))(v1, v5, v6, &v127, v35);
            if ((v4 & 0x400000) != 0)
            {
              if (result) {
                break;
              }
            }
          }
          if ((v4 & 0x100) != 0)
          {
            if ((v4 & 0x8000000) != 0) {
              uint64_t v36 = 1;
            }
            else {
              uint64_t v36 = v6;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v1
                                                                                   + 16
                                                                                   * (int)(v127 & ((int)(v4 << 12) >> 31))
                                                                                   + 20160))(v1, v5, v36);
          }
          else if ((v4 & 0x80000) != 0)
          {
            if ((v4 & 0x8000000) != 0) {
              uint64_t v34 = 1;
            }
            else {
              uint64_t v34 = v6;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, void))(v1 + 544))(v1, v5, v34, v127);
          }
          if ((v4 & 0x800000) != 0)
          {
            uint64_t v38 = (unsigned __int16 *)(v1 + 15526);
            if (!v127) {
              uint64_t v38 = (unsigned __int16 *)(v1 + 15524);
            }
            int v37 = *v38 - 6912;
          }
          else
          {
            int v37 = 2;
          }
          if ((v4 & 0x2000000) != 0 && v127 == 1) {
            *(_DWORD *)(v1 + 9200) = 0;
          }
          int v125 = v4 & 0x2000000;
          if (v37 == 1)
          {
            uint64_t v64 = *((unsigned char *)v2 + 2536) == 0;
            unint64_t v65 = *(uint64_t **)(v1 + 26088);
            unint64_t v66 = v5 + 640 * v6 - 640;
            if (v5 >= v66)
            {
              int v68 = 0;
              unint64_t v70 = v5;
            }
            else
            {
              BOOL v123 = *((unsigned char *)v2 + 2536) == 0;
              uint64_t v67 = 0;
              int v68 = 0;
              unint64_t v69 = v65 + 1;
              do
              {
                if ((v4 & 0x40) != 0
                  && ((((v4 & 0x10) == 0) << 7) | ((unint64_t)((v4 & 0x10) == 0) << 9)) + v67)
                {
                  (*(void (**)(uint64_t, unint64_t, unint64_t))(v1 + 27912))(v1, v5, v5+ ((((v4 & 0x10) == 0) << 7) | ((unint64_t)((v4 & 0x10) == 0) << 9))+ v67);
                }
                *(v69 - 1) = v5 + v67;
                *unint64_t v69 = v5 + v67 + 640;
                v69 += 2;
                v68 += 2;
                v67 += 640;
                unint64_t v70 = v5 + v67;
              }
              while (v5 + v67 < v66);
              uint64_t v64 = v123;
            }
            if ((~v4 & 0x50) == 0) {
              (*(void (**)(uint64_t, unint64_t, unint64_t))(v1 + 27912))(v1, v5, v70);
            }
            v65[v68] = v70;
            uint64_t v98 = (v68 + 2);
            v65[v68 | 1u] = v5;
            if ((v4 & 0x200000) != 0)
            {
              float v99 = *((float *)&v126 + 1);
              int v100 = v65;
              do
              {
                uint64_t v101 = *v100++;
                *(float *)(v101 + 72) = v99 + *(float *)(v101 + 72);
              }
              while (v100 < &v65[v98]);
            }
            if ((v4 & 0x20000) != 0)
            {
              uint64_t v102 = *v2;
              do
              {
                int v128 = 0;
                uint64_t v103 = (*(uint64_t (**)(void, uint64_t, int *))(v1 + 29200))(*(void *)(v1 + 29016), 1, &v128);
                unint64_t v104 = v103;
                int v105 = v128;
                if (v128 > (int)v98)
                {
                  int v128 = v98;
                  int v105 = v98;
                }
                unint64_t v106 = v103 + (int)v102 * (uint64_t)v105;
                do
                {
                  uint64_t v107 = *v65++;
                  (*(void (**)(uint64_t, uint64_t, unint64_t))(v1 + 26168))(v1, v107, v104);
                  v104 += v102;
                }
                while (v104 < v106);
                LODWORD(v98) = v98 - v128;
                uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(v1 + 29208))(*(void *)(v1 + 29016), v64, 1);
              }
              while (v98);
            }
            else
            {
              uint64_t result = (*(uint64_t (**)(void, uint64_t *, uint64_t, uint64_t))(v1 + 29184))(*(void *)(v1 + 29016), v65, v98, v64);
            }
          }
          else if (v37 == 2)
          {
            if ((v4 & 0x20000) != 0)
            {
              unint64_t v89 = v5 + 640;
              int v90 = v6 - 1;
              uint64_t v91 = *v2;
              do
              {
                int v128 = 0;
                uint64_t v92 = (*(uint64_t (**)(void, uint64_t, int *))(v1 + 29200))(*(void *)(v1 + 29016), 9, &v128);
                (*(void (**)(uint64_t, unint64_t, uint64_t))(v1 + 26168))(v1, v5, v92);
                unint64_t v93 = v92 + v91;
                int v94 = v128 - 1;
                if (v128 - 1 >= v90) {
                  int v94 = v90;
                }
                int v128 = v94;
                unint64_t v95 = v93 + (int)v91 * (uint64_t)v94;
                do
                {
                  unint64_t v96 = v89 + 640;
                  (*(void (**)(uint64_t, unint64_t, unint64_t))(v1 + 26168))(v1, v89, v93);
                  v93 += v91;
                  v89 += 640;
                }
                while (v93 < v95);
                int v97 = v128;
                uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(v1 + 29208))(*(void *)(v1 + 29016), 2, 9, (v128 + 1));
                unint64_t v89 = v96 - 640;
                BOOL v88 = v90 == v97;
                int v90 = v90 - v97 + 1;
              }
              while (!v88);
            }
            else
            {
              uint64_t result = (*(uint64_t (**)(void, unint64_t, uint64_t, uint64_t))(v1 + 29096))(*(void *)(v1 + 29016), v5, v6, 2);
            }
          }
          else
          {
            uint64_t v71 = 0;
            uint64_t v72 = 0;
            unint64_t v73 = *(uint64_t **)(v1 + 26088);
            do
            {
              uint64_t v74 = v72;
              if ((v4 & 0x40) != 0 && v71) {
                uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(v1 + 27912))(v1, v5, v5 + v71);
              }
              ++v72;
              v73[v74] = v5 + v71;
              v71 += 640;
            }
            while (v5 + v71 < v5 + 640 * v6);
            if (v72)
            {
              if ((v4 & 0x200000) != 0)
              {
                v7.n128_u32[0] = HIDWORD(v126);
                int v75 = v73;
                do
                {
                  uint64_t v76 = *v75++;
                  *(float *)(v76 + 72) = v7.n128_f32[0] + *(float *)(v76 + 72);
                }
                while (v75 < &v73[v72]);
              }
              if ((v4 & 0x20000) != 0)
              {
                uint64_t v114 = *v2;
                do
                {
                  int v128 = 0;
                  uint64_t v115 = (*(uint64_t (**)(void, void, int *))(v1 + 29200))(*(void *)(v1 + 29016), 0, &v128);
                  unint64_t v116 = v115;
                  int v117 = v128;
                  if (v128 > (int)v72)
                  {
                    int v128 = v72;
                    int v117 = v72;
                  }
                  unint64_t v118 = v115 + (int)v114 * (uint64_t)v117;
                  do
                  {
                    uint64_t v119 = *v73++;
                    (*(void (**)(uint64_t, uint64_t, unint64_t))(v1 + 26168))(v1, v119, v116);
                    v116 += v114;
                  }
                  while (v116 < v118);
                  LODWORD(v72) = v72 - v128;
                  uint64_t result = (*(uint64_t (**)(void, void, void))(v1 + 29208))(*(void *)(v1 + 29016), 0, 0);
                }
                while (v72);
              }
              else
              {
                uint64_t result = (*(uint64_t (**)(void, uint64_t *, uint64_t, __n128))(v1 + 29176))(*(void *)(v1 + 29016), v73, v74 + 1, v7);
              }
            }
          }
          goto LABEL_250;
        }
        uint64_t v126 = 0;
        unint64_t v13 = *(int64x2_t **)(v1 + 26088);
        long long v14 = *(uint64_t **)(v1 + 26096);
        if (v6 < 4)
        {
          uint64_t v15 = 0;
LABEL_63:
          uint64_t v23 = v6 - v15;
          uint64_t v24 = (unint64_t *)v13 + v15;
          unint64_t v25 = v5 + 640 * v15;
          do
          {
            *v24++ = v25;
            v25 += 640;
            --v23;
          }
          while (v23);
          goto LABEL_65;
        }
        uint64_t v15 = v6 & 0xFFFFFFFC;
        __n128 v7 = (__n128)xmmword_227DC26B0;
        uint64_t v16 = v13 + 1;
        int64x2_t v17 = vdupq_n_s64(v5);
        int64x2_t v18 = vdupq_n_s64(0x500uLL);
        int64x2_t v19 = vdupq_n_s64(4uLL);
        uint64_t v20 = v15;
        do
        {
          v21.i64[0] = 640 * v7.n128_u64[0];
          v21.i64[1] = 640 * v7.n128_u64[1];
          int64x2_t v22 = vaddq_s64(v17, v21);
          v16[-1] = v22;
          *uint64_t v16 = vaddq_s64(v22, v18);
          __n128 v7 = (__n128)vaddq_s64((int64x2_t)v7, v19);
          v16 += 2;
          v20 -= 4;
        }
        while (v20);
        if (v15 != v6) {
          goto LABEL_63;
        }
LABEL_65:
        if ((v4 & 0x200) != 0) {
          *(void *)(v1 + 26008) = *(void *)(v1 + 26000);
        }
        if ((v4 & 0x10000) != 0)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, int64x2_t *, uint64_t, uint64_t *, char *, __n128))(v1 + 504))(v1, v13, v6, v14, (char *)&v126 + 4, v7);
          uint64_t v6 = HIDWORD(v126);
          if (!HIDWORD(v126)) {
            break;
          }
          uint64_t v26 = 1;
          uint64_t v27 = v14;
          long long v14 = (uint64_t *)v13;
        }
        else
        {
          uint64_t v26 = 0;
          uint64_t v27 = (uint64_t *)v13;
        }
        if ((v4 & 0x1000000) == 0 && (_BYTE)v8)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, void, uint64_t *, char *, uint64_t, __n128))(v1 + 480))(v1, v27, v6, v8, v14, (char *)&v126 + 4, v26, v7);
          if (!HIDWORD(v126)) {
            break;
          }
          if (SHIDWORD(v126) >= 1) {
            unint64_t v28 = v14;
          }
          else {
            unint64_t v28 = v27;
          }
          if (SHIDWORD(v126) < 1)
          {
            uint64_t v6 = v6;
          }
          else
          {
            long long v14 = v27;
            uint64_t v6 = HIDWORD(v126);
          }
          uint64_t v27 = v28;
        }
        if ((v4 & 0x100000) == 0
          || ((v4 & 0x200000) != 0 ? (int v29 = &v126) : (int v29 = 0),
              (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, unsigned int *, uint64_t *, __n128))(v1 + 520))(v1, v27, v6, &v127, v29, v7), (v4 & 0x400000) == 0)|| !result))
        {
          if ((v4 & 0x100) != 0)
          {
            uint64_t v33 = v1 + 16 * (int)(v127 & ((int)(v4 << 12) >> 31));
            if ((v4 & 0x8000000) != 0) {
              uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, __n128))(v33 + 20160))(v1, v5, 1, v7);
            }
            else {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, __n128))(v33 + 20192))(v1, v27, v6, v7);
            }
          }
          else if ((v4 & 0x80000) != 0)
          {
            if ((v4 & 0x8000000) != 0)
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, void, __n128))(v1 + 544))(v1, v5, 1, v127, v7);
            }
            else if ((int)v6 >= 1)
            {
              uint64_t v30 = v6;
              BOOL v31 = v27;
              do
              {
                uint64_t v32 = *v31++;
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, __n128))(v1 + 544))(v1, v32, 1, v127, v7);
                --v30;
              }
              while (v30);
            }
          }
          if ((v4 & 0x40) != 0 && v5 != *v27) {
            uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, __n128))(v1 + 27912))(v1, v5, v7);
          }
          if ((v4 & 0x800000) != 0)
          {
            int v40 = (unsigned __int16 *)(v1 + 15526);
            if (!v127) {
              int v40 = (unsigned __int16 *)(v1 + 15524);
            }
            uint64_t v39 = *v40 - 6912;
          }
          else
          {
            uint64_t v39 = 2;
          }
          if ((v4 & 0x2000000) != 0 && v127 == 1) {
            *(_DWORD *)(v1 + 9200) = 0;
          }
          int v125 = v4 & 0x2000000;
          if ((v4 & 0xC00) != 0 || v39 == 2)
          {
            if ((v4 & 0xC00) != 0 && v39 == 1)
            {
              if (*((unsigned char *)v2 + 2536)) {
                uint64_t v39 = 3;
              }
              else {
                uint64_t v39 = 1;
              }
            }
            if ((v4 & 0x400) != 0)
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, __n128))(*(void *)(v1 + 19240)
                                                                                               + 32))(v1, v27, v6, v39, v7);
            }
            else if ((v4 & 0x800) != 0)
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, __n128))(*(void *)(v1 + 19240) + 40))(v1, v27, v6, v7);
            }
            else if ((v4 & 0x20000) != 0)
            {
              uint64_t v77 = *v2;
              uint64_t v80 = *v27;
              uint64_t v79 = v27 + 1;
              uint64_t v78 = v80;
              int v81 = v6 - 1;
              do
              {
                int v128 = 0;
                uint64_t v82 = (*(uint64_t (**)(void, uint64_t, int *, __n128))(v1 + 29200))(*(void *)(v1 + 29016), 9, &v128, v7);
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 26168))(v1, v78, v82);
                unint64_t v83 = v82 + v77;
                int v84 = v128 - 1;
                if (v128 - 1 >= v81) {
                  int v84 = v81;
                }
                int v128 = v84;
                unint64_t v85 = v83 + (int)v77 * (uint64_t)v84;
                --v79;
                do
                {
                  uint64_t v86 = v79[1];
                  ++v79;
                  (*(void (**)(uint64_t, uint64_t, unint64_t))(v1 + 26168))(v1, v86, v83);
                  v83 += v77;
                }
                while (v83 < v85);
                int v87 = v128;
                uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(v1 + 29208))(*(void *)(v1 + 29016), v39, 9, (v128 + 1));
                BOOL v88 = v81 == v87;
                int v81 = v81 - v87 + 1;
              }
              while (!v88);
            }
            else
            {
              uint64_t result = (*(uint64_t (**)(void, uint64_t *, uint64_t, uint64_t, __n128))(v1 + 29192))(*(void *)(v1 + 29016), v27, v6, v39, v7);
            }
          }
          else if (v39 == 1)
          {
            unint64_t v41 = (unint64_t)&v27[(int)v6 - 1];
            BOOL v124 = *((unsigned char *)v2 + 2536) == 0;
            int v42 = 0;
            if ((unint64_t)v27 >= v41)
            {
              BOOL v44 = v27;
            }
            else
            {
              int v43 = v14 + 1;
              BOOL v44 = v27;
              do
              {
                if ((v4 & 0x40) != 0 && *v27 != v44[~(v4 >> 4) & 1]) {
                  (*(void (**)(uint64_t, __n128))(v1 + 27912))(v1, v7);
                }
                *(v43 - 1) = *v44;
                uint64_t v45 = v44[1];
                ++v44;
                void *v43 = v45;
                v43 += 2;
                v42 += 2;
              }
              while ((unint64_t)v44 < v41);
            }
            uint64_t v52 = *v44;
            if ((~v4 & 0x50) == 0)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v1 + 27912))(v1, *v27, v52, v7);
              uint64_t v52 = *v44;
            }
            unsigned int v53 = v42 | 1;
            v14[v42] = v52;
            uint64_t v54 = (v42 + 2);
            v14[v53] = *v27;
            if ((v4 & 0x200000) != 0)
            {
              float v55 = *(float *)&v126;
              int v56 = v14;
              do
              {
                uint64_t v57 = *v56++;
                *(float *)(v57 + 72) = v55 + *(float *)(v57 + 72);
              }
              while (v56 < &v14[v54]);
            }
            if ((v4 & 0x20000) != 0)
            {
              uint64_t v58 = *v2;
              do
              {
                int v128 = 0;
                uint64_t v59 = (*(uint64_t (**)(void, uint64_t, int *))(v1 + 29200))(*(void *)(v1 + 29016), 1, &v128);
                unint64_t v60 = v59;
                int v61 = v128;
                if (v128 > (int)v54)
                {
                  int v128 = v54;
                  int v61 = v54;
                }
                unint64_t v62 = v59 + (int)v58 * (uint64_t)v61;
                do
                {
                  uint64_t v63 = *v14++;
                  (*(void (**)(uint64_t, uint64_t, unint64_t))(v1 + 26168))(v1, v63, v60);
                  v60 += v58;
                }
                while (v60 < v62);
                LODWORD(v54) = v54 - v128;
                uint64_t result = (*(uint64_t (**)(void, BOOL, uint64_t))(v1 + 29208))(*(void *)(v1 + 29016), v124, 1);
              }
              while (v54);
            }
            else
            {
              uint64_t result = (*(uint64_t (**)(void, uint64_t *, uint64_t, BOOL))(v1 + 29184))(*(void *)(v1 + 29016), v14, v54, v124);
            }
          }
          else if ((int)v6 >= 1)
          {
            uint64_t v46 = 0;
            uint64_t v47 = &v27[(int)v6];
            uint64_t v48 = v27;
            do
            {
              uint64_t v49 = *v48;
              if (!*(unsigned char *)(*v48 + 1))
              {
                if ((v4 & 0x40) != 0 && *v27 != v49)
                {
                  uint64_t result = (*(uint64_t (**)(uint64_t, __n128))(v1 + 27912))(v1, v7);
                  uint64_t v49 = *v48;
                }
                v14[(int)v46] = v49;
                uint64_t v46 = (v46 + 1);
              }
              ++v48;
            }
            while (v48 < v47);
            if (v46)
            {
              if ((v4 & 0x200000) != 0 && (int)v46 >= 1)
              {
                v7.n128_u32[0] = v126;
                int v50 = v14;
                do
                {
                  uint64_t v51 = *v50++;
                  *(float *)(v51 + 72) = v7.n128_f32[0] + *(float *)(v51 + 72);
                }
                while (v50 < &v14[(int)v46]);
              }
              if ((v4 & 0x20000) != 0)
              {
                uint64_t v108 = *v2;
                do
                {
                  int v128 = 0;
                  uint64_t v109 = (*(uint64_t (**)(void, void, int *, __n128))(v1 + 29200))(*(void *)(v1 + 29016), 0, &v128, v7);
                  unint64_t v110 = v109;
                  int v111 = v128;
                  if (v128 > (int)v46)
                  {
                    int v128 = v46;
                    int v111 = v46;
                  }
                  unint64_t v112 = v109 + (int)v108 * (uint64_t)v111;
                  do
                  {
                    uint64_t v113 = *v14++;
                    (*(void (**)(uint64_t, uint64_t, unint64_t))(v1 + 26168))(v1, v113, v110);
                    v110 += v108;
                  }
                  while (v110 < v112);
                  LODWORD(v46) = v46 - v128;
                  uint64_t result = (*(uint64_t (**)(void, void, void))(v1 + 29208))(*(void *)(v1 + 29016), 0, 0);
                }
                while (v46);
              }
              else
              {
                uint64_t result = (*(uint64_t (**)(void, uint64_t *, uint64_t, __n128))(v1 + 29176))(*(void *)(v1 + 29016), v14, v46, v7);
              }
            }
          }
LABEL_250:
          if (v125 && v127 == 1) {
            *(_DWORD *)(v1 + 9200) = 1065353216;
          }
          break;
        }
        break;
      case 0xEu:
        uint64_t v6 = (int)v6 / *(unsigned __int8 *)(result + 17724) * *(unsigned __int8 *)(result + 17724);
        if ((int)v6 < 1) {
          break;
        }
        goto LABEL_20;
      default:
        goto LABEL_19;
    }
  }
  if ((v4 & 0x100) != 0)
  {
    uint64_t v120 = *(void *)(v1 + 1424);
    if (*(void *)(v120 + 512) || (uint64_t v121 = *(void *)(v1 + 1432), *(void *)(v121 + 512)))
    {
      uint64_t v122 = *(void *)(v1 + 19240);
      if (v2[1264] < 0) {
        return (*(uint64_t (**)(uint64_t))(v122 + 56))(v1);
      }
      else {
        return (*(uint64_t (**)(uint64_t))(v122 + 48))(v1);
      }
    }
    else
    {
      *(_DWORD *)(v120 + 500) = 0;
      *(_DWORD *)(v121 + 500) = 0;
    }
  }
  return result;
}

uint64_t gleSetProjectionFunc(float32x4_t *a1, unint64_t a2, int a3, double a4, double a5, int32x4_t a6, double a7, double a8, double a9, int8x16_t a10, int32x4_t a11)
{
  int v11 = a1 + 1106;
  if (a1[782].i8[6]) {
    int v12 = 2304;
  }
  else {
    int v12 = 256;
  }
  if (a1[956].i16[3] == 4353) {
    v12 |= 8u;
  }
  if (a1[950].i8[5]) {
    int v13 = v12 | 0x10;
  }
  else {
    int v13 = v12;
  }
  if (a1[1106].i8[3]) {
    v13 |= (v11->u8[0] << 16) | 0x2020;
  }
  if (a1[1106].i8[1])
  {
    if (a1[1106].i8[2]) {
      int v14 = 9216;
    }
    else {
      int v14 = 0x2000;
    }
    int v15 = v14 | (v11->u8[0] << 16) | v13;
  }
  else
  {
    unsigned int v16 = a1[1857].u32[1];
    if ((v13 & ((v16 & 0x3030303) == 50529026)) != 0) {
      v13 |= 4u;
    }
    if ((v13 & 2) != 0) {
      unsigned int v16 = v16 & 0xFFFF00FF | 0xFB00;
    }
    int v17 = v13 | 0x2000;
    if ((~v16 & 0x3FCFF3FC) == 0) {
      int v17 = v13 | 0x1000;
    }
    if (v16 == -1074791426) {
      int v15 = v13;
    }
    else {
      int v15 = v17;
    }
  }
  a1[1256].i64[0] = (uint64_t)gleLLVMVecProjectionTransform;
  a1[1256].i64[1] = (uint64_t)gleLLVMVecProjectionTransform;
  a1[1274].i32[1] = v15;
  return gleLLVMVecProjection(a1, a2, a3, v15, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t gleSetProjectionRPosFunc(float32x4_t *a1, unint64_t a2, int a3, double a4, double a5, int32x4_t a6, double a7, double a8, double a9, int8x16_t a10, int32x4_t a11)
{
  int v11 = a1 + 1106;
  if (a1[1280].i8[14]) {
    int v12 = 776;
  }
  else {
    int v12 = 768;
  }
  if (a1[950].i8[5]) {
    v12 |= 0x10u;
  }
  if (a1[1106].i8[3]) {
    v12 |= (v11->u8[0] << 16) | 0x2020;
  }
  if (a1[1106].i8[1])
  {
    if (a1[1106].i8[2]) {
      int v13 = 9216;
    }
    else {
      int v13 = 0x2000;
    }
    int v14 = v13 | (v11->u8[0] << 16) | v12;
  }
  else
  {
    unsigned int v15 = a1[1857].u32[1];
    if ((v12 & ((v15 & 0x3030303) == 50529026)) != 0) {
      v12 |= 4u;
    }
    if ((v12 & 2) != 0) {
      unsigned int v15 = v15 & 0xFFFF00FF | 0xFB00;
    }
    int v16 = v12 | 0x2000;
    if ((~v15 & 0x3FCFF3FC) == 0) {
      int v16 = v12 | 0x1000;
    }
    if (v15 == -1074791426) {
      int v14 = v12;
    }
    else {
      int v14 = v16;
    }
  }
  a1[1264].i64[0] = (uint64_t)gleLLVMVecProjectionRPos;
  a1[1264].i64[1] = (uint64_t)gleLLVMVecProjectionRPos;
  a1[1278].i32[1] = v14;
  return gleLLVMVecProjection(a1, a2, a3, v14, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t gleLLVMVecProjectionTransform(float32x4_t *a1, unint64_t a2, int a3, double a4, double a5, int32x4_t a6, double a7, double a8, double a9, int8x16_t a10, int32x4_t a11)
{
  return gleLLVMVecProjection(a1, a2, a3, a1[1274].i32[1], a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t gleLLVMVecProjectionRPos(float32x4_t *a1, unint64_t a2, int a3, double a4, double a5, int32x4_t a6, double a7, double a8, double a9, int8x16_t a10, int32x4_t a11)
{
  return gleLLVMVecProjection(a1, a2, a3, a1[1278].i32[1], a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t gleLLVMVecProjection(float32x4_t *a1, unint64_t a2, int a3, int a4, double a5, double a6, int32x4_t a7, double a8, double a9, double a10, int8x16_t a11, int32x4_t a12)
{
  unsigned int v16 = a4 & 0xFF0000;
  uint64_t v17 = 336;
  if ((a4 & 0xFF0000) == 0) {
    uint64_t v17 = 96;
  }
  float v18 = a1[18].f32[1];
  unint64_t v19 = a2 + 640 * a3;
  unsigned int v20 = a3 & 3;
  if ((a3 & 3) != 0)
  {
    long long v21 = *(_OWORD *)(a2 + 96);
    unint64_t v22 = a2 + 640 * a3;
    *(_OWORD *)(v22 + 96) = v21;
    *(_DWORD *)(v22 + 28) = 0;
    if (v20 != 3)
    {
      *(_DWORD *)(v19 + 668) = 0;
      *(_OWORD *)(v19 + 736) = v21;
      if (v20 <= 1)
      {
        *(_DWORD *)(v19 + 1308) = 0;
        *(_OWORD *)(v19 + 1376) = v21;
      }
    }
  }
  if (v16)
  {
    LODWORD(v23) = HIWORD(v16);
    if (a3 > 0)
    {
      uint64_t v24 = (_OWORD *)a2;
      do
      {
        v24[21] = 0uLL;
        v24[61] = 0uLL;
        v24[101] = 0uLL;
        v24[141] = 0uLL;
        if ((a4 & 0x400) != 0)
        {
          if (v23 == 1)
          {
            unsigned int v25 = 0;
            float v26 = v18;
            float v27 = v18;
            float v28 = v18;
            float v29 = v18;
          }
          else
          {
            uint64_t v31 = 0;
            float v29 = v18;
            float v28 = v18;
            float v27 = v18;
            float v26 = v18;
            do
            {
              float v26 = v26 - *(float *)((char *)v24 + v31 + 160);
              float v27 = v27 - *(float *)((char *)v24 + v31 + 800);
              float v28 = v28 - *(float *)((char *)v24 + v31 + 1440);
              float v29 = v29 - *(float *)((char *)v24 + v31 + 2080);
              v31 += 4;
            }
            while (4 * (v23 - 1) != v31);
            unsigned int v25 = v23 - 1;
          }
          uint64_t v30 = (float *)v24 + v25;
          v30[40] = v26;
          v30[200] = v27;
          v30[360] = v28;
          v30[520] = v29;
        }
        v24 += 160;
      }
      while ((unint64_t)v24 < v19);
    }
    uint64_t v32 = 0;
    uint64_t v33 = a1 + 585;
    int v34 = a4 & 2;
    if (v23 <= 1) {
      uint64_t v23 = 1;
    }
    else {
      uint64_t v23 = v23;
    }
    float32x4_t v35 = 0uLL;
    uint64_t v36 = 40;
    float32x4_t v37 = 0uLL;
    float32x4_t v38 = 0uLL;
    float32x4_t v39 = 0uLL;
    do
    {
      if ((a4 & 0x20) == 0)
      {
        int v40 = &v33[4 * v32];
        if ((a4 & 2) == 0) {
          float32x4_t v38 = v40[18];
        }
        float32x4_t v35 = v40[16];
        float32x4_t v37 = v40[17];
        float32x4_t v39 = v40[19];
      }
      if (a3 >= 1)
      {
        unint64_t v41 = (float32x4_t *)a2;
        do
        {
          if ((a4 & 0x20) != 0)
          {
            uint64_t v46 = &v33[4 * (unint64_t)v41->u8[v32 + 4]];
            if ((a4 & 2) == 0) {
              float32x4_t v38 = v46[22];
            }
            float32x4_t v35 = v46[20];
            float32x4_t v37 = v46[21];
            float32x4_t v39 = v46[23];
          }
          a11.i32[0] = 0;
          a12.i32[0] = a4 & 1;
          int8x16_t v42 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(a12, (int32x4_t)a11), 0);
          float32x4_t v43 = v41[6];
          float32x4_t v44 = vmlaq_lane_f32(vmulq_n_f32(v35, v43.f32[0]), v37, *(float32x2_t *)v43.f32, 1);
          a7.i32[0] = a4 & 2;
          float32x4_t v45 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(a7, (int32x4_t)a11), 0), (int8x16_t)vmlaq_laneq_f32(v44, v38, v43, 2), (int8x16_t)v44);
          a11 = vbslq_s8(v42, (int8x16_t)vmlaq_laneq_f32(v45, v39, v43, 3), (int8x16_t)vaddq_f32(v39, v45));
          a12 = (int32x4_t)vmlaq_n_f32(v41[21], (float32x4_t)a11, v41->f32[v36]);
          v41[21] = (float32x4_t)a12;
          v41 += 40;
        }
        while ((unint64_t)v41 < v19);
      }
      ++v32;
      ++v36;
    }
    while (v32 != v23);
    if ((a4 & 0x800) != 0)
    {
      v52.i64[0] = a1[584].i64[0];
      v52.f32[2] = v18;
      v52.f32[3] = v18;
      v53.i64[0] = a1[584].i64[1];
      v53.i32[2] = a1[18].i32[0];
      v53.i32[3] = v53.i32[2];
      float32x4_t v54 = a1[597];
      float32x4_t v55 = vmulq_laneq_f32(v53, v54, 3);
      float32x4_t v56 = a1[598];
      float32x4_t v57 = vmulq_laneq_f32(v53, v56, 3);
      if ((a4 & 2) == 0) {
        float32x4_t v38 = vmlaq_f32(vmulq_laneq_f32(v53, a1[599], 3), v52, a1[599]);
      }
      float32x4_t v47 = vmlaq_f32(v55, v52, v54);
      float32x4_t v48 = vmlaq_f32(v57, v52, v56);
      float32x4_t v49 = vmlaq_f32(vmulq_laneq_f32(v53, a1[600], 3), v52, a1[600]);
    }
    else
    {
      if ((a4 & 2) == 0) {
        float32x4_t v38 = a1[599];
      }
      float32x4_t v47 = a1[597];
      float32x4_t v48 = a1[598];
      float32x4_t v49 = a1[600];
    }
  }
  else if ((a4 & 0x3000) != 0)
  {
    uint64_t v50 = 777;
    if ((a4 & 0x200) != 0)
    {
      uint64_t v50 = 589;
      uint64_t v51 = a1 + 589;
    }
    else
    {
      uint64_t v51 = a1 + 777;
    }
    if ((a4 & 0x3000) == 0x1000)
    {
      v47.i32[0] = a1[v50].i32[0];
      v47.i32[1] = v51[1].i32[1];
      if ((a4 & 2) != 0)
      {
        v47.i32[2] = a1[v50].i32[0];
        v47.i32[3] = v51[3].i32[3];
        float32x4_t v49 = 0uLL;
        int v34 = 1;
      }
      else
      {
        int v34 = 0;
        v47.i32[2] = v51[2].i32[2];
        v47.i32[3] = v51[3].i32[3];
        float32x4_t v49 = 0uLL;
      }
      float32x4_t v38 = 0uLL;
      float32x4_t v48 = 0uLL;
    }
    else
    {
      int v34 = a4 & 2;
      float32x4_t v38 = 0uLL;
      if ((a4 & 2) == 0) {
        float32x4_t v38 = v51[2];
      }
      float32x4_t v47 = a1[v50];
      float32x4_t v48 = v51[1];
      float32x4_t v49 = v51[3];
    }
  }
  else
  {
    int v34 = a4 & 2;
    float32x4_t v49 = 0uLL;
    float32x4_t v38 = 0uLL;
    float32x4_t v48 = 0uLL;
    float32x4_t v47 = 0uLL;
  }
  __int16 v58 = 0;
  if ((a4 & 8) != 0) {
    __int16 v59 = 0;
  }
  else {
    __int16 v59 = 255;
  }
  uint64_t v60 = 577;
  if ((a4 & 0x200) == 0) {
    uint64_t v60 = 579;
  }
  uint64_t v61 = 576;
  if ((a4 & 0x200) == 0) {
    uint64_t v61 = 578;
  }
  float32x4_t v62 = a1[v61];
  float32x4_t v63 = a1[v60];
  do
  {
    _X15 = (float32x4_t *)(a2 + v17);
    *(_DWORD *)(a2 + 28) = 0;
    *(_DWORD *)(a2 + 668) = 0;
    *(_DWORD *)(a2 + 1308) = 0;
    *(_DWORD *)(a2 + 1948) = 0;
    __asm
    {
      PRFM            #0, [X15,#0xA00]
      PRFM            #0, [X15,#0xC80]
      PRFM            #0, [X15,#0xF00]
      PRFM            #0, [X15,#0x1180]
    }
    if ((a4 & 0x3000) == 0x1000)
    {
      float32x4_t v75 = vmulq_f32(v47, *_X15);
      float32x4_t v76 = vmulq_f32(v47, _X15[40]);
      float32x4_t v77 = vmulq_f32(v47, _X15[80]);
      float32x4_t v78 = vmulq_f32(v47, _X15[120]);
      goto LABEL_74;
    }
    uint64_t v74 = (float32x2_t *)(a2 + v17);
    if ((a4 & 0x3000) == 0)
    {
      float32x4_t v75 = *(float32x4_t *)v74->f32;
      float32x4_t v76 = *(float32x4_t *)v74[80].f32;
      float32x4_t v77 = *(float32x4_t *)v74[160].f32;
      float32x4_t v78 = *(float32x4_t *)v74[240].f32;
      goto LABEL_74;
    }
    float32x4_t v79 = *(float32x4_t *)v74->f32;
    float32x4_t v80 = *(float32x4_t *)v74[80].f32;
    float32x4_t v81 = *(float32x4_t *)v74[160].f32;
    float32x4_t v82 = *(float32x4_t *)v74[240].f32;
    float32x4_t v83 = vmlaq_lane_f32(vmulq_n_f32(v47, COERCE_FLOAT(*(_OWORD *)v74->f32)), v48, *v74, 1);
    float32x4_t v84 = vmlaq_lane_f32(vmulq_n_f32(v47, v80.f32[0]), v48, *(float32x2_t *)v80.f32, 1);
    float32x4_t v85 = vmlaq_lane_f32(vmulq_n_f32(v47, v81.f32[0]), v48, *(float32x2_t *)v81.f32, 1);
    float32x4_t v86 = vmlaq_lane_f32(vmulq_n_f32(v47, v82.f32[0]), v48, *(float32x2_t *)v82.f32, 1);
    if (v34)
    {
      if ((a4 & 1) == 0) {
        goto LABEL_71;
      }
    }
    else
    {
      float32x4_t v83 = vmlaq_laneq_f32(v83, v38, v79, 2);
      float32x4_t v84 = vmlaq_laneq_f32(v84, v38, v80, 2);
      float32x4_t v85 = vmlaq_laneq_f32(v85, v38, v81, 2);
      float32x4_t v86 = vmlaq_laneq_f32(v86, v38, v82, 2);
      if ((a4 & 1) == 0)
      {
LABEL_71:
        float32x4_t v75 = vmlaq_laneq_f32(v83, v49, v79, 3);
        float32x4_t v76 = vmlaq_laneq_f32(v84, v49, v80, 3);
        float32x4_t v77 = vmlaq_laneq_f32(v85, v49, v81, 3);
        float32x4_t v78 = vmlaq_laneq_f32(v86, v49, v82, 3);
        goto LABEL_74;
      }
    }
    float32x4_t v75 = vaddq_f32(v49, v83);
    float32x4_t v76 = vaddq_f32(v49, v84);
    float32x4_t v77 = vaddq_f32(v49, v85);
    float32x4_t v78 = vaddq_f32(v49, v86);
LABEL_74:
    *(float32x4_t *)(a2 + 80) = v75;
    *(float32x4_t *)(a2 + 720) = v76;
    *(float32x4_t *)(a2 + 1360) = v77;
    *(float32x4_t *)(a2 + 2000) = v78;
    if ((a4 & 8) != 0)
    {
      *(unsigned char *)(a2 + 3) = 0;
      *(unsigned char *)(a2 + 643) = 0;
      *(unsigned char *)(a2 + 1283) = 0;
      *(unsigned char *)(a2 + 1923) = 0;
      v104.i32[3] = 0;
      if ((a4 & 4) != 0) {
        goto LABEL_135;
      }
    }
    else
    {
      float v87 = v75.f32[3];
      if ((a4 & 4) != 0) {
        float v87 = v18;
      }
      float v88 = -v87;
      if (v75.f32[0] <= v87) {
        int v89 = 16 * (v75.f32[0] < (float)-v87);
      }
      else {
        int v89 = (16 * (v75.f32[0] < (float)-v87)) | 0x20;
      }
      if (v75.f32[1] < v88) {
        v89 |= 4u;
      }
      if (v75.f32[1] > v87) {
        v89 |= 8u;
      }
      int v90 = v89 | (v75.f32[2] < v88);
      if (v75.f32[2] > v87) {
        v90 |= 2u;
      }
      if ((a4 & 0x10) == 0) {
        int v89 = v90;
      }
      if ((a4 & 4) != 0) {
        float v91 = v18;
      }
      else {
        float v91 = v76.f32[3];
      }
      float v92 = -v91;
      if (v76.f32[0] <= v91) {
        int v93 = 16 * (v76.f32[0] < (float)-v91);
      }
      else {
        int v93 = (16 * (v76.f32[0] < (float)-v91)) | 0x20;
      }
      if (v76.f32[1] < v92) {
        v93 |= 4u;
      }
      if (v76.f32[1] > v91) {
        v93 |= 8u;
      }
      int v94 = v93 | (v76.f32[2] < v92);
      if (v76.f32[2] > v91) {
        v94 |= 2u;
      }
      if ((a4 & 0x10) == 0) {
        int v93 = v94;
      }
      if ((a4 & 4) != 0) {
        float v95 = v18;
      }
      else {
        float v95 = v77.f32[3];
      }
      float v96 = -v95;
      if (v77.f32[0] <= v95) {
        int v97 = 16 * (v77.f32[0] < (float)-v95);
      }
      else {
        int v97 = (16 * (v77.f32[0] < (float)-v95)) | 0x20;
      }
      if (v77.f32[1] < v96) {
        v97 |= 4u;
      }
      if (v77.f32[1] > v95) {
        v97 |= 8u;
      }
      int v98 = v97 | (v77.f32[2] < v96);
      if (v77.f32[2] > v95) {
        v98 |= 2u;
      }
      if ((a4 & 0x10) == 0) {
        int v97 = v98;
      }
      if ((a4 & 4) != 0) {
        float v99 = v18;
      }
      else {
        float v99 = v78.f32[3];
      }
      float v100 = -v99;
      if (v78.f32[0] <= v99) {
        int v101 = 16 * (v78.f32[0] < (float)-v99);
      }
      else {
        int v101 = (16 * (v78.f32[0] < (float)-v99)) | 0x20;
      }
      if (v78.f32[1] < v100) {
        v101 |= 4u;
      }
      if (v78.f32[1] > v99) {
        v101 |= 8u;
      }
      int v102 = v101 | (v78.f32[2] < v100);
      if (v78.f32[2] > v99) {
        v102 |= 2u;
      }
      if ((a4 & 0x10) == 0) {
        int v101 = v102;
      }
      *(unsigned char *)(a2 + 3) = v89;
      *(unsigned char *)(a2 + 643) = v93;
      *(unsigned char *)(a2 + 1283) = v97;
      *(unsigned char *)(a2 + 1923) = v101;
      v58 |= v89 | v93 | v97 | (unsigned __int16)v101;
      int v103 = v93 & v89 & v97 & v101;
      if (v103)
      {
        v59 &= v103;
        goto LABEL_64;
      }
      __int16 v59 = 0;
      v104.i32[3] = 0;
      if ((a4 & 4) != 0)
      {
LABEL_135:
        v105.i32[3] = 0;
        v106.i32[3] = 0;
        v107.i32[3] = 0;
        goto LABEL_136;
      }
    }
    v12.f32[0] = v18 / v75.f32[3];
    int32x4_t v104 = vdupq_lane_s32(*(int32x2_t *)v12.f32, 0);
    *(float *)v13.i32 = v18 / v76.f32[3];
    int32x4_t v105 = vdupq_lane_s32(v13, 0);
    *(float *)v14.i32 = v18 / v77.f32[3];
    int32x4_t v106 = vdupq_lane_s32(v14, 0);
    *(float *)v15.i32 = v18 / v78.f32[3];
    int32x4_t v107 = vdupq_lane_s32(v15, 0);
    float32x4_t v75 = vmulq_n_f32(v75, v18 / v75.f32[3]);
    float32x4_t v76 = vmulq_n_f32(v76, v18 / v76.f32[3]);
    float32x4_t v77 = vmulq_n_f32(v77, v18 / v77.f32[3]);
    float32x4_t v78 = vmulq_n_f32(v78, v18 / v78.f32[3]);
LABEL_136:
    float32x4_t v12 = vmlaq_f32(v63, v75, v62);
    *(float32x4_t *)(a2 + 64) = v12;
    *(float32x4_t *)(a2 + 704) = vmlaq_f32(v63, v76, v62);
    *(float32x4_t *)(a2 + 1344) = vmlaq_f32(v63, v77, v62);
    *(float32x4_t *)(a2 + 1984) = vmlaq_f32(v63, v78, v62);
    if ((a4 & 4) != 0)
    {
      *(_DWORD *)(a2 + 76) = 1065353216;
      *(_DWORD *)(a2 + 716) = 1065353216;
      float v64 = 1.0;
      *(_DWORD *)(a2 + 1356) = 1065353216;
    }
    else
    {
      *(_DWORD *)(a2 + 76) = v104.i32[3];
      *(_DWORD *)(a2 + 716) = v105.i32[3];
      *(_DWORD *)(a2 + 1356) = v106.i32[3];
      float v64 = *(float *)&v107.i32[3];
    }
    *(float *)(a2 + 1996) = v64;
LABEL_64:
    a2 += 2560;
  }
  while (a2 < v19);
  unsigned __int16 v108 = v58 | (v59 << 8);
  if ((a4 & 8) != 0) {
    return 0;
  }
  return v108;
}

float32x4_t *gleSetTextureFunc(float32x4_t *result, float32x4_t *a2, int a3)
{
  unsigned int v3 = result[1486].u8[12];
  if (result[1486].i8[12])
  {
    char v4 = 0;
    uint64_t v5 = 0;
    __int32 v6 = 1;
    do
    {
      if (v3)
      {
        v6 |= 256 << v5;
        __int32 v8 = result[1858].i32[v5 + 2];
        int v9 = v6 | (0x20000 << v4);
        if ((~v8 & 0x3FCFF3FC) == 0) {
          int v9 = v6 | (0x10000 << v4);
        }
        if (v8 != -1074791426) {
          __int32 v6 = v9;
        }
      }
      ++v5;
      v4 += 2;
      BOOL v7 = v3 > 1;
      v3 >>= 1;
    }
    while (v7);
  }
  else
  {
    __int32 v6 = 1;
  }
  result[1259].i64[0] = (uint64_t)gleLLVMVecTextureTransform;
  result[1259].i64[1] = (uint64_t)gleLLVMVecTextureTransform;
  result[1276].i32[0] = v6;
  return gleLLVMVecTextureTransform(result, a2, a3);
}

float32x4_t *gleSetTextureRPosFunc(float32x4_t *result, float32x4_t *a2, int a3)
{
  __int32 v3 = result[1858].i32[2];
  if ((~v3 & 0x3FCFF3FC) != 0) {
    int v4 = 131843;
  }
  else {
    int v4 = 66307;
  }
  if (v3 == -1074791426) {
    int v5 = 771;
  }
  else {
    int v5 = v4;
  }
  __int32 v6 = result[1858].i32[3];
  int v7 = v5 | 0x40000;
  if ((~v6 & 0x3FCFF3FC) != 0) {
    int v7 = v5 | 0x80000;
  }
  if (v6 != -1074791426) {
    int v5 = v7;
  }
  int v8 = v5 | 0x400;
  __int32 v9 = result[1859].i32[0];
  int v10 = v5 | 0x100400;
  int v11 = v5 | 0x200400;
  if ((~v9 & 0x3FCFF3FC) == 0) {
    int v11 = v10;
  }
  if (v9 == -1074791426) {
    int v11 = v8;
  }
  int v12 = v11 | 0x800;
  __int32 v13 = result[1859].i32[1];
  int v14 = v11 | 0x400800;
  int v15 = v11 | 0x800800;
  if ((~v13 & 0x3FCFF3FC) == 0) {
    int v15 = v14;
  }
  if (v13 == -1074791426) {
    int v15 = v12;
  }
  int v16 = v15 | 0x1000;
  __int32 v17 = result[1859].i32[2];
  int v18 = v15 | 0x1001000;
  int v19 = v15 | 0x2001000;
  if ((~v17 & 0x3FCFF3FC) == 0) {
    int v19 = v18;
  }
  if (v17 == -1074791426) {
    int v19 = v16;
  }
  int v20 = v19 | 0x2000;
  __int32 v21 = result[1859].i32[3];
  int v22 = v19 | 0x4002000;
  int v23 = v19 | 0x8002000;
  if ((~v21 & 0x3FCFF3FC) == 0) {
    int v23 = v22;
  }
  if (v21 == -1074791426) {
    int v23 = v20;
  }
  int v24 = v23 | 0x4000;
  __int32 v25 = result[1860].i32[0];
  int v26 = v23 | 0x10004000;
  int v27 = v23 | 0x20004000;
  if ((~v25 & 0x3FCFF3FC) == 0) {
    int v27 = v26;
  }
  if (v25 == -1074791426) {
    int v27 = v24;
  }
  int v28 = v27 | 0x8000;
  __int32 v29 = result[1860].i32[1];
  int v30 = v27 | 0x40008000;
  unsigned int v31 = v27 | 0x80008000;
  if ((~v29 & 0x3FCFF3FC) != 0) {
    int v30 = v31;
  }
  if (v29 == -1074791426) {
    __int32 v32 = v28;
  }
  else {
    __int32 v32 = v30;
  }
  result[1267].i64[0] = (uint64_t)gleLLVMVecTextureRPos;
  result[1267].i64[1] = (uint64_t)gleLLVMVecTextureRPos;
  result[1280].i32[0] = v32;
  return gleLLVMVecTextureRPos(result, a2, a3);
}

float32x4_t *gleLLVMVecTextureTransform(float32x4_t *result, float32x4_t *a2, int a3)
{
  unsigned int v3 = result[1276].u32[0];
  if (v3 >= 0x10000 && (result[1276].i32[0] & 0xFF00) != 0)
  {
    int v5 = &a2[40 * a3];
    if ((v3 & 0x100) != 0)
    {
      int v6 = v3 & 0x30000;
      if ((v3 & 0x30000) != 0)
      {
        if (v6 == 0x10000)
        {
          v7.i32[0] = result[649].i32[0];
          v7.i32[1] = result[650].i32[1];
          v7.i32[2] = result[651].i32[2];
          v7.i32[3] = result[652].i32[3];
          float32x4_t v8 = 0uLL;
          float32x4_t v9 = 0uLL;
          float32x4_t v10 = 0uLL;
        }
        else
        {
          float32x4_t v7 = result[649];
          float32x4_t v8 = result[650];
          float32x4_t v9 = result[651];
          float32x4_t v10 = result[652];
        }
        int v11 = a2;
        do
        {
          float32x4_t v12 = v11[14];
          float32x4_t v13 = v11[54];
          float32x4_t v14 = v11[94];
          float32x4_t v15 = v11[134];
          if (v6 == 0x20000)
          {
            float32x4_t v12 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, v12.f32[0]), v8, *(float32x2_t *)v12.f32, 1), v9, v12, 2), v10, v12, 3);
            float32x4_t v13 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, v13.f32[0]), v8, *(float32x2_t *)v13.f32, 1), v9, v13, 2), v10, v13, 3);
            float32x4_t v14 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, v14.f32[0]), v8, *(float32x2_t *)v14.f32, 1), v9, v14, 2), v10, v14, 3);
            float32x4_t v15 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, v15.f32[0]), v8, *(float32x2_t *)v15.f32, 1), v9, v15, 2), v10, v15, 3);
          }
          else if (v6 == 0x10000)
          {
            float32x4_t v12 = vmulq_f32(v7, v12);
            float32x4_t v13 = vmulq_f32(v7, v13);
            float32x4_t v14 = vmulq_f32(v7, v14);
            float32x4_t v15 = vmulq_f32(v7, v15);
          }
          v11[14] = v12;
          v11[54] = v13;
          v11[94] = v14;
          v11[134] = v15;
          v11 += 160;
        }
        while (v11 < v5);
      }
    }
    if ((v3 & 0x200) != 0)
    {
      int v16 = (v3 >> 2) & 0x30000;
      if (v16)
      {
        if (v16 == 0x10000)
        {
          v17.i32[0] = result[653].i32[0];
          v17.i32[1] = result[654].i32[1];
          v17.i32[2] = result[655].i32[2];
          v17.i32[3] = result[656].i32[3];
          float32x4_t v18 = 0uLL;
          float32x4_t v19 = 0uLL;
          float32x4_t v20 = 0uLL;
        }
        else
        {
          float32x4_t v17 = result[653];
          float32x4_t v18 = result[654];
          float32x4_t v19 = result[655];
          float32x4_t v20 = result[656];
        }
        __int32 v21 = a2;
        do
        {
          float32x4_t v22 = v21[15];
          float32x4_t v23 = v21[55];
          float32x4_t v24 = v21[95];
          float32x4_t v25 = v21[135];
          if (v16 == 0x20000)
          {
            float32x4_t v22 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, v22.f32[0]), v18, *(float32x2_t *)v22.f32, 1), v19, v22, 2), v20, v22, 3);
            float32x4_t v23 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, v23.f32[0]), v18, *(float32x2_t *)v23.f32, 1), v19, v23, 2), v20, v23, 3);
            float32x4_t v24 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, v24.f32[0]), v18, *(float32x2_t *)v24.f32, 1), v19, v24, 2), v20, v24, 3);
            float32x4_t v25 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, v25.f32[0]), v18, *(float32x2_t *)v25.f32, 1), v19, v25, 2), v20, v25, 3);
          }
          else if (v16 == 0x10000)
          {
            float32x4_t v22 = vmulq_f32(v17, v22);
            float32x4_t v23 = vmulq_f32(v17, v23);
            float32x4_t v24 = vmulq_f32(v17, v24);
            float32x4_t v25 = vmulq_f32(v17, v25);
          }
          v21[15] = v22;
          v21[55] = v23;
          v21[95] = v24;
          v21[135] = v25;
          v21 += 160;
        }
        while (v21 < v5);
      }
    }
    if ((v3 & 0x400) != 0)
    {
      int v26 = (v3 >> 4) & 0x30000;
      if (v26)
      {
        if (v26 == 0x10000)
        {
          v27.i32[0] = result[657].i32[0];
          v27.i32[1] = result[658].i32[1];
          v27.i32[2] = result[659].i32[2];
          v27.i32[3] = result[660].i32[3];
          float32x4_t v28 = 0uLL;
          float32x4_t v29 = 0uLL;
          float32x4_t v30 = 0uLL;
        }
        else
        {
          float32x4_t v27 = result[657];
          float32x4_t v28 = result[658];
          float32x4_t v29 = result[659];
          float32x4_t v30 = result[660];
        }
        unsigned int v31 = a2;
        do
        {
          float32x4_t v32 = v31[16];
          float32x4_t v33 = v31[56];
          float32x4_t v34 = v31[96];
          float32x4_t v35 = v31[136];
          if (v26 == 0x20000)
          {
            float32x4_t v32 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v27, v32.f32[0]), v28, *(float32x2_t *)v32.f32, 1), v29, v32, 2), v30, v32, 3);
            float32x4_t v33 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v27, v33.f32[0]), v28, *(float32x2_t *)v33.f32, 1), v29, v33, 2), v30, v33, 3);
            float32x4_t v34 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v27, v34.f32[0]), v28, *(float32x2_t *)v34.f32, 1), v29, v34, 2), v30, v34, 3);
            float32x4_t v35 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v27, v35.f32[0]), v28, *(float32x2_t *)v35.f32, 1), v29, v35, 2), v30, v35, 3);
          }
          else if (v26 == 0x10000)
          {
            float32x4_t v32 = vmulq_f32(v27, v32);
            float32x4_t v33 = vmulq_f32(v27, v33);
            float32x4_t v34 = vmulq_f32(v27, v34);
            float32x4_t v35 = vmulq_f32(v27, v35);
          }
          v31[16] = v32;
          v31[56] = v33;
          v31[96] = v34;
          v31[136] = v35;
          v31 += 160;
        }
        while (v31 < v5);
      }
    }
    if ((v3 & 0x800) != 0)
    {
      int v36 = (v3 >> 6) & 0x30000;
      if (v36)
      {
        if (v36 == 0x10000)
        {
          v37.i32[0] = result[661].i32[0];
          v37.i32[1] = result[662].i32[1];
          v37.i32[2] = result[663].i32[2];
          v37.i32[3] = result[664].i32[3];
          float32x4_t v38 = 0uLL;
          float32x4_t v39 = 0uLL;
          float32x4_t v40 = 0uLL;
        }
        else
        {
          float32x4_t v37 = result[661];
          float32x4_t v38 = result[662];
          float32x4_t v39 = result[663];
          float32x4_t v40 = result[664];
        }
        unint64_t v41 = a2;
        do
        {
          float32x4_t v42 = v41[17];
          float32x4_t v43 = v41[57];
          float32x4_t v44 = v41[97];
          float32x4_t v45 = v41[137];
          if (v36 == 0x20000)
          {
            float32x4_t v42 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v37, v42.f32[0]), v38, *(float32x2_t *)v42.f32, 1), v39, v42, 2), v40, v42, 3);
            float32x4_t v43 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v37, v43.f32[0]), v38, *(float32x2_t *)v43.f32, 1), v39, v43, 2), v40, v43, 3);
            float32x4_t v44 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v37, v44.f32[0]), v38, *(float32x2_t *)v44.f32, 1), v39, v44, 2), v40, v44, 3);
            float32x4_t v45 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v37, v45.f32[0]), v38, *(float32x2_t *)v45.f32, 1), v39, v45, 2), v40, v45, 3);
          }
          else if (v36 == 0x10000)
          {
            float32x4_t v42 = vmulq_f32(v37, v42);
            float32x4_t v43 = vmulq_f32(v37, v43);
            float32x4_t v44 = vmulq_f32(v37, v44);
            float32x4_t v45 = vmulq_f32(v37, v45);
          }
          v41[17] = v42;
          v41[57] = v43;
          v41[97] = v44;
          v41[137] = v45;
          v41 += 160;
        }
        while (v41 < v5);
      }
    }
    if ((v3 & 0x1000) != 0)
    {
      int v46 = (v3 >> 8) & 0x30000;
      if (v46)
      {
        if (v46 == 0x10000)
        {
          v47.i32[0] = result[665].i32[0];
          v47.i32[1] = result[666].i32[1];
          v47.i32[2] = result[667].i32[2];
          v47.i32[3] = result[668].i32[3];
          float32x4_t v48 = 0uLL;
          float32x4_t v49 = 0uLL;
          float32x4_t v50 = 0uLL;
        }
        else
        {
          float32x4_t v47 = result[665];
          float32x4_t v48 = result[666];
          float32x4_t v49 = result[667];
          float32x4_t v50 = result[668];
        }
        uint64_t v51 = a2;
        do
        {
          float32x4_t v52 = v51[18];
          float32x4_t v53 = v51[58];
          float32x4_t v54 = v51[98];
          float32x4_t v55 = v51[138];
          if (v46 == 0x20000)
          {
            float32x4_t v52 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v47, v52.f32[0]), v48, *(float32x2_t *)v52.f32, 1), v49, v52, 2), v50, v52, 3);
            float32x4_t v53 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v47, v53.f32[0]), v48, *(float32x2_t *)v53.f32, 1), v49, v53, 2), v50, v53, 3);
            float32x4_t v54 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v47, v54.f32[0]), v48, *(float32x2_t *)v54.f32, 1), v49, v54, 2), v50, v54, 3);
            float32x4_t v55 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v47, v55.f32[0]), v48, *(float32x2_t *)v55.f32, 1), v49, v55, 2), v50, v55, 3);
          }
          else if (v46 == 0x10000)
          {
            float32x4_t v52 = vmulq_f32(v47, v52);
            float32x4_t v53 = vmulq_f32(v47, v53);
            float32x4_t v54 = vmulq_f32(v47, v54);
            float32x4_t v55 = vmulq_f32(v47, v55);
          }
          v51[18] = v52;
          v51[58] = v53;
          v51[98] = v54;
          v51[138] = v55;
          v51 += 160;
        }
        while (v51 < v5);
      }
    }
    if ((v3 & 0x2000) != 0)
    {
      int v56 = (v3 >> 10) & 0x30000;
      if (v56)
      {
        if (v56 == 0x10000)
        {
          v57.i32[0] = result[669].i32[0];
          v57.i32[1] = result[670].i32[1];
          v57.i32[2] = result[671].i32[2];
          v57.i32[3] = result[672].i32[3];
          float32x4_t v58 = 0uLL;
          float32x4_t v59 = 0uLL;
          float32x4_t v60 = 0uLL;
        }
        else
        {
          float32x4_t v57 = result[669];
          float32x4_t v58 = result[670];
          float32x4_t v59 = result[671];
          float32x4_t v60 = result[672];
        }
        uint64_t v61 = a2;
        do
        {
          float32x4_t v62 = v61[19];
          float32x4_t v63 = v61[59];
          float32x4_t v64 = v61[99];
          float32x4_t v65 = v61[139];
          if (v56 == 0x20000)
          {
            float32x4_t v62 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v57, v62.f32[0]), v58, *(float32x2_t *)v62.f32, 1), v59, v62, 2), v60, v62, 3);
            float32x4_t v63 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v57, v63.f32[0]), v58, *(float32x2_t *)v63.f32, 1), v59, v63, 2), v60, v63, 3);
            float32x4_t v64 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v57, v64.f32[0]), v58, *(float32x2_t *)v64.f32, 1), v59, v64, 2), v60, v64, 3);
            float32x4_t v65 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v57, v65.f32[0]), v58, *(float32x2_t *)v65.f32, 1), v59, v65, 2), v60, v65, 3);
          }
          else if (v56 == 0x10000)
          {
            float32x4_t v62 = vmulq_f32(v57, v62);
            float32x4_t v63 = vmulq_f32(v57, v63);
            float32x4_t v64 = vmulq_f32(v57, v64);
            float32x4_t v65 = vmulq_f32(v57, v65);
          }
          v61[19] = v62;
          v61[59] = v63;
          v61[99] = v64;
          v61[139] = v65;
          v61 += 160;
        }
        while (v61 < v5);
      }
    }
    if ((v3 & 0x4000) != 0)
    {
      int v66 = (v3 >> 12) & 0x30000;
      if (v66)
      {
        if (v66 == 0x10000)
        {
          v67.i32[0] = result[673].i32[0];
          v67.i32[1] = result[674].i32[1];
          v67.i32[2] = result[675].i32[2];
          v67.i32[3] = result[676].i32[3];
          float32x4_t v68 = 0uLL;
          float32x4_t v69 = 0uLL;
          float32x4_t v70 = 0uLL;
        }
        else
        {
          float32x4_t v67 = result[673];
          float32x4_t v68 = result[674];
          float32x4_t v69 = result[675];
          float32x4_t v70 = result[676];
        }
        uint64_t v71 = a2;
        do
        {
          float32x4_t v72 = v71[20];
          float32x4_t v73 = v71[60];
          float32x4_t v74 = v71[100];
          float32x4_t v75 = v71[140];
          if (v66 == 0x20000)
          {
            float32x4_t v72 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v67, v72.f32[0]), v68, *(float32x2_t *)v72.f32, 1), v69, v72, 2), v70, v72, 3);
            float32x4_t v73 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v67, v73.f32[0]), v68, *(float32x2_t *)v73.f32, 1), v69, v73, 2), v70, v73, 3);
            float32x4_t v74 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v67, v74.f32[0]), v68, *(float32x2_t *)v74.f32, 1), v69, v74, 2), v70, v74, 3);
            float32x4_t v75 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v67, v75.f32[0]), v68, *(float32x2_t *)v75.f32, 1), v69, v75, 2), v70, v75, 3);
          }
          else if (v66 == 0x10000)
          {
            float32x4_t v72 = vmulq_f32(v67, v72);
            float32x4_t v73 = vmulq_f32(v67, v73);
            float32x4_t v74 = vmulq_f32(v67, v74);
            float32x4_t v75 = vmulq_f32(v67, v75);
          }
          v71[20] = v72;
          v71[60] = v73;
          v71[100] = v74;
          v71[140] = v75;
          v71 += 160;
        }
        while (v71 < v5);
      }
    }
    if ((v3 & 0x8000) != 0)
    {
      int v76 = (v3 >> 14) & 0x30000;
      if (v76)
      {
        if (v76 == 0x10000)
        {
          v77.i32[0] = result[677].i32[0];
          v77.i32[1] = result[678].i32[1];
          v77.i32[2] = result[679].i32[2];
          v77.i32[3] = result[680].i32[3];
          float32x4_t v78 = 0uLL;
          float32x4_t v79 = 0uLL;
          float32x4_t v80 = 0uLL;
        }
        else
        {
          float32x4_t v77 = result[677];
          float32x4_t v78 = result[678];
          float32x4_t v79 = result[679];
          float32x4_t v80 = result[680];
        }
        do
        {
          float32x4_t v81 = a2[21];
          float32x4_t v82 = a2[61];
          float32x4_t v83 = a2[101];
          float32x4_t v84 = a2[141];
          if (v76 == 0x20000)
          {
            float32x4_t v81 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v77, v81.f32[0]), v78, *(float32x2_t *)v81.f32, 1), v79, v81, 2), v80, v81, 3);
            float32x4_t v82 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v77, v82.f32[0]), v78, *(float32x2_t *)v82.f32, 1), v79, v82, 2), v80, v82, 3);
            float32x4_t v83 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v77, v83.f32[0]), v78, *(float32x2_t *)v83.f32, 1), v79, v83, 2), v80, v83, 3);
            float32x4_t v84 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v77, v84.f32[0]), v78, *(float32x2_t *)v84.f32, 1), v79, v84, 2), v80, v84, 3);
          }
          else if (v76 == 0x10000)
          {
            float32x4_t v81 = vmulq_f32(v77, v81);
            float32x4_t v82 = vmulq_f32(v77, v82);
            float32x4_t v83 = vmulq_f32(v77, v83);
            float32x4_t v84 = vmulq_f32(v77, v84);
          }
          a2[21] = v81;
          a2[61] = v82;
          a2[101] = v83;
          a2[141] = v84;
          a2 += 160;
        }
        while (a2 < v5);
      }
    }
  }
  return result;
}

float32x4_t *gleLLVMVecTextureRPos(float32x4_t *result, float32x4_t *a2, int a3)
{
  unsigned int v3 = result[1280].u32[0];
  if (v3 >= 0x10000)
  {
    int v4 = &a2[40 * a3];
    if ((v3 & 0x100) != 0)
    {
      int v5 = v3 & 0x30000;
      if ((v3 & 0x30000) != 0)
      {
        if (v5 == 0x10000)
        {
          v6.i32[0] = result[649].i32[0];
          v6.i32[1] = result[650].i32[1];
          v6.i32[2] = result[651].i32[2];
          v6.i32[3] = result[652].i32[3];
          float32x4_t v7 = 0uLL;
          float32x4_t v8 = 0uLL;
          float32x4_t v9 = 0uLL;
        }
        else
        {
          float32x4_t v6 = result[649];
          float32x4_t v7 = result[650];
          float32x4_t v8 = result[651];
          float32x4_t v9 = result[652];
        }
        float32x4_t v10 = a2;
        do
        {
          float32x4_t v11 = v10[14];
          float32x4_t v12 = v10[54];
          float32x4_t v13 = v10[94];
          float32x4_t v14 = v10[134];
          if (v5 == 0x20000)
          {
            float32x4_t v11 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, v11.f32[0]), v7, *(float32x2_t *)v11.f32, 1), v8, v11, 2), v9, v11, 3);
            float32x4_t v12 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, v12.f32[0]), v7, *(float32x2_t *)v12.f32, 1), v8, v12, 2), v9, v12, 3);
            float32x4_t v13 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, v13.f32[0]), v7, *(float32x2_t *)v13.f32, 1), v8, v13, 2), v9, v13, 3);
            float32x4_t v14 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, v14.f32[0]), v7, *(float32x2_t *)v14.f32, 1), v8, v14, 2), v9, v14, 3);
          }
          else if (v5 == 0x10000)
          {
            float32x4_t v11 = vmulq_f32(v6, v11);
            float32x4_t v12 = vmulq_f32(v6, v12);
            float32x4_t v13 = vmulq_f32(v6, v13);
            float32x4_t v14 = vmulq_f32(v6, v14);
          }
          v10[14] = v11;
          v10[54] = v12;
          v10[94] = v13;
          v10[134] = v14;
          v10 += 160;
        }
        while (v10 < v4);
      }
    }
    if ((v3 & 0x200) != 0)
    {
      int v15 = (v3 >> 2) & 0x30000;
      if (v15)
      {
        if (v15 == 0x10000)
        {
          v16.i32[0] = result[653].i32[0];
          v16.i32[1] = result[654].i32[1];
          v16.i32[2] = result[655].i32[2];
          v16.i32[3] = result[656].i32[3];
          float32x4_t v17 = 0uLL;
          float32x4_t v18 = 0uLL;
          float32x4_t v19 = 0uLL;
        }
        else
        {
          float32x4_t v16 = result[653];
          float32x4_t v17 = result[654];
          float32x4_t v18 = result[655];
          float32x4_t v19 = result[656];
        }
        float32x4_t v20 = a2;
        do
        {
          float32x4_t v21 = v20[15];
          float32x4_t v22 = v20[55];
          float32x4_t v23 = v20[95];
          float32x4_t v24 = v20[135];
          if (v15 == 0x20000)
          {
            float32x4_t v21 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v16, v21.f32[0]), v17, *(float32x2_t *)v21.f32, 1), v18, v21, 2), v19, v21, 3);
            float32x4_t v22 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v16, v22.f32[0]), v17, *(float32x2_t *)v22.f32, 1), v18, v22, 2), v19, v22, 3);
            float32x4_t v23 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v16, v23.f32[0]), v17, *(float32x2_t *)v23.f32, 1), v18, v23, 2), v19, v23, 3);
            float32x4_t v24 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v16, v24.f32[0]), v17, *(float32x2_t *)v24.f32, 1), v18, v24, 2), v19, v24, 3);
          }
          else if (v15 == 0x10000)
          {
            float32x4_t v21 = vmulq_f32(v16, v21);
            float32x4_t v22 = vmulq_f32(v16, v22);
            float32x4_t v23 = vmulq_f32(v16, v23);
            float32x4_t v24 = vmulq_f32(v16, v24);
          }
          v20[15] = v21;
          v20[55] = v22;
          v20[95] = v23;
          v20[135] = v24;
          v20 += 160;
        }
        while (v20 < v4);
      }
    }
    if ((v3 & 0x400) != 0)
    {
      int v25 = (v3 >> 4) & 0x30000;
      if (v25)
      {
        if (v25 == 0x10000)
        {
          v26.i32[0] = result[657].i32[0];
          v26.i32[1] = result[658].i32[1];
          v26.i32[2] = result[659].i32[2];
          v26.i32[3] = result[660].i32[3];
          float32x4_t v27 = 0uLL;
          float32x4_t v28 = 0uLL;
          float32x4_t v29 = 0uLL;
        }
        else
        {
          float32x4_t v26 = result[657];
          float32x4_t v27 = result[658];
          float32x4_t v28 = result[659];
          float32x4_t v29 = result[660];
        }
        float32x4_t v30 = a2;
        do
        {
          float32x4_t v31 = v30[16];
          float32x4_t v32 = v30[56];
          float32x4_t v33 = v30[96];
          float32x4_t v34 = v30[136];
          if (v25 == 0x20000)
          {
            float32x4_t v31 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, v31.f32[0]), v27, *(float32x2_t *)v31.f32, 1), v28, v31, 2), v29, v31, 3);
            float32x4_t v32 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, v32.f32[0]), v27, *(float32x2_t *)v32.f32, 1), v28, v32, 2), v29, v32, 3);
            float32x4_t v33 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, v33.f32[0]), v27, *(float32x2_t *)v33.f32, 1), v28, v33, 2), v29, v33, 3);
            float32x4_t v34 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, v34.f32[0]), v27, *(float32x2_t *)v34.f32, 1), v28, v34, 2), v29, v34, 3);
          }
          else if (v25 == 0x10000)
          {
            float32x4_t v31 = vmulq_f32(v26, v31);
            float32x4_t v32 = vmulq_f32(v26, v32);
            float32x4_t v33 = vmulq_f32(v26, v33);
            float32x4_t v34 = vmulq_f32(v26, v34);
          }
          v30[16] = v31;
          v30[56] = v32;
          v30[96] = v33;
          v30[136] = v34;
          v30 += 160;
        }
        while (v30 < v4);
      }
    }
    if ((v3 & 0x800) != 0)
    {
      int v35 = (v3 >> 6) & 0x30000;
      if (v35)
      {
        if (v35 == 0x10000)
        {
          v36.i32[0] = result[661].i32[0];
          v36.i32[1] = result[662].i32[1];
          v36.i32[2] = result[663].i32[2];
          v36.i32[3] = result[664].i32[3];
          float32x4_t v37 = 0uLL;
          float32x4_t v38 = 0uLL;
          float32x4_t v39 = 0uLL;
        }
        else
        {
          float32x4_t v36 = result[661];
          float32x4_t v37 = result[662];
          float32x4_t v38 = result[663];
          float32x4_t v39 = result[664];
        }
        float32x4_t v40 = a2;
        do
        {
          float32x4_t v41 = v40[17];
          float32x4_t v42 = v40[57];
          float32x4_t v43 = v40[97];
          float32x4_t v44 = v40[137];
          if (v35 == 0x20000)
          {
            float32x4_t v41 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v36, v41.f32[0]), v37, *(float32x2_t *)v41.f32, 1), v38, v41, 2), v39, v41, 3);
            float32x4_t v42 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v36, v42.f32[0]), v37, *(float32x2_t *)v42.f32, 1), v38, v42, 2), v39, v42, 3);
            float32x4_t v43 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v36, v43.f32[0]), v37, *(float32x2_t *)v43.f32, 1), v38, v43, 2), v39, v43, 3);
            float32x4_t v44 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v36, v44.f32[0]), v37, *(float32x2_t *)v44.f32, 1), v38, v44, 2), v39, v44, 3);
          }
          else if (v35 == 0x10000)
          {
            float32x4_t v41 = vmulq_f32(v36, v41);
            float32x4_t v42 = vmulq_f32(v36, v42);
            float32x4_t v43 = vmulq_f32(v36, v43);
            float32x4_t v44 = vmulq_f32(v36, v44);
          }
          v40[17] = v41;
          v40[57] = v42;
          v40[97] = v43;
          v40[137] = v44;
          v40 += 160;
        }
        while (v40 < v4);
      }
    }
    if ((v3 & 0x1000) != 0)
    {
      int v45 = (v3 >> 8) & 0x30000;
      if (v45)
      {
        if (v45 == 0x10000)
        {
          v46.i32[0] = result[665].i32[0];
          v46.i32[1] = result[666].i32[1];
          v46.i32[2] = result[667].i32[2];
          v46.i32[3] = result[668].i32[3];
          float32x4_t v47 = 0uLL;
          float32x4_t v48 = 0uLL;
          float32x4_t v49 = 0uLL;
        }
        else
        {
          float32x4_t v46 = result[665];
          float32x4_t v47 = result[666];
          float32x4_t v48 = result[667];
          float32x4_t v49 = result[668];
        }
        float32x4_t v50 = a2;
        do
        {
          float32x4_t v51 = v50[18];
          float32x4_t v52 = v50[58];
          float32x4_t v53 = v50[98];
          float32x4_t v54 = v50[138];
          if (v45 == 0x20000)
          {
            float32x4_t v51 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v46, v51.f32[0]), v47, *(float32x2_t *)v51.f32, 1), v48, v51, 2), v49, v51, 3);
            float32x4_t v52 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v46, v52.f32[0]), v47, *(float32x2_t *)v52.f32, 1), v48, v52, 2), v49, v52, 3);
            float32x4_t v53 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v46, v53.f32[0]), v47, *(float32x2_t *)v53.f32, 1), v48, v53, 2), v49, v53, 3);
            float32x4_t v54 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v46, v54.f32[0]), v47, *(float32x2_t *)v54.f32, 1), v48, v54, 2), v49, v54, 3);
          }
          else if (v45 == 0x10000)
          {
            float32x4_t v51 = vmulq_f32(v46, v51);
            float32x4_t v52 = vmulq_f32(v46, v52);
            float32x4_t v53 = vmulq_f32(v46, v53);
            float32x4_t v54 = vmulq_f32(v46, v54);
          }
          v50[18] = v51;
          v50[58] = v52;
          v50[98] = v53;
          v50[138] = v54;
          v50 += 160;
        }
        while (v50 < v4);
      }
    }
    if ((v3 & 0x2000) != 0)
    {
      int v55 = (v3 >> 10) & 0x30000;
      if (v55)
      {
        if (v55 == 0x10000)
        {
          v56.i32[0] = result[669].i32[0];
          v56.i32[1] = result[670].i32[1];
          v56.i32[2] = result[671].i32[2];
          v56.i32[3] = result[672].i32[3];
          float32x4_t v57 = 0uLL;
          float32x4_t v58 = 0uLL;
          float32x4_t v59 = 0uLL;
        }
        else
        {
          float32x4_t v56 = result[669];
          float32x4_t v57 = result[670];
          float32x4_t v58 = result[671];
          float32x4_t v59 = result[672];
        }
        float32x4_t v60 = a2;
        do
        {
          float32x4_t v61 = v60[19];
          float32x4_t v62 = v60[59];
          float32x4_t v63 = v60[99];
          float32x4_t v64 = v60[139];
          if (v55 == 0x20000)
          {
            float32x4_t v61 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v56, v61.f32[0]), v57, *(float32x2_t *)v61.f32, 1), v58, v61, 2), v59, v61, 3);
            float32x4_t v62 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v56, v62.f32[0]), v57, *(float32x2_t *)v62.f32, 1), v58, v62, 2), v59, v62, 3);
            float32x4_t v63 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v56, v63.f32[0]), v57, *(float32x2_t *)v63.f32, 1), v58, v63, 2), v59, v63, 3);
            float32x4_t v64 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v56, v64.f32[0]), v57, *(float32x2_t *)v64.f32, 1), v58, v64, 2), v59, v64, 3);
          }
          else if (v55 == 0x10000)
          {
            float32x4_t v61 = vmulq_f32(v56, v61);
            float32x4_t v62 = vmulq_f32(v56, v62);
            float32x4_t v63 = vmulq_f32(v56, v63);
            float32x4_t v64 = vmulq_f32(v56, v64);
          }
          v60[19] = v61;
          v60[59] = v62;
          v60[99] = v63;
          v60[139] = v64;
          v60 += 160;
        }
        while (v60 < v4);
      }
    }
    if ((v3 & 0x4000) != 0)
    {
      int v65 = (v3 >> 12) & 0x30000;
      if (v65)
      {
        if (v65 == 0x10000)
        {
          v66.i32[0] = result[673].i32[0];
          v66.i32[1] = result[674].i32[1];
          v66.i32[2] = result[675].i32[2];
          v66.i32[3] = result[676].i32[3];
          float32x4_t v67 = 0uLL;
          float32x4_t v68 = 0uLL;
          float32x4_t v69 = 0uLL;
        }
        else
        {
          float32x4_t v66 = result[673];
          float32x4_t v67 = result[674];
          float32x4_t v68 = result[675];
          float32x4_t v69 = result[676];
        }
        float32x4_t v70 = a2;
        do
        {
          float32x4_t v71 = v70[20];
          float32x4_t v72 = v70[60];
          float32x4_t v73 = v70[100];
          float32x4_t v74 = v70[140];
          if (v65 == 0x20000)
          {
            float32x4_t v71 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v66, v71.f32[0]), v67, *(float32x2_t *)v71.f32, 1), v68, v71, 2), v69, v71, 3);
            float32x4_t v72 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v66, v72.f32[0]), v67, *(float32x2_t *)v72.f32, 1), v68, v72, 2), v69, v72, 3);
            float32x4_t v73 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v66, v73.f32[0]), v67, *(float32x2_t *)v73.f32, 1), v68, v73, 2), v69, v73, 3);
            float32x4_t v74 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v66, v74.f32[0]), v67, *(float32x2_t *)v74.f32, 1), v68, v74, 2), v69, v74, 3);
          }
          else if (v65 == 0x10000)
          {
            float32x4_t v71 = vmulq_f32(v66, v71);
            float32x4_t v72 = vmulq_f32(v66, v72);
            float32x4_t v73 = vmulq_f32(v66, v73);
            float32x4_t v74 = vmulq_f32(v66, v74);
          }
          v70[20] = v71;
          v70[60] = v72;
          v70[100] = v73;
          v70[140] = v74;
          v70 += 160;
        }
        while (v70 < v4);
      }
    }
    if ((v3 & 0x8000) != 0)
    {
      int v75 = (v3 >> 14) & 0x30000;
      if (v75)
      {
        if (v75 == 0x10000)
        {
          v76.i32[0] = result[677].i32[0];
          v76.i32[1] = result[678].i32[1];
          v76.i32[2] = result[679].i32[2];
          v76.i32[3] = result[680].i32[3];
          float32x4_t v77 = 0uLL;
          float32x4_t v78 = 0uLL;
          float32x4_t v79 = 0uLL;
        }
        else
        {
          float32x4_t v76 = result[677];
          float32x4_t v77 = result[678];
          float32x4_t v78 = result[679];
          float32x4_t v79 = result[680];
        }
        do
        {
          float32x4_t v80 = a2[21];
          float32x4_t v81 = a2[61];
          float32x4_t v82 = a2[101];
          float32x4_t v83 = a2[141];
          if (v75 == 0x20000)
          {
            float32x4_t v80 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v76, v80.f32[0]), v77, *(float32x2_t *)v80.f32, 1), v78, v80, 2), v79, v80, 3);
            float32x4_t v81 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v76, v81.f32[0]), v77, *(float32x2_t *)v81.f32, 1), v78, v81, 2), v79, v81, 3);
            float32x4_t v82 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v76, v82.f32[0]), v77, *(float32x2_t *)v82.f32, 1), v78, v82, 2), v79, v82, 3);
            float32x4_t v83 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v76, v83.f32[0]), v77, *(float32x2_t *)v83.f32, 1), v78, v83, 2), v79, v83, 3);
          }
          else if (v75 == 0x10000)
          {
            float32x4_t v80 = vmulq_f32(v76, v80);
            float32x4_t v81 = vmulq_f32(v76, v81);
            float32x4_t v82 = vmulq_f32(v76, v82);
            float32x4_t v83 = vmulq_f32(v76, v83);
          }
          a2[21] = v80;
          a2[61] = v81;
          a2[101] = v82;
          a2[141] = v83;
          a2 += 160;
        }
        while (a2 < v4);
      }
    }
  }
  return result;
}

uint64_t gleSetVPTransformFuncAll(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 27792;
  int v7 = *(_DWORD *)(a1 + 24864);
  if ((v7 & 1) != 0 && (v7 & 0xFFFFFFEE) != 0)
  {
    *(void *)(a1 + 24200) = gleLLVMVPTransform;
    *(void *)(a1 + 24208) = gleLLVMVPTransform;
    int v8 = 64;
LABEL_24:
    uint64_t v15 = *(void *)(a1 + 24768);
    if (!v15) {
      uint64_t v15 = *(void *)(*(void *)(a1 + 24776) + 40);
    }
    if (*(_DWORD *)(v15 + 3780) | *(_DWORD *)(v15 + 3748)) {
      gleResetUniformBufferCachePointers(a1, v15 + 40, 0);
    }
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    *(void *)(a1 + 24232) = *(void *)(v15 + 768);
    *(void *)(a1 + 24240) = *(void *)(v15 + 3752);
    if (!*(void *)(v15 + 680)) {
      glePrepareShaderForEmulation(a1, v15 + 168);
    }
    gleUpdateShaderTexData(a1, (void *)(a1 + 27856), v15 + 168);
    uint64_t v14 = *(void *)(v15 + 680);
    BOOL v13 = 1;
    goto LABEL_31;
  }
  int v9 = (*(unsigned char *)(a1 + 15205) != 0) << 8;
  if (*(unsigned char *)(a1 + 24749))
  {
    int v8 = v9 | 0x20;
    if (!*(unsigned char *)(a1 + 20494)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  int v8 = v9 | (*(unsigned char *)(a1 + 12518) != 0);
  if (*(_WORD *)(a1 + 15302) == 4353) {
LABEL_6:
  }
    v8 |= 2u;
LABEL_7:
  int v10 = *(unsigned __int8 *)(a1 + 29592);
  if ((v10 & 0x90) == 0x10)
  {
    switch(v10 & 3)
    {
      case 1:
        unsigned int v11 = v8 & 0xFFFFFFF3 | 4;
        break;
      case 2:
        unsigned int v11 = v8 & 0xFFFFFFF3 | 8;
        break;
      case 3:
        unsigned int v11 = v8 | 0xC;
        break;
      default:
        unsigned int v11 = v8 & 0xFFFFFFF3;
        break;
    }
    int v8 = v11 | (32 * v10) & 0x80;
  }
  *(void *)(a1 + 24200) = gleLLVMVPTransform;
  *(void *)(a1 + 24208) = gleLLVMVPTransform;
  if (v7) {
    goto LABEL_24;
  }
  if (*(unsigned char *)(a1 + 24756))
  {
    if (*(unsigned char *)(a1 + 28744)) {
      v8 |= 0x10u;
    }
    uint64_t v12 = *(void *)(a1 + 24400);
    BOOL v13 = (*(unsigned char *)(v12 + 467) & 1) == 0;
    if ((*(unsigned char *)(v12 + 467) & 1) == 0) {
      os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
    }
    *(void *)(a1 + 24232) = *(void *)(v12 + 504);
    *(void *)(a1 + 24240) = 0;
    uint64_t v14 = *(void *)(v12 + 4408);
    if (!v14)
    {
      glePrepareProgramForEmulation(a1, v12 + 40);
      uint64_t v14 = *(void *)(v12 + 4408);
    }
  }
  else
  {
    uint64_t v20 = *(void *)(a1 + 24480);
    *(void *)(a1 + 24240) = 0;
    *(void *)(a1 + 24232) = 0;
    uint64_t v14 = *(void *)(v20 + 4368);
    if (!v14)
    {
      glePrepareProgramForEmulation(a1, v20);
      uint64_t v14 = *(void *)(v20 + 4368);
    }
    if (*(unsigned char *)(v6 + 952))
    {
      BOOL v13 = 0;
      if ((*(unsigned char *)(v14 + 8) & 4) == 0) {
        v8 |= 0x10u;
      }
    }
    else
    {
      BOOL v13 = 0;
    }
  }
LABEL_31:
  uint64_t v16 = *(void *)(a1 + 24224);
  if (v16)
  {
    __int16 v17 = *(_WORD *)(v16 + 2) - 1;
    *(_WORD *)(v16 + 2) = v17;
    if (!v17) {
      MEMORY[0x22A686880]();
    }
  }
  ++*(_WORD *)(v14 + 2);
  *(void *)(a1 + 24224) = v14;
  if (v13) {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
  }
  *(_DWORD *)uint64_t v6 = v8;
  float32x4_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 24200);

  return v18(a1, a2, a3);
}

uint64_t gleLLVMVPTransform(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = (_DWORD *)(a1 + 24864);
  unint64_t v5 = *(void *)(a1 + 26032);
  unint64_t v6 = v5 + 640 * a3;
  uint64_t v25 = 0;
  long long v26 = 0u;
  long long v24 = 0u;
  int v7 = *(_DWORD *)(*(void *)(a1 + 24224) + 48);
  LODWORD(v24) = 15;
  uint64_t v8 = *(void *)(a1 + 26432);
  if (*(__int16 *)(v8 + 42) == -1) {
    goto LABEL_11;
  }
  if (*(unsigned char *)(v8 + 41)) {
    goto LABEL_11;
  }
  if ((*v4 & 1) == 0) {
    goto LABEL_11;
  }
  unsigned int v9 = *v4 & 0xFFFFFFEE;
  BYTE8(v24) = v9 == 0;
  if (v9) {
    goto LABEL_11;
  }
  unsigned int v10 = *(__int16 *)(a1 + 28662);
  if (v10 == 2)
  {
    int v11 = 2;
LABEL_9:
    DWORD2(v26) = v11;
    goto LABEL_10;
  }
  if (v10 <= 9)
  {
    int v11 = dword_227DC28B8[*(__int16 *)(a1 + 28662)];
    goto LABEL_9;
  }
LABEL_10:
  uint64_t v25 = a1 + 24784;
  *(void *)&long long v26 = -1;
LABEL_11:
  uint64_t v17 = a1 + 24864;
  int v18 = a3 & 3;
  char v19 = 4 - (a3 & 3);
  int v12 = 65280;
  int v13 = 65280;
  unint64_t v20 = v5 + 640 * a3;
  uint64_t v21 = 16 * (4 * v7);
  unint64_t v22 = v6 - 1920;
  do
  {
    if (v5 + 2560 > v6) {
      LODWORD(v24) = v24 >> v19;
    }
    do
    {
      int v23 = (v13 | v12) & (v13 | 0xFF);
      int v13 = glvmInterpretVPTransformFour();
      int v12 = v23;
      v5 += 2560;
      HIDWORD(v26) += 4;
      a2 += v21;
    }
    while (v5 < v22);
    unint64_t v6 = v20;
  }
  while (v5 < v20);
  if (v18)
  {
    LOWORD(v13) = ((*(unsigned __int8 *)(v20 - 637) << 8) | 0xFF) & (*(unsigned __int8 *)(v20 - 637) | 0xFF00);
    if (v18 != 1)
    {
      LOWORD(v13) = ((*(unsigned __int8 *)(v20 - 1277) << 8) | 0xFF) & (v13 | *(unsigned __int8 *)(v20 - 1277));
      if (v18 == 3) {
        LOWORD(v13) = ((*(unsigned __int8 *)(v20 - 1917) << 8) | 0xFF) & (v13 | *(unsigned __int8 *)(v20 - 1917));
      }
    }
  }
  if (BYTE8(v24))
  {
    uint64_t v14 = *(void *)(v25 + 32);
    unsigned int v15 = v26 + 1;
    if (v14) {
      *(_DWORD *)(v14 + 16) += v15;
    }
    *(_DWORD *)(v17 + 1116) += v15 / DWORD2(v26);
    *(_DWORD *)(v17 + 1112) += (DWORD1(v26) + 1) / DWORD2(v26);
  }
  return (v13 | (unsigned __int16)v23) & ((unsigned __int16)v13 | 0xFFu);
}

uint64_t gliGetAttribute(uint64_t result, int a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    if (*(void *)(result + 27648)) {
      (*(void (**)(uint64_t))(result + 27752))(result);
    }
    return gleGetAttrib(v5, a2, a3);
  }
  return result;
}

uint64_t gliSetAttribute(uint64_t result, int a2, unsigned __int16 *a3, __n128 a4)
{
  if (result)
  {
    unint64_t v6 = (int8x16_t *)result;
    if (*(void *)(result + 27648)) {
      a4.n128_f64[0] = (*(double (**)(uint64_t))(result + 27752))(result);
    }
    gleSetAttrib((uint64_t)v6, a2, a3, a4);
    return gleUpdateState(v6);
  }
  return result;
}

uint64_t gliCopyAttributes(uint64_t a1)
{
  uint64_t result = MEMORY[0x270FA5388](a1);
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v3 = v2;
    if (v2)
    {
      uint64_t v4 = result;
      if (*(void *)(result + 27648)) {
        (*(void (**)(uint64_t))(result + 27752))(result);
      }
      if (*(void *)(v3 + 27648)) {
        (*(void (**)(uint64_t))(v3 + 27752))(v3);
      }
      unsigned int v5 = 1;
      memset(v8, 0, 512);
      do
      {
        gleGetAttrib(v4, v5, (uint64_t)v8);
        gleSetAttrib(v3, v5, (unsigned __int16 *)v8, v6);
        BOOL v7 = v5 >= 0x80000;
        v5 *= 2;
      }
      while (!v7);
      return gleUpdateState((int8x16_t *)v3);
    }
  }
  return result;
}

uint64_t gliDestroyAllContexts()
{
  for (uint64_t i = 0; i != 5; ++i)
  {
    uint64_t result = gl_list[i];
    if (result) {
      j__gliDestroyContext();
    }
    gl_list[i] = 0;
  }
  return result;
}

uint64_t glInvalidFunction(uint64_t a1)
{
  if ((*(_WORD *)(a1 + 32493) & 0x200) != 0)
  {
    uint64_t v1 = 152;
    __int16 v2 = -17747;
    goto LABEL_5;
  }
  uint64_t v1 = a1 + 29832;
  if (!*(_WORD *)(a1 + 29832))
  {
    __int16 v2 = 1282;
LABEL_5:
    *(_WORD *)uint64_t v1 = v2;
  }
  return 0;
}

uint64_t gliNoop()
{
  return 0;
}

void gliAttachDrawable()
{
}

int8x16_t *gliUpdateDispatchState(int8x16_t *result, int a2)
{
  uint64_t v2 = (uint64_t)result;
  uint64_t v3 = &result[1790].i32[3];
  uint64_t v4 = result[1813].i64[0];
  if (!result[2029].i8[13])
  {
    if (!v4 && !result[1810].i64[1]) {
      result[1862].i32[2] |= 0x8000000u;
    }
    goto LABEL_10;
  }
  if (!v4)
  {
    uint64_t v5 = result[1810].i64[0];
    if (!result[1810].i64[1]) {
      result[1862].i32[2] |= 0x8000000u;
    }
    if (!v5)
    {
LABEL_10:
      *uint64_t v3 = 0;
      result[1862].i32[2] |= 0x20000000u;
    }
  }
  if (result[2029].i8[14])
  {
    result[2029].i8[14] = 0;
    *uint64_t v3 = 0;
    result[95] = vorrq_s8(result[95], (int8x16_t)xmmword_227DC2030);
    result[96] = vorrq_s8(result[96], (int8x16_t)xmmword_227DC2040);
    result[1862].i32[2] |= 0xDE3C0478;
  }
  else if (!a2)
  {
    return result;
  }
  gleSetBaseTCLState((uint64_t)result);
  glePopulateRenderDispatch(v2);
  gleUpdateViewScissorData(v2);
  *uint64_t v3 = 0;
  *(_DWORD *)(v2 + 1548) |= 0x40000u;
  BOOL v6 = *(void *)(v2 + 26280) != 0;
  uint64_t v7 = *(void *)(v2 + 29032);
  uint64_t v8 = *(void *)(v7 + 536);
  *(void *)(v2 + 26280) = v8;
  uint64_t v9 = *(void *)(v7 + 544);
  *(void *)(v2 + 26288) = v9;
  if (v8 && !*(unsigned char *)(v8 + 2)) {
    *(unsigned char *)(v8 + 2) = 1;
  }
  char v10 = v6 ^ (v8 == 0);
  if (v9 && !*(unsigned char *)(v9 + 2))
  {
    *(unsigned char *)(v9 + 2) = 1;
    if (v10) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if ((v10 & 1) == 0) {
LABEL_20:
  }
    gleSelectPrimitiveFunc(v2);
LABEL_21:

  return (int8x16_t *)gleSelectVertexSubmitFunc(v2);
}

uint64_t gliTerminateLibrary()
{
  gliDestroyAllContexts();
  ShTerminateLibrary();
  glgTerminateLibrary();
  uint64_t v0 = cvmPostTerm();
  gle_io_data = 0;
  gle_lib_init = 0;

  return MEMORY[0x270EF9D20](v0);
}

uint64_t gleUpdateSwapControl(uint64_t result)
{
  if (!*(void *)(result + 28960) && *(unsigned char *)(result + 32477) && *(void *)(result + 29008))
  {
    *(unsigned char *)(result + 32470) = *(unsigned char *)(result + 32483);
    char v1 = *(unsigned char *)(result + 32473);
    *(unsigned char *)(result + 32471) = v1;
    *(unsigned char *)(result + 32472) |= v1;
  }
  else
  {
    *(_WORD *)(result + 32470) = 0;
  }
  return result;
}

uint64_t gliGetInteger(unint64_t a1, uint64_t a2, uint64_t a3, __n128 a4, double a5, double a6)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  if (a2 == 224 && a3)
  {
    uint64_t v9 = 0;
    int v10 = 8288;
LABEL_4:
    *(_DWORD *)a3 = v10;
    return v9;
  }
  uint64_t v9 = 10004;
  if (!a1) {
    return v9;
  }
  int v11 = (unsigned char *)(a1 + 24760);
  int v12 = *(_DWORD *)(a1 + 29792);
  uint64_t v9 = v12 == 878944803 ? 10014 : 10004;
  if (!a3 || v12 != 878944803) {
    return v9;
  }
  if (a2 == 1962)
  {
    uint64_t v9 = 0;
    uint64_t v13 = *(void *)(a1 + 29000);
LABEL_13:
    *(void *)a3 = v13;
    return v9;
  }
  uint64_t v14 = (unsigned __int8 *)(a1 + 32477);
  if (*(void *)(a1 + 27648) && a2 != 309 && a2 != 313 && a2 != 604) {
    (*(void (**)(unint64_t))(a1 + 27752))(a1);
  }
  if ((int)a2 <= 1234)
  {
    if ((int)a2 <= 349)
    {
      switch((int)a2)
      {
        case 307:
          goto LABEL_24;
        case 308:
        case 312:
        case 314:
          goto LABEL_92;
        case 309:
          uint64_t v9 = 0;
          int v10 = *(_DWORD *)(a1 + 1672 * *(unsigned __int8 *)(a1 + 32499) + 34176);
          goto LABEL_4;
        case 310:
          int v36 = *(unsigned __int8 *)(a1 + 32501);
          if ((*(unsigned char *)(a1 + 28655) & 8) == 0
            || (*(char *)(a1 + 28681) & 0x80000000) == 0
            || (*(char *)(a1 + 28683) & 0x80000000) == 0)
          {
            if ((v36 - 3) >= 2)
            {
              if (v36 == 1) {
                gleDoSelectiveDispatchNoErrorCoreGL3(a1, 0x8000000u, 0x80u, 0x80u, 0x58000000u, a4.n128_f64[0], a5, a6);
              }
              else {
                gleDoSelectiveDispatchNoErrorCore(a1, 0x8000000u, 0x80u, 0x80u, 0x58000000u, a4, a5, a6);
              }
            }
            else
            {
              gleDoSelectiveDispatchNoErrorCoreES2(a1, 0x8000000u, 0x80u, 0x80u, 0x58000000u, a4.n128_f64[0], a5, a6);
            }
          }
          goto LABEL_184;
        case 311:
          int v37 = *(unsigned __int8 *)(a1 + 32501);
          if ((*(unsigned char *)(a1 + 28655) & 8) == 0
            || (*(char *)(a1 + 28681) & 0x80000000) == 0
            || (*(char *)(a1 + 28683) & 0x80000000) == 0)
          {
            if ((v37 - 3) >= 2)
            {
              if (v37 == 1) {
                gleDoSelectiveDispatchNoErrorCoreGL3(a1, 0x8000000u, 0x80u, 0x80u, 0x38000000u, a4.n128_f64[0], a5, a6);
              }
              else {
                gleDoSelectiveDispatchNoErrorCore(a1, 0x8000000u, 0x80u, 0x80u, 0x38000000u, a4, a5, a6);
              }
            }
            else
            {
              gleDoSelectiveDispatchNoErrorCoreES2(a1, 0x8000000u, 0x80u, 0x80u, 0x38000000u, a4.n128_f64[0], a5, a6);
            }
          }
          goto LABEL_186;
        case 313:
          uint64_t v9 = 0;
          BOOL v38 = *(void *)(a1 + 27648) == 0;
          goto LABEL_188;
        case 315:
          uint64_t v9 = 0;
          int v10 = *(_DWORD *)(a1 + 29768);
          goto LABEL_4;
        case 316:
          uint64_t v9 = 0;
          int v10 = (*(unsigned __int16 *)(a1 + 32493) >> 9) & 1;
          goto LABEL_4;
        default:
          if (a2 == 221)
          {
            uint64_t v9 = 0;
            int v10 = *v14;
          }
          else
          {
            if (a2 != 228) {
              goto LABEL_92;
            }
            uint64_t v9 = 0;
            int v10 = *(_DWORD *)(a1 + 29772);
          }
          break;
      }
      goto LABEL_4;
    }
    if ((int)a2 <= 604)
    {
      uint64_t v15 = (a2 - 350);
      if (v15 <= 0x31)
      {
        if (((1 << (a2 - 94)) & 0x155540005555) != 0
          || ((1 << (a2 - 94)) & 0x5500000) != 0)
        {
LABEL_24:
          uint64_t v9 = 0;
          *(_DWORD *)a3 = 0;
          return v9;
        }
        if (v15 == 49)
        {
          if ((*(unsigned char *)(a1 + 24864) & 0x10) != 0)
          {
            uint64_t v9 = 0;
            unsigned int v20 = *(unsigned __int8 *)(*(void *)(a1 + 24768) + 3547);
          }
          else
          {
            uint64_t v9 = 0;
            if (*v11) {
              unsigned int v20 = *(unsigned __int8 *)(*(void *)(a1 + 24432) + 467);
            }
            else {
              unsigned int v20 = *(unsigned __int8 *)(*(void *)(a1 + 24512) + 427);
            }
          }
          int v10 = (v20 >> 1) & 1;
          goto LABEL_4;
        }
      }
      goto LABEL_92;
    }
    if ((int)a2 > 929)
    {
      if ((int)a2 <= 982)
      {
        if (a2 == 930)
        {
          uint64_t v9 = 0;
          uint64_t v13 = *(void *)(a1 + 19296);
          goto LABEL_13;
        }
        if (a2 == 982)
        {
          uint64_t v9 = 0;
          int v10 = (*(unsigned __int16 *)(a1 + 32493) >> 4) & 1;
          goto LABEL_4;
        }
      }
      else
      {
        switch(a2)
        {
          case 0x3D7:
            if (*(void *)(a1 + 19296) != *(void *)(*(void *)a3 + 19296))
            {
              uint64_t v9 = 0;
              *(void *)a3 = 0;
              return v9;
            }
            uint64_t v9 = 0;
            uint64_t v13 = 1;
            goto LABEL_13;
          case 0x3DA:
            uint64_t v9 = 0;
            int v10 = (*(unsigned __int16 *)(a1 + 32493) >> 3) & 1;
            goto LABEL_4;
          case 0x3E0:
            uint64_t v9 = 0;
            int v10 = *(_WORD *)(a1 + 32493) & 1;
            goto LABEL_4;
        }
      }
      goto LABEL_92;
    }
    if ((int)a2 > 700)
    {
      if (a2 == 701)
      {
        uint64_t v9 = 0;
        int v10 = *(unsigned __int8 *)(a1 + 32492);
        goto LABEL_4;
      }
      if (a2 != 924) {
        goto LABEL_92;
      }
      unsigned int v29 = *(_DWORD *)a3;
      if (!*(_DWORD *)a3) {
        return 10008;
      }
      float32x4_t v30 = *(os_unfair_lock_s **)(a1 + 19296);
      uint64_t v31 = (uint64_t)&v30[10];
      os_unfair_lock_lock(v30 + 81);
      float32x4_t v32 = gleLookupHashObject(v31, v29);
      if (v32 && (v32[101] & 0x800) != 0)
      {
        uint64_t v9 = 0;
        LODWORD(v22) = *((_DWORD *)v32 + 205);
LABEL_226:
        *(_DWORD *)a3 = v22;
        goto LABEL_227;
      }
      goto LABEL_81;
    }
    if (a2 != 605)
    {
      if (a2 == 611)
      {
        os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
        uint64_t v21 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, *(_DWORD *)a3);
        if (!v21 || *((_DWORD *)v21 + 6) != 8)
        {
          uint64_t v9 = 10008;
          goto LABEL_227;
        }
        if (*((unsigned char *)v21 + 3976) == 1)
        {
          LODWORD(v22) = *((unsigned __int8 *)v21 + 212);
          if (*((unsigned char *)v21 + 212))
          {
            uint64_t v23 = v21[92];
            if (!v23)
            {
              unint64_t v22 = (unsigned int *)v21[93];
              if (!v22) {
                goto LABEL_223;
              }
              unint64_t v22 = (unsigned int *)v21[98];
              if (!v22) {
                goto LABEL_223;
              }
              uint64_t v74 = *v22;
              if (!v74)
              {
                LODWORD(v22) = 0;
                goto LABEL_223;
              }
              int v75 = (int *)(v22 + 2);
              while (1)
              {
                int v76 = *v75;
                v75 += 2;
                if ((v76 & 0x1F00) == 0x1200) {
                  goto LABEL_222;
                }
                LODWORD(v22) = 0;
                if (!--v74) {
                  goto LABEL_223;
                }
              }
            }
            LODWORD(v22) = *(_DWORD *)(v23 + 48);
            if (v22)
            {
              long long v24 = (void *)(v23 + 8 * *(unsigned int *)(v23 + 52));
              while ((*v24 & 0x7C00) != 0x4800)
              {
                ++v24;
                LODWORD(v22) = v22 - 1;
                if (!v22) {
                  goto LABEL_223;
                }
              }
LABEL_222:
              LODWORD(v22) = 4;
            }
          }
LABEL_223:
          if (*((unsigned char *)v21 + 3028)) {
            LODWORD(v22) = v21[441] & 2 | (*((_DWORD *)v21 + 882) >> 3) & 1 | v22;
          }
          uint64_t v9 = 0;
          goto LABEL_226;
        }
LABEL_81:
        uint64_t v9 = 10007;
LABEL_227:
        os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
        return v9;
      }
LABEL_92:
      float32x4_t v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 29448) + 200);
      uint64_t v35 = *(void *)(a1 + 29016);
      return v34(v35, a2, a3);
    }
    unsigned int v39 = *(_DWORD *)a3;
    int v41 = *(_DWORD *)(a3 + 8);
    int v40 = *(_DWORD *)(a3 + 12);
    uint64_t v42 = *(void *)(a3 + 16);
    if (*(_DWORD *)a3 == 36161)
    {
      unsigned int v43 = 0;
      int v44 = 0;
      uint64_t v45 = *(void *)(a1 + 28952) + 40;
    }
    else
    {
      int v44 = *(_DWORD *)(a3 + 4);
      uint64_t v63 = gleLookUpNonProxyTexture(a1, *(_DWORD *)a3);
      if (v39 - 34069 >= 6) {
        unsigned int v43 = 0;
      }
      else {
        unsigned int v43 = v39 - 34069;
      }
      if (!v63) {
        return 0;
      }
      uint64_t v45 = v63;
    }
    if ((*(unsigned char *)(v45 + 480 * v43 + 32 * v44 + 1043) & 0x20) != 0 && !*(unsigned char *)(v45 + 770))
    {
      if (v44 >= *(unsigned __int8 *)(v45 + 976)
        && (*(unsigned char *)(v45 + 480 * v43 + 32 * v44 + 1043) & 0x40) != 0
        && v44 <= *(unsigned __int8 *)(v45 + 978))
      {
        uint64_t v65 = v45 + 480 * v43 + 32 * v44;
        __int16 v77 = *(_WORD *)(v65 + 1044);
        int v78 = *(_DWORD *)(v65 + 1048);
        *(_WORD *)(v65 + 1048) = v41;
        *(_WORD *)(v65 + 1050) = v40;
        *(_WORD *)(v65 + 1044) = *(_WORD *)(v65 + 1036);
        *(void *)(v65 + 1056) = v42;
        uint64_t v66 = 22;
        if (*(void *)(a1 + 29024) != *(void *)(v45 + 536)) {
          uint64_t v66 = 23;
        }
        uint64_t v67 = v14[v66];
        unint64_t v68 = a1 + 1672 * v67;
        (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v68 + 34160) + 1328))(*(void *)(v68 + 32512), 1, 1, *(void *)(v45 + 8 * v67));
        LODWORD(v79) = *(void *)(v45 + 8 * v67);
        *(void *)((char *)&v79 + 4) = __PAIR64__(v44, v43);
        HIDWORD(v79) = v41;
        *(void *)&long long v80 = __PAIR64__(v42, v40);
        (*(void (**)(void, uint64_t, long long *))(*(void *)(v68 + 34160) + 1256))(*(void *)(v68 + 32512), 605, &v79);
        goto LABEL_214;
      }
      if ((*(unsigned char *)(v45 + 480 * v43 + 32 * v44 + 1043) & 0x10) != 0)
      {
        if ((*(_WORD *)(v45 + 768) & 0x800) != 0)
        {
LABEL_213:
          uint64_t v72 = *(unsigned __int8 *)(a1 + 32499);
          uint64_t v65 = v45 + 480 * v43 + 32 * v44;
          __int16 v77 = *(_WORD *)(v65 + 1044);
          int v78 = *(_DWORD *)(v65 + 1048);
          *(_WORD *)(v65 + 1048) = v41;
          *(_WORD *)(v65 + 1050) = v40;
          *(_WORD *)(v65 + 1044) = *(_WORD *)(v65 + 1036);
          *(void *)(v65 + 1056) = v42;
          unint64_t v73 = a1 + 1672 * v72;
          (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(a1 + 29448) + 272))(*(void *)(v73 + 32512), 1, 1, *(void *)(v45 + 8 * v72));
          LODWORD(v79) = *(void *)(v45 + 8 * v72);
          *(void *)((char *)&v79 + 4) = __PAIR64__(v44, v43);
          HIDWORD(v79) = v41;
          *(void *)&long long v80 = __PAIR64__(v42, v40);
          (*(void (**)(void, uint64_t, long long *))(*(void *)(a1 + 29448) + 200))(*(void *)(v73 + 32512), 605, &v79);
LABEL_214:
          uint64_t v9 = 0;
          *(_DWORD *)(v65 + 1048) = v78;
          *(_WORD *)(v65 + 1044) = v77;
          *(void *)(v65 + 1056) = 0;
          return v9;
        }
        int v69 = 393218;
        uint64_t v83 = 0;
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        HIDWORD(v81) = 393216;
        if (*(_WORD *)(v45 + 772) == 6407)
        {
          int v70 = *(unsigned __int16 *)(v45 + 480 * v43 + 32 * v44 + 1048);
          if (v70 == 32993 || v70 == 6408)
          {
            HIDWORD(v81) = 425984;
            int v69 = 425986;
          }
        }
        if (*(unsigned char *)(a1 + 18480)) {
          HIDWORD(v81) = v69;
        }
        uint64_t v71 = v45 + 480 * v43 + 32 * v44;
        glgConvertType();
        glgConvertType();
        LODWORD(v80) = gleRowBytes(*(unsigned __int16 *)(v71 + 1048), *(unsigned __int16 *)(v71 + 1050), *(unsigned __int16 *)(v71 + 1044));
        HIDWORD(v80) = gleRowBytes(v41, v40, *(unsigned __int16 *)(v71 + 1036));
        DWORD2(v81) = 2;
        LODWORD(v82) = 1474562;
        DWORD1(v82) = *(unsigned __int16 *)(v71 + 1036);
        DWORD2(v82) = *(unsigned __int16 *)(v71 + 1038);
        *(void *)&long long v79 = *(void *)(v71 + 1056);
        *((void *)&v79 + 1) = v42;
        glgProcessPixelsWithProcessor();
      }
      else if ((*(_WORD *)(v45 + 768) & 0x800) != 0)
      {
        goto LABEL_213;
      }
    }
    return 0;
  }
  if ((int)a2 <= 1499)
  {
    if ((int)a2 <= 1401)
    {
      switch((int)a2)
      {
        case 1310:
LABEL_184:
          uint64_t v9 = 0;
          int v10 = *(_WORD *)(a1 + 2276) == 0;
          goto LABEL_4;
        case 1311:
LABEL_186:
          if ((*(_DWORD *)(a1 + 1672 * *(unsigned __int8 *)(a1 + 32500) + 34176) & 0x7F00) == 0x400) {
            goto LABEL_24;
          }
          uint64_t v9 = 0;
          BOOL v38 = *(unsigned __int16 *)(a1 + 2276) == 2;
LABEL_188:
          int v10 = !v38;
          break;
        case 1312:
          uint64_t v9 = 0;
          uint64_t v13 = *(void *)(a1 + 26280);
          goto LABEL_13;
        case 1313:
          uint64_t v9 = 0;
          uint64_t v13 = *(void *)(a1 + 26288);
          goto LABEL_13;
        default:
          if (a2 != 1235) {
            goto LABEL_92;
          }
          uint64_t v9 = 0;
          int v10 = (*(unsigned __int16 *)(a1 + 28660) >> 15) ^ 1;
          break;
      }
      goto LABEL_4;
    }
    if ((int)a2 <= 1459)
    {
      switch((int)a2)
      {
        case 1402:
          uint64_t v9 = 0;
          int v10 = *(unsigned __int8 *)(a1 + 32503);
          goto LABEL_4;
        case 1404:
          uint64_t v9 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 29448) + 200))(*(void *)(a1 + 29016), 1404, a3);
          unint64_t v33 = glt_absolutetime_to_nanoseconds(*(void *)(a1 + 19168));
          if (!v9) {
            v33 += *(void *)a3;
          }
          *(void *)a3 = v33;
          *(void *)(a1 + 19168) = 0;
          return v9;
        case 1405:
          uint64_t v9 = 0;
          *(void *)a3 = glt_absolutetime_to_nanoseconds(*(void *)(a1 + 19176));
          *(void *)(a1 + 19176) = 0;
          return v9;
        case 1406:
          uint64_t v9 = 0;
          *(void *)a3 = glt_absolutetime_to_nanoseconds(*(void *)(a1 + 19184));
          *(void *)(a1 + 19184) = 0;
          return v9;
        default:
          goto LABEL_92;
      }
    }
    switch(a2)
    {
      case 0x5B4:
        uint64_t v9 = 0;
        *(void *)a3 = glt_absolutetime_to_nanoseconds(*(void *)(a1 + 19192));
        *(void *)(a1 + 19192) = 0;
        return v9;
      case 0x5B5:
        uint64_t v9 = 0;
        *(void *)a3 = glt_absolutetime_to_nanoseconds(*(void *)(a1 + 19200));
        *(void *)(a1 + 19200) = 0;
        return v9;
      case 0x5B6:
        uint64_t v9 = 0;
        *(void *)a3 = glt_absolutetime_to_nanoseconds(*(void *)(a1 + 19208));
        *(void *)(a1 + 19208) = 0;
        return v9;
    }
    goto LABEL_92;
  }
  uint64_t v9 = 0;
  switch((int)a2)
  {
    case 1600:
      uint64_t v17 = *(void *)(a1 + 19296) + 72;
      uint64_t v18 = a1;
      int v19 = 2;
      break;
    case 1601:
      return v9;
    case 1602:
      uint64_t v17 = *(void *)(a1 + 19296) + 104;
      uint64_t v18 = a1;
      int v19 = 3;
      break;
    case 1603:
      uint64_t v17 = *(void *)(a1 + 19296) + 168;
      uint64_t v18 = a1;
      int v19 = 5;
      break;
    case 1604:
      uint64_t v17 = a1 + 26352;
      uint64_t v18 = a1;
      int v19 = -1;
      break;
    case 1605:
      uint64_t v17 = *(void *)(a1 + 19296) + 264;
      uint64_t v18 = a1;
      int v19 = 8;
      break;
    case 1606:
      uint64_t v17 = a1 + 25904;
      uint64_t v18 = a1;
      int v19 = -11;
      break;
    case 1607:
      uint64_t v17 = a1 + 25872;
      uint64_t v18 = a1;
      int v19 = -12;
      break;
    case 1608:
      uint64_t v17 = *(void *)(a1 + 19296) + 8;
      uint64_t v18 = a1;
      int v19 = 0;
      break;
    case 1609:
      uint64_t v17 = *(void *)(a1 + 19296) + 40;
      uint64_t v18 = a1;
      int v19 = 1;
      break;
    case 1610:
      uint64_t v17 = *(void *)(a1 + 19296) + 136;
      uint64_t v18 = a1;
      int v19 = 4;
      break;
    case 1611:
      uint64_t v17 = *(void *)(a1 + 19296) + 232;
      uint64_t v18 = a1;
      int v19 = 7;
      break;
    case 1612:
    case 1613:
    case 1614:
    case 1615:
      goto LABEL_92;
    case 1616:
      uint64_t v17 = *(void *)(a1 + 19296) + 200;
      uint64_t v18 = a1;
      int v19 = 6;
      break;
    case 1617:
      uint64_t v17 = a1 + 26400;
      uint64_t v18 = a1;
      int v19 = -13;
      break;
    default:
      switch((int)a2)
      {
        case 1700:
          os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
          float32x4_t v46 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, *(_DWORD *)a3);
          if (v46)
          {
            int v47 = *((_DWORD *)v46 + 6);
            if (v47 == 7)
            {
              *(void *)a3 = 0;
            }
            else if (v47 == 8)
            {
              uint64_t v48 = 0;
              *(void *)&long long v81 = 0;
              long long v79 = 0u;
              long long v80 = 0u;
              float32x4_t v49 = v46 + 92;
              do
              {
                *(void *)((char *)&v79 + v48) = *v49;
                v48 += 8;
                v49 += 88;
              }
              while (v48 != 40);
              *(void *)a3 = ShGetLinkerPPStream();
            }
          }
          goto LABEL_194;
        case 1701:
          os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
          float32x4_t v50 = gleLookupHashObject(*(void *)(a1 + 19296) + 168, *(_DWORD *)a3);
          if (!v50) {
            goto LABEL_194;
          }
          if (*((_DWORD *)v50 + 6) == 8)
          {
            uint64_t v51 = 0;
            int v52 = 0;
            float32x4_t v53 = v50 + 93;
            do
            {
              float32x4_t v54 = (_DWORD *)v53[v51];
              if (v54)
              {
                size_t v55 = (*v54 + 4);
                float32x4_t v56 = malloc_type_malloc(v55, 0xF73EBA04uLL);
                if (!v56)
                {
                  if (!*(_WORD *)(a1 + 29832)) {
                    *(_WORD *)(a1 + 29832) = 1285;
                  }
                  return 10016;
                }
                float32x4_t v57 = v56;
                memcpy(v56, v54, v55);
                *(void *)(a3 + 8 * ++v52) = v57;
              }
              v51 += 88;
            }
            while (v51 != 440);
          }
          else
          {
            int v52 = 0;
          }
          *(_DWORD *)a3 = v52;
LABEL_194:
          os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
          break;
        case 1702:
        case 1706:
          goto LABEL_92;
        case 1703:
          uint64_t v9 = 0;
          int v10 = *(_DWORD *)(a1 + 29780);
          goto LABEL_4;
        case 1704:
          uint64_t v9 = 0;
          int v10 = *(_DWORD *)(a1 + 29784);
          goto LABEL_4;
        case 1705:
          uint64_t v9 = 0;
          BOOL v38 = (*(unsigned char *)(*(void *)(a1 + 29032) + 25) & 0x7F) == 0;
          goto LABEL_188;
        case 1707:
        case 1708:
        case 1709:
        case 1710:
          os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
          gleLookupHashObject(*(void *)(a1 + 19296) + 168, *(_DWORD *)a3);
          uint64_t Integer = ShGetInteger();
          os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 19296) + 324));
          return Integer;
        default:
          switch((int)a2)
          {
            case 1500:
              unsigned int v25 = *(_DWORD *)a3;
              uint64_t v26 = *(int *)(a3 + 4);
              if (*(_DWORD *)a3 == 36161)
              {
                unsigned int v27 = 0;
                uint64_t v28 = *(void *)(a1 + 28952) + 40;
              }
              else
              {
                uint64_t v28 = gleLookUpNonProxyTexture(a1, *(_DWORD *)a3);
                unsigned int v27 = v25 - 34069;
                if (v25 - 34069 >= 6) {
                  unsigned int v27 = 0;
                }
                if (!v28) {
                  return 0;
                }
              }
              if ((*(unsigned char *)(v28 + 480 * v27 + 32 * v26 + 1043) & 0x20) == 0) {
                return 0;
              }
              uint64_t v9 = 0;
              uint64_t v64 = v28 + 480 * v27 + 32 * v26;
              *(_DWORD *)(a3 + 8) = *(unsigned __int16 *)(v64 + 1048);
              *(_DWORD *)(a3 + 12) = *(unsigned __int16 *)(v64 + 1050);
              return v9;
            case 1501:
              uint64_t v9 = 0;
              int v10 = (*(unsigned __int16 *)(a1 + 32493) >> 13) & 1;
              goto LABEL_4;
            case 1502:
              unsigned int v58 = *(_DWORD *)a3;
              *(_DWORD *)(a3 + 4) = 0;
              if (v58 != 36161) {
                return 10008;
              }
              uint64_t v59 = *(void *)(a1 + 28952);
              if (!v59) {
                return 10007;
              }
              if (!*(void *)(v59 + 800) && (*(_WORD *)(v59 + 808) & 0x800) == 0) {
                return 0;
              }
              uint64_t v9 = 0;
              int v60 = 1;
LABEL_155:
              *(_DWORD *)(a3 + 4) = v60;
              break;
            case 1503:
              uint64_t v9 = 0;
              uint64_t v61 = *(void *)(a1 + 26432);
              *(_DWORD *)a3 = *(unsigned __int16 *)(v61 + 42);
              int v60 = *(_DWORD *)(v61 + 172);
              goto LABEL_155;
            default:
              goto LABEL_92;
          }
          return v9;
      }
      return 0;
  }

  return gleGetHashMachineObjectNameTargetPairs(v18, v17, v19, (uint64_t *)a3);
}

unint64_t glt_absolutetime_to_nanoseconds(uint64_t a1)
{
  if ((glt_absolutetime_to_nanoseconds_have_info & 1) == 0)
  {
    mach_timebase_info(&glt_absolutetime_to_nanoseconds_info);
    glt_absolutetime_to_nanoseconds_have_info = 1;
  }
  unint64_t v2 = glt_absolutetime_to_nanoseconds_info.numer * a1
     + ((unint64_t)glt_absolutetime_to_nanoseconds_info.denom >> 1);
  unint64_t v3 = v2 / glt_absolutetime_to_nanoseconds_info.denom;
  if (v2 % glt_absolutetime_to_nanoseconds_info.denom) {
    unint64_t v4 = v2 / glt_absolutetime_to_nanoseconds_info.denom;
  }
  else {
    unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
  }
  if (glt_absolutetime_to_nanoseconds_info.denom) {
    return v3;
  }
  else {
    return v4;
  }
}

uint64_t gliGetMemoryAnnotationList()
{
  return 0;
}

uint64_t gliBindViewES(uint64_t a1, uint64_t a2, char a3, int a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 27648)) {
    (*(void (**)(uint64_t))(a1 + 27752))(a1);
  }
  if (!*(void *)(a1 + 28952))
  {
    if (!*(_WORD *)(a1 + 29832))
    {
      uint64_t result = 0;
      *(_WORD *)(a1 + 29832) = 1282;
      return result;
    }
    return 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 29448) + 240))(*(void *)(a1 + 29016));
  uint64_t v8 = *(void *)(a1 + 28952);
  if (a2)
  {
    v21[0] = v8 + 40;
    v21[1] = eagl_create_buffer;
    v21[2] = eagl_destroy_buffer;
    v21[3] = eagl_preflight_properties;
    int32x2_t v9 = (int32x2_t)0x8367000080E1;
    uint64_t v10 = 1111970369;
    if (a4 > 37873)
    {
      if (a4 == 37874)
      {
        int32x2_t v9 = vdup_n_s32(0x8036u);
        v9.i32[0] = 37874;
        uint64_t v10 = 1999843442;
      }
      else if (a4 == 37881)
      {
        int32x2_t v9 = vdup_n_s32(0x93FAu);
        v9.i32[0] = 37881;
        uint64_t v10 = 1647534392;
      }
    }
    else if ((a4 - 35446) >= 2)
    {
      if (a4 == 36194)
      {
        int32x2_t v9 = (int32x2_t)0x836300001907;
        uint64_t v10 = 1278555701;
      }
    }
    else
    {
      int32x2_t v9 = vdup_n_s32(0x1403u);
      v9.i32[0] = a4;
      uint64_t v10 = 1999908961;
    }
    int32x2_t v20 = v9;
    if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(a2 + 8))(a2, v10, v21))
    {
      if (*(int *)a2 < 2) {
        int v14 = 0;
      }
      else {
        int v14 = (*(uint64_t (**)(uint64_t))(a2 + 48))(a2) & 0xFFFFFFF7;
      }
      uint64_t v15 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(a2 + 24))(a2);
      if (v15)
      {
        uint64_t v16 = v15;
        int Width = IOSurfaceGetWidth(v15);
        int Height = IOSurfaceGetHeight(v16);
        if ((v14 & 4) != 0) {
          int v19 = Height;
        }
        else {
          int v19 = Width;
        }
        if ((v14 & 4) == 0) {
          int Width = Height;
        }
        IOSurfaceID ID = IOSurfaceGetID(v16);
        int v23 = 36161;
        int v24 = a4;
        int v25 = v19;
        int v26 = Width;
        int32x2_t v27 = v20;
        int v28 = 0;
        int v29 = v14;
        j__gliSetInteger();
      }
      (*(void (**)(uint64_t))(a2 + 16))(a2);
    }
    return 0;
  }
  uint64_t v12 = *(void *)(v8 + 800);
  if (v12) {
    (*(void (**)(void))(v12 + 16))();
  }
  *(void *)(v8 + 800) = 0;
  *(_WORD *)(v8 + 808) &= 0xE3FFu;
  glRenderbufferStorageEXT_Exec(a1, 36161, 32856, 0, 0);
  *(_WORD *)(v8 + 808) &= 0xE3FFu;
  *(void *)(v8 + 800) = 0;
  char v13 = *(unsigned char *)(v8 + 832) & 0xE5;
  *(void *)(v8 + 848) = a1;
  *(unsigned char *)(v8 + 832) = v13 | (2 * (a3 & 1));
  return 1;
}

uint64_t eagl_create_buffer()
{
  return 1;
}

void eagl_destroy_buffer(uint64_t a1, IOSurfaceRef buffer)
{
  IOSurfaceID ID = IOSurfaceGetID(buffer);
  uint64_t v4 = 0;
  while (IOSurfaceGetID(*(IOSurfaceRef *)(a1 + 816 + v4)) != ID)
  {
    v4 += 8;
    if (v4 == 32) {
      return;
    }
  }
  uint64_t v5 = *(const void **)(a1 + 1024);
  uint64_t v6 = a1 + 816;
  uint64_t v7 = *(const void **)(v6 + v4);
  if (v5 != v7)
  {
    CFRelease(v7);
    *(void *)(v6 + v4) = 0;
  }
}

void eagl_preflight_properties()
{
}

uint64_t gliPresentViewES(uint64_t a1, char a2, double a3)
{
  if (*(void *)(a1 + 27648))
  {
    uint64_t v6 = (double *)gleAddCommand(a1, (uint64_t)gliPresentViewES_UnpackThread, 16);
    v6[1] = a3;
    *(unsigned char *)uint64_t v6 = a2;
    (*(void (**)(uint64_t))(a1 + 27744))(a1);
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 27728), 0xFFFFFFFFFFFFFFFFLL);
    return 1;
  }
  else
  {
    return gliPresentViewES_Exec(a1, a2, a3);
  }
}

uint64_t gliPresentViewES_UnpackThread(uint64_t a1, double *a2)
{
  return 16;
}

uint64_t gliPresentViewES_Exec(uint64_t a1, int a2, double a3)
{
  uint64_t v3 = a1 + 29832;
  uint64_t v4 = *(void *)(a1 + 28952);
  if (!v4 || !*(void *)(v4 + 800))
  {
    if (!*(_WORD *)v3)
    {
      uint64_t result = 0;
      *(_WORD *)uint64_t v3 = 1282;
      return result;
    }
    return 0;
  }
  if ((*(_WORD *)(v4 + 808) & 0x800) == 0) {
    return 0;
  }
  unsigned int v8 = *(unsigned __int8 *)(a1 + 32496);
  if (*(unsigned char *)(a1 + 32496))
  {
    unint64_t v9 = 0;
    int v10 = 0;
    int v11 = (void *)(a1 + 32512);
    do
    {
      if ((*(unsigned char *)(v4 + 832) & 2) != 0)
      {
        int v12 = (*(uint64_t (**)(void, uint64_t, void))(v11[206] + 1248))(*v11, 707, *(void *)(v4 + 40 + 8 * v9));
        if (v10) {
          BOOL v13 = 1;
        }
        else {
          BOOL v13 = v12 == 0;
        }
        if (!v13) {
          int v10 = v12;
        }
        unsigned int v8 = *(unsigned __int8 *)(v3 + 2664);
      }
      ++v9;
      v11 += 209;
    }
    while (v9 < v8);
    if (v10) {
      return 0;
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 29448) + 240))(*(void *)(a1 + 29016));
  char v14 = *(unsigned char *)(v4 + 832);
  if ((v14 & 8) != 0)
  {
    uint64_t v15 = *(void *)(v4 + 800);
    if (*(int *)v15 < 5)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 32))(v15, 1);
      if (!result) {
        return result;
      }
      goto LABEL_29;
    }
    if (a2) {
      unsigned int v16 = 5;
    }
    else {
      unsigned int v16 = 3;
    }
    if (a3 == 0.0) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = v16;
    }
    if ((*(uint64_t (**)(uint64_t, uint64_t, double))(v15 + 32))(v15, v17, a3))
    {
LABEL_29:
      char v14 = *(unsigned char *)(v4 + 832) & 0xF7;
      goto LABEL_30;
    }
    return 0;
  }
LABEL_30:
  *(unsigned char *)(v4 + 832) = v14 & 0xEF;
  gfxUpdatePluginTextureLevelGeometry();
  gleDirtyTextureLevelCurrentBindPointsGeom(a1, v4 + 40, (int *)(v4 + 1072));
  return 1;
}

uint64_t gliGetIOSurfacePropertiesES(uint64_t a1)
{
  if (!a1) {
    return 10005;
  }
  uint64_t v2 = *(void *)(a1 + 760);
  if (!v2) {
    return 10005;
  }
  if ((*(unsigned char *)(a1 + 792) & 8) != 0) {
    return 0;
  }
  *(_DWORD *)(a1 + 872) = 0;
  if (*(int *)v2 >= 2)
  {
    *(_DWORD *)(a1 + 868) = (*(uint64_t (**)(void))(v2 + 48))();
    uint64_t v3 = *(void *)(a1 + 760);
    if (*(int *)v3 >= 4)
    {
      uint64_t v4 = *(uint64_t (**)(void))(v3 + 56);
      if (v4)
      {
        int v5 = v4();
        uint64_t result = 0;
        *(_DWORD *)(a1 + 872) = (v5 + *MEMORY[0x263EF8AF8] - 1) & -*MEMORY[0x263EF8AF8];
        return result;
      }
    }
    return 0;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 868) = 0;
  return result;
}

uint64_t gliGetNewIOSurfaceES(uint64_t a1)
{
  if (!a1) {
    return 10005;
  }
  uint64_t v2 = *(void *)(a1 + 760);
  if (!v2) {
    return 10005;
  }
  if ((*(unsigned char *)(a1 + 792) & 0x10) != 0) {
    return 10016;
  }
  if ((*(unsigned char *)(a1 + 792) & 8) != 0) {
    return 0;
  }
  uint64_t v3 = (__IOSurface *)(*(uint64_t (**)(void))(v2 + 24))();
  if (!v3)
  {
    *(unsigned char *)(a1 + 792) |= 0x10u;
    return 10016;
  }
  uint64_t v4 = v3;
  unsigned int v5 = *(_DWORD *)(a1 + 868);
  IOSurfaceID ID = IOSurfaceGetID(v3);
  if ((*(_WORD *)(a1 + 768) & 0x800) == 0) {
    return 10005;
  }
  IOSurfaceID v8 = ID;
  uint64_t v9 = 0;
  uint64_t v10 = a1 + 848;
  while (IOSurfaceGetID(*(IOSurfaceRef *)(v10 + 8 * v9 - 32)) != v8 || *(_DWORD *)(v10 + 4 * v9) != v5)
  {
    if (++v9 == 4)
    {
      uint64_t v9 = 0;
      uint64_t result = 10005;
      while (*(void *)(a1 + 816 + 8 * v9))
      {
        if (++v9 == 4) {
          return result;
        }
      }
      break;
    }
  }
  uint64_t v11 = v9;
  uint64_t v12 = a1 + 8 * v9;
  if (*(void *)(v12 + 816))
  {
    unsigned int v5 = *(_DWORD *)(a1 + 4 * v9 + 848);
    uint64_t v4 = *(__IOSurface **)(v12 + 816);
  }
  else
  {
    CFRetain(v4);
    size_t WidthOfPlane = IOSurfaceGetWidthOfPlane(*(IOSurfaceRef *)(a1 + 1024), *(unsigned __int16 *)(a1 + 1016));
    size_t HeightOfPlane = IOSurfaceGetHeightOfPlane(*(IOSurfaceRef *)(a1 + 1024), *(unsigned __int16 *)(a1 + 1016));
    size_t ElementWidthOfPlane = IOSurfaceGetElementWidthOfPlane(*(IOSurfaceRef *)(a1 + 1024), *(unsigned __int16 *)(a1 + 1016));
    Elementsize_t HeightOfPlane = IOSurfaceGetElementHeightOfPlane(*(IOSurfaceRef *)(a1 + 1024), *(unsigned __int16 *)(a1 + 1016));
    size_t v33 = IOSurfaceGetWidthOfPlane(v4, *(unsigned __int16 *)(a1 + 1016));
    size_t v16 = IOSurfaceGetHeightOfPlane(v4, *(unsigned __int16 *)(a1 + 1016));
    size_t v32 = IOSurfaceGetElementWidthOfPlane(v4, *(unsigned __int16 *)(a1 + 1016));
    size_t v17 = IOSurfaceGetElementHeightOfPlane(v4, *(unsigned __int16 *)(a1 + 1016));
    if ((*(unsigned char *)(a1 + 864) & 4) != 0)
    {
      size_t v26 = ElementWidthOfPlane;
      size_t v28 = WidthOfPlane;
    }
    else
    {
      size_t v26 = ElementHeightOfPlane;
      Elementsize_t HeightOfPlane = ElementWidthOfPlane;
      size_t v28 = HeightOfPlane;
      size_t HeightOfPlane = WidthOfPlane;
    }
    uint64_t v23 = v11;
    size_t v31 = HeightOfPlane;
    if ((v5 & 4) != 0)
    {
      size_t v29 = v16;
      size_t v27 = v17;
    }
    else
    {
      size_t v29 = v33;
      size_t v27 = v32;
      size_t v32 = v17;
      size_t v33 = v16;
    }
    int IsTiled = IOSurfaceIsTiled();
    size_t PlaneCount = IOSurfaceGetPlaneCount(*(IOSurfaceRef *)(a1 + 1024));
    size_t v20 = IOSurfaceGetPlaneCount(v4);
    size_t BytesPerElementOfPlane = IOSurfaceGetBytesPerElementOfPlane(*(IOSurfaceRef *)(a1 + 1024), *(unsigned __int16 *)(a1 + 1016));
    size_t v21 = IOSurfaceGetBytesPerElementOfPlane(v4, *(unsigned __int16 *)(a1 + 1016));
    size_t BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(*(IOSurfaceRef *)(a1 + 1024), *(unsigned __int16 *)(a1 + 1016));
    size_t v22 = IOSurfaceGetBytesPerRowOfPlane(v4, *(unsigned __int16 *)(a1 + 1016));
    if (((v5 >> 3) & 1) != IsTiled
      || PlaneCount != v20
      || v31 != v29
      || v28 != v33
      || ElementHeightOfPlane != v27
      || v26 != v32
      || BytesPerElementOfPlane != v21
      || !((*(_DWORD *)(a1 + 864) ^ v5) & 0xC | (BytesPerRowOfPlane == v22)))
    {
      CFRelease(v4);
      return 10005;
    }
    *(void *)(v12 + 816) = v4;
    *(_DWORD *)(a1 + 4 * v23 + 848) = v5;
  }
  uint64_t result = 0;
  *(void *)(a1 + 1024) = v4;
  *(_DWORD *)(a1 + 864) = v5;
  *(_DWORD *)(a1 + 780) = v8;
  *(unsigned char *)(a1 + 792) |= 8u;
  return result;
}

void gleCheckCopyTexSubImageArgs_cold_1()
{
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x270EE4300](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x270EE4320](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x270EE4360](theArray, idx);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x270EE47C8](allocator, bytes, length);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x270EE4808](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x270EE4820](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x270EE4838]();
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EE4920](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x270EE4948]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x270EE4958](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4E10](cf);
}

Boolean IOSurfaceAllowsPixelSizeCasting(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4C08](buffer);
}

void *__cdecl IOSurfaceGetBaseAddressOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return (void *)MEMORY[0x270EF4C80](buffer, planeIndex);
}

size_t IOSurfaceGetBytesPerElement(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4CA0](buffer);
}

size_t IOSurfaceGetBytesPerElementOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x270EF4CA8](buffer, planeIndex);
}

size_t IOSurfaceGetBytesPerRowOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x270EF4CC0](buffer, planeIndex);
}

size_t IOSurfaceGetElementHeightOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x270EF4D18](buffer, planeIndex);
}

size_t IOSurfaceGetElementWidthOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x270EF4D28](buffer, planeIndex);
}

size_t IOSurfaceGetHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4D48](buffer);
}

size_t IOSurfaceGetHeightOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x270EF4D58](buffer, planeIndex);
}

IOSurfaceID IOSurfaceGetID(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4D68](buffer);
}

size_t IOSurfaceGetPlaneCount(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4D88](buffer);
}

size_t IOSurfaceGetWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4DE0](buffer);
}

size_t IOSurfaceGetWidthOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x270EF4DF0](buffer, planeIndex);
}

uint64_t IOSurfaceIsTiled()
{
  return MEMORY[0x270EF4E10]();
}

uint64_t IOSurfaceLockPlane()
{
  return MEMORY[0x270EF4E20]();
}

IOSurfaceRef IOSurfaceLookup(IOSurfaceID csid)
{
  return (IOSurfaceRef)MEMORY[0x270EF4E28](*(void *)&csid);
}

uint64_t IOSurfaceUnlockPlane()
{
  return MEMORY[0x270EF4E90]();
}

uint64_t PPStreamAddAttribBinding()
{
  return MEMORY[0x270EF9E00]();
}

uint64_t PPStreamGetStream()
{
  return MEMORY[0x270EF9E08]();
}

uint64_t PPStreamTokenAddBlockInfo()
{
  return MEMORY[0x270EF9E10]();
}

uint64_t PPStreamTokenAddTexImages()
{
  return MEMORY[0x270EF9E18]();
}

uint64_t PPStreamTokenAddTexUnitInfo()
{
  return MEMORY[0x270EF9E20]();
}

uint64_t PPStreamTokenAlloc()
{
  return MEMORY[0x270EF9E28]();
}

uint64_t PPStreamTokenConvertAttribBindings()
{
  return MEMORY[0x270EF9E30]();
}

uint64_t PPStreamTokenConvertOutputBindings()
{
  return MEMORY[0x270EF9E38]();
}

uint64_t PPStreamTokenConvertParamBindings()
{
  return MEMORY[0x270EF9E40]();
}

uint64_t PPStreamTokenConvertParamBindingsToGeneric()
{
  return MEMORY[0x270EF9E48]();
}

uint64_t PPStreamTokenFree()
{
  return MEMORY[0x270EF9E50]();
}

uint64_t PPStreamTokenGetProgramOptions()
{
  return MEMORY[0x270EF9E58]();
}

uint64_t PPStreamTokenIsTrivialPassThrough()
{
  return MEMORY[0x270EF9E60]();
}

uint64_t PPStreamTokenValidateOptions()
{
  return MEMORY[0x270EF9E68]();
}

uint64_t ShAttributeBindingRequest()
{
  return MEMORY[0x270EF9E70]();
}

uint64_t ShCleanup()
{
  return MEMORY[0x270EF9E78]();
}

uint64_t ShCompile()
{
  return MEMORY[0x270EF9E80]();
}

uint64_t ShConstructCompiler()
{
  return MEMORY[0x270EF9E88]();
}

uint64_t ShConstructLinker()
{
  return MEMORY[0x270EF9E90]();
}

uint64_t ShDestruct()
{
  return MEMORY[0x270EF9E98]();
}

uint64_t ShGetActiveAttrib()
{
  return MEMORY[0x270EF9EA0]();
}

uint64_t ShGetActiveBindableUniformBufferIndexOffsetFromLocation()
{
  return MEMORY[0x270EF9EA8]();
}

uint64_t ShGetActiveBindableUniformBufferSizeTable()
{
  return MEMORY[0x270EF9EB0]();
}

uint64_t ShGetActiveNonbindableUniformsSize()
{
  return MEMORY[0x270EF9EB8]();
}

uint64_t ShGetActiveSamplerLocations()
{
  return MEMORY[0x270EF9EC0]();
}

uint64_t ShGetActiveSubroutineUniformName()
{
  return MEMORY[0x270EF9EC8]();
}

uint64_t ShGetActiveSubroutineUniformiv()
{
  return MEMORY[0x270EF9ED0]();
}

uint64_t ShGetActiveUniform()
{
  return MEMORY[0x270EF9ED8]();
}

uint64_t ShGetActiveUniformBlockName()
{
  return MEMORY[0x270EF9EE0]();
}

uint64_t ShGetActiveUniformBlockiv()
{
  return MEMORY[0x270EF9EE8]();
}

uint64_t ShGetActiveUniformIndex()
{
  return MEMORY[0x270EF9EF0]();
}

uint64_t ShGetAttribLocation()
{
  return MEMORY[0x270EF9EF8]();
}

uint64_t ShGetBindableUniformTypeInfo()
{
  return MEMORY[0x270EF9F00]();
}

uint64_t ShGetCachedUniformIndexTable()
{
  return MEMORY[0x270EF9F08]();
}

uint64_t ShGetCachedUniformIndexTableSize()
{
  return MEMORY[0x270EF9F10]();
}

uint64_t ShGetContextStateUniforms()
{
  return MEMORY[0x270EF9F18]();
}

uint64_t ShGetFragDataLocation()
{
  return MEMORY[0x270EF9F20]();
}

uint64_t ShGetInfoLog()
{
  return MEMORY[0x270EF9F28]();
}

uint64_t ShGetInteger()
{
  return MEMORY[0x270EF9F30]();
}

uint64_t ShGetLinkerPPStream()
{
  return MEMORY[0x270EF9F38]();
}

uint64_t ShGetMaxActiveSubroutineLength()
{
  return MEMORY[0x270EF9F40]();
}

uint64_t ShGetMaxActiveSubroutineUniformLength()
{
  return MEMORY[0x270EF9F48]();
}

uint64_t ShGetMaxActiveUniformBlockLength()
{
  return MEMORY[0x270EF9F50]();
}

uint64_t ShGetMaxActiveUniformLength()
{
  return MEMORY[0x270EF9F58]();
}

uint64_t ShGetMaxAttributeLength()
{
  return MEMORY[0x270EF9F60]();
}

uint64_t ShGetMaxTransformFeedbackVaryingLength()
{
  return MEMORY[0x270EF9F68]();
}

uint64_t ShGetNumActiveAttributes()
{
  return MEMORY[0x270EF9F70]();
}

uint64_t ShGetNumActiveSubroutineUniformLocations()
{
  return MEMORY[0x270EF9F78]();
}

uint64_t ShGetNumActiveSubroutineUniforms()
{
  return MEMORY[0x270EF9F80]();
}

uint64_t ShGetNumActiveSubroutines()
{
  return MEMORY[0x270EF9F88]();
}

uint64_t ShGetNumActiveUniformBlocks()
{
  return MEMORY[0x270EF9F90]();
}

uint64_t ShGetNumActiveUniforms()
{
  return MEMORY[0x270EF9F98]();
}

uint64_t ShGetNumActiveVaryingsComponents()
{
  return MEMORY[0x270EF9FA0]();
}

uint64_t ShGetNumBindableUniformBuffers()
{
  return MEMORY[0x270EF9FA8]();
}

uint64_t ShGetPPStreamManager()
{
  return MEMORY[0x270EF9FB0]();
}

uint64_t ShGetShaderByteCode()
{
  return MEMORY[0x270EF9FB8]();
}

uint64_t ShGetSubroutineUniformLocation()
{
  return MEMORY[0x270EF9FC0]();
}

uint64_t ShGetTransformFeedbackVarying()
{
  return MEMORY[0x270EF9FC8]();
}

uint64_t ShGetUniformBlockIndex()
{
  return MEMORY[0x270EF9FD0]();
}

uint64_t ShGetUniformIndex()
{
  return MEMORY[0x270EF9FD8]();
}

uint64_t ShGetUniformLocation()
{
  return MEMORY[0x270EF9FE0]();
}

uint64_t ShInitialize()
{
  return MEMORY[0x270EF9FE8]();
}

uint64_t ShInitializeLibrary()
{
  return MEMORY[0x270EF9FF0]();
}

uint64_t ShLink()
{
  return MEMORY[0x270EF9FF8]();
}

uint64_t ShSetInitialUniformValue()
{
  return MEMORY[0x270EFA000]();
}

uint64_t ShTerminateLibrary()
{
  return MEMORY[0x270EFA008]();
}

uint64_t ShTransformFeedbackVaryings()
{
  return MEMORY[0x270EFA010]();
}

uint64_t __CFSetLastAllocationEventName()
{
  return MEMORY[0x270EE57E8]();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

__float2 __sincosf_stret(float a1)
{
  MEMORY[0x270ED7E90](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

uint64_t __stpcpy_chk()
{
  return MEMORY[0x270ED7EC0]();
}

uint64_t __strlcat_chk()
{
  return MEMORY[0x270ED7ED8]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x270ED7EE0]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void abort(void)
{
}

void bzero(void *a1, size_t a2)
{
}

float cosf(float a1)
{
  MEMORY[0x270ED9130](a1);
  return result;
}

uint64_t cvmCreateHashMachine()
{
  return MEMORY[0x270EF9BA0]();
}

uint64_t cvmDestroyHashMachine()
{
  return MEMORY[0x270EF9BA8]();
}

uint64_t cvmHashMachineAddObject()
{
  return MEMORY[0x270EF9BB0]();
}

uint64_t cvmHashMachineFindObject()
{
  return MEMORY[0x270EF9BB8]();
}

uint64_t cvmHashObjectCreate()
{
  return MEMORY[0x270EF9BC0]();
}

uint64_t cvmHashObjectGetKey()
{
  return MEMORY[0x270EF9BC8]();
}

uint64_t cvmHashObjectGetObject()
{
  return MEMORY[0x270EF9BD0]();
}

uint64_t cvmHashObjectRelease()
{
  return MEMORY[0x270EF9BD8]();
}

uint64_t cvmPostTerm()
{
  return MEMORY[0x270EF9BE0]();
}

uint64_t cvmPreInit()
{
  return MEMORY[0x270EF9BE8]();
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x270ED94B8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x270ED94C8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x270ED94D0](dsema, timeout);
}

void dispatch_sync_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

float exp2f(float a1)
{
  MEMORY[0x270ED9868](a1);
  return result;
}

float expf(float a1)
{
  MEMORY[0x270ED9870](a1);
  return result;
}

void free(void *a1)
{
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x270ED9BE8](a1);
}

int getpagesize(void)
{
  return MEMORY[0x270ED9CC8]();
}

uint64_t gfxAllocateTextureLevel()
{
  return MEMORY[0x270EF9C48]();
}

uint64_t gfxClearSyncObjectsInHash()
{
  return MEMORY[0x270EF9C50]();
}

uint64_t gfxCompareSharedState()
{
  return MEMORY[0x270EF9C58]();
}

uint64_t gfxCreatePluginBuffer()
{
  return MEMORY[0x270EF9C60]();
}

uint64_t gfxCreatePluginTexture()
{
  return MEMORY[0x270EF9C68]();
}

uint64_t gfxCreateSharedState()
{
  return MEMORY[0x270EF9C70]();
}

uint64_t gfxDestroyPluginBuffer()
{
  return MEMORY[0x270EF9C78]();
}

uint64_t gfxDestroyPluginTexture()
{
  return MEMORY[0x270EF9C80]();
}

uint64_t gfxEvaluateTextureForGeometryChange()
{
  return MEMORY[0x270EF9C88]();
}

uint64_t gfxEvaluateTextureForParameterChange()
{
  return MEMORY[0x270EF9C90]();
}

uint64_t gfxFreeBufferObjectStorage()
{
  return MEMORY[0x270EF9C98]();
}

uint64_t gfxFreeTextureLevel()
{
  return MEMORY[0x270EF9CA0]();
}

uint64_t gfxGetDevices()
{
  return MEMORY[0x270EF9CA8]();
}

uint64_t gfxGetPluginWithDriverID()
{
  return MEMORY[0x270EF9CB0]();
}

uint64_t gfxGetPlugins()
{
  return MEMORY[0x270EF9CB8]();
}

uint64_t gfxInitializeBufferObject()
{
  return MEMORY[0x270EF9CC0]();
}

uint64_t gfxInitializeGLSamplerPluginState()
{
  return MEMORY[0x270EF9CC8]();
}

uint64_t gfxInitializeGLSamplerState()
{
  return MEMORY[0x270EF9CD0]();
}

uint64_t gfxInitializeGLTexture()
{
  return MEMORY[0x270EF9CD8]();
}

uint64_t gfxInitializeGLTexturePluginState()
{
  return MEMORY[0x270EF9CE0]();
}

uint64_t gfxInitializeLibrary()
{
  return MEMORY[0x270EF9CE8]();
}

uint64_t gfxLibAlloc()
{
  return MEMORY[0x270EF9CF0]();
}

uint64_t gfxLibCalloc()
{
  return MEMORY[0x270EF9CF8]();
}

uint64_t gfxLibFree()
{
  return MEMORY[0x270EF9D00]();
}

uint64_t gfxModifyPluginTextureLevel()
{
  return MEMORY[0x270EF9D10]();
}

uint64_t gfxPixelBytes()
{
  return MEMORY[0x270EF9D18]();
}

uint64_t gfxReleaseSharedStateAndHash()
{
  return MEMORY[0x270EF9D28]();
}

uint64_t gfxReqToBase()
{
  return MEMORY[0x270EF9D30]();
}

uint64_t gfxRetainSharedStateAndHash()
{
  return MEMORY[0x270EF9D38]();
}

uint64_t gfxSetShaderDetachFunc()
{
  return MEMORY[0x270EF9D40]();
}

uint64_t gfxSetSharedFreeFunc()
{
  return MEMORY[0x270EF9D48]();
}

uint64_t gfxSynchronizeTexLevelStorage()
{
  return MEMORY[0x270EF9D50]();
}

uint64_t gfxTextureLevelBytes()
{
  return MEMORY[0x270EF9D58]();
}

uint64_t gfxUpdatePluginTextureLevelGeometry()
{
  return MEMORY[0x270EF9D60]();
}

uint64_t gfxUpdateTextureForGeometryChange()
{
  return MEMORY[0x270EF9D68]();
}

uint64_t gfxUpdateTextureForParameterChange()
{
  return MEMORY[0x270EF9D70]();
}

uint64_t gfxUploadPluginBufferData()
{
  return MEMORY[0x270EF9D78]();
}

uint64_t gfxUploadPluginTextureLevel()
{
  return MEMORY[0x270EF9D80]();
}

uint64_t gfxWaitBufferOnDevices()
{
  return MEMORY[0x270EF9D88]();
}

uint64_t gfxWaitTextureOnDevices()
{
  return MEMORY[0x270EF9D90]();
}

uint64_t glgConvertPixelHeightToBlocks()
{
  return MEMORY[0x270EF9D98]();
}

uint64_t glgConvertPixelWidthToBlocks()
{
  return MEMORY[0x270EF9DA0]();
}

uint64_t glgConvertType()
{
  return MEMORY[0x270EF9DA8]();
}

uint64_t glgCreateProcessor()
{
  return MEMORY[0x270EF9DB0]();
}

uint64_t glgDestroyProcessor()
{
  return MEMORY[0x270EF9DB8]();
}

uint64_t glgGetCompressedBlockBytes()
{
  return MEMORY[0x270EF9DC0]();
}

uint64_t glgGetCompressedBlockHeight()
{
  return MEMORY[0x270EF9DC8]();
}

uint64_t glgGetCompressedBlockWidth()
{
  return MEMORY[0x270EF9DD0]();
}

uint64_t glgGetCompressedImageBytes()
{
  return MEMORY[0x270EF9DD8]();
}

uint64_t glgProcessPixelsWithProcessor()
{
  return MEMORY[0x270EF9DE8]();
}

uint64_t glgTerminateLibrary()
{
  return MEMORY[0x270EF9DF8]();
}

void j__gliAttachDrawableWithOptions()
{
  while (1)
    ;
}

void j__gliCreateContextWithShared()
{
  while (1)
    ;
}

void j__gliDestroyContext()
{
  while (1)
    ;
}

void j__gliDestroyPixelFormat()
{
  while (1)
    ;
}

void j__gliGetInteger()
{
  while (1)
    ;
}

void j__gliSetInteger()
{
  while (1)
    ;
}

uint64_t glpCallFragmentStateToLLVMIR()
{
  return MEMORY[0x270EFA018]();
}

uint64_t glpCallVertexStateToLLVMIR()
{
  return MEMORY[0x270EFA020]();
}

uint64_t glpFragmentStateToPPStream()
{
  return MEMORY[0x270EFA028]();
}

uint64_t glpPPShaderLinearize()
{
  return MEMORY[0x270EFA030]();
}

uint64_t glpVertexStateToPPStream()
{
  return MEMORY[0x270EFA038]();
}

uint64_t glsmAllocateTextureLevels()
{
  return MEMORY[0x270EFA040]();
}

uint64_t glsmCreateBuffer()
{
  return MEMORY[0x270EFA048]();
}

uint64_t glsmCreateSampler()
{
  return MEMORY[0x270EFA050]();
}

uint64_t glsmCreateTexture()
{
  return MEMORY[0x270EFA058]();
}

uint64_t glsmDestroyBuffer()
{
  return MEMORY[0x270EFA060]();
}

uint64_t glsmDestroySampler()
{
  return MEMORY[0x270EFA068]();
}

uint64_t glsmDestroyTexture()
{
  return MEMORY[0x270EFA070]();
}

uint64_t glsmLoadTextureStructure()
{
  return MEMORY[0x270EFA078]();
}

uint64_t glsmUpdateTexImageDataInPPStream()
{
  return MEMORY[0x270EFA080]();
}

uint64_t glvmGetConstants()
{
  return MEMORY[0x270EFA088]();
}

uint64_t glvmInterpretGPTransformPrimitive()
{
  return MEMORY[0x270EFA090]();
}

uint64_t glvmInterpretVPTransformFour()
{
  return MEMORY[0x270EFA098]();
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x270EDA138]();
}

kern_return_t mach_make_memory_entry_64(vm_map_t target_task, memory_object_size_t *size, memory_object_offset_t offset, vm_prot_t permission, mach_port_t *object_handle, mem_entry_name_port_t parent_entry)
{
  return MEMORY[0x270EDA180](*(void *)&target_task, size, offset, *(void *)&permission, object_handle, *(void *)&parent_entry);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x270EDA1C8](*(void *)&task, *(void *)&name);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x270EDA288](info);
}

kern_return_t mach_vm_allocate(vm_map_t target, mach_vm_address_t *address, mach_vm_size_t size, int flags)
{
  return MEMORY[0x270EDA290](*(void *)&target, address, size, *(void *)&flags);
}

kern_return_t mach_vm_deallocate(vm_map_t target, mach_vm_address_t address, mach_vm_size_t size)
{
  return MEMORY[0x270EDA298](*(void *)&target, address, size);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA388](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA3A0](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

void memset_pattern4(void *__b, const void *__pattern4, size_t __len)
{
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x270EDAB40]();
}

float powf(float a1, float a2)
{
  MEMORY[0x270EDAD00](a1, a2);
  return result;
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF50](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x270EDAF58](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF60](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF70](a1);
}

int sched_yield(void)
{
  return MEMORY[0x270EDB320]();
}

int snprintf_l(char *a1, size_t a2, locale_t a3, const char *a4, ...)
{
  return MEMORY[0x270EDB518](a1, a2, a3, a4);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x270EDB5C0](__dst, __src);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

char *__cdecl strnstr(const char *__big, const char *__little, size_t __len)
{
  return (char *)MEMORY[0x270EDB660](__big, __little, __len);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x270EDB680](__s, *(void *)&__c);
}

char *__cdecl strsep(char **__stringp, const char *__delim)
{
  return (char *)MEMORY[0x270EDB688](__stringp, __delim);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x270EDB6A0](__s1, __s2);
}